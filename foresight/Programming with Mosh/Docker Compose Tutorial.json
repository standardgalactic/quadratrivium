{"text": " In this video, you're going to learn about Docker Compose, so by the end of this video, you'll be able to use Docker commands with confidence. Hi, I'm Mosh Hamidani, and I've taught millions of people how to code through this channel at my online school code with Mosh.com. This video is part of my ultimate Docker course, so once you finish this video, if you want to learn more, you may want to look at the complete course. Now let's jump in and get started. Welcome back to another section of the ultimate Docker course. In this section, we're going to talk about running multi-container applications. So I'm going to give you a real-world application with three building blocks, a front-end built with React, a back-end built with Node, and a MongoDB database. Once again, you don't need to be familiar or use any of these tools. Our focus here is on Docker and not on development tools. I think this is the most exciting part of this course, where you can see everything coming together. So we're going to talk about Docker Compose for building and running multi-container applications. We'll also talk about Docker networking, database migration, and running automated tests. So let's jump in and get started. In this section, we're going to use a tool called Docker Compose, which is built on top of Docker Engine. It makes it incredibly easy to start applications with multiple containers. So Google Docker Compose install. You will find this page, docs.docker.com, slash compose, slash install. On this page, you can see the installation instructions. Now at the time of recording this, Docker Compose is shipped with Docker desktop for Mac and Windows. So if you're on Mac or Windows, you don't have to do anything extra. You already have Docker Compose. To verify it, just go to the terminal window and type Docker Compose dash dash version. So I'm running Docker Compose version 1.28.5. Make sure your version is the same or newer. If you're using an older version, again, Google upgrade Docker Compose, or you might just install the latest version of Docker. Now back to this page. If you're using Windows Server or Linux, there are specific instructions you have to follow to install Docker Compose. So go ahead and install Docker Compose and I will see you in the next lesson. Before we get started, I want to show you a couple of techniques for cleaning up our workspace. So on this machine, we have a bunch of images and some running containers. They're getting in the way. I want to get rid of them all. How do we do this? Well, you know that we can remove images using Docker image remove command. And here we can type one or more image IDs. Now how can we get all image IDs and pass them here? Let me show you a cool trick. So we can run Docker image LS. We see all the images, right? But if you pass dash Q at the end, we only get image IDs. Now we can pass this as an argument to Docker image remove. So Docker image remove. Now here we add a dollar sign and in parenthesis, we type that other command. So Docker image LS dash Q. Now if we run this, we're going to get an error because some of these images are already in running containers or stopped containers. So we should always remove containers first. We're going to do that using the same technique. So I'm going to replace image with container. So we get all container IDs and then we're going to remove them all in one go. Also I would like to add dash A here as well. This will bring stopped containers as well, okay? We can also combine switches. That's another technique. Let's go ahead. All right, we get an error saying you cannot remove a running container because I forgot to pass the force option. So let's bring this up one more time. When removing, we're going to use dash F, okay? Great. So all these containers are removed. Now let's remove the images. So Docker image LS and Docker image remove. Great. Now take a look. We don't have any images here and no containers, including stopped containers. So we have a clean workspace. That's one way. There is a shortcut for this as well. If you're on Mac, you can find the Docker icon on the top status bar. If you're on Windows, you will find it in your notification tray. Let's click on this and then go to preferences. Now on this page, let's click on the troubleshoot icon. On this page, we have a bunch of useful utilities. For example, we can restart Docker desktop. We can also clean and purge data. This will essentially remove everything in Docker, your images, your containers, your volumes and so on. Now be aware that if you click on this, this is going to restart Docker engine. So on the top, look, you can see this animation showing that the Docker engine is not started yet. So at this point, if you go to the terminal window and execute any of Docker commands, you're going to get an error. So you'll have to wait about half a minute for the Docker engine to start. That's another way. So now that we have a clean workspace, next we're going to talk about our application. So in this next section, we're going to look at a real-world application with multiple building blocks, a front end, a back end and a database. So below this video, I've attached a Z file. Go ahead and download it. Inside that Z file, you're going to find this folder structure. We have this backend folder, which is our node project. This is a basic node project that starts a web server on port 3001. Once again, you don't need to know node to go through this section. Then we have the front end project, which is a React application that talks to the back end. Now, if you want to run this application outside of Docker, there are a number of steps we have to follow. Let's say we just check this out from a GitHub repository. First we have to go to our back end project, install all dependencies and then start the web server. At the same time, we have to open up another terminal window and do the same steps with our front end project. So we have to go to the front end project, install all the dependencies and then start the web server. And of course, we need two more terminal windows for running our front end and back end tests. And not to mention that, we should also download and install MongoDB on this machine. So there are so many steps we have to follow the moment we check out the source code from our GitHub repository. Now with Docker, we don't have to do any of these things. All we have to do is run a single command. Let me show you. So I'm going to get outside of the front end folder. Now we are in the root of this project. If you look, here we have a file called Docker Compose, which is used for composing a multi-container application. We're going to talk about that in detail soon. Now, once we have this file in our project, we can simply run Docker Compose up. That's all we have to do. Now, Docker is automatically downloading this particular version of MongoDB, so it's downloading all these layers. Then at the same time, it's going to install all the dependencies for our front end and back end projects. It will start web servers and run automated tests all in this window. Now, this is going to take a little while, so I'll be right back. All right, our application is up and running, and we can access it at localhost for 3000. So here's what we get. We have a mini application for managing a list of movies. Now, you know what's the beauty here? The beauty is that our database is populated with these movies as part of bringing up our application. I didn't have to manually insert these movies in our database. So we have a migration script for populating our database, and Docker automatically executed our migration script as part of bringing up this application. This is a very common real-world scenario. Now, here we can add new movies, movie one, movie two, whatever, and we can also delete these movies. So, we brought up this application using a single command. Now, I briefly mentioned this file, docker-compose.yaml. Before we talk about this file, first you need to understand the YAML format. This is a format that a lot of people are not familiar with. So in the next lesson, we're going to talk about JSON and YAML formats. Let's talk about JSON and YAML formats. If you know this format as well, feel free to skip this lesson. So in the root of this project, we're going to add a new file called data.json.json, as you probably know is a language, it's a human-readable language for representing data. So in this JSON file, we can have an object or an array, let's say we want to represent a course. A course can have properties like name, price, and so on. So in this object, we can add one or more key value pairs. Our keys should always be surrounded in double quotes. So we can add a key called name, and set its value to, we can use a string, the ultimate docker course, then we add a comma to define the next key value pair. So we can say price, we can set this to a number. Now the value can also be a boolean, so we can define another key value pair, and set the value to true or false. We can define another key value pair, and set the value to an array. So we define an array using square brackets. Now in this array, we can have any valid objects. So we can have strings, numbers, booleans, or other objects. So I'm going to add a couple of strings, let's say software and DevOps. And one last key value pair, author, I'm going to make this an object, so once again we use curly braces to define an object. In this object, we add a couple of key value pairs, first name is mosh, and last name is what? I'm a darling, and yes, I am Iranian, I get that question all the time. Alright, so here we have a JSON file, now let's see how we can convert this to YAML. YAML is another language for presenting data, but it has less clutter than JSON, it's easier to read. So I'm going to copy all this code, here in the project, we're going to add a new file called datum.yaml, the extension can be YAML or YML. Now on the top, we add three hyphens to indicate the beginning of a YAML file, then we paste our code. Now in YAML, we don't use curly braces to indicate hierarchy. This idea has come from Python, if you have programmed in Python, you know that in Python we use indentation to represent hierarchy, so we don't have curly braces. So let's get rid of these braces, and remove the indentation, good. Now the next thing you need to know about YAML is that we don't have to use quotes. So we can bring up the replace dialog, and replace all these double quotes with nothing. That immediately takes a lot of clutter away. Also, we're not going to use commas to separate key value pairs. So on the top, we have name, price is published, and how do we represent a list or an array? We use hyphens. So I'm going to remove this, we press enter, add a tab on a new line, we type hyphen to define the first item in the list, software, then at the same indentation, we add the next item, DevOps. Now author is an object, but as I told you, we don't use curly braces, we use indentation. So because these two properties are indented, they belong to the author property, okay? So this is our YAML file, let's compare this with JSON. As you can see, YAML is easier to read and understand. Now why don't we use YAML all the time? Well, because parsing YAML files is a little bit slower than parsing JSON files, because the parser doesn't know if this is a string or a number, so it has to read everything as a string and then try to evaluate it. In contrast, in JSON, strings are represented using quotes and more specifically double quotes, so the parser knows that this is a string and it shouldn't evaluate it, okay? So quite often we use YAML files for configuration files and JSON for exchanging data between multiple computers, like a client and a server. So now that you understand these formats, next we're going to talk about compose files. Alright, let's see how we can create a compose file from scratch. So for this lesson, I'm going to rename this file to underline docker compose. We want to set it aside and create a new compose file from scratch. So here we are, the new file called docker-compose. All in lowercase, make sure to spell it properly, otherwise docker-compose is not going to find this file, because this is the default name that docker-compose assumes, okay? So YAML. Now the first thing that we need to set here is the version property. What version should we use? Well, let's search for docker-compose file. On this page, you can see various compose file formats and their compatibility with docker-engine. We are using the latest version of docker-engine, so I want to use the latest compose file format so we have access to the latest features. So we're going to set this to 3.8. Now here we need to wrap this number with double quotes, otherwise it will be evaluated as a number, but docker-compose expects this value to be a string. Why? I have no clue. Here's the version. Now in this file, we define various building blocks or services of our application. So we have a property called services. Now what services do we need here? Well, our application has a front-end, a back-end, and a database. Your application might have other moving parts, so you can define them here. Now these names are arbitrary, so we can call them anything. We can change this to db, we can change the back-end to api, and the front-end to well. The idea here is that we're defining various services and telling docker how to build images for each service and how to run these images. So here we're going to have properties, and the value of these properties will eventually be used when running our containers. So in the previous section, we had to manually run our containers using docker-run, and here we used parameters like dash-p for port mapping or dash-v for volume mapping. We also had to specify an image like react-app. All these values can be defined in our compose file. So we don't have to manually start our containers. Docker compose will take care of starting our containers under the hood. So for each service, we need to tell docker how to build an image for that service. So here we can use the build property and tell docker compose where it can find a docker file. So if you look at this project, you can see that in our back-end and front-end folders, we have a docker file. This docker file is almost identical to the one we created in the previous section. So we start from a node image, we create a user, we set our working directory, copy all the files and install the dependencies, then expose port 3001 and start the web server. We have a similar docker file in our front-end project. Let's have a quick look. So that was the back-end, here's the front-end, and here we have a docker file, almost identical. But the front-end application or the front-end server starts on a different port. That is the only difference. So each service should have its own docker file, okay? Now back to our compose file, for our web or front-end, we're going to set the build property to period, meaning current folder, slash front-end. This is where we have a docker file. For our API, we're going to set build to back-end. Now for our database, we're not going to build an image, we're going to pull an image from docker hop. So instead of the build property, we're going to use the image property. Now for this application, I'm going to use Mongo version 4.0-Xenial. So that is Mongo version 4 built on top of Xenial, which is Ubuntu version 16. Now if you look at docker hop, you can see that Mongo also has images built on top of Windows, but Windows images are very large, over two gigabytes. So that's why I prefer to use Linux images. So for any of these services, we can either build an image or pull it down. Now here we also have port mappings, so we set ports to. Now because we can have multiple port mappings, here we need to use the array or list syntax. So we use a hyphen, and then define a port mapping. So our frontend application starts on port 3000. So I want to map port 3000 of the host to port 3000 of the container running this image. That's similarly for our API, we're going to define a port mapping. This one is going to be 3001 to 3001. Now MongoDB by default, listens on port 27017. So I want to map the same port, so we can access MongoDB using a MongoDB client like MongoDB Compass. If you don't use MongoDB, you have the same concept with other database engines. All these database engines listen on a default port. You want to map that port so you can connect to your database engine using your favorite database client. What else do we have here? Back to this page for compose file. If you look at version three, on the right, you can see all valid properties. Now a lot of these are for really special cases, so you don't need to use them all the time, but the ones that we use most of the time are build or image. You also use ports, volumes, environment, and so on. So our API project needs an environment variable that tells where our database is. So here we set environment, and here we can use the list syntax because we can have multiple environment variables. So we set DB underline URL to, here we need to type a MongoDB connection string. These connection strings always start with MongoDB, colon, two forward slashes. Here we need to type the name of a host. So as I'll show you later in this section, when we start an application with Docker compose under the hood, a network is created. On this network, we're going to have three hosts. The name of these hosts are equal to the names we have defined here. So we're going to have a host called DB. So that is the connection string to our MongoDB server. Now on this server, we can have multiple databases. So we're going to specify the database name and the connection string as well. So this is one way to set an environment variable. But instead of using the list syntax, we can also use the object or property value syntax. So we get rid of the hyphen. We say DB URL is a property and this is the value of that property. I find the syntax more readable because we get color coding and it's just cleaner. That similarly we can add additional environment variables. Now we're almost there. The last thing we want to add here is a volume because we don't want MongoDB to rate data to the temporary file system of the container. So here we set volumes and again, we can have one or more volume mappings. So we had a hyphen. We're going to map a volume called Widley and of course we can call it anything. Widley is the name of this application in case you didn't notice. So we're going to map this volume to a directory inside the container. Now if you look at the documentation of MongoDB on Docker Hub or just a typical MongoDB documentation, you know that by default MongoDB stores its data in slash data slash DB. So we want to map this volume to this directory. So whatever that is written inside this directory is actually outside of this container. It's somewhere else in our volume. Now because we have used this volume here, we have to define it in our compose file. So we press enter, remove all the indentations. So now we are at the same level as services. Here we're going to define another property called volumes and here we're going to add another property called Widley with no value. I know this looks a little bit weird, but this is the syntax we have to follow. We just have to define the volume first before we can use it. So this is our compose file. Now we can make this more readable by adding line breaks in between these properties. We can also order these services any way we want. So currently I'm ordering them from front to back. We can also order them from back to front. So we will put database first, then API and then web. So we're done with our compose file. Next I'm going to show you how to build the images. Earlier I told you that Docker compose is built on top of Docker engine. So everything we have done with Docker engine like building images, listing them, starting containers and so on, all of these operations are also available using Docker compose. Let me show you. So we type Docker compose, without any arguments, enter, look, we have all these subcommands like we have RM for removing stopped containers, we have run, we have push, pull and so on. The difference is that any of these commands will apply to our application as a whole. So most of these commands will impact multiple services or multiple containers in our application. So let's look at Docker compose build and also use the help option. So we have a bunch of options here. A couple of them I want to point out that are useful to know is no cache. With this we can prevent caching when building the image. Sometimes you encounter weird issues and you want to make sure that cache is not used. In that case, you use this option. Another useful option is dash dash pull. With this, we can always pull a newer version of the image. That is also good to know. So in this lesson, I'm not going to use any of these. We're just going to run Docker compose build. This built our web and API services and as you noticed, our build was super fast because pretty much everything came from the cache. So let's run Docker images. So I have five images on this machine. With the front end, with the web, with the API, with the back end and Mongo. Mongo obviously came from Docker Hub. Now as part of this build process in this lesson, we built with the web and with the API. These two other images with the front end and back end were built when we started this application earlier. So back to our project. In this original compose file that I included in this project, look, I call these services front end and back end instead of web and API. That is why we have these two images, with the front end and with the back end. Also as you have noticed, when building images with Docker compose, our images are prefixed with the name of our application. Now where does this come from? It is the name of the directory. So currently we are inside a directory called Widley and that is why all these images are prefixed with Widley. I think this is a great convention. I got a question for you. If you look at the created column, you can see all these images were created an hour ago. But didn't we just build the web and API images? Why do you think this happened? Here's the answer. Because I built these images front end and back end an hour ago when I was recording the first lesson in this section. Now when building these new images, Docker used everything in the cache because all those files were already available, all those layers were there. So Docker didn't have to do a full rebuild. That is why we are still using the build from an hour ago. Now if you want to force a full rebuild, we can say Docker compose build dash dash no cache. All right, this is going to take a few seconds. So I'll be right back. All right, our images are built. So let's run Docker images. There you go. Look at the first two images, API and web were built less than a minute ago. So that's all about building images, next we're going to talk about starting the application. You briefly saw how we can start an application with Docker compose. We just type Docker compose up. Now if the images are ready, Docker compose will run them inside containers, otherwise it's going to build the images automatically. Now before executing this, let's look at the available options. So here we have a ton of options, a couple of them that are useful are build. With this we can force a rebuild every time we want to start our application. So we don't have to explicitly run Docker compose build and then up. We can combine the two using the build option. The other useful option is dash D for detached mode. So we will start these containers in the background. So take a look. All right. Now if we run Docker compose PS, we can see all the containers relevant to this application. In contrast, if you type Docker PS, we can see all the running containers across all applications. So here we have three containers, Vidly, API one, Vidly DB one and web one. Now what is this one? Well, we can start multiple containers from the same image. And this is used for high availability and scalability. And something we'll look at in the future. So here you can see the container. You can see what command started that container. So for our API, that was npm start. For our database, that was MongoD or MongoDemon process. And for our web front end, that was npm start as well. You can see all these containers are up and running. And over here, you can see port mappings. So now if we go to local host, port 3000, we can see our application. Beautiful. How do we take this down? Let's say we're done with this application and we want to free up resources. Back to the terminal, we type Docker compose down. This will stop and remove these containers. But the images are still there. So next time we want to start the application, our application will start pretty quickly. Let's talk about networking in Docker. Let me run our application with Docker compose. Docker compose will automatically create a network and add our containers on that network. So these containers can talk to each other. Let's see this in action. So I'm going to bring up the application one more time in the detach mode. Good. Now look at the first line. Creating network with the default. So we can run Docker network LS. Here we can see all the networks on this machine. I think every Docker installation has three networks. Bridge, host, and none. Honestly, I'm not sure what these networks are for, but what matters here is that we have a network called Widley default. The driver for this network is bridge on Linux or NAT on Windows. Now this network contains three hosts or three containers, web, API, and DB. So these hosts or these containers can talk to each other using their name. Let's see this in action. So back to the terminal, let's look at the running containers. So we have Mongo, web, and API. Now we're going to start a shell session on the web container and ping the API container. Take a look. So we're going to execute in the interactive mode. The container ID is 8c6 and we're going to run shell. So let's ping API. We get a permission error because we have logged in with the app user that comes from our Docker file, remember? So we have logged in with the app user and this user doesn't have ping permission. So let's exit. I'm going to bring up the last command. Now here we have to use an extra option for setting the user. We're going to log in as the root user. Good. Now look at the shell prompt. We have a pound sign, which means we have the highest privileges. So here we can ping API. Now look, we're getting responses from a machine with this IP address. Now on your machine, this IP might be different. Now let's press Ctrl and C to get out of this. So this is what happens under the hood. Docker comes with an embedded DNS server that contains the name and IP of these containers. Now inside each container, we have a component called the DNS resolver. This DNS resolver talks to the DNS server to find the IP address of the target container. So when we ping the API container, this DNS resolver asks the server, what is the IP address of the API machine or API container? The DNS server returns the IP address and then the web container can directly talk to the API container using its IP address. So each container has an IP address and is part of a network. Let me show you one more thing. So back to the terminal, here we can run ifconfig to see the IP address of this container. Take a look. So this container has two network adapters, one of them is Ethernet zero and over here you can see the IP address of this container. So 172.21.02 is the IP address of the web container. Now back to our compose file, earlier when we defined the API service, we added an environment variable that contains a database connection string. In this connection string we have DB, which is the name of a host, that is the DB host or the DB container. You saw that our API container can talk to this container because both these containers or all containers in this application are part of the same network. Now one thing I want you to understand here is that this host is only available inside the Docker environment. So if I open up my browser and go to localhost slash DB, I'm not going to get anything. So the API container can directly talk to the DB container, but if you want to access this container we need port mappings and that is why we have this port mapping over here. So this port on the host is mapped to this port on the container. So if you open up MongoDB Compass, which is a popular MongoDB client, we can establish a connection to localhost port 27017, because this port is mapped to our container. Let's verify this real quick. So connect, great. So here we can see all our databases, here's our vitli database and in this database we have a collection called movies with four documents. So here are the movies that we currently have in the database. So this is all about Docker networking, next we're going to talk about viewing logs. Thank you so much for watching this video. As I said, this video is part of my ultimate Docker course that teaches you everything you need to know about Docker from the basics to more advanced concepts. So if you want to learn more, I highly encourage you to take a full course. It's much faster and better than jumping from one tutorial to another. If you're interested, the link is below this video. Thank you and have a great day.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 5.64, "text": " In this video, you're going to learn about Docker Compose, so by the end of this video,", "tokens": [50364, 682, 341, 960, 11, 291, 434, 516, 281, 1466, 466, 33772, 6620, 541, 11, 370, 538, 264, 917, 295, 341, 960, 11, 50646], "temperature": 0.0, "avg_logprob": -0.22392445518856957, "compression_ratio": 1.7228464419475655, "no_speech_prob": 0.029288707301020622}, {"id": 1, "seek": 0, "start": 5.64, "end": 8.16, "text": " you'll be able to use Docker commands with confidence.", "tokens": [50646, 291, 603, 312, 1075, 281, 764, 33772, 16901, 365, 6687, 13, 50772], "temperature": 0.0, "avg_logprob": -0.22392445518856957, "compression_ratio": 1.7228464419475655, "no_speech_prob": 0.029288707301020622}, {"id": 2, "seek": 0, "start": 8.16, "end": 13.24, "text": " Hi, I'm Mosh Hamidani, and I've taught millions of people how to code through this channel", "tokens": [50772, 2421, 11, 286, 478, 376, 3019, 8234, 327, 3782, 11, 293, 286, 600, 5928, 6803, 295, 561, 577, 281, 3089, 807, 341, 2269, 51026], "temperature": 0.0, "avg_logprob": -0.22392445518856957, "compression_ratio": 1.7228464419475655, "no_speech_prob": 0.029288707301020622}, {"id": 3, "seek": 0, "start": 13.24, "end": 16.0, "text": " at my online school code with Mosh.com.", "tokens": [51026, 412, 452, 2950, 1395, 3089, 365, 376, 3019, 13, 1112, 13, 51164], "temperature": 0.0, "avg_logprob": -0.22392445518856957, "compression_ratio": 1.7228464419475655, "no_speech_prob": 0.029288707301020622}, {"id": 4, "seek": 0, "start": 16.0, "end": 20.56, "text": " This video is part of my ultimate Docker course, so once you finish this video, if you want", "tokens": [51164, 639, 960, 307, 644, 295, 452, 9705, 33772, 1164, 11, 370, 1564, 291, 2413, 341, 960, 11, 498, 291, 528, 51392], "temperature": 0.0, "avg_logprob": -0.22392445518856957, "compression_ratio": 1.7228464419475655, "no_speech_prob": 0.029288707301020622}, {"id": 5, "seek": 0, "start": 20.56, "end": 23.52, "text": " to learn more, you may want to look at the complete course.", "tokens": [51392, 281, 1466, 544, 11, 291, 815, 528, 281, 574, 412, 264, 3566, 1164, 13, 51540], "temperature": 0.0, "avg_logprob": -0.22392445518856957, "compression_ratio": 1.7228464419475655, "no_speech_prob": 0.029288707301020622}, {"id": 6, "seek": 0, "start": 23.52, "end": 29.96, "text": " Now let's jump in and get started.", "tokens": [51540, 823, 718, 311, 3012, 294, 293, 483, 1409, 13, 51862], "temperature": 0.0, "avg_logprob": -0.22392445518856957, "compression_ratio": 1.7228464419475655, "no_speech_prob": 0.029288707301020622}, {"id": 7, "seek": 2996, "start": 29.96, "end": 32.92, "text": " Welcome back to another section of the ultimate Docker course.", "tokens": [50364, 4027, 646, 281, 1071, 3541, 295, 264, 9705, 33772, 1164, 13, 50512], "temperature": 0.0, "avg_logprob": -0.1315445511429398, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.007119813933968544}, {"id": 8, "seek": 2996, "start": 32.92, "end": 36.64, "text": " In this section, we're going to talk about running multi-container applications.", "tokens": [50512, 682, 341, 3541, 11, 321, 434, 516, 281, 751, 466, 2614, 4825, 12, 9000, 491, 260, 5821, 13, 50698], "temperature": 0.0, "avg_logprob": -0.1315445511429398, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.007119813933968544}, {"id": 9, "seek": 2996, "start": 36.64, "end": 41.160000000000004, "text": " So I'm going to give you a real-world application with three building blocks, a front-end built", "tokens": [50698, 407, 286, 478, 516, 281, 976, 291, 257, 957, 12, 13217, 3861, 365, 1045, 2390, 8474, 11, 257, 1868, 12, 521, 3094, 50924], "temperature": 0.0, "avg_logprob": -0.1315445511429398, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.007119813933968544}, {"id": 10, "seek": 2996, "start": 41.160000000000004, "end": 45.84, "text": " with React, a back-end built with Node, and a MongoDB database.", "tokens": [50924, 365, 30644, 11, 257, 646, 12, 521, 3094, 365, 38640, 11, 293, 257, 48380, 27735, 8149, 13, 51158], "temperature": 0.0, "avg_logprob": -0.1315445511429398, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.007119813933968544}, {"id": 11, "seek": 2996, "start": 45.84, "end": 49.2, "text": " Once again, you don't need to be familiar or use any of these tools.", "tokens": [51158, 3443, 797, 11, 291, 500, 380, 643, 281, 312, 4963, 420, 764, 604, 295, 613, 3873, 13, 51326], "temperature": 0.0, "avg_logprob": -0.1315445511429398, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.007119813933968544}, {"id": 12, "seek": 2996, "start": 49.2, "end": 52.8, "text": " Our focus here is on Docker and not on development tools.", "tokens": [51326, 2621, 1879, 510, 307, 322, 33772, 293, 406, 322, 3250, 3873, 13, 51506], "temperature": 0.0, "avg_logprob": -0.1315445511429398, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.007119813933968544}, {"id": 13, "seek": 2996, "start": 52.8, "end": 56.52, "text": " I think this is the most exciting part of this course, where you can see everything coming", "tokens": [51506, 286, 519, 341, 307, 264, 881, 4670, 644, 295, 341, 1164, 11, 689, 291, 393, 536, 1203, 1348, 51692], "temperature": 0.0, "avg_logprob": -0.1315445511429398, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.007119813933968544}, {"id": 14, "seek": 2996, "start": 56.52, "end": 57.52, "text": " together.", "tokens": [51692, 1214, 13, 51742], "temperature": 0.0, "avg_logprob": -0.1315445511429398, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.007119813933968544}, {"id": 15, "seek": 5752, "start": 57.52, "end": 62.080000000000005, "text": " So we're going to talk about Docker Compose for building and running multi-container applications.", "tokens": [50364, 407, 321, 434, 516, 281, 751, 466, 33772, 6620, 541, 337, 2390, 293, 2614, 4825, 12, 9000, 491, 260, 5821, 13, 50592], "temperature": 0.0, "avg_logprob": -0.17981338500976562, "compression_ratio": 1.6649746192893402, "no_speech_prob": 0.0014103223802521825}, {"id": 16, "seek": 5752, "start": 62.080000000000005, "end": 67.4, "text": " We'll also talk about Docker networking, database migration, and running automated tests.", "tokens": [50592, 492, 603, 611, 751, 466, 33772, 17985, 11, 8149, 17011, 11, 293, 2614, 18473, 6921, 13, 50858], "temperature": 0.0, "avg_logprob": -0.17981338500976562, "compression_ratio": 1.6649746192893402, "no_speech_prob": 0.0014103223802521825}, {"id": 17, "seek": 5752, "start": 67.4, "end": 80.36, "text": " So let's jump in and get started.", "tokens": [50858, 407, 718, 311, 3012, 294, 293, 483, 1409, 13, 51506], "temperature": 0.0, "avg_logprob": -0.17981338500976562, "compression_ratio": 1.6649746192893402, "no_speech_prob": 0.0014103223802521825}, {"id": 18, "seek": 5752, "start": 80.36, "end": 84.04, "text": " In this section, we're going to use a tool called Docker Compose, which is built on top", "tokens": [51506, 682, 341, 3541, 11, 321, 434, 516, 281, 764, 257, 2290, 1219, 33772, 6620, 541, 11, 597, 307, 3094, 322, 1192, 51690], "temperature": 0.0, "avg_logprob": -0.17981338500976562, "compression_ratio": 1.6649746192893402, "no_speech_prob": 0.0014103223802521825}, {"id": 19, "seek": 5752, "start": 84.04, "end": 85.48, "text": " of Docker Engine.", "tokens": [51690, 295, 33772, 7659, 13, 51762], "temperature": 0.0, "avg_logprob": -0.17981338500976562, "compression_ratio": 1.6649746192893402, "no_speech_prob": 0.0014103223802521825}, {"id": 20, "seek": 8548, "start": 85.48, "end": 89.88000000000001, "text": " It makes it incredibly easy to start applications with multiple containers.", "tokens": [50364, 467, 1669, 309, 6252, 1858, 281, 722, 5821, 365, 3866, 17089, 13, 50584], "temperature": 0.0, "avg_logprob": -0.18791279750587667, "compression_ratio": 1.7265625, "no_speech_prob": 0.12248291075229645}, {"id": 21, "seek": 8548, "start": 89.88000000000001, "end": 92.28, "text": " So Google Docker Compose install.", "tokens": [50584, 407, 3329, 33772, 6620, 541, 3625, 13, 50704], "temperature": 0.0, "avg_logprob": -0.18791279750587667, "compression_ratio": 1.7265625, "no_speech_prob": 0.12248291075229645}, {"id": 22, "seek": 8548, "start": 92.28, "end": 97.72, "text": " You will find this page, docs.docker.com, slash compose, slash install.", "tokens": [50704, 509, 486, 915, 341, 3028, 11, 45623, 13, 48341, 260, 13, 1112, 11, 17330, 35925, 11, 17330, 3625, 13, 50976], "temperature": 0.0, "avg_logprob": -0.18791279750587667, "compression_ratio": 1.7265625, "no_speech_prob": 0.12248291075229645}, {"id": 23, "seek": 8548, "start": 97.72, "end": 100.04, "text": " On this page, you can see the installation instructions.", "tokens": [50976, 1282, 341, 3028, 11, 291, 393, 536, 264, 13260, 9415, 13, 51092], "temperature": 0.0, "avg_logprob": -0.18791279750587667, "compression_ratio": 1.7265625, "no_speech_prob": 0.12248291075229645}, {"id": 24, "seek": 8548, "start": 100.04, "end": 106.24000000000001, "text": " Now at the time of recording this, Docker Compose is shipped with Docker desktop for Mac", "tokens": [51092, 823, 412, 264, 565, 295, 6613, 341, 11, 33772, 6620, 541, 307, 25312, 365, 33772, 14502, 337, 5707, 51402], "temperature": 0.0, "avg_logprob": -0.18791279750587667, "compression_ratio": 1.7265625, "no_speech_prob": 0.12248291075229645}, {"id": 25, "seek": 8548, "start": 106.24000000000001, "end": 107.24000000000001, "text": " and Windows.", "tokens": [51402, 293, 8591, 13, 51452], "temperature": 0.0, "avg_logprob": -0.18791279750587667, "compression_ratio": 1.7265625, "no_speech_prob": 0.12248291075229645}, {"id": 26, "seek": 8548, "start": 107.24000000000001, "end": 110.24000000000001, "text": " So if you're on Mac or Windows, you don't have to do anything extra.", "tokens": [51452, 407, 498, 291, 434, 322, 5707, 420, 8591, 11, 291, 500, 380, 362, 281, 360, 1340, 2857, 13, 51602], "temperature": 0.0, "avg_logprob": -0.18791279750587667, "compression_ratio": 1.7265625, "no_speech_prob": 0.12248291075229645}, {"id": 27, "seek": 8548, "start": 110.24000000000001, "end": 112.24000000000001, "text": " You already have Docker Compose.", "tokens": [51602, 509, 1217, 362, 33772, 6620, 541, 13, 51702], "temperature": 0.0, "avg_logprob": -0.18791279750587667, "compression_ratio": 1.7265625, "no_speech_prob": 0.12248291075229645}, {"id": 28, "seek": 11224, "start": 112.24, "end": 118.96, "text": " To verify it, just go to the terminal window and type Docker Compose dash dash version.", "tokens": [50364, 1407, 16888, 309, 11, 445, 352, 281, 264, 14709, 4910, 293, 2010, 33772, 6620, 541, 8240, 8240, 3037, 13, 50700], "temperature": 0.0, "avg_logprob": -0.16698023124977393, "compression_ratio": 1.6761133603238867, "no_speech_prob": 0.04023157060146332}, {"id": 29, "seek": 11224, "start": 118.96, "end": 123.36, "text": " So I'm running Docker Compose version 1.28.5.", "tokens": [50700, 407, 286, 478, 2614, 33772, 6620, 541, 3037, 502, 13, 11205, 13, 20, 13, 50920], "temperature": 0.0, "avg_logprob": -0.16698023124977393, "compression_ratio": 1.6761133603238867, "no_speech_prob": 0.04023157060146332}, {"id": 30, "seek": 11224, "start": 123.36, "end": 125.75999999999999, "text": " Make sure your version is the same or newer.", "tokens": [50920, 4387, 988, 428, 3037, 307, 264, 912, 420, 17628, 13, 51040], "temperature": 0.0, "avg_logprob": -0.16698023124977393, "compression_ratio": 1.6761133603238867, "no_speech_prob": 0.04023157060146332}, {"id": 31, "seek": 11224, "start": 125.75999999999999, "end": 131.16, "text": " If you're using an older version, again, Google upgrade Docker Compose, or you might", "tokens": [51040, 759, 291, 434, 1228, 364, 4906, 3037, 11, 797, 11, 3329, 11484, 33772, 6620, 541, 11, 420, 291, 1062, 51310], "temperature": 0.0, "avg_logprob": -0.16698023124977393, "compression_ratio": 1.6761133603238867, "no_speech_prob": 0.04023157060146332}, {"id": 32, "seek": 11224, "start": 131.16, "end": 134.32, "text": " just install the latest version of Docker.", "tokens": [51310, 445, 3625, 264, 6792, 3037, 295, 33772, 13, 51468], "temperature": 0.0, "avg_logprob": -0.16698023124977393, "compression_ratio": 1.6761133603238867, "no_speech_prob": 0.04023157060146332}, {"id": 33, "seek": 11224, "start": 134.32, "end": 136.24, "text": " Now back to this page.", "tokens": [51468, 823, 646, 281, 341, 3028, 13, 51564], "temperature": 0.0, "avg_logprob": -0.16698023124977393, "compression_ratio": 1.6761133603238867, "no_speech_prob": 0.04023157060146332}, {"id": 34, "seek": 11224, "start": 136.24, "end": 139.95999999999998, "text": " If you're using Windows Server or Linux, there are specific instructions you have to", "tokens": [51564, 759, 291, 434, 1228, 8591, 25684, 420, 18734, 11, 456, 366, 2685, 9415, 291, 362, 281, 51750], "temperature": 0.0, "avg_logprob": -0.16698023124977393, "compression_ratio": 1.6761133603238867, "no_speech_prob": 0.04023157060146332}, {"id": 35, "seek": 13996, "start": 139.96, "end": 142.76000000000002, "text": " follow to install Docker Compose.", "tokens": [50364, 1524, 281, 3625, 33772, 6620, 541, 13, 50504], "temperature": 0.0, "avg_logprob": -0.134922461934609, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.022624751552939415}, {"id": 36, "seek": 13996, "start": 142.76000000000002, "end": 153.28, "text": " So go ahead and install Docker Compose and I will see you in the next lesson.", "tokens": [50504, 407, 352, 2286, 293, 3625, 33772, 6620, 541, 293, 286, 486, 536, 291, 294, 264, 958, 6898, 13, 51030], "temperature": 0.0, "avg_logprob": -0.134922461934609, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.022624751552939415}, {"id": 37, "seek": 13996, "start": 153.28, "end": 156.32, "text": " Before we get started, I want to show you a couple of techniques for cleaning up our", "tokens": [51030, 4546, 321, 483, 1409, 11, 286, 528, 281, 855, 291, 257, 1916, 295, 7512, 337, 8924, 493, 527, 51182], "temperature": 0.0, "avg_logprob": -0.134922461934609, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.022624751552939415}, {"id": 38, "seek": 13996, "start": 156.32, "end": 157.68, "text": " workspace.", "tokens": [51182, 32706, 13, 51250], "temperature": 0.0, "avg_logprob": -0.134922461934609, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.022624751552939415}, {"id": 39, "seek": 13996, "start": 157.68, "end": 162.4, "text": " So on this machine, we have a bunch of images and some running containers.", "tokens": [51250, 407, 322, 341, 3479, 11, 321, 362, 257, 3840, 295, 5267, 293, 512, 2614, 17089, 13, 51486], "temperature": 0.0, "avg_logprob": -0.134922461934609, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.022624751552939415}, {"id": 40, "seek": 13996, "start": 162.4, "end": 163.4, "text": " They're getting in the way.", "tokens": [51486, 814, 434, 1242, 294, 264, 636, 13, 51536], "temperature": 0.0, "avg_logprob": -0.134922461934609, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.022624751552939415}, {"id": 41, "seek": 13996, "start": 163.4, "end": 165.12, "text": " I want to get rid of them all.", "tokens": [51536, 286, 528, 281, 483, 3973, 295, 552, 439, 13, 51622], "temperature": 0.0, "avg_logprob": -0.134922461934609, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.022624751552939415}, {"id": 42, "seek": 13996, "start": 165.12, "end": 166.12, "text": " How do we do this?", "tokens": [51622, 1012, 360, 321, 360, 341, 30, 51672], "temperature": 0.0, "avg_logprob": -0.134922461934609, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.022624751552939415}, {"id": 43, "seek": 16612, "start": 166.12, "end": 170.92000000000002, "text": " Well, you know that we can remove images using Docker image remove command.", "tokens": [50364, 1042, 11, 291, 458, 300, 321, 393, 4159, 5267, 1228, 33772, 3256, 4159, 5622, 13, 50604], "temperature": 0.0, "avg_logprob": -0.18543390127328727, "compression_ratio": 1.832579185520362, "no_speech_prob": 0.03903990983963013}, {"id": 44, "seek": 16612, "start": 170.92000000000002, "end": 174.12, "text": " And here we can type one or more image IDs.", "tokens": [50604, 400, 510, 321, 393, 2010, 472, 420, 544, 3256, 48212, 13, 50764], "temperature": 0.0, "avg_logprob": -0.18543390127328727, "compression_ratio": 1.832579185520362, "no_speech_prob": 0.03903990983963013}, {"id": 45, "seek": 16612, "start": 174.12, "end": 177.04, "text": " Now how can we get all image IDs and pass them here?", "tokens": [50764, 823, 577, 393, 321, 483, 439, 3256, 48212, 293, 1320, 552, 510, 30, 50910], "temperature": 0.0, "avg_logprob": -0.18543390127328727, "compression_ratio": 1.832579185520362, "no_speech_prob": 0.03903990983963013}, {"id": 46, "seek": 16612, "start": 177.04, "end": 178.56, "text": " Let me show you a cool trick.", "tokens": [50910, 961, 385, 855, 291, 257, 1627, 4282, 13, 50986], "temperature": 0.0, "avg_logprob": -0.18543390127328727, "compression_ratio": 1.832579185520362, "no_speech_prob": 0.03903990983963013}, {"id": 47, "seek": 16612, "start": 178.56, "end": 181.68, "text": " So we can run Docker image LS.", "tokens": [50986, 407, 321, 393, 1190, 33772, 3256, 36657, 13, 51142], "temperature": 0.0, "avg_logprob": -0.18543390127328727, "compression_ratio": 1.832579185520362, "no_speech_prob": 0.03903990983963013}, {"id": 48, "seek": 16612, "start": 181.68, "end": 183.32, "text": " We see all the images, right?", "tokens": [51142, 492, 536, 439, 264, 5267, 11, 558, 30, 51224], "temperature": 0.0, "avg_logprob": -0.18543390127328727, "compression_ratio": 1.832579185520362, "no_speech_prob": 0.03903990983963013}, {"id": 49, "seek": 16612, "start": 183.32, "end": 188.04000000000002, "text": " But if you pass dash Q at the end, we only get image IDs.", "tokens": [51224, 583, 498, 291, 1320, 8240, 1249, 412, 264, 917, 11, 321, 787, 483, 3256, 48212, 13, 51460], "temperature": 0.0, "avg_logprob": -0.18543390127328727, "compression_ratio": 1.832579185520362, "no_speech_prob": 0.03903990983963013}, {"id": 50, "seek": 16612, "start": 188.04000000000002, "end": 191.88, "text": " Now we can pass this as an argument to Docker image remove.", "tokens": [51460, 823, 321, 393, 1320, 341, 382, 364, 6770, 281, 33772, 3256, 4159, 13, 51652], "temperature": 0.0, "avg_logprob": -0.18543390127328727, "compression_ratio": 1.832579185520362, "no_speech_prob": 0.03903990983963013}, {"id": 51, "seek": 16612, "start": 191.88, "end": 193.8, "text": " So Docker image remove.", "tokens": [51652, 407, 33772, 3256, 4159, 13, 51748], "temperature": 0.0, "avg_logprob": -0.18543390127328727, "compression_ratio": 1.832579185520362, "no_speech_prob": 0.03903990983963013}, {"id": 52, "seek": 19380, "start": 194.48000000000002, "end": 199.72, "text": " Now here we add a dollar sign and in parenthesis, we type that other command.", "tokens": [50398, 823, 510, 321, 909, 257, 7241, 1465, 293, 294, 23350, 9374, 11, 321, 2010, 300, 661, 5622, 13, 50660], "temperature": 0.0, "avg_logprob": -0.19974456865762927, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.0024724064860492945}, {"id": 53, "seek": 19380, "start": 199.72, "end": 202.96, "text": " So Docker image LS dash Q.", "tokens": [50660, 407, 33772, 3256, 36657, 8240, 1249, 13, 50822], "temperature": 0.0, "avg_logprob": -0.19974456865762927, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.0024724064860492945}, {"id": 54, "seek": 19380, "start": 202.96, "end": 206.96, "text": " Now if we run this, we're going to get an error because some of these images are already", "tokens": [50822, 823, 498, 321, 1190, 341, 11, 321, 434, 516, 281, 483, 364, 6713, 570, 512, 295, 613, 5267, 366, 1217, 51022], "temperature": 0.0, "avg_logprob": -0.19974456865762927, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.0024724064860492945}, {"id": 55, "seek": 19380, "start": 206.96, "end": 210.28, "text": " in running containers or stopped containers.", "tokens": [51022, 294, 2614, 17089, 420, 5936, 17089, 13, 51188], "temperature": 0.0, "avg_logprob": -0.19974456865762927, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.0024724064860492945}, {"id": 56, "seek": 19380, "start": 210.28, "end": 212.12, "text": " So we should always remove containers first.", "tokens": [51188, 407, 321, 820, 1009, 4159, 17089, 700, 13, 51280], "temperature": 0.0, "avg_logprob": -0.19974456865762927, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.0024724064860492945}, {"id": 57, "seek": 19380, "start": 212.12, "end": 214.8, "text": " We're going to do that using the same technique.", "tokens": [51280, 492, 434, 516, 281, 360, 300, 1228, 264, 912, 6532, 13, 51414], "temperature": 0.0, "avg_logprob": -0.19974456865762927, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.0024724064860492945}, {"id": 58, "seek": 19380, "start": 214.8, "end": 218.68, "text": " So I'm going to replace image with container.", "tokens": [51414, 407, 286, 478, 516, 281, 7406, 3256, 365, 10129, 13, 51608], "temperature": 0.0, "avg_logprob": -0.19974456865762927, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.0024724064860492945}, {"id": 59, "seek": 21868, "start": 218.68, "end": 225.96, "text": " So we get all container IDs and then we're going to remove them all in one go.", "tokens": [50364, 407, 321, 483, 439, 10129, 48212, 293, 550, 321, 434, 516, 281, 4159, 552, 439, 294, 472, 352, 13, 50728], "temperature": 0.0, "avg_logprob": -0.1628782505891761, "compression_ratio": 1.5695652173913044, "no_speech_prob": 0.011507590301334858}, {"id": 60, "seek": 21868, "start": 225.96, "end": 229.84, "text": " Also I would like to add dash A here as well.", "tokens": [50728, 2743, 286, 576, 411, 281, 909, 8240, 316, 510, 382, 731, 13, 50922], "temperature": 0.0, "avg_logprob": -0.1628782505891761, "compression_ratio": 1.5695652173913044, "no_speech_prob": 0.011507590301334858}, {"id": 61, "seek": 21868, "start": 229.84, "end": 232.96, "text": " This will bring stopped containers as well, okay?", "tokens": [50922, 639, 486, 1565, 5936, 17089, 382, 731, 11, 1392, 30, 51078], "temperature": 0.0, "avg_logprob": -0.1628782505891761, "compression_ratio": 1.5695652173913044, "no_speech_prob": 0.011507590301334858}, {"id": 62, "seek": 21868, "start": 232.96, "end": 235.52, "text": " We can also combine switches.", "tokens": [51078, 492, 393, 611, 10432, 19458, 13, 51206], "temperature": 0.0, "avg_logprob": -0.1628782505891761, "compression_ratio": 1.5695652173913044, "no_speech_prob": 0.011507590301334858}, {"id": 63, "seek": 21868, "start": 235.52, "end": 236.88, "text": " That's another technique.", "tokens": [51206, 663, 311, 1071, 6532, 13, 51274], "temperature": 0.0, "avg_logprob": -0.1628782505891761, "compression_ratio": 1.5695652173913044, "no_speech_prob": 0.011507590301334858}, {"id": 64, "seek": 21868, "start": 236.88, "end": 237.88, "text": " Let's go ahead.", "tokens": [51274, 961, 311, 352, 2286, 13, 51324], "temperature": 0.0, "avg_logprob": -0.1628782505891761, "compression_ratio": 1.5695652173913044, "no_speech_prob": 0.011507590301334858}, {"id": 65, "seek": 21868, "start": 237.88, "end": 242.96, "text": " All right, we get an error saying you cannot remove a running container because I forgot", "tokens": [51324, 1057, 558, 11, 321, 483, 364, 6713, 1566, 291, 2644, 4159, 257, 2614, 10129, 570, 286, 5298, 51578], "temperature": 0.0, "avg_logprob": -0.1628782505891761, "compression_ratio": 1.5695652173913044, "no_speech_prob": 0.011507590301334858}, {"id": 66, "seek": 21868, "start": 242.96, "end": 244.88, "text": " to pass the force option.", "tokens": [51578, 281, 1320, 264, 3464, 3614, 13, 51674], "temperature": 0.0, "avg_logprob": -0.1628782505891761, "compression_ratio": 1.5695652173913044, "no_speech_prob": 0.011507590301334858}, {"id": 67, "seek": 24488, "start": 244.88, "end": 247.92, "text": " So let's bring this up one more time.", "tokens": [50364, 407, 718, 311, 1565, 341, 493, 472, 544, 565, 13, 50516], "temperature": 0.0, "avg_logprob": -0.2234738243950738, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.0001941113150678575}, {"id": 68, "seek": 24488, "start": 247.92, "end": 252.44, "text": " When removing, we're going to use dash F, okay?", "tokens": [50516, 1133, 12720, 11, 321, 434, 516, 281, 764, 8240, 479, 11, 1392, 30, 50742], "temperature": 0.0, "avg_logprob": -0.2234738243950738, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.0001941113150678575}, {"id": 69, "seek": 24488, "start": 252.44, "end": 253.88, "text": " Great.", "tokens": [50742, 3769, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2234738243950738, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.0001941113150678575}, {"id": 70, "seek": 24488, "start": 253.88, "end": 256.52, "text": " So all these containers are removed.", "tokens": [50814, 407, 439, 613, 17089, 366, 7261, 13, 50946], "temperature": 0.0, "avg_logprob": -0.2234738243950738, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.0001941113150678575}, {"id": 71, "seek": 24488, "start": 256.52, "end": 257.68, "text": " Now let's remove the images.", "tokens": [50946, 823, 718, 311, 4159, 264, 5267, 13, 51004], "temperature": 0.0, "avg_logprob": -0.2234738243950738, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.0001941113150678575}, {"id": 72, "seek": 24488, "start": 257.68, "end": 265.32, "text": " So Docker image LS and Docker image remove.", "tokens": [51004, 407, 33772, 3256, 36657, 293, 33772, 3256, 4159, 13, 51386], "temperature": 0.0, "avg_logprob": -0.2234738243950738, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.0001941113150678575}, {"id": 73, "seek": 24488, "start": 265.32, "end": 267.4, "text": " Great.", "tokens": [51386, 3769, 13, 51490], "temperature": 0.0, "avg_logprob": -0.2234738243950738, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.0001941113150678575}, {"id": 74, "seek": 24488, "start": 267.4, "end": 269.15999999999997, "text": " Now take a look.", "tokens": [51490, 823, 747, 257, 574, 13, 51578], "temperature": 0.0, "avg_logprob": -0.2234738243950738, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.0001941113150678575}, {"id": 75, "seek": 24488, "start": 269.15999999999997, "end": 274.8, "text": " We don't have any images here and no containers, including stopped containers.", "tokens": [51578, 492, 500, 380, 362, 604, 5267, 510, 293, 572, 17089, 11, 3009, 5936, 17089, 13, 51860], "temperature": 0.0, "avg_logprob": -0.2234738243950738, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.0001941113150678575}, {"id": 76, "seek": 27480, "start": 274.8, "end": 276.56, "text": " So we have a clean workspace.", "tokens": [50364, 407, 321, 362, 257, 2541, 32706, 13, 50452], "temperature": 0.0, "avg_logprob": -0.10405011213462771, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.14028435945510864}, {"id": 77, "seek": 27480, "start": 276.56, "end": 277.56, "text": " That's one way.", "tokens": [50452, 663, 311, 472, 636, 13, 50502], "temperature": 0.0, "avg_logprob": -0.10405011213462771, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.14028435945510864}, {"id": 78, "seek": 27480, "start": 277.56, "end": 279.64, "text": " There is a shortcut for this as well.", "tokens": [50502, 821, 307, 257, 24822, 337, 341, 382, 731, 13, 50606], "temperature": 0.0, "avg_logprob": -0.10405011213462771, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.14028435945510864}, {"id": 79, "seek": 27480, "start": 279.64, "end": 283.6, "text": " If you're on Mac, you can find the Docker icon on the top status bar.", "tokens": [50606, 759, 291, 434, 322, 5707, 11, 291, 393, 915, 264, 33772, 6528, 322, 264, 1192, 6558, 2159, 13, 50804], "temperature": 0.0, "avg_logprob": -0.10405011213462771, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.14028435945510864}, {"id": 80, "seek": 27480, "start": 283.6, "end": 286.88, "text": " If you're on Windows, you will find it in your notification tray.", "tokens": [50804, 759, 291, 434, 322, 8591, 11, 291, 486, 915, 309, 294, 428, 11554, 16027, 13, 50968], "temperature": 0.0, "avg_logprob": -0.10405011213462771, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.14028435945510864}, {"id": 81, "seek": 27480, "start": 286.88, "end": 291.08000000000004, "text": " Let's click on this and then go to preferences.", "tokens": [50968, 961, 311, 2052, 322, 341, 293, 550, 352, 281, 21910, 13, 51178], "temperature": 0.0, "avg_logprob": -0.10405011213462771, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.14028435945510864}, {"id": 82, "seek": 27480, "start": 291.08000000000004, "end": 294.64, "text": " Now on this page, let's click on the troubleshoot icon.", "tokens": [51178, 823, 322, 341, 3028, 11, 718, 311, 2052, 322, 264, 15379, 24467, 6528, 13, 51356], "temperature": 0.0, "avg_logprob": -0.10405011213462771, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.14028435945510864}, {"id": 83, "seek": 27480, "start": 294.64, "end": 297.2, "text": " On this page, we have a bunch of useful utilities.", "tokens": [51356, 1282, 341, 3028, 11, 321, 362, 257, 3840, 295, 4420, 30482, 13, 51484], "temperature": 0.0, "avg_logprob": -0.10405011213462771, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.14028435945510864}, {"id": 84, "seek": 27480, "start": 297.2, "end": 300.08000000000004, "text": " For example, we can restart Docker desktop.", "tokens": [51484, 1171, 1365, 11, 321, 393, 21022, 33772, 14502, 13, 51628], "temperature": 0.0, "avg_logprob": -0.10405011213462771, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.14028435945510864}, {"id": 85, "seek": 27480, "start": 300.08000000000004, "end": 302.64, "text": " We can also clean and purge data.", "tokens": [51628, 492, 393, 611, 2541, 293, 1864, 432, 1412, 13, 51756], "temperature": 0.0, "avg_logprob": -0.10405011213462771, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.14028435945510864}, {"id": 86, "seek": 30264, "start": 302.64, "end": 307.14, "text": " This will essentially remove everything in Docker, your images, your containers, your", "tokens": [50364, 639, 486, 4476, 4159, 1203, 294, 33772, 11, 428, 5267, 11, 428, 17089, 11, 428, 50589], "temperature": 0.0, "avg_logprob": -0.13122150509856467, "compression_ratio": 1.7678571428571428, "no_speech_prob": 0.02975717931985855}, {"id": 87, "seek": 30264, "start": 307.14, "end": 308.64, "text": " volumes and so on.", "tokens": [50589, 22219, 293, 370, 322, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13122150509856467, "compression_ratio": 1.7678571428571428, "no_speech_prob": 0.02975717931985855}, {"id": 88, "seek": 30264, "start": 308.64, "end": 314.03999999999996, "text": " Now be aware that if you click on this, this is going to restart Docker engine.", "tokens": [50664, 823, 312, 3650, 300, 498, 291, 2052, 322, 341, 11, 341, 307, 516, 281, 21022, 33772, 2848, 13, 50934], "temperature": 0.0, "avg_logprob": -0.13122150509856467, "compression_ratio": 1.7678571428571428, "no_speech_prob": 0.02975717931985855}, {"id": 89, "seek": 30264, "start": 314.03999999999996, "end": 319.28, "text": " So on the top, look, you can see this animation showing that the Docker engine is not started", "tokens": [50934, 407, 322, 264, 1192, 11, 574, 11, 291, 393, 536, 341, 9603, 4099, 300, 264, 33772, 2848, 307, 406, 1409, 51196], "temperature": 0.0, "avg_logprob": -0.13122150509856467, "compression_ratio": 1.7678571428571428, "no_speech_prob": 0.02975717931985855}, {"id": 90, "seek": 30264, "start": 319.28, "end": 320.28, "text": " yet.", "tokens": [51196, 1939, 13, 51246], "temperature": 0.0, "avg_logprob": -0.13122150509856467, "compression_ratio": 1.7678571428571428, "no_speech_prob": 0.02975717931985855}, {"id": 91, "seek": 30264, "start": 320.28, "end": 324.36, "text": " So at this point, if you go to the terminal window and execute any of Docker commands,", "tokens": [51246, 407, 412, 341, 935, 11, 498, 291, 352, 281, 264, 14709, 4910, 293, 14483, 604, 295, 33772, 16901, 11, 51450], "temperature": 0.0, "avg_logprob": -0.13122150509856467, "compression_ratio": 1.7678571428571428, "no_speech_prob": 0.02975717931985855}, {"id": 92, "seek": 30264, "start": 324.36, "end": 325.56, "text": " you're going to get an error.", "tokens": [51450, 291, 434, 516, 281, 483, 364, 6713, 13, 51510], "temperature": 0.0, "avg_logprob": -0.13122150509856467, "compression_ratio": 1.7678571428571428, "no_speech_prob": 0.02975717931985855}, {"id": 93, "seek": 30264, "start": 325.56, "end": 329.71999999999997, "text": " So you'll have to wait about half a minute for the Docker engine to start.", "tokens": [51510, 407, 291, 603, 362, 281, 1699, 466, 1922, 257, 3456, 337, 264, 33772, 2848, 281, 722, 13, 51718], "temperature": 0.0, "avg_logprob": -0.13122150509856467, "compression_ratio": 1.7678571428571428, "no_speech_prob": 0.02975717931985855}, {"id": 94, "seek": 30264, "start": 329.71999999999997, "end": 330.88, "text": " That's another way.", "tokens": [51718, 663, 311, 1071, 636, 13, 51776], "temperature": 0.0, "avg_logprob": -0.13122150509856467, "compression_ratio": 1.7678571428571428, "no_speech_prob": 0.02975717931985855}, {"id": 95, "seek": 33088, "start": 330.88, "end": 341.44, "text": " So now that we have a clean workspace, next we're going to talk about our application.", "tokens": [50364, 407, 586, 300, 321, 362, 257, 2541, 32706, 11, 958, 321, 434, 516, 281, 751, 466, 527, 3861, 13, 50892], "temperature": 0.0, "avg_logprob": -0.17034333092825754, "compression_ratio": 1.684, "no_speech_prob": 0.018544446676969528}, {"id": 96, "seek": 33088, "start": 341.44, "end": 344.36, "text": " So in this next section, we're going to look at a real-world application with multiple", "tokens": [50892, 407, 294, 341, 958, 3541, 11, 321, 434, 516, 281, 574, 412, 257, 957, 12, 13217, 3861, 365, 3866, 51038], "temperature": 0.0, "avg_logprob": -0.17034333092825754, "compression_ratio": 1.684, "no_speech_prob": 0.018544446676969528}, {"id": 97, "seek": 33088, "start": 344.36, "end": 348.38, "text": " building blocks, a front end, a back end and a database.", "tokens": [51038, 2390, 8474, 11, 257, 1868, 917, 11, 257, 646, 917, 293, 257, 8149, 13, 51239], "temperature": 0.0, "avg_logprob": -0.17034333092825754, "compression_ratio": 1.684, "no_speech_prob": 0.018544446676969528}, {"id": 98, "seek": 33088, "start": 348.38, "end": 350.96, "text": " So below this video, I've attached a Z file.", "tokens": [51239, 407, 2507, 341, 960, 11, 286, 600, 8570, 257, 1176, 3991, 13, 51368], "temperature": 0.0, "avg_logprob": -0.17034333092825754, "compression_ratio": 1.684, "no_speech_prob": 0.018544446676969528}, {"id": 99, "seek": 33088, "start": 350.96, "end": 352.6, "text": " Go ahead and download it.", "tokens": [51368, 1037, 2286, 293, 5484, 309, 13, 51450], "temperature": 0.0, "avg_logprob": -0.17034333092825754, "compression_ratio": 1.684, "no_speech_prob": 0.018544446676969528}, {"id": 100, "seek": 33088, "start": 352.6, "end": 355.36, "text": " Inside that Z file, you're going to find this folder structure.", "tokens": [51450, 15123, 300, 1176, 3991, 11, 291, 434, 516, 281, 915, 341, 10820, 3877, 13, 51588], "temperature": 0.0, "avg_logprob": -0.17034333092825754, "compression_ratio": 1.684, "no_speech_prob": 0.018544446676969528}, {"id": 101, "seek": 33088, "start": 355.36, "end": 358.84, "text": " We have this backend folder, which is our node project.", "tokens": [51588, 492, 362, 341, 38087, 10820, 11, 597, 307, 527, 9984, 1716, 13, 51762], "temperature": 0.0, "avg_logprob": -0.17034333092825754, "compression_ratio": 1.684, "no_speech_prob": 0.018544446676969528}, {"id": 102, "seek": 35884, "start": 358.84, "end": 364.11999999999995, "text": " This is a basic node project that starts a web server on port 3001.", "tokens": [50364, 639, 307, 257, 3875, 9984, 1716, 300, 3719, 257, 3670, 7154, 322, 2436, 6641, 16, 13, 50628], "temperature": 0.0, "avg_logprob": -0.13726783165564904, "compression_ratio": 1.6722972972972974, "no_speech_prob": 0.08267708122730255}, {"id": 103, "seek": 35884, "start": 364.11999999999995, "end": 367.64, "text": " Once again, you don't need to know node to go through this section.", "tokens": [50628, 3443, 797, 11, 291, 500, 380, 643, 281, 458, 9984, 281, 352, 807, 341, 3541, 13, 50804], "temperature": 0.0, "avg_logprob": -0.13726783165564904, "compression_ratio": 1.6722972972972974, "no_speech_prob": 0.08267708122730255}, {"id": 104, "seek": 35884, "start": 367.64, "end": 371.67999999999995, "text": " Then we have the front end project, which is a React application that talks to the back", "tokens": [50804, 1396, 321, 362, 264, 1868, 917, 1716, 11, 597, 307, 257, 30644, 3861, 300, 6686, 281, 264, 646, 51006], "temperature": 0.0, "avg_logprob": -0.13726783165564904, "compression_ratio": 1.6722972972972974, "no_speech_prob": 0.08267708122730255}, {"id": 105, "seek": 35884, "start": 371.67999999999995, "end": 372.67999999999995, "text": " end.", "tokens": [51006, 917, 13, 51056], "temperature": 0.0, "avg_logprob": -0.13726783165564904, "compression_ratio": 1.6722972972972974, "no_speech_prob": 0.08267708122730255}, {"id": 106, "seek": 35884, "start": 372.67999999999995, "end": 376.91999999999996, "text": " Now, if you want to run this application outside of Docker, there are a number of steps", "tokens": [51056, 823, 11, 498, 291, 528, 281, 1190, 341, 3861, 2380, 295, 33772, 11, 456, 366, 257, 1230, 295, 4439, 51268], "temperature": 0.0, "avg_logprob": -0.13726783165564904, "compression_ratio": 1.6722972972972974, "no_speech_prob": 0.08267708122730255}, {"id": 107, "seek": 35884, "start": 376.91999999999996, "end": 377.91999999999996, "text": " we have to follow.", "tokens": [51268, 321, 362, 281, 1524, 13, 51318], "temperature": 0.0, "avg_logprob": -0.13726783165564904, "compression_ratio": 1.6722972972972974, "no_speech_prob": 0.08267708122730255}, {"id": 108, "seek": 35884, "start": 377.91999999999996, "end": 382.52, "text": " Let's say we just check this out from a GitHub repository.", "tokens": [51318, 961, 311, 584, 321, 445, 1520, 341, 484, 490, 257, 23331, 25841, 13, 51548], "temperature": 0.0, "avg_logprob": -0.13726783165564904, "compression_ratio": 1.6722972972972974, "no_speech_prob": 0.08267708122730255}, {"id": 109, "seek": 35884, "start": 382.52, "end": 386.91999999999996, "text": " First we have to go to our back end project, install all dependencies and then start the", "tokens": [51548, 2386, 321, 362, 281, 352, 281, 527, 646, 917, 1716, 11, 3625, 439, 36606, 293, 550, 722, 264, 51768], "temperature": 0.0, "avg_logprob": -0.13726783165564904, "compression_ratio": 1.6722972972972974, "no_speech_prob": 0.08267708122730255}, {"id": 110, "seek": 35884, "start": 386.91999999999996, "end": 387.91999999999996, "text": " web server.", "tokens": [51768, 3670, 7154, 13, 51818], "temperature": 0.0, "avg_logprob": -0.13726783165564904, "compression_ratio": 1.6722972972972974, "no_speech_prob": 0.08267708122730255}, {"id": 111, "seek": 38792, "start": 388.0, "end": 393.0, "text": " At the same time, we have to open up another terminal window and do the same steps with", "tokens": [50368, 1711, 264, 912, 565, 11, 321, 362, 281, 1269, 493, 1071, 14709, 4910, 293, 360, 264, 912, 4439, 365, 50618], "temperature": 0.0, "avg_logprob": -0.12398973846435547, "compression_ratio": 1.8237410071942446, "no_speech_prob": 0.004467984661459923}, {"id": 112, "seek": 38792, "start": 393.0, "end": 394.32, "text": " our front end project.", "tokens": [50618, 527, 1868, 917, 1716, 13, 50684], "temperature": 0.0, "avg_logprob": -0.12398973846435547, "compression_ratio": 1.8237410071942446, "no_speech_prob": 0.004467984661459923}, {"id": 113, "seek": 38792, "start": 394.32, "end": 399.44, "text": " So we have to go to the front end project, install all the dependencies and then start", "tokens": [50684, 407, 321, 362, 281, 352, 281, 264, 1868, 917, 1716, 11, 3625, 439, 264, 36606, 293, 550, 722, 50940], "temperature": 0.0, "avg_logprob": -0.12398973846435547, "compression_ratio": 1.8237410071942446, "no_speech_prob": 0.004467984661459923}, {"id": 114, "seek": 38792, "start": 399.44, "end": 400.44, "text": " the web server.", "tokens": [50940, 264, 3670, 7154, 13, 50990], "temperature": 0.0, "avg_logprob": -0.12398973846435547, "compression_ratio": 1.8237410071942446, "no_speech_prob": 0.004467984661459923}, {"id": 115, "seek": 38792, "start": 400.44, "end": 405.76, "text": " And of course, we need two more terminal windows for running our front end and back end tests.", "tokens": [50990, 400, 295, 1164, 11, 321, 643, 732, 544, 14709, 9309, 337, 2614, 527, 1868, 917, 293, 646, 917, 6921, 13, 51256], "temperature": 0.0, "avg_logprob": -0.12398973846435547, "compression_ratio": 1.8237410071942446, "no_speech_prob": 0.004467984661459923}, {"id": 116, "seek": 38792, "start": 405.76, "end": 410.56, "text": " And not to mention that, we should also download and install MongoDB on this machine.", "tokens": [51256, 400, 406, 281, 2152, 300, 11, 321, 820, 611, 5484, 293, 3625, 48380, 27735, 322, 341, 3479, 13, 51496], "temperature": 0.0, "avg_logprob": -0.12398973846435547, "compression_ratio": 1.8237410071942446, "no_speech_prob": 0.004467984661459923}, {"id": 117, "seek": 38792, "start": 410.56, "end": 414.52000000000004, "text": " So there are so many steps we have to follow the moment we check out the source code from", "tokens": [51496, 407, 456, 366, 370, 867, 4439, 321, 362, 281, 1524, 264, 1623, 321, 1520, 484, 264, 4009, 3089, 490, 51694], "temperature": 0.0, "avg_logprob": -0.12398973846435547, "compression_ratio": 1.8237410071942446, "no_speech_prob": 0.004467984661459923}, {"id": 118, "seek": 38792, "start": 414.52000000000004, "end": 416.28000000000003, "text": " our GitHub repository.", "tokens": [51694, 527, 23331, 25841, 13, 51782], "temperature": 0.0, "avg_logprob": -0.12398973846435547, "compression_ratio": 1.8237410071942446, "no_speech_prob": 0.004467984661459923}, {"id": 119, "seek": 41628, "start": 416.28, "end": 419.4, "text": " Now with Docker, we don't have to do any of these things.", "tokens": [50364, 823, 365, 33772, 11, 321, 500, 380, 362, 281, 360, 604, 295, 613, 721, 13, 50520], "temperature": 0.0, "avg_logprob": -0.12541271869401285, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.001597806578502059}, {"id": 120, "seek": 41628, "start": 419.4, "end": 421.84, "text": " All we have to do is run a single command.", "tokens": [50520, 1057, 321, 362, 281, 360, 307, 1190, 257, 2167, 5622, 13, 50642], "temperature": 0.0, "avg_logprob": -0.12541271869401285, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.001597806578502059}, {"id": 121, "seek": 41628, "start": 421.84, "end": 422.84, "text": " Let me show you.", "tokens": [50642, 961, 385, 855, 291, 13, 50692], "temperature": 0.0, "avg_logprob": -0.12541271869401285, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.001597806578502059}, {"id": 122, "seek": 41628, "start": 422.84, "end": 426.71999999999997, "text": " So I'm going to get outside of the front end folder.", "tokens": [50692, 407, 286, 478, 516, 281, 483, 2380, 295, 264, 1868, 917, 10820, 13, 50886], "temperature": 0.0, "avg_logprob": -0.12541271869401285, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.001597806578502059}, {"id": 123, "seek": 41628, "start": 426.71999999999997, "end": 428.52, "text": " Now we are in the root of this project.", "tokens": [50886, 823, 321, 366, 294, 264, 5593, 295, 341, 1716, 13, 50976], "temperature": 0.0, "avg_logprob": -0.12541271869401285, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.001597806578502059}, {"id": 124, "seek": 41628, "start": 428.52, "end": 434.59999999999997, "text": " If you look, here we have a file called Docker Compose, which is used for composing a multi-container", "tokens": [50976, 759, 291, 574, 11, 510, 321, 362, 257, 3991, 1219, 33772, 6620, 541, 11, 597, 307, 1143, 337, 715, 6110, 257, 4825, 12, 9000, 491, 260, 51280], "temperature": 0.0, "avg_logprob": -0.12541271869401285, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.001597806578502059}, {"id": 125, "seek": 41628, "start": 434.59999999999997, "end": 435.59999999999997, "text": " application.", "tokens": [51280, 3861, 13, 51330], "temperature": 0.0, "avg_logprob": -0.12541271869401285, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.001597806578502059}, {"id": 126, "seek": 41628, "start": 435.59999999999997, "end": 437.96, "text": " We're going to talk about that in detail soon.", "tokens": [51330, 492, 434, 516, 281, 751, 466, 300, 294, 2607, 2321, 13, 51448], "temperature": 0.0, "avg_logprob": -0.12541271869401285, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.001597806578502059}, {"id": 127, "seek": 41628, "start": 437.96, "end": 444.79999999999995, "text": " Now, once we have this file in our project, we can simply run Docker Compose up.", "tokens": [51448, 823, 11, 1564, 321, 362, 341, 3991, 294, 527, 1716, 11, 321, 393, 2935, 1190, 33772, 6620, 541, 493, 13, 51790], "temperature": 0.0, "avg_logprob": -0.12541271869401285, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.001597806578502059}, {"id": 128, "seek": 44480, "start": 444.8, "end": 446.56, "text": " That's all we have to do.", "tokens": [50364, 663, 311, 439, 321, 362, 281, 360, 13, 50452], "temperature": 0.0, "avg_logprob": -0.20755805038824315, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.1421957015991211}, {"id": 129, "seek": 44480, "start": 446.56, "end": 451.96000000000004, "text": " Now, Docker is automatically downloading this particular version of MongoDB, so it's downloading", "tokens": [50452, 823, 11, 33772, 307, 6772, 32529, 341, 1729, 3037, 295, 48380, 27735, 11, 370, 309, 311, 32529, 50722], "temperature": 0.0, "avg_logprob": -0.20755805038824315, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.1421957015991211}, {"id": 130, "seek": 44480, "start": 451.96000000000004, "end": 453.52000000000004, "text": " all these layers.", "tokens": [50722, 439, 613, 7914, 13, 50800], "temperature": 0.0, "avg_logprob": -0.20755805038824315, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.1421957015991211}, {"id": 131, "seek": 44480, "start": 453.52000000000004, "end": 457.32, "text": " Then at the same time, it's going to install all the dependencies for our front end and", "tokens": [50800, 1396, 412, 264, 912, 565, 11, 309, 311, 516, 281, 3625, 439, 264, 36606, 337, 527, 1868, 917, 293, 50990], "temperature": 0.0, "avg_logprob": -0.20755805038824315, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.1421957015991211}, {"id": 132, "seek": 44480, "start": 457.32, "end": 458.32, "text": " back end projects.", "tokens": [50990, 646, 917, 4455, 13, 51040], "temperature": 0.0, "avg_logprob": -0.20755805038824315, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.1421957015991211}, {"id": 133, "seek": 44480, "start": 458.32, "end": 462.52, "text": " It will start web servers and run automated tests all in this window.", "tokens": [51040, 467, 486, 722, 3670, 15909, 293, 1190, 18473, 6921, 439, 294, 341, 4910, 13, 51250], "temperature": 0.0, "avg_logprob": -0.20755805038824315, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.1421957015991211}, {"id": 134, "seek": 44480, "start": 462.52, "end": 466.76, "text": " Now, this is going to take a little while, so I'll be right back.", "tokens": [51250, 823, 11, 341, 307, 516, 281, 747, 257, 707, 1339, 11, 370, 286, 603, 312, 558, 646, 13, 51462], "temperature": 0.0, "avg_logprob": -0.20755805038824315, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.1421957015991211}, {"id": 135, "seek": 44480, "start": 466.76, "end": 474.2, "text": " All right, our application is up and running, and we can access it at localhost for 3000.", "tokens": [51462, 1057, 558, 11, 527, 3861, 307, 493, 293, 2614, 11, 293, 321, 393, 2105, 309, 412, 2654, 6037, 337, 20984, 13, 51834], "temperature": 0.0, "avg_logprob": -0.20755805038824315, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.1421957015991211}, {"id": 136, "seek": 47420, "start": 474.2, "end": 476.12, "text": " So here's what we get.", "tokens": [50364, 407, 510, 311, 437, 321, 483, 13, 50460], "temperature": 0.0, "avg_logprob": -0.15541210821119406, "compression_ratio": 1.861003861003861, "no_speech_prob": 0.011686364188790321}, {"id": 137, "seek": 47420, "start": 476.12, "end": 478.8, "text": " We have a mini application for managing a list of movies.", "tokens": [50460, 492, 362, 257, 8382, 3861, 337, 11642, 257, 1329, 295, 6233, 13, 50594], "temperature": 0.0, "avg_logprob": -0.15541210821119406, "compression_ratio": 1.861003861003861, "no_speech_prob": 0.011686364188790321}, {"id": 138, "seek": 47420, "start": 478.8, "end": 480.88, "text": " Now, you know what's the beauty here?", "tokens": [50594, 823, 11, 291, 458, 437, 311, 264, 6643, 510, 30, 50698], "temperature": 0.0, "avg_logprob": -0.15541210821119406, "compression_ratio": 1.861003861003861, "no_speech_prob": 0.011686364188790321}, {"id": 139, "seek": 47420, "start": 480.88, "end": 485.68, "text": " The beauty is that our database is populated with these movies as part of bringing up our", "tokens": [50698, 440, 6643, 307, 300, 527, 8149, 307, 32998, 365, 613, 6233, 382, 644, 295, 5062, 493, 527, 50938], "temperature": 0.0, "avg_logprob": -0.15541210821119406, "compression_ratio": 1.861003861003861, "no_speech_prob": 0.011686364188790321}, {"id": 140, "seek": 47420, "start": 485.68, "end": 486.68, "text": " application.", "tokens": [50938, 3861, 13, 50988], "temperature": 0.0, "avg_logprob": -0.15541210821119406, "compression_ratio": 1.861003861003861, "no_speech_prob": 0.011686364188790321}, {"id": 141, "seek": 47420, "start": 486.68, "end": 489.76, "text": " I didn't have to manually insert these movies in our database.", "tokens": [50988, 286, 994, 380, 362, 281, 16945, 8969, 613, 6233, 294, 527, 8149, 13, 51142], "temperature": 0.0, "avg_logprob": -0.15541210821119406, "compression_ratio": 1.861003861003861, "no_speech_prob": 0.011686364188790321}, {"id": 142, "seek": 47420, "start": 489.76, "end": 495.12, "text": " So we have a migration script for populating our database, and Docker automatically executed", "tokens": [51142, 407, 321, 362, 257, 17011, 5755, 337, 1665, 12162, 527, 8149, 11, 293, 33772, 6772, 17577, 51410], "temperature": 0.0, "avg_logprob": -0.15541210821119406, "compression_ratio": 1.861003861003861, "no_speech_prob": 0.011686364188790321}, {"id": 143, "seek": 47420, "start": 495.12, "end": 498.68, "text": " our migration script as part of bringing up this application.", "tokens": [51410, 527, 17011, 5755, 382, 644, 295, 5062, 493, 341, 3861, 13, 51588], "temperature": 0.0, "avg_logprob": -0.15541210821119406, "compression_ratio": 1.861003861003861, "no_speech_prob": 0.011686364188790321}, {"id": 144, "seek": 47420, "start": 498.68, "end": 500.8, "text": " This is a very common real-world scenario.", "tokens": [51588, 639, 307, 257, 588, 2689, 957, 12, 13217, 9005, 13, 51694], "temperature": 0.0, "avg_logprob": -0.15541210821119406, "compression_ratio": 1.861003861003861, "no_speech_prob": 0.011686364188790321}, {"id": 145, "seek": 50080, "start": 501.36, "end": 507.40000000000003, "text": " Now, here we can add new movies, movie one, movie two, whatever, and we can also delete", "tokens": [50392, 823, 11, 510, 321, 393, 909, 777, 6233, 11, 3169, 472, 11, 3169, 732, 11, 2035, 11, 293, 321, 393, 611, 12097, 50694], "temperature": 0.0, "avg_logprob": -0.21854451077043519, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.001987636322155595}, {"id": 146, "seek": 50080, "start": 507.40000000000003, "end": 508.40000000000003, "text": " these movies.", "tokens": [50694, 613, 6233, 13, 50744], "temperature": 0.0, "avg_logprob": -0.21854451077043519, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.001987636322155595}, {"id": 147, "seek": 50080, "start": 508.40000000000003, "end": 511.44, "text": " So, we brought up this application using a single command.", "tokens": [50744, 407, 11, 321, 3038, 493, 341, 3861, 1228, 257, 2167, 5622, 13, 50896], "temperature": 0.0, "avg_logprob": -0.21854451077043519, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.001987636322155595}, {"id": 148, "seek": 50080, "start": 511.44, "end": 515.92, "text": " Now, I briefly mentioned this file, docker-compose.yaml.", "tokens": [50896, 823, 11, 286, 10515, 2835, 341, 3991, 11, 360, 9178, 12, 21541, 541, 13, 88, 335, 75, 13, 51120], "temperature": 0.0, "avg_logprob": -0.21854451077043519, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.001987636322155595}, {"id": 149, "seek": 50080, "start": 515.92, "end": 519.48, "text": " Before we talk about this file, first you need to understand the YAML format.", "tokens": [51120, 4546, 321, 751, 466, 341, 3991, 11, 700, 291, 643, 281, 1223, 264, 398, 2865, 43, 7877, 13, 51298], "temperature": 0.0, "avg_logprob": -0.21854451077043519, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.001987636322155595}, {"id": 150, "seek": 50080, "start": 519.48, "end": 521.76, "text": " This is a format that a lot of people are not familiar with.", "tokens": [51298, 639, 307, 257, 7877, 300, 257, 688, 295, 561, 366, 406, 4963, 365, 13, 51412], "temperature": 0.0, "avg_logprob": -0.21854451077043519, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.001987636322155595}, {"id": 151, "seek": 50080, "start": 521.76, "end": 525.24, "text": " So in the next lesson, we're going to talk about JSON and YAML formats.", "tokens": [51412, 407, 294, 264, 958, 6898, 11, 321, 434, 516, 281, 751, 466, 31828, 293, 398, 2865, 43, 25879, 13, 51586], "temperature": 0.0, "avg_logprob": -0.21854451077043519, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.001987636322155595}, {"id": 152, "seek": 53080, "start": 531.8, "end": 534.8399999999999, "text": " Let's talk about JSON and YAML formats.", "tokens": [50414, 961, 311, 751, 466, 31828, 293, 398, 2865, 43, 25879, 13, 50566], "temperature": 0.0, "avg_logprob": -0.1440928474305168, "compression_ratio": 1.6377358490566039, "no_speech_prob": 0.0014550373889505863}, {"id": 153, "seek": 53080, "start": 534.8399999999999, "end": 538.24, "text": " If you know this format as well, feel free to skip this lesson.", "tokens": [50566, 759, 291, 458, 341, 7877, 382, 731, 11, 841, 1737, 281, 10023, 341, 6898, 13, 50736], "temperature": 0.0, "avg_logprob": -0.1440928474305168, "compression_ratio": 1.6377358490566039, "no_speech_prob": 0.0014550373889505863}, {"id": 154, "seek": 53080, "start": 538.24, "end": 544.92, "text": " So in the root of this project, we're going to add a new file called data.json.json, as", "tokens": [50736, 407, 294, 264, 5593, 295, 341, 1716, 11, 321, 434, 516, 281, 909, 257, 777, 3991, 1219, 1412, 13, 73, 3015, 13, 73, 3015, 11, 382, 51070], "temperature": 0.0, "avg_logprob": -0.1440928474305168, "compression_ratio": 1.6377358490566039, "no_speech_prob": 0.0014550373889505863}, {"id": 155, "seek": 53080, "start": 544.92, "end": 549.9599999999999, "text": " you probably know is a language, it's a human-readable language for representing data.", "tokens": [51070, 291, 1391, 458, 307, 257, 2856, 11, 309, 311, 257, 1952, 12, 2538, 712, 2856, 337, 13460, 1412, 13, 51322], "temperature": 0.0, "avg_logprob": -0.1440928474305168, "compression_ratio": 1.6377358490566039, "no_speech_prob": 0.0014550373889505863}, {"id": 156, "seek": 53080, "start": 549.9599999999999, "end": 554.16, "text": " So in this JSON file, we can have an object or an array, let's say we want to represent", "tokens": [51322, 407, 294, 341, 31828, 3991, 11, 321, 393, 362, 364, 2657, 420, 364, 10225, 11, 718, 311, 584, 321, 528, 281, 2906, 51532], "temperature": 0.0, "avg_logprob": -0.1440928474305168, "compression_ratio": 1.6377358490566039, "no_speech_prob": 0.0014550373889505863}, {"id": 157, "seek": 53080, "start": 554.16, "end": 555.16, "text": " a course.", "tokens": [51532, 257, 1164, 13, 51582], "temperature": 0.0, "avg_logprob": -0.1440928474305168, "compression_ratio": 1.6377358490566039, "no_speech_prob": 0.0014550373889505863}, {"id": 158, "seek": 53080, "start": 555.16, "end": 558.5999999999999, "text": " A course can have properties like name, price, and so on.", "tokens": [51582, 316, 1164, 393, 362, 7221, 411, 1315, 11, 3218, 11, 293, 370, 322, 13, 51754], "temperature": 0.0, "avg_logprob": -0.1440928474305168, "compression_ratio": 1.6377358490566039, "no_speech_prob": 0.0014550373889505863}, {"id": 159, "seek": 55860, "start": 558.6, "end": 562.48, "text": " So in this object, we can add one or more key value pairs.", "tokens": [50364, 407, 294, 341, 2657, 11, 321, 393, 909, 472, 420, 544, 2141, 2158, 15494, 13, 50558], "temperature": 0.0, "avg_logprob": -0.14344474129054857, "compression_ratio": 1.8295964125560538, "no_speech_prob": 0.03513617068529129}, {"id": 160, "seek": 55860, "start": 562.48, "end": 565.12, "text": " Our keys should always be surrounded in double quotes.", "tokens": [50558, 2621, 9317, 820, 1009, 312, 13221, 294, 3834, 19963, 13, 50690], "temperature": 0.0, "avg_logprob": -0.14344474129054857, "compression_ratio": 1.8295964125560538, "no_speech_prob": 0.03513617068529129}, {"id": 161, "seek": 55860, "start": 565.12, "end": 570.8000000000001, "text": " So we can add a key called name, and set its value to, we can use a string, the ultimate", "tokens": [50690, 407, 321, 393, 909, 257, 2141, 1219, 1315, 11, 293, 992, 1080, 2158, 281, 11, 321, 393, 764, 257, 6798, 11, 264, 9705, 50974], "temperature": 0.0, "avg_logprob": -0.14344474129054857, "compression_ratio": 1.8295964125560538, "no_speech_prob": 0.03513617068529129}, {"id": 162, "seek": 55860, "start": 570.8000000000001, "end": 575.88, "text": " docker course, then we add a comma to define the next key value pair.", "tokens": [50974, 360, 9178, 1164, 11, 550, 321, 909, 257, 22117, 281, 6964, 264, 958, 2141, 2158, 6119, 13, 51228], "temperature": 0.0, "avg_logprob": -0.14344474129054857, "compression_ratio": 1.8295964125560538, "no_speech_prob": 0.03513617068529129}, {"id": 163, "seek": 55860, "start": 575.88, "end": 580.8000000000001, "text": " So we can say price, we can set this to a number.", "tokens": [51228, 407, 321, 393, 584, 3218, 11, 321, 393, 992, 341, 281, 257, 1230, 13, 51474], "temperature": 0.0, "avg_logprob": -0.14344474129054857, "compression_ratio": 1.8295964125560538, "no_speech_prob": 0.03513617068529129}, {"id": 164, "seek": 55860, "start": 580.8000000000001, "end": 585.6, "text": " Now the value can also be a boolean, so we can define another key value pair, and set", "tokens": [51474, 823, 264, 2158, 393, 611, 312, 257, 748, 4812, 282, 11, 370, 321, 393, 6964, 1071, 2141, 2158, 6119, 11, 293, 992, 51714], "temperature": 0.0, "avg_logprob": -0.14344474129054857, "compression_ratio": 1.8295964125560538, "no_speech_prob": 0.03513617068529129}, {"id": 165, "seek": 58560, "start": 585.6, "end": 588.6, "text": " the value to true or false.", "tokens": [50364, 264, 2158, 281, 2074, 420, 7908, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1548028370690724, "compression_ratio": 1.8072289156626506, "no_speech_prob": 0.03732304647564888}, {"id": 166, "seek": 58560, "start": 588.6, "end": 591.84, "text": " We can define another key value pair, and set the value to an array.", "tokens": [50514, 492, 393, 6964, 1071, 2141, 2158, 6119, 11, 293, 992, 264, 2158, 281, 364, 10225, 13, 50676], "temperature": 0.0, "avg_logprob": -0.1548028370690724, "compression_ratio": 1.8072289156626506, "no_speech_prob": 0.03732304647564888}, {"id": 167, "seek": 58560, "start": 591.84, "end": 594.6, "text": " So we define an array using square brackets.", "tokens": [50676, 407, 321, 6964, 364, 10225, 1228, 3732, 26179, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1548028370690724, "compression_ratio": 1.8072289156626506, "no_speech_prob": 0.03732304647564888}, {"id": 168, "seek": 58560, "start": 594.6, "end": 597.72, "text": " Now in this array, we can have any valid objects.", "tokens": [50814, 823, 294, 341, 10225, 11, 321, 393, 362, 604, 7363, 6565, 13, 50970], "temperature": 0.0, "avg_logprob": -0.1548028370690724, "compression_ratio": 1.8072289156626506, "no_speech_prob": 0.03732304647564888}, {"id": 169, "seek": 58560, "start": 597.72, "end": 601.96, "text": " So we can have strings, numbers, booleans, or other objects.", "tokens": [50970, 407, 321, 393, 362, 13985, 11, 3547, 11, 748, 4812, 599, 11, 420, 661, 6565, 13, 51182], "temperature": 0.0, "avg_logprob": -0.1548028370690724, "compression_ratio": 1.8072289156626506, "no_speech_prob": 0.03732304647564888}, {"id": 170, "seek": 58560, "start": 601.96, "end": 607.72, "text": " So I'm going to add a couple of strings, let's say software and DevOps.", "tokens": [51182, 407, 286, 478, 516, 281, 909, 257, 1916, 295, 13985, 11, 718, 311, 584, 4722, 293, 43051, 13, 51470], "temperature": 0.0, "avg_logprob": -0.1548028370690724, "compression_ratio": 1.8072289156626506, "no_speech_prob": 0.03732304647564888}, {"id": 171, "seek": 58560, "start": 607.72, "end": 612.84, "text": " And one last key value pair, author, I'm going to make this an object, so once again we use", "tokens": [51470, 400, 472, 1036, 2141, 2158, 6119, 11, 3793, 11, 286, 478, 516, 281, 652, 341, 364, 2657, 11, 370, 1564, 797, 321, 764, 51726], "temperature": 0.0, "avg_logprob": -0.1548028370690724, "compression_ratio": 1.8072289156626506, "no_speech_prob": 0.03732304647564888}, {"id": 172, "seek": 58560, "start": 612.84, "end": 615.38, "text": " curly braces to define an object.", "tokens": [51726, 32066, 41537, 281, 6964, 364, 2657, 13, 51853], "temperature": 0.0, "avg_logprob": -0.1548028370690724, "compression_ratio": 1.8072289156626506, "no_speech_prob": 0.03732304647564888}, {"id": 173, "seek": 61538, "start": 615.38, "end": 623.22, "text": " In this object, we add a couple of key value pairs, first name is mosh, and last name is", "tokens": [50364, 682, 341, 2657, 11, 321, 909, 257, 1916, 295, 2141, 2158, 15494, 11, 700, 1315, 307, 275, 3019, 11, 293, 1036, 1315, 307, 50756], "temperature": 0.0, "avg_logprob": -0.23700259556280118, "compression_ratio": 1.489451476793249, "no_speech_prob": 0.005819526966661215}, {"id": 174, "seek": 61538, "start": 623.22, "end": 624.22, "text": " what?", "tokens": [50756, 437, 30, 50806], "temperature": 0.0, "avg_logprob": -0.23700259556280118, "compression_ratio": 1.489451476793249, "no_speech_prob": 0.005819526966661215}, {"id": 175, "seek": 61538, "start": 624.22, "end": 629.62, "text": " I'm a darling, and yes, I am Iranian, I get that question all the time.", "tokens": [50806, 286, 478, 257, 22405, 11, 293, 2086, 11, 286, 669, 24934, 11, 286, 483, 300, 1168, 439, 264, 565, 13, 51076], "temperature": 0.0, "avg_logprob": -0.23700259556280118, "compression_ratio": 1.489451476793249, "no_speech_prob": 0.005819526966661215}, {"id": 176, "seek": 61538, "start": 629.62, "end": 634.26, "text": " Alright, so here we have a JSON file, now let's see how we can convert this to YAML.", "tokens": [51076, 2798, 11, 370, 510, 321, 362, 257, 31828, 3991, 11, 586, 718, 311, 536, 577, 321, 393, 7620, 341, 281, 398, 2865, 43, 13, 51308], "temperature": 0.0, "avg_logprob": -0.23700259556280118, "compression_ratio": 1.489451476793249, "no_speech_prob": 0.005819526966661215}, {"id": 177, "seek": 61538, "start": 634.26, "end": 639.38, "text": " YAML is another language for presenting data, but it has less clutter than JSON, it's easier", "tokens": [51308, 398, 2865, 43, 307, 1071, 2856, 337, 15578, 1412, 11, 457, 309, 575, 1570, 40614, 813, 31828, 11, 309, 311, 3571, 51564], "temperature": 0.0, "avg_logprob": -0.23700259556280118, "compression_ratio": 1.489451476793249, "no_speech_prob": 0.005819526966661215}, {"id": 178, "seek": 61538, "start": 639.38, "end": 640.46, "text": " to read.", "tokens": [51564, 281, 1401, 13, 51618], "temperature": 0.0, "avg_logprob": -0.23700259556280118, "compression_ratio": 1.489451476793249, "no_speech_prob": 0.005819526966661215}, {"id": 179, "seek": 64046, "start": 640.46, "end": 645.74, "text": " So I'm going to copy all this code, here in the project, we're going to add a new file", "tokens": [50364, 407, 286, 478, 516, 281, 5055, 439, 341, 3089, 11, 510, 294, 264, 1716, 11, 321, 434, 516, 281, 909, 257, 777, 3991, 50628], "temperature": 0.0, "avg_logprob": -0.18894016041475184, "compression_ratio": 1.6081632653061224, "no_speech_prob": 0.00037997536128386855}, {"id": 180, "seek": 64046, "start": 645.74, "end": 652.74, "text": " called datum.yaml, the extension can be YAML or YML.", "tokens": [50628, 1219, 1137, 449, 13, 88, 335, 75, 11, 264, 10320, 393, 312, 398, 2865, 43, 420, 398, 12683, 13, 50978], "temperature": 0.0, "avg_logprob": -0.18894016041475184, "compression_ratio": 1.6081632653061224, "no_speech_prob": 0.00037997536128386855}, {"id": 181, "seek": 64046, "start": 652.74, "end": 658.98, "text": " Now on the top, we add three hyphens to indicate the beginning of a YAML file, then we paste", "tokens": [50978, 823, 322, 264, 1192, 11, 321, 909, 1045, 2477, 950, 694, 281, 13330, 264, 2863, 295, 257, 398, 2865, 43, 3991, 11, 550, 321, 9163, 51290], "temperature": 0.0, "avg_logprob": -0.18894016041475184, "compression_ratio": 1.6081632653061224, "no_speech_prob": 0.00037997536128386855}, {"id": 182, "seek": 64046, "start": 658.98, "end": 659.98, "text": " our code.", "tokens": [51290, 527, 3089, 13, 51340], "temperature": 0.0, "avg_logprob": -0.18894016041475184, "compression_ratio": 1.6081632653061224, "no_speech_prob": 0.00037997536128386855}, {"id": 183, "seek": 64046, "start": 659.98, "end": 664.5400000000001, "text": " Now in YAML, we don't use curly braces to indicate hierarchy.", "tokens": [51340, 823, 294, 398, 2865, 43, 11, 321, 500, 380, 764, 32066, 41537, 281, 13330, 22333, 13, 51568], "temperature": 0.0, "avg_logprob": -0.18894016041475184, "compression_ratio": 1.6081632653061224, "no_speech_prob": 0.00037997536128386855}, {"id": 184, "seek": 64046, "start": 664.5400000000001, "end": 668.86, "text": " This idea has come from Python, if you have programmed in Python, you know that in Python", "tokens": [51568, 639, 1558, 575, 808, 490, 15329, 11, 498, 291, 362, 31092, 294, 15329, 11, 291, 458, 300, 294, 15329, 51784], "temperature": 0.0, "avg_logprob": -0.18894016041475184, "compression_ratio": 1.6081632653061224, "no_speech_prob": 0.00037997536128386855}, {"id": 185, "seek": 66886, "start": 668.94, "end": 673.58, "text": " we use indentation to represent hierarchy, so we don't have curly braces.", "tokens": [50368, 321, 764, 44494, 399, 281, 2906, 22333, 11, 370, 321, 500, 380, 362, 32066, 41537, 13, 50600], "temperature": 0.0, "avg_logprob": -0.17135853463030876, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.005139275453984737}, {"id": 186, "seek": 66886, "start": 673.58, "end": 679.34, "text": " So let's get rid of these braces, and remove the indentation, good.", "tokens": [50600, 407, 718, 311, 483, 3973, 295, 613, 41537, 11, 293, 4159, 264, 44494, 399, 11, 665, 13, 50888], "temperature": 0.0, "avg_logprob": -0.17135853463030876, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.005139275453984737}, {"id": 187, "seek": 66886, "start": 679.34, "end": 683.42, "text": " Now the next thing you need to know about YAML is that we don't have to use quotes.", "tokens": [50888, 823, 264, 958, 551, 291, 643, 281, 458, 466, 398, 2865, 43, 307, 300, 321, 500, 380, 362, 281, 764, 19963, 13, 51092], "temperature": 0.0, "avg_logprob": -0.17135853463030876, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.005139275453984737}, {"id": 188, "seek": 66886, "start": 683.42, "end": 690.3000000000001, "text": " So we can bring up the replace dialog, and replace all these double quotes with nothing.", "tokens": [51092, 407, 321, 393, 1565, 493, 264, 7406, 19308, 11, 293, 7406, 439, 613, 3834, 19963, 365, 1825, 13, 51436], "temperature": 0.0, "avg_logprob": -0.17135853463030876, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.005139275453984737}, {"id": 189, "seek": 66886, "start": 690.3000000000001, "end": 693.1800000000001, "text": " That immediately takes a lot of clutter away.", "tokens": [51436, 663, 4258, 2516, 257, 688, 295, 40614, 1314, 13, 51580], "temperature": 0.0, "avg_logprob": -0.17135853463030876, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.005139275453984737}, {"id": 190, "seek": 69318, "start": 693.18, "end": 699.54, "text": " Also, we're not going to use commas to separate key value pairs.", "tokens": [50364, 2743, 11, 321, 434, 406, 516, 281, 764, 800, 296, 281, 4994, 2141, 2158, 15494, 13, 50682], "temperature": 0.0, "avg_logprob": -0.19413129633123224, "compression_ratio": 1.5913043478260869, "no_speech_prob": 0.011156963184475899}, {"id": 191, "seek": 69318, "start": 699.54, "end": 704.9399999999999, "text": " So on the top, we have name, price is published, and how do we represent a list or an array?", "tokens": [50682, 407, 322, 264, 1192, 11, 321, 362, 1315, 11, 3218, 307, 6572, 11, 293, 577, 360, 321, 2906, 257, 1329, 420, 364, 10225, 30, 50952], "temperature": 0.0, "avg_logprob": -0.19413129633123224, "compression_ratio": 1.5913043478260869, "no_speech_prob": 0.011156963184475899}, {"id": 192, "seek": 69318, "start": 704.9399999999999, "end": 706.2199999999999, "text": " We use hyphens.", "tokens": [50952, 492, 764, 2477, 950, 694, 13, 51016], "temperature": 0.0, "avg_logprob": -0.19413129633123224, "compression_ratio": 1.5913043478260869, "no_speech_prob": 0.011156963184475899}, {"id": 193, "seek": 69318, "start": 706.2199999999999, "end": 713.06, "text": " So I'm going to remove this, we press enter, add a tab on a new line, we type hyphen to", "tokens": [51016, 407, 286, 478, 516, 281, 4159, 341, 11, 321, 1886, 3242, 11, 909, 257, 4421, 322, 257, 777, 1622, 11, 321, 2010, 2477, 47059, 281, 51358], "temperature": 0.0, "avg_logprob": -0.19413129633123224, "compression_ratio": 1.5913043478260869, "no_speech_prob": 0.011156963184475899}, {"id": 194, "seek": 69318, "start": 713.06, "end": 718.9799999999999, "text": " define the first item in the list, software, then at the same indentation, we add the next", "tokens": [51358, 6964, 264, 700, 3174, 294, 264, 1329, 11, 4722, 11, 550, 412, 264, 912, 44494, 399, 11, 321, 909, 264, 958, 51654], "temperature": 0.0, "avg_logprob": -0.19413129633123224, "compression_ratio": 1.5913043478260869, "no_speech_prob": 0.011156963184475899}, {"id": 195, "seek": 69318, "start": 718.9799999999999, "end": 721.26, "text": " item, DevOps.", "tokens": [51654, 3174, 11, 43051, 13, 51768], "temperature": 0.0, "avg_logprob": -0.19413129633123224, "compression_ratio": 1.5913043478260869, "no_speech_prob": 0.011156963184475899}, {"id": 196, "seek": 72126, "start": 721.26, "end": 726.7, "text": " Now author is an object, but as I told you, we don't use curly braces, we use indentation.", "tokens": [50364, 823, 3793, 307, 364, 2657, 11, 457, 382, 286, 1907, 291, 11, 321, 500, 380, 764, 32066, 41537, 11, 321, 764, 44494, 399, 13, 50636], "temperature": 0.0, "avg_logprob": -0.14363834286524244, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.025954587385058403}, {"id": 197, "seek": 72126, "start": 726.7, "end": 732.02, "text": " So because these two properties are indented, they belong to the author property, okay?", "tokens": [50636, 407, 570, 613, 732, 7221, 366, 1016, 6003, 11, 436, 5784, 281, 264, 3793, 4707, 11, 1392, 30, 50902], "temperature": 0.0, "avg_logprob": -0.14363834286524244, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.025954587385058403}, {"id": 198, "seek": 72126, "start": 732.02, "end": 736.74, "text": " So this is our YAML file, let's compare this with JSON.", "tokens": [50902, 407, 341, 307, 527, 398, 2865, 43, 3991, 11, 718, 311, 6794, 341, 365, 31828, 13, 51138], "temperature": 0.0, "avg_logprob": -0.14363834286524244, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.025954587385058403}, {"id": 199, "seek": 72126, "start": 736.74, "end": 740.34, "text": " As you can see, YAML is easier to read and understand.", "tokens": [51138, 1018, 291, 393, 536, 11, 398, 2865, 43, 307, 3571, 281, 1401, 293, 1223, 13, 51318], "temperature": 0.0, "avg_logprob": -0.14363834286524244, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.025954587385058403}, {"id": 200, "seek": 72126, "start": 740.34, "end": 742.8199999999999, "text": " Now why don't we use YAML all the time?", "tokens": [51318, 823, 983, 500, 380, 321, 764, 398, 2865, 43, 439, 264, 565, 30, 51442], "temperature": 0.0, "avg_logprob": -0.14363834286524244, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.025954587385058403}, {"id": 201, "seek": 72126, "start": 742.8199999999999, "end": 747.9, "text": " Well, because parsing YAML files is a little bit slower than parsing JSON files, because", "tokens": [51442, 1042, 11, 570, 21156, 278, 398, 2865, 43, 7098, 307, 257, 707, 857, 14009, 813, 21156, 278, 31828, 7098, 11, 570, 51696], "temperature": 0.0, "avg_logprob": -0.14363834286524244, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.025954587385058403}, {"id": 202, "seek": 74790, "start": 747.9, "end": 752.5, "text": " the parser doesn't know if this is a string or a number, so it has to read everything", "tokens": [50364, 264, 21156, 260, 1177, 380, 458, 498, 341, 307, 257, 6798, 420, 257, 1230, 11, 370, 309, 575, 281, 1401, 1203, 50594], "temperature": 0.0, "avg_logprob": -0.13131486719304866, "compression_ratio": 1.637037037037037, "no_speech_prob": 0.009125368669629097}, {"id": 203, "seek": 74790, "start": 752.5, "end": 755.38, "text": " as a string and then try to evaluate it.", "tokens": [50594, 382, 257, 6798, 293, 550, 853, 281, 13059, 309, 13, 50738], "temperature": 0.0, "avg_logprob": -0.13131486719304866, "compression_ratio": 1.637037037037037, "no_speech_prob": 0.009125368669629097}, {"id": 204, "seek": 74790, "start": 755.38, "end": 760.66, "text": " In contrast, in JSON, strings are represented using quotes and more specifically double", "tokens": [50738, 682, 8712, 11, 294, 31828, 11, 13985, 366, 10379, 1228, 19963, 293, 544, 4682, 3834, 51002], "temperature": 0.0, "avg_logprob": -0.13131486719304866, "compression_ratio": 1.637037037037037, "no_speech_prob": 0.009125368669629097}, {"id": 205, "seek": 74790, "start": 760.66, "end": 765.98, "text": " quotes, so the parser knows that this is a string and it shouldn't evaluate it, okay?", "tokens": [51002, 19963, 11, 370, 264, 21156, 260, 3255, 300, 341, 307, 257, 6798, 293, 309, 4659, 380, 13059, 309, 11, 1392, 30, 51268], "temperature": 0.0, "avg_logprob": -0.13131486719304866, "compression_ratio": 1.637037037037037, "no_speech_prob": 0.009125368669629097}, {"id": 206, "seek": 74790, "start": 765.98, "end": 771.18, "text": " So quite often we use YAML files for configuration files and JSON for exchanging data between", "tokens": [51268, 407, 1596, 2049, 321, 764, 398, 2865, 43, 7098, 337, 11694, 7098, 293, 31828, 337, 6210, 9741, 1412, 1296, 51528], "temperature": 0.0, "avg_logprob": -0.13131486719304866, "compression_ratio": 1.637037037037037, "no_speech_prob": 0.009125368669629097}, {"id": 207, "seek": 74790, "start": 771.18, "end": 774.06, "text": " multiple computers, like a client and a server.", "tokens": [51528, 3866, 10807, 11, 411, 257, 6423, 293, 257, 7154, 13, 51672], "temperature": 0.0, "avg_logprob": -0.13131486719304866, "compression_ratio": 1.637037037037037, "no_speech_prob": 0.009125368669629097}, {"id": 208, "seek": 77406, "start": 774.06, "end": 779.7399999999999, "text": " So now that you understand these formats, next we're going to talk about compose files.", "tokens": [50364, 407, 586, 300, 291, 1223, 613, 25879, 11, 958, 321, 434, 516, 281, 751, 466, 35925, 7098, 13, 50648], "temperature": 0.0, "avg_logprob": -0.18705827539617365, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.06853049248456955}, {"id": 209, "seek": 77406, "start": 779.7399999999999, "end": 788.3, "text": " Alright, let's see how we can create a compose file from scratch.", "tokens": [50648, 2798, 11, 718, 311, 536, 577, 321, 393, 1884, 257, 35925, 3991, 490, 8459, 13, 51076], "temperature": 0.0, "avg_logprob": -0.18705827539617365, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.06853049248456955}, {"id": 210, "seek": 77406, "start": 788.3, "end": 795.42, "text": " So for this lesson, I'm going to rename this file to underline docker compose.", "tokens": [51076, 407, 337, 341, 6898, 11, 286, 478, 516, 281, 36741, 341, 3991, 281, 833, 1889, 360, 9178, 35925, 13, 51432], "temperature": 0.0, "avg_logprob": -0.18705827539617365, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.06853049248456955}, {"id": 211, "seek": 77406, "start": 795.42, "end": 799.14, "text": " We want to set it aside and create a new compose file from scratch.", "tokens": [51432, 492, 528, 281, 992, 309, 7359, 293, 1884, 257, 777, 35925, 3991, 490, 8459, 13, 51618], "temperature": 0.0, "avg_logprob": -0.18705827539617365, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.06853049248456955}, {"id": 212, "seek": 79914, "start": 799.14, "end": 803.6999999999999, "text": " So here we are, the new file called docker-compose.", "tokens": [50364, 407, 510, 321, 366, 11, 264, 777, 3991, 1219, 360, 9178, 12, 21541, 541, 13, 50592], "temperature": 0.0, "avg_logprob": -0.15904811450413295, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.009412357583642006}, {"id": 213, "seek": 79914, "start": 803.6999999999999, "end": 808.58, "text": " All in lowercase, make sure to spell it properly, otherwise docker-compose is not going to find", "tokens": [50592, 1057, 294, 3126, 9765, 11, 652, 988, 281, 9827, 309, 6108, 11, 5911, 360, 9178, 12, 21541, 541, 307, 406, 516, 281, 915, 50836], "temperature": 0.0, "avg_logprob": -0.15904811450413295, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.009412357583642006}, {"id": 214, "seek": 79914, "start": 808.58, "end": 813.46, "text": " this file, because this is the default name that docker-compose assumes, okay?", "tokens": [50836, 341, 3991, 11, 570, 341, 307, 264, 7576, 1315, 300, 360, 9178, 12, 21541, 541, 37808, 11, 1392, 30, 51080], "temperature": 0.0, "avg_logprob": -0.15904811450413295, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.009412357583642006}, {"id": 215, "seek": 79914, "start": 813.46, "end": 815.46, "text": " So YAML.", "tokens": [51080, 407, 398, 2865, 43, 13, 51180], "temperature": 0.0, "avg_logprob": -0.15904811450413295, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.009412357583642006}, {"id": 216, "seek": 79914, "start": 815.46, "end": 819.9, "text": " Now the first thing that we need to set here is the version property.", "tokens": [51180, 823, 264, 700, 551, 300, 321, 643, 281, 992, 510, 307, 264, 3037, 4707, 13, 51402], "temperature": 0.0, "avg_logprob": -0.15904811450413295, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.009412357583642006}, {"id": 217, "seek": 79914, "start": 819.9, "end": 821.1, "text": " What version should we use?", "tokens": [51402, 708, 3037, 820, 321, 764, 30, 51462], "temperature": 0.0, "avg_logprob": -0.15904811450413295, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.009412357583642006}, {"id": 218, "seek": 79914, "start": 821.1, "end": 825.26, "text": " Well, let's search for docker-compose file.", "tokens": [51462, 1042, 11, 718, 311, 3164, 337, 360, 9178, 12, 21541, 541, 3991, 13, 51670], "temperature": 0.0, "avg_logprob": -0.15904811450413295, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.009412357583642006}, {"id": 219, "seek": 82526, "start": 825.26, "end": 831.54, "text": " On this page, you can see various compose file formats and their compatibility with", "tokens": [50364, 1282, 341, 3028, 11, 291, 393, 536, 3683, 35925, 3991, 25879, 293, 641, 34237, 365, 50678], "temperature": 0.0, "avg_logprob": -0.1163044662475586, "compression_ratio": 1.7072243346007605, "no_speech_prob": 0.21726912260055542}, {"id": 220, "seek": 82526, "start": 831.54, "end": 832.54, "text": " docker-engine.", "tokens": [50678, 360, 9178, 12, 25609, 13, 50728], "temperature": 0.0, "avg_logprob": -0.1163044662475586, "compression_ratio": 1.7072243346007605, "no_speech_prob": 0.21726912260055542}, {"id": 221, "seek": 82526, "start": 832.54, "end": 837.78, "text": " We are using the latest version of docker-engine, so I want to use the latest compose file format", "tokens": [50728, 492, 366, 1228, 264, 6792, 3037, 295, 360, 9178, 12, 25609, 11, 370, 286, 528, 281, 764, 264, 6792, 35925, 3991, 7877, 50990], "temperature": 0.0, "avg_logprob": -0.1163044662475586, "compression_ratio": 1.7072243346007605, "no_speech_prob": 0.21726912260055542}, {"id": 222, "seek": 82526, "start": 837.78, "end": 840.3, "text": " so we have access to the latest features.", "tokens": [50990, 370, 321, 362, 2105, 281, 264, 6792, 4122, 13, 51116], "temperature": 0.0, "avg_logprob": -0.1163044662475586, "compression_ratio": 1.7072243346007605, "no_speech_prob": 0.21726912260055542}, {"id": 223, "seek": 82526, "start": 840.3, "end": 843.42, "text": " So we're going to set this to 3.8.", "tokens": [51116, 407, 321, 434, 516, 281, 992, 341, 281, 805, 13, 23, 13, 51272], "temperature": 0.0, "avg_logprob": -0.1163044662475586, "compression_ratio": 1.7072243346007605, "no_speech_prob": 0.21726912260055542}, {"id": 224, "seek": 82526, "start": 843.42, "end": 848.38, "text": " Now here we need to wrap this number with double quotes, otherwise it will be evaluated", "tokens": [51272, 823, 510, 321, 643, 281, 7019, 341, 1230, 365, 3834, 19963, 11, 5911, 309, 486, 312, 25509, 51520], "temperature": 0.0, "avg_logprob": -0.1163044662475586, "compression_ratio": 1.7072243346007605, "no_speech_prob": 0.21726912260055542}, {"id": 225, "seek": 82526, "start": 848.38, "end": 852.74, "text": " as a number, but docker-compose expects this value to be a string.", "tokens": [51520, 382, 257, 1230, 11, 457, 360, 9178, 12, 21541, 541, 33280, 341, 2158, 281, 312, 257, 6798, 13, 51738], "temperature": 0.0, "avg_logprob": -0.1163044662475586, "compression_ratio": 1.7072243346007605, "no_speech_prob": 0.21726912260055542}, {"id": 226, "seek": 82526, "start": 852.74, "end": 853.74, "text": " Why?", "tokens": [51738, 1545, 30, 51788], "temperature": 0.0, "avg_logprob": -0.1163044662475586, "compression_ratio": 1.7072243346007605, "no_speech_prob": 0.21726912260055542}, {"id": 227, "seek": 82526, "start": 853.74, "end": 854.74, "text": " I have no clue.", "tokens": [51788, 286, 362, 572, 13602, 13, 51838], "temperature": 0.0, "avg_logprob": -0.1163044662475586, "compression_ratio": 1.7072243346007605, "no_speech_prob": 0.21726912260055542}, {"id": 228, "seek": 85474, "start": 855.22, "end": 856.22, "text": " Here's the version.", "tokens": [50388, 1692, 311, 264, 3037, 13, 50438], "temperature": 0.0, "avg_logprob": -0.20080560684204102, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.01691221445798874}, {"id": 229, "seek": 85474, "start": 856.22, "end": 861.26, "text": " Now in this file, we define various building blocks or services of our application.", "tokens": [50438, 823, 294, 341, 3991, 11, 321, 6964, 3683, 2390, 8474, 420, 3328, 295, 527, 3861, 13, 50690], "temperature": 0.0, "avg_logprob": -0.20080560684204102, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.01691221445798874}, {"id": 230, "seek": 85474, "start": 861.26, "end": 864.02, "text": " So we have a property called services.", "tokens": [50690, 407, 321, 362, 257, 4707, 1219, 3328, 13, 50828], "temperature": 0.0, "avg_logprob": -0.20080560684204102, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.01691221445798874}, {"id": 231, "seek": 85474, "start": 864.02, "end": 865.86, "text": " Now what services do we need here?", "tokens": [50828, 823, 437, 3328, 360, 321, 643, 510, 30, 50920], "temperature": 0.0, "avg_logprob": -0.20080560684204102, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.01691221445798874}, {"id": 232, "seek": 85474, "start": 865.86, "end": 871.54, "text": " Well, our application has a front-end, a back-end, and a database.", "tokens": [50920, 1042, 11, 527, 3861, 575, 257, 1868, 12, 521, 11, 257, 646, 12, 521, 11, 293, 257, 8149, 13, 51204], "temperature": 0.0, "avg_logprob": -0.20080560684204102, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.01691221445798874}, {"id": 233, "seek": 85474, "start": 871.54, "end": 875.86, "text": " Your application might have other moving parts, so you can define them here.", "tokens": [51204, 2260, 3861, 1062, 362, 661, 2684, 3166, 11, 370, 291, 393, 6964, 552, 510, 13, 51420], "temperature": 0.0, "avg_logprob": -0.20080560684204102, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.01691221445798874}, {"id": 234, "seek": 85474, "start": 875.86, "end": 878.86, "text": " Now these names are arbitrary, so we can call them anything.", "tokens": [51420, 823, 613, 5288, 366, 23211, 11, 370, 321, 393, 818, 552, 1340, 13, 51570], "temperature": 0.0, "avg_logprob": -0.20080560684204102, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.01691221445798874}, {"id": 235, "seek": 87886, "start": 878.86, "end": 886.54, "text": " We can change this to db, we can change the back-end to api, and the front-end to well.", "tokens": [50364, 492, 393, 1319, 341, 281, 274, 65, 11, 321, 393, 1319, 264, 646, 12, 521, 281, 1882, 72, 11, 293, 264, 1868, 12, 521, 281, 731, 13, 50748], "temperature": 0.0, "avg_logprob": -0.11361951158757795, "compression_ratio": 1.8661087866108788, "no_speech_prob": 0.00781563576310873}, {"id": 236, "seek": 87886, "start": 886.54, "end": 891.9, "text": " The idea here is that we're defining various services and telling docker how to build images", "tokens": [50748, 440, 1558, 510, 307, 300, 321, 434, 17827, 3683, 3328, 293, 3585, 360, 9178, 577, 281, 1322, 5267, 51016], "temperature": 0.0, "avg_logprob": -0.11361951158757795, "compression_ratio": 1.8661087866108788, "no_speech_prob": 0.00781563576310873}, {"id": 237, "seek": 87886, "start": 891.9, "end": 894.98, "text": " for each service and how to run these images.", "tokens": [51016, 337, 1184, 2643, 293, 577, 281, 1190, 613, 5267, 13, 51170], "temperature": 0.0, "avg_logprob": -0.11361951158757795, "compression_ratio": 1.8661087866108788, "no_speech_prob": 0.00781563576310873}, {"id": 238, "seek": 87886, "start": 894.98, "end": 899.62, "text": " So here we're going to have properties, and the value of these properties will eventually", "tokens": [51170, 407, 510, 321, 434, 516, 281, 362, 7221, 11, 293, 264, 2158, 295, 613, 7221, 486, 4728, 51402], "temperature": 0.0, "avg_logprob": -0.11361951158757795, "compression_ratio": 1.8661087866108788, "no_speech_prob": 0.00781563576310873}, {"id": 239, "seek": 87886, "start": 899.62, "end": 902.38, "text": " be used when running our containers.", "tokens": [51402, 312, 1143, 562, 2614, 527, 17089, 13, 51540], "temperature": 0.0, "avg_logprob": -0.11361951158757795, "compression_ratio": 1.8661087866108788, "no_speech_prob": 0.00781563576310873}, {"id": 240, "seek": 87886, "start": 902.38, "end": 907.78, "text": " So in the previous section, we had to manually run our containers using docker-run, and here", "tokens": [51540, 407, 294, 264, 3894, 3541, 11, 321, 632, 281, 16945, 1190, 527, 17089, 1228, 360, 9178, 12, 12997, 11, 293, 510, 51810], "temperature": 0.0, "avg_logprob": -0.11361951158757795, "compression_ratio": 1.8661087866108788, "no_speech_prob": 0.00781563576310873}, {"id": 241, "seek": 90778, "start": 907.8199999999999, "end": 913.26, "text": " we used parameters like dash-p for port mapping or dash-v for volume mapping.", "tokens": [50366, 321, 1143, 9834, 411, 8240, 12, 79, 337, 2436, 18350, 420, 8240, 12, 85, 337, 5523, 18350, 13, 50638], "temperature": 0.0, "avg_logprob": -0.15284758708516105, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0005442065303213894}, {"id": 242, "seek": 90778, "start": 913.26, "end": 916.42, "text": " We also had to specify an image like react-app.", "tokens": [50638, 492, 611, 632, 281, 16500, 364, 3256, 411, 4515, 12, 1746, 13, 50796], "temperature": 0.0, "avg_logprob": -0.15284758708516105, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0005442065303213894}, {"id": 243, "seek": 90778, "start": 916.42, "end": 919.78, "text": " All these values can be defined in our compose file.", "tokens": [50796, 1057, 613, 4190, 393, 312, 7642, 294, 527, 35925, 3991, 13, 50964], "temperature": 0.0, "avg_logprob": -0.15284758708516105, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0005442065303213894}, {"id": 244, "seek": 90778, "start": 919.78, "end": 922.62, "text": " So we don't have to manually start our containers.", "tokens": [50964, 407, 321, 500, 380, 362, 281, 16945, 722, 527, 17089, 13, 51106], "temperature": 0.0, "avg_logprob": -0.15284758708516105, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0005442065303213894}, {"id": 245, "seek": 90778, "start": 922.62, "end": 927.02, "text": " Docker compose will take care of starting our containers under the hood.", "tokens": [51106, 1144, 9178, 35925, 486, 747, 1127, 295, 2891, 527, 17089, 833, 264, 13376, 13, 51326], "temperature": 0.0, "avg_logprob": -0.15284758708516105, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0005442065303213894}, {"id": 246, "seek": 90778, "start": 927.02, "end": 932.14, "text": " So for each service, we need to tell docker how to build an image for that service.", "tokens": [51326, 407, 337, 1184, 2643, 11, 321, 643, 281, 980, 360, 9178, 577, 281, 1322, 364, 3256, 337, 300, 2643, 13, 51582], "temperature": 0.0, "avg_logprob": -0.15284758708516105, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0005442065303213894}, {"id": 247, "seek": 90778, "start": 932.14, "end": 936.86, "text": " So here we can use the build property and tell docker compose where it can find a docker", "tokens": [51582, 407, 510, 321, 393, 764, 264, 1322, 4707, 293, 980, 360, 9178, 35925, 689, 309, 393, 915, 257, 360, 9178, 51818], "temperature": 0.0, "avg_logprob": -0.15284758708516105, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0005442065303213894}, {"id": 248, "seek": 93686, "start": 936.94, "end": 938.0600000000001, "text": " file.", "tokens": [50368, 3991, 13, 50424], "temperature": 0.0, "avg_logprob": -0.12135427281007928, "compression_ratio": 1.728, "no_speech_prob": 0.015187250450253487}, {"id": 249, "seek": 93686, "start": 938.0600000000001, "end": 944.0600000000001, "text": " So if you look at this project, you can see that in our back-end and front-end folders,", "tokens": [50424, 407, 498, 291, 574, 412, 341, 1716, 11, 291, 393, 536, 300, 294, 527, 646, 12, 521, 293, 1868, 12, 521, 31082, 11, 50724], "temperature": 0.0, "avg_logprob": -0.12135427281007928, "compression_ratio": 1.728, "no_speech_prob": 0.015187250450253487}, {"id": 250, "seek": 93686, "start": 944.0600000000001, "end": 946.62, "text": " we have a docker file.", "tokens": [50724, 321, 362, 257, 360, 9178, 3991, 13, 50852], "temperature": 0.0, "avg_logprob": -0.12135427281007928, "compression_ratio": 1.728, "no_speech_prob": 0.015187250450253487}, {"id": 251, "seek": 93686, "start": 946.62, "end": 951.14, "text": " This docker file is almost identical to the one we created in the previous section.", "tokens": [50852, 639, 360, 9178, 3991, 307, 1920, 14800, 281, 264, 472, 321, 2942, 294, 264, 3894, 3541, 13, 51078], "temperature": 0.0, "avg_logprob": -0.12135427281007928, "compression_ratio": 1.728, "no_speech_prob": 0.015187250450253487}, {"id": 252, "seek": 93686, "start": 951.14, "end": 956.42, "text": " So we start from a node image, we create a user, we set our working directory, copy all", "tokens": [51078, 407, 321, 722, 490, 257, 9984, 3256, 11, 321, 1884, 257, 4195, 11, 321, 992, 527, 1364, 21120, 11, 5055, 439, 51342], "temperature": 0.0, "avg_logprob": -0.12135427281007928, "compression_ratio": 1.728, "no_speech_prob": 0.015187250450253487}, {"id": 253, "seek": 93686, "start": 956.42, "end": 963.4200000000001, "text": " the files and install the dependencies, then expose port 3001 and start the web server.", "tokens": [51342, 264, 7098, 293, 3625, 264, 36606, 11, 550, 19219, 2436, 6641, 16, 293, 722, 264, 3670, 7154, 13, 51692], "temperature": 0.0, "avg_logprob": -0.12135427281007928, "compression_ratio": 1.728, "no_speech_prob": 0.015187250450253487}, {"id": 254, "seek": 93686, "start": 963.4200000000001, "end": 966.62, "text": " We have a similar docker file in our front-end project.", "tokens": [51692, 492, 362, 257, 2531, 360, 9178, 3991, 294, 527, 1868, 12, 521, 1716, 13, 51852], "temperature": 0.0, "avg_logprob": -0.12135427281007928, "compression_ratio": 1.728, "no_speech_prob": 0.015187250450253487}, {"id": 255, "seek": 96662, "start": 966.62, "end": 968.18, "text": " Let's have a quick look.", "tokens": [50364, 961, 311, 362, 257, 1702, 574, 13, 50442], "temperature": 0.0, "avg_logprob": -0.16661429796062532, "compression_ratio": 1.757085020242915, "no_speech_prob": 0.01224029716104269}, {"id": 256, "seek": 96662, "start": 968.18, "end": 974.42, "text": " So that was the back-end, here's the front-end, and here we have a docker file, almost identical.", "tokens": [50442, 407, 300, 390, 264, 646, 12, 521, 11, 510, 311, 264, 1868, 12, 521, 11, 293, 510, 321, 362, 257, 360, 9178, 3991, 11, 1920, 14800, 13, 50754], "temperature": 0.0, "avg_logprob": -0.16661429796062532, "compression_ratio": 1.757085020242915, "no_speech_prob": 0.01224029716104269}, {"id": 257, "seek": 96662, "start": 974.42, "end": 978.9, "text": " But the front-end application or the front-end server starts on a different port.", "tokens": [50754, 583, 264, 1868, 12, 521, 3861, 420, 264, 1868, 12, 521, 7154, 3719, 322, 257, 819, 2436, 13, 50978], "temperature": 0.0, "avg_logprob": -0.16661429796062532, "compression_ratio": 1.757085020242915, "no_speech_prob": 0.01224029716104269}, {"id": 258, "seek": 96662, "start": 978.9, "end": 980.34, "text": " That is the only difference.", "tokens": [50978, 663, 307, 264, 787, 2649, 13, 51050], "temperature": 0.0, "avg_logprob": -0.16661429796062532, "compression_ratio": 1.757085020242915, "no_speech_prob": 0.01224029716104269}, {"id": 259, "seek": 96662, "start": 980.34, "end": 984.62, "text": " So each service should have its own docker file, okay?", "tokens": [51050, 407, 1184, 2643, 820, 362, 1080, 1065, 360, 9178, 3991, 11, 1392, 30, 51264], "temperature": 0.0, "avg_logprob": -0.16661429796062532, "compression_ratio": 1.757085020242915, "no_speech_prob": 0.01224029716104269}, {"id": 260, "seek": 96662, "start": 984.62, "end": 990.18, "text": " Now back to our compose file, for our web or front-end, we're going to set the build", "tokens": [51264, 823, 646, 281, 527, 35925, 3991, 11, 337, 527, 3670, 420, 1868, 12, 521, 11, 321, 434, 516, 281, 992, 264, 1322, 51542], "temperature": 0.0, "avg_logprob": -0.16661429796062532, "compression_ratio": 1.757085020242915, "no_speech_prob": 0.01224029716104269}, {"id": 261, "seek": 96662, "start": 990.18, "end": 995.14, "text": " property to period, meaning current folder, slash front-end.", "tokens": [51542, 4707, 281, 2896, 11, 3620, 2190, 10820, 11, 17330, 1868, 12, 521, 13, 51790], "temperature": 0.0, "avg_logprob": -0.16661429796062532, "compression_ratio": 1.757085020242915, "no_speech_prob": 0.01224029716104269}, {"id": 262, "seek": 99514, "start": 995.14, "end": 997.5, "text": " This is where we have a docker file.", "tokens": [50364, 639, 307, 689, 321, 362, 257, 360, 9178, 3991, 13, 50482], "temperature": 0.0, "avg_logprob": -0.16072747015183972, "compression_ratio": 1.7869565217391303, "no_speech_prob": 0.12249470502138138}, {"id": 263, "seek": 99514, "start": 997.5, "end": 1002.54, "text": " For our API, we're going to set build to back-end.", "tokens": [50482, 1171, 527, 9362, 11, 321, 434, 516, 281, 992, 1322, 281, 646, 12, 521, 13, 50734], "temperature": 0.0, "avg_logprob": -0.16072747015183972, "compression_ratio": 1.7869565217391303, "no_speech_prob": 0.12249470502138138}, {"id": 264, "seek": 99514, "start": 1002.54, "end": 1006.1, "text": " Now for our database, we're not going to build an image, we're going to pull an image from", "tokens": [50734, 823, 337, 527, 8149, 11, 321, 434, 406, 516, 281, 1322, 364, 3256, 11, 321, 434, 516, 281, 2235, 364, 3256, 490, 50912], "temperature": 0.0, "avg_logprob": -0.16072747015183972, "compression_ratio": 1.7869565217391303, "no_speech_prob": 0.12249470502138138}, {"id": 265, "seek": 99514, "start": 1006.1, "end": 1007.5, "text": " docker hop.", "tokens": [50912, 360, 9178, 3818, 13, 50982], "temperature": 0.0, "avg_logprob": -0.16072747015183972, "compression_ratio": 1.7869565217391303, "no_speech_prob": 0.12249470502138138}, {"id": 266, "seek": 99514, "start": 1007.5, "end": 1011.5, "text": " So instead of the build property, we're going to use the image property.", "tokens": [50982, 407, 2602, 295, 264, 1322, 4707, 11, 321, 434, 516, 281, 764, 264, 3256, 4707, 13, 51182], "temperature": 0.0, "avg_logprob": -0.16072747015183972, "compression_ratio": 1.7869565217391303, "no_speech_prob": 0.12249470502138138}, {"id": 267, "seek": 99514, "start": 1011.5, "end": 1017.18, "text": " Now for this application, I'm going to use Mongo version 4.0-Xenial.", "tokens": [51182, 823, 337, 341, 3861, 11, 286, 478, 516, 281, 764, 48380, 3037, 1017, 13, 15, 12, 55, 268, 831, 13, 51466], "temperature": 0.0, "avg_logprob": -0.16072747015183972, "compression_ratio": 1.7869565217391303, "no_speech_prob": 0.12249470502138138}, {"id": 268, "seek": 99514, "start": 1017.18, "end": 1022.34, "text": " So that is Mongo version 4 built on top of Xenial, which is Ubuntu version 16.", "tokens": [51466, 407, 300, 307, 48380, 3037, 1017, 3094, 322, 1192, 295, 1783, 268, 831, 11, 597, 307, 30230, 45605, 3037, 3165, 13, 51724], "temperature": 0.0, "avg_logprob": -0.16072747015183972, "compression_ratio": 1.7869565217391303, "no_speech_prob": 0.12249470502138138}, {"id": 269, "seek": 102234, "start": 1022.34, "end": 1027.42, "text": " Now if you look at docker hop, you can see that Mongo also has images built on top of", "tokens": [50364, 823, 498, 291, 574, 412, 360, 9178, 3818, 11, 291, 393, 536, 300, 48380, 611, 575, 5267, 3094, 322, 1192, 295, 50618], "temperature": 0.0, "avg_logprob": -0.16405110026514808, "compression_ratio": 1.754646840148699, "no_speech_prob": 0.004681570455431938}, {"id": 270, "seek": 102234, "start": 1027.42, "end": 1031.7, "text": " Windows, but Windows images are very large, over two gigabytes.", "tokens": [50618, 8591, 11, 457, 8591, 5267, 366, 588, 2416, 11, 670, 732, 42741, 13, 50832], "temperature": 0.0, "avg_logprob": -0.16405110026514808, "compression_ratio": 1.754646840148699, "no_speech_prob": 0.004681570455431938}, {"id": 271, "seek": 102234, "start": 1031.7, "end": 1034.8600000000001, "text": " So that's why I prefer to use Linux images.", "tokens": [50832, 407, 300, 311, 983, 286, 4382, 281, 764, 18734, 5267, 13, 50990], "temperature": 0.0, "avg_logprob": -0.16405110026514808, "compression_ratio": 1.754646840148699, "no_speech_prob": 0.004681570455431938}, {"id": 272, "seek": 102234, "start": 1034.8600000000001, "end": 1039.8600000000001, "text": " So for any of these services, we can either build an image or pull it down.", "tokens": [50990, 407, 337, 604, 295, 613, 3328, 11, 321, 393, 2139, 1322, 364, 3256, 420, 2235, 309, 760, 13, 51240], "temperature": 0.0, "avg_logprob": -0.16405110026514808, "compression_ratio": 1.754646840148699, "no_speech_prob": 0.004681570455431938}, {"id": 273, "seek": 102234, "start": 1039.8600000000001, "end": 1043.7, "text": " Now here we also have port mappings, so we set ports to.", "tokens": [51240, 823, 510, 321, 611, 362, 2436, 463, 28968, 11, 370, 321, 992, 18160, 281, 13, 51432], "temperature": 0.0, "avg_logprob": -0.16405110026514808, "compression_ratio": 1.754646840148699, "no_speech_prob": 0.004681570455431938}, {"id": 274, "seek": 102234, "start": 1043.7, "end": 1048.9, "text": " Now because we can have multiple port mappings, here we need to use the array or list syntax.", "tokens": [51432, 823, 570, 321, 393, 362, 3866, 2436, 463, 28968, 11, 510, 321, 643, 281, 764, 264, 10225, 420, 1329, 28431, 13, 51692], "temperature": 0.0, "avg_logprob": -0.16405110026514808, "compression_ratio": 1.754646840148699, "no_speech_prob": 0.004681570455431938}, {"id": 275, "seek": 102234, "start": 1048.9, "end": 1052.02, "text": " So we use a hyphen, and then define a port mapping.", "tokens": [51692, 407, 321, 764, 257, 2477, 47059, 11, 293, 550, 6964, 257, 2436, 18350, 13, 51848], "temperature": 0.0, "avg_logprob": -0.16405110026514808, "compression_ratio": 1.754646840148699, "no_speech_prob": 0.004681570455431938}, {"id": 276, "seek": 105202, "start": 1052.02, "end": 1055.62, "text": " So our frontend application starts on port 3000.", "tokens": [50364, 407, 527, 1868, 521, 3861, 3719, 322, 2436, 20984, 13, 50544], "temperature": 0.0, "avg_logprob": -0.20732556319818263, "compression_ratio": 1.4948453608247423, "no_speech_prob": 0.011867618188261986}, {"id": 277, "seek": 105202, "start": 1055.62, "end": 1062.06, "text": " So I want to map port 3000 of the host to port 3000 of the container running this image.", "tokens": [50544, 407, 286, 528, 281, 4471, 2436, 20984, 295, 264, 3975, 281, 2436, 20984, 295, 264, 10129, 2614, 341, 3256, 13, 50866], "temperature": 0.0, "avg_logprob": -0.20732556319818263, "compression_ratio": 1.4948453608247423, "no_speech_prob": 0.011867618188261986}, {"id": 278, "seek": 105202, "start": 1062.06, "end": 1066.7, "text": " That's similarly for our API, we're going to define a port mapping.", "tokens": [50866, 663, 311, 14138, 337, 527, 9362, 11, 321, 434, 516, 281, 6964, 257, 2436, 18350, 13, 51098], "temperature": 0.0, "avg_logprob": -0.20732556319818263, "compression_ratio": 1.4948453608247423, "no_speech_prob": 0.011867618188261986}, {"id": 279, "seek": 105202, "start": 1066.7, "end": 1070.86, "text": " This one is going to be 3001 to 3001.", "tokens": [51098, 639, 472, 307, 516, 281, 312, 6641, 16, 281, 6641, 16, 13, 51306], "temperature": 0.0, "avg_logprob": -0.20732556319818263, "compression_ratio": 1.4948453608247423, "no_speech_prob": 0.011867618188261986}, {"id": 280, "seek": 105202, "start": 1070.86, "end": 1079.42, "text": " Now MongoDB by default, listens on port 27017.", "tokens": [51306, 823, 48380, 27735, 538, 7576, 11, 35959, 322, 2436, 40774, 7773, 13, 51734], "temperature": 0.0, "avg_logprob": -0.20732556319818263, "compression_ratio": 1.4948453608247423, "no_speech_prob": 0.011867618188261986}, {"id": 281, "seek": 107942, "start": 1079.42, "end": 1085.7, "text": " So I want to map the same port, so we can access MongoDB using a MongoDB client like", "tokens": [50364, 407, 286, 528, 281, 4471, 264, 912, 2436, 11, 370, 321, 393, 2105, 48380, 27735, 1228, 257, 48380, 27735, 6423, 411, 50678], "temperature": 0.0, "avg_logprob": -0.168317326959574, "compression_ratio": 1.7719298245614035, "no_speech_prob": 0.40710723400115967}, {"id": 282, "seek": 107942, "start": 1085.7, "end": 1087.3400000000001, "text": " MongoDB Compass.", "tokens": [50678, 48380, 27735, 50179, 13, 50760], "temperature": 0.0, "avg_logprob": -0.168317326959574, "compression_ratio": 1.7719298245614035, "no_speech_prob": 0.40710723400115967}, {"id": 283, "seek": 107942, "start": 1087.3400000000001, "end": 1091.98, "text": " If you don't use MongoDB, you have the same concept with other database engines.", "tokens": [50760, 759, 291, 500, 380, 764, 48380, 27735, 11, 291, 362, 264, 912, 3410, 365, 661, 8149, 12982, 13, 50992], "temperature": 0.0, "avg_logprob": -0.168317326959574, "compression_ratio": 1.7719298245614035, "no_speech_prob": 0.40710723400115967}, {"id": 284, "seek": 107942, "start": 1091.98, "end": 1094.8600000000001, "text": " All these database engines listen on a default port.", "tokens": [50992, 1057, 613, 8149, 12982, 2140, 322, 257, 7576, 2436, 13, 51136], "temperature": 0.0, "avg_logprob": -0.168317326959574, "compression_ratio": 1.7719298245614035, "no_speech_prob": 0.40710723400115967}, {"id": 285, "seek": 107942, "start": 1094.8600000000001, "end": 1099.3400000000001, "text": " You want to map that port so you can connect to your database engine using your favorite", "tokens": [51136, 509, 528, 281, 4471, 300, 2436, 370, 291, 393, 1745, 281, 428, 8149, 2848, 1228, 428, 2954, 51360], "temperature": 0.0, "avg_logprob": -0.168317326959574, "compression_ratio": 1.7719298245614035, "no_speech_prob": 0.40710723400115967}, {"id": 286, "seek": 107942, "start": 1099.3400000000001, "end": 1101.54, "text": " database client.", "tokens": [51360, 8149, 6423, 13, 51470], "temperature": 0.0, "avg_logprob": -0.168317326959574, "compression_ratio": 1.7719298245614035, "no_speech_prob": 0.40710723400115967}, {"id": 287, "seek": 107942, "start": 1101.54, "end": 1103.54, "text": " What else do we have here?", "tokens": [51470, 708, 1646, 360, 321, 362, 510, 30, 51570], "temperature": 0.0, "avg_logprob": -0.168317326959574, "compression_ratio": 1.7719298245614035, "no_speech_prob": 0.40710723400115967}, {"id": 288, "seek": 107942, "start": 1103.54, "end": 1105.5800000000002, "text": " Back to this page for compose file.", "tokens": [51570, 5833, 281, 341, 3028, 337, 35925, 3991, 13, 51672], "temperature": 0.0, "avg_logprob": -0.168317326959574, "compression_ratio": 1.7719298245614035, "no_speech_prob": 0.40710723400115967}, {"id": 289, "seek": 110558, "start": 1105.58, "end": 1110.86, "text": " If you look at version three, on the right, you can see all valid properties.", "tokens": [50364, 759, 291, 574, 412, 3037, 1045, 11, 322, 264, 558, 11, 291, 393, 536, 439, 7363, 7221, 13, 50628], "temperature": 0.0, "avg_logprob": -0.14844822679829395, "compression_ratio": 1.7265917602996255, "no_speech_prob": 0.016913780942559242}, {"id": 290, "seek": 110558, "start": 1110.86, "end": 1114.86, "text": " Now a lot of these are for really special cases, so you don't need to use them all the", "tokens": [50628, 823, 257, 688, 295, 613, 366, 337, 534, 2121, 3331, 11, 370, 291, 500, 380, 643, 281, 764, 552, 439, 264, 50828], "temperature": 0.0, "avg_logprob": -0.14844822679829395, "compression_ratio": 1.7265917602996255, "no_speech_prob": 0.016913780942559242}, {"id": 291, "seek": 110558, "start": 1114.86, "end": 1118.86, "text": " time, but the ones that we use most of the time are build or image.", "tokens": [50828, 565, 11, 457, 264, 2306, 300, 321, 764, 881, 295, 264, 565, 366, 1322, 420, 3256, 13, 51028], "temperature": 0.0, "avg_logprob": -0.14844822679829395, "compression_ratio": 1.7265917602996255, "no_speech_prob": 0.016913780942559242}, {"id": 292, "seek": 110558, "start": 1118.86, "end": 1122.82, "text": " You also use ports, volumes, environment, and so on.", "tokens": [51028, 509, 611, 764, 18160, 11, 22219, 11, 2823, 11, 293, 370, 322, 13, 51226], "temperature": 0.0, "avg_logprob": -0.14844822679829395, "compression_ratio": 1.7265917602996255, "no_speech_prob": 0.016913780942559242}, {"id": 293, "seek": 110558, "start": 1122.82, "end": 1128.86, "text": " So our API project needs an environment variable that tells where our database is.", "tokens": [51226, 407, 527, 9362, 1716, 2203, 364, 2823, 7006, 300, 5112, 689, 527, 8149, 307, 13, 51528], "temperature": 0.0, "avg_logprob": -0.14844822679829395, "compression_ratio": 1.7265917602996255, "no_speech_prob": 0.016913780942559242}, {"id": 294, "seek": 110558, "start": 1128.86, "end": 1135.5, "text": " So here we set environment, and here we can use the list syntax because we can have multiple", "tokens": [51528, 407, 510, 321, 992, 2823, 11, 293, 510, 321, 393, 764, 264, 1329, 28431, 570, 321, 393, 362, 3866, 51860], "temperature": 0.0, "avg_logprob": -0.14844822679829395, "compression_ratio": 1.7265917602996255, "no_speech_prob": 0.016913780942559242}, {"id": 295, "seek": 113550, "start": 1135.5, "end": 1137.06, "text": " environment variables.", "tokens": [50364, 2823, 9102, 13, 50442], "temperature": 0.0, "avg_logprob": -0.17633785391753576, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.027164923027157784}, {"id": 296, "seek": 113550, "start": 1137.06, "end": 1143.54, "text": " So we set DB underline URL to, here we need to type a MongoDB connection string.", "tokens": [50442, 407, 321, 992, 26754, 833, 1889, 12905, 281, 11, 510, 321, 643, 281, 2010, 257, 48380, 27735, 4984, 6798, 13, 50766], "temperature": 0.0, "avg_logprob": -0.17633785391753576, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.027164923027157784}, {"id": 297, "seek": 113550, "start": 1143.54, "end": 1149.02, "text": " These connection strings always start with MongoDB, colon, two forward slashes.", "tokens": [50766, 1981, 4984, 13985, 1009, 722, 365, 48380, 27735, 11, 8255, 11, 732, 2128, 1061, 12808, 13, 51040], "temperature": 0.0, "avg_logprob": -0.17633785391753576, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.027164923027157784}, {"id": 298, "seek": 113550, "start": 1149.02, "end": 1151.02, "text": " Here we need to type the name of a host.", "tokens": [51040, 1692, 321, 643, 281, 2010, 264, 1315, 295, 257, 3975, 13, 51140], "temperature": 0.0, "avg_logprob": -0.17633785391753576, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.027164923027157784}, {"id": 299, "seek": 113550, "start": 1151.02, "end": 1155.86, "text": " So as I'll show you later in this section, when we start an application with Docker compose", "tokens": [51140, 407, 382, 286, 603, 855, 291, 1780, 294, 341, 3541, 11, 562, 321, 722, 364, 3861, 365, 33772, 35925, 51382], "temperature": 0.0, "avg_logprob": -0.17633785391753576, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.027164923027157784}, {"id": 300, "seek": 113550, "start": 1155.86, "end": 1158.78, "text": " under the hood, a network is created.", "tokens": [51382, 833, 264, 13376, 11, 257, 3209, 307, 2942, 13, 51528], "temperature": 0.0, "avg_logprob": -0.17633785391753576, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.027164923027157784}, {"id": 301, "seek": 113550, "start": 1158.78, "end": 1161.7, "text": " On this network, we're going to have three hosts.", "tokens": [51528, 1282, 341, 3209, 11, 321, 434, 516, 281, 362, 1045, 21573, 13, 51674], "temperature": 0.0, "avg_logprob": -0.17633785391753576, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.027164923027157784}, {"id": 302, "seek": 116170, "start": 1161.7, "end": 1165.54, "text": " The name of these hosts are equal to the names we have defined here.", "tokens": [50364, 440, 1315, 295, 613, 21573, 366, 2681, 281, 264, 5288, 321, 362, 7642, 510, 13, 50556], "temperature": 0.0, "avg_logprob": -0.10623250566087328, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.0009697378263808787}, {"id": 303, "seek": 116170, "start": 1165.54, "end": 1167.82, "text": " So we're going to have a host called DB.", "tokens": [50556, 407, 321, 434, 516, 281, 362, 257, 3975, 1219, 26754, 13, 50670], "temperature": 0.0, "avg_logprob": -0.10623250566087328, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.0009697378263808787}, {"id": 304, "seek": 116170, "start": 1167.82, "end": 1171.5800000000002, "text": " So that is the connection string to our MongoDB server.", "tokens": [50670, 407, 300, 307, 264, 4984, 6798, 281, 527, 48380, 27735, 7154, 13, 50858], "temperature": 0.0, "avg_logprob": -0.10623250566087328, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.0009697378263808787}, {"id": 305, "seek": 116170, "start": 1171.5800000000002, "end": 1174.14, "text": " Now on this server, we can have multiple databases.", "tokens": [50858, 823, 322, 341, 7154, 11, 321, 393, 362, 3866, 22380, 13, 50986], "temperature": 0.0, "avg_logprob": -0.10623250566087328, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.0009697378263808787}, {"id": 306, "seek": 116170, "start": 1174.14, "end": 1179.1000000000001, "text": " So we're going to specify the database name and the connection string as well.", "tokens": [50986, 407, 321, 434, 516, 281, 16500, 264, 8149, 1315, 293, 264, 4984, 6798, 382, 731, 13, 51234], "temperature": 0.0, "avg_logprob": -0.10623250566087328, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.0009697378263808787}, {"id": 307, "seek": 116170, "start": 1179.1000000000001, "end": 1182.7, "text": " So this is one way to set an environment variable.", "tokens": [51234, 407, 341, 307, 472, 636, 281, 992, 364, 2823, 7006, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10623250566087328, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.0009697378263808787}, {"id": 308, "seek": 116170, "start": 1182.7, "end": 1187.82, "text": " But instead of using the list syntax, we can also use the object or property value syntax.", "tokens": [51414, 583, 2602, 295, 1228, 264, 1329, 28431, 11, 321, 393, 611, 764, 264, 2657, 420, 4707, 2158, 28431, 13, 51670], "temperature": 0.0, "avg_logprob": -0.10623250566087328, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.0009697378263808787}, {"id": 309, "seek": 118782, "start": 1187.82, "end": 1190.3, "text": " So we get rid of the hyphen.", "tokens": [50364, 407, 321, 483, 3973, 295, 264, 2477, 47059, 13, 50488], "temperature": 0.0, "avg_logprob": -0.16226744420320086, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.0384608656167984}, {"id": 310, "seek": 118782, "start": 1190.3, "end": 1196.02, "text": " We say DB URL is a property and this is the value of that property.", "tokens": [50488, 492, 584, 26754, 12905, 307, 257, 4707, 293, 341, 307, 264, 2158, 295, 300, 4707, 13, 50774], "temperature": 0.0, "avg_logprob": -0.16226744420320086, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.0384608656167984}, {"id": 311, "seek": 118782, "start": 1196.02, "end": 1200.82, "text": " I find the syntax more readable because we get color coding and it's just cleaner.", "tokens": [50774, 286, 915, 264, 28431, 544, 49857, 570, 321, 483, 2017, 17720, 293, 309, 311, 445, 16532, 13, 51014], "temperature": 0.0, "avg_logprob": -0.16226744420320086, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.0384608656167984}, {"id": 312, "seek": 118782, "start": 1200.82, "end": 1204.3, "text": " That similarly we can add additional environment variables.", "tokens": [51014, 663, 14138, 321, 393, 909, 4497, 2823, 9102, 13, 51188], "temperature": 0.0, "avg_logprob": -0.16226744420320086, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.0384608656167984}, {"id": 313, "seek": 118782, "start": 1204.3, "end": 1205.7, "text": " Now we're almost there.", "tokens": [51188, 823, 321, 434, 1920, 456, 13, 51258], "temperature": 0.0, "avg_logprob": -0.16226744420320086, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.0384608656167984}, {"id": 314, "seek": 118782, "start": 1205.7, "end": 1210.86, "text": " The last thing we want to add here is a volume because we don't want MongoDB to rate data", "tokens": [51258, 440, 1036, 551, 321, 528, 281, 909, 510, 307, 257, 5523, 570, 321, 500, 380, 528, 48380, 27735, 281, 3314, 1412, 51516], "temperature": 0.0, "avg_logprob": -0.16226744420320086, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.0384608656167984}, {"id": 315, "seek": 118782, "start": 1210.86, "end": 1213.8999999999999, "text": " to the temporary file system of the container.", "tokens": [51516, 281, 264, 13413, 3991, 1185, 295, 264, 10129, 13, 51668], "temperature": 0.0, "avg_logprob": -0.16226744420320086, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.0384608656167984}, {"id": 316, "seek": 121390, "start": 1213.9, "end": 1223.1000000000001, "text": " So here we set volumes and again, we can have one or more volume mappings.", "tokens": [50364, 407, 510, 321, 992, 22219, 293, 797, 11, 321, 393, 362, 472, 420, 544, 5523, 463, 28968, 13, 50824], "temperature": 0.0, "avg_logprob": -0.20129239447763034, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00021654307784046978}, {"id": 317, "seek": 121390, "start": 1223.1000000000001, "end": 1224.26, "text": " So we had a hyphen.", "tokens": [50824, 407, 321, 632, 257, 2477, 47059, 13, 50882], "temperature": 0.0, "avg_logprob": -0.20129239447763034, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00021654307784046978}, {"id": 318, "seek": 121390, "start": 1224.26, "end": 1228.8600000000001, "text": " We're going to map a volume called Widley and of course we can call it anything.", "tokens": [50882, 492, 434, 516, 281, 4471, 257, 5523, 1219, 28331, 3420, 293, 295, 1164, 321, 393, 818, 309, 1340, 13, 51112], "temperature": 0.0, "avg_logprob": -0.20129239447763034, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00021654307784046978}, {"id": 319, "seek": 121390, "start": 1228.8600000000001, "end": 1232.5800000000002, "text": " Widley is the name of this application in case you didn't notice.", "tokens": [51112, 28331, 3420, 307, 264, 1315, 295, 341, 3861, 294, 1389, 291, 994, 380, 3449, 13, 51298], "temperature": 0.0, "avg_logprob": -0.20129239447763034, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00021654307784046978}, {"id": 320, "seek": 121390, "start": 1232.5800000000002, "end": 1238.22, "text": " So we're going to map this volume to a directory inside the container.", "tokens": [51298, 407, 321, 434, 516, 281, 4471, 341, 5523, 281, 257, 21120, 1854, 264, 10129, 13, 51580], "temperature": 0.0, "avg_logprob": -0.20129239447763034, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00021654307784046978}, {"id": 321, "seek": 121390, "start": 1238.22, "end": 1243.8600000000001, "text": " Now if you look at the documentation of MongoDB on Docker Hub or just a typical MongoDB", "tokens": [51580, 823, 498, 291, 574, 412, 264, 14333, 295, 48380, 27735, 322, 33772, 18986, 420, 445, 257, 7476, 48380, 27735, 51862], "temperature": 0.0, "avg_logprob": -0.20129239447763034, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00021654307784046978}, {"id": 322, "seek": 124386, "start": 1243.86, "end": 1251.8999999999999, "text": " documentation, you know that by default MongoDB stores its data in slash data slash DB.", "tokens": [50364, 14333, 11, 291, 458, 300, 538, 7576, 48380, 27735, 9512, 1080, 1412, 294, 17330, 1412, 17330, 26754, 13, 50766], "temperature": 0.0, "avg_logprob": -0.16516498724619547, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.009124889969825745}, {"id": 323, "seek": 124386, "start": 1251.8999999999999, "end": 1255.1799999999998, "text": " So we want to map this volume to this directory.", "tokens": [50766, 407, 321, 528, 281, 4471, 341, 5523, 281, 341, 21120, 13, 50930], "temperature": 0.0, "avg_logprob": -0.16516498724619547, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.009124889969825745}, {"id": 324, "seek": 124386, "start": 1255.1799999999998, "end": 1259.86, "text": " So whatever that is written inside this directory is actually outside of this container.", "tokens": [50930, 407, 2035, 300, 307, 3720, 1854, 341, 21120, 307, 767, 2380, 295, 341, 10129, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16516498724619547, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.009124889969825745}, {"id": 325, "seek": 124386, "start": 1259.86, "end": 1263.5, "text": " It's somewhere else in our volume.", "tokens": [51164, 467, 311, 4079, 1646, 294, 527, 5523, 13, 51346], "temperature": 0.0, "avg_logprob": -0.16516498724619547, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.009124889969825745}, {"id": 326, "seek": 124386, "start": 1263.5, "end": 1267.78, "text": " Now because we have used this volume here, we have to define it in our compose file.", "tokens": [51346, 823, 570, 321, 362, 1143, 341, 5523, 510, 11, 321, 362, 281, 6964, 309, 294, 527, 35925, 3991, 13, 51560], "temperature": 0.0, "avg_logprob": -0.16516498724619547, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.009124889969825745}, {"id": 327, "seek": 124386, "start": 1267.78, "end": 1271.02, "text": " So we press enter, remove all the indentations.", "tokens": [51560, 407, 321, 1886, 3242, 11, 4159, 439, 264, 44494, 763, 13, 51722], "temperature": 0.0, "avg_logprob": -0.16516498724619547, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.009124889969825745}, {"id": 328, "seek": 127102, "start": 1271.02, "end": 1275.3799999999999, "text": " So now we are at the same level as services.", "tokens": [50364, 407, 586, 321, 366, 412, 264, 912, 1496, 382, 3328, 13, 50582], "temperature": 0.0, "avg_logprob": -0.12896982245488997, "compression_ratio": 1.7429718875502007, "no_speech_prob": 0.007815612480044365}, {"id": 329, "seek": 127102, "start": 1275.3799999999999, "end": 1281.54, "text": " Here we're going to define another property called volumes and here we're going to add", "tokens": [50582, 1692, 321, 434, 516, 281, 6964, 1071, 4707, 1219, 22219, 293, 510, 321, 434, 516, 281, 909, 50890], "temperature": 0.0, "avg_logprob": -0.12896982245488997, "compression_ratio": 1.7429718875502007, "no_speech_prob": 0.007815612480044365}, {"id": 330, "seek": 127102, "start": 1281.54, "end": 1284.54, "text": " another property called Widley with no value.", "tokens": [50890, 1071, 4707, 1219, 28331, 3420, 365, 572, 2158, 13, 51040], "temperature": 0.0, "avg_logprob": -0.12896982245488997, "compression_ratio": 1.7429718875502007, "no_speech_prob": 0.007815612480044365}, {"id": 331, "seek": 127102, "start": 1284.54, "end": 1288.62, "text": " I know this looks a little bit weird, but this is the syntax we have to follow.", "tokens": [51040, 286, 458, 341, 1542, 257, 707, 857, 3657, 11, 457, 341, 307, 264, 28431, 321, 362, 281, 1524, 13, 51244], "temperature": 0.0, "avg_logprob": -0.12896982245488997, "compression_ratio": 1.7429718875502007, "no_speech_prob": 0.007815612480044365}, {"id": 332, "seek": 127102, "start": 1288.62, "end": 1292.62, "text": " We just have to define the volume first before we can use it.", "tokens": [51244, 492, 445, 362, 281, 6964, 264, 5523, 700, 949, 321, 393, 764, 309, 13, 51444], "temperature": 0.0, "avg_logprob": -0.12896982245488997, "compression_ratio": 1.7429718875502007, "no_speech_prob": 0.007815612480044365}, {"id": 333, "seek": 127102, "start": 1292.62, "end": 1294.86, "text": " So this is our compose file.", "tokens": [51444, 407, 341, 307, 527, 35925, 3991, 13, 51556], "temperature": 0.0, "avg_logprob": -0.12896982245488997, "compression_ratio": 1.7429718875502007, "no_speech_prob": 0.007815612480044365}, {"id": 334, "seek": 127102, "start": 1294.86, "end": 1300.7, "text": " Now we can make this more readable by adding line breaks in between these properties.", "tokens": [51556, 823, 321, 393, 652, 341, 544, 49857, 538, 5127, 1622, 9857, 294, 1296, 613, 7221, 13, 51848], "temperature": 0.0, "avg_logprob": -0.12896982245488997, "compression_ratio": 1.7429718875502007, "no_speech_prob": 0.007815612480044365}, {"id": 335, "seek": 130070, "start": 1300.7, "end": 1303.46, "text": " We can also order these services any way we want.", "tokens": [50364, 492, 393, 611, 1668, 613, 3328, 604, 636, 321, 528, 13, 50502], "temperature": 0.0, "avg_logprob": -0.1701739758861308, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.004133757669478655}, {"id": 336, "seek": 130070, "start": 1303.46, "end": 1306.38, "text": " So currently I'm ordering them from front to back.", "tokens": [50502, 407, 4362, 286, 478, 21739, 552, 490, 1868, 281, 646, 13, 50648], "temperature": 0.0, "avg_logprob": -0.1701739758861308, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.004133757669478655}, {"id": 337, "seek": 130070, "start": 1306.38, "end": 1308.3400000000001, "text": " We can also order them from back to front.", "tokens": [50648, 492, 393, 611, 1668, 552, 490, 646, 281, 1868, 13, 50746], "temperature": 0.0, "avg_logprob": -0.1701739758861308, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.004133757669478655}, {"id": 338, "seek": 130070, "start": 1308.3400000000001, "end": 1312.46, "text": " So we will put database first, then API and then web.", "tokens": [50746, 407, 321, 486, 829, 8149, 700, 11, 550, 9362, 293, 550, 3670, 13, 50952], "temperature": 0.0, "avg_logprob": -0.1701739758861308, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.004133757669478655}, {"id": 339, "seek": 130070, "start": 1312.46, "end": 1314.3400000000001, "text": " So we're done with our compose file.", "tokens": [50952, 407, 321, 434, 1096, 365, 527, 35925, 3991, 13, 51046], "temperature": 0.0, "avg_logprob": -0.1701739758861308, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.004133757669478655}, {"id": 340, "seek": 130070, "start": 1314.3400000000001, "end": 1323.42, "text": " Next I'm going to show you how to build the images.", "tokens": [51046, 3087, 286, 478, 516, 281, 855, 291, 577, 281, 1322, 264, 5267, 13, 51500], "temperature": 0.0, "avg_logprob": -0.1701739758861308, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.004133757669478655}, {"id": 341, "seek": 130070, "start": 1323.42, "end": 1327.8600000000001, "text": " Earlier I told you that Docker compose is built on top of Docker engine.", "tokens": [51500, 24552, 286, 1907, 291, 300, 33772, 35925, 307, 3094, 322, 1192, 295, 33772, 2848, 13, 51722], "temperature": 0.0, "avg_logprob": -0.1701739758861308, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.004133757669478655}, {"id": 342, "seek": 132786, "start": 1327.86, "end": 1332.4199999999998, "text": " So everything we have done with Docker engine like building images, listing them, starting", "tokens": [50364, 407, 1203, 321, 362, 1096, 365, 33772, 2848, 411, 2390, 5267, 11, 22161, 552, 11, 2891, 50592], "temperature": 0.0, "avg_logprob": -0.14740552128972234, "compression_ratio": 1.758490566037736, "no_speech_prob": 0.003944930620491505}, {"id": 343, "seek": 132786, "start": 1332.4199999999998, "end": 1337.62, "text": " containers and so on, all of these operations are also available using Docker compose.", "tokens": [50592, 17089, 293, 370, 322, 11, 439, 295, 613, 7705, 366, 611, 2435, 1228, 33772, 35925, 13, 50852], "temperature": 0.0, "avg_logprob": -0.14740552128972234, "compression_ratio": 1.758490566037736, "no_speech_prob": 0.003944930620491505}, {"id": 344, "seek": 132786, "start": 1337.62, "end": 1338.6999999999998, "text": " Let me show you.", "tokens": [50852, 961, 385, 855, 291, 13, 50906], "temperature": 0.0, "avg_logprob": -0.14740552128972234, "compression_ratio": 1.758490566037736, "no_speech_prob": 0.003944930620491505}, {"id": 345, "seek": 132786, "start": 1338.6999999999998, "end": 1345.1399999999999, "text": " So we type Docker compose, without any arguments, enter, look, we have all these subcommands", "tokens": [50906, 407, 321, 2010, 33772, 35925, 11, 1553, 604, 12869, 11, 3242, 11, 574, 11, 321, 362, 439, 613, 1422, 13278, 2967, 51228], "temperature": 0.0, "avg_logprob": -0.14740552128972234, "compression_ratio": 1.758490566037736, "no_speech_prob": 0.003944930620491505}, {"id": 346, "seek": 132786, "start": 1345.1399999999999, "end": 1351.9399999999998, "text": " like we have RM for removing stopped containers, we have run, we have push, pull and so on.", "tokens": [51228, 411, 321, 362, 23790, 337, 12720, 5936, 17089, 11, 321, 362, 1190, 11, 321, 362, 2944, 11, 2235, 293, 370, 322, 13, 51568], "temperature": 0.0, "avg_logprob": -0.14740552128972234, "compression_ratio": 1.758490566037736, "no_speech_prob": 0.003944930620491505}, {"id": 347, "seek": 132786, "start": 1351.9399999999998, "end": 1356.58, "text": " The difference is that any of these commands will apply to our application as a whole.", "tokens": [51568, 440, 2649, 307, 300, 604, 295, 613, 16901, 486, 3079, 281, 527, 3861, 382, 257, 1379, 13, 51800], "temperature": 0.0, "avg_logprob": -0.14740552128972234, "compression_ratio": 1.758490566037736, "no_speech_prob": 0.003944930620491505}, {"id": 348, "seek": 135658, "start": 1356.58, "end": 1362.6999999999998, "text": " So most of these commands will impact multiple services or multiple containers in our application.", "tokens": [50364, 407, 881, 295, 613, 16901, 486, 2712, 3866, 3328, 420, 3866, 17089, 294, 527, 3861, 13, 50670], "temperature": 0.0, "avg_logprob": -0.12563546214784896, "compression_ratio": 1.695167286245353, "no_speech_prob": 0.010327642783522606}, {"id": 349, "seek": 135658, "start": 1362.6999999999998, "end": 1369.78, "text": " So let's look at Docker compose build and also use the help option.", "tokens": [50670, 407, 718, 311, 574, 412, 33772, 35925, 1322, 293, 611, 764, 264, 854, 3614, 13, 51024], "temperature": 0.0, "avg_logprob": -0.12563546214784896, "compression_ratio": 1.695167286245353, "no_speech_prob": 0.010327642783522606}, {"id": 350, "seek": 135658, "start": 1369.78, "end": 1371.5, "text": " So we have a bunch of options here.", "tokens": [51024, 407, 321, 362, 257, 3840, 295, 3956, 510, 13, 51110], "temperature": 0.0, "avg_logprob": -0.12563546214784896, "compression_ratio": 1.695167286245353, "no_speech_prob": 0.010327642783522606}, {"id": 351, "seek": 135658, "start": 1371.5, "end": 1375.86, "text": " A couple of them I want to point out that are useful to know is no cache.", "tokens": [51110, 316, 1916, 295, 552, 286, 528, 281, 935, 484, 300, 366, 4420, 281, 458, 307, 572, 19459, 13, 51328], "temperature": 0.0, "avg_logprob": -0.12563546214784896, "compression_ratio": 1.695167286245353, "no_speech_prob": 0.010327642783522606}, {"id": 352, "seek": 135658, "start": 1375.86, "end": 1379.02, "text": " With this we can prevent caching when building the image.", "tokens": [51328, 2022, 341, 321, 393, 4871, 269, 2834, 562, 2390, 264, 3256, 13, 51486], "temperature": 0.0, "avg_logprob": -0.12563546214784896, "compression_ratio": 1.695167286245353, "no_speech_prob": 0.010327642783522606}, {"id": 353, "seek": 135658, "start": 1379.02, "end": 1383.3799999999999, "text": " Sometimes you encounter weird issues and you want to make sure that cache is not used.", "tokens": [51486, 4803, 291, 8593, 3657, 2663, 293, 291, 528, 281, 652, 988, 300, 19459, 307, 406, 1143, 13, 51704], "temperature": 0.0, "avg_logprob": -0.12563546214784896, "compression_ratio": 1.695167286245353, "no_speech_prob": 0.010327642783522606}, {"id": 354, "seek": 135658, "start": 1383.3799999999999, "end": 1385.54, "text": " In that case, you use this option.", "tokens": [51704, 682, 300, 1389, 11, 291, 764, 341, 3614, 13, 51812], "temperature": 0.0, "avg_logprob": -0.12563546214784896, "compression_ratio": 1.695167286245353, "no_speech_prob": 0.010327642783522606}, {"id": 355, "seek": 138554, "start": 1385.54, "end": 1388.22, "text": " Another useful option is dash dash pull.", "tokens": [50364, 3996, 4420, 3614, 307, 8240, 8240, 2235, 13, 50498], "temperature": 0.0, "avg_logprob": -0.18841288007538895, "compression_ratio": 1.6174242424242424, "no_speech_prob": 0.04271378740668297}, {"id": 356, "seek": 138554, "start": 1388.22, "end": 1392.74, "text": " With this, we can always pull a newer version of the image.", "tokens": [50498, 2022, 341, 11, 321, 393, 1009, 2235, 257, 17628, 3037, 295, 264, 3256, 13, 50724], "temperature": 0.0, "avg_logprob": -0.18841288007538895, "compression_ratio": 1.6174242424242424, "no_speech_prob": 0.04271378740668297}, {"id": 357, "seek": 138554, "start": 1392.74, "end": 1394.24, "text": " That is also good to know.", "tokens": [50724, 663, 307, 611, 665, 281, 458, 13, 50799], "temperature": 0.0, "avg_logprob": -0.18841288007538895, "compression_ratio": 1.6174242424242424, "no_speech_prob": 0.04271378740668297}, {"id": 358, "seek": 138554, "start": 1394.24, "end": 1396.82, "text": " So in this lesson, I'm not going to use any of these.", "tokens": [50799, 407, 294, 341, 6898, 11, 286, 478, 406, 516, 281, 764, 604, 295, 613, 13, 50928], "temperature": 0.0, "avg_logprob": -0.18841288007538895, "compression_ratio": 1.6174242424242424, "no_speech_prob": 0.04271378740668297}, {"id": 359, "seek": 138554, "start": 1396.82, "end": 1401.22, "text": " We're just going to run Docker compose build.", "tokens": [50928, 492, 434, 445, 516, 281, 1190, 33772, 35925, 1322, 13, 51148], "temperature": 0.0, "avg_logprob": -0.18841288007538895, "compression_ratio": 1.6174242424242424, "no_speech_prob": 0.04271378740668297}, {"id": 360, "seek": 138554, "start": 1401.22, "end": 1406.86, "text": " This built our web and API services and as you noticed, our build was super fast because", "tokens": [51148, 639, 3094, 527, 3670, 293, 9362, 3328, 293, 382, 291, 5694, 11, 527, 1322, 390, 1687, 2370, 570, 51430], "temperature": 0.0, "avg_logprob": -0.18841288007538895, "compression_ratio": 1.6174242424242424, "no_speech_prob": 0.04271378740668297}, {"id": 361, "seek": 138554, "start": 1406.86, "end": 1409.26, "text": " pretty much everything came from the cache.", "tokens": [51430, 1238, 709, 1203, 1361, 490, 264, 19459, 13, 51550], "temperature": 0.0, "avg_logprob": -0.18841288007538895, "compression_ratio": 1.6174242424242424, "no_speech_prob": 0.04271378740668297}, {"id": 362, "seek": 138554, "start": 1409.26, "end": 1412.74, "text": " So let's run Docker images.", "tokens": [51550, 407, 718, 311, 1190, 33772, 5267, 13, 51724], "temperature": 0.0, "avg_logprob": -0.18841288007538895, "compression_ratio": 1.6174242424242424, "no_speech_prob": 0.04271378740668297}, {"id": 363, "seek": 138554, "start": 1412.74, "end": 1415.02, "text": " So I have five images on this machine.", "tokens": [51724, 407, 286, 362, 1732, 5267, 322, 341, 3479, 13, 51838], "temperature": 0.0, "avg_logprob": -0.18841288007538895, "compression_ratio": 1.6174242424242424, "no_speech_prob": 0.04271378740668297}, {"id": 364, "seek": 141502, "start": 1415.02, "end": 1420.3, "text": " With the front end, with the web, with the API, with the back end and Mongo.", "tokens": [50364, 2022, 264, 1868, 917, 11, 365, 264, 3670, 11, 365, 264, 9362, 11, 365, 264, 646, 917, 293, 48380, 13, 50628], "temperature": 0.0, "avg_logprob": -0.1943252216685902, "compression_ratio": 1.7644628099173554, "no_speech_prob": 0.016151348128914833}, {"id": 365, "seek": 141502, "start": 1420.3, "end": 1422.3799999999999, "text": " Mongo obviously came from Docker Hub.", "tokens": [50628, 48380, 2745, 1361, 490, 33772, 18986, 13, 50732], "temperature": 0.0, "avg_logprob": -0.1943252216685902, "compression_ratio": 1.7644628099173554, "no_speech_prob": 0.016151348128914833}, {"id": 366, "seek": 141502, "start": 1422.3799999999999, "end": 1427.98, "text": " Now as part of this build process in this lesson, we built with the web and with the", "tokens": [50732, 823, 382, 644, 295, 341, 1322, 1399, 294, 341, 6898, 11, 321, 3094, 365, 264, 3670, 293, 365, 264, 51012], "temperature": 0.0, "avg_logprob": -0.1943252216685902, "compression_ratio": 1.7644628099173554, "no_speech_prob": 0.016151348128914833}, {"id": 367, "seek": 141502, "start": 1427.98, "end": 1429.26, "text": " API.", "tokens": [51012, 9362, 13, 51076], "temperature": 0.0, "avg_logprob": -0.1943252216685902, "compression_ratio": 1.7644628099173554, "no_speech_prob": 0.016151348128914833}, {"id": 368, "seek": 141502, "start": 1429.26, "end": 1433.26, "text": " These two other images with the front end and back end were built when we started this", "tokens": [51076, 1981, 732, 661, 5267, 365, 264, 1868, 917, 293, 646, 917, 645, 3094, 562, 321, 1409, 341, 51276], "temperature": 0.0, "avg_logprob": -0.1943252216685902, "compression_ratio": 1.7644628099173554, "no_speech_prob": 0.016151348128914833}, {"id": 369, "seek": 141502, "start": 1433.26, "end": 1434.98, "text": " application earlier.", "tokens": [51276, 3861, 3071, 13, 51362], "temperature": 0.0, "avg_logprob": -0.1943252216685902, "compression_ratio": 1.7644628099173554, "no_speech_prob": 0.016151348128914833}, {"id": 370, "seek": 141502, "start": 1434.98, "end": 1437.1, "text": " So back to our project.", "tokens": [51362, 407, 646, 281, 527, 1716, 13, 51468], "temperature": 0.0, "avg_logprob": -0.1943252216685902, "compression_ratio": 1.7644628099173554, "no_speech_prob": 0.016151348128914833}, {"id": 371, "seek": 141502, "start": 1437.1, "end": 1442.5, "text": " In this original compose file that I included in this project, look, I call these services", "tokens": [51468, 682, 341, 3380, 35925, 3991, 300, 286, 5556, 294, 341, 1716, 11, 574, 11, 286, 818, 613, 3328, 51738], "temperature": 0.0, "avg_logprob": -0.1943252216685902, "compression_ratio": 1.7644628099173554, "no_speech_prob": 0.016151348128914833}, {"id": 372, "seek": 144250, "start": 1442.5, "end": 1446.18, "text": " front end and back end instead of web and API.", "tokens": [50364, 1868, 917, 293, 646, 917, 2602, 295, 3670, 293, 9362, 13, 50548], "temperature": 0.0, "avg_logprob": -0.18969698898664866, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.027164611965417862}, {"id": 373, "seek": 144250, "start": 1446.18, "end": 1451.94, "text": " That is why we have these two images, with the front end and with the back end.", "tokens": [50548, 663, 307, 983, 321, 362, 613, 732, 5267, 11, 365, 264, 1868, 917, 293, 365, 264, 646, 917, 13, 50836], "temperature": 0.0, "avg_logprob": -0.18969698898664866, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.027164611965417862}, {"id": 374, "seek": 144250, "start": 1451.94, "end": 1457.5, "text": " Also as you have noticed, when building images with Docker compose, our images are prefixed", "tokens": [50836, 2743, 382, 291, 362, 5694, 11, 562, 2390, 5267, 365, 33772, 35925, 11, 527, 5267, 366, 18417, 40303, 51114], "temperature": 0.0, "avg_logprob": -0.18969698898664866, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.027164611965417862}, {"id": 375, "seek": 144250, "start": 1457.5, "end": 1458.9, "text": " with the name of our application.", "tokens": [51114, 365, 264, 1315, 295, 527, 3861, 13, 51184], "temperature": 0.0, "avg_logprob": -0.18969698898664866, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.027164611965417862}, {"id": 376, "seek": 144250, "start": 1458.9, "end": 1460.5, "text": " Now where does this come from?", "tokens": [51184, 823, 689, 775, 341, 808, 490, 30, 51264], "temperature": 0.0, "avg_logprob": -0.18969698898664866, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.027164611965417862}, {"id": 377, "seek": 144250, "start": 1460.5, "end": 1462.62, "text": " It is the name of the directory.", "tokens": [51264, 467, 307, 264, 1315, 295, 264, 21120, 13, 51370], "temperature": 0.0, "avg_logprob": -0.18969698898664866, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.027164611965417862}, {"id": 378, "seek": 144250, "start": 1462.62, "end": 1467.22, "text": " So currently we are inside a directory called Widley and that is why all these images are", "tokens": [51370, 407, 4362, 321, 366, 1854, 257, 21120, 1219, 28331, 3420, 293, 300, 307, 983, 439, 613, 5267, 366, 51600], "temperature": 0.0, "avg_logprob": -0.18969698898664866, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.027164611965417862}, {"id": 379, "seek": 144250, "start": 1467.22, "end": 1468.86, "text": " prefixed with Widley.", "tokens": [51600, 18417, 40303, 365, 28331, 3420, 13, 51682], "temperature": 0.0, "avg_logprob": -0.18969698898664866, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.027164611965417862}, {"id": 380, "seek": 144250, "start": 1468.86, "end": 1470.1, "text": " I think this is a great convention.", "tokens": [51682, 286, 519, 341, 307, 257, 869, 10286, 13, 51744], "temperature": 0.0, "avg_logprob": -0.18969698898664866, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.027164611965417862}, {"id": 381, "seek": 144250, "start": 1470.1, "end": 1472.26, "text": " I got a question for you.", "tokens": [51744, 286, 658, 257, 1168, 337, 291, 13, 51852], "temperature": 0.0, "avg_logprob": -0.18969698898664866, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.027164611965417862}, {"id": 382, "seek": 147226, "start": 1472.26, "end": 1476.74, "text": " If you look at the created column, you can see all these images were created an hour", "tokens": [50364, 759, 291, 574, 412, 264, 2942, 7738, 11, 291, 393, 536, 439, 613, 5267, 645, 2942, 364, 1773, 50588], "temperature": 0.0, "avg_logprob": -0.14193405210971832, "compression_ratio": 1.7578947368421052, "no_speech_prob": 0.006692139431834221}, {"id": 383, "seek": 147226, "start": 1476.74, "end": 1477.74, "text": " ago.", "tokens": [50588, 2057, 13, 50638], "temperature": 0.0, "avg_logprob": -0.14193405210971832, "compression_ratio": 1.7578947368421052, "no_speech_prob": 0.006692139431834221}, {"id": 384, "seek": 147226, "start": 1477.74, "end": 1480.42, "text": " But didn't we just build the web and API images?", "tokens": [50638, 583, 994, 380, 321, 445, 1322, 264, 3670, 293, 9362, 5267, 30, 50772], "temperature": 0.0, "avg_logprob": -0.14193405210971832, "compression_ratio": 1.7578947368421052, "no_speech_prob": 0.006692139431834221}, {"id": 385, "seek": 147226, "start": 1480.42, "end": 1481.78, "text": " Why do you think this happened?", "tokens": [50772, 1545, 360, 291, 519, 341, 2011, 30, 50840], "temperature": 0.0, "avg_logprob": -0.14193405210971832, "compression_ratio": 1.7578947368421052, "no_speech_prob": 0.006692139431834221}, {"id": 386, "seek": 147226, "start": 1481.78, "end": 1483.02, "text": " Here's the answer.", "tokens": [50840, 1692, 311, 264, 1867, 13, 50902], "temperature": 0.0, "avg_logprob": -0.14193405210971832, "compression_ratio": 1.7578947368421052, "no_speech_prob": 0.006692139431834221}, {"id": 387, "seek": 147226, "start": 1483.02, "end": 1487.14, "text": " Because I built these images front end and back end an hour ago when I was recording the", "tokens": [50902, 1436, 286, 3094, 613, 5267, 1868, 917, 293, 646, 917, 364, 1773, 2057, 562, 286, 390, 6613, 264, 51108], "temperature": 0.0, "avg_logprob": -0.14193405210971832, "compression_ratio": 1.7578947368421052, "no_speech_prob": 0.006692139431834221}, {"id": 388, "seek": 147226, "start": 1487.14, "end": 1489.02, "text": " first lesson in this section.", "tokens": [51108, 700, 6898, 294, 341, 3541, 13, 51202], "temperature": 0.0, "avg_logprob": -0.14193405210971832, "compression_ratio": 1.7578947368421052, "no_speech_prob": 0.006692139431834221}, {"id": 389, "seek": 147226, "start": 1489.02, "end": 1493.9, "text": " Now when building these new images, Docker used everything in the cache because all those", "tokens": [51202, 823, 562, 2390, 613, 777, 5267, 11, 33772, 1143, 1203, 294, 264, 19459, 570, 439, 729, 51446], "temperature": 0.0, "avg_logprob": -0.14193405210971832, "compression_ratio": 1.7578947368421052, "no_speech_prob": 0.006692139431834221}, {"id": 390, "seek": 147226, "start": 1493.9, "end": 1497.22, "text": " files were already available, all those layers were there.", "tokens": [51446, 7098, 645, 1217, 2435, 11, 439, 729, 7914, 645, 456, 13, 51612], "temperature": 0.0, "avg_logprob": -0.14193405210971832, "compression_ratio": 1.7578947368421052, "no_speech_prob": 0.006692139431834221}, {"id": 391, "seek": 147226, "start": 1497.22, "end": 1500.34, "text": " So Docker didn't have to do a full rebuild.", "tokens": [51612, 407, 33772, 994, 380, 362, 281, 360, 257, 1577, 16877, 13, 51768], "temperature": 0.0, "avg_logprob": -0.14193405210971832, "compression_ratio": 1.7578947368421052, "no_speech_prob": 0.006692139431834221}, {"id": 392, "seek": 150034, "start": 1500.34, "end": 1504.5, "text": " That is why we are still using the build from an hour ago.", "tokens": [50364, 663, 307, 983, 321, 366, 920, 1228, 264, 1322, 490, 364, 1773, 2057, 13, 50572], "temperature": 0.0, "avg_logprob": -0.22148005167643228, "compression_ratio": 1.6051502145922747, "no_speech_prob": 0.023687176406383514}, {"id": 393, "seek": 150034, "start": 1504.5, "end": 1511.4199999999998, "text": " Now if you want to force a full rebuild, we can say Docker compose build dash dash no", "tokens": [50572, 823, 498, 291, 528, 281, 3464, 257, 1577, 16877, 11, 321, 393, 584, 33772, 35925, 1322, 8240, 8240, 572, 50918], "temperature": 0.0, "avg_logprob": -0.22148005167643228, "compression_ratio": 1.6051502145922747, "no_speech_prob": 0.023687176406383514}, {"id": 394, "seek": 150034, "start": 1511.4199999999998, "end": 1512.4199999999998, "text": " cache.", "tokens": [50918, 19459, 13, 50968], "temperature": 0.0, "avg_logprob": -0.22148005167643228, "compression_ratio": 1.6051502145922747, "no_speech_prob": 0.023687176406383514}, {"id": 395, "seek": 150034, "start": 1512.4199999999998, "end": 1516.54, "text": " All right, this is going to take a few seconds.", "tokens": [50968, 1057, 558, 11, 341, 307, 516, 281, 747, 257, 1326, 3949, 13, 51174], "temperature": 0.0, "avg_logprob": -0.22148005167643228, "compression_ratio": 1.6051502145922747, "no_speech_prob": 0.023687176406383514}, {"id": 396, "seek": 150034, "start": 1516.54, "end": 1518.54, "text": " So I'll be right back.", "tokens": [51174, 407, 286, 603, 312, 558, 646, 13, 51274], "temperature": 0.0, "avg_logprob": -0.22148005167643228, "compression_ratio": 1.6051502145922747, "no_speech_prob": 0.023687176406383514}, {"id": 397, "seek": 150034, "start": 1518.54, "end": 1521.74, "text": " All right, our images are built.", "tokens": [51274, 1057, 558, 11, 527, 5267, 366, 3094, 13, 51434], "temperature": 0.0, "avg_logprob": -0.22148005167643228, "compression_ratio": 1.6051502145922747, "no_speech_prob": 0.023687176406383514}, {"id": 398, "seek": 150034, "start": 1521.74, "end": 1524.4599999999998, "text": " So let's run Docker images.", "tokens": [51434, 407, 718, 311, 1190, 33772, 5267, 13, 51570], "temperature": 0.0, "avg_logprob": -0.22148005167643228, "compression_ratio": 1.6051502145922747, "no_speech_prob": 0.023687176406383514}, {"id": 399, "seek": 150034, "start": 1524.4599999999998, "end": 1525.4599999999998, "text": " There you go.", "tokens": [51570, 821, 291, 352, 13, 51620], "temperature": 0.0, "avg_logprob": -0.22148005167643228, "compression_ratio": 1.6051502145922747, "no_speech_prob": 0.023687176406383514}, {"id": 400, "seek": 150034, "start": 1525.4599999999998, "end": 1529.78, "text": " Look at the first two images, API and web were built less than a minute ago.", "tokens": [51620, 2053, 412, 264, 700, 732, 5267, 11, 9362, 293, 3670, 645, 3094, 1570, 813, 257, 3456, 2057, 13, 51836], "temperature": 0.0, "avg_logprob": -0.22148005167643228, "compression_ratio": 1.6051502145922747, "no_speech_prob": 0.023687176406383514}, {"id": 401, "seek": 152978, "start": 1529.78, "end": 1541.1, "text": " So that's all about building images, next we're going to talk about starting the application.", "tokens": [50364, 407, 300, 311, 439, 466, 2390, 5267, 11, 958, 321, 434, 516, 281, 751, 466, 2891, 264, 3861, 13, 50930], "temperature": 0.0, "avg_logprob": -0.1540982906634991, "compression_ratio": 1.7149122807017543, "no_speech_prob": 0.0015247572446241975}, {"id": 402, "seek": 152978, "start": 1541.1, "end": 1544.5, "text": " You briefly saw how we can start an application with Docker compose.", "tokens": [50930, 509, 10515, 1866, 577, 321, 393, 722, 364, 3861, 365, 33772, 35925, 13, 51100], "temperature": 0.0, "avg_logprob": -0.1540982906634991, "compression_ratio": 1.7149122807017543, "no_speech_prob": 0.0015247572446241975}, {"id": 403, "seek": 152978, "start": 1544.5, "end": 1547.54, "text": " We just type Docker compose up.", "tokens": [51100, 492, 445, 2010, 33772, 35925, 493, 13, 51252], "temperature": 0.0, "avg_logprob": -0.1540982906634991, "compression_ratio": 1.7149122807017543, "no_speech_prob": 0.0015247572446241975}, {"id": 404, "seek": 152978, "start": 1547.54, "end": 1552.22, "text": " Now if the images are ready, Docker compose will run them inside containers, otherwise", "tokens": [51252, 823, 498, 264, 5267, 366, 1919, 11, 33772, 35925, 486, 1190, 552, 1854, 17089, 11, 5911, 51486], "temperature": 0.0, "avg_logprob": -0.1540982906634991, "compression_ratio": 1.7149122807017543, "no_speech_prob": 0.0015247572446241975}, {"id": 405, "seek": 152978, "start": 1552.22, "end": 1554.66, "text": " it's going to build the images automatically.", "tokens": [51486, 309, 311, 516, 281, 1322, 264, 5267, 6772, 13, 51608], "temperature": 0.0, "avg_logprob": -0.1540982906634991, "compression_ratio": 1.7149122807017543, "no_speech_prob": 0.0015247572446241975}, {"id": 406, "seek": 152978, "start": 1554.66, "end": 1559.22, "text": " Now before executing this, let's look at the available options.", "tokens": [51608, 823, 949, 32368, 341, 11, 718, 311, 574, 412, 264, 2435, 3956, 13, 51836], "temperature": 0.0, "avg_logprob": -0.1540982906634991, "compression_ratio": 1.7149122807017543, "no_speech_prob": 0.0015247572446241975}, {"id": 407, "seek": 155922, "start": 1559.22, "end": 1564.3, "text": " So here we have a ton of options, a couple of them that are useful are build.", "tokens": [50364, 407, 510, 321, 362, 257, 2952, 295, 3956, 11, 257, 1916, 295, 552, 300, 366, 4420, 366, 1322, 13, 50618], "temperature": 0.0, "avg_logprob": -0.1449971243599865, "compression_ratio": 1.6422764227642277, "no_speech_prob": 0.028432931751012802}, {"id": 408, "seek": 155922, "start": 1564.3, "end": 1568.18, "text": " With this we can force a rebuild every time we want to start our application.", "tokens": [50618, 2022, 341, 321, 393, 3464, 257, 16877, 633, 565, 321, 528, 281, 722, 527, 3861, 13, 50812], "temperature": 0.0, "avg_logprob": -0.1449971243599865, "compression_ratio": 1.6422764227642277, "no_speech_prob": 0.028432931751012802}, {"id": 409, "seek": 155922, "start": 1568.18, "end": 1574.38, "text": " So we don't have to explicitly run Docker compose build and then up.", "tokens": [50812, 407, 321, 500, 380, 362, 281, 20803, 1190, 33772, 35925, 1322, 293, 550, 493, 13, 51122], "temperature": 0.0, "avg_logprob": -0.1449971243599865, "compression_ratio": 1.6422764227642277, "no_speech_prob": 0.028432931751012802}, {"id": 410, "seek": 155922, "start": 1574.38, "end": 1578.06, "text": " We can combine the two using the build option.", "tokens": [51122, 492, 393, 10432, 264, 732, 1228, 264, 1322, 3614, 13, 51306], "temperature": 0.0, "avg_logprob": -0.1449971243599865, "compression_ratio": 1.6422764227642277, "no_speech_prob": 0.028432931751012802}, {"id": 411, "seek": 155922, "start": 1578.06, "end": 1581.8600000000001, "text": " The other useful option is dash D for detached mode.", "tokens": [51306, 440, 661, 4420, 3614, 307, 8240, 413, 337, 42050, 4391, 13, 51496], "temperature": 0.0, "avg_logprob": -0.1449971243599865, "compression_ratio": 1.6422764227642277, "no_speech_prob": 0.028432931751012802}, {"id": 412, "seek": 155922, "start": 1581.8600000000001, "end": 1584.46, "text": " So we will start these containers in the background.", "tokens": [51496, 407, 321, 486, 722, 613, 17089, 294, 264, 3678, 13, 51626], "temperature": 0.0, "avg_logprob": -0.1449971243599865, "compression_ratio": 1.6422764227642277, "no_speech_prob": 0.028432931751012802}, {"id": 413, "seek": 155922, "start": 1584.46, "end": 1586.46, "text": " So take a look.", "tokens": [51626, 407, 747, 257, 574, 13, 51726], "temperature": 0.0, "avg_logprob": -0.1449971243599865, "compression_ratio": 1.6422764227642277, "no_speech_prob": 0.028432931751012802}, {"id": 414, "seek": 155922, "start": 1586.46, "end": 1587.46, "text": " All right.", "tokens": [51726, 1057, 558, 13, 51776], "temperature": 0.0, "avg_logprob": -0.1449971243599865, "compression_ratio": 1.6422764227642277, "no_speech_prob": 0.028432931751012802}, {"id": 415, "seek": 158746, "start": 1587.46, "end": 1595.9, "text": " Now if we run Docker compose PS, we can see all the containers relevant to this application.", "tokens": [50364, 823, 498, 321, 1190, 33772, 35925, 8168, 11, 321, 393, 536, 439, 264, 17089, 7340, 281, 341, 3861, 13, 50786], "temperature": 0.0, "avg_logprob": -0.2334180196126302, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.001867511309683323}, {"id": 416, "seek": 158746, "start": 1595.9, "end": 1600.82, "text": " In contrast, if you type Docker PS, we can see all the running containers across all", "tokens": [50786, 682, 8712, 11, 498, 291, 2010, 33772, 8168, 11, 321, 393, 536, 439, 264, 2614, 17089, 2108, 439, 51032], "temperature": 0.0, "avg_logprob": -0.2334180196126302, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.001867511309683323}, {"id": 417, "seek": 158746, "start": 1600.82, "end": 1602.82, "text": " applications.", "tokens": [51032, 5821, 13, 51132], "temperature": 0.0, "avg_logprob": -0.2334180196126302, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.001867511309683323}, {"id": 418, "seek": 158746, "start": 1602.82, "end": 1609.3, "text": " So here we have three containers, Vidly, API one, Vidly DB one and web one.", "tokens": [51132, 407, 510, 321, 362, 1045, 17089, 11, 31185, 356, 11, 9362, 472, 11, 31185, 356, 26754, 472, 293, 3670, 472, 13, 51456], "temperature": 0.0, "avg_logprob": -0.2334180196126302, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.001867511309683323}, {"id": 419, "seek": 158746, "start": 1609.3, "end": 1610.6200000000001, "text": " Now what is this one?", "tokens": [51456, 823, 437, 307, 341, 472, 30, 51522], "temperature": 0.0, "avg_logprob": -0.2334180196126302, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.001867511309683323}, {"id": 420, "seek": 158746, "start": 1610.6200000000001, "end": 1614.14, "text": " Well, we can start multiple containers from the same image.", "tokens": [51522, 1042, 11, 321, 393, 722, 3866, 17089, 490, 264, 912, 3256, 13, 51698], "temperature": 0.0, "avg_logprob": -0.2334180196126302, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.001867511309683323}, {"id": 421, "seek": 158746, "start": 1614.14, "end": 1617.18, "text": " And this is used for high availability and scalability.", "tokens": [51698, 400, 341, 307, 1143, 337, 1090, 17945, 293, 15664, 2310, 13, 51850], "temperature": 0.0, "avg_logprob": -0.2334180196126302, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.001867511309683323}, {"id": 422, "seek": 161718, "start": 1617.18, "end": 1619.22, "text": " And something we'll look at in the future.", "tokens": [50364, 400, 746, 321, 603, 574, 412, 294, 264, 2027, 13, 50466], "temperature": 0.0, "avg_logprob": -0.17880678540877715, "compression_ratio": 1.7716535433070866, "no_speech_prob": 0.041448868811130524}, {"id": 423, "seek": 161718, "start": 1619.22, "end": 1620.78, "text": " So here you can see the container.", "tokens": [50466, 407, 510, 291, 393, 536, 264, 10129, 13, 50544], "temperature": 0.0, "avg_logprob": -0.17880678540877715, "compression_ratio": 1.7716535433070866, "no_speech_prob": 0.041448868811130524}, {"id": 424, "seek": 161718, "start": 1620.78, "end": 1623.66, "text": " You can see what command started that container.", "tokens": [50544, 509, 393, 536, 437, 5622, 1409, 300, 10129, 13, 50688], "temperature": 0.0, "avg_logprob": -0.17880678540877715, "compression_ratio": 1.7716535433070866, "no_speech_prob": 0.041448868811130524}, {"id": 425, "seek": 161718, "start": 1623.66, "end": 1627.02, "text": " So for our API, that was npm start.", "tokens": [50688, 407, 337, 527, 9362, 11, 300, 390, 297, 14395, 722, 13, 50856], "temperature": 0.0, "avg_logprob": -0.17880678540877715, "compression_ratio": 1.7716535433070866, "no_speech_prob": 0.041448868811130524}, {"id": 426, "seek": 161718, "start": 1627.02, "end": 1632.1200000000001, "text": " For our database, that was MongoD or MongoDemon process.", "tokens": [50856, 1171, 527, 8149, 11, 300, 390, 48380, 35, 420, 48380, 35, 36228, 1399, 13, 51111], "temperature": 0.0, "avg_logprob": -0.17880678540877715, "compression_ratio": 1.7716535433070866, "no_speech_prob": 0.041448868811130524}, {"id": 427, "seek": 161718, "start": 1632.1200000000001, "end": 1635.9, "text": " And for our web front end, that was npm start as well.", "tokens": [51111, 400, 337, 527, 3670, 1868, 917, 11, 300, 390, 297, 14395, 722, 382, 731, 13, 51300], "temperature": 0.0, "avg_logprob": -0.17880678540877715, "compression_ratio": 1.7716535433070866, "no_speech_prob": 0.041448868811130524}, {"id": 428, "seek": 161718, "start": 1635.9, "end": 1638.5, "text": " You can see all these containers are up and running.", "tokens": [51300, 509, 393, 536, 439, 613, 17089, 366, 493, 293, 2614, 13, 51430], "temperature": 0.0, "avg_logprob": -0.17880678540877715, "compression_ratio": 1.7716535433070866, "no_speech_prob": 0.041448868811130524}, {"id": 429, "seek": 161718, "start": 1638.5, "end": 1641.54, "text": " And over here, you can see port mappings.", "tokens": [51430, 400, 670, 510, 11, 291, 393, 536, 2436, 463, 28968, 13, 51582], "temperature": 0.0, "avg_logprob": -0.17880678540877715, "compression_ratio": 1.7716535433070866, "no_speech_prob": 0.041448868811130524}, {"id": 430, "seek": 161718, "start": 1641.54, "end": 1645.8600000000001, "text": " So now if we go to local host, port 3000, we can see our application.", "tokens": [51582, 407, 586, 498, 321, 352, 281, 2654, 3975, 11, 2436, 20984, 11, 321, 393, 536, 527, 3861, 13, 51798], "temperature": 0.0, "avg_logprob": -0.17880678540877715, "compression_ratio": 1.7716535433070866, "no_speech_prob": 0.041448868811130524}, {"id": 431, "seek": 161718, "start": 1645.8600000000001, "end": 1646.8600000000001, "text": " Beautiful.", "tokens": [51798, 14724, 13, 51848], "temperature": 0.0, "avg_logprob": -0.17880678540877715, "compression_ratio": 1.7716535433070866, "no_speech_prob": 0.041448868811130524}, {"id": 432, "seek": 164686, "start": 1647.2199999999998, "end": 1648.3799999999999, "text": " How do we take this down?", "tokens": [50382, 1012, 360, 321, 747, 341, 760, 30, 50440], "temperature": 0.0, "avg_logprob": -0.19520961537080653, "compression_ratio": 1.7203389830508475, "no_speech_prob": 0.006289070937782526}, {"id": 433, "seek": 164686, "start": 1648.3799999999999, "end": 1652.82, "text": " Let's say we're done with this application and we want to free up resources.", "tokens": [50440, 961, 311, 584, 321, 434, 1096, 365, 341, 3861, 293, 321, 528, 281, 1737, 493, 3593, 13, 50662], "temperature": 0.0, "avg_logprob": -0.19520961537080653, "compression_ratio": 1.7203389830508475, "no_speech_prob": 0.006289070937782526}, {"id": 434, "seek": 164686, "start": 1652.82, "end": 1657.26, "text": " Back to the terminal, we type Docker compose down.", "tokens": [50662, 5833, 281, 264, 14709, 11, 321, 2010, 33772, 35925, 760, 13, 50884], "temperature": 0.0, "avg_logprob": -0.19520961537080653, "compression_ratio": 1.7203389830508475, "no_speech_prob": 0.006289070937782526}, {"id": 435, "seek": 164686, "start": 1657.26, "end": 1659.58, "text": " This will stop and remove these containers.", "tokens": [50884, 639, 486, 1590, 293, 4159, 613, 17089, 13, 51000], "temperature": 0.0, "avg_logprob": -0.19520961537080653, "compression_ratio": 1.7203389830508475, "no_speech_prob": 0.006289070937782526}, {"id": 436, "seek": 164686, "start": 1659.58, "end": 1661.34, "text": " But the images are still there.", "tokens": [51000, 583, 264, 5267, 366, 920, 456, 13, 51088], "temperature": 0.0, "avg_logprob": -0.19520961537080653, "compression_ratio": 1.7203389830508475, "no_speech_prob": 0.006289070937782526}, {"id": 437, "seek": 164686, "start": 1661.34, "end": 1672.1, "text": " So next time we want to start the application, our application will start pretty quickly.", "tokens": [51088, 407, 958, 565, 321, 528, 281, 722, 264, 3861, 11, 527, 3861, 486, 722, 1238, 2661, 13, 51626], "temperature": 0.0, "avg_logprob": -0.19520961537080653, "compression_ratio": 1.7203389830508475, "no_speech_prob": 0.006289070937782526}, {"id": 438, "seek": 164686, "start": 1672.1, "end": 1673.6999999999998, "text": " Let's talk about networking in Docker.", "tokens": [51626, 961, 311, 751, 466, 17985, 294, 33772, 13, 51706], "temperature": 0.0, "avg_logprob": -0.19520961537080653, "compression_ratio": 1.7203389830508475, "no_speech_prob": 0.006289070937782526}, {"id": 439, "seek": 164686, "start": 1673.6999999999998, "end": 1676.54, "text": " Let me run our application with Docker compose.", "tokens": [51706, 961, 385, 1190, 527, 3861, 365, 33772, 35925, 13, 51848], "temperature": 0.0, "avg_logprob": -0.19520961537080653, "compression_ratio": 1.7203389830508475, "no_speech_prob": 0.006289070937782526}, {"id": 440, "seek": 167654, "start": 1676.54, "end": 1681.5, "text": " Docker compose will automatically create a network and add our containers on that network.", "tokens": [50364, 33772, 35925, 486, 6772, 1884, 257, 3209, 293, 909, 527, 17089, 322, 300, 3209, 13, 50612], "temperature": 0.0, "avg_logprob": -0.20812002536469856, "compression_ratio": 1.736220472440945, "no_speech_prob": 0.028427928686141968}, {"id": 441, "seek": 167654, "start": 1681.5, "end": 1683.7, "text": " So these containers can talk to each other.", "tokens": [50612, 407, 613, 17089, 393, 751, 281, 1184, 661, 13, 50722], "temperature": 0.0, "avg_logprob": -0.20812002536469856, "compression_ratio": 1.736220472440945, "no_speech_prob": 0.028427928686141968}, {"id": 442, "seek": 167654, "start": 1683.7, "end": 1684.78, "text": " Let's see this in action.", "tokens": [50722, 961, 311, 536, 341, 294, 3069, 13, 50776], "temperature": 0.0, "avg_logprob": -0.20812002536469856, "compression_ratio": 1.736220472440945, "no_speech_prob": 0.028427928686141968}, {"id": 443, "seek": 167654, "start": 1684.78, "end": 1689.3, "text": " So I'm going to bring up the application one more time in the detach mode.", "tokens": [50776, 407, 286, 478, 516, 281, 1565, 493, 264, 3861, 472, 544, 565, 294, 264, 43245, 4391, 13, 51002], "temperature": 0.0, "avg_logprob": -0.20812002536469856, "compression_ratio": 1.736220472440945, "no_speech_prob": 0.028427928686141968}, {"id": 444, "seek": 167654, "start": 1689.3, "end": 1690.3, "text": " Good.", "tokens": [51002, 2205, 13, 51052], "temperature": 0.0, "avg_logprob": -0.20812002536469856, "compression_ratio": 1.736220472440945, "no_speech_prob": 0.028427928686141968}, {"id": 445, "seek": 167654, "start": 1690.3, "end": 1692.58, "text": " Now look at the first line.", "tokens": [51052, 823, 574, 412, 264, 700, 1622, 13, 51166], "temperature": 0.0, "avg_logprob": -0.20812002536469856, "compression_ratio": 1.736220472440945, "no_speech_prob": 0.028427928686141968}, {"id": 446, "seek": 167654, "start": 1692.58, "end": 1695.1, "text": " Creating network with the default.", "tokens": [51166, 40002, 3209, 365, 264, 7576, 13, 51292], "temperature": 0.0, "avg_logprob": -0.20812002536469856, "compression_ratio": 1.736220472440945, "no_speech_prob": 0.028427928686141968}, {"id": 447, "seek": 167654, "start": 1695.1, "end": 1700.22, "text": " So we can run Docker network LS.", "tokens": [51292, 407, 321, 393, 1190, 33772, 3209, 36657, 13, 51548], "temperature": 0.0, "avg_logprob": -0.20812002536469856, "compression_ratio": 1.736220472440945, "no_speech_prob": 0.028427928686141968}, {"id": 448, "seek": 167654, "start": 1700.22, "end": 1702.46, "text": " Here we can see all the networks on this machine.", "tokens": [51548, 1692, 321, 393, 536, 439, 264, 9590, 322, 341, 3479, 13, 51660], "temperature": 0.0, "avg_logprob": -0.20812002536469856, "compression_ratio": 1.736220472440945, "no_speech_prob": 0.028427928686141968}, {"id": 449, "seek": 167654, "start": 1702.46, "end": 1705.74, "text": " I think every Docker installation has three networks.", "tokens": [51660, 286, 519, 633, 33772, 13260, 575, 1045, 9590, 13, 51824], "temperature": 0.0, "avg_logprob": -0.20812002536469856, "compression_ratio": 1.736220472440945, "no_speech_prob": 0.028427928686141968}, {"id": 450, "seek": 170574, "start": 1705.86, "end": 1707.78, "text": " Bridge, host, and none.", "tokens": [50370, 18917, 11, 3975, 11, 293, 6022, 13, 50466], "temperature": 0.0, "avg_logprob": -0.22709168739689206, "compression_ratio": 1.615702479338843, "no_speech_prob": 0.014500449411571026}, {"id": 451, "seek": 170574, "start": 1707.78, "end": 1711.9, "text": " Honestly, I'm not sure what these networks are for, but what matters here is that we", "tokens": [50466, 12348, 11, 286, 478, 406, 988, 437, 613, 9590, 366, 337, 11, 457, 437, 7001, 510, 307, 300, 321, 50672], "temperature": 0.0, "avg_logprob": -0.22709168739689206, "compression_ratio": 1.615702479338843, "no_speech_prob": 0.014500449411571026}, {"id": 452, "seek": 170574, "start": 1711.9, "end": 1714.86, "text": " have a network called Widley default.", "tokens": [50672, 362, 257, 3209, 1219, 28331, 3420, 7576, 13, 50820], "temperature": 0.0, "avg_logprob": -0.22709168739689206, "compression_ratio": 1.615702479338843, "no_speech_prob": 0.014500449411571026}, {"id": 453, "seek": 170574, "start": 1714.86, "end": 1719.46, "text": " The driver for this network is bridge on Linux or NAT on Windows.", "tokens": [50820, 440, 6787, 337, 341, 3209, 307, 7283, 322, 18734, 420, 14500, 322, 8591, 13, 51050], "temperature": 0.0, "avg_logprob": -0.22709168739689206, "compression_ratio": 1.615702479338843, "no_speech_prob": 0.014500449411571026}, {"id": 454, "seek": 170574, "start": 1719.46, "end": 1727.54, "text": " Now this network contains three hosts or three containers, web, API, and DB.", "tokens": [51050, 823, 341, 3209, 8306, 1045, 21573, 420, 1045, 17089, 11, 3670, 11, 9362, 11, 293, 26754, 13, 51454], "temperature": 0.0, "avg_logprob": -0.22709168739689206, "compression_ratio": 1.615702479338843, "no_speech_prob": 0.014500449411571026}, {"id": 455, "seek": 170574, "start": 1727.54, "end": 1731.74, "text": " So these hosts or these containers can talk to each other using their name.", "tokens": [51454, 407, 613, 21573, 420, 613, 17089, 393, 751, 281, 1184, 661, 1228, 641, 1315, 13, 51664], "temperature": 0.0, "avg_logprob": -0.22709168739689206, "compression_ratio": 1.615702479338843, "no_speech_prob": 0.014500449411571026}, {"id": 456, "seek": 170574, "start": 1731.74, "end": 1733.02, "text": " Let's see this in action.", "tokens": [51664, 961, 311, 536, 341, 294, 3069, 13, 51728], "temperature": 0.0, "avg_logprob": -0.22709168739689206, "compression_ratio": 1.615702479338843, "no_speech_prob": 0.014500449411571026}, {"id": 457, "seek": 173302, "start": 1733.02, "end": 1737.58, "text": " So back to the terminal, let's look at the running containers.", "tokens": [50364, 407, 646, 281, 264, 14709, 11, 718, 311, 574, 412, 264, 2614, 17089, 13, 50592], "temperature": 0.0, "avg_logprob": -0.1623831631844504, "compression_ratio": 1.7245762711864407, "no_speech_prob": 0.0007321643061004579}, {"id": 458, "seek": 173302, "start": 1737.58, "end": 1740.62, "text": " So we have Mongo, web, and API.", "tokens": [50592, 407, 321, 362, 48380, 11, 3670, 11, 293, 9362, 13, 50744], "temperature": 0.0, "avg_logprob": -0.1623831631844504, "compression_ratio": 1.7245762711864407, "no_speech_prob": 0.0007321643061004579}, {"id": 459, "seek": 173302, "start": 1740.62, "end": 1745.74, "text": " Now we're going to start a shell session on the web container and ping the API container.", "tokens": [50744, 823, 321, 434, 516, 281, 722, 257, 8720, 5481, 322, 264, 3670, 10129, 293, 26151, 264, 9362, 10129, 13, 51000], "temperature": 0.0, "avg_logprob": -0.1623831631844504, "compression_ratio": 1.7245762711864407, "no_speech_prob": 0.0007321643061004579}, {"id": 460, "seek": 173302, "start": 1745.74, "end": 1746.74, "text": " Take a look.", "tokens": [51000, 3664, 257, 574, 13, 51050], "temperature": 0.0, "avg_logprob": -0.1623831631844504, "compression_ratio": 1.7245762711864407, "no_speech_prob": 0.0007321643061004579}, {"id": 461, "seek": 173302, "start": 1746.74, "end": 1750.1, "text": " So we're going to execute in the interactive mode.", "tokens": [51050, 407, 321, 434, 516, 281, 14483, 294, 264, 15141, 4391, 13, 51218], "temperature": 0.0, "avg_logprob": -0.1623831631844504, "compression_ratio": 1.7245762711864407, "no_speech_prob": 0.0007321643061004579}, {"id": 462, "seek": 173302, "start": 1750.1, "end": 1755.54, "text": " The container ID is 8c6 and we're going to run shell.", "tokens": [51218, 440, 10129, 7348, 307, 1649, 66, 21, 293, 321, 434, 516, 281, 1190, 8720, 13, 51490], "temperature": 0.0, "avg_logprob": -0.1623831631844504, "compression_ratio": 1.7245762711864407, "no_speech_prob": 0.0007321643061004579}, {"id": 463, "seek": 173302, "start": 1755.54, "end": 1757.06, "text": " So let's ping API.", "tokens": [51490, 407, 718, 311, 26151, 9362, 13, 51566], "temperature": 0.0, "avg_logprob": -0.1623831631844504, "compression_ratio": 1.7245762711864407, "no_speech_prob": 0.0007321643061004579}, {"id": 464, "seek": 173302, "start": 1757.06, "end": 1761.9, "text": " We get a permission error because we have logged in with the app user that comes from", "tokens": [51566, 492, 483, 257, 11226, 6713, 570, 321, 362, 27231, 294, 365, 264, 724, 4195, 300, 1487, 490, 51808], "temperature": 0.0, "avg_logprob": -0.1623831631844504, "compression_ratio": 1.7245762711864407, "no_speech_prob": 0.0007321643061004579}, {"id": 465, "seek": 176190, "start": 1761.9, "end": 1763.7800000000002, "text": " our Docker file, remember?", "tokens": [50364, 527, 33772, 3991, 11, 1604, 30, 50458], "temperature": 0.0, "avg_logprob": -0.21472840473569674, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0038241699803620577}, {"id": 466, "seek": 176190, "start": 1763.7800000000002, "end": 1768.02, "text": " So we have logged in with the app user and this user doesn't have ping permission.", "tokens": [50458, 407, 321, 362, 27231, 294, 365, 264, 724, 4195, 293, 341, 4195, 1177, 380, 362, 26151, 11226, 13, 50670], "temperature": 0.0, "avg_logprob": -0.21472840473569674, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0038241699803620577}, {"id": 467, "seek": 176190, "start": 1768.02, "end": 1770.7, "text": " So let's exit.", "tokens": [50670, 407, 718, 311, 11043, 13, 50804], "temperature": 0.0, "avg_logprob": -0.21472840473569674, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0038241699803620577}, {"id": 468, "seek": 176190, "start": 1770.7, "end": 1772.3000000000002, "text": " I'm going to bring up the last command.", "tokens": [50804, 286, 478, 516, 281, 1565, 493, 264, 1036, 5622, 13, 50884], "temperature": 0.0, "avg_logprob": -0.21472840473569674, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0038241699803620577}, {"id": 469, "seek": 176190, "start": 1772.3000000000002, "end": 1776.1000000000001, "text": " Now here we have to use an extra option for setting the user.", "tokens": [50884, 823, 510, 321, 362, 281, 764, 364, 2857, 3614, 337, 3287, 264, 4195, 13, 51074], "temperature": 0.0, "avg_logprob": -0.21472840473569674, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0038241699803620577}, {"id": 470, "seek": 176190, "start": 1776.1000000000001, "end": 1779.46, "text": " We're going to log in as the root user.", "tokens": [51074, 492, 434, 516, 281, 3565, 294, 382, 264, 5593, 4195, 13, 51242], "temperature": 0.0, "avg_logprob": -0.21472840473569674, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0038241699803620577}, {"id": 471, "seek": 176190, "start": 1779.46, "end": 1780.46, "text": " Good.", "tokens": [51242, 2205, 13, 51292], "temperature": 0.0, "avg_logprob": -0.21472840473569674, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0038241699803620577}, {"id": 472, "seek": 176190, "start": 1780.46, "end": 1782.1000000000001, "text": " Now look at the shell prompt.", "tokens": [51292, 823, 574, 412, 264, 8720, 12391, 13, 51374], "temperature": 0.0, "avg_logprob": -0.21472840473569674, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0038241699803620577}, {"id": 473, "seek": 176190, "start": 1782.1000000000001, "end": 1785.5800000000002, "text": " We have a pound sign, which means we have the highest privileges.", "tokens": [51374, 492, 362, 257, 12013, 1465, 11, 597, 1355, 321, 362, 264, 6343, 32588, 13, 51548], "temperature": 0.0, "avg_logprob": -0.21472840473569674, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0038241699803620577}, {"id": 474, "seek": 176190, "start": 1785.5800000000002, "end": 1787.22, "text": " So here we can ping API.", "tokens": [51548, 407, 510, 321, 393, 26151, 9362, 13, 51630], "temperature": 0.0, "avg_logprob": -0.21472840473569674, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0038241699803620577}, {"id": 475, "seek": 178722, "start": 1787.22, "end": 1793.5, "text": " Now look, we're getting responses from a machine with this IP address.", "tokens": [50364, 823, 574, 11, 321, 434, 1242, 13019, 490, 257, 3479, 365, 341, 8671, 2985, 13, 50678], "temperature": 0.0, "avg_logprob": -0.21512501214140206, "compression_ratio": 1.6017316017316017, "no_speech_prob": 0.0013249553740024567}, {"id": 476, "seek": 178722, "start": 1793.5, "end": 1796.22, "text": " Now on your machine, this IP might be different.", "tokens": [50678, 823, 322, 428, 3479, 11, 341, 8671, 1062, 312, 819, 13, 50814], "temperature": 0.0, "avg_logprob": -0.21512501214140206, "compression_ratio": 1.6017316017316017, "no_speech_prob": 0.0013249553740024567}, {"id": 477, "seek": 178722, "start": 1796.22, "end": 1799.26, "text": " Now let's press Ctrl and C to get out of this.", "tokens": [50814, 823, 718, 311, 1886, 35233, 293, 383, 281, 483, 484, 295, 341, 13, 50966], "temperature": 0.0, "avg_logprob": -0.21512501214140206, "compression_ratio": 1.6017316017316017, "no_speech_prob": 0.0013249553740024567}, {"id": 478, "seek": 178722, "start": 1799.26, "end": 1801.74, "text": " So this is what happens under the hood.", "tokens": [50966, 407, 341, 307, 437, 2314, 833, 264, 13376, 13, 51090], "temperature": 0.0, "avg_logprob": -0.21512501214140206, "compression_ratio": 1.6017316017316017, "no_speech_prob": 0.0013249553740024567}, {"id": 479, "seek": 178722, "start": 1801.74, "end": 1807.42, "text": " Docker comes with an embedded DNS server that contains the name and IP of these containers.", "tokens": [51090, 33772, 1487, 365, 364, 16741, 35153, 7154, 300, 8306, 264, 1315, 293, 8671, 295, 613, 17089, 13, 51374], "temperature": 0.0, "avg_logprob": -0.21512501214140206, "compression_ratio": 1.6017316017316017, "no_speech_prob": 0.0013249553740024567}, {"id": 480, "seek": 178722, "start": 1807.42, "end": 1812.06, "text": " Now inside each container, we have a component called the DNS resolver.", "tokens": [51374, 823, 1854, 1184, 10129, 11, 321, 362, 257, 6542, 1219, 264, 35153, 34480, 13, 51606], "temperature": 0.0, "avg_logprob": -0.21512501214140206, "compression_ratio": 1.6017316017316017, "no_speech_prob": 0.0013249553740024567}, {"id": 481, "seek": 181206, "start": 1812.06, "end": 1817.94, "text": " This DNS resolver talks to the DNS server to find the IP address of the target container.", "tokens": [50364, 639, 35153, 34480, 6686, 281, 264, 35153, 7154, 281, 915, 264, 8671, 2985, 295, 264, 3779, 10129, 13, 50658], "temperature": 0.0, "avg_logprob": -0.13044292838485153, "compression_ratio": 2.0137614678899083, "no_speech_prob": 0.015423204749822617}, {"id": 482, "seek": 181206, "start": 1817.94, "end": 1824.1399999999999, "text": " So when we ping the API container, this DNS resolver asks the server, what is the IP address", "tokens": [50658, 407, 562, 321, 26151, 264, 9362, 10129, 11, 341, 35153, 34480, 8962, 264, 7154, 11, 437, 307, 264, 8671, 2985, 50968], "temperature": 0.0, "avg_logprob": -0.13044292838485153, "compression_ratio": 2.0137614678899083, "no_speech_prob": 0.015423204749822617}, {"id": 483, "seek": 181206, "start": 1824.1399999999999, "end": 1827.22, "text": " of the API machine or API container?", "tokens": [50968, 295, 264, 9362, 3479, 420, 9362, 10129, 30, 51122], "temperature": 0.0, "avg_logprob": -0.13044292838485153, "compression_ratio": 2.0137614678899083, "no_speech_prob": 0.015423204749822617}, {"id": 484, "seek": 181206, "start": 1827.22, "end": 1832.34, "text": " The DNS server returns the IP address and then the web container can directly talk to", "tokens": [51122, 440, 35153, 7154, 11247, 264, 8671, 2985, 293, 550, 264, 3670, 10129, 393, 3838, 751, 281, 51378], "temperature": 0.0, "avg_logprob": -0.13044292838485153, "compression_ratio": 2.0137614678899083, "no_speech_prob": 0.015423204749822617}, {"id": 485, "seek": 181206, "start": 1832.34, "end": 1835.22, "text": " the API container using its IP address.", "tokens": [51378, 264, 9362, 10129, 1228, 1080, 8671, 2985, 13, 51522], "temperature": 0.0, "avg_logprob": -0.13044292838485153, "compression_ratio": 2.0137614678899083, "no_speech_prob": 0.015423204749822617}, {"id": 486, "seek": 181206, "start": 1835.22, "end": 1839.3, "text": " So each container has an IP address and is part of a network.", "tokens": [51522, 407, 1184, 10129, 575, 364, 8671, 2985, 293, 307, 644, 295, 257, 3209, 13, 51726], "temperature": 0.0, "avg_logprob": -0.13044292838485153, "compression_ratio": 2.0137614678899083, "no_speech_prob": 0.015423204749822617}, {"id": 487, "seek": 181206, "start": 1839.3, "end": 1840.78, "text": " Let me show you one more thing.", "tokens": [51726, 961, 385, 855, 291, 472, 544, 551, 13, 51800], "temperature": 0.0, "avg_logprob": -0.13044292838485153, "compression_ratio": 2.0137614678899083, "no_speech_prob": 0.015423204749822617}, {"id": 488, "seek": 184078, "start": 1840.78, "end": 1846.94, "text": " So back to the terminal, here we can run ifconfig to see the IP address of this container.", "tokens": [50364, 407, 646, 281, 264, 14709, 11, 510, 321, 393, 1190, 498, 1671, 20646, 281, 536, 264, 8671, 2985, 295, 341, 10129, 13, 50672], "temperature": 0.0, "avg_logprob": -0.13789078822502723, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.0006878342246636748}, {"id": 489, "seek": 184078, "start": 1846.94, "end": 1847.94, "text": " Take a look.", "tokens": [50672, 3664, 257, 574, 13, 50722], "temperature": 0.0, "avg_logprob": -0.13789078822502723, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.0006878342246636748}, {"id": 490, "seek": 184078, "start": 1847.94, "end": 1855.3799999999999, "text": " So this container has two network adapters, one of them is Ethernet zero and over here", "tokens": [50722, 407, 341, 10129, 575, 732, 3209, 23169, 1559, 11, 472, 295, 552, 307, 38636, 7129, 4018, 293, 670, 510, 51094], "temperature": 0.0, "avg_logprob": -0.13789078822502723, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.0006878342246636748}, {"id": 491, "seek": 184078, "start": 1855.3799999999999, "end": 1858.3, "text": " you can see the IP address of this container.", "tokens": [51094, 291, 393, 536, 264, 8671, 2985, 295, 341, 10129, 13, 51240], "temperature": 0.0, "avg_logprob": -0.13789078822502723, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.0006878342246636748}, {"id": 492, "seek": 184078, "start": 1858.3, "end": 1864.7, "text": " So 172.21.02 is the IP address of the web container.", "tokens": [51240, 407, 3282, 17, 13, 4436, 13, 12756, 307, 264, 8671, 2985, 295, 264, 3670, 10129, 13, 51560], "temperature": 0.0, "avg_logprob": -0.13789078822502723, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.0006878342246636748}, {"id": 493, "seek": 184078, "start": 1864.7, "end": 1870.1, "text": " Now back to our compose file, earlier when we defined the API service, we added an environment", "tokens": [51560, 823, 646, 281, 527, 35925, 3991, 11, 3071, 562, 321, 7642, 264, 9362, 2643, 11, 321, 3869, 364, 2823, 51830], "temperature": 0.0, "avg_logprob": -0.13789078822502723, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.0006878342246636748}, {"id": 494, "seek": 187010, "start": 1870.1, "end": 1873.86, "text": " variable that contains a database connection string.", "tokens": [50364, 7006, 300, 8306, 257, 8149, 4984, 6798, 13, 50552], "temperature": 0.0, "avg_logprob": -0.1756986560243549, "compression_ratio": 1.75, "no_speech_prob": 0.1310938596725464}, {"id": 495, "seek": 187010, "start": 1873.86, "end": 1878.82, "text": " In this connection string we have DB, which is the name of a host, that is the DB host", "tokens": [50552, 682, 341, 4984, 6798, 321, 362, 26754, 11, 597, 307, 264, 1315, 295, 257, 3975, 11, 300, 307, 264, 26754, 3975, 50800], "temperature": 0.0, "avg_logprob": -0.1756986560243549, "compression_ratio": 1.75, "no_speech_prob": 0.1310938596725464}, {"id": 496, "seek": 187010, "start": 1878.82, "end": 1880.34, "text": " or the DB container.", "tokens": [50800, 420, 264, 26754, 10129, 13, 50876], "temperature": 0.0, "avg_logprob": -0.1756986560243549, "compression_ratio": 1.75, "no_speech_prob": 0.1310938596725464}, {"id": 497, "seek": 187010, "start": 1880.34, "end": 1884.9399999999998, "text": " You saw that our API container can talk to this container because both these containers", "tokens": [50876, 509, 1866, 300, 527, 9362, 10129, 393, 751, 281, 341, 10129, 570, 1293, 613, 17089, 51106], "temperature": 0.0, "avg_logprob": -0.1756986560243549, "compression_ratio": 1.75, "no_speech_prob": 0.1310938596725464}, {"id": 498, "seek": 187010, "start": 1884.9399999999998, "end": 1889.1, "text": " or all containers in this application are part of the same network.", "tokens": [51106, 420, 439, 17089, 294, 341, 3861, 366, 644, 295, 264, 912, 3209, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1756986560243549, "compression_ratio": 1.75, "no_speech_prob": 0.1310938596725464}, {"id": 499, "seek": 187010, "start": 1889.1, "end": 1894.54, "text": " Now one thing I want you to understand here is that this host is only available inside", "tokens": [51314, 823, 472, 551, 286, 528, 291, 281, 1223, 510, 307, 300, 341, 3975, 307, 787, 2435, 1854, 51586], "temperature": 0.0, "avg_logprob": -0.1756986560243549, "compression_ratio": 1.75, "no_speech_prob": 0.1310938596725464}, {"id": 500, "seek": 187010, "start": 1894.54, "end": 1896.2199999999998, "text": " the Docker environment.", "tokens": [51586, 264, 33772, 2823, 13, 51670], "temperature": 0.0, "avg_logprob": -0.1756986560243549, "compression_ratio": 1.75, "no_speech_prob": 0.1310938596725464}, {"id": 501, "seek": 189622, "start": 1896.22, "end": 1902.58, "text": " So if I open up my browser and go to localhost slash DB, I'm not going to get anything.", "tokens": [50364, 407, 498, 286, 1269, 493, 452, 11185, 293, 352, 281, 2654, 6037, 17330, 26754, 11, 286, 478, 406, 516, 281, 483, 1340, 13, 50682], "temperature": 0.0, "avg_logprob": -0.09723626787417403, "compression_ratio": 1.7405857740585775, "no_speech_prob": 0.06952264159917831}, {"id": 502, "seek": 189622, "start": 1902.58, "end": 1908.02, "text": " So the API container can directly talk to the DB container, but if you want to access", "tokens": [50682, 407, 264, 9362, 10129, 393, 3838, 751, 281, 264, 26754, 10129, 11, 457, 498, 291, 528, 281, 2105, 50954], "temperature": 0.0, "avg_logprob": -0.09723626787417403, "compression_ratio": 1.7405857740585775, "no_speech_prob": 0.06952264159917831}, {"id": 503, "seek": 189622, "start": 1908.02, "end": 1914.42, "text": " this container we need port mappings and that is why we have this port mapping over here.", "tokens": [50954, 341, 10129, 321, 643, 2436, 463, 28968, 293, 300, 307, 983, 321, 362, 341, 2436, 18350, 670, 510, 13, 51274], "temperature": 0.0, "avg_logprob": -0.09723626787417403, "compression_ratio": 1.7405857740585775, "no_speech_prob": 0.06952264159917831}, {"id": 504, "seek": 189622, "start": 1914.42, "end": 1919.26, "text": " So this port on the host is mapped to this port on the container.", "tokens": [51274, 407, 341, 2436, 322, 264, 3975, 307, 33318, 281, 341, 2436, 322, 264, 10129, 13, 51516], "temperature": 0.0, "avg_logprob": -0.09723626787417403, "compression_ratio": 1.7405857740585775, "no_speech_prob": 0.06952264159917831}, {"id": 505, "seek": 189622, "start": 1919.26, "end": 1924.54, "text": " So if you open up MongoDB Compass, which is a popular MongoDB client, we can establish", "tokens": [51516, 407, 498, 291, 1269, 493, 48380, 27735, 50179, 11, 597, 307, 257, 3743, 48380, 27735, 6423, 11, 321, 393, 8327, 51780], "temperature": 0.0, "avg_logprob": -0.09723626787417403, "compression_ratio": 1.7405857740585775, "no_speech_prob": 0.06952264159917831}, {"id": 506, "seek": 192454, "start": 1924.54, "end": 1931.78, "text": " a connection to localhost port 27017, because this port is mapped to our container.", "tokens": [50364, 257, 4984, 281, 2654, 6037, 2436, 40774, 7773, 11, 570, 341, 2436, 307, 33318, 281, 527, 10129, 13, 50726], "temperature": 0.0, "avg_logprob": -0.18705249282549014, "compression_ratio": 1.7044534412955465, "no_speech_prob": 0.17547249794006348}, {"id": 507, "seek": 192454, "start": 1931.78, "end": 1933.34, "text": " Let's verify this real quick.", "tokens": [50726, 961, 311, 16888, 341, 957, 1702, 13, 50804], "temperature": 0.0, "avg_logprob": -0.18705249282549014, "compression_ratio": 1.7044534412955465, "no_speech_prob": 0.17547249794006348}, {"id": 508, "seek": 192454, "start": 1933.34, "end": 1935.34, "text": " So connect, great.", "tokens": [50804, 407, 1745, 11, 869, 13, 50904], "temperature": 0.0, "avg_logprob": -0.18705249282549014, "compression_ratio": 1.7044534412955465, "no_speech_prob": 0.17547249794006348}, {"id": 509, "seek": 192454, "start": 1935.34, "end": 1939.6599999999999, "text": " So here we can see all our databases, here's our vitli database and in this database we", "tokens": [50904, 407, 510, 321, 393, 536, 439, 527, 22380, 11, 510, 311, 527, 9467, 2081, 8149, 293, 294, 341, 8149, 321, 51120], "temperature": 0.0, "avg_logprob": -0.18705249282549014, "compression_ratio": 1.7044534412955465, "no_speech_prob": 0.17547249794006348}, {"id": 510, "seek": 192454, "start": 1939.6599999999999, "end": 1942.98, "text": " have a collection called movies with four documents.", "tokens": [51120, 362, 257, 5765, 1219, 6233, 365, 1451, 8512, 13, 51286], "temperature": 0.0, "avg_logprob": -0.18705249282549014, "compression_ratio": 1.7044534412955465, "no_speech_prob": 0.17547249794006348}, {"id": 511, "seek": 192454, "start": 1942.98, "end": 1947.26, "text": " So here are the movies that we currently have in the database.", "tokens": [51286, 407, 510, 366, 264, 6233, 300, 321, 4362, 362, 294, 264, 8149, 13, 51500], "temperature": 0.0, "avg_logprob": -0.18705249282549014, "compression_ratio": 1.7044534412955465, "no_speech_prob": 0.17547249794006348}, {"id": 512, "seek": 192454, "start": 1947.26, "end": 1954.06, "text": " So this is all about Docker networking, next we're going to talk about viewing logs.", "tokens": [51500, 407, 341, 307, 439, 466, 33772, 17985, 11, 958, 321, 434, 516, 281, 751, 466, 17480, 20820, 13, 51840], "temperature": 0.0, "avg_logprob": -0.18705249282549014, "compression_ratio": 1.7044534412955465, "no_speech_prob": 0.17547249794006348}, {"id": 513, "seek": 195406, "start": 1954.06, "end": 1955.86, "text": " Thank you so much for watching this video.", "tokens": [50364, 1044, 291, 370, 709, 337, 1976, 341, 960, 13, 50454], "temperature": 0.0, "avg_logprob": -0.15093758841541327, "compression_ratio": 1.6463878326996197, "no_speech_prob": 0.28115761280059814}, {"id": 514, "seek": 195406, "start": 1955.86, "end": 1960.62, "text": " As I said, this video is part of my ultimate Docker course that teaches you everything you", "tokens": [50454, 1018, 286, 848, 11, 341, 960, 307, 644, 295, 452, 9705, 33772, 1164, 300, 16876, 291, 1203, 291, 50692], "temperature": 0.0, "avg_logprob": -0.15093758841541327, "compression_ratio": 1.6463878326996197, "no_speech_prob": 0.28115761280059814}, {"id": 515, "seek": 195406, "start": 1960.62, "end": 1964.4199999999998, "text": " need to know about Docker from the basics to more advanced concepts.", "tokens": [50692, 643, 281, 458, 466, 33772, 490, 264, 14688, 281, 544, 7339, 10392, 13, 50882], "temperature": 0.0, "avg_logprob": -0.15093758841541327, "compression_ratio": 1.6463878326996197, "no_speech_prob": 0.28115761280059814}, {"id": 516, "seek": 195406, "start": 1964.4199999999998, "end": 1967.94, "text": " So if you want to learn more, I highly encourage you to take a full course.", "tokens": [50882, 407, 498, 291, 528, 281, 1466, 544, 11, 286, 5405, 5373, 291, 281, 747, 257, 1577, 1164, 13, 51058], "temperature": 0.0, "avg_logprob": -0.15093758841541327, "compression_ratio": 1.6463878326996197, "no_speech_prob": 0.28115761280059814}, {"id": 517, "seek": 195406, "start": 1967.94, "end": 1971.82, "text": " It's much faster and better than jumping from one tutorial to another.", "tokens": [51058, 467, 311, 709, 4663, 293, 1101, 813, 11233, 490, 472, 7073, 281, 1071, 13, 51252], "temperature": 0.0, "avg_logprob": -0.15093758841541327, "compression_ratio": 1.6463878326996197, "no_speech_prob": 0.28115761280059814}, {"id": 518, "seek": 195406, "start": 1971.82, "end": 1974.58, "text": " If you're interested, the link is below this video.", "tokens": [51252, 759, 291, 434, 3102, 11, 264, 2113, 307, 2507, 341, 960, 13, 51390], "temperature": 0.0, "avg_logprob": -0.15093758841541327, "compression_ratio": 1.6463878326996197, "no_speech_prob": 0.28115761280059814}, {"id": 519, "seek": 195406, "start": 1974.58, "end": 1975.3799999999999, "text": " Thank you and have a great day.", "tokens": [51390, 1044, 291, 293, 362, 257, 869, 786, 13, 51430], "temperature": 0.0, "avg_logprob": -0.15093758841541327, "compression_ratio": 1.6463878326996197, "no_speech_prob": 0.28115761280059814}], "language": "en"}