{"text": " It's hard to believe that all your photos, videos, music, messages, and apps can be stored in the palm of your hand. And to most of us, it's a mystery how so much information can fit in such a small space. But it might not seem so surprising when you see the complexity inside your smartphone or the inside of this one terabyte solid-state drive commonly found in laptops or computers. However, as seeing the outside of this memory storage microchip tells us little about how these smartphones and solid-state drives can store tens of thousands of photos and files, let's explore deeper and zoom in until we get to a nanoscopic view. And it's here that we can see the structures called VINAND that hold all the data in your smartphone and computer. Here's where the real magic happens. Every picture, message, and bit of information gets saved as quantities of electrons inside these memory cells which are called charge-trapped flash. And in this episode, we'll learn how smartphone memory and solid-state drives work. Now, hold on. These insanely small and intricate structures seem very complex. And yeah, they are. I'm not going to say this marvel of engineering is simple. But you have to trust me. Stick around, watch closely, maybe watch this video twice. And by the end of it, this technology will amaze you. It'll blow your mind at least twice over. And yeah, you'll have a thorough understanding as to how such a small device can store weeks of high-quality video, tens of thousands of pictures, or hundreds of thousands of songs in such an itty-bitty little space. So let's get started. We're going to use a real-life example and explore how it works when you save a picture to your smartphone or computer. First, this picture is made up of pixels. And each pixel has a color. So let's zoom in so that we can see the individual pixels. The color of every pixel is defined by a combination of three numbers, ranging from 0 to 255, each representing red, green, or blue. For example, the numbers would be 55, 53, 55 for this pixel's color right here. And then 124, 121, and 119 for this pixel. Each of these three numbers, from 0 to 255, is represented by 8 bits in binary, or 8 ones and zeros, you know, because computers work in binary. So three colors, red, green, and blue, and 8 bits each, means each pixel takes 24 bits to define its color. This picture is a grid of colored pixels. So let's turn it into a grid of values, kind of like a spreadsheet in Excel, but called an array instead of a spreadsheet. This array of bits is what your computer cares about, and non-coincidentally, it's also the information that the camera on my smartphone recorded when I took the picture. One quick note, if you want to see the pixels in any picture, just open it in an image editing program like paint, or 3D paint in this case, and zoom in. And then if you want to see the red, green, and blue, or RGB values, just use the eyedropper, click on a pixel, and then click on the edit color option. Right here, you can see the three values for red, green, and blue, and the resulting color. Okay, with that covered, let's get back to the episode. First, we're going to zoom out to see the full picture, which is 3,024 pixels wide, and 4,032 pixels tall, which is a total of around 12 million pixels, or 12 megapixels, which relates to the resolution of the 12 megapixel camera on my smartphone. Next, by doing some multiplication, we calculate that an array of this size where each pixel is defined by 24 bits, or 24 zeros or ones, only requires 293 million bits, or a unique set of 293 million zeros or ones. That's a ton of bits. So let's figure out how your smartphone, or the solid state drive, seamlessly stores every single one of them. Okay, so let's open up that solid state drive again, and zoom into a simplified nanoscopic view, kind of like the one we had earlier. It's here that we can see the memory cells that are used in every single one of your smartphones or tablets, as well as inside the solid state drive in your computer. This is the basic unit of a computer's long-term memory storage, and it's called charge-trapped flash memory. So, how does it work? Well, in each cell, we can store information by placing different levels of electrons onto a charge trap, which is the key component inside the memory cell. Older technology could only store two different levels of electrons, a lot of electrons or very few electrons, which were used to store a single bit as a one or zero. However, engineers have been developing more finely tuned capabilities for trapping and measuring different amounts of electrons or charges onto the charge trap. Most memory cells in 2020 can hold eight different levels, but newer technology can have sixteen different levels of electrons. This means that a single cell, instead of holding only one bit as a lot of electrons or no electrons, can now hold three or more bits. For this example, we're going to stick with three bits. So in this cell, if we were to have very few electrons on it, it would be one, one, one. While some electrons get designated as one, zero, zero, and a lot of electrons are zero, zero, zero. There are eight different levels for all the various amounts of electron charges that our charge trap can be set or written to. The key to the charge trap is that it is specially designed so that after it gets charged with electrons, it can hold onto those electrons for decades, which is how information is saved or written to the solid state drive. I mean, it's called a charge trap for a reason. It traps electrons or charges for years on end, and in order to read the information, the electron charge level is measured, and the amount of charge on the charge trap is unchanged. However, in order to erase the contents of a memory cell, all the electron charges are forcibly removed from the charge trap, returning it to its lowest level, which is one, one, one, and leaving no excess electron charges behind. Let's move on and explore how these memory cells are organized so that we can store more than three bits of information. After we zoom out a little, you can see that the memory cells are stacked vertically. This is where the vertical part in vertical NAND or VNAND comes from. This stack of memory cells, which is technically called a string, is composed of ten charge trap flash cells layered one on top of another. When information is written to or read from a string, only one cell can be activated at any given time, and to do that, we use separate control gates attached to every layer in the string. It works like this. The bottom control gate first says, hey you, charge trap one, what's your electron charge level at? Then the bottom cell sends that information through the center of the string up to the information highway at the top, which is technically called a bit line. Then the next control gate for the second layer asks for the charge level in the second cell and so on up the string, each cell sending their information up to the highway or bit line. The same kind of sequence happens when charges are being added to a charge trap, which is how information is written to a memory cell. The main thing is that only one layer in the string is either written to or read from at any given time. Let's move on in complexity. Next, we duplicate this string 32 times, and this gets us a page of strings. Let's review some terminology. This is a memory cell, and this is a string. And now here we have a page, and we're going to call this entire page of strings a row. When we duplicate the string, we also duplicate the bit line 32 times. However, rather than duplicate the control gates, we're going to have every cell in the same page share a common control gate. This makes it so that when information is written to or read from a row, an entire page composed of 32 adjacent cells, all in the same layer, are activated at the same time. Let's step up in complexity again. Next, we duplicate these rows 6 times until we get a block, but we're going to do it 12 times so we can see 2 blocks. Okay, so again, here we have a column, here is a row, and this is a layer. And now here's a cell, and here's a string. Next we have a page, and finally we have a block. We're going to connect the tops of each string in a column together, so they all share the same bit line, and our bit line is looking like a highway now. In addition, we have to add a control gate that selects between rows so that only one row is using the bit line at a time. These are called bit line selectors. As discussed, these bit lines are like highways, and the selectors at the top act as traffic lights that mediate the flow of information so that only a single row can use the highway or is active at a time. Similarly, the control gates attached to each layer act as traffic lights for the layers. With bit line selectors along the tops of each row and control gate selectors along each layer, the solid state drive can read from or write to a single page at any given time. Additionally, in order to connect to the bit line selectors and control gate selectors, there are wires that drop down from above and run perpendicular to the bit lines. So let's quickly recap. Eight different levels of electrons are placed on charge traps in order to store three bits of information. These charge trap flash memory cells are stacked into strings, ten cells tall, which are duplicated into pages of 32 strings in a row. Next, those pages of strings are duplicated until we have a block six rows deep. And here we're showing two blocks. Doing some quick multiplication, we find that there are 3,840 memory cells here capable of storing a total of 11,520 bits. With each pixel in our picture requiring 24 bits, that means that we can store 480 pixels, or this much of our overall picture. That means you need about 25,000 times the size of this layout to store the contents of this single picture. And here's where we learn about the actual size of a memory chip. All the principles we've discussed remain the same, so keep those in mind. It's just that the size is much more extensive than we discussed in our example. It's hard to pin down exact numbers because manufacturers are continually improving their designs and they're very secretive regarding what their designs look like. But I'll tell you what I know. The latest designs utilize not ten layers as in the example, but rather somewhere around 96 to 136 layers tall. Here's a single sheet of paper so you can get a sense of the approximate height of these stacks of memory cells. Now that we understand the height, let's think about the width. A page is around 30,000 to 60,000 adjacent memory cells wide. That means there are 30,000 to 60,000 bitlines in our information superhighway. Blocks are every 4 to 8 rows and there are around 4,000 to 6,000 blocks. Along the edges are the control gate selectors and the bitline selectors on the other side. Together they comprise what is called a row decoder. And by using both sets of selectors as traffic lights, we're able to access a single page. To repeat this, only one page, 45,000 or so cells wide, ever uses the bitline to read or write information at any given time. All tens of thousands of bitlines feed down here to the page buffer where the information of a single page is read to or written from. Let's transition to see what an overall chip might look like. Here we have the arrays of 3D memory cells, the row decoder and the page buffer at the bottom. Additional peripheral circuitry can be found here for supporting the chip. In order to fit more capacity, engineers copied this layout onto the other side. This chip can read or write at a rate of around 500 megabytes per second. That means that it can read from or write to around 63 blocks every single second. That's incredibly fast. Okay, let's add the last level of complexity. Engineers like to fit even more stuff in as small a space as possible. So on top of having a massive array of memory cells in this insanely complex layout, they decided to copy this chip eight times and stack it into a single microchip. At the bottom, an additional interface chip is used to coordinate between the eight different chips. And that's it. That's all there is in this one microchip that can be found at the center of every one of your smart phones, tablets or solid state drives. This video covered a lot and I hope you kept up. You can always watch this video a second time. And if you do watch it a second time, we added our notes and commentary into the English Canada subtitles. Turn them on by clicking the settings gear over here. On the contrary, the notes that are placed up here are caveats or footnotes. But the notes we placed in the English Canada subtitles include commentary, additional information and much more. Let us know what you think of them in the comments. Also, we'll be making a follow up set of episodes that will branch off and explain how each part works in detail. In separate episodes, we'll cover specifics as to how the charge trap flash works, how the bit line and control gate selectors work, and how these microchips are manufactured. Also, take a look at our channel page where we cover other topics such as how touch screens work, how PCBs work or how cameras in your smartphone work. If you have any questions or want us to add more branches relating to solid state drives, tell us in the comments below. But for now, thanks for watching. Subscribe and hit the bell to get notified when we post more branch episodes on how solid state drives work and other topics. If you learned something new, share this video with others, tweet it, post it to your favorite discussion board, or share it on social media so others can learn how this amazing technology works. Until next time, consider the conceptual simplicity, yet structural complexity in the world around you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.5, "text": " It's hard to believe that all your photos, videos, music, messages, and apps can be stored", "tokens": [50364, 467, 311, 1152, 281, 1697, 300, 439, 428, 5787, 11, 2145, 11, 1318, 11, 7897, 11, 293, 7733, 393, 312, 12187, 50689], "temperature": 0.0, "avg_logprob": -0.143079141775767, "compression_ratio": 1.610878661087866, "no_speech_prob": 0.040730398148298264}, {"id": 1, "seek": 0, "start": 6.5, "end": 8.6, "text": " in the palm of your hand.", "tokens": [50689, 294, 264, 17018, 295, 428, 1011, 13, 50794], "temperature": 0.0, "avg_logprob": -0.143079141775767, "compression_ratio": 1.610878661087866, "no_speech_prob": 0.040730398148298264}, {"id": 2, "seek": 0, "start": 8.6, "end": 15.08, "text": " And to most of us, it's a mystery how so much information can fit in such a small space.", "tokens": [50794, 400, 281, 881, 295, 505, 11, 309, 311, 257, 11422, 577, 370, 709, 1589, 393, 3318, 294, 1270, 257, 1359, 1901, 13, 51118], "temperature": 0.0, "avg_logprob": -0.143079141775767, "compression_ratio": 1.610878661087866, "no_speech_prob": 0.040730398148298264}, {"id": 3, "seek": 0, "start": 15.08, "end": 21.0, "text": " But it might not seem so surprising when you see the complexity inside your smartphone", "tokens": [51118, 583, 309, 1062, 406, 1643, 370, 8830, 562, 291, 536, 264, 14024, 1854, 428, 13307, 51414], "temperature": 0.0, "avg_logprob": -0.143079141775767, "compression_ratio": 1.610878661087866, "no_speech_prob": 0.040730398148298264}, {"id": 4, "seek": 0, "start": 21.0, "end": 28.32, "text": " or the inside of this one terabyte solid-state drive commonly found in laptops or computers.", "tokens": [51414, 420, 264, 1854, 295, 341, 472, 1796, 34529, 5100, 12, 15406, 3332, 12719, 1352, 294, 27642, 420, 10807, 13, 51780], "temperature": 0.0, "avg_logprob": -0.143079141775767, "compression_ratio": 1.610878661087866, "no_speech_prob": 0.040730398148298264}, {"id": 5, "seek": 2832, "start": 28.52, "end": 35.32, "text": " However, as seeing the outside of this memory storage microchip tells us little about how", "tokens": [50374, 2908, 11, 382, 2577, 264, 2380, 295, 341, 4675, 6725, 4532, 339, 647, 5112, 505, 707, 466, 577, 50714], "temperature": 0.0, "avg_logprob": -0.19081231319543088, "compression_ratio": 1.5896414342629481, "no_speech_prob": 0.0005273510469123721}, {"id": 6, "seek": 2832, "start": 35.32, "end": 42.16, "text": " these smartphones and solid-state drives can store tens of thousands of photos and files,", "tokens": [50714, 613, 26782, 293, 5100, 12, 15406, 11754, 393, 3531, 10688, 295, 5383, 295, 5787, 293, 7098, 11, 51056], "temperature": 0.0, "avg_logprob": -0.19081231319543088, "compression_ratio": 1.5896414342629481, "no_speech_prob": 0.0005273510469123721}, {"id": 7, "seek": 2832, "start": 42.16, "end": 47.84, "text": " let's explore deeper and zoom in until we get to a nanoscopic view.", "tokens": [51056, 718, 311, 6839, 7731, 293, 8863, 294, 1826, 321, 483, 281, 257, 14067, 10466, 40216, 1910, 13, 51340], "temperature": 0.0, "avg_logprob": -0.19081231319543088, "compression_ratio": 1.5896414342629481, "no_speech_prob": 0.0005273510469123721}, {"id": 8, "seek": 2832, "start": 47.84, "end": 53.6, "text": " And it's here that we can see the structures called VINAND that hold all the data in your", "tokens": [51340, 400, 309, 311, 510, 300, 321, 393, 536, 264, 9227, 1219, 691, 1464, 8070, 300, 1797, 439, 264, 1412, 294, 428, 51628], "temperature": 0.0, "avg_logprob": -0.19081231319543088, "compression_ratio": 1.5896414342629481, "no_speech_prob": 0.0005273510469123721}, {"id": 9, "seek": 2832, "start": 53.6, "end": 55.6, "text": " smartphone and computer.", "tokens": [51628, 13307, 293, 3820, 13, 51728], "temperature": 0.0, "avg_logprob": -0.19081231319543088, "compression_ratio": 1.5896414342629481, "no_speech_prob": 0.0005273510469123721}, {"id": 10, "seek": 2832, "start": 55.6, "end": 58.16, "text": " Here's where the real magic happens.", "tokens": [51728, 1692, 311, 689, 264, 957, 5585, 2314, 13, 51856], "temperature": 0.0, "avg_logprob": -0.19081231319543088, "compression_ratio": 1.5896414342629481, "no_speech_prob": 0.0005273510469123721}, {"id": 11, "seek": 5816, "start": 58.16, "end": 65.36, "text": " Every picture, message, and bit of information gets saved as quantities of electrons inside", "tokens": [50364, 2048, 3036, 11, 3636, 11, 293, 857, 295, 1589, 2170, 6624, 382, 22927, 295, 14265, 1854, 50724], "temperature": 0.0, "avg_logprob": -0.17752177626998336, "compression_ratio": 1.4887892376681615, "no_speech_prob": 0.0018965259660035372}, {"id": 12, "seek": 5816, "start": 65.36, "end": 70.39999999999999, "text": " these memory cells which are called charge-trapped flash.", "tokens": [50724, 613, 4675, 5438, 597, 366, 1219, 4602, 12, 17227, 3320, 7319, 13, 50976], "temperature": 0.0, "avg_logprob": -0.17752177626998336, "compression_ratio": 1.4887892376681615, "no_speech_prob": 0.0018965259660035372}, {"id": 13, "seek": 5816, "start": 70.39999999999999, "end": 76.4, "text": " And in this episode, we'll learn how smartphone memory and solid-state drives work.", "tokens": [50976, 400, 294, 341, 3500, 11, 321, 603, 1466, 577, 13307, 4675, 293, 5100, 12, 15406, 11754, 589, 13, 51276], "temperature": 0.0, "avg_logprob": -0.17752177626998336, "compression_ratio": 1.4887892376681615, "no_speech_prob": 0.0018965259660035372}, {"id": 14, "seek": 5816, "start": 76.4, "end": 78.44, "text": " Now, hold on.", "tokens": [51276, 823, 11, 1797, 322, 13, 51378], "temperature": 0.0, "avg_logprob": -0.17752177626998336, "compression_ratio": 1.4887892376681615, "no_speech_prob": 0.0018965259660035372}, {"id": 15, "seek": 5816, "start": 78.44, "end": 83.8, "text": " These insanely small and intricate structures seem very complex.", "tokens": [51378, 1981, 40965, 1359, 293, 38015, 9227, 1643, 588, 3997, 13, 51646], "temperature": 0.0, "avg_logprob": -0.17752177626998336, "compression_ratio": 1.4887892376681615, "no_speech_prob": 0.0018965259660035372}, {"id": 16, "seek": 5816, "start": 83.8, "end": 85.36, "text": " And yeah, they are.", "tokens": [51646, 400, 1338, 11, 436, 366, 13, 51724], "temperature": 0.0, "avg_logprob": -0.17752177626998336, "compression_ratio": 1.4887892376681615, "no_speech_prob": 0.0018965259660035372}, {"id": 17, "seek": 8536, "start": 85.36, "end": 89.24, "text": " I'm not going to say this marvel of engineering is simple.", "tokens": [50364, 286, 478, 406, 516, 281, 584, 341, 23893, 295, 7043, 307, 2199, 13, 50558], "temperature": 0.0, "avg_logprob": -0.12590585129984308, "compression_ratio": 1.5299539170506913, "no_speech_prob": 0.029306896030902863}, {"id": 18, "seek": 8536, "start": 89.24, "end": 91.2, "text": " But you have to trust me.", "tokens": [50558, 583, 291, 362, 281, 3361, 385, 13, 50656], "temperature": 0.0, "avg_logprob": -0.12590585129984308, "compression_ratio": 1.5299539170506913, "no_speech_prob": 0.029306896030902863}, {"id": 19, "seek": 8536, "start": 91.2, "end": 96.48, "text": " Stick around, watch closely, maybe watch this video twice.", "tokens": [50656, 22744, 926, 11, 1159, 8185, 11, 1310, 1159, 341, 960, 6091, 13, 50920], "temperature": 0.0, "avg_logprob": -0.12590585129984308, "compression_ratio": 1.5299539170506913, "no_speech_prob": 0.029306896030902863}, {"id": 20, "seek": 8536, "start": 96.48, "end": 101.24, "text": " And by the end of it, this technology will amaze you.", "tokens": [50920, 400, 538, 264, 917, 295, 309, 11, 341, 2899, 486, 669, 13660, 291, 13, 51158], "temperature": 0.0, "avg_logprob": -0.12590585129984308, "compression_ratio": 1.5299539170506913, "no_speech_prob": 0.029306896030902863}, {"id": 21, "seek": 8536, "start": 101.24, "end": 104.32, "text": " It'll blow your mind at least twice over.", "tokens": [51158, 467, 603, 6327, 428, 1575, 412, 1935, 6091, 670, 13, 51312], "temperature": 0.0, "avg_logprob": -0.12590585129984308, "compression_ratio": 1.5299539170506913, "no_speech_prob": 0.029306896030902863}, {"id": 22, "seek": 8536, "start": 104.32, "end": 110.56, "text": " And yeah, you'll have a thorough understanding as to how such a small device can store weeks", "tokens": [51312, 400, 1338, 11, 291, 603, 362, 257, 12934, 3701, 382, 281, 577, 1270, 257, 1359, 4302, 393, 3531, 3259, 51624], "temperature": 0.0, "avg_logprob": -0.12590585129984308, "compression_ratio": 1.5299539170506913, "no_speech_prob": 0.029306896030902863}, {"id": 23, "seek": 11056, "start": 110.56, "end": 118.04, "text": " of high-quality video, tens of thousands of pictures, or hundreds of thousands of songs", "tokens": [50364, 295, 1090, 12, 11286, 960, 11, 10688, 295, 5383, 295, 5242, 11, 420, 6779, 295, 5383, 295, 5781, 50738], "temperature": 0.0, "avg_logprob": -0.15076623064406375, "compression_ratio": 1.536697247706422, "no_speech_prob": 0.15390275418758392}, {"id": 24, "seek": 11056, "start": 118.04, "end": 121.8, "text": " in such an itty-bitty little space.", "tokens": [50738, 294, 1270, 364, 309, 874, 12, 65, 10016, 707, 1901, 13, 50926], "temperature": 0.0, "avg_logprob": -0.15076623064406375, "compression_ratio": 1.536697247706422, "no_speech_prob": 0.15390275418758392}, {"id": 25, "seek": 11056, "start": 121.8, "end": 125.52000000000001, "text": " So let's get started.", "tokens": [50926, 407, 718, 311, 483, 1409, 13, 51112], "temperature": 0.0, "avg_logprob": -0.15076623064406375, "compression_ratio": 1.536697247706422, "no_speech_prob": 0.15390275418758392}, {"id": 26, "seek": 11056, "start": 125.52000000000001, "end": 130.34, "text": " We're going to use a real-life example and explore how it works when you save a picture", "tokens": [51112, 492, 434, 516, 281, 764, 257, 957, 12, 9073, 1365, 293, 6839, 577, 309, 1985, 562, 291, 3155, 257, 3036, 51353], "temperature": 0.0, "avg_logprob": -0.15076623064406375, "compression_ratio": 1.536697247706422, "no_speech_prob": 0.15390275418758392}, {"id": 27, "seek": 11056, "start": 130.34, "end": 132.8, "text": " to your smartphone or computer.", "tokens": [51353, 281, 428, 13307, 420, 3820, 13, 51476], "temperature": 0.0, "avg_logprob": -0.15076623064406375, "compression_ratio": 1.536697247706422, "no_speech_prob": 0.15390275418758392}, {"id": 28, "seek": 11056, "start": 132.8, "end": 136.72, "text": " First, this picture is made up of pixels.", "tokens": [51476, 2386, 11, 341, 3036, 307, 1027, 493, 295, 18668, 13, 51672], "temperature": 0.0, "avg_logprob": -0.15076623064406375, "compression_ratio": 1.536697247706422, "no_speech_prob": 0.15390275418758392}, {"id": 29, "seek": 11056, "start": 136.72, "end": 138.96, "text": " And each pixel has a color.", "tokens": [51672, 400, 1184, 19261, 575, 257, 2017, 13, 51784], "temperature": 0.0, "avg_logprob": -0.15076623064406375, "compression_ratio": 1.536697247706422, "no_speech_prob": 0.15390275418758392}, {"id": 30, "seek": 13896, "start": 138.96, "end": 143.4, "text": " So let's zoom in so that we can see the individual pixels.", "tokens": [50364, 407, 718, 311, 8863, 294, 370, 300, 321, 393, 536, 264, 2609, 18668, 13, 50586], "temperature": 0.0, "avg_logprob": -0.10504776722676046, "compression_ratio": 1.4114583333333333, "no_speech_prob": 0.0015009519411250949}, {"id": 31, "seek": 13896, "start": 143.4, "end": 151.84, "text": " The color of every pixel is defined by a combination of three numbers, ranging from 0 to 255,", "tokens": [50586, 440, 2017, 295, 633, 19261, 307, 7642, 538, 257, 6562, 295, 1045, 3547, 11, 25532, 490, 1958, 281, 3552, 20, 11, 51008], "temperature": 0.0, "avg_logprob": -0.10504776722676046, "compression_ratio": 1.4114583333333333, "no_speech_prob": 0.0015009519411250949}, {"id": 32, "seek": 13896, "start": 151.84, "end": 155.72, "text": " each representing red, green, or blue.", "tokens": [51008, 1184, 13460, 2182, 11, 3092, 11, 420, 3344, 13, 51202], "temperature": 0.0, "avg_logprob": -0.10504776722676046, "compression_ratio": 1.4114583333333333, "no_speech_prob": 0.0015009519411250949}, {"id": 33, "seek": 13896, "start": 155.72, "end": 164.8, "text": " For example, the numbers would be 55, 53, 55 for this pixel's color right here.", "tokens": [51202, 1171, 1365, 11, 264, 3547, 576, 312, 12330, 11, 21860, 11, 12330, 337, 341, 19261, 311, 2017, 558, 510, 13, 51656], "temperature": 0.0, "avg_logprob": -0.10504776722676046, "compression_ratio": 1.4114583333333333, "no_speech_prob": 0.0015009519411250949}, {"id": 34, "seek": 16480, "start": 164.8, "end": 173.20000000000002, "text": " And then 124, 121, and 119 for this pixel.", "tokens": [50364, 400, 550, 2272, 19, 11, 2272, 16, 11, 293, 2975, 24, 337, 341, 19261, 13, 50784], "temperature": 0.0, "avg_logprob": -0.13009889372463884, "compression_ratio": 1.2986111111111112, "no_speech_prob": 0.09532453864812851}, {"id": 35, "seek": 16480, "start": 173.20000000000002, "end": 182.52, "text": " Each of these three numbers, from 0 to 255, is represented by 8 bits in binary, or 8 ones", "tokens": [50784, 6947, 295, 613, 1045, 3547, 11, 490, 1958, 281, 3552, 20, 11, 307, 10379, 538, 1649, 9239, 294, 17434, 11, 420, 1649, 2306, 51250], "temperature": 0.0, "avg_logprob": -0.13009889372463884, "compression_ratio": 1.2986111111111112, "no_speech_prob": 0.09532453864812851}, {"id": 36, "seek": 16480, "start": 182.52, "end": 186.96, "text": " and zeros, you know, because computers work in binary.", "tokens": [51250, 293, 35193, 11, 291, 458, 11, 570, 10807, 589, 294, 17434, 13, 51472], "temperature": 0.0, "avg_logprob": -0.13009889372463884, "compression_ratio": 1.2986111111111112, "no_speech_prob": 0.09532453864812851}, {"id": 37, "seek": 18696, "start": 186.96, "end": 196.8, "text": " So three colors, red, green, and blue, and 8 bits each, means each pixel takes 24 bits", "tokens": [50364, 407, 1045, 4577, 11, 2182, 11, 3092, 11, 293, 3344, 11, 293, 1649, 9239, 1184, 11, 1355, 1184, 19261, 2516, 4022, 9239, 50856], "temperature": 0.0, "avg_logprob": -0.10188257066827071, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.005139325745403767}, {"id": 38, "seek": 18696, "start": 196.8, "end": 198.76000000000002, "text": " to define its color.", "tokens": [50856, 281, 6964, 1080, 2017, 13, 50954], "temperature": 0.0, "avg_logprob": -0.10188257066827071, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.005139325745403767}, {"id": 39, "seek": 18696, "start": 198.76000000000002, "end": 201.74, "text": " This picture is a grid of colored pixels.", "tokens": [50954, 639, 3036, 307, 257, 10748, 295, 14332, 18668, 13, 51103], "temperature": 0.0, "avg_logprob": -0.10188257066827071, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.005139325745403767}, {"id": 40, "seek": 18696, "start": 201.74, "end": 208.4, "text": " So let's turn it into a grid of values, kind of like a spreadsheet in Excel, but called", "tokens": [51103, 407, 718, 311, 1261, 309, 666, 257, 10748, 295, 4190, 11, 733, 295, 411, 257, 27733, 294, 19060, 11, 457, 1219, 51436], "temperature": 0.0, "avg_logprob": -0.10188257066827071, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.005139325745403767}, {"id": 41, "seek": 18696, "start": 208.4, "end": 212.28, "text": " an array instead of a spreadsheet.", "tokens": [51436, 364, 10225, 2602, 295, 257, 27733, 13, 51630], "temperature": 0.0, "avg_logprob": -0.10188257066827071, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.005139325745403767}, {"id": 42, "seek": 21228, "start": 212.28, "end": 219.0, "text": " This array of bits is what your computer cares about, and non-coincidentally, it's also the", "tokens": [50364, 639, 10225, 295, 9239, 307, 437, 428, 3820, 12310, 466, 11, 293, 2107, 12, 1291, 4647, 36578, 11, 309, 311, 611, 264, 50700], "temperature": 0.0, "avg_logprob": -0.11002465656825475, "compression_ratio": 1.514018691588785, "no_speech_prob": 0.23076337575912476}, {"id": 43, "seek": 21228, "start": 219.0, "end": 223.94, "text": " information that the camera on my smartphone recorded when I took the picture.", "tokens": [50700, 1589, 300, 264, 2799, 322, 452, 13307, 8287, 562, 286, 1890, 264, 3036, 13, 50947], "temperature": 0.0, "avg_logprob": -0.11002465656825475, "compression_ratio": 1.514018691588785, "no_speech_prob": 0.23076337575912476}, {"id": 44, "seek": 21228, "start": 223.94, "end": 229.88, "text": " One quick note, if you want to see the pixels in any picture, just open it in an image editing", "tokens": [50947, 1485, 1702, 3637, 11, 498, 291, 528, 281, 536, 264, 18668, 294, 604, 3036, 11, 445, 1269, 309, 294, 364, 3256, 10000, 51244], "temperature": 0.0, "avg_logprob": -0.11002465656825475, "compression_ratio": 1.514018691588785, "no_speech_prob": 0.23076337575912476}, {"id": 45, "seek": 21228, "start": 229.88, "end": 235.52, "text": " program like paint, or 3D paint in this case, and zoom in.", "tokens": [51244, 1461, 411, 4225, 11, 420, 805, 35, 4225, 294, 341, 1389, 11, 293, 8863, 294, 13, 51526], "temperature": 0.0, "avg_logprob": -0.11002465656825475, "compression_ratio": 1.514018691588785, "no_speech_prob": 0.23076337575912476}, {"id": 46, "seek": 23552, "start": 235.52, "end": 242.84, "text": " And then if you want to see the red, green, and blue, or RGB values, just use the eyedropper,", "tokens": [50364, 400, 550, 498, 291, 528, 281, 536, 264, 2182, 11, 3092, 11, 293, 3344, 11, 420, 31231, 4190, 11, 445, 764, 264, 9817, 292, 340, 3717, 11, 50730], "temperature": 0.0, "avg_logprob": -0.13736768700610633, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.4606349766254425}, {"id": 47, "seek": 23552, "start": 242.84, "end": 247.44, "text": " click on a pixel, and then click on the edit color option.", "tokens": [50730, 2052, 322, 257, 19261, 11, 293, 550, 2052, 322, 264, 8129, 2017, 3614, 13, 50960], "temperature": 0.0, "avg_logprob": -0.13736768700610633, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.4606349766254425}, {"id": 48, "seek": 23552, "start": 247.44, "end": 253.64000000000001, "text": " Right here, you can see the three values for red, green, and blue, and the resulting color.", "tokens": [50960, 1779, 510, 11, 291, 393, 536, 264, 1045, 4190, 337, 2182, 11, 3092, 11, 293, 3344, 11, 293, 264, 16505, 2017, 13, 51270], "temperature": 0.0, "avg_logprob": -0.13736768700610633, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.4606349766254425}, {"id": 49, "seek": 23552, "start": 253.64000000000001, "end": 257.64, "text": " Okay, with that covered, let's get back to the episode.", "tokens": [51270, 1033, 11, 365, 300, 5343, 11, 718, 311, 483, 646, 281, 264, 3500, 13, 51470], "temperature": 0.0, "avg_logprob": -0.13736768700610633, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.4606349766254425}, {"id": 50, "seek": 25764, "start": 257.64, "end": 264.91999999999996, "text": " First, we're going to zoom out to see the full picture, which is 3,024 pixels wide,", "tokens": [50364, 2386, 11, 321, 434, 516, 281, 8863, 484, 281, 536, 264, 1577, 3036, 11, 597, 307, 805, 11, 15, 7911, 18668, 4874, 11, 50728], "temperature": 0.0, "avg_logprob": -0.13138585620456272, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.4219472110271454}, {"id": 51, "seek": 25764, "start": 264.91999999999996, "end": 274.68, "text": " and 4,032 pixels tall, which is a total of around 12 million pixels, or 12 megapixels,", "tokens": [50728, 293, 1017, 11, 15, 11440, 18668, 6764, 11, 597, 307, 257, 3217, 295, 926, 2272, 2459, 18668, 11, 420, 2272, 34733, 970, 1625, 11, 51216], "temperature": 0.0, "avg_logprob": -0.13138585620456272, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.4219472110271454}, {"id": 52, "seek": 25764, "start": 274.68, "end": 279.88, "text": " which relates to the resolution of the 12 megapixel camera on my smartphone.", "tokens": [51216, 597, 16155, 281, 264, 8669, 295, 264, 2272, 34733, 34599, 2799, 322, 452, 13307, 13, 51476], "temperature": 0.0, "avg_logprob": -0.13138585620456272, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.4219472110271454}, {"id": 53, "seek": 25764, "start": 279.88, "end": 287.21999999999997, "text": " Next, by doing some multiplication, we calculate that an array of this size where each pixel", "tokens": [51476, 3087, 11, 538, 884, 512, 27290, 11, 321, 8873, 300, 364, 10225, 295, 341, 2744, 689, 1184, 19261, 51843], "temperature": 0.0, "avg_logprob": -0.13138585620456272, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.4219472110271454}, {"id": 54, "seek": 28722, "start": 287.22, "end": 298.02000000000004, "text": " is defined by 24 bits, or 24 zeros or ones, only requires 293 million bits, or a unique", "tokens": [50364, 307, 7642, 538, 4022, 9239, 11, 420, 4022, 35193, 420, 2306, 11, 787, 7029, 9413, 18, 2459, 9239, 11, 420, 257, 3845, 50904], "temperature": 0.0, "avg_logprob": -0.17362757904888831, "compression_ratio": 1.548780487804878, "no_speech_prob": 0.010326259769499302}, {"id": 55, "seek": 28722, "start": 298.02000000000004, "end": 303.34000000000003, "text": " set of 293 million zeros or ones.", "tokens": [50904, 992, 295, 9413, 18, 2459, 35193, 420, 2306, 13, 51170], "temperature": 0.0, "avg_logprob": -0.17362757904888831, "compression_ratio": 1.548780487804878, "no_speech_prob": 0.010326259769499302}, {"id": 56, "seek": 28722, "start": 303.34000000000003, "end": 305.46000000000004, "text": " That's a ton of bits.", "tokens": [51170, 663, 311, 257, 2952, 295, 9239, 13, 51276], "temperature": 0.0, "avg_logprob": -0.17362757904888831, "compression_ratio": 1.548780487804878, "no_speech_prob": 0.010326259769499302}, {"id": 57, "seek": 28722, "start": 305.46000000000004, "end": 312.1, "text": " So let's figure out how your smartphone, or the solid state drive, seamlessly stores", "tokens": [51276, 407, 718, 311, 2573, 484, 577, 428, 13307, 11, 420, 264, 5100, 1785, 3332, 11, 38083, 9512, 51608], "temperature": 0.0, "avg_logprob": -0.17362757904888831, "compression_ratio": 1.548780487804878, "no_speech_prob": 0.010326259769499302}, {"id": 58, "seek": 28722, "start": 312.1, "end": 314.66, "text": " every single one of them.", "tokens": [51608, 633, 2167, 472, 295, 552, 13, 51736], "temperature": 0.0, "avg_logprob": -0.17362757904888831, "compression_ratio": 1.548780487804878, "no_speech_prob": 0.010326259769499302}, {"id": 59, "seek": 31466, "start": 315.38000000000005, "end": 323.02000000000004, "text": " Okay, so let's open up that solid state drive again, and zoom into a simplified nanoscopic", "tokens": [50400, 1033, 11, 370, 718, 311, 1269, 493, 300, 5100, 1785, 3332, 797, 11, 293, 8863, 666, 257, 26335, 14067, 10466, 40216, 50782], "temperature": 0.0, "avg_logprob": -0.14620600494683958, "compression_ratio": 1.6431535269709543, "no_speech_prob": 0.00031013626721687615}, {"id": 60, "seek": 31466, "start": 323.02000000000004, "end": 326.58000000000004, "text": " view, kind of like the one we had earlier.", "tokens": [50782, 1910, 11, 733, 295, 411, 264, 472, 321, 632, 3071, 13, 50960], "temperature": 0.0, "avg_logprob": -0.14620600494683958, "compression_ratio": 1.6431535269709543, "no_speech_prob": 0.00031013626721687615}, {"id": 61, "seek": 31466, "start": 326.58000000000004, "end": 330.70000000000005, "text": " It's here that we can see the memory cells that are used in every single one of your", "tokens": [50960, 467, 311, 510, 300, 321, 393, 536, 264, 4675, 5438, 300, 366, 1143, 294, 633, 2167, 472, 295, 428, 51166], "temperature": 0.0, "avg_logprob": -0.14620600494683958, "compression_ratio": 1.6431535269709543, "no_speech_prob": 0.00031013626721687615}, {"id": 62, "seek": 31466, "start": 330.70000000000005, "end": 337.46000000000004, "text": " smartphones or tablets, as well as inside the solid state drive in your computer.", "tokens": [51166, 26782, 420, 27622, 11, 382, 731, 382, 1854, 264, 5100, 1785, 3332, 294, 428, 3820, 13, 51504], "temperature": 0.0, "avg_logprob": -0.14620600494683958, "compression_ratio": 1.6431535269709543, "no_speech_prob": 0.00031013626721687615}, {"id": 63, "seek": 31466, "start": 337.46000000000004, "end": 343.46000000000004, "text": " This is the basic unit of a computer's long-term memory storage, and it's called charge-trapped", "tokens": [51504, 639, 307, 264, 3875, 4985, 295, 257, 3820, 311, 938, 12, 7039, 4675, 6725, 11, 293, 309, 311, 1219, 4602, 12, 17227, 3320, 51804], "temperature": 0.0, "avg_logprob": -0.14620600494683958, "compression_ratio": 1.6431535269709543, "no_speech_prob": 0.00031013626721687615}, {"id": 64, "seek": 34346, "start": 343.46, "end": 344.82, "text": " flash memory.", "tokens": [50364, 7319, 4675, 13, 50432], "temperature": 0.0, "avg_logprob": -0.18770160675048828, "compression_ratio": 1.6933962264150944, "no_speech_prob": 0.008710759691894054}, {"id": 65, "seek": 34346, "start": 344.82, "end": 346.97999999999996, "text": " So, how does it work?", "tokens": [50432, 407, 11, 577, 775, 309, 589, 30, 50540], "temperature": 0.0, "avg_logprob": -0.18770160675048828, "compression_ratio": 1.6933962264150944, "no_speech_prob": 0.008710759691894054}, {"id": 66, "seek": 34346, "start": 346.97999999999996, "end": 353.46, "text": " Well, in each cell, we can store information by placing different levels of electrons onto", "tokens": [50540, 1042, 11, 294, 1184, 2815, 11, 321, 393, 3531, 1589, 538, 17221, 819, 4358, 295, 14265, 3911, 50864], "temperature": 0.0, "avg_logprob": -0.18770160675048828, "compression_ratio": 1.6933962264150944, "no_speech_prob": 0.008710759691894054}, {"id": 67, "seek": 34346, "start": 353.46, "end": 358.09999999999997, "text": " a charge trap, which is the key component inside the memory cell.", "tokens": [50864, 257, 4602, 11487, 11, 597, 307, 264, 2141, 6542, 1854, 264, 4675, 2815, 13, 51096], "temperature": 0.0, "avg_logprob": -0.18770160675048828, "compression_ratio": 1.6933962264150944, "no_speech_prob": 0.008710759691894054}, {"id": 68, "seek": 34346, "start": 358.09999999999997, "end": 364.46, "text": " Older technology could only store two different levels of electrons, a lot of electrons or", "tokens": [51096, 8633, 260, 2899, 727, 787, 3531, 732, 819, 4358, 295, 14265, 11, 257, 688, 295, 14265, 420, 51414], "temperature": 0.0, "avg_logprob": -0.18770160675048828, "compression_ratio": 1.6933962264150944, "no_speech_prob": 0.008710759691894054}, {"id": 69, "seek": 34346, "start": 364.46, "end": 370.9, "text": " very few electrons, which were used to store a single bit as a one or zero.", "tokens": [51414, 588, 1326, 14265, 11, 597, 645, 1143, 281, 3531, 257, 2167, 857, 382, 257, 472, 420, 4018, 13, 51736], "temperature": 0.0, "avg_logprob": -0.18770160675048828, "compression_ratio": 1.6933962264150944, "no_speech_prob": 0.008710759691894054}, {"id": 70, "seek": 37090, "start": 370.9, "end": 376.34, "text": " However, engineers have been developing more finely tuned capabilities for trapping and", "tokens": [50364, 2908, 11, 11955, 362, 668, 6416, 544, 31529, 10870, 10862, 337, 944, 3759, 293, 50636], "temperature": 0.0, "avg_logprob": -0.10097689506335136, "compression_ratio": 1.6622222222222223, "no_speech_prob": 8.750156121095642e-05}, {"id": 71, "seek": 37090, "start": 376.34, "end": 381.78, "text": " measuring different amounts of electrons or charges onto the charge trap.", "tokens": [50636, 13389, 819, 11663, 295, 14265, 420, 12235, 3911, 264, 4602, 11487, 13, 50908], "temperature": 0.0, "avg_logprob": -0.10097689506335136, "compression_ratio": 1.6622222222222223, "no_speech_prob": 8.750156121095642e-05}, {"id": 72, "seek": 37090, "start": 381.78, "end": 388.53999999999996, "text": " Most memory cells in 2020 can hold eight different levels, but newer technology can have sixteen", "tokens": [50908, 4534, 4675, 5438, 294, 4808, 393, 1797, 3180, 819, 4358, 11, 457, 17628, 2899, 393, 362, 27847, 51246], "temperature": 0.0, "avg_logprob": -0.10097689506335136, "compression_ratio": 1.6622222222222223, "no_speech_prob": 8.750156121095642e-05}, {"id": 73, "seek": 37090, "start": 388.53999999999996, "end": 391.82, "text": " different levels of electrons.", "tokens": [51246, 819, 4358, 295, 14265, 13, 51410], "temperature": 0.0, "avg_logprob": -0.10097689506335136, "compression_ratio": 1.6622222222222223, "no_speech_prob": 8.750156121095642e-05}, {"id": 74, "seek": 37090, "start": 391.82, "end": 397.26, "text": " This means that a single cell, instead of holding only one bit as a lot of electrons", "tokens": [51410, 639, 1355, 300, 257, 2167, 2815, 11, 2602, 295, 5061, 787, 472, 857, 382, 257, 688, 295, 14265, 51682], "temperature": 0.0, "avg_logprob": -0.10097689506335136, "compression_ratio": 1.6622222222222223, "no_speech_prob": 8.750156121095642e-05}, {"id": 75, "seek": 39726, "start": 397.26, "end": 401.53999999999996, "text": " or no electrons, can now hold three or more bits.", "tokens": [50364, 420, 572, 14265, 11, 393, 586, 1797, 1045, 420, 544, 9239, 13, 50578], "temperature": 0.0, "avg_logprob": -0.1364358524943507, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00482942583039403}, {"id": 76, "seek": 39726, "start": 401.53999999999996, "end": 404.65999999999997, "text": " For this example, we're going to stick with three bits.", "tokens": [50578, 1171, 341, 1365, 11, 321, 434, 516, 281, 2897, 365, 1045, 9239, 13, 50734], "temperature": 0.0, "avg_logprob": -0.1364358524943507, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00482942583039403}, {"id": 77, "seek": 39726, "start": 404.65999999999997, "end": 412.82, "text": " So in this cell, if we were to have very few electrons on it, it would be one, one, one.", "tokens": [50734, 407, 294, 341, 2815, 11, 498, 321, 645, 281, 362, 588, 1326, 14265, 322, 309, 11, 309, 576, 312, 472, 11, 472, 11, 472, 13, 51142], "temperature": 0.0, "avg_logprob": -0.1364358524943507, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00482942583039403}, {"id": 78, "seek": 39726, "start": 412.82, "end": 420.74, "text": " While some electrons get designated as one, zero, zero, and a lot of electrons are zero,", "tokens": [51142, 3987, 512, 14265, 483, 21688, 382, 472, 11, 4018, 11, 4018, 11, 293, 257, 688, 295, 14265, 366, 4018, 11, 51538], "temperature": 0.0, "avg_logprob": -0.1364358524943507, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00482942583039403}, {"id": 79, "seek": 39726, "start": 420.74, "end": 422.5, "text": " zero, zero.", "tokens": [51538, 4018, 11, 4018, 13, 51626], "temperature": 0.0, "avg_logprob": -0.1364358524943507, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00482942583039403}, {"id": 80, "seek": 42250, "start": 422.5, "end": 427.9, "text": " There are eight different levels for all the various amounts of electron charges that our", "tokens": [50364, 821, 366, 3180, 819, 4358, 337, 439, 264, 3683, 11663, 295, 6084, 12235, 300, 527, 50634], "temperature": 0.0, "avg_logprob": -0.10417586878726356, "compression_ratio": 1.737991266375546, "no_speech_prob": 0.08506862819194794}, {"id": 81, "seek": 42250, "start": 427.9, "end": 431.14, "text": " charge trap can be set or written to.", "tokens": [50634, 4602, 11487, 393, 312, 992, 420, 3720, 281, 13, 50796], "temperature": 0.0, "avg_logprob": -0.10417586878726356, "compression_ratio": 1.737991266375546, "no_speech_prob": 0.08506862819194794}, {"id": 82, "seek": 42250, "start": 431.14, "end": 436.94, "text": " The key to the charge trap is that it is specially designed so that after it gets charged with", "tokens": [50796, 440, 2141, 281, 264, 4602, 11487, 307, 300, 309, 307, 22549, 4761, 370, 300, 934, 309, 2170, 11109, 365, 51086], "temperature": 0.0, "avg_logprob": -0.10417586878726356, "compression_ratio": 1.737991266375546, "no_speech_prob": 0.08506862819194794}, {"id": 83, "seek": 42250, "start": 436.94, "end": 443.5, "text": " electrons, it can hold onto those electrons for decades, which is how information is saved", "tokens": [51086, 14265, 11, 309, 393, 1797, 3911, 729, 14265, 337, 7878, 11, 597, 307, 577, 1589, 307, 6624, 51414], "temperature": 0.0, "avg_logprob": -0.10417586878726356, "compression_ratio": 1.737991266375546, "no_speech_prob": 0.08506862819194794}, {"id": 84, "seek": 42250, "start": 443.5, "end": 446.18, "text": " or written to the solid state drive.", "tokens": [51414, 420, 3720, 281, 264, 5100, 1785, 3332, 13, 51548], "temperature": 0.0, "avg_logprob": -0.10417586878726356, "compression_ratio": 1.737991266375546, "no_speech_prob": 0.08506862819194794}, {"id": 85, "seek": 42250, "start": 446.18, "end": 449.26, "text": " I mean, it's called a charge trap for a reason.", "tokens": [51548, 286, 914, 11, 309, 311, 1219, 257, 4602, 11487, 337, 257, 1778, 13, 51702], "temperature": 0.0, "avg_logprob": -0.10417586878726356, "compression_ratio": 1.737991266375546, "no_speech_prob": 0.08506862819194794}, {"id": 86, "seek": 44926, "start": 449.26, "end": 456.06, "text": " It traps electrons or charges for years on end, and in order to read the information,", "tokens": [50364, 467, 24173, 14265, 420, 12235, 337, 924, 322, 917, 11, 293, 294, 1668, 281, 1401, 264, 1589, 11, 50704], "temperature": 0.0, "avg_logprob": -0.14799721321363127, "compression_ratio": 1.8232323232323233, "no_speech_prob": 0.2876172661781311}, {"id": 87, "seek": 44926, "start": 456.06, "end": 461.53999999999996, "text": " the electron charge level is measured, and the amount of charge on the charge trap is", "tokens": [50704, 264, 6084, 4602, 1496, 307, 12690, 11, 293, 264, 2372, 295, 4602, 322, 264, 4602, 11487, 307, 50978], "temperature": 0.0, "avg_logprob": -0.14799721321363127, "compression_ratio": 1.8232323232323233, "no_speech_prob": 0.2876172661781311}, {"id": 88, "seek": 44926, "start": 461.53999999999996, "end": 462.53999999999996, "text": " unchanged.", "tokens": [50978, 44553, 13, 51028], "temperature": 0.0, "avg_logprob": -0.14799721321363127, "compression_ratio": 1.8232323232323233, "no_speech_prob": 0.2876172661781311}, {"id": 89, "seek": 44926, "start": 462.53999999999996, "end": 468.3, "text": " However, in order to erase the contents of a memory cell, all the electron charges are", "tokens": [51028, 2908, 11, 294, 1668, 281, 23525, 264, 15768, 295, 257, 4675, 2815, 11, 439, 264, 6084, 12235, 366, 51316], "temperature": 0.0, "avg_logprob": -0.14799721321363127, "compression_ratio": 1.8232323232323233, "no_speech_prob": 0.2876172661781311}, {"id": 90, "seek": 44926, "start": 468.3, "end": 474.74, "text": " forcibly removed from the charge trap, returning it to its lowest level, which is one, one,", "tokens": [51316, 337, 537, 25021, 7261, 490, 264, 4602, 11487, 11, 12678, 309, 281, 1080, 12437, 1496, 11, 597, 307, 472, 11, 472, 11, 51638], "temperature": 0.0, "avg_logprob": -0.14799721321363127, "compression_ratio": 1.8232323232323233, "no_speech_prob": 0.2876172661781311}, {"id": 91, "seek": 47474, "start": 474.74, "end": 479.74, "text": " one, and leaving no excess electron charges behind.", "tokens": [50364, 472, 11, 293, 5012, 572, 9310, 6084, 12235, 2261, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1435411947744864, "compression_ratio": 1.5471698113207548, "no_speech_prob": 0.05498138442635536}, {"id": 92, "seek": 47474, "start": 479.74, "end": 485.14, "text": " Let's move on and explore how these memory cells are organized so that we can store more", "tokens": [50614, 961, 311, 1286, 322, 293, 6839, 577, 613, 4675, 5438, 366, 9983, 370, 300, 321, 393, 3531, 544, 50884], "temperature": 0.0, "avg_logprob": -0.1435411947744864, "compression_ratio": 1.5471698113207548, "no_speech_prob": 0.05498138442635536}, {"id": 93, "seek": 47474, "start": 485.14, "end": 487.82, "text": " than three bits of information.", "tokens": [50884, 813, 1045, 9239, 295, 1589, 13, 51018], "temperature": 0.0, "avg_logprob": -0.1435411947744864, "compression_ratio": 1.5471698113207548, "no_speech_prob": 0.05498138442635536}, {"id": 94, "seek": 47474, "start": 487.82, "end": 492.82, "text": " After we zoom out a little, you can see that the memory cells are stacked vertically.", "tokens": [51018, 2381, 321, 8863, 484, 257, 707, 11, 291, 393, 536, 300, 264, 4675, 5438, 366, 28867, 28450, 13, 51268], "temperature": 0.0, "avg_logprob": -0.1435411947744864, "compression_ratio": 1.5471698113207548, "no_speech_prob": 0.05498138442635536}, {"id": 95, "seek": 47474, "start": 492.82, "end": 498.26, "text": " This is where the vertical part in vertical NAND or VNAND comes from.", "tokens": [51268, 639, 307, 689, 264, 9429, 644, 294, 9429, 426, 8070, 420, 691, 45, 8070, 1487, 490, 13, 51540], "temperature": 0.0, "avg_logprob": -0.1435411947744864, "compression_ratio": 1.5471698113207548, "no_speech_prob": 0.05498138442635536}, {"id": 96, "seek": 49826, "start": 498.26, "end": 504.65999999999997, "text": " This stack of memory cells, which is technically called a string, is composed of ten charge", "tokens": [50364, 639, 8630, 295, 4675, 5438, 11, 597, 307, 12120, 1219, 257, 6798, 11, 307, 18204, 295, 2064, 4602, 50684], "temperature": 0.0, "avg_logprob": -0.11226984002124304, "compression_ratio": 1.5746606334841629, "no_speech_prob": 0.6110613346099854}, {"id": 97, "seek": 49826, "start": 504.65999999999997, "end": 508.3, "text": " trap flash cells layered one on top of another.", "tokens": [50684, 11487, 7319, 5438, 34666, 472, 322, 1192, 295, 1071, 13, 50866], "temperature": 0.0, "avg_logprob": -0.11226984002124304, "compression_ratio": 1.5746606334841629, "no_speech_prob": 0.6110613346099854}, {"id": 98, "seek": 49826, "start": 508.3, "end": 514.34, "text": " When information is written to or read from a string, only one cell can be activated at", "tokens": [50866, 1133, 1589, 307, 3720, 281, 420, 1401, 490, 257, 6798, 11, 787, 472, 2815, 393, 312, 18157, 412, 51168], "temperature": 0.0, "avg_logprob": -0.11226984002124304, "compression_ratio": 1.5746606334841629, "no_speech_prob": 0.6110613346099854}, {"id": 99, "seek": 49826, "start": 514.34, "end": 520.9399999999999, "text": " any given time, and to do that, we use separate control gates attached to every layer in the", "tokens": [51168, 604, 2212, 565, 11, 293, 281, 360, 300, 11, 321, 764, 4994, 1969, 19792, 8570, 281, 633, 4583, 294, 264, 51498], "temperature": 0.0, "avg_logprob": -0.11226984002124304, "compression_ratio": 1.5746606334841629, "no_speech_prob": 0.6110613346099854}, {"id": 100, "seek": 49826, "start": 520.9399999999999, "end": 521.9399999999999, "text": " string.", "tokens": [51498, 6798, 13, 51548], "temperature": 0.0, "avg_logprob": -0.11226984002124304, "compression_ratio": 1.5746606334841629, "no_speech_prob": 0.6110613346099854}, {"id": 101, "seek": 49826, "start": 521.9399999999999, "end": 523.14, "text": " It works like this.", "tokens": [51548, 467, 1985, 411, 341, 13, 51608], "temperature": 0.0, "avg_logprob": -0.11226984002124304, "compression_ratio": 1.5746606334841629, "no_speech_prob": 0.6110613346099854}, {"id": 102, "seek": 52314, "start": 523.14, "end": 529.58, "text": " The bottom control gate first says, hey you, charge trap one, what's your electron charge", "tokens": [50364, 440, 2767, 1969, 8539, 700, 1619, 11, 4177, 291, 11, 4602, 11487, 472, 11, 437, 311, 428, 6084, 4602, 50686], "temperature": 0.0, "avg_logprob": -0.14161884083467371, "compression_ratio": 1.9166666666666667, "no_speech_prob": 0.04336022958159447}, {"id": 103, "seek": 52314, "start": 529.58, "end": 530.9399999999999, "text": " level at?", "tokens": [50686, 1496, 412, 30, 50754], "temperature": 0.0, "avg_logprob": -0.14161884083467371, "compression_ratio": 1.9166666666666667, "no_speech_prob": 0.04336022958159447}, {"id": 104, "seek": 52314, "start": 530.9399999999999, "end": 535.78, "text": " Then the bottom cell sends that information through the center of the string up to the", "tokens": [50754, 1396, 264, 2767, 2815, 14790, 300, 1589, 807, 264, 3056, 295, 264, 6798, 493, 281, 264, 50996], "temperature": 0.0, "avg_logprob": -0.14161884083467371, "compression_ratio": 1.9166666666666667, "no_speech_prob": 0.04336022958159447}, {"id": 105, "seek": 52314, "start": 535.78, "end": 540.68, "text": " information highway at the top, which is technically called a bit line.", "tokens": [50996, 1589, 17205, 412, 264, 1192, 11, 597, 307, 12120, 1219, 257, 857, 1622, 13, 51241], "temperature": 0.0, "avg_logprob": -0.14161884083467371, "compression_ratio": 1.9166666666666667, "no_speech_prob": 0.04336022958159447}, {"id": 106, "seek": 52314, "start": 540.68, "end": 545.42, "text": " Then the next control gate for the second layer asks for the charge level in the second", "tokens": [51241, 1396, 264, 958, 1969, 8539, 337, 264, 1150, 4583, 8962, 337, 264, 4602, 1496, 294, 264, 1150, 51478], "temperature": 0.0, "avg_logprob": -0.14161884083467371, "compression_ratio": 1.9166666666666667, "no_speech_prob": 0.04336022958159447}, {"id": 107, "seek": 52314, "start": 545.42, "end": 552.3, "text": " cell and so on up the string, each cell sending their information up to the highway or bit", "tokens": [51478, 2815, 293, 370, 322, 493, 264, 6798, 11, 1184, 2815, 7750, 641, 1589, 493, 281, 264, 17205, 420, 857, 51822], "temperature": 0.0, "avg_logprob": -0.14161884083467371, "compression_ratio": 1.9166666666666667, "no_speech_prob": 0.04336022958159447}, {"id": 108, "seek": 55230, "start": 552.3, "end": 553.3, "text": " line.", "tokens": [50364, 1622, 13, 50414], "temperature": 0.0, "avg_logprob": -0.12917505396474707, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.027579786255955696}, {"id": 109, "seek": 55230, "start": 553.3, "end": 558.42, "text": " The same kind of sequence happens when charges are being added to a charge trap, which is", "tokens": [50414, 440, 912, 733, 295, 8310, 2314, 562, 12235, 366, 885, 3869, 281, 257, 4602, 11487, 11, 597, 307, 50670], "temperature": 0.0, "avg_logprob": -0.12917505396474707, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.027579786255955696}, {"id": 110, "seek": 55230, "start": 558.42, "end": 561.26, "text": " how information is written to a memory cell.", "tokens": [50670, 577, 1589, 307, 3720, 281, 257, 4675, 2815, 13, 50812], "temperature": 0.0, "avg_logprob": -0.12917505396474707, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.027579786255955696}, {"id": 111, "seek": 55230, "start": 561.26, "end": 566.9799999999999, "text": " The main thing is that only one layer in the string is either written to or read from at", "tokens": [50812, 440, 2135, 551, 307, 300, 787, 472, 4583, 294, 264, 6798, 307, 2139, 3720, 281, 420, 1401, 490, 412, 51098], "temperature": 0.0, "avg_logprob": -0.12917505396474707, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.027579786255955696}, {"id": 112, "seek": 55230, "start": 566.9799999999999, "end": 568.78, "text": " any given time.", "tokens": [51098, 604, 2212, 565, 13, 51188], "temperature": 0.0, "avg_logprob": -0.12917505396474707, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.027579786255955696}, {"id": 113, "seek": 55230, "start": 568.78, "end": 570.8599999999999, "text": " Let's move on in complexity.", "tokens": [51188, 961, 311, 1286, 322, 294, 14024, 13, 51292], "temperature": 0.0, "avg_logprob": -0.12917505396474707, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.027579786255955696}, {"id": 114, "seek": 55230, "start": 570.8599999999999, "end": 578.5799999999999, "text": " Next, we duplicate this string 32 times, and this gets us a page of strings.", "tokens": [51292, 3087, 11, 321, 23976, 341, 6798, 8858, 1413, 11, 293, 341, 2170, 505, 257, 3028, 295, 13985, 13, 51678], "temperature": 0.0, "avg_logprob": -0.12917505396474707, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.027579786255955696}, {"id": 115, "seek": 55230, "start": 578.5799999999999, "end": 580.8199999999999, "text": " Let's review some terminology.", "tokens": [51678, 961, 311, 3131, 512, 27575, 13, 51790], "temperature": 0.0, "avg_logprob": -0.12917505396474707, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.027579786255955696}, {"id": 116, "seek": 58082, "start": 580.82, "end": 584.7, "text": " This is a memory cell, and this is a string.", "tokens": [50364, 639, 307, 257, 4675, 2815, 11, 293, 341, 307, 257, 6798, 13, 50558], "temperature": 0.0, "avg_logprob": -0.11827556566260326, "compression_ratio": 1.7553191489361701, "no_speech_prob": 0.0012447976041585207}, {"id": 117, "seek": 58082, "start": 584.7, "end": 591.74, "text": " And now here we have a page, and we're going to call this entire page of strings a row.", "tokens": [50558, 400, 586, 510, 321, 362, 257, 3028, 11, 293, 321, 434, 516, 281, 818, 341, 2302, 3028, 295, 13985, 257, 5386, 13, 50910], "temperature": 0.0, "avg_logprob": -0.11827556566260326, "compression_ratio": 1.7553191489361701, "no_speech_prob": 0.0012447976041585207}, {"id": 118, "seek": 58082, "start": 591.74, "end": 597.58, "text": " When we duplicate the string, we also duplicate the bit line 32 times.", "tokens": [50910, 1133, 321, 23976, 264, 6798, 11, 321, 611, 23976, 264, 857, 1622, 8858, 1413, 13, 51202], "temperature": 0.0, "avg_logprob": -0.11827556566260326, "compression_ratio": 1.7553191489361701, "no_speech_prob": 0.0012447976041585207}, {"id": 119, "seek": 58082, "start": 597.58, "end": 603.58, "text": " However, rather than duplicate the control gates, we're going to have every cell in", "tokens": [51202, 2908, 11, 2831, 813, 23976, 264, 1969, 19792, 11, 321, 434, 516, 281, 362, 633, 2815, 294, 51502], "temperature": 0.0, "avg_logprob": -0.11827556566260326, "compression_ratio": 1.7553191489361701, "no_speech_prob": 0.0012447976041585207}, {"id": 120, "seek": 58082, "start": 603.58, "end": 606.9000000000001, "text": " the same page share a common control gate.", "tokens": [51502, 264, 912, 3028, 2073, 257, 2689, 1969, 8539, 13, 51668], "temperature": 0.0, "avg_logprob": -0.11827556566260326, "compression_ratio": 1.7553191489361701, "no_speech_prob": 0.0012447976041585207}, {"id": 121, "seek": 60690, "start": 606.9, "end": 613.5799999999999, "text": " This makes it so that when information is written to or read from a row, an entire page", "tokens": [50364, 639, 1669, 309, 370, 300, 562, 1589, 307, 3720, 281, 420, 1401, 490, 257, 5386, 11, 364, 2302, 3028, 50698], "temperature": 0.0, "avg_logprob": -0.15389508550817316, "compression_ratio": 1.481818181818182, "no_speech_prob": 0.0006563581409864128}, {"id": 122, "seek": 60690, "start": 613.5799999999999, "end": 621.18, "text": " composed of 32 adjacent cells, all in the same layer, are activated at the same time.", "tokens": [50698, 18204, 295, 8858, 24441, 5438, 11, 439, 294, 264, 912, 4583, 11, 366, 18157, 412, 264, 912, 565, 13, 51078], "temperature": 0.0, "avg_logprob": -0.15389508550817316, "compression_ratio": 1.481818181818182, "no_speech_prob": 0.0006563581409864128}, {"id": 123, "seek": 60690, "start": 621.18, "end": 623.98, "text": " Let's step up in complexity again.", "tokens": [51078, 961, 311, 1823, 493, 294, 14024, 797, 13, 51218], "temperature": 0.0, "avg_logprob": -0.15389508550817316, "compression_ratio": 1.481818181818182, "no_speech_prob": 0.0006563581409864128}, {"id": 124, "seek": 60690, "start": 623.98, "end": 630.86, "text": " Next, we duplicate these rows 6 times until we get a block, but we're going to do it", "tokens": [51218, 3087, 11, 321, 23976, 613, 13241, 1386, 1413, 1826, 321, 483, 257, 3461, 11, 457, 321, 434, 516, 281, 360, 309, 51562], "temperature": 0.0, "avg_logprob": -0.15389508550817316, "compression_ratio": 1.481818181818182, "no_speech_prob": 0.0006563581409864128}, {"id": 125, "seek": 60690, "start": 630.86, "end": 633.8199999999999, "text": " 12 times so we can see 2 blocks.", "tokens": [51562, 2272, 1413, 370, 321, 393, 536, 568, 8474, 13, 51710], "temperature": 0.0, "avg_logprob": -0.15389508550817316, "compression_ratio": 1.481818181818182, "no_speech_prob": 0.0006563581409864128}, {"id": 126, "seek": 63382, "start": 633.82, "end": 640.6600000000001, "text": " Okay, so again, here we have a column, here is a row, and this is a layer.", "tokens": [50364, 1033, 11, 370, 797, 11, 510, 321, 362, 257, 7738, 11, 510, 307, 257, 5386, 11, 293, 341, 307, 257, 4583, 13, 50706], "temperature": 0.0, "avg_logprob": -0.1326652024921618, "compression_ratio": 1.6770833333333333, "no_speech_prob": 0.00023050009622238576}, {"id": 127, "seek": 63382, "start": 640.6600000000001, "end": 644.98, "text": " And now here's a cell, and here's a string.", "tokens": [50706, 400, 586, 510, 311, 257, 2815, 11, 293, 510, 311, 257, 6798, 13, 50922], "temperature": 0.0, "avg_logprob": -0.1326652024921618, "compression_ratio": 1.6770833333333333, "no_speech_prob": 0.00023050009622238576}, {"id": 128, "seek": 63382, "start": 644.98, "end": 648.86, "text": " Next we have a page, and finally we have a block.", "tokens": [50922, 3087, 321, 362, 257, 3028, 11, 293, 2721, 321, 362, 257, 3461, 13, 51116], "temperature": 0.0, "avg_logprob": -0.1326652024921618, "compression_ratio": 1.6770833333333333, "no_speech_prob": 0.00023050009622238576}, {"id": 129, "seek": 63382, "start": 648.86, "end": 654.1, "text": " We're going to connect the tops of each string in a column together, so they all share the", "tokens": [51116, 492, 434, 516, 281, 1745, 264, 22836, 295, 1184, 6798, 294, 257, 7738, 1214, 11, 370, 436, 439, 2073, 264, 51378], "temperature": 0.0, "avg_logprob": -0.1326652024921618, "compression_ratio": 1.6770833333333333, "no_speech_prob": 0.00023050009622238576}, {"id": 130, "seek": 63382, "start": 654.1, "end": 659.1400000000001, "text": " same bit line, and our bit line is looking like a highway now.", "tokens": [51378, 912, 857, 1622, 11, 293, 527, 857, 1622, 307, 1237, 411, 257, 17205, 586, 13, 51630], "temperature": 0.0, "avg_logprob": -0.1326652024921618, "compression_ratio": 1.6770833333333333, "no_speech_prob": 0.00023050009622238576}, {"id": 131, "seek": 65914, "start": 659.14, "end": 664.86, "text": " In addition, we have to add a control gate that selects between rows so that only one", "tokens": [50364, 682, 4500, 11, 321, 362, 281, 909, 257, 1969, 8539, 300, 3048, 82, 1296, 13241, 370, 300, 787, 472, 50650], "temperature": 0.0, "avg_logprob": -0.10036679108937581, "compression_ratio": 1.7428571428571429, "no_speech_prob": 0.2971905767917633}, {"id": 132, "seek": 65914, "start": 664.86, "end": 667.9, "text": " row is using the bit line at a time.", "tokens": [50650, 5386, 307, 1228, 264, 857, 1622, 412, 257, 565, 13, 50802], "temperature": 0.0, "avg_logprob": -0.10036679108937581, "compression_ratio": 1.7428571428571429, "no_speech_prob": 0.2971905767917633}, {"id": 133, "seek": 65914, "start": 667.9, "end": 670.66, "text": " These are called bit line selectors.", "tokens": [50802, 1981, 366, 1219, 857, 1622, 3048, 830, 13, 50940], "temperature": 0.0, "avg_logprob": -0.10036679108937581, "compression_ratio": 1.7428571428571429, "no_speech_prob": 0.2971905767917633}, {"id": 134, "seek": 65914, "start": 670.66, "end": 676.9399999999999, "text": " As discussed, these bit lines are like highways, and the selectors at the top act as traffic", "tokens": [50940, 1018, 7152, 11, 613, 857, 3876, 366, 411, 43747, 11, 293, 264, 3048, 830, 412, 264, 1192, 605, 382, 6419, 51254], "temperature": 0.0, "avg_logprob": -0.10036679108937581, "compression_ratio": 1.7428571428571429, "no_speech_prob": 0.2971905767917633}, {"id": 135, "seek": 65914, "start": 676.9399999999999, "end": 682.86, "text": " lights that mediate the flow of information so that only a single row can use the highway", "tokens": [51254, 5811, 300, 1205, 13024, 264, 3095, 295, 1589, 370, 300, 787, 257, 2167, 5386, 393, 764, 264, 17205, 51550], "temperature": 0.0, "avg_logprob": -0.10036679108937581, "compression_ratio": 1.7428571428571429, "no_speech_prob": 0.2971905767917633}, {"id": 136, "seek": 65914, "start": 682.86, "end": 685.1, "text": " or is active at a time.", "tokens": [51550, 420, 307, 4967, 412, 257, 565, 13, 51662], "temperature": 0.0, "avg_logprob": -0.10036679108937581, "compression_ratio": 1.7428571428571429, "no_speech_prob": 0.2971905767917633}, {"id": 137, "seek": 68510, "start": 685.1, "end": 691.58, "text": " Similarly, the control gates attached to each layer act as traffic lights for the layers.", "tokens": [50364, 13157, 11, 264, 1969, 19792, 8570, 281, 1184, 4583, 605, 382, 6419, 5811, 337, 264, 7914, 13, 50688], "temperature": 0.0, "avg_logprob": -0.09431292589973, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.0021825148724019527}, {"id": 138, "seek": 68510, "start": 691.58, "end": 696.62, "text": " With bit line selectors along the tops of each row and control gate selectors along", "tokens": [50688, 2022, 857, 1622, 3048, 830, 2051, 264, 22836, 295, 1184, 5386, 293, 1969, 8539, 3048, 830, 2051, 50940], "temperature": 0.0, "avg_logprob": -0.09431292589973, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.0021825148724019527}, {"id": 139, "seek": 68510, "start": 696.62, "end": 703.1, "text": " each layer, the solid state drive can read from or write to a single page at any given", "tokens": [50940, 1184, 4583, 11, 264, 5100, 1785, 3332, 393, 1401, 490, 420, 2464, 281, 257, 2167, 3028, 412, 604, 2212, 51264], "temperature": 0.0, "avg_logprob": -0.09431292589973, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.0021825148724019527}, {"id": 140, "seek": 68510, "start": 703.1, "end": 704.1, "text": " time.", "tokens": [51264, 565, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09431292589973, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.0021825148724019527}, {"id": 141, "seek": 68510, "start": 704.1, "end": 709.5400000000001, "text": " Additionally, in order to connect to the bit line selectors and control gate selectors,", "tokens": [51314, 19927, 11, 294, 1668, 281, 1745, 281, 264, 857, 1622, 3048, 830, 293, 1969, 8539, 3048, 830, 11, 51586], "temperature": 0.0, "avg_logprob": -0.09431292589973, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.0021825148724019527}, {"id": 142, "seek": 70954, "start": 709.54, "end": 715.78, "text": " there are wires that drop down from above and run perpendicular to the bit lines.", "tokens": [50364, 456, 366, 15537, 300, 3270, 760, 490, 3673, 293, 1190, 26734, 281, 264, 857, 3876, 13, 50676], "temperature": 0.0, "avg_logprob": -0.16558927581423805, "compression_ratio": 1.5890410958904109, "no_speech_prob": 0.06852243840694427}, {"id": 143, "seek": 70954, "start": 715.78, "end": 718.3, "text": " So let's quickly recap.", "tokens": [50676, 407, 718, 311, 2661, 20928, 13, 50802], "temperature": 0.0, "avg_logprob": -0.16558927581423805, "compression_ratio": 1.5890410958904109, "no_speech_prob": 0.06852243840694427}, {"id": 144, "seek": 70954, "start": 718.3, "end": 723.5799999999999, "text": " Eight different levels of electrons are placed on charge traps in order to store three bits", "tokens": [50802, 17708, 819, 4358, 295, 14265, 366, 7074, 322, 4602, 24173, 294, 1668, 281, 3531, 1045, 9239, 51066], "temperature": 0.0, "avg_logprob": -0.16558927581423805, "compression_ratio": 1.5890410958904109, "no_speech_prob": 0.06852243840694427}, {"id": 145, "seek": 70954, "start": 723.5799999999999, "end": 725.0999999999999, "text": " of information.", "tokens": [51066, 295, 1589, 13, 51142], "temperature": 0.0, "avg_logprob": -0.16558927581423805, "compression_ratio": 1.5890410958904109, "no_speech_prob": 0.06852243840694427}, {"id": 146, "seek": 70954, "start": 725.0999999999999, "end": 732.6999999999999, "text": " These charge trap flash memory cells are stacked into strings, ten cells tall, which are duplicated", "tokens": [51142, 1981, 4602, 11487, 7319, 4675, 5438, 366, 28867, 666, 13985, 11, 2064, 5438, 6764, 11, 597, 366, 1581, 564, 3587, 51522], "temperature": 0.0, "avg_logprob": -0.16558927581423805, "compression_ratio": 1.5890410958904109, "no_speech_prob": 0.06852243840694427}, {"id": 147, "seek": 70954, "start": 732.6999999999999, "end": 736.14, "text": " into pages of 32 strings in a row.", "tokens": [51522, 666, 7183, 295, 8858, 13985, 294, 257, 5386, 13, 51694], "temperature": 0.0, "avg_logprob": -0.16558927581423805, "compression_ratio": 1.5890410958904109, "no_speech_prob": 0.06852243840694427}, {"id": 148, "seek": 73614, "start": 736.14, "end": 742.98, "text": " Next, those pages of strings are duplicated until we have a block six rows deep.", "tokens": [50364, 3087, 11, 729, 7183, 295, 13985, 366, 1581, 564, 3587, 1826, 321, 362, 257, 3461, 2309, 13241, 2452, 13, 50706], "temperature": 0.0, "avg_logprob": -0.13409172102462413, "compression_ratio": 1.4861111111111112, "no_speech_prob": 0.06275833398103714}, {"id": 149, "seek": 73614, "start": 742.98, "end": 745.8199999999999, "text": " And here we're showing two blocks.", "tokens": [50706, 400, 510, 321, 434, 4099, 732, 8474, 13, 50848], "temperature": 0.0, "avg_logprob": -0.13409172102462413, "compression_ratio": 1.4861111111111112, "no_speech_prob": 0.06275833398103714}, {"id": 150, "seek": 73614, "start": 745.8199999999999, "end": 753.42, "text": " Doing some quick multiplication, we find that there are 3,840 memory cells here capable", "tokens": [50848, 18496, 512, 1702, 27290, 11, 321, 915, 300, 456, 366, 805, 11, 23, 5254, 4675, 5438, 510, 8189, 51228], "temperature": 0.0, "avg_logprob": -0.13409172102462413, "compression_ratio": 1.4861111111111112, "no_speech_prob": 0.06275833398103714}, {"id": 151, "seek": 73614, "start": 753.42, "end": 758.62, "text": " of storing a total of 11,520 bits.", "tokens": [51228, 295, 26085, 257, 3217, 295, 2975, 11, 20, 2009, 9239, 13, 51488], "temperature": 0.0, "avg_logprob": -0.13409172102462413, "compression_ratio": 1.4861111111111112, "no_speech_prob": 0.06275833398103714}, {"id": 152, "seek": 73614, "start": 758.62, "end": 765.58, "text": " With each pixel in our picture requiring 24 bits, that means that we can store 480", "tokens": [51488, 2022, 1184, 19261, 294, 527, 3036, 24165, 4022, 9239, 11, 300, 1355, 300, 321, 393, 3531, 1017, 4702, 51836], "temperature": 0.0, "avg_logprob": -0.13409172102462413, "compression_ratio": 1.4861111111111112, "no_speech_prob": 0.06275833398103714}, {"id": 153, "seek": 76558, "start": 766.34, "end": 769.46, "text": " pixels, or this much of our overall picture.", "tokens": [50402, 18668, 11, 420, 341, 709, 295, 527, 4787, 3036, 13, 50558], "temperature": 0.0, "avg_logprob": -0.13123294428775184, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.05337125062942505}, {"id": 154, "seek": 76558, "start": 769.46, "end": 776.38, "text": " That means you need about 25,000 times the size of this layout to store the contents", "tokens": [50558, 663, 1355, 291, 643, 466, 3552, 11, 1360, 1413, 264, 2744, 295, 341, 13333, 281, 3531, 264, 15768, 50904], "temperature": 0.0, "avg_logprob": -0.13123294428775184, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.05337125062942505}, {"id": 155, "seek": 76558, "start": 776.38, "end": 778.5400000000001, "text": " of this single picture.", "tokens": [50904, 295, 341, 2167, 3036, 13, 51012], "temperature": 0.0, "avg_logprob": -0.13123294428775184, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.05337125062942505}, {"id": 156, "seek": 76558, "start": 778.5400000000001, "end": 782.6600000000001, "text": " And here's where we learn about the actual size of a memory chip.", "tokens": [51012, 400, 510, 311, 689, 321, 1466, 466, 264, 3539, 2744, 295, 257, 4675, 11409, 13, 51218], "temperature": 0.0, "avg_logprob": -0.13123294428775184, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.05337125062942505}, {"id": 157, "seek": 76558, "start": 782.6600000000001, "end": 787.5400000000001, "text": " All the principles we've discussed remain the same, so keep those in mind.", "tokens": [51218, 1057, 264, 9156, 321, 600, 7152, 6222, 264, 912, 11, 370, 1066, 729, 294, 1575, 13, 51462], "temperature": 0.0, "avg_logprob": -0.13123294428775184, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.05337125062942505}, {"id": 158, "seek": 76558, "start": 787.5400000000001, "end": 793.0600000000001, "text": " It's just that the size is much more extensive than we discussed in our example.", "tokens": [51462, 467, 311, 445, 300, 264, 2744, 307, 709, 544, 13246, 813, 321, 7152, 294, 527, 1365, 13, 51738], "temperature": 0.0, "avg_logprob": -0.13123294428775184, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.05337125062942505}, {"id": 159, "seek": 79306, "start": 793.06, "end": 798.5, "text": " It's hard to pin down exact numbers because manufacturers are continually improving their", "tokens": [50364, 467, 311, 1152, 281, 5447, 760, 1900, 3547, 570, 18455, 366, 22277, 11470, 641, 50636], "temperature": 0.0, "avg_logprob": -0.138680769049603, "compression_ratio": 1.541501976284585, "no_speech_prob": 0.025950534269213676}, {"id": 160, "seek": 79306, "start": 798.5, "end": 804.0999999999999, "text": " designs and they're very secretive regarding what their designs look like.", "tokens": [50636, 11347, 293, 436, 434, 588, 4054, 488, 8595, 437, 641, 11347, 574, 411, 13, 50916], "temperature": 0.0, "avg_logprob": -0.138680769049603, "compression_ratio": 1.541501976284585, "no_speech_prob": 0.025950534269213676}, {"id": 161, "seek": 79306, "start": 804.0999999999999, "end": 805.9399999999999, "text": " But I'll tell you what I know.", "tokens": [50916, 583, 286, 603, 980, 291, 437, 286, 458, 13, 51008], "temperature": 0.0, "avg_logprob": -0.138680769049603, "compression_ratio": 1.541501976284585, "no_speech_prob": 0.025950534269213676}, {"id": 162, "seek": 79306, "start": 805.9399999999999, "end": 812.6199999999999, "text": " The latest designs utilize not ten layers as in the example, but rather somewhere around", "tokens": [51008, 440, 6792, 11347, 16117, 406, 2064, 7914, 382, 294, 264, 1365, 11, 457, 2831, 4079, 926, 51342], "temperature": 0.0, "avg_logprob": -0.138680769049603, "compression_ratio": 1.541501976284585, "no_speech_prob": 0.025950534269213676}, {"id": 163, "seek": 79306, "start": 812.6199999999999, "end": 817.2199999999999, "text": " 96 to 136 layers tall.", "tokens": [51342, 24124, 281, 3705, 21, 7914, 6764, 13, 51572], "temperature": 0.0, "avg_logprob": -0.138680769049603, "compression_ratio": 1.541501976284585, "no_speech_prob": 0.025950534269213676}, {"id": 164, "seek": 79306, "start": 817.2199999999999, "end": 821.6199999999999, "text": " Here's a single sheet of paper so you can get a sense of the approximate height of", "tokens": [51572, 1692, 311, 257, 2167, 8193, 295, 3035, 370, 291, 393, 483, 257, 2020, 295, 264, 30874, 6681, 295, 51792], "temperature": 0.0, "avg_logprob": -0.138680769049603, "compression_ratio": 1.541501976284585, "no_speech_prob": 0.025950534269213676}, {"id": 165, "seek": 82162, "start": 821.62, "end": 824.1, "text": " these stacks of memory cells.", "tokens": [50364, 613, 30792, 295, 4675, 5438, 13, 50488], "temperature": 0.0, "avg_logprob": -0.12984262959340984, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.16006305813789368}, {"id": 166, "seek": 82162, "start": 824.1, "end": 828.3, "text": " Now that we understand the height, let's think about the width.", "tokens": [50488, 823, 300, 321, 1223, 264, 6681, 11, 718, 311, 519, 466, 264, 11402, 13, 50698], "temperature": 0.0, "avg_logprob": -0.12984262959340984, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.16006305813789368}, {"id": 167, "seek": 82162, "start": 828.3, "end": 834.5, "text": " A page is around 30,000 to 60,000 adjacent memory cells wide.", "tokens": [50698, 316, 3028, 307, 926, 2217, 11, 1360, 281, 4060, 11, 1360, 24441, 4675, 5438, 4874, 13, 51008], "temperature": 0.0, "avg_logprob": -0.12984262959340984, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.16006305813789368}, {"id": 168, "seek": 82162, "start": 834.5, "end": 840.82, "text": " That means there are 30,000 to 60,000 bitlines in our information superhighway.", "tokens": [51008, 663, 1355, 456, 366, 2217, 11, 1360, 281, 4060, 11, 1360, 857, 11045, 294, 527, 1589, 1687, 21454, 676, 13, 51324], "temperature": 0.0, "avg_logprob": -0.12984262959340984, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.16006305813789368}, {"id": 169, "seek": 82162, "start": 840.82, "end": 847.38, "text": " Blocks are every 4 to 8 rows and there are around 4,000 to 6,000 blocks.", "tokens": [51324, 9865, 2761, 366, 633, 1017, 281, 1649, 13241, 293, 456, 366, 926, 1017, 11, 1360, 281, 1386, 11, 1360, 8474, 13, 51652], "temperature": 0.0, "avg_logprob": -0.12984262959340984, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.16006305813789368}, {"id": 170, "seek": 84738, "start": 847.38, "end": 853.58, "text": " Along the edges are the control gate selectors and the bitline selectors on the other side.", "tokens": [50364, 17457, 264, 8819, 366, 264, 1969, 8539, 3048, 830, 293, 264, 857, 1889, 3048, 830, 322, 264, 661, 1252, 13, 50674], "temperature": 0.0, "avg_logprob": -0.10778799653053284, "compression_ratio": 1.6116071428571428, "no_speech_prob": 0.06654693931341171}, {"id": 171, "seek": 84738, "start": 853.58, "end": 857.74, "text": " Together they comprise what is called a row decoder.", "tokens": [50674, 15911, 436, 16802, 908, 437, 307, 1219, 257, 5386, 979, 19866, 13, 50882], "temperature": 0.0, "avg_logprob": -0.10778799653053284, "compression_ratio": 1.6116071428571428, "no_speech_prob": 0.06654693931341171}, {"id": 172, "seek": 84738, "start": 857.74, "end": 864.14, "text": " And by using both sets of selectors as traffic lights, we're able to access a single page.", "tokens": [50882, 400, 538, 1228, 1293, 6352, 295, 3048, 830, 382, 6419, 5811, 11, 321, 434, 1075, 281, 2105, 257, 2167, 3028, 13, 51202], "temperature": 0.0, "avg_logprob": -0.10778799653053284, "compression_ratio": 1.6116071428571428, "no_speech_prob": 0.06654693931341171}, {"id": 173, "seek": 84738, "start": 864.14, "end": 872.46, "text": " To repeat this, only one page, 45,000 or so cells wide, ever uses the bitline to read", "tokens": [51202, 1407, 7149, 341, 11, 787, 472, 3028, 11, 6905, 11, 1360, 420, 370, 5438, 4874, 11, 1562, 4960, 264, 857, 1889, 281, 1401, 51618], "temperature": 0.0, "avg_logprob": -0.10778799653053284, "compression_ratio": 1.6116071428571428, "no_speech_prob": 0.06654693931341171}, {"id": 174, "seek": 84738, "start": 872.46, "end": 876.18, "text": " or write information at any given time.", "tokens": [51618, 420, 2464, 1589, 412, 604, 2212, 565, 13, 51804], "temperature": 0.0, "avg_logprob": -0.10778799653053284, "compression_ratio": 1.6116071428571428, "no_speech_prob": 0.06654693931341171}, {"id": 175, "seek": 87618, "start": 876.18, "end": 882.02, "text": " All tens of thousands of bitlines feed down here to the page buffer where the information", "tokens": [50364, 1057, 10688, 295, 5383, 295, 857, 11045, 3154, 760, 510, 281, 264, 3028, 21762, 689, 264, 1589, 50656], "temperature": 0.0, "avg_logprob": -0.09139997880537432, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.009706567041575909}, {"id": 176, "seek": 87618, "start": 882.02, "end": 885.9399999999999, "text": " of a single page is read to or written from.", "tokens": [50656, 295, 257, 2167, 3028, 307, 1401, 281, 420, 3720, 490, 13, 50852], "temperature": 0.0, "avg_logprob": -0.09139997880537432, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.009706567041575909}, {"id": 177, "seek": 87618, "start": 885.9399999999999, "end": 890.7399999999999, "text": " Let's transition to see what an overall chip might look like.", "tokens": [50852, 961, 311, 6034, 281, 536, 437, 364, 4787, 11409, 1062, 574, 411, 13, 51092], "temperature": 0.0, "avg_logprob": -0.09139997880537432, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.009706567041575909}, {"id": 178, "seek": 87618, "start": 890.7399999999999, "end": 896.9, "text": " Here we have the arrays of 3D memory cells, the row decoder and the page buffer at the", "tokens": [51092, 1692, 321, 362, 264, 41011, 295, 805, 35, 4675, 5438, 11, 264, 5386, 979, 19866, 293, 264, 3028, 21762, 412, 264, 51400], "temperature": 0.0, "avg_logprob": -0.09139997880537432, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.009706567041575909}, {"id": 179, "seek": 87618, "start": 896.9, "end": 897.9, "text": " bottom.", "tokens": [51400, 2767, 13, 51450], "temperature": 0.0, "avg_logprob": -0.09139997880537432, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.009706567041575909}, {"id": 180, "seek": 87618, "start": 897.9, "end": 902.8599999999999, "text": " Additional peripheral circuitry can be found here for supporting the chip.", "tokens": [51450, 44272, 40235, 9048, 627, 393, 312, 1352, 510, 337, 7231, 264, 11409, 13, 51698], "temperature": 0.0, "avg_logprob": -0.09139997880537432, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.009706567041575909}, {"id": 181, "seek": 90286, "start": 902.86, "end": 908.82, "text": " In order to fit more capacity, engineers copied this layout onto the other side.", "tokens": [50364, 682, 1668, 281, 3318, 544, 6042, 11, 11955, 25365, 341, 13333, 3911, 264, 661, 1252, 13, 50662], "temperature": 0.0, "avg_logprob": -0.1422709440573668, "compression_ratio": 1.497560975609756, "no_speech_prob": 0.08266805857419968}, {"id": 182, "seek": 90286, "start": 908.82, "end": 915.5, "text": " This chip can read or write at a rate of around 500 megabytes per second.", "tokens": [50662, 639, 11409, 393, 1401, 420, 2464, 412, 257, 3314, 295, 926, 5923, 10816, 24538, 680, 1150, 13, 50996], "temperature": 0.0, "avg_logprob": -0.1422709440573668, "compression_ratio": 1.497560975609756, "no_speech_prob": 0.08266805857419968}, {"id": 183, "seek": 90286, "start": 915.5, "end": 923.94, "text": " That means that it can read from or write to around 63 blocks every single second.", "tokens": [50996, 663, 1355, 300, 309, 393, 1401, 490, 420, 2464, 281, 926, 25082, 8474, 633, 2167, 1150, 13, 51418], "temperature": 0.0, "avg_logprob": -0.1422709440573668, "compression_ratio": 1.497560975609756, "no_speech_prob": 0.08266805857419968}, {"id": 184, "seek": 90286, "start": 923.94, "end": 926.46, "text": " That's incredibly fast.", "tokens": [51418, 663, 311, 6252, 2370, 13, 51544], "temperature": 0.0, "avg_logprob": -0.1422709440573668, "compression_ratio": 1.497560975609756, "no_speech_prob": 0.08266805857419968}, {"id": 185, "seek": 90286, "start": 926.46, "end": 931.22, "text": " Okay, let's add the last level of complexity.", "tokens": [51544, 1033, 11, 718, 311, 909, 264, 1036, 1496, 295, 14024, 13, 51782], "temperature": 0.0, "avg_logprob": -0.1422709440573668, "compression_ratio": 1.497560975609756, "no_speech_prob": 0.08266805857419968}, {"id": 186, "seek": 93122, "start": 931.22, "end": 935.94, "text": " Engineers like to fit even more stuff in as small a space as possible.", "tokens": [50364, 43950, 411, 281, 3318, 754, 544, 1507, 294, 382, 1359, 257, 1901, 382, 1944, 13, 50600], "temperature": 0.0, "avg_logprob": -0.15101459108549972, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.09529682993888855}, {"id": 187, "seek": 93122, "start": 935.94, "end": 941.82, "text": " So on top of having a massive array of memory cells in this insanely complex layout, they", "tokens": [50600, 407, 322, 1192, 295, 1419, 257, 5994, 10225, 295, 4675, 5438, 294, 341, 40965, 3997, 13333, 11, 436, 50894], "temperature": 0.0, "avg_logprob": -0.15101459108549972, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.09529682993888855}, {"id": 188, "seek": 93122, "start": 941.82, "end": 948.38, "text": " decided to copy this chip eight times and stack it into a single microchip.", "tokens": [50894, 3047, 281, 5055, 341, 11409, 3180, 1413, 293, 8630, 309, 666, 257, 2167, 4532, 339, 647, 13, 51222], "temperature": 0.0, "avg_logprob": -0.15101459108549972, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.09529682993888855}, {"id": 189, "seek": 93122, "start": 948.38, "end": 954.0600000000001, "text": " At the bottom, an additional interface chip is used to coordinate between the eight different", "tokens": [51222, 1711, 264, 2767, 11, 364, 4497, 9226, 11409, 307, 1143, 281, 15670, 1296, 264, 3180, 819, 51506], "temperature": 0.0, "avg_logprob": -0.15101459108549972, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.09529682993888855}, {"id": 190, "seek": 93122, "start": 954.0600000000001, "end": 955.3000000000001, "text": " chips.", "tokens": [51506, 11583, 13, 51568], "temperature": 0.0, "avg_logprob": -0.15101459108549972, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.09529682993888855}, {"id": 191, "seek": 93122, "start": 955.3000000000001, "end": 956.58, "text": " And that's it.", "tokens": [51568, 400, 300, 311, 309, 13, 51632], "temperature": 0.0, "avg_logprob": -0.15101459108549972, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.09529682993888855}, {"id": 192, "seek": 95658, "start": 956.58, "end": 962.0200000000001, "text": " That's all there is in this one microchip that can be found at the center of every one", "tokens": [50364, 663, 311, 439, 456, 307, 294, 341, 472, 4532, 339, 647, 300, 393, 312, 1352, 412, 264, 3056, 295, 633, 472, 50636], "temperature": 0.0, "avg_logprob": -0.11609330707126193, "compression_ratio": 1.5688073394495412, "no_speech_prob": 0.29707181453704834}, {"id": 193, "seek": 95658, "start": 962.0200000000001, "end": 967.6600000000001, "text": " of your smart phones, tablets or solid state drives.", "tokens": [50636, 295, 428, 4069, 10216, 11, 27622, 420, 5100, 1785, 11754, 13, 50918], "temperature": 0.0, "avg_logprob": -0.11609330707126193, "compression_ratio": 1.5688073394495412, "no_speech_prob": 0.29707181453704834}, {"id": 194, "seek": 95658, "start": 967.6600000000001, "end": 972.1, "text": " This video covered a lot and I hope you kept up.", "tokens": [50918, 639, 960, 5343, 257, 688, 293, 286, 1454, 291, 4305, 493, 13, 51140], "temperature": 0.0, "avg_logprob": -0.11609330707126193, "compression_ratio": 1.5688073394495412, "no_speech_prob": 0.29707181453704834}, {"id": 195, "seek": 95658, "start": 972.1, "end": 975.58, "text": " You can always watch this video a second time.", "tokens": [51140, 509, 393, 1009, 1159, 341, 960, 257, 1150, 565, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11609330707126193, "compression_ratio": 1.5688073394495412, "no_speech_prob": 0.29707181453704834}, {"id": 196, "seek": 95658, "start": 975.58, "end": 980.62, "text": " And if you do watch it a second time, we added our notes and commentary into the English", "tokens": [51314, 400, 498, 291, 360, 1159, 309, 257, 1150, 565, 11, 321, 3869, 527, 5570, 293, 23527, 666, 264, 3669, 51566], "temperature": 0.0, "avg_logprob": -0.11609330707126193, "compression_ratio": 1.5688073394495412, "no_speech_prob": 0.29707181453704834}, {"id": 197, "seek": 95658, "start": 980.62, "end": 982.62, "text": " Canada subtitles.", "tokens": [51566, 6309, 42045, 13, 51666], "temperature": 0.0, "avg_logprob": -0.11609330707126193, "compression_ratio": 1.5688073394495412, "no_speech_prob": 0.29707181453704834}, {"id": 198, "seek": 98262, "start": 982.62, "end": 986.74, "text": " Turn them on by clicking the settings gear over here.", "tokens": [50364, 7956, 552, 322, 538, 9697, 264, 6257, 7394, 670, 510, 13, 50570], "temperature": 0.0, "avg_logprob": -0.1363363920473585, "compression_ratio": 1.6334661354581674, "no_speech_prob": 0.6176840662956238}, {"id": 199, "seek": 98262, "start": 986.74, "end": 992.66, "text": " On the contrary, the notes that are placed up here are caveats or footnotes.", "tokens": [50570, 1282, 264, 19506, 11, 264, 5570, 300, 366, 7074, 493, 510, 366, 11730, 1720, 420, 2671, 2247, 279, 13, 50866], "temperature": 0.0, "avg_logprob": -0.1363363920473585, "compression_ratio": 1.6334661354581674, "no_speech_prob": 0.6176840662956238}, {"id": 200, "seek": 98262, "start": 992.66, "end": 999.66, "text": " But the notes we placed in the English Canada subtitles include commentary, additional information", "tokens": [50866, 583, 264, 5570, 321, 7074, 294, 264, 3669, 6309, 42045, 4090, 23527, 11, 4497, 1589, 51216], "temperature": 0.0, "avg_logprob": -0.1363363920473585, "compression_ratio": 1.6334661354581674, "no_speech_prob": 0.6176840662956238}, {"id": 201, "seek": 98262, "start": 999.66, "end": 1001.42, "text": " and much more.", "tokens": [51216, 293, 709, 544, 13, 51304], "temperature": 0.0, "avg_logprob": -0.1363363920473585, "compression_ratio": 1.6334661354581674, "no_speech_prob": 0.6176840662956238}, {"id": 202, "seek": 98262, "start": 1001.42, "end": 1003.98, "text": " Let us know what you think of them in the comments.", "tokens": [51304, 961, 505, 458, 437, 291, 519, 295, 552, 294, 264, 3053, 13, 51432], "temperature": 0.0, "avg_logprob": -0.1363363920473585, "compression_ratio": 1.6334661354581674, "no_speech_prob": 0.6176840662956238}, {"id": 203, "seek": 98262, "start": 1003.98, "end": 1009.58, "text": " Also, we'll be making a follow up set of episodes that will branch off and explain how each", "tokens": [51432, 2743, 11, 321, 603, 312, 1455, 257, 1524, 493, 992, 295, 9313, 300, 486, 9819, 766, 293, 2903, 577, 1184, 51712], "temperature": 0.0, "avg_logprob": -0.1363363920473585, "compression_ratio": 1.6334661354581674, "no_speech_prob": 0.6176840662956238}, {"id": 204, "seek": 98262, "start": 1009.58, "end": 1011.86, "text": " part works in detail.", "tokens": [51712, 644, 1985, 294, 2607, 13, 51826], "temperature": 0.0, "avg_logprob": -0.1363363920473585, "compression_ratio": 1.6334661354581674, "no_speech_prob": 0.6176840662956238}, {"id": 205, "seek": 101186, "start": 1011.86, "end": 1017.7, "text": " In separate episodes, we'll cover specifics as to how the charge trap flash works, how", "tokens": [50364, 682, 4994, 9313, 11, 321, 603, 2060, 28454, 382, 281, 577, 264, 4602, 11487, 7319, 1985, 11, 577, 50656], "temperature": 0.0, "avg_logprob": -0.16031667709350586, "compression_ratio": 1.62890625, "no_speech_prob": 0.2195504605770111}, {"id": 206, "seek": 101186, "start": 1017.7, "end": 1023.94, "text": " the bit line and control gate selectors work, and how these microchips are manufactured.", "tokens": [50656, 264, 857, 1622, 293, 1969, 8539, 3048, 830, 589, 11, 293, 577, 613, 4532, 339, 2600, 366, 25738, 13, 50968], "temperature": 0.0, "avg_logprob": -0.16031667709350586, "compression_ratio": 1.62890625, "no_speech_prob": 0.2195504605770111}, {"id": 207, "seek": 101186, "start": 1023.94, "end": 1029.46, "text": " Also, take a look at our channel page where we cover other topics such as how touch screens", "tokens": [50968, 2743, 11, 747, 257, 574, 412, 527, 2269, 3028, 689, 321, 2060, 661, 8378, 1270, 382, 577, 2557, 11171, 51244], "temperature": 0.0, "avg_logprob": -0.16031667709350586, "compression_ratio": 1.62890625, "no_speech_prob": 0.2195504605770111}, {"id": 208, "seek": 101186, "start": 1029.46, "end": 1034.46, "text": " work, how PCBs work or how cameras in your smartphone work.", "tokens": [51244, 589, 11, 577, 42065, 82, 589, 420, 577, 8622, 294, 428, 13307, 589, 13, 51494], "temperature": 0.0, "avg_logprob": -0.16031667709350586, "compression_ratio": 1.62890625, "no_speech_prob": 0.2195504605770111}, {"id": 209, "seek": 101186, "start": 1034.46, "end": 1039.74, "text": " If you have any questions or want us to add more branches relating to solid state drives,", "tokens": [51494, 759, 291, 362, 604, 1651, 420, 528, 505, 281, 909, 544, 14770, 23968, 281, 5100, 1785, 11754, 11, 51758], "temperature": 0.0, "avg_logprob": -0.16031667709350586, "compression_ratio": 1.62890625, "no_speech_prob": 0.2195504605770111}, {"id": 210, "seek": 103974, "start": 1039.74, "end": 1041.9, "text": " tell us in the comments below.", "tokens": [50364, 980, 505, 294, 264, 3053, 2507, 13, 50472], "temperature": 0.0, "avg_logprob": -0.12982087439679085, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.5883572101593018}, {"id": 211, "seek": 103974, "start": 1041.9, "end": 1044.02, "text": " But for now, thanks for watching.", "tokens": [50472, 583, 337, 586, 11, 3231, 337, 1976, 13, 50578], "temperature": 0.0, "avg_logprob": -0.12982087439679085, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.5883572101593018}, {"id": 212, "seek": 103974, "start": 1044.02, "end": 1050.14, "text": " Subscribe and hit the bell to get notified when we post more branch episodes on how solid", "tokens": [50578, 10611, 293, 2045, 264, 4549, 281, 483, 18013, 562, 321, 2183, 544, 9819, 9313, 322, 577, 5100, 50884], "temperature": 0.0, "avg_logprob": -0.12982087439679085, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.5883572101593018}, {"id": 213, "seek": 103974, "start": 1050.14, "end": 1053.18, "text": " state drives work and other topics.", "tokens": [50884, 1785, 11754, 589, 293, 661, 8378, 13, 51036], "temperature": 0.0, "avg_logprob": -0.12982087439679085, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.5883572101593018}, {"id": 214, "seek": 103974, "start": 1053.18, "end": 1058.6200000000001, "text": " If you learned something new, share this video with others, tweet it, post it to your favorite", "tokens": [51036, 759, 291, 3264, 746, 777, 11, 2073, 341, 960, 365, 2357, 11, 15258, 309, 11, 2183, 309, 281, 428, 2954, 51308], "temperature": 0.0, "avg_logprob": -0.12982087439679085, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.5883572101593018}, {"id": 215, "seek": 103974, "start": 1058.6200000000001, "end": 1064.38, "text": " discussion board, or share it on social media so others can learn how this amazing technology", "tokens": [51308, 5017, 3150, 11, 420, 2073, 309, 322, 2093, 3021, 370, 2357, 393, 1466, 577, 341, 2243, 2899, 51596], "temperature": 0.0, "avg_logprob": -0.12982087439679085, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.5883572101593018}, {"id": 216, "seek": 103974, "start": 1064.38, "end": 1065.38, "text": " works.", "tokens": [51596, 1985, 13, 51646], "temperature": 0.0, "avg_logprob": -0.12982087439679085, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.5883572101593018}, {"id": 217, "seek": 106538, "start": 1065.38, "end": 1073.14, "text": " Until next time, consider the conceptual simplicity, yet structural complexity in the world around", "tokens": [50364, 9088, 958, 565, 11, 1949, 264, 24106, 25632, 11, 1939, 15067, 14024, 294, 264, 1002, 926, 50752], "temperature": 0.0, "avg_logprob": -0.2592516567396081, "compression_ratio": 1.1444444444444444, "no_speech_prob": 0.4492211639881134}, {"id": 218, "seek": 106538, "start": 1073.14, "end": 1073.38, "text": " you.", "tokens": [50752, 291, 13, 50764], "temperature": 0.0, "avg_logprob": -0.2592516567396081, "compression_ratio": 1.1444444444444444, "no_speech_prob": 0.4492211639881134}], "language": "en"}