WEBVTT

00:00.000 --> 00:06.500
It's hard to believe that all your photos, videos, music, messages, and apps can be stored

00:06.500 --> 00:08.600
in the palm of your hand.

00:08.600 --> 00:15.080
And to most of us, it's a mystery how so much information can fit in such a small space.

00:15.080 --> 00:21.000
But it might not seem so surprising when you see the complexity inside your smartphone

00:21.000 --> 00:28.320
or the inside of this one terabyte solid-state drive commonly found in laptops or computers.

00:28.520 --> 00:35.320
However, as seeing the outside of this memory storage microchip tells us little about how

00:35.320 --> 00:42.160
these smartphones and solid-state drives can store tens of thousands of photos and files,

00:42.160 --> 00:47.840
let's explore deeper and zoom in until we get to a nanoscopic view.

00:47.840 --> 00:53.600
And it's here that we can see the structures called VINAND that hold all the data in your

00:53.600 --> 00:55.600
smartphone and computer.

00:55.600 --> 00:58.160
Here's where the real magic happens.

00:58.160 --> 01:05.360
Every picture, message, and bit of information gets saved as quantities of electrons inside

01:05.360 --> 01:10.400
these memory cells which are called charge-trapped flash.

01:10.400 --> 01:16.400
And in this episode, we'll learn how smartphone memory and solid-state drives work.

01:16.400 --> 01:18.440
Now, hold on.

01:18.440 --> 01:23.800
These insanely small and intricate structures seem very complex.

01:23.800 --> 01:25.360
And yeah, they are.

01:25.360 --> 01:29.240
I'm not going to say this marvel of engineering is simple.

01:29.240 --> 01:31.200
But you have to trust me.

01:31.200 --> 01:36.480
Stick around, watch closely, maybe watch this video twice.

01:36.480 --> 01:41.240
And by the end of it, this technology will amaze you.

01:41.240 --> 01:44.320
It'll blow your mind at least twice over.

01:44.320 --> 01:50.560
And yeah, you'll have a thorough understanding as to how such a small device can store weeks

01:50.560 --> 01:58.040
of high-quality video, tens of thousands of pictures, or hundreds of thousands of songs

01:58.040 --> 02:01.800
in such an itty-bitty little space.

02:01.800 --> 02:05.520
So let's get started.

02:05.520 --> 02:10.340
We're going to use a real-life example and explore how it works when you save a picture

02:10.340 --> 02:12.800
to your smartphone or computer.

02:12.800 --> 02:16.720
First, this picture is made up of pixels.

02:16.720 --> 02:18.960
And each pixel has a color.

02:18.960 --> 02:23.400
So let's zoom in so that we can see the individual pixels.

02:23.400 --> 02:31.840
The color of every pixel is defined by a combination of three numbers, ranging from 0 to 255,

02:31.840 --> 02:35.720
each representing red, green, or blue.

02:35.720 --> 02:44.800
For example, the numbers would be 55, 53, 55 for this pixel's color right here.

02:44.800 --> 02:53.200
And then 124, 121, and 119 for this pixel.

02:53.200 --> 03:02.520
Each of these three numbers, from 0 to 255, is represented by 8 bits in binary, or 8 ones

03:02.520 --> 03:06.960
and zeros, you know, because computers work in binary.

03:06.960 --> 03:16.800
So three colors, red, green, and blue, and 8 bits each, means each pixel takes 24 bits

03:16.800 --> 03:18.760
to define its color.

03:18.760 --> 03:21.740
This picture is a grid of colored pixels.

03:21.740 --> 03:28.400
So let's turn it into a grid of values, kind of like a spreadsheet in Excel, but called

03:28.400 --> 03:32.280
an array instead of a spreadsheet.

03:32.280 --> 03:39.000
This array of bits is what your computer cares about, and non-coincidentally, it's also the

03:39.000 --> 03:43.940
information that the camera on my smartphone recorded when I took the picture.

03:43.940 --> 03:49.880
One quick note, if you want to see the pixels in any picture, just open it in an image editing

03:49.880 --> 03:55.520
program like paint, or 3D paint in this case, and zoom in.

03:55.520 --> 04:02.840
And then if you want to see the red, green, and blue, or RGB values, just use the eyedropper,

04:02.840 --> 04:07.440
click on a pixel, and then click on the edit color option.

04:07.440 --> 04:13.640
Right here, you can see the three values for red, green, and blue, and the resulting color.

04:13.640 --> 04:17.640
Okay, with that covered, let's get back to the episode.

04:17.640 --> 04:24.920
First, we're going to zoom out to see the full picture, which is 3,024 pixels wide,

04:24.920 --> 04:34.680
and 4,032 pixels tall, which is a total of around 12 million pixels, or 12 megapixels,

04:34.680 --> 04:39.880
which relates to the resolution of the 12 megapixel camera on my smartphone.

04:39.880 --> 04:47.220
Next, by doing some multiplication, we calculate that an array of this size where each pixel

04:47.220 --> 04:58.020
is defined by 24 bits, or 24 zeros or ones, only requires 293 million bits, or a unique

04:58.020 --> 05:03.340
set of 293 million zeros or ones.

05:03.340 --> 05:05.460
That's a ton of bits.

05:05.460 --> 05:12.100
So let's figure out how your smartphone, or the solid state drive, seamlessly stores

05:12.100 --> 05:14.660
every single one of them.

05:15.380 --> 05:23.020
Okay, so let's open up that solid state drive again, and zoom into a simplified nanoscopic

05:23.020 --> 05:26.580
view, kind of like the one we had earlier.

05:26.580 --> 05:30.700
It's here that we can see the memory cells that are used in every single one of your

05:30.700 --> 05:37.460
smartphones or tablets, as well as inside the solid state drive in your computer.

05:37.460 --> 05:43.460
This is the basic unit of a computer's long-term memory storage, and it's called charge-trapped

05:43.460 --> 05:44.820
flash memory.

05:44.820 --> 05:46.980
So, how does it work?

05:46.980 --> 05:53.460
Well, in each cell, we can store information by placing different levels of electrons onto

05:53.460 --> 05:58.100
a charge trap, which is the key component inside the memory cell.

05:58.100 --> 06:04.460
Older technology could only store two different levels of electrons, a lot of electrons or

06:04.460 --> 06:10.900
very few electrons, which were used to store a single bit as a one or zero.

06:10.900 --> 06:16.340
However, engineers have been developing more finely tuned capabilities for trapping and

06:16.340 --> 06:21.780
measuring different amounts of electrons or charges onto the charge trap.

06:21.780 --> 06:28.540
Most memory cells in 2020 can hold eight different levels, but newer technology can have sixteen

06:28.540 --> 06:31.820
different levels of electrons.

06:31.820 --> 06:37.260
This means that a single cell, instead of holding only one bit as a lot of electrons

06:37.260 --> 06:41.540
or no electrons, can now hold three or more bits.

06:41.540 --> 06:44.660
For this example, we're going to stick with three bits.

06:44.660 --> 06:52.820
So in this cell, if we were to have very few electrons on it, it would be one, one, one.

06:52.820 --> 07:00.740
While some electrons get designated as one, zero, zero, and a lot of electrons are zero,

07:00.740 --> 07:02.500
zero, zero.

07:02.500 --> 07:07.900
There are eight different levels for all the various amounts of electron charges that our

07:07.900 --> 07:11.140
charge trap can be set or written to.

07:11.140 --> 07:16.940
The key to the charge trap is that it is specially designed so that after it gets charged with

07:16.940 --> 07:23.500
electrons, it can hold onto those electrons for decades, which is how information is saved

07:23.500 --> 07:26.180
or written to the solid state drive.

07:26.180 --> 07:29.260
I mean, it's called a charge trap for a reason.

07:29.260 --> 07:36.060
It traps electrons or charges for years on end, and in order to read the information,

07:36.060 --> 07:41.540
the electron charge level is measured, and the amount of charge on the charge trap is

07:41.540 --> 07:42.540
unchanged.

07:42.540 --> 07:48.300
However, in order to erase the contents of a memory cell, all the electron charges are

07:48.300 --> 07:54.740
forcibly removed from the charge trap, returning it to its lowest level, which is one, one,

07:54.740 --> 07:59.740
one, and leaving no excess electron charges behind.

07:59.740 --> 08:05.140
Let's move on and explore how these memory cells are organized so that we can store more

08:05.140 --> 08:07.820
than three bits of information.

08:07.820 --> 08:12.820
After we zoom out a little, you can see that the memory cells are stacked vertically.

08:12.820 --> 08:18.260
This is where the vertical part in vertical NAND or VNAND comes from.

08:18.260 --> 08:24.660
This stack of memory cells, which is technically called a string, is composed of ten charge

08:24.660 --> 08:28.300
trap flash cells layered one on top of another.

08:28.300 --> 08:34.340
When information is written to or read from a string, only one cell can be activated at

08:34.340 --> 08:40.940
any given time, and to do that, we use separate control gates attached to every layer in the

08:40.940 --> 08:41.940
string.

08:41.940 --> 08:43.140
It works like this.

08:43.140 --> 08:49.580
The bottom control gate first says, hey you, charge trap one, what's your electron charge

08:49.580 --> 08:50.940
level at?

08:50.940 --> 08:55.780
Then the bottom cell sends that information through the center of the string up to the

08:55.780 --> 09:00.680
information highway at the top, which is technically called a bit line.

09:00.680 --> 09:05.420
Then the next control gate for the second layer asks for the charge level in the second

09:05.420 --> 09:12.300
cell and so on up the string, each cell sending their information up to the highway or bit

09:12.300 --> 09:13.300
line.

09:13.300 --> 09:18.420
The same kind of sequence happens when charges are being added to a charge trap, which is

09:18.420 --> 09:21.260
how information is written to a memory cell.

09:21.260 --> 09:26.980
The main thing is that only one layer in the string is either written to or read from at

09:26.980 --> 09:28.780
any given time.

09:28.780 --> 09:30.860
Let's move on in complexity.

09:30.860 --> 09:38.580
Next, we duplicate this string 32 times, and this gets us a page of strings.

09:38.580 --> 09:40.820
Let's review some terminology.

09:40.820 --> 09:44.700
This is a memory cell, and this is a string.

09:44.700 --> 09:51.740
And now here we have a page, and we're going to call this entire page of strings a row.

09:51.740 --> 09:57.580
When we duplicate the string, we also duplicate the bit line 32 times.

09:57.580 --> 10:03.580
However, rather than duplicate the control gates, we're going to have every cell in

10:03.580 --> 10:06.900
the same page share a common control gate.

10:06.900 --> 10:13.580
This makes it so that when information is written to or read from a row, an entire page

10:13.580 --> 10:21.180
composed of 32 adjacent cells, all in the same layer, are activated at the same time.

10:21.180 --> 10:23.980
Let's step up in complexity again.

10:23.980 --> 10:30.860
Next, we duplicate these rows 6 times until we get a block, but we're going to do it

10:30.860 --> 10:33.820
12 times so we can see 2 blocks.

10:33.820 --> 10:40.660
Okay, so again, here we have a column, here is a row, and this is a layer.

10:40.660 --> 10:44.980
And now here's a cell, and here's a string.

10:44.980 --> 10:48.860
Next we have a page, and finally we have a block.

10:48.860 --> 10:54.100
We're going to connect the tops of each string in a column together, so they all share the

10:54.100 --> 10:59.140
same bit line, and our bit line is looking like a highway now.

10:59.140 --> 11:04.860
In addition, we have to add a control gate that selects between rows so that only one

11:04.860 --> 11:07.900
row is using the bit line at a time.

11:07.900 --> 11:10.660
These are called bit line selectors.

11:10.660 --> 11:16.940
As discussed, these bit lines are like highways, and the selectors at the top act as traffic

11:16.940 --> 11:22.860
lights that mediate the flow of information so that only a single row can use the highway

11:22.860 --> 11:25.100
or is active at a time.

11:25.100 --> 11:31.580
Similarly, the control gates attached to each layer act as traffic lights for the layers.

11:31.580 --> 11:36.620
With bit line selectors along the tops of each row and control gate selectors along

11:36.620 --> 11:43.100
each layer, the solid state drive can read from or write to a single page at any given

11:43.100 --> 11:44.100
time.

11:44.100 --> 11:49.540
Additionally, in order to connect to the bit line selectors and control gate selectors,

11:49.540 --> 11:55.780
there are wires that drop down from above and run perpendicular to the bit lines.

11:55.780 --> 11:58.300
So let's quickly recap.

11:58.300 --> 12:03.580
Eight different levels of electrons are placed on charge traps in order to store three bits

12:03.580 --> 12:05.100
of information.

12:05.100 --> 12:12.700
These charge trap flash memory cells are stacked into strings, ten cells tall, which are duplicated

12:12.700 --> 12:16.140
into pages of 32 strings in a row.

12:16.140 --> 12:22.980
Next, those pages of strings are duplicated until we have a block six rows deep.

12:22.980 --> 12:25.820
And here we're showing two blocks.

12:25.820 --> 12:33.420
Doing some quick multiplication, we find that there are 3,840 memory cells here capable

12:33.420 --> 12:38.620
of storing a total of 11,520 bits.

12:38.620 --> 12:45.580
With each pixel in our picture requiring 24 bits, that means that we can store 480

12:46.340 --> 12:49.460
pixels, or this much of our overall picture.

12:49.460 --> 12:56.380
That means you need about 25,000 times the size of this layout to store the contents

12:56.380 --> 12:58.540
of this single picture.

12:58.540 --> 13:02.660
And here's where we learn about the actual size of a memory chip.

13:02.660 --> 13:07.540
All the principles we've discussed remain the same, so keep those in mind.

13:07.540 --> 13:13.060
It's just that the size is much more extensive than we discussed in our example.

13:13.060 --> 13:18.500
It's hard to pin down exact numbers because manufacturers are continually improving their

13:18.500 --> 13:24.100
designs and they're very secretive regarding what their designs look like.

13:24.100 --> 13:25.940
But I'll tell you what I know.

13:25.940 --> 13:32.620
The latest designs utilize not ten layers as in the example, but rather somewhere around

13:32.620 --> 13:37.220
96 to 136 layers tall.

13:37.220 --> 13:41.620
Here's a single sheet of paper so you can get a sense of the approximate height of

13:41.620 --> 13:44.100
these stacks of memory cells.

13:44.100 --> 13:48.300
Now that we understand the height, let's think about the width.

13:48.300 --> 13:54.500
A page is around 30,000 to 60,000 adjacent memory cells wide.

13:54.500 --> 14:00.820
That means there are 30,000 to 60,000 bitlines in our information superhighway.

14:00.820 --> 14:07.380
Blocks are every 4 to 8 rows and there are around 4,000 to 6,000 blocks.

14:07.380 --> 14:13.580
Along the edges are the control gate selectors and the bitline selectors on the other side.

14:13.580 --> 14:17.740
Together they comprise what is called a row decoder.

14:17.740 --> 14:24.140
And by using both sets of selectors as traffic lights, we're able to access a single page.

14:24.140 --> 14:32.460
To repeat this, only one page, 45,000 or so cells wide, ever uses the bitline to read

14:32.460 --> 14:36.180
or write information at any given time.

14:36.180 --> 14:42.020
All tens of thousands of bitlines feed down here to the page buffer where the information

14:42.020 --> 14:45.940
of a single page is read to or written from.

14:45.940 --> 14:50.740
Let's transition to see what an overall chip might look like.

14:50.740 --> 14:56.900
Here we have the arrays of 3D memory cells, the row decoder and the page buffer at the

14:56.900 --> 14:57.900
bottom.

14:57.900 --> 15:02.860
Additional peripheral circuitry can be found here for supporting the chip.

15:02.860 --> 15:08.820
In order to fit more capacity, engineers copied this layout onto the other side.

15:08.820 --> 15:15.500
This chip can read or write at a rate of around 500 megabytes per second.

15:15.500 --> 15:23.940
That means that it can read from or write to around 63 blocks every single second.

15:23.940 --> 15:26.460
That's incredibly fast.

15:26.460 --> 15:31.220
Okay, let's add the last level of complexity.

15:31.220 --> 15:35.940
Engineers like to fit even more stuff in as small a space as possible.

15:35.940 --> 15:41.820
So on top of having a massive array of memory cells in this insanely complex layout, they

15:41.820 --> 15:48.380
decided to copy this chip eight times and stack it into a single microchip.

15:48.380 --> 15:54.060
At the bottom, an additional interface chip is used to coordinate between the eight different

15:54.060 --> 15:55.300
chips.

15:55.300 --> 15:56.580
And that's it.

15:56.580 --> 16:02.020
That's all there is in this one microchip that can be found at the center of every one

16:02.020 --> 16:07.660
of your smart phones, tablets or solid state drives.

16:07.660 --> 16:12.100
This video covered a lot and I hope you kept up.

16:12.100 --> 16:15.580
You can always watch this video a second time.

16:15.580 --> 16:20.620
And if you do watch it a second time, we added our notes and commentary into the English

16:20.620 --> 16:22.620
Canada subtitles.

16:22.620 --> 16:26.740
Turn them on by clicking the settings gear over here.

16:26.740 --> 16:32.660
On the contrary, the notes that are placed up here are caveats or footnotes.

16:32.660 --> 16:39.660
But the notes we placed in the English Canada subtitles include commentary, additional information

16:39.660 --> 16:41.420
and much more.

16:41.420 --> 16:43.980
Let us know what you think of them in the comments.

16:43.980 --> 16:49.580
Also, we'll be making a follow up set of episodes that will branch off and explain how each

16:49.580 --> 16:51.860
part works in detail.

16:51.860 --> 16:57.700
In separate episodes, we'll cover specifics as to how the charge trap flash works, how

16:57.700 --> 17:03.940
the bit line and control gate selectors work, and how these microchips are manufactured.

17:03.940 --> 17:09.460
Also, take a look at our channel page where we cover other topics such as how touch screens

17:09.460 --> 17:14.460
work, how PCBs work or how cameras in your smartphone work.

17:14.460 --> 17:19.740
If you have any questions or want us to add more branches relating to solid state drives,

17:19.740 --> 17:21.900
tell us in the comments below.

17:21.900 --> 17:24.020
But for now, thanks for watching.

17:24.020 --> 17:30.140
Subscribe and hit the bell to get notified when we post more branch episodes on how solid

17:30.140 --> 17:33.180
state drives work and other topics.

17:33.180 --> 17:38.620
If you learned something new, share this video with others, tweet it, post it to your favorite

17:38.620 --> 17:44.380
discussion board, or share it on social media so others can learn how this amazing technology

17:44.380 --> 17:45.380
works.

17:45.380 --> 17:53.140
Until next time, consider the conceptual simplicity, yet structural complexity in the world around

17:53.140 --> 17:53.380
you.

