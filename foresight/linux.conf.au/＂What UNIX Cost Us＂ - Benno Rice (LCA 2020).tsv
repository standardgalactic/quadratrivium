start	end	text
0	2000	Please welcome Ben O'Riess.
2000	10000	So, yeah, after last year, I thought I'd go a bit less controversial.
10000	18000	Anyway, so I thought I'd start in good form by stealing something from Gary Bernard.
18000	20000	Gary Bernard is the author of the Watt Talk.
20000	24000	If you haven't seen that, see that and then watch Katie's talk about explaining the Watt.
24000	28000	But at the keynote that he gave at PyCon in Montreal a few years back,
28000	34000	he talked about the state of knowing things, but also the state of knowing that you know them.
34000	39000	And he put up this kind of truth table thing about whether you know something or whether you meta-know it.
39000	44000	And, you know, if you know it, if you know something that you know, then you know it, then it's a no-knowing, it's knowledge.
44000	46000	It's there, so you can use.
46000	50000	If it's something you don't know but you know that you don't know it, that's a no, an unknown.
50000	52000	That's something you can go and find out later if you need to.
52000	54000	That's all good.
54000	56840	don't know it and you don't know that you don't know it, then it's an unknown unknown
56840	59280	and that's something that might come to bite you later on.
59280	62520	But there's a row missing from this.
62520	68200	What happens if you know something but you don't know that you know it?
68200	72720	Gary defined that as ideology.
72720	77360	And I think that's a pretty good definition, but tradition I think is also somewhat appropriate
77360	78360	there.
78360	80680	It's something where it's the kind of background radiation and it's something that you just
80680	83880	use without really questioning it.
83880	99520	And so, to get started, let's, so, I work for a company that makes a lot of USB devices.
99520	104080	One of our USB devices, which is not the key that you've got in your things, it's a hardware
104080	109480	storage module, involves a piece of software we call the connector and it talks to it over
109480	111320	USB.
111320	116400	And I was wanting to rewrite that in Rust because you do.
116400	120880	And the problem was that at the time, the lib USB bindings for Rust were somewhat bit
120880	122320	rotted.
122320	128720	And so, I decided to try and implement just enough of what lib USB did in Rust itself
128720	133240	on the three platforms that we cared about, which were Windows, Mac and Linux.
133240	135520	And basically, I just wanted to implement this.
135520	138640	I want to iterate over the USB devices to find a device that matches a given vendor
138640	139640	product tuple.
139920	143320	I want to get the device's serial number because sometimes we have more than one attached.
143320	144800	We want to make sure we're attaching the right one.
144800	147640	I want to open the device and claim interface zero.
147640	149640	USB devices can have multiple interfaces.
149640	150640	It doesn't matter.
150640	152720	Send an echo request packet and get the response back.
152720	153720	All good.
153720	157840	So, here, in fairly quick terms, because otherwise I'm going to blow my entire runtime on just
157840	161680	this, is what that code looks like without any error checking or anything.
161680	164800	Do not run this code.
164800	166120	Windows.
166120	169960	We start by getting a class device thing.
169960	171800	We enumerate.
171800	173960	We create enumerator for it.
173960	175520	We get some devices.
175520	178680	We get interface detail not once but twice because the first time we just try and get
178680	179680	a byte count.
179680	181200	So, we do it again.
181200	183160	Once we've got that, then we have a device path.
183160	184800	This is not a file system path.
184800	186000	This is a device path.
186000	189120	This is not slash dev slash something or the Windows equivalent.
189120	192720	It's like the device tree path that you get.
192720	194360	So, that's all good.
194360	199200	Then we open that with create file W. The W means wide or Windows or something.
199200	202640	It means not ASCII.
202640	205920	And that's about the only actual file operation you'll see in this whole thing because we
205920	211840	rapidly move on to the WinUSB API, which is the API for talking to USB devices from user
211840	213040	space in Windows.
213040	215160	So, we create an interface handle.
215160	219280	We get the device descriptor, which gives us the vendor and product things that we need
219280	221760	in order to be able to tell whether we got the right one.
221760	223000	Then we get a string descriptor.
223000	225360	This 409 value is one you'll see a lot.
225360	227240	That is USB speak for English.
227240	232800	So, we're getting the English serial number, not any of the other fancy serial numbers.
232800	233960	Then we make sure it's the one we want.
233960	237080	This is actually in UTF-16 for reasons but whatever.
237080	239640	So, now we've got the device we want.
239640	242160	We do a bunch of mucking around with setting pipe policies.
242160	245160	Pipes are the things that are used to communicate with the USB device.
245160	249120	This one tells it that we want it to send zero-length packets when necessary.
249120	252840	This one and this one are all about just clearing the pipe to make sure that it's not going
252840	257040	to fail on us, and then we can write data to it and read data from it.
257040	259200	So, that's not so bad.
259200	262720	I was actually pleasantly surprised by this because it's not too bad.
262720	266720	You've got a bit at the start where you are doing the device iteration and finding the
266720	270960	device you're looking for, and then you've got the actual USB stuff on the other side,
270960	274520	and that's, you know, it all flowed together pretty well.
274520	276800	So, Mac.
276800	280080	We start by creating a dictionary which is used for matching devices.
280080	282760	We tell it we want to match USB devices.
282760	284720	Then we go and find all the matching services.
284720	288360	A service is a thing that lets you talk to a device.
288360	293480	We iterate over these, and then we create plug-in interface for service.
293480	296920	This returns as an object that we can use to communicate with the device.
296920	301560	This is a COM object, as in component object model.
301560	303160	I'm not making that up.
303160	305760	But it's for a good reason because it lets them version the interfaces.
305760	311040	You'll notice just above the bit I've highlighted, it says KIO USB interface ID 650.
311040	316080	That means version 650, which pertains to Mac OS 10.0, something I can't remember.
316080	319880	So we have to call query interface, which is comspeak for actually I want this class,
319880	324240	not the one you gave me, at which point we don't need it anymore, and we can go on and
324240	325720	do something else with it.
325720	329920	So, now that we've got our device, we can call get device vendor and get device product.
329920	333480	That lets us find whether we've got the one we want.
333480	337660	Then we can call get serial number string index, which tells us where in the string
337660	341280	table the thing is, and then we have to construct an actual request structure in order to get
341280	343200	it, which we then send.
343200	346520	You'll notice there's a lot of C structure function calling here.
346520	347520	That's all fine.
347520	350440	Then we make sure we've got the right one.
350440	355280	And then the next fun part is we have to create interface iterator because we have to iterate
355280	358160	over the interfaces that the device is giving us.
358160	362480	So this is another one of IO kits iterators, so we're calling IO iterator next again.
362480	367160	That construction is merely tell me what interface number you are so that I can check
367160	369320	it.
369320	370320	And then we get another one.
370320	376200	So this time instead of getting a USB device interface, we're getting a USB interface interface.
376200	377200	Factory.
377200	383480	Again, we have its version, you know, it's all actually not too bad.
383480	386600	And then we can open the interface, and then I'm going to gloss over a bit, which is the
386600	391600	fact that Mac OS uses pipe indexes, and you have to work out whether it's the pipe number
391600	395920	you actually want, but you just call write pipe and read pipe, and the TO means that
395920	397840	you're giving it a timeout.
397840	398840	That's all fine.
398840	403600	These are all, if you actually go digging through lib USB, you will see all of this code
403600	405320	with actual error checking and stuff.
405320	407800	So use that code, not my code.
407800	411640	So how about Linux?
411640	413760	We start with Udev.
413760	414760	Udev is not too bad.
414760	418560	Udev new, Udev numerate new, you know, we're creating an enumerator.
418560	420560	We're telling it we want USB devices.
420560	421680	We're scanning devices.
421680	423320	We get a list.
423320	425200	We iterate through the list.
425200	432120	We get a name, which gives us a path, and then we create a Udev device from that path,
432120	434840	and then we get a bunch of things, bus num, dev adder, and sysname.
434840	437440	Okay, now what?
437440	441880	SN printf.
441880	445840	So we have to get to the file that contains the descriptors, and then read the descriptor
445840	450080	in, at which point we can tell whether we've got the right vendor and product tuple.
450080	453240	SN printf.
453240	460560	So now we've got the actual device device, and at that point, the developers of this
460560	464720	gave up on everything being a file and just made you write out big, long structures and
464720	469160	I octal it.
469160	474200	But now we've got the serial number, so that's okay, and then another I octal, and so that's
474200	475200	the claim interface.
475200	480000	That's to do the right one, and then read and write is you guessed it, I octals.
480000	487040	So yeah, I'm not a fan.
487040	488960	Everything is a file mentality that they've used here.
488960	492000	I don't think it's actually served them well at all.
492000	495640	The Udev interface was quite nice, but as soon as I had to pivot through SN printf using
495640	500240	paths that I had to work out myself in order to actually work out where the device was,
500240	501400	that didn't really work too well.
501400	508160	But this is not the worst USB related or everything is a file API that's around.
508160	511760	The USB function FS is used to create user space devices.
511760	513560	So I wanted to test the code that I'd written.
513560	517440	That meant I needed a USB device that I had on a stick and could control and control the
517440	518440	responses of.
518440	519680	Linux has an answer for that.
519680	521520	It's called the function FS API.
521520	523240	Here's what you need to do.
523240	525280	You have to make a magic directory.
525280	527960	You have to make more magic directories.
527960	531120	You have to echo random values into files that got magically created when you created
531120	532480	those magic directories.
532480	536160	You have to sim link one of your magic directories to another magic directory.
536160	539360	You have to then make another magic directory, mount a magic file system.
539360	543520	Then you have to write a bunch of carefully constructed binary data, shove it into a file
543520	548880	which then creates more devices at which point you can open those devices and start doing
548880	552360	stuff with them, at which point you cat a magic value that's dependent on your system
552360	566000	into another magic file and hopefully it connects.
566000	567600	My colleague Nigel is here.
567600	572480	If you want to see it, you can ask him afterwards how much I was swearing as I tried to write
572480	582240	this in a way that was repeatable.
582320	589480	I mean, one could argue that my problems with the Linux USB API are covered off by the fact
589480	591320	that everyone did use libUSB.
591320	596600	You can say the same thing about C groups, because C groups has a somewhat alarming file
596600	606080	based UI API, sorry, and it's also covered by a library and that's fine, but it's indicative
606080	610800	of a mindset that's gone into this where we've taken this notion that it's kind of fun when
610840	616200	everything's a file and it worked for slash dev and it kind of worked for slash proct,
616200	618520	but it sucked.
618520	621600	We just kept going with it because it was the obvious thing to do and part of it I think
621600	626520	is that Unix never really specified how we're supposed to do that kind of thing.
626520	630640	It was very concerned with a whole bunch of other stuff, but it never sat down and said,
630640	635080	how do you actually configure a system?
635080	638560	I think it's just indicative of people get into this railroaded mindset where they just
638600	641840	don't think that they could do something on the other way, but anyway, let's talk about
641840	646440	stuff that Unix did standardize.
646440	651600	One of the joke titles for this when I first started writing it was Dave Cutler was right.
651600	655440	For those of you who don't know, Dave Cutler was originally with DEC and then went to Microsoft
655440	660200	where he created this little operating system called Windows NT and he was not a fan of
660200	665880	Unix and he was especially not a fan of Unix's IO model where he had his joke apparently
666440	670360	where he would say, got a bite, got a bite, got a bite, bite, bite.
670360	676640	But anyway, so this is the Unix IO API, like the guts of it, and this works reasonably
676640	683000	well when you think about it running on something like a Vax or a PDP or something like that.
683000	684800	You're reading some data in, you're writing some data out.
684800	685800	It's really simple.
685800	688280	Everything's great.
688280	693760	Then the internet happened, or more importantly, people discovered that shoveling data out
693760	698520	of sockets and into sockets and into files and out of files in lots of different ways
698520	704360	didn't really work with that API very well because it's blocking.
704360	706800	A file descriptor in Unix by default will block.
706800	710440	When you read, the read call does not return until it's done its reading.
710440	713360	When you write, it doesn't return until it's done its writing.
713360	716200	This slows you down because you can only do one thing at a time.
716200	717560	But we have an answer for that.
717560	718800	That's fine.
718800	722040	We have the most delightfully named system call in the entire Unix pantheon, which I
722040	728240	won't pronounce, which we can use to set a flag that says we shouldn't block, at which
728240	733920	point we can use the wonderful select API, which showed up in 4.2 BSD in 1983.
733920	737840	The problem with this one is that you have to shovel these FD sets, which are effectively
737840	743320	large bit strings, one bit per file descriptor, into and out of the kernel, and they also
743320	748600	have to know how big they are, which limits how many file descriptors you can have.
748600	752000	That's great when you're talking small things because, let's not forget, Unix
752000	754040	predates the Internet.
754040	757680	And so, you know, that was okay, but it didn't work too well.
757680	762640	AT&T's response with SVR 3 in 1986 was poll.
762640	766080	This fixes the file descriptor cap problem, but it means you still have to shovel large
766080	769360	amounts of file descriptor records in and out of the kernel and all that kind of stuff,
769360	771760	so it still had performance limitations.
771760	779480	And then FreeBSD, in 2000, invented this API, which was actually really good.
779480	781840	It's a kernel event API.
782080	784520	It's not just file descriptor events, it's all kernel events.
784520	787080	You can register to listen for any of them and get them all back.
787080	791840	That's file descriptor events, file events, like, you know, this file got created, deleted,
791840	794040	processes exited, signals happened, all kinds of stuff.
794040	796520	And, of course, this was so, this was really good.
796520	800120	It was used to make a whole bunch of nice high-performance stuff on FreeBSD, so, of course,
800120	803360	Linus said, hell no, I'm not taking that.
803360	810760	E-Poll is okay, I guess, except it's very focused around file descriptors, and so, if
810800	813480	you want anything else to be an event, you have to create a file descriptor for it, because
813480	819600	all events are files, no, anyway, but anyway, that's kind of beside the point.
819600	826360	Now we have non-blocking IO, and that's great, but the thing is this IO is still synchronous.
826360	828560	Synchronous is different to blocking.
828560	832320	Blocking means that you can't do anything else until you finish doing the first thing.
832320	836200	Synchronous means you still have to wait for it to finish, it just might finish and say,
836200	838360	I couldn't do it right now.
838400	843960	And this is really almost tied in with the Unix process model, where a process's memory
843960	850000	is, like, it's not strictly sacrosanct, but it's generally not good form for the kernel
850000	854040	to go rummaging around in your memory a lot, and a synchrony would require that to be the
854040	858200	case, you would have to be able to muck around in the process's memory and have memory that's
858200	860520	shared between two things at once, and that's tricky.
860520	865520	Now it didn't stop POSIX from having a go, hands up, who's actually used this API?
866480	876240	Yeah, not many, but on the flip side, that's the Windows equivalent of those calls, but
876240	881800	ever since NT 3.5, as in the first release, people did it, there's also been these.
881800	883800	Those are asynchronous.
883800	885800	They have a completion handler.
885800	887800	You can do stuff with that.
887800	896280	And then Winsock 2 also had similar things, and they also had completion ports.
896280	900440	And so that's basically a thing that you listen on, and when your I.O. is finished, you get
900440	904960	a notice that it happens, and even they have a solution to the, I have to open a file descriptor
904960	909120	so I can write a byte out it to wake my event loop up problem by just posting your own completion
909120	911120	event.
911120	917280	And I mean, the part of the problem here is that Unix's stuff is all tied to its history.
917280	922280	It grew out of systems that were very simple, and Windows does have an unfair advantage
922280	927440	here in that it came along both after Unix and after VMS and after a whole bunch of other
927440	929920	things where it could learn from it.
929920	933360	But the real, my problem with this is not so much that.
933360	936360	It's more that we haven't really caught up.
936360	939440	When you have a look at what happens under the hood of, like at the kernel level as opposed
939440	942160	to the user level, I.O. is really interesting.
942160	947480	This is a really bad description of a descriptor ring.
947480	955880	Most modern I.O. hardware, we're talking SCSI cards or SATA cards, Nix, NVMe, all uses descriptor
955880	956880	rings like this in memory.
956880	962400	You allocate a block of memory, and you carefully misalign one of the lines of that anyway.
962400	967520	And each one of those is 264 byte values, and you generally have a buffer address and
967520	968520	some metadata.
969080	971480	This varies a lot based on hardware.
971480	975480	But once you've got that, you have a host pointer and a device pointer.
975480	980160	The host moves through and fills in the buffer addresses, and each buffer address points at
980160	987120	some data that might be written out or an address where the device can write data to.
987120	991400	And then as the device sees that those are there, it can move along and fill them in,
991400	994840	and then the host can go back and find the ones that are used, and it just loops around
994840	995840	at the end and keeps going.
995840	1000120	If the ring fills up, then you have to wait for stuff to go through.
1000120	1007800	And Linux now has, as of some very short time ago, I.O.U. ring, which actually does do an
1007800	1008800	I.O.
1008800	1010640	API that follows those principles.
1010640	1015640	And I think that's great, but the real issue for me here is that could have happened a
1015640	1016640	long time ago.
1016640	1022960	These hardware descriptor rings have been around for years, but I think there's a combination
1022960	1027600	of, again, just being stuck in the mindset of where we were before, but also just not
1027600	1031200	wanting to rock the boat, and a lot of people thinking at a much higher level these days
1031200	1038000	than the low-level I.O. APIs that means that we don't always take the opportunity to progress
1038000	1041560	these things when we can.
1041560	1048360	But at that level, let's go a little deeper.
1048360	1055840	So I told you I was going for less controversial.
1055840	1061400	So I want to start this section with a reading from Ian M. Banks's book, Excession, in which
1061400	1065360	he describes the concept of an outside context problem.
1065360	1069040	The usual example given to illustrate an outside context problem was imagining you were a tribe
1069040	1070880	on a large, fertile island.
1070880	1073840	You tamed the land, invented the wheel, or writing, or whatever.
1073840	1077280	The neighbors were cooperative or enslaved, but at any rate, peaceful.
1077280	1080440	When you were busy raising temples to yourself with all the excess product of capacity you
1080440	1083920	had, you were in a position of absolute power and control which your hallowed ancestors
1083920	1086760	could hardly have dreamed of, and the whole situation was just running along nicely like
1086760	1088720	a canoe on wet grass.
1088720	1091960	When suddenly, this wristling lump of iron appears saleless and trailing steam in the
1091960	1095040	bay, and these guys carrying long, funny-looking sticks come ashore, and hence you've just
1095040	1096200	been discovered.
1096200	1097720	You're all subject to the emperor now.
1097720	1101160	He's came on presence called tax, and these bright-eyed holy men would like a word with
1101160	1104960	your priests.
1105640	1111960	Obviously, this has a lot to do with sea, so now I'm going to talk about farming.
1111960	1115240	Specifically, I'm going to talk about farming in Europe.
1115240	1116440	In Europe, they did a lot of farming.
1116440	1119000	They got pretty good at it.
1119000	1121840	Then they got really good at building ships.
1121840	1125840	They got on their ships and went out and found that there were other places they could go,
1125840	1130800	and they decided they liked the look of some of those other places, and so they went there.
1130800	1134680	They got there, and they went, right, we're going to farm this place.
1134720	1140680	Good thing there's nobody else here, we'll just do some farming like we did back home,
1140680	1143040	and it didn't work out so well.
1143040	1145080	It's not because the people weren't there.
1145080	1147480	They had been there for a while.
1147480	1149000	You should read this book.
1149000	1152880	It talks about how the indigenous people of Australia had been farming quite happily
1152880	1157520	until white folks showed up, but the trouble is it's kind of almost an inversion of this
1157520	1162360	outside context problem where the outside context doesn't come to the people.
1162360	1167640	The people come to the outside context, and suddenly everything they knew doesn't work anymore.
1171160	1175960	So this is a PDP-11.
1175960	1179800	This is what C was born on.
1179800	1185440	The PDP-11 is a single in-order CPU with a very flat, uncomplicated memory, and when
1185440	1193040	I'm talking single in-order, I mean almost like the ridiculously simplified diagram of
1193040	1198720	a CPU that we get occasionally, like earliest models of PDP-11 didn't even have a clock.
1198720	1203040	When you wanted to read from memory, the CPU would set some address bits, strobe some things,
1203040	1206800	and then the data would come back, and it would move on to the next instruction.
1206800	1209480	And so it's fairly straightforward.
1209480	1211680	It's this very simple lockstep execution thing.
1211680	1214120	There's no cache, there's no memory hierarchy.
1214120	1218000	It's just you read a byte from the memory, and then you might read a byte from an IO
1218000	1221800	device, and then you might add them together, and then you might put them somewhere else.
1221800	1227840	The thing is that time happens, and the PDP-11 begets the Vax, and the Vax influences the
1227840	1232400	8086, and then a whole bunch of stuff happens, and you end up with an AMD64 device.
1232400	1237600	And this isn't an AMD64 device, but this is what a Cortex-A77 looks like inside in a very,
1237600	1240400	very simplified form.
1240400	1245840	You will note that this is not a simple in-order CPU with a flat memory hierarchy.
1245840	1249200	You've got instruction decoders, you've got branch predictors, you've got dispatching
1249200	1254880	things, you've got two words that generally show up through sort of the 90s, a superscaler
1254880	1258320	and pipelined, unless it has both of them in spades.
1258320	1261600	Superscaler refers to the fact that you've got all of these units up the top here that
1261600	1267160	can all do different things at the same time, and then pipelining means that you've got instructions
1267160	1271640	moving at various stages through an execution pipeline at once, and new instructions come
1271640	1274240	into the pipeline as you go through.
1274240	1275960	What does this mean?
1275960	1283160	It means that in order to make C run fast, you have to do things that lie about the underlying
1283160	1286080	execution architecture of what you're actually on.
1286080	1290760	You're not in Europe anymore.
1291000	1298720	This leads to things like specter and meltdown, because suddenly you're lying about the actual
1298720	1302840	state of the machine in order to make it go fast, but the stuff that you're doing still
1302840	1306920	has ripple effects that go through that can be measured, and that can lead to information
1306920	1309720	that you can get.
1309720	1315000	C is not built to handle this, and a whole bunch of the problem is that we are trying
1315000	1320800	to make a system that looks sufficiently like a PDP-11, but is still really fast, and
1320800	1326160	the things that we do to make it fast make it break.
1326160	1331480	There are other things that C is not good at, sorry, let me start that again.
1331480	1334960	There are ways that we could make it better, but they would involve abandoning things that
1334960	1340560	make C, C. For example, doing good vectorization means that you can do some kinds of loops
1340560	1342160	really fast.
1342160	1346400	Fortran is really good at this, because it knows how big its arrays are, and it has some
1346400	1351080	more guarantees about what things are independent from what other things.
1351080	1355720	It can go really fast, which is why Fortran is still used in numerical analysis in ways
1355720	1356840	that C isn't.
1356840	1361200	When you use things like NumPy or Pandas, a lot of the underlying routines that you're
1361200	1365320	using to do that are actually written in Fortran.
1365320	1368880	Another one that causes problems with is structure layout and padding.
1368880	1374240	C has arcane rules about how structures get laid out and padded, and they cause a whole
1374240	1378640	bunch of problems, because you can't then necessarily treat elements in structures as
1378640	1382800	independent variables, which slows things down again.
1382800	1391480	That's even before you get onto all of the other fun of C.
1391480	1398000	The real thing is we're not on a PDP-11 anymore, even as much as we'd like to pretend it.
1399000	1405520	The core point of this is that C, while it was useful at the time, because when you think
1405520	1409040	about what C came out of, you had to have a very limited language set, because it was
1409040	1410800	running on very small computers.
1410800	1416160	It was running on a very simple thing, but we've failed, again, to progress beyond what
1416160	1417160	we could do with that.
1417160	1421600	It's gotten even worse in this case, because we've ended up in this self-reinforcing loop,
1421600	1426360	where we make CPUs that are designed to run C fast, which means we can't change C, because
1426360	1433040	then we might not be able to write code that goes fast on those CPUs, and to change one
1433040	1435200	involves changing the other.
1435200	1437240	But we do have things that do look different now.
1437240	1441680	We have GPUs, we have things with a lot more vector hardware, and we have languages that
1441680	1443680	are evolving to be able to take use of those.
1443680	1444680	Rust is an obvious example.
1444680	1446840	I'm not going to tell everyone to go and switch to Rust.
1446840	1450080	I don't even know if Rust is going to be the long-term solution to this, but I think looking
1450080	1455200	at the language and being willing to make changes to it is an important thing.
1455200	1456960	Before I move on, there are two things you should look up here.
1456960	1461840	I've taken a lot of this stuff from a post called C is not a low-level language, which
1461840	1467160	is well worth a read, and a lot of the stuff on farming and colonialism I got from Sarah
1467160	1473280	Tabor, who is well worth a follow on Twitter, and that's a podcast there.
1473280	1478360	But again, I think there are problems that go even deeper.
1478360	1484960	So half the problem with the Unix philosophy is, what even is it?
1485720	1486720	There are a number of different definitions.
1486720	1487840	I all tend to involve a whole bunch of things.
1487840	1488840	I went and actually looked around.
1488840	1494840	There's this one, which I think is the earliest one I found, so making it easier to write
1494840	1498200	test and run programs, interactive use instead of batch processing, economy and elegance
1498200	1502400	of design due to size constraints, salvation through suffering.
1502400	1507400	That's very Protestant of them, and self-supporting.
1507400	1512960	And then this sort of evolves into we start seeing things that we actually more associate
1512960	1518040	with the Unix philosophy, make each program do one thing well, expect the output of every
1518040	1522200	program to become the input to another, see if you're pipelining, so on and so forth.
1522200	1530800	We have Rob Pike's attempt at making it more complicated, I think.
1530800	1532800	And then this is probably the simplest one that I found.
1532800	1535840	Write programs that do one thing and do it well, write programs to work together, write
1535840	1538280	programs to handle text dreams because that is universal and everything.
1538280	1545760	Notice that none of those says everything as a file.
1545760	1551880	And in general, I mean, from what I, you know, the usual sort of surface sort of interpretation
1551880	1558800	of the Unix philosophy is that you should be able to do this a lot, or maybe that.
1558800	1564840	But the problem with that is that as a newbie, I don't even know what that means.
1564840	1569800	And then I have to learn regular expressions.
1569800	1574040	And the thing is, like, you often see these things when you're trying to do system administration
1574040	1575040	tasks, which is fine.
1575040	1581320	But, you know, if I want to, like, as I do at Ubico, a lot, I have to kill my GPG agent
1581320	1584200	because it just gets confused or in the way.
1584200	1588840	And so, you know, I'm going to run PSAOXWW, I'm going to get some things there, and crap,
1588840	1594120	I got my grep command as well as GPG agent, so I'm going to have to get rid of grep.
1594120	1597080	And now that I've got that, I have to actually get the PID, so I'm going to have to pipe
1597080	1598400	it through orc or something.
1598400	1602160	And at that point, I can actually kill the damn thing.
1602160	1604720	Now I'm on a Mac, though.
1604720	1610560	So I can hit command space and get spotlight and type a few characters and get effectively
1610560	1615800	the same thing and then type some stuff in here and then click a button.
1615800	1619440	It's actually quicker and it's a lot easier to explain to someone than explaining what
1619440	1621240	grep is.
1621240	1627400	And I think the UNIX philosophy in its expression of doing one thing and doing it well and all
1627400	1632080	that kind of stuff is a useful starting point, but it really comes into the interpretation
1632080	1634640	of where you're going with that.
1634640	1638480	And I think the trouble that we get is that people get too locked into it.
1638480	1646720	They get too caught up in the purity of it and don't get, and they're insufficiently pragmatic
1646720	1652480	and end themselves in knots like the USB function FS interface I showed you before.
1652480	1657560	And UNIX is not the only thing to have this kind of a philosophy thing.
1657560	1664360	I mean, the Zen of Python is actually really useful in a bunch of ways, but again, Python
1664360	1668800	like UNIX has a bunch of things that aren't expressed in the Zen of Python that tend to
1668800	1670680	make life difficult for it.
1670680	1675960	Chris gave a talk at PyConAU last year called Fantastic Blocks and Where to Hide Them, where
1675960	1680080	he does talk a bit about Python's philosophical objections to blocks despite the fact that
1680080	1681080	it has them.
1681080	1684880	It just doesn't know what to do with them.
1684880	1689040	And I think that that's, you know, it's again getting locked into a particular mindset without
1689040	1693000	actually sort of interrogating it.
1693000	1700320	So the problem with the UNIX philosophy that I have is that the people who tend to express
1700320	1706960	it the most enthusiastically tend to express it in a way that ends up being almost universally
1706960	1709000	user hostile.
1709000	1712560	All of the things that I like about using computers these days tend to be things that
1712560	1716560	violate the UNIX philosophy of doing one thing and doing it well.
1716560	1721080	Because when you abandon that, you can start to glue things together in ways that make
1721080	1724400	things nice and easy to use and quick.
1724400	1726280	I quite like Mac OS these days.
1726520	1728320	Oh, I've liked it for quite a while.
1728320	1734880	And I should have pasted in the XKCD strip of a chart of my satisfaction with how my
1734880	1740440	life is going versus how long I've had, how long since I've opened Xorg.conf.
1740440	1743560	Because that's the usual argument that I give to people when they ask why is the Mac and
1743560	1747160	not FreeBSD or Linux on my desktop.
1747160	1752560	And again, it comes down to getting blinkered about the way that we think and feeling that
1752560	1757080	there is no other way to think.
1757080	1767880	So to finish up, a lot of this has just been me, you know, ranting.
1767880	1773760	It is a beautiful day at the conference and I am a horrible curmudgeon.
1773760	1777280	But when we get down to it, UNIX suited its time.
1777280	1782120	It was the right operating system for the right people at the right time and then through
1782120	1789640	an accident of bureaucracy, it became the thing that we all use, to some extent, greater
1789640	1791280	or lesser.
1791280	1793880	And that's a wonderful thing.
1793880	1798800	But I worry that it has ended up straightjacketing the way that we think because that time was
1798800	1802520	actually quite a while ago.
1802520	1804760	It still works, which is amazing.
1804760	1811000	But that doesn't mean that its tenets and its way of thought should be sacrosanct.
1811000	1819920	We should feel free to examine every idea and throw them out if we feel that they no
1819920	1822960	longer have value for what we are doing.
1822960	1828640	And that extends beyond things that are purely technical like UNIX.
1828640	1834160	A lot of the ways that our communities got built up over the years, like I remember a
1834160	1836800	time when this was not a dirty word.
1836800	1840400	If it is not a dirty word for you now, it should be.
1840400	1842520	Sexuality is a lie.
1842520	1848440	But I remember back in the mid to late 90s, almost every community that I was a part of
1848440	1851240	would use this as one of their foundational concepts.
1851240	1856800	We don't see gender, we don't see race, we don't see sexuality, we just see the ability
1856800	1858360	that you have for code.
1858360	1864920	But unexamined underneath that was the reason that you only don't see gender or race or
1864920	1870160	sexuality is that your community is full of straight white men.
1870280	1874280	As soon as the people who weren't straight white men either showed up or stopped being
1874280	1878080	anonymous figures on the internet and revealed themselves to not be straight white men, suddenly
1878080	1879720	this became a problem.
1879720	1884480	And so you have to then think about what merit actually means.
1884480	1887600	Are these people not showing merit because they're bad or are they not showing merit
1887600	1894200	because we've set up a systemic structure that stops them from being good or allowing
1894200	1896720	them to be good?
1896760	1904360	And then we try to fix this by bringing in codes of conduct and the howls and the howls.
1904360	1908680	Because why should I have to be shackled to this code of conduct?
1908680	1912960	Because I've always been a good person, I thought.
1912960	1917000	And that's a problem.
1917000	1922840	And then the other problem that I have is that people like to resort to the pithy philosophical
1922840	1923840	thing.
1923960	1928480	The present of Python is great, but it requires interpretation as does the Unix philosophy.
1928480	1932040	And so if anyone comes up to you and tells you that your code of conduct only needs to
1932040	1937240	be excellent to each other, you need to tell them to go away.
1937240	1942400	Because unspoken beneath this is who must be excellent to whom?
1942400	1949640	If I bait you by calling you slurs or something like that until you explode at me in a fit
1949640	1955840	of rage that I have quite rightly earned, have you been excellent to me?
1955840	1959520	And at that point can I run to my governing body and say, oh, they yelled at me, they
1959520	1962160	yelled at me, come out.
1962160	1968760	And conduct and community management requires a lot more sensitivity and a lot more nuance
1968760	1971200	than that.
1971200	1976400	And so in both community and technical sense, it's safe to say that complex problems have
1976400	1981040	simple, easy to understand wrong answers.
1981040	1985760	And that we should understand the past because it's important to know it so you can learn
1985760	1986760	from it.
1986760	1991960	But you can't let it bind the future because that just closes things off.
1991960	1995960	As Sean Brady said in his keynote yesterday, it's important to learn that sometimes you
1995960	2000560	can drop your tools and try and make new ones.
2000560	2001960	And thank you very much.
2006400	2019040	If anyone does want to come and talk to me, feel free to find me out there.
2019040	2021880	I will say though that if you want to lecture me and tell me I'm wrong, you have to buy
2021880	2025080	me a drink first.
2025080	2026080	Thank you very much.
2026080	2029560	We've got a small gift, a token of our appreciation.
2029560	2033960	We do have a few more minutes to go, it's not actually time up yet.
2033960	2037480	So if you do want to have a question, just put your hand up and I'll bring you the microphone.
2037480	2038480	No.
2038480	2039480	No.
2039480	2040480	No.
2040480	2041480	No.
2041480	2042480	No.
2042480	2043480	No.
2043480	2044480	No.
2044480	2045480	No.
2045480	2046480	No.
2046480	2047480	No.
2047480	2048480	No.
2048480	2049480	No.
2049480	2050480	No.
2050480	2051480	No.
2051480	2052480	No.
2052480	2053480	No.
2053480	2054480	No.
2054480	2055480	No.
2055480	2056480	No.
2056480	2057480	No.
2057480	2058480	No.
2058480	2059480	No.
2059480	2060480	No.
2060480	2061480	No.
2061480	2062480	No.
