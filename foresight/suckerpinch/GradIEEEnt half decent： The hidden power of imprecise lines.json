{"text": " Imagine you're my professor. Maybe you actually were my professor, in which case you may already be sweating before I say anymore. The subject matter is neural networks. You draw an illustration on the board with a node's inputs and its outputs via transfer function. You inform us of this mathematical fact that the transfer function cannot be linear, or the whole model would reduce to a linear function. I immediately raise my hand. The speed with which I raise it and the not very subtle forward pose suggests that I want to pluck an abstract idea from the whiteboard and pervert it. You know this look, and you are reluctant to call on me. But no other students are raising their hands. You have no choice. Tom. It's more like a statement than a question. It includes the tone of spoken punctuation that, if it could, ends the entire conversation before it begins. I go on and on about some technicality. That due to approximate math on the computer, this mathematical fact won't be true. You say, okay, technically that's right, but for all practical purposes it doesn't matter. And I say, well, what about impractical purposes? And you, in a moment of weakness, vigorously strangle me. And that's how I died. Murdered in cold blood. That was about 20 years ago, but the world will not let us stop thinking about neural networks. We're really just pressing all the gas pedals at once on this one, heading towards a utopia or a dystopia. Some kind of topia, for sure. We're getting there real fast. So this question has been on my mind for some time. And just to be clear, the professor is right. I might be technically correct here, but it doesn't matter for practical purposes. But I like to work at the intersection of theory and impractice. And so by doing a lot of work, we can make it matter. And then I'll be even more right, both theoretically right, and it will only matter for most practical purposes. So in this video, in its lengthy accompanying technical report, I have an exhaustive exploration of what you can get away with. And I'll see how we can absolutely use linear transfer functions in neural networks and all sorts of other things where they shouldn't be enough. I'm Tom Seven, and this is Impractical Engineering. Okay, let's repeat the professor's lesson so we can understand the nature of the dispute. If you feel like you already know everything about neural networks, this section is safely skippable, but so is the whole video. So fundamentally, a neural network takes in inputs, which are a bunch of numbers, and transforms those numbers, and then outputs some other numbers. In this drawing, I have three inputs and one output. So every one of these circles is going to be filled in with some number as we run the network. So call the inputs x, y, z, and let's just look at how r is computed. That's that middle one. We start with a weighted sum of x, y, and z. So we take all the inputs, we multiply each one by some weight, and add those together. And these weights are determined when we train the network. At this point, they're just constants. When we're running the network, they're just constants. We also learn a bias parameter, which becomes a constant, and that just gets added in as well. The important part for today is this transfer function, tf. This gets applied to the weighted sum, and it transforms it, in this case, with a sigmoid. And the intuition here is somehow that this node r, this neuron r, fires with some probability. That depends on its connection with these other neurons. But because it's a probability, it ranges from zero to one instead of, like, negative infinity to infinity. And so the more the input ones fire, the more likely this one is to fire. That was the classic idea, anyway. These days, pretty much everyone uses the rectified linear transfer function. It's super simple to implement, and for various reasons, it actually works better, especially for the internal layers. And actually, all sorts of functions will work here. It needs to be differentiable because of the way we train these things. But the only other apparently necessary quality is that the function be nonlinear. At least so says the professor. Now, the reason for this is mathematically nice. Let's look at the formula for r again. And let's say the transfer function is linear, so it's like mx plus b2. Then you can multiply m by all these terms, and you get another linear function. So r is a linear function of the inputs, and then so is q, and then so is s. And then o is a linear function of q, r, and s. And what this would mean is that the output would just equal some linear function of the inputs. And all of this complexity of the neural network would just simplify away. We wouldn't need any of the hidden layers. We would just have a function of the input layer. There are lots of functions such as XOR that can't be approximated by linear functions like this. We definitely want our neural networks to be able to model things that are complicated, like XOR or human thought. So the story goes. So that would be true if we were using real math. On a computer, we're going to use IEEE floating point, which isn't associative or distributive. So if we simplify the whole network, we won't actually get the same result. So my goal today will be to create a transfer function that, despite being mathematically linear, will not be computationally linear. And thus, I'll be able to use it to train models that have interesting behavior. Now, my smart math friend Jason, who probably makes the professor sweat even more, reminds me that this is actually an affine function because I add something at the end. That's fine. I'm going to call it linear. He refers to this as high school linear in a pejorative way, and that's fine. I'm comfortable with that. In a lot of ways, I'm mentally still in high school. So this means two operations, addition and multiplication by constants or scaling. Them's the rules. Or equivalently, would it simplify mathematically to a polynomial of at most degree one? So 3x plus 2x all times five, that would simplify. But 2x times x would yield 2x squared, and that's a degree two polynomial. So that's disallowed. Okay? Floating point comes in a number of different spice levels, corresponding to how many bits you're using to represent it. So you may be familiar with double and float. Those are 64 and 32 bits. Half precision is 16 bits, and it gets even lower. It's usually used because then you need half as much memory to store your numbers. That'll be good for us. We'll be happy to save the memory, but the real reason to use half precision is that it is less precise. And imprecision is going to be a desirable quality in this work. Being only 16 bit, there are 65,000 different values that we could represent. So it's clearly not all of the numbers. This is an exponential format, so the main thing to remember about floating point precision is that there's more numbers near zero than elsewhere. So when you get to the largest finite numbers, like 65,504, only multiples of 32 are even representable. Between 2048 and 4096, only even numbers are there. Below that, only integers. And actually, most of the action happens near zero, where you get a lot of fractions. Now this stuff about comparing against epsilon is okay, but it's kind of naive. Like for one thing, what is epsilon supposed to be? If you're working with really small numbers, you can use a really small epsilon. But if you're working with larger numbers, you might need to use an epsilon of up to 32, or maybe half that, for half precision. Actually, a while back, I wrote a paper called What if Anything is Epsilon? Where I looked at what programmers picked in practice for their value of epsilon by going through a whole bunch of code on GitHub. I enjoyed laughing at their bugs, like minus 1e10, which is negative 10 billion. They meant 1e-10, 1 over 10 billion. And I like to compare these by language. For example, I found that JavaScript programmers were the most tolerant of error, which makes sense. They're pretty sloppy. One programmer picked 6 million on purpose, that wasn't a typo. Well, a lot of stuff will be equal if you use a really large epsilon. But anyway, the error you get is not like random. These have a much more useful definition. If I take two numbers and add them using IEEE floating point, the answer is defined to be the real math answer, x plus y, but rounded to the nearest representable floating point number. So if the result is high, I might need to round a lot. If the result is small, I might need to round a small amount. I also might not need to round at all. Like 2 plus 2 is literally equal to 4 exactly in floating point, like you'd want. And we're going to use that kind of thing later. So the most important thing to remember about floating point for this project is, rounding error depends on how far you are out on the number line. Large error for large numbers, small error for small numbers. But it also depends on the specific value. Not everything needs to be rounded. Surrounding is a complicated function, and we're going to abuse that complexity in order to get behavior that we like. Let's look at how we can start abusing the imprecision of floating point numbers. We just have addition and multiplication by constants, so we're going to try both of those. Here's what happens if I add 128 to the input and then subtract 128 back out. Mathematically, of course, this is just the identity function. I get back the input. But because there aren't that many values representable near 128, we can only get back eight different values between 0 and 1. Note that the zigzag is finer in the negative region than in the positive region. If we look at the actual numbers that are representable near 128, we see that we have eighths above 128, but sixteenths below 128. So we get more precision in the negative region. Okay, that's plus. It's definitely not a line, but it's basically just a line. Also, this thing has a terrible derivative. It just has all these flat segments, so the derivative there is 0 and it's undefined at the discontinuities. So it's going to actually be pretty hard to use as a transfer function, but we're going to try it out anyway. Now multiplication looks a lot more subtle. Here I'm multiplying by 100 and then by 1 over 100, which also should give me back just the identity f of x equals x. So if we zoom in on this one, we'll start to see some detail. Actually, maybe that's just my laser printer. Well, that's the problem with using imprecise tools. Maybe we should do this on the computer. Okay, here we are on the computer. And if I zoom in on this line, and I got to zoom in a lot, near zero, it's pretty much perfect. But as we get near one, it gets a lot more jacked. And this is real imprecision, and it depends where you are on the number line. You get different rounding error. This is actually pretty hard to reason about, to be honest. So just suffice to say, when you multiply, you get a little bit of error all throughout the number line, but it depends on where you are. So that's multiplication. Now we can try to put these together in various ways. So I play with this a lot, and I produced a whole bunch of just totally bonkers functions. But actually the best shape that I was able to make came from just using multiplication. And what I do is I multiply by the first number that's smaller than 1. So it's just slightly less than 1. That's 1 minus 1 over 2048. I keep multiplying by that over and over again. And as I do, I accumulate more and more error in different parts of the graph. Of course, I'm also making the number smaller. So at the end, I want to normalize back so that f of 1 is 1. Here's what it looks like if I do that iteratively. Accumulating error. I found that 500 steps was a good stopping point. So this is a function that I call grad1. Grad for the name of this project, which I can't pronounce. Gradient half decent. I triply half gradient descent, you get it. And it has this nice zigzag shape. Importantly, it's kind of smooth. If we zoom in on it, we'll see that it's, you know, putting aside the pixels, that it's piecewise linear. So that's nice. Now you might wonder, why does it get this zigzag shape? And truth be told, round-off error is just kind of hard to reason about. Let me show you two illustrations that are at least nice to look at. In this rainbow, I've given each of the numbers between 0 and 1 a color on the x-axis. And then on the y-axis, I'm successively multiplying by that constant. And you could see that they get exponentially smaller as expected, but not smoothly. And these changes in direction come from different exponents, and we see some of that reflected in the zigzags. On this image, the x-axis is 0 to 1 again. The y-axis is successive multiplication by the constant. But the green pixels is when my round-off is too high compared to the correct result, and magenta when it's too low. This line at the top is at 500 iterations. And you can see how it slices both green and magenta regions. Too high and too low. One more thing, in order to train models with this thing, we need to know it's derivative. And for reasons of implementation tricks that I'm not going to get into, I actually need the derivative in terms of the y-coordinate instead of the x-coordinate. Now, I'm not good enough at math to figure this out analytically. In any way, it would probably just be a table of the values for these different segments. But since it's 16-bit and there's only 65,000 values that are possible, I can just use a computer program to compute the derivative for every point. So here that has plotted along the y-axis. I think it looks pretty cool like an oscilloscope. You'll notice that the derivative isn't a perfect square wave, and it wouldn't be because there are in fact little imperfections in this curve from round-off error. I'm actually applying a low-pass filter here, it would be even noisier. But anyway, now we've got the function and we've got its derivative, so we can do some machine learning. But first, a bonus digression. Here's a bonus digression. Having freed myself from the need to quote-unquote do math in order to differentiate functions, because I'm just going to generate a table programmatically, I can now consider all sorts of exotic transfer functions. I can even betray the central thesis of this work and consider functions that are not linear. One thing I think is really funny is when you use data sort of as the wrong type, you may be familiar with the fast inverse square root technique. I love that one, and I think it's worth considering if a transfer function even needs to use floating point operations in order to be implemented. I tried to find the fastest, simplest thing you could do that might work. My favorite was to treat the float as just 16 bits, shift them down by 2, and then treat that back as a float. For integers, shifting by 2 is just division by 4. But for a floating point number, since there are different fields within the word, this moves bits between fields. So for example, the sine bit gets moved into the exponent, which means you have a much larger exponent for negative numbers than for positive ones. The result will always be positive because we fill with zeros. Dividing the exponent by 4 has a logarithmic effect on the result, and then some of the exponent bits also go into the mantissa. So you get a kind of crazy function that looks like this. The negative values are much larger, as we said, and it logarithmically approaches zero. The positive region is actually a very small upward slope, which you can't see on this graph. But since the exponent will start with two zeros, these tend to be pretty small. This is the full range that's explored by the positive values, and you probably don't care, but here is its computed derivative in terms of the y-coordinate. So in the experiments which are coming up next, I'm going to also compare this transfer function. This wouldn't prove the professor wrong because it uses a forbidden operation, but it is about as fast as you could do anything on a computer. So if it does turn out to work, it might be a half-decent choice. To compare the transfer functions, I tried them out on different machine learning problems. Fortunately, I do have my own bespoke GPU-based system for training neural networks, which has appeared on this channel before in videos such as 30 weird chess algorithms. It's not that good, but it is the kind of thing you want if you're going to do a silly experiment like, what if deep learning, but worse? So I made a bunch of modifications for this project, for example, to do the forward step with half-precision, and to support these tabled transfer functions. Then I trained a network using the same structure and initialization, changing only the transfer function. The first problem is the MNIST digit recognition dataset. The original CAPTCHA, you get 50,000 labeled examples of these tiny digits, and you have to learn to predict the digits 0 through 9, and then there are 10,000 held-out examples to judge your accuracy on. I chose this classic problem partly for trollish reasons, because even at the time of publication decades ago, various techniques had already achieved extremely high accuracy. The networks I trained looked like this. They take in the input pixels, then there's a number of internal layers, and then a dense output layer with one output for each of the 10 digits. You can see the paper, the code for details, if you really want. But one important thing I want to point out for these experiments is that the output layer uses a strict linear transfer function, the identity, for each of the models. It's not a good choice for these categorical problems, but it allows the network to output any value, even if the transfer function, for example, only outputs positive numbers. And since it's linear, it complies with our goal of proving the professor wrong. Throughout the rest of the network, all the internal layers use the transfer function that we're studying. So I trained one of these models with the same initial conditions and the same data, but using a different transfer function. I do that for 200,000 rounds, which takes about a day each. We can then compare the final accuracy and other dimensions, such as their aesthetics. The functions are as follows. We have two classic sigmoids, the hyperbolic tangent and the logistic function. After that, the rectified linear unit. Here I'm using a leaky version where the region below zero actually has a small slope. That seems to work better for me. This function is very popular today. None of those functions are linear, as expected by the professor. Then we have a couple that abuse floating point round off error. First a really simple one. I add 64 and subtract 64. We saw how that discretizes the line. Then the grad one function, which multiplies by a number near one 500 times in order to smoothly magnify the round off error. Then we have our bonus content, downshift two, which manipulates bits directly. Finally, we'll evaluate the identity function, which is what the professor thinks a linear model must be equivalent to. On the MNIST problem, all of the transfer functions do well. As expected, the classics are nearing 100% accuracy. Even a simple linear model using the identity function gets like 82%. Plus 64, which gets a little bit of non-linearity with round off error outperforms it slightly. But the nice smooth grad one function is almost in the same class as the classic functions. It's working quite well. So it seems like our hypothesis is panning out, and I can sense the professor beginning to sweat. The next problem is the SIFAR-10 dataset. This is a lot like MNIST, but instead of recognizing digits, you have to recognize spirit animals. There are 10 spirit animals. Airplanes, cars, birds, cats, deer, dogs, frogs, horses, ships, and trucks. This problem is much harder. With these tiny thumbnails, I sometimes can't figure out what it is. But same idea. Days later, we get results. The ranking here is the same for this problem, and we can draw basically the same conclusion. An accuracy of 53 doesn't sound that good, but keep in mind there are 10 different classes. So if you just guess randomly, that's an accuracy of 10%. So we are substantially learning here. But another way to understand our accuracy is to compare it to what's come before us. These are standardized problems, and so a lot of researchers have posted their results. So I can check the leaderboard and scrolling all the way down to the bottom. I can see that my results are, in fact, the worst result of all time. That's not too bad. Last place is the last winner. Now putting aside the aesthetic and ideological considerations, there is something to this. Recently, I feel like deep learning is getting a little too good, a little too fast. So maybe we could just slow it down a bit. The third problem is, of course, chess. I take millions of positions from a public database, and I ask Stockfish a strong chess engine, which side is winning? There's two classes of results here. One side could have an edge, and it's standard to give this advantage in terms of pawns. Or it could be of the form mate in negative 24, which means that black, because it's negative, has a mate in 24 moves, no matter what white does. Mate is always favorable to a mirror edge, no matter how big your advantage is. One thing that's funny to me about this pawn score is that the advantage can be sort of arbitrarily high if Stockfish can't find a mate. So it can give you more than 64 pawn advantage, which is funny because how are you even going to fit those on the board? Dual wheeled? Actually, here's an exercise for the reader. Find a position with the largest possible advantage according to Stockfish, but where it can't find mate. Here's the best that I could do. Huge advantage for white, but no mate even after depth 89. I mapped these scores into the interval from negative 1 to 1, where negative 1 is the best possible result for black, me and 1, and plus 1 is the same for white. And this gives me a machine learning problem, which is to learn how Stockfish rates each board. For the models that score chess positions, we could compare their predictions directly to Stockfish to understand how accurate they are. And I did that, but I think it's more fun to use these models to create chess players and then have them play against each other. These players just look at each legal move and score the resulting board and then take the move that would be most favorable to their side. So there's no game tree search here. Here are the results of a tournament. The rows are each player as white and the columns as black, and they're ordered by their final ALO rating. There's some complexity here, but the fixed versions are the ones to look at. As usual, the rectified linear unit is performing the best, but our quote-unquote linear transfer function, grad 1, is actually in second place and not far behind. It's close to being as good as Chessmaster for the Nintendo Entertainment System, and outperforms Stockfish deluded with half random moves. This is actually pretty impressive given that it's doing no game tree search, it's just using its intuitions about what boards are good. Of course, raw performance on these problems is not the only thing. We ought to think about the speed of the function, as well as its aesthetics. Some of them have nice shapes, and others look dumb. Since training takes days, where all you have to do is stare at graphs of activations, whether those look cool, or boring, or vaporwave, also bears some consideration. The key finding here is that the professor was wrong. You absolutely can use a linear transfer function, as long as you don't need it to be both good and fast. Defeated. Having gotten my revenge, we could stop there. But when have huge breakthroughs in science and technology ever happened by stopping there? So, it's on to the next level. So far, all the functions we've considered have been monotonic. That's because both plus and multiplication, even when you round, have this property. But we're certainly not limited to this. For example, if x appears multiple times under addition or subtraction, we can get much more interesting functions. Another way to look at this is interference patterns between linear functions are linear. For example, x minus 4,096 minus x plus 4,096 is linear. It's mathematically equal to zero. But in half precision floating point, it produces this square wave function. Now, this function isn't as well behaved as it looks. One of those intervals is width one exactly, but the other is very slightly smaller than one. And again, this has to do with perversities of roundoff error. Or if we take that grad one function that we've studied and subtract x from that, we get this nice triangle wave. By stringing functions together, we can make all sorts of interesting patterns. In fact, if we have any shape in mind, we can try approximating it with one of these functions, subtract it from the desired shape to get a new shape, and as long as we're getting smaller, we can just keep doing this, successively approximating that shape like a Taylor series. So if we could make any shape, let's make a fractal. Those are good shapes. The Mandelbrot set is the radiohead of fractals. Here we're going to use complex numbers, and we use a coordinate system where the x-coordinate is the real part, and the y-coordinate is the imaginary part. For any given point C, we repeatedly square and add, and this point moves around in a crazy way. And based on how quickly it converges or diverges, we give it a color. Boom. 2D Mandelbrot. Now adding C is linear. Squaring, however, is not, but we just said we can approximate any shape using interference patterns. So here's a rough approximation of f of x equals x squared, using only linear operations. So this has some funny business near the origin, but you might think we could use this to plot a kind of perverted Mandelbrot. Unfortunately, if we try, we get this piece of garbage. This stupid blotch sucks. To understand why, we need to look at the definition of squaring for complex numbers. When we multiply this out, the A and the B get mixed together. The real part has some A in it, and because I squared is negative 1, some B in it, and the imaginary part also has some A and some B in it. So we get this cross-pollination, and that means x and y-coordinates are mixed, and you get a kind of weird rotation. But let's look at the purely linear operations on complex numbers. For both plus and scaling, the real parts stay real, and the imaginary parts stay imaginary, with no cross-pollination. So no matter how we use these operations, even with floating-point roundoff, we're not going to get any mixing between the coordinates. And that's why the fractal has these rows and columns of sameness. It's really just two independent functions, one on the x-axis and one on the y-axis. So professors take note, the complex numbers do provide some refuge. It's time for another bonus digression. You might think you could just make a 3D Mandelbrot. Just do the same thing we did before, but with numbers that have three components, a real part and imaginary part and, like, a very imaginary part. If you try it, this old professor of Frobenius will come along and educate you with this cool math fact. No matter what you do, any three-dimensional algebra is equivalent to the real or complex numbers, so it's like you didn't do anything at all, or not associative, meaning the order of operations will matter. But you know what else isn't associative? The floating-point numbers, my dude. So it seems we don't need associativity to make fractals anyway. Enter the baffling numbers, which is an ill-advised generalization of the complex numbers, to three dimensions. Yes, it won't work, but we can just do it. Frobenius can't stop me. And I can use this to make a 3D fractal called the bafflebrot. Here it's sliced in half, showing a perfect ripe Mandelbrot inside. The resulting 2-gigabyte file crashes every piece of software I throw at it. I admire its spirit. Boom, 3D fractal. Bezeked. We don't actually need squaring to create fractals, though. We just need something kind of chaotic. I just take this function, which consists of 36,000 linear operations, and I iterate it, adding C each time, and plot the resulting magnitude. I think it looks pretty nice. I think this is a fractal, in the sense that it is chaotic. It has a color gradient, and could be on the cover of an electronic music album. It is not a fractal, in the sense that if you zoom in on it, you get infinite detail of self-similar shapes. In fact, as we zoom in on it only a modest amount, we see rectangular pixels as we reach the limits of half-precision floating-point. And because this fractal is built by abusing those very limits, it's not even possible to get more detail by increasing the accuracy. Alright, drawing fractals is fun and everything, but it's not really a game you can win. There's no goal other than to make a cool picture. So next, I turn to something with a clearer challenge to overcome. Linear cryptography. Cryptography is fractals minus drugs. You take some data and mess it up, but in a way where you can get it back again if you want. Possibly the most fundamental building block of cryptography is the pseudo-random number generator. This is a function that takes in a state, like a 64-bit integer, and returns a new state that, quote-unquote, looks random. With one of those, you can generate a hash function by mixing it with some input data, or a symmetric block cipher using a Feistel network. So naturally, I want one of these. Now, another thing that professors will tell you is that cryptographic algorithms cannot be linear. Here, linear includes within some modular ring like integers mod 256, the bytes, or mod 2, the bits. So in contrast, even though we said before that XOR can't be modeled by linear function on reels, XOR is considered linear in this context. The reason for that is linear cryptanalysis. If your function is even a little bit linear, then with a large collection of input-output pairs, like messages and their encrypted versions, you can deduce information about secrets like an encryption key. So the standard advice to construct these things is to alternate linear operations like XOR with nonlinear operations like substitution. Substitution is make a table of all the bytes, but permute them randomly, and then just do table lookup. In fact, Bruce Schneier writes in the big red book, substitutions are generally the only nonlinear step in an algorithm. They are what give the block cipher its security. So of course, what we're going to do is prove this adage wrong by developing a good pseudo-random function that only uses linear operations on half-precision floating-point numbers. Now, what does it mean to be good? This is less subjective than fractals, but it is still a little tricky. We don't actually even know if pseudo-random number generators exist. The best results assume that other problems are hard, but we don't have proofs of that either. There's lots of stuff that looks random, but actually isn't, like it hides a backdoor. Never forget that RSA security. Yes, that RSA took a $10 million bribe from the NSA to hide a backdoor in one of their pseudo-random number generators. Practically speaking, though, we can subject the function to a stringent battery of statistical tests, and if it passes all of those, that's a really good start. The function will work on half-precision floating-point numbers in the interval from negative one to one, just like the transfer functions we've been considering so far. Now, this is not a good choice. It's unnecessarily hard, but all of this is unnecessarily hard. Now, I have to work with 64 bits. I could represent each bit as a half, but that makes it too easy. So I'm going to represent it as 8 bytes, each byte represented by a half. To represent a byte as a half, I'll divide the interval from negative one to one into 256 segments, and I'll allow any floating-point value within that interval to represent the corresponding byte. So anything from 124 over 128 to 125 over 128 will represent the number 252. And again, allowing any number here is unnecessarily hard. In the next section, we'll see a much better way to do this that's much faster. But by struggling with this one, we'll at least demonstrate complete mastery over the sort of continuous domain. So this function will take in 8 halves and return 8 halves. And the crux of this function will be this substitution. That's a table lookup where each of the 256 bytes is swapped for another byte, or plotted as a function, each of these discrete intervals is mapped to a different interval. The approach we used in the previous section of fitting functions doesn't work here. We need something more exact. So I study a family of well-behaved functions called choppy functions. To be choppy, the function has to have a few properties. For any value in an interval that represents some integer, the function has to produce the exact same result, and its output has to be the lowest value within some interval. Of course, these functions can only use addition and scaling, and since they're maximally permissive about what they accept and very strict about what they generate, they'll be quite easy to reason about and compose. In fact, we'll be able to think about them as functions from integers to integers. So I went on a hunt for choppy functions. I wish I could tell you that I cracked the code of how to make these from scratch, but I found them by computer search. Here's an example that I can't believe I'm going to write out by hand. This function is mathematically linear. It's actually equal to a constant. The x's cancel out. What this function does is return 1 if the input represents the number 249 or 0 otherwise. So this is a pretty useful choppy function. Since each of these represents a function from a byte to a byte, I can think of it as just a table of the bytes that it produces for each input. It's a little more complicated than this because the outputs are actually from negative 1 to 1, but this is the basic idea. So what I did is I generated a whole bunch of these kinds of functions. And every time I get a new one, or a faster version of an old one, I put it in a database keyed by these integers. I can also take any two of them and get their difference by subtracting them. That'll also be a choppy function. So here's say they only differ in these two components. And so I get 0's everywhere except for those two columns, and this might give me a new choppy function I didn't have before. Observe that if I ever find one that's 0 everywhere except for a single 1, then I can use that to modify the column in any other vector to any value that I want. So these are special, these are basis vectors. So once I've done that, this column is kind of done, and I never need to find new variations of that column. So if I take a large collection of these choppy functions, I can do a process kind of like Gauss Jordan elimination to deduce a set of basis vectors. And if I find a basis vector for every column for every position, then I can just add those up to make any choppy function I want, for example, our substitution. So that's pretty nice, I just need to find these basis vectors. You might think that once you had a single basis vector, you could shift that column around, like to another position, by just calling your function on a shifted version of x. And in real mathematics, that would work. But since these functions are abusing floating point roundoff error, which depends on the specific value of x, this approach will not work. You can do stuff to the output of the function like scale it or add to it, and you can combine functions by taking their interference pattern. But you can't straightforwardly manipulate the input side. This problem is worst near the origin, where the precision is highest. This meant that it was particularly hard to find a choppy function that distinguished negative and non-negative numbers exactly. In essence, the middle two columns of my vectors would always have the same value, and so they wouldn't be independent. I need to find some way to distinguish those two. Going back to our earliest example, if we just add 128 and then subtract 128, we do get different behavior for negative and positive numbers, but if we look at the rounding near zero, a lot of negative values round up, like small positive values round down. And this makes sense. If you add a small negative number to 128, you get 128. So I hunted for the zero threshold function, and there was a lot of manual fiddling with that. But I did eventually find one, and it looks like this. It's pretty involved. One of the key things is to do a whole bunch of multiplications at the beginning, since these will preserve the sign. Spread values away from zero without causing any corruptive rounding until you can do the same old loss of precision techniques to make all the finite values the same on either side. With that zero threshold function solved, I can now create a basis and therefore create any function from a byte to a byte. So back to our pseudo-random number generator. The structure I'm going to use is a classic substitution permutation network. It takes eight bytes in A through H, and I apply the substitution function to each of the eight bytes. Then I rearrange the bits, apply a few more linear operations like modular plus and minus, and then I have a new state as the output. And by iterating this, you create a pseudo-random stream. The substitution function we already talked about. For permuting the bits, each of the output bytes depends on all of the input bytes. So it's not a function of one variable, but I can construct it from functions of one variable. If I look at this first byte in the output, let's call it y, and I can look at the first byte in the input of the permutation that's x. Note that there's just a single bit that it reads. Remember, I can create any function that I want of a single variable, so I construct a function that returns 128 if that bit is set in the input of the y0, and I do a similar thing for all the other bytes, and then I can just add up those results, and they all set different bits, so adding is like logical or. That technique of adding independent things is really useful, and we're going to use it more later. The last piece is modular addition. I have addition, of course, but on bytes it needs to wrap around if the result is greater than 256, or in this case, greater than 1. So if I add two of these values together, I get a result that might be as high as 2, so it looks like this, but I want it to look like this. Once it gets past 1, it should go back to negative 1. Fortunately, I do have a way to test whether the value is greater than a threshold like 1. So modular plus takes in two arguments and adds them together, and that result might be either too low or too high. We'll talk about the case that it's too high. We test whether it's higher than 1 using the 0 threshold function, which returns either 1 or 0, multiply that by 2, and then subtract it away. So that allows us to add this corrective factor and put it back into the right range. Now, I mentioned before that you can't necessarily shift around functions because of loss of precision, but this will actually work for the 0 threshold function. We're going to come back to that in a second, but first I want to evaluate this random number generator to see how good it is. In order to test this thing, I used a pre-existing suite of statistical tests called Big Crush. This is like hundreds of tests that if you do things with the random numbers that should have a correct mathematical result, you in fact get that mathematical result, and not something that's a little biased. It's really hard to pass these tests. You can try it out on some handmade functions if you want. It's pretty good at finding bias. This test needs like 1.6 billion bits of input to do its thing, so I actually ran it on an equivalent C implementation of this function, but I also test that they produce exactly the same result. Even with the C implementation, this takes days to run, but it did, and it passes every single test, so it's reasonable to believe that this function could be the basis of a decent encryption algorithm. Defeated. Now, one downside is that if you run this using the native half-precision implementation, it produces 25.8 bytes a second of randomness, which is very slow. Now, you can produce tables ahead of time so that each of those operations is just a 16-bit table lookup, and then it'll produce 18.5 kilobytes per second, and that's still slow. But if you were trapped on a desert island and all you had were linear floating-point operations, I guess you could do worse than this. Of course, if you're trapped on a desert island, I don't recommend encrypting your messages. This is just not a good way to get rescued. So I said I'd come back to this bit here. We used the zero-threshold function to test if a sum was greater than one so that we could implement modular arithmetic by subtracting off a corrective factor. Once upon a time, I told you you couldn't just shift around the inputs to functions, and this is true in general, but the zero-threshold function, because it operates at zero, which is the most precise region for floating-point, actually does admit this behavior within a certain range. If I have some value in mind, like 0.125, and I want a function that tests whether the input is just greater than or equal to 0.125, that looks like this, and I can do that by just subtracting 0.125 from the input and passing it to the zero-threshold function. And if the input is exactly 0.125, we get back exactly zero. This works for most numbers, but there are some limits. So on the y-axis here, we have different choices of threshold. On the x-axis, we have all of the possible inputs, and this is all of the finite floating-point values. The green region is where we get the right answer. The red region is where it's wrong. The only reason it's ever wrong is that we end up getting an infinite value during that computation. Otherwise, this would all work out. The green region is pretty big. It always works out when the input and the threshold is exactly the same, because then you get zero, and then you're not going to have any infinities. But as they get farther from one another, the value you're testing is larger, and therefore you're more likely to encounter infinities. The highlighted region is everything from negative one to one, which accounts for almost half of the finite numbers. And you can see we've covered pretty much this entire interval. There is this one corner, like a couple numbers that don't work. But it's, I mean, we can do... Okay. Alright, fine. I'll fix it. Alright, now I can sleep soundly. Here's a new version of the zero-threshold function, which works on the entire negative one to one interval. And more than that, in fact, I found this with computer search again, trying to maximize the size of the interval on which it works. And basically it's the same as before, but more careful about intermediate computations so that it doesn't touch infinity by accident. So now that I know that this works for every value in there, I can actually use it to generate literally any function that I want on that interval. The first step is to take this general-purpose greater-than function and turn it into a general-purpose exact equals function. I check whether the input is greater than or equal to the value, but then subtract off a corrective factor. If the input is greater than or equal to the next floating-point number, that's this next after thing. This returns one if the input is exactly v. And then I just make an enormous expression. There's only a finite number of floating-point inputs. So for each one, I test whether it's exactly equal to that, giving zero or one. And I multiply that by the constant value that I want to have at that point, the y-coordinate. Then I sum those all up and it makes any shape that I like. So that's great. Linear functions can do anything. And one thing I don't like about this is how big this expression is. In some sense, that's funny, but it's starting to look like this thing is turn-complete, and I'd like to build a computer to demonstrate, since that's what you do. But I don't know, everything is slow turn-complete these days. So I want to figure out how we could make it a bit more practical, because I like to work at the intersection of theory and impractice and practice. So I consulted my extensive computer science library for performance-enhancing substances. I found a relevant-looking article in the 2018 SIGBOVIC called The Fluent 8 Software Integer Library, by Jim McCann, he sounds smart, and Tom Murphy V. Wait, I already wrote this paper? God damn it. Yeah, this looks familiar. Uh, man. Well, the Fluent 8 library implements unsigned 8-bit integers, using 32-bit floating point. That sounds pretty familiar, but it does make some different design decisions than what we're doing today. One superficial difference is that it uses 32-bit full-precision floating point. That's easy to change. It also uses some nonlinear operations, so we're going to need to fix that. But it's core idea, and the reason it can be much faster, is that each integer is represented by the corresponding floating point integer. And the operations will only work if the input is exactly an integer, and they produce integers as output. So we don't need to worry about numbers that are really close to zero, or negative numbers like we did, when we were working on the entire interval from negative 1 to 1. This allows us to pull some more tricks, and then do things more quickly. So we're going to combine the power of what we've done so far, and Fluent 8, and get Fluent 8. Fluent 8. Fluent 8. Fluent 8. Ah, close enough. This time this stands for half floating linear U and 8, and then we're going to use that to implement a classic computer. So each byte will be represented by a half precision floating point number. And since bytes are integers, we'll represent it by the corresponding floating point number, which is exactly that integer. All 256 of them have exact representations. Let's first look at a helper function that's familiar. This is another threshold function. It requires an integer, but that integer can be as high as 511. 9 bits. If the number is greater than or equal to 256, it returns 1.0, otherwise 0.0. So this is like a threshold 256 function, or a downshift by 8 bits. It uses the same kind of loss of precision tricks we've been using all along, but we can get it done with 4 operations this time, because it only needs to work on 512 different inputs. It's similarly easy to downshift by 1 or 2 or 3 or 4 bits, and we have functions for that as well. And now we can implement modular addition the same way we did before. We just compute the sum natively. Now that could be over 255. But we have a way to test whether it is and compute 1.0 or 0.0. So we multiply that by the constant 256, which gives us either 256 or 0, and we subtract that off so that the result is back in range. Cool. We only did 7 floating point operations here, which is not bad. I'm certainly not going to show you all of the code, but I wanted to give a taste of some of the interesting problems that we need to solve in order to do this efficiently. While addition is already kind of linear except for overflow, bitwise operations like and are not even close. But we can do it pretty cleanly with some of the operations we've already constructed. I'll run this loop exactly 8 times once for each bit, and this will be unrolled by the compiler, so we're not even doing these comparisons. It's as though we wrote this 8 times. Since it's unrolled, we can compute something like a constant 2 to the i at compile time as well. We work bit by bit starting with the lowest order 1. The first thing we do is shift each input down by 1 bit using a function we've already seen. Then we shift it back up. As long as the input is less than 128, which it will be, you can shift up by 1 by just multiplying by 2 or adding it to itself. Now we know the last bit is 0, so if I subtract this from the original argument, I get the lowest order bit of the input, either 1 or 0. So I've extracted the lowest order bit of both args, but I still don't have and even on 1 bit. Multiplying the two bits together would give me the right answer, and multiplication is one of the linear operations. But remember that we only allow multiplication by a constant. For example, if you were to compute x and x, both a bit and b bit would depend on x, and so here you'd have x times x, or x squared, which is not mathematically linear. So we're not going to use multiplication, but we do have a nice trick, which is to add the bits together and then shift down by 1. If we look at the truth table, we see that this only produces a 1 when both of the inputs were 1. I take the resulting bit and multiply it by that round's scale, which is a power of 2, a constant, and then I just add all of those up. Since the components will be 0 everywhere except for that one bit, plus is equivalent to or. Ah, this reminds me of a slip-up in one of my previous videos where I was computing the or function using and and xor and plus. It totally works, but millions of people wrote in to tell me that I could do it with another xor instead of plus, which would have been a little faster. But here plus is the right option. We don't have xor, it's not linear. I was just, like, foreshadowing this, getting you ready. Defeated. Anywho, that's all we need for bitwise and. It's a little involved, but it's a far cry from the 9,000 operations we did before just to test if a value is greater than 0. A spreckin of which we can now quickly test whether a value is exactly 0. We do this by negating the bits, subtracting from 255. Then we add one, and that'll only overflow if the original value was 0. With that, testing whether two values are equal is just a matter of subtracting them and then seeing whether the result is 0. And that's how it goes. That's how it always goes. You build up some constructs, and you use those to make some more. You gain more and more power until you have all of the things you want. There are some good puzzles in here, and you may enjoy trying to work some of these out yourself. And you may improve upon them, and please tell me if you do. For example, on screen I'm showing you a straightforward way to do if, but if you check my code, I do a thing that's way more mysterious and fancy in order to squeeze the last bits of performance out of it. And I am going to care about performance for this application. The last time I made a computer out of floating point numbers, which did happen before, this computer was focused on beauty with no concessions to practicality. Frankly, the computer was sort of boring to use because it had no I.O. and it didn't do anything you could observe. So this time I want to do the opposite. I'm willing to make some concessions on beauty as long as the result is entertaining. Now the most entertaining computer is the Nintendo Entertainment System. And so this is a natural choice. After all, I like to work at the intersection of theory and impractice and practice and entertainment. The Nintendo Entertainment System consists of a basically reasonable computer and a bunch of other weird stuff for entertainment purposes only. The core of the computer is an 8-bit microprocessor that's more or less the Motorola 6502. And that other stuff includes video and audio hardware and the controllers and the game cartridge, which itself might include hardware and stuff like that. My goal is to replace that 8-bit microprocessor with something that only runs linear floating point operations. So I'm not going to implement any of the weird stuff. And that's good because I'm going to do this in a software emulator, which is my own hacked up copy of FCE Ultra, and this emulator is so complicated. But the code that emulates the processor is basically tractable. The processor state consists of a small number of 8-bit registers, each of which will represent with a fluent 8. There's also a 16-bit program counter. We'll only need a few 16-bit operations, and it's quite easy to build 16-bit integers using two 8-bit integers. So I won't say any more about that. And at a high level, the processor is just a loop. It reads one byte from memory at the program counter, which tells it which of the 256 instructions it's going to run next. It runs that instruction, which updates the state like the registers in the program counter, and then starts the loop again. Of course, there are copious details here. First, let's look at a simple instruction so you can kind of see how it goes. A really simple instruction is tax. And speaking of tax, I'll have you know that video editing is so tedious that while making this video, I actually procrastinated it by doing my taxes. Anyway, TAX on the 6502 transfers the value from the register A to the register X. There are still several steps, though. After we copy it over, we need to update the negative and zero bits of the processor flags and increment the program counter. But this code is actually quite nice because we've already done all the work of implementing 8-bit integers. It makes use of bitwise AND and is zero and shifting and so on. If all the instructions were like that, this thing would be really simple. So let's look at a harder instruction. This is a branching instruction, branch on conditions set. It modifies the program counter to basically do a jump if one of the processor flags is set. Otherwise, it just advances to the next instruction. First problem we'll see is that there's a branch in the implementation of the processor, which is not linear. That's this if else. But we do have a fluent 8 version of if. So we can change this to update the program counter, but to a value that depends on the condition. That'll look like this. But the other problem is this memory access. Now the Nintendo has a main memory of 2 kilobytes, and we could create 2,000 fluent 8s and implement this array subscript. That's not really the problem. The problem is that accessing memory has side effects. So in the previous version of this code where an if wasn't executed, we wouldn't have accessed the memory. This is sort of obvious for memory writes because writing changes memory. Less obvious is that writes and reads often have side effects because of memory mapped IO. For example, writing 2 bytes to 2006 will load them as an address into the PPU, that's one of those weird things. And then writes that happen to 2007 will pass through to video memory at that address. Or writing to 4014 will start a DMA that transfers 256 bytes to video memory and stalls the processor for 512 cycles. So these are not small things. And worse, there isn't even a small set of them because lots of cartridges have hardware inside them that does arbitrary stuff on reads and writes. And weirdos are making new weird cartridges all the time. And so here we have the main concession. The emulator API for this chip offers a conditional read and write. These take the address, but also a condition. If the condition is true, you do what you'd expect. But if it's false, nothing happens and an arbitrary value is returned. Of course, this isn't linear, but it's not really that unrealistic if we were making a processor. We would just wire this through to the memory controller, which would then ignore the read or write if the bit isn't set. The real 6502, for example, has a pin that indicates whether it's doing a read or a write. But I accept your criticism. Feel free to defeat me by doing without this. Another challenge is that the 6502 has a load of undocumented and really weird instructions. And this wouldn't be so bad except that the emulator source code I'm working from is extremely hard to understand. It's filled with all sorts of macro hacks that assume specific variable names, references to mysterious global variables like temp and foo, pirate jokes, feuds between developers commenting out each other's wrong code, and so on. And unfortunately, I don't have any Nintendo games that actually execute many of these instructions. So in the course of development, I made my own cartridge that executes a whole bunch of undocumented instructions when it starts up. It displays the results of those on the screen so that I can test whether my implementation matches the reference. This cartridge might be the world's most boring Nintendo game, even more boring than Wall Street Kid. Here's what that game looks like. You can't win it or even play it. It exists only to destroy your mind. The last puzzle to solve is instruction dispatch. When we read the instruction byte, we look at it and decide which instruction to execute. The natural way to implement this is with a switch statement and a case for each instruction. But that of course is not linear. We can't do any branching of control flow. We have to execute the same series of additions and multiplications each time. So what I'll do is execute every single instruction every time. Now I only want the right instruction to do anything. So the first thing I do is make 256 copies of the CPU state, basically the registers. That's a finite number of variables. I also have an active flag for each one of those. And exactly one of those active flags will be set to one for the correct instruction. Then I run all of the instructions on their own copies of the CPU state. If I do any conditional reads or write, I include the active flag in the condition. So only the correct effects will happen. So then I have the resulting 256 states and I need to copy the one from the correct instruction back into the main state. The way to do this is to zero them all out except for the active one. And we can do that with if and then just sum them all up. They'll all be zero except for the correct one, so we'll get the right answer. Now it's kind of annoying to run every instruction on every tick of the CPU. And this technique is the main reason that it's not going to be that fast. But it is completely linear. Another upside is that each instruction is completely independent. So they can actually be run in parallel. So let's start up the benchmark. Super Mario Brothers. Here it's splitting the instructions across eight cores running in parallel. If not for that instruction dispatch, this thing would run at playable frame rates. But, and yes, it is already running. The cost of not cheating is that it runs pretty slow. The hardware Nintendo runs at 60 frames per second. And the emulator free to run non-linear instructions gets 3,500 frames per second. But the linear version, and I did do a lot of optimization, gets 0.11 frames per second or 8.6 seconds per frame. Which ain't fast. Maybe you could help me out by putting this video in 2x speed. I will say, though, in comparison that I have played AAA titles that at launch, inexplicably, on high-end hardware had comparable frame rates. And they were no doubt executing a great many non-linear instructions. Speed aside, we now have a general-purpose computer, which renders everything we've done up until this point moot. If we want a non-linear transfer function, we can just implement the hyperbolic tangent. If we want fractals, we can just write code that draws the Mandelbrot set on the Nintendo. We can just write a good encryption algorithm like AES. We can have a chess engine with search. In fact, we already have one. Chessmaster for the NES was included in our tournament already. And by running it on our linear emulator, we have a linear model. So it seems I defeated even myself. And I can finally be done with this damn thing. Alright, so what have we learned today? It's the same thing we learned every time. Complexity is everywhere, even with something as simple as plus and multiplication by constants, which mathematically can only create lines. Given a tiny foothold by way of rounding error, we can bend them to our will and make them do anything. And I think this is the same story of computer science. Complexity from simplicity, and maybe even of the universe. So don't underestimate simple things put together. Anyway, if you made it this far, thank you for watching. Thank you for your attention. And if you didn't make it this far, I don't even know what we're talking about. I'm sure I'll be back soon with more stupid stuff. In any case, I've been Tom7, and this was Impractical Engineering. See you soon.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 2.0, "text": " Imagine you're my professor.", "tokens": [50364, 11739, 291, 434, 452, 8304, 13, 50464], "temperature": 0.0, "avg_logprob": -0.12098216202299474, "compression_ratio": 1.726027397260274, "no_speech_prob": 0.023314744234085083}, {"id": 1, "seek": 0, "start": 2.0, "end": 4.0, "text": " Maybe you actually were my professor,", "tokens": [50464, 2704, 291, 767, 645, 452, 8304, 11, 50564], "temperature": 0.0, "avg_logprob": -0.12098216202299474, "compression_ratio": 1.726027397260274, "no_speech_prob": 0.023314744234085083}, {"id": 2, "seek": 0, "start": 4.0, "end": 8.0, "text": " in which case you may already be sweating before I say anymore.", "tokens": [50564, 294, 597, 1389, 291, 815, 1217, 312, 25438, 949, 286, 584, 3602, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12098216202299474, "compression_ratio": 1.726027397260274, "no_speech_prob": 0.023314744234085083}, {"id": 3, "seek": 0, "start": 8.0, "end": 10.0, "text": " The subject matter is neural networks.", "tokens": [50764, 440, 3983, 1871, 307, 18161, 9590, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12098216202299474, "compression_ratio": 1.726027397260274, "no_speech_prob": 0.023314744234085083}, {"id": 4, "seek": 0, "start": 10.0, "end": 15.0, "text": " You draw an illustration on the board with a node's inputs and its outputs via transfer function.", "tokens": [50864, 509, 2642, 364, 22645, 322, 264, 3150, 365, 257, 9984, 311, 15743, 293, 1080, 23930, 5766, 5003, 2445, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12098216202299474, "compression_ratio": 1.726027397260274, "no_speech_prob": 0.023314744234085083}, {"id": 5, "seek": 0, "start": 15.0, "end": 19.0, "text": " You inform us of this mathematical fact that the transfer function cannot be linear,", "tokens": [51114, 509, 1356, 505, 295, 341, 18894, 1186, 300, 264, 5003, 2445, 2644, 312, 8213, 11, 51314], "temperature": 0.0, "avg_logprob": -0.12098216202299474, "compression_ratio": 1.726027397260274, "no_speech_prob": 0.023314744234085083}, {"id": 6, "seek": 0, "start": 19.0, "end": 24.0, "text": " or the whole model would reduce to a linear function.", "tokens": [51314, 420, 264, 1379, 2316, 576, 5407, 281, 257, 8213, 2445, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12098216202299474, "compression_ratio": 1.726027397260274, "no_speech_prob": 0.023314744234085083}, {"id": 7, "seek": 0, "start": 24.0, "end": 26.0, "text": " I immediately raise my hand.", "tokens": [51564, 286, 4258, 5300, 452, 1011, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12098216202299474, "compression_ratio": 1.726027397260274, "no_speech_prob": 0.023314744234085083}, {"id": 8, "seek": 0, "start": 26.0, "end": 29.0, "text": " The speed with which I raise it and the not very subtle forward pose", "tokens": [51664, 440, 3073, 365, 597, 286, 5300, 309, 293, 264, 406, 588, 13743, 2128, 10774, 51814], "temperature": 0.0, "avg_logprob": -0.12098216202299474, "compression_ratio": 1.726027397260274, "no_speech_prob": 0.023314744234085083}, {"id": 9, "seek": 2900, "start": 29.0, "end": 33.0, "text": " suggests that I want to pluck an abstract idea from the whiteboard and pervert it.", "tokens": [50364, 13409, 300, 286, 528, 281, 41514, 364, 12649, 1558, 490, 264, 2418, 3787, 293, 680, 3281, 309, 13, 50564], "temperature": 0.0, "avg_logprob": -0.053310235341389976, "compression_ratio": 1.6430976430976432, "no_speech_prob": 0.0015485886251553893}, {"id": 10, "seek": 2900, "start": 33.0, "end": 36.0, "text": " You know this look, and you are reluctant to call on me.", "tokens": [50564, 509, 458, 341, 574, 11, 293, 291, 366, 33677, 281, 818, 322, 385, 13, 50714], "temperature": 0.0, "avg_logprob": -0.053310235341389976, "compression_ratio": 1.6430976430976432, "no_speech_prob": 0.0015485886251553893}, {"id": 11, "seek": 2900, "start": 36.0, "end": 38.0, "text": " But no other students are raising their hands.", "tokens": [50714, 583, 572, 661, 1731, 366, 11225, 641, 2377, 13, 50814], "temperature": 0.0, "avg_logprob": -0.053310235341389976, "compression_ratio": 1.6430976430976432, "no_speech_prob": 0.0015485886251553893}, {"id": 12, "seek": 2900, "start": 38.0, "end": 40.0, "text": " You have no choice.", "tokens": [50814, 509, 362, 572, 3922, 13, 50914], "temperature": 0.0, "avg_logprob": -0.053310235341389976, "compression_ratio": 1.6430976430976432, "no_speech_prob": 0.0015485886251553893}, {"id": 13, "seek": 2900, "start": 40.0, "end": 41.0, "text": " Tom.", "tokens": [50914, 5041, 13, 50964], "temperature": 0.0, "avg_logprob": -0.053310235341389976, "compression_ratio": 1.6430976430976432, "no_speech_prob": 0.0015485886251553893}, {"id": 14, "seek": 2900, "start": 41.0, "end": 43.0, "text": " It's more like a statement than a question.", "tokens": [50964, 467, 311, 544, 411, 257, 5629, 813, 257, 1168, 13, 51064], "temperature": 0.0, "avg_logprob": -0.053310235341389976, "compression_ratio": 1.6430976430976432, "no_speech_prob": 0.0015485886251553893}, {"id": 15, "seek": 2900, "start": 43.0, "end": 46.0, "text": " It includes the tone of spoken punctuation that, if it could,", "tokens": [51064, 467, 5974, 264, 8027, 295, 10759, 27006, 16073, 300, 11, 498, 309, 727, 11, 51214], "temperature": 0.0, "avg_logprob": -0.053310235341389976, "compression_ratio": 1.6430976430976432, "no_speech_prob": 0.0015485886251553893}, {"id": 16, "seek": 2900, "start": 46.0, "end": 49.0, "text": " ends the entire conversation before it begins.", "tokens": [51214, 5314, 264, 2302, 3761, 949, 309, 7338, 13, 51364], "temperature": 0.0, "avg_logprob": -0.053310235341389976, "compression_ratio": 1.6430976430976432, "no_speech_prob": 0.0015485886251553893}, {"id": 17, "seek": 2900, "start": 49.0, "end": 52.0, "text": " I go on and on about some technicality.", "tokens": [51364, 286, 352, 322, 293, 322, 466, 512, 6191, 507, 13, 51514], "temperature": 0.0, "avg_logprob": -0.053310235341389976, "compression_ratio": 1.6430976430976432, "no_speech_prob": 0.0015485886251553893}, {"id": 18, "seek": 2900, "start": 52.0, "end": 56.0, "text": " That due to approximate math on the computer, this mathematical fact won't be true.", "tokens": [51514, 663, 3462, 281, 30874, 5221, 322, 264, 3820, 11, 341, 18894, 1186, 1582, 380, 312, 2074, 13, 51714], "temperature": 0.0, "avg_logprob": -0.053310235341389976, "compression_ratio": 1.6430976430976432, "no_speech_prob": 0.0015485886251553893}, {"id": 19, "seek": 5600, "start": 56.0, "end": 61.0, "text": " You say, okay, technically that's right, but for all practical purposes it doesn't matter.", "tokens": [50364, 509, 584, 11, 1392, 11, 12120, 300, 311, 558, 11, 457, 337, 439, 8496, 9932, 309, 1177, 380, 1871, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08378738403320313, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.006485143210738897}, {"id": 20, "seek": 5600, "start": 61.0, "end": 65.0, "text": " And I say, well, what about impractical purposes?", "tokens": [50614, 400, 286, 584, 11, 731, 11, 437, 466, 704, 1897, 804, 9932, 30, 50814], "temperature": 0.0, "avg_logprob": -0.08378738403320313, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.006485143210738897}, {"id": 21, "seek": 5600, "start": 65.0, "end": 69.0, "text": " And you, in a moment of weakness, vigorously strangle me.", "tokens": [50814, 400, 291, 11, 294, 257, 1623, 295, 12772, 11, 42396, 5098, 1056, 7846, 385, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08378738403320313, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.006485143210738897}, {"id": 22, "seek": 5600, "start": 69.0, "end": 71.0, "text": " And that's how I died.", "tokens": [51014, 400, 300, 311, 577, 286, 4539, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08378738403320313, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.006485143210738897}, {"id": 23, "seek": 5600, "start": 71.0, "end": 74.0, "text": " Murdered in cold blood.", "tokens": [51114, 44370, 292, 294, 3554, 3390, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08378738403320313, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.006485143210738897}, {"id": 24, "seek": 5600, "start": 74.0, "end": 79.0, "text": " That was about 20 years ago, but the world will not let us stop thinking about neural networks.", "tokens": [51264, 663, 390, 466, 945, 924, 2057, 11, 457, 264, 1002, 486, 406, 718, 505, 1590, 1953, 466, 18161, 9590, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08378738403320313, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.006485143210738897}, {"id": 25, "seek": 5600, "start": 79.0, "end": 82.0, "text": " We're really just pressing all the gas pedals at once on this one,", "tokens": [51514, 492, 434, 534, 445, 12417, 439, 264, 4211, 35217, 412, 1564, 322, 341, 472, 11, 51664], "temperature": 0.0, "avg_logprob": -0.08378738403320313, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.006485143210738897}, {"id": 26, "seek": 5600, "start": 82.0, "end": 85.0, "text": " heading towards a utopia or a dystopia.", "tokens": [51664, 9864, 3030, 257, 2839, 22376, 420, 257, 14584, 13559, 654, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08378738403320313, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.006485143210738897}, {"id": 27, "seek": 8500, "start": 85.0, "end": 88.0, "text": " Some kind of topia, for sure. We're getting there real fast.", "tokens": [50364, 2188, 733, 295, 1192, 654, 11, 337, 988, 13, 492, 434, 1242, 456, 957, 2370, 13, 50514], "temperature": 0.0, "avg_logprob": -0.056565373284476146, "compression_ratio": 1.749185667752443, "no_speech_prob": 0.007574255112558603}, {"id": 28, "seek": 8500, "start": 88.0, "end": 90.0, "text": " So this question has been on my mind for some time.", "tokens": [50514, 407, 341, 1168, 575, 668, 322, 452, 1575, 337, 512, 565, 13, 50614], "temperature": 0.0, "avg_logprob": -0.056565373284476146, "compression_ratio": 1.749185667752443, "no_speech_prob": 0.007574255112558603}, {"id": 29, "seek": 8500, "start": 90.0, "end": 92.0, "text": " And just to be clear, the professor is right.", "tokens": [50614, 400, 445, 281, 312, 1850, 11, 264, 8304, 307, 558, 13, 50714], "temperature": 0.0, "avg_logprob": -0.056565373284476146, "compression_ratio": 1.749185667752443, "no_speech_prob": 0.007574255112558603}, {"id": 30, "seek": 8500, "start": 92.0, "end": 96.0, "text": " I might be technically correct here, but it doesn't matter for practical purposes.", "tokens": [50714, 286, 1062, 312, 12120, 3006, 510, 11, 457, 309, 1177, 380, 1871, 337, 8496, 9932, 13, 50914], "temperature": 0.0, "avg_logprob": -0.056565373284476146, "compression_ratio": 1.749185667752443, "no_speech_prob": 0.007574255112558603}, {"id": 31, "seek": 8500, "start": 96.0, "end": 100.0, "text": " But I like to work at the intersection of theory and impractice.", "tokens": [50914, 583, 286, 411, 281, 589, 412, 264, 15236, 295, 5261, 293, 704, 1897, 573, 13, 51114], "temperature": 0.0, "avg_logprob": -0.056565373284476146, "compression_ratio": 1.749185667752443, "no_speech_prob": 0.007574255112558603}, {"id": 32, "seek": 8500, "start": 100.0, "end": 103.0, "text": " And so by doing a lot of work, we can make it matter.", "tokens": [51114, 400, 370, 538, 884, 257, 688, 295, 589, 11, 321, 393, 652, 309, 1871, 13, 51264], "temperature": 0.0, "avg_logprob": -0.056565373284476146, "compression_ratio": 1.749185667752443, "no_speech_prob": 0.007574255112558603}, {"id": 33, "seek": 8500, "start": 103.0, "end": 106.0, "text": " And then I'll be even more right, both theoretically right,", "tokens": [51264, 400, 550, 286, 603, 312, 754, 544, 558, 11, 1293, 29400, 558, 11, 51414], "temperature": 0.0, "avg_logprob": -0.056565373284476146, "compression_ratio": 1.749185667752443, "no_speech_prob": 0.007574255112558603}, {"id": 34, "seek": 8500, "start": 106.0, "end": 109.0, "text": " and it will only matter for most practical purposes.", "tokens": [51414, 293, 309, 486, 787, 1871, 337, 881, 8496, 9932, 13, 51564], "temperature": 0.0, "avg_logprob": -0.056565373284476146, "compression_ratio": 1.749185667752443, "no_speech_prob": 0.007574255112558603}, {"id": 35, "seek": 8500, "start": 109.0, "end": 112.0, "text": " So in this video, in its lengthy accompanying technical report,", "tokens": [51564, 407, 294, 341, 960, 11, 294, 1080, 35374, 43648, 6191, 2275, 11, 51714], "temperature": 0.0, "avg_logprob": -0.056565373284476146, "compression_ratio": 1.749185667752443, "no_speech_prob": 0.007574255112558603}, {"id": 36, "seek": 11200, "start": 112.0, "end": 116.0, "text": " I have an exhaustive exploration of what you can get away with.", "tokens": [50364, 286, 362, 364, 14687, 488, 16197, 295, 437, 291, 393, 483, 1314, 365, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07009077072143555, "compression_ratio": 1.6529411764705881, "no_speech_prob": 0.038438741117715836}, {"id": 37, "seek": 11200, "start": 116.0, "end": 120.0, "text": " And I'll see how we can absolutely use linear transfer functions in neural networks", "tokens": [50564, 400, 286, 603, 536, 577, 321, 393, 3122, 764, 8213, 5003, 6828, 294, 18161, 9590, 50764], "temperature": 0.0, "avg_logprob": -0.07009077072143555, "compression_ratio": 1.6529411764705881, "no_speech_prob": 0.038438741117715836}, {"id": 38, "seek": 11200, "start": 120.0, "end": 123.0, "text": " and all sorts of other things where they shouldn't be enough.", "tokens": [50764, 293, 439, 7527, 295, 661, 721, 689, 436, 4659, 380, 312, 1547, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07009077072143555, "compression_ratio": 1.6529411764705881, "no_speech_prob": 0.038438741117715836}, {"id": 39, "seek": 11200, "start": 123.0, "end": 126.0, "text": " I'm Tom Seven, and this is Impractical Engineering.", "tokens": [50914, 286, 478, 5041, 14868, 11, 293, 341, 307, 4331, 42559, 804, 16215, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07009077072143555, "compression_ratio": 1.6529411764705881, "no_speech_prob": 0.038438741117715836}, {"id": 40, "seek": 11200, "start": 126.0, "end": 130.0, "text": " Okay, let's repeat the professor's lesson so we can understand the nature of the dispute.", "tokens": [51064, 1033, 11, 718, 311, 7149, 264, 8304, 311, 6898, 370, 321, 393, 1223, 264, 3687, 295, 264, 25379, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07009077072143555, "compression_ratio": 1.6529411764705881, "no_speech_prob": 0.038438741117715836}, {"id": 41, "seek": 11200, "start": 130.0, "end": 133.0, "text": " If you feel like you already know everything about neural networks,", "tokens": [51264, 759, 291, 841, 411, 291, 1217, 458, 1203, 466, 18161, 9590, 11, 51414], "temperature": 0.0, "avg_logprob": -0.07009077072143555, "compression_ratio": 1.6529411764705881, "no_speech_prob": 0.038438741117715836}, {"id": 42, "seek": 11200, "start": 133.0, "end": 136.0, "text": " this section is safely skippable, but so is the whole video.", "tokens": [51414, 341, 3541, 307, 11750, 1110, 2488, 712, 11, 457, 370, 307, 264, 1379, 960, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07009077072143555, "compression_ratio": 1.6529411764705881, "no_speech_prob": 0.038438741117715836}, {"id": 43, "seek": 11200, "start": 136.0, "end": 141.0, "text": " So fundamentally, a neural network takes in inputs, which are a bunch of numbers,", "tokens": [51564, 407, 17879, 11, 257, 18161, 3209, 2516, 294, 15743, 11, 597, 366, 257, 3840, 295, 3547, 11, 51814], "temperature": 0.0, "avg_logprob": -0.07009077072143555, "compression_ratio": 1.6529411764705881, "no_speech_prob": 0.038438741117715836}, {"id": 44, "seek": 14100, "start": 141.0, "end": 145.0, "text": " and transforms those numbers, and then outputs some other numbers.", "tokens": [50364, 293, 35592, 729, 3547, 11, 293, 550, 23930, 512, 661, 3547, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06268011728922526, "compression_ratio": 1.7703180212014133, "no_speech_prob": 0.006902608554810286}, {"id": 45, "seek": 14100, "start": 145.0, "end": 148.0, "text": " In this drawing, I have three inputs and one output.", "tokens": [50564, 682, 341, 6316, 11, 286, 362, 1045, 15743, 293, 472, 5598, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06268011728922526, "compression_ratio": 1.7703180212014133, "no_speech_prob": 0.006902608554810286}, {"id": 46, "seek": 14100, "start": 148.0, "end": 153.0, "text": " So every one of these circles is going to be filled in with some number as we run the network.", "tokens": [50714, 407, 633, 472, 295, 613, 13040, 307, 516, 281, 312, 6412, 294, 365, 512, 1230, 382, 321, 1190, 264, 3209, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06268011728922526, "compression_ratio": 1.7703180212014133, "no_speech_prob": 0.006902608554810286}, {"id": 47, "seek": 14100, "start": 153.0, "end": 157.0, "text": " So call the inputs x, y, z, and let's just look at how r is computed.", "tokens": [50964, 407, 818, 264, 15743, 2031, 11, 288, 11, 710, 11, 293, 718, 311, 445, 574, 412, 577, 367, 307, 40610, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06268011728922526, "compression_ratio": 1.7703180212014133, "no_speech_prob": 0.006902608554810286}, {"id": 48, "seek": 14100, "start": 157.0, "end": 158.0, "text": " That's that middle one.", "tokens": [51164, 663, 311, 300, 2808, 472, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06268011728922526, "compression_ratio": 1.7703180212014133, "no_speech_prob": 0.006902608554810286}, {"id": 49, "seek": 14100, "start": 158.0, "end": 161.0, "text": " We start with a weighted sum of x, y, and z.", "tokens": [51214, 492, 722, 365, 257, 32807, 2408, 295, 2031, 11, 288, 11, 293, 710, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06268011728922526, "compression_ratio": 1.7703180212014133, "no_speech_prob": 0.006902608554810286}, {"id": 50, "seek": 14100, "start": 161.0, "end": 165.0, "text": " So we take all the inputs, we multiply each one by some weight, and add those together.", "tokens": [51364, 407, 321, 747, 439, 264, 15743, 11, 321, 12972, 1184, 472, 538, 512, 3364, 11, 293, 909, 729, 1214, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06268011728922526, "compression_ratio": 1.7703180212014133, "no_speech_prob": 0.006902608554810286}, {"id": 51, "seek": 14100, "start": 165.0, "end": 168.0, "text": " And these weights are determined when we train the network.", "tokens": [51564, 400, 613, 17443, 366, 9540, 562, 321, 3847, 264, 3209, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06268011728922526, "compression_ratio": 1.7703180212014133, "no_speech_prob": 0.006902608554810286}, {"id": 52, "seek": 16800, "start": 168.0, "end": 169.0, "text": " At this point, they're just constants.", "tokens": [50364, 1711, 341, 935, 11, 436, 434, 445, 35870, 13, 50414], "temperature": 0.0, "avg_logprob": -0.06787339339019559, "compression_ratio": 1.7864077669902914, "no_speech_prob": 0.009124902077019215}, {"id": 53, "seek": 16800, "start": 169.0, "end": 171.0, "text": " When we're running the network, they're just constants.", "tokens": [50414, 1133, 321, 434, 2614, 264, 3209, 11, 436, 434, 445, 35870, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06787339339019559, "compression_ratio": 1.7864077669902914, "no_speech_prob": 0.009124902077019215}, {"id": 54, "seek": 16800, "start": 171.0, "end": 175.0, "text": " We also learn a bias parameter, which becomes a constant, and that just gets added in as well.", "tokens": [50514, 492, 611, 1466, 257, 12577, 13075, 11, 597, 3643, 257, 5754, 11, 293, 300, 445, 2170, 3869, 294, 382, 731, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06787339339019559, "compression_ratio": 1.7864077669902914, "no_speech_prob": 0.009124902077019215}, {"id": 55, "seek": 16800, "start": 175.0, "end": 178.0, "text": " The important part for today is this transfer function, tf.", "tokens": [50714, 440, 1021, 644, 337, 965, 307, 341, 5003, 2445, 11, 256, 69, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06787339339019559, "compression_ratio": 1.7864077669902914, "no_speech_prob": 0.009124902077019215}, {"id": 56, "seek": 16800, "start": 178.0, "end": 183.0, "text": " This gets applied to the weighted sum, and it transforms it, in this case, with a sigmoid.", "tokens": [50864, 639, 2170, 6456, 281, 264, 32807, 2408, 11, 293, 309, 35592, 309, 11, 294, 341, 1389, 11, 365, 257, 4556, 3280, 327, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06787339339019559, "compression_ratio": 1.7864077669902914, "no_speech_prob": 0.009124902077019215}, {"id": 57, "seek": 16800, "start": 183.0, "end": 188.0, "text": " And the intuition here is somehow that this node r, this neuron r,", "tokens": [51114, 400, 264, 24002, 510, 307, 6063, 300, 341, 9984, 367, 11, 341, 34090, 367, 11, 51364], "temperature": 0.0, "avg_logprob": -0.06787339339019559, "compression_ratio": 1.7864077669902914, "no_speech_prob": 0.009124902077019215}, {"id": 58, "seek": 16800, "start": 188.0, "end": 190.0, "text": " fires with some probability.", "tokens": [51364, 15044, 365, 512, 8482, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06787339339019559, "compression_ratio": 1.7864077669902914, "no_speech_prob": 0.009124902077019215}, {"id": 59, "seek": 16800, "start": 190.0, "end": 192.0, "text": " That depends on its connection with these other neurons.", "tokens": [51464, 663, 5946, 322, 1080, 4984, 365, 613, 661, 22027, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06787339339019559, "compression_ratio": 1.7864077669902914, "no_speech_prob": 0.009124902077019215}, {"id": 60, "seek": 16800, "start": 192.0, "end": 197.0, "text": " But because it's a probability, it ranges from zero to one", "tokens": [51564, 583, 570, 309, 311, 257, 8482, 11, 309, 22526, 490, 4018, 281, 472, 51814], "temperature": 0.0, "avg_logprob": -0.06787339339019559, "compression_ratio": 1.7864077669902914, "no_speech_prob": 0.009124902077019215}, {"id": 61, "seek": 19700, "start": 197.0, "end": 199.0, "text": " instead of, like, negative infinity to infinity.", "tokens": [50364, 2602, 295, 11, 411, 11, 3671, 13202, 281, 13202, 13, 50464], "temperature": 0.0, "avg_logprob": -0.06647224568608981, "compression_ratio": 1.7345679012345678, "no_speech_prob": 0.0015010946663096547}, {"id": 62, "seek": 19700, "start": 199.0, "end": 203.0, "text": " And so the more the input ones fire, the more likely this one is to fire.", "tokens": [50464, 400, 370, 264, 544, 264, 4846, 2306, 2610, 11, 264, 544, 3700, 341, 472, 307, 281, 2610, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06647224568608981, "compression_ratio": 1.7345679012345678, "no_speech_prob": 0.0015010946663096547}, {"id": 63, "seek": 19700, "start": 203.0, "end": 205.0, "text": " That was the classic idea, anyway.", "tokens": [50664, 663, 390, 264, 7230, 1558, 11, 4033, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06647224568608981, "compression_ratio": 1.7345679012345678, "no_speech_prob": 0.0015010946663096547}, {"id": 64, "seek": 19700, "start": 205.0, "end": 210.0, "text": " These days, pretty much everyone uses the rectified linear transfer function.", "tokens": [50764, 1981, 1708, 11, 1238, 709, 1518, 4960, 264, 11048, 2587, 8213, 5003, 2445, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06647224568608981, "compression_ratio": 1.7345679012345678, "no_speech_prob": 0.0015010946663096547}, {"id": 65, "seek": 19700, "start": 210.0, "end": 214.0, "text": " It's super simple to implement, and for various reasons, it actually works better,", "tokens": [51014, 467, 311, 1687, 2199, 281, 4445, 11, 293, 337, 3683, 4112, 11, 309, 767, 1985, 1101, 11, 51214], "temperature": 0.0, "avg_logprob": -0.06647224568608981, "compression_ratio": 1.7345679012345678, "no_speech_prob": 0.0015010946663096547}, {"id": 66, "seek": 19700, "start": 214.0, "end": 216.0, "text": " especially for the internal layers.", "tokens": [51214, 2318, 337, 264, 6920, 7914, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06647224568608981, "compression_ratio": 1.7345679012345678, "no_speech_prob": 0.0015010946663096547}, {"id": 67, "seek": 19700, "start": 216.0, "end": 218.0, "text": " And actually, all sorts of functions will work here.", "tokens": [51314, 400, 767, 11, 439, 7527, 295, 6828, 486, 589, 510, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06647224568608981, "compression_ratio": 1.7345679012345678, "no_speech_prob": 0.0015010946663096547}, {"id": 68, "seek": 19700, "start": 218.0, "end": 221.0, "text": " It needs to be differentiable because of the way we train these things.", "tokens": [51414, 467, 2203, 281, 312, 819, 9364, 570, 295, 264, 636, 321, 3847, 613, 721, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06647224568608981, "compression_ratio": 1.7345679012345678, "no_speech_prob": 0.0015010946663096547}, {"id": 69, "seek": 19700, "start": 221.0, "end": 226.0, "text": " But the only other apparently necessary quality is that the function be nonlinear.", "tokens": [51564, 583, 264, 787, 661, 7970, 4818, 3125, 307, 300, 264, 2445, 312, 2107, 28263, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06647224568608981, "compression_ratio": 1.7345679012345678, "no_speech_prob": 0.0015010946663096547}, {"id": 70, "seek": 22600, "start": 226.0, "end": 228.0, "text": " At least so says the professor.", "tokens": [50364, 1711, 1935, 370, 1619, 264, 8304, 13, 50464], "temperature": 0.0, "avg_logprob": -0.05754343323085619, "compression_ratio": 1.9, "no_speech_prob": 0.0021155825816094875}, {"id": 71, "seek": 22600, "start": 228.0, "end": 230.0, "text": " Now, the reason for this is mathematically nice.", "tokens": [50464, 823, 11, 264, 1778, 337, 341, 307, 44003, 1481, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05754343323085619, "compression_ratio": 1.9, "no_speech_prob": 0.0021155825816094875}, {"id": 72, "seek": 22600, "start": 230.0, "end": 232.0, "text": " Let's look at the formula for r again.", "tokens": [50564, 961, 311, 574, 412, 264, 8513, 337, 367, 797, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05754343323085619, "compression_ratio": 1.9, "no_speech_prob": 0.0021155825816094875}, {"id": 73, "seek": 22600, "start": 232.0, "end": 238.0, "text": " And let's say the transfer function is linear, so it's like mx plus b2.", "tokens": [50664, 400, 718, 311, 584, 264, 5003, 2445, 307, 8213, 11, 370, 309, 311, 411, 275, 87, 1804, 272, 17, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05754343323085619, "compression_ratio": 1.9, "no_speech_prob": 0.0021155825816094875}, {"id": 74, "seek": 22600, "start": 238.0, "end": 242.0, "text": " Then you can multiply m by all these terms, and you get another linear function.", "tokens": [50964, 1396, 291, 393, 12972, 275, 538, 439, 613, 2115, 11, 293, 291, 483, 1071, 8213, 2445, 13, 51164], "temperature": 0.0, "avg_logprob": -0.05754343323085619, "compression_ratio": 1.9, "no_speech_prob": 0.0021155825816094875}, {"id": 75, "seek": 22600, "start": 242.0, "end": 247.0, "text": " So r is a linear function of the inputs, and then so is q, and then so is s.", "tokens": [51164, 407, 367, 307, 257, 8213, 2445, 295, 264, 15743, 11, 293, 550, 370, 307, 9505, 11, 293, 550, 370, 307, 262, 13, 51414], "temperature": 0.0, "avg_logprob": -0.05754343323085619, "compression_ratio": 1.9, "no_speech_prob": 0.0021155825816094875}, {"id": 76, "seek": 22600, "start": 247.0, "end": 250.0, "text": " And then o is a linear function of q, r, and s.", "tokens": [51414, 400, 550, 277, 307, 257, 8213, 2445, 295, 9505, 11, 367, 11, 293, 262, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05754343323085619, "compression_ratio": 1.9, "no_speech_prob": 0.0021155825816094875}, {"id": 77, "seek": 22600, "start": 250.0, "end": 255.0, "text": " And what this would mean is that the output would just equal some linear function of the inputs.", "tokens": [51564, 400, 437, 341, 576, 914, 307, 300, 264, 5598, 576, 445, 2681, 512, 8213, 2445, 295, 264, 15743, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05754343323085619, "compression_ratio": 1.9, "no_speech_prob": 0.0021155825816094875}, {"id": 78, "seek": 25500, "start": 255.0, "end": 258.0, "text": " And all of this complexity of the neural network would just simplify away.", "tokens": [50364, 400, 439, 295, 341, 14024, 295, 264, 18161, 3209, 576, 445, 20460, 1314, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06326218618862871, "compression_ratio": 1.7138364779874213, "no_speech_prob": 0.014955274760723114}, {"id": 79, "seek": 25500, "start": 258.0, "end": 260.0, "text": " We wouldn't need any of the hidden layers.", "tokens": [50514, 492, 2759, 380, 643, 604, 295, 264, 7633, 7914, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06326218618862871, "compression_ratio": 1.7138364779874213, "no_speech_prob": 0.014955274760723114}, {"id": 80, "seek": 25500, "start": 260.0, "end": 262.0, "text": " We would just have a function of the input layer.", "tokens": [50614, 492, 576, 445, 362, 257, 2445, 295, 264, 4846, 4583, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06326218618862871, "compression_ratio": 1.7138364779874213, "no_speech_prob": 0.014955274760723114}, {"id": 81, "seek": 25500, "start": 262.0, "end": 267.0, "text": " There are lots of functions such as XOR that can't be approximated by linear functions like this.", "tokens": [50714, 821, 366, 3195, 295, 6828, 1270, 382, 1783, 2483, 300, 393, 380, 312, 8542, 770, 538, 8213, 6828, 411, 341, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06326218618862871, "compression_ratio": 1.7138364779874213, "no_speech_prob": 0.014955274760723114}, {"id": 82, "seek": 25500, "start": 267.0, "end": 273.0, "text": " We definitely want our neural networks to be able to model things that are complicated, like XOR or human thought.", "tokens": [50964, 492, 2138, 528, 527, 18161, 9590, 281, 312, 1075, 281, 2316, 721, 300, 366, 6179, 11, 411, 1783, 2483, 420, 1952, 1194, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06326218618862871, "compression_ratio": 1.7138364779874213, "no_speech_prob": 0.014955274760723114}, {"id": 83, "seek": 25500, "start": 273.0, "end": 275.0, "text": " So the story goes.", "tokens": [51264, 407, 264, 1657, 1709, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06326218618862871, "compression_ratio": 1.7138364779874213, "no_speech_prob": 0.014955274760723114}, {"id": 84, "seek": 25500, "start": 275.0, "end": 278.0, "text": " So that would be true if we were using real math.", "tokens": [51364, 407, 300, 576, 312, 2074, 498, 321, 645, 1228, 957, 5221, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06326218618862871, "compression_ratio": 1.7138364779874213, "no_speech_prob": 0.014955274760723114}, {"id": 85, "seek": 25500, "start": 278.0, "end": 283.0, "text": " On a computer, we're going to use IEEE floating point, which isn't associative or distributive.", "tokens": [51514, 1282, 257, 3820, 11, 321, 434, 516, 281, 764, 286, 7258, 36, 12607, 935, 11, 597, 1943, 380, 4180, 1166, 420, 4400, 17254, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06326218618862871, "compression_ratio": 1.7138364779874213, "no_speech_prob": 0.014955274760723114}, {"id": 86, "seek": 28300, "start": 283.0, "end": 287.0, "text": " So if we simplify the whole network, we won't actually get the same result.", "tokens": [50364, 407, 498, 321, 20460, 264, 1379, 3209, 11, 321, 1582, 380, 767, 483, 264, 912, 1874, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0598239465193315, "compression_ratio": 1.6655629139072847, "no_speech_prob": 0.006096991710364819}, {"id": 87, "seek": 28300, "start": 287.0, "end": 294.0, "text": " So my goal today will be to create a transfer function that, despite being mathematically linear, will not be computationally linear.", "tokens": [50564, 407, 452, 3387, 965, 486, 312, 281, 1884, 257, 5003, 2445, 300, 11, 7228, 885, 44003, 8213, 11, 486, 406, 312, 24903, 379, 8213, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0598239465193315, "compression_ratio": 1.6655629139072847, "no_speech_prob": 0.006096991710364819}, {"id": 88, "seek": 28300, "start": 294.0, "end": 298.0, "text": " And thus, I'll be able to use it to train models that have interesting behavior.", "tokens": [50914, 400, 8807, 11, 286, 603, 312, 1075, 281, 764, 309, 281, 3847, 5245, 300, 362, 1880, 5223, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0598239465193315, "compression_ratio": 1.6655629139072847, "no_speech_prob": 0.006096991710364819}, {"id": 89, "seek": 28300, "start": 298.0, "end": 302.0, "text": " Now, my smart math friend Jason, who probably makes the professor sweat even more,", "tokens": [51114, 823, 11, 452, 4069, 5221, 1277, 11181, 11, 567, 1391, 1669, 264, 8304, 11872, 754, 544, 11, 51314], "temperature": 0.0, "avg_logprob": -0.0598239465193315, "compression_ratio": 1.6655629139072847, "no_speech_prob": 0.006096991710364819}, {"id": 90, "seek": 28300, "start": 302.0, "end": 308.0, "text": " reminds me that this is actually an affine function because I add something at the end.", "tokens": [51314, 12025, 385, 300, 341, 307, 767, 364, 2096, 533, 2445, 570, 286, 909, 746, 412, 264, 917, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0598239465193315, "compression_ratio": 1.6655629139072847, "no_speech_prob": 0.006096991710364819}, {"id": 91, "seek": 28300, "start": 308.0, "end": 309.0, "text": " That's fine. I'm going to call it linear.", "tokens": [51614, 663, 311, 2489, 13, 286, 478, 516, 281, 818, 309, 8213, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0598239465193315, "compression_ratio": 1.6655629139072847, "no_speech_prob": 0.006096991710364819}, {"id": 92, "seek": 30900, "start": 309.0, "end": 313.0, "text": " He refers to this as high school linear in a pejorative way, and that's fine.", "tokens": [50364, 634, 14942, 281, 341, 382, 1090, 1395, 8213, 294, 257, 520, 2337, 1166, 636, 11, 293, 300, 311, 2489, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09207584381103516, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.1258884221315384}, {"id": 93, "seek": 30900, "start": 313.0, "end": 317.0, "text": " I'm comfortable with that. In a lot of ways, I'm mentally still in high school.", "tokens": [50564, 286, 478, 4619, 365, 300, 13, 682, 257, 688, 295, 2098, 11, 286, 478, 17072, 920, 294, 1090, 1395, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09207584381103516, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.1258884221315384}, {"id": 94, "seek": 30900, "start": 317.0, "end": 323.0, "text": " So this means two operations, addition and multiplication by constants or scaling.", "tokens": [50764, 407, 341, 1355, 732, 7705, 11, 4500, 293, 27290, 538, 35870, 420, 21589, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09207584381103516, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.1258884221315384}, {"id": 95, "seek": 30900, "start": 323.0, "end": 325.0, "text": " Them's the rules.", "tokens": [51064, 37354, 311, 264, 4474, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09207584381103516, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.1258884221315384}, {"id": 96, "seek": 30900, "start": 325.0, "end": 330.0, "text": " Or equivalently, would it simplify mathematically to a polynomial of at most degree one?", "tokens": [51164, 1610, 9052, 2276, 11, 576, 309, 20460, 44003, 281, 257, 26110, 295, 412, 881, 4314, 472, 30, 51414], "temperature": 0.0, "avg_logprob": -0.09207584381103516, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.1258884221315384}, {"id": 97, "seek": 30900, "start": 330.0, "end": 334.0, "text": " So 3x plus 2x all times five, that would simplify.", "tokens": [51414, 407, 805, 87, 1804, 568, 87, 439, 1413, 1732, 11, 300, 576, 20460, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09207584381103516, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.1258884221315384}, {"id": 98, "seek": 30900, "start": 334.0, "end": 338.0, "text": " But 2x times x would yield 2x squared, and that's a degree two polynomial.", "tokens": [51614, 583, 568, 87, 1413, 2031, 576, 11257, 568, 87, 8889, 11, 293, 300, 311, 257, 4314, 732, 26110, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09207584381103516, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.1258884221315384}, {"id": 99, "seek": 33800, "start": 338.0, "end": 341.0, "text": " So that's disallowed. Okay?", "tokens": [50364, 407, 300, 311, 717, 13253, 292, 13, 1033, 30, 50514], "temperature": 0.0, "avg_logprob": -0.07296629874936995, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.007120627909898758}, {"id": 100, "seek": 33800, "start": 341.0, "end": 348.0, "text": " Floating point comes in a number of different spice levels, corresponding to how many bits you're using to represent it.", "tokens": [50514, 15153, 990, 935, 1487, 294, 257, 1230, 295, 819, 19436, 4358, 11, 11760, 281, 577, 867, 9239, 291, 434, 1228, 281, 2906, 309, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07296629874936995, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.007120627909898758}, {"id": 101, "seek": 33800, "start": 348.0, "end": 353.0, "text": " So you may be familiar with double and float. Those are 64 and 32 bits.", "tokens": [50864, 407, 291, 815, 312, 4963, 365, 3834, 293, 15706, 13, 3950, 366, 12145, 293, 8858, 9239, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07296629874936995, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.007120627909898758}, {"id": 102, "seek": 33800, "start": 353.0, "end": 356.0, "text": " Half precision is 16 bits, and it gets even lower.", "tokens": [51114, 15917, 18356, 307, 3165, 9239, 11, 293, 309, 2170, 754, 3126, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07296629874936995, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.007120627909898758}, {"id": 103, "seek": 33800, "start": 356.0, "end": 361.0, "text": " It's usually used because then you need half as much memory to store your numbers.", "tokens": [51264, 467, 311, 2673, 1143, 570, 550, 291, 643, 1922, 382, 709, 4675, 281, 3531, 428, 3547, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07296629874936995, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.007120627909898758}, {"id": 104, "seek": 33800, "start": 361.0, "end": 367.0, "text": " That'll be good for us. We'll be happy to save the memory, but the real reason to use half precision is that it is less precise.", "tokens": [51514, 663, 603, 312, 665, 337, 505, 13, 492, 603, 312, 2055, 281, 3155, 264, 4675, 11, 457, 264, 957, 1778, 281, 764, 1922, 18356, 307, 300, 309, 307, 1570, 13600, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07296629874936995, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.007120627909898758}, {"id": 105, "seek": 36700, "start": 367.0, "end": 371.0, "text": " And imprecision is going to be a desirable quality in this work.", "tokens": [50364, 400, 704, 13867, 1991, 307, 516, 281, 312, 257, 30533, 3125, 294, 341, 589, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05735521496466871, "compression_ratio": 1.6194029850746268, "no_speech_prob": 0.0011694550048559904}, {"id": 106, "seek": 36700, "start": 371.0, "end": 376.0, "text": " Being only 16 bit, there are 65,000 different values that we could represent.", "tokens": [50564, 8891, 787, 3165, 857, 11, 456, 366, 11624, 11, 1360, 819, 4190, 300, 321, 727, 2906, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05735521496466871, "compression_ratio": 1.6194029850746268, "no_speech_prob": 0.0011694550048559904}, {"id": 107, "seek": 36700, "start": 376.0, "end": 378.0, "text": " So it's clearly not all of the numbers.", "tokens": [50814, 407, 309, 311, 4448, 406, 439, 295, 264, 3547, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05735521496466871, "compression_ratio": 1.6194029850746268, "no_speech_prob": 0.0011694550048559904}, {"id": 108, "seek": 36700, "start": 378.0, "end": 385.0, "text": " This is an exponential format, so the main thing to remember about floating point precision is that there's more numbers near zero than elsewhere.", "tokens": [50914, 639, 307, 364, 21510, 7877, 11, 370, 264, 2135, 551, 281, 1604, 466, 12607, 935, 18356, 307, 300, 456, 311, 544, 3547, 2651, 4018, 813, 14517, 13, 51264], "temperature": 0.0, "avg_logprob": -0.05735521496466871, "compression_ratio": 1.6194029850746268, "no_speech_prob": 0.0011694550048559904}, {"id": 109, "seek": 36700, "start": 385.0, "end": 393.0, "text": " So when you get to the largest finite numbers, like 65,504, only multiples of 32 are even representable.", "tokens": [51264, 407, 562, 291, 483, 281, 264, 6443, 19362, 3547, 11, 411, 11624, 11, 2803, 19, 11, 787, 46099, 295, 8858, 366, 754, 2906, 712, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05735521496466871, "compression_ratio": 1.6194029850746268, "no_speech_prob": 0.0011694550048559904}, {"id": 110, "seek": 39300, "start": 393.0, "end": 397.0, "text": " Between 2048 and 4096, only even numbers are there.", "tokens": [50364, 18967, 945, 13318, 293, 3356, 22962, 11, 787, 754, 3547, 366, 456, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06731278346135067, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.004468096420168877}, {"id": 111, "seek": 39300, "start": 397.0, "end": 399.0, "text": " Below that, only integers.", "tokens": [50564, 36261, 300, 11, 787, 41674, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06731278346135067, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.004468096420168877}, {"id": 112, "seek": 39300, "start": 399.0, "end": 402.0, "text": " And actually, most of the action happens near zero, where you get a lot of fractions.", "tokens": [50664, 400, 767, 11, 881, 295, 264, 3069, 2314, 2651, 4018, 11, 689, 291, 483, 257, 688, 295, 36058, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06731278346135067, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.004468096420168877}, {"id": 113, "seek": 39300, "start": 402.0, "end": 406.0, "text": " Now this stuff about comparing against epsilon is okay, but it's kind of naive.", "tokens": [50814, 823, 341, 1507, 466, 15763, 1970, 17889, 307, 1392, 11, 457, 309, 311, 733, 295, 29052, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06731278346135067, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.004468096420168877}, {"id": 114, "seek": 39300, "start": 406.0, "end": 409.0, "text": " Like for one thing, what is epsilon supposed to be?", "tokens": [51014, 1743, 337, 472, 551, 11, 437, 307, 17889, 3442, 281, 312, 30, 51164], "temperature": 0.0, "avg_logprob": -0.06731278346135067, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.004468096420168877}, {"id": 115, "seek": 39300, "start": 409.0, "end": 412.0, "text": " If you're working with really small numbers, you can use a really small epsilon.", "tokens": [51164, 759, 291, 434, 1364, 365, 534, 1359, 3547, 11, 291, 393, 764, 257, 534, 1359, 17889, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06731278346135067, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.004468096420168877}, {"id": 116, "seek": 39300, "start": 412.0, "end": 419.0, "text": " But if you're working with larger numbers, you might need to use an epsilon of up to 32, or maybe half that, for half precision.", "tokens": [51314, 583, 498, 291, 434, 1364, 365, 4833, 3547, 11, 291, 1062, 643, 281, 764, 364, 17889, 295, 493, 281, 8858, 11, 420, 1310, 1922, 300, 11, 337, 1922, 18356, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06731278346135067, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.004468096420168877}, {"id": 117, "seek": 41900, "start": 419.0, "end": 423.0, "text": " Actually, a while back, I wrote a paper called What if Anything is Epsilon?", "tokens": [50364, 5135, 11, 257, 1339, 646, 11, 286, 4114, 257, 3035, 1219, 708, 498, 11998, 307, 462, 16592, 30, 50564], "temperature": 0.0, "avg_logprob": -0.09652444017611868, "compression_ratio": 1.6085526315789473, "no_speech_prob": 0.02843155525624752}, {"id": 118, "seek": 41900, "start": 423.0, "end": 429.0, "text": " Where I looked at what programmers picked in practice for their value of epsilon by going through a whole bunch of code on GitHub.", "tokens": [50564, 2305, 286, 2956, 412, 437, 41504, 6183, 294, 3124, 337, 641, 2158, 295, 17889, 538, 516, 807, 257, 1379, 3840, 295, 3089, 322, 23331, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09652444017611868, "compression_ratio": 1.6085526315789473, "no_speech_prob": 0.02843155525624752}, {"id": 119, "seek": 41900, "start": 429.0, "end": 434.0, "text": " I enjoyed laughing at their bugs, like minus 1e10, which is negative 10 billion.", "tokens": [50864, 286, 4626, 5059, 412, 641, 15120, 11, 411, 3175, 502, 68, 3279, 11, 597, 307, 3671, 1266, 5218, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09652444017611868, "compression_ratio": 1.6085526315789473, "no_speech_prob": 0.02843155525624752}, {"id": 120, "seek": 41900, "start": 434.0, "end": 438.0, "text": " They meant 1e-10, 1 over 10 billion.", "tokens": [51114, 814, 4140, 502, 68, 12, 3279, 11, 502, 670, 1266, 5218, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09652444017611868, "compression_ratio": 1.6085526315789473, "no_speech_prob": 0.02843155525624752}, {"id": 121, "seek": 41900, "start": 438.0, "end": 440.0, "text": " And I like to compare these by language.", "tokens": [51314, 400, 286, 411, 281, 6794, 613, 538, 2856, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09652444017611868, "compression_ratio": 1.6085526315789473, "no_speech_prob": 0.02843155525624752}, {"id": 122, "seek": 41900, "start": 440.0, "end": 445.0, "text": " For example, I found that JavaScript programmers were the most tolerant of error, which makes sense.", "tokens": [51414, 1171, 1365, 11, 286, 1352, 300, 15778, 41504, 645, 264, 881, 45525, 295, 6713, 11, 597, 1669, 2020, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09652444017611868, "compression_ratio": 1.6085526315789473, "no_speech_prob": 0.02843155525624752}, {"id": 123, "seek": 41900, "start": 445.0, "end": 446.0, "text": " They're pretty sloppy.", "tokens": [51664, 814, 434, 1238, 43684, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09652444017611868, "compression_ratio": 1.6085526315789473, "no_speech_prob": 0.02843155525624752}, {"id": 124, "seek": 44600, "start": 446.0, "end": 449.0, "text": " One programmer picked 6 million on purpose, that wasn't a typo.", "tokens": [50364, 1485, 32116, 6183, 1386, 2459, 322, 4334, 11, 300, 2067, 380, 257, 2125, 78, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07121588659624681, "compression_ratio": 1.719869706840391, "no_speech_prob": 0.001700658816844225}, {"id": 125, "seek": 44600, "start": 449.0, "end": 453.0, "text": " Well, a lot of stuff will be equal if you use a really large epsilon.", "tokens": [50514, 1042, 11, 257, 688, 295, 1507, 486, 312, 2681, 498, 291, 764, 257, 534, 2416, 17889, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07121588659624681, "compression_ratio": 1.719869706840391, "no_speech_prob": 0.001700658816844225}, {"id": 126, "seek": 44600, "start": 453.0, "end": 456.0, "text": " But anyway, the error you get is not like random.", "tokens": [50714, 583, 4033, 11, 264, 6713, 291, 483, 307, 406, 411, 4974, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07121588659624681, "compression_ratio": 1.719869706840391, "no_speech_prob": 0.001700658816844225}, {"id": 127, "seek": 44600, "start": 456.0, "end": 458.0, "text": " These have a much more useful definition.", "tokens": [50864, 1981, 362, 257, 709, 544, 4420, 7123, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07121588659624681, "compression_ratio": 1.719869706840391, "no_speech_prob": 0.001700658816844225}, {"id": 128, "seek": 44600, "start": 458.0, "end": 465.0, "text": " If I take two numbers and add them using IEEE floating point, the answer is defined to be the real math answer, x plus y,", "tokens": [50964, 759, 286, 747, 732, 3547, 293, 909, 552, 1228, 286, 7258, 36, 12607, 935, 11, 264, 1867, 307, 7642, 281, 312, 264, 957, 5221, 1867, 11, 2031, 1804, 288, 11, 51314], "temperature": 0.0, "avg_logprob": -0.07121588659624681, "compression_ratio": 1.719869706840391, "no_speech_prob": 0.001700658816844225}, {"id": 129, "seek": 44600, "start": 465.0, "end": 468.0, "text": " but rounded to the nearest representable floating point number.", "tokens": [51314, 457, 23382, 281, 264, 23831, 2906, 712, 12607, 935, 1230, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07121588659624681, "compression_ratio": 1.719869706840391, "no_speech_prob": 0.001700658816844225}, {"id": 130, "seek": 44600, "start": 468.0, "end": 470.0, "text": " So if the result is high, I might need to round a lot.", "tokens": [51464, 407, 498, 264, 1874, 307, 1090, 11, 286, 1062, 643, 281, 3098, 257, 688, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07121588659624681, "compression_ratio": 1.719869706840391, "no_speech_prob": 0.001700658816844225}, {"id": 131, "seek": 44600, "start": 470.0, "end": 474.0, "text": " If the result is small, I might need to round a small amount.", "tokens": [51564, 759, 264, 1874, 307, 1359, 11, 286, 1062, 643, 281, 3098, 257, 1359, 2372, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07121588659624681, "compression_ratio": 1.719869706840391, "no_speech_prob": 0.001700658816844225}, {"id": 132, "seek": 47400, "start": 474.0, "end": 476.0, "text": " I also might not need to round at all.", "tokens": [50364, 286, 611, 1062, 406, 643, 281, 3098, 412, 439, 13, 50464], "temperature": 0.0, "avg_logprob": -0.0519023558189129, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0010986855486407876}, {"id": 133, "seek": 47400, "start": 476.0, "end": 481.0, "text": " Like 2 plus 2 is literally equal to 4 exactly in floating point, like you'd want.", "tokens": [50464, 1743, 568, 1804, 568, 307, 3736, 2681, 281, 1017, 2293, 294, 12607, 935, 11, 411, 291, 1116, 528, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0519023558189129, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0010986855486407876}, {"id": 134, "seek": 47400, "start": 481.0, "end": 483.0, "text": " And we're going to use that kind of thing later.", "tokens": [50714, 400, 321, 434, 516, 281, 764, 300, 733, 295, 551, 1780, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0519023558189129, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0010986855486407876}, {"id": 135, "seek": 47400, "start": 483.0, "end": 487.0, "text": " So the most important thing to remember about floating point for this project is,", "tokens": [50814, 407, 264, 881, 1021, 551, 281, 1604, 466, 12607, 935, 337, 341, 1716, 307, 11, 51014], "temperature": 0.0, "avg_logprob": -0.0519023558189129, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0010986855486407876}, {"id": 136, "seek": 47400, "start": 487.0, "end": 491.0, "text": " rounding error depends on how far you are out on the number line.", "tokens": [51014, 48237, 6713, 5946, 322, 577, 1400, 291, 366, 484, 322, 264, 1230, 1622, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0519023558189129, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0010986855486407876}, {"id": 137, "seek": 47400, "start": 491.0, "end": 495.0, "text": " Large error for large numbers, small error for small numbers.", "tokens": [51214, 33092, 6713, 337, 2416, 3547, 11, 1359, 6713, 337, 1359, 3547, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0519023558189129, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0010986855486407876}, {"id": 138, "seek": 47400, "start": 495.0, "end": 497.0, "text": " But it also depends on the specific value.", "tokens": [51414, 583, 309, 611, 5946, 322, 264, 2685, 2158, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0519023558189129, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0010986855486407876}, {"id": 139, "seek": 47400, "start": 497.0, "end": 499.0, "text": " Not everything needs to be rounded.", "tokens": [51514, 1726, 1203, 2203, 281, 312, 23382, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0519023558189129, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0010986855486407876}, {"id": 140, "seek": 49900, "start": 499.0, "end": 504.0, "text": " Surrounding is a complicated function, and we're going to abuse that complexity in order to get behavior that we like.", "tokens": [50364, 6732, 5453, 278, 307, 257, 6179, 2445, 11, 293, 321, 434, 516, 281, 9852, 300, 14024, 294, 1668, 281, 483, 5223, 300, 321, 411, 13, 50614], "temperature": 0.0, "avg_logprob": -0.058274674603319546, "compression_ratio": 1.6539682539682539, "no_speech_prob": 0.005384536925703287}, {"id": 141, "seek": 49900, "start": 504.0, "end": 509.0, "text": " Let's look at how we can start abusing the imprecision of floating point numbers.", "tokens": [50614, 961, 311, 574, 412, 577, 321, 393, 722, 410, 7981, 264, 704, 13867, 1991, 295, 12607, 935, 3547, 13, 50864], "temperature": 0.0, "avg_logprob": -0.058274674603319546, "compression_ratio": 1.6539682539682539, "no_speech_prob": 0.005384536925703287}, {"id": 142, "seek": 49900, "start": 509.0, "end": 513.0, "text": " We just have addition and multiplication by constants, so we're going to try both of those.", "tokens": [50864, 492, 445, 362, 4500, 293, 27290, 538, 35870, 11, 370, 321, 434, 516, 281, 853, 1293, 295, 729, 13, 51064], "temperature": 0.0, "avg_logprob": -0.058274674603319546, "compression_ratio": 1.6539682539682539, "no_speech_prob": 0.005384536925703287}, {"id": 143, "seek": 49900, "start": 513.0, "end": 520.0, "text": " Here's what happens if I add 128 to the input and then subtract 128 back out.", "tokens": [51064, 1692, 311, 437, 2314, 498, 286, 909, 29810, 281, 264, 4846, 293, 550, 16390, 29810, 646, 484, 13, 51414], "temperature": 0.0, "avg_logprob": -0.058274674603319546, "compression_ratio": 1.6539682539682539, "no_speech_prob": 0.005384536925703287}, {"id": 144, "seek": 49900, "start": 520.0, "end": 524.0, "text": " Mathematically, of course, this is just the identity function. I get back the input.", "tokens": [51414, 15776, 40197, 11, 295, 1164, 11, 341, 307, 445, 264, 6575, 2445, 13, 286, 483, 646, 264, 4846, 13, 51614], "temperature": 0.0, "avg_logprob": -0.058274674603319546, "compression_ratio": 1.6539682539682539, "no_speech_prob": 0.005384536925703287}, {"id": 145, "seek": 49900, "start": 524.0, "end": 528.0, "text": " But because there aren't that many values representable near 128,", "tokens": [51614, 583, 570, 456, 3212, 380, 300, 867, 4190, 2906, 712, 2651, 29810, 11, 51814], "temperature": 0.0, "avg_logprob": -0.058274674603319546, "compression_ratio": 1.6539682539682539, "no_speech_prob": 0.005384536925703287}, {"id": 146, "seek": 52800, "start": 528.0, "end": 532.0, "text": " we can only get back eight different values between 0 and 1.", "tokens": [50364, 321, 393, 787, 483, 646, 3180, 819, 4190, 1296, 1958, 293, 502, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07211288416160727, "compression_ratio": 1.6570247933884297, "no_speech_prob": 0.005729788448661566}, {"id": 147, "seek": 52800, "start": 532.0, "end": 536.0, "text": " Note that the zigzag is finer in the negative region than in the positive region.", "tokens": [50564, 11633, 300, 264, 38290, 43886, 307, 39130, 294, 264, 3671, 4458, 813, 294, 264, 3353, 4458, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07211288416160727, "compression_ratio": 1.6570247933884297, "no_speech_prob": 0.005729788448661566}, {"id": 148, "seek": 52800, "start": 536.0, "end": 540.0, "text": " If we look at the actual numbers that are representable near 128,", "tokens": [50764, 759, 321, 574, 412, 264, 3539, 3547, 300, 366, 2906, 712, 2651, 29810, 11, 50964], "temperature": 0.0, "avg_logprob": -0.07211288416160727, "compression_ratio": 1.6570247933884297, "no_speech_prob": 0.005729788448661566}, {"id": 149, "seek": 52800, "start": 540.0, "end": 545.0, "text": " we see that we have eighths above 128, but sixteenths below 128.", "tokens": [50964, 321, 536, 300, 321, 362, 19495, 82, 3673, 29810, 11, 457, 13074, 46066, 82, 2507, 29810, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07211288416160727, "compression_ratio": 1.6570247933884297, "no_speech_prob": 0.005729788448661566}, {"id": 150, "seek": 52800, "start": 545.0, "end": 548.0, "text": " So we get more precision in the negative region.", "tokens": [51214, 407, 321, 483, 544, 18356, 294, 264, 3671, 4458, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07211288416160727, "compression_ratio": 1.6570247933884297, "no_speech_prob": 0.005729788448661566}, {"id": 151, "seek": 52800, "start": 548.0, "end": 553.0, "text": " Okay, that's plus. It's definitely not a line, but it's basically just a line.", "tokens": [51364, 1033, 11, 300, 311, 1804, 13, 467, 311, 2138, 406, 257, 1622, 11, 457, 309, 311, 1936, 445, 257, 1622, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07211288416160727, "compression_ratio": 1.6570247933884297, "no_speech_prob": 0.005729788448661566}, {"id": 152, "seek": 55300, "start": 553.0, "end": 556.0, "text": " Also, this thing has a terrible derivative. It just has all these flat segments,", "tokens": [50364, 2743, 11, 341, 551, 575, 257, 6237, 13760, 13, 467, 445, 575, 439, 613, 4962, 19904, 11, 50514], "temperature": 0.0, "avg_logprob": -0.05995128552118937, "compression_ratio": 1.6319018404907975, "no_speech_prob": 0.011685929261147976}, {"id": 153, "seek": 55300, "start": 556.0, "end": 560.0, "text": " so the derivative there is 0 and it's undefined at the discontinuities.", "tokens": [50514, 370, 264, 13760, 456, 307, 1958, 293, 309, 311, 674, 5666, 2001, 412, 264, 31420, 84, 1088, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05995128552118937, "compression_ratio": 1.6319018404907975, "no_speech_prob": 0.011685929261147976}, {"id": 154, "seek": 55300, "start": 560.0, "end": 563.0, "text": " So it's going to actually be pretty hard to use as a transfer function,", "tokens": [50714, 407, 309, 311, 516, 281, 767, 312, 1238, 1152, 281, 764, 382, 257, 5003, 2445, 11, 50864], "temperature": 0.0, "avg_logprob": -0.05995128552118937, "compression_ratio": 1.6319018404907975, "no_speech_prob": 0.011685929261147976}, {"id": 155, "seek": 55300, "start": 563.0, "end": 565.0, "text": " but we're going to try it out anyway.", "tokens": [50864, 457, 321, 434, 516, 281, 853, 309, 484, 4033, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05995128552118937, "compression_ratio": 1.6319018404907975, "no_speech_prob": 0.011685929261147976}, {"id": 156, "seek": 55300, "start": 565.0, "end": 567.0, "text": " Now multiplication looks a lot more subtle.", "tokens": [50964, 823, 27290, 1542, 257, 688, 544, 13743, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05995128552118937, "compression_ratio": 1.6319018404907975, "no_speech_prob": 0.011685929261147976}, {"id": 157, "seek": 55300, "start": 567.0, "end": 570.0, "text": " Here I'm multiplying by 100 and then by 1 over 100,", "tokens": [51064, 1692, 286, 478, 30955, 538, 2319, 293, 550, 538, 502, 670, 2319, 11, 51214], "temperature": 0.0, "avg_logprob": -0.05995128552118937, "compression_ratio": 1.6319018404907975, "no_speech_prob": 0.011685929261147976}, {"id": 158, "seek": 55300, "start": 570.0, "end": 575.0, "text": " which also should give me back just the identity f of x equals x.", "tokens": [51214, 597, 611, 820, 976, 385, 646, 445, 264, 6575, 283, 295, 2031, 6915, 2031, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05995128552118937, "compression_ratio": 1.6319018404907975, "no_speech_prob": 0.011685929261147976}, {"id": 159, "seek": 55300, "start": 575.0, "end": 578.0, "text": " So if we zoom in on this one, we'll start to see some detail.", "tokens": [51464, 407, 498, 321, 8863, 294, 322, 341, 472, 11, 321, 603, 722, 281, 536, 512, 2607, 13, 51614], "temperature": 0.0, "avg_logprob": -0.05995128552118937, "compression_ratio": 1.6319018404907975, "no_speech_prob": 0.011685929261147976}, {"id": 160, "seek": 55300, "start": 578.0, "end": 581.0, "text": " Actually, maybe that's just my laser printer.", "tokens": [51614, 5135, 11, 1310, 300, 311, 445, 452, 12530, 16671, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05995128552118937, "compression_ratio": 1.6319018404907975, "no_speech_prob": 0.011685929261147976}, {"id": 161, "seek": 58100, "start": 581.0, "end": 583.0, "text": " Well, that's the problem with using imprecise tools.", "tokens": [50364, 1042, 11, 300, 311, 264, 1154, 365, 1228, 704, 13867, 908, 3873, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09371699227227105, "compression_ratio": 1.664406779661017, "no_speech_prob": 0.0005527593893930316}, {"id": 162, "seek": 58100, "start": 583.0, "end": 585.0, "text": " Maybe we should do this on the computer.", "tokens": [50464, 2704, 321, 820, 360, 341, 322, 264, 3820, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09371699227227105, "compression_ratio": 1.664406779661017, "no_speech_prob": 0.0005527593893930316}, {"id": 163, "seek": 58100, "start": 585.0, "end": 587.0, "text": " Okay, here we are on the computer.", "tokens": [50564, 1033, 11, 510, 321, 366, 322, 264, 3820, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09371699227227105, "compression_ratio": 1.664406779661017, "no_speech_prob": 0.0005527593893930316}, {"id": 164, "seek": 58100, "start": 587.0, "end": 590.0, "text": " And if I zoom in on this line, and I got to zoom in a lot,", "tokens": [50664, 400, 498, 286, 8863, 294, 322, 341, 1622, 11, 293, 286, 658, 281, 8863, 294, 257, 688, 11, 50814], "temperature": 0.0, "avg_logprob": -0.09371699227227105, "compression_ratio": 1.664406779661017, "no_speech_prob": 0.0005527593893930316}, {"id": 165, "seek": 58100, "start": 590.0, "end": 593.0, "text": " near zero, it's pretty much perfect.", "tokens": [50814, 2651, 4018, 11, 309, 311, 1238, 709, 2176, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09371699227227105, "compression_ratio": 1.664406779661017, "no_speech_prob": 0.0005527593893930316}, {"id": 166, "seek": 58100, "start": 593.0, "end": 595.0, "text": " But as we get near one, it gets a lot more jacked.", "tokens": [50964, 583, 382, 321, 483, 2651, 472, 11, 309, 2170, 257, 688, 544, 7109, 292, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09371699227227105, "compression_ratio": 1.664406779661017, "no_speech_prob": 0.0005527593893930316}, {"id": 167, "seek": 58100, "start": 595.0, "end": 599.0, "text": " And this is real imprecision, and it depends where you are on the number line.", "tokens": [51064, 400, 341, 307, 957, 704, 13867, 1991, 11, 293, 309, 5946, 689, 291, 366, 322, 264, 1230, 1622, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09371699227227105, "compression_ratio": 1.664406779661017, "no_speech_prob": 0.0005527593893930316}, {"id": 168, "seek": 58100, "start": 599.0, "end": 601.0, "text": " You get different rounding error.", "tokens": [51264, 509, 483, 819, 48237, 6713, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09371699227227105, "compression_ratio": 1.664406779661017, "no_speech_prob": 0.0005527593893930316}, {"id": 169, "seek": 58100, "start": 601.0, "end": 604.0, "text": " This is actually pretty hard to reason about, to be honest.", "tokens": [51364, 639, 307, 767, 1238, 1152, 281, 1778, 466, 11, 281, 312, 3245, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09371699227227105, "compression_ratio": 1.664406779661017, "no_speech_prob": 0.0005527593893930316}, {"id": 170, "seek": 58100, "start": 604.0, "end": 607.0, "text": " So just suffice to say, when you multiply,", "tokens": [51514, 407, 445, 3889, 573, 281, 584, 11, 562, 291, 12972, 11, 51664], "temperature": 0.0, "avg_logprob": -0.09371699227227105, "compression_ratio": 1.664406779661017, "no_speech_prob": 0.0005527593893930316}, {"id": 171, "seek": 60700, "start": 607.0, "end": 609.0, "text": " you get a little bit of error all throughout the number line,", "tokens": [50364, 291, 483, 257, 707, 857, 295, 6713, 439, 3710, 264, 1230, 1622, 11, 50464], "temperature": 0.0, "avg_logprob": -0.05628863440619575, "compression_ratio": 1.6598639455782314, "no_speech_prob": 0.005729835946112871}, {"id": 172, "seek": 60700, "start": 609.0, "end": 611.0, "text": " but it depends on where you are.", "tokens": [50464, 457, 309, 5946, 322, 689, 291, 366, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05628863440619575, "compression_ratio": 1.6598639455782314, "no_speech_prob": 0.005729835946112871}, {"id": 173, "seek": 60700, "start": 611.0, "end": 613.0, "text": " So that's multiplication.", "tokens": [50564, 407, 300, 311, 27290, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05628863440619575, "compression_ratio": 1.6598639455782314, "no_speech_prob": 0.005729835946112871}, {"id": 174, "seek": 60700, "start": 613.0, "end": 615.0, "text": " Now we can try to put these together in various ways.", "tokens": [50664, 823, 321, 393, 853, 281, 829, 613, 1214, 294, 3683, 2098, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05628863440619575, "compression_ratio": 1.6598639455782314, "no_speech_prob": 0.005729835946112871}, {"id": 175, "seek": 60700, "start": 615.0, "end": 618.0, "text": " So I play with this a lot,", "tokens": [50764, 407, 286, 862, 365, 341, 257, 688, 11, 50914], "temperature": 0.0, "avg_logprob": -0.05628863440619575, "compression_ratio": 1.6598639455782314, "no_speech_prob": 0.005729835946112871}, {"id": 176, "seek": 60700, "start": 618.0, "end": 622.0, "text": " and I produced a whole bunch of just totally bonkers functions.", "tokens": [50914, 293, 286, 7126, 257, 1379, 3840, 295, 445, 3879, 4428, 24259, 6828, 13, 51114], "temperature": 0.0, "avg_logprob": -0.05628863440619575, "compression_ratio": 1.6598639455782314, "no_speech_prob": 0.005729835946112871}, {"id": 177, "seek": 60700, "start": 622.0, "end": 625.0, "text": " But actually the best shape that I was able to make", "tokens": [51114, 583, 767, 264, 1151, 3909, 300, 286, 390, 1075, 281, 652, 51264], "temperature": 0.0, "avg_logprob": -0.05628863440619575, "compression_ratio": 1.6598639455782314, "no_speech_prob": 0.005729835946112871}, {"id": 178, "seek": 60700, "start": 625.0, "end": 627.0, "text": " came from just using multiplication.", "tokens": [51264, 1361, 490, 445, 1228, 27290, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05628863440619575, "compression_ratio": 1.6598639455782314, "no_speech_prob": 0.005729835946112871}, {"id": 179, "seek": 60700, "start": 627.0, "end": 631.0, "text": " And what I do is I multiply by the first number that's smaller than 1.", "tokens": [51364, 400, 437, 286, 360, 307, 286, 12972, 538, 264, 700, 1230, 300, 311, 4356, 813, 502, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05628863440619575, "compression_ratio": 1.6598639455782314, "no_speech_prob": 0.005729835946112871}, {"id": 180, "seek": 60700, "start": 631.0, "end": 633.0, "text": " So it's just slightly less than 1.", "tokens": [51564, 407, 309, 311, 445, 4748, 1570, 813, 502, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05628863440619575, "compression_ratio": 1.6598639455782314, "no_speech_prob": 0.005729835946112871}, {"id": 181, "seek": 60700, "start": 633.0, "end": 636.0, "text": " That's 1 minus 1 over 2048.", "tokens": [51664, 663, 311, 502, 3175, 502, 670, 945, 13318, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05628863440619575, "compression_ratio": 1.6598639455782314, "no_speech_prob": 0.005729835946112871}, {"id": 182, "seek": 63600, "start": 636.0, "end": 638.0, "text": " I keep multiplying by that over and over again.", "tokens": [50364, 286, 1066, 30955, 538, 300, 670, 293, 670, 797, 13, 50464], "temperature": 0.0, "avg_logprob": -0.0902794223082693, "compression_ratio": 1.6498422712933754, "no_speech_prob": 0.00263155996799469}, {"id": 183, "seek": 63600, "start": 638.0, "end": 641.0, "text": " And as I do, I accumulate more and more error in different parts of the graph.", "tokens": [50464, 400, 382, 286, 360, 11, 286, 33384, 544, 293, 544, 6713, 294, 819, 3166, 295, 264, 4295, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0902794223082693, "compression_ratio": 1.6498422712933754, "no_speech_prob": 0.00263155996799469}, {"id": 184, "seek": 63600, "start": 641.0, "end": 643.0, "text": " Of course, I'm also making the number smaller.", "tokens": [50614, 2720, 1164, 11, 286, 478, 611, 1455, 264, 1230, 4356, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0902794223082693, "compression_ratio": 1.6498422712933754, "no_speech_prob": 0.00263155996799469}, {"id": 185, "seek": 63600, "start": 643.0, "end": 647.0, "text": " So at the end, I want to normalize back so that f of 1 is 1.", "tokens": [50714, 407, 412, 264, 917, 11, 286, 528, 281, 2710, 1125, 646, 370, 300, 283, 295, 502, 307, 502, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0902794223082693, "compression_ratio": 1.6498422712933754, "no_speech_prob": 0.00263155996799469}, {"id": 186, "seek": 63600, "start": 647.0, "end": 649.0, "text": " Here's what it looks like if I do that iteratively.", "tokens": [50914, 1692, 311, 437, 309, 1542, 411, 498, 286, 360, 300, 17138, 19020, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0902794223082693, "compression_ratio": 1.6498422712933754, "no_speech_prob": 0.00263155996799469}, {"id": 187, "seek": 63600, "start": 649.0, "end": 651.0, "text": " Accumulating error.", "tokens": [51014, 5725, 449, 12162, 6713, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0902794223082693, "compression_ratio": 1.6498422712933754, "no_speech_prob": 0.00263155996799469}, {"id": 188, "seek": 63600, "start": 651.0, "end": 653.0, "text": " I found that 500 steps was a good stopping point.", "tokens": [51114, 286, 1352, 300, 5923, 4439, 390, 257, 665, 12767, 935, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0902794223082693, "compression_ratio": 1.6498422712933754, "no_speech_prob": 0.00263155996799469}, {"id": 189, "seek": 63600, "start": 653.0, "end": 656.0, "text": " So this is a function that I call grad1.", "tokens": [51214, 407, 341, 307, 257, 2445, 300, 286, 818, 2771, 16, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0902794223082693, "compression_ratio": 1.6498422712933754, "no_speech_prob": 0.00263155996799469}, {"id": 190, "seek": 63600, "start": 656.0, "end": 658.0, "text": " Grad for the name of this project, which I can't pronounce.", "tokens": [51364, 16710, 337, 264, 1315, 295, 341, 1716, 11, 597, 286, 393, 380, 19567, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0902794223082693, "compression_ratio": 1.6498422712933754, "no_speech_prob": 0.00263155996799469}, {"id": 191, "seek": 63600, "start": 658.0, "end": 661.0, "text": " Gradient half decent.", "tokens": [51464, 16710, 1196, 1922, 8681, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0902794223082693, "compression_ratio": 1.6498422712933754, "no_speech_prob": 0.00263155996799469}, {"id": 192, "seek": 63600, "start": 661.0, "end": 665.0, "text": " I triply half gradient descent, you get it.", "tokens": [51614, 286, 1376, 2724, 1922, 16235, 23475, 11, 291, 483, 309, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0902794223082693, "compression_ratio": 1.6498422712933754, "no_speech_prob": 0.00263155996799469}, {"id": 193, "seek": 66500, "start": 665.0, "end": 668.0, "text": " And it has this nice zigzag shape.", "tokens": [50364, 400, 309, 575, 341, 1481, 38290, 43886, 3909, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07756790018970182, "compression_ratio": 1.6426426426426426, "no_speech_prob": 0.00757633987814188}, {"id": 194, "seek": 66500, "start": 668.0, "end": 670.0, "text": " Importantly, it's kind of smooth.", "tokens": [50514, 26391, 3627, 11, 309, 311, 733, 295, 5508, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07756790018970182, "compression_ratio": 1.6426426426426426, "no_speech_prob": 0.00757633987814188}, {"id": 195, "seek": 66500, "start": 670.0, "end": 673.0, "text": " If we zoom in on it, we'll see that it's, you know, putting aside the pixels,", "tokens": [50614, 759, 321, 8863, 294, 322, 309, 11, 321, 603, 536, 300, 309, 311, 11, 291, 458, 11, 3372, 7359, 264, 18668, 11, 50764], "temperature": 0.0, "avg_logprob": -0.07756790018970182, "compression_ratio": 1.6426426426426426, "no_speech_prob": 0.00757633987814188}, {"id": 196, "seek": 66500, "start": 673.0, "end": 675.0, "text": " that it's piecewise linear.", "tokens": [50764, 300, 309, 311, 2522, 3711, 8213, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07756790018970182, "compression_ratio": 1.6426426426426426, "no_speech_prob": 0.00757633987814188}, {"id": 197, "seek": 66500, "start": 675.0, "end": 677.0, "text": " So that's nice.", "tokens": [50864, 407, 300, 311, 1481, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07756790018970182, "compression_ratio": 1.6426426426426426, "no_speech_prob": 0.00757633987814188}, {"id": 198, "seek": 66500, "start": 677.0, "end": 680.0, "text": " Now you might wonder, why does it get this zigzag shape?", "tokens": [50964, 823, 291, 1062, 2441, 11, 983, 775, 309, 483, 341, 38290, 43886, 3909, 30, 51114], "temperature": 0.0, "avg_logprob": -0.07756790018970182, "compression_ratio": 1.6426426426426426, "no_speech_prob": 0.00757633987814188}, {"id": 199, "seek": 66500, "start": 680.0, "end": 683.0, "text": " And truth be told, round-off error is just kind of hard to reason about.", "tokens": [51114, 400, 3494, 312, 1907, 11, 3098, 12, 4506, 6713, 307, 445, 733, 295, 1152, 281, 1778, 466, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07756790018970182, "compression_ratio": 1.6426426426426426, "no_speech_prob": 0.00757633987814188}, {"id": 200, "seek": 66500, "start": 683.0, "end": 685.0, "text": " Let me show you two illustrations that are at least nice to look at.", "tokens": [51264, 961, 385, 855, 291, 732, 34540, 300, 366, 412, 1935, 1481, 281, 574, 412, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07756790018970182, "compression_ratio": 1.6426426426426426, "no_speech_prob": 0.00757633987814188}, {"id": 201, "seek": 66500, "start": 685.0, "end": 689.0, "text": " In this rainbow, I've given each of the numbers between 0 and 1 a color on the x-axis.", "tokens": [51364, 682, 341, 18526, 11, 286, 600, 2212, 1184, 295, 264, 3547, 1296, 1958, 293, 502, 257, 2017, 322, 264, 2031, 12, 24633, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07756790018970182, "compression_ratio": 1.6426426426426426, "no_speech_prob": 0.00757633987814188}, {"id": 202, "seek": 66500, "start": 689.0, "end": 693.0, "text": " And then on the y-axis, I'm successively multiplying by that constant.", "tokens": [51564, 400, 550, 322, 264, 288, 12, 24633, 11, 286, 478, 2245, 3413, 30955, 538, 300, 5754, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07756790018970182, "compression_ratio": 1.6426426426426426, "no_speech_prob": 0.00757633987814188}, {"id": 203, "seek": 69300, "start": 693.0, "end": 697.0, "text": " And you could see that they get exponentially smaller as expected, but not smoothly.", "tokens": [50364, 400, 291, 727, 536, 300, 436, 483, 37330, 4356, 382, 5176, 11, 457, 406, 19565, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07293591992608432, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.005729696713387966}, {"id": 204, "seek": 69300, "start": 697.0, "end": 699.0, "text": " And these changes in direction come from different exponents,", "tokens": [50564, 400, 613, 2962, 294, 3513, 808, 490, 819, 12680, 791, 11, 50664], "temperature": 0.0, "avg_logprob": -0.07293591992608432, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.005729696713387966}, {"id": 205, "seek": 69300, "start": 699.0, "end": 702.0, "text": " and we see some of that reflected in the zigzags.", "tokens": [50664, 293, 321, 536, 512, 295, 300, 15502, 294, 264, 38290, 89, 12109, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07293591992608432, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.005729696713387966}, {"id": 206, "seek": 69300, "start": 702.0, "end": 704.0, "text": " On this image, the x-axis is 0 to 1 again.", "tokens": [50814, 1282, 341, 3256, 11, 264, 2031, 12, 24633, 307, 1958, 281, 502, 797, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07293591992608432, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.005729696713387966}, {"id": 207, "seek": 69300, "start": 704.0, "end": 707.0, "text": " The y-axis is successive multiplication by the constant.", "tokens": [50914, 440, 288, 12, 24633, 307, 48043, 27290, 538, 264, 5754, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07293591992608432, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.005729696713387966}, {"id": 208, "seek": 69300, "start": 707.0, "end": 710.0, "text": " But the green pixels is when my round-off is too high compared to the correct result,", "tokens": [51064, 583, 264, 3092, 18668, 307, 562, 452, 3098, 12, 4506, 307, 886, 1090, 5347, 281, 264, 3006, 1874, 11, 51214], "temperature": 0.0, "avg_logprob": -0.07293591992608432, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.005729696713387966}, {"id": 209, "seek": 69300, "start": 710.0, "end": 712.0, "text": " and magenta when it's too low.", "tokens": [51214, 293, 2258, 8938, 562, 309, 311, 886, 2295, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07293591992608432, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.005729696713387966}, {"id": 210, "seek": 69300, "start": 712.0, "end": 714.0, "text": " This line at the top is at 500 iterations.", "tokens": [51314, 639, 1622, 412, 264, 1192, 307, 412, 5923, 36540, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07293591992608432, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.005729696713387966}, {"id": 211, "seek": 69300, "start": 714.0, "end": 718.0, "text": " And you can see how it slices both green and magenta regions.", "tokens": [51414, 400, 291, 393, 536, 577, 309, 19793, 1293, 3092, 293, 2258, 8938, 10682, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07293591992608432, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.005729696713387966}, {"id": 212, "seek": 69300, "start": 718.0, "end": 720.0, "text": " Too high and too low.", "tokens": [51614, 11395, 1090, 293, 886, 2295, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07293591992608432, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.005729696713387966}, {"id": 213, "seek": 72000, "start": 720.0, "end": 724.0, "text": " One more thing, in order to train models with this thing, we need to know it's derivative.", "tokens": [50364, 1485, 544, 551, 11, 294, 1668, 281, 3847, 5245, 365, 341, 551, 11, 321, 643, 281, 458, 309, 311, 13760, 13, 50564], "temperature": 0.0, "avg_logprob": -0.057937240600585936, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.10369212925434113}, {"id": 214, "seek": 72000, "start": 724.0, "end": 727.0, "text": " And for reasons of implementation tricks that I'm not going to get into,", "tokens": [50564, 400, 337, 4112, 295, 11420, 11733, 300, 286, 478, 406, 516, 281, 483, 666, 11, 50714], "temperature": 0.0, "avg_logprob": -0.057937240600585936, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.10369212925434113}, {"id": 215, "seek": 72000, "start": 727.0, "end": 731.0, "text": " I actually need the derivative in terms of the y-coordinate instead of the x-coordinate.", "tokens": [50714, 286, 767, 643, 264, 13760, 294, 2115, 295, 264, 288, 12, 1291, 37326, 2602, 295, 264, 2031, 12, 1291, 37326, 13, 50914], "temperature": 0.0, "avg_logprob": -0.057937240600585936, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.10369212925434113}, {"id": 216, "seek": 72000, "start": 731.0, "end": 734.0, "text": " Now, I'm not good enough at math to figure this out analytically.", "tokens": [50914, 823, 11, 286, 478, 406, 665, 1547, 412, 5221, 281, 2573, 341, 484, 10783, 984, 13, 51064], "temperature": 0.0, "avg_logprob": -0.057937240600585936, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.10369212925434113}, {"id": 217, "seek": 72000, "start": 734.0, "end": 738.0, "text": " In any way, it would probably just be a table of the values for these different segments.", "tokens": [51064, 682, 604, 636, 11, 309, 576, 1391, 445, 312, 257, 3199, 295, 264, 4190, 337, 613, 819, 19904, 13, 51264], "temperature": 0.0, "avg_logprob": -0.057937240600585936, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.10369212925434113}, {"id": 218, "seek": 72000, "start": 738.0, "end": 742.0, "text": " But since it's 16-bit and there's only 65,000 values that are possible,", "tokens": [51264, 583, 1670, 309, 311, 3165, 12, 5260, 293, 456, 311, 787, 11624, 11, 1360, 4190, 300, 366, 1944, 11, 51464], "temperature": 0.0, "avg_logprob": -0.057937240600585936, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.10369212925434113}, {"id": 219, "seek": 72000, "start": 742.0, "end": 746.0, "text": " I can just use a computer program to compute the derivative for every point.", "tokens": [51464, 286, 393, 445, 764, 257, 3820, 1461, 281, 14722, 264, 13760, 337, 633, 935, 13, 51664], "temperature": 0.0, "avg_logprob": -0.057937240600585936, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.10369212925434113}, {"id": 220, "seek": 72000, "start": 746.0, "end": 748.0, "text": " So here that has plotted along the y-axis.", "tokens": [51664, 407, 510, 300, 575, 43288, 2051, 264, 288, 12, 24633, 13, 51764], "temperature": 0.0, "avg_logprob": -0.057937240600585936, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.10369212925434113}, {"id": 221, "seek": 74800, "start": 748.0, "end": 750.0, "text": " I think it looks pretty cool like an oscilloscope.", "tokens": [50364, 286, 519, 309, 1542, 1238, 1627, 411, 364, 18225, 41659, 13, 50464], "temperature": 0.0, "avg_logprob": -0.06715291445372534, "compression_ratio": 1.6544117647058822, "no_speech_prob": 0.002889438532292843}, {"id": 222, "seek": 74800, "start": 750.0, "end": 753.0, "text": " You'll notice that the derivative isn't a perfect square wave,", "tokens": [50464, 509, 603, 3449, 300, 264, 13760, 1943, 380, 257, 2176, 3732, 5772, 11, 50614], "temperature": 0.0, "avg_logprob": -0.06715291445372534, "compression_ratio": 1.6544117647058822, "no_speech_prob": 0.002889438532292843}, {"id": 223, "seek": 74800, "start": 753.0, "end": 759.0, "text": " and it wouldn't be because there are in fact little imperfections in this curve from round-off error.", "tokens": [50614, 293, 309, 2759, 380, 312, 570, 456, 366, 294, 1186, 707, 26714, 626, 294, 341, 7605, 490, 3098, 12, 4506, 6713, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06715291445372534, "compression_ratio": 1.6544117647058822, "no_speech_prob": 0.002889438532292843}, {"id": 224, "seek": 74800, "start": 759.0, "end": 762.0, "text": " I'm actually applying a low-pass filter here, it would be even noisier.", "tokens": [50914, 286, 478, 767, 9275, 257, 2295, 12, 9216, 6608, 510, 11, 309, 576, 312, 754, 572, 271, 811, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06715291445372534, "compression_ratio": 1.6544117647058822, "no_speech_prob": 0.002889438532292843}, {"id": 225, "seek": 74800, "start": 762.0, "end": 765.0, "text": " But anyway, now we've got the function and we've got its derivative,", "tokens": [51064, 583, 4033, 11, 586, 321, 600, 658, 264, 2445, 293, 321, 600, 658, 1080, 13760, 11, 51214], "temperature": 0.0, "avg_logprob": -0.06715291445372534, "compression_ratio": 1.6544117647058822, "no_speech_prob": 0.002889438532292843}, {"id": 226, "seek": 74800, "start": 765.0, "end": 768.0, "text": " so we can do some machine learning.", "tokens": [51214, 370, 321, 393, 360, 512, 3479, 2539, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06715291445372534, "compression_ratio": 1.6544117647058822, "no_speech_prob": 0.002889438532292843}, {"id": 227, "seek": 74800, "start": 768.0, "end": 771.0, "text": " But first, a bonus digression.", "tokens": [51364, 583, 700, 11, 257, 10882, 2528, 2775, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06715291445372534, "compression_ratio": 1.6544117647058822, "no_speech_prob": 0.002889438532292843}, {"id": 228, "seek": 74800, "start": 771.0, "end": 773.0, "text": " Here's a bonus digression.", "tokens": [51514, 1692, 311, 257, 10882, 2528, 2775, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06715291445372534, "compression_ratio": 1.6544117647058822, "no_speech_prob": 0.002889438532292843}, {"id": 229, "seek": 77300, "start": 773.0, "end": 778.0, "text": " Having freed myself from the need to quote-unquote do math in order to differentiate functions,", "tokens": [50364, 10222, 21796, 2059, 490, 264, 643, 281, 6513, 12, 409, 25016, 360, 5221, 294, 1668, 281, 23203, 6828, 11, 50614], "temperature": 0.0, "avg_logprob": -0.07681116691002479, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.10964713990688324}, {"id": 230, "seek": 77300, "start": 778.0, "end": 781.0, "text": " because I'm just going to generate a table programmatically,", "tokens": [50614, 570, 286, 478, 445, 516, 281, 8460, 257, 3199, 37648, 5030, 11, 50764], "temperature": 0.0, "avg_logprob": -0.07681116691002479, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.10964713990688324}, {"id": 231, "seek": 77300, "start": 781.0, "end": 784.0, "text": " I can now consider all sorts of exotic transfer functions.", "tokens": [50764, 286, 393, 586, 1949, 439, 7527, 295, 27063, 5003, 6828, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07681116691002479, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.10964713990688324}, {"id": 232, "seek": 77300, "start": 784.0, "end": 788.0, "text": " I can even betray the central thesis of this work and consider functions that are not linear.", "tokens": [50914, 286, 393, 754, 15560, 264, 5777, 22288, 295, 341, 589, 293, 1949, 6828, 300, 366, 406, 8213, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07681116691002479, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.10964713990688324}, {"id": 233, "seek": 77300, "start": 788.0, "end": 793.0, "text": " One thing I think is really funny is when you use data sort of as the wrong type,", "tokens": [51114, 1485, 551, 286, 519, 307, 534, 4074, 307, 562, 291, 764, 1412, 1333, 295, 382, 264, 2085, 2010, 11, 51364], "temperature": 0.0, "avg_logprob": -0.07681116691002479, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.10964713990688324}, {"id": 234, "seek": 77300, "start": 793.0, "end": 797.0, "text": " you may be familiar with the fast inverse square root technique.", "tokens": [51364, 291, 815, 312, 4963, 365, 264, 2370, 17340, 3732, 5593, 6532, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07681116691002479, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.10964713990688324}, {"id": 235, "seek": 77300, "start": 797.0, "end": 802.0, "text": " I love that one, and I think it's worth considering if a transfer function even needs to use floating point operations", "tokens": [51564, 286, 959, 300, 472, 11, 293, 286, 519, 309, 311, 3163, 8079, 498, 257, 5003, 2445, 754, 2203, 281, 764, 12607, 935, 7705, 51814], "temperature": 0.0, "avg_logprob": -0.07681116691002479, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.10964713990688324}, {"id": 236, "seek": 80200, "start": 802.0, "end": 804.0, "text": " in order to be implemented.", "tokens": [50364, 294, 1668, 281, 312, 12270, 13, 50464], "temperature": 0.0, "avg_logprob": -0.054894577373157845, "compression_ratio": 1.7245901639344263, "no_speech_prob": 0.004069969058036804}, {"id": 237, "seek": 80200, "start": 804.0, "end": 807.0, "text": " I tried to find the fastest, simplest thing you could do that might work.", "tokens": [50464, 286, 3031, 281, 915, 264, 14573, 11, 22811, 551, 291, 727, 360, 300, 1062, 589, 13, 50614], "temperature": 0.0, "avg_logprob": -0.054894577373157845, "compression_ratio": 1.7245901639344263, "no_speech_prob": 0.004069969058036804}, {"id": 238, "seek": 80200, "start": 807.0, "end": 810.0, "text": " My favorite was to treat the float as just 16 bits,", "tokens": [50614, 1222, 2954, 390, 281, 2387, 264, 15706, 382, 445, 3165, 9239, 11, 50764], "temperature": 0.0, "avg_logprob": -0.054894577373157845, "compression_ratio": 1.7245901639344263, "no_speech_prob": 0.004069969058036804}, {"id": 239, "seek": 80200, "start": 810.0, "end": 814.0, "text": " shift them down by 2, and then treat that back as a float.", "tokens": [50764, 5513, 552, 760, 538, 568, 11, 293, 550, 2387, 300, 646, 382, 257, 15706, 13, 50964], "temperature": 0.0, "avg_logprob": -0.054894577373157845, "compression_ratio": 1.7245901639344263, "no_speech_prob": 0.004069969058036804}, {"id": 240, "seek": 80200, "start": 814.0, "end": 817.0, "text": " For integers, shifting by 2 is just division by 4.", "tokens": [50964, 1171, 41674, 11, 17573, 538, 568, 307, 445, 10044, 538, 1017, 13, 51114], "temperature": 0.0, "avg_logprob": -0.054894577373157845, "compression_ratio": 1.7245901639344263, "no_speech_prob": 0.004069969058036804}, {"id": 241, "seek": 80200, "start": 817.0, "end": 820.0, "text": " But for a floating point number, since there are different fields within the word,", "tokens": [51114, 583, 337, 257, 12607, 935, 1230, 11, 1670, 456, 366, 819, 7909, 1951, 264, 1349, 11, 51264], "temperature": 0.0, "avg_logprob": -0.054894577373157845, "compression_ratio": 1.7245901639344263, "no_speech_prob": 0.004069969058036804}, {"id": 242, "seek": 80200, "start": 820.0, "end": 822.0, "text": " this moves bits between fields.", "tokens": [51264, 341, 6067, 9239, 1296, 7909, 13, 51364], "temperature": 0.0, "avg_logprob": -0.054894577373157845, "compression_ratio": 1.7245901639344263, "no_speech_prob": 0.004069969058036804}, {"id": 243, "seek": 80200, "start": 822.0, "end": 826.0, "text": " So for example, the sine bit gets moved into the exponent,", "tokens": [51364, 407, 337, 1365, 11, 264, 18609, 857, 2170, 4259, 666, 264, 37871, 11, 51564], "temperature": 0.0, "avg_logprob": -0.054894577373157845, "compression_ratio": 1.7245901639344263, "no_speech_prob": 0.004069969058036804}, {"id": 244, "seek": 80200, "start": 826.0, "end": 831.0, "text": " which means you have a much larger exponent for negative numbers than for positive ones.", "tokens": [51564, 597, 1355, 291, 362, 257, 709, 4833, 37871, 337, 3671, 3547, 813, 337, 3353, 2306, 13, 51814], "temperature": 0.0, "avg_logprob": -0.054894577373157845, "compression_ratio": 1.7245901639344263, "no_speech_prob": 0.004069969058036804}, {"id": 245, "seek": 83100, "start": 831.0, "end": 834.0, "text": " The result will always be positive because we fill with zeros.", "tokens": [50364, 440, 1874, 486, 1009, 312, 3353, 570, 321, 2836, 365, 35193, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07192794978618622, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0005527668399736285}, {"id": 246, "seek": 83100, "start": 834.0, "end": 837.0, "text": " Dividing the exponent by 4 has a logarithmic effect on the result,", "tokens": [50514, 413, 1843, 278, 264, 37871, 538, 1017, 575, 257, 41473, 355, 13195, 1802, 322, 264, 1874, 11, 50664], "temperature": 0.0, "avg_logprob": -0.07192794978618622, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0005527668399736285}, {"id": 247, "seek": 83100, "start": 837.0, "end": 840.0, "text": " and then some of the exponent bits also go into the mantissa.", "tokens": [50664, 293, 550, 512, 295, 264, 37871, 9239, 611, 352, 666, 264, 10845, 10138, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07192794978618622, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0005527668399736285}, {"id": 248, "seek": 83100, "start": 840.0, "end": 843.0, "text": " So you get a kind of crazy function that looks like this.", "tokens": [50814, 407, 291, 483, 257, 733, 295, 3219, 2445, 300, 1542, 411, 341, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07192794978618622, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0005527668399736285}, {"id": 249, "seek": 83100, "start": 843.0, "end": 847.0, "text": " The negative values are much larger, as we said, and it logarithmically approaches zero.", "tokens": [50964, 440, 3671, 4190, 366, 709, 4833, 11, 382, 321, 848, 11, 293, 309, 41473, 32674, 984, 11587, 4018, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07192794978618622, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0005527668399736285}, {"id": 250, "seek": 83100, "start": 847.0, "end": 852.0, "text": " The positive region is actually a very small upward slope, which you can't see on this graph.", "tokens": [51164, 440, 3353, 4458, 307, 767, 257, 588, 1359, 23452, 13525, 11, 597, 291, 393, 380, 536, 322, 341, 4295, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07192794978618622, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0005527668399736285}, {"id": 251, "seek": 83100, "start": 852.0, "end": 857.0, "text": " But since the exponent will start with two zeros, these tend to be pretty small.", "tokens": [51414, 583, 1670, 264, 37871, 486, 722, 365, 732, 35193, 11, 613, 3928, 281, 312, 1238, 1359, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07192794978618622, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0005527668399736285}, {"id": 252, "seek": 85700, "start": 857.0, "end": 861.0, "text": " This is the full range that's explored by the positive values,", "tokens": [50364, 639, 307, 264, 1577, 3613, 300, 311, 24016, 538, 264, 3353, 4190, 11, 50564], "temperature": 0.0, "avg_logprob": -0.058706241183810765, "compression_ratio": 1.6899696048632218, "no_speech_prob": 0.008315072394907475}, {"id": 253, "seek": 85700, "start": 861.0, "end": 866.0, "text": " and you probably don't care, but here is its computed derivative in terms of the y-coordinate.", "tokens": [50564, 293, 291, 1391, 500, 380, 1127, 11, 457, 510, 307, 1080, 40610, 13760, 294, 2115, 295, 264, 288, 12, 1291, 37326, 13, 50814], "temperature": 0.0, "avg_logprob": -0.058706241183810765, "compression_ratio": 1.6899696048632218, "no_speech_prob": 0.008315072394907475}, {"id": 254, "seek": 85700, "start": 866.0, "end": 870.0, "text": " So in the experiments which are coming up next, I'm going to also compare this transfer function.", "tokens": [50814, 407, 294, 264, 12050, 597, 366, 1348, 493, 958, 11, 286, 478, 516, 281, 611, 6794, 341, 5003, 2445, 13, 51014], "temperature": 0.0, "avg_logprob": -0.058706241183810765, "compression_ratio": 1.6899696048632218, "no_speech_prob": 0.008315072394907475}, {"id": 255, "seek": 85700, "start": 870.0, "end": 874.0, "text": " This wouldn't prove the professor wrong because it uses a forbidden operation,", "tokens": [51014, 639, 2759, 380, 7081, 264, 8304, 2085, 570, 309, 4960, 257, 25990, 6916, 11, 51214], "temperature": 0.0, "avg_logprob": -0.058706241183810765, "compression_ratio": 1.6899696048632218, "no_speech_prob": 0.008315072394907475}, {"id": 256, "seek": 85700, "start": 874.0, "end": 877.0, "text": " but it is about as fast as you could do anything on a computer.", "tokens": [51214, 457, 309, 307, 466, 382, 2370, 382, 291, 727, 360, 1340, 322, 257, 3820, 13, 51364], "temperature": 0.0, "avg_logprob": -0.058706241183810765, "compression_ratio": 1.6899696048632218, "no_speech_prob": 0.008315072394907475}, {"id": 257, "seek": 85700, "start": 877.0, "end": 881.0, "text": " So if it does turn out to work, it might be a half-decent choice.", "tokens": [51364, 407, 498, 309, 775, 1261, 484, 281, 589, 11, 309, 1062, 312, 257, 1922, 12, 1479, 2207, 3922, 13, 51564], "temperature": 0.0, "avg_logprob": -0.058706241183810765, "compression_ratio": 1.6899696048632218, "no_speech_prob": 0.008315072394907475}, {"id": 258, "seek": 85700, "start": 881.0, "end": 886.0, "text": " To compare the transfer functions, I tried them out on different machine learning problems.", "tokens": [51564, 1407, 6794, 264, 5003, 6828, 11, 286, 3031, 552, 484, 322, 819, 3479, 2539, 2740, 13, 51814], "temperature": 0.0, "avg_logprob": -0.058706241183810765, "compression_ratio": 1.6899696048632218, "no_speech_prob": 0.008315072394907475}, {"id": 259, "seek": 88600, "start": 886.0, "end": 891.0, "text": " Fortunately, I do have my own bespoke GPU-based system for training neural networks,", "tokens": [50364, 20652, 11, 286, 360, 362, 452, 1065, 4097, 48776, 18407, 12, 6032, 1185, 337, 3097, 18161, 9590, 11, 50614], "temperature": 0.0, "avg_logprob": -0.07625606286264684, "compression_ratio": 1.6169014084507043, "no_speech_prob": 0.00370695348829031}, {"id": 260, "seek": 88600, "start": 891.0, "end": 896.0, "text": " which has appeared on this channel before in videos such as 30 weird chess algorithms.", "tokens": [50614, 597, 575, 8516, 322, 341, 2269, 949, 294, 2145, 1270, 382, 2217, 3657, 24122, 14642, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07625606286264684, "compression_ratio": 1.6169014084507043, "no_speech_prob": 0.00370695348829031}, {"id": 261, "seek": 88600, "start": 896.0, "end": 900.0, "text": " It's not that good, but it is the kind of thing you want if you're going to do a silly experiment like,", "tokens": [50864, 467, 311, 406, 300, 665, 11, 457, 309, 307, 264, 733, 295, 551, 291, 528, 498, 291, 434, 516, 281, 360, 257, 11774, 5120, 411, 11, 51064], "temperature": 0.0, "avg_logprob": -0.07625606286264684, "compression_ratio": 1.6169014084507043, "no_speech_prob": 0.00370695348829031}, {"id": 262, "seek": 88600, "start": 900.0, "end": 902.0, "text": " what if deep learning, but worse?", "tokens": [51064, 437, 498, 2452, 2539, 11, 457, 5324, 30, 51164], "temperature": 0.0, "avg_logprob": -0.07625606286264684, "compression_ratio": 1.6169014084507043, "no_speech_prob": 0.00370695348829031}, {"id": 263, "seek": 88600, "start": 902.0, "end": 906.0, "text": " So I made a bunch of modifications for this project, for example, to do the forward step with half-precision,", "tokens": [51164, 407, 286, 1027, 257, 3840, 295, 26881, 337, 341, 1716, 11, 337, 1365, 11, 281, 360, 264, 2128, 1823, 365, 1922, 12, 3712, 40832, 11, 51364], "temperature": 0.0, "avg_logprob": -0.07625606286264684, "compression_ratio": 1.6169014084507043, "no_speech_prob": 0.00370695348829031}, {"id": 264, "seek": 88600, "start": 906.0, "end": 909.0, "text": " and to support these tabled transfer functions.", "tokens": [51364, 293, 281, 1406, 613, 4421, 1493, 5003, 6828, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07625606286264684, "compression_ratio": 1.6169014084507043, "no_speech_prob": 0.00370695348829031}, {"id": 265, "seek": 88600, "start": 909.0, "end": 914.0, "text": " Then I trained a network using the same structure and initialization, changing only the transfer function.", "tokens": [51514, 1396, 286, 8895, 257, 3209, 1228, 264, 912, 3877, 293, 5883, 2144, 11, 4473, 787, 264, 5003, 2445, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07625606286264684, "compression_ratio": 1.6169014084507043, "no_speech_prob": 0.00370695348829031}, {"id": 266, "seek": 91400, "start": 914.0, "end": 918.0, "text": " The first problem is the MNIST digit recognition dataset.", "tokens": [50364, 440, 700, 1154, 307, 264, 376, 45, 19756, 14293, 11150, 28872, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0873300424262659, "compression_ratio": 1.6205882352941177, "no_speech_prob": 0.0007793345139361918}, {"id": 267, "seek": 91400, "start": 918.0, "end": 922.0, "text": " The original CAPTCHA, you get 50,000 labeled examples of these tiny digits,", "tokens": [50564, 440, 3380, 33636, 18238, 4983, 11, 291, 483, 2625, 11, 1360, 21335, 5110, 295, 613, 5870, 27011, 11, 50764], "temperature": 0.0, "avg_logprob": -0.0873300424262659, "compression_ratio": 1.6205882352941177, "no_speech_prob": 0.0007793345139361918}, {"id": 268, "seek": 91400, "start": 922.0, "end": 925.0, "text": " and you have to learn to predict the digits 0 through 9,", "tokens": [50764, 293, 291, 362, 281, 1466, 281, 6069, 264, 27011, 1958, 807, 1722, 11, 50914], "temperature": 0.0, "avg_logprob": -0.0873300424262659, "compression_ratio": 1.6205882352941177, "no_speech_prob": 0.0007793345139361918}, {"id": 269, "seek": 91400, "start": 925.0, "end": 928.0, "text": " and then there are 10,000 held-out examples to judge your accuracy on.", "tokens": [50914, 293, 550, 456, 366, 1266, 11, 1360, 5167, 12, 346, 5110, 281, 6995, 428, 14170, 322, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0873300424262659, "compression_ratio": 1.6205882352941177, "no_speech_prob": 0.0007793345139361918}, {"id": 270, "seek": 91400, "start": 928.0, "end": 931.0, "text": " I chose this classic problem partly for trollish reasons,", "tokens": [51064, 286, 5111, 341, 7230, 1154, 17031, 337, 20680, 742, 4112, 11, 51214], "temperature": 0.0, "avg_logprob": -0.0873300424262659, "compression_ratio": 1.6205882352941177, "no_speech_prob": 0.0007793345139361918}, {"id": 271, "seek": 91400, "start": 931.0, "end": 933.0, "text": " because even at the time of publication decades ago,", "tokens": [51214, 570, 754, 412, 264, 565, 295, 19953, 7878, 2057, 11, 51314], "temperature": 0.0, "avg_logprob": -0.0873300424262659, "compression_ratio": 1.6205882352941177, "no_speech_prob": 0.0007793345139361918}, {"id": 272, "seek": 91400, "start": 933.0, "end": 937.0, "text": " various techniques had already achieved extremely high accuracy.", "tokens": [51314, 3683, 7512, 632, 1217, 11042, 4664, 1090, 14170, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0873300424262659, "compression_ratio": 1.6205882352941177, "no_speech_prob": 0.0007793345139361918}, {"id": 273, "seek": 91400, "start": 937.0, "end": 939.0, "text": " The networks I trained looked like this.", "tokens": [51514, 440, 9590, 286, 8895, 2956, 411, 341, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0873300424262659, "compression_ratio": 1.6205882352941177, "no_speech_prob": 0.0007793345139361918}, {"id": 274, "seek": 91400, "start": 939.0, "end": 943.0, "text": " They take in the input pixels, then there's a number of internal layers,", "tokens": [51614, 814, 747, 294, 264, 4846, 18668, 11, 550, 456, 311, 257, 1230, 295, 6920, 7914, 11, 51814], "temperature": 0.0, "avg_logprob": -0.0873300424262659, "compression_ratio": 1.6205882352941177, "no_speech_prob": 0.0007793345139361918}, {"id": 275, "seek": 94300, "start": 943.0, "end": 947.0, "text": " and then a dense output layer with one output for each of the 10 digits.", "tokens": [50364, 293, 550, 257, 18011, 5598, 4583, 365, 472, 5598, 337, 1184, 295, 264, 1266, 27011, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07927676306830513, "compression_ratio": 1.779179810725552, "no_speech_prob": 0.0007321431767195463}, {"id": 276, "seek": 94300, "start": 947.0, "end": 951.0, "text": " You can see the paper, the code for details, if you really want.", "tokens": [50564, 509, 393, 536, 264, 3035, 11, 264, 3089, 337, 4365, 11, 498, 291, 534, 528, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07927676306830513, "compression_ratio": 1.779179810725552, "no_speech_prob": 0.0007321431767195463}, {"id": 277, "seek": 94300, "start": 951.0, "end": 956.0, "text": " But one important thing I want to point out for these experiments is that the output layer uses a strict linear transfer function,", "tokens": [50764, 583, 472, 1021, 551, 286, 528, 281, 935, 484, 337, 613, 12050, 307, 300, 264, 5598, 4583, 4960, 257, 10910, 8213, 5003, 2445, 11, 51014], "temperature": 0.0, "avg_logprob": -0.07927676306830513, "compression_ratio": 1.779179810725552, "no_speech_prob": 0.0007321431767195463}, {"id": 278, "seek": 94300, "start": 956.0, "end": 958.0, "text": " the identity, for each of the models.", "tokens": [51014, 264, 6575, 11, 337, 1184, 295, 264, 5245, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07927676306830513, "compression_ratio": 1.779179810725552, "no_speech_prob": 0.0007321431767195463}, {"id": 279, "seek": 94300, "start": 958.0, "end": 962.0, "text": " It's not a good choice for these categorical problems, but it allows the network to output any value,", "tokens": [51114, 467, 311, 406, 257, 665, 3922, 337, 613, 19250, 804, 2740, 11, 457, 309, 4045, 264, 3209, 281, 5598, 604, 2158, 11, 51314], "temperature": 0.0, "avg_logprob": -0.07927676306830513, "compression_ratio": 1.779179810725552, "no_speech_prob": 0.0007321431767195463}, {"id": 280, "seek": 94300, "start": 962.0, "end": 966.0, "text": " even if the transfer function, for example, only outputs positive numbers.", "tokens": [51314, 754, 498, 264, 5003, 2445, 11, 337, 1365, 11, 787, 23930, 3353, 3547, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07927676306830513, "compression_ratio": 1.779179810725552, "no_speech_prob": 0.0007321431767195463}, {"id": 281, "seek": 94300, "start": 966.0, "end": 969.0, "text": " And since it's linear, it complies with our goal of proving the professor wrong.", "tokens": [51514, 400, 1670, 309, 311, 8213, 11, 309, 1209, 530, 365, 527, 3387, 295, 27221, 264, 8304, 2085, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07927676306830513, "compression_ratio": 1.779179810725552, "no_speech_prob": 0.0007321431767195463}, {"id": 282, "seek": 96900, "start": 969.0, "end": 973.0, "text": " Throughout the rest of the network, all the internal layers use the transfer function that we're studying.", "tokens": [50364, 22775, 264, 1472, 295, 264, 3209, 11, 439, 264, 6920, 7914, 764, 264, 5003, 2445, 300, 321, 434, 7601, 13, 50564], "temperature": 0.0, "avg_logprob": -0.04196341708302498, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0008558708359487355}, {"id": 283, "seek": 96900, "start": 973.0, "end": 977.0, "text": " So I trained one of these models with the same initial conditions and the same data,", "tokens": [50564, 407, 286, 8895, 472, 295, 613, 5245, 365, 264, 912, 5883, 4487, 293, 264, 912, 1412, 11, 50764], "temperature": 0.0, "avg_logprob": -0.04196341708302498, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0008558708359487355}, {"id": 284, "seek": 96900, "start": 977.0, "end": 979.0, "text": " but using a different transfer function.", "tokens": [50764, 457, 1228, 257, 819, 5003, 2445, 13, 50864], "temperature": 0.0, "avg_logprob": -0.04196341708302498, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0008558708359487355}, {"id": 285, "seek": 96900, "start": 979.0, "end": 982.0, "text": " I do that for 200,000 rounds, which takes about a day each.", "tokens": [50864, 286, 360, 300, 337, 2331, 11, 1360, 13757, 11, 597, 2516, 466, 257, 786, 1184, 13, 51014], "temperature": 0.0, "avg_logprob": -0.04196341708302498, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0008558708359487355}, {"id": 286, "seek": 96900, "start": 982.0, "end": 986.0, "text": " We can then compare the final accuracy and other dimensions, such as their aesthetics.", "tokens": [51014, 492, 393, 550, 6794, 264, 2572, 14170, 293, 661, 12819, 11, 1270, 382, 641, 35517, 13, 51214], "temperature": 0.0, "avg_logprob": -0.04196341708302498, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0008558708359487355}, {"id": 287, "seek": 96900, "start": 986.0, "end": 988.0, "text": " The functions are as follows.", "tokens": [51214, 440, 6828, 366, 382, 10002, 13, 51314], "temperature": 0.0, "avg_logprob": -0.04196341708302498, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0008558708359487355}, {"id": 288, "seek": 96900, "start": 988.0, "end": 992.0, "text": " We have two classic sigmoids, the hyperbolic tangent and the logistic function.", "tokens": [51314, 492, 362, 732, 7230, 4556, 3280, 3742, 11, 264, 9848, 65, 7940, 27747, 293, 264, 3565, 3142, 2445, 13, 51514], "temperature": 0.0, "avg_logprob": -0.04196341708302498, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0008558708359487355}, {"id": 289, "seek": 96900, "start": 992.0, "end": 995.0, "text": " After that, the rectified linear unit.", "tokens": [51514, 2381, 300, 11, 264, 11048, 2587, 8213, 4985, 13, 51664], "temperature": 0.0, "avg_logprob": -0.04196341708302498, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0008558708359487355}, {"id": 290, "seek": 99500, "start": 995.0, "end": 999.0, "text": " Here I'm using a leaky version where the region below zero actually has a small slope.", "tokens": [50364, 1692, 286, 478, 1228, 257, 476, 15681, 3037, 689, 264, 4458, 2507, 4018, 767, 575, 257, 1359, 13525, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0645553751509319, "compression_ratio": 1.6185897435897436, "no_speech_prob": 0.007576610427349806}, {"id": 291, "seek": 99500, "start": 999.0, "end": 1001.0, "text": " That seems to work better for me.", "tokens": [50564, 663, 2544, 281, 589, 1101, 337, 385, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0645553751509319, "compression_ratio": 1.6185897435897436, "no_speech_prob": 0.007576610427349806}, {"id": 292, "seek": 99500, "start": 1001.0, "end": 1003.0, "text": " This function is very popular today.", "tokens": [50664, 639, 2445, 307, 588, 3743, 965, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0645553751509319, "compression_ratio": 1.6185897435897436, "no_speech_prob": 0.007576610427349806}, {"id": 293, "seek": 99500, "start": 1003.0, "end": 1006.0, "text": " None of those functions are linear, as expected by the professor.", "tokens": [50764, 14492, 295, 729, 6828, 366, 8213, 11, 382, 5176, 538, 264, 8304, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0645553751509319, "compression_ratio": 1.6185897435897436, "no_speech_prob": 0.007576610427349806}, {"id": 294, "seek": 99500, "start": 1006.0, "end": 1009.0, "text": " Then we have a couple that abuse floating point round off error.", "tokens": [50914, 1396, 321, 362, 257, 1916, 300, 9852, 12607, 935, 3098, 766, 6713, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0645553751509319, "compression_ratio": 1.6185897435897436, "no_speech_prob": 0.007576610427349806}, {"id": 295, "seek": 99500, "start": 1009.0, "end": 1010.0, "text": " First a really simple one.", "tokens": [51064, 2386, 257, 534, 2199, 472, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0645553751509319, "compression_ratio": 1.6185897435897436, "no_speech_prob": 0.007576610427349806}, {"id": 296, "seek": 99500, "start": 1010.0, "end": 1012.0, "text": " I add 64 and subtract 64.", "tokens": [51114, 286, 909, 12145, 293, 16390, 12145, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0645553751509319, "compression_ratio": 1.6185897435897436, "no_speech_prob": 0.007576610427349806}, {"id": 297, "seek": 99500, "start": 1012.0, "end": 1014.0, "text": " We saw how that discretizes the line.", "tokens": [51214, 492, 1866, 577, 300, 25656, 5660, 264, 1622, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0645553751509319, "compression_ratio": 1.6185897435897436, "no_speech_prob": 0.007576610427349806}, {"id": 298, "seek": 99500, "start": 1014.0, "end": 1021.0, "text": " Then the grad one function, which multiplies by a number near one 500 times in order to smoothly magnify the round off error.", "tokens": [51314, 1396, 264, 2771, 472, 2445, 11, 597, 12788, 530, 538, 257, 1230, 2651, 472, 5923, 1413, 294, 1668, 281, 19565, 4944, 2505, 264, 3098, 766, 6713, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0645553751509319, "compression_ratio": 1.6185897435897436, "no_speech_prob": 0.007576610427349806}, {"id": 299, "seek": 102100, "start": 1021.0, "end": 1025.0, "text": " Then we have our bonus content, downshift two, which manipulates bits directly.", "tokens": [50364, 1396, 321, 362, 527, 10882, 2701, 11, 760, 47445, 732, 11, 597, 9258, 26192, 9239, 3838, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06555802597958818, "compression_ratio": 1.5808580858085808, "no_speech_prob": 0.0022517540492117405}, {"id": 300, "seek": 102100, "start": 1025.0, "end": 1031.0, "text": " Finally, we'll evaluate the identity function, which is what the professor thinks a linear model must be equivalent to.", "tokens": [50564, 6288, 11, 321, 603, 13059, 264, 6575, 2445, 11, 597, 307, 437, 264, 8304, 7309, 257, 8213, 2316, 1633, 312, 10344, 281, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06555802597958818, "compression_ratio": 1.5808580858085808, "no_speech_prob": 0.0022517540492117405}, {"id": 301, "seek": 102100, "start": 1031.0, "end": 1034.0, "text": " On the MNIST problem, all of the transfer functions do well.", "tokens": [50864, 1282, 264, 376, 45, 19756, 1154, 11, 439, 295, 264, 5003, 6828, 360, 731, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06555802597958818, "compression_ratio": 1.5808580858085808, "no_speech_prob": 0.0022517540492117405}, {"id": 302, "seek": 102100, "start": 1034.0, "end": 1037.0, "text": " As expected, the classics are nearing 100% accuracy.", "tokens": [51014, 1018, 5176, 11, 264, 36110, 366, 408, 1921, 2319, 4, 14170, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06555802597958818, "compression_ratio": 1.5808580858085808, "no_speech_prob": 0.0022517540492117405}, {"id": 303, "seek": 102100, "start": 1037.0, "end": 1042.0, "text": " Even a simple linear model using the identity function gets like 82%.", "tokens": [51164, 2754, 257, 2199, 8213, 2316, 1228, 264, 6575, 2445, 2170, 411, 29097, 6856, 51414], "temperature": 0.0, "avg_logprob": -0.06555802597958818, "compression_ratio": 1.5808580858085808, "no_speech_prob": 0.0022517540492117405}, {"id": 304, "seek": 102100, "start": 1042.0, "end": 1047.0, "text": " Plus 64, which gets a little bit of non-linearity with round off error outperforms it slightly.", "tokens": [51414, 7721, 12145, 11, 597, 2170, 257, 707, 857, 295, 2107, 12, 1889, 17409, 365, 3098, 766, 6713, 484, 26765, 82, 309, 4748, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06555802597958818, "compression_ratio": 1.5808580858085808, "no_speech_prob": 0.0022517540492117405}, {"id": 305, "seek": 104700, "start": 1047.0, "end": 1051.0, "text": " But the nice smooth grad one function is almost in the same class as the classic functions.", "tokens": [50364, 583, 264, 1481, 5508, 2771, 472, 2445, 307, 1920, 294, 264, 912, 1508, 382, 264, 7230, 6828, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0824600265872094, "compression_ratio": 1.6140350877192982, "no_speech_prob": 0.00734545337036252}, {"id": 306, "seek": 104700, "start": 1051.0, "end": 1053.0, "text": " It's working quite well.", "tokens": [50564, 467, 311, 1364, 1596, 731, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0824600265872094, "compression_ratio": 1.6140350877192982, "no_speech_prob": 0.00734545337036252}, {"id": 307, "seek": 104700, "start": 1053.0, "end": 1058.0, "text": " So it seems like our hypothesis is panning out, and I can sense the professor beginning to sweat.", "tokens": [50664, 407, 309, 2544, 411, 527, 17291, 307, 2462, 773, 484, 11, 293, 286, 393, 2020, 264, 8304, 2863, 281, 11872, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0824600265872094, "compression_ratio": 1.6140350877192982, "no_speech_prob": 0.00734545337036252}, {"id": 308, "seek": 104700, "start": 1058.0, "end": 1061.0, "text": " The next problem is the SIFAR-10 dataset.", "tokens": [50914, 440, 958, 1154, 307, 264, 318, 12775, 1899, 12, 3279, 28872, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0824600265872094, "compression_ratio": 1.6140350877192982, "no_speech_prob": 0.00734545337036252}, {"id": 309, "seek": 104700, "start": 1061.0, "end": 1066.0, "text": " This is a lot like MNIST, but instead of recognizing digits, you have to recognize spirit animals.", "tokens": [51064, 639, 307, 257, 688, 411, 376, 45, 19756, 11, 457, 2602, 295, 18538, 27011, 11, 291, 362, 281, 5521, 3797, 4882, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0824600265872094, "compression_ratio": 1.6140350877192982, "no_speech_prob": 0.00734545337036252}, {"id": 310, "seek": 104700, "start": 1066.0, "end": 1068.0, "text": " There are 10 spirit animals.", "tokens": [51314, 821, 366, 1266, 3797, 4882, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0824600265872094, "compression_ratio": 1.6140350877192982, "no_speech_prob": 0.00734545337036252}, {"id": 311, "seek": 104700, "start": 1068.0, "end": 1074.0, "text": " Airplanes, cars, birds, cats, deer, dogs, frogs, horses, ships, and trucks.", "tokens": [51414, 5774, 564, 12779, 11, 5163, 11, 9009, 11, 11111, 11, 17120, 11, 7197, 11, 37107, 11, 13112, 11, 11434, 11, 293, 16156, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0824600265872094, "compression_ratio": 1.6140350877192982, "no_speech_prob": 0.00734545337036252}, {"id": 312, "seek": 107400, "start": 1074.0, "end": 1075.0, "text": " This problem is much harder.", "tokens": [50364, 639, 1154, 307, 709, 6081, 13, 50414], "temperature": 0.0, "avg_logprob": -0.06494664412278395, "compression_ratio": 1.6366559485530547, "no_speech_prob": 0.01243058405816555}, {"id": 313, "seek": 107400, "start": 1075.0, "end": 1079.0, "text": " With these tiny thumbnails, I sometimes can't figure out what it is.", "tokens": [50414, 2022, 613, 5870, 46987, 11, 286, 2171, 393, 380, 2573, 484, 437, 309, 307, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06494664412278395, "compression_ratio": 1.6366559485530547, "no_speech_prob": 0.01243058405816555}, {"id": 314, "seek": 107400, "start": 1079.0, "end": 1080.0, "text": " But same idea.", "tokens": [50614, 583, 912, 1558, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06494664412278395, "compression_ratio": 1.6366559485530547, "no_speech_prob": 0.01243058405816555}, {"id": 315, "seek": 107400, "start": 1080.0, "end": 1082.0, "text": " Days later, we get results.", "tokens": [50664, 26007, 1780, 11, 321, 483, 3542, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06494664412278395, "compression_ratio": 1.6366559485530547, "no_speech_prob": 0.01243058405816555}, {"id": 316, "seek": 107400, "start": 1082.0, "end": 1086.0, "text": " The ranking here is the same for this problem, and we can draw basically the same conclusion.", "tokens": [50764, 440, 17833, 510, 307, 264, 912, 337, 341, 1154, 11, 293, 321, 393, 2642, 1936, 264, 912, 10063, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06494664412278395, "compression_ratio": 1.6366559485530547, "no_speech_prob": 0.01243058405816555}, {"id": 317, "seek": 107400, "start": 1086.0, "end": 1090.0, "text": " An accuracy of 53 doesn't sound that good, but keep in mind there are 10 different classes.", "tokens": [50964, 1107, 14170, 295, 21860, 1177, 380, 1626, 300, 665, 11, 457, 1066, 294, 1575, 456, 366, 1266, 819, 5359, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06494664412278395, "compression_ratio": 1.6366559485530547, "no_speech_prob": 0.01243058405816555}, {"id": 318, "seek": 107400, "start": 1090.0, "end": 1093.0, "text": " So if you just guess randomly, that's an accuracy of 10%.", "tokens": [51164, 407, 498, 291, 445, 2041, 16979, 11, 300, 311, 364, 14170, 295, 1266, 6856, 51314], "temperature": 0.0, "avg_logprob": -0.06494664412278395, "compression_ratio": 1.6366559485530547, "no_speech_prob": 0.01243058405816555}, {"id": 319, "seek": 107400, "start": 1093.0, "end": 1095.0, "text": " So we are substantially learning here.", "tokens": [51314, 407, 321, 366, 30797, 2539, 510, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06494664412278395, "compression_ratio": 1.6366559485530547, "no_speech_prob": 0.01243058405816555}, {"id": 320, "seek": 107400, "start": 1095.0, "end": 1099.0, "text": " But another way to understand our accuracy is to compare it to what's come before us.", "tokens": [51414, 583, 1071, 636, 281, 1223, 527, 14170, 307, 281, 6794, 309, 281, 437, 311, 808, 949, 505, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06494664412278395, "compression_ratio": 1.6366559485530547, "no_speech_prob": 0.01243058405816555}, {"id": 321, "seek": 109900, "start": 1099.0, "end": 1104.0, "text": " These are standardized problems, and so a lot of researchers have posted their results.", "tokens": [50364, 1981, 366, 31677, 2740, 11, 293, 370, 257, 688, 295, 10309, 362, 9437, 641, 3542, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07150367268344812, "compression_ratio": 1.6985294117647058, "no_speech_prob": 0.45682698488235474}, {"id": 322, "seek": 109900, "start": 1104.0, "end": 1108.0, "text": " So I can check the leaderboard and scrolling all the way down to the bottom.", "tokens": [50614, 407, 286, 393, 1520, 264, 5263, 3787, 293, 29053, 439, 264, 636, 760, 281, 264, 2767, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07150367268344812, "compression_ratio": 1.6985294117647058, "no_speech_prob": 0.45682698488235474}, {"id": 323, "seek": 109900, "start": 1108.0, "end": 1114.0, "text": " I can see that my results are, in fact, the worst result of all time.", "tokens": [50814, 286, 393, 536, 300, 452, 3542, 366, 11, 294, 1186, 11, 264, 5855, 1874, 295, 439, 565, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07150367268344812, "compression_ratio": 1.6985294117647058, "no_speech_prob": 0.45682698488235474}, {"id": 324, "seek": 109900, "start": 1114.0, "end": 1115.0, "text": " That's not too bad.", "tokens": [51114, 663, 311, 406, 886, 1578, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07150367268344812, "compression_ratio": 1.6985294117647058, "no_speech_prob": 0.45682698488235474}, {"id": 325, "seek": 109900, "start": 1115.0, "end": 1118.0, "text": " Last place is the last winner.", "tokens": [51164, 5264, 1081, 307, 264, 1036, 8507, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07150367268344812, "compression_ratio": 1.6985294117647058, "no_speech_prob": 0.45682698488235474}, {"id": 326, "seek": 109900, "start": 1118.0, "end": 1123.0, "text": " Now putting aside the aesthetic and ideological considerations, there is something to this.", "tokens": [51314, 823, 3372, 7359, 264, 20092, 293, 35341, 24070, 11, 456, 307, 746, 281, 341, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07150367268344812, "compression_ratio": 1.6985294117647058, "no_speech_prob": 0.45682698488235474}, {"id": 327, "seek": 109900, "start": 1123.0, "end": 1128.0, "text": " Recently, I feel like deep learning is getting a little too good, a little too fast.", "tokens": [51564, 20072, 11, 286, 841, 411, 2452, 2539, 307, 1242, 257, 707, 886, 665, 11, 257, 707, 886, 2370, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07150367268344812, "compression_ratio": 1.6985294117647058, "no_speech_prob": 0.45682698488235474}, {"id": 328, "seek": 112800, "start": 1128.0, "end": 1131.0, "text": " So maybe we could just slow it down a bit.", "tokens": [50364, 407, 1310, 321, 727, 445, 2964, 309, 760, 257, 857, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0728190791222357, "compression_ratio": 1.61986301369863, "no_speech_prob": 0.001648403238505125}, {"id": 329, "seek": 112800, "start": 1131.0, "end": 1134.0, "text": " The third problem is, of course, chess.", "tokens": [50514, 440, 2636, 1154, 307, 11, 295, 1164, 11, 24122, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0728190791222357, "compression_ratio": 1.61986301369863, "no_speech_prob": 0.001648403238505125}, {"id": 330, "seek": 112800, "start": 1134.0, "end": 1140.0, "text": " I take millions of positions from a public database, and I ask Stockfish a strong chess engine, which side is winning?", "tokens": [50664, 286, 747, 6803, 295, 8432, 490, 257, 1908, 8149, 11, 293, 286, 1029, 17857, 11608, 257, 2068, 24122, 2848, 11, 597, 1252, 307, 8224, 30, 50964], "temperature": 0.0, "avg_logprob": -0.0728190791222357, "compression_ratio": 1.61986301369863, "no_speech_prob": 0.001648403238505125}, {"id": 331, "seek": 112800, "start": 1140.0, "end": 1142.0, "text": " There's two classes of results here.", "tokens": [50964, 821, 311, 732, 5359, 295, 3542, 510, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0728190791222357, "compression_ratio": 1.61986301369863, "no_speech_prob": 0.001648403238505125}, {"id": 332, "seek": 112800, "start": 1142.0, "end": 1147.0, "text": " One side could have an edge, and it's standard to give this advantage in terms of pawns.", "tokens": [51064, 1485, 1252, 727, 362, 364, 4691, 11, 293, 309, 311, 3832, 281, 976, 341, 5002, 294, 2115, 295, 30905, 82, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0728190791222357, "compression_ratio": 1.61986301369863, "no_speech_prob": 0.001648403238505125}, {"id": 333, "seek": 112800, "start": 1147.0, "end": 1155.0, "text": " Or it could be of the form mate in negative 24, which means that black, because it's negative, has a mate in 24 moves, no matter what white does.", "tokens": [51314, 1610, 309, 727, 312, 295, 264, 1254, 11709, 294, 3671, 4022, 11, 597, 1355, 300, 2211, 11, 570, 309, 311, 3671, 11, 575, 257, 11709, 294, 4022, 6067, 11, 572, 1871, 437, 2418, 775, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0728190791222357, "compression_ratio": 1.61986301369863, "no_speech_prob": 0.001648403238505125}, {"id": 334, "seek": 115500, "start": 1155.0, "end": 1159.0, "text": " Mate is always favorable to a mirror edge, no matter how big your advantage is.", "tokens": [50364, 27594, 307, 1009, 29557, 281, 257, 8013, 4691, 11, 572, 1871, 577, 955, 428, 5002, 307, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06520447907624422, "compression_ratio": 1.6930379746835442, "no_speech_prob": 0.008315246552228928}, {"id": 335, "seek": 115500, "start": 1159.0, "end": 1166.0, "text": " One thing that's funny to me about this pawn score is that the advantage can be sort of arbitrarily high if Stockfish can't find a mate.", "tokens": [50564, 1485, 551, 300, 311, 4074, 281, 385, 466, 341, 30905, 6175, 307, 300, 264, 5002, 393, 312, 1333, 295, 19071, 3289, 1090, 498, 17857, 11608, 393, 380, 915, 257, 11709, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06520447907624422, "compression_ratio": 1.6930379746835442, "no_speech_prob": 0.008315246552228928}, {"id": 336, "seek": 115500, "start": 1166.0, "end": 1171.0, "text": " So it can give you more than 64 pawn advantage, which is funny because how are you even going to fit those on the board?", "tokens": [50914, 407, 309, 393, 976, 291, 544, 813, 12145, 30905, 5002, 11, 597, 307, 4074, 570, 577, 366, 291, 754, 516, 281, 3318, 729, 322, 264, 3150, 30, 51164], "temperature": 0.0, "avg_logprob": -0.06520447907624422, "compression_ratio": 1.6930379746835442, "no_speech_prob": 0.008315246552228928}, {"id": 337, "seek": 115500, "start": 1171.0, "end": 1172.0, "text": " Dual wheeled?", "tokens": [51164, 37625, 5589, 292, 30, 51214], "temperature": 0.0, "avg_logprob": -0.06520447907624422, "compression_ratio": 1.6930379746835442, "no_speech_prob": 0.008315246552228928}, {"id": 338, "seek": 115500, "start": 1172.0, "end": 1174.0, "text": " Actually, here's an exercise for the reader.", "tokens": [51214, 5135, 11, 510, 311, 364, 5380, 337, 264, 15149, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06520447907624422, "compression_ratio": 1.6930379746835442, "no_speech_prob": 0.008315246552228928}, {"id": 339, "seek": 115500, "start": 1174.0, "end": 1180.0, "text": " Find a position with the largest possible advantage according to Stockfish, but where it can't find mate.", "tokens": [51314, 11809, 257, 2535, 365, 264, 6443, 1944, 5002, 4650, 281, 17857, 11608, 11, 457, 689, 309, 393, 380, 915, 11709, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06520447907624422, "compression_ratio": 1.6930379746835442, "no_speech_prob": 0.008315246552228928}, {"id": 340, "seek": 115500, "start": 1180.0, "end": 1182.0, "text": " Here's the best that I could do.", "tokens": [51614, 1692, 311, 264, 1151, 300, 286, 727, 360, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06520447907624422, "compression_ratio": 1.6930379746835442, "no_speech_prob": 0.008315246552228928}, {"id": 341, "seek": 118200, "start": 1182.0, "end": 1186.0, "text": " Huge advantage for white, but no mate even after depth 89.", "tokens": [50364, 37043, 5002, 337, 2418, 11, 457, 572, 11709, 754, 934, 7161, 31877, 13, 50564], "temperature": 0.0, "avg_logprob": -0.04825304172657154, "compression_ratio": 1.7560240963855422, "no_speech_prob": 0.003945206757634878}, {"id": 342, "seek": 118200, "start": 1186.0, "end": 1194.0, "text": " I mapped these scores into the interval from negative 1 to 1, where negative 1 is the best possible result for black, me and 1, and plus 1 is the same for white.", "tokens": [50564, 286, 33318, 613, 13444, 666, 264, 15035, 490, 3671, 502, 281, 502, 11, 689, 3671, 502, 307, 264, 1151, 1944, 1874, 337, 2211, 11, 385, 293, 502, 11, 293, 1804, 502, 307, 264, 912, 337, 2418, 13, 50964], "temperature": 0.0, "avg_logprob": -0.04825304172657154, "compression_ratio": 1.7560240963855422, "no_speech_prob": 0.003945206757634878}, {"id": 343, "seek": 118200, "start": 1194.0, "end": 1198.0, "text": " And this gives me a machine learning problem, which is to learn how Stockfish rates each board.", "tokens": [50964, 400, 341, 2709, 385, 257, 3479, 2539, 1154, 11, 597, 307, 281, 1466, 577, 17857, 11608, 6846, 1184, 3150, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04825304172657154, "compression_ratio": 1.7560240963855422, "no_speech_prob": 0.003945206757634878}, {"id": 344, "seek": 118200, "start": 1198.0, "end": 1205.0, "text": " For the models that score chess positions, we could compare their predictions directly to Stockfish to understand how accurate they are.", "tokens": [51164, 1171, 264, 5245, 300, 6175, 24122, 8432, 11, 321, 727, 6794, 641, 21264, 3838, 281, 17857, 11608, 281, 1223, 577, 8559, 436, 366, 13, 51514], "temperature": 0.0, "avg_logprob": -0.04825304172657154, "compression_ratio": 1.7560240963855422, "no_speech_prob": 0.003945206757634878}, {"id": 345, "seek": 118200, "start": 1205.0, "end": 1210.0, "text": " And I did that, but I think it's more fun to use these models to create chess players and then have them play against each other.", "tokens": [51514, 400, 286, 630, 300, 11, 457, 286, 519, 309, 311, 544, 1019, 281, 764, 613, 5245, 281, 1884, 24122, 4150, 293, 550, 362, 552, 862, 1970, 1184, 661, 13, 51764], "temperature": 0.0, "avg_logprob": -0.04825304172657154, "compression_ratio": 1.7560240963855422, "no_speech_prob": 0.003945206757634878}, {"id": 346, "seek": 121000, "start": 1210.0, "end": 1217.0, "text": " These players just look at each legal move and score the resulting board and then take the move that would be most favorable to their side.", "tokens": [50364, 1981, 4150, 445, 574, 412, 1184, 5089, 1286, 293, 6175, 264, 16505, 3150, 293, 550, 747, 264, 1286, 300, 576, 312, 881, 29557, 281, 641, 1252, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06299010382758247, "compression_ratio": 1.6906906906906907, "no_speech_prob": 0.039628103375434875}, {"id": 347, "seek": 121000, "start": 1217.0, "end": 1219.0, "text": " So there's no game tree search here.", "tokens": [50714, 407, 456, 311, 572, 1216, 4230, 3164, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06299010382758247, "compression_ratio": 1.6906906906906907, "no_speech_prob": 0.039628103375434875}, {"id": 348, "seek": 121000, "start": 1219.0, "end": 1221.0, "text": " Here are the results of a tournament.", "tokens": [50814, 1692, 366, 264, 3542, 295, 257, 13713, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06299010382758247, "compression_ratio": 1.6906906906906907, "no_speech_prob": 0.039628103375434875}, {"id": 349, "seek": 121000, "start": 1221.0, "end": 1226.0, "text": " The rows are each player as white and the columns as black, and they're ordered by their final ALO rating.", "tokens": [50914, 440, 13241, 366, 1184, 4256, 382, 2418, 293, 264, 13766, 382, 2211, 11, 293, 436, 434, 8866, 538, 641, 2572, 7056, 46, 10990, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06299010382758247, "compression_ratio": 1.6906906906906907, "no_speech_prob": 0.039628103375434875}, {"id": 350, "seek": 121000, "start": 1226.0, "end": 1230.0, "text": " There's some complexity here, but the fixed versions are the ones to look at.", "tokens": [51164, 821, 311, 512, 14024, 510, 11, 457, 264, 6806, 9606, 366, 264, 2306, 281, 574, 412, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06299010382758247, "compression_ratio": 1.6906906906906907, "no_speech_prob": 0.039628103375434875}, {"id": 351, "seek": 121000, "start": 1230.0, "end": 1239.0, "text": " As usual, the rectified linear unit is performing the best, but our quote-unquote linear transfer function, grad 1, is actually in second place and not far behind.", "tokens": [51364, 1018, 7713, 11, 264, 11048, 2587, 8213, 4985, 307, 10205, 264, 1151, 11, 457, 527, 6513, 12, 409, 25016, 8213, 5003, 2445, 11, 2771, 502, 11, 307, 767, 294, 1150, 1081, 293, 406, 1400, 2261, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06299010382758247, "compression_ratio": 1.6906906906906907, "no_speech_prob": 0.039628103375434875}, {"id": 352, "seek": 123900, "start": 1239.0, "end": 1247.0, "text": " It's close to being as good as Chessmaster for the Nintendo Entertainment System, and outperforms Stockfish deluded with half random moves.", "tokens": [50364, 467, 311, 1998, 281, 885, 382, 665, 382, 761, 442, 21640, 337, 264, 11578, 25758, 8910, 11, 293, 484, 26765, 82, 17857, 11608, 1103, 23285, 365, 1922, 4974, 6067, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0672219327065797, "compression_ratio": 1.5939597315436242, "no_speech_prob": 0.007576625794172287}, {"id": 353, "seek": 123900, "start": 1247.0, "end": 1254.0, "text": " This is actually pretty impressive given that it's doing no game tree search, it's just using its intuitions about what boards are good.", "tokens": [50764, 639, 307, 767, 1238, 8992, 2212, 300, 309, 311, 884, 572, 1216, 4230, 3164, 11, 309, 311, 445, 1228, 1080, 16224, 626, 466, 437, 13293, 366, 665, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0672219327065797, "compression_ratio": 1.5939597315436242, "no_speech_prob": 0.007576625794172287}, {"id": 354, "seek": 123900, "start": 1254.0, "end": 1258.0, "text": " Of course, raw performance on these problems is not the only thing.", "tokens": [51114, 2720, 1164, 11, 8936, 3389, 322, 613, 2740, 307, 406, 264, 787, 551, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0672219327065797, "compression_ratio": 1.5939597315436242, "no_speech_prob": 0.007576625794172287}, {"id": 355, "seek": 123900, "start": 1258.0, "end": 1262.0, "text": " We ought to think about the speed of the function, as well as its aesthetics.", "tokens": [51314, 492, 13416, 281, 519, 466, 264, 3073, 295, 264, 2445, 11, 382, 731, 382, 1080, 35517, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0672219327065797, "compression_ratio": 1.5939597315436242, "no_speech_prob": 0.007576625794172287}, {"id": 356, "seek": 123900, "start": 1262.0, "end": 1265.0, "text": " Some of them have nice shapes, and others look dumb.", "tokens": [51514, 2188, 295, 552, 362, 1481, 10854, 11, 293, 2357, 574, 10316, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0672219327065797, "compression_ratio": 1.5939597315436242, "no_speech_prob": 0.007576625794172287}, {"id": 357, "seek": 126500, "start": 1265.0, "end": 1270.0, "text": " Since training takes days, where all you have to do is stare at graphs of activations,", "tokens": [50364, 4162, 3097, 2516, 1708, 11, 689, 439, 291, 362, 281, 360, 307, 22432, 412, 24877, 295, 2430, 763, 11, 50614], "temperature": 0.0, "avg_logprob": -0.0628799380678119, "compression_ratio": 1.5421686746987953, "no_speech_prob": 0.031135620549321175}, {"id": 358, "seek": 126500, "start": 1270.0, "end": 1276.0, "text": " whether those look cool, or boring, or vaporwave, also bears some consideration.", "tokens": [50614, 1968, 729, 574, 1627, 11, 420, 9989, 11, 420, 20358, 35461, 11, 611, 17276, 512, 12381, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0628799380678119, "compression_ratio": 1.5421686746987953, "no_speech_prob": 0.031135620549321175}, {"id": 359, "seek": 126500, "start": 1276.0, "end": 1280.0, "text": " The key finding here is that the professor was wrong.", "tokens": [50914, 440, 2141, 5006, 510, 307, 300, 264, 8304, 390, 2085, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0628799380678119, "compression_ratio": 1.5421686746987953, "no_speech_prob": 0.031135620549321175}, {"id": 360, "seek": 126500, "start": 1280.0, "end": 1286.0, "text": " You absolutely can use a linear transfer function, as long as you don't need it to be both good and fast.", "tokens": [51114, 509, 3122, 393, 764, 257, 8213, 5003, 2445, 11, 382, 938, 382, 291, 500, 380, 643, 309, 281, 312, 1293, 665, 293, 2370, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0628799380678119, "compression_ratio": 1.5421686746987953, "no_speech_prob": 0.031135620549321175}, {"id": 361, "seek": 126500, "start": 1286.0, "end": 1287.0, "text": " Defeated.", "tokens": [51414, 1346, 2106, 770, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0628799380678119, "compression_ratio": 1.5421686746987953, "no_speech_prob": 0.031135620549321175}, {"id": 362, "seek": 126500, "start": 1287.0, "end": 1290.0, "text": " Having gotten my revenge, we could stop there.", "tokens": [51464, 10222, 5768, 452, 16711, 11, 321, 727, 1590, 456, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0628799380678119, "compression_ratio": 1.5421686746987953, "no_speech_prob": 0.031135620549321175}, {"id": 363, "seek": 129000, "start": 1290.0, "end": 1295.0, "text": " But when have huge breakthroughs in science and technology ever happened by stopping there?", "tokens": [50364, 583, 562, 362, 2603, 22397, 82, 294, 3497, 293, 2899, 1562, 2011, 538, 12767, 456, 30, 50614], "temperature": 0.0, "avg_logprob": -0.04474733670552571, "compression_ratio": 1.637223974763407, "no_speech_prob": 0.008061268366873264}, {"id": 364, "seek": 129000, "start": 1295.0, "end": 1298.0, "text": " So, it's on to the next level.", "tokens": [50614, 407, 11, 309, 311, 322, 281, 264, 958, 1496, 13, 50764], "temperature": 0.0, "avg_logprob": -0.04474733670552571, "compression_ratio": 1.637223974763407, "no_speech_prob": 0.008061268366873264}, {"id": 365, "seek": 129000, "start": 1298.0, "end": 1301.0, "text": " So far, all the functions we've considered have been monotonic.", "tokens": [50764, 407, 1400, 11, 439, 264, 6828, 321, 600, 4888, 362, 668, 1108, 310, 11630, 13, 50914], "temperature": 0.0, "avg_logprob": -0.04474733670552571, "compression_ratio": 1.637223974763407, "no_speech_prob": 0.008061268366873264}, {"id": 366, "seek": 129000, "start": 1301.0, "end": 1306.0, "text": " That's because both plus and multiplication, even when you round, have this property.", "tokens": [50914, 663, 311, 570, 1293, 1804, 293, 27290, 11, 754, 562, 291, 3098, 11, 362, 341, 4707, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04474733670552571, "compression_ratio": 1.637223974763407, "no_speech_prob": 0.008061268366873264}, {"id": 367, "seek": 129000, "start": 1306.0, "end": 1308.0, "text": " But we're certainly not limited to this.", "tokens": [51164, 583, 321, 434, 3297, 406, 5567, 281, 341, 13, 51264], "temperature": 0.0, "avg_logprob": -0.04474733670552571, "compression_ratio": 1.637223974763407, "no_speech_prob": 0.008061268366873264}, {"id": 368, "seek": 129000, "start": 1308.0, "end": 1314.0, "text": " For example, if x appears multiple times under addition or subtraction, we can get much more interesting functions.", "tokens": [51264, 1171, 1365, 11, 498, 2031, 7038, 3866, 1413, 833, 4500, 420, 16390, 313, 11, 321, 393, 483, 709, 544, 1880, 6828, 13, 51564], "temperature": 0.0, "avg_logprob": -0.04474733670552571, "compression_ratio": 1.637223974763407, "no_speech_prob": 0.008061268366873264}, {"id": 369, "seek": 129000, "start": 1314.0, "end": 1318.0, "text": " Another way to look at this is interference patterns between linear functions are linear.", "tokens": [51564, 3996, 636, 281, 574, 412, 341, 307, 24497, 8294, 1296, 8213, 6828, 366, 8213, 13, 51764], "temperature": 0.0, "avg_logprob": -0.04474733670552571, "compression_ratio": 1.637223974763407, "no_speech_prob": 0.008061268366873264}, {"id": 370, "seek": 131800, "start": 1318.0, "end": 1325.0, "text": " For example, x minus 4,096 minus x plus 4,096 is linear.", "tokens": [50364, 1171, 1365, 11, 2031, 3175, 1017, 11, 13811, 21, 3175, 2031, 1804, 1017, 11, 13811, 21, 307, 8213, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09915701548258464, "compression_ratio": 1.5099601593625498, "no_speech_prob": 0.020329579710960388}, {"id": 371, "seek": 131800, "start": 1325.0, "end": 1327.0, "text": " It's mathematically equal to zero.", "tokens": [50714, 467, 311, 44003, 2681, 281, 4018, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09915701548258464, "compression_ratio": 1.5099601593625498, "no_speech_prob": 0.020329579710960388}, {"id": 372, "seek": 131800, "start": 1327.0, "end": 1331.0, "text": " But in half precision floating point, it produces this square wave function.", "tokens": [50814, 583, 294, 1922, 18356, 12607, 935, 11, 309, 14725, 341, 3732, 5772, 2445, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09915701548258464, "compression_ratio": 1.5099601593625498, "no_speech_prob": 0.020329579710960388}, {"id": 373, "seek": 131800, "start": 1331.0, "end": 1334.0, "text": " Now, this function isn't as well behaved as it looks.", "tokens": [51014, 823, 11, 341, 2445, 1943, 380, 382, 731, 48249, 382, 309, 1542, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09915701548258464, "compression_ratio": 1.5099601593625498, "no_speech_prob": 0.020329579710960388}, {"id": 374, "seek": 131800, "start": 1334.0, "end": 1340.0, "text": " One of those intervals is width one exactly, but the other is very slightly smaller than one.", "tokens": [51164, 1485, 295, 729, 26651, 307, 11402, 472, 2293, 11, 457, 264, 661, 307, 588, 4748, 4356, 813, 472, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09915701548258464, "compression_ratio": 1.5099601593625498, "no_speech_prob": 0.020329579710960388}, {"id": 375, "seek": 131800, "start": 1340.0, "end": 1343.0, "text": " And again, this has to do with perversities of roundoff error.", "tokens": [51464, 400, 797, 11, 341, 575, 281, 360, 365, 680, 840, 1088, 295, 3098, 4506, 6713, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09915701548258464, "compression_ratio": 1.5099601593625498, "no_speech_prob": 0.020329579710960388}, {"id": 376, "seek": 134300, "start": 1343.0, "end": 1350.0, "text": " Or if we take that grad one function that we've studied and subtract x from that, we get this nice triangle wave.", "tokens": [50364, 1610, 498, 321, 747, 300, 2771, 472, 2445, 300, 321, 600, 9454, 293, 16390, 2031, 490, 300, 11, 321, 483, 341, 1481, 13369, 5772, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0618907172104408, "compression_ratio": 1.757462686567164, "no_speech_prob": 0.12937356531620026}, {"id": 377, "seek": 134300, "start": 1350.0, "end": 1354.0, "text": " By stringing functions together, we can make all sorts of interesting patterns.", "tokens": [50714, 3146, 6798, 278, 6828, 1214, 11, 321, 393, 652, 439, 7527, 295, 1880, 8294, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0618907172104408, "compression_ratio": 1.757462686567164, "no_speech_prob": 0.12937356531620026}, {"id": 378, "seek": 134300, "start": 1354.0, "end": 1359.0, "text": " In fact, if we have any shape in mind, we can try approximating it with one of these functions,", "tokens": [50914, 682, 1186, 11, 498, 321, 362, 604, 3909, 294, 1575, 11, 321, 393, 853, 8542, 990, 309, 365, 472, 295, 613, 6828, 11, 51164], "temperature": 0.0, "avg_logprob": -0.0618907172104408, "compression_ratio": 1.757462686567164, "no_speech_prob": 0.12937356531620026}, {"id": 379, "seek": 134300, "start": 1359.0, "end": 1362.0, "text": " subtract it from the desired shape to get a new shape,", "tokens": [51164, 16390, 309, 490, 264, 14721, 3909, 281, 483, 257, 777, 3909, 11, 51314], "temperature": 0.0, "avg_logprob": -0.0618907172104408, "compression_ratio": 1.757462686567164, "no_speech_prob": 0.12937356531620026}, {"id": 380, "seek": 134300, "start": 1362.0, "end": 1365.0, "text": " and as long as we're getting smaller, we can just keep doing this,", "tokens": [51314, 293, 382, 938, 382, 321, 434, 1242, 4356, 11, 321, 393, 445, 1066, 884, 341, 11, 51464], "temperature": 0.0, "avg_logprob": -0.0618907172104408, "compression_ratio": 1.757462686567164, "no_speech_prob": 0.12937356531620026}, {"id": 381, "seek": 134300, "start": 1365.0, "end": 1369.0, "text": " successively approximating that shape like a Taylor series.", "tokens": [51464, 2245, 3413, 8542, 990, 300, 3909, 411, 257, 12060, 2638, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0618907172104408, "compression_ratio": 1.757462686567164, "no_speech_prob": 0.12937356531620026}, {"id": 382, "seek": 136900, "start": 1370.0, "end": 1374.0, "text": " So if we could make any shape, let's make a fractal. Those are good shapes.", "tokens": [50414, 407, 498, 321, 727, 652, 604, 3909, 11, 718, 311, 652, 257, 17948, 304, 13, 3950, 366, 665, 10854, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09428329167403574, "compression_ratio": 1.6753731343283582, "no_speech_prob": 0.0015977324219420552}, {"id": 383, "seek": 136900, "start": 1374.0, "end": 1377.0, "text": " The Mandelbrot set is the radiohead of fractals.", "tokens": [50614, 440, 15458, 338, 1443, 310, 992, 307, 264, 6477, 1934, 295, 17948, 1124, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09428329167403574, "compression_ratio": 1.6753731343283582, "no_speech_prob": 0.0015977324219420552}, {"id": 384, "seek": 136900, "start": 1377.0, "end": 1382.0, "text": " Here we're going to use complex numbers, and we use a coordinate system where the x-coordinate is the real part,", "tokens": [50764, 1692, 321, 434, 516, 281, 764, 3997, 3547, 11, 293, 321, 764, 257, 15670, 1185, 689, 264, 2031, 12, 1291, 37326, 307, 264, 957, 644, 11, 51014], "temperature": 0.0, "avg_logprob": -0.09428329167403574, "compression_ratio": 1.6753731343283582, "no_speech_prob": 0.0015977324219420552}, {"id": 385, "seek": 136900, "start": 1382.0, "end": 1385.0, "text": " and the y-coordinate is the imaginary part.", "tokens": [51014, 293, 264, 288, 12, 1291, 37326, 307, 264, 26164, 644, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09428329167403574, "compression_ratio": 1.6753731343283582, "no_speech_prob": 0.0015977324219420552}, {"id": 386, "seek": 136900, "start": 1385.0, "end": 1388.0, "text": " For any given point C, we repeatedly square and add,", "tokens": [51164, 1171, 604, 2212, 935, 383, 11, 321, 18227, 3732, 293, 909, 11, 51314], "temperature": 0.0, "avg_logprob": -0.09428329167403574, "compression_ratio": 1.6753731343283582, "no_speech_prob": 0.0015977324219420552}, {"id": 387, "seek": 136900, "start": 1388.0, "end": 1391.0, "text": " and this point moves around in a crazy way.", "tokens": [51314, 293, 341, 935, 6067, 926, 294, 257, 3219, 636, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09428329167403574, "compression_ratio": 1.6753731343283582, "no_speech_prob": 0.0015977324219420552}, {"id": 388, "seek": 136900, "start": 1391.0, "end": 1394.0, "text": " And based on how quickly it converges or diverges, we give it a color.", "tokens": [51464, 400, 2361, 322, 577, 2661, 309, 9652, 2880, 420, 18558, 2880, 11, 321, 976, 309, 257, 2017, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09428329167403574, "compression_ratio": 1.6753731343283582, "no_speech_prob": 0.0015977324219420552}, {"id": 389, "seek": 139400, "start": 1394.0, "end": 1400.0, "text": " Boom. 2D Mandelbrot.", "tokens": [50364, 15523, 13, 568, 35, 15458, 338, 1443, 310, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08964410454335839, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.004754958208650351}, {"id": 390, "seek": 139400, "start": 1400.0, "end": 1404.0, "text": " Now adding C is linear. Squaring, however, is not,", "tokens": [50664, 823, 5127, 383, 307, 8213, 13, 8683, 1921, 11, 4461, 11, 307, 406, 11, 50864], "temperature": 0.0, "avg_logprob": -0.08964410454335839, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.004754958208650351}, {"id": 391, "seek": 139400, "start": 1404.0, "end": 1408.0, "text": " but we just said we can approximate any shape using interference patterns.", "tokens": [50864, 457, 321, 445, 848, 321, 393, 30874, 604, 3909, 1228, 24497, 8294, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08964410454335839, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.004754958208650351}, {"id": 392, "seek": 139400, "start": 1408.0, "end": 1414.0, "text": " So here's a rough approximation of f of x equals x squared, using only linear operations.", "tokens": [51064, 407, 510, 311, 257, 5903, 28023, 295, 283, 295, 2031, 6915, 2031, 8889, 11, 1228, 787, 8213, 7705, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08964410454335839, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.004754958208650351}, {"id": 393, "seek": 139400, "start": 1414.0, "end": 1417.0, "text": " So this has some funny business near the origin,", "tokens": [51364, 407, 341, 575, 512, 4074, 1606, 2651, 264, 4957, 11, 51514], "temperature": 0.0, "avg_logprob": -0.08964410454335839, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.004754958208650351}, {"id": 394, "seek": 139400, "start": 1417.0, "end": 1421.0, "text": " but you might think we could use this to plot a kind of perverted Mandelbrot.", "tokens": [51514, 457, 291, 1062, 519, 321, 727, 764, 341, 281, 7542, 257, 733, 295, 680, 18537, 15458, 338, 1443, 310, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08964410454335839, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.004754958208650351}, {"id": 395, "seek": 142100, "start": 1421.0, "end": 1424.0, "text": " Unfortunately, if we try, we get this piece of garbage.", "tokens": [50364, 8590, 11, 498, 321, 853, 11, 321, 483, 341, 2522, 295, 14150, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06842580048934273, "compression_ratio": 1.7366548042704626, "no_speech_prob": 0.004198628012090921}, {"id": 396, "seek": 142100, "start": 1424.0, "end": 1426.0, "text": " This stupid blotch sucks.", "tokens": [50514, 639, 6631, 888, 32785, 15846, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06842580048934273, "compression_ratio": 1.7366548042704626, "no_speech_prob": 0.004198628012090921}, {"id": 397, "seek": 142100, "start": 1426.0, "end": 1430.0, "text": " To understand why, we need to look at the definition of squaring for complex numbers.", "tokens": [50614, 1407, 1223, 983, 11, 321, 643, 281, 574, 412, 264, 7123, 295, 2339, 1921, 337, 3997, 3547, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06842580048934273, "compression_ratio": 1.7366548042704626, "no_speech_prob": 0.004198628012090921}, {"id": 398, "seek": 142100, "start": 1430.0, "end": 1434.0, "text": " When we multiply this out, the A and the B get mixed together.", "tokens": [50814, 1133, 321, 12972, 341, 484, 11, 264, 316, 293, 264, 363, 483, 7467, 1214, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06842580048934273, "compression_ratio": 1.7366548042704626, "no_speech_prob": 0.004198628012090921}, {"id": 399, "seek": 142100, "start": 1434.0, "end": 1438.0, "text": " The real part has some A in it, and because I squared is negative 1,", "tokens": [51014, 440, 957, 644, 575, 512, 316, 294, 309, 11, 293, 570, 286, 8889, 307, 3671, 502, 11, 51214], "temperature": 0.0, "avg_logprob": -0.06842580048934273, "compression_ratio": 1.7366548042704626, "no_speech_prob": 0.004198628012090921}, {"id": 400, "seek": 142100, "start": 1438.0, "end": 1442.0, "text": " some B in it, and the imaginary part also has some A and some B in it.", "tokens": [51214, 512, 363, 294, 309, 11, 293, 264, 26164, 644, 611, 575, 512, 316, 293, 512, 363, 294, 309, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06842580048934273, "compression_ratio": 1.7366548042704626, "no_speech_prob": 0.004198628012090921}, {"id": 401, "seek": 142100, "start": 1442.0, "end": 1445.0, "text": " So we get this cross-pollination, and that means x and y-coordinates are mixed,", "tokens": [51414, 407, 321, 483, 341, 3278, 12, 79, 1833, 2486, 11, 293, 300, 1355, 2031, 293, 288, 12, 1291, 6241, 1024, 366, 7467, 11, 51564], "temperature": 0.0, "avg_logprob": -0.06842580048934273, "compression_ratio": 1.7366548042704626, "no_speech_prob": 0.004198628012090921}, {"id": 402, "seek": 142100, "start": 1445.0, "end": 1447.0, "text": " and you get a kind of weird rotation.", "tokens": [51564, 293, 291, 483, 257, 733, 295, 3657, 12447, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06842580048934273, "compression_ratio": 1.7366548042704626, "no_speech_prob": 0.004198628012090921}, {"id": 403, "seek": 144700, "start": 1447.0, "end": 1451.0, "text": " But let's look at the purely linear operations on complex numbers.", "tokens": [50364, 583, 718, 311, 574, 412, 264, 17491, 8213, 7705, 322, 3997, 3547, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06157063662521238, "compression_ratio": 1.674911660777385, "no_speech_prob": 0.007815168239176273}, {"id": 404, "seek": 144700, "start": 1451.0, "end": 1456.0, "text": " For both plus and scaling, the real parts stay real,", "tokens": [50564, 1171, 1293, 1804, 293, 21589, 11, 264, 957, 3166, 1754, 957, 11, 50814], "temperature": 0.0, "avg_logprob": -0.06157063662521238, "compression_ratio": 1.674911660777385, "no_speech_prob": 0.007815168239176273}, {"id": 405, "seek": 144700, "start": 1456.0, "end": 1460.0, "text": " and the imaginary parts stay imaginary, with no cross-pollination.", "tokens": [50814, 293, 264, 26164, 3166, 1754, 26164, 11, 365, 572, 3278, 12, 79, 1833, 2486, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06157063662521238, "compression_ratio": 1.674911660777385, "no_speech_prob": 0.007815168239176273}, {"id": 406, "seek": 144700, "start": 1460.0, "end": 1463.0, "text": " So no matter how we use these operations, even with floating-point roundoff,", "tokens": [51014, 407, 572, 1871, 577, 321, 764, 613, 7705, 11, 754, 365, 12607, 12, 6053, 3098, 4506, 11, 51164], "temperature": 0.0, "avg_logprob": -0.06157063662521238, "compression_ratio": 1.674911660777385, "no_speech_prob": 0.007815168239176273}, {"id": 407, "seek": 144700, "start": 1463.0, "end": 1466.0, "text": " we're not going to get any mixing between the coordinates.", "tokens": [51164, 321, 434, 406, 516, 281, 483, 604, 11983, 1296, 264, 21056, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06157063662521238, "compression_ratio": 1.674911660777385, "no_speech_prob": 0.007815168239176273}, {"id": 408, "seek": 144700, "start": 1466.0, "end": 1469.0, "text": " And that's why the fractal has these rows and columns of sameness.", "tokens": [51314, 400, 300, 311, 983, 264, 17948, 304, 575, 613, 13241, 293, 13766, 295, 3247, 15264, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06157063662521238, "compression_ratio": 1.674911660777385, "no_speech_prob": 0.007815168239176273}, {"id": 409, "seek": 144700, "start": 1469.0, "end": 1473.0, "text": " It's really just two independent functions, one on the x-axis and one on the y-axis.", "tokens": [51464, 467, 311, 534, 445, 732, 6695, 6828, 11, 472, 322, 264, 2031, 12, 24633, 293, 472, 322, 264, 288, 12, 24633, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06157063662521238, "compression_ratio": 1.674911660777385, "no_speech_prob": 0.007815168239176273}, {"id": 410, "seek": 147300, "start": 1473.0, "end": 1478.0, "text": " So professors take note, the complex numbers do provide some refuge.", "tokens": [50364, 407, 15924, 747, 3637, 11, 264, 3997, 3547, 360, 2893, 512, 10991, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0862467825949729, "compression_ratio": 1.6171875, "no_speech_prob": 0.12935450673103333}, {"id": 411, "seek": 147300, "start": 1478.0, "end": 1481.0, "text": " It's time for another bonus digression.", "tokens": [50614, 467, 311, 565, 337, 1071, 10882, 2528, 2775, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0862467825949729, "compression_ratio": 1.6171875, "no_speech_prob": 0.12935450673103333}, {"id": 412, "seek": 147300, "start": 1481.0, "end": 1484.0, "text": " You might think you could just make a 3D Mandelbrot.", "tokens": [50764, 509, 1062, 519, 291, 727, 445, 652, 257, 805, 35, 15458, 338, 1443, 310, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0862467825949729, "compression_ratio": 1.6171875, "no_speech_prob": 0.12935450673103333}, {"id": 413, "seek": 147300, "start": 1484.0, "end": 1486.0, "text": " Just do the same thing we did before,", "tokens": [50914, 1449, 360, 264, 912, 551, 321, 630, 949, 11, 51014], "temperature": 0.0, "avg_logprob": -0.0862467825949729, "compression_ratio": 1.6171875, "no_speech_prob": 0.12935450673103333}, {"id": 414, "seek": 147300, "start": 1486.0, "end": 1488.0, "text": " but with numbers that have three components,", "tokens": [51014, 457, 365, 3547, 300, 362, 1045, 6677, 11, 51114], "temperature": 0.0, "avg_logprob": -0.0862467825949729, "compression_ratio": 1.6171875, "no_speech_prob": 0.12935450673103333}, {"id": 415, "seek": 147300, "start": 1488.0, "end": 1492.0, "text": " a real part and imaginary part and, like, a very imaginary part.", "tokens": [51114, 257, 957, 644, 293, 26164, 644, 293, 11, 411, 11, 257, 588, 26164, 644, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0862467825949729, "compression_ratio": 1.6171875, "no_speech_prob": 0.12935450673103333}, {"id": 416, "seek": 147300, "start": 1492.0, "end": 1496.0, "text": " If you try it, this old professor of Frobenius will come along", "tokens": [51314, 759, 291, 853, 309, 11, 341, 1331, 8304, 295, 25028, 1799, 4872, 486, 808, 2051, 51514], "temperature": 0.0, "avg_logprob": -0.0862467825949729, "compression_ratio": 1.6171875, "no_speech_prob": 0.12935450673103333}, {"id": 417, "seek": 147300, "start": 1496.0, "end": 1499.0, "text": " and educate you with this cool math fact.", "tokens": [51514, 293, 16092, 291, 365, 341, 1627, 5221, 1186, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0862467825949729, "compression_ratio": 1.6171875, "no_speech_prob": 0.12935450673103333}, {"id": 418, "seek": 149900, "start": 1499.0, "end": 1504.0, "text": " No matter what you do, any three-dimensional algebra is equivalent to the real or complex numbers,", "tokens": [50364, 883, 1871, 437, 291, 360, 11, 604, 1045, 12, 18759, 21989, 307, 10344, 281, 264, 957, 420, 3997, 3547, 11, 50614], "temperature": 0.0, "avg_logprob": -0.07198621946222641, "compression_ratio": 1.6754966887417218, "no_speech_prob": 0.025947311893105507}, {"id": 419, "seek": 149900, "start": 1504.0, "end": 1508.0, "text": " so it's like you didn't do anything at all, or not associative,", "tokens": [50614, 370, 309, 311, 411, 291, 994, 380, 360, 1340, 412, 439, 11, 420, 406, 4180, 1166, 11, 50814], "temperature": 0.0, "avg_logprob": -0.07198621946222641, "compression_ratio": 1.6754966887417218, "no_speech_prob": 0.025947311893105507}, {"id": 420, "seek": 149900, "start": 1508.0, "end": 1510.0, "text": " meaning the order of operations will matter.", "tokens": [50814, 3620, 264, 1668, 295, 7705, 486, 1871, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07198621946222641, "compression_ratio": 1.6754966887417218, "no_speech_prob": 0.025947311893105507}, {"id": 421, "seek": 149900, "start": 1510.0, "end": 1513.0, "text": " But you know what else isn't associative?", "tokens": [50914, 583, 291, 458, 437, 1646, 1943, 380, 4180, 1166, 30, 51064], "temperature": 0.0, "avg_logprob": -0.07198621946222641, "compression_ratio": 1.6754966887417218, "no_speech_prob": 0.025947311893105507}, {"id": 422, "seek": 149900, "start": 1513.0, "end": 1515.0, "text": " The floating-point numbers, my dude.", "tokens": [51064, 440, 12607, 12, 6053, 3547, 11, 452, 6449, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07198621946222641, "compression_ratio": 1.6754966887417218, "no_speech_prob": 0.025947311893105507}, {"id": 423, "seek": 149900, "start": 1515.0, "end": 1519.0, "text": " So it seems we don't need associativity to make fractals anyway.", "tokens": [51164, 407, 309, 2544, 321, 500, 380, 643, 4180, 30142, 281, 652, 17948, 1124, 4033, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07198621946222641, "compression_ratio": 1.6754966887417218, "no_speech_prob": 0.025947311893105507}, {"id": 424, "seek": 149900, "start": 1519.0, "end": 1525.0, "text": " Enter the baffling numbers, which is an ill-advised generalization of the complex numbers, to three dimensions.", "tokens": [51364, 10399, 264, 272, 2518, 1688, 3547, 11, 597, 307, 364, 3171, 12, 345, 24420, 2674, 2144, 295, 264, 3997, 3547, 11, 281, 1045, 12819, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07198621946222641, "compression_ratio": 1.6754966887417218, "no_speech_prob": 0.025947311893105507}, {"id": 425, "seek": 149900, "start": 1525.0, "end": 1528.0, "text": " Yes, it won't work, but we can just do it.", "tokens": [51664, 1079, 11, 309, 1582, 380, 589, 11, 457, 321, 393, 445, 360, 309, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07198621946222641, "compression_ratio": 1.6754966887417218, "no_speech_prob": 0.025947311893105507}, {"id": 426, "seek": 152800, "start": 1528.0, "end": 1530.0, "text": " Frobenius can't stop me.", "tokens": [50364, 25028, 1799, 4872, 393, 380, 1590, 385, 13, 50464], "temperature": 0.0, "avg_logprob": -0.11711641947428385, "compression_ratio": 1.484375, "no_speech_prob": 0.0035931335296481848}, {"id": 427, "seek": 152800, "start": 1530.0, "end": 1534.0, "text": " And I can use this to make a 3D fractal called the bafflebrot.", "tokens": [50464, 400, 286, 393, 764, 341, 281, 652, 257, 805, 35, 17948, 304, 1219, 264, 272, 29264, 1443, 310, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11711641947428385, "compression_ratio": 1.484375, "no_speech_prob": 0.0035931335296481848}, {"id": 428, "seek": 152800, "start": 1534.0, "end": 1538.0, "text": " Here it's sliced in half, showing a perfect ripe Mandelbrot inside.", "tokens": [50664, 1692, 309, 311, 27098, 294, 1922, 11, 4099, 257, 2176, 31421, 15458, 338, 1443, 310, 1854, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11711641947428385, "compression_ratio": 1.484375, "no_speech_prob": 0.0035931335296481848}, {"id": 429, "seek": 152800, "start": 1538.0, "end": 1543.0, "text": " The resulting 2-gigabyte file crashes every piece of software I throw at it.", "tokens": [50864, 440, 16505, 568, 12, 70, 328, 34529, 3991, 28642, 633, 2522, 295, 4722, 286, 3507, 412, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11711641947428385, "compression_ratio": 1.484375, "no_speech_prob": 0.0035931335296481848}, {"id": 430, "seek": 152800, "start": 1543.0, "end": 1544.0, "text": " I admire its spirit.", "tokens": [51114, 286, 21951, 1080, 3797, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11711641947428385, "compression_ratio": 1.484375, "no_speech_prob": 0.0035931335296481848}, {"id": 431, "seek": 152800, "start": 1544.0, "end": 1547.0, "text": " Boom, 3D fractal.", "tokens": [51164, 15523, 11, 805, 35, 17948, 304, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11711641947428385, "compression_ratio": 1.484375, "no_speech_prob": 0.0035931335296481848}, {"id": 432, "seek": 152800, "start": 1547.0, "end": 1549.0, "text": " Bezeked.", "tokens": [51314, 879, 19878, 292, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11711641947428385, "compression_ratio": 1.484375, "no_speech_prob": 0.0035931335296481848}, {"id": 433, "seek": 152800, "start": 1549.0, "end": 1552.0, "text": " We don't actually need squaring to create fractals, though.", "tokens": [51414, 492, 500, 380, 767, 643, 2339, 1921, 281, 1884, 17948, 1124, 11, 1673, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11711641947428385, "compression_ratio": 1.484375, "no_speech_prob": 0.0035931335296481848}, {"id": 434, "seek": 152800, "start": 1552.0, "end": 1554.0, "text": " We just need something kind of chaotic.", "tokens": [51564, 492, 445, 643, 746, 733, 295, 27013, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11711641947428385, "compression_ratio": 1.484375, "no_speech_prob": 0.0035931335296481848}, {"id": 435, "seek": 155400, "start": 1554.0, "end": 1558.0, "text": " I just take this function, which consists of 36,000 linear operations,", "tokens": [50364, 286, 445, 747, 341, 2445, 11, 597, 14689, 295, 8652, 11, 1360, 8213, 7705, 11, 50564], "temperature": 0.0, "avg_logprob": -0.04990900431247736, "compression_ratio": 1.7375, "no_speech_prob": 0.05831027403473854}, {"id": 436, "seek": 155400, "start": 1558.0, "end": 1563.0, "text": " and I iterate it, adding C each time, and plot the resulting magnitude.", "tokens": [50564, 293, 286, 44497, 309, 11, 5127, 383, 1184, 565, 11, 293, 7542, 264, 16505, 15668, 13, 50814], "temperature": 0.0, "avg_logprob": -0.04990900431247736, "compression_ratio": 1.7375, "no_speech_prob": 0.05831027403473854}, {"id": 437, "seek": 155400, "start": 1563.0, "end": 1564.0, "text": " I think it looks pretty nice.", "tokens": [50814, 286, 519, 309, 1542, 1238, 1481, 13, 50864], "temperature": 0.0, "avg_logprob": -0.04990900431247736, "compression_ratio": 1.7375, "no_speech_prob": 0.05831027403473854}, {"id": 438, "seek": 155400, "start": 1564.0, "end": 1567.0, "text": " I think this is a fractal, in the sense that it is chaotic.", "tokens": [50864, 286, 519, 341, 307, 257, 17948, 304, 11, 294, 264, 2020, 300, 309, 307, 27013, 13, 51014], "temperature": 0.0, "avg_logprob": -0.04990900431247736, "compression_ratio": 1.7375, "no_speech_prob": 0.05831027403473854}, {"id": 439, "seek": 155400, "start": 1567.0, "end": 1571.0, "text": " It has a color gradient, and could be on the cover of an electronic music album.", "tokens": [51014, 467, 575, 257, 2017, 16235, 11, 293, 727, 312, 322, 264, 2060, 295, 364, 10092, 1318, 6030, 13, 51214], "temperature": 0.0, "avg_logprob": -0.04990900431247736, "compression_ratio": 1.7375, "no_speech_prob": 0.05831027403473854}, {"id": 440, "seek": 155400, "start": 1571.0, "end": 1576.0, "text": " It is not a fractal, in the sense that if you zoom in on it, you get infinite detail of self-similar shapes.", "tokens": [51214, 467, 307, 406, 257, 17948, 304, 11, 294, 264, 2020, 300, 498, 291, 8863, 294, 322, 309, 11, 291, 483, 13785, 2607, 295, 2698, 12, 30937, 2202, 10854, 13, 51464], "temperature": 0.0, "avg_logprob": -0.04990900431247736, "compression_ratio": 1.7375, "no_speech_prob": 0.05831027403473854}, {"id": 441, "seek": 155400, "start": 1576.0, "end": 1579.0, "text": " In fact, as we zoom in on it only a modest amount,", "tokens": [51464, 682, 1186, 11, 382, 321, 8863, 294, 322, 309, 787, 257, 25403, 2372, 11, 51614], "temperature": 0.0, "avg_logprob": -0.04990900431247736, "compression_ratio": 1.7375, "no_speech_prob": 0.05831027403473854}, {"id": 442, "seek": 155400, "start": 1579.0, "end": 1583.0, "text": " we see rectangular pixels as we reach the limits of half-precision floating-point.", "tokens": [51614, 321, 536, 31167, 18668, 382, 321, 2524, 264, 10406, 295, 1922, 12, 3712, 40832, 12607, 12, 6053, 13, 51814], "temperature": 0.0, "avg_logprob": -0.04990900431247736, "compression_ratio": 1.7375, "no_speech_prob": 0.05831027403473854}, {"id": 443, "seek": 158300, "start": 1583.0, "end": 1586.0, "text": " And because this fractal is built by abusing those very limits,", "tokens": [50364, 400, 570, 341, 17948, 304, 307, 3094, 538, 410, 7981, 729, 588, 10406, 11, 50514], "temperature": 0.0, "avg_logprob": -0.06228322693795869, "compression_ratio": 1.6677966101694914, "no_speech_prob": 0.001867396174930036}, {"id": 444, "seek": 158300, "start": 1586.0, "end": 1589.0, "text": " it's not even possible to get more detail by increasing the accuracy.", "tokens": [50514, 309, 311, 406, 754, 1944, 281, 483, 544, 2607, 538, 5662, 264, 14170, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06228322693795869, "compression_ratio": 1.6677966101694914, "no_speech_prob": 0.001867396174930036}, {"id": 445, "seek": 158300, "start": 1589.0, "end": 1594.0, "text": " Alright, drawing fractals is fun and everything, but it's not really a game you can win.", "tokens": [50664, 2798, 11, 6316, 17948, 1124, 307, 1019, 293, 1203, 11, 457, 309, 311, 406, 534, 257, 1216, 291, 393, 1942, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06228322693795869, "compression_ratio": 1.6677966101694914, "no_speech_prob": 0.001867396174930036}, {"id": 446, "seek": 158300, "start": 1594.0, "end": 1597.0, "text": " There's no goal other than to make a cool picture.", "tokens": [50914, 821, 311, 572, 3387, 661, 813, 281, 652, 257, 1627, 3036, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06228322693795869, "compression_ratio": 1.6677966101694914, "no_speech_prob": 0.001867396174930036}, {"id": 447, "seek": 158300, "start": 1597.0, "end": 1600.0, "text": " So next, I turn to something with a clearer challenge to overcome.", "tokens": [51064, 407, 958, 11, 286, 1261, 281, 746, 365, 257, 26131, 3430, 281, 10473, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06228322693795869, "compression_ratio": 1.6677966101694914, "no_speech_prob": 0.001867396174930036}, {"id": 448, "seek": 158300, "start": 1600.0, "end": 1602.0, "text": " Linear cryptography.", "tokens": [51214, 14670, 289, 9844, 5820, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06228322693795869, "compression_ratio": 1.6677966101694914, "no_speech_prob": 0.001867396174930036}, {"id": 449, "seek": 158300, "start": 1602.0, "end": 1605.0, "text": " Cryptography is fractals minus drugs.", "tokens": [51314, 34809, 5820, 307, 17948, 1124, 3175, 7766, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06228322693795869, "compression_ratio": 1.6677966101694914, "no_speech_prob": 0.001867396174930036}, {"id": 450, "seek": 158300, "start": 1605.0, "end": 1607.0, "text": " You take some data and mess it up,", "tokens": [51464, 509, 747, 512, 1412, 293, 2082, 309, 493, 11, 51564], "temperature": 0.0, "avg_logprob": -0.06228322693795869, "compression_ratio": 1.6677966101694914, "no_speech_prob": 0.001867396174930036}, {"id": 451, "seek": 158300, "start": 1607.0, "end": 1610.0, "text": " but in a way where you can get it back again if you want.", "tokens": [51564, 457, 294, 257, 636, 689, 291, 393, 483, 309, 646, 797, 498, 291, 528, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06228322693795869, "compression_ratio": 1.6677966101694914, "no_speech_prob": 0.001867396174930036}, {"id": 452, "seek": 161000, "start": 1610.0, "end": 1615.0, "text": " Possibly the most fundamental building block of cryptography is the pseudo-random number generator.", "tokens": [50364, 33112, 3545, 264, 881, 8088, 2390, 3461, 295, 9844, 5820, 307, 264, 35899, 12, 3699, 298, 1230, 19265, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0644224106319367, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.0007321403245441616}, {"id": 453, "seek": 161000, "start": 1615.0, "end": 1618.0, "text": " This is a function that takes in a state, like a 64-bit integer,", "tokens": [50614, 639, 307, 257, 2445, 300, 2516, 294, 257, 1785, 11, 411, 257, 12145, 12, 5260, 24922, 11, 50764], "temperature": 0.0, "avg_logprob": -0.0644224106319367, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.0007321403245441616}, {"id": 454, "seek": 161000, "start": 1618.0, "end": 1622.0, "text": " and returns a new state that, quote-unquote, looks random.", "tokens": [50764, 293, 11247, 257, 777, 1785, 300, 11, 6513, 12, 409, 25016, 11, 1542, 4974, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0644224106319367, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.0007321403245441616}, {"id": 455, "seek": 161000, "start": 1622.0, "end": 1626.0, "text": " With one of those, you can generate a hash function by mixing it with some input data,", "tokens": [50964, 2022, 472, 295, 729, 11, 291, 393, 8460, 257, 22019, 2445, 538, 11983, 309, 365, 512, 4846, 1412, 11, 51164], "temperature": 0.0, "avg_logprob": -0.0644224106319367, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.0007321403245441616}, {"id": 456, "seek": 161000, "start": 1626.0, "end": 1629.0, "text": " or a symmetric block cipher using a Feistel network.", "tokens": [51164, 420, 257, 32330, 3461, 269, 21240, 1228, 257, 3697, 468, 338, 3209, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0644224106319367, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.0007321403245441616}, {"id": 457, "seek": 161000, "start": 1629.0, "end": 1631.0, "text": " So naturally, I want one of these.", "tokens": [51314, 407, 8195, 11, 286, 528, 472, 295, 613, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0644224106319367, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.0007321403245441616}, {"id": 458, "seek": 161000, "start": 1631.0, "end": 1636.0, "text": " Now, another thing that professors will tell you is that cryptographic algorithms cannot be linear.", "tokens": [51414, 823, 11, 1071, 551, 300, 15924, 486, 980, 291, 307, 300, 9844, 12295, 14642, 2644, 312, 8213, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0644224106319367, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.0007321403245441616}, {"id": 459, "seek": 163600, "start": 1636.0, "end": 1641.0, "text": " Here, linear includes within some modular ring like integers mod 256, the bytes,", "tokens": [50364, 1692, 11, 8213, 5974, 1951, 512, 31111, 4875, 411, 41674, 1072, 38882, 11, 264, 36088, 11, 50614], "temperature": 0.0, "avg_logprob": -0.0692867386725641, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.002323017455637455}, {"id": 460, "seek": 163600, "start": 1641.0, "end": 1643.0, "text": " or mod 2, the bits.", "tokens": [50614, 420, 1072, 568, 11, 264, 9239, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0692867386725641, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.002323017455637455}, {"id": 461, "seek": 163600, "start": 1643.0, "end": 1648.0, "text": " So in contrast, even though we said before that XOR can't be modeled by linear function on reels,", "tokens": [50714, 407, 294, 8712, 11, 754, 1673, 321, 848, 949, 300, 1783, 2483, 393, 380, 312, 37140, 538, 8213, 2445, 322, 319, 1625, 11, 50964], "temperature": 0.0, "avg_logprob": -0.0692867386725641, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.002323017455637455}, {"id": 462, "seek": 163600, "start": 1648.0, "end": 1651.0, "text": " XOR is considered linear in this context.", "tokens": [50964, 1783, 2483, 307, 4888, 8213, 294, 341, 4319, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0692867386725641, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.002323017455637455}, {"id": 463, "seek": 163600, "start": 1651.0, "end": 1654.0, "text": " The reason for that is linear cryptanalysis.", "tokens": [51114, 440, 1778, 337, 300, 307, 8213, 9844, 29702, 4642, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0692867386725641, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.002323017455637455}, {"id": 464, "seek": 163600, "start": 1654.0, "end": 1656.0, "text": " If your function is even a little bit linear,", "tokens": [51264, 759, 428, 2445, 307, 754, 257, 707, 857, 8213, 11, 51364], "temperature": 0.0, "avg_logprob": -0.0692867386725641, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.002323017455637455}, {"id": 465, "seek": 163600, "start": 1656.0, "end": 1661.0, "text": " then with a large collection of input-output pairs, like messages and their encrypted versions,", "tokens": [51364, 550, 365, 257, 2416, 5765, 295, 4846, 12, 346, 2582, 15494, 11, 411, 7897, 293, 641, 36663, 9606, 11, 51614], "temperature": 0.0, "avg_logprob": -0.0692867386725641, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.002323017455637455}, {"id": 466, "seek": 163600, "start": 1661.0, "end": 1665.0, "text": " you can deduce information about secrets like an encryption key.", "tokens": [51614, 291, 393, 4172, 4176, 1589, 466, 14093, 411, 364, 29575, 2141, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0692867386725641, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.002323017455637455}, {"id": 467, "seek": 166500, "start": 1665.0, "end": 1670.0, "text": " So the standard advice to construct these things is to alternate linear operations like XOR", "tokens": [50364, 407, 264, 3832, 5192, 281, 7690, 613, 721, 307, 281, 18873, 8213, 7705, 411, 1783, 2483, 50614], "temperature": 0.0, "avg_logprob": -0.08417652547359467, "compression_ratio": 1.7128712871287128, "no_speech_prob": 0.00016346192569471896}, {"id": 468, "seek": 166500, "start": 1670.0, "end": 1673.0, "text": " with nonlinear operations like substitution.", "tokens": [50614, 365, 2107, 28263, 7705, 411, 35827, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08417652547359467, "compression_ratio": 1.7128712871287128, "no_speech_prob": 0.00016346192569471896}, {"id": 469, "seek": 166500, "start": 1673.0, "end": 1677.0, "text": " Substitution is make a table of all the bytes, but permute them randomly,", "tokens": [50764, 42090, 6518, 307, 652, 257, 3199, 295, 439, 264, 36088, 11, 457, 4784, 1169, 552, 16979, 11, 50964], "temperature": 0.0, "avg_logprob": -0.08417652547359467, "compression_ratio": 1.7128712871287128, "no_speech_prob": 0.00016346192569471896}, {"id": 470, "seek": 166500, "start": 1677.0, "end": 1679.0, "text": " and then just do table lookup.", "tokens": [50964, 293, 550, 445, 360, 3199, 574, 1010, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08417652547359467, "compression_ratio": 1.7128712871287128, "no_speech_prob": 0.00016346192569471896}, {"id": 471, "seek": 166500, "start": 1679.0, "end": 1682.0, "text": " In fact, Bruce Schneier writes in the big red book,", "tokens": [51064, 682, 1186, 11, 15429, 30343, 811, 13657, 294, 264, 955, 2182, 1446, 11, 51214], "temperature": 0.0, "avg_logprob": -0.08417652547359467, "compression_ratio": 1.7128712871287128, "no_speech_prob": 0.00016346192569471896}, {"id": 472, "seek": 166500, "start": 1682.0, "end": 1685.0, "text": " substitutions are generally the only nonlinear step in an algorithm.", "tokens": [51214, 26441, 3666, 366, 5101, 264, 787, 2107, 28263, 1823, 294, 364, 9284, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08417652547359467, "compression_ratio": 1.7128712871287128, "no_speech_prob": 0.00016346192569471896}, {"id": 473, "seek": 166500, "start": 1685.0, "end": 1688.0, "text": " They are what give the block cipher its security.", "tokens": [51364, 814, 366, 437, 976, 264, 3461, 269, 21240, 1080, 3825, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08417652547359467, "compression_ratio": 1.7128712871287128, "no_speech_prob": 0.00016346192569471896}, {"id": 474, "seek": 166500, "start": 1688.0, "end": 1692.0, "text": " So of course, what we're going to do is prove this adage wrong by developing a good pseudo-random function", "tokens": [51514, 407, 295, 1164, 11, 437, 321, 434, 516, 281, 360, 307, 7081, 341, 614, 609, 2085, 538, 6416, 257, 665, 35899, 12, 3699, 298, 2445, 51714], "temperature": 0.0, "avg_logprob": -0.08417652547359467, "compression_ratio": 1.7128712871287128, "no_speech_prob": 0.00016346192569471896}, {"id": 475, "seek": 169200, "start": 1692.0, "end": 1696.0, "text": " that only uses linear operations on half-precision floating-point numbers.", "tokens": [50364, 300, 787, 4960, 8213, 7705, 322, 1922, 12, 3712, 40832, 12607, 12, 6053, 3547, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06186212192882191, "compression_ratio": 1.6089965397923875, "no_speech_prob": 0.01971649006009102}, {"id": 476, "seek": 169200, "start": 1696.0, "end": 1698.0, "text": " Now, what does it mean to be good?", "tokens": [50564, 823, 11, 437, 775, 309, 914, 281, 312, 665, 30, 50664], "temperature": 0.0, "avg_logprob": -0.06186212192882191, "compression_ratio": 1.6089965397923875, "no_speech_prob": 0.01971649006009102}, {"id": 477, "seek": 169200, "start": 1698.0, "end": 1702.0, "text": " This is less subjective than fractals, but it is still a little tricky.", "tokens": [50664, 639, 307, 1570, 25972, 813, 17948, 1124, 11, 457, 309, 307, 920, 257, 707, 12414, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06186212192882191, "compression_ratio": 1.6089965397923875, "no_speech_prob": 0.01971649006009102}, {"id": 478, "seek": 169200, "start": 1702.0, "end": 1706.0, "text": " We don't actually even know if pseudo-random number generators exist.", "tokens": [50864, 492, 500, 380, 767, 754, 458, 498, 35899, 12, 3699, 298, 1230, 38662, 2514, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06186212192882191, "compression_ratio": 1.6089965397923875, "no_speech_prob": 0.01971649006009102}, {"id": 479, "seek": 169200, "start": 1706.0, "end": 1710.0, "text": " The best results assume that other problems are hard, but we don't have proofs of that either.", "tokens": [51064, 440, 1151, 3542, 6552, 300, 661, 2740, 366, 1152, 11, 457, 321, 500, 380, 362, 8177, 82, 295, 300, 2139, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06186212192882191, "compression_ratio": 1.6089965397923875, "no_speech_prob": 0.01971649006009102}, {"id": 480, "seek": 169200, "start": 1710.0, "end": 1714.0, "text": " There's lots of stuff that looks random, but actually isn't, like it hides a backdoor.", "tokens": [51264, 821, 311, 3195, 295, 1507, 300, 1542, 4974, 11, 457, 767, 1943, 380, 11, 411, 309, 35953, 257, 646, 10441, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06186212192882191, "compression_ratio": 1.6089965397923875, "no_speech_prob": 0.01971649006009102}, {"id": 481, "seek": 169200, "start": 1714.0, "end": 1717.0, "text": " Never forget that RSA security.", "tokens": [51464, 7344, 2870, 300, 497, 8886, 3825, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06186212192882191, "compression_ratio": 1.6089965397923875, "no_speech_prob": 0.01971649006009102}, {"id": 482, "seek": 171700, "start": 1717.0, "end": 1724.0, "text": " Yes, that RSA took a $10 million bribe from the NSA to hide a backdoor in one of their pseudo-random number generators.", "tokens": [50364, 1079, 11, 300, 497, 8886, 1890, 257, 1848, 3279, 2459, 33713, 650, 490, 264, 47299, 281, 6479, 257, 646, 10441, 294, 472, 295, 641, 35899, 12, 3699, 298, 1230, 38662, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06447530473981584, "compression_ratio": 1.6676829268292683, "no_speech_prob": 0.008846639655530453}, {"id": 483, "seek": 171700, "start": 1724.0, "end": 1730.0, "text": " Practically speaking, though, we can subject the function to a stringent battery of statistical tests,", "tokens": [50714, 19170, 984, 4124, 11, 1673, 11, 321, 393, 3983, 264, 2445, 281, 257, 6798, 317, 5809, 295, 22820, 6921, 11, 51014], "temperature": 0.0, "avg_logprob": -0.06447530473981584, "compression_ratio": 1.6676829268292683, "no_speech_prob": 0.008846639655530453}, {"id": 484, "seek": 171700, "start": 1730.0, "end": 1733.0, "text": " and if it passes all of those, that's a really good start.", "tokens": [51014, 293, 498, 309, 11335, 439, 295, 729, 11, 300, 311, 257, 534, 665, 722, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06447530473981584, "compression_ratio": 1.6676829268292683, "no_speech_prob": 0.008846639655530453}, {"id": 485, "seek": 171700, "start": 1733.0, "end": 1738.0, "text": " The function will work on half-precision floating-point numbers in the interval from negative one to one,", "tokens": [51164, 440, 2445, 486, 589, 322, 1922, 12, 3712, 40832, 12607, 12, 6053, 3547, 294, 264, 15035, 490, 3671, 472, 281, 472, 11, 51414], "temperature": 0.0, "avg_logprob": -0.06447530473981584, "compression_ratio": 1.6676829268292683, "no_speech_prob": 0.008846639655530453}, {"id": 486, "seek": 171700, "start": 1738.0, "end": 1741.0, "text": " just like the transfer functions we've been considering so far.", "tokens": [51414, 445, 411, 264, 5003, 6828, 321, 600, 668, 8079, 370, 1400, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06447530473981584, "compression_ratio": 1.6676829268292683, "no_speech_prob": 0.008846639655530453}, {"id": 487, "seek": 171700, "start": 1741.0, "end": 1743.0, "text": " Now, this is not a good choice.", "tokens": [51564, 823, 11, 341, 307, 406, 257, 665, 3922, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06447530473981584, "compression_ratio": 1.6676829268292683, "no_speech_prob": 0.008846639655530453}, {"id": 488, "seek": 171700, "start": 1743.0, "end": 1746.0, "text": " It's unnecessarily hard, but all of this is unnecessarily hard.", "tokens": [51664, 467, 311, 16799, 3289, 1152, 11, 457, 439, 295, 341, 307, 16799, 3289, 1152, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06447530473981584, "compression_ratio": 1.6676829268292683, "no_speech_prob": 0.008846639655530453}, {"id": 489, "seek": 174600, "start": 1746.0, "end": 1749.0, "text": " Now, I have to work with 64 bits.", "tokens": [50364, 823, 11, 286, 362, 281, 589, 365, 12145, 9239, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06101877490679423, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.0030751549638807774}, {"id": 490, "seek": 174600, "start": 1749.0, "end": 1753.0, "text": " I could represent each bit as a half, but that makes it too easy.", "tokens": [50514, 286, 727, 2906, 1184, 857, 382, 257, 1922, 11, 457, 300, 1669, 309, 886, 1858, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06101877490679423, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.0030751549638807774}, {"id": 491, "seek": 174600, "start": 1753.0, "end": 1757.0, "text": " So I'm going to represent it as 8 bytes, each byte represented by a half.", "tokens": [50714, 407, 286, 478, 516, 281, 2906, 309, 382, 1649, 36088, 11, 1184, 40846, 10379, 538, 257, 1922, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06101877490679423, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.0030751549638807774}, {"id": 492, "seek": 174600, "start": 1757.0, "end": 1763.0, "text": " To represent a byte as a half, I'll divide the interval from negative one to one into 256 segments,", "tokens": [50914, 1407, 2906, 257, 40846, 382, 257, 1922, 11, 286, 603, 9845, 264, 15035, 490, 3671, 472, 281, 472, 666, 38882, 19904, 11, 51214], "temperature": 0.0, "avg_logprob": -0.06101877490679423, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.0030751549638807774}, {"id": 493, "seek": 174600, "start": 1763.0, "end": 1768.0, "text": " and I'll allow any floating-point value within that interval to represent the corresponding byte.", "tokens": [51214, 293, 286, 603, 2089, 604, 12607, 12, 6053, 2158, 1951, 300, 15035, 281, 2906, 264, 11760, 40846, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06101877490679423, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.0030751549638807774}, {"id": 494, "seek": 176800, "start": 1769.0, "end": 1776.0, "text": " So anything from 124 over 128 to 125 over 128 will represent the number 252.", "tokens": [50414, 407, 1340, 490, 2272, 19, 670, 29810, 281, 25276, 670, 29810, 486, 2906, 264, 1230, 3552, 17, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05689399892633611, "compression_ratio": 1.6729323308270676, "no_speech_prob": 0.23931416869163513}, {"id": 495, "seek": 176800, "start": 1776.0, "end": 1779.0, "text": " And again, allowing any number here is unnecessarily hard.", "tokens": [50764, 400, 797, 11, 8293, 604, 1230, 510, 307, 16799, 3289, 1152, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05689399892633611, "compression_ratio": 1.6729323308270676, "no_speech_prob": 0.23931416869163513}, {"id": 496, "seek": 176800, "start": 1779.0, "end": 1782.0, "text": " In the next section, we'll see a much better way to do this that's much faster.", "tokens": [50914, 682, 264, 958, 3541, 11, 321, 603, 536, 257, 709, 1101, 636, 281, 360, 341, 300, 311, 709, 4663, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05689399892633611, "compression_ratio": 1.6729323308270676, "no_speech_prob": 0.23931416869163513}, {"id": 497, "seek": 176800, "start": 1782.0, "end": 1788.0, "text": " But by struggling with this one, we'll at least demonstrate complete mastery over the sort of continuous domain.", "tokens": [51064, 583, 538, 9314, 365, 341, 472, 11, 321, 603, 412, 1935, 11698, 3566, 37951, 670, 264, 1333, 295, 10957, 9274, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05689399892633611, "compression_ratio": 1.6729323308270676, "no_speech_prob": 0.23931416869163513}, {"id": 498, "seek": 176800, "start": 1788.0, "end": 1791.0, "text": " So this function will take in 8 halves and return 8 halves.", "tokens": [51364, 407, 341, 2445, 486, 747, 294, 1649, 38490, 293, 2736, 1649, 38490, 13, 51514], "temperature": 0.0, "avg_logprob": -0.05689399892633611, "compression_ratio": 1.6729323308270676, "no_speech_prob": 0.23931416869163513}, {"id": 499, "seek": 176800, "start": 1791.0, "end": 1794.0, "text": " And the crux of this function will be this substitution.", "tokens": [51514, 400, 264, 5140, 87, 295, 341, 2445, 486, 312, 341, 35827, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05689399892633611, "compression_ratio": 1.6729323308270676, "no_speech_prob": 0.23931416869163513}, {"id": 500, "seek": 179400, "start": 1794.0, "end": 1798.0, "text": " That's a table lookup where each of the 256 bytes is swapped for another byte,", "tokens": [50364, 663, 311, 257, 3199, 574, 1010, 689, 1184, 295, 264, 38882, 36088, 307, 50011, 337, 1071, 40846, 11, 50564], "temperature": 0.0, "avg_logprob": -0.04075384515476978, "compression_ratio": 1.7796610169491525, "no_speech_prob": 0.01282004825770855}, {"id": 501, "seek": 179400, "start": 1798.0, "end": 1803.0, "text": " or plotted as a function, each of these discrete intervals is mapped to a different interval.", "tokens": [50564, 420, 43288, 382, 257, 2445, 11, 1184, 295, 613, 27706, 26651, 307, 33318, 281, 257, 819, 15035, 13, 50814], "temperature": 0.0, "avg_logprob": -0.04075384515476978, "compression_ratio": 1.7796610169491525, "no_speech_prob": 0.01282004825770855}, {"id": 502, "seek": 179400, "start": 1803.0, "end": 1807.0, "text": " The approach we used in the previous section of fitting functions doesn't work here.", "tokens": [50814, 440, 3109, 321, 1143, 294, 264, 3894, 3541, 295, 15669, 6828, 1177, 380, 589, 510, 13, 51014], "temperature": 0.0, "avg_logprob": -0.04075384515476978, "compression_ratio": 1.7796610169491525, "no_speech_prob": 0.01282004825770855}, {"id": 503, "seek": 179400, "start": 1807.0, "end": 1809.0, "text": " We need something more exact.", "tokens": [51014, 492, 643, 746, 544, 1900, 13, 51114], "temperature": 0.0, "avg_logprob": -0.04075384515476978, "compression_ratio": 1.7796610169491525, "no_speech_prob": 0.01282004825770855}, {"id": 504, "seek": 179400, "start": 1809.0, "end": 1813.0, "text": " So I study a family of well-behaved functions called choppy functions.", "tokens": [51114, 407, 286, 2979, 257, 1605, 295, 731, 12, 29437, 12865, 6828, 1219, 7931, 8200, 6828, 13, 51314], "temperature": 0.0, "avg_logprob": -0.04075384515476978, "compression_ratio": 1.7796610169491525, "no_speech_prob": 0.01282004825770855}, {"id": 505, "seek": 179400, "start": 1813.0, "end": 1816.0, "text": " To be choppy, the function has to have a few properties.", "tokens": [51314, 1407, 312, 7931, 8200, 11, 264, 2445, 575, 281, 362, 257, 1326, 7221, 13, 51464], "temperature": 0.0, "avg_logprob": -0.04075384515476978, "compression_ratio": 1.7796610169491525, "no_speech_prob": 0.01282004825770855}, {"id": 506, "seek": 179400, "start": 1816.0, "end": 1819.0, "text": " For any value in an interval that represents some integer,", "tokens": [51464, 1171, 604, 2158, 294, 364, 15035, 300, 8855, 512, 24922, 11, 51614], "temperature": 0.0, "avg_logprob": -0.04075384515476978, "compression_ratio": 1.7796610169491525, "no_speech_prob": 0.01282004825770855}, {"id": 507, "seek": 179400, "start": 1819.0, "end": 1822.0, "text": " the function has to produce the exact same result,", "tokens": [51614, 264, 2445, 575, 281, 5258, 264, 1900, 912, 1874, 11, 51764], "temperature": 0.0, "avg_logprob": -0.04075384515476978, "compression_ratio": 1.7796610169491525, "no_speech_prob": 0.01282004825770855}, {"id": 508, "seek": 182200, "start": 1822.0, "end": 1825.0, "text": " and its output has to be the lowest value within some interval.", "tokens": [50364, 293, 1080, 5598, 575, 281, 312, 264, 12437, 2158, 1951, 512, 15035, 13, 50514], "temperature": 0.0, "avg_logprob": -0.030564626057942707, "compression_ratio": 1.7617728531855956, "no_speech_prob": 0.0006878296844661236}, {"id": 509, "seek": 182200, "start": 1825.0, "end": 1828.0, "text": " Of course, these functions can only use addition and scaling,", "tokens": [50514, 2720, 1164, 11, 613, 6828, 393, 787, 764, 4500, 293, 21589, 11, 50664], "temperature": 0.0, "avg_logprob": -0.030564626057942707, "compression_ratio": 1.7617728531855956, "no_speech_prob": 0.0006878296844661236}, {"id": 510, "seek": 182200, "start": 1828.0, "end": 1832.0, "text": " and since they're maximally permissive about what they accept and very strict about what they generate,", "tokens": [50664, 293, 1670, 436, 434, 5138, 379, 4784, 891, 488, 466, 437, 436, 3241, 293, 588, 10910, 466, 437, 436, 8460, 11, 50864], "temperature": 0.0, "avg_logprob": -0.030564626057942707, "compression_ratio": 1.7617728531855956, "no_speech_prob": 0.0006878296844661236}, {"id": 511, "seek": 182200, "start": 1832.0, "end": 1834.0, "text": " they'll be quite easy to reason about and compose.", "tokens": [50864, 436, 603, 312, 1596, 1858, 281, 1778, 466, 293, 35925, 13, 50964], "temperature": 0.0, "avg_logprob": -0.030564626057942707, "compression_ratio": 1.7617728531855956, "no_speech_prob": 0.0006878296844661236}, {"id": 512, "seek": 182200, "start": 1834.0, "end": 1838.0, "text": " In fact, we'll be able to think about them as functions from integers to integers.", "tokens": [50964, 682, 1186, 11, 321, 603, 312, 1075, 281, 519, 466, 552, 382, 6828, 490, 41674, 281, 41674, 13, 51164], "temperature": 0.0, "avg_logprob": -0.030564626057942707, "compression_ratio": 1.7617728531855956, "no_speech_prob": 0.0006878296844661236}, {"id": 513, "seek": 182200, "start": 1838.0, "end": 1840.0, "text": " So I went on a hunt for choppy functions.", "tokens": [51164, 407, 286, 1437, 322, 257, 12454, 337, 7931, 8200, 6828, 13, 51264], "temperature": 0.0, "avg_logprob": -0.030564626057942707, "compression_ratio": 1.7617728531855956, "no_speech_prob": 0.0006878296844661236}, {"id": 514, "seek": 182200, "start": 1840.0, "end": 1843.0, "text": " I wish I could tell you that I cracked the code of how to make these from scratch,", "tokens": [51264, 286, 3172, 286, 727, 980, 291, 300, 286, 25140, 264, 3089, 295, 577, 281, 652, 613, 490, 8459, 11, 51414], "temperature": 0.0, "avg_logprob": -0.030564626057942707, "compression_ratio": 1.7617728531855956, "no_speech_prob": 0.0006878296844661236}, {"id": 515, "seek": 182200, "start": 1843.0, "end": 1845.0, "text": " but I found them by computer search.", "tokens": [51414, 457, 286, 1352, 552, 538, 3820, 3164, 13, 51514], "temperature": 0.0, "avg_logprob": -0.030564626057942707, "compression_ratio": 1.7617728531855956, "no_speech_prob": 0.0006878296844661236}, {"id": 516, "seek": 182200, "start": 1845.0, "end": 1848.0, "text": " Here's an example that I can't believe I'm going to write out by hand.", "tokens": [51514, 1692, 311, 364, 1365, 300, 286, 393, 380, 1697, 286, 478, 516, 281, 2464, 484, 538, 1011, 13, 51664], "temperature": 0.0, "avg_logprob": -0.030564626057942707, "compression_ratio": 1.7617728531855956, "no_speech_prob": 0.0006878296844661236}, {"id": 517, "seek": 182200, "start": 1848.0, "end": 1850.0, "text": " This function is mathematically linear.", "tokens": [51664, 639, 2445, 307, 44003, 8213, 13, 51764], "temperature": 0.0, "avg_logprob": -0.030564626057942707, "compression_ratio": 1.7617728531855956, "no_speech_prob": 0.0006878296844661236}, {"id": 518, "seek": 185000, "start": 1850.0, "end": 1852.0, "text": " It's actually equal to a constant.", "tokens": [50364, 467, 311, 767, 2681, 281, 257, 5754, 13, 50464], "temperature": 0.0, "avg_logprob": -0.05406300572381503, "compression_ratio": 1.743421052631579, "no_speech_prob": 0.009707651101052761}, {"id": 519, "seek": 185000, "start": 1852.0, "end": 1854.0, "text": " The x's cancel out.", "tokens": [50464, 440, 2031, 311, 10373, 484, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05406300572381503, "compression_ratio": 1.743421052631579, "no_speech_prob": 0.009707651101052761}, {"id": 520, "seek": 185000, "start": 1854.0, "end": 1859.0, "text": " What this function does is return 1 if the input represents the number 249 or 0 otherwise.", "tokens": [50564, 708, 341, 2445, 775, 307, 2736, 502, 498, 264, 4846, 8855, 264, 1230, 4022, 24, 420, 1958, 5911, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05406300572381503, "compression_ratio": 1.743421052631579, "no_speech_prob": 0.009707651101052761}, {"id": 521, "seek": 185000, "start": 1859.0, "end": 1862.0, "text": " So this is a pretty useful choppy function.", "tokens": [50814, 407, 341, 307, 257, 1238, 4420, 7931, 8200, 2445, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05406300572381503, "compression_ratio": 1.743421052631579, "no_speech_prob": 0.009707651101052761}, {"id": 522, "seek": 185000, "start": 1862.0, "end": 1865.0, "text": " Since each of these represents a function from a byte to a byte,", "tokens": [50964, 4162, 1184, 295, 613, 8855, 257, 2445, 490, 257, 40846, 281, 257, 40846, 11, 51114], "temperature": 0.0, "avg_logprob": -0.05406300572381503, "compression_ratio": 1.743421052631579, "no_speech_prob": 0.009707651101052761}, {"id": 523, "seek": 185000, "start": 1865.0, "end": 1869.0, "text": " I can think of it as just a table of the bytes that it produces for each input.", "tokens": [51114, 286, 393, 519, 295, 309, 382, 445, 257, 3199, 295, 264, 36088, 300, 309, 14725, 337, 1184, 4846, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05406300572381503, "compression_ratio": 1.743421052631579, "no_speech_prob": 0.009707651101052761}, {"id": 524, "seek": 185000, "start": 1869.0, "end": 1873.0, "text": " It's a little more complicated than this because the outputs are actually from negative 1 to 1,", "tokens": [51314, 467, 311, 257, 707, 544, 6179, 813, 341, 570, 264, 23930, 366, 767, 490, 3671, 502, 281, 502, 11, 51514], "temperature": 0.0, "avg_logprob": -0.05406300572381503, "compression_ratio": 1.743421052631579, "no_speech_prob": 0.009707651101052761}, {"id": 525, "seek": 185000, "start": 1873.0, "end": 1875.0, "text": " but this is the basic idea.", "tokens": [51514, 457, 341, 307, 264, 3875, 1558, 13, 51614], "temperature": 0.0, "avg_logprob": -0.05406300572381503, "compression_ratio": 1.743421052631579, "no_speech_prob": 0.009707651101052761}, {"id": 526, "seek": 185000, "start": 1875.0, "end": 1878.0, "text": " So what I did is I generated a whole bunch of these kinds of functions.", "tokens": [51614, 407, 437, 286, 630, 307, 286, 10833, 257, 1379, 3840, 295, 613, 3685, 295, 6828, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05406300572381503, "compression_ratio": 1.743421052631579, "no_speech_prob": 0.009707651101052761}, {"id": 527, "seek": 187800, "start": 1878.0, "end": 1881.0, "text": " And every time I get a new one, or a faster version of an old one,", "tokens": [50364, 400, 633, 565, 286, 483, 257, 777, 472, 11, 420, 257, 4663, 3037, 295, 364, 1331, 472, 11, 50514], "temperature": 0.0, "avg_logprob": -0.04687561307634626, "compression_ratio": 1.7127659574468086, "no_speech_prob": 0.003707114141434431}, {"id": 528, "seek": 187800, "start": 1881.0, "end": 1884.0, "text": " I put it in a database keyed by these integers.", "tokens": [50514, 286, 829, 309, 294, 257, 8149, 2141, 292, 538, 613, 41674, 13, 50664], "temperature": 0.0, "avg_logprob": -0.04687561307634626, "compression_ratio": 1.7127659574468086, "no_speech_prob": 0.003707114141434431}, {"id": 529, "seek": 187800, "start": 1884.0, "end": 1888.0, "text": " I can also take any two of them and get their difference by subtracting them.", "tokens": [50664, 286, 393, 611, 747, 604, 732, 295, 552, 293, 483, 641, 2649, 538, 16390, 278, 552, 13, 50864], "temperature": 0.0, "avg_logprob": -0.04687561307634626, "compression_ratio": 1.7127659574468086, "no_speech_prob": 0.003707114141434431}, {"id": 530, "seek": 187800, "start": 1888.0, "end": 1890.0, "text": " That'll also be a choppy function.", "tokens": [50864, 663, 603, 611, 312, 257, 7931, 8200, 2445, 13, 50964], "temperature": 0.0, "avg_logprob": -0.04687561307634626, "compression_ratio": 1.7127659574468086, "no_speech_prob": 0.003707114141434431}, {"id": 531, "seek": 187800, "start": 1890.0, "end": 1893.0, "text": " So here's say they only differ in these two components.", "tokens": [50964, 407, 510, 311, 584, 436, 787, 743, 294, 613, 732, 6677, 13, 51114], "temperature": 0.0, "avg_logprob": -0.04687561307634626, "compression_ratio": 1.7127659574468086, "no_speech_prob": 0.003707114141434431}, {"id": 532, "seek": 187800, "start": 1893.0, "end": 1896.0, "text": " And so I get 0's everywhere except for those two columns,", "tokens": [51114, 400, 370, 286, 483, 1958, 311, 5315, 3993, 337, 729, 732, 13766, 11, 51264], "temperature": 0.0, "avg_logprob": -0.04687561307634626, "compression_ratio": 1.7127659574468086, "no_speech_prob": 0.003707114141434431}, {"id": 533, "seek": 187800, "start": 1896.0, "end": 1899.0, "text": " and this might give me a new choppy function I didn't have before.", "tokens": [51264, 293, 341, 1062, 976, 385, 257, 777, 7931, 8200, 2445, 286, 994, 380, 362, 949, 13, 51414], "temperature": 0.0, "avg_logprob": -0.04687561307634626, "compression_ratio": 1.7127659574468086, "no_speech_prob": 0.003707114141434431}, {"id": 534, "seek": 187800, "start": 1899.0, "end": 1903.0, "text": " Observe that if I ever find one that's 0 everywhere except for a single 1,", "tokens": [51414, 20707, 3768, 300, 498, 286, 1562, 915, 472, 300, 311, 1958, 5315, 3993, 337, 257, 2167, 502, 11, 51614], "temperature": 0.0, "avg_logprob": -0.04687561307634626, "compression_ratio": 1.7127659574468086, "no_speech_prob": 0.003707114141434431}, {"id": 535, "seek": 190300, "start": 1903.0, "end": 1908.0, "text": " then I can use that to modify the column in any other vector to any value that I want.", "tokens": [50364, 550, 286, 393, 764, 300, 281, 16927, 264, 7738, 294, 604, 661, 8062, 281, 604, 2158, 300, 286, 528, 13, 50614], "temperature": 0.0, "avg_logprob": -0.05906054046418932, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.06370657682418823}, {"id": 536, "seek": 190300, "start": 1908.0, "end": 1911.0, "text": " So these are special, these are basis vectors.", "tokens": [50614, 407, 613, 366, 2121, 11, 613, 366, 5143, 18875, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05906054046418932, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.06370657682418823}, {"id": 537, "seek": 190300, "start": 1911.0, "end": 1913.0, "text": " So once I've done that, this column is kind of done,", "tokens": [50764, 407, 1564, 286, 600, 1096, 300, 11, 341, 7738, 307, 733, 295, 1096, 11, 50864], "temperature": 0.0, "avg_logprob": -0.05906054046418932, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.06370657682418823}, {"id": 538, "seek": 190300, "start": 1913.0, "end": 1916.0, "text": " and I never need to find new variations of that column.", "tokens": [50864, 293, 286, 1128, 643, 281, 915, 777, 17840, 295, 300, 7738, 13, 51014], "temperature": 0.0, "avg_logprob": -0.05906054046418932, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.06370657682418823}, {"id": 539, "seek": 190300, "start": 1916.0, "end": 1918.0, "text": " So if I take a large collection of these choppy functions,", "tokens": [51014, 407, 498, 286, 747, 257, 2416, 5765, 295, 613, 7931, 8200, 6828, 11, 51114], "temperature": 0.0, "avg_logprob": -0.05906054046418932, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.06370657682418823}, {"id": 540, "seek": 190300, "start": 1918.0, "end": 1923.0, "text": " I can do a process kind of like Gauss Jordan elimination to deduce a set of basis vectors.", "tokens": [51114, 286, 393, 360, 257, 1399, 733, 295, 411, 10384, 2023, 10979, 29224, 281, 4172, 4176, 257, 992, 295, 5143, 18875, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05906054046418932, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.06370657682418823}, {"id": 541, "seek": 190300, "start": 1923.0, "end": 1926.0, "text": " And if I find a basis vector for every column for every position,", "tokens": [51364, 400, 498, 286, 915, 257, 5143, 8062, 337, 633, 7738, 337, 633, 2535, 11, 51514], "temperature": 0.0, "avg_logprob": -0.05906054046418932, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.06370657682418823}, {"id": 542, "seek": 190300, "start": 1926.0, "end": 1931.0, "text": " then I can just add those up to make any choppy function I want, for example, our substitution.", "tokens": [51514, 550, 286, 393, 445, 909, 729, 493, 281, 652, 604, 7931, 8200, 2445, 286, 528, 11, 337, 1365, 11, 527, 35827, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05906054046418932, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.06370657682418823}, {"id": 543, "seek": 193100, "start": 1931.0, "end": 1934.0, "text": " So that's pretty nice, I just need to find these basis vectors.", "tokens": [50364, 407, 300, 311, 1238, 1481, 11, 286, 445, 643, 281, 915, 613, 5143, 18875, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06068004830910342, "compression_ratio": 1.724770642201835, "no_speech_prob": 0.00043055269634351134}, {"id": 544, "seek": 193100, "start": 1934.0, "end": 1937.0, "text": " You might think that once you had a single basis vector,", "tokens": [50514, 509, 1062, 519, 300, 1564, 291, 632, 257, 2167, 5143, 8062, 11, 50664], "temperature": 0.0, "avg_logprob": -0.06068004830910342, "compression_ratio": 1.724770642201835, "no_speech_prob": 0.00043055269634351134}, {"id": 545, "seek": 193100, "start": 1937.0, "end": 1940.0, "text": " you could shift that column around, like to another position,", "tokens": [50664, 291, 727, 5513, 300, 7738, 926, 11, 411, 281, 1071, 2535, 11, 50814], "temperature": 0.0, "avg_logprob": -0.06068004830910342, "compression_ratio": 1.724770642201835, "no_speech_prob": 0.00043055269634351134}, {"id": 546, "seek": 193100, "start": 1940.0, "end": 1943.0, "text": " by just calling your function on a shifted version of x.", "tokens": [50814, 538, 445, 5141, 428, 2445, 322, 257, 18892, 3037, 295, 2031, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06068004830910342, "compression_ratio": 1.724770642201835, "no_speech_prob": 0.00043055269634351134}, {"id": 547, "seek": 193100, "start": 1943.0, "end": 1945.0, "text": " And in real mathematics, that would work.", "tokens": [50964, 400, 294, 957, 18666, 11, 300, 576, 589, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06068004830910342, "compression_ratio": 1.724770642201835, "no_speech_prob": 0.00043055269634351134}, {"id": 548, "seek": 193100, "start": 1945.0, "end": 1949.0, "text": " But since these functions are abusing floating point roundoff error,", "tokens": [51064, 583, 1670, 613, 6828, 366, 410, 7981, 12607, 935, 3098, 4506, 6713, 11, 51264], "temperature": 0.0, "avg_logprob": -0.06068004830910342, "compression_ratio": 1.724770642201835, "no_speech_prob": 0.00043055269634351134}, {"id": 549, "seek": 193100, "start": 1949.0, "end": 1953.0, "text": " which depends on the specific value of x, this approach will not work.", "tokens": [51264, 597, 5946, 322, 264, 2685, 2158, 295, 2031, 11, 341, 3109, 486, 406, 589, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06068004830910342, "compression_ratio": 1.724770642201835, "no_speech_prob": 0.00043055269634351134}, {"id": 550, "seek": 193100, "start": 1953.0, "end": 1956.0, "text": " You can do stuff to the output of the function like scale it or add to it,", "tokens": [51464, 509, 393, 360, 1507, 281, 264, 5598, 295, 264, 2445, 411, 4373, 309, 420, 909, 281, 309, 11, 51614], "temperature": 0.0, "avg_logprob": -0.06068004830910342, "compression_ratio": 1.724770642201835, "no_speech_prob": 0.00043055269634351134}, {"id": 551, "seek": 193100, "start": 1956.0, "end": 1959.0, "text": " and you can combine functions by taking their interference pattern.", "tokens": [51614, 293, 291, 393, 10432, 6828, 538, 1940, 641, 24497, 5102, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06068004830910342, "compression_ratio": 1.724770642201835, "no_speech_prob": 0.00043055269634351134}, {"id": 552, "seek": 195900, "start": 1959.0, "end": 1962.0, "text": " But you can't straightforwardly manipulate the input side.", "tokens": [50364, 583, 291, 393, 380, 15325, 356, 20459, 264, 4846, 1252, 13, 50514], "temperature": 0.0, "avg_logprob": -0.04878559686187515, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0029809263069182634}, {"id": 553, "seek": 195900, "start": 1962.0, "end": 1966.0, "text": " This problem is worst near the origin, where the precision is highest.", "tokens": [50514, 639, 1154, 307, 5855, 2651, 264, 4957, 11, 689, 264, 18356, 307, 6343, 13, 50714], "temperature": 0.0, "avg_logprob": -0.04878559686187515, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0029809263069182634}, {"id": 554, "seek": 195900, "start": 1966.0, "end": 1969.0, "text": " This meant that it was particularly hard to find a choppy function", "tokens": [50714, 639, 4140, 300, 309, 390, 4098, 1152, 281, 915, 257, 7931, 8200, 2445, 50864], "temperature": 0.0, "avg_logprob": -0.04878559686187515, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0029809263069182634}, {"id": 555, "seek": 195900, "start": 1969.0, "end": 1972.0, "text": " that distinguished negative and non-negative numbers exactly.", "tokens": [50864, 300, 21702, 3671, 293, 2107, 12, 28561, 1166, 3547, 2293, 13, 51014], "temperature": 0.0, "avg_logprob": -0.04878559686187515, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0029809263069182634}, {"id": 556, "seek": 195900, "start": 1972.0, "end": 1976.0, "text": " In essence, the middle two columns of my vectors would always have the same value,", "tokens": [51014, 682, 12801, 11, 264, 2808, 732, 13766, 295, 452, 18875, 576, 1009, 362, 264, 912, 2158, 11, 51214], "temperature": 0.0, "avg_logprob": -0.04878559686187515, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0029809263069182634}, {"id": 557, "seek": 195900, "start": 1976.0, "end": 1978.0, "text": " and so they wouldn't be independent.", "tokens": [51214, 293, 370, 436, 2759, 380, 312, 6695, 13, 51314], "temperature": 0.0, "avg_logprob": -0.04878559686187515, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0029809263069182634}, {"id": 558, "seek": 195900, "start": 1978.0, "end": 1980.0, "text": " I need to find some way to distinguish those two.", "tokens": [51314, 286, 643, 281, 915, 512, 636, 281, 20206, 729, 732, 13, 51414], "temperature": 0.0, "avg_logprob": -0.04878559686187515, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0029809263069182634}, {"id": 559, "seek": 195900, "start": 1980.0, "end": 1985.0, "text": " Going back to our earliest example, if we just add 128 and then subtract 128,", "tokens": [51414, 10963, 646, 281, 527, 20573, 1365, 11, 498, 321, 445, 909, 29810, 293, 550, 16390, 29810, 11, 51664], "temperature": 0.0, "avg_logprob": -0.04878559686187515, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0029809263069182634}, {"id": 560, "seek": 195900, "start": 1985.0, "end": 1988.0, "text": " we do get different behavior for negative and positive numbers,", "tokens": [51664, 321, 360, 483, 819, 5223, 337, 3671, 293, 3353, 3547, 11, 51814], "temperature": 0.0, "avg_logprob": -0.04878559686187515, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0029809263069182634}, {"id": 561, "seek": 198800, "start": 1988.0, "end": 1992.0, "text": " but if we look at the rounding near zero, a lot of negative values round up,", "tokens": [50364, 457, 498, 321, 574, 412, 264, 48237, 2651, 4018, 11, 257, 688, 295, 3671, 4190, 3098, 493, 11, 50564], "temperature": 0.0, "avg_logprob": -0.05523147655807378, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.0003353429492563009}, {"id": 562, "seek": 198800, "start": 1992.0, "end": 1994.0, "text": " like small positive values round down.", "tokens": [50564, 411, 1359, 3353, 4190, 3098, 760, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05523147655807378, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.0003353429492563009}, {"id": 563, "seek": 198800, "start": 1994.0, "end": 1995.0, "text": " And this makes sense.", "tokens": [50664, 400, 341, 1669, 2020, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05523147655807378, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.0003353429492563009}, {"id": 564, "seek": 198800, "start": 1995.0, "end": 1999.0, "text": " If you add a small negative number to 128, you get 128.", "tokens": [50714, 759, 291, 909, 257, 1359, 3671, 1230, 281, 29810, 11, 291, 483, 29810, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05523147655807378, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.0003353429492563009}, {"id": 565, "seek": 198800, "start": 1999.0, "end": 2002.0, "text": " So I hunted for the zero threshold function,", "tokens": [50914, 407, 286, 44943, 337, 264, 4018, 14678, 2445, 11, 51064], "temperature": 0.0, "avg_logprob": -0.05523147655807378, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.0003353429492563009}, {"id": 566, "seek": 198800, "start": 2002.0, "end": 2004.0, "text": " and there was a lot of manual fiddling with that.", "tokens": [51064, 293, 456, 390, 257, 688, 295, 9688, 283, 14273, 1688, 365, 300, 13, 51164], "temperature": 0.0, "avg_logprob": -0.05523147655807378, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.0003353429492563009}, {"id": 567, "seek": 198800, "start": 2004.0, "end": 2007.0, "text": " But I did eventually find one, and it looks like this.", "tokens": [51164, 583, 286, 630, 4728, 915, 472, 11, 293, 309, 1542, 411, 341, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05523147655807378, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.0003353429492563009}, {"id": 568, "seek": 198800, "start": 2007.0, "end": 2009.0, "text": " It's pretty involved.", "tokens": [51314, 467, 311, 1238, 3288, 13, 51414], "temperature": 0.0, "avg_logprob": -0.05523147655807378, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.0003353429492563009}, {"id": 569, "seek": 198800, "start": 2009.0, "end": 2013.0, "text": " One of the key things is to do a whole bunch of multiplications at the beginning,", "tokens": [51414, 1485, 295, 264, 2141, 721, 307, 281, 360, 257, 1379, 3840, 295, 17596, 763, 412, 264, 2863, 11, 51614], "temperature": 0.0, "avg_logprob": -0.05523147655807378, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.0003353429492563009}, {"id": 570, "seek": 198800, "start": 2013.0, "end": 2015.0, "text": " since these will preserve the sign.", "tokens": [51614, 1670, 613, 486, 15665, 264, 1465, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05523147655807378, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.0003353429492563009}, {"id": 571, "seek": 201500, "start": 2015.0, "end": 2019.0, "text": " Spread values away from zero without causing any corruptive rounding", "tokens": [50364, 30308, 4190, 1314, 490, 4018, 1553, 9853, 604, 17366, 488, 48237, 50564], "temperature": 0.0, "avg_logprob": -0.05437840093480478, "compression_ratio": 1.6264150943396227, "no_speech_prob": 0.0006666818517260253}, {"id": 572, "seek": 201500, "start": 2019.0, "end": 2022.0, "text": " until you can do the same old loss of precision techniques", "tokens": [50564, 1826, 291, 393, 360, 264, 912, 1331, 4470, 295, 18356, 7512, 50714], "temperature": 0.0, "avg_logprob": -0.05437840093480478, "compression_ratio": 1.6264150943396227, "no_speech_prob": 0.0006666818517260253}, {"id": 573, "seek": 201500, "start": 2022.0, "end": 2025.0, "text": " to make all the finite values the same on either side.", "tokens": [50714, 281, 652, 439, 264, 19362, 4190, 264, 912, 322, 2139, 1252, 13, 50864], "temperature": 0.0, "avg_logprob": -0.05437840093480478, "compression_ratio": 1.6264150943396227, "no_speech_prob": 0.0006666818517260253}, {"id": 574, "seek": 201500, "start": 2025.0, "end": 2029.0, "text": " With that zero threshold function solved, I can now create a basis", "tokens": [50864, 2022, 300, 4018, 14678, 2445, 13041, 11, 286, 393, 586, 1884, 257, 5143, 51064], "temperature": 0.0, "avg_logprob": -0.05437840093480478, "compression_ratio": 1.6264150943396227, "no_speech_prob": 0.0006666818517260253}, {"id": 575, "seek": 201500, "start": 2029.0, "end": 2032.0, "text": " and therefore create any function from a byte to a byte.", "tokens": [51064, 293, 4412, 1884, 604, 2445, 490, 257, 40846, 281, 257, 40846, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05437840093480478, "compression_ratio": 1.6264150943396227, "no_speech_prob": 0.0006666818517260253}, {"id": 576, "seek": 201500, "start": 2032.0, "end": 2035.0, "text": " So back to our pseudo-random number generator.", "tokens": [51214, 407, 646, 281, 527, 35899, 12, 3699, 298, 1230, 19265, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05437840093480478, "compression_ratio": 1.6264150943396227, "no_speech_prob": 0.0006666818517260253}, {"id": 577, "seek": 201500, "start": 2035.0, "end": 2040.0, "text": " The structure I'm going to use is a classic substitution permutation network.", "tokens": [51364, 440, 3877, 286, 478, 516, 281, 764, 307, 257, 7230, 35827, 4784, 11380, 3209, 13, 51614], "temperature": 0.0, "avg_logprob": -0.05437840093480478, "compression_ratio": 1.6264150943396227, "no_speech_prob": 0.0006666818517260253}, {"id": 578, "seek": 204000, "start": 2040.0, "end": 2043.0, "text": " It takes eight bytes in A through H,", "tokens": [50364, 467, 2516, 3180, 36088, 294, 316, 807, 389, 11, 50514], "temperature": 0.0, "avg_logprob": -0.053289501106037813, "compression_ratio": 1.832167832167832, "no_speech_prob": 0.0017545203445479274}, {"id": 579, "seek": 204000, "start": 2043.0, "end": 2046.0, "text": " and I apply the substitution function to each of the eight bytes.", "tokens": [50514, 293, 286, 3079, 264, 35827, 2445, 281, 1184, 295, 264, 3180, 36088, 13, 50664], "temperature": 0.0, "avg_logprob": -0.053289501106037813, "compression_ratio": 1.832167832167832, "no_speech_prob": 0.0017545203445479274}, {"id": 580, "seek": 204000, "start": 2046.0, "end": 2048.0, "text": " Then I rearrange the bits,", "tokens": [50664, 1396, 286, 39568, 264, 9239, 11, 50764], "temperature": 0.0, "avg_logprob": -0.053289501106037813, "compression_ratio": 1.832167832167832, "no_speech_prob": 0.0017545203445479274}, {"id": 581, "seek": 204000, "start": 2048.0, "end": 2052.0, "text": " apply a few more linear operations like modular plus and minus,", "tokens": [50764, 3079, 257, 1326, 544, 8213, 7705, 411, 31111, 1804, 293, 3175, 11, 50964], "temperature": 0.0, "avg_logprob": -0.053289501106037813, "compression_ratio": 1.832167832167832, "no_speech_prob": 0.0017545203445479274}, {"id": 582, "seek": 204000, "start": 2052.0, "end": 2054.0, "text": " and then I have a new state as the output.", "tokens": [50964, 293, 550, 286, 362, 257, 777, 1785, 382, 264, 5598, 13, 51064], "temperature": 0.0, "avg_logprob": -0.053289501106037813, "compression_ratio": 1.832167832167832, "no_speech_prob": 0.0017545203445479274}, {"id": 583, "seek": 204000, "start": 2054.0, "end": 2057.0, "text": " And by iterating this, you create a pseudo-random stream.", "tokens": [51064, 400, 538, 17138, 990, 341, 11, 291, 1884, 257, 35899, 12, 3699, 298, 4309, 13, 51214], "temperature": 0.0, "avg_logprob": -0.053289501106037813, "compression_ratio": 1.832167832167832, "no_speech_prob": 0.0017545203445479274}, {"id": 584, "seek": 204000, "start": 2057.0, "end": 2059.0, "text": " The substitution function we already talked about.", "tokens": [51214, 440, 35827, 2445, 321, 1217, 2825, 466, 13, 51314], "temperature": 0.0, "avg_logprob": -0.053289501106037813, "compression_ratio": 1.832167832167832, "no_speech_prob": 0.0017545203445479274}, {"id": 585, "seek": 204000, "start": 2059.0, "end": 2064.0, "text": " For permuting the bits, each of the output bytes depends on all of the input bytes.", "tokens": [51314, 1171, 4784, 10861, 264, 9239, 11, 1184, 295, 264, 5598, 36088, 5946, 322, 439, 295, 264, 4846, 36088, 13, 51564], "temperature": 0.0, "avg_logprob": -0.053289501106037813, "compression_ratio": 1.832167832167832, "no_speech_prob": 0.0017545203445479274}, {"id": 586, "seek": 204000, "start": 2064.0, "end": 2066.0, "text": " So it's not a function of one variable,", "tokens": [51564, 407, 309, 311, 406, 257, 2445, 295, 472, 7006, 11, 51664], "temperature": 0.0, "avg_logprob": -0.053289501106037813, "compression_ratio": 1.832167832167832, "no_speech_prob": 0.0017545203445479274}, {"id": 587, "seek": 204000, "start": 2066.0, "end": 2069.0, "text": " but I can construct it from functions of one variable.", "tokens": [51664, 457, 286, 393, 7690, 309, 490, 6828, 295, 472, 7006, 13, 51814], "temperature": 0.0, "avg_logprob": -0.053289501106037813, "compression_ratio": 1.832167832167832, "no_speech_prob": 0.0017545203445479274}, {"id": 588, "seek": 206900, "start": 2069.0, "end": 2072.0, "text": " If I look at this first byte in the output, let's call it y,", "tokens": [50364, 759, 286, 574, 412, 341, 700, 40846, 294, 264, 5598, 11, 718, 311, 818, 309, 288, 11, 50514], "temperature": 0.0, "avg_logprob": -0.07988819663907275, "compression_ratio": 1.8773584905660377, "no_speech_prob": 0.00027802257682196796}, {"id": 589, "seek": 206900, "start": 2072.0, "end": 2075.0, "text": " and I can look at the first byte in the input of the permutation that's x.", "tokens": [50514, 293, 286, 393, 574, 412, 264, 700, 40846, 294, 264, 4846, 295, 264, 4784, 11380, 300, 311, 2031, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07988819663907275, "compression_ratio": 1.8773584905660377, "no_speech_prob": 0.00027802257682196796}, {"id": 590, "seek": 206900, "start": 2075.0, "end": 2078.0, "text": " Note that there's just a single bit that it reads.", "tokens": [50664, 11633, 300, 456, 311, 445, 257, 2167, 857, 300, 309, 15700, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07988819663907275, "compression_ratio": 1.8773584905660377, "no_speech_prob": 0.00027802257682196796}, {"id": 591, "seek": 206900, "start": 2078.0, "end": 2081.0, "text": " Remember, I can create any function that I want of a single variable,", "tokens": [50814, 5459, 11, 286, 393, 1884, 604, 2445, 300, 286, 528, 295, 257, 2167, 7006, 11, 50964], "temperature": 0.0, "avg_logprob": -0.07988819663907275, "compression_ratio": 1.8773584905660377, "no_speech_prob": 0.00027802257682196796}, {"id": 592, "seek": 206900, "start": 2081.0, "end": 2086.0, "text": " so I construct a function that returns 128 if that bit is set in the input of the y0,", "tokens": [50964, 370, 286, 7690, 257, 2445, 300, 11247, 29810, 498, 300, 857, 307, 992, 294, 264, 4846, 295, 264, 288, 15, 11, 51214], "temperature": 0.0, "avg_logprob": -0.07988819663907275, "compression_ratio": 1.8773584905660377, "no_speech_prob": 0.00027802257682196796}, {"id": 593, "seek": 206900, "start": 2086.0, "end": 2089.0, "text": " and I do a similar thing for all the other bytes,", "tokens": [51214, 293, 286, 360, 257, 2531, 551, 337, 439, 264, 661, 36088, 11, 51364], "temperature": 0.0, "avg_logprob": -0.07988819663907275, "compression_ratio": 1.8773584905660377, "no_speech_prob": 0.00027802257682196796}, {"id": 594, "seek": 206900, "start": 2089.0, "end": 2091.0, "text": " and then I can just add up those results,", "tokens": [51364, 293, 550, 286, 393, 445, 909, 493, 729, 3542, 11, 51464], "temperature": 0.0, "avg_logprob": -0.07988819663907275, "compression_ratio": 1.8773584905660377, "no_speech_prob": 0.00027802257682196796}, {"id": 595, "seek": 206900, "start": 2091.0, "end": 2094.0, "text": " and they all set different bits, so adding is like logical or.", "tokens": [51464, 293, 436, 439, 992, 819, 9239, 11, 370, 5127, 307, 411, 14978, 420, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07988819663907275, "compression_ratio": 1.8773584905660377, "no_speech_prob": 0.00027802257682196796}, {"id": 596, "seek": 206900, "start": 2094.0, "end": 2097.0, "text": " That technique of adding independent things is really useful,", "tokens": [51614, 663, 6532, 295, 5127, 6695, 721, 307, 534, 4420, 11, 51764], "temperature": 0.0, "avg_logprob": -0.07988819663907275, "compression_ratio": 1.8773584905660377, "no_speech_prob": 0.00027802257682196796}, {"id": 597, "seek": 206900, "start": 2097.0, "end": 2098.0, "text": " and we're going to use it more later.", "tokens": [51764, 293, 321, 434, 516, 281, 764, 309, 544, 1780, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07988819663907275, "compression_ratio": 1.8773584905660377, "no_speech_prob": 0.00027802257682196796}, {"id": 598, "seek": 209800, "start": 2098.0, "end": 2100.0, "text": " The last piece is modular addition.", "tokens": [50364, 440, 1036, 2522, 307, 31111, 4500, 13, 50464], "temperature": 0.0, "avg_logprob": -0.060612907657375585, "compression_ratio": 1.7981072555205047, "no_speech_prob": 0.007345391903072596}, {"id": 599, "seek": 209800, "start": 2100.0, "end": 2103.0, "text": " I have addition, of course, but on bytes it needs to wrap around", "tokens": [50464, 286, 362, 4500, 11, 295, 1164, 11, 457, 322, 36088, 309, 2203, 281, 7019, 926, 50614], "temperature": 0.0, "avg_logprob": -0.060612907657375585, "compression_ratio": 1.7981072555205047, "no_speech_prob": 0.007345391903072596}, {"id": 600, "seek": 209800, "start": 2103.0, "end": 2106.0, "text": " if the result is greater than 256, or in this case, greater than 1.", "tokens": [50614, 498, 264, 1874, 307, 5044, 813, 38882, 11, 420, 294, 341, 1389, 11, 5044, 813, 502, 13, 50764], "temperature": 0.0, "avg_logprob": -0.060612907657375585, "compression_ratio": 1.7981072555205047, "no_speech_prob": 0.007345391903072596}, {"id": 601, "seek": 209800, "start": 2106.0, "end": 2111.0, "text": " So if I add two of these values together, I get a result that might be as high as 2,", "tokens": [50764, 407, 498, 286, 909, 732, 295, 613, 4190, 1214, 11, 286, 483, 257, 1874, 300, 1062, 312, 382, 1090, 382, 568, 11, 51014], "temperature": 0.0, "avg_logprob": -0.060612907657375585, "compression_ratio": 1.7981072555205047, "no_speech_prob": 0.007345391903072596}, {"id": 602, "seek": 209800, "start": 2111.0, "end": 2114.0, "text": " so it looks like this, but I want it to look like this.", "tokens": [51014, 370, 309, 1542, 411, 341, 11, 457, 286, 528, 309, 281, 574, 411, 341, 13, 51164], "temperature": 0.0, "avg_logprob": -0.060612907657375585, "compression_ratio": 1.7981072555205047, "no_speech_prob": 0.007345391903072596}, {"id": 603, "seek": 209800, "start": 2114.0, "end": 2116.0, "text": " Once it gets past 1, it should go back to negative 1.", "tokens": [51164, 3443, 309, 2170, 1791, 502, 11, 309, 820, 352, 646, 281, 3671, 502, 13, 51264], "temperature": 0.0, "avg_logprob": -0.060612907657375585, "compression_ratio": 1.7981072555205047, "no_speech_prob": 0.007345391903072596}, {"id": 604, "seek": 209800, "start": 2116.0, "end": 2120.0, "text": " Fortunately, I do have a way to test whether the value is greater than a threshold like 1.", "tokens": [51264, 20652, 11, 286, 360, 362, 257, 636, 281, 1500, 1968, 264, 2158, 307, 5044, 813, 257, 14678, 411, 502, 13, 51464], "temperature": 0.0, "avg_logprob": -0.060612907657375585, "compression_ratio": 1.7981072555205047, "no_speech_prob": 0.007345391903072596}, {"id": 605, "seek": 209800, "start": 2120.0, "end": 2124.0, "text": " So modular plus takes in two arguments and adds them together,", "tokens": [51464, 407, 31111, 1804, 2516, 294, 732, 12869, 293, 10860, 552, 1214, 11, 51664], "temperature": 0.0, "avg_logprob": -0.060612907657375585, "compression_ratio": 1.7981072555205047, "no_speech_prob": 0.007345391903072596}, {"id": 606, "seek": 209800, "start": 2124.0, "end": 2127.0, "text": " and that result might be either too low or too high.", "tokens": [51664, 293, 300, 1874, 1062, 312, 2139, 886, 2295, 420, 886, 1090, 13, 51814], "temperature": 0.0, "avg_logprob": -0.060612907657375585, "compression_ratio": 1.7981072555205047, "no_speech_prob": 0.007345391903072596}, {"id": 607, "seek": 212700, "start": 2127.0, "end": 2129.0, "text": " We'll talk about the case that it's too high.", "tokens": [50364, 492, 603, 751, 466, 264, 1389, 300, 309, 311, 886, 1090, 13, 50464], "temperature": 0.0, "avg_logprob": -0.05562565667288644, "compression_ratio": 1.706060606060606, "no_speech_prob": 0.0039452179335057735}, {"id": 608, "seek": 212700, "start": 2129.0, "end": 2134.0, "text": " We test whether it's higher than 1 using the 0 threshold function,", "tokens": [50464, 492, 1500, 1968, 309, 311, 2946, 813, 502, 1228, 264, 1958, 14678, 2445, 11, 50714], "temperature": 0.0, "avg_logprob": -0.05562565667288644, "compression_ratio": 1.706060606060606, "no_speech_prob": 0.0039452179335057735}, {"id": 609, "seek": 212700, "start": 2134.0, "end": 2139.0, "text": " which returns either 1 or 0, multiply that by 2, and then subtract it away.", "tokens": [50714, 597, 11247, 2139, 502, 420, 1958, 11, 12972, 300, 538, 568, 11, 293, 550, 16390, 309, 1314, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05562565667288644, "compression_ratio": 1.706060606060606, "no_speech_prob": 0.0039452179335057735}, {"id": 610, "seek": 212700, "start": 2139.0, "end": 2143.0, "text": " So that allows us to add this corrective factor and put it back into the right range.", "tokens": [50964, 407, 300, 4045, 505, 281, 909, 341, 3006, 488, 5952, 293, 829, 309, 646, 666, 264, 558, 3613, 13, 51164], "temperature": 0.0, "avg_logprob": -0.05562565667288644, "compression_ratio": 1.706060606060606, "no_speech_prob": 0.0039452179335057735}, {"id": 611, "seek": 212700, "start": 2143.0, "end": 2146.0, "text": " Now, I mentioned before that you can't necessarily shift around functions", "tokens": [51164, 823, 11, 286, 2835, 949, 300, 291, 393, 380, 4725, 5513, 926, 6828, 51314], "temperature": 0.0, "avg_logprob": -0.05562565667288644, "compression_ratio": 1.706060606060606, "no_speech_prob": 0.0039452179335057735}, {"id": 612, "seek": 212700, "start": 2146.0, "end": 2149.0, "text": " because of loss of precision, but this will actually work for the 0 threshold function.", "tokens": [51314, 570, 295, 4470, 295, 18356, 11, 457, 341, 486, 767, 589, 337, 264, 1958, 14678, 2445, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05562565667288644, "compression_ratio": 1.706060606060606, "no_speech_prob": 0.0039452179335057735}, {"id": 613, "seek": 212700, "start": 2149.0, "end": 2151.0, "text": " We're going to come back to that in a second,", "tokens": [51464, 492, 434, 516, 281, 808, 646, 281, 300, 294, 257, 1150, 11, 51564], "temperature": 0.0, "avg_logprob": -0.05562565667288644, "compression_ratio": 1.706060606060606, "no_speech_prob": 0.0039452179335057735}, {"id": 614, "seek": 212700, "start": 2151.0, "end": 2156.0, "text": " but first I want to evaluate this random number generator to see how good it is.", "tokens": [51564, 457, 700, 286, 528, 281, 13059, 341, 4974, 1230, 19265, 281, 536, 577, 665, 309, 307, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05562565667288644, "compression_ratio": 1.706060606060606, "no_speech_prob": 0.0039452179335057735}, {"id": 615, "seek": 215600, "start": 2156.0, "end": 2161.0, "text": " In order to test this thing, I used a pre-existing suite of statistical tests called Big Crush.", "tokens": [50364, 682, 1668, 281, 1500, 341, 551, 11, 286, 1143, 257, 659, 12, 36447, 14205, 295, 22820, 6921, 1219, 5429, 44211, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06440778150626109, "compression_ratio": 1.7492354740061162, "no_speech_prob": 0.00239654746837914}, {"id": 616, "seek": 215600, "start": 2161.0, "end": 2164.0, "text": " This is like hundreds of tests that if you do things with the random numbers", "tokens": [50614, 639, 307, 411, 6779, 295, 6921, 300, 498, 291, 360, 721, 365, 264, 4974, 3547, 50764], "temperature": 0.0, "avg_logprob": -0.06440778150626109, "compression_ratio": 1.7492354740061162, "no_speech_prob": 0.00239654746837914}, {"id": 617, "seek": 215600, "start": 2164.0, "end": 2169.0, "text": " that should have a correct mathematical result, you in fact get that mathematical result,", "tokens": [50764, 300, 820, 362, 257, 3006, 18894, 1874, 11, 291, 294, 1186, 483, 300, 18894, 1874, 11, 51014], "temperature": 0.0, "avg_logprob": -0.06440778150626109, "compression_ratio": 1.7492354740061162, "no_speech_prob": 0.00239654746837914}, {"id": 618, "seek": 215600, "start": 2169.0, "end": 2171.0, "text": " and not something that's a little biased.", "tokens": [51014, 293, 406, 746, 300, 311, 257, 707, 28035, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06440778150626109, "compression_ratio": 1.7492354740061162, "no_speech_prob": 0.00239654746837914}, {"id": 619, "seek": 215600, "start": 2171.0, "end": 2173.0, "text": " It's really hard to pass these tests.", "tokens": [51114, 467, 311, 534, 1152, 281, 1320, 613, 6921, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06440778150626109, "compression_ratio": 1.7492354740061162, "no_speech_prob": 0.00239654746837914}, {"id": 620, "seek": 215600, "start": 2173.0, "end": 2175.0, "text": " You can try it out on some handmade functions if you want.", "tokens": [51214, 509, 393, 853, 309, 484, 322, 512, 39446, 6828, 498, 291, 528, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06440778150626109, "compression_ratio": 1.7492354740061162, "no_speech_prob": 0.00239654746837914}, {"id": 621, "seek": 215600, "start": 2175.0, "end": 2177.0, "text": " It's pretty good at finding bias.", "tokens": [51314, 467, 311, 1238, 665, 412, 5006, 12577, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06440778150626109, "compression_ratio": 1.7492354740061162, "no_speech_prob": 0.00239654746837914}, {"id": 622, "seek": 215600, "start": 2177.0, "end": 2181.0, "text": " This test needs like 1.6 billion bits of input to do its thing,", "tokens": [51414, 639, 1500, 2203, 411, 502, 13, 21, 5218, 9239, 295, 4846, 281, 360, 1080, 551, 11, 51614], "temperature": 0.0, "avg_logprob": -0.06440778150626109, "compression_ratio": 1.7492354740061162, "no_speech_prob": 0.00239654746837914}, {"id": 623, "seek": 215600, "start": 2181.0, "end": 2185.0, "text": " so I actually ran it on an equivalent C implementation of this function,", "tokens": [51614, 370, 286, 767, 5872, 309, 322, 364, 10344, 383, 11420, 295, 341, 2445, 11, 51814], "temperature": 0.0, "avg_logprob": -0.06440778150626109, "compression_ratio": 1.7492354740061162, "no_speech_prob": 0.00239654746837914}, {"id": 624, "seek": 218500, "start": 2185.0, "end": 2188.0, "text": " but I also test that they produce exactly the same result.", "tokens": [50364, 457, 286, 611, 1500, 300, 436, 5258, 2293, 264, 912, 1874, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07604325034401634, "compression_ratio": 1.5970149253731343, "no_speech_prob": 0.0004878190520685166}, {"id": 625, "seek": 218500, "start": 2188.0, "end": 2192.0, "text": " Even with the C implementation, this takes days to run,", "tokens": [50514, 2754, 365, 264, 383, 11420, 11, 341, 2516, 1708, 281, 1190, 11, 50714], "temperature": 0.0, "avg_logprob": -0.07604325034401634, "compression_ratio": 1.5970149253731343, "no_speech_prob": 0.0004878190520685166}, {"id": 626, "seek": 218500, "start": 2192.0, "end": 2195.0, "text": " but it did, and it passes every single test,", "tokens": [50714, 457, 309, 630, 11, 293, 309, 11335, 633, 2167, 1500, 11, 50864], "temperature": 0.0, "avg_logprob": -0.07604325034401634, "compression_ratio": 1.5970149253731343, "no_speech_prob": 0.0004878190520685166}, {"id": 627, "seek": 218500, "start": 2195.0, "end": 2200.0, "text": " so it's reasonable to believe that this function could be the basis of a decent encryption algorithm.", "tokens": [50864, 370, 309, 311, 10585, 281, 1697, 300, 341, 2445, 727, 312, 264, 5143, 295, 257, 8681, 29575, 9284, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07604325034401634, "compression_ratio": 1.5970149253731343, "no_speech_prob": 0.0004878190520685166}, {"id": 628, "seek": 218500, "start": 2200.0, "end": 2202.0, "text": " Defeated.", "tokens": [51114, 1346, 2106, 770, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07604325034401634, "compression_ratio": 1.5970149253731343, "no_speech_prob": 0.0004878190520685166}, {"id": 629, "seek": 218500, "start": 2202.0, "end": 2208.0, "text": " Now, one downside is that if you run this using the native half-precision implementation,", "tokens": [51214, 823, 11, 472, 25060, 307, 300, 498, 291, 1190, 341, 1228, 264, 8470, 1922, 12, 3712, 40832, 11420, 11, 51514], "temperature": 0.0, "avg_logprob": -0.07604325034401634, "compression_ratio": 1.5970149253731343, "no_speech_prob": 0.0004878190520685166}, {"id": 630, "seek": 218500, "start": 2208.0, "end": 2212.0, "text": " it produces 25.8 bytes a second of randomness, which is very slow.", "tokens": [51514, 309, 14725, 3552, 13, 23, 36088, 257, 1150, 295, 4974, 1287, 11, 597, 307, 588, 2964, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07604325034401634, "compression_ratio": 1.5970149253731343, "no_speech_prob": 0.0004878190520685166}, {"id": 631, "seek": 221200, "start": 2212.0, "end": 2217.0, "text": " Now, you can produce tables ahead of time so that each of those operations is just a 16-bit table lookup,", "tokens": [50364, 823, 11, 291, 393, 5258, 8020, 2286, 295, 565, 370, 300, 1184, 295, 729, 7705, 307, 445, 257, 3165, 12, 5260, 3199, 574, 1010, 11, 50614], "temperature": 0.0, "avg_logprob": -0.06343633157235605, "compression_ratio": 1.6711864406779662, "no_speech_prob": 0.02368740364909172}, {"id": 632, "seek": 221200, "start": 2217.0, "end": 2222.0, "text": " and then it'll produce 18.5 kilobytes per second, and that's still slow.", "tokens": [50614, 293, 550, 309, 603, 5258, 2443, 13, 20, 5128, 996, 43673, 680, 1150, 11, 293, 300, 311, 920, 2964, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06343633157235605, "compression_ratio": 1.6711864406779662, "no_speech_prob": 0.02368740364909172}, {"id": 633, "seek": 221200, "start": 2222.0, "end": 2227.0, "text": " But if you were trapped on a desert island and all you had were linear floating-point operations,", "tokens": [50864, 583, 498, 291, 645, 14994, 322, 257, 11029, 6077, 293, 439, 291, 632, 645, 8213, 12607, 12, 6053, 7705, 11, 51114], "temperature": 0.0, "avg_logprob": -0.06343633157235605, "compression_ratio": 1.6711864406779662, "no_speech_prob": 0.02368740364909172}, {"id": 634, "seek": 221200, "start": 2227.0, "end": 2229.0, "text": " I guess you could do worse than this.", "tokens": [51114, 286, 2041, 291, 727, 360, 5324, 813, 341, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06343633157235605, "compression_ratio": 1.6711864406779662, "no_speech_prob": 0.02368740364909172}, {"id": 635, "seek": 221200, "start": 2229.0, "end": 2234.0, "text": " Of course, if you're trapped on a desert island, I don't recommend encrypting your messages.", "tokens": [51214, 2720, 1164, 11, 498, 291, 434, 14994, 322, 257, 11029, 6077, 11, 286, 500, 380, 2748, 17972, 662, 278, 428, 7897, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06343633157235605, "compression_ratio": 1.6711864406779662, "no_speech_prob": 0.02368740364909172}, {"id": 636, "seek": 221200, "start": 2234.0, "end": 2237.0, "text": " This is just not a good way to get rescued.", "tokens": [51464, 639, 307, 445, 406, 257, 665, 636, 281, 483, 31757, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06343633157235605, "compression_ratio": 1.6711864406779662, "no_speech_prob": 0.02368740364909172}, {"id": 637, "seek": 221200, "start": 2237.0, "end": 2240.0, "text": " So I said I'd come back to this bit here.", "tokens": [51614, 407, 286, 848, 286, 1116, 808, 646, 281, 341, 857, 510, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06343633157235605, "compression_ratio": 1.6711864406779662, "no_speech_prob": 0.02368740364909172}, {"id": 638, "seek": 224000, "start": 2240.0, "end": 2244.0, "text": " We used the zero-threshold function to test if a sum was greater than one", "tokens": [50364, 492, 1143, 264, 4018, 12, 392, 14214, 2445, 281, 1500, 498, 257, 2408, 390, 5044, 813, 472, 50564], "temperature": 0.0, "avg_logprob": -0.07188655916324332, "compression_ratio": 1.6430976430976432, "no_speech_prob": 0.003945105243474245}, {"id": 639, "seek": 224000, "start": 2244.0, "end": 2248.0, "text": " so that we could implement modular arithmetic by subtracting off a corrective factor.", "tokens": [50564, 370, 300, 321, 727, 4445, 31111, 42973, 538, 16390, 278, 766, 257, 3006, 488, 5952, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07188655916324332, "compression_ratio": 1.6430976430976432, "no_speech_prob": 0.003945105243474245}, {"id": 640, "seek": 224000, "start": 2248.0, "end": 2252.0, "text": " Once upon a time, I told you you couldn't just shift around the inputs to functions,", "tokens": [50764, 3443, 3564, 257, 565, 11, 286, 1907, 291, 291, 2809, 380, 445, 5513, 926, 264, 15743, 281, 6828, 11, 50964], "temperature": 0.0, "avg_logprob": -0.07188655916324332, "compression_ratio": 1.6430976430976432, "no_speech_prob": 0.003945105243474245}, {"id": 641, "seek": 224000, "start": 2252.0, "end": 2256.0, "text": " and this is true in general, but the zero-threshold function, because it operates at zero,", "tokens": [50964, 293, 341, 307, 2074, 294, 2674, 11, 457, 264, 4018, 12, 392, 14214, 2445, 11, 570, 309, 22577, 412, 4018, 11, 51164], "temperature": 0.0, "avg_logprob": -0.07188655916324332, "compression_ratio": 1.6430976430976432, "no_speech_prob": 0.003945105243474245}, {"id": 642, "seek": 224000, "start": 2256.0, "end": 2262.0, "text": " which is the most precise region for floating-point, actually does admit this behavior within a certain range.", "tokens": [51164, 597, 307, 264, 881, 13600, 4458, 337, 12607, 12, 6053, 11, 767, 775, 9796, 341, 5223, 1951, 257, 1629, 3613, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07188655916324332, "compression_ratio": 1.6430976430976432, "no_speech_prob": 0.003945105243474245}, {"id": 643, "seek": 224000, "start": 2262.0, "end": 2265.0, "text": " If I have some value in mind, like 0.125,", "tokens": [51464, 759, 286, 362, 512, 2158, 294, 1575, 11, 411, 1958, 13, 48804, 11, 51614], "temperature": 0.0, "avg_logprob": -0.07188655916324332, "compression_ratio": 1.6430976430976432, "no_speech_prob": 0.003945105243474245}, {"id": 644, "seek": 226500, "start": 2265.0, "end": 2270.0, "text": " and I want a function that tests whether the input is just greater than or equal to 0.125,", "tokens": [50364, 293, 286, 528, 257, 2445, 300, 6921, 1968, 264, 4846, 307, 445, 5044, 813, 420, 2681, 281, 1958, 13, 48804, 11, 50614], "temperature": 0.0, "avg_logprob": -0.0463871990677214, "compression_ratio": 1.7491289198606272, "no_speech_prob": 0.005554611794650555}, {"id": 645, "seek": 226500, "start": 2270.0, "end": 2272.0, "text": " that looks like this,", "tokens": [50614, 300, 1542, 411, 341, 11, 50714], "temperature": 0.0, "avg_logprob": -0.0463871990677214, "compression_ratio": 1.7491289198606272, "no_speech_prob": 0.005554611794650555}, {"id": 646, "seek": 226500, "start": 2272.0, "end": 2277.0, "text": " and I can do that by just subtracting 0.125 from the input and passing it to the zero-threshold function.", "tokens": [50714, 293, 286, 393, 360, 300, 538, 445, 16390, 278, 1958, 13, 48804, 490, 264, 4846, 293, 8437, 309, 281, 264, 4018, 12, 392, 14214, 2445, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0463871990677214, "compression_ratio": 1.7491289198606272, "no_speech_prob": 0.005554611794650555}, {"id": 647, "seek": 226500, "start": 2277.0, "end": 2281.0, "text": " And if the input is exactly 0.125, we get back exactly zero.", "tokens": [50964, 400, 498, 264, 4846, 307, 2293, 1958, 13, 48804, 11, 321, 483, 646, 2293, 4018, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0463871990677214, "compression_ratio": 1.7491289198606272, "no_speech_prob": 0.005554611794650555}, {"id": 648, "seek": 226500, "start": 2281.0, "end": 2285.0, "text": " This works for most numbers, but there are some limits.", "tokens": [51164, 639, 1985, 337, 881, 3547, 11, 457, 456, 366, 512, 10406, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0463871990677214, "compression_ratio": 1.7491289198606272, "no_speech_prob": 0.005554611794650555}, {"id": 649, "seek": 226500, "start": 2285.0, "end": 2288.0, "text": " So on the y-axis here, we have different choices of threshold.", "tokens": [51364, 407, 322, 264, 288, 12, 24633, 510, 11, 321, 362, 819, 7994, 295, 14678, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0463871990677214, "compression_ratio": 1.7491289198606272, "no_speech_prob": 0.005554611794650555}, {"id": 650, "seek": 226500, "start": 2288.0, "end": 2293.0, "text": " On the x-axis, we have all of the possible inputs, and this is all of the finite floating-point values.", "tokens": [51514, 1282, 264, 2031, 12, 24633, 11, 321, 362, 439, 295, 264, 1944, 15743, 11, 293, 341, 307, 439, 295, 264, 19362, 12607, 12, 6053, 4190, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0463871990677214, "compression_ratio": 1.7491289198606272, "no_speech_prob": 0.005554611794650555}, {"id": 651, "seek": 229300, "start": 2293.0, "end": 2295.0, "text": " The green region is where we get the right answer.", "tokens": [50364, 440, 3092, 4458, 307, 689, 321, 483, 264, 558, 1867, 13, 50464], "temperature": 0.0, "avg_logprob": -0.056400509441600126, "compression_ratio": 1.8372881355932202, "no_speech_prob": 0.0009399070404469967}, {"id": 652, "seek": 229300, "start": 2295.0, "end": 2297.0, "text": " The red region is where it's wrong.", "tokens": [50464, 440, 2182, 4458, 307, 689, 309, 311, 2085, 13, 50564], "temperature": 0.0, "avg_logprob": -0.056400509441600126, "compression_ratio": 1.8372881355932202, "no_speech_prob": 0.0009399070404469967}, {"id": 653, "seek": 229300, "start": 2297.0, "end": 2302.0, "text": " The only reason it's ever wrong is that we end up getting an infinite value during that computation.", "tokens": [50564, 440, 787, 1778, 309, 311, 1562, 2085, 307, 300, 321, 917, 493, 1242, 364, 13785, 2158, 1830, 300, 24903, 13, 50814], "temperature": 0.0, "avg_logprob": -0.056400509441600126, "compression_ratio": 1.8372881355932202, "no_speech_prob": 0.0009399070404469967}, {"id": 654, "seek": 229300, "start": 2302.0, "end": 2304.0, "text": " Otherwise, this would all work out.", "tokens": [50814, 10328, 11, 341, 576, 439, 589, 484, 13, 50914], "temperature": 0.0, "avg_logprob": -0.056400509441600126, "compression_ratio": 1.8372881355932202, "no_speech_prob": 0.0009399070404469967}, {"id": 655, "seek": 229300, "start": 2304.0, "end": 2306.0, "text": " The green region is pretty big.", "tokens": [50914, 440, 3092, 4458, 307, 1238, 955, 13, 51014], "temperature": 0.0, "avg_logprob": -0.056400509441600126, "compression_ratio": 1.8372881355932202, "no_speech_prob": 0.0009399070404469967}, {"id": 656, "seek": 229300, "start": 2306.0, "end": 2309.0, "text": " It always works out when the input and the threshold is exactly the same, because then you get zero,", "tokens": [51014, 467, 1009, 1985, 484, 562, 264, 4846, 293, 264, 14678, 307, 2293, 264, 912, 11, 570, 550, 291, 483, 4018, 11, 51164], "temperature": 0.0, "avg_logprob": -0.056400509441600126, "compression_ratio": 1.8372881355932202, "no_speech_prob": 0.0009399070404469967}, {"id": 657, "seek": 229300, "start": 2309.0, "end": 2311.0, "text": " and then you're not going to have any infinities.", "tokens": [51164, 293, 550, 291, 434, 406, 516, 281, 362, 604, 7193, 1088, 13, 51264], "temperature": 0.0, "avg_logprob": -0.056400509441600126, "compression_ratio": 1.8372881355932202, "no_speech_prob": 0.0009399070404469967}, {"id": 658, "seek": 229300, "start": 2311.0, "end": 2315.0, "text": " But as they get farther from one another, the value you're testing is larger,", "tokens": [51264, 583, 382, 436, 483, 20344, 490, 472, 1071, 11, 264, 2158, 291, 434, 4997, 307, 4833, 11, 51464], "temperature": 0.0, "avg_logprob": -0.056400509441600126, "compression_ratio": 1.8372881355932202, "no_speech_prob": 0.0009399070404469967}, {"id": 659, "seek": 229300, "start": 2315.0, "end": 2318.0, "text": " and therefore you're more likely to encounter infinities.", "tokens": [51464, 293, 4412, 291, 434, 544, 3700, 281, 8593, 7193, 1088, 13, 51614], "temperature": 0.0, "avg_logprob": -0.056400509441600126, "compression_ratio": 1.8372881355932202, "no_speech_prob": 0.0009399070404469967}, {"id": 660, "seek": 231800, "start": 2318.0, "end": 2321.0, "text": " The highlighted region is everything from negative one to one,", "tokens": [50364, 440, 17173, 4458, 307, 1203, 490, 3671, 472, 281, 472, 11, 50514], "temperature": 0.0, "avg_logprob": -0.10753042110498401, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.015422149561345577}, {"id": 661, "seek": 231800, "start": 2321.0, "end": 2323.0, "text": " which accounts for almost half of the finite numbers.", "tokens": [50514, 597, 9402, 337, 1920, 1922, 295, 264, 19362, 3547, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10753042110498401, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.015422149561345577}, {"id": 662, "seek": 231800, "start": 2323.0, "end": 2326.0, "text": " And you can see we've covered pretty much this entire interval.", "tokens": [50614, 400, 291, 393, 536, 321, 600, 5343, 1238, 709, 341, 2302, 15035, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10753042110498401, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.015422149561345577}, {"id": 663, "seek": 231800, "start": 2326.0, "end": 2331.0, "text": " There is this one corner, like a couple numbers that don't work.", "tokens": [50764, 821, 307, 341, 472, 4538, 11, 411, 257, 1916, 3547, 300, 500, 380, 589, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10753042110498401, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.015422149561345577}, {"id": 664, "seek": 231800, "start": 2331.0, "end": 2333.0, "text": " But it's, I mean, we can do...", "tokens": [51014, 583, 309, 311, 11, 286, 914, 11, 321, 393, 360, 485, 51114], "temperature": 0.0, "avg_logprob": -0.10753042110498401, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.015422149561345577}, {"id": 665, "seek": 231800, "start": 2333.0, "end": 2334.0, "text": " Okay.", "tokens": [51114, 1033, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10753042110498401, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.015422149561345577}, {"id": 666, "seek": 231800, "start": 2334.0, "end": 2335.0, "text": " Alright, fine.", "tokens": [51164, 2798, 11, 2489, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10753042110498401, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.015422149561345577}, {"id": 667, "seek": 231800, "start": 2335.0, "end": 2337.0, "text": " I'll fix it.", "tokens": [51214, 286, 603, 3191, 309, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10753042110498401, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.015422149561345577}, {"id": 668, "seek": 231800, "start": 2338.0, "end": 2340.0, "text": " Alright, now I can sleep soundly.", "tokens": [51364, 2798, 11, 586, 286, 393, 2817, 1626, 356, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10753042110498401, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.015422149561345577}, {"id": 669, "seek": 231800, "start": 2340.0, "end": 2342.0, "text": " Here's a new version of the zero-threshold function,", "tokens": [51464, 1692, 311, 257, 777, 3037, 295, 264, 4018, 12, 392, 14214, 2445, 11, 51564], "temperature": 0.0, "avg_logprob": -0.10753042110498401, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.015422149561345577}, {"id": 670, "seek": 231800, "start": 2342.0, "end": 2345.0, "text": " which works on the entire negative one to one interval.", "tokens": [51564, 597, 1985, 322, 264, 2302, 3671, 472, 281, 472, 15035, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10753042110498401, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.015422149561345577}, {"id": 671, "seek": 231800, "start": 2345.0, "end": 2347.0, "text": " And more than that, in fact,", "tokens": [51714, 400, 544, 813, 300, 11, 294, 1186, 11, 51814], "temperature": 0.0, "avg_logprob": -0.10753042110498401, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.015422149561345577}, {"id": 672, "seek": 234700, "start": 2347.0, "end": 2349.0, "text": " I found this with computer search again,", "tokens": [50364, 286, 1352, 341, 365, 3820, 3164, 797, 11, 50464], "temperature": 0.0, "avg_logprob": -0.049121853283473425, "compression_ratio": 1.795031055900621, "no_speech_prob": 0.000261182663962245}, {"id": 673, "seek": 234700, "start": 2349.0, "end": 2351.0, "text": " trying to maximize the size of the interval on which it works.", "tokens": [50464, 1382, 281, 19874, 264, 2744, 295, 264, 15035, 322, 597, 309, 1985, 13, 50564], "temperature": 0.0, "avg_logprob": -0.049121853283473425, "compression_ratio": 1.795031055900621, "no_speech_prob": 0.000261182663962245}, {"id": 674, "seek": 234700, "start": 2351.0, "end": 2353.0, "text": " And basically it's the same as before,", "tokens": [50564, 400, 1936, 309, 311, 264, 912, 382, 949, 11, 50664], "temperature": 0.0, "avg_logprob": -0.049121853283473425, "compression_ratio": 1.795031055900621, "no_speech_prob": 0.000261182663962245}, {"id": 675, "seek": 234700, "start": 2353.0, "end": 2355.0, "text": " but more careful about intermediate computations", "tokens": [50664, 457, 544, 5026, 466, 19376, 2807, 763, 50764], "temperature": 0.0, "avg_logprob": -0.049121853283473425, "compression_ratio": 1.795031055900621, "no_speech_prob": 0.000261182663962245}, {"id": 676, "seek": 234700, "start": 2355.0, "end": 2357.0, "text": " so that it doesn't touch infinity by accident.", "tokens": [50764, 370, 300, 309, 1177, 380, 2557, 13202, 538, 6398, 13, 50864], "temperature": 0.0, "avg_logprob": -0.049121853283473425, "compression_ratio": 1.795031055900621, "no_speech_prob": 0.000261182663962245}, {"id": 677, "seek": 234700, "start": 2357.0, "end": 2360.0, "text": " So now that I know that this works for every value in there,", "tokens": [50864, 407, 586, 300, 286, 458, 300, 341, 1985, 337, 633, 2158, 294, 456, 11, 51014], "temperature": 0.0, "avg_logprob": -0.049121853283473425, "compression_ratio": 1.795031055900621, "no_speech_prob": 0.000261182663962245}, {"id": 678, "seek": 234700, "start": 2360.0, "end": 2364.0, "text": " I can actually use it to generate literally any function that I want on that interval.", "tokens": [51014, 286, 393, 767, 764, 309, 281, 8460, 3736, 604, 2445, 300, 286, 528, 322, 300, 15035, 13, 51214], "temperature": 0.0, "avg_logprob": -0.049121853283473425, "compression_ratio": 1.795031055900621, "no_speech_prob": 0.000261182663962245}, {"id": 679, "seek": 234700, "start": 2364.0, "end": 2367.0, "text": " The first step is to take this general-purpose greater-than function", "tokens": [51214, 440, 700, 1823, 307, 281, 747, 341, 2674, 12, 42601, 5044, 12, 24852, 2445, 51364], "temperature": 0.0, "avg_logprob": -0.049121853283473425, "compression_ratio": 1.795031055900621, "no_speech_prob": 0.000261182663962245}, {"id": 680, "seek": 234700, "start": 2367.0, "end": 2371.0, "text": " and turn it into a general-purpose exact equals function.", "tokens": [51364, 293, 1261, 309, 666, 257, 2674, 12, 42601, 1900, 6915, 2445, 13, 51564], "temperature": 0.0, "avg_logprob": -0.049121853283473425, "compression_ratio": 1.795031055900621, "no_speech_prob": 0.000261182663962245}, {"id": 681, "seek": 234700, "start": 2371.0, "end": 2374.0, "text": " I check whether the input is greater than or equal to the value,", "tokens": [51564, 286, 1520, 1968, 264, 4846, 307, 5044, 813, 420, 2681, 281, 264, 2158, 11, 51714], "temperature": 0.0, "avg_logprob": -0.049121853283473425, "compression_ratio": 1.795031055900621, "no_speech_prob": 0.000261182663962245}, {"id": 682, "seek": 237400, "start": 2374.0, "end": 2377.0, "text": " but then subtract off a corrective factor.", "tokens": [50364, 457, 550, 16390, 766, 257, 3006, 488, 5952, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06133902295035605, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.011330769397318363}, {"id": 683, "seek": 237400, "start": 2377.0, "end": 2380.0, "text": " If the input is greater than or equal to the next floating-point number,", "tokens": [50514, 759, 264, 4846, 307, 5044, 813, 420, 2681, 281, 264, 958, 12607, 12, 6053, 1230, 11, 50664], "temperature": 0.0, "avg_logprob": -0.06133902295035605, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.011330769397318363}, {"id": 684, "seek": 237400, "start": 2380.0, "end": 2382.0, "text": " that's this next after thing.", "tokens": [50664, 300, 311, 341, 958, 934, 551, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06133902295035605, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.011330769397318363}, {"id": 685, "seek": 237400, "start": 2382.0, "end": 2384.0, "text": " This returns one if the input is exactly v.", "tokens": [50764, 639, 11247, 472, 498, 264, 4846, 307, 2293, 371, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06133902295035605, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.011330769397318363}, {"id": 686, "seek": 237400, "start": 2384.0, "end": 2386.0, "text": " And then I just make an enormous expression.", "tokens": [50864, 400, 550, 286, 445, 652, 364, 11322, 6114, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06133902295035605, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.011330769397318363}, {"id": 687, "seek": 237400, "start": 2386.0, "end": 2388.0, "text": " There's only a finite number of floating-point inputs.", "tokens": [50964, 821, 311, 787, 257, 19362, 1230, 295, 12607, 12, 6053, 15743, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06133902295035605, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.011330769397318363}, {"id": 688, "seek": 237400, "start": 2388.0, "end": 2391.0, "text": " So for each one, I test whether it's exactly equal to that,", "tokens": [51064, 407, 337, 1184, 472, 11, 286, 1500, 1968, 309, 311, 2293, 2681, 281, 300, 11, 51214], "temperature": 0.0, "avg_logprob": -0.06133902295035605, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.011330769397318363}, {"id": 689, "seek": 237400, "start": 2391.0, "end": 2393.0, "text": " giving zero or one.", "tokens": [51214, 2902, 4018, 420, 472, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06133902295035605, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.011330769397318363}, {"id": 690, "seek": 237400, "start": 2393.0, "end": 2396.0, "text": " And I multiply that by the constant value that I want to have at that point,", "tokens": [51314, 400, 286, 12972, 300, 538, 264, 5754, 2158, 300, 286, 528, 281, 362, 412, 300, 935, 11, 51464], "temperature": 0.0, "avg_logprob": -0.06133902295035605, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.011330769397318363}, {"id": 691, "seek": 237400, "start": 2396.0, "end": 2397.0, "text": " the y-coordinate.", "tokens": [51464, 264, 288, 12, 1291, 37326, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06133902295035605, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.011330769397318363}, {"id": 692, "seek": 237400, "start": 2397.0, "end": 2400.0, "text": " Then I sum those all up and it makes any shape that I like.", "tokens": [51514, 1396, 286, 2408, 729, 439, 493, 293, 309, 1669, 604, 3909, 300, 286, 411, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06133902295035605, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.011330769397318363}, {"id": 693, "seek": 237400, "start": 2400.0, "end": 2401.0, "text": " So that's great.", "tokens": [51664, 407, 300, 311, 869, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06133902295035605, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.011330769397318363}, {"id": 694, "seek": 237400, "start": 2401.0, "end": 2403.0, "text": " Linear functions can do anything.", "tokens": [51714, 14670, 289, 6828, 393, 360, 1340, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06133902295035605, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.011330769397318363}, {"id": 695, "seek": 240300, "start": 2403.0, "end": 2407.0, "text": " And one thing I don't like about this is how big this expression is.", "tokens": [50364, 400, 472, 551, 286, 500, 380, 411, 466, 341, 307, 577, 955, 341, 6114, 307, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10227381029436665, "compression_ratio": 1.7076923076923076, "no_speech_prob": 0.0031722921412438154}, {"id": 696, "seek": 240300, "start": 2407.0, "end": 2409.0, "text": " In some sense, that's funny,", "tokens": [50564, 682, 512, 2020, 11, 300, 311, 4074, 11, 50664], "temperature": 0.0, "avg_logprob": -0.10227381029436665, "compression_ratio": 1.7076923076923076, "no_speech_prob": 0.0031722921412438154}, {"id": 697, "seek": 240300, "start": 2409.0, "end": 2412.0, "text": " but it's starting to look like this thing is turn-complete,", "tokens": [50664, 457, 309, 311, 2891, 281, 574, 411, 341, 551, 307, 1261, 12, 1112, 17220, 11, 50814], "temperature": 0.0, "avg_logprob": -0.10227381029436665, "compression_ratio": 1.7076923076923076, "no_speech_prob": 0.0031722921412438154}, {"id": 698, "seek": 240300, "start": 2412.0, "end": 2414.0, "text": " and I'd like to build a computer to demonstrate,", "tokens": [50814, 293, 286, 1116, 411, 281, 1322, 257, 3820, 281, 11698, 11, 50914], "temperature": 0.0, "avg_logprob": -0.10227381029436665, "compression_ratio": 1.7076923076923076, "no_speech_prob": 0.0031722921412438154}, {"id": 699, "seek": 240300, "start": 2414.0, "end": 2416.0, "text": " since that's what you do.", "tokens": [50914, 1670, 300, 311, 437, 291, 360, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10227381029436665, "compression_ratio": 1.7076923076923076, "no_speech_prob": 0.0031722921412438154}, {"id": 700, "seek": 240300, "start": 2416.0, "end": 2420.0, "text": " But I don't know, everything is slow turn-complete these days.", "tokens": [51014, 583, 286, 500, 380, 458, 11, 1203, 307, 2964, 1261, 12, 1112, 17220, 613, 1708, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10227381029436665, "compression_ratio": 1.7076923076923076, "no_speech_prob": 0.0031722921412438154}, {"id": 701, "seek": 240300, "start": 2420.0, "end": 2423.0, "text": " So I want to figure out how we could make it a bit more practical,", "tokens": [51214, 407, 286, 528, 281, 2573, 484, 577, 321, 727, 652, 309, 257, 857, 544, 8496, 11, 51364], "temperature": 0.0, "avg_logprob": -0.10227381029436665, "compression_ratio": 1.7076923076923076, "no_speech_prob": 0.0031722921412438154}, {"id": 702, "seek": 240300, "start": 2423.0, "end": 2427.0, "text": " because I like to work at the intersection of theory and impractice and practice.", "tokens": [51364, 570, 286, 411, 281, 589, 412, 264, 15236, 295, 5261, 293, 704, 1897, 573, 293, 3124, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10227381029436665, "compression_ratio": 1.7076923076923076, "no_speech_prob": 0.0031722921412438154}, {"id": 703, "seek": 242700, "start": 2427.0, "end": 2430.0, "text": " So I consulted my extensive computer science library", "tokens": [50364, 407, 286, 47941, 452, 13246, 3820, 3497, 6405, 50514], "temperature": 0.0, "avg_logprob": -0.2092132183036419, "compression_ratio": 1.365546218487395, "no_speech_prob": 0.016910817474126816}, {"id": 704, "seek": 242700, "start": 2430.0, "end": 2433.0, "text": " for performance-enhancing substances.", "tokens": [50514, 337, 3389, 12, 268, 3451, 2175, 25455, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2092132183036419, "compression_ratio": 1.365546218487395, "no_speech_prob": 0.016910817474126816}, {"id": 705, "seek": 242700, "start": 2433.0, "end": 2437.0, "text": " I found a relevant-looking article in the 2018 SIGBOVIC", "tokens": [50664, 286, 1352, 257, 7340, 12, 16129, 7222, 294, 264, 6096, 318, 10489, 15893, 53, 2532, 50864], "temperature": 0.0, "avg_logprob": -0.2092132183036419, "compression_ratio": 1.365546218487395, "no_speech_prob": 0.016910817474126816}, {"id": 706, "seek": 242700, "start": 2437.0, "end": 2440.0, "text": " called The Fluent 8 Software Integer Library,", "tokens": [50864, 1219, 440, 33612, 317, 1649, 27428, 5681, 30744, 12806, 11, 51014], "temperature": 0.0, "avg_logprob": -0.2092132183036419, "compression_ratio": 1.365546218487395, "no_speech_prob": 0.016910817474126816}, {"id": 707, "seek": 242700, "start": 2440.0, "end": 2442.0, "text": " by Jim McCann, he sounds smart,", "tokens": [51014, 538, 6637, 12061, 969, 11, 415, 3263, 4069, 11, 51114], "temperature": 0.0, "avg_logprob": -0.2092132183036419, "compression_ratio": 1.365546218487395, "no_speech_prob": 0.016910817474126816}, {"id": 708, "seek": 242700, "start": 2442.0, "end": 2444.0, "text": " and Tom Murphy V.", "tokens": [51114, 293, 5041, 28549, 691, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2092132183036419, "compression_ratio": 1.365546218487395, "no_speech_prob": 0.016910817474126816}, {"id": 709, "seek": 242700, "start": 2444.0, "end": 2448.0, "text": " Wait, I already wrote this paper?", "tokens": [51214, 3802, 11, 286, 1217, 4114, 341, 3035, 30, 51414], "temperature": 0.0, "avg_logprob": -0.2092132183036419, "compression_ratio": 1.365546218487395, "no_speech_prob": 0.016910817474126816}, {"id": 710, "seek": 242700, "start": 2448.0, "end": 2450.0, "text": " God damn it.", "tokens": [51414, 1265, 8151, 309, 13, 51514], "temperature": 0.0, "avg_logprob": -0.2092132183036419, "compression_ratio": 1.365546218487395, "no_speech_prob": 0.016910817474126816}, {"id": 711, "seek": 242700, "start": 2450.0, "end": 2452.0, "text": " Yeah, this looks familiar.", "tokens": [51514, 865, 11, 341, 1542, 4963, 13, 51614], "temperature": 0.0, "avg_logprob": -0.2092132183036419, "compression_ratio": 1.365546218487395, "no_speech_prob": 0.016910817474126816}, {"id": 712, "seek": 242700, "start": 2452.0, "end": 2454.0, "text": " Uh, man.", "tokens": [51614, 4019, 11, 587, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2092132183036419, "compression_ratio": 1.365546218487395, "no_speech_prob": 0.016910817474126816}, {"id": 713, "seek": 245400, "start": 2454.0, "end": 2459.0, "text": " Well, the Fluent 8 library implements unsigned 8-bit integers,", "tokens": [50364, 1042, 11, 264, 33612, 317, 1649, 6405, 704, 17988, 2693, 16690, 1649, 12, 5260, 41674, 11, 50614], "temperature": 0.0, "avg_logprob": -0.07960139459638453, "compression_ratio": 1.717607973421927, "no_speech_prob": 0.0016483835643157363}, {"id": 714, "seek": 245400, "start": 2459.0, "end": 2462.0, "text": " using 32-bit floating point.", "tokens": [50614, 1228, 8858, 12, 5260, 12607, 935, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07960139459638453, "compression_ratio": 1.717607973421927, "no_speech_prob": 0.0016483835643157363}, {"id": 715, "seek": 245400, "start": 2462.0, "end": 2464.0, "text": " That sounds pretty familiar,", "tokens": [50764, 663, 3263, 1238, 4963, 11, 50864], "temperature": 0.0, "avg_logprob": -0.07960139459638453, "compression_ratio": 1.717607973421927, "no_speech_prob": 0.0016483835643157363}, {"id": 716, "seek": 245400, "start": 2464.0, "end": 2467.0, "text": " but it does make some different design decisions than what we're doing today.", "tokens": [50864, 457, 309, 775, 652, 512, 819, 1715, 5327, 813, 437, 321, 434, 884, 965, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07960139459638453, "compression_ratio": 1.717607973421927, "no_speech_prob": 0.0016483835643157363}, {"id": 717, "seek": 245400, "start": 2467.0, "end": 2471.0, "text": " One superficial difference is that it uses 32-bit full-precision floating point.", "tokens": [51014, 1485, 34622, 2649, 307, 300, 309, 4960, 8858, 12, 5260, 1577, 12, 3712, 40832, 12607, 935, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07960139459638453, "compression_ratio": 1.717607973421927, "no_speech_prob": 0.0016483835643157363}, {"id": 718, "seek": 245400, "start": 2471.0, "end": 2473.0, "text": " That's easy to change.", "tokens": [51214, 663, 311, 1858, 281, 1319, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07960139459638453, "compression_ratio": 1.717607973421927, "no_speech_prob": 0.0016483835643157363}, {"id": 719, "seek": 245400, "start": 2473.0, "end": 2475.0, "text": " It also uses some nonlinear operations,", "tokens": [51314, 467, 611, 4960, 512, 2107, 28263, 7705, 11, 51414], "temperature": 0.0, "avg_logprob": -0.07960139459638453, "compression_ratio": 1.717607973421927, "no_speech_prob": 0.0016483835643157363}, {"id": 720, "seek": 245400, "start": 2475.0, "end": 2477.0, "text": " so we're going to need to fix that.", "tokens": [51414, 370, 321, 434, 516, 281, 643, 281, 3191, 300, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07960139459638453, "compression_ratio": 1.717607973421927, "no_speech_prob": 0.0016483835643157363}, {"id": 721, "seek": 245400, "start": 2477.0, "end": 2479.0, "text": " But it's core idea, and the reason it can be much faster,", "tokens": [51514, 583, 309, 311, 4965, 1558, 11, 293, 264, 1778, 309, 393, 312, 709, 4663, 11, 51614], "temperature": 0.0, "avg_logprob": -0.07960139459638453, "compression_ratio": 1.717607973421927, "no_speech_prob": 0.0016483835643157363}, {"id": 722, "seek": 245400, "start": 2479.0, "end": 2483.0, "text": " is that each integer is represented by the corresponding floating point integer.", "tokens": [51614, 307, 300, 1184, 24922, 307, 10379, 538, 264, 11760, 12607, 935, 24922, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07960139459638453, "compression_ratio": 1.717607973421927, "no_speech_prob": 0.0016483835643157363}, {"id": 723, "seek": 248300, "start": 2483.0, "end": 2486.0, "text": " And the operations will only work if the input is exactly an integer,", "tokens": [50364, 400, 264, 7705, 486, 787, 589, 498, 264, 4846, 307, 2293, 364, 24922, 11, 50514], "temperature": 0.0, "avg_logprob": -0.09199961570844259, "compression_ratio": 1.779783393501805, "no_speech_prob": 0.0006877873674966395}, {"id": 724, "seek": 248300, "start": 2486.0, "end": 2488.0, "text": " and they produce integers as output.", "tokens": [50514, 293, 436, 5258, 41674, 382, 5598, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09199961570844259, "compression_ratio": 1.779783393501805, "no_speech_prob": 0.0006877873674966395}, {"id": 725, "seek": 248300, "start": 2488.0, "end": 2491.0, "text": " So we don't need to worry about numbers that are really close to zero,", "tokens": [50614, 407, 321, 500, 380, 643, 281, 3292, 466, 3547, 300, 366, 534, 1998, 281, 4018, 11, 50764], "temperature": 0.0, "avg_logprob": -0.09199961570844259, "compression_ratio": 1.779783393501805, "no_speech_prob": 0.0006877873674966395}, {"id": 726, "seek": 248300, "start": 2491.0, "end": 2493.0, "text": " or negative numbers like we did,", "tokens": [50764, 420, 3671, 3547, 411, 321, 630, 11, 50864], "temperature": 0.0, "avg_logprob": -0.09199961570844259, "compression_ratio": 1.779783393501805, "no_speech_prob": 0.0006877873674966395}, {"id": 727, "seek": 248300, "start": 2493.0, "end": 2496.0, "text": " when we were working on the entire interval from negative 1 to 1.", "tokens": [50864, 562, 321, 645, 1364, 322, 264, 2302, 15035, 490, 3671, 502, 281, 502, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09199961570844259, "compression_ratio": 1.779783393501805, "no_speech_prob": 0.0006877873674966395}, {"id": 728, "seek": 248300, "start": 2496.0, "end": 2498.0, "text": " This allows us to pull some more tricks,", "tokens": [51014, 639, 4045, 505, 281, 2235, 512, 544, 11733, 11, 51114], "temperature": 0.0, "avg_logprob": -0.09199961570844259, "compression_ratio": 1.779783393501805, "no_speech_prob": 0.0006877873674966395}, {"id": 729, "seek": 248300, "start": 2498.0, "end": 2500.0, "text": " and then do things more quickly.", "tokens": [51114, 293, 550, 360, 721, 544, 2661, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09199961570844259, "compression_ratio": 1.779783393501805, "no_speech_prob": 0.0006877873674966395}, {"id": 730, "seek": 248300, "start": 2500.0, "end": 2502.0, "text": " So we're going to combine the power of what we've done so far,", "tokens": [51214, 407, 321, 434, 516, 281, 10432, 264, 1347, 295, 437, 321, 600, 1096, 370, 1400, 11, 51314], "temperature": 0.0, "avg_logprob": -0.09199961570844259, "compression_ratio": 1.779783393501805, "no_speech_prob": 0.0006877873674966395}, {"id": 731, "seek": 248300, "start": 2502.0, "end": 2505.0, "text": " and Fluent 8, and get Fluent 8.", "tokens": [51314, 293, 33612, 317, 1649, 11, 293, 483, 33612, 317, 1649, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09199961570844259, "compression_ratio": 1.779783393501805, "no_speech_prob": 0.0006877873674966395}, {"id": 732, "seek": 248300, "start": 2505.0, "end": 2507.0, "text": " Fluent 8.", "tokens": [51464, 33612, 317, 1649, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09199961570844259, "compression_ratio": 1.779783393501805, "no_speech_prob": 0.0006877873674966395}, {"id": 733, "seek": 248300, "start": 2507.0, "end": 2508.0, "text": " Fluent 8.", "tokens": [51564, 33612, 317, 1649, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09199961570844259, "compression_ratio": 1.779783393501805, "no_speech_prob": 0.0006877873674966395}, {"id": 734, "seek": 248300, "start": 2508.0, "end": 2510.0, "text": " Fluent 8.", "tokens": [51614, 33612, 317, 1649, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09199961570844259, "compression_ratio": 1.779783393501805, "no_speech_prob": 0.0006877873674966395}, {"id": 735, "seek": 248300, "start": 2510.0, "end": 2512.0, "text": " Ah, close enough.", "tokens": [51714, 2438, 11, 1998, 1547, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09199961570844259, "compression_ratio": 1.779783393501805, "no_speech_prob": 0.0006877873674966395}, {"id": 736, "seek": 251200, "start": 2512.0, "end": 2516.0, "text": " This time this stands for half floating linear U and 8,", "tokens": [50364, 639, 565, 341, 7382, 337, 1922, 12607, 8213, 624, 293, 1649, 11, 50564], "temperature": 0.0, "avg_logprob": -0.07008773040771485, "compression_ratio": 1.7275747508305648, "no_speech_prob": 0.000626304536126554}, {"id": 737, "seek": 251200, "start": 2516.0, "end": 2519.0, "text": " and then we're going to use that to implement a classic computer.", "tokens": [50564, 293, 550, 321, 434, 516, 281, 764, 300, 281, 4445, 257, 7230, 3820, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07008773040771485, "compression_ratio": 1.7275747508305648, "no_speech_prob": 0.000626304536126554}, {"id": 738, "seek": 251200, "start": 2519.0, "end": 2523.0, "text": " So each byte will be represented by a half precision floating point number.", "tokens": [50714, 407, 1184, 40846, 486, 312, 10379, 538, 257, 1922, 18356, 12607, 935, 1230, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07008773040771485, "compression_ratio": 1.7275747508305648, "no_speech_prob": 0.000626304536126554}, {"id": 739, "seek": 251200, "start": 2523.0, "end": 2527.0, "text": " And since bytes are integers, we'll represent it by the corresponding floating point number,", "tokens": [50914, 400, 1670, 36088, 366, 41674, 11, 321, 603, 2906, 309, 538, 264, 11760, 12607, 935, 1230, 11, 51114], "temperature": 0.0, "avg_logprob": -0.07008773040771485, "compression_ratio": 1.7275747508305648, "no_speech_prob": 0.000626304536126554}, {"id": 740, "seek": 251200, "start": 2527.0, "end": 2529.0, "text": " which is exactly that integer.", "tokens": [51114, 597, 307, 2293, 300, 24922, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07008773040771485, "compression_ratio": 1.7275747508305648, "no_speech_prob": 0.000626304536126554}, {"id": 741, "seek": 251200, "start": 2529.0, "end": 2532.0, "text": " All 256 of them have exact representations.", "tokens": [51214, 1057, 38882, 295, 552, 362, 1900, 33358, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07008773040771485, "compression_ratio": 1.7275747508305648, "no_speech_prob": 0.000626304536126554}, {"id": 742, "seek": 251200, "start": 2532.0, "end": 2535.0, "text": " Let's first look at a helper function that's familiar.", "tokens": [51364, 961, 311, 700, 574, 412, 257, 36133, 2445, 300, 311, 4963, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07008773040771485, "compression_ratio": 1.7275747508305648, "no_speech_prob": 0.000626304536126554}, {"id": 743, "seek": 251200, "start": 2535.0, "end": 2537.0, "text": " This is another threshold function.", "tokens": [51514, 639, 307, 1071, 14678, 2445, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07008773040771485, "compression_ratio": 1.7275747508305648, "no_speech_prob": 0.000626304536126554}, {"id": 744, "seek": 251200, "start": 2537.0, "end": 2540.0, "text": " It requires an integer, but that integer can be as high as 511.", "tokens": [51614, 467, 7029, 364, 24922, 11, 457, 300, 24922, 393, 312, 382, 1090, 382, 1025, 5348, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07008773040771485, "compression_ratio": 1.7275747508305648, "no_speech_prob": 0.000626304536126554}, {"id": 745, "seek": 254000, "start": 2540.0, "end": 2542.0, "text": " 9 bits.", "tokens": [50364, 1722, 9239, 13, 50464], "temperature": 0.0, "avg_logprob": -0.05952081971496116, "compression_ratio": 1.5719424460431655, "no_speech_prob": 0.0038242272567003965}, {"id": 746, "seek": 254000, "start": 2542.0, "end": 2546.0, "text": " If the number is greater than or equal to 256, it returns 1.0,", "tokens": [50464, 759, 264, 1230, 307, 5044, 813, 420, 2681, 281, 38882, 11, 309, 11247, 502, 13, 15, 11, 50664], "temperature": 0.0, "avg_logprob": -0.05952081971496116, "compression_ratio": 1.5719424460431655, "no_speech_prob": 0.0038242272567003965}, {"id": 747, "seek": 254000, "start": 2546.0, "end": 2548.0, "text": " otherwise 0.0.", "tokens": [50664, 5911, 1958, 13, 15, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05952081971496116, "compression_ratio": 1.5719424460431655, "no_speech_prob": 0.0038242272567003965}, {"id": 748, "seek": 254000, "start": 2548.0, "end": 2550.0, "text": " So this is like a threshold 256 function,", "tokens": [50764, 407, 341, 307, 411, 257, 14678, 38882, 2445, 11, 50864], "temperature": 0.0, "avg_logprob": -0.05952081971496116, "compression_ratio": 1.5719424460431655, "no_speech_prob": 0.0038242272567003965}, {"id": 749, "seek": 254000, "start": 2550.0, "end": 2552.0, "text": " or a downshift by 8 bits.", "tokens": [50864, 420, 257, 760, 47445, 538, 1649, 9239, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05952081971496116, "compression_ratio": 1.5719424460431655, "no_speech_prob": 0.0038242272567003965}, {"id": 750, "seek": 254000, "start": 2552.0, "end": 2556.0, "text": " It uses the same kind of loss of precision tricks we've been using all along,", "tokens": [50964, 467, 4960, 264, 912, 733, 295, 4470, 295, 18356, 11733, 321, 600, 668, 1228, 439, 2051, 11, 51164], "temperature": 0.0, "avg_logprob": -0.05952081971496116, "compression_ratio": 1.5719424460431655, "no_speech_prob": 0.0038242272567003965}, {"id": 751, "seek": 254000, "start": 2556.0, "end": 2558.0, "text": " but we can get it done with 4 operations this time,", "tokens": [51164, 457, 321, 393, 483, 309, 1096, 365, 1017, 7705, 341, 565, 11, 51264], "temperature": 0.0, "avg_logprob": -0.05952081971496116, "compression_ratio": 1.5719424460431655, "no_speech_prob": 0.0038242272567003965}, {"id": 752, "seek": 254000, "start": 2558.0, "end": 2561.0, "text": " because it only needs to work on 512 different inputs.", "tokens": [51264, 570, 309, 787, 2203, 281, 589, 322, 1025, 4762, 819, 15743, 13, 51414], "temperature": 0.0, "avg_logprob": -0.05952081971496116, "compression_ratio": 1.5719424460431655, "no_speech_prob": 0.0038242272567003965}, {"id": 753, "seek": 254000, "start": 2561.0, "end": 2565.0, "text": " It's similarly easy to downshift by 1 or 2 or 3 or 4 bits,", "tokens": [51414, 467, 311, 14138, 1858, 281, 760, 47445, 538, 502, 420, 568, 420, 805, 420, 1017, 9239, 11, 51614], "temperature": 0.0, "avg_logprob": -0.05952081971496116, "compression_ratio": 1.5719424460431655, "no_speech_prob": 0.0038242272567003965}, {"id": 754, "seek": 254000, "start": 2565.0, "end": 2567.0, "text": " and we have functions for that as well.", "tokens": [51614, 293, 321, 362, 6828, 337, 300, 382, 731, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05952081971496116, "compression_ratio": 1.5719424460431655, "no_speech_prob": 0.0038242272567003965}, {"id": 755, "seek": 256700, "start": 2567.0, "end": 2570.0, "text": " And now we can implement modular addition the same way we did before.", "tokens": [50364, 400, 586, 321, 393, 4445, 31111, 4500, 264, 912, 636, 321, 630, 949, 13, 50514], "temperature": 0.0, "avg_logprob": -0.05375778921719255, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.002115599811077118}, {"id": 756, "seek": 256700, "start": 2570.0, "end": 2572.0, "text": " We just compute the sum natively.", "tokens": [50514, 492, 445, 14722, 264, 2408, 8470, 356, 13, 50614], "temperature": 0.0, "avg_logprob": -0.05375778921719255, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.002115599811077118}, {"id": 757, "seek": 256700, "start": 2572.0, "end": 2575.0, "text": " Now that could be over 255.", "tokens": [50614, 823, 300, 727, 312, 670, 3552, 20, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05375778921719255, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.002115599811077118}, {"id": 758, "seek": 256700, "start": 2575.0, "end": 2579.0, "text": " But we have a way to test whether it is and compute 1.0 or 0.0.", "tokens": [50764, 583, 321, 362, 257, 636, 281, 1500, 1968, 309, 307, 293, 14722, 502, 13, 15, 420, 1958, 13, 15, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05375778921719255, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.002115599811077118}, {"id": 759, "seek": 256700, "start": 2579.0, "end": 2583.0, "text": " So we multiply that by the constant 256, which gives us either 256 or 0,", "tokens": [50964, 407, 321, 12972, 300, 538, 264, 5754, 38882, 11, 597, 2709, 505, 2139, 38882, 420, 1958, 11, 51164], "temperature": 0.0, "avg_logprob": -0.05375778921719255, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.002115599811077118}, {"id": 760, "seek": 256700, "start": 2583.0, "end": 2586.0, "text": " and we subtract that off so that the result is back in range.", "tokens": [51164, 293, 321, 16390, 300, 766, 370, 300, 264, 1874, 307, 646, 294, 3613, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05375778921719255, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.002115599811077118}, {"id": 761, "seek": 256700, "start": 2586.0, "end": 2587.0, "text": " Cool.", "tokens": [51314, 8561, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05375778921719255, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.002115599811077118}, {"id": 762, "seek": 256700, "start": 2587.0, "end": 2590.0, "text": " We only did 7 floating point operations here, which is not bad.", "tokens": [51364, 492, 787, 630, 1614, 12607, 935, 7705, 510, 11, 597, 307, 406, 1578, 13, 51514], "temperature": 0.0, "avg_logprob": -0.05375778921719255, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.002115599811077118}, {"id": 763, "seek": 256700, "start": 2590.0, "end": 2592.0, "text": " I'm certainly not going to show you all of the code,", "tokens": [51514, 286, 478, 3297, 406, 516, 281, 855, 291, 439, 295, 264, 3089, 11, 51614], "temperature": 0.0, "avg_logprob": -0.05375778921719255, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.002115599811077118}, {"id": 764, "seek": 256700, "start": 2592.0, "end": 2595.0, "text": " but I wanted to give a taste of some of the interesting problems", "tokens": [51614, 457, 286, 1415, 281, 976, 257, 3939, 295, 512, 295, 264, 1880, 2740, 51764], "temperature": 0.0, "avg_logprob": -0.05375778921719255, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.002115599811077118}, {"id": 765, "seek": 259500, "start": 2595.0, "end": 2597.0, "text": " that we need to solve in order to do this efficiently.", "tokens": [50364, 300, 321, 643, 281, 5039, 294, 1668, 281, 360, 341, 19621, 13, 50464], "temperature": 0.0, "avg_logprob": -0.06916700827108847, "compression_ratio": 1.7522658610271904, "no_speech_prob": 0.020961714908480644}, {"id": 766, "seek": 259500, "start": 2597.0, "end": 2600.0, "text": " While addition is already kind of linear except for overflow,", "tokens": [50464, 3987, 4500, 307, 1217, 733, 295, 8213, 3993, 337, 37772, 11, 50614], "temperature": 0.0, "avg_logprob": -0.06916700827108847, "compression_ratio": 1.7522658610271904, "no_speech_prob": 0.020961714908480644}, {"id": 767, "seek": 259500, "start": 2600.0, "end": 2602.0, "text": " bitwise operations like and are not even close.", "tokens": [50614, 857, 3711, 7705, 411, 293, 366, 406, 754, 1998, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06916700827108847, "compression_ratio": 1.7522658610271904, "no_speech_prob": 0.020961714908480644}, {"id": 768, "seek": 259500, "start": 2602.0, "end": 2606.0, "text": " But we can do it pretty cleanly with some of the operations we've already constructed.", "tokens": [50714, 583, 321, 393, 360, 309, 1238, 2541, 356, 365, 512, 295, 264, 7705, 321, 600, 1217, 17083, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06916700827108847, "compression_ratio": 1.7522658610271904, "no_speech_prob": 0.020961714908480644}, {"id": 769, "seek": 259500, "start": 2606.0, "end": 2609.0, "text": " I'll run this loop exactly 8 times once for each bit,", "tokens": [50914, 286, 603, 1190, 341, 6367, 2293, 1649, 1413, 1564, 337, 1184, 857, 11, 51064], "temperature": 0.0, "avg_logprob": -0.06916700827108847, "compression_ratio": 1.7522658610271904, "no_speech_prob": 0.020961714908480644}, {"id": 770, "seek": 259500, "start": 2609.0, "end": 2612.0, "text": " and this will be unrolled by the compiler, so we're not even doing these comparisons.", "tokens": [51064, 293, 341, 486, 312, 517, 28850, 538, 264, 31958, 11, 370, 321, 434, 406, 754, 884, 613, 33157, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06916700827108847, "compression_ratio": 1.7522658610271904, "no_speech_prob": 0.020961714908480644}, {"id": 771, "seek": 259500, "start": 2612.0, "end": 2614.0, "text": " It's as though we wrote this 8 times.", "tokens": [51214, 467, 311, 382, 1673, 321, 4114, 341, 1649, 1413, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06916700827108847, "compression_ratio": 1.7522658610271904, "no_speech_prob": 0.020961714908480644}, {"id": 772, "seek": 259500, "start": 2614.0, "end": 2619.0, "text": " Since it's unrolled, we can compute something like a constant 2 to the i at compile time as well.", "tokens": [51314, 4162, 309, 311, 517, 28850, 11, 321, 393, 14722, 746, 411, 257, 5754, 568, 281, 264, 741, 412, 31413, 565, 382, 731, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06916700827108847, "compression_ratio": 1.7522658610271904, "no_speech_prob": 0.020961714908480644}, {"id": 773, "seek": 259500, "start": 2619.0, "end": 2622.0, "text": " We work bit by bit starting with the lowest order 1.", "tokens": [51564, 492, 589, 857, 538, 857, 2891, 365, 264, 12437, 1668, 502, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06916700827108847, "compression_ratio": 1.7522658610271904, "no_speech_prob": 0.020961714908480644}, {"id": 774, "seek": 262200, "start": 2622.0, "end": 2626.0, "text": " The first thing we do is shift each input down by 1 bit using a function we've already seen.", "tokens": [50364, 440, 700, 551, 321, 360, 307, 5513, 1184, 4846, 760, 538, 502, 857, 1228, 257, 2445, 321, 600, 1217, 1612, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06514241820887516, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.003272823989391327}, {"id": 775, "seek": 262200, "start": 2626.0, "end": 2628.0, "text": " Then we shift it back up.", "tokens": [50564, 1396, 321, 5513, 309, 646, 493, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06514241820887516, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.003272823989391327}, {"id": 776, "seek": 262200, "start": 2628.0, "end": 2630.0, "text": " As long as the input is less than 128, which it will be,", "tokens": [50664, 1018, 938, 382, 264, 4846, 307, 1570, 813, 29810, 11, 597, 309, 486, 312, 11, 50764], "temperature": 0.0, "avg_logprob": -0.06514241820887516, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.003272823989391327}, {"id": 777, "seek": 262200, "start": 2630.0, "end": 2634.0, "text": " you can shift up by 1 by just multiplying by 2 or adding it to itself.", "tokens": [50764, 291, 393, 5513, 493, 538, 502, 538, 445, 30955, 538, 568, 420, 5127, 309, 281, 2564, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06514241820887516, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.003272823989391327}, {"id": 778, "seek": 262200, "start": 2634.0, "end": 2638.0, "text": " Now we know the last bit is 0, so if I subtract this from the original argument,", "tokens": [50964, 823, 321, 458, 264, 1036, 857, 307, 1958, 11, 370, 498, 286, 16390, 341, 490, 264, 3380, 6770, 11, 51164], "temperature": 0.0, "avg_logprob": -0.06514241820887516, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.003272823989391327}, {"id": 779, "seek": 262200, "start": 2638.0, "end": 2641.0, "text": " I get the lowest order bit of the input, either 1 or 0.", "tokens": [51164, 286, 483, 264, 12437, 1668, 857, 295, 264, 4846, 11, 2139, 502, 420, 1958, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06514241820887516, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.003272823989391327}, {"id": 780, "seek": 262200, "start": 2641.0, "end": 2643.0, "text": " So I've extracted the lowest order bit of both args,", "tokens": [51314, 407, 286, 600, 34086, 264, 12437, 1668, 857, 295, 1293, 3882, 82, 11, 51414], "temperature": 0.0, "avg_logprob": -0.06514241820887516, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.003272823989391327}, {"id": 781, "seek": 262200, "start": 2643.0, "end": 2646.0, "text": " but I still don't have and even on 1 bit.", "tokens": [51414, 457, 286, 920, 500, 380, 362, 293, 754, 322, 502, 857, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06514241820887516, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.003272823989391327}, {"id": 782, "seek": 262200, "start": 2646.0, "end": 2649.0, "text": " Multiplying the two bits together would give me the right answer,", "tokens": [51564, 31150, 7310, 264, 732, 9239, 1214, 576, 976, 385, 264, 558, 1867, 11, 51714], "temperature": 0.0, "avg_logprob": -0.06514241820887516, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.003272823989391327}, {"id": 783, "seek": 264900, "start": 2649.0, "end": 2652.0, "text": " and multiplication is one of the linear operations.", "tokens": [50364, 293, 27290, 307, 472, 295, 264, 8213, 7705, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06555599241114374, "compression_ratio": 1.7090301003344481, "no_speech_prob": 0.02096082642674446}, {"id": 784, "seek": 264900, "start": 2652.0, "end": 2654.0, "text": " But remember that we only allow multiplication by a constant.", "tokens": [50514, 583, 1604, 300, 321, 787, 2089, 27290, 538, 257, 5754, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06555599241114374, "compression_ratio": 1.7090301003344481, "no_speech_prob": 0.02096082642674446}, {"id": 785, "seek": 264900, "start": 2654.0, "end": 2659.0, "text": " For example, if you were to compute x and x, both a bit and b bit would depend on x,", "tokens": [50614, 1171, 1365, 11, 498, 291, 645, 281, 14722, 2031, 293, 2031, 11, 1293, 257, 857, 293, 272, 857, 576, 5672, 322, 2031, 11, 50864], "temperature": 0.0, "avg_logprob": -0.06555599241114374, "compression_ratio": 1.7090301003344481, "no_speech_prob": 0.02096082642674446}, {"id": 786, "seek": 264900, "start": 2659.0, "end": 2664.0, "text": " and so here you'd have x times x, or x squared, which is not mathematically linear.", "tokens": [50864, 293, 370, 510, 291, 1116, 362, 2031, 1413, 2031, 11, 420, 2031, 8889, 11, 597, 307, 406, 44003, 8213, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06555599241114374, "compression_ratio": 1.7090301003344481, "no_speech_prob": 0.02096082642674446}, {"id": 787, "seek": 264900, "start": 2664.0, "end": 2666.0, "text": " So we're not going to use multiplication, but we do have a nice trick,", "tokens": [51114, 407, 321, 434, 406, 516, 281, 764, 27290, 11, 457, 321, 360, 362, 257, 1481, 4282, 11, 51214], "temperature": 0.0, "avg_logprob": -0.06555599241114374, "compression_ratio": 1.7090301003344481, "no_speech_prob": 0.02096082642674446}, {"id": 788, "seek": 264900, "start": 2666.0, "end": 2669.0, "text": " which is to add the bits together and then shift down by 1.", "tokens": [51214, 597, 307, 281, 909, 264, 9239, 1214, 293, 550, 5513, 760, 538, 502, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06555599241114374, "compression_ratio": 1.7090301003344481, "no_speech_prob": 0.02096082642674446}, {"id": 789, "seek": 264900, "start": 2669.0, "end": 2674.0, "text": " If we look at the truth table, we see that this only produces a 1 when both of the inputs were 1.", "tokens": [51364, 759, 321, 574, 412, 264, 3494, 3199, 11, 321, 536, 300, 341, 787, 14725, 257, 502, 562, 1293, 295, 264, 15743, 645, 502, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06555599241114374, "compression_ratio": 1.7090301003344481, "no_speech_prob": 0.02096082642674446}, {"id": 790, "seek": 267400, "start": 2674.0, "end": 2680.0, "text": " I take the resulting bit and multiply it by that round's scale, which is a power of 2, a constant,", "tokens": [50364, 286, 747, 264, 16505, 857, 293, 12972, 309, 538, 300, 3098, 311, 4373, 11, 597, 307, 257, 1347, 295, 568, 11, 257, 5754, 11, 50664], "temperature": 0.0, "avg_logprob": -0.0755749531646273, "compression_ratio": 1.6261980830670926, "no_speech_prob": 0.14029905200004578}, {"id": 791, "seek": 267400, "start": 2680.0, "end": 2682.0, "text": " and then I just add all of those up.", "tokens": [50664, 293, 550, 286, 445, 909, 439, 295, 729, 493, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0755749531646273, "compression_ratio": 1.6261980830670926, "no_speech_prob": 0.14029905200004578}, {"id": 792, "seek": 267400, "start": 2682.0, "end": 2686.0, "text": " Since the components will be 0 everywhere except for that one bit, plus is equivalent to or.", "tokens": [50764, 4162, 264, 6677, 486, 312, 1958, 5315, 3993, 337, 300, 472, 857, 11, 1804, 307, 10344, 281, 420, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0755749531646273, "compression_ratio": 1.6261980830670926, "no_speech_prob": 0.14029905200004578}, {"id": 793, "seek": 267400, "start": 2686.0, "end": 2689.0, "text": " Ah, this reminds me of a slip-up in one of my previous videos", "tokens": [50964, 2438, 11, 341, 12025, 385, 295, 257, 11140, 12, 1010, 294, 472, 295, 452, 3894, 2145, 51114], "temperature": 0.0, "avg_logprob": -0.0755749531646273, "compression_ratio": 1.6261980830670926, "no_speech_prob": 0.14029905200004578}, {"id": 794, "seek": 267400, "start": 2689.0, "end": 2694.0, "text": " where I was computing the or function using and and xor and plus.", "tokens": [51114, 689, 286, 390, 15866, 264, 420, 2445, 1228, 293, 293, 2031, 284, 293, 1804, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0755749531646273, "compression_ratio": 1.6261980830670926, "no_speech_prob": 0.14029905200004578}, {"id": 795, "seek": 267400, "start": 2694.0, "end": 2700.0, "text": " It totally works, but millions of people wrote in to tell me that I could do it with another xor instead of plus,", "tokens": [51364, 467, 3879, 1985, 11, 457, 6803, 295, 561, 4114, 294, 281, 980, 385, 300, 286, 727, 360, 309, 365, 1071, 2031, 284, 2602, 295, 1804, 11, 51664], "temperature": 0.0, "avg_logprob": -0.0755749531646273, "compression_ratio": 1.6261980830670926, "no_speech_prob": 0.14029905200004578}, {"id": 796, "seek": 267400, "start": 2700.0, "end": 2702.0, "text": " which would have been a little faster.", "tokens": [51664, 597, 576, 362, 668, 257, 707, 4663, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0755749531646273, "compression_ratio": 1.6261980830670926, "no_speech_prob": 0.14029905200004578}, {"id": 797, "seek": 270200, "start": 2702.0, "end": 2705.0, "text": " But here plus is the right option. We don't have xor, it's not linear.", "tokens": [50364, 583, 510, 1804, 307, 264, 558, 3614, 13, 492, 500, 380, 362, 2031, 284, 11, 309, 311, 406, 8213, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12171104375053854, "compression_ratio": 1.5516014234875444, "no_speech_prob": 0.0022517533507198095}, {"id": 798, "seek": 270200, "start": 2705.0, "end": 2709.0, "text": " I was just, like, foreshadowing this, getting you ready.", "tokens": [50514, 286, 390, 445, 11, 411, 11, 2091, 2716, 345, 9637, 341, 11, 1242, 291, 1919, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12171104375053854, "compression_ratio": 1.5516014234875444, "no_speech_prob": 0.0022517533507198095}, {"id": 799, "seek": 270200, "start": 2709.0, "end": 2711.0, "text": " Defeated.", "tokens": [50714, 1346, 2106, 770, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12171104375053854, "compression_ratio": 1.5516014234875444, "no_speech_prob": 0.0022517533507198095}, {"id": 800, "seek": 270200, "start": 2711.0, "end": 2714.0, "text": " Anywho, that's all we need for bitwise and.", "tokens": [50814, 2639, 13506, 11, 300, 311, 439, 321, 643, 337, 857, 3711, 293, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12171104375053854, "compression_ratio": 1.5516014234875444, "no_speech_prob": 0.0022517533507198095}, {"id": 801, "seek": 270200, "start": 2714.0, "end": 2718.0, "text": " It's a little involved, but it's a far cry from the 9,000 operations we did before", "tokens": [50964, 467, 311, 257, 707, 3288, 11, 457, 309, 311, 257, 1400, 3305, 490, 264, 1722, 11, 1360, 7705, 321, 630, 949, 51164], "temperature": 0.0, "avg_logprob": -0.12171104375053854, "compression_ratio": 1.5516014234875444, "no_speech_prob": 0.0022517533507198095}, {"id": 802, "seek": 270200, "start": 2718.0, "end": 2720.0, "text": " just to test if a value is greater than 0.", "tokens": [51164, 445, 281, 1500, 498, 257, 2158, 307, 5044, 813, 1958, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12171104375053854, "compression_ratio": 1.5516014234875444, "no_speech_prob": 0.0022517533507198095}, {"id": 803, "seek": 270200, "start": 2720.0, "end": 2726.0, "text": " A spreckin of which we can now quickly test whether a value is exactly 0.", "tokens": [51264, 316, 637, 14954, 259, 295, 597, 321, 393, 586, 2661, 1500, 1968, 257, 2158, 307, 2293, 1958, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12171104375053854, "compression_ratio": 1.5516014234875444, "no_speech_prob": 0.0022517533507198095}, {"id": 804, "seek": 270200, "start": 2726.0, "end": 2730.0, "text": " We do this by negating the bits, subtracting from 255.", "tokens": [51564, 492, 360, 341, 538, 2485, 990, 264, 9239, 11, 16390, 278, 490, 3552, 20, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12171104375053854, "compression_ratio": 1.5516014234875444, "no_speech_prob": 0.0022517533507198095}, {"id": 805, "seek": 273000, "start": 2730.0, "end": 2734.0, "text": " Then we add one, and that'll only overflow if the original value was 0.", "tokens": [50364, 1396, 321, 909, 472, 11, 293, 300, 603, 787, 37772, 498, 264, 3380, 2158, 390, 1958, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06263473463354644, "compression_ratio": 1.7679083094555874, "no_speech_prob": 0.00941147655248642}, {"id": 806, "seek": 273000, "start": 2734.0, "end": 2738.0, "text": " With that, testing whether two values are equal is just a matter of subtracting them", "tokens": [50564, 2022, 300, 11, 4997, 1968, 732, 4190, 366, 2681, 307, 445, 257, 1871, 295, 16390, 278, 552, 50764], "temperature": 0.0, "avg_logprob": -0.06263473463354644, "compression_ratio": 1.7679083094555874, "no_speech_prob": 0.00941147655248642}, {"id": 807, "seek": 273000, "start": 2738.0, "end": 2740.0, "text": " and then seeing whether the result is 0.", "tokens": [50764, 293, 550, 2577, 1968, 264, 1874, 307, 1958, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06263473463354644, "compression_ratio": 1.7679083094555874, "no_speech_prob": 0.00941147655248642}, {"id": 808, "seek": 273000, "start": 2740.0, "end": 2742.0, "text": " And that's how it goes. That's how it always goes.", "tokens": [50864, 400, 300, 311, 577, 309, 1709, 13, 663, 311, 577, 309, 1009, 1709, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06263473463354644, "compression_ratio": 1.7679083094555874, "no_speech_prob": 0.00941147655248642}, {"id": 809, "seek": 273000, "start": 2742.0, "end": 2745.0, "text": " You build up some constructs, and you use those to make some more.", "tokens": [50964, 509, 1322, 493, 512, 7690, 82, 11, 293, 291, 764, 729, 281, 652, 512, 544, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06263473463354644, "compression_ratio": 1.7679083094555874, "no_speech_prob": 0.00941147655248642}, {"id": 810, "seek": 273000, "start": 2745.0, "end": 2748.0, "text": " You gain more and more power until you have all of the things you want.", "tokens": [51114, 509, 6052, 544, 293, 544, 1347, 1826, 291, 362, 439, 295, 264, 721, 291, 528, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06263473463354644, "compression_ratio": 1.7679083094555874, "no_speech_prob": 0.00941147655248642}, {"id": 811, "seek": 273000, "start": 2748.0, "end": 2752.0, "text": " There are some good puzzles in here, and you may enjoy trying to work some of these out yourself.", "tokens": [51264, 821, 366, 512, 665, 24138, 294, 510, 11, 293, 291, 815, 2103, 1382, 281, 589, 512, 295, 613, 484, 1803, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06263473463354644, "compression_ratio": 1.7679083094555874, "no_speech_prob": 0.00941147655248642}, {"id": 812, "seek": 273000, "start": 2752.0, "end": 2754.0, "text": " And you may improve upon them, and please tell me if you do.", "tokens": [51464, 400, 291, 815, 3470, 3564, 552, 11, 293, 1767, 980, 385, 498, 291, 360, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06263473463354644, "compression_ratio": 1.7679083094555874, "no_speech_prob": 0.00941147655248642}, {"id": 813, "seek": 273000, "start": 2754.0, "end": 2757.0, "text": " For example, on screen I'm showing you a straightforward way to do if,", "tokens": [51564, 1171, 1365, 11, 322, 2568, 286, 478, 4099, 291, 257, 15325, 636, 281, 360, 498, 11, 51714], "temperature": 0.0, "avg_logprob": -0.06263473463354644, "compression_ratio": 1.7679083094555874, "no_speech_prob": 0.00941147655248642}, {"id": 814, "seek": 275700, "start": 2757.0, "end": 2761.0, "text": " but if you check my code, I do a thing that's way more mysterious and fancy", "tokens": [50364, 457, 498, 291, 1520, 452, 3089, 11, 286, 360, 257, 551, 300, 311, 636, 544, 13831, 293, 10247, 50564], "temperature": 0.0, "avg_logprob": -0.05102494629946622, "compression_ratio": 1.672077922077922, "no_speech_prob": 0.014955241233110428}, {"id": 815, "seek": 275700, "start": 2761.0, "end": 2764.0, "text": " in order to squeeze the last bits of performance out of it.", "tokens": [50564, 294, 1668, 281, 13578, 264, 1036, 9239, 295, 3389, 484, 295, 309, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05102494629946622, "compression_ratio": 1.672077922077922, "no_speech_prob": 0.014955241233110428}, {"id": 816, "seek": 275700, "start": 2764.0, "end": 2767.0, "text": " And I am going to care about performance for this application.", "tokens": [50714, 400, 286, 669, 516, 281, 1127, 466, 3389, 337, 341, 3861, 13, 50864], "temperature": 0.0, "avg_logprob": -0.05102494629946622, "compression_ratio": 1.672077922077922, "no_speech_prob": 0.014955241233110428}, {"id": 817, "seek": 275700, "start": 2767.0, "end": 2772.0, "text": " The last time I made a computer out of floating point numbers, which did happen before,", "tokens": [50864, 440, 1036, 565, 286, 1027, 257, 3820, 484, 295, 12607, 935, 3547, 11, 597, 630, 1051, 949, 11, 51114], "temperature": 0.0, "avg_logprob": -0.05102494629946622, "compression_ratio": 1.672077922077922, "no_speech_prob": 0.014955241233110428}, {"id": 818, "seek": 275700, "start": 2772.0, "end": 2777.0, "text": " this computer was focused on beauty with no concessions to practicality.", "tokens": [51114, 341, 3820, 390, 5178, 322, 6643, 365, 572, 416, 780, 626, 281, 8496, 507, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05102494629946622, "compression_ratio": 1.672077922077922, "no_speech_prob": 0.014955241233110428}, {"id": 819, "seek": 275700, "start": 2777.0, "end": 2781.0, "text": " Frankly, the computer was sort of boring to use because it had no I.O.", "tokens": [51364, 41344, 11, 264, 3820, 390, 1333, 295, 9989, 281, 764, 570, 309, 632, 572, 286, 13, 46, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05102494629946622, "compression_ratio": 1.672077922077922, "no_speech_prob": 0.014955241233110428}, {"id": 820, "seek": 275700, "start": 2781.0, "end": 2783.0, "text": " and it didn't do anything you could observe.", "tokens": [51564, 293, 309, 994, 380, 360, 1340, 291, 727, 11441, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05102494629946622, "compression_ratio": 1.672077922077922, "no_speech_prob": 0.014955241233110428}, {"id": 821, "seek": 275700, "start": 2783.0, "end": 2785.0, "text": " So this time I want to do the opposite.", "tokens": [51664, 407, 341, 565, 286, 528, 281, 360, 264, 6182, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05102494629946622, "compression_ratio": 1.672077922077922, "no_speech_prob": 0.014955241233110428}, {"id": 822, "seek": 278500, "start": 2785.0, "end": 2789.0, "text": " I'm willing to make some concessions on beauty as long as the result is entertaining.", "tokens": [50364, 286, 478, 4950, 281, 652, 512, 416, 780, 626, 322, 6643, 382, 938, 382, 264, 1874, 307, 20402, 13, 50564], "temperature": 0.0, "avg_logprob": -0.04299308839908316, "compression_ratio": 1.8116438356164384, "no_speech_prob": 0.0010004554642364383}, {"id": 823, "seek": 278500, "start": 2789.0, "end": 2793.0, "text": " Now the most entertaining computer is the Nintendo Entertainment System.", "tokens": [50564, 823, 264, 881, 20402, 3820, 307, 264, 11578, 25758, 8910, 13, 50764], "temperature": 0.0, "avg_logprob": -0.04299308839908316, "compression_ratio": 1.8116438356164384, "no_speech_prob": 0.0010004554642364383}, {"id": 824, "seek": 278500, "start": 2793.0, "end": 2795.0, "text": " And so this is a natural choice.", "tokens": [50764, 400, 370, 341, 307, 257, 3303, 3922, 13, 50864], "temperature": 0.0, "avg_logprob": -0.04299308839908316, "compression_ratio": 1.8116438356164384, "no_speech_prob": 0.0010004554642364383}, {"id": 825, "seek": 278500, "start": 2795.0, "end": 2801.0, "text": " After all, I like to work at the intersection of theory and impractice and practice and entertainment.", "tokens": [50864, 2381, 439, 11, 286, 411, 281, 589, 412, 264, 15236, 295, 5261, 293, 704, 1897, 573, 293, 3124, 293, 12393, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04299308839908316, "compression_ratio": 1.8116438356164384, "no_speech_prob": 0.0010004554642364383}, {"id": 826, "seek": 278500, "start": 2801.0, "end": 2805.0, "text": " The Nintendo Entertainment System consists of a basically reasonable computer", "tokens": [51164, 440, 11578, 25758, 8910, 14689, 295, 257, 1936, 10585, 3820, 51364], "temperature": 0.0, "avg_logprob": -0.04299308839908316, "compression_ratio": 1.8116438356164384, "no_speech_prob": 0.0010004554642364383}, {"id": 827, "seek": 278500, "start": 2805.0, "end": 2808.0, "text": " and a bunch of other weird stuff for entertainment purposes only.", "tokens": [51364, 293, 257, 3840, 295, 661, 3657, 1507, 337, 12393, 9932, 787, 13, 51514], "temperature": 0.0, "avg_logprob": -0.04299308839908316, "compression_ratio": 1.8116438356164384, "no_speech_prob": 0.0010004554642364383}, {"id": 828, "seek": 278500, "start": 2808.0, "end": 2814.0, "text": " The core of the computer is an 8-bit microprocessor that's more or less the Motorola 6502.", "tokens": [51514, 440, 4965, 295, 264, 3820, 307, 364, 1649, 12, 5260, 3123, 1513, 340, 25432, 300, 311, 544, 420, 1570, 264, 45871, 38566, 17, 13, 51814], "temperature": 0.0, "avg_logprob": -0.04299308839908316, "compression_ratio": 1.8116438356164384, "no_speech_prob": 0.0010004554642364383}, {"id": 829, "seek": 281400, "start": 2814.0, "end": 2818.0, "text": " And that other stuff includes video and audio hardware and the controllers and the game cartridge,", "tokens": [50364, 400, 300, 661, 1507, 5974, 960, 293, 6278, 8837, 293, 264, 26903, 293, 264, 1216, 27753, 11, 50564], "temperature": 0.0, "avg_logprob": -0.062425438238649954, "compression_ratio": 1.760932944606414, "no_speech_prob": 0.0008295643492601812}, {"id": 830, "seek": 281400, "start": 2818.0, "end": 2822.0, "text": " which itself might include hardware and stuff like that.", "tokens": [50564, 597, 2564, 1062, 4090, 8837, 293, 1507, 411, 300, 13, 50764], "temperature": 0.0, "avg_logprob": -0.062425438238649954, "compression_ratio": 1.760932944606414, "no_speech_prob": 0.0008295643492601812}, {"id": 831, "seek": 281400, "start": 2822.0, "end": 2827.0, "text": " My goal is to replace that 8-bit microprocessor with something that only runs linear floating point operations.", "tokens": [50764, 1222, 3387, 307, 281, 7406, 300, 1649, 12, 5260, 3123, 1513, 340, 25432, 365, 746, 300, 787, 6676, 8213, 12607, 935, 7705, 13, 51014], "temperature": 0.0, "avg_logprob": -0.062425438238649954, "compression_ratio": 1.760932944606414, "no_speech_prob": 0.0008295643492601812}, {"id": 832, "seek": 281400, "start": 2827.0, "end": 2829.0, "text": " So I'm not going to implement any of the weird stuff.", "tokens": [51014, 407, 286, 478, 406, 516, 281, 4445, 604, 295, 264, 3657, 1507, 13, 51114], "temperature": 0.0, "avg_logprob": -0.062425438238649954, "compression_ratio": 1.760932944606414, "no_speech_prob": 0.0008295643492601812}, {"id": 833, "seek": 281400, "start": 2829.0, "end": 2832.0, "text": " And that's good because I'm going to do this in a software emulator,", "tokens": [51114, 400, 300, 311, 665, 570, 286, 478, 516, 281, 360, 341, 294, 257, 4722, 846, 16381, 11, 51264], "temperature": 0.0, "avg_logprob": -0.062425438238649954, "compression_ratio": 1.760932944606414, "no_speech_prob": 0.0008295643492601812}, {"id": 834, "seek": 281400, "start": 2832.0, "end": 2834.0, "text": " which is my own hacked up copy of FCE Ultra,", "tokens": [51264, 597, 307, 452, 1065, 36218, 493, 5055, 295, 479, 4969, 20925, 11, 51364], "temperature": 0.0, "avg_logprob": -0.062425438238649954, "compression_ratio": 1.760932944606414, "no_speech_prob": 0.0008295643492601812}, {"id": 835, "seek": 281400, "start": 2834.0, "end": 2836.0, "text": " and this emulator is so complicated.", "tokens": [51364, 293, 341, 846, 16381, 307, 370, 6179, 13, 51464], "temperature": 0.0, "avg_logprob": -0.062425438238649954, "compression_ratio": 1.760932944606414, "no_speech_prob": 0.0008295643492601812}, {"id": 836, "seek": 281400, "start": 2836.0, "end": 2839.0, "text": " But the code that emulates the processor is basically tractable.", "tokens": [51464, 583, 264, 3089, 300, 846, 26192, 264, 15321, 307, 1936, 24207, 712, 13, 51614], "temperature": 0.0, "avg_logprob": -0.062425438238649954, "compression_ratio": 1.760932944606414, "no_speech_prob": 0.0008295643492601812}, {"id": 837, "seek": 281400, "start": 2839.0, "end": 2843.0, "text": " The processor state consists of a small number of 8-bit registers,", "tokens": [51614, 440, 15321, 1785, 14689, 295, 257, 1359, 1230, 295, 1649, 12, 5260, 38351, 11, 51814], "temperature": 0.0, "avg_logprob": -0.062425438238649954, "compression_ratio": 1.760932944606414, "no_speech_prob": 0.0008295643492601812}, {"id": 838, "seek": 284300, "start": 2843.0, "end": 2846.0, "text": " each of which will represent with a fluent 8.", "tokens": [50364, 1184, 295, 597, 486, 2906, 365, 257, 40799, 1649, 13, 50514], "temperature": 0.0, "avg_logprob": -0.056211372216542564, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.0010986417764797807}, {"id": 839, "seek": 284300, "start": 2846.0, "end": 2848.0, "text": " There's also a 16-bit program counter.", "tokens": [50514, 821, 311, 611, 257, 3165, 12, 5260, 1461, 5682, 13, 50614], "temperature": 0.0, "avg_logprob": -0.056211372216542564, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.0010986417764797807}, {"id": 840, "seek": 284300, "start": 2848.0, "end": 2850.0, "text": " We'll only need a few 16-bit operations,", "tokens": [50614, 492, 603, 787, 643, 257, 1326, 3165, 12, 5260, 7705, 11, 50714], "temperature": 0.0, "avg_logprob": -0.056211372216542564, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.0010986417764797807}, {"id": 841, "seek": 284300, "start": 2850.0, "end": 2854.0, "text": " and it's quite easy to build 16-bit integers using two 8-bit integers.", "tokens": [50714, 293, 309, 311, 1596, 1858, 281, 1322, 3165, 12, 5260, 41674, 1228, 732, 1649, 12, 5260, 41674, 13, 50914], "temperature": 0.0, "avg_logprob": -0.056211372216542564, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.0010986417764797807}, {"id": 842, "seek": 284300, "start": 2854.0, "end": 2856.0, "text": " So I won't say any more about that.", "tokens": [50914, 407, 286, 1582, 380, 584, 604, 544, 466, 300, 13, 51014], "temperature": 0.0, "avg_logprob": -0.056211372216542564, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.0010986417764797807}, {"id": 843, "seek": 284300, "start": 2856.0, "end": 2858.0, "text": " And at a high level, the processor is just a loop.", "tokens": [51014, 400, 412, 257, 1090, 1496, 11, 264, 15321, 307, 445, 257, 6367, 13, 51114], "temperature": 0.0, "avg_logprob": -0.056211372216542564, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.0010986417764797807}, {"id": 844, "seek": 284300, "start": 2858.0, "end": 2861.0, "text": " It reads one byte from memory at the program counter,", "tokens": [51114, 467, 15700, 472, 40846, 490, 4675, 412, 264, 1461, 5682, 11, 51264], "temperature": 0.0, "avg_logprob": -0.056211372216542564, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.0010986417764797807}, {"id": 845, "seek": 284300, "start": 2861.0, "end": 2865.0, "text": " which tells it which of the 256 instructions it's going to run next.", "tokens": [51264, 597, 5112, 309, 597, 295, 264, 38882, 9415, 309, 311, 516, 281, 1190, 958, 13, 51464], "temperature": 0.0, "avg_logprob": -0.056211372216542564, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.0010986417764797807}, {"id": 846, "seek": 284300, "start": 2865.0, "end": 2869.0, "text": " It runs that instruction, which updates the state like the registers in the program counter,", "tokens": [51464, 467, 6676, 300, 10951, 11, 597, 9205, 264, 1785, 411, 264, 38351, 294, 264, 1461, 5682, 11, 51664], "temperature": 0.0, "avg_logprob": -0.056211372216542564, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.0010986417764797807}, {"id": 847, "seek": 284300, "start": 2869.0, "end": 2871.0, "text": " and then starts the loop again.", "tokens": [51664, 293, 550, 3719, 264, 6367, 797, 13, 51764], "temperature": 0.0, "avg_logprob": -0.056211372216542564, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.0010986417764797807}, {"id": 848, "seek": 287100, "start": 2871.0, "end": 2873.0, "text": " Of course, there are copious details here.", "tokens": [50364, 2720, 1164, 11, 456, 366, 2971, 851, 4365, 510, 13, 50464], "temperature": 0.0, "avg_logprob": -0.060479847251946196, "compression_ratio": 1.6716867469879517, "no_speech_prob": 0.00041731217061169446}, {"id": 849, "seek": 287100, "start": 2873.0, "end": 2876.0, "text": " First, let's look at a simple instruction so you can kind of see how it goes.", "tokens": [50464, 2386, 11, 718, 311, 574, 412, 257, 2199, 10951, 370, 291, 393, 733, 295, 536, 577, 309, 1709, 13, 50614], "temperature": 0.0, "avg_logprob": -0.060479847251946196, "compression_ratio": 1.6716867469879517, "no_speech_prob": 0.00041731217061169446}, {"id": 850, "seek": 287100, "start": 2876.0, "end": 2878.0, "text": " A really simple instruction is tax.", "tokens": [50614, 316, 534, 2199, 10951, 307, 3366, 13, 50714], "temperature": 0.0, "avg_logprob": -0.060479847251946196, "compression_ratio": 1.6716867469879517, "no_speech_prob": 0.00041731217061169446}, {"id": 851, "seek": 287100, "start": 2878.0, "end": 2882.0, "text": " And speaking of tax, I'll have you know that video editing is so tedious", "tokens": [50714, 400, 4124, 295, 3366, 11, 286, 603, 362, 291, 458, 300, 960, 10000, 307, 370, 38284, 50914], "temperature": 0.0, "avg_logprob": -0.060479847251946196, "compression_ratio": 1.6716867469879517, "no_speech_prob": 0.00041731217061169446}, {"id": 852, "seek": 287100, "start": 2882.0, "end": 2887.0, "text": " that while making this video, I actually procrastinated it by doing my taxes.", "tokens": [50914, 300, 1339, 1455, 341, 960, 11, 286, 767, 39306, 5410, 309, 538, 884, 452, 10041, 13, 51164], "temperature": 0.0, "avg_logprob": -0.060479847251946196, "compression_ratio": 1.6716867469879517, "no_speech_prob": 0.00041731217061169446}, {"id": 853, "seek": 287100, "start": 2887.0, "end": 2892.0, "text": " Anyway, TAX on the 6502 transfers the value from the register A to the register X.", "tokens": [51164, 5684, 11, 20094, 55, 322, 264, 38566, 17, 29137, 264, 2158, 490, 264, 7280, 316, 281, 264, 7280, 1783, 13, 51414], "temperature": 0.0, "avg_logprob": -0.060479847251946196, "compression_ratio": 1.6716867469879517, "no_speech_prob": 0.00041731217061169446}, {"id": 854, "seek": 287100, "start": 2892.0, "end": 2894.0, "text": " There are still several steps, though.", "tokens": [51414, 821, 366, 920, 2940, 4439, 11, 1673, 13, 51514], "temperature": 0.0, "avg_logprob": -0.060479847251946196, "compression_ratio": 1.6716867469879517, "no_speech_prob": 0.00041731217061169446}, {"id": 855, "seek": 287100, "start": 2894.0, "end": 2898.0, "text": " After we copy it over, we need to update the negative and zero bits of the processor flags", "tokens": [51514, 2381, 321, 5055, 309, 670, 11, 321, 643, 281, 5623, 264, 3671, 293, 4018, 9239, 295, 264, 15321, 23265, 51714], "temperature": 0.0, "avg_logprob": -0.060479847251946196, "compression_ratio": 1.6716867469879517, "no_speech_prob": 0.00041731217061169446}, {"id": 856, "seek": 287100, "start": 2898.0, "end": 2900.0, "text": " and increment the program counter.", "tokens": [51714, 293, 26200, 264, 1461, 5682, 13, 51814], "temperature": 0.0, "avg_logprob": -0.060479847251946196, "compression_ratio": 1.6716867469879517, "no_speech_prob": 0.00041731217061169446}, {"id": 857, "seek": 290000, "start": 2900.0, "end": 2904.0, "text": " But this code is actually quite nice because we've already done all the work of implementing 8-bit integers.", "tokens": [50364, 583, 341, 3089, 307, 767, 1596, 1481, 570, 321, 600, 1217, 1096, 439, 264, 589, 295, 18114, 1649, 12, 5260, 41674, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06309585571289063, "compression_ratio": 1.7624633431085044, "no_speech_prob": 0.0008040524553507566}, {"id": 858, "seek": 290000, "start": 2904.0, "end": 2908.0, "text": " It makes use of bitwise AND and is zero and shifting and so on.", "tokens": [50564, 467, 1669, 764, 295, 857, 3711, 8093, 293, 307, 4018, 293, 17573, 293, 370, 322, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06309585571289063, "compression_ratio": 1.7624633431085044, "no_speech_prob": 0.0008040524553507566}, {"id": 859, "seek": 290000, "start": 2908.0, "end": 2911.0, "text": " If all the instructions were like that, this thing would be really simple.", "tokens": [50764, 759, 439, 264, 9415, 645, 411, 300, 11, 341, 551, 576, 312, 534, 2199, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06309585571289063, "compression_ratio": 1.7624633431085044, "no_speech_prob": 0.0008040524553507566}, {"id": 860, "seek": 290000, "start": 2911.0, "end": 2913.0, "text": " So let's look at a harder instruction.", "tokens": [50914, 407, 718, 311, 574, 412, 257, 6081, 10951, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06309585571289063, "compression_ratio": 1.7624633431085044, "no_speech_prob": 0.0008040524553507566}, {"id": 861, "seek": 290000, "start": 2913.0, "end": 2916.0, "text": " This is a branching instruction, branch on conditions set.", "tokens": [51014, 639, 307, 257, 9819, 278, 10951, 11, 9819, 322, 4487, 992, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06309585571289063, "compression_ratio": 1.7624633431085044, "no_speech_prob": 0.0008040524553507566}, {"id": 862, "seek": 290000, "start": 2916.0, "end": 2921.0, "text": " It modifies the program counter to basically do a jump if one of the processor flags is set.", "tokens": [51164, 467, 1072, 11221, 264, 1461, 5682, 281, 1936, 360, 257, 3012, 498, 472, 295, 264, 15321, 23265, 307, 992, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06309585571289063, "compression_ratio": 1.7624633431085044, "no_speech_prob": 0.0008040524553507566}, {"id": 863, "seek": 290000, "start": 2921.0, "end": 2923.0, "text": " Otherwise, it just advances to the next instruction.", "tokens": [51414, 10328, 11, 309, 445, 25297, 281, 264, 958, 10951, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06309585571289063, "compression_ratio": 1.7624633431085044, "no_speech_prob": 0.0008040524553507566}, {"id": 864, "seek": 290000, "start": 2923.0, "end": 2928.0, "text": " First problem we'll see is that there's a branch in the implementation of the processor, which is not linear.", "tokens": [51514, 2386, 1154, 321, 603, 536, 307, 300, 456, 311, 257, 9819, 294, 264, 11420, 295, 264, 15321, 11, 597, 307, 406, 8213, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06309585571289063, "compression_ratio": 1.7624633431085044, "no_speech_prob": 0.0008040524553507566}, {"id": 865, "seek": 292800, "start": 2928.0, "end": 2930.0, "text": " That's this if else.", "tokens": [50364, 663, 311, 341, 498, 1646, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08468245126150704, "compression_ratio": 1.7467948717948718, "no_speech_prob": 0.0021826436277478933}, {"id": 866, "seek": 292800, "start": 2930.0, "end": 2932.0, "text": " But we do have a fluent 8 version of if.", "tokens": [50464, 583, 321, 360, 362, 257, 40799, 1649, 3037, 295, 498, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08468245126150704, "compression_ratio": 1.7467948717948718, "no_speech_prob": 0.0021826436277478933}, {"id": 867, "seek": 292800, "start": 2932.0, "end": 2937.0, "text": " So we can change this to update the program counter, but to a value that depends on the condition.", "tokens": [50564, 407, 321, 393, 1319, 341, 281, 5623, 264, 1461, 5682, 11, 457, 281, 257, 2158, 300, 5946, 322, 264, 4188, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08468245126150704, "compression_ratio": 1.7467948717948718, "no_speech_prob": 0.0021826436277478933}, {"id": 868, "seek": 292800, "start": 2937.0, "end": 2938.0, "text": " That'll look like this.", "tokens": [50814, 663, 603, 574, 411, 341, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08468245126150704, "compression_ratio": 1.7467948717948718, "no_speech_prob": 0.0021826436277478933}, {"id": 869, "seek": 292800, "start": 2938.0, "end": 2941.0, "text": " But the other problem is this memory access.", "tokens": [50864, 583, 264, 661, 1154, 307, 341, 4675, 2105, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08468245126150704, "compression_ratio": 1.7467948717948718, "no_speech_prob": 0.0021826436277478933}, {"id": 870, "seek": 292800, "start": 2941.0, "end": 2947.0, "text": " Now the Nintendo has a main memory of 2 kilobytes, and we could create 2,000 fluent 8s and implement this array subscript.", "tokens": [51014, 823, 264, 11578, 575, 257, 2135, 4675, 295, 568, 5128, 996, 43673, 11, 293, 321, 727, 1884, 568, 11, 1360, 40799, 1649, 82, 293, 4445, 341, 10225, 2325, 662, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08468245126150704, "compression_ratio": 1.7467948717948718, "no_speech_prob": 0.0021826436277478933}, {"id": 871, "seek": 292800, "start": 2947.0, "end": 2949.0, "text": " That's not really the problem.", "tokens": [51314, 663, 311, 406, 534, 264, 1154, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08468245126150704, "compression_ratio": 1.7467948717948718, "no_speech_prob": 0.0021826436277478933}, {"id": 872, "seek": 292800, "start": 2949.0, "end": 2951.0, "text": " The problem is that accessing memory has side effects.", "tokens": [51414, 440, 1154, 307, 300, 26440, 4675, 575, 1252, 5065, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08468245126150704, "compression_ratio": 1.7467948717948718, "no_speech_prob": 0.0021826436277478933}, {"id": 873, "seek": 292800, "start": 2951.0, "end": 2956.0, "text": " So in the previous version of this code where an if wasn't executed, we wouldn't have accessed the memory.", "tokens": [51514, 407, 294, 264, 3894, 3037, 295, 341, 3089, 689, 364, 498, 2067, 380, 17577, 11, 321, 2759, 380, 362, 34211, 264, 4675, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08468245126150704, "compression_ratio": 1.7467948717948718, "no_speech_prob": 0.0021826436277478933}, {"id": 874, "seek": 295600, "start": 2956.0, "end": 2959.0, "text": " This is sort of obvious for memory writes because writing changes memory.", "tokens": [50364, 639, 307, 1333, 295, 6322, 337, 4675, 13657, 570, 3579, 2962, 4675, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09036492449896676, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.0028007193468511105}, {"id": 875, "seek": 295600, "start": 2959.0, "end": 2964.0, "text": " Less obvious is that writes and reads often have side effects because of memory mapped IO.", "tokens": [50514, 18649, 6322, 307, 300, 13657, 293, 15700, 2049, 362, 1252, 5065, 570, 295, 4675, 33318, 39839, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09036492449896676, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.0028007193468511105}, {"id": 876, "seek": 295600, "start": 2964.0, "end": 2971.0, "text": " For example, writing 2 bytes to 2006 will load them as an address into the PPU, that's one of those weird things.", "tokens": [50764, 1171, 1365, 11, 3579, 568, 36088, 281, 14062, 486, 3677, 552, 382, 364, 2985, 666, 264, 430, 8115, 11, 300, 311, 472, 295, 729, 3657, 721, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09036492449896676, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.0028007193468511105}, {"id": 877, "seek": 295600, "start": 2971.0, "end": 2976.0, "text": " And then writes that happen to 2007 will pass through to video memory at that address.", "tokens": [51114, 400, 550, 13657, 300, 1051, 281, 12656, 486, 1320, 807, 281, 960, 4675, 412, 300, 2985, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09036492449896676, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.0028007193468511105}, {"id": 878, "seek": 295600, "start": 2976.0, "end": 2984.0, "text": " Or writing to 4014 will start a DMA that transfers 256 bytes to video memory and stalls the processor for 512 cycles.", "tokens": [51364, 1610, 3579, 281, 3356, 7271, 486, 722, 257, 413, 9998, 300, 29137, 38882, 36088, 281, 960, 4675, 293, 50248, 264, 15321, 337, 1025, 4762, 17796, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09036492449896676, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.0028007193468511105}, {"id": 879, "seek": 298400, "start": 2984.0, "end": 2986.0, "text": " So these are not small things.", "tokens": [50364, 407, 613, 366, 406, 1359, 721, 13, 50464], "temperature": 0.0, "avg_logprob": -0.0558815523982048, "compression_ratio": 1.748299319727891, "no_speech_prob": 0.004331327509135008}, {"id": 880, "seek": 298400, "start": 2986.0, "end": 2993.0, "text": " And worse, there isn't even a small set of them because lots of cartridges have hardware inside them that does arbitrary stuff on reads and writes.", "tokens": [50464, 400, 5324, 11, 456, 1943, 380, 754, 257, 1359, 992, 295, 552, 570, 3195, 295, 47036, 362, 8837, 1854, 552, 300, 775, 23211, 1507, 322, 15700, 293, 13657, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0558815523982048, "compression_ratio": 1.748299319727891, "no_speech_prob": 0.004331327509135008}, {"id": 881, "seek": 298400, "start": 2993.0, "end": 2996.0, "text": " And weirdos are making new weird cartridges all the time.", "tokens": [50814, 400, 3657, 329, 366, 1455, 777, 3657, 47036, 439, 264, 565, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0558815523982048, "compression_ratio": 1.748299319727891, "no_speech_prob": 0.004331327509135008}, {"id": 882, "seek": 298400, "start": 2996.0, "end": 2998.0, "text": " And so here we have the main concession.", "tokens": [50964, 400, 370, 510, 321, 362, 264, 2135, 416, 29881, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0558815523982048, "compression_ratio": 1.748299319727891, "no_speech_prob": 0.004331327509135008}, {"id": 883, "seek": 298400, "start": 2998.0, "end": 3002.0, "text": " The emulator API for this chip offers a conditional read and write.", "tokens": [51064, 440, 846, 16381, 9362, 337, 341, 11409, 7736, 257, 27708, 1401, 293, 2464, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0558815523982048, "compression_ratio": 1.748299319727891, "no_speech_prob": 0.004331327509135008}, {"id": 884, "seek": 298400, "start": 3002.0, "end": 3005.0, "text": " These take the address, but also a condition.", "tokens": [51264, 1981, 747, 264, 2985, 11, 457, 611, 257, 4188, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0558815523982048, "compression_ratio": 1.748299319727891, "no_speech_prob": 0.004331327509135008}, {"id": 885, "seek": 298400, "start": 3005.0, "end": 3007.0, "text": " If the condition is true, you do what you'd expect.", "tokens": [51414, 759, 264, 4188, 307, 2074, 11, 291, 360, 437, 291, 1116, 2066, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0558815523982048, "compression_ratio": 1.748299319727891, "no_speech_prob": 0.004331327509135008}, {"id": 886, "seek": 298400, "start": 3007.0, "end": 3010.0, "text": " But if it's false, nothing happens and an arbitrary value is returned.", "tokens": [51514, 583, 498, 309, 311, 7908, 11, 1825, 2314, 293, 364, 23211, 2158, 307, 8752, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0558815523982048, "compression_ratio": 1.748299319727891, "no_speech_prob": 0.004331327509135008}, {"id": 887, "seek": 301000, "start": 3010.0, "end": 3014.0, "text": " Of course, this isn't linear, but it's not really that unrealistic if we were making a processor.", "tokens": [50364, 2720, 1164, 11, 341, 1943, 380, 8213, 11, 457, 309, 311, 406, 534, 300, 42867, 498, 321, 645, 1455, 257, 15321, 13, 50564], "temperature": 0.0, "avg_logprob": -0.056112719906700984, "compression_ratio": 1.6704225352112676, "no_speech_prob": 0.32743290066719055}, {"id": 888, "seek": 301000, "start": 3014.0, "end": 3019.0, "text": " We would just wire this through to the memory controller, which would then ignore the read or write if the bit isn't set.", "tokens": [50564, 492, 576, 445, 6234, 341, 807, 281, 264, 4675, 10561, 11, 597, 576, 550, 11200, 264, 1401, 420, 2464, 498, 264, 857, 1943, 380, 992, 13, 50814], "temperature": 0.0, "avg_logprob": -0.056112719906700984, "compression_ratio": 1.6704225352112676, "no_speech_prob": 0.32743290066719055}, {"id": 889, "seek": 301000, "start": 3019.0, "end": 3024.0, "text": " The real 6502, for example, has a pin that indicates whether it's doing a read or a write.", "tokens": [50814, 440, 957, 38566, 17, 11, 337, 1365, 11, 575, 257, 5447, 300, 16203, 1968, 309, 311, 884, 257, 1401, 420, 257, 2464, 13, 51064], "temperature": 0.0, "avg_logprob": -0.056112719906700984, "compression_ratio": 1.6704225352112676, "no_speech_prob": 0.32743290066719055}, {"id": 890, "seek": 301000, "start": 3024.0, "end": 3026.0, "text": " But I accept your criticism.", "tokens": [51064, 583, 286, 3241, 428, 15835, 13, 51164], "temperature": 0.0, "avg_logprob": -0.056112719906700984, "compression_ratio": 1.6704225352112676, "no_speech_prob": 0.32743290066719055}, {"id": 891, "seek": 301000, "start": 3026.0, "end": 3028.0, "text": " Feel free to defeat me by doing without this.", "tokens": [51164, 14113, 1737, 281, 11785, 385, 538, 884, 1553, 341, 13, 51264], "temperature": 0.0, "avg_logprob": -0.056112719906700984, "compression_ratio": 1.6704225352112676, "no_speech_prob": 0.32743290066719055}, {"id": 892, "seek": 301000, "start": 3028.0, "end": 3033.0, "text": " Another challenge is that the 6502 has a load of undocumented and really weird instructions.", "tokens": [51264, 3996, 3430, 307, 300, 264, 38566, 17, 575, 257, 3677, 295, 40472, 293, 534, 3657, 9415, 13, 51514], "temperature": 0.0, "avg_logprob": -0.056112719906700984, "compression_ratio": 1.6704225352112676, "no_speech_prob": 0.32743290066719055}, {"id": 893, "seek": 301000, "start": 3033.0, "end": 3038.0, "text": " And this wouldn't be so bad except that the emulator source code I'm working from is extremely hard to understand.", "tokens": [51514, 400, 341, 2759, 380, 312, 370, 1578, 3993, 300, 264, 846, 16381, 4009, 3089, 286, 478, 1364, 490, 307, 4664, 1152, 281, 1223, 13, 51764], "temperature": 0.0, "avg_logprob": -0.056112719906700984, "compression_ratio": 1.6704225352112676, "no_speech_prob": 0.32743290066719055}, {"id": 894, "seek": 303800, "start": 3038.0, "end": 3046.0, "text": " It's filled with all sorts of macro hacks that assume specific variable names, references to mysterious global variables like temp and foo,", "tokens": [50364, 467, 311, 6412, 365, 439, 7527, 295, 18887, 33617, 300, 6552, 2685, 7006, 5288, 11, 15400, 281, 13831, 4338, 9102, 411, 18274, 293, 726, 78, 11, 50764], "temperature": 0.0, "avg_logprob": -0.04856184757117069, "compression_ratio": 1.613240418118467, "no_speech_prob": 0.16443707048892975}, {"id": 895, "seek": 303800, "start": 3046.0, "end": 3052.0, "text": " pirate jokes, feuds between developers commenting out each other's wrong code, and so on.", "tokens": [50764, 27424, 14439, 11, 579, 32083, 1296, 8849, 29590, 484, 1184, 661, 311, 2085, 3089, 11, 293, 370, 322, 13, 51064], "temperature": 0.0, "avg_logprob": -0.04856184757117069, "compression_ratio": 1.613240418118467, "no_speech_prob": 0.16443707048892975}, {"id": 896, "seek": 303800, "start": 3052.0, "end": 3057.0, "text": " And unfortunately, I don't have any Nintendo games that actually execute many of these instructions.", "tokens": [51064, 400, 7015, 11, 286, 500, 380, 362, 604, 11578, 2813, 300, 767, 14483, 867, 295, 613, 9415, 13, 51314], "temperature": 0.0, "avg_logprob": -0.04856184757117069, "compression_ratio": 1.613240418118467, "no_speech_prob": 0.16443707048892975}, {"id": 897, "seek": 303800, "start": 3057.0, "end": 3063.0, "text": " So in the course of development, I made my own cartridge that executes a whole bunch of undocumented instructions when it starts up.", "tokens": [51314, 407, 294, 264, 1164, 295, 3250, 11, 286, 1027, 452, 1065, 27753, 300, 4454, 1819, 257, 1379, 3840, 295, 40472, 9415, 562, 309, 3719, 493, 13, 51614], "temperature": 0.0, "avg_logprob": -0.04856184757117069, "compression_ratio": 1.613240418118467, "no_speech_prob": 0.16443707048892975}, {"id": 898, "seek": 306300, "start": 3063.0, "end": 3068.0, "text": " It displays the results of those on the screen so that I can test whether my implementation matches the reference.", "tokens": [50364, 467, 20119, 264, 3542, 295, 729, 322, 264, 2568, 370, 300, 286, 393, 1500, 1968, 452, 11420, 10676, 264, 6408, 13, 50614], "temperature": 0.0, "avg_logprob": -0.046473394740711556, "compression_ratio": 1.6232394366197183, "no_speech_prob": 0.10666782408952713}, {"id": 899, "seek": 306300, "start": 3068.0, "end": 3075.0, "text": " This cartridge might be the world's most boring Nintendo game, even more boring than Wall Street Kid.", "tokens": [50614, 639, 27753, 1062, 312, 264, 1002, 311, 881, 9989, 11578, 1216, 11, 754, 544, 9989, 813, 9551, 7638, 18978, 13, 50964], "temperature": 0.0, "avg_logprob": -0.046473394740711556, "compression_ratio": 1.6232394366197183, "no_speech_prob": 0.10666782408952713}, {"id": 900, "seek": 306300, "start": 3075.0, "end": 3077.0, "text": " Here's what that game looks like.", "tokens": [50964, 1692, 311, 437, 300, 1216, 1542, 411, 13, 51064], "temperature": 0.0, "avg_logprob": -0.046473394740711556, "compression_ratio": 1.6232394366197183, "no_speech_prob": 0.10666782408952713}, {"id": 901, "seek": 306300, "start": 3077.0, "end": 3079.0, "text": " You can't win it or even play it.", "tokens": [51064, 509, 393, 380, 1942, 309, 420, 754, 862, 309, 13, 51164], "temperature": 0.0, "avg_logprob": -0.046473394740711556, "compression_ratio": 1.6232394366197183, "no_speech_prob": 0.10666782408952713}, {"id": 902, "seek": 306300, "start": 3079.0, "end": 3082.0, "text": " It exists only to destroy your mind.", "tokens": [51164, 467, 8198, 787, 281, 5293, 428, 1575, 13, 51314], "temperature": 0.0, "avg_logprob": -0.046473394740711556, "compression_ratio": 1.6232394366197183, "no_speech_prob": 0.10666782408952713}, {"id": 903, "seek": 306300, "start": 3082.0, "end": 3085.0, "text": " The last puzzle to solve is instruction dispatch.", "tokens": [51314, 440, 1036, 12805, 281, 5039, 307, 10951, 36729, 13, 51464], "temperature": 0.0, "avg_logprob": -0.046473394740711556, "compression_ratio": 1.6232394366197183, "no_speech_prob": 0.10666782408952713}, {"id": 904, "seek": 306300, "start": 3085.0, "end": 3089.0, "text": " When we read the instruction byte, we look at it and decide which instruction to execute.", "tokens": [51464, 1133, 321, 1401, 264, 10951, 40846, 11, 321, 574, 412, 309, 293, 4536, 597, 10951, 281, 14483, 13, 51664], "temperature": 0.0, "avg_logprob": -0.046473394740711556, "compression_ratio": 1.6232394366197183, "no_speech_prob": 0.10666782408952713}, {"id": 905, "seek": 308900, "start": 3089.0, "end": 3093.0, "text": " The natural way to implement this is with a switch statement and a case for each instruction.", "tokens": [50364, 440, 3303, 636, 281, 4445, 341, 307, 365, 257, 3679, 5629, 293, 257, 1389, 337, 1184, 10951, 13, 50564], "temperature": 0.0, "avg_logprob": -0.045744320198341654, "compression_ratio": 1.7197452229299364, "no_speech_prob": 0.007576524280011654}, {"id": 906, "seek": 308900, "start": 3093.0, "end": 3095.0, "text": " But that of course is not linear.", "tokens": [50564, 583, 300, 295, 1164, 307, 406, 8213, 13, 50664], "temperature": 0.0, "avg_logprob": -0.045744320198341654, "compression_ratio": 1.7197452229299364, "no_speech_prob": 0.007576524280011654}, {"id": 907, "seek": 308900, "start": 3095.0, "end": 3097.0, "text": " We can't do any branching of control flow.", "tokens": [50664, 492, 393, 380, 360, 604, 9819, 278, 295, 1969, 3095, 13, 50764], "temperature": 0.0, "avg_logprob": -0.045744320198341654, "compression_ratio": 1.7197452229299364, "no_speech_prob": 0.007576524280011654}, {"id": 908, "seek": 308900, "start": 3097.0, "end": 3101.0, "text": " We have to execute the same series of additions and multiplications each time.", "tokens": [50764, 492, 362, 281, 14483, 264, 912, 2638, 295, 35113, 293, 17596, 763, 1184, 565, 13, 50964], "temperature": 0.0, "avg_logprob": -0.045744320198341654, "compression_ratio": 1.7197452229299364, "no_speech_prob": 0.007576524280011654}, {"id": 909, "seek": 308900, "start": 3101.0, "end": 3105.0, "text": " So what I'll do is execute every single instruction every time.", "tokens": [50964, 407, 437, 286, 603, 360, 307, 14483, 633, 2167, 10951, 633, 565, 13, 51164], "temperature": 0.0, "avg_logprob": -0.045744320198341654, "compression_ratio": 1.7197452229299364, "no_speech_prob": 0.007576524280011654}, {"id": 910, "seek": 308900, "start": 3105.0, "end": 3107.0, "text": " Now I only want the right instruction to do anything.", "tokens": [51164, 823, 286, 787, 528, 264, 558, 10951, 281, 360, 1340, 13, 51264], "temperature": 0.0, "avg_logprob": -0.045744320198341654, "compression_ratio": 1.7197452229299364, "no_speech_prob": 0.007576524280011654}, {"id": 911, "seek": 308900, "start": 3107.0, "end": 3113.0, "text": " So the first thing I do is make 256 copies of the CPU state, basically the registers.", "tokens": [51264, 407, 264, 700, 551, 286, 360, 307, 652, 38882, 14341, 295, 264, 13199, 1785, 11, 1936, 264, 38351, 13, 51564], "temperature": 0.0, "avg_logprob": -0.045744320198341654, "compression_ratio": 1.7197452229299364, "no_speech_prob": 0.007576524280011654}, {"id": 912, "seek": 308900, "start": 3113.0, "end": 3115.0, "text": " That's a finite number of variables.", "tokens": [51564, 663, 311, 257, 19362, 1230, 295, 9102, 13, 51664], "temperature": 0.0, "avg_logprob": -0.045744320198341654, "compression_ratio": 1.7197452229299364, "no_speech_prob": 0.007576524280011654}, {"id": 913, "seek": 308900, "start": 3115.0, "end": 3117.0, "text": " I also have an active flag for each one of those.", "tokens": [51664, 286, 611, 362, 364, 4967, 7166, 337, 1184, 472, 295, 729, 13, 51764], "temperature": 0.0, "avg_logprob": -0.045744320198341654, "compression_ratio": 1.7197452229299364, "no_speech_prob": 0.007576524280011654}, {"id": 914, "seek": 311700, "start": 3117.0, "end": 3121.0, "text": " And exactly one of those active flags will be set to one for the correct instruction.", "tokens": [50364, 400, 2293, 472, 295, 729, 4967, 23265, 486, 312, 992, 281, 472, 337, 264, 3006, 10951, 13, 50564], "temperature": 0.0, "avg_logprob": -0.053982753379672184, "compression_ratio": 1.894736842105263, "no_speech_prob": 0.005729645024985075}, {"id": 915, "seek": 311700, "start": 3121.0, "end": 3125.0, "text": " Then I run all of the instructions on their own copies of the CPU state.", "tokens": [50564, 1396, 286, 1190, 439, 295, 264, 9415, 322, 641, 1065, 14341, 295, 264, 13199, 1785, 13, 50764], "temperature": 0.0, "avg_logprob": -0.053982753379672184, "compression_ratio": 1.894736842105263, "no_speech_prob": 0.005729645024985075}, {"id": 916, "seek": 311700, "start": 3125.0, "end": 3129.0, "text": " If I do any conditional reads or write, I include the active flag in the condition.", "tokens": [50764, 759, 286, 360, 604, 27708, 15700, 420, 2464, 11, 286, 4090, 264, 4967, 7166, 294, 264, 4188, 13, 50964], "temperature": 0.0, "avg_logprob": -0.053982753379672184, "compression_ratio": 1.894736842105263, "no_speech_prob": 0.005729645024985075}, {"id": 917, "seek": 311700, "start": 3129.0, "end": 3131.0, "text": " So only the correct effects will happen.", "tokens": [50964, 407, 787, 264, 3006, 5065, 486, 1051, 13, 51064], "temperature": 0.0, "avg_logprob": -0.053982753379672184, "compression_ratio": 1.894736842105263, "no_speech_prob": 0.005729645024985075}, {"id": 918, "seek": 311700, "start": 3131.0, "end": 3137.0, "text": " So then I have the resulting 256 states and I need to copy the one from the correct instruction back into the main state.", "tokens": [51064, 407, 550, 286, 362, 264, 16505, 38882, 4368, 293, 286, 643, 281, 5055, 264, 472, 490, 264, 3006, 10951, 646, 666, 264, 2135, 1785, 13, 51364], "temperature": 0.0, "avg_logprob": -0.053982753379672184, "compression_ratio": 1.894736842105263, "no_speech_prob": 0.005729645024985075}, {"id": 919, "seek": 311700, "start": 3137.0, "end": 3141.0, "text": " The way to do this is to zero them all out except for the active one.", "tokens": [51364, 440, 636, 281, 360, 341, 307, 281, 4018, 552, 439, 484, 3993, 337, 264, 4967, 472, 13, 51564], "temperature": 0.0, "avg_logprob": -0.053982753379672184, "compression_ratio": 1.894736842105263, "no_speech_prob": 0.005729645024985075}, {"id": 920, "seek": 311700, "start": 3141.0, "end": 3143.0, "text": " And we can do that with if and then just sum them all up.", "tokens": [51564, 400, 321, 393, 360, 300, 365, 498, 293, 550, 445, 2408, 552, 439, 493, 13, 51664], "temperature": 0.0, "avg_logprob": -0.053982753379672184, "compression_ratio": 1.894736842105263, "no_speech_prob": 0.005729645024985075}, {"id": 921, "seek": 311700, "start": 3143.0, "end": 3146.0, "text": " They'll all be zero except for the correct one, so we'll get the right answer.", "tokens": [51664, 814, 603, 439, 312, 4018, 3993, 337, 264, 3006, 472, 11, 370, 321, 603, 483, 264, 558, 1867, 13, 51814], "temperature": 0.0, "avg_logprob": -0.053982753379672184, "compression_ratio": 1.894736842105263, "no_speech_prob": 0.005729645024985075}, {"id": 922, "seek": 314600, "start": 3146.0, "end": 3150.0, "text": " Now it's kind of annoying to run every instruction on every tick of the CPU.", "tokens": [50364, 823, 309, 311, 733, 295, 11304, 281, 1190, 633, 10951, 322, 633, 5204, 295, 264, 13199, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08121033870812619, "compression_ratio": 1.7737704918032786, "no_speech_prob": 0.012429955415427685}, {"id": 923, "seek": 314600, "start": 3150.0, "end": 3153.0, "text": " And this technique is the main reason that it's not going to be that fast.", "tokens": [50564, 400, 341, 6532, 307, 264, 2135, 1778, 300, 309, 311, 406, 516, 281, 312, 300, 2370, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08121033870812619, "compression_ratio": 1.7737704918032786, "no_speech_prob": 0.012429955415427685}, {"id": 924, "seek": 314600, "start": 3153.0, "end": 3154.0, "text": " But it is completely linear.", "tokens": [50714, 583, 309, 307, 2584, 8213, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08121033870812619, "compression_ratio": 1.7737704918032786, "no_speech_prob": 0.012429955415427685}, {"id": 925, "seek": 314600, "start": 3154.0, "end": 3157.0, "text": " Another upside is that each instruction is completely independent.", "tokens": [50764, 3996, 14119, 307, 300, 1184, 10951, 307, 2584, 6695, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08121033870812619, "compression_ratio": 1.7737704918032786, "no_speech_prob": 0.012429955415427685}, {"id": 926, "seek": 314600, "start": 3157.0, "end": 3159.0, "text": " So they can actually be run in parallel.", "tokens": [50914, 407, 436, 393, 767, 312, 1190, 294, 8952, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08121033870812619, "compression_ratio": 1.7737704918032786, "no_speech_prob": 0.012429955415427685}, {"id": 927, "seek": 314600, "start": 3159.0, "end": 3161.0, "text": " So let's start up the benchmark.", "tokens": [51014, 407, 718, 311, 722, 493, 264, 18927, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08121033870812619, "compression_ratio": 1.7737704918032786, "no_speech_prob": 0.012429955415427685}, {"id": 928, "seek": 314600, "start": 3161.0, "end": 3163.0, "text": " Super Mario Brothers.", "tokens": [51114, 4548, 9343, 19886, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08121033870812619, "compression_ratio": 1.7737704918032786, "no_speech_prob": 0.012429955415427685}, {"id": 929, "seek": 314600, "start": 3163.0, "end": 3167.0, "text": " Here it's splitting the instructions across eight cores running in parallel.", "tokens": [51214, 1692, 309, 311, 30348, 264, 9415, 2108, 3180, 24826, 2614, 294, 8952, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08121033870812619, "compression_ratio": 1.7737704918032786, "no_speech_prob": 0.012429955415427685}, {"id": 930, "seek": 314600, "start": 3167.0, "end": 3171.0, "text": " If not for that instruction dispatch, this thing would run at playable frame rates.", "tokens": [51414, 759, 406, 337, 300, 10951, 36729, 11, 341, 551, 576, 1190, 412, 37146, 3920, 6846, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08121033870812619, "compression_ratio": 1.7737704918032786, "no_speech_prob": 0.012429955415427685}, {"id": 931, "seek": 314600, "start": 3171.0, "end": 3173.0, "text": " But, and yes, it is already running.", "tokens": [51614, 583, 11, 293, 2086, 11, 309, 307, 1217, 2614, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08121033870812619, "compression_ratio": 1.7737704918032786, "no_speech_prob": 0.012429955415427685}, {"id": 932, "seek": 317300, "start": 3173.0, "end": 3176.0, "text": " The cost of not cheating is that it runs pretty slow.", "tokens": [50364, 440, 2063, 295, 406, 18309, 307, 300, 309, 6676, 1238, 2964, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09102781002338116, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.0037070929538458586}, {"id": 933, "seek": 317300, "start": 3176.0, "end": 3179.0, "text": " The hardware Nintendo runs at 60 frames per second.", "tokens": [50514, 440, 8837, 11578, 6676, 412, 4060, 12083, 680, 1150, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09102781002338116, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.0037070929538458586}, {"id": 934, "seek": 317300, "start": 3179.0, "end": 3184.0, "text": " And the emulator free to run non-linear instructions gets 3,500 frames per second.", "tokens": [50664, 400, 264, 846, 16381, 1737, 281, 1190, 2107, 12, 28263, 9415, 2170, 805, 11, 7526, 12083, 680, 1150, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09102781002338116, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.0037070929538458586}, {"id": 935, "seek": 317300, "start": 3184.0, "end": 3195.0, "text": " But the linear version, and I did do a lot of optimization, gets 0.11 frames per second or 8.6 seconds per frame.", "tokens": [50914, 583, 264, 8213, 3037, 11, 293, 286, 630, 360, 257, 688, 295, 19618, 11, 2170, 1958, 13, 5348, 12083, 680, 1150, 420, 1649, 13, 21, 3949, 680, 3920, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09102781002338116, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.0037070929538458586}, {"id": 936, "seek": 317300, "start": 3195.0, "end": 3197.0, "text": " Which ain't fast.", "tokens": [51464, 3013, 7862, 380, 2370, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09102781002338116, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.0037070929538458586}, {"id": 937, "seek": 317300, "start": 3197.0, "end": 3200.0, "text": " Maybe you could help me out by putting this video in 2x speed.", "tokens": [51564, 2704, 291, 727, 854, 385, 484, 538, 3372, 341, 960, 294, 568, 87, 3073, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09102781002338116, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.0037070929538458586}, {"id": 938, "seek": 320000, "start": 3200.0, "end": 3208.0, "text": " I will say, though, in comparison that I have played AAA titles that at launch, inexplicably, on high-end hardware had comparable frame rates.", "tokens": [50364, 286, 486, 584, 11, 1673, 11, 294, 9660, 300, 286, 362, 3737, 34347, 12992, 300, 412, 4025, 11, 29961, 4770, 1188, 11, 322, 1090, 12, 521, 8837, 632, 25323, 3920, 6846, 13, 50764], "temperature": 0.0, "avg_logprob": -0.086199084604819, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.016401486471295357}, {"id": 939, "seek": 320000, "start": 3208.0, "end": 3213.0, "text": " And they were no doubt executing a great many non-linear instructions.", "tokens": [50764, 400, 436, 645, 572, 6385, 32368, 257, 869, 867, 2107, 12, 28263, 9415, 13, 51014], "temperature": 0.0, "avg_logprob": -0.086199084604819, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.016401486471295357}, {"id": 940, "seek": 320000, "start": 3213.0, "end": 3219.0, "text": " Speed aside, we now have a general-purpose computer, which renders everything we've done up until this point moot.", "tokens": [51014, 18774, 7359, 11, 321, 586, 362, 257, 2674, 12, 42601, 3820, 11, 597, 6125, 433, 1203, 321, 600, 1096, 493, 1826, 341, 935, 705, 310, 13, 51314], "temperature": 0.0, "avg_logprob": -0.086199084604819, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.016401486471295357}, {"id": 941, "seek": 320000, "start": 3219.0, "end": 3223.0, "text": " If we want a non-linear transfer function, we can just implement the hyperbolic tangent.", "tokens": [51314, 759, 321, 528, 257, 2107, 12, 28263, 5003, 2445, 11, 321, 393, 445, 4445, 264, 9848, 65, 7940, 27747, 13, 51514], "temperature": 0.0, "avg_logprob": -0.086199084604819, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.016401486471295357}, {"id": 942, "seek": 320000, "start": 3223.0, "end": 3228.0, "text": " If we want fractals, we can just write code that draws the Mandelbrot set on the Nintendo.", "tokens": [51514, 759, 321, 528, 17948, 1124, 11, 321, 393, 445, 2464, 3089, 300, 20045, 264, 15458, 338, 1443, 310, 992, 322, 264, 11578, 13, 51764], "temperature": 0.0, "avg_logprob": -0.086199084604819, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.016401486471295357}, {"id": 943, "seek": 322800, "start": 3228.0, "end": 3231.0, "text": " We can just write a good encryption algorithm like AES.", "tokens": [50364, 492, 393, 445, 2464, 257, 665, 29575, 9284, 411, 316, 2358, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10548273448286385, "compression_ratio": 1.6106870229007633, "no_speech_prob": 0.0024724146351218224}, {"id": 944, "seek": 322800, "start": 3231.0, "end": 3233.0, "text": " We can have a chess engine with search.", "tokens": [50514, 492, 393, 362, 257, 24122, 2848, 365, 3164, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10548273448286385, "compression_ratio": 1.6106870229007633, "no_speech_prob": 0.0024724146351218224}, {"id": 945, "seek": 322800, "start": 3233.0, "end": 3235.0, "text": " In fact, we already have one.", "tokens": [50614, 682, 1186, 11, 321, 1217, 362, 472, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10548273448286385, "compression_ratio": 1.6106870229007633, "no_speech_prob": 0.0024724146351218224}, {"id": 946, "seek": 322800, "start": 3235.0, "end": 3238.0, "text": " Chessmaster for the NES was included in our tournament already.", "tokens": [50714, 761, 442, 21640, 337, 264, 37212, 390, 5556, 294, 527, 13713, 1217, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10548273448286385, "compression_ratio": 1.6106870229007633, "no_speech_prob": 0.0024724146351218224}, {"id": 947, "seek": 322800, "start": 3238.0, "end": 3242.0, "text": " And by running it on our linear emulator, we have a linear model.", "tokens": [50864, 400, 538, 2614, 309, 322, 527, 8213, 846, 16381, 11, 321, 362, 257, 8213, 2316, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10548273448286385, "compression_ratio": 1.6106870229007633, "no_speech_prob": 0.0024724146351218224}, {"id": 948, "seek": 322800, "start": 3242.0, "end": 3244.0, "text": " So it seems I defeated even myself.", "tokens": [51064, 407, 309, 2544, 286, 15563, 754, 2059, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10548273448286385, "compression_ratio": 1.6106870229007633, "no_speech_prob": 0.0024724146351218224}, {"id": 949, "seek": 322800, "start": 3244.0, "end": 3247.0, "text": " And I can finally be done with this damn thing.", "tokens": [51164, 400, 286, 393, 2721, 312, 1096, 365, 341, 8151, 551, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10548273448286385, "compression_ratio": 1.6106870229007633, "no_speech_prob": 0.0024724146351218224}, {"id": 950, "seek": 322800, "start": 3250.0, "end": 3253.0, "text": " Alright, so what have we learned today?", "tokens": [51464, 2798, 11, 370, 437, 362, 321, 3264, 965, 30, 51614], "temperature": 0.0, "avg_logprob": -0.10548273448286385, "compression_ratio": 1.6106870229007633, "no_speech_prob": 0.0024724146351218224}, {"id": 951, "seek": 322800, "start": 3253.0, "end": 3255.0, "text": " It's the same thing we learned every time.", "tokens": [51614, 467, 311, 264, 912, 551, 321, 3264, 633, 565, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10548273448286385, "compression_ratio": 1.6106870229007633, "no_speech_prob": 0.0024724146351218224}, {"id": 952, "seek": 325500, "start": 3255.0, "end": 3260.0, "text": " Complexity is everywhere, even with something as simple as plus and multiplication by constants,", "tokens": [50364, 41184, 507, 307, 5315, 11, 754, 365, 746, 382, 2199, 382, 1804, 293, 27290, 538, 35870, 11, 50614], "temperature": 0.0, "avg_logprob": -0.05537559986114502, "compression_ratio": 1.688135593220339, "no_speech_prob": 0.032087747007608414}, {"id": 953, "seek": 325500, "start": 3260.0, "end": 3263.0, "text": " which mathematically can only create lines.", "tokens": [50614, 597, 44003, 393, 787, 1884, 3876, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05537559986114502, "compression_ratio": 1.688135593220339, "no_speech_prob": 0.032087747007608414}, {"id": 954, "seek": 325500, "start": 3263.0, "end": 3269.0, "text": " Given a tiny foothold by way of rounding error, we can bend them to our will and make them do anything.", "tokens": [50764, 18600, 257, 5870, 726, 900, 2641, 538, 636, 295, 48237, 6713, 11, 321, 393, 11229, 552, 281, 527, 486, 293, 652, 552, 360, 1340, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05537559986114502, "compression_ratio": 1.688135593220339, "no_speech_prob": 0.032087747007608414}, {"id": 955, "seek": 325500, "start": 3269.0, "end": 3272.0, "text": " And I think this is the same story of computer science.", "tokens": [51064, 400, 286, 519, 341, 307, 264, 912, 1657, 295, 3820, 3497, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05537559986114502, "compression_ratio": 1.688135593220339, "no_speech_prob": 0.032087747007608414}, {"id": 956, "seek": 325500, "start": 3272.0, "end": 3276.0, "text": " Complexity from simplicity, and maybe even of the universe.", "tokens": [51214, 41184, 507, 490, 25632, 11, 293, 1310, 754, 295, 264, 6445, 13, 51414], "temperature": 0.0, "avg_logprob": -0.05537559986114502, "compression_ratio": 1.688135593220339, "no_speech_prob": 0.032087747007608414}, {"id": 957, "seek": 325500, "start": 3276.0, "end": 3279.0, "text": " So don't underestimate simple things put together.", "tokens": [51414, 407, 500, 380, 35826, 2199, 721, 829, 1214, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05537559986114502, "compression_ratio": 1.688135593220339, "no_speech_prob": 0.032087747007608414}, {"id": 958, "seek": 325500, "start": 3279.0, "end": 3282.0, "text": " Anyway, if you made it this far, thank you for watching.", "tokens": [51564, 5684, 11, 498, 291, 1027, 309, 341, 1400, 11, 1309, 291, 337, 1976, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05537559986114502, "compression_ratio": 1.688135593220339, "no_speech_prob": 0.032087747007608414}, {"id": 959, "seek": 325500, "start": 3282.0, "end": 3283.0, "text": " Thank you for your attention.", "tokens": [51714, 1044, 291, 337, 428, 3202, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05537559986114502, "compression_ratio": 1.688135593220339, "no_speech_prob": 0.032087747007608414}, {"id": 960, "seek": 328300, "start": 3283.0, "end": 3287.0, "text": " And if you didn't make it this far, I don't even know what we're talking about.", "tokens": [50364, 400, 498, 291, 994, 380, 652, 309, 341, 1400, 11, 286, 500, 380, 754, 458, 437, 321, 434, 1417, 466, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06376645748431865, "compression_ratio": 1.31875, "no_speech_prob": 0.08494877815246582}, {"id": 961, "seek": 328300, "start": 3287.0, "end": 3289.0, "text": " I'm sure I'll be back soon with more stupid stuff.", "tokens": [50564, 286, 478, 988, 286, 603, 312, 646, 2321, 365, 544, 6631, 1507, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06376645748431865, "compression_ratio": 1.31875, "no_speech_prob": 0.08494877815246582}, {"id": 962, "seek": 328300, "start": 3289.0, "end": 3294.0, "text": " In any case, I've been Tom7, and this was Impractical Engineering.", "tokens": [50664, 682, 604, 1389, 11, 286, 600, 668, 5041, 22, 11, 293, 341, 390, 4331, 42559, 804, 16215, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06376645748431865, "compression_ratio": 1.31875, "no_speech_prob": 0.08494877815246582}, {"id": 963, "seek": 328300, "start": 3294.0, "end": 3295.0, "text": " See you soon.", "tokens": [50914, 3008, 291, 2321, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06376645748431865, "compression_ratio": 1.31875, "no_speech_prob": 0.08494877815246582}], "language": "en"}