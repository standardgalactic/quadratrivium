WEBVTT

00:00.000 --> 00:05.920
Recently, this amazing AI called GPT chat came out that will generate text based on your prompts.

00:05.920 --> 00:10.160
And the whole world is still kind of getting used to it because it's just so powerful.

00:10.160 --> 00:13.760
The neat thing is it can write Python scripts for Blender as well.

00:13.760 --> 00:17.520
The workflow is very different, so I've seen a lot of people experimenting,

00:17.520 --> 00:22.960
but today I will show you three examples that are actually useful for speeding up your routine

00:22.960 --> 00:27.760
and improving your art in Blender. If you find this interesting, please consider leaving a

00:27.760 --> 00:31.120
like on this video and let me know what you think of GPT chat.

00:31.120 --> 00:34.800
And you can also subscribe to stay updated on future tutorials.

00:34.800 --> 00:38.400
So to start, you're going to go to this website, chat.openair.com,

00:38.400 --> 00:41.440
and you need to make an account to use this chatbot.

00:41.440 --> 00:44.720
Once you log in, you get this screen where you can type your prompts over here.

00:44.720 --> 00:49.440
And it also gives you some examples, explains about the capabilities and the limitations.

00:49.440 --> 00:54.720
I'm also going to explain about the limitations and troubleshooting later in this video.

00:54.720 --> 00:59.680
But we're going to start with the first example, and that is scattering objects around your scene.

00:59.680 --> 01:01.920
We're going to create our first prompt for the AI.

01:01.920 --> 01:06.640
And I'm going to ask it specifically to write a Python script for Blender.

01:06.640 --> 01:11.120
And to just start out simply, let's create 10 cubes and scatter them around our scene

01:11.120 --> 01:14.480
with a maximum distance to the world origin of 10.

01:18.320 --> 01:22.480
Once you've tied your prompt, you can simply hit enter and it will output something.

01:22.480 --> 01:26.480
This usually takes a few seconds, but you can see it's already generating

01:26.480 --> 01:30.160
a text and here it's generating a Python script.

01:30.160 --> 01:34.080
So it's now done with the script and we can actually see that it creates a new scene

01:34.080 --> 01:35.840
and sets the world origin and everything.

01:35.840 --> 01:40.160
And it will also create an explanation of your script right here.

01:40.160 --> 01:44.560
So let's test it out by going into Blender and opening the text editor over here.

01:45.360 --> 01:47.440
And we will create a new text file.

01:48.080 --> 01:51.360
And we're just going to paste the code that the AI just gave us.

01:51.360 --> 01:53.920
We're going to go to text and run the script.

01:53.920 --> 01:56.240
You can also press alt P and see what happens.

01:57.360 --> 01:58.240
Here we go.

01:58.240 --> 02:00.480
Okay, so we have I think 10 cubes.

02:00.480 --> 02:04.640
Yes, there are 10 over here and they are scattered around the scene.

02:05.280 --> 02:07.360
This one is actually still at the world origin.

02:07.360 --> 02:11.280
So I wonder if this is the original cube or yeah,

02:11.280 --> 02:14.880
it must be because it can't just be randomly at the starting point.

02:14.880 --> 02:18.320
We can also scatter the objects in a non-random way.

02:18.320 --> 02:23.520
Going back to GPT chat, I'm going to ask it to make a circular array of circles.

02:24.240 --> 02:28.400
Again, we're going to ask it to write a Python script in Blender to do this.

02:31.280 --> 02:32.960
Also, you want to be specific.

02:32.960 --> 02:36.160
So I'm going to ask for 16 individual circles.

02:36.160 --> 02:40.320
And the main circle that it's going to be scattered along,

02:40.320 --> 02:42.400
I'm going to specify the radius.

02:45.040 --> 02:46.560
So let's see what it comes up with now.

02:47.520 --> 02:50.960
We can actually see that it's adding a primitive curve.

02:50.960 --> 02:52.480
So it understands that.

02:52.480 --> 02:54.880
So our AI is done writing the code.

02:54.880 --> 02:59.200
Again, it gives a full explanation also at every line of the code.

02:59.200 --> 03:02.240
It gives a small explanation, which is very useful.

03:02.240 --> 03:05.760
We're just going to copy the code and paste it into our text editor.

03:05.760 --> 03:07.600
Let's run our script and see what happens.

03:09.120 --> 03:13.120
All right, so it's pretty hard to see, but there is definitely a circular array.

03:13.360 --> 03:20.640
Yeah, if we select all of them, wow, this is actually pretty perfect because they align here.

03:23.200 --> 03:25.840
This actually turned out better than I even imagined.

03:25.840 --> 03:28.400
I just expected any size whatsoever,

03:28.400 --> 03:32.080
but it made it the size so that they perfectly line up with each other.

03:32.080 --> 03:36.080
To be honest, I wouldn't even know how to do this in Blender, let alone this quickly.

03:36.640 --> 03:42.080
Going on to the next example, this might be the most useful use case for GPT chat.

03:42.080 --> 03:43.840
And that is bulk actions.

03:45.840 --> 03:47.600
So let's say we've imported this character,

03:47.600 --> 03:51.360
but we can see every object has a different material,

03:51.360 --> 03:53.760
even though some objects have the same color.

03:54.400 --> 03:56.480
Where there are only four colors in this character,

03:56.480 --> 03:59.120
but there are a bunch of materials.

03:59.120 --> 04:02.560
This can happen sometimes when you switch objects between programs,

04:02.560 --> 04:05.840
or especially when you import a bunch of vector graphics.

04:05.840 --> 04:10.400
This is a prime example where GPT chat can save us hours of time.

04:10.400 --> 04:12.720
Going back to our GPT chat window,

04:12.720 --> 04:15.520
I'm going to ask the AI to look through all the materials

04:15.520 --> 04:20.240
and see which materials have the same hex color value in their base color.

04:20.240 --> 04:23.440
If it has the same hex value, it means it's the same color.

04:23.440 --> 04:28.000
And then I'll ask it to combine those duplicate materials into one combined material

04:28.000 --> 04:30.240
and then apply that material to the objects.

04:31.120 --> 04:32.800
All right, the script is done.

04:32.800 --> 04:35.920
And it says the script will iterate over every material

04:35.920 --> 04:37.920
and get the base color of the material

04:37.920 --> 04:41.520
and then convert it to a hex string and create a dictionary out of it.

04:41.520 --> 04:42.880
Next time it finds a material,

04:42.880 --> 04:45.040
it checks if it's already in the dictionary.

04:45.040 --> 04:48.320
And if yes, it will add it to the list of materials with the same color.

04:48.320 --> 04:52.080
And if it's not, it will create a new entry in the dictionary with a different color.

04:52.080 --> 04:54.320
Then the script will iterate over all those colors

04:54.320 --> 04:57.360
and see if there are colors with multiple materials.

04:57.360 --> 04:59.920
If yes, it will create a combined material,

04:59.920 --> 05:02.880
so a new material, and then apply that to the objects.

05:03.520 --> 05:08.560
So let's go back to our text editor and just paste our script here

05:08.560 --> 05:10.320
and run this and see what it does.

05:12.240 --> 05:18.560
Okay, so we can see that it tries to delete all the materials at the very end

05:18.560 --> 05:19.840
and something is going wrong.

05:21.120 --> 05:24.400
Function material is expected a material type, not list.

05:24.400 --> 05:28.080
I guess it's going wrong because it's trying to make a list called materials,

05:28.080 --> 05:30.640
but maybe that term is already taken somewhere else.

05:30.640 --> 05:33.040
So we're just going to get rid of that last sentence.

05:35.840 --> 05:38.160
Nevertheless, if we now go to our object,

05:38.160 --> 05:41.280
we can see that it has the correctly combined material.

05:41.280 --> 05:45.920
So all these objects with the same color now have a combined material.

05:45.920 --> 05:49.840
So we don't have to go through every object and select our material right here

05:49.840 --> 05:51.680
because that saves a lot of time.

05:51.680 --> 05:54.800
So for the last portion of this video, I want to get creative.

05:54.800 --> 05:58.880
I want to ask the AI to actually generate a mesh for us.

05:58.960 --> 06:03.040
One thing that's pretty complicated to generate normally in Blender is a fractal.

06:03.040 --> 06:05.440
So we're going to create a Mandelbrot set.

06:05.440 --> 06:11.120
And once again, it's as simple as creating a specific prompt for GPT chat.

06:11.120 --> 06:14.880
I've been experimenting with creating fractals using GPT chat.

06:15.920 --> 06:18.320
And it's a hit or miss situation.

06:18.320 --> 06:20.240
Sometimes it works, sometimes it doesn't.

06:20.240 --> 06:23.360
I haven't managed to create an actual 3D fractal yet,

06:23.360 --> 06:26.320
but I have managed to create this 2D fractal.

06:26.320 --> 06:30.000
Trying to get it to actually create a mesh itself,

06:30.000 --> 06:32.000
it seems to have a lot of trouble with that.

06:32.000 --> 06:33.760
You'd have to try this in the future though,

06:33.760 --> 06:36.480
because this chatbot is constantly being updated.

06:36.480 --> 06:40.560
So what I'm going to do is I'm going to create a fractal using a point cloud.

06:40.560 --> 06:44.640
It's similar to the method from bad normals and his whole fractal machine add-on.

06:44.640 --> 06:47.200
So it's not like there's no other way to create them,

06:47.200 --> 06:50.640
but it's just really cool to see how simple it is.

06:50.640 --> 06:54.160
So I'm once again asking it to create a Python script for Blender.

06:54.160 --> 06:59.200
I'm going to ask it to make a Mandobrot set out of points that is one layer thick.

06:59.840 --> 07:02.320
I'm also asking it to convert points to vertices

07:02.320 --> 07:04.640
so we can instantly see what the shape looks like.

07:10.320 --> 07:13.360
GPT chat needs a little more time than usual to create this,

07:13.360 --> 07:17.600
but we can see that it is now creating something.

07:17.600 --> 07:22.080
It's very interesting because it's using a completely different method than before.

07:23.040 --> 07:26.400
But yeah, it's still working with complex numbers

07:26.400 --> 07:31.200
and doing all sorts of math that I am not qualified enough to understand.

07:31.200 --> 07:34.640
So it's now creating the point cloud Mandobrot set.

07:34.640 --> 07:37.200
It's even naming everything. It's so cool.

07:37.200 --> 07:38.960
Okay, so our script seems to be done.

07:38.960 --> 07:41.040
Let's copy it and see if it works.

07:42.640 --> 07:44.000
It's the moment of truth. Let's see.

07:44.720 --> 07:52.240
Okay, so I don't know what this is,

07:53.200 --> 07:58.080
but it doesn't really resemble anything close to a Mandobrot set.

07:58.080 --> 08:00.800
It just looks like an array of random points,

08:00.800 --> 08:04.000
but that's no problem. We're just going to ask GPT chat again.

08:04.000 --> 08:08.800
I also like to specify what happened because maybe the AI will see what went wrong.

08:08.800 --> 08:11.920
So let's try to specify it as clearly as possible.

08:12.880 --> 08:18.160
Currently, I can't get it to actually create the script that I got yesterday.

08:18.160 --> 08:21.040
I'm just going to show you what it came up with yesterday.

08:21.040 --> 08:25.200
Unfortunately, I have no footage of me giving the prompt and getting back that response.

08:25.200 --> 08:28.320
So you'd have to trust me on the fact that I don't know anything about coding

08:28.320 --> 08:30.080
and that the AI just made it for me.

08:30.800 --> 08:34.720
So running the script actually takes quite a long time

08:34.720 --> 08:38.160
and it will create this Mandobrot pillar.

08:38.160 --> 08:42.080
It's actually a 3D shape, but it's just a bunch of 2D Mandobrot

08:42.080 --> 08:44.160
slices stacked on top of each other.

08:44.160 --> 08:47.040
You could definitely change the script so it outputs one slice,

08:47.040 --> 08:49.840
but I just deleted every slice but one.

08:49.840 --> 08:53.760
We're going to quickly hop into geometry notes and actually make something cool out of this.

08:53.760 --> 08:56.160
So a quick way to make this look interesting is just

08:56.160 --> 08:58.480
instancing cubes on every point.

08:58.480 --> 09:00.720
We're going to grab an instance on points node

09:01.840 --> 09:05.600
and just add them right here, and then we're going to create a cube as well.

09:06.000 --> 09:13.840
And set the size to 0.01 and let's just connect this to our mesh.

09:14.800 --> 09:18.400
And yeah, we have this pretty nice looking grid.

09:18.400 --> 09:20.480
Obviously, this is just a static mesh.

09:20.480 --> 09:22.320
It doesn't grow or anything.

09:22.320 --> 09:25.680
If you want to change the parameters, you'd have to generate a new one.

09:25.680 --> 09:28.080
Over here, I have this Mandobob as well.

09:28.080 --> 09:31.360
We can quickly give it the geometry nodes group.

09:31.360 --> 09:32.320
Yeah, there we go.

09:32.640 --> 09:36.480
Of course, we can also use these points to create a mesh.

09:36.480 --> 09:40.800
Let's again create a new geometry nodes group and let's add a mesh to points node

09:40.800 --> 09:43.840
because these are actually vertices and not points.

09:43.840 --> 09:46.560
Next, we're going to add a points to volume node.

09:47.920 --> 09:50.000
And let's just play around with these settings a little bit.

09:50.000 --> 09:55.280
The radius is way too high, so let's put it at 0.1 is too small, maybe 0.2.

09:56.080 --> 10:01.520
We can still barely see it, so let's just create a volume to mesh node next.

10:02.560 --> 10:07.120
If we want a more detailed shape, let's up the voxel threshold to 500.

10:07.120 --> 10:07.680
There we go.

10:07.680 --> 10:10.640
That's already looking more like a fractal.

10:10.640 --> 10:15.200
And we can also play with the threshold of the volume to mesh node a little bit if we want to.

10:15.840 --> 10:17.760
So yeah, we have a very quick Mandobob set.

10:17.760 --> 10:21.200
I suggest just try asking a lot of questions to the AI.

10:21.200 --> 10:26.000
Ask them in different ways and it will give you some surprising stuff.

10:26.000 --> 10:29.440
Actually, one thing that I can't even explain is this thing.

10:29.680 --> 10:34.800
It was a similar kind of point cloud setup and then change it into a mesh.

10:34.800 --> 10:37.200
But what is even going on here?

10:37.200 --> 10:44.720
We can maybe see this inflection point right here, but I couldn't tell you how this shape works

10:44.720 --> 10:46.240
or what it looks like.

10:46.240 --> 10:50.480
If you recognize this shape, if it has a name, let me know in the comments below

10:50.480 --> 10:54.240
because it just looks so asymmetrical and abstract.

10:54.240 --> 10:56.400
And yeah, the AI just generated this.

10:56.880 --> 11:01.120
It generated a point cloud and then I just did the same as we did before with the Mandobob

11:01.120 --> 11:01.440
set.

11:01.440 --> 11:04.960
Just converted it to a mesh and yeah, pretty neat.

11:04.960 --> 11:06.800
Couldn't have made this myself for sure.

11:07.600 --> 11:10.480
So yeah, that concludes our introduction to GPT Chat.

11:10.480 --> 11:13.040
It has some very interesting use cases.

11:13.040 --> 11:17.520
Let me know in the comments what is the craziest response you got from GPT Chat.

11:17.520 --> 11:18.960
I would love to know.

11:18.960 --> 11:21.360
Without further ado, I'll catch you next time.

11:21.360 --> 11:25.200
Leave a like on this video if you find it interesting and subscribe for future tutorials.

11:25.920 --> 11:27.520
There are building something here.

11:27.520 --> 11:31.760
It's been a hell to actually make this video, but I'll see you next time.

11:31.760 --> 11:32.400
Bye bye.

