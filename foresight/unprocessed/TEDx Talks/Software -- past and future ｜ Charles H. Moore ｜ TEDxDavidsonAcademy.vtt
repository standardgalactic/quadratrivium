WEBVTT

00:00.000 --> 00:29.000
I guess you've learned just about all you need to know about me, but let me repeat a little bit.

00:29.000 --> 00:34.000
I moved into this area about 15 years ago. I'm sorry, I apologize. Your mic's not on.

00:34.000 --> 00:38.000
We're going to have your interest in it again, so we're going to re-rack.

00:38.000 --> 01:06.000
Again, please welcome Chuck Moore.

01:06.000 --> 01:26.000
Thank you for being here. I moved into this area about 15 years ago from Silicon Valley.

01:26.000 --> 01:36.000
I love it here. I moved first to Sierra City in California, which is on the Pacific Crest Trail, a long trail.

01:36.000 --> 01:46.000
I hiked it many times. Then I moved to Assets, which is five miles closer to the ridge of Sierra.

01:46.000 --> 01:52.000
I'm in the inclined village. I'm in the Carson City, and I'm living in Rollington.

01:52.000 --> 01:57.000
All this generation, the Reno, has remained my social city.

01:58.000 --> 02:06.000
The libraries are fantastic, and I'm a great library person.

02:06.000 --> 02:15.000
I've been ever since I started this genre of software development, basically.

02:16.000 --> 02:24.000
I invented the fourth language in 1968. That was at the same time that the sea was invented.

02:24.000 --> 02:32.000
It was a wondrous, creative period for inventing languages, computer languages.

02:33.000 --> 02:48.000
There are three kinds of computer languages.

02:48.000 --> 02:56.000
Based on the notation, C, for instance, has expressions like A plus B equals something.

02:56.000 --> 03:02.000
It's called in-fix notation. The operator is in between the two arguments.

03:02.000 --> 03:10.000
This has a prefix notation, which would be plus AB with the operator coming first.

03:10.000 --> 03:17.000
Fourth is post-fix notation, where you have AB plus.

03:17.000 --> 03:26.000
In my mind, that is by far the superior notation. It leads to much simpler programs.

03:26.000 --> 03:34.000
For instance, in C, you have a lot of parentheses, unless you have an enormous number of parentheses.

03:34.000 --> 03:37.000
In fourth, you have no parentheses.

03:37.000 --> 03:46.000
It's a much more natural language for human beings who did not learn algebra in grade school.

03:46.000 --> 03:52.000
Algebra teaches you to put the operator in between the arguments, which is unnatural.

03:52.000 --> 04:02.000
The operator really goes last. You have a column of numbers, and the sum is at the bottom.

04:02.000 --> 04:05.000
The sum is the last thing you develop.

04:05.000 --> 04:14.000
I developed fourth, and I used it very profitably in my programming.

04:14.000 --> 04:17.000
I convinced a few other people to use it.

04:17.000 --> 04:23.000
Back in the 70s, there was quite a community of thousands of fourth programmers all over the world.

04:23.000 --> 04:26.000
A lot of them in Germany and Russia and China.

04:26.000 --> 04:33.000
As faded, there are still thousands of fourth programmers, but they're invisible.

04:34.000 --> 04:37.000
Partly because fourth can be used to trade secret.

04:37.000 --> 04:44.000
If you write fourth programs, they'll be smaller, faster, and bug-free.

04:44.000 --> 04:51.000
These are attributes that people don't like to share. They like to hold them close.

04:52.000 --> 05:05.000
I took a great pride in writing programs that I could use to do things that I wanted to do.

05:05.000 --> 05:15.000
I had to write programs for other people in order to earn money, but those were not really satisfactory experiences.

05:15.000 --> 05:18.000
It's better to do my thing my way.

05:19.000 --> 05:23.000
One of the first things I did was design circuit boards.

05:23.000 --> 05:28.000
It's very convenient that this slide is out there.

05:30.000 --> 05:42.000
I would like to suggest that some of you, some of the younger of you, might like to write their own software.

05:42.000 --> 05:49.000
Back in the 70s, that's what you did. You could not buy software. There was no software to buy.

05:49.000 --> 05:57.000
I thought the future would be everyone writing their own software using the most efficient language, the simplest language they could,

05:57.000 --> 06:04.000
until Bill Gates came along and persuaded everybody to buy software instead of building it.

06:05.000 --> 06:13.000
In fact, his genius was he persuaded you to buy it over and over and over.

06:15.000 --> 06:22.000
That is the way he corrected the bugs, lack of features, and the original versions.

06:22.000 --> 06:30.000
Fourth software is simpler than C software. What does this program did C?

06:30.000 --> 06:32.000
What makes this program do C?

06:32.000 --> 06:42.000
OS, I think you probably see. There's only two languages in the world today, C, Java, and Fourth.

06:42.000 --> 06:48.000
And you've never heard of Fourth, but it is orbiting Saturn.

06:49.000 --> 06:56.000
The first program I wrote for my own use was the design circuit boards.

06:56.000 --> 07:03.000
All I recorded was a small Fourth program and the ability to draw rectangles.

07:03.000 --> 07:08.000
So that is a good exercise in programming.

07:08.000 --> 07:15.000
If you can find any language on a computer that you have, and they can draw pictures,

07:15.000 --> 07:20.000
draw rectangles and move them around and make circuit boards.

07:20.000 --> 07:33.000
You can see the rectangles, most lines are rectangles, and most, well, these are contacts of octagon, or taxidons, but they could be rectangles.

07:33.000 --> 07:37.000
And you can do something on trivial and you can have a lot of fun doing it.

07:37.000 --> 07:42.000
You can add a lot of color, dark color pictures. That's fun.

07:43.000 --> 07:49.000
The reason for doing that is that current languages can do everything.

07:49.000 --> 07:53.000
C is designed to do everything you want to do.

07:53.000 --> 07:57.000
Windows is designed to let you do everything you want to do.

07:57.000 --> 08:04.000
Fourth does not do that. Fourth lets you do anything, but not everything.

08:04.000 --> 08:07.000
Fourth is what I call extensible.

08:07.000 --> 08:15.000
If you want to add a new command to do something you had not anticipated wanting to do, you can do that easily.

08:15.000 --> 08:19.000
You can build the language in whatever direction you want to go.

08:19.000 --> 08:26.000
Everything isn't there at the beginning, so you don't have that overhead.

08:26.000 --> 08:29.000
Now the overhead is significant.

08:30.000 --> 08:38.000
The design of a circuit board might take a megabyte of code.

08:38.000 --> 08:42.000
And fourth will take a kilobyte.

08:42.000 --> 08:47.000
Three orders of magnitude less code.

08:47.000 --> 08:53.000
Three orders of magnitude, not one percent, but one tenth of one percent of the amount of code.

08:53.000 --> 09:00.000
I have demonstrated this numerous times nobody wants to know.

09:00.000 --> 09:09.000
There's a whole industry built up around large, inefficient buggy software.

09:09.000 --> 09:12.000
It starts with Windows.

09:12.000 --> 09:21.000
It even goes into the standards committee with this bug they found recently in the secure socket layer.

09:21.000 --> 09:27.000
You might say it's shocking, you might say it's fraudulent, you might say it's a conspiracy,

09:27.000 --> 09:31.000
but it's good business because people are willing to pay money.

09:31.000 --> 09:34.000
It makes a lot of jobs.

09:34.000 --> 09:45.000
You don't want a disruptive technology that will put nine million of the ten million programmers out of work.

09:45.000 --> 09:52.000
But you can write your own software, do your own thing, and get a lot of satisfaction from it.

09:52.000 --> 09:58.000
It's a lot more fun than the possible puzzles.

09:58.000 --> 10:04.000
After designing circuit boards, I thought it would be fun to design computers.

10:04.000 --> 10:14.000
So I took the same philosophy I used with circuit boards, and I dragged it down three orders of magnitude and designed a computer chip.

10:15.000 --> 10:18.000
It isn't as hard as you might think.

10:18.000 --> 10:24.000
In fact, it's really quite easy to know what you have to do is draw rectangles.

10:24.000 --> 10:30.000
The fact that the rectangles are tiny instead of macroscopic is not important.

10:30.000 --> 10:36.000
And you lay out these rectangles nicely, three or four layers of them, and you have a computer chip.

10:37.000 --> 10:51.000
To actually make such a chip will cost you from $5,000 to $25 million, depending on exactly what you're doing.

10:51.000 --> 10:56.000
It's really not affordable, but actually making the chip is not important.

10:56.000 --> 11:06.000
What you want to do is design it, and simulate it, and test it in virtual space instead of in real space.

11:06.000 --> 11:15.000
And if you get a really hot design that you like, and you can convince someone else to finance, then you've got a product.

11:15.000 --> 11:24.000
Now, we've got a product. We've got 144 computers on a one centimeter chip.

11:24.000 --> 11:33.000
And a very conservative technology that's what it costs us $5,000 to make in small quantities.

11:33.000 --> 11:39.000
So it can be done. Why would you do that?

11:40.000 --> 11:47.000
Personally, I'm doing it to prove out how everyone else is the few man job.

11:47.000 --> 11:54.000
My software is making 100 kilobytes to design the chip.

11:54.000 --> 12:04.000
Cadence and metro graphics are the standard tools the industry uses to design chips, and they're 100 megabytes.

12:04.000 --> 12:12.000
You hear of programs that contain a million lines of code.

12:12.000 --> 12:21.000
I know the software used in fighter planes, F-22, has more than a million lines of code, several million.

12:21.000 --> 12:25.000
A million lines of code is my following.

12:25.000 --> 12:28.000
You stack the paper this deep.

12:28.000 --> 12:31.000
You can't read a million lines of code.

12:32.000 --> 12:37.000
You've got a thousand people contributing to a million lines of code.

12:37.000 --> 12:40.000
Nobody knows what it does.

12:40.000 --> 12:42.000
No one person does.

12:42.000 --> 12:49.000
It takes the entire corporation to know what that code does.

12:49.000 --> 12:56.000
And no one in that corporation can answer your question or you have to ask it.

12:57.000 --> 13:01.000
You have to trust that somehow it all works together.

13:01.000 --> 13:05.000
And we all know how badly it works.

13:05.000 --> 13:09.000
The Windows comes out every year.

13:09.000 --> 13:13.000
And it's probably a million lines of code.

13:13.000 --> 13:17.000
But it isn't as big as some of the big codes.

13:17.000 --> 13:23.000
Big codes are for weather forecasting, for new test simulation,

13:23.000 --> 13:28.000
for coordinating the motion of all the chips in the world.

13:28.000 --> 13:36.000
There are big problems and there are big data, but they don't require big programs.

13:36.000 --> 13:43.000
You can see this for yourself when you download an app to your smart phone.

13:43.000 --> 13:49.000
Apps are of 10 megabytes of code.

13:49.000 --> 13:52.000
10 megabytes.

13:52.000 --> 13:57.000
If I were to do that in fourth, it would be 10 megabytes.

13:57.000 --> 14:03.000
On the other hand, I would have to program the entire phone in order to get that kind of an advantage.

14:03.000 --> 14:09.000
And so far, I've been unwilling to program on a smart phone.

14:09.000 --> 14:11.000
Maybe I will.

14:11.000 --> 14:18.000
I have 144 little computers that can do it.

14:18.000 --> 14:22.000
You do need memory to store images.

14:22.000 --> 14:24.000
You need memory for large databases.

14:24.000 --> 14:26.000
Memory is a good thing.

14:26.000 --> 14:30.000
But memory is not a good thing to show off the software.

14:30.000 --> 14:35.000
Because 10 megabytes of code has bugs.

14:35.000 --> 14:40.000
10 kilobytes of code does not.

14:40.000 --> 14:46.000
If you want efficiency, if you want compactness, if you want viability,

14:46.000 --> 14:49.000
you want small programs.

14:49.000 --> 14:54.000
That means the program can do everything but it can do anything.

14:54.000 --> 14:58.000
We've written a browser in fourth.

14:58.000 --> 15:00.000
It was small.

15:00.000 --> 15:04.000
It wasn't as small as I would make it because I didn't like the way they were doing it,

15:04.000 --> 15:06.000
but it's possible.

15:06.000 --> 15:10.000
You can write an email application.

15:10.000 --> 15:16.000
The way phones work, the way everything works in this world,

15:16.000 --> 15:19.000
people don't really write software.

15:19.000 --> 15:28.000
They take software packages from various sources and stick them together.

15:28.000 --> 15:31.000
It's the same way to make software.

15:31.000 --> 15:39.000
The software in the cell phone contains a chip which does amazingly many things.

15:39.000 --> 15:46.000
A component from here, a component from there, all glued together.

15:46.000 --> 15:50.000
This uses 10 times as much energy, 10 times as much area,

15:50.000 --> 15:54.000
10 times as much design effort as it needs to,

15:54.000 --> 15:57.000
but that's the way people are doing fixed holidays.

15:57.000 --> 15:59.000
Not conspiracy.

15:59.000 --> 16:02.000
It just seems to be the easiest way to do it.

16:02.000 --> 16:06.000
It's the way the corporate managers want you to do it.

16:06.000 --> 16:08.000
It doesn't have to be that way.

16:08.000 --> 16:13.000
We can do better, smaller, faster, cheaper,

16:13.000 --> 16:19.000
and it's up to the young generation coming along to change some of these trade-offs.

16:19.000 --> 16:23.000
The way you do it is to write a program that does something you're interested in,

16:23.000 --> 16:27.000
show it off a little bit, and prove it.

16:27.000 --> 16:31.000
It's quite true on software.

16:31.000 --> 16:36.000
One of the things about fourth is perhaps to help the back.

16:36.000 --> 16:42.000
It's very easy to write a fourth operating system, fourth system.

16:42.000 --> 16:48.000
It only takes about 10k of code.

16:48.000 --> 16:53.000
Everyone who got interested in fourth wrote their own system.

16:53.000 --> 16:55.000
There's many systems out there.

16:55.000 --> 17:02.000
You want to know about it just to Google and find all kinds of references.

17:02.000 --> 17:07.000
I have a website up there called ColorForce.com.

17:07.000 --> 17:11.000
That's C-O-L-O-R-F-O-R-T-H.

17:11.000 --> 17:16.000
The company I'm working with now is called Greenerays.

17:16.000 --> 17:18.000
They have a website.

17:18.000 --> 17:26.000
There's a fourth.com website, which has been around for as long as the internet.

17:26.000 --> 17:29.000
Lots of information out there.

17:29.000 --> 17:35.000
One thing I'm very pleased to have been involved in.

17:35.000 --> 17:40.000
The conventional way of doing things is not always the right way.

17:40.000 --> 17:45.000
It was probably arranged as a historical accident.

17:45.000 --> 17:47.000
That's kind of true for a fourth.

17:47.000 --> 17:53.000
A fourth came along and became what it is more or less accidentally.

17:53.000 --> 17:58.000
If I had not been a fourth, I don't think it would have been a third.

17:58.000 --> 18:00.000
It's not a popular way of doing things.

18:00.000 --> 18:04.000
There's no great opportunity working there.

18:04.000 --> 18:06.000
It's turned out to be a good thing.

18:06.000 --> 18:08.000
I'm very proud of it.

18:08.000 --> 18:10.000
Thank you for listening to me.

