What's up everybody, welcome to System Crafters, I'm David Wilson and this is the Absolute
Beginners Guide to Emacs.
So if you've never been to this channel before, I'd like to first of all say welcome.
This channel is basically about crafting your system configuration using free and open
source tools like GNU Emacs, GNU Geeks and more, like basically any of the nice sort
of off the beaten path tools that you might find in the GNU Linux world.
So I've made about 50 videos on Emacs for this channel, but the one thing that I haven't
done yet is create a video that's explicitly for those who have never used Emacs before
or those who've only used it very little.
So in this video, I'm going to give you exactly what you need to get starting using Emacs
and to understand the basic concepts and key bindings of the editor.
I know this video might actually seem pretty long, I'm not sure how long it's going to
be yet, let's just see how it goes when we record it here, but I'm going to put chapter
markers in the timeline below so that you can skip ahead to various topics that you're
interested in learning about and also you can return to it as a reference.
And also the notes that we're looking at on the screen right now, this is actually an
org mode file, and I'm going to commit this to a GitHub repository so then you can go
look at it and see exactly what I'm reading to you right now whenever you go and want
to study this yourself.
So let's get started.
So first of all, we can talk about installing Emacs because that's the first thing you'll
have to do before you can actually use it.
So Emacs can be installed on GNU Linux, Mac OS and Windows.
The latest stable version of Emacs is 27.1, so it's best to try to find that version
for your operating system.
The things we covered today obviously will be related to 27.1, but they also should work
in the more recent stable versions like 25 and 26.
Those have existed for a few years now, so you should be able to find those on your Linux
distribution if you happen to have an older version.
But if you can, definitely try to get Emacs 27.1 because it is the most recent release
and it has lots of improvements upon those previous releases.
Alright, so for GNU Linux, definitely GNU Linux is the easiest OS for installing and
using Emacs by far.
It's available in pretty much every Linux distribution's package manager, so however
you normally install packages in GNU Linux, you can use that to install Emacs.
Typically the name of the package is Emacs or something containing Emacs, so it's pretty
easy to find.
Just keep in mind, like I said before, that your distribution may actually have an older
version of Emacs.
Like I think in Ubuntu 20.04, they have Emacs 26, so just keep in mind that there may be
an older version, but it's not really a big deal if you don't have a newer version.
There are ways to find newer versions as well, so just search for your distribution and look
to see if there's a way to install that if you really care about having the latest version.
One other question to be asked, I guess, about using Emacs on GNU Linux, and also on macOS
as well, possibly Windows, I'm not sure if it works on Windows, is whether you want to
use it in the graphical user interface mode or in the terminal mode.
You have options for both.
Obviously, right now I'm using Emacs in graphical mode because I have different font sizes and
different font colors and all this stuff going on, however you can also use it in the terminal,
which can be very useful for various reasons, especially if you want to SSH into another
computer and use Emacs remotely, etc., those kinds of things.
If you're very partial to using things in the terminal, it is absolutely possible to
use Emacs in the terminal and pretty much all the same functionality is available except
for having different font families for different text and also different font sizes, so those
are the only limitations you technically should have by doing that.
But for the purpose of these demonstrations, we're just going to show the graphical version
of Emacs since that's probably the one most people will use.
So on macOS, you can install Emacs pretty easily using Homebrew, a lot of people use
Homebrew for installing packages on macOS.
So there's a default recipe called Emacs, which can be installed using this command
that we have here on the screen.
There's also an alternative recipe called Emacs Plus, which I've heard about recently,
which has some extra options that enable certain behavior that might be interesting to you.
So if you want to have some more control over the Emacs build that you get installed on
your machine, definitely check out the Emacs Plus package.
You can also download a .app file for Emacs from the site Emacs4MacOS.com.
If you just want to download something and just copy it over to your computer easily,
that's also a possibility.
For Windows, you can download Emacs directly from the GNU website.
This link that I have here just takes you directly to the installer download, so you
can click that if you look at the show notes.
Also if you use MSIS 2, which I would guess is probably not so many of you, you can use
Pacman and MSIS 2 to install Emacs and then you can run that as a program in Windows.
And also if you use Choclity, which is probably more likely, you can use Choco install Emacs
to install the latest version of Emacs on Windows, so that's pretty useful.
Okay, so now that we've got Emacs installed, I assume you've stopped the video and gone
and installed Emacs by now, let's talk about the basic concepts of Emacs so that you kind
of understand what you're looking at whenever you start the editor and also how to sort
of find your way around.
So the user interface, so Emacs has a toolbar and a menu bar like many conventional graphical
programs and they can be very useful at first to learn what functionality is available in
Emacs.
However, I don't think you're going to need them for very long.
Once you actually get comfortable using Emacs and know how to find things yourself, you
won't really need to use the menu bar very much.
However, let's actually take a look at it and see what that looks like.
So I'm going to jump over to another screen here where I have a very plain configuration
of Emacs to use for demonstration purposes.
Now this is not the basic in the box configuration.
You can see that I have a dark theme turned on mainly because I don't want to blind you
whenever I'm changing back and forth between the demo Emacs and my personal Emacs.
So the only thing as things that I've done to the basic in the box configuration here
is that I have set the font size to be a little bit bigger and I've changed the theme to be
a dark thing.
So everything else is just stock Emacs, what we're looking at right now.
And as you can see, as I mentioned before, there is a menu bar up here at the top of
the window and there's also a toolbar that has some buttons.
These icons look a little bit small because I'm using kind of a high DPI screen, but on
a normal DPI screen, these things will be pretty much normal size like you would expect.
So the menus are typical to what you would see in other programs.
We have a file menu for dealing with files.
You can see that there's actions for opening files, opening directories, saving files,
save as, close the file.
And then also there's some window control commands here, which we'll talk about a little
bit later, quit, etc.
The interesting thing to note here is that each or many of the menu entries have the
actual key binding that is associated with the action that this menu item performs.
So this can be a very good way at first to get acquainted with the common key bindings
that you will want to use in Emacs because Emacs is best used as a keyboard driven interface.
You don't really want to use a mouse so much in Emacs.
So learning the key bindings by looking at these different menus can be a really helpful
way to get started fast learning those bindings.
So the other thing to mention is that there are some of these menus that are here all
the time and then there's some that get displayed whenever you're looking at a certain type
of buffer.
So in this case, we're looking at a Lisp buffer.
So we get this Lisp interaction mode information.
But if I were to open up another file, like let's say an org file, org mode file, you'll
see that now we have this table menu, we have the org menu, we have the text menu.
And those give you the mode specific actions that you might want to use for that mode.
We'll talk about modes in a minute.
And as usual, whenever you go to see all the actions here, you can see the key bindings
that you might want to learn for those actions.
So like I said, for any type of file that you're editing that has its own functionality,
it's definitely good to take a look at the menu items for that to see what the possible
actions are, how they're organized, and also the key bindings that you might be able to
use with those.
So the toolbar itself, I find it to be not super helpful just because it has, you know,
common stuff you might want to do, I think the toolbar does change contextually based
on things that you're doing, but I literally have never used it, I always turn it off.
And that's the nice thing to know about both the menu bar and the toolbar, they can be
disabled pretty easily.
If you look at the series of videos I do called Emacs from scratch, I go through in the basically
the first video how to turn this stuff off so that you have a more minimalistic view
into Emacs, sort of like what you see right now in my configuration.
So once you're ready to dispense with all of the extraneous UI elements, you can easily
do that.
So another interesting thing to note is that in the terminal version of Emacs, the menu
bar actually is still there.
And let's let's see if I can do this without breaking anything.
So I'm going to try to run Emacs inside of a terminal right now.
So Emacs dash Q dash NW.
So we're running terminal mode Emacs inside of graphical Emacs sounds a little bit crazy,
but that's what's happening right now.
And then you see there is a menu bar up here.
And I think the key is F10.
So if I press F10, it actually shows the menu for the terminal mode of Emacs.
I don't know all the key bindings to navigate through these.
I think there's like control N, control P, things like that to move back and forth.
But you do have all that same information still available to you the same way as you
have in the graphical interface.
So if you want to use terminal mode Emacs, then you still may have the ability to learn
some things from the menu, which is pretty pretty cool, I think.
So one last thing.
I'm kind of doing this video coming from the perspective of someone who might be using
some other editors or IDEs.
So I'm going to try to relate things to what you might be expecting from those IDEs.
And one thing that you probably have seen a lot that you don't see right now on my screen
or in this other demo Emacs is there's no file tree on the left hand side of the window.
And it's just something that Emacs doesn't have by default.
Emacs predates that sort of UI paradigm of having a file tree on the left side.
So it's something that you don't see, however, you can easily add that using community packages.
And there's other ways to do file management and file browsing in Emacs that, in my opinion,
are better than having that file tree always visible.
So we'll talk about those in other videos.
But just know that even though you don't see it right now, it's very easy to add that
if it's something that you're used to having and you want to have.
All right.
So also in all these sections, usually I'm adding links to the Emacs manual in case
you want to get some extra context about the things that I'm talking about.
So definitely check out the links to the Emacs manual whenever you see those in case you
do need some more information.
Okay.
So a very important concept in Emacs that's different than what you might know from typical
graphical interface paradigms or desktop environments is windows and frames.
So the concept of a window is different in Emacs than what you know.
In modern desktop environments, usually a window is a window for a program that is managed
by the desktop environment and not by the program itself.
So usually it's a window that has like an X button, a minimize button, et cetera.
And usually when you run a program, it launches a window that you see.
However, in Emacs, a window is not a desktop window.
It's actually a pane inside of the current Emacs window that you're looking at right
now.
So let me actually just demonstrate that for you.
I'm going to do a horizontal split or vertical split.
Let's see.
It's a vertical split, I think.
So basically I'm splitting that one window you're looking at into two.
So now I have two windows visible side by side.
I can also do a horizontal split and have another split top and bottom here on this side.
So these are windows in the concept of Emacs.
And the interesting thing about windows is that as you can see here, they all are showing
the same buffer right now that obviously they can show different buffers, but we're all
looking at the same buffer.
All of the windows had their own location scrolling inside that buffer.
So it's a way that you can see the same file side by side, maybe looking at different parts
of it or looking at two different files and comparing them, whatever you want to do.
So it's a very useful way to maximize the use of your screen real estate inside of Emacs.
And that is windows.
Now what you think of as a window is called a frame in Emacs.
So this whole screen that you see right now, this is one Emacs frame.
And it's possible to create multiple frames in Emacs.
So if we go to our demo Emacs here, what I'm going to do is split this so that you can
actually see, and this is my personal configuration that is loaded up right now, so that you can
see whenever I create the second frame.
So I'm going to use the file menu here and click New Frame.
It's going to create a new frame, then I'll go and open the old frame on this side.
So now we have basically two, what you might consider windows on the desktop environment,
but these are actually two frames for Emacs.
They all have their own file menus and toolbars, etc.
That's how you can tell they're independent.
However, they're not really independent in the sense that they share information from
the same Emacs process.
So as you see here, the same file is open in both.
If I were to go looking for the scratch buffer or even this demo file that I've got set up
for the configuration for this.
These buffers are available in both of these frames, so whenever you try to switch to one
of those, you're going to see it in both of the frames, which it might be a little bit
different to you if you're used to having an editor or IDE that sort of is focused on
loading one project per desktop window.
In Emacs, you're going to have the same stuff in both windows.
So that might take a little bit of getting used to, and you might think that, oh, well,
I've got all these files open, how am I going to deal with keeping them separate?
There are ways to deal with that, which we can talk about in another video, but it is
kind of helpful in some ways.
So for instance, if you want to have one frame open on one screen, if you have multiple monitors,
you can have a frame open on another screen, and then you can share buffers between them.
You can show the same buffer, different buffers.
You have a lot more options in your workflow, so you're not really so limited by which frame
open which file or which buffer, etc.
So this is just one thing to know whenever you start to use Emacs is that you do have
this possibility to use multiple frames.
So in my case, I don't really use multiple frames in the traditional sense.
I'm actually using multiple frames here because Emacs is my desktop environment, but that's
like way out of scope for this discussion.
So let's just focus on the fact that in most cases, you'll probably use only a single frame
unless you'd like to have multiple frames as part of your workflow.
And as usual, we have some links here to more manual information.
Okay, so buffers are also a very important concept to understand in Emacs.
What we're looking at right now actually is a buffer.
A buffer is basically just an object in Emacs that holds text and other information to be
displayed by a window.
Also buffers can be used for things that aren't being displayed, that can be used for communicating
with external processes or storing other information, writing out logs, etc.
So it may not actually be something that gets displayed in a window, but in most cases,
a buffer is going to be displayed in a window so that you can see it and interact with it.
The most obvious example of a buffer is one that contains the contents of a file that
you've opened so that you can edit it and then save it back to that file.
But there are many other types of special buffers in Emacs that are used only for displaying
temporary information or for even creating a full user interface.
So for instance, the MAGIT package is a really excellent Git interface, the Git source control
system interface for Emacs, and it does a custom buffer interface so that you can manage
your code repository.
Let me actually just show you an example of that.
I'm going to open up the repository for my .files, and now this is a buffer that has some information
about the Git repository for my .files, but if I go and move my cursor around and start
pressing Tab on these sections, it actually expands them, and you can see the diff of
some of the files that I've been changing in my .files folder, and you can also press
other buttons like let's say LL to open up the history of changes in my repository.
So basically, in Emacs, a buffer is not just something for editing files, it could be for
creating a fully custom user interface to do some kind of task that you need to do.
And many of the community packages that you'll find, or even stuff that's built into Emacs,
still have these custom buffers that you will be looking at.
And this is a normal buffer like anything else, and I can switch to that previous buffer that
I was in, which is this presentation.
So these things are all sort of on the same level playing field.
Text files and user interface buffers can be switched between like anything else, basically.
So this is actually one of the more confusing aspects of Emacs to beginners.
It was very confusing to me at first, because on the screen right now, you can't really
see which buffers are actually open in Emacs.
You have to actually list the buffers before you find them.
So it could be a little bit jarring at first, because you're like, I don't know where all
my files are.
I don't know what's open currently.
Normally in an editor or an IDE, you would probably have like file tabs at the top that
would show you which files are open.
Now you can actually get that in Emacs.
There is a command you can run called, I think this is in earlier versions, but it may only
be in Emacs 27, so just keep this in mind.
There is the global tab line mode, and then it will actually give you tabs that you can
click on.
They don't look so nice as they do in other programs.
However, this is something that is built in the Emacs that you can use if you want that
tab interface.
However, I don't necessarily recommend that unless you really want it.
It's better to get used to the buffer management commands and key bindings in Emacs.
So for instance, Ctrl XB, which we'll talk about in a little bit, will bring up a buffer
list.
Was that the right one?
Okay.
Yeah.
Ctrl XB will give you the ability to switch between buffers by completing them.
So we'll talk about that in a minute, but basically there are ways in Emacs to get to
all the buffers that are currently open very conveniently.
So don't let it sort of discourage you if you don't really understand how buffers work
at the outset whenever you start.
So let's talk about a couple of important buffers that you will definitely see whenever
you use Emacs.
These are buffers that are, at least the first two will be open every time you use Emacs,
and the last one is something that might show up when you're using it.
The first one is the Scratch buffer.
And let me just switch back to it really quickly.
So the Scratch buffer is basically, I mean, the name Scratch kind of gives you a hint,
but it's basically like a blank page of paper that you can use for writing down notes or
just anything temporary that you need to copy and paste somewhere.
I often use it for copying some text or writing down something that I don't really need to
save to a file, but I just need to kind of write it down for a moment so I can use it
some at some other point.
So it's good for little notes.
It's also already set up as a Emacs Lisp interaction mode so that you can write some simple Emacs
Lisp code.
Maybe if you're like trying out how to do something, or maybe you're trying to run a
command a certain way, you can just use this as a temporary buffer for doing that.
So it has some utility in that, in that way.
There's also the Messages buffer, which is very useful because what it does is has a
log of all the messages that have been written out for the user to see in Emacs.
So there's this line down at the bottom of the screen, which we'll talk about in a moment,
where messages get written.
And if I were to try to scroll up in this screen right now, you'll see that there's
a beginning of buffer message that gets written basically saying, I can't scroll up anymore.
But the same message is being written to this message log.
So if you ever see a string get written to the bottom of the screen, you can always go
to this Messages buffer to see the history of things that were written to the screen
in case you missed it.
Or maybe you just want to go back and check to see what happened.
So it can be very useful for that.
Definitely take a look at the Messages buffer sometime just to see what kind of information
is in there.
And lastly, there is the Warnings buffer, which is basically a buffer that shows you
like potential errors that have been encountered while running Emacs.
I don't know if I have one right now.
Yeah, I do.
So basically I have some some errors here, warnings here basically that are being written
from a package.
And you might see this buffer pop up if there is any kind of error like that, it usually
is pretty intrusive because they want you to see what's happening.
So if it does pop up, don't worry because it doesn't necessarily mean anything catastrophic
is happening.
But it's something to keep in mind if you do see it.
So now let's talk about the mode line.
This is not really something that the name the name is not very obvious whenever you
first hear it, but it's something that will remind you of something that you're used to
from other editors.
So in many editors or IDEs, what you'll see is there's a status bar at the bottom of the
screen, which basically gives you the current status of the editor, maybe information about
the line and column of where your cursor is in the currently open file, maybe what type
of file it is, that sort of thing.
Well, Emacs has something like that and they call it the mode line.
So if you look down at the bottom of the screen here, you can see that we are currently in
the messages buffer.
I can click on this actually and it will switch the buffers.
That's another way to switch buffers.
But like I said, I don't recommend using the mouse very heavily in Emacs.
You also have information about like where you are in the buffer right now.
It says all because we are looking at a buffer where you can see everything at once.
However, if you start scrolling in a buffer that's long, you'll see that we're like 8%
ahead in the buffer.
We're also currently on line 85.
And then some packages will actually show you information like basically we're seeing
that we're in a Git repository.
We're on the master branch.
That could be pretty helpful.
This is something that also is pretty common in IDEs.
And then you see what type of file we're in.
So this is an org mode file.
If you haven't used Emacs before and you haven't heard of org mode, it's basically like markdown
files where you have a file with markup, but it's a lot more than that.
So definitely check out my videos on org mode if you haven't heard of org mode before because
it can do many, many things.
However, this is basically just saying that we are in an org mode file.
You can actually click on this to get the same menus down here that you get for the
mode up here in the menu bar.
So if you've turned off the menu bar in the future, but you still want to see those menus
for this mode, you can still click on the mode here to see those menus, which is kind
of helpful.
So let's see what else.
Yes, so one major difference between the mode line and the status bar compared to other
IDEs is that you actually get one mode line per window inside of Emacs.
Like I was saying before, windows are like panes inside of Emacs.
And when you split the window, you'll actually get one mode line per window that's split.
So in this case, I'm going to try to do a couple of splits.
And we can see that this window below has its own mode line.
And this one has its own mode line that only extends to the point where this window is
visible.
And this one also has its own mode line.
And they all mentioned which file they have open.
So I can basically switch to scratch buffer here.
I can switch to the demo.el here.
And you can see that we have all the mode lines have the name of the buffer visible on each
of them, basically, and all that same information visible at the same time.
So this is kind of good for being able to get information about what windows you have
open at a glance.
And also there could be window specific information that can be helpful for like jumping to different
windows.
Maybe if you have a package for that.
So it's kind of useful, even though it maybe it does seem like it wastes some screen space,
but I find it to be pretty useful.
It's a nice way to sort of delineate what's happening on the screen.
So also the last thing to mention is that the mode line is fully customizable and can
be made to look very nice through your own configuration or from community packages.
So all of this text here, you can change all of it.
You can change the format of how the information is displayed, you can change whether it's aligned
to the right or to the left, you can change the color, you can add icons, you can do basically
anything you want to do with this line.
As you can see here, I have a much more minimal and nice looking line that has different colors
of text that has sort of more well presented information has icons.
And this comes from a package called doom mode line.
So definitely take a look at the different mode line packages that are available in the
Emacs community.
On one of the videos of Emacs from scratch, maybe video number two or three, I think.
I show how to set up this mode line.
So if you want to learn how to configure this to do that, definitely check out that series.
But just keep in mind that even though the initial look of Emacs is kind of like old
looking and maybe not so attractive, you can change all of that and make it look really
nice without a whole lot of work.
All right, so the Echo area and the mini buffer, these are also very important.
And I sort of pointed to that before.
So the Echo area is this line at the very bottom of the screen where messages get written
whenever things happen in Emacs.
So like if I try to scroll up in this buffer when it's already at the top, it will write
out beginning of the buffer here in the Echo area.
So this is the place where you're going to get a lot of information from packages.
Like maybe if you're using an ID package and you put your cursor on a particular function
name, it might give you the documentation for that function down in the bottom.
It's just a very useful place for showing transient information that might be helpful
to you at any given moment.
However, that same area gets used for something else called the mini buffer and the mini buffer
is basically another temporary interaction space for the user where you can be prompted
for information or selections or anything like that.
So for instance, if I try to open a file with the find file key binding, you can see now
that in the Echo area, we now have a prompt for find file and it gives me the current
directory to start from.
And once I start moving my cursor around, you can see that I'm actually typing in this
mini buffer at the bottom of the screen.
Now this mini buffer actually can have multiple lines, not just that single line.
So if you look at my buffer switching command, the one that I use in my configuration, this
has multiple lines and I can actually move my cursor through them to select the different
buffers.
So basically this mini buffer area actually is very useful and a lot of your interaction
with Emacs is going to happen through commands that use the mini buffer.
So very useful things to understand.
Also it's not very hard to understand.
It's just a place at the bottom of the screen where things tend to happen.
So check out these two entries in the Emacs manual if you want to learn more about those.
Alright so commands, commands are a very important part of Emacs because this is where a lot
of the useful functionality in Emacs comes from.
So command in Emacs is basically a function that has some special information attached
to it so that it gets treated as a user facing command, something that the user might actually
want to execute.
So a lot of this is like editing behavior, like if you want to delete a line or insert
some text or whatever, those can all be done through commands.
However, a lot of other useful things can be done through commands as well, which I'll
show some examples for in a second.
So in Emacs to run a command, you can either bind a command to a keybinding, which is already
done in a lot of cases for built-in functionality, but you can run any command by name by using
the alt x keybinding.
So if I go over to the demo here, hit alt x, now you see in the echo area I get a prompt
for the mx, which I'll explain in a minute, to basically type in the name of a command.
Now this prompt can be completed with all the names of the commands that are in Emacs.
So if I press tab to do completion, you're going to get a listing of all possible commands
in Emacs at this moment.
A lot of these commands come from Emacs built in, but any commands, any third-party packages
or community packages you install will also add their own commands, and you can write
your own commands too, which show up in this list.
So basically anything that's possible to do by the user in Emacs will show up here.
And one thing you might notice is that many of these commands have prefixes with a particular
concept, like mouse, drag, etc.
This actually makes it very easy to do completions only for a certain subset of the commands.
So if I wanted to type in mouse-drag and press tab, it will complete to all of the mouse-drag
commands.
So this is a very nice way to look for commands that are related to a specific concept.
So another one you could do is like find- to do all the basically the file visiting commands,
etc.
So this is a very useful way to find things that you can do in Emacs.
So basically, like I said, not all of them are for editing.
There's things that you can do for showing different behavior in Emacs or different interfaces,
basically.
So I wanted to show you a couple of these really quickly.
So there's one called DRED.
And like I mentioned before, there are better ways to do file listings in Emacs than just
having a tree open.
DRED is one example of this.
It's basically a directory browser inside of Emacs.
So if I use alt-x and type in DRED, press enter, it's going to ask me which directory
that I want to open in DRED.
I'm just going to leave it to be the one that I'm currently in and press enter.
Now we get this buffer that basically shows us all of the files and directories that are
inside of that directory and all the information like which user owns the file, which group
owns the file, the permissions, the file change date, etc.
Basically it looks like the output of LS on Linux, which is true because it actually
does come from LS effectively.
But you can navigate through this listing of files and press enter on any file to open
it.
And you can also navigate through directories.
So this org files is a directory.
If I press enter, it goes into that directory and I can open any of those files in this
subdirectory.
So you can even press enter on the dot-dot to go up one level as well.
So it's kind of useful to be able to have this kind of browsing functionality built
into Emacs.
You can also do things like copying files, moving files, etc.
So many of these commands will do extra things that are not just for editing files, they're
going to be for useful behavior that you might want to see.
So let's see, what else do I have?
So calendar.
So you can actually show a calendar.
Run alt X, type calendar, and it will give you this nice calendar view at the bottom of
the screen.
There's a special little buffer here that you have keybindings in.
So if you see that there's this right angle bracket, you can click that, but you can also
type that character on the keyboard and go back and forward in your calendar to look
at different days, which is pretty awesome.
There's also a built-in shell in Emacs.
So if I run alt X and type in E shell, you see it at the bottom of the screen, hopefully
you noticed that.
I press enter and now we get this embedded shell in Emacs.
And the interesting thing about this shell is that it actually is written in Emacs Lisp
and it emulates bash.
So this shell works on GNU Linux, it works on macOS, and it works on Windows all the same
way because it's written in Emacs Lisp.
So you have basically a normal shell environment that you can use anywhere all the same way.
So as you can see, through the power of commands in Emacs and also through the abilities that
buffers provide, you can have all kinds of interactive experiences inside of these windows.
So you basically have to go look for all the commands that you might want to use for that.
And I'll give you one last one just for the sake of amusement.
If you get bored one day and you want to play a game, just type in alt X and type in Tetris.
And then we can just go ahead and play a little game of Tetris here in Emacs.
I know it's probably kind of weird to think that a Tetris game comes bundled with Emacs,
but you'd actually be surprised how many more games are actually included with Emacs, among
other things.
This is just something to keep in mind for just sort of proving to yourself that there's
a lot of things that you can do with Emacs with the built-in functionality.
So as I mentioned before, you can install new commands into Emacs using community packages
and you can also write your own, we'll cover both these things in another video.
So major and minor modes, another really important concept in Emacs.
So in other editors, there's usually functionality that gets enabled for files with a particular
extension.
So you get Python programming functionality for Python dot py files that you open.
So Emacs also has this.
This functionality is provided through something called a major mode.
So a major mode provides the functionality needed for a particular buffer, and it's usually
activated based on the extension of a file that you open in that buffer.
So like I said, if you open a dot py file, it would load the Python mode, etc.
Sometimes this doesn't happen by default.
Maybe you install a package from the community for a particular language, you may have to
do a little bit of configuration before it will open for that file format.
But a lot of the stuff that's built in the Emacs like dot EL files for Emacs list, etc.
will open up a specific mode.
And a lot of times what these modes do for file formats is they turn on syntax highlighting
so that when you open a file, you actually get colorization of all the symbols in the
file, which I'm sure you're used to from other editors or IDEs.
However, there can be other functionality that gets enabled for custom modes.
So like we saw before with that maget buffer that shows the get status of my repository,
that actually comes from a major mode that gets enabled whenever I run that maget status
command.
So major modes are what basically provide the core functionality for a specific buffer.
Now major modes often are activated using commands.
So even if it is a mode that gets activated using a file extension is still going to activate
a mode using its commands.
So if we were to type in, let's say, org dash mode.
So for any file that ends with the dot org extension, there's probably going to be some
mapping in Emacs that says you need to run the org dash mode command, which turns on the
major mode for org for org for org files, basically, so org mode.
So basically, any buffer is going to have some modus loaded some major modus loaded.
And if there's nothing that's specified for a particular mode, it might get a sorry for
a particular type of buffer, it might get loaded up in what's called the fundamental
mode, which basically just means there's really no special functionality added.
The last important thing to mention about major modes is that there can only be one
major mode active in the buffer at any given time.
So if you try to start a major mode in a buffer, actually, let's let's go do an example of
that.
So I'll load up Emacs.org.
Let me close this really quickly.
Whoops.
I'm not using my normal keybinding, so I'm a little bit lost sometimes in this configuration.
All right.
So right now we're in org mode, right?
So you can see down here that this is org.
I think if I hover over it, does it say org mode?
No.
But what if I change it to another mode?
Like, let's say I run a command to change it to some other mode.
So there's like a Python mode.
Let's just run Python mode and see what happens.
I'm going to press enter.
And what's going to happen is all the syntax highlighting in this buffer changes.
The mode down here in the mode line also changes.
And that's because we changed to Python mode, even though this is not a Python file.
So you can basically do whatever you want.
You can start any mode at any time.
It just may not have the right results.
So that just goes to show that Emacs doesn't really have a specific understanding other
than what's put into the configuration about what mode is possible for any file.
You can activate whatever mode at any time.
So I'm just going to go back to org mode here, run that command again to put it back
into org mode.
And now we're back to it.
So that also demonstrates that there can only ever be one major mode at any given time.
I was able to change the major mode, but there was only one active.
So there's a different type of mode that can be active where many are active at the same
time, both in the single buffer that you're looking at and globally across Emacs.
And that's called a minor mode.
So minor modes typically provide helpful functionality that isn't specific to the major mode of the
current buffer.
They're usually things that you might need to customize your workflow or even change
the way that things are displayed in Emacs.
So many things that come from third party or community packages are going to provide
minor modes because they're sort of like extra functionality that are really helpful.
There's plenty of minor modes that are built into Emacs and we're about to look at one
of them.
All right.
So there is a mode called HL line mode, which will cause the current line that your cursor
is on in the file to be highlighted.
So what I'm going to do is in the, in the mini buffer, I'm going to press alt X to pull up
the command prompt basically, and I'm going to type in HL dash line dash mode, press enter.
And now you can see that we have a nasty yellow color highlighting the current line where
my, where my cursor is, and that's because I turned on the HL line mode to highlight
the current line.
However, if we switch to another buffer, you'll see that the current line is not actually
being highlighted.
Let me find a better one that that demonstrates this a little bit more clearly.
And now this one does not actually have the highlighting turned on.
And that's because I only turned on that highlighting for the other buffer.
So that means that a minor mode can be turned on only in one buffer.
However, some minor modes provide a global version of the minor mode so that they get
turned on in all, all buffers.
So now if I were to run the global HL line mode by using alt X and press enter, it turns
it on in this buffer.
But then if we go to the messages buffer, you can see that it's also on there as well.
So minor modes can be turned on locally or globally, and you can have many minor modes
turned on at the same time, either locally or globally.
So minor modes are a way to sort of add additional functionality in wherever you want it to be
at any time.
You can also turn them on and off conditionally for various buffers.
You have a lot of flexibility in what you can do with that, which is a lot different
than other editors that you might know of.
Usually when you install an extension in a particular editor, it's always on or always
off depending on what you set it for.
So in Emacs, you have a lot more flexibility on how you deal with that.
All right.
So now that we've covered the basic concepts of Emacs and sort of the high level of things
that you're going to want to know to use it effectively, let's talk about the key bindings
that you can use to do things that you would normally want to do on a daily basis.
So as I mentioned before, Emacs is definitely the most efficient and productive when you
focus on keyboard based control.
The key binding system, frankly, is one of the most flexible and customizable I've ever
seen.
And once you start like really getting into learning how to customize your key bindings
in Emacs, you're going to realize how limited other programs are by comparison because it's
just so good.
So today, I'm just going to cover some basic key bindings that you're going to want to
learn for basic everyday use.
And in future videos, I'm going to go much more in depth about the different areas of
Emacs and show you what the key bindings are to use those effectively so that basically
you can make your text editing and your general workflow a lot more efficient.
But before we start talking about all those key bindings, let's first understand how key
bindings are represented in Emacs.
So you're often going to see people write out key bindings in a very specific format
whenever they're trying to tell you what keys to press, especially in Emacs itself.
If you go look into the menu bar, you're going to see that these strings here have a very
specific syntax to tell you what keys are being pressed.
And I'm going to explain to you what those things mean right now.
So when you see a character like capital C, and hyphen and then another character after
it that basically means you need to hold control and then press the letter that follows.
So in this case, it's control C, because we have the capital C for control dash lower
case C for lower case C.
So basically hold the control key and press the letter C, and which is what I just did.
So now it basically waits for the next part of a key binding that starts with control
C. Now, you will also see key bindings where there will be a pair of things like C dash
x C dash s.
What this means is that you hold control, press X, and then you either release control
and then press it again and then press S, or you just keep holding control and you press
X and then S while holding control.
I prefer the latter option.
I'm sure that many Emacs user prefer that because it's way more efficient and easier
on the fingers to not just like the control X control S, you know, like lifting your finger
every time, it's going to really tire you out and make your fingers hurt if you do that.
So when you see a sequence of keys like this where they're, they all start with the same
letter, just keep holding that letter and what while you press the other letters in
the sequence, so hold control, press X, then S for this key binding.
Now there's a little bit of a difference in the next one where the first one has control
attached to it for control X, but then the second letter is by itself, it doesn't have
anything else with a hyphen in front of it.
What this means is hold control, press X, then release control, then press the letter
B by itself.
So there's many cases where you will see bindings that have a control character used for the
first letter and then no control characters used for the second letter.
So definitely keep that in mind.
That one, those ones can be a little bit harder to hit sometimes because you have to release
your, your pinky off the character, the control key at the right time, but you'll get used
to it.
And then you have things like MX.
So this is actually the alt X binding that we've been talking about before.
And if you look at this little table down here or this little list of things here, what
I'm basically telling you is that C stands for control and M stands for alt, but that's
because Emacs predates keyboards that have the alt key.
Emacs was written for a system that has a different set of keys all together and one
of them was called meta.
So in this case, M stands for meta, but really in modern keyboards, this is represented by
alt.
So anytime you see the capital M, think of the alt key.
Similarly, the capital S is for shift and the lowercase S is for the super key, which
is also one of those keys from those old keyboards.
And this one actually is the windows key on conventional keyboards these days, or maybe
if you have a Linux specific computer, that's the, the Linux penguin key, or maybe if you
have a Mac, that's going to be the option key, I think is what it turns out to be.
It could also be command.
I don't remember which one it shows up as on macOS keyboards, but usually on normal
external keyboards, it would be the windows key.
Okay.
So, so basically the meta X is the one we were talking about before.
However, you can have very funky key bindings that have a combination of modifier keys that
are being used in the sequence.
So in this case, we have alt G and then control S.
And those are actually pressed in sequence.
So you would hold alt, press G, release alt, then hold control, press S.
You don't see these quite as often because they're a little bit harder to press, but
usually they're provided in places where you, this is an action you wouldn't do frequently.
And it's just there in case you want a key binding to do that action, if you have to,
for some reason, if you don't want to have to let go look for the command in the command list.
So just keep in mind that if you see a binding that has this kind of differing modifiers,
that is an actual key binding is just you have to do the modifiers separately.
OK, so you can also combine things like you can have control alt and then a letter
press at the same time.
So here we have an example of CMS, which would be control and alt held down and press S
at the same time, you can do like alt shift D, etc.
So these modifier keys can be combined in a lot of different ways to have more key
bindings that get created.
But most often you'll see these sequences instead where you have like a control X control
S or something like that, because in EMAX, there's sort of a meme about how EMAX basically
you have all these crazy key bindings where you hold control and hit like five letters.
It is kind of like that, but that's just because once you start getting into the usage flow
of EMAX, you realize that it actually is a lot more efficient using key bindings like
this than it is to like go clicking around in menus.
All right, so the last important thing to mention about key bindings in EMAX is that
there are two prefixes that are very commonly seen that you should understand.
Now a prefix is basically any key sequence that has a another key press after it.
So when we saw this control X control S, control X in this case is actually a prefix.
So if I press control X right now, EMAX will be waiting for the next key in the sequence
because it knows that all other key bindings with control that start with control X, they
have some other thing that needs to come after it.
So this is now considered to be a prefix.
And now basically it's waiting for me to press the next key in the sequence.
So if I press control S, then it tells me no changes need to be saved because that's
actually the key binding for saving a file.
So it waits as long as it needs to for you to actually press the next key.
So don't worry if you have these sort of key sequences, you don't have to press them really
fast. You can press them at your own speed until you get more comfortable using them.
So back to the point.
Control X is the prefix for all of EMAX primary key bindings for like opening files,
saving files, changing the window configurations in EMAX, creating windows,
creating frames, all that kind of stuff.
If you press control X, there's a lot of bindings that show up under that.
You can actually see all these here using the which key package which I have installed.
This is not actually something that comes by default in EMAX.
If you were to go into this this EMAX here, the demo EMAX press control S X,
you can see down in the echo area, it's basically just waiting for you to press
something else and it doesn't tell you what the possibilities are.
So there are definitely packages that make this a lot easier.
Check out the EMAX from scratch series.
I think the first one or two videos I show how to set that up if you're interested.
Also, control C is another very common key prefix where if you press control C,
you will get the key bindings for the current major mode that's active and maybe some other
minor modes that are active and usually there's those are supposed to have control keys bound
to the things that come next in the sequence so that you don't pollute the the the key map.
But usually this control C is also meant for user key bindings.
So usually you would be able to go in your configuration and set up key bindings under
the control C prefix for things that you want to do for your own workflow.
So just keep in mind that this prefix control C is shared between modes and the user configuration.
So you may have some overlap there sometimes you'll have to watch out for.
Okay, so very important thing how to open and save files.
To open a file in EMAX, you can press control X and then control F for the find file command.
So if I use control X, you can see down here in the echo area is waiting for the next character.
So then I'll press control F. And now the mini buffer is asking me for what file to load.
So I can type in init.el. This actually will do completion if you press tab.
So if I press tab just the directory path, just press it twice and it will give you all the
files that are available under that path. You can even complete the directory names as well.
Press tab there, it will complete that file. If I type in I in, which I know there's a file
that starts with that in this folder, press tab, it will complete to init.el. Then you press enter
and it will load the file. So that's how you open a file in EMAX to be edited control X control F
to run the find file command. Now, if you want to make some changes to a file and then save it,
you need to know how to save the file. And the binding for that is control X control S.
So in this buffer, I can go and change something. So let's just say I add a little comment here.
Hello, I can use control X and then control S. And then you can see here in the echo area,
it says it wrote that file out of that path. And like I mentioned before, you can go to the
messages buffer if you want to control X control B messages. And then you can see that it wrote out
saving file the file path and then it says that it completed saving that file. So anytime you
save a file, it's actually going to write that out to the messages log so that you can see that there
whenever it happened. And also, another thing you might want to do in certain editors is use a
save as command to save the current file to another the current buffer to another location.
Maybe it's one file that you're editing, but you want to duplicate it to another file,
you can use control X control w for the right file command, which will allow you to save it to
another buffer. So I'm here in this init.el file right now. If I use control X control w, it will
ask me what file I want to write this to. I can say dim one not demo. Let's see test that yell,
press enter. Now it has saved this file buffer to the file test.el. And now you can see that the
buffer name has also changed along with that because now it's going to treat this as that new
file going forward as you're editing it. However, the old file still does exist. And you can get
back to it if you want to. So those are the very basic file operations that you would want to know
about one. Yeah, I'll cover that in a minute. Alright, so
now let's talk about switching buffers. So as I mentioned before, you can have a bunch of buffers
open in Emacs at the same time, but you might not actually know which ones are there. So to switch
buffers, you can use the control X B binding. Now keep in mind that this is the control X and then
the single letter B binding and not like the holding control for each one of them before. So
I'm going to use control X and I'm going to release control and I'm going to press B.
And then I press the wrong key at that moment, control X B. Now it gives me a prompt in the
mini buffer in the echo area saying switch the buffer. So you can press tab to get a list of
all the buffers that are available. And if you click on any of these, it will automatically switch to
the the buff, the buffer that you clicked on. But you can also press D or T basically press T and
then hit tab to complete anything that has T E in it and then press T S press enter. And then we
are now into the test that yell buffer. So that's one way to quickly search to a switch to a buffer
if you know the name of the buffer. But sometimes maybe you don't remember what the name of the
buffer is, or you don't really remember which buffers you have open. So there is a way to list
those buffers if you use control X control B. So instead of using the single letter B by itself,
actually use control this time control X control B. And that will give you this buffer list view
where you can see all the buffers that are open you can see which file they correspond to you
can see what the major mode is you can see the size etc. Then you can also click on a file to
open it. You can also use your mouse sorry your keyboard and press enter on a file to open that
as well. So that's just another way to see all those buffers. And keep in mind you can still
click buffers in the menu up here and seal those buffers here as well to switch between them.
Those two key bindings that I mentioned to you just now are both represented here as well control X
B and control X control B. So you can see those easily. Also one couple things I did not mention
in the notes here but there's a previous buffer and next buffer if you want to just quickly switch
between them control X left arrow control X right arrow. So if I use control X right arrow,
I can sort of cycle through the buffers that are available. So control X left control X left.
So basically you just get through all them really easy. So basically if you want to go back and
forth between one buffer and another control X right arrow control X left arrow basically.
So you're just sort of cycling through that that chain of buffers basically.
I should add that to the the notes here. Let me actually make a note for myself
to do next pre buffer. Okay, let's see if I remember to do that. If you see this in the show
notes afterward you'll you'll realize I failed myself. Okay, cutting and copying text. Very common
thing you might want to do inside of your editor. However, this is an area that always confuses
new Emacs users because the concepts here are different than what you expect. So many programs
across Linux, Windows and Mac OS. Well, let's just say Linux and Windows because that's the ones
that do this the most. Use control C to copy text and control X to copy the current text and then
delete it, which is a cut operation. This is not the case in Emacs. So as we mentioned before,
control C and control X actually have special meaning in Emacs. So they can't be used for
cut and copy. So they have a different strategy for doing this. And I think this is actually because
cut and copy and paste in Emacs predates the common cut and paste metaphors in UI. So
Emacs has his own idea for it because it came before all those things happen.
So in Emacs, to kill text means that you're going to cut it basically. I don't know why they use
the word kill for that, but that's what it's called. So that's what we're going to use. So it
basically copies the text and then deletes it. The most thing common thing you're going to do is to
kill a region, which is basically a selection of text you've made, either just to delete it or to
cut it to be paced somewhere else. So to kill a region, first you need to select some text to
make a region to be killed. And you can begin, you can make one by marking the region using
control space. So in this buffer, I'm going to hit control space, and then I'm going to start
moving my arrow keys around. And you can see how the text is being highlighted now. So that basically
creates a selection or a region in Emacs terminology. I think you can also hold shift.
Okay, that actually doesn't work in this mode. But just just keep in mind, you can use control
space and then use the arrow keys to start selecting a region. There are other commands
for marking text based on words or sentences, etc. We'll go into that in a different video.
For now, just know that control space will start the selection wherever you want it to be.
Let's see, did I actually put the binding in here for? Yeah, I didn't. Okay, so control w is what
you would use once you make the the selection to actually cut the text. So I'm going to use control
space. And then I'm going to start making a selection here, then I'm going to press control w.
And that will delete that text, but I actually copied it at the same time. So it could be
inserted somewhere else. So now we have some text that has been copied to something called the kill
ring, which is basically a list of things that have been copied before. And we can now paste it,
which I'll show you in the next section. The last thing I want to mention to you is that this kill
ring actually has some interesting functionality. And we're going to talk about it in a future
episode whenever I have some time to do that. So to paste that text that we copied, you can use
control y to yank. I don't know why yank is the terminology that's being used for paste in Emax,
but that's what it is. So if you ever see something talking about yanking text in Emax,
that's basically pasting text. So in this buffer, I'm going to move my cursor down,
I'm going to press control y for yank, and that's going to paste back in that text that I had
previously cut from this buffer. So just just goes to show you that there is cut and paste or cut,
yeah, cut and paste, but it just has different terminology in Emax, which is a little bit confusing.
And different keybindings. So once again, control space to select text, control w to cut it,
control y to paste it. Alright, so if you are so tied to the old
cut copy paste keybindings that are used all the time in Emax, or sorry, in Windows and Linux,
you can actually turn those on using something called CUA mode. I don't remember what CUA
actually stands for, but basically what it does is it makes it so that when you select text,
it actually makes control c control x. Actually, you do cut and copy, and it makes control v do
paste the way that you expect. So the way that you can turn that on very easily is to go to the
options menu in Emax, and then click this use CUA keys. And once I do that, I can go and select
some text using control space, and then use control c to copy, and then go somewhere else,
and then press control v to paste. So it does what you expected to do. It acts exactly like
you expect from a more sort of conventional desktop editor. So you could also, I think,
use shift and the arrow keys. Well, it was working for me earlier. I don't know what caused it to
work, but it seemed like there was a shift arrow keys functionality that would do shift selection,
but it may be because I'm in an org mode buffer, and it doesn't work that way. But just know that
if you want that functionality, you can easily turn it on using the CUA keys. Now you can also use
the CUA mode command in the command list. If you press enter, you see me typing down here in the
echo area. Press enter here, it turns on CUA mode in the way that you expect. So that's another way
to turn on the same functionality. Okay, undo and redo another very important thing for editing text
in a text editor. It's also another thing that's different than what you might be used to. So the
undo key binding by default is control underscore, but you can also use control whichever slash this
is. I can never remember whether it's forward or backslash, but just use that slash character that
is on the same key as the question mark on the US keyboard. And you can undo a change that you made.
So let's let's try to write some texts here. So I'm going to say hello. And then another test.
So now what I'm going to do is press control underscore. And it's going to undo that edit,
press control underscore again, it's going to undo that edit, press control underscore again,
it's going to undo that edit that can keep undoing until I go back to the state of the file
whenever it was saved last. So you probably want to know how to do a redo. Well, this is a little
bit weird, because what you actually have to do is press control G first, which will then reset the
undo state and change the undo direction. So now if I was to press control underscore, it's going
to redo the things that I just undid, as you can see, and then as soon as I get back to the place
where I was at the the the, the, if I've reversed the undo history all the way back to where it was
and start pressing on control underscore again, it starts going undo again. So it goes back in
the other direction again. So it's a very different model of undo, and it's kind of confusing to
people. There are ways to install different undo methods in an E max that you can use. We'll go
into that in a different episode, but just try to learn this one for now and see how it goes for
you before you go try to find another one. So let's see. Okay, so another thing that is actually
kind of useful that you might need to know that is not very obvious at first is how to cancel an
operation. So sometimes you're going to run a command that you're going to want to cancel it
before it completes either it's going to do some long running operation in the background or it's
going to have a prompt that comes up that you no longer want, you're going to want to get rid of
that somehow. For this, you can press control G. This is basically the quit command in the keyboard
quit command in E max. And it interrupts any active command and brings you back to a normal
state in E max. So let's say I use control X control F to use find file, you can see we have
the prompt down here in the echo area. I press control G, it cancels a prompt and I go back to
editing in the normal way. Also, if you run anything that seems to be taking a long time or
maybe it hangs E max, if you see E max freeze, and you can't actually click on anything or
press any keys, just try to keep pressing control G because sometimes that will actually
kick out whatever hang is happening in E max and make it so that you can continue your work.
So don't don't don't freak out if E max ever hangs just keep spamming control G just hit
control G until something happens. And then if you hit control control G like 10 times and
nothing happens, then you could probably kill E max but control G control G can get you out of a jam
in a lot of cases. So just one last thing, learning more key bindings in the editor,
there's a lot of ways to do that. As we talked about before, looking at the menu bar and seeing
what keys are represented there is a great way to figure out what kinds of key bindings are
available as well as what kind of operations are available. There's also the command describe
bindings. So if you go into the demo here, use alt x to get the command list type in describe dash
bindings, press enter, it's going to give you a listing of all of the active bindings currently
in E max for this buffer basically. So globally and in the buffer. And there is a lot of key
bindings here. And there's a lot of commands that are bound. So a lot of these that are like
single control plus letter keys are actually movement keys or editing keys inside of the
buffer. So these are very useful to look at to see like what things you could do. So like for
instance, control in, if I put my cursor here and use control in, it takes me to the next line.
If you look here, there's control P for previous line. So you can use control P for previous line.
So that's actually a way to navigate through the file without having to move your hand to the arrow
keys. So once you start looking at this list, you might learn a lot of things that might save you a
lot of time whenever you're editing in E max. So this is a great way to learn a lot of things that
you don't know about already in E max. There's also describe key. So for instance, if you
if you've heard about a particular key binding, or maybe like there's you press something by accident,
you don't know what it did, you can use describe key, the describe key command. And what it will
do is prompt you for a key to to look up, you can put give it whatever key binding you want.
And then it will tell you what command is bound to that key. So let me just do that right now,
I'm going to use alt X, type in describe dash key, press enter. Now I'm going to type in control x
control f. And then it gives me this documentation page, it says that this key is bound to find
file and we give you all the documentation about the find file command. So in E max, there's all
this help information that's built in. And this is one thing you can do you can you can find out
what command a key is bound to is very helpful. So keep that in mind in case you want to know what
a particular key does. And since we've already mentioned it, let's just mention it a little
bit more the help system in E max is fantastic. The entire E max manual is built into E max,
you can read it inside of E max to navigate around it, you can find out all kinds of information
about E max there. And then there's more functions that start with the word describe like we saw
about before, that will tell you about all the functions and variables in E max packages,
everything else you could possibly want to know about something that's defined in E max,
there's all these describe functions that will help you with that. If you go to the help menu,
all these functions are here. So all the describe functions you might want to know about are listed
here. There's also the read the E max manual items, if you click that, it gives you the
entire E max manual here, you can click all the different links for the different topics.
There's also a frequently asked questions. And there's a tutorial you might want to check out
that can help you learn how to edit things in E max or like the basic key bindings. So there's a lot
of great stuff in this menu that you should check out to learn more about E max built in,
you don't have to go to the internet to find this stuff, it's just right here with you anywhere you
go without internet. Okay, so the last topic for today is how do you configure E max? Well,
we're not going to go very in depth here because I go really in depth in other videos about this,
but I'm going to tell you that the main two ways that you would configure E max so that you know
about them. First of all, there is the customization UI. And this is a full user interface for
customizing any option in E max. And the interesting thing here is that it not only shows you the
options that are built in the E max, it shows you the options for any external package you install
to say any any community package you install, all the options are going to show up here in the same
user interface. So to get to that, use alt x and type in customize, press enter. And now you get
this interface, which basically tells you about all the different types of settings that are available
in E max, you can click on those to jump into them, and learn more about all the settings, they
all have descriptions. So like the cool mode settings are here in this cool mode group.
But you can also search for a setting. So say for instance, you want to know how to set your
tab width for indentation, you type in tab width, and press enter here in this box. And then you
can see there's a tab with setting. And here you can edit this value instead of two or something,
then click apply for it to be applied for the current session. I believe there's a way to
save it for all sessions here as well. But I don't see it at the moment, we're going to go more
in detail about how to use this UI in the future. Now personally, I don't use this UI because I
prefer to use the other option for E max, which is the init.el file. This file could have other
names, but most commonly people know it as the init.el file. And basically what this is, is actual
E max list code that is used to configure your editors. That means you're setting all the configuration
variables using code, and you're loading packages using code. And you're also you could define your
own functions that connect to these packages using code in this file. In my opinion, this is the best
way to configure E max because you can then check in your configuration to source control and share
it between machines or at least, you know, have it saved somewhere so that you don't lose it.
So I have an entire video series called E maximum scratch that will tell you how to do this. If
you want to learn more about how to configure E max and get a modern looking setup like I have on
the screen right now, using the community packages and the stuff that's built into E max by editing
your init.el file. And just to show you an example of that, we actually did open and init.el file
before. So let's just see if we can go back to that. Oh, I think I renamed it to test.el. But
it's still the same file. Basically, it's just a file containing a bunch of code that is doing the
configuration for E max. Now, I know that people say, Oh, it's Lisp. It's kind of weird. It has
all these parentheses. Well, when you start getting used to writing E max list for the
purpose of configuration, you realize it's not that complicated. So don't let that be something
that stops you from trying to learn how to do this, because you're going to get a lot of joy
from learning how to configure E max properly and setting a setting it up exactly the way that you
like it. So you're going to have a file that's going to have a lot of lines of configuration,
and it's all going to be yours. So that's one of the best things about E max in my opinion.
Okay, so what's next? Well, I think this video should give you very much of what you need to
know to get started using E max and to be productive with it on a daily basis. However, we weren't
able to cover many things in depth, because we were just trying to scratch the surface and get
you get you started. So I'm going to start making more videos in a new series called E max essentials,
which will cover many of these topics at a deeper level. So you can go from being a beginner to E
max to an advanced user by the end of all the videos that we cover these topics. And I've already,
like I mentioned, been making a ton of other videos about E max on this channel. So you
should definitely check out the other playlist if you want to learn a lot more while I'm building
out the E max essential series. So as I mentioned before, excuse me, the E max from scratch series
is all about configuring E max from the ground up using the init.el file. There's also the E max
tips series, which are like independent videos about various packages you might want to try out,
things you might want to do. There's E max desktop environment, which is a very fun series where we
turn E max into a complete desktop environment. So you can do your window management, and basically
live in E max full time, which is basically what I do now. If you're used to using IDEs,
integrated development environments for various programming languages, check out the E max IDE
series. There's not many various videos there at the moment. But the idea is that I'm going to
continue making more videos showing specific configurations for different languages so that
you can use E max as an IDE for those languages. There's a lot of great packages that make this
possible. So you should definitely check that out. There's also the E max mail package, where I talk
about how to basically do your email in E max. So that may sound kind of weird, but it's possible.
So definitely check that out too. But then if you want to learn more about the language for
configuring and extending E max called E max list, I'm currently working on a series called
learning E max list that will teach you about that language and how to use it.
And lastly, if you want to know a little bit more about what E max is capable of,
capable of, check out the video I did at the beginning of this year called five reasons to
learn E max in 2021, where I give a little bit of a demo of some of the other cool things that
you can do with E max. It might be interesting for you to see that. So definitely check out the
show notes for this episode. I know we covered a lot of things, but I'm going to have all the
stuff here in the show, excuse me, in the show notes for you to check out. And definitely subscribe
to the channel and click the bell to be notified whenever we post new videos. And when I go live
every Friday, so we do a live stream every Friday, where the community of system crappers gets together
and talks about E max, basically other interesting topics that have come up that week. So it's a
very fun environment. So you should definitely go come check that out. Also, I'm sorry, I'm losing
my voice from the long video here. Check out the link to the discord below. If you want to get some
help getting started with E max, join the discord, we're all there hanging out. There's about 700
people there now. And we're all you know, enthusiasts of E max, we all love using E max. So
definitely come check that out and and join us there is a lot of fun. Okay, before my voice
goes completely, let me just say thank you to my sponsors. So these amazing people have decided to
sponsor the work that I'm doing making these videos about E max, new gigs and everything else
that we talked about on this channel. I'm very thankful to them for doing this because it gives
me a lot of motivation to keep going. And it just makes me feel like people actually appreciate what
I'm doing. So I'm very thankful to all of them. So if you are interested in becoming a sponsor of
this channel, definitely check out the two links that I have below one for GitHub sponsors and
one for Patreon, you can do whichever one you choose. Also, I have a link to PayPal if you want
to do one time donations. Anything you choose to do is fine. Otherwise, this content is free and
definitely come and check it out be a part of the community. And it costs you nothing. So anyway,
thanks a lot for watching. I hope this video was helpful for you to get started with E max.
Definitely let me know in the comments if you have any further questions of things that I could
cover in future videos. And until next time, thanks a lot for watching. Happy hacking.
