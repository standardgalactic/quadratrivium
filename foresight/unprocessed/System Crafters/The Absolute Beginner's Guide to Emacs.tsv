start	end	text
0	20080	What's up everybody, welcome to System Crafters, I'm David Wilson and this is the Absolute
20080	22720	Beginners Guide to Emacs.
22720	28120	So if you've never been to this channel before, I'd like to first of all say welcome.
28120	32120	This channel is basically about crafting your system configuration using free and open
32120	37960	source tools like GNU Emacs, GNU Geeks and more, like basically any of the nice sort
37960	43640	of off the beaten path tools that you might find in the GNU Linux world.
43640	47480	So I've made about 50 videos on Emacs for this channel, but the one thing that I haven't
47480	53080	done yet is create a video that's explicitly for those who have never used Emacs before
53080	55560	or those who've only used it very little.
55560	59840	So in this video, I'm going to give you exactly what you need to get starting using Emacs
59840	64120	and to understand the basic concepts and key bindings of the editor.
64120	67040	I know this video might actually seem pretty long, I'm not sure how long it's going to
67040	70480	be yet, let's just see how it goes when we record it here, but I'm going to put chapter
70480	74680	markers in the timeline below so that you can skip ahead to various topics that you're
74680	80160	interested in learning about and also you can return to it as a reference.
80160	82800	And also the notes that we're looking at on the screen right now, this is actually an
82800	86680	org mode file, and I'm going to commit this to a GitHub repository so then you can go
86680	91120	look at it and see exactly what I'm reading to you right now whenever you go and want
91120	92520	to study this yourself.
92520	94600	So let's get started.
94600	98040	So first of all, we can talk about installing Emacs because that's the first thing you'll
98040	100280	have to do before you can actually use it.
100280	104960	So Emacs can be installed on GNU Linux, Mac OS and Windows.
104960	110360	The latest stable version of Emacs is 27.1, so it's best to try to find that version
110360	113200	for your operating system.
113200	118360	The things we covered today obviously will be related to 27.1, but they also should work
118360	122600	in the more recent stable versions like 25 and 26.
122600	125960	Those have existed for a few years now, so you should be able to find those on your Linux
125960	129080	distribution if you happen to have an older version.
129080	133520	But if you can, definitely try to get Emacs 27.1 because it is the most recent release
133520	137440	and it has lots of improvements upon those previous releases.
137840	143600	Alright, so for GNU Linux, definitely GNU Linux is the easiest OS for installing and
143600	145880	using Emacs by far.
145880	149880	It's available in pretty much every Linux distribution's package manager, so however
149880	153720	you normally install packages in GNU Linux, you can use that to install Emacs.
153720	157520	Typically the name of the package is Emacs or something containing Emacs, so it's pretty
157520	159400	easy to find.
159400	162640	Just keep in mind, like I said before, that your distribution may actually have an older
162640	164120	version of Emacs.
164120	169720	Like I think in Ubuntu 20.04, they have Emacs 26, so just keep in mind that there may be
169720	173560	an older version, but it's not really a big deal if you don't have a newer version.
173560	179800	There are ways to find newer versions as well, so just search for your distribution and look
179800	184280	to see if there's a way to install that if you really care about having the latest version.
184280	190760	One other question to be asked, I guess, about using Emacs on GNU Linux, and also on macOS
190760	194720	as well, possibly Windows, I'm not sure if it works on Windows, is whether you want to
194720	199880	use it in the graphical user interface mode or in the terminal mode.
199880	201640	You have options for both.
201640	207080	Obviously, right now I'm using Emacs in graphical mode because I have different font sizes and
207080	211800	different font colors and all this stuff going on, however you can also use it in the terminal,
211800	216040	which can be very useful for various reasons, especially if you want to SSH into another
216040	218800	computer and use Emacs remotely, etc., those kinds of things.
218840	224440	If you're very partial to using things in the terminal, it is absolutely possible to
224440	228920	use Emacs in the terminal and pretty much all the same functionality is available except
228920	236440	for having different font families for different text and also different font sizes, so those
236440	239400	are the only limitations you technically should have by doing that.
239400	242760	But for the purpose of these demonstrations, we're just going to show the graphical version
242760	246120	of Emacs since that's probably the one most people will use.
246120	250680	So on macOS, you can install Emacs pretty easily using Homebrew, a lot of people use
250680	253640	Homebrew for installing packages on macOS.
253640	257400	So there's a default recipe called Emacs, which can be installed using this command
257400	259080	that we have here on the screen.
259080	263520	There's also an alternative recipe called Emacs Plus, which I've heard about recently,
263520	268880	which has some extra options that enable certain behavior that might be interesting to you.
268880	272440	So if you want to have some more control over the Emacs build that you get installed on
272440	275640	your machine, definitely check out the Emacs Plus package.
275640	280880	You can also download a .app file for Emacs from the site Emacs4MacOS.com.
280880	284280	If you just want to download something and just copy it over to your computer easily,
284280	286280	that's also a possibility.
286280	289360	For Windows, you can download Emacs directly from the GNU website.
289360	292480	This link that I have here just takes you directly to the installer download, so you
292480	295280	can click that if you look at the show notes.
295280	299840	Also if you use MSIS 2, which I would guess is probably not so many of you, you can use
299840	304600	Pacman and MSIS 2 to install Emacs and then you can run that as a program in Windows.
304600	309240	And also if you use Choclity, which is probably more likely, you can use Choco install Emacs
309240	313360	to install the latest version of Emacs on Windows, so that's pretty useful.
313360	317560	Okay, so now that we've got Emacs installed, I assume you've stopped the video and gone
317560	322240	and installed Emacs by now, let's talk about the basic concepts of Emacs so that you kind
322240	326680	of understand what you're looking at whenever you start the editor and also how to sort
326680	329440	of find your way around.
329440	335280	So the user interface, so Emacs has a toolbar and a menu bar like many conventional graphical
335280	339520	programs and they can be very useful at first to learn what functionality is available in
339520	340520	Emacs.
340520	342840	However, I don't think you're going to need them for very long.
342840	347680	Once you actually get comfortable using Emacs and know how to find things yourself, you
347680	350640	won't really need to use the menu bar very much.
350640	354400	However, let's actually take a look at it and see what that looks like.
354400	359560	So I'm going to jump over to another screen here where I have a very plain configuration
359560	363200	of Emacs to use for demonstration purposes.
363200	365880	Now this is not the basic in the box configuration.
365880	369640	You can see that I have a dark theme turned on mainly because I don't want to blind you
369640	374320	whenever I'm changing back and forth between the demo Emacs and my personal Emacs.
374320	378440	So the only thing as things that I've done to the basic in the box configuration here
378440	382720	is that I have set the font size to be a little bit bigger and I've changed the theme to be
382720	384280	a dark thing.
384280	388280	So everything else is just stock Emacs, what we're looking at right now.
388280	392160	And as you can see, as I mentioned before, there is a menu bar up here at the top of
392160	396200	the window and there's also a toolbar that has some buttons.
396200	400160	These icons look a little bit small because I'm using kind of a high DPI screen, but on
400160	405200	a normal DPI screen, these things will be pretty much normal size like you would expect.
405200	410040	So the menus are typical to what you would see in other programs.
410040	412520	We have a file menu for dealing with files.
412520	417960	You can see that there's actions for opening files, opening directories, saving files,
417960	420200	save as, close the file.
420200	424040	And then also there's some window control commands here, which we'll talk about a little
424040	426680	bit later, quit, etc.
426680	431480	The interesting thing to note here is that each or many of the menu entries have the
431480	437000	actual key binding that is associated with the action that this menu item performs.
437000	441140	So this can be a very good way at first to get acquainted with the common key bindings
441140	446380	that you will want to use in Emacs because Emacs is best used as a keyboard driven interface.
446380	449840	You don't really want to use a mouse so much in Emacs.
449840	453640	So learning the key bindings by looking at these different menus can be a really helpful
453640	456680	way to get started fast learning those bindings.
456680	462080	So the other thing to mention is that there are some of these menus that are here all
462080	466800	the time and then there's some that get displayed whenever you're looking at a certain type
466800	467800	of buffer.
467800	469800	So in this case, we're looking at a Lisp buffer.
469800	472960	So we get this Lisp interaction mode information.
472960	477720	But if I were to open up another file, like let's say an org file, org mode file, you'll
477720	482280	see that now we have this table menu, we have the org menu, we have the text menu.
482280	489000	And those give you the mode specific actions that you might want to use for that mode.
489000	490960	We'll talk about modes in a minute.
490960	495080	And as usual, whenever you go to see all the actions here, you can see the key bindings
495080	497520	that you might want to learn for those actions.
497520	502240	So like I said, for any type of file that you're editing that has its own functionality,
502240	506240	it's definitely good to take a look at the menu items for that to see what the possible
506240	510640	actions are, how they're organized, and also the key bindings that you might be able to
510640	512640	use with those.
512640	517560	So the toolbar itself, I find it to be not super helpful just because it has, you know,
517560	521000	common stuff you might want to do, I think the toolbar does change contextually based
521000	525160	on things that you're doing, but I literally have never used it, I always turn it off.
525160	529280	And that's the nice thing to know about both the menu bar and the toolbar, they can be
529280	531240	disabled pretty easily.
531240	535720	If you look at the series of videos I do called Emacs from scratch, I go through in the basically
535720	539360	the first video how to turn this stuff off so that you have a more minimalistic view
539360	542240	into Emacs, sort of like what you see right now in my configuration.
542240	548480	So once you're ready to dispense with all of the extraneous UI elements, you can easily
548480	551720	do that.
551720	556360	So another interesting thing to note is that in the terminal version of Emacs, the menu
556360	558280	bar actually is still there.
558280	560720	And let's let's see if I can do this without breaking anything.
560720	564200	So I'm going to try to run Emacs inside of a terminal right now.
564200	567520	So Emacs dash Q dash NW.
567520	571920	So we're running terminal mode Emacs inside of graphical Emacs sounds a little bit crazy,
571920	573720	but that's what's happening right now.
573720	575560	And then you see there is a menu bar up here.
575560	576800	And I think the key is F10.
577160	582760	So if I press F10, it actually shows the menu for the terminal mode of Emacs.
582760	585200	I don't know all the key bindings to navigate through these.
585200	588840	I think there's like control N, control P, things like that to move back and forth.
588840	593000	But you do have all that same information still available to you the same way as you
593000	594480	have in the graphical interface.
594480	598760	So if you want to use terminal mode Emacs, then you still may have the ability to learn
598760	604160	some things from the menu, which is pretty pretty cool, I think.
604160	605640	So one last thing.
605640	611000	I'm kind of doing this video coming from the perspective of someone who might be using
611000	613400	some other editors or IDEs.
613400	616880	So I'm going to try to relate things to what you might be expecting from those IDEs.
616880	620920	And one thing that you probably have seen a lot that you don't see right now on my screen
620920	627640	or in this other demo Emacs is there's no file tree on the left hand side of the window.
627640	629880	And it's just something that Emacs doesn't have by default.
629880	634120	Emacs predates that sort of UI paradigm of having a file tree on the left side.
634120	639080	So it's something that you don't see, however, you can easily add that using community packages.
639080	643520	And there's other ways to do file management and file browsing in Emacs that, in my opinion,
643520	646080	are better than having that file tree always visible.
646080	648920	So we'll talk about those in other videos.
648920	653760	But just know that even though you don't see it right now, it's very easy to add that
653760	658400	if it's something that you're used to having and you want to have.
658400	661200	All right.
661200	666320	So also in all these sections, usually I'm adding links to the Emacs manual in case
666320	668680	you want to get some extra context about the things that I'm talking about.
668680	671800	So definitely check out the links to the Emacs manual whenever you see those in case you
671800	673640	do need some more information.
673640	674640	Okay.
674640	680160	So a very important concept in Emacs that's different than what you might know from typical
680160	685080	graphical interface paradigms or desktop environments is windows and frames.
685080	689200	So the concept of a window is different in Emacs than what you know.
689200	694660	In modern desktop environments, usually a window is a window for a program that is managed
694660	697280	by the desktop environment and not by the program itself.
697280	701560	So usually it's a window that has like an X button, a minimize button, et cetera.
701560	704920	And usually when you run a program, it launches a window that you see.
704920	709440	However, in Emacs, a window is not a desktop window.
709440	714360	It's actually a pane inside of the current Emacs window that you're looking at right
714360	715360	now.
715360	717000	So let me actually just demonstrate that for you.
717000	721160	I'm going to do a horizontal split or vertical split.
721160	722160	Let's see.
722160	723160	It's a vertical split, I think.
723160	725800	So basically I'm splitting that one window you're looking at into two.
725800	728680	So now I have two windows visible side by side.
728680	734200	I can also do a horizontal split and have another split top and bottom here on this side.
734200	738960	So these are windows in the concept of Emacs.
738960	742520	And the interesting thing about windows is that as you can see here, they all are showing
742520	746120	the same buffer right now that obviously they can show different buffers, but we're all
746120	748080	looking at the same buffer.
748080	752200	All of the windows had their own location scrolling inside that buffer.
752200	757240	So it's a way that you can see the same file side by side, maybe looking at different parts
757240	761040	of it or looking at two different files and comparing them, whatever you want to do.
761040	767600	So it's a very useful way to maximize the use of your screen real estate inside of Emacs.
767600	768960	And that is windows.
768960	773560	Now what you think of as a window is called a frame in Emacs.
773560	777320	So this whole screen that you see right now, this is one Emacs frame.
777320	779600	And it's possible to create multiple frames in Emacs.
779600	785320	So if we go to our demo Emacs here, what I'm going to do is split this so that you can
785320	789600	actually see, and this is my personal configuration that is loaded up right now, so that you can
789600	791160	see whenever I create the second frame.
791160	795680	So I'm going to use the file menu here and click New Frame.
795680	800040	It's going to create a new frame, then I'll go and open the old frame on this side.
800040	805160	So now we have basically two, what you might consider windows on the desktop environment,
805160	807240	but these are actually two frames for Emacs.
807240	811520	They all have their own file menus and toolbars, etc.
811520	813240	That's how you can tell they're independent.
813240	817040	However, they're not really independent in the sense that they share information from
817040	818680	the same Emacs process.
818680	821680	So as you see here, the same file is open in both.
821680	827120	If I were to go looking for the scratch buffer or even this demo file that I've got set up
827120	829320	for the configuration for this.
829320	833960	These buffers are available in both of these frames, so whenever you try to switch to one
833960	838520	of those, you're going to see it in both of the frames, which it might be a little bit
838520	842980	different to you if you're used to having an editor or IDE that sort of is focused on
842980	846320	loading one project per desktop window.
846320	849720	In Emacs, you're going to have the same stuff in both windows.
849720	852480	So that might take a little bit of getting used to, and you might think that, oh, well,
852480	855920	I've got all these files open, how am I going to deal with keeping them separate?
855920	860320	There are ways to deal with that, which we can talk about in another video, but it is
860320	862320	kind of helpful in some ways.
862320	866560	So for instance, if you want to have one frame open on one screen, if you have multiple monitors,
866560	870280	you can have a frame open on another screen, and then you can share buffers between them.
870280	872320	You can show the same buffer, different buffers.
872320	877000	You have a lot more options in your workflow, so you're not really so limited by which frame
877000	879880	open which file or which buffer, etc.
879880	884600	So this is just one thing to know whenever you start to use Emacs is that you do have
884600	888480	this possibility to use multiple frames.
888480	894040	So in my case, I don't really use multiple frames in the traditional sense.
894040	898280	I'm actually using multiple frames here because Emacs is my desktop environment, but that's
898280	899800	like way out of scope for this discussion.
899800	903880	So let's just focus on the fact that in most cases, you'll probably use only a single frame
903880	908720	unless you'd like to have multiple frames as part of your workflow.
908840	914000	And as usual, we have some links here to more manual information.
914000	920800	Okay, so buffers are also a very important concept to understand in Emacs.
920800	923000	What we're looking at right now actually is a buffer.
923000	928040	A buffer is basically just an object in Emacs that holds text and other information to be
928040	930440	displayed by a window.
930440	934200	Also buffers can be used for things that aren't being displayed, that can be used for communicating
934200	938120	with external processes or storing other information, writing out logs, etc.
938120	943160	So it may not actually be something that gets displayed in a window, but in most cases,
943160	947880	a buffer is going to be displayed in a window so that you can see it and interact with it.
947880	952000	The most obvious example of a buffer is one that contains the contents of a file that
952000	955920	you've opened so that you can edit it and then save it back to that file.
955920	960680	But there are many other types of special buffers in Emacs that are used only for displaying
960680	965000	temporary information or for even creating a full user interface.
965000	970680	So for instance, the MAGIT package is a really excellent Git interface, the Git source control
970680	978640	system interface for Emacs, and it does a custom buffer interface so that you can manage
978640	980400	your code repository.
980400	982160	Let me actually just show you an example of that.
982160	989040	I'm going to open up the repository for my .files, and now this is a buffer that has some information
989040	994300	about the Git repository for my .files, but if I go and move my cursor around and start
994300	997980	pressing Tab on these sections, it actually expands them, and you can see the diff of
997980	1001820	some of the files that I've been changing in my .files folder, and you can also press
1001820	1007500	other buttons like let's say LL to open up the history of changes in my repository.
1007500	1012780	So basically, in Emacs, a buffer is not just something for editing files, it could be for
1012780	1017580	creating a fully custom user interface to do some kind of task that you need to do.
1017580	1021740	And many of the community packages that you'll find, or even stuff that's built into Emacs,
1021740	1025620	still have these custom buffers that you will be looking at.
1025620	1029900	And this is a normal buffer like anything else, and I can switch to that previous buffer that
1029900	1031920	I was in, which is this presentation.
1031920	1036060	So these things are all sort of on the same level playing field.
1036060	1042460	Text files and user interface buffers can be switched between like anything else, basically.
1042460	1046220	So this is actually one of the more confusing aspects of Emacs to beginners.
1046220	1050060	It was very confusing to me at first, because on the screen right now, you can't really
1050060	1052700	see which buffers are actually open in Emacs.
1052700	1056040	You have to actually list the buffers before you find them.
1056040	1060300	So it could be a little bit jarring at first, because you're like, I don't know where all
1060300	1061300	my files are.
1061300	1063580	I don't know what's open currently.
1063580	1067740	Normally in an editor or an IDE, you would probably have like file tabs at the top that
1067740	1069780	would show you which files are open.
1069780	1072260	Now you can actually get that in Emacs.
1072260	1076260	There is a command you can run called, I think this is in earlier versions, but it may only
1076260	1078740	be in Emacs 27, so just keep this in mind.
1078740	1085060	There is the global tab line mode, and then it will actually give you tabs that you can
1085060	1086060	click on.
1086060	1088140	They don't look so nice as they do in other programs.
1088140	1091260	However, this is something that is built in the Emacs that you can use if you want that
1091260	1092500	tab interface.
1092500	1096660	However, I don't necessarily recommend that unless you really want it.
1096660	1101400	It's better to get used to the buffer management commands and key bindings in Emacs.
1101400	1106260	So for instance, Ctrl XB, which we'll talk about in a little bit, will bring up a buffer
1106260	1107260	list.
1107260	1108260	Was that the right one?
1108260	1109260	Okay.
1109260	1110260	Yeah.
1110260	1113060	Ctrl XB will give you the ability to switch between buffers by completing them.
1113060	1117860	So we'll talk about that in a minute, but basically there are ways in Emacs to get to
1117860	1120940	all the buffers that are currently open very conveniently.
1120940	1125860	So don't let it sort of discourage you if you don't really understand how buffers work
1125860	1128660	at the outset whenever you start.
1128660	1132660	So let's talk about a couple of important buffers that you will definitely see whenever
1132660	1134420	you use Emacs.
1134420	1138260	These are buffers that are, at least the first two will be open every time you use Emacs,
1138260	1141220	and the last one is something that might show up when you're using it.
1141220	1143660	The first one is the Scratch buffer.
1143660	1146540	And let me just switch back to it really quickly.
1146540	1150660	So the Scratch buffer is basically, I mean, the name Scratch kind of gives you a hint,
1150660	1155860	but it's basically like a blank page of paper that you can use for writing down notes or
1155860	1159260	just anything temporary that you need to copy and paste somewhere.
1159260	1164100	I often use it for copying some text or writing down something that I don't really need to
1164100	1166740	save to a file, but I just need to kind of write it down for a moment so I can use it
1166740	1168660	some at some other point.
1168660	1170340	So it's good for little notes.
1170340	1177140	It's also already set up as a Emacs Lisp interaction mode so that you can write some simple Emacs
1177140	1178140	Lisp code.
1178140	1180460	Maybe if you're like trying out how to do something, or maybe you're trying to run a
1180460	1184660	command a certain way, you can just use this as a temporary buffer for doing that.
1184660	1188860	So it has some utility in that, in that way.
1188860	1193740	There's also the Messages buffer, which is very useful because what it does is has a
1193780	1198820	log of all the messages that have been written out for the user to see in Emacs.
1198820	1202340	So there's this line down at the bottom of the screen, which we'll talk about in a moment,
1202340	1204260	where messages get written.
1204260	1206860	And if I were to try to scroll up in this screen right now, you'll see that there's
1206860	1211340	a beginning of buffer message that gets written basically saying, I can't scroll up anymore.
1211340	1214580	But the same message is being written to this message log.
1214580	1219220	So if you ever see a string get written to the bottom of the screen, you can always go
1219220	1222940	to this Messages buffer to see the history of things that were written to the screen
1222980	1224580	in case you missed it.
1224580	1227020	Or maybe you just want to go back and check to see what happened.
1227020	1228820	So it can be very useful for that.
1228820	1232060	Definitely take a look at the Messages buffer sometime just to see what kind of information
1232060	1233900	is in there.
1233900	1238540	And lastly, there is the Warnings buffer, which is basically a buffer that shows you
1238540	1241740	like potential errors that have been encountered while running Emacs.
1241740	1243620	I don't know if I have one right now.
1243620	1244500	Yeah, I do.
1244500	1249420	So basically I have some some errors here, warnings here basically that are being written
1249420	1250980	from a package.
1250980	1255740	And you might see this buffer pop up if there is any kind of error like that, it usually
1255740	1258540	is pretty intrusive because they want you to see what's happening.
1258540	1262340	So if it does pop up, don't worry because it doesn't necessarily mean anything catastrophic
1262340	1263340	is happening.
1263340	1267860	But it's something to keep in mind if you do see it.
1267860	1271020	So now let's talk about the mode line.
1271020	1274780	This is not really something that the name the name is not very obvious whenever you
1274780	1279420	first hear it, but it's something that will remind you of something that you're used to
1279420	1282980	from other editors.
1282980	1288660	So in many editors or IDEs, what you'll see is there's a status bar at the bottom of the
1288660	1292460	screen, which basically gives you the current status of the editor, maybe information about
1292460	1297020	the line and column of where your cursor is in the currently open file, maybe what type
1297020	1298820	of file it is, that sort of thing.
1298820	1302700	Well, Emacs has something like that and they call it the mode line.
1302700	1305860	So if you look down at the bottom of the screen here, you can see that we are currently in
1305860	1306860	the messages buffer.
1306860	1309220	I can click on this actually and it will switch the buffers.
1309220	1310380	That's another way to switch buffers.
1310380	1314540	But like I said, I don't recommend using the mouse very heavily in Emacs.
1314540	1317540	You also have information about like where you are in the buffer right now.
1317540	1324820	It says all because we are looking at a buffer where you can see everything at once.
1324820	1329380	However, if you start scrolling in a buffer that's long, you'll see that we're like 8%
1329380	1330660	ahead in the buffer.
1330660	1333860	We're also currently on line 85.
1333860	1338900	And then some packages will actually show you information like basically we're seeing
1338900	1340820	that we're in a Git repository.
1340820	1341820	We're on the master branch.
1341820	1342820	That could be pretty helpful.
1342820	1346460	This is something that also is pretty common in IDEs.
1346460	1348500	And then you see what type of file we're in.
1348500	1351300	So this is an org mode file.
1351300	1354820	If you haven't used Emacs before and you haven't heard of org mode, it's basically like markdown
1354820	1358820	files where you have a file with markup, but it's a lot more than that.
1358820	1362500	So definitely check out my videos on org mode if you haven't heard of org mode before because
1362500	1364740	it can do many, many things.
1364740	1368700	However, this is basically just saying that we are in an org mode file.
1368700	1372340	You can actually click on this to get the same menus down here that you get for the
1372340	1374100	mode up here in the menu bar.
1374100	1377580	So if you've turned off the menu bar in the future, but you still want to see those menus
1377580	1381740	for this mode, you can still click on the mode here to see those menus, which is kind
1381740	1383220	of helpful.
1383220	1385380	So let's see what else.
1386100	1390860	Yes, so one major difference between the mode line and the status bar compared to other
1390860	1395860	IDEs is that you actually get one mode line per window inside of Emacs.
1395860	1399180	Like I was saying before, windows are like panes inside of Emacs.
1399180	1403700	And when you split the window, you'll actually get one mode line per window that's split.
1403700	1406900	So in this case, I'm going to try to do a couple of splits.
1406900	1410700	And we can see that this window below has its own mode line.
1410700	1414460	And this one has its own mode line that only extends to the point where this window is
1414460	1415500	visible.
1415500	1417100	And this one also has its own mode line.
1417100	1419380	And they all mentioned which file they have open.
1419380	1422140	So I can basically switch to scratch buffer here.
1422140	1424340	I can switch to the demo.el here.
1424340	1429520	And you can see that we have all the mode lines have the name of the buffer visible on each
1429520	1433820	of them, basically, and all that same information visible at the same time.
1433820	1438740	So this is kind of good for being able to get information about what windows you have
1438740	1439820	open at a glance.
1439820	1444440	And also there could be window specific information that can be helpful for like jumping to different
1444580	1445580	windows.
1445580	1447240	Maybe if you have a package for that.
1447240	1450920	So it's kind of useful, even though it maybe it does seem like it wastes some screen space,
1450920	1452520	but I find it to be pretty useful.
1452520	1458000	It's a nice way to sort of delineate what's happening on the screen.
1458000	1462060	So also the last thing to mention is that the mode line is fully customizable and can
1462060	1466440	be made to look very nice through your own configuration or from community packages.
1466440	1469840	So all of this text here, you can change all of it.
1469840	1473520	You can change the format of how the information is displayed, you can change whether it's aligned
1473520	1477280	to the right or to the left, you can change the color, you can add icons, you can do basically
1477280	1480600	anything you want to do with this line.
1480600	1485720	As you can see here, I have a much more minimal and nice looking line that has different colors
1485720	1490320	of text that has sort of more well presented information has icons.
1490320	1493220	And this comes from a package called doom mode line.
1493220	1497800	So definitely take a look at the different mode line packages that are available in the
1497800	1499640	Emacs community.
1499640	1505320	On one of the videos of Emacs from scratch, maybe video number two or three, I think.
1505320	1506680	I show how to set up this mode line.
1506680	1509880	So if you want to learn how to configure this to do that, definitely check out that series.
1509880	1515700	But just keep in mind that even though the initial look of Emacs is kind of like old
1515700	1518960	looking and maybe not so attractive, you can change all of that and make it look really
1518960	1521480	nice without a whole lot of work.
1521480	1526720	All right, so the Echo area and the mini buffer, these are also very important.
1526720	1528640	And I sort of pointed to that before.
1528640	1533240	So the Echo area is this line at the very bottom of the screen where messages get written
1533240	1534800	whenever things happen in Emacs.
1534800	1537860	So like if I try to scroll up in this buffer when it's already at the top, it will write
1537860	1540440	out beginning of the buffer here in the Echo area.
1540440	1544920	So this is the place where you're going to get a lot of information from packages.
1544920	1549000	Like maybe if you're using an ID package and you put your cursor on a particular function
1549000	1552640	name, it might give you the documentation for that function down in the bottom.
1552640	1556600	It's just a very useful place for showing transient information that might be helpful
1556600	1558560	to you at any given moment.
1558560	1563240	However, that same area gets used for something else called the mini buffer and the mini buffer
1563240	1567520	is basically another temporary interaction space for the user where you can be prompted
1567520	1570840	for information or selections or anything like that.
1570840	1575320	So for instance, if I try to open a file with the find file key binding, you can see now
1575320	1580720	that in the Echo area, we now have a prompt for find file and it gives me the current
1580720	1582480	directory to start from.
1582480	1586560	And once I start moving my cursor around, you can see that I'm actually typing in this
1586560	1589040	mini buffer at the bottom of the screen.
1589040	1593680	Now this mini buffer actually can have multiple lines, not just that single line.
1593680	1599360	So if you look at my buffer switching command, the one that I use in my configuration, this
1599360	1603480	has multiple lines and I can actually move my cursor through them to select the different
1603480	1604480	buffers.
1604480	1609840	So basically this mini buffer area actually is very useful and a lot of your interaction
1609840	1613360	with Emacs is going to happen through commands that use the mini buffer.
1613360	1616560	So very useful things to understand.
1616560	1617560	Also it's not very hard to understand.
1617560	1620840	It's just a place at the bottom of the screen where things tend to happen.
1620840	1626960	So check out these two entries in the Emacs manual if you want to learn more about those.
1626960	1631880	Alright so commands, commands are a very important part of Emacs because this is where a lot
1631880	1635040	of the useful functionality in Emacs comes from.
1635040	1639000	So command in Emacs is basically a function that has some special information attached
1639000	1643480	to it so that it gets treated as a user facing command, something that the user might actually
1643480	1646120	want to execute.
1646120	1650640	So a lot of this is like editing behavior, like if you want to delete a line or insert
1650640	1653120	some text or whatever, those can all be done through commands.
1653120	1656840	However, a lot of other useful things can be done through commands as well, which I'll
1656840	1659600	show some examples for in a second.
1659600	1666280	So in Emacs to run a command, you can either bind a command to a keybinding, which is already
1666280	1671120	done in a lot of cases for built-in functionality, but you can run any command by name by using
1671120	1672800	the alt x keybinding.
1672800	1678600	So if I go over to the demo here, hit alt x, now you see in the echo area I get a prompt
1678600	1684640	for the mx, which I'll explain in a minute, to basically type in the name of a command.
1684640	1690280	Now this prompt can be completed with all the names of the commands that are in Emacs.
1690280	1695000	So if I press tab to do completion, you're going to get a listing of all possible commands
1695000	1696520	in Emacs at this moment.
1696520	1702960	A lot of these commands come from Emacs built in, but any commands, any third-party packages
1702960	1706640	or community packages you install will also add their own commands, and you can write
1706640	1708560	your own commands too, which show up in this list.
1708560	1713940	So basically anything that's possible to do by the user in Emacs will show up here.
1713940	1718480	And one thing you might notice is that many of these commands have prefixes with a particular
1718480	1722280	concept, like mouse, drag, etc.
1722280	1727120	This actually makes it very easy to do completions only for a certain subset of the commands.
1727120	1734320	So if I wanted to type in mouse-drag and press tab, it will complete to all of the mouse-drag
1734320	1735320	commands.
1735320	1740400	So this is a very nice way to look for commands that are related to a specific concept.
1740400	1746520	So another one you could do is like find- to do all the basically the file visiting commands,
1746520	1747520	etc.
1747520	1753200	So this is a very useful way to find things that you can do in Emacs.
1753200	1758640	So basically, like I said, not all of them are for editing.
1758640	1764040	There's things that you can do for showing different behavior in Emacs or different interfaces,
1764040	1765040	basically.
1765040	1767640	So I wanted to show you a couple of these really quickly.
1767640	1769560	So there's one called DRED.
1769560	1773240	And like I mentioned before, there are better ways to do file listings in Emacs than just
1773240	1774440	having a tree open.
1774440	1776080	DRED is one example of this.
1776080	1779000	It's basically a directory browser inside of Emacs.
1779000	1784240	So if I use alt-x and type in DRED, press enter, it's going to ask me which directory
1784240	1785680	that I want to open in DRED.
1785680	1789480	I'm just going to leave it to be the one that I'm currently in and press enter.
1789480	1793680	Now we get this buffer that basically shows us all of the files and directories that are
1793680	1798440	inside of that directory and all the information like which user owns the file, which group
1798440	1804680	owns the file, the permissions, the file change date, etc.
1804680	1807960	Basically it looks like the output of LS on Linux, which is true because it actually
1807960	1810040	does come from LS effectively.
1810040	1814680	But you can navigate through this listing of files and press enter on any file to open
1814680	1816040	it.
1816040	1819320	And you can also navigate through directories.
1819320	1820680	So this org files is a directory.
1820680	1824520	If I press enter, it goes into that directory and I can open any of those files in this
1824520	1825520	subdirectory.
1825520	1830400	So you can even press enter on the dot-dot to go up one level as well.
1830400	1835480	So it's kind of useful to be able to have this kind of browsing functionality built
1835480	1836640	into Emacs.
1836640	1839480	You can also do things like copying files, moving files, etc.
1839480	1845040	So many of these commands will do extra things that are not just for editing files, they're
1845040	1848800	going to be for useful behavior that you might want to see.
1848800	1850080	So let's see, what else do I have?
1850080	1851080	So calendar.
1851080	1852080	So you can actually show a calendar.
1852080	1856880	Run alt X, type calendar, and it will give you this nice calendar view at the bottom of
1856880	1857880	the screen.
1857880	1860560	There's a special little buffer here that you have keybindings in.
1860560	1865120	So if you see that there's this right angle bracket, you can click that, but you can also
1865120	1869800	type that character on the keyboard and go back and forward in your calendar to look
1869800	1872920	at different days, which is pretty awesome.
1872920	1874800	There's also a built-in shell in Emacs.
1874800	1879200	So if I run alt X and type in E shell, you see it at the bottom of the screen, hopefully
1879200	1880960	you noticed that.
1880960	1884320	I press enter and now we get this embedded shell in Emacs.
1884320	1887880	And the interesting thing about this shell is that it actually is written in Emacs Lisp
1887880	1889480	and it emulates bash.
1889480	1895080	So this shell works on GNU Linux, it works on macOS, and it works on Windows all the same
1895080	1897320	way because it's written in Emacs Lisp.
1897320	1901720	So you have basically a normal shell environment that you can use anywhere all the same way.
1901720	1907080	So as you can see, through the power of commands in Emacs and also through the abilities that
1907080	1912440	buffers provide, you can have all kinds of interactive experiences inside of these windows.
1912440	1916600	So you basically have to go look for all the commands that you might want to use for that.
1916600	1919560	And I'll give you one last one just for the sake of amusement.
1919560	1926200	If you get bored one day and you want to play a game, just type in alt X and type in Tetris.
1926200	1930000	And then we can just go ahead and play a little game of Tetris here in Emacs.
1930000	1935400	I know it's probably kind of weird to think that a Tetris game comes bundled with Emacs,
1935400	1940040	but you'd actually be surprised how many more games are actually included with Emacs, among
1940040	1941040	other things.
1941840	1947960	This is just something to keep in mind for just sort of proving to yourself that there's
1947960	1951720	a lot of things that you can do with Emacs with the built-in functionality.
1951720	1955280	So as I mentioned before, you can install new commands into Emacs using community packages
1955280	1961200	and you can also write your own, we'll cover both these things in another video.
1961200	1965720	So major and minor modes, another really important concept in Emacs.
1965720	1969760	So in other editors, there's usually functionality that gets enabled for files with a particular
1969760	1970760	extension.
1970760	1978040	So you get Python programming functionality for Python dot py files that you open.
1978040	1980560	So Emacs also has this.
1980560	1984320	This functionality is provided through something called a major mode.
1984320	1989160	So a major mode provides the functionality needed for a particular buffer, and it's usually
1989160	1992880	activated based on the extension of a file that you open in that buffer.
1992880	1997640	So like I said, if you open a dot py file, it would load the Python mode, etc.
1997640	1998880	Sometimes this doesn't happen by default.
1998880	2003520	Maybe you install a package from the community for a particular language, you may have to
2003520	2006760	do a little bit of configuration before it will open for that file format.
2006760	2011600	But a lot of the stuff that's built in the Emacs like dot EL files for Emacs list, etc.
2011600	2013720	will open up a specific mode.
2013720	2018920	And a lot of times what these modes do for file formats is they turn on syntax highlighting
2018920	2022240	so that when you open a file, you actually get colorization of all the symbols in the
2022240	2026040	file, which I'm sure you're used to from other editors or IDEs.
2026400	2032200	However, there can be other functionality that gets enabled for custom modes.
2032200	2039000	So like we saw before with that maget buffer that shows the get status of my repository,
2039000	2044040	that actually comes from a major mode that gets enabled whenever I run that maget status
2044040	2045040	command.
2045040	2051400	So major modes are what basically provide the core functionality for a specific buffer.
2051400	2055560	Now major modes often are activated using commands.
2055560	2060200	So even if it is a mode that gets activated using a file extension is still going to activate
2060200	2061480	a mode using its commands.
2061480	2066320	So if we were to type in, let's say, org dash mode.
2066320	2070880	So for any file that ends with the dot org extension, there's probably going to be some
2070880	2076200	mapping in Emacs that says you need to run the org dash mode command, which turns on the
2076200	2082600	major mode for org for org for org files, basically, so org mode.
2082640	2087120	So basically, any buffer is going to have some modus loaded some major modus loaded.
2087120	2090640	And if there's nothing that's specified for a particular mode, it might get a sorry for
2090640	2093880	a particular type of buffer, it might get loaded up in what's called the fundamental
2093880	2099280	mode, which basically just means there's really no special functionality added.
2099280	2103440	The last important thing to mention about major modes is that there can only be one
2103440	2106840	major mode active in the buffer at any given time.
2106840	2112200	So if you try to start a major mode in a buffer, actually, let's let's go do an example of
2112200	2113400	that.
2113400	2115920	So I'll load up Emacs.org.
2115920	2117440	Let me close this really quickly.
2117440	2118440	Whoops.
2118440	2121920	I'm not using my normal keybinding, so I'm a little bit lost sometimes in this configuration.
2121920	2122920	All right.
2122920	2124720	So right now we're in org mode, right?
2124720	2126400	So you can see down here that this is org.
2126400	2128800	I think if I hover over it, does it say org mode?
2128800	2129800	No.
2129800	2131480	But what if I change it to another mode?
2131480	2133960	Like, let's say I run a command to change it to some other mode.
2133960	2135200	So there's like a Python mode.
2135200	2137080	Let's just run Python mode and see what happens.
2137080	2138840	I'm going to press enter.
2138840	2143040	And what's going to happen is all the syntax highlighting in this buffer changes.
2143040	2145680	The mode down here in the mode line also changes.
2145680	2149840	And that's because we changed to Python mode, even though this is not a Python file.
2149840	2151160	So you can basically do whatever you want.
2151160	2153080	You can start any mode at any time.
2153080	2154680	It just may not have the right results.
2154680	2160040	So that just goes to show that Emacs doesn't really have a specific understanding other
2160040	2164120	than what's put into the configuration about what mode is possible for any file.
2164120	2166240	You can activate whatever mode at any time.
2166240	2169680	So I'm just going to go back to org mode here, run that command again to put it back
2169680	2170680	into org mode.
2170680	2171800	And now we're back to it.
2171800	2176160	So that also demonstrates that there can only ever be one major mode at any given time.
2176160	2180120	I was able to change the major mode, but there was only one active.
2180120	2185680	So there's a different type of mode that can be active where many are active at the same
2185680	2190200	time, both in the single buffer that you're looking at and globally across Emacs.
2190200	2192360	And that's called a minor mode.
2192360	2196920	So minor modes typically provide helpful functionality that isn't specific to the major mode of the
2196920	2198420	current buffer.
2198420	2201800	They're usually things that you might need to customize your workflow or even change
2201800	2204720	the way that things are displayed in Emacs.
2204720	2210000	So many things that come from third party or community packages are going to provide
2210000	2214120	minor modes because they're sort of like extra functionality that are really helpful.
2214120	2216840	There's plenty of minor modes that are built into Emacs and we're about to look at one
2216840	2218440	of them.
2218440	2220800	All right.
2220800	2226600	So there is a mode called HL line mode, which will cause the current line that your cursor
2226600	2229120	is on in the file to be highlighted.
2229120	2234200	So what I'm going to do is in the, in the mini buffer, I'm going to press alt X to pull up
2234200	2240120	the command prompt basically, and I'm going to type in HL dash line dash mode, press enter.
2240120	2244320	And now you can see that we have a nasty yellow color highlighting the current line where
2244320	2249160	my, where my cursor is, and that's because I turned on the HL line mode to highlight
2249160	2250160	the current line.
2250160	2254560	However, if we switch to another buffer, you'll see that the current line is not actually
2254560	2255560	being highlighted.
2255560	2261440	Let me find a better one that that demonstrates this a little bit more clearly.
2261440	2264080	And now this one does not actually have the highlighting turned on.
2264080	2268680	And that's because I only turned on that highlighting for the other buffer.
2268680	2272040	So that means that a minor mode can be turned on only in one buffer.
2272040	2276920	However, some minor modes provide a global version of the minor mode so that they get
2276920	2279480	turned on in all, all buffers.
2279480	2286840	So now if I were to run the global HL line mode by using alt X and press enter, it turns
2286840	2288200	it on in this buffer.
2288200	2293040	But then if we go to the messages buffer, you can see that it's also on there as well.
2293040	2297480	So minor modes can be turned on locally or globally, and you can have many minor modes
2297480	2300280	turned on at the same time, either locally or globally.
2300280	2305000	So minor modes are a way to sort of add additional functionality in wherever you want it to be
2305000	2306080	at any time.
2306080	2309520	You can also turn them on and off conditionally for various buffers.
2309520	2312320	You have a lot of flexibility in what you can do with that, which is a lot different
2312320	2314520	than other editors that you might know of.
2314520	2318480	Usually when you install an extension in a particular editor, it's always on or always
2318480	2320880	off depending on what you set it for.
2320880	2324960	So in Emacs, you have a lot more flexibility on how you deal with that.
2324960	2326920	All right.
2326920	2330480	So now that we've covered the basic concepts of Emacs and sort of the high level of things
2330480	2334000	that you're going to want to know to use it effectively, let's talk about the key bindings
2334000	2339160	that you can use to do things that you would normally want to do on a daily basis.
2339160	2343080	So as I mentioned before, Emacs is definitely the most efficient and productive when you
2343080	2346120	focus on keyboard based control.
2346120	2349880	The key binding system, frankly, is one of the most flexible and customizable I've ever
2349880	2350880	seen.
2350880	2354960	And once you start like really getting into learning how to customize your key bindings
2354960	2359040	in Emacs, you're going to realize how limited other programs are by comparison because it's
2359040	2360840	just so good.
2360840	2363840	So today, I'm just going to cover some basic key bindings that you're going to want to
2363840	2366320	learn for basic everyday use.
2366320	2370320	And in future videos, I'm going to go much more in depth about the different areas of
2370320	2376080	Emacs and show you what the key bindings are to use those effectively so that basically
2376080	2380640	you can make your text editing and your general workflow a lot more efficient.
2380640	2385160	But before we start talking about all those key bindings, let's first understand how key
2385160	2388320	bindings are represented in Emacs.
2388320	2392200	So you're often going to see people write out key bindings in a very specific format
2392200	2396520	whenever they're trying to tell you what keys to press, especially in Emacs itself.
2396520	2401040	If you go look into the menu bar, you're going to see that these strings here have a very
2401040	2404680	specific syntax to tell you what keys are being pressed.
2404680	2407880	And I'm going to explain to you what those things mean right now.
2407880	2414760	So when you see a character like capital C, and hyphen and then another character after
2414760	2419120	it that basically means you need to hold control and then press the letter that follows.
2419120	2424400	So in this case, it's control C, because we have the capital C for control dash lower
2424400	2426840	case C for lower case C.
2426840	2430820	So basically hold the control key and press the letter C, and which is what I just did.
2430820	2435160	So now it basically waits for the next part of a key binding that starts with control
2435160	2441640	C. Now, you will also see key bindings where there will be a pair of things like C dash
2441640	2444000	x C dash s.
2444000	2449460	What this means is that you hold control, press X, and then you either release control
2449460	2454600	and then press it again and then press S, or you just keep holding control and you press
2454600	2457480	X and then S while holding control.
2457480	2459600	I prefer the latter option.
2459600	2464660	I'm sure that many Emacs user prefer that because it's way more efficient and easier
2464660	2469680	on the fingers to not just like the control X control S, you know, like lifting your finger
2469680	2474200	every time, it's going to really tire you out and make your fingers hurt if you do that.
2474200	2479240	So when you see a sequence of keys like this where they're, they all start with the same
2479240	2483800	letter, just keep holding that letter and what while you press the other letters in
2483800	2488720	the sequence, so hold control, press X, then S for this key binding.
2488720	2492560	Now there's a little bit of a difference in the next one where the first one has control
2492560	2496840	attached to it for control X, but then the second letter is by itself, it doesn't have
2496840	2498800	anything else with a hyphen in front of it.
2498800	2504080	What this means is hold control, press X, then release control, then press the letter
2504080	2505400	B by itself.
2505400	2510400	So there's many cases where you will see bindings that have a control character used for the
2510400	2513360	first letter and then no control characters used for the second letter.
2513360	2515440	So definitely keep that in mind.
2515440	2518400	That one, those ones can be a little bit harder to hit sometimes because you have to release
2518400	2522880	your, your pinky off the character, the control key at the right time, but you'll get used
2522880	2524560	to it.
2524560	2526680	And then you have things like MX.
2526680	2530980	So this is actually the alt X binding that we've been talking about before.
2530980	2534640	And if you look at this little table down here or this little list of things here, what
2534640	2539640	I'm basically telling you is that C stands for control and M stands for alt, but that's
2539640	2544320	because Emacs predates keyboards that have the alt key.
2544320	2547960	Emacs was written for a system that has a different set of keys all together and one
2547960	2549440	of them was called meta.
2549440	2554000	So in this case, M stands for meta, but really in modern keyboards, this is represented by
2554200	2554800	alt.
2554800	2558960	So anytime you see the capital M, think of the alt key.
2558960	2564680	Similarly, the capital S is for shift and the lowercase S is for the super key, which
2564680	2567520	is also one of those keys from those old keyboards.
2567520	2571360	And this one actually is the windows key on conventional keyboards these days, or maybe
2571360	2576680	if you have a Linux specific computer, that's the, the Linux penguin key, or maybe if you
2576680	2580560	have a Mac, that's going to be the option key, I think is what it turns out to be.
2580560	2582320	It could also be command.
2582560	2587800	I don't remember which one it shows up as on macOS keyboards, but usually on normal
2587800	2589320	external keyboards, it would be the windows key.
2590200	2590480	Okay.
2590880	2594920	So, so basically the meta X is the one we were talking about before.
2594920	2600280	However, you can have very funky key bindings that have a combination of modifier keys that
2600280	2601720	are being used in the sequence.
2601760	2605840	So in this case, we have alt G and then control S.
2605840	2607720	And those are actually pressed in sequence.
2607720	2612280	So you would hold alt, press G, release alt, then hold control, press S.
2613320	2616760	You don't see these quite as often because they're a little bit harder to press, but
2616760	2621680	usually they're provided in places where you, this is an action you wouldn't do frequently.
2621880	2626760	And it's just there in case you want a key binding to do that action, if you have to,
2626760	2629720	for some reason, if you don't want to have to let go look for the command in the command list.
2630400	2635960	So just keep in mind that if you see a binding that has this kind of differing modifiers,
2636080	2640120	that is an actual key binding is just you have to do the modifiers separately.
2642480	2646320	OK, so you can also combine things like you can have control alt and then a letter
2646400	2647360	press at the same time.
2647360	2653760	So here we have an example of CMS, which would be control and alt held down and press S
2653760	2657120	at the same time, you can do like alt shift D, etc.
2657120	2661680	So these modifier keys can be combined in a lot of different ways to have more key
2661680	2662960	bindings that get created.
2663640	2669640	But most often you'll see these sequences instead where you have like a control X control
2669640	2675320	S or something like that, because in EMAX, there's sort of a meme about how EMAX basically
2675320	2678920	you have all these crazy key bindings where you hold control and hit like five letters.
2679200	2683720	It is kind of like that, but that's just because once you start getting into the usage flow
2683720	2687960	of EMAX, you realize that it actually is a lot more efficient using key bindings like
2687960	2690120	this than it is to like go clicking around in menus.
2692480	2697960	All right, so the last important thing to mention about key bindings in EMAX is that
2698440	2703080	there are two prefixes that are very commonly seen that you should understand.
2703080	2709800	Now a prefix is basically any key sequence that has a another key press after it.
2709800	2715000	So when we saw this control X control S, control X in this case is actually a prefix.
2715000	2720520	So if I press control X right now, EMAX will be waiting for the next key in the sequence
2720520	2724760	because it knows that all other key bindings with control that start with control X, they
2724760	2727240	have some other thing that needs to come after it.
2727240	2729880	So this is now considered to be a prefix.
2729880	2734680	And now basically it's waiting for me to press the next key in the sequence.
2734680	2738600	So if I press control S, then it tells me no changes need to be saved because that's
2738600	2740440	actually the key binding for saving a file.
2741320	2744520	So it waits as long as it needs to for you to actually press the next key.
2744520	2748120	So don't worry if you have these sort of key sequences, you don't have to press them really
2748120	2751160	fast. You can press them at your own speed until you get more comfortable using them.
2751880	2753240	So back to the point.
2753880	2759720	Control X is the prefix for all of EMAX primary key bindings for like opening files,
2759720	2764120	saving files, changing the window configurations in EMAX, creating windows,
2765160	2767560	creating frames, all that kind of stuff.
2767560	2771640	If you press control X, there's a lot of bindings that show up under that.
2771640	2775480	You can actually see all these here using the which key package which I have installed.
2775480	2778200	This is not actually something that comes by default in EMAX.
2778280	2783480	If you were to go into this this EMAX here, the demo EMAX press control S X,
2783480	2786120	you can see down in the echo area, it's basically just waiting for you to press
2786120	2789240	something else and it doesn't tell you what the possibilities are.
2789800	2792760	So there are definitely packages that make this a lot easier.
2792760	2794840	Check out the EMAX from scratch series.
2794840	2797880	I think the first one or two videos I show how to set that up if you're interested.
2799400	2804600	Also, control C is another very common key prefix where if you press control C,
2804600	2809320	you will get the key bindings for the current major mode that's active and maybe some other
2809320	2815720	minor modes that are active and usually there's those are supposed to have control keys bound
2815720	2821880	to the things that come next in the sequence so that you don't pollute the the the key map.
2822520	2826200	But usually this control C is also meant for user key bindings.
2826200	2830120	So usually you would be able to go in your configuration and set up key bindings under
2830120	2833800	the control C prefix for things that you want to do for your own workflow.
2833800	2840040	So just keep in mind that this prefix control C is shared between modes and the user configuration.
2840040	2843080	So you may have some overlap there sometimes you'll have to watch out for.
2845080	2849240	Okay, so very important thing how to open and save files.
2849240	2854600	To open a file in EMAX, you can press control X and then control F for the find file command.
2854600	2858680	So if I use control X, you can see down here in the echo area is waiting for the next character.
2858680	2863320	So then I'll press control F. And now the mini buffer is asking me for what file to load.
2863320	2867400	So I can type in init.el. This actually will do completion if you press tab.
2867400	2872520	So if I press tab just the directory path, just press it twice and it will give you all the
2872520	2877400	files that are available under that path. You can even complete the directory names as well.
2877400	2881880	Press tab there, it will complete that file. If I type in I in, which I know there's a file
2881880	2886760	that starts with that in this folder, press tab, it will complete to init.el. Then you press enter
2886760	2892920	and it will load the file. So that's how you open a file in EMAX to be edited control X control F
2892920	2899160	to run the find file command. Now, if you want to make some changes to a file and then save it,
2899160	2904840	you need to know how to save the file. And the binding for that is control X control S.
2904840	2910200	So in this buffer, I can go and change something. So let's just say I add a little comment here.
2910200	2915720	Hello, I can use control X and then control S. And then you can see here in the echo area,
2915720	2919880	it says it wrote that file out of that path. And like I mentioned before, you can go to the
2919880	2927400	messages buffer if you want to control X control B messages. And then you can see that it wrote out
2927400	2931640	saving file the file path and then it says that it completed saving that file. So anytime you
2931640	2936360	save a file, it's actually going to write that out to the messages log so that you can see that there
2936360	2944360	whenever it happened. And also, another thing you might want to do in certain editors is use a
2944360	2949320	save as command to save the current file to another the current buffer to another location.
2949320	2953240	Maybe it's one file that you're editing, but you want to duplicate it to another file,
2953240	2958600	you can use control X control w for the right file command, which will allow you to save it to
2958600	2964600	another buffer. So I'm here in this init.el file right now. If I use control X control w, it will
2964600	2970920	ask me what file I want to write this to. I can say dim one not demo. Let's see test that yell,
2971000	2978200	press enter. Now it has saved this file buffer to the file test.el. And now you can see that the
2978200	2983080	buffer name has also changed along with that because now it's going to treat this as that new
2983080	2987560	file going forward as you're editing it. However, the old file still does exist. And you can get
2987560	2994040	back to it if you want to. So those are the very basic file operations that you would want to know
2994040	2997320	about one. Yeah, I'll cover that in a minute. Alright, so
3000920	3005480	now let's talk about switching buffers. So as I mentioned before, you can have a bunch of buffers
3005480	3011400	open in Emacs at the same time, but you might not actually know which ones are there. So to switch
3011400	3017160	buffers, you can use the control X B binding. Now keep in mind that this is the control X and then
3017160	3023000	the single letter B binding and not like the holding control for each one of them before. So
3023000	3026600	I'm going to use control X and I'm going to release control and I'm going to press B.
3027720	3032680	And then I press the wrong key at that moment, control X B. Now it gives me a prompt in the
3032680	3037400	mini buffer in the echo area saying switch the buffer. So you can press tab to get a list of
3037400	3042280	all the buffers that are available. And if you click on any of these, it will automatically switch to
3042280	3049160	the the buff, the buffer that you clicked on. But you can also press D or T basically press T and
3049160	3055560	then hit tab to complete anything that has T E in it and then press T S press enter. And then we
3055560	3061880	are now into the test that yell buffer. So that's one way to quickly search to a switch to a buffer
3061880	3065720	if you know the name of the buffer. But sometimes maybe you don't remember what the name of the
3065720	3069880	buffer is, or you don't really remember which buffers you have open. So there is a way to list
3069880	3075960	those buffers if you use control X control B. So instead of using the single letter B by itself,
3075960	3082600	actually use control this time control X control B. And that will give you this buffer list view
3082600	3086840	where you can see all the buffers that are open you can see which file they correspond to you
3086840	3092520	can see what the major mode is you can see the size etc. Then you can also click on a file to
3092520	3097880	open it. You can also use your mouse sorry your keyboard and press enter on a file to open that
3097880	3103240	as well. So that's just another way to see all those buffers. And keep in mind you can still
3103320	3107480	click buffers in the menu up here and seal those buffers here as well to switch between them.
3107480	3111880	Those two key bindings that I mentioned to you just now are both represented here as well control X
3111880	3118920	B and control X control B. So you can see those easily. Also one couple things I did not mention
3118920	3123400	in the notes here but there's a previous buffer and next buffer if you want to just quickly switch
3123400	3129480	between them control X left arrow control X right arrow. So if I use control X right arrow,
3129560	3133720	I can sort of cycle through the buffers that are available. So control X left control X left.
3134520	3137960	So basically you just get through all them really easy. So basically if you want to go back and
3137960	3143240	forth between one buffer and another control X right arrow control X left arrow basically.
3143240	3146760	So you're just sort of cycling through that that chain of buffers basically.
3148040	3151960	I should add that to the the notes here. Let me actually make a note for myself
3153320	3158040	to do next pre buffer. Okay, let's see if I remember to do that. If you see this in the show
3158040	3163960	notes afterward you'll you'll realize I failed myself. Okay, cutting and copying text. Very common
3163960	3168760	thing you might want to do inside of your editor. However, this is an area that always confuses
3168760	3174040	new Emacs users because the concepts here are different than what you expect. So many programs
3174040	3179080	across Linux, Windows and Mac OS. Well, let's just say Linux and Windows because that's the ones
3179080	3186440	that do this the most. Use control C to copy text and control X to copy the current text and then
3186440	3193320	delete it, which is a cut operation. This is not the case in Emacs. So as we mentioned before,
3193320	3198040	control C and control X actually have special meaning in Emacs. So they can't be used for
3198040	3203720	cut and copy. So they have a different strategy for doing this. And I think this is actually because
3205080	3211400	cut and copy and paste in Emacs predates the common cut and paste metaphors in UI. So
3212200	3215720	Emacs has his own idea for it because it came before all those things happen.
3216920	3223000	So in Emacs, to kill text means that you're going to cut it basically. I don't know why they use
3223000	3226600	the word kill for that, but that's what it's called. So that's what we're going to use. So it
3226600	3231560	basically copies the text and then deletes it. The most thing common thing you're going to do is to
3231560	3236520	kill a region, which is basically a selection of text you've made, either just to delete it or to
3236600	3242520	cut it to be paced somewhere else. So to kill a region, first you need to select some text to
3242520	3247080	make a region to be killed. And you can begin, you can make one by marking the region using
3247080	3253400	control space. So in this buffer, I'm going to hit control space, and then I'm going to start
3253400	3259400	moving my arrow keys around. And you can see how the text is being highlighted now. So that basically
3259400	3265800	creates a selection or a region in Emacs terminology. I think you can also hold shift.
3266600	3270600	Okay, that actually doesn't work in this mode. But just just keep in mind, you can use control
3270600	3274920	space and then use the arrow keys to start selecting a region. There are other commands
3274920	3279800	for marking text based on words or sentences, etc. We'll go into that in a different video.
3279800	3283320	For now, just know that control space will start the selection wherever you want it to be.
3283560	3292760	Let's see, did I actually put the binding in here for? Yeah, I didn't. Okay, so control w is what
3292760	3299000	you would use once you make the the selection to actually cut the text. So I'm going to use control
3299000	3304680	space. And then I'm going to start making a selection here, then I'm going to press control w.
3304680	3308360	And that will delete that text, but I actually copied it at the same time. So it could be
3308360	3314360	inserted somewhere else. So now we have some text that has been copied to something called the kill
3314360	3321400	ring, which is basically a list of things that have been copied before. And we can now paste it,
3321400	3324920	which I'll show you in the next section. The last thing I want to mention to you is that this kill
3324920	3329080	ring actually has some interesting functionality. And we're going to talk about it in a future
3329080	3335240	episode whenever I have some time to do that. So to paste that text that we copied, you can use
3335320	3341720	control y to yank. I don't know why yank is the terminology that's being used for paste in Emax,
3341720	3345640	but that's what it is. So if you ever see something talking about yanking text in Emax,
3345640	3350600	that's basically pasting text. So in this buffer, I'm going to move my cursor down,
3350600	3355240	I'm going to press control y for yank, and that's going to paste back in that text that I had
3355240	3360520	previously cut from this buffer. So just just goes to show you that there is cut and paste or cut,
3360520	3364760	yeah, cut and paste, but it just has different terminology in Emax, which is a little bit confusing.
3364760	3371960	And different keybindings. So once again, control space to select text, control w to cut it,
3371960	3381480	control y to paste it. Alright, so if you are so tied to the old
3382200	3388280	cut copy paste keybindings that are used all the time in Emax, or sorry, in Windows and Linux,
3388280	3394360	you can actually turn those on using something called CUA mode. I don't remember what CUA
3394360	3398600	actually stands for, but basically what it does is it makes it so that when you select text,
3398600	3406120	it actually makes control c control x. Actually, you do cut and copy, and it makes control v do
3406120	3411720	paste the way that you expect. So the way that you can turn that on very easily is to go to the
3411720	3419560	options menu in Emax, and then click this use CUA keys. And once I do that, I can go and select
3419560	3425880	some text using control space, and then use control c to copy, and then go somewhere else,
3425880	3430440	and then press control v to paste. So it does what you expected to do. It acts exactly like
3430440	3437800	you expect from a more sort of conventional desktop editor. So you could also, I think,
3437800	3442520	use shift and the arrow keys. Well, it was working for me earlier. I don't know what caused it to
3442520	3447160	work, but it seemed like there was a shift arrow keys functionality that would do shift selection,
3447160	3452360	but it may be because I'm in an org mode buffer, and it doesn't work that way. But just know that
3452360	3458120	if you want that functionality, you can easily turn it on using the CUA keys. Now you can also use
3458120	3462920	the CUA mode command in the command list. If you press enter, you see me typing down here in the
3462920	3468440	echo area. Press enter here, it turns on CUA mode in the way that you expect. So that's another way
3468440	3475960	to turn on the same functionality. Okay, undo and redo another very important thing for editing text
3475960	3481320	in a text editor. It's also another thing that's different than what you might be used to. So the
3482040	3487960	undo key binding by default is control underscore, but you can also use control whichever slash this
3487960	3491880	is. I can never remember whether it's forward or backslash, but just use that slash character that
3491880	3498840	is on the same key as the question mark on the US keyboard. And you can undo a change that you made.
3498840	3504840	So let's let's try to write some texts here. So I'm going to say hello. And then another test.
3506360	3511960	So now what I'm going to do is press control underscore. And it's going to undo that edit,
3511960	3516040	press control underscore again, it's going to undo that edit, press control underscore again,
3516040	3520760	it's going to undo that edit that can keep undoing until I go back to the state of the file
3520760	3525000	whenever it was saved last. So you probably want to know how to do a redo. Well, this is a little
3525000	3532520	bit weird, because what you actually have to do is press control G first, which will then reset the
3532520	3538040	undo state and change the undo direction. So now if I was to press control underscore, it's going
3538040	3544840	to redo the things that I just undid, as you can see, and then as soon as I get back to the place
3544840	3552200	where I was at the the the, the, if I've reversed the undo history all the way back to where it was
3552280	3556120	and start pressing on control underscore again, it starts going undo again. So it goes back in
3556120	3562200	the other direction again. So it's a very different model of undo, and it's kind of confusing to
3562200	3567400	people. There are ways to install different undo methods in an E max that you can use. We'll go
3567400	3571880	into that in a different episode, but just try to learn this one for now and see how it goes for
3571880	3585000	you before you go try to find another one. So let's see. Okay, so another thing that is actually
3585000	3589800	kind of useful that you might need to know that is not very obvious at first is how to cancel an
3589800	3594440	operation. So sometimes you're going to run a command that you're going to want to cancel it
3594440	3598040	before it completes either it's going to do some long running operation in the background or it's
3598120	3602120	going to have a prompt that comes up that you no longer want, you're going to want to get rid of
3602120	3608920	that somehow. For this, you can press control G. This is basically the quit command in the keyboard
3608920	3614360	quit command in E max. And it interrupts any active command and brings you back to a normal
3614360	3619800	state in E max. So let's say I use control X control F to use find file, you can see we have
3619800	3625240	the prompt down here in the echo area. I press control G, it cancels a prompt and I go back to
3625240	3630600	editing in the normal way. Also, if you run anything that seems to be taking a long time or
3630600	3634920	maybe it hangs E max, if you see E max freeze, and you can't actually click on anything or
3634920	3638920	press any keys, just try to keep pressing control G because sometimes that will actually
3639800	3645800	kick out whatever hang is happening in E max and make it so that you can continue your work.
3645800	3650600	So don't don't don't freak out if E max ever hangs just keep spamming control G just hit
3650600	3655240	control G until something happens. And then if you hit control control G like 10 times and
3655240	3661240	nothing happens, then you could probably kill E max but control G control G can get you out of a jam
3661240	3669160	in a lot of cases. So just one last thing, learning more key bindings in the editor,
3669160	3673320	there's a lot of ways to do that. As we talked about before, looking at the menu bar and seeing
3673320	3678120	what keys are represented there is a great way to figure out what kinds of key bindings are
3678120	3683400	available as well as what kind of operations are available. There's also the command describe
3683400	3689480	bindings. So if you go into the demo here, use alt x to get the command list type in describe dash
3689480	3696440	bindings, press enter, it's going to give you a listing of all of the active bindings currently
3696440	3702280	in E max for this buffer basically. So globally and in the buffer. And there is a lot of key
3702280	3707960	bindings here. And there's a lot of commands that are bound. So a lot of these that are like
3707960	3713480	single control plus letter keys are actually movement keys or editing keys inside of the
3713480	3717800	buffer. So these are very useful to look at to see like what things you could do. So like for
3717800	3723400	instance, control in, if I put my cursor here and use control in, it takes me to the next line.
3723400	3727480	If you look here, there's control P for previous line. So you can use control P for previous line.
3727480	3731960	So that's actually a way to navigate through the file without having to move your hand to the arrow
3731960	3736680	keys. So once you start looking at this list, you might learn a lot of things that might save you a
3736680	3742440	lot of time whenever you're editing in E max. So this is a great way to learn a lot of things that
3742440	3748920	you don't know about already in E max. There's also describe key. So for instance, if you
3750040	3755160	if you've heard about a particular key binding, or maybe like there's you press something by accident,
3755160	3760600	you don't know what it did, you can use describe key, the describe key command. And what it will
3760600	3766120	do is prompt you for a key to to look up, you can put give it whatever key binding you want.
3766840	3770440	And then it will tell you what command is bound to that key. So let me just do that right now,
3770440	3777560	I'm going to use alt X, type in describe dash key, press enter. Now I'm going to type in control x
3777560	3782680	control f. And then it gives me this documentation page, it says that this key is bound to find
3782680	3788920	file and we give you all the documentation about the find file command. So in E max, there's all
3788920	3792680	this help information that's built in. And this is one thing you can do you can you can find out
3792680	3798600	what command a key is bound to is very helpful. So keep that in mind in case you want to know what
3798600	3803880	a particular key does. And since we've already mentioned it, let's just mention it a little
3803880	3810040	bit more the help system in E max is fantastic. The entire E max manual is built into E max,
3810040	3813960	you can read it inside of E max to navigate around it, you can find out all kinds of information
3813960	3818440	about E max there. And then there's more functions that start with the word describe like we saw
3818440	3823400	about before, that will tell you about all the functions and variables in E max packages,
3823400	3827080	everything else you could possibly want to know about something that's defined in E max,
3827080	3831480	there's all these describe functions that will help you with that. If you go to the help menu,
3832360	3835880	all these functions are here. So all the describe functions you might want to know about are listed
3835880	3842440	here. There's also the read the E max manual items, if you click that, it gives you the
3842440	3846760	entire E max manual here, you can click all the different links for the different topics.
3846760	3850360	There's also a frequently asked questions. And there's a tutorial you might want to check out
3850360	3855880	that can help you learn how to edit things in E max or like the basic key bindings. So there's a lot
3855880	3861320	of great stuff in this menu that you should check out to learn more about E max built in,
3861320	3864440	you don't have to go to the internet to find this stuff, it's just right here with you anywhere you
3864440	3871320	go without internet. Okay, so the last topic for today is how do you configure E max? Well,
3871320	3875480	we're not going to go very in depth here because I go really in depth in other videos about this,
3875480	3879320	but I'm going to tell you that the main two ways that you would configure E max so that you know
3879320	3886040	about them. First of all, there is the customization UI. And this is a full user interface for
3886040	3892440	customizing any option in E max. And the interesting thing here is that it not only shows you the
3892440	3896600	options that are built in the E max, it shows you the options for any external package you install
3896600	3901080	to say any any community package you install, all the options are going to show up here in the same
3901080	3907560	user interface. So to get to that, use alt x and type in customize, press enter. And now you get
3907560	3912040	this interface, which basically tells you about all the different types of settings that are available
3912040	3917400	in E max, you can click on those to jump into them, and learn more about all the settings, they
3917400	3921320	all have descriptions. So like the cool mode settings are here in this cool mode group.
3922120	3925640	But you can also search for a setting. So say for instance, you want to know how to set your
3925640	3931400	tab width for indentation, you type in tab width, and press enter here in this box. And then you
3931400	3937320	can see there's a tab with setting. And here you can edit this value instead of two or something,
3937320	3942760	then click apply for it to be applied for the current session. I believe there's a way to
3942760	3946840	save it for all sessions here as well. But I don't see it at the moment, we're going to go more
3946840	3952360	in detail about how to use this UI in the future. Now personally, I don't use this UI because I
3952360	3960440	prefer to use the other option for E max, which is the init.el file. This file could have other
3960440	3966760	names, but most commonly people know it as the init.el file. And basically what this is, is actual
3966760	3971560	E max list code that is used to configure your editors. That means you're setting all the configuration
3971560	3977400	variables using code, and you're loading packages using code. And you're also you could define your
3977400	3983160	own functions that connect to these packages using code in this file. In my opinion, this is the best
3983160	3987960	way to configure E max because you can then check in your configuration to source control and share
3987960	3993560	it between machines or at least, you know, have it saved somewhere so that you don't lose it.
3994520	4000120	So I have an entire video series called E maximum scratch that will tell you how to do this. If
4000120	4004920	you want to learn more about how to configure E max and get a modern looking setup like I have on
4004920	4010760	the screen right now, using the community packages and the stuff that's built into E max by editing
4010760	4016680	your init.el file. And just to show you an example of that, we actually did open and init.el file
4016680	4022920	before. So let's just see if we can go back to that. Oh, I think I renamed it to test.el. But
4022920	4027960	it's still the same file. Basically, it's just a file containing a bunch of code that is doing the
4027960	4032920	configuration for E max. Now, I know that people say, Oh, it's Lisp. It's kind of weird. It has
4033000	4036920	all these parentheses. Well, when you start getting used to writing E max list for the
4036920	4041240	purpose of configuration, you realize it's not that complicated. So don't let that be something
4041240	4045160	that stops you from trying to learn how to do this, because you're going to get a lot of joy
4045160	4050280	from learning how to configure E max properly and setting a setting it up exactly the way that you
4050280	4054120	like it. So you're going to have a file that's going to have a lot of lines of configuration,
4054120	4058360	and it's all going to be yours. So that's one of the best things about E max in my opinion.
4058360	4066520	Okay, so what's next? Well, I think this video should give you very much of what you need to
4066520	4071000	know to get started using E max and to be productive with it on a daily basis. However, we weren't
4071000	4074840	able to cover many things in depth, because we were just trying to scratch the surface and get
4074840	4081080	you get you started. So I'm going to start making more videos in a new series called E max essentials,
4081080	4084680	which will cover many of these topics at a deeper level. So you can go from being a beginner to E
4084680	4090600	max to an advanced user by the end of all the videos that we cover these topics. And I've already,
4090600	4094200	like I mentioned, been making a ton of other videos about E max on this channel. So you
4094200	4097960	should definitely check out the other playlist if you want to learn a lot more while I'm building
4097960	4105800	out the E max essential series. So as I mentioned before, excuse me, the E max from scratch series
4105800	4111320	is all about configuring E max from the ground up using the init.el file. There's also the E max
4111320	4115320	tips series, which are like independent videos about various packages you might want to try out,
4115320	4120440	things you might want to do. There's E max desktop environment, which is a very fun series where we
4120440	4125320	turn E max into a complete desktop environment. So you can do your window management, and basically
4125320	4131640	live in E max full time, which is basically what I do now. If you're used to using IDEs,
4131640	4136200	integrated development environments for various programming languages, check out the E max IDE
4136200	4140440	series. There's not many various videos there at the moment. But the idea is that I'm going to
4140440	4145800	continue making more videos showing specific configurations for different languages so that
4145800	4150840	you can use E max as an IDE for those languages. There's a lot of great packages that make this
4150840	4155480	possible. So you should definitely check that out. There's also the E max mail package, where I talk
4155480	4160040	about how to basically do your email in E max. So that may sound kind of weird, but it's possible.
4160040	4164360	So definitely check that out too. But then if you want to learn more about the language for
4164360	4169880	configuring and extending E max called E max list, I'm currently working on a series called
4169960	4172920	learning E max list that will teach you about that language and how to use it.
4174120	4177320	And lastly, if you want to know a little bit more about what E max is capable of,
4177320	4180680	capable of, check out the video I did at the beginning of this year called five reasons to
4180680	4185080	learn E max in 2021, where I give a little bit of a demo of some of the other cool things that
4185080	4191160	you can do with E max. It might be interesting for you to see that. So definitely check out the
4191160	4194440	show notes for this episode. I know we covered a lot of things, but I'm going to have all the
4194440	4199640	stuff here in the show, excuse me, in the show notes for you to check out. And definitely subscribe
4199640	4204760	to the channel and click the bell to be notified whenever we post new videos. And when I go live
4204760	4210760	every Friday, so we do a live stream every Friday, where the community of system crappers gets together
4210760	4216520	and talks about E max, basically other interesting topics that have come up that week. So it's a
4216520	4221960	very fun environment. So you should definitely go come check that out. Also, I'm sorry, I'm losing
4221960	4228040	my voice from the long video here. Check out the link to the discord below. If you want to get some
4228040	4232600	help getting started with E max, join the discord, we're all there hanging out. There's about 700
4232600	4237880	people there now. And we're all you know, enthusiasts of E max, we all love using E max. So
4237880	4242920	definitely come check that out and and join us there is a lot of fun. Okay, before my voice
4242920	4249960	goes completely, let me just say thank you to my sponsors. So these amazing people have decided to
4249960	4254120	sponsor the work that I'm doing making these videos about E max, new gigs and everything else
4254120	4257720	that we talked about on this channel. I'm very thankful to them for doing this because it gives
4257720	4261960	me a lot of motivation to keep going. And it just makes me feel like people actually appreciate what
4261960	4267400	I'm doing. So I'm very thankful to all of them. So if you are interested in becoming a sponsor of
4267400	4271080	this channel, definitely check out the two links that I have below one for GitHub sponsors and
4271080	4276360	one for Patreon, you can do whichever one you choose. Also, I have a link to PayPal if you want
4276360	4280840	to do one time donations. Anything you choose to do is fine. Otherwise, this content is free and
4280840	4285720	definitely come and check it out be a part of the community. And it costs you nothing. So anyway,
4285720	4289880	thanks a lot for watching. I hope this video was helpful for you to get started with E max.
4289880	4293160	Definitely let me know in the comments if you have any further questions of things that I could
4293160	4309080	cover in future videos. And until next time, thanks a lot for watching. Happy hacking.
