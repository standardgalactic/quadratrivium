WEBVTT

00:00.000 --> 00:20.080
What's up everybody, welcome to System Crafters, I'm David Wilson and this is the Absolute

00:20.080 --> 00:22.720
Beginners Guide to Emacs.

00:22.720 --> 00:28.120
So if you've never been to this channel before, I'd like to first of all say welcome.

00:28.120 --> 00:32.120
This channel is basically about crafting your system configuration using free and open

00:32.120 --> 00:37.960
source tools like GNU Emacs, GNU Geeks and more, like basically any of the nice sort

00:37.960 --> 00:43.640
of off the beaten path tools that you might find in the GNU Linux world.

00:43.640 --> 00:47.480
So I've made about 50 videos on Emacs for this channel, but the one thing that I haven't

00:47.480 --> 00:53.080
done yet is create a video that's explicitly for those who have never used Emacs before

00:53.080 --> 00:55.560
or those who've only used it very little.

00:55.560 --> 00:59.840
So in this video, I'm going to give you exactly what you need to get starting using Emacs

00:59.840 --> 01:04.120
and to understand the basic concepts and key bindings of the editor.

01:04.120 --> 01:07.040
I know this video might actually seem pretty long, I'm not sure how long it's going to

01:07.040 --> 01:10.480
be yet, let's just see how it goes when we record it here, but I'm going to put chapter

01:10.480 --> 01:14.680
markers in the timeline below so that you can skip ahead to various topics that you're

01:14.680 --> 01:20.160
interested in learning about and also you can return to it as a reference.

01:20.160 --> 01:22.800
And also the notes that we're looking at on the screen right now, this is actually an

01:22.800 --> 01:26.680
org mode file, and I'm going to commit this to a GitHub repository so then you can go

01:26.680 --> 01:31.120
look at it and see exactly what I'm reading to you right now whenever you go and want

01:31.120 --> 01:32.520
to study this yourself.

01:32.520 --> 01:34.600
So let's get started.

01:34.600 --> 01:38.040
So first of all, we can talk about installing Emacs because that's the first thing you'll

01:38.040 --> 01:40.280
have to do before you can actually use it.

01:40.280 --> 01:44.960
So Emacs can be installed on GNU Linux, Mac OS and Windows.

01:44.960 --> 01:50.360
The latest stable version of Emacs is 27.1, so it's best to try to find that version

01:50.360 --> 01:53.200
for your operating system.

01:53.200 --> 01:58.360
The things we covered today obviously will be related to 27.1, but they also should work

01:58.360 --> 02:02.600
in the more recent stable versions like 25 and 26.

02:02.600 --> 02:05.960
Those have existed for a few years now, so you should be able to find those on your Linux

02:05.960 --> 02:09.080
distribution if you happen to have an older version.

02:09.080 --> 02:13.520
But if you can, definitely try to get Emacs 27.1 because it is the most recent release

02:13.520 --> 02:17.440
and it has lots of improvements upon those previous releases.

02:17.840 --> 02:23.600
Alright, so for GNU Linux, definitely GNU Linux is the easiest OS for installing and

02:23.600 --> 02:25.880
using Emacs by far.

02:25.880 --> 02:29.880
It's available in pretty much every Linux distribution's package manager, so however

02:29.880 --> 02:33.720
you normally install packages in GNU Linux, you can use that to install Emacs.

02:33.720 --> 02:37.520
Typically the name of the package is Emacs or something containing Emacs, so it's pretty

02:37.520 --> 02:39.400
easy to find.

02:39.400 --> 02:42.640
Just keep in mind, like I said before, that your distribution may actually have an older

02:42.640 --> 02:44.120
version of Emacs.

02:44.120 --> 02:49.720
Like I think in Ubuntu 20.04, they have Emacs 26, so just keep in mind that there may be

02:49.720 --> 02:53.560
an older version, but it's not really a big deal if you don't have a newer version.

02:53.560 --> 02:59.800
There are ways to find newer versions as well, so just search for your distribution and look

02:59.800 --> 03:04.280
to see if there's a way to install that if you really care about having the latest version.

03:04.280 --> 03:10.760
One other question to be asked, I guess, about using Emacs on GNU Linux, and also on macOS

03:10.760 --> 03:14.720
as well, possibly Windows, I'm not sure if it works on Windows, is whether you want to

03:14.720 --> 03:19.880
use it in the graphical user interface mode or in the terminal mode.

03:19.880 --> 03:21.640
You have options for both.

03:21.640 --> 03:27.080
Obviously, right now I'm using Emacs in graphical mode because I have different font sizes and

03:27.080 --> 03:31.800
different font colors and all this stuff going on, however you can also use it in the terminal,

03:31.800 --> 03:36.040
which can be very useful for various reasons, especially if you want to SSH into another

03:36.040 --> 03:38.800
computer and use Emacs remotely, etc., those kinds of things.

03:38.840 --> 03:44.440
If you're very partial to using things in the terminal, it is absolutely possible to

03:44.440 --> 03:48.920
use Emacs in the terminal and pretty much all the same functionality is available except

03:48.920 --> 03:56.440
for having different font families for different text and also different font sizes, so those

03:56.440 --> 03:59.400
are the only limitations you technically should have by doing that.

03:59.400 --> 04:02.760
But for the purpose of these demonstrations, we're just going to show the graphical version

04:02.760 --> 04:06.120
of Emacs since that's probably the one most people will use.

04:06.120 --> 04:10.680
So on macOS, you can install Emacs pretty easily using Homebrew, a lot of people use

04:10.680 --> 04:13.640
Homebrew for installing packages on macOS.

04:13.640 --> 04:17.400
So there's a default recipe called Emacs, which can be installed using this command

04:17.400 --> 04:19.080
that we have here on the screen.

04:19.080 --> 04:23.520
There's also an alternative recipe called Emacs Plus, which I've heard about recently,

04:23.520 --> 04:28.880
which has some extra options that enable certain behavior that might be interesting to you.

04:28.880 --> 04:32.440
So if you want to have some more control over the Emacs build that you get installed on

04:32.440 --> 04:35.640
your machine, definitely check out the Emacs Plus package.

04:35.640 --> 04:40.880
You can also download a .app file for Emacs from the site Emacs4MacOS.com.

04:40.880 --> 04:44.280
If you just want to download something and just copy it over to your computer easily,

04:44.280 --> 04:46.280
that's also a possibility.

04:46.280 --> 04:49.360
For Windows, you can download Emacs directly from the GNU website.

04:49.360 --> 04:52.480
This link that I have here just takes you directly to the installer download, so you

04:52.480 --> 04:55.280
can click that if you look at the show notes.

04:55.280 --> 04:59.840
Also if you use MSIS 2, which I would guess is probably not so many of you, you can use

04:59.840 --> 05:04.600
Pacman and MSIS 2 to install Emacs and then you can run that as a program in Windows.

05:04.600 --> 05:09.240
And also if you use Choclity, which is probably more likely, you can use Choco install Emacs

05:09.240 --> 05:13.360
to install the latest version of Emacs on Windows, so that's pretty useful.

05:13.360 --> 05:17.560
Okay, so now that we've got Emacs installed, I assume you've stopped the video and gone

05:17.560 --> 05:22.240
and installed Emacs by now, let's talk about the basic concepts of Emacs so that you kind

05:22.240 --> 05:26.680
of understand what you're looking at whenever you start the editor and also how to sort

05:26.680 --> 05:29.440
of find your way around.

05:29.440 --> 05:35.280
So the user interface, so Emacs has a toolbar and a menu bar like many conventional graphical

05:35.280 --> 05:39.520
programs and they can be very useful at first to learn what functionality is available in

05:39.520 --> 05:40.520
Emacs.

05:40.520 --> 05:42.840
However, I don't think you're going to need them for very long.

05:42.840 --> 05:47.680
Once you actually get comfortable using Emacs and know how to find things yourself, you

05:47.680 --> 05:50.640
won't really need to use the menu bar very much.

05:50.640 --> 05:54.400
However, let's actually take a look at it and see what that looks like.

05:54.400 --> 05:59.560
So I'm going to jump over to another screen here where I have a very plain configuration

05:59.560 --> 06:03.200
of Emacs to use for demonstration purposes.

06:03.200 --> 06:05.880
Now this is not the basic in the box configuration.

06:05.880 --> 06:09.640
You can see that I have a dark theme turned on mainly because I don't want to blind you

06:09.640 --> 06:14.320
whenever I'm changing back and forth between the demo Emacs and my personal Emacs.

06:14.320 --> 06:18.440
So the only thing as things that I've done to the basic in the box configuration here

06:18.440 --> 06:22.720
is that I have set the font size to be a little bit bigger and I've changed the theme to be

06:22.720 --> 06:24.280
a dark thing.

06:24.280 --> 06:28.280
So everything else is just stock Emacs, what we're looking at right now.

06:28.280 --> 06:32.160
And as you can see, as I mentioned before, there is a menu bar up here at the top of

06:32.160 --> 06:36.200
the window and there's also a toolbar that has some buttons.

06:36.200 --> 06:40.160
These icons look a little bit small because I'm using kind of a high DPI screen, but on

06:40.160 --> 06:45.200
a normal DPI screen, these things will be pretty much normal size like you would expect.

06:45.200 --> 06:50.040
So the menus are typical to what you would see in other programs.

06:50.040 --> 06:52.520
We have a file menu for dealing with files.

06:52.520 --> 06:57.960
You can see that there's actions for opening files, opening directories, saving files,

06:57.960 --> 07:00.200
save as, close the file.

07:00.200 --> 07:04.040
And then also there's some window control commands here, which we'll talk about a little

07:04.040 --> 07:06.680
bit later, quit, etc.

07:06.680 --> 07:11.480
The interesting thing to note here is that each or many of the menu entries have the

07:11.480 --> 07:17.000
actual key binding that is associated with the action that this menu item performs.

07:17.000 --> 07:21.140
So this can be a very good way at first to get acquainted with the common key bindings

07:21.140 --> 07:26.380
that you will want to use in Emacs because Emacs is best used as a keyboard driven interface.

07:26.380 --> 07:29.840
You don't really want to use a mouse so much in Emacs.

07:29.840 --> 07:33.640
So learning the key bindings by looking at these different menus can be a really helpful

07:33.640 --> 07:36.680
way to get started fast learning those bindings.

07:36.680 --> 07:42.080
So the other thing to mention is that there are some of these menus that are here all

07:42.080 --> 07:46.800
the time and then there's some that get displayed whenever you're looking at a certain type

07:46.800 --> 07:47.800
of buffer.

07:47.800 --> 07:49.800
So in this case, we're looking at a Lisp buffer.

07:49.800 --> 07:52.960
So we get this Lisp interaction mode information.

07:52.960 --> 07:57.720
But if I were to open up another file, like let's say an org file, org mode file, you'll

07:57.720 --> 08:02.280
see that now we have this table menu, we have the org menu, we have the text menu.

08:02.280 --> 08:09.000
And those give you the mode specific actions that you might want to use for that mode.

08:09.000 --> 08:10.960
We'll talk about modes in a minute.

08:10.960 --> 08:15.080
And as usual, whenever you go to see all the actions here, you can see the key bindings

08:15.080 --> 08:17.520
that you might want to learn for those actions.

08:17.520 --> 08:22.240
So like I said, for any type of file that you're editing that has its own functionality,

08:22.240 --> 08:26.240
it's definitely good to take a look at the menu items for that to see what the possible

08:26.240 --> 08:30.640
actions are, how they're organized, and also the key bindings that you might be able to

08:30.640 --> 08:32.640
use with those.

08:32.640 --> 08:37.560
So the toolbar itself, I find it to be not super helpful just because it has, you know,

08:37.560 --> 08:41.000
common stuff you might want to do, I think the toolbar does change contextually based

08:41.000 --> 08:45.160
on things that you're doing, but I literally have never used it, I always turn it off.

08:45.160 --> 08:49.280
And that's the nice thing to know about both the menu bar and the toolbar, they can be

08:49.280 --> 08:51.240
disabled pretty easily.

08:51.240 --> 08:55.720
If you look at the series of videos I do called Emacs from scratch, I go through in the basically

08:55.720 --> 08:59.360
the first video how to turn this stuff off so that you have a more minimalistic view

08:59.360 --> 09:02.240
into Emacs, sort of like what you see right now in my configuration.

09:02.240 --> 09:08.480
So once you're ready to dispense with all of the extraneous UI elements, you can easily

09:08.480 --> 09:11.720
do that.

09:11.720 --> 09:16.360
So another interesting thing to note is that in the terminal version of Emacs, the menu

09:16.360 --> 09:18.280
bar actually is still there.

09:18.280 --> 09:20.720
And let's let's see if I can do this without breaking anything.

09:20.720 --> 09:24.200
So I'm going to try to run Emacs inside of a terminal right now.

09:24.200 --> 09:27.520
So Emacs dash Q dash NW.

09:27.520 --> 09:31.920
So we're running terminal mode Emacs inside of graphical Emacs sounds a little bit crazy,

09:31.920 --> 09:33.720
but that's what's happening right now.

09:33.720 --> 09:35.560
And then you see there is a menu bar up here.

09:35.560 --> 09:36.800
And I think the key is F10.

09:37.160 --> 09:42.760
So if I press F10, it actually shows the menu for the terminal mode of Emacs.

09:42.760 --> 09:45.200
I don't know all the key bindings to navigate through these.

09:45.200 --> 09:48.840
I think there's like control N, control P, things like that to move back and forth.

09:48.840 --> 09:53.000
But you do have all that same information still available to you the same way as you

09:53.000 --> 09:54.480
have in the graphical interface.

09:54.480 --> 09:58.760
So if you want to use terminal mode Emacs, then you still may have the ability to learn

09:58.760 --> 10:04.160
some things from the menu, which is pretty pretty cool, I think.

10:04.160 --> 10:05.640
So one last thing.

10:05.640 --> 10:11.000
I'm kind of doing this video coming from the perspective of someone who might be using

10:11.000 --> 10:13.400
some other editors or IDEs.

10:13.400 --> 10:16.880
So I'm going to try to relate things to what you might be expecting from those IDEs.

10:16.880 --> 10:20.920
And one thing that you probably have seen a lot that you don't see right now on my screen

10:20.920 --> 10:27.640
or in this other demo Emacs is there's no file tree on the left hand side of the window.

10:27.640 --> 10:29.880
And it's just something that Emacs doesn't have by default.

10:29.880 --> 10:34.120
Emacs predates that sort of UI paradigm of having a file tree on the left side.

10:34.120 --> 10:39.080
So it's something that you don't see, however, you can easily add that using community packages.

10:39.080 --> 10:43.520
And there's other ways to do file management and file browsing in Emacs that, in my opinion,

10:43.520 --> 10:46.080
are better than having that file tree always visible.

10:46.080 --> 10:48.920
So we'll talk about those in other videos.

10:48.920 --> 10:53.760
But just know that even though you don't see it right now, it's very easy to add that

10:53.760 --> 10:58.400
if it's something that you're used to having and you want to have.

10:58.400 --> 11:01.200
All right.

11:01.200 --> 11:06.320
So also in all these sections, usually I'm adding links to the Emacs manual in case

11:06.320 --> 11:08.680
you want to get some extra context about the things that I'm talking about.

11:08.680 --> 11:11.800
So definitely check out the links to the Emacs manual whenever you see those in case you

11:11.800 --> 11:13.640
do need some more information.

11:13.640 --> 11:14.640
Okay.

11:14.640 --> 11:20.160
So a very important concept in Emacs that's different than what you might know from typical

11:20.160 --> 11:25.080
graphical interface paradigms or desktop environments is windows and frames.

11:25.080 --> 11:29.200
So the concept of a window is different in Emacs than what you know.

11:29.200 --> 11:34.660
In modern desktop environments, usually a window is a window for a program that is managed

11:34.660 --> 11:37.280
by the desktop environment and not by the program itself.

11:37.280 --> 11:41.560
So usually it's a window that has like an X button, a minimize button, et cetera.

11:41.560 --> 11:44.920
And usually when you run a program, it launches a window that you see.

11:44.920 --> 11:49.440
However, in Emacs, a window is not a desktop window.

11:49.440 --> 11:54.360
It's actually a pane inside of the current Emacs window that you're looking at right

11:54.360 --> 11:55.360
now.

11:55.360 --> 11:57.000
So let me actually just demonstrate that for you.

11:57.000 --> 12:01.160
I'm going to do a horizontal split or vertical split.

12:01.160 --> 12:02.160
Let's see.

12:02.160 --> 12:03.160
It's a vertical split, I think.

12:03.160 --> 12:05.800
So basically I'm splitting that one window you're looking at into two.

12:05.800 --> 12:08.680
So now I have two windows visible side by side.

12:08.680 --> 12:14.200
I can also do a horizontal split and have another split top and bottom here on this side.

12:14.200 --> 12:18.960
So these are windows in the concept of Emacs.

12:18.960 --> 12:22.520
And the interesting thing about windows is that as you can see here, they all are showing

12:22.520 --> 12:26.120
the same buffer right now that obviously they can show different buffers, but we're all

12:26.120 --> 12:28.080
looking at the same buffer.

12:28.080 --> 12:32.200
All of the windows had their own location scrolling inside that buffer.

12:32.200 --> 12:37.240
So it's a way that you can see the same file side by side, maybe looking at different parts

12:37.240 --> 12:41.040
of it or looking at two different files and comparing them, whatever you want to do.

12:41.040 --> 12:47.600
So it's a very useful way to maximize the use of your screen real estate inside of Emacs.

12:47.600 --> 12:48.960
And that is windows.

12:48.960 --> 12:53.560
Now what you think of as a window is called a frame in Emacs.

12:53.560 --> 12:57.320
So this whole screen that you see right now, this is one Emacs frame.

12:57.320 --> 12:59.600
And it's possible to create multiple frames in Emacs.

12:59.600 --> 13:05.320
So if we go to our demo Emacs here, what I'm going to do is split this so that you can

13:05.320 --> 13:09.600
actually see, and this is my personal configuration that is loaded up right now, so that you can

13:09.600 --> 13:11.160
see whenever I create the second frame.

13:11.160 --> 13:15.680
So I'm going to use the file menu here and click New Frame.

13:15.680 --> 13:20.040
It's going to create a new frame, then I'll go and open the old frame on this side.

13:20.040 --> 13:25.160
So now we have basically two, what you might consider windows on the desktop environment,

13:25.160 --> 13:27.240
but these are actually two frames for Emacs.

13:27.240 --> 13:31.520
They all have their own file menus and toolbars, etc.

13:31.520 --> 13:33.240
That's how you can tell they're independent.

13:33.240 --> 13:37.040
However, they're not really independent in the sense that they share information from

13:37.040 --> 13:38.680
the same Emacs process.

13:38.680 --> 13:41.680
So as you see here, the same file is open in both.

13:41.680 --> 13:47.120
If I were to go looking for the scratch buffer or even this demo file that I've got set up

13:47.120 --> 13:49.320
for the configuration for this.

13:49.320 --> 13:53.960
These buffers are available in both of these frames, so whenever you try to switch to one

13:53.960 --> 13:58.520
of those, you're going to see it in both of the frames, which it might be a little bit

13:58.520 --> 14:02.980
different to you if you're used to having an editor or IDE that sort of is focused on

14:02.980 --> 14:06.320
loading one project per desktop window.

14:06.320 --> 14:09.720
In Emacs, you're going to have the same stuff in both windows.

14:09.720 --> 14:12.480
So that might take a little bit of getting used to, and you might think that, oh, well,

14:12.480 --> 14:15.920
I've got all these files open, how am I going to deal with keeping them separate?

14:15.920 --> 14:20.320
There are ways to deal with that, which we can talk about in another video, but it is

14:20.320 --> 14:22.320
kind of helpful in some ways.

14:22.320 --> 14:26.560
So for instance, if you want to have one frame open on one screen, if you have multiple monitors,

14:26.560 --> 14:30.280
you can have a frame open on another screen, and then you can share buffers between them.

14:30.280 --> 14:32.320
You can show the same buffer, different buffers.

14:32.320 --> 14:37.000
You have a lot more options in your workflow, so you're not really so limited by which frame

14:37.000 --> 14:39.880
open which file or which buffer, etc.

14:39.880 --> 14:44.600
So this is just one thing to know whenever you start to use Emacs is that you do have

14:44.600 --> 14:48.480
this possibility to use multiple frames.

14:48.480 --> 14:54.040
So in my case, I don't really use multiple frames in the traditional sense.

14:54.040 --> 14:58.280
I'm actually using multiple frames here because Emacs is my desktop environment, but that's

14:58.280 --> 14:59.800
like way out of scope for this discussion.

14:59.800 --> 15:03.880
So let's just focus on the fact that in most cases, you'll probably use only a single frame

15:03.880 --> 15:08.720
unless you'd like to have multiple frames as part of your workflow.

15:08.840 --> 15:14.000
And as usual, we have some links here to more manual information.

15:14.000 --> 15:20.800
Okay, so buffers are also a very important concept to understand in Emacs.

15:20.800 --> 15:23.000
What we're looking at right now actually is a buffer.

15:23.000 --> 15:28.040
A buffer is basically just an object in Emacs that holds text and other information to be

15:28.040 --> 15:30.440
displayed by a window.

15:30.440 --> 15:34.200
Also buffers can be used for things that aren't being displayed, that can be used for communicating

15:34.200 --> 15:38.120
with external processes or storing other information, writing out logs, etc.

15:38.120 --> 15:43.160
So it may not actually be something that gets displayed in a window, but in most cases,

15:43.160 --> 15:47.880
a buffer is going to be displayed in a window so that you can see it and interact with it.

15:47.880 --> 15:52.000
The most obvious example of a buffer is one that contains the contents of a file that

15:52.000 --> 15:55.920
you've opened so that you can edit it and then save it back to that file.

15:55.920 --> 16:00.680
But there are many other types of special buffers in Emacs that are used only for displaying

16:00.680 --> 16:05.000
temporary information or for even creating a full user interface.

16:05.000 --> 16:10.680
So for instance, the MAGIT package is a really excellent Git interface, the Git source control

16:10.680 --> 16:18.640
system interface for Emacs, and it does a custom buffer interface so that you can manage

16:18.640 --> 16:20.400
your code repository.

16:20.400 --> 16:22.160
Let me actually just show you an example of that.

16:22.160 --> 16:29.040
I'm going to open up the repository for my .files, and now this is a buffer that has some information

16:29.040 --> 16:34.300
about the Git repository for my .files, but if I go and move my cursor around and start

16:34.300 --> 16:37.980
pressing Tab on these sections, it actually expands them, and you can see the diff of

16:37.980 --> 16:41.820
some of the files that I've been changing in my .files folder, and you can also press

16:41.820 --> 16:47.500
other buttons like let's say LL to open up the history of changes in my repository.

16:47.500 --> 16:52.780
So basically, in Emacs, a buffer is not just something for editing files, it could be for

16:52.780 --> 16:57.580
creating a fully custom user interface to do some kind of task that you need to do.

16:57.580 --> 17:01.740
And many of the community packages that you'll find, or even stuff that's built into Emacs,

17:01.740 --> 17:05.620
still have these custom buffers that you will be looking at.

17:05.620 --> 17:09.900
And this is a normal buffer like anything else, and I can switch to that previous buffer that

17:09.900 --> 17:11.920
I was in, which is this presentation.

17:11.920 --> 17:16.060
So these things are all sort of on the same level playing field.

17:16.060 --> 17:22.460
Text files and user interface buffers can be switched between like anything else, basically.

17:22.460 --> 17:26.220
So this is actually one of the more confusing aspects of Emacs to beginners.

17:26.220 --> 17:30.060
It was very confusing to me at first, because on the screen right now, you can't really

17:30.060 --> 17:32.700
see which buffers are actually open in Emacs.

17:32.700 --> 17:36.040
You have to actually list the buffers before you find them.

17:36.040 --> 17:40.300
So it could be a little bit jarring at first, because you're like, I don't know where all

17:40.300 --> 17:41.300
my files are.

17:41.300 --> 17:43.580
I don't know what's open currently.

17:43.580 --> 17:47.740
Normally in an editor or an IDE, you would probably have like file tabs at the top that

17:47.740 --> 17:49.780
would show you which files are open.

17:49.780 --> 17:52.260
Now you can actually get that in Emacs.

17:52.260 --> 17:56.260
There is a command you can run called, I think this is in earlier versions, but it may only

17:56.260 --> 17:58.740
be in Emacs 27, so just keep this in mind.

17:58.740 --> 18:05.060
There is the global tab line mode, and then it will actually give you tabs that you can

18:05.060 --> 18:06.060
click on.

18:06.060 --> 18:08.140
They don't look so nice as they do in other programs.

18:08.140 --> 18:11.260
However, this is something that is built in the Emacs that you can use if you want that

18:11.260 --> 18:12.500
tab interface.

18:12.500 --> 18:16.660
However, I don't necessarily recommend that unless you really want it.

18:16.660 --> 18:21.400
It's better to get used to the buffer management commands and key bindings in Emacs.

18:21.400 --> 18:26.260
So for instance, Ctrl XB, which we'll talk about in a little bit, will bring up a buffer

18:26.260 --> 18:27.260
list.

18:27.260 --> 18:28.260
Was that the right one?

18:28.260 --> 18:29.260
Okay.

18:29.260 --> 18:30.260
Yeah.

18:30.260 --> 18:33.060
Ctrl XB will give you the ability to switch between buffers by completing them.

18:33.060 --> 18:37.860
So we'll talk about that in a minute, but basically there are ways in Emacs to get to

18:37.860 --> 18:40.940
all the buffers that are currently open very conveniently.

18:40.940 --> 18:45.860
So don't let it sort of discourage you if you don't really understand how buffers work

18:45.860 --> 18:48.660
at the outset whenever you start.

18:48.660 --> 18:52.660
So let's talk about a couple of important buffers that you will definitely see whenever

18:52.660 --> 18:54.420
you use Emacs.

18:54.420 --> 18:58.260
These are buffers that are, at least the first two will be open every time you use Emacs,

18:58.260 --> 19:01.220
and the last one is something that might show up when you're using it.

19:01.220 --> 19:03.660
The first one is the Scratch buffer.

19:03.660 --> 19:06.540
And let me just switch back to it really quickly.

19:06.540 --> 19:10.660
So the Scratch buffer is basically, I mean, the name Scratch kind of gives you a hint,

19:10.660 --> 19:15.860
but it's basically like a blank page of paper that you can use for writing down notes or

19:15.860 --> 19:19.260
just anything temporary that you need to copy and paste somewhere.

19:19.260 --> 19:24.100
I often use it for copying some text or writing down something that I don't really need to

19:24.100 --> 19:26.740
save to a file, but I just need to kind of write it down for a moment so I can use it

19:26.740 --> 19:28.660
some at some other point.

19:28.660 --> 19:30.340
So it's good for little notes.

19:30.340 --> 19:37.140
It's also already set up as a Emacs Lisp interaction mode so that you can write some simple Emacs

19:37.140 --> 19:38.140
Lisp code.

19:38.140 --> 19:40.460
Maybe if you're like trying out how to do something, or maybe you're trying to run a

19:40.460 --> 19:44.660
command a certain way, you can just use this as a temporary buffer for doing that.

19:44.660 --> 19:48.860
So it has some utility in that, in that way.

19:48.860 --> 19:53.740
There's also the Messages buffer, which is very useful because what it does is has a

19:53.780 --> 19:58.820
log of all the messages that have been written out for the user to see in Emacs.

19:58.820 --> 20:02.340
So there's this line down at the bottom of the screen, which we'll talk about in a moment,

20:02.340 --> 20:04.260
where messages get written.

20:04.260 --> 20:06.860
And if I were to try to scroll up in this screen right now, you'll see that there's

20:06.860 --> 20:11.340
a beginning of buffer message that gets written basically saying, I can't scroll up anymore.

20:11.340 --> 20:14.580
But the same message is being written to this message log.

20:14.580 --> 20:19.220
So if you ever see a string get written to the bottom of the screen, you can always go

20:19.220 --> 20:22.940
to this Messages buffer to see the history of things that were written to the screen

20:22.980 --> 20:24.580
in case you missed it.

20:24.580 --> 20:27.020
Or maybe you just want to go back and check to see what happened.

20:27.020 --> 20:28.820
So it can be very useful for that.

20:28.820 --> 20:32.060
Definitely take a look at the Messages buffer sometime just to see what kind of information

20:32.060 --> 20:33.900
is in there.

20:33.900 --> 20:38.540
And lastly, there is the Warnings buffer, which is basically a buffer that shows you

20:38.540 --> 20:41.740
like potential errors that have been encountered while running Emacs.

20:41.740 --> 20:43.620
I don't know if I have one right now.

20:43.620 --> 20:44.500
Yeah, I do.

20:44.500 --> 20:49.420
So basically I have some some errors here, warnings here basically that are being written

20:49.420 --> 20:50.980
from a package.

20:50.980 --> 20:55.740
And you might see this buffer pop up if there is any kind of error like that, it usually

20:55.740 --> 20:58.540
is pretty intrusive because they want you to see what's happening.

20:58.540 --> 21:02.340
So if it does pop up, don't worry because it doesn't necessarily mean anything catastrophic

21:02.340 --> 21:03.340
is happening.

21:03.340 --> 21:07.860
But it's something to keep in mind if you do see it.

21:07.860 --> 21:11.020
So now let's talk about the mode line.

21:11.020 --> 21:14.780
This is not really something that the name the name is not very obvious whenever you

21:14.780 --> 21:19.420
first hear it, but it's something that will remind you of something that you're used to

21:19.420 --> 21:22.980
from other editors.

21:22.980 --> 21:28.660
So in many editors or IDEs, what you'll see is there's a status bar at the bottom of the

21:28.660 --> 21:32.460
screen, which basically gives you the current status of the editor, maybe information about

21:32.460 --> 21:37.020
the line and column of where your cursor is in the currently open file, maybe what type

21:37.020 --> 21:38.820
of file it is, that sort of thing.

21:38.820 --> 21:42.700
Well, Emacs has something like that and they call it the mode line.

21:42.700 --> 21:45.860
So if you look down at the bottom of the screen here, you can see that we are currently in

21:45.860 --> 21:46.860
the messages buffer.

21:46.860 --> 21:49.220
I can click on this actually and it will switch the buffers.

21:49.220 --> 21:50.380
That's another way to switch buffers.

21:50.380 --> 21:54.540
But like I said, I don't recommend using the mouse very heavily in Emacs.

21:54.540 --> 21:57.540
You also have information about like where you are in the buffer right now.

21:57.540 --> 22:04.820
It says all because we are looking at a buffer where you can see everything at once.

22:04.820 --> 22:09.380
However, if you start scrolling in a buffer that's long, you'll see that we're like 8%

22:09.380 --> 22:10.660
ahead in the buffer.

22:10.660 --> 22:13.860
We're also currently on line 85.

22:13.860 --> 22:18.900
And then some packages will actually show you information like basically we're seeing

22:18.900 --> 22:20.820
that we're in a Git repository.

22:20.820 --> 22:21.820
We're on the master branch.

22:21.820 --> 22:22.820
That could be pretty helpful.

22:22.820 --> 22:26.460
This is something that also is pretty common in IDEs.

22:26.460 --> 22:28.500
And then you see what type of file we're in.

22:28.500 --> 22:31.300
So this is an org mode file.

22:31.300 --> 22:34.820
If you haven't used Emacs before and you haven't heard of org mode, it's basically like markdown

22:34.820 --> 22:38.820
files where you have a file with markup, but it's a lot more than that.

22:38.820 --> 22:42.500
So definitely check out my videos on org mode if you haven't heard of org mode before because

22:42.500 --> 22:44.740
it can do many, many things.

22:44.740 --> 22:48.700
However, this is basically just saying that we are in an org mode file.

22:48.700 --> 22:52.340
You can actually click on this to get the same menus down here that you get for the

22:52.340 --> 22:54.100
mode up here in the menu bar.

22:54.100 --> 22:57.580
So if you've turned off the menu bar in the future, but you still want to see those menus

22:57.580 --> 23:01.740
for this mode, you can still click on the mode here to see those menus, which is kind

23:01.740 --> 23:03.220
of helpful.

23:03.220 --> 23:05.380
So let's see what else.

23:06.100 --> 23:10.860
Yes, so one major difference between the mode line and the status bar compared to other

23:10.860 --> 23:15.860
IDEs is that you actually get one mode line per window inside of Emacs.

23:15.860 --> 23:19.180
Like I was saying before, windows are like panes inside of Emacs.

23:19.180 --> 23:23.700
And when you split the window, you'll actually get one mode line per window that's split.

23:23.700 --> 23:26.900
So in this case, I'm going to try to do a couple of splits.

23:26.900 --> 23:30.700
And we can see that this window below has its own mode line.

23:30.700 --> 23:34.460
And this one has its own mode line that only extends to the point where this window is

23:34.460 --> 23:35.500
visible.

23:35.500 --> 23:37.100
And this one also has its own mode line.

23:37.100 --> 23:39.380
And they all mentioned which file they have open.

23:39.380 --> 23:42.140
So I can basically switch to scratch buffer here.

23:42.140 --> 23:44.340
I can switch to the demo.el here.

23:44.340 --> 23:49.520
And you can see that we have all the mode lines have the name of the buffer visible on each

23:49.520 --> 23:53.820
of them, basically, and all that same information visible at the same time.

23:53.820 --> 23:58.740
So this is kind of good for being able to get information about what windows you have

23:58.740 --> 23:59.820
open at a glance.

23:59.820 --> 24:04.440
And also there could be window specific information that can be helpful for like jumping to different

24:04.580 --> 24:05.580
windows.

24:05.580 --> 24:07.240
Maybe if you have a package for that.

24:07.240 --> 24:10.920
So it's kind of useful, even though it maybe it does seem like it wastes some screen space,

24:10.920 --> 24:12.520
but I find it to be pretty useful.

24:12.520 --> 24:18.000
It's a nice way to sort of delineate what's happening on the screen.

24:18.000 --> 24:22.060
So also the last thing to mention is that the mode line is fully customizable and can

24:22.060 --> 24:26.440
be made to look very nice through your own configuration or from community packages.

24:26.440 --> 24:29.840
So all of this text here, you can change all of it.

24:29.840 --> 24:33.520
You can change the format of how the information is displayed, you can change whether it's aligned

24:33.520 --> 24:37.280
to the right or to the left, you can change the color, you can add icons, you can do basically

24:37.280 --> 24:40.600
anything you want to do with this line.

24:40.600 --> 24:45.720
As you can see here, I have a much more minimal and nice looking line that has different colors

24:45.720 --> 24:50.320
of text that has sort of more well presented information has icons.

24:50.320 --> 24:53.220
And this comes from a package called doom mode line.

24:53.220 --> 24:57.800
So definitely take a look at the different mode line packages that are available in the

24:57.800 --> 24:59.640
Emacs community.

24:59.640 --> 25:05.320
On one of the videos of Emacs from scratch, maybe video number two or three, I think.

25:05.320 --> 25:06.680
I show how to set up this mode line.

25:06.680 --> 25:09.880
So if you want to learn how to configure this to do that, definitely check out that series.

25:09.880 --> 25:15.700
But just keep in mind that even though the initial look of Emacs is kind of like old

25:15.700 --> 25:18.960
looking and maybe not so attractive, you can change all of that and make it look really

25:18.960 --> 25:21.480
nice without a whole lot of work.

25:21.480 --> 25:26.720
All right, so the Echo area and the mini buffer, these are also very important.

25:26.720 --> 25:28.640
And I sort of pointed to that before.

25:28.640 --> 25:33.240
So the Echo area is this line at the very bottom of the screen where messages get written

25:33.240 --> 25:34.800
whenever things happen in Emacs.

25:34.800 --> 25:37.860
So like if I try to scroll up in this buffer when it's already at the top, it will write

25:37.860 --> 25:40.440
out beginning of the buffer here in the Echo area.

25:40.440 --> 25:44.920
So this is the place where you're going to get a lot of information from packages.

25:44.920 --> 25:49.000
Like maybe if you're using an ID package and you put your cursor on a particular function

25:49.000 --> 25:52.640
name, it might give you the documentation for that function down in the bottom.

25:52.640 --> 25:56.600
It's just a very useful place for showing transient information that might be helpful

25:56.600 --> 25:58.560
to you at any given moment.

25:58.560 --> 26:03.240
However, that same area gets used for something else called the mini buffer and the mini buffer

26:03.240 --> 26:07.520
is basically another temporary interaction space for the user where you can be prompted

26:07.520 --> 26:10.840
for information or selections or anything like that.

26:10.840 --> 26:15.320
So for instance, if I try to open a file with the find file key binding, you can see now

26:15.320 --> 26:20.720
that in the Echo area, we now have a prompt for find file and it gives me the current

26:20.720 --> 26:22.480
directory to start from.

26:22.480 --> 26:26.560
And once I start moving my cursor around, you can see that I'm actually typing in this

26:26.560 --> 26:29.040
mini buffer at the bottom of the screen.

26:29.040 --> 26:33.680
Now this mini buffer actually can have multiple lines, not just that single line.

26:33.680 --> 26:39.360
So if you look at my buffer switching command, the one that I use in my configuration, this

26:39.360 --> 26:43.480
has multiple lines and I can actually move my cursor through them to select the different

26:43.480 --> 26:44.480
buffers.

26:44.480 --> 26:49.840
So basically this mini buffer area actually is very useful and a lot of your interaction

26:49.840 --> 26:53.360
with Emacs is going to happen through commands that use the mini buffer.

26:53.360 --> 26:56.560
So very useful things to understand.

26:56.560 --> 26:57.560
Also it's not very hard to understand.

26:57.560 --> 27:00.840
It's just a place at the bottom of the screen where things tend to happen.

27:00.840 --> 27:06.960
So check out these two entries in the Emacs manual if you want to learn more about those.

27:06.960 --> 27:11.880
Alright so commands, commands are a very important part of Emacs because this is where a lot

27:11.880 --> 27:15.040
of the useful functionality in Emacs comes from.

27:15.040 --> 27:19.000
So command in Emacs is basically a function that has some special information attached

27:19.000 --> 27:23.480
to it so that it gets treated as a user facing command, something that the user might actually

27:23.480 --> 27:26.120
want to execute.

27:26.120 --> 27:30.640
So a lot of this is like editing behavior, like if you want to delete a line or insert

27:30.640 --> 27:33.120
some text or whatever, those can all be done through commands.

27:33.120 --> 27:36.840
However, a lot of other useful things can be done through commands as well, which I'll

27:36.840 --> 27:39.600
show some examples for in a second.

27:39.600 --> 27:46.280
So in Emacs to run a command, you can either bind a command to a keybinding, which is already

27:46.280 --> 27:51.120
done in a lot of cases for built-in functionality, but you can run any command by name by using

27:51.120 --> 27:52.800
the alt x keybinding.

27:52.800 --> 27:58.600
So if I go over to the demo here, hit alt x, now you see in the echo area I get a prompt

27:58.600 --> 28:04.640
for the mx, which I'll explain in a minute, to basically type in the name of a command.

28:04.640 --> 28:10.280
Now this prompt can be completed with all the names of the commands that are in Emacs.

28:10.280 --> 28:15.000
So if I press tab to do completion, you're going to get a listing of all possible commands

28:15.000 --> 28:16.520
in Emacs at this moment.

28:16.520 --> 28:22.960
A lot of these commands come from Emacs built in, but any commands, any third-party packages

28:22.960 --> 28:26.640
or community packages you install will also add their own commands, and you can write

28:26.640 --> 28:28.560
your own commands too, which show up in this list.

28:28.560 --> 28:33.940
So basically anything that's possible to do by the user in Emacs will show up here.

28:33.940 --> 28:38.480
And one thing you might notice is that many of these commands have prefixes with a particular

28:38.480 --> 28:42.280
concept, like mouse, drag, etc.

28:42.280 --> 28:47.120
This actually makes it very easy to do completions only for a certain subset of the commands.

28:47.120 --> 28:54.320
So if I wanted to type in mouse-drag and press tab, it will complete to all of the mouse-drag

28:54.320 --> 28:55.320
commands.

28:55.320 --> 29:00.400
So this is a very nice way to look for commands that are related to a specific concept.

29:00.400 --> 29:06.520
So another one you could do is like find- to do all the basically the file visiting commands,

29:06.520 --> 29:07.520
etc.

29:07.520 --> 29:13.200
So this is a very useful way to find things that you can do in Emacs.

29:13.200 --> 29:18.640
So basically, like I said, not all of them are for editing.

29:18.640 --> 29:24.040
There's things that you can do for showing different behavior in Emacs or different interfaces,

29:24.040 --> 29:25.040
basically.

29:25.040 --> 29:27.640
So I wanted to show you a couple of these really quickly.

29:27.640 --> 29:29.560
So there's one called DRED.

29:29.560 --> 29:33.240
And like I mentioned before, there are better ways to do file listings in Emacs than just

29:33.240 --> 29:34.440
having a tree open.

29:34.440 --> 29:36.080
DRED is one example of this.

29:36.080 --> 29:39.000
It's basically a directory browser inside of Emacs.

29:39.000 --> 29:44.240
So if I use alt-x and type in DRED, press enter, it's going to ask me which directory

29:44.240 --> 29:45.680
that I want to open in DRED.

29:45.680 --> 29:49.480
I'm just going to leave it to be the one that I'm currently in and press enter.

29:49.480 --> 29:53.680
Now we get this buffer that basically shows us all of the files and directories that are

29:53.680 --> 29:58.440
inside of that directory and all the information like which user owns the file, which group

29:58.440 --> 30:04.680
owns the file, the permissions, the file change date, etc.

30:04.680 --> 30:07.960
Basically it looks like the output of LS on Linux, which is true because it actually

30:07.960 --> 30:10.040
does come from LS effectively.

30:10.040 --> 30:14.680
But you can navigate through this listing of files and press enter on any file to open

30:14.680 --> 30:16.040
it.

30:16.040 --> 30:19.320
And you can also navigate through directories.

30:19.320 --> 30:20.680
So this org files is a directory.

30:20.680 --> 30:24.520
If I press enter, it goes into that directory and I can open any of those files in this

30:24.520 --> 30:25.520
subdirectory.

30:25.520 --> 30:30.400
So you can even press enter on the dot-dot to go up one level as well.

30:30.400 --> 30:35.480
So it's kind of useful to be able to have this kind of browsing functionality built

30:35.480 --> 30:36.640
into Emacs.

30:36.640 --> 30:39.480
You can also do things like copying files, moving files, etc.

30:39.480 --> 30:45.040
So many of these commands will do extra things that are not just for editing files, they're

30:45.040 --> 30:48.800
going to be for useful behavior that you might want to see.

30:48.800 --> 30:50.080
So let's see, what else do I have?

30:50.080 --> 30:51.080
So calendar.

30:51.080 --> 30:52.080
So you can actually show a calendar.

30:52.080 --> 30:56.880
Run alt X, type calendar, and it will give you this nice calendar view at the bottom of

30:56.880 --> 30:57.880
the screen.

30:57.880 --> 31:00.560
There's a special little buffer here that you have keybindings in.

31:00.560 --> 31:05.120
So if you see that there's this right angle bracket, you can click that, but you can also

31:05.120 --> 31:09.800
type that character on the keyboard and go back and forward in your calendar to look

31:09.800 --> 31:12.920
at different days, which is pretty awesome.

31:12.920 --> 31:14.800
There's also a built-in shell in Emacs.

31:14.800 --> 31:19.200
So if I run alt X and type in E shell, you see it at the bottom of the screen, hopefully

31:19.200 --> 31:20.960
you noticed that.

31:20.960 --> 31:24.320
I press enter and now we get this embedded shell in Emacs.

31:24.320 --> 31:27.880
And the interesting thing about this shell is that it actually is written in Emacs Lisp

31:27.880 --> 31:29.480
and it emulates bash.

31:29.480 --> 31:35.080
So this shell works on GNU Linux, it works on macOS, and it works on Windows all the same

31:35.080 --> 31:37.320
way because it's written in Emacs Lisp.

31:37.320 --> 31:41.720
So you have basically a normal shell environment that you can use anywhere all the same way.

31:41.720 --> 31:47.080
So as you can see, through the power of commands in Emacs and also through the abilities that

31:47.080 --> 31:52.440
buffers provide, you can have all kinds of interactive experiences inside of these windows.

31:52.440 --> 31:56.600
So you basically have to go look for all the commands that you might want to use for that.

31:56.600 --> 31:59.560
And I'll give you one last one just for the sake of amusement.

31:59.560 --> 32:06.200
If you get bored one day and you want to play a game, just type in alt X and type in Tetris.

32:06.200 --> 32:10.000
And then we can just go ahead and play a little game of Tetris here in Emacs.

32:10.000 --> 32:15.400
I know it's probably kind of weird to think that a Tetris game comes bundled with Emacs,

32:15.400 --> 32:20.040
but you'd actually be surprised how many more games are actually included with Emacs, among

32:20.040 --> 32:21.040
other things.

32:21.840 --> 32:27.960
This is just something to keep in mind for just sort of proving to yourself that there's

32:27.960 --> 32:31.720
a lot of things that you can do with Emacs with the built-in functionality.

32:31.720 --> 32:35.280
So as I mentioned before, you can install new commands into Emacs using community packages

32:35.280 --> 32:41.200
and you can also write your own, we'll cover both these things in another video.

32:41.200 --> 32:45.720
So major and minor modes, another really important concept in Emacs.

32:45.720 --> 32:49.760
So in other editors, there's usually functionality that gets enabled for files with a particular

32:49.760 --> 32:50.760
extension.

32:50.760 --> 32:58.040
So you get Python programming functionality for Python dot py files that you open.

32:58.040 --> 33:00.560
So Emacs also has this.

33:00.560 --> 33:04.320
This functionality is provided through something called a major mode.

33:04.320 --> 33:09.160
So a major mode provides the functionality needed for a particular buffer, and it's usually

33:09.160 --> 33:12.880
activated based on the extension of a file that you open in that buffer.

33:12.880 --> 33:17.640
So like I said, if you open a dot py file, it would load the Python mode, etc.

33:17.640 --> 33:18.880
Sometimes this doesn't happen by default.

33:18.880 --> 33:23.520
Maybe you install a package from the community for a particular language, you may have to

33:23.520 --> 33:26.760
do a little bit of configuration before it will open for that file format.

33:26.760 --> 33:31.600
But a lot of the stuff that's built in the Emacs like dot EL files for Emacs list, etc.

33:31.600 --> 33:33.720
will open up a specific mode.

33:33.720 --> 33:38.920
And a lot of times what these modes do for file formats is they turn on syntax highlighting

33:38.920 --> 33:42.240
so that when you open a file, you actually get colorization of all the symbols in the

33:42.240 --> 33:46.040
file, which I'm sure you're used to from other editors or IDEs.

33:46.400 --> 33:52.200
However, there can be other functionality that gets enabled for custom modes.

33:52.200 --> 33:59.000
So like we saw before with that maget buffer that shows the get status of my repository,

33:59.000 --> 34:04.040
that actually comes from a major mode that gets enabled whenever I run that maget status

34:04.040 --> 34:05.040
command.

34:05.040 --> 34:11.400
So major modes are what basically provide the core functionality for a specific buffer.

34:11.400 --> 34:15.560
Now major modes often are activated using commands.

34:15.560 --> 34:20.200
So even if it is a mode that gets activated using a file extension is still going to activate

34:20.200 --> 34:21.480
a mode using its commands.

34:21.480 --> 34:26.320
So if we were to type in, let's say, org dash mode.

34:26.320 --> 34:30.880
So for any file that ends with the dot org extension, there's probably going to be some

34:30.880 --> 34:36.200
mapping in Emacs that says you need to run the org dash mode command, which turns on the

34:36.200 --> 34:42.600
major mode for org for org for org files, basically, so org mode.

34:42.640 --> 34:47.120
So basically, any buffer is going to have some modus loaded some major modus loaded.

34:47.120 --> 34:50.640
And if there's nothing that's specified for a particular mode, it might get a sorry for

34:50.640 --> 34:53.880
a particular type of buffer, it might get loaded up in what's called the fundamental

34:53.880 --> 34:59.280
mode, which basically just means there's really no special functionality added.

34:59.280 --> 35:03.440
The last important thing to mention about major modes is that there can only be one

35:03.440 --> 35:06.840
major mode active in the buffer at any given time.

35:06.840 --> 35:12.200
So if you try to start a major mode in a buffer, actually, let's let's go do an example of

35:12.200 --> 35:13.400
that.

35:13.400 --> 35:15.920
So I'll load up Emacs.org.

35:15.920 --> 35:17.440
Let me close this really quickly.

35:17.440 --> 35:18.440
Whoops.

35:18.440 --> 35:21.920
I'm not using my normal keybinding, so I'm a little bit lost sometimes in this configuration.

35:21.920 --> 35:22.920
All right.

35:22.920 --> 35:24.720
So right now we're in org mode, right?

35:24.720 --> 35:26.400
So you can see down here that this is org.

35:26.400 --> 35:28.800
I think if I hover over it, does it say org mode?

35:28.800 --> 35:29.800
No.

35:29.800 --> 35:31.480
But what if I change it to another mode?

35:31.480 --> 35:33.960
Like, let's say I run a command to change it to some other mode.

35:33.960 --> 35:35.200
So there's like a Python mode.

35:35.200 --> 35:37.080
Let's just run Python mode and see what happens.

35:37.080 --> 35:38.840
I'm going to press enter.

35:38.840 --> 35:43.040
And what's going to happen is all the syntax highlighting in this buffer changes.

35:43.040 --> 35:45.680
The mode down here in the mode line also changes.

35:45.680 --> 35:49.840
And that's because we changed to Python mode, even though this is not a Python file.

35:49.840 --> 35:51.160
So you can basically do whatever you want.

35:51.160 --> 35:53.080
You can start any mode at any time.

35:53.080 --> 35:54.680
It just may not have the right results.

35:54.680 --> 36:00.040
So that just goes to show that Emacs doesn't really have a specific understanding other

36:00.040 --> 36:04.120
than what's put into the configuration about what mode is possible for any file.

36:04.120 --> 36:06.240
You can activate whatever mode at any time.

36:06.240 --> 36:09.680
So I'm just going to go back to org mode here, run that command again to put it back

36:09.680 --> 36:10.680
into org mode.

36:10.680 --> 36:11.800
And now we're back to it.

36:11.800 --> 36:16.160
So that also demonstrates that there can only ever be one major mode at any given time.

36:16.160 --> 36:20.120
I was able to change the major mode, but there was only one active.

36:20.120 --> 36:25.680
So there's a different type of mode that can be active where many are active at the same

36:25.680 --> 36:30.200
time, both in the single buffer that you're looking at and globally across Emacs.

36:30.200 --> 36:32.360
And that's called a minor mode.

36:32.360 --> 36:36.920
So minor modes typically provide helpful functionality that isn't specific to the major mode of the

36:36.920 --> 36:38.420
current buffer.

36:38.420 --> 36:41.800
They're usually things that you might need to customize your workflow or even change

36:41.800 --> 36:44.720
the way that things are displayed in Emacs.

36:44.720 --> 36:50.000
So many things that come from third party or community packages are going to provide

36:50.000 --> 36:54.120
minor modes because they're sort of like extra functionality that are really helpful.

36:54.120 --> 36:56.840
There's plenty of minor modes that are built into Emacs and we're about to look at one

36:56.840 --> 36:58.440
of them.

36:58.440 --> 37:00.800
All right.

37:00.800 --> 37:06.600
So there is a mode called HL line mode, which will cause the current line that your cursor

37:06.600 --> 37:09.120
is on in the file to be highlighted.

37:09.120 --> 37:14.200
So what I'm going to do is in the, in the mini buffer, I'm going to press alt X to pull up

37:14.200 --> 37:20.120
the command prompt basically, and I'm going to type in HL dash line dash mode, press enter.

37:20.120 --> 37:24.320
And now you can see that we have a nasty yellow color highlighting the current line where

37:24.320 --> 37:29.160
my, where my cursor is, and that's because I turned on the HL line mode to highlight

37:29.160 --> 37:30.160
the current line.

37:30.160 --> 37:34.560
However, if we switch to another buffer, you'll see that the current line is not actually

37:34.560 --> 37:35.560
being highlighted.

37:35.560 --> 37:41.440
Let me find a better one that that demonstrates this a little bit more clearly.

37:41.440 --> 37:44.080
And now this one does not actually have the highlighting turned on.

37:44.080 --> 37:48.680
And that's because I only turned on that highlighting for the other buffer.

37:48.680 --> 37:52.040
So that means that a minor mode can be turned on only in one buffer.

37:52.040 --> 37:56.920
However, some minor modes provide a global version of the minor mode so that they get

37:56.920 --> 37:59.480
turned on in all, all buffers.

37:59.480 --> 38:06.840
So now if I were to run the global HL line mode by using alt X and press enter, it turns

38:06.840 --> 38:08.200
it on in this buffer.

38:08.200 --> 38:13.040
But then if we go to the messages buffer, you can see that it's also on there as well.

38:13.040 --> 38:17.480
So minor modes can be turned on locally or globally, and you can have many minor modes

38:17.480 --> 38:20.280
turned on at the same time, either locally or globally.

38:20.280 --> 38:25.000
So minor modes are a way to sort of add additional functionality in wherever you want it to be

38:25.000 --> 38:26.080
at any time.

38:26.080 --> 38:29.520
You can also turn them on and off conditionally for various buffers.

38:29.520 --> 38:32.320
You have a lot of flexibility in what you can do with that, which is a lot different

38:32.320 --> 38:34.520
than other editors that you might know of.

38:34.520 --> 38:38.480
Usually when you install an extension in a particular editor, it's always on or always

38:38.480 --> 38:40.880
off depending on what you set it for.

38:40.880 --> 38:44.960
So in Emacs, you have a lot more flexibility on how you deal with that.

38:44.960 --> 38:46.920
All right.

38:46.920 --> 38:50.480
So now that we've covered the basic concepts of Emacs and sort of the high level of things

38:50.480 --> 38:54.000
that you're going to want to know to use it effectively, let's talk about the key bindings

38:54.000 --> 38:59.160
that you can use to do things that you would normally want to do on a daily basis.

38:59.160 --> 39:03.080
So as I mentioned before, Emacs is definitely the most efficient and productive when you

39:03.080 --> 39:06.120
focus on keyboard based control.

39:06.120 --> 39:09.880
The key binding system, frankly, is one of the most flexible and customizable I've ever

39:09.880 --> 39:10.880
seen.

39:10.880 --> 39:14.960
And once you start like really getting into learning how to customize your key bindings

39:14.960 --> 39:19.040
in Emacs, you're going to realize how limited other programs are by comparison because it's

39:19.040 --> 39:20.840
just so good.

39:20.840 --> 39:23.840
So today, I'm just going to cover some basic key bindings that you're going to want to

39:23.840 --> 39:26.320
learn for basic everyday use.

39:26.320 --> 39:30.320
And in future videos, I'm going to go much more in depth about the different areas of

39:30.320 --> 39:36.080
Emacs and show you what the key bindings are to use those effectively so that basically

39:36.080 --> 39:40.640
you can make your text editing and your general workflow a lot more efficient.

39:40.640 --> 39:45.160
But before we start talking about all those key bindings, let's first understand how key

39:45.160 --> 39:48.320
bindings are represented in Emacs.

39:48.320 --> 39:52.200
So you're often going to see people write out key bindings in a very specific format

39:52.200 --> 39:56.520
whenever they're trying to tell you what keys to press, especially in Emacs itself.

39:56.520 --> 40:01.040
If you go look into the menu bar, you're going to see that these strings here have a very

40:01.040 --> 40:04.680
specific syntax to tell you what keys are being pressed.

40:04.680 --> 40:07.880
And I'm going to explain to you what those things mean right now.

40:07.880 --> 40:14.760
So when you see a character like capital C, and hyphen and then another character after

40:14.760 --> 40:19.120
it that basically means you need to hold control and then press the letter that follows.

40:19.120 --> 40:24.400
So in this case, it's control C, because we have the capital C for control dash lower

40:24.400 --> 40:26.840
case C for lower case C.

40:26.840 --> 40:30.820
So basically hold the control key and press the letter C, and which is what I just did.

40:30.820 --> 40:35.160
So now it basically waits for the next part of a key binding that starts with control

40:35.160 --> 40:41.640
C. Now, you will also see key bindings where there will be a pair of things like C dash

40:41.640 --> 40:44.000
x C dash s.

40:44.000 --> 40:49.460
What this means is that you hold control, press X, and then you either release control

40:49.460 --> 40:54.600
and then press it again and then press S, or you just keep holding control and you press

40:54.600 --> 40:57.480
X and then S while holding control.

40:57.480 --> 40:59.600
I prefer the latter option.

40:59.600 --> 41:04.660
I'm sure that many Emacs user prefer that because it's way more efficient and easier

41:04.660 --> 41:09.680
on the fingers to not just like the control X control S, you know, like lifting your finger

41:09.680 --> 41:14.200
every time, it's going to really tire you out and make your fingers hurt if you do that.

41:14.200 --> 41:19.240
So when you see a sequence of keys like this where they're, they all start with the same

41:19.240 --> 41:23.800
letter, just keep holding that letter and what while you press the other letters in

41:23.800 --> 41:28.720
the sequence, so hold control, press X, then S for this key binding.

41:28.720 --> 41:32.560
Now there's a little bit of a difference in the next one where the first one has control

41:32.560 --> 41:36.840
attached to it for control X, but then the second letter is by itself, it doesn't have

41:36.840 --> 41:38.800
anything else with a hyphen in front of it.

41:38.800 --> 41:44.080
What this means is hold control, press X, then release control, then press the letter

41:44.080 --> 41:45.400
B by itself.

41:45.400 --> 41:50.400
So there's many cases where you will see bindings that have a control character used for the

41:50.400 --> 41:53.360
first letter and then no control characters used for the second letter.

41:53.360 --> 41:55.440
So definitely keep that in mind.

41:55.440 --> 41:58.400
That one, those ones can be a little bit harder to hit sometimes because you have to release

41:58.400 --> 42:02.880
your, your pinky off the character, the control key at the right time, but you'll get used

42:02.880 --> 42:04.560
to it.

42:04.560 --> 42:06.680
And then you have things like MX.

42:06.680 --> 42:10.980
So this is actually the alt X binding that we've been talking about before.

42:10.980 --> 42:14.640
And if you look at this little table down here or this little list of things here, what

42:14.640 --> 42:19.640
I'm basically telling you is that C stands for control and M stands for alt, but that's

42:19.640 --> 42:24.320
because Emacs predates keyboards that have the alt key.

42:24.320 --> 42:27.960
Emacs was written for a system that has a different set of keys all together and one

42:27.960 --> 42:29.440
of them was called meta.

42:29.440 --> 42:34.000
So in this case, M stands for meta, but really in modern keyboards, this is represented by

42:34.200 --> 42:34.800
alt.

42:34.800 --> 42:38.960
So anytime you see the capital M, think of the alt key.

42:38.960 --> 42:44.680
Similarly, the capital S is for shift and the lowercase S is for the super key, which

42:44.680 --> 42:47.520
is also one of those keys from those old keyboards.

42:47.520 --> 42:51.360
And this one actually is the windows key on conventional keyboards these days, or maybe

42:51.360 --> 42:56.680
if you have a Linux specific computer, that's the, the Linux penguin key, or maybe if you

42:56.680 --> 43:00.560
have a Mac, that's going to be the option key, I think is what it turns out to be.

43:00.560 --> 43:02.320
It could also be command.

43:02.560 --> 43:07.800
I don't remember which one it shows up as on macOS keyboards, but usually on normal

43:07.800 --> 43:09.320
external keyboards, it would be the windows key.

43:10.200 --> 43:10.480
Okay.

43:10.880 --> 43:14.920
So, so basically the meta X is the one we were talking about before.

43:14.920 --> 43:20.280
However, you can have very funky key bindings that have a combination of modifier keys that

43:20.280 --> 43:21.720
are being used in the sequence.

43:21.760 --> 43:25.840
So in this case, we have alt G and then control S.

43:25.840 --> 43:27.720
And those are actually pressed in sequence.

43:27.720 --> 43:32.280
So you would hold alt, press G, release alt, then hold control, press S.

43:33.320 --> 43:36.760
You don't see these quite as often because they're a little bit harder to press, but

43:36.760 --> 43:41.680
usually they're provided in places where you, this is an action you wouldn't do frequently.

43:41.880 --> 43:46.760
And it's just there in case you want a key binding to do that action, if you have to,

43:46.760 --> 43:49.720
for some reason, if you don't want to have to let go look for the command in the command list.

43:50.400 --> 43:55.960
So just keep in mind that if you see a binding that has this kind of differing modifiers,

43:56.080 --> 44:00.120
that is an actual key binding is just you have to do the modifiers separately.

44:02.480 --> 44:06.320
OK, so you can also combine things like you can have control alt and then a letter

44:06.400 --> 44:07.360
press at the same time.

44:07.360 --> 44:13.760
So here we have an example of CMS, which would be control and alt held down and press S

44:13.760 --> 44:17.120
at the same time, you can do like alt shift D, etc.

44:17.120 --> 44:21.680
So these modifier keys can be combined in a lot of different ways to have more key

44:21.680 --> 44:22.960
bindings that get created.

44:23.640 --> 44:29.640
But most often you'll see these sequences instead where you have like a control X control

44:29.640 --> 44:35.320
S or something like that, because in EMAX, there's sort of a meme about how EMAX basically

44:35.320 --> 44:38.920
you have all these crazy key bindings where you hold control and hit like five letters.

44:39.200 --> 44:43.720
It is kind of like that, but that's just because once you start getting into the usage flow

44:43.720 --> 44:47.960
of EMAX, you realize that it actually is a lot more efficient using key bindings like

44:47.960 --> 44:50.120
this than it is to like go clicking around in menus.

44:52.480 --> 44:57.960
All right, so the last important thing to mention about key bindings in EMAX is that

44:58.440 --> 45:03.080
there are two prefixes that are very commonly seen that you should understand.

45:03.080 --> 45:09.800
Now a prefix is basically any key sequence that has a another key press after it.

45:09.800 --> 45:15.000
So when we saw this control X control S, control X in this case is actually a prefix.

45:15.000 --> 45:20.520
So if I press control X right now, EMAX will be waiting for the next key in the sequence

45:20.520 --> 45:24.760
because it knows that all other key bindings with control that start with control X, they

45:24.760 --> 45:27.240
have some other thing that needs to come after it.

45:27.240 --> 45:29.880
So this is now considered to be a prefix.

45:29.880 --> 45:34.680
And now basically it's waiting for me to press the next key in the sequence.

45:34.680 --> 45:38.600
So if I press control S, then it tells me no changes need to be saved because that's

45:38.600 --> 45:40.440
actually the key binding for saving a file.

45:41.320 --> 45:44.520
So it waits as long as it needs to for you to actually press the next key.

45:44.520 --> 45:48.120
So don't worry if you have these sort of key sequences, you don't have to press them really

45:48.120 --> 45:51.160
fast. You can press them at your own speed until you get more comfortable using them.

45:51.880 --> 45:53.240
So back to the point.

45:53.880 --> 45:59.720
Control X is the prefix for all of EMAX primary key bindings for like opening files,

45:59.720 --> 46:04.120
saving files, changing the window configurations in EMAX, creating windows,

46:05.160 --> 46:07.560
creating frames, all that kind of stuff.

46:07.560 --> 46:11.640
If you press control X, there's a lot of bindings that show up under that.

46:11.640 --> 46:15.480
You can actually see all these here using the which key package which I have installed.

46:15.480 --> 46:18.200
This is not actually something that comes by default in EMAX.

46:18.280 --> 46:23.480
If you were to go into this this EMAX here, the demo EMAX press control S X,

46:23.480 --> 46:26.120
you can see down in the echo area, it's basically just waiting for you to press

46:26.120 --> 46:29.240
something else and it doesn't tell you what the possibilities are.

46:29.800 --> 46:32.760
So there are definitely packages that make this a lot easier.

46:32.760 --> 46:34.840
Check out the EMAX from scratch series.

46:34.840 --> 46:37.880
I think the first one or two videos I show how to set that up if you're interested.

46:39.400 --> 46:44.600
Also, control C is another very common key prefix where if you press control C,

46:44.600 --> 46:49.320
you will get the key bindings for the current major mode that's active and maybe some other

46:49.320 --> 46:55.720
minor modes that are active and usually there's those are supposed to have control keys bound

46:55.720 --> 47:01.880
to the things that come next in the sequence so that you don't pollute the the the key map.

47:02.520 --> 47:06.200
But usually this control C is also meant for user key bindings.

47:06.200 --> 47:10.120
So usually you would be able to go in your configuration and set up key bindings under

47:10.120 --> 47:13.800
the control C prefix for things that you want to do for your own workflow.

47:13.800 --> 47:20.040
So just keep in mind that this prefix control C is shared between modes and the user configuration.

47:20.040 --> 47:23.080
So you may have some overlap there sometimes you'll have to watch out for.

47:25.080 --> 47:29.240
Okay, so very important thing how to open and save files.

47:29.240 --> 47:34.600
To open a file in EMAX, you can press control X and then control F for the find file command.

47:34.600 --> 47:38.680
So if I use control X, you can see down here in the echo area is waiting for the next character.

47:38.680 --> 47:43.320
So then I'll press control F. And now the mini buffer is asking me for what file to load.

47:43.320 --> 47:47.400
So I can type in init.el. This actually will do completion if you press tab.

47:47.400 --> 47:52.520
So if I press tab just the directory path, just press it twice and it will give you all the

47:52.520 --> 47:57.400
files that are available under that path. You can even complete the directory names as well.

47:57.400 --> 48:01.880
Press tab there, it will complete that file. If I type in I in, which I know there's a file

48:01.880 --> 48:06.760
that starts with that in this folder, press tab, it will complete to init.el. Then you press enter

48:06.760 --> 48:12.920
and it will load the file. So that's how you open a file in EMAX to be edited control X control F

48:12.920 --> 48:19.160
to run the find file command. Now, if you want to make some changes to a file and then save it,

48:19.160 --> 48:24.840
you need to know how to save the file. And the binding for that is control X control S.

48:24.840 --> 48:30.200
So in this buffer, I can go and change something. So let's just say I add a little comment here.

48:30.200 --> 48:35.720
Hello, I can use control X and then control S. And then you can see here in the echo area,

48:35.720 --> 48:39.880
it says it wrote that file out of that path. And like I mentioned before, you can go to the

48:39.880 --> 48:47.400
messages buffer if you want to control X control B messages. And then you can see that it wrote out

48:47.400 --> 48:51.640
saving file the file path and then it says that it completed saving that file. So anytime you

48:51.640 --> 48:56.360
save a file, it's actually going to write that out to the messages log so that you can see that there

48:56.360 --> 49:04.360
whenever it happened. And also, another thing you might want to do in certain editors is use a

49:04.360 --> 49:09.320
save as command to save the current file to another the current buffer to another location.

49:09.320 --> 49:13.240
Maybe it's one file that you're editing, but you want to duplicate it to another file,

49:13.240 --> 49:18.600
you can use control X control w for the right file command, which will allow you to save it to

49:18.600 --> 49:24.600
another buffer. So I'm here in this init.el file right now. If I use control X control w, it will

49:24.600 --> 49:30.920
ask me what file I want to write this to. I can say dim one not demo. Let's see test that yell,

49:31.000 --> 49:38.200
press enter. Now it has saved this file buffer to the file test.el. And now you can see that the

49:38.200 --> 49:43.080
buffer name has also changed along with that because now it's going to treat this as that new

49:43.080 --> 49:47.560
file going forward as you're editing it. However, the old file still does exist. And you can get

49:47.560 --> 49:54.040
back to it if you want to. So those are the very basic file operations that you would want to know

49:54.040 --> 49:57.320
about one. Yeah, I'll cover that in a minute. Alright, so

50:00.920 --> 50:05.480
now let's talk about switching buffers. So as I mentioned before, you can have a bunch of buffers

50:05.480 --> 50:11.400
open in Emacs at the same time, but you might not actually know which ones are there. So to switch

50:11.400 --> 50:17.160
buffers, you can use the control X B binding. Now keep in mind that this is the control X and then

50:17.160 --> 50:23.000
the single letter B binding and not like the holding control for each one of them before. So

50:23.000 --> 50:26.600
I'm going to use control X and I'm going to release control and I'm going to press B.

50:27.720 --> 50:32.680
And then I press the wrong key at that moment, control X B. Now it gives me a prompt in the

50:32.680 --> 50:37.400
mini buffer in the echo area saying switch the buffer. So you can press tab to get a list of

50:37.400 --> 50:42.280
all the buffers that are available. And if you click on any of these, it will automatically switch to

50:42.280 --> 50:49.160
the the buff, the buffer that you clicked on. But you can also press D or T basically press T and

50:49.160 --> 50:55.560
then hit tab to complete anything that has T E in it and then press T S press enter. And then we

50:55.560 --> 51:01.880
are now into the test that yell buffer. So that's one way to quickly search to a switch to a buffer

51:01.880 --> 51:05.720
if you know the name of the buffer. But sometimes maybe you don't remember what the name of the

51:05.720 --> 51:09.880
buffer is, or you don't really remember which buffers you have open. So there is a way to list

51:09.880 --> 51:15.960
those buffers if you use control X control B. So instead of using the single letter B by itself,

51:15.960 --> 51:22.600
actually use control this time control X control B. And that will give you this buffer list view

51:22.600 --> 51:26.840
where you can see all the buffers that are open you can see which file they correspond to you

51:26.840 --> 51:32.520
can see what the major mode is you can see the size etc. Then you can also click on a file to

51:32.520 --> 51:37.880
open it. You can also use your mouse sorry your keyboard and press enter on a file to open that

51:37.880 --> 51:43.240
as well. So that's just another way to see all those buffers. And keep in mind you can still

51:43.320 --> 51:47.480
click buffers in the menu up here and seal those buffers here as well to switch between them.

51:47.480 --> 51:51.880
Those two key bindings that I mentioned to you just now are both represented here as well control X

51:51.880 --> 51:58.920
B and control X control B. So you can see those easily. Also one couple things I did not mention

51:58.920 --> 52:03.400
in the notes here but there's a previous buffer and next buffer if you want to just quickly switch

52:03.400 --> 52:09.480
between them control X left arrow control X right arrow. So if I use control X right arrow,

52:09.560 --> 52:13.720
I can sort of cycle through the buffers that are available. So control X left control X left.

52:14.520 --> 52:17.960
So basically you just get through all them really easy. So basically if you want to go back and

52:17.960 --> 52:23.240
forth between one buffer and another control X right arrow control X left arrow basically.

52:23.240 --> 52:26.760
So you're just sort of cycling through that that chain of buffers basically.

52:28.040 --> 52:31.960
I should add that to the the notes here. Let me actually make a note for myself

52:33.320 --> 52:38.040
to do next pre buffer. Okay, let's see if I remember to do that. If you see this in the show

52:38.040 --> 52:43.960
notes afterward you'll you'll realize I failed myself. Okay, cutting and copying text. Very common

52:43.960 --> 52:48.760
thing you might want to do inside of your editor. However, this is an area that always confuses

52:48.760 --> 52:54.040
new Emacs users because the concepts here are different than what you expect. So many programs

52:54.040 --> 52:59.080
across Linux, Windows and Mac OS. Well, let's just say Linux and Windows because that's the ones

52:59.080 --> 53:06.440
that do this the most. Use control C to copy text and control X to copy the current text and then

53:06.440 --> 53:13.320
delete it, which is a cut operation. This is not the case in Emacs. So as we mentioned before,

53:13.320 --> 53:18.040
control C and control X actually have special meaning in Emacs. So they can't be used for

53:18.040 --> 53:23.720
cut and copy. So they have a different strategy for doing this. And I think this is actually because

53:25.080 --> 53:31.400
cut and copy and paste in Emacs predates the common cut and paste metaphors in UI. So

53:32.200 --> 53:35.720
Emacs has his own idea for it because it came before all those things happen.

53:36.920 --> 53:43.000
So in Emacs, to kill text means that you're going to cut it basically. I don't know why they use

53:43.000 --> 53:46.600
the word kill for that, but that's what it's called. So that's what we're going to use. So it

53:46.600 --> 53:51.560
basically copies the text and then deletes it. The most thing common thing you're going to do is to

53:51.560 --> 53:56.520
kill a region, which is basically a selection of text you've made, either just to delete it or to

53:56.600 --> 54:02.520
cut it to be paced somewhere else. So to kill a region, first you need to select some text to

54:02.520 --> 54:07.080
make a region to be killed. And you can begin, you can make one by marking the region using

54:07.080 --> 54:13.400
control space. So in this buffer, I'm going to hit control space, and then I'm going to start

54:13.400 --> 54:19.400
moving my arrow keys around. And you can see how the text is being highlighted now. So that basically

54:19.400 --> 54:25.800
creates a selection or a region in Emacs terminology. I think you can also hold shift.

54:26.600 --> 54:30.600
Okay, that actually doesn't work in this mode. But just just keep in mind, you can use control

54:30.600 --> 54:34.920
space and then use the arrow keys to start selecting a region. There are other commands

54:34.920 --> 54:39.800
for marking text based on words or sentences, etc. We'll go into that in a different video.

54:39.800 --> 54:43.320
For now, just know that control space will start the selection wherever you want it to be.

54:43.560 --> 54:52.760
Let's see, did I actually put the binding in here for? Yeah, I didn't. Okay, so control w is what

54:52.760 --> 54:59.000
you would use once you make the the selection to actually cut the text. So I'm going to use control

54:59.000 --> 55:04.680
space. And then I'm going to start making a selection here, then I'm going to press control w.

55:04.680 --> 55:08.360
And that will delete that text, but I actually copied it at the same time. So it could be

55:08.360 --> 55:14.360
inserted somewhere else. So now we have some text that has been copied to something called the kill

55:14.360 --> 55:21.400
ring, which is basically a list of things that have been copied before. And we can now paste it,

55:21.400 --> 55:24.920
which I'll show you in the next section. The last thing I want to mention to you is that this kill

55:24.920 --> 55:29.080
ring actually has some interesting functionality. And we're going to talk about it in a future

55:29.080 --> 55:35.240
episode whenever I have some time to do that. So to paste that text that we copied, you can use

55:35.320 --> 55:41.720
control y to yank. I don't know why yank is the terminology that's being used for paste in Emax,

55:41.720 --> 55:45.640
but that's what it is. So if you ever see something talking about yanking text in Emax,

55:45.640 --> 55:50.600
that's basically pasting text. So in this buffer, I'm going to move my cursor down,

55:50.600 --> 55:55.240
I'm going to press control y for yank, and that's going to paste back in that text that I had

55:55.240 --> 56:00.520
previously cut from this buffer. So just just goes to show you that there is cut and paste or cut,

56:00.520 --> 56:04.760
yeah, cut and paste, but it just has different terminology in Emax, which is a little bit confusing.

56:04.760 --> 56:11.960
And different keybindings. So once again, control space to select text, control w to cut it,

56:11.960 --> 56:21.480
control y to paste it. Alright, so if you are so tied to the old

56:22.200 --> 56:28.280
cut copy paste keybindings that are used all the time in Emax, or sorry, in Windows and Linux,

56:28.280 --> 56:34.360
you can actually turn those on using something called CUA mode. I don't remember what CUA

56:34.360 --> 56:38.600
actually stands for, but basically what it does is it makes it so that when you select text,

56:38.600 --> 56:46.120
it actually makes control c control x. Actually, you do cut and copy, and it makes control v do

56:46.120 --> 56:51.720
paste the way that you expect. So the way that you can turn that on very easily is to go to the

56:51.720 --> 56:59.560
options menu in Emax, and then click this use CUA keys. And once I do that, I can go and select

56:59.560 --> 57:05.880
some text using control space, and then use control c to copy, and then go somewhere else,

57:05.880 --> 57:10.440
and then press control v to paste. So it does what you expected to do. It acts exactly like

57:10.440 --> 57:17.800
you expect from a more sort of conventional desktop editor. So you could also, I think,

57:17.800 --> 57:22.520
use shift and the arrow keys. Well, it was working for me earlier. I don't know what caused it to

57:22.520 --> 57:27.160
work, but it seemed like there was a shift arrow keys functionality that would do shift selection,

57:27.160 --> 57:32.360
but it may be because I'm in an org mode buffer, and it doesn't work that way. But just know that

57:32.360 --> 57:38.120
if you want that functionality, you can easily turn it on using the CUA keys. Now you can also use

57:38.120 --> 57:42.920
the CUA mode command in the command list. If you press enter, you see me typing down here in the

57:42.920 --> 57:48.440
echo area. Press enter here, it turns on CUA mode in the way that you expect. So that's another way

57:48.440 --> 57:55.960
to turn on the same functionality. Okay, undo and redo another very important thing for editing text

57:55.960 --> 58:01.320
in a text editor. It's also another thing that's different than what you might be used to. So the

58:02.040 --> 58:07.960
undo key binding by default is control underscore, but you can also use control whichever slash this

58:07.960 --> 58:11.880
is. I can never remember whether it's forward or backslash, but just use that slash character that

58:11.880 --> 58:18.840
is on the same key as the question mark on the US keyboard. And you can undo a change that you made.

58:18.840 --> 58:24.840
So let's let's try to write some texts here. So I'm going to say hello. And then another test.

58:26.360 --> 58:31.960
So now what I'm going to do is press control underscore. And it's going to undo that edit,

58:31.960 --> 58:36.040
press control underscore again, it's going to undo that edit, press control underscore again,

58:36.040 --> 58:40.760
it's going to undo that edit that can keep undoing until I go back to the state of the file

58:40.760 --> 58:45.000
whenever it was saved last. So you probably want to know how to do a redo. Well, this is a little

58:45.000 --> 58:52.520
bit weird, because what you actually have to do is press control G first, which will then reset the

58:52.520 --> 58:58.040
undo state and change the undo direction. So now if I was to press control underscore, it's going

58:58.040 --> 59:04.840
to redo the things that I just undid, as you can see, and then as soon as I get back to the place

59:04.840 --> 59:12.200
where I was at the the the, the, if I've reversed the undo history all the way back to where it was

59:12.280 --> 59:16.120
and start pressing on control underscore again, it starts going undo again. So it goes back in

59:16.120 --> 59:22.200
the other direction again. So it's a very different model of undo, and it's kind of confusing to

59:22.200 --> 59:27.400
people. There are ways to install different undo methods in an E max that you can use. We'll go

59:27.400 --> 59:31.880
into that in a different episode, but just try to learn this one for now and see how it goes for

59:31.880 --> 59:45.000
you before you go try to find another one. So let's see. Okay, so another thing that is actually

59:45.000 --> 59:49.800
kind of useful that you might need to know that is not very obvious at first is how to cancel an

59:49.800 --> 59:54.440
operation. So sometimes you're going to run a command that you're going to want to cancel it

59:54.440 --> 59:58.040
before it completes either it's going to do some long running operation in the background or it's

59:58.120 --> 01:00:02.120
going to have a prompt that comes up that you no longer want, you're going to want to get rid of

01:00:02.120 --> 01:00:08.920
that somehow. For this, you can press control G. This is basically the quit command in the keyboard

01:00:08.920 --> 01:00:14.360
quit command in E max. And it interrupts any active command and brings you back to a normal

01:00:14.360 --> 01:00:19.800
state in E max. So let's say I use control X control F to use find file, you can see we have

01:00:19.800 --> 01:00:25.240
the prompt down here in the echo area. I press control G, it cancels a prompt and I go back to

01:00:25.240 --> 01:00:30.600
editing in the normal way. Also, if you run anything that seems to be taking a long time or

01:00:30.600 --> 01:00:34.920
maybe it hangs E max, if you see E max freeze, and you can't actually click on anything or

01:00:34.920 --> 01:00:38.920
press any keys, just try to keep pressing control G because sometimes that will actually

01:00:39.800 --> 01:00:45.800
kick out whatever hang is happening in E max and make it so that you can continue your work.

01:00:45.800 --> 01:00:50.600
So don't don't don't freak out if E max ever hangs just keep spamming control G just hit

01:00:50.600 --> 01:00:55.240
control G until something happens. And then if you hit control control G like 10 times and

01:00:55.240 --> 01:01:01.240
nothing happens, then you could probably kill E max but control G control G can get you out of a jam

01:01:01.240 --> 01:01:09.160
in a lot of cases. So just one last thing, learning more key bindings in the editor,

01:01:09.160 --> 01:01:13.320
there's a lot of ways to do that. As we talked about before, looking at the menu bar and seeing

01:01:13.320 --> 01:01:18.120
what keys are represented there is a great way to figure out what kinds of key bindings are

01:01:18.120 --> 01:01:23.400
available as well as what kind of operations are available. There's also the command describe

01:01:23.400 --> 01:01:29.480
bindings. So if you go into the demo here, use alt x to get the command list type in describe dash

01:01:29.480 --> 01:01:36.440
bindings, press enter, it's going to give you a listing of all of the active bindings currently

01:01:36.440 --> 01:01:42.280
in E max for this buffer basically. So globally and in the buffer. And there is a lot of key

01:01:42.280 --> 01:01:47.960
bindings here. And there's a lot of commands that are bound. So a lot of these that are like

01:01:47.960 --> 01:01:53.480
single control plus letter keys are actually movement keys or editing keys inside of the

01:01:53.480 --> 01:01:57.800
buffer. So these are very useful to look at to see like what things you could do. So like for

01:01:57.800 --> 01:02:03.400
instance, control in, if I put my cursor here and use control in, it takes me to the next line.

01:02:03.400 --> 01:02:07.480
If you look here, there's control P for previous line. So you can use control P for previous line.

01:02:07.480 --> 01:02:11.960
So that's actually a way to navigate through the file without having to move your hand to the arrow

01:02:11.960 --> 01:02:16.680
keys. So once you start looking at this list, you might learn a lot of things that might save you a

01:02:16.680 --> 01:02:22.440
lot of time whenever you're editing in E max. So this is a great way to learn a lot of things that

01:02:22.440 --> 01:02:28.920
you don't know about already in E max. There's also describe key. So for instance, if you

01:02:30.040 --> 01:02:35.160
if you've heard about a particular key binding, or maybe like there's you press something by accident,

01:02:35.160 --> 01:02:40.600
you don't know what it did, you can use describe key, the describe key command. And what it will

01:02:40.600 --> 01:02:46.120
do is prompt you for a key to to look up, you can put give it whatever key binding you want.

01:02:46.840 --> 01:02:50.440
And then it will tell you what command is bound to that key. So let me just do that right now,

01:02:50.440 --> 01:02:57.560
I'm going to use alt X, type in describe dash key, press enter. Now I'm going to type in control x

01:02:57.560 --> 01:03:02.680
control f. And then it gives me this documentation page, it says that this key is bound to find

01:03:02.680 --> 01:03:08.920
file and we give you all the documentation about the find file command. So in E max, there's all

01:03:08.920 --> 01:03:12.680
this help information that's built in. And this is one thing you can do you can you can find out

01:03:12.680 --> 01:03:18.600
what command a key is bound to is very helpful. So keep that in mind in case you want to know what

01:03:18.600 --> 01:03:23.880
a particular key does. And since we've already mentioned it, let's just mention it a little

01:03:23.880 --> 01:03:30.040
bit more the help system in E max is fantastic. The entire E max manual is built into E max,

01:03:30.040 --> 01:03:33.960
you can read it inside of E max to navigate around it, you can find out all kinds of information

01:03:33.960 --> 01:03:38.440
about E max there. And then there's more functions that start with the word describe like we saw

01:03:38.440 --> 01:03:43.400
about before, that will tell you about all the functions and variables in E max packages,

01:03:43.400 --> 01:03:47.080
everything else you could possibly want to know about something that's defined in E max,

01:03:47.080 --> 01:03:51.480
there's all these describe functions that will help you with that. If you go to the help menu,

01:03:52.360 --> 01:03:55.880
all these functions are here. So all the describe functions you might want to know about are listed

01:03:55.880 --> 01:04:02.440
here. There's also the read the E max manual items, if you click that, it gives you the

01:04:02.440 --> 01:04:06.760
entire E max manual here, you can click all the different links for the different topics.

01:04:06.760 --> 01:04:10.360
There's also a frequently asked questions. And there's a tutorial you might want to check out

01:04:10.360 --> 01:04:15.880
that can help you learn how to edit things in E max or like the basic key bindings. So there's a lot

01:04:15.880 --> 01:04:21.320
of great stuff in this menu that you should check out to learn more about E max built in,

01:04:21.320 --> 01:04:24.440
you don't have to go to the internet to find this stuff, it's just right here with you anywhere you

01:04:24.440 --> 01:04:31.320
go without internet. Okay, so the last topic for today is how do you configure E max? Well,

01:04:31.320 --> 01:04:35.480
we're not going to go very in depth here because I go really in depth in other videos about this,

01:04:35.480 --> 01:04:39.320
but I'm going to tell you that the main two ways that you would configure E max so that you know

01:04:39.320 --> 01:04:46.040
about them. First of all, there is the customization UI. And this is a full user interface for

01:04:46.040 --> 01:04:52.440
customizing any option in E max. And the interesting thing here is that it not only shows you the

01:04:52.440 --> 01:04:56.600
options that are built in the E max, it shows you the options for any external package you install

01:04:56.600 --> 01:05:01.080
to say any any community package you install, all the options are going to show up here in the same

01:05:01.080 --> 01:05:07.560
user interface. So to get to that, use alt x and type in customize, press enter. And now you get

01:05:07.560 --> 01:05:12.040
this interface, which basically tells you about all the different types of settings that are available

01:05:12.040 --> 01:05:17.400
in E max, you can click on those to jump into them, and learn more about all the settings, they

01:05:17.400 --> 01:05:21.320
all have descriptions. So like the cool mode settings are here in this cool mode group.

01:05:22.120 --> 01:05:25.640
But you can also search for a setting. So say for instance, you want to know how to set your

01:05:25.640 --> 01:05:31.400
tab width for indentation, you type in tab width, and press enter here in this box. And then you

01:05:31.400 --> 01:05:37.320
can see there's a tab with setting. And here you can edit this value instead of two or something,

01:05:37.320 --> 01:05:42.760
then click apply for it to be applied for the current session. I believe there's a way to

01:05:42.760 --> 01:05:46.840
save it for all sessions here as well. But I don't see it at the moment, we're going to go more

01:05:46.840 --> 01:05:52.360
in detail about how to use this UI in the future. Now personally, I don't use this UI because I

01:05:52.360 --> 01:06:00.440
prefer to use the other option for E max, which is the init.el file. This file could have other

01:06:00.440 --> 01:06:06.760
names, but most commonly people know it as the init.el file. And basically what this is, is actual

01:06:06.760 --> 01:06:11.560
E max list code that is used to configure your editors. That means you're setting all the configuration

01:06:11.560 --> 01:06:17.400
variables using code, and you're loading packages using code. And you're also you could define your

01:06:17.400 --> 01:06:23.160
own functions that connect to these packages using code in this file. In my opinion, this is the best

01:06:23.160 --> 01:06:27.960
way to configure E max because you can then check in your configuration to source control and share

01:06:27.960 --> 01:06:33.560
it between machines or at least, you know, have it saved somewhere so that you don't lose it.

01:06:34.520 --> 01:06:40.120
So I have an entire video series called E maximum scratch that will tell you how to do this. If

01:06:40.120 --> 01:06:44.920
you want to learn more about how to configure E max and get a modern looking setup like I have on

01:06:44.920 --> 01:06:50.760
the screen right now, using the community packages and the stuff that's built into E max by editing

01:06:50.760 --> 01:06:56.680
your init.el file. And just to show you an example of that, we actually did open and init.el file

01:06:56.680 --> 01:07:02.920
before. So let's just see if we can go back to that. Oh, I think I renamed it to test.el. But

01:07:02.920 --> 01:07:07.960
it's still the same file. Basically, it's just a file containing a bunch of code that is doing the

01:07:07.960 --> 01:07:12.920
configuration for E max. Now, I know that people say, Oh, it's Lisp. It's kind of weird. It has

01:07:13.000 --> 01:07:16.920
all these parentheses. Well, when you start getting used to writing E max list for the

01:07:16.920 --> 01:07:21.240
purpose of configuration, you realize it's not that complicated. So don't let that be something

01:07:21.240 --> 01:07:25.160
that stops you from trying to learn how to do this, because you're going to get a lot of joy

01:07:25.160 --> 01:07:30.280
from learning how to configure E max properly and setting a setting it up exactly the way that you

01:07:30.280 --> 01:07:34.120
like it. So you're going to have a file that's going to have a lot of lines of configuration,

01:07:34.120 --> 01:07:38.360
and it's all going to be yours. So that's one of the best things about E max in my opinion.

01:07:38.360 --> 01:07:46.520
Okay, so what's next? Well, I think this video should give you very much of what you need to

01:07:46.520 --> 01:07:51.000
know to get started using E max and to be productive with it on a daily basis. However, we weren't

01:07:51.000 --> 01:07:54.840
able to cover many things in depth, because we were just trying to scratch the surface and get

01:07:54.840 --> 01:08:01.080
you get you started. So I'm going to start making more videos in a new series called E max essentials,

01:08:01.080 --> 01:08:04.680
which will cover many of these topics at a deeper level. So you can go from being a beginner to E

01:08:04.680 --> 01:08:10.600
max to an advanced user by the end of all the videos that we cover these topics. And I've already,

01:08:10.600 --> 01:08:14.200
like I mentioned, been making a ton of other videos about E max on this channel. So you

01:08:14.200 --> 01:08:17.960
should definitely check out the other playlist if you want to learn a lot more while I'm building

01:08:17.960 --> 01:08:25.800
out the E max essential series. So as I mentioned before, excuse me, the E max from scratch series

01:08:25.800 --> 01:08:31.320
is all about configuring E max from the ground up using the init.el file. There's also the E max

01:08:31.320 --> 01:08:35.320
tips series, which are like independent videos about various packages you might want to try out,

01:08:35.320 --> 01:08:40.440
things you might want to do. There's E max desktop environment, which is a very fun series where we

01:08:40.440 --> 01:08:45.320
turn E max into a complete desktop environment. So you can do your window management, and basically

01:08:45.320 --> 01:08:51.640
live in E max full time, which is basically what I do now. If you're used to using IDEs,

01:08:51.640 --> 01:08:56.200
integrated development environments for various programming languages, check out the E max IDE

01:08:56.200 --> 01:09:00.440
series. There's not many various videos there at the moment. But the idea is that I'm going to

01:09:00.440 --> 01:09:05.800
continue making more videos showing specific configurations for different languages so that

01:09:05.800 --> 01:09:10.840
you can use E max as an IDE for those languages. There's a lot of great packages that make this

01:09:10.840 --> 01:09:15.480
possible. So you should definitely check that out. There's also the E max mail package, where I talk

01:09:15.480 --> 01:09:20.040
about how to basically do your email in E max. So that may sound kind of weird, but it's possible.

01:09:20.040 --> 01:09:24.360
So definitely check that out too. But then if you want to learn more about the language for

01:09:24.360 --> 01:09:29.880
configuring and extending E max called E max list, I'm currently working on a series called

01:09:29.960 --> 01:09:32.920
learning E max list that will teach you about that language and how to use it.

01:09:34.120 --> 01:09:37.320
And lastly, if you want to know a little bit more about what E max is capable of,

01:09:37.320 --> 01:09:40.680
capable of, check out the video I did at the beginning of this year called five reasons to

01:09:40.680 --> 01:09:45.080
learn E max in 2021, where I give a little bit of a demo of some of the other cool things that

01:09:45.080 --> 01:09:51.160
you can do with E max. It might be interesting for you to see that. So definitely check out the

01:09:51.160 --> 01:09:54.440
show notes for this episode. I know we covered a lot of things, but I'm going to have all the

01:09:54.440 --> 01:09:59.640
stuff here in the show, excuse me, in the show notes for you to check out. And definitely subscribe

01:09:59.640 --> 01:10:04.760
to the channel and click the bell to be notified whenever we post new videos. And when I go live

01:10:04.760 --> 01:10:10.760
every Friday, so we do a live stream every Friday, where the community of system crappers gets together

01:10:10.760 --> 01:10:16.520
and talks about E max, basically other interesting topics that have come up that week. So it's a

01:10:16.520 --> 01:10:21.960
very fun environment. So you should definitely go come check that out. Also, I'm sorry, I'm losing

01:10:21.960 --> 01:10:28.040
my voice from the long video here. Check out the link to the discord below. If you want to get some

01:10:28.040 --> 01:10:32.600
help getting started with E max, join the discord, we're all there hanging out. There's about 700

01:10:32.600 --> 01:10:37.880
people there now. And we're all you know, enthusiasts of E max, we all love using E max. So

01:10:37.880 --> 01:10:42.920
definitely come check that out and and join us there is a lot of fun. Okay, before my voice

01:10:42.920 --> 01:10:49.960
goes completely, let me just say thank you to my sponsors. So these amazing people have decided to

01:10:49.960 --> 01:10:54.120
sponsor the work that I'm doing making these videos about E max, new gigs and everything else

01:10:54.120 --> 01:10:57.720
that we talked about on this channel. I'm very thankful to them for doing this because it gives

01:10:57.720 --> 01:11:01.960
me a lot of motivation to keep going. And it just makes me feel like people actually appreciate what

01:11:01.960 --> 01:11:07.400
I'm doing. So I'm very thankful to all of them. So if you are interested in becoming a sponsor of

01:11:07.400 --> 01:11:11.080
this channel, definitely check out the two links that I have below one for GitHub sponsors and

01:11:11.080 --> 01:11:16.360
one for Patreon, you can do whichever one you choose. Also, I have a link to PayPal if you want

01:11:16.360 --> 01:11:20.840
to do one time donations. Anything you choose to do is fine. Otherwise, this content is free and

01:11:20.840 --> 01:11:25.720
definitely come and check it out be a part of the community. And it costs you nothing. So anyway,

01:11:25.720 --> 01:11:29.880
thanks a lot for watching. I hope this video was helpful for you to get started with E max.

01:11:29.880 --> 01:11:33.160
Definitely let me know in the comments if you have any further questions of things that I could

01:11:33.160 --> 01:11:49.080
cover in future videos. And until next time, thanks a lot for watching. Happy hacking.

