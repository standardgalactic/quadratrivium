start	end	text
0	6560	Hello. Welcome to today's coding challenge. In today's coding challenge, I am going to
6560	13080	attempt to program this, the game of life cellular automaton in JavaScript. I'm going
13080	18200	to use the P5.js framework. What's running right here right now is a processing example
18200	22120	using the Java programming language that I made several years ago as part of the nature
22120	26680	of code book. Now, if you're interested in that, you can also look at my whole playlist
26680	32680	about this thing that I can't pronounce called cellular automata, the plural of automaton.
32680	36800	And I do have some videos that give you some historical background and looking at different
36800	43280	Wolfram's elementary CA and some exercises and things. But I'm really just showing examples
43280	48040	and talking about the systems in those videos. In this video, I'm going to try to just start
48040	53360	from no code and finish with the simulation. Hopefully it's going to work. It generally
53440	59640	doesn't, so don't get your hopes up. But I would encourage you to do some background
59640	67560	reading. This is the first sort of public appearance of the game of life as created
67560	73800	by John Conway, a mathematician from an article in Scientific American in 1970 by Martin Gardner.
73800	78040	Of course, you can always refer to the Wikipedia page. I'm going to need this, which is going
78040	82720	to, which outlines the rules for how the system behaves. And you can also think that there's
82760	88040	a lot of possible stuff. There's all these kinds of interesting, repeating patterns and
88040	92600	different types of things that you can create and do with the game of life simulation. But
92600	97000	I'm going to program a simple version of it. Hopefully that will happen. Then at the end,
97000	100360	I'll talk about some variations that you might think about. And maybe someday I'm going to
100360	105640	try to like make one in 3D or something like that. Okay, so let's get started. Here's what
105680	113680	we need. A cellular automaton is a system of cells that exist in a grid. It could be
113680	120160	in one dimension, two dimensions, three dimensions. The game of life system is one that exists
120160	127160	in two dimensions. And the idea is that you have generations. So if this is generation
128440	134040	zero, I'm going to run some computation on the system of cells on a grid, and then I'm
134080	141080	going to have a new set of cells on that grid. And that's going to be generation one. So
144720	150480	the cells that exist on that grid all have a state. That's part of a CA system. So that
150480	155320	state could be a floating point number. It could be a kind of animal. You could really
155320	158240	imagine in a lot of different ways. I'm going to do something very simple with the game
158680	164280	of life is a simple system of discrete states, two states, zero or one, on or off, alive
164280	171280	or dead. So you could imagine a configuration of this being something like this. And for
173200	180200	each time, each tick, each generation, each frame of animation, I evaluate each cell one
181360	188120	by one and get a new state based on the previous state. So let's say I'm trying to do this
188200	193680	cell. I need this cell's new state. I'm going to get a new state based on this state and
193680	198160	its neighbors. So what are its neighbors? That's up to us to find. It could be its left
198160	202760	neighbor, its right neighbor. It's only its neighbors to its left. But in the game of
202760	208560	life system, its neighborhood are the eight cells surrounding it. So it's this three by
208560	213600	three area, one, two, three, four, five, six, seven, eight. So I need to evaluate all those
213600	219800	cells and decide whether it should stay as a zero or turn into a one. And the reason
219800	226800	why it's called the game of life is the rules. The rules for how we move from one generation
227600	234320	to another resembles some type of like biological process that you might think about population
234320	240120	or bacterial growth. And the idea is that a cell that is surrounded by neighbors that
240120	246480	aren't alive cannot stay alive. A cell surrounded by neighbors that are alive can come to life
246480	251560	or stay alive. And a cell that's surrounded by too many neighbors cannot stay alive due
251560	256800	to overpopulation. And we can go back to the Wikipedia page and read those rules precisely
256800	263800	right here. So any live cell with fewer than two neighbors dies as if caused by underpopulation.
264520	268760	Any live cell with two or three neighbors lives onto the next generation. Any cell with
268760	273960	more than three neighbors dies by overpopulation. And any dead cell with exactly three, three
273960	278200	live neighbors becomes a live cell. So this is written as if by reproduction. So this
278200	282800	is written in a somewhat of a confusing way. I think I could simplify this. I think we
282800	289800	could say like, let's say the cell is dead. It's a zero. It's only going to change to
290080	297080	a one if it has three live neighbors. Then it changes to a one. Otherwise it stays a
297080	304080	zero. A one is going to stay a one unless it has less than two, less than two live and
307320	314320	greater than three live. Then it dies. So birth reproduction happens with exactly three
317040	323480	neighbors. Death happens with fewer than two or greater than three. Now I don't know if
323520	330520	I got those numbers right. Let's go check the Wikipedia page again. Thank you. Thank you.
330520	337520	I hit the sound effect by accident. Live cell with fewer than two live neighbors dies. Yes,
339440	344160	less than two dies. Live cell with two or three neighbors lives. I don't care about
344160	347600	that. I'm not going to kind of not care about change. Then it stays the same. I can kind
347600	352400	of ignore that. Live cell with more than three neighbors dies. Yep. That's what I've got
352440	358440	over there. Then any dead cell with exactly three live neighbors becomes alive. Okay,
358440	362520	so I've got those rules correct. So now, what do I need? Hello, you're over there. I'm
362520	368120	going to go back over here. I need something. All I need to make this program work is a
368120	373200	data structure to store this grid. This is where I'm kind of having like a bit of a
373200	378040	headache and I'm really not sure what to do. The way that I've always done this in previous
378040	381560	examples is by using something called the two dimensional array. I think I have a video
381600	386960	tutorial about that somewhere, which I will link to in this video's description. But two
386960	391120	dimensional arrays are kind of not so much fun in JavaScript. They can become a little
391120	394600	bit weird and there really is no such thing as a two dimensional array. A two dimensional
394600	400080	array is a construct of our own human mind saying like it's really just an array of arrays,
400080	405400	which makes sense. This is an array, you know, each row is an array and then the grid is
405400	409400	an array of rows or each column is an array and the grid is an array of columns. So I
409440	412680	think I'm going to do it that way with a two dimensional array. I just should say that it's
412680	416560	a little bit awkward two dimensional arrays in JavaScript, but I'm going to go ahead anyway.
416560	421600	So the first thing that I want to do in this program is just make a two dimensional array
421600	429600	that stores a random collection of zeros and ones. So let's go do that. I'm going to go to the
429600	434600	code and you know what I'm going to do? I'm going to actually just write a function. I'm having
434600	438600	like weird deja vu. I probably did this in another video somewhere. I'm going to just write a
438640	443720	function called make two D array and I want a certain number of columns and rows. Okay,
443720	449480	because that way I can just say, I can have a global variable called the grid. I'll call it
449480	456280	grid. And I could just say grid equals make two D array. And I could say I want a 10 by 10 grid.
456280	460560	So this is kind of what I want to do. I'm going to just farm out the making of the array to
460560	465680	another function. And oh, I know I do remember doing this because I'm going to write this in a
466640	471200	whole coding challenge or video. I'm going to do this in a kind of horrific way. And then
471200	475640	everyone's going to give me all these amazing ES6 JavaScript fancy ways of doing this whole
475640	484080	function in one line of code. So I'm going to come back and do that. Okay, so now let me see
484080	490560	here. So what I need to do is first is I need to have some sort of array. And it's going to be,
491400	500960	it's going, this is always where I get confused too. Do I want the columns? The point of using a
500960	504960	2D array is that eventually at some point I'm going to be able to say something like grid,
504960	514280	you know, index two, index three. And I guess I usually think of this as x and y and x being the
514280	520560	columns. So I want this, the outer array, if I'm thinking about arrays of arrays, to be every
520560	529240	single column. Every single, no, no, that's what x is column, right? And then the y is everything
529240	539000	over. Okay, so I'm going to do that. So I'm going to make a new array of columns. And then I am
539000	549720	going to say four, let i equals zero, i is less than that array dot length, i plus plus, make a
549720	558760	array index, i is a new array of rows. Again, I know there are all sorts of shorter and fancier
558760	563840	automatic functions for generating and configuring arrays like fill and map and reduce and all that
563840	573200	kind of stuff, even more. So I'm going to do this. And then I am going to, what I want to do here now
573200	584760	is I also want to fill them with, I guess I could fill it with values down here. So maybe I won't,
584760	589400	maybe I'll actually just do that. So this is going to make me an empty 2D array with nothing in it.
590200	601640	And then I think what I want is, I probably want to have these global variables. I know this is a little bit
601640	610960	goofy that I'm doing this. And then what I'm going to do, I could make a, and I'm going to say let i
610960	621920	equals zero, i is less than columns, i plus plus. And then I'm going to do j is less than zero, j is less
621920	634360	than rows. I'm going to do a nested loop so that I can say grid i, j equals floor random two. This is going
635360	642160	to give me a nested loop, this is a nested loop. So I make this sort of like 2D array structure that's
642160	648840	empty. And then I iterate over every single column and every single row. And I fill each one with a random
648840	656960	number zero or one. And I'm just, now I'm going to run this. And I'm going to go back to, I'm going to go to my
656960	665440	code. Okay, cannot read property zero of undefined. Well, you know what would be nice if I actually return that
665440	672040	array. So they make 2D a function array. It's making this array. It's also got to return it so that I can get it back
672040	679560	here. And then now if I look at grid, I'm going to see it's an array of arrays. And I forgot there's this wonderful
679560	689360	thing you can do like console.table grid, which shows me now I can see it here. So we can see this is that two
689360	694720	dimensional array. That's what it looks like. It's a two dimensional array with rows and columns filled with zeros and
694720	705880	ones. So step one is finished. Now what I need to do is I need some mechanism to every frame of animation
705880	712400	iterate over every single spot and set a new spot. Actually, you know what I should do first? I need to render this
712400	720080	thing. I want to be able to see it as a grid of red and blue squares or black and white squares or zeros and ones of
720080	725200	the screens, any number of ways you could render this. I'm going to do it in the traditional way of a grid, the
725200	731880	square, the cell of the grid is black at the value of zero is white at the value of one or vice versa. Okay, what I
731880	741600	want to do now is I'm going to add a draw function. And I'm going to be using this loop over and over again. I'm going to
741600	747840	add this loop. Right, because I'm always going to anytime I want to look at everything, I'm going to go through all the
747840	754160	columns and all the rows. It's been pointed out in the chat that there are some JavaScript libraries and packages that
754160	759400	manage grid systems and neighbors for you. It'd be great to use those. I'm going to just do it all without that right now
759400	768040	just to kind of like figure it out. I'm going to say background zero. And I'm going to create a canvas. I think to make my
768040	776640	life easier for the moment, I'm going to make the canvas also a square. And then what I need to do is I need to draw I want to
776640	784880	draw a rectangle add an x and a y with some width and height. And it's going to they're going to be squares. So some width
784880	798560	and width. And that value is going to be the width of the I should probably calculate the number of columns and rows. Here's the
798560	805600	thing. I'm going to redo the way that I'm doing this. So I'm not going to actually have a fixed number of columns and rows. I'm
805600	813200	actually going to do like a scale or I'm just going to have a variable called resolution. I'm going to say that's 10 or 40. I'm
813240	823240	going to say that's 40. So that'll be 10 by 10. And what I'm going to do is I'm going to say columns equals the width of the
823240	831440	canvas divided by resolution, rows equals the height of the can canvas divided by resolution. This way I can kind of
831440	839160	dynamically you'll see what I can dynamically make a 2d array based on how big I want the squares to be so the columns and rows are
839160	844920	being calculated based on how big I want the squares to be and the canvas size. And then I have that global variable
844920	855960	resolution, which is probably too long of a name, which I can just use down here. And now x equals I times resolution and y
855960	872720	equals j times resolution. And I'm going to now say if grid i j equals one, fill 255. And you know, since I made the background
872720	880440	zero, I can actually, in this case, I can just draw wreck white rectangles only for the values of one. So let's see, I probably got
880440	886840	something wrong here, but let's try to run this. No, I didn't. So we can see there we go now there's some goofiness like oh, it's
886840	895920	sort of like my math is a little off and I what's this weird like nonsense over here flickering. I kind of feel the need to fix
895920	908360	that. And the other thing that I can do that this is going to help is if I make this 600 by 400, and I make this like 20. Right, it
908360	916800	still works. And now this is driving me crazy. I think what I want to do is it's there's a sort of issue with the stroke. So I could
916800	924680	say I could also say stroke 255. And then I'm getting something like this. But I don't know design wise, I'm not going to worry about that
924680	931600	too much. Actually, I kind of like being able to see the grid. So let me actually put in stroke zero. And then I'm going to do
931600	941880	something kind of goofy, which is I think if I say just draw the all the rectangles like one pixel less. Whoops. I think I'm going
941880	948400	to get the look that I want. Yeah. So whatever there's countless ways I could deal with this. But now I have I have the grid, I have
948400	959240	all the cells. So now it's up to me to simply implement these rules. I need to for every single cell count the number of live
959280	970080	neighbors, look at its own state and have these rules play out. Here's the thing. This is really important. While I'm checking each cell, I
970080	979520	check this cell first, let's say, I cannot change its value, and then go on and check the next cell, because the next cell's new
979520	985240	state should not be dependent on this cell's new state, but it's previous state. And if I've changed a state, I've lost its old
985240	994600	state. So this is where what I actually need is I need two two dimensional arrays. One is the sort of old one. And one is the new
994600	1004400	one. Now, probably the simplest thing for me to do is just make a new one every frame. That's sort of like, in some ways, a bad idea in terms
1004400	1010360	of memory management. And if you look at my processing example that I referenced at the beginning of this video, what I actually do in
1010360	1015880	that example is I just have two different arrays. I have an old one, and then I have a new one. Then the new one is then the old
1015880	1020640	one. And I write the new one over here, I just keep swapping them. So I could maybe add that in at some point during this video.
1020680	1026520	But for right now, at the beginning of draw, I'm just always going to make a new generation. At the beginning, what I can do here.
1028840	1039080	Why does that keep happening? When I press the button to change the camera? At the beginning of draw, I can say let next for next
1039080	1052240	generation equal make 2D array columns and rows. Okay, now I'm going to leave this here for the rendering. And what I'm actually going to do is at
1052240	1064360	the end, what I'm going to do is I'm going to say, I guess it doesn't really matter. Do I want to like render first? This is kind of like a
1064360	1071200	philosophical, deep philosophical question. Do I want to compute and then render or render and then compute kind of could matter in some
1071200	1076120	situations. This matter in the situation doesn't really matter. But what I what I the reason why is like I'm never going to see the first
1076120	1088240	generation, because what I want to do is say grid equals next. So basically, the algorithm here is compute next, based on grid, because
1088240	1096880	draw is looping. So I want to compute the next generation based on the grid, make grid that render, and then compute the next generation based
1096880	1104640	on grid make grid that render. So I don't know that's bothering me. I'm going to do this. I'm going to do this after. So at least I draw the first
1104640	1113440	one and I'm going to do some computation for the next frame. Okay, okay. So now what do I need to do once again, loop through all of
1113440	1129080	these loop through all of these. Now what I need to do is count live neighbors. I need to count the number of live neighbors, the neighbors
1129080	1139840	that have one. So I could do a kind of internal loop here. And that would probably be a smart thing to do. Maybe I will do that. Where
1139840	1147720	basically what I do is I say I have a certain I'm at a certain cell. Let me look at the cells between negative one and one and negative one and
1147720	1158200	one offset from where I am. I could also just do something really silly like let me do the really silly thing first. I could say let
1158200	1174280	sum equals zero. Then I could say sum plus equal grid i minus one j. That would be the neighbor to the so right. If this is i comma j i minus
1174280	1184000	one comma j is there i minus one j minus one i j minus one that sort of thing. So if I'm thinking about this, I might like add go I could
1184000	1202360	just like manually put in all the neighbors. Just like add them all up. This is like going around the horn here. Right. Plus i plus one j plus one. I sometimes I like doing
1202360	1213440	ridiculous things like this just to figure this stuff out. Now I got to go i minus one j plus one. And then what's the last one i minus
1213680	1231840	one j. This should be eight neighbors. Right. This is eight neighbors. One two three four. Oh wait. One two three four five six seven. What did I forget? I
1231840	1251520	minus one j minus one i j minus one i plus one j minus one. Forgot to do that whole top row. And then i plus one j i plus one j plus one i yeah. So this should now be
1251520	1261720	eight. One two three four one two three four. Okay. I kind of hate that I did this. Throwing your tomatoes at your television screen because of
1261720	1270240	course you're all watching this on the television screen. So this is the idea. I need to add up all those neighbors. Let's do this in a loop. So another way I could do it is I could
1270240	1288760	say you have a better idea. Let's neighbors I have a better idea. Let's write a function to do this. Neighbors equals count. I'm going to give it the grid and I'm going to give it the i and the j. So I'm
1288760	1302240	going to write a function. I'll put it all the way at the bottom of my code that receives. I'm going to call it count. Account neighbors. Let's call it. And it's going to receive some 2D array. And it's going to
1302240	1318480	receive an x and a y location. And then what I'm going to do is I'm going to say i equals negative one i is less than two i plus plus. Then so I'm going to do a little nested loop using i and
1318480	1340280	j around that spot. And I'm going to say let some equals zero. And then I'm going to say some plus equals grid i j. However, here's a problem. I don't want to count myself as a neighbor. So there's a few
1340280	1347840	different ways I could do this. But it's a little bit silly. I'm just going to like subtract it at the end. Like I'll just subtract it out. I could have like put an if
1347840	1358040	statement here, like ignore it if i equals x and j equals x. But I'm just going to subtract it out at the end. And then I'm going to return that sum. So this is you could see like a couple of
1358040	1368920	different ways of doing this right now. This is one way to kind of do this. What this is doing is it's saying let me do a little loop around here negative one zero positive one negative one zero positive
1368920	1383000	one. So let me check this this this and then subtract this out because I don't really want to count that one. Okay, so now I should be able to I'm going to just delete this. I've now counted all of the neighbors. I've got a big
1383000	1396360	problem. What do I do with the fact that if I'm on the edge, there's no neighbor to the left. If I'm on the bottom, there's no neighbor below. If I'm the top, there's no neighbor to the
1396360	1406880	above. If I'm the right, there's no name. If I'm on the edge, there's no neighbor to the right. So what I could do, there's a bunch of things I could do. I could consider this like an infinite wrap around world. We're like this neighbor to the right is
1406880	1425280	this this neighbor to the left is this. I could there's other ways that I could approach it. What I'm going to do is I'm going to leave the edges as fixed values and just not bother to check them. Which is I so what I'm going to do here is I am
1425280	1442160	going to I wanted to do like I was going to do this loop like this. You know what? Let's do the wrap around. Do I dare? No, no, no, let's do it the simple way first. I was like, I'll just add the wrap around code because I could add the wrap around
1442160	1468360	code here. But I'm going to let me I'll maybe I'll leave that as an exercise or do that later. The issue is, you know what I really want? I think then what I want? The problem is if I change this loop, so I have to I have to treat the edges differently. Oh, so much so much heartache here. But I can say what I'm going to do here is I'm going to say, Oh, this is the drawing.
1468360	1495800	Whoa, all right, this is the compute computation. So I'm going to say if I equals zero or I equals columns minus one minus one or J equals zero or J equals rows minus one. These are this is like all of the edges. I'm just going to treat them differently.
1499200	1519280	I'm going to say next I J equals grid I J. So I'm just going to keep the same values from before. This is not a great solution, but it's a quick one that I can do right now. So I'm if I'm on an edge, I'm just going to use the same value.
1520280	1540800	Because now what I can do is say, look at this, my state is grid I J. Now it's time for me to implement those rules, right? Okay, if my state is zero and three neighbors are alive, change my state to one.
1541800	1564800	If state equals zero and neighbors equals zero, then next I J equals one. Okay, that's rule number one. If not zero equals three. Okay, now what else?
1565800	1590800	If I'm alive and less than two or greater than three are alive, then change my state to zero. Else if my state is one and neighbors is less than two or neighbors is greater than three, and I probably should put a little parentheses around that one.
1590800	1607800	And again, I'm sure they're like some nicer ways I could write this in a more concise way, but you can see this is the rule, right? If I'm alive and I have less than two or greater than three neighbors, then the new state is zero.
1607800	1627800	In all other cases, the next state is just the current state. Okay, so and this makes me want to put this up here at the top so that I can also just use this here. So that's the state, right? The state, this is the current state.
1627800	1640800	If I'm an edge, just ignore me. I'm the same state. If I'm not an edge, count all the neighbors, check if I should change my state or say the same. I'm seeing in the chat, there's a typo at neighbors in the first if. Thank you.
1640800	1654800	Neighbors. Okay. What's the chance I've actually finished this? So there we go. I think I have mostly all the code for it. Okay, count is not defined.
1654800	1664800	Sketch.js line 55. Oh, right, because I called it count neighbors, which is a better name for the function than counts. Try that.
1664800	1683800	Cannot read property negative one of undefined at count neighbors. So what is undefined? Oh, no, no, no, no. Ah, look at this. This is a big mistake, right? What was I doing here? This loop, negative, right? This loop which goes, which is basically a loop for like a little,
1684800	1708800	subsection, right? If this is x and y, right? I is an offset negative one to positive one. J is an offset negative one to positive one. The cells I'm looking at are not i, j, but x plus i and y plus j, because I'm just looking relative to where that x, y point is.
1708800	1733800	So that was a big mistake here. This should be x plus i, y plus j. Oh, so close. Count neighbors at draw, sketch line 55. Okay, ooh, sketch line 55. Count neighbors, wait, wait, wait, wait. Cannot read property negative one of undefined.
1733800	1758800	What's undefined? Grid neighbors? Okay, hold on. Let's look at some stuff here. Or if j is zero. Oh, look at this. I just keep going anyway. So this I really, I need to break out of the loop. So this is really like, I'm done. Leave the loop or continue or something. I don't know. I'm going to, I'm just going to put an elf in here as much as I hate that.
1758800	1771800	So because I shouldn't be, I'm basically doing the edges or the neighbors. Boy, this will be much nicer if I just, in this function, add some code to deal with the wrap around, which is not going to be that hard to do. So but now I should be good.
1773800	1783800	There we go. The game of life. Now it looks weird because the edges are ever changing, but this is actually now the game of life working.
1783800	1796800	I really got to implement this wrap around thing. So let's do that now. Let's fix it so that the edges consider the other sides as neighbors. So how do I do that?
1797800	1809800	Well, one way to do that is with something called modulus. This is really, this is great. And I can refer you to Golan Levin's guest tutorial video on modulus which was made as part of this channel. So I will link to that.
1810800	1831800	But basically what I'm saying here is if I have 10 columns, zero through nine, what could, and I'm always looking for the neighbor plus one, right? So zero plus one is one, one plus one is two, et cetera, et cetera, et cetera.
1831800	1845800	Nine plus one is 10, but I want the neighbor to be zero. Well, guess what? Nine plus one modulus 10 equals zero because modulus is the operator that gives you the remainder of division.
1846800	1857800	10 divided by 10 is one remainder zero. So I encourage you to watch that modulus video if you're not familiar with modulus. So this will actually work almost getting closer if I say,
1861800	1868800	I'm going to just say like, I'm going to have a new, I need like a new variable name for X plus, I guess I could say column.
1869800	1889800	I don't like column and I'm going to say X plus I modulus columns and row equals Y plus J modulus rows. So this gets me close. It doesn't get me all the way there, but it gets me close. So now I'm adding it up like this.
1890800	1902800	And I'm going to, I'm going to get rid of this whole edges thing because no longer, okay? So I've got to get this done. Now I'm going to have an error here, right?
1902800	1911800	I'm still getting like an out of bounds error because I'm going to negative one. Why? Because what if in the case of I equal negative one?
1912800	1931800	So what is, if I is zero, right? So let me come to the console here. 10 modulus 10 is zero. But let's say I'm looking for the left neighbors. So I'm going through negative one.
1931800	1941800	Negative one, modulus 10 is negative one. But I need that to be nine. I need negative one to be nine. Well, guess what?
1942800	1954800	If I actually just add the number of columns to everything, right? If I'm actually working with the numbers instead of the numbers zero through nine, the numbers 10 through 19, right?
1954800	1967800	10 minus one is nine. Modulus 10 is nine. So the formula is negative one is negative one plus the number of columns, modulus the number of columns.
1970800	1977800	Oh, but that's not 10. There's a different numbers in my system. But, so let's, let's try to confirm this again, okay?
1977800	1991800	The idea is that I have an x and a y point. So that point might be, let's say if it's on an edge, for example, might be like zero, comma, it's on the left edge, might be something like zero, comma, whatever the y is.
1992800	2007800	You know, 10. It's five. So this is the x value. And I want to take x plus i plus the number of columns, modulus the number of columns.
2008800	2016800	Instead of this is going to be simple, but it's kind of, it's really kind of like a crazy thing to do. But you might write this out and practice it a bit on your own. It will make sense to you eventually.
2017800	2027800	So when this is going to work basically, let's say i is going to be the values negative one, zero, and one, right?
2028800	2035800	x is going to be the values zero through nine if I'm thinking about all the possible, all the possible columns.
2035800	2052800	So let's just take zero and negative one, for example. Zero minus one plus, and in this case I have ten columns, plus ten, modulus ten is actually nine, modulus ten, which equals nine.
2052800	2059800	So zero, negative one to the left of it, that wraps it around to get the neighbor on the right, right?
2059800	2075800	It doesn't work for just any arbitrary thing in the middle. Like if I take i to be three, sorry, if I take, if I take, sorry, x to be three, three minus one plus ten, modulus ten.
2075800	2085800	We'll see how this ten and ten, it kind of cancels itself out. Can you see that? Am I off the whiteboard? I'm close to being off the whiteboard. That equals two, right?
2085800	2093800	Because this is twelve, modulus ten is two. So this actually works, and then what if I'm on the edge if I'm at like nine, right?
2093800	2106800	If x is nine, nine plus one is ten, plus the number of columns is ten, is twenty, modulus columns, twenty divided by ten is two, remainder zero, zero.
2106800	2113800	So nine to the right gets neighbor zero. So this is kind of goofy, it like shifts everything over so it can kind of look across the edges.
2113800	2120800	So this is going to work. You can believe me or not believe me, but it's going to work, and I'm going to put this in.
2120800	2139800	So now what I want is x plus i plus columns, modulus columns, y plus j plus rows, modulus rows, add those all up, and the game of life.
2140800	2144800	Thank you. Thank you for watching this coding challenge. Thank you, thank you.
2144800	2156800	So let's try making, let's try doing a couple things, just to get a little further here. Let's, let's, I don't know, no I'm not going to do, you do all the next stuff.
2156800	2164800	I'm just curious, like let me make the resolution ten, so we can see that's with the ten. So you can see it's running pretty fast in the browser.
2164800	2169800	I have a pretty slow, low resolution. So here's what you should do now.
2169800	2175800	I'm going to stop. This is a perfect opportunity for people watching this video to make some variations.
2175800	2180800	Some things you can think about. Well, one thing is, what if you make each one of these cells an object?
2180800	2185800	So its state might not actually just be, it can keep track of more than just its state zero or one.
2185800	2190800	It could keep track of whether it's change state or stay the same or how long it stayed the same.
2190800	2196800	What if you visualize those, what if you visualize with different colors based on the history of the system?
2196800	2201800	What if you allow a user to draw with the mouse and set cells on?
2201800	2207800	What if you look up some of these repeating, special repeating patterns that you can create certain kinds of patterns?
2207800	2213800	What if you, are you going to think of more, and what if you did the edges in a different way?
2213800	2218800	What if you used the floating point numbers instead of zeros and ones and did like an average or something?
2218800	2222800	There are so many ways you can create a system lowering the resolution.
2222800	2226800	What if you drew, didn't draw squares but circles, used images.
2226800	2229800	How can you visualize this system? How can you change the rules?
2229800	2235800	Or how can you visualize the system in a different way to create a piece of art or for some other purpose?
2235800	2238800	I look forward to you share what you make in the comments.
2238800	2241800	There'll be the code link from here in a read me where you can submit your versions.
2241800	2245800	And I'll come back in a future live stream. I'll share some of the community made versions.
2245800	2246800	Run this again.
2246800	2252800	There's one other thing, but I do think that making cell objects is a path.
2252800	2256800	Right now I just have, and you should probably do the swapping thing.
2256800	2261800	Maybe that's one other thing you could do is like, maybe not, don't make a new 2D array every time.
2261800	2267800	But what I'm thinking about here is what if instead of each one of these being a random value,
2267800	2271800	you set something like new cell i, j.
2271800	2277800	And this cell object can animate, it can move around, the cells could move, they could grow,
2277800	2279800	they could shrink, they could keep track of their history.
2279800	2282800	There's so many possibilities there if you make an object for the cell.
2282800	2284800	Okay, thanks for watching.
2284800	2288800	I hope you enjoyed this coding challenge and you share with me what you make. Goodbye.
