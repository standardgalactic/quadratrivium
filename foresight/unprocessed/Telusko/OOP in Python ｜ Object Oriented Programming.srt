1
00:00:00,000 --> 00:00:20,400
Now, till this point, we have seen the language fundamentals of Python, right?

2
00:00:20,400 --> 00:00:25,080
We have seen variables, how to pass a variable to a function, we have seen function, right?

3
00:00:25,080 --> 00:00:29,680
How to define function, how to call a function, and then we moved towards module and now

4
00:00:29,800 --> 00:00:31,480
we know how to create different files.

5
00:00:31,840 --> 00:00:36,200
Now, once we have talked about the language fundamentals, let's move towards the concepts.

6
00:00:36,560 --> 00:00:41,160
Now, one of the concepts which is very important is, oops, which is object oriented programming.

7
00:00:41,520 --> 00:00:46,920
Now, one of the unique selling point of Python, you know, why Python is so famous because of this thing.

8
00:00:47,320 --> 00:00:51,960
Python supports all different programming paradigm, you know, it supports functional programming,

9
00:00:52,120 --> 00:00:57,400
it supports object oriented programming, and it also works with procedure oriented programming.

10
00:00:57,720 --> 00:01:00,320
Now, we have talked about procedure, right?

11
00:01:00,320 --> 00:01:04,120
What is procedure now is, whenever you work with Python, we define functions, right?

12
00:01:04,120 --> 00:01:05,560
We call a function from a function.

13
00:01:05,560 --> 00:01:09,880
So if you want to create a software, you will break down your project into small, small part,

14
00:01:09,880 --> 00:01:12,600
and those modules, small modules will be functions.

15
00:01:12,800 --> 00:01:15,520
Now, Python is also functional programming.

16
00:01:15,520 --> 00:01:21,120
So functional programming basically means if you can achieve a certain task, implementing functions

17
00:01:21,120 --> 00:01:26,960
as a mathematical functions where you will not manipulate a data, which is instead of changing data,

18
00:01:27,000 --> 00:01:28,720
you will still accomplish a task.

19
00:01:28,920 --> 00:01:33,760
One of the ways you can pass a function to a function, you know, we have seen this, again,

20
00:01:33,760 --> 00:01:37,160
we have a very deep concept of functional programming, we'll talk about that later.

21
00:01:37,320 --> 00:01:42,480
But time being, procedures and functions, which is something we have already done, for example, lambdas.

22
00:01:42,840 --> 00:01:46,200
Now, we are going for a concept of ops.

23
00:01:46,200 --> 00:01:50,200
Now, which is very famous in the industry, you know, so if you are working on big softwares,

24
00:01:50,200 --> 00:01:53,960
enterprise projects, you need to think everything in a format of objects.

25
00:01:54,200 --> 00:01:57,720
Now, you might be thinking why objects, we were happy with functions, right?

26
00:01:58,000 --> 00:02:01,560
Now, see, even from start itself, I was I'm talking about objects, right?

27
00:02:01,560 --> 00:02:04,840
Maybe in some programming, I said, OK, this is an object in teachers, an object.

28
00:02:05,120 --> 00:02:06,800
But then we were skipping that part.

29
00:02:06,800 --> 00:02:09,080
What is object and why it's so important?

30
00:02:09,120 --> 00:02:15,840
See, ultimately, if we talk about programming world, what we do is we try to solve a real world issue

31
00:02:16,000 --> 00:02:18,600
with the help of a virtual world solution, right?

32
00:02:18,760 --> 00:02:21,800
So example, programming softwares, everything is virtual world.

33
00:02:22,120 --> 00:02:24,520
Now, in real world, we all use objects, right?

34
00:02:24,520 --> 00:02:28,160
Example, if I want to record this video, I need a camera, right?

35
00:02:28,160 --> 00:02:29,880
If I want to call someone, I need a phone.

36
00:02:29,880 --> 00:02:32,120
If you want to type a code, you need a laptop, right?

37
00:02:32,400 --> 00:02:35,120
So for everything, you need object.

38
00:02:35,520 --> 00:02:38,160
So in real world, everything is object, in fact, persons, right?

39
00:02:38,160 --> 00:02:42,560
Example, if I have a company, if I want some work to be done, of course, I need employees, right?

40
00:02:42,560 --> 00:02:45,400
And for me, every employee is an object, right?

41
00:02:45,640 --> 00:02:48,480
So an employee object is using a laptop object.

42
00:02:48,520 --> 00:02:51,520
So some employee object needs a AC object, right?

43
00:02:51,520 --> 00:02:52,440
So that's how things work.

44
00:02:52,440 --> 00:02:53,640
Everything is an object.

45
00:02:53,640 --> 00:02:55,880
Even humans, we treat them as object.

46
00:02:56,320 --> 00:02:57,440
Now, what object will have?

47
00:02:57,440 --> 00:02:58,560
Object will have two things.

48
00:02:58,800 --> 00:03:03,000
Every object will have certain attributes and every object will have certain behavior.

49
00:03:03,360 --> 00:03:07,840
Now, when I say attribute, you can imagine them as data, or you can say properties.

50
00:03:08,080 --> 00:03:13,840
Example, my height is one attribute, my age is one attribute, my name is one attribute.

51
00:03:14,040 --> 00:03:16,560
The company I work for is one attribute, right?

52
00:03:16,560 --> 00:03:18,400
Everything is those things that attribute.

53
00:03:18,760 --> 00:03:20,240
And then comes my behavior.

54
00:03:20,320 --> 00:03:22,680
I'm talking, I'm walking, I'm dancing.

55
00:03:22,960 --> 00:03:24,440
All these are behavior, right?

56
00:03:24,680 --> 00:03:27,080
So our actions defines our behavior.

57
00:03:27,480 --> 00:03:30,080
And then we have attributes, which we know.

58
00:03:30,480 --> 00:03:33,320
In other terms, you can say, as an object, I know something.

59
00:03:33,320 --> 00:03:35,080
As an object, I do something, right?

60
00:03:35,160 --> 00:03:38,160
So I do something based on something which I know, right?

61
00:03:38,360 --> 00:03:39,240
So this is object.

62
00:03:39,400 --> 00:03:43,840
Object will have something where you can store data and object will have some behavior.

63
00:03:44,080 --> 00:03:47,040
Now, this data, which we normally use, those are variables, right?

64
00:03:47,040 --> 00:03:48,120
We have same variables.

65
00:03:48,320 --> 00:03:51,920
So if you want to store something, an object, we need to define variables.

66
00:03:52,040 --> 00:03:55,160
If you want to define the behavior, we need to use methods.

67
00:03:55,360 --> 00:03:56,360
Oh, that's something new now.

68
00:03:56,360 --> 00:03:57,040
What is method?

69
00:03:57,680 --> 00:03:58,960
We have done with functions, right?

70
00:03:59,160 --> 00:04:03,880
So functions in object-oriented programming, they're called as methods.

71
00:04:04,160 --> 00:04:04,360
Right?

72
00:04:04,360 --> 00:04:05,000
It's just so simple.

73
00:04:05,000 --> 00:04:06,120
We have done all those stuff.

74
00:04:06,120 --> 00:04:10,200
The only change we have now is we need to think in an object term.

75
00:04:10,400 --> 00:04:13,560
See, object-oriented programming is not just about different syntax.

76
00:04:13,560 --> 00:04:15,080
It's also about the way you think.

77
00:04:15,480 --> 00:04:19,800
So now, if you want to achieve anything in programming, you need to think about objects.

78
00:04:19,800 --> 00:04:23,480
So the moment you say you have a complex problem, think about the object,

79
00:04:23,480 --> 00:04:26,840
think about multiple objects, and how can you connect them, right?

80
00:04:27,040 --> 00:04:29,080
Because in OOPS, we have so many concepts.

81
00:04:29,080 --> 00:04:31,440
One of the concepts is object, which we are going to see now.

82
00:04:31,840 --> 00:04:33,200
We have a concept of classes.

83
00:04:33,200 --> 00:04:37,040
We have a concept of encapsulation, abstraction, polymorphism.

84
00:04:37,280 --> 00:04:38,640
I know weird words, right?

85
00:04:38,640 --> 00:04:42,480
But don't worry, we will be covering everything in detail in the subsequent tutorials.

86
00:04:42,920 --> 00:04:44,920
So there's one thing which is important to discuss here.

87
00:04:45,080 --> 00:04:48,760
About classes, because we have an object and we have a concept of class.

88
00:04:48,880 --> 00:04:53,320
It doesn't matter which language you work on, maybe Java, C++, or C sharp,

89
00:04:53,400 --> 00:04:56,240
whichever whatever language which uses OOPS concept, you know,

90
00:04:56,240 --> 00:04:59,960
we always use this thing, which is object and class together.

91
00:05:00,320 --> 00:05:01,040
But why?

92
00:05:01,040 --> 00:05:02,480
Why they are so important?

93
00:05:02,480 --> 00:05:05,840
Of course, objects are important because whatever you want to do can be done

94
00:05:05,840 --> 00:05:07,360
with the help of object.

95
00:05:07,360 --> 00:05:09,120
But why class is important?

96
00:05:09,120 --> 00:05:10,320
Now, think about this.

97
00:05:10,320 --> 00:05:15,360
When you see an object in real world, for example, this camera, a fan, or a clock,

98
00:05:15,560 --> 00:05:17,800
right, all these things are manufactured, right?

99
00:05:17,800 --> 00:05:20,640
So in some factory, they have been manufactured.

100
00:05:20,640 --> 00:05:21,920
Or maybe you can talk about a phone.

101
00:05:21,920 --> 00:05:22,760
Now, look at this phone.

102
00:05:22,760 --> 00:05:24,120
This is Motorola G3.

103
00:05:24,120 --> 00:05:26,960
OK, now it's not the only phone available here, right?

104
00:05:26,960 --> 00:05:28,400
So a lot of people, they have this phone.

105
00:05:28,400 --> 00:05:31,440
So that means we don't have one object of Moto G3.

106
00:05:31,440 --> 00:05:33,800
We have thousands or millions of objects.

107
00:05:33,880 --> 00:05:35,120
I'm using any number here.

108
00:05:35,120 --> 00:05:39,320
So imagine we have five million of this type of phones, which is Moto G3.

109
00:05:39,880 --> 00:05:42,160
Now, of course, someone must have designed it, right?

110
00:05:42,160 --> 00:05:44,560
And all these phones have been manufactured somewhere.

111
00:05:44,560 --> 00:05:47,840
Maybe maybe you can say all these phones are made in China.

112
00:05:47,840 --> 00:05:52,080
OK, so we have a factory in China who is producing all this phone.

113
00:05:52,320 --> 00:05:54,240
But then Motorola says it is their phone, right?

114
00:05:54,240 --> 00:05:56,280
Of course, we don't say this is a China phone.

115
00:05:56,280 --> 00:05:58,080
We say this is a Motorola phone.

116
00:05:58,080 --> 00:06:00,240
Or we don't say, let's say the manufacturing is in India.

117
00:06:00,240 --> 00:06:02,080
We don't say it's an Indian phone.

118
00:06:02,080 --> 00:06:03,200
We say it's a Motorola phone.

119
00:06:03,200 --> 00:06:04,040
Why?

120
00:06:04,040 --> 00:06:05,880
Because manufacturing is not important.

121
00:06:05,880 --> 00:06:07,640
You can manufacture stuff anywhere.

122
00:06:07,960 --> 00:06:11,280
What is important is where it has been designed.

123
00:06:11,280 --> 00:06:13,360
OK, so this is designed by Motorola.

124
00:06:13,760 --> 00:06:17,800
But even if you talk about this phone, this has been designed once.

125
00:06:17,920 --> 00:06:20,480
And then they have manufactured multiple times.

126
00:06:20,800 --> 00:06:24,440
And that design in programming or in, oops, we say class.

127
00:06:24,720 --> 00:06:27,120
So in a class, you will write a design of the object.

128
00:06:27,440 --> 00:06:30,800
Imagine there's some factory in your machine who will create these objects.

129
00:06:30,800 --> 00:06:34,600
OK, so you have to provide a design so that you will get the object.

130
00:06:35,120 --> 00:06:37,960
So that means class is a design and objects.

131
00:06:37,960 --> 00:06:39,200
They are real stuff, right?

132
00:06:39,200 --> 00:06:41,120
They are real entities, you can say.

133
00:06:41,120 --> 00:06:43,080
Or you can use another term called as instance.

134
00:06:43,400 --> 00:06:46,880
So you can imagine this is an instance of a class.

135
00:06:47,600 --> 00:06:48,760
That's awesome, right?

136
00:06:48,760 --> 00:06:53,200
So point to remember class is a design or you can call them as blueprint.

137
00:06:53,720 --> 00:06:58,200
So if you have a class, you can manufacture thousands of billions of these devices.

138
00:06:58,440 --> 00:06:59,960
So that's about class and object.

139
00:07:04,960 --> 00:07:09,200
In the last video, we have talked about the theory of objects and a class, right?

140
00:07:09,560 --> 00:07:12,480
So of course, before creating an object, you need to create a class, right?

141
00:07:12,480 --> 00:07:14,920
Because class is a design for the object.

142
00:07:14,920 --> 00:07:17,560
And if you don't have a design, how can you build something?

143
00:07:17,920 --> 00:07:23,280
In fact, even before building a tower, you need to create a blueprint of it, right?

144
00:07:23,280 --> 00:07:24,440
And that's the same case here.

145
00:07:24,440 --> 00:07:27,400
So if you want an object, you need to create a class.

146
00:07:27,600 --> 00:07:31,520
So what I'm talking about is, you know, let's say I want to work with computers.

147
00:07:31,520 --> 00:07:32,720
So I'm a person.

148
00:07:32,720 --> 00:07:33,840
I want to work with a computer.

149
00:07:33,840 --> 00:07:36,000
So of course, I want an object of a computer, right?

150
00:07:36,000 --> 00:07:39,000
So let's say I'm a programmer and of course I want to work with a computer.

151
00:07:39,280 --> 00:07:40,520
So I will say comp one.

152
00:07:40,520 --> 00:07:41,960
So this is my computer.

153
00:07:41,960 --> 00:07:45,360
But see, the thing is, till this point, we have worked with integers.

154
00:07:45,360 --> 00:07:47,840
We have worked with float string.

155
00:07:48,000 --> 00:07:50,240
Now, all those are inbuilt types, right?

156
00:07:50,320 --> 00:07:52,160
We don't have any type as computer.

157
00:07:52,160 --> 00:07:53,920
So of course, we need to create our own type.

158
00:07:53,920 --> 00:07:55,840
So we have to get our own class for it.

159
00:07:55,840 --> 00:07:58,480
So if you want to use a computer, you need to define a class here.

160
00:07:58,480 --> 00:08:00,120
So how do we define a class?

161
00:08:00,120 --> 00:08:03,720
The way we define a function is by saying def and function name.

162
00:08:04,000 --> 00:08:07,400
The way we define a class is using a class keyword.

163
00:08:07,400 --> 00:08:10,280
So we have to say class and this class will, of course, have a name.

164
00:08:10,560 --> 00:08:12,800
In this case, I will use a name as computer.

165
00:08:12,920 --> 00:08:14,680
OK, now this is how you define a class.

166
00:08:14,680 --> 00:08:16,560
You have to specify a colon.

167
00:08:16,560 --> 00:08:19,320
Now, after colon, this is your suite, right?

168
00:08:19,320 --> 00:08:21,560
So this is where you will mention your stuff.

169
00:08:21,560 --> 00:08:23,920
Now, what stuff we can put in a class?

170
00:08:23,920 --> 00:08:26,480
Two things. The first thing is the attributes.

171
00:08:26,560 --> 00:08:28,360
The second one is the behavior.

172
00:08:28,440 --> 00:08:30,560
Oh, now, when you say attribute, it is your variables.

173
00:08:30,560 --> 00:08:32,040
OK, the way you create variables.

174
00:08:32,040 --> 00:08:36,080
And the next thing we'll be having here is behavior, which is methods.

175
00:08:36,200 --> 00:08:37,480
What is methods functions?

176
00:08:37,480 --> 00:08:39,600
You know, the functions which we are using from a long time,

177
00:08:39,600 --> 00:08:41,400
but here we call them as methods.

178
00:08:41,400 --> 00:08:42,920
So next time when you are calling a function,

179
00:08:42,920 --> 00:08:46,760
but that function is a part of a class instead of calling them as functions,

180
00:08:46,760 --> 00:08:47,960
we have to say methods, right?

181
00:08:47,960 --> 00:08:50,320
OK, now let's define some methods here.

182
00:08:50,320 --> 00:08:53,080
Now, what I'm talking about, let me get a method here.

183
00:08:53,080 --> 00:08:53,800
I will say def.

184
00:08:53,800 --> 00:08:57,240
I will say config because every machine has a configuration, right?

185
00:08:57,240 --> 00:08:58,280
So I will say config.

186
00:08:58,280 --> 00:09:00,560
We got that self keyword that that's weird.

187
00:09:00,560 --> 00:09:02,360
What is self because I'm not typing it.

188
00:09:02,360 --> 00:09:05,120
OK, so I mean, the moment I say bracket, it says self.

189
00:09:05,200 --> 00:09:06,560
We'll talk about that self later.

190
00:09:06,560 --> 00:09:08,040
But time being, let's keep it there.

191
00:09:08,040 --> 00:09:09,680
You can imagine we don't have any self there.

192
00:09:09,680 --> 00:09:12,200
OK, for time being, imagine we don't have anything like self.

193
00:09:12,280 --> 00:09:15,120
OK, and here we'll say we got a complete class

194
00:09:15,120 --> 00:09:17,520
and then we got a config method or you can say function,

195
00:09:17,520 --> 00:09:21,320
but try to move from that function term to method term.

196
00:09:21,560 --> 00:09:23,400
Right, so we got a method here, which is config.

197
00:09:23,400 --> 00:09:25,880
And here I'm printing the config of this machine.

198
00:09:25,880 --> 00:09:30,760
And I want to say, hey, this is i5 machine with 16 GB RAM,

199
00:09:30,760 --> 00:09:33,560
and it has one data point hudder.

200
00:09:33,560 --> 00:09:36,720
Now, this is very common config now, which we find nowadays, right?

201
00:09:36,720 --> 00:09:37,840
And that's what I'm doing here.

202
00:09:37,840 --> 00:09:39,320
So we got a class computer.

203
00:09:39,320 --> 00:09:41,240
We got a method in that example here.

204
00:09:41,240 --> 00:09:44,600
I'm saying comp one is the object of computer.

205
00:09:44,800 --> 00:09:46,120
But we cannot simply do that, right?

206
00:09:46,120 --> 00:09:48,720
We cannot simply say comp one because no one will understand

207
00:09:48,720 --> 00:09:49,960
what this comp one is.

208
00:09:49,960 --> 00:09:54,240
Example, if I say there's a variable a, what is a type of this variable?

209
00:09:54,240 --> 00:09:57,120
Right now, since in Python, we don't have to

210
00:09:57,120 --> 00:09:59,280
statically mention the type of it.

211
00:09:59,280 --> 00:10:01,840
So what we can do is when you say a equal to 5,

212
00:10:01,840 --> 00:10:04,240
now the type of a becomes integer, right?

213
00:10:04,240 --> 00:10:07,200
If I say a is 5.5, the type of a becomes float.

214
00:10:07,200 --> 00:10:10,400
If I assign a value of string type, if I say 8,

215
00:10:10,400 --> 00:10:12,960
even if that 8 is number, we are putting that in single code, right?

216
00:10:12,960 --> 00:10:14,160
That becomes a string.

217
00:10:14,160 --> 00:10:15,520
What about comp one?

218
00:10:15,520 --> 00:10:17,760
Comp one here, don't have a type.

219
00:10:17,760 --> 00:10:21,600
We have to mention, hey, this comp one is an object of computer.

220
00:10:21,680 --> 00:10:24,720
In that case, you will say equal to computer.

221
00:10:24,720 --> 00:10:26,960
And you have to give this round brackets.

222
00:10:26,960 --> 00:10:29,280
Now, if you are coming from another, you know,

223
00:10:29,280 --> 00:10:32,240
from different programming background like Java, C sharp,

224
00:10:32,240 --> 00:10:34,000
we have a concept of constructor, right?

225
00:10:34,000 --> 00:10:35,440
So these are constructed there.

226
00:10:35,440 --> 00:10:38,160
So this will give you the object of computer.

227
00:10:38,160 --> 00:10:39,280
Now, how do I know that?

228
00:10:39,280 --> 00:10:43,680
If you remember in one of the video, we have talked about a type function, right?

229
00:10:43,680 --> 00:10:45,280
So you can use type function here.

230
00:10:45,280 --> 00:10:46,800
So I will say print.

231
00:10:46,800 --> 00:10:50,400
I will define type, print the type of con one.

232
00:10:50,400 --> 00:10:52,320
Let's see what happens, what it gives you.

233
00:10:52,320 --> 00:10:54,560
So if I run this code, it says, hey, this is a class.

234
00:10:54,560 --> 00:10:56,640
Okay, now we have a different keyword class.

235
00:10:56,640 --> 00:10:59,200
And this belongs to a computer.

236
00:10:59,200 --> 00:10:59,840
That's important.

237
00:10:59,840 --> 00:11:00,320
Okay.

238
00:11:00,320 --> 00:11:01,680
So it gives you the module name.

239
00:11:01,680 --> 00:11:04,720
The module name is main because we are running this code from here.

240
00:11:04,720 --> 00:11:07,360
And then we have a class for this computer.

241
00:11:07,360 --> 00:11:10,080
Now, if you remember, when we work with string as well,

242
00:11:10,080 --> 00:11:11,040
string gives the same thing.

243
00:11:11,040 --> 00:11:14,480
So if I print the type of a, it also says the same thing.

244
00:11:14,480 --> 00:11:15,040
Can you see that?

245
00:11:15,040 --> 00:11:17,040
It says class str, right?

246
00:11:17,040 --> 00:11:19,120
So we are using this concept from a long time,

247
00:11:19,120 --> 00:11:21,200
but this is where we are defining it now.

248
00:11:21,200 --> 00:11:24,480
So string str is also a class, the same way computers are class.

249
00:11:24,480 --> 00:11:27,040
The difference is str is an in-built class.

250
00:11:27,040 --> 00:11:28,240
Computer is our class.

251
00:11:28,240 --> 00:11:28,400
Okay.

252
00:11:28,400 --> 00:11:29,600
That's how you define it.

253
00:11:29,600 --> 00:11:34,720
So you say class, computer, and then we have def config.

254
00:11:34,720 --> 00:11:36,160
In fact, there's one more thing.

255
00:11:36,160 --> 00:11:38,720
If you remember, when we worked with integers,

256
00:11:38,720 --> 00:11:41,360
we have also said that integers are also object.

257
00:11:41,360 --> 00:11:42,160
Let's try it here.

258
00:11:42,160 --> 00:11:43,760
I will say x equal to nine.

259
00:11:43,760 --> 00:11:46,240
And let me print the type of x.

260
00:11:46,240 --> 00:11:47,120
Can you see that?

261
00:11:47,120 --> 00:11:50,480
When I print the type of x, it says class int.

262
00:11:50,480 --> 00:11:54,880
So even this integer, this x, is an object of integer now, right?

263
00:11:54,880 --> 00:11:58,560
So everything is object in Python, right?

264
00:11:58,560 --> 00:12:00,240
So there are some in-built objects,

265
00:12:00,240 --> 00:12:01,760
and there are some objects which we create.

266
00:12:01,760 --> 00:12:04,320
And the way you create your own class is by saying class,

267
00:12:04,320 --> 00:12:05,920
computer, whatever class name.

268
00:12:05,920 --> 00:12:08,000
Make sure that you don't use in-built class name,

269
00:12:08,000 --> 00:12:09,600
because it will give you error, right?

270
00:12:09,600 --> 00:12:11,360
Or maybe you might face some bugs.

271
00:12:11,360 --> 00:12:14,160
So we have, so in a class, we are defining a function config,

272
00:12:14,160 --> 00:12:15,280
and then, oh, not function.

273
00:12:15,280 --> 00:12:18,320
Method front config, and then we are printing just a statement.

274
00:12:18,320 --> 00:12:20,400
Now, question arise, how will you call it?

275
00:12:20,400 --> 00:12:22,880
So let me remove this, all this extra stuff which we are doing.

276
00:12:22,880 --> 00:12:24,560
So we got a class, we got the object.

277
00:12:24,560 --> 00:12:26,400
I want to call that config.

278
00:12:26,400 --> 00:12:27,440
Now, what do you think?

279
00:12:27,440 --> 00:12:28,320
How will you do it?

280
00:12:28,320 --> 00:12:29,520
So normally, when you have a function,

281
00:12:29,520 --> 00:12:30,880
you mentioned the function name, right?

282
00:12:30,880 --> 00:12:32,240
Here in this case, it is config.

283
00:12:32,960 --> 00:12:35,520
But you are getting an error.

284
00:12:35,520 --> 00:12:36,160
Why error?

285
00:12:36,160 --> 00:12:39,360
So if I go back here, it says unresolved reference,

286
00:12:39,360 --> 00:12:40,160
or that's weird.

287
00:12:40,160 --> 00:12:41,280
Why it is giving you unresolved?

288
00:12:41,280 --> 00:12:43,200
Because of course, normally, till this point,

289
00:12:43,200 --> 00:12:46,080
we were mentioning the function as it is, right, open.

290
00:12:46,080 --> 00:12:50,000
But now, we have written that function or a method inside a class.

291
00:12:50,000 --> 00:12:53,200
So in order to access that, we have to mention the class name.

292
00:12:53,200 --> 00:12:55,040
And the class name here is computer.

293
00:12:55,040 --> 00:12:58,080
So we have to say computer.config, important.

294
00:12:58,080 --> 00:12:59,440
So steps, remember the steps.

295
00:12:59,440 --> 00:13:01,840
You have to mention the computer class, which is class name,

296
00:13:01,840 --> 00:13:03,520
and then you have to say config.

297
00:13:03,520 --> 00:13:06,160
So let me repeat, if you want to use a method,

298
00:13:06,160 --> 00:13:08,240
we have to mention a class name first, which is,

299
00:13:08,240 --> 00:13:11,120
I mean, it belongs to computer, and then you have to mention config.

300
00:13:11,120 --> 00:13:14,560
And if I run this code, oh, we got an error.

301
00:13:14,560 --> 00:13:15,360
But why?

302
00:13:15,360 --> 00:13:16,800
See, think about this.

303
00:13:16,800 --> 00:13:18,720
One class can have multiple objects, right?

304
00:13:18,720 --> 00:13:20,560
One object, two object, five objects,

305
00:13:20,560 --> 00:13:22,400
maybe billions of objects, right?

306
00:13:22,400 --> 00:13:25,680
In this case, we are using only one object, which is comp1.

307
00:13:25,680 --> 00:13:28,640
The thing is, this config function or a method

308
00:13:28,640 --> 00:13:32,080
will change its behavior based on the object, right?

309
00:13:32,080 --> 00:13:34,080
Because different objects have a different behavior,

310
00:13:34,080 --> 00:13:35,520
because depending upon what they know,

311
00:13:35,520 --> 00:13:36,960
they have a different behavior.

312
00:13:36,960 --> 00:13:40,000
See, in this case, I'm not depending on any data, right?

313
00:13:40,000 --> 00:13:42,640
But maybe there's a chance that this config

314
00:13:42,640 --> 00:13:44,720
will depend upon some data, and every object

315
00:13:44,720 --> 00:13:46,320
will have its own data, right?

316
00:13:46,320 --> 00:13:47,760
Again, we'll talk about that later.

317
00:13:47,760 --> 00:13:49,360
But every object is different, right?

318
00:13:49,360 --> 00:13:52,400
If I'm calling config, for which object I'm doing that?

319
00:13:52,400 --> 00:13:55,920
So if I say, hey, walk, but whom am I supposed to say walk?

320
00:13:55,920 --> 00:13:58,000
So I have to mention, hey, Ravi, walk.

321
00:13:58,000 --> 00:13:59,440
Hey, Mukesh, walk.

322
00:13:59,440 --> 00:14:00,480
Hey, Kiran, walk.

323
00:14:00,480 --> 00:14:02,400
So I have to mention the names as well, right?

324
00:14:02,400 --> 00:14:04,880
In the same way, when I say computer config,

325
00:14:04,880 --> 00:14:07,600
you have to also mention for which object you're talking about.

326
00:14:07,600 --> 00:14:09,440
And I'm talking about comp1.

327
00:14:09,520 --> 00:14:12,400
So I'm saying, hey, I want the config for comp1.

328
00:14:12,400 --> 00:14:14,240
Now, luckily, we have only one object here,

329
00:14:14,240 --> 00:14:15,200
so there's no confusion.

330
00:14:15,200 --> 00:14:16,640
But let's say if you have thousands of objects,

331
00:14:16,640 --> 00:14:18,560
you have to mention the object name as well.

332
00:14:18,560 --> 00:14:19,840
So we are doing comp1 here.

333
00:14:19,840 --> 00:14:21,360
So if I run this code now,

334
00:14:21,360 --> 00:14:21,920
oh, it works.

335
00:14:21,920 --> 00:14:23,520
You can see that we got the output.

336
00:14:23,520 --> 00:14:27,360
So we are calling config, and we are passing comp1.

337
00:14:27,360 --> 00:14:29,360
And this comp1 is a parameter, right?

338
00:14:29,360 --> 00:14:30,320
It's an argument.

339
00:14:30,320 --> 00:14:33,360
So when you call config, you're passing this comp1

340
00:14:33,360 --> 00:14:35,760
as the argument, and it is going in self.

341
00:14:35,760 --> 00:14:36,640
So what is this self?

342
00:14:36,640 --> 00:14:39,280
Self is the object which you're passing.

343
00:14:39,280 --> 00:14:41,040
Again, this thing will get more clear

344
00:14:41,040 --> 00:14:42,400
once you see further videos, right?

345
00:14:42,400 --> 00:14:43,840
So this is a complex concept

346
00:14:43,840 --> 00:14:45,520
if you are learning UPS for the first time.

347
00:14:45,520 --> 00:14:48,240
But step by step, everything will go inside your brain, okay?

348
00:14:48,240 --> 00:14:49,600
So this is the first layer.

349
00:14:49,600 --> 00:14:50,400
Again, in the next video,

350
00:14:50,400 --> 00:14:51,920
we'll talk about some more layers to it.

351
00:14:51,920 --> 00:14:52,720
We'll add more layers,

352
00:14:52,720 --> 00:14:55,040
and then I will make sure that you'll get everything about it.

353
00:14:55,040 --> 00:14:56,640
Okay, let's create some more objects, okay?

354
00:14:56,640 --> 00:14:59,520
So I will say comp2 is equal to computer, right?

355
00:14:59,520 --> 00:15:01,520
So we got comp1, we got comp2.

356
00:15:01,520 --> 00:15:03,120
So in total, we have two objects,

357
00:15:03,120 --> 00:15:05,040
which is comp1 and comp2.

358
00:15:05,040 --> 00:15:07,040
But we have only one class, which is computer.

359
00:15:07,040 --> 00:15:09,120
If I want to call config for comp2,

360
00:15:09,120 --> 00:15:09,760
what you will do?

361
00:15:09,760 --> 00:15:12,640
You will say computer.config,

362
00:15:12,640 --> 00:15:13,680
and this time you're saying,

363
00:15:13,680 --> 00:15:16,320
hey, I want to call config for comp2.

364
00:15:16,320 --> 00:15:17,840
So in the first instance, I'm saying,

365
00:15:17,840 --> 00:15:19,520
Mukesh, walk, right?

366
00:15:19,520 --> 00:15:21,680
Or I will say, hey, human, walk.

367
00:15:21,680 --> 00:15:23,120
In background, I'm passing Mukesh.

368
00:15:23,120 --> 00:15:24,880
I will say, hey, human, walk.

369
00:15:24,880 --> 00:15:26,880
In background, I'm passing Ravi, right?

370
00:15:26,880 --> 00:15:28,400
In the same way here, I'm saying,

371
00:15:28,400 --> 00:15:30,560
hey, computer, show me a configuration,

372
00:15:30,560 --> 00:15:32,080
and I'm talking about comp1.

373
00:15:32,080 --> 00:15:34,720
Hey, computer, I want your configuration for comp2.

374
00:15:34,720 --> 00:15:36,080
So if I run this code, you can see

375
00:15:36,080 --> 00:15:37,200
we are getting same data,

376
00:15:37,200 --> 00:15:40,000
because at this point, we are not changing data

377
00:15:40,000 --> 00:15:40,960
for different objects.

378
00:15:40,960 --> 00:15:42,000
We can do that later.

379
00:15:42,000 --> 00:15:43,040
So this is one way, right?

380
00:15:43,040 --> 00:15:45,440
If you want to call config, we have another way.

381
00:15:45,440 --> 00:15:47,840
If you think about this, this looks good, right?

382
00:15:47,840 --> 00:15:49,760
This looks clean, because we are saying,

383
00:15:49,760 --> 00:15:52,080
hey, config method belongs to computer,

384
00:15:52,080 --> 00:15:54,800
and then we have to pass the object name, which is comp1.

385
00:15:54,800 --> 00:15:55,680
But there is one more way.

386
00:15:55,680 --> 00:15:58,400
What you can do is you can mention comp1.config.

387
00:15:58,400 --> 00:16:01,920
Now, in this case, you are using the object itself

388
00:16:01,920 --> 00:16:03,440
to call the function.

389
00:16:03,440 --> 00:16:06,000
So you're saying comp1.config.

390
00:16:06,080 --> 00:16:07,840
But the question is, we are not passing it, right?

391
00:16:07,840 --> 00:16:09,760
For example, let's do it for comp2 as well.

392
00:16:09,760 --> 00:16:11,680
I will say comp2.config,

393
00:16:11,680 --> 00:16:12,880
and you can see this time,

394
00:16:12,880 --> 00:16:15,520
I'm not passing anything inside config, and still it works.

395
00:16:15,520 --> 00:16:17,040
So you can see the output, it works.

396
00:16:17,040 --> 00:16:18,560
We got four times the same data,

397
00:16:18,560 --> 00:16:20,880
because the first two is because of these lines,

398
00:16:20,880 --> 00:16:24,000
and the second, next two is because of this line, right?

399
00:16:24,000 --> 00:16:25,040
But why is it working?

400
00:16:25,760 --> 00:16:28,480
It's because this is another behavior of it.

401
00:16:28,480 --> 00:16:32,240
So when you say comp1.config, you are calling config.

402
00:16:32,240 --> 00:16:34,800
See, we are specifying which class it is, right?

403
00:16:34,880 --> 00:16:36,560
So comp1 belongs to computer.

404
00:16:36,560 --> 00:16:38,800
So now we know config belongs to computer.

405
00:16:38,800 --> 00:16:40,880
The moment you say comp1.config,

406
00:16:40,880 --> 00:16:43,360
when you're calling it behind the scene,

407
00:16:43,360 --> 00:16:46,480
this config will take comp1 as a parameter.

408
00:16:46,480 --> 00:16:51,120
So behind the scene, config will take that comp1 as an argument,

409
00:16:51,120 --> 00:16:53,680
and it will pass that in self, okay?

410
00:16:53,680 --> 00:16:56,480
So in most of the code, you will see this type of syntax,

411
00:16:56,480 --> 00:16:57,440
not this one.

412
00:16:57,440 --> 00:17:00,080
But I have done this just to explain you

413
00:17:00,080 --> 00:17:01,760
how this syntax linked like, okay?

414
00:17:01,760 --> 00:17:02,880
So how this exactly works,

415
00:17:02,880 --> 00:17:04,240
but normally we use this syntax.

416
00:17:04,240 --> 00:17:05,200
The second one.

417
00:17:05,200 --> 00:17:07,520
And that's why whatever we have done till now,

418
00:17:07,520 --> 00:17:09,680
example, if I work with a variable of n size,

419
00:17:09,680 --> 00:17:12,960
if I say a equal to five, and if I say a dot,

420
00:17:12,960 --> 00:17:14,320
so whatever function we use here,

421
00:17:14,320 --> 00:17:16,160
example, I want to know the bit length.

422
00:17:16,160 --> 00:17:18,800
Now in this thing, you can see if I say control space,

423
00:17:18,800 --> 00:17:20,720
you know, you can actually see the documentation

424
00:17:20,720 --> 00:17:23,920
by clicking on this control and click on the function name.

425
00:17:23,920 --> 00:17:26,560
So press control and click on the function name.

426
00:17:26,560 --> 00:17:27,840
You can see it takes to the function,

427
00:17:27,840 --> 00:17:30,400
it says bit length self.

428
00:17:30,400 --> 00:17:33,280
So as a definition, it is accepting self,

429
00:17:33,280 --> 00:17:34,640
but when you're passing it,

430
00:17:34,640 --> 00:17:36,640
when you're calling bit length, we're not passing it.

431
00:17:36,640 --> 00:17:38,400
So this a is an object, right?

432
00:17:38,400 --> 00:17:40,400
It goes as a parameter.

433
00:17:40,400 --> 00:17:42,720
So self is the object which you're passing.

434
00:17:42,720 --> 00:17:45,440
We'll discuss more about that once we start with variables

435
00:17:45,440 --> 00:17:47,200
and then attributes, all the stuff.

436
00:17:47,200 --> 00:17:49,200
But time being, this is how you create a class

437
00:17:49,200 --> 00:17:50,400
and that's how you create an object.

438
00:17:55,280 --> 00:17:56,080
Now in the last video,

439
00:17:56,080 --> 00:17:58,160
we have talked about oops concept, right?

440
00:17:58,160 --> 00:18:00,560
We have seen what is object and a class.

441
00:18:01,120 --> 00:18:02,720
Let's explore it more.

442
00:18:02,800 --> 00:18:04,800
Now if you remember, when we talked about objects,

443
00:18:04,800 --> 00:18:06,480
object will be having two stuff, right?

444
00:18:06,480 --> 00:18:08,560
One is it will be having some attributes

445
00:18:08,560 --> 00:18:10,320
and it will also have a behavior.

446
00:18:10,320 --> 00:18:12,560
Now when you say attributes, those are variables, right?

447
00:18:12,560 --> 00:18:14,080
We can create variables.

448
00:18:14,080 --> 00:18:15,920
And behavior is your methods

449
00:18:15,920 --> 00:18:18,640
and then methods are almost same as functions,

450
00:18:18,640 --> 00:18:21,360
but in oops, we call them as methods, right?

451
00:18:21,360 --> 00:18:24,240
Now here, we have to work with methods, right?

452
00:18:24,240 --> 00:18:26,320
We have not worked with variables yet.

453
00:18:26,320 --> 00:18:28,000
So what I will do is just to demonstrate that,

454
00:18:28,000 --> 00:18:29,600
let me just remove this thing here

455
00:18:29,600 --> 00:18:32,080
because we know that we can call config

456
00:18:32,080 --> 00:18:33,440
using the object itself

457
00:18:33,440 --> 00:18:35,120
or we can call it with the help of class

458
00:18:35,120 --> 00:18:36,560
by passing the object.

459
00:18:36,560 --> 00:18:39,280
Now syntactically, we normally go for the second one

460
00:18:39,280 --> 00:18:41,600
which is calling the method from the object.

461
00:18:41,600 --> 00:18:43,440
It makes much more sense, right?

462
00:18:43,440 --> 00:18:44,720
So we'll remove that part.

463
00:18:44,720 --> 00:18:46,320
And so once we got the object,

464
00:18:46,320 --> 00:18:48,960
let's remove this A as well just to clean that stuff here.

465
00:18:48,960 --> 00:18:51,840
Now what I will do is I want to have certain variables.

466
00:18:51,840 --> 00:18:54,000
Now when I say variables, what I want to do is,

467
00:18:54,000 --> 00:18:56,240
I want to have two variables,

468
00:18:56,240 --> 00:18:59,760
one which defines the type of CPU I'm working with

469
00:18:59,760 --> 00:19:01,200
and the amount of RAM I have.

470
00:19:01,200 --> 00:19:02,960
Example, if you talk about any computer,

471
00:19:02,960 --> 00:19:04,160
these two are very important, right?

472
00:19:04,160 --> 00:19:06,800
The CPU which you are using and a RAM,

473
00:19:06,800 --> 00:19:08,720
maybe 8GB RAM or 16GB RAM.

474
00:19:08,720 --> 00:19:12,000
And in terms of CPU, we have let's say i3, i5, i7

475
00:19:12,000 --> 00:19:13,600
or maybe some AMD series.

476
00:19:13,600 --> 00:19:15,440
Okay, we have different parameters as well,

477
00:19:15,440 --> 00:19:16,800
but just to keep it simple,

478
00:19:16,800 --> 00:19:18,000
let's only focus on two things,

479
00:19:18,000 --> 00:19:19,760
CPU and RAM capacity.

480
00:19:19,760 --> 00:19:21,600
Now when you say we have two variables,

481
00:19:21,600 --> 00:19:22,560
where do you find that?

482
00:19:22,560 --> 00:19:24,400
So we can use a special method

483
00:19:24,400 --> 00:19:25,920
which is available in a class.

484
00:19:25,920 --> 00:19:27,600
Now when I say special, you know, right?

485
00:19:27,600 --> 00:19:28,960
So the moment you say special,

486
00:19:28,960 --> 00:19:30,400
we have talked about special variable

487
00:19:30,480 --> 00:19:32,000
which is underscore underscore name

488
00:19:32,000 --> 00:19:34,160
in the same way we have special method

489
00:19:34,160 --> 00:19:35,440
which is init.

490
00:19:35,440 --> 00:19:36,320
And when I say special,

491
00:19:36,320 --> 00:19:38,800
it will be having underscores as well.

492
00:19:38,800 --> 00:19:39,680
So let's define that.

493
00:19:39,680 --> 00:19:42,160
So we'll say def underscore underscore init.

494
00:19:42,160 --> 00:19:44,320
You can see that we are getting suggestions as well.

495
00:19:44,320 --> 00:19:45,680
And the moment I say enter,

496
00:19:45,680 --> 00:19:48,320
you can see we have the function name or the method name

497
00:19:48,320 --> 00:19:50,960
as init and we are passing self.

498
00:19:50,960 --> 00:19:52,480
Now see, self is not something

499
00:19:52,480 --> 00:19:54,480
which I'm typing that is coming automatically.

500
00:19:54,480 --> 00:19:56,960
So it's compulsory to have those argument, okay,

501
00:19:56,960 --> 00:19:57,920
which is self.

502
00:19:57,920 --> 00:19:59,760
And in here, we can do something.

503
00:19:59,760 --> 00:20:02,560
Normally we use init to initialize the variables, okay?

504
00:20:02,560 --> 00:20:05,360
And that's what the name itself init initialize, right?

505
00:20:05,360 --> 00:20:08,400
Now if you are coming from C, C++ or Java background,

506
00:20:08,400 --> 00:20:09,600
we use constructor, right?

507
00:20:09,600 --> 00:20:12,160
So you can imagine this is our constructor,

508
00:20:12,160 --> 00:20:13,920
but then it is init method.

509
00:20:13,920 --> 00:20:15,760
The advantage here is normally,

510
00:20:15,760 --> 00:20:17,520
see, if you want to work with config,

511
00:20:17,520 --> 00:20:19,440
you are supposed to call config, okay?

512
00:20:19,440 --> 00:20:21,760
So it's compulsory for you to call config.

513
00:20:21,760 --> 00:20:23,520
Otherwise it will not get executed.

514
00:20:23,520 --> 00:20:25,120
The idea behind init is,

515
00:20:25,120 --> 00:20:27,040
it will be getting called automatically.

516
00:20:27,040 --> 00:20:29,920
Example, if I go back here and let's say,

517
00:20:29,920 --> 00:20:32,480
I want to print something and I will print in init.

518
00:20:32,480 --> 00:20:34,800
So you can see I have defined a function called init

519
00:20:34,800 --> 00:20:35,600
and not calling it, okay?

520
00:20:35,600 --> 00:20:37,600
So anywhere in the code, I'm not calling init.

521
00:20:37,600 --> 00:20:39,600
I'm calling config because I want to execute it.

522
00:20:39,600 --> 00:20:41,280
The moment I run this code,

523
00:20:41,280 --> 00:20:43,120
you can see it prints in init

524
00:20:43,120 --> 00:20:44,480
and that way it prints two times.

525
00:20:44,480 --> 00:20:45,360
Now why two times?

526
00:20:45,360 --> 00:20:48,480
Because for every object, it will get called once.

527
00:20:48,480 --> 00:20:51,360
So you can see in total, I'm getting two objects.

528
00:20:51,360 --> 00:20:53,600
One is com one, one second is com two.

529
00:20:53,600 --> 00:20:56,800
So we got two objects and it will call init two times.

530
00:20:56,800 --> 00:20:57,920
So this is the object creation.

531
00:20:57,920 --> 00:21:00,480
So when you say computer bracket, it will instantiate.

532
00:21:00,480 --> 00:21:02,160
It will call init for you.

533
00:21:02,160 --> 00:21:05,920
Now I want to pass some arguments, okay?

534
00:21:05,920 --> 00:21:07,600
I want to pass CPU and RAM.

535
00:21:07,600 --> 00:21:10,320
So in the constructor itself, you can pass that.

536
00:21:10,320 --> 00:21:12,560
So in the computer bracket itself, you can pass it.

537
00:21:12,560 --> 00:21:15,920
So I can say I have a CPU here, which is let's say i5

538
00:21:15,920 --> 00:21:18,240
and the amount of RAM we have is 16 GB.

539
00:21:18,240 --> 00:21:20,240
The second computer we have, let's say,

540
00:21:20,240 --> 00:21:23,200
reason three and the amount of RAM we have, let's say 8 GB.

541
00:21:23,200 --> 00:21:25,600
So we have two computers with two different CPUs, right?

542
00:21:25,600 --> 00:21:27,920
And now how to accept these values?

543
00:21:27,920 --> 00:21:30,480
So of course you have to pass these values here, right?

544
00:21:30,480 --> 00:21:33,120
So you have to say self comma, you have to pass two values.

545
00:21:33,120 --> 00:21:34,800
You have to accept these two values.

546
00:21:34,800 --> 00:21:37,840
So you have to say CPU comma RAM, okay?

547
00:21:37,840 --> 00:21:38,960
That's how you accept it.

548
00:21:38,960 --> 00:21:40,080
Now I know your question.

549
00:21:40,080 --> 00:21:43,040
Your question is we are passing two parameters, right?

550
00:21:43,040 --> 00:21:44,240
Or we are passing two arguments.

551
00:21:44,240 --> 00:21:46,160
One is CPU and second is RAM.

552
00:21:46,160 --> 00:21:48,640
And we are accepting the arguments here.

553
00:21:48,640 --> 00:21:51,600
So the thing is, you are actually passing three arguments here.

554
00:21:51,600 --> 00:21:53,840
Remember, we are also passing comp one.

555
00:21:53,840 --> 00:21:55,840
The moment you say computer in the back end,

556
00:21:55,840 --> 00:21:58,480
you are passing that comp one by default.

557
00:21:58,480 --> 00:22:00,400
The same thing happened with config, right?

558
00:22:00,400 --> 00:22:04,320
When we call config, we are not passing self or the object itself.

559
00:22:04,320 --> 00:22:06,480
But it gets passed automatically.

560
00:22:06,480 --> 00:22:09,360
The same way, when you say computer by passing two parameters,

561
00:22:09,360 --> 00:22:10,400
you're actually passing three.

562
00:22:10,400 --> 00:22:11,920
The first one is the object itself.

563
00:22:11,920 --> 00:22:15,040
The second one, the value, the first value here and then RAM.

564
00:22:15,040 --> 00:22:16,240
Okay, that makes sense.

565
00:22:16,240 --> 00:22:17,200
But will it work?

566
00:22:17,200 --> 00:22:19,440
So the thing is, every object need to have a value

567
00:22:19,440 --> 00:22:21,680
because this is just an argument now.

568
00:22:21,680 --> 00:22:23,840
So CPU and RAM is just an argument.

569
00:22:23,840 --> 00:22:25,920
If you want it to be a part of your object,

570
00:22:25,920 --> 00:22:27,600
you need to say, because see,

571
00:22:27,600 --> 00:22:30,240
we have to assign this value to an object, right?

572
00:22:30,240 --> 00:22:32,400
And the object here is self, right?

573
00:22:32,400 --> 00:22:34,160
So you have to say self dot.

574
00:22:34,160 --> 00:22:34,720
That's right, right?

575
00:22:34,720 --> 00:22:36,560
So this comp one, this is our object, right?

576
00:22:36,560 --> 00:22:40,880
So we have to say self dot CPU is equal to CPU.

577
00:22:40,880 --> 00:22:43,600
Again, there's no compulsion that you should be having same name.

578
00:22:43,600 --> 00:22:44,400
You can have a different name.

579
00:22:44,400 --> 00:22:45,200
That's fine.

580
00:22:45,200 --> 00:22:48,240
So you will say self dot RAM is equal to RAM.

581
00:22:48,240 --> 00:22:49,520
So whatever value you're passing here,

582
00:22:49,520 --> 00:22:52,640
which is I5 goes to the CPU as an argument.

583
00:22:52,640 --> 00:22:55,360
It will be assigned to the object, which is self.

584
00:22:55,360 --> 00:22:56,720
So the self, you can imagine now.

585
00:22:56,720 --> 00:22:59,120
So in the background, you can see we have two objects here.

586
00:22:59,120 --> 00:23:00,880
So in total, we've got two objects.

587
00:23:00,880 --> 00:23:03,040
Each object will have its own variables.

588
00:23:03,040 --> 00:23:04,480
Okay, it will have its own CPU.

589
00:23:04,480 --> 00:23:06,160
It will have its own RAM.

590
00:23:06,160 --> 00:23:08,880
And then whatever value you pass in the arguments,

591
00:23:08,880 --> 00:23:10,720
it will be assigned to those objects.

592
00:23:10,720 --> 00:23:13,040
Okay, so we have two objects, two different values.

593
00:23:13,040 --> 00:23:15,520
And now in the config, instead of printing this stuff,

594
00:23:15,520 --> 00:23:19,360
I will say CPU comma RAM.

595
00:23:19,360 --> 00:23:20,400
That's what we do.

596
00:23:20,400 --> 00:23:21,840
Oh, we got an error.

597
00:23:21,840 --> 00:23:22,720
What's wrong here?

598
00:23:22,720 --> 00:23:25,280
So the thing is, this CPU is not a local variable, right?

599
00:23:25,280 --> 00:23:27,200
This CPU belongs to an object.

600
00:23:27,200 --> 00:23:28,560
And how do we refer to object?

601
00:23:28,560 --> 00:23:29,200
It's very simple.

602
00:23:29,200 --> 00:23:30,080
You have to use self, right?

603
00:23:30,080 --> 00:23:31,120
That's why you are passing it.

604
00:23:31,120 --> 00:23:34,240
So you have to say self dot CPU.

605
00:23:34,240 --> 00:23:36,560
And here as well, you have to say self dot RAM.

606
00:23:36,560 --> 00:23:39,200
And that's the idea behind passing this self, right?

607
00:23:39,200 --> 00:23:43,120
We are passing self so that you can use it to fetch the values.

608
00:23:43,120 --> 00:23:46,480
So you can imagine your methods and your data works together.

609
00:23:46,480 --> 00:23:48,480
And we have a name for this concept.

610
00:23:48,480 --> 00:23:49,840
Again, we'll talk about that name later.

611
00:23:49,840 --> 00:23:50,640
It's a surprise.

612
00:23:50,640 --> 00:23:54,480
But we are binding our data with every method.

613
00:23:54,480 --> 00:23:58,960
So one object will have its own methods and its own variables, right?

614
00:23:58,960 --> 00:24:00,080
So they are working together.

615
00:24:00,720 --> 00:24:02,800
And now let's run this code and let's see what happens.

616
00:24:02,800 --> 00:24:04,560
So the moment you run this code, you can see it says,

617
00:24:04,560 --> 00:24:08,480
config is i5-16 and config is raisin-3-8.

618
00:24:08,480 --> 00:24:09,600
So that's the idea.

619
00:24:09,600 --> 00:24:11,280
That's how you create a variable.

620
00:24:11,280 --> 00:24:13,440
So every object will have its own values.

621
00:24:13,440 --> 00:24:14,160
That's amazing.

622
00:24:19,120 --> 00:24:21,920
In the last video, we have talked about OOPS concept, right?

623
00:24:21,920 --> 00:24:23,280
We have talked about objects.

624
00:24:23,280 --> 00:24:24,960
We have talked about classes.

625
00:24:24,960 --> 00:24:28,080
And then somewhere we have talked about init, right?

626
00:24:28,080 --> 00:24:30,400
In this video, we'll focus on two concepts.

627
00:24:30,400 --> 00:24:33,360
One is constructor and self.

628
00:24:33,360 --> 00:24:33,920
But hold on.

629
00:24:33,920 --> 00:24:36,160
We have seen self before, right?

630
00:24:36,160 --> 00:24:38,240
But let's try to expand more of it, okay?

631
00:24:38,240 --> 00:24:40,960
Because self is something which is very easy to understand.

632
00:24:40,960 --> 00:24:43,120
At the same time, it is a bit confusing, okay?

633
00:24:43,120 --> 00:24:44,400
So we'll try to get that.

634
00:24:44,400 --> 00:24:46,560
And then we also talk about constructor.

635
00:24:46,560 --> 00:24:49,520
Now in the last video, we have talked about init, right?

636
00:24:49,520 --> 00:24:51,440
Now init is actually a constructor.

637
00:24:51,440 --> 00:24:52,880
But why this course constructor?

638
00:24:52,880 --> 00:24:54,080
We'll see that here.

639
00:24:54,080 --> 00:24:55,440
And why this is so important?

640
00:24:55,440 --> 00:24:57,360
So what we'll do is let's remove this thing.

641
00:24:57,360 --> 00:24:59,280
And let's see a computer class again.

642
00:24:59,280 --> 00:25:00,640
Let's go back to computer class.

643
00:25:00,640 --> 00:25:01,600
So this is a class, right?

644
00:25:01,600 --> 00:25:04,800
And of course, every class will have an object, right?

645
00:25:04,800 --> 00:25:07,760
As we mentioned, we have a concept of a design, right?

646
00:25:07,760 --> 00:25:10,240
So this computer class is a design.

647
00:25:10,240 --> 00:25:12,400
And then we need to create an object of it.

648
00:25:12,400 --> 00:25:15,520
So what I will do is I will say C1 is equal to computer.

649
00:25:15,520 --> 00:25:17,840
Now this computer here is an object, right?

650
00:25:17,840 --> 00:25:19,200
I mean, this C1 is an object.

651
00:25:19,200 --> 00:25:22,080
Or you can say C1 is referring to the object.

652
00:25:22,080 --> 00:25:24,320
So what happens, you know, in your system,

653
00:25:24,320 --> 00:25:27,600
we have a special memory called as heap memory.

654
00:25:27,600 --> 00:25:31,120
Now inside this heap memory, you will get all the objects, right?

655
00:25:31,120 --> 00:25:33,120
Example, the moment you say you want an object now,

656
00:25:33,120 --> 00:25:36,080
if you remember, we have talked about integers, string,

657
00:25:36,080 --> 00:25:38,400
everything is object in Python, right?

658
00:25:38,400 --> 00:25:42,640
Now in this scenario, here, this object will take some space

659
00:25:42,640 --> 00:25:44,480
in your heap memory.

660
00:25:44,480 --> 00:25:46,960
Now, every space will have some address, right?

661
00:25:46,960 --> 00:25:49,360
We have talked about ID function, remember?

662
00:25:49,360 --> 00:25:53,920
So we can use an ID function here and we can print the value of C1.

663
00:25:53,920 --> 00:25:55,520
So we can print the address.

664
00:25:55,520 --> 00:25:57,760
So of course, this object is created somewhere

665
00:25:57,760 --> 00:25:59,600
and we need to print the address as well.

666
00:25:59,600 --> 00:26:01,600
And the way you can print the address is by saying,

667
00:26:01,600 --> 00:26:04,640
print, I want to print the address of C1.

668
00:26:04,640 --> 00:26:05,440
Let's do that.

669
00:26:05,440 --> 00:26:06,720
Oh, we are getting an error.

670
00:26:06,720 --> 00:26:08,720
Now, if you remember, we have talked about this stuff.

671
00:26:08,720 --> 00:26:10,320
So I'm keeping this class empty, right?

672
00:26:10,320 --> 00:26:11,280
We cannot do that.

673
00:26:11,280 --> 00:26:13,840
So let's write pass because I have not mentioned anything

674
00:26:13,840 --> 00:26:14,960
in the class here.

675
00:26:14,960 --> 00:26:15,840
So let's write pass.

676
00:26:15,840 --> 00:26:16,800
Let's run this code now.

677
00:26:17,360 --> 00:26:21,520
And you can see we got the output as 155 with the number, right?

678
00:26:21,520 --> 00:26:23,280
Now, this is an address, okay?

679
00:26:23,280 --> 00:26:25,840
So this is the address of that memory.

680
00:26:25,840 --> 00:26:28,000
Now, what happens if I create another object?

681
00:26:28,000 --> 00:26:31,040
Let's say if I say C2 equal to computer,

682
00:26:31,040 --> 00:26:32,640
now we are creating another object, right?

683
00:26:32,640 --> 00:26:34,720
So in total, we got two objects.

684
00:26:34,720 --> 00:26:37,040
So will it take different space or will it be accommodated

685
00:26:37,040 --> 00:26:37,760
in the same place?

686
00:26:37,760 --> 00:26:39,600
Of course, we have talked about this before

687
00:26:39,600 --> 00:26:41,520
when we talked about integers, allocation.

688
00:26:41,520 --> 00:26:44,000
If I run this code, you can see we got different addresses.

689
00:26:44,000 --> 00:26:45,360
And again, every time you run this code,

690
00:26:45,360 --> 00:26:46,640
you will get different address, right?

691
00:26:46,640 --> 00:26:48,160
Because every time you run this code,

692
00:26:48,160 --> 00:26:50,000
it will create a new object for you.

693
00:26:50,000 --> 00:26:51,680
So this time we got two new objects.

694
00:26:51,680 --> 00:26:54,000
Now, if I run this again, we will get two different objects,

695
00:26:54,000 --> 00:26:55,120
not the same object again, right?

696
00:26:55,120 --> 00:26:56,640
Because this is new execution.

697
00:26:56,640 --> 00:26:59,840
So point to remember is every time you create the object,

698
00:26:59,840 --> 00:27:01,920
it will take two different spaces.

699
00:27:01,920 --> 00:27:04,560
Now, for sure, how much space it will take?

700
00:27:05,120 --> 00:27:08,240
Maybe one MB, maybe one KB, maybe five KB.

701
00:27:08,240 --> 00:27:11,200
So who will decide and who will allocate the memory?

702
00:27:11,200 --> 00:27:14,000
Now, first of all, the size of the object

703
00:27:14,000 --> 00:27:15,840
is dependent upon the number of variables we have

704
00:27:15,840 --> 00:27:17,360
or the attributes, remember?

705
00:27:17,360 --> 00:27:20,000
If this class has five variables of different type,

706
00:27:20,000 --> 00:27:21,760
it depends upon how much data you pass,

707
00:27:21,760 --> 00:27:23,440
it will change the size of it, okay?

708
00:27:23,440 --> 00:27:25,680
So the size of the object is dependent upon

709
00:27:25,680 --> 00:27:27,920
the size of the variables and number of variables.

710
00:27:28,560 --> 00:27:31,360
But who is responsible to assign that memory?

711
00:27:31,360 --> 00:27:33,840
Or who is responsible to calculate the memory?

712
00:27:33,920 --> 00:27:35,840
And that's your constructor.

713
00:27:35,840 --> 00:27:38,240
Now, this thing here, which is computer brackets,

714
00:27:38,240 --> 00:27:39,920
this is your constructor, right?

715
00:27:39,920 --> 00:27:41,280
So whenever you write a constructor,

716
00:27:41,280 --> 00:27:43,360
it will call the init method for you.

717
00:27:43,360 --> 00:27:45,360
Of course, you don't have to call it explicitly,

718
00:27:45,360 --> 00:27:46,880
it will be called internally.

719
00:27:47,520 --> 00:27:48,960
Now, let me define some variables here.

720
00:27:48,960 --> 00:27:50,880
How do we create a variables, right?

721
00:27:50,880 --> 00:27:53,760
So how do we define a variable for the object?

722
00:27:53,760 --> 00:27:55,600
Now, in this case, if you want to define a variable,

723
00:27:55,600 --> 00:27:58,400
we have one choice, which you can define a function,

724
00:27:58,400 --> 00:27:59,200
which is init.

725
00:27:59,200 --> 00:28:00,560
Again, we have seen that.

726
00:28:00,560 --> 00:28:02,240
So this is the init function, right?

727
00:28:02,240 --> 00:28:03,840
Now, it uses self, but as of now,

728
00:28:03,840 --> 00:28:06,320
we'll not talk about self, we'll continue here.

729
00:28:06,320 --> 00:28:07,520
And I will use two variables.

730
00:28:07,520 --> 00:28:08,640
Again, we have talked about this,

731
00:28:08,640 --> 00:28:10,480
but let me just do it once again.

732
00:28:10,480 --> 00:28:12,080
I will say self.h.

733
00:28:12,080 --> 00:28:13,440
I want to have two attributes.

734
00:28:13,440 --> 00:28:14,400
One is name.

735
00:28:14,400 --> 00:28:17,440
I will say name is Navin and age.

736
00:28:17,440 --> 00:28:19,040
So let's say age is equal to 28.

737
00:28:19,040 --> 00:28:21,760
So we got two things, we got name and we got age.

738
00:28:21,760 --> 00:28:24,080
Now, both the object will have the same values, right?

739
00:28:24,080 --> 00:28:25,600
So you can imagine we have two objects

740
00:28:25,600 --> 00:28:27,360
and both the objects have the same value.

741
00:28:27,920 --> 00:28:29,040
If I want to change it,

742
00:28:29,040 --> 00:28:31,280
if I want to change the value of one object,

743
00:28:31,280 --> 00:28:33,120
the way you can do that is, in fact,

744
00:28:33,120 --> 00:28:36,000
instead of printing IDs, I want to change it now

745
00:28:36,000 --> 00:28:38,160
because of course, the IDs will print different now.

746
00:28:38,160 --> 00:28:38,960
We know that.

747
00:28:38,960 --> 00:28:40,400
So we'll say c1.

748
00:28:40,400 --> 00:28:42,240
I want to print name of c1

749
00:28:42,240 --> 00:28:44,160
and I want to print the name of c2 as well.

750
00:28:44,880 --> 00:28:45,760
So what will happen?

751
00:28:45,760 --> 00:28:47,760
Will it print the same data or different data?

752
00:28:47,760 --> 00:28:48,240
That's a question.

753
00:28:48,240 --> 00:28:50,000
So let's run this code and you can see

754
00:28:50,000 --> 00:28:51,920
they are printing Navin, of course, right?

755
00:28:51,920 --> 00:28:54,160
Because the moment you create the object,

756
00:28:54,160 --> 00:28:55,680
both will have the same value

757
00:28:55,680 --> 00:28:58,000
because that is what by default you're getting.

758
00:28:58,000 --> 00:29:00,480
If you want to assign your own values,

759
00:29:00,560 --> 00:29:01,840
you have two choices here.

760
00:29:01,840 --> 00:29:03,280
What we can do is, before printing it,

761
00:29:03,280 --> 00:29:04,400
we can change the value for c1.

762
00:29:04,400 --> 00:29:07,280
We can say c1.name is equal to Rashi.

763
00:29:07,280 --> 00:29:08,640
So we are changing the name, right?

764
00:29:08,640 --> 00:29:10,400
And now if I run this code,

765
00:29:10,400 --> 00:29:12,640
you can see we got Rashi and we got Navin.

766
00:29:12,640 --> 00:29:14,080
So of course, c1 is different objects.

767
00:29:14,080 --> 00:29:16,160
c2 is different object and we got different names.

768
00:29:16,160 --> 00:29:17,840
So that perfectly makes sense.

769
00:29:17,840 --> 00:29:19,760
We can change the age of c1.

770
00:29:19,760 --> 00:29:22,080
We can say c1.age is listed 12.

771
00:29:22,080 --> 00:29:24,160
We've got Rashi with age 12.

772
00:29:24,160 --> 00:29:26,080
And of course, we are not printing age here

773
00:29:26,080 --> 00:29:26,960
but we can do that.

774
00:29:26,960 --> 00:29:29,440
So we can change the value of one object

775
00:29:29,440 --> 00:29:30,240
from different objects.

776
00:29:30,320 --> 00:29:32,160
But of course, there are two different entities.

777
00:29:32,160 --> 00:29:34,080
So remember this, we got two different objects

778
00:29:34,080 --> 00:29:36,400
and both the objects will have different variables.

779
00:29:36,400 --> 00:29:37,600
Okay, you can assign the values there.

780
00:29:37,600 --> 00:29:39,120
You can change it your wish.

781
00:29:39,120 --> 00:29:40,400
Now, question arise.

782
00:29:40,400 --> 00:29:42,560
Why do we need this self?

783
00:29:42,560 --> 00:29:44,400
So what I will do is just to explain that,

784
00:29:44,400 --> 00:29:46,080
let me take one more method here.

785
00:29:46,080 --> 00:29:47,440
We'll say def update.

786
00:29:47,440 --> 00:29:49,840
Okay, so I'm changing the value of something.

787
00:29:49,840 --> 00:29:50,880
And the moment I say update,

788
00:29:50,880 --> 00:29:52,720
I want to change age.

789
00:29:52,720 --> 00:29:55,840
I will assign new age and we'll say age is let's say 30.

790
00:29:56,720 --> 00:29:58,400
So we are changing the age now, right?

791
00:29:58,480 --> 00:30:01,120
So we got a method which will change the age totally.

792
00:30:01,680 --> 00:30:03,920
Now, I want to call update.

793
00:30:03,920 --> 00:30:06,000
Now, how do you call update with the help of class name

794
00:30:06,000 --> 00:30:07,840
or with the help of object name?

795
00:30:08,560 --> 00:30:09,760
Let's try with objects.

796
00:30:09,760 --> 00:30:11,760
I will say c1.update.

797
00:30:12,400 --> 00:30:14,000
Now see, we have two different objects, right?

798
00:30:14,000 --> 00:30:15,520
So what is program execution, right?

799
00:30:15,520 --> 00:30:16,880
So execution will start from here.

800
00:30:17,520 --> 00:30:19,600
You got the object, you got the object,

801
00:30:19,600 --> 00:30:21,520
you are changing the names and everything is fine.

802
00:30:22,080 --> 00:30:24,480
The moment you say c1.update,

803
00:30:24,480 --> 00:30:26,480
your pointer, which is your focus,

804
00:30:26,480 --> 00:30:29,520
will move towards this update function of update method.

805
00:30:29,520 --> 00:30:30,880
So it is executing it, right?

806
00:30:31,520 --> 00:30:33,200
Update will say, okay, I'm getting called.

807
00:30:33,200 --> 00:30:34,560
I belong to a class computer.

808
00:30:34,560 --> 00:30:35,840
My job is to do something.

809
00:30:35,840 --> 00:30:38,160
My job is to change the value of age.

810
00:30:38,160 --> 00:30:39,680
But hold on, we got two objects.

811
00:30:40,320 --> 00:30:42,000
Which value you want to change, right?

812
00:30:42,000 --> 00:30:43,680
Because we are calling update.

813
00:30:43,680 --> 00:30:46,560
And we are not mentioning which object I'm talking about

814
00:30:46,560 --> 00:30:48,400
because when you call this update,

815
00:30:48,400 --> 00:30:50,320
we have not mentioned is it c1 or c2.

816
00:30:50,320 --> 00:30:51,600
We have mentioned that by calling it.

817
00:30:51,600 --> 00:30:53,600
So we are saying c1.update.

818
00:30:53,600 --> 00:30:56,080
But we are not passing anything in the bracket.

819
00:30:56,080 --> 00:30:58,320
So when you're calling it, when you're calling update,

820
00:30:58,320 --> 00:31:02,000
how your pointer will know which object I'm talking about.

821
00:31:02,000 --> 00:31:04,960
Is it the c1 age or is it the c2 age?

822
00:31:04,960 --> 00:31:07,520
And that's where you need to use self.

823
00:31:07,520 --> 00:31:09,280
So this self is a pointer.

824
00:31:09,280 --> 00:31:12,320
Or you can say self is directing to c1 or c2.

825
00:31:12,320 --> 00:31:13,520
So we have two objects.

826
00:31:13,520 --> 00:31:15,840
This self will direct either on c1 or c2

827
00:31:15,840 --> 00:31:17,760
based on what you're calling.

828
00:31:17,760 --> 00:31:19,360
So if you're saying c1.update,

829
00:31:19,360 --> 00:31:21,120
then in the bracket, it is passing c1.

830
00:31:21,120 --> 00:31:23,680
So self will be assigned to c1, okay?

831
00:31:23,680 --> 00:31:25,920
So that's the importance of that self.

832
00:31:25,920 --> 00:31:28,480
It is very important because it is referring to the object.

833
00:31:28,480 --> 00:31:29,840
If you have 10 objects,

834
00:31:29,840 --> 00:31:32,080
and if you want to refer to one object, you can use self.

835
00:31:32,080 --> 00:31:34,400
So it is the current instance you can say.

836
00:31:34,400 --> 00:31:35,440
Even if you have 10 objects,

837
00:31:35,440 --> 00:31:38,240
at one point you're working with one object, that is self.

838
00:31:39,040 --> 00:31:40,400
I hope that makes sense.

839
00:31:40,400 --> 00:31:41,280
So that is self, right?

840
00:31:41,280 --> 00:31:44,240
So we have talked about constructor and self here.

841
00:31:44,240 --> 00:31:46,000
Let me show you one more thing.

842
00:31:46,000 --> 00:31:48,400
What if I want to compare two objects here, okay?

843
00:31:48,400 --> 00:31:49,200
So I want to compare.

844
00:31:49,200 --> 00:31:52,240
Let's say we have c1, c2, and both have same names, right?

845
00:31:52,240 --> 00:31:54,640
So they have same name and they have same age.

846
00:31:54,640 --> 00:31:56,480
But let's say I want to compare the age.

847
00:31:56,480 --> 00:31:59,040
So I will say if c1 is equal to equal to c2.

848
00:31:59,040 --> 00:32:01,440
So I want to compare two people based on their age.

849
00:32:01,440 --> 00:32:03,760
If their age is same, I want to print their same.

850
00:32:03,760 --> 00:32:08,480
So I will say c1 is equal to equal to c2, print, they are the same.

851
00:32:08,480 --> 00:32:09,120
So let's do that.

852
00:32:09,120 --> 00:32:11,120
So I want to check if both the objects are same,

853
00:32:11,120 --> 00:32:12,640
then I will print their same.

854
00:32:12,640 --> 00:32:15,520
But then I don't want to compare the object address, right?

855
00:32:15,520 --> 00:32:17,600
I want to compare their values.

856
00:32:17,600 --> 00:32:18,800
I want to compare their age.

857
00:32:18,800 --> 00:32:20,160
Name doesn't matter if name is different.

858
00:32:20,160 --> 00:32:21,760
What is what should be same is age.

859
00:32:22,320 --> 00:32:24,800
Now in this case, we cannot simply say c1 equal to c2

860
00:32:24,800 --> 00:32:28,160
because we don't know, your Python don't know how to compare.

861
00:32:28,160 --> 00:32:33,040
So in this case, what you will do is, you will use a separate function to do that.

862
00:32:33,040 --> 00:32:36,000
I will say, hey, I want to compare c1 with c2.

863
00:32:36,000 --> 00:32:40,080
So I will say c1, compare, and you can pass c2

864
00:32:40,080 --> 00:32:41,040
because we are comparing it.

865
00:32:41,040 --> 00:32:43,680
Well, again, this compare is not an inbuilt function.

866
00:32:43,680 --> 00:32:46,320
So if I click on this, you can see it says,

867
00:32:46,320 --> 00:32:48,560
cannot find declaration to go to something.

868
00:32:48,560 --> 00:32:52,720
The thing is, compare is not an inbuilt method we have.

869
00:32:52,720 --> 00:32:55,280
So in order to work with compare, you have to define your function.

870
00:32:55,280 --> 00:32:57,120
You have to say, compare.

871
00:32:57,120 --> 00:33:00,080
And in this compare, of course, you have to pass self.

872
00:33:00,080 --> 00:33:04,320
And then you have to also pass one more object, which is of c2.

873
00:33:04,320 --> 00:33:04,880
Right?

874
00:33:04,880 --> 00:33:06,160
So we are comparing two objects.

875
00:33:06,160 --> 00:33:06,320
Right?

876
00:33:06,320 --> 00:33:07,600
So we have to pass self.

877
00:33:07,600 --> 00:33:08,960
So what is self here?

878
00:33:08,960 --> 00:33:13,360
So the c1 becomes self and c2 becomes c2.

879
00:33:13,360 --> 00:33:14,400
Again, you can change in the name.

880
00:33:14,400 --> 00:33:15,120
You see your choice, right?

881
00:33:15,120 --> 00:33:17,360
You can say other, right?

882
00:33:17,440 --> 00:33:18,960
So you're comparing self with other.

883
00:33:18,960 --> 00:33:21,520
So c1 becomes self and c2 becomes other.

884
00:33:21,520 --> 00:33:24,320
Now, why c1 becomes self is because c1 is calling it.

885
00:33:24,320 --> 00:33:27,120
So c1 is comparing itself with c2.

886
00:33:27,120 --> 00:33:27,920
You can reverse it.

887
00:33:27,920 --> 00:33:30,640
You can say c2.compare c1.

888
00:33:30,640 --> 00:33:34,080
In that case, c2 becomes self and c1 becomes other.

889
00:33:34,080 --> 00:33:34,560
Right?

890
00:33:34,560 --> 00:33:37,440
And now once you have this self and other, you can compare.

891
00:33:37,440 --> 00:33:45,120
If self.h is equal to equal to other.h, you will return true.

892
00:33:46,080 --> 00:33:49,200
Else return false.

893
00:33:49,200 --> 00:33:50,640
In fact, you could have done that in one line.

894
00:33:50,640 --> 00:33:52,720
But just to make it look good, I'm doing this.

895
00:33:52,720 --> 00:33:54,240
And now you can compare it.

896
00:33:54,240 --> 00:33:54,640
Right?

897
00:33:54,640 --> 00:33:58,160
So they don't have same age because we are changing it after update.

898
00:33:58,160 --> 00:33:59,680
Let's remove the update part here.

899
00:33:59,680 --> 00:34:00,880
They have the same age.

900
00:34:00,880 --> 00:34:01,120
Right?

901
00:34:01,120 --> 00:34:03,920
Let's run this demo and you can see, oh, we got an error.

902
00:34:03,920 --> 00:34:06,000
We forgot to put a code in there.

903
00:34:06,000 --> 00:34:06,480
My bad.

904
00:34:07,120 --> 00:34:08,240
Let's run this code.

905
00:34:08,240 --> 00:34:10,400
And so you can see just printing, they are same.

906
00:34:10,400 --> 00:34:11,040
So they are same.

907
00:34:11,040 --> 00:34:11,520
Right?

908
00:34:11,520 --> 00:34:13,360
Now what if they have different age?

909
00:34:13,360 --> 00:34:17,200
So what I will do is once I got c1, I will change this age of c1.

910
00:34:17,200 --> 00:34:19,280
I will say age of c1 is 30.

911
00:34:19,280 --> 00:34:20,880
Anyway, we are not using update here.

912
00:34:20,880 --> 00:34:22,240
And we can say run demo.

913
00:34:22,240 --> 00:34:23,520
And you can see it is not printing.

914
00:34:23,520 --> 00:34:24,480
They are same.

915
00:34:24,480 --> 00:34:25,840
We should print the as well.

916
00:34:25,840 --> 00:34:27,520
So that we'll see, is it different?

917
00:34:27,520 --> 00:34:28,160
Let's print.

918
00:34:28,800 --> 00:34:30,160
They are different.

919
00:34:31,040 --> 00:34:32,640
And let's run this code.

920
00:34:32,640 --> 00:34:34,240
In case of that, we got they are different.

921
00:34:34,240 --> 00:34:37,280
Now, since that age is different, we are getting that different.

922
00:34:37,280 --> 00:34:38,320
See, names are same.

923
00:34:38,320 --> 00:34:39,920
What is different is age.

924
00:34:39,920 --> 00:34:43,360
So we can compare two objects by defining our own function,

925
00:34:43,360 --> 00:34:45,840
which is compare in this case or method in this case.

926
00:34:45,840 --> 00:34:48,080
But remember this thing, compare takes two parameters,

927
00:34:48,080 --> 00:34:52,080
the first one who is calling it, and second one whom to compare.

928
00:34:52,080 --> 00:34:52,240
Right?

929
00:34:52,240 --> 00:34:55,120
So here in this case, we are saying c1.compare with c2.

930
00:34:55,120 --> 00:34:57,280
So c1 becomes self, c2 becomes other.

931
00:34:57,280 --> 00:34:58,240
This is very important.

932
00:34:58,240 --> 00:34:59,840
I know it is a bit confusing at the start,

933
00:34:59,840 --> 00:35:02,560
but the moment you start working on it, it becomes very easy.

934
00:35:02,720 --> 00:35:10,480
Now, we know how to work with class and object, right?

935
00:35:10,480 --> 00:35:13,920
And we have also seen how can you create a variable inside an object.

936
00:35:13,920 --> 00:35:14,560
Of course, right?

937
00:35:14,560 --> 00:35:16,640
Every object should know something.

938
00:35:16,640 --> 00:35:19,280
But when it comes to variable, in oops,

939
00:35:19,280 --> 00:35:21,280
we have two different types of variable.

940
00:35:21,280 --> 00:35:24,320
The first one is an instance variable,

941
00:35:24,320 --> 00:35:26,800
and the second one is a class variable,

942
00:35:26,800 --> 00:35:29,120
or you can call them as static variables.

943
00:35:29,120 --> 00:35:30,560
What is the difference between them?

944
00:35:30,560 --> 00:35:31,360
Now, think about this.

945
00:35:31,360 --> 00:35:33,760
Let me just remove this code, whatever we have done till now.

946
00:35:33,760 --> 00:35:35,280
So let me just clean this up.

947
00:35:35,280 --> 00:35:35,760
Okay?

948
00:35:35,760 --> 00:35:37,920
So we will start from a plain slate.

949
00:35:37,920 --> 00:35:40,400
So here, let's go with another very example.

950
00:35:40,400 --> 00:35:42,000
Let's take a class call us car.

951
00:35:42,000 --> 00:35:42,320
Okay?

952
00:35:42,320 --> 00:35:43,600
We all love cars, right?

953
00:35:43,600 --> 00:35:45,200
So let's say we have a class car,

954
00:35:45,200 --> 00:35:48,320
and of course, every car will have different variables, right?

955
00:35:48,320 --> 00:35:49,840
Of course, you can mention the company name,

956
00:35:49,840 --> 00:35:51,920
you can mention the type of engineer you're working with,

957
00:35:51,920 --> 00:35:54,000
and the mileage what it gives you.

958
00:35:54,000 --> 00:35:55,280
So we have different variables.

959
00:35:55,280 --> 00:35:55,440
Okay?

960
00:35:55,440 --> 00:35:58,640
So what I will do is, if I want to use those variables here,

961
00:35:58,720 --> 00:36:01,520
we need to use a function, which is init.

962
00:36:01,520 --> 00:36:03,280
So you will say init function,

963
00:36:03,280 --> 00:36:05,760
and in this, you can define those variables, right?

964
00:36:05,760 --> 00:36:07,520
I can say self dot mileage,

965
00:36:07,520 --> 00:36:09,840
and I will say mileage is, let's say, 10.

966
00:36:09,840 --> 00:36:11,360
And then I will say the company.

967
00:36:11,360 --> 00:36:14,160
So company would be, let's say, bmw.

968
00:36:14,160 --> 00:36:15,920
Any random company doesn't matter.

969
00:36:15,920 --> 00:36:17,600
So we have these two values, right?

970
00:36:17,600 --> 00:36:20,480
Now, these two variables are called as instance variables.

971
00:36:20,480 --> 00:36:23,120
So when you talk about mileage and comm, these are instance.

972
00:36:23,120 --> 00:36:25,040
Now, why is our instance is because,

973
00:36:25,040 --> 00:36:27,760
as your car changes, as the object changes,

974
00:36:27,760 --> 00:36:29,200
this value also change.

975
00:36:29,200 --> 00:36:31,040
By default, the value is 10 and bmw,

976
00:36:31,040 --> 00:36:32,480
but you can change it, right?

977
00:36:32,480 --> 00:36:35,200
Example, we have done that before just to give you a glimpse.

978
00:36:35,200 --> 00:36:38,080
I will say the first one is c1, and this is car.

979
00:36:38,080 --> 00:36:39,040
That's my first object.

980
00:36:39,040 --> 00:36:41,200
I got c2, which is, again, a car.

981
00:36:41,200 --> 00:36:42,640
That is, we got c1, c2.

982
00:36:42,640 --> 00:36:44,320
Now, we got two different objects,

983
00:36:44,320 --> 00:36:46,640
and both the object will have different variables, right?

984
00:36:46,640 --> 00:36:48,560
Different area for the variables.

985
00:36:48,560 --> 00:36:52,000
And now, if I print the value, so I will say c.com,

986
00:36:52,000 --> 00:36:55,280
and I also want to print c1.milit.

987
00:36:55,280 --> 00:36:56,400
So I want to print both.

988
00:36:56,720 --> 00:36:57,840
Both the variables.

989
00:36:57,840 --> 00:37:01,280
So you can see we got c1.com, c1.milit, c2.com, c2.milit.

990
00:37:01,280 --> 00:37:01,840
That's perfect.

991
00:37:01,840 --> 00:37:03,120
And now, if I run this code, of course,

992
00:37:03,120 --> 00:37:05,360
it will print same values because they are same.

993
00:37:05,360 --> 00:37:06,320
But can we change it?

994
00:37:06,320 --> 00:37:06,880
Yes, we can.

995
00:37:06,880 --> 00:37:11,200
So I will say, if I change for c1, so let's say c1.milit.

996
00:37:11,200 --> 00:37:14,160
So let's say c1.milit changes from 10 to, let's say, 8.

997
00:37:14,160 --> 00:37:15,840
This is what happens, you know, with some cars.

998
00:37:15,840 --> 00:37:16,640
And let's run this code.

999
00:37:16,640 --> 00:37:18,080
You can see the value is changing now.

1000
00:37:18,080 --> 00:37:19,680
So, of course, both the objects are different,

1001
00:37:19,680 --> 00:37:21,040
and they will have different values.

1002
00:37:21,040 --> 00:37:24,000
But what if I want to create a variable,

1003
00:37:24,000 --> 00:37:26,160
which is common for all the objects?

1004
00:37:26,160 --> 00:37:28,560
Of course, these variables, which are instance variable,

1005
00:37:28,560 --> 00:37:30,960
they are different for different objects, right?

1006
00:37:30,960 --> 00:37:34,080
If you change one object, it will not affect other objects.

1007
00:37:34,080 --> 00:37:36,480
What if you want to have a variable,

1008
00:37:36,480 --> 00:37:39,200
which will change, it will affect all other objects?

1009
00:37:39,200 --> 00:37:42,960
Example, the number of wheels in a car is 4, right?

1010
00:37:42,960 --> 00:37:44,640
By default, it is 4, right?

1011
00:37:44,640 --> 00:37:46,960
But what if, in future, we got a new concept?

1012
00:37:46,960 --> 00:37:48,400
And they're saying, hey, now, this time,

1013
00:37:48,400 --> 00:37:50,800
we will have five tires, or five wheels.

1014
00:37:50,800 --> 00:37:53,360
I don't know why we'll have five wheels, but let's imagine.

1015
00:37:53,360 --> 00:37:54,720
In this case, what you will do is,

1016
00:37:54,720 --> 00:37:57,440
you will define a variable outside in it, okay?

1017
00:37:57,440 --> 00:38:01,200
Because if you create, or if you define the variable inside in it,

1018
00:38:01,200 --> 00:38:02,960
it becomes an instance variable.

1019
00:38:02,960 --> 00:38:05,360
If you define a variable outside in it,

1020
00:38:05,360 --> 00:38:08,560
and inside a class, of course, it becomes a class variable.

1021
00:38:08,560 --> 00:38:10,320
Let's say, we'll say wheels.

1022
00:38:10,320 --> 00:38:13,680
So, let's say wheels are by default 4, of course, will be 4, right?

1023
00:38:13,680 --> 00:38:17,520
And if I print the wheels as well, now, how do you print wheels?

1024
00:38:17,520 --> 00:38:19,120
The way you can print is very simple.

1025
00:38:19,120 --> 00:38:23,680
You can say C1.wheels, and here as well, I'll say C2.wheels.

1026
00:38:23,680 --> 00:38:26,160
And let's run this code now, and you can see we got the output.

1027
00:38:26,160 --> 00:38:27,280
We got 4 and 4.

1028
00:38:27,280 --> 00:38:32,000
So, if you want to access wheels, you can use C1.wheels and C2.wheels.

1029
00:38:32,000 --> 00:38:34,800
So, instead of using the object name, we can also use class name.

1030
00:38:34,800 --> 00:38:36,720
Because see, if you talk about mill and com,

1031
00:38:36,720 --> 00:38:38,560
it is specific to the object, right?

1032
00:38:38,560 --> 00:38:40,400
But that's not the case with wheels.

1033
00:38:40,400 --> 00:38:42,080
Wheels is common to all the objects.

1034
00:38:42,080 --> 00:38:44,320
So, every object can share the same value of it.

1035
00:38:44,320 --> 00:38:48,080
So, we can use object name, or we can use class name, both works.

1036
00:38:48,080 --> 00:38:49,280
So, you're getting value 4, right?

1037
00:38:49,280 --> 00:38:51,120
What if you want to change the value of it?

1038
00:38:51,120 --> 00:38:53,200
If you want to change the value, you can come here,

1039
00:38:53,280 --> 00:38:54,800
and you can change the value.

1040
00:38:54,800 --> 00:38:55,520
See, what happens?

1041
00:38:55,520 --> 00:38:57,600
You know, in your memory, you have different namespace.

1042
00:38:57,600 --> 00:38:58,480
Now, what is namespace?

1043
00:38:58,480 --> 00:39:00,880
The place where you create an object or the variables,

1044
00:39:00,880 --> 00:39:01,920
there was namespace.

1045
00:39:01,920 --> 00:39:03,360
So, we have two types of namespace.

1046
00:39:03,360 --> 00:39:07,120
One is class namespace, where you will store all the class variables,

1047
00:39:07,120 --> 00:39:09,280
and then we have an instance namespace,

1048
00:39:09,280 --> 00:39:11,360
where you will create all the instance variable.

1049
00:39:11,360 --> 00:39:14,640
So, these variables, which is mill and com, they are instance, right?

1050
00:39:14,640 --> 00:39:16,480
So, they will belong to instance namespace.

1051
00:39:16,480 --> 00:39:19,280
This wheel belongs to class namespace, right?

1052
00:39:19,280 --> 00:39:21,920
So, if you want to work with wheels, if you want to modify it,

1053
00:39:21,920 --> 00:39:22,880
you have to use a class name.

1054
00:39:22,880 --> 00:39:25,760
You have to say car.wheels, and you can assign the value to 5.

1055
00:39:25,760 --> 00:39:27,280
Now, the moment you change the value for wheels,

1056
00:39:27,280 --> 00:39:29,120
it will affect all the objects, right?

1057
00:39:29,120 --> 00:39:30,160
Because they are shared.

1058
00:39:30,160 --> 00:39:32,400
So, this wheel is shared between all the objects,

1059
00:39:32,400 --> 00:39:35,200
and neither on this code, you can see the output is 5 and 5.

1060
00:39:35,200 --> 00:39:36,480
So, that's your class variable.

1061
00:39:36,480 --> 00:39:38,960
So, the point to remember is we have two types of variables,

1062
00:39:38,960 --> 00:39:41,200
instance variables, and class variables.

1063
00:39:41,200 --> 00:39:43,600
Or, in fact, class variables are also called as steady variables.

1064
00:39:48,480 --> 00:39:50,080
Now, till this point, we have talked about

1065
00:39:50,080 --> 00:39:51,600
different types of variables, right?

1066
00:39:51,600 --> 00:39:54,640
We have seen instance variable and a class variable.

1067
00:39:54,640 --> 00:39:56,640
We can call them as steady variables, right?

1068
00:39:56,640 --> 00:39:58,880
Now, in this video, we'll talk about methods

1069
00:39:58,880 --> 00:40:00,080
and different types of methods.

1070
00:40:00,080 --> 00:40:01,200
Now, we have seen that, right?

1071
00:40:01,200 --> 00:40:03,680
When you talk about objects, object will have two things, right?

1072
00:40:03,680 --> 00:40:05,840
The first one it will have is variables,

1073
00:40:05,840 --> 00:40:07,280
and second one is methods.

1074
00:40:07,280 --> 00:40:10,880
Now, variable to store data and methods for the behavior, right?

1075
00:40:10,880 --> 00:40:12,880
So, if you want to perform some operation,

1076
00:40:12,880 --> 00:40:14,560
that's where methods comes into picture.

1077
00:40:14,560 --> 00:40:17,200
As human as well, we know something and we do something, right?

1078
00:40:17,200 --> 00:40:19,200
So, those are your variables and methods, right?

1079
00:40:19,200 --> 00:40:20,640
Now, here, when you talk about methods,

1080
00:40:20,640 --> 00:40:22,720
we have different types of methods.

1081
00:40:22,720 --> 00:40:24,560
Now, basically, we have three types of methods.

1082
00:40:24,560 --> 00:40:26,800
The first one is instance method.

1083
00:40:26,800 --> 00:40:29,440
The second one we have is class method,

1084
00:40:29,440 --> 00:40:30,960
and then we have static method.

1085
00:40:30,960 --> 00:40:31,680
Now, hold on.

1086
00:40:31,680 --> 00:40:33,680
When you talk about variables, we only have two, right?

1087
00:40:33,680 --> 00:40:37,040
Because class and static behave the same way in variables.

1088
00:40:37,040 --> 00:40:39,040
But, hold on. In variables, we have the same thing, right?

1089
00:40:39,040 --> 00:40:42,160
In variables, we have class variables and static variables,

1090
00:40:42,160 --> 00:40:43,360
which are same.

1091
00:40:43,360 --> 00:40:44,720
That's not the case with methods, okay?

1092
00:40:44,720 --> 00:40:48,880
So, class methods and static methods are different in methods.

1093
00:40:48,880 --> 00:40:49,920
Okay, so, let's get started.

1094
00:40:49,920 --> 00:40:52,160
So, understand this concept, we'll take an example.

1095
00:40:52,160 --> 00:40:55,200
So, let's take a class here and we'll name this class as student.

1096
00:40:55,200 --> 00:40:57,760
So, in this student class, we'll be having multiple variables, right?

1097
00:40:57,760 --> 00:40:59,200
Now, of course, when you talk about student,

1098
00:40:59,200 --> 00:41:02,160
we have names, we have roll number, and then we have marks.

1099
00:41:02,160 --> 00:41:04,880
At this point, let me only focus on marks, okay?

1100
00:41:04,880 --> 00:41:07,040
So, what I will do is let me create a function,

1101
00:41:07,040 --> 00:41:08,080
which is your init function,

1102
00:41:08,080 --> 00:41:09,600
because I want to declare some variables.

1103
00:41:09,600 --> 00:41:11,040
So, it says self.

1104
00:41:11,040 --> 00:41:12,800
Now, I want to go for three variables here.

1105
00:41:12,800 --> 00:41:14,080
One is marks one,

1106
00:41:14,080 --> 00:41:16,800
and marks one, I want to pass this value from the user, okay?

1107
00:41:16,800 --> 00:41:18,880
Of course, you can define your own values here,

1108
00:41:18,880 --> 00:41:21,200
but I want to pass the value when I create the object.

1109
00:41:21,200 --> 00:41:23,600
And the way you do that is by saying self comma,

1110
00:41:23,600 --> 00:41:25,200
you will pass m1, m2, m3.

1111
00:41:25,200 --> 00:41:26,640
I want to pass three variables.

1112
00:41:26,640 --> 00:41:28,800
And m1 value will be assigned to the object

1113
00:41:28,800 --> 00:41:31,040
by saying self.m1 equal to m1.

1114
00:41:31,040 --> 00:41:32,640
I will go to same thing for m2.

1115
00:41:32,640 --> 00:41:35,200
I will say m2 and the same thing for m3, right?

1116
00:41:35,200 --> 00:41:36,960
So, we got m1, m2, and m3.

1117
00:41:36,960 --> 00:41:38,080
Now, we got three variables.

1118
00:41:38,080 --> 00:41:39,680
I want to create certain objects here.

1119
00:41:39,680 --> 00:41:41,280
Okay, let's create objects for this.

1120
00:41:41,280 --> 00:41:42,320
I will go back here.

1121
00:41:42,320 --> 00:41:43,360
So, let's create the object here.

1122
00:41:43,360 --> 00:41:45,200
I will say s1 is equal to,

1123
00:41:45,200 --> 00:41:47,360
and as usual, we can create multiple objects.

1124
00:41:47,360 --> 00:41:49,680
But time it will go for s1 equal to,

1125
00:41:49,680 --> 00:41:51,040
I will say student.

1126
00:41:51,040 --> 00:41:52,160
That's my first object.

1127
00:41:52,160 --> 00:41:53,200
And let me get one more object.

1128
00:41:53,200 --> 00:41:55,680
We'll say s2 equal to student.

1129
00:41:55,680 --> 00:41:57,440
So, we basically, we got two objects here.

1130
00:41:57,440 --> 00:41:58,880
One is s1 and s2.

1131
00:41:58,880 --> 00:42:00,880
I also want to pass a value to it, right?

1132
00:42:00,880 --> 00:42:02,000
Because we are not passing it.

1133
00:42:02,000 --> 00:42:03,680
So, let me pass any value, a random value.

1134
00:42:03,680 --> 00:42:05,520
I'm not actually saying what I'm typing here,

1135
00:42:05,520 --> 00:42:07,200
but then we got three values there.

1136
00:42:07,200 --> 00:42:09,280
And here as well, I will go for any random value.

1137
00:42:09,280 --> 00:42:11,520
That doesn't make any sense to see that.

1138
00:42:11,520 --> 00:42:12,560
So, we got these values, right?

1139
00:42:12,560 --> 00:42:15,040
So, first student got 34, 67, and 32.

1140
00:42:15,040 --> 00:42:17,040
Second student got 87, 32, and 12.

1141
00:42:17,040 --> 00:42:18,240
Now, what I'll do is, of course,

1142
00:42:18,240 --> 00:42:20,400
these variables here, m1, m2, and m3,

1143
00:42:20,400 --> 00:42:21,760
those are instance variables, right?

1144
00:42:21,760 --> 00:42:23,200
We have talked about that.

1145
00:42:23,200 --> 00:42:25,520
At this point, we have not created any methods.

1146
00:42:25,520 --> 00:42:26,320
Let me just do that.

1147
00:42:26,320 --> 00:42:27,520
In fact, before going for methods,

1148
00:42:27,520 --> 00:42:30,400
let me also create a variable, a static variable this time.

1149
00:42:30,400 --> 00:42:32,720
And the way you create a static or a class variable

1150
00:42:32,720 --> 00:42:34,720
just by defining or declaring the variable

1151
00:42:34,720 --> 00:42:36,880
outside the constructor, right?

1152
00:42:36,880 --> 00:42:39,600
So, here, I will say, I have a variable,

1153
00:42:39,600 --> 00:42:41,520
and we'll name this variable as school.

1154
00:42:41,520 --> 00:42:43,520
Because, of course, a student belongs to a school,

1155
00:42:43,520 --> 00:42:44,400
right, or a college.

1156
00:42:44,400 --> 00:42:46,720
At this point, all the students belongs to the same school,

1157
00:42:46,720 --> 00:42:47,520
which is the disco.

1158
00:42:47,520 --> 00:42:49,280
Imagine, if we have the disco university,

1159
00:42:49,280 --> 00:42:50,560
we'll be having a school.

1160
00:42:50,560 --> 00:42:52,240
So, we got the school name as well, right?

1161
00:42:52,240 --> 00:42:54,560
So, you can print those values by simply saying,

1162
00:42:54,560 --> 00:42:56,160
in fact, you can print those values here as well.

1163
00:42:56,160 --> 00:42:59,200
You can say, s1.m1, and x2.m1, we can do that.

1164
00:42:59,200 --> 00:43:01,200
What I am concerned about here is,

1165
00:43:01,200 --> 00:43:03,440
I want to know the average of marks, okay?

1166
00:43:03,440 --> 00:43:04,800
So, I've got these three variables, right?

1167
00:43:04,800 --> 00:43:06,160
I want to performance and operation.

1168
00:43:06,160 --> 00:43:07,280
How do you find the average, right?

1169
00:43:07,280 --> 00:43:09,920
So, the logic of average you can define by yourself,

1170
00:43:09,920 --> 00:43:11,840
you know, everyone has their own way of doing it.

1171
00:43:11,840 --> 00:43:13,360
I will be doing a very simple calculation.

1172
00:43:13,360 --> 00:43:15,280
So, let me create a method called as def,

1173
00:43:15,280 --> 00:43:16,720
method called average.

1174
00:43:16,720 --> 00:43:18,400
So, when I say object.average,

1175
00:43:18,400 --> 00:43:19,760
it will give me average marks, okay?

1176
00:43:19,760 --> 00:43:21,280
So, I want to return the average marks.

1177
00:43:21,280 --> 00:43:22,720
And the way you do that by saying return,

1178
00:43:22,720 --> 00:43:23,840
you want to return the value.

1179
00:43:23,840 --> 00:43:26,480
And here, you will simply say m1,

1180
00:43:26,480 --> 00:43:31,200
or not just m1, you have to say self.m1 plus self.m3.

1181
00:43:31,200 --> 00:43:32,720
So, we have to divide this number by three,

1182
00:43:32,720 --> 00:43:34,080
that's how you find the average, right?

1183
00:43:34,080 --> 00:43:35,040
And we know the stuff, right?

1184
00:43:35,040 --> 00:43:36,720
That's how you find the average of multiple numbers.

1185
00:43:36,720 --> 00:43:38,640
So, we got the average and we are returning the value.

1186
00:43:38,640 --> 00:43:40,640
Okay, so now this, if you focus on this average,

1187
00:43:40,640 --> 00:43:42,640
this is an instance method.

1188
00:43:42,640 --> 00:43:44,000
How do you know that's an instance method

1189
00:43:44,000 --> 00:43:45,280
because we are passing self.

1190
00:43:45,280 --> 00:43:46,320
Now, when you say self,

1191
00:43:46,320 --> 00:43:48,560
it means it belongs to a particular object, right?

1192
00:43:48,560 --> 00:43:50,080
Of course, we are defining that in a class,

1193
00:43:50,080 --> 00:43:51,600
but it works with the object.

1194
00:43:51,600 --> 00:43:52,880
And that's why we are passing self.

1195
00:43:52,880 --> 00:43:54,320
So, if you want to call average,

1196
00:43:54,320 --> 00:43:56,160
you have to say s1.average,

1197
00:43:56,160 --> 00:43:58,080
or you have to say s2.average,

1198
00:43:58,080 --> 00:43:59,520
because we are passing self.

1199
00:43:59,520 --> 00:44:01,680
We cannot simply say student.average,

1200
00:44:01,680 --> 00:44:03,280
because we are not using object there.

1201
00:44:03,280 --> 00:44:06,320
But in this case, we have to say s1.avg.

1202
00:44:06,320 --> 00:44:06,960
That's how you do it.

1203
00:44:06,960 --> 00:44:08,880
So, I have to say s1.avg.

1204
00:44:08,880 --> 00:44:10,000
It will give you the values.

1205
00:44:10,000 --> 00:44:11,040
I will print the value here.

1206
00:44:11,040 --> 00:44:12,560
I will say print the average here.

1207
00:44:12,560 --> 00:44:14,080
So, let's run this code and you can see it works.

1208
00:44:14,080 --> 00:44:16,000
We got the average of our student.

1209
00:44:16,000 --> 00:44:17,520
You can do the same thing for second student.

1210
00:44:17,520 --> 00:44:19,600
You can stop saying s1.avg.

1211
00:44:19,600 --> 00:44:21,200
You can say s2.avg.

1212
00:44:21,200 --> 00:44:22,160
And if you run this code,

1213
00:44:22,160 --> 00:44:24,240
you can see we got the average for second student as well.

1214
00:44:24,240 --> 00:44:26,560
And they almost say, I don't know why.

1215
00:44:26,560 --> 00:44:27,840
Okay, so after changing value,

1216
00:44:27,840 --> 00:44:29,040
we got different average, you know?

1217
00:44:29,040 --> 00:44:30,720
So, this was just for coincidence, you know?

1218
00:44:30,720 --> 00:44:31,760
I have given some values

1219
00:44:31,760 --> 00:44:33,600
and then they were giving the same average, right?

1220
00:44:33,600 --> 00:44:35,440
So, yeah, so you got different average for s1

1221
00:44:35,440 --> 00:44:36,560
and different average for s2.

1222
00:44:36,560 --> 00:44:37,360
So, that works.

1223
00:44:37,360 --> 00:44:38,160
Now, what we are going to do is,

1224
00:44:38,160 --> 00:44:39,040
so this method here,

1225
00:44:39,040 --> 00:44:40,960
this average is an instance method

1226
00:44:40,960 --> 00:44:42,240
because it works with the object.

1227
00:44:42,240 --> 00:44:43,520
Now, in instance itself,

1228
00:44:43,520 --> 00:44:45,200
we have two different types, okay?

1229
00:44:45,200 --> 00:44:47,200
The first type of instance which we use

1230
00:44:47,200 --> 00:44:48,640
is called as accessors.

1231
00:44:48,640 --> 00:44:50,800
And the second type we use is mutators.

1232
00:44:50,800 --> 00:44:52,880
So, we have accessors and mutators.

1233
00:44:52,880 --> 00:44:54,080
Now, what is accessors?

1234
00:44:54,080 --> 00:44:55,840
So, if you are only fetching the value,

1235
00:44:55,840 --> 00:44:57,600
see ultimately, when you talk about this method,

1236
00:44:57,600 --> 00:45:00,000
they are only responsible to work with variables, right?

1237
00:45:00,000 --> 00:45:01,840
Which is your instance variables.

1238
00:45:01,840 --> 00:45:04,640
So, if you want to just fetch the value of the instance variable,

1239
00:45:04,640 --> 00:45:06,400
we will be using accessors.

1240
00:45:06,400 --> 00:45:07,840
If you want to modify the value,

1241
00:45:07,840 --> 00:45:09,360
you will use mutators.

1242
00:45:09,360 --> 00:45:10,560
So, the way you do that example,

1243
00:45:10,560 --> 00:45:12,720
but if you want to fetch the value of m1.

1244
00:45:12,720 --> 00:45:14,640
So, if you want to know the value for m1,

1245
00:45:14,640 --> 00:45:15,440
you can fetch directly,

1246
00:45:15,440 --> 00:45:17,360
you can say print s1.m1,

1247
00:45:17,360 --> 00:45:18,960
you will get the value like this.

1248
00:45:18,960 --> 00:45:20,880
Or, instead of using the variables,

1249
00:45:20,880 --> 00:45:22,320
we should actually use methods.

1250
00:45:22,320 --> 00:45:23,440
So, what we'll do here is,

1251
00:45:23,440 --> 00:45:26,960
we'll say def and we'll define the function as get m1.

1252
00:45:26,960 --> 00:45:29,600
So, we'll say get m1 and which m1 you want.

1253
00:45:29,600 --> 00:45:30,560
So, you will say return,

1254
00:45:30,560 --> 00:45:33,200
I want to return the value for self.m1.

1255
00:45:33,200 --> 00:45:33,840
This is how you do it.

1256
00:45:33,840 --> 00:45:35,040
So, if you want the value for m1,

1257
00:45:35,040 --> 00:45:37,280
you will say get m1 and you've got the value.

1258
00:45:37,280 --> 00:45:40,080
Normally, it's not compulsion to have that get keyword there.

1259
00:45:40,080 --> 00:45:41,760
You can also say m1, that's fine.

1260
00:45:41,760 --> 00:45:43,360
But, when you write a code conventionally,

1261
00:45:43,360 --> 00:45:44,960
you simply specify get there.

1262
00:45:44,960 --> 00:45:46,400
So, whether you say get methods

1263
00:45:46,400 --> 00:45:48,000
or in fact, to set the value,

1264
00:45:48,000 --> 00:45:48,960
we use set methods.

1265
00:45:48,960 --> 00:45:51,040
Example, if you want to set the value for m1,

1266
00:45:51,040 --> 00:45:53,280
you will say set m1.

1267
00:45:53,280 --> 00:45:55,360
Of course, we are passing that from a constructor.

1268
00:45:55,360 --> 00:45:56,880
So, we can say set m1

1269
00:45:56,880 --> 00:45:57,920
and you can pass some values here.

1270
00:45:57,920 --> 00:45:59,120
I would pass a value f.

1271
00:45:59,120 --> 00:46:00,000
I will say a value.

1272
00:46:00,000 --> 00:46:02,000
And this value will be assigned to m1.

1273
00:46:02,000 --> 00:46:05,040
So, we'll say self.m1 is equal to value.

1274
00:46:05,040 --> 00:46:06,880
So, you can use constructor to pass the value

1275
00:46:06,880 --> 00:46:08,480
or we can use setters, right?

1276
00:46:08,480 --> 00:46:11,040
So, we have get methods and we have set methods.

1277
00:46:11,040 --> 00:46:11,920
Now, for different variables,

1278
00:46:11,920 --> 00:46:14,240
we'll be having different get and set methods, right?

1279
00:46:14,240 --> 00:46:15,360
So, if you have three variables,

1280
00:46:15,360 --> 00:46:18,000
you might be using three get methods and three set methods.

1281
00:46:18,000 --> 00:46:20,720
And that's why they're called as getters and setters, right?

1282
00:46:20,720 --> 00:46:23,200
So, getters get the value, setters set the value.

1283
00:46:23,200 --> 00:46:24,640
Getters only fetch the value.

1284
00:46:24,640 --> 00:46:25,600
It will not change the value.

1285
00:46:25,600 --> 00:46:27,120
That's why we say accessors.

1286
00:46:27,120 --> 00:46:28,320
Setters, they change the value

1287
00:46:28,320 --> 00:46:29,760
and that's why we say mutators.

1288
00:46:29,760 --> 00:46:30,560
So, this makes sense.

1289
00:46:30,560 --> 00:46:32,320
Whether you can call this method, right?

1290
00:46:32,320 --> 00:46:33,200
But, this works.

1291
00:46:33,200 --> 00:46:34,880
Now, once you talked about instance,

1292
00:46:34,880 --> 00:46:37,200
the second type we have is a class method.

1293
00:46:37,200 --> 00:46:38,480
Now, why we use class method?

1294
00:46:38,480 --> 00:46:40,720
See, if you talk about these variables, m1, m2, m3,

1295
00:46:40,720 --> 00:46:42,880
those are your instance variable, right?

1296
00:46:42,880 --> 00:46:45,760
An instance variable can be used with instance methods.

1297
00:46:45,760 --> 00:46:46,560
What about this one?

1298
00:46:46,560 --> 00:46:47,440
This is cool, right?

1299
00:46:47,440 --> 00:46:49,600
Now, school is basically your class variable.

1300
00:46:49,600 --> 00:46:51,040
And if you want to work with class variable,

1301
00:46:51,040 --> 00:46:52,800
you need to use a class method.

1302
00:46:52,800 --> 00:46:53,680
And the way you do that,

1303
00:46:53,680 --> 00:46:55,520
let's say I want to know the info of a student.

1304
00:46:55,520 --> 00:46:57,120
So, I will set def info.

1305
00:46:57,120 --> 00:46:59,200
Info will print the name of the school, okay?

1306
00:46:59,200 --> 00:47:00,800
So, let's say if you are studying for Therisco,

1307
00:47:00,800 --> 00:47:02,240
it will print Therisco.

1308
00:47:02,240 --> 00:47:04,560
And of course, all the students belong to same school, right?

1309
00:47:04,560 --> 00:47:06,480
If you change the school name for one student,

1310
00:47:06,480 --> 00:47:07,440
it will affect all the students.

1311
00:47:07,440 --> 00:47:10,400
For example, this channel name earlier was NavinSkills, right?

1312
00:47:10,400 --> 00:47:11,840
And we have changed it to Therisco.

1313
00:47:11,840 --> 00:47:14,800
So, if the name changes for one subscriber,

1314
00:47:14,800 --> 00:47:16,320
it will affect all the subscribers, right?

1315
00:47:16,320 --> 00:47:17,440
And that's what is happening here.

1316
00:47:17,440 --> 00:47:20,000
So, if I want to print info and that to a school name,

1317
00:47:20,000 --> 00:47:21,360
I don't want marks here.

1318
00:47:21,360 --> 00:47:23,280
Of course, we don't want to work with self.

1319
00:47:23,280 --> 00:47:25,040
We want to work with class, right?

1320
00:47:25,040 --> 00:47:26,880
So, if you are working with instance,

1321
00:47:26,880 --> 00:47:28,560
you will use a self keyword.

1322
00:47:28,560 --> 00:47:30,320
If you are working with a class variable,

1323
00:47:30,320 --> 00:47:32,960
you have to use class, CLS, okay?

1324
00:47:32,960 --> 00:47:35,040
It should be CLS, it should not be something else.

1325
00:47:35,040 --> 00:47:37,280
Now, once you got that, you can simply print the value.

1326
00:47:37,280 --> 00:47:40,160
So, you can say print or you can return the value, your choice.

1327
00:47:40,160 --> 00:47:43,200
We can say return CLS.school.

1328
00:47:43,200 --> 00:47:43,760
That's how you do it.

1329
00:47:43,760 --> 00:47:45,200
So, you have to say CLS.school.

1330
00:47:45,200 --> 00:47:47,200
So, whenever you want to work with class variable,

1331
00:47:47,200 --> 00:47:49,120
you have to say CLS.school.

1332
00:47:49,120 --> 00:47:51,120
Okay, but then how do you call info?

1333
00:47:51,120 --> 00:47:51,840
It's very simple.

1334
00:47:51,840 --> 00:47:55,120
You will say print S1.info.

1335
00:47:55,120 --> 00:47:57,440
We can do that, but there's only one problem.

1336
00:47:57,440 --> 00:47:59,120
Info should work with all the objects, right?

1337
00:47:59,120 --> 00:48:00,640
It's not specific to one object.

1338
00:48:00,640 --> 00:48:04,160
So, instead of using S1, we can use a student.info.

1339
00:48:04,160 --> 00:48:05,040
Now, this should work.

1340
00:48:05,040 --> 00:48:05,760
Let's try.

1341
00:48:05,760 --> 00:48:06,880
I will say run.

1342
00:48:06,880 --> 00:48:08,080
Oh, we got an error.

1343
00:48:08,080 --> 00:48:11,360
It says, inform is seeing one required potential argument,

1344
00:48:11,360 --> 00:48:13,520
which is a position argument, which is CLS.

1345
00:48:13,520 --> 00:48:15,360
Oh, we have to pass CLS.

1346
00:48:15,360 --> 00:48:15,920
That's weird.

1347
00:48:15,920 --> 00:48:17,280
I don't want to pass CLS, right?

1348
00:48:17,280 --> 00:48:19,120
In fact, we are not even doing that for average.

1349
00:48:19,120 --> 00:48:20,400
We are not passing S1.

1350
00:48:20,400 --> 00:48:22,320
Here also, I don't want to pass thing.

1351
00:48:22,320 --> 00:48:23,520
Normally, what happens, you know,

1352
00:48:23,520 --> 00:48:25,600
if you want to create a class method,

1353
00:48:25,600 --> 00:48:29,120
we need to use a special symbol or special way of doing that.

1354
00:48:29,120 --> 00:48:31,440
And we can use something called decorators.

1355
00:48:31,440 --> 00:48:32,800
So, we have to say add rate.

1356
00:48:32,800 --> 00:48:34,800
And you have to mention this as a class method.

1357
00:48:34,800 --> 00:48:36,880
Again, we'll talk about decorators later in detail.

1358
00:48:36,880 --> 00:48:39,680
But time being, we got a class method as decorator.

1359
00:48:39,680 --> 00:48:42,560
So, if you want to use info as a class method,

1360
00:48:42,560 --> 00:48:44,560
you have to say at class method, okay?

1361
00:48:44,560 --> 00:48:45,360
That's how you define it.

1362
00:48:45,360 --> 00:48:47,200
So, let's run this code now and it works.

1363
00:48:47,200 --> 00:48:48,720
You can see that we got the disco there.

1364
00:48:48,720 --> 00:48:49,760
Quite simple, right?

1365
00:48:49,760 --> 00:48:51,440
So, now we know about instance method

1366
00:48:51,440 --> 00:48:53,200
because it works with instance variables.

1367
00:48:53,200 --> 00:48:54,640
Now, we know about class method

1368
00:48:54,640 --> 00:48:56,320
because it works with class variables.

1369
00:48:56,320 --> 00:48:57,600
How about static methods?

1370
00:48:57,600 --> 00:48:58,480
See, think about this.

1371
00:48:58,480 --> 00:49:00,080
Let's say if you want any method, okay?

1372
00:49:00,080 --> 00:49:01,680
It doesn't matter what method we want here.

1373
00:49:01,680 --> 00:49:05,840
If you want a method which has nothing to do with instance variable,

1374
00:49:05,840 --> 00:49:08,560
which has nothing to do with the class variables,

1375
00:49:08,560 --> 00:49:10,000
we want to do something extra, okay?

1376
00:49:10,000 --> 00:49:12,800
So, something different which is not concerned with the variables.

1377
00:49:12,800 --> 00:49:15,760
At that time, you will be using a static method

1378
00:49:15,760 --> 00:49:17,920
because we are not concerned about instance variable.

1379
00:49:17,920 --> 00:49:19,840
We are not concerned about class variables.

1380
00:49:19,840 --> 00:49:23,520
Example, let's say I want to print the info about this class, okay?

1381
00:49:23,520 --> 00:49:24,960
Not about student, but the class.

1382
00:49:24,960 --> 00:49:27,840
So, I will say def about, you know, in fact,

1383
00:49:27,840 --> 00:49:29,600
instead of saying info for class,

1384
00:49:29,680 --> 00:49:31,120
I would say get school name.

1385
00:49:31,120 --> 00:49:32,320
That will make more sense.

1386
00:49:32,320 --> 00:49:35,360
So, I'm changing the name from info to get school for class method, okay?

1387
00:49:35,360 --> 00:49:36,080
Not for this.

1388
00:49:36,080 --> 00:49:37,360
And let me also change from here.

1389
00:49:37,360 --> 00:49:38,400
So, we'll say get school.

1390
00:49:38,400 --> 00:49:39,760
Here, I will define a function

1391
00:49:39,760 --> 00:49:41,200
and the function name will be info

1392
00:49:41,200 --> 00:49:43,920
because when I say info, I want to know the class name, okay?

1393
00:49:43,920 --> 00:49:46,160
So, this is not related to the object.

1394
00:49:46,160 --> 00:49:48,560
This is not related to class as I will keep it blank, okay?

1395
00:49:48,560 --> 00:49:51,440
So, if you don't want to relate this to a class, keep it blank.

1396
00:49:51,440 --> 00:49:54,480
If you don't want to relate this to an object, keep it blank.

1397
00:49:54,480 --> 00:49:55,680
No self, no class, okay?

1398
00:49:55,680 --> 00:49:56,400
Static method.

1399
00:49:56,400 --> 00:49:57,360
And this will return.

1400
00:49:57,360 --> 00:49:58,080
This will print.

1401
00:49:58,080 --> 00:49:59,360
In fact, not return, this will print.

1402
00:49:59,360 --> 00:50:00,480
We can do whatever you want.

1403
00:50:00,480 --> 00:50:04,000
So, we can say this is student class.

1404
00:50:04,000 --> 00:50:04,720
You can do that, right?

1405
00:50:04,720 --> 00:50:06,320
So, we are printing this is student class

1406
00:50:06,320 --> 00:50:08,720
and in ABC module.

1407
00:50:08,720 --> 00:50:09,040
That's it.

1408
00:50:09,040 --> 00:50:10,080
You can print whatever you want.

1409
00:50:10,080 --> 00:50:12,480
As I mentioned, important is this method

1410
00:50:12,480 --> 00:50:14,480
is nothing to do with the class variables

1411
00:50:14,480 --> 00:50:15,680
and the instance variable.

1412
00:50:15,680 --> 00:50:16,960
Now, where it will be useful.

1413
00:50:16,960 --> 00:50:19,520
So, let's say if you want to perform any operation

1414
00:50:19,520 --> 00:50:21,120
which has something to do with the other objects

1415
00:50:21,120 --> 00:50:23,200
or the class objects, we can use static methods here.

1416
00:50:23,200 --> 00:50:24,480
Or if you want to perform some operation

1417
00:50:24,480 --> 00:50:26,400
like finding a factorial for number, right?

1418
00:50:26,400 --> 00:50:28,000
Because the factorial has nothing to do

1419
00:50:28,000 --> 00:50:29,680
with the class variables or instance variable.

1420
00:50:29,680 --> 00:50:30,800
Maybe you're passing a value.

1421
00:50:30,800 --> 00:50:32,880
You just want to know what's the factor of the number.

1422
00:50:32,880 --> 00:50:34,240
You can use static methods there.

1423
00:50:34,240 --> 00:50:36,240
Now, since we are using a static method,

1424
00:50:36,240 --> 00:50:39,120
we need to use a special decorator here as well.

1425
00:50:39,120 --> 00:50:40,880
So, we have to say any guess.

1426
00:50:40,880 --> 00:50:42,480
We will be using static method.

1427
00:50:42,480 --> 00:50:44,640
So, for class method, we have to say class method

1428
00:50:44,640 --> 00:50:46,880
and for static method, we have to use static method, okay?

1429
00:50:46,880 --> 00:50:48,160
And then you can call it.

1430
00:50:48,160 --> 00:50:50,480
So, you can say, you have to use a class name.

1431
00:50:50,480 --> 00:50:52,640
So, you will say student dot info, right?

1432
00:50:52,640 --> 00:50:53,280
So, this is static.

1433
00:50:53,280 --> 00:50:54,400
So, you don't have to pass anything.

1434
00:50:54,400 --> 00:50:55,920
Not even class and not even object.

1435
00:50:55,920 --> 00:50:57,600
Let's run this code and it works.

1436
00:50:57,600 --> 00:50:58,080
Okay?

1437
00:50:58,080 --> 00:51:00,000
So, basically, we have different types of methods.

1438
00:51:00,000 --> 00:51:02,400
We have instance method which works with instance variable.

1439
00:51:02,400 --> 00:51:05,920
Class method works with class variable and static works with nothing.

1440
00:51:05,920 --> 00:51:08,320
It has, if you want to do something extra with a class,

1441
00:51:08,320 --> 00:51:10,640
nothing to do with class variables or instance variables,

1442
00:51:10,640 --> 00:51:11,360
go with static.

1443
00:51:16,160 --> 00:51:18,800
Now, to this point, we have talked about different types of variables

1444
00:51:18,800 --> 00:51:21,200
and we have talked about different types of methods, right?

1445
00:51:21,200 --> 00:51:24,320
So, we can write variable and methods instead of class, right?

1446
00:51:24,320 --> 00:51:27,040
So, a class will have variables and methods.

1447
00:51:27,040 --> 00:51:30,640
The question is, can we have a class inside a class?

1448
00:51:30,640 --> 00:51:31,760
That sounds weird, right?

1449
00:51:31,760 --> 00:51:33,920
Why would anyone want to have a class inside a class?

1450
00:51:33,920 --> 00:51:35,120
So, let's try to understand that.

1451
00:51:35,120 --> 00:51:38,720
So, let's say I have a class here and this class name is student,

1452
00:51:38,720 --> 00:51:40,800
as usual, the way we have done earlier.

1453
00:51:40,800 --> 00:51:43,520
And when we talk about students, we have different types of variables, right?

1454
00:51:43,520 --> 00:51:45,040
Let me define that function first.

1455
00:51:45,040 --> 00:51:47,600
And the variables which I want here is self.

1456
00:51:47,600 --> 00:51:48,880
First, I want a name.

1457
00:51:48,880 --> 00:51:50,800
Of course, in the last example, we have taken marks,

1458
00:51:50,800 --> 00:51:52,480
but here, let's take something different.

1459
00:51:52,480 --> 00:51:55,920
I would take a name of a person and that will be coming from a user,

1460
00:51:55,920 --> 00:51:57,760
of course, or from when you create an object.

1461
00:51:57,760 --> 00:51:58,480
We'll say name.

1462
00:51:58,480 --> 00:52:01,680
The second thing I want is roll number and I want these two details.

1463
00:52:01,680 --> 00:52:05,200
And then I will assign name here and I will say self.roll number.

1464
00:52:05,200 --> 00:52:06,560
Now, we have used to it, right?

1465
00:52:06,560 --> 00:52:08,560
So, I would say roll number, right?

1466
00:52:08,560 --> 00:52:11,760
Now, once we got these two variables, what I want is I want to print them.

1467
00:52:11,760 --> 00:52:15,200
The way you print these values is by defining some functions, right?

1468
00:52:15,200 --> 00:52:16,800
Of course, you can do that directly.

1469
00:52:16,800 --> 00:52:18,320
Example, if I create an object here.

1470
00:52:18,320 --> 00:52:21,520
So, let's say the object is S1 and I will say student.

1471
00:52:21,520 --> 00:52:23,840
And when you create this object, you have to pass values as well, right?

1472
00:52:23,840 --> 00:52:27,520
The first one I want is navin and roll number is let's say 2.

1473
00:52:27,520 --> 00:52:30,960
The second object we want here is S2 and we'll say student,

1474
00:52:30,960 --> 00:52:32,560
in which we'll be having two things.

1475
00:52:32,560 --> 00:52:36,880
Of course, I would say this is Jenny and the roll number is let's say 3.

1476
00:52:36,880 --> 00:52:39,920
So, I have navin and we have Jenny here, we got 2 and 3.

1477
00:52:39,920 --> 00:52:41,600
Okay, so let's say I want to print.

1478
00:52:41,600 --> 00:52:42,960
I want to print S1.

1479
00:52:42,960 --> 00:52:45,520
So, I want to print all the details about S1, okay?

1480
00:52:45,520 --> 00:52:47,360
I want to print the name and roll number.

1481
00:52:47,360 --> 00:52:53,120
So, the way you do that is by saying S1.name and we can say S1.roll number.

1482
00:52:53,200 --> 00:52:54,800
So, this is how you can print the values, right?

1483
00:52:54,800 --> 00:52:56,400
Let me run this code and you can say it works.

1484
00:52:56,400 --> 00:52:58,240
We got the details about S1.

1485
00:52:58,240 --> 00:53:01,680
Now, what I want to do is I don't want to, see, this doesn't look good, right?

1486
00:53:01,680 --> 00:53:04,400
What you should be saying is you should say S1.show.

1487
00:53:04,400 --> 00:53:07,920
So, when I say S1.show, it should print all the details about S1.

1488
00:53:07,920 --> 00:53:10,880
Maybe it has roll number, name or different variables, right?

1489
00:53:10,880 --> 00:53:13,680
So, of course, we need to define that function or method here.

1490
00:53:13,680 --> 00:53:15,120
So, we'll set F, show.

1491
00:53:15,120 --> 00:53:20,080
So, this will print self.name and we'll print self.roll number.

1492
00:53:20,080 --> 00:53:21,520
So, we are printing these two data, right?

1493
00:53:21,520 --> 00:53:24,000
It should work. Let's run this code and you can see we got the same data.

1494
00:53:24,000 --> 00:53:26,720
Now, let's say student also has a laptop.

1495
00:53:26,720 --> 00:53:27,280
Of course, right?

1496
00:53:27,280 --> 00:53:29,920
When you say you are doing IT, in fact, we have done that, right?

1497
00:53:29,920 --> 00:53:31,520
So, you are a student of Therisco.

1498
00:53:31,520 --> 00:53:34,800
You will be using a laptop to run your code or the extra doesn't matter.

1499
00:53:34,800 --> 00:53:36,720
And let's say we want laptop here.

1500
00:53:36,720 --> 00:53:39,200
So, of course, I want to know which laptop we are using.

1501
00:53:39,200 --> 00:53:40,400
So, I want to know your config.

1502
00:53:40,400 --> 00:53:44,560
Now, in that case, I will also ask a user, hey, tell me which laptop you are using.

1503
00:53:44,560 --> 00:53:47,680
The problem is when you talk about laptop, there are different things important, right?

1504
00:53:47,680 --> 00:53:48,880
It's not just about brand.

1505
00:53:48,880 --> 00:53:51,120
You will not simply say, hey, I have HP laptop.

1506
00:53:51,120 --> 00:53:52,320
I have a Lenovo laptop.

1507
00:53:52,320 --> 00:53:55,200
You will also mention the configuration, maybe CPU and RAM.

1508
00:53:55,200 --> 00:53:56,080
That's very important.

1509
00:53:56,080 --> 00:53:59,200
Maybe any i5 CPU with, let's say, 8GB RAM is enough.

1510
00:53:59,200 --> 00:54:00,560
So, I want to know your config.

1511
00:54:00,560 --> 00:54:01,360
So, what you will do?

1512
00:54:01,360 --> 00:54:03,040
Will you pass three variables?

1513
00:54:03,040 --> 00:54:07,760
Like, you will pass a brand, HP, and then you will also pass the CPU,

1514
00:54:07,760 --> 00:54:12,160
which you are using, let's say i5, or you will also pass, let's say, RAM of 8GB.

1515
00:54:12,160 --> 00:54:13,200
Yes, you can do that, okay?

1516
00:54:13,200 --> 00:54:14,960
So, I have to accept these variables here.

1517
00:54:14,960 --> 00:54:16,640
I have to accept that here, right?

1518
00:54:16,640 --> 00:54:17,680
And we can do that.

1519
00:54:17,680 --> 00:54:19,920
The other option which we have is different, okay?

1520
00:54:19,920 --> 00:54:23,600
So, the other option which we can do here is, we can create a class, okay?

1521
00:54:23,600 --> 00:54:29,200
We can create a supply class as laptop, or instead of creating a class outside the student,

1522
00:54:29,200 --> 00:54:31,040
we can also create a laptop inside student.

1523
00:54:31,040 --> 00:54:33,760
So, a laptop will be only used by student, and in this case.

1524
00:54:33,760 --> 00:54:35,760
So, I will say a class and I will say laptop.

1525
00:54:35,760 --> 00:54:40,160
So, we are creating a laptop class inside a student, so that we can get that group, okay?

1526
00:54:40,160 --> 00:54:44,240
So, we have to also set depth here, and we have to say init, right?

1527
00:54:44,240 --> 00:54:45,520
And then let's create a variable.

1528
00:54:45,520 --> 00:54:49,200
So, the first variable we need here is brand, and let's say the brand is HP.

1529
00:54:49,280 --> 00:54:50,320
That's the first thing we need.

1530
00:54:50,320 --> 00:54:52,960
Second thing we need is the CPU which you are working with.

1531
00:54:52,960 --> 00:54:56,720
I would say CPU is i5, and the third one is RAM.

1532
00:54:56,720 --> 00:54:57,440
Let's say aGB RAM.

1533
00:54:57,440 --> 00:54:58,880
So, we got these three things, right?

1534
00:54:58,880 --> 00:55:00,400
Now, we got these three variables.

1535
00:55:00,400 --> 00:55:02,080
And where to create the object of it?

1536
00:55:02,080 --> 00:55:04,400
So, we can create the object here itself.

1537
00:55:04,400 --> 00:55:07,760
So, we can create the object inside the init, and normally that's what we do.

1538
00:55:07,760 --> 00:55:11,840
So, if you want to create the object of laptop, we should be creating that object inside the

1539
00:55:11,840 --> 00:55:12,800
outer class, okay?

1540
00:55:12,800 --> 00:55:16,080
So, the object of laptop will be inside the student class.

1541
00:55:16,080 --> 00:55:17,280
The way to do that is very simple.

1542
00:55:17,360 --> 00:55:19,600
Here, you will say self.lap.

1543
00:55:19,600 --> 00:55:22,320
You can create any variable you want, and you will say laptop.

1544
00:55:22,320 --> 00:55:24,720
Or we are getting error, so we have to say self.laptop.

1545
00:55:24,720 --> 00:55:25,440
Okay, this works.

1546
00:55:25,440 --> 00:55:28,480
So, you can see in the constructor itself, you can define a variable.

1547
00:55:28,480 --> 00:55:31,920
So, in the outer class, you can define a variable lab, and you can define the object.

1548
00:55:31,920 --> 00:55:36,960
So, if you really want to use a laptop, you have to say the student object.lap.

1549
00:55:36,960 --> 00:55:41,760
Example, outside, if I want to use it, I will say s1.lap.

1550
00:55:41,760 --> 00:55:43,280
Whatever brand you want to fetch.

1551
00:55:43,280 --> 00:55:47,120
So, you cannot simply say lab.brand, you have to say s1.lab.brand.

1552
00:55:47,120 --> 00:55:49,680
Because the lab object is inside the student class.

1553
00:55:49,680 --> 00:55:50,560
This is one way.

1554
00:55:50,560 --> 00:55:52,800
What if you want to create another object of it?

1555
00:55:52,800 --> 00:55:54,080
Let's say I don't want lab.

1556
00:55:54,080 --> 00:55:54,400
I want...

1557
00:55:54,400 --> 00:55:57,680
So, you can simply say lab1 is equal to s1.lab.

1558
00:55:57,680 --> 00:55:59,440
You can get another object for s2.

1559
00:55:59,440 --> 00:56:02,720
You can say lab2 is equal to s2.lab.

1560
00:56:02,720 --> 00:56:05,200
Because for every object, you will get different laptop object.

1561
00:56:05,200 --> 00:56:06,800
Okay, trust me, this is how it works.

1562
00:56:06,800 --> 00:56:08,400
In fact, you can also check that.

1563
00:56:08,400 --> 00:56:09,840
We got two different laptop objects here.

1564
00:56:09,840 --> 00:56:10,960
We will print lab1.

1565
00:56:10,960 --> 00:56:11,760
And let's print laptop.

1566
00:56:11,760 --> 00:56:13,520
So, let's print the ideas of lab1, lab2.

1567
00:56:13,520 --> 00:56:14,720
We got two different objects here.

1568
00:56:14,720 --> 00:56:15,600
So, this works.

1569
00:56:15,600 --> 00:56:16,000
Okay?

1570
00:56:16,000 --> 00:56:17,760
This is where you create inner class.

1571
00:56:17,760 --> 00:56:18,000
Okay?

1572
00:56:18,000 --> 00:56:21,520
So, we have a laptop as an inner class of a student.

1573
00:56:21,520 --> 00:56:22,000
Right?

1574
00:56:22,000 --> 00:56:23,920
You could have done the outer class as well.

1575
00:56:23,920 --> 00:56:26,400
I mean, you could have created different classes that you want that works.

1576
00:56:26,400 --> 00:56:30,720
But sometime, when you know that this class will be used only for student, nothing else,

1577
00:56:30,720 --> 00:56:32,720
then you don't have to create a separate file for that.

1578
00:56:32,720 --> 00:56:34,480
You can do that in student class itself.

1579
00:56:34,480 --> 00:56:36,480
Now, can I directly create the object outside?

1580
00:56:36,480 --> 00:56:39,360
Let's say I don't want to get an object of laptop inside the student class.

1581
00:56:39,360 --> 00:56:40,880
Can we do it outside directly?

1582
00:56:40,880 --> 00:56:41,360
Let's try.

1583
00:56:41,360 --> 00:56:43,760
So, I will say lab1 is equal to...

1584
00:56:43,760 --> 00:56:45,760
I will say student.laptop.

1585
00:56:45,760 --> 00:56:46,800
Now, why student here?

1586
00:56:46,800 --> 00:56:49,120
Because you cannot simply access laptop directly.

1587
00:56:49,120 --> 00:56:49,280
Right?

1588
00:56:49,280 --> 00:56:51,920
Because laptop class belongs to a student class.

1589
00:56:51,920 --> 00:56:55,360
So, we have to always say student.laptop constructor.

1590
00:56:55,360 --> 00:56:57,280
You cannot simply create laptop directly.

1591
00:56:57,280 --> 00:56:57,520
Okay?

1592
00:56:57,520 --> 00:56:58,720
So, this is one thing you have to remember.

1593
00:56:58,720 --> 00:57:02,640
You can create the object of inner class inside outer class.

1594
00:57:02,640 --> 00:57:05,280
Or you can do that outside the outer class provided.

1595
00:57:05,280 --> 00:57:06,720
You are using the outer class name.

1596
00:57:06,720 --> 00:57:08,160
So, you have to say student.laptop.

1597
00:57:08,160 --> 00:57:08,320
Okay?

1598
00:57:08,320 --> 00:57:08,960
This works.

1599
00:57:08,960 --> 00:57:11,840
In fact, just to enhance the example, what I will also do is,

1600
00:57:11,920 --> 00:57:15,360
we can create a show method for a laptop as well.

1601
00:57:15,360 --> 00:57:16,880
So, we can say show for laptop.

1602
00:57:16,880 --> 00:57:18,480
And you can see we have two show methods.

1603
00:57:18,480 --> 00:57:19,840
One is student and one is laptop.

1604
00:57:19,840 --> 00:57:20,080
Okay?

1605
00:57:20,080 --> 00:57:23,120
So, in such student, we have show method inside laptop.

1606
00:57:23,120 --> 00:57:23,840
Also, we have show.

1607
00:57:23,840 --> 00:57:25,520
But these are two different show methods.

1608
00:57:25,520 --> 00:57:28,960
The show method of student will print the data about a student.

1609
00:57:28,960 --> 00:57:31,840
And the show method of laptop will print the show method of student.

1610
00:57:31,840 --> 00:57:32,640
I know that makes it.

1611
00:57:32,640 --> 00:57:33,120
That's weird.

1612
00:57:33,120 --> 00:57:33,760
So, let's do that.

1613
00:57:33,760 --> 00:57:40,800
So, I will say print self.brand, self.cpu, and self.ram.

1614
00:57:40,800 --> 00:57:42,000
Okay? So, we are printing this data.

1615
00:57:42,000 --> 00:57:44,400
So, this show is different from this show.

1616
00:57:44,400 --> 00:57:46,080
Let me now print laptop here.

1617
00:57:46,080 --> 00:57:46,800
Let me on this quote.

1618
00:57:46,800 --> 00:57:50,160
And you can see it brings only the name and the roll number.

1619
00:57:50,160 --> 00:57:51,360
I also want to print the laptop.

1620
00:57:51,360 --> 00:57:52,400
Oh, you need the object, right?

1621
00:57:52,400 --> 00:57:53,520
We have removed that statement.

1622
00:57:53,520 --> 00:57:58,800
Because if you want to access laptop, you have to say self.lap is equal to laptop.

1623
00:57:58,800 --> 00:58:00,400
But you have to say self.

1624
00:58:00,400 --> 00:58:01,120
So, this is important.

1625
00:58:01,120 --> 00:58:04,800
And after printing, this will call laptop show because we also want to do that.

1626
00:58:04,800 --> 00:58:06,880
So, you will say self.laptop show.

1627
00:58:06,880 --> 00:58:07,040
Okay?

1628
00:58:07,040 --> 00:58:09,840
So, we are printing data about a student and laptop as well.

1629
00:58:09,840 --> 00:58:10,560
So, this should work.

1630
00:58:10,560 --> 00:58:12,400
Let's run this code and it worked.

1631
00:58:12,400 --> 00:58:15,440
You can see we got data about a student and laptop as well.

1632
00:58:15,440 --> 00:58:18,400
So, this is how you create the class inside a class.

1633
00:58:23,440 --> 00:58:26,480
Now, in this video, we'll talk about inheritance.

1634
00:58:26,480 --> 00:58:28,560
Now, we talk about a concept of oops, you know,

1635
00:58:28,560 --> 00:58:30,880
where which is object-oriented programming.

1636
00:58:30,880 --> 00:58:33,040
We have so many concepts to talk about.

1637
00:58:33,040 --> 00:58:34,960
And one of them is inheritance.

1638
00:58:34,960 --> 00:58:39,440
Now, in real life, what we have is we have this parent and child relationship, right?

1639
00:58:39,440 --> 00:58:41,680
So, whatever belongs to your parents belongs to you.

1640
00:58:41,680 --> 00:58:45,040
Example, if my father or mother has a phone, it's my phone, right?

1641
00:58:45,040 --> 00:58:47,200
By default, my phone would be my phone.

1642
00:58:47,200 --> 00:58:49,120
But my father's phone would be my phone, right?

1643
00:58:49,120 --> 00:58:50,000
That's how it works.

1644
00:58:50,000 --> 00:58:52,000
So, if your parent's house, it's your house.

1645
00:58:52,000 --> 00:58:53,840
That's what we say inheritance, right?

1646
00:58:53,840 --> 00:58:57,280
In the same concept, you can implement in programming as well.

1647
00:58:57,280 --> 00:59:00,240
In fact, all the languages which follows oops concept,

1648
00:59:00,240 --> 00:59:02,080
they do implement inheritance, right?

1649
00:59:02,080 --> 00:59:04,320
And the way you do that is with the help of classes.

1650
00:59:04,320 --> 00:59:05,760
Class inherit a class.

1651
00:59:05,760 --> 00:59:06,400
Let's try that.

1652
00:59:06,400 --> 00:59:09,120
What I'm talking about is, let's say if you have a class

1653
00:59:09,200 --> 00:59:10,800
and class is a, okay?

1654
00:59:10,800 --> 00:59:12,720
Again, it should be a logical name.

1655
00:59:12,720 --> 00:59:15,360
So, you can go with employee class, you can go with student class,

1656
00:59:15,360 --> 00:59:18,080
you can go with laptop class, whatever class you love.

1657
00:59:18,080 --> 00:59:23,200
But time being, just for the example, we are going for class a and class b or class c.

1658
00:59:23,200 --> 00:59:26,080
In future, we'll try to implement some other examples

1659
00:59:26,080 --> 00:59:28,320
using different names and with proper example.

1660
00:59:28,320 --> 00:59:31,600
But at this point, just to keep it simple, let's go for class a.

1661
00:59:31,600 --> 00:59:35,360
Now, if we talk about this class a, this class a will have multiple features, right?

1662
00:59:35,360 --> 00:59:37,120
Maybe we can define two methods here.

1663
00:59:37,120 --> 00:59:38,320
So, we'll set definition there.

1664
00:59:38,320 --> 00:59:42,000
The first method which I want to go for is, let's say feature one, okay?

1665
00:59:42,000 --> 00:59:44,480
So, let's say we got this function which is feature one

1666
00:59:44,480 --> 00:59:47,120
and this function does provide you something, okay?

1667
00:59:47,120 --> 00:59:50,320
So, time being, we are printing feature one working.

1668
00:59:50,320 --> 00:59:51,440
That's it, nothing much.

1669
00:59:51,440 --> 00:59:53,840
Of course, it can be a complex code, but make it simple.

1670
00:59:53,840 --> 00:59:55,040
Let's keep it that.

1671
00:59:55,040 --> 00:59:56,560
And then we can have another feature here.

1672
00:59:56,560 --> 00:59:57,760
Let me just copy paste this code.

1673
00:59:57,760 --> 01:00:01,200
So, I will say copy and paste and this would be my feature two.

1674
01:00:01,200 --> 01:00:05,200
So, we got feature one and feature two and this will point feature two is working.

1675
01:00:05,200 --> 01:00:07,120
So, this class a has two features.

1676
01:00:07,120 --> 01:00:08,960
We got feature one, feature two, right?

1677
01:00:08,960 --> 01:00:12,160
And the way you can access them is with the help of object, right?

1678
01:00:12,160 --> 01:00:13,840
And the way you create an object is very simple.

1679
01:00:13,840 --> 01:00:17,840
You simply say a one is equal to a, that's how you create the object, right?

1680
01:00:17,840 --> 01:00:19,280
Where a is your constructor.

1681
01:00:19,280 --> 01:00:22,640
Again, you can define that in it method here, but not needed at this point.

1682
01:00:22,640 --> 01:00:23,520
So, this will work.

1683
01:00:23,520 --> 01:00:27,040
And using this a one, you can call feature one, you can call feature two, right?

1684
01:00:27,040 --> 01:00:31,360
So, you can say a one dot feature one and a one dot feature two.

1685
01:00:31,360 --> 01:00:32,160
And this will work.

1686
01:00:32,160 --> 01:00:35,120
Let me just run this code and you can see we got feature one working,

1687
01:00:35,120 --> 01:00:35,920
feature two working.

1688
01:00:35,920 --> 01:00:37,360
So, this code is working.

1689
01:00:37,360 --> 01:00:40,640
Now, what I'm excited about is, let's say we have one more class.

1690
01:00:40,640 --> 01:00:42,000
Let's talk about class B.

1691
01:00:42,000 --> 01:00:44,080
So, let me just create a class B here itself.

1692
01:00:44,080 --> 01:00:46,240
So, here I will say class B.

1693
01:00:46,240 --> 01:00:48,160
And class B will also have two features.

1694
01:00:48,160 --> 01:00:50,800
I will name this as feature three and feature four.

1695
01:00:50,800 --> 01:00:53,280
Instead of typing them, let me just copy paste the code here.

1696
01:00:53,280 --> 01:00:57,200
And we'll name this as feature three and feature four, right?

1697
01:00:57,200 --> 01:00:59,600
See, normally what happens, you know, when you work on a project,

1698
01:00:59,600 --> 01:01:01,440
of course, we have a very big team, right?

1699
01:01:01,440 --> 01:01:04,240
So, example, if one person is defining a class, okay?

1700
01:01:04,240 --> 01:01:07,520
In that class, we provide you four features or four methods.

1701
01:01:07,520 --> 01:01:11,600
Maybe you want to define some other class in which you need some extra features

1702
01:01:11,600 --> 01:01:14,160
and you also want the existing features.

1703
01:01:14,160 --> 01:01:15,760
You don't have to really find it, right?

1704
01:01:15,760 --> 01:01:16,560
You can use it.

1705
01:01:16,560 --> 01:01:18,160
And the way you do that, you're simply saying,

1706
01:01:18,160 --> 01:01:20,720
example, in this class B, we got two features, right?

1707
01:01:20,720 --> 01:01:22,960
We got feature three, we got feature four.

1708
01:01:22,960 --> 01:01:26,160
And of course, if I create the object of B one,

1709
01:01:26,160 --> 01:01:28,640
so it's a B one is equal to B.

1710
01:01:28,640 --> 01:01:30,960
And the functions which you can call using B one.

1711
01:01:30,960 --> 01:01:33,840
So, if I say B one dot, you can see we got only two options.

1712
01:01:33,840 --> 01:01:35,920
We got feature three and feature four, of course, right?

1713
01:01:35,920 --> 01:01:38,480
Because in B class, we have only two features.

1714
01:01:38,480 --> 01:01:42,000
What if you want to get the features of A as well?

1715
01:01:42,000 --> 01:01:44,960
And that's where inheritance comes into picture.

1716
01:01:44,960 --> 01:01:49,520
So, we can say, hey, this B is a child class of A, right?

1717
01:01:49,520 --> 01:01:52,560
And the moment you say child class, it will import all the features.

1718
01:01:52,560 --> 01:01:57,040
What I will say is this B is a child class or you can say subclass.

1719
01:01:57,040 --> 01:01:59,120
We have different terminology we can use here.

1720
01:01:59,120 --> 01:02:01,840
And we can simply say in the bracket, you can say A.

1721
01:02:01,840 --> 01:02:06,240
So, this class B is inheriting all the features from A.

1722
01:02:06,240 --> 01:02:07,200
And we got it, right?

1723
01:02:07,200 --> 01:02:10,000
Just writing that one thing, you know, just bracket A.

1724
01:02:10,000 --> 01:02:13,040
We are saying B is inheriting the features from A,

1725
01:02:13,040 --> 01:02:16,080
which means with the object of B, which is B one in this case,

1726
01:02:16,080 --> 01:02:18,720
the moment I say B one dot, see the options.

1727
01:02:18,720 --> 01:02:21,840
You can access feature one, feature two, feature three and feature four.

1728
01:02:21,840 --> 01:02:24,320
And that's the importance of inheritance,

1729
01:02:24,320 --> 01:02:27,600
which simply means if you already have a class which provides you some feature,

1730
01:02:27,600 --> 01:02:30,720
and in future, if you want to create your own classes,

1731
01:02:30,720 --> 01:02:34,720
in which you want to use those features, you just need to inherit them, right?

1732
01:02:34,720 --> 01:02:36,240
So, we can use some terminologies here.

1733
01:02:36,240 --> 01:02:40,640
We can say superclass, subclass, or we can say parent class or child class.

1734
01:02:40,640 --> 01:02:42,960
So, timing will refer them as superclass and subclass.

1735
01:02:42,960 --> 01:02:48,160
So, super is a class which is A and a class which inherits the class,

1736
01:02:48,160 --> 01:02:49,840
we will call them as subclass.

1737
01:02:49,840 --> 01:02:52,240
So, B is subclass and A is superclass.

1738
01:02:52,240 --> 01:02:54,720
So, that's the concept about inheritance.

1739
01:02:54,720 --> 01:02:58,320
Now, this is also called as a single level inheritance.

1740
01:02:58,320 --> 01:02:59,840
We have some other types as well.

1741
01:02:59,840 --> 01:03:02,160
We also have a multi-level inheritance.

1742
01:03:02,160 --> 01:03:03,040
Now, what it means?

1743
01:03:03,040 --> 01:03:04,800
Example, let's say if I have another class here,

1744
01:03:04,800 --> 01:03:07,920
let me get one more class here, and this class is let's say C.

1745
01:03:07,920 --> 01:03:11,760
So, we'll call this class C or this class C inherits B.

1746
01:03:11,760 --> 01:03:14,960
Now, what will happen is whatever you do in this class, let's say timebin,

1747
01:03:14,960 --> 01:03:17,600
I will define only one feature here, we'll say feature five.

1748
01:03:17,600 --> 01:03:19,440
You can see how lazy I am.

1749
01:03:19,440 --> 01:03:21,600
So, this is feature five working, right?

1750
01:03:21,600 --> 01:03:23,680
So, we got C class which has only one feature.

1751
01:03:23,680 --> 01:03:28,320
But the moment you create an object for C one, so I will say C one is equal to C.

1752
01:03:28,400 --> 01:03:31,280
The moment I say C one dot, see the methods you can use.

1753
01:03:31,280 --> 01:03:32,640
So, we can use feature one now.

1754
01:03:32,640 --> 01:03:34,960
So, feature one feature two are coming from A, right?

1755
01:03:34,960 --> 01:03:36,560
But C is only extending B.

1756
01:03:36,560 --> 01:03:37,440
So, that's our relationship.

1757
01:03:37,440 --> 01:03:40,480
We have grandparent, we have parent, and then we have child, right?

1758
01:03:40,480 --> 01:03:45,360
So, a child can access all the features from parent, grandparent, great grandparent, right?

1759
01:03:45,360 --> 01:03:46,320
So, that's how it works.

1760
01:03:46,320 --> 01:03:47,360
Okay, this is working, right?

1761
01:03:47,360 --> 01:03:50,240
So, we got single where you have one superclass, one subclass,

1762
01:03:50,240 --> 01:03:53,040
then we have multi-level where you have superclass, subclass,

1763
01:03:53,040 --> 01:03:54,800
and then I get subclass of that superclass.

1764
01:03:54,800 --> 01:03:55,760
Okay, this is working.

1765
01:03:55,760 --> 01:03:57,520
What if you go for multiple?

1766
01:03:57,520 --> 01:03:58,880
What is multiple here?

1767
01:03:58,880 --> 01:04:01,840
Let's say the C is not only taking from A and B.

1768
01:04:01,840 --> 01:04:03,280
We got some other class as well.

1769
01:04:03,280 --> 01:04:08,000
Just for time being, what I will do is I will say B is not inheriting A, okay?

1770
01:04:08,000 --> 01:04:10,160
So, A and B, they are two different classes.

1771
01:04:10,160 --> 01:04:11,840
Nothing, they are not related to each other.

1772
01:04:11,840 --> 01:04:14,400
A provides two features, B provides two features, okay?

1773
01:04:14,400 --> 01:04:16,240
So, there's no relationship between A and B.

1774
01:04:16,240 --> 01:04:18,080
They are two different classes.

1775
01:04:18,080 --> 01:04:21,360
C says, I want to access features from both, from A and B.

1776
01:04:21,360 --> 01:04:24,240
So, in this case, the C will inherit from A and B both.

1777
01:04:24,240 --> 01:04:25,600
So, you will say A, B.

1778
01:04:25,680 --> 01:04:28,400
So, C will copy from both, or C will inherit from both.

1779
01:04:28,400 --> 01:04:29,520
So, we will say C1.

1780
01:04:29,520 --> 01:04:32,080
The moment you say C1, you can see you can access all the features.

1781
01:04:32,080 --> 01:04:33,440
That's not the case with B1 now.

1782
01:04:33,440 --> 01:04:36,560
B1 can only access two features, feature three and feature four,

1783
01:04:36,560 --> 01:04:40,000
because B is not inheriting A, okay?

1784
01:04:40,000 --> 01:04:40,640
Point to remember.

1785
01:04:40,640 --> 01:04:42,960
So, we got A, we got B, and then we got C.

1786
01:04:42,960 --> 01:04:45,680
C is inheriting both the classes, A and B.

1787
01:04:45,680 --> 01:04:47,520
So, this is called as multi-pull.

1788
01:04:47,520 --> 01:04:49,120
So, this is your multi-pull, right?

1789
01:04:49,120 --> 01:04:51,840
So, we have done with single, we have done with multi-level,

1790
01:04:51,840 --> 01:04:53,360
and then we have multi-pull.

1791
01:04:53,440 --> 01:04:55,280
This is how we can work with inheritance.

1792
01:05:00,080 --> 01:05:03,280
Now, to this point, we have talked about OOPS concept, right?

1793
01:05:03,280 --> 01:05:05,760
In which we have seen inheritance, right?

1794
01:05:05,760 --> 01:05:06,720
Now, what is inheritance?

1795
01:05:06,720 --> 01:05:11,520
If you already have some classes, and if you want to use the existing features,

1796
01:05:11,520 --> 01:05:16,000
you will simply say class B, which will take the features from A, right?

1797
01:05:16,000 --> 01:05:18,240
So, class B inherits A.

1798
01:05:18,240 --> 01:05:21,600
Or you can go with a concept of multiple inheritance,

1799
01:05:21,600 --> 01:05:24,800
where one class will extend from two different classes,

1800
01:05:24,800 --> 01:05:26,400
or more than two classes, right?

1801
01:05:26,400 --> 01:05:28,560
So, in this case, we have class A, class B,

1802
01:05:28,560 --> 01:05:31,840
and then we have class C, which has a feature five,

1803
01:05:31,840 --> 01:05:33,840
but it is also inheriting A and B.

1804
01:05:33,840 --> 01:05:36,080
So, we can say C has five features, right?

1805
01:05:36,080 --> 01:05:37,280
So, that makes sense.

1806
01:05:37,280 --> 01:05:39,840
Now, what we'll do in this video is we'll talk about two topics.

1807
01:05:39,840 --> 01:05:44,400
The first one is the constructor in inheritance, how it behaves,

1808
01:05:44,400 --> 01:05:49,680
and we'll also talk about method resolution order, or you can say MRO.

1809
01:05:49,680 --> 01:05:51,200
So, let's start with the constructor.

1810
01:05:51,200 --> 01:05:53,840
Timebin, let's ignore C, okay?

1811
01:05:53,840 --> 01:05:56,640
So, let's say we don't have this C, so we'll ignore that part.

1812
01:05:56,640 --> 01:06:00,160
And, in fact, we'll delete that part for timebin.

1813
01:06:00,160 --> 01:06:04,960
And let's focus only on A and B, where B is inheriting A, okay?

1814
01:06:04,960 --> 01:06:07,520
So, in total, in B, we have four features, right?

1815
01:06:07,520 --> 01:06:09,920
Now, what happens is, if I create an object of A,

1816
01:06:09,920 --> 01:06:13,520
so let's say if I say A1 is equal to constructor of A,

1817
01:06:13,520 --> 01:06:14,400
so this will work, right?

1818
01:06:14,400 --> 01:06:16,240
So, when you say A bracket, that's a constructor,

1819
01:06:16,240 --> 01:06:18,400
it will call a method which is in it.

1820
01:06:18,400 --> 01:06:21,120
Now, even if you don't define it, it is there somewhere, right?

1821
01:06:21,120 --> 01:06:23,760
But let me define my own constructor, own init here.

1822
01:06:23,760 --> 01:06:26,320
So, I will set def, and we'll define the init method,

1823
01:06:26,320 --> 01:06:28,240
and this init method will print one stuff.

1824
01:06:28,240 --> 01:06:31,200
So, I will say print in A init.

1825
01:06:31,200 --> 01:06:33,200
Nothing much, we are not doing anything extra here,

1826
01:06:33,200 --> 01:06:36,000
we are just printing in A init, that's it.

1827
01:06:36,000 --> 01:06:36,640
Now, what do you think?

1828
01:06:36,640 --> 01:06:37,360
What it will print?

1829
01:06:37,360 --> 01:06:39,520
Of course, we are creating object of A, right?

1830
01:06:39,520 --> 01:06:41,120
So, it will only execute A.

1831
01:06:41,120 --> 01:06:44,000
See, with the object of A, you cannot access features of B, okay?

1832
01:06:44,000 --> 01:06:46,480
So, even if I try example, if I say A1 dot,

1833
01:06:46,480 --> 01:06:49,600
you can only access feature one and feature two.

1834
01:06:49,600 --> 01:06:51,520
But yes, if you have an object of B,

1835
01:06:51,520 --> 01:06:53,520
you can access all the features, right?

1836
01:06:53,520 --> 01:06:54,880
Features from A and B,

1837
01:06:54,880 --> 01:06:58,320
because B is a subclass and A is superclass.

1838
01:06:58,320 --> 01:07:01,280
And as I mentioned, subclass can access all the features

1839
01:07:01,280 --> 01:07:03,520
from superclass, but that's not vice versa, right?

1840
01:07:03,520 --> 01:07:05,840
A superclass cannot access all the features of subclass,

1841
01:07:05,840 --> 01:07:07,280
not even one feature of subclass.

1842
01:07:07,280 --> 01:07:08,160
Okay, this is fun.

1843
01:07:08,160 --> 01:07:10,640
Now, what if I create object of B?

1844
01:07:10,640 --> 01:07:12,080
So, I'm not getting object of A here,

1845
01:07:12,080 --> 01:07:12,800
I'm getting object of B.

1846
01:07:12,800 --> 01:07:14,800
Doesn't matter what is A1 or B1,

1847
01:07:14,800 --> 01:07:16,560
important is if I create an object,

1848
01:07:16,560 --> 01:07:18,880
B, which call the constructor, that's the question,

1849
01:07:18,880 --> 01:07:20,480
because we are not getting object of A,

1850
01:07:20,480 --> 01:07:21,760
we are getting object of B.

1851
01:07:21,760 --> 01:07:24,240
Will it call the constructor of A?

1852
01:07:24,240 --> 01:07:24,880
That's the question.

1853
01:07:24,880 --> 01:07:27,200
Let me just run this code and it works, okay?

1854
01:07:27,200 --> 01:07:29,040
So, even if you have the object of B,

1855
01:07:29,040 --> 01:07:32,240
it will still call the constructor of A, right?

1856
01:07:32,240 --> 01:07:33,360
That's how it works.

1857
01:07:33,360 --> 01:07:35,840
But what if you have your own constructor?

1858
01:07:35,840 --> 01:07:38,080
What if you have your own init method?

1859
01:07:38,080 --> 01:07:40,560
Example in B, see in B, we don't have that init, right?

1860
01:07:40,560 --> 01:07:41,680
And that's why it is going up.

1861
01:07:41,680 --> 01:07:45,280
So, let me repeat, since we don't have init inside B,

1862
01:07:45,280 --> 01:07:47,440
that's why it is going to A.

1863
01:07:47,520 --> 01:07:50,000
But what if you already have an init with you?

1864
01:07:50,000 --> 01:07:52,080
So, I will simply copy paste here in B.

1865
01:07:52,080 --> 01:07:54,160
So, both have init, but then in this,

1866
01:07:54,160 --> 01:07:56,400
I will print in B init, right?

1867
01:07:56,400 --> 01:07:58,640
So, in A, we are printing in A init,

1868
01:07:58,640 --> 01:08:00,640
in B, we are printing in B init.

1869
01:08:00,640 --> 01:08:01,680
So, this makes sense.

1870
01:08:01,680 --> 01:08:03,680
Now, if I run this code, what it will print?

1871
01:08:03,680 --> 01:08:06,960
It will print in A init or in B init.

1872
01:08:06,960 --> 01:08:08,960
Of course, if you are getting object of B,

1873
01:08:08,960 --> 01:08:11,360
it should only call the init of B, right?

1874
01:08:11,360 --> 01:08:12,720
And let's see if that works.

1875
01:08:12,720 --> 01:08:14,800
And let me just run this code and we are right.

1876
01:08:14,800 --> 01:08:19,120
So, when you run the code, you can see we only got in B init.

1877
01:08:19,120 --> 01:08:21,680
So, that means if you create an object of B,

1878
01:08:21,680 --> 01:08:25,120
first it will try to find the init of B.

1879
01:08:25,120 --> 01:08:27,200
If it is not there, then it will go for A.

1880
01:08:27,200 --> 01:08:28,880
Okay, that's the point you have to remember.

1881
01:08:28,880 --> 01:08:32,000
But what if you also want to call the init of A?

1882
01:08:32,000 --> 01:08:32,800
Is it possible?

1883
01:08:32,800 --> 01:08:35,040
I mean, if I create an object of B,

1884
01:08:35,040 --> 01:08:38,160
can I call the init of both the classes?

1885
01:08:38,160 --> 01:08:39,840
I mean A and B.

1886
01:08:39,840 --> 01:08:41,840
See, by default, it will call only B, right?

1887
01:08:41,840 --> 01:08:43,760
What if I want to call A as well?

1888
01:08:43,840 --> 01:08:47,040
And that's where we have a very special keyword or a method,

1889
01:08:47,040 --> 01:08:49,440
you can say, and that is super.

1890
01:08:49,440 --> 01:08:50,720
So, with the help of super,

1891
01:08:50,720 --> 01:08:53,840
so you can say super and it's a method, basically.

1892
01:08:53,840 --> 01:08:55,680
So, you will say super dot.

1893
01:08:55,680 --> 01:08:57,040
The moment you say super,

1894
01:08:57,040 --> 01:08:59,840
you can access all the features of the parent class.

1895
01:08:59,840 --> 01:09:01,120
So, you can say super dot init.

1896
01:09:01,120 --> 01:09:03,040
So, what we are doing is we are trying to call

1897
01:09:03,040 --> 01:09:05,200
an init method of class A.

1898
01:09:05,200 --> 01:09:06,560
So, the moment you say super,

1899
01:09:06,560 --> 01:09:08,960
you are representing the super class, okay?

1900
01:09:08,960 --> 01:09:10,720
Which in this case, it is A.

1901
01:09:10,720 --> 01:09:14,400
So, we are trying to call the init method of class A.

1902
01:09:14,400 --> 01:09:15,440
That's important.

1903
01:09:15,440 --> 01:09:16,560
And now, let's run this quote.

1904
01:09:16,560 --> 01:09:18,080
And you can see we got both the output.

1905
01:09:18,080 --> 01:09:21,440
We got in A end and we got in B end.

1906
01:09:21,440 --> 01:09:24,080
So, point to remember is when you create an object of B,

1907
01:09:24,080 --> 01:09:26,560
it will call the init of B first.

1908
01:09:26,560 --> 01:09:27,920
And from the init of B,

1909
01:09:27,920 --> 01:09:30,000
you are trying to call the init of A.

1910
01:09:30,000 --> 01:09:31,200
So, it will jump up,

1911
01:09:31,200 --> 01:09:32,960
it will execute the init of A first,

1912
01:09:32,960 --> 01:09:34,960
which will print in A in it.

1913
01:09:34,960 --> 01:09:37,600
And then it will come back to print in B in it, okay?

1914
01:09:37,600 --> 01:09:39,040
That's why we got the output.

1915
01:09:39,040 --> 01:09:40,080
So, this makes sense.

1916
01:09:40,080 --> 01:09:43,120
So, we can work with constructor in inheritance, right?

1917
01:09:43,120 --> 01:09:44,880
Now, let me add a twist here.

1918
01:09:44,880 --> 01:09:47,600
So, what I will do is I will remove this super from here.

1919
01:09:47,600 --> 01:09:48,480
Let's clean it.

1920
01:09:48,480 --> 01:09:52,320
And I will not even say that this is B.

1921
01:09:52,320 --> 01:09:54,960
So, class A and class B, two different things, okay?

1922
01:09:54,960 --> 01:09:56,320
They're not linked with each other.

1923
01:09:56,320 --> 01:09:57,360
But then we have class C.

1924
01:09:57,360 --> 01:09:59,920
As we have done earlier, we'll say class C.

1925
01:09:59,920 --> 01:10:04,640
And class C will inherit both the classes A and B, okay?

1926
01:10:04,640 --> 01:10:08,320
And now, if I say def and init,

1927
01:10:08,400 --> 01:10:10,160
you know what we are trying to do here.

1928
01:10:10,160 --> 01:10:14,160
First of all, we'll print in C in it, okay?

1929
01:10:14,160 --> 01:10:15,840
And then I will create the object of C.

1930
01:10:15,840 --> 01:10:17,680
So, there's no object of A and B.

1931
01:10:17,680 --> 01:10:18,720
I'm trying to object of C.

1932
01:10:19,440 --> 01:10:20,160
Now, what do you think?

1933
01:10:20,160 --> 01:10:24,000
Will it call the init of C or A or B?

1934
01:10:24,000 --> 01:10:24,640
Of course, right?

1935
01:10:24,640 --> 01:10:26,240
When you say the object is of C,

1936
01:10:26,240 --> 01:10:28,480
it will call the init of C only.

1937
01:10:28,480 --> 01:10:29,440
Let's run this code.

1938
01:10:29,440 --> 01:10:30,080
And that's right.

1939
01:10:30,080 --> 01:10:32,240
We got the output as in C in it.

1940
01:10:32,240 --> 01:10:33,520
So, this works perfectly.

1941
01:10:34,080 --> 01:10:37,360
But what if you want to call the init method

1942
01:10:37,360 --> 01:10:38,640
of a superclass?

1943
01:10:38,640 --> 01:10:40,240
But there's a twist here.

1944
01:10:40,240 --> 01:10:42,320
Now, C has two superclasses, right?

1945
01:10:42,320 --> 01:10:44,000
One is A and B.

1946
01:10:44,000 --> 01:10:46,960
The moment you say super, dot init.

1947
01:10:46,960 --> 01:10:48,080
Now, what do you think?

1948
01:10:48,080 --> 01:10:49,280
Which init it will call?

1949
01:10:49,280 --> 01:10:51,440
Will it call the init of A or B?

1950
01:10:51,440 --> 01:10:52,480
That's a question.

1951
01:10:52,480 --> 01:10:53,680
Let's run this and let's see what happens.

1952
01:10:53,680 --> 01:10:54,880
The moment you run this code,

1953
01:10:54,880 --> 01:10:56,880
you can see it says in A init.

1954
01:10:56,880 --> 01:10:58,640
That means we are unfair here.

1955
01:10:58,640 --> 01:11:00,160
We are biased towards A.

1956
01:11:00,160 --> 01:11:02,240
We are not taking B here, right?

1957
01:11:02,240 --> 01:11:04,000
This is completely wrong.

1958
01:11:04,000 --> 01:11:06,960
Oh, but the thing is, we have a concept of MRO,

1959
01:11:07,040 --> 01:11:09,840
which is method resolution order.

1960
01:11:09,840 --> 01:11:10,720
So, what happens is,

1961
01:11:10,720 --> 01:11:13,040
whenever you have this multiple inheritance,

1962
01:11:13,040 --> 01:11:15,840
it will always start from left to right.

1963
01:11:15,840 --> 01:11:17,360
Which means, so first,

1964
01:11:17,360 --> 01:11:18,640
so the moment you say init,

1965
01:11:18,640 --> 01:11:21,920
it will try to find the init of itself.

1966
01:11:21,920 --> 01:11:23,520
So, since we have init here,

1967
01:11:23,520 --> 01:11:25,360
it will execute the init of C.

1968
01:11:25,360 --> 01:11:27,520
Then, the moment you say super, dot init,

1969
01:11:27,520 --> 01:11:28,800
now we have two classes, right?

1970
01:11:28,800 --> 01:11:29,760
A and B.

1971
01:11:29,760 --> 01:11:31,360
And on the left side, we have A

1972
01:11:31,360 --> 01:11:32,880
and on the right side, we have B.

1973
01:11:32,880 --> 01:11:34,800
So, it will prefer left one first.

1974
01:11:35,200 --> 01:11:37,200
It goes from left to right.

1975
01:11:37,200 --> 01:11:38,800
And that's something you have to remember.

1976
01:11:38,800 --> 01:11:41,920
It's always from left to right, okay?

1977
01:11:41,920 --> 01:11:43,760
And that's why we got in A init.

1978
01:11:43,760 --> 01:11:45,840
The same thing can be done for methods.

1979
01:11:45,840 --> 01:11:48,560
Example, let's say, we have two methods which are same.

1980
01:11:48,560 --> 01:11:51,360
So, in this case, you can see we have feature one in A

1981
01:11:51,360 --> 01:11:52,880
and feature one in B.

1982
01:11:52,880 --> 01:11:55,840
Both are the same methods with the same name, of course.

1983
01:11:55,840 --> 01:11:58,240
And in this, I will print some different message.

1984
01:11:58,240 --> 01:12:00,880
Here, I will print feature one A.

1985
01:12:00,880 --> 01:12:03,280
And here, I will say feature one B.

1986
01:12:03,280 --> 01:12:05,280
That means, the feature one is in A

1987
01:12:05,280 --> 01:12:06,800
and feature one is in B.

1988
01:12:06,800 --> 01:12:11,200
And now, if I try to call, so I will say A1 dot feature one.

1989
01:12:11,200 --> 01:12:12,880
Will it call from A or B?

1990
01:12:12,880 --> 01:12:14,960
That's a question and we know the answer, right?

1991
01:12:14,960 --> 01:12:18,960
It will always call from A, because it goes from left to right.

1992
01:12:18,960 --> 01:12:20,400
And you can see the output.

1993
01:12:20,400 --> 01:12:21,440
So, this is something you have to remember,

1994
01:12:21,440 --> 01:12:24,560
which is a concept of method resolution order.

1995
01:12:24,560 --> 01:12:26,720
So, basically, in this video, we have talked about three things.

1996
01:12:26,720 --> 01:12:30,640
The first one is how constructor behaves in inheritance.

1997
01:12:30,640 --> 01:12:33,600
The second one is how to use that super method.

1998
01:12:33,600 --> 01:12:38,160
And the third one is MRO, which is method resolution order.

1999
01:12:38,160 --> 01:12:40,160
Now, in fact, with the help of super method,

2000
01:12:40,160 --> 01:12:40,960
it can be called function.

2001
01:12:40,960 --> 01:12:41,840
Let's see that.

2002
01:12:41,840 --> 01:12:45,440
So, let's say from, we have a function here, which is def,

2003
01:12:45,440 --> 01:12:47,360
and I will say feature, feed.

2004
01:12:47,360 --> 01:12:48,080
That's it.

2005
01:12:48,080 --> 01:12:52,160
And in this, I'm trying to call the method of super class, right?

2006
01:12:52,160 --> 01:12:54,400
So, we can say super dot.

2007
01:12:54,400 --> 01:12:55,680
And we can use that thing, okay?

2008
01:12:55,680 --> 01:12:57,680
So, we can say super dot feature two.

2009
01:12:57,680 --> 01:12:59,040
And let's see if it is working.

2010
01:12:59,040 --> 01:13:00,400
Let me call feature.

2011
01:13:00,400 --> 01:13:01,920
It should call the feature two.

2012
01:13:01,920 --> 01:13:02,880
So, yes, it works.

2013
01:13:02,880 --> 01:13:06,000
So, you can also use super method to call other methods as well,

2014
01:13:06,000 --> 01:13:06,880
not just in it.

2015
01:13:06,880 --> 01:13:10,320
So, to represent this super class, we use super method, okay?

2016
01:13:15,280 --> 01:13:17,840
Now, we have started talking about objects, right?

2017
01:13:17,840 --> 01:13:19,200
Then, we move towards class.

2018
01:13:19,200 --> 01:13:21,600
And then, we have discussed about inheritance.

2019
01:13:21,600 --> 01:13:24,720
Now, it's time to focus on one of the major concept in OPS,

2020
01:13:24,720 --> 01:13:26,080
which is polymorphism.

2021
01:13:26,080 --> 01:13:27,760
Oh, that's a weird word, right?

2022
01:13:27,760 --> 01:13:29,440
Now, when we talk about polymorphism,

2023
01:13:29,440 --> 01:13:32,160
it's break down this word poly and morphism.

2024
01:13:32,160 --> 01:13:33,840
So, poly means many, right?

2025
01:13:33,840 --> 01:13:35,840
And when you say morph, it means forms.

2026
01:13:35,840 --> 01:13:39,600
So, that means one thing can take multiple forms.

2027
01:13:39,600 --> 01:13:42,480
Example, like, as human, you know, we have different forms.

2028
01:13:42,480 --> 01:13:45,280
As the situation changes, we change ourselves, right?

2029
01:13:45,280 --> 01:13:49,120
Example, we behave differently at different location at office.

2030
01:13:49,120 --> 01:13:51,280
We behave differently when we are with our friends.

2031
01:13:51,280 --> 01:13:52,400
We behave differently.

2032
01:13:52,400 --> 01:13:54,080
So, we are polymorphic.

2033
01:13:54,080 --> 01:13:56,800
In the same way, when we talk about object-oriented,

2034
01:13:56,880 --> 01:13:59,280
objects will have multiple forms.

2035
01:13:59,280 --> 01:14:02,160
So, this concept is very important when you talk about software development.

2036
01:14:02,160 --> 01:14:05,360
So, we use this concept a lot when it comes to loose coupling,

2037
01:14:05,360 --> 01:14:06,560
dependency injection.

2038
01:14:06,560 --> 01:14:09,520
We also have a concept of interfaces, which we'll see later.

2039
01:14:09,520 --> 01:14:11,760
There are four ways of implementing polymorphism.

2040
01:14:11,760 --> 01:14:14,880
The first one is duct typing in Python.

2041
01:14:14,880 --> 01:14:17,360
The second one is operator overloading.

2042
01:14:17,360 --> 01:14:20,720
Then, we have method overloading and method overriding.

2043
01:14:20,720 --> 01:14:24,240
In the next few videos, we are going to talk about all these topics, okay?

2044
01:14:24,240 --> 01:14:26,480
And one of the interesting ones is duct typing,

2045
01:14:26,480 --> 01:14:28,880
especially if you are coming from different backgrounds, let's say,

2046
01:14:28,880 --> 01:14:32,480
if you have already seen Java or C++ or C sharp,

2047
01:14:32,480 --> 01:14:35,920
this has been different for you because in Java or in C sharp,

2048
01:14:35,920 --> 01:14:38,800
we have to mention the type of the variable which you work with, right?

2049
01:14:38,800 --> 01:14:41,120
We have to mention the type of object you work with.

2050
01:14:41,120 --> 01:14:43,040
But Python, we have something different, right?

2051
01:14:47,920 --> 01:14:50,480
In the last video, we have talked about polymorphism, right?

2052
01:14:50,480 --> 01:14:53,840
Which simply means you have one thing which will behave in a different way.

2053
01:14:53,840 --> 01:14:56,720
Or you can say one thing and multiple forms, right?

2054
01:14:56,720 --> 01:14:57,760
That is many forms.

2055
01:14:58,480 --> 01:15:02,160
Now, in this video, we'll talk about the first way of doing that,

2056
01:15:02,160 --> 01:15:03,680
and that is your duct typing.

2057
01:15:03,680 --> 01:15:05,120
I know that's a weird word, right?

2058
01:15:05,120 --> 01:15:06,000
Duck typing.

2059
01:15:06,000 --> 01:15:11,040
We have this famous line, which is if there's a bird which is walking like a duck,

2060
01:15:11,040 --> 01:15:15,040
which is quacking like a duck, and which is swimming like a duck,

2061
01:15:15,040 --> 01:15:17,280
that bird is a duck, right?

2062
01:15:17,280 --> 01:15:19,680
Which simply means it doesn't matter if it's a duck or not,

2063
01:15:19,680 --> 01:15:22,640
what matters is the behavior of that bird.

2064
01:15:22,640 --> 01:15:25,680
If it is matching with duck, that's a duck, right?

2065
01:15:25,680 --> 01:15:28,240
Now, how do you implement that in programming?

2066
01:15:28,240 --> 01:15:30,400
So what we will do here is let's take an example.

2067
01:15:30,400 --> 01:15:32,480
Let's say if I have x equal to 5.

2068
01:15:32,480 --> 01:15:33,600
Now, we talk about the type.

2069
01:15:33,600 --> 01:15:36,080
Now, in Python, we have a concept of dynamic typing,

2070
01:15:36,080 --> 01:15:38,720
which simply means the type you can mention later.

2071
01:15:38,720 --> 01:15:40,720
Example, when you say x equal to 5,

2072
01:15:40,720 --> 01:15:43,680
the type which we are representing now is integer.

2073
01:15:43,680 --> 01:15:46,560
But what if you say x equal to, let's say, Navin?

2074
01:15:47,120 --> 01:15:49,520
Are we changing the type of x here?

2075
01:15:49,520 --> 01:15:50,400
See, that's not the case.

2076
01:15:50,400 --> 01:15:53,840
What is happening here is when you say 5, in your memory,

2077
01:15:53,840 --> 01:15:56,480
you got a space which is of type integer.

2078
01:15:56,480 --> 01:15:58,080
When you say Navin, in your memory,

2079
01:15:58,080 --> 01:16:00,720
you got a space which is of type string.

2080
01:16:00,720 --> 01:16:03,040
The x is just a name to it, okay?

2081
01:16:03,040 --> 01:16:06,960
So when you say x equal to 5, there is an object of type integer,

2082
01:16:06,960 --> 01:16:08,800
you are just naming it as x.

2083
01:16:09,360 --> 01:16:10,960
Later, when you say you got Navin,

2084
01:16:10,960 --> 01:16:14,800
you got some space in your memory and you are representing that with x.

2085
01:16:14,800 --> 01:16:17,120
x is just a name to it, okay?

2086
01:16:17,120 --> 01:16:19,280
So we don't have specific type to x.

2087
01:16:19,280 --> 01:16:22,560
The moment you say type of x, you are actually getting the type of 5.

2088
01:16:22,560 --> 01:16:25,840
When you say the type of x, you are getting the type of Navin, right?

2089
01:16:25,840 --> 01:16:27,040
So that's one thing you have to remember.

2090
01:16:27,040 --> 01:16:31,120
The moment you give a variable name, that's just a name to a memory.

2091
01:16:31,120 --> 01:16:34,160
Now, to understand that typing what we'll do is we'll take another example.

2092
01:16:34,160 --> 01:16:36,160
To explain this, what we'll do is we'll create a class

2093
01:16:36,160 --> 01:16:37,840
and we'll name this class as laptop.

2094
01:16:37,840 --> 01:16:40,800
And this laptop class will have a method which is, let's say, code.

2095
01:16:40,800 --> 01:16:44,000
So in this code, what I will do is I want to execute my code, right?

2096
01:16:44,000 --> 01:16:46,400
So as a programmer, what we do is we write code, right?

2097
01:16:46,400 --> 01:16:48,160
We write code and we compile it,

2098
01:16:48,160 --> 01:16:50,320
we run it and we get the output at the end.

2099
01:16:50,880 --> 01:16:56,880
But then to do that, we also need an IDE which is Integrated Development Environment.

2100
01:16:56,880 --> 01:17:01,120
And in this case, if you want to write a code, you need to pass an IDE.

2101
01:17:01,120 --> 01:17:06,640
So we are expecting in the arguments that someone will pass an IDE to us.

2102
01:17:06,640 --> 01:17:10,560
And using this IDE, I will say IDE.execute.

2103
01:17:10,560 --> 01:17:14,000
So the question is, the IDE is of what type?

2104
01:17:14,000 --> 01:17:15,280
Is it a type of integer?

2105
01:17:15,280 --> 01:17:16,160
Is it a type of float?

2106
01:17:16,160 --> 01:17:17,520
Is it a type of string?

2107
01:17:17,600 --> 01:17:20,080
Now, of course, when you say execute, that means there's something

2108
01:17:20,080 --> 01:17:22,800
which is not there in the existing classes which you have.

2109
01:17:22,800 --> 01:17:25,600
That means the type of IDE is something very unique,

2110
01:17:25,600 --> 01:17:27,920
it is something which is user is defining, right?

2111
01:17:27,920 --> 01:17:30,400
That means if you want to create this object IDE,

2112
01:17:30,400 --> 01:17:31,680
you need to create your own class.

2113
01:17:31,680 --> 01:17:34,960
Let me get a class here and I will call this class as PyCharm.

2114
01:17:34,960 --> 01:17:37,280
Now, for different languages, we use different IDEs.

2115
01:17:37,280 --> 01:17:40,080
In fact, for one language, we have multiple options, right?

2116
01:17:40,080 --> 01:17:43,040
Example, when you work on Java, maybe you will be using NetBeans,

2117
01:17:43,040 --> 01:17:46,880
Eclipse, IntelliJ, for Python as well, we have different IDEs.

2118
01:17:46,880 --> 01:17:49,840
We are using PyCharm here because it works well.

2119
01:17:49,840 --> 01:17:52,400
Now, when you say PyCharm, of course, it will have a method, right?

2120
01:17:52,400 --> 01:17:55,520
So let me define a method which is def execute.

2121
01:17:55,520 --> 01:17:57,120
So you can see we have these two statements.

2122
01:17:57,120 --> 01:17:59,680
The moment you say execute, it will say compiling and running.

2123
01:17:59,680 --> 01:18:00,560
That's what you do, right?

2124
01:18:00,560 --> 01:18:03,520
We are code gets compiled and your code get run.

2125
01:18:03,520 --> 01:18:04,400
Now, will this work?

2126
01:18:04,400 --> 01:18:06,640
Of course not because we are not calling anything.

2127
01:18:06,640 --> 01:18:08,800
So when you run this code, you will not get any output.

2128
01:18:08,800 --> 01:18:09,680
Let me just try it out.

2129
01:18:09,680 --> 01:18:11,200
I will right click and say run demo.

2130
01:18:11,200 --> 01:18:14,080
You can see there's no output because we are not calling methods.

2131
01:18:14,080 --> 01:18:15,920
Let me call code.

2132
01:18:16,000 --> 01:18:19,040
The way you call code is by creating the object of laptop first

2133
01:18:19,040 --> 01:18:20,960
because you cannot call code without laptop.

2134
01:18:20,960 --> 01:18:24,880
So I will say lap one is equal to laptop.

2135
01:18:24,880 --> 01:18:27,440
And with the help of lap one, now you can call code.

2136
01:18:27,440 --> 01:18:29,440
So you can say lap one dot code.

2137
01:18:29,440 --> 01:18:32,480
But there's one problem here, which is inside a code,

2138
01:18:32,480 --> 01:18:35,440
you have to pass an argument which is of IDE.

2139
01:18:35,440 --> 01:18:36,320
That's a question now.

2140
01:18:36,320 --> 01:18:38,640
How do you pass an IDE here?

2141
01:18:38,640 --> 01:18:41,520
So what I will do is first you need to create an object of IDE.

2142
01:18:41,520 --> 01:18:43,920
You will say IDE, of course, you can have different names here,

2143
01:18:43,920 --> 01:18:45,280
but let me go with IDE.

2144
01:18:45,280 --> 01:18:48,560
So IDE equal to this will be of type PyCharm.

2145
01:18:48,560 --> 01:18:52,960
So the type of IDE we are working with is PyCharm, which is usually fine,

2146
01:18:52,960 --> 01:18:53,440
of course.

2147
01:18:53,440 --> 01:18:56,560
And then when you are calling code, you have to pass IDE.

2148
01:18:56,560 --> 01:18:57,360
And now it should work.

2149
01:18:57,360 --> 01:18:59,920
You can see from this code, you got compiling and running.

2150
01:18:59,920 --> 01:19:02,560
So the type of IDE here is PyCharm.

2151
01:19:02,560 --> 01:19:04,080
But is it fixed?

2152
01:19:04,080 --> 01:19:06,320
Can we change the type of IDE later?

2153
01:19:06,320 --> 01:19:08,240
Maybe let's say we have one more IDE.

2154
01:19:08,240 --> 01:19:10,640
Let's say in future, I'm creating my own editor,

2155
01:19:10,640 --> 01:19:12,720
which is way better than PyCharm, maybe.

2156
01:19:12,720 --> 01:19:14,960
And in that as well, we have the same method.

2157
01:19:15,040 --> 01:19:15,920
Let's say execute.

2158
01:19:15,920 --> 01:19:17,920
And in that, I'm doing some extra stuff.

2159
01:19:17,920 --> 01:19:20,880
So my IDE also does spell check.

2160
01:19:20,880 --> 01:19:22,320
Maybe PyCharm does that.

2161
01:19:22,320 --> 01:19:24,400
My IDE also does what?

2162
01:19:24,400 --> 01:19:27,920
Convention checks, the name of the variable and different stuff.

2163
01:19:27,920 --> 01:19:31,120
And then it also does compiling and running.

2164
01:19:31,120 --> 01:19:33,120
So my IDE does extra stuff.

2165
01:19:33,120 --> 01:19:36,000
Now what if I want to change the type of IDE?

2166
01:19:36,000 --> 01:19:39,040
Is the IDE type fixed to PyCharm not exactly

2167
01:19:39,040 --> 01:19:40,720
because this is dynamic typing?

2168
01:19:40,720 --> 01:19:43,840
So you can replace this IDE type from PyCharm

2169
01:19:43,840 --> 01:19:45,440
to editor provided.

2170
01:19:45,440 --> 01:19:47,600
You have that method, which is execute.

2171
01:19:47,600 --> 01:19:51,200
It doesn't matter which class object you're passing.

2172
01:19:51,200 --> 01:19:55,520
What matters is that object should have the execute method.

2173
01:19:55,520 --> 01:19:57,520
Because in IDE, we are saying execute.

2174
01:19:57,520 --> 01:20:01,440
So now, even if you change from PyCharm to my editor,

2175
01:20:01,440 --> 01:20:02,560
there is no problem.

2176
01:20:02,560 --> 01:20:04,880
The code will still work.

2177
01:20:04,880 --> 01:20:06,240
Provided you have that method.

2178
01:20:06,240 --> 01:20:08,720
So if you should be having this method, which is execute.

2179
01:20:08,720 --> 01:20:09,760
And that's the case.

2180
01:20:09,760 --> 01:20:12,960
If there's a bird, and if that bird behaves like a duck,

2181
01:20:12,960 --> 01:20:15,280
it works like a duck, it quacks like a duck,

2182
01:20:15,280 --> 01:20:17,840
it swims like a duck, it should be a duck.

2183
01:20:17,840 --> 01:20:21,040
In the same way, if there is an object, which is IDE,

2184
01:20:21,040 --> 01:20:23,280
and it has a method execute, that's it.

2185
01:20:23,280 --> 01:20:25,920
We are not concerned about which class object it is.

2186
01:20:25,920 --> 01:20:28,240
What we are concerned about, it should have that method,

2187
01:20:28,240 --> 01:20:29,200
which is execute.

2188
01:20:29,200 --> 01:20:31,520
And that is called as duck typing.

2189
01:20:31,520 --> 01:20:32,400
I know it is amazing.

2190
01:20:32,400 --> 01:20:34,720
And if you're coming from different background, like Java,

2191
01:20:34,720 --> 01:20:36,480
so we have a concept of interfaces.

2192
01:20:36,480 --> 01:20:37,120
So that's what we do.

2193
01:20:37,120 --> 01:20:38,320
We create interface.

2194
01:20:38,320 --> 01:20:41,360
And we have this my editor and PyCharm as a class,

2195
01:20:41,360 --> 01:20:42,960
which will implement that interface.

2196
01:20:42,960 --> 01:20:45,440
But if you are new to this programming, don't worry.

2197
01:20:45,440 --> 01:20:46,320
That's the Java part.

2198
01:20:46,320 --> 01:20:46,960
This is simple.

2199
01:20:51,920 --> 01:20:54,400
We have started talking about polymorphism.

2200
01:20:54,400 --> 01:20:57,840
And in that, we have seen one example of duck typing.

2201
01:20:57,840 --> 01:21:01,440
Now, in this video, we'll talk about operator overloading.

2202
01:21:01,440 --> 01:21:03,760
So what is operator overloading?

2203
01:21:03,760 --> 01:21:05,680
So we know the concept of operators.

2204
01:21:05,680 --> 01:21:06,960
So we have two operands.

2205
01:21:06,960 --> 01:21:08,640
Example, if you want to add two numbers,

2206
01:21:08,640 --> 01:21:12,800
you can say 5 plus 6, where 5 and 6 are your operands.

2207
01:21:12,800 --> 01:21:14,560
And plus is the operator.

2208
01:21:14,560 --> 01:21:16,160
So we know that.

2209
01:21:16,160 --> 01:21:18,240
And then we have a concept of polymorphism.

2210
01:21:18,240 --> 01:21:20,000
So it simply means you have one thing

2211
01:21:20,000 --> 01:21:21,760
which has multiple forms.

2212
01:21:21,760 --> 01:21:24,320
Now, if you can think about this, we have two integers.

2213
01:21:24,320 --> 01:21:26,160
And then we are trying to add them.

2214
01:21:26,160 --> 01:21:28,880
We can also add an integer and a float.

2215
01:21:28,880 --> 01:21:31,200
So in different programming language, it does support.

2216
01:21:31,200 --> 01:21:32,160
What about two strings?

2217
01:21:32,160 --> 01:21:34,000
So if you say you have two strings, let's say,

2218
01:21:34,000 --> 01:21:35,120
hello plus world.

2219
01:21:35,120 --> 01:21:35,760
Will it work?

2220
01:21:35,760 --> 01:21:36,880
And the answer is yes.

2221
01:21:36,880 --> 01:21:39,600
So plus works with the strings as well.

2222
01:21:39,600 --> 01:21:42,640
But what if you want to say you have a number 5?

2223
01:21:42,640 --> 01:21:46,240
So let's say we got a and a is 5.

2224
01:21:46,240 --> 01:21:49,760
And then we got b and b is, let's say, world.

2225
01:21:49,760 --> 01:21:52,960
Now, can I print by saying a plus b?

2226
01:21:52,960 --> 01:21:56,160
The moment you try to underscore, you can see we got an error.

2227
01:21:56,160 --> 01:22:00,000
It says unsupported operand types for plus.

2228
01:22:00,000 --> 01:22:03,600
So we cannot use int and string for plus.

2229
01:22:03,600 --> 01:22:06,080
So all these things are predefined.

2230
01:22:06,080 --> 01:22:09,360
All these things, they are called as a synthetic sugar,

2231
01:22:09,360 --> 01:22:12,400
which simply means it is trying to simplify the code

2232
01:22:12,400 --> 01:22:13,360
for the user.

2233
01:22:13,360 --> 01:22:16,000
See, behind the scene, things are a bit different.

2234
01:22:16,000 --> 01:22:16,720
Imagine this one.

2235
01:22:16,720 --> 01:22:20,640
Example, if I say a is 5 and b is 6.

2236
01:22:20,640 --> 01:22:21,360
Now, what do you think?

2237
01:22:21,360 --> 01:22:23,120
What is happening behind the scene?

2238
01:22:23,120 --> 01:22:25,520
Now, trust me, whatever happens in Python

2239
01:22:25,520 --> 01:22:27,680
happens with the help of object.

2240
01:22:27,680 --> 01:22:30,560
And here as well, when we talk about a and b,

2241
01:22:30,560 --> 01:22:32,800
the type of it is int.

2242
01:22:32,800 --> 01:22:35,040
So int is a class here.

2243
01:22:35,040 --> 01:22:36,400
And when you say class, of course,

2244
01:22:36,400 --> 01:22:38,400
class will have certain methods.

2245
01:22:38,400 --> 01:22:40,160
So behind the scene, what is happening

2246
01:22:40,160 --> 01:22:44,160
is when you say a plus b, which is of type integer,

2247
01:22:44,160 --> 01:22:45,440
it is calling something.

2248
01:22:45,440 --> 01:22:49,040
So behind the scene, it is calling int dot.

2249
01:22:49,040 --> 01:22:51,520
The moment you say int dot, int is a class.

2250
01:22:51,520 --> 01:22:54,400
And you can see we have a method called as init.

2251
01:22:54,400 --> 01:22:55,840
We have a method called as abs.

2252
01:22:55,840 --> 01:22:57,760
And we also have a method called as add,

2253
01:22:57,760 --> 01:22:59,040
which is very important here.

2254
01:22:59,040 --> 01:23:01,760
The moment you say int dot add, this

2255
01:23:01,760 --> 01:23:03,360
is taking two parameters.

2256
01:23:03,360 --> 01:23:05,760
The first one is a comma b.

2257
01:23:05,760 --> 01:23:08,680
So what we are doing here in print a plus b,

2258
01:23:08,680 --> 01:23:10,720
the same thing can be done here.

2259
01:23:10,720 --> 01:23:12,040
Let me just run this code here.

2260
01:23:12,040 --> 01:23:13,520
You can see we've got the same output.

2261
01:23:13,520 --> 01:23:15,200
So both are printing 11.

2262
01:23:15,200 --> 01:23:19,000
So you can say a plus b, or you can say int dot add

2263
01:23:19,000 --> 01:23:21,360
by passing two parameters a comma b.

2264
01:23:21,360 --> 01:23:23,320
And of course, the first one looks cool, right?

2265
01:23:23,320 --> 01:23:25,120
You're simply saying a plus b.

2266
01:23:25,120 --> 01:23:26,880
Because from our childhood, we are doing that.

2267
01:23:26,880 --> 01:23:29,600
We are trying to add numbers using plus operator.

2268
01:23:29,600 --> 01:23:31,600
But the moment you come to programming in programming,

2269
01:23:31,600 --> 01:23:33,200
whatever you want to do, you will

2270
01:23:33,200 --> 01:23:35,400
be doing that with the help of methods.

2271
01:23:35,400 --> 01:23:39,000
And add is a method which belongs to the int class, right?

2272
01:23:39,000 --> 01:23:41,840
If I jump to integer, so you can press on the control button

2273
01:23:41,840 --> 01:23:43,640
and click on the method which you want to see,

2274
01:23:43,640 --> 01:23:45,280
or the class which you want to see.

2275
01:23:45,280 --> 01:23:46,560
You can see it's a class.

2276
01:23:46,560 --> 01:23:48,680
And this class has multiple methods.

2277
01:23:48,680 --> 01:23:51,400
In the same way, the moment you say int dot,

2278
01:23:51,400 --> 01:23:53,320
you can access a method called as add,

2279
01:23:53,320 --> 01:23:55,000
and you're calling a comma b.

2280
01:23:55,000 --> 01:23:58,480
So even if you say a plus b behind the scene,

2281
01:23:58,480 --> 01:24:01,040
this is getting called, right?

2282
01:24:01,040 --> 01:24:02,600
So this is one thing you have to remember, OK?

2283
01:24:02,600 --> 01:24:04,360
So we'll talk about operator overloading later,

2284
01:24:04,360 --> 01:24:05,800
but this is something you have to remember.

2285
01:24:05,800 --> 01:24:07,640
So whenever you add two numbers, this

2286
01:24:07,640 --> 01:24:09,640
is what is getting called behind the scene.

2287
01:24:09,640 --> 01:24:11,200
Now, if these two things are strings,

2288
01:24:11,200 --> 01:24:14,120
so if I make a string here, now this is not integers, right?

2289
01:24:14,120 --> 01:24:14,680
They are strings.

2290
01:24:14,680 --> 01:24:17,240
So I have to say str dot add.

2291
01:24:17,240 --> 01:24:19,520
Now, when you say str dot add, in fact, str

2292
01:24:19,520 --> 01:24:22,160
also has an add method which takes two parameters.

2293
01:24:22,160 --> 01:24:24,600
And both should be of the same type, which is string type.

2294
01:24:24,600 --> 01:24:25,960
And then it will work, right?

2295
01:24:25,960 --> 01:24:28,200
So if I run this code, and you can see it is working.

2296
01:24:28,200 --> 01:24:30,240
So we got five and six as a string.

2297
01:24:30,240 --> 01:24:32,400
So they got concatenated here.

2298
01:24:32,400 --> 01:24:33,280
So this works.

2299
01:24:33,280 --> 01:24:34,880
The moment you change the type of it,

2300
01:24:34,880 --> 01:24:37,200
it will not work because the inbuilt class

2301
01:24:37,200 --> 01:24:40,560
doesn't have two things, which is integer and string

2302
01:24:40,560 --> 01:24:41,800
together, right?

2303
01:24:41,800 --> 01:24:43,120
So this thing you have to remember.

2304
01:24:43,120 --> 01:24:45,880
Now, once we know the moment you add a plus operator,

2305
01:24:45,880 --> 01:24:47,200
it calls the add method.

2306
01:24:47,200 --> 01:24:48,800
The moment you put a minus operator,

2307
01:24:48,800 --> 01:24:50,480
it will call a sub method.

2308
01:24:50,480 --> 01:24:52,840
The moment you use a star symbol, which is multiplication,

2309
01:24:52,840 --> 01:24:54,040
it will call a mul method.

2310
01:24:54,040 --> 01:24:57,280
So we have different methods for different operators, right?

2311
01:24:57,280 --> 01:24:59,400
And normally, those things are called as magic methods,

2312
01:24:59,440 --> 01:25:01,440
but that's what they say, magic methods, right?

2313
01:25:01,440 --> 01:25:03,520
So all these operators, behind the scene,

2314
01:25:03,520 --> 01:25:05,000
they work as methods.

2315
01:25:05,000 --> 01:25:07,840
Now, to understand the concept of operator overloading,

2316
01:25:07,840 --> 01:25:09,600
what I will do is I will say class.

2317
01:25:09,600 --> 01:25:11,560
And let's say we have a student class.

2318
01:25:11,560 --> 01:25:13,800
And every student will have, let's say, two variables.

2319
01:25:13,800 --> 01:25:15,360
And that will be marks one and marks two,

2320
01:25:15,360 --> 01:25:16,800
just to keep it simple.

2321
01:25:16,800 --> 01:25:20,360
So what I will do here is I will set def and init.

2322
01:25:20,360 --> 01:25:24,280
And here, I will say self.m1 is equal to oh,

2323
01:25:24,280 --> 01:25:26,840
now we want the value from the user, right?

2324
01:25:26,840 --> 01:25:28,880
So maybe I want to pass the value.

2325
01:25:28,880 --> 01:25:31,960
So I will pass it from here, m1 comma m2.

2326
01:25:31,960 --> 01:25:35,680
And let's specify self.m2 is equal to m2.

2327
01:25:35,680 --> 01:25:37,080
So we got these two values, right?

2328
01:25:37,080 --> 01:25:39,360
Now, what I want to do is I want to create two objects,

2329
01:25:39,360 --> 01:25:40,480
okay, two students object.

2330
01:25:40,480 --> 01:25:44,040
One is, let's say, s1 is equal to student.

2331
01:25:44,040 --> 01:25:45,240
And this will take two values.

2332
01:25:45,240 --> 01:25:49,240
I would say 58 comma 69, that's the value here.

2333
01:25:49,240 --> 01:25:51,520
And then s2 is equal to student.

2334
01:25:51,520 --> 01:25:54,360
And this student will have, let's say, 60 comma 65.

2335
01:25:54,360 --> 01:25:55,640
So we got two marks here, right?

2336
01:25:55,640 --> 01:25:58,320
We got two student and each student have two marks.

2337
01:25:58,320 --> 01:26:00,320
Now, I want to apply the operator here,

2338
01:26:00,320 --> 01:26:01,200
which is plus operator.

2339
01:26:01,200 --> 01:26:02,600
So I want to add these two students.

2340
01:26:02,600 --> 01:26:05,200
So the moment I say s1 plus s2,

2341
01:26:05,200 --> 01:26:07,560
I want a different student object, right?

2342
01:26:07,560 --> 01:26:08,560
Is it possible to do that?

2343
01:26:08,560 --> 01:26:09,400
Let's try.

2344
01:26:09,400 --> 01:26:12,960
So I will say s3 is equal to s1 plus s2.

2345
01:26:12,960 --> 01:26:15,520
Because now we know that plus operator means

2346
01:26:15,520 --> 01:26:17,520
it will add two values.

2347
01:26:17,520 --> 01:26:19,280
But it is possible with the help of integer.

2348
01:26:19,280 --> 01:26:20,920
It is possible with the help of string.

2349
01:26:20,920 --> 01:26:23,880
Is it possible to use plus operator with student class?

2350
01:26:23,880 --> 01:26:24,800
That's a question.

2351
01:26:24,800 --> 01:26:25,640
So let's run this code.

2352
01:26:25,640 --> 01:26:26,480
Let's see what happens.

2353
01:26:26,480 --> 01:26:27,960
Okay, we are not printing the value of s3,

2354
01:26:27,960 --> 01:26:29,120
but let's run this code.

2355
01:26:29,120 --> 01:26:31,720
The moment you try to run this code, you will get an error.

2356
01:26:31,720 --> 01:26:33,680
Oh, okay, we got different error here.

2357
01:26:33,680 --> 01:26:35,800
It says student takes no argument,

2358
01:26:35,800 --> 01:26:37,200
but it is taking arguments, right?

2359
01:26:37,200 --> 01:26:38,040
What's wrong?

2360
01:26:38,040 --> 01:26:40,720
Oh, we have written the wrong name, my bad.

2361
01:26:40,720 --> 01:26:42,120
Let's run this code once again.

2362
01:26:42,120 --> 01:26:44,440
So I was expecting this error, not the first one.

2363
01:26:44,440 --> 01:26:48,080
And the error is it says unsupported operant type plus.

2364
01:26:48,080 --> 01:26:50,360
We cannot use plus between student and student

2365
01:26:50,360 --> 01:26:52,480
because we have not defined it, right?

2366
01:26:52,480 --> 01:26:54,280
If you remember, behind the scene,

2367
01:26:54,280 --> 01:26:56,080
even if you use plus with integers,

2368
01:26:56,080 --> 01:26:58,120
it will be calling an add method.

2369
01:26:58,120 --> 01:26:59,440
But if you see our class,

2370
01:26:59,440 --> 01:27:01,240
we don't have that add method, right?

2371
01:27:01,240 --> 01:27:03,200
Because if you say s1 plus s2,

2372
01:27:03,200 --> 01:27:06,520
how your compiler, how your Python will know what to do?

2373
01:27:06,520 --> 01:27:08,080
And that's where you have to define it.

2374
01:27:08,080 --> 01:27:09,240
Yeah, that's where you have to say,

2375
01:27:09,240 --> 01:27:11,960
hey, the moment anyone says plus of a student,

2376
01:27:11,960 --> 01:27:14,760
you need to call this method called as add.

2377
01:27:14,760 --> 01:27:17,720
Okay, so you can overload the operator

2378
01:27:17,720 --> 01:27:19,160
and you can change definition for it.

2379
01:27:19,160 --> 01:27:21,640
You can define anything you want, right?

2380
01:27:21,640 --> 01:27:25,000
So I can say add and this add will take two parameters.

2381
01:27:25,000 --> 01:27:28,240
The first one is self comma other.

2382
01:27:28,240 --> 01:27:31,200
And you can see it takes two parameters, self and other.

2383
01:27:31,200 --> 01:27:32,600
Okay, guess what is happening?

2384
01:27:32,600 --> 01:27:33,800
So behind the scene,

2385
01:27:33,800 --> 01:27:36,640
this code is getting converted into,

2386
01:27:36,640 --> 01:27:39,600
it is student dot add,

2387
01:27:39,600 --> 01:27:42,560
which takes two parameters, s1 comma s2.

2388
01:27:42,560 --> 01:27:44,440
So what is self and what is other here?

2389
01:27:44,440 --> 01:27:46,320
So the first parameter is self

2390
01:27:46,320 --> 01:27:47,800
and s2 is the other parameter.

2391
01:27:47,800 --> 01:27:50,960
You can change the variable name, that's fine, okay?

2392
01:27:50,960 --> 01:27:53,920
You can say this is o and it should work.

2393
01:27:53,960 --> 01:27:55,000
It's a variable name, right?

2394
01:27:55,000 --> 01:27:57,240
So this is what is getting called behind the scene, right?

2395
01:27:57,240 --> 01:27:59,120
So here what I will do is I will say,

2396
01:27:59,120 --> 01:28:00,840
let's take two variables, m1,

2397
01:28:00,840 --> 01:28:04,040
m1 is equal to self dot m1

2398
01:28:04,040 --> 01:28:06,800
and m2 is equal to self dot m2.

2399
01:28:06,800 --> 01:28:08,640
So we got two variables, right?

2400
01:28:08,640 --> 01:28:10,120
Oh, not just self m1 plus,

2401
01:28:10,120 --> 01:28:13,560
it is other dot m1 plus other dot m2.

2402
01:28:13,560 --> 01:28:15,040
So this is how you add values, right?

2403
01:28:15,040 --> 01:28:17,520
So self m1 and other m1

2404
01:28:17,520 --> 01:28:21,280
and then m2 will have the addition of self m2 and other m2.

2405
01:28:21,280 --> 01:28:22,520
So this works.

2406
01:28:22,520 --> 01:28:24,160
And once you've got these two values,

2407
01:28:24,160 --> 01:28:25,440
what you will be doing is you will be getting

2408
01:28:25,440 --> 01:28:26,960
a new student object, we'll call that s3,

2409
01:28:26,960 --> 01:28:28,480
you can have any name as a matter.

2410
01:28:28,480 --> 01:28:30,720
So s3 is equal to student

2411
01:28:30,720 --> 01:28:33,880
by passing these two values, m1 comma m2.

2412
01:28:33,880 --> 01:28:35,160
And now once you've got this student,

2413
01:28:35,160 --> 01:28:37,280
you will return s3 here, right?

2414
01:28:37,280 --> 01:28:38,160
That is what you're expecting.

2415
01:28:38,160 --> 01:28:41,160
So the moment you say s1 plus s2,

2416
01:28:41,160 --> 01:28:42,160
it will return the value,

2417
01:28:42,160 --> 01:28:43,760
it will return a new object of student

2418
01:28:43,760 --> 01:28:45,680
and you will assign that to s3.

2419
01:28:45,680 --> 01:28:46,880
Okay, so this is what will happen.

2420
01:28:46,880 --> 01:28:48,760
Now if I print the value for s3,

2421
01:28:48,760 --> 01:28:51,360
so I will let me print s3 dot m1

2422
01:28:51,400 --> 01:28:53,280
and the moment you run this code, run

2423
01:28:53,280 --> 01:28:55,880
and you can see it works, you've got 118.

2424
01:28:55,880 --> 01:28:56,720
Is it right?

2425
01:28:56,720 --> 01:28:57,720
Of course it should be, right?

2426
01:28:57,720 --> 01:29:00,160
So it is 58 plus 60 and that's right.

2427
01:29:00,160 --> 01:29:01,640
We got 118.

2428
01:29:01,640 --> 01:29:02,840
This thing is working, right?

2429
01:29:02,840 --> 01:29:03,680
Perfect.

2430
01:29:03,680 --> 01:29:05,160
So if you want to add two students,

2431
01:29:05,160 --> 01:29:08,000
you need to overload the operator of plus

2432
01:29:08,000 --> 01:29:09,600
because integer knows what is plus,

2433
01:29:09,600 --> 01:29:10,680
string knows what is plus,

2434
01:29:10,680 --> 01:29:13,360
your student class don't know what is that plus means.

2435
01:29:13,360 --> 01:29:15,480
So plus means call the add method,

2436
01:29:15,480 --> 01:29:17,160
but we don't have an add method here.

2437
01:29:17,160 --> 01:29:19,000
So we have to define our own method.

2438
01:29:19,000 --> 01:29:20,840
The same thing can be done with subtraction,

2439
01:29:20,840 --> 01:29:23,520
is minus, the same thing can be done with multiplication.

2440
01:29:23,520 --> 01:29:26,320
So I would recommend you to explore more on this, you know?

2441
01:29:26,320 --> 01:29:29,120
So the moment you say def underscore underscore,

2442
01:29:29,120 --> 01:29:30,400
you can see we have so many methods.

2443
01:29:30,400 --> 01:29:33,000
We also have greater than, we also have equal to symbol.

2444
01:29:33,000 --> 01:29:34,600
We can compare two objects.

2445
01:29:34,600 --> 01:29:37,040
We can say that different methods are available here.

2446
01:29:37,040 --> 01:29:37,880
Okay, so try it out.

2447
01:29:37,880 --> 01:29:39,560
We also have multiplication somewhere.

2448
01:29:39,560 --> 01:29:40,920
So you can see we also have mull.

2449
01:29:40,920 --> 01:29:43,080
So everything is predefined, you can just use them.

2450
01:29:43,080 --> 01:29:45,560
In fact, for this example, I will take one more.

2451
01:29:45,560 --> 01:29:48,040
I want to compare if two objects are

2452
01:29:48,040 --> 01:29:49,200
greater than or equal to example,

2453
01:29:49,200 --> 01:29:52,400
if I say if S1 is greater than S2,

2454
01:29:52,400 --> 01:29:54,360
this is the horrible way of comparing students

2455
01:29:54,360 --> 01:29:55,960
because marks is not a criteria

2456
01:29:55,960 --> 01:29:57,000
where you can compare students.

2457
01:29:57,000 --> 01:30:01,200
But just for the example, I will say S1 wins.

2458
01:30:01,200 --> 01:30:03,720
So whoever has maximum marks, I will say they win.

2459
01:30:03,720 --> 01:30:07,360
I will say else, print S2 wins.

2460
01:30:07,360 --> 01:30:08,840
So what we are trying to do here is

2461
01:30:08,840 --> 01:30:11,080
whoever has maximum marks, they will win.

2462
01:30:11,080 --> 01:30:13,040
But when you say maximum marks, how do you check it?

2463
01:30:13,040 --> 01:30:14,800
Because we are not defining it, right?

2464
01:30:14,800 --> 01:30:16,640
Maybe I want to check only first marks,

2465
01:30:16,640 --> 01:30:18,920
which is M1 or maybe I want to check M2

2466
01:30:18,920 --> 01:30:20,320
or maybe the addition of both.

2467
01:30:20,320 --> 01:30:21,160
You can try it out.

2468
01:30:21,160 --> 01:30:23,880
So what I will do here is this will work, of course not

2469
01:30:23,880 --> 01:30:25,440
because the moment you try to run this code,

2470
01:30:25,440 --> 01:30:27,400
it will give you an error by saying

2471
01:30:27,400 --> 01:30:29,520
the greater than symbol not supported

2472
01:30:29,520 --> 01:30:31,440
between two instances of student.

2473
01:30:31,440 --> 01:30:34,000
It is supported for integers because it is predefined.

2474
01:30:34,000 --> 01:30:35,960
So here as well, if you want to make it work,

2475
01:30:35,960 --> 01:30:38,920
you have to define a function of method, which is GT.

2476
01:30:38,920 --> 01:30:43,080
GT is greater than, GE is greater than equal to.

2477
01:30:43,080 --> 01:30:44,720
So you want to check only greater than.

2478
01:30:44,720 --> 01:30:48,400
And then here you'll be using self and other as usual

2479
01:30:48,400 --> 01:30:50,040
because behind the scene, that is what is happening.

2480
01:30:50,040 --> 01:30:53,880
It is saying student.GT and it's passing two variables,

2481
01:30:53,880 --> 01:30:55,000
S1, S2.

2482
01:30:55,000 --> 01:30:57,480
So S1 goes to self, S2 goes to other.

2483
01:30:57,480 --> 01:30:59,320
And now, how do I compare?

2484
01:30:59,320 --> 01:31:01,560
So we'll say S1 doesn't matter, is it S1 or something?

2485
01:31:01,560 --> 01:31:06,560
So we'll say S1 is equal to self.M1 plus self.M2.

2486
01:31:07,640 --> 01:31:12,640
And we'll say S2 is equal to other.M1 plus other.M2.

2487
01:31:12,880 --> 01:31:14,680
So we are adding their marks basically.

2488
01:31:14,680 --> 01:31:15,520
You can compare.

2489
01:31:15,560 --> 01:31:18,040
If S1 is greater than S2,

2490
01:31:18,040 --> 01:31:20,560
now this time S1, S2, they're not objects, okay?

2491
01:31:20,560 --> 01:31:23,040
They are simple variables of integer.

2492
01:31:23,040 --> 01:31:24,480
Okay, if I'm getting confused with this,

2493
01:31:24,480 --> 01:31:26,720
let me just make it R, that should make sense.

2494
01:31:26,720 --> 01:31:28,840
So let's compare R1 and R2.

2495
01:31:28,840 --> 01:31:30,280
Now those are just marks, right?

2496
01:31:30,280 --> 01:31:34,940
If R1 is greater than R2, we will say return true,

2497
01:31:34,940 --> 01:31:37,760
else return false.

2498
01:31:37,760 --> 01:31:38,600
Simple.

2499
01:31:38,600 --> 01:31:40,480
Now if you're on this code, we are comparing it, right?

2500
01:31:40,480 --> 01:31:42,040
Let's compare and let's run.

2501
01:31:42,040 --> 01:31:44,880
And it worked, you can see S1 wins, right?

2502
01:31:44,880 --> 01:31:46,640
Because S1 values are higher.

2503
01:31:46,640 --> 01:31:50,240
So 58 plus 69 is higher than 60 plus 65.

2504
01:31:50,240 --> 01:31:52,720
But what if I change the value for S2?

2505
01:31:52,720 --> 01:31:55,080
Let's say there's 69 and you can see, of course,

2506
01:31:55,080 --> 01:31:57,600
now S2 is bigger, so let's run this code.

2507
01:31:57,600 --> 01:31:59,800
And you can see it says S2 wins, so that's right.

2508
01:31:59,800 --> 01:32:02,240
So what we are doing is we are adding those values

2509
01:32:02,240 --> 01:32:04,040
and then we are comparing it.

2510
01:32:04,040 --> 01:32:07,920
So if you want to perform any operation on the objects

2511
01:32:07,920 --> 01:32:10,840
which I usually find, you have to define all these methods.

2512
01:32:10,840 --> 01:32:11,800
Okay, there's one more.

2513
01:32:11,800 --> 01:32:15,800
What if you have a variable, let's say A is equal to nine?

2514
01:32:15,800 --> 01:32:17,920
Now when you say print A, and you can see

2515
01:32:17,920 --> 01:32:20,200
it will print the value of A, there's nothing wrong with that.

2516
01:32:20,200 --> 01:32:22,200
You can see it is printing the value of A.

2517
01:32:22,200 --> 01:32:24,160
Now is it printing the address of A?

2518
01:32:24,160 --> 01:32:25,000
That's not the case.

2519
01:32:25,000 --> 01:32:26,640
Why it is not printing the address of A?

2520
01:32:26,640 --> 01:32:28,600
It is printing the value of A.

2521
01:32:28,600 --> 01:32:31,560
But what happens, the moment you try to print S1,

2522
01:32:31,560 --> 01:32:33,360
it will not print the values of S1.

2523
01:32:33,360 --> 01:32:36,440
It will try to print the address of S1.

2524
01:32:36,440 --> 01:32:38,760
Okay, so you can see that it says it's a student object

2525
01:32:38,760 --> 01:32:40,680
at the address at this position.

2526
01:32:40,680 --> 01:32:42,080
Okay, we don't want that address, right?

2527
01:32:42,080 --> 01:32:43,640
We want values.

2528
01:32:43,640 --> 01:32:45,000
What is happening?

2529
01:32:45,000 --> 01:32:46,720
So when you try to print the object,

2530
01:32:46,720 --> 01:32:49,120
doesn't matter is it integer or your class,

2531
01:32:49,120 --> 01:32:53,520
behind the scene, it is calling a method called as str.

2532
01:32:53,520 --> 01:32:55,240
It is happening behind the scene, okay?

2533
01:32:55,240 --> 01:32:57,800
Even if you don't call it, it is happening behind the scene.

2534
01:32:57,800 --> 01:32:59,600
So the moment you say print A,

2535
01:32:59,600 --> 01:33:01,800
it will try to call A.str.

2536
01:33:01,800 --> 01:33:04,160
And that's why you are getting the output, right?

2537
01:33:04,160 --> 01:33:06,440
You're getting nine because it is calling str.

2538
01:33:06,440 --> 01:33:09,400
In the same way, the moment you say S1,

2539
01:33:09,400 --> 01:33:13,200
even this is calling str, right?

2540
01:33:13,200 --> 01:33:14,680
And now if you run this code,

2541
01:33:14,680 --> 01:33:16,680
you can see it is still giving the same output.

2542
01:33:16,680 --> 01:33:18,400
That means it is calling str.

2543
01:33:18,400 --> 01:33:19,400
What is this str?

2544
01:33:19,400 --> 01:33:22,160
So if I click on this, you can see it is in built-in.

2545
01:33:22,160 --> 01:33:24,400
So even if you don't define str function

2546
01:33:24,400 --> 01:33:26,080
or method in your own class,

2547
01:33:26,080 --> 01:33:27,800
it is getting defined somewhere.

2548
01:33:27,800 --> 01:33:29,560
And that definition, what is printing?

2549
01:33:29,560 --> 01:33:31,640
It is printing the module name.

2550
01:33:31,640 --> 01:33:33,000
It is printing the name of the class

2551
01:33:33,000 --> 01:33:35,440
and it is printing the object address.

2552
01:33:35,440 --> 01:33:37,720
We don't want that, we want values, right?

2553
01:33:37,720 --> 01:33:40,440
That means we need to override this method.

2554
01:33:40,440 --> 01:33:43,200
So what I will do is I will say def.

2555
01:33:43,200 --> 01:33:44,560
And the method name is str,

2556
01:33:44,560 --> 01:33:46,880
so you have to define this by yourself.

2557
01:33:46,880 --> 01:33:49,360
So we want to return the value of m1 and m2, right?

2558
01:33:49,360 --> 01:33:53,000
So you will say self.m1, self.m2.

2559
01:33:53,000 --> 01:33:54,480
And now if I run this code,

2560
01:33:54,480 --> 01:33:55,640
it will return a tuple, of course.

2561
01:33:55,640 --> 01:33:57,040
Let's run this code and you got it.

2562
01:33:57,040 --> 01:33:59,640
Can you see that we got 58 and 69.

2563
01:33:59,640 --> 01:34:01,760
So now if you want to print the object,

2564
01:34:01,760 --> 01:34:03,440
it will not print the address,

2565
01:34:03,440 --> 01:34:05,080
it will print the values, right?

2566
01:34:05,080 --> 01:34:07,720
Because we are overriding the str.

2567
01:34:07,720 --> 01:34:08,680
So if you remove str,

2568
01:34:08,680 --> 01:34:10,440
if you run this code, you got an error.

2569
01:34:10,440 --> 01:34:12,200
So it is returning a non-string value.

2570
01:34:12,200 --> 01:34:13,360
We have to return a string value.

2571
01:34:13,360 --> 01:34:14,440
How do we do that?

2572
01:34:14,440 --> 01:34:16,000
Because by default, when you say print,

2573
01:34:16,000 --> 01:34:17,080
you want to print a string, right?

2574
01:34:17,080 --> 01:34:17,920
So what you will do is,

2575
01:34:17,920 --> 01:34:18,920
you will use a format here.

2576
01:34:18,920 --> 01:34:21,000
So you can say curly packets,

2577
01:34:21,000 --> 01:34:23,920
curly packets, you're printing two stuff, dot, format.

2578
01:34:23,920 --> 01:34:25,640
And inside this format, you can pass this to value.

2579
01:34:25,640 --> 01:34:27,280
So what will happen is those curly packets

2580
01:34:27,280 --> 01:34:28,920
will be replaced by these values.

2581
01:34:28,920 --> 01:34:31,240
So you are returning a string now.

2582
01:34:31,240 --> 01:34:32,480
And we have seen that before, right?

2583
01:34:32,480 --> 01:34:34,360
So let's run this code and it worked.

2584
01:34:34,360 --> 01:34:36,880
You can see it got 58 and 69.

2585
01:34:36,880 --> 01:34:39,440
So even if you say print S1, it does work.

2586
01:34:39,440 --> 01:34:41,560
You can also print S2 if you want.

2587
01:34:41,560 --> 01:34:42,880
And let's run this code.

2588
01:34:42,880 --> 01:34:45,560
And you can see we got 69 and 65.

2589
01:34:45,560 --> 01:34:46,600
So that's perfect.

2590
01:34:46,600 --> 01:34:50,840
So this is how you work with operator overloading, okay?

2591
01:34:50,840 --> 01:34:52,360
So point to remember is,

2592
01:34:52,360 --> 01:34:55,000
whenever you perform any operator like addition,

2593
01:34:55,000 --> 01:34:56,440
subtraction, deletion,

2594
01:34:56,440 --> 01:34:59,560
behind this scene, we are calling methods, okay?

2595
01:34:59,560 --> 01:35:01,560
So for plus, we use add method,

2596
01:35:01,560 --> 01:35:03,520
for minus, we use sub method.

2597
01:35:03,520 --> 01:35:05,160
And for star, we use mult method.

2598
01:35:05,160 --> 01:35:07,160
In fact, we have a list of methods there.

2599
01:35:11,520 --> 01:35:14,440
In the last video, we have talked about operator overloading,

2600
01:35:14,440 --> 01:35:15,280
right?

2601
01:35:15,280 --> 01:35:17,680
Which simply means you have operator like plus,

2602
01:35:17,680 --> 01:35:20,160
minus, or division, or multiplication.

2603
01:35:20,160 --> 01:35:21,800
So the operator will remain same,

2604
01:35:21,800 --> 01:35:24,000
but the operands will change, right?

2605
01:35:24,000 --> 01:35:26,720
The type of parameters we are passing, it will change.

2606
01:35:26,720 --> 01:35:28,120
Example, when you say plus,

2607
01:35:28,120 --> 01:35:30,160
we are calling the add method, right?

2608
01:35:30,160 --> 01:35:32,920
And add method takes different types of parameters

2609
01:35:32,960 --> 01:35:34,800
or different types of arguments.

2610
01:35:34,800 --> 01:35:35,880
So that is overloading.

2611
01:35:35,880 --> 01:35:39,040
So it simply means you have the same method name,

2612
01:35:39,040 --> 01:35:40,840
but the arguments are different.

2613
01:35:40,840 --> 01:35:42,200
Or maybe the number of arguments

2614
01:35:42,200 --> 01:35:44,640
or the type of arguments are different.

2615
01:35:44,640 --> 01:35:48,160
In the same way, we have two more types in polymorphism.

2616
01:35:48,160 --> 01:35:52,200
One is method overloading and method overriding.

2617
01:35:52,200 --> 01:35:53,160
So what it means?

2618
01:35:53,160 --> 01:35:54,160
Let's start with the first one,

2619
01:35:54,160 --> 01:35:55,840
which is method overloading.

2620
01:35:55,840 --> 01:35:58,040
Now languages like Java, C sharp,

2621
01:35:58,040 --> 01:35:59,760
or any other oops language,

2622
01:35:59,760 --> 01:36:02,400
they have this concept of method overloading,

2623
01:36:02,400 --> 01:36:04,560
which is not there in Python.

2624
01:36:04,560 --> 01:36:06,120
But what exactly it is?

2625
01:36:06,120 --> 01:36:07,920
So it simply means if you have a class,

2626
01:36:07,920 --> 01:36:09,640
and in that class if you have, let's say,

2627
01:36:09,640 --> 01:36:11,480
two methods with the same name,

2628
01:36:11,480 --> 01:36:13,840
but different parameters or arguments,

2629
01:36:13,840 --> 01:36:15,800
which is called as method overloading.

2630
01:36:15,800 --> 01:36:17,400
Example, let's say if you have student class,

2631
01:36:17,400 --> 01:36:19,240
and in student class if you have two methods,

2632
01:36:19,240 --> 01:36:20,720
let's say average.

2633
01:36:20,720 --> 01:36:22,960
So we have two methods with the same name, average.

2634
01:36:22,960 --> 01:36:26,040
One takes two parameters, one takes three parameters.

2635
01:36:26,040 --> 01:36:27,800
This is called as method overloading.

2636
01:36:27,800 --> 01:36:29,960
But in Python, we don't have this concept.

2637
01:36:29,960 --> 01:36:32,880
So we cannot create two methods with the same name.

2638
01:36:32,880 --> 01:36:35,000
The next one is method overriding,

2639
01:36:35,000 --> 01:36:37,680
which simply means you have two methods

2640
01:36:37,680 --> 01:36:40,440
with the same name and same number of parameters

2641
01:36:40,440 --> 01:36:41,640
or arguments.

2642
01:36:41,640 --> 01:36:44,000
Okay, so that means can we create two methods

2643
01:36:44,000 --> 01:36:46,120
with the same name and same parameter in the same class?

2644
01:36:46,120 --> 01:36:47,920
Of course not, not in the same class.

2645
01:36:47,920 --> 01:36:50,080
But let's say if you have a concept of inheritance,

2646
01:36:50,080 --> 01:36:52,160
we have class A and class B,

2647
01:36:52,160 --> 01:36:54,360
and both the class have the same method

2648
01:36:54,360 --> 01:36:56,280
with the same name, same parameter,

2649
01:36:56,280 --> 01:36:58,400
this is called as overriding.

2650
01:36:58,400 --> 01:36:59,760
Again, we'll see the impact of that.

2651
01:36:59,760 --> 01:37:01,840
Let's start with the method overloading first.

2652
01:37:01,840 --> 01:37:03,800
So if you want to achieve method overloading,

2653
01:37:03,800 --> 01:37:06,040
what I will do is I will just remove this methods from here.

2654
01:37:06,040 --> 01:37:07,680
Just to keep it simple, right?

2655
01:37:07,680 --> 01:37:10,160
So we got a init method and it is working perfectly.

2656
01:37:10,160 --> 01:37:12,920
Let's remove all the extra stuff from here.

2657
01:37:12,920 --> 01:37:15,800
We just want to create one object, not even two.

2658
01:37:15,800 --> 01:37:17,000
I want to add two numbers.

2659
01:37:17,000 --> 01:37:20,000
So I have to create a method, let's say sum,

2660
01:37:20,000 --> 01:37:22,000
and this sum will take two arguments.

2661
01:37:22,000 --> 01:37:24,200
We'll say A and B.

2662
01:37:24,200 --> 01:37:25,640
So I want to add two values, that's it.

2663
01:37:25,640 --> 01:37:27,760
Nothing complex, I want to add two numbers.

2664
01:37:27,760 --> 01:37:29,160
Now if you want to add two numbers,

2665
01:37:30,040 --> 01:37:33,280
I will say S is equal to A plus B,

2666
01:37:33,280 --> 01:37:35,480
and at the end, we'll return S.

2667
01:37:35,480 --> 01:37:36,720
That's what we want to do here.

2668
01:37:36,720 --> 01:37:39,240
We just want to return the value of S, okay?

2669
01:37:39,240 --> 01:37:41,880
And if you want to work with that, you will say S1.

2670
01:37:41,880 --> 01:37:45,040
In fact, you will print the value, you will say S1 dot sum,

2671
01:37:45,040 --> 01:37:46,720
and you want to add two numbers here.

2672
01:37:46,720 --> 01:37:48,680
I will say five and nine.

2673
01:37:48,680 --> 01:37:49,680
And let's see if it is working.

2674
01:37:49,680 --> 01:37:51,120
Let's run this code and it works.

2675
01:37:51,120 --> 01:37:52,640
You can see we got 14.

2676
01:37:52,640 --> 01:37:55,400
So yes, we can create a method in setup class

2677
01:37:55,400 --> 01:37:56,560
which takes two parameters

2678
01:37:56,560 --> 01:37:58,680
and we can pass two parameters, it works.

2679
01:37:58,680 --> 01:38:01,080
What if, if you want to pass three values,

2680
01:38:01,080 --> 01:38:03,920
you want to pass five, nine, and six.

2681
01:38:03,920 --> 01:38:05,080
Now this is not possible, right?

2682
01:38:05,080 --> 01:38:07,280
The moment you run this code, you will get an error

2683
01:38:07,280 --> 01:38:10,280
because you are passing three parameters

2684
01:38:10,280 --> 01:38:11,640
or you're passing three arguments

2685
01:38:11,640 --> 01:38:13,160
and you're accepting only two.

2686
01:38:13,160 --> 01:38:14,400
So this will not work.

2687
01:38:14,400 --> 01:38:16,840
That means you need to create another method called a sum

2688
01:38:16,840 --> 01:38:18,120
which will take three arguments.

2689
01:38:18,120 --> 01:38:20,280
That's what we do in other languages.

2690
01:38:20,280 --> 01:38:21,800
But here we'll not do that.

2691
01:38:21,800 --> 01:38:24,240
Here what you can do is you can also use third variable.

2692
01:38:24,240 --> 01:38:27,080
You will say C, you got A, B, and C,

2693
01:38:27,120 --> 01:38:30,760
and you will simply say A plus B plus C, right?

2694
01:38:30,760 --> 01:38:31,680
So this will work.

2695
01:38:31,680 --> 01:38:34,280
So if I run this code and you can see you got 20

2696
01:38:34,280 --> 01:38:36,080
and this is right, you will get 20.

2697
01:38:36,080 --> 01:38:37,840
So we are passing three arguments

2698
01:38:37,840 --> 01:38:40,240
and we are accepting three arguments, it will work.

2699
01:38:40,240 --> 01:38:42,360
But what if I'm not passing third argument,

2700
01:38:42,360 --> 01:38:43,800
I'm passing only two arguments?

2701
01:38:43,800 --> 01:38:45,040
And now the problem starts, right?

2702
01:38:45,040 --> 01:38:49,080
Because you are expected to pass the third argument as well.

2703
01:38:49,080 --> 01:38:50,240
How do we solve this?

2704
01:38:50,240 --> 01:38:52,320
To solve this thing, we can use a concept

2705
01:38:52,320 --> 01:38:54,640
where you will say A is equal to none.

2706
01:38:54,640 --> 01:38:55,480
So this is one option.

2707
01:38:55,480 --> 01:38:58,520
The other option, we can use the variable length arguments.

2708
01:38:58,520 --> 01:39:00,360
If you remember, we have done that before,

2709
01:39:00,360 --> 01:39:01,880
the star and variable name.

2710
01:39:01,880 --> 01:39:02,720
But this is another option.

2711
01:39:02,720 --> 01:39:05,480
You can say all the values are by default none,

2712
01:39:05,480 --> 01:39:07,880
which means even if you don't pass the value,

2713
01:39:07,880 --> 01:39:09,760
this is default arguments, right?

2714
01:39:09,760 --> 01:39:11,440
So even if you don't pass the value,

2715
01:39:11,440 --> 01:39:12,920
the default value will be none.

2716
01:39:12,920 --> 01:39:15,800
So that means even if you don't pass any value,

2717
01:39:15,800 --> 01:39:18,840
example, even if you don't pass five and nine, it will work.

2718
01:39:18,840 --> 01:39:20,640
All the values will become none.

2719
01:39:20,640 --> 01:39:23,520
I want to pass some values, I will say five comma nine.

2720
01:39:23,520 --> 01:39:24,840
I'm passing with two values, right?

2721
01:39:24,840 --> 01:39:25,680
Let's start with third one.

2722
01:39:25,680 --> 01:39:29,000
Let's say I want to pass three values, five comma nine comma six.

2723
01:39:29,000 --> 01:39:33,480
All these values will be assigned to A, B, and C, respectively.

2724
01:39:33,480 --> 01:39:37,360
So if I will go to A, nine will go to B, and six will go to C.

2725
01:39:37,360 --> 01:39:39,160
So these values will be replaced by none.

2726
01:39:39,160 --> 01:39:40,840
So none will be replaced by these values.

2727
01:39:40,840 --> 01:39:43,920
So now, once I know this, so we can simply add it.

2728
01:39:43,920 --> 01:39:45,560
But what if you're passing two?

2729
01:39:45,560 --> 01:39:46,760
So in this case, you will check.

2730
01:39:46,760 --> 01:39:48,200
So before adding, you will check.

2731
01:39:48,200 --> 01:39:53,000
You will check if A is not equal to none, B is not equal to none,

2732
01:39:53,000 --> 01:39:55,640
and C is not equal to none.

2733
01:39:55,640 --> 01:40:00,040
So if none of them are none, that simply means you're passing three arguments, right?

2734
01:40:00,040 --> 01:40:02,920
And if you're passing three arguments, this is the calculation we have to go for.

2735
01:40:02,920 --> 01:40:06,200
You will say S is equal to A plus B plus C.

2736
01:40:06,200 --> 01:40:10,040
And you want to declare S outside so that you can use it from anywhere.

2737
01:40:10,040 --> 01:40:12,680
So you will say S is by default zero, and you've got this.

2738
01:40:12,680 --> 01:40:15,280
Otherwise, if let's say if I'm passing only two arguments,

2739
01:40:15,280 --> 01:40:19,760
I'm not passing the third argument, in that case, it will go to LF.

2740
01:40:19,760 --> 01:40:22,920
And inside LF, I will check, I forgot a colon here.

2741
01:40:22,920 --> 01:40:26,840
So inside LF, I will check if A is not equal to none.

2742
01:40:26,840 --> 01:40:28,720
So I'm concerned about A and B.

2743
01:40:28,720 --> 01:40:33,440
If they are not none, in that case, I will say S is equal to A plus B,

2744
01:40:33,440 --> 01:40:35,240
because we're not concerned about C, right?

2745
01:40:35,240 --> 01:40:36,720
And then we can go for one more condition.

2746
01:40:36,720 --> 01:40:38,960
What if you pass only one parameter or one argument?

2747
01:40:38,960 --> 01:40:42,240
In that case, you will say else, and you will say S equal to A.

2748
01:40:42,240 --> 01:40:45,400
So when you say only one parameter, let's say if I'm not passing nine and six,

2749
01:40:45,400 --> 01:40:47,800
I'm passing only five, so it will return five, right?

2750
01:40:47,800 --> 01:40:48,920
That's what we want.

2751
01:40:48,920 --> 01:40:49,720
So we can do that.

2752
01:40:49,720 --> 01:40:52,560
Else part is not required here, but just to make it more effective.

2753
01:40:52,560 --> 01:40:56,400
We can pass one argument, we can pass two arguments, we can pass three arguments.

2754
01:40:56,400 --> 01:40:57,320
That's perfect.

2755
01:40:57,320 --> 01:40:59,400
Let's run this code, and it worked.

2756
01:40:59,400 --> 01:41:00,440
You can see we got 20.

2757
01:41:00,440 --> 01:41:05,360
Now, if I pass only five and nine, even this will work because if you pass only

2758
01:41:05,360 --> 01:41:10,360
five and nine, C will get none, and it will execute LF, and you can see we got 14.

2759
01:41:10,360 --> 01:41:13,200
Now, if you pass only one value, let's say five, in this case,

2760
01:41:13,200 --> 01:41:15,000
if you run this code, you got five, right?

2761
01:41:15,000 --> 01:41:16,440
That's how it works.

2762
01:41:16,440 --> 01:41:19,640
So this is your method overloading.

2763
01:41:19,640 --> 01:41:21,280
So we are overloading methods.

2764
01:41:21,280 --> 01:41:24,480
But then we are not doing directly because it doesn't support in Python.

2765
01:41:24,480 --> 01:41:26,080
So we are doing some trick.

2766
01:41:26,080 --> 01:41:28,120
The next one is method overriding.

2767
01:41:28,120 --> 01:41:28,840
So let's go with that.

2768
01:41:28,840 --> 01:41:30,200
Let me just remove this code.

2769
01:41:30,200 --> 01:41:32,880
And let's once again take a simple example.

2770
01:41:32,880 --> 01:41:34,640
And this time we'll go for A and B.

2771
01:41:34,640 --> 01:41:36,000
I love these classes.

2772
01:41:36,000 --> 01:41:38,480
So what I will do is, let's say we have a class A, OK?

2773
01:41:38,480 --> 01:41:40,760
And in this class A, we have a function.

2774
01:41:40,760 --> 01:41:43,240
I will say function name is, or the method name is show.

2775
01:41:43,240 --> 01:41:47,120
And in this method, I will simply print in a show.

2776
01:41:47,120 --> 01:41:50,760
Now, first of all, before going ahead, this concept is method overriding.

2777
01:41:50,760 --> 01:41:53,120
This is very famous in software industry, you know?

2778
01:41:53,120 --> 01:41:55,800
So in future videos, we'll also talk about this thing.

2779
01:41:55,800 --> 01:41:58,560
When we talk about interfaces and abstract classes,

2780
01:41:58,560 --> 01:42:01,320
this concept is used very heavily, OK?

2781
01:42:01,320 --> 01:42:03,960
So make sure that you understand this concept properly.

2782
01:42:03,960 --> 01:42:05,960
Maybe with simple example like A and B.

2783
01:42:05,960 --> 01:42:08,280
But understanding the concept is important here.

2784
01:42:08,280 --> 01:42:10,520
We can go with complex example as well.

2785
01:42:10,520 --> 01:42:11,600
Concept is important.

2786
01:42:11,600 --> 01:42:14,120
So let's say we got class A, which has a method which is show.

2787
01:42:14,120 --> 01:42:15,960
And we are printing in a show.

2788
01:42:15,960 --> 01:42:16,280
That's it.

2789
01:42:16,280 --> 01:42:17,200
Nothing fancy.

2790
01:42:17,200 --> 01:42:19,000
Now, if I create an object of A here.

2791
01:42:19,000 --> 01:42:22,560
So if I go back and if I say A1 is equal to A,

2792
01:42:22,560 --> 01:42:24,520
so we are creating object of A, right?

2793
01:42:24,520 --> 01:42:26,520
And with the help of this, we can call show.

2794
01:42:26,520 --> 01:42:28,440
If you have this code, you can see we got in A show.

2795
01:42:28,440 --> 01:42:29,560
That perfectly worked.

2796
01:42:29,560 --> 01:42:31,600
Now, what if you create another class?

2797
01:42:31,600 --> 01:42:33,920
Let's say class B, OK?

2798
01:42:33,920 --> 01:42:38,400
And now imagine this class A is a parent and class B is a child.

2799
01:42:38,400 --> 01:42:41,000
Example, let's say this is my dad and this is me.

2800
01:42:41,000 --> 01:42:42,480
So we have B here.

2801
01:42:42,480 --> 01:42:44,440
And time in, I'm not writing anything here.

2802
01:42:44,440 --> 01:42:45,280
We say pass.

2803
01:42:45,280 --> 01:42:46,760
I just want to keep it empty.

2804
01:42:46,760 --> 01:42:48,440
OK, so we are keeping it empty.

2805
01:42:48,440 --> 01:42:51,560
And let me create object of B, not A, but let me get object of B.

2806
01:42:51,560 --> 01:42:53,000
And let's run this code.

2807
01:42:53,000 --> 01:42:55,040
And you can see we got an error.

2808
01:42:55,040 --> 01:42:58,200
It says B object has no attribute as show.

2809
01:42:58,200 --> 01:43:00,400
Of course, in B, we don't have anything.

2810
01:43:00,400 --> 01:43:02,600
At this point, you will use a concept of inheritance.

2811
01:43:02,600 --> 01:43:06,960
And you will say, hey, B inherits A. So when you say B inherits A,

2812
01:43:06,960 --> 01:43:10,520
it means you will get all the features of A to B.

2813
01:43:10,520 --> 01:43:11,360
And let's run this code.

2814
01:43:11,360 --> 01:43:13,080
And you can see we got in A show.

2815
01:43:13,080 --> 01:43:15,320
Because of course, in B, we don't have show.

2816
01:43:15,320 --> 01:43:17,280
The moment you run this code, it will first

2817
01:43:17,320 --> 01:43:19,960
search for the method show inside B.

2818
01:43:19,960 --> 01:43:23,160
Now, since we don't have that, it will go to A to search it.

2819
01:43:23,160 --> 01:43:24,360
And that's how it works.

2820
01:43:24,360 --> 01:43:26,080
So before going ahead, let me tell you one story.

2821
01:43:26,080 --> 01:43:26,680
A small story.

2822
01:43:26,680 --> 01:43:28,640
I've used this story in multiple examples

2823
01:43:28,640 --> 01:43:30,080
when I was teaching Java as well.

2824
01:43:30,080 --> 01:43:32,240
So the concept is, when I was in my 11th standard,

2825
01:43:32,240 --> 01:43:35,960
when I've just joined my college, I was not having any phone.

2826
01:43:35,960 --> 01:43:39,280
So a lot of people used to ask me, which phone you have.

2827
01:43:39,280 --> 01:43:40,960
So I used to say, I don't have any phone.

2828
01:43:40,960 --> 01:43:42,240
Because I was not having a phone.

2829
01:43:42,240 --> 01:43:44,600
But then this question got repeated multiple times.

2830
01:43:44,600 --> 01:43:46,560
Then I realized, OK, I have to say something.

2831
01:43:46,560 --> 01:43:48,480
Now, at that point, my father was

2832
01:43:48,480 --> 01:43:50,640
having a phone which is Nokia double one, double zero.

2833
01:43:50,640 --> 01:43:51,760
I was not having any phone.

2834
01:43:51,760 --> 01:43:54,120
So whenever someone used to ask me, which phone you have,

2835
01:43:54,120 --> 01:43:56,560
I used to say, I got Nokia double one, double zero.

2836
01:43:56,560 --> 01:43:57,520
I don't have a phone.

2837
01:43:57,520 --> 01:43:58,880
But my father says a phone.

2838
01:43:58,880 --> 01:44:00,600
So father's phone is my phone.

2839
01:44:00,600 --> 01:44:01,680
That's how I think it works.

2840
01:44:01,680 --> 01:44:05,920
So since B and B, my father is A. So B in hates A.

2841
01:44:05,920 --> 01:44:07,520
So I got all the features.

2842
01:44:07,520 --> 01:44:11,880
In this case, show is in A. In B, we don't have show.

2843
01:44:11,880 --> 01:44:14,720
After some time, after a few months, I got a new phone.

2844
01:44:14,720 --> 01:44:16,320
And that is Motorola phone.

2845
01:44:16,320 --> 01:44:19,240
So my father has a Nokia phone, and I got Motorola phone.

2846
01:44:19,240 --> 01:44:21,480
Now, if you ask me which phone I have, of course,

2847
01:44:21,480 --> 01:44:22,400
I would say Motorola, right?

2848
01:44:22,400 --> 01:44:24,040
I would not say Nokia, right?

2849
01:44:24,040 --> 01:44:27,760
Because my phone overwrites my father's phone.

2850
01:44:27,760 --> 01:44:29,160
That's what happened here.

2851
01:44:29,160 --> 01:44:33,520
The moment you create a show method inside B as well,

2852
01:44:33,520 --> 01:44:37,000
and if you try to print in B show.

2853
01:44:37,000 --> 01:44:39,440
Because when we were not having show inside B,

2854
01:44:39,440 --> 01:44:43,120
it was going to A. Now, since we have show inside B,

2855
01:44:43,160 --> 01:44:46,360
it will print the show of B, right?

2856
01:44:46,360 --> 01:44:47,960
So if you ask me which phone I have now,

2857
01:44:47,960 --> 01:44:49,920
so I will say Motorola, not Nokia, right?

2858
01:44:49,920 --> 01:44:52,760
So my phone overwrites my father's phone in the same way.

2859
01:44:52,760 --> 01:44:56,120
This show overwrites the earlier show method.

2860
01:44:56,120 --> 01:44:58,720
So this is how you work with method overriding.

2861
01:44:58,720 --> 01:45:02,000
Again, we'll be doing this concept more in the next tutorials

2862
01:45:02,000 --> 01:45:04,880
when we talked about abstract classes or interfaces.

2863
01:45:04,880 --> 01:45:06,160
But this is awesome, right?

2864
01:45:06,160 --> 01:45:08,160
Remember this point, when you call show,

2865
01:45:08,160 --> 01:45:11,000
it will call the show method of this subclass

2866
01:45:11,000 --> 01:45:12,760
if you have it, okay?

2867
01:45:12,800 --> 01:45:13,600
So that's it, everyone.

2868
01:45:13,600 --> 01:45:15,120
I hope you enjoyed this session.

2869
01:45:15,120 --> 01:45:16,240
Let me know in the comment section

2870
01:45:16,240 --> 01:45:18,440
and do subscribe for the videos.

