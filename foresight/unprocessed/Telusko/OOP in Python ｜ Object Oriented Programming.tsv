start	end	text
0	20400	Now, till this point, we have seen the language fundamentals of Python, right?
20400	25080	We have seen variables, how to pass a variable to a function, we have seen function, right?
25080	29680	How to define function, how to call a function, and then we moved towards module and now
29800	31480	we know how to create different files.
31840	36200	Now, once we have talked about the language fundamentals, let's move towards the concepts.
36560	41160	Now, one of the concepts which is very important is, oops, which is object oriented programming.
41520	46920	Now, one of the unique selling point of Python, you know, why Python is so famous because of this thing.
47320	51960	Python supports all different programming paradigm, you know, it supports functional programming,
52120	57400	it supports object oriented programming, and it also works with procedure oriented programming.
57720	60320	Now, we have talked about procedure, right?
60320	64120	What is procedure now is, whenever you work with Python, we define functions, right?
64120	65560	We call a function from a function.
65560	69880	So if you want to create a software, you will break down your project into small, small part,
69880	72600	and those modules, small modules will be functions.
72800	75520	Now, Python is also functional programming.
75520	81120	So functional programming basically means if you can achieve a certain task, implementing functions
81120	86960	as a mathematical functions where you will not manipulate a data, which is instead of changing data,
87000	88720	you will still accomplish a task.
88920	93760	One of the ways you can pass a function to a function, you know, we have seen this, again,
93760	97160	we have a very deep concept of functional programming, we'll talk about that later.
97320	102480	But time being, procedures and functions, which is something we have already done, for example, lambdas.
102840	106200	Now, we are going for a concept of ops.
106200	110200	Now, which is very famous in the industry, you know, so if you are working on big softwares,
110200	113960	enterprise projects, you need to think everything in a format of objects.
114200	117720	Now, you might be thinking why objects, we were happy with functions, right?
118000	121560	Now, see, even from start itself, I was I'm talking about objects, right?
121560	124840	Maybe in some programming, I said, OK, this is an object in teachers, an object.
125120	126800	But then we were skipping that part.
126800	129080	What is object and why it's so important?
129120	135840	See, ultimately, if we talk about programming world, what we do is we try to solve a real world issue
136000	138600	with the help of a virtual world solution, right?
138760	141800	So example, programming softwares, everything is virtual world.
142120	144520	Now, in real world, we all use objects, right?
144520	148160	Example, if I want to record this video, I need a camera, right?
148160	149880	If I want to call someone, I need a phone.
149880	152120	If you want to type a code, you need a laptop, right?
152400	155120	So for everything, you need object.
155520	158160	So in real world, everything is object, in fact, persons, right?
158160	162560	Example, if I have a company, if I want some work to be done, of course, I need employees, right?
162560	165400	And for me, every employee is an object, right?
165640	168480	So an employee object is using a laptop object.
168520	171520	So some employee object needs a AC object, right?
171520	172440	So that's how things work.
172440	173640	Everything is an object.
173640	175880	Even humans, we treat them as object.
176320	177440	Now, what object will have?
177440	178560	Object will have two things.
178800	183000	Every object will have certain attributes and every object will have certain behavior.
183360	187840	Now, when I say attribute, you can imagine them as data, or you can say properties.
188080	193840	Example, my height is one attribute, my age is one attribute, my name is one attribute.
194040	196560	The company I work for is one attribute, right?
196560	198400	Everything is those things that attribute.
198760	200240	And then comes my behavior.
200320	202680	I'm talking, I'm walking, I'm dancing.
202960	204440	All these are behavior, right?
204680	207080	So our actions defines our behavior.
207480	210080	And then we have attributes, which we know.
210480	213320	In other terms, you can say, as an object, I know something.
213320	215080	As an object, I do something, right?
215160	218160	So I do something based on something which I know, right?
218360	219240	So this is object.
219400	223840	Object will have something where you can store data and object will have some behavior.
224080	227040	Now, this data, which we normally use, those are variables, right?
227040	228120	We have same variables.
228320	231920	So if you want to store something, an object, we need to define variables.
232040	235160	If you want to define the behavior, we need to use methods.
235360	236360	Oh, that's something new now.
236360	237040	What is method?
237680	238960	We have done with functions, right?
239160	243880	So functions in object-oriented programming, they're called as methods.
244160	244360	Right?
244360	245000	It's just so simple.
245000	246120	We have done all those stuff.
246120	250200	The only change we have now is we need to think in an object term.
250400	253560	See, object-oriented programming is not just about different syntax.
253560	255080	It's also about the way you think.
255480	259800	So now, if you want to achieve anything in programming, you need to think about objects.
259800	263480	So the moment you say you have a complex problem, think about the object,
263480	266840	think about multiple objects, and how can you connect them, right?
267040	269080	Because in OOPS, we have so many concepts.
269080	271440	One of the concepts is object, which we are going to see now.
271840	273200	We have a concept of classes.
273200	277040	We have a concept of encapsulation, abstraction, polymorphism.
277280	278640	I know weird words, right?
278640	282480	But don't worry, we will be covering everything in detail in the subsequent tutorials.
282920	284920	So there's one thing which is important to discuss here.
285080	288760	About classes, because we have an object and we have a concept of class.
288880	293320	It doesn't matter which language you work on, maybe Java, C++, or C sharp,
293400	296240	whichever whatever language which uses OOPS concept, you know,
296240	299960	we always use this thing, which is object and class together.
300320	301040	But why?
301040	302480	Why they are so important?
302480	305840	Of course, objects are important because whatever you want to do can be done
305840	307360	with the help of object.
307360	309120	But why class is important?
309120	310320	Now, think about this.
310320	315360	When you see an object in real world, for example, this camera, a fan, or a clock,
315560	317800	right, all these things are manufactured, right?
317800	320640	So in some factory, they have been manufactured.
320640	321920	Or maybe you can talk about a phone.
321920	322760	Now, look at this phone.
322760	324120	This is Motorola G3.
324120	326960	OK, now it's not the only phone available here, right?
326960	328400	So a lot of people, they have this phone.
328400	331440	So that means we don't have one object of Moto G3.
331440	333800	We have thousands or millions of objects.
333880	335120	I'm using any number here.
335120	339320	So imagine we have five million of this type of phones, which is Moto G3.
339880	342160	Now, of course, someone must have designed it, right?
342160	344560	And all these phones have been manufactured somewhere.
344560	347840	Maybe maybe you can say all these phones are made in China.
347840	352080	OK, so we have a factory in China who is producing all this phone.
352320	354240	But then Motorola says it is their phone, right?
354240	356280	Of course, we don't say this is a China phone.
356280	358080	We say this is a Motorola phone.
358080	360240	Or we don't say, let's say the manufacturing is in India.
360240	362080	We don't say it's an Indian phone.
362080	363200	We say it's a Motorola phone.
363200	364040	Why?
364040	365880	Because manufacturing is not important.
365880	367640	You can manufacture stuff anywhere.
367960	371280	What is important is where it has been designed.
371280	373360	OK, so this is designed by Motorola.
373760	377800	But even if you talk about this phone, this has been designed once.
377920	380480	And then they have manufactured multiple times.
380800	384440	And that design in programming or in, oops, we say class.
384720	387120	So in a class, you will write a design of the object.
387440	390800	Imagine there's some factory in your machine who will create these objects.
390800	394600	OK, so you have to provide a design so that you will get the object.
395120	397960	So that means class is a design and objects.
397960	399200	They are real stuff, right?
399200	401120	They are real entities, you can say.
401120	403080	Or you can use another term called as instance.
403400	406880	So you can imagine this is an instance of a class.
407600	408760	That's awesome, right?
408760	413200	So point to remember class is a design or you can call them as blueprint.
413720	418200	So if you have a class, you can manufacture thousands of billions of these devices.
418440	419960	So that's about class and object.
424960	429200	In the last video, we have talked about the theory of objects and a class, right?
429560	432480	So of course, before creating an object, you need to create a class, right?
432480	434920	Because class is a design for the object.
434920	437560	And if you don't have a design, how can you build something?
437920	443280	In fact, even before building a tower, you need to create a blueprint of it, right?
443280	444440	And that's the same case here.
444440	447400	So if you want an object, you need to create a class.
447600	451520	So what I'm talking about is, you know, let's say I want to work with computers.
451520	452720	So I'm a person.
452720	453840	I want to work with a computer.
453840	456000	So of course, I want an object of a computer, right?
456000	459000	So let's say I'm a programmer and of course I want to work with a computer.
459280	460520	So I will say comp one.
460520	461960	So this is my computer.
461960	465360	But see, the thing is, till this point, we have worked with integers.
465360	467840	We have worked with float string.
468000	470240	Now, all those are inbuilt types, right?
470320	472160	We don't have any type as computer.
472160	473920	So of course, we need to create our own type.
473920	475840	So we have to get our own class for it.
475840	478480	So if you want to use a computer, you need to define a class here.
478480	480120	So how do we define a class?
480120	483720	The way we define a function is by saying def and function name.
484000	487400	The way we define a class is using a class keyword.
487400	490280	So we have to say class and this class will, of course, have a name.
490560	492800	In this case, I will use a name as computer.
492920	494680	OK, now this is how you define a class.
494680	496560	You have to specify a colon.
496560	499320	Now, after colon, this is your suite, right?
499320	501560	So this is where you will mention your stuff.
501560	503920	Now, what stuff we can put in a class?
503920	506480	Two things. The first thing is the attributes.
506560	508360	The second one is the behavior.
508440	510560	Oh, now, when you say attribute, it is your variables.
510560	512040	OK, the way you create variables.
512040	516080	And the next thing we'll be having here is behavior, which is methods.
516200	517480	What is methods functions?
517480	519600	You know, the functions which we are using from a long time,
519600	521400	but here we call them as methods.
521400	522920	So next time when you are calling a function,
522920	526760	but that function is a part of a class instead of calling them as functions,
526760	527960	we have to say methods, right?
527960	530320	OK, now let's define some methods here.
530320	533080	Now, what I'm talking about, let me get a method here.
533080	533800	I will say def.
533800	537240	I will say config because every machine has a configuration, right?
537240	538280	So I will say config.
538280	540560	We got that self keyword that that's weird.
540560	542360	What is self because I'm not typing it.
542360	545120	OK, so I mean, the moment I say bracket, it says self.
545200	546560	We'll talk about that self later.
546560	548040	But time being, let's keep it there.
548040	549680	You can imagine we don't have any self there.
549680	552200	OK, for time being, imagine we don't have anything like self.
552280	555120	OK, and here we'll say we got a complete class
555120	557520	and then we got a config method or you can say function,
557520	561320	but try to move from that function term to method term.
561560	563400	Right, so we got a method here, which is config.
563400	565880	And here I'm printing the config of this machine.
565880	570760	And I want to say, hey, this is i5 machine with 16 GB RAM,
570760	573560	and it has one data point hudder.
573560	576720	Now, this is very common config now, which we find nowadays, right?
576720	577840	And that's what I'm doing here.
577840	579320	So we got a class computer.
579320	581240	We got a method in that example here.
581240	584600	I'm saying comp one is the object of computer.
584800	586120	But we cannot simply do that, right?
586120	588720	We cannot simply say comp one because no one will understand
588720	589960	what this comp one is.
589960	594240	Example, if I say there's a variable a, what is a type of this variable?
594240	597120	Right now, since in Python, we don't have to
597120	599280	statically mention the type of it.
599280	601840	So what we can do is when you say a equal to 5,
601840	604240	now the type of a becomes integer, right?
604240	607200	If I say a is 5.5, the type of a becomes float.
607200	610400	If I assign a value of string type, if I say 8,
610400	612960	even if that 8 is number, we are putting that in single code, right?
612960	614160	That becomes a string.
614160	615520	What about comp one?
615520	617760	Comp one here, don't have a type.
617760	621600	We have to mention, hey, this comp one is an object of computer.
621680	624720	In that case, you will say equal to computer.
624720	626960	And you have to give this round brackets.
626960	629280	Now, if you are coming from another, you know,
629280	632240	from different programming background like Java, C sharp,
632240	634000	we have a concept of constructor, right?
634000	635440	So these are constructed there.
635440	638160	So this will give you the object of computer.
638160	639280	Now, how do I know that?
639280	643680	If you remember in one of the video, we have talked about a type function, right?
643680	645280	So you can use type function here.
645280	646800	So I will say print.
646800	650400	I will define type, print the type of con one.
650400	652320	Let's see what happens, what it gives you.
652320	654560	So if I run this code, it says, hey, this is a class.
654560	656640	Okay, now we have a different keyword class.
656640	659200	And this belongs to a computer.
659200	659840	That's important.
659840	660320	Okay.
660320	661680	So it gives you the module name.
661680	664720	The module name is main because we are running this code from here.
664720	667360	And then we have a class for this computer.
667360	670080	Now, if you remember, when we work with string as well,
670080	671040	string gives the same thing.
671040	674480	So if I print the type of a, it also says the same thing.
674480	675040	Can you see that?
675040	677040	It says class str, right?
677040	679120	So we are using this concept from a long time,
679120	681200	but this is where we are defining it now.
681200	684480	So string str is also a class, the same way computers are class.
684480	687040	The difference is str is an in-built class.
687040	688240	Computer is our class.
688240	688400	Okay.
688400	689600	That's how you define it.
689600	694720	So you say class, computer, and then we have def config.
694720	696160	In fact, there's one more thing.
696160	698720	If you remember, when we worked with integers,
698720	701360	we have also said that integers are also object.
701360	702160	Let's try it here.
702160	703760	I will say x equal to nine.
703760	706240	And let me print the type of x.
706240	707120	Can you see that?
707120	710480	When I print the type of x, it says class int.
710480	714880	So even this integer, this x, is an object of integer now, right?
714880	718560	So everything is object in Python, right?
718560	720240	So there are some in-built objects,
720240	721760	and there are some objects which we create.
721760	724320	And the way you create your own class is by saying class,
724320	725920	computer, whatever class name.
725920	728000	Make sure that you don't use in-built class name,
728000	729600	because it will give you error, right?
729600	731360	Or maybe you might face some bugs.
731360	734160	So we have, so in a class, we are defining a function config,
734160	735280	and then, oh, not function.
735280	738320	Method front config, and then we are printing just a statement.
738320	740400	Now, question arise, how will you call it?
740400	742880	So let me remove this, all this extra stuff which we are doing.
742880	744560	So we got a class, we got the object.
744560	746400	I want to call that config.
746400	747440	Now, what do you think?
747440	748320	How will you do it?
748320	749520	So normally, when you have a function,
749520	750880	you mentioned the function name, right?
750880	752240	Here in this case, it is config.
752960	755520	But you are getting an error.
755520	756160	Why error?
756160	759360	So if I go back here, it says unresolved reference,
759360	760160	or that's weird.
760160	761280	Why it is giving you unresolved?
761280	763200	Because of course, normally, till this point,
763200	766080	we were mentioning the function as it is, right, open.
766080	770000	But now, we have written that function or a method inside a class.
770000	773200	So in order to access that, we have to mention the class name.
773200	775040	And the class name here is computer.
775040	778080	So we have to say computer.config, important.
778080	779440	So steps, remember the steps.
779440	781840	You have to mention the computer class, which is class name,
781840	783520	and then you have to say config.
783520	786160	So let me repeat, if you want to use a method,
786160	788240	we have to mention a class name first, which is,
788240	791120	I mean, it belongs to computer, and then you have to mention config.
791120	794560	And if I run this code, oh, we got an error.
794560	795360	But why?
795360	796800	See, think about this.
796800	798720	One class can have multiple objects, right?
798720	800560	One object, two object, five objects,
800560	802400	maybe billions of objects, right?
802400	805680	In this case, we are using only one object, which is comp1.
805680	808640	The thing is, this config function or a method
808640	812080	will change its behavior based on the object, right?
812080	814080	Because different objects have a different behavior,
814080	815520	because depending upon what they know,
815520	816960	they have a different behavior.
816960	820000	See, in this case, I'm not depending on any data, right?
820000	822640	But maybe there's a chance that this config
822640	824720	will depend upon some data, and every object
824720	826320	will have its own data, right?
826320	827760	Again, we'll talk about that later.
827760	829360	But every object is different, right?
829360	832400	If I'm calling config, for which object I'm doing that?
832400	835920	So if I say, hey, walk, but whom am I supposed to say walk?
835920	838000	So I have to mention, hey, Ravi, walk.
838000	839440	Hey, Mukesh, walk.
839440	840480	Hey, Kiran, walk.
840480	842400	So I have to mention the names as well, right?
842400	844880	In the same way, when I say computer config,
844880	847600	you have to also mention for which object you're talking about.
847600	849440	And I'm talking about comp1.
849520	852400	So I'm saying, hey, I want the config for comp1.
852400	854240	Now, luckily, we have only one object here,
854240	855200	so there's no confusion.
855200	856640	But let's say if you have thousands of objects,
856640	858560	you have to mention the object name as well.
858560	859840	So we are doing comp1 here.
859840	861360	So if I run this code now,
861360	861920	oh, it works.
861920	863520	You can see that we got the output.
863520	867360	So we are calling config, and we are passing comp1.
867360	869360	And this comp1 is a parameter, right?
869360	870320	It's an argument.
870320	873360	So when you call config, you're passing this comp1
873360	875760	as the argument, and it is going in self.
875760	876640	So what is this self?
876640	879280	Self is the object which you're passing.
879280	881040	Again, this thing will get more clear
881040	882400	once you see further videos, right?
882400	883840	So this is a complex concept
883840	885520	if you are learning UPS for the first time.
885520	888240	But step by step, everything will go inside your brain, okay?
888240	889600	So this is the first layer.
889600	890400	Again, in the next video,
890400	891920	we'll talk about some more layers to it.
891920	892720	We'll add more layers,
892720	895040	and then I will make sure that you'll get everything about it.
895040	896640	Okay, let's create some more objects, okay?
896640	899520	So I will say comp2 is equal to computer, right?
899520	901520	So we got comp1, we got comp2.
901520	903120	So in total, we have two objects,
903120	905040	which is comp1 and comp2.
905040	907040	But we have only one class, which is computer.
907040	909120	If I want to call config for comp2,
909120	909760	what you will do?
909760	912640	You will say computer.config,
912640	913680	and this time you're saying,
913680	916320	hey, I want to call config for comp2.
916320	917840	So in the first instance, I'm saying,
917840	919520	Mukesh, walk, right?
919520	921680	Or I will say, hey, human, walk.
921680	923120	In background, I'm passing Mukesh.
923120	924880	I will say, hey, human, walk.
924880	926880	In background, I'm passing Ravi, right?
926880	928400	In the same way here, I'm saying,
928400	930560	hey, computer, show me a configuration,
930560	932080	and I'm talking about comp1.
932080	934720	Hey, computer, I want your configuration for comp2.
934720	936080	So if I run this code, you can see
936080	937200	we are getting same data,
937200	940000	because at this point, we are not changing data
940000	940960	for different objects.
940960	942000	We can do that later.
942000	943040	So this is one way, right?
943040	945440	If you want to call config, we have another way.
945440	947840	If you think about this, this looks good, right?
947840	949760	This looks clean, because we are saying,
949760	952080	hey, config method belongs to computer,
952080	954800	and then we have to pass the object name, which is comp1.
954800	955680	But there is one more way.
955680	958400	What you can do is you can mention comp1.config.
958400	961920	Now, in this case, you are using the object itself
961920	963440	to call the function.
963440	966000	So you're saying comp1.config.
966080	967840	But the question is, we are not passing it, right?
967840	969760	For example, let's do it for comp2 as well.
969760	971680	I will say comp2.config,
971680	972880	and you can see this time,
972880	975520	I'm not passing anything inside config, and still it works.
975520	977040	So you can see the output, it works.
977040	978560	We got four times the same data,
978560	980880	because the first two is because of these lines,
980880	984000	and the second, next two is because of this line, right?
984000	985040	But why is it working?
985760	988480	It's because this is another behavior of it.
988480	992240	So when you say comp1.config, you are calling config.
992240	994800	See, we are specifying which class it is, right?
994880	996560	So comp1 belongs to computer.
996560	998800	So now we know config belongs to computer.
998800	1000880	The moment you say comp1.config,
1000880	1003360	when you're calling it behind the scene,
1003360	1006480	this config will take comp1 as a parameter.
1006480	1011120	So behind the scene, config will take that comp1 as an argument,
1011120	1013680	and it will pass that in self, okay?
1013680	1016480	So in most of the code, you will see this type of syntax,
1016480	1017440	not this one.
1017440	1020080	But I have done this just to explain you
1020080	1021760	how this syntax linked like, okay?
1021760	1022880	So how this exactly works,
1022880	1024240	but normally we use this syntax.
1024240	1025200	The second one.
1025200	1027520	And that's why whatever we have done till now,
1027520	1029680	example, if I work with a variable of n size,
1029680	1032960	if I say a equal to five, and if I say a dot,
1032960	1034320	so whatever function we use here,
1034320	1036160	example, I want to know the bit length.
1036160	1038800	Now in this thing, you can see if I say control space,
1038800	1040720	you know, you can actually see the documentation
1040720	1043920	by clicking on this control and click on the function name.
1043920	1046560	So press control and click on the function name.
1046560	1047840	You can see it takes to the function,
1047840	1050400	it says bit length self.
1050400	1053280	So as a definition, it is accepting self,
1053280	1054640	but when you're passing it,
1054640	1056640	when you're calling bit length, we're not passing it.
1056640	1058400	So this a is an object, right?
1058400	1060400	It goes as a parameter.
1060400	1062720	So self is the object which you're passing.
1062720	1065440	We'll discuss more about that once we start with variables
1065440	1067200	and then attributes, all the stuff.
1067200	1069200	But time being, this is how you create a class
1069200	1070400	and that's how you create an object.
1075280	1076080	Now in the last video,
1076080	1078160	we have talked about oops concept, right?
1078160	1080560	We have seen what is object and a class.
1081120	1082720	Let's explore it more.
1082800	1084800	Now if you remember, when we talked about objects,
1084800	1086480	object will be having two stuff, right?
1086480	1088560	One is it will be having some attributes
1088560	1090320	and it will also have a behavior.
1090320	1092560	Now when you say attributes, those are variables, right?
1092560	1094080	We can create variables.
1094080	1095920	And behavior is your methods
1095920	1098640	and then methods are almost same as functions,
1098640	1101360	but in oops, we call them as methods, right?
1101360	1104240	Now here, we have to work with methods, right?
1104240	1106320	We have not worked with variables yet.
1106320	1108000	So what I will do is just to demonstrate that,
1108000	1109600	let me just remove this thing here
1109600	1112080	because we know that we can call config
1112080	1113440	using the object itself
1113440	1115120	or we can call it with the help of class
1115120	1116560	by passing the object.
1116560	1119280	Now syntactically, we normally go for the second one
1119280	1121600	which is calling the method from the object.
1121600	1123440	It makes much more sense, right?
1123440	1124720	So we'll remove that part.
1124720	1126320	And so once we got the object,
1126320	1128960	let's remove this A as well just to clean that stuff here.
1128960	1131840	Now what I will do is I want to have certain variables.
1131840	1134000	Now when I say variables, what I want to do is,
1134000	1136240	I want to have two variables,
1136240	1139760	one which defines the type of CPU I'm working with
1139760	1141200	and the amount of RAM I have.
1141200	1142960	Example, if you talk about any computer,
1142960	1144160	these two are very important, right?
1144160	1146800	The CPU which you are using and a RAM,
1146800	1148720	maybe 8GB RAM or 16GB RAM.
1148720	1152000	And in terms of CPU, we have let's say i3, i5, i7
1152000	1153600	or maybe some AMD series.
1153600	1155440	Okay, we have different parameters as well,
1155440	1156800	but just to keep it simple,
1156800	1158000	let's only focus on two things,
1158000	1159760	CPU and RAM capacity.
1159760	1161600	Now when you say we have two variables,
1161600	1162560	where do you find that?
1162560	1164400	So we can use a special method
1164400	1165920	which is available in a class.
1165920	1167600	Now when I say special, you know, right?
1167600	1168960	So the moment you say special,
1168960	1170400	we have talked about special variable
1170480	1172000	which is underscore underscore name
1172000	1174160	in the same way we have special method
1174160	1175440	which is init.
1175440	1176320	And when I say special,
1176320	1178800	it will be having underscores as well.
1178800	1179680	So let's define that.
1179680	1182160	So we'll say def underscore underscore init.
1182160	1184320	You can see that we are getting suggestions as well.
1184320	1185680	And the moment I say enter,
1185680	1188320	you can see we have the function name or the method name
1188320	1190960	as init and we are passing self.
1190960	1192480	Now see, self is not something
1192480	1194480	which I'm typing that is coming automatically.
1194480	1196960	So it's compulsory to have those argument, okay,
1196960	1197920	which is self.
1197920	1199760	And in here, we can do something.
1199760	1202560	Normally we use init to initialize the variables, okay?
1202560	1205360	And that's what the name itself init initialize, right?
1205360	1208400	Now if you are coming from C, C++ or Java background,
1208400	1209600	we use constructor, right?
1209600	1212160	So you can imagine this is our constructor,
1212160	1213920	but then it is init method.
1213920	1215760	The advantage here is normally,
1215760	1217520	see, if you want to work with config,
1217520	1219440	you are supposed to call config, okay?
1219440	1221760	So it's compulsory for you to call config.
1221760	1223520	Otherwise it will not get executed.
1223520	1225120	The idea behind init is,
1225120	1227040	it will be getting called automatically.
1227040	1229920	Example, if I go back here and let's say,
1229920	1232480	I want to print something and I will print in init.
1232480	1234800	So you can see I have defined a function called init
1234800	1235600	and not calling it, okay?
1235600	1237600	So anywhere in the code, I'm not calling init.
1237600	1239600	I'm calling config because I want to execute it.
1239600	1241280	The moment I run this code,
1241280	1243120	you can see it prints in init
1243120	1244480	and that way it prints two times.
1244480	1245360	Now why two times?
1245360	1248480	Because for every object, it will get called once.
1248480	1251360	So you can see in total, I'm getting two objects.
1251360	1253600	One is com one, one second is com two.
1253600	1256800	So we got two objects and it will call init two times.
1256800	1257920	So this is the object creation.
1257920	1260480	So when you say computer bracket, it will instantiate.
1260480	1262160	It will call init for you.
1262160	1265920	Now I want to pass some arguments, okay?
1265920	1267600	I want to pass CPU and RAM.
1267600	1270320	So in the constructor itself, you can pass that.
1270320	1272560	So in the computer bracket itself, you can pass it.
1272560	1275920	So I can say I have a CPU here, which is let's say i5
1275920	1278240	and the amount of RAM we have is 16 GB.
1278240	1280240	The second computer we have, let's say,
1280240	1283200	reason three and the amount of RAM we have, let's say 8 GB.
1283200	1285600	So we have two computers with two different CPUs, right?
1285600	1287920	And now how to accept these values?
1287920	1290480	So of course you have to pass these values here, right?
1290480	1293120	So you have to say self comma, you have to pass two values.
1293120	1294800	You have to accept these two values.
1294800	1297840	So you have to say CPU comma RAM, okay?
1297840	1298960	That's how you accept it.
1298960	1300080	Now I know your question.
1300080	1303040	Your question is we are passing two parameters, right?
1303040	1304240	Or we are passing two arguments.
1304240	1306160	One is CPU and second is RAM.
1306160	1308640	And we are accepting the arguments here.
1308640	1311600	So the thing is, you are actually passing three arguments here.
1311600	1313840	Remember, we are also passing comp one.
1313840	1315840	The moment you say computer in the back end,
1315840	1318480	you are passing that comp one by default.
1318480	1320400	The same thing happened with config, right?
1320400	1324320	When we call config, we are not passing self or the object itself.
1324320	1326480	But it gets passed automatically.
1326480	1329360	The same way, when you say computer by passing two parameters,
1329360	1330400	you're actually passing three.
1330400	1331920	The first one is the object itself.
1331920	1335040	The second one, the value, the first value here and then RAM.
1335040	1336240	Okay, that makes sense.
1336240	1337200	But will it work?
1337200	1339440	So the thing is, every object need to have a value
1339440	1341680	because this is just an argument now.
1341680	1343840	So CPU and RAM is just an argument.
1343840	1345920	If you want it to be a part of your object,
1345920	1347600	you need to say, because see,
1347600	1350240	we have to assign this value to an object, right?
1350240	1352400	And the object here is self, right?
1352400	1354160	So you have to say self dot.
1354160	1354720	That's right, right?
1354720	1356560	So this comp one, this is our object, right?
1356560	1360880	So we have to say self dot CPU is equal to CPU.
1360880	1363600	Again, there's no compulsion that you should be having same name.
1363600	1364400	You can have a different name.
1364400	1365200	That's fine.
1365200	1368240	So you will say self dot RAM is equal to RAM.
1368240	1369520	So whatever value you're passing here,
1369520	1372640	which is I5 goes to the CPU as an argument.
1372640	1375360	It will be assigned to the object, which is self.
1375360	1376720	So the self, you can imagine now.
1376720	1379120	So in the background, you can see we have two objects here.
1379120	1380880	So in total, we've got two objects.
1380880	1383040	Each object will have its own variables.
1383040	1384480	Okay, it will have its own CPU.
1384480	1386160	It will have its own RAM.
1386160	1388880	And then whatever value you pass in the arguments,
1388880	1390720	it will be assigned to those objects.
1390720	1393040	Okay, so we have two objects, two different values.
1393040	1395520	And now in the config, instead of printing this stuff,
1395520	1399360	I will say CPU comma RAM.
1399360	1400400	That's what we do.
1400400	1401840	Oh, we got an error.
1401840	1402720	What's wrong here?
1402720	1405280	So the thing is, this CPU is not a local variable, right?
1405280	1407200	This CPU belongs to an object.
1407200	1408560	And how do we refer to object?
1408560	1409200	It's very simple.
1409200	1410080	You have to use self, right?
1410080	1411120	That's why you are passing it.
1411120	1414240	So you have to say self dot CPU.
1414240	1416560	And here as well, you have to say self dot RAM.
1416560	1419200	And that's the idea behind passing this self, right?
1419200	1423120	We are passing self so that you can use it to fetch the values.
1423120	1426480	So you can imagine your methods and your data works together.
1426480	1428480	And we have a name for this concept.
1428480	1429840	Again, we'll talk about that name later.
1429840	1430640	It's a surprise.
1430640	1434480	But we are binding our data with every method.
1434480	1438960	So one object will have its own methods and its own variables, right?
1438960	1440080	So they are working together.
1440720	1442800	And now let's run this code and let's see what happens.
1442800	1444560	So the moment you run this code, you can see it says,
1444560	1448480	config is i5-16 and config is raisin-3-8.
1448480	1449600	So that's the idea.
1449600	1451280	That's how you create a variable.
1451280	1453440	So every object will have its own values.
1453440	1454160	That's amazing.
1459120	1461920	In the last video, we have talked about OOPS concept, right?
1461920	1463280	We have talked about objects.
1463280	1464960	We have talked about classes.
1464960	1468080	And then somewhere we have talked about init, right?
1468080	1470400	In this video, we'll focus on two concepts.
1470400	1473360	One is constructor and self.
1473360	1473920	But hold on.
1473920	1476160	We have seen self before, right?
1476160	1478240	But let's try to expand more of it, okay?
1478240	1480960	Because self is something which is very easy to understand.
1480960	1483120	At the same time, it is a bit confusing, okay?
1483120	1484400	So we'll try to get that.
1484400	1486560	And then we also talk about constructor.
1486560	1489520	Now in the last video, we have talked about init, right?
1489520	1491440	Now init is actually a constructor.
1491440	1492880	But why this course constructor?
1492880	1494080	We'll see that here.
1494080	1495440	And why this is so important?
1495440	1497360	So what we'll do is let's remove this thing.
1497360	1499280	And let's see a computer class again.
1499280	1500640	Let's go back to computer class.
1500640	1501600	So this is a class, right?
1501600	1504800	And of course, every class will have an object, right?
1504800	1507760	As we mentioned, we have a concept of a design, right?
1507760	1510240	So this computer class is a design.
1510240	1512400	And then we need to create an object of it.
1512400	1515520	So what I will do is I will say C1 is equal to computer.
1515520	1517840	Now this computer here is an object, right?
1517840	1519200	I mean, this C1 is an object.
1519200	1522080	Or you can say C1 is referring to the object.
1522080	1524320	So what happens, you know, in your system,
1524320	1527600	we have a special memory called as heap memory.
1527600	1531120	Now inside this heap memory, you will get all the objects, right?
1531120	1533120	Example, the moment you say you want an object now,
1533120	1536080	if you remember, we have talked about integers, string,
1536080	1538400	everything is object in Python, right?
1538400	1542640	Now in this scenario, here, this object will take some space
1542640	1544480	in your heap memory.
1544480	1546960	Now, every space will have some address, right?
1546960	1549360	We have talked about ID function, remember?
1549360	1553920	So we can use an ID function here and we can print the value of C1.
1553920	1555520	So we can print the address.
1555520	1557760	So of course, this object is created somewhere
1557760	1559600	and we need to print the address as well.
1559600	1561600	And the way you can print the address is by saying,
1561600	1564640	print, I want to print the address of C1.
1564640	1565440	Let's do that.
1565440	1566720	Oh, we are getting an error.
1566720	1568720	Now, if you remember, we have talked about this stuff.
1568720	1570320	So I'm keeping this class empty, right?
1570320	1571280	We cannot do that.
1571280	1573840	So let's write pass because I have not mentioned anything
1573840	1574960	in the class here.
1574960	1575840	So let's write pass.
1575840	1576800	Let's run this code now.
1577360	1581520	And you can see we got the output as 155 with the number, right?
1581520	1583280	Now, this is an address, okay?
1583280	1585840	So this is the address of that memory.
1585840	1588000	Now, what happens if I create another object?
1588000	1591040	Let's say if I say C2 equal to computer,
1591040	1592640	now we are creating another object, right?
1592640	1594720	So in total, we got two objects.
1594720	1597040	So will it take different space or will it be accommodated
1597040	1597760	in the same place?
1597760	1599600	Of course, we have talked about this before
1599600	1601520	when we talked about integers, allocation.
1601520	1604000	If I run this code, you can see we got different addresses.
1604000	1605360	And again, every time you run this code,
1605360	1606640	you will get different address, right?
1606640	1608160	Because every time you run this code,
1608160	1610000	it will create a new object for you.
1610000	1611680	So this time we got two new objects.
1611680	1614000	Now, if I run this again, we will get two different objects,
1614000	1615120	not the same object again, right?
1615120	1616640	Because this is new execution.
1616640	1619840	So point to remember is every time you create the object,
1619840	1621920	it will take two different spaces.
1621920	1624560	Now, for sure, how much space it will take?
1625120	1628240	Maybe one MB, maybe one KB, maybe five KB.
1628240	1631200	So who will decide and who will allocate the memory?
1631200	1634000	Now, first of all, the size of the object
1634000	1635840	is dependent upon the number of variables we have
1635840	1637360	or the attributes, remember?
1637360	1640000	If this class has five variables of different type,
1640000	1641760	it depends upon how much data you pass,
1641760	1643440	it will change the size of it, okay?
1643440	1645680	So the size of the object is dependent upon
1645680	1647920	the size of the variables and number of variables.
1648560	1651360	But who is responsible to assign that memory?
1651360	1653840	Or who is responsible to calculate the memory?
1653920	1655840	And that's your constructor.
1655840	1658240	Now, this thing here, which is computer brackets,
1658240	1659920	this is your constructor, right?
1659920	1661280	So whenever you write a constructor,
1661280	1663360	it will call the init method for you.
1663360	1665360	Of course, you don't have to call it explicitly,
1665360	1666880	it will be called internally.
1667520	1668960	Now, let me define some variables here.
1668960	1670880	How do we create a variables, right?
1670880	1673760	So how do we define a variable for the object?
1673760	1675600	Now, in this case, if you want to define a variable,
1675600	1678400	we have one choice, which you can define a function,
1678400	1679200	which is init.
1679200	1680560	Again, we have seen that.
1680560	1682240	So this is the init function, right?
1682240	1683840	Now, it uses self, but as of now,
1683840	1686320	we'll not talk about self, we'll continue here.
1686320	1687520	And I will use two variables.
1687520	1688640	Again, we have talked about this,
1688640	1690480	but let me just do it once again.
1690480	1692080	I will say self.h.
1692080	1693440	I want to have two attributes.
1693440	1694400	One is name.
1694400	1697440	I will say name is Navin and age.
1697440	1699040	So let's say age is equal to 28.
1699040	1701760	So we got two things, we got name and we got age.
1701760	1704080	Now, both the object will have the same values, right?
1704080	1705600	So you can imagine we have two objects
1705600	1707360	and both the objects have the same value.
1707920	1709040	If I want to change it,
1709040	1711280	if I want to change the value of one object,
1711280	1713120	the way you can do that is, in fact,
1713120	1716000	instead of printing IDs, I want to change it now
1716000	1718160	because of course, the IDs will print different now.
1718160	1718960	We know that.
1718960	1720400	So we'll say c1.
1720400	1722240	I want to print name of c1
1722240	1724160	and I want to print the name of c2 as well.
1724880	1725760	So what will happen?
1725760	1727760	Will it print the same data or different data?
1727760	1728240	That's a question.
1728240	1730000	So let's run this code and you can see
1730000	1731920	they are printing Navin, of course, right?
1731920	1734160	Because the moment you create the object,
1734160	1735680	both will have the same value
1735680	1738000	because that is what by default you're getting.
1738000	1740480	If you want to assign your own values,
1740560	1741840	you have two choices here.
1741840	1743280	What we can do is, before printing it,
1743280	1744400	we can change the value for c1.
1744400	1747280	We can say c1.name is equal to Rashi.
1747280	1748640	So we are changing the name, right?
1748640	1750400	And now if I run this code,
1750400	1752640	you can see we got Rashi and we got Navin.
1752640	1754080	So of course, c1 is different objects.
1754080	1756160	c2 is different object and we got different names.
1756160	1757840	So that perfectly makes sense.
1757840	1759760	We can change the age of c1.
1759760	1762080	We can say c1.age is listed 12.
1762080	1764160	We've got Rashi with age 12.
1764160	1766080	And of course, we are not printing age here
1766080	1766960	but we can do that.
1766960	1769440	So we can change the value of one object
1769440	1770240	from different objects.
1770320	1772160	But of course, there are two different entities.
1772160	1774080	So remember this, we got two different objects
1774080	1776400	and both the objects will have different variables.
1776400	1777600	Okay, you can assign the values there.
1777600	1779120	You can change it your wish.
1779120	1780400	Now, question arise.
1780400	1782560	Why do we need this self?
1782560	1784400	So what I will do is just to explain that,
1784400	1786080	let me take one more method here.
1786080	1787440	We'll say def update.
1787440	1789840	Okay, so I'm changing the value of something.
1789840	1790880	And the moment I say update,
1790880	1792720	I want to change age.
1792720	1795840	I will assign new age and we'll say age is let's say 30.
1796720	1798400	So we are changing the age now, right?
1798480	1801120	So we got a method which will change the age totally.
1801680	1803920	Now, I want to call update.
1803920	1806000	Now, how do you call update with the help of class name
1806000	1807840	or with the help of object name?
1808560	1809760	Let's try with objects.
1809760	1811760	I will say c1.update.
1812400	1814000	Now see, we have two different objects, right?
1814000	1815520	So what is program execution, right?
1815520	1816880	So execution will start from here.
1817520	1819600	You got the object, you got the object,
1819600	1821520	you are changing the names and everything is fine.
1822080	1824480	The moment you say c1.update,
1824480	1826480	your pointer, which is your focus,
1826480	1829520	will move towards this update function of update method.
1829520	1830880	So it is executing it, right?
1831520	1833200	Update will say, okay, I'm getting called.
1833200	1834560	I belong to a class computer.
1834560	1835840	My job is to do something.
1835840	1838160	My job is to change the value of age.
1838160	1839680	But hold on, we got two objects.
1840320	1842000	Which value you want to change, right?
1842000	1843680	Because we are calling update.
1843680	1846560	And we are not mentioning which object I'm talking about
1846560	1848400	because when you call this update,
1848400	1850320	we have not mentioned is it c1 or c2.
1850320	1851600	We have mentioned that by calling it.
1851600	1853600	So we are saying c1.update.
1853600	1856080	But we are not passing anything in the bracket.
1856080	1858320	So when you're calling it, when you're calling update,
1858320	1862000	how your pointer will know which object I'm talking about.
1862000	1864960	Is it the c1 age or is it the c2 age?
1864960	1867520	And that's where you need to use self.
1867520	1869280	So this self is a pointer.
1869280	1872320	Or you can say self is directing to c1 or c2.
1872320	1873520	So we have two objects.
1873520	1875840	This self will direct either on c1 or c2
1875840	1877760	based on what you're calling.
1877760	1879360	So if you're saying c1.update,
1879360	1881120	then in the bracket, it is passing c1.
1881120	1883680	So self will be assigned to c1, okay?
1883680	1885920	So that's the importance of that self.
1885920	1888480	It is very important because it is referring to the object.
1888480	1889840	If you have 10 objects,
1889840	1892080	and if you want to refer to one object, you can use self.
1892080	1894400	So it is the current instance you can say.
1894400	1895440	Even if you have 10 objects,
1895440	1898240	at one point you're working with one object, that is self.
1899040	1900400	I hope that makes sense.
1900400	1901280	So that is self, right?
1901280	1904240	So we have talked about constructor and self here.
1904240	1906000	Let me show you one more thing.
1906000	1908400	What if I want to compare two objects here, okay?
1908400	1909200	So I want to compare.
1909200	1912240	Let's say we have c1, c2, and both have same names, right?
1912240	1914640	So they have same name and they have same age.
1914640	1916480	But let's say I want to compare the age.
1916480	1919040	So I will say if c1 is equal to equal to c2.
1919040	1921440	So I want to compare two people based on their age.
1921440	1923760	If their age is same, I want to print their same.
1923760	1928480	So I will say c1 is equal to equal to c2, print, they are the same.
1928480	1929120	So let's do that.
1929120	1931120	So I want to check if both the objects are same,
1931120	1932640	then I will print their same.
1932640	1935520	But then I don't want to compare the object address, right?
1935520	1937600	I want to compare their values.
1937600	1938800	I want to compare their age.
1938800	1940160	Name doesn't matter if name is different.
1940160	1941760	What is what should be same is age.
1942320	1944800	Now in this case, we cannot simply say c1 equal to c2
1944800	1948160	because we don't know, your Python don't know how to compare.
1948160	1953040	So in this case, what you will do is, you will use a separate function to do that.
1953040	1956000	I will say, hey, I want to compare c1 with c2.
1956000	1960080	So I will say c1, compare, and you can pass c2
1960080	1961040	because we are comparing it.
1961040	1963680	Well, again, this compare is not an inbuilt function.
1963680	1966320	So if I click on this, you can see it says,
1966320	1968560	cannot find declaration to go to something.
1968560	1972720	The thing is, compare is not an inbuilt method we have.
1972720	1975280	So in order to work with compare, you have to define your function.
1975280	1977120	You have to say, compare.
1977120	1980080	And in this compare, of course, you have to pass self.
1980080	1984320	And then you have to also pass one more object, which is of c2.
1984320	1984880	Right?
1984880	1986160	So we are comparing two objects.
1986160	1986320	Right?
1986320	1987600	So we have to pass self.
1987600	1988960	So what is self here?
1988960	1993360	So the c1 becomes self and c2 becomes c2.
1993360	1994400	Again, you can change in the name.
1994400	1995120	You see your choice, right?
1995120	1997360	You can say other, right?
1997440	1998960	So you're comparing self with other.
1998960	2001520	So c1 becomes self and c2 becomes other.
2001520	2004320	Now, why c1 becomes self is because c1 is calling it.
2004320	2007120	So c1 is comparing itself with c2.
2007120	2007920	You can reverse it.
2007920	2010640	You can say c2.compare c1.
2010640	2014080	In that case, c2 becomes self and c1 becomes other.
2014080	2014560	Right?
2014560	2017440	And now once you have this self and other, you can compare.
2017440	2025120	If self.h is equal to equal to other.h, you will return true.
2026080	2029200	Else return false.
2029200	2030640	In fact, you could have done that in one line.
2030640	2032720	But just to make it look good, I'm doing this.
2032720	2034240	And now you can compare it.
2034240	2034640	Right?
2034640	2038160	So they don't have same age because we are changing it after update.
2038160	2039680	Let's remove the update part here.
2039680	2040880	They have the same age.
2040880	2041120	Right?
2041120	2043920	Let's run this demo and you can see, oh, we got an error.
2043920	2046000	We forgot to put a code in there.
2046000	2046480	My bad.
2047120	2048240	Let's run this code.
2048240	2050400	And so you can see just printing, they are same.
2050400	2051040	So they are same.
2051040	2051520	Right?
2051520	2053360	Now what if they have different age?
2053360	2057200	So what I will do is once I got c1, I will change this age of c1.
2057200	2059280	I will say age of c1 is 30.
2059280	2060880	Anyway, we are not using update here.
2060880	2062240	And we can say run demo.
2062240	2063520	And you can see it is not printing.
2063520	2064480	They are same.
2064480	2065840	We should print the as well.
2065840	2067520	So that we'll see, is it different?
2067520	2068160	Let's print.
2068800	2070160	They are different.
2071040	2072640	And let's run this code.
2072640	2074240	In case of that, we got they are different.
2074240	2077280	Now, since that age is different, we are getting that different.
2077280	2078320	See, names are same.
2078320	2079920	What is different is age.
2079920	2083360	So we can compare two objects by defining our own function,
2083360	2085840	which is compare in this case or method in this case.
2085840	2088080	But remember this thing, compare takes two parameters,
2088080	2092080	the first one who is calling it, and second one whom to compare.
2092080	2092240	Right?
2092240	2095120	So here in this case, we are saying c1.compare with c2.
2095120	2097280	So c1 becomes self, c2 becomes other.
2097280	2098240	This is very important.
2098240	2099840	I know it is a bit confusing at the start,
2099840	2102560	but the moment you start working on it, it becomes very easy.
2102720	2110480	Now, we know how to work with class and object, right?
2110480	2113920	And we have also seen how can you create a variable inside an object.
2113920	2114560	Of course, right?
2114560	2116640	Every object should know something.
2116640	2119280	But when it comes to variable, in oops,
2119280	2121280	we have two different types of variable.
2121280	2124320	The first one is an instance variable,
2124320	2126800	and the second one is a class variable,
2126800	2129120	or you can call them as static variables.
2129120	2130560	What is the difference between them?
2130560	2131360	Now, think about this.
2131360	2133760	Let me just remove this code, whatever we have done till now.
2133760	2135280	So let me just clean this up.
2135280	2135760	Okay?
2135760	2137920	So we will start from a plain slate.
2137920	2140400	So here, let's go with another very example.
2140400	2142000	Let's take a class call us car.
2142000	2142320	Okay?
2142320	2143600	We all love cars, right?
2143600	2145200	So let's say we have a class car,
2145200	2148320	and of course, every car will have different variables, right?
2148320	2149840	Of course, you can mention the company name,
2149840	2151920	you can mention the type of engineer you're working with,
2151920	2154000	and the mileage what it gives you.
2154000	2155280	So we have different variables.
2155280	2155440	Okay?
2155440	2158640	So what I will do is, if I want to use those variables here,
2158720	2161520	we need to use a function, which is init.
2161520	2163280	So you will say init function,
2163280	2165760	and in this, you can define those variables, right?
2165760	2167520	I can say self dot mileage,
2167520	2169840	and I will say mileage is, let's say, 10.
2169840	2171360	And then I will say the company.
2171360	2174160	So company would be, let's say, bmw.
2174160	2175920	Any random company doesn't matter.
2175920	2177600	So we have these two values, right?
2177600	2180480	Now, these two variables are called as instance variables.
2180480	2183120	So when you talk about mileage and comm, these are instance.
2183120	2185040	Now, why is our instance is because,
2185040	2187760	as your car changes, as the object changes,
2187760	2189200	this value also change.
2189200	2191040	By default, the value is 10 and bmw,
2191040	2192480	but you can change it, right?
2192480	2195200	Example, we have done that before just to give you a glimpse.
2195200	2198080	I will say the first one is c1, and this is car.
2198080	2199040	That's my first object.
2199040	2201200	I got c2, which is, again, a car.
2201200	2202640	That is, we got c1, c2.
2202640	2204320	Now, we got two different objects,
2204320	2206640	and both the object will have different variables, right?
2206640	2208560	Different area for the variables.
2208560	2212000	And now, if I print the value, so I will say c.com,
2212000	2215280	and I also want to print c1.milit.
2215280	2216400	So I want to print both.
2216720	2217840	Both the variables.
2217840	2221280	So you can see we got c1.com, c1.milit, c2.com, c2.milit.
2221280	2221840	That's perfect.
2221840	2223120	And now, if I run this code, of course,
2223120	2225360	it will print same values because they are same.
2225360	2226320	But can we change it?
2226320	2226880	Yes, we can.
2226880	2231200	So I will say, if I change for c1, so let's say c1.milit.
2231200	2234160	So let's say c1.milit changes from 10 to, let's say, 8.
2234160	2235840	This is what happens, you know, with some cars.
2235840	2236640	And let's run this code.
2236640	2238080	You can see the value is changing now.
2238080	2239680	So, of course, both the objects are different,
2239680	2241040	and they will have different values.
2241040	2244000	But what if I want to create a variable,
2244000	2246160	which is common for all the objects?
2246160	2248560	Of course, these variables, which are instance variable,
2248560	2250960	they are different for different objects, right?
2250960	2254080	If you change one object, it will not affect other objects.
2254080	2256480	What if you want to have a variable,
2256480	2259200	which will change, it will affect all other objects?
2259200	2262960	Example, the number of wheels in a car is 4, right?
2262960	2264640	By default, it is 4, right?
2264640	2266960	But what if, in future, we got a new concept?
2266960	2268400	And they're saying, hey, now, this time,
2268400	2270800	we will have five tires, or five wheels.
2270800	2273360	I don't know why we'll have five wheels, but let's imagine.
2273360	2274720	In this case, what you will do is,
2274720	2277440	you will define a variable outside in it, okay?
2277440	2281200	Because if you create, or if you define the variable inside in it,
2281200	2282960	it becomes an instance variable.
2282960	2285360	If you define a variable outside in it,
2285360	2288560	and inside a class, of course, it becomes a class variable.
2288560	2290320	Let's say, we'll say wheels.
2290320	2293680	So, let's say wheels are by default 4, of course, will be 4, right?
2293680	2297520	And if I print the wheels as well, now, how do you print wheels?
2297520	2299120	The way you can print is very simple.
2299120	2303680	You can say C1.wheels, and here as well, I'll say C2.wheels.
2303680	2306160	And let's run this code now, and you can see we got the output.
2306160	2307280	We got 4 and 4.
2307280	2312000	So, if you want to access wheels, you can use C1.wheels and C2.wheels.
2312000	2314800	So, instead of using the object name, we can also use class name.
2314800	2316720	Because see, if you talk about mill and com,
2316720	2318560	it is specific to the object, right?
2318560	2320400	But that's not the case with wheels.
2320400	2322080	Wheels is common to all the objects.
2322080	2324320	So, every object can share the same value of it.
2324320	2328080	So, we can use object name, or we can use class name, both works.
2328080	2329280	So, you're getting value 4, right?
2329280	2331120	What if you want to change the value of it?
2331120	2333200	If you want to change the value, you can come here,
2333280	2334800	and you can change the value.
2334800	2335520	See, what happens?
2335520	2337600	You know, in your memory, you have different namespace.
2337600	2338480	Now, what is namespace?
2338480	2340880	The place where you create an object or the variables,
2340880	2341920	there was namespace.
2341920	2343360	So, we have two types of namespace.
2343360	2347120	One is class namespace, where you will store all the class variables,
2347120	2349280	and then we have an instance namespace,
2349280	2351360	where you will create all the instance variable.
2351360	2354640	So, these variables, which is mill and com, they are instance, right?
2354640	2356480	So, they will belong to instance namespace.
2356480	2359280	This wheel belongs to class namespace, right?
2359280	2361920	So, if you want to work with wheels, if you want to modify it,
2361920	2362880	you have to use a class name.
2362880	2365760	You have to say car.wheels, and you can assign the value to 5.
2365760	2367280	Now, the moment you change the value for wheels,
2367280	2369120	it will affect all the objects, right?
2369120	2370160	Because they are shared.
2370160	2372400	So, this wheel is shared between all the objects,
2372400	2375200	and neither on this code, you can see the output is 5 and 5.
2375200	2376480	So, that's your class variable.
2376480	2378960	So, the point to remember is we have two types of variables,
2378960	2381200	instance variables, and class variables.
2381200	2383600	Or, in fact, class variables are also called as steady variables.
2388480	2390080	Now, till this point, we have talked about
2390080	2391600	different types of variables, right?
2391600	2394640	We have seen instance variable and a class variable.
2394640	2396640	We can call them as steady variables, right?
2396640	2398880	Now, in this video, we'll talk about methods
2398880	2400080	and different types of methods.
2400080	2401200	Now, we have seen that, right?
2401200	2403680	When you talk about objects, object will have two things, right?
2403680	2405840	The first one it will have is variables,
2405840	2407280	and second one is methods.
2407280	2410880	Now, variable to store data and methods for the behavior, right?
2410880	2412880	So, if you want to perform some operation,
2412880	2414560	that's where methods comes into picture.
2414560	2417200	As human as well, we know something and we do something, right?
2417200	2419200	So, those are your variables and methods, right?
2419200	2420640	Now, here, when you talk about methods,
2420640	2422720	we have different types of methods.
2422720	2424560	Now, basically, we have three types of methods.
2424560	2426800	The first one is instance method.
2426800	2429440	The second one we have is class method,
2429440	2430960	and then we have static method.
2430960	2431680	Now, hold on.
2431680	2433680	When you talk about variables, we only have two, right?
2433680	2437040	Because class and static behave the same way in variables.
2437040	2439040	But, hold on. In variables, we have the same thing, right?
2439040	2442160	In variables, we have class variables and static variables,
2442160	2443360	which are same.
2443360	2444720	That's not the case with methods, okay?
2444720	2448880	So, class methods and static methods are different in methods.
2448880	2449920	Okay, so, let's get started.
2449920	2452160	So, understand this concept, we'll take an example.
2452160	2455200	So, let's take a class here and we'll name this class as student.
2455200	2457760	So, in this student class, we'll be having multiple variables, right?
2457760	2459200	Now, of course, when you talk about student,
2459200	2462160	we have names, we have roll number, and then we have marks.
2462160	2464880	At this point, let me only focus on marks, okay?
2464880	2467040	So, what I will do is let me create a function,
2467040	2468080	which is your init function,
2468080	2469600	because I want to declare some variables.
2469600	2471040	So, it says self.
2471040	2472800	Now, I want to go for three variables here.
2472800	2474080	One is marks one,
2474080	2476800	and marks one, I want to pass this value from the user, okay?
2476800	2478880	Of course, you can define your own values here,
2478880	2481200	but I want to pass the value when I create the object.
2481200	2483600	And the way you do that is by saying self comma,
2483600	2485200	you will pass m1, m2, m3.
2485200	2486640	I want to pass three variables.
2486640	2488800	And m1 value will be assigned to the object
2488800	2491040	by saying self.m1 equal to m1.
2491040	2492640	I will go to same thing for m2.
2492640	2495200	I will say m2 and the same thing for m3, right?
2495200	2496960	So, we got m1, m2, and m3.
2496960	2498080	Now, we got three variables.
2498080	2499680	I want to create certain objects here.
2499680	2501280	Okay, let's create objects for this.
2501280	2502320	I will go back here.
2502320	2503360	So, let's create the object here.
2503360	2505200	I will say s1 is equal to,
2505200	2507360	and as usual, we can create multiple objects.
2507360	2509680	But time it will go for s1 equal to,
2509680	2511040	I will say student.
2511040	2512160	That's my first object.
2512160	2513200	And let me get one more object.
2513200	2515680	We'll say s2 equal to student.
2515680	2517440	So, we basically, we got two objects here.
2517440	2518880	One is s1 and s2.
2518880	2520880	I also want to pass a value to it, right?
2520880	2522000	Because we are not passing it.
2522000	2523680	So, let me pass any value, a random value.
2523680	2525520	I'm not actually saying what I'm typing here,
2525520	2527200	but then we got three values there.
2527200	2529280	And here as well, I will go for any random value.
2529280	2531520	That doesn't make any sense to see that.
2531520	2532560	So, we got these values, right?
2532560	2535040	So, first student got 34, 67, and 32.
2535040	2537040	Second student got 87, 32, and 12.
2537040	2538240	Now, what I'll do is, of course,
2538240	2540400	these variables here, m1, m2, and m3,
2540400	2541760	those are instance variables, right?
2541760	2543200	We have talked about that.
2543200	2545520	At this point, we have not created any methods.
2545520	2546320	Let me just do that.
2546320	2547520	In fact, before going for methods,
2547520	2550400	let me also create a variable, a static variable this time.
2550400	2552720	And the way you create a static or a class variable
2552720	2554720	just by defining or declaring the variable
2554720	2556880	outside the constructor, right?
2556880	2559600	So, here, I will say, I have a variable,
2559600	2561520	and we'll name this variable as school.
2561520	2563520	Because, of course, a student belongs to a school,
2563520	2564400	right, or a college.
2564400	2566720	At this point, all the students belongs to the same school,
2566720	2567520	which is the disco.
2567520	2569280	Imagine, if we have the disco university,
2569280	2570560	we'll be having a school.
2570560	2572240	So, we got the school name as well, right?
2572240	2574560	So, you can print those values by simply saying,
2574560	2576160	in fact, you can print those values here as well.
2576160	2579200	You can say, s1.m1, and x2.m1, we can do that.
2579200	2581200	What I am concerned about here is,
2581200	2583440	I want to know the average of marks, okay?
2583440	2584800	So, I've got these three variables, right?
2584800	2586160	I want to performance and operation.
2586160	2587280	How do you find the average, right?
2587280	2589920	So, the logic of average you can define by yourself,
2589920	2591840	you know, everyone has their own way of doing it.
2591840	2593360	I will be doing a very simple calculation.
2593360	2595280	So, let me create a method called as def,
2595280	2596720	method called average.
2596720	2598400	So, when I say object.average,
2598400	2599760	it will give me average marks, okay?
2599760	2601280	So, I want to return the average marks.
2601280	2602720	And the way you do that by saying return,
2602720	2603840	you want to return the value.
2603840	2606480	And here, you will simply say m1,
2606480	2611200	or not just m1, you have to say self.m1 plus self.m3.
2611200	2612720	So, we have to divide this number by three,
2612720	2614080	that's how you find the average, right?
2614080	2615040	And we know the stuff, right?
2615040	2616720	That's how you find the average of multiple numbers.
2616720	2618640	So, we got the average and we are returning the value.
2618640	2620640	Okay, so now this, if you focus on this average,
2620640	2622640	this is an instance method.
2622640	2624000	How do you know that's an instance method
2624000	2625280	because we are passing self.
2625280	2626320	Now, when you say self,
2626320	2628560	it means it belongs to a particular object, right?
2628560	2630080	Of course, we are defining that in a class,
2630080	2631600	but it works with the object.
2631600	2632880	And that's why we are passing self.
2632880	2634320	So, if you want to call average,
2634320	2636160	you have to say s1.average,
2636160	2638080	or you have to say s2.average,
2638080	2639520	because we are passing self.
2639520	2641680	We cannot simply say student.average,
2641680	2643280	because we are not using object there.
2643280	2646320	But in this case, we have to say s1.avg.
2646320	2646960	That's how you do it.
2646960	2648880	So, I have to say s1.avg.
2648880	2650000	It will give you the values.
2650000	2651040	I will print the value here.
2651040	2652560	I will say print the average here.
2652560	2654080	So, let's run this code and you can see it works.
2654080	2656000	We got the average of our student.
2656000	2657520	You can do the same thing for second student.
2657520	2659600	You can stop saying s1.avg.
2659600	2661200	You can say s2.avg.
2661200	2662160	And if you run this code,
2662160	2664240	you can see we got the average for second student as well.
2664240	2666560	And they almost say, I don't know why.
2666560	2667840	Okay, so after changing value,
2667840	2669040	we got different average, you know?
2669040	2670720	So, this was just for coincidence, you know?
2670720	2671760	I have given some values
2671760	2673600	and then they were giving the same average, right?
2673600	2675440	So, yeah, so you got different average for s1
2675440	2676560	and different average for s2.
2676560	2677360	So, that works.
2677360	2678160	Now, what we are going to do is,
2678160	2679040	so this method here,
2679040	2680960	this average is an instance method
2680960	2682240	because it works with the object.
2682240	2683520	Now, in instance itself,
2683520	2685200	we have two different types, okay?
2685200	2687200	The first type of instance which we use
2687200	2688640	is called as accessors.
2688640	2690800	And the second type we use is mutators.
2690800	2692880	So, we have accessors and mutators.
2692880	2694080	Now, what is accessors?
2694080	2695840	So, if you are only fetching the value,
2695840	2697600	see ultimately, when you talk about this method,
2697600	2700000	they are only responsible to work with variables, right?
2700000	2701840	Which is your instance variables.
2701840	2704640	So, if you want to just fetch the value of the instance variable,
2704640	2706400	we will be using accessors.
2706400	2707840	If you want to modify the value,
2707840	2709360	you will use mutators.
2709360	2710560	So, the way you do that example,
2710560	2712720	but if you want to fetch the value of m1.
2712720	2714640	So, if you want to know the value for m1,
2714640	2715440	you can fetch directly,
2715440	2717360	you can say print s1.m1,
2717360	2718960	you will get the value like this.
2718960	2720880	Or, instead of using the variables,
2720880	2722320	we should actually use methods.
2722320	2723440	So, what we'll do here is,
2723440	2726960	we'll say def and we'll define the function as get m1.
2726960	2729600	So, we'll say get m1 and which m1 you want.
2729600	2730560	So, you will say return,
2730560	2733200	I want to return the value for self.m1.
2733200	2733840	This is how you do it.
2733840	2735040	So, if you want the value for m1,
2735040	2737280	you will say get m1 and you've got the value.
2737280	2740080	Normally, it's not compulsion to have that get keyword there.
2740080	2741760	You can also say m1, that's fine.
2741760	2743360	But, when you write a code conventionally,
2743360	2744960	you simply specify get there.
2744960	2746400	So, whether you say get methods
2746400	2748000	or in fact, to set the value,
2748000	2748960	we use set methods.
2748960	2751040	Example, if you want to set the value for m1,
2751040	2753280	you will say set m1.
2753280	2755360	Of course, we are passing that from a constructor.
2755360	2756880	So, we can say set m1
2756880	2757920	and you can pass some values here.
2757920	2759120	I would pass a value f.
2759120	2760000	I will say a value.
2760000	2762000	And this value will be assigned to m1.
2762000	2765040	So, we'll say self.m1 is equal to value.
2765040	2766880	So, you can use constructor to pass the value
2766880	2768480	or we can use setters, right?
2768480	2771040	So, we have get methods and we have set methods.
2771040	2771920	Now, for different variables,
2771920	2774240	we'll be having different get and set methods, right?
2774240	2775360	So, if you have three variables,
2775360	2778000	you might be using three get methods and three set methods.
2778000	2780720	And that's why they're called as getters and setters, right?
2780720	2783200	So, getters get the value, setters set the value.
2783200	2784640	Getters only fetch the value.
2784640	2785600	It will not change the value.
2785600	2787120	That's why we say accessors.
2787120	2788320	Setters, they change the value
2788320	2789760	and that's why we say mutators.
2789760	2790560	So, this makes sense.
2790560	2792320	Whether you can call this method, right?
2792320	2793200	But, this works.
2793200	2794880	Now, once you talked about instance,
2794880	2797200	the second type we have is a class method.
2797200	2798480	Now, why we use class method?
2798480	2800720	See, if you talk about these variables, m1, m2, m3,
2800720	2802880	those are your instance variable, right?
2802880	2805760	An instance variable can be used with instance methods.
2805760	2806560	What about this one?
2806560	2807440	This is cool, right?
2807440	2809600	Now, school is basically your class variable.
2809600	2811040	And if you want to work with class variable,
2811040	2812800	you need to use a class method.
2812800	2813680	And the way you do that,
2813680	2815520	let's say I want to know the info of a student.
2815520	2817120	So, I will set def info.
2817120	2819200	Info will print the name of the school, okay?
2819200	2820800	So, let's say if you are studying for Therisco,
2820800	2822240	it will print Therisco.
2822240	2824560	And of course, all the students belong to same school, right?
2824560	2826480	If you change the school name for one student,
2826480	2827440	it will affect all the students.
2827440	2830400	For example, this channel name earlier was NavinSkills, right?
2830400	2831840	And we have changed it to Therisco.
2831840	2834800	So, if the name changes for one subscriber,
2834800	2836320	it will affect all the subscribers, right?
2836320	2837440	And that's what is happening here.
2837440	2840000	So, if I want to print info and that to a school name,
2840000	2841360	I don't want marks here.
2841360	2843280	Of course, we don't want to work with self.
2843280	2845040	We want to work with class, right?
2845040	2846880	So, if you are working with instance,
2846880	2848560	you will use a self keyword.
2848560	2850320	If you are working with a class variable,
2850320	2852960	you have to use class, CLS, okay?
2852960	2855040	It should be CLS, it should not be something else.
2855040	2857280	Now, once you got that, you can simply print the value.
2857280	2860160	So, you can say print or you can return the value, your choice.
2860160	2863200	We can say return CLS.school.
2863200	2863760	That's how you do it.
2863760	2865200	So, you have to say CLS.school.
2865200	2867200	So, whenever you want to work with class variable,
2867200	2869120	you have to say CLS.school.
2869120	2871120	Okay, but then how do you call info?
2871120	2871840	It's very simple.
2871840	2875120	You will say print S1.info.
2875120	2877440	We can do that, but there's only one problem.
2877440	2879120	Info should work with all the objects, right?
2879120	2880640	It's not specific to one object.
2880640	2884160	So, instead of using S1, we can use a student.info.
2884160	2885040	Now, this should work.
2885040	2885760	Let's try.
2885760	2886880	I will say run.
2886880	2888080	Oh, we got an error.
2888080	2891360	It says, inform is seeing one required potential argument,
2891360	2893520	which is a position argument, which is CLS.
2893520	2895360	Oh, we have to pass CLS.
2895360	2895920	That's weird.
2895920	2897280	I don't want to pass CLS, right?
2897280	2899120	In fact, we are not even doing that for average.
2899120	2900400	We are not passing S1.
2900400	2902320	Here also, I don't want to pass thing.
2902320	2903520	Normally, what happens, you know,
2903520	2905600	if you want to create a class method,
2905600	2909120	we need to use a special symbol or special way of doing that.
2909120	2911440	And we can use something called decorators.
2911440	2912800	So, we have to say add rate.
2912800	2914800	And you have to mention this as a class method.
2914800	2916880	Again, we'll talk about decorators later in detail.
2916880	2919680	But time being, we got a class method as decorator.
2919680	2922560	So, if you want to use info as a class method,
2922560	2924560	you have to say at class method, okay?
2924560	2925360	That's how you define it.
2925360	2927200	So, let's run this code now and it works.
2927200	2928720	You can see that we got the disco there.
2928720	2929760	Quite simple, right?
2929760	2931440	So, now we know about instance method
2931440	2933200	because it works with instance variables.
2933200	2934640	Now, we know about class method
2934640	2936320	because it works with class variables.
2936320	2937600	How about static methods?
2937600	2938480	See, think about this.
2938480	2940080	Let's say if you want any method, okay?
2940080	2941680	It doesn't matter what method we want here.
2941680	2945840	If you want a method which has nothing to do with instance variable,
2945840	2948560	which has nothing to do with the class variables,
2948560	2950000	we want to do something extra, okay?
2950000	2952800	So, something different which is not concerned with the variables.
2952800	2955760	At that time, you will be using a static method
2955760	2957920	because we are not concerned about instance variable.
2957920	2959840	We are not concerned about class variables.
2959840	2963520	Example, let's say I want to print the info about this class, okay?
2963520	2964960	Not about student, but the class.
2964960	2967840	So, I will say def about, you know, in fact,
2967840	2969600	instead of saying info for class,
2969680	2971120	I would say get school name.
2971120	2972320	That will make more sense.
2972320	2975360	So, I'm changing the name from info to get school for class method, okay?
2975360	2976080	Not for this.
2976080	2977360	And let me also change from here.
2977360	2978400	So, we'll say get school.
2978400	2979760	Here, I will define a function
2979760	2981200	and the function name will be info
2981200	2983920	because when I say info, I want to know the class name, okay?
2983920	2986160	So, this is not related to the object.
2986160	2988560	This is not related to class as I will keep it blank, okay?
2988560	2991440	So, if you don't want to relate this to a class, keep it blank.
2991440	2994480	If you don't want to relate this to an object, keep it blank.
2994480	2995680	No self, no class, okay?
2995680	2996400	Static method.
2996400	2997360	And this will return.
2997360	2998080	This will print.
2998080	2999360	In fact, not return, this will print.
2999360	3000480	We can do whatever you want.
3000480	3004000	So, we can say this is student class.
3004000	3004720	You can do that, right?
3004720	3006320	So, we are printing this is student class
3006320	3008720	and in ABC module.
3008720	3009040	That's it.
3009040	3010080	You can print whatever you want.
3010080	3012480	As I mentioned, important is this method
3012480	3014480	is nothing to do with the class variables
3014480	3015680	and the instance variable.
3015680	3016960	Now, where it will be useful.
3016960	3019520	So, let's say if you want to perform any operation
3019520	3021120	which has something to do with the other objects
3021120	3023200	or the class objects, we can use static methods here.
3023200	3024480	Or if you want to perform some operation
3024480	3026400	like finding a factorial for number, right?
3026400	3028000	Because the factorial has nothing to do
3028000	3029680	with the class variables or instance variable.
3029680	3030800	Maybe you're passing a value.
3030800	3032880	You just want to know what's the factor of the number.
3032880	3034240	You can use static methods there.
3034240	3036240	Now, since we are using a static method,
3036240	3039120	we need to use a special decorator here as well.
3039120	3040880	So, we have to say any guess.
3040880	3042480	We will be using static method.
3042480	3044640	So, for class method, we have to say class method
3044640	3046880	and for static method, we have to use static method, okay?
3046880	3048160	And then you can call it.
3048160	3050480	So, you can say, you have to use a class name.
3050480	3052640	So, you will say student dot info, right?
3052640	3053280	So, this is static.
3053280	3054400	So, you don't have to pass anything.
3054400	3055920	Not even class and not even object.
3055920	3057600	Let's run this code and it works.
3057600	3058080	Okay?
3058080	3060000	So, basically, we have different types of methods.
3060000	3062400	We have instance method which works with instance variable.
3062400	3065920	Class method works with class variable and static works with nothing.
3065920	3068320	It has, if you want to do something extra with a class,
3068320	3070640	nothing to do with class variables or instance variables,
3070640	3071360	go with static.
3076160	3078800	Now, to this point, we have talked about different types of variables
3078800	3081200	and we have talked about different types of methods, right?
3081200	3084320	So, we can write variable and methods instead of class, right?
3084320	3087040	So, a class will have variables and methods.
3087040	3090640	The question is, can we have a class inside a class?
3090640	3091760	That sounds weird, right?
3091760	3093920	Why would anyone want to have a class inside a class?
3093920	3095120	So, let's try to understand that.
3095120	3098720	So, let's say I have a class here and this class name is student,
3098720	3100800	as usual, the way we have done earlier.
3100800	3103520	And when we talk about students, we have different types of variables, right?
3103520	3105040	Let me define that function first.
3105040	3107600	And the variables which I want here is self.
3107600	3108880	First, I want a name.
3108880	3110800	Of course, in the last example, we have taken marks,
3110800	3112480	but here, let's take something different.
3112480	3115920	I would take a name of a person and that will be coming from a user,
3115920	3117760	of course, or from when you create an object.
3117760	3118480	We'll say name.
3118480	3121680	The second thing I want is roll number and I want these two details.
3121680	3125200	And then I will assign name here and I will say self.roll number.
3125200	3126560	Now, we have used to it, right?
3126560	3128560	So, I would say roll number, right?
3128560	3131760	Now, once we got these two variables, what I want is I want to print them.
3131760	3135200	The way you print these values is by defining some functions, right?
3135200	3136800	Of course, you can do that directly.
3136800	3138320	Example, if I create an object here.
3138320	3141520	So, let's say the object is S1 and I will say student.
3141520	3143840	And when you create this object, you have to pass values as well, right?
3143840	3147520	The first one I want is navin and roll number is let's say 2.
3147520	3150960	The second object we want here is S2 and we'll say student,
3150960	3152560	in which we'll be having two things.
3152560	3156880	Of course, I would say this is Jenny and the roll number is let's say 3.
3156880	3159920	So, I have navin and we have Jenny here, we got 2 and 3.
3159920	3161600	Okay, so let's say I want to print.
3161600	3162960	I want to print S1.
3162960	3165520	So, I want to print all the details about S1, okay?
3165520	3167360	I want to print the name and roll number.
3167360	3173120	So, the way you do that is by saying S1.name and we can say S1.roll number.
3173200	3174800	So, this is how you can print the values, right?
3174800	3176400	Let me run this code and you can say it works.
3176400	3178240	We got the details about S1.
3178240	3181680	Now, what I want to do is I don't want to, see, this doesn't look good, right?
3181680	3184400	What you should be saying is you should say S1.show.
3184400	3187920	So, when I say S1.show, it should print all the details about S1.
3187920	3190880	Maybe it has roll number, name or different variables, right?
3190880	3193680	So, of course, we need to define that function or method here.
3193680	3195120	So, we'll set F, show.
3195120	3200080	So, this will print self.name and we'll print self.roll number.
3200080	3201520	So, we are printing these two data, right?
3201520	3204000	It should work. Let's run this code and you can see we got the same data.
3204000	3206720	Now, let's say student also has a laptop.
3206720	3207280	Of course, right?
3207280	3209920	When you say you are doing IT, in fact, we have done that, right?
3209920	3211520	So, you are a student of Therisco.
3211520	3214800	You will be using a laptop to run your code or the extra doesn't matter.
3214800	3216720	And let's say we want laptop here.
3216720	3219200	So, of course, I want to know which laptop we are using.
3219200	3220400	So, I want to know your config.
3220400	3224560	Now, in that case, I will also ask a user, hey, tell me which laptop you are using.
3224560	3227680	The problem is when you talk about laptop, there are different things important, right?
3227680	3228880	It's not just about brand.
3228880	3231120	You will not simply say, hey, I have HP laptop.
3231120	3232320	I have a Lenovo laptop.
3232320	3235200	You will also mention the configuration, maybe CPU and RAM.
3235200	3236080	That's very important.
3236080	3239200	Maybe any i5 CPU with, let's say, 8GB RAM is enough.
3239200	3240560	So, I want to know your config.
3240560	3241360	So, what you will do?
3241360	3243040	Will you pass three variables?
3243040	3247760	Like, you will pass a brand, HP, and then you will also pass the CPU,
3247760	3252160	which you are using, let's say i5, or you will also pass, let's say, RAM of 8GB.
3252160	3253200	Yes, you can do that, okay?
3253200	3254960	So, I have to accept these variables here.
3254960	3256640	I have to accept that here, right?
3256640	3257680	And we can do that.
3257680	3259920	The other option which we have is different, okay?
3259920	3263600	So, the other option which we can do here is, we can create a class, okay?
3263600	3269200	We can create a supply class as laptop, or instead of creating a class outside the student,
3269200	3271040	we can also create a laptop inside student.
3271040	3273760	So, a laptop will be only used by student, and in this case.
3273760	3275760	So, I will say a class and I will say laptop.
3275760	3280160	So, we are creating a laptop class inside a student, so that we can get that group, okay?
3280160	3284240	So, we have to also set depth here, and we have to say init, right?
3284240	3285520	And then let's create a variable.
3285520	3289200	So, the first variable we need here is brand, and let's say the brand is HP.
3289280	3290320	That's the first thing we need.
3290320	3292960	Second thing we need is the CPU which you are working with.
3292960	3296720	I would say CPU is i5, and the third one is RAM.
3296720	3297440	Let's say aGB RAM.
3297440	3298880	So, we got these three things, right?
3298880	3300400	Now, we got these three variables.
3300400	3302080	And where to create the object of it?
3302080	3304400	So, we can create the object here itself.
3304400	3307760	So, we can create the object inside the init, and normally that's what we do.
3307760	3311840	So, if you want to create the object of laptop, we should be creating that object inside the
3311840	3312800	outer class, okay?
3312800	3316080	So, the object of laptop will be inside the student class.
3316080	3317280	The way to do that is very simple.
3317360	3319600	Here, you will say self.lap.
3319600	3322320	You can create any variable you want, and you will say laptop.
3322320	3324720	Or we are getting error, so we have to say self.laptop.
3324720	3325440	Okay, this works.
3325440	3328480	So, you can see in the constructor itself, you can define a variable.
3328480	3331920	So, in the outer class, you can define a variable lab, and you can define the object.
3331920	3336960	So, if you really want to use a laptop, you have to say the student object.lap.
3336960	3341760	Example, outside, if I want to use it, I will say s1.lap.
3341760	3343280	Whatever brand you want to fetch.
3343280	3347120	So, you cannot simply say lab.brand, you have to say s1.lab.brand.
3347120	3349680	Because the lab object is inside the student class.
3349680	3350560	This is one way.
3350560	3352800	What if you want to create another object of it?
3352800	3354080	Let's say I don't want lab.
3354080	3354400	I want...
3354400	3357680	So, you can simply say lab1 is equal to s1.lab.
3357680	3359440	You can get another object for s2.
3359440	3362720	You can say lab2 is equal to s2.lab.
3362720	3365200	Because for every object, you will get different laptop object.
3365200	3366800	Okay, trust me, this is how it works.
3366800	3368400	In fact, you can also check that.
3368400	3369840	We got two different laptop objects here.
3369840	3370960	We will print lab1.
3370960	3371760	And let's print laptop.
3371760	3373520	So, let's print the ideas of lab1, lab2.
3373520	3374720	We got two different objects here.
3374720	3375600	So, this works.
3375600	3376000	Okay?
3376000	3377760	This is where you create inner class.
3377760	3378000	Okay?
3378000	3381520	So, we have a laptop as an inner class of a student.
3381520	3382000	Right?
3382000	3383920	You could have done the outer class as well.
3383920	3386400	I mean, you could have created different classes that you want that works.
3386400	3390720	But sometime, when you know that this class will be used only for student, nothing else,
3390720	3392720	then you don't have to create a separate file for that.
3392720	3394480	You can do that in student class itself.
3394480	3396480	Now, can I directly create the object outside?
3396480	3399360	Let's say I don't want to get an object of laptop inside the student class.
3399360	3400880	Can we do it outside directly?
3400880	3401360	Let's try.
3401360	3403760	So, I will say lab1 is equal to...
3403760	3405760	I will say student.laptop.
3405760	3406800	Now, why student here?
3406800	3409120	Because you cannot simply access laptop directly.
3409120	3409280	Right?
3409280	3411920	Because laptop class belongs to a student class.
3411920	3415360	So, we have to always say student.laptop constructor.
3415360	3417280	You cannot simply create laptop directly.
3417280	3417520	Okay?
3417520	3418720	So, this is one thing you have to remember.
3418720	3422640	You can create the object of inner class inside outer class.
3422640	3425280	Or you can do that outside the outer class provided.
3425280	3426720	You are using the outer class name.
3426720	3428160	So, you have to say student.laptop.
3428160	3428320	Okay?
3428320	3428960	This works.
3428960	3431840	In fact, just to enhance the example, what I will also do is,
3431920	3435360	we can create a show method for a laptop as well.
3435360	3436880	So, we can say show for laptop.
3436880	3438480	And you can see we have two show methods.
3438480	3439840	One is student and one is laptop.
3439840	3440080	Okay?
3440080	3443120	So, in such student, we have show method inside laptop.
3443120	3443840	Also, we have show.
3443840	3445520	But these are two different show methods.
3445520	3448960	The show method of student will print the data about a student.
3448960	3451840	And the show method of laptop will print the show method of student.
3451840	3452640	I know that makes it.
3452640	3453120	That's weird.
3453120	3453760	So, let's do that.
3453760	3460800	So, I will say print self.brand, self.cpu, and self.ram.
3460800	3462000	Okay? So, we are printing this data.
3462000	3464400	So, this show is different from this show.
3464400	3466080	Let me now print laptop here.
3466080	3466800	Let me on this quote.
3466800	3470160	And you can see it brings only the name and the roll number.
3470160	3471360	I also want to print the laptop.
3471360	3472400	Oh, you need the object, right?
3472400	3473520	We have removed that statement.
3473520	3478800	Because if you want to access laptop, you have to say self.lap is equal to laptop.
3478800	3480400	But you have to say self.
3480400	3481120	So, this is important.
3481120	3484800	And after printing, this will call laptop show because we also want to do that.
3484800	3486880	So, you will say self.laptop show.
3486880	3487040	Okay?
3487040	3489840	So, we are printing data about a student and laptop as well.
3489840	3490560	So, this should work.
3490560	3492400	Let's run this code and it worked.
3492400	3495440	You can see we got data about a student and laptop as well.
3495440	3498400	So, this is how you create the class inside a class.
3503440	3506480	Now, in this video, we'll talk about inheritance.
3506480	3508560	Now, we talk about a concept of oops, you know,
3508560	3510880	where which is object-oriented programming.
3510880	3513040	We have so many concepts to talk about.
3513040	3514960	And one of them is inheritance.
3514960	3519440	Now, in real life, what we have is we have this parent and child relationship, right?
3519440	3521680	So, whatever belongs to your parents belongs to you.
3521680	3525040	Example, if my father or mother has a phone, it's my phone, right?
3525040	3527200	By default, my phone would be my phone.
3527200	3529120	But my father's phone would be my phone, right?
3529120	3530000	That's how it works.
3530000	3532000	So, if your parent's house, it's your house.
3532000	3533840	That's what we say inheritance, right?
3533840	3537280	In the same concept, you can implement in programming as well.
3537280	3540240	In fact, all the languages which follows oops concept,
3540240	3542080	they do implement inheritance, right?
3542080	3544320	And the way you do that is with the help of classes.
3544320	3545760	Class inherit a class.
3545760	3546400	Let's try that.
3546400	3549120	What I'm talking about is, let's say if you have a class
3549200	3550800	and class is a, okay?
3550800	3552720	Again, it should be a logical name.
3552720	3555360	So, you can go with employee class, you can go with student class,
3555360	3558080	you can go with laptop class, whatever class you love.
3558080	3563200	But time being, just for the example, we are going for class a and class b or class c.
3563200	3566080	In future, we'll try to implement some other examples
3566080	3568320	using different names and with proper example.
3568320	3571600	But at this point, just to keep it simple, let's go for class a.
3571600	3575360	Now, if we talk about this class a, this class a will have multiple features, right?
3575360	3577120	Maybe we can define two methods here.
3577120	3578320	So, we'll set definition there.
3578320	3582000	The first method which I want to go for is, let's say feature one, okay?
3582000	3584480	So, let's say we got this function which is feature one
3584480	3587120	and this function does provide you something, okay?
3587120	3590320	So, time being, we are printing feature one working.
3590320	3591440	That's it, nothing much.
3591440	3593840	Of course, it can be a complex code, but make it simple.
3593840	3595040	Let's keep it that.
3595040	3596560	And then we can have another feature here.
3596560	3597760	Let me just copy paste this code.
3597760	3601200	So, I will say copy and paste and this would be my feature two.
3601200	3605200	So, we got feature one and feature two and this will point feature two is working.
3605200	3607120	So, this class a has two features.
3607120	3608960	We got feature one, feature two, right?
3608960	3612160	And the way you can access them is with the help of object, right?
3612160	3613840	And the way you create an object is very simple.
3613840	3617840	You simply say a one is equal to a, that's how you create the object, right?
3617840	3619280	Where a is your constructor.
3619280	3622640	Again, you can define that in it method here, but not needed at this point.
3622640	3623520	So, this will work.
3623520	3627040	And using this a one, you can call feature one, you can call feature two, right?
3627040	3631360	So, you can say a one dot feature one and a one dot feature two.
3631360	3632160	And this will work.
3632160	3635120	Let me just run this code and you can see we got feature one working,
3635120	3635920	feature two working.
3635920	3637360	So, this code is working.
3637360	3640640	Now, what I'm excited about is, let's say we have one more class.
3640640	3642000	Let's talk about class B.
3642000	3644080	So, let me just create a class B here itself.
3644080	3646240	So, here I will say class B.
3646240	3648160	And class B will also have two features.
3648160	3650800	I will name this as feature three and feature four.
3650800	3653280	Instead of typing them, let me just copy paste the code here.
3653280	3657200	And we'll name this as feature three and feature four, right?
3657200	3659600	See, normally what happens, you know, when you work on a project,
3659600	3661440	of course, we have a very big team, right?
3661440	3664240	So, example, if one person is defining a class, okay?
3664240	3667520	In that class, we provide you four features or four methods.
3667520	3671600	Maybe you want to define some other class in which you need some extra features
3671600	3674160	and you also want the existing features.
3674160	3675760	You don't have to really find it, right?
3675760	3676560	You can use it.
3676560	3678160	And the way you do that, you're simply saying,
3678160	3680720	example, in this class B, we got two features, right?
3680720	3682960	We got feature three, we got feature four.
3682960	3686160	And of course, if I create the object of B one,
3686160	3688640	so it's a B one is equal to B.
3688640	3690960	And the functions which you can call using B one.
3690960	3693840	So, if I say B one dot, you can see we got only two options.
3693840	3695920	We got feature three and feature four, of course, right?
3695920	3698480	Because in B class, we have only two features.
3698480	3702000	What if you want to get the features of A as well?
3702000	3704960	And that's where inheritance comes into picture.
3704960	3709520	So, we can say, hey, this B is a child class of A, right?
3709520	3712560	And the moment you say child class, it will import all the features.
3712560	3717040	What I will say is this B is a child class or you can say subclass.
3717040	3719120	We have different terminology we can use here.
3719120	3721840	And we can simply say in the bracket, you can say A.
3721840	3726240	So, this class B is inheriting all the features from A.
3726240	3727200	And we got it, right?
3727200	3730000	Just writing that one thing, you know, just bracket A.
3730000	3733040	We are saying B is inheriting the features from A,
3733040	3736080	which means with the object of B, which is B one in this case,
3736080	3738720	the moment I say B one dot, see the options.
3738720	3741840	You can access feature one, feature two, feature three and feature four.
3741840	3744320	And that's the importance of inheritance,
3744320	3747600	which simply means if you already have a class which provides you some feature,
3747600	3750720	and in future, if you want to create your own classes,
3750720	3754720	in which you want to use those features, you just need to inherit them, right?
3754720	3756240	So, we can use some terminologies here.
3756240	3760640	We can say superclass, subclass, or we can say parent class or child class.
3760640	3762960	So, timing will refer them as superclass and subclass.
3762960	3768160	So, super is a class which is A and a class which inherits the class,
3768160	3769840	we will call them as subclass.
3769840	3772240	So, B is subclass and A is superclass.
3772240	3774720	So, that's the concept about inheritance.
3774720	3778320	Now, this is also called as a single level inheritance.
3778320	3779840	We have some other types as well.
3779840	3782160	We also have a multi-level inheritance.
3782160	3783040	Now, what it means?
3783040	3784800	Example, let's say if I have another class here,
3784800	3787920	let me get one more class here, and this class is let's say C.
3787920	3791760	So, we'll call this class C or this class C inherits B.
3791760	3794960	Now, what will happen is whatever you do in this class, let's say timebin,
3794960	3797600	I will define only one feature here, we'll say feature five.
3797600	3799440	You can see how lazy I am.
3799440	3801600	So, this is feature five working, right?
3801600	3803680	So, we got C class which has only one feature.
3803680	3808320	But the moment you create an object for C one, so I will say C one is equal to C.
3808400	3811280	The moment I say C one dot, see the methods you can use.
3811280	3812640	So, we can use feature one now.
3812640	3814960	So, feature one feature two are coming from A, right?
3814960	3816560	But C is only extending B.
3816560	3817440	So, that's our relationship.
3817440	3820480	We have grandparent, we have parent, and then we have child, right?
3820480	3825360	So, a child can access all the features from parent, grandparent, great grandparent, right?
3825360	3826320	So, that's how it works.
3826320	3827360	Okay, this is working, right?
3827360	3830240	So, we got single where you have one superclass, one subclass,
3830240	3833040	then we have multi-level where you have superclass, subclass,
3833040	3834800	and then I get subclass of that superclass.
3834800	3835760	Okay, this is working.
3835760	3837520	What if you go for multiple?
3837520	3838880	What is multiple here?
3838880	3841840	Let's say the C is not only taking from A and B.
3841840	3843280	We got some other class as well.
3843280	3848000	Just for time being, what I will do is I will say B is not inheriting A, okay?
3848000	3850160	So, A and B, they are two different classes.
3850160	3851840	Nothing, they are not related to each other.
3851840	3854400	A provides two features, B provides two features, okay?
3854400	3856240	So, there's no relationship between A and B.
3856240	3858080	They are two different classes.
3858080	3861360	C says, I want to access features from both, from A and B.
3861360	3864240	So, in this case, the C will inherit from A and B both.
3864240	3865600	So, you will say A, B.
3865680	3868400	So, C will copy from both, or C will inherit from both.
3868400	3869520	So, we will say C1.
3869520	3872080	The moment you say C1, you can see you can access all the features.
3872080	3873440	That's not the case with B1 now.
3873440	3876560	B1 can only access two features, feature three and feature four,
3876560	3880000	because B is not inheriting A, okay?
3880000	3880640	Point to remember.
3880640	3882960	So, we got A, we got B, and then we got C.
3882960	3885680	C is inheriting both the classes, A and B.
3885680	3887520	So, this is called as multi-pull.
3887520	3889120	So, this is your multi-pull, right?
3889120	3891840	So, we have done with single, we have done with multi-level,
3891840	3893360	and then we have multi-pull.
3893440	3895280	This is how we can work with inheritance.
3900080	3903280	Now, to this point, we have talked about OOPS concept, right?
3903280	3905760	In which we have seen inheritance, right?
3905760	3906720	Now, what is inheritance?
3906720	3911520	If you already have some classes, and if you want to use the existing features,
3911520	3916000	you will simply say class B, which will take the features from A, right?
3916000	3918240	So, class B inherits A.
3918240	3921600	Or you can go with a concept of multiple inheritance,
3921600	3924800	where one class will extend from two different classes,
3924800	3926400	or more than two classes, right?
3926400	3928560	So, in this case, we have class A, class B,
3928560	3931840	and then we have class C, which has a feature five,
3931840	3933840	but it is also inheriting A and B.
3933840	3936080	So, we can say C has five features, right?
3936080	3937280	So, that makes sense.
3937280	3939840	Now, what we'll do in this video is we'll talk about two topics.
3939840	3944400	The first one is the constructor in inheritance, how it behaves,
3944400	3949680	and we'll also talk about method resolution order, or you can say MRO.
3949680	3951200	So, let's start with the constructor.
3951200	3953840	Timebin, let's ignore C, okay?
3953840	3956640	So, let's say we don't have this C, so we'll ignore that part.
3956640	3960160	And, in fact, we'll delete that part for timebin.
3960160	3964960	And let's focus only on A and B, where B is inheriting A, okay?
3964960	3967520	So, in total, in B, we have four features, right?
3967520	3969920	Now, what happens is, if I create an object of A,
3969920	3973520	so let's say if I say A1 is equal to constructor of A,
3973520	3974400	so this will work, right?
3974400	3976240	So, when you say A bracket, that's a constructor,
3976240	3978400	it will call a method which is in it.
3978400	3981120	Now, even if you don't define it, it is there somewhere, right?
3981120	3983760	But let me define my own constructor, own init here.
3983760	3986320	So, I will set def, and we'll define the init method,
3986320	3988240	and this init method will print one stuff.
3988240	3991200	So, I will say print in A init.
3991200	3993200	Nothing much, we are not doing anything extra here,
3993200	3996000	we are just printing in A init, that's it.
3996000	3996640	Now, what do you think?
3996640	3997360	What it will print?
3997360	3999520	Of course, we are creating object of A, right?
3999520	4001120	So, it will only execute A.
4001120	4004000	See, with the object of A, you cannot access features of B, okay?
4004000	4006480	So, even if I try example, if I say A1 dot,
4006480	4009600	you can only access feature one and feature two.
4009600	4011520	But yes, if you have an object of B,
4011520	4013520	you can access all the features, right?
4013520	4014880	Features from A and B,
4014880	4018320	because B is a subclass and A is superclass.
4018320	4021280	And as I mentioned, subclass can access all the features
4021280	4023520	from superclass, but that's not vice versa, right?
4023520	4025840	A superclass cannot access all the features of subclass,
4025840	4027280	not even one feature of subclass.
4027280	4028160	Okay, this is fun.
4028160	4030640	Now, what if I create object of B?
4030640	4032080	So, I'm not getting object of A here,
4032080	4032800	I'm getting object of B.
4032800	4034800	Doesn't matter what is A1 or B1,
4034800	4036560	important is if I create an object,
4036560	4038880	B, which call the constructor, that's the question,
4038880	4040480	because we are not getting object of A,
4040480	4041760	we are getting object of B.
4041760	4044240	Will it call the constructor of A?
4044240	4044880	That's the question.
4044880	4047200	Let me just run this code and it works, okay?
4047200	4049040	So, even if you have the object of B,
4049040	4052240	it will still call the constructor of A, right?
4052240	4053360	That's how it works.
4053360	4055840	But what if you have your own constructor?
4055840	4058080	What if you have your own init method?
4058080	4060560	Example in B, see in B, we don't have that init, right?
4060560	4061680	And that's why it is going up.
4061680	4065280	So, let me repeat, since we don't have init inside B,
4065280	4067440	that's why it is going to A.
4067520	4070000	But what if you already have an init with you?
4070000	4072080	So, I will simply copy paste here in B.
4072080	4074160	So, both have init, but then in this,
4074160	4076400	I will print in B init, right?
4076400	4078640	So, in A, we are printing in A init,
4078640	4080640	in B, we are printing in B init.
4080640	4081680	So, this makes sense.
4081680	4083680	Now, if I run this code, what it will print?
4083680	4086960	It will print in A init or in B init.
4086960	4088960	Of course, if you are getting object of B,
4088960	4091360	it should only call the init of B, right?
4091360	4092720	And let's see if that works.
4092720	4094800	And let me just run this code and we are right.
4094800	4099120	So, when you run the code, you can see we only got in B init.
4099120	4101680	So, that means if you create an object of B,
4101680	4105120	first it will try to find the init of B.
4105120	4107200	If it is not there, then it will go for A.
4107200	4108880	Okay, that's the point you have to remember.
4108880	4112000	But what if you also want to call the init of A?
4112000	4112800	Is it possible?
4112800	4115040	I mean, if I create an object of B,
4115040	4118160	can I call the init of both the classes?
4118160	4119840	I mean A and B.
4119840	4121840	See, by default, it will call only B, right?
4121840	4123760	What if I want to call A as well?
4123840	4127040	And that's where we have a very special keyword or a method,
4127040	4129440	you can say, and that is super.
4129440	4130720	So, with the help of super,
4130720	4133840	so you can say super and it's a method, basically.
4133840	4135680	So, you will say super dot.
4135680	4137040	The moment you say super,
4137040	4139840	you can access all the features of the parent class.
4139840	4141120	So, you can say super dot init.
4141120	4143040	So, what we are doing is we are trying to call
4143040	4145200	an init method of class A.
4145200	4146560	So, the moment you say super,
4146560	4148960	you are representing the super class, okay?
4148960	4150720	Which in this case, it is A.
4150720	4154400	So, we are trying to call the init method of class A.
4154400	4155440	That's important.
4155440	4156560	And now, let's run this quote.
4156560	4158080	And you can see we got both the output.
4158080	4161440	We got in A end and we got in B end.
4161440	4164080	So, point to remember is when you create an object of B,
4164080	4166560	it will call the init of B first.
4166560	4167920	And from the init of B,
4167920	4170000	you are trying to call the init of A.
4170000	4171200	So, it will jump up,
4171200	4172960	it will execute the init of A first,
4172960	4174960	which will print in A in it.
4174960	4177600	And then it will come back to print in B in it, okay?
4177600	4179040	That's why we got the output.
4179040	4180080	So, this makes sense.
4180080	4183120	So, we can work with constructor in inheritance, right?
4183120	4184880	Now, let me add a twist here.
4184880	4187600	So, what I will do is I will remove this super from here.
4187600	4188480	Let's clean it.
4188480	4192320	And I will not even say that this is B.
4192320	4194960	So, class A and class B, two different things, okay?
4194960	4196320	They're not linked with each other.
4196320	4197360	But then we have class C.
4197360	4199920	As we have done earlier, we'll say class C.
4199920	4204640	And class C will inherit both the classes A and B, okay?
4204640	4208320	And now, if I say def and init,
4208400	4210160	you know what we are trying to do here.
4210160	4214160	First of all, we'll print in C in it, okay?
4214160	4215840	And then I will create the object of C.
4215840	4217680	So, there's no object of A and B.
4217680	4218720	I'm trying to object of C.
4219440	4220160	Now, what do you think?
4220160	4224000	Will it call the init of C or A or B?
4224000	4224640	Of course, right?
4224640	4226240	When you say the object is of C,
4226240	4228480	it will call the init of C only.
4228480	4229440	Let's run this code.
4229440	4230080	And that's right.
4230080	4232240	We got the output as in C in it.
4232240	4233520	So, this works perfectly.
4234080	4237360	But what if you want to call the init method
4237360	4238640	of a superclass?
4238640	4240240	But there's a twist here.
4240240	4242320	Now, C has two superclasses, right?
4242320	4244000	One is A and B.
4244000	4246960	The moment you say super, dot init.
4246960	4248080	Now, what do you think?
4248080	4249280	Which init it will call?
4249280	4251440	Will it call the init of A or B?
4251440	4252480	That's a question.
4252480	4253680	Let's run this and let's see what happens.
4253680	4254880	The moment you run this code,
4254880	4256880	you can see it says in A init.
4256880	4258640	That means we are unfair here.
4258640	4260160	We are biased towards A.
4260160	4262240	We are not taking B here, right?
4262240	4264000	This is completely wrong.
4264000	4266960	Oh, but the thing is, we have a concept of MRO,
4267040	4269840	which is method resolution order.
4269840	4270720	So, what happens is,
4270720	4273040	whenever you have this multiple inheritance,
4273040	4275840	it will always start from left to right.
4275840	4277360	Which means, so first,
4277360	4278640	so the moment you say init,
4278640	4281920	it will try to find the init of itself.
4281920	4283520	So, since we have init here,
4283520	4285360	it will execute the init of C.
4285360	4287520	Then, the moment you say super, dot init,
4287520	4288800	now we have two classes, right?
4288800	4289760	A and B.
4289760	4291360	And on the left side, we have A
4291360	4292880	and on the right side, we have B.
4292880	4294800	So, it will prefer left one first.
4295200	4297200	It goes from left to right.
4297200	4298800	And that's something you have to remember.
4298800	4301920	It's always from left to right, okay?
4301920	4303760	And that's why we got in A init.
4303760	4305840	The same thing can be done for methods.
4305840	4308560	Example, let's say, we have two methods which are same.
4308560	4311360	So, in this case, you can see we have feature one in A
4311360	4312880	and feature one in B.
4312880	4315840	Both are the same methods with the same name, of course.
4315840	4318240	And in this, I will print some different message.
4318240	4320880	Here, I will print feature one A.
4320880	4323280	And here, I will say feature one B.
4323280	4325280	That means, the feature one is in A
4325280	4326800	and feature one is in B.
4326800	4331200	And now, if I try to call, so I will say A1 dot feature one.
4331200	4332880	Will it call from A or B?
4332880	4334960	That's a question and we know the answer, right?
4334960	4338960	It will always call from A, because it goes from left to right.
4338960	4340400	And you can see the output.
4340400	4341440	So, this is something you have to remember,
4341440	4344560	which is a concept of method resolution order.
4344560	4346720	So, basically, in this video, we have talked about three things.
4346720	4350640	The first one is how constructor behaves in inheritance.
4350640	4353600	The second one is how to use that super method.
4353600	4358160	And the third one is MRO, which is method resolution order.
4358160	4360160	Now, in fact, with the help of super method,
4360160	4360960	it can be called function.
4360960	4361840	Let's see that.
4361840	4365440	So, let's say from, we have a function here, which is def,
4365440	4367360	and I will say feature, feed.
4367360	4368080	That's it.
4368080	4372160	And in this, I'm trying to call the method of super class, right?
4372160	4374400	So, we can say super dot.
4374400	4375680	And we can use that thing, okay?
4375680	4377680	So, we can say super dot feature two.
4377680	4379040	And let's see if it is working.
4379040	4380400	Let me call feature.
4380400	4381920	It should call the feature two.
4381920	4382880	So, yes, it works.
4382880	4386000	So, you can also use super method to call other methods as well,
4386000	4386880	not just in it.
4386880	4390320	So, to represent this super class, we use super method, okay?
4395280	4397840	Now, we have started talking about objects, right?
4397840	4399200	Then, we move towards class.
4399200	4401600	And then, we have discussed about inheritance.
4401600	4404720	Now, it's time to focus on one of the major concept in OPS,
4404720	4406080	which is polymorphism.
4406080	4407760	Oh, that's a weird word, right?
4407760	4409440	Now, when we talk about polymorphism,
4409440	4412160	it's break down this word poly and morphism.
4412160	4413840	So, poly means many, right?
4413840	4415840	And when you say morph, it means forms.
4415840	4419600	So, that means one thing can take multiple forms.
4419600	4422480	Example, like, as human, you know, we have different forms.
4422480	4425280	As the situation changes, we change ourselves, right?
4425280	4429120	Example, we behave differently at different location at office.
4429120	4431280	We behave differently when we are with our friends.
4431280	4432400	We behave differently.
4432400	4434080	So, we are polymorphic.
4434080	4436800	In the same way, when we talk about object-oriented,
4436880	4439280	objects will have multiple forms.
4439280	4442160	So, this concept is very important when you talk about software development.
4442160	4445360	So, we use this concept a lot when it comes to loose coupling,
4445360	4446560	dependency injection.
4446560	4449520	We also have a concept of interfaces, which we'll see later.
4449520	4451760	There are four ways of implementing polymorphism.
4451760	4454880	The first one is duct typing in Python.
4454880	4457360	The second one is operator overloading.
4457360	4460720	Then, we have method overloading and method overriding.
4460720	4464240	In the next few videos, we are going to talk about all these topics, okay?
4464240	4466480	And one of the interesting ones is duct typing,
4466480	4468880	especially if you are coming from different backgrounds, let's say,
4468880	4472480	if you have already seen Java or C++ or C sharp,
4472480	4475920	this has been different for you because in Java or in C sharp,
4475920	4478800	we have to mention the type of the variable which you work with, right?
4478800	4481120	We have to mention the type of object you work with.
4481120	4483040	But Python, we have something different, right?
4487920	4490480	In the last video, we have talked about polymorphism, right?
4490480	4493840	Which simply means you have one thing which will behave in a different way.
4493840	4496720	Or you can say one thing and multiple forms, right?
4496720	4497760	That is many forms.
4498480	4502160	Now, in this video, we'll talk about the first way of doing that,
4502160	4503680	and that is your duct typing.
4503680	4505120	I know that's a weird word, right?
4505120	4506000	Duck typing.
4506000	4511040	We have this famous line, which is if there's a bird which is walking like a duck,
4511040	4515040	which is quacking like a duck, and which is swimming like a duck,
4515040	4517280	that bird is a duck, right?
4517280	4519680	Which simply means it doesn't matter if it's a duck or not,
4519680	4522640	what matters is the behavior of that bird.
4522640	4525680	If it is matching with duck, that's a duck, right?
4525680	4528240	Now, how do you implement that in programming?
4528240	4530400	So what we will do here is let's take an example.
4530400	4532480	Let's say if I have x equal to 5.
4532480	4533600	Now, we talk about the type.
4533600	4536080	Now, in Python, we have a concept of dynamic typing,
4536080	4538720	which simply means the type you can mention later.
4538720	4540720	Example, when you say x equal to 5,
4540720	4543680	the type which we are representing now is integer.
4543680	4546560	But what if you say x equal to, let's say, Navin?
4547120	4549520	Are we changing the type of x here?
4549520	4550400	See, that's not the case.
4550400	4553840	What is happening here is when you say 5, in your memory,
4553840	4556480	you got a space which is of type integer.
4556480	4558080	When you say Navin, in your memory,
4558080	4560720	you got a space which is of type string.
4560720	4563040	The x is just a name to it, okay?
4563040	4566960	So when you say x equal to 5, there is an object of type integer,
4566960	4568800	you are just naming it as x.
4569360	4570960	Later, when you say you got Navin,
4570960	4574800	you got some space in your memory and you are representing that with x.
4574800	4577120	x is just a name to it, okay?
4577120	4579280	So we don't have specific type to x.
4579280	4582560	The moment you say type of x, you are actually getting the type of 5.
4582560	4585840	When you say the type of x, you are getting the type of Navin, right?
4585840	4587040	So that's one thing you have to remember.
4587040	4591120	The moment you give a variable name, that's just a name to a memory.
4591120	4594160	Now, to understand that typing what we'll do is we'll take another example.
4594160	4596160	To explain this, what we'll do is we'll create a class
4596160	4597840	and we'll name this class as laptop.
4597840	4600800	And this laptop class will have a method which is, let's say, code.
4600800	4604000	So in this code, what I will do is I want to execute my code, right?
4604000	4606400	So as a programmer, what we do is we write code, right?
4606400	4608160	We write code and we compile it,
4608160	4610320	we run it and we get the output at the end.
4610880	4616880	But then to do that, we also need an IDE which is Integrated Development Environment.
4616880	4621120	And in this case, if you want to write a code, you need to pass an IDE.
4621120	4626640	So we are expecting in the arguments that someone will pass an IDE to us.
4626640	4630560	And using this IDE, I will say IDE.execute.
4630560	4634000	So the question is, the IDE is of what type?
4634000	4635280	Is it a type of integer?
4635280	4636160	Is it a type of float?
4636160	4637520	Is it a type of string?
4637600	4640080	Now, of course, when you say execute, that means there's something
4640080	4642800	which is not there in the existing classes which you have.
4642800	4645600	That means the type of IDE is something very unique,
4645600	4647920	it is something which is user is defining, right?
4647920	4650400	That means if you want to create this object IDE,
4650400	4651680	you need to create your own class.
4651680	4654960	Let me get a class here and I will call this class as PyCharm.
4654960	4657280	Now, for different languages, we use different IDEs.
4657280	4660080	In fact, for one language, we have multiple options, right?
4660080	4663040	Example, when you work on Java, maybe you will be using NetBeans,
4663040	4666880	Eclipse, IntelliJ, for Python as well, we have different IDEs.
4666880	4669840	We are using PyCharm here because it works well.
4669840	4672400	Now, when you say PyCharm, of course, it will have a method, right?
4672400	4675520	So let me define a method which is def execute.
4675520	4677120	So you can see we have these two statements.
4677120	4679680	The moment you say execute, it will say compiling and running.
4679680	4680560	That's what you do, right?
4680560	4683520	We are code gets compiled and your code get run.
4683520	4684400	Now, will this work?
4684400	4686640	Of course not because we are not calling anything.
4686640	4688800	So when you run this code, you will not get any output.
4688800	4689680	Let me just try it out.
4689680	4691200	I will right click and say run demo.
4691200	4694080	You can see there's no output because we are not calling methods.
4694080	4695920	Let me call code.
4696000	4699040	The way you call code is by creating the object of laptop first
4699040	4700960	because you cannot call code without laptop.
4700960	4704880	So I will say lap one is equal to laptop.
4704880	4707440	And with the help of lap one, now you can call code.
4707440	4709440	So you can say lap one dot code.
4709440	4712480	But there's one problem here, which is inside a code,
4712480	4715440	you have to pass an argument which is of IDE.
4715440	4716320	That's a question now.
4716320	4718640	How do you pass an IDE here?
4718640	4721520	So what I will do is first you need to create an object of IDE.
4721520	4723920	You will say IDE, of course, you can have different names here,
4723920	4725280	but let me go with IDE.
4725280	4728560	So IDE equal to this will be of type PyCharm.
4728560	4732960	So the type of IDE we are working with is PyCharm, which is usually fine,
4732960	4733440	of course.
4733440	4736560	And then when you are calling code, you have to pass IDE.
4736560	4737360	And now it should work.
4737360	4739920	You can see from this code, you got compiling and running.
4739920	4742560	So the type of IDE here is PyCharm.
4742560	4744080	But is it fixed?
4744080	4746320	Can we change the type of IDE later?
4746320	4748240	Maybe let's say we have one more IDE.
4748240	4750640	Let's say in future, I'm creating my own editor,
4750640	4752720	which is way better than PyCharm, maybe.
4752720	4754960	And in that as well, we have the same method.
4755040	4755920	Let's say execute.
4755920	4757920	And in that, I'm doing some extra stuff.
4757920	4760880	So my IDE also does spell check.
4760880	4762320	Maybe PyCharm does that.
4762320	4764400	My IDE also does what?
4764400	4767920	Convention checks, the name of the variable and different stuff.
4767920	4771120	And then it also does compiling and running.
4771120	4773120	So my IDE does extra stuff.
4773120	4776000	Now what if I want to change the type of IDE?
4776000	4779040	Is the IDE type fixed to PyCharm not exactly
4779040	4780720	because this is dynamic typing?
4780720	4783840	So you can replace this IDE type from PyCharm
4783840	4785440	to editor provided.
4785440	4787600	You have that method, which is execute.
4787600	4791200	It doesn't matter which class object you're passing.
4791200	4795520	What matters is that object should have the execute method.
4795520	4797520	Because in IDE, we are saying execute.
4797520	4801440	So now, even if you change from PyCharm to my editor,
4801440	4802560	there is no problem.
4802560	4804880	The code will still work.
4804880	4806240	Provided you have that method.
4806240	4808720	So if you should be having this method, which is execute.
4808720	4809760	And that's the case.
4809760	4812960	If there's a bird, and if that bird behaves like a duck,
4812960	4815280	it works like a duck, it quacks like a duck,
4815280	4817840	it swims like a duck, it should be a duck.
4817840	4821040	In the same way, if there is an object, which is IDE,
4821040	4823280	and it has a method execute, that's it.
4823280	4825920	We are not concerned about which class object it is.
4825920	4828240	What we are concerned about, it should have that method,
4828240	4829200	which is execute.
4829200	4831520	And that is called as duck typing.
4831520	4832400	I know it is amazing.
4832400	4834720	And if you're coming from different background, like Java,
4834720	4836480	so we have a concept of interfaces.
4836480	4837120	So that's what we do.
4837120	4838320	We create interface.
4838320	4841360	And we have this my editor and PyCharm as a class,
4841360	4842960	which will implement that interface.
4842960	4845440	But if you are new to this programming, don't worry.
4845440	4846320	That's the Java part.
4846320	4846960	This is simple.
4851920	4854400	We have started talking about polymorphism.
4854400	4857840	And in that, we have seen one example of duck typing.
4857840	4861440	Now, in this video, we'll talk about operator overloading.
4861440	4863760	So what is operator overloading?
4863760	4865680	So we know the concept of operators.
4865680	4866960	So we have two operands.
4866960	4868640	Example, if you want to add two numbers,
4868640	4872800	you can say 5 plus 6, where 5 and 6 are your operands.
4872800	4874560	And plus is the operator.
4874560	4876160	So we know that.
4876160	4878240	And then we have a concept of polymorphism.
4878240	4880000	So it simply means you have one thing
4880000	4881760	which has multiple forms.
4881760	4884320	Now, if you can think about this, we have two integers.
4884320	4886160	And then we are trying to add them.
4886160	4888880	We can also add an integer and a float.
4888880	4891200	So in different programming language, it does support.
4891200	4892160	What about two strings?
4892160	4894000	So if you say you have two strings, let's say,
4894000	4895120	hello plus world.
4895120	4895760	Will it work?
4895760	4896880	And the answer is yes.
4896880	4899600	So plus works with the strings as well.
4899600	4902640	But what if you want to say you have a number 5?
4902640	4906240	So let's say we got a and a is 5.
4906240	4909760	And then we got b and b is, let's say, world.
4909760	4912960	Now, can I print by saying a plus b?
4912960	4916160	The moment you try to underscore, you can see we got an error.
4916160	4920000	It says unsupported operand types for plus.
4920000	4923600	So we cannot use int and string for plus.
4923600	4926080	So all these things are predefined.
4926080	4929360	All these things, they are called as a synthetic sugar,
4929360	4932400	which simply means it is trying to simplify the code
4932400	4933360	for the user.
4933360	4936000	See, behind the scene, things are a bit different.
4936000	4936720	Imagine this one.
4936720	4940640	Example, if I say a is 5 and b is 6.
4940640	4941360	Now, what do you think?
4941360	4943120	What is happening behind the scene?
4943120	4945520	Now, trust me, whatever happens in Python
4945520	4947680	happens with the help of object.
4947680	4950560	And here as well, when we talk about a and b,
4950560	4952800	the type of it is int.
4952800	4955040	So int is a class here.
4955040	4956400	And when you say class, of course,
4956400	4958400	class will have certain methods.
4958400	4960160	So behind the scene, what is happening
4960160	4964160	is when you say a plus b, which is of type integer,
4964160	4965440	it is calling something.
4965440	4969040	So behind the scene, it is calling int dot.
4969040	4971520	The moment you say int dot, int is a class.
4971520	4974400	And you can see we have a method called as init.
4974400	4975840	We have a method called as abs.
4975840	4977760	And we also have a method called as add,
4977760	4979040	which is very important here.
4979040	4981760	The moment you say int dot add, this
4981760	4983360	is taking two parameters.
4983360	4985760	The first one is a comma b.
4985760	4988680	So what we are doing here in print a plus b,
4988680	4990720	the same thing can be done here.
4990720	4992040	Let me just run this code here.
4992040	4993520	You can see we've got the same output.
4993520	4995200	So both are printing 11.
4995200	4999000	So you can say a plus b, or you can say int dot add
4999000	5001360	by passing two parameters a comma b.
5001360	5003320	And of course, the first one looks cool, right?
5003320	5005120	You're simply saying a plus b.
5005120	5006880	Because from our childhood, we are doing that.
5006880	5009600	We are trying to add numbers using plus operator.
5009600	5011600	But the moment you come to programming in programming,
5011600	5013200	whatever you want to do, you will
5013200	5015400	be doing that with the help of methods.
5015400	5019000	And add is a method which belongs to the int class, right?
5019000	5021840	If I jump to integer, so you can press on the control button
5021840	5023640	and click on the method which you want to see,
5023640	5025280	or the class which you want to see.
5025280	5026560	You can see it's a class.
5026560	5028680	And this class has multiple methods.
5028680	5031400	In the same way, the moment you say int dot,
5031400	5033320	you can access a method called as add,
5033320	5035000	and you're calling a comma b.
5035000	5038480	So even if you say a plus b behind the scene,
5038480	5041040	this is getting called, right?
5041040	5042600	So this is one thing you have to remember, OK?
5042600	5044360	So we'll talk about operator overloading later,
5044360	5045800	but this is something you have to remember.
5045800	5047640	So whenever you add two numbers, this
5047640	5049640	is what is getting called behind the scene.
5049640	5051200	Now, if these two things are strings,
5051200	5054120	so if I make a string here, now this is not integers, right?
5054120	5054680	They are strings.
5054680	5057240	So I have to say str dot add.
5057240	5059520	Now, when you say str dot add, in fact, str
5059520	5062160	also has an add method which takes two parameters.
5062160	5064600	And both should be of the same type, which is string type.
5064600	5065960	And then it will work, right?
5065960	5068200	So if I run this code, and you can see it is working.
5068200	5070240	So we got five and six as a string.
5070240	5072400	So they got concatenated here.
5072400	5073280	So this works.
5073280	5074880	The moment you change the type of it,
5074880	5077200	it will not work because the inbuilt class
5077200	5080560	doesn't have two things, which is integer and string
5080560	5081800	together, right?
5081800	5083120	So this thing you have to remember.
5083120	5085880	Now, once we know the moment you add a plus operator,
5085880	5087200	it calls the add method.
5087200	5088800	The moment you put a minus operator,
5088800	5090480	it will call a sub method.
5090480	5092840	The moment you use a star symbol, which is multiplication,
5092840	5094040	it will call a mul method.
5094040	5097280	So we have different methods for different operators, right?
5097280	5099400	And normally, those things are called as magic methods,
5099440	5101440	but that's what they say, magic methods, right?
5101440	5103520	So all these operators, behind the scene,
5103520	5105000	they work as methods.
5105000	5107840	Now, to understand the concept of operator overloading,
5107840	5109600	what I will do is I will say class.
5109600	5111560	And let's say we have a student class.
5111560	5113800	And every student will have, let's say, two variables.
5113800	5115360	And that will be marks one and marks two,
5115360	5116800	just to keep it simple.
5116800	5120360	So what I will do here is I will set def and init.
5120360	5124280	And here, I will say self.m1 is equal to oh,
5124280	5126840	now we want the value from the user, right?
5126840	5128880	So maybe I want to pass the value.
5128880	5131960	So I will pass it from here, m1 comma m2.
5131960	5135680	And let's specify self.m2 is equal to m2.
5135680	5137080	So we got these two values, right?
5137080	5139360	Now, what I want to do is I want to create two objects,
5139360	5140480	okay, two students object.
5140480	5144040	One is, let's say, s1 is equal to student.
5144040	5145240	And this will take two values.
5145240	5149240	I would say 58 comma 69, that's the value here.
5149240	5151520	And then s2 is equal to student.
5151520	5154360	And this student will have, let's say, 60 comma 65.
5154360	5155640	So we got two marks here, right?
5155640	5158320	We got two student and each student have two marks.
5158320	5160320	Now, I want to apply the operator here,
5160320	5161200	which is plus operator.
5161200	5162600	So I want to add these two students.
5162600	5165200	So the moment I say s1 plus s2,
5165200	5167560	I want a different student object, right?
5167560	5168560	Is it possible to do that?
5168560	5169400	Let's try.
5169400	5172960	So I will say s3 is equal to s1 plus s2.
5172960	5175520	Because now we know that plus operator means
5175520	5177520	it will add two values.
5177520	5179280	But it is possible with the help of integer.
5179280	5180920	It is possible with the help of string.
5180920	5183880	Is it possible to use plus operator with student class?
5183880	5184800	That's a question.
5184800	5185640	So let's run this code.
5185640	5186480	Let's see what happens.
5186480	5187960	Okay, we are not printing the value of s3,
5187960	5189120	but let's run this code.
5189120	5191720	The moment you try to run this code, you will get an error.
5191720	5193680	Oh, okay, we got different error here.
5193680	5195800	It says student takes no argument,
5195800	5197200	but it is taking arguments, right?
5197200	5198040	What's wrong?
5198040	5200720	Oh, we have written the wrong name, my bad.
5200720	5202120	Let's run this code once again.
5202120	5204440	So I was expecting this error, not the first one.
5204440	5208080	And the error is it says unsupported operant type plus.
5208080	5210360	We cannot use plus between student and student
5210360	5212480	because we have not defined it, right?
5212480	5214280	If you remember, behind the scene,
5214280	5216080	even if you use plus with integers,
5216080	5218120	it will be calling an add method.
5218120	5219440	But if you see our class,
5219440	5221240	we don't have that add method, right?
5221240	5223200	Because if you say s1 plus s2,
5223200	5226520	how your compiler, how your Python will know what to do?
5226520	5228080	And that's where you have to define it.
5228080	5229240	Yeah, that's where you have to say,
5229240	5231960	hey, the moment anyone says plus of a student,
5231960	5234760	you need to call this method called as add.
5234760	5237720	Okay, so you can overload the operator
5237720	5239160	and you can change definition for it.
5239160	5241640	You can define anything you want, right?
5241640	5245000	So I can say add and this add will take two parameters.
5245000	5248240	The first one is self comma other.
5248240	5251200	And you can see it takes two parameters, self and other.
5251200	5252600	Okay, guess what is happening?
5252600	5253800	So behind the scene,
5253800	5256640	this code is getting converted into,
5256640	5259600	it is student dot add,
5259600	5262560	which takes two parameters, s1 comma s2.
5262560	5264440	So what is self and what is other here?
5264440	5266320	So the first parameter is self
5266320	5267800	and s2 is the other parameter.
5267800	5270960	You can change the variable name, that's fine, okay?
5270960	5273920	You can say this is o and it should work.
5273960	5275000	It's a variable name, right?
5275000	5277240	So this is what is getting called behind the scene, right?
5277240	5279120	So here what I will do is I will say,
5279120	5280840	let's take two variables, m1,
5280840	5284040	m1 is equal to self dot m1
5284040	5286800	and m2 is equal to self dot m2.
5286800	5288640	So we got two variables, right?
5288640	5290120	Oh, not just self m1 plus,
5290120	5293560	it is other dot m1 plus other dot m2.
5293560	5295040	So this is how you add values, right?
5295040	5297520	So self m1 and other m1
5297520	5301280	and then m2 will have the addition of self m2 and other m2.
5301280	5302520	So this works.
5302520	5304160	And once you've got these two values,
5304160	5305440	what you will be doing is you will be getting
5305440	5306960	a new student object, we'll call that s3,
5306960	5308480	you can have any name as a matter.
5308480	5310720	So s3 is equal to student
5310720	5313880	by passing these two values, m1 comma m2.
5313880	5315160	And now once you've got this student,
5315160	5317280	you will return s3 here, right?
5317280	5318160	That is what you're expecting.
5318160	5321160	So the moment you say s1 plus s2,
5321160	5322160	it will return the value,
5322160	5323760	it will return a new object of student
5323760	5325680	and you will assign that to s3.
5325680	5326880	Okay, so this is what will happen.
5326880	5328760	Now if I print the value for s3,
5328760	5331360	so I will let me print s3 dot m1
5331400	5333280	and the moment you run this code, run
5333280	5335880	and you can see it works, you've got 118.
5335880	5336720	Is it right?
5336720	5337720	Of course it should be, right?
5337720	5340160	So it is 58 plus 60 and that's right.
5340160	5341640	We got 118.
5341640	5342840	This thing is working, right?
5342840	5343680	Perfect.
5343680	5345160	So if you want to add two students,
5345160	5348000	you need to overload the operator of plus
5348000	5349600	because integer knows what is plus,
5349600	5350680	string knows what is plus,
5350680	5353360	your student class don't know what is that plus means.
5353360	5355480	So plus means call the add method,
5355480	5357160	but we don't have an add method here.
5357160	5359000	So we have to define our own method.
5359000	5360840	The same thing can be done with subtraction,
5360840	5363520	is minus, the same thing can be done with multiplication.
5363520	5366320	So I would recommend you to explore more on this, you know?
5366320	5369120	So the moment you say def underscore underscore,
5369120	5370400	you can see we have so many methods.
5370400	5373000	We also have greater than, we also have equal to symbol.
5373000	5374600	We can compare two objects.
5374600	5377040	We can say that different methods are available here.
5377040	5377880	Okay, so try it out.
5377880	5379560	We also have multiplication somewhere.
5379560	5380920	So you can see we also have mull.
5380920	5383080	So everything is predefined, you can just use them.
5383080	5385560	In fact, for this example, I will take one more.
5385560	5388040	I want to compare if two objects are
5388040	5389200	greater than or equal to example,
5389200	5392400	if I say if S1 is greater than S2,
5392400	5394360	this is the horrible way of comparing students
5394360	5395960	because marks is not a criteria
5395960	5397000	where you can compare students.
5397000	5401200	But just for the example, I will say S1 wins.
5401200	5403720	So whoever has maximum marks, I will say they win.
5403720	5407360	I will say else, print S2 wins.
5407360	5408840	So what we are trying to do here is
5408840	5411080	whoever has maximum marks, they will win.
5411080	5413040	But when you say maximum marks, how do you check it?
5413040	5414800	Because we are not defining it, right?
5414800	5416640	Maybe I want to check only first marks,
5416640	5418920	which is M1 or maybe I want to check M2
5418920	5420320	or maybe the addition of both.
5420320	5421160	You can try it out.
5421160	5423880	So what I will do here is this will work, of course not
5423880	5425440	because the moment you try to run this code,
5425440	5427400	it will give you an error by saying
5427400	5429520	the greater than symbol not supported
5429520	5431440	between two instances of student.
5431440	5434000	It is supported for integers because it is predefined.
5434000	5435960	So here as well, if you want to make it work,
5435960	5438920	you have to define a function of method, which is GT.
5438920	5443080	GT is greater than, GE is greater than equal to.
5443080	5444720	So you want to check only greater than.
5444720	5448400	And then here you'll be using self and other as usual
5448400	5450040	because behind the scene, that is what is happening.
5450040	5453880	It is saying student.GT and it's passing two variables,
5453880	5455000	S1, S2.
5455000	5457480	So S1 goes to self, S2 goes to other.
5457480	5459320	And now, how do I compare?
5459320	5461560	So we'll say S1 doesn't matter, is it S1 or something?
5461560	5466560	So we'll say S1 is equal to self.M1 plus self.M2.
5467640	5472640	And we'll say S2 is equal to other.M1 plus other.M2.
5472880	5474680	So we are adding their marks basically.
5474680	5475520	You can compare.
5475560	5478040	If S1 is greater than S2,
5478040	5480560	now this time S1, S2, they're not objects, okay?
5480560	5483040	They are simple variables of integer.
5483040	5484480	Okay, if I'm getting confused with this,
5484480	5486720	let me just make it R, that should make sense.
5486720	5488840	So let's compare R1 and R2.
5488840	5490280	Now those are just marks, right?
5490280	5494940	If R1 is greater than R2, we will say return true,
5494940	5497760	else return false.
5497760	5498600	Simple.
5498600	5500480	Now if you're on this code, we are comparing it, right?
5500480	5502040	Let's compare and let's run.
5502040	5504880	And it worked, you can see S1 wins, right?
5504880	5506640	Because S1 values are higher.
5506640	5510240	So 58 plus 69 is higher than 60 plus 65.
5510240	5512720	But what if I change the value for S2?
5512720	5515080	Let's say there's 69 and you can see, of course,
5515080	5517600	now S2 is bigger, so let's run this code.
5517600	5519800	And you can see it says S2 wins, so that's right.
5519800	5522240	So what we are doing is we are adding those values
5522240	5524040	and then we are comparing it.
5524040	5527920	So if you want to perform any operation on the objects
5527920	5530840	which I usually find, you have to define all these methods.
5530840	5531800	Okay, there's one more.
5531800	5535800	What if you have a variable, let's say A is equal to nine?
5535800	5537920	Now when you say print A, and you can see
5537920	5540200	it will print the value of A, there's nothing wrong with that.
5540200	5542200	You can see it is printing the value of A.
5542200	5544160	Now is it printing the address of A?
5544160	5545000	That's not the case.
5545000	5546640	Why it is not printing the address of A?
5546640	5548600	It is printing the value of A.
5548600	5551560	But what happens, the moment you try to print S1,
5551560	5553360	it will not print the values of S1.
5553360	5556440	It will try to print the address of S1.
5556440	5558760	Okay, so you can see that it says it's a student object
5558760	5560680	at the address at this position.
5560680	5562080	Okay, we don't want that address, right?
5562080	5563640	We want values.
5563640	5565000	What is happening?
5565000	5566720	So when you try to print the object,
5566720	5569120	doesn't matter is it integer or your class,
5569120	5573520	behind the scene, it is calling a method called as str.
5573520	5575240	It is happening behind the scene, okay?
5575240	5577800	Even if you don't call it, it is happening behind the scene.
5577800	5579600	So the moment you say print A,
5579600	5581800	it will try to call A.str.
5581800	5584160	And that's why you are getting the output, right?
5584160	5586440	You're getting nine because it is calling str.
5586440	5589400	In the same way, the moment you say S1,
5589400	5593200	even this is calling str, right?
5593200	5594680	And now if you run this code,
5594680	5596680	you can see it is still giving the same output.
5596680	5598400	That means it is calling str.
5598400	5599400	What is this str?
5599400	5602160	So if I click on this, you can see it is in built-in.
5602160	5604400	So even if you don't define str function
5604400	5606080	or method in your own class,
5606080	5607800	it is getting defined somewhere.
5607800	5609560	And that definition, what is printing?
5609560	5611640	It is printing the module name.
5611640	5613000	It is printing the name of the class
5613000	5615440	and it is printing the object address.
5615440	5617720	We don't want that, we want values, right?
5617720	5620440	That means we need to override this method.
5620440	5623200	So what I will do is I will say def.
5623200	5624560	And the method name is str,
5624560	5626880	so you have to define this by yourself.
5626880	5629360	So we want to return the value of m1 and m2, right?
5629360	5633000	So you will say self.m1, self.m2.
5633000	5634480	And now if I run this code,
5634480	5635640	it will return a tuple, of course.
5635640	5637040	Let's run this code and you got it.
5637040	5639640	Can you see that we got 58 and 69.
5639640	5641760	So now if you want to print the object,
5641760	5643440	it will not print the address,
5643440	5645080	it will print the values, right?
5645080	5647720	Because we are overriding the str.
5647720	5648680	So if you remove str,
5648680	5650440	if you run this code, you got an error.
5650440	5652200	So it is returning a non-string value.
5652200	5653360	We have to return a string value.
5653360	5654440	How do we do that?
5654440	5656000	Because by default, when you say print,
5656000	5657080	you want to print a string, right?
5657080	5657920	So what you will do is,
5657920	5658920	you will use a format here.
5658920	5661000	So you can say curly packets,
5661000	5663920	curly packets, you're printing two stuff, dot, format.
5663920	5665640	And inside this format, you can pass this to value.
5665640	5667280	So what will happen is those curly packets
5667280	5668920	will be replaced by these values.
5668920	5671240	So you are returning a string now.
5671240	5672480	And we have seen that before, right?
5672480	5674360	So let's run this code and it worked.
5674360	5676880	You can see it got 58 and 69.
5676880	5679440	So even if you say print S1, it does work.
5679440	5681560	You can also print S2 if you want.
5681560	5682880	And let's run this code.
5682880	5685560	And you can see we got 69 and 65.
5685560	5686600	So that's perfect.
5686600	5690840	So this is how you work with operator overloading, okay?
5690840	5692360	So point to remember is,
5692360	5695000	whenever you perform any operator like addition,
5695000	5696440	subtraction, deletion,
5696440	5699560	behind this scene, we are calling methods, okay?
5699560	5701560	So for plus, we use add method,
5701560	5703520	for minus, we use sub method.
5703520	5705160	And for star, we use mult method.
5705160	5707160	In fact, we have a list of methods there.
5711520	5714440	In the last video, we have talked about operator overloading,
5714440	5715280	right?
5715280	5717680	Which simply means you have operator like plus,
5717680	5720160	minus, or division, or multiplication.
5720160	5721800	So the operator will remain same,
5721800	5724000	but the operands will change, right?
5724000	5726720	The type of parameters we are passing, it will change.
5726720	5728120	Example, when you say plus,
5728120	5730160	we are calling the add method, right?
5730160	5732920	And add method takes different types of parameters
5732960	5734800	or different types of arguments.
5734800	5735880	So that is overloading.
5735880	5739040	So it simply means you have the same method name,
5739040	5740840	but the arguments are different.
5740840	5742200	Or maybe the number of arguments
5742200	5744640	or the type of arguments are different.
5744640	5748160	In the same way, we have two more types in polymorphism.
5748160	5752200	One is method overloading and method overriding.
5752200	5753160	So what it means?
5753160	5754160	Let's start with the first one,
5754160	5755840	which is method overloading.
5755840	5758040	Now languages like Java, C sharp,
5758040	5759760	or any other oops language,
5759760	5762400	they have this concept of method overloading,
5762400	5764560	which is not there in Python.
5764560	5766120	But what exactly it is?
5766120	5767920	So it simply means if you have a class,
5767920	5769640	and in that class if you have, let's say,
5769640	5771480	two methods with the same name,
5771480	5773840	but different parameters or arguments,
5773840	5775800	which is called as method overloading.
5775800	5777400	Example, let's say if you have student class,
5777400	5779240	and in student class if you have two methods,
5779240	5780720	let's say average.
5780720	5782960	So we have two methods with the same name, average.
5782960	5786040	One takes two parameters, one takes three parameters.
5786040	5787800	This is called as method overloading.
5787800	5789960	But in Python, we don't have this concept.
5789960	5792880	So we cannot create two methods with the same name.
5792880	5795000	The next one is method overriding,
5795000	5797680	which simply means you have two methods
5797680	5800440	with the same name and same number of parameters
5800440	5801640	or arguments.
5801640	5804000	Okay, so that means can we create two methods
5804000	5806120	with the same name and same parameter in the same class?
5806120	5807920	Of course not, not in the same class.
5807920	5810080	But let's say if you have a concept of inheritance,
5810080	5812160	we have class A and class B,
5812160	5814360	and both the class have the same method
5814360	5816280	with the same name, same parameter,
5816280	5818400	this is called as overriding.
5818400	5819760	Again, we'll see the impact of that.
5819760	5821840	Let's start with the method overloading first.
5821840	5823800	So if you want to achieve method overloading,
5823800	5826040	what I will do is I will just remove this methods from here.
5826040	5827680	Just to keep it simple, right?
5827680	5830160	So we got a init method and it is working perfectly.
5830160	5832920	Let's remove all the extra stuff from here.
5832920	5835800	We just want to create one object, not even two.
5835800	5837000	I want to add two numbers.
5837000	5840000	So I have to create a method, let's say sum,
5840000	5842000	and this sum will take two arguments.
5842000	5844200	We'll say A and B.
5844200	5845640	So I want to add two values, that's it.
5845640	5847760	Nothing complex, I want to add two numbers.
5847760	5849160	Now if you want to add two numbers,
5850040	5853280	I will say S is equal to A plus B,
5853280	5855480	and at the end, we'll return S.
5855480	5856720	That's what we want to do here.
5856720	5859240	We just want to return the value of S, okay?
5859240	5861880	And if you want to work with that, you will say S1.
5861880	5865040	In fact, you will print the value, you will say S1 dot sum,
5865040	5866720	and you want to add two numbers here.
5866720	5868680	I will say five and nine.
5868680	5869680	And let's see if it is working.
5869680	5871120	Let's run this code and it works.
5871120	5872640	You can see we got 14.
5872640	5875400	So yes, we can create a method in setup class
5875400	5876560	which takes two parameters
5876560	5878680	and we can pass two parameters, it works.
5878680	5881080	What if, if you want to pass three values,
5881080	5883920	you want to pass five, nine, and six.
5883920	5885080	Now this is not possible, right?
5885080	5887280	The moment you run this code, you will get an error
5887280	5890280	because you are passing three parameters
5890280	5891640	or you're passing three arguments
5891640	5893160	and you're accepting only two.
5893160	5894400	So this will not work.
5894400	5896840	That means you need to create another method called a sum
5896840	5898120	which will take three arguments.
5898120	5900280	That's what we do in other languages.
5900280	5901800	But here we'll not do that.
5901800	5904240	Here what you can do is you can also use third variable.
5904240	5907080	You will say C, you got A, B, and C,
5907120	5910760	and you will simply say A plus B plus C, right?
5910760	5911680	So this will work.
5911680	5914280	So if I run this code and you can see you got 20
5914280	5916080	and this is right, you will get 20.
5916080	5917840	So we are passing three arguments
5917840	5920240	and we are accepting three arguments, it will work.
5920240	5922360	But what if I'm not passing third argument,
5922360	5923800	I'm passing only two arguments?
5923800	5925040	And now the problem starts, right?
5925040	5929080	Because you are expected to pass the third argument as well.
5929080	5930240	How do we solve this?
5930240	5932320	To solve this thing, we can use a concept
5932320	5934640	where you will say A is equal to none.
5934640	5935480	So this is one option.
5935480	5938520	The other option, we can use the variable length arguments.
5938520	5940360	If you remember, we have done that before,
5940360	5941880	the star and variable name.
5941880	5942720	But this is another option.
5942720	5945480	You can say all the values are by default none,
5945480	5947880	which means even if you don't pass the value,
5947880	5949760	this is default arguments, right?
5949760	5951440	So even if you don't pass the value,
5951440	5952920	the default value will be none.
5952920	5955800	So that means even if you don't pass any value,
5955800	5958840	example, even if you don't pass five and nine, it will work.
5958840	5960640	All the values will become none.
5960640	5963520	I want to pass some values, I will say five comma nine.
5963520	5964840	I'm passing with two values, right?
5964840	5965680	Let's start with third one.
5965680	5969000	Let's say I want to pass three values, five comma nine comma six.
5969000	5973480	All these values will be assigned to A, B, and C, respectively.
5973480	5977360	So if I will go to A, nine will go to B, and six will go to C.
5977360	5979160	So these values will be replaced by none.
5979160	5980840	So none will be replaced by these values.
5980840	5983920	So now, once I know this, so we can simply add it.
5983920	5985560	But what if you're passing two?
5985560	5986760	So in this case, you will check.
5986760	5988200	So before adding, you will check.
5988200	5993000	You will check if A is not equal to none, B is not equal to none,
5993000	5995640	and C is not equal to none.
5995640	6000040	So if none of them are none, that simply means you're passing three arguments, right?
6000040	6002920	And if you're passing three arguments, this is the calculation we have to go for.
6002920	6006200	You will say S is equal to A plus B plus C.
6006200	6010040	And you want to declare S outside so that you can use it from anywhere.
6010040	6012680	So you will say S is by default zero, and you've got this.
6012680	6015280	Otherwise, if let's say if I'm passing only two arguments,
6015280	6019760	I'm not passing the third argument, in that case, it will go to LF.
6019760	6022920	And inside LF, I will check, I forgot a colon here.
6022920	6026840	So inside LF, I will check if A is not equal to none.
6026840	6028720	So I'm concerned about A and B.
6028720	6033440	If they are not none, in that case, I will say S is equal to A plus B,
6033440	6035240	because we're not concerned about C, right?
6035240	6036720	And then we can go for one more condition.
6036720	6038960	What if you pass only one parameter or one argument?
6038960	6042240	In that case, you will say else, and you will say S equal to A.
6042240	6045400	So when you say only one parameter, let's say if I'm not passing nine and six,
6045400	6047800	I'm passing only five, so it will return five, right?
6047800	6048920	That's what we want.
6048920	6049720	So we can do that.
6049720	6052560	Else part is not required here, but just to make it more effective.
6052560	6056400	We can pass one argument, we can pass two arguments, we can pass three arguments.
6056400	6057320	That's perfect.
6057320	6059400	Let's run this code, and it worked.
6059400	6060440	You can see we got 20.
6060440	6065360	Now, if I pass only five and nine, even this will work because if you pass only
6065360	6070360	five and nine, C will get none, and it will execute LF, and you can see we got 14.
6070360	6073200	Now, if you pass only one value, let's say five, in this case,
6073200	6075000	if you run this code, you got five, right?
6075000	6076440	That's how it works.
6076440	6079640	So this is your method overloading.
6079640	6081280	So we are overloading methods.
6081280	6084480	But then we are not doing directly because it doesn't support in Python.
6084480	6086080	So we are doing some trick.
6086080	6088120	The next one is method overriding.
6088120	6088840	So let's go with that.
6088840	6090200	Let me just remove this code.
6090200	6092880	And let's once again take a simple example.
6092880	6094640	And this time we'll go for A and B.
6094640	6096000	I love these classes.
6096000	6098480	So what I will do is, let's say we have a class A, OK?
6098480	6100760	And in this class A, we have a function.
6100760	6103240	I will say function name is, or the method name is show.
6103240	6107120	And in this method, I will simply print in a show.
6107120	6110760	Now, first of all, before going ahead, this concept is method overriding.
6110760	6113120	This is very famous in software industry, you know?
6113120	6115800	So in future videos, we'll also talk about this thing.
6115800	6118560	When we talk about interfaces and abstract classes,
6118560	6121320	this concept is used very heavily, OK?
6121320	6123960	So make sure that you understand this concept properly.
6123960	6125960	Maybe with simple example like A and B.
6125960	6128280	But understanding the concept is important here.
6128280	6130520	We can go with complex example as well.
6130520	6131600	Concept is important.
6131600	6134120	So let's say we got class A, which has a method which is show.
6134120	6135960	And we are printing in a show.
6135960	6136280	That's it.
6136280	6137200	Nothing fancy.
6137200	6139000	Now, if I create an object of A here.
6139000	6142560	So if I go back and if I say A1 is equal to A,
6142560	6144520	so we are creating object of A, right?
6144520	6146520	And with the help of this, we can call show.
6146520	6148440	If you have this code, you can see we got in A show.
6148440	6149560	That perfectly worked.
6149560	6151600	Now, what if you create another class?
6151600	6153920	Let's say class B, OK?
6153920	6158400	And now imagine this class A is a parent and class B is a child.
6158400	6161000	Example, let's say this is my dad and this is me.
6161000	6162480	So we have B here.
6162480	6164440	And time in, I'm not writing anything here.
6164440	6165280	We say pass.
6165280	6166760	I just want to keep it empty.
6166760	6168440	OK, so we are keeping it empty.
6168440	6171560	And let me create object of B, not A, but let me get object of B.
6171560	6173000	And let's run this code.
6173000	6175040	And you can see we got an error.
6175040	6178200	It says B object has no attribute as show.
6178200	6180400	Of course, in B, we don't have anything.
6180400	6182600	At this point, you will use a concept of inheritance.
6182600	6186960	And you will say, hey, B inherits A. So when you say B inherits A,
6186960	6190520	it means you will get all the features of A to B.
6190520	6191360	And let's run this code.
6191360	6193080	And you can see we got in A show.
6193080	6195320	Because of course, in B, we don't have show.
6195320	6197280	The moment you run this code, it will first
6197320	6199960	search for the method show inside B.
6199960	6203160	Now, since we don't have that, it will go to A to search it.
6203160	6204360	And that's how it works.
6204360	6206080	So before going ahead, let me tell you one story.
6206080	6206680	A small story.
6206680	6208640	I've used this story in multiple examples
6208640	6210080	when I was teaching Java as well.
6210080	6212240	So the concept is, when I was in my 11th standard,
6212240	6215960	when I've just joined my college, I was not having any phone.
6215960	6219280	So a lot of people used to ask me, which phone you have.
6219280	6220960	So I used to say, I don't have any phone.
6220960	6222240	Because I was not having a phone.
6222240	6224600	But then this question got repeated multiple times.
6224600	6226560	Then I realized, OK, I have to say something.
6226560	6228480	Now, at that point, my father was
6228480	6230640	having a phone which is Nokia double one, double zero.
6230640	6231760	I was not having any phone.
6231760	6234120	So whenever someone used to ask me, which phone you have,
6234120	6236560	I used to say, I got Nokia double one, double zero.
6236560	6237520	I don't have a phone.
6237520	6238880	But my father says a phone.
6238880	6240600	So father's phone is my phone.
6240600	6241680	That's how I think it works.
6241680	6245920	So since B and B, my father is A. So B in hates A.
6245920	6247520	So I got all the features.
6247520	6251880	In this case, show is in A. In B, we don't have show.
6251880	6254720	After some time, after a few months, I got a new phone.
6254720	6256320	And that is Motorola phone.
6256320	6259240	So my father has a Nokia phone, and I got Motorola phone.
6259240	6261480	Now, if you ask me which phone I have, of course,
6261480	6262400	I would say Motorola, right?
6262400	6264040	I would not say Nokia, right?
6264040	6267760	Because my phone overwrites my father's phone.
6267760	6269160	That's what happened here.
6269160	6273520	The moment you create a show method inside B as well,
6273520	6277000	and if you try to print in B show.
6277000	6279440	Because when we were not having show inside B,
6279440	6283120	it was going to A. Now, since we have show inside B,
6283160	6286360	it will print the show of B, right?
6286360	6287960	So if you ask me which phone I have now,
6287960	6289920	so I will say Motorola, not Nokia, right?
6289920	6292760	So my phone overwrites my father's phone in the same way.
6292760	6296120	This show overwrites the earlier show method.
6296120	6298720	So this is how you work with method overriding.
6298720	6302000	Again, we'll be doing this concept more in the next tutorials
6302000	6304880	when we talked about abstract classes or interfaces.
6304880	6306160	But this is awesome, right?
6306160	6308160	Remember this point, when you call show,
6308160	6311000	it will call the show method of this subclass
6311000	6312760	if you have it, okay?
6312800	6313600	So that's it, everyone.
6313600	6315120	I hope you enjoyed this session.
6315120	6316240	Let me know in the comment section
6316240	6318440	and do subscribe for the videos.
