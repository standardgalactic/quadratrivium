start	end	text
0	24460	So we have a lot to do right now because we're a little bit behind, so let's get started.
24460	27260	This is Ferris.
27260	32700	And Ferris just finished writing Ferris says, a rust-flavored cow say implementation and
32700	35180	they're ready to ship it.
35180	41340	But here's the problem, Ferris doesn't know how or what to do to ship their crate.
41340	43940	So we're going to give Ferris a checklist, we're going to go through every single part
43940	47340	of it, we're going to make sure that Ferris has everything in that crate so they can
47340	49940	make it really successful.
49940	53740	So this is the first part of our checklist, CI infrastructure and tests.
53740	56700	And as we go through, we'll go through items to have your repository as well as how to
56700	61500	announce your crate, because marketing is also important.
61500	67180	So you might have heard of this, but it's the not rocket science rule of software engineering.
67180	71700	Automatically maintain a repository of code that always passes all the tests.
71700	72700	It's simple, right?
72700	77300	You just need to make sure that if everything passes, everything is good.
77300	78500	And how does Rust do it?
78500	84500	Well, we have Bors, and Bors here, he's our benevolent dictator for life, and he likes
84500	87980	to make sure that everything works all the time and he won't merge broken code.
87980	91860	And it's great, and it catches all the regressions.
91860	97180	So Bors here is powered by Homo, and Homo is great in the sense that it's all the code
97180	102180	that gets behind Bors and powers it, and it automatically makes sure all the tests pass
102180	104100	and it merges the code if it's been approved.
104100	109220	And it does a whole lot more, like, hey, your code broke, or an upstream patch messed
109220	113300	things up, and it's a really nice way to automatically just maintain everything.
113300	117420	Now, Bors might be a little bit much for your repository if it's a smaller thing, but that's
117420	118420	okay.
118420	123620	Now, you could be like Nanachi here and have no tests, and you could just hope that no
123620	128700	one finds regressions or bugs, but let's be real, we're people, we always write bugs,
128700	129860	and it's going to happen.
129860	134300	And so you just need to make sure that you pray that that doesn't happen, but actually
134300	137100	write the code that doesn't.
137100	140900	And so not everyone wants to fix their bugs, and no one wants to fix the test, and every
140900	145300	time the test break, it's like, oh, well, I could just turn it off and just ignore it.
145300	150300	But don't, because what happens is that something like this happens, and your application stops
150300	153900	working and it's a pain in the butt, and a lot of people are depending on you writing
153900	158460	actual code and making sure that all of it works.
158860	164100	So setting up a CI system is hard, it's kind of a pain to set up, I'm pretty sure everyone's
164100	171660	tried to do it once or twice with Travis, and you have like five commits doing it.
171660	176380	And so, but there's some great free open source tools that kind of help this out, and you
176380	181260	can compile for different operating systems and make sure that that all works out.
181260	188940	And you know, here's an example for myself, I like to call it CI-driven development, where
188940	195940	it's five or so commits praying to the CI gods in order to make sure that it all works out.
195940	199220	But I've set up a nice little script that you all can borrow from so you don't have
199220	203660	to do this yourself, it's nice, it'll be in the example repo at the end.
203660	208140	So here's some core CI tools, you've got Travis, which does OSX and Linux builds, and you've
208140	210220	got AppVare, which does Windows.
210220	214140	And these are all tier one systems supported by Rust, which means that the core team makes
214140	215300	sure that all of it works on there.
215300	218100	And so you should make sure that your code at least works on there.
218100	224260	And you've also got cross, which is a great tool by Jopark that does a bunch of non-tier
224260	228860	tool, non-tier one systems, it's a Docker container that can do all the cross compilation
228860	233260	and everything like that, so you can even test on systems that aren't your own.
233260	236500	And one of the nice things, and this is a little feature that I don't think a lot of
236500	240700	people know of, is that Travis and AppVare can do cron jobs, and so you can set it up
240700	244860	so that every week you run a beta build, and every day you can run a nightly build.
244860	250100	And you can have it test to see, hey, does the compiler actually break my code today?
250100	254300	Which is great for things like larger projects that depend a lot more on nightly features
254300	255940	or if you have a compiler plug-in.
255940	260780	But even then, it's kind of a way to say, hey, compiler devs, my stuff's going to break,
260780	263820	even though it's building on stable today, so you might have a regression.
263820	267380	And that way you can also help out the core team in that sense.
267380	270940	So you should also enable those on your builds.
270940	273140	So there's all those tools that you can use as well.
273140	276460	You've got dependency CI that Servo uses.
276460	279660	It checks for deprecated packages automatically.
279660	284760	And you've also got cover awesome codecove, which do all of the code coverage stuff.
284760	287980	Because of the way that tests are like in line with some of the files, it doesn't always
287980	288980	work out that way.
288980	293180	And it's not exactly the best metric, but you know, sometimes people like and care about
293180	296900	code coverage having 100% completion, those are tools that you can use that are automatically
296900	300820	there and free for open source.
300820	305340	So once you have your CI system and you tested it, you make sure that everything is built
305340	308060	so you know that when I ship this code, it's going to work.
308060	312660	You need to have a lot of different items in your repository that aren't the code.
312660	314300	And licenses is one of them.
314300	318420	And choosing it can be hard, but it protects you and it protects your code.
318420	321900	It lets people know, hey, this is how I want you to use my code.
321900	324500	Maybe you want GPL because you want your code to be copy left.
324500	327780	Maybe you want to use MIT because you're like, hey, you know what, I don't care.
327780	329380	Do what you want.
329380	332780	You can not provide a license, but it actually makes it legally that people can't use your
332780	336740	code and chances are if you're putting something on crates.io, you do want people to use your
336740	337740	code.
337740	340220	So have a license.
340220	341980	But which one should you choose?
341980	344980	There's a great website called choosealicense.com.
344980	348580	It's got all kinds of information that can step through, hey, this is what I'm concerned
348580	350620	about, this is what I want.
350620	354780	So if you do that, you can look through it and it says, okay, here, this is the license
354780	355780	you want.
355780	360380	And it's also got a couple of licenses for things that aren't necessarily, you know,
360380	361380	as well known.
361380	364780	It's like the unlicense, which is almost just like, hey, do what you want, but I'm not
364780	367500	liable.
367500	372780	So one of the things that GitHub did is they did a whole 2017 open source survey.
372780	375820	One of the important things they said was that licenses are by far the most important
375820	379820	type of documentation to both users and contributors.
380260	383700	64% of people say that it's important to them.
383700	388740	And 67% of them are saying, hey, I might not use your code if it's not the license that
388740	390580	I want, right?
390580	392260	And so this is important.
392260	396580	If most everyone cares about licenses, you should care about licenses too.
396580	402820	It's not like code is a legal thing and you need to have one.
402820	408260	So a lot of the Rust community and the community at large uses an MIT patchy 2.0 dual license,
408300	411300	just MIT, sometimes a patchy 2.0.
411300	412620	But that's the most common one.
412620	416580	And if you do it that way, it makes it really easy to say, hey, all these crates can work
416580	417580	together.
417580	418580	It's permissive.
418580	422580	It still works with GPL based code if you want to use it that way.
422580	425540	And a lot of people contribute to your code without having to worry about, like, do I
425540	428500	need to contribute back if I modify it?
428500	429500	But it's your code.
429500	430500	Choose what you want.
430500	433020	Maybe you do really care about free software and you want to use the GPL, that's fine.
433020	437220	But this is just one of the most common things if you're kind of deciding which one should
437220	438220	I use.
438780	441780	It's a good default.
441780	445340	So one of the other things is the cargo.toml, and I had to actually change out this slide
445340	447820	today because Carol was like, hey, we've got rebies now.
447820	452420	So I was like, oh, cool, great, I have to fix everything while we're doing this.
452420	457500	But your cargo.toml file isn't just how you orchestrate your build system.
457500	460540	It's saying, hey, here's all this metadata.
460540	463980	Here is everything you need to know about my project.
463980	465220	And it's really well documented.
465220	468020	It's on this link that I have right here.
468020	472780	But it makes it easier to search and find and it gives a lot of info for potential users.
472780	476980	If all of a sudden someone comes to this page and there's nothing there, now I don't know
476980	477980	where to look.
477980	478980	I don't know what to find.
478980	479980	I don't know what to do.
479980	481540	Why would I want to use your create?
481540	484220	Give me a little bit of information on what it does because we like to come up with cool
484220	489860	names but the name is not descriptive, then it's kind of hard to know what to do.
489860	492420	So here's an example of a sub-optimal versus an optimal one.
492420	494060	One on the left is pretty much the default one.
494060	496060	The one on the right is, hey, let's fill it out.
496060	497060	Here's everything you need.
497060	498500	It's got badges.
498500	500340	It's got categories.
500340	504100	It makes it easier to search because it has all this stuff and it's a lot.
504100	507900	But you know, take 10 minutes to fill it out and you'll find that you pretty much won't
507900	511940	have to touch this section again and it'll just work.
511940	513460	So don't skimp on the vital things.
513460	518020	You do have time, like, again, you're excited, you're like, oh man, I finished my create.
518020	519020	I want to go show the world.
519020	520100	I want to go tell about people.
520100	523020	But if you just throw it up there and you don't have these things, it's going to make
523020	526340	it a lot harder for people to even want to use your code.
526340	530380	Having a readme file, a contributing file in case people want to come contribute, docs,
530380	533220	examples, and a code of conduct, these are all important things that you should have
533220	538020	in your create and take the time to actually think about and put in there.
538020	539540	So questions your readme should answer.
539540	542100	Your readme is your introduction to your project, right?
542100	546900	Like, people look at there, they look at it, and if it's not there or if it's pretty, like,
546900	550380	nothing's in there, it makes it really hard to know what your project's about or what
550380	553540	it does or how do I even use a basic example of it.
553540	554540	Answer the questions.
554540	557220	Maybe, you know, you can't maintain it anymore.
557220	558220	Have that in the readme.
558220	561940	All these things are there so that people can know how to use your project.
561940	565900	And it's the first thing that people see, and if it's not filled out, it's going to
565900	570740	be hard for people wanting people to, like, use your create.
570740	572820	And a contributing file.
572820	576980	People think, oh, well, I don't even want it small, it's not that much, but like, think
576980	577980	about it.
577980	582020	People always want to contribute to your code, and they don't know how to contact you.
582020	583500	What's the first thing you're going to look for?
583500	586100	You're going to look for a file that tells you how to contribute.
586100	587100	Fill it out.
587100	591740	Spend that 10, 20 minutes to take the time to say, okay, here's how you make a pull request
591740	592740	to me.
592740	595500	Here's how I'll determine what I want to use.
595500	599220	It'll grow your contributors, and it will be a point of contact and a way for people
599220	604620	to know this is how I can help you.
604620	607140	Documentation is also super, super, super important.
607140	610340	And I have this horrible experience working with Haskell in production all the time in
610340	615820	the sense that there is barely any documentation all the time, and it kind of sucks, because
615820	619860	I had to spend more time trying to figure out how to fix the code and get it to work
619860	624900	than I do actually writing the code, and the types don't speak for themselves, which seems
624900	628260	to be a common feeling.
628260	633740	And if you've ever seen documentation like this, it doesn't really tell you much at all
633740	637660	about what it's doing, and it doesn't tell you how to use it, and it doesn't tell you
637660	643460	anything besides, it takes an input, it has a width, and it needs some kind of writer,
643460	645860	and it prints out fares.
645860	646860	That doesn't help.
646860	651780	And it makes most people look like this, and they're confused, like, what?
651780	654380	I don't understand.
654380	659100	So the Regex Create is a really great create for many reasons, but one of it is it's got
659100	662380	some superb documentation.
662380	667220	It takes the time to give inline examples, it has descriptive function names, explains
667220	671140	what it does, and one of the other things is that if you do write code that panics,
671140	673940	you should tell people why it panics.
673940	676740	Too often people will just throw panics in their code, because they're like, oh, you
676740	678900	know what, I'm just going to unwrap or whatever.
678900	680700	Tell people why.
680700	684900	There might be a reason, but the last thing you want to do is have people just use your
684900	688460	code, and all of a sudden it panics, and it poisons a mutex, and now they didn't think
688460	693580	it was, and it just ends up being a bad time for everyone.
693580	700700	So documentation is a highly valued, but often overlooked thing, and this was the common
700700	702940	sentimentality in GitHub's open source survey.
702940	709780	93% of people thought it was a problem, and only 60% of people ever don't actually contribute
709780	713340	to the documentation, like, that's insane.
713340	716980	Everyone sees it as a problem, but no one wants to contribute, so that means only 40%
716980	719460	of people are contributing to these projects.
719460	725700	You should also be that 40%, actually help spend the time to do that, and I get it.
725700	729380	Most people feel like this when you tell them to do writing docs, and they're like, hey,
729380	730380	I don't want to.
730380	735700	That's a lot of work, but you will definitely and automatically look, you will make people
735700	740220	feel like this when they see that, hey, you spent the time to write really, really good
740220	742380	docs, and we all feel that way.
742380	745020	It's awesome when you have documentation that makes your life easier.
745020	750620	So yes, it's hard, but spend that time to do it, and I get it.
750620	755420	Writing good documentation is super, super hard, and it's really hard to convey exactly
755420	760220	what you're trying to say and have people care about it and, you know, tell them the
760220	764380	right thing, but do spend that time on it.
764380	768740	Trust me, it will do so much more for your create if you do it.
768740	773980	Now the other thing that I find super important, but is often lacking, is examples.
774020	778180	Too often, you will see a read me have the example in it, and then that will be the only
778180	781260	example in the repo, and that's it.
781260	784780	There's no non-trivial example that says, hey, here's how you do this really, really,
784780	788140	really complicated thing with it, and more often than not, everyone's trying to do the
788140	792660	really, really complicated thing, but no one's taking the time to write out how to do it.
792660	797620	So things like the Russ Cookbook are a good example of, hey, here are these crates.
797620	800940	We're trying to expand it and make it like, here's an easy way to do it, but, you know,
800940	802900	it's a non-trivial thing.
802900	807180	So if you can take the time to do examples beyond just the read me, I think a lot more
807180	811660	people end up being happy with your crate.
811660	816140	And I think one of the other things, and one that often is a contentious point for many
816140	821300	people outside of the Russ community generally, is a code of conduct.
821300	823100	You need to have one.
823100	827540	It's not saying that you can't have disagreeing opinions or anything like that, it's just
827540	831020	saying, hey, be kind to each other when you talk in this open space.
831020	832020	It's important.
832020	835780	And you'll find that a lot of people won't actually do anything with your code or have
835780	839700	anything to do with it if they don't have a code of conduct, mostly because they can't
839700	846460	feel like I want to contribute because I don't know if I will feel safe being here.
846460	850460	And one of the important things is that even Graydon, the creator of Rust, said, I would
850460	854500	not have built the language nor participated in a project of building the language if I
854500	859340	had to subject myself to the kinds of discourse normally surrounding language-building communities.
859340	862020	So you literally would not be in this room today if it had not been for the very first
862020	864580	commit, which was a code of conduct.
864580	868500	I cannot understate how important it is to have one.
868500	872180	So you may have seen this guy, John DeMore, recently with all of Google's memos and things
872180	873700	like that.
873700	878260	And it's kind of weird, people are like, oh, it's free speech, and it's not.
878260	883540	Companies are liable for their employees creating very hostile work environments, and whether
883540	888020	you feel that way about that is a different story, but the Civil Rights Act of 1964 has
888020	892340	been around for about 40 years now, and that has always been the winner, and that was why
892340	894380	he was fired.
894380	898860	Open Source does not have these kinds of legal protections or any financial incentives or
898860	899860	anything like that.
899860	904180	It really just comes down to us saying, hey, this is what we're going to have, and we want
904180	906940	to have an inclusive community.
906940	909380	So having a code of conduct is important.
909380	910780	And so we need to create that environment.
910780	916140	It means having a code of conduct, enforcing the code of conduct, and also having a moderation
916140	921140	team to do that if your project ever gets too loud, or too big, I should say.
921140	926220	Because if the core team is the one violating it and you don't have anyone to enforce it,
926220	929800	and they're the ones who are supposed to enforce it, it ends up creating a weird kind of thing.
929800	936740	So if your project ends up getting big, consider having a moderation team to do it.
936740	939900	So there's a couple of different codes of conduct you can use.
939900	944140	The contributors coveted is a free one that you can just download and use, and just say,
944820	948380	you had to put in your project name or hoot of contact, but that's about it.
948380	954620	There's also Rust code of conduct, which will allow you to very easily, is a very good example,
954620	957900	very full-featured.
957900	962660	So the last thing in our create checklist is announcing your create.
962660	964740	And there's a couple of different places you can announce it.
964740	968900	The Rust community has this awesome new thing called herald.community.rs that Florian Gilcher
968900	969900	had worked on.
969900	973500	And you can easily go to the site and say, hey, this is my new project.
973500	976220	And then it gets dumped out onto Twitter, and people can see it.
976220	978940	You can also announce it on your own Twitter and just tag Rustling.
978940	982620	Steve Kladnik pretty much runs that, and he just retweets everything, or at least likes
982620	986340	it.
986340	988940	And there's also the user's forum, as well as the Rust subreddit.
988940	993180	If you haven't been to any of those areas, people often announce in there.
993180	995420	You could also announce it outside of the community.
995420	999660	There's hacker news in our programming, or two good places to put it.
999660	1002500	But I say caution you.
1002500	1006860	If you go there, it's not as warm and welcoming as Reddit, or at least the Rust community
1006860	1007860	is.
1007860	1010660	But if you do like that, and you do want to put it out there, those are also great places
1010660	1014460	to really get some good, high visibility.
1014460	1017260	So one of the things that a lot of people feel weird about is self-promotion.
1017260	1019420	And I often do, too.
1019420	1021780	But if you don't talk about your create, who's going to?
1021780	1026060	If you don't tell people about it, they won't find it.
1026060	1030300	So some things to be careful about, because perception is reality, a lot of times people
1030300	1033900	will say, oh, it's my first create, or I'm a total Rust new, but that's fine.
1033900	1034900	You can be new.
1034900	1036740	Those are not bad things.
1036740	1039140	But if you're announcing a create, you should...
1039140	1043220	It's a difference between asking and saying, hey, I have a question, I'm new, versus this
1043220	1044220	is my new thing.
1044220	1045220	I want to show it off.
1045220	1049500	You have to be confident in order to kind of get people to be interested.
1049500	1053300	And we may not like to admit it, but it's very easy to have biases and go, oh, well,
1053300	1057180	they're new, they won't know it as well, so why should I use it?
1057180	1059180	Just don't do that.
1059180	1062340	And the other thing is that it's very easy to have an undescriptive title, like what
1062340	1066340	if I just said announcing fair says 1.0, it tells you nothing about what it does.
1066340	1070260	So we have a little bit extra in there that says, hey, this is the name of the project,
1070260	1073020	and this is a very brief description of what it does.
1073020	1078500	Something that would fit in a Twitter tweet would be about a decent size.
1078500	1082960	So if you have a library, be loud and proud about it.
1082960	1086180	So there's a couple different ways you can announce your create.
1086180	1088140	One of them is through a technical post.
1088140	1090420	It's great because people learn something new.
1090420	1093660	Your post helps grow the community because now people are talking about it, and now people
1093660	1098260	will go, oh, hey, Rust is getting some traction, and then maybe you can convince your employers
1098260	1101500	to use it because now more people are talking about it, right?
1101500	1104460	I think most of us here would want that to be a thing.
1104460	1109020	And like most people, you will never forget how you actually did the thing you talked
1109020	1114620	about, and you can go back and look at it, and it's great because you wrote it all out.
1114620	1117860	You can also do a demo.
1117860	1125700	This here was a demo scene video that someone had done, and it was great.
1125700	1127500	It was 52 kilobytes worth of code.
1127500	1132900	It generated all the visuals without media, and it instantly showed everything about it,
1132900	1139020	and it was way more impactful than if they had just written a blog post about it.
1139020	1141580	Oh, well, there we go.
1141580	1148700	So one of the other things that you can do is you can also make a bold claim, and there
1148700	1149700	we go.
1149700	1150900	Yeah, I love technical difficulties.
1150900	1151900	It's great.
1151900	1155700	You can make a bold claim and back it up with fax.
1155700	1163820	Yeah, rip grep is faster than grep AG, get grep UCG, PT, and SIFT, and I think pretty
1163820	1168500	much all of us when we saw that was like, what?
1168500	1170700	There's just no way.
1170700	1176500	And Burt Susie pretty much had all the data to back it up, and it was like, yeah, no,
1176500	1182340	this did happen, and it's fast, and we all know that now, but it's a double-edged sword.
1182340	1187700	If you do say something that is kind of ridiculous to most people, it can come back to bite you
1187700	1191340	if you can't back it up with the right fax, but do consider that if what you're doing
1191340	1194420	is really, really cool.
1194420	1196100	You can also make a slick website to show it off.
1196100	1200420	Personally, I like Rocket in that sense, because it's like, hey, cool.
1200420	1201300	Here's what it does.
1201300	1205380	Here's the API, here's the docs, and it presents it in a nice format, so it's a kind of combination
1205380	1211780	of documentation as well as a nice on-the-eye presentation.
1211780	1215020	There's also another example is Exa.
1215020	1216980	It was just a simple LS replacement.
1216980	1217980	It's a tool.
1217980	1219700	It tells you how you install it here.
1219700	1220700	That's where it is.
1220700	1223740	But hey, it tells you what it does.
1223740	1224740	It's short.
1224740	1225740	It's simple.
1225740	1226740	It's to the point.
1226740	1227740	It looks nice.
1227740	1233420	Now, choosing what fits best for your code kind of depends on what you're doing, right?
1233420	1238340	Like you don't necessarily know if a technical post would be the right one or whatever.
1238340	1241300	It all comes down to what you think is the best thing, and that is at the end of the
1241300	1243020	day the important part.
1243020	1245900	Choose what fits best for you.
1245900	1247740	So Ferris has gone through all this.
1247740	1248740	They've done it.
1248740	1249740	It's pushthecreates.io.
1249740	1250740	Actually, it is.
1250740	1254460	You can actually go check it out right now if you wanted to.
1254460	1255460	It's great.
1255460	1257260	It's all done.
1257260	1260900	Before I close out, I did want to talk about one tool that I think is the most important
1260900	1267740	tool that will help you in pretty much everything with shipping and create, and that's empathy.
1267740	1272540	Being able to look at the code and what you have as if you were someone else, would you
1272540	1274180	like the documentation?
1274180	1277380	Would you like the API as it stands?
1277380	1279780	Would you feel safe and welcoming while you're here?
1279780	1283620	All of these things can be done if you peer through your project as if you were someone
1283620	1284620	else.
1284620	1289260	If the answer to some of those questions is no, then you can go through and fix them.
1289260	1293020	And empathy, I think, will be the easiest thing in order to figure out, hey, what do
1293020	1294020	I need to change?
1294020	1296940	What should I change about my stuff?
1296940	1299660	Because your create is a lot more than just the code.
1299660	1300660	It's all the metadata.
1300660	1301660	It's all the interactions.
1301660	1303500	It's all the social things.
1303500	1308100	Coding is a social thing, and so if you have all that stuff that makes it easier for other
1308100	1311780	people, your code will be successful.
1311780	1312780	So thank you.
1313220	1315220	That was everything I have for today.
1315220	1317220	So, all right.
