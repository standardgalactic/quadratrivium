1
00:00:00,000 --> 00:00:24,460
So we have a lot to do right now because we're a little bit behind, so let's get started.

2
00:00:24,460 --> 00:00:27,260
This is Ferris.

3
00:00:27,260 --> 00:00:32,700
And Ferris just finished writing Ferris says, a rust-flavored cow say implementation and

4
00:00:32,700 --> 00:00:35,180
they're ready to ship it.

5
00:00:35,180 --> 00:00:41,340
But here's the problem, Ferris doesn't know how or what to do to ship their crate.

6
00:00:41,340 --> 00:00:43,940
So we're going to give Ferris a checklist, we're going to go through every single part

7
00:00:43,940 --> 00:00:47,340
of it, we're going to make sure that Ferris has everything in that crate so they can

8
00:00:47,340 --> 00:00:49,940
make it really successful.

9
00:00:49,940 --> 00:00:53,740
So this is the first part of our checklist, CI infrastructure and tests.

10
00:00:53,740 --> 00:00:56,700
And as we go through, we'll go through items to have your repository as well as how to

11
00:00:56,700 --> 00:01:01,500
announce your crate, because marketing is also important.

12
00:01:01,500 --> 00:01:07,180
So you might have heard of this, but it's the not rocket science rule of software engineering.

13
00:01:07,180 --> 00:01:11,700
Automatically maintain a repository of code that always passes all the tests.

14
00:01:11,700 --> 00:01:12,700
It's simple, right?

15
00:01:12,700 --> 00:01:17,300
You just need to make sure that if everything passes, everything is good.

16
00:01:17,300 --> 00:01:18,500
And how does Rust do it?

17
00:01:18,500 --> 00:01:24,500
Well, we have Bors, and Bors here, he's our benevolent dictator for life, and he likes

18
00:01:24,500 --> 00:01:27,980
to make sure that everything works all the time and he won't merge broken code.

19
00:01:27,980 --> 00:01:31,860
And it's great, and it catches all the regressions.

20
00:01:31,860 --> 00:01:37,180
So Bors here is powered by Homo, and Homo is great in the sense that it's all the code

21
00:01:37,180 --> 00:01:42,180
that gets behind Bors and powers it, and it automatically makes sure all the tests pass

22
00:01:42,180 --> 00:01:44,100
and it merges the code if it's been approved.

23
00:01:44,100 --> 00:01:49,220
And it does a whole lot more, like, hey, your code broke, or an upstream patch messed

24
00:01:49,220 --> 00:01:53,300
things up, and it's a really nice way to automatically just maintain everything.

25
00:01:53,300 --> 00:01:57,420
Now, Bors might be a little bit much for your repository if it's a smaller thing, but that's

26
00:01:57,420 --> 00:01:58,420
okay.

27
00:01:58,420 --> 00:02:03,620
Now, you could be like Nanachi here and have no tests, and you could just hope that no

28
00:02:03,620 --> 00:02:08,700
one finds regressions or bugs, but let's be real, we're people, we always write bugs,

29
00:02:08,700 --> 00:02:09,860
and it's going to happen.

30
00:02:09,860 --> 00:02:14,300
And so you just need to make sure that you pray that that doesn't happen, but actually

31
00:02:14,300 --> 00:02:17,100
write the code that doesn't.

32
00:02:17,100 --> 00:02:20,900
And so not everyone wants to fix their bugs, and no one wants to fix the test, and every

33
00:02:20,900 --> 00:02:25,300
time the test break, it's like, oh, well, I could just turn it off and just ignore it.

34
00:02:25,300 --> 00:02:30,300
But don't, because what happens is that something like this happens, and your application stops

35
00:02:30,300 --> 00:02:33,900
working and it's a pain in the butt, and a lot of people are depending on you writing

36
00:02:33,900 --> 00:02:38,460
actual code and making sure that all of it works.

37
00:02:38,860 --> 00:02:44,100
So setting up a CI system is hard, it's kind of a pain to set up, I'm pretty sure everyone's

38
00:02:44,100 --> 00:02:51,660
tried to do it once or twice with Travis, and you have like five commits doing it.

39
00:02:51,660 --> 00:02:56,380
And so, but there's some great free open source tools that kind of help this out, and you

40
00:02:56,380 --> 00:03:01,260
can compile for different operating systems and make sure that that all works out.

41
00:03:01,260 --> 00:03:08,940
And you know, here's an example for myself, I like to call it CI-driven development, where

42
00:03:08,940 --> 00:03:15,940
it's five or so commits praying to the CI gods in order to make sure that it all works out.

43
00:03:15,940 --> 00:03:19,220
But I've set up a nice little script that you all can borrow from so you don't have

44
00:03:19,220 --> 00:03:23,660
to do this yourself, it's nice, it'll be in the example repo at the end.

45
00:03:23,660 --> 00:03:28,140
So here's some core CI tools, you've got Travis, which does OSX and Linux builds, and you've

46
00:03:28,140 --> 00:03:30,220
got AppVare, which does Windows.

47
00:03:30,220 --> 00:03:34,140
And these are all tier one systems supported by Rust, which means that the core team makes

48
00:03:34,140 --> 00:03:35,300
sure that all of it works on there.

49
00:03:35,300 --> 00:03:38,100
And so you should make sure that your code at least works on there.

50
00:03:38,100 --> 00:03:44,260
And you've also got cross, which is a great tool by Jopark that does a bunch of non-tier

51
00:03:44,260 --> 00:03:48,860
tool, non-tier one systems, it's a Docker container that can do all the cross compilation

52
00:03:48,860 --> 00:03:53,260
and everything like that, so you can even test on systems that aren't your own.

53
00:03:53,260 --> 00:03:56,500
And one of the nice things, and this is a little feature that I don't think a lot of

54
00:03:56,500 --> 00:04:00,700
people know of, is that Travis and AppVare can do cron jobs, and so you can set it up

55
00:04:00,700 --> 00:04:04,860
so that every week you run a beta build, and every day you can run a nightly build.

56
00:04:04,860 --> 00:04:10,100
And you can have it test to see, hey, does the compiler actually break my code today?

57
00:04:10,100 --> 00:04:14,300
Which is great for things like larger projects that depend a lot more on nightly features

58
00:04:14,300 --> 00:04:15,940
or if you have a compiler plug-in.

59
00:04:15,940 --> 00:04:20,780
But even then, it's kind of a way to say, hey, compiler devs, my stuff's going to break,

60
00:04:20,780 --> 00:04:23,820
even though it's building on stable today, so you might have a regression.

61
00:04:23,820 --> 00:04:27,380
And that way you can also help out the core team in that sense.

62
00:04:27,380 --> 00:04:30,940
So you should also enable those on your builds.

63
00:04:30,940 --> 00:04:33,140
So there's all those tools that you can use as well.

64
00:04:33,140 --> 00:04:36,460
You've got dependency CI that Servo uses.

65
00:04:36,460 --> 00:04:39,660
It checks for deprecated packages automatically.

66
00:04:39,660 --> 00:04:44,760
And you've also got cover awesome codecove, which do all of the code coverage stuff.

67
00:04:44,760 --> 00:04:47,980
Because of the way that tests are like in line with some of the files, it doesn't always

68
00:04:47,980 --> 00:04:48,980
work out that way.

69
00:04:48,980 --> 00:04:53,180
And it's not exactly the best metric, but you know, sometimes people like and care about

70
00:04:53,180 --> 00:04:56,900
code coverage having 100% completion, those are tools that you can use that are automatically

71
00:04:56,900 --> 00:05:00,820
there and free for open source.

72
00:05:00,820 --> 00:05:05,340
So once you have your CI system and you tested it, you make sure that everything is built

73
00:05:05,340 --> 00:05:08,060
so you know that when I ship this code, it's going to work.

74
00:05:08,060 --> 00:05:12,660
You need to have a lot of different items in your repository that aren't the code.

75
00:05:12,660 --> 00:05:14,300
And licenses is one of them.

76
00:05:14,300 --> 00:05:18,420
And choosing it can be hard, but it protects you and it protects your code.

77
00:05:18,420 --> 00:05:21,900
It lets people know, hey, this is how I want you to use my code.

78
00:05:21,900 --> 00:05:24,500
Maybe you want GPL because you want your code to be copy left.

79
00:05:24,500 --> 00:05:27,780
Maybe you want to use MIT because you're like, hey, you know what, I don't care.

80
00:05:27,780 --> 00:05:29,380
Do what you want.

81
00:05:29,380 --> 00:05:32,780
You can not provide a license, but it actually makes it legally that people can't use your

82
00:05:32,780 --> 00:05:36,740
code and chances are if you're putting something on crates.io, you do want people to use your

83
00:05:36,740 --> 00:05:37,740
code.

84
00:05:37,740 --> 00:05:40,220
So have a license.

85
00:05:40,220 --> 00:05:41,980
But which one should you choose?

86
00:05:41,980 --> 00:05:44,980
There's a great website called choosealicense.com.

87
00:05:44,980 --> 00:05:48,580
It's got all kinds of information that can step through, hey, this is what I'm concerned

88
00:05:48,580 --> 00:05:50,620
about, this is what I want.

89
00:05:50,620 --> 00:05:54,780
So if you do that, you can look through it and it says, okay, here, this is the license

90
00:05:54,780 --> 00:05:55,780
you want.

91
00:05:55,780 --> 00:06:00,380
And it's also got a couple of licenses for things that aren't necessarily, you know,

92
00:06:00,380 --> 00:06:01,380
as well known.

93
00:06:01,380 --> 00:06:04,780
It's like the unlicense, which is almost just like, hey, do what you want, but I'm not

94
00:06:04,780 --> 00:06:07,500
liable.

95
00:06:07,500 --> 00:06:12,780
So one of the things that GitHub did is they did a whole 2017 open source survey.

96
00:06:12,780 --> 00:06:15,820
One of the important things they said was that licenses are by far the most important

97
00:06:15,820 --> 00:06:19,820
type of documentation to both users and contributors.

98
00:06:20,260 --> 00:06:23,700
64% of people say that it's important to them.

99
00:06:23,700 --> 00:06:28,740
And 67% of them are saying, hey, I might not use your code if it's not the license that

100
00:06:28,740 --> 00:06:30,580
I want, right?

101
00:06:30,580 --> 00:06:32,260
And so this is important.

102
00:06:32,260 --> 00:06:36,580
If most everyone cares about licenses, you should care about licenses too.

103
00:06:36,580 --> 00:06:42,820
It's not like code is a legal thing and you need to have one.

104
00:06:42,820 --> 00:06:48,260
So a lot of the Rust community and the community at large uses an MIT patchy 2.0 dual license,

105
00:06:48,300 --> 00:06:51,300
just MIT, sometimes a patchy 2.0.

106
00:06:51,300 --> 00:06:52,620
But that's the most common one.

107
00:06:52,620 --> 00:06:56,580
And if you do it that way, it makes it really easy to say, hey, all these crates can work

108
00:06:56,580 --> 00:06:57,580
together.

109
00:06:57,580 --> 00:06:58,580
It's permissive.

110
00:06:58,580 --> 00:07:02,580
It still works with GPL based code if you want to use it that way.

111
00:07:02,580 --> 00:07:05,540
And a lot of people contribute to your code without having to worry about, like, do I

112
00:07:05,540 --> 00:07:08,500
need to contribute back if I modify it?

113
00:07:08,500 --> 00:07:09,500
But it's your code.

114
00:07:09,500 --> 00:07:10,500
Choose what you want.

115
00:07:10,500 --> 00:07:13,020
Maybe you do really care about free software and you want to use the GPL, that's fine.

116
00:07:13,020 --> 00:07:17,220
But this is just one of the most common things if you're kind of deciding which one should

117
00:07:17,220 --> 00:07:18,220
I use.

118
00:07:18,780 --> 00:07:21,780
It's a good default.

119
00:07:21,780 --> 00:07:25,340
So one of the other things is the cargo.toml, and I had to actually change out this slide

120
00:07:25,340 --> 00:07:27,820
today because Carol was like, hey, we've got rebies now.

121
00:07:27,820 --> 00:07:32,420
So I was like, oh, cool, great, I have to fix everything while we're doing this.

122
00:07:32,420 --> 00:07:37,500
But your cargo.toml file isn't just how you orchestrate your build system.

123
00:07:37,500 --> 00:07:40,540
It's saying, hey, here's all this metadata.

124
00:07:40,540 --> 00:07:43,980
Here is everything you need to know about my project.

125
00:07:43,980 --> 00:07:45,220
And it's really well documented.

126
00:07:45,220 --> 00:07:48,020
It's on this link that I have right here.

127
00:07:48,020 --> 00:07:52,780
But it makes it easier to search and find and it gives a lot of info for potential users.

128
00:07:52,780 --> 00:07:56,980
If all of a sudden someone comes to this page and there's nothing there, now I don't know

129
00:07:56,980 --> 00:07:57,980
where to look.

130
00:07:57,980 --> 00:07:58,980
I don't know what to find.

131
00:07:58,980 --> 00:07:59,980
I don't know what to do.

132
00:07:59,980 --> 00:08:01,540
Why would I want to use your create?

133
00:08:01,540 --> 00:08:04,220
Give me a little bit of information on what it does because we like to come up with cool

134
00:08:04,220 --> 00:08:09,860
names but the name is not descriptive, then it's kind of hard to know what to do.

135
00:08:09,860 --> 00:08:12,420
So here's an example of a sub-optimal versus an optimal one.

136
00:08:12,420 --> 00:08:14,060
One on the left is pretty much the default one.

137
00:08:14,060 --> 00:08:16,060
The one on the right is, hey, let's fill it out.

138
00:08:16,060 --> 00:08:17,060
Here's everything you need.

139
00:08:17,060 --> 00:08:18,500
It's got badges.

140
00:08:18,500 --> 00:08:20,340
It's got categories.

141
00:08:20,340 --> 00:08:24,100
It makes it easier to search because it has all this stuff and it's a lot.

142
00:08:24,100 --> 00:08:27,900
But you know, take 10 minutes to fill it out and you'll find that you pretty much won't

143
00:08:27,900 --> 00:08:31,940
have to touch this section again and it'll just work.

144
00:08:31,940 --> 00:08:33,460
So don't skimp on the vital things.

145
00:08:33,460 --> 00:08:38,020
You do have time, like, again, you're excited, you're like, oh man, I finished my create.

146
00:08:38,020 --> 00:08:39,020
I want to go show the world.

147
00:08:39,020 --> 00:08:40,100
I want to go tell about people.

148
00:08:40,100 --> 00:08:43,020
But if you just throw it up there and you don't have these things, it's going to make

149
00:08:43,020 --> 00:08:46,340
it a lot harder for people to even want to use your code.

150
00:08:46,340 --> 00:08:50,380
Having a readme file, a contributing file in case people want to come contribute, docs,

151
00:08:50,380 --> 00:08:53,220
examples, and a code of conduct, these are all important things that you should have

152
00:08:53,220 --> 00:08:58,020
in your create and take the time to actually think about and put in there.

153
00:08:58,020 --> 00:08:59,540
So questions your readme should answer.

154
00:08:59,540 --> 00:09:02,100
Your readme is your introduction to your project, right?

155
00:09:02,100 --> 00:09:06,900
Like, people look at there, they look at it, and if it's not there or if it's pretty, like,

156
00:09:06,900 --> 00:09:10,380
nothing's in there, it makes it really hard to know what your project's about or what

157
00:09:10,380 --> 00:09:13,540
it does or how do I even use a basic example of it.

158
00:09:13,540 --> 00:09:14,540
Answer the questions.

159
00:09:14,540 --> 00:09:17,220
Maybe, you know, you can't maintain it anymore.

160
00:09:17,220 --> 00:09:18,220
Have that in the readme.

161
00:09:18,220 --> 00:09:21,940
All these things are there so that people can know how to use your project.

162
00:09:21,940 --> 00:09:25,900
And it's the first thing that people see, and if it's not filled out, it's going to

163
00:09:25,900 --> 00:09:30,740
be hard for people wanting people to, like, use your create.

164
00:09:30,740 --> 00:09:32,820
And a contributing file.

165
00:09:32,820 --> 00:09:36,980
People think, oh, well, I don't even want it small, it's not that much, but like, think

166
00:09:36,980 --> 00:09:37,980
about it.

167
00:09:37,980 --> 00:09:42,020
People always want to contribute to your code, and they don't know how to contact you.

168
00:09:42,020 --> 00:09:43,500
What's the first thing you're going to look for?

169
00:09:43,500 --> 00:09:46,100
You're going to look for a file that tells you how to contribute.

170
00:09:46,100 --> 00:09:47,100
Fill it out.

171
00:09:47,100 --> 00:09:51,740
Spend that 10, 20 minutes to take the time to say, okay, here's how you make a pull request

172
00:09:51,740 --> 00:09:52,740
to me.

173
00:09:52,740 --> 00:09:55,500
Here's how I'll determine what I want to use.

174
00:09:55,500 --> 00:09:59,220
It'll grow your contributors, and it will be a point of contact and a way for people

175
00:09:59,220 --> 00:10:04,620
to know this is how I can help you.

176
00:10:04,620 --> 00:10:07,140
Documentation is also super, super, super important.

177
00:10:07,140 --> 00:10:10,340
And I have this horrible experience working with Haskell in production all the time in

178
00:10:10,340 --> 00:10:15,820
the sense that there is barely any documentation all the time, and it kind of sucks, because

179
00:10:15,820 --> 00:10:19,860
I had to spend more time trying to figure out how to fix the code and get it to work

180
00:10:19,860 --> 00:10:24,900
than I do actually writing the code, and the types don't speak for themselves, which seems

181
00:10:24,900 --> 00:10:28,260
to be a common feeling.

182
00:10:28,260 --> 00:10:33,740
And if you've ever seen documentation like this, it doesn't really tell you much at all

183
00:10:33,740 --> 00:10:37,660
about what it's doing, and it doesn't tell you how to use it, and it doesn't tell you

184
00:10:37,660 --> 00:10:43,460
anything besides, it takes an input, it has a width, and it needs some kind of writer,

185
00:10:43,460 --> 00:10:45,860
and it prints out fares.

186
00:10:45,860 --> 00:10:46,860
That doesn't help.

187
00:10:46,860 --> 00:10:51,780
And it makes most people look like this, and they're confused, like, what?

188
00:10:51,780 --> 00:10:54,380
I don't understand.

189
00:10:54,380 --> 00:10:59,100
So the Regex Create is a really great create for many reasons, but one of it is it's got

190
00:10:59,100 --> 00:11:02,380
some superb documentation.

191
00:11:02,380 --> 00:11:07,220
It takes the time to give inline examples, it has descriptive function names, explains

192
00:11:07,220 --> 00:11:11,140
what it does, and one of the other things is that if you do write code that panics,

193
00:11:11,140 --> 00:11:13,940
you should tell people why it panics.

194
00:11:13,940 --> 00:11:16,740
Too often people will just throw panics in their code, because they're like, oh, you

195
00:11:16,740 --> 00:11:18,900
know what, I'm just going to unwrap or whatever.

196
00:11:18,900 --> 00:11:20,700
Tell people why.

197
00:11:20,700 --> 00:11:24,900
There might be a reason, but the last thing you want to do is have people just use your

198
00:11:24,900 --> 00:11:28,460
code, and all of a sudden it panics, and it poisons a mutex, and now they didn't think

199
00:11:28,460 --> 00:11:33,580
it was, and it just ends up being a bad time for everyone.

200
00:11:33,580 --> 00:11:40,700
So documentation is a highly valued, but often overlooked thing, and this was the common

201
00:11:40,700 --> 00:11:42,940
sentimentality in GitHub's open source survey.

202
00:11:42,940 --> 00:11:49,780
93% of people thought it was a problem, and only 60% of people ever don't actually contribute

203
00:11:49,780 --> 00:11:53,340
to the documentation, like, that's insane.

204
00:11:53,340 --> 00:11:56,980
Everyone sees it as a problem, but no one wants to contribute, so that means only 40%

205
00:11:56,980 --> 00:11:59,460
of people are contributing to these projects.

206
00:11:59,460 --> 00:12:05,700
You should also be that 40%, actually help spend the time to do that, and I get it.

207
00:12:05,700 --> 00:12:09,380
Most people feel like this when you tell them to do writing docs, and they're like, hey,

208
00:12:09,380 --> 00:12:10,380
I don't want to.

209
00:12:10,380 --> 00:12:15,700
That's a lot of work, but you will definitely and automatically look, you will make people

210
00:12:15,700 --> 00:12:20,220
feel like this when they see that, hey, you spent the time to write really, really good

211
00:12:20,220 --> 00:12:22,380
docs, and we all feel that way.

212
00:12:22,380 --> 00:12:25,020
It's awesome when you have documentation that makes your life easier.

213
00:12:25,020 --> 00:12:30,620
So yes, it's hard, but spend that time to do it, and I get it.

214
00:12:30,620 --> 00:12:35,420
Writing good documentation is super, super hard, and it's really hard to convey exactly

215
00:12:35,420 --> 00:12:40,220
what you're trying to say and have people care about it and, you know, tell them the

216
00:12:40,220 --> 00:12:44,380
right thing, but do spend that time on it.

217
00:12:44,380 --> 00:12:48,740
Trust me, it will do so much more for your create if you do it.

218
00:12:48,740 --> 00:12:53,980
Now the other thing that I find super important, but is often lacking, is examples.

219
00:12:54,020 --> 00:12:58,180
Too often, you will see a read me have the example in it, and then that will be the only

220
00:12:58,180 --> 00:13:01,260
example in the repo, and that's it.

221
00:13:01,260 --> 00:13:04,780
There's no non-trivial example that says, hey, here's how you do this really, really,

222
00:13:04,780 --> 00:13:08,140
really complicated thing with it, and more often than not, everyone's trying to do the

223
00:13:08,140 --> 00:13:12,660
really, really complicated thing, but no one's taking the time to write out how to do it.

224
00:13:12,660 --> 00:13:17,620
So things like the Russ Cookbook are a good example of, hey, here are these crates.

225
00:13:17,620 --> 00:13:20,940
We're trying to expand it and make it like, here's an easy way to do it, but, you know,

226
00:13:20,940 --> 00:13:22,900
it's a non-trivial thing.

227
00:13:22,900 --> 00:13:27,180
So if you can take the time to do examples beyond just the read me, I think a lot more

228
00:13:27,180 --> 00:13:31,660
people end up being happy with your crate.

229
00:13:31,660 --> 00:13:36,140
And I think one of the other things, and one that often is a contentious point for many

230
00:13:36,140 --> 00:13:41,300
people outside of the Russ community generally, is a code of conduct.

231
00:13:41,300 --> 00:13:43,100
You need to have one.

232
00:13:43,100 --> 00:13:47,540
It's not saying that you can't have disagreeing opinions or anything like that, it's just

233
00:13:47,540 --> 00:13:51,020
saying, hey, be kind to each other when you talk in this open space.

234
00:13:51,020 --> 00:13:52,020
It's important.

235
00:13:52,020 --> 00:13:55,780
And you'll find that a lot of people won't actually do anything with your code or have

236
00:13:55,780 --> 00:13:59,700
anything to do with it if they don't have a code of conduct, mostly because they can't

237
00:13:59,700 --> 00:14:06,460
feel like I want to contribute because I don't know if I will feel safe being here.

238
00:14:06,460 --> 00:14:10,460
And one of the important things is that even Graydon, the creator of Rust, said, I would

239
00:14:10,460 --> 00:14:14,500
not have built the language nor participated in a project of building the language if I

240
00:14:14,500 --> 00:14:19,340
had to subject myself to the kinds of discourse normally surrounding language-building communities.

241
00:14:19,340 --> 00:14:22,020
So you literally would not be in this room today if it had not been for the very first

242
00:14:22,020 --> 00:14:24,580
commit, which was a code of conduct.

243
00:14:24,580 --> 00:14:28,500
I cannot understate how important it is to have one.

244
00:14:28,500 --> 00:14:32,180
So you may have seen this guy, John DeMore, recently with all of Google's memos and things

245
00:14:32,180 --> 00:14:33,700
like that.

246
00:14:33,700 --> 00:14:38,260
And it's kind of weird, people are like, oh, it's free speech, and it's not.

247
00:14:38,260 --> 00:14:43,540
Companies are liable for their employees creating very hostile work environments, and whether

248
00:14:43,540 --> 00:14:48,020
you feel that way about that is a different story, but the Civil Rights Act of 1964 has

249
00:14:48,020 --> 00:14:52,340
been around for about 40 years now, and that has always been the winner, and that was why

250
00:14:52,340 --> 00:14:54,380
he was fired.

251
00:14:54,380 --> 00:14:58,860
Open Source does not have these kinds of legal protections or any financial incentives or

252
00:14:58,860 --> 00:14:59,860
anything like that.

253
00:14:59,860 --> 00:15:04,180
It really just comes down to us saying, hey, this is what we're going to have, and we want

254
00:15:04,180 --> 00:15:06,940
to have an inclusive community.

255
00:15:06,940 --> 00:15:09,380
So having a code of conduct is important.

256
00:15:09,380 --> 00:15:10,780
And so we need to create that environment.

257
00:15:10,780 --> 00:15:16,140
It means having a code of conduct, enforcing the code of conduct, and also having a moderation

258
00:15:16,140 --> 00:15:21,140
team to do that if your project ever gets too loud, or too big, I should say.

259
00:15:21,140 --> 00:15:26,220
Because if the core team is the one violating it and you don't have anyone to enforce it,

260
00:15:26,220 --> 00:15:29,800
and they're the ones who are supposed to enforce it, it ends up creating a weird kind of thing.

261
00:15:29,800 --> 00:15:36,740
So if your project ends up getting big, consider having a moderation team to do it.

262
00:15:36,740 --> 00:15:39,900
So there's a couple of different codes of conduct you can use.

263
00:15:39,900 --> 00:15:44,140
The contributors coveted is a free one that you can just download and use, and just say,

264
00:15:44,820 --> 00:15:48,380
you had to put in your project name or hoot of contact, but that's about it.

265
00:15:48,380 --> 00:15:54,620
There's also Rust code of conduct, which will allow you to very easily, is a very good example,

266
00:15:54,620 --> 00:15:57,900
very full-featured.

267
00:15:57,900 --> 00:16:02,660
So the last thing in our create checklist is announcing your create.

268
00:16:02,660 --> 00:16:04,740
And there's a couple of different places you can announce it.

269
00:16:04,740 --> 00:16:08,900
The Rust community has this awesome new thing called herald.community.rs that Florian Gilcher

270
00:16:08,900 --> 00:16:09,900
had worked on.

271
00:16:09,900 --> 00:16:13,500
And you can easily go to the site and say, hey, this is my new project.

272
00:16:13,500 --> 00:16:16,220
And then it gets dumped out onto Twitter, and people can see it.

273
00:16:16,220 --> 00:16:18,940
You can also announce it on your own Twitter and just tag Rustling.

274
00:16:18,940 --> 00:16:22,620
Steve Kladnik pretty much runs that, and he just retweets everything, or at least likes

275
00:16:22,620 --> 00:16:26,340
it.

276
00:16:26,340 --> 00:16:28,940
And there's also the user's forum, as well as the Rust subreddit.

277
00:16:28,940 --> 00:16:33,180
If you haven't been to any of those areas, people often announce in there.

278
00:16:33,180 --> 00:16:35,420
You could also announce it outside of the community.

279
00:16:35,420 --> 00:16:39,660
There's hacker news in our programming, or two good places to put it.

280
00:16:39,660 --> 00:16:42,500
But I say caution you.

281
00:16:42,500 --> 00:16:46,860
If you go there, it's not as warm and welcoming as Reddit, or at least the Rust community

282
00:16:46,860 --> 00:16:47,860
is.

283
00:16:47,860 --> 00:16:50,660
But if you do like that, and you do want to put it out there, those are also great places

284
00:16:50,660 --> 00:16:54,460
to really get some good, high visibility.

285
00:16:54,460 --> 00:16:57,260
So one of the things that a lot of people feel weird about is self-promotion.

286
00:16:57,260 --> 00:16:59,420
And I often do, too.

287
00:16:59,420 --> 00:17:01,780
But if you don't talk about your create, who's going to?

288
00:17:01,780 --> 00:17:06,060
If you don't tell people about it, they won't find it.

289
00:17:06,060 --> 00:17:10,300
So some things to be careful about, because perception is reality, a lot of times people

290
00:17:10,300 --> 00:17:13,900
will say, oh, it's my first create, or I'm a total Rust new, but that's fine.

291
00:17:13,900 --> 00:17:14,900
You can be new.

292
00:17:14,900 --> 00:17:16,740
Those are not bad things.

293
00:17:16,740 --> 00:17:19,140
But if you're announcing a create, you should...

294
00:17:19,140 --> 00:17:23,220
It's a difference between asking and saying, hey, I have a question, I'm new, versus this

295
00:17:23,220 --> 00:17:24,220
is my new thing.

296
00:17:24,220 --> 00:17:25,220
I want to show it off.

297
00:17:25,220 --> 00:17:29,500
You have to be confident in order to kind of get people to be interested.

298
00:17:29,500 --> 00:17:33,300
And we may not like to admit it, but it's very easy to have biases and go, oh, well,

299
00:17:33,300 --> 00:17:37,180
they're new, they won't know it as well, so why should I use it?

300
00:17:37,180 --> 00:17:39,180
Just don't do that.

301
00:17:39,180 --> 00:17:42,340
And the other thing is that it's very easy to have an undescriptive title, like what

302
00:17:42,340 --> 00:17:46,340
if I just said announcing fair says 1.0, it tells you nothing about what it does.

303
00:17:46,340 --> 00:17:50,260
So we have a little bit extra in there that says, hey, this is the name of the project,

304
00:17:50,260 --> 00:17:53,020
and this is a very brief description of what it does.

305
00:17:53,020 --> 00:17:58,500
Something that would fit in a Twitter tweet would be about a decent size.

306
00:17:58,500 --> 00:18:02,960
So if you have a library, be loud and proud about it.

307
00:18:02,960 --> 00:18:06,180
So there's a couple different ways you can announce your create.

308
00:18:06,180 --> 00:18:08,140
One of them is through a technical post.

309
00:18:08,140 --> 00:18:10,420
It's great because people learn something new.

310
00:18:10,420 --> 00:18:13,660
Your post helps grow the community because now people are talking about it, and now people

311
00:18:13,660 --> 00:18:18,260
will go, oh, hey, Rust is getting some traction, and then maybe you can convince your employers

312
00:18:18,260 --> 00:18:21,500
to use it because now more people are talking about it, right?

313
00:18:21,500 --> 00:18:24,460
I think most of us here would want that to be a thing.

314
00:18:24,460 --> 00:18:29,020
And like most people, you will never forget how you actually did the thing you talked

315
00:18:29,020 --> 00:18:34,620
about, and you can go back and look at it, and it's great because you wrote it all out.

316
00:18:34,620 --> 00:18:37,860
You can also do a demo.

317
00:18:37,860 --> 00:18:45,700
This here was a demo scene video that someone had done, and it was great.

318
00:18:45,700 --> 00:18:47,500
It was 52 kilobytes worth of code.

319
00:18:47,500 --> 00:18:52,900
It generated all the visuals without media, and it instantly showed everything about it,

320
00:18:52,900 --> 00:18:59,020
and it was way more impactful than if they had just written a blog post about it.

321
00:18:59,020 --> 00:19:01,580
Oh, well, there we go.

322
00:19:01,580 --> 00:19:08,700
So one of the other things that you can do is you can also make a bold claim, and there

323
00:19:08,700 --> 00:19:09,700
we go.

324
00:19:09,700 --> 00:19:10,900
Yeah, I love technical difficulties.

325
00:19:10,900 --> 00:19:11,900
It's great.

326
00:19:11,900 --> 00:19:15,700
You can make a bold claim and back it up with fax.

327
00:19:15,700 --> 00:19:23,820
Yeah, rip grep is faster than grep AG, get grep UCG, PT, and SIFT, and I think pretty

328
00:19:23,820 --> 00:19:28,500
much all of us when we saw that was like, what?

329
00:19:28,500 --> 00:19:30,700
There's just no way.

330
00:19:30,700 --> 00:19:36,500
And Burt Susie pretty much had all the data to back it up, and it was like, yeah, no,

331
00:19:36,500 --> 00:19:42,340
this did happen, and it's fast, and we all know that now, but it's a double-edged sword.

332
00:19:42,340 --> 00:19:47,700
If you do say something that is kind of ridiculous to most people, it can come back to bite you

333
00:19:47,700 --> 00:19:51,340
if you can't back it up with the right fax, but do consider that if what you're doing

334
00:19:51,340 --> 00:19:54,420
is really, really cool.

335
00:19:54,420 --> 00:19:56,100
You can also make a slick website to show it off.

336
00:19:56,100 --> 00:20:00,420
Personally, I like Rocket in that sense, because it's like, hey, cool.

337
00:20:00,420 --> 00:20:01,300
Here's what it does.

338
00:20:01,300 --> 00:20:05,380
Here's the API, here's the docs, and it presents it in a nice format, so it's a kind of combination

339
00:20:05,380 --> 00:20:11,780
of documentation as well as a nice on-the-eye presentation.

340
00:20:11,780 --> 00:20:15,020
There's also another example is Exa.

341
00:20:15,020 --> 00:20:16,980
It was just a simple LS replacement.

342
00:20:16,980 --> 00:20:17,980
It's a tool.

343
00:20:17,980 --> 00:20:19,700
It tells you how you install it here.

344
00:20:19,700 --> 00:20:20,700
That's where it is.

345
00:20:20,700 --> 00:20:23,740
But hey, it tells you what it does.

346
00:20:23,740 --> 00:20:24,740
It's short.

347
00:20:24,740 --> 00:20:25,740
It's simple.

348
00:20:25,740 --> 00:20:26,740
It's to the point.

349
00:20:26,740 --> 00:20:27,740
It looks nice.

350
00:20:27,740 --> 00:20:33,420
Now, choosing what fits best for your code kind of depends on what you're doing, right?

351
00:20:33,420 --> 00:20:38,340
Like you don't necessarily know if a technical post would be the right one or whatever.

352
00:20:38,340 --> 00:20:41,300
It all comes down to what you think is the best thing, and that is at the end of the

353
00:20:41,300 --> 00:20:43,020
day the important part.

354
00:20:43,020 --> 00:20:45,900
Choose what fits best for you.

355
00:20:45,900 --> 00:20:47,740
So Ferris has gone through all this.

356
00:20:47,740 --> 00:20:48,740
They've done it.

357
00:20:48,740 --> 00:20:49,740
It's pushthecreates.io.

358
00:20:49,740 --> 00:20:50,740
Actually, it is.

359
00:20:50,740 --> 00:20:54,460
You can actually go check it out right now if you wanted to.

360
00:20:54,460 --> 00:20:55,460
It's great.

361
00:20:55,460 --> 00:20:57,260
It's all done.

362
00:20:57,260 --> 00:21:00,900
Before I close out, I did want to talk about one tool that I think is the most important

363
00:21:00,900 --> 00:21:07,740
tool that will help you in pretty much everything with shipping and create, and that's empathy.

364
00:21:07,740 --> 00:21:12,540
Being able to look at the code and what you have as if you were someone else, would you

365
00:21:12,540 --> 00:21:14,180
like the documentation?

366
00:21:14,180 --> 00:21:17,380
Would you like the API as it stands?

367
00:21:17,380 --> 00:21:19,780
Would you feel safe and welcoming while you're here?

368
00:21:19,780 --> 00:21:23,620
All of these things can be done if you peer through your project as if you were someone

369
00:21:23,620 --> 00:21:24,620
else.

370
00:21:24,620 --> 00:21:29,260
If the answer to some of those questions is no, then you can go through and fix them.

371
00:21:29,260 --> 00:21:33,020
And empathy, I think, will be the easiest thing in order to figure out, hey, what do

372
00:21:33,020 --> 00:21:34,020
I need to change?

373
00:21:34,020 --> 00:21:36,940
What should I change about my stuff?

374
00:21:36,940 --> 00:21:39,660
Because your create is a lot more than just the code.

375
00:21:39,660 --> 00:21:40,660
It's all the metadata.

376
00:21:40,660 --> 00:21:41,660
It's all the interactions.

377
00:21:41,660 --> 00:21:43,500
It's all the social things.

378
00:21:43,500 --> 00:21:48,100
Coding is a social thing, and so if you have all that stuff that makes it easier for other

379
00:21:48,100 --> 00:21:51,780
people, your code will be successful.

380
00:21:51,780 --> 00:21:52,780
So thank you.

381
00:21:53,220 --> 00:21:55,220
That was everything I have for today.

382
00:21:55,220 --> 00:21:57,220
So, all right.

