1
00:00:00,000 --> 00:00:07,000
Hey guys, this is going to be a video on essentially an effective method to learn many different concepts quickly.

2
00:00:07,000 --> 00:00:13,000
This method is dubbed black boxing, and as you can see here I've hand drawn a cube to represent this, if you like this.

3
00:00:13,000 --> 00:00:19,000
So this allows you to apply many different techniques like algorithms, data structures, or just pieces of code in general.

4
00:00:19,000 --> 00:00:27,000
And it works for competitive programming, or even just general programming, because there's a lot of similarity between the two and the way the method is used.

5
00:00:27,000 --> 00:00:34,000
So in particular, I've used this a lot during some contests of mine to get where I am now.

6
00:00:34,000 --> 00:00:42,000
With a significant example being how I used it to solve a quite hard problem with a technique I didn't even know much about.

7
00:00:42,000 --> 00:00:48,000
Only a brief overview of what it did, and that ended up getting me 10th and saving my 7th star rating on codechef.

8
00:00:48,000 --> 00:00:51,000
So, yeah, this method works.

9
00:00:52,000 --> 00:01:00,000
And in fact, this is something we generally use all the time in general programming without even thinking much about it.

10
00:01:00,000 --> 00:01:02,000
So what even is a black box?

11
00:01:02,000 --> 00:01:09,000
Well, we can pull up Wikipedia's definition as support, but essentially it just means that it's some piece of code that does something,

12
00:01:09,000 --> 00:01:12,000
and we understand what it does, but not really how it does it.

13
00:01:12,000 --> 00:01:21,000
It's sort of, like they say, it's viewed in terms of its inputs and outputs, but not the internal mechanisms that are converting that input into the output.

14
00:01:21,000 --> 00:01:27,000
And the reason we don't understand what it does, the reason we don't understand how it does it is because we don't need to.

15
00:01:27,000 --> 00:01:35,000
Like many APIs are internal libraries, like we already use for many portions of our code, like input and output, for example.

16
00:01:35,000 --> 00:01:40,000
We let the pre-written code do the hidden magic and only worry about what we do with the results.

17
00:01:40,000 --> 00:01:45,000
And the cool thing about programs is that you can literally just copy and paste some piece of code in,

18
00:01:45,000 --> 00:01:49,000
and regardless of how much you understand it, it's still going to work.

19
00:01:49,000 --> 00:01:54,000
So let's take a very common example of sorting an array.

20
00:01:54,000 --> 00:02:01,000
For many languages, we use an internal algorithm to sort an array, some part of the programming languages library.

21
00:02:01,000 --> 00:02:09,000
And just as a brief refresher, if it's unfamiliar to you, sorting is just reordering elements in some kind of increasing order.

22
00:02:09,000 --> 00:02:14,000
And I'm also so proud of this cube drawing that I'm going to keep it here for this example.

23
00:02:14,000 --> 00:02:22,000
So often, in general, we do learn how this algorithm works sorting, or at least some viable sorting algorithm,

24
00:02:22,000 --> 00:02:28,000
just because it's like one of the common introductory things to programming and it's often a good exercise.

25
00:02:28,000 --> 00:02:32,000
But it's not necessary to use the library.

26
00:02:32,000 --> 00:02:35,000
Like a single function called does all the work for us.

27
00:02:35,000 --> 00:02:42,000
I mean, all we do is we call some sorting method or function, and that's it.

28
00:02:42,000 --> 00:02:45,000
We don't worry about what's going on inside.

29
00:02:45,000 --> 00:02:47,000
And other library uses work the same way.

30
00:02:47,000 --> 00:02:54,000
We simply use their functions without implementing them ourselves.

31
00:02:54,000 --> 00:03:01,000
A different example is femur trees or binary index trees, which is a topic from competitive programming.

32
00:03:01,000 --> 00:03:03,000
So if you already know these, great, then it's a good example.

33
00:03:03,000 --> 00:03:05,000
And if you don't, then that's fine.

34
00:03:05,000 --> 00:03:10,000
And the whole point of this is that it will only take me like a few seconds up to a minute to explain it.

35
00:03:10,000 --> 00:03:15,000
So the quick black box description of what it is, is it basically operates on an array.

36
00:03:15,000 --> 00:03:17,000
It supports two different operations.

37
00:03:17,000 --> 00:03:23,000
The first is that you can pick some index, some position in the array, and add some value x to it.

38
00:03:23,000 --> 00:03:30,000
And the second is that you can query the sum of the first x elements or the first i elements.

39
00:03:31,000 --> 00:03:34,000
Both of these operations take O of log n complexity.

40
00:03:34,000 --> 00:03:41,000
And it's O of n to initialize and O of n memory overall.

41
00:03:41,000 --> 00:03:43,000
And that's it.

42
00:03:43,000 --> 00:03:48,000
There is some complicated underlying bitwise logic that makes it work.

43
00:03:48,000 --> 00:03:52,000
But to use it, none of that is actually necessary to know.

44
00:03:52,000 --> 00:03:58,000
And in fact, I honestly don't even understand it myself because I've never bothered to because it's never been necessary.

45
00:03:58,000 --> 00:04:02,000
And nonetheless, I've solved many, many problems using this technique.

46
00:04:02,000 --> 00:04:09,000
So my template, which is the code you can see below or in front of you, is sort of structured like an API,

47
00:04:09,000 --> 00:04:15,000
where these add and query functions are just simply using the struct and telling it to do that.

48
00:04:18,000 --> 00:04:21,000
So now let's pull out the trusty paint for a demonstration.

49
00:04:21,000 --> 00:04:24,000
And if you're new to this channel, well, I basically use it for everything.

50
00:04:24,000 --> 00:04:27,000
So that will be how it goes.

51
00:04:27,000 --> 00:04:30,000
In this diagram, vertical distance represents time.

52
00:04:30,000 --> 00:04:37,000
And basically the standard strategy for learning is to pick some list of topics and then learn them one by one.

53
00:04:37,000 --> 00:04:40,000
However, this is rather slow.

54
00:04:40,000 --> 00:04:47,000
And during the period of learning, for the topics that you haven't even looked at yet, you won't know anything or much about any of them.

55
00:04:47,000 --> 00:04:55,000
So say some contest comes and you'd want to do it because the contest and contests are always good for you to learn from,

56
00:04:55,000 --> 00:04:58,000
which I made a video on.

57
00:04:58,000 --> 00:05:02,000
Essentially, you're not going to be able to do anything.

58
00:05:02,000 --> 00:05:09,000
Maybe you know enough about topic A, which you've learned some about to be able to do it.

59
00:05:09,000 --> 00:05:14,000
But for topics, for concepts B and C, you're just totally screwed.

60
00:05:14,000 --> 00:05:16,000
There's nothing you can do. You don't really know about them.

61
00:05:16,000 --> 00:05:20,000
So if those show up, there's nothing you'll be able to do.

62
00:05:20,000 --> 00:05:23,000
So it's sort of bad in the intermediate step.

63
00:05:23,000 --> 00:05:31,000
But now let's introduce black boxing, which is much closer to the unknown side of things because it doesn't take that much time to learn it.

64
00:05:31,000 --> 00:05:34,000
It's an easy gap to cross versus learning an entire thing.

65
00:05:34,000 --> 00:05:38,000
Now say I black box all three of the concepts before starting to fully learn them.

66
00:05:38,000 --> 00:05:42,000
Not necessarily as a substitute for learning them just as a start.

67
00:05:42,000 --> 00:05:45,000
And I think this should be the way that black boxing is used.

68
00:05:45,000 --> 00:05:52,000
It's still a good idea to eventually learn things because it's sort of going to be necessary if you ever want to make modifications to something,

69
00:05:52,000 --> 00:05:55,000
which does show up somewhat frequently.

70
00:05:55,000 --> 00:06:05,000
But it's a good first step and it will let you be informed about all of the algorithms and data structures and everything that you're interested in using.

71
00:06:05,000 --> 00:06:14,000
So this black boxing may also involve solving a few problems or just playing with it a bit, getting a bit of practice, just to get comfortable.

72
00:06:14,000 --> 00:06:17,000
And the plan is to eventually learn them, of course.

73
00:06:17,000 --> 00:06:21,000
But just starting with these techniques as black boxes is a good enough introduction to them.

74
00:06:22,000 --> 00:06:25,000
Now in this scenario, say the contest happens.

75
00:06:25,000 --> 00:06:29,000
And I've already black boxed these three and I'm in the process of learning concept A.

76
00:06:29,000 --> 00:06:36,000
But I'm already at the point where I'm able to use all three concepts effectively.

77
00:06:36,000 --> 00:06:41,000
So I know enough about all three of the topics to solve the problems that use them.

78
00:06:41,000 --> 00:06:42,000
So I do.

79
00:06:42,000 --> 00:06:48,000
And I do much better on this contest potentially if it has these topics than if I hadn't used the black boxing.

80
00:06:49,000 --> 00:06:54,000
And I got some practice out of it because now I know these problems are going to use these concepts.

81
00:06:54,000 --> 00:06:59,000
So black boxing is basically like an intermediate step, except it has no drawbacks.

82
00:06:59,000 --> 00:07:04,000
You're going to learn this stuff anyway, so it can really only benefit you and the benefits are still really good.

83
00:07:06,000 --> 00:07:08,000
So let's talk advantages.

84
00:07:08,000 --> 00:07:09,000
Why is this useful?

85
00:07:09,000 --> 00:07:16,000
It definitely works very quickly in that the information required to use something is much less than the information required to fully understand something.

86
00:07:16,000 --> 00:07:26,000
As you could have seen from my previous examples, it took like maybe around a minute or two just to explain the black box rendition of some concept.

87
00:07:28,000 --> 00:07:34,000
Especially for rather hard topics, ones that can take like hours or even multiple days to learn and grasp.

88
00:07:34,000 --> 00:07:36,000
This saves a lot of the work at least initially.

89
00:07:37,000 --> 00:07:41,000
And allows you to have most of the necessary information very quickly.

90
00:07:41,000 --> 00:07:46,000
And then when you decide to learn it later, you'll be able to solidify that knowledge later on as you formally learn things.

91
00:07:47,000 --> 00:07:55,000
So if you encounter a problem related to something you're not so well versed in, perhaps you have it black boxed in your head, but you don't exactly understand it yet.

92
00:07:55,000 --> 00:07:57,000
At the very least, you do know what to look for.

93
00:07:57,000 --> 00:08:02,000
You know that this was the concept involved, you're just not that good at that concept yet.

94
00:08:02,000 --> 00:08:07,000
So it lets you sort of figure out where you should go from a certain point.

95
00:08:08,000 --> 00:08:11,000
It also allows you to identify related problems as you come across them.

96
00:08:11,000 --> 00:08:17,000
So yeah, when you do eventually learn something, you already know places where you can practice and apply it.

97
00:08:17,000 --> 00:08:25,000
You've already found some practice problems for yourself by just having the black box and recognizing the certain problem requires a certain concept.

98
00:08:27,000 --> 00:08:33,000
It will ultimately keep your learning focused because you already know what everything is doing, you know what the purpose of it is.

99
00:08:34,000 --> 00:08:41,000
All you're doing once you transition from having something black boxed to learning it normally, you're just figuring out how it works.

100
00:08:41,000 --> 00:08:47,000
You already know what it does, you already know everything that's required to use it, you're just understanding the internal mechanisms of it.

101
00:08:47,000 --> 00:08:57,000
And also on that note, when you understand the underlying purpose of something and you're really like acquainted with it, it makes it a lot less scary to learn it for real because you know the end result already.

102
00:08:57,000 --> 00:08:59,000
It's just figuring out how it gets there.

103
00:09:00,000 --> 00:09:06,000
Now this wouldn't be one of my videos if I didn't take every opportunity to flex.

104
00:09:06,000 --> 00:09:11,000
So here's some examples from my own experience where this black boxing has actually worked for me.

105
00:09:11,000 --> 00:09:23,000
As I mentioned in the beginning, there was one where I used a complicated concept that I didn't really know much about to get 10th place in a contest and again retain my 7th star ready.

106
00:09:23,000 --> 00:09:29,000
And this was an example of using a suffix array, which is a complicated, yeah, like I said, a complicated concept.

107
00:09:29,000 --> 00:09:37,000
It's not really related to this video so you don't have to know it to understand this, but the point is that I essentially had this black boxed.

108
00:09:37,000 --> 00:09:43,000
I understood what this algorithm did and what it produced, but had no idea how it worked.

109
00:09:43,000 --> 00:09:48,000
And just because of that, I was able to copy paste it and make it work.

110
00:09:49,000 --> 00:09:53,000
And yeah, as clearly it worked out.

111
00:09:53,000 --> 00:10:03,000
Two other examples, one of them was where I actually learned something in contest using a very cool library called the Atcoder library.

112
00:10:03,000 --> 00:10:16,000
And this library is nice because it describes things in a black box way where it tells you the functions and what it does and their complexities

113
00:10:16,000 --> 00:10:20,000
and everything you'd ever need to know to use it, but it doesn't need to give details on the code.

114
00:10:20,000 --> 00:10:27,000
So it's very useful for someone who's taking the black boxing approach because it gives you exactly what you need for everything.

115
00:10:27,000 --> 00:10:32,000
So I actually learned this thing in contest and then was able to solve the problem using it.

116
00:10:32,000 --> 00:10:36,000
And yeah, that worked out too.

117
00:10:37,000 --> 00:10:47,000
And then a separate example is an even harder algorithm called the convex hull trick, which is essentially something I've been using for a long time.

118
00:10:47,000 --> 00:10:52,000
I made a stream on it without even understanding how it works just because black boxing was so effective.

119
00:10:52,000 --> 00:11:01,000
And I also saved my rating in another hard code chef contest by copy pasting convex hull trick in that.

120
00:11:01,000 --> 00:11:05,000
And that got me, I believe, 13th.

121
00:11:05,000 --> 00:11:14,000
So showing this code, if you'll notice, the only things that really matter are the two functions, insert line, which will insert a line.

122
00:11:14,000 --> 00:11:20,000
Even if you don't understand what that means, it's just simply there are two functions that control everything and everything else is internal.

123
00:11:20,000 --> 00:11:28,000
The insert line and eval functions are the API and everything else is magic for all I know.

124
00:11:28,000 --> 00:11:33,000
So a bit of advice on the practicality of using the black box method.

125
00:11:33,000 --> 00:11:38,000
I mean, how do you even find working code without having to understand and produce yourself, right?

126
00:11:38,000 --> 00:11:44,000
Well, as it turns out, there are plenty of well tested and useful libraries that contain code for a lot of different things.

127
00:11:44,000 --> 00:11:50,000
I'll include all of these in the description, but a brief overview of what some of them do.

128
00:11:50,000 --> 00:11:57,000
The at coder library or ACL is a working and a very broad library with sort of black box style documentation.

129
00:11:57,000 --> 00:12:07,000
They give the complexity and the utility, the functions, what the code does, but not necessarily how the code works because it's not necessary.

130
00:12:07,000 --> 00:12:11,000
So it basically aligns exactly with how black boxing works.

131
00:12:11,000 --> 00:12:19,000
There's a site called CP algorithms, which gives, and by the way, CP is for competitive programming, not the other meaning of the acronym.

132
00:12:19,000 --> 00:12:23,000
But it gives both code and explanations for it.

133
00:12:23,000 --> 00:12:31,000
But the important thing is that it gives full code without any sort of necessary interpretation most of the time.

134
00:12:31,000 --> 00:12:35,000
Some pages aren't perfect, but most of the time it will give full code.

135
00:12:35,000 --> 00:12:46,000
There are also some other basic libraries like Cactal, I believe that's how you pronounce that, and also a library by Ben Q, one of the top competitive programmers currently second on code for this.

136
00:12:46,000 --> 00:12:55,000
And if you want, I also have my own library with some stuff, but it's not too friendly for anyone who isn't me.

137
00:12:55,000 --> 00:13:02,000
So possibly I'll clean it up in the future, but I would recommend using some of the other ones instead of mine.

138
00:13:02,000 --> 00:13:08,000
And I'm sure there are also probably plenty of others that you could find on the internet.

139
00:13:08,000 --> 00:13:10,000
Alright, so that's black boxing.

140
00:13:10,000 --> 00:13:16,000
And whether you choose to use it or not is totally up to you, but I would say it can't hurt for sure.

141
00:13:16,000 --> 00:13:27,000
It takes a really short time, like mere minutes for a single topic, and it involves information that you would eventually need to have anyway when you're learning something because it's the utility.

142
00:13:27,000 --> 00:13:29,000
It's what the thing actually does.

143
00:13:29,000 --> 00:13:40,000
And it also gives you a brief but sufficient, sufficient for using it, introduction to topics, allowing you to use them much quicker than you'd be able to if you decided to learn them all fully in sequence.

144
00:13:40,000 --> 00:13:52,000
Now, if you're also looking for some place to try and learn these things, there are some of the websites I mentioned above, but to self-promote a little bit because I have to shove that in too.

145
00:13:52,000 --> 00:14:02,000
So I also go over various topics on my channel, so you may want to check the rest of that out and potentially subscribe if you maybe want to possibly potentially.

146
00:14:02,000 --> 00:14:08,000
And yeah, um, sorry, that's all I have. Yeah, see you guys.

