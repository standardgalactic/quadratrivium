start	end	text
0	7000	Hey guys, this is going to be a video on essentially an effective method to learn many different concepts quickly.
7000	13000	This method is dubbed black boxing, and as you can see here I've hand drawn a cube to represent this, if you like this.
13000	19000	So this allows you to apply many different techniques like algorithms, data structures, or just pieces of code in general.
19000	27000	And it works for competitive programming, or even just general programming, because there's a lot of similarity between the two and the way the method is used.
27000	34000	So in particular, I've used this a lot during some contests of mine to get where I am now.
34000	42000	With a significant example being how I used it to solve a quite hard problem with a technique I didn't even know much about.
42000	48000	Only a brief overview of what it did, and that ended up getting me 10th and saving my 7th star rating on codechef.
48000	51000	So, yeah, this method works.
52000	60000	And in fact, this is something we generally use all the time in general programming without even thinking much about it.
60000	62000	So what even is a black box?
62000	69000	Well, we can pull up Wikipedia's definition as support, but essentially it just means that it's some piece of code that does something,
69000	72000	and we understand what it does, but not really how it does it.
72000	81000	It's sort of, like they say, it's viewed in terms of its inputs and outputs, but not the internal mechanisms that are converting that input into the output.
81000	87000	And the reason we don't understand what it does, the reason we don't understand how it does it is because we don't need to.
87000	95000	Like many APIs are internal libraries, like we already use for many portions of our code, like input and output, for example.
95000	100000	We let the pre-written code do the hidden magic and only worry about what we do with the results.
100000	105000	And the cool thing about programs is that you can literally just copy and paste some piece of code in,
105000	109000	and regardless of how much you understand it, it's still going to work.
109000	114000	So let's take a very common example of sorting an array.
114000	121000	For many languages, we use an internal algorithm to sort an array, some part of the programming languages library.
121000	129000	And just as a brief refresher, if it's unfamiliar to you, sorting is just reordering elements in some kind of increasing order.
129000	134000	And I'm also so proud of this cube drawing that I'm going to keep it here for this example.
134000	142000	So often, in general, we do learn how this algorithm works sorting, or at least some viable sorting algorithm,
142000	148000	just because it's like one of the common introductory things to programming and it's often a good exercise.
148000	152000	But it's not necessary to use the library.
152000	155000	Like a single function called does all the work for us.
155000	162000	I mean, all we do is we call some sorting method or function, and that's it.
162000	165000	We don't worry about what's going on inside.
165000	167000	And other library uses work the same way.
167000	174000	We simply use their functions without implementing them ourselves.
174000	181000	A different example is femur trees or binary index trees, which is a topic from competitive programming.
181000	183000	So if you already know these, great, then it's a good example.
183000	185000	And if you don't, then that's fine.
185000	190000	And the whole point of this is that it will only take me like a few seconds up to a minute to explain it.
190000	195000	So the quick black box description of what it is, is it basically operates on an array.
195000	197000	It supports two different operations.
197000	203000	The first is that you can pick some index, some position in the array, and add some value x to it.
203000	210000	And the second is that you can query the sum of the first x elements or the first i elements.
211000	214000	Both of these operations take O of log n complexity.
214000	221000	And it's O of n to initialize and O of n memory overall.
221000	223000	And that's it.
223000	228000	There is some complicated underlying bitwise logic that makes it work.
228000	232000	But to use it, none of that is actually necessary to know.
232000	238000	And in fact, I honestly don't even understand it myself because I've never bothered to because it's never been necessary.
238000	242000	And nonetheless, I've solved many, many problems using this technique.
242000	249000	So my template, which is the code you can see below or in front of you, is sort of structured like an API,
249000	255000	where these add and query functions are just simply using the struct and telling it to do that.
258000	261000	So now let's pull out the trusty paint for a demonstration.
261000	264000	And if you're new to this channel, well, I basically use it for everything.
264000	267000	So that will be how it goes.
267000	270000	In this diagram, vertical distance represents time.
270000	277000	And basically the standard strategy for learning is to pick some list of topics and then learn them one by one.
277000	280000	However, this is rather slow.
280000	287000	And during the period of learning, for the topics that you haven't even looked at yet, you won't know anything or much about any of them.
287000	295000	So say some contest comes and you'd want to do it because the contest and contests are always good for you to learn from,
295000	298000	which I made a video on.
298000	302000	Essentially, you're not going to be able to do anything.
302000	309000	Maybe you know enough about topic A, which you've learned some about to be able to do it.
309000	314000	But for topics, for concepts B and C, you're just totally screwed.
314000	316000	There's nothing you can do. You don't really know about them.
316000	320000	So if those show up, there's nothing you'll be able to do.
320000	323000	So it's sort of bad in the intermediate step.
323000	331000	But now let's introduce black boxing, which is much closer to the unknown side of things because it doesn't take that much time to learn it.
331000	334000	It's an easy gap to cross versus learning an entire thing.
334000	338000	Now say I black box all three of the concepts before starting to fully learn them.
338000	342000	Not necessarily as a substitute for learning them just as a start.
342000	345000	And I think this should be the way that black boxing is used.
345000	352000	It's still a good idea to eventually learn things because it's sort of going to be necessary if you ever want to make modifications to something,
352000	355000	which does show up somewhat frequently.
355000	365000	But it's a good first step and it will let you be informed about all of the algorithms and data structures and everything that you're interested in using.
365000	374000	So this black boxing may also involve solving a few problems or just playing with it a bit, getting a bit of practice, just to get comfortable.
374000	377000	And the plan is to eventually learn them, of course.
377000	381000	But just starting with these techniques as black boxes is a good enough introduction to them.
382000	385000	Now in this scenario, say the contest happens.
385000	389000	And I've already black boxed these three and I'm in the process of learning concept A.
389000	396000	But I'm already at the point where I'm able to use all three concepts effectively.
396000	401000	So I know enough about all three of the topics to solve the problems that use them.
401000	402000	So I do.
402000	408000	And I do much better on this contest potentially if it has these topics than if I hadn't used the black boxing.
409000	414000	And I got some practice out of it because now I know these problems are going to use these concepts.
414000	419000	So black boxing is basically like an intermediate step, except it has no drawbacks.
419000	424000	You're going to learn this stuff anyway, so it can really only benefit you and the benefits are still really good.
426000	428000	So let's talk advantages.
428000	429000	Why is this useful?
429000	436000	It definitely works very quickly in that the information required to use something is much less than the information required to fully understand something.
436000	446000	As you could have seen from my previous examples, it took like maybe around a minute or two just to explain the black box rendition of some concept.
448000	454000	Especially for rather hard topics, ones that can take like hours or even multiple days to learn and grasp.
454000	456000	This saves a lot of the work at least initially.
457000	461000	And allows you to have most of the necessary information very quickly.
461000	466000	And then when you decide to learn it later, you'll be able to solidify that knowledge later on as you formally learn things.
467000	475000	So if you encounter a problem related to something you're not so well versed in, perhaps you have it black boxed in your head, but you don't exactly understand it yet.
475000	477000	At the very least, you do know what to look for.
477000	482000	You know that this was the concept involved, you're just not that good at that concept yet.
482000	487000	So it lets you sort of figure out where you should go from a certain point.
488000	491000	It also allows you to identify related problems as you come across them.
491000	497000	So yeah, when you do eventually learn something, you already know places where you can practice and apply it.
497000	505000	You've already found some practice problems for yourself by just having the black box and recognizing the certain problem requires a certain concept.
507000	513000	It will ultimately keep your learning focused because you already know what everything is doing, you know what the purpose of it is.
514000	521000	All you're doing once you transition from having something black boxed to learning it normally, you're just figuring out how it works.
521000	527000	You already know what it does, you already know everything that's required to use it, you're just understanding the internal mechanisms of it.
527000	537000	And also on that note, when you understand the underlying purpose of something and you're really like acquainted with it, it makes it a lot less scary to learn it for real because you know the end result already.
537000	539000	It's just figuring out how it gets there.
540000	546000	Now this wouldn't be one of my videos if I didn't take every opportunity to flex.
546000	551000	So here's some examples from my own experience where this black boxing has actually worked for me.
551000	563000	As I mentioned in the beginning, there was one where I used a complicated concept that I didn't really know much about to get 10th place in a contest and again retain my 7th star ready.
563000	569000	And this was an example of using a suffix array, which is a complicated, yeah, like I said, a complicated concept.
569000	577000	It's not really related to this video so you don't have to know it to understand this, but the point is that I essentially had this black boxed.
577000	583000	I understood what this algorithm did and what it produced, but had no idea how it worked.
583000	588000	And just because of that, I was able to copy paste it and make it work.
589000	593000	And yeah, as clearly it worked out.
593000	603000	Two other examples, one of them was where I actually learned something in contest using a very cool library called the Atcoder library.
603000	616000	And this library is nice because it describes things in a black box way where it tells you the functions and what it does and their complexities
616000	620000	and everything you'd ever need to know to use it, but it doesn't need to give details on the code.
620000	627000	So it's very useful for someone who's taking the black boxing approach because it gives you exactly what you need for everything.
627000	632000	So I actually learned this thing in contest and then was able to solve the problem using it.
632000	636000	And yeah, that worked out too.
637000	647000	And then a separate example is an even harder algorithm called the convex hull trick, which is essentially something I've been using for a long time.
647000	652000	I made a stream on it without even understanding how it works just because black boxing was so effective.
652000	661000	And I also saved my rating in another hard code chef contest by copy pasting convex hull trick in that.
661000	665000	And that got me, I believe, 13th.
665000	674000	So showing this code, if you'll notice, the only things that really matter are the two functions, insert line, which will insert a line.
674000	680000	Even if you don't understand what that means, it's just simply there are two functions that control everything and everything else is internal.
680000	688000	The insert line and eval functions are the API and everything else is magic for all I know.
688000	693000	So a bit of advice on the practicality of using the black box method.
693000	698000	I mean, how do you even find working code without having to understand and produce yourself, right?
698000	704000	Well, as it turns out, there are plenty of well tested and useful libraries that contain code for a lot of different things.
704000	710000	I'll include all of these in the description, but a brief overview of what some of them do.
710000	717000	The at coder library or ACL is a working and a very broad library with sort of black box style documentation.
717000	727000	They give the complexity and the utility, the functions, what the code does, but not necessarily how the code works because it's not necessary.
727000	731000	So it basically aligns exactly with how black boxing works.
731000	739000	There's a site called CP algorithms, which gives, and by the way, CP is for competitive programming, not the other meaning of the acronym.
739000	743000	But it gives both code and explanations for it.
743000	751000	But the important thing is that it gives full code without any sort of necessary interpretation most of the time.
751000	755000	Some pages aren't perfect, but most of the time it will give full code.
755000	766000	There are also some other basic libraries like Cactal, I believe that's how you pronounce that, and also a library by Ben Q, one of the top competitive programmers currently second on code for this.
766000	775000	And if you want, I also have my own library with some stuff, but it's not too friendly for anyone who isn't me.
775000	782000	So possibly I'll clean it up in the future, but I would recommend using some of the other ones instead of mine.
782000	788000	And I'm sure there are also probably plenty of others that you could find on the internet.
788000	790000	Alright, so that's black boxing.
790000	796000	And whether you choose to use it or not is totally up to you, but I would say it can't hurt for sure.
796000	807000	It takes a really short time, like mere minutes for a single topic, and it involves information that you would eventually need to have anyway when you're learning something because it's the utility.
807000	809000	It's what the thing actually does.
809000	820000	And it also gives you a brief but sufficient, sufficient for using it, introduction to topics, allowing you to use them much quicker than you'd be able to if you decided to learn them all fully in sequence.
820000	832000	Now, if you're also looking for some place to try and learn these things, there are some of the websites I mentioned above, but to self-promote a little bit because I have to shove that in too.
832000	842000	So I also go over various topics on my channel, so you may want to check the rest of that out and potentially subscribe if you maybe want to possibly potentially.
842000	848000	And yeah, um, sorry, that's all I have. Yeah, see you guys.
