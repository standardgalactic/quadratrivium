{"text": " Hi, my name is Brandon Shanahan, and today I'm going to talk about Bayesian neural networks. In the first part of the talk, I'll give a brief, high-level introduction to neural networks that broadly covers what they are, what they do, and how they work. I'll spend a bit of time talking about the stochastic optimization procedure employed by neural networks, and then I'll discuss two common neural network architectures that are used in experiments in a later section. Next, I'll give an equivalent description that frames neural networks as conditional probabilistic models and outline the parallels between the two definitions. I'll then discuss the shortcomings of these models, which will motivate the introduction of Bayesian methods in neural network. Finally, I'll discuss the results of two experiments employing Bayesian neural network. One regression experiment compares the results obtained by a plain neural network and a Bayesian neural network, and one image classification experiment that further illustrates the benefits of Bayesian learning. Neural networks have been rigorously shown to be universal approximators capable of representing arbitrarily complex nonlinear functions to arbitrary precision. As such, neural networks are used in many tasks which require learning incredibly complex mappings between input and output spaces, such as in speech recognition and text generation, sentiment analysis, and image segmentation and classification. To take a concrete example, say we're building a network for use in an autonomous vehicle which specifically performs object detection. You can imagine a function that maps, say, an image of a typical city street from the point of view of the driver to a set of categorical boundaries, each of which represents a pedestrian, another car, a traffic light or street sign, a crosswalk, and so on, is highly nonlinear. The function also needs to be extremely adaptable as it's being computed in near real time and the data it acts on isn't static. The car is moving, pedestrians are walking, other cars are moving, lights are changing, and no two images that it captures will be identical. A scenario like this makes it clear that it's not sufficient for our network to simply learn a deterministic mapping based on a set of training data that it's seen before. In other words, the network needs to be able to generalize well and extrapolate to new data based on the context of data that it's already seen, but it also needs to have some notion of the uncertainty inherent in its decisions to be able to consider this uncertainty when taking in action in order to prevent making overconfident incorrect decisions. The basic computational unit of a neural network is referred to as an artificial neuron, or more simply, a neuron, in which it develops historically as a crude mathematical model of a biological neuron. A neuron takes some input data to which it applies an affine transformation with a weight matrix W and bias vector B, both of which are learned parameters, and finally, a nonlinear activation function as its output. The simplest neural network architecture is a fully connected feedforward network. Neurons are arranged in layers, which are stacked one on top of the other, starting from the input layer, followed by an arbitrary number of intermediate hidden layers, and finally, an output layer. This architecture gets its name from the fact that a neuron in one layer is fully connected to every neuron in the two layers at sandwich between, and a neuron's output is fed forward as input to every neuron in the next layer. The key to a neural network's ability to learn nonlinear representations of their input are the use of nonlinear activation functions. Simply applying successive affine transformations at each layer of a network is equivalent to applying a single affine transformation. Therefore, a neural network that only uses an identity activation function at each neuron can only learn a linear mapping between its input and output spaces. The form of a network's output layer depends on the type of data it processes and the network's intended task. For classification of a labeled categorical data, the output layer consists of C neurons, which includes a probability distribution over the C possible classes of the data, and assigns a prediction which maximizes this distribution. It then computes a cross-entropy loss function between the true and predicted distributions of the data, which is usually averaged over the entire frame set. For regression, the output layer consists of a single neuron, which computes an identity activation function and, typically, either the mean absolute error or mean squared error loss between the true and predicted output. It's important to note here that while the output layer computes an identity activation function, hidden layers still compute nonlinear activation functions. Neural networks are represented internally by what's referred to as a directed acyclic graph, which allows for decomposing complex functions into a sequence of simple arithmetic operations. This is especially important because neural networks learn their parameters using optimization procedures such as stochastic gradient descent for one of its many variants, which require computing the gradient of the loss function with respect to the network's input. For functions whose gradients do not have a simple closed form expression, this internal representation allows the computation of a single intractable gradient to be achieved instead by taking simple local gradients with respect to intermediate variables which are defined and cached locally during training. Gradients are first computed with respect to neurons in the output layer and then propagated backwards through the network's hidden layers to the input layer by a straightforward application of the chain rule. At each neuron, its parameters are updated by taking a step in the direction of steepest gradient descent, with the step size controlled by a hyperparameter lambda referred to as the learning rate. Training proceeds by performing a forward pass with the entire training data set and computing the average loss, which is then back propagated through all the network parameters to the input layer. This forward-backward sequence is referred to as one training epoch. Parameters are modified during each epoch, and the network is said to have converged when the loss function plateaus over many subsequent forward passes. Another important neural network architecture is the convolutional neural network, which is designed specifically to operate on image data and to take advantage of the additional structure of an information contained in an image's color channels. Convolutional neural networks tend to learn incredibly rich, local, and translationally invariant features that make them extremely powerful, and they have been the primary building block in most state-of-the-art neural network designs in the last decade. Convolutional neural networks are distinct for the use of convolutional layers, which differ from fully connected layers in several important ways. First, while each neuron in a fully connected layer will see the entire output of the previous layer, each convolutional feature map has a limited receptive field and only sees a fixed region of the input. Additionally, a fully connected neuron computes an affine transformation by acting on a flattened, vectorized representation of the input image, whereas a feature map is formed by convolving the color channels in its receptive field with a set of filters, which are the network's learned parameters. In other words, whereas a neuron in a fully connected layer acts on a one-dimensional input vector to produce a one-dimensional feature vector, a convolutional layer acts on a three-dimensional image volume with dimensions of width, height, and color channels to produce a three-dimensional feature map with dimensions of receptive field width, receptive field height, and filter size. Neural networks can be equivalently understood without making any references to their biological motivations or internal architecture. Here, we define a neural network as a conditional probabilistic model, which is conditioned on a set of training data D and its learned weight and bias parameters, which we simply refer to as theta. Given some new input x hat, the network computes a probability distribution over its entire output space and selects an output y hat, which maximizes the distribution. To draw an equivalence between these two descriptions, in a classification setting, the output space y is the set of all possible classes, and the model p is a categorical distribution, and the corresponding loss function is the cross-entropy loss. For regression, the output space y is the real numbers, and p is a Gaussian distribution, and the corresponding loss function is the mean squared error loss. Nothing about the actual implementation changes and parameter optimization proceeds by back propagation, as described in the previous section. Parameters learned during back propagation are maximum likelihood estimates, or rather stochastic approximations. This likelihood model presents several shortcomings. Networks whose parameters are maximum likelihood estimates result in predictions that are deterministic, in the sense that, once trained, predictions of a given input corresponds to a point estimate, and will always result in the same output. And these networks are therefore prone to overfitting and unable to express uncertainty about their prediction. This can be especially problematic when generalizing to data that they have not been trained on. Techniques such as L1 and L2 regularization, commonly referred to as ridge and lasso respectively, are commonly used in practice to counteract overfitting. But these networks are nonetheless deterministic and unable to express uncertainty in their predictions. Bayesian inference for neural networks proceeds by defining a prior distribution over the parameters of the network, and applying Bayes' rule to compute their posterior distribution. Predictive queries about some new data X-hat correspond to computing the predicted distribution of an unknown label Y-hat given X-hat by taking the expectation of the conditional distribution of the new data with respect to the network's posterior. Every posterior weighted parameter configuration contributes to the prediction of the label Y-hat given the data X-hat. Therefore, taking the expectation under the posterior is equivalent to computing a weighted average of predictions from an ensemble of plain neural networks, each of whose parameters are drawn from the same shared distribution. Because their predictions correspond to posterior samples, the ability to express uncertainty in the parameters in subsequent observations is built into Bayesian neural networks. This ensemble averaging in subsequent parameter uncertainty has regularizing effects on Bayesian neural network predictions, which are equivalent to the regularization methods previously discussed. As with most interesting Bayesian models, computing the posterior distribution is analytically intractable and must be approximated, which is generally done using sampling methods such as Markov, J, and Monte Carlo. Bayesian neural networks instead frame posterior inference as an optimization problem over the parameters by of a target variational distribution by minimizing the cubic Liebler divergence or KL divergence between the variational distribution and the true posterior. At inference time, the network parameters theta are instead sampled from the variational distribution. The corresponding loss function is commonly referred to as the variational free energy or the variational lower bound, and represents its tradeoff between maximizing the expected log likelihood of the data with respect to the variational distribution, referred to as the likelihood cost, and minimizing the KL divergence between the variational distribution and the network's prior, referred to as the complexity cost. Equivalently, variational free energy represents a tradeoff between satisfying the complexity of the data and the simplicity of the network's prior distribution. Because we're minimizing an expectation with respect to the known variational distribution, we can approximate the true loss by instead sampling from the variational distribution and computing the approximate loss in a process similar to the aforementioned Markov, J, and Monte Carlo approach. By assuming the samples from the posterior are normally distributed and uncorrelated, we can apply a local reparameterization technique which allows us to sample parameter free white noise epsilon, then shift and scale epsilon by a deterministic function of mu and rho, mean and standard deviation of the variational distribution respectively, to obtain a sample theta from the variational posterior. In this context, the back propagation is slightly modified and referred to as Bayes by back prop. Now, gradients are taken with respect to the variational parameters mu and rho, which are then updated by taking a step in the direction of steepest gradient descent. Network training otherwise proceeds as normal, performing alternating forward passes and backward passes until the network parameters are converged. I'll now describe two experiments employing Bayesian neural networks. The first is a regression experiment on a toy data set which compares the performance of the plane to the forward fully connected network to that of an identical Bayesian neural network. Training samples are generated using 2048 equally spaced points between zero and one half. Both neural network architectures consist of two fully connected hidden layers with 250 neurons each in RELU activations and an output layer with a single neuron and identity activation. Training occurred over 500 epochs with many batches of 32 samples. Once fully trained, each network was used over 500 trials to predict the test set 4096 samples run uniformly randomly from the closed interval from minus one half to one, and the results were averaged and are given in the bottom to bottom way. For the plane neural networks results are on top and the Bayesian networks results are on the bottom. The red line is the mean prediction over 500 trials and the dark blue and light blue regions are the one sigma and two sigma confidence intervals respectively. A few things are interesting. First off, the plane neural network underestimates the true variance of the test data in the region of the space that it was trained on, which is maybe not so surprising given that we know how prominent these types of networks are overfitting. However, in regions of the test base where the networks have not been trained, the plane neural network chooses a particular extrapolation of the training data and subsequent test predictions have extremely low variance, which goes towards zero as points in the test base gets further from the training set. The Bayesian network on the other hand accurately expresses the variance in the training data when making predictions, which can be seen by the fact that essentially all of the training samples fall within two standard deviations of the Bayesian network mean. Compared to the plane network, however, the variance in the Bayesian network's prediction actually grows in regions of the test base further from the training set. Because each of the Bayesian network's predictions correspond to the prediction of an ensemble of networks, each of which samples independently from the network's posterior distribution and chooses a particular extrapolation of the data as the plane network did, the Bayesian network's increased variance is therefore a reflection of averaging over the uncertainty of these ensembles in regions of the output space that they haven't been trained on. The next experiment is an image classification experiment on the MNIST dataset, which contains 60,000 28 by 28 pixel images of handwritten digits collected by the US Postal Service in the early 90s in order to develop a mechanism capable of automatically sorting mail based on zip codes. Image classification was performed using a Bayesian convolutional neural network whose architecture is described in the bottom figure. It consists of three convolutional layers. The first layer has 32 filters in a 24 by 24 pixel feature map, while the second and third layers have 64 filters each and an 84 by 84 pixel and 64 by 64 pixel feature map respectively. Three convolutional layers are separated by two cooling layers, which are standard sub-sampling layers used to keep the number of parameters in the network small. Here they down sample each convolutional feature map by a factor of two in the width and height directions. The final two layers are fully connected and have 128 neurons and 10 neurons respectively. All hidden layers compute RELU activations and the output layer computes a softmax distribution over the 10 possible digit classes of each image. The training occurred over 3000 training steps, or approximately 23 epochs, with many batches of 128 images per training step. At the 10th, 100th, 500th, and 3000th training step, 10 images were randomly selected from the validation set and classified 50 times each, corresponding to 50 independent samples from the network's posterior distribution for each classification image. The four wide columns displayed here show the sampling results at each of these four training steps, and the three narrow columns within each wider column show the image classified to histograms posterior samples in the approximate predicted distribution over the 10 digit classes given the corresponding image. At the start of training, posterior samples have a high variance, and probability masses distributed more or less uniformly over the 10 digit classes from most images, owing to the fact that parameter values are randomly initialized at the start of training, and 10 training steps isn't enough time for the network to learn anything meaningful. As training progresses, the posterior variance increases as the network is able to correctly classify images with increasingly high probability, although many images, such as the nines in the first, fifth, seventh, and eighth rows are still being incorrectly classified much of the time. By the 500th training step, learning becomes slower, however the posterior variance is still decreasing, and the accuracy of the predicted distribution continues to improve on the whole. By the end of the 3000 epoch, the network is fully converged, posterior samples show almost zero variance for the overwhelming majority of images, and the network's predicted distribution has a classification accuracy of 95.3% on the full test set. As was the case in the regression experiment, we see that Bayesian network's uncertainty is captured in the variance of its posterior distribution. We can also see how the distribution of the first two moments of the posterior change between the beginning and ending of training. At the start, both means and variances are tightly peaked, whereas at the end, means are distributed less sharply and with a slightly heavier tail, whereas variances are essentially flat in some layers. As a final word, both experiments show us that employing Bayesian methods in neural networks is preferable in scenarios where we would like to be able to express uncertainty in our neural network's predictions. Finally, all works cited in this presentation are listed here. Thank you for your time.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.0, "text": " Hi, my name is Brandon Shanahan, and today I'm going to talk about Bayesian neural networks.", "tokens": [50364, 2421, 11, 452, 1315, 307, 22606, 25536, 21436, 11, 293, 965, 286, 478, 516, 281, 751, 466, 7840, 42434, 18161, 9590, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1175260102307355, "compression_ratio": 1.7472118959107807, "no_speech_prob": 0.06447331607341766}, {"id": 1, "seek": 0, "start": 7.0, "end": 16.0, "text": " In the first part of the talk, I'll give a brief, high-level introduction to neural networks that broadly covers what they are, what they do, and how they work.", "tokens": [50714, 682, 264, 700, 644, 295, 264, 751, 11, 286, 603, 976, 257, 5353, 11, 1090, 12, 12418, 9339, 281, 18161, 9590, 300, 19511, 10538, 437, 436, 366, 11, 437, 436, 360, 11, 293, 577, 436, 589, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1175260102307355, "compression_ratio": 1.7472118959107807, "no_speech_prob": 0.06447331607341766}, {"id": 2, "seek": 0, "start": 16.0, "end": 26.0, "text": " I'll spend a bit of time talking about the stochastic optimization procedure employed by neural networks, and then I'll discuss two common neural network architectures that are used in experiments in a later section.", "tokens": [51164, 286, 603, 3496, 257, 857, 295, 565, 1417, 466, 264, 342, 8997, 2750, 19618, 10747, 20115, 538, 18161, 9590, 11, 293, 550, 286, 603, 2248, 732, 2689, 18161, 3209, 6331, 1303, 300, 366, 1143, 294, 12050, 294, 257, 1780, 3541, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1175260102307355, "compression_ratio": 1.7472118959107807, "no_speech_prob": 0.06447331607341766}, {"id": 3, "seek": 2600, "start": 26.0, "end": 34.0, "text": " Next, I'll give an equivalent description that frames neural networks as conditional probabilistic models and outline the parallels between the two definitions.", "tokens": [50364, 3087, 11, 286, 603, 976, 364, 10344, 3855, 300, 12083, 18161, 9590, 382, 27708, 31959, 3142, 5245, 293, 16387, 264, 44223, 1296, 264, 732, 21988, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06879503250122071, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.014707627706229687}, {"id": 4, "seek": 2600, "start": 34.0, "end": 41.0, "text": " I'll then discuss the shortcomings of these models, which will motivate the introduction of Bayesian methods in neural network.", "tokens": [50764, 286, 603, 550, 2248, 264, 2099, 49886, 295, 613, 5245, 11, 597, 486, 28497, 264, 9339, 295, 7840, 42434, 7150, 294, 18161, 3209, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06879503250122071, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.014707627706229687}, {"id": 5, "seek": 2600, "start": 41.0, "end": 45.0, "text": " Finally, I'll discuss the results of two experiments employing Bayesian neural network.", "tokens": [51114, 6288, 11, 286, 603, 2248, 264, 3542, 295, 732, 12050, 3188, 278, 7840, 42434, 18161, 3209, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06879503250122071, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.014707627706229687}, {"id": 6, "seek": 4500, "start": 45.0, "end": 61.0, "text": " One regression experiment compares the results obtained by a plain neural network and a Bayesian neural network, and one image classification experiment that further illustrates the benefits of Bayesian learning.", "tokens": [50364, 1485, 24590, 5120, 38334, 264, 3542, 14879, 538, 257, 11121, 18161, 3209, 293, 257, 7840, 42434, 18161, 3209, 11, 293, 472, 3256, 21538, 5120, 300, 3052, 41718, 264, 5311, 295, 7840, 42434, 2539, 13, 51164], "temperature": 0.0, "avg_logprob": -0.055610465280937424, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.16001304984092712}, {"id": 7, "seek": 4500, "start": 61.0, "end": 70.0, "text": " Neural networks have been rigorously shown to be universal approximators capable of representing arbitrarily complex nonlinear functions to arbitrary precision.", "tokens": [51164, 1734, 1807, 9590, 362, 668, 42191, 5098, 4898, 281, 312, 11455, 8542, 3391, 8189, 295, 13460, 19071, 3289, 3997, 2107, 28263, 6828, 281, 23211, 18356, 13, 51614], "temperature": 0.0, "avg_logprob": -0.055610465280937424, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.16001304984092712}, {"id": 8, "seek": 7000, "start": 70.0, "end": 84.0, "text": " As such, neural networks are used in many tasks which require learning incredibly complex mappings between input and output spaces, such as in speech recognition and text generation, sentiment analysis, and image segmentation and classification.", "tokens": [50364, 1018, 1270, 11, 18161, 9590, 366, 1143, 294, 867, 9608, 597, 3651, 2539, 6252, 3997, 463, 28968, 1296, 4846, 293, 5598, 7673, 11, 1270, 382, 294, 6218, 11150, 293, 2487, 5125, 11, 16149, 5215, 11, 293, 3256, 9469, 399, 293, 21538, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07309424214892918, "compression_ratio": 1.594142259414226, "no_speech_prob": 0.032074879854917526}, {"id": 9, "seek": 7000, "start": 84.0, "end": 91.0, "text": " To take a concrete example, say we're building a network for use in an autonomous vehicle which specifically performs object detection.", "tokens": [51064, 1407, 747, 257, 9859, 1365, 11, 584, 321, 434, 2390, 257, 3209, 337, 764, 294, 364, 23797, 5864, 597, 4682, 26213, 2657, 17784, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07309424214892918, "compression_ratio": 1.594142259414226, "no_speech_prob": 0.032074879854917526}, {"id": 10, "seek": 9100, "start": 91.0, "end": 107.0, "text": " You can imagine a function that maps, say, an image of a typical city street from the point of view of the driver to a set of categorical boundaries, each of which represents a pedestrian, another car, a traffic light or street sign, a crosswalk, and so on, is highly nonlinear.", "tokens": [50364, 509, 393, 3811, 257, 2445, 300, 11317, 11, 584, 11, 364, 3256, 295, 257, 7476, 2307, 4838, 490, 264, 935, 295, 1910, 295, 264, 6787, 281, 257, 992, 295, 19250, 804, 13180, 11, 1184, 295, 597, 8855, 257, 33947, 11, 1071, 1032, 11, 257, 6419, 1442, 420, 4838, 1465, 11, 257, 3278, 12490, 11, 293, 370, 322, 11, 307, 5405, 2107, 28263, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07476509231881998, "compression_ratio": 1.628, "no_speech_prob": 0.25653836131095886}, {"id": 11, "seek": 9100, "start": 107.0, "end": 114.0, "text": " The function also needs to be extremely adaptable as it's being computed in near real time and the data it acts on isn't static.", "tokens": [51164, 440, 2445, 611, 2203, 281, 312, 4664, 6231, 712, 382, 309, 311, 885, 40610, 294, 2651, 957, 565, 293, 264, 1412, 309, 10672, 322, 1943, 380, 13437, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07476509231881998, "compression_ratio": 1.628, "no_speech_prob": 0.25653836131095886}, {"id": 12, "seek": 11400, "start": 114.0, "end": 122.0, "text": " The car is moving, pedestrians are walking, other cars are moving, lights are changing, and no two images that it captures will be identical.", "tokens": [50364, 440, 1032, 307, 2684, 11, 48339, 366, 4494, 11, 661, 5163, 366, 2684, 11, 5811, 366, 4473, 11, 293, 572, 732, 5267, 300, 309, 27986, 486, 312, 14800, 13, 50764], "temperature": 0.0, "avg_logprob": -0.062457910104959956, "compression_ratio": 1.7679738562091503, "no_speech_prob": 0.2938888967037201}, {"id": 13, "seek": 11400, "start": 122.0, "end": 130.0, "text": " A scenario like this makes it clear that it's not sufficient for our network to simply learn a deterministic mapping based on a set of training data that it's seen before.", "tokens": [50764, 316, 9005, 411, 341, 1669, 309, 1850, 300, 309, 311, 406, 11563, 337, 527, 3209, 281, 2935, 1466, 257, 15957, 3142, 18350, 2361, 322, 257, 992, 295, 3097, 1412, 300, 309, 311, 1612, 949, 13, 51164], "temperature": 0.0, "avg_logprob": -0.062457910104959956, "compression_ratio": 1.7679738562091503, "no_speech_prob": 0.2938888967037201}, {"id": 14, "seek": 11400, "start": 130.0, "end": 141.0, "text": " In other words, the network needs to be able to generalize well and extrapolate to new data based on the context of data that it's already seen, but it also needs to have some notion of the uncertainty inherent in its decisions", "tokens": [51164, 682, 661, 2283, 11, 264, 3209, 2203, 281, 312, 1075, 281, 2674, 1125, 731, 293, 48224, 473, 281, 777, 1412, 2361, 322, 264, 4319, 295, 1412, 300, 309, 311, 1217, 1612, 11, 457, 309, 611, 2203, 281, 362, 512, 10710, 295, 264, 15697, 26387, 294, 1080, 5327, 51714], "temperature": 0.0, "avg_logprob": -0.062457910104959956, "compression_ratio": 1.7679738562091503, "no_speech_prob": 0.2938888967037201}, {"id": 15, "seek": 14100, "start": 141.0, "end": 149.0, "text": " to be able to consider this uncertainty when taking in action in order to prevent making overconfident incorrect decisions.", "tokens": [50364, 281, 312, 1075, 281, 1949, 341, 15697, 562, 1940, 294, 3069, 294, 1668, 281, 4871, 1455, 670, 24697, 1078, 18424, 5327, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11511249253244112, "compression_ratio": 1.5902439024390245, "no_speech_prob": 0.006094146985560656}, {"id": 16, "seek": 14100, "start": 149.0, "end": 160.0, "text": " The basic computational unit of a neural network is referred to as an artificial neuron, or more simply, a neuron, in which it develops historically as a crude mathematical model of a biological neuron.", "tokens": [50764, 440, 3875, 28270, 4985, 295, 257, 18161, 3209, 307, 10839, 281, 382, 364, 11677, 34090, 11, 420, 544, 2935, 11, 257, 34090, 11, 294, 597, 309, 25453, 16180, 382, 257, 30796, 18894, 2316, 295, 257, 13910, 34090, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11511249253244112, "compression_ratio": 1.5902439024390245, "no_speech_prob": 0.006094146985560656}, {"id": 17, "seek": 16000, "start": 160.0, "end": 172.0, "text": " A neuron takes some input data to which it applies an affine transformation with a weight matrix W and bias vector B, both of which are learned parameters, and finally, a nonlinear activation function as its output.", "tokens": [50364, 316, 34090, 2516, 512, 4846, 1412, 281, 597, 309, 13165, 364, 2096, 533, 9887, 365, 257, 3364, 8141, 343, 293, 12577, 8062, 363, 11, 1293, 295, 597, 366, 3264, 9834, 11, 293, 2721, 11, 257, 2107, 28263, 24433, 2445, 382, 1080, 5598, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09033204941522507, "compression_ratio": 1.7079037800687284, "no_speech_prob": 0.04601212218403816}, {"id": 18, "seek": 16000, "start": 172.0, "end": 177.0, "text": " The simplest neural network architecture is a fully connected feedforward network.", "tokens": [50964, 440, 22811, 18161, 3209, 9482, 307, 257, 4498, 4582, 3154, 13305, 3209, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09033204941522507, "compression_ratio": 1.7079037800687284, "no_speech_prob": 0.04601212218403816}, {"id": 19, "seek": 16000, "start": 177.0, "end": 187.0, "text": " Neurons are arranged in layers, which are stacked one on top of the other, starting from the input layer, followed by an arbitrary number of intermediate hidden layers, and finally, an output layer.", "tokens": [51214, 1734, 374, 892, 366, 18721, 294, 7914, 11, 597, 366, 28867, 472, 322, 1192, 295, 264, 661, 11, 2891, 490, 264, 4846, 4583, 11, 6263, 538, 364, 23211, 1230, 295, 19376, 7633, 7914, 11, 293, 2721, 11, 364, 5598, 4583, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09033204941522507, "compression_ratio": 1.7079037800687284, "no_speech_prob": 0.04601212218403816}, {"id": 20, "seek": 18700, "start": 187.0, "end": 200.0, "text": " This architecture gets its name from the fact that a neuron in one layer is fully connected to every neuron in the two layers at sandwich between, and a neuron's output is fed forward as input to every neuron in the next layer.", "tokens": [50364, 639, 9482, 2170, 1080, 1315, 490, 264, 1186, 300, 257, 34090, 294, 472, 4583, 307, 4498, 4582, 281, 633, 34090, 294, 264, 732, 7914, 412, 11141, 1296, 11, 293, 257, 34090, 311, 5598, 307, 4636, 2128, 382, 4846, 281, 633, 34090, 294, 264, 958, 4583, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07243703866933847, "compression_ratio": 1.7403846153846154, "no_speech_prob": 0.007009341847151518}, {"id": 21, "seek": 18700, "start": 200.0, "end": 207.0, "text": " The key to a neural network's ability to learn nonlinear representations of their input are the use of nonlinear activation functions.", "tokens": [51014, 440, 2141, 281, 257, 18161, 3209, 311, 3485, 281, 1466, 2107, 28263, 33358, 295, 641, 4846, 366, 264, 764, 295, 2107, 28263, 24433, 6828, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07243703866933847, "compression_ratio": 1.7403846153846154, "no_speech_prob": 0.007009341847151518}, {"id": 22, "seek": 20700, "start": 207.0, "end": 215.0, "text": " Simply applying successive affine transformations at each layer of a network is equivalent to applying a single affine transformation.", "tokens": [50364, 19596, 9275, 48043, 2096, 533, 34852, 412, 1184, 4583, 295, 257, 3209, 307, 10344, 281, 9275, 257, 2167, 2096, 533, 9887, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06212360476270134, "compression_ratio": 1.7955555555555556, "no_speech_prob": 0.05412685126066208}, {"id": 23, "seek": 20700, "start": 215.0, "end": 225.0, "text": " Therefore, a neural network that only uses an identity activation function at each neuron can only learn a linear mapping between its input and output spaces.", "tokens": [50764, 7504, 11, 257, 18161, 3209, 300, 787, 4960, 364, 6575, 24433, 2445, 412, 1184, 34090, 393, 787, 1466, 257, 8213, 18350, 1296, 1080, 4846, 293, 5598, 7673, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06212360476270134, "compression_ratio": 1.7955555555555556, "no_speech_prob": 0.05412685126066208}, {"id": 24, "seek": 20700, "start": 225.0, "end": 231.0, "text": " The form of a network's output layer depends on the type of data it processes and the network's intended task.", "tokens": [51264, 440, 1254, 295, 257, 3209, 311, 5598, 4583, 5946, 322, 264, 2010, 295, 1412, 309, 7555, 293, 264, 3209, 311, 10226, 5633, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06212360476270134, "compression_ratio": 1.7955555555555556, "no_speech_prob": 0.05412685126066208}, {"id": 25, "seek": 23100, "start": 231.0, "end": 244.0, "text": " For classification of a labeled categorical data, the output layer consists of C neurons, which includes a probability distribution over the C possible classes of the data, and assigns a prediction which maximizes this distribution.", "tokens": [50364, 1171, 21538, 295, 257, 21335, 19250, 804, 1412, 11, 264, 5598, 4583, 14689, 295, 383, 22027, 11, 597, 5974, 257, 8482, 7316, 670, 264, 383, 1944, 5359, 295, 264, 1412, 11, 293, 6269, 82, 257, 17630, 597, 5138, 5660, 341, 7316, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15903302431106567, "compression_ratio": 1.7410714285714286, "no_speech_prob": 0.04021668806672096}, {"id": 26, "seek": 23100, "start": 244.0, "end": 252.0, "text": " It then computes a cross-entropy loss function between the true and predicted distributions of the data, which is usually averaged over the entire frame set.", "tokens": [51014, 467, 550, 715, 1819, 257, 3278, 12, 317, 27514, 4470, 2445, 1296, 264, 2074, 293, 19147, 37870, 295, 264, 1412, 11, 597, 307, 2673, 18247, 2980, 670, 264, 2302, 3920, 992, 13, 51414], "temperature": 0.0, "avg_logprob": -0.15903302431106567, "compression_ratio": 1.7410714285714286, "no_speech_prob": 0.04021668806672096}, {"id": 27, "seek": 25200, "start": 252.0, "end": 264.0, "text": " For regression, the output layer consists of a single neuron, which computes an identity activation function and, typically, either the mean absolute error or mean squared error loss between the true and predicted output.", "tokens": [50364, 1171, 24590, 11, 264, 5598, 4583, 14689, 295, 257, 2167, 34090, 11, 597, 715, 1819, 364, 6575, 24433, 2445, 293, 11, 5850, 11, 2139, 264, 914, 8236, 6713, 420, 914, 8889, 6713, 4470, 1296, 264, 2074, 293, 19147, 5598, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05634107981642632, "compression_ratio": 1.857843137254902, "no_speech_prob": 0.02886008284986019}, {"id": 28, "seek": 25200, "start": 264.0, "end": 274.0, "text": " It's important to note here that while the output layer computes an identity activation function, hidden layers still compute nonlinear activation functions.", "tokens": [50964, 467, 311, 1021, 281, 3637, 510, 300, 1339, 264, 5598, 4583, 715, 1819, 364, 6575, 24433, 2445, 11, 7633, 7914, 920, 14722, 2107, 28263, 24433, 6828, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05634107981642632, "compression_ratio": 1.857843137254902, "no_speech_prob": 0.02886008284986019}, {"id": 29, "seek": 27400, "start": 274.0, "end": 284.0, "text": " Neural networks are represented internally by what's referred to as a directed acyclic graph, which allows for decomposing complex functions into a sequence of simple arithmetic operations.", "tokens": [50364, 1734, 1807, 9590, 366, 10379, 19501, 538, 437, 311, 10839, 281, 382, 257, 12898, 696, 88, 66, 1050, 4295, 11, 597, 4045, 337, 22867, 6110, 3997, 6828, 666, 257, 8310, 295, 2199, 42973, 7705, 13, 50864], "temperature": 0.0, "avg_logprob": -0.04742069805369658, "compression_ratio": 1.7014925373134329, "no_speech_prob": 0.016907814890146255}, {"id": 30, "seek": 27400, "start": 284.0, "end": 297.0, "text": " This is especially important because neural networks learn their parameters using optimization procedures such as stochastic gradient descent for one of its many variants, which require computing the gradient of the loss function with respect to the network's input.", "tokens": [50864, 639, 307, 2318, 1021, 570, 18161, 9590, 1466, 641, 9834, 1228, 19618, 13846, 1270, 382, 342, 8997, 2750, 16235, 23475, 337, 472, 295, 1080, 867, 21669, 11, 597, 3651, 15866, 264, 16235, 295, 264, 4470, 2445, 365, 3104, 281, 264, 3209, 311, 4846, 13, 51514], "temperature": 0.0, "avg_logprob": -0.04742069805369658, "compression_ratio": 1.7014925373134329, "no_speech_prob": 0.016907814890146255}, {"id": 31, "seek": 29700, "start": 297.0, "end": 313.0, "text": " For functions whose gradients do not have a simple closed form expression, this internal representation allows the computation of a single intractable gradient to be achieved instead by taking simple local gradients with respect to intermediate variables which are defined and cached locally during training.", "tokens": [50364, 1171, 6828, 6104, 2771, 2448, 360, 406, 362, 257, 2199, 5395, 1254, 6114, 11, 341, 6920, 10290, 4045, 264, 24903, 295, 257, 2167, 560, 1897, 712, 16235, 281, 312, 11042, 2602, 538, 1940, 2199, 2654, 2771, 2448, 365, 3104, 281, 19376, 9102, 597, 366, 7642, 293, 269, 15095, 16143, 1830, 3097, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06075635709260639, "compression_ratio": 1.792387543252595, "no_speech_prob": 0.006795282941311598}, {"id": 32, "seek": 29700, "start": 313.0, "end": 323.0, "text": " Gradients are first computed with respect to neurons in the output layer and then propagated backwards through the network's hidden layers to the input layer by a straightforward application of the chain rule.", "tokens": [51164, 16710, 2448, 366, 700, 40610, 365, 3104, 281, 22027, 294, 264, 5598, 4583, 293, 550, 12425, 770, 12204, 807, 264, 3209, 311, 7633, 7914, 281, 264, 4846, 4583, 538, 257, 15325, 3861, 295, 264, 5021, 4978, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06075635709260639, "compression_ratio": 1.792387543252595, "no_speech_prob": 0.006795282941311598}, {"id": 33, "seek": 32300, "start": 323.0, "end": 334.0, "text": " At each neuron, its parameters are updated by taking a step in the direction of steepest gradient descent, with the step size controlled by a hyperparameter lambda referred to as the learning rate.", "tokens": [50364, 1711, 1184, 34090, 11, 1080, 9834, 366, 10588, 538, 1940, 257, 1823, 294, 264, 3513, 295, 16841, 377, 16235, 23475, 11, 365, 264, 1823, 2744, 10164, 538, 257, 9848, 2181, 335, 2398, 13607, 10839, 281, 382, 264, 2539, 3314, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07483834149886151, "compression_ratio": 1.7642585551330798, "no_speech_prob": 0.03512345626950264}, {"id": 34, "seek": 32300, "start": 334.0, "end": 344.0, "text": " Training proceeds by performing a forward pass with the entire training data set and computing the average loss, which is then back propagated through all the network parameters to the input layer.", "tokens": [50914, 20620, 32280, 538, 10205, 257, 2128, 1320, 365, 264, 2302, 3097, 1412, 992, 293, 15866, 264, 4274, 4470, 11, 597, 307, 550, 646, 12425, 770, 807, 439, 264, 3209, 9834, 281, 264, 4846, 4583, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07483834149886151, "compression_ratio": 1.7642585551330798, "no_speech_prob": 0.03512345626950264}, {"id": 35, "seek": 32300, "start": 344.0, "end": 348.0, "text": " This forward-backward sequence is referred to as one training epoch.", "tokens": [51414, 639, 2128, 12, 3207, 1007, 8310, 307, 10839, 281, 382, 472, 3097, 30992, 339, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07483834149886151, "compression_ratio": 1.7642585551330798, "no_speech_prob": 0.03512345626950264}, {"id": 36, "seek": 34800, "start": 349.0, "end": 358.0, "text": " Parameters are modified during each epoch, and the network is said to have converged when the loss function plateaus over many subsequent forward passes.", "tokens": [50414, 34882, 6202, 366, 15873, 1830, 1184, 30992, 339, 11, 293, 264, 3209, 307, 848, 281, 362, 9652, 3004, 562, 264, 4470, 2445, 5924, 8463, 670, 867, 19962, 2128, 11335, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08863985538482666, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.0768790915608406}, {"id": 37, "seek": 34800, "start": 358.0, "end": 371.0, "text": " Another important neural network architecture is the convolutional neural network, which is designed specifically to operate on image data and to take advantage of the additional structure of an information contained in an image's color channels.", "tokens": [50864, 3996, 1021, 18161, 3209, 9482, 307, 264, 45216, 304, 18161, 3209, 11, 597, 307, 4761, 4682, 281, 9651, 322, 3256, 1412, 293, 281, 747, 5002, 295, 264, 4497, 3877, 295, 364, 1589, 16212, 294, 364, 3256, 311, 2017, 9235, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08863985538482666, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.0768790915608406}, {"id": 38, "seek": 37100, "start": 371.0, "end": 384.0, "text": " Convolutional neural networks tend to learn incredibly rich, local, and translationally invariant features that make them extremely powerful, and they have been the primary building block in most state-of-the-art neural network designs in the last decade.", "tokens": [50364, 2656, 85, 3386, 304, 18161, 9590, 3928, 281, 1466, 6252, 4593, 11, 2654, 11, 293, 12853, 379, 33270, 394, 4122, 300, 652, 552, 4664, 4005, 11, 293, 436, 362, 668, 264, 6194, 2390, 3461, 294, 881, 1785, 12, 2670, 12, 3322, 12, 446, 18161, 3209, 11347, 294, 264, 1036, 10378, 13, 51014], "temperature": 0.0, "avg_logprob": -0.041839378220694404, "compression_ratio": 1.7296137339055795, "no_speech_prob": 0.015182089060544968}, {"id": 39, "seek": 37100, "start": 384.0, "end": 391.0, "text": " Convolutional neural networks are distinct for the use of convolutional layers, which differ from fully connected layers in several important ways.", "tokens": [51014, 2656, 85, 3386, 304, 18161, 9590, 366, 10644, 337, 264, 764, 295, 45216, 304, 7914, 11, 597, 743, 490, 4498, 4582, 7914, 294, 2940, 1021, 2098, 13, 51364], "temperature": 0.0, "avg_logprob": -0.041839378220694404, "compression_ratio": 1.7296137339055795, "no_speech_prob": 0.015182089060544968}, {"id": 40, "seek": 39100, "start": 391.0, "end": 402.0, "text": " First, while each neuron in a fully connected layer will see the entire output of the previous layer, each convolutional feature map has a limited receptive field and only sees a fixed region of the input.", "tokens": [50364, 2386, 11, 1339, 1184, 34090, 294, 257, 4498, 4582, 4583, 486, 536, 264, 2302, 5598, 295, 264, 3894, 4583, 11, 1184, 45216, 304, 4111, 4471, 575, 257, 5567, 45838, 2519, 293, 787, 8194, 257, 6806, 4458, 295, 264, 4846, 13, 50914], "temperature": 0.0, "avg_logprob": -0.03849416512709398, "compression_ratio": 1.816546762589928, "no_speech_prob": 0.14209245145320892}, {"id": 41, "seek": 39100, "start": 402.0, "end": 418.0, "text": " Additionally, a fully connected neuron computes an affine transformation by acting on a flattened, vectorized representation of the input image, whereas a feature map is formed by convolving the color channels in its receptive field with a set of filters, which are the network's learned parameters.", "tokens": [50914, 19927, 11, 257, 4498, 4582, 34090, 715, 1819, 364, 2096, 533, 9887, 538, 6577, 322, 257, 24183, 292, 11, 8062, 1602, 10290, 295, 264, 4846, 3256, 11, 9735, 257, 4111, 4471, 307, 8693, 538, 3754, 401, 798, 264, 2017, 9235, 294, 1080, 45838, 2519, 365, 257, 992, 295, 15995, 11, 597, 366, 264, 3209, 311, 3264, 9834, 13, 51714], "temperature": 0.0, "avg_logprob": -0.03849416512709398, "compression_ratio": 1.816546762589928, "no_speech_prob": 0.14209245145320892}, {"id": 42, "seek": 41800, "start": 418.0, "end": 441.0, "text": " In other words, whereas a neuron in a fully connected layer acts on a one-dimensional input vector to produce a one-dimensional feature vector, a convolutional layer acts on a three-dimensional image volume with dimensions of width, height, and color channels to produce a three-dimensional feature map with dimensions of receptive field width, receptive field height, and filter size.", "tokens": [50364, 682, 661, 2283, 11, 9735, 257, 34090, 294, 257, 4498, 4582, 4583, 10672, 322, 257, 472, 12, 18759, 4846, 8062, 281, 5258, 257, 472, 12, 18759, 4111, 8062, 11, 257, 45216, 304, 4583, 10672, 322, 257, 1045, 12, 18759, 3256, 5523, 365, 12819, 295, 11402, 11, 6681, 11, 293, 2017, 9235, 281, 5258, 257, 1045, 12, 18759, 4111, 4471, 365, 12819, 295, 45838, 2519, 11402, 11, 45838, 2519, 6681, 11, 293, 6608, 2744, 13, 51514], "temperature": 0.0, "avg_logprob": -0.055393329033484824, "compression_ratio": 2.047872340425532, "no_speech_prob": 0.028402306139469147}, {"id": 43, "seek": 44100, "start": 442.0, "end": 449.0, "text": " Neural networks can be equivalently understood without making any references to their biological motivations or internal architecture.", "tokens": [50414, 1734, 1807, 9590, 393, 312, 9052, 2276, 7320, 1553, 1455, 604, 15400, 281, 641, 13910, 39034, 420, 6920, 9482, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0746518881014078, "compression_ratio": 1.7275862068965517, "no_speech_prob": 0.053328417241573334}, {"id": 44, "seek": 44100, "start": 449.0, "end": 459.0, "text": " Here, we define a neural network as a conditional probabilistic model, which is conditioned on a set of training data D and its learned weight and bias parameters, which we simply refer to as theta.", "tokens": [50764, 1692, 11, 321, 6964, 257, 18161, 3209, 382, 257, 27708, 31959, 3142, 2316, 11, 597, 307, 35833, 322, 257, 992, 295, 3097, 1412, 413, 293, 1080, 3264, 3364, 293, 12577, 9834, 11, 597, 321, 2935, 2864, 281, 382, 9725, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0746518881014078, "compression_ratio": 1.7275862068965517, "no_speech_prob": 0.053328417241573334}, {"id": 45, "seek": 44100, "start": 459.0, "end": 468.0, "text": " Given some new input x hat, the network computes a probability distribution over its entire output space and selects an output y hat, which maximizes the distribution.", "tokens": [51264, 18600, 512, 777, 4846, 2031, 2385, 11, 264, 3209, 715, 1819, 257, 8482, 7316, 670, 1080, 2302, 5598, 1901, 293, 3048, 82, 364, 5598, 288, 2385, 11, 597, 5138, 5660, 264, 7316, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0746518881014078, "compression_ratio": 1.7275862068965517, "no_speech_prob": 0.053328417241573334}, {"id": 46, "seek": 46800, "start": 468.0, "end": 480.0, "text": " To draw an equivalence between these two descriptions, in a classification setting, the output space y is the set of all possible classes, and the model p is a categorical distribution, and the corresponding loss function is the cross-entropy loss.", "tokens": [50364, 1407, 2642, 364, 9052, 655, 1296, 613, 732, 24406, 11, 294, 257, 21538, 3287, 11, 264, 5598, 1901, 288, 307, 264, 992, 295, 439, 1944, 5359, 11, 293, 264, 2316, 280, 307, 257, 19250, 804, 7316, 11, 293, 264, 11760, 4470, 2445, 307, 264, 3278, 12, 317, 27514, 4470, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0782598235390403, "compression_ratio": 1.9607142857142856, "no_speech_prob": 0.0029801344498991966}, {"id": 47, "seek": 46800, "start": 480.0, "end": 488.0, "text": " For regression, the output space y is the real numbers, and p is a Gaussian distribution, and the corresponding loss function is the mean squared error loss.", "tokens": [50964, 1171, 24590, 11, 264, 5598, 1901, 288, 307, 264, 957, 3547, 11, 293, 280, 307, 257, 39148, 7316, 11, 293, 264, 11760, 4470, 2445, 307, 264, 914, 8889, 6713, 4470, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0782598235390403, "compression_ratio": 1.9607142857142856, "no_speech_prob": 0.0029801344498991966}, {"id": 48, "seek": 46800, "start": 488.0, "end": 496.0, "text": " Nothing about the actual implementation changes and parameter optimization proceeds by back propagation, as described in the previous section.", "tokens": [51364, 6693, 466, 264, 3539, 11420, 2962, 293, 13075, 19618, 32280, 538, 646, 38377, 11, 382, 7619, 294, 264, 3894, 3541, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0782598235390403, "compression_ratio": 1.9607142857142856, "no_speech_prob": 0.0029801344498991966}, {"id": 49, "seek": 49600, "start": 496.0, "end": 509.0, "text": " Parameters learned during back propagation are maximum likelihood estimates, or rather stochastic approximations.", "tokens": [50364, 34882, 6202, 3264, 1830, 646, 38377, 366, 6674, 22119, 20561, 11, 420, 2831, 342, 8997, 2750, 8542, 763, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12182742899114435, "compression_ratio": 1.3495934959349594, "no_speech_prob": 0.00400546146556735}, {"id": 50, "seek": 49600, "start": 509.0, "end": 512.0, "text": " This likelihood model presents several shortcomings.", "tokens": [51014, 639, 22119, 2316, 13533, 2940, 2099, 49886, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12182742899114435, "compression_ratio": 1.3495934959349594, "no_speech_prob": 0.00400546146556735}, {"id": 51, "seek": 51200, "start": 512.0, "end": 524.0, "text": " Networks whose parameters are maximum likelihood estimates result in predictions that are deterministic, in the sense that, once trained, predictions of a given input corresponds to a point estimate, and will always result in the same output.", "tokens": [50364, 12640, 82, 6104, 9834, 366, 6674, 22119, 20561, 1874, 294, 21264, 300, 366, 15957, 3142, 11, 294, 264, 2020, 300, 11, 1564, 8895, 11, 21264, 295, 257, 2212, 4846, 23249, 281, 257, 935, 12539, 11, 293, 486, 1009, 1874, 294, 264, 912, 5598, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12079397480139571, "compression_ratio": 1.6891385767790261, "no_speech_prob": 0.03902692347764969}, {"id": 52, "seek": 51200, "start": 524.0, "end": 530.0, "text": " And these networks are therefore prone to overfitting and unable to express uncertainty about their prediction.", "tokens": [50964, 400, 613, 9590, 366, 4412, 25806, 281, 670, 69, 2414, 293, 11299, 281, 5109, 15697, 466, 641, 17630, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12079397480139571, "compression_ratio": 1.6891385767790261, "no_speech_prob": 0.03902692347764969}, {"id": 53, "seek": 51200, "start": 530.0, "end": 534.0, "text": " This can be especially problematic when generalizing to data that they have not been trained on.", "tokens": [51264, 639, 393, 312, 2318, 19011, 562, 2674, 3319, 281, 1412, 300, 436, 362, 406, 668, 8895, 322, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12079397480139571, "compression_ratio": 1.6891385767790261, "no_speech_prob": 0.03902692347764969}, {"id": 54, "seek": 53400, "start": 534.0, "end": 543.0, "text": " Techniques such as L1 and L2 regularization, commonly referred to as ridge and lasso respectively, are commonly used in practice to counteract overfitting.", "tokens": [50364, 8337, 4911, 1270, 382, 441, 16, 293, 441, 17, 3890, 2144, 11, 12719, 10839, 281, 382, 34651, 293, 2439, 539, 25009, 11, 366, 12719, 1143, 294, 3124, 281, 5682, 578, 670, 69, 2414, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08704059043627106, "compression_ratio": 1.6844106463878328, "no_speech_prob": 0.1966002881526947}, {"id": 55, "seek": 53400, "start": 543.0, "end": 549.0, "text": " But these networks are nonetheless deterministic and unable to express uncertainty in their predictions.", "tokens": [50814, 583, 613, 9590, 366, 26756, 15957, 3142, 293, 11299, 281, 5109, 15697, 294, 641, 21264, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08704059043627106, "compression_ratio": 1.6844106463878328, "no_speech_prob": 0.1966002881526947}, {"id": 56, "seek": 53400, "start": 549.0, "end": 558.0, "text": " Bayesian inference for neural networks proceeds by defining a prior distribution over the parameters of the network, and applying Bayes' rule to compute their posterior distribution.", "tokens": [51114, 7840, 42434, 38253, 337, 18161, 9590, 32280, 538, 17827, 257, 4059, 7316, 670, 264, 9834, 295, 264, 3209, 11, 293, 9275, 7840, 279, 6, 4978, 281, 14722, 641, 33529, 7316, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08704059043627106, "compression_ratio": 1.6844106463878328, "no_speech_prob": 0.1966002881526947}, {"id": 57, "seek": 55800, "start": 558.0, "end": 571.0, "text": " Predictive queries about some new data X-hat correspond to computing the predicted distribution of an unknown label Y-hat given X-hat by taking the expectation of the conditional distribution of the new data with respect to the network's posterior.", "tokens": [50364, 430, 24945, 488, 24109, 466, 512, 777, 1412, 1783, 12, 15178, 6805, 281, 15866, 264, 19147, 7316, 295, 364, 9841, 7645, 398, 12, 15178, 2212, 1783, 12, 15178, 538, 1940, 264, 14334, 295, 264, 27708, 7316, 295, 264, 777, 1412, 365, 3104, 281, 264, 3209, 311, 33529, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0704092007238888, "compression_ratio": 2.0, "no_speech_prob": 0.08505378663539886}, {"id": 58, "seek": 55800, "start": 571.0, "end": 578.0, "text": " Every posterior weighted parameter configuration contributes to the prediction of the label Y-hat given the data X-hat.", "tokens": [51014, 2048, 33529, 32807, 13075, 11694, 32035, 281, 264, 17630, 295, 264, 7645, 398, 12, 15178, 2212, 264, 1412, 1783, 12, 15178, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0704092007238888, "compression_ratio": 2.0, "no_speech_prob": 0.08505378663539886}, {"id": 59, "seek": 55800, "start": 578.0, "end": 586.0, "text": " Therefore, taking the expectation under the posterior is equivalent to computing a weighted average of predictions from an ensemble of plain neural networks,", "tokens": [51364, 7504, 11, 1940, 264, 14334, 833, 264, 33529, 307, 10344, 281, 15866, 257, 32807, 4274, 295, 21264, 490, 364, 19492, 295, 11121, 18161, 9590, 11, 51764], "temperature": 0.0, "avg_logprob": -0.0704092007238888, "compression_ratio": 2.0, "no_speech_prob": 0.08505378663539886}, {"id": 60, "seek": 58600, "start": 586.0, "end": 590.0, "text": " each of whose parameters are drawn from the same shared distribution.", "tokens": [50364, 1184, 295, 6104, 9834, 366, 10117, 490, 264, 912, 5507, 7316, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06811180240229557, "compression_ratio": 1.7983870967741935, "no_speech_prob": 0.009852969087660313}, {"id": 61, "seek": 58600, "start": 590.0, "end": 600.0, "text": " Because their predictions correspond to posterior samples, the ability to express uncertainty in the parameters in subsequent observations is built into Bayesian neural networks.", "tokens": [50564, 1436, 641, 21264, 6805, 281, 33529, 10938, 11, 264, 3485, 281, 5109, 15697, 294, 264, 9834, 294, 19962, 18163, 307, 3094, 666, 7840, 42434, 18161, 9590, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06811180240229557, "compression_ratio": 1.7983870967741935, "no_speech_prob": 0.009852969087660313}, {"id": 62, "seek": 58600, "start": 600.0, "end": 612.0, "text": " This ensemble averaging in subsequent parameter uncertainty has regularizing effects on Bayesian neural network predictions, which are equivalent to the regularization methods previously discussed.", "tokens": [51064, 639, 19492, 47308, 294, 19962, 13075, 15697, 575, 3890, 3319, 5065, 322, 7840, 42434, 18161, 3209, 21264, 11, 597, 366, 10344, 281, 264, 3890, 2144, 7150, 8046, 7152, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06811180240229557, "compression_ratio": 1.7983870967741935, "no_speech_prob": 0.009852969087660313}, {"id": 63, "seek": 61200, "start": 612.0, "end": 623.0, "text": " As with most interesting Bayesian models, computing the posterior distribution is analytically intractable and must be approximated, which is generally done using sampling methods such as Markov, J, and Monte Carlo.", "tokens": [50364, 1018, 365, 881, 1880, 7840, 42434, 5245, 11, 15866, 264, 33529, 7316, 307, 10783, 984, 560, 1897, 712, 293, 1633, 312, 8542, 770, 11, 597, 307, 5101, 1096, 1228, 21179, 7150, 1270, 382, 3934, 5179, 11, 508, 11, 293, 38105, 45112, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11899987511012865, "compression_ratio": 1.7851851851851852, "no_speech_prob": 0.008056946098804474}, {"id": 64, "seek": 61200, "start": 623.0, "end": 638.0, "text": " Bayesian neural networks instead frame posterior inference as an optimization problem over the parameters by of a target variational distribution by minimizing the cubic Liebler divergence or KL divergence between the variational distribution and the true posterior.", "tokens": [50914, 7840, 42434, 18161, 9590, 2602, 3920, 33529, 38253, 382, 364, 19618, 1154, 670, 264, 9834, 538, 295, 257, 3779, 3034, 1478, 7316, 538, 46608, 264, 28733, 11197, 65, 1918, 47387, 420, 591, 43, 47387, 1296, 264, 3034, 1478, 7316, 293, 264, 2074, 33529, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11899987511012865, "compression_ratio": 1.7851851851851852, "no_speech_prob": 0.008056946098804474}, {"id": 65, "seek": 63800, "start": 638.0, "end": 647.0, "text": " At inference time, the network parameters theta are instead sampled from the variational distribution.", "tokens": [50364, 1711, 38253, 565, 11, 264, 3209, 9834, 9725, 366, 2602, 3247, 15551, 490, 264, 3034, 1478, 7316, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0927668562029848, "compression_ratio": 2.011583011583012, "no_speech_prob": 0.017432693392038345}, {"id": 66, "seek": 63800, "start": 647.0, "end": 659.0, "text": " The corresponding loss function is commonly referred to as the variational free energy or the variational lower bound, and represents its tradeoff between maximizing the expected log likelihood of the data with respect to the variational distribution,", "tokens": [50814, 440, 11760, 4470, 2445, 307, 12719, 10839, 281, 382, 264, 3034, 1478, 1737, 2281, 420, 264, 3034, 1478, 3126, 5472, 11, 293, 8855, 1080, 4923, 4506, 1296, 5138, 3319, 264, 5176, 3565, 22119, 295, 264, 1412, 365, 3104, 281, 264, 3034, 1478, 7316, 11, 51414], "temperature": 0.0, "avg_logprob": -0.0927668562029848, "compression_ratio": 2.011583011583012, "no_speech_prob": 0.017432693392038345}, {"id": 67, "seek": 63800, "start": 659.0, "end": 667.0, "text": " referred to as the likelihood cost, and minimizing the KL divergence between the variational distribution and the network's prior, referred to as the complexity cost.", "tokens": [51414, 10839, 281, 382, 264, 22119, 2063, 11, 293, 46608, 264, 591, 43, 47387, 1296, 264, 3034, 1478, 7316, 293, 264, 3209, 311, 4059, 11, 10839, 281, 382, 264, 14024, 2063, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0927668562029848, "compression_ratio": 2.011583011583012, "no_speech_prob": 0.017432693392038345}, {"id": 68, "seek": 66700, "start": 667.0, "end": 677.0, "text": " Equivalently, variational free energy represents a tradeoff between satisfying the complexity of the data and the simplicity of the network's prior distribution.", "tokens": [50364, 15624, 3576, 2276, 11, 3034, 1478, 1737, 2281, 8855, 257, 4923, 4506, 1296, 18348, 264, 14024, 295, 264, 1412, 293, 264, 25632, 295, 264, 3209, 311, 4059, 7316, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0495790119828849, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.007811426650732756}, {"id": 69, "seek": 66700, "start": 677.0, "end": 694.0, "text": " Because we're minimizing an expectation with respect to the known variational distribution, we can approximate the true loss by instead sampling from the variational distribution and computing the approximate loss in a process similar to the aforementioned Markov, J, and Monte Carlo approach.", "tokens": [50864, 1436, 321, 434, 46608, 364, 14334, 365, 3104, 281, 264, 2570, 3034, 1478, 7316, 11, 321, 393, 30874, 264, 2074, 4470, 538, 2602, 21179, 490, 264, 3034, 1478, 7316, 293, 15866, 264, 30874, 4470, 294, 257, 1399, 2531, 281, 264, 48927, 46842, 3934, 5179, 11, 508, 11, 293, 38105, 45112, 3109, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0495790119828849, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.007811426650732756}, {"id": 70, "seek": 69400, "start": 694.0, "end": 704.0, "text": " By assuming the samples from the posterior are normally distributed and uncorrelated, we can apply a local reparameterization technique which allows us to sample parameter free white noise epsilon,", "tokens": [50364, 3146, 11926, 264, 10938, 490, 264, 33529, 366, 5646, 12631, 293, 6219, 284, 12004, 11, 321, 393, 3079, 257, 2654, 1085, 12835, 2398, 2144, 6532, 597, 4045, 505, 281, 6889, 13075, 1737, 2418, 5658, 17889, 11, 50864], "temperature": 0.0, "avg_logprob": -0.09993123536062713, "compression_ratio": 1.7849462365591398, "no_speech_prob": 0.008312254212796688}, {"id": 71, "seek": 69400, "start": 704.0, "end": 716.0, "text": " then shift and scale epsilon by a deterministic function of mu and rho, mean and standard deviation of the variational distribution respectively, to obtain a sample theta from the variational posterior.", "tokens": [50864, 550, 5513, 293, 4373, 17889, 538, 257, 15957, 3142, 2445, 295, 2992, 293, 20293, 11, 914, 293, 3832, 25163, 295, 264, 3034, 1478, 7316, 25009, 11, 281, 12701, 257, 6889, 9725, 490, 264, 3034, 1478, 33529, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09993123536062713, "compression_ratio": 1.7849462365591398, "no_speech_prob": 0.008312254212796688}, {"id": 72, "seek": 69400, "start": 716.0, "end": 722.0, "text": " In this context, the back propagation is slightly modified and referred to as Bayes by back prop.", "tokens": [51464, 682, 341, 4319, 11, 264, 646, 38377, 307, 4748, 15873, 293, 10839, 281, 382, 7840, 279, 538, 646, 2365, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09993123536062713, "compression_ratio": 1.7849462365591398, "no_speech_prob": 0.008312254212796688}, {"id": 73, "seek": 72200, "start": 722.0, "end": 731.0, "text": " Now, gradients are taken with respect to the variational parameters mu and rho, which are then updated by taking a step in the direction of steepest gradient descent.", "tokens": [50364, 823, 11, 2771, 2448, 366, 2726, 365, 3104, 281, 264, 3034, 1478, 9834, 2992, 293, 20293, 11, 597, 366, 550, 10588, 538, 1940, 257, 1823, 294, 264, 3513, 295, 16841, 377, 16235, 23475, 13, 50814], "temperature": 0.0, "avg_logprob": -0.056693039931260146, "compression_ratio": 1.63135593220339, "no_speech_prob": 0.006094635464251041}, {"id": 74, "seek": 72200, "start": 731.0, "end": 740.0, "text": " Network training otherwise proceeds as normal, performing alternating forward passes and backward passes until the network parameters are converged.", "tokens": [50814, 12640, 3097, 5911, 32280, 382, 2710, 11, 10205, 40062, 2128, 11335, 293, 23897, 11335, 1826, 264, 3209, 9834, 366, 9652, 3004, 13, 51264], "temperature": 0.0, "avg_logprob": -0.056693039931260146, "compression_ratio": 1.63135593220339, "no_speech_prob": 0.006094635464251041}, {"id": 75, "seek": 72200, "start": 740.0, "end": 744.0, "text": " I'll now describe two experiments employing Bayesian neural networks.", "tokens": [51264, 286, 603, 586, 6786, 732, 12050, 3188, 278, 7840, 42434, 18161, 9590, 13, 51464], "temperature": 0.0, "avg_logprob": -0.056693039931260146, "compression_ratio": 1.63135593220339, "no_speech_prob": 0.006094635464251041}, {"id": 76, "seek": 74400, "start": 744.0, "end": 753.0, "text": " The first is a regression experiment on a toy data set which compares the performance of the plane to the forward fully connected network to that of an identical Bayesian neural network.", "tokens": [50364, 440, 700, 307, 257, 24590, 5120, 322, 257, 12058, 1412, 992, 597, 38334, 264, 3389, 295, 264, 5720, 281, 264, 2128, 4498, 4582, 3209, 281, 300, 295, 364, 14800, 7840, 42434, 18161, 3209, 13, 50814], "temperature": 0.0, "avg_logprob": -0.14425805340642514, "compression_ratio": 1.6934306569343065, "no_speech_prob": 0.09798096865415573}, {"id": 77, "seek": 74400, "start": 753.0, "end": 759.0, "text": " Training samples are generated using 2048 equally spaced points between zero and one half.", "tokens": [50814, 20620, 10938, 366, 10833, 1228, 945, 13318, 12309, 43766, 2793, 1296, 4018, 293, 472, 1922, 13, 51114], "temperature": 0.0, "avg_logprob": -0.14425805340642514, "compression_ratio": 1.6934306569343065, "no_speech_prob": 0.09798096865415573}, {"id": 78, "seek": 74400, "start": 759.0, "end": 770.0, "text": " Both neural network architectures consist of two fully connected hidden layers with 250 neurons each in RELU activations and an output layer with a single neuron and identity activation.", "tokens": [51114, 6767, 18161, 3209, 6331, 1303, 4603, 295, 732, 4498, 4582, 7633, 7914, 365, 11650, 22027, 1184, 294, 497, 3158, 52, 2430, 763, 293, 364, 5598, 4583, 365, 257, 2167, 34090, 293, 6575, 24433, 13, 51664], "temperature": 0.0, "avg_logprob": -0.14425805340642514, "compression_ratio": 1.6934306569343065, "no_speech_prob": 0.09798096865415573}, {"id": 79, "seek": 77000, "start": 770.0, "end": 775.0, "text": " Training occurred over 500 epochs with many batches of 32 samples.", "tokens": [50364, 20620, 11068, 670, 5923, 30992, 28346, 365, 867, 15245, 279, 295, 8858, 10938, 13, 50614], "temperature": 0.0, "avg_logprob": -0.15016873328240363, "compression_ratio": 1.7095435684647302, "no_speech_prob": 0.009555396623909473}, {"id": 80, "seek": 77000, "start": 775.0, "end": 790.0, "text": " Once fully trained, each network was used over 500 trials to predict the test set 4096 samples run uniformly randomly from the closed interval from minus one half to one, and the results were averaged and are given in the bottom to bottom way.", "tokens": [50614, 3443, 4498, 8895, 11, 1184, 3209, 390, 1143, 670, 5923, 12450, 281, 6069, 264, 1500, 992, 3356, 22962, 10938, 1190, 48806, 16979, 490, 264, 5395, 15035, 490, 3175, 472, 1922, 281, 472, 11, 293, 264, 3542, 645, 18247, 2980, 293, 366, 2212, 294, 264, 2767, 281, 2767, 636, 13, 51364], "temperature": 0.0, "avg_logprob": -0.15016873328240363, "compression_ratio": 1.7095435684647302, "no_speech_prob": 0.009555396623909473}, {"id": 81, "seek": 77000, "start": 790.0, "end": 795.0, "text": " For the plane neural networks results are on top and the Bayesian networks results are on the bottom.", "tokens": [51364, 1171, 264, 5720, 18161, 9590, 3542, 366, 322, 1192, 293, 264, 7840, 42434, 9590, 3542, 366, 322, 264, 2767, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15016873328240363, "compression_ratio": 1.7095435684647302, "no_speech_prob": 0.009555396623909473}, {"id": 82, "seek": 79500, "start": 795.0, "end": 804.0, "text": " The red line is the mean prediction over 500 trials and the dark blue and light blue regions are the one sigma and two sigma confidence intervals respectively.", "tokens": [50364, 440, 2182, 1622, 307, 264, 914, 17630, 670, 5923, 12450, 293, 264, 2877, 3344, 293, 1442, 3344, 10682, 366, 264, 472, 12771, 293, 732, 12771, 6687, 26651, 25009, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1095085451679845, "compression_ratio": 1.6848249027237354, "no_speech_prob": 0.039613984525203705}, {"id": 83, "seek": 79500, "start": 804.0, "end": 806.0, "text": " A few things are interesting.", "tokens": [50814, 316, 1326, 721, 366, 1880, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1095085451679845, "compression_ratio": 1.6848249027237354, "no_speech_prob": 0.039613984525203705}, {"id": 84, "seek": 79500, "start": 806.0, "end": 818.0, "text": " First off, the plane neural network underestimates the true variance of the test data in the region of the space that it was trained on, which is maybe not so surprising given that we know how prominent these types of networks are overfitting.", "tokens": [50914, 2386, 766, 11, 264, 5720, 18161, 3209, 24612, 332, 1024, 264, 2074, 21977, 295, 264, 1500, 1412, 294, 264, 4458, 295, 264, 1901, 300, 309, 390, 8895, 322, 11, 597, 307, 1310, 406, 370, 8830, 2212, 300, 321, 458, 577, 17034, 613, 3467, 295, 9590, 366, 670, 69, 2414, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1095085451679845, "compression_ratio": 1.6848249027237354, "no_speech_prob": 0.039613984525203705}, {"id": 85, "seek": 81800, "start": 818.0, "end": 834.0, "text": " However, in regions of the test base where the networks have not been trained, the plane neural network chooses a particular extrapolation of the training data and subsequent test predictions have extremely low variance, which goes towards zero as points in the test base gets further from the training set.", "tokens": [50364, 2908, 11, 294, 10682, 295, 264, 1500, 3096, 689, 264, 9590, 362, 406, 668, 8895, 11, 264, 5720, 18161, 3209, 25963, 257, 1729, 48224, 399, 295, 264, 3097, 1412, 293, 19962, 1500, 21264, 362, 4664, 2295, 21977, 11, 597, 1709, 3030, 4018, 382, 2793, 294, 264, 1500, 3096, 2170, 3052, 490, 264, 3097, 992, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0741186848393193, "compression_ratio": 1.9155405405405406, "no_speech_prob": 0.024415191262960434}, {"id": 86, "seek": 81800, "start": 834.0, "end": 847.0, "text": " The Bayesian network on the other hand accurately expresses the variance in the training data when making predictions, which can be seen by the fact that essentially all of the training samples fall within two standard deviations of the Bayesian network mean.", "tokens": [51164, 440, 7840, 42434, 3209, 322, 264, 661, 1011, 20095, 39204, 264, 21977, 294, 264, 3097, 1412, 562, 1455, 21264, 11, 597, 393, 312, 1612, 538, 264, 1186, 300, 4476, 439, 295, 264, 3097, 10938, 2100, 1951, 732, 3832, 31219, 763, 295, 264, 7840, 42434, 3209, 914, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0741186848393193, "compression_ratio": 1.9155405405405406, "no_speech_prob": 0.024415191262960434}, {"id": 87, "seek": 84700, "start": 847.0, "end": 855.0, "text": " Compared to the plane network, however, the variance in the Bayesian network's prediction actually grows in regions of the test base further from the training set.", "tokens": [50364, 30539, 281, 264, 5720, 3209, 11, 4461, 11, 264, 21977, 294, 264, 7840, 42434, 3209, 311, 17630, 767, 13156, 294, 10682, 295, 264, 1500, 3096, 3052, 490, 264, 3097, 992, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1059941431371177, "compression_ratio": 1.8766519823788546, "no_speech_prob": 0.012811330147087574}, {"id": 88, "seek": 84700, "start": 855.0, "end": 868.0, "text": " Because each of the Bayesian network's predictions correspond to the prediction of an ensemble of networks, each of which samples independently from the network's posterior distribution and chooses a particular extrapolation of the data as the plane network did,", "tokens": [50764, 1436, 1184, 295, 264, 7840, 42434, 3209, 311, 21264, 6805, 281, 264, 17630, 295, 364, 19492, 295, 9590, 11, 1184, 295, 597, 10938, 21761, 490, 264, 3209, 311, 33529, 7316, 293, 25963, 257, 1729, 48224, 399, 295, 264, 1412, 382, 264, 5720, 3209, 630, 11, 51414], "temperature": 0.0, "avg_logprob": -0.1059941431371177, "compression_ratio": 1.8766519823788546, "no_speech_prob": 0.012811330147087574}, {"id": 89, "seek": 86800, "start": 868.0, "end": 881.0, "text": " the Bayesian network's increased variance is therefore a reflection of averaging over the uncertainty of these ensembles in regions of the output space that they haven't been trained on.", "tokens": [50364, 264, 7840, 42434, 3209, 311, 6505, 21977, 307, 4412, 257, 12914, 295, 47308, 670, 264, 15697, 295, 613, 12567, 2504, 904, 294, 10682, 295, 264, 5598, 1901, 300, 436, 2378, 380, 668, 8895, 322, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0739732950161665, "compression_ratio": 1.4307692307692308, "no_speech_prob": 0.029739603400230408}, {"id": 90, "seek": 88100, "start": 881.0, "end": 898.0, "text": " The next experiment is an image classification experiment on the MNIST dataset, which contains 60,000 28 by 28 pixel images of handwritten digits collected by the US Postal Service in the early 90s in order to develop a mechanism capable of automatically sorting mail based on zip codes.", "tokens": [50364, 440, 958, 5120, 307, 364, 3256, 21538, 5120, 322, 264, 376, 45, 19756, 28872, 11, 597, 8306, 4060, 11, 1360, 7562, 538, 7562, 19261, 5267, 295, 1011, 26859, 27011, 11087, 538, 264, 2546, 10223, 304, 9561, 294, 264, 2440, 4289, 82, 294, 1668, 281, 1499, 257, 7513, 8189, 295, 6772, 32411, 10071, 2361, 322, 20730, 14211, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09266803378150576, "compression_ratio": 1.5571955719557196, "no_speech_prob": 0.20413659512996674}, {"id": 91, "seek": 88100, "start": 898.0, "end": 905.0, "text": " Image classification was performed using a Bayesian convolutional neural network whose architecture is described in the bottom figure.", "tokens": [51214, 29903, 21538, 390, 10332, 1228, 257, 7840, 42434, 45216, 304, 18161, 3209, 6104, 9482, 307, 7619, 294, 264, 2767, 2573, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09266803378150576, "compression_ratio": 1.5571955719557196, "no_speech_prob": 0.20413659512996674}, {"id": 92, "seek": 90500, "start": 905.0, "end": 921.0, "text": " It consists of three convolutional layers. The first layer has 32 filters in a 24 by 24 pixel feature map, while the second and third layers have 64 filters each and an 84 by 84 pixel and 64 by 64 pixel feature map respectively.", "tokens": [50364, 467, 14689, 295, 1045, 45216, 304, 7914, 13, 440, 700, 4583, 575, 8858, 15995, 294, 257, 4022, 538, 4022, 19261, 4111, 4471, 11, 1339, 264, 1150, 293, 2636, 7914, 362, 12145, 15995, 1184, 293, 364, 29018, 538, 29018, 19261, 293, 12145, 538, 12145, 19261, 4111, 4471, 25009, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10809507930980009, "compression_ratio": 1.7612612612612613, "no_speech_prob": 0.3412844240665436}, {"id": 93, "seek": 90500, "start": 921.0, "end": 930.0, "text": " Three convolutional layers are separated by two cooling layers, which are standard sub-sampling layers used to keep the number of parameters in the network small.", "tokens": [51164, 6244, 45216, 304, 7914, 366, 12005, 538, 732, 14785, 7914, 11, 597, 366, 3832, 1422, 12, 19988, 11970, 7914, 1143, 281, 1066, 264, 1230, 295, 9834, 294, 264, 3209, 1359, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10809507930980009, "compression_ratio": 1.7612612612612613, "no_speech_prob": 0.3412844240665436}, {"id": 94, "seek": 93000, "start": 930.0, "end": 936.0, "text": " Here they down sample each convolutional feature map by a factor of two in the width and height directions.", "tokens": [50364, 1692, 436, 760, 6889, 1184, 45216, 304, 4111, 4471, 538, 257, 5952, 295, 732, 294, 264, 11402, 293, 6681, 11095, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10291356510586208, "compression_ratio": 1.5426008968609866, "no_speech_prob": 0.16221983730793}, {"id": 95, "seek": 93000, "start": 936.0, "end": 951.0, "text": " The final two layers are fully connected and have 128 neurons and 10 neurons respectively. All hidden layers compute RELU activations and the output layer computes a softmax distribution over the 10 possible digit classes of each image.", "tokens": [50664, 440, 2572, 732, 7914, 366, 4498, 4582, 293, 362, 29810, 22027, 293, 1266, 22027, 25009, 13, 1057, 7633, 7914, 14722, 497, 3158, 52, 2430, 763, 293, 264, 5598, 4583, 715, 1819, 257, 2787, 41167, 7316, 670, 264, 1266, 1944, 14293, 5359, 295, 1184, 3256, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10291356510586208, "compression_ratio": 1.5426008968609866, "no_speech_prob": 0.16221983730793}, {"id": 96, "seek": 95100, "start": 951.0, "end": 960.0, "text": " The training occurred over 3000 training steps, or approximately 23 epochs, with many batches of 128 images per training step.", "tokens": [50364, 440, 3097, 11068, 670, 20984, 3097, 4439, 11, 420, 10447, 6673, 30992, 28346, 11, 365, 867, 15245, 279, 295, 29810, 5267, 680, 3097, 1823, 13, 50814], "temperature": 0.0, "avg_logprob": -0.16180777247947983, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.4332364499568939}, {"id": 97, "seek": 95100, "start": 960.0, "end": 976.0, "text": " At the 10th, 100th, 500th, and 3000th training step, 10 images were randomly selected from the validation set and classified 50 times each, corresponding to 50 independent samples from the network's posterior distribution for each classification image.", "tokens": [50814, 1711, 264, 1266, 392, 11, 2319, 392, 11, 5923, 392, 11, 293, 20984, 392, 3097, 1823, 11, 1266, 5267, 645, 16979, 8209, 490, 264, 24071, 992, 293, 20627, 2625, 1413, 1184, 11, 11760, 281, 2625, 6695, 10938, 490, 264, 3209, 311, 33529, 7316, 337, 1184, 21538, 3256, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16180777247947983, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.4332364499568939}, {"id": 98, "seek": 97600, "start": 976.0, "end": 993.0, "text": " The four wide columns displayed here show the sampling results at each of these four training steps, and the three narrow columns within each wider column show the image classified to histograms posterior samples in the approximate predicted distribution over the 10 digit classes given the corresponding image.", "tokens": [50364, 440, 1451, 4874, 13766, 16372, 510, 855, 264, 21179, 3542, 412, 1184, 295, 613, 1451, 3097, 4439, 11, 293, 264, 1045, 9432, 13766, 1951, 1184, 11842, 7738, 855, 264, 3256, 20627, 281, 49816, 82, 33529, 10938, 294, 264, 30874, 19147, 7316, 670, 264, 1266, 14293, 5359, 2212, 264, 11760, 3256, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1163904450156472, "compression_ratio": 1.6197916666666667, "no_speech_prob": 0.05915648490190506}, {"id": 99, "seek": 99300, "start": 993.0, "end": 1010.0, "text": " At the start of training, posterior samples have a high variance, and probability masses distributed more or less uniformly over the 10 digit classes from most images, owing to the fact that parameter values are randomly initialized at the start of training, and 10 training steps isn't enough time for the network to learn anything meaningful.", "tokens": [50364, 1711, 264, 722, 295, 3097, 11, 33529, 10938, 362, 257, 1090, 21977, 11, 293, 8482, 23935, 12631, 544, 420, 1570, 48806, 670, 264, 1266, 14293, 5359, 490, 881, 5267, 11, 277, 7904, 281, 264, 1186, 300, 13075, 4190, 366, 16979, 5883, 1602, 412, 264, 722, 295, 3097, 11, 293, 1266, 3097, 4439, 1943, 380, 1547, 565, 337, 264, 3209, 281, 1466, 1340, 10995, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06719181116889505, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.0446312315762043}, {"id": 100, "seek": 101000, "start": 1011.0, "end": 1028.0, "text": " As training progresses, the posterior variance increases as the network is able to correctly classify images with increasingly high probability, although many images, such as the nines in the first, fifth, seventh, and eighth rows are still being incorrectly classified much of the time.", "tokens": [50414, 1018, 3097, 41929, 11, 264, 33529, 21977, 8637, 382, 264, 3209, 307, 1075, 281, 8944, 33872, 5267, 365, 12980, 1090, 8482, 11, 4878, 867, 5267, 11, 1270, 382, 264, 297, 1652, 294, 264, 700, 11, 9266, 11, 17875, 11, 293, 19495, 13241, 366, 920, 885, 42892, 20627, 709, 295, 264, 565, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11161005232069228, "compression_ratio": 1.781954887218045, "no_speech_prob": 0.055760908871889114}, {"id": 101, "seek": 101000, "start": 1028.0, "end": 1039.0, "text": " By the 500th training step, learning becomes slower, however the posterior variance is still decreasing, and the accuracy of the predicted distribution continues to improve on the whole.", "tokens": [51264, 3146, 264, 5923, 392, 3097, 1823, 11, 2539, 3643, 14009, 11, 4461, 264, 33529, 21977, 307, 920, 23223, 11, 293, 264, 14170, 295, 264, 19147, 7316, 6515, 281, 3470, 322, 264, 1379, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11161005232069228, "compression_ratio": 1.781954887218045, "no_speech_prob": 0.055760908871889114}, {"id": 102, "seek": 104000, "start": 1040.0, "end": 1057.0, "text": " By the end of the 3000 epoch, the network is fully converged, posterior samples show almost zero variance for the overwhelming majority of images, and the network's predicted distribution has a classification accuracy of 95.3% on the full test set.", "tokens": [50364, 3146, 264, 917, 295, 264, 20984, 30992, 339, 11, 264, 3209, 307, 4498, 9652, 3004, 11, 33529, 10938, 855, 1920, 4018, 21977, 337, 264, 13373, 6286, 295, 5267, 11, 293, 264, 3209, 311, 19147, 7316, 575, 257, 21538, 14170, 295, 13420, 13, 18, 4, 322, 264, 1577, 1500, 992, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07013120421444077, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.0008293950231745839}, {"id": 103, "seek": 104000, "start": 1057.0, "end": 1065.0, "text": " As was the case in the regression experiment, we see that Bayesian network's uncertainty is captured in the variance of its posterior distribution.", "tokens": [51214, 1018, 390, 264, 1389, 294, 264, 24590, 5120, 11, 321, 536, 300, 7840, 42434, 3209, 311, 15697, 307, 11828, 294, 264, 21977, 295, 1080, 33529, 7316, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07013120421444077, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.0008293950231745839}, {"id": 104, "seek": 106500, "start": 1065.0, "end": 1071.0, "text": " We can also see how the distribution of the first two moments of the posterior change between the beginning and ending of training.", "tokens": [50364, 492, 393, 611, 536, 577, 264, 7316, 295, 264, 700, 732, 6065, 295, 264, 33529, 1319, 1296, 264, 2863, 293, 8121, 295, 3097, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07872441788794289, "compression_ratio": 1.6868686868686869, "no_speech_prob": 0.006792488507926464}, {"id": 105, "seek": 106500, "start": 1071.0, "end": 1082.0, "text": " At the start, both means and variances are tightly peaked, whereas at the end, means are distributed less sharply and with a slightly heavier tail, whereas variances are essentially flat in some layers.", "tokens": [50664, 1711, 264, 722, 11, 1293, 1355, 293, 1374, 21518, 366, 21952, 520, 7301, 11, 9735, 412, 264, 917, 11, 1355, 366, 12631, 1570, 42893, 293, 365, 257, 4748, 18279, 6838, 11, 9735, 1374, 21518, 366, 4476, 4962, 294, 512, 7914, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07872441788794289, "compression_ratio": 1.6868686868686869, "no_speech_prob": 0.006792488507926464}, {"id": 106, "seek": 108200, "start": 1082.0, "end": 1095.0, "text": " As a final word, both experiments show us that employing Bayesian methods in neural networks is preferable in scenarios where we would like to be able to express uncertainty in our neural network's predictions.", "tokens": [50364, 1018, 257, 2572, 1349, 11, 1293, 12050, 855, 505, 300, 3188, 278, 7840, 42434, 7150, 294, 18161, 9590, 307, 4382, 712, 294, 15077, 689, 321, 576, 411, 281, 312, 1075, 281, 5109, 15697, 294, 527, 18161, 3209, 311, 21264, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07829308888268849, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.12208776921033859}, {"id": 107, "seek": 108200, "start": 1095.0, "end": 1101.0, "text": " Finally, all works cited in this presentation are listed here. Thank you for your time.", "tokens": [51014, 6288, 11, 439, 1985, 30134, 294, 341, 5860, 366, 10052, 510, 13, 1044, 291, 337, 428, 565, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07829308888268849, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.12208776921033859}], "language": "en"}