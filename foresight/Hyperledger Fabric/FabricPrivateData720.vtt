WEBVTT

00:00.000 --> 00:05.920
Hello, this is Dave. I'm working on Hyperledger Fabric version 1.2, and today I'll be discussing

00:05.920 --> 00:12.080
and demonstrating a feature that we're working on called Private Data. Private Data is when you've

00:12.080 --> 00:17.760
got a set of data that is sensitive and should not be shared with the entire blockchain network,

00:18.560 --> 00:24.640
what we would call a channel. Let's say you've got a handful of organizations in your channel,

00:24.640 --> 00:31.840
but on any given transaction, maybe only two of the organizations should have access to details

00:31.840 --> 00:40.000
of some of these private transactions. And to do this, we store the private data on the side,

00:40.000 --> 00:45.480
instead of on the blockchain, and sometimes this solution is called sideDB, for that reason,

00:45.480 --> 00:52.200
side database. But a hash of the private data is stored on the blockchain and serves as evidence

00:52.280 --> 00:58.680
of the private data, and is used to validate the private data, and can be used, for example,

00:59.240 --> 01:06.440
later on, if there's a dispute between some of the participants, they can go check the entire

01:06.440 --> 01:12.680
network and look at the blockchain and see what the hash of the private data was, and then you'll

01:12.680 --> 01:21.880
know for sure if that matches the private data that you claim to have had. Discuss how the

01:21.880 --> 01:28.120
private data gets distributed across the network. So when a client submits a proposal for chain

01:28.120 --> 01:34.200
code execution to certain endorsing peers, it can also send in a transient field in the proposal

01:34.200 --> 01:43.080
some private data. The endorsing peers that have executed the chain code, if they notice any private

01:43.080 --> 01:49.160
data rights in that chain code, they will store that data in their own transient store and not

01:49.160 --> 01:54.920
include that private data in the proposal response that gets sent back to the client. It will also

01:56.280 --> 02:01.080
determine which other peers in the network are authorized to receive this private data,

02:01.640 --> 02:07.160
and send the private data to those peers via gossip, so that those peers also have the data,

02:08.040 --> 02:12.120
and can validate and commit the data when the block gets committed.

02:12.280 --> 02:23.800
In step two, the client will submit the transaction to the ordering service, and that gets distributed

02:23.800 --> 02:30.440
in the blocks to all the other peers as normal. And then in step three, the peers that are authorized

02:30.440 --> 02:35.240
to have the private data will look up their private data from their transient stores, validate it

02:35.240 --> 02:41.480
against hashes in the public blocks, and commit the transaction in the block.

02:44.440 --> 02:51.480
So let's look at a scenario to make the principles more concrete here. We'll extend the

02:51.480 --> 02:57.560
Marvel's demonstration that some people might know, and we'll add privacy requirements to that

02:57.560 --> 03:03.960
scenario, such that no Marvel data should go through the ordering service. The Marvel data should

03:03.960 --> 03:11.000
only get distributed peer to peer across the network, and all peers will have access to general

03:11.000 --> 03:17.160
Marvel information, such as the name, size, color, and owner of the Marvel, but only a subset of the

03:17.160 --> 03:25.320
peers have access to private pricing information. For example, only the peers or the organizations

03:25.320 --> 03:36.360
that are involved in that transaction. So we distinguish three sets of data, green, yellow,

03:36.360 --> 03:42.280
and red. Green is the public data that lives on the channel. It goes to the ordering service and

03:42.280 --> 03:49.400
all the peers. Yellow is the Marvel data that goes to all the peers, but not the ordering service.

03:50.360 --> 03:57.640
And this is defined in what we call a collection of data. So the Marvel collection

03:58.760 --> 04:04.200
will get distributed based on the policy, and we see here it's going to go to org one and org two.

04:05.320 --> 04:10.840
And when peers endorse chain code dealing with marbles, it will distribute the private

04:10.840 --> 04:17.800
Marvel's data to it'll attempt to distribute it to two different other peers for redundancy,

04:17.880 --> 04:23.720
so that if this endorsing peer goes down, other peers are available at commit time if there are

04:23.720 --> 04:30.760
requests to pull that private data. But if each of these peers are not available at the current

04:30.760 --> 04:36.840
time on the network, let's say that only one of the peers is required to disseminate the private

04:36.840 --> 04:44.760
data to as a condition of the endorsement of this chain code. Okay, so that is the Marvel's

04:44.760 --> 04:49.960
collection. And then finally, the Marvel's private details collection includes the pricing

04:49.960 --> 04:54.920
information. And let's say in this example, only organization one has access to this data.

04:57.320 --> 05:03.160
Note also, we have a concept of block to live. So for very sensitive information, maybe pricing

05:03.160 --> 05:09.000
information or maybe personal information, the even the private data shouldn't live

05:09.960 --> 05:15.160
on the authorized peers forever. So maybe it only lives for a short time, maybe that's a day,

05:15.160 --> 05:21.640
maybe that's a year. But the way you configure this is through a block to live property. So for

05:21.640 --> 05:27.080
the Marvel's private pricing details, we have a block to live of three, which means this data

05:27.080 --> 05:35.160
will live on the blockchain or the site to be for three blocks. And after that, it will get purged.

05:39.960 --> 05:45.800
So let's step through the data flow for this scenario. First, the client will submit a proposal

05:45.800 --> 05:53.720
to endorsing peers to execute the chain code. Those endorsing peers see the private the

05:53.720 --> 05:59.560
Marvel's collection private data. And based on our distribution policy distributes that to two

05:59.560 --> 06:06.600
other peers. But note, there's a fourth peer in the network that we have not distributed the data

06:06.600 --> 06:10.760
to. So we'll call this missing private data, and we'll come back to that later and discuss how

06:10.760 --> 06:16.440
that's resolved. And remember, there's the second collection, the Marvel private details with the

06:16.440 --> 06:23.960
pricing information. This data is sent to one other peer, because only the organization one

06:23.960 --> 06:33.800
peers have access to this data. In the next step, the endorsing peer sends the proposal response

06:33.800 --> 06:38.360
back to the client, the client submits the transaction to ordering, and the block with

06:38.360 --> 06:47.560
the public transaction gets distributed to all the peers. Next, the peers with the private data

06:47.560 --> 06:54.120
will validate the private data against the hashes in the public transaction. And this peer that

06:54.120 --> 07:01.000
had the missing private data, it will determine that it should have the private data based on the

07:01.000 --> 07:06.920
access policy, its organization to and it should have access to the Marvel's private data. And it

07:06.920 --> 07:21.080
will try to pull the private data from other peers using the gossip protocol. And finally,

07:21.800 --> 07:28.440
once we retrieve that private data, each of the peers has all the data they need to commit the

07:28.440 --> 07:34.840
data, both the public data on the blockchain and the public state database. And then, and for the

07:34.840 --> 07:39.640
private data to the private state database, and what we call the private rights at storage,

07:40.440 --> 07:46.280
which is similar to the blockchain structure, but it's not on the actual blockchain. And each of

07:46.280 --> 07:52.120
the peers also deletes the private data from their transient store, once the transaction is complete

07:52.120 --> 08:01.560
and committed. Okay, let's go see private data in action. So I'm going to bring up a network with

08:01.560 --> 08:09.000
the four peers, two from organization one and two from organization two. And while that network

08:09.880 --> 08:16.040
is spinning up, I will go show you the chain code that we're going to execute and the

08:16.840 --> 08:21.560
how to configure these collections. So I mentioned there's two collections. There is a

08:21.560 --> 08:27.080
collection for marbles. And instead of a normal put state, what we do in the chain code is we do a

08:27.720 --> 08:34.680
put private data. Okay, and then that's for most of the Marvel's data. And then remember for the

08:34.680 --> 08:40.200
pricing information that's separate, we have another collection for the Marvel's private details.

08:40.760 --> 08:46.520
Again, we save that with the put private data function call in the chain code.

08:46.840 --> 08:53.480
And how are these collections configured? Well, they're configured at instantiation of the chain

08:53.480 --> 09:01.240
code time. In this case in this script, I'm writing to a collections JSON file. And here I define

09:01.240 --> 09:09.160
the two collections, specify the dissemination policy for the private data, the max peer,

09:09.160 --> 09:13.000
peer count and the required peer count that the endorser uses to disseminate the private data,

09:13.560 --> 09:17.240
and the block to live policy for each of those collections.

09:20.040 --> 09:23.400
Okay, let's go take a look at our network. So it has spun up,

09:24.440 --> 09:30.840
and we are ready to instantiate the chain code. So the script that brought the network up has

09:31.640 --> 09:37.240
brought up the four peers and the ordering service, and it's installed this private data chain code.

09:37.240 --> 09:51.560
I also have the script for this demonstration up here at Fab 6600 in the hyperledger fabric

09:52.200 --> 10:01.160
JIRA, so that others can follow along. But first we'll go into the client container.

10:01.800 --> 10:09.960
And let's attempt to instantiate this chain code on org one, peer zero.

10:16.360 --> 10:24.440
And this takes a few seconds while the chain code image with the chain code gets built and deployed.

10:25.320 --> 10:38.360
Okay, that was successful. So let's go ahead and create our first marble.

10:46.200 --> 10:52.680
Okay, that was also successful. So next we will query our marble information,

10:52.680 --> 10:57.000
and we have two different queries, one for the public information and one for the private information.

10:58.280 --> 11:04.680
So let's first go try to read the public information from the first peer.

11:07.160 --> 11:11.000
And we see that the first marble formation did come back successful.

11:12.920 --> 11:19.240
And let us next look at the private information for this marble on org one, peer zero.

11:23.000 --> 11:29.480
Okay, and that also has come back. So we see here a price of 99 associated with that marble,

11:29.480 --> 11:38.120
and that's the private details of the marble. And that was all done on org one, peer zero.

11:38.120 --> 11:42.040
So of course he's got the private data, because this is the peer that endorsed that

11:42.600 --> 11:47.880
chain code transaction. But let's query some other peers for the private data.

11:48.840 --> 11:55.240
We look next at org one, peer one, and remember again that org one is entitled to see

11:55.800 --> 12:01.400
the private data, has access to that private data. So this peer should also have the private data.

12:06.280 --> 12:09.640
And this is the first time that we're doing a chain code

12:10.440 --> 12:17.480
invocation or query on this, on this peer. So he also needs to build his chain code image.

12:18.600 --> 12:25.480
So the chain code function can be called. And note that he has returned success with the price.

12:25.480 --> 12:31.720
So this peer also has the private data, which means it was successfully disseminated to this peer.

12:34.120 --> 12:41.320
And then let's check an org two peer. Now, org two does not have access to the private data.

12:42.280 --> 12:52.520
So when this peer gets invoked, again, he builds his chain code. This is the first time we've made a

12:52.520 --> 13:01.400
call on this peer. And org two will not have access to the private data. And so in this case,

13:01.400 --> 13:06.200
when we try to query for the private data, we get an error failed to read failed to get private

13:06.200 --> 13:14.840
details for marble one. And this message states that we have a hash matching this key on the public

13:15.640 --> 13:21.880
and public state, but we don't have the private state for this. So this is because this peer was

13:21.880 --> 13:31.800
not entitled to that data. Okay, next, I'm going to show you some of the logging information just

13:31.800 --> 13:41.880
so we can see how this private data was disseminated. So we'll do a Docker logs command, and we'll check

13:42.440 --> 13:56.600
each of the peers. First, we'll do this on peer zero org one, where the invoke was called.

13:56.680 --> 14:04.360
And the the creation of this marble was done in block four. So we can see that

14:05.960 --> 14:14.440
we've received this block from the network. And we would try to retrieve one transaction

14:14.440 --> 14:19.240
from the transient store because we noticed that there was private data there. And in fact,

14:19.240 --> 14:23.320
we did retrieve the data from the transient store because there was no missing collection

14:23.320 --> 14:32.440
information. And so this this this transaction and this block gets committed to the database.

14:35.080 --> 14:40.360
Now, let's try it. Let's look at something more interesting. Let's look at the organization one.

14:45.880 --> 14:50.520
Sorry, organization two, who does not have access to the private data.

14:54.280 --> 14:58.760
Okay, this this peer received the block.

15:02.600 --> 15:08.920
He tried to retrieve the private data from the transient store. And it was also successful,

15:08.920 --> 15:14.680
there was nothing missing. So this is a peer that had received the data at endorsement time.

15:14.920 --> 15:21.960
And let's check the peer that had the missing private data, due to not getting the data at

15:21.960 --> 15:24.920
endorsement time, that must have been pure one or two.

15:28.360 --> 15:34.920
And here we see a lot more information, because there's more gossip work to be done. He received

15:34.920 --> 15:42.360
the block, tried to retrieve one transactions data from the transient store.

15:42.920 --> 15:47.720
And could not find all the collection private rights sets in the local peer transient store.

15:47.720 --> 15:53.240
So this peer had to do a private data poll, and fetch the private data from remote peers.

15:54.600 --> 15:58.840
And it'll attempt to do this for a configurable duration, in this case, 60 seconds.

15:59.960 --> 16:04.680
And if if they can't find the private data within those 60 seconds, it can go ahead and proceed

16:05.480 --> 16:10.440
with commits without the private data, and he'll be missing the private data and will not be able

16:11.400 --> 16:15.800
to endorse transactions against that private data in the future.

16:16.840 --> 16:21.480
But in this case, in most cases, the peer will be able to find the private data from another

16:21.480 --> 16:27.880
peer in the network, by sending these gossip requests for that data. And we can see we got

16:27.880 --> 16:35.560
one match, and we found all the missing collections. And we are also able to now

16:35.640 --> 16:41.880
commit that block with that transaction, even in this peer that did not get the data at dissemination

16:41.880 --> 16:50.440
time. Next, let's take a look at the private data purging capability.

16:53.320 --> 17:01.240
So again, recall that when we tried to read the private pricing information, and let's again

17:02.120 --> 17:11.240
try that on the first peer, we get back the price of 99. And that was done in block four,

17:11.240 --> 17:18.120
committed in block four. And so this data should be purged after three more blocks.

17:19.080 --> 17:22.760
Because there was this collection is configured with a block to live of three.

17:23.480 --> 17:28.120
So what we're going to do is we're going to create a few more blocks. Let's do this by creating a

17:28.120 --> 17:39.160
marble two. And then we'll transfer this marble to a few times. We're not going to do anything to

17:39.160 --> 17:49.800
marble one, because that would reset its block to live. So after it has a block to live of three,

17:49.800 --> 17:54.120
so it'll live for three blocks. And then on the fourth block commit, it will get purged. So let's

17:54.120 --> 18:06.440
do another transfer on block on marble two. And then one more transfer on marble two. So now

18:06.440 --> 18:12.520
marble one should have lived for three blocks and should have been purged. So we can again try to

18:12.520 --> 18:24.840
read those marble private details on org one peer zero. And this time instead of getting the price

18:24.840 --> 18:31.320
of 99 back, we see that marble private details does not exist for marble one. So this data has

18:31.320 --> 18:42.440
in fact been purged, making this sensitive data now obsolete from the network. Okay, that concludes

18:42.680 --> 18:50.840
the private data demonstration. Stay tuned for further updates on the Hyperledger Fabric Channel.

18:50.840 --> 18:53.640
Thank you.

