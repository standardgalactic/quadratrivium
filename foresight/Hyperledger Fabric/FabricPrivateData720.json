{"text": " Hello, this is Dave. I'm working on Hyperledger Fabric version 1.2, and today I'll be discussing and demonstrating a feature that we're working on called Private Data. Private Data is when you've got a set of data that is sensitive and should not be shared with the entire blockchain network, what we would call a channel. Let's say you've got a handful of organizations in your channel, but on any given transaction, maybe only two of the organizations should have access to details of some of these private transactions. And to do this, we store the private data on the side, instead of on the blockchain, and sometimes this solution is called sideDB, for that reason, side database. But a hash of the private data is stored on the blockchain and serves as evidence of the private data, and is used to validate the private data, and can be used, for example, later on, if there's a dispute between some of the participants, they can go check the entire network and look at the blockchain and see what the hash of the private data was, and then you'll know for sure if that matches the private data that you claim to have had. Discuss how the private data gets distributed across the network. So when a client submits a proposal for chain code execution to certain endorsing peers, it can also send in a transient field in the proposal some private data. The endorsing peers that have executed the chain code, if they notice any private data rights in that chain code, they will store that data in their own transient store and not include that private data in the proposal response that gets sent back to the client. It will also determine which other peers in the network are authorized to receive this private data, and send the private data to those peers via gossip, so that those peers also have the data, and can validate and commit the data when the block gets committed. In step two, the client will submit the transaction to the ordering service, and that gets distributed in the blocks to all the other peers as normal. And then in step three, the peers that are authorized to have the private data will look up their private data from their transient stores, validate it against hashes in the public blocks, and commit the transaction in the block. So let's look at a scenario to make the principles more concrete here. We'll extend the Marvel's demonstration that some people might know, and we'll add privacy requirements to that scenario, such that no Marvel data should go through the ordering service. The Marvel data should only get distributed peer to peer across the network, and all peers will have access to general Marvel information, such as the name, size, color, and owner of the Marvel, but only a subset of the peers have access to private pricing information. For example, only the peers or the organizations that are involved in that transaction. So we distinguish three sets of data, green, yellow, and red. Green is the public data that lives on the channel. It goes to the ordering service and all the peers. Yellow is the Marvel data that goes to all the peers, but not the ordering service. And this is defined in what we call a collection of data. So the Marvel collection will get distributed based on the policy, and we see here it's going to go to org one and org two. And when peers endorse chain code dealing with marbles, it will distribute the private Marvel's data to it'll attempt to distribute it to two different other peers for redundancy, so that if this endorsing peer goes down, other peers are available at commit time if there are requests to pull that private data. But if each of these peers are not available at the current time on the network, let's say that only one of the peers is required to disseminate the private data to as a condition of the endorsement of this chain code. Okay, so that is the Marvel's collection. And then finally, the Marvel's private details collection includes the pricing information. And let's say in this example, only organization one has access to this data. Note also, we have a concept of block to live. So for very sensitive information, maybe pricing information or maybe personal information, the even the private data shouldn't live on the authorized peers forever. So maybe it only lives for a short time, maybe that's a day, maybe that's a year. But the way you configure this is through a block to live property. So for the Marvel's private pricing details, we have a block to live of three, which means this data will live on the blockchain or the site to be for three blocks. And after that, it will get purged. So let's step through the data flow for this scenario. First, the client will submit a proposal to endorsing peers to execute the chain code. Those endorsing peers see the private the Marvel's collection private data. And based on our distribution policy distributes that to two other peers. But note, there's a fourth peer in the network that we have not distributed the data to. So we'll call this missing private data, and we'll come back to that later and discuss how that's resolved. And remember, there's the second collection, the Marvel private details with the pricing information. This data is sent to one other peer, because only the organization one peers have access to this data. In the next step, the endorsing peer sends the proposal response back to the client, the client submits the transaction to ordering, and the block with the public transaction gets distributed to all the peers. Next, the peers with the private data will validate the private data against the hashes in the public transaction. And this peer that had the missing private data, it will determine that it should have the private data based on the access policy, its organization to and it should have access to the Marvel's private data. And it will try to pull the private data from other peers using the gossip protocol. And finally, once we retrieve that private data, each of the peers has all the data they need to commit the data, both the public data on the blockchain and the public state database. And then, and for the private data to the private state database, and what we call the private rights at storage, which is similar to the blockchain structure, but it's not on the actual blockchain. And each of the peers also deletes the private data from their transient store, once the transaction is complete and committed. Okay, let's go see private data in action. So I'm going to bring up a network with the four peers, two from organization one and two from organization two. And while that network is spinning up, I will go show you the chain code that we're going to execute and the how to configure these collections. So I mentioned there's two collections. There is a collection for marbles. And instead of a normal put state, what we do in the chain code is we do a put private data. Okay, and then that's for most of the Marvel's data. And then remember for the pricing information that's separate, we have another collection for the Marvel's private details. Again, we save that with the put private data function call in the chain code. And how are these collections configured? Well, they're configured at instantiation of the chain code time. In this case in this script, I'm writing to a collections JSON file. And here I define the two collections, specify the dissemination policy for the private data, the max peer, peer count and the required peer count that the endorser uses to disseminate the private data, and the block to live policy for each of those collections. Okay, let's go take a look at our network. So it has spun up, and we are ready to instantiate the chain code. So the script that brought the network up has brought up the four peers and the ordering service, and it's installed this private data chain code. I also have the script for this demonstration up here at Fab 6600 in the hyperledger fabric JIRA, so that others can follow along. But first we'll go into the client container. And let's attempt to instantiate this chain code on org one, peer zero. And this takes a few seconds while the chain code image with the chain code gets built and deployed. Okay, that was successful. So let's go ahead and create our first marble. Okay, that was also successful. So next we will query our marble information, and we have two different queries, one for the public information and one for the private information. So let's first go try to read the public information from the first peer. And we see that the first marble formation did come back successful. And let us next look at the private information for this marble on org one, peer zero. Okay, and that also has come back. So we see here a price of 99 associated with that marble, and that's the private details of the marble. And that was all done on org one, peer zero. So of course he's got the private data, because this is the peer that endorsed that chain code transaction. But let's query some other peers for the private data. We look next at org one, peer one, and remember again that org one is entitled to see the private data, has access to that private data. So this peer should also have the private data. And this is the first time that we're doing a chain code invocation or query on this, on this peer. So he also needs to build his chain code image. So the chain code function can be called. And note that he has returned success with the price. So this peer also has the private data, which means it was successfully disseminated to this peer. And then let's check an org two peer. Now, org two does not have access to the private data. So when this peer gets invoked, again, he builds his chain code. This is the first time we've made a call on this peer. And org two will not have access to the private data. And so in this case, when we try to query for the private data, we get an error failed to read failed to get private details for marble one. And this message states that we have a hash matching this key on the public and public state, but we don't have the private state for this. So this is because this peer was not entitled to that data. Okay, next, I'm going to show you some of the logging information just so we can see how this private data was disseminated. So we'll do a Docker logs command, and we'll check each of the peers. First, we'll do this on peer zero org one, where the invoke was called. And the the creation of this marble was done in block four. So we can see that we've received this block from the network. And we would try to retrieve one transaction from the transient store because we noticed that there was private data there. And in fact, we did retrieve the data from the transient store because there was no missing collection information. And so this this this transaction and this block gets committed to the database. Now, let's try it. Let's look at something more interesting. Let's look at the organization one. Sorry, organization two, who does not have access to the private data. Okay, this this peer received the block. He tried to retrieve the private data from the transient store. And it was also successful, there was nothing missing. So this is a peer that had received the data at endorsement time. And let's check the peer that had the missing private data, due to not getting the data at endorsement time, that must have been pure one or two. And here we see a lot more information, because there's more gossip work to be done. He received the block, tried to retrieve one transactions data from the transient store. And could not find all the collection private rights sets in the local peer transient store. So this peer had to do a private data poll, and fetch the private data from remote peers. And it'll attempt to do this for a configurable duration, in this case, 60 seconds. And if if they can't find the private data within those 60 seconds, it can go ahead and proceed with commits without the private data, and he'll be missing the private data and will not be able to endorse transactions against that private data in the future. But in this case, in most cases, the peer will be able to find the private data from another peer in the network, by sending these gossip requests for that data. And we can see we got one match, and we found all the missing collections. And we are also able to now commit that block with that transaction, even in this peer that did not get the data at dissemination time. Next, let's take a look at the private data purging capability. So again, recall that when we tried to read the private pricing information, and let's again try that on the first peer, we get back the price of 99. And that was done in block four, committed in block four. And so this data should be purged after three more blocks. Because there was this collection is configured with a block to live of three. So what we're going to do is we're going to create a few more blocks. Let's do this by creating a marble two. And then we'll transfer this marble to a few times. We're not going to do anything to marble one, because that would reset its block to live. So after it has a block to live of three, so it'll live for three blocks. And then on the fourth block commit, it will get purged. So let's do another transfer on block on marble two. And then one more transfer on marble two. So now marble one should have lived for three blocks and should have been purged. So we can again try to read those marble private details on org one peer zero. And this time instead of getting the price of 99 back, we see that marble private details does not exist for marble one. So this data has in fact been purged, making this sensitive data now obsolete from the network. Okay, that concludes the private data demonstration. Stay tuned for further updates on the Hyperledger Fabric Channel. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 5.92, "text": " Hello, this is Dave. I'm working on Hyperledger Fabric version 1.2, and today I'll be discussing", "tokens": [50364, 2425, 11, 341, 307, 11017, 13, 286, 478, 1364, 322, 29592, 1493, 1321, 17440, 1341, 3037, 502, 13, 17, 11, 293, 965, 286, 603, 312, 10850, 50660], "temperature": 0.0, "avg_logprob": -0.13213133560983759, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.017413755878806114}, {"id": 1, "seek": 0, "start": 5.92, "end": 12.08, "text": " and demonstrating a feature that we're working on called Private Data. Private Data is when you've", "tokens": [50660, 293, 29889, 257, 4111, 300, 321, 434, 1364, 322, 1219, 30386, 11888, 13, 30386, 11888, 307, 562, 291, 600, 50968], "temperature": 0.0, "avg_logprob": -0.13213133560983759, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.017413755878806114}, {"id": 2, "seek": 0, "start": 12.08, "end": 17.76, "text": " got a set of data that is sensitive and should not be shared with the entire blockchain network,", "tokens": [50968, 658, 257, 992, 295, 1412, 300, 307, 9477, 293, 820, 406, 312, 5507, 365, 264, 2302, 17176, 3209, 11, 51252], "temperature": 0.0, "avg_logprob": -0.13213133560983759, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.017413755878806114}, {"id": 3, "seek": 0, "start": 18.56, "end": 24.64, "text": " what we would call a channel. Let's say you've got a handful of organizations in your channel,", "tokens": [51292, 437, 321, 576, 818, 257, 2269, 13, 961, 311, 584, 291, 600, 658, 257, 16458, 295, 6150, 294, 428, 2269, 11, 51596], "temperature": 0.0, "avg_logprob": -0.13213133560983759, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.017413755878806114}, {"id": 4, "seek": 2464, "start": 24.64, "end": 31.84, "text": " but on any given transaction, maybe only two of the organizations should have access to details", "tokens": [50364, 457, 322, 604, 2212, 14425, 11, 1310, 787, 732, 295, 264, 6150, 820, 362, 2105, 281, 4365, 50724], "temperature": 0.0, "avg_logprob": -0.18170833587646484, "compression_ratio": 1.7465437788018434, "no_speech_prob": 0.0035930073354393244}, {"id": 5, "seek": 2464, "start": 31.84, "end": 40.0, "text": " of some of these private transactions. And to do this, we store the private data on the side,", "tokens": [50724, 295, 512, 295, 613, 4551, 16856, 13, 400, 281, 360, 341, 11, 321, 3531, 264, 4551, 1412, 322, 264, 1252, 11, 51132], "temperature": 0.0, "avg_logprob": -0.18170833587646484, "compression_ratio": 1.7465437788018434, "no_speech_prob": 0.0035930073354393244}, {"id": 6, "seek": 2464, "start": 40.0, "end": 45.480000000000004, "text": " instead of on the blockchain, and sometimes this solution is called sideDB, for that reason,", "tokens": [51132, 2602, 295, 322, 264, 17176, 11, 293, 2171, 341, 3827, 307, 1219, 1252, 27735, 11, 337, 300, 1778, 11, 51406], "temperature": 0.0, "avg_logprob": -0.18170833587646484, "compression_ratio": 1.7465437788018434, "no_speech_prob": 0.0035930073354393244}, {"id": 7, "seek": 2464, "start": 45.480000000000004, "end": 52.2, "text": " side database. But a hash of the private data is stored on the blockchain and serves as evidence", "tokens": [51406, 1252, 8149, 13, 583, 257, 22019, 295, 264, 4551, 1412, 307, 12187, 322, 264, 17176, 293, 13451, 382, 4467, 51742], "temperature": 0.0, "avg_logprob": -0.18170833587646484, "compression_ratio": 1.7465437788018434, "no_speech_prob": 0.0035930073354393244}, {"id": 8, "seek": 5220, "start": 52.28, "end": 58.68000000000001, "text": " of the private data, and is used to validate the private data, and can be used, for example,", "tokens": [50368, 295, 264, 4551, 1412, 11, 293, 307, 1143, 281, 29562, 264, 4551, 1412, 11, 293, 393, 312, 1143, 11, 337, 1365, 11, 50688], "temperature": 0.0, "avg_logprob": -0.11091287674442414, "compression_ratio": 1.8028846153846154, "no_speech_prob": 0.01223533134907484}, {"id": 9, "seek": 5220, "start": 59.24, "end": 66.44, "text": " later on, if there's a dispute between some of the participants, they can go check the entire", "tokens": [50716, 1780, 322, 11, 498, 456, 311, 257, 25379, 1296, 512, 295, 264, 10503, 11, 436, 393, 352, 1520, 264, 2302, 51076], "temperature": 0.0, "avg_logprob": -0.11091287674442414, "compression_ratio": 1.8028846153846154, "no_speech_prob": 0.01223533134907484}, {"id": 10, "seek": 5220, "start": 66.44, "end": 72.68, "text": " network and look at the blockchain and see what the hash of the private data was, and then you'll", "tokens": [51076, 3209, 293, 574, 412, 264, 17176, 293, 536, 437, 264, 22019, 295, 264, 4551, 1412, 390, 11, 293, 550, 291, 603, 51388], "temperature": 0.0, "avg_logprob": -0.11091287674442414, "compression_ratio": 1.8028846153846154, "no_speech_prob": 0.01223533134907484}, {"id": 11, "seek": 5220, "start": 72.68, "end": 81.88, "text": " know for sure if that matches the private data that you claim to have had. Discuss how the", "tokens": [51388, 458, 337, 988, 498, 300, 10676, 264, 4551, 1412, 300, 291, 3932, 281, 362, 632, 13, 4208, 2169, 577, 264, 51848], "temperature": 0.0, "avg_logprob": -0.11091287674442414, "compression_ratio": 1.8028846153846154, "no_speech_prob": 0.01223533134907484}, {"id": 12, "seek": 8188, "start": 81.88, "end": 88.11999999999999, "text": " private data gets distributed across the network. So when a client submits a proposal for chain", "tokens": [50364, 4551, 1412, 2170, 12631, 2108, 264, 3209, 13, 407, 562, 257, 6423, 8286, 1208, 257, 11494, 337, 5021, 50676], "temperature": 0.0, "avg_logprob": -0.051769794419754385, "compression_ratio": 1.8476190476190477, "no_speech_prob": 0.0004727715568151325}, {"id": 13, "seek": 8188, "start": 88.11999999999999, "end": 94.19999999999999, "text": " code execution to certain endorsing peers, it can also send in a transient field in the proposal", "tokens": [50676, 3089, 15058, 281, 1629, 37676, 278, 16739, 11, 309, 393, 611, 2845, 294, 257, 41998, 2519, 294, 264, 11494, 50980], "temperature": 0.0, "avg_logprob": -0.051769794419754385, "compression_ratio": 1.8476190476190477, "no_speech_prob": 0.0004727715568151325}, {"id": 14, "seek": 8188, "start": 94.19999999999999, "end": 103.08, "text": " some private data. The endorsing peers that have executed the chain code, if they notice any private", "tokens": [50980, 512, 4551, 1412, 13, 440, 37676, 278, 16739, 300, 362, 17577, 264, 5021, 3089, 11, 498, 436, 3449, 604, 4551, 51424], "temperature": 0.0, "avg_logprob": -0.051769794419754385, "compression_ratio": 1.8476190476190477, "no_speech_prob": 0.0004727715568151325}, {"id": 15, "seek": 8188, "start": 103.08, "end": 109.16, "text": " data rights in that chain code, they will store that data in their own transient store and not", "tokens": [51424, 1412, 4601, 294, 300, 5021, 3089, 11, 436, 486, 3531, 300, 1412, 294, 641, 1065, 41998, 3531, 293, 406, 51728], "temperature": 0.0, "avg_logprob": -0.051769794419754385, "compression_ratio": 1.8476190476190477, "no_speech_prob": 0.0004727715568151325}, {"id": 16, "seek": 10916, "start": 109.16, "end": 114.92, "text": " include that private data in the proposal response that gets sent back to the client. It will also", "tokens": [50364, 4090, 300, 4551, 1412, 294, 264, 11494, 4134, 300, 2170, 2279, 646, 281, 264, 6423, 13, 467, 486, 611, 50652], "temperature": 0.0, "avg_logprob": -0.07500422465336787, "compression_ratio": 1.8167539267015707, "no_speech_prob": 0.008844432421028614}, {"id": 17, "seek": 10916, "start": 116.28, "end": 121.08, "text": " determine which other peers in the network are authorized to receive this private data,", "tokens": [50720, 6997, 597, 661, 16739, 294, 264, 3209, 366, 28312, 281, 4774, 341, 4551, 1412, 11, 50960], "temperature": 0.0, "avg_logprob": -0.07500422465336787, "compression_ratio": 1.8167539267015707, "no_speech_prob": 0.008844432421028614}, {"id": 18, "seek": 10916, "start": 121.64, "end": 127.16, "text": " and send the private data to those peers via gossip, so that those peers also have the data,", "tokens": [50988, 293, 2845, 264, 4551, 1412, 281, 729, 16739, 5766, 31788, 11, 370, 300, 729, 16739, 611, 362, 264, 1412, 11, 51264], "temperature": 0.0, "avg_logprob": -0.07500422465336787, "compression_ratio": 1.8167539267015707, "no_speech_prob": 0.008844432421028614}, {"id": 19, "seek": 10916, "start": 128.04, "end": 132.12, "text": " and can validate and commit the data when the block gets committed.", "tokens": [51308, 293, 393, 29562, 293, 5599, 264, 1412, 562, 264, 3461, 2170, 7784, 13, 51512], "temperature": 0.0, "avg_logprob": -0.07500422465336787, "compression_ratio": 1.8167539267015707, "no_speech_prob": 0.008844432421028614}, {"id": 20, "seek": 13212, "start": 132.28, "end": 143.8, "text": " In step two, the client will submit the transaction to the ordering service, and that gets distributed", "tokens": [50372, 682, 1823, 732, 11, 264, 6423, 486, 10315, 264, 14425, 281, 264, 21739, 2643, 11, 293, 300, 2170, 12631, 50948], "temperature": 0.0, "avg_logprob": -0.13104985365227087, "compression_ratio": 1.641304347826087, "no_speech_prob": 0.005909916013479233}, {"id": 21, "seek": 13212, "start": 143.8, "end": 150.44, "text": " in the blocks to all the other peers as normal. And then in step three, the peers that are authorized", "tokens": [50948, 294, 264, 8474, 281, 439, 264, 661, 16739, 382, 2710, 13, 400, 550, 294, 1823, 1045, 11, 264, 16739, 300, 366, 28312, 51280], "temperature": 0.0, "avg_logprob": -0.13104985365227087, "compression_ratio": 1.641304347826087, "no_speech_prob": 0.005909916013479233}, {"id": 22, "seek": 13212, "start": 150.44, "end": 155.24, "text": " to have the private data will look up their private data from their transient stores, validate it", "tokens": [51280, 281, 362, 264, 4551, 1412, 486, 574, 493, 641, 4551, 1412, 490, 641, 41998, 9512, 11, 29562, 309, 51520], "temperature": 0.0, "avg_logprob": -0.13104985365227087, "compression_ratio": 1.641304347826087, "no_speech_prob": 0.005909916013479233}, {"id": 23, "seek": 15524, "start": 155.24, "end": 161.48000000000002, "text": " against hashes in the public blocks, and commit the transaction in the block.", "tokens": [50364, 1970, 575, 8076, 294, 264, 1908, 8474, 11, 293, 5599, 264, 14425, 294, 264, 3461, 13, 50676], "temperature": 0.0, "avg_logprob": -0.10052316188812256, "compression_ratio": 1.6422018348623852, "no_speech_prob": 0.0025111897848546505}, {"id": 24, "seek": 15524, "start": 164.44, "end": 171.48000000000002, "text": " So let's look at a scenario to make the principles more concrete here. We'll extend the", "tokens": [50824, 407, 718, 311, 574, 412, 257, 9005, 281, 652, 264, 9156, 544, 9859, 510, 13, 492, 603, 10101, 264, 51176], "temperature": 0.0, "avg_logprob": -0.10052316188812256, "compression_ratio": 1.6422018348623852, "no_speech_prob": 0.0025111897848546505}, {"id": 25, "seek": 15524, "start": 171.48000000000002, "end": 177.56, "text": " Marvel's demonstration that some people might know, and we'll add privacy requirements to that", "tokens": [51176, 13837, 311, 16520, 300, 512, 561, 1062, 458, 11, 293, 321, 603, 909, 11427, 7728, 281, 300, 51480], "temperature": 0.0, "avg_logprob": -0.10052316188812256, "compression_ratio": 1.6422018348623852, "no_speech_prob": 0.0025111897848546505}, {"id": 26, "seek": 15524, "start": 177.56, "end": 183.96, "text": " scenario, such that no Marvel data should go through the ordering service. The Marvel data should", "tokens": [51480, 9005, 11, 1270, 300, 572, 13837, 1412, 820, 352, 807, 264, 21739, 2643, 13, 440, 13837, 1412, 820, 51800], "temperature": 0.0, "avg_logprob": -0.10052316188812256, "compression_ratio": 1.6422018348623852, "no_speech_prob": 0.0025111897848546505}, {"id": 27, "seek": 18396, "start": 183.96, "end": 191.0, "text": " only get distributed peer to peer across the network, and all peers will have access to general", "tokens": [50364, 787, 483, 12631, 15108, 281, 15108, 2108, 264, 3209, 11, 293, 439, 16739, 486, 362, 2105, 281, 2674, 50716], "temperature": 0.0, "avg_logprob": -0.0752944661610162, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.00446711853146553}, {"id": 28, "seek": 18396, "start": 191.0, "end": 197.16, "text": " Marvel information, such as the name, size, color, and owner of the Marvel, but only a subset of the", "tokens": [50716, 13837, 1589, 11, 1270, 382, 264, 1315, 11, 2744, 11, 2017, 11, 293, 7289, 295, 264, 13837, 11, 457, 787, 257, 25993, 295, 264, 51024], "temperature": 0.0, "avg_logprob": -0.0752944661610162, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.00446711853146553}, {"id": 29, "seek": 18396, "start": 197.16, "end": 205.32, "text": " peers have access to private pricing information. For example, only the peers or the organizations", "tokens": [51024, 16739, 362, 2105, 281, 4551, 17621, 1589, 13, 1171, 1365, 11, 787, 264, 16739, 420, 264, 6150, 51432], "temperature": 0.0, "avg_logprob": -0.0752944661610162, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.00446711853146553}, {"id": 30, "seek": 20532, "start": 205.32, "end": 216.35999999999999, "text": " that are involved in that transaction. So we distinguish three sets of data, green, yellow,", "tokens": [50364, 300, 366, 3288, 294, 300, 14425, 13, 407, 321, 20206, 1045, 6352, 295, 1412, 11, 3092, 11, 5566, 11, 50916], "temperature": 0.0, "avg_logprob": -0.09350102969578335, "compression_ratio": 1.688235294117647, "no_speech_prob": 0.048840537667274475}, {"id": 31, "seek": 20532, "start": 216.35999999999999, "end": 222.28, "text": " and red. Green is the public data that lives on the channel. It goes to the ordering service and", "tokens": [50916, 293, 2182, 13, 6969, 307, 264, 1908, 1412, 300, 2909, 322, 264, 2269, 13, 467, 1709, 281, 264, 21739, 2643, 293, 51212], "temperature": 0.0, "avg_logprob": -0.09350102969578335, "compression_ratio": 1.688235294117647, "no_speech_prob": 0.048840537667274475}, {"id": 32, "seek": 20532, "start": 222.28, "end": 229.4, "text": " all the peers. Yellow is the Marvel data that goes to all the peers, but not the ordering service.", "tokens": [51212, 439, 264, 16739, 13, 17550, 307, 264, 13837, 1412, 300, 1709, 281, 439, 264, 16739, 11, 457, 406, 264, 21739, 2643, 13, 51568], "temperature": 0.0, "avg_logprob": -0.09350102969578335, "compression_ratio": 1.688235294117647, "no_speech_prob": 0.048840537667274475}, {"id": 33, "seek": 22940, "start": 230.36, "end": 237.64000000000001, "text": " And this is defined in what we call a collection of data. So the Marvel collection", "tokens": [50412, 400, 341, 307, 7642, 294, 437, 321, 818, 257, 5765, 295, 1412, 13, 407, 264, 13837, 5765, 50776], "temperature": 0.0, "avg_logprob": -0.13474715033242868, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.050316475331783295}, {"id": 34, "seek": 22940, "start": 238.76, "end": 244.20000000000002, "text": " will get distributed based on the policy, and we see here it's going to go to org one and org two.", "tokens": [50832, 486, 483, 12631, 2361, 322, 264, 3897, 11, 293, 321, 536, 510, 309, 311, 516, 281, 352, 281, 14045, 472, 293, 14045, 732, 13, 51104], "temperature": 0.0, "avg_logprob": -0.13474715033242868, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.050316475331783295}, {"id": 35, "seek": 22940, "start": 245.32, "end": 250.84, "text": " And when peers endorse chain code dealing with marbles, it will distribute the private", "tokens": [51160, 400, 562, 16739, 29228, 5021, 3089, 6260, 365, 1849, 8806, 11, 309, 486, 20594, 264, 4551, 51436], "temperature": 0.0, "avg_logprob": -0.13474715033242868, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.050316475331783295}, {"id": 36, "seek": 22940, "start": 250.84, "end": 257.8, "text": " Marvel's data to it'll attempt to distribute it to two different other peers for redundancy,", "tokens": [51436, 13837, 311, 1412, 281, 309, 603, 5217, 281, 20594, 309, 281, 732, 819, 661, 16739, 337, 27830, 6717, 11, 51784], "temperature": 0.0, "avg_logprob": -0.13474715033242868, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.050316475331783295}, {"id": 37, "seek": 25780, "start": 257.88, "end": 263.72, "text": " so that if this endorsing peer goes down, other peers are available at commit time if there are", "tokens": [50368, 370, 300, 498, 341, 37676, 278, 15108, 1709, 760, 11, 661, 16739, 366, 2435, 412, 5599, 565, 498, 456, 366, 50660], "temperature": 0.0, "avg_logprob": -0.09939437327177628, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0028004173655062914}, {"id": 38, "seek": 25780, "start": 263.72, "end": 270.76, "text": " requests to pull that private data. But if each of these peers are not available at the current", "tokens": [50660, 12475, 281, 2235, 300, 4551, 1412, 13, 583, 498, 1184, 295, 613, 16739, 366, 406, 2435, 412, 264, 2190, 51012], "temperature": 0.0, "avg_logprob": -0.09939437327177628, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0028004173655062914}, {"id": 39, "seek": 25780, "start": 270.76, "end": 276.84000000000003, "text": " time on the network, let's say that only one of the peers is required to disseminate the private", "tokens": [51012, 565, 322, 264, 3209, 11, 718, 311, 584, 300, 787, 472, 295, 264, 16739, 307, 4739, 281, 34585, 473, 264, 4551, 51316], "temperature": 0.0, "avg_logprob": -0.09939437327177628, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0028004173655062914}, {"id": 40, "seek": 25780, "start": 276.84000000000003, "end": 284.76, "text": " data to as a condition of the endorsement of this chain code. Okay, so that is the Marvel's", "tokens": [51316, 1412, 281, 382, 257, 4188, 295, 264, 29228, 518, 295, 341, 5021, 3089, 13, 1033, 11, 370, 300, 307, 264, 13837, 311, 51712], "temperature": 0.0, "avg_logprob": -0.09939437327177628, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0028004173655062914}, {"id": 41, "seek": 28476, "start": 284.76, "end": 289.96, "text": " collection. And then finally, the Marvel's private details collection includes the pricing", "tokens": [50364, 5765, 13, 400, 550, 2721, 11, 264, 13837, 311, 4551, 4365, 5765, 5974, 264, 17621, 50624], "temperature": 0.0, "avg_logprob": -0.1204079848069411, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.0021825218573212624}, {"id": 42, "seek": 28476, "start": 289.96, "end": 294.92, "text": " information. And let's say in this example, only organization one has access to this data.", "tokens": [50624, 1589, 13, 400, 718, 311, 584, 294, 341, 1365, 11, 787, 4475, 472, 575, 2105, 281, 341, 1412, 13, 50872], "temperature": 0.0, "avg_logprob": -0.1204079848069411, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.0021825218573212624}, {"id": 43, "seek": 28476, "start": 297.32, "end": 303.15999999999997, "text": " Note also, we have a concept of block to live. So for very sensitive information, maybe pricing", "tokens": [50992, 11633, 611, 11, 321, 362, 257, 3410, 295, 3461, 281, 1621, 13, 407, 337, 588, 9477, 1589, 11, 1310, 17621, 51284], "temperature": 0.0, "avg_logprob": -0.1204079848069411, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.0021825218573212624}, {"id": 44, "seek": 28476, "start": 303.15999999999997, "end": 309.0, "text": " information or maybe personal information, the even the private data shouldn't live", "tokens": [51284, 1589, 420, 1310, 2973, 1589, 11, 264, 754, 264, 4551, 1412, 4659, 380, 1621, 51576], "temperature": 0.0, "avg_logprob": -0.1204079848069411, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.0021825218573212624}, {"id": 45, "seek": 30900, "start": 309.96, "end": 315.16, "text": " on the authorized peers forever. So maybe it only lives for a short time, maybe that's a day,", "tokens": [50412, 322, 264, 28312, 16739, 5680, 13, 407, 1310, 309, 787, 2909, 337, 257, 2099, 565, 11, 1310, 300, 311, 257, 786, 11, 50672], "temperature": 0.0, "avg_logprob": -0.0881621075659683, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.022972477599978447}, {"id": 46, "seek": 30900, "start": 315.16, "end": 321.64, "text": " maybe that's a year. But the way you configure this is through a block to live property. So for", "tokens": [50672, 1310, 300, 311, 257, 1064, 13, 583, 264, 636, 291, 22162, 341, 307, 807, 257, 3461, 281, 1621, 4707, 13, 407, 337, 50996], "temperature": 0.0, "avg_logprob": -0.0881621075659683, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.022972477599978447}, {"id": 47, "seek": 30900, "start": 321.64, "end": 327.08, "text": " the Marvel's private pricing details, we have a block to live of three, which means this data", "tokens": [50996, 264, 13837, 311, 4551, 17621, 4365, 11, 321, 362, 257, 3461, 281, 1621, 295, 1045, 11, 597, 1355, 341, 1412, 51268], "temperature": 0.0, "avg_logprob": -0.0881621075659683, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.022972477599978447}, {"id": 48, "seek": 30900, "start": 327.08, "end": 335.16, "text": " will live on the blockchain or the site to be for three blocks. And after that, it will get purged.", "tokens": [51268, 486, 1621, 322, 264, 17176, 420, 264, 3621, 281, 312, 337, 1045, 8474, 13, 400, 934, 300, 11, 309, 486, 483, 1864, 3004, 13, 51672], "temperature": 0.0, "avg_logprob": -0.0881621075659683, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.022972477599978447}, {"id": 49, "seek": 33900, "start": 339.96, "end": 345.8, "text": " So let's step through the data flow for this scenario. First, the client will submit a proposal", "tokens": [50412, 407, 718, 311, 1823, 807, 264, 1412, 3095, 337, 341, 9005, 13, 2386, 11, 264, 6423, 486, 10315, 257, 11494, 50704], "temperature": 0.0, "avg_logprob": -0.14067248410956804, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.0004044548550155014}, {"id": 50, "seek": 33900, "start": 345.8, "end": 353.72, "text": " to endorsing peers to execute the chain code. Those endorsing peers see the private the", "tokens": [50704, 281, 37676, 278, 16739, 281, 14483, 264, 5021, 3089, 13, 3950, 37676, 278, 16739, 536, 264, 4551, 264, 51100], "temperature": 0.0, "avg_logprob": -0.14067248410956804, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.0004044548550155014}, {"id": 51, "seek": 33900, "start": 353.72, "end": 359.56, "text": " Marvel's collection private data. And based on our distribution policy distributes that to two", "tokens": [51100, 13837, 311, 5765, 4551, 1412, 13, 400, 2361, 322, 527, 7316, 3897, 4400, 1819, 300, 281, 732, 51392], "temperature": 0.0, "avg_logprob": -0.14067248410956804, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.0004044548550155014}, {"id": 52, "seek": 33900, "start": 359.56, "end": 366.6, "text": " other peers. But note, there's a fourth peer in the network that we have not distributed the data", "tokens": [51392, 661, 16739, 13, 583, 3637, 11, 456, 311, 257, 6409, 15108, 294, 264, 3209, 300, 321, 362, 406, 12631, 264, 1412, 51744], "temperature": 0.0, "avg_logprob": -0.14067248410956804, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.0004044548550155014}, {"id": 53, "seek": 36660, "start": 366.6, "end": 370.76000000000005, "text": " to. So we'll call this missing private data, and we'll come back to that later and discuss how", "tokens": [50364, 281, 13, 407, 321, 603, 818, 341, 5361, 4551, 1412, 11, 293, 321, 603, 808, 646, 281, 300, 1780, 293, 2248, 577, 50572], "temperature": 0.0, "avg_logprob": -0.10092301802201704, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0023227089550346136}, {"id": 54, "seek": 36660, "start": 370.76000000000005, "end": 376.44, "text": " that's resolved. And remember, there's the second collection, the Marvel private details with the", "tokens": [50572, 300, 311, 20772, 13, 400, 1604, 11, 456, 311, 264, 1150, 5765, 11, 264, 13837, 4551, 4365, 365, 264, 50856], "temperature": 0.0, "avg_logprob": -0.10092301802201704, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0023227089550346136}, {"id": 55, "seek": 36660, "start": 376.44, "end": 383.96000000000004, "text": " pricing information. This data is sent to one other peer, because only the organization one", "tokens": [50856, 17621, 1589, 13, 639, 1412, 307, 2279, 281, 472, 661, 15108, 11, 570, 787, 264, 4475, 472, 51232], "temperature": 0.0, "avg_logprob": -0.10092301802201704, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0023227089550346136}, {"id": 56, "seek": 36660, "start": 383.96000000000004, "end": 393.8, "text": " peers have access to this data. In the next step, the endorsing peer sends the proposal response", "tokens": [51232, 16739, 362, 2105, 281, 341, 1412, 13, 682, 264, 958, 1823, 11, 264, 37676, 278, 15108, 14790, 264, 11494, 4134, 51724], "temperature": 0.0, "avg_logprob": -0.10092301802201704, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0023227089550346136}, {"id": 57, "seek": 39380, "start": 393.8, "end": 398.36, "text": " back to the client, the client submits the transaction to ordering, and the block with", "tokens": [50364, 646, 281, 264, 6423, 11, 264, 6423, 8286, 1208, 264, 14425, 281, 21739, 11, 293, 264, 3461, 365, 50592], "temperature": 0.0, "avg_logprob": -0.05993680494377412, "compression_ratio": 2.0106951871657754, "no_speech_prob": 0.0015009795315563679}, {"id": 58, "seek": 39380, "start": 398.36, "end": 407.56, "text": " the public transaction gets distributed to all the peers. Next, the peers with the private data", "tokens": [50592, 264, 1908, 14425, 2170, 12631, 281, 439, 264, 16739, 13, 3087, 11, 264, 16739, 365, 264, 4551, 1412, 51052], "temperature": 0.0, "avg_logprob": -0.05993680494377412, "compression_ratio": 2.0106951871657754, "no_speech_prob": 0.0015009795315563679}, {"id": 59, "seek": 39380, "start": 407.56, "end": 414.12, "text": " will validate the private data against the hashes in the public transaction. And this peer that", "tokens": [51052, 486, 29562, 264, 4551, 1412, 1970, 264, 575, 8076, 294, 264, 1908, 14425, 13, 400, 341, 15108, 300, 51380], "temperature": 0.0, "avg_logprob": -0.05993680494377412, "compression_ratio": 2.0106951871657754, "no_speech_prob": 0.0015009795315563679}, {"id": 60, "seek": 39380, "start": 414.12, "end": 421.0, "text": " had the missing private data, it will determine that it should have the private data based on the", "tokens": [51380, 632, 264, 5361, 4551, 1412, 11, 309, 486, 6997, 300, 309, 820, 362, 264, 4551, 1412, 2361, 322, 264, 51724], "temperature": 0.0, "avg_logprob": -0.05993680494377412, "compression_ratio": 2.0106951871657754, "no_speech_prob": 0.0015009795315563679}, {"id": 61, "seek": 42100, "start": 421.0, "end": 426.92, "text": " access policy, its organization to and it should have access to the Marvel's private data. And it", "tokens": [50364, 2105, 3897, 11, 1080, 4475, 281, 293, 309, 820, 362, 2105, 281, 264, 13837, 311, 4551, 1412, 13, 400, 309, 50660], "temperature": 0.0, "avg_logprob": -0.12846573916348544, "compression_ratio": 1.6079545454545454, "no_speech_prob": 0.0033760075457394123}, {"id": 62, "seek": 42100, "start": 426.92, "end": 441.08, "text": " will try to pull the private data from other peers using the gossip protocol. And finally,", "tokens": [50660, 486, 853, 281, 2235, 264, 4551, 1412, 490, 661, 16739, 1228, 264, 31788, 10336, 13, 400, 2721, 11, 51368], "temperature": 0.0, "avg_logprob": -0.12846573916348544, "compression_ratio": 1.6079545454545454, "no_speech_prob": 0.0033760075457394123}, {"id": 63, "seek": 42100, "start": 441.8, "end": 448.44, "text": " once we retrieve that private data, each of the peers has all the data they need to commit the", "tokens": [51404, 1564, 321, 30254, 300, 4551, 1412, 11, 1184, 295, 264, 16739, 575, 439, 264, 1412, 436, 643, 281, 5599, 264, 51736], "temperature": 0.0, "avg_logprob": -0.12846573916348544, "compression_ratio": 1.6079545454545454, "no_speech_prob": 0.0033760075457394123}, {"id": 64, "seek": 44844, "start": 448.44, "end": 454.84, "text": " data, both the public data on the blockchain and the public state database. And then, and for the", "tokens": [50364, 1412, 11, 1293, 264, 1908, 1412, 322, 264, 17176, 293, 264, 1908, 1785, 8149, 13, 400, 550, 11, 293, 337, 264, 50684], "temperature": 0.0, "avg_logprob": -0.11857280511965697, "compression_ratio": 2.005181347150259, "no_speech_prob": 0.004330616910010576}, {"id": 65, "seek": 44844, "start": 454.84, "end": 459.64, "text": " private data to the private state database, and what we call the private rights at storage,", "tokens": [50684, 4551, 1412, 281, 264, 4551, 1785, 8149, 11, 293, 437, 321, 818, 264, 4551, 4601, 412, 6725, 11, 50924], "temperature": 0.0, "avg_logprob": -0.11857280511965697, "compression_ratio": 2.005181347150259, "no_speech_prob": 0.004330616910010576}, {"id": 66, "seek": 44844, "start": 460.44, "end": 466.28, "text": " which is similar to the blockchain structure, but it's not on the actual blockchain. And each of", "tokens": [50964, 597, 307, 2531, 281, 264, 17176, 3877, 11, 457, 309, 311, 406, 322, 264, 3539, 17176, 13, 400, 1184, 295, 51256], "temperature": 0.0, "avg_logprob": -0.11857280511965697, "compression_ratio": 2.005181347150259, "no_speech_prob": 0.004330616910010576}, {"id": 67, "seek": 44844, "start": 466.28, "end": 472.12, "text": " the peers also deletes the private data from their transient store, once the transaction is complete", "tokens": [51256, 264, 16739, 611, 1103, 37996, 264, 4551, 1412, 490, 641, 41998, 3531, 11, 1564, 264, 14425, 307, 3566, 51548], "temperature": 0.0, "avg_logprob": -0.11857280511965697, "compression_ratio": 2.005181347150259, "no_speech_prob": 0.004330616910010576}, {"id": 68, "seek": 47212, "start": 472.12, "end": 481.56, "text": " and committed. Okay, let's go see private data in action. So I'm going to bring up a network with", "tokens": [50364, 293, 7784, 13, 1033, 11, 718, 311, 352, 536, 4551, 1412, 294, 3069, 13, 407, 286, 478, 516, 281, 1565, 493, 257, 3209, 365, 50836], "temperature": 0.0, "avg_logprob": -0.09549707777044747, "compression_ratio": 1.6712328767123288, "no_speech_prob": 0.009410226717591286}, {"id": 69, "seek": 47212, "start": 481.56, "end": 489.0, "text": " the four peers, two from organization one and two from organization two. And while that network", "tokens": [50836, 264, 1451, 16739, 11, 732, 490, 4475, 472, 293, 732, 490, 4475, 732, 13, 400, 1339, 300, 3209, 51208], "temperature": 0.0, "avg_logprob": -0.09549707777044747, "compression_ratio": 1.6712328767123288, "no_speech_prob": 0.009410226717591286}, {"id": 70, "seek": 47212, "start": 489.88, "end": 496.04, "text": " is spinning up, I will go show you the chain code that we're going to execute and the", "tokens": [51252, 307, 15640, 493, 11, 286, 486, 352, 855, 291, 264, 5021, 3089, 300, 321, 434, 516, 281, 14483, 293, 264, 51560], "temperature": 0.0, "avg_logprob": -0.09549707777044747, "compression_ratio": 1.6712328767123288, "no_speech_prob": 0.009410226717591286}, {"id": 71, "seek": 47212, "start": 496.84000000000003, "end": 501.56, "text": " how to configure these collections. So I mentioned there's two collections. There is a", "tokens": [51600, 577, 281, 22162, 613, 16641, 13, 407, 286, 2835, 456, 311, 732, 16641, 13, 821, 307, 257, 51836], "temperature": 0.0, "avg_logprob": -0.09549707777044747, "compression_ratio": 1.6712328767123288, "no_speech_prob": 0.009410226717591286}, {"id": 72, "seek": 50156, "start": 501.56, "end": 507.08, "text": " collection for marbles. And instead of a normal put state, what we do in the chain code is we do a", "tokens": [50364, 5765, 337, 1849, 8806, 13, 400, 2602, 295, 257, 2710, 829, 1785, 11, 437, 321, 360, 294, 264, 5021, 3089, 307, 321, 360, 257, 50640], "temperature": 0.0, "avg_logprob": -0.09533626430637233, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0018672613659873605}, {"id": 73, "seek": 50156, "start": 507.72, "end": 514.68, "text": " put private data. Okay, and then that's for most of the Marvel's data. And then remember for the", "tokens": [50672, 829, 4551, 1412, 13, 1033, 11, 293, 550, 300, 311, 337, 881, 295, 264, 13837, 311, 1412, 13, 400, 550, 1604, 337, 264, 51020], "temperature": 0.0, "avg_logprob": -0.09533626430637233, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0018672613659873605}, {"id": 74, "seek": 50156, "start": 514.68, "end": 520.2, "text": " pricing information that's separate, we have another collection for the Marvel's private details.", "tokens": [51020, 17621, 1589, 300, 311, 4994, 11, 321, 362, 1071, 5765, 337, 264, 13837, 311, 4551, 4365, 13, 51296], "temperature": 0.0, "avg_logprob": -0.09533626430637233, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0018672613659873605}, {"id": 75, "seek": 50156, "start": 520.76, "end": 526.52, "text": " Again, we save that with the put private data function call in the chain code.", "tokens": [51324, 3764, 11, 321, 3155, 300, 365, 264, 829, 4551, 1412, 2445, 818, 294, 264, 5021, 3089, 13, 51612], "temperature": 0.0, "avg_logprob": -0.09533626430637233, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0018672613659873605}, {"id": 76, "seek": 52652, "start": 526.84, "end": 533.48, "text": " And how are these collections configured? Well, they're configured at instantiation of the chain", "tokens": [50380, 400, 577, 366, 613, 16641, 30538, 30, 1042, 11, 436, 434, 30538, 412, 9836, 6642, 295, 264, 5021, 50712], "temperature": 0.0, "avg_logprob": -0.13473136858506637, "compression_ratio": 1.7227272727272727, "no_speech_prob": 0.008060352876782417}, {"id": 77, "seek": 52652, "start": 533.48, "end": 541.24, "text": " code time. In this case in this script, I'm writing to a collections JSON file. And here I define", "tokens": [50712, 3089, 565, 13, 682, 341, 1389, 294, 341, 5755, 11, 286, 478, 3579, 281, 257, 16641, 31828, 3991, 13, 400, 510, 286, 6964, 51100], "temperature": 0.0, "avg_logprob": -0.13473136858506637, "compression_ratio": 1.7227272727272727, "no_speech_prob": 0.008060352876782417}, {"id": 78, "seek": 52652, "start": 541.24, "end": 549.16, "text": " the two collections, specify the dissemination policy for the private data, the max peer,", "tokens": [51100, 264, 732, 16641, 11, 16500, 264, 34585, 399, 3897, 337, 264, 4551, 1412, 11, 264, 11469, 15108, 11, 51496], "temperature": 0.0, "avg_logprob": -0.13473136858506637, "compression_ratio": 1.7227272727272727, "no_speech_prob": 0.008060352876782417}, {"id": 79, "seek": 52652, "start": 549.16, "end": 553.0, "text": " peer count and the required peer count that the endorser uses to disseminate the private data,", "tokens": [51496, 15108, 1207, 293, 264, 4739, 15108, 1207, 300, 264, 37676, 260, 4960, 281, 34585, 473, 264, 4551, 1412, 11, 51688], "temperature": 0.0, "avg_logprob": -0.13473136858506637, "compression_ratio": 1.7227272727272727, "no_speech_prob": 0.008060352876782417}, {"id": 80, "seek": 55300, "start": 553.56, "end": 557.24, "text": " and the block to live policy for each of those collections.", "tokens": [50392, 293, 264, 3461, 281, 1621, 3897, 337, 1184, 295, 729, 16641, 13, 50576], "temperature": 0.0, "avg_logprob": -0.09672209024429321, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.002322893124073744}, {"id": 81, "seek": 55300, "start": 560.04, "end": 563.4, "text": " Okay, let's go take a look at our network. So it has spun up,", "tokens": [50716, 1033, 11, 718, 311, 352, 747, 257, 574, 412, 527, 3209, 13, 407, 309, 575, 37038, 493, 11, 50884], "temperature": 0.0, "avg_logprob": -0.09672209024429321, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.002322893124073744}, {"id": 82, "seek": 55300, "start": 564.44, "end": 570.84, "text": " and we are ready to instantiate the chain code. So the script that brought the network up has", "tokens": [50936, 293, 321, 366, 1919, 281, 9836, 13024, 264, 5021, 3089, 13, 407, 264, 5755, 300, 3038, 264, 3209, 493, 575, 51256], "temperature": 0.0, "avg_logprob": -0.09672209024429321, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.002322893124073744}, {"id": 83, "seek": 55300, "start": 571.64, "end": 577.24, "text": " brought up the four peers and the ordering service, and it's installed this private data chain code.", "tokens": [51296, 3038, 493, 264, 1451, 16739, 293, 264, 21739, 2643, 11, 293, 309, 311, 8899, 341, 4551, 1412, 5021, 3089, 13, 51576], "temperature": 0.0, "avg_logprob": -0.09672209024429321, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.002322893124073744}, {"id": 84, "seek": 57724, "start": 577.24, "end": 591.5600000000001, "text": " I also have the script for this demonstration up here at Fab 6600 in the hyperledger fabric", "tokens": [50364, 286, 611, 362, 264, 5755, 337, 341, 16520, 493, 510, 412, 17440, 1386, 15707, 294, 264, 9848, 1493, 1321, 7253, 51080], "temperature": 0.0, "avg_logprob": -0.23550265768299933, "compression_ratio": 1.2661870503597121, "no_speech_prob": 0.003272625617682934}, {"id": 85, "seek": 57724, "start": 592.2, "end": 601.16, "text": " JIRA, so that others can follow along. But first we'll go into the client container.", "tokens": [51112, 50172, 3750, 11, 370, 300, 2357, 393, 1524, 2051, 13, 583, 700, 321, 603, 352, 666, 264, 6423, 10129, 13, 51560], "temperature": 0.0, "avg_logprob": -0.23550265768299933, "compression_ratio": 1.2661870503597121, "no_speech_prob": 0.003272625617682934}, {"id": 86, "seek": 60116, "start": 601.8, "end": 609.9599999999999, "text": " And let's attempt to instantiate this chain code on org one, peer zero.", "tokens": [50396, 400, 718, 311, 5217, 281, 9836, 13024, 341, 5021, 3089, 322, 14045, 472, 11, 15108, 4018, 13, 50804], "temperature": 0.0, "avg_logprob": -0.1490907779959745, "compression_ratio": 1.4333333333333333, "no_speech_prob": 0.012051823548972607}, {"id": 87, "seek": 60116, "start": 616.36, "end": 624.4399999999999, "text": " And this takes a few seconds while the chain code image with the chain code gets built and deployed.", "tokens": [51124, 400, 341, 2516, 257, 1326, 3949, 1339, 264, 5021, 3089, 3256, 365, 264, 5021, 3089, 2170, 3094, 293, 17826, 13, 51528], "temperature": 0.0, "avg_logprob": -0.1490907779959745, "compression_ratio": 1.4333333333333333, "no_speech_prob": 0.012051823548972607}, {"id": 88, "seek": 62444, "start": 625.32, "end": 638.36, "text": " Okay, that was successful. So let's go ahead and create our first marble.", "tokens": [50408, 1033, 11, 300, 390, 4406, 13, 407, 718, 311, 352, 2286, 293, 1884, 527, 700, 26844, 13, 51060], "temperature": 0.0, "avg_logprob": -0.22127070793738732, "compression_ratio": 1.3981481481481481, "no_speech_prob": 0.007694036699831486}, {"id": 89, "seek": 62444, "start": 646.2, "end": 652.6800000000001, "text": " Okay, that was also successful. So next we will query our marble information,", "tokens": [51452, 1033, 11, 300, 390, 611, 4406, 13, 407, 958, 321, 486, 14581, 527, 26844, 1589, 11, 51776], "temperature": 0.0, "avg_logprob": -0.22127070793738732, "compression_ratio": 1.3981481481481481, "no_speech_prob": 0.007694036699831486}, {"id": 90, "seek": 65268, "start": 652.68, "end": 657.0, "text": " and we have two different queries, one for the public information and one for the private information.", "tokens": [50364, 293, 321, 362, 732, 819, 24109, 11, 472, 337, 264, 1908, 1589, 293, 472, 337, 264, 4551, 1589, 13, 50580], "temperature": 0.0, "avg_logprob": -0.0898383102918926, "compression_ratio": 1.8342541436464088, "no_speech_prob": 0.0005882455734536052}, {"id": 91, "seek": 65268, "start": 658.28, "end": 664.68, "text": " So let's first go try to read the public information from the first peer.", "tokens": [50644, 407, 718, 311, 700, 352, 853, 281, 1401, 264, 1908, 1589, 490, 264, 700, 15108, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0898383102918926, "compression_ratio": 1.8342541436464088, "no_speech_prob": 0.0005882455734536052}, {"id": 92, "seek": 65268, "start": 667.16, "end": 671.0, "text": " And we see that the first marble formation did come back successful.", "tokens": [51088, 400, 321, 536, 300, 264, 700, 26844, 11723, 630, 808, 646, 4406, 13, 51280], "temperature": 0.0, "avg_logprob": -0.0898383102918926, "compression_ratio": 1.8342541436464088, "no_speech_prob": 0.0005882455734536052}, {"id": 93, "seek": 65268, "start": 672.92, "end": 679.24, "text": " And let us next look at the private information for this marble on org one, peer zero.", "tokens": [51376, 400, 718, 505, 958, 574, 412, 264, 4551, 1589, 337, 341, 26844, 322, 14045, 472, 11, 15108, 4018, 13, 51692], "temperature": 0.0, "avg_logprob": -0.0898383102918926, "compression_ratio": 1.8342541436464088, "no_speech_prob": 0.0005882455734536052}, {"id": 94, "seek": 68268, "start": 683.0, "end": 689.4799999999999, "text": " Okay, and that also has come back. So we see here a price of 99 associated with that marble,", "tokens": [50380, 1033, 11, 293, 300, 611, 575, 808, 646, 13, 407, 321, 536, 510, 257, 3218, 295, 11803, 6615, 365, 300, 26844, 11, 50704], "temperature": 0.0, "avg_logprob": -0.1315457062287764, "compression_ratio": 1.6555023923444976, "no_speech_prob": 0.0019262352725490928}, {"id": 95, "seek": 68268, "start": 689.4799999999999, "end": 698.12, "text": " and that's the private details of the marble. And that was all done on org one, peer zero.", "tokens": [50704, 293, 300, 311, 264, 4551, 4365, 295, 264, 26844, 13, 400, 300, 390, 439, 1096, 322, 14045, 472, 11, 15108, 4018, 13, 51136], "temperature": 0.0, "avg_logprob": -0.1315457062287764, "compression_ratio": 1.6555023923444976, "no_speech_prob": 0.0019262352725490928}, {"id": 96, "seek": 68268, "start": 698.12, "end": 702.04, "text": " So of course he's got the private data, because this is the peer that endorsed that", "tokens": [51136, 407, 295, 1164, 415, 311, 658, 264, 4551, 1412, 11, 570, 341, 307, 264, 15108, 300, 50094, 300, 51332], "temperature": 0.0, "avg_logprob": -0.1315457062287764, "compression_ratio": 1.6555023923444976, "no_speech_prob": 0.0019262352725490928}, {"id": 97, "seek": 68268, "start": 702.5999999999999, "end": 707.88, "text": " chain code transaction. But let's query some other peers for the private data.", "tokens": [51360, 5021, 3089, 14425, 13, 583, 718, 311, 14581, 512, 661, 16739, 337, 264, 4551, 1412, 13, 51624], "temperature": 0.0, "avg_logprob": -0.1315457062287764, "compression_ratio": 1.6555023923444976, "no_speech_prob": 0.0019262352725490928}, {"id": 98, "seek": 70788, "start": 708.84, "end": 715.24, "text": " We look next at org one, peer one, and remember again that org one is entitled to see", "tokens": [50412, 492, 574, 958, 412, 14045, 472, 11, 15108, 472, 11, 293, 1604, 797, 300, 14045, 472, 307, 17838, 281, 536, 50732], "temperature": 0.0, "avg_logprob": -0.11820457682890051, "compression_ratio": 1.7202072538860103, "no_speech_prob": 0.002322562038898468}, {"id": 99, "seek": 70788, "start": 715.8, "end": 721.4, "text": " the private data, has access to that private data. So this peer should also have the private data.", "tokens": [50760, 264, 4551, 1412, 11, 575, 2105, 281, 300, 4551, 1412, 13, 407, 341, 15108, 820, 611, 362, 264, 4551, 1412, 13, 51040], "temperature": 0.0, "avg_logprob": -0.11820457682890051, "compression_ratio": 1.7202072538860103, "no_speech_prob": 0.002322562038898468}, {"id": 100, "seek": 70788, "start": 726.28, "end": 729.64, "text": " And this is the first time that we're doing a chain code", "tokens": [51284, 400, 341, 307, 264, 700, 565, 300, 321, 434, 884, 257, 5021, 3089, 51452], "temperature": 0.0, "avg_logprob": -0.11820457682890051, "compression_ratio": 1.7202072538860103, "no_speech_prob": 0.002322562038898468}, {"id": 101, "seek": 70788, "start": 730.4399999999999, "end": 737.48, "text": " invocation or query on this, on this peer. So he also needs to build his chain code image.", "tokens": [51492, 1048, 27943, 420, 14581, 322, 341, 11, 322, 341, 15108, 13, 407, 415, 611, 2203, 281, 1322, 702, 5021, 3089, 3256, 13, 51844], "temperature": 0.0, "avg_logprob": -0.11820457682890051, "compression_ratio": 1.7202072538860103, "no_speech_prob": 0.002322562038898468}, {"id": 102, "seek": 73788, "start": 738.6, "end": 745.48, "text": " So the chain code function can be called. And note that he has returned success with the price.", "tokens": [50400, 407, 264, 5021, 3089, 2445, 393, 312, 1219, 13, 400, 3637, 300, 415, 575, 8752, 2245, 365, 264, 3218, 13, 50744], "temperature": 0.0, "avg_logprob": -0.11272095962309502, "compression_ratio": 1.6214689265536724, "no_speech_prob": 0.000954527233261615}, {"id": 103, "seek": 73788, "start": 745.48, "end": 751.72, "text": " So this peer also has the private data, which means it was successfully disseminated to this peer.", "tokens": [50744, 407, 341, 15108, 611, 575, 264, 4551, 1412, 11, 597, 1355, 309, 390, 10727, 34585, 770, 281, 341, 15108, 13, 51056], "temperature": 0.0, "avg_logprob": -0.11272095962309502, "compression_ratio": 1.6214689265536724, "no_speech_prob": 0.000954527233261615}, {"id": 104, "seek": 73788, "start": 754.12, "end": 761.32, "text": " And then let's check an org two peer. Now, org two does not have access to the private data.", "tokens": [51176, 400, 550, 718, 311, 1520, 364, 14045, 732, 15108, 13, 823, 11, 14045, 732, 775, 406, 362, 2105, 281, 264, 4551, 1412, 13, 51536], "temperature": 0.0, "avg_logprob": -0.11272095962309502, "compression_ratio": 1.6214689265536724, "no_speech_prob": 0.000954527233261615}, {"id": 105, "seek": 76132, "start": 762.2800000000001, "end": 772.5200000000001, "text": " So when this peer gets invoked, again, he builds his chain code. This is the first time we've made a", "tokens": [50412, 407, 562, 341, 15108, 2170, 1048, 9511, 11, 797, 11, 415, 15182, 702, 5021, 3089, 13, 639, 307, 264, 700, 565, 321, 600, 1027, 257, 50924], "temperature": 0.0, "avg_logprob": -0.14682442801339285, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.014060860499739647}, {"id": 106, "seek": 76132, "start": 772.5200000000001, "end": 781.4000000000001, "text": " call on this peer. And org two will not have access to the private data. And so in this case,", "tokens": [50924, 818, 322, 341, 15108, 13, 400, 14045, 732, 486, 406, 362, 2105, 281, 264, 4551, 1412, 13, 400, 370, 294, 341, 1389, 11, 51368], "temperature": 0.0, "avg_logprob": -0.14682442801339285, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.014060860499739647}, {"id": 107, "seek": 76132, "start": 781.4000000000001, "end": 786.2, "text": " when we try to query for the private data, we get an error failed to read failed to get private", "tokens": [51368, 562, 321, 853, 281, 14581, 337, 264, 4551, 1412, 11, 321, 483, 364, 6713, 7612, 281, 1401, 7612, 281, 483, 4551, 51608], "temperature": 0.0, "avg_logprob": -0.14682442801339285, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.014060860499739647}, {"id": 108, "seek": 78620, "start": 786.2, "end": 794.84, "text": " details for marble one. And this message states that we have a hash matching this key on the public", "tokens": [50364, 4365, 337, 26844, 472, 13, 400, 341, 3636, 4368, 300, 321, 362, 257, 22019, 14324, 341, 2141, 322, 264, 1908, 50796], "temperature": 0.0, "avg_logprob": -0.12753646903567845, "compression_ratio": 1.5473684210526315, "no_speech_prob": 0.002631227020174265}, {"id": 109, "seek": 78620, "start": 795.6400000000001, "end": 801.88, "text": " and public state, but we don't have the private state for this. So this is because this peer was", "tokens": [50836, 293, 1908, 1785, 11, 457, 321, 500, 380, 362, 264, 4551, 1785, 337, 341, 13, 407, 341, 307, 570, 341, 15108, 390, 51148], "temperature": 0.0, "avg_logprob": -0.12753646903567845, "compression_ratio": 1.5473684210526315, "no_speech_prob": 0.002631227020174265}, {"id": 110, "seek": 78620, "start": 801.88, "end": 811.8000000000001, "text": " not entitled to that data. Okay, next, I'm going to show you some of the logging information just", "tokens": [51148, 406, 17838, 281, 300, 1412, 13, 1033, 11, 958, 11, 286, 478, 516, 281, 855, 291, 512, 295, 264, 27991, 1589, 445, 51644], "temperature": 0.0, "avg_logprob": -0.12753646903567845, "compression_ratio": 1.5473684210526315, "no_speech_prob": 0.002631227020174265}, {"id": 111, "seek": 81180, "start": 811.8, "end": 821.88, "text": " so we can see how this private data was disseminated. So we'll do a Docker logs command, and we'll check", "tokens": [50364, 370, 321, 393, 536, 577, 341, 4551, 1412, 390, 34585, 770, 13, 407, 321, 603, 360, 257, 33772, 20820, 5622, 11, 293, 321, 603, 1520, 50868], "temperature": 0.0, "avg_logprob": -0.1130137355239303, "compression_ratio": 1.4233576642335766, "no_speech_prob": 0.0014548886101692915}, {"id": 112, "seek": 81180, "start": 822.4399999999999, "end": 836.5999999999999, "text": " each of the peers. First, we'll do this on peer zero org one, where the invoke was called.", "tokens": [50896, 1184, 295, 264, 16739, 13, 2386, 11, 321, 603, 360, 341, 322, 15108, 4018, 14045, 472, 11, 689, 264, 41117, 390, 1219, 13, 51604], "temperature": 0.0, "avg_logprob": -0.1130137355239303, "compression_ratio": 1.4233576642335766, "no_speech_prob": 0.0014548886101692915}, {"id": 113, "seek": 83660, "start": 836.6800000000001, "end": 844.36, "text": " And the the creation of this marble was done in block four. So we can see that", "tokens": [50368, 400, 264, 264, 8016, 295, 341, 26844, 390, 1096, 294, 3461, 1451, 13, 407, 321, 393, 536, 300, 50752], "temperature": 0.0, "avg_logprob": -0.11451548796433669, "compression_ratio": 1.8177083333333333, "no_speech_prob": 0.010984729044139385}, {"id": 114, "seek": 83660, "start": 845.96, "end": 854.44, "text": " we've received this block from the network. And we would try to retrieve one transaction", "tokens": [50832, 321, 600, 4613, 341, 3461, 490, 264, 3209, 13, 400, 321, 576, 853, 281, 30254, 472, 14425, 51256], "temperature": 0.0, "avg_logprob": -0.11451548796433669, "compression_ratio": 1.8177083333333333, "no_speech_prob": 0.010984729044139385}, {"id": 115, "seek": 83660, "start": 854.44, "end": 859.24, "text": " from the transient store because we noticed that there was private data there. And in fact,", "tokens": [51256, 490, 264, 41998, 3531, 570, 321, 5694, 300, 456, 390, 4551, 1412, 456, 13, 400, 294, 1186, 11, 51496], "temperature": 0.0, "avg_logprob": -0.11451548796433669, "compression_ratio": 1.8177083333333333, "no_speech_prob": 0.010984729044139385}, {"id": 116, "seek": 83660, "start": 859.24, "end": 863.32, "text": " we did retrieve the data from the transient store because there was no missing collection", "tokens": [51496, 321, 630, 30254, 264, 1412, 490, 264, 41998, 3531, 570, 456, 390, 572, 5361, 5765, 51700], "temperature": 0.0, "avg_logprob": -0.11451548796433669, "compression_ratio": 1.8177083333333333, "no_speech_prob": 0.010984729044139385}, {"id": 117, "seek": 86332, "start": 863.32, "end": 872.44, "text": " information. And so this this this transaction and this block gets committed to the database.", "tokens": [50364, 1589, 13, 400, 370, 341, 341, 341, 14425, 293, 341, 3461, 2170, 7784, 281, 264, 8149, 13, 50820], "temperature": 0.0, "avg_logprob": -0.13130004944339876, "compression_ratio": 1.6012269938650308, "no_speech_prob": 0.00201860792003572}, {"id": 118, "seek": 86332, "start": 875.08, "end": 880.36, "text": " Now, let's try it. Let's look at something more interesting. Let's look at the organization one.", "tokens": [50952, 823, 11, 718, 311, 853, 309, 13, 961, 311, 574, 412, 746, 544, 1880, 13, 961, 311, 574, 412, 264, 4475, 472, 13, 51216], "temperature": 0.0, "avg_logprob": -0.13130004944339876, "compression_ratio": 1.6012269938650308, "no_speech_prob": 0.00201860792003572}, {"id": 119, "seek": 86332, "start": 885.88, "end": 890.5200000000001, "text": " Sorry, organization two, who does not have access to the private data.", "tokens": [51492, 4919, 11, 4475, 732, 11, 567, 775, 406, 362, 2105, 281, 264, 4551, 1412, 13, 51724], "temperature": 0.0, "avg_logprob": -0.13130004944339876, "compression_ratio": 1.6012269938650308, "no_speech_prob": 0.00201860792003572}, {"id": 120, "seek": 89332, "start": 894.2800000000001, "end": 898.7600000000001, "text": " Okay, this this peer received the block.", "tokens": [50412, 1033, 11, 341, 341, 15108, 4613, 264, 3461, 13, 50636], "temperature": 0.0, "avg_logprob": -0.13886533216996627, "compression_ratio": 1.5, "no_speech_prob": 0.0005192545359022915}, {"id": 121, "seek": 89332, "start": 902.6, "end": 908.9200000000001, "text": " He tried to retrieve the private data from the transient store. And it was also successful,", "tokens": [50828, 634, 3031, 281, 30254, 264, 4551, 1412, 490, 264, 41998, 3531, 13, 400, 309, 390, 611, 4406, 11, 51144], "temperature": 0.0, "avg_logprob": -0.13886533216996627, "compression_ratio": 1.5, "no_speech_prob": 0.0005192545359022915}, {"id": 122, "seek": 89332, "start": 908.9200000000001, "end": 914.6800000000001, "text": " there was nothing missing. So this is a peer that had received the data at endorsement time.", "tokens": [51144, 456, 390, 1825, 5361, 13, 407, 341, 307, 257, 15108, 300, 632, 4613, 264, 1412, 412, 29228, 518, 565, 13, 51432], "temperature": 0.0, "avg_logprob": -0.13886533216996627, "compression_ratio": 1.5, "no_speech_prob": 0.0005192545359022915}, {"id": 123, "seek": 91468, "start": 914.92, "end": 921.9599999999999, "text": " And let's check the peer that had the missing private data, due to not getting the data at", "tokens": [50376, 400, 718, 311, 1520, 264, 15108, 300, 632, 264, 5361, 4551, 1412, 11, 3462, 281, 406, 1242, 264, 1412, 412, 50728], "temperature": 0.0, "avg_logprob": -0.2659534063094702, "compression_ratio": 1.595, "no_speech_prob": 0.003944744355976582}, {"id": 124, "seek": 91468, "start": 921.9599999999999, "end": 924.92, "text": " endorsement time, that must have been pure one or two.", "tokens": [50728, 29228, 518, 565, 11, 300, 1633, 362, 668, 6075, 472, 420, 732, 13, 50876], "temperature": 0.0, "avg_logprob": -0.2659534063094702, "compression_ratio": 1.595, "no_speech_prob": 0.003944744355976582}, {"id": 125, "seek": 91468, "start": 928.3599999999999, "end": 934.92, "text": " And here we see a lot more information, because there's more gossip work to be done. He received", "tokens": [51048, 400, 510, 321, 536, 257, 688, 544, 1589, 11, 570, 456, 311, 544, 31788, 589, 281, 312, 1096, 13, 634, 4613, 51376], "temperature": 0.0, "avg_logprob": -0.2659534063094702, "compression_ratio": 1.595, "no_speech_prob": 0.003944744355976582}, {"id": 126, "seek": 91468, "start": 934.92, "end": 942.3599999999999, "text": " the block, tried to retrieve one transactions data from the transient store.", "tokens": [51376, 264, 3461, 11, 3031, 281, 30254, 472, 16856, 1412, 490, 264, 41998, 3531, 13, 51748], "temperature": 0.0, "avg_logprob": -0.2659534063094702, "compression_ratio": 1.595, "no_speech_prob": 0.003944744355976582}, {"id": 127, "seek": 94236, "start": 942.92, "end": 947.72, "text": " And could not find all the collection private rights sets in the local peer transient store.", "tokens": [50392, 400, 727, 406, 915, 439, 264, 5765, 4551, 4601, 6352, 294, 264, 2654, 15108, 41998, 3531, 13, 50632], "temperature": 0.0, "avg_logprob": -0.25363148775967687, "compression_ratio": 1.8548387096774193, "no_speech_prob": 0.007812965661287308}, {"id": 128, "seek": 94236, "start": 947.72, "end": 953.24, "text": " So this peer had to do a private data poll, and fetch the private data from remote peers.", "tokens": [50632, 407, 341, 15108, 632, 281, 360, 257, 4551, 1412, 6418, 11, 293, 23673, 264, 4551, 1412, 490, 8607, 16739, 13, 50908], "temperature": 0.0, "avg_logprob": -0.25363148775967687, "compression_ratio": 1.8548387096774193, "no_speech_prob": 0.007812965661287308}, {"id": 129, "seek": 94236, "start": 954.6, "end": 958.84, "text": " And it'll attempt to do this for a configurable duration, in this case, 60 seconds.", "tokens": [50976, 400, 309, 603, 5217, 281, 360, 341, 337, 257, 22192, 712, 16365, 11, 294, 341, 1389, 11, 4060, 3949, 13, 51188], "temperature": 0.0, "avg_logprob": -0.25363148775967687, "compression_ratio": 1.8548387096774193, "no_speech_prob": 0.007812965661287308}, {"id": 130, "seek": 94236, "start": 959.96, "end": 964.6800000000001, "text": " And if if they can't find the private data within those 60 seconds, it can go ahead and proceed", "tokens": [51244, 400, 498, 498, 436, 393, 380, 915, 264, 4551, 1412, 1951, 729, 4060, 3949, 11, 309, 393, 352, 2286, 293, 8991, 51480], "temperature": 0.0, "avg_logprob": -0.25363148775967687, "compression_ratio": 1.8548387096774193, "no_speech_prob": 0.007812965661287308}, {"id": 131, "seek": 94236, "start": 965.48, "end": 970.44, "text": " with commits without the private data, and he'll be missing the private data and will not be able", "tokens": [51520, 365, 48311, 1553, 264, 4551, 1412, 11, 293, 415, 603, 312, 5361, 264, 4551, 1412, 293, 486, 406, 312, 1075, 51768], "temperature": 0.0, "avg_logprob": -0.25363148775967687, "compression_ratio": 1.8548387096774193, "no_speech_prob": 0.007812965661287308}, {"id": 132, "seek": 97044, "start": 971.4000000000001, "end": 975.8000000000001, "text": " to endorse transactions against that private data in the future.", "tokens": [50412, 281, 29228, 16856, 1970, 300, 4551, 1412, 294, 264, 2027, 13, 50632], "temperature": 0.0, "avg_logprob": -0.11564414501190186, "compression_ratio": 1.6700507614213198, "no_speech_prob": 0.0035927812568843365}, {"id": 133, "seek": 97044, "start": 976.84, "end": 981.48, "text": " But in this case, in most cases, the peer will be able to find the private data from another", "tokens": [50684, 583, 294, 341, 1389, 11, 294, 881, 3331, 11, 264, 15108, 486, 312, 1075, 281, 915, 264, 4551, 1412, 490, 1071, 50916], "temperature": 0.0, "avg_logprob": -0.11564414501190186, "compression_ratio": 1.6700507614213198, "no_speech_prob": 0.0035927812568843365}, {"id": 134, "seek": 97044, "start": 981.48, "end": 987.8800000000001, "text": " peer in the network, by sending these gossip requests for that data. And we can see we got", "tokens": [50916, 15108, 294, 264, 3209, 11, 538, 7750, 613, 31788, 12475, 337, 300, 1412, 13, 400, 321, 393, 536, 321, 658, 51236], "temperature": 0.0, "avg_logprob": -0.11564414501190186, "compression_ratio": 1.6700507614213198, "no_speech_prob": 0.0035927812568843365}, {"id": 135, "seek": 97044, "start": 987.8800000000001, "end": 995.5600000000001, "text": " one match, and we found all the missing collections. And we are also able to now", "tokens": [51236, 472, 2995, 11, 293, 321, 1352, 439, 264, 5361, 16641, 13, 400, 321, 366, 611, 1075, 281, 586, 51620], "temperature": 0.0, "avg_logprob": -0.11564414501190186, "compression_ratio": 1.6700507614213198, "no_speech_prob": 0.0035927812568843365}, {"id": 136, "seek": 99556, "start": 995.64, "end": 1001.88, "text": " commit that block with that transaction, even in this peer that did not get the data at dissemination", "tokens": [50368, 5599, 300, 3461, 365, 300, 14425, 11, 754, 294, 341, 15108, 300, 630, 406, 483, 264, 1412, 412, 34585, 399, 50680], "temperature": 0.0, "avg_logprob": -0.10932308435440063, "compression_ratio": 1.5529411764705883, "no_speech_prob": 0.0019875182770192623}, {"id": 137, "seek": 99556, "start": 1001.88, "end": 1010.4399999999999, "text": " time. Next, let's take a look at the private data purging capability.", "tokens": [50680, 565, 13, 3087, 11, 718, 311, 747, 257, 574, 412, 264, 4551, 1412, 1864, 3249, 13759, 13, 51108], "temperature": 0.0, "avg_logprob": -0.10932308435440063, "compression_ratio": 1.5529411764705883, "no_speech_prob": 0.0019875182770192623}, {"id": 138, "seek": 99556, "start": 1013.3199999999999, "end": 1021.2399999999999, "text": " So again, recall that when we tried to read the private pricing information, and let's again", "tokens": [51252, 407, 797, 11, 9901, 300, 562, 321, 3031, 281, 1401, 264, 4551, 17621, 1589, 11, 293, 718, 311, 797, 51648], "temperature": 0.0, "avg_logprob": -0.10932308435440063, "compression_ratio": 1.5529411764705883, "no_speech_prob": 0.0019875182770192623}, {"id": 139, "seek": 102124, "start": 1022.12, "end": 1031.24, "text": " try that on the first peer, we get back the price of 99. And that was done in block four,", "tokens": [50408, 853, 300, 322, 264, 700, 15108, 11, 321, 483, 646, 264, 3218, 295, 11803, 13, 400, 300, 390, 1096, 294, 3461, 1451, 11, 50864], "temperature": 0.0, "avg_logprob": -0.11022729140061599, "compression_ratio": 1.6990291262135921, "no_speech_prob": 0.003376228269189596}, {"id": 140, "seek": 102124, "start": 1031.24, "end": 1038.1200000000001, "text": " committed in block four. And so this data should be purged after three more blocks.", "tokens": [50864, 7784, 294, 3461, 1451, 13, 400, 370, 341, 1412, 820, 312, 1864, 3004, 934, 1045, 544, 8474, 13, 51208], "temperature": 0.0, "avg_logprob": -0.11022729140061599, "compression_ratio": 1.6990291262135921, "no_speech_prob": 0.003376228269189596}, {"id": 141, "seek": 102124, "start": 1039.08, "end": 1042.76, "text": " Because there was this collection is configured with a block to live of three.", "tokens": [51256, 1436, 456, 390, 341, 5765, 307, 30538, 365, 257, 3461, 281, 1621, 295, 1045, 13, 51440], "temperature": 0.0, "avg_logprob": -0.11022729140061599, "compression_ratio": 1.6990291262135921, "no_speech_prob": 0.003376228269189596}, {"id": 142, "seek": 102124, "start": 1043.48, "end": 1048.1200000000001, "text": " So what we're going to do is we're going to create a few more blocks. Let's do this by creating a", "tokens": [51476, 407, 437, 321, 434, 516, 281, 360, 307, 321, 434, 516, 281, 1884, 257, 1326, 544, 8474, 13, 961, 311, 360, 341, 538, 4084, 257, 51708], "temperature": 0.0, "avg_logprob": -0.11022729140061599, "compression_ratio": 1.6990291262135921, "no_speech_prob": 0.003376228269189596}, {"id": 143, "seek": 104812, "start": 1048.12, "end": 1059.1599999999999, "text": " marble two. And then we'll transfer this marble to a few times. We're not going to do anything to", "tokens": [50364, 26844, 732, 13, 400, 550, 321, 603, 5003, 341, 26844, 281, 257, 1326, 1413, 13, 492, 434, 406, 516, 281, 360, 1340, 281, 50916], "temperature": 0.0, "avg_logprob": -0.11420262010791633, "compression_ratio": 1.60989010989011, "no_speech_prob": 0.0009696902125142515}, {"id": 144, "seek": 104812, "start": 1059.1599999999999, "end": 1069.8, "text": " marble one, because that would reset its block to live. So after it has a block to live of three,", "tokens": [50916, 26844, 472, 11, 570, 300, 576, 14322, 1080, 3461, 281, 1621, 13, 407, 934, 309, 575, 257, 3461, 281, 1621, 295, 1045, 11, 51448], "temperature": 0.0, "avg_logprob": -0.11420262010791633, "compression_ratio": 1.60989010989011, "no_speech_prob": 0.0009696902125142515}, {"id": 145, "seek": 104812, "start": 1069.8, "end": 1074.12, "text": " so it'll live for three blocks. And then on the fourth block commit, it will get purged. So let's", "tokens": [51448, 370, 309, 603, 1621, 337, 1045, 8474, 13, 400, 550, 322, 264, 6409, 3461, 5599, 11, 309, 486, 483, 1864, 3004, 13, 407, 718, 311, 51664], "temperature": 0.0, "avg_logprob": -0.11420262010791633, "compression_ratio": 1.60989010989011, "no_speech_prob": 0.0009696902125142515}, {"id": 146, "seek": 107412, "start": 1074.12, "end": 1086.4399999999998, "text": " do another transfer on block on marble two. And then one more transfer on marble two. So now", "tokens": [50364, 360, 1071, 5003, 322, 3461, 322, 26844, 732, 13, 400, 550, 472, 544, 5003, 322, 26844, 732, 13, 407, 586, 50980], "temperature": 0.0, "avg_logprob": -0.13849435968601959, "compression_ratio": 1.5447154471544715, "no_speech_prob": 0.004468087572604418}, {"id": 147, "seek": 107412, "start": 1086.4399999999998, "end": 1092.52, "text": " marble one should have lived for three blocks and should have been purged. So we can again try to", "tokens": [50980, 26844, 472, 820, 362, 5152, 337, 1045, 8474, 293, 820, 362, 668, 1864, 3004, 13, 407, 321, 393, 797, 853, 281, 51284], "temperature": 0.0, "avg_logprob": -0.13849435968601959, "compression_ratio": 1.5447154471544715, "no_speech_prob": 0.004468087572604418}, {"id": 148, "seek": 109252, "start": 1092.52, "end": 1104.84, "text": " read those marble private details on org one peer zero. And this time instead of getting the price", "tokens": [50364, 1401, 729, 26844, 4551, 4365, 322, 14045, 472, 15108, 4018, 13, 400, 341, 565, 2602, 295, 1242, 264, 3218, 50980], "temperature": 0.0, "avg_logprob": -0.0797965596703922, "compression_ratio": 1.5923913043478262, "no_speech_prob": 0.019717223942279816}, {"id": 149, "seek": 109252, "start": 1104.84, "end": 1111.32, "text": " of 99 back, we see that marble private details does not exist for marble one. So this data has", "tokens": [50980, 295, 11803, 646, 11, 321, 536, 300, 26844, 4551, 4365, 775, 406, 2514, 337, 26844, 472, 13, 407, 341, 1412, 575, 51304], "temperature": 0.0, "avg_logprob": -0.0797965596703922, "compression_ratio": 1.5923913043478262, "no_speech_prob": 0.019717223942279816}, {"id": 150, "seek": 109252, "start": 1111.32, "end": 1122.44, "text": " in fact been purged, making this sensitive data now obsolete from the network. Okay, that concludes", "tokens": [51304, 294, 1186, 668, 1864, 3004, 11, 1455, 341, 9477, 1412, 586, 46333, 490, 264, 3209, 13, 1033, 11, 300, 24643, 51860], "temperature": 0.0, "avg_logprob": -0.0797965596703922, "compression_ratio": 1.5923913043478262, "no_speech_prob": 0.019717223942279816}, {"id": 151, "seek": 112244, "start": 1122.68, "end": 1130.8400000000001, "text": " the private data demonstration. Stay tuned for further updates on the Hyperledger Fabric Channel.", "tokens": [50376, 264, 4551, 1412, 16520, 13, 8691, 10870, 337, 3052, 9205, 322, 264, 29592, 1493, 1321, 17440, 1341, 13553, 13, 50784], "temperature": 0.0, "avg_logprob": -0.26327793686478224, "compression_ratio": 1.1134020618556701, "no_speech_prob": 0.011324652470648289}, {"id": 152, "seek": 112244, "start": 1130.8400000000001, "end": 1133.64, "text": " Thank you.", "tokens": [50784, 1044, 291, 13, 50924], "temperature": 0.0, "avg_logprob": -0.26327793686478224, "compression_ratio": 1.1134020618556701, "no_speech_prob": 0.011324652470648289}], "language": "en"}