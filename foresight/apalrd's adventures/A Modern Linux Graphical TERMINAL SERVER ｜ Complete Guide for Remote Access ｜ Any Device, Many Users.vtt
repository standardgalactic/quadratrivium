WEBVTT

00:00.000 --> 00:03.840
I've got here a variety of computers running all kinds of different operating systems from

00:03.840 --> 00:11.200
Raspberry Pi, an iPhone, an Intel MacBook, an iPad, a Windows Surface, an M1 Mac, and a cheap

00:11.200 --> 00:16.240
thin client. And all of these are connected to a virtual session on a terminal server. So how am

00:16.240 --> 00:21.440
I able to share one computer amongst all of these users running on all of these different platforms

00:21.440 --> 00:24.640
without using virtualization? Come along and find out.

00:24.720 --> 00:32.000
The concept we're implementing today is called a terminal server. Long ago,

00:32.000 --> 00:37.680
mainframes using time-sharing systems allowed users to share computer resources. Back then,

00:37.680 --> 00:43.680
they used teletype equipment as terminals. Incidentally, this is why Unix and Linux named

00:43.680 --> 00:50.080
their terminals TTY, short for teletype. As technology progressed, MIT wanted to develop

00:50.080 --> 00:55.840
a unified computing environment that encouraged the sharing of ideas, code, and data across all of

00:55.840 --> 01:02.480
MIT. They called this initiative Project Athena, and they developed many of the ideas surrounding

01:02.480 --> 01:08.880
modern thin clients. This project also included the X-Windows system, a protocol to allow graphical

01:08.880 --> 01:15.120
applications to access graphical terminals separated by a network. Fast-forwarding to the

01:15.120 --> 01:21.840
modern era, Microsoft has supported graphical terminal servers since NT4, and continues to

01:21.840 --> 01:27.440
offer a terminal server product to this day. So apparently, it's useful enough to some company.

01:27.440 --> 01:31.200
We are going to build a Linux equivalent to the Microsoft terminal server,

01:31.200 --> 01:36.720
supporting many user sessions at the same time without virtualization. While I won't be expanding

01:36.720 --> 01:41.920
a network login today, you could combine this setup with system-wide network authentications

01:41.920 --> 01:46.160
such as Kerberos, which incidentally was also developed by Project Athena.

01:48.640 --> 01:57.360
Welcome to the server room. This is the hardware we're using today. We got an AMD Ryzen 5 3400G

01:57.360 --> 02:03.600
with 32GB of RAM, and we just got our Exubon 2 installer, keyboard and mouse,

02:03.600 --> 02:08.640
Gigabit Ethernet, PGA. Once we're all done, the only thing we're going to need plugged in

02:08.640 --> 02:16.000
is going to be the Ethernet power. I've chosen to install Exubon 2 desktop version 21.10,

02:16.640 --> 02:22.240
although you can choose any Ubuntu flavor you'd like. I chose Exubon 2 since it's a

02:22.240 --> 02:29.120
lightweight desktop that I feel is very easy to use. Even though this is a server, I'm starting

02:29.120 --> 02:34.000
with a desktop OS, so the entire graphical environment and graphical applications come

02:34.000 --> 02:38.800
installed. Depending on your use case, you might want to change the file system here. If you choose

02:38.800 --> 02:44.720
none, it'll install on EXT4, which is a pretty good install if you're just using it normally.

02:44.720 --> 02:49.200
I'm going to choose ZFS instead. So with ZFS, each user will get their home directory on a

02:49.200 --> 02:54.320
separate dataset, and it'll also create snapshots of the root file system every time it does a

02:54.320 --> 02:58.960
software update, and it'll let you roll back to them through the boot menu. So this is a nice

02:58.960 --> 03:03.440
feature if you're managing users and want to be able to back up their datasets to TrueNAS or

03:03.440 --> 03:12.320
something like that. So now we let this run, and we'll come back when it's all done.

03:13.200 --> 03:17.840
So now because we installed the desktop Ubuntu, we have a graphical user interface instead of a

03:17.840 --> 03:22.160
command line. So it's going to pop up with some graphical things we need to take care of. The

03:22.160 --> 03:24.400
first one is this language support dialog, and we're going to let it go.

03:29.040 --> 03:32.560
The software updater also wants to run, and we're going to tell it to install updates now.

03:33.440 --> 03:44.080
Hey, it wants to restart. We're going to restart later, because we're going to have to restart

03:44.080 --> 03:48.400
pretty soon anyway. So now we're going to open a terminal, and because it's a server, we probably

03:48.400 --> 03:51.440
want to administer this over SSH, so we're going to install open SSH.

03:56.000 --> 04:00.480
And also XRDP, which is the first remote desktop utility we're going to install, and it's actually

04:00.480 --> 04:10.240
installs almost everything through this package. The last thing we need is audio support for XRDP,

04:10.880 --> 04:17.840
and currently there's a bug in the installer for XRDP's audio that doesn't work correctly with ZFS

04:17.840 --> 04:23.600
file systems or NFS home directories. So as a result, I'm not going to put this in the video,

04:23.600 --> 04:27.280
but the instructions are my blog posts, and I'm keeping them up to date as I work with the developer

04:27.280 --> 04:32.560
on solving this. Now at this point, we can reboot the system, and then we're done using the physical

04:32.560 --> 04:39.520
console. We can do everything else remotely. So to understand what's happening here, let's dive

04:39.520 --> 04:45.680
into how a Linux graphical program gets its output onto the screen. So any graphical program has a

04:45.680 --> 04:52.400
canvas. That's the region within the Windows borders. Windows draw things onto their canvas,

04:52.400 --> 04:57.600
such as shapes, or text, or graphics, or whatever the window wants to draw. The output of all of

04:57.600 --> 05:02.960
these windows is sent to the window manager, which composites all of them into a single canvas.

05:03.920 --> 05:10.240
This composite is then sent to the display server. The display server takes the canvas and interfaces

05:10.240 --> 05:16.880
with the appropriate hardware drivers, dealing with multiple monitors, resizing monitors, etc.

05:16.880 --> 05:21.120
The video output for each monitor is finally sent to the video hardware,

05:21.120 --> 05:26.240
which generates a physical signal to send to the monitors. Now we can inject ourselves at different

05:26.240 --> 05:32.400
points in this process to get different types of remote graphical access. To view the contents of a

05:32.400 --> 05:39.440
single window, we can redirect it over SSH using x11 forwarding. In this case, a single program is

05:39.440 --> 05:44.960
running on the remote system, but the display for that one program is sent to the client. With a

05:44.960 --> 05:52.400
terminal server such as XRDP or X2GO, we act as the display server. In this case, we create a full

05:52.400 --> 05:58.320
desktop environment in window manager bound to our remote session, cutting out the display hardware

05:58.320 --> 06:03.600
entirely. Alternatively, we could insert ourselves into the display server and display hardware

06:03.600 --> 06:10.000
pipeline and capture the output being sent to the monitor. This is normally how VNC operates,

06:10.000 --> 06:14.320
taking over the same session that would normally be displayed on the display hardware.

06:14.320 --> 06:19.280
And finally, if we're operating in a virtual machine, then the display hardware is emulated

06:19.280 --> 06:24.640
anyways, so we can capture the output of the virtual graphics card and send that over the

06:24.640 --> 06:28.960
network. I've done other videos on this topic using SPICE for thin clients.

06:30.720 --> 06:33.520
So now that we have the system up and running, we should be able to connect to it through remote

06:33.520 --> 06:39.120
desktop. This is the Microsoft remote desktop client available from Microsoft Store. It's also

06:39.120 --> 06:44.800
available on Android, on iOS, on macOS. Pretty much every platform has a software available,

06:44.800 --> 06:47.440
and it looks pretty similar. So we're going to walk through it on Windows, but it should be the

06:47.440 --> 06:52.640
same whatever platform you're using. So we have to add a PC. We need the IP address of our terminal

06:52.640 --> 07:00.720
server. And we could either tell it to ask every time or we could add a user account here. I'm

07:00.720 --> 07:06.080
going to tell it to ask every time for now. So let's see what that looks like. So now if we double

07:06.080 --> 07:11.680
click on it, it tells us it has a self signed certificate. So because we're not running in a

07:11.680 --> 07:16.320
Windows domain, we don't have a public certificate for the server. It is a little bit concerned,

07:16.320 --> 07:22.560
but we can click through that. So now we get the login to VDI system, and this is done by XRDP.

07:22.560 --> 07:33.520
So we can use our username and password. And we're logged in. I have a terminal open from

07:33.520 --> 07:42.480
when I installed the audio support. So this is our exubuntu desktop and we're logged in via Windows.

07:43.120 --> 07:48.400
We have access to all of our programs, including web browser. Go to my website.

07:55.680 --> 07:58.480
It's very functional. I mean, this is running just fine.

07:58.960 --> 08:04.800
The web video is not a good experience. So don't try web video, but most applications will work pretty

08:04.800 --> 08:10.000
well. So now let's add more users to the system. So we could either from the terminal if we wanted.

08:10.960 --> 08:21.360
So we do sudo add user, make him a name, alpha. And we need our sudo password.

08:28.160 --> 08:31.520
And the full name is what gets displayed on the login prompt sometimes.

08:32.160 --> 08:34.160
You could set it, you could not set it, it doesn't matter to you.

08:34.160 --> 08:42.880
So now we have the username VDI alpha that can log in really. How about adding a user from the GUI?

08:42.880 --> 08:43.600
Can we do that too?

08:50.400 --> 08:51.840
So I got my admin user.

08:55.680 --> 08:59.280
And change my name. So let's add a new user.

09:04.160 --> 09:09.520
Another thing to note. So Linux does not allow you to start with a number.

09:10.080 --> 09:14.160
And XRDP seems to have trouble if you're using an ends with a number.

09:14.720 --> 09:19.120
Numbers seem to be fine in the middle, but don't put a number on the end.

09:21.840 --> 09:23.360
So now we need to set him a password.

09:26.160 --> 09:28.080
And the user can change their own password later.

09:30.000 --> 09:31.680
There we go. So we got some remote users.

09:32.640 --> 09:34.560
Now let's see what it looks like when one of them logs in.

09:37.120 --> 09:40.080
So we could log out of our session here and click log out.

09:40.800 --> 09:43.200
Or we could go up here and just close the session.

09:45.520 --> 09:47.760
So now it happens next time we connect to that server.

09:54.080 --> 09:56.400
So we get the login screening and we'll try VDI Bravo.

10:01.680 --> 10:08.400
And there we go. They have a session too. So unless we do some more restricting,

10:08.400 --> 10:13.680
a lot of these programs here exist for every user, but every user might not be able to use them.

10:13.680 --> 10:18.960
So here if I try to create a new user, it asks me for the password for admin, not for my own user.

10:18.960 --> 10:22.960
And that's because VDI Bravo doesn't have pseudo permission, so they're not allowed to make changes.

10:23.680 --> 10:27.200
So if you try to make changes, it requires the password for the admin account that does have

10:27.200 --> 10:32.800
pseudo privileges. So remote users on the system see all of these programs, but can't necessarily

10:32.800 --> 10:36.000
use them. So we'll restrict that in a little bit later.

10:39.760 --> 10:43.120
So how about if we log in again as the admin?

10:43.360 --> 11:01.440
So right back to our session we were up before. So when a user closes the session by closing

11:01.440 --> 11:05.920
remote desktop, it leaves all their programs open and running. And next time you connect,

11:05.920 --> 11:11.120
it reattaches to them. So you can leave Firefox or terminal or whatever open and come back to it

11:11.120 --> 11:17.440
later, and it won't close anything when you log off. What about copying and pasting things?

11:22.560 --> 11:27.200
So I got an excerpt from Wikipedia. I just copied on my off screen. If I go in here,

11:28.160 --> 11:29.920
I got a new text document.

11:36.960 --> 11:40.720
Paste it in there. So this got copied and pasted across my session.

11:41.840 --> 11:46.800
So the clipboard does work between your remote session. How about copying images? You go over

11:46.800 --> 11:53.680
here on my desktop and copy an image. Can I paste it in here? Oh, must give remote desktop access.

11:53.680 --> 11:58.160
Yeah, sure. Let's do that. So remote desktop asks for permission and then closed.

11:58.720 --> 12:02.160
So I gave it permission and let's see if we can copy the clipboard.

12:16.720 --> 12:22.560
There we go. We copied an image. How about files? Can we access any files on my remote system?

12:24.560 --> 12:28.640
So I'm going to file on my Windows desktop here, and I'm going to copy it into the

12:28.640 --> 12:35.680
remote session. It doesn't let me drag and drop, but I can copy and paste. And there you see my

12:35.680 --> 12:40.480
file got copied to the remote session. So now you're all going to ask, what is web browsing like?

12:42.720 --> 12:48.320
Let's try YouTube. Looks great. I get a display that resizes itself. I get a keyboard and I get

12:48.320 --> 12:53.280
a mouse. What I don't get is the ability to take a flash drive or another USB device, plug it into

12:53.280 --> 12:56.640
the Pi, and have it show up on the virtual machine. And that's what I'm going to expect.

12:57.360 --> 13:03.520
So audio works as well. Sometimes it stutters if the video stutters, but it's functional.

13:04.480 --> 13:10.720
So what about touch screens? Here we have an iPad. You can see that everything works correctly.

13:10.720 --> 13:14.880
One quirk about the iPad is that the mouse does not move to the location of your finger.

13:15.600 --> 13:19.680
So if you click your finger onto the touchscreen, it clicks wherever the mouse currently is.

13:20.240 --> 13:23.600
So mouse movement is relative. As you drag your mouse across the screen,

13:24.480 --> 13:28.560
I'm not necessarily touching where the pointer is. I'm touching somewhere else on the screen and

13:28.560 --> 13:32.480
moving at the same distance, which can feel a little bit disorienting, but you get used to it

13:32.480 --> 13:38.640
pretty quickly. So here we have a Microsoft Surface tablet. And in this case, the touchscreen does

13:38.640 --> 13:44.240
work as expected. Wherever I click my finger is exactly where it clicks the mouse on the screen.

13:44.960 --> 13:57.360
So I can click in the corner to close the window. I can drag. You can see the

13:58.480 --> 14:03.440
click and drag box shows up. So a slight difference in functionality between clients.

14:05.600 --> 14:09.680
Digital security has advanced a lot since the mainframe time sharing days,

14:09.680 --> 14:14.080
and keeping users isolated from each other and from the system as a whole is very important.

14:14.320 --> 14:19.200
Running a terminal server like this securely is perfectly within the capabilities of Linux.

14:19.200 --> 14:23.680
However, with our current configuration, it's like giving everyone their own account on the same

14:23.680 --> 14:29.760
desktop. Each user cannot see other users' documents, but they can all see system files,

14:29.760 --> 14:34.240
and it's not hard for them to share files with each other. Whether that's a problem or a feature

14:34.240 --> 14:40.960
is up to you. More importantly, RDP is a very commonly targeted protocol. While the protocol

14:40.960 --> 14:46.480
with modern security settings is secure for the users and does keep user data safe, you will be

14:46.480 --> 14:51.600
targeted by attacks and bots trying to guess random passwords. You'll probably also show up on an

14:51.600 --> 14:56.800
index of all RDP servers publicly facing on the internet. You should plan on isolating the server

14:56.800 --> 15:01.760
to your internal network and using a secure remote access VPN to connect back home. Also,

15:01.760 --> 15:05.840
without additional configuration, we haven't limited how much system resources each user could

15:05.840 --> 15:10.160
produce. So it's theoretically possible that some rogue user could start crypto mining with all the

15:10.160 --> 15:14.720
extra CPU time. We also haven't limited who can log into the system, so anyone that has an

15:14.720 --> 15:19.520
account on the computer can log in remotely. Most of these issues can be resolved by locking down

15:19.520 --> 15:25.040
things on the server, and I'm going to go into how to configure them now. To configure session

15:25.040 --> 15:33.920
management, we need to go to etsy xxdrp, and then the file is sessman.ini.

15:40.960 --> 15:46.000
So this configures the xdrp session manager, and a lot of the options that we probably want to

15:46.000 --> 15:52.480
add are in this file instead of the xdrp.ini file. The first few options that you might want to

15:52.480 --> 15:59.040
consider changing are in the security section here. So by default, allow root login is true,

15:59.040 --> 16:03.760
and we're going to set that to false. And that means that the user root can never log in.

16:04.400 --> 16:09.840
There's also a line here that says terminal server users equals ts users, and that's the name of a

16:09.840 --> 16:17.120
group. So once xdrp is installed, it does not create this group ts users. And so since the group

16:17.120 --> 16:24.400
does not exist, any user on the system can log in. But if we create the group ts users and add

16:24.400 --> 16:35.680
users to it, then we can restrict who can log in. So let's try that.

16:35.680 --> 16:52.880
So we'll add the admin to the list, and who else do you want to add to the list?

16:54.000 --> 17:01.760
Let's echo and foxtrot. So if you want to add someone later, you can go back to manage groups,

17:01.760 --> 17:07.040
find the ts users group, and click properties, and click the checkbox for group members here.

17:07.840 --> 17:10.400
If you want to do this from the command line, you would use group add.

17:15.360 --> 17:19.120
This case, it already exists, but that would create the group if it didn't already exist.

17:19.120 --> 17:23.040
And to add a user to the group, we use gpassword.

17:23.760 --> 17:33.840
So this should have added our alpha user to group ts users.

17:34.560 --> 17:53.840
You can see now the alpha is checked in this box, so it shows up in both places.

17:53.840 --> 17:56.960
So what happens when an unauthorized user tries to log in?

17:57.600 --> 18:01.760
I rebooted the server and let's see if VDI Charlie is allowed to access it.

18:04.720 --> 18:08.560
So we get an error here that says login failed for display zero.

18:09.120 --> 18:13.360
And so this is what a user will see if they try to log in, but they don't have permissions to

18:13.360 --> 18:18.640
log in in this system. It takes them back to login screen. We get cancel to disconnect the session.

18:20.160 --> 18:25.680
Now that we understand about ts users, there's a few other things we can look at in this file.

18:25.680 --> 18:30.400
So restrict outbound clipboard. This sets if you're allowed to copy things from the server

18:30.400 --> 18:34.800
to the client on the clipboard. If you're trying to prevent data from leaving the server,

18:34.800 --> 18:39.280
this might be a good option to use. Max sessions. This is the maximum number of

18:39.280 --> 18:43.680
sessions it'll allow. This doesn't mean your system is capable of this many sessions,

18:43.680 --> 18:48.160
and your system might stop allocating more sessions long before then if it runs out of memory.

18:48.160 --> 18:53.760
So by default, when you close a remote desktop session, the session will stay open.

18:53.760 --> 18:58.320
So the next time a user logs in with that same account, we'll get connected to the already

18:58.320 --> 19:03.200
existing session with all of the already running programs. If you set this to true,

19:03.200 --> 19:07.520
it will eventually kill all the programs and log the user out. You can set a time

19:08.160 --> 19:14.400
to wait before killing sessions. And you can also set a time to kill to disconnect idle sessions.

19:14.400 --> 19:18.160
If someone's not using the system, but it's still connected, it can kick them off. If you'd

19:18.160 --> 19:23.040
like the user to be able to log in more than once with the same account, you can set a session

19:23.040 --> 19:29.200
allocation policy. The default is to have one session per user. If you try to log into a remote

19:29.200 --> 19:34.960
session with the user account of another user who's already in a remote session, it'll kick out the

19:34.960 --> 19:39.520
first user and transfer that session to the new user. If you'd like to intentionally create more

19:39.520 --> 19:44.960
than one session, you could set this to one of these options here. The most common would be UBI

19:44.960 --> 19:51.200
to filter by IP address or UBC to filter by connection. So by IP address, that means each IP

19:51.200 --> 19:55.040
address connecting to the server can have one session at a time. Multiple connections from the

19:55.040 --> 19:59.280
same IP address will get handed off to the same session, but multiple connections from different

19:59.280 --> 20:03.920
IP addresses will go to different sessions. And by connection means that a new session is created

20:03.920 --> 20:09.440
every single time remote desktop connects. If you're going to use UBI mode or especially UBC mode,

20:09.440 --> 20:14.960
you really need to use kill disconnected sessions. With UBC mode, every time you make a connection

20:14.960 --> 20:19.440
to the server, it'll create a new session. So there's no way for you to kill that session or

20:19.440 --> 20:25.840
reconnect to it other than killing the process on the server. So something's going on with our

20:25.840 --> 20:30.480
system. Someone's trying to use a lot of resources here. And the system has a lot of memory, but

20:30.480 --> 20:35.440
someone is still using quite a bit of it. Let's see what's going on. So if we filter by CPU,

20:35.440 --> 20:41.200
someone is clearly trying to stress the system here. And it looks like it's VDI echo. So we could

20:41.200 --> 20:46.960
nicely ask them not to or we could try to restrict how much CPU time they can use. How about memory?

20:50.400 --> 20:56.320
So our window manager is using a decent amount, which we kind of expect. But VDI echo again here

20:56.320 --> 21:01.120
is using two gigs just for no good reason. So maybe we want to limit them to two gigs per user

21:01.120 --> 21:06.080
or three gigs per user so they can't monopolize the whole system. The better way to visualize this

21:06.080 --> 21:11.280
is by using control groups. There's a tool called system D CG talk, which shows us the usage per

21:11.280 --> 21:24.320
control group instead of per process. So right now it looks like user 105.slice is using 200%

21:24.320 --> 21:32.320
of the CPU and 2.2 gigs of memory. XRDP service is not using a ton at around 2.8%. But if I move

21:32.320 --> 21:38.720
my window around a lot, you'll see that XRDP starts bubbling up to the top. So how do we tell

21:38.720 --> 21:50.000
who user 105 is? Well, we use the command ID. So if we ask ID, it tells us that user is 1001.

21:50.000 --> 21:52.400
But how do we go from a number to a user? Well,

21:55.920 --> 22:01.360
so VDI echo. So VDI echo is the one that's using all of our CPU right now. So in order to bring

22:01.360 --> 22:06.080
some sanity to the system, we're going to limit each user to use 200% of the CPU, which is two

22:06.080 --> 22:12.960
threads and use two gigs of RAM. So the folder Etsy system D system is where we create both files

22:12.960 --> 22:19.760
and folders to limit control groups. System D has a folder structure where we can put configurations

22:19.760 --> 22:26.960
of control groups per user. Normally, this would be something like Etsy system D system user dash

22:26.960 --> 22:34.480
number dot slice dot D. So for example, for user 1000, we might create a file in Etsy system D

22:35.440 --> 22:45.360
system user 1000 that slice dot D and any dot comp files in that folder would be applied to slice

22:45.360 --> 22:50.400
of user 1000. However, there's a little trick we can do if we eliminate the number and just do user

22:50.400 --> 22:58.000
dash dot slice dot D, then this folder applies to all users by default if they don't have their own

22:58.000 --> 23:03.840
configuration. So we're going to create this folder and create a configuration file in it to limit

23:03.840 --> 23:05.440
the default VDI user.

23:16.800 --> 23:21.120
So in this file, we're going to put a little bit of configuration that turns on CPU and memory

23:21.120 --> 23:39.920
accounting and sets a quota for each one. So here's an example configuration I've linked in

23:39.920 --> 23:44.480
the description below my blog post, which goes into some more detail and links to some resources

23:44.480 --> 23:52.080
on system D control groups. So we're going to save this and let's see if this applies.

23:52.080 --> 23:57.680
I rebooted the system so the changes take effect. We can see here that VDI echo is trying to run a

23:57.680 --> 24:03.280
stress test again. But if we go back to CGTOP, we can see that they're being limited to roughly

24:03.280 --> 24:07.120
200% CPU and suddenly under two gigs of RAM, just like we asked for.

24:07.840 --> 24:11.280
Remember that color manager error we got earlier?

24:13.520 --> 24:16.240
We get this error about the color manage device and we'll deal with that later.

24:17.200 --> 24:21.600
It'll pop up from time to time, but here's how we fix that. So we need to create a configuration

24:21.600 --> 24:26.880
file for policy kit. First, we need to see what version of policy kit we're using. In this case,

24:26.880 --> 24:33.360
it's 0.105. In newer versions of policy kit, we need to create a .cont file which contains

24:33.360 --> 24:39.040
JavaScript code for processing the rules. In older versions, we need to use a .pecla file.

24:39.040 --> 24:44.800
This version 0.105 uses the pecla file method. So we need to create a file in the folder etsy

24:44.800 --> 24:48.400
pull kit one local authority 50 local dot D.

24:51.360 --> 24:55.200
And we can name it anything we'd like, but we need to make sure it doesn't conflict with anything else.

24:56.160 --> 25:05.680
So now we have a pecla file. We need to copy and paste the code down for my website into this file.

25:10.160 --> 25:15.520
So here's the configuration. It gives any user access to certain color manager permissions,

25:15.520 --> 25:17.360
and that should get rid of the color manager errors.

25:18.960 --> 25:23.280
So now we have a functional terminal server which can be accessed by clients of all different

25:23.280 --> 25:28.400
operating systems. Ignoring internet video, this is a pretty good user experience for each client,

25:28.400 --> 25:32.720
and uses a lot less resources than creating a virtual machine for each session.

25:32.720 --> 25:38.240
Thanks to Microsoft's wide support for the RDP protocol, we can have access to high quality

25:38.240 --> 25:42.880
clients on pretty much every operating system in existence. Microsoft publishes their client to

25:42.880 --> 25:49.680
the Apple Store, the Android Store for Android TV even, and Samsung even supports RDP access on

25:49.760 --> 25:55.280
their Tizen Smart TVs. So by using this protocol, instead of X forwarding or VNC, we get better

25:55.280 --> 26:01.120
client access. This wide client support makes it a great solution for bring your own device type

26:01.120 --> 26:06.720
solutions, where you're relying on potentially arbitrary user supplied devices that could be

26:06.720 --> 26:12.000
running any operating system. While not specifically an advantage of the thin client architecture,

26:12.000 --> 26:17.440
keeping all of your computing and data centralized in a server keeps important data off of the end

26:17.440 --> 26:22.480
user's devices, which can be a great feature for remote access or for when you're traveling.

26:22.480 --> 26:26.320
Be sure to let me know if you liked this video, and if you have any other topics on terminal

26:26.320 --> 26:28.160
servers you'd like me to cover in the future.

