start	end	text
0	3840	I've got here a variety of computers running all kinds of different operating systems from
3840	11200	Raspberry Pi, an iPhone, an Intel MacBook, an iPad, a Windows Surface, an M1 Mac, and a cheap
11200	16240	thin client. And all of these are connected to a virtual session on a terminal server. So how am
16240	21440	I able to share one computer amongst all of these users running on all of these different platforms
21440	24640	without using virtualization? Come along and find out.
24720	32000	The concept we're implementing today is called a terminal server. Long ago,
32000	37680	mainframes using time-sharing systems allowed users to share computer resources. Back then,
37680	43680	they used teletype equipment as terminals. Incidentally, this is why Unix and Linux named
43680	50080	their terminals TTY, short for teletype. As technology progressed, MIT wanted to develop
50080	55840	a unified computing environment that encouraged the sharing of ideas, code, and data across all of
55840	62480	MIT. They called this initiative Project Athena, and they developed many of the ideas surrounding
62480	68880	modern thin clients. This project also included the X-Windows system, a protocol to allow graphical
68880	75120	applications to access graphical terminals separated by a network. Fast-forwarding to the
75120	81840	modern era, Microsoft has supported graphical terminal servers since NT4, and continues to
81840	87440	offer a terminal server product to this day. So apparently, it's useful enough to some company.
87440	91200	We are going to build a Linux equivalent to the Microsoft terminal server,
91200	96720	supporting many user sessions at the same time without virtualization. While I won't be expanding
96720	101920	a network login today, you could combine this setup with system-wide network authentications
101920	106160	such as Kerberos, which incidentally was also developed by Project Athena.
108640	117360	Welcome to the server room. This is the hardware we're using today. We got an AMD Ryzen 5 3400G
117360	123600	with 32GB of RAM, and we just got our Exubon 2 installer, keyboard and mouse,
123600	128640	Gigabit Ethernet, PGA. Once we're all done, the only thing we're going to need plugged in
128640	136000	is going to be the Ethernet power. I've chosen to install Exubon 2 desktop version 21.10,
136640	142240	although you can choose any Ubuntu flavor you'd like. I chose Exubon 2 since it's a
142240	149120	lightweight desktop that I feel is very easy to use. Even though this is a server, I'm starting
149120	154000	with a desktop OS, so the entire graphical environment and graphical applications come
154000	158800	installed. Depending on your use case, you might want to change the file system here. If you choose
158800	164720	none, it'll install on EXT4, which is a pretty good install if you're just using it normally.
164720	169200	I'm going to choose ZFS instead. So with ZFS, each user will get their home directory on a
169200	174320	separate dataset, and it'll also create snapshots of the root file system every time it does a
174320	178960	software update, and it'll let you roll back to them through the boot menu. So this is a nice
178960	183440	feature if you're managing users and want to be able to back up their datasets to TrueNAS or
183440	192320	something like that. So now we let this run, and we'll come back when it's all done.
193200	197840	So now because we installed the desktop Ubuntu, we have a graphical user interface instead of a
197840	202160	command line. So it's going to pop up with some graphical things we need to take care of. The
202160	204400	first one is this language support dialog, and we're going to let it go.
209040	212560	The software updater also wants to run, and we're going to tell it to install updates now.
213440	224080	Hey, it wants to restart. We're going to restart later, because we're going to have to restart
224080	228400	pretty soon anyway. So now we're going to open a terminal, and because it's a server, we probably
228400	231440	want to administer this over SSH, so we're going to install open SSH.
236000	240480	And also XRDP, which is the first remote desktop utility we're going to install, and it's actually
240480	250240	installs almost everything through this package. The last thing we need is audio support for XRDP,
250880	257840	and currently there's a bug in the installer for XRDP's audio that doesn't work correctly with ZFS
257840	263600	file systems or NFS home directories. So as a result, I'm not going to put this in the video,
263600	267280	but the instructions are my blog posts, and I'm keeping them up to date as I work with the developer
267280	272560	on solving this. Now at this point, we can reboot the system, and then we're done using the physical
272560	279520	console. We can do everything else remotely. So to understand what's happening here, let's dive
279520	285680	into how a Linux graphical program gets its output onto the screen. So any graphical program has a
285680	292400	canvas. That's the region within the Windows borders. Windows draw things onto their canvas,
292400	297600	such as shapes, or text, or graphics, or whatever the window wants to draw. The output of all of
297600	302960	these windows is sent to the window manager, which composites all of them into a single canvas.
303920	310240	This composite is then sent to the display server. The display server takes the canvas and interfaces
310240	316880	with the appropriate hardware drivers, dealing with multiple monitors, resizing monitors, etc.
316880	321120	The video output for each monitor is finally sent to the video hardware,
321120	326240	which generates a physical signal to send to the monitors. Now we can inject ourselves at different
326240	332400	points in this process to get different types of remote graphical access. To view the contents of a
332400	339440	single window, we can redirect it over SSH using x11 forwarding. In this case, a single program is
339440	344960	running on the remote system, but the display for that one program is sent to the client. With a
344960	352400	terminal server such as XRDP or X2GO, we act as the display server. In this case, we create a full
352400	358320	desktop environment in window manager bound to our remote session, cutting out the display hardware
358320	363600	entirely. Alternatively, we could insert ourselves into the display server and display hardware
363600	370000	pipeline and capture the output being sent to the monitor. This is normally how VNC operates,
370000	374320	taking over the same session that would normally be displayed on the display hardware.
374320	379280	And finally, if we're operating in a virtual machine, then the display hardware is emulated
379280	384640	anyways, so we can capture the output of the virtual graphics card and send that over the
384640	388960	network. I've done other videos on this topic using SPICE for thin clients.
390720	393520	So now that we have the system up and running, we should be able to connect to it through remote
393520	399120	desktop. This is the Microsoft remote desktop client available from Microsoft Store. It's also
399120	404800	available on Android, on iOS, on macOS. Pretty much every platform has a software available,
404800	407440	and it looks pretty similar. So we're going to walk through it on Windows, but it should be the
407440	412640	same whatever platform you're using. So we have to add a PC. We need the IP address of our terminal
412640	420720	server. And we could either tell it to ask every time or we could add a user account here. I'm
420720	426080	going to tell it to ask every time for now. So let's see what that looks like. So now if we double
426080	431680	click on it, it tells us it has a self signed certificate. So because we're not running in a
431680	436320	Windows domain, we don't have a public certificate for the server. It is a little bit concerned,
436320	442560	but we can click through that. So now we get the login to VDI system, and this is done by XRDP.
442560	453520	So we can use our username and password. And we're logged in. I have a terminal open from
453520	462480	when I installed the audio support. So this is our exubuntu desktop and we're logged in via Windows.
463120	468400	We have access to all of our programs, including web browser. Go to my website.
475680	478480	It's very functional. I mean, this is running just fine.
478960	484800	The web video is not a good experience. So don't try web video, but most applications will work pretty
484800	490000	well. So now let's add more users to the system. So we could either from the terminal if we wanted.
490960	501360	So we do sudo add user, make him a name, alpha. And we need our sudo password.
508160	511520	And the full name is what gets displayed on the login prompt sometimes.
512160	514160	You could set it, you could not set it, it doesn't matter to you.
514160	522880	So now we have the username VDI alpha that can log in really. How about adding a user from the GUI?
522880	523600	Can we do that too?
530400	531840	So I got my admin user.
535680	539280	And change my name. So let's add a new user.
544160	549520	Another thing to note. So Linux does not allow you to start with a number.
550080	554160	And XRDP seems to have trouble if you're using an ends with a number.
554720	559120	Numbers seem to be fine in the middle, but don't put a number on the end.
561840	563360	So now we need to set him a password.
566160	568080	And the user can change their own password later.
570000	571680	There we go. So we got some remote users.
572640	574560	Now let's see what it looks like when one of them logs in.
577120	580080	So we could log out of our session here and click log out.
580800	583200	Or we could go up here and just close the session.
585520	587760	So now it happens next time we connect to that server.
594080	596400	So we get the login screening and we'll try VDI Bravo.
601680	608400	And there we go. They have a session too. So unless we do some more restricting,
608400	613680	a lot of these programs here exist for every user, but every user might not be able to use them.
613680	618960	So here if I try to create a new user, it asks me for the password for admin, not for my own user.
618960	622960	And that's because VDI Bravo doesn't have pseudo permission, so they're not allowed to make changes.
623680	627200	So if you try to make changes, it requires the password for the admin account that does have
627200	632800	pseudo privileges. So remote users on the system see all of these programs, but can't necessarily
632800	636000	use them. So we'll restrict that in a little bit later.
639760	643120	So how about if we log in again as the admin?
643360	661440	So right back to our session we were up before. So when a user closes the session by closing
661440	665920	remote desktop, it leaves all their programs open and running. And next time you connect,
665920	671120	it reattaches to them. So you can leave Firefox or terminal or whatever open and come back to it
671120	677440	later, and it won't close anything when you log off. What about copying and pasting things?
682560	687200	So I got an excerpt from Wikipedia. I just copied on my off screen. If I go in here,
688160	689920	I got a new text document.
696960	700720	Paste it in there. So this got copied and pasted across my session.
701840	706800	So the clipboard does work between your remote session. How about copying images? You go over
706800	713680	here on my desktop and copy an image. Can I paste it in here? Oh, must give remote desktop access.
713680	718160	Yeah, sure. Let's do that. So remote desktop asks for permission and then closed.
718720	722160	So I gave it permission and let's see if we can copy the clipboard.
736720	742560	There we go. We copied an image. How about files? Can we access any files on my remote system?
744560	748640	So I'm going to file on my Windows desktop here, and I'm going to copy it into the
748640	755680	remote session. It doesn't let me drag and drop, but I can copy and paste. And there you see my
755680	760480	file got copied to the remote session. So now you're all going to ask, what is web browsing like?
762720	768320	Let's try YouTube. Looks great. I get a display that resizes itself. I get a keyboard and I get
768320	773280	a mouse. What I don't get is the ability to take a flash drive or another USB device, plug it into
773280	776640	the Pi, and have it show up on the virtual machine. And that's what I'm going to expect.
777360	783520	So audio works as well. Sometimes it stutters if the video stutters, but it's functional.
784480	790720	So what about touch screens? Here we have an iPad. You can see that everything works correctly.
790720	794880	One quirk about the iPad is that the mouse does not move to the location of your finger.
795600	799680	So if you click your finger onto the touchscreen, it clicks wherever the mouse currently is.
800240	803600	So mouse movement is relative. As you drag your mouse across the screen,
804480	808560	I'm not necessarily touching where the pointer is. I'm touching somewhere else on the screen and
808560	812480	moving at the same distance, which can feel a little bit disorienting, but you get used to it
812480	818640	pretty quickly. So here we have a Microsoft Surface tablet. And in this case, the touchscreen does
818640	824240	work as expected. Wherever I click my finger is exactly where it clicks the mouse on the screen.
824960	837360	So I can click in the corner to close the window. I can drag. You can see the
838480	843440	click and drag box shows up. So a slight difference in functionality between clients.
845600	849680	Digital security has advanced a lot since the mainframe time sharing days,
849680	854080	and keeping users isolated from each other and from the system as a whole is very important.
854320	859200	Running a terminal server like this securely is perfectly within the capabilities of Linux.
859200	863680	However, with our current configuration, it's like giving everyone their own account on the same
863680	869760	desktop. Each user cannot see other users' documents, but they can all see system files,
869760	874240	and it's not hard for them to share files with each other. Whether that's a problem or a feature
874240	880960	is up to you. More importantly, RDP is a very commonly targeted protocol. While the protocol
880960	886480	with modern security settings is secure for the users and does keep user data safe, you will be
886480	891600	targeted by attacks and bots trying to guess random passwords. You'll probably also show up on an
891600	896800	index of all RDP servers publicly facing on the internet. You should plan on isolating the server
896800	901760	to your internal network and using a secure remote access VPN to connect back home. Also,
901760	905840	without additional configuration, we haven't limited how much system resources each user could
905840	910160	produce. So it's theoretically possible that some rogue user could start crypto mining with all the
910160	914720	extra CPU time. We also haven't limited who can log into the system, so anyone that has an
914720	919520	account on the computer can log in remotely. Most of these issues can be resolved by locking down
919520	925040	things on the server, and I'm going to go into how to configure them now. To configure session
925040	933920	management, we need to go to etsy xxdrp, and then the file is sessman.ini.
940960	946000	So this configures the xdrp session manager, and a lot of the options that we probably want to
946000	952480	add are in this file instead of the xdrp.ini file. The first few options that you might want to
952480	959040	consider changing are in the security section here. So by default, allow root login is true,
959040	963760	and we're going to set that to false. And that means that the user root can never log in.
964400	969840	There's also a line here that says terminal server users equals ts users, and that's the name of a
969840	977120	group. So once xdrp is installed, it does not create this group ts users. And so since the group
977120	984400	does not exist, any user on the system can log in. But if we create the group ts users and add
984400	995680	users to it, then we can restrict who can log in. So let's try that.
995680	1012880	So we'll add the admin to the list, and who else do you want to add to the list?
1014000	1021760	Let's echo and foxtrot. So if you want to add someone later, you can go back to manage groups,
1021760	1027040	find the ts users group, and click properties, and click the checkbox for group members here.
1027840	1030400	If you want to do this from the command line, you would use group add.
1035360	1039120	This case, it already exists, but that would create the group if it didn't already exist.
1039120	1043040	And to add a user to the group, we use gpassword.
1043760	1053840	So this should have added our alpha user to group ts users.
1054560	1073840	You can see now the alpha is checked in this box, so it shows up in both places.
1073840	1076960	So what happens when an unauthorized user tries to log in?
1077600	1081760	I rebooted the server and let's see if VDI Charlie is allowed to access it.
1084720	1088560	So we get an error here that says login failed for display zero.
1089120	1093360	And so this is what a user will see if they try to log in, but they don't have permissions to
1093360	1098640	log in in this system. It takes them back to login screen. We get cancel to disconnect the session.
1100160	1105680	Now that we understand about ts users, there's a few other things we can look at in this file.
1105680	1110400	So restrict outbound clipboard. This sets if you're allowed to copy things from the server
1110400	1114800	to the client on the clipboard. If you're trying to prevent data from leaving the server,
1114800	1119280	this might be a good option to use. Max sessions. This is the maximum number of
1119280	1123680	sessions it'll allow. This doesn't mean your system is capable of this many sessions,
1123680	1128160	and your system might stop allocating more sessions long before then if it runs out of memory.
1128160	1133760	So by default, when you close a remote desktop session, the session will stay open.
1133760	1138320	So the next time a user logs in with that same account, we'll get connected to the already
1138320	1143200	existing session with all of the already running programs. If you set this to true,
1143200	1147520	it will eventually kill all the programs and log the user out. You can set a time
1148160	1154400	to wait before killing sessions. And you can also set a time to kill to disconnect idle sessions.
1154400	1158160	If someone's not using the system, but it's still connected, it can kick them off. If you'd
1158160	1163040	like the user to be able to log in more than once with the same account, you can set a session
1163040	1169200	allocation policy. The default is to have one session per user. If you try to log into a remote
1169200	1174960	session with the user account of another user who's already in a remote session, it'll kick out the
1174960	1179520	first user and transfer that session to the new user. If you'd like to intentionally create more
1179520	1184960	than one session, you could set this to one of these options here. The most common would be UBI
1184960	1191200	to filter by IP address or UBC to filter by connection. So by IP address, that means each IP
1191200	1195040	address connecting to the server can have one session at a time. Multiple connections from the
1195040	1199280	same IP address will get handed off to the same session, but multiple connections from different
1199280	1203920	IP addresses will go to different sessions. And by connection means that a new session is created
1203920	1209440	every single time remote desktop connects. If you're going to use UBI mode or especially UBC mode,
1209440	1214960	you really need to use kill disconnected sessions. With UBC mode, every time you make a connection
1214960	1219440	to the server, it'll create a new session. So there's no way for you to kill that session or
1219440	1225840	reconnect to it other than killing the process on the server. So something's going on with our
1225840	1230480	system. Someone's trying to use a lot of resources here. And the system has a lot of memory, but
1230480	1235440	someone is still using quite a bit of it. Let's see what's going on. So if we filter by CPU,
1235440	1241200	someone is clearly trying to stress the system here. And it looks like it's VDI echo. So we could
1241200	1246960	nicely ask them not to or we could try to restrict how much CPU time they can use. How about memory?
1250400	1256320	So our window manager is using a decent amount, which we kind of expect. But VDI echo again here
1256320	1261120	is using two gigs just for no good reason. So maybe we want to limit them to two gigs per user
1261120	1266080	or three gigs per user so they can't monopolize the whole system. The better way to visualize this
1266080	1271280	is by using control groups. There's a tool called system D CG talk, which shows us the usage per
1271280	1284320	control group instead of per process. So right now it looks like user 105.slice is using 200%
1284320	1292320	of the CPU and 2.2 gigs of memory. XRDP service is not using a ton at around 2.8%. But if I move
1292320	1298720	my window around a lot, you'll see that XRDP starts bubbling up to the top. So how do we tell
1298720	1310000	who user 105 is? Well, we use the command ID. So if we ask ID, it tells us that user is 1001.
1310000	1312400	But how do we go from a number to a user? Well,
1315920	1321360	so VDI echo. So VDI echo is the one that's using all of our CPU right now. So in order to bring
1321360	1326080	some sanity to the system, we're going to limit each user to use 200% of the CPU, which is two
1326080	1332960	threads and use two gigs of RAM. So the folder Etsy system D system is where we create both files
1332960	1339760	and folders to limit control groups. System D has a folder structure where we can put configurations
1339760	1346960	of control groups per user. Normally, this would be something like Etsy system D system user dash
1346960	1354480	number dot slice dot D. So for example, for user 1000, we might create a file in Etsy system D
1355440	1365360	system user 1000 that slice dot D and any dot comp files in that folder would be applied to slice
1365360	1370400	of user 1000. However, there's a little trick we can do if we eliminate the number and just do user
1370400	1378000	dash dot slice dot D, then this folder applies to all users by default if they don't have their own
1378000	1383840	configuration. So we're going to create this folder and create a configuration file in it to limit
1383840	1385440	the default VDI user.
1396800	1401120	So in this file, we're going to put a little bit of configuration that turns on CPU and memory
1401120	1419920	accounting and sets a quota for each one. So here's an example configuration I've linked in
1419920	1424480	the description below my blog post, which goes into some more detail and links to some resources
1424480	1432080	on system D control groups. So we're going to save this and let's see if this applies.
1432080	1437680	I rebooted the system so the changes take effect. We can see here that VDI echo is trying to run a
1437680	1443280	stress test again. But if we go back to CGTOP, we can see that they're being limited to roughly
1443280	1447120	200% CPU and suddenly under two gigs of RAM, just like we asked for.
1447840	1451280	Remember that color manager error we got earlier?
1453520	1456240	We get this error about the color manage device and we'll deal with that later.
1457200	1461600	It'll pop up from time to time, but here's how we fix that. So we need to create a configuration
1461600	1466880	file for policy kit. First, we need to see what version of policy kit we're using. In this case,
1466880	1473360	it's 0.105. In newer versions of policy kit, we need to create a .cont file which contains
1473360	1479040	JavaScript code for processing the rules. In older versions, we need to use a .pecla file.
1479040	1484800	This version 0.105 uses the pecla file method. So we need to create a file in the folder etsy
1484800	1488400	pull kit one local authority 50 local dot D.
1491360	1495200	And we can name it anything we'd like, but we need to make sure it doesn't conflict with anything else.
1496160	1505680	So now we have a pecla file. We need to copy and paste the code down for my website into this file.
1510160	1515520	So here's the configuration. It gives any user access to certain color manager permissions,
1515520	1517360	and that should get rid of the color manager errors.
1518960	1523280	So now we have a functional terminal server which can be accessed by clients of all different
1523280	1528400	operating systems. Ignoring internet video, this is a pretty good user experience for each client,
1528400	1532720	and uses a lot less resources than creating a virtual machine for each session.
1532720	1538240	Thanks to Microsoft's wide support for the RDP protocol, we can have access to high quality
1538240	1542880	clients on pretty much every operating system in existence. Microsoft publishes their client to
1542880	1549680	the Apple Store, the Android Store for Android TV even, and Samsung even supports RDP access on
1549760	1555280	their Tizen Smart TVs. So by using this protocol, instead of X forwarding or VNC, we get better
1555280	1561120	client access. This wide client support makes it a great solution for bring your own device type
1561120	1566720	solutions, where you're relying on potentially arbitrary user supplied devices that could be
1566720	1572000	running any operating system. While not specifically an advantage of the thin client architecture,
1572000	1577440	keeping all of your computing and data centralized in a server keeps important data off of the end
1577440	1582480	user's devices, which can be a great feature for remote access or for when you're traveling.
1582480	1586320	Be sure to let me know if you liked this video, and if you have any other topics on terminal
1586320	1588160	servers you'd like me to cover in the future.
