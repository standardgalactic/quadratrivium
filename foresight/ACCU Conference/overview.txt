Processing Overview for ACCU Conference
============================
Checking ACCU Conference/Programming in Modern C with a Sneak Peek into C23 - Dawid Zalewski -  ACCU 2023.txt
1. Refactored the code to use a flexible array member within the `Vector` struct to handle dynamic arrays more efficiently.
2. Removed the double mallocation by allocating the structure and its data in one go, using `malloc(size + capacity * sizeof(T));`.
3. Eliminated the need for setting the size of the data separately after allocation.
4. Modified the `push_back` function to handle the new allocation style and to avoid freeing memory that is now managed by the `malloc`.
5. Updated the `realloc` logic to adjust the capacity without reallocating the entire vector every time, which is more efficient.
6. Removed the redundant check for a non-null pointer after successful malloc to return quickly from the function.
7. Ensured that the `capacity` field within the `Vector` struct reflects the actual allocated space.
8. Cleaned up the code by removing unnecessary lines and conditional branches, making it more readable and maintainable.
9. Demonstrated the importance of embracing modern C features for improved safety, productivity, and performance.
10. Encouraged the audience to leverage compiler warnings and error messages as guides for improving code quality.

The refactored `push_back` function now allocates just enough memory for the existing vector plus additional space for future growth, without the need for separate freeing of the data array. This approach is more modern, safer, and efficient.

