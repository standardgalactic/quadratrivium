1
00:00:00,000 --> 00:00:03,920
Continuous delivery is the most effective way that we know of to create software.

2
00:00:04,560 --> 00:00:08,720
According to the data over many years from the State of DevOps report,

3
00:00:08,720 --> 00:00:14,240
collected by the Dora Group inside Google, continuous delivery literally enables us to

4
00:00:14,240 --> 00:00:20,960
build better software faster. This just works. One of the most common pushbacks that I get,

5
00:00:20,960 --> 00:00:25,520
whether I'm explaining continuous delivery in general or specific practices within it that

6
00:00:25,600 --> 00:00:31,840
help us to achieve it, this is all very well for the geniuses at Google, Netflix, Spotify,

7
00:00:31,840 --> 00:00:38,720
Amazon, Tesla, SpaceX, filling your favorite unicorn here, but our devs aren't as good as them.

8
00:00:39,440 --> 00:00:45,280
This stuff only works for geniuses. As far as I can tell, this is completely and totally wrong.

9
00:00:46,160 --> 00:00:52,080
So what do you do if you only work with human beings rather than teams of geniuses?

10
00:00:55,840 --> 00:01:04,560
Hi, I'm Dave Farley of Continuous Delivery. Welcome to my channel. If you haven't been

11
00:01:04,560 --> 00:01:08,720
here before, please do hit subscribe. And if you enjoy the content today, hit like as well.

12
00:01:08,720 --> 00:01:12,320
I think that this blame game of assuming that our team isn't good enough

13
00:01:12,320 --> 00:01:16,880
is a common human failing, a kind of institutionally imposter syndrome.

14
00:01:17,600 --> 00:01:21,280
Those other people do better than us because they are better people than us.

15
00:01:21,920 --> 00:01:26,800
Well, actually, I think what's much more true is that those people do better than us because

16
00:01:26,800 --> 00:01:32,400
they work in better ways than we do. It is usually the case that when a team is under-performing,

17
00:01:32,400 --> 00:01:37,200
that it's more about the system that they're working in rather than the people in the team.

18
00:01:38,320 --> 00:01:46,240
The idea of the Rockstar developer is alluring but wrong. So poorly performing teams are much more

19
00:01:46,240 --> 00:01:52,240
about a lack of adequate training, tools, organisational culture and often a sign of too

20
00:01:52,240 --> 00:01:57,520
much management direction interference rather than a fault of the team members themselves.

21
00:01:58,560 --> 00:02:04,160
Unfortunately, this becomes a nasty downward spiral. The worse things get,

22
00:02:04,160 --> 00:02:08,800
the more managers feel the need to manage, introducing new reporting requirements,

23
00:02:08,800 --> 00:02:14,880
more action plans and so on. The result is that the team have less time to do their work

24
00:02:14,960 --> 00:02:18,720
and so lose confidence and trust in themselves and each other.

25
00:02:18,720 --> 00:02:23,760
My wife has done some work helping under-performing teams, not in the IT world as it happens.

26
00:02:24,320 --> 00:02:29,040
Usually she starts work like this with a directive to shake things up,

27
00:02:29,760 --> 00:02:33,760
to replace ineffective managers and maybe bring in new talent.

28
00:02:33,760 --> 00:02:39,520
But her mantra is always that the people out there are just as crap or just as great as the

29
00:02:39,520 --> 00:02:45,120
people already here. So it's better to work with the people that you have and already know

30
00:02:45,920 --> 00:02:51,360
than to bring in some people that you don't. Her approach is usually to start by reducing

31
00:02:51,360 --> 00:02:57,280
outside interference, stop unnecessary reporting and to give decision making back to the team.

32
00:02:58,400 --> 00:03:03,360
In one such contract she was asked to work with the team responsible for collecting payments.

33
00:03:03,360 --> 00:03:06,800
This team were one of the worst performers in the whole of London.

34
00:03:07,520 --> 00:03:11,760
She introduced ways of working that sound a lot like Agile to us.

35
00:03:12,320 --> 00:03:17,200
They didn't build a big service improvement plan with targets and deadlines,

36
00:03:17,200 --> 00:03:22,800
instead they started making small changes. Changes that they could measure the impact of

37
00:03:22,800 --> 00:03:28,400
in under a week. Small changes like these don't need senior management or board approval,

38
00:03:28,400 --> 00:03:32,480
so the team could just act on what they agreed sounded like a good idea

39
00:03:32,480 --> 00:03:37,440
and that they hoped would steer them towards their goal. This is very different to simply

40
00:03:37,440 --> 00:03:43,680
following procedures or completing tasks set by somebody else. The team chose what they could

41
00:03:43,680 --> 00:03:49,120
improve and brought their own ideas about how they could improve things. To check whether what

42
00:03:49,120 --> 00:03:53,920
they were doing was improving things or not they collected their own monitoring data about their

43
00:03:53,920 --> 00:04:01,280
performance. Instead of just reporting generic KPIs upwards they picked the measurements that

44
00:04:01,280 --> 00:04:07,600
suited the improvement. All together they spoke trust and confidence in themselves and in each

45
00:04:07,600 --> 00:04:14,000
other. Within a few months the team were transformed into a much happier and more cohesive team.

46
00:04:14,720 --> 00:04:20,080
They moved quickly up the rankings to become one of the top performers in collecting payments in

47
00:04:20,080 --> 00:04:26,720
their field in London. So much so that the same people who had been seen as a failing team were

48
00:04:26,720 --> 00:04:32,960
now much sought after in other parts of the business to help them to improve. Good job they

49
00:04:32,960 --> 00:04:39,760
weren't fired then really. This may sound risky to people that aren't used to working this way,

50
00:04:39,760 --> 00:04:44,720
but it works and it works pretty much everywhere. Let me pause there to thank our sponsors.

51
00:04:45,440 --> 00:04:54,240
We're fortunate to be sponsored by equal experts, tricentis, transfic, sleuth and ice panel. All

52
00:04:54,240 --> 00:04:57,840
of these companies offer products and services that are well aligned with the topics that we

53
00:04:57,840 --> 00:05:02,880
discuss on this channel every week. So if you're looking for excellence in continuous delivery

54
00:05:02,880 --> 00:05:08,000
and software engineering please do check out the links in the description below. For this more

55
00:05:08,000 --> 00:05:14,880
distributed approach to decision-making at work you need to help people to learn how to become

56
00:05:14,880 --> 00:05:22,640
autonomous and you need the organisation to allow space for teams to make decisions for themselves.

57
00:05:22,640 --> 00:05:29,120
The failure of agile in our industry is largely at the feet of organisations that so misunderstand

58
00:05:29,120 --> 00:05:34,480
and constrain it that there's no room for any agility at all. The apparent chicken and egg

59
00:05:34,480 --> 00:05:41,120
problem here is that to work in this provenly more effective way we need the culture of teams

60
00:05:41,120 --> 00:05:48,160
and organisations to change. But call to change is what consultants like me always say, but it's

61
00:05:48,160 --> 00:05:53,440
really a kind of get out of jail free card. Of course everything will be better if the culture

62
00:05:53,440 --> 00:05:59,840
was great, but changing the culture is incredibly difficult in any organisation. So we'd like

63
00:05:59,840 --> 00:06:04,880
people to be able to work better but they've learned how to work to be successful in this

64
00:06:04,880 --> 00:06:11,040
organisation where the culture is inherent and unavoidable. This is the chicken and egg problem.

65
00:06:12,000 --> 00:06:17,200
We need people to change their culture to be more autonomous while working in an organisation that

66
00:06:17,200 --> 00:06:23,760
promotes and rewards existing behaviours that aren't. So what the culture of most employers has

67
00:06:23,760 --> 00:06:30,000
done is to train autonomy out of their workforce. There's an interesting story from the history

68
00:06:30,000 --> 00:06:38,000
of lean manufacturing. In 1984 General Motors partnered with Toyota in an auto plant in California.

69
00:06:38,800 --> 00:06:44,640
Toyota were innovators in lean manufacturing. General Motors did this to learn about the

70
00:06:44,640 --> 00:06:50,480
Toyota production system, their world-leading lean approach to building cars. They picked the

71
00:06:50,480 --> 00:06:57,840
Fremont assembly plant for the experiment, which was later renamed Numie. Before this the Fremont

72
00:06:57,840 --> 00:07:03,920
plant was said to be the worst in the US and specifically the workforce was also said to be

73
00:07:03,920 --> 00:07:11,040
the worst in US car manufacture. Things were so bad in the Fremont plant before the experiment

74
00:07:11,120 --> 00:07:16,480
that workers sabotaged the cars that they were building by putting Coke cans and bottles inside

75
00:07:16,480 --> 00:07:22,880
the structure of the doors so that they rattled. Mondays commonly saw 50% of staff off sick.

76
00:07:23,760 --> 00:07:29,360
By 1982 General Motors had had enough and so they closed the plant laying off all of the workers.

77
00:07:29,360 --> 00:07:35,360
When the partnership started though Toyota said they'd reopen and re-hire the same people.

78
00:07:36,080 --> 00:07:40,080
General Motors hated this and tried to talk them out of it but Toyota said that they'd

79
00:07:40,080 --> 00:07:47,440
re-hire but change how things operated. The old employees also hated this but they needed the jobs.

80
00:07:48,560 --> 00:07:54,640
Toyota retrained the employees, sending many of them to Japan to train in Japanese car plants

81
00:07:54,640 --> 00:08:01,120
and to learn the Toyota approach and culture. Numie later became the highest quality General

82
00:08:01,120 --> 00:08:07,040
Motors factory in the United States. The employees who went through this transformation

83
00:08:07,040 --> 00:08:15,360
cited two reasons for this success. Toyota's focus on quality and on teamwork. Lean approaches in

84
00:08:15,360 --> 00:08:21,680
general and continuous delivery in particular are very strongly focused on building quality into our

85
00:08:21,680 --> 00:08:28,640
products. Our goal is to build good stuff not to treat quality as an afterthought. We optimize our

86
00:08:28,640 --> 00:08:35,600
process to minimize work, maximize focus and always always to focus on the quality of our products

87
00:08:35,600 --> 00:08:41,360
and processes. If our tools, technology or processes present barriers to this quality focus

88
00:08:41,360 --> 00:08:46,480
it's everybody's responsibility to change them, to try new things, to attempt to remove

89
00:08:46,480 --> 00:08:52,800
those barriers and so achieve higher quality wherever we can. One particularly interesting

90
00:08:52,800 --> 00:08:59,440
insight from the Numie experiment comes from John Shook. Shook was first the first American to work

91
00:08:59,440 --> 00:09:05,200
for Toyota in Japan. He said that the real difference was in how the change in culture was

92
00:09:05,200 --> 00:09:12,160
achieved. The conventional way to effect change like this is to change thinking in order to

93
00:09:12,160 --> 00:09:18,400
change behavior. The Toyota and Lean approach was exactly the opposite, to change behavior

94
00:09:18,400 --> 00:09:24,880
in order to change thinking. In software this is echoed very strongly as one of the findings from

95
00:09:24,880 --> 00:09:31,600
the state of DevOps reports and is reported in the Accelerate book. You can act your way to a

96
00:09:31,600 --> 00:09:38,480
better culture by implementing these practices in technology organizations. I believe this idea

97
00:09:38,480 --> 00:09:45,760
to be profoundly true but it's also a bit complicated isn't it always? DevOps experts often talk about

98
00:09:45,760 --> 00:09:51,760
getting the culture right and this is extremely important but I think that it's also commonly

99
00:09:51,760 --> 00:09:57,680
misinterpreted. To mean let's spend lots of time teaching people how to think differently

100
00:09:57,680 --> 00:10:03,040
rather than let's start trying different ways of behaving and teach people to think differently

101
00:10:03,040 --> 00:10:09,120
from that. If you've never read the Accelerate book I very strongly recommend it. The research

102
00:10:09,120 --> 00:10:14,640
that is behind the book helped the authors to build a predictive model for software development.

103
00:10:14,640 --> 00:10:21,040
This model clearly shows positive relationships between specific behaviors and better outcomes.

104
00:10:21,040 --> 00:10:26,080
The fundamental behavioral change that led to this model and that will lead you to achieving

105
00:10:26,080 --> 00:10:32,800
the promise of this approach is to make change in small steps. To try stuff out, see what works

106
00:10:32,800 --> 00:10:37,920
and what doesn't. Use these small steps and the learning that you gain from them to try to optimize

107
00:10:37,920 --> 00:10:43,920
towards your goal whatever that might be. This is the starting point and when you start out

108
00:10:43,920 --> 00:10:49,120
you probably won't be very good at working in small steps and learning from them but basically

109
00:10:49,120 --> 00:10:55,280
this is the cultural change that you're striving to achieve. I think that of this as optimizing

110
00:10:55,280 --> 00:11:02,160
for learning. This idea of focusing on behavior as a means to change culture is an important one

111
00:11:02,160 --> 00:11:08,560
I think and not necessarily obvious and so is often overlooked. The trouble is that it's easy

112
00:11:08,560 --> 00:11:14,800
to confuse this focus on behavior sometimes with a focus on tools and we love to focus on

113
00:11:14,800 --> 00:11:20,240
tools in the software world. This is not the same thing at all. I think that the difference

114
00:11:20,240 --> 00:11:27,360
is maybe in the nature of the goals that we're striving to achieve. Good goals focus on real

115
00:11:27,360 --> 00:11:33,920
desirable outcomes not on the steps towards those outcomes. We can then try behaviors

116
00:11:33,920 --> 00:11:39,760
that we think will help us to achieve those outcomes. Goals like these are never about the

117
00:11:39,840 --> 00:11:46,800
use of a particular tool or technique or ritual. These things are at best a means to an end but

118
00:11:46,800 --> 00:11:54,320
never the end in itself. Good goals may be pretty generic or very specific. We could decide that

119
00:11:54,320 --> 00:12:00,720
we want to build better software faster. Actually everyone wants that. That is why the measures

120
00:12:00,720 --> 00:12:06,320
behind the state of DevOps report matter why they're important because that's exactly what it is

121
00:12:06,320 --> 00:12:12,480
that they measure. Stability and throughput are important generic measures. They aren't perfect

122
00:12:12,480 --> 00:12:18,160
but nothing else is as generic and if you have high scores in both you're doing well. Really

123
00:12:18,160 --> 00:12:24,000
he's that simple. If you don't have high scores in both you aren't doing as well so now's the time

124
00:12:24,000 --> 00:12:28,880
for more small steps to fix the things that are stopping you from doing well. Try stuff to see

125
00:12:28,880 --> 00:12:34,720
what works do more of that and less of what doesn't. There are a few reasons why the autonomy of

126
00:12:34,720 --> 00:12:40,880
teams is important. First is that people doing the actual work have a much deeper insight into

127
00:12:40,880 --> 00:12:46,640
what the problems really are. What works and what doesn't. So we want them to have the freedom to

128
00:12:46,640 --> 00:12:53,040
correct things at the moment when they see something's going wrong. Not to wait to be told by somebody

129
00:12:53,040 --> 00:12:58,160
else who's far away from the actual work. I did some work for a client a few years ago. One of

130
00:12:58,160 --> 00:13:03,200
their developers told me that one day they were working on a feature and spotted a bug in the

131
00:13:03,200 --> 00:13:09,040
code. They fixed the bug and carried on working on the new feature. Later they told the project

132
00:13:09,040 --> 00:13:14,000
manager who then told them to revert the bug fix because they weren't supposed to be working on

133
00:13:14,000 --> 00:13:21,280
the bug. Clearly this is in no one's interest. The code isn't better or safer with the bug.

134
00:13:21,840 --> 00:13:28,240
Following a plan is less important than producing good products. This kind of irrationality is

135
00:13:28,240 --> 00:13:34,480
caused by focusing on the wrong goals. Steps in a process. In this case seeing the bureaucracy

136
00:13:34,480 --> 00:13:39,840
surrounding software development in this organization as the goal rather than a means to achieve it.

137
00:13:40,560 --> 00:13:46,640
The production of good safe software systems is the real goal. So if we need to allow teams the

138
00:13:46,640 --> 00:13:52,960
freedom to operate. Freedom to make choices and we need to help them to focus on the goals that

139
00:13:52,960 --> 00:14:00,000
really matter. Rather than some narrowly focused process oriented goals. So our aim is to encourage

140
00:14:00,000 --> 00:14:06,480
our teams to start trying new behaviors. Key amongst those is working in small steps and

141
00:14:06,480 --> 00:14:12,800
targeting specific goals focused on building better software faster. We can we can measure with the

142
00:14:12,800 --> 00:14:20,240
Dora metrics. The Dora model goes further than that though. These behaviors together predict

143
00:14:20,240 --> 00:14:25,840
high scores in stability and throughput. So these are good places for teams to start with

144
00:14:25,840 --> 00:14:32,720
their behavioral changes. Making small steps towards these. Don't wait for someone else to

145
00:14:32,720 --> 00:14:37,680
fix these things for you though. Start working in small steps doing whatever you can to improve

146
00:14:37,680 --> 00:14:43,280
in each of these areas. Measure your progress by tracking stability and throughput. And start

147
00:14:43,280 --> 00:14:49,840
thinking about how to tell whether other things that you want to try are working or not.

148
00:14:49,920 --> 00:14:55,120
If your team can't be trusted to do this you don't get to fix that problem by micromanaging

149
00:14:55,120 --> 00:15:00,240
and gatekeeping them. Because all that does is show them that you don't really trust them.

150
00:15:00,800 --> 00:15:06,160
So at best they will be second guessing their own decisions and at worst and probably more

151
00:15:06,160 --> 00:15:10,640
commonly they're going to stop making decisions all together and rely on somebody else to make

152
00:15:10,640 --> 00:15:17,280
decisions for them. The last part in helping teams to become responsible is to make sure that they

153
00:15:17,280 --> 00:15:24,560
are actually responsible. If they make a bad choice it is down to them to fix it, not somebody

154
00:15:24,560 --> 00:15:31,200
else. Gatekeeping in a process encourages people to adopt a mindset of throwing problems over a wall.

155
00:15:31,200 --> 00:15:36,720
Business teams specifying ill-thought-out solution focused features to development teams. Developers

156
00:15:36,720 --> 00:15:41,280
assuming that quality is somebody else's problem and assuming that someone downstream will test

157
00:15:41,280 --> 00:15:47,280
their crappy code. QA teams assuming that their job is to raise bugs not to help developers to

158
00:15:47,280 --> 00:15:54,160
reproduce them or operations teams preventing release unless accompanied by pages of documentation

159
00:15:54,160 --> 00:16:00,320
that no one will ever read. The goal of all of us is to produce great software that helps people

160
00:16:00,320 --> 00:16:06,560
to do something that they want to do quickly and efficiently. And to do that we need to learn to be

161
00:16:06,560 --> 00:16:13,920
creative, iterative, collaborative and autonomous. Thank you for watching and if you enjoy the content

162
00:16:13,920 --> 00:16:18,720
on the Continuous Delivery channel please do consider supporting us by joining our Patreon

163
00:16:18,720 --> 00:16:22,880
community and joining the Discord discussion. Thank you. Bye bye.

