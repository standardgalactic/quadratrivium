start	end	text
0	3200	Hi, my name is Dave Farley and welcome to The Engineering Room.
3200	7760	If you haven't been here before, do hit subscribe and if you enjoy the content today,
7760	13520	hit like as well. Do join in the conversation too and let us know your thoughts and ideas in the
13520	18640	comments below. The Engineering Room is an occasional series and is meant as an addition
18640	23840	to the more usual content on the Continuous Delivery channel. These are longer form conversations
23840	29280	with some influential and thoughtful people from our industry. Today I'm joined by my
29280	35040	friend Kevlin Henney. I first came across Kevlin at a conference in Australia many years ago,
35040	40880	although we're both English. He gave several talks at that conference, including a keynote,
40880	47600	which was funny, unexpected, educational and brilliantly well presented. Over the years,
47600	52960	I've come to expect nothing less than that from Kevlin. That's his norm. As I started talking
52960	57440	more frequently at conferences, our paths crossed more often and we became friends.
57440	62160	Kevlin is an independent software development consultant, trainer, speaker and writer.
62160	68320	The people who work with Kevlin always speak very highly of his services. He's witty, nerdy, sorry,
68320	74560	Kevlin, and smart. He also has a Google unique name. Try it. You'll only get Kevlin.
75280	81840	And rather strangely, among the cognizanty, if you ever see an obvious public software failure,
81840	86640	a screen in an airport showing a command line or an advert in a stall showing the blue screen of
86640	93040	death, it's called a Kevlin Henney. But no doubt we'll get to that. Welcome, Kevlin. Did I miss
93040	98800	anything important? No, thank you very much, Tim. That's the perfect introduction. I'm going to copy
98800	106160	and paste that. Great. Thanks. Well, I've been looking forward to this talk for a little while.
106160	113600	The last time we met was in Copenhagen at a go-to conference. And my wife and family
114560	117520	took the mickey out of me for the rest of the conference, because you and I, every time we
117520	124000	crossed, we spent all of the time talking rapidly in great detail because we hadn't seen each other
124000	128560	for a while. But the funny thing is, the way that coincidences worked out is that
129280	134560	pretty much the moment I arrived in the hotel, you and family were there, and I bumped into
134560	140000	everybody, including your son and daughter-in-law at the airport when I left. It's crossed quite a
140000	148080	lot there. So yeah, plenty to talk about, plenty to catch up on. Cool. So let's start with that
148080	152720	production failure being called a Kevlin Henney. I think I know the answer to this, but tell us how
152720	159680	that happens. Yeah, well, so it's one of the things. I guess if you're in software or there's
159680	163920	something that you really into, you become sensitive to things. You start spotting things.
163920	169920	And I was always fascinated by the fact that, you know, see occasional failures in places,
169920	176400	you occasionally see a cash machine booting up and stuff like that. You kind of notice this stuff,
176400	181360	it makes you ask questions about it. But then we hit the, then we hit the kind of like,
182800	188160	cameras on phones era. And at that point, suddenly, it's like, I'm walking, everywhere I'm walking,
188160	192080	I have a camera. And, you know, the amount of software that we actually have everywhere
192080	196480	is huge. So I'm starting to take pictures of these things. I'm also taking screenshots
196480	201360	whenever something crashes, particularly if it's losing my work, I'll take a screenshot.
202800	207680	Hold on to that because I think it's fascinating because it's kind of like, okay, it's often
207680	211520	frustrating, but it's fascinating. It's just like, okay, I mean, this is my space. I'm in
211520	218240	software that collectively we somehow created this. And I'm fond of noting that we, as in
218240	223920	software development, are the largest creators of kind of gorilla installation art on the planet.
223920	228720	Nobody else comes close, you know? But I used to kind of collect these. And occasionally,
228720	232960	I kind of put them in talks or when running a workshop or training course, I kind of have them
232960	240080	on my screen, just like as a screensaver in the breaks always causes conversation. And I always
240080	245600	pointed out, oh, this is really interesting because in failure, when something fails,
245680	248560	you learn about something, you learn something about how it was constructed.
249360	252720	You know, it's kind of like at that moment, you lose all the encapsulation, you're presented
252720	257520	with something when it works that is beautiful and pristine and pixel perfect, and it offers
257520	262800	some kind of user experience. And maybe you can guess the technology, but most of the time,
262800	267280	you can't. And then it's like you drop something on the floor and it fractures. And it's just like,
267280	272160	oh, look, this bit's made of C sharp, or they're using that as part of their stack, or I'm pretty
272160	277760	sure that's out of support now, or whatever it is, you see it loses its encapsulation, it loses
277760	283200	that kind of like surface, and we see the insides. And if it doesn't tell us directly how it was built,
283200	288080	it kind of invites questions, it makes you go, oh, I wonder what, how did this arise? Did they
288080	292800	forget to put a tri block here? Did they forget, you know, how did this exception escape to the user?
294400	297840	But, you know, I just did that kind of as a point of fun as a point of personal interest
297840	302720	and point of showing people, and then people started sending me these things by email.
303520	309200	And then we hit social media era, people start sharing it more directly. And then it's Twitter,
309200	315760	and people are just like posting it and just adding me, then I start retweeting it. And then
315760	319600	that's how that's where the that's where it acquired its name, and they actually made its way
319600	326320	into urban dictionary, the register and a bunch of other things. So, so yeah, it's just one of
326320	331600	those things. And the incidental side effect is it is one, it's interesting. I find it's still
331600	335760	fascinating. I think there's a kind of a humor to it, as well as a serious point to be made
335760	340480	in all of these things. It also ends up being an accidental service, because sometimes you're
340480	346320	talking about rail services and train stations and things like that. And often people will
346320	351520	at the train company as well, wherever they are in the world. And, you know, you can tell what
351520	355920	the customer service is like, because often they'll go, oh, you know, instantly jump on that,
355920	359760	say which station was this, I'm really sorry this happened, or there'll be just silence. And so you
359760	364320	can kind of tell that you get a sense of the customer experience as well as the failure experience.
365360	368640	That's brilliant. So, so kind of the archaeology of failure.
369680	371280	Yeah, yeah, that's exactly it. Yeah.
373040	379760	That's great. I often think that we kind of we don't, well, I don't think just think I know,
380320	386480	we don't think too much about the failure failure routes so often. There's one of my
386480	394400	favorite quotable bits of research was a usenix survey from a few years ago that looked into
394400	401120	the cause of production failures. And something like 60% of production failures are in the error
401120	406320	handling path. The most common line of code in the event of a production failure is a comment
406320	412720	saying should should do some exception handling here. Yeah, yeah. That's a really interesting
412720	418240	because that one, if it's the if it's the one I'm thinking of that was 2014 paper. But
419360	423520	but there's probably been others. But I think I first came across that somebody did a study
424160	428800	the late 90s early 2000s. I really can't I'm fortunate I can't cite it. I can't remember
428800	434480	who it was. But they did an analysis of failures in the Linux kernel. And they said it's mostly
434480	439680	on the error paths. Yeah, you know, the dark alleyways that just don't get explored and tested
439680	443520	anywhere near as often, you know, happy day works out fine. But these edge cases,
444400	451040	something goes wrong. And then either it was just like this was to do, or somebody had an idea of
451040	455840	like, well, it should be something like this, but it was never really tested. And it kind of got
455840	461760	marginalized in their in their memory. And now, you know, control flows wandering down this dark
461760	466080	path that's been untested to deal with a really bad situation. And the situation gets worse,
466080	470080	you know, it's one of those things. And that that that seems to be a recurring theme that
470880	475920	these edge cases, it's kind of, you know, when you're at the edge case, it's not an edge case
475920	481520	anymore. It's your world. Yeah, yeah. Yeah. It's one of the things one of the things I did some
481520	487600	research for my book into the kind of history of software engineering. And of course, Margaret
487600	494640	Hamilton was a huge, you know, a hero in in in that in that field in the early days of that.
494640	499600	One of the things I loved that she that she went on about was talking about the importance of the
499600	503760	systems that she was working on the flight control systems for for the Apollo missions,
504320	511520	being man rated. And so the reason why she coined the term software engineering was to
511520	515440	because they were spending all of their time worrying about how things could go wrong,
515760	520400	like engineers do, you know, you don't build a bridge and just only worry about happy days,
520400	525040	you worry about when there's a storm or when the load's too heavy or all of those kinds of things
525040	530800	too. And we we need to be thinking the same for building, you know, serious software systems.
530800	534160	Yeah, I think I think a lot of the stories around Margaret Hamilton, absolutely brilliant. I mean,
534160	537440	the fact that, you know, there's one where she brought a daughter into work, you know,
538320	542960	one day and daughter recreated an error or created an error condition just by messing
542960	546880	about with it, put it into a state, you know, it's just like, you know, cats and children.
549120	554320	And, you know, and other cases where, you know, these, you know, the kind of the classic
555520	560240	certain McKismar associated with the fact that at that point, all astronauts would have been
560800	565680	Air Force pilots, and the culture and image that went with that is like, oh, these highly trained
565680	571680	people. And they won't make mistakes like that. And then promptly one of them does. And it's just
571840	576880	they go back to her. It's like, yeah, let's do that. Let's put that failure. Because it doesn't
576880	580800	matter that they're highly trained, the most the operative word in that sentence is people.
584880	590480	High train gets you so far, but you're still ultimately human. And I think that that and one
590480	594880	of the other points that I read that Margaret Hamilton talked about is she was trying to really
594880	600960	get a seat at the table, as it were, because you put it certainly at that era. This whole idea
601040	607920	that software could form a viable, meaningful first class component of a system, as opposed to just
607920	615520	a secondary component was that was completely a foreign concept. And, you know, there were even
615520	619600	astronauts saying, well, we don't think we're going to need software. We don't actually need
619600	625920	software to land on the moon. And, you know, it's to anybody who's either studied the physics of
626000	630960	it or is familiar with any of the modern stuff around this. It's just like, yeah, you can't
630960	635920	just fly by the seat of your pants and that's going to work out. You need this stuff. And so
635920	642400	she wanted their seat at the table. Engineering was the term that she chose. We've got to treat
642400	647520	this in that sense. It's up there with all the others. Because this is not just icing on the
647520	652800	cake. This is not just a glorified slide rule. There's something deeper and more fundamental
652880	659680	here. We're talking about control systems and data that is genuinely life critical. You know,
659680	665360	this is not just a slide rule. This is beyond that. It's the idea of it's not just a calculator,
665360	669280	whereas I think many people thought of this as just extension of the calculator.
669840	678240	Yes. Yeah, absolutely. Brilliant woman and a real pioneer in our field, I think.
678960	687200	Yeah. Yeah, definitely. But I think that's one of the things that I found with because one of
687200	694080	the other things that we had this term, engineering that kind of took off from different points.
694080	703040	And I've seen it misattributed. So I've seen things where people said, oh, the NATO sponsored
703040	707760	1968 software engineering conference was the beginning coined the term. No, no, no, no.
707760	714080	They use the term because it was already around. Margaret Hamilton initiated that. I think I
714080	718960	stumbled across a bit in communications at the ACM that it was used as a term in 1966
719600	724720	in there. And in other words, there's a kind of a lineage. So by the time the conference came around,
726800	734400	this term was currency. And it existed. And that was trying to try and say, well,
734400	743040	what does this look like if it's for software? I know you looked at it for your book and I did
743040	749200	it for, I did a whole load of talks in 2018 because it was 50 years on. So I thought I'd be in a
749200	753760	series to 1968. I thought, you know what, I'm going to go and read, I'm going to actually go and read
753760	763360	end to end the whole proceedings and also look at the 1969 one as well. But do that. And I did
763440	767440	that a couple of years beforehand. And I found it absolutely fascinating because one, it's an
767440	774320	amazing historical document capturing some really interesting insights. But also, there was a real
774320	780800	sense that one of the things is, you know, some of it is incredibly dated, because, you know,
780800	786000	it does date because they're talking about technical constraints and concepts from the 60s.
786000	790160	But at other times, it's just like, oh, yeah, you know, it's not that you agreed on everything,
790160	797520	but all of the ideas that we now debate and push forward were present. They were there,
797520	803600	they were alive. Yes. And problems that those people were facing in building real systems,
803600	808080	even though the computers that they were building them for are all in museums now. You know, it's
811120	816320	one of the things that got me interested in kind of talking about engineering in my book and stuff
816320	822000	was that, you know, I think that we discard some of those really durable ideas too readily,
822000	826320	that there are things at the heart of our profession. I think the most important things
826320	832000	about our profession that are that haven't changed since the 1960s. And as you said,
832000	837440	you know, I had hair standing up on the back of my neck when I was reading stuff by Alan Perlis
838080	843360	describing in language that sounded quite dated in many words, his choice of words sounded like
843360	849920	somebody from the 1960s. But nevertheless, he was expressing ideas that would that still too many
849920	854880	software development teams don't even think about doing to their detriment. Yeah. And
857040	863040	crazy. Yeah. And I think there's a really interesting things in there about, you know,
863040	866960	that a lot was up for discussion, but also sometimes some of the discussions were that
866960	871120	they're talking like old hands, you know, they're talking about 10 years, like it's a really bad
871920	875360	so that's the fascinating thing about doing this talk 50 years later is just like, well,
875360	880880	they thought they were it was old hat when they did 10 years in, we're half a century on how we
880880	887040	do it here, you know, and, you know, there's some really, really interesting things. So from my
887040	892960	perspective, one of the things I'm very interested in is testing. And interestingly, before reading
892960	900080	that, I had kind of presumed that unit testing as a term, I kind of I kind of dated that to the
900080	908480	1970s. I found, you know, I hadn't tried and really pursued it back in time. But 1970s was
908480	912160	what I had in my mind based on what I'd read. And I thought, you know, that would that be
912160	916480	terminology. But you I look at the software engineering, look at software engineering
917280	921520	proceedings. And there it is, the term unit testing is there without qualification or
921520	925840	definition. In other words, it's not presented as here as a new idea. It's presented as, Oh,
925840	932400	okay. I assume everybody knows it. Yeah. And it was really interesting, just looking at certain
932400	942960	ideas like that. As well as some other historical kind of foreshadowings. So a number of years ago,
942960	949440	I was quite heavily involved in the patents community. There are a number of elements in
949440	953520	the patents community that and patents thinking, which I think have been hugely neglected for me,
953520	959040	one of the most the real turn ons with the whole idea of really understanding. This is a pattern.
959040	965760	It is not a it's not a principle. It is not a universal. Here is an idea. And you know what,
965760	971120	sometimes this this works in some cases and not in others. And here's why. And people often miss
971120	977040	that they kind of kind of latched onto the surface as it were, but not really understood the death.
977040	982960	And for me, the huge, the huge influence was the trade offs, understand the trade offs. Here
982960	988560	it's just like, Ah, here we go. Here is here is why this works well here, but doesn't overheard
988560	994880	the context dependence of the idea was absolutely huge. So rather than talking about software from
994880	1000160	the perspective of mathematics in which, which is a time, which is timeless and universal and
1000160	1005200	rest of it, here was something that was hugely dependent on, well, I can't tell you what's right.
1005840	1009280	You know, somebody says, is this the right way? Or is this wrong? It's just like, well,
1009280	1012560	you know, it's going to be that it depends. And that's not because I'm being a consultant. It's
1012560	1016800	because genuinely, there are about three or four different ways of doing this. Yeah, show me the
1016800	1020400	landscape. You know, you've got to show me the landscape that you're going to you're going to
1020400	1024880	put this into my answer will be different if you're dealing with a legacy system, perhaps
1024880	1030640	with a modern system, it'll vary from language to language, depending on certain elements.
1030640	1036800	But there might be broader ideas that are still stable. But you know, there are, if you say, oh,
1036800	1040480	this is in a multi-threaded environment, then I might retract my previous answer and go,
1040960	1045200	actually, we're going to take a different path here. And it's the contextuality and
1045200	1051440	understanding the trade offs. For me, that was really exciting. Now, we tend to, for a lot of
1051440	1057840	people, they tend to credit the gang of four, Gamma, Helen, Johnson, Felicides with the pattern
1057840	1062400	stuff. Now, certainly that initially turned me on. But even before the book was published,
1062400	1067200	I'd heard about this stuff. But it was this other stuff that was going on inside. This comes from
1067200	1071360	architecture. This doesn't come from software. This comes from architecture. And Christopher
1071360	1077520	Alexander kind of originated this idea is this whole idea of he was really big on the idea of
1077520	1080800	you've got to have an empirical design. In other words, he was trying to move,
1082080	1085280	he was trying to move building architecture away from fashion.
1088000	1091680	Which is something I think we get plagued with in software as well. He was trying to say, well,
1091680	1094720	look, there's an empirical solution to this. Does it work? You know, here are the qualities
1094720	1099920	that make something work. No, have you defined your problem? Does this solve the problem of
1099920	1104960	living or whatever context he was looking at? And he was very clear, use the language of empiricism
1104960	1109440	all the way through. This is not to say there were no artistic qualities to it. But I was always
1109440	1114240	fascinated. And his writing style, again, it catches the time is 1970. So I started reading
1114240	1118240	all the Christopher Alexander stuff. And then you eventually hear another book by Christopher
1118240	1124880	Alexander notes on the synthesis of form, which was published in 1964. And I had a vague awareness
1124880	1130480	that this had a big influence on a lot of disciplines at the time. But rereading reading
1130480	1135920	the 1968 NATO software engineering proceedings was fascinating, because they kept referring to
1135920	1141200	Christopher Alexander. But this predates his patterns work. It was all synthesis to form about
1141200	1146800	how he thought about design in terms of balance and trade offs and, and, you know, sort of isolating
1146880	1150560	systems of change from one another and all the rest was hugely, hugely influential.
1152400	1156480	But kind of, kind of forgotten that kind of got buried there. So this kind of there's this
1156480	1162160	little capsule into the kind of like, kind of the zeitgeist of the 60s, and design thinking
1162160	1167920	of all this kind of stuff, Conway gets mentioned, Melvin Conway, and this influence on architecture
1167920	1173040	of like, you know what, the way that your people communicate, it's going to have a huge exertive
1173040	1177760	force on the structure that you build, how you communicate is going to is going to influence
1177760	1184080	that because this is not maths. This is, we're creating a thing. And, and our choice of creation
1184080	1189920	is going to be influenced by how we talk to one another. And there, again, this gets multiple
1189920	1195600	references throughout the software engineering proceedings, which I think I think, I think,
1195600	1201120	I think that's, I think that's, that's deeply entwined in terms, in terms embedded really in,
1201600	1212080	what engineering really means. I must confess, I, you know, I'm, I, I love maths. I enjoy,
1212080	1217920	I actively enjoy maths and sometimes do math, solve mathematical problems as a hobby, you know,
1217920	1224320	but I don't think that what we do is maths. I don't, I don't, it's, it's, it appeals to
1224320	1230080	mathematical thinkers. But one of the differences between engineering and maths is that engineering
1230080	1237200	has that pragmatic bent, you know, so if, if you could simulate an aeroplane, the design of an
1237200	1242000	aeroplane and wholly do that, you know, in a simulated form and just build the aeroplane and
1242000	1248080	then take passengers, you know, people would do that, but they don't, they do that. And then
1248080	1251920	they go flying. And certainly, if you're Boeing, I don't know whether, I don't know if they still
1251920	1256640	do it, but certain for a very long time, the engineers that built the aeroplane were amongst
1256640	1263040	the first passengers after the test pilot went up to go for a ride in the aeroplane that they
1263040	1268320	designed. So there's, there's, there's this thing of, of, you know, trying stuff out. And I think
1268320	1273520	that's one of the principles that I get a little frustrated sometimes with people talking about,
1274080	1279360	you know, the mathematical nature of programming. It's interesting. It's fascinating. I like,
1279360	1283440	I like thinking in those sorts of terms, but I don't think that's enough because I think it's
1283440	1288960	usually harder to be able to write something that's, you know, a provable system than it,
1289600	1294320	than it is to write the system in the first place. And so you more, it's almost more error prone.
1294320	1299120	So, you know, it's, it's, it's a complex problem. I was, I was just listening to the radio
1301040	1308240	today about, actually, I was listening to a podcast from new scientists and they were saying
1308880	1316000	they've just rejected one of the quantum, supposedly quantum computing proof
1317360	1321200	encryption algorithms, because somebody managed to break it on their laptop.
1325120	1331840	And you'd think that'd be a fairly mathematical kind of area of software. So, so, so when we're
1331840	1337920	building flight control systems or, or car control systems, or even your stock control system,
1339040	1343680	there's still room for all those human errors and mistakes. Yeah. And, and, and, and, you know,
1343680	1349280	Margaret Hamilton's little girl to come in and, and screw it up in new and interesting ways.
1349280	1352480	And I think, I think that's a really important thing because it's, it's, it's,
1352480	1356240	because this kind of whole point about kind of perspectives of when we look at things,
1357200	1364000	that how do we reason about them? And that the, it's a distinction I made a number of years ago is
1364080	1370800	that, you know, software, there are lots of elements of it that are mathematical, but are not
1370800	1375440	the same as math, you know, but not mathematics. There's a distinction there. So engineering is
1375440	1380000	not mathematics, but it is mathematical. In other words, it draws very heavily, uses it as a tool,
1380000	1384160	and that tool can also give us further insights, but they are not an equivalence. There's not,
1384160	1389360	you know, and that's, and that's a really important distinction. And that idea of,
1390080	1394080	yes, but when I throw it, does it stick? You know, that kind of stuff is the real thing.
1394080	1399920	But when, when we actually, you know, yeah, sure, this works in the simulation, but it's, you know,
1399920	1409280	it's, it's, it's this, it's like, let's, let's take it back to the 80s. Aliens. And, you know,
1409280	1412320	being asked, you know, how many, how many actual, how many combat drops have you done?
1413280	1417360	And then we get one answer is like, and then the follows on simulated. It's just like,
1418320	1422880	okay, there's a big distinction here. You know, you've actually, you know, this is your first
1422880	1428880	time in properly in the field is a big distinction. So in other words, there's that whole kind of
1428880	1434800	idea of like the math. And, and I think for, I think for software, the term, there's a lot of
1434800	1440080	mathematics that is in bits, there are things that are genuine mathematics, there's a lot that
1440080	1444560	is mathematical, but the better way of looking at it is formal. Now, I don't want to get that wrapped
1444560	1449040	up with all methods, because that's clearly an important subset, but it's formalized. And I was,
1449040	1453360	it's, there's, there's elements. And that's something I've always found fascinating is that
1453360	1458560	you got the human element, which is definitely hugely informal, sloppy, we are not, we are not
1458560	1465600	formalized creatures with very, very associative. And then what developers have to do is bridge the
1465600	1472240	gap between this incredibly sloppy world that somehow has form and shape, but is not necessarily
1472240	1476640	rigid and prescriptive and with well-defined boundaries. And then you kind of shift into
1476640	1482720	the world of programs, which have exactly opposite nature. They are highly formalized, you know,
1482720	1486400	it's, it's a programming language is a formal structure. There's no kind of like, well, maybe
1486400	1490000	today I'll compile it, or maybe you don't. And if it looks like that, you know, you have a problem.
1492000	1497280	You know, but it, there's kind of, there's a, and what you've got to try and do is build a system
1497280	1502800	for the kind of the soft squishy thinking and soft squishy beings out of stuff that is really
1502800	1508400	quite different. And the nature of these two, bringing them together, I think that for me,
1508400	1512800	that's one of the things I find fascinating, but it's probably also for many people without them
1512800	1518320	realizing is what's interesting about software development is there is the rewarding aspect
1518320	1523040	of some things that are solved and elegant. And it's just like, that's done. But then there's
1523040	1527280	the other element of like, and how does it fit with the world, which is also quite exciting.
1528240	1531520	And also the discoveries that you make is just like, well, I thought this was a really good
1531520	1535520	abstraction, but now I truly understand what's being built. I don't think that's the right
1535520	1538960	abstraction. That doesn't mean it's a bad abstraction. It's just not the right abstraction
1538960	1544240	for this system. It's just now I understand how it's evolving through time and the kind of the
1544240	1550400	nature of changes that the client wants from it, or the things we've discovered from, from sprint
1550800	1554800	to sprint. It's just like, oh, okay, I keep touching this, keep changing it with that
1554800	1560000	optimism. Oh, I'll get it right this time. But actually, actually, maybe I'm learning
1560000	1565040	something deeper, the fact that this is not the idea that I thought it was. And I need a different
1565040	1573280	point of view. And that's, that's not a side effect to an accident. That's the nature of
1573840	1579680	of the game. It's this exercise, it's this continual exercise in learning in which
1580320	1584000	we enhance our understanding of the problem that we're trying to address,
1585120	1591600	and the nature of our solution, a solution that we're trying to apply to it. And, and, and it seems
1591600	1597200	to, that's one of the things that I very, very strongly come to believe that that's a complete
1597200	1605200	cornerstone of our discipline. And we optimize to be able to maintain our ability to make changes
1605200	1611200	when we learn new stuff. So, so I refer to it as this kind of one of the ways of kind of
1611200	1618320	pragmatically, informally adopting the philosophy of science to software. So I want to, I want to
1618320	1622160	consciously start out assuming that I'm going to make a mistake and I'm going to be wrong.
1622880	1628160	And then I'm going to look at ways in which I can falsify my, my guesses along the way.
1628160	1633920	And that's a much stronger way of learning than assuming that my design's perfect and it's going
1633920	1638960	to be right. And I'm never going to have to correct it again. I've found the one true way.
1638960	1646640	You know, I'm always reminded, you know, this, this is years ago, but I had a client where I had,
1646880	1651840	I, I become a success of visits, I become familiar with the nature of their system and what they
1651840	1656800	were doing. And they one day asked me, we love you to design this kind of like subsystem. And it's
1656800	1660960	got these performance constraints and stuff like that. And we've got the suggestion for the basic
1660960	1664880	idea of the design. And I kind of said, I don't think the memory manager is going to like that. I
1664880	1667920	don't think that's, that's, I don't think that's going to work. I don't think it's going to meet
1668480	1672560	the performance requirements that you need. I think it's going to be issues with it. And then I
1672720	1677440	made a suggestion and I said, are you sure? And I said, well, I think this is going to
1677440	1681120	work better. I think this will work better with memory allocation on this platform. I think
1681840	1685520	that for the, you know, you're dealing with peak, they basically wanted to deal with peak demand
1685520	1688960	in some way. You know, we can't handle the data, but all we need to do is spool it off so we can
1688960	1693600	handle it later. And I said, I think the way I'm proposing will work this way. And then I tossed
1693600	1699040	in another idea, because I'm not really happy until I've got three ideas. So they gave me one. I,
1699040	1703200	I had, I had a preferred one. I didn't think there's a worker and I had a preferred one.
1703200	1707440	And, you know, and, and then I had a third one. And I thought that one was okay. I thought it was
1707440	1711040	better than their suggestion, but I didn't think it was great. And, you know, they gave me a couple
1711040	1715280	of days, you know, they fed me coffee, you know, gave me a meeting room, all the rest of it. But
1715280	1720640	my favorite thing is one, one of the guys came in one day, you know, the first or second day,
1720640	1725040	and he came in and he saw I had an idea on my screen. I had code, there were curly brackets
1725040	1728400	happening. I said, Oh, we didn't expect you to cut it. And it's just, I kind of looked at it.
1728400	1730880	It was just like, well, how do you think I was going to do this sit here?
1733680	1738080	You know, and come up with the pure design, you know, I have designed it.
1739200	1746400	I have the architecture. Here is the solution. And it's just like, no, I'm trying each one of
1746400	1750960	these out. I want to see what it feels like in code. And also, I'm going to do some basic,
1750960	1755920	basic performance analysis, not too big, just to get a kind of order of magnitude feel for the
1755920	1762080	stuff. And I wrote it up. And the funny thing is, I wrote it up. And it's only in hindsight that
1762080	1767520	I realized I'd written it up like an experimental report. Here's the situation. Here's what we've
1767520	1771600	got. Here's the various proposals. Here's how we've run it. Here's the results and recommendations
1771600	1777360	for future work. But what I found is that I was right and I was wrong. I was right. Their approach
1777360	1781840	wouldn't meet their requirements. I was also right that my preferred approach would meet their
1781840	1787760	requirements. But I was wrong in that my kind of like third throwaway option, that was outstanding.
1787760	1792960	It was way ahead of me. You know, and I would not have known that by meditating upon it. That had
1792960	1799360	to be made real. It had to be brought into the world. And to actually, you also have to kind of
1799360	1803600	mess about with it. In other words, the very active, and you mentioned kind of like
1804320	1808960	solving mathematical problems for fun. And that's one of those interesting things is that I'm guilty
1808960	1816560	of having done similar things in the past. And it's kind of fun. But the thing is, until you've
1816560	1821520	done it, you don't know how you're going to do it. You've got some ideas, and you're going to crack
1821520	1826800	away at it. And in that sense, there is a sort of a creativity. You know, mathematics is not
1826800	1830720	necessarily empirical, but it is certainly creative. I'm going to try this. And what about
1830720	1836960	this one? What about this? And you've got that. And software just pushes it a little bit further
1836960	1840960	to bring it into the world and say, Well, yeah, but how does that work in the world as opposed to
1840960	1847440	this abstract space? And that is the really important. And that idea, I think it's a really
1847440	1852080	interesting one, because what we're doing is we're bringing together the idea of problem solving and
1852080	1858400	creativity. But with something that somebody else is going to experience, and they're going to work
1858400	1862640	with it, that somebody else is either going to be another developer experiencing the code,
1862640	1868240	or it's going to be an end user experiencing what is this system like. And so there's a kind of a
1868240	1873040	feedback, you don't necessarily get that quite the same from something that is mathematical.
1874880	1878560	There's a kind of a sense there of, is this appropriate for the world that we want, as opposed
1878560	1885200	to, you know, yeah, this is this is fine. It's a nice idea. But it's a case of like, what is its
1885200	1889360	context? You know, I can give you a picture of a house. And I could ask you, is this a good house?
1889360	1892880	And, and you could say, Yeah, that looks good. And then I say, Well, here's the hill that I got to
1892880	1900400	put it on. You said, Well, you didn't say that. The context absolutely matters. And I think that
1900400	1906560	sometimes we kind of, there's this kind of sort of maths envy that sometimes takes over people.
1906560	1910880	And sometimes there's that idealism, because software does, you know, as I said, there's
1910880	1915280	these two different spaces, that the sloppy human one that is filled with economics and
1916560	1920560	ill form thoughts, and the fact that the realization that no matter what we do with any
1920560	1923520	development process, people always talk about prioritizing requirements, stuff like that.
1924400	1927520	Humans don't walk around with a list of priorities that we don't actually that's
1927520	1930880	that's not a thing that happens in the brain. We don't have lists like that.
1932560	1940480	And so my wife, I have very organized, but I'm going to say that when people,
1940560	1945280	but that's a thinking tool, that a list becomes a thinking tool. Yes, when you provoke a human,
1945280	1950800	just randomly, they don't have a, they have to create a list. And it's going to be drawn from
1950800	1958160	whatever is available. It's an availability bias there, whatever is available at that particular
1958160	1964000	point in time. And unless they've already really thought through, I'm going to use lists like
1964000	1967840	this, unless they've actually structured that in there, then that's not the naturally the way
1967840	1971920	they think. Most people don't sit there thinking like, we want a product, and I'm going to think in
1971920	1975280	terms of these requirements. No, you're probably thinking in terms of other things that are your
1975280	1981280	skill space. And so when we provoke humans into, oh, I need a formal structure, give me a priority
1981280	1985680	list. That's not how they actually think, but they can learn to move towards it. But that doesn't
1985680	1990880	mean they're thinking genuinely like that. And then we have this associative mess, which is also
1990880	1995360	where all the creativity comes from. And then we have this kind of hard edge stuff, which is very
1995360	1998880	uncompromising. You know, there's no negotiation with the compiler. It's not a matter of opinion
1998880	2003680	whether or not this works or not. And then we're trying to do all of this. So we've got all these
2003680	2009600	different strands of creativity yet bounded by a particular formalism. And so it's kind of like
2009600	2013600	you need lots of different points of view. And so although ultimately, I believe that it is all
2013600	2017920	underpinned by a perspective of engineering. And I think with software engineering, it's not,
2018880	2028560	it's, I put it, I did a very long time ago at the GoTo conference. It was nearly 20 years ago,
2028560	2033120	and it was an end note. And it was, oh, no, it was the Java conference at that time. I hadn't
2033120	2038080	called themselves GoTo yet. And it was entitled Beyond Metaphore, where I looked at a bunch of
2038080	2044960	metaphors that we use in software development. And the whole value of them, I sort of said,
2044960	2048880	yeah, it gives you different points of view. But I said, one of them is actually what we do is
2048880	2053520	engineering, but it's not engineering that has to worry mostly about physics and logistics. We
2053520	2057440	don't really worry about logistics. It turns out that what happened? What does engineering look
2057440	2061680	like when you take all of that away? You're still making trade-offs and you're still doing a whole
2061680	2067760	load of things. It's just that you don't have to worry about the bridge materials. You don't have
2067760	2072400	to worry about, you know, all the materials, you don't have to worry about it the same way.
2072480	2076320	There's a whole load of other things that just disappear, but that doesn't stop it from being
2077600	2083760	a discipline that is learning-based, that is in some sense pragmatic, but is also very trade-offs
2083760	2088800	driven. That's a really, really important part. You know, mathematically, we know
2088800	2092400	when people talk about maths, the trade-offs are not quite there in the same way. When somebody
2092400	2096560	comes up with a proof, and they can't quite prove it, it's like, well, you know, close enough.
2097520	2105840	No, that does not pass the mathematical test. It's like the Fermat's Last Theorem,
2105840	2109280	which is kind of fresh in my mind because I interviewed Simon Singh a few months ago
2110320	2113920	on some of his things, and he wrote a wonderful book on Fermat's Last Theorem, the history
2114640	2121360	of that, and Andrew Wiles's proof. Everybody kind of suspected, no, an engineer would have said,
2121360	2125520	yeah, you know what, Fermat's right. It's close enough. We can't find anything that's good enough.
2125520	2131760	We can't find an N for, you know, that there is other than Pythagoras, you know, other than A
2131760	2136880	squared plus B squared equals C squared for A, B, and C being integers. You know,
2136880	2141040	you're not going to find any other powers. You know, there is no N that is going to fit that.
2141040	2144640	An engineer would have given up a long time ago. They would have moved on to the next problem,
2144640	2147200	because they said, you know, actually, we've done a plausibility analysis, and really,
2147200	2151840	it doesn't look like there's anything there. And given the time and effort, this is good enough.
2152560	2157680	And that's, in other words, there's a kind of a, there's a stopping point and a trade-off discussion
2157680	2164640	that happens there. Glenn Vanderberg did a great talk about software engineering a few years ago,
2164640	2168800	and he says engineering, in other disciplines, engineering is just the stuff that works.
2169440	2176640	And that's it. It's that mix between adopting a scientific style of rational thinking to solve
2176640	2182160	the problems, where that's practical. But it doesn't have to be definitive. There's also this
2182160	2190080	empirical little add-on that, you know, you know, yeah, that's good enough. You know, it's, and that
2190080	2197120	seems important to me as part, you know, as part of the discipline is to not expect kind of quantum
2197120	2202800	physics levels of precision in engineering, you know, in engineering, unless you're building
2202800	2207120	something that's using quantum physics, you know, you don't expect, you don't do that if you're
2207120	2213440	built in a car, you know, you're more pragmatic than that. And I think, I think that's one of the,
2214000	2220080	it's interesting that the way that you kind of couch that in talking about your talk is,
2221680	2228480	is that it's engineering without those kind of the logistics. I talk about it in terms of,
2228480	2234480	I think our mistake is assuming that engineering, because it's so popular in the real world,
2234480	2239600	is production engineering that we're talking about. There are synonym and they're not.
2239600	2243760	There's also design engineering, which I think is much, much closer to what it is that we do.
2243760	2248720	We're much less interested in those, the logistics of production, because production's free for us.
2249360	2253760	Yes, yes. Yeah, I think that's a, I think that is a really important distinction because it's,
2253760	2258160	it's one of those things when you zoom in, and I think it's, it's the, as you start zooming in,
2258160	2264800	you start realizing distinctions that are not necessarily, and that's, and I think that's,
2264800	2269280	that's both the strength and weakness of any, of any word when we throw a word out there to say,
2269280	2275440	this is like this, this is this. We probably have a fairly clear idea in our heads, based on
2275440	2279680	whatever our experience is, but we've got no guarantee that the other person, the receiver,
2279680	2284000	has the same mental model. I mean, it's, and that I think is, is a really,
2284880	2288720	a really important one. It's sometimes when, when you kind of like push the edges of those
2288720	2292080	definitions. So I think for me, one of the really interesting ones, actually funny enough,
2292640	2297360	and I wonder whether, and this is tied, I know this is just like a, you know, I can't, I can't
2297360	2303920	tell you, but basically the late 90s, I read Two Engineers Human by Henry Piotroski.
2304720	2310560	Wonderful book. Now he's a civil engineer and historian, and really wonderful book, but,
2310560	2317120	but the subtitle is The Role of Failure, a successful engineer. And it's that idea of
2317120	2321120	understanding things through failure, which I wonder if that ties into me, my fascination
2321120	2325600	with taking pictures and how other people send me pictures of failure, but that idea that actually
2325600	2334080	we can learn a lot by nudging a system to, nudging a system beyond what we actually understood,
2334080	2338080	nudging it beyond our preconceptions, revealing our own assumptions. It's just like, ah,
2338640	2342960	and, and, and, and it's occasionally doing that on purpose. But one of the things I'm, I'm, I'm
2342960	2350480	currently obsessed watching SpaceX build their Starships in, in, in Texas. And, and I've been
2350480	2356480	following it for a, for a while now, a little while ago, they decided that they, they made
2356480	2360880	an unusual decision of building their, their, their Spaceships out of stainless steel rather
2360880	2364480	than aluminium, which is what Spaceships were. Originally they thought they were going to do
2364480	2368400	carbon fiber. Then they showed, they looked at the alternatives. They came up with stainless steel
2368400	2373280	because it got a better temperature range and for strength to weight ratio and all that kind of
2373280	2378400	stuff. But at one point they'd built these things. They'd, they'd flown some of them.
2378880	2383360	They decided they were going to move from four millimetre stainless steel to three millimetre
2383360	2391040	stainless steel. Same stuff, same, same type of steel, but just a thickness change. You'd think
2391040	2396720	that'd be the kind of thing that you could just do your slide roll in the olden days, but running
2396720	2401360	through, running through a computer and, and understand. But no, they built, they built the
2401360	2406880	system and then they, they, they pressure tested it to destruction to see how their welds held up,
2406880	2413520	how their designs stood up under that real and, you know, empirical load in, you know, life-like
2413520	2419280	circumstances. See what happens at the point when it screws up. And, you know, that, that's what real
2419280	2423920	world engineering looks like. It seems, seems to me. But there's that idea of like, you're going to,
2423920	2429040	we're going to do this and try this thing out and then see what happens. And there's a, for me,
2429040	2433840	that, that's this idea that time is a really important ingredient to what we do, which I think
2433920	2441600	is really missing from a lot of, a lot of formalisms of what is software, that it's the
2441600	2446640	time full aspect. It's not the timeless aspect, but the time full aspect. And I was, honestly,
2446640	2450240	I couldn't tell you the answer to this until I built it and we've seen it for a bit. I know it's
2450240	2456640	not quite right, but it's plausibly in the right space. And, but I don't know what my assumptions
2456640	2460880	are, you know, and as by definition, you don't know what your assumptions are. Because, and,
2460880	2464720	you know, I always like to point out that assumptions are really weird pieces of knowledge.
2465360	2470320	They are, they are only ever discovered, they are normally only discovered in contradiction.
2470880	2474480	You know, somebody says something, you go, Oh, but I had assumed that at that moment,
2474480	2478080	yeah, you discover you had an assumption, you've had it for a long time. But if anybody had asked
2478080	2482640	you prior to that, what are your assumptions, you just said, I have none. Only when it is
2482640	2489200	contradicted, you go, Oh, that's an assumption. So this is very curious from an epistemological
2489280	2494800	point of view. This is really weird kind of thing. Yeah. And it's, it's the fact that you know, if
2494800	2499840	you know, you know, it's, you know, it's kind of Lego bricks, Lego bricks in the dark, you know,
2499840	2505120	there is a dark room, I know there are Lego bricks on the floor. The problem is, although I know that
2505120	2508960	I have assumptions, although I know there are Lego bricks, I can't tell you where they are until
2508960	2512800	I've stepped on them. I have assumptions, but until, but I'm not going to do that by just standing
2512800	2516560	at the door, I can, I have to walk into the room, I have to tread through, tread through, there's
2516560	2519600	one, there's another one, there's another one. You know, it's one of those things, you have
2519600	2524000	to be deliberate about this, you've got to put that stuff out there. And of course, prior knowledge
2524000	2529760	can, can give you a real kind of a real leg up, that's the standing on shoulders of giants, that's
2529760	2535760	the cumulative experience. Now, why, why is it that we are recreating the errors that previous
2535760	2541280	projects have done? Yeah, we got, we got all this experience. And it's, it's, we, we see this
2541360	2550560	repeatedly at the level of individuals, companies, and discipline as a whole. It's a case of
2552160	2556560	one of those interesting things is like, yeah, we all make mistakes. That's absolutely fine. We,
2556560	2561120	we, we are always operating within complete knowledge by definition. We're operating within
2561120	2567040	complete knowledge. Software, as you said, production is free. We've got that was a solved
2567040	2570960	problem in the 1950s. We basically solved the elements of that, and we've just been getting
2570960	2579040	better at it ever since. But that whole idea of that leaves us with the hard problem of,
2579040	2582560	and what is it we're trying to build and why? And how do we, how do we do that? Yes. Which
2582560	2586880	turns out to be surprisingly challenging, but it's by definition, open-ended, because we're
2586880	2592720	not producing identical artifacts. I've got, I don't know how many of these pens lying around
2592800	2598720	my office. And they are all equivalent to one another. They are all, except for the in-content,
2598720	2603520	substitutable for one another. They are identical. That's because they have a production. Yeah,
2603520	2609360	they have a production process that is designed to eliminate variation. Yeah, we, we've done that
2609360	2614000	far. Software is never like that. Yes. Yeah. The software challenge is that if somebody comes
2614000	2618800	along and says, I want something that, I want that system over there running over here,
2618800	2626960	well, that's a solved problem. If I see one of my sons, if they show me an app on the phone,
2627520	2631040	I don't have to say, oh, I need to build that. It's just like, I'm going to go to the store
2631040	2635200	and get it for myself. It's downloadable. If somebody shows me a piece of code and say, oh,
2635200	2641040	that's really good. We now need to write that code over here. No. Yeah. It's just a case of,
2641040	2646160	we've solved all of these issues, but we're left with that, we're left with the challenging issue,
2646160	2650880	which is not the production of the elimination variation, but the production of variation.
2650880	2655840	That's our job. When somebody says, I want this system, but I want it slightly different.
2655840	2659440	I want to, you know, I want that thing our competitor has done. Well, that's different
2659440	2664800	because we don't have their code. That's for us. This is new. It's new to us. I want the old version.
2664800	2668720	I want a new version of the system. And so whenever anybody asks for a feature extension,
2668720	2671760	they're not just asking for a feature extension. They're actually asking for a new system.
2671840	2676240	It's the old system plus the new behavior. That's a new system by definition.
2676880	2684000	And that's one of the key facets of doing a good job is to be able to make that move
2684720	2691680	from the previous version to the new version easy. Yes. I am increasingly of the mind that
2691680	2697520	if you can't change your software, then the software is low quality. That is the practical,
2697520	2702880	pragmatic realization of quality in your software. I don't care about anything else.
2702880	2705520	You know, I don't care what language it's in. I don't care what, you know,
2705520	2712400	if I can change it easily and safely, then it's good quality. Yeah. And and pretty much,
2712400	2715680	and there was, and again, there were some of these sort of deep tools that, you know,
2715680	2720560	things like modularity, cohesion, separation of concerns, encapsulation, abstraction,
2720560	2729040	those sorts of tools that allow us the freedom to make those kinds of moves when we realize,
2729040	2732720	oh, shit, we got it wrong. Yeah. The freedom to make the change.
2733360	2739200	And I think that's really important because I think for me, one of those insights or,
2739200	2742560	you know, an emerging wave of insights over the years has come from this idea,
2742560	2745520	okay, we're always operating with incomplete knowledge. So that means that whatever I'm
2745520	2751520	building is, is in some sense wrong, although I think wrong is sometimes there's too much,
2752400	2755600	there's too much attached to that word. Your best guess so far.
2756160	2759680	That's my best, yeah, based on what I knew. It's, you know, we did our best job.
2759680	2762400	This is what we've got. But now we've learned something from it, either because the world
2762400	2768800	told us, or because we learned as a result, our own awareness of this. But what's interesting
2768800	2775360	is you can derive a lot of the ideas that we value, modularity, loose coupling and all the rest of it,
2775760	2778880	from an understanding of like, well, how would you build something if you didn't know everything?
2779440	2783440	Yes. Yes. Here's the thing I'm not sure about. Here's the thing I'm very sure about. You know,
2783440	2786800	this thing I'm not sure about, I'm going to really ram it in there and couple tightly to it.
2786800	2791920	No, you were loosely coupled to it because this is probably going to change. Yeah, exactly. You
2791920	2796000	know, I'm going to isolate myself from that. This is, I'm not totally sure about it. I've kind
2796000	2801280	of got an idea, but I want to put a little bit of distance between this and this. And that distance
2802080	2806480	is our dependencies, that distance is our interfaces, that distance is, the idea is that
2806480	2810560	all of this falls out naturally when you start saying, well, you can actually, and this is,
2810560	2816400	I think, is fascinating because it runs along kind of an alternative axis. Sometimes they
2816400	2821120	arrive at the same conclusion, but sometimes they don't, to the traditional language of abstraction
2821120	2824640	and things like that. How would you modularise? Modularise according to abstraction? Well,
2824640	2830240	there's multiple ways of abstract. We have different paradigms for that. But what is interesting is
2830240	2836240	going, well, how sure are you about this? And it's just like, well, you know, we, oh, I'm pretty
2836240	2839680	sure we've built, we've done something almost identical. It's not identical, but it's almost
2839680	2843280	identical. Well, that gives us maybe high confidence and this worked out well. That's the
2843280	2848000	second bit. People don't even forget that. Doing it, sometimes we get stuck in a rut. You know,
2848000	2851440	it's just like, we did this before and how did that work out for you? Yeah, you know, not very
2851440	2855440	well, but we're going to do it again this way. It's just that, no, no, no, there's no opportunity here.
2856400	2859840	And that's that idea of, you know, you know, it's good to have a few ideas
2860400	2865760	that you can trade off against one another. Yes. But then you've got that other idea of like saying,
2865760	2870160	well, let's, let's go through this in terms of certainty. And I've done this a couple of times
2870160	2873440	with people and they're always kind of slightly freaked out because you kind of come up with a
2873440	2877760	rough kind of like sketch of what you're going to do. And so, well, hang on, but we haven't actually
2877760	2882320	talked about all of the design detail that they normally talk about. It's just like, well, yeah,
2882320	2885600	what we did is we've just drawn a bunch of boxes and lines and things
2886240	2889520	based on your confidence. In other words, when I've asked a question,
2890320	2893920	and you've said, oh, yeah, we're not really sure how we can do that. Right, I've drawn a line.
2893920	2897280	There's a boundary there of knowledge, because we're sure about one side, but we're not sure about
2897280	2900960	the other. I don't care what it is. I don't care what paradigm we're talking. It's clearly something
2900960	2905440	we're not sure about. So maybe we shouldn't hug it too closely, a little bit of, a little bit of
2905440	2910400	looseness. A little bit of a wall would be good. Yeah. And likewise, when somebody says, oh, yeah,
2910400	2913200	we're going to do it this way. And a colleague says, oh, I thought we're going to do it this way.
2913200	2918080	You know what? There's a line there as well, because it's clearly this is not settled. And it may
2918080	2922880	turn out that one of them is right one year and the other one is right the next year. In other
2922880	2928560	words, things may change whether it's performance characteristics or whatever, but favor one and
2928560	2933440	then the other. And again, that's the time for rather than timeless quality. But that idea there
2933440	2938480	that we can get a heads up just by actually almost constructively using our uncertainty
2939040	2944240	as a positive aspect to sort of see, well, how does this work? And then we've got the empirical
2944240	2949600	side of things, which is, okay, here's what kept changing every release. You know, what are the
2949600	2953840	hotspots? What do we keep going back and saying, oh, no, no, this time it'll be right. We'll just
2953840	2960000	add this here. And that kind of, I think one of the first times I ever really noticed that question
2960000	2968720	of stability properly feeding back was a Java system. It was a company that was doing a Java
2968720	2974160	system. And they had the debate about they were having the debate and are not yet resolved it
2976080	2986560	about checked exceptions. And for those tuning in who are not aware of this feature in Java,
2987520	2992720	checked exceptions basically allow, basically allow you to make exceptions part of the
2992720	2998000	signature of a method, sort of checkable aspect of the signature. And it's one of those things
2998000	3003200	that in theory is a good idea. But that actually turns out that in practice, if you don't know
3003200	3009200	exactly what you're doing, in other words, you don't have perfect knowledge, and you're building
3009200	3014960	a large system, they have a really nasty impact because they they introduce an element that is
3016720	3022400	unstable or rather needs to be stable, but is not yet stable. And I was, how does this fail?
3022400	3026320	I don't know yet, because we haven't fully understood this goes right back to where we
3026320	3030560	started. What are the failure modes of this? Yeah, short of saying something trivial, like
3030560	3036000	there is an error. And that's often what these checked exceptions tend towards, which is
3036800	3041760	throws framework error. In other words, actually, that's almost no use to anybody whatsoever.
3041760	3048240	Bad things may happen. Well, we knew that because bad things may happen. You end up either saying
3048240	3052640	nothing at all, or you say it so precisely that unless you've actually had this out in the field
3052640	3056320	for a long time and converged on that, the chances are somebody's going to come up with a new failure
3056320	3061680	mode. And it's just like, Oh, well, so the curious thing is what you've done is that your happy day
3061680	3066400	scenario, what you want from the method, why the reason you called it, you don't call it,
3066400	3069920	I'm not calling this method, except perhaps in a test, I'm not calling this method in order for
3069920	3075440	it to fail. That's not my goal here. I'm calling this because I wanted a result. I'm expecting
3075440	3080720	that it's all going to work out. So therefore, right at the edge of my vision, and edge of my
3080720	3085920	awareness, is all of these failures, all these possible failures, which we've not yet explored.
3085920	3090240	And as time goes by, we get more refined understanding. Oh, this could be distributed. Oh,
3090240	3094640	well, our distributed bit throws different exceptions to the ones that are those. So we now
3094640	3098400	made this thing, which was local. Now it's a set. Oh, okay. So we're going to have to change the
3098400	3103840	signature again. So we've suddenly made something we've caused churn in the in the interface. And
3103840	3108240	this is one of those interesting things that comes out of the kind of the more empirical side
3108240	3114080	of things. It's not that nobody who put that feature in Java did so maliciously or without
3114080	3118960	thought. I certainly, you know, I certainly my understanding at the time, and all everything
3118960	3122560	being out there, no, there's some good thinking, solid thinking that goes right back to the 1970s
3123120	3128160	in exploring all of this. But it's the scale, what happens when you actually create open systems
3128160	3132800	that are large, and with all manner of developers, it suddenly turns out that there's a fundamental
3132800	3137280	problem here. And it's to do with rate of change and stability of knowledge, what we do and don't
3137280	3142400	know. And that was a, that was a revelation. Anyway, for this team, it was a real revelation
3142400	3146240	because they were split down the middle, you know, half or pro, half or anti, and I was just like,
3147200	3150800	I can't come in and just sort of say, you know, it's going to go this way or that way.
3150800	3155120	So actually came up with an empirical approach. And I basically said, you know, don't make anything
3155120	3159760	checked. You know, look at, you know, before you decide to make something checked as it were,
3159760	3166720	and seal it in, look at how it's behaved over the last few iterations, write a test to simulate
3166720	3172080	the failures as well. Oh, well, yeah, not just, yeah, but the failures do all of those. And they
3172080	3176960	were actually quite good, though, but your understanding of the failures. Yeah, how you
3176960	3181040	respond to it. Absolutely. Yeah. And it turns out that some of these kept changing on a frequent
3181120	3186080	basis. And I said, look, that idea is not yet stabilized. That idea is still young, you know,
3186080	3192240	don't nail it in place. And which is my polite way of saying, like, actually, probably, you know,
3192240	3196960	so don't make it checked until you're sure, which is a fancy way of saying, don't make it checked,
3196960	3201200	because the chances are they weren't going to go back and review stuff. But what we had is at least
3201200	3206000	a maturity model. And it's this idea of that it doesn't matter what you think today, you're going
3206080	3212560	to overvalue your confidence. And, and so it's this idea that time will give you the answer. I
3212560	3216960	can't tell you how this is going to evolve. I can't tell you how other, you know, this goes
3216960	3222320	across API's, it's not just about failure loads. Yeah, this is going on. How's it going to be used?
3222320	3226240	What are the things that are frequently going to change? And then go back to your point about
3226240	3231440	what we want to do is align the structures of our software with what are the frequent changes we
3231440	3238240	actually experience, as opposed to, you know, people often pad their design or add complexity,
3238960	3244000	because they're saying, oh, well, maybe this will change. It turns out that the better your
3244000	3249040	imagination, the worse this gets. So if you're an imagine, if you are creative and imaginative
3249040	3253680	developer, you can imagine all kinds of possibilities and the gold plating and the extra hooks and
3253680	3258000	bits and pieces. And so the more imagination, the less imagination you have, the quicker you'll get
3258000	3262960	the job done. The more imagination you have, actually, in that sense, it works against you
3262960	3267040	because you think, well, what about this? What about all of these are possible, but most of them
3267040	3271040	are not likely. And probably what you want to do is see, well, what actually happens with this?
3271680	3277520	And that gets you to ask the more meaningful questions like, well, you know, should we release
3277520	3282320	this API yet? Or should we release it and put a caution on it? It's just like, okay, this is a
3282320	3287520	beta release. No, we're not planning to support this. This is a beta release. This is for you to
3287520	3291920	try. It makes us a little more aware. It makes us look up from the keyboard and go, how are people
3291920	3297680	going to use this? That gets to one of the things that I think is really important is just in software
3297680	3307680	development is always thinking in that broader context of, you know, how do people consume this?
3307680	3313040	Whether it's other developers or whether it's end users, how do people consume it? It's that
3313040	3318320	stuff that you were talking about earlier about the interaction between the relatively rigid
3318320	3324320	forms of software and the relatively fuzzy forms of people. But ultimately always comes down to
3324320	3334080	that, whether it's an API or some complex system that people interact with. It's so much about
3334640	3340560	being pragmatic and learning that. And it's one of the things that drives me nuts, working with
3340560	3346960	big organisations when they silo up the development process to the extent where you get development
3346960	3352080	teams who have no idea the context in which they're pieces of software use. They have some kind of
3352080	3358160	people giving them requirements in the form of programming by remote control, which they're
3358160	3363840	supposed to be able to churn out these widgets and they don't have any context. And you get to use
3363840	3368640	software that you can tell sometimes just by using the software. Nobody's ever thought about
3368640	3374480	actually using this bloody piece of software. It's so bad. And that idea of usability, it's
3374480	3381760	turtles all the way down. You have the end user, but then also as software developers, we are
3381760	3392240	clients of our own products. We are clients. It's the classic consumer and supplier metaphor
3392240	3397360	for understanding components and interfaces and so on. How is somebody going to consume this?
3397360	3402720	But also there's that contractual idea of like, what am I going to say about how they should
3402720	3407440	use it? Because everything has a boundary, everything has a limit. And it's that idea,
3407440	3411920	because the over-engineering issue, I've seen that where, in fact, again, I can pick on Java,
3412720	3418240	but I've seen it certainly in other cases. So when Java arrived, it basically said,
3418240	3421920	hey, everything is synchronisable so you can make it thread safe. And I remember thinking at the time,
3422000	3430800	that's a really bad idea. That's a terrible idea. That's not how you do this. Because I remember
3430800	3434800	at the time, somebody showed me this C++ and said, oh, this isn't thread safe. And I said,
3434800	3440880	no, it's perfectly thread safe. You can pass one thread through it. That's it. If you do anything
3440880	3444640	else on your head, be it. But I've just told you the circumstances under which this will work.
3444640	3450240	I have given you a context under which this will work. And that's not me being picky. It's actually
3450240	3454240	a genuine answer. Because otherwise, people do go around and they start goal-plating everything.
3454240	3459280	And they do so very badly. And it's just like, no, I don't actually... The question is, this is
3459280	3463440	thread safe. Oh, yeah, but you can't share it between threads. No, I didn't say you could. It's
3463440	3469360	perfectly thread safe. I can run it in one thread on its own. And that is its safety level. Whereas
3469360	3472880	there are some code that has a safety level of zero. In other words, this is thread safe if you
3472880	3479600	pass zero threads through it. It's buggy. I can give you a real-world example of that,
3479600	3483600	the danger of synchronization blocks in Java. Martin Thompson, my friend,
3484640	3490800	years ago worked on... At the time, we thought it was the first ever internet bank. So he was
3490800	3494720	called in to consult on this because they had a serious performance problem with their Java
3494720	3501280	implementations. It was one of the early big Java implementations in the sort of mid to late 90s.
3502400	3508640	And he went in, and several people had been to look at that. And it turned out to cut a
3508640	3514160	long story short. All of the tests ran, and it all looked fine. They put it to production,
3514160	3519440	and the performance absolutely tanked. It turned out somebody put a synchronization
3519440	3526080	block around some piece of code in the critical path. So this internet bank could support one
3526080	3535200	concurrent user, and everybody else queued up. And that's the thing is that for people
3535840	3539040	oh, yeah, but this needs to be thread safe. Well, what do you mean by that term? Yeah.
3539040	3542640	And it's like, why are you doing it? There was, again, the context. So it's a case of like,
3542640	3546800	not everything wants to be shared between threads. And there are other ways. And everybody was a lot
3546800	3552400	happy in the 90s. And you finally got... It's one of the reasons I keep certain old books around
3552400	3561200	is that you can kind of see the shifts in style and approach. But I also remember with the client,
3561200	3564960	this was a C++ system that we went through and looked at their problem. And they just
3565520	3569120	it wasn't they weren't highlighting a performance problem. But I remember looking through,
3569120	3575280	they've got this huge stuff in memory, lots of data, lots of rows of data memory. And there's
3575280	3580960	30,000 locks. And I'm sitting there going like, I'm pretty sure this is all the ways that you could
3580960	3585680	do this. This is probably not the right way. And it was one of those kind of like, take a step back
3585680	3591840	and look at it and go, well, actually, what you've got, you've done it as a kind of a data
3591840	3596320	centered problem with lots of threads operating on the data. And I said, but if you understand
3596320	3600080	what the threads do, I said, they actually follow a life cycle. And that life cycle,
3601200	3606080	we could do that as a data flow. In other words, it worked out basically, it was a data flow. We
3606080	3610960	basically, you know, yeah, you don't need anywhere near as many threads, you're stealing from yourself,
3610960	3614720	it turns out. And with a lot of this, and it turns out, if you do it as a pipeline,
3615360	3619520	then we ended up with only needing six locks. And that was in the bits that connected.
3620240	3625760	That's in the pipes. And in other words, the point is the data, but they said, but the data
3625760	3630160	itself is not thread safe. And I said, yes, it is because it's environment guarantees that it's
3630160	3636800	thread safe. That data will only ever be accessed by zero or one threads at any one particular
3636800	3640880	point in time. And that's the game. And when we start looking at this, and again, this is this
3640880	3646400	engineering to context idea, is when we talk about when we talk about car safety and road
3646400	3650560	safety and all the rest of it, we understand that there are conventions, rules of the road,
3650560	3656400	and contexts in which we evaluate that. And the outside of that, we make no, there's no guarantee.
3656400	3662000	And that's, again, for my own, for me, that light bulb moment I had when reading
3663120	3667200	in the early days of patents, actually reading outside the kind of the software space going,
3667200	3673280	ah, right, this is idea of context. Where does this idea apply? Beyond which we make no guarantees.
3673280	3679760	And that doesn't mean that it's a bad solution. It just means that it is no longer appropriate or,
3679760	3683440	you know, outside that context. It's a perfectly fine solution for the thing that it was intended
3683440	3689760	for. And that, I think, rubs up against a different trend that sometimes we see
3690640	3695440	developers, architects, and so on, is overgeneralization. The idea that everything must be
3695440	3704480	general. I think that one of the traps of our disciplines, that it seems to me inherent in
3704480	3713760	the nature of software, is that we are often inches away from some quite deeply complicated
3713760	3718800	problems. Whatever the level of abstraction that we're working at almost, as soon as you have,
3718800	3724640	it seems to me, fundamental, that as soon as you have two copies of information
3724640	3731840	in separate places that are changing independently, you've got a world-class, first-class,
3731840	3736320	quantum physics level problem. You know, this is hard stuff. However, you know, whatever the
3736320	3741600	nature of the information, however is that you deal with it, working on high-performance systems,
3741600	3749200	along with Martin building exchanges and trading systems and stuff. You know, we measured the costs
3749200	3757120	of concurrency, locks, comparing swap operations in processes and all those kinds of things to
3757120	3763440	try and optimize the performance of our systems. And one of the things that I've observed is that
3763440	3768800	the more that people know about building concurrent systems, the more their advice is,
3768800	3778400	don't do it unless you can possibly avoid it. This is incredibly difficult stuff. So things
3778400	3782640	like adding synchronization blocks and saying everybody can now in Java can write threads or
3782640	3793680	having thousands of locks in your C++ program are all, seems to me, symptoms of not realizing
3793680	3799200	that this is a point to stop and think hard because this requires hard thinking. This is a
3799200	3805840	difficult part. It seems to me that concurrency and coupling are the kind of the really hard parts
3805920	3813840	of our discipline. Yeah, I think so. Because again, coupling is, and what's interesting,
3813840	3817040	it's interesting you draw those two together because I think the interesting thing about
3817040	3823360	coupling is that it's, concurrency is hard for us to reason about and conceptualize.
3825440	3831120	Coupling suffers a different problem. But interesting, but both of both, which I find
3831120	3836160	fascinating, both of them manifest themselves physically in terms of concurrency is about
3836160	3840720	structuring things in time. But if somebody says, well, how tightly coupled is this code base,
3840720	3847600	I'll tell you what, let me do a build. In other words, you can actually measure the energy of
3847600	3854400	a build. And it's one of those things that I remember turning up at a particular,
3855200	3861520	it was an engineering project, electricity company, multiple companies were subcontracting.
3861520	3868800	It was a political nightmare. It was just pure Conway all the way through. But in the failure
3868800	3875520	mode. And it was a political nightmare. And all kinds of fascinating things. But one of the most
3875520	3882000	interesting things was, as a development team, the team that I was working with, what we were
3882000	3886800	working on was very much back end stuff. It was much more towards the hardware, it was the real-time
3886800	3890960	stuff. But it was kind of like we felt like we came out of our cave to go and speak to these
3890960	3897600	other people. It's just, oh my goodness, this is absolute enterprise chaos. And then what was
3897600	3900880	funny is that because we were building for multiple environments, we were building for
3901600	3908160	32 and 64 bit environments, we were building for slow environments, as well as environments where
3908240	3912400	we had high-powered CPUs and as we had a framework supposed to work everywhere. But the embedded
3912400	3917360	environment, oh my goodness, the builds on that were so incredibly slow that we really, we cared
3917360	3921760	about dependencies at such a level, so that we had fast builds, which meant when we ran out on a
3921760	3926400	64 bit platform, it was practically instantaneous. It was a beautiful side effect. But then we
3926400	3929600	encountered all these other people who were just doing all kinds of stuff with their code. And this
3929600	3935200	was like, I'm going to call it C plus most of what they were writing, because it was clearly
3935200	3941280	using a C plus plus compiler, but I don't think it got much beyond C. But the way they managed
3941280	3945760	their dependencies or didn't, everything depended on everything else. And the build times were
3945760	3950960	staggering and shocking. We ended up building an isolation layer between our company and the rest
3951680	3957520	as a result, because it's just like we got so used to fast build times on these platforms. And
3957520	3962240	it's just that idea of like, yeah, I can, you know, how good is your coupling? I can either measure
3962240	3965920	it in joules or I can actually time it. And you see, you know, it's kind of like, you know,
3965920	3971680	our builds take a lot less time than your builds, because we've got really, we've stripped it right
3971680	3976320	down. What is essential? So there's a physical aspect there. But it's not, you know, and again,
3976320	3980480	concurrency is this physical one, but concurrency would find difficult to reason about because
3980480	3984160	having so many things in motion is not a, it's not a strength of human beings.
3984720	3989920	But coupling is, is more a sense of scale is once we've, you know, it's that idea of like,
3989920	3994000	there's so a large system is like really understanding what a tangle looks like,
3994000	3999040	really understanding that this dependency means that, and they are both limits, we are limited
3999040	4003040	by what goes on up here, but in slightly different ways with those two. But I think you're right,
4003040	4008320	that they are fundamental. They are, they remind us, they remind us of some of the physics that
4008320	4014880	we do encounter in the universe. And coupling certainly entropy in the build. But concurrency
4014880	4021040	is, is that point where your idealization lands in the real world. And sometimes it reveals
4021040	4026160	assumptions. I've certainly had that with one client there. I remember the one, one client,
4026160	4030640	we did this kind of surgery style thing, you know, I had a couple of days there, I ran some
4030640	4034960	training, then I had a couple of days, and people would book a morning or an afternoon and kind of,
4034960	4040880	I'd go with the tea. And I had one, one team say, Oh, well, yeah, an hour of your time this morning
4040880	4043760	would be great. I said, well, no, you can have the full three hours. They said, no, no, we won't
4043760	4048480	need that. They walked in. And I remember asking a particular question. I said, you know, looking
4048480	4054720	at the code, they were going through. And I said, Oh, so how many threads run through this piece of
4054720	4058880	code? Because I was aware they were using threading. How many threads run through this piece of code?
4060000	4065040	And there are a number of correct answers to this. Zero is a valid answer, which means this code is
4065040	4071840	dead. One is also a valid answer. And many is also a valid answer. I didn't get that. What I got is
4071920	4077520	usually one. And I said, That's interesting. What do you mean by usually one? Why would you not say
4077520	4084000	that's many? As far as I can say, that's many. Well, what we have is we have a single threaded,
4084000	4088640	except, you know, this is single threaded code. Except occasionally, another thread will just
4088640	4097200	sneak into this bit here. Threads don't sneak. And they had this mental model of threading that
4097200	4101280	was not actually how threading works. They had kind of thought that threading respected the
4101280	4106880	natural boundaries of the language and statements and blocks and things like that. And they had,
4106880	4111120	and they said, Well, it only happens occasionally. I said, Well, you know, you only need to fail
4111120	4114320	occasionally. You know, there's, I said, there's a race condition waiting to happen here, because
4114320	4117840	you see you load this and then you validate this here. What if something else sneaks in at this
4117840	4121760	point and you've got an unvalidated, it's just like, and it's kind of like one person looks at
4121760	4124880	another said, You know, that might explain this intermittent bug we've been having.
4125120	4131680	And they said, What should we do? Should we add locks everywhere? And I said, No, no, no, no.
4131680	4137040	Actually, what you need to do is take, take a step back here. Your, the problem is not to add,
4137040	4141200	but actually to sort of say, Well, why are you doing this? What they were doing was a lazy load.
4141760	4145440	Yeah. And, and, and it's a case of like, why are you doing the lazy load here? And they said,
4145440	4150000	Well, we don't know the reasons are lost to time. But I said, because the problem goes away, if you
4150000	4155280	do an eager load, if you do an eager load before it goes multi threaded, then the data you're looking
4155280	4161840	at is actually immutable. It's reference data. It's the load that is the state change. And I said,
4161840	4167040	let's do, let's do the opposite way rather than add locks. Let's take a step back. I mean, honestly,
4167040	4170160	given enough time, I would have removed all the threads from this application. It was not a
4170160	4174880	threat application. But, but it was a case of, you know, actually take the opposite view.
4175600	4179520	This is a question of time, you're doing the load at the wrong time, you're doing, you should be
4179520	4183520	doing the load before you go multi threaded. And if you do that, then the problem solves itself.
4183520	4188720	But it's that shift in time and perspective. But my favorite bit, again, to do with time was when,
4188720	4192320	when the, when the lead in the room said, you know, we might need more than that one hour,
4192320	4199440	Kevlin now. Because when I said, do you have code like this? Again, it's because it's not,
4200000	4203360	and it's not to criticize because that's the whole point. It goes back to say, I said earlier,
4203360	4207920	we are always operating with incomplete knowledge, and we are built filled with assumptions.
4208160	4211760	Until you've actually run into those, you don't realize what you're missing.
4212720	4216640	And you, and you don't realize the magnitude of either how well you've done something or
4216640	4220560	actually how wrong you've understood something. So, oh, actually, no, I'm using completely
4220560	4224480	the wrong mental model for thinking about this. And that mental model
4226240	4230320	has informed how I've structured the software, you know, the software is kind of like applied
4230320	4235760	thought. And that mental model, it's off. And we, so that's the squishy human bit,
4235760	4239440	that's the learning bit, but it's also the bit we need to be more, we need to sort of say,
4239440	4244320	yeah, we need to have a bigger process that is tolerant of the fact that we are imperfect.
4244880	4248560	And we can't know everything. And that's the whole point. This team had not really interacted
4248560	4254720	with that and had not accommodated that idea at that level. And most teams, I don't think have,
4254720	4258560	I think it's a very difficult thing for us to do. It's almost against the culture and the nature
4258560	4264400	of software development in many companies. I think you're absolutely right. And to give me,
4264400	4269920	bringing it back around to my stuff. But I think that's one of the things that
4270880	4275440	treating this more like an engineering discipline ought to be able to give us.
4275440	4281680	It's just those disciplines of just being able to just recognizing that we don't know the answers
4281680	4286960	when we're starting out, recognizing that we're probably not going to be right. Therefore,
4286960	4291680	working more experimentally, therefore, working to control, manage the complexity of the systems
4291680	4295920	that we build and to measure things and to try stuff out. And all of those sorts of things,
4296960	4303680	test-driven development is certainly part of that for me deeply. But I think that mindset
4304400	4309680	is so important. One of the other kind of deep properties, it seems to me of software,
4310240	4317040	is that unlike lots of other things, it's actually very easy to start. You can learn to
4317040	4322960	write your first simple lines of code in a few minutes. If you've done a little bit of algebra,
4322960	4331440	at least, it's trivial to just do your first easy, trivial bits of code. But it's deceptive because
4333040	4336960	you don't go very far before you get into some of these more complicated things that we've been
4336960	4344080	talking about. And as soon as you start thinking about things like concurrency, that's really hard
4344160	4350560	for the best people in the world. It's one of those things about Martin Thompson. They're world
4350560	4355920	class experts at some of these stuff. But they're still, they think really hard and worry about
4357600	4362160	shared data at any point and all these kinds of things. So to be able to manage this sort of
4362160	4368000	stuff, it's an interest. I think that's one of the beauties of it. It's a challenge of it that's
4368000	4373600	delightful. But also, very risky. I've been talking to a few people recently about
4375120	4381200	low code solutions. And I think that my take is that many of those sorts of systems
4381760	4386560	suffer from that kind of failing because they assume that it's the almost, that it's the typing
4386560	4392080	of the code that's the hard part, where it's these broader design concepts and how we organize
4392080	4396800	the information in ways that we can make a mistake and come back to it in future and correct it.
4397680	4404240	Identify the mistake. The identification, the recognition of how things, as you say,
4404240	4409760	is deceptive. Things can get very messy very quickly. And we see that. So I've given a few
4410400	4414080	partly as a result of failure screens. I've given a few talks on software failures and the
4414080	4420480	natures of failures and what contribute to them. But one area of enduring fascination for me is
4420480	4424320	spreadsheets, which I find absolutely fascinating because it takes a good idea and implements it
4424320	4431280	incredibly badly. In the sense of vision, people find grid forms, it's very, very intuitive.
4431280	4436400	There's, you know, I mean, what kid doesn't like square paper, you know, this kind of stuff. It's
4436400	4439840	like, we like laying things out in grids and tables and all the rest of it. This is incredibly
4439840	4443520	intuitive. And it's, it's a very, to be fair, that might just be you and me.
4445760	4449920	Yeah, this might be a conversation. Obviously, anybody else in the comments is free to add in.
4449920	4458160	But, you know, this whole thing is incredibly intuitive at that level. But the problem is
4458160	4465360	there are two very fundamental issues that scupper spreadsheets and make them massively error prone.
4465360	4472720	One is, well, three, let me raise that to three. Okay. One is the fact that you end up with a lot
4472720	4477600	of interdependencies very, very quickly. If you're doing anything that is reasonable.
4478560	4483840	And then the next bit, and they're all invisible. This is the one, and that this is,
4483840	4487280	this is the one thing that as a software developer, you kind of look at spreadsheet and go, well,
4487280	4491680	that's a nice start. But where's the button that I pressed that shows me all the dependencies
4492400	4496720	between everything you've hidden all of the code, you've hidden a bit that actually makes it
4496720	4502080	that shows me the structure and therefore reveals my assumptions. You've actually, and I understand.
4502640	4506160	And there's no real mechanism for me to step back to safety when I screw it up.
4506880	4512000	Yeah, well, yeah. But there's that idea that we've lost the bit. In other words, what we've done is
4512000	4518160	we've presented the veneer and treated that as the whole was no software spreadsheets have a deep
4518160	4523600	structure. But I, you know, honestly, even just using something like even a word document has
4523600	4531360	better structure, structure tools than Excel. In Excel, I can go in and I've got the grid. That's
4531360	4536000	it. I'm done. That is my abstraction. That's the level at which I'm invited to think.
4536160	4540000	The code is fragmented and scattered around the relationships are thrown to the winds.
4540000	4545680	It's a matter of detective work and archaeology to recover them. Whereas a whereas when I work with
4545680	4552000	a document, and this is, you know, this, this is true of many different editors and word processes,
4552000	4555760	I can get a high level structure, I can do an outline structure, I can say show me the dependencies,
4555760	4561120	show me the cross references to this kind of stuff. In other words, it's spreadsheets are
4561120	4565040	absolutely, you know, they are an absolute mess. And I always say this and somebody says,
4565040	4569600	oh, but users find them intuitive. They find them intuitive to use. But they, it's like walking,
4569600	4573600	it's like walking to a minefield. You can walk into a minefield incredibly easily.
4573600	4577360	The problem is we have been depriving and I think this is, you know, actually, I'm going to,
4577360	4581040	I'm going to push this one right back to the profession here. We've been depriving people
4581040	4586880	of the things that we know. Because we know that a spreadsheet is a, it's got a terrible
4586880	4593280	type system. It's astonishingly bad. And if anybody ever throws up the argument of backward
4593280	4600320	compatibility, that is an absolute nonsense. We've actually seen formats for documents change
4600320	4605760	on a five to 10 year cycle. There's no backward compatibility issue here at all with things
4605760	4610880	like Excel. That's a myth. You know, you're looking at a five-year window at most. Explain to me why
4610880	4616320	it is that my, my Excel looks like it was developed 30 years ago, but everything else that I'm using
4616320	4621920	looks like it was developed in at least the last decade. Why, why is Excel failed to take on board
4621920	4626720	all of these other tools that we know to show dependencies? And the third thing to come back
4626720	4632000	to is that people don't realize that there are these issues. So they therefore, they, they, they
4632000	4637280	scale up very, very, very poorly. They, they embed many mistakes. Now, the point here is what
4637280	4639840	the reason I'm riffing on this is because you talked about the low code stuff.
4640720	4645840	Spreadsheets are by far and away the world's most successful low code to low code solution.
4645840	4651440	And, and anybody who hopes to rival that is just kidding themselves. I'm going to say that right
4651440	4655600	now, you know, I'm not predicting the future. It's just like those here are very particular
4655600	4661120	strives. They have embedded themselves in a particular way, you know, in a particular world
4661120	4667040	and they've, and they're very current. They are ubiquitous. But if anybody wants to learn how
4668400	4672160	to do and how not to do, learn from its successes and learn from its failures,
4672160	4676960	and what are the things that it's good at and not good at, and then also go back through the
4676960	4682560	history of 4GLs. And what you'll discover is that you, what there's a, there's a, there's a line
4682560	4686880	that you're looking to draw. And you need to understand that it's not universal. There's
4686880	4691120	a line here. You need to work out where it is. It's like, this is the bit that allows people
4691120	4695600	the convenience they want. And then there's this other bit that's incredibly hard. If you're, if
4695600	4698720	you're assuming that they can do, you're going to, you're, they're going to be in for a big and
4698720	4703680	nasty shock. And we're just going to be throwing more stuff over the wall at other people for,
4703680	4708160	oh, we need to customize this all. Oh, this is something that we knocked up. And, you know,
4708160	4712000	but we're having a couple of problems with it. And then kind of suddenly, yes, that it, you know,
4712000	4715840	it's just like, at this point, they suddenly discover that they are, in fact, an Olympic
4715840	4720800	runner, because that's the only way they can get away from it faster. That we are, if we're not
4720800	4724560	doing this one right. So I don't have any grievance with low code. It's just that when people talk
4724560	4730560	about it as a general solution, no, what's value. It's a highly specific solution. That's its value.
4730640	4737760	That's the value. Yeah. A narrow, narrow, narrow constrained focus. Yeah. That's really good. That
4737760	4741760	thing. Yeah. Again, it goes back to this question, this quest for generality that we sometimes have,
4741760	4746400	we over generalize, make things, either we end up over generalizing, make things ridiculously
4746400	4752080	complex for ourselves, or we end up not over generalizing and forever working around taking
4752080	4757680	something that really wasn't. It's, it's, it's, it's that, it's that really, really, you know,
4757680	4761680	shades of gray kind of slippery slope over a snake pit,
4764640	4769600	mixing my metaphors horribly. But, but, but you, you can't, you kind of go from, you know,
4769600	4773600	I'm adding up a column of numbers in my spreadsheet. Cool. That's really nice. It's really good for
4773600	4778480	that to, you know, I've built this thing. And if I change that, it goes and recalculates all of
4778480	4782880	these other things. And there's all this, you know, which is an un-maintainable big ball of mud.
4782880	4788880	And, you know, there's, there's no, there's no easy way to define the line between, between where
4788880	4798800	you step over and it becomes, you know, it's just like you tread carefully, push, push your foot out
4798800	4803040	just in front of you, just to, and I think that that is the, again, that feeds back into this
4803040	4809600	idea that what we're looking for is, is an approach, a philosophical approach, but a practical
4809600	4815360	approach. And, you know, I'm definitely of the school of thought that, I guess, old school
4815360	4819280	philosophy, in the sense that philosophy was intended to be a practical thing to help you
4819280	4822800	understand life. It was not intended to be abstract and disconnected from life. It was
4822800	4828240	intended to be quite the opposite. So for me, this idea of actually what we want from how we
4828240	4832400	think about software, we need, we need to understand is like, yeah, it's a bit experimental.
4833040	4837760	There's, there's, there's things that are unknown. And actually, not only is that okay,
4837760	4844080	but that's actually part of the job. It's not just acceptable. It is the job. It is the job.
4844080	4849440	It is the job. So, so, so I've, I've, I've just become aware of the time we've, the amount of time
4849440	4853440	we were talking about time and now we're aware of it. It's been so, so much fun having the
4853440	4859520	conversation, but let's try and, let's try and run this off. So, so, so if you, if you could,
4860080	4868240	if you could summarize this, what's, what's the advice, what do you think is the advice
4868240	4875600	that we should give people to help walk this, walk this tightrope, explore, you know,
4875600	4879440	walk into the, into your room of Lego with bare feet.
4879440	4882480	Yeah. Well, I guess, I guess the simple one is runaway.
4883440	4891520	That's the only, I think it's really to, to understand that what the challenges that you are,
4892960	4896960	the challenge and the joy. Let's, let's, let's, I think we're all, we're always
4896960	4900160	putting up challenges. I think we all need to accept that sometimes the challenge is the fun bit.
4900880	4905120	You know, it has two, two aspects to it. The challenge and the fun is that you are working
4905120	4909520	with incomplete knowledge. There is a joy to learning something. And there can also be a joy
4909520	4915280	in discovering better solutions, alternative solutions, penny dropping moments where you go,
4915280	4919600	you know what, I've been thinking about this wrong. And, you know, yes, I've over-abstracted.
4919600	4923920	This really is just a string. The abstractions I wanted to do are over here.
4924800	4929120	Those are the points that I love those run. Oh, shit. I was thinking of it wrong. And now I can
4929120	4933360	see a new, new path. That's the thing. And it's the case of like, or I've been devoting my effort
4933360	4937120	to this, but actually the fun is over here. If I reframe the problem, in other words,
4937200	4942880	it's that idea of take a step back. And I think a little bit, a little bit
4944080	4948560	something, I keep reading to do a talk called slow agile. I think I'm probably going to do it at some
4948560	4954160	point. But it's this idea that although we often use the language of fast in connection with many
4954160	4958320	of our practices, I think sometimes there's a different emphasis I might want to give, which is
4960000	4964400	that some of what we're trying to do is to do things sooner, as opposed to faster, which is not
4964480	4969200	quite the same thing. Yes, I'll use the phrase. I think that might what you might be saying is
4969200	4975040	the phrase that I use is small steps. Yeah. And small steps are a way of achieving it.
4976080	4979680	And I was just talking to a group today about refactoring. I was trying to
4980320	4984240	emphasise to them, you know, in terms of all the design practices and so on. I said, there's a
4984240	4991840	difference between running and walking. And there's a very simple idea that running is defined by
4991840	4996320	the fact that at various points, you have zero points of contact with the ground. If you watch
4996320	5001600	somebody running, it's 0101. If you watch somebody walking, it's 1212. There is always at least one
5001600	5008880	point of contact with the ground. And now what does this mean? It means you move from moment to
5008880	5015840	moment more slowly. But you are also moving with more certainty and more sureness and the ability
5015840	5020320	to change your direction. If you try changing your direction when you are running, or when you
5020400	5025520	stumble when you're running, and I have relatively recent personal experience of this, and I can
5025520	5031600	say it hurt an awful lot and I was not able to walk for a few weeks. Whereas had I had that fall
5031600	5035600	when I was walking, I would have just got up and walked off. The point there is that
5036480	5040480	software development is not a race. Although we use the language of fast, the time scales
5040480	5045440	we're thinking of, sometimes it encourages the wrong behaviour, I think. It's again one of those
5045440	5049680	things when what I use a word and somebody else picks up, oh, they're talking about raw speed.
5050000	5054720	We're not trying to optimise for speed of development. What we observe is the speed of
5054720	5059840	development or the speed of deployment. But the thing, it's not the pedal to the metal.
5059840	5065360	You're just going to exhaust all your developers and exhaust their capacity to think creatively.
5065360	5070800	It's the idea that actually what we need to be doing is walking. It is the idea of stability.
5070800	5075680	It's the idea of like, oh, that's not right. Let me just pull back a moment. It's the small steps.
5076480	5081600	Let's roll back and take a different path. Whether that rollback is a version control rollback,
5081600	5086240	whether that rollback is a conceptual rollback, whatever it means is the idea that we have given
5086240	5092960	ourselves the opportunity to pay attention to what we're doing. When you are moving at high
5092960	5096720	speed, you're not paying attention to your surroundings. All of this talk of feedback just
5096720	5103120	disappears in the wind. The whole point is you are sensing your way and that you are adjusting
5103120	5108560	according to that. And it's your feet on the carpet type thing. It's the sensing
5108560	5114640	your way. How are we doing? I originally intended this, but now I see this. Why? Because I can,
5114640	5119440	because I've taken the time to do that. I'm not individually, as a human being, remember it's
5119440	5125520	all about people ultimately, me to appreciate which formal approach I'm going to take, which
5125520	5131280	structure, which choices, which modules I am going to select, or my criteria for modularity,
5131360	5136560	which ones I'm going to do here as opposed to there. That's going to take a deliberation that
5136560	5141520	doesn't happen when you're exhausted and running at speed. It's not a productivity conversation.
5141520	5144960	So I think for me, most of the advice I give people is just like, honestly,
5144960	5156080	go a little bit slower because you'll go faster. That's great. I hadn't thought of it in those
5156080	5161280	words, which is always interesting, and always an interesting thing, but still was reinforcing
5161280	5167280	my prejudices. So good both ways around. He gave me some new things to think about
5168320	5173840	and reinforce my prejudices, which is great. I've really enjoyed the talk today. Thank you
5173840	5181520	so much for taking part. Thank you, Dave. It was a fun exploration. Please do check out
5181520	5190560	Kevlin. Check his Google Unique name. You'll find his stuff, and lots of good books that Kevlin's
5190560	5197040	written as well. So thanks, Kevlin, very much indeed. And I'll let you know when the video is
5197040	5206960	available. Thank you. Thank you very much, Dave. That's brilliant.
