WEBVTT

00:00.000 --> 00:03.200
Hi, my name is Dave Farley and welcome to The Engineering Room.

00:03.200 --> 00:07.760
If you haven't been here before, do hit subscribe and if you enjoy the content today,

00:07.760 --> 00:13.520
hit like as well. Do join in the conversation too and let us know your thoughts and ideas in the

00:13.520 --> 00:18.640
comments below. The Engineering Room is an occasional series and is meant as an addition

00:18.640 --> 00:23.840
to the more usual content on the Continuous Delivery channel. These are longer form conversations

00:23.840 --> 00:29.280
with some influential and thoughtful people from our industry. Today I'm joined by my

00:29.280 --> 00:35.040
friend Kevlin Henney. I first came across Kevlin at a conference in Australia many years ago,

00:35.040 --> 00:40.880
although we're both English. He gave several talks at that conference, including a keynote,

00:40.880 --> 00:47.600
which was funny, unexpected, educational and brilliantly well presented. Over the years,

00:47.600 --> 00:52.960
I've come to expect nothing less than that from Kevlin. That's his norm. As I started talking

00:52.960 --> 00:57.440
more frequently at conferences, our paths crossed more often and we became friends.

00:57.440 --> 01:02.160
Kevlin is an independent software development consultant, trainer, speaker and writer.

01:02.160 --> 01:08.320
The people who work with Kevlin always speak very highly of his services. He's witty, nerdy, sorry,

01:08.320 --> 01:14.560
Kevlin, and smart. He also has a Google unique name. Try it. You'll only get Kevlin.

01:15.280 --> 01:21.840
And rather strangely, among the cognizanty, if you ever see an obvious public software failure,

01:21.840 --> 01:26.640
a screen in an airport showing a command line or an advert in a stall showing the blue screen of

01:26.640 --> 01:33.040
death, it's called a Kevlin Henney. But no doubt we'll get to that. Welcome, Kevlin. Did I miss

01:33.040 --> 01:38.800
anything important? No, thank you very much, Tim. That's the perfect introduction. I'm going to copy

01:38.800 --> 01:46.160
and paste that. Great. Thanks. Well, I've been looking forward to this talk for a little while.

01:46.160 --> 01:53.600
The last time we met was in Copenhagen at a go-to conference. And my wife and family

01:54.560 --> 01:57.520
took the mickey out of me for the rest of the conference, because you and I, every time we

01:57.520 --> 02:04.000
crossed, we spent all of the time talking rapidly in great detail because we hadn't seen each other

02:04.000 --> 02:08.560
for a while. But the funny thing is, the way that coincidences worked out is that

02:09.280 --> 02:14.560
pretty much the moment I arrived in the hotel, you and family were there, and I bumped into

02:14.560 --> 02:20.000
everybody, including your son and daughter-in-law at the airport when I left. It's crossed quite a

02:20.000 --> 02:28.080
lot there. So yeah, plenty to talk about, plenty to catch up on. Cool. So let's start with that

02:28.080 --> 02:32.720
production failure being called a Kevlin Henney. I think I know the answer to this, but tell us how

02:32.720 --> 02:39.680
that happens. Yeah, well, so it's one of the things. I guess if you're in software or there's

02:39.680 --> 02:43.920
something that you really into, you become sensitive to things. You start spotting things.

02:43.920 --> 02:49.920
And I was always fascinated by the fact that, you know, see occasional failures in places,

02:49.920 --> 02:56.400
you occasionally see a cash machine booting up and stuff like that. You kind of notice this stuff,

02:56.400 --> 03:01.360
it makes you ask questions about it. But then we hit the, then we hit the kind of like,

03:02.800 --> 03:08.160
cameras on phones era. And at that point, suddenly, it's like, I'm walking, everywhere I'm walking,

03:08.160 --> 03:12.080
I have a camera. And, you know, the amount of software that we actually have everywhere

03:12.080 --> 03:16.480
is huge. So I'm starting to take pictures of these things. I'm also taking screenshots

03:16.480 --> 03:21.360
whenever something crashes, particularly if it's losing my work, I'll take a screenshot.

03:22.800 --> 03:27.680
Hold on to that because I think it's fascinating because it's kind of like, okay, it's often

03:27.680 --> 03:31.520
frustrating, but it's fascinating. It's just like, okay, I mean, this is my space. I'm in

03:31.520 --> 03:38.240
software that collectively we somehow created this. And I'm fond of noting that we, as in

03:38.240 --> 03:43.920
software development, are the largest creators of kind of gorilla installation art on the planet.

03:43.920 --> 03:48.720
Nobody else comes close, you know? But I used to kind of collect these. And occasionally,

03:48.720 --> 03:52.960
I kind of put them in talks or when running a workshop or training course, I kind of have them

03:52.960 --> 04:00.080
on my screen, just like as a screensaver in the breaks always causes conversation. And I always

04:00.080 --> 04:05.600
pointed out, oh, this is really interesting because in failure, when something fails,

04:05.680 --> 04:08.560
you learn about something, you learn something about how it was constructed.

04:09.360 --> 04:12.720
You know, it's kind of like at that moment, you lose all the encapsulation, you're presented

04:12.720 --> 04:17.520
with something when it works that is beautiful and pristine and pixel perfect, and it offers

04:17.520 --> 04:22.800
some kind of user experience. And maybe you can guess the technology, but most of the time,

04:22.800 --> 04:27.280
you can't. And then it's like you drop something on the floor and it fractures. And it's just like,

04:27.280 --> 04:32.160
oh, look, this bit's made of C sharp, or they're using that as part of their stack, or I'm pretty

04:32.160 --> 04:37.760
sure that's out of support now, or whatever it is, you see it loses its encapsulation, it loses

04:37.760 --> 04:43.200
that kind of like surface, and we see the insides. And if it doesn't tell us directly how it was built,

04:43.200 --> 04:48.080
it kind of invites questions, it makes you go, oh, I wonder what, how did this arise? Did they

04:48.080 --> 04:52.800
forget to put a tri block here? Did they forget, you know, how did this exception escape to the user?

04:54.400 --> 04:57.840
But, you know, I just did that kind of as a point of fun as a point of personal interest

04:57.840 --> 05:02.720
and point of showing people, and then people started sending me these things by email.

05:03.520 --> 05:09.200
And then we hit social media era, people start sharing it more directly. And then it's Twitter,

05:09.200 --> 05:15.760
and people are just like posting it and just adding me, then I start retweeting it. And then

05:15.760 --> 05:19.600
that's how that's where the that's where it acquired its name, and they actually made its way

05:19.600 --> 05:26.320
into urban dictionary, the register and a bunch of other things. So, so yeah, it's just one of

05:26.320 --> 05:31.600
those things. And the incidental side effect is it is one, it's interesting. I find it's still

05:31.600 --> 05:35.760
fascinating. I think there's a kind of a humor to it, as well as a serious point to be made

05:35.760 --> 05:40.480
in all of these things. It also ends up being an accidental service, because sometimes you're

05:40.480 --> 05:46.320
talking about rail services and train stations and things like that. And often people will

05:46.320 --> 05:51.520
at the train company as well, wherever they are in the world. And, you know, you can tell what

05:51.520 --> 05:55.920
the customer service is like, because often they'll go, oh, you know, instantly jump on that,

05:55.920 --> 05:59.760
say which station was this, I'm really sorry this happened, or there'll be just silence. And so you

05:59.760 --> 06:04.320
can kind of tell that you get a sense of the customer experience as well as the failure experience.

06:05.360 --> 06:08.640
That's brilliant. So, so kind of the archaeology of failure.

06:09.680 --> 06:11.280
Yeah, yeah, that's exactly it. Yeah.

06:13.040 --> 06:19.760
That's great. I often think that we kind of we don't, well, I don't think just think I know,

06:20.320 --> 06:26.480
we don't think too much about the failure failure routes so often. There's one of my

06:26.480 --> 06:34.400
favorite quotable bits of research was a usenix survey from a few years ago that looked into

06:34.400 --> 06:41.120
the cause of production failures. And something like 60% of production failures are in the error

06:41.120 --> 06:46.320
handling path. The most common line of code in the event of a production failure is a comment

06:46.320 --> 06:52.720
saying should should do some exception handling here. Yeah, yeah. That's a really interesting

06:52.720 --> 06:58.240
because that one, if it's the if it's the one I'm thinking of that was 2014 paper. But

06:59.360 --> 07:03.520
but there's probably been others. But I think I first came across that somebody did a study

07:04.160 --> 07:08.800
the late 90s early 2000s. I really can't I'm fortunate I can't cite it. I can't remember

07:08.800 --> 07:14.480
who it was. But they did an analysis of failures in the Linux kernel. And they said it's mostly

07:14.480 --> 07:19.680
on the error paths. Yeah, you know, the dark alleyways that just don't get explored and tested

07:19.680 --> 07:23.520
anywhere near as often, you know, happy day works out fine. But these edge cases,

07:24.400 --> 07:31.040
something goes wrong. And then either it was just like this was to do, or somebody had an idea of

07:31.040 --> 07:35.840
like, well, it should be something like this, but it was never really tested. And it kind of got

07:35.840 --> 07:41.760
marginalized in their in their memory. And now, you know, control flows wandering down this dark

07:41.760 --> 07:46.080
path that's been untested to deal with a really bad situation. And the situation gets worse,

07:46.080 --> 07:50.080
you know, it's one of those things. And that that that seems to be a recurring theme that

07:50.880 --> 07:55.920
these edge cases, it's kind of, you know, when you're at the edge case, it's not an edge case

07:55.920 --> 08:01.520
anymore. It's your world. Yeah, yeah. Yeah. It's one of the things one of the things I did some

08:01.520 --> 08:07.600
research for my book into the kind of history of software engineering. And of course, Margaret

08:07.600 --> 08:14.640
Hamilton was a huge, you know, a hero in in in that in that field in the early days of that.

08:14.640 --> 08:19.600
One of the things I loved that she that she went on about was talking about the importance of the

08:19.600 --> 08:23.760
systems that she was working on the flight control systems for for the Apollo missions,

08:24.320 --> 08:31.520
being man rated. And so the reason why she coined the term software engineering was to

08:31.520 --> 08:35.440
because they were spending all of their time worrying about how things could go wrong,

08:35.760 --> 08:40.400
like engineers do, you know, you don't build a bridge and just only worry about happy days,

08:40.400 --> 08:45.040
you worry about when there's a storm or when the load's too heavy or all of those kinds of things

08:45.040 --> 08:50.800
too. And we we need to be thinking the same for building, you know, serious software systems.

08:50.800 --> 08:54.160
Yeah, I think I think a lot of the stories around Margaret Hamilton, absolutely brilliant. I mean,

08:54.160 --> 08:57.440
the fact that, you know, there's one where she brought a daughter into work, you know,

08:58.320 --> 09:02.960
one day and daughter recreated an error or created an error condition just by messing

09:02.960 --> 09:06.880
about with it, put it into a state, you know, it's just like, you know, cats and children.

09:09.120 --> 09:14.320
And, you know, and other cases where, you know, these, you know, the kind of the classic

09:15.520 --> 09:20.240
certain McKismar associated with the fact that at that point, all astronauts would have been

09:20.800 --> 09:25.680
Air Force pilots, and the culture and image that went with that is like, oh, these highly trained

09:25.680 --> 09:31.680
people. And they won't make mistakes like that. And then promptly one of them does. And it's just

09:31.840 --> 09:36.880
they go back to her. It's like, yeah, let's do that. Let's put that failure. Because it doesn't

09:36.880 --> 09:40.800
matter that they're highly trained, the most the operative word in that sentence is people.

09:44.880 --> 09:50.480
High train gets you so far, but you're still ultimately human. And I think that that and one

09:50.480 --> 09:54.880
of the other points that I read that Margaret Hamilton talked about is she was trying to really

09:54.880 --> 10:00.960
get a seat at the table, as it were, because you put it certainly at that era. This whole idea

10:01.040 --> 10:07.920
that software could form a viable, meaningful first class component of a system, as opposed to just

10:07.920 --> 10:15.520
a secondary component was that was completely a foreign concept. And, you know, there were even

10:15.520 --> 10:19.600
astronauts saying, well, we don't think we're going to need software. We don't actually need

10:19.600 --> 10:25.920
software to land on the moon. And, you know, it's to anybody who's either studied the physics of

10:26.000 --> 10:30.960
it or is familiar with any of the modern stuff around this. It's just like, yeah, you can't

10:30.960 --> 10:35.920
just fly by the seat of your pants and that's going to work out. You need this stuff. And so

10:35.920 --> 10:42.400
she wanted their seat at the table. Engineering was the term that she chose. We've got to treat

10:42.400 --> 10:47.520
this in that sense. It's up there with all the others. Because this is not just icing on the

10:47.520 --> 10:52.800
cake. This is not just a glorified slide rule. There's something deeper and more fundamental

10:52.880 --> 10:59.680
here. We're talking about control systems and data that is genuinely life critical. You know,

10:59.680 --> 11:05.360
this is not just a slide rule. This is beyond that. It's the idea of it's not just a calculator,

11:05.360 --> 11:09.280
whereas I think many people thought of this as just extension of the calculator.

11:09.840 --> 11:18.240
Yes. Yeah, absolutely. Brilliant woman and a real pioneer in our field, I think.

11:18.960 --> 11:27.200
Yeah. Yeah, definitely. But I think that's one of the things that I found with because one of

11:27.200 --> 11:34.080
the other things that we had this term, engineering that kind of took off from different points.

11:34.080 --> 11:43.040
And I've seen it misattributed. So I've seen things where people said, oh, the NATO sponsored

11:43.040 --> 11:47.760
1968 software engineering conference was the beginning coined the term. No, no, no, no.

11:47.760 --> 11:54.080
They use the term because it was already around. Margaret Hamilton initiated that. I think I

11:54.080 --> 11:58.960
stumbled across a bit in communications at the ACM that it was used as a term in 1966

11:59.600 --> 12:04.720
in there. And in other words, there's a kind of a lineage. So by the time the conference came around,

12:06.800 --> 12:14.400
this term was currency. And it existed. And that was trying to try and say, well,

12:14.400 --> 12:23.040
what does this look like if it's for software? I know you looked at it for your book and I did

12:23.040 --> 12:29.200
it for, I did a whole load of talks in 2018 because it was 50 years on. So I thought I'd be in a

12:29.200 --> 12:33.760
series to 1968. I thought, you know what, I'm going to go and read, I'm going to actually go and read

12:33.760 --> 12:43.360
end to end the whole proceedings and also look at the 1969 one as well. But do that. And I did

12:43.440 --> 12:47.440
that a couple of years beforehand. And I found it absolutely fascinating because one, it's an

12:47.440 --> 12:54.320
amazing historical document capturing some really interesting insights. But also, there was a real

12:54.320 --> 13:00.800
sense that one of the things is, you know, some of it is incredibly dated, because, you know,

13:00.800 --> 13:06.000
it does date because they're talking about technical constraints and concepts from the 60s.

13:06.000 --> 13:10.160
But at other times, it's just like, oh, yeah, you know, it's not that you agreed on everything,

13:10.160 --> 13:17.520
but all of the ideas that we now debate and push forward were present. They were there,

13:17.520 --> 13:23.600
they were alive. Yes. And problems that those people were facing in building real systems,

13:23.600 --> 13:28.080
even though the computers that they were building them for are all in museums now. You know, it's

13:31.120 --> 13:36.320
one of the things that got me interested in kind of talking about engineering in my book and stuff

13:36.320 --> 13:42.000
was that, you know, I think that we discard some of those really durable ideas too readily,

13:42.000 --> 13:46.320
that there are things at the heart of our profession. I think the most important things

13:46.320 --> 13:52.000
about our profession that are that haven't changed since the 1960s. And as you said,

13:52.000 --> 13:57.440
you know, I had hair standing up on the back of my neck when I was reading stuff by Alan Perlis

13:58.080 --> 14:03.360
describing in language that sounded quite dated in many words, his choice of words sounded like

14:03.360 --> 14:09.920
somebody from the 1960s. But nevertheless, he was expressing ideas that would that still too many

14:09.920 --> 14:14.880
software development teams don't even think about doing to their detriment. Yeah. And

14:17.040 --> 14:23.040
crazy. Yeah. And I think there's a really interesting things in there about, you know,

14:23.040 --> 14:26.960
that a lot was up for discussion, but also sometimes some of the discussions were that

14:26.960 --> 14:31.120
they're talking like old hands, you know, they're talking about 10 years, like it's a really bad

14:31.920 --> 14:35.360
so that's the fascinating thing about doing this talk 50 years later is just like, well,

14:35.360 --> 14:40.880
they thought they were it was old hat when they did 10 years in, we're half a century on how we

14:40.880 --> 14:47.040
do it here, you know, and, you know, there's some really, really interesting things. So from my

14:47.040 --> 14:52.960
perspective, one of the things I'm very interested in is testing. And interestingly, before reading

14:52.960 --> 15:00.080
that, I had kind of presumed that unit testing as a term, I kind of I kind of dated that to the

15:00.080 --> 15:08.480
1970s. I found, you know, I hadn't tried and really pursued it back in time. But 1970s was

15:08.480 --> 15:12.160
what I had in my mind based on what I'd read. And I thought, you know, that would that be

15:12.160 --> 15:16.480
terminology. But you I look at the software engineering, look at software engineering

15:17.280 --> 15:21.520
proceedings. And there it is, the term unit testing is there without qualification or

15:21.520 --> 15:25.840
definition. In other words, it's not presented as here as a new idea. It's presented as, Oh,

15:25.840 --> 15:32.400
okay. I assume everybody knows it. Yeah. And it was really interesting, just looking at certain

15:32.400 --> 15:42.960
ideas like that. As well as some other historical kind of foreshadowings. So a number of years ago,

15:42.960 --> 15:49.440
I was quite heavily involved in the patents community. There are a number of elements in

15:49.440 --> 15:53.520
the patents community that and patents thinking, which I think have been hugely neglected for me,

15:53.520 --> 15:59.040
one of the most the real turn ons with the whole idea of really understanding. This is a pattern.

15:59.040 --> 16:05.760
It is not a it's not a principle. It is not a universal. Here is an idea. And you know what,

16:05.760 --> 16:11.120
sometimes this this works in some cases and not in others. And here's why. And people often miss

16:11.120 --> 16:17.040
that they kind of kind of latched onto the surface as it were, but not really understood the death.

16:17.040 --> 16:22.960
And for me, the huge, the huge influence was the trade offs, understand the trade offs. Here

16:22.960 --> 16:28.560
it's just like, Ah, here we go. Here is here is why this works well here, but doesn't overheard

16:28.560 --> 16:34.880
the context dependence of the idea was absolutely huge. So rather than talking about software from

16:34.880 --> 16:40.160
the perspective of mathematics in which, which is a time, which is timeless and universal and

16:40.160 --> 16:45.200
rest of it, here was something that was hugely dependent on, well, I can't tell you what's right.

16:45.840 --> 16:49.280
You know, somebody says, is this the right way? Or is this wrong? It's just like, well,

16:49.280 --> 16:52.560
you know, it's going to be that it depends. And that's not because I'm being a consultant. It's

16:52.560 --> 16:56.800
because genuinely, there are about three or four different ways of doing this. Yeah, show me the

16:56.800 --> 17:00.400
landscape. You know, you've got to show me the landscape that you're going to you're going to

17:00.400 --> 17:04.880
put this into my answer will be different if you're dealing with a legacy system, perhaps

17:04.880 --> 17:10.640
with a modern system, it'll vary from language to language, depending on certain elements.

17:10.640 --> 17:16.800
But there might be broader ideas that are still stable. But you know, there are, if you say, oh,

17:16.800 --> 17:20.480
this is in a multi-threaded environment, then I might retract my previous answer and go,

17:20.960 --> 17:25.200
actually, we're going to take a different path here. And it's the contextuality and

17:25.200 --> 17:31.440
understanding the trade offs. For me, that was really exciting. Now, we tend to, for a lot of

17:31.440 --> 17:37.840
people, they tend to credit the gang of four, Gamma, Helen, Johnson, Felicides with the pattern

17:37.840 --> 17:42.400
stuff. Now, certainly that initially turned me on. But even before the book was published,

17:42.400 --> 17:47.200
I'd heard about this stuff. But it was this other stuff that was going on inside. This comes from

17:47.200 --> 17:51.360
architecture. This doesn't come from software. This comes from architecture. And Christopher

17:51.360 --> 17:57.520
Alexander kind of originated this idea is this whole idea of he was really big on the idea of

17:57.520 --> 18:00.800
you've got to have an empirical design. In other words, he was trying to move,

18:02.080 --> 18:05.280
he was trying to move building architecture away from fashion.

18:08.000 --> 18:11.680
Which is something I think we get plagued with in software as well. He was trying to say, well,

18:11.680 --> 18:14.720
look, there's an empirical solution to this. Does it work? You know, here are the qualities

18:14.720 --> 18:19.920
that make something work. No, have you defined your problem? Does this solve the problem of

18:19.920 --> 18:24.960
living or whatever context he was looking at? And he was very clear, use the language of empiricism

18:24.960 --> 18:29.440
all the way through. This is not to say there were no artistic qualities to it. But I was always

18:29.440 --> 18:34.240
fascinated. And his writing style, again, it catches the time is 1970. So I started reading

18:34.240 --> 18:38.240
all the Christopher Alexander stuff. And then you eventually hear another book by Christopher

18:38.240 --> 18:44.880
Alexander notes on the synthesis of form, which was published in 1964. And I had a vague awareness

18:44.880 --> 18:50.480
that this had a big influence on a lot of disciplines at the time. But rereading reading

18:50.480 --> 18:55.920
the 1968 NATO software engineering proceedings was fascinating, because they kept referring to

18:55.920 --> 19:01.200
Christopher Alexander. But this predates his patterns work. It was all synthesis to form about

19:01.200 --> 19:06.800
how he thought about design in terms of balance and trade offs and, and, you know, sort of isolating

19:06.880 --> 19:10.560
systems of change from one another and all the rest was hugely, hugely influential.

19:12.400 --> 19:16.480
But kind of, kind of forgotten that kind of got buried there. So this kind of there's this

19:16.480 --> 19:22.160
little capsule into the kind of like, kind of the zeitgeist of the 60s, and design thinking

19:22.160 --> 19:27.920
of all this kind of stuff, Conway gets mentioned, Melvin Conway, and this influence on architecture

19:27.920 --> 19:33.040
of like, you know what, the way that your people communicate, it's going to have a huge exertive

19:33.040 --> 19:37.760
force on the structure that you build, how you communicate is going to is going to influence

19:37.760 --> 19:44.080
that because this is not maths. This is, we're creating a thing. And, and our choice of creation

19:44.080 --> 19:49.920
is going to be influenced by how we talk to one another. And there, again, this gets multiple

19:49.920 --> 19:55.600
references throughout the software engineering proceedings, which I think I think, I think,

19:55.600 --> 20:01.120
I think that's, I think that's, that's deeply entwined in terms, in terms embedded really in,

20:01.600 --> 20:12.080
what engineering really means. I must confess, I, you know, I'm, I, I love maths. I enjoy,

20:12.080 --> 20:17.920
I actively enjoy maths and sometimes do math, solve mathematical problems as a hobby, you know,

20:17.920 --> 20:24.320
but I don't think that what we do is maths. I don't, I don't, it's, it's, it appeals to

20:24.320 --> 20:30.080
mathematical thinkers. But one of the differences between engineering and maths is that engineering

20:30.080 --> 20:37.200
has that pragmatic bent, you know, so if, if you could simulate an aeroplane, the design of an

20:37.200 --> 20:42.000
aeroplane and wholly do that, you know, in a simulated form and just build the aeroplane and

20:42.000 --> 20:48.080
then take passengers, you know, people would do that, but they don't, they do that. And then

20:48.080 --> 20:51.920
they go flying. And certainly, if you're Boeing, I don't know whether, I don't know if they still

20:51.920 --> 20:56.640
do it, but certain for a very long time, the engineers that built the aeroplane were amongst

20:56.640 --> 21:03.040
the first passengers after the test pilot went up to go for a ride in the aeroplane that they

21:03.040 --> 21:08.320
designed. So there's, there's, there's this thing of, of, you know, trying stuff out. And I think

21:08.320 --> 21:13.520
that's one of the principles that I get a little frustrated sometimes with people talking about,

21:14.080 --> 21:19.360
you know, the mathematical nature of programming. It's interesting. It's fascinating. I like,

21:19.360 --> 21:23.440
I like thinking in those sorts of terms, but I don't think that's enough because I think it's

21:23.440 --> 21:28.960
usually harder to be able to write something that's, you know, a provable system than it,

21:29.600 --> 21:34.320
than it is to write the system in the first place. And so you more, it's almost more error prone.

21:34.320 --> 21:39.120
So, you know, it's, it's, it's a complex problem. I was, I was just listening to the radio

21:41.040 --> 21:48.240
today about, actually, I was listening to a podcast from new scientists and they were saying

21:48.880 --> 21:56.000
they've just rejected one of the quantum, supposedly quantum computing proof

21:57.360 --> 22:01.200
encryption algorithms, because somebody managed to break it on their laptop.

22:05.120 --> 22:11.840
And you'd think that'd be a fairly mathematical kind of area of software. So, so, so when we're

22:11.840 --> 22:17.920
building flight control systems or, or car control systems, or even your stock control system,

22:19.040 --> 22:23.680
there's still room for all those human errors and mistakes. Yeah. And, and, and, and, you know,

22:23.680 --> 22:29.280
Margaret Hamilton's little girl to come in and, and screw it up in new and interesting ways.

22:29.280 --> 22:32.480
And I think, I think that's a really important thing because it's, it's, it's,

22:32.480 --> 22:36.240
because this kind of whole point about kind of perspectives of when we look at things,

22:37.200 --> 22:44.000
that how do we reason about them? And that the, it's a distinction I made a number of years ago is

22:44.080 --> 22:50.800
that, you know, software, there are lots of elements of it that are mathematical, but are not

22:50.800 --> 22:55.440
the same as math, you know, but not mathematics. There's a distinction there. So engineering is

22:55.440 --> 23:00.000
not mathematics, but it is mathematical. In other words, it draws very heavily, uses it as a tool,

23:00.000 --> 23:04.160
and that tool can also give us further insights, but they are not an equivalence. There's not,

23:04.160 --> 23:09.360
you know, and that's, and that's a really important distinction. And that idea of,

23:10.080 --> 23:14.080
yes, but when I throw it, does it stick? You know, that kind of stuff is the real thing.

23:14.080 --> 23:19.920
But when, when we actually, you know, yeah, sure, this works in the simulation, but it's, you know,

23:19.920 --> 23:29.280
it's, it's, it's this, it's like, let's, let's take it back to the 80s. Aliens. And, you know,

23:29.280 --> 23:32.320
being asked, you know, how many, how many actual, how many combat drops have you done?

23:33.280 --> 23:37.360
And then we get one answer is like, and then the follows on simulated. It's just like,

23:38.320 --> 23:42.880
okay, there's a big distinction here. You know, you've actually, you know, this is your first

23:42.880 --> 23:48.880
time in properly in the field is a big distinction. So in other words, there's that whole kind of

23:48.880 --> 23:54.800
idea of like the math. And, and I think for, I think for software, the term, there's a lot of

23:54.800 --> 24:00.080
mathematics that is in bits, there are things that are genuine mathematics, there's a lot that

24:00.080 --> 24:04.560
is mathematical, but the better way of looking at it is formal. Now, I don't want to get that wrapped

24:04.560 --> 24:09.040
up with all methods, because that's clearly an important subset, but it's formalized. And I was,

24:09.040 --> 24:13.360
it's, there's, there's elements. And that's something I've always found fascinating is that

24:13.360 --> 24:18.560
you got the human element, which is definitely hugely informal, sloppy, we are not, we are not

24:18.560 --> 24:25.600
formalized creatures with very, very associative. And then what developers have to do is bridge the

24:25.600 --> 24:32.240
gap between this incredibly sloppy world that somehow has form and shape, but is not necessarily

24:32.240 --> 24:36.640
rigid and prescriptive and with well-defined boundaries. And then you kind of shift into

24:36.640 --> 24:42.720
the world of programs, which have exactly opposite nature. They are highly formalized, you know,

24:42.720 --> 24:46.400
it's, it's a programming language is a formal structure. There's no kind of like, well, maybe

24:46.400 --> 24:50.000
today I'll compile it, or maybe you don't. And if it looks like that, you know, you have a problem.

24:52.000 --> 24:57.280
You know, but it, there's kind of, there's a, and what you've got to try and do is build a system

24:57.280 --> 25:02.800
for the kind of the soft squishy thinking and soft squishy beings out of stuff that is really

25:02.800 --> 25:08.400
quite different. And the nature of these two, bringing them together, I think that for me,

25:08.400 --> 25:12.800
that's one of the things I find fascinating, but it's probably also for many people without them

25:12.800 --> 25:18.320
realizing is what's interesting about software development is there is the rewarding aspect

25:18.320 --> 25:23.040
of some things that are solved and elegant. And it's just like, that's done. But then there's

25:23.040 --> 25:27.280
the other element of like, and how does it fit with the world, which is also quite exciting.

25:28.240 --> 25:31.520
And also the discoveries that you make is just like, well, I thought this was a really good

25:31.520 --> 25:35.520
abstraction, but now I truly understand what's being built. I don't think that's the right

25:35.520 --> 25:38.960
abstraction. That doesn't mean it's a bad abstraction. It's just not the right abstraction

25:38.960 --> 25:44.240
for this system. It's just now I understand how it's evolving through time and the kind of the

25:44.240 --> 25:50.400
nature of changes that the client wants from it, or the things we've discovered from, from sprint

25:50.800 --> 25:54.800
to sprint. It's just like, oh, okay, I keep touching this, keep changing it with that

25:54.800 --> 26:00.000
optimism. Oh, I'll get it right this time. But actually, actually, maybe I'm learning

26:00.000 --> 26:05.040
something deeper, the fact that this is not the idea that I thought it was. And I need a different

26:05.040 --> 26:13.280
point of view. And that's, that's not a side effect to an accident. That's the nature of

26:13.840 --> 26:19.680
of the game. It's this exercise, it's this continual exercise in learning in which

26:20.320 --> 26:24.000
we enhance our understanding of the problem that we're trying to address,

26:25.120 --> 26:31.600
and the nature of our solution, a solution that we're trying to apply to it. And, and, and it seems

26:31.600 --> 26:37.200
to, that's one of the things that I very, very strongly come to believe that that's a complete

26:37.200 --> 26:45.200
cornerstone of our discipline. And we optimize to be able to maintain our ability to make changes

26:45.200 --> 26:51.200
when we learn new stuff. So, so I refer to it as this kind of one of the ways of kind of

26:51.200 --> 26:58.320
pragmatically, informally adopting the philosophy of science to software. So I want to, I want to

26:58.320 --> 27:02.160
consciously start out assuming that I'm going to make a mistake and I'm going to be wrong.

27:02.880 --> 27:08.160
And then I'm going to look at ways in which I can falsify my, my guesses along the way.

27:08.160 --> 27:13.920
And that's a much stronger way of learning than assuming that my design's perfect and it's going

27:13.920 --> 27:18.960
to be right. And I'm never going to have to correct it again. I've found the one true way.

27:18.960 --> 27:26.640
You know, I'm always reminded, you know, this, this is years ago, but I had a client where I had,

27:26.880 --> 27:31.840
I, I become a success of visits, I become familiar with the nature of their system and what they

27:31.840 --> 27:36.800
were doing. And they one day asked me, we love you to design this kind of like subsystem. And it's

27:36.800 --> 27:40.960
got these performance constraints and stuff like that. And we've got the suggestion for the basic

27:40.960 --> 27:44.880
idea of the design. And I kind of said, I don't think the memory manager is going to like that. I

27:44.880 --> 27:47.920
don't think that's, that's, I don't think that's going to work. I don't think it's going to meet

27:48.480 --> 27:52.560
the performance requirements that you need. I think it's going to be issues with it. And then I

27:52.720 --> 27:57.440
made a suggestion and I said, are you sure? And I said, well, I think this is going to

27:57.440 --> 28:01.120
work better. I think this will work better with memory allocation on this platform. I think

28:01.840 --> 28:05.520
that for the, you know, you're dealing with peak, they basically wanted to deal with peak demand

28:05.520 --> 28:08.960
in some way. You know, we can't handle the data, but all we need to do is spool it off so we can

28:08.960 --> 28:13.600
handle it later. And I said, I think the way I'm proposing will work this way. And then I tossed

28:13.600 --> 28:19.040
in another idea, because I'm not really happy until I've got three ideas. So they gave me one. I,

28:19.040 --> 28:23.200
I had, I had a preferred one. I didn't think there's a worker and I had a preferred one.

28:23.200 --> 28:27.440
And, you know, and, and then I had a third one. And I thought that one was okay. I thought it was

28:27.440 --> 28:31.040
better than their suggestion, but I didn't think it was great. And, you know, they gave me a couple

28:31.040 --> 28:35.280
of days, you know, they fed me coffee, you know, gave me a meeting room, all the rest of it. But

28:35.280 --> 28:40.640
my favorite thing is one, one of the guys came in one day, you know, the first or second day,

28:40.640 --> 28:45.040
and he came in and he saw I had an idea on my screen. I had code, there were curly brackets

28:45.040 --> 28:48.400
happening. I said, Oh, we didn't expect you to cut it. And it's just, I kind of looked at it.

28:48.400 --> 28:50.880
It was just like, well, how do you think I was going to do this sit here?

28:53.680 --> 28:58.080
You know, and come up with the pure design, you know, I have designed it.

28:59.200 --> 29:06.400
I have the architecture. Here is the solution. And it's just like, no, I'm trying each one of

29:06.400 --> 29:10.960
these out. I want to see what it feels like in code. And also, I'm going to do some basic,

29:10.960 --> 29:15.920
basic performance analysis, not too big, just to get a kind of order of magnitude feel for the

29:15.920 --> 29:22.080
stuff. And I wrote it up. And the funny thing is, I wrote it up. And it's only in hindsight that

29:22.080 --> 29:27.520
I realized I'd written it up like an experimental report. Here's the situation. Here's what we've

29:27.520 --> 29:31.600
got. Here's the various proposals. Here's how we've run it. Here's the results and recommendations

29:31.600 --> 29:37.360
for future work. But what I found is that I was right and I was wrong. I was right. Their approach

29:37.360 --> 29:41.840
wouldn't meet their requirements. I was also right that my preferred approach would meet their

29:41.840 --> 29:47.760
requirements. But I was wrong in that my kind of like third throwaway option, that was outstanding.

29:47.760 --> 29:52.960
It was way ahead of me. You know, and I would not have known that by meditating upon it. That had

29:52.960 --> 29:59.360
to be made real. It had to be brought into the world. And to actually, you also have to kind of

29:59.360 --> 30:03.600
mess about with it. In other words, the very active, and you mentioned kind of like

30:04.320 --> 30:08.960
solving mathematical problems for fun. And that's one of those interesting things is that I'm guilty

30:08.960 --> 30:16.560
of having done similar things in the past. And it's kind of fun. But the thing is, until you've

30:16.560 --> 30:21.520
done it, you don't know how you're going to do it. You've got some ideas, and you're going to crack

30:21.520 --> 30:26.800
away at it. And in that sense, there is a sort of a creativity. You know, mathematics is not

30:26.800 --> 30:30.720
necessarily empirical, but it is certainly creative. I'm going to try this. And what about

30:30.720 --> 30:36.960
this one? What about this? And you've got that. And software just pushes it a little bit further

30:36.960 --> 30:40.960
to bring it into the world and say, Well, yeah, but how does that work in the world as opposed to

30:40.960 --> 30:47.440
this abstract space? And that is the really important. And that idea, I think it's a really

30:47.440 --> 30:52.080
interesting one, because what we're doing is we're bringing together the idea of problem solving and

30:52.080 --> 30:58.400
creativity. But with something that somebody else is going to experience, and they're going to work

30:58.400 --> 31:02.640
with it, that somebody else is either going to be another developer experiencing the code,

31:02.640 --> 31:08.240
or it's going to be an end user experiencing what is this system like. And so there's a kind of a

31:08.240 --> 31:13.040
feedback, you don't necessarily get that quite the same from something that is mathematical.

31:14.880 --> 31:18.560
There's a kind of a sense there of, is this appropriate for the world that we want, as opposed

31:18.560 --> 31:25.200
to, you know, yeah, this is this is fine. It's a nice idea. But it's a case of like, what is its

31:25.200 --> 31:29.360
context? You know, I can give you a picture of a house. And I could ask you, is this a good house?

31:29.360 --> 31:32.880
And, and you could say, Yeah, that looks good. And then I say, Well, here's the hill that I got to

31:32.880 --> 31:40.400
put it on. You said, Well, you didn't say that. The context absolutely matters. And I think that

31:40.400 --> 31:46.560
sometimes we kind of, there's this kind of sort of maths envy that sometimes takes over people.

31:46.560 --> 31:50.880
And sometimes there's that idealism, because software does, you know, as I said, there's

31:50.880 --> 31:55.280
these two different spaces, that the sloppy human one that is filled with economics and

31:56.560 --> 32:00.560
ill form thoughts, and the fact that the realization that no matter what we do with any

32:00.560 --> 32:03.520
development process, people always talk about prioritizing requirements, stuff like that.

32:04.400 --> 32:07.520
Humans don't walk around with a list of priorities that we don't actually that's

32:07.520 --> 32:10.880
that's not a thing that happens in the brain. We don't have lists like that.

32:12.560 --> 32:20.480
And so my wife, I have very organized, but I'm going to say that when people,

32:20.560 --> 32:25.280
but that's a thinking tool, that a list becomes a thinking tool. Yes, when you provoke a human,

32:25.280 --> 32:30.800
just randomly, they don't have a, they have to create a list. And it's going to be drawn from

32:30.800 --> 32:38.160
whatever is available. It's an availability bias there, whatever is available at that particular

32:38.160 --> 32:44.000
point in time. And unless they've already really thought through, I'm going to use lists like

32:44.000 --> 32:47.840
this, unless they've actually structured that in there, then that's not the naturally the way

32:47.840 --> 32:51.920
they think. Most people don't sit there thinking like, we want a product, and I'm going to think in

32:51.920 --> 32:55.280
terms of these requirements. No, you're probably thinking in terms of other things that are your

32:55.280 --> 33:01.280
skill space. And so when we provoke humans into, oh, I need a formal structure, give me a priority

33:01.280 --> 33:05.680
list. That's not how they actually think, but they can learn to move towards it. But that doesn't

33:05.680 --> 33:10.880
mean they're thinking genuinely like that. And then we have this associative mess, which is also

33:10.880 --> 33:15.360
where all the creativity comes from. And then we have this kind of hard edge stuff, which is very

33:15.360 --> 33:18.880
uncompromising. You know, there's no negotiation with the compiler. It's not a matter of opinion

33:18.880 --> 33:23.680
whether or not this works or not. And then we're trying to do all of this. So we've got all these

33:23.680 --> 33:29.600
different strands of creativity yet bounded by a particular formalism. And so it's kind of like

33:29.600 --> 33:33.600
you need lots of different points of view. And so although ultimately, I believe that it is all

33:33.600 --> 33:37.920
underpinned by a perspective of engineering. And I think with software engineering, it's not,

33:38.880 --> 33:48.560
it's, I put it, I did a very long time ago at the GoTo conference. It was nearly 20 years ago,

33:48.560 --> 33:53.120
and it was an end note. And it was, oh, no, it was the Java conference at that time. I hadn't

33:53.120 --> 33:58.080
called themselves GoTo yet. And it was entitled Beyond Metaphore, where I looked at a bunch of

33:58.080 --> 34:04.960
metaphors that we use in software development. And the whole value of them, I sort of said,

34:04.960 --> 34:08.880
yeah, it gives you different points of view. But I said, one of them is actually what we do is

34:08.880 --> 34:13.520
engineering, but it's not engineering that has to worry mostly about physics and logistics. We

34:13.520 --> 34:17.440
don't really worry about logistics. It turns out that what happened? What does engineering look

34:17.440 --> 34:21.680
like when you take all of that away? You're still making trade-offs and you're still doing a whole

34:21.680 --> 34:27.760
load of things. It's just that you don't have to worry about the bridge materials. You don't have

34:27.760 --> 34:32.400
to worry about, you know, all the materials, you don't have to worry about it the same way.

34:32.480 --> 34:36.320
There's a whole load of other things that just disappear, but that doesn't stop it from being

34:37.600 --> 34:43.760
a discipline that is learning-based, that is in some sense pragmatic, but is also very trade-offs

34:43.760 --> 34:48.800
driven. That's a really, really important part. You know, mathematically, we know

34:48.800 --> 34:52.400
when people talk about maths, the trade-offs are not quite there in the same way. When somebody

34:52.400 --> 34:56.560
comes up with a proof, and they can't quite prove it, it's like, well, you know, close enough.

34:57.520 --> 35:05.840
No, that does not pass the mathematical test. It's like the Fermat's Last Theorem,

35:05.840 --> 35:09.280
which is kind of fresh in my mind because I interviewed Simon Singh a few months ago

35:10.320 --> 35:13.920
on some of his things, and he wrote a wonderful book on Fermat's Last Theorem, the history

35:14.640 --> 35:21.360
of that, and Andrew Wiles's proof. Everybody kind of suspected, no, an engineer would have said,

35:21.360 --> 35:25.520
yeah, you know what, Fermat's right. It's close enough. We can't find anything that's good enough.

35:25.520 --> 35:31.760
We can't find an N for, you know, that there is other than Pythagoras, you know, other than A

35:31.760 --> 35:36.880
squared plus B squared equals C squared for A, B, and C being integers. You know,

35:36.880 --> 35:41.040
you're not going to find any other powers. You know, there is no N that is going to fit that.

35:41.040 --> 35:44.640
An engineer would have given up a long time ago. They would have moved on to the next problem,

35:44.640 --> 35:47.200
because they said, you know, actually, we've done a plausibility analysis, and really,

35:47.200 --> 35:51.840
it doesn't look like there's anything there. And given the time and effort, this is good enough.

35:52.560 --> 35:57.680
And that's, in other words, there's a kind of a, there's a stopping point and a trade-off discussion

35:57.680 --> 36:04.640
that happens there. Glenn Vanderberg did a great talk about software engineering a few years ago,

36:04.640 --> 36:08.800
and he says engineering, in other disciplines, engineering is just the stuff that works.

36:09.440 --> 36:16.640
And that's it. It's that mix between adopting a scientific style of rational thinking to solve

36:16.640 --> 36:22.160
the problems, where that's practical. But it doesn't have to be definitive. There's also this

36:22.160 --> 36:30.080
empirical little add-on that, you know, you know, yeah, that's good enough. You know, it's, and that

36:30.080 --> 36:37.120
seems important to me as part, you know, as part of the discipline is to not expect kind of quantum

36:37.120 --> 36:42.800
physics levels of precision in engineering, you know, in engineering, unless you're building

36:42.800 --> 36:47.120
something that's using quantum physics, you know, you don't expect, you don't do that if you're

36:47.120 --> 36:53.440
built in a car, you know, you're more pragmatic than that. And I think, I think that's one of the,

36:54.000 --> 37:00.080
it's interesting that the way that you kind of couch that in talking about your talk is,

37:01.680 --> 37:08.480
is that it's engineering without those kind of the logistics. I talk about it in terms of,

37:08.480 --> 37:14.480
I think our mistake is assuming that engineering, because it's so popular in the real world,

37:14.480 --> 37:19.600
is production engineering that we're talking about. There are synonym and they're not.

37:19.600 --> 37:23.760
There's also design engineering, which I think is much, much closer to what it is that we do.

37:23.760 --> 37:28.720
We're much less interested in those, the logistics of production, because production's free for us.

37:29.360 --> 37:33.760
Yes, yes. Yeah, I think that's a, I think that is a really important distinction because it's,

37:33.760 --> 37:38.160
it's one of those things when you zoom in, and I think it's, it's the, as you start zooming in,

37:38.160 --> 37:44.800
you start realizing distinctions that are not necessarily, and that's, and I think that's,

37:44.800 --> 37:49.280
that's both the strength and weakness of any, of any word when we throw a word out there to say,

37:49.280 --> 37:55.440
this is like this, this is this. We probably have a fairly clear idea in our heads, based on

37:55.440 --> 37:59.680
whatever our experience is, but we've got no guarantee that the other person, the receiver,

37:59.680 --> 38:04.000
has the same mental model. I mean, it's, and that I think is, is a really,

38:04.880 --> 38:08.720
a really important one. It's sometimes when, when you kind of like push the edges of those

38:08.720 --> 38:12.080
definitions. So I think for me, one of the really interesting ones, actually funny enough,

38:12.640 --> 38:17.360
and I wonder whether, and this is tied, I know this is just like a, you know, I can't, I can't

38:17.360 --> 38:23.920
tell you, but basically the late 90s, I read Two Engineers Human by Henry Piotroski.

38:24.720 --> 38:30.560
Wonderful book. Now he's a civil engineer and historian, and really wonderful book, but,

38:30.560 --> 38:37.120
but the subtitle is The Role of Failure, a successful engineer. And it's that idea of

38:37.120 --> 38:41.120
understanding things through failure, which I wonder if that ties into me, my fascination

38:41.120 --> 38:45.600
with taking pictures and how other people send me pictures of failure, but that idea that actually

38:45.600 --> 38:54.080
we can learn a lot by nudging a system to, nudging a system beyond what we actually understood,

38:54.080 --> 38:58.080
nudging it beyond our preconceptions, revealing our own assumptions. It's just like, ah,

38:58.640 --> 39:02.960
and, and, and, and it's occasionally doing that on purpose. But one of the things I'm, I'm, I'm

39:02.960 --> 39:10.480
currently obsessed watching SpaceX build their Starships in, in, in Texas. And, and I've been

39:10.480 --> 39:16.480
following it for a, for a while now, a little while ago, they decided that they, they made

39:16.480 --> 39:20.880
an unusual decision of building their, their, their Spaceships out of stainless steel rather

39:20.880 --> 39:24.480
than aluminium, which is what Spaceships were. Originally they thought they were going to do

39:24.480 --> 39:28.400
carbon fiber. Then they showed, they looked at the alternatives. They came up with stainless steel

39:28.400 --> 39:33.280
because it got a better temperature range and for strength to weight ratio and all that kind of

39:33.280 --> 39:38.400
stuff. But at one point they'd built these things. They'd, they'd flown some of them.

39:38.880 --> 39:43.360
They decided they were going to move from four millimetre stainless steel to three millimetre

39:43.360 --> 39:51.040
stainless steel. Same stuff, same, same type of steel, but just a thickness change. You'd think

39:51.040 --> 39:56.720
that'd be the kind of thing that you could just do your slide roll in the olden days, but running

39:56.720 --> 40:01.360
through, running through a computer and, and understand. But no, they built, they built the

40:01.360 --> 40:06.880
system and then they, they, they pressure tested it to destruction to see how their welds held up,

40:06.880 --> 40:13.520
how their designs stood up under that real and, you know, empirical load in, you know, life-like

40:13.520 --> 40:19.280
circumstances. See what happens at the point when it screws up. And, you know, that, that's what real

40:19.280 --> 40:23.920
world engineering looks like. It seems, seems to me. But there's that idea of like, you're going to,

40:23.920 --> 40:29.040
we're going to do this and try this thing out and then see what happens. And there's a, for me,

40:29.040 --> 40:33.840
that, that's this idea that time is a really important ingredient to what we do, which I think

40:33.920 --> 40:41.600
is really missing from a lot of, a lot of formalisms of what is software, that it's the

40:41.600 --> 40:46.640
time full aspect. It's not the timeless aspect, but the time full aspect. And I was, honestly,

40:46.640 --> 40:50.240
I couldn't tell you the answer to this until I built it and we've seen it for a bit. I know it's

40:50.240 --> 40:56.640
not quite right, but it's plausibly in the right space. And, but I don't know what my assumptions

40:56.640 --> 41:00.880
are, you know, and as by definition, you don't know what your assumptions are. Because, and,

41:00.880 --> 41:04.720
you know, I always like to point out that assumptions are really weird pieces of knowledge.

41:05.360 --> 41:10.320
They are, they are only ever discovered, they are normally only discovered in contradiction.

41:10.880 --> 41:14.480
You know, somebody says something, you go, Oh, but I had assumed that at that moment,

41:14.480 --> 41:18.080
yeah, you discover you had an assumption, you've had it for a long time. But if anybody had asked

41:18.080 --> 41:22.640
you prior to that, what are your assumptions, you just said, I have none. Only when it is

41:22.640 --> 41:29.200
contradicted, you go, Oh, that's an assumption. So this is very curious from an epistemological

41:29.280 --> 41:34.800
point of view. This is really weird kind of thing. Yeah. And it's, it's the fact that you know, if

41:34.800 --> 41:39.840
you know, you know, it's, you know, it's kind of Lego bricks, Lego bricks in the dark, you know,

41:39.840 --> 41:45.120
there is a dark room, I know there are Lego bricks on the floor. The problem is, although I know that

41:45.120 --> 41:48.960
I have assumptions, although I know there are Lego bricks, I can't tell you where they are until

41:48.960 --> 41:52.800
I've stepped on them. I have assumptions, but until, but I'm not going to do that by just standing

41:52.800 --> 41:56.560
at the door, I can, I have to walk into the room, I have to tread through, tread through, there's

41:56.560 --> 41:59.600
one, there's another one, there's another one. You know, it's one of those things, you have

41:59.600 --> 42:04.000
to be deliberate about this, you've got to put that stuff out there. And of course, prior knowledge

42:04.000 --> 42:09.760
can, can give you a real kind of a real leg up, that's the standing on shoulders of giants, that's

42:09.760 --> 42:15.760
the cumulative experience. Now, why, why is it that we are recreating the errors that previous

42:15.760 --> 42:21.280
projects have done? Yeah, we got, we got all this experience. And it's, it's, we, we see this

42:21.360 --> 42:30.560
repeatedly at the level of individuals, companies, and discipline as a whole. It's a case of

42:32.160 --> 42:36.560
one of those interesting things is like, yeah, we all make mistakes. That's absolutely fine. We,

42:36.560 --> 42:41.120
we, we are always operating within complete knowledge by definition. We're operating within

42:41.120 --> 42:47.040
complete knowledge. Software, as you said, production is free. We've got that was a solved

42:47.040 --> 42:50.960
problem in the 1950s. We basically solved the elements of that, and we've just been getting

42:50.960 --> 42:59.040
better at it ever since. But that whole idea of that leaves us with the hard problem of,

42:59.040 --> 43:02.560
and what is it we're trying to build and why? And how do we, how do we do that? Yes. Which

43:02.560 --> 43:06.880
turns out to be surprisingly challenging, but it's by definition, open-ended, because we're

43:06.880 --> 43:12.720
not producing identical artifacts. I've got, I don't know how many of these pens lying around

43:12.800 --> 43:18.720
my office. And they are all equivalent to one another. They are all, except for the in-content,

43:18.720 --> 43:23.520
substitutable for one another. They are identical. That's because they have a production. Yeah,

43:23.520 --> 43:29.360
they have a production process that is designed to eliminate variation. Yeah, we, we've done that

43:29.360 --> 43:34.000
far. Software is never like that. Yes. Yeah. The software challenge is that if somebody comes

43:34.000 --> 43:38.800
along and says, I want something that, I want that system over there running over here,

43:38.800 --> 43:46.960
well, that's a solved problem. If I see one of my sons, if they show me an app on the phone,

43:47.520 --> 43:51.040
I don't have to say, oh, I need to build that. It's just like, I'm going to go to the store

43:51.040 --> 43:55.200
and get it for myself. It's downloadable. If somebody shows me a piece of code and say, oh,

43:55.200 --> 44:01.040
that's really good. We now need to write that code over here. No. Yeah. It's just a case of,

44:01.040 --> 44:06.160
we've solved all of these issues, but we're left with that, we're left with the challenging issue,

44:06.160 --> 44:10.880
which is not the production of the elimination variation, but the production of variation.

44:10.880 --> 44:15.840
That's our job. When somebody says, I want this system, but I want it slightly different.

44:15.840 --> 44:19.440
I want to, you know, I want that thing our competitor has done. Well, that's different

44:19.440 --> 44:24.800
because we don't have their code. That's for us. This is new. It's new to us. I want the old version.

44:24.800 --> 44:28.720
I want a new version of the system. And so whenever anybody asks for a feature extension,

44:28.720 --> 44:31.760
they're not just asking for a feature extension. They're actually asking for a new system.

44:31.840 --> 44:36.240
It's the old system plus the new behavior. That's a new system by definition.

44:36.880 --> 44:44.000
And that's one of the key facets of doing a good job is to be able to make that move

44:44.720 --> 44:51.680
from the previous version to the new version easy. Yes. I am increasingly of the mind that

44:51.680 --> 44:57.520
if you can't change your software, then the software is low quality. That is the practical,

44:57.520 --> 45:02.880
pragmatic realization of quality in your software. I don't care about anything else.

45:02.880 --> 45:05.520
You know, I don't care what language it's in. I don't care what, you know,

45:05.520 --> 45:12.400
if I can change it easily and safely, then it's good quality. Yeah. And and pretty much,

45:12.400 --> 45:15.680
and there was, and again, there were some of these sort of deep tools that, you know,

45:15.680 --> 45:20.560
things like modularity, cohesion, separation of concerns, encapsulation, abstraction,

45:20.560 --> 45:29.040
those sorts of tools that allow us the freedom to make those kinds of moves when we realize,

45:29.040 --> 45:32.720
oh, shit, we got it wrong. Yeah. The freedom to make the change.

45:33.360 --> 45:39.200
And I think that's really important because I think for me, one of those insights or,

45:39.200 --> 45:42.560
you know, an emerging wave of insights over the years has come from this idea,

45:42.560 --> 45:45.520
okay, we're always operating with incomplete knowledge. So that means that whatever I'm

45:45.520 --> 45:51.520
building is, is in some sense wrong, although I think wrong is sometimes there's too much,

45:52.400 --> 45:55.600
there's too much attached to that word. Your best guess so far.

45:56.160 --> 45:59.680
That's my best, yeah, based on what I knew. It's, you know, we did our best job.

45:59.680 --> 46:02.400
This is what we've got. But now we've learned something from it, either because the world

46:02.400 --> 46:08.800
told us, or because we learned as a result, our own awareness of this. But what's interesting

46:08.800 --> 46:15.360
is you can derive a lot of the ideas that we value, modularity, loose coupling and all the rest of it,

46:15.760 --> 46:18.880
from an understanding of like, well, how would you build something if you didn't know everything?

46:19.440 --> 46:23.440
Yes. Yes. Here's the thing I'm not sure about. Here's the thing I'm very sure about. You know,

46:23.440 --> 46:26.800
this thing I'm not sure about, I'm going to really ram it in there and couple tightly to it.

46:26.800 --> 46:31.920
No, you were loosely coupled to it because this is probably going to change. Yeah, exactly. You

46:31.920 --> 46:36.000
know, I'm going to isolate myself from that. This is, I'm not totally sure about it. I've kind

46:36.000 --> 46:41.280
of got an idea, but I want to put a little bit of distance between this and this. And that distance

46:42.080 --> 46:46.480
is our dependencies, that distance is our interfaces, that distance is, the idea is that

46:46.480 --> 46:50.560
all of this falls out naturally when you start saying, well, you can actually, and this is,

46:50.560 --> 46:56.400
I think, is fascinating because it runs along kind of an alternative axis. Sometimes they

46:56.400 --> 47:01.120
arrive at the same conclusion, but sometimes they don't, to the traditional language of abstraction

47:01.120 --> 47:04.640
and things like that. How would you modularise? Modularise according to abstraction? Well,

47:04.640 --> 47:10.240
there's multiple ways of abstract. We have different paradigms for that. But what is interesting is

47:10.240 --> 47:16.240
going, well, how sure are you about this? And it's just like, well, you know, we, oh, I'm pretty

47:16.240 --> 47:19.680
sure we've built, we've done something almost identical. It's not identical, but it's almost

47:19.680 --> 47:23.280
identical. Well, that gives us maybe high confidence and this worked out well. That's the

47:23.280 --> 47:28.000
second bit. People don't even forget that. Doing it, sometimes we get stuck in a rut. You know,

47:28.000 --> 47:31.440
it's just like, we did this before and how did that work out for you? Yeah, you know, not very

47:31.440 --> 47:35.440
well, but we're going to do it again this way. It's just that, no, no, no, there's no opportunity here.

47:36.400 --> 47:39.840
And that's that idea of, you know, you know, it's good to have a few ideas

47:40.400 --> 47:45.760
that you can trade off against one another. Yes. But then you've got that other idea of like saying,

47:45.760 --> 47:50.160
well, let's, let's go through this in terms of certainty. And I've done this a couple of times

47:50.160 --> 47:53.440
with people and they're always kind of slightly freaked out because you kind of come up with a

47:53.440 --> 47:57.760
rough kind of like sketch of what you're going to do. And so, well, hang on, but we haven't actually

47:57.760 --> 48:02.320
talked about all of the design detail that they normally talk about. It's just like, well, yeah,

48:02.320 --> 48:05.600
what we did is we've just drawn a bunch of boxes and lines and things

48:06.240 --> 48:09.520
based on your confidence. In other words, when I've asked a question,

48:10.320 --> 48:13.920
and you've said, oh, yeah, we're not really sure how we can do that. Right, I've drawn a line.

48:13.920 --> 48:17.280
There's a boundary there of knowledge, because we're sure about one side, but we're not sure about

48:17.280 --> 48:20.960
the other. I don't care what it is. I don't care what paradigm we're talking. It's clearly something

48:20.960 --> 48:25.440
we're not sure about. So maybe we shouldn't hug it too closely, a little bit of, a little bit of

48:25.440 --> 48:30.400
looseness. A little bit of a wall would be good. Yeah. And likewise, when somebody says, oh, yeah,

48:30.400 --> 48:33.200
we're going to do it this way. And a colleague says, oh, I thought we're going to do it this way.

48:33.200 --> 48:38.080
You know what? There's a line there as well, because it's clearly this is not settled. And it may

48:38.080 --> 48:42.880
turn out that one of them is right one year and the other one is right the next year. In other

48:42.880 --> 48:48.560
words, things may change whether it's performance characteristics or whatever, but favor one and

48:48.560 --> 48:53.440
then the other. And again, that's the time for rather than timeless quality. But that idea there

48:53.440 --> 48:58.480
that we can get a heads up just by actually almost constructively using our uncertainty

48:59.040 --> 49:04.240
as a positive aspect to sort of see, well, how does this work? And then we've got the empirical

49:04.240 --> 49:09.600
side of things, which is, okay, here's what kept changing every release. You know, what are the

49:09.600 --> 49:13.840
hotspots? What do we keep going back and saying, oh, no, no, this time it'll be right. We'll just

49:13.840 --> 49:20.000
add this here. And that kind of, I think one of the first times I ever really noticed that question

49:20.000 --> 49:28.720
of stability properly feeding back was a Java system. It was a company that was doing a Java

49:28.720 --> 49:34.160
system. And they had the debate about they were having the debate and are not yet resolved it

49:36.080 --> 49:46.560
about checked exceptions. And for those tuning in who are not aware of this feature in Java,

49:47.520 --> 49:52.720
checked exceptions basically allow, basically allow you to make exceptions part of the

49:52.720 --> 49:58.000
signature of a method, sort of checkable aspect of the signature. And it's one of those things

49:58.000 --> 50:03.200
that in theory is a good idea. But that actually turns out that in practice, if you don't know

50:03.200 --> 50:09.200
exactly what you're doing, in other words, you don't have perfect knowledge, and you're building

50:09.200 --> 50:14.960
a large system, they have a really nasty impact because they they introduce an element that is

50:16.720 --> 50:22.400
unstable or rather needs to be stable, but is not yet stable. And I was, how does this fail?

50:22.400 --> 50:26.320
I don't know yet, because we haven't fully understood this goes right back to where we

50:26.320 --> 50:30.560
started. What are the failure modes of this? Yeah, short of saying something trivial, like

50:30.560 --> 50:36.000
there is an error. And that's often what these checked exceptions tend towards, which is

50:36.800 --> 50:41.760
throws framework error. In other words, actually, that's almost no use to anybody whatsoever.

50:41.760 --> 50:48.240
Bad things may happen. Well, we knew that because bad things may happen. You end up either saying

50:48.240 --> 50:52.640
nothing at all, or you say it so precisely that unless you've actually had this out in the field

50:52.640 --> 50:56.320
for a long time and converged on that, the chances are somebody's going to come up with a new failure

50:56.320 --> 51:01.680
mode. And it's just like, Oh, well, so the curious thing is what you've done is that your happy day

51:01.680 --> 51:06.400
scenario, what you want from the method, why the reason you called it, you don't call it,

51:06.400 --> 51:09.920
I'm not calling this method, except perhaps in a test, I'm not calling this method in order for

51:09.920 --> 51:15.440
it to fail. That's not my goal here. I'm calling this because I wanted a result. I'm expecting

51:15.440 --> 51:20.720
that it's all going to work out. So therefore, right at the edge of my vision, and edge of my

51:20.720 --> 51:25.920
awareness, is all of these failures, all these possible failures, which we've not yet explored.

51:25.920 --> 51:30.240
And as time goes by, we get more refined understanding. Oh, this could be distributed. Oh,

51:30.240 --> 51:34.640
well, our distributed bit throws different exceptions to the ones that are those. So we now

51:34.640 --> 51:38.400
made this thing, which was local. Now it's a set. Oh, okay. So we're going to have to change the

51:38.400 --> 51:43.840
signature again. So we've suddenly made something we've caused churn in the in the interface. And

51:43.840 --> 51:48.240
this is one of those interesting things that comes out of the kind of the more empirical side

51:48.240 --> 51:54.080
of things. It's not that nobody who put that feature in Java did so maliciously or without

51:54.080 --> 51:58.960
thought. I certainly, you know, I certainly my understanding at the time, and all everything

51:58.960 --> 52:02.560
being out there, no, there's some good thinking, solid thinking that goes right back to the 1970s

52:03.120 --> 52:08.160
in exploring all of this. But it's the scale, what happens when you actually create open systems

52:08.160 --> 52:12.800
that are large, and with all manner of developers, it suddenly turns out that there's a fundamental

52:12.800 --> 52:17.280
problem here. And it's to do with rate of change and stability of knowledge, what we do and don't

52:17.280 --> 52:22.400
know. And that was a, that was a revelation. Anyway, for this team, it was a real revelation

52:22.400 --> 52:26.240
because they were split down the middle, you know, half or pro, half or anti, and I was just like,

52:27.200 --> 52:30.800
I can't come in and just sort of say, you know, it's going to go this way or that way.

52:30.800 --> 52:35.120
So actually came up with an empirical approach. And I basically said, you know, don't make anything

52:35.120 --> 52:39.760
checked. You know, look at, you know, before you decide to make something checked as it were,

52:39.760 --> 52:46.720
and seal it in, look at how it's behaved over the last few iterations, write a test to simulate

52:46.720 --> 52:52.080
the failures as well. Oh, well, yeah, not just, yeah, but the failures do all of those. And they

52:52.080 --> 52:56.960
were actually quite good, though, but your understanding of the failures. Yeah, how you

52:56.960 --> 53:01.040
respond to it. Absolutely. Yeah. And it turns out that some of these kept changing on a frequent

53:01.120 --> 53:06.080
basis. And I said, look, that idea is not yet stabilized. That idea is still young, you know,

53:06.080 --> 53:12.240
don't nail it in place. And which is my polite way of saying, like, actually, probably, you know,

53:12.240 --> 53:16.960
so don't make it checked until you're sure, which is a fancy way of saying, don't make it checked,

53:16.960 --> 53:21.200
because the chances are they weren't going to go back and review stuff. But what we had is at least

53:21.200 --> 53:26.000
a maturity model. And it's this idea of that it doesn't matter what you think today, you're going

53:26.080 --> 53:32.560
to overvalue your confidence. And, and so it's this idea that time will give you the answer. I

53:32.560 --> 53:36.960
can't tell you how this is going to evolve. I can't tell you how other, you know, this goes

53:36.960 --> 53:42.320
across API's, it's not just about failure loads. Yeah, this is going on. How's it going to be used?

53:42.320 --> 53:46.240
What are the things that are frequently going to change? And then go back to your point about

53:46.240 --> 53:51.440
what we want to do is align the structures of our software with what are the frequent changes we

53:51.440 --> 53:58.240
actually experience, as opposed to, you know, people often pad their design or add complexity,

53:58.960 --> 54:04.000
because they're saying, oh, well, maybe this will change. It turns out that the better your

54:04.000 --> 54:09.040
imagination, the worse this gets. So if you're an imagine, if you are creative and imaginative

54:09.040 --> 54:13.680
developer, you can imagine all kinds of possibilities and the gold plating and the extra hooks and

54:13.680 --> 54:18.000
bits and pieces. And so the more imagination, the less imagination you have, the quicker you'll get

54:18.000 --> 54:22.960
the job done. The more imagination you have, actually, in that sense, it works against you

54:22.960 --> 54:27.040
because you think, well, what about this? What about all of these are possible, but most of them

54:27.040 --> 54:31.040
are not likely. And probably what you want to do is see, well, what actually happens with this?

54:31.680 --> 54:37.520
And that gets you to ask the more meaningful questions like, well, you know, should we release

54:37.520 --> 54:42.320
this API yet? Or should we release it and put a caution on it? It's just like, okay, this is a

54:42.320 --> 54:47.520
beta release. No, we're not planning to support this. This is a beta release. This is for you to

54:47.520 --> 54:51.920
try. It makes us a little more aware. It makes us look up from the keyboard and go, how are people

54:51.920 --> 54:57.680
going to use this? That gets to one of the things that I think is really important is just in software

54:57.680 --> 55:07.680
development is always thinking in that broader context of, you know, how do people consume this?

55:07.680 --> 55:13.040
Whether it's other developers or whether it's end users, how do people consume it? It's that

55:13.040 --> 55:18.320
stuff that you were talking about earlier about the interaction between the relatively rigid

55:18.320 --> 55:24.320
forms of software and the relatively fuzzy forms of people. But ultimately always comes down to

55:24.320 --> 55:34.080
that, whether it's an API or some complex system that people interact with. It's so much about

55:34.640 --> 55:40.560
being pragmatic and learning that. And it's one of the things that drives me nuts, working with

55:40.560 --> 55:46.960
big organisations when they silo up the development process to the extent where you get development

55:46.960 --> 55:52.080
teams who have no idea the context in which they're pieces of software use. They have some kind of

55:52.080 --> 55:58.160
people giving them requirements in the form of programming by remote control, which they're

55:58.160 --> 56:03.840
supposed to be able to churn out these widgets and they don't have any context. And you get to use

56:03.840 --> 56:08.640
software that you can tell sometimes just by using the software. Nobody's ever thought about

56:08.640 --> 56:14.480
actually using this bloody piece of software. It's so bad. And that idea of usability, it's

56:14.480 --> 56:21.760
turtles all the way down. You have the end user, but then also as software developers, we are

56:21.760 --> 56:32.240
clients of our own products. We are clients. It's the classic consumer and supplier metaphor

56:32.240 --> 56:37.360
for understanding components and interfaces and so on. How is somebody going to consume this?

56:37.360 --> 56:42.720
But also there's that contractual idea of like, what am I going to say about how they should

56:42.720 --> 56:47.440
use it? Because everything has a boundary, everything has a limit. And it's that idea,

56:47.440 --> 56:51.920
because the over-engineering issue, I've seen that where, in fact, again, I can pick on Java,

56:52.720 --> 56:58.240
but I've seen it certainly in other cases. So when Java arrived, it basically said,

56:58.240 --> 57:01.920
hey, everything is synchronisable so you can make it thread safe. And I remember thinking at the time,

57:02.000 --> 57:10.800
that's a really bad idea. That's a terrible idea. That's not how you do this. Because I remember

57:10.800 --> 57:14.800
at the time, somebody showed me this C++ and said, oh, this isn't thread safe. And I said,

57:14.800 --> 57:20.880
no, it's perfectly thread safe. You can pass one thread through it. That's it. If you do anything

57:20.880 --> 57:24.640
else on your head, be it. But I've just told you the circumstances under which this will work.

57:24.640 --> 57:30.240
I have given you a context under which this will work. And that's not me being picky. It's actually

57:30.240 --> 57:34.240
a genuine answer. Because otherwise, people do go around and they start goal-plating everything.

57:34.240 --> 57:39.280
And they do so very badly. And it's just like, no, I don't actually... The question is, this is

57:39.280 --> 57:43.440
thread safe. Oh, yeah, but you can't share it between threads. No, I didn't say you could. It's

57:43.440 --> 57:49.360
perfectly thread safe. I can run it in one thread on its own. And that is its safety level. Whereas

57:49.360 --> 57:52.880
there are some code that has a safety level of zero. In other words, this is thread safe if you

57:52.880 --> 57:59.600
pass zero threads through it. It's buggy. I can give you a real-world example of that,

57:59.600 --> 58:03.600
the danger of synchronization blocks in Java. Martin Thompson, my friend,

58:04.640 --> 58:10.800
years ago worked on... At the time, we thought it was the first ever internet bank. So he was

58:10.800 --> 58:14.720
called in to consult on this because they had a serious performance problem with their Java

58:14.720 --> 58:21.280
implementations. It was one of the early big Java implementations in the sort of mid to late 90s.

58:22.400 --> 58:28.640
And he went in, and several people had been to look at that. And it turned out to cut a

58:28.640 --> 58:34.160
long story short. All of the tests ran, and it all looked fine. They put it to production,

58:34.160 --> 58:39.440
and the performance absolutely tanked. It turned out somebody put a synchronization

58:39.440 --> 58:46.080
block around some piece of code in the critical path. So this internet bank could support one

58:46.080 --> 58:55.200
concurrent user, and everybody else queued up. And that's the thing is that for people

58:55.840 --> 58:59.040
oh, yeah, but this needs to be thread safe. Well, what do you mean by that term? Yeah.

58:59.040 --> 59:02.640
And it's like, why are you doing it? There was, again, the context. So it's a case of like,

59:02.640 --> 59:06.800
not everything wants to be shared between threads. And there are other ways. And everybody was a lot

59:06.800 --> 59:12.400
happy in the 90s. And you finally got... It's one of the reasons I keep certain old books around

59:12.400 --> 59:21.200
is that you can kind of see the shifts in style and approach. But I also remember with the client,

59:21.200 --> 59:24.960
this was a C++ system that we went through and looked at their problem. And they just

59:25.520 --> 59:29.120
it wasn't they weren't highlighting a performance problem. But I remember looking through,

59:29.120 --> 59:35.280
they've got this huge stuff in memory, lots of data, lots of rows of data memory. And there's

59:35.280 --> 59:40.960
30,000 locks. And I'm sitting there going like, I'm pretty sure this is all the ways that you could

59:40.960 --> 59:45.680
do this. This is probably not the right way. And it was one of those kind of like, take a step back

59:45.680 --> 59:51.840
and look at it and go, well, actually, what you've got, you've done it as a kind of a data

59:51.840 --> 59:56.320
centered problem with lots of threads operating on the data. And I said, but if you understand

59:56.320 --> 01:00:00.080
what the threads do, I said, they actually follow a life cycle. And that life cycle,

01:00:01.200 --> 01:00:06.080
we could do that as a data flow. In other words, it worked out basically, it was a data flow. We

01:00:06.080 --> 01:00:10.960
basically, you know, yeah, you don't need anywhere near as many threads, you're stealing from yourself,

01:00:10.960 --> 01:00:14.720
it turns out. And with a lot of this, and it turns out, if you do it as a pipeline,

01:00:15.360 --> 01:00:19.520
then we ended up with only needing six locks. And that was in the bits that connected.

01:00:20.240 --> 01:00:25.760
That's in the pipes. And in other words, the point is the data, but they said, but the data

01:00:25.760 --> 01:00:30.160
itself is not thread safe. And I said, yes, it is because it's environment guarantees that it's

01:00:30.160 --> 01:00:36.800
thread safe. That data will only ever be accessed by zero or one threads at any one particular

01:00:36.800 --> 01:00:40.880
point in time. And that's the game. And when we start looking at this, and again, this is this

01:00:40.880 --> 01:00:46.400
engineering to context idea, is when we talk about when we talk about car safety and road

01:00:46.400 --> 01:00:50.560
safety and all the rest of it, we understand that there are conventions, rules of the road,

01:00:50.560 --> 01:00:56.400
and contexts in which we evaluate that. And the outside of that, we make no, there's no guarantee.

01:00:56.400 --> 01:01:02.000
And that's, again, for my own, for me, that light bulb moment I had when reading

01:01:03.120 --> 01:01:07.200
in the early days of patents, actually reading outside the kind of the software space going,

01:01:07.200 --> 01:01:13.280
ah, right, this is idea of context. Where does this idea apply? Beyond which we make no guarantees.

01:01:13.280 --> 01:01:19.760
And that doesn't mean that it's a bad solution. It just means that it is no longer appropriate or,

01:01:19.760 --> 01:01:23.440
you know, outside that context. It's a perfectly fine solution for the thing that it was intended

01:01:23.440 --> 01:01:29.760
for. And that, I think, rubs up against a different trend that sometimes we see

01:01:30.640 --> 01:01:35.440
developers, architects, and so on, is overgeneralization. The idea that everything must be

01:01:35.440 --> 01:01:44.480
general. I think that one of the traps of our disciplines, that it seems to me inherent in

01:01:44.480 --> 01:01:53.760
the nature of software, is that we are often inches away from some quite deeply complicated

01:01:53.760 --> 01:01:58.800
problems. Whatever the level of abstraction that we're working at almost, as soon as you have,

01:01:58.800 --> 01:02:04.640
it seems to me, fundamental, that as soon as you have two copies of information

01:02:04.640 --> 01:02:11.840
in separate places that are changing independently, you've got a world-class, first-class,

01:02:11.840 --> 01:02:16.320
quantum physics level problem. You know, this is hard stuff. However, you know, whatever the

01:02:16.320 --> 01:02:21.600
nature of the information, however is that you deal with it, working on high-performance systems,

01:02:21.600 --> 01:02:29.200
along with Martin building exchanges and trading systems and stuff. You know, we measured the costs

01:02:29.200 --> 01:02:37.120
of concurrency, locks, comparing swap operations in processes and all those kinds of things to

01:02:37.120 --> 01:02:43.440
try and optimize the performance of our systems. And one of the things that I've observed is that

01:02:43.440 --> 01:02:48.800
the more that people know about building concurrent systems, the more their advice is,

01:02:48.800 --> 01:02:58.400
don't do it unless you can possibly avoid it. This is incredibly difficult stuff. So things

01:02:58.400 --> 01:03:02.640
like adding synchronization blocks and saying everybody can now in Java can write threads or

01:03:02.640 --> 01:03:13.680
having thousands of locks in your C++ program are all, seems to me, symptoms of not realizing

01:03:13.680 --> 01:03:19.200
that this is a point to stop and think hard because this requires hard thinking. This is a

01:03:19.200 --> 01:03:25.840
difficult part. It seems to me that concurrency and coupling are the kind of the really hard parts

01:03:25.920 --> 01:03:33.840
of our discipline. Yeah, I think so. Because again, coupling is, and what's interesting,

01:03:33.840 --> 01:03:37.040
it's interesting you draw those two together because I think the interesting thing about

01:03:37.040 --> 01:03:43.360
coupling is that it's, concurrency is hard for us to reason about and conceptualize.

01:03:45.440 --> 01:03:51.120
Coupling suffers a different problem. But interesting, but both of both, which I find

01:03:51.120 --> 01:03:56.160
fascinating, both of them manifest themselves physically in terms of concurrency is about

01:03:56.160 --> 01:04:00.720
structuring things in time. But if somebody says, well, how tightly coupled is this code base,

01:04:00.720 --> 01:04:07.600
I'll tell you what, let me do a build. In other words, you can actually measure the energy of

01:04:07.600 --> 01:04:14.400
a build. And it's one of those things that I remember turning up at a particular,

01:04:15.200 --> 01:04:21.520
it was an engineering project, electricity company, multiple companies were subcontracting.

01:04:21.520 --> 01:04:28.800
It was a political nightmare. It was just pure Conway all the way through. But in the failure

01:04:28.800 --> 01:04:35.520
mode. And it was a political nightmare. And all kinds of fascinating things. But one of the most

01:04:35.520 --> 01:04:42.000
interesting things was, as a development team, the team that I was working with, what we were

01:04:42.000 --> 01:04:46.800
working on was very much back end stuff. It was much more towards the hardware, it was the real-time

01:04:46.800 --> 01:04:50.960
stuff. But it was kind of like we felt like we came out of our cave to go and speak to these

01:04:50.960 --> 01:04:57.600
other people. It's just, oh my goodness, this is absolute enterprise chaos. And then what was

01:04:57.600 --> 01:05:00.880
funny is that because we were building for multiple environments, we were building for

01:05:01.600 --> 01:05:08.160
32 and 64 bit environments, we were building for slow environments, as well as environments where

01:05:08.240 --> 01:05:12.400
we had high-powered CPUs and as we had a framework supposed to work everywhere. But the embedded

01:05:12.400 --> 01:05:17.360
environment, oh my goodness, the builds on that were so incredibly slow that we really, we cared

01:05:17.360 --> 01:05:21.760
about dependencies at such a level, so that we had fast builds, which meant when we ran out on a

01:05:21.760 --> 01:05:26.400
64 bit platform, it was practically instantaneous. It was a beautiful side effect. But then we

01:05:26.400 --> 01:05:29.600
encountered all these other people who were just doing all kinds of stuff with their code. And this

01:05:29.600 --> 01:05:35.200
was like, I'm going to call it C plus most of what they were writing, because it was clearly

01:05:35.200 --> 01:05:41.280
using a C plus plus compiler, but I don't think it got much beyond C. But the way they managed

01:05:41.280 --> 01:05:45.760
their dependencies or didn't, everything depended on everything else. And the build times were

01:05:45.760 --> 01:05:50.960
staggering and shocking. We ended up building an isolation layer between our company and the rest

01:05:51.680 --> 01:05:57.520
as a result, because it's just like we got so used to fast build times on these platforms. And

01:05:57.520 --> 01:06:02.240
it's just that idea of like, yeah, I can, you know, how good is your coupling? I can either measure

01:06:02.240 --> 01:06:05.920
it in joules or I can actually time it. And you see, you know, it's kind of like, you know,

01:06:05.920 --> 01:06:11.680
our builds take a lot less time than your builds, because we've got really, we've stripped it right

01:06:11.680 --> 01:06:16.320
down. What is essential? So there's a physical aspect there. But it's not, you know, and again,

01:06:16.320 --> 01:06:20.480
concurrency is this physical one, but concurrency would find difficult to reason about because

01:06:20.480 --> 01:06:24.160
having so many things in motion is not a, it's not a strength of human beings.

01:06:24.720 --> 01:06:29.920
But coupling is, is more a sense of scale is once we've, you know, it's that idea of like,

01:06:29.920 --> 01:06:34.000
there's so a large system is like really understanding what a tangle looks like,

01:06:34.000 --> 01:06:39.040
really understanding that this dependency means that, and they are both limits, we are limited

01:06:39.040 --> 01:06:43.040
by what goes on up here, but in slightly different ways with those two. But I think you're right,

01:06:43.040 --> 01:06:48.320
that they are fundamental. They are, they remind us, they remind us of some of the physics that

01:06:48.320 --> 01:06:54.880
we do encounter in the universe. And coupling certainly entropy in the build. But concurrency

01:06:54.880 --> 01:07:01.040
is, is that point where your idealization lands in the real world. And sometimes it reveals

01:07:01.040 --> 01:07:06.160
assumptions. I've certainly had that with one client there. I remember the one, one client,

01:07:06.160 --> 01:07:10.640
we did this kind of surgery style thing, you know, I had a couple of days there, I ran some

01:07:10.640 --> 01:07:14.960
training, then I had a couple of days, and people would book a morning or an afternoon and kind of,

01:07:14.960 --> 01:07:20.880
I'd go with the tea. And I had one, one team say, Oh, well, yeah, an hour of your time this morning

01:07:20.880 --> 01:07:23.760
would be great. I said, well, no, you can have the full three hours. They said, no, no, we won't

01:07:23.760 --> 01:07:28.480
need that. They walked in. And I remember asking a particular question. I said, you know, looking

01:07:28.480 --> 01:07:34.720
at the code, they were going through. And I said, Oh, so how many threads run through this piece of

01:07:34.720 --> 01:07:38.880
code? Because I was aware they were using threading. How many threads run through this piece of code?

01:07:40.000 --> 01:07:45.040
And there are a number of correct answers to this. Zero is a valid answer, which means this code is

01:07:45.040 --> 01:07:51.840
dead. One is also a valid answer. And many is also a valid answer. I didn't get that. What I got is

01:07:51.920 --> 01:07:57.520
usually one. And I said, That's interesting. What do you mean by usually one? Why would you not say

01:07:57.520 --> 01:08:04.000
that's many? As far as I can say, that's many. Well, what we have is we have a single threaded,

01:08:04.000 --> 01:08:08.640
except, you know, this is single threaded code. Except occasionally, another thread will just

01:08:08.640 --> 01:08:17.200
sneak into this bit here. Threads don't sneak. And they had this mental model of threading that

01:08:17.200 --> 01:08:21.280
was not actually how threading works. They had kind of thought that threading respected the

01:08:21.280 --> 01:08:26.880
natural boundaries of the language and statements and blocks and things like that. And they had,

01:08:26.880 --> 01:08:31.120
and they said, Well, it only happens occasionally. I said, Well, you know, you only need to fail

01:08:31.120 --> 01:08:34.320
occasionally. You know, there's, I said, there's a race condition waiting to happen here, because

01:08:34.320 --> 01:08:37.840
you see you load this and then you validate this here. What if something else sneaks in at this

01:08:37.840 --> 01:08:41.760
point and you've got an unvalidated, it's just like, and it's kind of like one person looks at

01:08:41.760 --> 01:08:44.880
another said, You know, that might explain this intermittent bug we've been having.

01:08:45.120 --> 01:08:51.680
And they said, What should we do? Should we add locks everywhere? And I said, No, no, no, no.

01:08:51.680 --> 01:08:57.040
Actually, what you need to do is take, take a step back here. Your, the problem is not to add,

01:08:57.040 --> 01:09:01.200
but actually to sort of say, Well, why are you doing this? What they were doing was a lazy load.

01:09:01.760 --> 01:09:05.440
Yeah. And, and, and it's a case of like, why are you doing the lazy load here? And they said,

01:09:05.440 --> 01:09:10.000
Well, we don't know the reasons are lost to time. But I said, because the problem goes away, if you

01:09:10.000 --> 01:09:15.280
do an eager load, if you do an eager load before it goes multi threaded, then the data you're looking

01:09:15.280 --> 01:09:21.840
at is actually immutable. It's reference data. It's the load that is the state change. And I said,

01:09:21.840 --> 01:09:27.040
let's do, let's do the opposite way rather than add locks. Let's take a step back. I mean, honestly,

01:09:27.040 --> 01:09:30.160
given enough time, I would have removed all the threads from this application. It was not a

01:09:30.160 --> 01:09:34.880
threat application. But, but it was a case of, you know, actually take the opposite view.

01:09:35.600 --> 01:09:39.520
This is a question of time, you're doing the load at the wrong time, you're doing, you should be

01:09:39.520 --> 01:09:43.520
doing the load before you go multi threaded. And if you do that, then the problem solves itself.

01:09:43.520 --> 01:09:48.720
But it's that shift in time and perspective. But my favorite bit, again, to do with time was when,

01:09:48.720 --> 01:09:52.320
when the, when the lead in the room said, you know, we might need more than that one hour,

01:09:52.320 --> 01:09:59.440
Kevlin now. Because when I said, do you have code like this? Again, it's because it's not,

01:10:00.000 --> 01:10:03.360
and it's not to criticize because that's the whole point. It goes back to say, I said earlier,

01:10:03.360 --> 01:10:07.920
we are always operating with incomplete knowledge, and we are built filled with assumptions.

01:10:08.160 --> 01:10:11.760
Until you've actually run into those, you don't realize what you're missing.

01:10:12.720 --> 01:10:16.640
And you, and you don't realize the magnitude of either how well you've done something or

01:10:16.640 --> 01:10:20.560
actually how wrong you've understood something. So, oh, actually, no, I'm using completely

01:10:20.560 --> 01:10:24.480
the wrong mental model for thinking about this. And that mental model

01:10:26.240 --> 01:10:30.320
has informed how I've structured the software, you know, the software is kind of like applied

01:10:30.320 --> 01:10:35.760
thought. And that mental model, it's off. And we, so that's the squishy human bit,

01:10:35.760 --> 01:10:39.440
that's the learning bit, but it's also the bit we need to be more, we need to sort of say,

01:10:39.440 --> 01:10:44.320
yeah, we need to have a bigger process that is tolerant of the fact that we are imperfect.

01:10:44.880 --> 01:10:48.560
And we can't know everything. And that's the whole point. This team had not really interacted

01:10:48.560 --> 01:10:54.720
with that and had not accommodated that idea at that level. And most teams, I don't think have,

01:10:54.720 --> 01:10:58.560
I think it's a very difficult thing for us to do. It's almost against the culture and the nature

01:10:58.560 --> 01:11:04.400
of software development in many companies. I think you're absolutely right. And to give me,

01:11:04.400 --> 01:11:09.920
bringing it back around to my stuff. But I think that's one of the things that

01:11:10.880 --> 01:11:15.440
treating this more like an engineering discipline ought to be able to give us.

01:11:15.440 --> 01:11:21.680
It's just those disciplines of just being able to just recognizing that we don't know the answers

01:11:21.680 --> 01:11:26.960
when we're starting out, recognizing that we're probably not going to be right. Therefore,

01:11:26.960 --> 01:11:31.680
working more experimentally, therefore, working to control, manage the complexity of the systems

01:11:31.680 --> 01:11:35.920
that we build and to measure things and to try stuff out. And all of those sorts of things,

01:11:36.960 --> 01:11:43.680
test-driven development is certainly part of that for me deeply. But I think that mindset

01:11:44.400 --> 01:11:49.680
is so important. One of the other kind of deep properties, it seems to me of software,

01:11:50.240 --> 01:11:57.040
is that unlike lots of other things, it's actually very easy to start. You can learn to

01:11:57.040 --> 01:12:02.960
write your first simple lines of code in a few minutes. If you've done a little bit of algebra,

01:12:02.960 --> 01:12:11.440
at least, it's trivial to just do your first easy, trivial bits of code. But it's deceptive because

01:12:13.040 --> 01:12:16.960
you don't go very far before you get into some of these more complicated things that we've been

01:12:16.960 --> 01:12:24.080
talking about. And as soon as you start thinking about things like concurrency, that's really hard

01:12:24.160 --> 01:12:30.560
for the best people in the world. It's one of those things about Martin Thompson. They're world

01:12:30.560 --> 01:12:35.920
class experts at some of these stuff. But they're still, they think really hard and worry about

01:12:37.600 --> 01:12:42.160
shared data at any point and all these kinds of things. So to be able to manage this sort of

01:12:42.160 --> 01:12:48.000
stuff, it's an interest. I think that's one of the beauties of it. It's a challenge of it that's

01:12:48.000 --> 01:12:53.600
delightful. But also, very risky. I've been talking to a few people recently about

01:12:55.120 --> 01:13:01.200
low code solutions. And I think that my take is that many of those sorts of systems

01:13:01.760 --> 01:13:06.560
suffer from that kind of failing because they assume that it's the almost, that it's the typing

01:13:06.560 --> 01:13:12.080
of the code that's the hard part, where it's these broader design concepts and how we organize

01:13:12.080 --> 01:13:16.800
the information in ways that we can make a mistake and come back to it in future and correct it.

01:13:17.680 --> 01:13:24.240
Identify the mistake. The identification, the recognition of how things, as you say,

01:13:24.240 --> 01:13:29.760
is deceptive. Things can get very messy very quickly. And we see that. So I've given a few

01:13:30.400 --> 01:13:34.080
partly as a result of failure screens. I've given a few talks on software failures and the

01:13:34.080 --> 01:13:40.480
natures of failures and what contribute to them. But one area of enduring fascination for me is

01:13:40.480 --> 01:13:44.320
spreadsheets, which I find absolutely fascinating because it takes a good idea and implements it

01:13:44.320 --> 01:13:51.280
incredibly badly. In the sense of vision, people find grid forms, it's very, very intuitive.

01:13:51.280 --> 01:13:56.400
There's, you know, I mean, what kid doesn't like square paper, you know, this kind of stuff. It's

01:13:56.400 --> 01:13:59.840
like, we like laying things out in grids and tables and all the rest of it. This is incredibly

01:13:59.840 --> 01:14:03.520
intuitive. And it's, it's a very, to be fair, that might just be you and me.

01:14:05.760 --> 01:14:09.920
Yeah, this might be a conversation. Obviously, anybody else in the comments is free to add in.

01:14:09.920 --> 01:14:18.160
But, you know, this whole thing is incredibly intuitive at that level. But the problem is

01:14:18.160 --> 01:14:25.360
there are two very fundamental issues that scupper spreadsheets and make them massively error prone.

01:14:25.360 --> 01:14:32.720
One is, well, three, let me raise that to three. Okay. One is the fact that you end up with a lot

01:14:32.720 --> 01:14:37.600
of interdependencies very, very quickly. If you're doing anything that is reasonable.

01:14:38.560 --> 01:14:43.840
And then the next bit, and they're all invisible. This is the one, and that this is,

01:14:43.840 --> 01:14:47.280
this is the one thing that as a software developer, you kind of look at spreadsheet and go, well,

01:14:47.280 --> 01:14:51.680
that's a nice start. But where's the button that I pressed that shows me all the dependencies

01:14:52.400 --> 01:14:56.720
between everything you've hidden all of the code, you've hidden a bit that actually makes it

01:14:56.720 --> 01:15:02.080
that shows me the structure and therefore reveals my assumptions. You've actually, and I understand.

01:15:02.640 --> 01:15:06.160
And there's no real mechanism for me to step back to safety when I screw it up.

01:15:06.880 --> 01:15:12.000
Yeah, well, yeah. But there's that idea that we've lost the bit. In other words, what we've done is

01:15:12.000 --> 01:15:18.160
we've presented the veneer and treated that as the whole was no software spreadsheets have a deep

01:15:18.160 --> 01:15:23.600
structure. But I, you know, honestly, even just using something like even a word document has

01:15:23.600 --> 01:15:31.360
better structure, structure tools than Excel. In Excel, I can go in and I've got the grid. That's

01:15:31.360 --> 01:15:36.000
it. I'm done. That is my abstraction. That's the level at which I'm invited to think.

01:15:36.160 --> 01:15:40.000
The code is fragmented and scattered around the relationships are thrown to the winds.

01:15:40.000 --> 01:15:45.680
It's a matter of detective work and archaeology to recover them. Whereas a whereas when I work with

01:15:45.680 --> 01:15:52.000
a document, and this is, you know, this, this is true of many different editors and word processes,

01:15:52.000 --> 01:15:55.760
I can get a high level structure, I can do an outline structure, I can say show me the dependencies,

01:15:55.760 --> 01:16:01.120
show me the cross references to this kind of stuff. In other words, it's spreadsheets are

01:16:01.120 --> 01:16:05.040
absolutely, you know, they are an absolute mess. And I always say this and somebody says,

01:16:05.040 --> 01:16:09.600
oh, but users find them intuitive. They find them intuitive to use. But they, it's like walking,

01:16:09.600 --> 01:16:13.600
it's like walking to a minefield. You can walk into a minefield incredibly easily.

01:16:13.600 --> 01:16:17.360
The problem is we have been depriving and I think this is, you know, actually, I'm going to,

01:16:17.360 --> 01:16:21.040
I'm going to push this one right back to the profession here. We've been depriving people

01:16:21.040 --> 01:16:26.880
of the things that we know. Because we know that a spreadsheet is a, it's got a terrible

01:16:26.880 --> 01:16:33.280
type system. It's astonishingly bad. And if anybody ever throws up the argument of backward

01:16:33.280 --> 01:16:40.320
compatibility, that is an absolute nonsense. We've actually seen formats for documents change

01:16:40.320 --> 01:16:45.760
on a five to 10 year cycle. There's no backward compatibility issue here at all with things

01:16:45.760 --> 01:16:50.880
like Excel. That's a myth. You know, you're looking at a five-year window at most. Explain to me why

01:16:50.880 --> 01:16:56.320
it is that my, my Excel looks like it was developed 30 years ago, but everything else that I'm using

01:16:56.320 --> 01:17:01.920
looks like it was developed in at least the last decade. Why, why is Excel failed to take on board

01:17:01.920 --> 01:17:06.720
all of these other tools that we know to show dependencies? And the third thing to come back

01:17:06.720 --> 01:17:12.000
to is that people don't realize that there are these issues. So they therefore, they, they, they

01:17:12.000 --> 01:17:17.280
scale up very, very, very poorly. They, they embed many mistakes. Now, the point here is what

01:17:17.280 --> 01:17:19.840
the reason I'm riffing on this is because you talked about the low code stuff.

01:17:20.720 --> 01:17:25.840
Spreadsheets are by far and away the world's most successful low code to low code solution.

01:17:25.840 --> 01:17:31.440
And, and anybody who hopes to rival that is just kidding themselves. I'm going to say that right

01:17:31.440 --> 01:17:35.600
now, you know, I'm not predicting the future. It's just like those here are very particular

01:17:35.600 --> 01:17:41.120
strives. They have embedded themselves in a particular way, you know, in a particular world

01:17:41.120 --> 01:17:47.040
and they've, and they're very current. They are ubiquitous. But if anybody wants to learn how

01:17:48.400 --> 01:17:52.160
to do and how not to do, learn from its successes and learn from its failures,

01:17:52.160 --> 01:17:56.960
and what are the things that it's good at and not good at, and then also go back through the

01:17:56.960 --> 01:18:02.560
history of 4GLs. And what you'll discover is that you, what there's a, there's a, there's a line

01:18:02.560 --> 01:18:06.880
that you're looking to draw. And you need to understand that it's not universal. There's

01:18:06.880 --> 01:18:11.120
a line here. You need to work out where it is. It's like, this is the bit that allows people

01:18:11.120 --> 01:18:15.600
the convenience they want. And then there's this other bit that's incredibly hard. If you're, if

01:18:15.600 --> 01:18:18.720
you're assuming that they can do, you're going to, you're, they're going to be in for a big and

01:18:18.720 --> 01:18:23.680
nasty shock. And we're just going to be throwing more stuff over the wall at other people for,

01:18:23.680 --> 01:18:28.160
oh, we need to customize this all. Oh, this is something that we knocked up. And, you know,

01:18:28.160 --> 01:18:32.000
but we're having a couple of problems with it. And then kind of suddenly, yes, that it, you know,

01:18:32.000 --> 01:18:35.840
it's just like, at this point, they suddenly discover that they are, in fact, an Olympic

01:18:35.840 --> 01:18:40.800
runner, because that's the only way they can get away from it faster. That we are, if we're not

01:18:40.800 --> 01:18:44.560
doing this one right. So I don't have any grievance with low code. It's just that when people talk

01:18:44.560 --> 01:18:50.560
about it as a general solution, no, what's value. It's a highly specific solution. That's its value.

01:18:50.640 --> 01:18:57.760
That's the value. Yeah. A narrow, narrow, narrow constrained focus. Yeah. That's really good. That

01:18:57.760 --> 01:19:01.760
thing. Yeah. Again, it goes back to this question, this quest for generality that we sometimes have,

01:19:01.760 --> 01:19:06.400
we over generalize, make things, either we end up over generalizing, make things ridiculously

01:19:06.400 --> 01:19:12.080
complex for ourselves, or we end up not over generalizing and forever working around taking

01:19:12.080 --> 01:19:17.680
something that really wasn't. It's, it's, it's, it's that, it's that really, really, you know,

01:19:17.680 --> 01:19:21.680
shades of gray kind of slippery slope over a snake pit,

01:19:24.640 --> 01:19:29.600
mixing my metaphors horribly. But, but, but you, you can't, you kind of go from, you know,

01:19:29.600 --> 01:19:33.600
I'm adding up a column of numbers in my spreadsheet. Cool. That's really nice. It's really good for

01:19:33.600 --> 01:19:38.480
that to, you know, I've built this thing. And if I change that, it goes and recalculates all of

01:19:38.480 --> 01:19:42.880
these other things. And there's all this, you know, which is an un-maintainable big ball of mud.

01:19:42.880 --> 01:19:48.880
And, you know, there's, there's no, there's no easy way to define the line between, between where

01:19:48.880 --> 01:19:58.800
you step over and it becomes, you know, it's just like you tread carefully, push, push your foot out

01:19:58.800 --> 01:20:03.040
just in front of you, just to, and I think that that is the, again, that feeds back into this

01:20:03.040 --> 01:20:09.600
idea that what we're looking for is, is an approach, a philosophical approach, but a practical

01:20:09.600 --> 01:20:15.360
approach. And, you know, I'm definitely of the school of thought that, I guess, old school

01:20:15.360 --> 01:20:19.280
philosophy, in the sense that philosophy was intended to be a practical thing to help you

01:20:19.280 --> 01:20:22.800
understand life. It was not intended to be abstract and disconnected from life. It was

01:20:22.800 --> 01:20:28.240
intended to be quite the opposite. So for me, this idea of actually what we want from how we

01:20:28.240 --> 01:20:32.400
think about software, we need, we need to understand is like, yeah, it's a bit experimental.

01:20:33.040 --> 01:20:37.760
There's, there's, there's things that are unknown. And actually, not only is that okay,

01:20:37.760 --> 01:20:44.080
but that's actually part of the job. It's not just acceptable. It is the job. It is the job.

01:20:44.080 --> 01:20:49.440
It is the job. So, so, so I've, I've, I've just become aware of the time we've, the amount of time

01:20:49.440 --> 01:20:53.440
we were talking about time and now we're aware of it. It's been so, so much fun having the

01:20:53.440 --> 01:20:59.520
conversation, but let's try and, let's try and run this off. So, so, so if you, if you could,

01:21:00.080 --> 01:21:08.240
if you could summarize this, what's, what's the advice, what do you think is the advice

01:21:08.240 --> 01:21:15.600
that we should give people to help walk this, walk this tightrope, explore, you know,

01:21:15.600 --> 01:21:19.440
walk into the, into your room of Lego with bare feet.

01:21:19.440 --> 01:21:22.480
Yeah. Well, I guess, I guess the simple one is runaway.

01:21:23.440 --> 01:21:31.520
That's the only, I think it's really to, to understand that what the challenges that you are,

01:21:32.960 --> 01:21:36.960
the challenge and the joy. Let's, let's, let's, I think we're all, we're always

01:21:36.960 --> 01:21:40.160
putting up challenges. I think we all need to accept that sometimes the challenge is the fun bit.

01:21:40.880 --> 01:21:45.120
You know, it has two, two aspects to it. The challenge and the fun is that you are working

01:21:45.120 --> 01:21:49.520
with incomplete knowledge. There is a joy to learning something. And there can also be a joy

01:21:49.520 --> 01:21:55.280
in discovering better solutions, alternative solutions, penny dropping moments where you go,

01:21:55.280 --> 01:21:59.600
you know what, I've been thinking about this wrong. And, you know, yes, I've over-abstracted.

01:21:59.600 --> 01:22:03.920
This really is just a string. The abstractions I wanted to do are over here.

01:22:04.800 --> 01:22:09.120
Those are the points that I love those run. Oh, shit. I was thinking of it wrong. And now I can

01:22:09.120 --> 01:22:13.360
see a new, new path. That's the thing. And it's the case of like, or I've been devoting my effort

01:22:13.360 --> 01:22:17.120
to this, but actually the fun is over here. If I reframe the problem, in other words,

01:22:17.200 --> 01:22:22.880
it's that idea of take a step back. And I think a little bit, a little bit

01:22:24.080 --> 01:22:28.560
something, I keep reading to do a talk called slow agile. I think I'm probably going to do it at some

01:22:28.560 --> 01:22:34.160
point. But it's this idea that although we often use the language of fast in connection with many

01:22:34.160 --> 01:22:38.320
of our practices, I think sometimes there's a different emphasis I might want to give, which is

01:22:40.000 --> 01:22:44.400
that some of what we're trying to do is to do things sooner, as opposed to faster, which is not

01:22:44.480 --> 01:22:49.200
quite the same thing. Yes, I'll use the phrase. I think that might what you might be saying is

01:22:49.200 --> 01:22:55.040
the phrase that I use is small steps. Yeah. And small steps are a way of achieving it.

01:22:56.080 --> 01:22:59.680
And I was just talking to a group today about refactoring. I was trying to

01:23:00.320 --> 01:23:04.240
emphasise to them, you know, in terms of all the design practices and so on. I said, there's a

01:23:04.240 --> 01:23:11.840
difference between running and walking. And there's a very simple idea that running is defined by

01:23:11.840 --> 01:23:16.320
the fact that at various points, you have zero points of contact with the ground. If you watch

01:23:16.320 --> 01:23:21.600
somebody running, it's 0101. If you watch somebody walking, it's 1212. There is always at least one

01:23:21.600 --> 01:23:28.880
point of contact with the ground. And now what does this mean? It means you move from moment to

01:23:28.880 --> 01:23:35.840
moment more slowly. But you are also moving with more certainty and more sureness and the ability

01:23:35.840 --> 01:23:40.320
to change your direction. If you try changing your direction when you are running, or when you

01:23:40.400 --> 01:23:45.520
stumble when you're running, and I have relatively recent personal experience of this, and I can

01:23:45.520 --> 01:23:51.600
say it hurt an awful lot and I was not able to walk for a few weeks. Whereas had I had that fall

01:23:51.600 --> 01:23:55.600
when I was walking, I would have just got up and walked off. The point there is that

01:23:56.480 --> 01:24:00.480
software development is not a race. Although we use the language of fast, the time scales

01:24:00.480 --> 01:24:05.440
we're thinking of, sometimes it encourages the wrong behaviour, I think. It's again one of those

01:24:05.440 --> 01:24:09.680
things when what I use a word and somebody else picks up, oh, they're talking about raw speed.

01:24:10.000 --> 01:24:14.720
We're not trying to optimise for speed of development. What we observe is the speed of

01:24:14.720 --> 01:24:19.840
development or the speed of deployment. But the thing, it's not the pedal to the metal.

01:24:19.840 --> 01:24:25.360
You're just going to exhaust all your developers and exhaust their capacity to think creatively.

01:24:25.360 --> 01:24:30.800
It's the idea that actually what we need to be doing is walking. It is the idea of stability.

01:24:30.800 --> 01:24:35.680
It's the idea of like, oh, that's not right. Let me just pull back a moment. It's the small steps.

01:24:36.480 --> 01:24:41.600
Let's roll back and take a different path. Whether that rollback is a version control rollback,

01:24:41.600 --> 01:24:46.240
whether that rollback is a conceptual rollback, whatever it means is the idea that we have given

01:24:46.240 --> 01:24:52.960
ourselves the opportunity to pay attention to what we're doing. When you are moving at high

01:24:52.960 --> 01:24:56.720
speed, you're not paying attention to your surroundings. All of this talk of feedback just

01:24:56.720 --> 01:25:03.120
disappears in the wind. The whole point is you are sensing your way and that you are adjusting

01:25:03.120 --> 01:25:08.560
according to that. And it's your feet on the carpet type thing. It's the sensing

01:25:08.560 --> 01:25:14.640
your way. How are we doing? I originally intended this, but now I see this. Why? Because I can,

01:25:14.640 --> 01:25:19.440
because I've taken the time to do that. I'm not individually, as a human being, remember it's

01:25:19.440 --> 01:25:25.520
all about people ultimately, me to appreciate which formal approach I'm going to take, which

01:25:25.520 --> 01:25:31.280
structure, which choices, which modules I am going to select, or my criteria for modularity,

01:25:31.360 --> 01:25:36.560
which ones I'm going to do here as opposed to there. That's going to take a deliberation that

01:25:36.560 --> 01:25:41.520
doesn't happen when you're exhausted and running at speed. It's not a productivity conversation.

01:25:41.520 --> 01:25:44.960
So I think for me, most of the advice I give people is just like, honestly,

01:25:44.960 --> 01:25:56.080
go a little bit slower because you'll go faster. That's great. I hadn't thought of it in those

01:25:56.080 --> 01:26:01.280
words, which is always interesting, and always an interesting thing, but still was reinforcing

01:26:01.280 --> 01:26:07.280
my prejudices. So good both ways around. He gave me some new things to think about

01:26:08.320 --> 01:26:13.840
and reinforce my prejudices, which is great. I've really enjoyed the talk today. Thank you

01:26:13.840 --> 01:26:21.520
so much for taking part. Thank you, Dave. It was a fun exploration. Please do check out

01:26:21.520 --> 01:26:30.560
Kevlin. Check his Google Unique name. You'll find his stuff, and lots of good books that Kevlin's

01:26:30.560 --> 01:26:37.040
written as well. So thanks, Kevlin, very much indeed. And I'll let you know when the video is

01:26:37.040 --> 01:26:46.960
available. Thank you. Thank you very much, Dave. That's brilliant.

