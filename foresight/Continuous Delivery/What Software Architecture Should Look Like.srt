1
00:00:00,000 --> 00:00:05,360
Wikipedia defines software architecture as the functional structures of a software system

2
00:00:05,360 --> 00:00:08,760
and the discipline of creating such structures and systems.

3
00:00:08,760 --> 00:00:13,960
Well, you can kind of see what they mean, but it's a pretty dry definition and it raises

4
00:00:13,960 --> 00:00:17,120
as many questions as it really answers.

5
00:00:17,120 --> 00:00:20,120
After all, what does fundamental mean anyway?

6
00:00:20,120 --> 00:00:23,960
And for that matter, what does structure mean in this context too?

7
00:00:23,960 --> 00:00:28,680
The last bit is really only saying architecture is produced by a disciplined approach to

8
00:00:28,680 --> 00:00:30,800
architecting things.

9
00:00:30,800 --> 00:00:36,580
To be fair to Wikipedia, this is a difficult idea to nail down, even though I think that

10
00:00:36,580 --> 00:00:40,680
most of us would agree that it's an important one in some way.

11
00:00:40,680 --> 00:00:44,240
So here is my take on software architecture.

12
00:00:44,240 --> 00:00:51,040
What does it mean and what does it take to do a good job of it?

13
00:00:51,040 --> 00:00:57,720
Hi, I'm Dave Farley of Continuous Delivery.

14
00:00:57,720 --> 00:00:59,080
Welcome to my channel.

15
00:00:59,080 --> 00:01:02,360
If you haven't been here before, please do hit subscribe.

16
00:01:02,360 --> 00:01:05,920
And if you enjoy the content today, hit like as well.

17
00:01:05,920 --> 00:01:12,400
I'd like to begin by thanking our sponsors, equal experts, Octopus, SpeckFlow and Linode.

18
00:01:12,400 --> 00:01:16,320
They're all helping us to develop the channel, so please do check their links in the description

19
00:01:16,320 --> 00:01:18,320
below to support them.

20
00:01:18,320 --> 00:01:23,840
My thinking on software development, design and architecture is deeply informed by what

21
00:01:23,840 --> 00:01:26,920
I think of as an engineering approach.

22
00:01:26,920 --> 00:01:32,560
I describe this generally applicable approach in my new book, Modern Software Engineering.

23
00:01:32,560 --> 00:01:36,080
It's doing rather well in the rankings on Amazon at the moment, and he's collecting

24
00:01:36,080 --> 00:01:38,800
some very nice reviews, so do check it out.

25
00:01:38,800 --> 00:01:42,520
There's a link to that in the description below too.

26
00:01:42,520 --> 00:01:46,600
I think of myself as a software developer.

27
00:01:46,600 --> 00:01:51,160
Probably more accurately these days, I'm a consultant first and a developer second.

28
00:01:51,160 --> 00:01:55,400
But I also spent a considerable part of my career being called a software architecting

29
00:01:55,400 --> 00:01:57,120
one form or another.

30
00:01:57,120 --> 00:02:03,040
I couldn't then and can't now tell you any significant difference in my focus between

31
00:02:03,040 --> 00:02:07,480
the times when I was called a developer and the times when I was called an architect.

32
00:02:07,480 --> 00:02:11,640
Ultimately, I think this is about design.

33
00:02:11,640 --> 00:02:15,240
Maybe it's about design at different scales, but I confess that I'm rather skeptical of

34
00:02:15,240 --> 00:02:16,760
that.

35
00:02:16,760 --> 00:02:22,280
The slippery nature of defining architecture as design on a bigger scale is that design

36
00:02:22,280 --> 00:02:25,280
in information systems is kind of fractal.

37
00:02:25,280 --> 00:02:30,560
There are things that matter at all levels of detail, and there are tiny details that

38
00:02:30,560 --> 00:02:35,520
will invalidate grand assumptions, and there are grand assumptions that can prevent effective

39
00:02:35,520 --> 00:02:38,440
progress at the level of tiny detail.

40
00:02:38,440 --> 00:02:44,080
A popular description of software architecture comes from Grady Butch, who says, architecture

41
00:02:44,080 --> 00:02:49,840
represents the significant design decisions that shape a system, where significance is

42
00:02:49,840 --> 00:02:52,840
measured by cost of change.

43
00:02:52,840 --> 00:02:57,560
I don't disagree with this definition, but I don't like it very much.

44
00:02:57,560 --> 00:03:03,780
It implies that these are the details that we need to get right at the start to succeed.

45
00:03:03,780 --> 00:03:08,800
It makes some sense if we're looking retrospectively at a system, but it's a pretty poor guide

46
00:03:08,800 --> 00:03:09,960
to building one.

47
00:03:09,960 --> 00:03:10,960
Be omniscient.

48
00:03:10,960 --> 00:03:15,360
For something this complex, that simply isn't going to happen.

49
00:03:15,360 --> 00:03:19,640
For me, there's only one approach to architecture that makes any sense at all.

50
00:03:19,640 --> 00:03:23,200
It has to be an evolutionary process.

51
00:03:23,200 --> 00:03:27,840
We will guide the design of our system by modifying the constraints that we apply to

52
00:03:27,840 --> 00:03:29,520
that design.

53
00:03:29,520 --> 00:03:35,460
These constraints, or rules of the road, are what we think make sense at any given point.

54
00:03:35,460 --> 00:03:38,320
These form an important aspect of our architecture.

55
00:03:38,320 --> 00:03:43,400
We create a kind of tourist map of the system that we can use as a tool to guide design

56
00:03:43,400 --> 00:03:44,400
choices.

57
00:03:44,400 --> 00:03:47,660
Here's the tourist map from one of my systems.

58
00:03:47,660 --> 00:03:51,900
This map guides the evolution of the system in the direction of the outcomes that we aim

59
00:03:51,900 --> 00:03:53,340
to achieve.

60
00:03:53,340 --> 00:03:58,380
If we're doing a good job, we'll discover our inevitable mistakes and update our tourist

61
00:03:58,380 --> 00:04:00,740
map as our understanding deepens.

62
00:04:00,740 --> 00:04:05,000
Let's try and walk into this problem a little bit more carefully.

63
00:04:05,000 --> 00:04:09,700
One great definition of software architecture is, it's the stuff that we wish we'd got

64
00:04:09,700 --> 00:04:12,200
right at the start of a project.

65
00:04:12,200 --> 00:04:16,780
Perhaps a little more helpfully, it's the shared understanding that the expert developers

66
00:04:16,780 --> 00:04:19,860
have of the system design.

67
00:04:19,860 --> 00:04:22,540
Both of these definitions come from Ralph Johnson.

68
00:04:22,540 --> 00:04:25,420
I'd add a couple of words to the second.

69
00:04:25,420 --> 00:04:29,940
It's a snapshot of the shared understanding of the expert developers.

70
00:04:29,940 --> 00:04:34,500
You hope it doesn't change too often, but you should expect it to change.

71
00:04:34,500 --> 00:04:40,180
I think that in combination, these definitions get something rather important right.

72
00:04:40,180 --> 00:04:44,180
At the start of any project, we don't yet know the answers, but we still need to make

73
00:04:44,180 --> 00:04:48,740
some guesses about what may work in order to begin.

74
00:04:48,740 --> 00:04:53,460
If we're going to be creating this system as part of a team, we need a way to discuss

75
00:04:53,460 --> 00:04:58,740
design ideas to communicate with each other about the system and think about where different

76
00:04:58,740 --> 00:05:01,180
behaviors of the system will be handled.

77
00:05:01,180 --> 00:05:04,900
Our tourist map will help a lot with these conversations.

78
00:05:04,900 --> 00:05:09,700
Debating new features in front of the tourist map can, we can explore the implications of

79
00:05:09,700 --> 00:05:14,260
our design choices and maybe spot improvements or mistakes in the map.

80
00:05:14,260 --> 00:05:19,420
I like Ralph Johnson's focus on the stuff we wish we got right, rather than a focus

81
00:05:19,420 --> 00:05:21,660
on the stuff we must get right.

82
00:05:21,660 --> 00:05:24,340
We focus on the stuff that worry us.

83
00:05:24,340 --> 00:05:29,580
I like it because we almost certainly won't get it right first time, but it is important

84
00:05:29,580 --> 00:05:31,620
stuff.

85
00:05:31,620 --> 00:05:37,220
That aligns very nicely with my thinking and my approach to development in general, which

86
00:05:37,220 --> 00:05:42,380
is significantly focused on maintaining my freedom to get things wrong.

87
00:05:42,380 --> 00:05:48,300
That probably sounds a bit weird, but I want the freedom to make a mistake and the ability

88
00:05:48,300 --> 00:05:51,380
to learn and recover from it.

89
00:05:51,380 --> 00:05:57,100
For that, we need the ability to contain the complexity and to manage it.

90
00:05:57,100 --> 00:06:02,500
Fundamentally, the architecture of our system is realized in the shapes that we make with

91
00:06:02,500 --> 00:06:04,220
our code.

92
00:06:04,220 --> 00:06:06,620
All software has an architecture.

93
00:06:06,620 --> 00:06:09,220
In some of them, though, it happened by accident.

94
00:06:09,220 --> 00:06:14,180
In others, it was worked on with great care and grew to be something good.

95
00:06:14,180 --> 00:06:19,700
Good architecture allows us to isolate one part of the problem from another.

96
00:06:19,700 --> 00:06:20,860
This could be functional.

97
00:06:20,860 --> 00:06:24,700
Let's create services aligned with bounded contexts so that they can change more independently

98
00:06:24,700 --> 00:06:26,180
of one another.

99
00:06:26,180 --> 00:06:29,460
Or it could be, in the jargon of architects, non-functional.

100
00:06:29,460 --> 00:06:35,100
Let's shard the data in our system so that it can scale linearly as demand rises.

101
00:06:35,100 --> 00:06:40,660
Our formal approaches to architecture often discuss architectural measures of quality.

102
00:06:40,660 --> 00:06:43,180
This is the list from ISO.

103
00:06:43,180 --> 00:06:49,380
I can see how talking about the illities of a system can help, but in reality, I don't

104
00:06:49,380 --> 00:06:53,860
really buy into the idea of non-functional requirements very much.

105
00:06:53,860 --> 00:06:58,700
Inside every non-functional requirement is a feature of the system that users care about.

106
00:06:58,700 --> 00:07:01,580
If not, why are we doing it at all?

107
00:07:01,580 --> 00:07:06,540
Even something as seemingly self-centered as making our code maintainable is really

108
00:07:06,540 --> 00:07:13,180
about ensuring our ability to continue to deliver value to our users in the future.

109
00:07:13,180 --> 00:07:19,020
These things, security, performance, scalability, testability, deployability, resilience, and

110
00:07:19,020 --> 00:07:24,620
so on, are behaviors of our system as much as taking payment with a credit card.

111
00:07:24,620 --> 00:07:28,220
We have to design the system to exhibit these behaviors.

112
00:07:28,220 --> 00:07:33,140
If we are sensible, we will design our system to manage the complexity of these things by

113
00:07:33,140 --> 00:07:37,260
compartmentalizing them from other behaviors where we can.

114
00:07:37,260 --> 00:07:42,220
The reason that people get worried about these kinds of qualities of a system and try to

115
00:07:42,220 --> 00:07:48,020
teach them somewhat differently is that they tend to have a broader impact than many features.

116
00:07:48,020 --> 00:07:55,180
You can't usually fix security or scalability or resilience in a single place in your system.

117
00:07:55,180 --> 00:08:00,220
These are often referred to as cross-cutting concerns, but that doesn't mean that these

118
00:08:00,220 --> 00:08:05,540
things are architectural concerns, and other things are not.

119
00:08:05,540 --> 00:08:10,860
These are just behaviors that people often forget about while chasing other kinds of features.

120
00:08:10,860 --> 00:08:15,060
Whether you call yourself an architect or not, and whether you work in a big team or

121
00:08:15,060 --> 00:08:20,900
alone for any given piece of software, you need to decide how it should behave.

122
00:08:20,900 --> 00:08:26,740
And that means how you process credit cards or what color your buttons are, as well as

123
00:08:26,740 --> 00:08:31,020
is it okay to leak money to attackers or fall over when there are more than three people

124
00:08:31,020 --> 00:08:32,860
using it.

125
00:08:32,860 --> 00:08:36,460
This is our responsibility as software developers.

126
00:08:36,460 --> 00:08:41,940
For some types of systems, some of these problems are genuinely difficult, and it helps a lot

127
00:08:41,940 --> 00:08:47,860
when you have smart, experienced people on the team who have seen ways to cope before.

128
00:08:47,860 --> 00:08:52,140
But that doesn't mean that architecture is somebody else's problem.

129
00:08:52,140 --> 00:08:57,700
Whether you are in your first day on the job or a grisled veteran, your decisions may impact

130
00:08:57,700 --> 00:09:00,300
on the architecture of the system.

131
00:09:00,300 --> 00:09:04,220
This is another of those slippery aspects of software.

132
00:09:04,220 --> 00:09:09,660
There is very little distance between what looks like a small change and that small change

133
00:09:09,660 --> 00:09:12,020
having a massive impact.

134
00:09:12,020 --> 00:09:18,220
In fact, the only things between that being true are luck or a good working design and

135
00:09:18,220 --> 00:09:23,460
architecture that we understand and can use to guide our fine-grained decisions.

136
00:09:23,460 --> 00:09:29,420
So that gives us another step forward in understanding this complex concept a little better.

137
00:09:29,420 --> 00:09:35,980
The architecture of our software is the collection of constraints that we agree to adopt and maintain

138
00:09:35,980 --> 00:09:40,620
that will provide us some protection from making dumb mistakes.

139
00:09:40,620 --> 00:09:45,180
My preference is to engage every developer, whatever their experience in architectural

140
00:09:45,180 --> 00:09:50,540
discussions, allowing everyone to develop their own understanding of the architecture

141
00:09:50,540 --> 00:09:54,820
and to contribute to it as development proceeds.

142
00:09:54,820 --> 00:09:59,940
Architect as a job description has seen a bit of a decline in recent years.

143
00:09:59,940 --> 00:10:06,140
This is mostly in response to agile development's reaction against big upfront design.

144
00:10:06,140 --> 00:10:12,620
The problem with this is, as Dave Thomas famously said, big upfront design is dumb,

145
00:10:12,620 --> 00:10:15,220
no upfront design is dumber.

146
00:10:15,220 --> 00:10:18,940
So we need to start somewhere, but where?

147
00:10:18,940 --> 00:10:24,340
The real answer is that you make a guess based on your understanding of the problem so far

148
00:10:24,340 --> 00:10:26,420
and your experience.

149
00:10:26,420 --> 00:10:32,180
If you're any good at this kind of thing, you try to treat this guess as an experiment.

150
00:10:32,180 --> 00:10:34,660
How could you show that your guess is wrong?

151
00:10:34,660 --> 00:10:36,180
Try that.

152
00:10:36,180 --> 00:10:41,620
Working incrementally, whether in fine grained design or big picture architecture, is essential

153
00:10:41,620 --> 00:10:44,940
to doing a good job of anything complex.

154
00:10:44,940 --> 00:10:50,300
There's a caveat to this, but as ever, you need to understand the trade-offs.

155
00:10:50,300 --> 00:10:56,540
If the problem that you are solving is pretty common, then you could adopt a tried and tested

156
00:10:56,540 --> 00:11:00,580
architectural approach and off the peg architecture if you like.

157
00:11:00,580 --> 00:11:06,260
This is a good idea, as long as you understand the constraints and the fit of that architecture

158
00:11:06,260 --> 00:11:08,260
to your problem.

159
00:11:08,260 --> 00:11:13,060
Because the other big problem with software architecture as an idea is that there's no

160
00:11:13,060 --> 00:11:18,100
one size fits all, there's no such thing as a generically good architecture.

161
00:11:18,100 --> 00:11:24,820
Rather, it's a matter of whether a particular architecture fits the needs of the system.

162
00:11:24,820 --> 00:11:30,220
One of the most successful widely applicable architectures was a layered system backed

163
00:11:30,220 --> 00:11:36,180
up by a relational database, something like this, a UI, some logic, and a database.

164
00:11:36,180 --> 00:11:41,860
For systems with a moderate number of users and relatively simple crud-style features,

165
00:11:41,860 --> 00:11:43,940
this was a very good choice.

166
00:11:43,940 --> 00:11:49,540
I think that one of the reasons it was a good choice, though, is quite informative.

167
00:11:49,540 --> 00:11:56,020
I think a principal reason that the clever but slow idea of transactions in relational

168
00:11:56,020 --> 00:12:04,060
databases took hold was because it allowed programmers to write multi-user systems without

169
00:12:04,060 --> 00:12:08,380
worrying too much about the horrible complexity of concurrency.

170
00:12:08,380 --> 00:12:13,860
If you open a transaction, read some data, change it, and write it out again, the database

171
00:12:13,860 --> 00:12:18,060
will block any other access to that data while you're dealing with it.

172
00:12:18,060 --> 00:12:23,820
As long as your transaction lasts, it locks access to the data.

173
00:12:23,820 --> 00:12:27,440
This was very good if this architecture fit your problem.

174
00:12:27,440 --> 00:12:30,540
It kept the programming model simple.

175
00:12:30,540 --> 00:12:34,660
It's still good if it fits your problem today, and it fits quite a lot of problems quite

176
00:12:34,660 --> 00:12:35,660
well.

177
00:12:35,660 --> 00:12:40,660
However, as the web grew in influence and massive-scale computing became more common,

178
00:12:40,660 --> 00:12:45,860
having a relational database management system as a synchronization point to your data, a

179
00:12:45,860 --> 00:12:49,180
source of truth simply didn't scale.

180
00:12:49,180 --> 00:12:53,140
So people started experimenting with other approaches.

181
00:12:53,140 --> 00:12:56,900
I was once asked to consult on a huge project.

182
00:12:56,900 --> 00:13:03,780
They had decided to use a NoSQL database as their primary data store, which is fine, but

183
00:13:03,780 --> 00:13:09,300
they'd forgotten or didn't realize the importance of the protection that transactions that

184
00:13:09,300 --> 00:13:12,380
they were more accustomed to had given them.

185
00:13:12,380 --> 00:13:15,660
This NoSQL database wasn't transactional.

186
00:13:15,660 --> 00:13:21,940
No data was shared by multiple processes and written to by multiple processes, and the

187
00:13:21,940 --> 00:13:24,340
results were essentially random.

188
00:13:24,340 --> 00:13:27,660
Whoever wrote last got to store their changes.

189
00:13:27,660 --> 00:13:32,220
Everyone else would lose theirs, and without any indication of the loss.

190
00:13:32,220 --> 00:13:37,180
It made me feel a bit queasy just to think about this big system with all the data shared

191
00:13:37,180 --> 00:13:41,500
and no protection or coordination between concurrent processes.

192
00:13:41,500 --> 00:13:45,900
This was a problem of not really thinking about the architecture of the system, but

193
00:13:45,900 --> 00:13:48,460
only the tools.

194
00:13:48,460 --> 00:13:49,860
That's not the same thing.

195
00:13:49,860 --> 00:13:54,620
A collection of tools alone doesn't make a software architecture.

196
00:13:54,620 --> 00:13:59,460
This team had seen one of the big web companies develop this great-looking NoSQL database to

197
00:13:59,460 --> 00:14:05,620
help them scale up, and it did that, but only in the context of a whole raft of other choices

198
00:14:05,620 --> 00:14:10,820
and constraints that this team hadn't thought to apply.

199
00:14:10,820 --> 00:14:16,100
There is another, somewhat similar, very common mistake that probably is a little closer

200
00:14:16,100 --> 00:14:18,020
to your own software.

201
00:14:18,020 --> 00:14:21,180
Microservices were invented to decouple development.

202
00:14:21,180 --> 00:14:27,180
They're intended to be independently deployable, freeing teams to work separately from other

203
00:14:27,180 --> 00:14:32,260
teams, which means you don't get to test them together before you release.

204
00:14:32,260 --> 00:14:36,020
If you're on Netflix or Amazon, this is fantastic.

205
00:14:36,020 --> 00:14:40,500
If you are a small development shop with a handful of developers, it's almost certainly

206
00:14:40,500 --> 00:14:43,620
overkill and so pretty inefficient.

207
00:14:43,620 --> 00:14:48,580
And worse than that, most teams that I see that claim to practice a microservice approach

208
00:14:48,580 --> 00:14:50,460
aren't.

209
00:14:50,460 --> 00:14:54,340
They don't have independently deployable services, which means that they have to test

210
00:14:54,340 --> 00:14:58,300
them all together before they feel confident to release them.

211
00:14:58,300 --> 00:15:02,660
This is, in fact, a distributed monolith, which is a rather complex choice, good for

212
00:15:02,660 --> 00:15:05,580
some things, but never simple.

213
00:15:05,620 --> 00:15:10,180
I think that software is more complicated than we often think.

214
00:15:10,180 --> 00:15:14,580
So the sensible thing is to approach it with a little bit more caution.

215
00:15:14,580 --> 00:15:19,860
I don't mean that we should agonize for weeks or months before taking the first step, completely

216
00:15:19,860 --> 00:15:25,820
the opposite, in fact, but we should work on the assumption that our best guess so far

217
00:15:25,820 --> 00:15:31,340
is almost certainly wrong, so architect our systems to allow us to recover when we learn

218
00:15:31,340 --> 00:15:34,900
more and find out where it's wrong.

219
00:15:34,900 --> 00:15:41,420
This takes skill, certainly, but it is realistically the only sensible choice in my opinion.

220
00:15:41,420 --> 00:15:46,380
Architecting at a complex system is not something that someone in an ivory tower does at the

221
00:15:46,380 --> 00:15:48,460
start of a project.

222
00:15:48,460 --> 00:15:51,780
It's also only partly intentional.

223
00:15:51,780 --> 00:15:56,540
Like more fine-grained design decisions, it's an iterative incremental exercise in the kind

224
00:15:56,540 --> 00:15:59,300
of guided evolutionary process.

225
00:15:59,300 --> 00:16:05,780
This is not terribly precise, and sometimes, even despite cleverness, expertise and experience,

226
00:16:05,780 --> 00:16:07,780
people get things wrong.

227
00:16:07,780 --> 00:16:13,020
That is, I am afraid, an inevitable consequence of dealing with something as tricky and complex

228
00:16:13,020 --> 00:16:15,020
as software.

229
00:16:15,020 --> 00:16:21,460
A few years ago, a performance optimization strategy in Intel processors meant that encryption

230
00:16:21,460 --> 00:16:27,220
could be broken, obviating all of the clever security architecture features in the web,

231
00:16:27,220 --> 00:16:33,980
cloud, on-premises systems, even mobile devices, and on pretty much every operating system.

232
00:16:33,980 --> 00:16:41,380
That is a salutary lesson in how fragile architecture and design can be to tiny things.

233
00:16:41,380 --> 00:16:46,700
A good way to approach this is to think about the things that you are unsure of.

234
00:16:46,700 --> 00:16:51,780
I was chatting to my friend, Kevin Henney, a few days ago, and we were talking about

235
00:16:51,780 --> 00:16:52,780
design.

236
00:16:52,980 --> 00:16:58,220
As soon as someone says, I don't know, there's a seam in the design.

237
00:16:58,220 --> 00:17:00,660
That's quite a good way to think.

238
00:17:00,660 --> 00:17:05,900
Start the design of your system with your best guesses, based on what you know so far,

239
00:17:05,900 --> 00:17:10,340
and be on the lookout for the things that you don't know or are unsure about.

240
00:17:10,340 --> 00:17:15,020
You don't have to do a depth-first exploration of these things, in fact you shouldn't, but

241
00:17:15,020 --> 00:17:20,060
you do think about how to insulate the stuff that you do understand from the things that

242
00:17:20,060 --> 00:17:21,940
you don't.

243
00:17:21,940 --> 00:17:26,700
Good sketches in code of those things that you don't yet understand and abstraction

244
00:17:26,700 --> 00:17:31,540
can act as placeholders, while you make progress and grow your understanding for the bits

245
00:17:31,540 --> 00:17:33,820
of the code that you do know.

246
00:17:33,820 --> 00:17:38,700
Don't build world-class security into the first sketches of your system.

247
00:17:38,700 --> 00:17:44,180
Don't take on the burden of making your system perfectly scalable from day one, but do design

248
00:17:44,180 --> 00:17:50,380
your system as best as you can imagine so that you will be able to enhance security without

249
00:17:50,380 --> 00:17:55,020
undoing the progress that you've already made, and that you can take advantage of your

250
00:17:55,020 --> 00:18:02,180
great work so far, and allocate it differently so that it does scale up if that's a demand.

251
00:18:02,180 --> 00:18:05,780
Insulate the parts of the system that you understand well from those that you don't

252
00:18:05,780 --> 00:18:07,180
yet.

253
00:18:07,180 --> 00:18:11,700
These kinds of design approaches are at the heart of what I describe in my modern software

254
00:18:11,700 --> 00:18:17,620
engineering book, using the techniques to manage complexity, to give you a chance to

255
00:18:17,620 --> 00:18:23,620
go back and enhance or even correct architecture missteps when you discover them.

256
00:18:23,620 --> 00:18:29,220
When we built our exchange at Elmax, we had three different fundamental attempts at the

257
00:18:29,220 --> 00:18:32,340
basic architecture of our system.

258
00:18:32,340 --> 00:18:38,020
But because we'd taken an incremental approach to its design, only a small part of our effort

259
00:18:38,020 --> 00:18:40,860
was lost on each change.

260
00:18:40,860 --> 00:18:47,420
My final piece of advice on software architecture is to aim to be intentionally a little bit

261
00:18:47,420 --> 00:18:50,240
vague about the detail.

262
00:18:50,240 --> 00:18:55,620
Architecture should guide our decisions with constraints, but in great architecture there

263
00:18:55,620 --> 00:18:58,780
are actually relatively few constraints.

264
00:18:58,780 --> 00:19:03,220
But those that are there are pretty rigidly enforced.

265
00:19:03,220 --> 00:19:07,860
Thank you very much for watching.

