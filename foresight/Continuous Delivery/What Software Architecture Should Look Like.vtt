WEBVTT

00:00.000 --> 00:05.360
Wikipedia defines software architecture as the functional structures of a software system

00:05.360 --> 00:08.760
and the discipline of creating such structures and systems.

00:08.760 --> 00:13.960
Well, you can kind of see what they mean, but it's a pretty dry definition and it raises

00:13.960 --> 00:17.120
as many questions as it really answers.

00:17.120 --> 00:20.120
After all, what does fundamental mean anyway?

00:20.120 --> 00:23.960
And for that matter, what does structure mean in this context too?

00:23.960 --> 00:28.680
The last bit is really only saying architecture is produced by a disciplined approach to

00:28.680 --> 00:30.800
architecting things.

00:30.800 --> 00:36.580
To be fair to Wikipedia, this is a difficult idea to nail down, even though I think that

00:36.580 --> 00:40.680
most of us would agree that it's an important one in some way.

00:40.680 --> 00:44.240
So here is my take on software architecture.

00:44.240 --> 00:51.040
What does it mean and what does it take to do a good job of it?

00:51.040 --> 00:57.720
Hi, I'm Dave Farley of Continuous Delivery.

00:57.720 --> 00:59.080
Welcome to my channel.

00:59.080 --> 01:02.360
If you haven't been here before, please do hit subscribe.

01:02.360 --> 01:05.920
And if you enjoy the content today, hit like as well.

01:05.920 --> 01:12.400
I'd like to begin by thanking our sponsors, equal experts, Octopus, SpeckFlow and Linode.

01:12.400 --> 01:16.320
They're all helping us to develop the channel, so please do check their links in the description

01:16.320 --> 01:18.320
below to support them.

01:18.320 --> 01:23.840
My thinking on software development, design and architecture is deeply informed by what

01:23.840 --> 01:26.920
I think of as an engineering approach.

01:26.920 --> 01:32.560
I describe this generally applicable approach in my new book, Modern Software Engineering.

01:32.560 --> 01:36.080
It's doing rather well in the rankings on Amazon at the moment, and he's collecting

01:36.080 --> 01:38.800
some very nice reviews, so do check it out.

01:38.800 --> 01:42.520
There's a link to that in the description below too.

01:42.520 --> 01:46.600
I think of myself as a software developer.

01:46.600 --> 01:51.160
Probably more accurately these days, I'm a consultant first and a developer second.

01:51.160 --> 01:55.400
But I also spent a considerable part of my career being called a software architecting

01:55.400 --> 01:57.120
one form or another.

01:57.120 --> 02:03.040
I couldn't then and can't now tell you any significant difference in my focus between

02:03.040 --> 02:07.480
the times when I was called a developer and the times when I was called an architect.

02:07.480 --> 02:11.640
Ultimately, I think this is about design.

02:11.640 --> 02:15.240
Maybe it's about design at different scales, but I confess that I'm rather skeptical of

02:15.240 --> 02:16.760
that.

02:16.760 --> 02:22.280
The slippery nature of defining architecture as design on a bigger scale is that design

02:22.280 --> 02:25.280
in information systems is kind of fractal.

02:25.280 --> 02:30.560
There are things that matter at all levels of detail, and there are tiny details that

02:30.560 --> 02:35.520
will invalidate grand assumptions, and there are grand assumptions that can prevent effective

02:35.520 --> 02:38.440
progress at the level of tiny detail.

02:38.440 --> 02:44.080
A popular description of software architecture comes from Grady Butch, who says, architecture

02:44.080 --> 02:49.840
represents the significant design decisions that shape a system, where significance is

02:49.840 --> 02:52.840
measured by cost of change.

02:52.840 --> 02:57.560
I don't disagree with this definition, but I don't like it very much.

02:57.560 --> 03:03.780
It implies that these are the details that we need to get right at the start to succeed.

03:03.780 --> 03:08.800
It makes some sense if we're looking retrospectively at a system, but it's a pretty poor guide

03:08.800 --> 03:09.960
to building one.

03:09.960 --> 03:10.960
Be omniscient.

03:10.960 --> 03:15.360
For something this complex, that simply isn't going to happen.

03:15.360 --> 03:19.640
For me, there's only one approach to architecture that makes any sense at all.

03:19.640 --> 03:23.200
It has to be an evolutionary process.

03:23.200 --> 03:27.840
We will guide the design of our system by modifying the constraints that we apply to

03:27.840 --> 03:29.520
that design.

03:29.520 --> 03:35.460
These constraints, or rules of the road, are what we think make sense at any given point.

03:35.460 --> 03:38.320
These form an important aspect of our architecture.

03:38.320 --> 03:43.400
We create a kind of tourist map of the system that we can use as a tool to guide design

03:43.400 --> 03:44.400
choices.

03:44.400 --> 03:47.660
Here's the tourist map from one of my systems.

03:47.660 --> 03:51.900
This map guides the evolution of the system in the direction of the outcomes that we aim

03:51.900 --> 03:53.340
to achieve.

03:53.340 --> 03:58.380
If we're doing a good job, we'll discover our inevitable mistakes and update our tourist

03:58.380 --> 04:00.740
map as our understanding deepens.

04:00.740 --> 04:05.000
Let's try and walk into this problem a little bit more carefully.

04:05.000 --> 04:09.700
One great definition of software architecture is, it's the stuff that we wish we'd got

04:09.700 --> 04:12.200
right at the start of a project.

04:12.200 --> 04:16.780
Perhaps a little more helpfully, it's the shared understanding that the expert developers

04:16.780 --> 04:19.860
have of the system design.

04:19.860 --> 04:22.540
Both of these definitions come from Ralph Johnson.

04:22.540 --> 04:25.420
I'd add a couple of words to the second.

04:25.420 --> 04:29.940
It's a snapshot of the shared understanding of the expert developers.

04:29.940 --> 04:34.500
You hope it doesn't change too often, but you should expect it to change.

04:34.500 --> 04:40.180
I think that in combination, these definitions get something rather important right.

04:40.180 --> 04:44.180
At the start of any project, we don't yet know the answers, but we still need to make

04:44.180 --> 04:48.740
some guesses about what may work in order to begin.

04:48.740 --> 04:53.460
If we're going to be creating this system as part of a team, we need a way to discuss

04:53.460 --> 04:58.740
design ideas to communicate with each other about the system and think about where different

04:58.740 --> 05:01.180
behaviors of the system will be handled.

05:01.180 --> 05:04.900
Our tourist map will help a lot with these conversations.

05:04.900 --> 05:09.700
Debating new features in front of the tourist map can, we can explore the implications of

05:09.700 --> 05:14.260
our design choices and maybe spot improvements or mistakes in the map.

05:14.260 --> 05:19.420
I like Ralph Johnson's focus on the stuff we wish we got right, rather than a focus

05:19.420 --> 05:21.660
on the stuff we must get right.

05:21.660 --> 05:24.340
We focus on the stuff that worry us.

05:24.340 --> 05:29.580
I like it because we almost certainly won't get it right first time, but it is important

05:29.580 --> 05:31.620
stuff.

05:31.620 --> 05:37.220
That aligns very nicely with my thinking and my approach to development in general, which

05:37.220 --> 05:42.380
is significantly focused on maintaining my freedom to get things wrong.

05:42.380 --> 05:48.300
That probably sounds a bit weird, but I want the freedom to make a mistake and the ability

05:48.300 --> 05:51.380
to learn and recover from it.

05:51.380 --> 05:57.100
For that, we need the ability to contain the complexity and to manage it.

05:57.100 --> 06:02.500
Fundamentally, the architecture of our system is realized in the shapes that we make with

06:02.500 --> 06:04.220
our code.

06:04.220 --> 06:06.620
All software has an architecture.

06:06.620 --> 06:09.220
In some of them, though, it happened by accident.

06:09.220 --> 06:14.180
In others, it was worked on with great care and grew to be something good.

06:14.180 --> 06:19.700
Good architecture allows us to isolate one part of the problem from another.

06:19.700 --> 06:20.860
This could be functional.

06:20.860 --> 06:24.700
Let's create services aligned with bounded contexts so that they can change more independently

06:24.700 --> 06:26.180
of one another.

06:26.180 --> 06:29.460
Or it could be, in the jargon of architects, non-functional.

06:29.460 --> 06:35.100
Let's shard the data in our system so that it can scale linearly as demand rises.

06:35.100 --> 06:40.660
Our formal approaches to architecture often discuss architectural measures of quality.

06:40.660 --> 06:43.180
This is the list from ISO.

06:43.180 --> 06:49.380
I can see how talking about the illities of a system can help, but in reality, I don't

06:49.380 --> 06:53.860
really buy into the idea of non-functional requirements very much.

06:53.860 --> 06:58.700
Inside every non-functional requirement is a feature of the system that users care about.

06:58.700 --> 07:01.580
If not, why are we doing it at all?

07:01.580 --> 07:06.540
Even something as seemingly self-centered as making our code maintainable is really

07:06.540 --> 07:13.180
about ensuring our ability to continue to deliver value to our users in the future.

07:13.180 --> 07:19.020
These things, security, performance, scalability, testability, deployability, resilience, and

07:19.020 --> 07:24.620
so on, are behaviors of our system as much as taking payment with a credit card.

07:24.620 --> 07:28.220
We have to design the system to exhibit these behaviors.

07:28.220 --> 07:33.140
If we are sensible, we will design our system to manage the complexity of these things by

07:33.140 --> 07:37.260
compartmentalizing them from other behaviors where we can.

07:37.260 --> 07:42.220
The reason that people get worried about these kinds of qualities of a system and try to

07:42.220 --> 07:48.020
teach them somewhat differently is that they tend to have a broader impact than many features.

07:48.020 --> 07:55.180
You can't usually fix security or scalability or resilience in a single place in your system.

07:55.180 --> 08:00.220
These are often referred to as cross-cutting concerns, but that doesn't mean that these

08:00.220 --> 08:05.540
things are architectural concerns, and other things are not.

08:05.540 --> 08:10.860
These are just behaviors that people often forget about while chasing other kinds of features.

08:10.860 --> 08:15.060
Whether you call yourself an architect or not, and whether you work in a big team or

08:15.060 --> 08:20.900
alone for any given piece of software, you need to decide how it should behave.

08:20.900 --> 08:26.740
And that means how you process credit cards or what color your buttons are, as well as

08:26.740 --> 08:31.020
is it okay to leak money to attackers or fall over when there are more than three people

08:31.020 --> 08:32.860
using it.

08:32.860 --> 08:36.460
This is our responsibility as software developers.

08:36.460 --> 08:41.940
For some types of systems, some of these problems are genuinely difficult, and it helps a lot

08:41.940 --> 08:47.860
when you have smart, experienced people on the team who have seen ways to cope before.

08:47.860 --> 08:52.140
But that doesn't mean that architecture is somebody else's problem.

08:52.140 --> 08:57.700
Whether you are in your first day on the job or a grisled veteran, your decisions may impact

08:57.700 --> 09:00.300
on the architecture of the system.

09:00.300 --> 09:04.220
This is another of those slippery aspects of software.

09:04.220 --> 09:09.660
There is very little distance between what looks like a small change and that small change

09:09.660 --> 09:12.020
having a massive impact.

09:12.020 --> 09:18.220
In fact, the only things between that being true are luck or a good working design and

09:18.220 --> 09:23.460
architecture that we understand and can use to guide our fine-grained decisions.

09:23.460 --> 09:29.420
So that gives us another step forward in understanding this complex concept a little better.

09:29.420 --> 09:35.980
The architecture of our software is the collection of constraints that we agree to adopt and maintain

09:35.980 --> 09:40.620
that will provide us some protection from making dumb mistakes.

09:40.620 --> 09:45.180
My preference is to engage every developer, whatever their experience in architectural

09:45.180 --> 09:50.540
discussions, allowing everyone to develop their own understanding of the architecture

09:50.540 --> 09:54.820
and to contribute to it as development proceeds.

09:54.820 --> 09:59.940
Architect as a job description has seen a bit of a decline in recent years.

09:59.940 --> 10:06.140
This is mostly in response to agile development's reaction against big upfront design.

10:06.140 --> 10:12.620
The problem with this is, as Dave Thomas famously said, big upfront design is dumb,

10:12.620 --> 10:15.220
no upfront design is dumber.

10:15.220 --> 10:18.940
So we need to start somewhere, but where?

10:18.940 --> 10:24.340
The real answer is that you make a guess based on your understanding of the problem so far

10:24.340 --> 10:26.420
and your experience.

10:26.420 --> 10:32.180
If you're any good at this kind of thing, you try to treat this guess as an experiment.

10:32.180 --> 10:34.660
How could you show that your guess is wrong?

10:34.660 --> 10:36.180
Try that.

10:36.180 --> 10:41.620
Working incrementally, whether in fine grained design or big picture architecture, is essential

10:41.620 --> 10:44.940
to doing a good job of anything complex.

10:44.940 --> 10:50.300
There's a caveat to this, but as ever, you need to understand the trade-offs.

10:50.300 --> 10:56.540
If the problem that you are solving is pretty common, then you could adopt a tried and tested

10:56.540 --> 11:00.580
architectural approach and off the peg architecture if you like.

11:00.580 --> 11:06.260
This is a good idea, as long as you understand the constraints and the fit of that architecture

11:06.260 --> 11:08.260
to your problem.

11:08.260 --> 11:13.060
Because the other big problem with software architecture as an idea is that there's no

11:13.060 --> 11:18.100
one size fits all, there's no such thing as a generically good architecture.

11:18.100 --> 11:24.820
Rather, it's a matter of whether a particular architecture fits the needs of the system.

11:24.820 --> 11:30.220
One of the most successful widely applicable architectures was a layered system backed

11:30.220 --> 11:36.180
up by a relational database, something like this, a UI, some logic, and a database.

11:36.180 --> 11:41.860
For systems with a moderate number of users and relatively simple crud-style features,

11:41.860 --> 11:43.940
this was a very good choice.

11:43.940 --> 11:49.540
I think that one of the reasons it was a good choice, though, is quite informative.

11:49.540 --> 11:56.020
I think a principal reason that the clever but slow idea of transactions in relational

11:56.020 --> 12:04.060
databases took hold was because it allowed programmers to write multi-user systems without

12:04.060 --> 12:08.380
worrying too much about the horrible complexity of concurrency.

12:08.380 --> 12:13.860
If you open a transaction, read some data, change it, and write it out again, the database

12:13.860 --> 12:18.060
will block any other access to that data while you're dealing with it.

12:18.060 --> 12:23.820
As long as your transaction lasts, it locks access to the data.

12:23.820 --> 12:27.440
This was very good if this architecture fit your problem.

12:27.440 --> 12:30.540
It kept the programming model simple.

12:30.540 --> 12:34.660
It's still good if it fits your problem today, and it fits quite a lot of problems quite

12:34.660 --> 12:35.660
well.

12:35.660 --> 12:40.660
However, as the web grew in influence and massive-scale computing became more common,

12:40.660 --> 12:45.860
having a relational database management system as a synchronization point to your data, a

12:45.860 --> 12:49.180
source of truth simply didn't scale.

12:49.180 --> 12:53.140
So people started experimenting with other approaches.

12:53.140 --> 12:56.900
I was once asked to consult on a huge project.

12:56.900 --> 13:03.780
They had decided to use a NoSQL database as their primary data store, which is fine, but

13:03.780 --> 13:09.300
they'd forgotten or didn't realize the importance of the protection that transactions that

13:09.300 --> 13:12.380
they were more accustomed to had given them.

13:12.380 --> 13:15.660
This NoSQL database wasn't transactional.

13:15.660 --> 13:21.940
No data was shared by multiple processes and written to by multiple processes, and the

13:21.940 --> 13:24.340
results were essentially random.

13:24.340 --> 13:27.660
Whoever wrote last got to store their changes.

13:27.660 --> 13:32.220
Everyone else would lose theirs, and without any indication of the loss.

13:32.220 --> 13:37.180
It made me feel a bit queasy just to think about this big system with all the data shared

13:37.180 --> 13:41.500
and no protection or coordination between concurrent processes.

13:41.500 --> 13:45.900
This was a problem of not really thinking about the architecture of the system, but

13:45.900 --> 13:48.460
only the tools.

13:48.460 --> 13:49.860
That's not the same thing.

13:49.860 --> 13:54.620
A collection of tools alone doesn't make a software architecture.

13:54.620 --> 13:59.460
This team had seen one of the big web companies develop this great-looking NoSQL database to

13:59.460 --> 14:05.620
help them scale up, and it did that, but only in the context of a whole raft of other choices

14:05.620 --> 14:10.820
and constraints that this team hadn't thought to apply.

14:10.820 --> 14:16.100
There is another, somewhat similar, very common mistake that probably is a little closer

14:16.100 --> 14:18.020
to your own software.

14:18.020 --> 14:21.180
Microservices were invented to decouple development.

14:21.180 --> 14:27.180
They're intended to be independently deployable, freeing teams to work separately from other

14:27.180 --> 14:32.260
teams, which means you don't get to test them together before you release.

14:32.260 --> 14:36.020
If you're on Netflix or Amazon, this is fantastic.

14:36.020 --> 14:40.500
If you are a small development shop with a handful of developers, it's almost certainly

14:40.500 --> 14:43.620
overkill and so pretty inefficient.

14:43.620 --> 14:48.580
And worse than that, most teams that I see that claim to practice a microservice approach

14:48.580 --> 14:50.460
aren't.

14:50.460 --> 14:54.340
They don't have independently deployable services, which means that they have to test

14:54.340 --> 14:58.300
them all together before they feel confident to release them.

14:58.300 --> 15:02.660
This is, in fact, a distributed monolith, which is a rather complex choice, good for

15:02.660 --> 15:05.580
some things, but never simple.

15:05.620 --> 15:10.180
I think that software is more complicated than we often think.

15:10.180 --> 15:14.580
So the sensible thing is to approach it with a little bit more caution.

15:14.580 --> 15:19.860
I don't mean that we should agonize for weeks or months before taking the first step, completely

15:19.860 --> 15:25.820
the opposite, in fact, but we should work on the assumption that our best guess so far

15:25.820 --> 15:31.340
is almost certainly wrong, so architect our systems to allow us to recover when we learn

15:31.340 --> 15:34.900
more and find out where it's wrong.

15:34.900 --> 15:41.420
This takes skill, certainly, but it is realistically the only sensible choice in my opinion.

15:41.420 --> 15:46.380
Architecting at a complex system is not something that someone in an ivory tower does at the

15:46.380 --> 15:48.460
start of a project.

15:48.460 --> 15:51.780
It's also only partly intentional.

15:51.780 --> 15:56.540
Like more fine-grained design decisions, it's an iterative incremental exercise in the kind

15:56.540 --> 15:59.300
of guided evolutionary process.

15:59.300 --> 16:05.780
This is not terribly precise, and sometimes, even despite cleverness, expertise and experience,

16:05.780 --> 16:07.780
people get things wrong.

16:07.780 --> 16:13.020
That is, I am afraid, an inevitable consequence of dealing with something as tricky and complex

16:13.020 --> 16:15.020
as software.

16:15.020 --> 16:21.460
A few years ago, a performance optimization strategy in Intel processors meant that encryption

16:21.460 --> 16:27.220
could be broken, obviating all of the clever security architecture features in the web,

16:27.220 --> 16:33.980
cloud, on-premises systems, even mobile devices, and on pretty much every operating system.

16:33.980 --> 16:41.380
That is a salutary lesson in how fragile architecture and design can be to tiny things.

16:41.380 --> 16:46.700
A good way to approach this is to think about the things that you are unsure of.

16:46.700 --> 16:51.780
I was chatting to my friend, Kevin Henney, a few days ago, and we were talking about

16:51.780 --> 16:52.780
design.

16:52.980 --> 16:58.220
As soon as someone says, I don't know, there's a seam in the design.

16:58.220 --> 17:00.660
That's quite a good way to think.

17:00.660 --> 17:05.900
Start the design of your system with your best guesses, based on what you know so far,

17:05.900 --> 17:10.340
and be on the lookout for the things that you don't know or are unsure about.

17:10.340 --> 17:15.020
You don't have to do a depth-first exploration of these things, in fact you shouldn't, but

17:15.020 --> 17:20.060
you do think about how to insulate the stuff that you do understand from the things that

17:20.060 --> 17:21.940
you don't.

17:21.940 --> 17:26.700
Good sketches in code of those things that you don't yet understand and abstraction

17:26.700 --> 17:31.540
can act as placeholders, while you make progress and grow your understanding for the bits

17:31.540 --> 17:33.820
of the code that you do know.

17:33.820 --> 17:38.700
Don't build world-class security into the first sketches of your system.

17:38.700 --> 17:44.180
Don't take on the burden of making your system perfectly scalable from day one, but do design

17:44.180 --> 17:50.380
your system as best as you can imagine so that you will be able to enhance security without

17:50.380 --> 17:55.020
undoing the progress that you've already made, and that you can take advantage of your

17:55.020 --> 18:02.180
great work so far, and allocate it differently so that it does scale up if that's a demand.

18:02.180 --> 18:05.780
Insulate the parts of the system that you understand well from those that you don't

18:05.780 --> 18:07.180
yet.

18:07.180 --> 18:11.700
These kinds of design approaches are at the heart of what I describe in my modern software

18:11.700 --> 18:17.620
engineering book, using the techniques to manage complexity, to give you a chance to

18:17.620 --> 18:23.620
go back and enhance or even correct architecture missteps when you discover them.

18:23.620 --> 18:29.220
When we built our exchange at Elmax, we had three different fundamental attempts at the

18:29.220 --> 18:32.340
basic architecture of our system.

18:32.340 --> 18:38.020
But because we'd taken an incremental approach to its design, only a small part of our effort

18:38.020 --> 18:40.860
was lost on each change.

18:40.860 --> 18:47.420
My final piece of advice on software architecture is to aim to be intentionally a little bit

18:47.420 --> 18:50.240
vague about the detail.

18:50.240 --> 18:55.620
Architecture should guide our decisions with constraints, but in great architecture there

18:55.620 --> 18:58.780
are actually relatively few constraints.

18:58.780 --> 19:03.220
But those that are there are pretty rigidly enforced.

19:03.220 --> 19:07.860
Thank you very much for watching.

