start	end	text
0	5360	Wikipedia defines software architecture as the functional structures of a software system
5360	8760	and the discipline of creating such structures and systems.
8760	13960	Well, you can kind of see what they mean, but it's a pretty dry definition and it raises
13960	17120	as many questions as it really answers.
17120	20120	After all, what does fundamental mean anyway?
20120	23960	And for that matter, what does structure mean in this context too?
23960	28680	The last bit is really only saying architecture is produced by a disciplined approach to
28680	30800	architecting things.
30800	36580	To be fair to Wikipedia, this is a difficult idea to nail down, even though I think that
36580	40680	most of us would agree that it's an important one in some way.
40680	44240	So here is my take on software architecture.
44240	51040	What does it mean and what does it take to do a good job of it?
51040	57720	Hi, I'm Dave Farley of Continuous Delivery.
57720	59080	Welcome to my channel.
59080	62360	If you haven't been here before, please do hit subscribe.
62360	65920	And if you enjoy the content today, hit like as well.
65920	72400	I'd like to begin by thanking our sponsors, equal experts, Octopus, SpeckFlow and Linode.
72400	76320	They're all helping us to develop the channel, so please do check their links in the description
76320	78320	below to support them.
78320	83840	My thinking on software development, design and architecture is deeply informed by what
83840	86920	I think of as an engineering approach.
86920	92560	I describe this generally applicable approach in my new book, Modern Software Engineering.
92560	96080	It's doing rather well in the rankings on Amazon at the moment, and he's collecting
96080	98800	some very nice reviews, so do check it out.
98800	102520	There's a link to that in the description below too.
102520	106600	I think of myself as a software developer.
106600	111160	Probably more accurately these days, I'm a consultant first and a developer second.
111160	115400	But I also spent a considerable part of my career being called a software architecting
115400	117120	one form or another.
117120	123040	I couldn't then and can't now tell you any significant difference in my focus between
123040	127480	the times when I was called a developer and the times when I was called an architect.
127480	131640	Ultimately, I think this is about design.
131640	135240	Maybe it's about design at different scales, but I confess that I'm rather skeptical of
135240	136760	that.
136760	142280	The slippery nature of defining architecture as design on a bigger scale is that design
142280	145280	in information systems is kind of fractal.
145280	150560	There are things that matter at all levels of detail, and there are tiny details that
150560	155520	will invalidate grand assumptions, and there are grand assumptions that can prevent effective
155520	158440	progress at the level of tiny detail.
158440	164080	A popular description of software architecture comes from Grady Butch, who says, architecture
164080	169840	represents the significant design decisions that shape a system, where significance is
169840	172840	measured by cost of change.
172840	177560	I don't disagree with this definition, but I don't like it very much.
177560	183780	It implies that these are the details that we need to get right at the start to succeed.
183780	188800	It makes some sense if we're looking retrospectively at a system, but it's a pretty poor guide
188800	189960	to building one.
189960	190960	Be omniscient.
190960	195360	For something this complex, that simply isn't going to happen.
195360	199640	For me, there's only one approach to architecture that makes any sense at all.
199640	203200	It has to be an evolutionary process.
203200	207840	We will guide the design of our system by modifying the constraints that we apply to
207840	209520	that design.
209520	215460	These constraints, or rules of the road, are what we think make sense at any given point.
215460	218320	These form an important aspect of our architecture.
218320	223400	We create a kind of tourist map of the system that we can use as a tool to guide design
223400	224400	choices.
224400	227660	Here's the tourist map from one of my systems.
227660	231900	This map guides the evolution of the system in the direction of the outcomes that we aim
231900	233340	to achieve.
233340	238380	If we're doing a good job, we'll discover our inevitable mistakes and update our tourist
238380	240740	map as our understanding deepens.
240740	245000	Let's try and walk into this problem a little bit more carefully.
245000	249700	One great definition of software architecture is, it's the stuff that we wish we'd got
249700	252200	right at the start of a project.
252200	256780	Perhaps a little more helpfully, it's the shared understanding that the expert developers
256780	259860	have of the system design.
259860	262540	Both of these definitions come from Ralph Johnson.
262540	265420	I'd add a couple of words to the second.
265420	269940	It's a snapshot of the shared understanding of the expert developers.
269940	274500	You hope it doesn't change too often, but you should expect it to change.
274500	280180	I think that in combination, these definitions get something rather important right.
280180	284180	At the start of any project, we don't yet know the answers, but we still need to make
284180	288740	some guesses about what may work in order to begin.
288740	293460	If we're going to be creating this system as part of a team, we need a way to discuss
293460	298740	design ideas to communicate with each other about the system and think about where different
298740	301180	behaviors of the system will be handled.
301180	304900	Our tourist map will help a lot with these conversations.
304900	309700	Debating new features in front of the tourist map can, we can explore the implications of
309700	314260	our design choices and maybe spot improvements or mistakes in the map.
314260	319420	I like Ralph Johnson's focus on the stuff we wish we got right, rather than a focus
319420	321660	on the stuff we must get right.
321660	324340	We focus on the stuff that worry us.
324340	329580	I like it because we almost certainly won't get it right first time, but it is important
329580	331620	stuff.
331620	337220	That aligns very nicely with my thinking and my approach to development in general, which
337220	342380	is significantly focused on maintaining my freedom to get things wrong.
342380	348300	That probably sounds a bit weird, but I want the freedom to make a mistake and the ability
348300	351380	to learn and recover from it.
351380	357100	For that, we need the ability to contain the complexity and to manage it.
357100	362500	Fundamentally, the architecture of our system is realized in the shapes that we make with
362500	364220	our code.
364220	366620	All software has an architecture.
366620	369220	In some of them, though, it happened by accident.
369220	374180	In others, it was worked on with great care and grew to be something good.
374180	379700	Good architecture allows us to isolate one part of the problem from another.
379700	380860	This could be functional.
380860	384700	Let's create services aligned with bounded contexts so that they can change more independently
384700	386180	of one another.
386180	389460	Or it could be, in the jargon of architects, non-functional.
389460	395100	Let's shard the data in our system so that it can scale linearly as demand rises.
395100	400660	Our formal approaches to architecture often discuss architectural measures of quality.
400660	403180	This is the list from ISO.
403180	409380	I can see how talking about the illities of a system can help, but in reality, I don't
409380	413860	really buy into the idea of non-functional requirements very much.
413860	418700	Inside every non-functional requirement is a feature of the system that users care about.
418700	421580	If not, why are we doing it at all?
421580	426540	Even something as seemingly self-centered as making our code maintainable is really
426540	433180	about ensuring our ability to continue to deliver value to our users in the future.
433180	439020	These things, security, performance, scalability, testability, deployability, resilience, and
439020	444620	so on, are behaviors of our system as much as taking payment with a credit card.
444620	448220	We have to design the system to exhibit these behaviors.
448220	453140	If we are sensible, we will design our system to manage the complexity of these things by
453140	457260	compartmentalizing them from other behaviors where we can.
457260	462220	The reason that people get worried about these kinds of qualities of a system and try to
462220	468020	teach them somewhat differently is that they tend to have a broader impact than many features.
468020	475180	You can't usually fix security or scalability or resilience in a single place in your system.
475180	480220	These are often referred to as cross-cutting concerns, but that doesn't mean that these
480220	485540	things are architectural concerns, and other things are not.
485540	490860	These are just behaviors that people often forget about while chasing other kinds of features.
490860	495060	Whether you call yourself an architect or not, and whether you work in a big team or
495060	500900	alone for any given piece of software, you need to decide how it should behave.
500900	506740	And that means how you process credit cards or what color your buttons are, as well as
506740	511020	is it okay to leak money to attackers or fall over when there are more than three people
511020	512860	using it.
512860	516460	This is our responsibility as software developers.
516460	521940	For some types of systems, some of these problems are genuinely difficult, and it helps a lot
521940	527860	when you have smart, experienced people on the team who have seen ways to cope before.
527860	532140	But that doesn't mean that architecture is somebody else's problem.
532140	537700	Whether you are in your first day on the job or a grisled veteran, your decisions may impact
537700	540300	on the architecture of the system.
540300	544220	This is another of those slippery aspects of software.
544220	549660	There is very little distance between what looks like a small change and that small change
549660	552020	having a massive impact.
552020	558220	In fact, the only things between that being true are luck or a good working design and
558220	563460	architecture that we understand and can use to guide our fine-grained decisions.
563460	569420	So that gives us another step forward in understanding this complex concept a little better.
569420	575980	The architecture of our software is the collection of constraints that we agree to adopt and maintain
575980	580620	that will provide us some protection from making dumb mistakes.
580620	585180	My preference is to engage every developer, whatever their experience in architectural
585180	590540	discussions, allowing everyone to develop their own understanding of the architecture
590540	594820	and to contribute to it as development proceeds.
594820	599940	Architect as a job description has seen a bit of a decline in recent years.
599940	606140	This is mostly in response to agile development's reaction against big upfront design.
606140	612620	The problem with this is, as Dave Thomas famously said, big upfront design is dumb,
612620	615220	no upfront design is dumber.
615220	618940	So we need to start somewhere, but where?
618940	624340	The real answer is that you make a guess based on your understanding of the problem so far
624340	626420	and your experience.
626420	632180	If you're any good at this kind of thing, you try to treat this guess as an experiment.
632180	634660	How could you show that your guess is wrong?
634660	636180	Try that.
636180	641620	Working incrementally, whether in fine grained design or big picture architecture, is essential
641620	644940	to doing a good job of anything complex.
644940	650300	There's a caveat to this, but as ever, you need to understand the trade-offs.
650300	656540	If the problem that you are solving is pretty common, then you could adopt a tried and tested
656540	660580	architectural approach and off the peg architecture if you like.
660580	666260	This is a good idea, as long as you understand the constraints and the fit of that architecture
666260	668260	to your problem.
668260	673060	Because the other big problem with software architecture as an idea is that there's no
673060	678100	one size fits all, there's no such thing as a generically good architecture.
678100	684820	Rather, it's a matter of whether a particular architecture fits the needs of the system.
684820	690220	One of the most successful widely applicable architectures was a layered system backed
690220	696180	up by a relational database, something like this, a UI, some logic, and a database.
696180	701860	For systems with a moderate number of users and relatively simple crud-style features,
701860	703940	this was a very good choice.
703940	709540	I think that one of the reasons it was a good choice, though, is quite informative.
709540	716020	I think a principal reason that the clever but slow idea of transactions in relational
716020	724060	databases took hold was because it allowed programmers to write multi-user systems without
724060	728380	worrying too much about the horrible complexity of concurrency.
728380	733860	If you open a transaction, read some data, change it, and write it out again, the database
733860	738060	will block any other access to that data while you're dealing with it.
738060	743820	As long as your transaction lasts, it locks access to the data.
743820	747440	This was very good if this architecture fit your problem.
747440	750540	It kept the programming model simple.
750540	754660	It's still good if it fits your problem today, and it fits quite a lot of problems quite
754660	755660	well.
755660	760660	However, as the web grew in influence and massive-scale computing became more common,
760660	765860	having a relational database management system as a synchronization point to your data, a
765860	769180	source of truth simply didn't scale.
769180	773140	So people started experimenting with other approaches.
773140	776900	I was once asked to consult on a huge project.
776900	783780	They had decided to use a NoSQL database as their primary data store, which is fine, but
783780	789300	they'd forgotten or didn't realize the importance of the protection that transactions that
789300	792380	they were more accustomed to had given them.
792380	795660	This NoSQL database wasn't transactional.
795660	801940	No data was shared by multiple processes and written to by multiple processes, and the
801940	804340	results were essentially random.
804340	807660	Whoever wrote last got to store their changes.
807660	812220	Everyone else would lose theirs, and without any indication of the loss.
812220	817180	It made me feel a bit queasy just to think about this big system with all the data shared
817180	821500	and no protection or coordination between concurrent processes.
821500	825900	This was a problem of not really thinking about the architecture of the system, but
825900	828460	only the tools.
828460	829860	That's not the same thing.
829860	834620	A collection of tools alone doesn't make a software architecture.
834620	839460	This team had seen one of the big web companies develop this great-looking NoSQL database to
839460	845620	help them scale up, and it did that, but only in the context of a whole raft of other choices
845620	850820	and constraints that this team hadn't thought to apply.
850820	856100	There is another, somewhat similar, very common mistake that probably is a little closer
856100	858020	to your own software.
858020	861180	Microservices were invented to decouple development.
861180	867180	They're intended to be independently deployable, freeing teams to work separately from other
867180	872260	teams, which means you don't get to test them together before you release.
872260	876020	If you're on Netflix or Amazon, this is fantastic.
876020	880500	If you are a small development shop with a handful of developers, it's almost certainly
880500	883620	overkill and so pretty inefficient.
883620	888580	And worse than that, most teams that I see that claim to practice a microservice approach
888580	890460	aren't.
890460	894340	They don't have independently deployable services, which means that they have to test
894340	898300	them all together before they feel confident to release them.
898300	902660	This is, in fact, a distributed monolith, which is a rather complex choice, good for
902660	905580	some things, but never simple.
905620	910180	I think that software is more complicated than we often think.
910180	914580	So the sensible thing is to approach it with a little bit more caution.
914580	919860	I don't mean that we should agonize for weeks or months before taking the first step, completely
919860	925820	the opposite, in fact, but we should work on the assumption that our best guess so far
925820	931340	is almost certainly wrong, so architect our systems to allow us to recover when we learn
931340	934900	more and find out where it's wrong.
934900	941420	This takes skill, certainly, but it is realistically the only sensible choice in my opinion.
941420	946380	Architecting at a complex system is not something that someone in an ivory tower does at the
946380	948460	start of a project.
948460	951780	It's also only partly intentional.
951780	956540	Like more fine-grained design decisions, it's an iterative incremental exercise in the kind
956540	959300	of guided evolutionary process.
959300	965780	This is not terribly precise, and sometimes, even despite cleverness, expertise and experience,
965780	967780	people get things wrong.
967780	973020	That is, I am afraid, an inevitable consequence of dealing with something as tricky and complex
973020	975020	as software.
975020	981460	A few years ago, a performance optimization strategy in Intel processors meant that encryption
981460	987220	could be broken, obviating all of the clever security architecture features in the web,
987220	993980	cloud, on-premises systems, even mobile devices, and on pretty much every operating system.
993980	1001380	That is a salutary lesson in how fragile architecture and design can be to tiny things.
1001380	1006700	A good way to approach this is to think about the things that you are unsure of.
1006700	1011780	I was chatting to my friend, Kevin Henney, a few days ago, and we were talking about
1011780	1012780	design.
1012980	1018220	As soon as someone says, I don't know, there's a seam in the design.
1018220	1020660	That's quite a good way to think.
1020660	1025900	Start the design of your system with your best guesses, based on what you know so far,
1025900	1030340	and be on the lookout for the things that you don't know or are unsure about.
1030340	1035020	You don't have to do a depth-first exploration of these things, in fact you shouldn't, but
1035020	1040060	you do think about how to insulate the stuff that you do understand from the things that
1040060	1041940	you don't.
1041940	1046700	Good sketches in code of those things that you don't yet understand and abstraction
1046700	1051540	can act as placeholders, while you make progress and grow your understanding for the bits
1051540	1053820	of the code that you do know.
1053820	1058700	Don't build world-class security into the first sketches of your system.
1058700	1064180	Don't take on the burden of making your system perfectly scalable from day one, but do design
1064180	1070380	your system as best as you can imagine so that you will be able to enhance security without
1070380	1075020	undoing the progress that you've already made, and that you can take advantage of your
1075020	1082180	great work so far, and allocate it differently so that it does scale up if that's a demand.
1082180	1085780	Insulate the parts of the system that you understand well from those that you don't
1085780	1087180	yet.
1087180	1091700	These kinds of design approaches are at the heart of what I describe in my modern software
1091700	1097620	engineering book, using the techniques to manage complexity, to give you a chance to
1097620	1103620	go back and enhance or even correct architecture missteps when you discover them.
1103620	1109220	When we built our exchange at Elmax, we had three different fundamental attempts at the
1109220	1112340	basic architecture of our system.
1112340	1118020	But because we'd taken an incremental approach to its design, only a small part of our effort
1118020	1120860	was lost on each change.
1120860	1127420	My final piece of advice on software architecture is to aim to be intentionally a little bit
1127420	1130240	vague about the detail.
1130240	1135620	Architecture should guide our decisions with constraints, but in great architecture there
1135620	1138780	are actually relatively few constraints.
1138780	1143220	But those that are there are pretty rigidly enforced.
1143220	1147860	Thank you very much for watching.
