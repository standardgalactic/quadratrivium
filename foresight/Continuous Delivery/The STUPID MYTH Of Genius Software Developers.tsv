start	end	text
0	3920	Continuous delivery is the most effective way that we know of to create software.
4560	8720	According to the data over many years from the State of DevOps report,
8720	14240	collected by the Dora Group inside Google, continuous delivery literally enables us to
14240	20960	build better software faster. This just works. One of the most common pushbacks that I get,
20960	25520	whether I'm explaining continuous delivery in general or specific practices within it that
25600	31840	help us to achieve it, this is all very well for the geniuses at Google, Netflix, Spotify,
31840	38720	Amazon, Tesla, SpaceX, filling your favorite unicorn here, but our devs aren't as good as them.
39440	45280	This stuff only works for geniuses. As far as I can tell, this is completely and totally wrong.
46160	52080	So what do you do if you only work with human beings rather than teams of geniuses?
55840	64560	Hi, I'm Dave Farley of Continuous Delivery. Welcome to my channel. If you haven't been
64560	68720	here before, please do hit subscribe. And if you enjoy the content today, hit like as well.
68720	72320	I think that this blame game of assuming that our team isn't good enough
72320	76880	is a common human failing, a kind of institutionally imposter syndrome.
77600	81280	Those other people do better than us because they are better people than us.
81920	86800	Well, actually, I think what's much more true is that those people do better than us because
86800	92400	they work in better ways than we do. It is usually the case that when a team is under-performing,
92400	97200	that it's more about the system that they're working in rather than the people in the team.
98320	106240	The idea of the Rockstar developer is alluring but wrong. So poorly performing teams are much more
106240	112240	about a lack of adequate training, tools, organisational culture and often a sign of too
112240	117520	much management direction interference rather than a fault of the team members themselves.
118560	124160	Unfortunately, this becomes a nasty downward spiral. The worse things get,
124160	128800	the more managers feel the need to manage, introducing new reporting requirements,
128800	134880	more action plans and so on. The result is that the team have less time to do their work
134960	138720	and so lose confidence and trust in themselves and each other.
138720	143760	My wife has done some work helping under-performing teams, not in the IT world as it happens.
144320	149040	Usually she starts work like this with a directive to shake things up,
149760	153760	to replace ineffective managers and maybe bring in new talent.
153760	159520	But her mantra is always that the people out there are just as crap or just as great as the
159520	165120	people already here. So it's better to work with the people that you have and already know
165920	171360	than to bring in some people that you don't. Her approach is usually to start by reducing
171360	177280	outside interference, stop unnecessary reporting and to give decision making back to the team.
178400	183360	In one such contract she was asked to work with the team responsible for collecting payments.
183360	186800	This team were one of the worst performers in the whole of London.
187520	191760	She introduced ways of working that sound a lot like Agile to us.
192320	197200	They didn't build a big service improvement plan with targets and deadlines,
197200	202800	instead they started making small changes. Changes that they could measure the impact of
202800	208400	in under a week. Small changes like these don't need senior management or board approval,
208400	212480	so the team could just act on what they agreed sounded like a good idea
212480	217440	and that they hoped would steer them towards their goal. This is very different to simply
217440	223680	following procedures or completing tasks set by somebody else. The team chose what they could
223680	229120	improve and brought their own ideas about how they could improve things. To check whether what
229120	233920	they were doing was improving things or not they collected their own monitoring data about their
233920	241280	performance. Instead of just reporting generic KPIs upwards they picked the measurements that
241280	247600	suited the improvement. All together they spoke trust and confidence in themselves and in each
247600	254000	other. Within a few months the team were transformed into a much happier and more cohesive team.
254720	260080	They moved quickly up the rankings to become one of the top performers in collecting payments in
260080	266720	their field in London. So much so that the same people who had been seen as a failing team were
266720	272960	now much sought after in other parts of the business to help them to improve. Good job they
272960	279760	weren't fired then really. This may sound risky to people that aren't used to working this way,
279760	284720	but it works and it works pretty much everywhere. Let me pause there to thank our sponsors.
285440	294240	We're fortunate to be sponsored by equal experts, tricentis, transfic, sleuth and ice panel. All
294240	297840	of these companies offer products and services that are well aligned with the topics that we
297840	302880	discuss on this channel every week. So if you're looking for excellence in continuous delivery
302880	308000	and software engineering please do check out the links in the description below. For this more
308000	314880	distributed approach to decision-making at work you need to help people to learn how to become
314880	322640	autonomous and you need the organisation to allow space for teams to make decisions for themselves.
322640	329120	The failure of agile in our industry is largely at the feet of organisations that so misunderstand
329120	334480	and constrain it that there's no room for any agility at all. The apparent chicken and egg
334480	341120	problem here is that to work in this provenly more effective way we need the culture of teams
341120	348160	and organisations to change. But call to change is what consultants like me always say, but it's
348160	353440	really a kind of get out of jail free card. Of course everything will be better if the culture
353440	359840	was great, but changing the culture is incredibly difficult in any organisation. So we'd like
359840	364880	people to be able to work better but they've learned how to work to be successful in this
364880	371040	organisation where the culture is inherent and unavoidable. This is the chicken and egg problem.
372000	377200	We need people to change their culture to be more autonomous while working in an organisation that
377200	383760	promotes and rewards existing behaviours that aren't. So what the culture of most employers has
383760	390000	done is to train autonomy out of their workforce. There's an interesting story from the history
390000	398000	of lean manufacturing. In 1984 General Motors partnered with Toyota in an auto plant in California.
398800	404640	Toyota were innovators in lean manufacturing. General Motors did this to learn about the
404640	410480	Toyota production system, their world-leading lean approach to building cars. They picked the
410480	417840	Fremont assembly plant for the experiment, which was later renamed Numie. Before this the Fremont
417840	423920	plant was said to be the worst in the US and specifically the workforce was also said to be
423920	431040	the worst in US car manufacture. Things were so bad in the Fremont plant before the experiment
431120	436480	that workers sabotaged the cars that they were building by putting Coke cans and bottles inside
436480	442880	the structure of the doors so that they rattled. Mondays commonly saw 50% of staff off sick.
443760	449360	By 1982 General Motors had had enough and so they closed the plant laying off all of the workers.
449360	455360	When the partnership started though Toyota said they'd reopen and re-hire the same people.
456080	460080	General Motors hated this and tried to talk them out of it but Toyota said that they'd
460080	467440	re-hire but change how things operated. The old employees also hated this but they needed the jobs.
468560	474640	Toyota retrained the employees, sending many of them to Japan to train in Japanese car plants
474640	481120	and to learn the Toyota approach and culture. Numie later became the highest quality General
481120	487040	Motors factory in the United States. The employees who went through this transformation
487040	495360	cited two reasons for this success. Toyota's focus on quality and on teamwork. Lean approaches in
495360	501680	general and continuous delivery in particular are very strongly focused on building quality into our
501680	508640	products. Our goal is to build good stuff not to treat quality as an afterthought. We optimize our
508640	515600	process to minimize work, maximize focus and always always to focus on the quality of our products
515600	521360	and processes. If our tools, technology or processes present barriers to this quality focus
521360	526480	it's everybody's responsibility to change them, to try new things, to attempt to remove
526480	532800	those barriers and so achieve higher quality wherever we can. One particularly interesting
532800	539440	insight from the Numie experiment comes from John Shook. Shook was first the first American to work
539440	545200	for Toyota in Japan. He said that the real difference was in how the change in culture was
545200	552160	achieved. The conventional way to effect change like this is to change thinking in order to
552160	558400	change behavior. The Toyota and Lean approach was exactly the opposite, to change behavior
558400	564880	in order to change thinking. In software this is echoed very strongly as one of the findings from
564880	571600	the state of DevOps reports and is reported in the Accelerate book. You can act your way to a
571600	578480	better culture by implementing these practices in technology organizations. I believe this idea
578480	585760	to be profoundly true but it's also a bit complicated isn't it always? DevOps experts often talk about
585760	591760	getting the culture right and this is extremely important but I think that it's also commonly
591760	597680	misinterpreted. To mean let's spend lots of time teaching people how to think differently
597680	603040	rather than let's start trying different ways of behaving and teach people to think differently
603040	609120	from that. If you've never read the Accelerate book I very strongly recommend it. The research
609120	614640	that is behind the book helped the authors to build a predictive model for software development.
614640	621040	This model clearly shows positive relationships between specific behaviors and better outcomes.
621040	626080	The fundamental behavioral change that led to this model and that will lead you to achieving
626080	632800	the promise of this approach is to make change in small steps. To try stuff out, see what works
632800	637920	and what doesn't. Use these small steps and the learning that you gain from them to try to optimize
637920	643920	towards your goal whatever that might be. This is the starting point and when you start out
643920	649120	you probably won't be very good at working in small steps and learning from them but basically
649120	655280	this is the cultural change that you're striving to achieve. I think that of this as optimizing
655280	662160	for learning. This idea of focusing on behavior as a means to change culture is an important one
662160	668560	I think and not necessarily obvious and so is often overlooked. The trouble is that it's easy
668560	674800	to confuse this focus on behavior sometimes with a focus on tools and we love to focus on
674800	680240	tools in the software world. This is not the same thing at all. I think that the difference
680240	687360	is maybe in the nature of the goals that we're striving to achieve. Good goals focus on real
687360	693920	desirable outcomes not on the steps towards those outcomes. We can then try behaviors
693920	699760	that we think will help us to achieve those outcomes. Goals like these are never about the
699840	706800	use of a particular tool or technique or ritual. These things are at best a means to an end but
706800	714320	never the end in itself. Good goals may be pretty generic or very specific. We could decide that
714320	720720	we want to build better software faster. Actually everyone wants that. That is why the measures
720720	726320	behind the state of DevOps report matter why they're important because that's exactly what it is
726320	732480	that they measure. Stability and throughput are important generic measures. They aren't perfect
732480	738160	but nothing else is as generic and if you have high scores in both you're doing well. Really
738160	744000	he's that simple. If you don't have high scores in both you aren't doing as well so now's the time
744000	748880	for more small steps to fix the things that are stopping you from doing well. Try stuff to see
748880	754720	what works do more of that and less of what doesn't. There are a few reasons why the autonomy of
754720	760880	teams is important. First is that people doing the actual work have a much deeper insight into
760880	766640	what the problems really are. What works and what doesn't. So we want them to have the freedom to
766640	773040	correct things at the moment when they see something's going wrong. Not to wait to be told by somebody
773040	778160	else who's far away from the actual work. I did some work for a client a few years ago. One of
778160	783200	their developers told me that one day they were working on a feature and spotted a bug in the
783200	789040	code. They fixed the bug and carried on working on the new feature. Later they told the project
789040	794000	manager who then told them to revert the bug fix because they weren't supposed to be working on
794000	801280	the bug. Clearly this is in no one's interest. The code isn't better or safer with the bug.
801840	808240	Following a plan is less important than producing good products. This kind of irrationality is
808240	814480	caused by focusing on the wrong goals. Steps in a process. In this case seeing the bureaucracy
814480	819840	surrounding software development in this organization as the goal rather than a means to achieve it.
820560	826640	The production of good safe software systems is the real goal. So if we need to allow teams the
826640	832960	freedom to operate. Freedom to make choices and we need to help them to focus on the goals that
832960	840000	really matter. Rather than some narrowly focused process oriented goals. So our aim is to encourage
840000	846480	our teams to start trying new behaviors. Key amongst those is working in small steps and
846480	852800	targeting specific goals focused on building better software faster. We can we can measure with the
852800	860240	Dora metrics. The Dora model goes further than that though. These behaviors together predict
860240	865840	high scores in stability and throughput. So these are good places for teams to start with
865840	872720	their behavioral changes. Making small steps towards these. Don't wait for someone else to
872720	877680	fix these things for you though. Start working in small steps doing whatever you can to improve
877680	883280	in each of these areas. Measure your progress by tracking stability and throughput. And start
883280	889840	thinking about how to tell whether other things that you want to try are working or not.
889920	895120	If your team can't be trusted to do this you don't get to fix that problem by micromanaging
895120	900240	and gatekeeping them. Because all that does is show them that you don't really trust them.
900800	906160	So at best they will be second guessing their own decisions and at worst and probably more
906160	910640	commonly they're going to stop making decisions all together and rely on somebody else to make
910640	917280	decisions for them. The last part in helping teams to become responsible is to make sure that they
917280	924560	are actually responsible. If they make a bad choice it is down to them to fix it, not somebody
924560	931200	else. Gatekeeping in a process encourages people to adopt a mindset of throwing problems over a wall.
931200	936720	Business teams specifying ill-thought-out solution focused features to development teams. Developers
936720	941280	assuming that quality is somebody else's problem and assuming that someone downstream will test
941280	947280	their crappy code. QA teams assuming that their job is to raise bugs not to help developers to
947280	954160	reproduce them or operations teams preventing release unless accompanied by pages of documentation
954160	960320	that no one will ever read. The goal of all of us is to produce great software that helps people
960320	966560	to do something that they want to do quickly and efficiently. And to do that we need to learn to be
966560	973920	creative, iterative, collaborative and autonomous. Thank you for watching and if you enjoy the content
973920	978720	on the Continuous Delivery channel please do consider supporting us by joining our Patreon
978720	982880	community and joining the Discord discussion. Thank you. Bye bye.
