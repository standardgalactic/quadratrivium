start	end	text
0	7560	OO is better than functional. Or is it the other way around? Maybe the next big thing
7560	13080	will be better than both of them. This is one of those arguments that exercises developers,
13080	18040	and they tend to fall into one camp or the other. Either you think that functional programming
18040	24120	is the only sane answer, or OO is the defining approach for complex systems. So what are
24120	29760	the differences, and do they matter? What advantages does language paradigm have to offer?
29760	33480	And have we found all of the paradigms that there are to find?
33480	46360	Hi, I'm Dave Farley of Continuous Delivery. Welcome to my channel. If you haven't already,
46360	52680	please do hit subscribe. And if you enjoyed the video, hit like as well. I'd like to begin by
52680	60560	thanking my sponsors, Harness, Equal Experts, Octopus, and Speckflow. They're all helping us to
60560	67200	grow this channel. So please do check out their links in the description below. Whatever programming
67200	73840	paradigm or technology you pick, a deployment pipeline will improve your workflow. Check out
73840	80080	my new Continuous Delivery Pipelines book on LeanPub, which will help you to get started
80080	85800	building and to build better deployment pipelines. Links in the description again.
85800	93000	In this episode, I want to explore programming paradigms. There's an argument made by Bob
93000	99400	Martin that we've identified all of the paradigms that there are to find. I think that he might be
99400	106720	wrong, but we'll cover that later on. I do, though, like his analysis of the language
106720	112680	paradigms that we currently have. He argues that a programming paradigm works by removing a
112680	120160	freedom of some kind. It constrains us in some way, limiting our options, in ways that tend to help
120160	127760	us to reduce or even avoid some kinds of mistakes. I quite like that description. A good place to
127760	133840	start is how these paradigms arose in the first place. The first languages were unstructured,
134200	139920	paradigm-free. They were general-purpose languages, but this first generation were pretty
139920	145560	unconstrained. They were really like high-level assembler languages in some sense. You could do
145560	152560	anything. The usual way to describe the history of programming languages is as some kind of linear
152560	159240	progression. We started with unstructured languages, invented structure, and then OO came along,
159360	166600	and finally, functional, is the new kid on the block. This is rubbish and completely wrong. In
166600	172760	reality, it was quite a lot messier than that. Grace Hopper wrote the first compiler of any kind
172760	179720	in the early 1950s. Fortran was the first high-level language written in 1957, which is quickly
179720	187920	followed by Lisp in 1958. So languages began with an unstructured language, Fortran, but then the
187920	195000	second language invented was functional, kind of. Fortran was intentionally mathematical. Fortran
195000	200960	was named for formula translator. It was unstructured, but was built on some core concepts
200960	206800	that are common in programming today. Concepts like variable assignment, conditionals, and loops.
207520	213520	COBOL was the next big language written in 1959. It was trying to make programming language more
213520	218720	like natural language and so easier to learn, which I think that most people these days would
218720	224880	consider a mistake for a general purpose language. Lisp was written for researching artificial
224880	231680	intelligence at the time. We'll come back to the functional paradigm that Lisp gave birth to
231680	239680	shortly. So people built most systems in Fortran or COBOL for a while. Lisp was a bit of an outlier
239680	245200	even then, but systems were getting bigger and more complex, so the lack of constraints
245200	252960	meant that there were lots of balls of mud being produced. Dijkstra came along in 1968. He wanted
252960	258560	systems to be mathematically provable, so he said go-to statements are considered harmful
259120	265840	and gave birth to structured programming in 68. Structured programming works by constraining
265840	272720	the flow of transfer of control. You can't just jump to any point in a program as you could in
272720	280000	COBOL or Fortran or Assembler. You are forced to jump to fixed points that are defined, jump to
280000	286880	points in the language, if you like, that we these days call functions or methods. This allows us to
286880	293760	be a bit more cautious at these points. We're forced to assemble arguments and we can check them
293760	301040	for validity if we want to when a call is received. As I said earlier, it's a mistake to see this as
301040	308160	some kind of linear progression of language goodness. While all of this was going on elsewhere in
308160	316800	parallel, OO was being invented. The term OO was invented by Allen Kay in 1966, but the ideas that
316800	323520	led to it were around for a few years before that, even as early as 1961. The first real
323520	330320	OO language was similar, which was created in 1965, but there were earlier attempts.
331120	337760	The radical OO step, though, was small talk in 1972. The OO paradigm is not really what most
337760	344560	people think, though. It's not really about inheritance and why it is about putting data
344560	349680	and behavior together. I think that most OO programmers would say it is much more about
349680	358240	polymorphism. Later, Allen Kay said this, I'm sorry that I long ago coined the term objects for this
358240	364560	topic, because it gets many people to focus on the lesser idea. The big idea is messaging.
365920	372400	I think that what Kay means here is that the real value is that we can send a message to something
372400	379200	and it figures out how to process that message. We can send the same message to two different things
379760	385760	and each of them deals with that same message, but in different ways, ways that make sense to them.
386880	394000	This is polymorphism, really. This is the real power of OO, not inheritance. In fact,
394000	402160	the 1972 version of small talk didn't support inheritance at all. In Bob Martin's model,
402160	407920	this is called dependency management through polymorphism. That's how he characterizes the
407920	415680	OO paradigm. The real value of OO is our ability to modularize our systems and deal
415680	421840	from the outside with different modules in consistent ways. This is polymorphism.
423200	427120	Structured OO and functional aren't the only paradigms.
427200	432800	Logic programming constrains programs to follow the rules of formal logic, for example.
432800	438000	You could argue that machine learning in its current incarnation is a different paradigm
438000	443680	that constrains programmers by allowing them to pick good examples and only define fitness
443680	450880	functions. But let's get back to our topic for today, though. Remember, on the timeline,
450880	456080	kind of weirdly structured programming is historically the last of these paradigms to
456080	464080	turn up. But let's loop back to the current on-point fashion leader, the functional paradigm.
465120	470640	The defining characteristic of functional programming is really that it constrains assignment.
471600	477600	We write code with no side effects. Each function translates its inputs into a new
477600	484160	output, and that's all it does, without changing these inputs in any way, and without relying
484160	490240	on anything but its inputs to achieve its goals. Sometimes functional programmers talk
490240	495840	about this as separating data and function. But if I'm honest, I think that this is probably
495840	501360	so that they can argue with OO programmers who talk about combining data and behavior.
502000	508560	In reality, I like the idea of the constraints. I think that we talk a lot of rubbish about
508560	516160	languages and paradigms. I am probably primarily an OO programmer. That's where I spent most of my
516160	522160	career. But a lot of my thinking was informed by my early programming in assembler languages of
522160	527680	different kinds. An unstructured programming approach, if ever there was one. By shooting
527680	533200	myself in the foot many times when writing assembler programs, I adopted some defensive
533280	539840	habits that I later learned were part functional, part OO, part structured. So that when I learned
539840	546480	more about these ideas, they kind of fit together. And that is what I like about this model of
546480	552320	constraints, because that's exactly how and why I learned these things. I wanted to constrain
552320	558960	the freedom with which I made designs so that I screwed up less often. I adopt programming habits
558960	564880	that limit the degree to which I screw up when I write code. I don't really think of myself as a
564880	571040	language or even a paradigm focused developer. But I like to pick the tools that make sense to me at
571040	579920	the time. Modern languages are mostly a combination of these constraints, rarely pure in concept,
579920	586640	although there are some. I laugh when functional programmers rubbish OO, for example, and then
586640	593600	go on to use collections to implement folds. The degree to which the collections like these make
593600	601520	sense is really applying polymorphism to me and OO idea. The degree to which the data is external
601520	607600	in a list is an implementation detail in this case, as long as we don't change that data.
608880	615440	If I write immutable code in Java or C sharp or any other OO programming language, then I can
615440	622960	justifiably be seen to be writing in a functional style. I used to write C. I used to use ideas
622960	629680	that I now I'd call OO and functional in the design of my code. My language didn't help me much in
629680	636480	those days, in the same way that Java doesn't enforce no assignment when I'm using it. But
636480	642000	it doesn't take a lot of self-discipline to achieve the same results if I want to.
642080	649520	So at the technical level, I think that your choice of paradigm is just that. It's a choice,
650240	658160	and it can be fluid and contextual. Let's be clear, though, you can write crap code in any paradigm,
658160	665920	and you can write great code in any paradigm too. There's no functional good OO bad here.
666400	671840	There's a fashion for each side to rubbish the other. And if I'm honest, I think that that is a
671840	678640	little naive. There are advantages to different paradigms, different advantages for each. As I've
678640	684480	said, I am more of an OO than a functional programmer, so probably somewhat biased. The problem
684480	689840	with this kind of religious war is that people get over emotional. So if I do trample on any of
689840	694560	your sacred cows during the course of this, please do forgive me. There is a social
694800	701680	dimension to all of this, though, and we tend to be too tribal in software development. Broadly,
701680	708080	I think that we could oversimplify the tribes like this. Functional programmers tend to think of
708080	715520	programming as maths. OO programmers tend to think of coding as a problem of modeling. Neither of
715520	722880	these are completely true, but may be a reasonable approximation. So the benefits of a functional
723600	729920	approach are that we can abstract ideas into functions that are always correct. In every
729920	738000	circumstance and so write less code. By excluding or at least constraining assignment, we can create
738000	745280	more stable systems and maybe even prove more provable systems. The benefits of a model based
745280	751760	approach are that we can be guided in our analysis by the problem. I think that this is one of the
752240	760240	advantages that OO has over functional programming. It's that when done well, the code is more
760240	766160	navigable because it's closer to the problem. It allows us to explore the relationships more
766160	772400	clearly and understand the problem in small pieces in a way that is closely related to how we think
772400	780640	about the problem. Human beings are naturally classifiers. This gets us to what seems to me
780720	787680	like an important point. I think OO is more closely aligned with how humans brains work.
788400	793920	I can certainly buy the claim that the more mathematical functional approach is a more
793920	801440	rigorous way to capture an idea. But much as I love maths, it's famously difficult and in
801440	808320	essence an unnatural way of thinking for human brains. We value mathematical thinkers highly
808400	814000	because their skills are so rare. This is so obvious. If I throw a ball to you,
815120	819920	is it easier to catch it or to work out the physics of its flight and predict where it will
819920	825760	land so that you can move to the right place? We don't do the maths when we catch a ball.
825760	831600	If we did, we'd certainly miss the ball. So there's something to be said for ease of
831600	842480	comprehension, clarity of expression, which is clearer, this or this. Even if you are a functional
842480	848400	programmer, I think that you would agree that the second version was easier to read. Sure,
848400	854320	we can argue about the flexibility of folds versus loops and because of the immutability of
854320	860400	functional style, our potential to parallelize the computation of our programs, an argument which I
860400	864560	confess as a developer of high performance systems I'm a bit skeptical about, but the
864560	871280	readability, the comprehensibility of our code matters a lot. Here is a function written in
871280	878320	imperative style, in this case in Java. We're just going to look at a collection of numbers
878320	885520	and form some kind of total. Here is the same function written in Haskell.
885520	896000	In this case, we're going to define the function as a recursive function. The first seems to be a
896000	903360	lot easier to explain to somebody that has never written any code because of this alignment with
903360	910480	the way in which people think about things. You have to access some reasonably complex ideas
910480	917680	like recursion to even start to understand the second example. Yes, the code is shorter,
918240	925120	but that compromises its readability somewhat too. The first is a bit more like catching the ball
925120	932080	than doing the maths. In reality, in Haskell, this sum function is a library function, which
932080	940880	I'm told is apparently implemented like this. I rest my case. I think that the functional
940880	947440	paradigm has a lot to offer. In particular, the idea of limiting side effects is an excellent one,
947440	952880	however you choose to write your programs. I've adopted that style of thinking in my OO code
952880	959360	for a long time now, not eliminating assignment, but certainly limiting it and reducing the side
959360	966800	effects. I confess that I've never tried to write a whole functional system as a pure functional
966800	972480	system, and I'm sure that I would learn a lot if I did, but I think that one of the reasons that
972480	977840	everyone doesn't do functional programming is that it's more difficult to transpose these
977840	982480	ISDs into the kinds of functions in a way that keeps the code readable and navigable.
982720	988400	I said at the beginning that I disagreed somewhat with Bob Martin about whether we have found all of
988400	994880	the programming paradigms. There is another aspect of programs and programming that we can
994880	1003600	usefully constrain that has some very interesting properties. That is synchronicity. What if we
1003600	1010320	constrained our programs to disallow synchronous calls between modules of code? Each component of
1010400	1016320	each component of the system only communicated with any other by sending a message.
1017200	1024560	Response is sent in a different message some time later. I'm not talking about
1024560	1032080	asynchro weights here, which I dislike. More like this. A sends an add item message to B
1033040	1038720	some time later. B sends an item added message back, saying and confirming the receipt.
1040560	1044480	Concurrency only allowed at these module boundaries,
1044480	1051360	no creating threads inside a module. Each module is internally single threaded and so naturally
1051360	1059120	concurrent. Each module is allowed to be state for or stateless as need arises.
1060240	1065600	This approach is significantly higher performance than any other approach that I am familiar with,
1065600	1071200	certainly higher performance than a functional design. Functional systems copy a lot of stuff
1071200	1077600	to achieve immutability. The best that they can do is clever tricks to pretend that they're copying
1077600	1083680	things, but actually not moving the bytes around in memory. However clever these tricks are though,
1084240	1090560	it's still going to add CPU cycles. This is less tightly coupled than OO systems,
1091120	1097120	this approach of limiting synchronicity that I've described, but it has some properties of
1097120	1104000	both functional and OO design. It also sounds to me quite a lot closer to the vision that
1104000	1109680	Alan Kay had back in the 1960s. I wrote about some of these ideas in a thing called the
1109680	1115520	reactive manifesto. There's a link in the description. If you'd like to hear more about
1115520	1120160	these kinds of ideas in a future video, do let me know in the comments. Thank you very much for
1120160	1130160	watching.
