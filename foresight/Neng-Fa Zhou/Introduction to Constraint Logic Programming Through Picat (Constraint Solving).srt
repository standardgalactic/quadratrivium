1
00:00:00,000 --> 00:00:13,320
Hello, welcome to the fifth video on Introduction to Constraint Logic Programming through PiCAD.

2
00:00:13,320 --> 00:00:17,200
This will be the last video in the series.

3
00:00:17,200 --> 00:00:23,560
The topic of this video is Constraint Solving.

4
00:00:23,560 --> 00:00:32,720
Only tasks involve combinational search, and any combinational search problem can be formulated

5
00:00:32,720 --> 00:00:40,480
as a constraint satisfaction problem, CSP in short.

6
00:00:40,480 --> 00:00:53,000
A CSP consists of a set of variables, each of which has a domain, and a set of constraints

7
00:00:53,000 --> 00:01:01,280
among the variables, and optionally an objective function.

8
00:01:01,280 --> 00:01:15,520
A solution to a CSP is a valuation of variables that satisfies all the constraints, and optimizes

9
00:01:15,520 --> 00:01:23,440
the objective function if it exists.

10
00:01:23,440 --> 00:01:33,640
So let's take a look at this toy problem, a crypt arithmetic puzzle, send plus more

11
00:01:33,640 --> 00:01:35,720
equals money.

12
00:01:35,720 --> 00:01:46,480
So giving the digits, giving the letters, we want to assign each letter a unique digit

13
00:01:46,480 --> 00:01:52,800
such that the equation holds, send plus more equals money.

14
00:01:52,800 --> 00:02:00,520
Alright, let's write a program in PiCAD to solve this problem.

15
00:02:00,520 --> 00:02:09,480
Alright, the first thing you need to do is you need to import a module.

16
00:02:09,480 --> 00:02:13,600
There are four constraint modules in PiCAD.

17
00:02:13,600 --> 00:02:17,280
Alright, let's import CP.

18
00:02:17,280 --> 00:02:23,680
Alright, you need to generate the variables.

19
00:02:23,680 --> 00:02:28,520
In this case, you need to have a CSP model.

20
00:02:28,520 --> 00:02:33,280
In this case, the module is quite obvious.

21
00:02:33,280 --> 00:02:35,040
So what do we do?

22
00:02:35,040 --> 00:02:38,520
We use a variable for each letter.

23
00:02:38,520 --> 00:02:53,280
So let's say VS equals S, send more, OK, a Y, these are the letters, and then we need

24
00:02:53,280 --> 00:02:58,680
to declare the domain for each of the variables.

25
00:02:58,680 --> 00:03:06,000
So this is 0 to 9, and then we need to write the constraints.

26
00:03:06,000 --> 00:03:14,720
So of course, send as a four-digit integer, the leading digit cannot be 0.

27
00:03:14,720 --> 00:03:20,440
So S not equal 0.

28
00:03:20,440 --> 00:03:22,320
So this is a built-in.

29
00:03:22,320 --> 00:03:26,320
So this one, this not equal is a built-in.

30
00:03:26,320 --> 00:03:29,480
This means not unifiable.

31
00:03:29,480 --> 00:03:35,280
This is a built-in used for terms, for constraints.

32
00:03:35,280 --> 00:03:41,840
So we use this operator, sharp, and then this not equal symbol.

33
00:03:41,840 --> 00:03:51,400
And also, send to the more, m is a leading digit, it cannot be 0.

34
00:03:51,400 --> 00:04:03,400
And then we write the equation, send plus, and all the digits, all the digits are different.

35
00:04:03,400 --> 00:04:11,320
So we use this global constraint or different, so VS.

36
00:04:11,320 --> 00:04:21,280
And then we write the equation, send as a weighted sum, send has a power, it is 1,000.

37
00:04:21,280 --> 00:04:39,560
So now, talent times, S plus, times E, and times N, and times D.

38
00:04:39,560 --> 00:05:02,400
Okay, so this is a send plus more, m, o, and r, more, and equals money.

39
00:05:02,400 --> 00:05:08,280
All right, so equals, again, this equality, this is for constraint.

40
00:05:08,280 --> 00:05:15,160
So this is sharp equal, means equality constraint, all right, equals the money.

41
00:05:15,160 --> 00:05:37,840
All right, so this is 10,000, and money, and money, and money.

42
00:05:37,840 --> 00:05:54,960
Okay, so this is a constraint, all right, so, and then, okay, the last thing after generating

43
00:05:54,960 --> 00:06:04,960
the constraints, we want to label the variables with the values, by using this built-in, so

44
00:06:05,080 --> 00:06:06,720
VS.

45
00:06:06,720 --> 00:06:13,040
And then we output, okay, output the values, let's just print, all right.

46
00:06:13,040 --> 00:06:26,680
All right, so, send plus more, equals money, all right, so now, we can run the program,

47
00:06:26,680 --> 00:06:37,160
so let's say, send more, okay, it's good, all right, so this is a solution, yeah, this

48
00:06:37,160 --> 00:06:45,640
is a solution, okay, so, okay, there are several modules, in case you want to use a different

49
00:06:45,880 --> 00:06:54,280
server, okay, instead of using CP server, you can use a set, okay, set, a set server,

50
00:06:54,280 --> 00:07:01,560
okay, a set server, there is a set compiler, which compiles all the constraints, okay,

51
00:07:01,560 --> 00:07:07,320
to set, to conjunctive normal form, and then it calls a set server to solve it.

52
00:07:08,280 --> 00:07:17,480
And you can also use this one called MIP, okay, mixed integer programming server,

53
00:07:18,760 --> 00:07:29,240
this MIP server, okay, actually supports not only integer variables, but also real values.

54
00:07:29,560 --> 00:07:38,200
MIP server, in order to use a MIP server, you need to install MIP server, okay, so actually,

55
00:07:38,200 --> 00:07:47,160
in my computer, I have two MIP servers installed, the Groovy server, and also the CBC server,

56
00:07:48,120 --> 00:07:52,680
all right, you can also use SMT, okay, this is SMT server,

57
00:07:55,880 --> 00:08:06,200
it has a connection to Z3 and the CV4 servers, but I have to say for finite domain constraints,

58
00:08:07,000 --> 00:08:14,360
SMT servers are not so competitive, all right, good, so that's our first example,

59
00:08:17,720 --> 00:08:24,840
all right, the next example I want to show you is, okay, you know, every

60
00:08:25,560 --> 00:08:35,160
called a satisfiability problem, okay, I have this problem set, okay, all right, so the satisfiability

61
00:08:35,160 --> 00:08:43,480
problem is, okay, giving a set of variables and a boolean formula, okay, and the problem

62
00:08:43,480 --> 00:08:51,800
amounts to finding a check if the formula is satisfiable or not, and if it is satisfiable,

63
00:08:52,360 --> 00:09:03,480
then find a solution, find a solution assignment for the variables, so this is a one example

64
00:09:03,480 --> 00:09:12,520
of the satisfiability problem, so in this example, there are four variables and all the variables

65
00:09:12,520 --> 00:09:19,080
are boolean, okay, boolean variables are treated as integer variables, zero, one integer variables,

66
00:09:20,200 --> 00:09:28,440
and then, okay, there are these operators, okay, see these operators, this is for implication,

67
00:09:29,480 --> 00:09:39,320
and then this is for logic or this is for negation, and this for equivalence, okay,

68
00:09:39,320 --> 00:09:46,760
this is for, okay, logic and, okay, so this is a formula, and then it's used to solve, okay,

69
00:09:47,880 --> 00:09:57,080
and then print out the value, all right, let's take a look at another, this is, okay, the very

70
00:09:57,080 --> 00:10:08,120
first problem that was found to be an NP-complete problem, all right, so let's take a look at another

71
00:10:08,120 --> 00:10:17,800
problem called a maximum click problem, so this is a click, all right, so give me a graph,

72
00:10:18,680 --> 00:10:28,040
okay, so in our case, a graph is represented as a adjacency matrix, okay, so the entry is one,

73
00:10:28,040 --> 00:10:35,240
if there is an H, okay, let's say vertex one to vertex two, there is an H, yeah, and the entry

74
00:10:35,240 --> 00:10:42,440
is zero, okay, if the two vertices are not connected, all right, so what do we do, again,

75
00:10:42,440 --> 00:10:49,800
so we use set-solver, basically for this type of problem, set-solver is the most competitive,

76
00:10:51,000 --> 00:10:58,120
so for zero one, integer programming problems, okay, the set-solver is the fastest,

77
00:10:59,080 --> 00:11:04,920
so okay, we get the graph, okay, so this is a number of vertices in the graph,

78
00:11:06,040 --> 00:11:13,800
and then we create a list of variables, basically for each vertex, we create one variable,

79
00:11:14,760 --> 00:11:18,920
and all the variables are Boolean, okay, so that means there are zero one

80
00:11:19,640 --> 00:11:31,240
integer variables, and then we use this for each, for each, this is like a loop, okay, it takes

81
00:11:31,240 --> 00:11:40,600
iterators and conditions, okay, in this example, there were two iterators, okay, so U, okay, is over

82
00:11:40,600 --> 00:11:50,200
this range, and V is in this range, basically, okay, there's four each iterates over all pairs,

83
00:11:50,760 --> 00:11:57,480
okay, all pairs of vertices, okay, so this graph is undirected, so I assume it is undirected,

84
00:11:57,480 --> 00:12:08,680
so all possible pairs, so if the vertex, this vertex U is in a click, okay, that means the

85
00:12:09,240 --> 00:12:19,640
vast U is one, and also vertex V is in a click, all right, this is one, okay, then this U and V

86
00:12:19,640 --> 00:12:27,000
must be connected, okay, then that means the entry, GUV must be one, okay, and this is the

87
00:12:27,000 --> 00:12:37,000
optimization problem, okay, we want to find a maximum click, okay, so we want to find an assignment

88
00:12:37,000 --> 00:12:48,520
that maximizes this total sum, all right, so this is another example, and next let's consider another

89
00:12:48,520 --> 00:13:01,880
famous NP-complete problem called a vertex cover problem, again, okay, giving a graph, okay, we want to

90
00:13:02,760 --> 00:13:15,800
find a set of vertices that covers all the edges in a graph, okay, so it is very similar to the

91
00:13:15,800 --> 00:13:25,720
previous click, maximum click problem, so for each vertex, we use a variable, okay, it is zero one,

92
00:13:25,720 --> 00:13:36,120
right, and then for each pair of vertices, okay, so what do we do? If this pair is has an H, yeah,

93
00:13:36,120 --> 00:13:46,920
if it has an H, then this H must be covered, okay, that means either, okay, U is in the set,

94
00:13:47,720 --> 00:13:56,680
or V is in the set, okay, we want to find a minimum set, okay, that covers the graph, okay, so we want to

95
00:13:57,480 --> 00:14:06,920
minimize, okay, the sum of the variables, so that is a vertex cover problem, all right, next one

96
00:14:06,920 --> 00:14:17,880
is called a Hamilton cycle problem, HCP, so give me a graph, okay, this one is a directed

97
00:14:17,880 --> 00:14:26,520
graph, okay, giving a directed graph, we want to, okay, find a Hamilton cycle, okay, in the graph,

98
00:14:27,640 --> 00:14:35,000
so first, okay, how to represent a directed graph, okay, we use domain variables to represent

99
00:14:35,720 --> 00:14:43,080
a graph, all right, so basically for each vertex, okay, we have a variable,

100
00:14:43,800 --> 00:14:49,480
we have a variable, this is like a adjacent list representation of a graph,

101
00:14:50,520 --> 00:14:59,880
so V1, so that means from vertex one, okay, there is an H, okay, one two is an H, one five is an H,

102
00:14:59,960 --> 00:15:11,320
okay, one six is an H, so this is, these domain variables represent the giving graph, okay,

103
00:15:12,040 --> 00:15:20,760
and there is a built-in constraint called a circuit, okay, this one is true if, okay, the assignment

104
00:15:21,560 --> 00:15:28,040
forms a Hamilton cycle, all right, so we just use this, all right, so this modeling is easy,

105
00:15:28,600 --> 00:15:32,200
and then we find it, okay, find a Hamilton cycle problem,

106
00:15:33,400 --> 00:15:42,680
find a Hamilton cycle and print it out, all right, next problem is called a subset sum problem,

107
00:15:43,480 --> 00:15:56,760
subset sum, all right, it is another well-known NP-complete problem, okay, giving a set of

108
00:15:56,760 --> 00:16:03,720
integers, okay, let's say this is a set of integers, okay, and a target number, a target number,

109
00:16:04,680 --> 00:16:13,800
okay, what do we want to do, okay, we want to find a subset, okay, find a subset whose sum,

110
00:16:14,760 --> 00:16:22,200
okay, equals the target number, okay, so this, well, basically this modeling for each number,

111
00:16:23,000 --> 00:16:30,520
okay, we use a boolean variable, okay, if the variable is one, okay, that means, okay, the

112
00:16:30,520 --> 00:16:39,640
number is in the set, all right, otherwise, okay, it is not in the set, and we use this

113
00:16:39,640 --> 00:16:47,400
constraint, okay, to say, okay, this b times the element, okay, we use a zip, okay, so basically,

114
00:16:48,040 --> 00:16:57,880
for each variable and each integer, all right, so each variable and integer, okay, so

115
00:17:00,360 --> 00:17:06,680
what do we do, okay, for each pair in the zip list, okay, so we add this term,

116
00:17:07,640 --> 00:17:16,520
add this term and the total, okay, the total equals the target, okay, and in this example,

117
00:17:16,600 --> 00:17:25,400
all right, we use the MIPS solver, okay, actually, for this type of small problems,

118
00:17:26,600 --> 00:17:34,200
it doesn't make much difference, okay, which solver you use doesn't make much difference,

119
00:17:34,200 --> 00:17:41,320
okay, so in my computer, the CBC MIPS solver is installed, and then you can

120
00:17:41,880 --> 00:17:52,600
tilt the system or use CBC solver, okay, as a solver option, okay, this is, all right,

121
00:17:52,600 --> 00:18:03,480
let's consider another example, okay, called a metric square, okay, this is another famous example,

122
00:18:03,480 --> 00:18:12,680
a metric square, so giving a grid, okay, in this case, it is a four by four grid,

123
00:18:13,480 --> 00:18:23,720
all right, so what do we want to do, we want to assign a unique integer to each cell,

124
00:18:23,720 --> 00:18:29,480
okay, each square, each square, okay, to assign an integer from this domain to each

125
00:18:30,440 --> 00:18:43,480
cell, such that, okay, every row, every column, and also two of this diagonal, okay, the primary

126
00:18:43,480 --> 00:18:51,080
diagonal and the secondary diagonal, okay, all have the same sum, okay, in this case, okay, sums to

127
00:18:51,080 --> 00:18:58,760
34, okay, 34, so, all right, we use this, so all the entries are, okay, what do we do,

128
00:18:59,720 --> 00:19:07,080
so we have a two-dimensional array, and all the entries, okay, are variables, and the variables

129
00:19:07,080 --> 00:19:15,080
have this domain from a wall to 16, and all the variables are different, right, all right, we use

130
00:19:15,160 --> 00:19:23,400
this vars, okay, vars to get, because all different expects a list of variables, and so what do we

131
00:19:23,400 --> 00:19:29,960
do, we use this function vars, okay, vars takes a term, and it returns a list of variables in the

132
00:19:29,960 --> 00:19:39,640
term, so, and then we write the constraints, okay, so for each i in this range, what do we do, okay,

133
00:19:40,360 --> 00:19:48,760
every row, yeah, every row, okay, has this sum, okay, so the row i has this sum, and the column i

134
00:19:48,760 --> 00:19:55,480
has this sum, and then we write the, okay, the primary diagonal, the primary diagonal,

135
00:19:55,480 --> 00:20:03,800
and then the secondary diagonal, okay, and in this example, we use cp, for this example,

136
00:20:03,800 --> 00:20:14,040
actually cp, the cp solver provides several modeling, okay, we call labeling strategies,

137
00:20:14,600 --> 00:20:22,120
all right, for this example, all right, we use this ff called ff, first fill principle,

138
00:20:23,720 --> 00:20:32,760
well, basically it selects domain, the smallest domain first, and then prints out the value,

139
00:20:33,480 --> 00:20:37,880
so we could run this, or you can see the difference, okay, you can see

140
00:20:40,840 --> 00:20:41,960
magic square,

141
00:20:47,000 --> 00:20:52,200
okay, and also let's measure the time, all right, well, actually this is pretty faster,

142
00:20:52,200 --> 00:21:00,840
okay, the cp solver is pretty faster, okay, you can change it to square, I think this is not hot enough,

143
00:21:00,840 --> 00:21:09,480
all right, so the problem is still a toy problem, okay, so, okay, now we use set, set solver, okay,

144
00:21:09,480 --> 00:21:24,680
use set solver, and let's see the time, well, it takes a little bit longer, okay, why, because

145
00:21:24,680 --> 00:21:33,000
set solvers are not normally not good at handling numbers, but this one is okay, okay, in general

146
00:21:34,120 --> 00:21:45,560
set solvers, actually I have found that the set solver outperforms the cp solver, okay, in general

147
00:21:45,640 --> 00:21:54,920
case, so if you have time, okay, and unless the time limit is really, really small, all right,

148
00:21:54,920 --> 00:22:01,800
the cp solver, all the problem is really small, or you have some problem specific

149
00:22:03,160 --> 00:22:10,360
labeling strategies, okay, otherwise the set solver is pretty efficient,

150
00:22:10,840 --> 00:22:17,320
all right, the next example is called a sudoku puzzle, that's a very famous

151
00:22:18,840 --> 00:22:28,280
puzzle, a lot of people, okay, play it for the sudoku, so this one giving a grade, again,

152
00:22:28,280 --> 00:22:34,920
giving a grade, okay, so in this case it depends on the size of the grid, let's say

153
00:22:35,800 --> 00:22:46,440
this is 25 by 25 grade, so what do we want to do, we want to assign the numbers, yeah,

154
00:22:46,440 --> 00:23:01,640
numbers from 1 to 25, okay, to the, to the, to the sales, okay, such that, okay, every row has

155
00:23:01,640 --> 00:23:08,600
different numbers, every column has different numbers, and also every small square, okay,

156
00:23:08,600 --> 00:23:15,640
this is a small square, in this case every five by five, okay, every five by five small squares

157
00:23:15,640 --> 00:23:23,480
also have, also has different numbers, so, and modeling, okay, what do we do, okay, we first

158
00:23:23,480 --> 00:23:31,880
fetch this array, this is a grid, all right, basically there are prefilled entries,

159
00:23:31,880 --> 00:23:39,160
prefilled entries, and the underscores are blanks, okay, these are the blanks, and the solver

160
00:23:40,040 --> 00:23:49,960
will fill in the blanks, so the domain of the variables is from 1, okay, to n, and then we

161
00:23:49,960 --> 00:23:57,160
write the constraints, so for each row, and for each row, okay, all the numbers in the row are

162
00:23:57,160 --> 00:24:03,640
different, and for each column, and all the numbers in the column are different, all right,

163
00:24:03,640 --> 00:24:10,200
so what do we do, how to get the column, how to get the column, we use list comprehension

164
00:24:11,000 --> 00:24:17,720
to retrieve all the entries, okay, in column, in this column, okay, so for each row in this,

165
00:24:18,440 --> 00:24:25,560
and we get, okay, row column, and then we get the small square, okay, all the small squares

166
00:24:25,560 --> 00:24:32,520
constrain the entries of each of the small squares, okay, the dimension of the small square is this,

167
00:24:32,520 --> 00:24:42,520
okay, so keeping n, so if n is 25, then m is five, and then we write this, okay, for each of the

168
00:24:42,520 --> 00:24:49,000
small squares, okay, basically this row column, this is the starting row number, and the starting

169
00:24:49,000 --> 00:24:56,280
column number of each of the small square, and then we, okay, get all the entries in the small

170
00:24:56,280 --> 00:25:03,240
square, okay, using list comprehension, and then we say, okay, all the small squares are different,

171
00:25:03,240 --> 00:25:10,600
and then solve, all right, this one uses a set, actually set is extremely efficient, okay,

172
00:25:10,680 --> 00:25:20,840
for a problem like a sudoku, okay, so, well, you see this is 25 by 25, okay, it's a pretty hard

173
00:25:20,840 --> 00:25:33,080
problem, all right, you see this sudoku, again, time, measure the time, oops, something is wrong,

174
00:25:33,080 --> 00:25:47,160
oh, sudoku, okay, I don't think I did a good preparation,

175
00:25:48,440 --> 00:25:56,280
this one is not supposed to be there, so let's run it again, sudoku, okay, it came out

176
00:25:56,280 --> 00:26:05,080
instantly, well, you could try other solvers, so in general, for a problem, okay, normally you

177
00:26:05,080 --> 00:26:10,760
don't know which solver performs the best, so what do you need to do, you need to do experiment,

178
00:26:10,760 --> 00:26:18,360
all right, well, since in pocket, okay, you can write the same model and experiment with

179
00:26:18,360 --> 00:26:24,280
different solvers, okay, what do you need to do, you just need to input a different model,

180
00:26:24,920 --> 00:26:28,440
okay, so you can switch from one solver to another solver,

181
00:26:28,440 --> 00:26:36,120
seamlessly, all right, let's consider one more problem, okay, this is called a Inquins problem,

182
00:26:37,240 --> 00:26:44,520
Inquins, okay, this is a very famous problem, Inquins, okay, so giving originally it is 8 by 8,

183
00:26:45,720 --> 00:26:52,040
so 8 by 8 is not interesting, computationally interesting, because it's a search space is

184
00:26:52,040 --> 00:27:01,000
not big enough for experiment, so in general it's 8 by 8, okay, so giving 8 by 8 grid, okay,

185
00:27:01,000 --> 00:27:10,200
you won't put 8 queen pieces on the board, such that, okay, no two queens attack each other,

186
00:27:10,760 --> 00:27:17,400
okay, you know, in chess, how the queen piece moves, the queen basically combines

187
00:27:17,800 --> 00:27:26,040
the movement of the rock and the movement of the bishop, so a queen can move horizontally,

188
00:27:26,600 --> 00:27:33,240
vertically, and diagonally, okay, so that means, okay, two queens attack each other,

189
00:27:33,240 --> 00:27:40,040
if two queens are placed in the same row, the same column, or the same diagonal,

190
00:27:40,920 --> 00:27:46,920
all right, so here is, we have two different models for this, okay, one is,

191
00:27:49,880 --> 00:27:57,720
this is, all right, so what do we do, okay, for each, well, let's say for each row,

192
00:27:59,000 --> 00:28:09,160
we use a variable, okay, we use one variable, Q, so there are in rows, so we use in variables,

193
00:28:10,040 --> 00:28:16,040
and all the variables, okay, each of the variables gives a column number, yeah, column number,

194
00:28:17,000 --> 00:28:25,320
so that means Q1, all right, gives a column number of the first queen, and Q2 gives a column number

195
00:28:25,320 --> 00:28:31,720
of the second queen, and so on, all right, so now we need to write the constraints, okay,

196
00:28:31,720 --> 00:28:42,040
new two queens are in the same column, so Qi for each pair, ij, and Qi, okay, not equal, okay,

197
00:28:42,040 --> 00:28:53,000
Qj, and also, not in the same diagonal, yeah, okay, not in, not in a diagonal, that is parallel

198
00:28:53,000 --> 00:29:00,840
to the primary diagonal, okay, so this one, use this constraint, and not in a diagonal,

199
00:29:00,840 --> 00:29:08,040
that is parallel to the secondary diagonal, and then, okay, so this is the constraint,

200
00:29:08,040 --> 00:29:15,960
and then we use FF, actually for this one, the first pair, first pair of principles, this FF

201
00:29:15,960 --> 00:29:30,440
labeling strategy works very well, and we can say, okay, time, queens, all right, so

202
00:29:30,440 --> 00:29:38,440
by default, it solves 100 queens, all right, comes out instantly, and we can try 1000 queens,

203
00:29:39,400 --> 00:29:43,960
so 1000, wait, maybe it takes several seconds,

204
00:29:50,360 --> 00:29:56,360
oh, it's still, oh, okay, so it takes 10 seconds, about 10 seconds, all right, so 1000 queens,

205
00:29:57,080 --> 00:30:01,320
all right, let's consider another model, all right, this is, we call,

206
00:30:04,120 --> 00:30:13,800
okay, in this model, so for each cell, we use a variable, a boolean variable,

207
00:30:13,800 --> 00:30:19,800
good, so the boolean variable, if the variable is zero, that means there is no queen, okay,

208
00:30:19,800 --> 00:30:28,760
put on that cell, if the variable is one, that means, okay, there is a queen, okay, at that cell,

209
00:30:29,480 --> 00:30:37,800
and so then we create n by n, okay, in square variables, and all the variables are boolean,

210
00:30:38,600 --> 00:30:44,760
and then we write the constraints, all right, so for each, okay, also for, of course, for this type

211
00:30:44,840 --> 00:30:52,120
of problems, then we should use set, all right, CP servers, okay, in general are not good at dealing

212
00:30:52,120 --> 00:31:02,360
with zero one variables, all right, so for, we make sure, okay, each row has exactly one queen,

213
00:31:03,240 --> 00:31:12,840
okay, and each column has exactly one queen, okay, and then we also, okay, constrain the diagonal,

214
00:31:13,640 --> 00:31:22,200
diagonal, for this diagonals, these are all the diagonals that are parallel to the,

215
00:31:24,760 --> 00:31:30,440
parallel to the secondary, yeah, to the parallel to the secondary diagonal,

216
00:31:31,880 --> 00:31:38,920
and for each of these diagonal, okay, we retrieve all the entries, okay, the sum of these variables

217
00:31:39,880 --> 00:31:48,200
is less than or equal to one, yeah, and the same to the diagonals that are parallel to the primary

218
00:31:48,200 --> 00:31:58,520
diagonal, okay, so, and each diagonal, okay, the number of queens placed in that diagonal

219
00:31:59,160 --> 00:32:07,960
is less than or equal to one, all right, good, all right, so I have shown you several examples,

220
00:32:08,040 --> 00:32:20,360
okay, basically, it is, this packet has good modeling capability, okay, because of the availability

221
00:32:20,360 --> 00:32:29,160
of the language constructs, such as arrays, okay, loops for each loops, and the list of

222
00:32:29,160 --> 00:32:38,920
comprehensions, okay, actually, and also there are several solvers available, so you can pick the

223
00:32:38,920 --> 00:32:52,920
best solver that suits your problem, all right, so I have, in this video lectures, okay, I have

224
00:32:53,880 --> 00:33:02,040
introduced you at the private system, okay, and I talked about the functional programming, logic

225
00:33:02,040 --> 00:33:10,680
programming, using pattern matching rules, and I talked about recursive programming and dynamic

226
00:33:10,680 --> 00:33:20,120
programming, and in this video, I talked about constraint programming, well, I don't think this

227
00:33:20,600 --> 00:33:28,360
is comprehensive, but I think you are ready to explore, and you are ready to write programs

228
00:33:28,360 --> 00:33:39,880
to solve problems, and for, you know, details, for the details, okay, you can take a look at the

229
00:33:40,680 --> 00:33:47,480
user's guide, and you can also, okay, there is a book available, published several years ago,

230
00:33:47,480 --> 00:33:54,440
on constraint solving and planning with the packet, and that's also a good resource,

231
00:33:55,880 --> 00:34:05,240
and I want to point you to another source, that is Hakan Cajestran's page,

232
00:34:05,240 --> 00:34:16,680
packet page, and Hakan has written more than 1,000 programs, and probably, okay, when you come to a

233
00:34:16,680 --> 00:34:26,280
problem, okay, very likely, and he has already solved it, okay, I mean, if it's a popular problem,

234
00:34:28,200 --> 00:34:36,360
all right, so that is the end of this video, and also the end of this series, okay, thank you very

235
00:34:36,360 --> 00:34:41,160
much for watching.

