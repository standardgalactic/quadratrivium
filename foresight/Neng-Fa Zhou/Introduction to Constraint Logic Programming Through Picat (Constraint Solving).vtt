WEBVTT

00:00.000 --> 00:13.320
Hello, welcome to the fifth video on Introduction to Constraint Logic Programming through PiCAD.

00:13.320 --> 00:17.200
This will be the last video in the series.

00:17.200 --> 00:23.560
The topic of this video is Constraint Solving.

00:23.560 --> 00:32.720
Only tasks involve combinational search, and any combinational search problem can be formulated

00:32.720 --> 00:40.480
as a constraint satisfaction problem, CSP in short.

00:40.480 --> 00:53.000
A CSP consists of a set of variables, each of which has a domain, and a set of constraints

00:53.000 --> 01:01.280
among the variables, and optionally an objective function.

01:01.280 --> 01:15.520
A solution to a CSP is a valuation of variables that satisfies all the constraints, and optimizes

01:15.520 --> 01:23.440
the objective function if it exists.

01:23.440 --> 01:33.640
So let's take a look at this toy problem, a crypt arithmetic puzzle, send plus more

01:33.640 --> 01:35.720
equals money.

01:35.720 --> 01:46.480
So giving the digits, giving the letters, we want to assign each letter a unique digit

01:46.480 --> 01:52.800
such that the equation holds, send plus more equals money.

01:52.800 --> 02:00.520
Alright, let's write a program in PiCAD to solve this problem.

02:00.520 --> 02:09.480
Alright, the first thing you need to do is you need to import a module.

02:09.480 --> 02:13.600
There are four constraint modules in PiCAD.

02:13.600 --> 02:17.280
Alright, let's import CP.

02:17.280 --> 02:23.680
Alright, you need to generate the variables.

02:23.680 --> 02:28.520
In this case, you need to have a CSP model.

02:28.520 --> 02:33.280
In this case, the module is quite obvious.

02:33.280 --> 02:35.040
So what do we do?

02:35.040 --> 02:38.520
We use a variable for each letter.

02:38.520 --> 02:53.280
So let's say VS equals S, send more, OK, a Y, these are the letters, and then we need

02:53.280 --> 02:58.680
to declare the domain for each of the variables.

02:58.680 --> 03:06.000
So this is 0 to 9, and then we need to write the constraints.

03:06.000 --> 03:14.720
So of course, send as a four-digit integer, the leading digit cannot be 0.

03:14.720 --> 03:20.440
So S not equal 0.

03:20.440 --> 03:22.320
So this is a built-in.

03:22.320 --> 03:26.320
So this one, this not equal is a built-in.

03:26.320 --> 03:29.480
This means not unifiable.

03:29.480 --> 03:35.280
This is a built-in used for terms, for constraints.

03:35.280 --> 03:41.840
So we use this operator, sharp, and then this not equal symbol.

03:41.840 --> 03:51.400
And also, send to the more, m is a leading digit, it cannot be 0.

03:51.400 --> 04:03.400
And then we write the equation, send plus, and all the digits, all the digits are different.

04:03.400 --> 04:11.320
So we use this global constraint or different, so VS.

04:11.320 --> 04:21.280
And then we write the equation, send as a weighted sum, send has a power, it is 1,000.

04:21.280 --> 04:39.560
So now, talent times, S plus, times E, and times N, and times D.

04:39.560 --> 05:02.400
Okay, so this is a send plus more, m, o, and r, more, and equals money.

05:02.400 --> 05:08.280
All right, so equals, again, this equality, this is for constraint.

05:08.280 --> 05:15.160
So this is sharp equal, means equality constraint, all right, equals the money.

05:15.160 --> 05:37.840
All right, so this is 10,000, and money, and money, and money.

05:37.840 --> 05:54.960
Okay, so this is a constraint, all right, so, and then, okay, the last thing after generating

05:54.960 --> 06:04.960
the constraints, we want to label the variables with the values, by using this built-in, so

06:05.080 --> 06:06.720
VS.

06:06.720 --> 06:13.040
And then we output, okay, output the values, let's just print, all right.

06:13.040 --> 06:26.680
All right, so, send plus more, equals money, all right, so now, we can run the program,

06:26.680 --> 06:37.160
so let's say, send more, okay, it's good, all right, so this is a solution, yeah, this

06:37.160 --> 06:45.640
is a solution, okay, so, okay, there are several modules, in case you want to use a different

06:45.880 --> 06:54.280
server, okay, instead of using CP server, you can use a set, okay, set, a set server,

06:54.280 --> 07:01.560
okay, a set server, there is a set compiler, which compiles all the constraints, okay,

07:01.560 --> 07:07.320
to set, to conjunctive normal form, and then it calls a set server to solve it.

07:08.280 --> 07:17.480
And you can also use this one called MIP, okay, mixed integer programming server,

07:18.760 --> 07:29.240
this MIP server, okay, actually supports not only integer variables, but also real values.

07:29.560 --> 07:38.200
MIP server, in order to use a MIP server, you need to install MIP server, okay, so actually,

07:38.200 --> 07:47.160
in my computer, I have two MIP servers installed, the Groovy server, and also the CBC server,

07:48.120 --> 07:52.680
all right, you can also use SMT, okay, this is SMT server,

07:55.880 --> 08:06.200
it has a connection to Z3 and the CV4 servers, but I have to say for finite domain constraints,

08:07.000 --> 08:14.360
SMT servers are not so competitive, all right, good, so that's our first example,

08:17.720 --> 08:24.840
all right, the next example I want to show you is, okay, you know, every

08:25.560 --> 08:35.160
called a satisfiability problem, okay, I have this problem set, okay, all right, so the satisfiability

08:35.160 --> 08:43.480
problem is, okay, giving a set of variables and a boolean formula, okay, and the problem

08:43.480 --> 08:51.800
amounts to finding a check if the formula is satisfiable or not, and if it is satisfiable,

08:52.360 --> 09:03.480
then find a solution, find a solution assignment for the variables, so this is a one example

09:03.480 --> 09:12.520
of the satisfiability problem, so in this example, there are four variables and all the variables

09:12.520 --> 09:19.080
are boolean, okay, boolean variables are treated as integer variables, zero, one integer variables,

09:20.200 --> 09:28.440
and then, okay, there are these operators, okay, see these operators, this is for implication,

09:29.480 --> 09:39.320
and then this is for logic or this is for negation, and this for equivalence, okay,

09:39.320 --> 09:46.760
this is for, okay, logic and, okay, so this is a formula, and then it's used to solve, okay,

09:47.880 --> 09:57.080
and then print out the value, all right, let's take a look at another, this is, okay, the very

09:57.080 --> 10:08.120
first problem that was found to be an NP-complete problem, all right, so let's take a look at another

10:08.120 --> 10:17.800
problem called a maximum click problem, so this is a click, all right, so give me a graph,

10:18.680 --> 10:28.040
okay, so in our case, a graph is represented as a adjacency matrix, okay, so the entry is one,

10:28.040 --> 10:35.240
if there is an H, okay, let's say vertex one to vertex two, there is an H, yeah, and the entry

10:35.240 --> 10:42.440
is zero, okay, if the two vertices are not connected, all right, so what do we do, again,

10:42.440 --> 10:49.800
so we use set-solver, basically for this type of problem, set-solver is the most competitive,

10:51.000 --> 10:58.120
so for zero one, integer programming problems, okay, the set-solver is the fastest,

10:59.080 --> 11:04.920
so okay, we get the graph, okay, so this is a number of vertices in the graph,

11:06.040 --> 11:13.800
and then we create a list of variables, basically for each vertex, we create one variable,

11:14.760 --> 11:18.920
and all the variables are Boolean, okay, so that means there are zero one

11:19.640 --> 11:31.240
integer variables, and then we use this for each, for each, this is like a loop, okay, it takes

11:31.240 --> 11:40.600
iterators and conditions, okay, in this example, there were two iterators, okay, so U, okay, is over

11:40.600 --> 11:50.200
this range, and V is in this range, basically, okay, there's four each iterates over all pairs,

11:50.760 --> 11:57.480
okay, all pairs of vertices, okay, so this graph is undirected, so I assume it is undirected,

11:57.480 --> 12:08.680
so all possible pairs, so if the vertex, this vertex U is in a click, okay, that means the

12:09.240 --> 12:19.640
vast U is one, and also vertex V is in a click, all right, this is one, okay, then this U and V

12:19.640 --> 12:27.000
must be connected, okay, then that means the entry, GUV must be one, okay, and this is the

12:27.000 --> 12:37.000
optimization problem, okay, we want to find a maximum click, okay, so we want to find an assignment

12:37.000 --> 12:48.520
that maximizes this total sum, all right, so this is another example, and next let's consider another

12:48.520 --> 13:01.880
famous NP-complete problem called a vertex cover problem, again, okay, giving a graph, okay, we want to

13:02.760 --> 13:15.800
find a set of vertices that covers all the edges in a graph, okay, so it is very similar to the

13:15.800 --> 13:25.720
previous click, maximum click problem, so for each vertex, we use a variable, okay, it is zero one,

13:25.720 --> 13:36.120
right, and then for each pair of vertices, okay, so what do we do? If this pair is has an H, yeah,

13:36.120 --> 13:46.920
if it has an H, then this H must be covered, okay, that means either, okay, U is in the set,

13:47.720 --> 13:56.680
or V is in the set, okay, we want to find a minimum set, okay, that covers the graph, okay, so we want to

13:57.480 --> 14:06.920
minimize, okay, the sum of the variables, so that is a vertex cover problem, all right, next one

14:06.920 --> 14:17.880
is called a Hamilton cycle problem, HCP, so give me a graph, okay, this one is a directed

14:17.880 --> 14:26.520
graph, okay, giving a directed graph, we want to, okay, find a Hamilton cycle, okay, in the graph,

14:27.640 --> 14:35.000
so first, okay, how to represent a directed graph, okay, we use domain variables to represent

14:35.720 --> 14:43.080
a graph, all right, so basically for each vertex, okay, we have a variable,

14:43.800 --> 14:49.480
we have a variable, this is like a adjacent list representation of a graph,

14:50.520 --> 14:59.880
so V1, so that means from vertex one, okay, there is an H, okay, one two is an H, one five is an H,

14:59.960 --> 15:11.320
okay, one six is an H, so this is, these domain variables represent the giving graph, okay,

15:12.040 --> 15:20.760
and there is a built-in constraint called a circuit, okay, this one is true if, okay, the assignment

15:21.560 --> 15:28.040
forms a Hamilton cycle, all right, so we just use this, all right, so this modeling is easy,

15:28.600 --> 15:32.200
and then we find it, okay, find a Hamilton cycle problem,

15:33.400 --> 15:42.680
find a Hamilton cycle and print it out, all right, next problem is called a subset sum problem,

15:43.480 --> 15:56.760
subset sum, all right, it is another well-known NP-complete problem, okay, giving a set of

15:56.760 --> 16:03.720
integers, okay, let's say this is a set of integers, okay, and a target number, a target number,

16:04.680 --> 16:13.800
okay, what do we want to do, okay, we want to find a subset, okay, find a subset whose sum,

16:14.760 --> 16:22.200
okay, equals the target number, okay, so this, well, basically this modeling for each number,

16:23.000 --> 16:30.520
okay, we use a boolean variable, okay, if the variable is one, okay, that means, okay, the

16:30.520 --> 16:39.640
number is in the set, all right, otherwise, okay, it is not in the set, and we use this

16:39.640 --> 16:47.400
constraint, okay, to say, okay, this b times the element, okay, we use a zip, okay, so basically,

16:48.040 --> 16:57.880
for each variable and each integer, all right, so each variable and integer, okay, so

17:00.360 --> 17:06.680
what do we do, okay, for each pair in the zip list, okay, so we add this term,

17:07.640 --> 17:16.520
add this term and the total, okay, the total equals the target, okay, and in this example,

17:16.600 --> 17:25.400
all right, we use the MIPS solver, okay, actually, for this type of small problems,

17:26.600 --> 17:34.200
it doesn't make much difference, okay, which solver you use doesn't make much difference,

17:34.200 --> 17:41.320
okay, so in my computer, the CBC MIPS solver is installed, and then you can

17:41.880 --> 17:52.600
tilt the system or use CBC solver, okay, as a solver option, okay, this is, all right,

17:52.600 --> 18:03.480
let's consider another example, okay, called a metric square, okay, this is another famous example,

18:03.480 --> 18:12.680
a metric square, so giving a grid, okay, in this case, it is a four by four grid,

18:13.480 --> 18:23.720
all right, so what do we want to do, we want to assign a unique integer to each cell,

18:23.720 --> 18:29.480
okay, each square, each square, okay, to assign an integer from this domain to each

18:30.440 --> 18:43.480
cell, such that, okay, every row, every column, and also two of this diagonal, okay, the primary

18:43.480 --> 18:51.080
diagonal and the secondary diagonal, okay, all have the same sum, okay, in this case, okay, sums to

18:51.080 --> 18:58.760
34, okay, 34, so, all right, we use this, so all the entries are, okay, what do we do,

18:59.720 --> 19:07.080
so we have a two-dimensional array, and all the entries, okay, are variables, and the variables

19:07.080 --> 19:15.080
have this domain from a wall to 16, and all the variables are different, right, all right, we use

19:15.160 --> 19:23.400
this vars, okay, vars to get, because all different expects a list of variables, and so what do we

19:23.400 --> 19:29.960
do, we use this function vars, okay, vars takes a term, and it returns a list of variables in the

19:29.960 --> 19:39.640
term, so, and then we write the constraints, okay, so for each i in this range, what do we do, okay,

19:40.360 --> 19:48.760
every row, yeah, every row, okay, has this sum, okay, so the row i has this sum, and the column i

19:48.760 --> 19:55.480
has this sum, and then we write the, okay, the primary diagonal, the primary diagonal,

19:55.480 --> 20:03.800
and then the secondary diagonal, okay, and in this example, we use cp, for this example,

20:03.800 --> 20:14.040
actually cp, the cp solver provides several modeling, okay, we call labeling strategies,

20:14.600 --> 20:22.120
all right, for this example, all right, we use this ff called ff, first fill principle,

20:23.720 --> 20:32.760
well, basically it selects domain, the smallest domain first, and then prints out the value,

20:33.480 --> 20:37.880
so we could run this, or you can see the difference, okay, you can see

20:40.840 --> 20:41.960
magic square,

20:47.000 --> 20:52.200
okay, and also let's measure the time, all right, well, actually this is pretty faster,

20:52.200 --> 21:00.840
okay, the cp solver is pretty faster, okay, you can change it to square, I think this is not hot enough,

21:00.840 --> 21:09.480
all right, so the problem is still a toy problem, okay, so, okay, now we use set, set solver, okay,

21:09.480 --> 21:24.680
use set solver, and let's see the time, well, it takes a little bit longer, okay, why, because

21:24.680 --> 21:33.000
set solvers are not normally not good at handling numbers, but this one is okay, okay, in general

21:34.120 --> 21:45.560
set solvers, actually I have found that the set solver outperforms the cp solver, okay, in general

21:45.640 --> 21:54.920
case, so if you have time, okay, and unless the time limit is really, really small, all right,

21:54.920 --> 22:01.800
the cp solver, all the problem is really small, or you have some problem specific

22:03.160 --> 22:10.360
labeling strategies, okay, otherwise the set solver is pretty efficient,

22:10.840 --> 22:17.320
all right, the next example is called a sudoku puzzle, that's a very famous

22:18.840 --> 22:28.280
puzzle, a lot of people, okay, play it for the sudoku, so this one giving a grade, again,

22:28.280 --> 22:34.920
giving a grade, okay, so in this case it depends on the size of the grid, let's say

22:35.800 --> 22:46.440
this is 25 by 25 grade, so what do we want to do, we want to assign the numbers, yeah,

22:46.440 --> 23:01.640
numbers from 1 to 25, okay, to the, to the, to the sales, okay, such that, okay, every row has

23:01.640 --> 23:08.600
different numbers, every column has different numbers, and also every small square, okay,

23:08.600 --> 23:15.640
this is a small square, in this case every five by five, okay, every five by five small squares

23:15.640 --> 23:23.480
also have, also has different numbers, so, and modeling, okay, what do we do, okay, we first

23:23.480 --> 23:31.880
fetch this array, this is a grid, all right, basically there are prefilled entries,

23:31.880 --> 23:39.160
prefilled entries, and the underscores are blanks, okay, these are the blanks, and the solver

23:40.040 --> 23:49.960
will fill in the blanks, so the domain of the variables is from 1, okay, to n, and then we

23:49.960 --> 23:57.160
write the constraints, so for each row, and for each row, okay, all the numbers in the row are

23:57.160 --> 24:03.640
different, and for each column, and all the numbers in the column are different, all right,

24:03.640 --> 24:10.200
so what do we do, how to get the column, how to get the column, we use list comprehension

24:11.000 --> 24:17.720
to retrieve all the entries, okay, in column, in this column, okay, so for each row in this,

24:18.440 --> 24:25.560
and we get, okay, row column, and then we get the small square, okay, all the small squares

24:25.560 --> 24:32.520
constrain the entries of each of the small squares, okay, the dimension of the small square is this,

24:32.520 --> 24:42.520
okay, so keeping n, so if n is 25, then m is five, and then we write this, okay, for each of the

24:42.520 --> 24:49.000
small squares, okay, basically this row column, this is the starting row number, and the starting

24:49.000 --> 24:56.280
column number of each of the small square, and then we, okay, get all the entries in the small

24:56.280 --> 25:03.240
square, okay, using list comprehension, and then we say, okay, all the small squares are different,

25:03.240 --> 25:10.600
and then solve, all right, this one uses a set, actually set is extremely efficient, okay,

25:10.680 --> 25:20.840
for a problem like a sudoku, okay, so, well, you see this is 25 by 25, okay, it's a pretty hard

25:20.840 --> 25:33.080
problem, all right, you see this sudoku, again, time, measure the time, oops, something is wrong,

25:33.080 --> 25:47.160
oh, sudoku, okay, I don't think I did a good preparation,

25:48.440 --> 25:56.280
this one is not supposed to be there, so let's run it again, sudoku, okay, it came out

25:56.280 --> 26:05.080
instantly, well, you could try other solvers, so in general, for a problem, okay, normally you

26:05.080 --> 26:10.760
don't know which solver performs the best, so what do you need to do, you need to do experiment,

26:10.760 --> 26:18.360
all right, well, since in pocket, okay, you can write the same model and experiment with

26:18.360 --> 26:24.280
different solvers, okay, what do you need to do, you just need to input a different model,

26:24.920 --> 26:28.440
okay, so you can switch from one solver to another solver,

26:28.440 --> 26:36.120
seamlessly, all right, let's consider one more problem, okay, this is called a Inquins problem,

26:37.240 --> 26:44.520
Inquins, okay, this is a very famous problem, Inquins, okay, so giving originally it is 8 by 8,

26:45.720 --> 26:52.040
so 8 by 8 is not interesting, computationally interesting, because it's a search space is

26:52.040 --> 27:01.000
not big enough for experiment, so in general it's 8 by 8, okay, so giving 8 by 8 grid, okay,

27:01.000 --> 27:10.200
you won't put 8 queen pieces on the board, such that, okay, no two queens attack each other,

27:10.760 --> 27:17.400
okay, you know, in chess, how the queen piece moves, the queen basically combines

27:17.800 --> 27:26.040
the movement of the rock and the movement of the bishop, so a queen can move horizontally,

27:26.600 --> 27:33.240
vertically, and diagonally, okay, so that means, okay, two queens attack each other,

27:33.240 --> 27:40.040
if two queens are placed in the same row, the same column, or the same diagonal,

27:40.920 --> 27:46.920
all right, so here is, we have two different models for this, okay, one is,

27:49.880 --> 27:57.720
this is, all right, so what do we do, okay, for each, well, let's say for each row,

27:59.000 --> 28:09.160
we use a variable, okay, we use one variable, Q, so there are in rows, so we use in variables,

28:10.040 --> 28:16.040
and all the variables, okay, each of the variables gives a column number, yeah, column number,

28:17.000 --> 28:25.320
so that means Q1, all right, gives a column number of the first queen, and Q2 gives a column number

28:25.320 --> 28:31.720
of the second queen, and so on, all right, so now we need to write the constraints, okay,

28:31.720 --> 28:42.040
new two queens are in the same column, so Qi for each pair, ij, and Qi, okay, not equal, okay,

28:42.040 --> 28:53.000
Qj, and also, not in the same diagonal, yeah, okay, not in, not in a diagonal, that is parallel

28:53.000 --> 29:00.840
to the primary diagonal, okay, so this one, use this constraint, and not in a diagonal,

29:00.840 --> 29:08.040
that is parallel to the secondary diagonal, and then, okay, so this is the constraint,

29:08.040 --> 29:15.960
and then we use FF, actually for this one, the first pair, first pair of principles, this FF

29:15.960 --> 29:30.440
labeling strategy works very well, and we can say, okay, time, queens, all right, so

29:30.440 --> 29:38.440
by default, it solves 100 queens, all right, comes out instantly, and we can try 1000 queens,

29:39.400 --> 29:43.960
so 1000, wait, maybe it takes several seconds,

29:50.360 --> 29:56.360
oh, it's still, oh, okay, so it takes 10 seconds, about 10 seconds, all right, so 1000 queens,

29:57.080 --> 30:01.320
all right, let's consider another model, all right, this is, we call,

30:04.120 --> 30:13.800
okay, in this model, so for each cell, we use a variable, a boolean variable,

30:13.800 --> 30:19.800
good, so the boolean variable, if the variable is zero, that means there is no queen, okay,

30:19.800 --> 30:28.760
put on that cell, if the variable is one, that means, okay, there is a queen, okay, at that cell,

30:29.480 --> 30:37.800
and so then we create n by n, okay, in square variables, and all the variables are boolean,

30:38.600 --> 30:44.760
and then we write the constraints, all right, so for each, okay, also for, of course, for this type

30:44.840 --> 30:52.120
of problems, then we should use set, all right, CP servers, okay, in general are not good at dealing

30:52.120 --> 31:02.360
with zero one variables, all right, so for, we make sure, okay, each row has exactly one queen,

31:03.240 --> 31:12.840
okay, and each column has exactly one queen, okay, and then we also, okay, constrain the diagonal,

31:13.640 --> 31:22.200
diagonal, for this diagonals, these are all the diagonals that are parallel to the,

31:24.760 --> 31:30.440
parallel to the secondary, yeah, to the parallel to the secondary diagonal,

31:31.880 --> 31:38.920
and for each of these diagonal, okay, we retrieve all the entries, okay, the sum of these variables

31:39.880 --> 31:48.200
is less than or equal to one, yeah, and the same to the diagonals that are parallel to the primary

31:48.200 --> 31:58.520
diagonal, okay, so, and each diagonal, okay, the number of queens placed in that diagonal

31:59.160 --> 32:07.960
is less than or equal to one, all right, good, all right, so I have shown you several examples,

32:08.040 --> 32:20.360
okay, basically, it is, this packet has good modeling capability, okay, because of the availability

32:20.360 --> 32:29.160
of the language constructs, such as arrays, okay, loops for each loops, and the list of

32:29.160 --> 32:38.920
comprehensions, okay, actually, and also there are several solvers available, so you can pick the

32:38.920 --> 32:52.920
best solver that suits your problem, all right, so I have, in this video lectures, okay, I have

32:53.880 --> 33:02.040
introduced you at the private system, okay, and I talked about the functional programming, logic

33:02.040 --> 33:10.680
programming, using pattern matching rules, and I talked about recursive programming and dynamic

33:10.680 --> 33:20.120
programming, and in this video, I talked about constraint programming, well, I don't think this

33:20.600 --> 33:28.360
is comprehensive, but I think you are ready to explore, and you are ready to write programs

33:28.360 --> 33:39.880
to solve problems, and for, you know, details, for the details, okay, you can take a look at the

33:40.680 --> 33:47.480
user's guide, and you can also, okay, there is a book available, published several years ago,

33:47.480 --> 33:54.440
on constraint solving and planning with the packet, and that's also a good resource,

33:55.880 --> 34:05.240
and I want to point you to another source, that is Hakan Cajestran's page,

34:05.240 --> 34:16.680
packet page, and Hakan has written more than 1,000 programs, and probably, okay, when you come to a

34:16.680 --> 34:26.280
problem, okay, very likely, and he has already solved it, okay, I mean, if it's a popular problem,

34:28.200 --> 34:36.360
all right, so that is the end of this video, and also the end of this series, okay, thank you very

34:36.360 --> 34:41.160
much for watching.

