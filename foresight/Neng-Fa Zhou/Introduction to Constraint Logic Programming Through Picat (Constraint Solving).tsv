start	end	text
0	13320	Hello, welcome to the fifth video on Introduction to Constraint Logic Programming through PiCAD.
13320	17200	This will be the last video in the series.
17200	23560	The topic of this video is Constraint Solving.
23560	32720	Only tasks involve combinational search, and any combinational search problem can be formulated
32720	40480	as a constraint satisfaction problem, CSP in short.
40480	53000	A CSP consists of a set of variables, each of which has a domain, and a set of constraints
53000	61280	among the variables, and optionally an objective function.
61280	75520	A solution to a CSP is a valuation of variables that satisfies all the constraints, and optimizes
75520	83440	the objective function if it exists.
83440	93640	So let's take a look at this toy problem, a crypt arithmetic puzzle, send plus more
93640	95720	equals money.
95720	106480	So giving the digits, giving the letters, we want to assign each letter a unique digit
106480	112800	such that the equation holds, send plus more equals money.
112800	120520	Alright, let's write a program in PiCAD to solve this problem.
120520	129480	Alright, the first thing you need to do is you need to import a module.
129480	133600	There are four constraint modules in PiCAD.
133600	137280	Alright, let's import CP.
137280	143680	Alright, you need to generate the variables.
143680	148520	In this case, you need to have a CSP model.
148520	153280	In this case, the module is quite obvious.
153280	155040	So what do we do?
155040	158520	We use a variable for each letter.
158520	173280	So let's say VS equals S, send more, OK, a Y, these are the letters, and then we need
173280	178680	to declare the domain for each of the variables.
178680	186000	So this is 0 to 9, and then we need to write the constraints.
186000	194720	So of course, send as a four-digit integer, the leading digit cannot be 0.
194720	200440	So S not equal 0.
200440	202320	So this is a built-in.
202320	206320	So this one, this not equal is a built-in.
206320	209480	This means not unifiable.
209480	215280	This is a built-in used for terms, for constraints.
215280	221840	So we use this operator, sharp, and then this not equal symbol.
221840	231400	And also, send to the more, m is a leading digit, it cannot be 0.
231400	243400	And then we write the equation, send plus, and all the digits, all the digits are different.
243400	251320	So we use this global constraint or different, so VS.
251320	261280	And then we write the equation, send as a weighted sum, send has a power, it is 1,000.
261280	279560	So now, talent times, S plus, times E, and times N, and times D.
279560	302400	Okay, so this is a send plus more, m, o, and r, more, and equals money.
302400	308280	All right, so equals, again, this equality, this is for constraint.
308280	315160	So this is sharp equal, means equality constraint, all right, equals the money.
315160	337840	All right, so this is 10,000, and money, and money, and money.
337840	354960	Okay, so this is a constraint, all right, so, and then, okay, the last thing after generating
354960	364960	the constraints, we want to label the variables with the values, by using this built-in, so
365080	366720	VS.
366720	373040	And then we output, okay, output the values, let's just print, all right.
373040	386680	All right, so, send plus more, equals money, all right, so now, we can run the program,
386680	397160	so let's say, send more, okay, it's good, all right, so this is a solution, yeah, this
397160	405640	is a solution, okay, so, okay, there are several modules, in case you want to use a different
405880	414280	server, okay, instead of using CP server, you can use a set, okay, set, a set server,
414280	421560	okay, a set server, there is a set compiler, which compiles all the constraints, okay,
421560	427320	to set, to conjunctive normal form, and then it calls a set server to solve it.
428280	437480	And you can also use this one called MIP, okay, mixed integer programming server,
438760	449240	this MIP server, okay, actually supports not only integer variables, but also real values.
449560	458200	MIP server, in order to use a MIP server, you need to install MIP server, okay, so actually,
458200	467160	in my computer, I have two MIP servers installed, the Groovy server, and also the CBC server,
468120	472680	all right, you can also use SMT, okay, this is SMT server,
475880	486200	it has a connection to Z3 and the CV4 servers, but I have to say for finite domain constraints,
487000	494360	SMT servers are not so competitive, all right, good, so that's our first example,
497720	504840	all right, the next example I want to show you is, okay, you know, every
505560	515160	called a satisfiability problem, okay, I have this problem set, okay, all right, so the satisfiability
515160	523480	problem is, okay, giving a set of variables and a boolean formula, okay, and the problem
523480	531800	amounts to finding a check if the formula is satisfiable or not, and if it is satisfiable,
532360	543480	then find a solution, find a solution assignment for the variables, so this is a one example
543480	552520	of the satisfiability problem, so in this example, there are four variables and all the variables
552520	559080	are boolean, okay, boolean variables are treated as integer variables, zero, one integer variables,
560200	568440	and then, okay, there are these operators, okay, see these operators, this is for implication,
569480	579320	and then this is for logic or this is for negation, and this for equivalence, okay,
579320	586760	this is for, okay, logic and, okay, so this is a formula, and then it's used to solve, okay,
587880	597080	and then print out the value, all right, let's take a look at another, this is, okay, the very
597080	608120	first problem that was found to be an NP-complete problem, all right, so let's take a look at another
608120	617800	problem called a maximum click problem, so this is a click, all right, so give me a graph,
618680	628040	okay, so in our case, a graph is represented as a adjacency matrix, okay, so the entry is one,
628040	635240	if there is an H, okay, let's say vertex one to vertex two, there is an H, yeah, and the entry
635240	642440	is zero, okay, if the two vertices are not connected, all right, so what do we do, again,
642440	649800	so we use set-solver, basically for this type of problem, set-solver is the most competitive,
651000	658120	so for zero one, integer programming problems, okay, the set-solver is the fastest,
659080	664920	so okay, we get the graph, okay, so this is a number of vertices in the graph,
666040	673800	and then we create a list of variables, basically for each vertex, we create one variable,
674760	678920	and all the variables are Boolean, okay, so that means there are zero one
679640	691240	integer variables, and then we use this for each, for each, this is like a loop, okay, it takes
691240	700600	iterators and conditions, okay, in this example, there were two iterators, okay, so U, okay, is over
700600	710200	this range, and V is in this range, basically, okay, there's four each iterates over all pairs,
710760	717480	okay, all pairs of vertices, okay, so this graph is undirected, so I assume it is undirected,
717480	728680	so all possible pairs, so if the vertex, this vertex U is in a click, okay, that means the
729240	739640	vast U is one, and also vertex V is in a click, all right, this is one, okay, then this U and V
739640	747000	must be connected, okay, then that means the entry, GUV must be one, okay, and this is the
747000	757000	optimization problem, okay, we want to find a maximum click, okay, so we want to find an assignment
757000	768520	that maximizes this total sum, all right, so this is another example, and next let's consider another
768520	781880	famous NP-complete problem called a vertex cover problem, again, okay, giving a graph, okay, we want to
782760	795800	find a set of vertices that covers all the edges in a graph, okay, so it is very similar to the
795800	805720	previous click, maximum click problem, so for each vertex, we use a variable, okay, it is zero one,
805720	816120	right, and then for each pair of vertices, okay, so what do we do? If this pair is has an H, yeah,
816120	826920	if it has an H, then this H must be covered, okay, that means either, okay, U is in the set,
827720	836680	or V is in the set, okay, we want to find a minimum set, okay, that covers the graph, okay, so we want to
837480	846920	minimize, okay, the sum of the variables, so that is a vertex cover problem, all right, next one
846920	857880	is called a Hamilton cycle problem, HCP, so give me a graph, okay, this one is a directed
857880	866520	graph, okay, giving a directed graph, we want to, okay, find a Hamilton cycle, okay, in the graph,
867640	875000	so first, okay, how to represent a directed graph, okay, we use domain variables to represent
875720	883080	a graph, all right, so basically for each vertex, okay, we have a variable,
883800	889480	we have a variable, this is like a adjacent list representation of a graph,
890520	899880	so V1, so that means from vertex one, okay, there is an H, okay, one two is an H, one five is an H,
899960	911320	okay, one six is an H, so this is, these domain variables represent the giving graph, okay,
912040	920760	and there is a built-in constraint called a circuit, okay, this one is true if, okay, the assignment
921560	928040	forms a Hamilton cycle, all right, so we just use this, all right, so this modeling is easy,
928600	932200	and then we find it, okay, find a Hamilton cycle problem,
933400	942680	find a Hamilton cycle and print it out, all right, next problem is called a subset sum problem,
943480	956760	subset sum, all right, it is another well-known NP-complete problem, okay, giving a set of
956760	963720	integers, okay, let's say this is a set of integers, okay, and a target number, a target number,
964680	973800	okay, what do we want to do, okay, we want to find a subset, okay, find a subset whose sum,
974760	982200	okay, equals the target number, okay, so this, well, basically this modeling for each number,
983000	990520	okay, we use a boolean variable, okay, if the variable is one, okay, that means, okay, the
990520	999640	number is in the set, all right, otherwise, okay, it is not in the set, and we use this
999640	1007400	constraint, okay, to say, okay, this b times the element, okay, we use a zip, okay, so basically,
1008040	1017880	for each variable and each integer, all right, so each variable and integer, okay, so
1020360	1026680	what do we do, okay, for each pair in the zip list, okay, so we add this term,
1027640	1036520	add this term and the total, okay, the total equals the target, okay, and in this example,
1036600	1045400	all right, we use the MIPS solver, okay, actually, for this type of small problems,
1046600	1054200	it doesn't make much difference, okay, which solver you use doesn't make much difference,
1054200	1061320	okay, so in my computer, the CBC MIPS solver is installed, and then you can
1061880	1072600	tilt the system or use CBC solver, okay, as a solver option, okay, this is, all right,
1072600	1083480	let's consider another example, okay, called a metric square, okay, this is another famous example,
1083480	1092680	a metric square, so giving a grid, okay, in this case, it is a four by four grid,
1093480	1103720	all right, so what do we want to do, we want to assign a unique integer to each cell,
1103720	1109480	okay, each square, each square, okay, to assign an integer from this domain to each
1110440	1123480	cell, such that, okay, every row, every column, and also two of this diagonal, okay, the primary
1123480	1131080	diagonal and the secondary diagonal, okay, all have the same sum, okay, in this case, okay, sums to
1131080	1138760	34, okay, 34, so, all right, we use this, so all the entries are, okay, what do we do,
1139720	1147080	so we have a two-dimensional array, and all the entries, okay, are variables, and the variables
1147080	1155080	have this domain from a wall to 16, and all the variables are different, right, all right, we use
1155160	1163400	this vars, okay, vars to get, because all different expects a list of variables, and so what do we
1163400	1169960	do, we use this function vars, okay, vars takes a term, and it returns a list of variables in the
1169960	1179640	term, so, and then we write the constraints, okay, so for each i in this range, what do we do, okay,
1180360	1188760	every row, yeah, every row, okay, has this sum, okay, so the row i has this sum, and the column i
1188760	1195480	has this sum, and then we write the, okay, the primary diagonal, the primary diagonal,
1195480	1203800	and then the secondary diagonal, okay, and in this example, we use cp, for this example,
1203800	1214040	actually cp, the cp solver provides several modeling, okay, we call labeling strategies,
1214600	1222120	all right, for this example, all right, we use this ff called ff, first fill principle,
1223720	1232760	well, basically it selects domain, the smallest domain first, and then prints out the value,
1233480	1237880	so we could run this, or you can see the difference, okay, you can see
1240840	1241960	magic square,
1247000	1252200	okay, and also let's measure the time, all right, well, actually this is pretty faster,
1252200	1260840	okay, the cp solver is pretty faster, okay, you can change it to square, I think this is not hot enough,
1260840	1269480	all right, so the problem is still a toy problem, okay, so, okay, now we use set, set solver, okay,
1269480	1284680	use set solver, and let's see the time, well, it takes a little bit longer, okay, why, because
1284680	1293000	set solvers are not normally not good at handling numbers, but this one is okay, okay, in general
1294120	1305560	set solvers, actually I have found that the set solver outperforms the cp solver, okay, in general
1305640	1314920	case, so if you have time, okay, and unless the time limit is really, really small, all right,
1314920	1321800	the cp solver, all the problem is really small, or you have some problem specific
1323160	1330360	labeling strategies, okay, otherwise the set solver is pretty efficient,
1330840	1337320	all right, the next example is called a sudoku puzzle, that's a very famous
1338840	1348280	puzzle, a lot of people, okay, play it for the sudoku, so this one giving a grade, again,
1348280	1354920	giving a grade, okay, so in this case it depends on the size of the grid, let's say
1355800	1366440	this is 25 by 25 grade, so what do we want to do, we want to assign the numbers, yeah,
1366440	1381640	numbers from 1 to 25, okay, to the, to the, to the sales, okay, such that, okay, every row has
1381640	1388600	different numbers, every column has different numbers, and also every small square, okay,
1388600	1395640	this is a small square, in this case every five by five, okay, every five by five small squares
1395640	1403480	also have, also has different numbers, so, and modeling, okay, what do we do, okay, we first
1403480	1411880	fetch this array, this is a grid, all right, basically there are prefilled entries,
1411880	1419160	prefilled entries, and the underscores are blanks, okay, these are the blanks, and the solver
1420040	1429960	will fill in the blanks, so the domain of the variables is from 1, okay, to n, and then we
1429960	1437160	write the constraints, so for each row, and for each row, okay, all the numbers in the row are
1437160	1443640	different, and for each column, and all the numbers in the column are different, all right,
1443640	1450200	so what do we do, how to get the column, how to get the column, we use list comprehension
1451000	1457720	to retrieve all the entries, okay, in column, in this column, okay, so for each row in this,
1458440	1465560	and we get, okay, row column, and then we get the small square, okay, all the small squares
1465560	1472520	constrain the entries of each of the small squares, okay, the dimension of the small square is this,
1472520	1482520	okay, so keeping n, so if n is 25, then m is five, and then we write this, okay, for each of the
1482520	1489000	small squares, okay, basically this row column, this is the starting row number, and the starting
1489000	1496280	column number of each of the small square, and then we, okay, get all the entries in the small
1496280	1503240	square, okay, using list comprehension, and then we say, okay, all the small squares are different,
1503240	1510600	and then solve, all right, this one uses a set, actually set is extremely efficient, okay,
1510680	1520840	for a problem like a sudoku, okay, so, well, you see this is 25 by 25, okay, it's a pretty hard
1520840	1533080	problem, all right, you see this sudoku, again, time, measure the time, oops, something is wrong,
1533080	1547160	oh, sudoku, okay, I don't think I did a good preparation,
1548440	1556280	this one is not supposed to be there, so let's run it again, sudoku, okay, it came out
1556280	1565080	instantly, well, you could try other solvers, so in general, for a problem, okay, normally you
1565080	1570760	don't know which solver performs the best, so what do you need to do, you need to do experiment,
1570760	1578360	all right, well, since in pocket, okay, you can write the same model and experiment with
1578360	1584280	different solvers, okay, what do you need to do, you just need to input a different model,
1584920	1588440	okay, so you can switch from one solver to another solver,
1588440	1596120	seamlessly, all right, let's consider one more problem, okay, this is called a Inquins problem,
1597240	1604520	Inquins, okay, this is a very famous problem, Inquins, okay, so giving originally it is 8 by 8,
1605720	1612040	so 8 by 8 is not interesting, computationally interesting, because it's a search space is
1612040	1621000	not big enough for experiment, so in general it's 8 by 8, okay, so giving 8 by 8 grid, okay,
1621000	1630200	you won't put 8 queen pieces on the board, such that, okay, no two queens attack each other,
1630760	1637400	okay, you know, in chess, how the queen piece moves, the queen basically combines
1637800	1646040	the movement of the rock and the movement of the bishop, so a queen can move horizontally,
1646600	1653240	vertically, and diagonally, okay, so that means, okay, two queens attack each other,
1653240	1660040	if two queens are placed in the same row, the same column, or the same diagonal,
1660920	1666920	all right, so here is, we have two different models for this, okay, one is,
1669880	1677720	this is, all right, so what do we do, okay, for each, well, let's say for each row,
1679000	1689160	we use a variable, okay, we use one variable, Q, so there are in rows, so we use in variables,
1690040	1696040	and all the variables, okay, each of the variables gives a column number, yeah, column number,
1697000	1705320	so that means Q1, all right, gives a column number of the first queen, and Q2 gives a column number
1705320	1711720	of the second queen, and so on, all right, so now we need to write the constraints, okay,
1711720	1722040	new two queens are in the same column, so Qi for each pair, ij, and Qi, okay, not equal, okay,
1722040	1733000	Qj, and also, not in the same diagonal, yeah, okay, not in, not in a diagonal, that is parallel
1733000	1740840	to the primary diagonal, okay, so this one, use this constraint, and not in a diagonal,
1740840	1748040	that is parallel to the secondary diagonal, and then, okay, so this is the constraint,
1748040	1755960	and then we use FF, actually for this one, the first pair, first pair of principles, this FF
1755960	1770440	labeling strategy works very well, and we can say, okay, time, queens, all right, so
1770440	1778440	by default, it solves 100 queens, all right, comes out instantly, and we can try 1000 queens,
1779400	1783960	so 1000, wait, maybe it takes several seconds,
1790360	1796360	oh, it's still, oh, okay, so it takes 10 seconds, about 10 seconds, all right, so 1000 queens,
1797080	1801320	all right, let's consider another model, all right, this is, we call,
1804120	1813800	okay, in this model, so for each cell, we use a variable, a boolean variable,
1813800	1819800	good, so the boolean variable, if the variable is zero, that means there is no queen, okay,
1819800	1828760	put on that cell, if the variable is one, that means, okay, there is a queen, okay, at that cell,
1829480	1837800	and so then we create n by n, okay, in square variables, and all the variables are boolean,
1838600	1844760	and then we write the constraints, all right, so for each, okay, also for, of course, for this type
1844840	1852120	of problems, then we should use set, all right, CP servers, okay, in general are not good at dealing
1852120	1862360	with zero one variables, all right, so for, we make sure, okay, each row has exactly one queen,
1863240	1872840	okay, and each column has exactly one queen, okay, and then we also, okay, constrain the diagonal,
1873640	1882200	diagonal, for this diagonals, these are all the diagonals that are parallel to the,
1884760	1890440	parallel to the secondary, yeah, to the parallel to the secondary diagonal,
1891880	1898920	and for each of these diagonal, okay, we retrieve all the entries, okay, the sum of these variables
1899880	1908200	is less than or equal to one, yeah, and the same to the diagonals that are parallel to the primary
1908200	1918520	diagonal, okay, so, and each diagonal, okay, the number of queens placed in that diagonal
1919160	1927960	is less than or equal to one, all right, good, all right, so I have shown you several examples,
1928040	1940360	okay, basically, it is, this packet has good modeling capability, okay, because of the availability
1940360	1949160	of the language constructs, such as arrays, okay, loops for each loops, and the list of
1949160	1958920	comprehensions, okay, actually, and also there are several solvers available, so you can pick the
1958920	1972920	best solver that suits your problem, all right, so I have, in this video lectures, okay, I have
1973880	1982040	introduced you at the private system, okay, and I talked about the functional programming, logic
1982040	1990680	programming, using pattern matching rules, and I talked about recursive programming and dynamic
1990680	2000120	programming, and in this video, I talked about constraint programming, well, I don't think this
2000600	2008360	is comprehensive, but I think you are ready to explore, and you are ready to write programs
2008360	2019880	to solve problems, and for, you know, details, for the details, okay, you can take a look at the
2020680	2027480	user's guide, and you can also, okay, there is a book available, published several years ago,
2027480	2034440	on constraint solving and planning with the packet, and that's also a good resource,
2035880	2045240	and I want to point you to another source, that is Hakan Cajestran's page,
2045240	2056680	packet page, and Hakan has written more than 1,000 programs, and probably, okay, when you come to a
2056680	2066280	problem, okay, very likely, and he has already solved it, okay, I mean, if it's a popular problem,
2068200	2076360	all right, so that is the end of this video, and also the end of this series, okay, thank you very
2076360	2081160	much for watching.
