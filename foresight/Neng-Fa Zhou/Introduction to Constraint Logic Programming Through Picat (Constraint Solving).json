{"text": " Hello, welcome to the fifth video on Introduction to Constraint Logic Programming through PiCAD. This will be the last video in the series. The topic of this video is Constraint Solving. Only tasks involve combinational search, and any combinational search problem can be formulated as a constraint satisfaction problem, CSP in short. A CSP consists of a set of variables, each of which has a domain, and a set of constraints among the variables, and optionally an objective function. A solution to a CSP is a valuation of variables that satisfies all the constraints, and optimizes the objective function if it exists. So let's take a look at this toy problem, a crypt arithmetic puzzle, send plus more equals money. So giving the digits, giving the letters, we want to assign each letter a unique digit such that the equation holds, send plus more equals money. Alright, let's write a program in PiCAD to solve this problem. Alright, the first thing you need to do is you need to import a module. There are four constraint modules in PiCAD. Alright, let's import CP. Alright, you need to generate the variables. In this case, you need to have a CSP model. In this case, the module is quite obvious. So what do we do? We use a variable for each letter. So let's say VS equals S, send more, OK, a Y, these are the letters, and then we need to declare the domain for each of the variables. So this is 0 to 9, and then we need to write the constraints. So of course, send as a four-digit integer, the leading digit cannot be 0. So S not equal 0. So this is a built-in. So this one, this not equal is a built-in. This means not unifiable. This is a built-in used for terms, for constraints. So we use this operator, sharp, and then this not equal symbol. And also, send to the more, m is a leading digit, it cannot be 0. And then we write the equation, send plus, and all the digits, all the digits are different. So we use this global constraint or different, so VS. And then we write the equation, send as a weighted sum, send has a power, it is 1,000. So now, talent times, S plus, times E, and times N, and times D. Okay, so this is a send plus more, m, o, and r, more, and equals money. All right, so equals, again, this equality, this is for constraint. So this is sharp equal, means equality constraint, all right, equals the money. All right, so this is 10,000, and money, and money, and money. Okay, so this is a constraint, all right, so, and then, okay, the last thing after generating the constraints, we want to label the variables with the values, by using this built-in, so VS. And then we output, okay, output the values, let's just print, all right. All right, so, send plus more, equals money, all right, so now, we can run the program, so let's say, send more, okay, it's good, all right, so this is a solution, yeah, this is a solution, okay, so, okay, there are several modules, in case you want to use a different server, okay, instead of using CP server, you can use a set, okay, set, a set server, okay, a set server, there is a set compiler, which compiles all the constraints, okay, to set, to conjunctive normal form, and then it calls a set server to solve it. And you can also use this one called MIP, okay, mixed integer programming server, this MIP server, okay, actually supports not only integer variables, but also real values. MIP server, in order to use a MIP server, you need to install MIP server, okay, so actually, in my computer, I have two MIP servers installed, the Groovy server, and also the CBC server, all right, you can also use SMT, okay, this is SMT server, it has a connection to Z3 and the CV4 servers, but I have to say for finite domain constraints, SMT servers are not so competitive, all right, good, so that's our first example, all right, the next example I want to show you is, okay, you know, every called a satisfiability problem, okay, I have this problem set, okay, all right, so the satisfiability problem is, okay, giving a set of variables and a boolean formula, okay, and the problem amounts to finding a check if the formula is satisfiable or not, and if it is satisfiable, then find a solution, find a solution assignment for the variables, so this is a one example of the satisfiability problem, so in this example, there are four variables and all the variables are boolean, okay, boolean variables are treated as integer variables, zero, one integer variables, and then, okay, there are these operators, okay, see these operators, this is for implication, and then this is for logic or this is for negation, and this for equivalence, okay, this is for, okay, logic and, okay, so this is a formula, and then it's used to solve, okay, and then print out the value, all right, let's take a look at another, this is, okay, the very first problem that was found to be an NP-complete problem, all right, so let's take a look at another problem called a maximum click problem, so this is a click, all right, so give me a graph, okay, so in our case, a graph is represented as a adjacency matrix, okay, so the entry is one, if there is an H, okay, let's say vertex one to vertex two, there is an H, yeah, and the entry is zero, okay, if the two vertices are not connected, all right, so what do we do, again, so we use set-solver, basically for this type of problem, set-solver is the most competitive, so for zero one, integer programming problems, okay, the set-solver is the fastest, so okay, we get the graph, okay, so this is a number of vertices in the graph, and then we create a list of variables, basically for each vertex, we create one variable, and all the variables are Boolean, okay, so that means there are zero one integer variables, and then we use this for each, for each, this is like a loop, okay, it takes iterators and conditions, okay, in this example, there were two iterators, okay, so U, okay, is over this range, and V is in this range, basically, okay, there's four each iterates over all pairs, okay, all pairs of vertices, okay, so this graph is undirected, so I assume it is undirected, so all possible pairs, so if the vertex, this vertex U is in a click, okay, that means the vast U is one, and also vertex V is in a click, all right, this is one, okay, then this U and V must be connected, okay, then that means the entry, GUV must be one, okay, and this is the optimization problem, okay, we want to find a maximum click, okay, so we want to find an assignment that maximizes this total sum, all right, so this is another example, and next let's consider another famous NP-complete problem called a vertex cover problem, again, okay, giving a graph, okay, we want to find a set of vertices that covers all the edges in a graph, okay, so it is very similar to the previous click, maximum click problem, so for each vertex, we use a variable, okay, it is zero one, right, and then for each pair of vertices, okay, so what do we do? If this pair is has an H, yeah, if it has an H, then this H must be covered, okay, that means either, okay, U is in the set, or V is in the set, okay, we want to find a minimum set, okay, that covers the graph, okay, so we want to minimize, okay, the sum of the variables, so that is a vertex cover problem, all right, next one is called a Hamilton cycle problem, HCP, so give me a graph, okay, this one is a directed graph, okay, giving a directed graph, we want to, okay, find a Hamilton cycle, okay, in the graph, so first, okay, how to represent a directed graph, okay, we use domain variables to represent a graph, all right, so basically for each vertex, okay, we have a variable, we have a variable, this is like a adjacent list representation of a graph, so V1, so that means from vertex one, okay, there is an H, okay, one two is an H, one five is an H, okay, one six is an H, so this is, these domain variables represent the giving graph, okay, and there is a built-in constraint called a circuit, okay, this one is true if, okay, the assignment forms a Hamilton cycle, all right, so we just use this, all right, so this modeling is easy, and then we find it, okay, find a Hamilton cycle problem, find a Hamilton cycle and print it out, all right, next problem is called a subset sum problem, subset sum, all right, it is another well-known NP-complete problem, okay, giving a set of integers, okay, let's say this is a set of integers, okay, and a target number, a target number, okay, what do we want to do, okay, we want to find a subset, okay, find a subset whose sum, okay, equals the target number, okay, so this, well, basically this modeling for each number, okay, we use a boolean variable, okay, if the variable is one, okay, that means, okay, the number is in the set, all right, otherwise, okay, it is not in the set, and we use this constraint, okay, to say, okay, this b times the element, okay, we use a zip, okay, so basically, for each variable and each integer, all right, so each variable and integer, okay, so what do we do, okay, for each pair in the zip list, okay, so we add this term, add this term and the total, okay, the total equals the target, okay, and in this example, all right, we use the MIPS solver, okay, actually, for this type of small problems, it doesn't make much difference, okay, which solver you use doesn't make much difference, okay, so in my computer, the CBC MIPS solver is installed, and then you can tilt the system or use CBC solver, okay, as a solver option, okay, this is, all right, let's consider another example, okay, called a metric square, okay, this is another famous example, a metric square, so giving a grid, okay, in this case, it is a four by four grid, all right, so what do we want to do, we want to assign a unique integer to each cell, okay, each square, each square, okay, to assign an integer from this domain to each cell, such that, okay, every row, every column, and also two of this diagonal, okay, the primary diagonal and the secondary diagonal, okay, all have the same sum, okay, in this case, okay, sums to 34, okay, 34, so, all right, we use this, so all the entries are, okay, what do we do, so we have a two-dimensional array, and all the entries, okay, are variables, and the variables have this domain from a wall to 16, and all the variables are different, right, all right, we use this vars, okay, vars to get, because all different expects a list of variables, and so what do we do, we use this function vars, okay, vars takes a term, and it returns a list of variables in the term, so, and then we write the constraints, okay, so for each i in this range, what do we do, okay, every row, yeah, every row, okay, has this sum, okay, so the row i has this sum, and the column i has this sum, and then we write the, okay, the primary diagonal, the primary diagonal, and then the secondary diagonal, okay, and in this example, we use cp, for this example, actually cp, the cp solver provides several modeling, okay, we call labeling strategies, all right, for this example, all right, we use this ff called ff, first fill principle, well, basically it selects domain, the smallest domain first, and then prints out the value, so we could run this, or you can see the difference, okay, you can see magic square, okay, and also let's measure the time, all right, well, actually this is pretty faster, okay, the cp solver is pretty faster, okay, you can change it to square, I think this is not hot enough, all right, so the problem is still a toy problem, okay, so, okay, now we use set, set solver, okay, use set solver, and let's see the time, well, it takes a little bit longer, okay, why, because set solvers are not normally not good at handling numbers, but this one is okay, okay, in general set solvers, actually I have found that the set solver outperforms the cp solver, okay, in general case, so if you have time, okay, and unless the time limit is really, really small, all right, the cp solver, all the problem is really small, or you have some problem specific labeling strategies, okay, otherwise the set solver is pretty efficient, all right, the next example is called a sudoku puzzle, that's a very famous puzzle, a lot of people, okay, play it for the sudoku, so this one giving a grade, again, giving a grade, okay, so in this case it depends on the size of the grid, let's say this is 25 by 25 grade, so what do we want to do, we want to assign the numbers, yeah, numbers from 1 to 25, okay, to the, to the, to the sales, okay, such that, okay, every row has different numbers, every column has different numbers, and also every small square, okay, this is a small square, in this case every five by five, okay, every five by five small squares also have, also has different numbers, so, and modeling, okay, what do we do, okay, we first fetch this array, this is a grid, all right, basically there are prefilled entries, prefilled entries, and the underscores are blanks, okay, these are the blanks, and the solver will fill in the blanks, so the domain of the variables is from 1, okay, to n, and then we write the constraints, so for each row, and for each row, okay, all the numbers in the row are different, and for each column, and all the numbers in the column are different, all right, so what do we do, how to get the column, how to get the column, we use list comprehension to retrieve all the entries, okay, in column, in this column, okay, so for each row in this, and we get, okay, row column, and then we get the small square, okay, all the small squares constrain the entries of each of the small squares, okay, the dimension of the small square is this, okay, so keeping n, so if n is 25, then m is five, and then we write this, okay, for each of the small squares, okay, basically this row column, this is the starting row number, and the starting column number of each of the small square, and then we, okay, get all the entries in the small square, okay, using list comprehension, and then we say, okay, all the small squares are different, and then solve, all right, this one uses a set, actually set is extremely efficient, okay, for a problem like a sudoku, okay, so, well, you see this is 25 by 25, okay, it's a pretty hard problem, all right, you see this sudoku, again, time, measure the time, oops, something is wrong, oh, sudoku, okay, I don't think I did a good preparation, this one is not supposed to be there, so let's run it again, sudoku, okay, it came out instantly, well, you could try other solvers, so in general, for a problem, okay, normally you don't know which solver performs the best, so what do you need to do, you need to do experiment, all right, well, since in pocket, okay, you can write the same model and experiment with different solvers, okay, what do you need to do, you just need to input a different model, okay, so you can switch from one solver to another solver, seamlessly, all right, let's consider one more problem, okay, this is called a Inquins problem, Inquins, okay, this is a very famous problem, Inquins, okay, so giving originally it is 8 by 8, so 8 by 8 is not interesting, computationally interesting, because it's a search space is not big enough for experiment, so in general it's 8 by 8, okay, so giving 8 by 8 grid, okay, you won't put 8 queen pieces on the board, such that, okay, no two queens attack each other, okay, you know, in chess, how the queen piece moves, the queen basically combines the movement of the rock and the movement of the bishop, so a queen can move horizontally, vertically, and diagonally, okay, so that means, okay, two queens attack each other, if two queens are placed in the same row, the same column, or the same diagonal, all right, so here is, we have two different models for this, okay, one is, this is, all right, so what do we do, okay, for each, well, let's say for each row, we use a variable, okay, we use one variable, Q, so there are in rows, so we use in variables, and all the variables, okay, each of the variables gives a column number, yeah, column number, so that means Q1, all right, gives a column number of the first queen, and Q2 gives a column number of the second queen, and so on, all right, so now we need to write the constraints, okay, new two queens are in the same column, so Qi for each pair, ij, and Qi, okay, not equal, okay, Qj, and also, not in the same diagonal, yeah, okay, not in, not in a diagonal, that is parallel to the primary diagonal, okay, so this one, use this constraint, and not in a diagonal, that is parallel to the secondary diagonal, and then, okay, so this is the constraint, and then we use FF, actually for this one, the first pair, first pair of principles, this FF labeling strategy works very well, and we can say, okay, time, queens, all right, so by default, it solves 100 queens, all right, comes out instantly, and we can try 1000 queens, so 1000, wait, maybe it takes several seconds, oh, it's still, oh, okay, so it takes 10 seconds, about 10 seconds, all right, so 1000 queens, all right, let's consider another model, all right, this is, we call, okay, in this model, so for each cell, we use a variable, a boolean variable, good, so the boolean variable, if the variable is zero, that means there is no queen, okay, put on that cell, if the variable is one, that means, okay, there is a queen, okay, at that cell, and so then we create n by n, okay, in square variables, and all the variables are boolean, and then we write the constraints, all right, so for each, okay, also for, of course, for this type of problems, then we should use set, all right, CP servers, okay, in general are not good at dealing with zero one variables, all right, so for, we make sure, okay, each row has exactly one queen, okay, and each column has exactly one queen, okay, and then we also, okay, constrain the diagonal, diagonal, for this diagonals, these are all the diagonals that are parallel to the, parallel to the secondary, yeah, to the parallel to the secondary diagonal, and for each of these diagonal, okay, we retrieve all the entries, okay, the sum of these variables is less than or equal to one, yeah, and the same to the diagonals that are parallel to the primary diagonal, okay, so, and each diagonal, okay, the number of queens placed in that diagonal is less than or equal to one, all right, good, all right, so I have shown you several examples, okay, basically, it is, this packet has good modeling capability, okay, because of the availability of the language constructs, such as arrays, okay, loops for each loops, and the list of comprehensions, okay, actually, and also there are several solvers available, so you can pick the best solver that suits your problem, all right, so I have, in this video lectures, okay, I have introduced you at the private system, okay, and I talked about the functional programming, logic programming, using pattern matching rules, and I talked about recursive programming and dynamic programming, and in this video, I talked about constraint programming, well, I don't think this is comprehensive, but I think you are ready to explore, and you are ready to write programs to solve problems, and for, you know, details, for the details, okay, you can take a look at the user's guide, and you can also, okay, there is a book available, published several years ago, on constraint solving and planning with the packet, and that's also a good resource, and I want to point you to another source, that is Hakan Cajestran's page, packet page, and Hakan has written more than 1,000 programs, and probably, okay, when you come to a problem, okay, very likely, and he has already solved it, okay, I mean, if it's a popular problem, all right, so that is the end of this video, and also the end of this series, okay, thank you very much for watching.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 13.32, "text": " Hello, welcome to the fifth video on Introduction to Constraint Logic Programming through PiCAD.", "tokens": [50364, 2425, 11, 2928, 281, 264, 9266, 960, 322, 27193, 882, 281, 8574, 424, 686, 49898, 8338, 2810, 807, 17741, 34, 6112, 13, 51030], "temperature": 0.0, "avg_logprob": -0.2781545565678523, "compression_ratio": 1.3381294964028776, "no_speech_prob": 0.01062983088195324}, {"id": 1, "seek": 0, "start": 13.32, "end": 17.2, "text": " This will be the last video in the series.", "tokens": [51030, 639, 486, 312, 264, 1036, 960, 294, 264, 2638, 13, 51224], "temperature": 0.0, "avg_logprob": -0.2781545565678523, "compression_ratio": 1.3381294964028776, "no_speech_prob": 0.01062983088195324}, {"id": 2, "seek": 0, "start": 17.2, "end": 23.56, "text": " The topic of this video is Constraint Solving.", "tokens": [51224, 440, 4829, 295, 341, 960, 307, 8574, 424, 686, 7026, 798, 13, 51542], "temperature": 0.0, "avg_logprob": -0.2781545565678523, "compression_ratio": 1.3381294964028776, "no_speech_prob": 0.01062983088195324}, {"id": 3, "seek": 2356, "start": 23.56, "end": 32.72, "text": " Only tasks involve combinational search, and any combinational search problem can be formulated", "tokens": [50364, 5686, 9608, 9494, 38514, 1478, 3164, 11, 293, 604, 38514, 1478, 3164, 1154, 393, 312, 48936, 50822], "temperature": 0.0, "avg_logprob": -0.2093094273617393, "compression_ratio": 1.576158940397351, "no_speech_prob": 0.0436350479722023}, {"id": 4, "seek": 2356, "start": 32.72, "end": 40.480000000000004, "text": " as a constraint satisfaction problem, CSP in short.", "tokens": [50822, 382, 257, 25534, 18715, 1154, 11, 9460, 47, 294, 2099, 13, 51210], "temperature": 0.0, "avg_logprob": -0.2093094273617393, "compression_ratio": 1.576158940397351, "no_speech_prob": 0.0436350479722023}, {"id": 5, "seek": 2356, "start": 40.480000000000004, "end": 53.0, "text": " A CSP consists of a set of variables, each of which has a domain, and a set of constraints", "tokens": [51210, 316, 9460, 47, 14689, 295, 257, 992, 295, 9102, 11, 1184, 295, 597, 575, 257, 9274, 11, 293, 257, 992, 295, 18491, 51836], "temperature": 0.0, "avg_logprob": -0.2093094273617393, "compression_ratio": 1.576158940397351, "no_speech_prob": 0.0436350479722023}, {"id": 6, "seek": 5300, "start": 53.0, "end": 61.28, "text": " among the variables, and optionally an objective function.", "tokens": [50364, 3654, 264, 9102, 11, 293, 3614, 379, 364, 10024, 2445, 13, 50778], "temperature": 0.0, "avg_logprob": -0.1692340953930004, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.0014321120688691735}, {"id": 7, "seek": 5300, "start": 61.28, "end": 75.52, "text": " A solution to a CSP is a valuation of variables that satisfies all the constraints, and optimizes", "tokens": [50778, 316, 3827, 281, 257, 9460, 47, 307, 257, 38546, 295, 9102, 300, 44271, 439, 264, 18491, 11, 293, 5028, 5660, 51490], "temperature": 0.0, "avg_logprob": -0.1692340953930004, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.0014321120688691735}, {"id": 8, "seek": 7552, "start": 75.52, "end": 83.44, "text": " the objective function if it exists.", "tokens": [50364, 264, 10024, 2445, 498, 309, 8198, 13, 50760], "temperature": 0.0, "avg_logprob": -0.2824334325017156, "compression_ratio": 1.2072072072072073, "no_speech_prob": 0.005034653004258871}, {"id": 9, "seek": 7552, "start": 83.44, "end": 93.64, "text": " So let's take a look at this toy problem, a crypt arithmetic puzzle, send plus more", "tokens": [50760, 407, 718, 311, 747, 257, 574, 412, 341, 12058, 1154, 11, 257, 9844, 42973, 12805, 11, 2845, 1804, 544, 51270], "temperature": 0.0, "avg_logprob": -0.2824334325017156, "compression_ratio": 1.2072072072072073, "no_speech_prob": 0.005034653004258871}, {"id": 10, "seek": 7552, "start": 93.64, "end": 95.72, "text": " equals money.", "tokens": [51270, 6915, 1460, 13, 51374], "temperature": 0.0, "avg_logprob": -0.2824334325017156, "compression_ratio": 1.2072072072072073, "no_speech_prob": 0.005034653004258871}, {"id": 11, "seek": 9572, "start": 95.72, "end": 106.48, "text": " So giving the digits, giving the letters, we want to assign each letter a unique digit", "tokens": [50364, 407, 2902, 264, 27011, 11, 2902, 264, 7825, 11, 321, 528, 281, 6269, 1184, 5063, 257, 3845, 14293, 50902], "temperature": 0.0, "avg_logprob": -0.2451313336690267, "compression_ratio": 1.4149659863945578, "no_speech_prob": 0.0044640605337917805}, {"id": 12, "seek": 9572, "start": 106.48, "end": 112.8, "text": " such that the equation holds, send plus more equals money.", "tokens": [50902, 1270, 300, 264, 5367, 9190, 11, 2845, 1804, 544, 6915, 1460, 13, 51218], "temperature": 0.0, "avg_logprob": -0.2451313336690267, "compression_ratio": 1.4149659863945578, "no_speech_prob": 0.0044640605337917805}, {"id": 13, "seek": 9572, "start": 112.8, "end": 120.52, "text": " Alright, let's write a program in PiCAD to solve this problem.", "tokens": [51218, 2798, 11, 718, 311, 2464, 257, 1461, 294, 17741, 34, 6112, 281, 5039, 341, 1154, 13, 51604], "temperature": 0.0, "avg_logprob": -0.2451313336690267, "compression_ratio": 1.4149659863945578, "no_speech_prob": 0.0044640605337917805}, {"id": 14, "seek": 12052, "start": 120.52, "end": 129.48, "text": " Alright, the first thing you need to do is you need to import a module.", "tokens": [50364, 2798, 11, 264, 700, 551, 291, 643, 281, 360, 307, 291, 643, 281, 974, 257, 10088, 13, 50812], "temperature": 0.0, "avg_logprob": -0.32066092771642346, "compression_ratio": 1.564625850340136, "no_speech_prob": 0.016768045723438263}, {"id": 15, "seek": 12052, "start": 129.48, "end": 133.6, "text": " There are four constraint modules in PiCAD.", "tokens": [50812, 821, 366, 1451, 25534, 16679, 294, 17741, 34, 6112, 13, 51018], "temperature": 0.0, "avg_logprob": -0.32066092771642346, "compression_ratio": 1.564625850340136, "no_speech_prob": 0.016768045723438263}, {"id": 16, "seek": 12052, "start": 133.6, "end": 137.28, "text": " Alright, let's import CP.", "tokens": [51018, 2798, 11, 718, 311, 974, 22431, 13, 51202], "temperature": 0.0, "avg_logprob": -0.32066092771642346, "compression_ratio": 1.564625850340136, "no_speech_prob": 0.016768045723438263}, {"id": 17, "seek": 12052, "start": 137.28, "end": 143.68, "text": " Alright, you need to generate the variables.", "tokens": [51202, 2798, 11, 291, 643, 281, 8460, 264, 9102, 13, 51522], "temperature": 0.0, "avg_logprob": -0.32066092771642346, "compression_ratio": 1.564625850340136, "no_speech_prob": 0.016768045723438263}, {"id": 18, "seek": 12052, "start": 143.68, "end": 148.51999999999998, "text": " In this case, you need to have a CSP model.", "tokens": [51522, 682, 341, 1389, 11, 291, 643, 281, 362, 257, 9460, 47, 2316, 13, 51764], "temperature": 0.0, "avg_logprob": -0.32066092771642346, "compression_ratio": 1.564625850340136, "no_speech_prob": 0.016768045723438263}, {"id": 19, "seek": 14852, "start": 148.52, "end": 153.28, "text": " In this case, the module is quite obvious.", "tokens": [50364, 682, 341, 1389, 11, 264, 10088, 307, 1596, 6322, 13, 50602], "temperature": 0.0, "avg_logprob": -0.29051893848483845, "compression_ratio": 1.3115942028985508, "no_speech_prob": 0.007660068571567535}, {"id": 20, "seek": 14852, "start": 153.28, "end": 155.04000000000002, "text": " So what do we do?", "tokens": [50602, 407, 437, 360, 321, 360, 30, 50690], "temperature": 0.0, "avg_logprob": -0.29051893848483845, "compression_ratio": 1.3115942028985508, "no_speech_prob": 0.007660068571567535}, {"id": 21, "seek": 14852, "start": 155.04000000000002, "end": 158.52, "text": " We use a variable for each letter.", "tokens": [50690, 492, 764, 257, 7006, 337, 1184, 5063, 13, 50864], "temperature": 0.0, "avg_logprob": -0.29051893848483845, "compression_ratio": 1.3115942028985508, "no_speech_prob": 0.007660068571567535}, {"id": 22, "seek": 14852, "start": 158.52, "end": 173.28, "text": " So let's say VS equals S, send more, OK, a Y, these are the letters, and then we need", "tokens": [50864, 407, 718, 311, 584, 25091, 6915, 318, 11, 2845, 544, 11, 2264, 11, 257, 398, 11, 613, 366, 264, 7825, 11, 293, 550, 321, 643, 51602], "temperature": 0.0, "avg_logprob": -0.29051893848483845, "compression_ratio": 1.3115942028985508, "no_speech_prob": 0.007660068571567535}, {"id": 23, "seek": 17328, "start": 173.28, "end": 178.68, "text": " to declare the domain for each of the variables.", "tokens": [50364, 281, 19710, 264, 9274, 337, 1184, 295, 264, 9102, 13, 50634], "temperature": 0.0, "avg_logprob": -0.2505391173892551, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.08011889457702637}, {"id": 24, "seek": 17328, "start": 178.68, "end": 186.0, "text": " So this is 0 to 9, and then we need to write the constraints.", "tokens": [50634, 407, 341, 307, 1958, 281, 1722, 11, 293, 550, 321, 643, 281, 2464, 264, 18491, 13, 51000], "temperature": 0.0, "avg_logprob": -0.2505391173892551, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.08011889457702637}, {"id": 25, "seek": 17328, "start": 186.0, "end": 194.72, "text": " So of course, send as a four-digit integer, the leading digit cannot be 0.", "tokens": [51000, 407, 295, 1164, 11, 2845, 382, 257, 1451, 12, 25259, 270, 24922, 11, 264, 5775, 14293, 2644, 312, 1958, 13, 51436], "temperature": 0.0, "avg_logprob": -0.2505391173892551, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.08011889457702637}, {"id": 26, "seek": 17328, "start": 194.72, "end": 200.44, "text": " So S not equal 0.", "tokens": [51436, 407, 318, 406, 2681, 1958, 13, 51722], "temperature": 0.0, "avg_logprob": -0.2505391173892551, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.08011889457702637}, {"id": 27, "seek": 17328, "start": 200.44, "end": 202.32, "text": " So this is a built-in.", "tokens": [51722, 407, 341, 307, 257, 3094, 12, 259, 13, 51816], "temperature": 0.0, "avg_logprob": -0.2505391173892551, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.08011889457702637}, {"id": 28, "seek": 20232, "start": 202.32, "end": 206.32, "text": " So this one, this not equal is a built-in.", "tokens": [50364, 407, 341, 472, 11, 341, 406, 2681, 307, 257, 3094, 12, 259, 13, 50564], "temperature": 0.0, "avg_logprob": -0.22022103040646285, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0009089044178836048}, {"id": 29, "seek": 20232, "start": 206.32, "end": 209.48, "text": " This means not unifiable.", "tokens": [50564, 639, 1355, 406, 517, 30876, 13, 50722], "temperature": 0.0, "avg_logprob": -0.22022103040646285, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0009089044178836048}, {"id": 30, "seek": 20232, "start": 209.48, "end": 215.28, "text": " This is a built-in used for terms, for constraints.", "tokens": [50722, 639, 307, 257, 3094, 12, 259, 1143, 337, 2115, 11, 337, 18491, 13, 51012], "temperature": 0.0, "avg_logprob": -0.22022103040646285, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0009089044178836048}, {"id": 31, "seek": 20232, "start": 215.28, "end": 221.84, "text": " So we use this operator, sharp, and then this not equal symbol.", "tokens": [51012, 407, 321, 764, 341, 12973, 11, 8199, 11, 293, 550, 341, 406, 2681, 5986, 13, 51340], "temperature": 0.0, "avg_logprob": -0.22022103040646285, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0009089044178836048}, {"id": 32, "seek": 20232, "start": 221.84, "end": 231.4, "text": " And also, send to the more, m is a leading digit, it cannot be 0.", "tokens": [51340, 400, 611, 11, 2845, 281, 264, 544, 11, 275, 307, 257, 5775, 14293, 11, 309, 2644, 312, 1958, 13, 51818], "temperature": 0.0, "avg_logprob": -0.22022103040646285, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0009089044178836048}, {"id": 33, "seek": 23140, "start": 231.4, "end": 243.4, "text": " And then we write the equation, send plus, and all the digits, all the digits are different.", "tokens": [50364, 400, 550, 321, 2464, 264, 5367, 11, 2845, 1804, 11, 293, 439, 264, 27011, 11, 439, 264, 27011, 366, 819, 13, 50964], "temperature": 0.0, "avg_logprob": -0.23326462965745193, "compression_ratio": 1.6642857142857144, "no_speech_prob": 0.0010607364820316434}, {"id": 34, "seek": 23140, "start": 243.4, "end": 251.32, "text": " So we use this global constraint or different, so VS.", "tokens": [50964, 407, 321, 764, 341, 4338, 25534, 420, 819, 11, 370, 25091, 13, 51360], "temperature": 0.0, "avg_logprob": -0.23326462965745193, "compression_ratio": 1.6642857142857144, "no_speech_prob": 0.0010607364820316434}, {"id": 35, "seek": 23140, "start": 251.32, "end": 261.28000000000003, "text": " And then we write the equation, send as a weighted sum, send has a power, it is 1,000.", "tokens": [51360, 400, 550, 321, 2464, 264, 5367, 11, 2845, 382, 257, 32807, 2408, 11, 2845, 575, 257, 1347, 11, 309, 307, 502, 11, 1360, 13, 51858], "temperature": 0.0, "avg_logprob": -0.23326462965745193, "compression_ratio": 1.6642857142857144, "no_speech_prob": 0.0010607364820316434}, {"id": 36, "seek": 26128, "start": 261.28, "end": 279.55999999999995, "text": " So now, talent times, S plus, times E, and times N, and times D.", "tokens": [50364, 407, 586, 11, 8301, 1413, 11, 318, 1804, 11, 1413, 462, 11, 293, 1413, 426, 11, 293, 1413, 413, 13, 51278], "temperature": 0.0, "avg_logprob": -0.7091960112253824, "compression_ratio": 1.2307692307692308, "no_speech_prob": 0.040349315851926804}, {"id": 37, "seek": 27956, "start": 279.56, "end": 302.4, "text": " Okay, so this is a send plus more, m, o, and r, more, and equals money.", "tokens": [50364, 1033, 11, 370, 341, 307, 257, 2845, 1804, 544, 11, 275, 11, 277, 11, 293, 367, 11, 544, 11, 293, 6915, 1460, 13, 51506], "temperature": 0.0, "avg_logprob": -0.42281489902072483, "compression_ratio": 1.3495145631067962, "no_speech_prob": 0.17203478515148163}, {"id": 38, "seek": 27956, "start": 302.4, "end": 308.28, "text": " All right, so equals, again, this equality, this is for constraint.", "tokens": [51506, 1057, 558, 11, 370, 6915, 11, 797, 11, 341, 14949, 11, 341, 307, 337, 25534, 13, 51800], "temperature": 0.0, "avg_logprob": -0.42281489902072483, "compression_ratio": 1.3495145631067962, "no_speech_prob": 0.17203478515148163}, {"id": 39, "seek": 30828, "start": 308.28, "end": 315.15999999999997, "text": " So this is sharp equal, means equality constraint, all right, equals the money.", "tokens": [50364, 407, 341, 307, 8199, 2681, 11, 1355, 14949, 25534, 11, 439, 558, 11, 6915, 264, 1460, 13, 50708], "temperature": 0.0, "avg_logprob": -0.4830036617460705, "compression_ratio": 1.4639175257731958, "no_speech_prob": 0.2695889174938202}, {"id": 40, "seek": 30828, "start": 315.15999999999997, "end": 337.84, "text": " All right, so this is 10,000, and money, and money, and money.", "tokens": [50708, 1057, 558, 11, 370, 341, 307, 1266, 11, 1360, 11, 293, 1460, 11, 293, 1460, 11, 293, 1460, 13, 51842], "temperature": 0.0, "avg_logprob": -0.4830036617460705, "compression_ratio": 1.4639175257731958, "no_speech_prob": 0.2695889174938202}, {"id": 41, "seek": 33784, "start": 337.84, "end": 354.96, "text": " Okay, so this is a constraint, all right, so, and then, okay, the last thing after generating", "tokens": [50364, 1033, 11, 370, 341, 307, 257, 25534, 11, 439, 558, 11, 370, 11, 293, 550, 11, 1392, 11, 264, 1036, 551, 934, 17746, 51220], "temperature": 0.0, "avg_logprob": -0.3288217544555664, "compression_ratio": 1.4566929133858268, "no_speech_prob": 0.031435344368219376}, {"id": 42, "seek": 33784, "start": 354.96, "end": 364.96, "text": " the constraints, we want to label the variables with the values, by using this built-in, so", "tokens": [51220, 264, 18491, 11, 321, 528, 281, 7645, 264, 9102, 365, 264, 4190, 11, 538, 1228, 341, 3094, 12, 259, 11, 370, 51720], "temperature": 0.0, "avg_logprob": -0.3288217544555664, "compression_ratio": 1.4566929133858268, "no_speech_prob": 0.031435344368219376}, {"id": 43, "seek": 36496, "start": 365.08, "end": 366.71999999999997, "text": " VS.", "tokens": [50370, 25091, 13, 50452], "temperature": 0.0, "avg_logprob": -0.38955393377340064, "compression_ratio": 1.3414634146341464, "no_speech_prob": 0.15132109820842743}, {"id": 44, "seek": 36496, "start": 366.71999999999997, "end": 373.03999999999996, "text": " And then we output, okay, output the values, let's just print, all right.", "tokens": [50452, 400, 550, 321, 5598, 11, 1392, 11, 5598, 264, 4190, 11, 718, 311, 445, 4482, 11, 439, 558, 13, 50768], "temperature": 0.0, "avg_logprob": -0.38955393377340064, "compression_ratio": 1.3414634146341464, "no_speech_prob": 0.15132109820842743}, {"id": 45, "seek": 36496, "start": 373.03999999999996, "end": 386.67999999999995, "text": " All right, so, send plus more, equals money, all right, so now, we can run the program,", "tokens": [50768, 1057, 558, 11, 370, 11, 2845, 1804, 544, 11, 6915, 1460, 11, 439, 558, 11, 370, 586, 11, 321, 393, 1190, 264, 1461, 11, 51450], "temperature": 0.0, "avg_logprob": -0.38955393377340064, "compression_ratio": 1.3414634146341464, "no_speech_prob": 0.15132109820842743}, {"id": 46, "seek": 38668, "start": 386.68, "end": 397.16, "text": " so let's say, send more, okay, it's good, all right, so this is a solution, yeah, this", "tokens": [50364, 370, 718, 311, 584, 11, 2845, 544, 11, 1392, 11, 309, 311, 665, 11, 439, 558, 11, 370, 341, 307, 257, 3827, 11, 1338, 11, 341, 50888], "temperature": 0.0, "avg_logprob": -0.2998437708074396, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.003819921752437949}, {"id": 47, "seek": 38668, "start": 397.16, "end": 405.64, "text": " is a solution, okay, so, okay, there are several modules, in case you want to use a different", "tokens": [50888, 307, 257, 3827, 11, 1392, 11, 370, 11, 1392, 11, 456, 366, 2940, 16679, 11, 294, 1389, 291, 528, 281, 764, 257, 819, 51312], "temperature": 0.0, "avg_logprob": -0.2998437708074396, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.003819921752437949}, {"id": 48, "seek": 40564, "start": 405.88, "end": 414.28, "text": " server, okay, instead of using CP server, you can use a set, okay, set, a set server,", "tokens": [50376, 7154, 11, 1392, 11, 2602, 295, 1228, 22431, 7154, 11, 291, 393, 764, 257, 992, 11, 1392, 11, 992, 11, 257, 992, 7154, 11, 50796], "temperature": 0.0, "avg_logprob": -0.2337042403547731, "compression_ratio": 1.7746478873239437, "no_speech_prob": 0.016866227611899376}, {"id": 49, "seek": 40564, "start": 414.28, "end": 421.56, "text": " okay, a set server, there is a set compiler, which compiles all the constraints, okay,", "tokens": [50796, 1392, 11, 257, 992, 7154, 11, 456, 307, 257, 992, 31958, 11, 597, 715, 4680, 439, 264, 18491, 11, 1392, 11, 51160], "temperature": 0.0, "avg_logprob": -0.2337042403547731, "compression_ratio": 1.7746478873239437, "no_speech_prob": 0.016866227611899376}, {"id": 50, "seek": 40564, "start": 421.56, "end": 427.32, "text": " to set, to conjunctive normal form, and then it calls a set server to solve it.", "tokens": [51160, 281, 992, 11, 281, 18244, 20221, 2710, 1254, 11, 293, 550, 309, 5498, 257, 992, 7154, 281, 5039, 309, 13, 51448], "temperature": 0.0, "avg_logprob": -0.2337042403547731, "compression_ratio": 1.7746478873239437, "no_speech_prob": 0.016866227611899376}, {"id": 51, "seek": 42732, "start": 428.28, "end": 437.48, "text": " And you can also use this one called MIP, okay, mixed integer programming server,", "tokens": [50412, 400, 291, 393, 611, 764, 341, 472, 1219, 376, 9139, 11, 1392, 11, 7467, 24922, 9410, 7154, 11, 50872], "temperature": 0.0, "avg_logprob": -0.2629966514055119, "compression_ratio": 1.3543307086614174, "no_speech_prob": 0.00258271605707705}, {"id": 52, "seek": 42732, "start": 438.76, "end": 449.24, "text": " this MIP server, okay, actually supports not only integer variables, but also real values.", "tokens": [50936, 341, 376, 9139, 7154, 11, 1392, 11, 767, 9346, 406, 787, 24922, 9102, 11, 457, 611, 957, 4190, 13, 51460], "temperature": 0.0, "avg_logprob": -0.2629966514055119, "compression_ratio": 1.3543307086614174, "no_speech_prob": 0.00258271605707705}, {"id": 53, "seek": 44924, "start": 449.56, "end": 458.2, "text": " MIP server, in order to use a MIP server, you need to install MIP server, okay, so actually,", "tokens": [50380, 376, 9139, 7154, 11, 294, 1668, 281, 764, 257, 376, 9139, 7154, 11, 291, 643, 281, 3625, 376, 9139, 7154, 11, 1392, 11, 370, 767, 11, 50812], "temperature": 0.0, "avg_logprob": -0.173587543623788, "compression_ratio": 1.55, "no_speech_prob": 0.0030623027123510838}, {"id": 54, "seek": 44924, "start": 458.2, "end": 467.16, "text": " in my computer, I have two MIP servers installed, the Groovy server, and also the CBC server,", "tokens": [50812, 294, 452, 3820, 11, 286, 362, 732, 376, 9139, 15909, 8899, 11, 264, 12981, 38223, 7154, 11, 293, 611, 264, 383, 7869, 7154, 11, 51260], "temperature": 0.0, "avg_logprob": -0.173587543623788, "compression_ratio": 1.55, "no_speech_prob": 0.0030623027123510838}, {"id": 55, "seek": 46716, "start": 468.12, "end": 472.68, "text": " all right, you can also use SMT, okay, this is SMT server,", "tokens": [50412, 439, 558, 11, 291, 393, 611, 764, 13115, 51, 11, 1392, 11, 341, 307, 13115, 51, 7154, 11, 50640], "temperature": 0.0, "avg_logprob": -0.13017522587495692, "compression_ratio": 1.4131736526946108, "no_speech_prob": 0.0012429221533238888}, {"id": 56, "seek": 46716, "start": 475.88000000000005, "end": 486.20000000000005, "text": " it has a connection to Z3 and the CV4 servers, but I have to say for finite domain constraints,", "tokens": [50800, 309, 575, 257, 4984, 281, 1176, 18, 293, 264, 22995, 19, 15909, 11, 457, 286, 362, 281, 584, 337, 19362, 9274, 18491, 11, 51316], "temperature": 0.0, "avg_logprob": -0.13017522587495692, "compression_ratio": 1.4131736526946108, "no_speech_prob": 0.0012429221533238888}, {"id": 57, "seek": 46716, "start": 487.0, "end": 494.36, "text": " SMT servers are not so competitive, all right, good, so that's our first example,", "tokens": [51356, 13115, 51, 15909, 366, 406, 370, 10043, 11, 439, 558, 11, 665, 11, 370, 300, 311, 527, 700, 1365, 11, 51724], "temperature": 0.0, "avg_logprob": -0.13017522587495692, "compression_ratio": 1.4131736526946108, "no_speech_prob": 0.0012429221533238888}, {"id": 58, "seek": 49716, "start": 497.72, "end": 504.84000000000003, "text": " all right, the next example I want to show you is, okay, you know, every", "tokens": [50392, 439, 558, 11, 264, 958, 1365, 286, 528, 281, 855, 291, 307, 11, 1392, 11, 291, 458, 11, 633, 50748], "temperature": 0.0, "avg_logprob": -0.19334961916949298, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.00035087563446722925}, {"id": 59, "seek": 49716, "start": 505.56, "end": 515.1600000000001, "text": " called a satisfiability problem, okay, I have this problem set, okay, all right, so the satisfiability", "tokens": [50784, 1219, 257, 5519, 72, 2310, 1154, 11, 1392, 11, 286, 362, 341, 1154, 992, 11, 1392, 11, 439, 558, 11, 370, 264, 5519, 72, 2310, 51264], "temperature": 0.0, "avg_logprob": -0.19334961916949298, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.00035087563446722925}, {"id": 60, "seek": 49716, "start": 515.1600000000001, "end": 523.48, "text": " problem is, okay, giving a set of variables and a boolean formula, okay, and the problem", "tokens": [51264, 1154, 307, 11, 1392, 11, 2902, 257, 992, 295, 9102, 293, 257, 748, 4812, 282, 8513, 11, 1392, 11, 293, 264, 1154, 51680], "temperature": 0.0, "avg_logprob": -0.19334961916949298, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.00035087563446722925}, {"id": 61, "seek": 52348, "start": 523.48, "end": 531.8000000000001, "text": " amounts to finding a check if the formula is satisfiable or not, and if it is satisfiable,", "tokens": [50364, 11663, 281, 5006, 257, 1520, 498, 264, 8513, 307, 5519, 9364, 420, 406, 11, 293, 498, 309, 307, 5519, 9364, 11, 50780], "temperature": 0.0, "avg_logprob": -0.11084242428050321, "compression_ratio": 1.8486842105263157, "no_speech_prob": 0.0004712378140538931}, {"id": 62, "seek": 52348, "start": 532.36, "end": 543.48, "text": " then find a solution, find a solution assignment for the variables, so this is a one example", "tokens": [50808, 550, 915, 257, 3827, 11, 915, 257, 3827, 15187, 337, 264, 9102, 11, 370, 341, 307, 257, 472, 1365, 51364], "temperature": 0.0, "avg_logprob": -0.11084242428050321, "compression_ratio": 1.8486842105263157, "no_speech_prob": 0.0004712378140538931}, {"id": 63, "seek": 52348, "start": 543.48, "end": 552.52, "text": " of the satisfiability problem, so in this example, there are four variables and all the variables", "tokens": [51364, 295, 264, 5519, 72, 2310, 1154, 11, 370, 294, 341, 1365, 11, 456, 366, 1451, 9102, 293, 439, 264, 9102, 51816], "temperature": 0.0, "avg_logprob": -0.11084242428050321, "compression_ratio": 1.8486842105263157, "no_speech_prob": 0.0004712378140538931}, {"id": 64, "seek": 55252, "start": 552.52, "end": 559.0799999999999, "text": " are boolean, okay, boolean variables are treated as integer variables, zero, one integer variables,", "tokens": [50364, 366, 748, 4812, 282, 11, 1392, 11, 748, 4812, 282, 9102, 366, 8668, 382, 24922, 9102, 11, 4018, 11, 472, 24922, 9102, 11, 50692], "temperature": 0.0, "avg_logprob": -0.14230832661667916, "compression_ratio": 2.074626865671642, "no_speech_prob": 0.001513927592895925}, {"id": 65, "seek": 55252, "start": 560.1999999999999, "end": 568.4399999999999, "text": " and then, okay, there are these operators, okay, see these operators, this is for implication,", "tokens": [50748, 293, 550, 11, 1392, 11, 456, 366, 613, 19077, 11, 1392, 11, 536, 613, 19077, 11, 341, 307, 337, 37814, 11, 51160], "temperature": 0.0, "avg_logprob": -0.14230832661667916, "compression_ratio": 2.074626865671642, "no_speech_prob": 0.001513927592895925}, {"id": 66, "seek": 55252, "start": 569.48, "end": 579.3199999999999, "text": " and then this is for logic or this is for negation, and this for equivalence, okay,", "tokens": [51212, 293, 550, 341, 307, 337, 9952, 420, 341, 307, 337, 2485, 399, 11, 293, 341, 337, 9052, 655, 11, 1392, 11, 51704], "temperature": 0.0, "avg_logprob": -0.14230832661667916, "compression_ratio": 2.074626865671642, "no_speech_prob": 0.001513927592895925}, {"id": 67, "seek": 57932, "start": 579.32, "end": 586.7600000000001, "text": " this is for, okay, logic and, okay, so this is a formula, and then it's used to solve, okay,", "tokens": [50364, 341, 307, 337, 11, 1392, 11, 9952, 293, 11, 1392, 11, 370, 341, 307, 257, 8513, 11, 293, 550, 309, 311, 1143, 281, 5039, 11, 1392, 11, 50736], "temperature": 0.0, "avg_logprob": -0.15547976774327896, "compression_ratio": 1.80625, "no_speech_prob": 0.00028161448426544666}, {"id": 68, "seek": 57932, "start": 587.88, "end": 597.08, "text": " and then print out the value, all right, let's take a look at another, this is, okay, the very", "tokens": [50792, 293, 550, 4482, 484, 264, 2158, 11, 439, 558, 11, 718, 311, 747, 257, 574, 412, 1071, 11, 341, 307, 11, 1392, 11, 264, 588, 51252], "temperature": 0.0, "avg_logprob": -0.15547976774327896, "compression_ratio": 1.80625, "no_speech_prob": 0.00028161448426544666}, {"id": 69, "seek": 57932, "start": 597.08, "end": 608.12, "text": " first problem that was found to be an NP-complete problem, all right, so let's take a look at another", "tokens": [51252, 700, 1154, 300, 390, 1352, 281, 312, 364, 38611, 12, 1112, 17220, 1154, 11, 439, 558, 11, 370, 718, 311, 747, 257, 574, 412, 1071, 51804], "temperature": 0.0, "avg_logprob": -0.15547976774327896, "compression_ratio": 1.80625, "no_speech_prob": 0.00028161448426544666}, {"id": 70, "seek": 60812, "start": 608.12, "end": 617.8, "text": " problem called a maximum click problem, so this is a click, all right, so give me a graph,", "tokens": [50364, 1154, 1219, 257, 6674, 2052, 1154, 11, 370, 341, 307, 257, 2052, 11, 439, 558, 11, 370, 976, 385, 257, 4295, 11, 50848], "temperature": 0.0, "avg_logprob": -0.13720626365847705, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.0004291999794077128}, {"id": 71, "seek": 60812, "start": 618.68, "end": 628.04, "text": " okay, so in our case, a graph is represented as a adjacency matrix, okay, so the entry is one,", "tokens": [50892, 1392, 11, 370, 294, 527, 1389, 11, 257, 4295, 307, 10379, 382, 257, 22940, 3020, 8141, 11, 1392, 11, 370, 264, 8729, 307, 472, 11, 51360], "temperature": 0.0, "avg_logprob": -0.13720626365847705, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.0004291999794077128}, {"id": 72, "seek": 60812, "start": 628.04, "end": 635.24, "text": " if there is an H, okay, let's say vertex one to vertex two, there is an H, yeah, and the entry", "tokens": [51360, 498, 456, 307, 364, 389, 11, 1392, 11, 718, 311, 584, 28162, 472, 281, 28162, 732, 11, 456, 307, 364, 389, 11, 1338, 11, 293, 264, 8729, 51720], "temperature": 0.0, "avg_logprob": -0.13720626365847705, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.0004291999794077128}, {"id": 73, "seek": 63524, "start": 635.24, "end": 642.44, "text": " is zero, okay, if the two vertices are not connected, all right, so what do we do, again,", "tokens": [50364, 307, 4018, 11, 1392, 11, 498, 264, 732, 32053, 366, 406, 4582, 11, 439, 558, 11, 370, 437, 360, 321, 360, 11, 797, 11, 50724], "temperature": 0.0, "avg_logprob": -0.11822162176433362, "compression_ratio": 1.638036809815951, "no_speech_prob": 0.0002608094655442983}, {"id": 74, "seek": 63524, "start": 642.44, "end": 649.8, "text": " so we use set-solver, basically for this type of problem, set-solver is the most competitive,", "tokens": [50724, 370, 321, 764, 992, 12, 30926, 331, 11, 1936, 337, 341, 2010, 295, 1154, 11, 992, 12, 30926, 331, 307, 264, 881, 10043, 11, 51092], "temperature": 0.0, "avg_logprob": -0.11822162176433362, "compression_ratio": 1.638036809815951, "no_speech_prob": 0.0002608094655442983}, {"id": 75, "seek": 63524, "start": 651.0, "end": 658.12, "text": " so for zero one, integer programming problems, okay, the set-solver is the fastest,", "tokens": [51152, 370, 337, 4018, 472, 11, 24922, 9410, 2740, 11, 1392, 11, 264, 992, 12, 30926, 331, 307, 264, 14573, 11, 51508], "temperature": 0.0, "avg_logprob": -0.11822162176433362, "compression_ratio": 1.638036809815951, "no_speech_prob": 0.0002608094655442983}, {"id": 76, "seek": 65812, "start": 659.08, "end": 664.92, "text": " so okay, we get the graph, okay, so this is a number of vertices in the graph,", "tokens": [50412, 370, 1392, 11, 321, 483, 264, 4295, 11, 1392, 11, 370, 341, 307, 257, 1230, 295, 32053, 294, 264, 4295, 11, 50704], "temperature": 0.0, "avg_logprob": -0.13830151191124548, "compression_ratio": 1.7112676056338028, "no_speech_prob": 0.001644858974032104}, {"id": 77, "seek": 65812, "start": 666.04, "end": 673.8, "text": " and then we create a list of variables, basically for each vertex, we create one variable,", "tokens": [50760, 293, 550, 321, 1884, 257, 1329, 295, 9102, 11, 1936, 337, 1184, 28162, 11, 321, 1884, 472, 7006, 11, 51148], "temperature": 0.0, "avg_logprob": -0.13830151191124548, "compression_ratio": 1.7112676056338028, "no_speech_prob": 0.001644858974032104}, {"id": 78, "seek": 65812, "start": 674.76, "end": 678.92, "text": " and all the variables are Boolean, okay, so that means there are zero one", "tokens": [51196, 293, 439, 264, 9102, 366, 23351, 28499, 11, 1392, 11, 370, 300, 1355, 456, 366, 4018, 472, 51404], "temperature": 0.0, "avg_logprob": -0.13830151191124548, "compression_ratio": 1.7112676056338028, "no_speech_prob": 0.001644858974032104}, {"id": 79, "seek": 67892, "start": 679.64, "end": 691.24, "text": " integer variables, and then we use this for each, for each, this is like a loop, okay, it takes", "tokens": [50400, 24922, 9102, 11, 293, 550, 321, 764, 341, 337, 1184, 11, 337, 1184, 11, 341, 307, 411, 257, 6367, 11, 1392, 11, 309, 2516, 50980], "temperature": 0.0, "avg_logprob": -0.15987576757158553, "compression_ratio": 1.5934959349593496, "no_speech_prob": 0.00607392517849803}, {"id": 80, "seek": 67892, "start": 691.24, "end": 700.5999999999999, "text": " iterators and conditions, okay, in this example, there were two iterators, okay, so U, okay, is over", "tokens": [50980, 17138, 3391, 293, 4487, 11, 1392, 11, 294, 341, 1365, 11, 456, 645, 732, 17138, 3391, 11, 1392, 11, 370, 624, 11, 1392, 11, 307, 670, 51448], "temperature": 0.0, "avg_logprob": -0.15987576757158553, "compression_ratio": 1.5934959349593496, "no_speech_prob": 0.00607392517849803}, {"id": 81, "seek": 70060, "start": 700.6, "end": 710.2, "text": " this range, and V is in this range, basically, okay, there's four each iterates over all pairs,", "tokens": [50364, 341, 3613, 11, 293, 691, 307, 294, 341, 3613, 11, 1936, 11, 1392, 11, 456, 311, 1451, 1184, 17138, 1024, 670, 439, 15494, 11, 50844], "temperature": 0.0, "avg_logprob": -0.11790013018949533, "compression_ratio": 1.7610062893081762, "no_speech_prob": 0.0034753798972815275}, {"id": 82, "seek": 70060, "start": 710.76, "end": 717.48, "text": " okay, all pairs of vertices, okay, so this graph is undirected, so I assume it is undirected,", "tokens": [50872, 1392, 11, 439, 15494, 295, 32053, 11, 1392, 11, 370, 341, 4295, 307, 674, 11890, 292, 11, 370, 286, 6552, 309, 307, 674, 11890, 292, 11, 51208], "temperature": 0.0, "avg_logprob": -0.11790013018949533, "compression_ratio": 1.7610062893081762, "no_speech_prob": 0.0034753798972815275}, {"id": 83, "seek": 70060, "start": 717.48, "end": 728.6800000000001, "text": " so all possible pairs, so if the vertex, this vertex U is in a click, okay, that means the", "tokens": [51208, 370, 439, 1944, 15494, 11, 370, 498, 264, 28162, 11, 341, 28162, 624, 307, 294, 257, 2052, 11, 1392, 11, 300, 1355, 264, 51768], "temperature": 0.0, "avg_logprob": -0.11790013018949533, "compression_ratio": 1.7610062893081762, "no_speech_prob": 0.0034753798972815275}, {"id": 84, "seek": 72868, "start": 729.2399999999999, "end": 739.64, "text": " vast U is one, and also vertex V is in a click, all right, this is one, okay, then this U and V", "tokens": [50392, 8369, 624, 307, 472, 11, 293, 611, 28162, 691, 307, 294, 257, 2052, 11, 439, 558, 11, 341, 307, 472, 11, 1392, 11, 550, 341, 624, 293, 691, 50912], "temperature": 0.0, "avg_logprob": -0.13057962278040444, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.0005876697250641882}, {"id": 85, "seek": 72868, "start": 739.64, "end": 747.0, "text": " must be connected, okay, then that means the entry, GUV must be one, okay, and this is the", "tokens": [50912, 1633, 312, 4582, 11, 1392, 11, 550, 300, 1355, 264, 8729, 11, 17917, 53, 1633, 312, 472, 11, 1392, 11, 293, 341, 307, 264, 51280], "temperature": 0.0, "avg_logprob": -0.13057962278040444, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.0005876697250641882}, {"id": 86, "seek": 72868, "start": 747.0, "end": 757.0, "text": " optimization problem, okay, we want to find a maximum click, okay, so we want to find an assignment", "tokens": [51280, 19618, 1154, 11, 1392, 11, 321, 528, 281, 915, 257, 6674, 2052, 11, 1392, 11, 370, 321, 528, 281, 915, 364, 15187, 51780], "temperature": 0.0, "avg_logprob": -0.13057962278040444, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.0005876697250641882}, {"id": 87, "seek": 75700, "start": 757.0, "end": 768.52, "text": " that maximizes this total sum, all right, so this is another example, and next let's consider another", "tokens": [50364, 300, 5138, 5660, 341, 3217, 2408, 11, 439, 558, 11, 370, 341, 307, 1071, 1365, 11, 293, 958, 718, 311, 1949, 1071, 50940], "temperature": 0.0, "avg_logprob": -0.15609719618311468, "compression_ratio": 1.4236111111111112, "no_speech_prob": 0.0007900319178588688}, {"id": 88, "seek": 75700, "start": 768.52, "end": 781.88, "text": " famous NP-complete problem called a vertex cover problem, again, okay, giving a graph, okay, we want to", "tokens": [50940, 4618, 38611, 12, 1112, 17220, 1154, 1219, 257, 28162, 2060, 1154, 11, 797, 11, 1392, 11, 2902, 257, 4295, 11, 1392, 11, 321, 528, 281, 51608], "temperature": 0.0, "avg_logprob": -0.15609719618311468, "compression_ratio": 1.4236111111111112, "no_speech_prob": 0.0007900319178588688}, {"id": 89, "seek": 78188, "start": 782.76, "end": 795.8, "text": " find a set of vertices that covers all the edges in a graph, okay, so it is very similar to the", "tokens": [50408, 915, 257, 992, 295, 32053, 300, 10538, 439, 264, 8819, 294, 257, 4295, 11, 1392, 11, 370, 309, 307, 588, 2531, 281, 264, 51060], "temperature": 0.0, "avg_logprob": -0.17389606979658018, "compression_ratio": 1.4661654135338347, "no_speech_prob": 0.0013643777929246426}, {"id": 90, "seek": 78188, "start": 795.8, "end": 805.72, "text": " previous click, maximum click problem, so for each vertex, we use a variable, okay, it is zero one,", "tokens": [51060, 3894, 2052, 11, 6674, 2052, 1154, 11, 370, 337, 1184, 28162, 11, 321, 764, 257, 7006, 11, 1392, 11, 309, 307, 4018, 472, 11, 51556], "temperature": 0.0, "avg_logprob": -0.17389606979658018, "compression_ratio": 1.4661654135338347, "no_speech_prob": 0.0013643777929246426}, {"id": 91, "seek": 80572, "start": 805.72, "end": 816.12, "text": " right, and then for each pair of vertices, okay, so what do we do? If this pair is has an H, yeah,", "tokens": [50364, 558, 11, 293, 550, 337, 1184, 6119, 295, 32053, 11, 1392, 11, 370, 437, 360, 321, 360, 30, 759, 341, 6119, 307, 575, 364, 389, 11, 1338, 11, 50884], "temperature": 0.0, "avg_logprob": -0.1431013638855981, "compression_ratio": 1.4692307692307693, "no_speech_prob": 0.0008549443446099758}, {"id": 92, "seek": 80572, "start": 816.12, "end": 826.9200000000001, "text": " if it has an H, then this H must be covered, okay, that means either, okay, U is in the set,", "tokens": [50884, 498, 309, 575, 364, 389, 11, 550, 341, 389, 1633, 312, 5343, 11, 1392, 11, 300, 1355, 2139, 11, 1392, 11, 624, 307, 294, 264, 992, 11, 51424], "temperature": 0.0, "avg_logprob": -0.1431013638855981, "compression_ratio": 1.4692307692307693, "no_speech_prob": 0.0008549443446099758}, {"id": 93, "seek": 82692, "start": 827.7199999999999, "end": 836.68, "text": " or V is in the set, okay, we want to find a minimum set, okay, that covers the graph, okay, so we want to", "tokens": [50404, 420, 691, 307, 294, 264, 992, 11, 1392, 11, 321, 528, 281, 915, 257, 7285, 992, 11, 1392, 11, 300, 10538, 264, 4295, 11, 1392, 11, 370, 321, 528, 281, 50852], "temperature": 0.0, "avg_logprob": -0.10243642128120034, "compression_ratio": 1.6031746031746033, "no_speech_prob": 0.00032214223756454885}, {"id": 94, "seek": 82692, "start": 837.4799999999999, "end": 846.92, "text": " minimize, okay, the sum of the variables, so that is a vertex cover problem, all right, next one", "tokens": [50892, 17522, 11, 1392, 11, 264, 2408, 295, 264, 9102, 11, 370, 300, 307, 257, 28162, 2060, 1154, 11, 439, 558, 11, 958, 472, 51364], "temperature": 0.0, "avg_logprob": -0.10243642128120034, "compression_ratio": 1.6031746031746033, "no_speech_prob": 0.00032214223756454885}, {"id": 95, "seek": 84692, "start": 846.92, "end": 857.88, "text": " is called a Hamilton cycle problem, HCP, so give me a graph, okay, this one is a directed", "tokens": [50364, 307, 1219, 257, 18484, 6586, 1154, 11, 389, 20049, 11, 370, 976, 385, 257, 4295, 11, 1392, 11, 341, 472, 307, 257, 12898, 50912], "temperature": 0.0, "avg_logprob": -0.08839443751743861, "compression_ratio": 1.88, "no_speech_prob": 0.0006539625464938581}, {"id": 96, "seek": 84692, "start": 857.88, "end": 866.52, "text": " graph, okay, giving a directed graph, we want to, okay, find a Hamilton cycle, okay, in the graph,", "tokens": [50912, 4295, 11, 1392, 11, 2902, 257, 12898, 4295, 11, 321, 528, 281, 11, 1392, 11, 915, 257, 18484, 6586, 11, 1392, 11, 294, 264, 4295, 11, 51344], "temperature": 0.0, "avg_logprob": -0.08839443751743861, "compression_ratio": 1.88, "no_speech_prob": 0.0006539625464938581}, {"id": 97, "seek": 84692, "start": 867.64, "end": 875.0, "text": " so first, okay, how to represent a directed graph, okay, we use domain variables to represent", "tokens": [51400, 370, 700, 11, 1392, 11, 577, 281, 2906, 257, 12898, 4295, 11, 1392, 11, 321, 764, 9274, 9102, 281, 2906, 51768], "temperature": 0.0, "avg_logprob": -0.08839443751743861, "compression_ratio": 1.88, "no_speech_prob": 0.0006539625464938581}, {"id": 98, "seek": 87500, "start": 875.72, "end": 883.08, "text": " a graph, all right, so basically for each vertex, okay, we have a variable,", "tokens": [50400, 257, 4295, 11, 439, 558, 11, 370, 1936, 337, 1184, 28162, 11, 1392, 11, 321, 362, 257, 7006, 11, 50768], "temperature": 0.0, "avg_logprob": -0.1300106430053711, "compression_ratio": 1.6622516556291391, "no_speech_prob": 0.0009076732094399631}, {"id": 99, "seek": 87500, "start": 883.8, "end": 889.48, "text": " we have a variable, this is like a adjacent list representation of a graph,", "tokens": [50804, 321, 362, 257, 7006, 11, 341, 307, 411, 257, 24441, 1329, 10290, 295, 257, 4295, 11, 51088], "temperature": 0.0, "avg_logprob": -0.1300106430053711, "compression_ratio": 1.6622516556291391, "no_speech_prob": 0.0009076732094399631}, {"id": 100, "seek": 87500, "start": 890.52, "end": 899.88, "text": " so V1, so that means from vertex one, okay, there is an H, okay, one two is an H, one five is an H,", "tokens": [51140, 370, 691, 16, 11, 370, 300, 1355, 490, 28162, 472, 11, 1392, 11, 456, 307, 364, 389, 11, 1392, 11, 472, 732, 307, 364, 389, 11, 472, 1732, 307, 364, 389, 11, 51608], "temperature": 0.0, "avg_logprob": -0.1300106430053711, "compression_ratio": 1.6622516556291391, "no_speech_prob": 0.0009076732094399631}, {"id": 101, "seek": 89988, "start": 899.96, "end": 911.32, "text": " okay, one six is an H, so this is, these domain variables represent the giving graph, okay,", "tokens": [50368, 1392, 11, 472, 2309, 307, 364, 389, 11, 370, 341, 307, 11, 613, 9274, 9102, 2906, 264, 2902, 4295, 11, 1392, 11, 50936], "temperature": 0.0, "avg_logprob": -0.13763755946964412, "compression_ratio": 1.6101694915254237, "no_speech_prob": 0.00039581043529324234}, {"id": 102, "seek": 89988, "start": 912.04, "end": 920.76, "text": " and there is a built-in constraint called a circuit, okay, this one is true if, okay, the assignment", "tokens": [50972, 293, 456, 307, 257, 3094, 12, 259, 25534, 1219, 257, 9048, 11, 1392, 11, 341, 472, 307, 2074, 498, 11, 1392, 11, 264, 15187, 51408], "temperature": 0.0, "avg_logprob": -0.13763755946964412, "compression_ratio": 1.6101694915254237, "no_speech_prob": 0.00039581043529324234}, {"id": 103, "seek": 89988, "start": 921.56, "end": 928.04, "text": " forms a Hamilton cycle, all right, so we just use this, all right, so this modeling is easy,", "tokens": [51448, 6422, 257, 18484, 6586, 11, 439, 558, 11, 370, 321, 445, 764, 341, 11, 439, 558, 11, 370, 341, 15983, 307, 1858, 11, 51772], "temperature": 0.0, "avg_logprob": -0.13763755946964412, "compression_ratio": 1.6101694915254237, "no_speech_prob": 0.00039581043529324234}, {"id": 104, "seek": 92804, "start": 928.5999999999999, "end": 932.1999999999999, "text": " and then we find it, okay, find a Hamilton cycle problem,", "tokens": [50392, 293, 550, 321, 915, 309, 11, 1392, 11, 915, 257, 18484, 6586, 1154, 11, 50572], "temperature": 0.0, "avg_logprob": -0.18920199550799469, "compression_ratio": 1.7062937062937062, "no_speech_prob": 0.00023379770573228598}, {"id": 105, "seek": 92804, "start": 933.4, "end": 942.68, "text": " find a Hamilton cycle and print it out, all right, next problem is called a subset sum problem,", "tokens": [50632, 915, 257, 18484, 6586, 293, 4482, 309, 484, 11, 439, 558, 11, 958, 1154, 307, 1219, 257, 25993, 2408, 1154, 11, 51096], "temperature": 0.0, "avg_logprob": -0.18920199550799469, "compression_ratio": 1.7062937062937062, "no_speech_prob": 0.00023379770573228598}, {"id": 106, "seek": 92804, "start": 943.48, "end": 956.76, "text": " subset sum, all right, it is another well-known NP-complete problem, okay, giving a set of", "tokens": [51136, 25993, 2408, 11, 439, 558, 11, 309, 307, 1071, 731, 12, 6861, 38611, 12, 1112, 17220, 1154, 11, 1392, 11, 2902, 257, 992, 295, 51800], "temperature": 0.0, "avg_logprob": -0.18920199550799469, "compression_ratio": 1.7062937062937062, "no_speech_prob": 0.00023379770573228598}, {"id": 107, "seek": 95676, "start": 956.76, "end": 963.72, "text": " integers, okay, let's say this is a set of integers, okay, and a target number, a target number,", "tokens": [50364, 41674, 11, 1392, 11, 718, 311, 584, 341, 307, 257, 992, 295, 41674, 11, 1392, 11, 293, 257, 3779, 1230, 11, 257, 3779, 1230, 11, 50712], "temperature": 0.0, "avg_logprob": -0.11127535104751587, "compression_ratio": 1.9448275862068964, "no_speech_prob": 0.000841053610201925}, {"id": 108, "seek": 95676, "start": 964.68, "end": 973.8, "text": " okay, what do we want to do, okay, we want to find a subset, okay, find a subset whose sum,", "tokens": [50760, 1392, 11, 437, 360, 321, 528, 281, 360, 11, 1392, 11, 321, 528, 281, 915, 257, 25993, 11, 1392, 11, 915, 257, 25993, 6104, 2408, 11, 51216], "temperature": 0.0, "avg_logprob": -0.11127535104751587, "compression_ratio": 1.9448275862068964, "no_speech_prob": 0.000841053610201925}, {"id": 109, "seek": 95676, "start": 974.76, "end": 982.2, "text": " okay, equals the target number, okay, so this, well, basically this modeling for each number,", "tokens": [51264, 1392, 11, 6915, 264, 3779, 1230, 11, 1392, 11, 370, 341, 11, 731, 11, 1936, 341, 15983, 337, 1184, 1230, 11, 51636], "temperature": 0.0, "avg_logprob": -0.11127535104751587, "compression_ratio": 1.9448275862068964, "no_speech_prob": 0.000841053610201925}, {"id": 110, "seek": 98220, "start": 983.0, "end": 990.5200000000001, "text": " okay, we use a boolean variable, okay, if the variable is one, okay, that means, okay, the", "tokens": [50404, 1392, 11, 321, 764, 257, 748, 4812, 282, 7006, 11, 1392, 11, 498, 264, 7006, 307, 472, 11, 1392, 11, 300, 1355, 11, 1392, 11, 264, 50780], "temperature": 0.0, "avg_logprob": -0.12384345110724954, "compression_ratio": 1.903448275862069, "no_speech_prob": 0.002042985986918211}, {"id": 111, "seek": 98220, "start": 990.5200000000001, "end": 999.6400000000001, "text": " number is in the set, all right, otherwise, okay, it is not in the set, and we use this", "tokens": [50780, 1230, 307, 294, 264, 992, 11, 439, 558, 11, 5911, 11, 1392, 11, 309, 307, 406, 294, 264, 992, 11, 293, 321, 764, 341, 51236], "temperature": 0.0, "avg_logprob": -0.12384345110724954, "compression_ratio": 1.903448275862069, "no_speech_prob": 0.002042985986918211}, {"id": 112, "seek": 98220, "start": 999.6400000000001, "end": 1007.4000000000001, "text": " constraint, okay, to say, okay, this b times the element, okay, we use a zip, okay, so basically,", "tokens": [51236, 25534, 11, 1392, 11, 281, 584, 11, 1392, 11, 341, 272, 1413, 264, 4478, 11, 1392, 11, 321, 764, 257, 20730, 11, 1392, 11, 370, 1936, 11, 51624], "temperature": 0.0, "avg_logprob": -0.12384345110724954, "compression_ratio": 1.903448275862069, "no_speech_prob": 0.002042985986918211}, {"id": 113, "seek": 100740, "start": 1008.04, "end": 1017.88, "text": " for each variable and each integer, all right, so each variable and integer, okay, so", "tokens": [50396, 337, 1184, 7006, 293, 1184, 24922, 11, 439, 558, 11, 370, 1184, 7006, 293, 24922, 11, 1392, 11, 370, 50888], "temperature": 0.0, "avg_logprob": -0.15452860461341011, "compression_ratio": 1.9172932330827068, "no_speech_prob": 0.0017207404598593712}, {"id": 114, "seek": 100740, "start": 1020.36, "end": 1026.68, "text": " what do we do, okay, for each pair in the zip list, okay, so we add this term,", "tokens": [51012, 437, 360, 321, 360, 11, 1392, 11, 337, 1184, 6119, 294, 264, 20730, 1329, 11, 1392, 11, 370, 321, 909, 341, 1433, 11, 51328], "temperature": 0.0, "avg_logprob": -0.15452860461341011, "compression_ratio": 1.9172932330827068, "no_speech_prob": 0.0017207404598593712}, {"id": 115, "seek": 100740, "start": 1027.6399999999999, "end": 1036.52, "text": " add this term and the total, okay, the total equals the target, okay, and in this example,", "tokens": [51376, 909, 341, 1433, 293, 264, 3217, 11, 1392, 11, 264, 3217, 6915, 264, 3779, 11, 1392, 11, 293, 294, 341, 1365, 11, 51820], "temperature": 0.0, "avg_logprob": -0.15452860461341011, "compression_ratio": 1.9172932330827068, "no_speech_prob": 0.0017207404598593712}, {"id": 116, "seek": 103652, "start": 1036.6, "end": 1045.4, "text": " all right, we use the MIPS solver, okay, actually, for this type of small problems,", "tokens": [50368, 439, 558, 11, 321, 764, 264, 13696, 6273, 1404, 331, 11, 1392, 11, 767, 11, 337, 341, 2010, 295, 1359, 2740, 11, 50808], "temperature": 0.0, "avg_logprob": -0.10930014999819473, "compression_ratio": 1.585987261146497, "no_speech_prob": 0.0008501679985783994}, {"id": 117, "seek": 103652, "start": 1046.6, "end": 1054.2, "text": " it doesn't make much difference, okay, which solver you use doesn't make much difference,", "tokens": [50868, 309, 1177, 380, 652, 709, 2649, 11, 1392, 11, 597, 1404, 331, 291, 764, 1177, 380, 652, 709, 2649, 11, 51248], "temperature": 0.0, "avg_logprob": -0.10930014999819473, "compression_ratio": 1.585987261146497, "no_speech_prob": 0.0008501679985783994}, {"id": 118, "seek": 103652, "start": 1054.2, "end": 1061.32, "text": " okay, so in my computer, the CBC MIPS solver is installed, and then you can", "tokens": [51248, 1392, 11, 370, 294, 452, 3820, 11, 264, 383, 7869, 13696, 6273, 1404, 331, 307, 8899, 11, 293, 550, 291, 393, 51604], "temperature": 0.0, "avg_logprob": -0.10930014999819473, "compression_ratio": 1.585987261146497, "no_speech_prob": 0.0008501679985783994}, {"id": 119, "seek": 106132, "start": 1061.8799999999999, "end": 1072.6, "text": " tilt the system or use CBC solver, okay, as a solver option, okay, this is, all right,", "tokens": [50392, 18446, 264, 1185, 420, 764, 383, 7869, 1404, 331, 11, 1392, 11, 382, 257, 1404, 331, 3614, 11, 1392, 11, 341, 307, 11, 439, 558, 11, 50928], "temperature": 0.0, "avg_logprob": -0.15274798195317107, "compression_ratio": 1.537190082644628, "no_speech_prob": 0.002278141677379608}, {"id": 120, "seek": 106132, "start": 1072.6, "end": 1083.48, "text": " let's consider another example, okay, called a metric square, okay, this is another famous example,", "tokens": [50928, 718, 311, 1949, 1071, 1365, 11, 1392, 11, 1219, 257, 20678, 3732, 11, 1392, 11, 341, 307, 1071, 4618, 1365, 11, 51472], "temperature": 0.0, "avg_logprob": -0.15274798195317107, "compression_ratio": 1.537190082644628, "no_speech_prob": 0.002278141677379608}, {"id": 121, "seek": 108348, "start": 1083.48, "end": 1092.68, "text": " a metric square, so giving a grid, okay, in this case, it is a four by four grid,", "tokens": [50364, 257, 20678, 3732, 11, 370, 2902, 257, 10748, 11, 1392, 11, 294, 341, 1389, 11, 309, 307, 257, 1451, 538, 1451, 10748, 11, 50824], "temperature": 0.0, "avg_logprob": -0.13575788338979086, "compression_ratio": 1.767605633802817, "no_speech_prob": 0.0030707111582159996}, {"id": 122, "seek": 108348, "start": 1093.48, "end": 1103.72, "text": " all right, so what do we want to do, we want to assign a unique integer to each cell,", "tokens": [50864, 439, 558, 11, 370, 437, 360, 321, 528, 281, 360, 11, 321, 528, 281, 6269, 257, 3845, 24922, 281, 1184, 2815, 11, 51376], "temperature": 0.0, "avg_logprob": -0.13575788338979086, "compression_ratio": 1.767605633802817, "no_speech_prob": 0.0030707111582159996}, {"id": 123, "seek": 108348, "start": 1103.72, "end": 1109.48, "text": " okay, each square, each square, okay, to assign an integer from this domain to each", "tokens": [51376, 1392, 11, 1184, 3732, 11, 1184, 3732, 11, 1392, 11, 281, 6269, 364, 24922, 490, 341, 9274, 281, 1184, 51664], "temperature": 0.0, "avg_logprob": -0.13575788338979086, "compression_ratio": 1.767605633802817, "no_speech_prob": 0.0030707111582159996}, {"id": 124, "seek": 110948, "start": 1110.44, "end": 1123.48, "text": " cell, such that, okay, every row, every column, and also two of this diagonal, okay, the primary", "tokens": [50412, 2815, 11, 1270, 300, 11, 1392, 11, 633, 5386, 11, 633, 7738, 11, 293, 611, 732, 295, 341, 21539, 11, 1392, 11, 264, 6194, 51064], "temperature": 0.0, "avg_logprob": -0.15259719777990272, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.0021417541429400444}, {"id": 125, "seek": 110948, "start": 1123.48, "end": 1131.08, "text": " diagonal and the secondary diagonal, okay, all have the same sum, okay, in this case, okay, sums to", "tokens": [51064, 21539, 293, 264, 11396, 21539, 11, 1392, 11, 439, 362, 264, 912, 2408, 11, 1392, 11, 294, 341, 1389, 11, 1392, 11, 34499, 281, 51444], "temperature": 0.0, "avg_logprob": -0.15259719777990272, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.0021417541429400444}, {"id": 126, "seek": 113108, "start": 1131.08, "end": 1138.76, "text": " 34, okay, 34, so, all right, we use this, so all the entries are, okay, what do we do,", "tokens": [50364, 12790, 11, 1392, 11, 12790, 11, 370, 11, 439, 558, 11, 321, 764, 341, 11, 370, 439, 264, 23041, 366, 11, 1392, 11, 437, 360, 321, 360, 11, 50748], "temperature": 0.0, "avg_logprob": -0.15413244270984036, "compression_ratio": 1.8300653594771241, "no_speech_prob": 0.003066432662308216}, {"id": 127, "seek": 113108, "start": 1139.72, "end": 1147.08, "text": " so we have a two-dimensional array, and all the entries, okay, are variables, and the variables", "tokens": [50796, 370, 321, 362, 257, 732, 12, 18759, 10225, 11, 293, 439, 264, 23041, 11, 1392, 11, 366, 9102, 11, 293, 264, 9102, 51164], "temperature": 0.0, "avg_logprob": -0.15413244270984036, "compression_ratio": 1.8300653594771241, "no_speech_prob": 0.003066432662308216}, {"id": 128, "seek": 113108, "start": 1147.08, "end": 1155.08, "text": " have this domain from a wall to 16, and all the variables are different, right, all right, we use", "tokens": [51164, 362, 341, 9274, 490, 257, 2929, 281, 3165, 11, 293, 439, 264, 9102, 366, 819, 11, 558, 11, 439, 558, 11, 321, 764, 51564], "temperature": 0.0, "avg_logprob": -0.15413244270984036, "compression_ratio": 1.8300653594771241, "no_speech_prob": 0.003066432662308216}, {"id": 129, "seek": 115508, "start": 1155.1599999999999, "end": 1163.3999999999999, "text": " this vars, okay, vars to get, because all different expects a list of variables, and so what do we", "tokens": [50368, 341, 46130, 11, 1392, 11, 46130, 281, 483, 11, 570, 439, 819, 33280, 257, 1329, 295, 9102, 11, 293, 370, 437, 360, 321, 50780], "temperature": 0.0, "avg_logprob": -0.10580740779279227, "compression_ratio": 1.85625, "no_speech_prob": 0.0014966579619795084}, {"id": 130, "seek": 115508, "start": 1163.3999999999999, "end": 1169.96, "text": " do, we use this function vars, okay, vars takes a term, and it returns a list of variables in the", "tokens": [50780, 360, 11, 321, 764, 341, 2445, 46130, 11, 1392, 11, 46130, 2516, 257, 1433, 11, 293, 309, 11247, 257, 1329, 295, 9102, 294, 264, 51108], "temperature": 0.0, "avg_logprob": -0.10580740779279227, "compression_ratio": 1.85625, "no_speech_prob": 0.0014966579619795084}, {"id": 131, "seek": 115508, "start": 1169.96, "end": 1179.6399999999999, "text": " term, so, and then we write the constraints, okay, so for each i in this range, what do we do, okay,", "tokens": [51108, 1433, 11, 370, 11, 293, 550, 321, 2464, 264, 18491, 11, 1392, 11, 370, 337, 1184, 741, 294, 341, 3613, 11, 437, 360, 321, 360, 11, 1392, 11, 51592], "temperature": 0.0, "avg_logprob": -0.10580740779279227, "compression_ratio": 1.85625, "no_speech_prob": 0.0014966579619795084}, {"id": 132, "seek": 117964, "start": 1180.3600000000001, "end": 1188.76, "text": " every row, yeah, every row, okay, has this sum, okay, so the row i has this sum, and the column i", "tokens": [50400, 633, 5386, 11, 1338, 11, 633, 5386, 11, 1392, 11, 575, 341, 2408, 11, 1392, 11, 370, 264, 5386, 741, 575, 341, 2408, 11, 293, 264, 7738, 741, 50820], "temperature": 0.0, "avg_logprob": -0.1461930519495255, "compression_ratio": 2.1, "no_speech_prob": 0.003516582539305091}, {"id": 133, "seek": 117964, "start": 1188.76, "end": 1195.48, "text": " has this sum, and then we write the, okay, the primary diagonal, the primary diagonal,", "tokens": [50820, 575, 341, 2408, 11, 293, 550, 321, 2464, 264, 11, 1392, 11, 264, 6194, 21539, 11, 264, 6194, 21539, 11, 51156], "temperature": 0.0, "avg_logprob": -0.1461930519495255, "compression_ratio": 2.1, "no_speech_prob": 0.003516582539305091}, {"id": 134, "seek": 117964, "start": 1195.48, "end": 1203.8000000000002, "text": " and then the secondary diagonal, okay, and in this example, we use cp, for this example,", "tokens": [51156, 293, 550, 264, 11396, 21539, 11, 1392, 11, 293, 294, 341, 1365, 11, 321, 764, 269, 79, 11, 337, 341, 1365, 11, 51572], "temperature": 0.0, "avg_logprob": -0.1461930519495255, "compression_ratio": 2.1, "no_speech_prob": 0.003516582539305091}, {"id": 135, "seek": 120380, "start": 1203.8, "end": 1214.04, "text": " actually cp, the cp solver provides several modeling, okay, we call labeling strategies,", "tokens": [50364, 767, 269, 79, 11, 264, 269, 79, 1404, 331, 6417, 2940, 15983, 11, 1392, 11, 321, 818, 40244, 9029, 11, 50876], "temperature": 0.0, "avg_logprob": -0.1743487640165947, "compression_ratio": 1.6402439024390243, "no_speech_prob": 0.0017210938967764378}, {"id": 136, "seek": 120380, "start": 1214.6, "end": 1222.12, "text": " all right, for this example, all right, we use this ff called ff, first fill principle,", "tokens": [50904, 439, 558, 11, 337, 341, 1365, 11, 439, 558, 11, 321, 764, 341, 283, 69, 1219, 283, 69, 11, 700, 2836, 8665, 11, 51280], "temperature": 0.0, "avg_logprob": -0.1743487640165947, "compression_ratio": 1.6402439024390243, "no_speech_prob": 0.0017210938967764378}, {"id": 137, "seek": 120380, "start": 1223.72, "end": 1232.76, "text": " well, basically it selects domain, the smallest domain first, and then prints out the value,", "tokens": [51360, 731, 11, 1936, 309, 3048, 82, 9274, 11, 264, 16998, 9274, 700, 11, 293, 550, 22305, 484, 264, 2158, 11, 51812], "temperature": 0.0, "avg_logprob": -0.1743487640165947, "compression_ratio": 1.6402439024390243, "no_speech_prob": 0.0017210938967764378}, {"id": 138, "seek": 123276, "start": 1233.48, "end": 1237.8799999999999, "text": " so we could run this, or you can see the difference, okay, you can see", "tokens": [50400, 370, 321, 727, 1190, 341, 11, 420, 291, 393, 536, 264, 2649, 11, 1392, 11, 291, 393, 536, 50620], "temperature": 0.0, "avg_logprob": -0.13939299583435058, "compression_ratio": 1.73125, "no_speech_prob": 0.0004797180008608848}, {"id": 139, "seek": 123276, "start": 1240.84, "end": 1241.96, "text": " magic square,", "tokens": [50768, 5585, 3732, 11, 50824], "temperature": 0.0, "avg_logprob": -0.13939299583435058, "compression_ratio": 1.73125, "no_speech_prob": 0.0004797180008608848}, {"id": 140, "seek": 123276, "start": 1247.0, "end": 1252.2, "text": " okay, and also let's measure the time, all right, well, actually this is pretty faster,", "tokens": [51076, 1392, 11, 293, 611, 718, 311, 3481, 264, 565, 11, 439, 558, 11, 731, 11, 767, 341, 307, 1238, 4663, 11, 51336], "temperature": 0.0, "avg_logprob": -0.13939299583435058, "compression_ratio": 1.73125, "no_speech_prob": 0.0004797180008608848}, {"id": 141, "seek": 123276, "start": 1252.2, "end": 1260.84, "text": " okay, the cp solver is pretty faster, okay, you can change it to square, I think this is not hot enough,", "tokens": [51336, 1392, 11, 264, 269, 79, 1404, 331, 307, 1238, 4663, 11, 1392, 11, 291, 393, 1319, 309, 281, 3732, 11, 286, 519, 341, 307, 406, 2368, 1547, 11, 51768], "temperature": 0.0, "avg_logprob": -0.13939299583435058, "compression_ratio": 1.73125, "no_speech_prob": 0.0004797180008608848}, {"id": 142, "seek": 126084, "start": 1260.84, "end": 1269.48, "text": " all right, so the problem is still a toy problem, okay, so, okay, now we use set, set solver, okay,", "tokens": [50364, 439, 558, 11, 370, 264, 1154, 307, 920, 257, 12058, 1154, 11, 1392, 11, 370, 11, 1392, 11, 586, 321, 764, 992, 11, 992, 1404, 331, 11, 1392, 11, 50796], "temperature": 0.0, "avg_logprob": -0.15679348492231526, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.00030468529439531267}, {"id": 143, "seek": 126084, "start": 1269.48, "end": 1284.6799999999998, "text": " use set solver, and let's see the time, well, it takes a little bit longer, okay, why, because", "tokens": [50796, 764, 992, 1404, 331, 11, 293, 718, 311, 536, 264, 565, 11, 731, 11, 309, 2516, 257, 707, 857, 2854, 11, 1392, 11, 983, 11, 570, 51556], "temperature": 0.0, "avg_logprob": -0.15679348492231526, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.00030468529439531267}, {"id": 144, "seek": 128468, "start": 1284.68, "end": 1293.0, "text": " set solvers are not normally not good at handling numbers, but this one is okay, okay, in general", "tokens": [50364, 992, 1404, 840, 366, 406, 5646, 406, 665, 412, 13175, 3547, 11, 457, 341, 472, 307, 1392, 11, 1392, 11, 294, 2674, 50780], "temperature": 0.0, "avg_logprob": -0.12954256269666883, "compression_ratio": 1.5934959349593496, "no_speech_prob": 0.0008136556716635823}, {"id": 145, "seek": 128468, "start": 1294.1200000000001, "end": 1305.5600000000002, "text": " set solvers, actually I have found that the set solver outperforms the cp solver, okay, in general", "tokens": [50836, 992, 1404, 840, 11, 767, 286, 362, 1352, 300, 264, 992, 1404, 331, 484, 26765, 82, 264, 269, 79, 1404, 331, 11, 1392, 11, 294, 2674, 51408], "temperature": 0.0, "avg_logprob": -0.12954256269666883, "compression_ratio": 1.5934959349593496, "no_speech_prob": 0.0008136556716635823}, {"id": 146, "seek": 130556, "start": 1305.6399999999999, "end": 1314.9199999999998, "text": " case, so if you have time, okay, and unless the time limit is really, really small, all right,", "tokens": [50368, 1389, 11, 370, 498, 291, 362, 565, 11, 1392, 11, 293, 5969, 264, 565, 4948, 307, 534, 11, 534, 1359, 11, 439, 558, 11, 50832], "temperature": 0.0, "avg_logprob": -0.15661842639629658, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0026651357766240835}, {"id": 147, "seek": 130556, "start": 1314.9199999999998, "end": 1321.8, "text": " the cp solver, all the problem is really small, or you have some problem specific", "tokens": [50832, 264, 269, 79, 1404, 331, 11, 439, 264, 1154, 307, 534, 1359, 11, 420, 291, 362, 512, 1154, 2685, 51176], "temperature": 0.0, "avg_logprob": -0.15661842639629658, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0026651357766240835}, {"id": 148, "seek": 130556, "start": 1323.1599999999999, "end": 1330.36, "text": " labeling strategies, okay, otherwise the set solver is pretty efficient,", "tokens": [51244, 40244, 9029, 11, 1392, 11, 5911, 264, 992, 1404, 331, 307, 1238, 7148, 11, 51604], "temperature": 0.0, "avg_logprob": -0.15661842639629658, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0026651357766240835}, {"id": 149, "seek": 133036, "start": 1330.84, "end": 1337.32, "text": " all right, the next example is called a sudoku puzzle, that's a very famous", "tokens": [50388, 439, 558, 11, 264, 958, 1365, 307, 1219, 257, 3707, 13275, 12805, 11, 300, 311, 257, 588, 4618, 50712], "temperature": 0.0, "avg_logprob": -0.22607672704409246, "compression_ratio": 1.6168831168831168, "no_speech_prob": 0.0023396185133606195}, {"id": 150, "seek": 133036, "start": 1338.84, "end": 1348.28, "text": " puzzle, a lot of people, okay, play it for the sudoku, so this one giving a grade, again,", "tokens": [50788, 12805, 11, 257, 688, 295, 561, 11, 1392, 11, 862, 309, 337, 264, 3707, 13275, 11, 370, 341, 472, 2902, 257, 7204, 11, 797, 11, 51260], "temperature": 0.0, "avg_logprob": -0.22607672704409246, "compression_ratio": 1.6168831168831168, "no_speech_prob": 0.0023396185133606195}, {"id": 151, "seek": 133036, "start": 1348.28, "end": 1354.9199999999998, "text": " giving a grade, okay, so in this case it depends on the size of the grid, let's say", "tokens": [51260, 2902, 257, 7204, 11, 1392, 11, 370, 294, 341, 1389, 309, 5946, 322, 264, 2744, 295, 264, 10748, 11, 718, 311, 584, 51592], "temperature": 0.0, "avg_logprob": -0.22607672704409246, "compression_ratio": 1.6168831168831168, "no_speech_prob": 0.0023396185133606195}, {"id": 152, "seek": 135492, "start": 1355.8000000000002, "end": 1366.44, "text": " this is 25 by 25 grade, so what do we want to do, we want to assign the numbers, yeah,", "tokens": [50408, 341, 307, 3552, 538, 3552, 7204, 11, 370, 437, 360, 321, 528, 281, 360, 11, 321, 528, 281, 6269, 264, 3547, 11, 1338, 11, 50940], "temperature": 0.0, "avg_logprob": -0.17785754697076206, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.004123703110963106}, {"id": 153, "seek": 135492, "start": 1366.44, "end": 1381.64, "text": " numbers from 1 to 25, okay, to the, to the, to the sales, okay, such that, okay, every row has", "tokens": [50940, 3547, 490, 502, 281, 3552, 11, 1392, 11, 281, 264, 11, 281, 264, 11, 281, 264, 5763, 11, 1392, 11, 1270, 300, 11, 1392, 11, 633, 5386, 575, 51700], "temperature": 0.0, "avg_logprob": -0.17785754697076206, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.004123703110963106}, {"id": 154, "seek": 138164, "start": 1381.64, "end": 1388.6000000000001, "text": " different numbers, every column has different numbers, and also every small square, okay,", "tokens": [50364, 819, 3547, 11, 633, 7738, 575, 819, 3547, 11, 293, 611, 633, 1359, 3732, 11, 1392, 11, 50712], "temperature": 0.0, "avg_logprob": -0.11134296739605111, "compression_ratio": 2.106060606060606, "no_speech_prob": 0.003020176198333502}, {"id": 155, "seek": 138164, "start": 1388.6000000000001, "end": 1395.64, "text": " this is a small square, in this case every five by five, okay, every five by five small squares", "tokens": [50712, 341, 307, 257, 1359, 3732, 11, 294, 341, 1389, 633, 1732, 538, 1732, 11, 1392, 11, 633, 1732, 538, 1732, 1359, 19368, 51064], "temperature": 0.0, "avg_logprob": -0.11134296739605111, "compression_ratio": 2.106060606060606, "no_speech_prob": 0.003020176198333502}, {"id": 156, "seek": 138164, "start": 1395.64, "end": 1403.48, "text": " also have, also has different numbers, so, and modeling, okay, what do we do, okay, we first", "tokens": [51064, 611, 362, 11, 611, 575, 819, 3547, 11, 370, 11, 293, 15983, 11, 1392, 11, 437, 360, 321, 360, 11, 1392, 11, 321, 700, 51456], "temperature": 0.0, "avg_logprob": -0.11134296739605111, "compression_ratio": 2.106060606060606, "no_speech_prob": 0.003020176198333502}, {"id": 157, "seek": 140348, "start": 1403.48, "end": 1411.88, "text": " fetch this array, this is a grid, all right, basically there are prefilled entries,", "tokens": [50364, 23673, 341, 10225, 11, 341, 307, 257, 10748, 11, 439, 558, 11, 1936, 456, 366, 18417, 6261, 23041, 11, 50784], "temperature": 0.0, "avg_logprob": -0.14494142903910054, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.005202931351959705}, {"id": 158, "seek": 140348, "start": 1411.88, "end": 1419.16, "text": " prefilled entries, and the underscores are blanks, okay, these are the blanks, and the solver", "tokens": [50784, 18417, 6261, 23041, 11, 293, 264, 16692, 66, 2706, 366, 8247, 82, 11, 1392, 11, 613, 366, 264, 8247, 82, 11, 293, 264, 1404, 331, 51148], "temperature": 0.0, "avg_logprob": -0.14494142903910054, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.005202931351959705}, {"id": 159, "seek": 140348, "start": 1420.04, "end": 1429.96, "text": " will fill in the blanks, so the domain of the variables is from 1, okay, to n, and then we", "tokens": [51192, 486, 2836, 294, 264, 8247, 82, 11, 370, 264, 9274, 295, 264, 9102, 307, 490, 502, 11, 1392, 11, 281, 297, 11, 293, 550, 321, 51688], "temperature": 0.0, "avg_logprob": -0.14494142903910054, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.005202931351959705}, {"id": 160, "seek": 142996, "start": 1429.96, "end": 1437.16, "text": " write the constraints, so for each row, and for each row, okay, all the numbers in the row are", "tokens": [50364, 2464, 264, 18491, 11, 370, 337, 1184, 5386, 11, 293, 337, 1184, 5386, 11, 1392, 11, 439, 264, 3547, 294, 264, 5386, 366, 50724], "temperature": 0.0, "avg_logprob": -0.08074580298529731, "compression_ratio": 2.2363636363636363, "no_speech_prob": 0.004250268451869488}, {"id": 161, "seek": 142996, "start": 1437.16, "end": 1443.64, "text": " different, and for each column, and all the numbers in the column are different, all right,", "tokens": [50724, 819, 11, 293, 337, 1184, 7738, 11, 293, 439, 264, 3547, 294, 264, 7738, 366, 819, 11, 439, 558, 11, 51048], "temperature": 0.0, "avg_logprob": -0.08074580298529731, "compression_ratio": 2.2363636363636363, "no_speech_prob": 0.004250268451869488}, {"id": 162, "seek": 142996, "start": 1443.64, "end": 1450.2, "text": " so what do we do, how to get the column, how to get the column, we use list comprehension", "tokens": [51048, 370, 437, 360, 321, 360, 11, 577, 281, 483, 264, 7738, 11, 577, 281, 483, 264, 7738, 11, 321, 764, 1329, 44991, 51376], "temperature": 0.0, "avg_logprob": -0.08074580298529731, "compression_ratio": 2.2363636363636363, "no_speech_prob": 0.004250268451869488}, {"id": 163, "seek": 142996, "start": 1451.0, "end": 1457.72, "text": " to retrieve all the entries, okay, in column, in this column, okay, so for each row in this,", "tokens": [51416, 281, 30254, 439, 264, 23041, 11, 1392, 11, 294, 7738, 11, 294, 341, 7738, 11, 1392, 11, 370, 337, 1184, 5386, 294, 341, 11, 51752], "temperature": 0.0, "avg_logprob": -0.08074580298529731, "compression_ratio": 2.2363636363636363, "no_speech_prob": 0.004250268451869488}, {"id": 164, "seek": 145772, "start": 1458.44, "end": 1465.56, "text": " and we get, okay, row column, and then we get the small square, okay, all the small squares", "tokens": [50400, 293, 321, 483, 11, 1392, 11, 5386, 7738, 11, 293, 550, 321, 483, 264, 1359, 3732, 11, 1392, 11, 439, 264, 1359, 19368, 50756], "temperature": 0.0, "avg_logprob": -0.09098946175924162, "compression_ratio": 2.020979020979021, "no_speech_prob": 0.0004942582454532385}, {"id": 165, "seek": 145772, "start": 1465.56, "end": 1472.52, "text": " constrain the entries of each of the small squares, okay, the dimension of the small square is this,", "tokens": [50756, 1817, 7146, 264, 23041, 295, 1184, 295, 264, 1359, 19368, 11, 1392, 11, 264, 10139, 295, 264, 1359, 3732, 307, 341, 11, 51104], "temperature": 0.0, "avg_logprob": -0.09098946175924162, "compression_ratio": 2.020979020979021, "no_speech_prob": 0.0004942582454532385}, {"id": 166, "seek": 145772, "start": 1472.52, "end": 1482.52, "text": " okay, so keeping n, so if n is 25, then m is five, and then we write this, okay, for each of the", "tokens": [51104, 1392, 11, 370, 5145, 297, 11, 370, 498, 297, 307, 3552, 11, 550, 275, 307, 1732, 11, 293, 550, 321, 2464, 341, 11, 1392, 11, 337, 1184, 295, 264, 51604], "temperature": 0.0, "avg_logprob": -0.09098946175924162, "compression_ratio": 2.020979020979021, "no_speech_prob": 0.0004942582454532385}, {"id": 167, "seek": 148252, "start": 1482.52, "end": 1489.0, "text": " small squares, okay, basically this row column, this is the starting row number, and the starting", "tokens": [50364, 1359, 19368, 11, 1392, 11, 1936, 341, 5386, 7738, 11, 341, 307, 264, 2891, 5386, 1230, 11, 293, 264, 2891, 50688], "temperature": 0.0, "avg_logprob": -0.12078378576981394, "compression_ratio": 2.0264550264550265, "no_speech_prob": 0.0008279549656435847}, {"id": 168, "seek": 148252, "start": 1489.0, "end": 1496.28, "text": " column number of each of the small square, and then we, okay, get all the entries in the small", "tokens": [50688, 7738, 1230, 295, 1184, 295, 264, 1359, 3732, 11, 293, 550, 321, 11, 1392, 11, 483, 439, 264, 23041, 294, 264, 1359, 51052], "temperature": 0.0, "avg_logprob": -0.12078378576981394, "compression_ratio": 2.0264550264550265, "no_speech_prob": 0.0008279549656435847}, {"id": 169, "seek": 148252, "start": 1496.28, "end": 1503.24, "text": " square, okay, using list comprehension, and then we say, okay, all the small squares are different,", "tokens": [51052, 3732, 11, 1392, 11, 1228, 1329, 44991, 11, 293, 550, 321, 584, 11, 1392, 11, 439, 264, 1359, 19368, 366, 819, 11, 51400], "temperature": 0.0, "avg_logprob": -0.12078378576981394, "compression_ratio": 2.0264550264550265, "no_speech_prob": 0.0008279549656435847}, {"id": 170, "seek": 148252, "start": 1503.24, "end": 1510.6, "text": " and then solve, all right, this one uses a set, actually set is extremely efficient, okay,", "tokens": [51400, 293, 550, 5039, 11, 439, 558, 11, 341, 472, 4960, 257, 992, 11, 767, 992, 307, 4664, 7148, 11, 1392, 11, 51768], "temperature": 0.0, "avg_logprob": -0.12078378576981394, "compression_ratio": 2.0264550264550265, "no_speech_prob": 0.0008279549656435847}, {"id": 171, "seek": 151060, "start": 1510.6799999999998, "end": 1520.84, "text": " for a problem like a sudoku, okay, so, well, you see this is 25 by 25, okay, it's a pretty hard", "tokens": [50368, 337, 257, 1154, 411, 257, 459, 2595, 5279, 11, 1392, 11, 370, 11, 731, 11, 291, 536, 341, 307, 3552, 538, 3552, 11, 1392, 11, 309, 311, 257, 1238, 1152, 50876], "temperature": 0.0, "avg_logprob": -0.21985790806431924, "compression_ratio": 1.496124031007752, "no_speech_prob": 0.0068317074328660965}, {"id": 172, "seek": 151060, "start": 1520.84, "end": 1533.08, "text": " problem, all right, you see this sudoku, again, time, measure the time, oops, something is wrong,", "tokens": [50876, 1154, 11, 439, 558, 11, 291, 536, 341, 459, 2595, 5279, 11, 797, 11, 565, 11, 3481, 264, 565, 11, 34166, 11, 746, 307, 2085, 11, 51488], "temperature": 0.0, "avg_logprob": -0.21985790806431924, "compression_ratio": 1.496124031007752, "no_speech_prob": 0.0068317074328660965}, {"id": 173, "seek": 153308, "start": 1533.08, "end": 1547.1599999999999, "text": " oh, sudoku, okay, I don't think I did a good preparation,", "tokens": [50364, 1954, 11, 459, 2595, 5279, 11, 1392, 11, 286, 500, 380, 519, 286, 630, 257, 665, 13081, 11, 51068], "temperature": 0.0, "avg_logprob": -0.13388800134464185, "compression_ratio": 1.3584905660377358, "no_speech_prob": 0.004431210458278656}, {"id": 174, "seek": 153308, "start": 1548.4399999999998, "end": 1556.28, "text": " this one is not supposed to be there, so let's run it again, sudoku, okay, it came out", "tokens": [51132, 341, 472, 307, 406, 3442, 281, 312, 456, 11, 370, 718, 311, 1190, 309, 797, 11, 459, 2595, 5279, 11, 1392, 11, 309, 1361, 484, 51524], "temperature": 0.0, "avg_logprob": -0.13388800134464185, "compression_ratio": 1.3584905660377358, "no_speech_prob": 0.004431210458278656}, {"id": 175, "seek": 155628, "start": 1556.28, "end": 1565.08, "text": " instantly, well, you could try other solvers, so in general, for a problem, okay, normally you", "tokens": [50364, 13518, 11, 731, 11, 291, 727, 853, 661, 1404, 840, 11, 370, 294, 2674, 11, 337, 257, 1154, 11, 1392, 11, 5646, 291, 50804], "temperature": 0.0, "avg_logprob": -0.12375664951825383, "compression_ratio": 1.855, "no_speech_prob": 0.009239818900823593}, {"id": 176, "seek": 155628, "start": 1565.08, "end": 1570.76, "text": " don't know which solver performs the best, so what do you need to do, you need to do experiment,", "tokens": [50804, 500, 380, 458, 597, 1404, 331, 26213, 264, 1151, 11, 370, 437, 360, 291, 643, 281, 360, 11, 291, 643, 281, 360, 5120, 11, 51088], "temperature": 0.0, "avg_logprob": -0.12375664951825383, "compression_ratio": 1.855, "no_speech_prob": 0.009239818900823593}, {"id": 177, "seek": 155628, "start": 1570.76, "end": 1578.36, "text": " all right, well, since in pocket, okay, you can write the same model and experiment with", "tokens": [51088, 439, 558, 11, 731, 11, 1670, 294, 8963, 11, 1392, 11, 291, 393, 2464, 264, 912, 2316, 293, 5120, 365, 51468], "temperature": 0.0, "avg_logprob": -0.12375664951825383, "compression_ratio": 1.855, "no_speech_prob": 0.009239818900823593}, {"id": 178, "seek": 155628, "start": 1578.36, "end": 1584.28, "text": " different solvers, okay, what do you need to do, you just need to input a different model,", "tokens": [51468, 819, 1404, 840, 11, 1392, 11, 437, 360, 291, 643, 281, 360, 11, 291, 445, 643, 281, 4846, 257, 819, 2316, 11, 51764], "temperature": 0.0, "avg_logprob": -0.12375664951825383, "compression_ratio": 1.855, "no_speech_prob": 0.009239818900823593}, {"id": 179, "seek": 158428, "start": 1584.92, "end": 1588.44, "text": " okay, so you can switch from one solver to another solver,", "tokens": [50396, 1392, 11, 370, 291, 393, 3679, 490, 472, 1404, 331, 281, 1071, 1404, 331, 11, 50572], "temperature": 0.0, "avg_logprob": -0.18972639786569695, "compression_ratio": 1.7435897435897436, "no_speech_prob": 0.0008797468617558479}, {"id": 180, "seek": 158428, "start": 1588.44, "end": 1596.12, "text": " seamlessly, all right, let's consider one more problem, okay, this is called a Inquins problem,", "tokens": [50572, 38083, 11, 439, 558, 11, 718, 311, 1949, 472, 544, 1154, 11, 1392, 11, 341, 307, 1219, 257, 682, 358, 1292, 1154, 11, 50956], "temperature": 0.0, "avg_logprob": -0.18972639786569695, "compression_ratio": 1.7435897435897436, "no_speech_prob": 0.0008797468617558479}, {"id": 181, "seek": 158428, "start": 1597.24, "end": 1604.52, "text": " Inquins, okay, this is a very famous problem, Inquins, okay, so giving originally it is 8 by 8,", "tokens": [51012, 682, 358, 1292, 11, 1392, 11, 341, 307, 257, 588, 4618, 1154, 11, 682, 358, 1292, 11, 1392, 11, 370, 2902, 7993, 309, 307, 1649, 538, 1649, 11, 51376], "temperature": 0.0, "avg_logprob": -0.18972639786569695, "compression_ratio": 1.7435897435897436, "no_speech_prob": 0.0008797468617558479}, {"id": 182, "seek": 158428, "start": 1605.72, "end": 1612.04, "text": " so 8 by 8 is not interesting, computationally interesting, because it's a search space is", "tokens": [51436, 370, 1649, 538, 1649, 307, 406, 1880, 11, 24903, 379, 1880, 11, 570, 309, 311, 257, 3164, 1901, 307, 51752], "temperature": 0.0, "avg_logprob": -0.18972639786569695, "compression_ratio": 1.7435897435897436, "no_speech_prob": 0.0008797468617558479}, {"id": 183, "seek": 161204, "start": 1612.04, "end": 1621.0, "text": " not big enough for experiment, so in general it's 8 by 8, okay, so giving 8 by 8 grid, okay,", "tokens": [50364, 406, 955, 1547, 337, 5120, 11, 370, 294, 2674, 309, 311, 1649, 538, 1649, 11, 1392, 11, 370, 2902, 1649, 538, 1649, 10748, 11, 1392, 11, 50812], "temperature": 0.0, "avg_logprob": -0.1750488026936849, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.0008111822535283864}, {"id": 184, "seek": 161204, "start": 1621.0, "end": 1630.2, "text": " you won't put 8 queen pieces on the board, such that, okay, no two queens attack each other,", "tokens": [50812, 291, 1582, 380, 829, 1649, 12206, 3755, 322, 264, 3150, 11, 1270, 300, 11, 1392, 11, 572, 732, 42017, 2690, 1184, 661, 11, 51272], "temperature": 0.0, "avg_logprob": -0.1750488026936849, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.0008111822535283864}, {"id": 185, "seek": 161204, "start": 1630.76, "end": 1637.3999999999999, "text": " okay, you know, in chess, how the queen piece moves, the queen basically combines", "tokens": [51300, 1392, 11, 291, 458, 11, 294, 24122, 11, 577, 264, 12206, 2522, 6067, 11, 264, 12206, 1936, 29520, 51632], "temperature": 0.0, "avg_logprob": -0.1750488026936849, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.0008111822535283864}, {"id": 186, "seek": 163740, "start": 1637.8000000000002, "end": 1646.0400000000002, "text": " the movement of the rock and the movement of the bishop, so a queen can move horizontally,", "tokens": [50384, 264, 3963, 295, 264, 3727, 293, 264, 3963, 295, 264, 34470, 11, 370, 257, 12206, 393, 1286, 33796, 11, 50796], "temperature": 0.0, "avg_logprob": -0.11863488139528217, "compression_ratio": 1.7655172413793103, "no_speech_prob": 0.003977494779974222}, {"id": 187, "seek": 163740, "start": 1646.6000000000001, "end": 1653.24, "text": " vertically, and diagonally, okay, so that means, okay, two queens attack each other,", "tokens": [50824, 28450, 11, 293, 17405, 379, 11, 1392, 11, 370, 300, 1355, 11, 1392, 11, 732, 42017, 2690, 1184, 661, 11, 51156], "temperature": 0.0, "avg_logprob": -0.11863488139528217, "compression_ratio": 1.7655172413793103, "no_speech_prob": 0.003977494779974222}, {"id": 188, "seek": 163740, "start": 1653.24, "end": 1660.0400000000002, "text": " if two queens are placed in the same row, the same column, or the same diagonal,", "tokens": [51156, 498, 732, 42017, 366, 7074, 294, 264, 912, 5386, 11, 264, 912, 7738, 11, 420, 264, 912, 21539, 11, 51496], "temperature": 0.0, "avg_logprob": -0.11863488139528217, "compression_ratio": 1.7655172413793103, "no_speech_prob": 0.003977494779974222}, {"id": 189, "seek": 166004, "start": 1660.92, "end": 1666.92, "text": " all right, so here is, we have two different models for this, okay, one is,", "tokens": [50408, 439, 558, 11, 370, 510, 307, 11, 321, 362, 732, 819, 5245, 337, 341, 11, 1392, 11, 472, 307, 11, 50708], "temperature": 0.0, "avg_logprob": -0.1632842896859857, "compression_ratio": 1.7517241379310344, "no_speech_prob": 0.003257493022829294}, {"id": 190, "seek": 166004, "start": 1669.8799999999999, "end": 1677.72, "text": " this is, all right, so what do we do, okay, for each, well, let's say for each row,", "tokens": [50856, 341, 307, 11, 439, 558, 11, 370, 437, 360, 321, 360, 11, 1392, 11, 337, 1184, 11, 731, 11, 718, 311, 584, 337, 1184, 5386, 11, 51248], "temperature": 0.0, "avg_logprob": -0.1632842896859857, "compression_ratio": 1.7517241379310344, "no_speech_prob": 0.003257493022829294}, {"id": 191, "seek": 166004, "start": 1679.0, "end": 1689.1599999999999, "text": " we use a variable, okay, we use one variable, Q, so there are in rows, so we use in variables,", "tokens": [51312, 321, 764, 257, 7006, 11, 1392, 11, 321, 764, 472, 7006, 11, 1249, 11, 370, 456, 366, 294, 13241, 11, 370, 321, 764, 294, 9102, 11, 51820], "temperature": 0.0, "avg_logprob": -0.1632842896859857, "compression_ratio": 1.7517241379310344, "no_speech_prob": 0.003257493022829294}, {"id": 192, "seek": 169004, "start": 1690.04, "end": 1696.04, "text": " and all the variables, okay, each of the variables gives a column number, yeah, column number,", "tokens": [50364, 293, 439, 264, 9102, 11, 1392, 11, 1184, 295, 264, 9102, 2709, 257, 7738, 1230, 11, 1338, 11, 7738, 1230, 11, 50664], "temperature": 0.0, "avg_logprob": -0.08567346226085316, "compression_ratio": 1.9452054794520548, "no_speech_prob": 0.000672119262162596}, {"id": 193, "seek": 169004, "start": 1697.0, "end": 1705.32, "text": " so that means Q1, all right, gives a column number of the first queen, and Q2 gives a column number", "tokens": [50712, 370, 300, 1355, 1249, 16, 11, 439, 558, 11, 2709, 257, 7738, 1230, 295, 264, 700, 12206, 11, 293, 1249, 17, 2709, 257, 7738, 1230, 51128], "temperature": 0.0, "avg_logprob": -0.08567346226085316, "compression_ratio": 1.9452054794520548, "no_speech_prob": 0.000672119262162596}, {"id": 194, "seek": 169004, "start": 1705.32, "end": 1711.72, "text": " of the second queen, and so on, all right, so now we need to write the constraints, okay,", "tokens": [51128, 295, 264, 1150, 12206, 11, 293, 370, 322, 11, 439, 558, 11, 370, 586, 321, 643, 281, 2464, 264, 18491, 11, 1392, 11, 51448], "temperature": 0.0, "avg_logprob": -0.08567346226085316, "compression_ratio": 1.9452054794520548, "no_speech_prob": 0.000672119262162596}, {"id": 195, "seek": 171172, "start": 1711.72, "end": 1722.04, "text": " new two queens are in the same column, so Qi for each pair, ij, and Qi, okay, not equal, okay,", "tokens": [50364, 777, 732, 42017, 366, 294, 264, 912, 7738, 11, 370, 1249, 72, 337, 1184, 6119, 11, 741, 73, 11, 293, 1249, 72, 11, 1392, 11, 406, 2681, 11, 1392, 11, 50880], "temperature": 0.0, "avg_logprob": -0.11948262813479402, "compression_ratio": 1.8657718120805369, "no_speech_prob": 0.004813038744032383}, {"id": 196, "seek": 171172, "start": 1722.04, "end": 1733.0, "text": " Qj, and also, not in the same diagonal, yeah, okay, not in, not in a diagonal, that is parallel", "tokens": [50880, 1249, 73, 11, 293, 611, 11, 406, 294, 264, 912, 21539, 11, 1338, 11, 1392, 11, 406, 294, 11, 406, 294, 257, 21539, 11, 300, 307, 8952, 51428], "temperature": 0.0, "avg_logprob": -0.11948262813479402, "compression_ratio": 1.8657718120805369, "no_speech_prob": 0.004813038744032383}, {"id": 197, "seek": 171172, "start": 1733.0, "end": 1740.84, "text": " to the primary diagonal, okay, so this one, use this constraint, and not in a diagonal,", "tokens": [51428, 281, 264, 6194, 21539, 11, 1392, 11, 370, 341, 472, 11, 764, 341, 25534, 11, 293, 406, 294, 257, 21539, 11, 51820], "temperature": 0.0, "avg_logprob": -0.11948262813479402, "compression_ratio": 1.8657718120805369, "no_speech_prob": 0.004813038744032383}, {"id": 198, "seek": 174084, "start": 1740.84, "end": 1748.04, "text": " that is parallel to the secondary diagonal, and then, okay, so this is the constraint,", "tokens": [50364, 300, 307, 8952, 281, 264, 11396, 21539, 11, 293, 550, 11, 1392, 11, 370, 341, 307, 264, 25534, 11, 50724], "temperature": 0.0, "avg_logprob": -0.17733042769961888, "compression_ratio": 1.5808383233532934, "no_speech_prob": 0.0018917907727882266}, {"id": 199, "seek": 174084, "start": 1748.04, "end": 1755.9599999999998, "text": " and then we use FF, actually for this one, the first pair, first pair of principles, this FF", "tokens": [50724, 293, 550, 321, 764, 479, 37, 11, 767, 337, 341, 472, 11, 264, 700, 6119, 11, 700, 6119, 295, 9156, 11, 341, 479, 37, 51120], "temperature": 0.0, "avg_logprob": -0.17733042769961888, "compression_ratio": 1.5808383233532934, "no_speech_prob": 0.0018917907727882266}, {"id": 200, "seek": 174084, "start": 1755.9599999999998, "end": 1770.4399999999998, "text": " labeling strategy works very well, and we can say, okay, time, queens, all right, so", "tokens": [51120, 40244, 5206, 1985, 588, 731, 11, 293, 321, 393, 584, 11, 1392, 11, 565, 11, 42017, 11, 439, 558, 11, 370, 51844], "temperature": 0.0, "avg_logprob": -0.17733042769961888, "compression_ratio": 1.5808383233532934, "no_speech_prob": 0.0018917907727882266}, {"id": 201, "seek": 177044, "start": 1770.44, "end": 1778.44, "text": " by default, it solves 100 queens, all right, comes out instantly, and we can try 1000 queens,", "tokens": [50364, 538, 7576, 11, 309, 39890, 2319, 42017, 11, 439, 558, 11, 1487, 484, 13518, 11, 293, 321, 393, 853, 9714, 42017, 11, 50764], "temperature": 0.0, "avg_logprob": -0.13051331744474523, "compression_ratio": 1.6549295774647887, "no_speech_prob": 0.0007029506959952414}, {"id": 202, "seek": 177044, "start": 1779.4, "end": 1783.96, "text": " so 1000, wait, maybe it takes several seconds,", "tokens": [50812, 370, 9714, 11, 1699, 11, 1310, 309, 2516, 2940, 3949, 11, 51040], "temperature": 0.0, "avg_logprob": -0.13051331744474523, "compression_ratio": 1.6549295774647887, "no_speech_prob": 0.0007029506959952414}, {"id": 203, "seek": 177044, "start": 1790.3600000000001, "end": 1796.3600000000001, "text": " oh, it's still, oh, okay, so it takes 10 seconds, about 10 seconds, all right, so 1000 queens,", "tokens": [51360, 1954, 11, 309, 311, 920, 11, 1954, 11, 1392, 11, 370, 309, 2516, 1266, 3949, 11, 466, 1266, 3949, 11, 439, 558, 11, 370, 9714, 42017, 11, 51660], "temperature": 0.0, "avg_logprob": -0.13051331744474523, "compression_ratio": 1.6549295774647887, "no_speech_prob": 0.0007029506959952414}, {"id": 204, "seek": 179636, "start": 1797.08, "end": 1801.32, "text": " all right, let's consider another model, all right, this is, we call,", "tokens": [50400, 439, 558, 11, 718, 311, 1949, 1071, 2316, 11, 439, 558, 11, 341, 307, 11, 321, 818, 11, 50612], "temperature": 0.0, "avg_logprob": -0.13873714870876735, "compression_ratio": 1.6950354609929077, "no_speech_prob": 0.000509399629663676}, {"id": 205, "seek": 179636, "start": 1804.12, "end": 1813.8, "text": " okay, in this model, so for each cell, we use a variable, a boolean variable,", "tokens": [50752, 1392, 11, 294, 341, 2316, 11, 370, 337, 1184, 2815, 11, 321, 764, 257, 7006, 11, 257, 748, 4812, 282, 7006, 11, 51236], "temperature": 0.0, "avg_logprob": -0.13873714870876735, "compression_ratio": 1.6950354609929077, "no_speech_prob": 0.000509399629663676}, {"id": 206, "seek": 179636, "start": 1813.8, "end": 1819.8, "text": " good, so the boolean variable, if the variable is zero, that means there is no queen, okay,", "tokens": [51236, 665, 11, 370, 264, 748, 4812, 282, 7006, 11, 498, 264, 7006, 307, 4018, 11, 300, 1355, 456, 307, 572, 12206, 11, 1392, 11, 51536], "temperature": 0.0, "avg_logprob": -0.13873714870876735, "compression_ratio": 1.6950354609929077, "no_speech_prob": 0.000509399629663676}, {"id": 207, "seek": 181980, "start": 1819.8, "end": 1828.76, "text": " put on that cell, if the variable is one, that means, okay, there is a queen, okay, at that cell,", "tokens": [50364, 829, 322, 300, 2815, 11, 498, 264, 7006, 307, 472, 11, 300, 1355, 11, 1392, 11, 456, 307, 257, 12206, 11, 1392, 11, 412, 300, 2815, 11, 50812], "temperature": 0.0, "avg_logprob": -0.12575458344959078, "compression_ratio": 1.80625, "no_speech_prob": 0.002708155894652009}, {"id": 208, "seek": 181980, "start": 1829.48, "end": 1837.8, "text": " and so then we create n by n, okay, in square variables, and all the variables are boolean,", "tokens": [50848, 293, 370, 550, 321, 1884, 297, 538, 297, 11, 1392, 11, 294, 3732, 9102, 11, 293, 439, 264, 9102, 366, 748, 4812, 282, 11, 51264], "temperature": 0.0, "avg_logprob": -0.12575458344959078, "compression_ratio": 1.80625, "no_speech_prob": 0.002708155894652009}, {"id": 209, "seek": 181980, "start": 1838.6, "end": 1844.76, "text": " and then we write the constraints, all right, so for each, okay, also for, of course, for this type", "tokens": [51304, 293, 550, 321, 2464, 264, 18491, 11, 439, 558, 11, 370, 337, 1184, 11, 1392, 11, 611, 337, 11, 295, 1164, 11, 337, 341, 2010, 51612], "temperature": 0.0, "avg_logprob": -0.12575458344959078, "compression_ratio": 1.80625, "no_speech_prob": 0.002708155894652009}, {"id": 210, "seek": 184476, "start": 1844.84, "end": 1852.12, "text": " of problems, then we should use set, all right, CP servers, okay, in general are not good at dealing", "tokens": [50368, 295, 2740, 11, 550, 321, 820, 764, 992, 11, 439, 558, 11, 22431, 15909, 11, 1392, 11, 294, 2674, 366, 406, 665, 412, 6260, 50732], "temperature": 0.0, "avg_logprob": -0.12053066492080688, "compression_ratio": 1.7251461988304093, "no_speech_prob": 0.0032482370734214783}, {"id": 211, "seek": 184476, "start": 1852.12, "end": 1862.36, "text": " with zero one variables, all right, so for, we make sure, okay, each row has exactly one queen,", "tokens": [50732, 365, 4018, 472, 9102, 11, 439, 558, 11, 370, 337, 11, 321, 652, 988, 11, 1392, 11, 1184, 5386, 575, 2293, 472, 12206, 11, 51244], "temperature": 0.0, "avg_logprob": -0.12053066492080688, "compression_ratio": 1.7251461988304093, "no_speech_prob": 0.0032482370734214783}, {"id": 212, "seek": 184476, "start": 1863.24, "end": 1872.84, "text": " okay, and each column has exactly one queen, okay, and then we also, okay, constrain the diagonal,", "tokens": [51288, 1392, 11, 293, 1184, 7738, 575, 2293, 472, 12206, 11, 1392, 11, 293, 550, 321, 611, 11, 1392, 11, 1817, 7146, 264, 21539, 11, 51768], "temperature": 0.0, "avg_logprob": -0.12053066492080688, "compression_ratio": 1.7251461988304093, "no_speech_prob": 0.0032482370734214783}, {"id": 213, "seek": 187284, "start": 1873.6399999999999, "end": 1882.1999999999998, "text": " diagonal, for this diagonals, these are all the diagonals that are parallel to the,", "tokens": [50404, 21539, 11, 337, 341, 17405, 1124, 11, 613, 366, 439, 264, 17405, 1124, 300, 366, 8952, 281, 264, 11, 50832], "temperature": 0.0, "avg_logprob": -0.1419052630662918, "compression_ratio": 2.007751937984496, "no_speech_prob": 0.0012387246824800968}, {"id": 214, "seek": 187284, "start": 1884.76, "end": 1890.4399999999998, "text": " parallel to the secondary, yeah, to the parallel to the secondary diagonal,", "tokens": [50960, 8952, 281, 264, 11396, 11, 1338, 11, 281, 264, 8952, 281, 264, 11396, 21539, 11, 51244], "temperature": 0.0, "avg_logprob": -0.1419052630662918, "compression_ratio": 2.007751937984496, "no_speech_prob": 0.0012387246824800968}, {"id": 215, "seek": 187284, "start": 1891.8799999999999, "end": 1898.9199999999998, "text": " and for each of these diagonal, okay, we retrieve all the entries, okay, the sum of these variables", "tokens": [51316, 293, 337, 1184, 295, 613, 21539, 11, 1392, 11, 321, 30254, 439, 264, 23041, 11, 1392, 11, 264, 2408, 295, 613, 9102, 51668], "temperature": 0.0, "avg_logprob": -0.1419052630662918, "compression_ratio": 2.007751937984496, "no_speech_prob": 0.0012387246824800968}, {"id": 216, "seek": 189892, "start": 1899.88, "end": 1908.2, "text": " is less than or equal to one, yeah, and the same to the diagonals that are parallel to the primary", "tokens": [50412, 307, 1570, 813, 420, 2681, 281, 472, 11, 1338, 11, 293, 264, 912, 281, 264, 17405, 1124, 300, 366, 8952, 281, 264, 6194, 50828], "temperature": 0.0, "avg_logprob": -0.07379512786865235, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.007061351556330919}, {"id": 217, "seek": 189892, "start": 1908.2, "end": 1918.52, "text": " diagonal, okay, so, and each diagonal, okay, the number of queens placed in that diagonal", "tokens": [50828, 21539, 11, 1392, 11, 370, 11, 293, 1184, 21539, 11, 1392, 11, 264, 1230, 295, 42017, 7074, 294, 300, 21539, 51344], "temperature": 0.0, "avg_logprob": -0.07379512786865235, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.007061351556330919}, {"id": 218, "seek": 189892, "start": 1919.16, "end": 1927.96, "text": " is less than or equal to one, all right, good, all right, so I have shown you several examples,", "tokens": [51376, 307, 1570, 813, 420, 2681, 281, 472, 11, 439, 558, 11, 665, 11, 439, 558, 11, 370, 286, 362, 4898, 291, 2940, 5110, 11, 51816], "temperature": 0.0, "avg_logprob": -0.07379512786865235, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.007061351556330919}, {"id": 219, "seek": 192796, "start": 1928.04, "end": 1940.3600000000001, "text": " okay, basically, it is, this packet has good modeling capability, okay, because of the availability", "tokens": [50368, 1392, 11, 1936, 11, 309, 307, 11, 341, 20300, 575, 665, 15983, 13759, 11, 1392, 11, 570, 295, 264, 17945, 50984], "temperature": 0.0, "avg_logprob": -0.20979548515157498, "compression_ratio": 1.496, "no_speech_prob": 0.0008906330913305283}, {"id": 220, "seek": 192796, "start": 1940.3600000000001, "end": 1949.16, "text": " of the language constructs, such as arrays, okay, loops for each loops, and the list of", "tokens": [50984, 295, 264, 2856, 7690, 82, 11, 1270, 382, 41011, 11, 1392, 11, 16121, 337, 1184, 16121, 11, 293, 264, 1329, 295, 51424], "temperature": 0.0, "avg_logprob": -0.20979548515157498, "compression_ratio": 1.496, "no_speech_prob": 0.0008906330913305283}, {"id": 221, "seek": 194916, "start": 1949.16, "end": 1958.92, "text": " comprehensions, okay, actually, and also there are several solvers available, so you can pick the", "tokens": [50364, 10753, 8302, 11, 1392, 11, 767, 11, 293, 611, 456, 366, 2940, 1404, 840, 2435, 11, 370, 291, 393, 1888, 264, 50852], "temperature": 0.0, "avg_logprob": -0.11904108758066215, "compression_ratio": 1.4511278195488722, "no_speech_prob": 0.0009225414833053946}, {"id": 222, "seek": 194916, "start": 1958.92, "end": 1972.92, "text": " best solver that suits your problem, all right, so I have, in this video lectures, okay, I have", "tokens": [50852, 1151, 1404, 331, 300, 15278, 428, 1154, 11, 439, 558, 11, 370, 286, 362, 11, 294, 341, 960, 16564, 11, 1392, 11, 286, 362, 51552], "temperature": 0.0, "avg_logprob": -0.11904108758066215, "compression_ratio": 1.4511278195488722, "no_speech_prob": 0.0009225414833053946}, {"id": 223, "seek": 197292, "start": 1973.88, "end": 1982.04, "text": " introduced you at the private system, okay, and I talked about the functional programming, logic", "tokens": [50412, 7268, 291, 412, 264, 4551, 1185, 11, 1392, 11, 293, 286, 2825, 466, 264, 11745, 9410, 11, 9952, 50820], "temperature": 0.0, "avg_logprob": -0.2689950696883663, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.005936024710536003}, {"id": 224, "seek": 197292, "start": 1982.04, "end": 1990.68, "text": " programming, using pattern matching rules, and I talked about recursive programming and dynamic", "tokens": [50820, 9410, 11, 1228, 5102, 14324, 4474, 11, 293, 286, 2825, 466, 20560, 488, 9410, 293, 8546, 51252], "temperature": 0.0, "avg_logprob": -0.2689950696883663, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.005936024710536003}, {"id": 225, "seek": 197292, "start": 1990.68, "end": 2000.1200000000001, "text": " programming, and in this video, I talked about constraint programming, well, I don't think this", "tokens": [51252, 9410, 11, 293, 294, 341, 960, 11, 286, 2825, 466, 25534, 9410, 11, 731, 11, 286, 500, 380, 519, 341, 51724], "temperature": 0.0, "avg_logprob": -0.2689950696883663, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.005936024710536003}, {"id": 226, "seek": 200012, "start": 2000.6, "end": 2008.36, "text": " is comprehensive, but I think you are ready to explore, and you are ready to write programs", "tokens": [50388, 307, 13914, 11, 457, 286, 519, 291, 366, 1919, 281, 6839, 11, 293, 291, 366, 1919, 281, 2464, 4268, 50776], "temperature": 0.0, "avg_logprob": -0.10474133491516113, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.0013792682439088821}, {"id": 227, "seek": 200012, "start": 2008.36, "end": 2019.8799999999999, "text": " to solve problems, and for, you know, details, for the details, okay, you can take a look at the", "tokens": [50776, 281, 5039, 2740, 11, 293, 337, 11, 291, 458, 11, 4365, 11, 337, 264, 4365, 11, 1392, 11, 291, 393, 747, 257, 574, 412, 264, 51352], "temperature": 0.0, "avg_logprob": -0.10474133491516113, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.0013792682439088821}, {"id": 228, "seek": 200012, "start": 2020.6799999999998, "end": 2027.4799999999998, "text": " user's guide, and you can also, okay, there is a book available, published several years ago,", "tokens": [51392, 4195, 311, 5934, 11, 293, 291, 393, 611, 11, 1392, 11, 456, 307, 257, 1446, 2435, 11, 6572, 2940, 924, 2057, 11, 51732], "temperature": 0.0, "avg_logprob": -0.10474133491516113, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.0013792682439088821}, {"id": 229, "seek": 202748, "start": 2027.48, "end": 2034.44, "text": " on constraint solving and planning with the packet, and that's also a good resource,", "tokens": [50364, 322, 25534, 12606, 293, 5038, 365, 264, 20300, 11, 293, 300, 311, 611, 257, 665, 7684, 11, 50712], "temperature": 0.0, "avg_logprob": -0.25311967016945425, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.002828190801665187}, {"id": 230, "seek": 202748, "start": 2035.88, "end": 2045.24, "text": " and I want to point you to another source, that is Hakan Cajestran's page,", "tokens": [50784, 293, 286, 528, 281, 935, 291, 281, 1071, 4009, 11, 300, 307, 389, 14910, 383, 1805, 377, 4257, 311, 3028, 11, 51252], "temperature": 0.0, "avg_logprob": -0.25311967016945425, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.002828190801665187}, {"id": 231, "seek": 202748, "start": 2045.24, "end": 2056.68, "text": " packet page, and Hakan has written more than 1,000 programs, and probably, okay, when you come to a", "tokens": [51252, 20300, 3028, 11, 293, 389, 14910, 575, 3720, 544, 813, 502, 11, 1360, 4268, 11, 293, 1391, 11, 1392, 11, 562, 291, 808, 281, 257, 51824], "temperature": 0.0, "avg_logprob": -0.25311967016945425, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.002828190801665187}, {"id": 232, "seek": 205668, "start": 2056.68, "end": 2066.2799999999997, "text": " problem, okay, very likely, and he has already solved it, okay, I mean, if it's a popular problem,", "tokens": [50364, 1154, 11, 1392, 11, 588, 3700, 11, 293, 415, 575, 1217, 13041, 309, 11, 1392, 11, 286, 914, 11, 498, 309, 311, 257, 3743, 1154, 11, 50844], "temperature": 0.0, "avg_logprob": -0.1277533916004917, "compression_ratio": 1.5390625, "no_speech_prob": 0.0009984399657696486}, {"id": 233, "seek": 205668, "start": 2068.2, "end": 2076.3599999999997, "text": " all right, so that is the end of this video, and also the end of this series, okay, thank you very", "tokens": [50940, 439, 558, 11, 370, 300, 307, 264, 917, 295, 341, 960, 11, 293, 611, 264, 917, 295, 341, 2638, 11, 1392, 11, 1309, 291, 588, 51348], "temperature": 0.0, "avg_logprob": -0.1277533916004917, "compression_ratio": 1.5390625, "no_speech_prob": 0.0009984399657696486}, {"id": 234, "seek": 207636, "start": 2076.36, "end": 2081.1600000000003, "text": " much for watching.", "tokens": [50364, 709, 337, 1976, 13, 50604], "temperature": 0.0, "avg_logprob": -0.6650571141924176, "compression_ratio": 0.6923076923076923, "no_speech_prob": 0.2831650972366333}], "language": "en"}