start	end	text
0	5280	So, today I'm going to talk about the Emacs IPython notebook.
5280	6280	This is the plan.
6280	11520	I haven't really timed myself out, so I have a feeling I can get through all this in 20-25
11520	17720	minutes, and then we'll do a demo, and there will be time after that for questions, hopefully.
17720	21760	My style, I've noticed these presentations, people tend to wait until the end for questions
21760	22760	and comments.
22760	28100	I kind of like, I don't mind if you guys have a question while I'm talking, just raise
28100	34180	your hand, might take us somewhere interesting, so feel free to interrupt if you want.
34180	35180	Let's go on a little bit.
35180	36620	So, first, a little disclaimer.
36620	40940	I work for a company named Honeywell UOP, and if you've been around long enough, you
40940	45140	would know that that company used to be named UOP, and you've been around for a really
45140	49840	long time, you'd know that company used to be called Universal Oil Products.
49840	52740	I'm not here today for them.
52740	56860	They don't know anything about this work I'm doing, I'm fine with that, they're probably
56860	58900	fine with that.
58900	62900	It is an interesting company, if you want to learn more about it, feel free to come by
62900	65700	after the presentation and talk to me.
65700	70980	All right, so I also want to first get some thanks out of the way.
70980	76580	First, this guy, he is the reason I exist.
76580	83460	Takafumi, I've only corresponded with him very briefly, many years ago, just before
83460	86460	I forked it, but the guy is insane.
86460	91380	I think he did like some like 1800 commits in the space of two years.
91380	95980	I'll talk a little bit more about what he did when I get to the history of EIN, but
95980	100380	if I were to meet this guy in person, I'd definitely owe him a beer, sake, something
100380	105180	because really he's changed my life with this software.
105180	112460	I'd also like to thank Fernando and the rest of the Jupiter Project, O'Reilly for sponsoring
112460	116060	me and helping me get here and coordinating all this.
116060	119820	A couple of years ago, a company, D'Isha, who's actually based here in New York, they
119820	122940	actually paid me to do some work on EIN.
122940	128820	I'm eternally grateful for them for that, that just was beyond my wildest expectations.
128820	134260	Then finally, I'd like to thank all the people on GitHub who have started my project at the
134260	135260	moment.
135260	136260	There's like 660.
136260	140260	I never expected that there would be that many people interested in this project.
140260	145740	I think on Melpa, it says there's been 50,000 downloads of the Emacs iPython notebook and
145740	148220	I'm just totally blown away by that.
148220	153260	I know it doesn't compare to Jupiter or the rest, but I'm just one guy and any interest
153260	157020	at all just makes me so happy.
157020	159100	All right, so me.
159100	162900	I graduated from Colorado State University in 1997.
162900	167980	I double majored in chemical engineering and computer science, so that makes me a bit
168020	170820	strange.
170820	176500	From there, I went straight into UOP, it was UOP at the time, and really that's a company
176500	180100	for chemical engineers, not computer science guys.
180100	183300	So I've really been doing chemical engineering work for the past 20 years.
183300	186020	Computer science is just kind of a side hobby for me.
186020	190820	I've been using Emacs since college, maybe 95, 96.
190820	197820	I was taking a grad level course in AI and all the homework was done in common language,
197980	202500	and if you're programming in Lyft, you pretty much need to use Emacs.
202500	207020	I've been filling around with Python since 1998.
207020	213380	I actually used it when my first start at my job, used Zope to build a website for my
213380	215940	group I was working at at the time.
215940	221580	Then I stopped using Python for many years, maybe until six, seven years ago that I discovered
221580	227340	pandas and was able to finally free myself from Excel workbooks.
227340	232900	Because in my organization, if you're a chemie working in the industry, I do pretty much
232900	237020	everything happens in an Excel workbook, which is depressing.
237020	244100	Anyways, and pretty around that time, I discovered the IPython notebook, I bounced, to be honest,
244100	252380	bounced off the web interface a bit until I found this project Emacs IPython notebook,
252380	259300	and then I kind of took over as maintainer in 2014, 2015, because TKF, he just kind of
259300	262300	disappeared.
262300	266060	So let's talk about Emacs IPython notebook finally.
266060	273220	It is, in my opinion, a full-featured client for the Jupyter notebook, and it's existed
273220	274860	since roughly 2012.
274860	281980	It tries to be a bit like Slime, if you know Emacs a little bit, that's the superior Lisp
281980	283940	interaction mode for Emacs.
283940	291500	It's a tool for interacting with common Lisp, allows you to interact with the REPL, interactively
291500	298460	execute code, inspect code, look at debug code, and I try to be like that.
298460	306380	It works on most recent versions of Emacs, and it's written almost completely in ELIS,
306380	312580	with the exception of a few Python functions that kind of glue in the IDE features.
312580	318540	It has a slew of IDE features, it integrates with the Python debugger, it integrates with
318540	325380	org mode, I don't know if any of you here know org mode, live and die by org mode, yes,
325740	329780	I've tried really hard to make it work reasonably well with org mode, I'll try and demo it a
329780	331620	little bit later.
331620	336300	Just recently I've made sure it works with non-Python kernels, I really don't know anything
336300	343780	other than Python and ELIS, but I did test it with an R kernel, and it actually kind
343780	345540	of worked.
345540	349660	And then here's the last one, which is kind of cool, too bad Joel's gone, but we can
349700	357180	connect Python buffers to running kernels and get completion and autodoc and stuff like
357180	360940	that for free, and I have Python buffer.
360940	368020	So Emacs, I don't know how many of you here are familiar with Emacs, that's probably why
368020	370220	you're here.
370220	379620	So here's my one obligatory XKCD, so yeah, if you know Emacs, whatever you want to do,
379620	388020	there's probably an Emacs command that does it for you, and I don't want to be snide,
388020	392500	but as I was watching a lot of these presentations to myself, I was thinking, yeah, Emacs, I
392500	397500	think Emacs can do that, especially watching the JupyterLab presentation.
397500	401980	Nothing against those guys, I think it's great that they're putting all these features together,
401980	408220	but a lot of the stuff Emacs is, Emacs, I'm Python notebooks had for like the past four
408220	409220	or five years.
409420	410740	Why do I use Emacs?
410740	415300	Originally this was why Emacs, but that felt a little presumptuous, I'm not going to tell
415300	422460	anybody that they have to use Emacs, it's kind of an acquired taste, either you bounce
422460	428340	off of it real hard or it just transforms your life and becomes everything.
428340	433180	I was looking for good images that represent Emacs, I found this and I thought it was pretty
433180	437620	funny, this guy is running a Tetris game in a frame.
438620	441620	I don't know how many editors can do that.
443620	445620	Who would want to write that in an editor?
445620	452820	But anyways, so in my mind, when I think of Emacs and why I use it, this first thing
452820	458620	I thought about was a list machine, I don't know if any of you know about list machines.
458620	464740	Unfortunately I was too young to really work with any list machines, and I'm a little bit
464740	469260	too old to be part of this data science wave, so I'm kind of stuck in the middle.
469260	473940	But anyways, Emacs is kind of like the scrappier cousin from the wrong side of town when you
473940	476620	think of a list machine.
476620	481780	I think it's telling that Emacs has endured so long, it's been around 40 years and people
481780	485220	are still using it obviously.
485220	489060	I was reading about a week ago, there's a couple of really good blog posts by this guy
489060	496580	Josh Stella that kind of explained why he likes Emacs so much, and I felt really resonated
496580	502780	with me, and I think a couple of points is it's a tool that you control completely.
502780	508020	It's your tool, it allows you to focus completely, there's no distractions when you're working
508020	515740	with Emacs, and the Emacs IPython notebook tool really buys into that philosophy I think,
515740	520660	and that's why I like using it so much in my work.
520660	529100	I didn't really want to get into editor wars, I know that's a very popular pastime activity,
529100	534460	but I think it's great that there's alternate clients out there, I think it's great that
534460	537860	there's Uperilab, I think it's great that there's Interact.
537860	545060	I think it's a sign of a healthy community that you have multiple tools out there and
545060	549020	they can all learn from each other.
549020	552500	Let's do a little bit of history of the line.
552500	567420	There was supposed to be a graph in here, but it's gone.
567420	568420	Let's do this.
568580	571020	I lost myself here.
571020	581540	I worked so hard in Microsoft PowerPoint to build this graph, I have to show it to you,
581540	582540	but it doesn't want to show.
582540	583540	There we go.
583540	589220	Okay, 2012 is the first commit to the Emacs IPython notebook.
589220	596860	Around March of 2014, that was the last commit by TKF.
596860	600340	About a month later, I forked it.
600340	604740	This was about the time when IPython was going from version 1.0 to 2.0.
604740	614340	There were a lot of changes to the interface, to the communication protocol, and IPython
614340	621020	Emacs I'm just wasn't keeping up, so I think TKF got burned out by all those changes and
621020	623060	just stopped committing.
623060	628540	I just took over and managed to get it working on 2.0 and I've been running with it ever
628540	630980	since.
630980	634380	On April 2014, there was a version 0.3.
634380	638700	I'm now at what, version 14.1.
638700	640580	It works with Jupyter.
640580	647100	There's over 650 stars on GitHub and over 50,000 downloads from Meltha, so it's kept
647100	651540	up with the times for the most part and I'm really happy with it.
651540	654540	Just going through that a little bit.
654540	659700	Yeah, 1,795 commits by this one guy.
659700	666340	I think we're at 2,500 commits, so that means 800 commits are mine in the space of four
666340	671060	years, so I'm no master programmer.
671060	674660	I'm just a guy.
674660	681460	I will say though that going from IPython 1.0 to today's Jupyter, there was rough
681460	683740	sailing for a while.
683740	685740	There were a number of real challenges I had to get through.
685740	688860	One, there were changes to the contents API.
688860	694940	That's the file view, browser view that you'll see.
694940	695940	There are big changes there.
695940	701860	There are some changes in the communication protocol, changes in the security model.
701860	706220	That was probably the most painful for me to try and work through.
706220	710740	Then there are some changes to the notebook format.
710740	715620	All of those work through, but now everything seems to be really stable on the Jupyter side.
715620	717500	I hope it stays that way.
717500	720380	Honestly, they've been really good about that.
720380	725380	I may complain about things, but they've been really good about keeping things stable.
725380	730780	It made me so happy when they mentioned in the last presentation that they made no backwards
730780	737660	incompatible changes to the notebook format because that code is really horrible.
737860	743980	Probably the worst piece of code I've written as a programmer.
743980	745740	Why these things were hard?
745740	750140	Because I get a little shy and embarrassed outside of Emacs.
750140	756260	I'm kind of old, so I don't understand all these newfangled web technologies.
756260	760860	I break out in highs whenever I try to read JavaScript.
760860	765460	It's been kind of hard to try and understand that, but the documentation from Jupyter has
765460	766960	been really good.
766960	769960	The people on the distribution have been really helpful.
769960	775240	Mattias, Brian, those guys have been really helpful and patient with me as I come up with
775240	777120	the occasional question.
777120	782640	Also, when I'm trying to support users, this seems to be the most common issue when people
782640	789680	post a GitHub is I can't connect to a notebook or the kernel is not running.
789680	795720	Those are really hard because I have to be able to reproduce the problem.
795760	802840	Emacs greatest disadvantage is maybe its greatest disadvantage is that it's so configurable.
802840	808240	Usually it turns out the issue is with the way that they've configured their installation.
808240	812000	It's just me trying to work through what that is.
812000	813800	Usually there's nothing I can do to bulletproof it.
813800	819000	It's just change your configuration.
819000	820000	Those were the challenges.
820000	822840	What have I loved about this project?
823600	828440	It's a short list, but really the joys have greatly outweighed the challenges because,
828440	831080	in part, the challenges have been the joy.
831080	835920	It's quite a rush when you have this really difficult problem and you find a way to fix
835920	836920	it.
836920	839360	That keeps me going.
839360	842040	There are people out there that use it.
842040	845640	There are people in professional organizations that are using Emacs and the Emacs I Python
845640	848760	notebook, which is just great.
848760	849760	I never expected that.
849880	854360	I use it for me mostly, but that other people use it is great.
854360	858680	The community, the people on GitHub are really nice.
858680	860160	They're really supportive.
860160	863520	Finally, I like to program in Lisp.
863520	868720	I get to do that and do something that's useful for people at the end of the day.
868720	871600	It doesn't get better than that.
871600	875160	Let's dive a little bit into Ion's features.
876160	877160	I don't know.
877160	881160	How many of you here have actually used the Emacs I Python notebook?
881160	883840	Okay.
883840	888360	Probably back in the I Python pre-1.0.
888360	894640	Yeah, I got the messages from people on the Jupyter list that they stopped using it because
894640	896800	it stopped working.
896800	901560	When I forked it, definitely a lot of people that were using it weren't aware of the fork,
901560	905680	and so it's taken a lot of time for people to come back.
905680	913040	So Emacs I Python notebook, it tries to look a lot like the notebook interface, except
913040	915360	it's more text-like.
915360	920960	A lot of the features that are there in the web interface are also in Emacs.
920960	922600	You can cut copy and paste cells.
922600	924840	You can move cells around.
924840	926800	It has inline images.
926800	929680	You can work with multiple kernels.
929680	933920	All that's there.
933920	936200	Also has a number of IDE-like features.
936200	940360	I think this puts it more in the realm of the Jupyter lab folk.
940360	945000	There's auto-completion, which, if you have it configured right, works really, really
945000	949000	well, but it can be a bit of a pain to configure.
949000	953240	We can jump to definitions of functions.
953240	954240	Bunch of other stuff.
954240	959440	I'm going to try and demo some of this later.
960200	966400	I really like this integration with Debugger because you can actually see the code as you're
966400	969240	stepping through.
969240	975000	I don't think that's not something that you'll find on the web browser interface.
975000	978080	There's a number of things that are unique to Emacs.
978080	983920	It's probably some of the IDE stuff that is also unique to Emacs, but you can launch Jupyter
983920	987000	from inside Emacs.
987040	992120	If you configure it correctly, it'll open up a buffer and it'll log everything from
992120	994320	the Jupyter server there.
994320	997560	You can execute ELIS from IPython.
997560	1004680	The code that does this is kind of old, so it works, but I executed it and then opened
1004680	1009120	this notebook up in the Roy browser and complained about some stuff.
1009120	1011600	It integrates with org mode.
1011600	1014320	You can have source blocks in org mode that'll execute.
1014320	1020320	The results will go into your org buffer, including images.
1020320	1021320	Support for high.
1021320	1023760	Have any of you heard of high?
1023760	1029000	I actually saw that and was like, oh, I have to support this in Emacs.
1029000	1034160	You have a Lisp for Python with a Lisp syntax and it's not running in Emacs.
1034160	1036080	Come on, guys.
1036080	1039800	The Callisto Py kernel.
1039800	1043240	We can do that, but I can also intermix.
1043240	1044240	I'll show you.
1044240	1046920	I'll show you if we get to it.
1046920	1052600	You can connect a Python buffer to a running notebook, which means it has access to a lot
1052600	1057840	of the stuff that's available in the kernel, which is auto-completion and doc tools.
1057840	1063760	You can customize it using ELIS, not JavaScript.
1063760	1068320	Emacs doesn't know JavaScript.
1068320	1071680	Who has pop-up, yeah, and then run doc tests.
1071680	1074400	Those are things I don't use a whole lot.
1074400	1079200	You'll find that the stuff that works really well on Emacs in I'm is stuff that I use in
1079200	1084360	my day-to-day stuff for obvious reasons.
1084360	1088960	There's some stuff that definitely needs a lot of tender-loving care.
1088960	1093440	There used to be a feature to take a Panda's data frame and open it in the simple Emacs
1093440	1094440	spreadsheet.
1094440	1101000	I tried that a couple of times, but the performance is, especially if it's a large data frame,
1101040	1103920	Emacs will really struggle with that.
1103920	1110920	You used to be able to use the hierarchy magic to get a hierarchy of a class and embed
1110920	1113200	that in the notebook.
1113200	1120200	It's based on a notebook extension that was written for pre-ipython 1.0, so it's not going
1121080	1126680	to work with modern Jupyter, that extension needs to be updated.
1126680	1128080	Guess who's the maintainer of that?
1128480	1130320	I want to wrote that, TKF.
1134000	1139000	But it probably wouldn't take a whole lot of work, really, honestly, to get it working.
1139000	1145120	There's a few things that I does not do at all, and it's possible, may never do.
1145120	1148760	Number one on those is widgets.
1148760	1154000	That's because Emacs is not a web browser.
1154040	1159080	There's some hope with maybe with XWidget and embedding the web browser inside the Emacs
1159080	1160440	buffer.
1160440	1167440	There's also the skewer package that might allow widgets to run in some form, maybe not
1167800	1174800	there in the Emacs buffer, but at least in another window, maybe, but it's not something
1175360	1177280	I really need to use.
1177280	1180720	The effort involves going to be probably pretty significant, so I don't know if it's going
1180720	1183720	to happen anytime soon.
1183720	1189000	Most notebook extensions probably won't work with Emacs because the notebook extension
1189000	1194360	will have some JavaScript in it, and again, Emacs doesn't know JavaScript, knows how to
1194360	1201280	edit JavaScript, great JavaScript editor, but it doesn't know how to execute it.
1201280	1207440	But if you want to take the time to translate JavaScript into Emacs lists, you can make
1207440	1208120	it work.
1208120	1215120	I took one, this really simple module, the timestamp module, that timestamp sells, wrote
1215120	1221600	a couple functions in elisp, and it basically has the same function as that extension.
1221600	1228280	In theory, if someone wanted to write an extension for iN, they could do so if they wanted to
1228280	1232080	learn elisp.
1232080	1234280	iN sort of supports Jupyter Hub.
1234280	1235960	I'd like that support to be better.
1235960	1238400	We'll see if I can get to it or not.
1238400	1240000	It is a bit wonky.
1240000	1245600	Last I looked, I think it worked with Jupyter version 0.8, but it only supported the PAM
1245600	1247600	authorization.
1247600	1253600	I don't know if it'll support what it'll take to get it to do OAuth, but that would be nice.
1253600	1255600	Again, that's kind of, yeah.
1255920	1262920	I was just going to ask if there's any HTML support, is this a simpler target than JavaScript?
1262920	1264920	Like manipulating the DOM?
1264920	1269920	Yeah, or not, like somebody sends some divs or some style of text.
1269920	1277000	So it won't know how to render it nicely, but I mean, if it's there in the cell, it'll
1277000	1279280	show up.
1279280	1281280	It does some nice syntax highlighting.
1281280	1287280	It knows how to syntax highlight like markdown and Python.
1287280	1293320	And I'll kind of show that when I open up the example.
1293320	1295960	So what's next?
1295960	1300560	I just want to make sure it's staying compatible with Jupyter.
1300560	1301920	Always like it to be more robust.
1301920	1307480	I kind of wish I could make it to the point where I don't get these not connecting to kernel
1307480	1308480	questions.
1309160	1317320	Though it seems to be lately they're all related to SSH issues, which I guess that's something.
1317320	1323840	That's better than having a local running instance and not being able to connect to it.
1323840	1324840	And there's a number of stuff.
1324840	1329600	I have an org file with a long list of improvements I like to make.
1329600	1335800	I think they've been sitting around for like three, four years, but some day, some day.
1335800	1343320	So why don't we go ahead and do a little example.
1343320	1349440	If there are any questions before I move on to the example demo, all right.
1349440	1355720	So this is what, if you haven't seen it before, this is what the Emacs IPython looks like
1355720	1361080	when you first launch the notebook list view.
1361080	1364280	So kind of reminiscent of the web view.
1364280	1366520	Down here are the files.
1366520	1372880	You can actually open files that aren't IPython notebooks and edit them.
1372880	1377720	So let's say, for example, this pavement pie.
1377720	1379160	There's some issues.
1379160	1385840	So we've got this Python buffer, and it's actually connected to the notebook server.
1385840	1388740	So if I save this file here, it actually gets saved on the server.
1388740	1392400	So this is one way of doing remote file editing.
1392400	1394960	I know Emacs has Tramp.
1394960	1401800	I'd really like it if I had an IPython Tramp protocol.
1401800	1404320	I think that would be really cool.
1404320	1408800	That would be very Emacs-y, but again, it's something that requires time and effort.
1408800	1418240	I'm not sure if I'll get to it.
1418240	1422160	So let's go to this presentation.
1422920	1425600	This is the actual presentation I just gave you.
1425600	1427920	I wrote it all in Emacs.
1427920	1434000	I was going to try and put it in a PowerPoint presentation, but I raged quit after a few
1434000	1441320	minutes of trying to copy stuff over to PowerPoint, and thanks to IPython and RISE, we had the
1441320	1442660	presentation that we did.
1442660	1445160	So let's go down here a little bit.
1446160	1452160	I went to the demonstration.
1452160	1457720	So looking at this interface real quick, so you see up in this upper left corner, there's
1457720	1460160	the execution count.
1460160	1464920	This one, actually back in the day, I supported multiple worksheets.
1464920	1466160	It kind of still does.
1466160	1472520	The problem is that IPython itself doesn't do worksheets anymore, so it would be a little
1472520	1478600	bit of work on my end, but I could bring that back if people were interested.
1478600	1481680	And then the kernel is running, which you can change.
1481680	1486280	You can also reset the kernel.
1486280	1492920	And then you can execute, and it's just like an IPython, like in the notebook.
1492920	1499080	Now, I want you to watch carefully, and this was all inspired by Joel's talk earlier about
1499080	1502280	what he hated about the IPython notebook.
1502280	1504760	I don't know if any of you saw that.
1504760	1505760	So watch carefully.
1505760	1508520	No execution count, nothing up my sleeves.
1508520	1509760	I haven't executed this line.
1509760	1521400	I haven't executed import sys at anywhere in this notebook, I promise.
1521400	1522400	Thank you.
1522400	1525360	Thank you.
1525360	1529880	This is using the Jedi package, and it's using Jedi.
1529880	1535520	So it's not actually talking to the kernel, actually what it does in this instance is
1535520	1541080	querying Jedi, and it's querying the kernel, and it's figuring out which one has the results,
1541080	1544300	and the kernel is probably saying, I don't know.
1544300	1551280	But Jedi, because it statically goes through, it knows, and you can actually get some completion.
1551280	1555760	Now, this only supports, if you guys know about the Emacs completion packages, there's
1555760	1560040	autocomplete, and there's company, and I have some support for company, but what I
1560040	1564080	just showed here really only works with autocomplete.
1564080	1572920	Maybe with company Jedi, I could get this working with company mode as well.
1572920	1573920	What's just like that?
1573920	1574920	Say hello, world.
1574920	1575920	All right.
1575920	1580400	I'm going to go down here real quick and set my plotting parameters, so this plot doesn't
1580400	1581400	look too...
1581400	1589720	It's Emacs.
1589720	1593680	It can be whatever you want.
1593680	1596680	So I use Space Max.
1596680	1604560	So in Space Max, you can have like a special mode key, which for, in this case, it's comma,
1604560	1607800	so I do comma return, and that executes the cell.
1607800	1618720	But if you wanted to be shift return, you could do that.
1618720	1621720	To open the notebook?
1621720	1622800	Sure.
1622800	1631120	So here's the notebook list view, notebook list buffer.
1631120	1632120	So oh, okay.
1632120	1633120	Oh, you're right.
1633120	1634120	Okay.
1634120	1635120	Why don't we do this then?
1635120	1640240	Let's start from nothing.
1640240	1644520	So this command I'm typing in right now, that stops the Jupyter server.
1644520	1647520	Let's do that.
1647520	1650000	Let's kill that buffer.
1650000	1657640	Let's make sure there is no running, gotcha.
1657640	1662480	And then let's do this, AYS.
1662480	1669640	So I just execute the command Ayn Jupyter start server.
1669640	1673000	You can configure the name of the Jupyter command.
1673000	1675120	There's a variable for that.
1675120	1679160	If that variable's not set, it'll ask you for a path to the Jupyter server.
1679160	1683360	Then it'll ask you for a path to where you want the server to open, which is doing right
1683360	1685360	now.
1685360	1690680	And I've got this nice little default, so let's start that.
1690680	1693760	My fingers are crossed.
1693760	1697920	It's going to take a little bit to start up the server, which I can probably jump to
1697920	1701280	right now.
1701280	1702280	There it is.
1702280	1705040	Hopefully, I haven't confused Emacs.
1705040	1706040	There we go.
1706040	1707040	It's trying to log in.
1707040	1708040	And there we go.
1708040	1709040	There's the browser.
1709040	1714640	This is probably the easiest way to get it running on your local machine is the Ayn
1714640	1716320	Jupyter server start.
1717080	1723520	It brings up this, it's called the notebook list view or notebook list buffer.
1723520	1726680	And it works pretty much like it does on the web interface.
1726680	1735920	So I'm going to go to the Emacs IPython notebook project directory, go back down, and then
1735920	1741320	you just select open.
1741320	1744200	So here we are, back again.
1744200	1750160	So it started up the kernel, new execution, so it's at zero count.
1750160	1751440	And here we are.
1751440	1752440	So clear?
1752440	1754440	Was it clear?
1754440	1756440	You're very welcome.
1756440	1757440	So where was I?
1757440	1763760	Oh, I was going to do an inline plot, because this is what got me started in the first place.
1763760	1770920	I liked using Matplotlib to generate pretty plots for my work, because I think they're
1770920	1779200	a lot prettier than what Excel does.
1779200	1781200	So let's do this.
1781200	1787280	I didn't execute.
1787280	1790080	So you can't put comments in magic lines.
1790080	1792400	Let's do this.
1792400	1794520	There we go.
1794520	1798320	Right now.
1798320	1799480	I know that looks really small.
1799480	1800480	I'm sorry.
1800480	1810560	I'll see if I can get this again.
1810560	1820400	There we go.
1820400	1821400	That's the good news.
1821400	1833280	The bad news is stuff like Boca, Altair, Vega, they won't work, because they use JavaScript,
1833280	1834280	and that won't run in Emacs.
1834280	1835280	Yeah.
1835280	1861760	I think when I was working on this, my motivation is, how can this help me do my work?
1861760	1871680	And I think the IPython in the notebook, this system for doing exploratory data analysis,
1871680	1876040	manipulating data, that was really my focus at the time, because as a chemie, I work in
1876040	1883000	the service department, and some of what my job is, is looking at trying to troubleshoot
1883000	1888400	problems on chemical process units, and so we get a lot of time series data, and so we
1888400	1894200	got to work through that data, and sometimes you get the data in really weird formats,
1894200	1898880	and having something like pandas makes it really nice to manipulate and work with that
1898880	1903840	data, and having something like Matplotlib is really nice for generating graphs to look
1903840	1907480	at the data and share them with your colleagues.
1907480	1913600	So really, that has been a lot of my motivation with this project.
1913600	1922320	I think that the fact that it's kind of been this nice environment is a really nice benefit
1922320	1928360	or secondary effect of all this.
1928360	1934560	I haven't really done a whole lot to promote it over the years, but I think there's probably
1934560	1942520	some good lessons here for people that are developing other clients, but that's not for
1942520	1943520	me.
1943520	1953560	Anyways, so we also have a help browser, so it pops up a buffer, and you can space through
1953560	1963840	it if it's, I forgot, you can go through it, right, it makes it a little easier to read.
1963840	1978560	If you're really masochistic, you can also do pop-ups, it'll do a pop-up.
1978560	1989360	There's a fairly good integration with the debugger support, so you'll get errors when
1989360	1991880	things don't work.
1991880	1995200	You get tracebacks.
1995200	2002040	If you want to get a full view of the traceback, this is not terribly interesting because there's
2002040	2004440	only one level to it.
2004440	2016920	If I think it's return, that didn't work, unfortunately, but you can jump to source from the tracebacks.
2016920	2028880	We'll see what this next one, hey look, there's raccoons, let's do this.
2028880	2032520	So there's a traceback of that.
2032520	2037480	So I can actually jump to that file, fingers crossed, there we go, we just jumped to the
2037480	2047640	file and the line that was referenced in the traceback.
2047640	2057920	If I want, I can go into the debugger, if I want to know, and see it popped up for me,
2057920	2064680	it's already showing me in the code where this error occurred, if you can see it, there's
2064680	2071120	a little arrow, tiny, tiny, tiny little arrow in the fringe.
2071120	2080160	I can go up a stack and you can see it's moved with us.
2080160	2087600	I can basically do the stuff that you would normally do in the Python debugger, for the
2087600	2089640	most part supports that completely.
2089640	2097240	I don't know if you get that in JupyterLab yet, but I've actually used it a few times
2097240	2105000	and it's very useful.
2105000	2111880	Now okay, somebody mentioned hi, I'm going to have to change the cell type.
2111880	2122960	So this is a Python kernel, prior to this I installed the hi module for this kernel.
2122960	2135720	You can set in-ine a special cell type, call it the cell, the hind cell, and it will execute
2135720	2143200	in Python, if you don't believe me, watch this.
2143200	2153320	So I'm going to set this variable, hi there, and oops, that shouldn't be, there we go.
2153320	2159840	This next cell is Python, there it is.
2159840	2164080	So I don't know why you do that, but you can.
2164080	2172280	You can also use the load magic, as you can see, it will create a new cell with the file.
2172280	2177920	There's a special, I don't know if you're org, if you're aware of the edit source blocks,
2177920	2183120	it pops up a new buffer with the source and it's in the mode of the code language that
2183120	2187240	the code is, we can do something similar with in, so I just did that here.
2187240	2194480	So here's basically a Python buffer with all the benefits that that bring with it, because
2194480	2202600	in Emacs there's quite a few packages out there that make editing Python better.
2202600	2212680	I can execute it, I can modify, I'm not going to do that, and then we're back in the notebook.
2212680	2221560	Now I'm running out of time, so real quickly, we're going to go to, did I open it, test
2221560	2236640	Python, all right, I'm going to connect this, connect to notebook buffer, so we can actually
2236640	2246000	execute this, I'm going to comment that out, and it goes to what we call the, what I call,
2246000	2249080	what is called the shared buffer.
2249080	2266440	You don't see anything there, but we can do this, which didn't work the way I wanted,
2266440	2271280	but I can go back to the notebook and you see we've created this digits variable, and
2271280	2276640	it should be available in the notebook, and there it is.
2276640	2284600	Now in this Python buffer, I get all the goodies that I have in the notebook, so load digits,
2284600	2305400	I can bring up the pop-up help, I get, I can jump to source, I didn't find it, darn it,
2305400	2316120	and auto-completion, I think I mentioned auto-completion, all right, datasets, I haven't imported the
2316120	2323960	module, and Jedi probably doesn't know about this, but we get the auto-completion, I'm
2323960	2328120	hurrying myself because I want to leave you time for some questions, there's this one
2328120	2334440	last thing, there's this thing called import magic, that if I were to try to execute this
2334440	2342600	and really what's happening when I execute is it's doing a run on the file, magic run,
2342600	2347840	it's not like lists where you can redefine individual functions, you have to reload the
2347840	2360120	whole file, but anyways, so there's this package called import magic, and it'll try and fix,
2360120	2367240	so as you can see, I hadn't imported the OS path join, so there's somewhere in I'm,
2367240	2373640	there's an error saying it didn't know about that, so I can fix that, and as you can see
2373640	2385440	it edited, and I could probably, there we go, and it erred because I didn't save the buffer
2385440	2400000	before trying to connect, so, why is it doing that, all right, well, so much for that demo,
2400000	2408480	anyways, I guess that was just a talk, an introduction to Ayn and its features, I need
2408480	2415120	to stop now, so I wanted to thank you all for coming, and you can find me, once this
2415200	2421880	gets published, there's contact information, look for me on GitHub or on e-mail, and thank
2421880	2423200	you all for coming.
2423200	2450240	I didn't play with it too much, but it will connect to a Callisto high, and works mostly
2450480	2459520	the problem with Ayn is it's very Python centric still, so the notebook itself, it probably won't
2459520	2466480	give you this nice syntax formatting as you expect for list code, so it's not great for
2467680	2474160	writing large expressions, but if you were to do a buffer, and then connect it to
2475120	2480720	a high buffer, and connect it to the kernel, I think that would work, if not, it might not
2480720	2483440	be too much work to get it to happen.
2483440	2497680	So, what I do to get it to intermingle, I wrote a little Pi function that basically wraps
2497680	2507120	calls to the syntax, you know, the parser and evaluator, and then Python, what I do on
2507120	2512960	Emacs is I wrap the text of that cell, and then send it to the kernel and execute that function.
2514480	2517680	And it works, I was surprised it works, but it does.
2518560	2522400	I don't do a whole lot in high, I haven't found a use case for it in what I do, but
2522400	2524640	I thought it was kind of cool that I could get it to work.
2528640	2540000	I wonder if I have...
2542240	2547680	It will try to print data frames, and it kind of looks like a text table,
2548480	2551760	which, if you have a really wide pandas frame, looks really, really ugly,
2552480	2554400	but it will kind of try to do that.
2555360	2561200	HTML, you know, it's basically Emacs HTML, so it will show the markup.
2563440	2571840	If you install the right package, you can get some latech, like inline image replacement of
2571840	2573280	latech and your markdown cells.
2575840	2576400	No, it...
2580800	2581920	What was the name of that?
2581920	2582960	Let's see if I can find it.
2591680	2596800	Yeah, so inline latech.
2597040	2603760	Yeah, so I think it was either Org Latech Preview or Magic Latech Buffer.
2605440	2606560	It was one of those two.
2607120	2610720	If you install one of those, it actually goes through the trouble of
2610720	2613280	inserting in the image, generating and inserting the image.
2615840	2623360	But as far as MIME types, I mean, it does try to handle HTML, but it's not a rendered HTML.
