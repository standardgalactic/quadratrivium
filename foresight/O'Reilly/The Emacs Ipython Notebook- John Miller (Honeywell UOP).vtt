WEBVTT

00:00.000 --> 00:05.280
So, today I'm going to talk about the Emacs IPython notebook.

00:05.280 --> 00:06.280
This is the plan.

00:06.280 --> 00:11.520
I haven't really timed myself out, so I have a feeling I can get through all this in 20-25

00:11.520 --> 00:17.720
minutes, and then we'll do a demo, and there will be time after that for questions, hopefully.

00:17.720 --> 00:21.760
My style, I've noticed these presentations, people tend to wait until the end for questions

00:21.760 --> 00:22.760
and comments.

00:22.760 --> 00:28.100
I kind of like, I don't mind if you guys have a question while I'm talking, just raise

00:28.100 --> 00:34.180
your hand, might take us somewhere interesting, so feel free to interrupt if you want.

00:34.180 --> 00:35.180
Let's go on a little bit.

00:35.180 --> 00:36.620
So, first, a little disclaimer.

00:36.620 --> 00:40.940
I work for a company named Honeywell UOP, and if you've been around long enough, you

00:40.940 --> 00:45.140
would know that that company used to be named UOP, and you've been around for a really

00:45.140 --> 00:49.840
long time, you'd know that company used to be called Universal Oil Products.

00:49.840 --> 00:52.740
I'm not here today for them.

00:52.740 --> 00:56.860
They don't know anything about this work I'm doing, I'm fine with that, they're probably

00:56.860 --> 00:58.900
fine with that.

00:58.900 --> 01:02.900
It is an interesting company, if you want to learn more about it, feel free to come by

01:02.900 --> 01:05.700
after the presentation and talk to me.

01:05.700 --> 01:10.980
All right, so I also want to first get some thanks out of the way.

01:10.980 --> 01:16.580
First, this guy, he is the reason I exist.

01:16.580 --> 01:23.460
Takafumi, I've only corresponded with him very briefly, many years ago, just before

01:23.460 --> 01:26.460
I forked it, but the guy is insane.

01:26.460 --> 01:31.380
I think he did like some like 1800 commits in the space of two years.

01:31.380 --> 01:35.980
I'll talk a little bit more about what he did when I get to the history of EIN, but

01:35.980 --> 01:40.380
if I were to meet this guy in person, I'd definitely owe him a beer, sake, something

01:40.380 --> 01:45.180
because really he's changed my life with this software.

01:45.180 --> 01:52.460
I'd also like to thank Fernando and the rest of the Jupiter Project, O'Reilly for sponsoring

01:52.460 --> 01:56.060
me and helping me get here and coordinating all this.

01:56.060 --> 01:59.820
A couple of years ago, a company, D'Isha, who's actually based here in New York, they

01:59.820 --> 02:02.940
actually paid me to do some work on EIN.

02:02.940 --> 02:08.820
I'm eternally grateful for them for that, that just was beyond my wildest expectations.

02:08.820 --> 02:14.260
Then finally, I'd like to thank all the people on GitHub who have started my project at the

02:14.260 --> 02:15.260
moment.

02:15.260 --> 02:16.260
There's like 660.

02:16.260 --> 02:20.260
I never expected that there would be that many people interested in this project.

02:20.260 --> 02:25.740
I think on Melpa, it says there's been 50,000 downloads of the Emacs iPython notebook and

02:25.740 --> 02:28.220
I'm just totally blown away by that.

02:28.220 --> 02:33.260
I know it doesn't compare to Jupiter or the rest, but I'm just one guy and any interest

02:33.260 --> 02:37.020
at all just makes me so happy.

02:37.020 --> 02:39.100
All right, so me.

02:39.100 --> 02:42.900
I graduated from Colorado State University in 1997.

02:42.900 --> 02:47.980
I double majored in chemical engineering and computer science, so that makes me a bit

02:48.020 --> 02:50.820
strange.

02:50.820 --> 02:56.500
From there, I went straight into UOP, it was UOP at the time, and really that's a company

02:56.500 --> 03:00.100
for chemical engineers, not computer science guys.

03:00.100 --> 03:03.300
So I've really been doing chemical engineering work for the past 20 years.

03:03.300 --> 03:06.020
Computer science is just kind of a side hobby for me.

03:06.020 --> 03:10.820
I've been using Emacs since college, maybe 95, 96.

03:10.820 --> 03:17.820
I was taking a grad level course in AI and all the homework was done in common language,

03:17.980 --> 03:22.500
and if you're programming in Lyft, you pretty much need to use Emacs.

03:22.500 --> 03:27.020
I've been filling around with Python since 1998.

03:27.020 --> 03:33.380
I actually used it when my first start at my job, used Zope to build a website for my

03:33.380 --> 03:35.940
group I was working at at the time.

03:35.940 --> 03:41.580
Then I stopped using Python for many years, maybe until six, seven years ago that I discovered

03:41.580 --> 03:47.340
pandas and was able to finally free myself from Excel workbooks.

03:47.340 --> 03:52.900
Because in my organization, if you're a chemie working in the industry, I do pretty much

03:52.900 --> 03:57.020
everything happens in an Excel workbook, which is depressing.

03:57.020 --> 04:04.100
Anyways, and pretty around that time, I discovered the IPython notebook, I bounced, to be honest,

04:04.100 --> 04:12.380
bounced off the web interface a bit until I found this project Emacs IPython notebook,

04:12.380 --> 04:19.300
and then I kind of took over as maintainer in 2014, 2015, because TKF, he just kind of

04:19.300 --> 04:22.300
disappeared.

04:22.300 --> 04:26.060
So let's talk about Emacs IPython notebook finally.

04:26.060 --> 04:33.220
It is, in my opinion, a full-featured client for the Jupyter notebook, and it's existed

04:33.220 --> 04:34.860
since roughly 2012.

04:34.860 --> 04:41.980
It tries to be a bit like Slime, if you know Emacs a little bit, that's the superior Lisp

04:41.980 --> 04:43.940
interaction mode for Emacs.

04:43.940 --> 04:51.500
It's a tool for interacting with common Lisp, allows you to interact with the REPL, interactively

04:51.500 --> 04:58.460
execute code, inspect code, look at debug code, and I try to be like that.

04:58.460 --> 05:06.380
It works on most recent versions of Emacs, and it's written almost completely in ELIS,

05:06.380 --> 05:12.580
with the exception of a few Python functions that kind of glue in the IDE features.

05:12.580 --> 05:18.540
It has a slew of IDE features, it integrates with the Python debugger, it integrates with

05:18.540 --> 05:25.380
org mode, I don't know if any of you here know org mode, live and die by org mode, yes,

05:25.740 --> 05:29.780
I've tried really hard to make it work reasonably well with org mode, I'll try and demo it a

05:29.780 --> 05:31.620
little bit later.

05:31.620 --> 05:36.300
Just recently I've made sure it works with non-Python kernels, I really don't know anything

05:36.300 --> 05:43.780
other than Python and ELIS, but I did test it with an R kernel, and it actually kind

05:43.780 --> 05:45.540
of worked.

05:45.540 --> 05:49.660
And then here's the last one, which is kind of cool, too bad Joel's gone, but we can

05:49.700 --> 05:57.180
connect Python buffers to running kernels and get completion and autodoc and stuff like

05:57.180 --> 06:00.940
that for free, and I have Python buffer.

06:00.940 --> 06:08.020
So Emacs, I don't know how many of you here are familiar with Emacs, that's probably why

06:08.020 --> 06:10.220
you're here.

06:10.220 --> 06:19.620
So here's my one obligatory XKCD, so yeah, if you know Emacs, whatever you want to do,

06:19.620 --> 06:28.020
there's probably an Emacs command that does it for you, and I don't want to be snide,

06:28.020 --> 06:32.500
but as I was watching a lot of these presentations to myself, I was thinking, yeah, Emacs, I

06:32.500 --> 06:37.500
think Emacs can do that, especially watching the JupyterLab presentation.

06:37.500 --> 06:41.980
Nothing against those guys, I think it's great that they're putting all these features together,

06:41.980 --> 06:48.220
but a lot of the stuff Emacs is, Emacs, I'm Python notebooks had for like the past four

06:48.220 --> 06:49.220
or five years.

06:49.420 --> 06:50.740
Why do I use Emacs?

06:50.740 --> 06:55.300
Originally this was why Emacs, but that felt a little presumptuous, I'm not going to tell

06:55.300 --> 07:02.460
anybody that they have to use Emacs, it's kind of an acquired taste, either you bounce

07:02.460 --> 07:08.340
off of it real hard or it just transforms your life and becomes everything.

07:08.340 --> 07:13.180
I was looking for good images that represent Emacs, I found this and I thought it was pretty

07:13.180 --> 07:17.620
funny, this guy is running a Tetris game in a frame.

07:18.620 --> 07:21.620
I don't know how many editors can do that.

07:23.620 --> 07:25.620
Who would want to write that in an editor?

07:25.620 --> 07:32.820
But anyways, so in my mind, when I think of Emacs and why I use it, this first thing

07:32.820 --> 07:38.620
I thought about was a list machine, I don't know if any of you know about list machines.

07:38.620 --> 07:44.740
Unfortunately I was too young to really work with any list machines, and I'm a little bit

07:44.740 --> 07:49.260
too old to be part of this data science wave, so I'm kind of stuck in the middle.

07:49.260 --> 07:53.940
But anyways, Emacs is kind of like the scrappier cousin from the wrong side of town when you

07:53.940 --> 07:56.620
think of a list machine.

07:56.620 --> 08:01.780
I think it's telling that Emacs has endured so long, it's been around 40 years and people

08:01.780 --> 08:05.220
are still using it obviously.

08:05.220 --> 08:09.060
I was reading about a week ago, there's a couple of really good blog posts by this guy

08:09.060 --> 08:16.580
Josh Stella that kind of explained why he likes Emacs so much, and I felt really resonated

08:16.580 --> 08:22.780
with me, and I think a couple of points is it's a tool that you control completely.

08:22.780 --> 08:28.020
It's your tool, it allows you to focus completely, there's no distractions when you're working

08:28.020 --> 08:35.740
with Emacs, and the Emacs IPython notebook tool really buys into that philosophy I think,

08:35.740 --> 08:40.660
and that's why I like using it so much in my work.

08:40.660 --> 08:49.100
I didn't really want to get into editor wars, I know that's a very popular pastime activity,

08:49.100 --> 08:54.460
but I think it's great that there's alternate clients out there, I think it's great that

08:54.460 --> 08:57.860
there's Uperilab, I think it's great that there's Interact.

08:57.860 --> 09:05.060
I think it's a sign of a healthy community that you have multiple tools out there and

09:05.060 --> 09:09.020
they can all learn from each other.

09:09.020 --> 09:12.500
Let's do a little bit of history of the line.

09:12.500 --> 09:27.420
There was supposed to be a graph in here, but it's gone.

09:27.420 --> 09:28.420
Let's do this.

09:28.580 --> 09:31.020
I lost myself here.

09:31.020 --> 09:41.540
I worked so hard in Microsoft PowerPoint to build this graph, I have to show it to you,

09:41.540 --> 09:42.540
but it doesn't want to show.

09:42.540 --> 09:43.540
There we go.

09:43.540 --> 09:49.220
Okay, 2012 is the first commit to the Emacs IPython notebook.

09:49.220 --> 09:56.860
Around March of 2014, that was the last commit by TKF.

09:56.860 --> 10:00.340
About a month later, I forked it.

10:00.340 --> 10:04.740
This was about the time when IPython was going from version 1.0 to 2.0.

10:04.740 --> 10:14.340
There were a lot of changes to the interface, to the communication protocol, and IPython

10:14.340 --> 10:21.020
Emacs I'm just wasn't keeping up, so I think TKF got burned out by all those changes and

10:21.020 --> 10:23.060
just stopped committing.

10:23.060 --> 10:28.540
I just took over and managed to get it working on 2.0 and I've been running with it ever

10:28.540 --> 10:30.980
since.

10:30.980 --> 10:34.380
On April 2014, there was a version 0.3.

10:34.380 --> 10:38.700
I'm now at what, version 14.1.

10:38.700 --> 10:40.580
It works with Jupyter.

10:40.580 --> 10:47.100
There's over 650 stars on GitHub and over 50,000 downloads from Meltha, so it's kept

10:47.100 --> 10:51.540
up with the times for the most part and I'm really happy with it.

10:51.540 --> 10:54.540
Just going through that a little bit.

10:54.540 --> 10:59.700
Yeah, 1,795 commits by this one guy.

10:59.700 --> 11:06.340
I think we're at 2,500 commits, so that means 800 commits are mine in the space of four

11:06.340 --> 11:11.060
years, so I'm no master programmer.

11:11.060 --> 11:14.660
I'm just a guy.

11:14.660 --> 11:21.460
I will say though that going from IPython 1.0 to today's Jupyter, there was rough

11:21.460 --> 11:23.740
sailing for a while.

11:23.740 --> 11:25.740
There were a number of real challenges I had to get through.

11:25.740 --> 11:28.860
One, there were changes to the contents API.

11:28.860 --> 11:34.940
That's the file view, browser view that you'll see.

11:34.940 --> 11:35.940
There are big changes there.

11:35.940 --> 11:41.860
There are some changes in the communication protocol, changes in the security model.

11:41.860 --> 11:46.220
That was probably the most painful for me to try and work through.

11:46.220 --> 11:50.740
Then there are some changes to the notebook format.

11:50.740 --> 11:55.620
All of those work through, but now everything seems to be really stable on the Jupyter side.

11:55.620 --> 11:57.500
I hope it stays that way.

11:57.500 --> 12:00.380
Honestly, they've been really good about that.

12:00.380 --> 12:05.380
I may complain about things, but they've been really good about keeping things stable.

12:05.380 --> 12:10.780
It made me so happy when they mentioned in the last presentation that they made no backwards

12:10.780 --> 12:17.660
incompatible changes to the notebook format because that code is really horrible.

12:17.860 --> 12:23.980
Probably the worst piece of code I've written as a programmer.

12:23.980 --> 12:25.740
Why these things were hard?

12:25.740 --> 12:30.140
Because I get a little shy and embarrassed outside of Emacs.

12:30.140 --> 12:36.260
I'm kind of old, so I don't understand all these newfangled web technologies.

12:36.260 --> 12:40.860
I break out in highs whenever I try to read JavaScript.

12:40.860 --> 12:45.460
It's been kind of hard to try and understand that, but the documentation from Jupyter has

12:45.460 --> 12:46.960
been really good.

12:46.960 --> 12:49.960
The people on the distribution have been really helpful.

12:49.960 --> 12:55.240
Mattias, Brian, those guys have been really helpful and patient with me as I come up with

12:55.240 --> 12:57.120
the occasional question.

12:57.120 --> 13:02.640
Also, when I'm trying to support users, this seems to be the most common issue when people

13:02.640 --> 13:09.680
post a GitHub is I can't connect to a notebook or the kernel is not running.

13:09.680 --> 13:15.720
Those are really hard because I have to be able to reproduce the problem.

13:15.760 --> 13:22.840
Emacs greatest disadvantage is maybe its greatest disadvantage is that it's so configurable.

13:22.840 --> 13:28.240
Usually it turns out the issue is with the way that they've configured their installation.

13:28.240 --> 13:32.000
It's just me trying to work through what that is.

13:32.000 --> 13:33.800
Usually there's nothing I can do to bulletproof it.

13:33.800 --> 13:39.000
It's just change your configuration.

13:39.000 --> 13:40.000
Those were the challenges.

13:40.000 --> 13:42.840
What have I loved about this project?

13:43.600 --> 13:48.440
It's a short list, but really the joys have greatly outweighed the challenges because,

13:48.440 --> 13:51.080
in part, the challenges have been the joy.

13:51.080 --> 13:55.920
It's quite a rush when you have this really difficult problem and you find a way to fix

13:55.920 --> 13:56.920
it.

13:56.920 --> 13:59.360
That keeps me going.

13:59.360 --> 14:02.040
There are people out there that use it.

14:02.040 --> 14:05.640
There are people in professional organizations that are using Emacs and the Emacs I Python

14:05.640 --> 14:08.760
notebook, which is just great.

14:08.760 --> 14:09.760
I never expected that.

14:09.880 --> 14:14.360
I use it for me mostly, but that other people use it is great.

14:14.360 --> 14:18.680
The community, the people on GitHub are really nice.

14:18.680 --> 14:20.160
They're really supportive.

14:20.160 --> 14:23.520
Finally, I like to program in Lisp.

14:23.520 --> 14:28.720
I get to do that and do something that's useful for people at the end of the day.

14:28.720 --> 14:31.600
It doesn't get better than that.

14:31.600 --> 14:35.160
Let's dive a little bit into Ion's features.

14:36.160 --> 14:37.160
I don't know.

14:37.160 --> 14:41.160
How many of you here have actually used the Emacs I Python notebook?

14:41.160 --> 14:43.840
Okay.

14:43.840 --> 14:48.360
Probably back in the I Python pre-1.0.

14:48.360 --> 14:54.640
Yeah, I got the messages from people on the Jupyter list that they stopped using it because

14:54.640 --> 14:56.800
it stopped working.

14:56.800 --> 15:01.560
When I forked it, definitely a lot of people that were using it weren't aware of the fork,

15:01.560 --> 15:05.680
and so it's taken a lot of time for people to come back.

15:05.680 --> 15:13.040
So Emacs I Python notebook, it tries to look a lot like the notebook interface, except

15:13.040 --> 15:15.360
it's more text-like.

15:15.360 --> 15:20.960
A lot of the features that are there in the web interface are also in Emacs.

15:20.960 --> 15:22.600
You can cut copy and paste cells.

15:22.600 --> 15:24.840
You can move cells around.

15:24.840 --> 15:26.800
It has inline images.

15:26.800 --> 15:29.680
You can work with multiple kernels.

15:29.680 --> 15:33.920
All that's there.

15:33.920 --> 15:36.200
Also has a number of IDE-like features.

15:36.200 --> 15:40.360
I think this puts it more in the realm of the Jupyter lab folk.

15:40.360 --> 15:45.000
There's auto-completion, which, if you have it configured right, works really, really

15:45.000 --> 15:49.000
well, but it can be a bit of a pain to configure.

15:49.000 --> 15:53.240
We can jump to definitions of functions.

15:53.240 --> 15:54.240
Bunch of other stuff.

15:54.240 --> 15:59.440
I'm going to try and demo some of this later.

16:00.200 --> 16:06.400
I really like this integration with Debugger because you can actually see the code as you're

16:06.400 --> 16:09.240
stepping through.

16:09.240 --> 16:15.000
I don't think that's not something that you'll find on the web browser interface.

16:15.000 --> 16:18.080
There's a number of things that are unique to Emacs.

16:18.080 --> 16:23.920
It's probably some of the IDE stuff that is also unique to Emacs, but you can launch Jupyter

16:23.920 --> 16:27.000
from inside Emacs.

16:27.040 --> 16:32.120
If you configure it correctly, it'll open up a buffer and it'll log everything from

16:32.120 --> 16:34.320
the Jupyter server there.

16:34.320 --> 16:37.560
You can execute ELIS from IPython.

16:37.560 --> 16:44.680
The code that does this is kind of old, so it works, but I executed it and then opened

16:44.680 --> 16:49.120
this notebook up in the Roy browser and complained about some stuff.

16:49.120 --> 16:51.600
It integrates with org mode.

16:51.600 --> 16:54.320
You can have source blocks in org mode that'll execute.

16:54.320 --> 17:00.320
The results will go into your org buffer, including images.

17:00.320 --> 17:01.320
Support for high.

17:01.320 --> 17:03.760
Have any of you heard of high?

17:03.760 --> 17:09.000
I actually saw that and was like, oh, I have to support this in Emacs.

17:09.000 --> 17:14.160
You have a Lisp for Python with a Lisp syntax and it's not running in Emacs.

17:14.160 --> 17:16.080
Come on, guys.

17:16.080 --> 17:19.800
The Callisto Py kernel.

17:19.800 --> 17:23.240
We can do that, but I can also intermix.

17:23.240 --> 17:24.240
I'll show you.

17:24.240 --> 17:26.920
I'll show you if we get to it.

17:26.920 --> 17:32.600
You can connect a Python buffer to a running notebook, which means it has access to a lot

17:32.600 --> 17:37.840
of the stuff that's available in the kernel, which is auto-completion and doc tools.

17:37.840 --> 17:43.760
You can customize it using ELIS, not JavaScript.

17:43.760 --> 17:48.320
Emacs doesn't know JavaScript.

17:48.320 --> 17:51.680
Who has pop-up, yeah, and then run doc tests.

17:51.680 --> 17:54.400
Those are things I don't use a whole lot.

17:54.400 --> 17:59.200
You'll find that the stuff that works really well on Emacs in I'm is stuff that I use in

17:59.200 --> 18:04.360
my day-to-day stuff for obvious reasons.

18:04.360 --> 18:08.960
There's some stuff that definitely needs a lot of tender-loving care.

18:08.960 --> 18:13.440
There used to be a feature to take a Panda's data frame and open it in the simple Emacs

18:13.440 --> 18:14.440
spreadsheet.

18:14.440 --> 18:21.000
I tried that a couple of times, but the performance is, especially if it's a large data frame,

18:21.040 --> 18:23.920
Emacs will really struggle with that.

18:23.920 --> 18:30.920
You used to be able to use the hierarchy magic to get a hierarchy of a class and embed

18:30.920 --> 18:33.200
that in the notebook.

18:33.200 --> 18:40.200
It's based on a notebook extension that was written for pre-ipython 1.0, so it's not going

18:41.080 --> 18:46.680
to work with modern Jupyter, that extension needs to be updated.

18:46.680 --> 18:48.080
Guess who's the maintainer of that?

18:48.480 --> 18:50.320
I want to wrote that, TKF.

18:54.000 --> 18:59.000
But it probably wouldn't take a whole lot of work, really, honestly, to get it working.

18:59.000 --> 19:05.120
There's a few things that I does not do at all, and it's possible, may never do.

19:05.120 --> 19:08.760
Number one on those is widgets.

19:08.760 --> 19:14.000
That's because Emacs is not a web browser.

19:14.040 --> 19:19.080
There's some hope with maybe with XWidget and embedding the web browser inside the Emacs

19:19.080 --> 19:20.440
buffer.

19:20.440 --> 19:27.440
There's also the skewer package that might allow widgets to run in some form, maybe not

19:27.800 --> 19:34.800
there in the Emacs buffer, but at least in another window, maybe, but it's not something

19:35.360 --> 19:37.280
I really need to use.

19:37.280 --> 19:40.720
The effort involves going to be probably pretty significant, so I don't know if it's going

19:40.720 --> 19:43.720
to happen anytime soon.

19:43.720 --> 19:49.000
Most notebook extensions probably won't work with Emacs because the notebook extension

19:49.000 --> 19:54.360
will have some JavaScript in it, and again, Emacs doesn't know JavaScript, knows how to

19:54.360 --> 20:01.280
edit JavaScript, great JavaScript editor, but it doesn't know how to execute it.

20:01.280 --> 20:07.440
But if you want to take the time to translate JavaScript into Emacs lists, you can make

20:07.440 --> 20:08.120
it work.

20:08.120 --> 20:15.120
I took one, this really simple module, the timestamp module, that timestamp sells, wrote

20:15.120 --> 20:21.600
a couple functions in elisp, and it basically has the same function as that extension.

20:21.600 --> 20:28.280
In theory, if someone wanted to write an extension for iN, they could do so if they wanted to

20:28.280 --> 20:32.080
learn elisp.

20:32.080 --> 20:34.280
iN sort of supports Jupyter Hub.

20:34.280 --> 20:35.960
I'd like that support to be better.

20:35.960 --> 20:38.400
We'll see if I can get to it or not.

20:38.400 --> 20:40.000
It is a bit wonky.

20:40.000 --> 20:45.600
Last I looked, I think it worked with Jupyter version 0.8, but it only supported the PAM

20:45.600 --> 20:47.600
authorization.

20:47.600 --> 20:53.600
I don't know if it'll support what it'll take to get it to do OAuth, but that would be nice.

20:53.600 --> 20:55.600
Again, that's kind of, yeah.

20:55.920 --> 21:02.920
I was just going to ask if there's any HTML support, is this a simpler target than JavaScript?

21:02.920 --> 21:04.920
Like manipulating the DOM?

21:04.920 --> 21:09.920
Yeah, or not, like somebody sends some divs or some style of text.

21:09.920 --> 21:17.000
So it won't know how to render it nicely, but I mean, if it's there in the cell, it'll

21:17.000 --> 21:19.280
show up.

21:19.280 --> 21:21.280
It does some nice syntax highlighting.

21:21.280 --> 21:27.280
It knows how to syntax highlight like markdown and Python.

21:27.280 --> 21:33.320
And I'll kind of show that when I open up the example.

21:33.320 --> 21:35.960
So what's next?

21:35.960 --> 21:40.560
I just want to make sure it's staying compatible with Jupyter.

21:40.560 --> 21:41.920
Always like it to be more robust.

21:41.920 --> 21:47.480
I kind of wish I could make it to the point where I don't get these not connecting to kernel

21:47.480 --> 21:48.480
questions.

21:49.160 --> 21:57.320
Though it seems to be lately they're all related to SSH issues, which I guess that's something.

21:57.320 --> 22:03.840
That's better than having a local running instance and not being able to connect to it.

22:03.840 --> 22:04.840
And there's a number of stuff.

22:04.840 --> 22:09.600
I have an org file with a long list of improvements I like to make.

22:09.600 --> 22:15.800
I think they've been sitting around for like three, four years, but some day, some day.

22:15.800 --> 22:23.320
So why don't we go ahead and do a little example.

22:23.320 --> 22:29.440
If there are any questions before I move on to the example demo, all right.

22:29.440 --> 22:35.720
So this is what, if you haven't seen it before, this is what the Emacs IPython looks like

22:35.720 --> 22:41.080
when you first launch the notebook list view.

22:41.080 --> 22:44.280
So kind of reminiscent of the web view.

22:44.280 --> 22:46.520
Down here are the files.

22:46.520 --> 22:52.880
You can actually open files that aren't IPython notebooks and edit them.

22:52.880 --> 22:57.720
So let's say, for example, this pavement pie.

22:57.720 --> 22:59.160
There's some issues.

22:59.160 --> 23:05.840
So we've got this Python buffer, and it's actually connected to the notebook server.

23:05.840 --> 23:08.740
So if I save this file here, it actually gets saved on the server.

23:08.740 --> 23:12.400
So this is one way of doing remote file editing.

23:12.400 --> 23:14.960
I know Emacs has Tramp.

23:14.960 --> 23:21.800
I'd really like it if I had an IPython Tramp protocol.

23:21.800 --> 23:24.320
I think that would be really cool.

23:24.320 --> 23:28.800
That would be very Emacs-y, but again, it's something that requires time and effort.

23:28.800 --> 23:38.240
I'm not sure if I'll get to it.

23:38.240 --> 23:42.160
So let's go to this presentation.

23:42.920 --> 23:45.600
This is the actual presentation I just gave you.

23:45.600 --> 23:47.920
I wrote it all in Emacs.

23:47.920 --> 23:54.000
I was going to try and put it in a PowerPoint presentation, but I raged quit after a few

23:54.000 --> 24:01.320
minutes of trying to copy stuff over to PowerPoint, and thanks to IPython and RISE, we had the

24:01.320 --> 24:02.660
presentation that we did.

24:02.660 --> 24:05.160
So let's go down here a little bit.

24:06.160 --> 24:12.160
I went to the demonstration.

24:12.160 --> 24:17.720
So looking at this interface real quick, so you see up in this upper left corner, there's

24:17.720 --> 24:20.160
the execution count.

24:20.160 --> 24:24.920
This one, actually back in the day, I supported multiple worksheets.

24:24.920 --> 24:26.160
It kind of still does.

24:26.160 --> 24:32.520
The problem is that IPython itself doesn't do worksheets anymore, so it would be a little

24:32.520 --> 24:38.600
bit of work on my end, but I could bring that back if people were interested.

24:38.600 --> 24:41.680
And then the kernel is running, which you can change.

24:41.680 --> 24:46.280
You can also reset the kernel.

24:46.280 --> 24:52.920
And then you can execute, and it's just like an IPython, like in the notebook.

24:52.920 --> 24:59.080
Now, I want you to watch carefully, and this was all inspired by Joel's talk earlier about

24:59.080 --> 25:02.280
what he hated about the IPython notebook.

25:02.280 --> 25:04.760
I don't know if any of you saw that.

25:04.760 --> 25:05.760
So watch carefully.

25:05.760 --> 25:08.520
No execution count, nothing up my sleeves.

25:08.520 --> 25:09.760
I haven't executed this line.

25:09.760 --> 25:21.400
I haven't executed import sys at anywhere in this notebook, I promise.

25:21.400 --> 25:22.400
Thank you.

25:22.400 --> 25:25.360
Thank you.

25:25.360 --> 25:29.880
This is using the Jedi package, and it's using Jedi.

25:29.880 --> 25:35.520
So it's not actually talking to the kernel, actually what it does in this instance is

25:35.520 --> 25:41.080
querying Jedi, and it's querying the kernel, and it's figuring out which one has the results,

25:41.080 --> 25:44.300
and the kernel is probably saying, I don't know.

25:44.300 --> 25:51.280
But Jedi, because it statically goes through, it knows, and you can actually get some completion.

25:51.280 --> 25:55.760
Now, this only supports, if you guys know about the Emacs completion packages, there's

25:55.760 --> 26:00.040
autocomplete, and there's company, and I have some support for company, but what I

26:00.040 --> 26:04.080
just showed here really only works with autocomplete.

26:04.080 --> 26:12.920
Maybe with company Jedi, I could get this working with company mode as well.

26:12.920 --> 26:13.920
What's just like that?

26:13.920 --> 26:14.920
Say hello, world.

26:14.920 --> 26:15.920
All right.

26:15.920 --> 26:20.400
I'm going to go down here real quick and set my plotting parameters, so this plot doesn't

26:20.400 --> 26:21.400
look too...

26:21.400 --> 26:29.720
It's Emacs.

26:29.720 --> 26:33.680
It can be whatever you want.

26:33.680 --> 26:36.680
So I use Space Max.

26:36.680 --> 26:44.560
So in Space Max, you can have like a special mode key, which for, in this case, it's comma,

26:44.560 --> 26:47.800
so I do comma return, and that executes the cell.

26:47.800 --> 26:58.720
But if you wanted to be shift return, you could do that.

26:58.720 --> 27:01.720
To open the notebook?

27:01.720 --> 27:02.800
Sure.

27:02.800 --> 27:11.120
So here's the notebook list view, notebook list buffer.

27:11.120 --> 27:12.120
So oh, okay.

27:12.120 --> 27:13.120
Oh, you're right.

27:13.120 --> 27:14.120
Okay.

27:14.120 --> 27:15.120
Why don't we do this then?

27:15.120 --> 27:20.240
Let's start from nothing.

27:20.240 --> 27:24.520
So this command I'm typing in right now, that stops the Jupyter server.

27:24.520 --> 27:27.520
Let's do that.

27:27.520 --> 27:30.000
Let's kill that buffer.

27:30.000 --> 27:37.640
Let's make sure there is no running, gotcha.

27:37.640 --> 27:42.480
And then let's do this, AYS.

27:42.480 --> 27:49.640
So I just execute the command Ayn Jupyter start server.

27:49.640 --> 27:53.000
You can configure the name of the Jupyter command.

27:53.000 --> 27:55.120
There's a variable for that.

27:55.120 --> 27:59.160
If that variable's not set, it'll ask you for a path to the Jupyter server.

27:59.160 --> 28:03.360
Then it'll ask you for a path to where you want the server to open, which is doing right

28:03.360 --> 28:05.360
now.

28:05.360 --> 28:10.680
And I've got this nice little default, so let's start that.

28:10.680 --> 28:13.760
My fingers are crossed.

28:13.760 --> 28:17.920
It's going to take a little bit to start up the server, which I can probably jump to

28:17.920 --> 28:21.280
right now.

28:21.280 --> 28:22.280
There it is.

28:22.280 --> 28:25.040
Hopefully, I haven't confused Emacs.

28:25.040 --> 28:26.040
There we go.

28:26.040 --> 28:27.040
It's trying to log in.

28:27.040 --> 28:28.040
And there we go.

28:28.040 --> 28:29.040
There's the browser.

28:29.040 --> 28:34.640
This is probably the easiest way to get it running on your local machine is the Ayn

28:34.640 --> 28:36.320
Jupyter server start.

28:37.080 --> 28:43.520
It brings up this, it's called the notebook list view or notebook list buffer.

28:43.520 --> 28:46.680
And it works pretty much like it does on the web interface.

28:46.680 --> 28:55.920
So I'm going to go to the Emacs IPython notebook project directory, go back down, and then

28:55.920 --> 29:01.320
you just select open.

29:01.320 --> 29:04.200
So here we are, back again.

29:04.200 --> 29:10.160
So it started up the kernel, new execution, so it's at zero count.

29:10.160 --> 29:11.440
And here we are.

29:11.440 --> 29:12.440
So clear?

29:12.440 --> 29:14.440
Was it clear?

29:14.440 --> 29:16.440
You're very welcome.

29:16.440 --> 29:17.440
So where was I?

29:17.440 --> 29:23.760
Oh, I was going to do an inline plot, because this is what got me started in the first place.

29:23.760 --> 29:30.920
I liked using Matplotlib to generate pretty plots for my work, because I think they're

29:30.920 --> 29:39.200
a lot prettier than what Excel does.

29:39.200 --> 29:41.200
So let's do this.

29:41.200 --> 29:47.280
I didn't execute.

29:47.280 --> 29:50.080
So you can't put comments in magic lines.

29:50.080 --> 29:52.400
Let's do this.

29:52.400 --> 29:54.520
There we go.

29:54.520 --> 29:58.320
Right now.

29:58.320 --> 29:59.480
I know that looks really small.

29:59.480 --> 30:00.480
I'm sorry.

30:00.480 --> 30:10.560
I'll see if I can get this again.

30:10.560 --> 30:20.400
There we go.

30:20.400 --> 30:21.400
That's the good news.

30:21.400 --> 30:33.280
The bad news is stuff like Boca, Altair, Vega, they won't work, because they use JavaScript,

30:33.280 --> 30:34.280
and that won't run in Emacs.

30:34.280 --> 30:35.280
Yeah.

30:35.280 --> 31:01.760
I think when I was working on this, my motivation is, how can this help me do my work?

31:01.760 --> 31:11.680
And I think the IPython in the notebook, this system for doing exploratory data analysis,

31:11.680 --> 31:16.040
manipulating data, that was really my focus at the time, because as a chemie, I work in

31:16.040 --> 31:23.000
the service department, and some of what my job is, is looking at trying to troubleshoot

31:23.000 --> 31:28.400
problems on chemical process units, and so we get a lot of time series data, and so we

31:28.400 --> 31:34.200
got to work through that data, and sometimes you get the data in really weird formats,

31:34.200 --> 31:38.880
and having something like pandas makes it really nice to manipulate and work with that

31:38.880 --> 31:43.840
data, and having something like Matplotlib is really nice for generating graphs to look

31:43.840 --> 31:47.480
at the data and share them with your colleagues.

31:47.480 --> 31:53.600
So really, that has been a lot of my motivation with this project.

31:53.600 --> 32:02.320
I think that the fact that it's kind of been this nice environment is a really nice benefit

32:02.320 --> 32:08.360
or secondary effect of all this.

32:08.360 --> 32:14.560
I haven't really done a whole lot to promote it over the years, but I think there's probably

32:14.560 --> 32:22.520
some good lessons here for people that are developing other clients, but that's not for

32:22.520 --> 32:23.520
me.

32:23.520 --> 32:33.560
Anyways, so we also have a help browser, so it pops up a buffer, and you can space through

32:33.560 --> 32:43.840
it if it's, I forgot, you can go through it, right, it makes it a little easier to read.

32:43.840 --> 32:58.560
If you're really masochistic, you can also do pop-ups, it'll do a pop-up.

32:58.560 --> 33:09.360
There's a fairly good integration with the debugger support, so you'll get errors when

33:09.360 --> 33:11.880
things don't work.

33:11.880 --> 33:15.200
You get tracebacks.

33:15.200 --> 33:22.040
If you want to get a full view of the traceback, this is not terribly interesting because there's

33:22.040 --> 33:24.440
only one level to it.

33:24.440 --> 33:36.920
If I think it's return, that didn't work, unfortunately, but you can jump to source from the tracebacks.

33:36.920 --> 33:48.880
We'll see what this next one, hey look, there's raccoons, let's do this.

33:48.880 --> 33:52.520
So there's a traceback of that.

33:52.520 --> 33:57.480
So I can actually jump to that file, fingers crossed, there we go, we just jumped to the

33:57.480 --> 34:07.640
file and the line that was referenced in the traceback.

34:07.640 --> 34:17.920
If I want, I can go into the debugger, if I want to know, and see it popped up for me,

34:17.920 --> 34:24.680
it's already showing me in the code where this error occurred, if you can see it, there's

34:24.680 --> 34:31.120
a little arrow, tiny, tiny, tiny little arrow in the fringe.

34:31.120 --> 34:40.160
I can go up a stack and you can see it's moved with us.

34:40.160 --> 34:47.600
I can basically do the stuff that you would normally do in the Python debugger, for the

34:47.600 --> 34:49.640
most part supports that completely.

34:49.640 --> 34:57.240
I don't know if you get that in JupyterLab yet, but I've actually used it a few times

34:57.240 --> 35:05.000
and it's very useful.

35:05.000 --> 35:11.880
Now okay, somebody mentioned hi, I'm going to have to change the cell type.

35:11.880 --> 35:22.960
So this is a Python kernel, prior to this I installed the hi module for this kernel.

35:22.960 --> 35:35.720
You can set in-ine a special cell type, call it the cell, the hind cell, and it will execute

35:35.720 --> 35:43.200
in Python, if you don't believe me, watch this.

35:43.200 --> 35:53.320
So I'm going to set this variable, hi there, and oops, that shouldn't be, there we go.

35:53.320 --> 35:59.840
This next cell is Python, there it is.

35:59.840 --> 36:04.080
So I don't know why you do that, but you can.

36:04.080 --> 36:12.280
You can also use the load magic, as you can see, it will create a new cell with the file.

36:12.280 --> 36:17.920
There's a special, I don't know if you're org, if you're aware of the edit source blocks,

36:17.920 --> 36:23.120
it pops up a new buffer with the source and it's in the mode of the code language that

36:23.120 --> 36:27.240
the code is, we can do something similar with in, so I just did that here.

36:27.240 --> 36:34.480
So here's basically a Python buffer with all the benefits that that bring with it, because

36:34.480 --> 36:42.600
in Emacs there's quite a few packages out there that make editing Python better.

36:42.600 --> 36:52.680
I can execute it, I can modify, I'm not going to do that, and then we're back in the notebook.

36:52.680 --> 37:01.560
Now I'm running out of time, so real quickly, we're going to go to, did I open it, test

37:01.560 --> 37:16.640
Python, all right, I'm going to connect this, connect to notebook buffer, so we can actually

37:16.640 --> 37:26.000
execute this, I'm going to comment that out, and it goes to what we call the, what I call,

37:26.000 --> 37:29.080
what is called the shared buffer.

37:29.080 --> 37:46.440
You don't see anything there, but we can do this, which didn't work the way I wanted,

37:46.440 --> 37:51.280
but I can go back to the notebook and you see we've created this digits variable, and

37:51.280 --> 37:56.640
it should be available in the notebook, and there it is.

37:56.640 --> 38:04.600
Now in this Python buffer, I get all the goodies that I have in the notebook, so load digits,

38:04.600 --> 38:25.400
I can bring up the pop-up help, I get, I can jump to source, I didn't find it, darn it,

38:25.400 --> 38:36.120
and auto-completion, I think I mentioned auto-completion, all right, datasets, I haven't imported the

38:36.120 --> 38:43.960
module, and Jedi probably doesn't know about this, but we get the auto-completion, I'm

38:43.960 --> 38:48.120
hurrying myself because I want to leave you time for some questions, there's this one

38:48.120 --> 38:54.440
last thing, there's this thing called import magic, that if I were to try to execute this

38:54.440 --> 39:02.600
and really what's happening when I execute is it's doing a run on the file, magic run,

39:02.600 --> 39:07.840
it's not like lists where you can redefine individual functions, you have to reload the

39:07.840 --> 39:20.120
whole file, but anyways, so there's this package called import magic, and it'll try and fix,

39:20.120 --> 39:27.240
so as you can see, I hadn't imported the OS path join, so there's somewhere in I'm,

39:27.240 --> 39:33.640
there's an error saying it didn't know about that, so I can fix that, and as you can see

39:33.640 --> 39:45.440
it edited, and I could probably, there we go, and it erred because I didn't save the buffer

39:45.440 --> 40:00.000
before trying to connect, so, why is it doing that, all right, well, so much for that demo,

40:00.000 --> 40:08.480
anyways, I guess that was just a talk, an introduction to Ayn and its features, I need

40:08.480 --> 40:15.120
to stop now, so I wanted to thank you all for coming, and you can find me, once this

40:15.200 --> 40:21.880
gets published, there's contact information, look for me on GitHub or on e-mail, and thank

40:21.880 --> 40:23.200
you all for coming.

40:23.200 --> 40:50.240
I didn't play with it too much, but it will connect to a Callisto high, and works mostly

40:50.480 --> 40:59.520
the problem with Ayn is it's very Python centric still, so the notebook itself, it probably won't

40:59.520 --> 41:06.480
give you this nice syntax formatting as you expect for list code, so it's not great for

41:07.680 --> 41:14.160
writing large expressions, but if you were to do a buffer, and then connect it to

41:15.120 --> 41:20.720
a high buffer, and connect it to the kernel, I think that would work, if not, it might not

41:20.720 --> 41:23.440
be too much work to get it to happen.

41:23.440 --> 41:37.680
So, what I do to get it to intermingle, I wrote a little Pi function that basically wraps

41:37.680 --> 41:47.120
calls to the syntax, you know, the parser and evaluator, and then Python, what I do on

41:47.120 --> 41:52.960
Emacs is I wrap the text of that cell, and then send it to the kernel and execute that function.

41:54.480 --> 41:57.680
And it works, I was surprised it works, but it does.

41:58.560 --> 42:02.400
I don't do a whole lot in high, I haven't found a use case for it in what I do, but

42:02.400 --> 42:04.640
I thought it was kind of cool that I could get it to work.

42:08.640 --> 42:20.000
I wonder if I have...

42:22.240 --> 42:27.680
It will try to print data frames, and it kind of looks like a text table,

42:28.480 --> 42:31.760
which, if you have a really wide pandas frame, looks really, really ugly,

42:32.480 --> 42:34.400
but it will kind of try to do that.

42:35.360 --> 42:41.200
HTML, you know, it's basically Emacs HTML, so it will show the markup.

42:43.440 --> 42:51.840
If you install the right package, you can get some latech, like inline image replacement of

42:51.840 --> 42:53.280
latech and your markdown cells.

42:55.840 --> 42:56.400
No, it...

43:00.800 --> 43:01.920
What was the name of that?

43:01.920 --> 43:02.960
Let's see if I can find it.

43:11.680 --> 43:16.800
Yeah, so inline latech.

43:17.040 --> 43:23.760
Yeah, so I think it was either Org Latech Preview or Magic Latech Buffer.

43:25.440 --> 43:26.560
It was one of those two.

43:27.120 --> 43:30.720
If you install one of those, it actually goes through the trouble of

43:30.720 --> 43:33.280
inserting in the image, generating and inserting the image.

43:35.840 --> 43:43.360
But as far as MIME types, I mean, it does try to handle HTML, but it's not a rendered HTML.

