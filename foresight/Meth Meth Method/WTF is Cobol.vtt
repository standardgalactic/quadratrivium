WEBVTT

00:00.000 --> 00:03.320
Hej alla! Det här är Fontes.

00:03.320 --> 00:06.880
I dag ska jag försöka köpa.

00:06.880 --> 00:10.780
Och det är för att det är att jag har sett mycket om köp.

00:10.780 --> 00:14.540
Att vara, vad det kallar,

00:14.540 --> 00:19.080
att vara fördelad nu i New Jersey eller något sådant.

00:19.080 --> 00:20.880
Låt oss se vad Twitter säger.

00:23.880 --> 00:26.300
Jag tror att jag har sett köp trenden.

00:27.020 --> 00:30.660
Det här är nån av de här.

00:32.660 --> 00:33.860
Och Kobol.

00:37.700 --> 00:41.780
Så det ser ut som att världen är i en djur nivå för folk att förstå Kobol.

00:42.100 --> 00:44.660
Så förstås jag ska försöka förstå Kobol.

00:48.980 --> 00:52.660
Kobol är en av de här länge som jag har hört om hela mitt liv.

00:53.660 --> 00:56.620
Men jag vet inte vad det ser ut som.

00:56.620 --> 01:03.580
Så jag tänkte att jag ska försöka och lära lite Kobol nu från en absolut skratch.

01:03.580 --> 01:09.860
Så i den här episodeen ser du mig att jag har kämpat.

01:09.860 --> 01:12.540
Jag vet inte om det kan röra på Windows.

01:12.540 --> 01:14.340
Jag vet inte vad det gör.

01:14.340 --> 01:18.180
Jag har en seriöst seriös erfarenhet med det.

01:18.940 --> 01:24.300
Så jag tror att vi ska börja och se vad som händer när jag lär Kobol.

01:27.700 --> 01:30.740
Målet kan göra en liten människa från att lära det.

01:30.740 --> 01:32.460
Hur vet du så?

01:32.460 --> 01:35.220
Let's create a blank slate här och.

01:37.060 --> 01:40.260
Get started with Kobol Windows.

01:43.500 --> 01:45.060
Microfokus dot kom.

01:45.220 --> 01:46.100
Never been there.

01:49.860 --> 01:51.580
This looks like a good tutorial.

01:53.340 --> 01:55.140
Let's just go in here and see what happens.

01:56.380 --> 01:56.900
OK.

01:59.620 --> 02:03.020
Well, this looks classic.

02:04.620 --> 02:05.780
As soon as in a bit.

02:08.660 --> 02:11.860
OK, common business oriented language.

02:12.580 --> 02:17.020
Good from 1959 older than me nice.

02:21.100 --> 02:25.220
What else does it say here in the website to help you learn Kobol.

02:25.260 --> 02:26.780
Microfokus provides a range.

02:26.780 --> 02:29.580
OK, who is who are microfokus by the way.

02:31.580 --> 02:34.540
Per standard learning practice.

02:34.540 --> 02:36.700
I'm not gonna invest too much time in anything.

02:36.940 --> 02:40.500
I'm just gonna try to find the gist of everything.

02:42.140 --> 02:48.820
OK, this looks like some typing person wrote this lot of text.

02:49.100 --> 02:50.660
Probably useless.

02:52.620 --> 02:54.060
Calling a Kobol program.

02:57.020 --> 02:58.660
Special in going to be called.

02:58.740 --> 03:00.220
What the hell is this?

03:00.540 --> 03:03.020
OK, let's go to the hello world thing.

03:04.900 --> 03:06.420
This is what I'm talking about.

03:08.340 --> 03:08.820
OK.

03:09.820 --> 03:20.580
This tutorial walks you through the steps to create your first hello Kobol world application and demonstrates the basic features of the Visual Studio integrated.

03:20.900 --> 03:22.340
I have to use Visual Studio.

03:24.460 --> 03:26.460
Oh, this is gonna be a long episode.

03:26.460 --> 03:38.780
I might have it installed so let's see Visual Studio 2017.

03:41.060 --> 03:42.660
Hey, hey, hey.

03:44.860 --> 03:47.340
Welcome all you connected developers.

03:47.540 --> 03:50.820
Yeah, I know that was not at all what it said.

03:51.100 --> 03:52.020
Connect all you do.

03:52.180 --> 03:53.220
I don't want to do that.

03:53.460 --> 03:53.900
I have to.

03:54.620 --> 03:56.980
Not now, maybe later.

03:57.180 --> 03:59.220
This is the feeling right there.

04:01.420 --> 04:02.500
A familiar environment.

04:02.700 --> 04:03.420
Dark.

04:04.740 --> 04:05.620
Dread and settings.

04:05.700 --> 04:06.260
General.

04:07.580 --> 04:09.900
I cannot pick Kobol here.

04:09.980 --> 04:10.380
OK.

04:12.140 --> 04:14.220
Let's take a look at this again here.

04:14.940 --> 04:15.980
Windows 10 and later.

04:16.060 --> 04:16.700
That's me.

04:16.940 --> 04:17.940
From your Windows desktop.

04:17.980 --> 04:18.620
Click start.

04:18.700 --> 04:20.140
Visual Studio 2007.

04:20.500 --> 04:21.220
I did that.

04:22.220 --> 04:29.140
If this is the first time you have started Visual Studio in your machine, you're prompted to specify default environment settings.

04:29.220 --> 04:30.940
Ah, general development settings.

04:31.020 --> 04:31.660
That's where we are.

04:31.740 --> 04:32.100
Good.

04:33.340 --> 04:34.820
The windows is open.

04:35.460 --> 04:36.620
I guess I'm going to continue.

04:38.060 --> 04:39.620
Let's tab in to Visual Studio here.

04:41.660 --> 04:42.300
General.

04:45.260 --> 04:46.540
I'm just going to double check that.

04:47.300 --> 04:49.460
OK, it's not exactly the same, but.

04:49.860 --> 04:52.020
It's probably what they mean.

04:58.780 --> 05:00.580
Let me resize this.

05:00.660 --> 05:01.780
Humongous window.

05:03.300 --> 05:05.420
OK, don't want to sign in all accounts.

05:10.020 --> 05:12.140
My evaluation period has ended.

05:13.540 --> 05:16.500
OK, I guess it ended in 2017.

05:17.900 --> 05:18.860
What do you do now?

05:20.460 --> 05:23.020
What options do I have here?

05:25.100 --> 05:26.580
What options do I have here?

05:32.660 --> 05:33.820
OK, what is this?

05:39.460 --> 05:43.900
OK, I'm going to write cobalt in VS code.

05:49.460 --> 05:56.580
OK, looks like it doesn't support cobalt by default, at least.

05:58.620 --> 05:59.900
I guess it's not cool.

06:02.300 --> 06:04.340
Why does this page look broken, by the way?

06:05.060 --> 06:05.940
Not a good sign.

06:06.380 --> 06:07.580
The end times is coming.

06:12.940 --> 06:18.020
But I just want to get started, but why do you have to use Visual Studio normal?

06:19.620 --> 06:20.700
Cobalt plusback.

06:21.380 --> 06:23.700
These things are so alien to me.

06:24.140 --> 06:25.420
It's quite interesting, actually.

06:27.460 --> 06:29.380
Is this maybe a virus?

06:31.780 --> 06:33.300
That icon looks so virusy.

06:36.500 --> 06:39.140
Cobalt, acrobalt, cobalt.

06:40.340 --> 06:40.660
Ja.

06:42.540 --> 06:43.820
Wait a minute.

06:45.180 --> 06:46.980
Cobalt on Linux.

06:50.220 --> 06:53.180
OK, schnellt ändå.

07:00.140 --> 07:05.940
Can you make a note that I'll be talking.

07:09.860 --> 07:10.700
Are you fine?

07:13.060 --> 07:14.380
No, I'm fine.

07:15.820 --> 07:17.740
That was all off Cuba.

07:17.740 --> 07:20.740
Let's have a open two window here.

07:22.740 --> 07:25.740
I probably need to resize it a little bit like that.

07:25.740 --> 07:26.740
It's easy to see.

07:27.740 --> 07:28.740
Let's install it.

07:33.740 --> 07:34.740
Hoppsam.

07:37.740 --> 07:38.740
Yes.

07:39.740 --> 07:41.740
Let's see where this gets us.

07:43.740 --> 07:45.740
I'm gonna continue read this.

07:46.740 --> 07:47.740
This looks boring.

07:48.740 --> 07:49.740
Package management.

07:49.740 --> 07:50.740
You should find it.

07:50.740 --> 07:51.740
Once installed.

07:52.740 --> 07:56.740
Is this what the code program looks like?

07:58.740 --> 08:00.740
I guess we don't need vicious studio then.

08:00.740 --> 08:02.740
So let's just goodbye.

08:04.740 --> 08:06.740
And open vicious studio code.

08:10.740 --> 08:12.740
Add workspace folder.

08:13.740 --> 08:14.740
And...

08:16.740 --> 08:19.740
I'm gonna add a folder called cobble hello world.

08:20.740 --> 08:22.740
There's cobble in it.

08:23.740 --> 08:24.740
Let's call it that.

08:25.740 --> 08:26.740
That's a good folder.

08:27.740 --> 08:28.740
It's an update.

08:28.740 --> 08:29.740
I don't need this.

08:32.740 --> 08:34.740
Let's see what happens if I just...

08:37.740 --> 08:40.740
Copy and paste this into a cobble file.

08:42.740 --> 08:44.740
I need to find code test.cbl.

08:45.740 --> 08:46.740
So a new file.

08:46.740 --> 08:47.740
I paste that in.

08:48.740 --> 08:50.740
I'm gonna save this as test.cbl.

08:51.740 --> 08:53.740
Let's see if it's .txt.

08:54.740 --> 08:55.740
No thank you.

08:58.740 --> 08:59.740
Aha.

09:00.740 --> 09:03.740
The marketplace has extension and help with cbl files.

09:04.740 --> 09:06.740
Let's see what we can do.

09:08.740 --> 09:09.740
Okay, very nice.

09:12.740 --> 09:16.740
This is the one we had up on the page here I think.

09:19.740 --> 09:23.740
Why does this page look so silly?

09:23.740 --> 09:25.740
Okay, let's just not use that.

09:25.740 --> 09:28.740
It was a good lead, so thank you page.

09:28.740 --> 09:30.740
But this is what we want to push.

09:30.740 --> 09:31.740
Bam, install.

09:33.740 --> 09:36.740
So this is just a source colorizer.

09:43.740 --> 09:47.740
Let's just look through this quickly and see if there's something that we obviously want.

09:48.740 --> 09:51.740
Autocomplete highlighting diagnostics.

09:51.740 --> 09:53.740
We'll see what happens.

09:53.740 --> 09:54.740
Okay, nice.

09:54.740 --> 09:56.740
We have colors.

09:56.740 --> 10:00.740
By the way, why are these lines there in the middle?

10:01.740 --> 10:02.740
Sorry.

10:02.740 --> 10:03.740
Okay.

10:04.740 --> 10:07.740
Can I run my code program now?

10:08.740 --> 10:10.740
Let's go in here.

10:10.740 --> 10:15.740
We have installed all the things from Cobol and Fink.

10:15.740 --> 10:22.740
So let's go in to this folder that we created and find out test.cbl.

10:25.740 --> 10:27.740
Where do you have these things?

10:32.740 --> 10:33.740
Development.

10:34.740 --> 10:35.740
Method.

10:37.740 --> 10:39.740
Cobol in it.

10:39.740 --> 10:41.740
There it is.

10:41.740 --> 10:45.740
And let's go and find what does this opencobol provide.

10:45.740 --> 10:48.740
It probably provides a compiler of some sort.

10:48.740 --> 10:54.740
So it looks here like we can write cobxhello.cob.

10:54.740 --> 11:02.740
And then we get an executable called dot slash hello, or yes, called hello, that is executable.

11:02.740 --> 11:04.740
Let's try that out.

11:04.740 --> 11:05.740
Cob C.

11:05.740 --> 11:07.740
No input files.

11:07.740 --> 11:08.740
Like we have this command.

11:08.740 --> 11:10.740
Let's clear the window.

11:10.740 --> 11:14.740
And we write cobc minus xhello.cob.

11:14.740 --> 11:18.740
But our file is called test.cbl.

11:18.740 --> 11:20.740
I guess that works.

11:20.740 --> 11:22.740
Cob C.

11:22.740 --> 11:24.740
Cob C.

11:24.740 --> 11:26.740
X as I think is.

11:26.740 --> 11:28.740
Let's see what it says there.

11:28.740 --> 11:30.740
Wow, lots of options.

11:32.740 --> 11:35.740
X means build an executable program.

11:35.740 --> 11:36.740
Okay.

11:36.740 --> 11:37.740
Nice.

11:37.740 --> 11:38.740
Clear this again.

11:38.740 --> 11:42.740
Cob C minus x and test.cbl.

11:42.740 --> 11:45.740
Was there something else we needed?

11:45.740 --> 11:53.740
No, it looks like, I guess it will compile it to the executable dot hello if it's called hello.

11:53.740 --> 11:56.740
So our executable is probably going to be called test.

11:59.740 --> 12:02.740
Syntax error already.

12:03.740 --> 12:05.740
Okay.

12:05.740 --> 12:09.740
Well, that's not even a column.

12:09.740 --> 12:13.740
Yeah, there is a line one column seven.

12:13.740 --> 12:15.740
This doesn't look good.

12:15.740 --> 12:18.740
One, two, three, four, five, seven.

12:18.740 --> 12:23.740
Oh, this is where I discover those lines that I don't know what they are.

12:23.740 --> 12:26.740
I wonder what that means.

12:27.740 --> 12:29.740
Oh.

12:29.740 --> 12:31.740
Hmm.

12:32.740 --> 12:34.740
This was interesting.

12:34.740 --> 12:39.740
So apparently everything is fine until here.

12:39.740 --> 12:41.740
No, can't write F there.

12:41.740 --> 12:43.740
Interesting.

12:45.740 --> 12:48.740
I don't understand this.

12:48.740 --> 12:55.740
Is this compiler not compatible with this tutorial?

12:58.740 --> 13:01.740
What is going on here?

13:02.740 --> 13:06.740
What is the first line here?

13:06.740 --> 13:07.740
Hello, Cob.

13:07.740 --> 13:10.740
Is that from the editor or what?

13:10.740 --> 13:14.740
No, this is the full program, right?

13:20.740 --> 13:22.740
Okay, it doesn't look good.

13:22.740 --> 13:25.740
We wrote test.cbl, right?

13:26.740 --> 13:29.740
We're going to display Chow.

13:31.740 --> 13:33.740
Okay.

13:39.740 --> 13:43.740
Okay, yes, some interesting things here we'll learn.

13:43.740 --> 13:47.740
But it's not good that we can't even go past this step.

13:47.740 --> 13:50.740
What could this be?

13:56.740 --> 13:58.740
Okay.

13:58.740 --> 14:02.740
We can Google this error too.

14:06.740 --> 14:10.740
Okay, it looks like somebody had this same problem.

14:10.740 --> 14:12.740
Go away.

14:14.740 --> 14:17.740
Okay, I have a simple code program that is not compiling.

14:17.740 --> 14:19.740
Can someone tell me what is wrong?

14:19.740 --> 14:21.740
Okay, that's me.

14:22.740 --> 14:25.740
What?

14:25.740 --> 14:28.740
Seriously, I hate webpages.

14:28.740 --> 14:30.740
Go away.

14:30.740 --> 14:32.740
I have a very simple, yes, that's me.

14:32.740 --> 14:36.740
I have purged and installed libcob1, an opencob2no effect.

14:36.740 --> 14:39.740
Error in value index F at column 7.

14:39.740 --> 14:41.740
Okay, that's me.

14:41.740 --> 14:43.740
Identification division.

14:43.740 --> 14:45.740
Let's see if that is what we had.

14:45.740 --> 14:47.740
Yes.

14:47.740 --> 14:49.740
What does that mean by the way?

14:49.740 --> 14:52.740
I should probably find out.

14:53.740 --> 14:56.740
Try this slight mod due to syntax from a limerick site.

14:56.740 --> 14:59.740
Okay, I don't...

14:59.740 --> 15:04.740
That is completely alien to me.

15:04.740 --> 15:07.740
Okay, a limerick site.

15:07.740 --> 15:13.740
Probably something that you know about when you write code.

15:13.740 --> 15:16.740
What is the mod exactly?

15:19.740 --> 15:22.740
Let's...

15:22.740 --> 15:25.740
I'm just going to copy-paste this in.

15:25.740 --> 15:28.740
I'll see what happens.

15:28.740 --> 15:32.740
Oh, it's so good to feel like a complete beginner.

15:32.740 --> 15:35.740
That's the exact same problem.

15:35.740 --> 15:39.740
Let's make sure that this is actually the file that I expected to be.

15:39.740 --> 15:41.740
Okay, yeah.

15:41.740 --> 15:43.740
That is what we pasted.

15:43.740 --> 15:46.740
And apparently the syntax there are here.

15:46.740 --> 15:48.740
Really, really.

15:48.740 --> 15:50.740
Is that it?

15:50.740 --> 15:52.740
Ah, this is silly.

15:52.740 --> 15:55.740
Should I add this too?

15:55.740 --> 15:57.740
Source format free.

15:57.740 --> 15:59.740
Maybe it is.

15:59.740 --> 16:01.740
What do I know?

16:01.740 --> 16:03.740
I mean JavaScript has used strict.

16:03.740 --> 16:06.740
Let's save this, see what happens.

16:06.740 --> 16:09.740
Okay, interesting.

16:09.740 --> 16:11.740
Interesting.

16:11.740 --> 16:13.740
Seem to work.

16:13.740 --> 16:16.740
We have an executable here.

16:16.740 --> 16:20.740
Why not test it and execute the test.

16:20.740 --> 16:23.740
And the first number.

16:23.740 --> 16:28.740
I don't know what the program does, but I'm going to enter the first number.

16:28.740 --> 16:33.740
And everybody knows that the first number is one.

16:33.740 --> 16:36.740
And the second number, that's two.

16:36.740 --> 16:39.740
Result is zero two.

16:39.740 --> 16:41.740
Okay.

16:41.740 --> 16:43.740
Nice.

16:43.740 --> 16:45.740
I know COBOL now.

16:45.740 --> 16:48.740
I wonder what this program does.

16:48.740 --> 16:51.740
Let's see if we can figure this out.

16:51.740 --> 16:57.740
Example program using accept display and multiply to get.

16:57.740 --> 17:01.740
Two single digit numbers from the user and multiply them together.

17:01.740 --> 17:04.740
Well, you sure did do that.

17:04.740 --> 17:07.740
The output was a little bit unexpected.

17:07.740 --> 17:10.740
I didn't expect that leading zero.

17:10.740 --> 17:14.740
But let's try something else.

17:14.740 --> 17:16.740
And the first number.

17:16.740 --> 17:18.740
What should we pick?

17:18.740 --> 17:20.740
Three.

17:20.740 --> 17:22.740
And second number.

17:22.740 --> 17:24.740
Twelve.

17:24.740 --> 17:27.740
We should see 36, right?

17:27.740 --> 17:31.740
Oh, it can only be one digit.

17:31.740 --> 17:33.740
Okay.

17:33.740 --> 17:38.740
So three and nine should be 27, I think.

17:38.740 --> 17:40.740
Yeah.

17:40.740 --> 17:42.740
You go program.

17:42.740 --> 17:44.740
You're a good program.

17:44.740 --> 17:46.740
Okay.

17:46.740 --> 17:49.740
So this was interesting.

17:49.740 --> 17:54.740
That's something probably everybody knows in COBOL world.

17:54.740 --> 17:59.740
That you have to write that in the top otherwise you will get a very confusing error.

17:59.740 --> 18:04.740
It looks like this person did something similar.

18:04.740 --> 18:06.740
Okay.

18:06.740 --> 18:13.740
I will never again, which I stopped doing a long time ago, complain about somebody that doesn't know a specific thing in a language.

18:13.740 --> 18:15.740
But this was interesting.

18:15.740 --> 18:20.740
This feels just like when I was younger and I was just, what is this for?

18:20.740 --> 18:22.740
I don't understand what this thing is for.

18:22.740 --> 18:24.740
Why did they do it like that?

18:24.740 --> 18:26.740
This sucks.

18:26.740 --> 18:28.740
But now I suck.

18:28.740 --> 18:30.740
It feels good.

18:30.740 --> 18:32.740
Okay.

18:32.740 --> 18:37.740
Let's go back to a tutorial and see if we can rewrite, get this to work now.

18:37.740 --> 18:41.740
When we know this magic trick of COBOL world.

18:41.740 --> 18:46.740
So we can do math.

18:46.740 --> 18:48.740
That was pretty impressive.

18:48.740 --> 18:52.740
Now we're gonna see if we can print.

18:52.740 --> 18:53.740
Ciao!

18:53.740 --> 18:54.740
Which is fitting.

18:54.740 --> 18:56.740
Italy is a nice place.

18:56.740 --> 18:58.740
We'd love to go there.

18:58.740 --> 19:00.740
Let's compile that.

19:00.740 --> 19:02.740
It worked.

19:02.740 --> 19:04.740
You know what?

19:04.740 --> 19:09.740
This source format 3 is my favorite thing in COBOL.

19:09.740 --> 19:12.740
But I'm back here in the micro focus tutorial.

19:12.740 --> 19:20.740
And I'm gonna continue with this one because I noticed, oh now I remember what was so funny.

19:21.740 --> 19:26.740
I isn't there supposed to be a history menu item here somewhere.

19:26.740 --> 19:28.740
Or they just remove that for no reason.

19:28.740 --> 19:30.740
Okay this makes so much sense.

19:30.740 --> 19:34.740
Thanks Google for being annoying.

19:34.740 --> 19:37.740
Okay, I guess I can't find that page easily.

19:37.740 --> 19:40.740
So let's just continue with this project here.

19:40.740 --> 19:42.740
So we solved the compiling program.

19:42.740 --> 19:47.740
And here is the reminisced remnants of what I did before.

19:47.740 --> 19:49.740
Let's clear that out so this makes sense.

19:51.740 --> 19:52.740
Okay.

19:52.740 --> 19:53.740
Add a source file.

19:53.740 --> 19:54.740
We can do that.

19:54.740 --> 19:56.740
Because we know how to compile.

19:56.740 --> 19:59.740
So I'm gonna create a source file called helloworld.cbl.

19:59.740 --> 20:02.740
Just keep in line with this tutorial.

20:02.740 --> 20:04.740
Copping that.

20:04.740 --> 20:06.740
Creating a new file here.

20:06.740 --> 20:07.740
Saving it.

20:07.740 --> 20:12.740
Add hello world.cbl.

20:12.740 --> 20:14.740
Plam, pasting this in.

20:14.740 --> 20:17.740
No, that's not what I'm pasting in.

20:17.740 --> 20:21.740
You can delete the skeleton problem that's created when you created a project.

20:21.740 --> 20:23.740
We don't need to do that.

20:23.740 --> 20:26.740
But in the code within the new file.

20:26.740 --> 20:29.740
Navigate to the line that contains procedure division.

20:29.740 --> 20:34.740
So since we have created it not with Witcher Studio.

20:34.740 --> 20:38.740
We didn't get any of the skeleton things.

20:38.740 --> 20:40.740
So I'm gonna copy that from our test file.

20:40.740 --> 20:42.740
Into helloworld.cbl.

20:42.740 --> 20:45.740
And looking at here.

20:45.740 --> 20:48.740
Procedure division.

20:48.740 --> 20:50.740
Oops.

20:50.740 --> 20:52.740
It's here.

20:52.740 --> 20:54.740
So it looks like this.

20:54.740 --> 20:56.740
There's two parts of this source file.

20:56.740 --> 21:00.740
One is this statement.

21:00.740 --> 21:07.740
That just, I guess it tells the compiler what source file is formatted like.

21:11.740 --> 21:14.740
Oh, source format free.

21:14.740 --> 21:20.740
Is that the same as using this?

21:24.740 --> 21:27.740
Let's save this and see if we can compile it.

21:29.740 --> 21:32.740
If you compile this with x, it compiles.

21:32.740 --> 21:35.740
Can we remove that?

21:35.740 --> 21:38.740
I get that error we had in the beginning.

21:38.740 --> 21:40.740
But if I add dash free.

21:40.740 --> 21:43.740
Oh, it makes it work.

21:44.740 --> 21:50.740
So it looks like this statement.

21:50.740 --> 21:54.740
And that one is the same.

21:54.740 --> 21:57.740
Okay, that's good to know.

22:01.740 --> 22:03.740
Okay, good to know.

22:03.740 --> 22:05.740
I wonder why that is.

22:05.740 --> 22:09.740
And what is non free format?

22:10.740 --> 22:13.740
I will never know.

22:13.740 --> 22:15.740
May we find out later.

22:15.740 --> 22:17.740
But let's get in line with this.

22:17.740 --> 22:20.740
We should find the procedure division.

22:20.740 --> 22:27.740
And then we press enter at the line of the file.

22:27.740 --> 22:29.740
Let's do this.

22:29.740 --> 22:31.740
There we go.

22:31.740 --> 22:37.740
This creates a new line in the file and the cursor position right after the gray margin area.

22:37.740 --> 22:40.740
I don't think we have the gray margin area.

22:40.740 --> 22:43.740
And what is the AB area?

22:43.740 --> 22:45.740
I don't know.

22:48.740 --> 22:50.740
But anyway, let's go down to number six here.

22:50.740 --> 22:53.740
Type the code to write some text in the console.

22:53.740 --> 22:56.740
Copping this out.

22:56.740 --> 22:58.740
Boom.

22:59.740 --> 23:01.740
Compile.

23:02.740 --> 23:05.740
And run.

23:06.740 --> 23:08.740
It works. Fantastic.

23:08.740 --> 23:15.740
I'm actually going to combine the compiling and the run stage with the double ampersons there.

23:15.740 --> 23:21.740
That way I can just press up and run it.

23:21.740 --> 23:24.740
And compile it at the same time.

23:27.740 --> 23:29.740
Okay, build application.

23:29.740 --> 23:31.740
We can do that.

23:31.740 --> 23:33.740
Run hello world.

23:33.740 --> 23:35.740
We have done that.

23:35.740 --> 23:37.740
Okay, what's next?

23:37.740 --> 23:41.740
Continue with the next tutorial, configuring the hellocobalworld application.

23:41.740 --> 23:43.740
Okay.

23:43.740 --> 23:45.740
Copybooks.

23:45.740 --> 23:47.740
Okay, let's see what this is.

23:47.740 --> 23:53.740
Tutorial configuring the hellocobalworld application.

23:53.740 --> 23:59.740
Cobal application often consists of cobalt source files and of copybooks.

23:59.740 --> 24:02.740
Files that include code that is copied into other programs.

24:03.740 --> 24:05.740
That's the new concept to me.

24:05.740 --> 24:08.740
Or at least the name copybooks.

24:08.740 --> 24:14.740
Copybooks might not be stored in the same location as the source files.

24:14.740 --> 24:20.740
This tutorial demonstrates how to configure a project to locate any copybooks that are not in the project directory.

24:20.740 --> 24:22.740
This is strange to me.

24:22.740 --> 24:25.740
Why would this be the first thing you want to learn about?

24:25.740 --> 24:27.740
But let's just continue.

24:28.740 --> 24:32.740
You're now going to modify and configure a hellocobalworld application,

24:32.740 --> 24:35.740
which you created in the tutorial hellocobalworld application.

24:35.740 --> 24:37.740
To use a copybook,

24:37.740 --> 24:40.740
which is an external to the project.

24:40.740 --> 24:46.740
It still feels very strange to me that this is the second thing you do when you learn a cobalt.

24:46.740 --> 24:49.740
But who am I to judge?

24:49.740 --> 24:52.740
This is what you're going to do as part of this tutorial.

24:52.740 --> 24:56.740
Create a project in the same solution that only contains a copybook.

24:56.740 --> 25:01.740
Move a part of the code from the hellocobalprogram in the lower.

25:01.740 --> 25:06.740
Replace the original code and hellocobalworld with a copy statement.

25:06.740 --> 25:09.740
The changes you make to your project will cause some build issues.

25:09.740 --> 25:12.740
Modify the project's properties to add a path to the copybook.

25:12.740 --> 25:17.740
In file in order to resolve these build issues.

25:19.740 --> 25:23.740
I wonder what this is if you're not the vicious studio code.

25:23.740 --> 25:26.740
Let's just try to figure it out.

25:29.740 --> 25:33.740
They want to create a console application that probably doesn't apply to us.

25:39.740 --> 25:41.740
Create a copybook.

25:41.740 --> 25:44.740
Copybook, project, solution, add new item.

25:44.740 --> 25:47.740
Click copybook. What is a copybook?

25:48.740 --> 25:53.740
I'm going to create a new file called hello.cpy and click add.

25:53.740 --> 25:57.740
This crazy file in the project opens it in the editor.

25:59.740 --> 26:04.740
You're now going to add some code to the file from the hellocobalworld project.

26:04.740 --> 26:08.740
Copy the following line from the file.

26:08.740 --> 26:12.740
Let's try this.

26:23.740 --> 26:26.740
I think we have one thing missing here.

26:26.740 --> 26:33.740
Hello.cpy probably requires some scaffolding before we can make it work.

26:34.740 --> 26:39.740
By scaffolding, I mean this part, the identification division, the procedure division.

26:39.740 --> 26:44.740
Let's follow it blindly and see what problems we get.

26:44.740 --> 26:48.740
They want us to call it hello.cpy.

26:48.740 --> 26:52.740
I am going to create a new file.

26:52.740 --> 26:55.740
The first copy is a new file, paste it in.

26:55.740 --> 26:58.740
Call it hello.cpy.

26:58.740 --> 27:01.740
That seems to be a cobalt thing.

27:01.740 --> 27:05.740
That's it recognized by Visual Studio.

27:07.740 --> 27:10.740
I just have this literally in that file.

27:10.740 --> 27:14.740
And then I'm supposed to...

27:14.740 --> 27:17.740
What was it?

27:17.740 --> 27:20.740
Run this, copy hello.cpy.

27:20.740 --> 27:23.740
To here.

27:23.740 --> 27:27.740
Is that supposed to be like that?

27:27.740 --> 27:29.740
Let's see what happens.

27:29.740 --> 27:34.740
I did that, noted the line for the copy statement in noworld.cbl.

27:34.740 --> 27:38.740
It's now underlined with the red wave line in the editor.

27:38.740 --> 27:42.740
No, it's not.

27:42.740 --> 27:47.740
But that's just because we're not using Visual Studio.

27:47.740 --> 28:02.740
Okay, this looks boring. This is not programming. This is product setup.

28:02.740 --> 28:06.740
Interesting tutorial. I want to compile this to see what happens.

28:06.740 --> 28:09.740
What? No.

28:09.740 --> 28:12.740
Did that actually work?

28:12.740 --> 28:14.740
Looks like it did, right?

28:14.740 --> 28:19.740
Let's just write something else to make sure that we're actually running what we think we're running.

28:19.740 --> 28:21.740
Here we are.

28:21.740 --> 28:26.740
So I guess that whole part was useless for us.

28:26.740 --> 28:32.740
And this looks like an import statement to me.

28:32.740 --> 28:37.740
Looks like a very flaky way to import something.

28:37.740 --> 28:41.740
But whatever.

28:42.740 --> 28:45.740
Okay, but so we know what copybooks are.

28:45.740 --> 28:48.740
They are pretty boring and shit.

28:48.740 --> 28:53.740
So let's continue debugging the helloCovol world application.

28:53.740 --> 28:56.740
Come on.

28:56.740 --> 28:59.740
This is not fun.

28:59.740 --> 29:02.740
I want to create a function or something.

29:02.740 --> 29:05.740
Maybe that doesn't even exist in Covol. What do I know?

29:05.740 --> 29:10.740
So add the following code on a new line immediately at the line for code.

29:10.740 --> 29:15.740
I don't want to do that. I don't want to debug right now.

29:15.740 --> 29:18.740
Creating a native Covol application. Let's start something else.

29:18.740 --> 29:24.740
Running unitest. What the hell is this tutorial?

29:24.740 --> 29:29.740
Here's all the boring things that doesn't make the program do what you want to do that you need to learn first.

29:29.740 --> 29:34.740
I understand why I hate taking programming classes in school because they were exactly like this.

29:34.740 --> 29:39.740
First we need to understand everything perfectly before the program does anything.

29:39.740 --> 29:44.740
And I was more like, I'd rather do something first.

29:44.740 --> 29:49.740
What else could you do here?

29:53.740 --> 29:57.740
Delta file editor. I want to do something fun.

29:57.740 --> 30:01.740
What is a native Covol application then?

30:01.740 --> 30:06.740
Now this website starts to work. No, it works again.

30:07.740 --> 30:10.740
Visual Covol.

30:10.740 --> 30:13.740
We're back in from start. I'm going to have to find something more fun.

30:13.740 --> 30:17.740
Microfokus. What's focus? Two micro for me.

30:17.740 --> 30:19.740
Let's dump this.

30:19.740 --> 30:23.740
We know how to write a Covol program, so let's start something else.

30:23.740 --> 30:28.740
Covol tutorial.

30:28.740 --> 30:32.740
Add tutorials point.

30:32.740 --> 30:35.740
React all the cookies.

30:35.740 --> 30:39.740
Overview. What can we get there?

30:43.740 --> 30:46.740
History and evolution of Covol.

30:46.740 --> 30:49.740
Environment setup.

30:49.740 --> 30:53.740
Not really interested in that right now.

30:56.740 --> 31:00.740
I know how to compile it.

31:00.740 --> 31:04.740
What else can we do? Program structure.

31:04.740 --> 31:09.740
Program, division, sections, paragraph, sentence, statements, and characters.

31:09.740 --> 31:12.740
Nice.

31:15.740 --> 31:18.740
Interesting.

31:23.740 --> 31:28.740
This part here looks a little bit like assembler to me.

31:28.740 --> 31:33.740
Specially with this move10 to WSID.

31:34.740 --> 31:37.740
Okej.

31:39.740 --> 31:45.740
You can tell that this tutorial is written by somebody that hates the world.

31:51.740 --> 31:55.740
Is this the code?

31:55.740 --> 32:02.740
Environment division, input, output, section, file control, select, file, and the organization is sequential.

32:03.740 --> 32:06.740
This is interesting.

32:06.740 --> 32:09.740
Am I going to write a program like this today?

32:09.740 --> 32:11.740
We'll see.

32:11.740 --> 32:14.740
Let me just do something funny now.

32:14.740 --> 32:17.740
Damn you tutorial, you suck.

32:17.740 --> 32:20.740
Basic syntax.

32:20.740 --> 32:25.740
Who is going to remember this when you start learning something?

32:25.740 --> 32:31.740
This is such a strange way to teach something.

32:32.740 --> 32:36.740
Okej, nu vet jag vad det är.

32:39.740 --> 32:45.740
Det här är att kolla en film och först kolla på alla kastor för att veta vilka personer existerar i den.

32:45.740 --> 32:49.740
Det är inte hur vi presentar information.

32:56.740 --> 32:59.740
Det här är inte en tutorial.

32:59.740 --> 33:03.740
Det här är en teknisk data sheet.

33:03.740 --> 33:07.740
Okej, let's go back, I give up.

33:15.740 --> 33:18.740
Vad kan vi se?

33:20.740 --> 33:23.740
Kanske kan vi se Cobaltborn.

33:23.740 --> 33:25.740
Låt oss se på den här.

33:25.740 --> 33:28.740
Vill du läsa hur man ska byta ditt första webbpagel?

33:28.740 --> 33:31.740
Nej, jag vill läsa Cobalt.

33:31.740 --> 33:34.740
Jag vill bara tacka till en av våra sponsor.

33:34.740 --> 33:36.740
Tack, bror.

33:36.740 --> 33:39.740
Du ska gå och checka dem ut, linken är i beskrivningen.

33:39.740 --> 33:43.740
De är en kodingbubkamp och de kan läsa dig webbdevelopment i Iowa i veckan.

33:43.740 --> 33:46.740
Jag har en fråga om hur man ska läsa Cobaltborn.

33:46.740 --> 33:51.740
Jag var på en artikel som talade om USA-banknaderna i att använda Cobaltborn.

33:52.740 --> 33:54.740
Jag har träffat nya människor för att läsa Cobaltborn

33:54.740 --> 33:57.740
och hålla de äldre legacysystemen.

33:57.740 --> 34:02.740
Jag frågar om Cobaltborn är en bra nyheter

34:02.740 --> 34:05.740
och om man ska läsa det.

34:05.740 --> 34:08.740
Jag tänkte att jag skulle ge min opinion om det.

34:08.740 --> 34:10.740
Jag har aldrig hört om det.

34:10.740 --> 34:13.740
Det är lite intressant.

34:13.740 --> 34:15.740
Men du har två saker som jag vill säga

34:15.740 --> 34:18.740
som kommer att gå mot dig.

34:18.740 --> 34:20.740
Det är svårt.

34:24.740 --> 34:26.740
Vi ska se vad det har att offer.

34:38.740 --> 34:40.740
Det mest funnande i så länge

34:40.740 --> 34:42.740
var det program som kalkulat.

34:42.740 --> 34:44.740
Det var en multiplikation.

34:45.740 --> 34:47.740
Jag har en tietäädivision

34:48.740 --> 34:50.740
med en börs långa del.

34:53.740 --> 34:55.740
Vi ska se om det funnande.

34:59.740 --> 35:05.740
J rust Championsð

35:05.740 --> 35:08.740
Du har en psycho三a

35:08.740 --> 35:12.740
Ska vi se vad som händer om vi förberederar data-divisionen?

35:12.740 --> 35:14.740
Ska programmen krascha?

35:14.740 --> 35:16.740
Ja.

35:18.740 --> 35:20.740
Jag tror att data-divisionen är nivån.

35:20.740 --> 35:23.740
Jag tror att det här är vad de kallar en section.

35:23.740 --> 35:25.740
Eller vad var det?

35:26.740 --> 35:29.740
Vill vi ha en övergivning sådär?

35:31.740 --> 35:35.740
Låt oss se om det var en section eller en paragraf eller något.

35:35.740 --> 35:38.740
Det här var en division och det här var en section.

35:38.740 --> 35:41.740
Så det här är egentligen en klipp eller en section.

35:41.740 --> 35:43.740
Eller vad vill du säga?

35:44.740 --> 35:46.740
En header för det här.

35:47.740 --> 35:49.740
Jag tror att det betyder att det här...

35:50.740 --> 35:52.740
Jag vet att det inte verkar, men...

35:53.740 --> 35:55.740
Okej, det sker en sak.

35:55.740 --> 35:57.740
Så det verkar en storlekare.

35:57.740 --> 35:59.740
Det är egentligen att reservera människan.

36:00.740 --> 36:02.740
Det sker en sak.

36:02.740 --> 36:06.740
0-1, num 1, pick 9.

36:06.740 --> 36:12.740
Jag tror att det här är hur jag reserverar människan.

36:14.740 --> 36:16.740
Låt oss ta fram programmet.

36:17.740 --> 36:19.740
För att...

36:20.740 --> 36:22.740
För att...

36:22.740 --> 36:25.740
För att ta fram tre nummer samtidigt.

36:26.740 --> 36:28.740
Låt oss göra en lördekollegang här.

36:28.740 --> 36:31.740
Kopie den här linjen, namn num 3.

36:31.740 --> 36:33.740
Och den första nummeren, 1-1.

36:33.740 --> 36:35.740
Vi har ingen avgång!

36:35.740 --> 36:37.740
Okej.

36:41.740 --> 36:44.740
Dritt nummer, num 3.

36:44.740 --> 36:46.740
Multi-by, by.

36:46.740 --> 36:50.740
By, num 3, resulta.

36:50.740 --> 36:52.740
Resulta är resulta.

36:52.740 --> 36:54.740
Låt oss se om det här verkar.

36:56.740 --> 36:58.740
Syntexerat, undanvisade by.

36:59.740 --> 37:01.740
Okej, jag kan inte göra det.

37:01.740 --> 37:05.740
Jag tror att det betyder att multipla kan bara multipla två nummer.

37:05.740 --> 37:08.740
Låt oss se vad som händer om vi googlar.

37:09.740 --> 37:11.740
Kobol.

37:15.740 --> 37:18.740
Kobol, multipla.

37:22.740 --> 37:24.740
Wow, dessa webbplatser.

37:25.740 --> 37:27.740
Låt oss se.

37:28.740 --> 37:30.740
Multi-by, multipla nummer.

37:30.740 --> 37:32.740
Format 1.

37:32.740 --> 37:34.740
Literal 1, data item.

37:34.740 --> 37:36.740
By, data item 2.

37:39.740 --> 37:41.740
Okej.

37:41.740 --> 37:44.740
Kan vi multipla tre saker...

37:45.740 --> 37:48.740
...utan att ha en extra...

37:48.740 --> 37:50.740
...inbetween variable?

37:51.740 --> 37:53.740
Låt oss se om vi kan...

37:55.740 --> 37:57.740
Jag ska experimentera lite här.

37:58.740 --> 38:00.740
Låt oss ha resulta.

38:03.740 --> 38:05.740
Låt oss kolla det här...

38:05.740 --> 38:07.740
...inbetween.

38:11.740 --> 38:13.740
Och utan att ge dig resulta här,

38:13.740 --> 38:15.740
vi ger till inbetween.

38:15.740 --> 38:17.740
Man kan ta ut det här.

38:17.740 --> 38:19.740
Man kan multipla...

38:19.740 --> 38:21.740
...num3

38:21.740 --> 38:23.740
...by, inbetween.

38:25.740 --> 38:27.740
Och ge det två resulta.

38:28.740 --> 38:30.740
Kan vi kompilera det här?

38:30.740 --> 38:31.740
Okej.

38:31.740 --> 38:33.740
Det kompileras åtminstone.

38:33.740 --> 38:35.740
Så vi multiplar två...

38:35.740 --> 38:36.740
...byr tre...

38:36.740 --> 38:38.740
...byr fyra.

38:38.740 --> 38:39.740
Ja.

38:39.740 --> 38:41.740
Det jobbade.

38:41.740 --> 38:43.740
Men det här var lite annorlunda.

38:43.740 --> 38:45.740
Vad händer?

38:45.740 --> 38:48.740
Kan vi multipla in till nummer 1 här?

38:50.740 --> 38:52.740
Jag vet inte om det verkar.

38:53.740 --> 38:55.740
Två, tre, fyra.

38:55.740 --> 38:57.740
Det har fungerat.

38:57.740 --> 39:00.740
Det betyder att jag har överrott en av den här.

39:03.740 --> 39:05.740
Det här är intressant.

39:05.740 --> 39:07.740
Jag ska rejala programmet...

39:07.740 --> 39:09.740
...och se om jag kan åka ut...

39:09.740 --> 39:11.740
...för att bara ha resultat...

39:11.740 --> 39:13.740
...och input.

39:18.740 --> 39:21.740
Och idé är att jag alltid multiplar...

39:21.740 --> 39:23.740
...det nästa input...

39:23.740 --> 39:26.740
...med resultat och ta den till resultat.

39:26.740 --> 39:28.740
Så...

39:28.740 --> 39:29.740
Först här...

39:29.740 --> 39:31.740
...jag kommer att läsa input.

39:31.740 --> 39:33.740
Det är kanske en reserve ord...

39:33.740 --> 39:35.740
...för att jag frågar det...

39:35.740 --> 39:37.740
...för att det inte är vit.

39:37.740 --> 39:38.740
Så...

39:38.740 --> 39:40.740
Okej, jag kan inte läsa input.

39:40.740 --> 39:42.740
Så jag kommer att läsa...

39:42.740 --> 39:44.740
...nummer.

39:44.740 --> 39:46.740
Ah, num, då.

39:47.740 --> 39:49.740
Num, num, num.

39:49.740 --> 39:51.740
Så jag alltid läser input...

39:51.740 --> 39:53.740
...till den nummervarivalen.

39:54.740 --> 39:56.740
Och direkt efter...

39:56.740 --> 39:58.740
...jag...

39:58.740 --> 40:00.740
...multiplar det med resultat...

40:01.740 --> 40:03.740
...och ta den till resultat.

40:06.740 --> 40:07.740
Och...

40:07.740 --> 40:08.740
Där går vi.

40:08.740 --> 40:09.740
Där går vi.

40:09.740 --> 40:11.740
Och då kan vi ta resultat.

40:11.740 --> 40:13.740
Se hur det fungerar.

40:14.740 --> 40:16.740
Två, tre, fyra.

40:16.740 --> 40:18.740
Ha, nej.

40:19.740 --> 40:21.740
Jag frågar, varför?

40:23.740 --> 40:24.740
Ah...

40:25.740 --> 40:27.740
...att ta nummervarivalen...

40:27.740 --> 40:29.740
...och ta resultat.

40:29.740 --> 40:31.740
Det kanske är...

40:31.740 --> 40:33.740
...att jag tror att vi...

40:33.740 --> 40:35.740
...hade ett switch tidigare.

40:35.740 --> 40:37.740
Jag frågar om det har en effekt.

40:41.740 --> 40:42.740
Vi ser.

40:43.740 --> 40:45.740
Två, tre, fyra.

40:45.740 --> 40:46.740
Nej.

40:46.740 --> 40:48.740
Okej, det gör lite mer mer.

40:48.740 --> 40:51.740
Så vad har det gjort tidigare när vi hade alla dessa nummer?

40:51.740 --> 40:54.740
Jag trodde att det här var en ekonomi av vad vi gjorde...

40:54.740 --> 40:56.740
...i början.

40:58.740 --> 41:00.740
Kanske gjorde vi faktiskt överrättat här...

41:00.740 --> 41:03.740
...men det har hänt med samma effekt...

41:05.740 --> 41:08.740
...för nummer ett var två.

41:08.740 --> 41:10.740
Jag är inte säker.

41:14.740 --> 41:16.740
Så här nummer ett blir två.

41:16.740 --> 41:19.740
Nummer två blir tre.

41:19.740 --> 41:21.740
Och vi tar det.

41:21.740 --> 41:23.740
Det här blir sikt här.

41:24.740 --> 41:26.740
Och vi gör det här.

41:27.740 --> 41:29.740
Jag är inte säker vad det här displayet är...

41:29.740 --> 41:30.740
...att exakt exakt.

41:30.740 --> 41:33.740
Det kanske inte är möjligt att göra vad jag gjorde där.

41:39.740 --> 41:40.740
Okej.

41:41.740 --> 41:43.740
Låt oss inte försöka det igen...

41:43.740 --> 41:44.740
...eller ska vi?

41:44.740 --> 41:46.740
Det är ganska skönt.

41:47.740 --> 41:49.740
Låt oss ta det ibaka.

41:50.740 --> 41:52.740
Jag är ibaka bara påbörjande i länge nu...

41:52.740 --> 41:54.740
...och försöker försöka få ut vad det är som det är.

41:56.740 --> 41:57.740
Så det verkar.

41:57.740 --> 41:58.740
Två, tre, fyra.

41:58.740 --> 41:59.740
Det är 24.

42:00.740 --> 42:03.740
Och kan jag gå ut med att inte använda nummer tre?

42:03.740 --> 42:04.740
Låt oss se.

42:04.740 --> 42:05.740
Låt oss använda nummer en här igen.

42:05.740 --> 42:07.740
Nej, vi kan definitivt göra det.

42:07.740 --> 42:09.740
Men låt oss använda den här.

42:11.740 --> 42:15.740
Och sen kan vi reusesa nummer en.

42:16.740 --> 42:17.740
Nummer en.

42:23.740 --> 42:25.740
Nej, vi har råd det till där.

42:27.740 --> 42:30.740
Så jag vill skriva det till resultatet där.

42:32.740 --> 42:35.740
Okej, nu kommer jag inte att skriva det.

42:35.740 --> 42:38.740
Nu kommer jag inte att skriva en ideell kod.

42:38.740 --> 42:41.740
Jag är bara att följa runt lite.

42:44.740 --> 42:47.740
Jag har lost track av vad jag tänkte där.

42:48.740 --> 42:50.740
Men jag ville gå ner.

42:50.740 --> 42:51.740
Jag vill bara ha...

42:51.740 --> 42:54.740
...så jag tar en input och multipliserar den med resultatet.

42:54.740 --> 42:55.740
Jag tar en input igen.

42:59.740 --> 43:01.740
Resultatet börjar med 0.

43:01.740 --> 43:04.740
Så jag kan inte, obviously, multipla den där.

43:04.740 --> 43:07.740
I the beginning I need at least two numbers to do that.

43:09.740 --> 43:12.740
Så let's see if we can get away with two and still have three.

43:14.740 --> 43:15.740
Så that makes sense.

43:15.740 --> 43:17.740
So we have to have at least two numbers.

43:18.740 --> 43:20.740
There are none zero.

43:21.740 --> 43:23.740
Before we multiply.

43:23.740 --> 43:26.740
And if we multiply with one of them there is zero.

43:26.740 --> 43:28.740
It will always be zero, obviously.

43:29.740 --> 43:32.740
So let's see if we multiply this into result.

43:32.740 --> 43:39.740
Not wait a minute.

43:41.740 --> 43:45.740
I feel like we should be able to do this in a smart clever way.

43:49.740 --> 43:52.740
If the first one we put into the result.

43:56.740 --> 43:59.740
Or what is it called in multiplication?

43:59.740 --> 44:00.740
The product.

44:03.740 --> 44:16.740
And let's look up with what are parts of multiplication called.

44:21.740 --> 44:23.740
There are the multipliers.

44:23.740 --> 44:24.740
Recall that.

44:24.740 --> 44:26.740
They are called factors.

44:27.740 --> 44:30.740
So I'm going to have a factor.

44:30.740 --> 44:33.740
And I'm going to have a product.

44:35.740 --> 44:38.740
And the product is actually this one.

44:40.740 --> 44:44.740
And then on the first input we input it into the product.

44:44.740 --> 44:48.740
Because one multiplied by one is always one.

44:48.740 --> 44:51.740
Or one multiplied by itself.

44:51.740 --> 44:54.740
The first number is always the product.

44:54.740 --> 44:56.740
If I only have one number.

44:56.740 --> 44:59.740
Then the second number we put in the factor.

44:59.740 --> 45:04.740
And then we multiply the factor with the product.

45:04.740 --> 45:06.740
Giving it a new product.

45:06.740 --> 45:12.740
Then we overwrite the factor and we do this thing again.

45:13.740 --> 45:16.740
Now I think we can run a program.

45:16.740 --> 45:18.740
At least that's what I'm hoping for.

45:18.740 --> 45:20.740
Result undefined.

45:20.740 --> 45:22.740
We need to print the product.

45:25.740 --> 45:27.740
2, 3, 4.

45:27.740 --> 45:28.740
Yes!

45:28.740 --> 45:29.740
That worked.

45:30.740 --> 45:33.740
So now I understand this a little bit better.

45:33.740 --> 45:36.740
But I would like to have a loop here.

45:36.740 --> 45:40.740
So that we can enter how many numbers we should multiply.

45:40.740 --> 45:44.740
Let's see if there is such a thing as a loop in cobalt.

45:47.740 --> 45:49.740
Loop statements.

45:50.740 --> 45:51.740
Nice.

45:51.740 --> 45:53.740
Perform through.

45:53.740 --> 45:57.740
Perform through is used to execute a series of paragraphs

45:57.740 --> 46:01.740
by giving the first and last paragraph names in the sequence.

46:03.740 --> 46:04.740
Okay.

46:04.740 --> 46:09.740
After executing the last paragraph the control is returned back.

46:09.740 --> 46:10.740
Okay.

46:10.740 --> 46:12.740
Inline perform.

46:12.740 --> 46:18.740
Statements inside the perform will be executed till end of the paragraph.

46:19.740 --> 46:21.740
And perform is reached.

46:21.740 --> 46:22.740
Syntax.

46:22.740 --> 46:26.740
The following syntax is a syntax of inline perform.

46:28.740 --> 46:29.740
Okay.

46:30.740 --> 46:32.740
Out of line perform.

46:32.740 --> 46:34.740
Here a statement is executed in one paragraph.

46:34.740 --> 46:38.740
And then the control is transferred to other paragraph or section.

46:38.740 --> 46:39.740
Okay.

46:39.740 --> 46:43.740
Perform paragraph one through paragraph two.

46:43.740 --> 46:45.740
Okay, interesting.

46:45.740 --> 46:52.740
They have a really interesting way of giving away execution context in this language.

46:52.740 --> 46:53.740
Okay.

46:53.740 --> 46:55.740
Perform display and perform.

46:55.740 --> 46:56.740
Okay.

46:56.740 --> 46:59.740
This looks a little bit like what we want to do.

46:59.740 --> 47:02.740
I guess these are paragraphs.

47:03.740 --> 47:04.740
No.

47:04.740 --> 47:13.740
Hmm.

47:13.740 --> 47:16.740
A para is the first paragraph, I guess.

47:16.740 --> 47:19.740
Perform display in a para.

47:19.740 --> 47:21.740
And perform.

47:21.740 --> 47:24.740
Perform see para through e para.

47:24.740 --> 47:28.740
I guess it just runs this, this and that.

47:28.740 --> 47:29.740
Okay.

47:29.740 --> 47:31.740
This is interesting.

47:31.740 --> 47:33.740
Hmm.

47:35.740 --> 47:36.740
Hmm.

47:36.740 --> 47:37.740
Okay.

47:37.740 --> 47:40.740
This looks more like something we should want to be doing.

47:40.740 --> 47:45.740
In perform until a paragraph is executed until a given condition becomes true.

47:45.740 --> 47:48.740
Sounds like a while loop.

47:48.740 --> 47:50.740
Or a for loop.

47:50.740 --> 47:59.740
With test before is a default condition and it indicates that condition is checked before the execution of statements in a paragraph.

48:01.740 --> 48:03.740
Okay.

48:04.740 --> 48:08.740
I think that I want to have two variables here.

48:08.740 --> 48:12.740
One call step and one call steps.

48:12.740 --> 48:15.740
I'm writing zero one here without knowing why.

48:15.740 --> 48:20.740
But the idea is that I want to have a number count up until another number.

48:20.740 --> 48:25.740
So imagine a for loop where you have i and length.

48:25.740 --> 48:33.740
So step is going to be this one, peak nine.

48:33.740 --> 48:36.740
I think that is a single digit number.

48:36.740 --> 48:39.740
And the value of that.

48:42.740 --> 48:46.740
I don't know, but I want to set it to zero and increment it.

48:46.740 --> 48:51.740
So zero one and is step last.

48:51.740 --> 48:58.740
Let's call it step current to be even more clear what I want to be doing.

48:58.740 --> 49:04.740
Pick nine value zeros.

49:04.740 --> 49:11.740
But I want this step last to be contained nine.

49:15.740 --> 49:22.740
I guess before we continue too long here we should probably see if we can put a number in step current.

49:22.740 --> 49:25.740
Or step last.

49:25.740 --> 49:32.740
Oh, I could ask how many numbers I want to multiply.

49:32.740 --> 49:45.740
So let's add a statement here and say how many numbers should be.

49:45.740 --> 49:50.740
Let's just ask how many numbers that's easier.

49:50.740 --> 49:56.740
And we accept that in the step last.

49:56.740 --> 50:05.740
Then let's just write out display.

50:05.740 --> 50:11.740
We will multiply.

50:11.740 --> 50:16.740
Can I write that numbers.

50:16.740 --> 50:20.740
And the step last will be here.

50:20.740 --> 50:24.740
Is that how you concatenate things.

50:24.740 --> 50:27.740
Oh, three.

50:27.740 --> 50:31.740
Oh, we will multiply four numbers that works. Nice.

50:31.740 --> 50:36.740
Okay, and we know the rest of the program works, but now how to use the for loop.

50:36.740 --> 50:43.740
I think let's output also a step.

50:43.740 --> 50:47.740
So I'm going to say.

50:47.740 --> 50:50.740
Enter.

50:50.740 --> 50:56.740
And then the step current.

50:56.740 --> 50:58.740
Enter.

50:58.740 --> 51:01.740
Number.

51:01.740 --> 51:03.740
Step current.

51:03.740 --> 51:08.740
And then slash off step last.

51:09.740 --> 51:12.740
One digit.

51:12.740 --> 51:16.740
With no advancing.

51:16.740 --> 51:24.740
And see what happens.

51:24.740 --> 51:26.740
Okay, good.

51:26.740 --> 51:30.740
We are at step one there, but we call it zero because it's zero based.

51:30.740 --> 51:32.740
Okay, interesting.

51:32.740 --> 51:37.740
We had an extra line here we don't need.

51:37.740 --> 51:40.740
And I guess can we concatenate this immediately.

51:40.740 --> 51:43.740
Can we add a one to the step current here.

51:43.740 --> 51:45.740
Like this in COBOL.

51:45.740 --> 51:47.740
Let's try it out.

51:47.740 --> 51:52.740
No, I cannot.

51:52.740 --> 51:55.740
So let's see.

51:55.740 --> 51:57.740
What should I do here?

51:57.740 --> 51:59.740
Should I?

51:59.740 --> 52:06.740
The cheap way of doing that is to just start the step at one.

52:07.740 --> 52:14.740
Okay, let's see how I assign a variable in COBOL.

52:14.740 --> 52:23.740
Assign variable in COBOL.

52:23.740 --> 52:28.740
Okay, this is going to be interesting.

52:29.740 --> 52:37.740
Okay, this is not just going to be too long declaring data.

52:37.740 --> 52:42.740
Actually, let's see, war loop in COBOL.

52:42.740 --> 52:46.740
How what we will learn from this loop statement.

52:46.740 --> 52:48.740
Okay.

52:48.740 --> 52:50.740
Perform times looks interesting too.

52:50.740 --> 52:55.740
Let's look at perform times.

52:55.740 --> 53:00.740
I guess if you write this perform a paragraph five times.

53:00.740 --> 53:07.740
If we can replace this with our step last.

53:07.740 --> 53:09.740
Then we should be able to run this.

53:09.740 --> 53:18.740
I guess we need to first paragraph the multiplication part.

53:18.740 --> 53:21.740
So let's create a paragraph here.

53:21.740 --> 53:24.740
Is that supposed to be in the procedure division?

53:25.740 --> 53:28.740
Will it always start with the first one?

53:28.740 --> 53:32.740
Actually, let's run add a paragraph here.

53:32.740 --> 53:34.740
See what happens.

53:38.740 --> 53:40.740
What happens if we just do this?

53:40.740 --> 53:43.740
Will that mean that program just stops immediately?

53:45.740 --> 53:47.740
Yes.

53:47.740 --> 53:49.740
So I guess it always starts.

53:49.740 --> 53:52.740
This looks probably like a go to statement.

53:52.740 --> 53:54.740
Might that be so.

54:00.740 --> 54:02.740
I think it is.

54:02.740 --> 54:04.740
So...

54:08.740 --> 54:15.740
So I was thinking if I put this in a paragraph.

54:15.740 --> 54:23.740
As I say it is set up para.

54:23.740 --> 54:26.740
And it displays how many numbers.

54:26.740 --> 54:29.740
And it accepts the step last.

54:29.740 --> 54:33.740
And it says how many numbers we are going to accept.

54:33.740 --> 54:37.740
Could it end a paragraph two somehow.

54:37.740 --> 54:41.740
Stop run stops the entire program.

54:45.740 --> 54:55.740
So I want to look for something that goes to set up para.

54:55.740 --> 54:57.740
Immediately here.

54:57.740 --> 54:59.740
Not sure this is a good way to write it.

54:59.740 --> 55:02.740
But my thinking is I want to have the entry point in the top.

55:02.740 --> 55:05.740
And I want to set up the structure of the program.

55:05.740 --> 55:07.740
So basically something like this.

55:07.740 --> 55:10.740
Run set up para.

55:10.740 --> 55:14.740
Then I want to do that thing that's called.

55:15.740 --> 55:18.740
Perform something para five times.

55:20.740 --> 55:30.740
So if imagine that this was called the calculation para.

55:35.740 --> 55:40.740
I could remove this.

55:45.740 --> 55:47.740
That's the idea at least.

55:48.740 --> 55:54.740
And then I would say perform calculation para.

55:57.740 --> 56:03.740
And I would say step last times.

56:03.740 --> 56:10.740
So if we run this as many times as you inputted here.

56:11.740 --> 56:18.740
And then in the end I would just say display result is product.

56:18.740 --> 56:21.740
So this way we will start here.

56:21.740 --> 56:23.740
We will set it up asking for the number.

56:23.740 --> 56:25.740
We run this five times.

56:25.740 --> 56:28.740
And then if we display the product.

56:28.740 --> 56:31.740
So it looks like there are definitely things missing here.

56:31.740 --> 56:33.740
We have the stop run.

56:33.740 --> 56:35.740
Which I'm not sure how it works.

56:35.740 --> 56:39.740
Let's look a little bit more here and see if we can have some hints.

56:41.740 --> 56:45.740
What does the stop run seems to be stopping the program completely I think.

56:47.740 --> 56:49.740
I would like to learn more.

56:51.740 --> 56:53.740
Here we go.

56:56.740 --> 56:59.740
So this means go to setup para.

56:59.740 --> 57:01.740
And I'm going to call this the init para.

57:01.740 --> 57:04.740
Even though I probably don't need a name here.

57:05.740 --> 57:08.740
I think before we continue too long.

57:08.740 --> 57:11.740
Let's just see if we got anything there.

57:11.740 --> 57:13.740
Calculation para undefined.

57:14.740 --> 57:16.740
But it is here.

57:21.740 --> 57:22.740
Maybe.

57:23.740 --> 57:26.740
No I don't know at all what's going on.

57:27.740 --> 57:29.740
I didn't expect that.

57:29.740 --> 57:30.740
That's interesting.

57:30.740 --> 57:32.740
Line 27.

57:33.740 --> 57:36.740
Oh this is not the definition.

57:36.740 --> 57:38.740
It complains.

57:40.740 --> 57:42.740
What does that mean?

57:42.740 --> 57:44.740
Do I need to define the paragraphs?

57:47.740 --> 57:49.740
In some other way.

57:50.740 --> 57:51.740
This.

57:52.740 --> 57:55.740
Looks like they just write the paragraph.

57:57.740 --> 58:00.740
And then here they go to be para.

58:01.740 --> 58:03.740
They do say with a dot.

58:04.740 --> 58:06.740
But we do that too there.

58:08.740 --> 58:10.740
I can't really see the difference.

58:11.740 --> 58:13.740
I have here.

58:20.740 --> 58:22.740
Go to setup para.

58:22.740 --> 58:23.740
No.

58:28.740 --> 58:30.740
What does this mean?

58:30.740 --> 58:33.740
In hello world in paragraph setup para.

58:33.740 --> 58:35.740
We had these two errors.

58:35.740 --> 58:37.740
Is that what it means?

58:45.740 --> 58:48.740
I think I made too many differences here.

58:48.740 --> 58:50.740
In the same time.

58:50.740 --> 58:52.740
Let's scroll this back.

58:52.740 --> 58:54.740
I know exactly what I want.

58:54.740 --> 58:57.740
Let's get the program back into a working state.

58:57.740 --> 59:00.740
So let's do one thing at a time.

59:00.740 --> 59:03.740
Or a somewhat working state at least.

59:03.740 --> 59:04.740
Or.

59:04.740 --> 59:06.740
One, two, three.

59:06.740 --> 59:07.740
Okay.

59:07.740 --> 59:10.740
So the program kind of works.

59:10.740 --> 59:12.740
But we don't have that number thing.

59:12.740 --> 59:13.740
So.

59:15.740 --> 59:17.740
What if we.

59:20.740 --> 59:22.740
Add a stop run here.

59:27.740 --> 59:28.740
Okay.

59:28.740 --> 59:29.740
That's good.

59:29.740 --> 59:32.740
But before the stop run, I want to jump down here.

59:32.740 --> 59:36.740
I'm actually going to use the exact same context they use here.

59:36.740 --> 59:38.740
So they have a para and b para.

59:38.740 --> 59:39.740
Not sure.

59:39.740 --> 59:41.740
I thought I could name this anything I want.

59:41.740 --> 59:43.740
But let's add a para in the top here.

59:43.740 --> 59:44.740
See what happens.

59:47.740 --> 59:48.740
Okay.

59:48.740 --> 59:50.740
That didn't destroy anything.

59:50.740 --> 59:54.740
So let's call this the B.

59:54.740 --> 59:55.740
B para.

59:57.740 --> 59:59.740
Let's see if it was destroyed.

59:59.740 --> 01:00:00.740
No.

01:00:02.740 --> 01:00:03.740
No.

01:00:03.740 --> 01:00:05.740
Let's see if it was destroyed.

01:00:05.740 --> 01:00:06.740
No.

01:00:06.740 --> 01:00:08.740
But in the end.

01:00:08.740 --> 01:00:10.740
Let's go to.

01:00:10.740 --> 01:00:12.740
Was that how it's called?

01:00:13.740 --> 01:00:14.740
Sure.

01:00:19.740 --> 01:00:21.740
So unconditional go to.

01:00:23.740 --> 01:00:27.740
So in the end here I want to go to be para.

01:00:33.740 --> 01:00:34.740
Ja.

01:00:34.740 --> 01:00:35.740
Is.

01:00:35.740 --> 01:00:38.740
Can I choose any name I want here?

01:00:38.740 --> 01:00:41.740
Because I want to do this with the calculation para.

01:00:41.740 --> 01:00:43.740
Calc para, we call it.

01:00:43.740 --> 01:00:47.740
Because I'm not sure I'm allowed to call this whatever I want to.

01:00:47.740 --> 01:00:49.740
Even though I thought so.

01:00:54.740 --> 01:00:56.740
Yeah, that seemed to work.

01:00:56.740 --> 01:00:58.740
Can I call this init para?

01:00:58.740 --> 01:00:59.740
As I wanted to.

01:00:59.740 --> 01:01:01.740
Or main para maybe.

01:01:02.740 --> 01:01:03.740
Without breaking.

01:01:10.740 --> 01:01:12.740
That seemed to work.

01:01:14.740 --> 01:01:16.740
So if I now.

01:01:32.740 --> 01:01:33.740
If I now.

01:01:33.740 --> 01:01:35.740
This is the thing that stops it.

01:01:36.740 --> 01:01:38.740
If I don't have this.

01:01:39.740 --> 01:01:42.740
Will I be able to display something else here?

01:01:42.740 --> 01:01:44.740
Will it jump back up here when it's done?

01:01:47.740 --> 01:01:48.740
Let's try this out.

01:01:50.740 --> 01:01:51.740
Woo!

01:01:51.740 --> 01:01:52.740
We call it.

01:01:53.740 --> 01:01:54.740
Two numbers.

01:01:54.740 --> 01:01:56.740
One, two, three.

01:01:56.740 --> 01:01:57.740
No.

01:01:57.740 --> 01:02:00.740
It just went down here and.

01:02:00.740 --> 01:02:01.740
Stopped.

01:02:01.740 --> 01:02:05.740
So I can't jump back up without explicitly.

01:02:06.740 --> 01:02:08.740
Telling it to I guess.

01:02:12.740 --> 01:02:16.740
Does that go for the perform too?

01:02:24.740 --> 01:02:27.740
This looks like something we want.

01:02:28.740 --> 01:02:32.740
I'm sure we're doing too much in the same time now.

01:02:32.740 --> 01:02:35.740
But perform calc para.

01:02:37.740 --> 01:02:38.740
Väring.

01:02:41.740 --> 01:02:45.740
One until from one by one until.

01:02:45.740 --> 01:02:47.740
Okay, this looks like a for loop.

01:02:49.740 --> 01:02:51.740
So I guess this will be step current.

01:02:57.740 --> 01:02:58.740
Från 1.

01:02:59.740 --> 01:03:00.740
By 1.

01:03:00.740 --> 01:03:02.740
Untill step current.

01:03:03.740 --> 01:03:04.740
Equals.

01:03:04.740 --> 01:03:05.740
Step last.

01:03:06.740 --> 01:03:07.740
Okay.

01:03:09.740 --> 01:03:12.740
Let's remove a bunch of bullshit here.

01:03:20.740 --> 01:03:21.740
And see what happens.

01:03:21.740 --> 01:03:23.740
I'm gonna move this up here too.

01:03:23.740 --> 01:03:24.740
I have no idea.

01:03:24.740 --> 01:03:26.740
It's probably breaking so many ways.

01:03:27.740 --> 01:03:28.740
How many numbers?

01:03:28.740 --> 01:03:29.740
Three.

01:03:29.740 --> 01:03:31.740
And the number one out of three.

01:03:32.740 --> 01:03:33.740
One.

01:03:34.740 --> 01:03:35.740
Two.

01:03:35.740 --> 01:03:36.740
Three.

01:03:37.740 --> 01:03:38.740
Four.

01:03:39.740 --> 01:03:40.740
Hmm.

01:03:41.740 --> 01:03:44.740
There was something going on here that kind of worked to be honest.

01:03:47.740 --> 01:03:49.740
We don't need a second number.

01:03:52.740 --> 01:03:53.740
And.

01:03:54.740 --> 01:04:01.740
But we do have a problem here that the first result needs to be stored in the previous one.

01:04:01.740 --> 01:04:03.740
Or in the factor.

01:04:10.740 --> 01:04:12.740
So how can I do that in for loop?

01:04:12.740 --> 01:04:14.740
I don't think I ever did that.

01:04:21.740 --> 01:04:22.740
Hard.

01:04:23.740 --> 01:04:26.740
I don't want to write this with an if statement to be honest.

01:04:28.740 --> 01:04:32.740
What if I could push all these numbers to an array?

01:04:34.740 --> 01:04:37.740
Is that even a thing in cobalt?

01:04:38.740 --> 01:04:39.740
Cobal.

01:04:41.740 --> 01:04:42.740
Array.

01:04:45.740 --> 01:04:46.740
Array table concept.

01:04:46.740 --> 01:04:47.740
This looks hard.

01:04:48.740 --> 01:04:49.740
Ooh.

01:04:49.740 --> 01:04:50.740
Ooh.

01:05:01.740 --> 01:05:02.740
Okej.

01:05:07.740 --> 01:05:10.740
I think it may be not that hard.

01:05:10.740 --> 01:05:12.740
I'm very unused to this syntax.

01:05:14.740 --> 01:05:15.740
But.

01:05:16.740 --> 01:05:24.740
I'm not sure if I can write this right now without being completely confused on every step of the way.

01:05:28.740 --> 01:05:30.740
Let's see what this says.

01:05:31.740 --> 01:05:33.740
Cobal arrays or tables.

01:05:34.740 --> 01:05:35.740
Single dimensional arrays.

01:05:35.740 --> 01:05:40.740
Arrays are data structures that are used to simplify coding and improve processing efficiency.

01:05:40.740 --> 01:05:45.740
The primary uses of arrays are to define a series of similar like format i input and output.

01:05:45.740 --> 01:05:46.740
Okej.

01:05:46.740 --> 01:05:47.740
I know this.

01:05:47.740 --> 01:05:48.740
Deklaring an array.

01:05:48.740 --> 01:05:51.740
Arrays assault cobalt data items.

01:05:51.740 --> 01:05:53.740
Must be declaring a data division.

01:05:53.740 --> 01:06:00.740
But are distinguished from scaler unsubscripted data items by use of the occurs class in their data definition.

01:06:01.740 --> 01:06:07.740
Arrays may be declared for elementary or group data items at level 02 to 49.

01:06:08.740 --> 01:06:13.740
To declare an array of elementary data items use the class occurs int num times.

01:06:14.740 --> 01:06:19.740
In the data definition int num is any positive integer specifying the number of elements in the array.

01:06:20.740 --> 01:06:25.740
Daily temp 05 temp occurs 25 times pick 999.

01:06:26.740 --> 01:06:27.740
Okej.

01:06:27.740 --> 01:06:32.740
I don't know what this first number means but I think that is how to define it.

01:06:33.740 --> 01:06:38.740
This looks more like something I am interested in.

01:06:42.740 --> 01:06:48.740
What this is number is that just like in the order it executes or something.

01:06:49.740 --> 01:06:51.740
Just like in basic.

01:07:02.740 --> 01:07:14.740
Okej, this looks interesting too.

01:07:15.740 --> 01:07:22.740
So I am thinking that I should be able to get away with this.

01:07:23.740 --> 01:07:30.740
So instead of factor I am going to have factors.

01:07:31.740 --> 01:07:33.740
And what is temp?

01:07:36.740 --> 01:07:38.740
What does it mean temp here?

01:07:40.740 --> 01:07:42.740
It occurs 25 times pick.

01:07:42.740 --> 01:07:44.740
So I guess this is we have two instances of temp.

01:07:44.740 --> 01:07:46.740
But why do we need daily temp?

01:07:47.740 --> 01:07:48.740
Okej.

01:07:48.740 --> 01:07:54.740
This example occurs an array named temp that contains 24 elements data items each of pick 999.

01:07:54.740 --> 01:08:02.740
So pick 999 I think is a number that has 3 respots that can contain up to number 9 in each of them.

01:08:02.740 --> 01:08:07.740
And it's referenced like this temp 1 temp 24 Okej.

01:08:07.740 --> 01:08:13.740
Daily temp is not itself an array but the group data item 72 characters long.

01:08:13.740 --> 01:08:16.740
24 times 3 Okej.

01:08:16.740 --> 01:08:20.740
So that's 24 there and the 3 bytes are basically I guess.

01:08:21.740 --> 01:08:26.740
And it's 0,2 to 49 level data frame can contain an occurs clause.

01:08:26.740 --> 01:08:31.740
So I guess the daily temp we probably don't need it.

01:08:31.740 --> 01:08:35.740
But I am going to call it factors.

01:08:37.740 --> 01:08:39.740
And there is a dot there right?

01:08:39.740 --> 01:08:40.740
Yeah.

01:08:40.740 --> 01:08:44.740
And I am going to call this factor.

01:08:44.740 --> 01:08:50.740
But I need to be able to say how I need this to be variable.

01:08:50.740 --> 01:08:56.740
Because I input the number dynamically in my program.

01:08:56.740 --> 01:08:59.740
And I don't know how to do that yet.

01:08:59.740 --> 01:09:02.740
I guess I could just take a very high number.

01:09:02.740 --> 01:09:04.740
I feel it with the ones.

01:09:04.740 --> 01:09:08.740
But it is a little bit dumb.

01:09:08.740 --> 01:09:11.740
But I am pretty dumb when I write cobalt.

01:09:11.740 --> 01:09:13.740
So I must admit.

01:09:18.740 --> 01:09:24.740
So I am not sure how to do this in a way that I am not going to get too confused.

01:09:24.740 --> 01:09:27.740
I am literally still subscript here.

01:09:27.740 --> 01:09:29.740
Well...

01:09:31.740 --> 01:09:34.740
Before I do too much maybe I should just try this out.

01:09:34.740 --> 01:09:37.740
So let's put a 9 here.

01:09:41.740 --> 01:09:43.740
Should I do this?

01:09:44.740 --> 01:09:46.740
And put values 1.

01:09:46.740 --> 01:09:48.740
Can I do that?

01:09:48.740 --> 01:09:49.740
The idea is here.

01:09:49.740 --> 01:09:52.740
Like if I have a ton of factors in the program.

01:09:52.740 --> 01:09:54.740
Basically multipliers.

01:09:54.740 --> 01:09:56.740
And the rest of them is 1.

01:09:56.740 --> 01:09:59.740
It doesn't matter if I multiply them all in the end of the program.

01:09:59.740 --> 01:10:02.740
I know it's really really bad.

01:10:02.740 --> 01:10:04.740
But I also want to see if this works.

01:10:04.740 --> 01:10:06.740
Let's compile this and see what happens.

01:10:06.740 --> 01:10:11.740
I don't even know if this is at all going to work.

01:10:13.740 --> 01:10:16.740
Okej, the setup of the compilation seems to work.

01:10:18.740 --> 01:10:20.740
So let's do something more then.

01:10:20.740 --> 01:10:23.740
We can remove the factor.

01:10:23.740 --> 01:10:26.740
So now the program should probably break, I hope.

01:10:26.740 --> 01:10:28.740
No.

01:10:29.740 --> 01:10:32.740
Oh, we are not using my factor right now.

01:10:32.740 --> 01:10:34.740
I guess...

01:10:36.740 --> 01:10:42.740
What I should do here is accept this number into the factor step current.

01:10:47.740 --> 01:10:49.740
Not sure if this works.

01:10:49.740 --> 01:10:52.740
Let's display what we did too.

01:10:53.740 --> 01:10:55.740
Stored.

01:10:57.740 --> 01:11:01.740
And then factor step current.

01:11:01.740 --> 01:11:03.740
Three.

01:11:03.740 --> 01:11:05.740
We will multiply three numbers.

01:11:05.740 --> 01:11:07.740
Two.

01:11:07.740 --> 01:11:08.740
Three.

01:11:08.740 --> 01:11:09.740
And four.

01:11:09.740 --> 01:11:11.740
Whoa!

01:11:11.740 --> 01:11:14.740
That was actually almost working.

01:11:17.740 --> 01:11:20.740
We have some of by one error here.

01:11:24.740 --> 01:11:26.740
I think...

01:11:26.740 --> 01:11:28.740
Can we do this?

01:11:28.740 --> 01:11:30.740
I think...

01:11:30.740 --> 01:11:32.740
Can we have...

01:11:32.740 --> 01:11:34.740
Put this like this.

01:11:34.740 --> 01:11:36.740
Step current is...

01:11:36.740 --> 01:11:39.740
Until it's less or equal.

01:11:41.740 --> 01:11:44.740
Okej, let's solve this later.

01:11:44.740 --> 01:11:46.740
They were off by one error.

01:11:46.740 --> 01:11:51.740
But in the end here, I want to multiply all the factors.

01:11:58.740 --> 01:12:00.740
Kan we do that here, maybe?

01:12:00.740 --> 01:12:02.740
Perform until this.

01:12:02.740 --> 01:12:06.740
It looks like until number data can be used as a subscript.

01:12:06.740 --> 01:12:08.740
I don't know what subscript is about.

01:12:09.740 --> 01:12:14.740
It looks like we can multiply things here.

01:12:28.740 --> 01:12:30.740
I'm not sure.

01:12:30.740 --> 01:12:33.740
I'm ready to do this just yet.

01:12:38.740 --> 01:12:42.740
I first want to get a good concept of what this program does.

01:12:42.740 --> 01:12:44.740
So let's remove...

01:12:45.740 --> 01:12:48.740
Let's print something out there in the product.

01:12:48.740 --> 01:12:50.740
No.

01:12:52.740 --> 01:12:55.740
Maybe it was easy to do the thing we did before.

01:12:55.740 --> 01:12:57.740
I guess if the first number is one.

01:12:58.740 --> 01:13:01.740
Okej, I guess I can cheat a little bit here.

01:13:02.740 --> 01:13:05.740
If I store the first result as one.

01:13:06.740 --> 01:13:08.740
I don't need this array.

01:13:10.740 --> 01:13:12.740
So I'm going to scroll back a little bit here.

01:13:13.740 --> 01:13:15.740
I fake it.

01:13:16.740 --> 01:13:19.740
So here now we have the factor and the product.

01:13:20.740 --> 01:13:22.740
And the product...

01:13:22.740 --> 01:13:25.740
It's going to start out by being one.

01:13:27.740 --> 01:13:30.740
I think that is possible.

01:13:31.740 --> 01:13:36.740
Then every time we accept the number into the factor.

01:13:37.740 --> 01:13:41.740
We multiply the factor with the product.

01:13:43.740 --> 01:13:45.740
I think that should work.

01:13:46.740 --> 01:13:49.740
Where is the multiplication step?

01:13:49.740 --> 01:13:51.740
Step.

01:13:52.740 --> 01:13:54.740
Let's scroll back.

01:13:59.740 --> 01:14:00.740
There we go.

01:14:00.740 --> 01:14:02.740
So accept the factor.

01:14:02.740 --> 01:14:05.740
And then we add the factor to the product.

01:14:05.740 --> 01:14:07.740
So if the product starts at one.

01:14:08.740 --> 01:14:11.740
Then we go down here and we accept the factor.

01:14:11.740 --> 01:14:13.740
Then we store the factor.

01:14:13.740 --> 01:14:16.740
We multiply the factor by the product into the product.

01:14:16.740 --> 01:14:18.740
Then we do that again and again.

01:14:19.740 --> 01:14:22.740
For all until we reach the step last.

01:14:22.740 --> 01:14:24.740
I think we have something going here.

01:14:27.740 --> 01:14:28.740
How many digits?

01:14:28.740 --> 01:14:29.740
Five.

01:14:29.740 --> 01:14:31.740
No, let's start with four.

01:14:32.740 --> 01:14:33.740
Enter number one of four.

01:14:33.740 --> 01:14:34.740
Two.

01:14:34.740 --> 01:14:35.740
Enter number two of four.

01:14:35.740 --> 01:14:36.740
Three.

01:14:36.740 --> 01:14:37.740
Enter number three out of four.

01:14:37.740 --> 01:14:38.740
Four.

01:14:38.740 --> 01:14:40.740
Result is 24.

01:14:40.740 --> 01:14:41.740
Wow!

01:14:41.740 --> 01:14:43.740
A program kind of works.

01:14:43.740 --> 01:14:45.740
But it has an off by one error.

01:14:45.740 --> 01:14:47.740
So let's fix that.

01:14:47.740 --> 01:14:50.740
Then I think the first course in COBOL is complete.

01:14:50.740 --> 01:14:53.740
Might be the world's shittiest COBOL program to bonus.

01:14:53.740 --> 01:14:55.740
But I'm pretty proud of myself still.

01:14:55.740 --> 01:15:00.740
I only took almost two hours to make a shit program.

01:15:00.740 --> 01:15:05.740
So how to solve this off by one error.

01:15:05.740 --> 01:15:09.740
I guess we could have, we need a minus somewhere.

01:15:11.740 --> 01:15:12.740
Or.

01:15:12.740 --> 01:15:17.740
A step last.

01:15:17.740 --> 01:15:19.740
Why is a step current?

01:15:21.740 --> 01:15:22.740
I guess.

01:15:26.740 --> 01:15:28.740
If this was while.

01:15:31.740 --> 01:15:33.740
No, that doesn't work.

01:15:33.740 --> 01:15:35.740
Let's see what options we have here for looping.

01:15:37.740 --> 01:15:39.740
Loop statements.

01:15:40.740 --> 01:15:45.740
We have the perform until.

01:15:47.740 --> 01:15:49.740
Wasn't there something else?

01:15:49.740 --> 01:15:51.740
Perform times is pretty interesting.

01:15:55.740 --> 01:15:57.740
Let's try this.

01:15:59.740 --> 01:16:03.740
Perform calc step last times.

01:16:10.740 --> 01:16:11.740
Two.

01:16:11.740 --> 01:16:12.740
One.

01:16:12.740 --> 01:16:13.740
Two.

01:16:13.740 --> 01:16:14.740
Okay, that worked.

01:16:14.740 --> 01:16:17.740
But we have to update the step current.

01:16:19.740 --> 01:16:20.740
Mm-hm.

01:16:20.740 --> 01:16:21.740
And I guess.

01:16:24.740 --> 01:16:26.740
We could do that.

01:16:29.740 --> 01:16:32.740
By just adding to step current here.

01:16:34.740 --> 01:16:35.740
Add.

01:16:36.740 --> 01:16:37.740
Add.

01:16:38.740 --> 01:16:39.740
One.

01:16:39.740 --> 01:16:40.740
Two.

01:16:40.740 --> 01:16:41.740
Step current.

01:16:44.740 --> 01:16:46.740
Let's try that out.

01:16:47.740 --> 01:16:48.740
Three.

01:16:48.740 --> 01:16:49.740
One.

01:16:49.740 --> 01:16:50.740
Two.

01:16:50.740 --> 01:16:51.740
Three.

01:16:51.740 --> 01:16:52.740
Ah, look at that.

01:16:52.740 --> 01:16:53.740
That worked.

01:16:53.740 --> 01:16:54.740
COBOL is really good.

01:16:54.740 --> 01:16:57.740
I have some fluency in COBOL now.

01:16:57.740 --> 01:16:59.740
That was pretty satisfying.

01:16:59.740 --> 01:17:02.740
Even though this whole program is quite silly.

01:17:02.740 --> 01:17:04.740
I like it.

01:17:04.740 --> 01:17:06.740
I feel accomplished today.

01:17:06.740 --> 01:17:09.740
Let's see if there is anything we should clean up.

01:17:09.740 --> 01:17:11.740
Let's change the author.

01:17:12.740 --> 01:17:13.740
This method.

01:17:15.740 --> 01:17:16.740
Yeah.

01:17:17.740 --> 01:17:19.740
Example program using.

01:17:22.740 --> 01:17:23.740
Perform.

01:17:23.740 --> 01:17:24.740
We are using.

01:17:25.740 --> 01:17:26.740
Accept.

01:17:26.740 --> 01:17:28.740
And we are using.

01:17:29.740 --> 01:17:30.740
Times.

01:17:35.740 --> 01:17:36.740
Kollekt.

01:17:36.740 --> 01:17:38.740
A number of user.

01:17:38.740 --> 01:17:40.740
The finable integers.

01:17:41.740 --> 01:17:43.740
Finable integers.

01:17:43.740 --> 01:17:44.740
And.

01:17:45.740 --> 01:17:47.740
Multiply them.

01:17:48.740 --> 01:17:49.740
With.

01:17:50.740 --> 01:17:51.740
With.

01:17:51.740 --> 01:17:54.740
Low memory footprint.

01:17:55.740 --> 01:17:56.740
I can't write.

01:17:56.740 --> 01:17:57.740
I'm having so much fun.

01:17:57.740 --> 01:17:59.740
Low memory footprint.

01:17:59.740 --> 01:18:02.740
And return the result.

01:18:02.740 --> 01:18:03.740
No display.

01:18:05.740 --> 01:18:06.740
And this.

01:18:06.740 --> 01:18:08.740
Display the result.

01:18:08.740 --> 01:18:09.740
Data division.

01:18:09.740 --> 01:18:10.740
Step current.

01:18:10.740 --> 01:18:11.740
Step last.

01:18:11.740 --> 01:18:12.740
Fantastic.

01:18:13.740 --> 01:18:14.740
Okay.

01:18:15.740 --> 01:18:16.740
Pretty nice.

01:18:16.740 --> 01:18:17.740
I must say.

01:18:19.740 --> 01:18:21.740
Wait, I need to upload this to GitHub.

01:18:24.740 --> 01:18:25.740
East.

01:18:26.740 --> 01:18:27.740
Wacka the whack.

01:18:27.740 --> 01:18:28.740
Det.

01:18:33.740 --> 01:18:35.740
My first global program.

01:18:37.740 --> 01:18:38.740
We call it.

01:18:39.740 --> 01:18:40.740
Calculate.

01:18:40.740 --> 01:18:41.740
Like.

01:18:42.740 --> 01:18:43.740
Bank.

01:18:43.740 --> 01:18:44.740
CBL.

01:18:49.740 --> 01:18:50.740
There we go.

01:18:51.740 --> 01:18:52.740
We are public.

01:18:53.740 --> 01:18:55.740
Gonna leave this link in the subscription.

01:18:55.740 --> 01:18:57.740
I mean in the description.

01:18:59.740 --> 01:19:00.740
I kinda like it.

01:19:00.740 --> 01:19:01.740
I'm.

01:19:02.740 --> 01:19:05.740
Happy that you took time and looked at how to learn COBOL.

01:19:06.740 --> 01:19:08.740
The world is our oyster now.

01:19:08.740 --> 01:19:11.740
Let's go get those banks and get a fat paycheck.

01:19:12.740 --> 01:19:13.740
For the summer.

01:19:13.740 --> 01:19:14.740
Alright.

01:19:14.740 --> 01:19:15.740
Thanks.

01:19:15.740 --> 01:19:16.740
See you later.

