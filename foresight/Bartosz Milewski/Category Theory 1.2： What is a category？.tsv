start	end	text
0	19600	So that was the philosophical part of my talk, and I will be slowly moving towards really
19600	30200	more practical, I mean, practically in the sense of mathematical stuff, not so much philosophy.
30200	45040	But from all this talk about how our brains work, the important part is that we want to
45040	67160	be able to, the major tools in our arsenal are abstraction, composition, and I'm going
67160	81960	to add one more thing to this identity. So as I said, abstraction means we want to get
81960	90880	rid of the details, we want to forget about the assembly language or machine language
90880	98520	of what we are doing, and that's not only in programming, it's also in mathematics or
98520	109920	in physics, we want to get rid of unnecessary details. So once we get rid of unnecessary
109920	117800	details, then suddenly what happens is that things that were different, but they were
118240	126120	different because of unnecessary details, they suddenly become identical. Like if you
126120	135080	have, let's say, two billion balls of the same color, they are not really identical
135080	140880	if you look under the microscope, they have different maybe scratches, maybe they have
140960	148040	different configuration of atoms, but you can replace one with another when you are
148040	160160	playing billiards. So once you abstract, things that used to be different now become identical.
160160	166080	This is why we have this notion of identity, and this notion of identity because of abstraction
166080	173960	is always non-trivial. So there are things that are strictly identical, so you can replace
173960	179320	one with another and you won't notice any difference, but then there are things that
179320	189360	are identical for all intents and purposes. And in mathematics, this is a very, very important
189440	197200	thing, that there is this distinction between, it's really the same, or it's not really
197200	207200	the same, but we will look at it as if it were the same. And there is even a whole foundation
207200	213200	theory that's being now developed that's based on like distinguishing between what's
214040	221040	not identical, it's called homotopy type theory. It's a very hot topic right now in mathematics
221600	228600	that just tries to solve this one problem of what are things that are equal and what
228600	238600	are things that are almost equal, or as they say, isomorphic. Isomorphism and equality the
238600	252840	same, or not, should be treated the same way, or not, and so on. So composition and identity,
252840	263840	these two things, they just define category theory. This is all there is in category theory,
264440	275440	it just encompasses composition and identity. So you are now ready for the first definition,
276080	283080	definition of category. And I wish I could define category, what a category is, very
284080	291080	precisely, but I can't. So I will be using terms like a bunch. A category is a bunch of objects.
302240	309240	You would want me to say it's a set of objects, because a set has a precise mathematical meaning,
310240	320240	but it's not. So you have categories that have sets of objects and it's fine, but not
320240	326240	all categories have sets of objects. It turns out that there are things that are bigger than
326240	333240	sets. And you might think, what can be bigger than a set? What's a set? A set is something
334000	341000	that has a bunch of elements. A set is defined by membership. Is this element a member of
344600	351600	the set or not? But then you can build sets with sets. You can say, I have a set of sets
354240	361240	that are two element sets. And I have a set of all sets that are of this particular shape.
364120	370240	So elements of a set can also be sets. From a set theory point of view, everything is
370240	377240	a set. They have the set hammer and everything is a set nail for that. So sets are built
379800	386800	from sets and so on. And then you can say, how do I define a set? I will specify what
387760	394760	kind of elements it has. So I can say, I have a set of sets. There are some sets that are
397080	404080	members of themselves and there are sets that are not. A set of dogs is not a dog. So that's
407120	414120	one. But a set of... Well, it was a good example of a set that is a member of itself.
416800	423800	A set that contains only itself. A set that contains only itself. Okay.
428680	435680	So now if you can define a set that... So you can also define a set that's a set of
435720	442720	sets that are not members of itself. And then you can ask, does this set... Is this set
446960	453960	a member of itself or not? If it is a member of itself, then it should not belong to the
454240	461240	set. And if it's not, it should belong. It's like with the barber's paradox. If he shapes
461480	466640	himself, then he should not shape himself. If he doesn't shape himself. So you get into
466640	473640	these paradoxes in set theory. So if I say, okay, a category is a set of objects, then
476880	483880	I immediately get into this problem. And in particular, you cannot define a set of all
483880	490880	sets for some other reason, right? Because it's too big. It's like a power set of... It
491680	496640	would have to contain all its subsets as well. So it's a set that contains all sets, including
496640	503640	its subsets and so on. So these are the mind-blowing things that set theories that are thinking
503920	510920	about and they cannot sleep at night. So a category says... A category theory says, let's
512640	519640	not worry about it, right? Well, they do worry about it, but they have ways of doing this.
519820	526820	So I will say it's a bunch of objects, okay? So a category consists of objects. And then
534400	541400	without specifying further whether they form a set or a bunch or a class, sometimes it's
541400	548400	called a class, which is like less precise than the set. And these objects, I would just
551480	558480	draw as dots, you know? And arrows. And these arrows are called also morphisms.
563760	570760	I'll be sometimes saying morphisms, sometimes I'll be saying arrows. So a morphism or an
573200	580200	arrow is something that goes between two objects. So you have an object A and you have an object
580720	587720	B and you have an arrow between them and you call it F, okay? And now you might want
588720	595720	to ask, you know, but what's an object? Right? And I can't tell you, okay? An object is primitive
604520	611520	in this theory. It has no properties. It has no structure, internal structure. It's nothing.
612520	619520	It's like the atom. It's a point. It has no properties, okay? What's a morphism? Well,
626880	633880	a morphism is also a primitive. It has no properties, well, except that every arrow has
633880	640880	a beginning and an end, okay? So that's the important thing. So in fact, the reason for
646600	653600	having objects is so that you can mark the ends of arrows, okay? They don't serve any
654480	661480	other purpose as just being names for the ends of arrows or identifying the ends of
662480	669480	arrows, okay? And notice that this is like, this is really funny that we are using arrows
676040	683040	here. It's like going back to this, what I talked about, the primitive human beings hunting
684040	691040	mammoths with bows and arrows, right? This is really a very interesting thing that we
695960	702960	perceive the universe through these notions that were developed by hunter-gatherers, right?
705000	712000	They had, they described the world in terms of, you know, the sense of, you know, the
713040	720040	spatial relationships, right? For instance. So they, they, like when I'm talking about
720480	727480	category theory and when mathematicians talk about it, they will put things in space, maybe
728160	734320	with their hands, manipulate. So we know how to manipulate things, right? We know how to
734320	740600	position things in space. We talk about spatial relationships. Something is above, something
740600	747600	is below, higher level of abstraction, lower level of abstraction. These are all spatial
747720	754720	relationships, right? Now hunter-gatherers also understand movement. It comes from here,
756320	763320	goes here. This is movement. This is from arrow, from A to B, right? It has this little
763600	770040	thing here with barbs, right? So when you, when you hit the animal, it can't just pull
770120	777120	it because it's, okay? So, and of course we have social language. We, we, hunter-gatherers
784520	791520	are, we're social animals. So, so they talk about, you know, relationships between things
792320	799320	in terms of this guy, points at this guy and, and, and by movement, kind of, you know,
800040	805320	going from this place to that place, through this place and so on. So we'll be using this
805320	812320	language all the time and I want you to, like, realize what kind of language we are using
812800	819800	and how it actually constrains us, okay? But anyway, so we have objects and objects we
823560	828640	draw in some kind of spatial relationship usually because we are using the spatial part
828640	834800	of our brain. We have morphisms which are arrows, so they suggest some kind of movement
834800	841800	and relationship between people. So what kind of things can happen? I mean, we can have,
841800	848800	let's say, you know, multiple arrows going between objects. So if you have object A
861280	868280	and B, you can have zero or more arrows going between them. So every time you define a category
869280	876280	you specify, you know, what is the, what are the objects of this category and for each
876440	883440	pair of objects, right, you specify the arrows that go between these objects. Some objects
884080	889320	are not connected with arrows, other objects are connected with one arrow, other objects
889320	896320	are connected with infinitely many arrows, could be uncountable number of arrows going
896840	902280	between two objects, okay? So, like, if you have an idea that the category is sort of
902280	909280	like a graph, that's a good idea, right, except that you have to be open-minded about what
911400	918400	the graph is. It might have infinitely many nodes and it can have infinitely many arrows
918520	925520	between, between two nodes or it could have zero or, you know. But you have to expand
926320	933320	your mind around this. And of course you can have arrows going from B to A as well, right?
937440	943740	And you can have arrows going from B back to B or from A back to A. You can have multiple
943740	949960	arrows going from A to A, right? And so on. So all these are possibilities. Sometimes people
949960	956540	get stuck and I get questions, you know, like, how is it possible that you can have more
956540	961960	than one arrow? Aren't they all the same? No, they are different, you know. It's like,
961960	967960	you can have infinitely many or uncountable number of arrows going from A back to A, you
967960	974960	know, and it's okay. You just give them different names, you know, okay, this is F, this is G,
974960	981960	this is H, right? So this is what a category is, okay? Now that's not all. That's not all
985400	992400	because that doesn't, that just tells us about what are the elements of category. We haven't
993600	1000600	talked about these two things. Composition. So composition is a property, very simple
1000600	1007600	property that if you have an arrow from A to B and you have another arrow from B to
1011040	1018040	C, so you have object A, object B and object C and you have these two arrows, then there
1018480	1025480	always must exist an arrow that's a composition of these. So if I call this one F and call
1025880	1032880	this one G, I'm using these names F and G that suggest functions, right? Because at
1033120	1040120	some point this will be one of our models for a category. So this is called G after F,
1044160	1051160	after is this little circle. So this arrow is called G after F. And here we have this
1052120	1059120	idea that going from A to B using F and going from B to C using G is identical to going
1068600	1075600	from A to C using this path called G after F, okay? So this arrow is identical to the
1076600	1083600	composition of these arrows, okay? It's very important to understand that there might be
1084080	1091080	multiple arrows going from A to C, right? But this one is a composition of these two
1092120	1099120	and it must exist, okay? So for every composable pair of arrows, composable means the end of
1100120	1106120	one is the same as the beginning of the other. And here it's important that we have these
1106120	1113120	objects to identify the ends and the beginnings, right? So the end of this is B, the beginning
1114600	1121600	of this is B. So they are composable, right? And if they are composable then there must
1121760	1128760	be a composition, there must be an arrow going from here to here. So this is called composition
1129880	1136880	check. Now when we are defining a category, the category is defined by giving us objects,
1146640	1153640	saying what the objects are and arrows. And then defining composition, which is sort of
1154640	1161640	like a multiplication table for arrows. So for every two arrows you have to define what
1162080	1168200	is their composition. It's a humongous multi-dimensional multiplication table, you know, or infinitely
1168200	1174200	dimensional multiplication table, right? For every three objects you have to define all
1174200	1180700	possible combinations in which you can compose arrows going between these objects and so
1180780	1187780	on, right? So it's a humongous multiplication table. And the whole information about the
1188300	1195300	category is in this multiplication table, okay? So remember, this is the multiplication
1195900	1202900	table for a category, it's a composition table, how you compose morphisms. And different
1203900	1210900	composition tables will give you different categories. Because since objects don't have
1216380	1221620	structures, since arrows don't have structure, they don't contain any information. But the
1221620	1227580	composition contains the information. And we just like want to encode everything, everything
1227580	1234580	absolutely in this composition, okay? Now, identity for every object, it's called A,
1245540	1252540	there is an identity arrow. We will call it ID. Sometimes ID with a subscript A. This
1252540	1259540	is identity for the object A. So there is this arrow that we call identity. There's
1261660	1268660	one per object. For every object in a category, there is an identity for this object. Now,
1268700	1275700	why am I calling it this identity? Because of composition. So, if I have an arrow going
1282540	1289540	from, well, let's call it A, let's call it B, IDB, okay? If I compose this arrow F with
1292940	1299940	IDB, I get back arrow F. In this sense, this is an identity, right? If you think of this
1301700	1308700	as multiplication table, you know, F times ID is again F, right? So this is like a one
1309700	1316700	in terms of composition. So I can write it using this notation that IDB after F, right?
1323980	1330980	So first I go F and I go IDB. It's the same as this. Equal, okay? This is one morphism,
1330980	1337980	this is another morphism. They are equal. It's the same morphism, okay? And of course
1344420	1351420	there is this symmetric thing when I have IDA and I have some, let's call it G from
1352420	1359420	A to B, right? So if I start with an ID, IDA, and follow it with G, I will get G, okay?
1372780	1379780	So these two things, they are not the same, right? I mean, this is like left identity,
1379860	1386780	this is the right identity. Sometimes they are this, well, maybe I shouldn't say it, sometimes
1386780	1390620	they are the same, but it's just like you have to have left identity and you have to
1390620	1397620	have right identity, okay? So this is one of the axioms of a category or laws of the category
1400220	1406740	that in every category, so if you think of a category as a graph, this graph has to
1406780	1413780	have some special properties. For instance, it has to have an arrow going back to the
1413780	1420780	object. For every object, it has to be this little loop, okay? Must. So that's one law
1423100	1428660	or actually two laws, left identity, right? And then identity. And there is the third
1428660	1435660	law and that's associativity. So if you have three objects, well, here you have three objects,
1437740	1444740	let's say three arrows, okay? So we have object A, an arrow F to object B, then an arrow
1446940	1453940	G to object C, right? You can combine these to have G after F, but if you have another
1459380	1466380	one going to D, right, then you have to have G after F, right? And then you have to have
1466740	1473740	you can combine these and have, so F, G, H, right? You have three arrows. Three arrows
1477140	1484140	can be composed in two different ways. So this one composition, I compose GF with G
1484740	1491740	first, G after F, and then I compose this with H. So I have H after G after F, okay?
1497460	1504460	Now I can also compose G with H first, right? So I'll have H after G, H after G, okay? Now
1510180	1517180	I can compose this arrow with this arrow, right? And I will get H after G after F, okay?
1518180	1525180	H after G after F, okay? The difference between these two is where I put the parentheses. Now
1533220	1540220	if I had to remember where to put parentheses, every time I draw a diagram, it will become
1541220	1548220	extremely complex and probably my brain would just give up, okay? Therefore, the
1555180	1562180	axiom of the category is that this and this is the same, okay? So H after G after F must
1562180	1569180	always be equal H after G after F. So this is called associativity, right? Normal thing,
1578660	1584100	associativity. You can associate it this way or this way and you get the same result.
1584100	1591100	And that's extremely important in order to make this manageable for us humans, okay?
1593180	1600180	Now you might think, okay, what if we didn't do this? Is it possible still to have a theory
1600180	1607180	in which this is not true? Well, it is possible and of course there are mathematicians who
1607540	1614540	are working with stuff that maybe not completely falls, the associativity is not completely
1615540	1622540	false, but they make associativity weak, meaning that these two ways of combining things are
1625260	1630260	not really identical, but they are isomorphic, okay? Yes?
1630260	1637260	What about real-world stuff like finite precision arithmetic? Is that the kind of thing you're
1637260	1643260	leading to, like you're multiplying flows and the order in which you multiply them,
1643260	1649260	you may end up with a slightly different result? Well, then they would not form a category
1649260	1656260	in the sense, okay, yeah. The category has to have associativity, yes?
1660260	1665260	So what do you mean by the two ways of the composition of isomorphic?
1666260	1673260	It means that there is a transformation that transforms this into this that is not an identity.
1683260	1690260	So morphisms can also, okay, this is a separate thing. You can have identity between morphisms
1695260	1702260	that is not identity, it's weak identity, right? Here I'm assuming, well, okay, so let me
1703760	1710760	for full disclosure right now, okay? I said objects don't form a set in general. If they
1713260	1720260	form a set, then this category is called small, okay, if they can form a set. If they don't
1721260	1728260	form a set, it's a large category, okay? Morphisms, on the other hand, between any two objects,
1731260	1738260	they form a set. So that's okay, right? Now is there a category here in which they don't
1740260	1746260	form a set? Of course there is, right? These are the higher-order categories in which
1747260	1754260	arrows don't form sets, they form objects in a category. But we are not going to talk about
1758260	1764260	them. So that's it, that's all, that's the category. That's the definition of category,
1765260	1770260	yes? In terms of definition, when you say the two eras are isomorphic, if they have
1771260	1778260	the same beginning and ending? What is isomorphic? Two eras, would they be isomorphic if they
1781260	1788260	have the same beginning and ending? No, no, they are different. No. Yes? Is this so much
1788260	1795260	different from a group in the other way? It's, okay, so the question is, is that different
1805260	1812260	from a group? And it has some similarities to a group, actually it has similarities to
1813260	1820260	something that's called a monoid, right? Because a group is a monoid that also has an inverse,
1824260	1830260	right? So there are two ways in which you can impose further conditions on this and you
1832260	1838260	can say, what if every arrow has an inverse, right? You can define an inverse to say, if
1838260	1844260	the arrow f and g, if they combine, compose to an identity, then one is an inverse of
1845260	1850260	an other. That's the definition of an inverse, right? So if you do this, then you end up
1851260	1855260	with something that's called a groupoid. A groupoid is the category in which every arrow
1856260	1862260	has an inverse, okay? It's still not a group. It's more than a group because a group is
1863260	1870260	really a category in which there is only one object and arrows between them. We'll be talking
1871260	1877260	about a monoid as a category and in particular a group. But this is more because now you
1881260	1886260	have transformations going between objects, so you cannot, in a group you can compose
1887260	1894260	anything with anything, right? Here you can't. They have to be composable. The end of one
1895260	1899260	has to be the beginning of another, right? You cannot compose anything with anything,
1900260	1907260	right? That's the biggest distinction. Okay, now, notice that a group is a group
1916260	1923260	of objects. So let me give you an example, okay? And this is the example that we'll be
1924260	1931260	studying a lot because this is an example from programming, right? We have a basic useful
1935260	1942260	category that we use in programming. And this is the category in which objects are
1942260	1955260	types and arrows are functions, right? Like if any single argument function takes an argument
1956260	1969260	of a type A and returns a result of type B, right? So in the sense a function is an arrow,
1970260	1978260	or a morphism between two types. So that's the category in which this is actually in
1979260	1986260	Haskell, it's almost exactly, well, maybe in ML, this is almost exactly the category
1987260	1996260	which you are working, right? Types are your objects, functions are your morphisms, right?
1996260	2007260	In Haskell, it's a little bit more complicated because of laziness of Haskell, okay? Haskell
2008260	2019260	is a lazy language. So the trick is that in Haskell, every type also contains this
2019260	2026260	undefined value, the bottom value, which means like if you try to evaluate it, you will get
2027260	2033260	into an infinite loop, it will take you forever. Because categories don't really take into
2034260	2042260	account time. It's like time really is really hard to describe in mathematics, right? Whereas
2042260	2049260	in computation, we worry about time, right? I mean if something takes too long to calculate,
2050260	2058260	that's useless for us, right? And in particular, if it takes infinite time to calculate, which
2059260	2065260	means it never terminates, okay? It's a calculation. So if you have a function that goes forever,
2065260	2071260	what's the return type for this function? It's a function that's supposed to return an
2072260	2078260	integer, but it never does because it goes into an infinite loop. So in this case, in
2079260	2084260	Haskell, we say it returns an int type, but int type contains this special value called
2085260	2093260	bottom, which means it never terminates, okay? And that's the digression I make once, and
2093260	2098260	maybe from time to time, I will say, well, of course, except for bottoms, and we are
2099260	2105260	ignoring bottoms, or we are ignoring never ending calculations and so on, right? So there's
2106260	2111260	this caveat. There's lots of caveats here in the beginning, and I just want to get rid of
2111260	2124260	them, and later we can think in simpler terms, okay? But of course you might ask, but what
2125260	2131260	are types, right? Okay, types in the programming language, what are they?
2131260	2146260	Sets of values, okay. So there is a model, a kind of simplistic model, maybe this works
2147260	2152260	in ML, it won't work in Haskell because of the bottoms, right? But the simplest model
2152260	2162260	for types is that they are just sets, sets of values, right? And so we can model programming
2163260	2169260	as in a category of sets, we can say, okay, so instead of types, we will be saying sets
2170260	2177260	of values, right? And functions are just functions between sets, okay? You can define
2177260	2185260	functions on sets, function from one set to another set, right? And that's a good model too.
2186260	2190260	So sometimes I'll be talking about sets and functions, sometimes I'll be talking about types
2191260	2198260	and functions, and of course when I say functions, I'm talking about mathematical
2199260	2205260	functions, right? So mathematical function is defined between sets. So a function is just,
2205260	2212260	you know, you take a value from one set and it gives you a value from another set, right?
2213260	2226260	So I can even draw a picture of what might mean by a function in a set. So I hope you
2226260	2236260	can memorize the definition of a category, right? I mean, it's so simple, so very elementary.
2237260	2242260	So I can erase this now. So it's like you have one set, you have another set, here you have
2243260	2249260	elements of this set, elements of this set, and the function sort of, you know, takes
2249260	2255260	elements of this set into elements of this set, and again I'm using the arrows, but these are
2256260	2263260	different arrows, these are not morphisms, right? So one function corresponds to one morphism,
2264260	2271260	right? But we can like, so this is another thing that you have to be very careful with,
2272260	2279260	this schizophrenic view of a category, right? That every category, well not every category,
2280260	2292260	okay? But a lot of categories come from some model. For instance, you take sets, set field,
2292260	2301260	right? So and you say, I'm going to represent these sets as objects in my category. This
2302260	2312260	category, by the way, is called set. This is a category of sets and functions, right?
2312260	2323260	We'll be using it quite often. So I'll be talking about the category of sets and the origin of
2324260	2332260	this category is that I started with sets, right? And I know what sets are. They have structure,
2333260	2340260	right? Every set has elements and there are functions and functions in sets, they just map
2341260	2347260	elements to elements, okay? So I know all the stuff. I'm looking under a microscope and I said I know
2348260	2354260	it has elements. I know that the functions are actually a bunch of mapping. It's a mapping from
2355260	2366260	one set to another, right? Now when I build a category on top of this, I have to forget about
2366260	2376260	the structure, okay? I get amnesia and I say this is set A. What's inside of the set? I have no idea.
2377260	2385260	It's an atom. It has no structure because now I'm putting my category glasses, right? No
2385260	2397260	structure. What are the arrows between these sets? Well, I look at what kind of sets these are, right?
2398260	2404260	I know elements of the sets. I know what kind of functions are possible, right? So I know how many
2405260	2412260	arrows, how many functions are from this set to this set and I build my category based on this.
2412260	2421260	I say, okay, this set corresponds to an object A, this set corresponds to an object B and there are
2422260	2430260	ten arrows between these objects. Fine. What are these arrows? I don't know. I forgot. I just know there
2431260	2441260	are ten of them, okay? And I call them ABCD or FGH, okay? And the next thing is, okay, so if I have
2442260	2447260	arrows from this set to this, I mean functions from this set, another function from this set to this set.
2448260	2455260	Oh, I can compose them, right? What does it mean to compose functions? Well, you apply a function to
2456260	2461260	an argument, right? You get a result. You take this result, you apply the second function to this result
2462260	2468260	and you get another result, right? So if you combine this, you start it here, you end it up here.
2468260	2487260	You get a function that goes, right? Okay? So starting some x here, it produces a y here and y goes into z here
2488260	2495260	and there is a function that just takes x directly into z and that's the composition of these two functions.
2495260	2509260	Okay? So I know how to compose functions on sets using this, right? So I use this information to create my big
2510260	2519260	infinite dimensional multiplication table, composition table for my category set and then I forget.
2519260	2528260	And of course there is an identity function, right? That just takes an x into x, takes another x into x.
2529260	2536260	This is an identity function, right? So every set has an identity function that just doesn't move the set.
2537260	2544260	It just maps the set into itself by mapping every element to itself. It's like a trivial function, right?
2544260	2552260	So, like, id of x equals x. That's what it has.
2554260	2555260	Yes?
2556260	2561260	It doesn't have to map every element itself though, right? It just needs to map the set to itself.
2562260	2570260	No, because you can map the set to itself in many different ways, right? You can interchange element if you want.
2570260	2573260	That's also a map, you know, the set into itself, right?
2574260	2577260	From a category point of view it's still...
2578260	2588260	Okay, so what we are doing here is we are studying the set and we find out that there are many functions going from the set to itself, right?
2589260	2598260	One of them is the identity function. This would become our identity morphism, right?
2598260	2606260	And, by the way, identity function when it's composed with any other function will give them back this function, right?
2607260	2611260	So it's a good identity function, I know, from set table, right?
2612260	2621260	So I know that I will get that my multiplication table that I'm building when I pick this function as my identity morphism,
2622260	2627260	it will be an identity in my big multiplication table, right?
2628260	2634260	So I'm abstracting, I'm just slashing information left and right.
2635260	2645260	I'm forgetting about what's inside the objects, what these functions do, and I end up with this category set.
2646260	2654260	And in this category set I have these objects that now I forgot where they came from.
2654260	2662260	I have these arrows, I forgot where they came from, but I have the multiplication table, the composition table for them, right?
2663260	2668260	And this composition table fulfills my axioms of category theory, right?
2669260	2676260	I mean, this composition is obviously associative, right?
2677260	2681260	The composition of functions is associative, so I get a good category.
2681260	2685260	I have identity, I have associativity, I have everything.
2686260	2692260	So I got this huge multiplication table, now I can forget about where it came from, and now I have a category set.
2693260	2704260	And in this category set, you know, I don't care about the structure of my objects or the structure of my functions or my morphisms.
2705260	2708260	I forget that my morphisms are really functions. I forgot all this.
2708260	2718260	And now I can start thinking about, you know, what can I say about these objects just by looking at morphisms?
2719260	2722260	And it turns out I can say a lot of things.
2723260	2735260	And we'll see later how you can identify, just by looking at morphisms, how you can identify, oh, this set is actually empty, right?
2735260	2738260	How do you know it's empty, right?
2739260	2744260	I mean, if you forgot the information, then it has no elements, right?
2745260	2747260	You only have morphisms.
2748260	2759260	Well, it turns out that an empty set has this property that can be expressed just in terms of morphisms, nothing else.
2760260	2769260	And I can identify an empty set. I can identify a single element set using just morphisms, nothing else.
2770260	2773260	It's not easy, but it's possible.
2774260	2782260	So the thing is that you can identify a lot of properties of sets just by looking at the multiplication table.
2783260	2787260	You don't really have to know what's inside these sets.
2788260	2796260	And that gives you a completely new way of looking at things, more abstract way of looking at things.
2797260	2805260	It's like if you think about what's inside a set, you're thinking assembly language of sets.
2806260	2812260	Thinking about elements, how they are mapped, you know, that's the assembly language.
2813260	2819260	Category theory gives you this higher level language in which you don't have to look inside the set.
2820260	2823260	You just look at how they are connected with arrows.
2824260	2828260	And this is like the ultimate in data hiding, right?
2829260	2838260	You have an object, it's a data type, it's a set, but you cannot look inside of it.
2838260	2845260	It shrunk to a point. All you have is its interface.
2846260	2850260	Its interface is how it connects to other objects.
2851260	2854260	All these arrows coming out of this object and into this object.
2855260	2857260	They define the interface.
2858260	2868260	So like if you take this idea of data hiding and abstraction, this is where it leads you, eventually.
2869260	2873260	This is the end of the road for abstraction, right?
2874260	2876260	This is the end of the road for data hiding.
2878260	2883260	This is it. You get like the most abstract language that you can think of.
2887260	2892260	And we can stop now. Next time. Two more. Thank you.
