1
00:00:00,000 --> 00:00:16,000
Hi, everyone. I'm very glad to be here, even though I am fighting against a jet lag. There

2
00:00:16,000 --> 00:00:21,640
is none our difference between here and Seattle. So back with me. I'm going to try to not sleep

3
00:00:21,640 --> 00:00:28,280
on stage. Yeah, we're going to I'm going to present Babylon.js. It's an engine I created

4
00:00:28,280 --> 00:00:34,280
six years ago. And it's an engine that I am pretty proud of because now it's very it's

5
00:00:34,280 --> 00:00:40,680
used in a lot of important places. For instance, that's PowerPoint. But this little guy here

6
00:00:40,680 --> 00:00:46,600
is a 3D object animated by Babylon.js inside PowerPoint. And actually, at Microsoft, every

7
00:00:46,600 --> 00:00:52,400
time you're going to see 3D, it's probably a 99% sure that it's actually based on Babylon.js.

8
00:00:52,400 --> 00:00:58,720
It's something that I'm going to present right now. It's an open source framework. It's

9
00:00:58,720 --> 00:01:05,120
entirely free. It's based on Apache 2 or do the heck you want with the code. There is

10
00:01:05,120 --> 00:01:10,880
no license, no nothing. It's brand new at Microsoft. We are using our own technology

11
00:01:10,880 --> 00:01:16,080
here, but this technology is entirely free for you to use in any place you want. It's

12
00:01:16,120 --> 00:01:24,120
based on any in a lot of web open standard and web open frameworks like WebGL 1 and 2,

13
00:01:24,120 --> 00:01:32,620
WebGPU. So WebGPU, are you aware of what WebGPU is? Who knows? Okay, quite a few. It's

14
00:01:32,620 --> 00:01:38,800
the evolution of WebGL actually. It's metal slash Vulkan slash DirectX 12 for the web.

15
00:01:38,800 --> 00:01:45,080
It's a new technology that we are working on with Apple and Google to support. The interesting

16
00:01:46,080 --> 00:01:51,440
point here of using Babylon.js is that if you want to use 3D today, you do not have to worry

17
00:01:51,440 --> 00:01:57,200
about that. We will take care of all the underlying frameworks like WebGL 1, 2, or WebGPU. We also

18
00:01:57,200 --> 00:02:03,080
support WebXR. I'm going to do a quick demo later. It's a full-fledged game engine and rendering

19
00:02:03,080 --> 00:02:09,320
engine. So we support physics and VR particles. I don't like this image, but that's the best I

20
00:02:09,400 --> 00:02:15,600
can have. It's kind of the unity for the web, if I may. We're going to provide you tools to create

21
00:02:15,600 --> 00:02:22,520
3D on the web without the burden of understanding shaders and math and stuff like that. We also

22
00:02:22,520 --> 00:02:28,680
support physically-based rendering. It's an advanced technique created by Disney starting with, I

23
00:02:28,680 --> 00:02:34,160
don't know, Untangle, the name of the movie. I am not sure it's the right translation anyway. The

24
00:02:34,800 --> 00:02:43,240
lady with the long hairs, they created PBR for this cartoon. And this PBR, and thanks to the power of

25
00:02:43,240 --> 00:02:48,080
our computer now, can be now rendered in real-time on the web. I'm going to get back to that later

26
00:02:48,080 --> 00:02:55,520
as well. We have principles, and I'm very glad to have my talk after John's one because we have

27
00:02:55,520 --> 00:03:00,440
exactly the same principle. I like bug first. We create tools before the engine and stuff like

28
00:03:00,440 --> 00:03:06,040
that. And we are also backward compatible. That's something that just pissed me off a lot when I

29
00:03:06,040 --> 00:03:10,840
have to update to a new version of a framework and I have to rewrite everything. That's something I

30
00:03:10,840 --> 00:03:17,640
do not want for Babylon. So if you're using Babylon.js, you will be able to run it up until the next

31
00:03:17,640 --> 00:03:23,200
version without having to change anything on your code. We do not break backward compatibility. And

32
00:03:23,200 --> 00:03:32,520
we are also supporting GLTF. Who is aware of what GLTF is? Okay. So GLTF stands for Graphic Library

33
00:03:32,520 --> 00:03:38,640
Transport Format, and that's the JPEG of 3D. You think about JPEG. If I give you a JPEG image, you

34
00:03:38,640 --> 00:03:44,000
will be able to display it on your computer, right? Because everyone understands JPEG or PNG. For

35
00:03:44,000 --> 00:03:49,880
3D objects, like the file format itself, it was a mess up until now because there were like 10,000

36
00:03:49,960 --> 00:03:55,360
different file formats, all in code printable, obviously, and all proprietary. So we sit down with

37
00:03:55,360 --> 00:04:01,480
the Kronos group, the group who is standardizing WebGL, and we define all together, and by all, I

38
00:04:01,480 --> 00:04:07,440
mean Google, Facebook, Microsoft, NVIDIA, et cetera, et cetera, we define a file format. And this

39
00:04:07,440 --> 00:04:13,680
file format is GLTF here. So if you want to render 3D objects like the dinosaur I was rendering

40
00:04:13,680 --> 00:04:18,440
before, it's a GLTF file format. And so by supporting this file format, we ensure that your

41
00:04:19,320 --> 00:04:26,520
object will be displayed and compatible. It's an open source project. Since the very beginning, it was

42
00:04:26,520 --> 00:04:34,520
started as an open source project. It's still an open source project. We have around like 100,000

43
00:04:34,520 --> 00:04:40,920
posts on the forum. It's a very active forum. Most of the users, when they come to us, the number one

44
00:04:40,920 --> 00:04:47,920
reason they come to use Babylon.js is because of the forum. We have a very lovely community. It's

45
00:04:48,000 --> 00:04:54,440
very helpful. There is no shame. It's definitely a place where you can ask any question and you will

46
00:04:54,440 --> 00:05:03,280
get a response in a matter of a few days. We also have a pretty large number of active supporters,

47
00:05:03,280 --> 00:05:12,520
like people contributing to the forum and to the engine itself. So it's used in a very, it's funny

48
00:05:12,520 --> 00:05:17,760
because I started it six years ago, and I was the only developer, and it was only for me. And now

49
00:05:17,760 --> 00:05:24,160
it's used across the web. Adobe is using it for their product. Being Microsoft apps, obviously, I

50
00:05:24,160 --> 00:05:28,520
mentioned SharePoint, PowerPoint, et cetera, but it's also used by Dolby, by Minecraft. If you go to

51
00:05:28,520 --> 00:05:33,160
Minecraft.net, classic.minecraft.net, you're going to play the Minecraft game, and it's using

52
00:05:33,160 --> 00:05:39,480
Babylon.js to do the rendering, et cetera. We work with a lot of small, high, very large companies,

53
00:05:39,480 --> 00:05:44,600
and my favorites are probably the enthusiasts, like students of people that just do that because

54
00:05:44,640 --> 00:05:50,800
they want to learn how to create a game or to create 3D. And that's why we created the engine. And so

55
00:05:50,800 --> 00:05:58,560
also, I want to underline and second what John said just before, we created the engine, but we also

56
00:05:58,560 --> 00:06:04,320
created a lot of tools. And I'm going to get back and demonstrate these tools. Just name-dropping here,

57
00:06:04,320 --> 00:06:08,720
I'm going to get back to that later. The goal for me is to mention that it's not just an engine,

58
00:06:08,720 --> 00:06:14,120
it's actually engine is a small portion of it. The tools that let you create what you want to

59
00:06:14,160 --> 00:06:22,160
create in 3D are really the important point here. Okay. So I have a quick video because I wanted to

60
00:06:22,160 --> 00:06:27,960
capture what the community was creating with Babylon.js. So instead of going through a demo

61
00:06:27,960 --> 00:06:31,840
manually, I created a quick video for you to see.

62
00:08:14,320 --> 00:08:43,800
Right. It was an example of in real time,

63
00:08:43,800 --> 00:08:46,360
in real time, obviously, running on any computer

64
00:08:46,360 --> 00:08:48,680
what can be done with the framework itself.

65
00:08:48,680 --> 00:08:51,840
So instead of spending too much time just talking,

66
00:08:51,840 --> 00:08:54,320
I would like to show you in action

67
00:08:54,320 --> 00:08:56,320
what you can do with Babylon.js.

68
00:08:56,320 --> 00:09:00,360
I'm going to start with a first presentation of one

69
00:09:00,360 --> 00:09:01,440
of the tools that I have.

70
00:09:01,440 --> 00:09:03,640
Nope, it's not here.

71
00:09:03,640 --> 00:09:04,800
The Playground.

72
00:09:04,800 --> 00:09:07,080
So Babylon.js-playground.com is a place

73
00:09:07,080 --> 00:09:09,120
where you can go to learn the engine.

74
00:09:09,120 --> 00:09:12,160
So I spend a lot of time writing documentation,

75
00:09:12,160 --> 00:09:14,520
and that's a pity because no one's read it, right?

76
00:09:14,520 --> 00:09:16,160
You don't read documentation.

77
00:09:16,160 --> 00:09:18,200
No one's read them.

78
00:09:18,200 --> 00:09:21,120
So I decided to take the problem the other way,

79
00:09:21,120 --> 00:09:24,040
like, how do I learn?

80
00:09:24,040 --> 00:09:25,880
I learned by trying, right?

81
00:09:25,880 --> 00:09:28,440
And so that's why we created the Babylon Playground.

82
00:09:28,440 --> 00:09:31,400
Here, you have on the left a full-fledged editor,

83
00:09:31,400 --> 00:09:33,440
and on the right, you have the real-time rendering of what

84
00:09:33,440 --> 00:09:35,240
you just typed on the left.

85
00:09:35,240 --> 00:09:37,040
The editor comes with IntelliSense.

86
00:09:37,040 --> 00:09:40,280
So if you type here, you can get help while you type.

87
00:09:40,280 --> 00:09:41,840
So instead of reading documentation,

88
00:09:41,840 --> 00:09:44,040
again, you can just experiment, OK?

89
00:09:44,040 --> 00:09:45,720
And I'm going to just show you what

90
00:09:45,720 --> 00:09:47,960
can be done in a matter of a few seconds here.

91
00:09:47,960 --> 00:09:51,160
So here, I have a scene that I created.

92
00:09:51,160 --> 00:09:53,840
I create a camera, which is the point of view

93
00:09:53,840 --> 00:09:56,480
that I can manipulate with touch or with my mouse.

94
00:09:56,480 --> 00:09:59,680
I set the target of my camera, and I attach it to the events.

95
00:09:59,680 --> 00:10:02,400
By calling Attach Control, I attach to the mouse event,

96
00:10:02,400 --> 00:10:03,960
the pointer event, and stuff like that.

97
00:10:03,960 --> 00:10:07,200
So I can play with my finger here or just with my mouse

98
00:10:07,200 --> 00:10:09,360
if I want to, or the keyboard.

99
00:10:09,360 --> 00:10:10,800
That's all coming from this line.

100
00:10:10,800 --> 00:10:15,240
Then I create a light, like in real world, you have a light.

101
00:10:15,240 --> 00:10:17,520
I set the intensity of that light and the sphere.

102
00:10:17,520 --> 00:10:19,760
So if I run that, I just have my sphere

103
00:10:19,760 --> 00:10:21,440
in the center of my screen, OK?

104
00:10:21,440 --> 00:10:24,840
As a user, now what you can do is to experiment.

105
00:10:24,840 --> 00:10:26,760
And we use the playground for experimentation,

106
00:10:26,760 --> 00:10:27,920
but also for bug fixing.

107
00:10:27,920 --> 00:10:31,200
When a user comes to us and say, hey, I have a bug,

108
00:10:31,200 --> 00:10:33,280
most of the time, we ask them to reproduce the bug here,

109
00:10:33,280 --> 00:10:35,600
because it's then easier to discuss.

110
00:10:35,600 --> 00:10:38,200
So I'm going to create, actually, a material.

111
00:10:38,200 --> 00:10:44,560
The material here will be a PBR, sorry,

112
00:10:44,560 --> 00:10:48,560
Babylon, dot PBR Metallic Roughness Material.

113
00:10:48,560 --> 00:10:52,240
It's a specific kind of material that simulates metal, OK?

114
00:10:52,240 --> 00:10:53,240
I'm going to give it a name.

115
00:10:53,240 --> 00:10:57,000
And as you can see, there is a while I type help

116
00:10:57,000 --> 00:10:58,000
on the parameters.

117
00:10:58,000 --> 00:11:00,560
So for instance, I want the name here, like foo,

118
00:11:00,560 --> 00:11:04,160
and the scene where I want to have my material.

119
00:11:04,160 --> 00:11:09,160
Then I set my sphere.material to that material, OK?

120
00:11:09,160 --> 00:11:14,320
And I'm going to just quickly set some values, like metallic.

121
00:11:14,320 --> 00:11:17,240
It will be fully metallic between 0 and 1.

122
00:11:17,240 --> 00:11:22,240
And is that a little bit too small, maybe, right?

123
00:11:22,240 --> 00:11:25,200
Let me change the font size to something bigger.

124
00:11:25,200 --> 00:11:27,960
OK, sorry about that.

125
00:11:27,960 --> 00:11:30,040
And I want also to set my material

126
00:11:30,040 --> 00:11:36,000
to be the roughness of it, like brushed metal, if you prefer,

127
00:11:36,000 --> 00:11:38,640
will be 0.5, again, between 0 and 1.

128
00:11:38,640 --> 00:11:43,600
If I run it, you have a sense of something change,

129
00:11:43,600 --> 00:11:47,840
like it's a bit metallic, but the power of a metal,

130
00:11:47,840 --> 00:11:50,000
like in your car, is because you see the reflection

131
00:11:50,000 --> 00:11:51,760
of the environment, right?

132
00:11:51,760 --> 00:11:54,560
A car by itself with no reflection looks rough.

133
00:11:54,560 --> 00:11:56,080
So what I'm going to do here, I'm

134
00:11:56,080 --> 00:11:59,400
going to just ask the scene to create a default environment

135
00:11:59,400 --> 00:12:02,200
for me.

136
00:12:02,200 --> 00:12:06,840
And by doing that, now here, I have a sphere, which

137
00:12:06,840 --> 00:12:09,440
is like brushed metal, OK?

138
00:12:09,440 --> 00:12:10,760
So I can play with the parameters,

139
00:12:10,760 --> 00:12:12,320
but I told you it's all about tools.

140
00:12:12,320 --> 00:12:14,120
So here I have the playground, but we also

141
00:12:14,120 --> 00:12:16,000
have a second tool that I would like to show you,

142
00:12:16,000 --> 00:12:17,400
which is the inspector.

143
00:12:17,400 --> 00:12:19,840
Here I can invoke the inspector by calling

144
00:12:19,840 --> 00:12:24,440
deburglayer.show, show.

145
00:12:24,440 --> 00:12:28,920
And if I do that, zoop, I'm going to have an additional UI

146
00:12:28,920 --> 00:12:30,880
that will be on top of my scene here,

147
00:12:30,880 --> 00:12:32,680
where I can see the tree view.

148
00:12:32,680 --> 00:12:34,840
So I have my glide, my camera, my sphere,

149
00:12:34,840 --> 00:12:36,240
and the background that was generated

150
00:12:36,240 --> 00:12:38,200
by the created environment.

151
00:12:38,200 --> 00:12:41,200
And I can take my material here, and I

152
00:12:41,200 --> 00:12:43,000
have all the properties of that material.

153
00:12:43,000 --> 00:12:46,280
And for instance, I can play with the levels here

154
00:12:46,280 --> 00:12:48,680
and change the opacity or the roughness.

155
00:12:48,680 --> 00:12:56,160
So fully metallic, fully rough, OK?

156
00:12:56,160 --> 00:12:59,720
Let me just get closer.

157
00:12:59,720 --> 00:13:06,400
So that's the Chinese theater in Los Angeles.

158
00:13:06,400 --> 00:13:08,000
And you can play with the parameter here.

159
00:13:08,000 --> 00:13:11,800
Also, we introduce a lot of options that you can change,

160
00:13:11,800 --> 00:13:14,000
like I want to render in wireframe and stuff like that.

161
00:13:14,000 --> 00:13:16,600
You can play with it here, OK?

162
00:13:16,600 --> 00:13:17,720
That's the inspector.

163
00:13:17,720 --> 00:13:20,040
The inspector is extremely useful to debug or just

164
00:13:20,040 --> 00:13:20,760
develop your scene.

165
00:13:20,760 --> 00:13:22,920
So you can, visually, instead of just typing the code

166
00:13:22,920 --> 00:13:24,880
in the playground or in your application,

167
00:13:24,880 --> 00:13:27,800
you can just visually debug the scene itself.

168
00:13:27,800 --> 00:13:29,240
Right.

169
00:13:29,240 --> 00:13:32,400
Another tool I wanted to show you is the documentation itself.

170
00:13:32,400 --> 00:13:33,040
Yes, I know.

171
00:13:33,040 --> 00:13:34,680
People won't go there, but still, I

172
00:13:34,680 --> 00:13:38,360
would like to show them the documentation for one reason.

173
00:13:38,360 --> 00:13:41,280
Here, we have a regular documentation

174
00:13:41,280 --> 00:13:45,040
with code practice, example, regular documentation

175
00:13:45,040 --> 00:13:47,320
you should be looking for.

176
00:13:47,320 --> 00:13:49,160
But we also have the playground here.

177
00:13:49,160 --> 00:13:50,800
And the playground is actually a tool

178
00:13:50,800 --> 00:13:54,640
that's going to search through all the examples that were created

179
00:13:54,640 --> 00:13:56,000
in the playground here.

180
00:13:56,000 --> 00:13:58,400
Because in the playground, if I hit Save,

181
00:13:58,400 --> 00:14:02,000
it will generate, for me, a unique URL

182
00:14:02,000 --> 00:14:05,960
that I can share with my friend with this code running, OK?

183
00:14:05,960 --> 00:14:08,080
And that is stored in our database.

184
00:14:08,080 --> 00:14:10,960
And if I want to learn something,

185
00:14:10,960 --> 00:14:13,160
I could just search for the documentation

186
00:14:13,160 --> 00:14:16,720
or I could just search for examples showing me

187
00:14:16,720 --> 00:14:21,240
how to do something, like I want to do shadows.

188
00:14:21,240 --> 00:14:24,360
And I can search for shadows inside our database.

189
00:14:24,360 --> 00:14:29,000
And here, you're going to see, like, I just lost my mouse, OK?

190
00:14:29,000 --> 00:14:30,200
Thank you.

191
00:14:30,200 --> 00:14:33,480
I can find any example here where people just

192
00:14:33,480 --> 00:14:35,600
do something with shadows.

193
00:14:35,600 --> 00:14:37,400
And I can click on the Playground button here.

194
00:14:37,400 --> 00:14:38,280
It's completely random.

195
00:14:38,280 --> 00:14:40,880
I have no idea what's inside this playground.

196
00:14:40,880 --> 00:14:42,320
Hopefully, it's not something stupid.

197
00:14:42,320 --> 00:14:44,280
OK, there is shadows.

198
00:14:44,280 --> 00:14:45,120
Cool.

199
00:14:45,120 --> 00:14:47,080
Someone was doing that with shadows, OK?

200
00:14:47,080 --> 00:14:49,560
And so I can look the code here and say, OK,

201
00:14:49,560 --> 00:14:51,640
what did you do with this code?

202
00:14:51,640 --> 00:14:53,880
And maybe that's going to help me learn or understand

203
00:14:53,880 --> 00:14:55,800
how the shadows works.

204
00:14:55,800 --> 00:14:56,960
Right.

205
00:14:56,960 --> 00:14:59,560
Among new features that are going to be available soon,

206
00:14:59,560 --> 00:15:02,240
there is the Node Material Editor.

207
00:15:02,240 --> 00:15:06,040
I created here a material, but this material is actually

208
00:15:06,040 --> 00:15:08,760
me setting some parameters to an existing material.

209
00:15:08,760 --> 00:15:10,320
We have a couple of materials.

210
00:15:10,320 --> 00:15:12,400
We have what we call the standard material, which

211
00:15:12,400 --> 00:15:14,560
is the fastest and the simpler one.

212
00:15:14,560 --> 00:15:17,080
And we have the pretty advanced physically based

213
00:15:17,080 --> 00:15:20,240
renderer, which is used here, the PBR.

214
00:15:20,240 --> 00:15:22,240
But if you want to do something different,

215
00:15:22,240 --> 00:15:24,800
you have to use what we call the shader material.

216
00:15:24,800 --> 00:15:28,520
The shader material is up to you to code using shader

217
00:15:28,520 --> 00:15:31,720
languages, your own material, OK?

218
00:15:31,720 --> 00:15:34,560
That's a friction point, definitely.

219
00:15:34,560 --> 00:15:37,200
A lot of people say, I would love to create my own material,

220
00:15:37,200 --> 00:15:42,160
but I don't want to learn how to create shaders.

221
00:15:42,160 --> 00:15:44,680
So we introduce with the very new version here

222
00:15:44,680 --> 00:15:46,240
the Node Material Editor.

223
00:15:46,240 --> 00:15:48,080
The Node Material Editor is a way for you

224
00:15:48,080 --> 00:15:49,600
to create your material.

225
00:15:49,600 --> 00:15:53,440
So who is aware of what a shader is?

226
00:15:53,440 --> 00:15:54,960
Quite a few, OK.

227
00:15:54,960 --> 00:15:59,680
A shader is made actually of a C-like language

228
00:15:59,680 --> 00:16:01,600
that's going to explain to the GPU how

229
00:16:01,600 --> 00:16:05,680
to create your own rendering, OK, here.

230
00:16:05,680 --> 00:16:07,960
Here I have a pretty simple one, and I will just

231
00:16:07,960 --> 00:16:10,440
focus on the second part here.

232
00:16:10,440 --> 00:16:13,080
A shader is made of a vertex shader and a fragment shader.

233
00:16:13,080 --> 00:16:16,920
The vertex shader explains how the geometry is drawn

234
00:16:16,920 --> 00:16:20,640
on the screen, and the fragment shader

235
00:16:20,640 --> 00:16:22,520
explains how to compute the color.

236
00:16:22,520 --> 00:16:24,600
And here my color is just, I want

237
00:16:24,600 --> 00:16:28,240
to set a color to the output, OK?

238
00:16:28,240 --> 00:16:32,240
This tool will let me actually create my own shader

239
00:16:32,240 --> 00:16:33,440
without having to develop them.

240
00:16:33,440 --> 00:16:37,760
For instance, here I'm going to open and look for the light.

241
00:16:37,760 --> 00:16:39,640
I want to add lightning support.

242
00:16:39,640 --> 00:16:43,600
Here my object is just flat, just gray, OK?

243
00:16:43,600 --> 00:16:47,120
To support lightning, I need to add light support here.

244
00:16:47,120 --> 00:16:48,840
And the light supports here will expect

245
00:16:48,840 --> 00:16:50,840
me to provide a few parameters that you

246
00:16:50,840 --> 00:16:51,960
can see on the left here.

247
00:16:51,960 --> 00:16:54,280
I'm going to just quickly connect them.

248
00:16:54,280 --> 00:16:57,640
So the world position, which is the position of my mesh

249
00:16:57,640 --> 00:17:01,400
in the world, and the world normal, which is the normal,

250
00:17:01,400 --> 00:17:04,680
is a perpendicular vector defining the surface

251
00:17:04,680 --> 00:17:06,880
of every object, OK?

252
00:17:06,880 --> 00:17:13,080
If I just plug them here and do that, then boom,

253
00:17:13,080 --> 00:17:15,040
I have support for light.

254
00:17:15,040 --> 00:17:18,840
A shader was developed for me by the system.

255
00:17:18,840 --> 00:17:21,960
I can export the shader here.

256
00:17:21,960 --> 00:17:25,440
So instead of coding the shader, which is quite big,

257
00:17:25,440 --> 00:17:29,520
if you look at it, all of that is

258
00:17:29,520 --> 00:17:32,600
required to do a lightning shader.

259
00:17:32,600 --> 00:17:35,480
You just have to wire some stuff, right?

260
00:17:35,480 --> 00:17:37,800
And that can go even better than that.

261
00:17:37,800 --> 00:17:39,320
Instead of having just plain color,

262
00:17:39,320 --> 00:17:40,520
I want to have a texture.

263
00:17:40,520 --> 00:17:42,760
So think about your game, you have your character,

264
00:17:42,760 --> 00:17:44,560
and you want to have lightning, OK, done.

265
00:17:44,560 --> 00:17:46,840
And I want also to have a texture, OK?

266
00:17:46,840 --> 00:17:49,760
So let me just load the texture here.

267
00:17:49,760 --> 00:17:53,840
The texture will require me to give it a texture, perfect,

268
00:17:53,840 --> 00:17:56,240
like a crate.

269
00:17:56,240 --> 00:17:59,680
And what I want to do is actually take the light color,

270
00:17:59,680 --> 00:18:02,000
the texture color, merge them.

271
00:18:02,000 --> 00:18:04,840
And to merge them, I will remove this link here.

272
00:18:04,840 --> 00:18:10,640
Just multiply them, boom, taking the light output,

273
00:18:10,640 --> 00:18:13,800
multiply it by the texture output,

274
00:18:13,800 --> 00:18:17,840
plug that into the output here, and boom,

275
00:18:17,840 --> 00:18:20,800
I have a crate with light.

276
00:18:20,800 --> 00:18:21,720
Isn't that cool?

277
00:18:28,040 --> 00:18:30,200
Again, you can save your wonderful shader,

278
00:18:30,200 --> 00:18:33,400
and it will generate for you a unique URL here.

279
00:18:33,400 --> 00:18:37,000
And let me just fast forward to a complicated shader

280
00:18:37,000 --> 00:18:38,200
that I created for you.

281
00:18:38,200 --> 00:18:41,200
This one is pretty advanced.

282
00:18:41,200 --> 00:18:44,920
It's not that good looking, but it's just me as a developer

283
00:18:44,920 --> 00:18:48,400
trying to play the designer.

284
00:18:48,400 --> 00:18:52,320
So I have a shader, and you can see here,

285
00:18:52,320 --> 00:18:54,760
there is what we call bump or normal.

286
00:18:54,760 --> 00:18:58,960
You feel like there is not a smooth surface.

287
00:18:58,960 --> 00:19:02,840
We feel like there is something defining a bump here,

288
00:19:02,840 --> 00:19:04,880
and actually just coming from a texture.

289
00:19:04,880 --> 00:19:08,120
And also at some places here, there are reflections.

290
00:19:08,120 --> 00:19:10,360
So it's a complex shader because the reflection is

291
00:19:10,360 --> 00:19:13,080
defined by a second texture here.

292
00:19:13,080 --> 00:19:17,040
We are using reflection texture to do the reflection here.

293
00:19:17,040 --> 00:19:19,640
We have a perturbed normal object

294
00:19:19,640 --> 00:19:21,480
that will change the normal.

295
00:19:21,480 --> 00:19:24,560
And by the way, Doom 3, created by John Carmich, by the way,

296
00:19:24,560 --> 00:19:26,280
introduced this notion of bump.

297
00:19:26,280 --> 00:19:28,840
Bump is using a texture to simulate the volume.

298
00:19:28,840 --> 00:19:30,320
Anyway, we don't care.

299
00:19:30,320 --> 00:19:34,280
Here, it's just that I want to use that code.

300
00:19:34,280 --> 00:19:37,200
So the shader here will generate for me

301
00:19:37,200 --> 00:19:43,080
a code, like literal code that I can save here.

302
00:19:43,080 --> 00:19:44,120
I'm going to open the file.

303
00:19:44,120 --> 00:19:46,760
And this code is regular TypeScript code

304
00:19:46,760 --> 00:19:50,920
that you can use directly in your own environment.

305
00:19:50,920 --> 00:19:53,880
So let me remove all of that.

306
00:19:53,880 --> 00:19:55,480
Dump here.

307
00:19:55,480 --> 00:19:58,480
What was generated for me by the node generator?

308
00:19:58,480 --> 00:20:01,840
So the node generator, it's actually a node model

309
00:20:01,840 --> 00:20:04,120
where you create a node material, and then you have blocks,

310
00:20:04,120 --> 00:20:07,000
transform block, whatever block, texture block, et cetera.

311
00:20:07,000 --> 00:20:09,480
You connect all of them, like you connect the output

312
00:20:09,480 --> 00:20:10,320
with the input.

313
00:20:10,320 --> 00:20:14,000
So this code is just literally what I did visually.

314
00:20:14,000 --> 00:20:17,000
And then it gives you a node material object

315
00:20:17,000 --> 00:20:20,160
that you can plug with your sphere here.

316
00:20:20,160 --> 00:20:24,320
That material is equal to node material object.

317
00:20:24,320 --> 00:20:28,520
Let me close this guy here, close that, run that again,

318
00:20:28,520 --> 00:20:29,800
and boom.

319
00:20:29,800 --> 00:20:34,240
In my code, I have my wonderful reflection bump,

320
00:20:34,240 --> 00:20:36,640
whatever scene.

321
00:20:36,640 --> 00:20:40,560
Yes, it's ugly, but it's about technical and development, right?

322
00:20:40,560 --> 00:20:43,520
It's not the designer track.

323
00:20:43,520 --> 00:20:47,160
All right, so all of that, it's pretty cool.

324
00:20:47,160 --> 00:20:49,800
I can save it again, so I can save that.

325
00:20:49,800 --> 00:20:53,360
And it will generate for me a new version of my unique URL

326
00:20:53,360 --> 00:20:54,120
here soon.

327
00:20:54,120 --> 00:20:57,080
It's a big one because we dumped the entire texture.

328
00:20:57,080 --> 00:20:59,200
So we just need to wait for the server

329
00:20:59,200 --> 00:21:03,720
to come back without an error, hopefully.

330
00:21:03,760 --> 00:21:06,640
In the meantime, oh yeah, it's fine, it's on.

331
00:21:06,640 --> 00:21:10,840
OK, in the meantime here, let me show you a third tool.

332
00:21:10,840 --> 00:21:14,120
So Babylon.js is developed to be easy to use.

333
00:21:14,120 --> 00:21:16,560
You do not have to understand shader, math, whatever.

334
00:21:16,560 --> 00:21:17,600
You just drop object.

335
00:21:17,600 --> 00:21:19,840
You create a light, a scene, a camera, an object.

336
00:21:19,840 --> 00:21:21,720
You load the GLTF file, and you're done.

337
00:21:21,720 --> 00:21:24,240
But if you want to, there is no problem for you

338
00:21:24,240 --> 00:21:26,920
to just look under the hood and see how it works.

339
00:21:26,920 --> 00:21:28,920
And for that, we have a third object,

340
00:21:28,920 --> 00:21:33,480
which is used by even our competitors.

341
00:21:33,480 --> 00:21:37,280
The name of this object is a browser extension.

342
00:21:37,280 --> 00:21:38,760
The name is Spector.js.

343
00:21:38,760 --> 00:21:43,280
Spector.js is a tool that will let me inspect WebGL,

344
00:21:43,280 --> 00:21:45,320
like a profiler for WebGL.

345
00:21:45,320 --> 00:21:47,920
So at the first thought, you could

346
00:21:47,920 --> 00:21:51,360
think that it should be a tool developed by the browser vendor.

347
00:21:51,360 --> 00:21:53,480
But unfortunately, the browser vendor

348
00:21:53,480 --> 00:21:56,320
are not investing a lot into WebGL.

349
00:21:56,320 --> 00:21:57,880
So we did it.

350
00:21:57,880 --> 00:22:00,440
So yeah, when I click here, I have a record button.

351
00:22:00,440 --> 00:22:03,800
And the record button will just analyze the current frame

352
00:22:03,800 --> 00:22:09,440
and generate for me here a simple view of the orders that

353
00:22:09,440 --> 00:22:11,400
were sent directly to WebGL.

354
00:22:11,400 --> 00:22:15,320
So you can see here directly the bind, vertex array,

355
00:22:15,320 --> 00:22:19,080
the viewport, all this command, our WebGL command.

356
00:22:19,080 --> 00:22:22,120
And every time you can see, here I am clearing the screen.

357
00:22:22,120 --> 00:22:27,360
And here I am using this shader that I can edit live here

358
00:22:27,360 --> 00:22:28,160
to send the data.

359
00:22:28,160 --> 00:22:31,800
So you can see precisely what's happening in your code.

360
00:22:31,800 --> 00:22:34,120
And you can even edit the code here.

361
00:22:34,120 --> 00:22:38,240
And it will dynamically change the rendering.

362
00:22:38,240 --> 00:22:40,080
So this one is pretty advanced.

363
00:22:40,080 --> 00:22:41,160
Not a lot of people use it.

364
00:22:41,160 --> 00:22:44,920
But you should know that from the very beginning up to the end,

365
00:22:44,920 --> 00:22:48,280
like directly to WebGL, you have the control.

366
00:22:48,280 --> 00:22:50,560
All right.

367
00:22:50,560 --> 00:22:52,960
Then let me get back to my other demo.

368
00:22:52,960 --> 00:22:54,680
So that's a new feature that we are adding

369
00:22:54,680 --> 00:22:57,440
with the upcoming release for one.

370
00:22:57,440 --> 00:23:00,640
And this one is one that I love.

371
00:23:00,640 --> 00:23:04,080
I am part of the W3C and Kronos working groups.

372
00:23:04,080 --> 00:23:06,800
And what I try to do with JavaScript

373
00:23:06,800 --> 00:23:11,080
is to make it equivalent to what you can do with native.

374
00:23:11,080 --> 00:23:14,160
And one of the main problem of JavaScript

375
00:23:14,160 --> 00:23:17,280
is that it's running on one unique thread.

376
00:23:17,280 --> 00:23:19,080
There is a notion of web workers.

377
00:23:19,080 --> 00:23:21,720
But web workers are like process.

378
00:23:21,720 --> 00:23:24,160
To communicate between the main thread and the web worker,

379
00:23:24,160 --> 00:23:28,200
you have to send string or share just a ray of memory.

380
00:23:28,200 --> 00:23:32,760
We recently had a victory by having the validation

381
00:23:32,760 --> 00:23:35,240
of the off-screen canvas here.

382
00:23:35,240 --> 00:23:36,280
And let me show you the code.

383
00:23:36,280 --> 00:23:40,040
It's going to be even easier to understand.

384
00:23:40,040 --> 00:23:44,480
If I look at my code, which is here,

385
00:23:44,480 --> 00:23:49,440
trying to make it bigger enough for you guys to see it.

386
00:23:49,440 --> 00:23:50,200
Can I zoom here?

387
00:23:50,200 --> 00:23:52,360
Yes.

388
00:23:52,360 --> 00:24:00,640
So I actually have here two scripts.

389
00:24:00,640 --> 00:24:05,600
If I find the off-screen canvas API in the Windows object,

390
00:24:05,600 --> 00:24:07,720
I will get a canvas.

391
00:24:07,720 --> 00:24:10,360
So there is two canvases, one on the left, one on the right.

392
00:24:10,360 --> 00:24:13,720
The one on the left is just initialized by Babylon.js.

393
00:24:13,720 --> 00:24:15,360
So here you can see.

394
00:24:15,360 --> 00:24:16,200
I create the canvas.

395
00:24:16,200 --> 00:24:17,760
I create my engine, my scene.

396
00:24:17,760 --> 00:24:20,160
I say, execute the code, render the scene.

397
00:24:20,160 --> 00:24:20,560
Done.

398
00:24:20,560 --> 00:24:23,240
And so it just load this object and rotate it.

399
00:24:23,240 --> 00:24:27,320
It's done on the main UI.

400
00:24:27,320 --> 00:24:29,680
The second one, it's exactly the same thing,

401
00:24:29,680 --> 00:24:32,520
but using not a canvas, but an off-screen canvas.

402
00:24:32,520 --> 00:24:34,520
And so when there is off-screen canvas support

403
00:24:34,520 --> 00:24:37,800
on your browser, so far only Chromium-based browser,

404
00:24:37,800 --> 00:24:40,760
meaning Edge, Opera, and Chrome, then

405
00:24:40,760 --> 00:24:44,200
you can call a new API called Transfer Control to Offscreen,

406
00:24:44,200 --> 00:24:48,240
meaning that I will let a second thread control the canvas

407
00:24:48,240 --> 00:24:49,520
and render to it.

408
00:24:49,520 --> 00:24:51,400
And that's utterly cool.

409
00:24:51,400 --> 00:24:51,680
Why?

410
00:24:51,680 --> 00:24:56,720
Because now here it's a worker that runs this one,

411
00:24:56,720 --> 00:24:58,600
meaning that if I slow things down when

412
00:24:58,600 --> 00:25:00,280
I'm going to click on this button,

413
00:25:00,280 --> 00:25:06,800
I will do something stupid like computing this random scene

414
00:25:06,800 --> 00:25:10,200
of course 10 million times, just to simulate

415
00:25:10,200 --> 00:25:13,600
that you are doing something easy on the main thread.

416
00:25:13,600 --> 00:25:14,960
And we do that, for instance, when

417
00:25:14,960 --> 00:25:16,920
you are on SharePoint or on PowerPoint,

418
00:25:16,920 --> 00:25:19,560
let's say PowerPoint, when you display the current slide,

419
00:25:19,560 --> 00:25:21,440
PowerPoint is using the main thread

420
00:25:21,440 --> 00:25:23,200
to prepare the next slide.

421
00:25:23,200 --> 00:25:27,000
So the main thread, the main UI, is already pretty

422
00:25:27,000 --> 00:25:28,680
easily occupied to do something.

423
00:25:28,680 --> 00:25:31,080
So by using off-screen canvas, we

424
00:25:31,080 --> 00:25:35,760
can have stuff that definitely are slowing down

425
00:25:35,760 --> 00:25:39,560
the main thread, but still, because a second thread is

426
00:25:39,560 --> 00:25:42,120
running and doing all your 3D rendering,

427
00:25:42,120 --> 00:25:45,880
the experience for the user is pretty good.

428
00:25:45,880 --> 00:25:47,760
Before, it was only that.

429
00:25:47,760 --> 00:25:50,680
And now, we have access to the worker render.

430
00:25:50,680 --> 00:25:51,720
Yes, I know.

431
00:25:51,720 --> 00:25:55,680
I'm excited, but for a good reason.

432
00:25:55,680 --> 00:25:57,800
Other stuff we are working on, I wanted to show you,

433
00:25:57,800 --> 00:25:59,040
like, GLTF support.

434
00:25:59,040 --> 00:26:00,880
Here, I have my halion head.

435
00:26:00,880 --> 00:26:04,200
And if you look at my code, loading GLTF files,

436
00:26:04,200 --> 00:26:06,600
it's just one line of code here.

437
00:26:06,600 --> 00:26:10,800
Sorry, I forgot to zoom it again.

438
00:26:10,800 --> 00:26:15,080
And we have options to load it once and then duplicate it.

439
00:26:15,080 --> 00:26:17,760
If you are familiar with Unity, I just

440
00:26:17,760 --> 00:26:20,240
can't remember now the name of that feature,

441
00:26:20,240 --> 00:26:21,840
but you can load an object, an asset,

442
00:26:21,840 --> 00:26:23,960
and then introduce it multiple times in your scene.

443
00:26:23,960 --> 00:26:26,920
They are replicated, and it's a clone.

444
00:26:26,920 --> 00:26:28,080
So it's a smart clone.

445
00:26:28,080 --> 00:26:29,960
The geometry and all the shader are reused.

446
00:26:29,960 --> 00:26:32,720
So here, the entire code to run these three guys

447
00:26:32,720 --> 00:26:36,520
with, just for the sake of it, skeletal animation,

448
00:26:36,520 --> 00:26:41,120
meaning that the head is moving with the neck.

449
00:26:41,120 --> 00:26:43,400
And also, there is morph target.

450
00:26:43,400 --> 00:26:46,600
So the halion is smiling and closing the move.

451
00:26:46,600 --> 00:26:49,960
All of that is loaded from the GLTF and then duplicated.

452
00:26:49,960 --> 00:26:50,680
And it's what?

453
00:26:50,680 --> 00:26:54,280
It's 20 line of code.

454
00:26:54,280 --> 00:26:55,280
This one, we don't care.

455
00:26:55,280 --> 00:26:56,040
Let's go.

456
00:26:56,040 --> 00:26:59,120
Next one, WebXR.

457
00:26:59,120 --> 00:27:02,400
So this demo, you know it?

458
00:27:02,400 --> 00:27:04,080
Yes.

459
00:27:04,080 --> 00:27:09,880
We are in Hill Valley about to go back in time.

460
00:27:09,880 --> 00:27:11,520
And it's running in the browser.

461
00:27:11,520 --> 00:27:12,600
Yes, I know.

462
00:27:12,600 --> 00:27:13,560
That's very cool.

463
00:27:13,560 --> 00:27:14,240
I like that.

464
00:27:14,240 --> 00:27:15,520
And there is a little button here.

465
00:27:15,520 --> 00:27:17,000
I don't have a headset connected.

466
00:27:17,000 --> 00:27:18,760
So when I'm going to click on this button,

467
00:27:18,760 --> 00:27:21,320
Babylon.js will automatically consider

468
00:27:21,320 --> 00:27:23,680
that you want to use some cardboard stuff,

469
00:27:23,680 --> 00:27:26,440
like running on your phone and setting that in a cardboard.

470
00:27:26,440 --> 00:27:28,400
It will switch to cardboard mode,

471
00:27:28,400 --> 00:27:31,560
just to give you the experience here.

472
00:27:31,560 --> 00:27:36,080
So if you have Oculus Quest, a Oculus VR, a Microsoft Mixed

473
00:27:36,080 --> 00:27:40,120
Reality headset, thanks to WebXR, we just click on this button

474
00:27:40,120 --> 00:27:42,120
and we will take care of everything for you.

475
00:27:42,120 --> 00:27:44,200
And it's literally one line of code.

476
00:27:44,200 --> 00:27:46,280
There is one line of code to switch.

477
00:27:46,280 --> 00:27:49,200
We have an object named the VR Experience Helper.

478
00:27:49,200 --> 00:27:52,320
You just need to instantiate it, and it will automatically

479
00:27:52,320 --> 00:27:54,600
detect everything for you, provide the button.

480
00:27:54,600 --> 00:27:59,360
And the scene that was not VR before, then become a VR scene.

481
00:27:59,360 --> 00:28:03,880
Up to a point where you can, I need to reload.

482
00:28:03,880 --> 00:28:07,880
Sadly, it should be fine.

483
00:28:07,880 --> 00:28:08,920
We also support collision.

484
00:28:08,920 --> 00:28:09,600
I mentioned that.

485
00:28:09,600 --> 00:28:14,280
Here, it's a kind of a doom in a museum.

486
00:28:14,280 --> 00:28:17,160
And I walk like in a game, meaning

487
00:28:17,160 --> 00:28:21,800
that I can't go through the wall, but I can go upstairs

488
00:28:21,800 --> 00:28:25,320
by just walking like in doom or quake, exactly the same

489
00:28:25,320 --> 00:28:29,160
the way I play it with my keyboard and my mouse.

490
00:28:29,160 --> 00:28:30,960
And that's running in your browser, obviously.

491
00:28:30,960 --> 00:28:33,960
And at some point, you want to switch into VR.

492
00:28:33,960 --> 00:28:35,480
Just click the button, and then you

493
00:28:35,480 --> 00:28:39,040
can teleport with the controller.

494
00:28:39,080 --> 00:28:41,480
Right.

495
00:28:41,480 --> 00:28:44,320
Last but not least, I wanted also to mention this guy.

496
00:28:44,320 --> 00:28:45,280
You saw the video.

497
00:28:45,280 --> 00:28:49,920
That's physics, real-time physics using WebAssembly.

498
00:28:49,920 --> 00:28:53,720
Here, you have a complicated mesh, this marble tower.

499
00:28:53,720 --> 00:28:57,080
And we have a code here on the left that just drops

500
00:28:57,080 --> 00:28:59,000
marbles at the top of the tower.

501
00:28:59,000 --> 00:29:01,880
And then we let the physics engine deal with that.

502
00:29:01,880 --> 00:29:05,760
And to just drop a marble, let me show you.

503
00:29:05,760 --> 00:29:06,800
Where is that?

504
00:29:06,800 --> 00:29:08,760
When we call create marble here,

505
00:29:08,760 --> 00:29:10,080
let me zoom again.

506
00:29:13,800 --> 00:29:16,360
The only thing you have to do is to say, OK,

507
00:29:16,360 --> 00:29:18,000
my marble has a physics and post-or.

508
00:29:18,000 --> 00:29:20,640
So there is an imposter representing in the physics

509
00:29:20,640 --> 00:29:23,000
engine my marble here.

510
00:29:23,000 --> 00:29:24,880
And it's going to be a sphere with a mass of two

511
00:29:24,880 --> 00:29:26,920
and a friction of whatever.

512
00:29:26,920 --> 00:29:28,920
And just with that, you let the system drop,

513
00:29:28,920 --> 00:29:31,320
and it will control for you the entire emulation up

514
00:29:31,320 --> 00:29:33,360
to a point where we have a complicated scene here

515
00:29:33,360 --> 00:29:36,560
with this object, this scale.

516
00:29:36,560 --> 00:29:39,280
Also, when they reach this point,

517
00:29:39,280 --> 00:29:42,120
I should have a smaller window.

518
00:29:42,120 --> 00:29:45,560
Here, they go into the wheel.

519
00:29:45,560 --> 00:29:47,520
And that's also a physics engine just

520
00:29:47,520 --> 00:29:50,640
applying a real-time constraint on it.

521
00:29:50,640 --> 00:29:52,480
Right.

522
00:29:52,480 --> 00:29:53,880
Let me get back to my slide.

523
00:29:59,240 --> 00:30:01,400
So you should try it.

524
00:30:01,400 --> 00:30:03,000
Everything is entirely free.

525
00:30:03,000 --> 00:30:05,800
There is no hidden line or whatever.

526
00:30:05,800 --> 00:30:08,320
You have all the links here, BabylonJS.com,

527
00:30:08,320 --> 00:30:11,720
doc.babillon, et cetera, the forum, the playground, enemy,

528
00:30:11,720 --> 00:30:16,040
the dot-material editor if you want to play with shaders.

529
00:30:16,040 --> 00:30:17,880
That's it.

530
00:30:17,880 --> 00:30:18,880
Right on time.

531
00:30:18,880 --> 00:30:23,400
[? Applause ?]

532
00:30:23,400 --> 00:30:24,920
Super cool, right?

533
00:30:24,920 --> 00:30:26,400
OK.

534
00:30:26,400 --> 00:30:27,280
Thanks for the talk.

535
00:30:27,280 --> 00:30:28,400
My pleasure.

536
00:30:28,400 --> 00:30:30,800
And we have some questions.

537
00:30:30,800 --> 00:30:39,080
So what's the advantage of BabylonJS over 3JS?

538
00:30:39,080 --> 00:30:39,920
What's the advantage?

539
00:30:39,920 --> 00:30:42,640
First, we are a team of 10 people paid by Microsoft

540
00:30:42,640 --> 00:30:43,440
to maintain it.

541
00:30:43,440 --> 00:30:46,280
We have a 24-hour bug turned around.

542
00:30:46,280 --> 00:30:47,200
So you declare a bug.

543
00:30:47,200 --> 00:30:50,120
It's fixed in less than 24 hours.

544
00:30:50,120 --> 00:30:52,600
We do not have backward compatibility issues,

545
00:30:52,600 --> 00:30:56,600
like I know 3JS for that.

546
00:30:56,600 --> 00:30:58,440
And we have tools.

547
00:30:58,440 --> 00:30:59,280
3JS is a good tool.

548
00:30:59,320 --> 00:31:01,120
I don't want to say it's a bad tool.

549
00:31:01,120 --> 00:31:02,600
We just have a different philosophy.

550
00:31:02,600 --> 00:31:05,760
BabylonJS is more aimed for professional products

551
00:31:05,760 --> 00:31:07,880
in the sense that there is support.

552
00:31:07,880 --> 00:31:10,400
And there is this turnaround for the bugs.

553
00:31:10,400 --> 00:31:12,160
Like, we fix bugs very, very fast.

554
00:31:12,160 --> 00:31:14,680
Like, definitely, when I saw John Romero mentioning

555
00:31:14,680 --> 00:31:17,360
that you should fix bugs first, that's exactly us.

556
00:31:17,360 --> 00:31:19,960
We stop everything we are working on to just fix bugs.

557
00:31:19,960 --> 00:31:20,800
We do not have bugs.

558
00:31:20,800 --> 00:31:23,000
And we have a link on our GitHub.

559
00:31:23,000 --> 00:31:25,920
If you go to the GitHub, there is a mention.

560
00:31:25,920 --> 00:31:28,760
The average time to fix a bug on our repo.

561
00:31:28,760 --> 00:31:30,560
And so far, it's less than 24 hours.

562
00:31:30,560 --> 00:31:32,720
I guess it's 20 hours.

563
00:31:32,720 --> 00:31:33,640
OK.

564
00:31:33,640 --> 00:31:36,440
Just from my side, I've used 3JS before.

565
00:31:36,440 --> 00:31:40,400
And it usually took me quite a few hours

566
00:31:40,400 --> 00:31:42,560
to get started with any project.

567
00:31:42,560 --> 00:31:44,680
And with BabylonJS, I started using it.

568
00:31:44,680 --> 00:31:46,680
And maybe because I came from 3JS,

569
00:31:46,680 --> 00:31:48,560
and the basics are almost the same.

570
00:31:48,560 --> 00:31:53,520
But I developed something like a VR, just a shooter,

571
00:31:53,520 --> 00:31:55,520
where you can shoot balls just into empty space

572
00:31:55,520 --> 00:31:57,760
or something within one hour and headed

573
00:31:57,760 --> 00:31:59,920
to running on my Oculus Quest in the browser,

574
00:31:59,920 --> 00:32:01,360
which was super cool.

575
00:32:01,360 --> 00:32:05,120
So I think just getting started this way easier,

576
00:32:05,120 --> 00:32:05,960
at least for me it was.

577
00:32:05,960 --> 00:32:07,480
That's why we have a documentation.

578
00:32:07,480 --> 00:32:10,000
No, I'm kidding.

579
00:32:10,000 --> 00:32:11,200
No one's here about documentation.

580
00:32:14,760 --> 00:32:15,760
What's in it?

581
00:32:15,760 --> 00:32:17,240
What's in for it for Microsoft?

582
00:32:17,240 --> 00:32:20,040
You mean why the reason of Microsoft to support the product?

583
00:32:20,040 --> 00:32:21,320
I guess, yes.

584
00:32:21,320 --> 00:32:25,880
I created BabylonJS on my spare time.

585
00:32:25,880 --> 00:32:28,600
And Microsoft was interested to use it.

586
00:32:28,600 --> 00:32:31,080
So we use it in SharePoint, Dynamics, and other products.

587
00:32:31,080 --> 00:32:33,400
We have 12 products in Microsoft using it.

588
00:32:33,400 --> 00:32:36,000
And I was also working for Microsoft.

589
00:32:36,000 --> 00:32:38,600
It was not correlated at the beginning.

590
00:32:38,600 --> 00:32:42,920
And they asked me if I wanted to keep working on BabylonJS.

591
00:32:42,920 --> 00:32:46,000
And I asked them, I will provide you support

592
00:32:46,000 --> 00:32:48,120
for all the 12 products that you have.

593
00:32:48,120 --> 00:32:50,800
But as a compensation, you give me a team,

594
00:32:50,800 --> 00:32:52,800
and we keep it open source, and people can use it.

595
00:32:52,800 --> 00:32:54,920
So it was a win-win situation where Microsoft

596
00:32:54,920 --> 00:32:59,920
get a fully fledged team supporting the product.

597
00:32:59,920 --> 00:33:03,160
Whereas I wanted it to be open and for everyone.

598
00:33:03,160 --> 00:33:07,200
So it was a win-win situation.

599
00:33:07,200 --> 00:33:09,000
I have a question.

600
00:33:09,000 --> 00:33:12,400
So you told me earlier that you developed another game engine

601
00:33:12,400 --> 00:33:14,600
before you came to Microsoft.

602
00:33:14,600 --> 00:33:16,800
Can you tell us about that a little bit?

603
00:33:16,800 --> 00:33:19,760
And actually, I was almost emotional when I saw John Romero

604
00:33:19,760 --> 00:33:22,160
because I was a big fan of him and John Carmack.

605
00:33:22,160 --> 00:33:24,440
And I created my own engine when I was 17.

606
00:33:24,440 --> 00:33:29,000
It was a C using an engine developed with C on DOS,

607
00:33:29,000 --> 00:33:30,040
using Whatcom.

608
00:33:30,040 --> 00:33:33,000
And I imported it back to DirectX.

609
00:33:33,000 --> 00:33:34,080
And then I joined Microsoft.

610
00:33:34,080 --> 00:33:34,960
And so I stopped.

611
00:33:34,960 --> 00:33:37,080
And I sold the company I created because it

612
00:33:37,080 --> 00:33:39,640
was a 3D engine for architecture.

613
00:33:39,640 --> 00:33:41,520
And I sold my company, I moved to Microsoft.

614
00:33:41,520 --> 00:33:43,760
And when I was a Microsoft, I was like, oh my gosh,

615
00:33:43,760 --> 00:33:45,240
I still want to do 3D, right?

616
00:33:45,240 --> 00:33:51,680
So at that specific time, six years ago, we shipped IE10.

617
00:33:51,680 --> 00:33:54,280
And IE10 came with the very first version of WebGL

618
00:33:54,280 --> 00:33:55,200
for Microsoft.

619
00:33:55,200 --> 00:33:58,120
It was here since ages for Chrome.

620
00:33:58,120 --> 00:34:00,880
But Microsoft entered a 3D game on the browser

621
00:34:00,880 --> 00:34:02,040
like six years ago.

622
00:34:02,040 --> 00:34:04,600
And so I was like, OK, I want to do 3D stuff.

623
00:34:04,600 --> 00:34:07,800
There is this WebGL support now everywhere, thanks to IE.

624
00:34:07,800 --> 00:34:10,280
OK, let's create a port of my old engine, which

625
00:34:10,280 --> 00:34:12,920
was now BabillionGS.

626
00:34:12,920 --> 00:34:13,920
That's really cool.

627
00:34:13,920 --> 00:34:16,480
I was 17.

628
00:34:16,480 --> 00:34:19,120
OK, I have another fun question at the end.

629
00:34:19,120 --> 00:34:21,920
How do you pass data between other JS code and the 3D

630
00:34:21,920 --> 00:34:22,680
application?

631
00:34:22,680 --> 00:34:24,240
Are there any restrictions?

632
00:34:24,240 --> 00:34:26,560
So your 3D application will be JavaScript as well.

633
00:34:26,560 --> 00:34:28,280
So there is no restriction at all.

634
00:34:28,280 --> 00:34:32,400
Like literally, BabillionGS is like jQuery or any other framework

635
00:34:32,400 --> 00:34:33,600
or React or whatever.

636
00:34:33,600 --> 00:34:35,320
You're going to use it the same way.

637
00:34:35,320 --> 00:34:38,600
We have ES6 version of it and ES5,

638
00:34:38,600 --> 00:34:42,080
depending on if you want to use it with module or without module.

639
00:34:42,080 --> 00:34:43,600
And there is no restriction.

640
00:34:43,600 --> 00:34:46,080
Like literally, all the application using BabillionGS

641
00:34:46,080 --> 00:34:49,000
just communicate through JavaScript.

642
00:34:49,000 --> 00:34:51,240
OK, there is one on performance.

643
00:34:51,240 --> 00:34:53,520
What about performance and compatibility with mobile

644
00:34:53,520 --> 00:34:54,240
devices?

645
00:34:54,240 --> 00:34:56,000
Another good reason to use BabillionGS.

646
00:34:56,000 --> 00:34:58,280
One of our motto is to make sure that it works everywhere.

647
00:34:58,280 --> 00:35:01,320
So we have a full list of devices that we test on.

648
00:35:01,320 --> 00:35:04,720
And I would say like 20% of BabillionGS core code

649
00:35:04,720 --> 00:35:06,240
is about compatibility.

650
00:35:06,240 --> 00:35:09,040
So we know that on specific version of iOS or Safari

651
00:35:09,040 --> 00:35:14,440
of IE or Firefox or whatever, we have hack.

652
00:35:14,440 --> 00:35:15,920
Because WebGL is a spec.

653
00:35:15,920 --> 00:35:19,280
And human implementing a spec, you know it works, right?

654
00:35:19,280 --> 00:35:22,440
So everyone understands things a little bit differently.

655
00:35:22,440 --> 00:35:24,520
So we make sure that it works everywhere.

656
00:35:24,520 --> 00:35:28,320
And then we have thousands of countermeasures

657
00:35:28,320 --> 00:35:29,200
for performance.

658
00:35:29,200 --> 00:35:31,120
So we support WebGL 2 by default.

659
00:35:31,120 --> 00:35:34,040
If you don't have WebGL 2, we have a fallback for WebGL 1.

660
00:35:34,040 --> 00:35:36,040
If you are supporting WebGL 1 with extension,

661
00:35:36,040 --> 00:35:37,680
we're going to use the extension for you.

662
00:35:37,680 --> 00:35:40,360
So it's transparent in a sense that we try to reach out

663
00:35:40,360 --> 00:35:41,320
the best performance.

664
00:35:41,320 --> 00:35:43,840
We know that in mobile, the CPU is the problem.

665
00:35:43,840 --> 00:35:46,520
So we try to move everything to the GPUs.

666
00:35:46,560 --> 00:35:49,960
Even collision should be done by the GPU if you can.

667
00:35:49,960 --> 00:35:52,480
So we run on Chromebooks, for instance.

668
00:35:52,480 --> 00:35:54,400
Flipgrid, if you know it, is an application

669
00:35:54,400 --> 00:35:55,920
Microsoft acquired recently.

670
00:35:55,920 --> 00:35:57,720
They were just using JavaScript.

671
00:35:57,720 --> 00:35:59,480
But they were not able to run on Chromebooks

672
00:35:59,480 --> 00:36:02,520
because it's an application that do screen capture

673
00:36:02,520 --> 00:36:03,800
for students.

674
00:36:03,800 --> 00:36:07,520
The way they did screen capture was very easy on the CPU.

675
00:36:07,520 --> 00:36:09,600
And by using BabillionGS, they were

676
00:36:09,600 --> 00:36:12,440
able to move a bit of this code onto the GPU.

677
00:36:12,440 --> 00:36:15,520
And they were able to reach out a user using Chromebooks.

678
00:36:15,520 --> 00:36:19,120
So that's a very important focus for us.

679
00:36:19,120 --> 00:36:22,160
So you have full support already for WebGPU?

680
00:36:22,160 --> 00:36:25,960
We are the only engine that I know of supporting WebGPU.

681
00:36:25,960 --> 00:36:29,240
Yeah, that's also what my last step was.

682
00:36:29,240 --> 00:36:31,800
OK, what are the next steps for BabillionGS?

683
00:36:31,800 --> 00:36:33,440
Features, etc.

684
00:36:33,440 --> 00:36:36,800
Number one is we're going to ship for one in February.

685
00:36:36,800 --> 00:36:38,880
February will be about what I show you today,

686
00:36:38,880 --> 00:36:41,040
like finishing the node material editor.

687
00:36:41,040 --> 00:36:42,440
It's number one key feature.

688
00:36:42,440 --> 00:36:44,400
And number two is supporting WebGPU.

689
00:36:44,400 --> 00:36:47,080
WebGPU is not even a draft spec so far.

690
00:36:47,080 --> 00:36:48,120
It's an evolving version.

691
00:36:48,120 --> 00:36:50,520
So every week, I have one of my engineers just changing

692
00:36:50,520 --> 00:36:53,200
all the code we had to adapt to the new spec.

693
00:36:53,200 --> 00:36:55,080
Like, oh, yeah, they reversed the viewport.

694
00:36:55,080 --> 00:36:58,000
Or it's now up or down anyway.

695
00:36:58,000 --> 00:37:01,880
So that's going to also be the main portion of 4.1.

696
00:37:01,880 --> 00:37:07,160
And WebXR just hit the draft spec standard recently.

697
00:37:07,160 --> 00:37:10,160
So we plan to make sure that everything works for 4.1

698
00:37:10,160 --> 00:37:11,000
as well.

699
00:37:11,000 --> 00:37:13,840
And WebXR, which is an evolution of WebVR,

700
00:37:13,840 --> 00:37:16,640
is complicated because it's not just about VR.

701
00:37:16,640 --> 00:37:18,320
It's also about AR.

702
00:37:18,320 --> 00:37:20,240
So we are also working with the HoloLens team

703
00:37:20,240 --> 00:37:24,160
to make sure that you can do AR with the web.

704
00:37:24,160 --> 00:37:27,800
So it's WebXR on the AR context, supporting fingers

705
00:37:27,800 --> 00:37:29,320
instead of controllers, stuff like that.

706
00:37:29,320 --> 00:37:32,360
So that's the third big bucket of 4.1.

707
00:37:32,360 --> 00:37:35,880
And then you still need the 3,000 euros for the HoloLens.

708
00:37:35,880 --> 00:37:38,720
Yes, but I'm not responsible for that.

709
00:37:38,720 --> 00:37:41,760
I would have given that to everyone else.

710
00:37:41,760 --> 00:37:42,640
I'd like this one.

711
00:37:42,640 --> 00:37:47,000
Would you recommend BabylonJS for 2D or 2.5D development?

712
00:37:47,000 --> 00:37:54,400
Honestly, if you compare to Pixi or other 2D framework,

713
00:37:54,400 --> 00:37:55,840
it depends on what you want to do.

714
00:37:55,840 --> 00:37:58,680
For 2.5, yes, definitely.

715
00:37:58,680 --> 00:38:01,120
And we have a lot of people using it.

716
00:38:01,120 --> 00:38:03,600
We recently came across a company

717
00:38:03,600 --> 00:38:06,720
creating games for Las Vegas.

718
00:38:06,720 --> 00:38:07,560
What's the name?

719
00:38:07,560 --> 00:38:09,400
You know the?

720
00:38:09,400 --> 00:38:11,320
Yes, slot machines, exactly.

721
00:38:11,360 --> 00:38:14,280
It's purely 2D, but they are using 3D

722
00:38:14,280 --> 00:38:15,720
to move the card and stuff like that.

723
00:38:15,720 --> 00:38:18,240
So if there is a sense of at least layers,

724
00:38:18,240 --> 00:38:19,800
yes, BabylonJS is a good example.

725
00:38:19,800 --> 00:38:23,640
Else, you should stick with pure 2D framework tools.

726
00:38:23,640 --> 00:38:26,400
Unless you're interested by the backward compatibility issue

727
00:38:26,400 --> 00:38:29,080
and the turnaround of bug, then we also

728
00:38:29,080 --> 00:38:33,480
have a 2D version of BabylonJS, so it could be useful.

729
00:38:33,480 --> 00:38:36,160
OK, I have another question.

730
00:38:36,160 --> 00:38:39,960
Did you actually have to support Internet Explorer

731
00:38:40,000 --> 00:38:42,320
with BabylonJS when you're working for Microsoft?

732
00:38:42,320 --> 00:38:45,160
Yes, we still support it.

733
00:38:45,160 --> 00:38:46,240
You should take my demos.

734
00:38:46,240 --> 00:38:49,560
They run on Internet Explorer.

735
00:38:49,560 --> 00:38:53,520
The PlayGrant won't work because I am in love with the arrow

736
00:38:53,520 --> 00:38:54,120
function.

737
00:38:54,120 --> 00:38:56,160
You know the new arrow function of JavaScript?

738
00:38:56,160 --> 00:38:57,040
That sucks.

739
00:38:57,040 --> 00:38:59,600
But I was like, OK, the PlayGrant will not work on IE.

740
00:38:59,600 --> 00:39:00,440
That's not a big deal.

741
00:39:00,440 --> 00:39:03,760
But every rendering stuff will work because, yeah,

742
00:39:03,760 --> 00:39:06,320
it's important for us.

743
00:39:06,320 --> 00:39:06,960
One more?

744
00:39:06,960 --> 00:39:07,240
OK.

745
00:39:07,240 --> 00:39:11,000
One more question, and I'm just going to look through here.

746
00:39:11,000 --> 00:39:13,280
I saw one that I can quickly support.

747
00:39:13,280 --> 00:39:17,240
Which browser do we support all?

748
00:39:17,240 --> 00:39:20,120
Can you import models, maps, materials you

749
00:39:20,120 --> 00:39:24,240
build in other software, if so, what formats are supported?

750
00:39:24,240 --> 00:39:27,840
So yes, part of the BabylonJS tools I did not share today.

751
00:39:27,840 --> 00:39:35,640
We have exporters for 3DS Max, Maya, Unity, Blender 3D,

752
00:39:35,640 --> 00:39:37,200
a few others.

753
00:39:37,200 --> 00:39:38,840
And we also developed transcoders.

754
00:39:38,840 --> 00:39:41,120
And the goal is to have everything in GLTF file format.

755
00:39:41,120 --> 00:39:43,240
So as long as your tool that you are using

756
00:39:43,240 --> 00:39:47,360
is exporting into GLTF, then we will be able to load it.

757
00:39:47,360 --> 00:39:51,640
And we are also supporting tools that generate GLTF

758
00:39:51,640 --> 00:39:55,800
into the tools I mentioned before, like Maya, Autodesk, Maya,

759
00:39:55,800 --> 00:39:59,960
3DS Max, Blender, and stuff.

760
00:39:59,960 --> 00:40:00,720
OK.

761
00:40:00,720 --> 00:40:02,320
Let me see if I find one more.

762
00:40:02,320 --> 00:40:03,680
There's some over AI.

763
00:40:03,680 --> 00:40:05,320
I don't get the AI.

764
00:40:10,600 --> 00:40:13,560
How accessible is Babylon to designers?

765
00:40:13,560 --> 00:40:16,320
We have users that are purely designers.

766
00:40:16,320 --> 00:40:19,560
They use another tool that I did not demonstrate here.

767
00:40:19,560 --> 00:40:20,800
It's the sandbox.

768
00:40:20,800 --> 00:40:23,760
The sandbox is a place where you drag and drop a GLTF model

769
00:40:23,760 --> 00:40:24,840
and the inspector pops.

770
00:40:24,840 --> 00:40:27,960
And you can edit everything just visually.

771
00:40:27,960 --> 00:40:30,600
And they use that a lot to create.

772
00:40:30,600 --> 00:40:31,800
We have a viewer as well.

773
00:40:31,800 --> 00:40:34,000
It's a tool that you can plug in a page.

774
00:40:34,000 --> 00:40:37,240
And just one line of HTML, you say display this object.

775
00:40:37,240 --> 00:40:40,480
And there is no code, just a HTML tag.

776
00:40:40,480 --> 00:40:43,280
So they use that to display controls and 3D objects,

777
00:40:43,280 --> 00:40:44,360
for instance.

778
00:40:44,360 --> 00:40:44,960
OK.

779
00:40:44,960 --> 00:40:46,000
Last one.

780
00:40:46,000 --> 00:40:48,160
Is it possible to stream 3D geometry

781
00:40:48,160 --> 00:40:51,160
between server and client for an open world level?

782
00:40:51,160 --> 00:40:51,760
Yes.

783
00:40:51,760 --> 00:40:53,360
We have users doing that.

784
00:40:53,360 --> 00:40:54,280
Super cool.

785
00:40:54,280 --> 00:40:57,200
We just do the client huntering, to be honest.

786
00:40:57,200 --> 00:41:01,120
We don't do the backend, for instance.

787
00:41:01,120 --> 00:41:03,320
And the streaming, you have to stream something compatible

788
00:41:03,320 --> 00:41:04,000
with Babylon.js.

789
00:41:04,000 --> 00:41:05,960
But yes, we are doing that.

790
00:41:05,960 --> 00:41:06,760
OK.

791
00:41:06,760 --> 00:41:08,320
If you have any other question, feel free.

792
00:41:08,320 --> 00:41:10,400
I'm going to stay here, trying not to sleep.

793
00:41:10,400 --> 00:41:11,280
So it should be fine.

794
00:41:11,280 --> 00:41:13,160
If someone talked to me, it's going to be fine.

795
00:41:13,160 --> 00:41:14,680
First, you can have lunch now.

796
00:41:14,680 --> 00:41:15,920
There's going to be lunch.

797
00:41:15,920 --> 00:41:17,360
So everyone, have a good lunch.

798
00:41:17,360 --> 00:41:21,320
And yeah, see you after the break.

