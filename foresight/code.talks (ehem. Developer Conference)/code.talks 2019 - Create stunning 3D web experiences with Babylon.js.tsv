start	end	text
0	16000	Hi, everyone. I'm very glad to be here, even though I am fighting against a jet lag. There
16000	21640	is none our difference between here and Seattle. So back with me. I'm going to try to not sleep
21640	28280	on stage. Yeah, we're going to I'm going to present Babylon.js. It's an engine I created
28280	34280	six years ago. And it's an engine that I am pretty proud of because now it's very it's
34280	40680	used in a lot of important places. For instance, that's PowerPoint. But this little guy here
40680	46600	is a 3D object animated by Babylon.js inside PowerPoint. And actually, at Microsoft, every
46600	52400	time you're going to see 3D, it's probably a 99% sure that it's actually based on Babylon.js.
52400	58720	It's something that I'm going to present right now. It's an open source framework. It's
58720	65120	entirely free. It's based on Apache 2 or do the heck you want with the code. There is
65120	70880	no license, no nothing. It's brand new at Microsoft. We are using our own technology
70880	76080	here, but this technology is entirely free for you to use in any place you want. It's
76120	84120	based on any in a lot of web open standard and web open frameworks like WebGL 1 and 2,
84120	92620	WebGPU. So WebGPU, are you aware of what WebGPU is? Who knows? Okay, quite a few. It's
92620	98800	the evolution of WebGL actually. It's metal slash Vulkan slash DirectX 12 for the web.
98800	105080	It's a new technology that we are working on with Apple and Google to support. The interesting
106080	111440	point here of using Babylon.js is that if you want to use 3D today, you do not have to worry
111440	117200	about that. We will take care of all the underlying frameworks like WebGL 1, 2, or WebGPU. We also
117200	123080	support WebXR. I'm going to do a quick demo later. It's a full-fledged game engine and rendering
123080	129320	engine. So we support physics and VR particles. I don't like this image, but that's the best I
129400	135600	can have. It's kind of the unity for the web, if I may. We're going to provide you tools to create
135600	142520	3D on the web without the burden of understanding shaders and math and stuff like that. We also
142520	148680	support physically-based rendering. It's an advanced technique created by Disney starting with, I
148680	154160	don't know, Untangle, the name of the movie. I am not sure it's the right translation anyway. The
154800	163240	lady with the long hairs, they created PBR for this cartoon. And this PBR, and thanks to the power of
163240	168080	our computer now, can be now rendered in real-time on the web. I'm going to get back to that later
168080	175520	as well. We have principles, and I'm very glad to have my talk after John's one because we have
175520	180440	exactly the same principle. I like bug first. We create tools before the engine and stuff like
180440	186040	that. And we are also backward compatible. That's something that just pissed me off a lot when I
186040	190840	have to update to a new version of a framework and I have to rewrite everything. That's something I
190840	197640	do not want for Babylon. So if you're using Babylon.js, you will be able to run it up until the next
197640	203200	version without having to change anything on your code. We do not break backward compatibility. And
203200	212520	we are also supporting GLTF. Who is aware of what GLTF is? Okay. So GLTF stands for Graphic Library
212520	218640	Transport Format, and that's the JPEG of 3D. You think about JPEG. If I give you a JPEG image, you
218640	224000	will be able to display it on your computer, right? Because everyone understands JPEG or PNG. For
224000	229880	3D objects, like the file format itself, it was a mess up until now because there were like 10,000
229960	235360	different file formats, all in code printable, obviously, and all proprietary. So we sit down with
235360	241480	the Kronos group, the group who is standardizing WebGL, and we define all together, and by all, I
241480	247440	mean Google, Facebook, Microsoft, NVIDIA, et cetera, et cetera, we define a file format. And this
247440	253680	file format is GLTF here. So if you want to render 3D objects like the dinosaur I was rendering
253680	258440	before, it's a GLTF file format. And so by supporting this file format, we ensure that your
259320	266520	object will be displayed and compatible. It's an open source project. Since the very beginning, it was
266520	274520	started as an open source project. It's still an open source project. We have around like 100,000
274520	280920	posts on the forum. It's a very active forum. Most of the users, when they come to us, the number one
280920	287920	reason they come to use Babylon.js is because of the forum. We have a very lovely community. It's
288000	294440	very helpful. There is no shame. It's definitely a place where you can ask any question and you will
294440	303280	get a response in a matter of a few days. We also have a pretty large number of active supporters,
303280	312520	like people contributing to the forum and to the engine itself. So it's used in a very, it's funny
312520	317760	because I started it six years ago, and I was the only developer, and it was only for me. And now
317760	324160	it's used across the web. Adobe is using it for their product. Being Microsoft apps, obviously, I
324160	328520	mentioned SharePoint, PowerPoint, et cetera, but it's also used by Dolby, by Minecraft. If you go to
328520	333160	Minecraft.net, classic.minecraft.net, you're going to play the Minecraft game, and it's using
333160	339480	Babylon.js to do the rendering, et cetera. We work with a lot of small, high, very large companies,
339480	344600	and my favorites are probably the enthusiasts, like students of people that just do that because
344640	350800	they want to learn how to create a game or to create 3D. And that's why we created the engine. And so
350800	358560	also, I want to underline and second what John said just before, we created the engine, but we also
358560	364320	created a lot of tools. And I'm going to get back and demonstrate these tools. Just name-dropping here,
364320	368720	I'm going to get back to that later. The goal for me is to mention that it's not just an engine,
368720	374120	it's actually engine is a small portion of it. The tools that let you create what you want to
374160	382160	create in 3D are really the important point here. Okay. So I have a quick video because I wanted to
382160	387960	capture what the community was creating with Babylon.js. So instead of going through a demo
387960	391840	manually, I created a quick video for you to see.
494320	523800	Right. It was an example of in real time,
523800	526360	in real time, obviously, running on any computer
526360	528680	what can be done with the framework itself.
528680	531840	So instead of spending too much time just talking,
531840	534320	I would like to show you in action
534320	536320	what you can do with Babylon.js.
536320	540360	I'm going to start with a first presentation of one
540360	541440	of the tools that I have.
541440	543640	Nope, it's not here.
543640	544800	The Playground.
544800	547080	So Babylon.js-playground.com is a place
547080	549120	where you can go to learn the engine.
549120	552160	So I spend a lot of time writing documentation,
552160	554520	and that's a pity because no one's read it, right?
554520	556160	You don't read documentation.
556160	558200	No one's read them.
558200	561120	So I decided to take the problem the other way,
561120	564040	like, how do I learn?
564040	565880	I learned by trying, right?
565880	568440	And so that's why we created the Babylon Playground.
568440	571400	Here, you have on the left a full-fledged editor,
571400	573440	and on the right, you have the real-time rendering of what
573440	575240	you just typed on the left.
575240	577040	The editor comes with IntelliSense.
577040	580280	So if you type here, you can get help while you type.
580280	581840	So instead of reading documentation,
581840	584040	again, you can just experiment, OK?
584040	585720	And I'm going to just show you what
585720	587960	can be done in a matter of a few seconds here.
587960	591160	So here, I have a scene that I created.
591160	593840	I create a camera, which is the point of view
593840	596480	that I can manipulate with touch or with my mouse.
596480	599680	I set the target of my camera, and I attach it to the events.
599680	602400	By calling Attach Control, I attach to the mouse event,
602400	603960	the pointer event, and stuff like that.
603960	607200	So I can play with my finger here or just with my mouse
607200	609360	if I want to, or the keyboard.
609360	610800	That's all coming from this line.
610800	615240	Then I create a light, like in real world, you have a light.
615240	617520	I set the intensity of that light and the sphere.
617520	619760	So if I run that, I just have my sphere
619760	621440	in the center of my screen, OK?
621440	624840	As a user, now what you can do is to experiment.
624840	626760	And we use the playground for experimentation,
626760	627920	but also for bug fixing.
627920	631200	When a user comes to us and say, hey, I have a bug,
631200	633280	most of the time, we ask them to reproduce the bug here,
633280	635600	because it's then easier to discuss.
635600	638200	So I'm going to create, actually, a material.
638200	644560	The material here will be a PBR, sorry,
644560	648560	Babylon, dot PBR Metallic Roughness Material.
648560	652240	It's a specific kind of material that simulates metal, OK?
652240	653240	I'm going to give it a name.
653240	657000	And as you can see, there is a while I type help
657000	658000	on the parameters.
658000	660560	So for instance, I want the name here, like foo,
660560	664160	and the scene where I want to have my material.
664160	669160	Then I set my sphere.material to that material, OK?
669160	674320	And I'm going to just quickly set some values, like metallic.
674320	677240	It will be fully metallic between 0 and 1.
677240	682240	And is that a little bit too small, maybe, right?
682240	685200	Let me change the font size to something bigger.
685200	687960	OK, sorry about that.
687960	690040	And I want also to set my material
690040	696000	to be the roughness of it, like brushed metal, if you prefer,
696000	698640	will be 0.5, again, between 0 and 1.
698640	703600	If I run it, you have a sense of something change,
703600	707840	like it's a bit metallic, but the power of a metal,
707840	710000	like in your car, is because you see the reflection
710000	711760	of the environment, right?
711760	714560	A car by itself with no reflection looks rough.
714560	716080	So what I'm going to do here, I'm
716080	719400	going to just ask the scene to create a default environment
719400	722200	for me.
722200	726840	And by doing that, now here, I have a sphere, which
726840	729440	is like brushed metal, OK?
729440	730760	So I can play with the parameters,
730760	732320	but I told you it's all about tools.
732320	734120	So here I have the playground, but we also
734120	736000	have a second tool that I would like to show you,
736000	737400	which is the inspector.
737400	739840	Here I can invoke the inspector by calling
739840	744440	deburglayer.show, show.
744440	748920	And if I do that, zoop, I'm going to have an additional UI
748920	750880	that will be on top of my scene here,
750880	752680	where I can see the tree view.
752680	754840	So I have my glide, my camera, my sphere,
754840	756240	and the background that was generated
756240	758200	by the created environment.
758200	761200	And I can take my material here, and I
761200	763000	have all the properties of that material.
763000	766280	And for instance, I can play with the levels here
766280	768680	and change the opacity or the roughness.
768680	776160	So fully metallic, fully rough, OK?
776160	779720	Let me just get closer.
779720	786400	So that's the Chinese theater in Los Angeles.
786400	788000	And you can play with the parameter here.
788000	791800	Also, we introduce a lot of options that you can change,
791800	794000	like I want to render in wireframe and stuff like that.
794000	796600	You can play with it here, OK?
796600	797720	That's the inspector.
797720	800040	The inspector is extremely useful to debug or just
800040	800760	develop your scene.
800760	802920	So you can, visually, instead of just typing the code
802920	804880	in the playground or in your application,
804880	807800	you can just visually debug the scene itself.
807800	809240	Right.
809240	812400	Another tool I wanted to show you is the documentation itself.
812400	813040	Yes, I know.
813040	814680	People won't go there, but still, I
814680	818360	would like to show them the documentation for one reason.
818360	821280	Here, we have a regular documentation
821280	825040	with code practice, example, regular documentation
825040	827320	you should be looking for.
827320	829160	But we also have the playground here.
829160	830800	And the playground is actually a tool
830800	834640	that's going to search through all the examples that were created
834640	836000	in the playground here.
836000	838400	Because in the playground, if I hit Save,
838400	842000	it will generate, for me, a unique URL
842000	845960	that I can share with my friend with this code running, OK?
845960	848080	And that is stored in our database.
848080	850960	And if I want to learn something,
850960	853160	I could just search for the documentation
853160	856720	or I could just search for examples showing me
856720	861240	how to do something, like I want to do shadows.
861240	864360	And I can search for shadows inside our database.
864360	869000	And here, you're going to see, like, I just lost my mouse, OK?
869000	870200	Thank you.
870200	873480	I can find any example here where people just
873480	875600	do something with shadows.
875600	877400	And I can click on the Playground button here.
877400	878280	It's completely random.
878280	880880	I have no idea what's inside this playground.
880880	882320	Hopefully, it's not something stupid.
882320	884280	OK, there is shadows.
884280	885120	Cool.
885120	887080	Someone was doing that with shadows, OK?
887080	889560	And so I can look the code here and say, OK,
889560	891640	what did you do with this code?
891640	893880	And maybe that's going to help me learn or understand
893880	895800	how the shadows works.
895800	896960	Right.
896960	899560	Among new features that are going to be available soon,
899560	902240	there is the Node Material Editor.
902240	906040	I created here a material, but this material is actually
906040	908760	me setting some parameters to an existing material.
908760	910320	We have a couple of materials.
910320	912400	We have what we call the standard material, which
912400	914560	is the fastest and the simpler one.
914560	917080	And we have the pretty advanced physically based
917080	920240	renderer, which is used here, the PBR.
920240	922240	But if you want to do something different,
922240	924800	you have to use what we call the shader material.
924800	928520	The shader material is up to you to code using shader
928520	931720	languages, your own material, OK?
931720	934560	That's a friction point, definitely.
934560	937200	A lot of people say, I would love to create my own material,
937200	942160	but I don't want to learn how to create shaders.
942160	944680	So we introduce with the very new version here
944680	946240	the Node Material Editor.
946240	948080	The Node Material Editor is a way for you
948080	949600	to create your material.
949600	953440	So who is aware of what a shader is?
953440	954960	Quite a few, OK.
954960	959680	A shader is made actually of a C-like language
959680	961600	that's going to explain to the GPU how
961600	965680	to create your own rendering, OK, here.
965680	967960	Here I have a pretty simple one, and I will just
967960	970440	focus on the second part here.
970440	973080	A shader is made of a vertex shader and a fragment shader.
973080	976920	The vertex shader explains how the geometry is drawn
976920	980640	on the screen, and the fragment shader
980640	982520	explains how to compute the color.
982520	984600	And here my color is just, I want
984600	988240	to set a color to the output, OK?
988240	992240	This tool will let me actually create my own shader
992240	993440	without having to develop them.
993440	997760	For instance, here I'm going to open and look for the light.
997760	999640	I want to add lightning support.
999640	1003600	Here my object is just flat, just gray, OK?
1003600	1007120	To support lightning, I need to add light support here.
1007120	1008840	And the light supports here will expect
1008840	1010840	me to provide a few parameters that you
1010840	1011960	can see on the left here.
1011960	1014280	I'm going to just quickly connect them.
1014280	1017640	So the world position, which is the position of my mesh
1017640	1021400	in the world, and the world normal, which is the normal,
1021400	1024680	is a perpendicular vector defining the surface
1024680	1026880	of every object, OK?
1026880	1033080	If I just plug them here and do that, then boom,
1033080	1035040	I have support for light.
1035040	1038840	A shader was developed for me by the system.
1038840	1041960	I can export the shader here.
1041960	1045440	So instead of coding the shader, which is quite big,
1045440	1049520	if you look at it, all of that is
1049520	1052600	required to do a lightning shader.
1052600	1055480	You just have to wire some stuff, right?
1055480	1057800	And that can go even better than that.
1057800	1059320	Instead of having just plain color,
1059320	1060520	I want to have a texture.
1060520	1062760	So think about your game, you have your character,
1062760	1064560	and you want to have lightning, OK, done.
1064560	1066840	And I want also to have a texture, OK?
1066840	1069760	So let me just load the texture here.
1069760	1073840	The texture will require me to give it a texture, perfect,
1073840	1076240	like a crate.
1076240	1079680	And what I want to do is actually take the light color,
1079680	1082000	the texture color, merge them.
1082000	1084840	And to merge them, I will remove this link here.
1084840	1090640	Just multiply them, boom, taking the light output,
1090640	1093800	multiply it by the texture output,
1093800	1097840	plug that into the output here, and boom,
1097840	1100800	I have a crate with light.
1100800	1101720	Isn't that cool?
1108040	1110200	Again, you can save your wonderful shader,
1110200	1113400	and it will generate for you a unique URL here.
1113400	1117000	And let me just fast forward to a complicated shader
1117000	1118200	that I created for you.
1118200	1121200	This one is pretty advanced.
1121200	1124920	It's not that good looking, but it's just me as a developer
1124920	1128400	trying to play the designer.
1128400	1132320	So I have a shader, and you can see here,
1132320	1134760	there is what we call bump or normal.
1134760	1138960	You feel like there is not a smooth surface.
1138960	1142840	We feel like there is something defining a bump here,
1142840	1144880	and actually just coming from a texture.
1144880	1148120	And also at some places here, there are reflections.
1148120	1150360	So it's a complex shader because the reflection is
1150360	1153080	defined by a second texture here.
1153080	1157040	We are using reflection texture to do the reflection here.
1157040	1159640	We have a perturbed normal object
1159640	1161480	that will change the normal.
1161480	1164560	And by the way, Doom 3, created by John Carmich, by the way,
1164560	1166280	introduced this notion of bump.
1166280	1168840	Bump is using a texture to simulate the volume.
1168840	1170320	Anyway, we don't care.
1170320	1174280	Here, it's just that I want to use that code.
1174280	1177200	So the shader here will generate for me
1177200	1183080	a code, like literal code that I can save here.
1183080	1184120	I'm going to open the file.
1184120	1186760	And this code is regular TypeScript code
1186760	1190920	that you can use directly in your own environment.
1190920	1193880	So let me remove all of that.
1193880	1195480	Dump here.
1195480	1198480	What was generated for me by the node generator?
1198480	1201840	So the node generator, it's actually a node model
1201840	1204120	where you create a node material, and then you have blocks,
1204120	1207000	transform block, whatever block, texture block, et cetera.
1207000	1209480	You connect all of them, like you connect the output
1209480	1210320	with the input.
1210320	1214000	So this code is just literally what I did visually.
1214000	1217000	And then it gives you a node material object
1217000	1220160	that you can plug with your sphere here.
1220160	1224320	That material is equal to node material object.
1224320	1228520	Let me close this guy here, close that, run that again,
1228520	1229800	and boom.
1229800	1234240	In my code, I have my wonderful reflection bump,
1234240	1236640	whatever scene.
1236640	1240560	Yes, it's ugly, but it's about technical and development, right?
1240560	1243520	It's not the designer track.
1243520	1247160	All right, so all of that, it's pretty cool.
1247160	1249800	I can save it again, so I can save that.
1249800	1253360	And it will generate for me a new version of my unique URL
1253360	1254120	here soon.
1254120	1257080	It's a big one because we dumped the entire texture.
1257080	1259200	So we just need to wait for the server
1259200	1263720	to come back without an error, hopefully.
1263760	1266640	In the meantime, oh yeah, it's fine, it's on.
1266640	1270840	OK, in the meantime here, let me show you a third tool.
1270840	1274120	So Babylon.js is developed to be easy to use.
1274120	1276560	You do not have to understand shader, math, whatever.
1276560	1277600	You just drop object.
1277600	1279840	You create a light, a scene, a camera, an object.
1279840	1281720	You load the GLTF file, and you're done.
1281720	1284240	But if you want to, there is no problem for you
1284240	1286920	to just look under the hood and see how it works.
1286920	1288920	And for that, we have a third object,
1288920	1293480	which is used by even our competitors.
1293480	1297280	The name of this object is a browser extension.
1297280	1298760	The name is Spector.js.
1298760	1303280	Spector.js is a tool that will let me inspect WebGL,
1303280	1305320	like a profiler for WebGL.
1305320	1307920	So at the first thought, you could
1307920	1311360	think that it should be a tool developed by the browser vendor.
1311360	1313480	But unfortunately, the browser vendor
1313480	1316320	are not investing a lot into WebGL.
1316320	1317880	So we did it.
1317880	1320440	So yeah, when I click here, I have a record button.
1320440	1323800	And the record button will just analyze the current frame
1323800	1329440	and generate for me here a simple view of the orders that
1329440	1331400	were sent directly to WebGL.
1331400	1335320	So you can see here directly the bind, vertex array,
1335320	1339080	the viewport, all this command, our WebGL command.
1339080	1342120	And every time you can see, here I am clearing the screen.
1342120	1347360	And here I am using this shader that I can edit live here
1347360	1348160	to send the data.
1348160	1351800	So you can see precisely what's happening in your code.
1351800	1354120	And you can even edit the code here.
1354120	1358240	And it will dynamically change the rendering.
1358240	1360080	So this one is pretty advanced.
1360080	1361160	Not a lot of people use it.
1361160	1364920	But you should know that from the very beginning up to the end,
1364920	1368280	like directly to WebGL, you have the control.
1368280	1370560	All right.
1370560	1372960	Then let me get back to my other demo.
1372960	1374680	So that's a new feature that we are adding
1374680	1377440	with the upcoming release for one.
1377440	1380640	And this one is one that I love.
1380640	1384080	I am part of the W3C and Kronos working groups.
1384080	1386800	And what I try to do with JavaScript
1386800	1391080	is to make it equivalent to what you can do with native.
1391080	1394160	And one of the main problem of JavaScript
1394160	1397280	is that it's running on one unique thread.
1397280	1399080	There is a notion of web workers.
1399080	1401720	But web workers are like process.
1401720	1404160	To communicate between the main thread and the web worker,
1404160	1408200	you have to send string or share just a ray of memory.
1408200	1412760	We recently had a victory by having the validation
1412760	1415240	of the off-screen canvas here.
1415240	1416280	And let me show you the code.
1416280	1420040	It's going to be even easier to understand.
1420040	1424480	If I look at my code, which is here,
1424480	1429440	trying to make it bigger enough for you guys to see it.
1429440	1430200	Can I zoom here?
1430200	1432360	Yes.
1432360	1440640	So I actually have here two scripts.
1440640	1445600	If I find the off-screen canvas API in the Windows object,
1445600	1447720	I will get a canvas.
1447720	1450360	So there is two canvases, one on the left, one on the right.
1450360	1453720	The one on the left is just initialized by Babylon.js.
1453720	1455360	So here you can see.
1455360	1456200	I create the canvas.
1456200	1457760	I create my engine, my scene.
1457760	1460160	I say, execute the code, render the scene.
1460160	1460560	Done.
1460560	1463240	And so it just load this object and rotate it.
1463240	1467320	It's done on the main UI.
1467320	1469680	The second one, it's exactly the same thing,
1469680	1472520	but using not a canvas, but an off-screen canvas.
1472520	1474520	And so when there is off-screen canvas support
1474520	1477800	on your browser, so far only Chromium-based browser,
1477800	1480760	meaning Edge, Opera, and Chrome, then
1480760	1484200	you can call a new API called Transfer Control to Offscreen,
1484200	1488240	meaning that I will let a second thread control the canvas
1488240	1489520	and render to it.
1489520	1491400	And that's utterly cool.
1491400	1491680	Why?
1491680	1496720	Because now here it's a worker that runs this one,
1496720	1498600	meaning that if I slow things down when
1498600	1500280	I'm going to click on this button,
1500280	1506800	I will do something stupid like computing this random scene
1506800	1510200	of course 10 million times, just to simulate
1510200	1513600	that you are doing something easy on the main thread.
1513600	1514960	And we do that, for instance, when
1514960	1516920	you are on SharePoint or on PowerPoint,
1516920	1519560	let's say PowerPoint, when you display the current slide,
1519560	1521440	PowerPoint is using the main thread
1521440	1523200	to prepare the next slide.
1523200	1527000	So the main thread, the main UI, is already pretty
1527000	1528680	easily occupied to do something.
1528680	1531080	So by using off-screen canvas, we
1531080	1535760	can have stuff that definitely are slowing down
1535760	1539560	the main thread, but still, because a second thread is
1539560	1542120	running and doing all your 3D rendering,
1542120	1545880	the experience for the user is pretty good.
1545880	1547760	Before, it was only that.
1547760	1550680	And now, we have access to the worker render.
1550680	1551720	Yes, I know.
1551720	1555680	I'm excited, but for a good reason.
1555680	1557800	Other stuff we are working on, I wanted to show you,
1557800	1559040	like, GLTF support.
1559040	1560880	Here, I have my halion head.
1560880	1564200	And if you look at my code, loading GLTF files,
1564200	1566600	it's just one line of code here.
1566600	1570800	Sorry, I forgot to zoom it again.
1570800	1575080	And we have options to load it once and then duplicate it.
1575080	1577760	If you are familiar with Unity, I just
1577760	1580240	can't remember now the name of that feature,
1580240	1581840	but you can load an object, an asset,
1581840	1583960	and then introduce it multiple times in your scene.
1583960	1586920	They are replicated, and it's a clone.
1586920	1588080	So it's a smart clone.
1588080	1589960	The geometry and all the shader are reused.
1589960	1592720	So here, the entire code to run these three guys
1592720	1596520	with, just for the sake of it, skeletal animation,
1596520	1601120	meaning that the head is moving with the neck.
1601120	1603400	And also, there is morph target.
1603400	1606600	So the halion is smiling and closing the move.
1606600	1609960	All of that is loaded from the GLTF and then duplicated.
1609960	1610680	And it's what?
1610680	1614280	It's 20 line of code.
1614280	1615280	This one, we don't care.
1615280	1616040	Let's go.
1616040	1619120	Next one, WebXR.
1619120	1622400	So this demo, you know it?
1622400	1624080	Yes.
1624080	1629880	We are in Hill Valley about to go back in time.
1629880	1631520	And it's running in the browser.
1631520	1632600	Yes, I know.
1632600	1633560	That's very cool.
1633560	1634240	I like that.
1634240	1635520	And there is a little button here.
1635520	1637000	I don't have a headset connected.
1637000	1638760	So when I'm going to click on this button,
1638760	1641320	Babylon.js will automatically consider
1641320	1643680	that you want to use some cardboard stuff,
1643680	1646440	like running on your phone and setting that in a cardboard.
1646440	1648400	It will switch to cardboard mode,
1648400	1651560	just to give you the experience here.
1651560	1656080	So if you have Oculus Quest, a Oculus VR, a Microsoft Mixed
1656080	1660120	Reality headset, thanks to WebXR, we just click on this button
1660120	1662120	and we will take care of everything for you.
1662120	1664200	And it's literally one line of code.
1664200	1666280	There is one line of code to switch.
1666280	1669200	We have an object named the VR Experience Helper.
1669200	1672320	You just need to instantiate it, and it will automatically
1672320	1674600	detect everything for you, provide the button.
1674600	1679360	And the scene that was not VR before, then become a VR scene.
1679360	1683880	Up to a point where you can, I need to reload.
1683880	1687880	Sadly, it should be fine.
1687880	1688920	We also support collision.
1688920	1689600	I mentioned that.
1689600	1694280	Here, it's a kind of a doom in a museum.
1694280	1697160	And I walk like in a game, meaning
1697160	1701800	that I can't go through the wall, but I can go upstairs
1701800	1705320	by just walking like in doom or quake, exactly the same
1705320	1709160	the way I play it with my keyboard and my mouse.
1709160	1710960	And that's running in your browser, obviously.
1710960	1713960	And at some point, you want to switch into VR.
1713960	1715480	Just click the button, and then you
1715480	1719040	can teleport with the controller.
1719080	1721480	Right.
1721480	1724320	Last but not least, I wanted also to mention this guy.
1724320	1725280	You saw the video.
1725280	1729920	That's physics, real-time physics using WebAssembly.
1729920	1733720	Here, you have a complicated mesh, this marble tower.
1733720	1737080	And we have a code here on the left that just drops
1737080	1739000	marbles at the top of the tower.
1739000	1741880	And then we let the physics engine deal with that.
1741880	1745760	And to just drop a marble, let me show you.
1745760	1746800	Where is that?
1746800	1748760	When we call create marble here,
1748760	1750080	let me zoom again.
1753800	1756360	The only thing you have to do is to say, OK,
1756360	1758000	my marble has a physics and post-or.
1758000	1760640	So there is an imposter representing in the physics
1760640	1763000	engine my marble here.
1763000	1764880	And it's going to be a sphere with a mass of two
1764880	1766920	and a friction of whatever.
1766920	1768920	And just with that, you let the system drop,
1768920	1771320	and it will control for you the entire emulation up
1771320	1773360	to a point where we have a complicated scene here
1773360	1776560	with this object, this scale.
1776560	1779280	Also, when they reach this point,
1779280	1782120	I should have a smaller window.
1782120	1785560	Here, they go into the wheel.
1785560	1787520	And that's also a physics engine just
1787520	1790640	applying a real-time constraint on it.
1790640	1792480	Right.
1792480	1793880	Let me get back to my slide.
1799240	1801400	So you should try it.
1801400	1803000	Everything is entirely free.
1803000	1805800	There is no hidden line or whatever.
1805800	1808320	You have all the links here, BabylonJS.com,
1808320	1811720	doc.babillon, et cetera, the forum, the playground, enemy,
1811720	1816040	the dot-material editor if you want to play with shaders.
1816040	1817880	That's it.
1817880	1818880	Right on time.
1818880	1823400	[? Applause ?]
1823400	1824920	Super cool, right?
1824920	1826400	OK.
1826400	1827280	Thanks for the talk.
1827280	1828400	My pleasure.
1828400	1830800	And we have some questions.
1830800	1839080	So what's the advantage of BabylonJS over 3JS?
1839080	1839920	What's the advantage?
1839920	1842640	First, we are a team of 10 people paid by Microsoft
1842640	1843440	to maintain it.
1843440	1846280	We have a 24-hour bug turned around.
1846280	1847200	So you declare a bug.
1847200	1850120	It's fixed in less than 24 hours.
1850120	1852600	We do not have backward compatibility issues,
1852600	1856600	like I know 3JS for that.
1856600	1858440	And we have tools.
1858440	1859280	3JS is a good tool.
1859320	1861120	I don't want to say it's a bad tool.
1861120	1862600	We just have a different philosophy.
1862600	1865760	BabylonJS is more aimed for professional products
1865760	1867880	in the sense that there is support.
1867880	1870400	And there is this turnaround for the bugs.
1870400	1872160	Like, we fix bugs very, very fast.
1872160	1874680	Like, definitely, when I saw John Romero mentioning
1874680	1877360	that you should fix bugs first, that's exactly us.
1877360	1879960	We stop everything we are working on to just fix bugs.
1879960	1880800	We do not have bugs.
1880800	1883000	And we have a link on our GitHub.
1883000	1885920	If you go to the GitHub, there is a mention.
1885920	1888760	The average time to fix a bug on our repo.
1888760	1890560	And so far, it's less than 24 hours.
1890560	1892720	I guess it's 20 hours.
1892720	1893640	OK.
1893640	1896440	Just from my side, I've used 3JS before.
1896440	1900400	And it usually took me quite a few hours
1900400	1902560	to get started with any project.
1902560	1904680	And with BabylonJS, I started using it.
1904680	1906680	And maybe because I came from 3JS,
1906680	1908560	and the basics are almost the same.
1908560	1913520	But I developed something like a VR, just a shooter,
1913520	1915520	where you can shoot balls just into empty space
1915520	1917760	or something within one hour and headed
1917760	1919920	to running on my Oculus Quest in the browser,
1919920	1921360	which was super cool.
1921360	1925120	So I think just getting started this way easier,
1925120	1925960	at least for me it was.
1925960	1927480	That's why we have a documentation.
1927480	1930000	No, I'm kidding.
1930000	1931200	No one's here about documentation.
1934760	1935760	What's in it?
1935760	1937240	What's in for it for Microsoft?
1937240	1940040	You mean why the reason of Microsoft to support the product?
1940040	1941320	I guess, yes.
1941320	1945880	I created BabylonJS on my spare time.
1945880	1948600	And Microsoft was interested to use it.
1948600	1951080	So we use it in SharePoint, Dynamics, and other products.
1951080	1953400	We have 12 products in Microsoft using it.
1953400	1956000	And I was also working for Microsoft.
1956000	1958600	It was not correlated at the beginning.
1958600	1962920	And they asked me if I wanted to keep working on BabylonJS.
1962920	1966000	And I asked them, I will provide you support
1966000	1968120	for all the 12 products that you have.
1968120	1970800	But as a compensation, you give me a team,
1970800	1972800	and we keep it open source, and people can use it.
1972800	1974920	So it was a win-win situation where Microsoft
1974920	1979920	get a fully fledged team supporting the product.
1979920	1983160	Whereas I wanted it to be open and for everyone.
1983160	1987200	So it was a win-win situation.
1987200	1989000	I have a question.
1989000	1992400	So you told me earlier that you developed another game engine
1992400	1994600	before you came to Microsoft.
1994600	1996800	Can you tell us about that a little bit?
1996800	1999760	And actually, I was almost emotional when I saw John Romero
1999760	2002160	because I was a big fan of him and John Carmack.
2002160	2004440	And I created my own engine when I was 17.
2004440	2009000	It was a C using an engine developed with C on DOS,
2009000	2010040	using Whatcom.
2010040	2013000	And I imported it back to DirectX.
2013000	2014080	And then I joined Microsoft.
2014080	2014960	And so I stopped.
2014960	2017080	And I sold the company I created because it
2017080	2019640	was a 3D engine for architecture.
2019640	2021520	And I sold my company, I moved to Microsoft.
2021520	2023760	And when I was a Microsoft, I was like, oh my gosh,
2023760	2025240	I still want to do 3D, right?
2025240	2031680	So at that specific time, six years ago, we shipped IE10.
2031680	2034280	And IE10 came with the very first version of WebGL
2034280	2035200	for Microsoft.
2035200	2038120	It was here since ages for Chrome.
2038120	2040880	But Microsoft entered a 3D game on the browser
2040880	2042040	like six years ago.
2042040	2044600	And so I was like, OK, I want to do 3D stuff.
2044600	2047800	There is this WebGL support now everywhere, thanks to IE.
2047800	2050280	OK, let's create a port of my old engine, which
2050280	2052920	was now BabillionGS.
2052920	2053920	That's really cool.
2053920	2056480	I was 17.
2056480	2059120	OK, I have another fun question at the end.
2059120	2061920	How do you pass data between other JS code and the 3D
2061920	2062680	application?
2062680	2064240	Are there any restrictions?
2064240	2066560	So your 3D application will be JavaScript as well.
2066560	2068280	So there is no restriction at all.
2068280	2072400	Like literally, BabillionGS is like jQuery or any other framework
2072400	2073600	or React or whatever.
2073600	2075320	You're going to use it the same way.
2075320	2078600	We have ES6 version of it and ES5,
2078600	2082080	depending on if you want to use it with module or without module.
2082080	2083600	And there is no restriction.
2083600	2086080	Like literally, all the application using BabillionGS
2086080	2089000	just communicate through JavaScript.
2089000	2091240	OK, there is one on performance.
2091240	2093520	What about performance and compatibility with mobile
2093520	2094240	devices?
2094240	2096000	Another good reason to use BabillionGS.
2096000	2098280	One of our motto is to make sure that it works everywhere.
2098280	2101320	So we have a full list of devices that we test on.
2101320	2104720	And I would say like 20% of BabillionGS core code
2104720	2106240	is about compatibility.
2106240	2109040	So we know that on specific version of iOS or Safari
2109040	2114440	of IE or Firefox or whatever, we have hack.
2114440	2115920	Because WebGL is a spec.
2115920	2119280	And human implementing a spec, you know it works, right?
2119280	2122440	So everyone understands things a little bit differently.
2122440	2124520	So we make sure that it works everywhere.
2124520	2128320	And then we have thousands of countermeasures
2128320	2129200	for performance.
2129200	2131120	So we support WebGL 2 by default.
2131120	2134040	If you don't have WebGL 2, we have a fallback for WebGL 1.
2134040	2136040	If you are supporting WebGL 1 with extension,
2136040	2137680	we're going to use the extension for you.
2137680	2140360	So it's transparent in a sense that we try to reach out
2140360	2141320	the best performance.
2141320	2143840	We know that in mobile, the CPU is the problem.
2143840	2146520	So we try to move everything to the GPUs.
2146560	2149960	Even collision should be done by the GPU if you can.
2149960	2152480	So we run on Chromebooks, for instance.
2152480	2154400	Flipgrid, if you know it, is an application
2154400	2155920	Microsoft acquired recently.
2155920	2157720	They were just using JavaScript.
2157720	2159480	But they were not able to run on Chromebooks
2159480	2162520	because it's an application that do screen capture
2162520	2163800	for students.
2163800	2167520	The way they did screen capture was very easy on the CPU.
2167520	2169600	And by using BabillionGS, they were
2169600	2172440	able to move a bit of this code onto the GPU.
2172440	2175520	And they were able to reach out a user using Chromebooks.
2175520	2179120	So that's a very important focus for us.
2179120	2182160	So you have full support already for WebGPU?
2182160	2185960	We are the only engine that I know of supporting WebGPU.
2185960	2189240	Yeah, that's also what my last step was.
2189240	2191800	OK, what are the next steps for BabillionGS?
2191800	2193440	Features, etc.
2193440	2196800	Number one is we're going to ship for one in February.
2196800	2198880	February will be about what I show you today,
2198880	2201040	like finishing the node material editor.
2201040	2202440	It's number one key feature.
2202440	2204400	And number two is supporting WebGPU.
2204400	2207080	WebGPU is not even a draft spec so far.
2207080	2208120	It's an evolving version.
2208120	2210520	So every week, I have one of my engineers just changing
2210520	2213200	all the code we had to adapt to the new spec.
2213200	2215080	Like, oh, yeah, they reversed the viewport.
2215080	2218000	Or it's now up or down anyway.
2218000	2221880	So that's going to also be the main portion of 4.1.
2221880	2227160	And WebXR just hit the draft spec standard recently.
2227160	2230160	So we plan to make sure that everything works for 4.1
2230160	2231000	as well.
2231000	2233840	And WebXR, which is an evolution of WebVR,
2233840	2236640	is complicated because it's not just about VR.
2236640	2238320	It's also about AR.
2238320	2240240	So we are also working with the HoloLens team
2240240	2244160	to make sure that you can do AR with the web.
2244160	2247800	So it's WebXR on the AR context, supporting fingers
2247800	2249320	instead of controllers, stuff like that.
2249320	2252360	So that's the third big bucket of 4.1.
2252360	2255880	And then you still need the 3,000 euros for the HoloLens.
2255880	2258720	Yes, but I'm not responsible for that.
2258720	2261760	I would have given that to everyone else.
2261760	2262640	I'd like this one.
2262640	2267000	Would you recommend BabylonJS for 2D or 2.5D development?
2267000	2274400	Honestly, if you compare to Pixi or other 2D framework,
2274400	2275840	it depends on what you want to do.
2275840	2278680	For 2.5, yes, definitely.
2278680	2281120	And we have a lot of people using it.
2281120	2283600	We recently came across a company
2283600	2286720	creating games for Las Vegas.
2286720	2287560	What's the name?
2287560	2289400	You know the?
2289400	2291320	Yes, slot machines, exactly.
2291360	2294280	It's purely 2D, but they are using 3D
2294280	2295720	to move the card and stuff like that.
2295720	2298240	So if there is a sense of at least layers,
2298240	2299800	yes, BabylonJS is a good example.
2299800	2303640	Else, you should stick with pure 2D framework tools.
2303640	2306400	Unless you're interested by the backward compatibility issue
2306400	2309080	and the turnaround of bug, then we also
2309080	2313480	have a 2D version of BabylonJS, so it could be useful.
2313480	2316160	OK, I have another question.
2316160	2319960	Did you actually have to support Internet Explorer
2320000	2322320	with BabylonJS when you're working for Microsoft?
2322320	2325160	Yes, we still support it.
2325160	2326240	You should take my demos.
2326240	2329560	They run on Internet Explorer.
2329560	2333520	The PlayGrant won't work because I am in love with the arrow
2333520	2334120	function.
2334120	2336160	You know the new arrow function of JavaScript?
2336160	2337040	That sucks.
2337040	2339600	But I was like, OK, the PlayGrant will not work on IE.
2339600	2340440	That's not a big deal.
2340440	2343760	But every rendering stuff will work because, yeah,
2343760	2346320	it's important for us.
2346320	2346960	One more?
2346960	2347240	OK.
2347240	2351000	One more question, and I'm just going to look through here.
2351000	2353280	I saw one that I can quickly support.
2353280	2357240	Which browser do we support all?
2357240	2360120	Can you import models, maps, materials you
2360120	2364240	build in other software, if so, what formats are supported?
2364240	2367840	So yes, part of the BabylonJS tools I did not share today.
2367840	2375640	We have exporters for 3DS Max, Maya, Unity, Blender 3D,
2375640	2377200	a few others.
2377200	2378840	And we also developed transcoders.
2378840	2381120	And the goal is to have everything in GLTF file format.
2381120	2383240	So as long as your tool that you are using
2383240	2387360	is exporting into GLTF, then we will be able to load it.
2387360	2391640	And we are also supporting tools that generate GLTF
2391640	2395800	into the tools I mentioned before, like Maya, Autodesk, Maya,
2395800	2399960	3DS Max, Blender, and stuff.
2399960	2400720	OK.
2400720	2402320	Let me see if I find one more.
2402320	2403680	There's some over AI.
2403680	2405320	I don't get the AI.
2410600	2413560	How accessible is Babylon to designers?
2413560	2416320	We have users that are purely designers.
2416320	2419560	They use another tool that I did not demonstrate here.
2419560	2420800	It's the sandbox.
2420800	2423760	The sandbox is a place where you drag and drop a GLTF model
2423760	2424840	and the inspector pops.
2424840	2427960	And you can edit everything just visually.
2427960	2430600	And they use that a lot to create.
2430600	2431800	We have a viewer as well.
2431800	2434000	It's a tool that you can plug in a page.
2434000	2437240	And just one line of HTML, you say display this object.
2437240	2440480	And there is no code, just a HTML tag.
2440480	2443280	So they use that to display controls and 3D objects,
2443280	2444360	for instance.
2444360	2444960	OK.
2444960	2446000	Last one.
2446000	2448160	Is it possible to stream 3D geometry
2448160	2451160	between server and client for an open world level?
2451160	2451760	Yes.
2451760	2453360	We have users doing that.
2453360	2454280	Super cool.
2454280	2457200	We just do the client huntering, to be honest.
2457200	2461120	We don't do the backend, for instance.
2461120	2463320	And the streaming, you have to stream something compatible
2463320	2464000	with Babylon.js.
2464000	2465960	But yes, we are doing that.
2465960	2466760	OK.
2466760	2468320	If you have any other question, feel free.
2468320	2470400	I'm going to stay here, trying not to sleep.
2470400	2471280	So it should be fine.
2471280	2473160	If someone talked to me, it's going to be fine.
2473160	2474680	First, you can have lunch now.
2474680	2475920	There's going to be lunch.
2475920	2477360	So everyone, have a good lunch.
2477360	2481320	And yeah, see you after the break.
