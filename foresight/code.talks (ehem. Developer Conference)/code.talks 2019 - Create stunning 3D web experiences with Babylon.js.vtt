WEBVTT

00:00.000 --> 00:16.000
Hi, everyone. I'm very glad to be here, even though I am fighting against a jet lag. There

00:16.000 --> 00:21.640
is none our difference between here and Seattle. So back with me. I'm going to try to not sleep

00:21.640 --> 00:28.280
on stage. Yeah, we're going to I'm going to present Babylon.js. It's an engine I created

00:28.280 --> 00:34.280
six years ago. And it's an engine that I am pretty proud of because now it's very it's

00:34.280 --> 00:40.680
used in a lot of important places. For instance, that's PowerPoint. But this little guy here

00:40.680 --> 00:46.600
is a 3D object animated by Babylon.js inside PowerPoint. And actually, at Microsoft, every

00:46.600 --> 00:52.400
time you're going to see 3D, it's probably a 99% sure that it's actually based on Babylon.js.

00:52.400 --> 00:58.720
It's something that I'm going to present right now. It's an open source framework. It's

00:58.720 --> 01:05.120
entirely free. It's based on Apache 2 or do the heck you want with the code. There is

01:05.120 --> 01:10.880
no license, no nothing. It's brand new at Microsoft. We are using our own technology

01:10.880 --> 01:16.080
here, but this technology is entirely free for you to use in any place you want. It's

01:16.120 --> 01:24.120
based on any in a lot of web open standard and web open frameworks like WebGL 1 and 2,

01:24.120 --> 01:32.620
WebGPU. So WebGPU, are you aware of what WebGPU is? Who knows? Okay, quite a few. It's

01:32.620 --> 01:38.800
the evolution of WebGL actually. It's metal slash Vulkan slash DirectX 12 for the web.

01:38.800 --> 01:45.080
It's a new technology that we are working on with Apple and Google to support. The interesting

01:46.080 --> 01:51.440
point here of using Babylon.js is that if you want to use 3D today, you do not have to worry

01:51.440 --> 01:57.200
about that. We will take care of all the underlying frameworks like WebGL 1, 2, or WebGPU. We also

01:57.200 --> 02:03.080
support WebXR. I'm going to do a quick demo later. It's a full-fledged game engine and rendering

02:03.080 --> 02:09.320
engine. So we support physics and VR particles. I don't like this image, but that's the best I

02:09.400 --> 02:15.600
can have. It's kind of the unity for the web, if I may. We're going to provide you tools to create

02:15.600 --> 02:22.520
3D on the web without the burden of understanding shaders and math and stuff like that. We also

02:22.520 --> 02:28.680
support physically-based rendering. It's an advanced technique created by Disney starting with, I

02:28.680 --> 02:34.160
don't know, Untangle, the name of the movie. I am not sure it's the right translation anyway. The

02:34.800 --> 02:43.240
lady with the long hairs, they created PBR for this cartoon. And this PBR, and thanks to the power of

02:43.240 --> 02:48.080
our computer now, can be now rendered in real-time on the web. I'm going to get back to that later

02:48.080 --> 02:55.520
as well. We have principles, and I'm very glad to have my talk after John's one because we have

02:55.520 --> 03:00.440
exactly the same principle. I like bug first. We create tools before the engine and stuff like

03:00.440 --> 03:06.040
that. And we are also backward compatible. That's something that just pissed me off a lot when I

03:06.040 --> 03:10.840
have to update to a new version of a framework and I have to rewrite everything. That's something I

03:10.840 --> 03:17.640
do not want for Babylon. So if you're using Babylon.js, you will be able to run it up until the next

03:17.640 --> 03:23.200
version without having to change anything on your code. We do not break backward compatibility. And

03:23.200 --> 03:32.520
we are also supporting GLTF. Who is aware of what GLTF is? Okay. So GLTF stands for Graphic Library

03:32.520 --> 03:38.640
Transport Format, and that's the JPEG of 3D. You think about JPEG. If I give you a JPEG image, you

03:38.640 --> 03:44.000
will be able to display it on your computer, right? Because everyone understands JPEG or PNG. For

03:44.000 --> 03:49.880
3D objects, like the file format itself, it was a mess up until now because there were like 10,000

03:49.960 --> 03:55.360
different file formats, all in code printable, obviously, and all proprietary. So we sit down with

03:55.360 --> 04:01.480
the Kronos group, the group who is standardizing WebGL, and we define all together, and by all, I

04:01.480 --> 04:07.440
mean Google, Facebook, Microsoft, NVIDIA, et cetera, et cetera, we define a file format. And this

04:07.440 --> 04:13.680
file format is GLTF here. So if you want to render 3D objects like the dinosaur I was rendering

04:13.680 --> 04:18.440
before, it's a GLTF file format. And so by supporting this file format, we ensure that your

04:19.320 --> 04:26.520
object will be displayed and compatible. It's an open source project. Since the very beginning, it was

04:26.520 --> 04:34.520
started as an open source project. It's still an open source project. We have around like 100,000

04:34.520 --> 04:40.920
posts on the forum. It's a very active forum. Most of the users, when they come to us, the number one

04:40.920 --> 04:47.920
reason they come to use Babylon.js is because of the forum. We have a very lovely community. It's

04:48.000 --> 04:54.440
very helpful. There is no shame. It's definitely a place where you can ask any question and you will

04:54.440 --> 05:03.280
get a response in a matter of a few days. We also have a pretty large number of active supporters,

05:03.280 --> 05:12.520
like people contributing to the forum and to the engine itself. So it's used in a very, it's funny

05:12.520 --> 05:17.760
because I started it six years ago, and I was the only developer, and it was only for me. And now

05:17.760 --> 05:24.160
it's used across the web. Adobe is using it for their product. Being Microsoft apps, obviously, I

05:24.160 --> 05:28.520
mentioned SharePoint, PowerPoint, et cetera, but it's also used by Dolby, by Minecraft. If you go to

05:28.520 --> 05:33.160
Minecraft.net, classic.minecraft.net, you're going to play the Minecraft game, and it's using

05:33.160 --> 05:39.480
Babylon.js to do the rendering, et cetera. We work with a lot of small, high, very large companies,

05:39.480 --> 05:44.600
and my favorites are probably the enthusiasts, like students of people that just do that because

05:44.640 --> 05:50.800
they want to learn how to create a game or to create 3D. And that's why we created the engine. And so

05:50.800 --> 05:58.560
also, I want to underline and second what John said just before, we created the engine, but we also

05:58.560 --> 06:04.320
created a lot of tools. And I'm going to get back and demonstrate these tools. Just name-dropping here,

06:04.320 --> 06:08.720
I'm going to get back to that later. The goal for me is to mention that it's not just an engine,

06:08.720 --> 06:14.120
it's actually engine is a small portion of it. The tools that let you create what you want to

06:14.160 --> 06:22.160
create in 3D are really the important point here. Okay. So I have a quick video because I wanted to

06:22.160 --> 06:27.960
capture what the community was creating with Babylon.js. So instead of going through a demo

06:27.960 --> 06:31.840
manually, I created a quick video for you to see.

08:14.320 --> 08:43.800
Right. It was an example of in real time,

08:43.800 --> 08:46.360
in real time, obviously, running on any computer

08:46.360 --> 08:48.680
what can be done with the framework itself.

08:48.680 --> 08:51.840
So instead of spending too much time just talking,

08:51.840 --> 08:54.320
I would like to show you in action

08:54.320 --> 08:56.320
what you can do with Babylon.js.

08:56.320 --> 09:00.360
I'm going to start with a first presentation of one

09:00.360 --> 09:01.440
of the tools that I have.

09:01.440 --> 09:03.640
Nope, it's not here.

09:03.640 --> 09:04.800
The Playground.

09:04.800 --> 09:07.080
So Babylon.js-playground.com is a place

09:07.080 --> 09:09.120
where you can go to learn the engine.

09:09.120 --> 09:12.160
So I spend a lot of time writing documentation,

09:12.160 --> 09:14.520
and that's a pity because no one's read it, right?

09:14.520 --> 09:16.160
You don't read documentation.

09:16.160 --> 09:18.200
No one's read them.

09:18.200 --> 09:21.120
So I decided to take the problem the other way,

09:21.120 --> 09:24.040
like, how do I learn?

09:24.040 --> 09:25.880
I learned by trying, right?

09:25.880 --> 09:28.440
And so that's why we created the Babylon Playground.

09:28.440 --> 09:31.400
Here, you have on the left a full-fledged editor,

09:31.400 --> 09:33.440
and on the right, you have the real-time rendering of what

09:33.440 --> 09:35.240
you just typed on the left.

09:35.240 --> 09:37.040
The editor comes with IntelliSense.

09:37.040 --> 09:40.280
So if you type here, you can get help while you type.

09:40.280 --> 09:41.840
So instead of reading documentation,

09:41.840 --> 09:44.040
again, you can just experiment, OK?

09:44.040 --> 09:45.720
And I'm going to just show you what

09:45.720 --> 09:47.960
can be done in a matter of a few seconds here.

09:47.960 --> 09:51.160
So here, I have a scene that I created.

09:51.160 --> 09:53.840
I create a camera, which is the point of view

09:53.840 --> 09:56.480
that I can manipulate with touch or with my mouse.

09:56.480 --> 09:59.680
I set the target of my camera, and I attach it to the events.

09:59.680 --> 10:02.400
By calling Attach Control, I attach to the mouse event,

10:02.400 --> 10:03.960
the pointer event, and stuff like that.

10:03.960 --> 10:07.200
So I can play with my finger here or just with my mouse

10:07.200 --> 10:09.360
if I want to, or the keyboard.

10:09.360 --> 10:10.800
That's all coming from this line.

10:10.800 --> 10:15.240
Then I create a light, like in real world, you have a light.

10:15.240 --> 10:17.520
I set the intensity of that light and the sphere.

10:17.520 --> 10:19.760
So if I run that, I just have my sphere

10:19.760 --> 10:21.440
in the center of my screen, OK?

10:21.440 --> 10:24.840
As a user, now what you can do is to experiment.

10:24.840 --> 10:26.760
And we use the playground for experimentation,

10:26.760 --> 10:27.920
but also for bug fixing.

10:27.920 --> 10:31.200
When a user comes to us and say, hey, I have a bug,

10:31.200 --> 10:33.280
most of the time, we ask them to reproduce the bug here,

10:33.280 --> 10:35.600
because it's then easier to discuss.

10:35.600 --> 10:38.200
So I'm going to create, actually, a material.

10:38.200 --> 10:44.560
The material here will be a PBR, sorry,

10:44.560 --> 10:48.560
Babylon, dot PBR Metallic Roughness Material.

10:48.560 --> 10:52.240
It's a specific kind of material that simulates metal, OK?

10:52.240 --> 10:53.240
I'm going to give it a name.

10:53.240 --> 10:57.000
And as you can see, there is a while I type help

10:57.000 --> 10:58.000
on the parameters.

10:58.000 --> 11:00.560
So for instance, I want the name here, like foo,

11:00.560 --> 11:04.160
and the scene where I want to have my material.

11:04.160 --> 11:09.160
Then I set my sphere.material to that material, OK?

11:09.160 --> 11:14.320
And I'm going to just quickly set some values, like metallic.

11:14.320 --> 11:17.240
It will be fully metallic between 0 and 1.

11:17.240 --> 11:22.240
And is that a little bit too small, maybe, right?

11:22.240 --> 11:25.200
Let me change the font size to something bigger.

11:25.200 --> 11:27.960
OK, sorry about that.

11:27.960 --> 11:30.040
And I want also to set my material

11:30.040 --> 11:36.000
to be the roughness of it, like brushed metal, if you prefer,

11:36.000 --> 11:38.640
will be 0.5, again, between 0 and 1.

11:38.640 --> 11:43.600
If I run it, you have a sense of something change,

11:43.600 --> 11:47.840
like it's a bit metallic, but the power of a metal,

11:47.840 --> 11:50.000
like in your car, is because you see the reflection

11:50.000 --> 11:51.760
of the environment, right?

11:51.760 --> 11:54.560
A car by itself with no reflection looks rough.

11:54.560 --> 11:56.080
So what I'm going to do here, I'm

11:56.080 --> 11:59.400
going to just ask the scene to create a default environment

11:59.400 --> 12:02.200
for me.

12:02.200 --> 12:06.840
And by doing that, now here, I have a sphere, which

12:06.840 --> 12:09.440
is like brushed metal, OK?

12:09.440 --> 12:10.760
So I can play with the parameters,

12:10.760 --> 12:12.320
but I told you it's all about tools.

12:12.320 --> 12:14.120
So here I have the playground, but we also

12:14.120 --> 12:16.000
have a second tool that I would like to show you,

12:16.000 --> 12:17.400
which is the inspector.

12:17.400 --> 12:19.840
Here I can invoke the inspector by calling

12:19.840 --> 12:24.440
deburglayer.show, show.

12:24.440 --> 12:28.920
And if I do that, zoop, I'm going to have an additional UI

12:28.920 --> 12:30.880
that will be on top of my scene here,

12:30.880 --> 12:32.680
where I can see the tree view.

12:32.680 --> 12:34.840
So I have my glide, my camera, my sphere,

12:34.840 --> 12:36.240
and the background that was generated

12:36.240 --> 12:38.200
by the created environment.

12:38.200 --> 12:41.200
And I can take my material here, and I

12:41.200 --> 12:43.000
have all the properties of that material.

12:43.000 --> 12:46.280
And for instance, I can play with the levels here

12:46.280 --> 12:48.680
and change the opacity or the roughness.

12:48.680 --> 12:56.160
So fully metallic, fully rough, OK?

12:56.160 --> 12:59.720
Let me just get closer.

12:59.720 --> 13:06.400
So that's the Chinese theater in Los Angeles.

13:06.400 --> 13:08.000
And you can play with the parameter here.

13:08.000 --> 13:11.800
Also, we introduce a lot of options that you can change,

13:11.800 --> 13:14.000
like I want to render in wireframe and stuff like that.

13:14.000 --> 13:16.600
You can play with it here, OK?

13:16.600 --> 13:17.720
That's the inspector.

13:17.720 --> 13:20.040
The inspector is extremely useful to debug or just

13:20.040 --> 13:20.760
develop your scene.

13:20.760 --> 13:22.920
So you can, visually, instead of just typing the code

13:22.920 --> 13:24.880
in the playground or in your application,

13:24.880 --> 13:27.800
you can just visually debug the scene itself.

13:27.800 --> 13:29.240
Right.

13:29.240 --> 13:32.400
Another tool I wanted to show you is the documentation itself.

13:32.400 --> 13:33.040
Yes, I know.

13:33.040 --> 13:34.680
People won't go there, but still, I

13:34.680 --> 13:38.360
would like to show them the documentation for one reason.

13:38.360 --> 13:41.280
Here, we have a regular documentation

13:41.280 --> 13:45.040
with code practice, example, regular documentation

13:45.040 --> 13:47.320
you should be looking for.

13:47.320 --> 13:49.160
But we also have the playground here.

13:49.160 --> 13:50.800
And the playground is actually a tool

13:50.800 --> 13:54.640
that's going to search through all the examples that were created

13:54.640 --> 13:56.000
in the playground here.

13:56.000 --> 13:58.400
Because in the playground, if I hit Save,

13:58.400 --> 14:02.000
it will generate, for me, a unique URL

14:02.000 --> 14:05.960
that I can share with my friend with this code running, OK?

14:05.960 --> 14:08.080
And that is stored in our database.

14:08.080 --> 14:10.960
And if I want to learn something,

14:10.960 --> 14:13.160
I could just search for the documentation

14:13.160 --> 14:16.720
or I could just search for examples showing me

14:16.720 --> 14:21.240
how to do something, like I want to do shadows.

14:21.240 --> 14:24.360
And I can search for shadows inside our database.

14:24.360 --> 14:29.000
And here, you're going to see, like, I just lost my mouse, OK?

14:29.000 --> 14:30.200
Thank you.

14:30.200 --> 14:33.480
I can find any example here where people just

14:33.480 --> 14:35.600
do something with shadows.

14:35.600 --> 14:37.400
And I can click on the Playground button here.

14:37.400 --> 14:38.280
It's completely random.

14:38.280 --> 14:40.880
I have no idea what's inside this playground.

14:40.880 --> 14:42.320
Hopefully, it's not something stupid.

14:42.320 --> 14:44.280
OK, there is shadows.

14:44.280 --> 14:45.120
Cool.

14:45.120 --> 14:47.080
Someone was doing that with shadows, OK?

14:47.080 --> 14:49.560
And so I can look the code here and say, OK,

14:49.560 --> 14:51.640
what did you do with this code?

14:51.640 --> 14:53.880
And maybe that's going to help me learn or understand

14:53.880 --> 14:55.800
how the shadows works.

14:55.800 --> 14:56.960
Right.

14:56.960 --> 14:59.560
Among new features that are going to be available soon,

14:59.560 --> 15:02.240
there is the Node Material Editor.

15:02.240 --> 15:06.040
I created here a material, but this material is actually

15:06.040 --> 15:08.760
me setting some parameters to an existing material.

15:08.760 --> 15:10.320
We have a couple of materials.

15:10.320 --> 15:12.400
We have what we call the standard material, which

15:12.400 --> 15:14.560
is the fastest and the simpler one.

15:14.560 --> 15:17.080
And we have the pretty advanced physically based

15:17.080 --> 15:20.240
renderer, which is used here, the PBR.

15:20.240 --> 15:22.240
But if you want to do something different,

15:22.240 --> 15:24.800
you have to use what we call the shader material.

15:24.800 --> 15:28.520
The shader material is up to you to code using shader

15:28.520 --> 15:31.720
languages, your own material, OK?

15:31.720 --> 15:34.560
That's a friction point, definitely.

15:34.560 --> 15:37.200
A lot of people say, I would love to create my own material,

15:37.200 --> 15:42.160
but I don't want to learn how to create shaders.

15:42.160 --> 15:44.680
So we introduce with the very new version here

15:44.680 --> 15:46.240
the Node Material Editor.

15:46.240 --> 15:48.080
The Node Material Editor is a way for you

15:48.080 --> 15:49.600
to create your material.

15:49.600 --> 15:53.440
So who is aware of what a shader is?

15:53.440 --> 15:54.960
Quite a few, OK.

15:54.960 --> 15:59.680
A shader is made actually of a C-like language

15:59.680 --> 16:01.600
that's going to explain to the GPU how

16:01.600 --> 16:05.680
to create your own rendering, OK, here.

16:05.680 --> 16:07.960
Here I have a pretty simple one, and I will just

16:07.960 --> 16:10.440
focus on the second part here.

16:10.440 --> 16:13.080
A shader is made of a vertex shader and a fragment shader.

16:13.080 --> 16:16.920
The vertex shader explains how the geometry is drawn

16:16.920 --> 16:20.640
on the screen, and the fragment shader

16:20.640 --> 16:22.520
explains how to compute the color.

16:22.520 --> 16:24.600
And here my color is just, I want

16:24.600 --> 16:28.240
to set a color to the output, OK?

16:28.240 --> 16:32.240
This tool will let me actually create my own shader

16:32.240 --> 16:33.440
without having to develop them.

16:33.440 --> 16:37.760
For instance, here I'm going to open and look for the light.

16:37.760 --> 16:39.640
I want to add lightning support.

16:39.640 --> 16:43.600
Here my object is just flat, just gray, OK?

16:43.600 --> 16:47.120
To support lightning, I need to add light support here.

16:47.120 --> 16:48.840
And the light supports here will expect

16:48.840 --> 16:50.840
me to provide a few parameters that you

16:50.840 --> 16:51.960
can see on the left here.

16:51.960 --> 16:54.280
I'm going to just quickly connect them.

16:54.280 --> 16:57.640
So the world position, which is the position of my mesh

16:57.640 --> 17:01.400
in the world, and the world normal, which is the normal,

17:01.400 --> 17:04.680
is a perpendicular vector defining the surface

17:04.680 --> 17:06.880
of every object, OK?

17:06.880 --> 17:13.080
If I just plug them here and do that, then boom,

17:13.080 --> 17:15.040
I have support for light.

17:15.040 --> 17:18.840
A shader was developed for me by the system.

17:18.840 --> 17:21.960
I can export the shader here.

17:21.960 --> 17:25.440
So instead of coding the shader, which is quite big,

17:25.440 --> 17:29.520
if you look at it, all of that is

17:29.520 --> 17:32.600
required to do a lightning shader.

17:32.600 --> 17:35.480
You just have to wire some stuff, right?

17:35.480 --> 17:37.800
And that can go even better than that.

17:37.800 --> 17:39.320
Instead of having just plain color,

17:39.320 --> 17:40.520
I want to have a texture.

17:40.520 --> 17:42.760
So think about your game, you have your character,

17:42.760 --> 17:44.560
and you want to have lightning, OK, done.

17:44.560 --> 17:46.840
And I want also to have a texture, OK?

17:46.840 --> 17:49.760
So let me just load the texture here.

17:49.760 --> 17:53.840
The texture will require me to give it a texture, perfect,

17:53.840 --> 17:56.240
like a crate.

17:56.240 --> 17:59.680
And what I want to do is actually take the light color,

17:59.680 --> 18:02.000
the texture color, merge them.

18:02.000 --> 18:04.840
And to merge them, I will remove this link here.

18:04.840 --> 18:10.640
Just multiply them, boom, taking the light output,

18:10.640 --> 18:13.800
multiply it by the texture output,

18:13.800 --> 18:17.840
plug that into the output here, and boom,

18:17.840 --> 18:20.800
I have a crate with light.

18:20.800 --> 18:21.720
Isn't that cool?

18:28.040 --> 18:30.200
Again, you can save your wonderful shader,

18:30.200 --> 18:33.400
and it will generate for you a unique URL here.

18:33.400 --> 18:37.000
And let me just fast forward to a complicated shader

18:37.000 --> 18:38.200
that I created for you.

18:38.200 --> 18:41.200
This one is pretty advanced.

18:41.200 --> 18:44.920
It's not that good looking, but it's just me as a developer

18:44.920 --> 18:48.400
trying to play the designer.

18:48.400 --> 18:52.320
So I have a shader, and you can see here,

18:52.320 --> 18:54.760
there is what we call bump or normal.

18:54.760 --> 18:58.960
You feel like there is not a smooth surface.

18:58.960 --> 19:02.840
We feel like there is something defining a bump here,

19:02.840 --> 19:04.880
and actually just coming from a texture.

19:04.880 --> 19:08.120
And also at some places here, there are reflections.

19:08.120 --> 19:10.360
So it's a complex shader because the reflection is

19:10.360 --> 19:13.080
defined by a second texture here.

19:13.080 --> 19:17.040
We are using reflection texture to do the reflection here.

19:17.040 --> 19:19.640
We have a perturbed normal object

19:19.640 --> 19:21.480
that will change the normal.

19:21.480 --> 19:24.560
And by the way, Doom 3, created by John Carmich, by the way,

19:24.560 --> 19:26.280
introduced this notion of bump.

19:26.280 --> 19:28.840
Bump is using a texture to simulate the volume.

19:28.840 --> 19:30.320
Anyway, we don't care.

19:30.320 --> 19:34.280
Here, it's just that I want to use that code.

19:34.280 --> 19:37.200
So the shader here will generate for me

19:37.200 --> 19:43.080
a code, like literal code that I can save here.

19:43.080 --> 19:44.120
I'm going to open the file.

19:44.120 --> 19:46.760
And this code is regular TypeScript code

19:46.760 --> 19:50.920
that you can use directly in your own environment.

19:50.920 --> 19:53.880
So let me remove all of that.

19:53.880 --> 19:55.480
Dump here.

19:55.480 --> 19:58.480
What was generated for me by the node generator?

19:58.480 --> 20:01.840
So the node generator, it's actually a node model

20:01.840 --> 20:04.120
where you create a node material, and then you have blocks,

20:04.120 --> 20:07.000
transform block, whatever block, texture block, et cetera.

20:07.000 --> 20:09.480
You connect all of them, like you connect the output

20:09.480 --> 20:10.320
with the input.

20:10.320 --> 20:14.000
So this code is just literally what I did visually.

20:14.000 --> 20:17.000
And then it gives you a node material object

20:17.000 --> 20:20.160
that you can plug with your sphere here.

20:20.160 --> 20:24.320
That material is equal to node material object.

20:24.320 --> 20:28.520
Let me close this guy here, close that, run that again,

20:28.520 --> 20:29.800
and boom.

20:29.800 --> 20:34.240
In my code, I have my wonderful reflection bump,

20:34.240 --> 20:36.640
whatever scene.

20:36.640 --> 20:40.560
Yes, it's ugly, but it's about technical and development, right?

20:40.560 --> 20:43.520
It's not the designer track.

20:43.520 --> 20:47.160
All right, so all of that, it's pretty cool.

20:47.160 --> 20:49.800
I can save it again, so I can save that.

20:49.800 --> 20:53.360
And it will generate for me a new version of my unique URL

20:53.360 --> 20:54.120
here soon.

20:54.120 --> 20:57.080
It's a big one because we dumped the entire texture.

20:57.080 --> 20:59.200
So we just need to wait for the server

20:59.200 --> 21:03.720
to come back without an error, hopefully.

21:03.760 --> 21:06.640
In the meantime, oh yeah, it's fine, it's on.

21:06.640 --> 21:10.840
OK, in the meantime here, let me show you a third tool.

21:10.840 --> 21:14.120
So Babylon.js is developed to be easy to use.

21:14.120 --> 21:16.560
You do not have to understand shader, math, whatever.

21:16.560 --> 21:17.600
You just drop object.

21:17.600 --> 21:19.840
You create a light, a scene, a camera, an object.

21:19.840 --> 21:21.720
You load the GLTF file, and you're done.

21:21.720 --> 21:24.240
But if you want to, there is no problem for you

21:24.240 --> 21:26.920
to just look under the hood and see how it works.

21:26.920 --> 21:28.920
And for that, we have a third object,

21:28.920 --> 21:33.480
which is used by even our competitors.

21:33.480 --> 21:37.280
The name of this object is a browser extension.

21:37.280 --> 21:38.760
The name is Spector.js.

21:38.760 --> 21:43.280
Spector.js is a tool that will let me inspect WebGL,

21:43.280 --> 21:45.320
like a profiler for WebGL.

21:45.320 --> 21:47.920
So at the first thought, you could

21:47.920 --> 21:51.360
think that it should be a tool developed by the browser vendor.

21:51.360 --> 21:53.480
But unfortunately, the browser vendor

21:53.480 --> 21:56.320
are not investing a lot into WebGL.

21:56.320 --> 21:57.880
So we did it.

21:57.880 --> 22:00.440
So yeah, when I click here, I have a record button.

22:00.440 --> 22:03.800
And the record button will just analyze the current frame

22:03.800 --> 22:09.440
and generate for me here a simple view of the orders that

22:09.440 --> 22:11.400
were sent directly to WebGL.

22:11.400 --> 22:15.320
So you can see here directly the bind, vertex array,

22:15.320 --> 22:19.080
the viewport, all this command, our WebGL command.

22:19.080 --> 22:22.120
And every time you can see, here I am clearing the screen.

22:22.120 --> 22:27.360
And here I am using this shader that I can edit live here

22:27.360 --> 22:28.160
to send the data.

22:28.160 --> 22:31.800
So you can see precisely what's happening in your code.

22:31.800 --> 22:34.120
And you can even edit the code here.

22:34.120 --> 22:38.240
And it will dynamically change the rendering.

22:38.240 --> 22:40.080
So this one is pretty advanced.

22:40.080 --> 22:41.160
Not a lot of people use it.

22:41.160 --> 22:44.920
But you should know that from the very beginning up to the end,

22:44.920 --> 22:48.280
like directly to WebGL, you have the control.

22:48.280 --> 22:50.560
All right.

22:50.560 --> 22:52.960
Then let me get back to my other demo.

22:52.960 --> 22:54.680
So that's a new feature that we are adding

22:54.680 --> 22:57.440
with the upcoming release for one.

22:57.440 --> 23:00.640
And this one is one that I love.

23:00.640 --> 23:04.080
I am part of the W3C and Kronos working groups.

23:04.080 --> 23:06.800
And what I try to do with JavaScript

23:06.800 --> 23:11.080
is to make it equivalent to what you can do with native.

23:11.080 --> 23:14.160
And one of the main problem of JavaScript

23:14.160 --> 23:17.280
is that it's running on one unique thread.

23:17.280 --> 23:19.080
There is a notion of web workers.

23:19.080 --> 23:21.720
But web workers are like process.

23:21.720 --> 23:24.160
To communicate between the main thread and the web worker,

23:24.160 --> 23:28.200
you have to send string or share just a ray of memory.

23:28.200 --> 23:32.760
We recently had a victory by having the validation

23:32.760 --> 23:35.240
of the off-screen canvas here.

23:35.240 --> 23:36.280
And let me show you the code.

23:36.280 --> 23:40.040
It's going to be even easier to understand.

23:40.040 --> 23:44.480
If I look at my code, which is here,

23:44.480 --> 23:49.440
trying to make it bigger enough for you guys to see it.

23:49.440 --> 23:50.200
Can I zoom here?

23:50.200 --> 23:52.360
Yes.

23:52.360 --> 24:00.640
So I actually have here two scripts.

24:00.640 --> 24:05.600
If I find the off-screen canvas API in the Windows object,

24:05.600 --> 24:07.720
I will get a canvas.

24:07.720 --> 24:10.360
So there is two canvases, one on the left, one on the right.

24:10.360 --> 24:13.720
The one on the left is just initialized by Babylon.js.

24:13.720 --> 24:15.360
So here you can see.

24:15.360 --> 24:16.200
I create the canvas.

24:16.200 --> 24:17.760
I create my engine, my scene.

24:17.760 --> 24:20.160
I say, execute the code, render the scene.

24:20.160 --> 24:20.560
Done.

24:20.560 --> 24:23.240
And so it just load this object and rotate it.

24:23.240 --> 24:27.320
It's done on the main UI.

24:27.320 --> 24:29.680
The second one, it's exactly the same thing,

24:29.680 --> 24:32.520
but using not a canvas, but an off-screen canvas.

24:32.520 --> 24:34.520
And so when there is off-screen canvas support

24:34.520 --> 24:37.800
on your browser, so far only Chromium-based browser,

24:37.800 --> 24:40.760
meaning Edge, Opera, and Chrome, then

24:40.760 --> 24:44.200
you can call a new API called Transfer Control to Offscreen,

24:44.200 --> 24:48.240
meaning that I will let a second thread control the canvas

24:48.240 --> 24:49.520
and render to it.

24:49.520 --> 24:51.400
And that's utterly cool.

24:51.400 --> 24:51.680
Why?

24:51.680 --> 24:56.720
Because now here it's a worker that runs this one,

24:56.720 --> 24:58.600
meaning that if I slow things down when

24:58.600 --> 25:00.280
I'm going to click on this button,

25:00.280 --> 25:06.800
I will do something stupid like computing this random scene

25:06.800 --> 25:10.200
of course 10 million times, just to simulate

25:10.200 --> 25:13.600
that you are doing something easy on the main thread.

25:13.600 --> 25:14.960
And we do that, for instance, when

25:14.960 --> 25:16.920
you are on SharePoint or on PowerPoint,

25:16.920 --> 25:19.560
let's say PowerPoint, when you display the current slide,

25:19.560 --> 25:21.440
PowerPoint is using the main thread

25:21.440 --> 25:23.200
to prepare the next slide.

25:23.200 --> 25:27.000
So the main thread, the main UI, is already pretty

25:27.000 --> 25:28.680
easily occupied to do something.

25:28.680 --> 25:31.080
So by using off-screen canvas, we

25:31.080 --> 25:35.760
can have stuff that definitely are slowing down

25:35.760 --> 25:39.560
the main thread, but still, because a second thread is

25:39.560 --> 25:42.120
running and doing all your 3D rendering,

25:42.120 --> 25:45.880
the experience for the user is pretty good.

25:45.880 --> 25:47.760
Before, it was only that.

25:47.760 --> 25:50.680
And now, we have access to the worker render.

25:50.680 --> 25:51.720
Yes, I know.

25:51.720 --> 25:55.680
I'm excited, but for a good reason.

25:55.680 --> 25:57.800
Other stuff we are working on, I wanted to show you,

25:57.800 --> 25:59.040
like, GLTF support.

25:59.040 --> 26:00.880
Here, I have my halion head.

26:00.880 --> 26:04.200
And if you look at my code, loading GLTF files,

26:04.200 --> 26:06.600
it's just one line of code here.

26:06.600 --> 26:10.800
Sorry, I forgot to zoom it again.

26:10.800 --> 26:15.080
And we have options to load it once and then duplicate it.

26:15.080 --> 26:17.760
If you are familiar with Unity, I just

26:17.760 --> 26:20.240
can't remember now the name of that feature,

26:20.240 --> 26:21.840
but you can load an object, an asset,

26:21.840 --> 26:23.960
and then introduce it multiple times in your scene.

26:23.960 --> 26:26.920
They are replicated, and it's a clone.

26:26.920 --> 26:28.080
So it's a smart clone.

26:28.080 --> 26:29.960
The geometry and all the shader are reused.

26:29.960 --> 26:32.720
So here, the entire code to run these three guys

26:32.720 --> 26:36.520
with, just for the sake of it, skeletal animation,

26:36.520 --> 26:41.120
meaning that the head is moving with the neck.

26:41.120 --> 26:43.400
And also, there is morph target.

26:43.400 --> 26:46.600
So the halion is smiling and closing the move.

26:46.600 --> 26:49.960
All of that is loaded from the GLTF and then duplicated.

26:49.960 --> 26:50.680
And it's what?

26:50.680 --> 26:54.280
It's 20 line of code.

26:54.280 --> 26:55.280
This one, we don't care.

26:55.280 --> 26:56.040
Let's go.

26:56.040 --> 26:59.120
Next one, WebXR.

26:59.120 --> 27:02.400
So this demo, you know it?

27:02.400 --> 27:04.080
Yes.

27:04.080 --> 27:09.880
We are in Hill Valley about to go back in time.

27:09.880 --> 27:11.520
And it's running in the browser.

27:11.520 --> 27:12.600
Yes, I know.

27:12.600 --> 27:13.560
That's very cool.

27:13.560 --> 27:14.240
I like that.

27:14.240 --> 27:15.520
And there is a little button here.

27:15.520 --> 27:17.000
I don't have a headset connected.

27:17.000 --> 27:18.760
So when I'm going to click on this button,

27:18.760 --> 27:21.320
Babylon.js will automatically consider

27:21.320 --> 27:23.680
that you want to use some cardboard stuff,

27:23.680 --> 27:26.440
like running on your phone and setting that in a cardboard.

27:26.440 --> 27:28.400
It will switch to cardboard mode,

27:28.400 --> 27:31.560
just to give you the experience here.

27:31.560 --> 27:36.080
So if you have Oculus Quest, a Oculus VR, a Microsoft Mixed

27:36.080 --> 27:40.120
Reality headset, thanks to WebXR, we just click on this button

27:40.120 --> 27:42.120
and we will take care of everything for you.

27:42.120 --> 27:44.200
And it's literally one line of code.

27:44.200 --> 27:46.280
There is one line of code to switch.

27:46.280 --> 27:49.200
We have an object named the VR Experience Helper.

27:49.200 --> 27:52.320
You just need to instantiate it, and it will automatically

27:52.320 --> 27:54.600
detect everything for you, provide the button.

27:54.600 --> 27:59.360
And the scene that was not VR before, then become a VR scene.

27:59.360 --> 28:03.880
Up to a point where you can, I need to reload.

28:03.880 --> 28:07.880
Sadly, it should be fine.

28:07.880 --> 28:08.920
We also support collision.

28:08.920 --> 28:09.600
I mentioned that.

28:09.600 --> 28:14.280
Here, it's a kind of a doom in a museum.

28:14.280 --> 28:17.160
And I walk like in a game, meaning

28:17.160 --> 28:21.800
that I can't go through the wall, but I can go upstairs

28:21.800 --> 28:25.320
by just walking like in doom or quake, exactly the same

28:25.320 --> 28:29.160
the way I play it with my keyboard and my mouse.

28:29.160 --> 28:30.960
And that's running in your browser, obviously.

28:30.960 --> 28:33.960
And at some point, you want to switch into VR.

28:33.960 --> 28:35.480
Just click the button, and then you

28:35.480 --> 28:39.040
can teleport with the controller.

28:39.080 --> 28:41.480
Right.

28:41.480 --> 28:44.320
Last but not least, I wanted also to mention this guy.

28:44.320 --> 28:45.280
You saw the video.

28:45.280 --> 28:49.920
That's physics, real-time physics using WebAssembly.

28:49.920 --> 28:53.720
Here, you have a complicated mesh, this marble tower.

28:53.720 --> 28:57.080
And we have a code here on the left that just drops

28:57.080 --> 28:59.000
marbles at the top of the tower.

28:59.000 --> 29:01.880
And then we let the physics engine deal with that.

29:01.880 --> 29:05.760
And to just drop a marble, let me show you.

29:05.760 --> 29:06.800
Where is that?

29:06.800 --> 29:08.760
When we call create marble here,

29:08.760 --> 29:10.080
let me zoom again.

29:13.800 --> 29:16.360
The only thing you have to do is to say, OK,

29:16.360 --> 29:18.000
my marble has a physics and post-or.

29:18.000 --> 29:20.640
So there is an imposter representing in the physics

29:20.640 --> 29:23.000
engine my marble here.

29:23.000 --> 29:24.880
And it's going to be a sphere with a mass of two

29:24.880 --> 29:26.920
and a friction of whatever.

29:26.920 --> 29:28.920
And just with that, you let the system drop,

29:28.920 --> 29:31.320
and it will control for you the entire emulation up

29:31.320 --> 29:33.360
to a point where we have a complicated scene here

29:33.360 --> 29:36.560
with this object, this scale.

29:36.560 --> 29:39.280
Also, when they reach this point,

29:39.280 --> 29:42.120
I should have a smaller window.

29:42.120 --> 29:45.560
Here, they go into the wheel.

29:45.560 --> 29:47.520
And that's also a physics engine just

29:47.520 --> 29:50.640
applying a real-time constraint on it.

29:50.640 --> 29:52.480
Right.

29:52.480 --> 29:53.880
Let me get back to my slide.

29:59.240 --> 30:01.400
So you should try it.

30:01.400 --> 30:03.000
Everything is entirely free.

30:03.000 --> 30:05.800
There is no hidden line or whatever.

30:05.800 --> 30:08.320
You have all the links here, BabylonJS.com,

30:08.320 --> 30:11.720
doc.babillon, et cetera, the forum, the playground, enemy,

30:11.720 --> 30:16.040
the dot-material editor if you want to play with shaders.

30:16.040 --> 30:17.880
That's it.

30:17.880 --> 30:18.880
Right on time.

30:18.880 --> 30:23.400
[? Applause ?]

30:23.400 --> 30:24.920
Super cool, right?

30:24.920 --> 30:26.400
OK.

30:26.400 --> 30:27.280
Thanks for the talk.

30:27.280 --> 30:28.400
My pleasure.

30:28.400 --> 30:30.800
And we have some questions.

30:30.800 --> 30:39.080
So what's the advantage of BabylonJS over 3JS?

30:39.080 --> 30:39.920
What's the advantage?

30:39.920 --> 30:42.640
First, we are a team of 10 people paid by Microsoft

30:42.640 --> 30:43.440
to maintain it.

30:43.440 --> 30:46.280
We have a 24-hour bug turned around.

30:46.280 --> 30:47.200
So you declare a bug.

30:47.200 --> 30:50.120
It's fixed in less than 24 hours.

30:50.120 --> 30:52.600
We do not have backward compatibility issues,

30:52.600 --> 30:56.600
like I know 3JS for that.

30:56.600 --> 30:58.440
And we have tools.

30:58.440 --> 30:59.280
3JS is a good tool.

30:59.320 --> 31:01.120
I don't want to say it's a bad tool.

31:01.120 --> 31:02.600
We just have a different philosophy.

31:02.600 --> 31:05.760
BabylonJS is more aimed for professional products

31:05.760 --> 31:07.880
in the sense that there is support.

31:07.880 --> 31:10.400
And there is this turnaround for the bugs.

31:10.400 --> 31:12.160
Like, we fix bugs very, very fast.

31:12.160 --> 31:14.680
Like, definitely, when I saw John Romero mentioning

31:14.680 --> 31:17.360
that you should fix bugs first, that's exactly us.

31:17.360 --> 31:19.960
We stop everything we are working on to just fix bugs.

31:19.960 --> 31:20.800
We do not have bugs.

31:20.800 --> 31:23.000
And we have a link on our GitHub.

31:23.000 --> 31:25.920
If you go to the GitHub, there is a mention.

31:25.920 --> 31:28.760
The average time to fix a bug on our repo.

31:28.760 --> 31:30.560
And so far, it's less than 24 hours.

31:30.560 --> 31:32.720
I guess it's 20 hours.

31:32.720 --> 31:33.640
OK.

31:33.640 --> 31:36.440
Just from my side, I've used 3JS before.

31:36.440 --> 31:40.400
And it usually took me quite a few hours

31:40.400 --> 31:42.560
to get started with any project.

31:42.560 --> 31:44.680
And with BabylonJS, I started using it.

31:44.680 --> 31:46.680
And maybe because I came from 3JS,

31:46.680 --> 31:48.560
and the basics are almost the same.

31:48.560 --> 31:53.520
But I developed something like a VR, just a shooter,

31:53.520 --> 31:55.520
where you can shoot balls just into empty space

31:55.520 --> 31:57.760
or something within one hour and headed

31:57.760 --> 31:59.920
to running on my Oculus Quest in the browser,

31:59.920 --> 32:01.360
which was super cool.

32:01.360 --> 32:05.120
So I think just getting started this way easier,

32:05.120 --> 32:05.960
at least for me it was.

32:05.960 --> 32:07.480
That's why we have a documentation.

32:07.480 --> 32:10.000
No, I'm kidding.

32:10.000 --> 32:11.200
No one's here about documentation.

32:14.760 --> 32:15.760
What's in it?

32:15.760 --> 32:17.240
What's in for it for Microsoft?

32:17.240 --> 32:20.040
You mean why the reason of Microsoft to support the product?

32:20.040 --> 32:21.320
I guess, yes.

32:21.320 --> 32:25.880
I created BabylonJS on my spare time.

32:25.880 --> 32:28.600
And Microsoft was interested to use it.

32:28.600 --> 32:31.080
So we use it in SharePoint, Dynamics, and other products.

32:31.080 --> 32:33.400
We have 12 products in Microsoft using it.

32:33.400 --> 32:36.000
And I was also working for Microsoft.

32:36.000 --> 32:38.600
It was not correlated at the beginning.

32:38.600 --> 32:42.920
And they asked me if I wanted to keep working on BabylonJS.

32:42.920 --> 32:46.000
And I asked them, I will provide you support

32:46.000 --> 32:48.120
for all the 12 products that you have.

32:48.120 --> 32:50.800
But as a compensation, you give me a team,

32:50.800 --> 32:52.800
and we keep it open source, and people can use it.

32:52.800 --> 32:54.920
So it was a win-win situation where Microsoft

32:54.920 --> 32:59.920
get a fully fledged team supporting the product.

32:59.920 --> 33:03.160
Whereas I wanted it to be open and for everyone.

33:03.160 --> 33:07.200
So it was a win-win situation.

33:07.200 --> 33:09.000
I have a question.

33:09.000 --> 33:12.400
So you told me earlier that you developed another game engine

33:12.400 --> 33:14.600
before you came to Microsoft.

33:14.600 --> 33:16.800
Can you tell us about that a little bit?

33:16.800 --> 33:19.760
And actually, I was almost emotional when I saw John Romero

33:19.760 --> 33:22.160
because I was a big fan of him and John Carmack.

33:22.160 --> 33:24.440
And I created my own engine when I was 17.

33:24.440 --> 33:29.000
It was a C using an engine developed with C on DOS,

33:29.000 --> 33:30.040
using Whatcom.

33:30.040 --> 33:33.000
And I imported it back to DirectX.

33:33.000 --> 33:34.080
And then I joined Microsoft.

33:34.080 --> 33:34.960
And so I stopped.

33:34.960 --> 33:37.080
And I sold the company I created because it

33:37.080 --> 33:39.640
was a 3D engine for architecture.

33:39.640 --> 33:41.520
And I sold my company, I moved to Microsoft.

33:41.520 --> 33:43.760
And when I was a Microsoft, I was like, oh my gosh,

33:43.760 --> 33:45.240
I still want to do 3D, right?

33:45.240 --> 33:51.680
So at that specific time, six years ago, we shipped IE10.

33:51.680 --> 33:54.280
And IE10 came with the very first version of WebGL

33:54.280 --> 33:55.200
for Microsoft.

33:55.200 --> 33:58.120
It was here since ages for Chrome.

33:58.120 --> 34:00.880
But Microsoft entered a 3D game on the browser

34:00.880 --> 34:02.040
like six years ago.

34:02.040 --> 34:04.600
And so I was like, OK, I want to do 3D stuff.

34:04.600 --> 34:07.800
There is this WebGL support now everywhere, thanks to IE.

34:07.800 --> 34:10.280
OK, let's create a port of my old engine, which

34:10.280 --> 34:12.920
was now BabillionGS.

34:12.920 --> 34:13.920
That's really cool.

34:13.920 --> 34:16.480
I was 17.

34:16.480 --> 34:19.120
OK, I have another fun question at the end.

34:19.120 --> 34:21.920
How do you pass data between other JS code and the 3D

34:21.920 --> 34:22.680
application?

34:22.680 --> 34:24.240
Are there any restrictions?

34:24.240 --> 34:26.560
So your 3D application will be JavaScript as well.

34:26.560 --> 34:28.280
So there is no restriction at all.

34:28.280 --> 34:32.400
Like literally, BabillionGS is like jQuery or any other framework

34:32.400 --> 34:33.600
or React or whatever.

34:33.600 --> 34:35.320
You're going to use it the same way.

34:35.320 --> 34:38.600
We have ES6 version of it and ES5,

34:38.600 --> 34:42.080
depending on if you want to use it with module or without module.

34:42.080 --> 34:43.600
And there is no restriction.

34:43.600 --> 34:46.080
Like literally, all the application using BabillionGS

34:46.080 --> 34:49.000
just communicate through JavaScript.

34:49.000 --> 34:51.240
OK, there is one on performance.

34:51.240 --> 34:53.520
What about performance and compatibility with mobile

34:53.520 --> 34:54.240
devices?

34:54.240 --> 34:56.000
Another good reason to use BabillionGS.

34:56.000 --> 34:58.280
One of our motto is to make sure that it works everywhere.

34:58.280 --> 35:01.320
So we have a full list of devices that we test on.

35:01.320 --> 35:04.720
And I would say like 20% of BabillionGS core code

35:04.720 --> 35:06.240
is about compatibility.

35:06.240 --> 35:09.040
So we know that on specific version of iOS or Safari

35:09.040 --> 35:14.440
of IE or Firefox or whatever, we have hack.

35:14.440 --> 35:15.920
Because WebGL is a spec.

35:15.920 --> 35:19.280
And human implementing a spec, you know it works, right?

35:19.280 --> 35:22.440
So everyone understands things a little bit differently.

35:22.440 --> 35:24.520
So we make sure that it works everywhere.

35:24.520 --> 35:28.320
And then we have thousands of countermeasures

35:28.320 --> 35:29.200
for performance.

35:29.200 --> 35:31.120
So we support WebGL 2 by default.

35:31.120 --> 35:34.040
If you don't have WebGL 2, we have a fallback for WebGL 1.

35:34.040 --> 35:36.040
If you are supporting WebGL 1 with extension,

35:36.040 --> 35:37.680
we're going to use the extension for you.

35:37.680 --> 35:40.360
So it's transparent in a sense that we try to reach out

35:40.360 --> 35:41.320
the best performance.

35:41.320 --> 35:43.840
We know that in mobile, the CPU is the problem.

35:43.840 --> 35:46.520
So we try to move everything to the GPUs.

35:46.560 --> 35:49.960
Even collision should be done by the GPU if you can.

35:49.960 --> 35:52.480
So we run on Chromebooks, for instance.

35:52.480 --> 35:54.400
Flipgrid, if you know it, is an application

35:54.400 --> 35:55.920
Microsoft acquired recently.

35:55.920 --> 35:57.720
They were just using JavaScript.

35:57.720 --> 35:59.480
But they were not able to run on Chromebooks

35:59.480 --> 36:02.520
because it's an application that do screen capture

36:02.520 --> 36:03.800
for students.

36:03.800 --> 36:07.520
The way they did screen capture was very easy on the CPU.

36:07.520 --> 36:09.600
And by using BabillionGS, they were

36:09.600 --> 36:12.440
able to move a bit of this code onto the GPU.

36:12.440 --> 36:15.520
And they were able to reach out a user using Chromebooks.

36:15.520 --> 36:19.120
So that's a very important focus for us.

36:19.120 --> 36:22.160
So you have full support already for WebGPU?

36:22.160 --> 36:25.960
We are the only engine that I know of supporting WebGPU.

36:25.960 --> 36:29.240
Yeah, that's also what my last step was.

36:29.240 --> 36:31.800
OK, what are the next steps for BabillionGS?

36:31.800 --> 36:33.440
Features, etc.

36:33.440 --> 36:36.800
Number one is we're going to ship for one in February.

36:36.800 --> 36:38.880
February will be about what I show you today,

36:38.880 --> 36:41.040
like finishing the node material editor.

36:41.040 --> 36:42.440
It's number one key feature.

36:42.440 --> 36:44.400
And number two is supporting WebGPU.

36:44.400 --> 36:47.080
WebGPU is not even a draft spec so far.

36:47.080 --> 36:48.120
It's an evolving version.

36:48.120 --> 36:50.520
So every week, I have one of my engineers just changing

36:50.520 --> 36:53.200
all the code we had to adapt to the new spec.

36:53.200 --> 36:55.080
Like, oh, yeah, they reversed the viewport.

36:55.080 --> 36:58.000
Or it's now up or down anyway.

36:58.000 --> 37:01.880
So that's going to also be the main portion of 4.1.

37:01.880 --> 37:07.160
And WebXR just hit the draft spec standard recently.

37:07.160 --> 37:10.160
So we plan to make sure that everything works for 4.1

37:10.160 --> 37:11.000
as well.

37:11.000 --> 37:13.840
And WebXR, which is an evolution of WebVR,

37:13.840 --> 37:16.640
is complicated because it's not just about VR.

37:16.640 --> 37:18.320
It's also about AR.

37:18.320 --> 37:20.240
So we are also working with the HoloLens team

37:20.240 --> 37:24.160
to make sure that you can do AR with the web.

37:24.160 --> 37:27.800
So it's WebXR on the AR context, supporting fingers

37:27.800 --> 37:29.320
instead of controllers, stuff like that.

37:29.320 --> 37:32.360
So that's the third big bucket of 4.1.

37:32.360 --> 37:35.880
And then you still need the 3,000 euros for the HoloLens.

37:35.880 --> 37:38.720
Yes, but I'm not responsible for that.

37:38.720 --> 37:41.760
I would have given that to everyone else.

37:41.760 --> 37:42.640
I'd like this one.

37:42.640 --> 37:47.000
Would you recommend BabylonJS for 2D or 2.5D development?

37:47.000 --> 37:54.400
Honestly, if you compare to Pixi or other 2D framework,

37:54.400 --> 37:55.840
it depends on what you want to do.

37:55.840 --> 37:58.680
For 2.5, yes, definitely.

37:58.680 --> 38:01.120
And we have a lot of people using it.

38:01.120 --> 38:03.600
We recently came across a company

38:03.600 --> 38:06.720
creating games for Las Vegas.

38:06.720 --> 38:07.560
What's the name?

38:07.560 --> 38:09.400
You know the?

38:09.400 --> 38:11.320
Yes, slot machines, exactly.

38:11.360 --> 38:14.280
It's purely 2D, but they are using 3D

38:14.280 --> 38:15.720
to move the card and stuff like that.

38:15.720 --> 38:18.240
So if there is a sense of at least layers,

38:18.240 --> 38:19.800
yes, BabylonJS is a good example.

38:19.800 --> 38:23.640
Else, you should stick with pure 2D framework tools.

38:23.640 --> 38:26.400
Unless you're interested by the backward compatibility issue

38:26.400 --> 38:29.080
and the turnaround of bug, then we also

38:29.080 --> 38:33.480
have a 2D version of BabylonJS, so it could be useful.

38:33.480 --> 38:36.160
OK, I have another question.

38:36.160 --> 38:39.960
Did you actually have to support Internet Explorer

38:40.000 --> 38:42.320
with BabylonJS when you're working for Microsoft?

38:42.320 --> 38:45.160
Yes, we still support it.

38:45.160 --> 38:46.240
You should take my demos.

38:46.240 --> 38:49.560
They run on Internet Explorer.

38:49.560 --> 38:53.520
The PlayGrant won't work because I am in love with the arrow

38:53.520 --> 38:54.120
function.

38:54.120 --> 38:56.160
You know the new arrow function of JavaScript?

38:56.160 --> 38:57.040
That sucks.

38:57.040 --> 38:59.600
But I was like, OK, the PlayGrant will not work on IE.

38:59.600 --> 39:00.440
That's not a big deal.

39:00.440 --> 39:03.760
But every rendering stuff will work because, yeah,

39:03.760 --> 39:06.320
it's important for us.

39:06.320 --> 39:06.960
One more?

39:06.960 --> 39:07.240
OK.

39:07.240 --> 39:11.000
One more question, and I'm just going to look through here.

39:11.000 --> 39:13.280
I saw one that I can quickly support.

39:13.280 --> 39:17.240
Which browser do we support all?

39:17.240 --> 39:20.120
Can you import models, maps, materials you

39:20.120 --> 39:24.240
build in other software, if so, what formats are supported?

39:24.240 --> 39:27.840
So yes, part of the BabylonJS tools I did not share today.

39:27.840 --> 39:35.640
We have exporters for 3DS Max, Maya, Unity, Blender 3D,

39:35.640 --> 39:37.200
a few others.

39:37.200 --> 39:38.840
And we also developed transcoders.

39:38.840 --> 39:41.120
And the goal is to have everything in GLTF file format.

39:41.120 --> 39:43.240
So as long as your tool that you are using

39:43.240 --> 39:47.360
is exporting into GLTF, then we will be able to load it.

39:47.360 --> 39:51.640
And we are also supporting tools that generate GLTF

39:51.640 --> 39:55.800
into the tools I mentioned before, like Maya, Autodesk, Maya,

39:55.800 --> 39:59.960
3DS Max, Blender, and stuff.

39:59.960 --> 40:00.720
OK.

40:00.720 --> 40:02.320
Let me see if I find one more.

40:02.320 --> 40:03.680
There's some over AI.

40:03.680 --> 40:05.320
I don't get the AI.

40:10.600 --> 40:13.560
How accessible is Babylon to designers?

40:13.560 --> 40:16.320
We have users that are purely designers.

40:16.320 --> 40:19.560
They use another tool that I did not demonstrate here.

40:19.560 --> 40:20.800
It's the sandbox.

40:20.800 --> 40:23.760
The sandbox is a place where you drag and drop a GLTF model

40:23.760 --> 40:24.840
and the inspector pops.

40:24.840 --> 40:27.960
And you can edit everything just visually.

40:27.960 --> 40:30.600
And they use that a lot to create.

40:30.600 --> 40:31.800
We have a viewer as well.

40:31.800 --> 40:34.000
It's a tool that you can plug in a page.

40:34.000 --> 40:37.240
And just one line of HTML, you say display this object.

40:37.240 --> 40:40.480
And there is no code, just a HTML tag.

40:40.480 --> 40:43.280
So they use that to display controls and 3D objects,

40:43.280 --> 40:44.360
for instance.

40:44.360 --> 40:44.960
OK.

40:44.960 --> 40:46.000
Last one.

40:46.000 --> 40:48.160
Is it possible to stream 3D geometry

40:48.160 --> 40:51.160
between server and client for an open world level?

40:51.160 --> 40:51.760
Yes.

40:51.760 --> 40:53.360
We have users doing that.

40:53.360 --> 40:54.280
Super cool.

40:54.280 --> 40:57.200
We just do the client huntering, to be honest.

40:57.200 --> 41:01.120
We don't do the backend, for instance.

41:01.120 --> 41:03.320
And the streaming, you have to stream something compatible

41:03.320 --> 41:04.000
with Babylon.js.

41:04.000 --> 41:05.960
But yes, we are doing that.

41:05.960 --> 41:06.760
OK.

41:06.760 --> 41:08.320
If you have any other question, feel free.

41:08.320 --> 41:10.400
I'm going to stay here, trying not to sleep.

41:10.400 --> 41:11.280
So it should be fine.

41:11.280 --> 41:13.160
If someone talked to me, it's going to be fine.

41:13.160 --> 41:14.680
First, you can have lunch now.

41:14.680 --> 41:15.920
There's going to be lunch.

41:15.920 --> 41:17.360
So everyone, have a good lunch.

41:17.360 --> 41:21.320
And yeah, see you after the break.

