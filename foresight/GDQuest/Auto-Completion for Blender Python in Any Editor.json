{"text": " In Blender, you can get auto-completion for whatever you type in the text editor on Python script by pressing control space to complete the current entry you are writing or after a dot. You can fire control space to get some suggestions, but by default they don't work so well. And you can have that also in the Python console and in this case, it's a little more helpful because you can really get a list of all the properties you will find at a given stage in the auto-completion step. If you are working on an add-on with dozens of files, it's not enough to use Blender because you don't have all the file navigations and suggestions or auto-completion from other files you import from. So what if you want to work in an external text editor? By default, you won't have auto-completion. Now, if I hover something, you will see that I do. I do get documentation on elements I hover, can even get documentation for built-in operators and values and modules. So I'm going to show you how to get that and how to get rich auto-completion as well, auto-complete on the sequencer and get all the available operators. Normally, you have to build Blender as a Python module to do that and place that module in your Python installation folder. And building it, especially on Windows, can be a bit involved. On Linux, it should be much easier. But you don't have to do that thanks to Nutty, who created a fake BPI module as he calls it. So he created a script that from the Blender sources will generate Python modules that have the functions, the classes you would find in Blender Python, but it doesn't have any actual code. You only get the definitions. And that is all you need to get auto-completion. Auto-completion tools like Jedi and all will read the function names and the doc strings, but that is it. They don't know much about the implementation or the actual code in these tools. If you don't even have to run the script, although you can run it on the Blender sources to generate all these modules, you can just download this as a zip and you can find the link in the description. And we're going to put all that in our Python folder. So here I am with the fake BPI module downloaded as zip. I'm going to unfold it. And note that at the moment, you will only find modules for the 278 and 279 versions of Blender because 2.8 is not available yet. The Python API is not stable yet. So that's why you won't find auto-completion targets for it. So once we've unzipped everything, we're going to head to the folder that corresponds to your Blender version and grab everything, copy. Now we want to put it in our Python install folder. On Windows to find it, you press Windows S to do a global search and search for your Python executable. Right click on it, open the file location. And it's going to be a shortcut, in which case you want to open the target folder. So this is where my 3.7 install of Python lives. And we want to go to the lib folder where you will find lots of Python libraries. So I have BPI somewhere in here, as you can see. I also have BGL, all the Blender libraries we just saw. All you want to do is right click and paste everything in here. Once you copied all the files, you are done. You should get auto-completion in all the text editors that you may use that have support for a service like Autocomplete or the Python language server or that use GDI for Autocompletion. And there you go. You can see everything's working as you'd expect. Enjoy coding Blender Python scripts and add-ons in your favorite editors. And to get started with Blender's Python operators, check the previous videos that we made, link on the screen in the description. Thank you kindly for watching. Be creative, have fun, and see you in the next one.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.0, "text": " In Blender, you can get auto-completion for whatever you type in the text editor on Python script", "tokens": [50364, 682, 2177, 3216, 11, 291, 393, 483, 8399, 12, 1112, 14657, 313, 337, 2035, 291, 2010, 294, 264, 2487, 9839, 322, 15329, 5755, 50764], "temperature": 0.0, "avg_logprob": -0.2204226818713513, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.14571338891983032}, {"id": 1, "seek": 0, "start": 8.0, "end": 14.36, "text": " by pressing control space to complete the current entry you are writing or after a dot.", "tokens": [50764, 538, 12417, 1969, 1901, 281, 3566, 264, 2190, 8729, 291, 366, 3579, 420, 934, 257, 5893, 13, 51082], "temperature": 0.0, "avg_logprob": -0.2204226818713513, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.14571338891983032}, {"id": 2, "seek": 0, "start": 14.36, "end": 20.28, "text": " You can fire control space to get some suggestions, but by default they don't work so well.", "tokens": [51082, 509, 393, 2610, 1969, 1901, 281, 483, 512, 13396, 11, 457, 538, 7576, 436, 500, 380, 589, 370, 731, 13, 51378], "temperature": 0.0, "avg_logprob": -0.2204226818713513, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.14571338891983032}, {"id": 3, "seek": 0, "start": 20.28, "end": 28.48, "text": " And you can have that also in the Python console and in this case, it's a little more helpful", "tokens": [51378, 400, 291, 393, 362, 300, 611, 294, 264, 15329, 11076, 293, 294, 341, 1389, 11, 309, 311, 257, 707, 544, 4961, 51788], "temperature": 0.0, "avg_logprob": -0.2204226818713513, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.14571338891983032}, {"id": 4, "seek": 2848, "start": 28.56, "end": 35.2, "text": " because you can really get a list of all the properties you will find at a given stage", "tokens": [50368, 570, 291, 393, 534, 483, 257, 1329, 295, 439, 264, 7221, 291, 486, 915, 412, 257, 2212, 3233, 50700], "temperature": 0.0, "avg_logprob": -0.10969862987085716, "compression_ratio": 1.6217391304347826, "no_speech_prob": 0.05998159572482109}, {"id": 5, "seek": 2848, "start": 35.2, "end": 43.2, "text": " in the auto-completion step. If you are working on an add-on with dozens of files, it's not enough", "tokens": [50700, 294, 264, 8399, 12, 1112, 14657, 313, 1823, 13, 759, 291, 366, 1364, 322, 364, 909, 12, 266, 365, 18431, 295, 7098, 11, 309, 311, 406, 1547, 51100], "temperature": 0.0, "avg_logprob": -0.10969862987085716, "compression_ratio": 1.6217391304347826, "no_speech_prob": 0.05998159572482109}, {"id": 6, "seek": 2848, "start": 43.2, "end": 50.32, "text": " to use Blender because you don't have all the file navigations and suggestions or auto-completion", "tokens": [51100, 281, 764, 2177, 3216, 570, 291, 500, 380, 362, 439, 264, 3991, 7407, 763, 293, 13396, 420, 8399, 12, 1112, 14657, 313, 51456], "temperature": 0.0, "avg_logprob": -0.10969862987085716, "compression_ratio": 1.6217391304347826, "no_speech_prob": 0.05998159572482109}, {"id": 7, "seek": 2848, "start": 50.32, "end": 56.56, "text": " from other files you import from. So what if you want to work in an external text editor?", "tokens": [51456, 490, 661, 7098, 291, 974, 490, 13, 407, 437, 498, 291, 528, 281, 589, 294, 364, 8320, 2487, 9839, 30, 51768], "temperature": 0.0, "avg_logprob": -0.10969862987085716, "compression_ratio": 1.6217391304347826, "no_speech_prob": 0.05998159572482109}, {"id": 8, "seek": 5656, "start": 56.56, "end": 62.88, "text": " By default, you won't have auto-completion. Now, if I hover something, you will see that I do.", "tokens": [50364, 3146, 7576, 11, 291, 1582, 380, 362, 8399, 12, 1112, 14657, 313, 13, 823, 11, 498, 286, 20076, 746, 11, 291, 486, 536, 300, 286, 360, 13, 50680], "temperature": 0.0, "avg_logprob": -0.08525047422964362, "compression_ratio": 1.6327683615819208, "no_speech_prob": 0.021606437861919403}, {"id": 9, "seek": 5656, "start": 62.88, "end": 71.12, "text": " I do get documentation on elements I hover, can even get documentation for built-in operators", "tokens": [50680, 286, 360, 483, 14333, 322, 4959, 286, 20076, 11, 393, 754, 483, 14333, 337, 3094, 12, 259, 19077, 51092], "temperature": 0.0, "avg_logprob": -0.08525047422964362, "compression_ratio": 1.6327683615819208, "no_speech_prob": 0.021606437861919403}, {"id": 10, "seek": 5656, "start": 71.12, "end": 78.64, "text": " and values and modules. So I'm going to show you how to get that and how to get rich auto-completion", "tokens": [51092, 293, 4190, 293, 16679, 13, 407, 286, 478, 516, 281, 855, 291, 577, 281, 483, 300, 293, 577, 281, 483, 4593, 8399, 12, 1112, 14657, 313, 51468], "temperature": 0.0, "avg_logprob": -0.08525047422964362, "compression_ratio": 1.6327683615819208, "no_speech_prob": 0.021606437861919403}, {"id": 11, "seek": 7864, "start": 78.64, "end": 86.96000000000001, "text": " as well, auto-complete on the sequencer and get all the available operators. Normally,", "tokens": [50364, 382, 731, 11, 8399, 12, 1112, 17220, 322, 264, 5123, 16542, 293, 483, 439, 264, 2435, 19077, 13, 17424, 11, 50780], "temperature": 0.0, "avg_logprob": -0.10941067562308363, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.04957336559891701}, {"id": 12, "seek": 7864, "start": 86.96000000000001, "end": 94.8, "text": " you have to build Blender as a Python module to do that and place that module in your Python", "tokens": [50780, 291, 362, 281, 1322, 2177, 3216, 382, 257, 15329, 10088, 281, 360, 300, 293, 1081, 300, 10088, 294, 428, 15329, 51172], "temperature": 0.0, "avg_logprob": -0.10941067562308363, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.04957336559891701}, {"id": 13, "seek": 7864, "start": 94.8, "end": 101.2, "text": " installation folder. And building it, especially on Windows, can be a bit involved. On Linux,", "tokens": [51172, 13260, 10820, 13, 400, 2390, 309, 11, 2318, 322, 8591, 11, 393, 312, 257, 857, 3288, 13, 1282, 18734, 11, 51492], "temperature": 0.0, "avg_logprob": -0.10941067562308363, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.04957336559891701}, {"id": 14, "seek": 7864, "start": 101.2, "end": 108.32, "text": " it should be much easier. But you don't have to do that thanks to Nutty, who created a fake", "tokens": [51492, 309, 820, 312, 709, 3571, 13, 583, 291, 500, 380, 362, 281, 360, 300, 3231, 281, 19861, 874, 11, 567, 2942, 257, 7592, 51848], "temperature": 0.0, "avg_logprob": -0.10941067562308363, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.04957336559891701}, {"id": 15, "seek": 10832, "start": 108.32, "end": 116.8, "text": " BPI module as he calls it. So he created a script that from the Blender sources will generate", "tokens": [50364, 363, 31701, 10088, 382, 415, 5498, 309, 13, 407, 415, 2942, 257, 5755, 300, 490, 264, 2177, 3216, 7139, 486, 8460, 50788], "temperature": 0.0, "avg_logprob": -0.09707502820598546, "compression_ratio": 1.5224719101123596, "no_speech_prob": 0.01825135387480259}, {"id": 16, "seek": 10832, "start": 116.8, "end": 124.16, "text": " Python modules that have the functions, the classes you would find in Blender Python,", "tokens": [50788, 15329, 16679, 300, 362, 264, 6828, 11, 264, 5359, 291, 576, 915, 294, 2177, 3216, 15329, 11, 51156], "temperature": 0.0, "avg_logprob": -0.09707502820598546, "compression_ratio": 1.5224719101123596, "no_speech_prob": 0.01825135387480259}, {"id": 17, "seek": 10832, "start": 124.16, "end": 131.44, "text": " but it doesn't have any actual code. You only get the definitions. And that is all you need", "tokens": [51156, 457, 309, 1177, 380, 362, 604, 3539, 3089, 13, 509, 787, 483, 264, 21988, 13, 400, 300, 307, 439, 291, 643, 51520], "temperature": 0.0, "avg_logprob": -0.09707502820598546, "compression_ratio": 1.5224719101123596, "no_speech_prob": 0.01825135387480259}, {"id": 18, "seek": 13144, "start": 131.44, "end": 139.12, "text": " to get auto-completion. Auto-completion tools like Jedi and all will read the function names and the", "tokens": [50364, 281, 483, 8399, 12, 1112, 14657, 313, 13, 13738, 12, 1112, 14657, 313, 3873, 411, 21746, 293, 439, 486, 1401, 264, 2445, 5288, 293, 264, 50748], "temperature": 0.0, "avg_logprob": -0.10865828514099121, "compression_ratio": 1.6680851063829787, "no_speech_prob": 0.33438846468925476}, {"id": 19, "seek": 13144, "start": 139.12, "end": 145.68, "text": " doc strings, but that is it. They don't know much about the implementation or the actual code in", "tokens": [50748, 3211, 13985, 11, 457, 300, 307, 309, 13, 814, 500, 380, 458, 709, 466, 264, 11420, 420, 264, 3539, 3089, 294, 51076], "temperature": 0.0, "avg_logprob": -0.10865828514099121, "compression_ratio": 1.6680851063829787, "no_speech_prob": 0.33438846468925476}, {"id": 20, "seek": 13144, "start": 145.68, "end": 150.4, "text": " these tools. If you don't even have to run the script, although you can run it on the Blender", "tokens": [51076, 613, 3873, 13, 759, 291, 500, 380, 754, 362, 281, 1190, 264, 5755, 11, 4878, 291, 393, 1190, 309, 322, 264, 2177, 3216, 51312], "temperature": 0.0, "avg_logprob": -0.10865828514099121, "compression_ratio": 1.6680851063829787, "no_speech_prob": 0.33438846468925476}, {"id": 21, "seek": 13144, "start": 150.4, "end": 158.0, "text": " sources to generate all these modules, you can just download this as a zip and you can find the link", "tokens": [51312, 7139, 281, 8460, 439, 613, 16679, 11, 291, 393, 445, 5484, 341, 382, 257, 20730, 293, 291, 393, 915, 264, 2113, 51692], "temperature": 0.0, "avg_logprob": -0.10865828514099121, "compression_ratio": 1.6680851063829787, "no_speech_prob": 0.33438846468925476}, {"id": 22, "seek": 15800, "start": 158.0, "end": 164.56, "text": " in the description. And we're going to put all that in our Python folder. So here I am", "tokens": [50364, 294, 264, 3855, 13, 400, 321, 434, 516, 281, 829, 439, 300, 294, 527, 15329, 10820, 13, 407, 510, 286, 669, 50692], "temperature": 0.0, "avg_logprob": -0.08682703344445479, "compression_ratio": 1.416243654822335, "no_speech_prob": 0.024791786447167397}, {"id": 23, "seek": 15800, "start": 164.56, "end": 172.96, "text": " with the fake BPI module downloaded as zip. I'm going to unfold it. And note that at the moment,", "tokens": [50692, 365, 264, 7592, 363, 31701, 10088, 21748, 382, 20730, 13, 286, 478, 516, 281, 17980, 309, 13, 400, 3637, 300, 412, 264, 1623, 11, 51112], "temperature": 0.0, "avg_logprob": -0.08682703344445479, "compression_ratio": 1.416243654822335, "no_speech_prob": 0.024791786447167397}, {"id": 24, "seek": 15800, "start": 172.96, "end": 183.68, "text": " you will only find modules for the 278 and 279 versions of Blender because 2.8 is not available", "tokens": [51112, 291, 486, 787, 915, 16679, 337, 264, 7634, 23, 293, 7634, 24, 9606, 295, 2177, 3216, 570, 568, 13, 23, 307, 406, 2435, 51648], "temperature": 0.0, "avg_logprob": -0.08682703344445479, "compression_ratio": 1.416243654822335, "no_speech_prob": 0.024791786447167397}, {"id": 25, "seek": 18368, "start": 183.68, "end": 190.48000000000002, "text": " yet. The Python API is not stable yet. So that's why you won't find auto-completion targets for it.", "tokens": [50364, 1939, 13, 440, 15329, 9362, 307, 406, 8351, 1939, 13, 407, 300, 311, 983, 291, 1582, 380, 915, 8399, 12, 1112, 14657, 313, 12911, 337, 309, 13, 50704], "temperature": 0.0, "avg_logprob": -0.08064305180250997, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.009124516509473324}, {"id": 26, "seek": 18368, "start": 191.6, "end": 197.20000000000002, "text": " So once we've unzipped everything, we're going to head to the folder that corresponds to your", "tokens": [50760, 407, 1564, 321, 600, 517, 89, 5529, 1203, 11, 321, 434, 516, 281, 1378, 281, 264, 10820, 300, 23249, 281, 428, 51040], "temperature": 0.0, "avg_logprob": -0.08064305180250997, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.009124516509473324}, {"id": 27, "seek": 18368, "start": 197.20000000000002, "end": 206.0, "text": " Blender version and grab everything, copy. Now we want to put it in our Python install folder.", "tokens": [51040, 2177, 3216, 3037, 293, 4444, 1203, 11, 5055, 13, 823, 321, 528, 281, 829, 309, 294, 527, 15329, 3625, 10820, 13, 51480], "temperature": 0.0, "avg_logprob": -0.08064305180250997, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.009124516509473324}, {"id": 28, "seek": 18368, "start": 206.0, "end": 212.88, "text": " On Windows to find it, you press Windows S to do a global search and search for your Python", "tokens": [51480, 1282, 8591, 281, 915, 309, 11, 291, 1886, 8591, 318, 281, 360, 257, 4338, 3164, 293, 3164, 337, 428, 15329, 51824], "temperature": 0.0, "avg_logprob": -0.08064305180250997, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.009124516509473324}, {"id": 29, "seek": 21288, "start": 212.88, "end": 219.35999999999999, "text": " executable. Right click on it, open the file location. And it's going to be a shortcut,", "tokens": [50364, 7568, 712, 13, 1779, 2052, 322, 309, 11, 1269, 264, 3991, 4914, 13, 400, 309, 311, 516, 281, 312, 257, 24822, 11, 50688], "temperature": 0.0, "avg_logprob": -0.09572166442871094, "compression_ratio": 1.5027027027027027, "no_speech_prob": 0.04143518954515457}, {"id": 30, "seek": 21288, "start": 219.35999999999999, "end": 228.0, "text": " in which case you want to open the target folder. So this is where my 3.7 install of Python lives.", "tokens": [50688, 294, 597, 1389, 291, 528, 281, 1269, 264, 3779, 10820, 13, 407, 341, 307, 689, 452, 805, 13, 22, 3625, 295, 15329, 2909, 13, 51120], "temperature": 0.0, "avg_logprob": -0.09572166442871094, "compression_ratio": 1.5027027027027027, "no_speech_prob": 0.04143518954515457}, {"id": 31, "seek": 21288, "start": 228.56, "end": 235.12, "text": " And we want to go to the lib folder where you will find lots of Python libraries. So I have", "tokens": [51148, 400, 321, 528, 281, 352, 281, 264, 22854, 10820, 689, 291, 486, 915, 3195, 295, 15329, 15148, 13, 407, 286, 362, 51476], "temperature": 0.0, "avg_logprob": -0.09572166442871094, "compression_ratio": 1.5027027027027027, "no_speech_prob": 0.04143518954515457}, {"id": 32, "seek": 23512, "start": 235.68, "end": 245.92000000000002, "text": " BPI somewhere in here, as you can see. I also have BGL, all the Blender libraries we just saw.", "tokens": [50392, 363, 31701, 4079, 294, 510, 11, 382, 291, 393, 536, 13, 286, 611, 362, 363, 19440, 11, 439, 264, 2177, 3216, 15148, 321, 445, 1866, 13, 50904], "temperature": 0.0, "avg_logprob": -0.09322366959009415, "compression_ratio": 1.484375, "no_speech_prob": 0.1346455067396164}, {"id": 33, "seek": 23512, "start": 246.56, "end": 254.48000000000002, "text": " All you want to do is right click and paste everything in here. Once you copied all the files,", "tokens": [50936, 1057, 291, 528, 281, 360, 307, 558, 2052, 293, 9163, 1203, 294, 510, 13, 3443, 291, 25365, 439, 264, 7098, 11, 51332], "temperature": 0.0, "avg_logprob": -0.09322366959009415, "compression_ratio": 1.484375, "no_speech_prob": 0.1346455067396164}, {"id": 34, "seek": 23512, "start": 254.48000000000002, "end": 261.44, "text": " you are done. You should get auto-completion in all the text editors that you may use that have", "tokens": [51332, 291, 366, 1096, 13, 509, 820, 483, 8399, 12, 1112, 14657, 313, 294, 439, 264, 2487, 31446, 300, 291, 815, 764, 300, 362, 51680], "temperature": 0.0, "avg_logprob": -0.09322366959009415, "compression_ratio": 1.484375, "no_speech_prob": 0.1346455067396164}, {"id": 35, "seek": 26144, "start": 261.44, "end": 268.64, "text": " support for a service like Autocomplete or the Python language server or that use GDI for", "tokens": [50364, 1406, 337, 257, 2643, 411, 6049, 905, 298, 17220, 420, 264, 15329, 2856, 7154, 420, 300, 764, 460, 3085, 337, 50724], "temperature": 0.0, "avg_logprob": -0.13564763898434845, "compression_ratio": 1.5598290598290598, "no_speech_prob": 0.07256841659545898}, {"id": 36, "seek": 26144, "start": 268.64, "end": 274.88, "text": " Autocompletion. And there you go. You can see everything's working as you'd expect. Enjoy", "tokens": [50724, 6049, 905, 298, 14657, 313, 13, 400, 456, 291, 352, 13, 509, 393, 536, 1203, 311, 1364, 382, 291, 1116, 2066, 13, 15411, 51036], "temperature": 0.0, "avg_logprob": -0.13564763898434845, "compression_ratio": 1.5598290598290598, "no_speech_prob": 0.07256841659545898}, {"id": 37, "seek": 26144, "start": 274.88, "end": 280.24, "text": " coding Blender Python scripts and add-ons in your favorite editors. And to get started with", "tokens": [51036, 17720, 2177, 3216, 15329, 23294, 293, 909, 12, 892, 294, 428, 2954, 31446, 13, 400, 281, 483, 1409, 365, 51304], "temperature": 0.0, "avg_logprob": -0.13564763898434845, "compression_ratio": 1.5598290598290598, "no_speech_prob": 0.07256841659545898}, {"id": 38, "seek": 26144, "start": 280.24, "end": 286.0, "text": " Blender's Python operators, check the previous videos that we made, link on the screen in the", "tokens": [51304, 2177, 3216, 311, 15329, 19077, 11, 1520, 264, 3894, 2145, 300, 321, 1027, 11, 2113, 322, 264, 2568, 294, 264, 51592], "temperature": 0.0, "avg_logprob": -0.13564763898434845, "compression_ratio": 1.5598290598290598, "no_speech_prob": 0.07256841659545898}, {"id": 39, "seek": 28600, "start": 286.0, "end": 292.0, "text": " description. Thank you kindly for watching. Be creative, have fun, and see you in the next one.", "tokens": [50364, 3855, 13, 1044, 291, 29736, 337, 1976, 13, 879, 5880, 11, 362, 1019, 11, 293, 536, 291, 294, 264, 958, 472, 13, 50664], "temperature": 0.0, "avg_logprob": -0.22889785766601561, "compression_ratio": 1.1046511627906976, "no_speech_prob": 0.06366590410470963}], "language": "en"}