1
00:00:00,800 --> 00:00:02,000
Sure, yes.

2
00:00:04,640 --> 00:00:05,480
No.

3
00:00:07,320 --> 00:00:10,240
My new favorite thing is get add-p

4
00:00:10,240 --> 00:00:12,520
to individually add the chunks to a single commit

5
00:00:12,520 --> 00:00:14,200
so they're all relevant.

6
00:00:14,200 --> 00:00:17,960
It's so cool, built-in help documentation.

7
00:00:17,960 --> 00:00:19,440
Don't you hate how when you print help,

8
00:00:19,440 --> 00:00:22,200
you can't go to the section you wanna see of help?

9
00:00:22,200 --> 00:00:25,600
Well, you can in Bonsai, at least by default.

10
00:00:25,600 --> 00:00:27,120
And if you wanna, you can make your own help command.

11
00:00:27,120 --> 00:00:28,640
You don't have to use mine.

12
00:00:28,680 --> 00:00:29,520
So.

13
00:00:30,920 --> 00:00:34,320
I already used generics a ton and I really love it.

14
00:00:34,320 --> 00:00:36,880
This is probably the coolest thing right here.

15
00:00:36,880 --> 00:00:40,480
This function right here could not be done without generics.

16
00:00:42,040 --> 00:00:43,680
That's right.

17
00:00:43,680 --> 00:00:45,760
It could not be done with interfaces.

18
00:00:45,760 --> 00:00:47,320
It has to be done with generics.

19
00:00:47,320 --> 00:00:48,280
There's no other way to do it.

20
00:00:48,280 --> 00:00:50,280
And it's such a basic thing to have music.

21
00:00:50,280 --> 00:00:51,960
A lot of people when they do coworking sessions,

22
00:00:51,960 --> 00:00:53,600
they'll go, they'll stop talking

23
00:00:53,600 --> 00:00:56,560
and they'll turn their music on, not me.

24
00:00:56,600 --> 00:00:58,640
I am gonna be talking during that time

25
00:00:58,640 --> 00:01:00,240
and turning the music off.

26
00:01:00,240 --> 00:01:02,200
And in the reverse, when I take a break,

27
00:01:02,200 --> 00:01:04,680
I'll put the music on and I may or may not be talking

28
00:01:04,680 --> 00:01:06,760
during that time or walking away from the computer.

29
00:01:06,760 --> 00:01:07,960
So that's how it works.

30
00:01:07,960 --> 00:01:12,360
Create a file and directory name completer,

31
00:01:12,360 --> 00:01:15,180
which is the default in most shell script applications,

32
00:01:15,180 --> 00:01:16,880
which does completion.

33
00:01:16,880 --> 00:01:18,200
But ours is gonna be better

34
00:01:18,200 --> 00:01:19,720
because it's gonna allow you to do things

35
00:01:19,720 --> 00:01:23,400
more precisely than the built-in default in most shells.

36
00:01:23,400 --> 00:01:24,800
And let me tell you what I mean by that.

37
00:01:24,840 --> 00:01:26,520
You run a tab your way through there

38
00:01:26,520 --> 00:01:27,640
to get to what you want.

39
00:01:27,640 --> 00:01:30,960
You recognize that you run out of tabs eventually

40
00:01:30,960 --> 00:01:34,560
and it starts to default to showing you file system things,

41
00:01:34,560 --> 00:01:36,920
even though the files are not valid arguments

42
00:01:36,920 --> 00:01:37,920
at that point in the command.

43
00:01:37,920 --> 00:01:40,840
And this is one of the greatest pet peeves of my existence.

44
00:01:40,840 --> 00:01:41,680
I'm gonna banish that.

45
00:01:41,680 --> 00:01:44,880
To make it so that every command in the sub tree,

46
00:01:44,880 --> 00:01:48,360
in the bonsai sub tree has to be explicitly set.

47
00:01:48,360 --> 00:01:49,760
There's no default completer.

48
00:01:49,760 --> 00:01:53,000
If you don't set a completer, it won't complete.

49
00:01:53,000 --> 00:01:54,080
It won't put something there,

50
00:01:54,080 --> 00:01:56,600
but you can still have powerful completers if you want them.

51
00:01:56,600 --> 00:01:59,400
This is one example of generics that we've been using.

52
00:02:00,360 --> 00:02:02,440
I can show you that really quick, I think.

53
00:02:03,800 --> 00:02:07,240
Filter, map, here we go.

54
00:02:08,560 --> 00:02:09,720
So here it is.

55
00:02:09,720 --> 00:02:12,400
You can't do this code without generics and go

56
00:02:12,400 --> 00:02:13,960
and get good contact with my lips

57
00:02:13,960 --> 00:02:15,880
before I take a drip out of it.

58
00:02:15,880 --> 00:02:19,480
But if you're like at all lazy in your drinking habits,

59
00:02:19,480 --> 00:02:20,440
which I am,

60
00:02:21,280 --> 00:02:25,120
it'll all end up on your shirt

61
00:02:25,120 --> 00:02:27,720
because it'll break the seal and then look it down.

62
00:02:31,800 --> 00:02:32,640
That's cool.

63
00:02:32,640 --> 00:02:34,160
During break, we need to look at that closer.

64
00:02:34,160 --> 00:02:35,320
This is really cool.

65
00:02:36,400 --> 00:02:37,560
It's what I've been telling people.

66
00:02:37,560 --> 00:02:39,560
This is more important than your website.

67
00:02:40,720 --> 00:02:44,800
Seriously, making a really strong GitHub landing page

68
00:02:44,800 --> 00:02:47,640
is way more important than a website, in my opinion,

69
00:02:47,640 --> 00:02:48,560
unless you're a web dev.

70
00:02:48,560 --> 00:02:49,400
I love the skill stack stuff

71
00:02:49,400 --> 00:02:51,960
and I found our old site,

72
00:02:51,960 --> 00:02:55,600
www.artificerob.github.io slash vi-help.

73
00:02:55,600 --> 00:02:57,120
This was, you can print it.

74
00:02:57,120 --> 00:02:58,800
There's a PDF down here

75
00:02:58,800 --> 00:03:01,840
and that has the cheat sheet that I used to print out

76
00:03:01,840 --> 00:03:03,840
for people and have them put next to their monitor

77
00:03:03,840 --> 00:03:04,800
so they could learn Vi.

78
00:03:04,800 --> 00:03:06,200
It's about, it's available for free out there.

79
00:03:06,200 --> 00:03:07,040
You can go download it.

80
00:03:07,040 --> 00:03:09,880
I've just hit the single most annoying,

81
00:03:09,880 --> 00:03:13,400
idiotic, moronic, stupid design decision

82
00:03:13,400 --> 00:03:16,560
the Go team has ever made.

83
00:03:16,560 --> 00:03:17,840
And I'm gonna rant about this.

84
00:03:17,840 --> 00:03:18,680
It's gonna be a long one

85
00:03:18,680 --> 00:03:21,680
because I am so pissed off that this exists.

86
00:03:21,680 --> 00:03:23,960
This is so fucking stupid.

87
00:03:23,960 --> 00:03:24,800
Watch.

88
00:03:24,800 --> 00:03:26,120
Watch what this evaluates to.

89
00:03:26,120 --> 00:03:27,320
This is the caller, right?

90
00:03:27,320 --> 00:03:29,560
The caller has a value, it's an interface.

91
00:03:29,560 --> 00:03:32,720
The caller is nil, right?

92
00:03:32,720 --> 00:03:34,160
And here is what it contains.

93
00:03:34,160 --> 00:03:36,160
That's the type of reference it is.

94
00:03:36,160 --> 00:03:39,200
But here it says it's true.

95
00:03:39,200 --> 00:03:40,040
Nil?

96
00:03:40,040 --> 00:03:40,880
True.

97
00:03:40,880 --> 00:03:41,720
Which one is it?

98
00:03:41,720 --> 00:03:42,560
Who knows?

99
00:03:42,560 --> 00:03:45,600
To the fact that if you involve an interface

100
00:03:45,600 --> 00:03:48,920
which everybody tells you to do and go, do interfaces

101
00:03:48,920 --> 00:03:51,920
as soon as you involve an interface, a simple check

102
00:03:51,920 --> 00:03:54,520
against whether that thing has been defined

103
00:03:54,520 --> 00:03:57,160
will return false.

104
00:03:57,160 --> 00:03:59,000
So you can't tell whether it's nil

105
00:03:59,000 --> 00:04:02,000
and your code that fuck up because of this.

106
00:04:02,000 --> 00:04:06,760
The only way to fix this is to use fucking reflection.

107
00:04:06,760 --> 00:04:08,520
This shitty ass reflection

108
00:04:08,520 --> 00:04:11,480
in order to get the code to work correctly.

109
00:04:11,480 --> 00:04:13,320
And I'll show you, I'll change this other line up here

110
00:04:13,320 --> 00:04:15,240
so you can see the value that comes out of that.

111
00:04:15,240 --> 00:04:18,000
Here's the code that works the way we want it to.

112
00:04:18,000 --> 00:04:21,760
As you can see, it's not reflect value of is nil

113
00:04:21,760 --> 00:04:23,320
and now it's false.

114
00:04:23,320 --> 00:04:27,280
But we had to actually jump out of go and use reflection.

115
00:04:27,280 --> 00:04:29,280
You might as well have used Python at that point

116
00:04:29,280 --> 00:04:32,240
because we've incurred such a huge performance hit.

117
00:04:32,240 --> 00:04:34,760
Not to mention how non idiomatic it is.

118
00:04:34,760 --> 00:04:37,160
This kind of shit just really pisses me off

119
00:04:37,160 --> 00:04:40,800
because there are probably thousands of people out there

120
00:04:40,840 --> 00:04:44,840
using if interface that equals nil

121
00:04:44,840 --> 00:04:47,760
and they are failing because it's not catching it.

122
00:04:47,760 --> 00:04:50,080
It's fucking terrifying.

123
00:04:50,080 --> 00:04:52,080
Watch out for this one.

124
00:04:52,080 --> 00:04:53,920
I'll have to say using the length of arguments

125
00:04:53,920 --> 00:04:55,760
as a check for an empty slice.

126
00:04:56,760 --> 00:04:58,640
And that is a safe way to do it.

127
00:04:58,640 --> 00:04:59,760
And I've been reminded today,

128
00:04:59,760 --> 00:05:01,280
I was tempted to try to do args equals nil

129
00:05:01,280 --> 00:05:02,640
and I got burned really bad by that

130
00:05:02,640 --> 00:05:05,560
because args equals nil was false

131
00:05:06,600 --> 00:05:08,240
even though it was zero condition

132
00:05:08,240 --> 00:05:10,360
where we had an empty slice

133
00:05:12,280 --> 00:05:15,720
and the equals nil did not pass.

134
00:05:15,720 --> 00:05:20,480
So just to be safe, always check the length of arguments.

135
00:05:20,480 --> 00:05:22,200
Then no matter what state the slices in,

136
00:05:22,200 --> 00:05:23,880
you'll get what you expect.

137
00:05:23,880 --> 00:05:26,240
Comparing against nil is always dangerous.

