WEBVTT

00:00.800 --> 00:02.000
Sure, yes.

00:04.640 --> 00:05.480
No.

00:07.320 --> 00:10.240
My new favorite thing is get add-p

00:10.240 --> 00:12.520
to individually add the chunks to a single commit

00:12.520 --> 00:14.200
so they're all relevant.

00:14.200 --> 00:17.960
It's so cool, built-in help documentation.

00:17.960 --> 00:19.440
Don't you hate how when you print help,

00:19.440 --> 00:22.200
you can't go to the section you wanna see of help?

00:22.200 --> 00:25.600
Well, you can in Bonsai, at least by default.

00:25.600 --> 00:27.120
And if you wanna, you can make your own help command.

00:27.120 --> 00:28.640
You don't have to use mine.

00:28.680 --> 00:29.520
So.

00:30.920 --> 00:34.320
I already used generics a ton and I really love it.

00:34.320 --> 00:36.880
This is probably the coolest thing right here.

00:36.880 --> 00:40.480
This function right here could not be done without generics.

00:42.040 --> 00:43.680
That's right.

00:43.680 --> 00:45.760
It could not be done with interfaces.

00:45.760 --> 00:47.320
It has to be done with generics.

00:47.320 --> 00:48.280
There's no other way to do it.

00:48.280 --> 00:50.280
And it's such a basic thing to have music.

00:50.280 --> 00:51.960
A lot of people when they do coworking sessions,

00:51.960 --> 00:53.600
they'll go, they'll stop talking

00:53.600 --> 00:56.560
and they'll turn their music on, not me.

00:56.600 --> 00:58.640
I am gonna be talking during that time

00:58.640 --> 01:00.240
and turning the music off.

01:00.240 --> 01:02.200
And in the reverse, when I take a break,

01:02.200 --> 01:04.680
I'll put the music on and I may or may not be talking

01:04.680 --> 01:06.760
during that time or walking away from the computer.

01:06.760 --> 01:07.960
So that's how it works.

01:07.960 --> 01:12.360
Create a file and directory name completer,

01:12.360 --> 01:15.180
which is the default in most shell script applications,

01:15.180 --> 01:16.880
which does completion.

01:16.880 --> 01:18.200
But ours is gonna be better

01:18.200 --> 01:19.720
because it's gonna allow you to do things

01:19.720 --> 01:23.400
more precisely than the built-in default in most shells.

01:23.400 --> 01:24.800
And let me tell you what I mean by that.

01:24.840 --> 01:26.520
You run a tab your way through there

01:26.520 --> 01:27.640
to get to what you want.

01:27.640 --> 01:30.960
You recognize that you run out of tabs eventually

01:30.960 --> 01:34.560
and it starts to default to showing you file system things,

01:34.560 --> 01:36.920
even though the files are not valid arguments

01:36.920 --> 01:37.920
at that point in the command.

01:37.920 --> 01:40.840
And this is one of the greatest pet peeves of my existence.

01:40.840 --> 01:41.680
I'm gonna banish that.

01:41.680 --> 01:44.880
To make it so that every command in the sub tree,

01:44.880 --> 01:48.360
in the bonsai sub tree has to be explicitly set.

01:48.360 --> 01:49.760
There's no default completer.

01:49.760 --> 01:53.000
If you don't set a completer, it won't complete.

01:53.000 --> 01:54.080
It won't put something there,

01:54.080 --> 01:56.600
but you can still have powerful completers if you want them.

01:56.600 --> 01:59.400
This is one example of generics that we've been using.

02:00.360 --> 02:02.440
I can show you that really quick, I think.

02:03.800 --> 02:07.240
Filter, map, here we go.

02:08.560 --> 02:09.720
So here it is.

02:09.720 --> 02:12.400
You can't do this code without generics and go

02:12.400 --> 02:13.960
and get good contact with my lips

02:13.960 --> 02:15.880
before I take a drip out of it.

02:15.880 --> 02:19.480
But if you're like at all lazy in your drinking habits,

02:19.480 --> 02:20.440
which I am,

02:21.280 --> 02:25.120
it'll all end up on your shirt

02:25.120 --> 02:27.720
because it'll break the seal and then look it down.

02:31.800 --> 02:32.640
That's cool.

02:32.640 --> 02:34.160
During break, we need to look at that closer.

02:34.160 --> 02:35.320
This is really cool.

02:36.400 --> 02:37.560
It's what I've been telling people.

02:37.560 --> 02:39.560
This is more important than your website.

02:40.720 --> 02:44.800
Seriously, making a really strong GitHub landing page

02:44.800 --> 02:47.640
is way more important than a website, in my opinion,

02:47.640 --> 02:48.560
unless you're a web dev.

02:48.560 --> 02:49.400
I love the skill stack stuff

02:49.400 --> 02:51.960
and I found our old site,

02:51.960 --> 02:55.600
www.artificerob.github.io slash vi-help.

02:55.600 --> 02:57.120
This was, you can print it.

02:57.120 --> 02:58.800
There's a PDF down here

02:58.800 --> 03:01.840
and that has the cheat sheet that I used to print out

03:01.840 --> 03:03.840
for people and have them put next to their monitor

03:03.840 --> 03:04.800
so they could learn Vi.

03:04.800 --> 03:06.200
It's about, it's available for free out there.

03:06.200 --> 03:07.040
You can go download it.

03:07.040 --> 03:09.880
I've just hit the single most annoying,

03:09.880 --> 03:13.400
idiotic, moronic, stupid design decision

03:13.400 --> 03:16.560
the Go team has ever made.

03:16.560 --> 03:17.840
And I'm gonna rant about this.

03:17.840 --> 03:18.680
It's gonna be a long one

03:18.680 --> 03:21.680
because I am so pissed off that this exists.

03:21.680 --> 03:23.960
This is so fucking stupid.

03:23.960 --> 03:24.800
Watch.

03:24.800 --> 03:26.120
Watch what this evaluates to.

03:26.120 --> 03:27.320
This is the caller, right?

03:27.320 --> 03:29.560
The caller has a value, it's an interface.

03:29.560 --> 03:32.720
The caller is nil, right?

03:32.720 --> 03:34.160
And here is what it contains.

03:34.160 --> 03:36.160
That's the type of reference it is.

03:36.160 --> 03:39.200
But here it says it's true.

03:39.200 --> 03:40.040
Nil?

03:40.040 --> 03:40.880
True.

03:40.880 --> 03:41.720
Which one is it?

03:41.720 --> 03:42.560
Who knows?

03:42.560 --> 03:45.600
To the fact that if you involve an interface

03:45.600 --> 03:48.920
which everybody tells you to do and go, do interfaces

03:48.920 --> 03:51.920
as soon as you involve an interface, a simple check

03:51.920 --> 03:54.520
against whether that thing has been defined

03:54.520 --> 03:57.160
will return false.

03:57.160 --> 03:59.000
So you can't tell whether it's nil

03:59.000 --> 04:02.000
and your code that fuck up because of this.

04:02.000 --> 04:06.760
The only way to fix this is to use fucking reflection.

04:06.760 --> 04:08.520
This shitty ass reflection

04:08.520 --> 04:11.480
in order to get the code to work correctly.

04:11.480 --> 04:13.320
And I'll show you, I'll change this other line up here

04:13.320 --> 04:15.240
so you can see the value that comes out of that.

04:15.240 --> 04:18.000
Here's the code that works the way we want it to.

04:18.000 --> 04:21.760
As you can see, it's not reflect value of is nil

04:21.760 --> 04:23.320
and now it's false.

04:23.320 --> 04:27.280
But we had to actually jump out of go and use reflection.

04:27.280 --> 04:29.280
You might as well have used Python at that point

04:29.280 --> 04:32.240
because we've incurred such a huge performance hit.

04:32.240 --> 04:34.760
Not to mention how non idiomatic it is.

04:34.760 --> 04:37.160
This kind of shit just really pisses me off

04:37.160 --> 04:40.800
because there are probably thousands of people out there

04:40.840 --> 04:44.840
using if interface that equals nil

04:44.840 --> 04:47.760
and they are failing because it's not catching it.

04:47.760 --> 04:50.080
It's fucking terrifying.

04:50.080 --> 04:52.080
Watch out for this one.

04:52.080 --> 04:53.920
I'll have to say using the length of arguments

04:53.920 --> 04:55.760
as a check for an empty slice.

04:56.760 --> 04:58.640
And that is a safe way to do it.

04:58.640 --> 04:59.760
And I've been reminded today,

04:59.760 --> 05:01.280
I was tempted to try to do args equals nil

05:01.280 --> 05:02.640
and I got burned really bad by that

05:02.640 --> 05:05.560
because args equals nil was false

05:06.600 --> 05:08.240
even though it was zero condition

05:08.240 --> 05:10.360
where we had an empty slice

05:12.280 --> 05:15.720
and the equals nil did not pass.

05:15.720 --> 05:20.480
So just to be safe, always check the length of arguments.

05:20.480 --> 05:22.200
Then no matter what state the slices in,

05:22.200 --> 05:23.880
you'll get what you expect.

05:23.880 --> 05:26.240
Comparing against nil is always dangerous.

