start	end	text
0	1520	All right, we're gonna jump right into this.
1520	4240	So this is the results of the best amount
5920	8400	of research that I can do.
8400	11200	And now when I do research R being the,
11200	16200	you know, the research being the principal meaning of R,
16800	19040	don't put Rust out there again.
19040	20560	Why are you bullying up Rust right now?
20560	22480	We're not talking about Rust.
22480	24680	No, we're not.
24680	29440	So anyway, so by the way,
29440	30960	my feelings on Rust have totally changed
30960	32320	within the last few days
32320	34080	because of the whole other thing
34080	34920	that we've been talking about.
34920	38640	So please don't, we're not gonna talk about that right now.
38640	41600	I did talk about Rust a little bit when we,
41600	43160	yesterday because we were talking about Firecracker
43160	46520	and how I think Rust could be kind of the golden child
46520	49720	of the micro virtualization emerging,
49720	52960	but that is unrelated to what we're gonna talk about
52960	53800	right now.
53800	55320	So I'm gonna try to look away from the chat,
55320	59240	but let's try at least for the next 45 minutes
59240	61880	or 90 minutes to stay focused on one topic
61880	63840	so that we can have the speed of this YouTube video
63840	65400	be kind of to the point.
65400	68200	What is going on with containers
68200	72840	and specifically Kubernetes containers in 2022?
72840	75320	And we're about to start KubeCon on Monday.
75320	76720	So there's gonna be a lot of other new content
76720	77560	and announcements, I'm sure.
77560	81480	But this, what you're seeing on the screen right now,
81480	83720	and by the way, if you wanna join me,
83720	85440	let me post a link one more time.
85440	87640	If you wanna join me and move your pointer around
87720	90320	and participate, you can, you're welcome to do that.
90320	94720	This is a read-only Excalidraw thing.
94720	97120	I'm a huge fan of Excalidraw.
98000	100600	Full disclosure, I was gifted a membership to Excalidraw
100600	101680	from one of our community members
101680	103560	and I never look back, it's so amazing.
103560	107960	I've also been posting the PNGs of this to the Discord.
107960	110320	So if you wanna see those, you can go there.
110320	113320	But you should be able to use the URL anytime to come to it.
113320	117320	Now, this, hey, look at all these fun little arrows.
118440	123440	So what I'm gonna start by saying is a disclaimer.
123440	127440	I consider myself, I mean, I've had people call me advanced
127440	130000	in Kubernetes compared to the average Kubernetes admin
130000	132320	and I don't feel that way myself.
132320	133680	I don't know if it's imposter syndrome or what,
133680	136200	I feel like, yes, I've installed several clusters
136200	140000	and I administer one, but I still feel like
140000	141560	I'm always learning something
141560	143320	that I should have already known.
143320	147960	And this video right here is about that.
147960	150800	It's about one of the things that I,
150800	152460	every time I think I understand it,
152460	154880	I like get introduced to a new piece of the puzzle
154880	157240	and I'm like, oh, oh, so that's how that works.
157240	158520	And short of looking at the source code,
158520	160140	which I am very prepared to do,
161560	163000	this is the best that I could come up with.
163000	165040	So I say that as a disclaimer
165040	168120	because there might be some glaring mistakes in here.
168120	170880	And if they are in your YouTube, just let me have it.
170880	173080	Write it in the comments, say you got this wrong
173080	175360	and you got this wrong and you got this wrong
175360	177200	and I'll go in and I'll fix it
177200	182200	so we can have our hopefully corrective version of this.
182760	184040	And the reason I put that out there
184040	186560	is because in order for me to even come to this knowledge
186560	188200	that I am showing you right now,
188200	191960	I had to sift through a ton of bad information
191960	195740	on the internet, bad information, misuse terminology,
196640	201360	confusion, renaming, reorganization of projects
201360	202400	and all kinds of stuff.
202400	204800	It's a pain in the butt to get to this.
204800	206840	So I'm really glad that I was able to leverage
206840	210080	my research skills to get to the right thing.
210080	213200	So the overall topic for the next 45 to 90 minutes
213200	216560	is gonna be Kubernetes containers in 2022.
216560	218000	And let me ask the question.
218000	220400	First of all, why do you think you know this?
220400	222720	And please, if you have input, please let me know.
222720	226080	Why do you think understanding container engines
226080	228200	in 2022 is important?
228200	229040	Why?
229040	230960	Why is understanding container?
230960	232640	I mean, it's pretty obvious to a lot of us,
232640	235680	but what's your best way of succinctly saying that?
235680	238840	Why do you care about the container engine
238840	240680	when you're deploying Kubernetes?
240680	243680	Why do you care about Kubernetes in general?
243680	245680	Why do you care about container engines in general?
245680	247880	Does anybody have any input on that?
247880	249360	You can go ahead and throw it out there in the chat
249360	250200	if you want to.
251200	254880	But I'm gonna submit to you that the reason
254880	258200	that you should know about Kubernetes container engines
258320	263320	is because they are the very basic elements
264160	269160	of everything that you use in Kubernetes.
269560	272680	They are, Kubernetes is described
272680	274800	as a container orchestration framework.
276920	278600	So if you don't know what containers are,
278600	280640	then you're gonna be totally screwed up.
280640	285120	So we should probably talk about, yeah,
285120	286160	we should probably talk about
286160	287800	what containers are versus virtualization.
287800	289600	We talked about that a lot last time
289600	292200	and about how I think that the future,
292200	294400	in fact, we have that in a different diagram.
294400	297000	I'm just gonna refer to it really quickly.
297000	299600	In my airgapped home network yesterday,
299600	302160	we were talking about, this is my conceptual thing,
303080	305880	we were talking about Kubernetes,
305880	307840	so here's gonna be, I've decided to do
307840	310600	a TALOS cluster over here out of OptiPlex servers
310600	312800	if I can get Pixiboot to work.
312800	316840	We have open PBS for batch processes
316840	318960	and then we have a traditional
318960	320520	on-prem Kubernetes cluster here.
320520	322240	And then we have all of these VMs,
322240	326040	potentially micro VMs on our single VM server.
326040	328920	So containerization and virtualization
328920	331200	are important that you understand.
331200	332980	I'm not gonna dive into that right now.
332980	335960	So we're assuming that you actually understand
335960	337920	the difference and why they matter.
338920	340960	And so we can jump right to the point
340960	344680	where we talk about, what do we talk about
344680	345840	just about Kubernetes?
346760	349600	Okay, so, where did that come from?
349600	351600	Did somebody draw that or did I draw that?
352680	353680	Did I draw that?
353680	355400	I might have drawn that on accident.
356480	357320	I did.
358200	359640	Or did somebody else?
359640	363240	All right, so, no, Docker Compose
363240	364280	is not a part of the diagram
364280	366300	because this is Kubernetes containers.
368040	369280	Who's drawing on there?
370480	372520	Did I give somebody draw access on accident?
374040	375520	Or did I do that drawing?
376840	381600	I need to make sure that I didn't allow that.
383160	385160	It might've just been a different color.
389240	392040	Do, do, do, that should not be there.
392040	394440	I feel like something didn't get saved somehow.
395520	398280	Yeah, that should not be there either.
398280	399960	I don't know what happened there.
402680	404880	Oh my God, it reverted my whole diagram.
406160	407000	It did.
410480	412520	It did, it reverted my diagram.
413800	416640	This is a different version of the diagram I had before.
418760	421880	It's got a lot of stuff on it that wasn't there before.
422800	424200	I'm kind of worried about that,
424200	426040	but it's good enough we can go with it.
428160	430080	There might be a bug in Excalidraw.
431120	434680	So, let's go back to it.
435680	437280	That was weird.
437280	438600	That was really weird.
439800	441400	All right, so back here we go.
444080	446640	So, there are some strong,
446640	449240	there are some really strong opinions on this diagram.
450480	455480	And I challenge myself to justify those all the time.
455760	457360	If you want to challenge my opinions,
457360	458880	please do in the chat.
458880	460840	You can do it right now if you want to,
460840	462280	or in Discord if you don't want to do it
462280	463680	like right out of the gate.
463760	467120	But what I'm gonna start by saying
468520	471520	that this is Kubernetes specific.
471520	476520	So, none of this has anything to do with other stuff.
478280	482720	So like, for example, Docker Compose and any of that.
482720	487720	So, and I think it's super important especially now
488680	493440	that we start to think of containerization
493440	495560	without Kubernetes as a separate beast.
495560	499400	And let me, this entire diagram is completely focused
499400	504400	on that separation based on the container runtime interface
504880	509080	as defined by the Kubernetes project,
509080	511160	which was led by the Kubernetes project,
511160	515000	but it's not necessarily just a container thing.
515000	516400	It was something that came out
516400	517600	from the Open Container Initiative.
517600	520800	So, let's talk about all of this and why this is relevant.
520800	525080	So, this, first of all, is for orchestration
525080	529040	and my orchestration, we've primarily been Kubernetes,
529040	531600	but it could have easily just been an old man or anything.
531600	533600	So, I'm gonna try to get into this
533600	535520	by telling you a number of stories.
535520	538360	So, the first story is how did Kubernetes start?
538360	539680	So, Kubernetes, it was really quickly,
539680	542400	Kubernetes started as a way to manage Kubernetes clusters,
542400	546480	I mean, containers, and to run them in a way
546480	549920	that could be easily started up again and all that.
549920	554120	But, the original version of Kubernetes
554120	556400	depended on Docker and Docker has always been
556400	560840	a proprietary thing and that was well and good.
560840	565840	But then in 2017, they created the people behind Kubernetes
567560	569560	came together and said, you know what?
569560	572600	Kubernetes probably shouldn't be depending
572600	577600	on this ever-changing underlying deep low-level API
577840	579800	from Kubernetes, we should probably standardize that.
579840	582440	So, they created something called
582440	586680	the Open Container Initiative, or OCI,
586680	591680	and that led to the creation of the container runtime
592880	595640	interface, which is this.
595640	597720	So, the container run, CRI defines the API
597720	599520	used to talk to container engines.
599520	601920	The CRI API comes from the Open Container Initiative
601920	604880	formed in 2017 to deal with problems from Docker
604880	607000	being proprietary and non-standardized.
607000	609640	As of Kubernetes 1.24, all container run times
609640	612360	must provide a full CRI implementation.
612360	617080	And if you ever read anything about Docker shim,
617080	619920	I mean, or any of these things, that's because,
619920	621000	and I'm gonna read it right here,
621000	622800	Docker is a significant decline after failing
622800	624440	to respond to the needs of Kubernetes
624440	626200	forcing the creation of Docker shim
626200	628720	and later hitting the industry with a bait
628720	631120	and switch tactic to force enterprises to pay up.
631120	634880	So, Docker itself is in massive decline.
634880	638360	Nobody's using it, people are abandoning it like crazy.
638360	640840	Enterprises like mine, which is a huge multinational
640840	644280	corporation, have decided to basically banish Docker
644280	646200	from their entire enterprise.
646200	648540	It's in massive decline, the founder of Docker
648540	650120	has left to pursue other interests.
650120	652940	The company was already in financial peril before,
652940	656080	and it's just a matter of time before it goes under.
656080	659800	That being said, it is still holding onto
659800	663120	the maintenance of the number one container engine
663120	665560	recommended in the certification exam for Kubernetes,
665560	667640	according to the official companies that IOS site,
667640	668620	which is Container D.
668620	670160	Now, those docs are kind of old,
670160	672040	those docs were created a while ago,
672040	676120	and Creo, which is coming out of the OpenShift world,
677200	679160	has really stepped up, and it doesn't have
679160	681640	as many bugs as before, and it's extremely lightweight,
681640	683680	we're gonna talk about that in a bit,
683680	686840	and it's a full implementation of the CRI and nothing more.
687800	691000	So, Container D actually has a lot of extra bloat on it,
691000	693840	because it tried to be more,
693840	696000	and that has an advantage or a disadvantage,
696400	699640	the ultimate decision in 2022 is, in my opinion,
699640	702440	is whether you use Creo or you use Container D.
702440	705360	That's really, Kubernetes is an orchestration platform
705360	707280	for Kubernetes, right?
707280	709280	People have been saying Docker's in decline for six years.
709280	712040	Yeah, well, I can tell you that a company
712040	714360	of the significance of the one that I work for,
714360	715840	and the other ones that I've heard of,
715840	718480	who've decided not to allow Docker on the desktop ever,
718480	722680	and not to depend on Docker CE, has actually been executed.
722680	725480	I'm in the process of doing it right now.
726320	729440	You can see it, and so there's a number of reasons,
729440	732040	even most recently, so Podman desktop,
732040	735240	let's continue the story.
735240	736280	So Kubernetes got started,
736280	738080	Docker was a good player for a while,
738080	739720	and then everybody's like, no more Docker,
739720	740880	and they've been trying to get off of it,
740880	743760	but Docker had such a stranglehold on the whole industry
743760	745320	that they've been really holding onto it,
745320	747960	and all of the other players weren't really that well
747960	749480	implemented, Creo had lots of problems
749480	752480	like two, three years ago, two years ago,
752480	755800	and it's since kind of come around from what I can tell.
756720	758960	And so now everybody's like, no, we're gonna use Creo,
758960	760160	Creo is the standard thing to use,
760160	761520	you should use Creo, it's the best thing.
761520	764160	But more importantly, underneath all of that,
764160	767880	is this thing that used to be called libcontainer,
767880	769640	which is now called RunC,
769640	773400	which is the thing that actually does the container creation,
773400	778400	it's the low level go library that talks to...
779240	783440	I think it's RunC in C or go, either one,
783440	785120	but it's the thing that actually does
785120	788440	all the container creation and stuff.
788440	791880	So that's really the biggest piece of this whole puzzle.
791880	796600	And actually containerD used to use libcontainer,
796600	798520	I was an ancient blog I read,
798520	799640	used to use libcontainer,
799640	802480	and then I read someplace that I wrote this here,
804360	805880	whereas the containerD is still maintained
805880	806720	by the Docker company,
806720	810040	which requires some Docker C packages to be installed.
810040	813160	The RunC container runtime engine was once libcontainer,
813160	814640	causing some confusion when researching
814640	815920	the actual container source libraries
815920	817560	used by the container tooling.
817560	819520	So if you're like me and you like to get into
819520	821160	the low level details to see, okay,
821160	823340	which libraries are the most popular,
823340	824180	which have the most stars,
824180	825640	which are getting the most usage,
825640	828200	and what are up the chain,
828200	830400	what are the products that are using that,
830400	832960	what are the projects that are using it,
832960	836440	then it's really obvious right now in 2022
836480	838600	that anything that's not using RunC
838600	842680	is gonna be completely irrelevant in this space
842680	844520	at this moment.
844520	848000	So in my opinion, RunC is where it's at.
848000	849360	And if you're not using RunC,
849360	851560	just, I mean, technically speaking,
851560	853840	Creo, which stands for the container runtime interface
853840	856440	dash open or open shift, depending on who you ask,
856440	859040	I've read both in two different places,
859040	862800	was created up by Docker, I'm sorry, by Red Hat,
862800	866100	and is meant to just fulfill the minimum elements
866100	867420	of the container runtime interface.
867420	869540	So let's read about the container runtime interface
869540	870380	for a bit.
870380	872740	So the CRI defines the API I use
872740	875820	to talk to container engines, I talked about that.
878420	880700	Okay, so Creo CRI dash show,
880700	882420	which is either open or open shift allows you
882420	886340	to run containers directly from Kubernetes.
886340	889700	Now, it was designed for use by Kubernetes,
889700	891620	but they were very careful to not say
891620	894220	this is only for Kubernetes, right?
894220	896820	So this is a container runtime interface,
896820	899740	which defines a set of operations.
899740	903260	So you might be wondering, well, what is it really, right?
903260	905860	So it's basically just, you can go read the spec,
905860	907380	it's really long and boring,
907380	910380	but it defines a set of operations
910380	913900	which are implemented either through direct calls
913900	915980	or through API calls or whatever.
917180	920620	And the operations that must be implemented are,
921620	925820	create, start, kill, delete, and state.
925820	927420	And you can go read about these in the specification,
927420	932420	but those are the only things required by the CRI standard.
936260	938840	And that is kind of an interesting thing.
938840	941500	And I've discovered this through the hard way.
941500	944940	So there is a tool that now ships with Kubernetes
944940	947940	called CRI CTO.
947940	950540	This tool does not ship with Creo.
950580	952140	There's a dependency on it,
952140	956540	but it's designed to be a part of the Kubernetes space.
956540	958460	And as I said, so there's no,
959340	960620	like an interface and programming, yeah.
960620	965620	So there's, the Kubernetes project is very good
965780	967820	at not putting their foot down on something.
967820	968940	It's kind of annoying.
968940	972580	So like the open container initiative
972580	974340	was maybe kicked off by Kubernetes,
974340	976900	but it didn't necessarily mean all things Kubernetes.
976900	979100	So everybody's following it, right?
979100	982220	So they're all implementing the CRI,
982220	984300	no matter what, to talk to containers.
984300	986020	And to tell you the truth,
986020	988820	there is actually the hope that I think
988820	990740	that maybe BSD containers at some point
990740	992580	could implement the CRI.
992580	994580	And if they actually do that,
994580	997460	then that means all of this cloud-native hardware
997460	999860	and every software and everything could run on BSD.
1000780	1004640	And that it, there is nothing that says it has to be,
1005640	1009960	you know, LXC, you know, Linux specific containers,
1009960	1012320	as far as I can tell in the specification
1012320	1015040	of how to make the container interface work.
1015040	1019680	So it's very possible that some day we might be able
1019680	1020520	to do that.
1020520	1022120	Now there's a whole big problem
1022120	1023800	about how do you store the containers,
1023800	1025480	you know, and this little green dots here.
1025480	1027280	I mean, these green things here, you know, and that thing.
1027280	1029000	So I don't want to get into that rabbit hole,
1029000	1031400	but there is some standardization here.
1031400	1036240	So the, if you want it, so the Cree CTL thing,
1036240	1038880	which I, as I understand it gets installed by Kubernetes
1038880	1040680	packages when you're installing those things,
1040680	1044800	allows you to talk directly to,
1046360	1050320	I think it's Run-C, I don't think it is directly
1050320	1051160	to the keyboard.
1051160	1053520	I can't remember, this one I might have wrong actually.
1053520	1056160	I think that this might, does anybody know?
1056160	1058520	I think that this might actually not be here.
1058520	1062920	I think it might be to, I think it, I had some,
1062920	1064920	at one point I had it pointing to the Qubelet
1065920	1070400	and then I had it pointing to the Run-C.
1070400	1072480	I think it might actually be able to talk to both
1074160	1076480	because I do know that when the Qubelet is not running
1076480	1078400	because the Qubelet crashes, right?
1078400	1082440	You can get on CRCTL and you can run CRCTL list
1082440	1085040	and you can list all the pods on the machine,
1085040	1087240	whether or not they're in the Qubelet.
1087240	1091720	And pods are things, static pods that have been defined
1091720	1096720	on the host, that's like, that's what all of that stuff is.
1096840	1101320	And they are just defined in configuration files
1101320	1105480	that point to containers that are running via Run-C
1105480	1106560	on the machine.
1106560	1109160	So you don't have to have a Qubelet.
1109160	1111120	CRCTL I think can talk to the Qubelet,
1111120	1113720	but it goes directly through Run-C
1113720	1116540	to the containers on the machine,
1116540	1120140	but it also has knowledge of the configuration files
1120140	1121740	that the Qubelet has access to.
1121740	1124340	In fact, that is probably something I wanna add here.
1124340	1126540	Let me go ahead and add that really quick.
1126540	1129340	So I think it would be safe to add
1129340	1134340	like a configuration file icon here and stuff.
1136420	1138540	So, you know, where's that doing it?
1138540	1139380	Where am I?
1139380	1140200	I don't know.
1140200	1142780	So yeah, I think that let's do that.
1142780	1147300	So that is the, why is that the fill?
1147300	1152180	Oh, yeah, we need to do, let's do white on this.
1152180	1154420	I'm almost positive that that's true
1156460	1159420	because it does not communicate with the Qubelet.
1159420	1161060	I know it doesn't need the Qubelet to be there
1161060	1162460	because the Qubelet is not there
1162460	1163900	when you do Qubetium in it.
1168500	1172620	But it can look at the file itself.
1172660	1174740	So this would be the configuration file.
1174740	1176060	So I'll add that in there.
1177700	1179320	What's that?
1179320	1180700	Those are possible options for components.
1180700	1182100	Is that a minimum you need?
1183580	1186740	When you're talking about a Qubelet endpoint,
1186740	1188340	you need a runtime.
1188340	1192980	You need a Qubelet, a runtime engine, I should say.
1192980	1195300	You don't need, and this is another thing.
1195300	1197540	There's the terminology regarding a runtime
1197540	1199420	and that people have said it doesn't have a runtime.
1199420	1200920	I've heard that statement three times
1200920	1203520	and I restated that to some other team today
1203520	1204400	and I was wrong.
1204400	1206680	I further did further research on that
1206680	1209240	to say that Podman does not have a runtime
1209240	1210680	is a false statement.
1211880	1214320	So this is very, very frustrating
1214320	1217160	because this terminology gets misused all the time
1217160	1220040	and I have read it at least in three places
1220040	1221960	since I repeated it incorrectly.
1221960	1223560	Yeah, but what is Run C?
1225120	1226800	Run C by definition,
1226800	1229440	and I have at least three or four sources of this
1229440	1232260	is a container runtime.
1232260	1237260	So I've heard at least five people tell me incorrectly
1237400	1239520	that Podman, as far as I know,
1239520	1244440	that Podman is a container runtime
1245600	1246880	and that's not true.
1246880	1251200	And they've told me that Creo is a container engine
1251200	1252120	that doesn't have a runtime
1252120	1254780	and that I cannot overstate how wrong that is.
1255720	1257040	And I just repeated it incorrectly.
1257040	1259080	It's using completely different wrong terminology.
1259080	1261880	So let's get to terminology right here, okay?
1261880	1266120	So according to the documentation,
1266120	1269400	Creo is a container engine
1269400	1273680	that fulfills the container runtime interface.
1273680	1278280	And it does so by calling into Run C
1278280	1281160	which fulfills the CRI stuff.
1281160	1284120	Now, container D, which if it's not confusing enough
1284120	1286280	has its own component called CRI
1286280	1291280	which also fulfills this CRI and its own way.
1291600	1293760	And I've read two different blogs
1293760	1295720	that said container D doesn't use Run C
1295720	1297800	and then I read another two blogs that were newer
1297800	1299720	that said container D now uses Run C
1299720	1301240	and then I put it together
1301240	1302920	that the other ones were saying
1302920	1305160	that it used container lib or lib container.
1305160	1307640	And then I actually read another blog that said,
1307640	1310880	actually Run C is lib container,
1310880	1313800	it got modernized and that's its new name.
1313840	1318200	So I just saved you like two hours of research
1318200	1320980	to get that down if that turns out to be true
1320980	1322760	because that was so frustrating.
1322760	1325600	I was like, what the hell are we talking about here?
1325600	1328960	So as of this moment, knock on wood,
1328960	1330640	I think it's safe to say
1330640	1334060	that all of the major container engines
1334060	1339060	that are used by Kubernetes all use Run C.
1339360	1341480	There is no other competitor to this.
1342320	1346280	And so anyway, this is the problem with blogging, right?
1346280	1347720	As it gets all outdated and everything.
1347720	1350760	So I was actually really happy to hear that
1350760	1351960	because that simplified my graph
1351960	1353600	because before I had to have like another piece here
1353600	1354840	or something, right?
1354840	1356280	There was another thing that fulfilled the CRI
1356280	1358680	and I found out, oh, it's just Run C, right?
1358680	1363680	So is Nerd CTL only for container D?
1365160	1366820	Show me that in writing someplace.
1367700	1371660	Show me that Nerd CTL can't talk to CRIO.
1372740	1373880	If you could show me that in writing,
1373880	1375180	I'd be happy to change it.
1377500	1380820	Cause I think that's what that is, right?
1380820	1384660	You can use CTR or that, right?
1384660	1386580	I think that's right.
1386580	1388900	Frankly, I didn't do any research on Nerd CTL at all.
1388900	1390180	I've just heard people talking about it.
1390180	1391460	I don't plan on using it at all.
1391460	1392780	I just let it put it there.
1392780	1394780	So if you know for a fact
1394780	1396020	that that only talks to container D
1396060	1397740	please let me know.
1397740	1399660	There is a CTR command that's documented
1399660	1401580	in the Talos documentation.
1401580	1403740	It's also documented in the QADM,
1404820	1407380	a NIT documentation on the official community site.
1407380	1409660	So in fact, container D is still, as I said,
1409660	1412260	is still front and center when it comes to certification.
1412260	1413100	It doesn't have anything
1413100	1416340	on the certification preparation materials for CRIO at all.
1417900	1420980	This is the Nerd CTL Docker compatible CLI for container D.
1422820	1424660	Docker compatible CLI for container D.
1424660	1426740	Okay, well, that actually really helps.
1426740	1427580	Thank you very much.
1427580	1429740	That's why I'm doing this.
1429740	1430700	All right.
1430700	1431620	Yeah, I didn't even go there.
1431620	1432620	I didn't know I didn't read anything
1432620	1434820	about the Nerd CTL at all, little or nothing.
1434820	1435900	I just put it on here
1435900	1438100	because people keep recommending it.
1439340	1441620	So that's good to know, that's good to know.
1441620	1445660	So container D is still a really strong container
1445660	1447860	but let me tell you the reason I'm not using it.
1447860	1449180	Container D is still maintained
1449180	1450980	by the Docker company officially
1450980	1453740	and requires some Docker CE packages
1453740	1454860	to be installed causing confusion.
1454860	1456380	I did this last year.
1456380	1459900	Last year, I installed container D as my runtime engine
1459900	1462500	and it forces you to do,
1462500	1466300	as soon as you pack, install or whatever you wanna do,
1466300	1469100	I had to install Docker CE in order to use container D.
1469100	1470540	And I was like, what the hell?
1470540	1472540	Because there were packages from it.
1472540	1474740	And they have never, as far as I know,
1474740	1475620	they haven't separated them.
1475620	1478060	So when you read the documentation for installing container D
1478060	1481140	because it's the same thing that's used in Docker now,
1481140	1483720	you'll read all this conflicting information
1483720	1484920	about how to install it.
1484920	1486160	It turns out that I had to,
1486160	1488400	yes, I had to follow these installation instructions
1488400	1492240	and then I had to go in and change all of the defaults
1492240	1493920	that were installed by Docker CE
1493920	1495520	so that they would use only container D.
1495520	1498060	And that step was a pain in the butt.
1498060	1500680	It took me like an hour to do it, felt like a year
1500680	1502480	but it took me like an hour to do it.
1504560	1506360	And container D filled the same role.
1507480	1509320	Well, I know that's what we're trying to get at.
1509320	1512240	So the way of JS libraries is if I feel like
1512240	1513600	the next best thing has come out every week,
1514520	1516760	yeah, well, the effect of it is is every time they do that,
1516760	1517800	they also complicate things.
1517800	1520120	But also, I mean, the abstraction of the interfaces,
1520120	1522400	the CNI as well, which is the networking part of all this.
1522400	1523960	We haven't even got that yet.
1523960	1526760	That completely complicates it even more.
1526760	1530420	So, you have to know about these things.
1530420	1532720	And then we got micro virtualization
1532720	1533880	coming on the scene too.
1533880	1537480	So anyway, so this is my attempt to simplify this
1537480	1538760	and make decisions for myself
1538760	1541840	and to stand by my recommendations for other people.
1542800	1545720	This is something that's very rare to find in our industry.
1545720	1546920	There's a lot of people that will tell you
1546920	1548440	all the possible ways to do things
1548440	1550160	and they'll have very few opinions.
1550160	1552440	And I'm gonna tell you why I chose to do these things.
1552440	1554000	I mean, Tal was, of course, all of this stuff
1554000	1554840	is irrelevant, right?
1554840	1557080	Because it's all black box, it's all hidden from you.
1557080	1559520	But there's other considerations for that.
1559520	1562640	So if you're installing your own on-prem Kubernetes,
1562640	1565000	you need to know about these choices.
1566240	1569960	And so, I mean, I still think it's extremely confusing
1569960	1574240	that the name Podman has nothing to do with pods at all.
1576360	1578560	Why did they name it Podman?
1578560	1580480	I need to drink after that statement.
1585440	1587320	Red Hat, can you please change the name?
1587320	1589320	That'll just confuse us all even more.
1590880	1593800	There's nothing to do with the Kubernetes pod
1593800	1597680	in the program Podman, not at all.
1597680	1601240	There is not a single reference to pods at all.
1601240	1602760	It just happens to be misnamed.
1603880	1606240	It has pods, but they're different from Kubernetes.
1606240	1607640	Oh, that's nice to know.
1609360	1611080	Okay, all right, I'm gonna update my,
1611080	1613160	I gotta make my thing more accurate then.
1614560	1618640	Actually, Podman,
1619640	1621760	as if it wasn't confusing enough,
1621760	1624880	Podman does have Kubernetes,
1624880	1629160	does have pods,
1629160	1630820	have pods,
1632400	1634840	just not Kubernetes pods.
1637440	1639000	That makes it even worse.
1639920	1642360	That makes it even worse.
1643960	1648600	I mean, the foundational concept is the same, of course it is,
1648600	1650840	but gotta help you if you think you're gonna be able
1650840	1653480	to go check all your pods on an input with Podman.
1653560	1655760	If you install Podman on your endpoint,
1655760	1658080	this is another thing that's really dangerous,
1658080	1659040	because I did it.
1661600	1663760	I'm about to tell you another story of something I did
1663760	1666800	that I learned from that I'm gonna save you some time on.
1666800	1670120	So it's like, so I was going through,
1670120	1672240	I was going through doing my Kubernetes installation
1672240	1675440	and I needed to get a container in order to use Vault.
1676960	1678600	No, in order to use
1679560	1683080	theCUBE VIP, what is it?
1683080	1684840	Virtual IP, CUBE VIP.
1684840	1686200	In order to install CUBE VIP,
1686200	1688320	which is a load balancer, right?
1688320	1692200	I had to have a running Docker instance,
1692200	1694720	a container engine on my endpoint,
1694720	1697600	but I wanted to install it on the control plane
1697600	1700040	and my control plane, I had Creo on there.
1700040	1702800	So I'm gonna tell you my sad story, okay?
1702800	1704520	So don't be me.
1704520	1705880	I was like, okay, I picked Creo,
1705880	1707200	I picked the lightweight engine, everything.
1707200	1710200	And that's where I learned this important lesson.
1710200	1713160	Now, just because something is CRI compatible
1713160	1715840	does not mean it's going to have run or exec
1715840	1717560	or any of the other stuff that you expect
1717560	1719520	when you're gonna use Docker or Potman
1719520	1721640	or any of these higher level tools.
1721640	1722560	So what happened?
1722560	1727200	I went in there and the documentation for CUBE VIP says,
1727200	1730640	either use CTR to install the container
1730640	1731680	that then you can then run,
1731680	1733920	which will then install the software.
1733920	1736440	You have to have a container engine running
1736440	1741440	and Docker quotes to even install this static pod,
1742640	1744560	which makes no sense at all.
1744560	1746320	But that's, in fact, I have soured
1746320	1749200	on that entire CUBE VIP thing now so much
1749200	1750880	by those, because of those decisions.
1750880	1753240	And there's a huge thread on their support channel
1753240	1755280	about how confusing this is for new users
1755280	1756200	and all this other stuff.
1756200	1758640	And now the fact that Creo is like the leading container engine
1758640	1760080	has further complicated the issue
1760080	1761440	and they don't even have anything there.
1761440	1766120	In fact, everybody's pushing for the CUBE VIP project
1766120	1770160	to just put examples of the config files for static pods,
1770160	1772080	which just have config files in the API
1772080	1775400	to just leave that and just let people figure it out
1775400	1777560	because they don't need to install this container runtime.
1777560	1779160	So because of all of this crap,
1779160	1781160	I mean, I lost two hours on this shit.
1781160	1782800	So I'm saving you some time here.
1782800	1786840	So I was like, okay, I'm following the instructions
1786840	1789440	and it says that I need to install,
1791000	1793400	it says I need to install a Docker engine
1793400	1795200	or something like that, a container engine.
1795280	1797280	And then I needed to run it
1797280	1798960	as a way to bootstrap the manifest system.
1798960	1800160	Yeah, I agree.
1800160	1805160	And so it either lists CTR or Docker, that's it.
1805920	1807720	CTR or Docker.
1807720	1809280	So what did I do?
1809280	1811280	I assumed, well, okay, I'll try,
1811280	1812680	I didn't have CTR because I didn't have
1812680	1813880	a container runtime engine.
1813880	1816480	So I made a bunch of bad guesses.
1816480	1819240	And the first bad guess I made was,
1819240	1822640	oh, I'll just use Cree CTL because it has a list command.
1822640	1824440	It shows me all of my containers.
1824480	1825640	It shows me all of my pods
1825640	1826880	and I don't even have to have a running queue,
1826880	1827800	but this will be awesome.
1827800	1832800	I'm sure it's Docker compatible and not yet, we will.
1833040	1834920	And so I went to go see if it would work
1834920	1836960	and it didn't work, obviously, why?
1836960	1839880	Because Cree CTL only deals with pods.
1840960	1843080	And pods, yeah, sure.
1843080	1843920	We had some people tell,
1843920	1844800	oh, it's fine, it does containers.
1844800	1847840	No, it doesn't do containers unless they're a pod.
1847840	1849760	So if you have written all the configuration file
1849760	1853200	to turn a container that's on the system into a pod,
1853200	1854600	yeah, it's happy to play with that
1854600	1856320	and it'll do it and you can run it.
1856320	1859360	You can start it, you can't run it, you have to start it
1859360	1861880	because it only implements the minimum necessary
1861880	1864220	for CRR, which is create, start, kill, delete.
1864220	1865240	There's no run.
1866280	1867840	Okay, so that was the first mistake I made.
1867840	1868880	I was like, I cannot do this.
1868880	1871280	And then I had a whole bunch of people on the stream
1871280	1873200	telling me, yes you can, you just have to turn it into a pod.
1873200	1876680	I'm like, I just wanna run a stupid install script here.
1876680	1878920	Why did they not give us an installer?
1878920	1880560	Why did they not give us an install script?
1880560	1882000	Why didn't they give us config files?
1882000	1883560	And everybody came up with opinions that are like,
1883560	1885640	oh, blah, blah, blah, and I'm like, look, I'm the noob here.
1885640	1886760	I just wanna use this thing.
1886760	1888160	And I about threw it all out
1888160	1891400	because just because of the bad installation steps
1891400	1892640	because of all these complications
1892640	1894000	that they didn't even think about.
1894000	1895520	Yeah, create your YAML and then you're good.
1895520	1896360	You just copy and paste it.
1896360	1898680	But it doesn't say that in the documentation at all.
1898680	1900000	It says your best way to do this
1900000	1901680	is just go run the container and do this thing.
1901680	1903880	They could have just provided like a bash script
1903880	1905880	and been done with it or any of these things.
1905880	1907160	They didn't do any of that.
1907160	1910160	And that frustration was enough to almost send me
1910160	1912200	down the HA proxy path,
1912200	1914240	which is completely separate from all of this stuff,
1914240	1915640	which runs under its own daemon,
1915640	1917440	which I would probably run as a VM
1917440	1920160	completely outside of Kubernetes if I ended up doing that,
1920160	1921000	which is a load balance.
1921000	1924320	It's a different topic, but the accuracy,
1924320	1925280	I think they should.
1925280	1926720	I think they should, a lot of people agree with it.
1926720	1927560	They should do that.
1927560	1929360	So anyway, I mean, I lost hours on that.
1929360	1931560	And so did everybody else that was watching this.
1931560	1934080	And I'm saving you the time by looking at this annoying,
1934080	1934960	don't do that.
1934960	1937680	And the reason, I actually, it was so annoyed by it
1937680	1939840	that I actually read the entire,
1939840	1941960	I briefly scanned, I should say,
1941960	1947120	the entire CRI specification to see why this command
1947120	1947960	isn't in there.
1947960	1949360	And that was when I uncovered that only create,
1949360	1951720	start, kill, and delete are truly supported.
1951720	1954460	They're the only operations required by the CRI,
1954460	1955880	by the entire specification.
1955880	1959600	So I was like, okay, so mistake number two that I did,
1959600	1960760	mistake number two.
1960760	1963740	I said, okay, well, if I need a container runtime engine
1963740	1965120	over there and I need to get to these containers,
1965120	1966320	I need to be able to do the,
1966320	1967520	I need to follow the instructions,
1967520	1969760	which are Docker run, right?
1969760	1971120	Or CTR run.
1971120	1973040	I'm like, huh, well, there's no Docker, there's no CTR.
1973040	1974240	What's my next best guess?
1974240	1975080	Podman.
1975080	1976440	So I mean, I was like, well,
1976440	1978360	Podman is supposed to work with everything, right?
1978360	1981180	It's CRI, it's got CRI built into it.
1981180	1982880	I'm sure that will work.
1982880	1983720	Wrong.
1983720	1987000	So I installed Podman onto the cube controller,
1987000	1990280	the Kubernetes plane, so that for one reason only,
1990280	1994000	just so that I could run the container that would then,
1994000	1998840	you know, start and install my cube, my QVIP, right?
1998840	2001760	And it worked, it worked, it installed it just fine.
2001760	2003880	But then I later on, I started noticing
2004840	2008120	that what the Podman was showing me
2008120	2011780	was completely different from what Cree CTL was showing me.
2012680	2015280	And I noticed that they were looking at different sockets
2015280	2017440	or different services and things completely entirely.
2017440	2020880	And then I realized a very, very important lesson.
2020880	2024480	And I cannot overemphasize this enough.
2024480	2029480	Do not mix your Creo container engines
2030720	2035160	on a Kubernetes node with any other high level
2035160	2037860	runtime management tool.
2037860	2041680	Just don't do it, because you cannot be sure
2041680	2045040	that they're gonna use the same thing underneath.
2045040	2047280	In fact, the very nature of the engine makes it
2047280	2049720	so that they have radically different ways
2049720	2050560	of implementing things.
2050560	2052560	Container D has its whole socket thing.
2052560	2054620	Creo has got its own service thing.
2055960	2057880	And you know what I'm saying?
2057880	2062880	It's like there's just a ton of reasons not to do that
2063720	2067120	because the way that containers are implemented
2067120	2070960	by the engine, even if the underlying LXC stuff
2070960	2073840	is the same, because that's what this is all into, right?
2073840	2077800	But that middleware between the person talking
2077800	2079320	to the container for, or the thing talking
2079320	2081200	to the container, person or service,
2081200	2085640	and the underlying LXC execution of the containers,
2085640	2088680	the stuff in between there can radically differ.
2088680	2092240	And this has been the whole area of the fight
2092240	2093760	between Creo and Container D.
2093760	2095360	Container D is insecure.
2095360	2097020	I mean, they fixed a lot of it now,
2097020	2100760	but Creo does not have, get privileged,
2100760	2102840	it doesn't have a socket that's running its route.
2102840	2106600	All the things that Docker just got beat up over
2106600	2108480	for just doing poorly.
2108520	2111240	Inefficiently, poorly, and insecurely,
2111240	2113280	Docker just really messed up.
2113280	2114920	And they just never intended to fix it.
2114920	2117240	And so Container D has tried to kind of fix
2117240	2118560	all those things over the years and say,
2118560	2120080	well, yeah, okay, we did that wrong.
2120080	2121600	If you wanna do it this other way, do it this other way,
2121600	2122880	but it's not the default, blah, blah, blah.
2122880	2124160	It's a pain in the ass.
2124160	2126200	The bottom line is that the stuff
2126200	2128440	in this middle layer here, right?
2128440	2131060	The stuff right here and this middle layer
2131060	2133440	is so different depending on the stuff
2133440	2135920	in the top layer that gets installed
2135920	2140040	that you just don't wanna mix the two.
2140040	2141640	Do not cross the streams.
2141640	2143800	If you do, you're gonna get burned.
2143800	2147280	And I'm gonna read the statement down here
2147280	2148120	that goes with this.
2148120	2150960	I'm gonna zoom in on this a little bit and read this.
2150960	2155200	But this summation down here with the explosion
2155200	2159280	is my conclusion about this.
2159280	2160800	So with Creo containers,
2161800	2164400	the Creo containers must be put into pods
2164400	2167240	to run them at all, all right?
2167240	2169360	So this is considered good
2169360	2171480	because using a container runtime for anything
2171480	2174840	but Kubernetes on a node, on a Kubernetes node
2174840	2177060	is considered bad practice.
2177060	2180800	In fact, when I suggested on the stream,
2180800	2182200	while I was doing this,
2182200	2184160	that our company regularly does this
2184160	2186160	because they don't allow users to have their own Docker
2186160	2188100	and they regularly tell people
2188100	2189720	if you need to run Docker for anything,
2189720	2191520	just go get on one of the head nodes
2191520	2194320	and run Docker straight up on it
2194320	2197040	and just reuse the Docker container engine on there.
2197040	2199880	That's also running the control plane containers
2199880	2200840	and pods on there.
2201760	2205080	That is like a really bad offense.
2205080	2207760	It's not the kind of thing you're gonna get fired for yet
2207760	2209400	but when I mentioned that on the stream
2209400	2210240	that people were doing it,
2210240	2212520	people were laughing their asses off.
2212520	2214120	They were freaking the fuck out.
2214120	2217280	They could not believe that any company
2217280	2218960	would ever allow that
2218960	2220440	because it's not only is it insecure
2220440	2222560	but it's just asking to blow up.
2223440	2226040	It is, it's asking to blow up.
2226040	2228620	It's absolutely horrible to do that.
2228620	2231020	Now, I tried to make the case wrongly
2231020	2233000	that well, what if you only have one machine
2233000	2233840	then you have to decide
2233840	2236920	and maybe you wanna share both of them over there.
2236920	2237920	You know what I mean?
2237920	2240120	And the fact of the matter is
2240120	2244360	thou shalt never ever use your Kubernetes nodes,
2244360	2246280	the container engine on your Kubernetes nodes
2246320	2248400	for anything but Kubernetes.
2250720	2253200	Here's some VMs on ES6, of course.
2253200	2255920	So yeah, right.
2255920	2258640	And so let me just continue reading this.
2258640	2261400	So it's considered very bad practice today.
2261400	2264440	It is also a bad practice to install Podman
2264440	2267960	or any container utility on a node
2267960	2272240	because the engine used may not coincide.
2272240	2275920	And it may, it'll still use LXC down on the bottom.
2275920	2279160	It has to, but the stuff in between there
2279160	2281240	is totally different, whether it uses a service
2281240	2282640	or a daemon or a container.
2282640	2286600	So it's not gonna be what you would expect, right?
2286600	2289120	And so as you become familiar with the internals
2289120	2293600	of how, you know, Creo uses its thing, which is a service
2293600	2296240	then you know that how to do that
2296240	2298680	but a container uses a socket, which is totally different.
2298680	2302000	It may be that there's multiple options for both of them
2302600	2307480	but the point is, is that you can't be sure
2307480	2311120	that you're apt install or DNF install Podman
2311120	2314280	is actually going to do the same thing
2314280	2319280	that you used when you installed your container runtime engine
2319280	2320680	which is a totally, whether it's containerity
2320680	2321640	or it's the other thing.
2321640	2323280	So do not mix the two.
2323280	2326240	If you mix the two, you're just asking for pain and hurt
2326240	2329800	even though you think it might be saving something, it's not.
2329840	2332080	It is also bad practice itself on that, okay.
2332080	2335360	As a rule of thumb, use kreectl for pods,
2335360	2336400	containers on a note.
2336400	2339760	And I said the word pod there on purpose, right?
2339760	2344460	Kreectl cannot directly access containers, period.
2344460	2345800	It doesn't have to go to kubelet.
2345800	2347040	That's why I drew that little picture
2347040	2348400	of a configuration file.
2348400	2351720	So if you have static pods on the machine,
2351720	2354360	it can talk directly to those pods
2354360	2356340	but it has to have knowledge of those pods.
2356340	2358320	That means it has to see the configuration file
2358320	2359880	to know how to wrap up that container
2359880	2362920	and put it into a pod and then access it using a pod.
2364560	2367440	And of course, you can't use kubectl
2367440	2369280	on the endpoint without kubelet.
2369280	2371600	That has to have the API as far as I know.
2371600	2375680	So as a rule of thumb, use kreectl for pods,
2375680	2378520	containers on a note, everything on a note,
2380520	2381520	for everything on a note.
2381520	2384840	And podman, despite the horribly confusing name
2384880	2388520	or nerdctl for non-kubernetes containers.
2390000	2394040	So containers are still very relevant.
2394040	2395440	So people were asking me about Docker compose,
2395440	2396920	why that isn't on here and stuff.
2396920	2400760	Because Docker compose and these top-level things,
2403240	2405080	these top-level things up here,
2405080	2407040	they're nice and good and all
2407040	2412040	but they're not really, these things up here,
2412120	2417120	these things do not have to be associated with Kubernetes.
2418320	2421080	But that is an entirely different approach to containers.
2421080	2424720	And I really wanna emphasize that in 2022,
2424720	2427400	the best thing you can do for yourself as a beginner
2427400	2431200	or as a veteran is to think of Kubernetes containers
2431200	2434360	differently than everything else.
2435640	2438280	Because if you do, you'll save yourself.
2438280	2440600	You say, well, they're all just containers.
2440600	2442880	And yeah, okay, they're containers
2442880	2446640	at the lowest, lowest, lowest, lowest, lowest, lowest level.
2446640	2448200	They're all using LXC.
2448200	2449560	Okay, that's true.
2449560	2453880	But everything in between there and you
2453880	2457160	is totally different depending on whether you're doing it
2457160	2460680	for Kubernetes or you're doing it for Docker compose.
2460680	2464560	And to save yourself a lot of pain and suffering,
2464560	2466440	I cannot overstate this enough
2466440	2469000	because I went through hours of it.
2469000	2474000	That you need to separate those concepts in your brain.
2474480	2476680	And should you learn Docker compose?
2476680	2479040	Yeah, should you learn Docker swarm?
2479040	2480520	I don't know, maybe not.
2480520	2482640	But Docker compose is not bad.
2482640	2485040	And you can do podman compose too, right?
2485040	2487520	But those are things that are for a totally different approach.
2487520	2491480	And frankly, we need to have, in fact,
2491480	2494560	from now on I'm gonna refer to them as Kubernetes containers
2494560	2497520	and probably Docker compose containers.
2498520	2500920	Because those, to me, that's the biggest separation, right?
2500920	2502960	If you're using Docker compose
2504680	2506240	or you're using podman compose or whatever,
2506240	2508560	but Docker, as soon as you were Docker and compose,
2508560	2511760	you're like, oh, we're talking about that.
2511760	2513640	You're talking about all the container wonderfulness
2513640	2515400	that doesn't have anything to do with Kubernetes.
2515400	2517200	But when you start talking about Kubernetes containers,
2517200	2519600	you're talking about a different beast altogether,
2519600	2521800	even though some of these things have similarities
2521800	2523640	at certain points in the architecture.
2524600	2527040	Whew, now that seems like a lot to say.
2528160	2531640	But I really feel like I finally understand it.
2531640	2534560	And I just had to capture that really quickly into a video.
2534560	2536640	That's all I have for this specific video.
2538040	2541400	And hopefully that will save you some pain and suffering
2541400	2545400	as you go about your Kubernetes admin installations
2545400	2549400	and all of the other stuff that you might end up wanting to do.
2549400	2551360	This diagram is available.
2551360	2553560	Anybody to come see, I'll put it in the Discord.
2553560	2558560	And I'll be using this diagram to make sense of my world
2560400	2563720	as I go about the installation of my,
2563720	2564720	the next thing I'm gonna be doing,
2564720	2568040	I'm gonna be installing these clusters.
2568040	2570560	And I, did we save this already?
2570560	2573160	This, I think it saves automatically actually.
2573160	2574160	Supposed to anyway.
2575480	2578600	But so yeah, so this, the next thing I'm gonna be doing,
2578600	2580360	which I may or may not do today,
2580360	2583360	is I'll be installing some other Kubernetes clusters
2583360	2586840	over here and we're gonna go back to using QBDM for that.
2586840	2591320	I do need to solve all so I can get some PKI root CA stuff.
2591320	2593080	And I need to get my head around
2593080	2595160	how I'm gonna manage VMs on this machine
2595160	2598160	because I'm gonna be running a Cordeon S&D,
2598160	2600760	a Key Cloak and Vault and all of that stuff
2600760	2603880	before I go forth with my QBDM installation,
2603880	2608120	which is probably not gonna happen tonight or even tomorrow,
2608120	2611080	but I am going out of town for next week.
2612080	2613960	Yeah, and you like Vault, yeah.
2613960	2617280	So just to give you an overview of what's next
2617280	2618880	and why this might relate.
2620800	2621840	Oh, we use build a lot.
2621840	2626840	Yeah, so builda is actually built into Podman.
2626920	2628400	That's another thing I like about Podman
2628400	2629640	is the build is built into,
2629640	2630960	and builda is just,
2630960	2633760	it's all it does is just build the images, right?
2633760	2635560	And escopio is another good one
2635560	2639560	that will transfer containers between registries
2639560	2640560	and stuff like that.
2641760	2643560	So yeah, just to finish out the idea
2643560	2644960	about where this is going.
2646600	2647560	I keep drawing on here
2647560	2650000	because I'm still got that selected.
2652280	2655680	So the next steps are probably,
2655680	2657160	so as I got my whole Vlan all set up,
2657160	2658560	I'm so happy about that.
2658560	2660800	There's a video on that if you wanna watch that.
2661760	2664800	That we're gonna go ahead and,
2664800	2665800	where does Istio fit?
2665800	2667480	Istio is just a service mesh.
2668480	2672080	Yeah, so we are gonna do Istio,
2672080	2674840	but it's gonna be like the last thing.
2674840	2676040	The main thing Istio gives you,
2676040	2676880	it gives you lots of things,
2676880	2677800	but the main thing it gives you
2677800	2680560	is like virtual machine, virtual servers
2680560	2683880	that have domain names that get a little balance of stuff.
2683880	2684720	Yeah.
2687240	2689400	Yeah, we still have to pick a CNI and all that.
2689400	2691920	So before, so a couple of changes
2691920	2693760	just to update everybody who hasn't watched.
2693760	2696340	So this is gonna be the TALIS cluster over here.
2696380	2698220	Right now, I'm doing some testing offline
2698220	2700820	to see if I can TFTP boot
2700820	2703700	one of the Dell Optuplex machines that I already have.
2703700	2706860	There is some problems with the Pixie boot
2706860	2709580	and it requires you to push F11 to do the booting.
2709580	2713300	So that does annoy me a lot actually.
2715260	2718900	And because I can't, I don't know.
2718900	2723460	I'm really tempted to just throw TALIS out for now.
2723460	2725380	As soon as I read that TALIS cannot do,
2725420	2726380	I mean, this is another topic.
2726380	2727620	I should talk about this, not right now,
2727620	2731740	but when I found out that TALIS cannot,
2731740	2734500	that these machines cannot do true Pixie boot
2734500	2737460	that any time you, TALIS requires
2737460	2738860	being able to reboot the machine.
2738860	2741620	And I have not gotten around.
2741620	2744180	I need to ask somebody from Cedaro or TALIS
2744180	2748180	as like, what happens about that, right?
2748180	2751140	So I want a totally, you know,
2751140	2753700	hands off installation and management of TALIS.
2753700	2756220	That's the thing that they keep promising you.
2756220	2758460	But if every time I reconfigure a server,
2758460	2761020	I have to go in and touch every server and reboot them.
2761020	2763300	I don't, it's not even, it's not, it's a non-starter.
2763300	2765380	I don't even want to do that.
2765380	2766700	Thank you for that.
2766700	2769900	So, so I, I'm, you know what?
2769900	2771380	I'm just gonna make a decision.
2771380	2772780	I'm gonna throw these out.
2774060	2776860	I'm gonna throw TALIS out of the environment for now.
2776860	2779660	For now, I got too much other stuff to deploy.
2780260	2785260	And we will go with that.
2786300	2788100	It might be that I do PBS for this.
2788100	2791820	We don't know, the key HTTP from IC.
2791820	2793780	Yeah, did you know, did you know that,
2793780	2794860	did you hear that we found out that
2794860	2797260	IC DHCP is supported on OpenSense?
2797260	2798900	That's the, that's the DHCP it uses.
2798900	2800420	So you can go in there and edit it.
2800420	2802500	The problem is, is you got to save your files someplace
2802500	2805140	because if OpenSense, if you update the firmware,
2805140	2806900	it'll throw out your entire configuration.
2806900	2808780	So you got to, it will back it up for you.
2808860	2811260	But it's something that's kind of, I was,
2811260	2814300	we, I found out, is it, yeah.
2815900	2817940	I think the key DHCP server is probably gonna be the one
2817940	2819100	that I'm gonna install.
2820940	2824900	I am going to install a DHCP server on my internal VLAN,
2824900	2829340	but I don't know how much of a priority it is right away
2830300	2832900	for years, very, very fantastic, very good stuff.
2834700	2837460	So, I mean, as far as YouTube goes,
2838460	2839820	I'm gonna go ahead and end that video here.
2839820	2843300	So just as a follow-up, so, you know,
2843300	2848300	have fun with that, with the container runtime engine,
2850060	2851060	maybe play around with it.
2851060	2853860	The last thing I will say, for a very long time,
2853860	2856820	I've been, I was anti-podman and I was wrong.
2856820	2859380	I was wrong for a number of reasons,
2859380	2861180	but the most important reason that I was wrong,
2861180	2862820	I was mostly wrong because I was looking at how
2862820	2864280	podman manages a container.
2864280	2867220	For example, podman does a lot of magic
2867220	2868060	to the container.
2868060	2870980	For example, it injects the system CTL into any pod
2872100	2875940	or stuff that enables system CTL to be more specific
2875940	2878660	because they make a big case at Red Hat
2878660	2883180	that container should be able to simulate machines,
2883180	2885300	you know, and be basically miniature VMs,
2885300	2887600	which I completely disagree with.
2887600	2889220	I think micro, you know, use the virtual machine
2889220	2891220	for a virtual machine and don't use podman for that.
2891220	2892980	It was annoying though, like a year and a half ago
2892980	2894900	when I was doing the boost and we were using containers
2894900	2897260	because I couldn't simulate the installation
2897260	2899400	and management of services the same way you would
2899400	2901460	on an actual Linux virtual machine.
2901460	2903740	And that's one of the main reasons that we switched over
2903740	2906260	to this when you're doing like system CTL, you know,
2906260	2909940	restart, you know, whatever, HTTPD or NGINX or whatever,
2909940	2912940	those kinds of commands can't be done in a container
2912940	2914260	and they can't be practiced in a container.
2914260	2915900	But if you just need access to a terminal
2915900	2917940	to practice bash and stuff, great.
2917940	2921140	But if you want to practice systems administration
2921140	2923860	and on whatever, I think you need a virtual machine
2923860	2926900	which prompted the change to use virtual machines
2926900	2928860	in the boost in 2022.
2928860	2932100	So in 2023, however, I'm strongly, well,
2932100	2936660	I already decided that we're gonna be doing all four ways,
2936660	2939380	all five ways of getting Linux, which I've mentioned before.
2939380	2941260	And one of those ways is podman.
2941260	2944620	And the reason I'm even saying about this now
2944620	2949620	is that it's six-caliber, you guys wanna copy again.
2950620	2955620	So as I've said, the podman, now I've tested it
2964140	2966860	in three different machines, I've tested on Mac, Linux
2966860	2971260	and Windows, the podman desktop installation process
2971260	2976100	is as easy as desktop, Docker desktop used to be.
2976100	2977660	I need a lot of commands.
2977660	2979540	The command thing wasn't even working till yesterday.
2979540	2981540	So I'll update all of that, I need lots of things.
2981540	2986540	I also need help and time and a clean room.
2987580	2992580	Okay, so we will be providing instructions
2994180	2998180	in the boost about how to get podman up
2999620	3002380	and running on your desktop.
3002380	3004820	But I just wanna kind of conclude this YouTube video
3004820	3009220	with that, if you haven't tried podman out yet
3009220	3012300	on the desktop, whatever your desktop is, you might try it.
3012300	3014340	Something else I'm super interested in
3014340	3018380	is that podman actually chose to use Kimu and KVM,
3018380	3021180	which is exactly what Docker desktop does, by the way.
3021180	3023220	Okay, here's a fun fact that you might not understand.
3023220	3025420	I'm gonna actually sip some wine for effect.
3028740	3030020	Here it comes.
3030020	3035020	You cannot run a container on anything but Linux.
3035260	3038260	Someone explain that while I take another sip of my wine.
3043260	3048260	You cannot run a container,
3048260	3051140	if you wanna get really pedantic with your friends,
3051140	3054740	pick you up, you cannot run a container
3054740	3057180	on anything but Linux.
3059180	3060860	A modern container, a Docker container,
3060860	3062300	if you wanna put the word Docker in front of it,
3062660	3065060	you cannot run a Docker container on anything but Linux.
3065060	3068060	BSD has jails, they are not Docker containers.
3068060	3070380	So if you wanna use the word that people will recognize,
3070380	3072380	the statement, you cannot run Docker.
3072380	3075380	But I run it on my Mac all the time, you know, you don't.
3077380	3080380	You do not run containers on your Mac.
3080380	3083380	You do not run containers on your Windows machine.
3083380	3086380	You don't even run containers in WSL.
3086460	3088460	On Mac, they use a compatibility layer.
3088460	3091460	And on, you know what the compatibility layer is?
3091460	3096460	Kimu, Docker desktop and Podman desktop.
3096460	3101460	And I assume now Rancher desktop all use a minimal virtual machine
3101460	3106460	that uses Kimu in order to emulate Linux.
3106460	3108460	And that's how they do it.
3108460	3111460	You don't even run containers in WSL.
3111460	3113460	On Mac, they use a compatibility layer.
3113540	3116540	Linux, and that's how they do it.
3116540	3117540	They all do it.
3117540	3119540	And so I was actually looking for the internals of the Podman.
3119540	3120540	I'm like, what are they doing here?
3120540	3122540	It turns out they completely straight up copied
3122540	3124540	what Docker desktop was doing.
3124540	3126540	Docker desktop is this nice, happy, you know,
3126540	3128540	electron front end to everything.
3128540	3130540	But under the hood, it's running Kimu.
3130540	3132540	And I think Zen, it's not Zen, no, it's not Zen,
3132540	3134540	because I couldn't run it on the hardware.
3134540	3136540	Containers need C groups for Linux kernel, I think.
3136540	3141540	Yeah, LXC, C groups and LXC are what modern Docker containers
3141540	3143540	are defined to be.
3143540	3147540	So you cannot have a Docker container without Linux.
3147540	3149540	So next time you run that on Windows or whatever.
3149540	3152540	But there's something else I want you to consider here.
3152540	3155540	It used to be that I would like complain people,
3155540	3158540	or I would like, well, God, I got to install a whole virtual machine.
3158540	3161540	In fact, Podman was kind of slow to do Docker desktop.
3161540	3162540	You know why?
3162540	3164540	Because there are pedantic engineers over at Red Hat,
3164540	3166540	and they're like, well, you got to have Linux anyway.
3166540	3169540	Why don't you just install your own VM and just do it that way?
3172540	3173540	Am I wrong?
3173540	3177540	That was Red Hat's position in my mind up till like last year,
3177540	3179540	or within the last three months.
3179540	3182540	Before that, they were like, you know what?
3182540	3186540	Podman's like, we don't need to do stupid desktop stuff.
3186540	3188540	Nobody needs that.
3190540	3195540	I mean, everybody knows that containers have to have Linux anyway.
3195540	3197540	They'll figure it out, and then they'll install a VM,
3197540	3199540	and then they'll put Linux on there,
3199540	3202540	and then they'll do Docker as God intended by installing it on Linux
3202540	3204540	using Podman install.
3204540	3207540	They can do apt install Podman or DNF install Podman or whatever they want.
3210540	3216540	And so Red Hat missed the whole desktop market by saying,
3216540	3219540	just do it that way, and then what happened?
3219540	3223540	And then last year, Docker famously said,
3223540	3227540	psych, you'll have to pay us now if you're a certain size,
3227540	3230540	which is pretty much everybody using it.
3230540	3233540	And Docker perked their ears up, and Rancher perked their ears up,
3233540	3238540	and they're like, oh crap, there's no free desktop option anymore.
3238540	3240540	People will stop using containers and be annoyed by it,
3240540	3243540	and they'll stop using our other products.
3243540	3244540	We got to fix this.
3244540	3247540	And so I imagine somebody over at Red Hat,
3247540	3250540	somebody over at Red Hat's like, damn, we got to get on this.
3250540	3256540	So then Rancher desktop and Podman desktop
3256540	3259540	kind of seem like they're in a race to see who can make the best
3259540	3261540	desktop container option.
3261540	3263540	And now we have Podman.
3263540	3266540	Last week we had, I tested it all out, and Podman works wonderfully
3266540	3267540	on everything.
3267540	3269540	It's really weird that it uses WSL instead of WSL2.
3269540	3270540	I think that's very interesting.
3270540	3272540	Probably because of the hypervisor dependency.
3272540	3273540	But I don't know.
3273540	3274540	I don't know.
3278540	3280540	You know, our instrument windows is on the Linux containers.
3280540	3281540	Yes, you can.
3281540	3282540	That's pretty cool to have that, isn't it?
3282540	3283540	Anyway.
3287540	3291540	So we're virtual machines in disguise behind a poorly optimized
3291540	3292540	electron interface.
3292540	3295540	I know, exactly.
3295540	3300540	I mean, you know, in retrospect, I got to tell you,
3300540	3306540	it actually has improved my position on what I think of Red Hat.
3306540	3309540	Because Red Hat's like, no, we're not going to do that.
3309540	3313540	We're not going to bundle a bunch of really beautiful garbage.
3313540	3316540	We're not going to put lipstick on this turd and get people to
3316540	3319540	use this virtual machine that's going to screw up.
3319540	3321540	I mean, Docker did it because they wanted the user experience
3321540	3322540	to be nice and easy.
3322540	3324540	That's what made Docker famous.
3324540	3326540	Because the Linux LXC people forever have been saying,
3326540	3327540	you can do containers.
3327540	3329540	And Docker comes along and says, well, yeah, but the CLI sucks.
3329540	3330540	There's no way to do it.
3330540	3331540	The average person can't do it.
3331540	3333540	So we're going to make this nice, pretty happy command line
3333540	3334540	thing called Docker.
3334540	3338540	And guess who gets all the credit?
3338540	3339540	Now they're called Docker containers.
3339540	3341540	They're not called Linux containers.
3341540	3345540	Everybody who worked on the LXC project and C groups,
3345540	3347540	and all the people who made containers happen,
3347540	3350540	which have been around for more than two decades,
3350540	3353540	about a decade, I think, probably something like 2011 or something.
3353540	3356540	They're like just smacking their foreheads.
3356540	3357540	And they're like, what the hell?
3357540	3360540	Along comes somebody who cares about their users.
3360540	3362540	And they're like, no, we're going to make a nice, happy front
3362540	3367540	and interface to this thing, to the great anger of all the people
3367540	3369540	who were using containers the hard way.
3369540	3371540	And they get all their credit.
3371540	3373540	And then they decided to do this bait and switch on top
3373540	3375540	of everything else, which just makes the Linux community
3375540	3379540	fucking hate them because they're, you know,
3379540	3382540	and that part of the Linux community would have been,
3382540	3384540	in my estimation, would have been the Red Hat.
3384540	3387540	Red Hat is more a member of that technical part
3387540	3390540	of the Linux community than Docker has ever been.
3390540	3392540	And I mean, there's good people with Docker.
3392540	3394540	I'm not attacking any specific individuals,
3394540	3398540	but as a company, they've had really poor decisions.
3398540	3400540	And so they won't call it good 3C groups.
3400540	3401540	No, they won't.
3401540	3403540	I call them containers and container images.
3403540	3405540	I don't say Docker, nobody does anymore.
3405540	3408540	Docker is more like canonical in that sense.
3408540	3411540	Docker has the user's considerations in the forefront
3411540	3414540	and they will violate good back-end architecture
3414540	3416540	to make it easier for the user.
3416540	3418540	And I think that's a good thing.
3418540	3419540	I do.
3419540	3421540	I think that we need to, it's a combination of both, right?
3421540	3424540	And it took them doing that to get Podman
3425540	3428540	to have a decent desktop offering.
3428540	3430540	And I'm really glad they did that.
3430540	3434540	So it's a big, you know, it's a big dynamic going on
3434540	3435540	all the time.
3435540	3437540	And many of the things I've said have probably offended
3437540	3439540	many people very seriously here.
3439540	3440540	I'm sorry.
3440540	3443540	I largely don't care because I feel like
3443540	3445540	we need more opinions in this industry.
3445540	3447540	There are just too many choices.
3447540	3450540	And we need more best practice opinions.
3450540	3452540	And we need to justify those opinions and say,
3452540	3455540	hey, if you meet this criteria, this is what you should do.
3455540	3457540	And we should have the courage to start saying those things
3457540	3460540	and then fixing them when something better comes along.
3460540	3463540	Otherwise, we're just going to be just floundering around
3463540	3468540	like we have like for years and we still will continue to do that.
3468540	3470540	Both the Docker Project and KhanCon have always gone their way
3470540	3472540	out of the aspect of show typical signs.
3472540	3474540	Oh, right.
3474540	3476540	Yes.
3476540	3477540	Yeah.
3477540	3478540	But not invented here.
3478540	3479540	They do that.
3479540	3480540	Yeah.
3480540	3483540	I mean, that's just a tech problem in general.
3483540	3488540	But at the same time, I do believe, to their credit,
3488540	3493540	that Docker and KhanCon have been more focused on user experience
3493540	3495540	than the technology.
3495540	3498540	And that's not a bad thing.
3498540	3499540	That part of it's not bad.
3499540	3502540	So I don't want to Docker to integrate better with system
3502540	3504540	B, but Docker just already said, nah.
3504540	3505540	Yeah.
3505540	3506540	Docker's been doing that all along.
3506540	3508540	The whole system B stuff.
3508540	3513540	The system B integration and the, you know,
3513540	3516540	they were trying to stand their ground and say,
3516540	3518540	we want to have an independent socket.
3518540	3521540	And I actually agree with that.
3521540	3523540	I mean, for some of the stuff that I was doing,
3523540	3525540	I was able to, you can't do Docker in a Docker.
3525540	3526540	You know that, right?
3526540	3528540	You can't do Podman and Podman.
3528540	3530540	It's impossible.
3530540	3534540	Before you could just remount the socket and you could have,
3534540	3537540	you could have a Docker running inside a Docker container,
3537540	3539540	use the same host container image.
3539540	3543540	Now, some people would call that an absolute Frankenstein's
3543540	3546540	monster of problems.
3546540	3551540	But yeah, the idea is it's just bad,
3551540	3554540	but it doesn't matter because it was very practical.
3554540	3555540	I use that all the time.
3555540	3558540	I use that all the time because I didn't have any Linux on my system
3558540	3562540	before I switched back over to VMs because, you know,
3562540	3564540	and by the way, the VM is the clear way to do that, right?
3564540	3567540	If you install a Linux VM, then that's not a problem.
3567540	3569540	All your stuff lives in the VM.
3569540	3571540	You know, you're good to go.
3571540	3573540	Assuming you can get a virtual machine on your machine.
3573540	3578540	So I think there's going to be a strong resurgence of VMs in the world.
3578540	3582540	But yeah, but the Docker and Docker thing was always kind of a hack.
3582540	3586540	And by the way, it was actually using pods.
3586540	3588540	There's Kubernetes pods and stuff that would use the Docker
3588540	3591540	and Docker thing, which is just like such a security violation.
3591540	3593540	It's outrageous.
3593540	3596540	So that's why people are owning it.
3596540	3598540	But I did think it was useful for pipelines.
3598540	3599540	That's why I used it.
3599540	3600540	I did.
3600540	3601540	I used it for that for a long time.
3601540	3605540	And there is no alternative in the Podman landscape.
3605540	3607540	The Creo landscape, Podman landscape is not there
3607540	3609540	because it's insecure to them.
3609540	3612540	So not enough for VMs.
3612540	3613540	Yeah.
3613540	3614540	And if you don't have enough for VMs,
3614540	3616540	then you got to do the Docker and Docker thing.
3616540	3620540	And so that was, again, it was a very practical thing,
3620540	3622540	but it probably wasn't a good thing.
3622540	3624540	For developers, it was nice.
3624540	3630540	But for all the other reasons, probably not with a VM.
3630540	3632540	Yeah.
3632540	3636540	Not everybody has the option of running non-windows on their desktops.
3636540	3639540	I just read another blog from a guy who was super annoyed
3639540	3643540	that he had to run windows on his desktop at work.
3643540	3645540	And it was all the ways he got around it.
3645540	3649540	But yeah.
3650540	3652540	Hmm.
3652540	3653540	And ruin the nodes quite often.
3653540	3657540	You've seen DIND pipelines in the wild.
3657540	3658540	Devs have probably used Docker.
3658540	3659540	I'm not messing up.
3659540	3661540	Oh my God.
3661540	3665540	DIND was always used in CI as tools to simplify stuff.
3665540	3667540	So it's not that bad keeping things simple.
3667540	3668540	I think that's right.
3668540	3670540	And that's one of the reasons I think that DIND,
3670540	3672540	it's a huge debate.
3672540	3674540	It's very good wine.
3674540	3676540	It's also the end of the wine.
3676540	3678540	We don't have any more.
3679540	3680540	Hmm.
3680540	3681540	But it's the weekend.
3681540	3683540	And I hope everybody, you know, I'm going to,
3683540	3686540	I'll say cheers to everybody as I go get more wine.
3686540	3688540	I'm going to go ahead and end the YouTube videos here.
3688540	3690540	So I'm trying to keep the YouTube videos shorter.
3690540	3693540	I apologize for how long winded I am.
3693540	3698540	And I do hope that this doesn't scare you away from all this technology.
3698540	3700540	I do find it extremely exciting.
3700540	3704540	I think the movement in the industry is in the right direction, actually.
3704540	3708540	All of this movement might make CI CD more annoying
3708540	3710540	and developer processes more annoying,
3710540	3714540	but it's going to make for a more secure container orchestration
3714540	3717540	as we adopt these practices.
3717540	3719540	And it's going to, actually, it's going to ferret out
3719540	3721540	a bunch of bad practices.
3721540	3724540	So for example, putting Creo as your container engine on your nodes,
3724540	3725540	including your control plane,
3725540	3728540	is automatically going to shut down any user who's using
3728540	3732540	that control plane head node for Docker.
3732540	3733540	And their process is going to break.
3733540	3737540	And they probably should break because they shouldn't be mixing the two
3737540	3738540	as we talked about.
3738540	3742540	So hopefully this will be something that you can consider as you go forward.
3742540	3745540	I don't know if I'm going to do another actual video tonight.
3745540	3748540	I'm probably just going to be shooting the breeze on Twitch.
3748540	3752540	And as a general rule, though, going forward,
3752540	3754540	I'm going to try to start each one of my streams
3754540	3758540	with a YouTube video quality content that's very organized
3758540	3760540	and about a specific thing.
3760540	3763540	And then we'll stop the video.
3763540	3769540	And then we'll just do silly stuff for the rest of the night on Twitch.
3769540	3773540	So we can start on a good note and get some value out of it.
3773540	3777540	And then we can do the crazy stuff that I tend to do.
3777540	3779540	All right, so if you want to come and join us for the crazy stuff,
3779540	3781540	come on over to Twitch.
3781540	3785540	Otherwise, thank you for stopping by whether you're on Twitch or YouTube.
