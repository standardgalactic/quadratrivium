So, I just want to make a quick YouTube video about this because it seems to be coming up
and it's a really important topic and I don't know how to make it into a question so I mean
the question I originally was going to have was, what did I just do, you know like I don't
know.
What are contextual rooted command trees?
And this is my new term.
We thought, Milesi's not here, he's one of our community members who told me the idea
that people were referring to this by saying fluid and fluid APIs or fluid command line
APIs and I have not found any reference for that yet.
So, Milesi if you're out there, let me know and put a comment in there, does anybody on
YouTube who knows about this who's got an actual term for this?
So I'm going to describe what it is and I'm going to use my best way of describing it
which the community and I have recently just kind of come up with, you know I'm a little
bit out of the idea but and I'm going to tell you what it is and then we're going to come
up with a name for it because this is really becoming spectacularly popular and so we're
seeing, so let me just summarize what's happening, let me tell you a little story, so you know
if you go back to the Boomer days, you know a lot of good things came from the Boomers,
the Internet, you know C, Unix, bunch of other stuff but one of the horrible things that
came from the Boomer generation is stuff like this, GPG, this is the epitome of Boomer
get-opt hell and I can sit here and hold my finger down and I can, you can see all of
the potential options for like, you know good 60 seconds there and all of those things
have dash dash and everything else right and it's absolutely horrible and in fact there
is other programs that still use this, Cube CTL being one of them, so I mean they do have
kind of a top level of contextual thing but beyond that right you're like, you know it
does kind of give you contextual stuff a little bit right so but you still have like a ton
of options to deal with and it becomes so unwieldy that you know you just, you can't do it, you
have these top level commands and then but beyond that you're you're relegated to command
hell with dashes okay so so so if you go back to the 70s when people had you know constraints
on memory and everything this thing called get-opt was invented right and get-opt is
the thing that from which all of the modern command lines that were not modern but you
know semi-modern command lines have used it's the idea of having a switch with a dash or
two dashes and there's varying and there's competing things and this entire hellish world
that we live in that's that where everything has to have dashes in front of it is finally
dying and I can I can I just tell you how happy I am that this is dying so you know I have
a mantra don't get mad get busy and I was so annoyed by this entire thing and I built
bonsai and this question isn't about bonsai I'll talk about that another day but if you
go to mygithub.com slash rbxrob so bonsai is my my way of dealing with this and it basically
makes very elegant contextual rooted command hierarchies or rooted command trees and so
instead of having all of these dashes like my z command you just do z dot tab tab and
you get a number of composite command trees I call them bonsai trees or bonsai branches
and by the way you can import them very easily just by with one import command from go which
is one of the reasons I love go and and then you can also create alternative pass through
the rooted node graph which is the data structure we're using here and this bonsai bonsai is
something that came about for me completely independent without knowing any of these other
products that are doing the same thing so let me give you an example so if I go to you
tab tab for unique I tap again and I get all these variations on on uniqueness right and
you know I can type hex oops let's do iso sec iso sec you know like oh my god that's
like too much to type well you can create a shortcut through that if you want to that's
just you can create shortcut commands that that that zoom right down to the bottom level
the contextual thing and then you deal with switches and stuff you know like whether you
want your output in yaml and things like that all of those things you might actually be
able to justify a switch for are now stateful and and so that means like if I have a command
that that needs to say okay I prefer yaml as my output then we have like var and we have
a thing called var and we have a thing called config and you can save those things in a stateful
contextual way that sticks into your home directory and that's all built in and those
are you don't have to put that into your monoliths but you can do so those are and by the way
this approach that I do with bonsai is is elsewhere so let me let me give you an example
so even Qubectl has a hint of this right so Qubectl tab tab you get all these options
right but if you go Qube config right when Qubectl config like wow look at all these
other commands right and so then we're going to do available commands wait what happened
all right so get get context so Qubectl is kind of doing the same thing right but so
but it still has dash dash current and all these are the things that you have to add
right but I didn't want to bring this up I'm only I only have one context right now if
you're if you're so this is an I this is an example of stateful contexts entering into
the mainstream and it's not just here you're having more and more commands that that are
expecting they're providing like a default context or state and I mean this this is
revolutionary when it comes to like you know what we used to do the idea that your that
a specific command like Qubectl or anything would have state that's stored in your home
directory that you can then change rather than dealing with this switch every time I
mean because the answer to this up to this moment has been right a bash script or something
like that that's got all of the particular you know options that you want in there and
or an alias or something right I mean let me give you an example so so so so LS right
so LS my LS command is actually LS dash H color equals auto color equals auto if LS had
been written to be a stateful you know command then these kind of things would automatically
be stored in a in a sort of standard way within the home directory of the user rather than
as an alias right with these crazy ass you know human readable thing like and if we actually
did this kind of thing more frequently we would have the ability to transfer our preferences
in a single file or directory dot under dog configure dot local or cash in like that so
this is I'm think I'm thankful to say that this is where the universe is going thank
God is that we are allowing state to be added to even things as granular as LS rather than
create these aliases and stuff and we see that in Cube CTO when we do Cube CTO config
you know we could change the context and all our commands are based on that namespace or
based on that preference or but unfortunately we can't set our default output format that
would be fantastic wouldn't it how many of you would like to change your output format
for Cube CTO to default to wide probably a lot of you or to YAML or to JSON you probably
want for this for the for the duration of the session to change that instead of having
use that fucking switch on every single time you go back into your history and go edit
it no amount of Z shell or fish you know assistance on the command line is going to overcome
the bad design that forces you to put that switch on every fucking command line every
time if that had been turned into a stateful configuration parameter I'm sorry I'm swear
I normally don't do that on YouTube but this stuff gets me very angry yeah pain would have
a config if if if we if we you know dare to give ourselves permission to give all commands
state and context and rooted you know command trees the world would become a better place
and I'm again I'm very grateful to report that this is already sneaking into our world
let me show you a few examples so the first one I know of is get the first substantial
program to violate the one one thing you know do one thing well idea was get and and ironically
get still fulfills that get is just a front end there's actually a ton of commands in
here so you can get add I mean it used to be multiple commands right so the old days
of doing one thing well and and I mean that still applies that that that refactoring into
one thing well but but in you know 2022 we've allowed ourselves to say look we have memory
we have this space it's okay to put these one thing well things inside of monoliths that
travel around and that's what bonsai is by the way and and then that way we know we have
the portability of it all but we bring all of that functionality with us so and I mean
busybox did this very thing and you guys ever seen busybox every single command from the
from unix all of all the base units commands we've been this is not new right it's been
used it's been it's been multicoll binaries before but busybox busy you know let me do
a Docker thing so Docker you some people might not know this actually I have podman on here
let me see if this doesn't work a podman dash it dash dash run I mean how how annoying is
it that I have to type all that right isn't it I mean I am running podman so frequently
with these parameters that I would want that to be my default context but I can't do that
right it drives me crazy why can't I tell podman or docker that by default I want to remove
the things after I run them I have to type dash dash rm every fucking time because it has no sense
of state it should it should and I might actually redo a podman that has it that way but unfortunately
no so it still has a command so I'm going to do a run and I just want to show you alpine
which is the most common with the most popular Unix distro okay fine a Docker just to get it out
of here whoops run what am I doing wrong exec alpine right I cannot remember my Docker commands
right now what am I doing wrong people I'm doing something wrong
is it does it have to be before the flags okay thank you for helping me make my case further
I mean how annoying is that I'm glad that happened on the stream alive because that's
exactly what I'm talking about the flags are part of the commands sometimes they're not though
there has been several commands where that does not matter where they appear in the command line
right but some do yeah whatever I mean it's super annoying it's super annoying because I mean how
many times have I written this command I still can't remember it I should have been able to just
tab my way through the thing and figure out the syntax if it had had a you know a human friendly
you know rooted command tree that I would I would already know what to do
right and if one of those commands has helped then I could I could say okay well this particular
command has state and I can set the state variables for that thing such as remove yourself every time
you know whatever so so so here we are on alpine let me just show you what I'm talking about so if
you go to this slash bin and you ls that shell you'll notice right away that there is a bunch of
stuff that's sim linked right if you go look at the same stuff on busybox it's hard links
it's actually kind of interesting you want to see the difference they're all the same file they're
all the same this is called a multicoll binary and this is a very early version probably earliest
version of a contextual command interface so they maintained you know the one thing good
kind of mantra from unix and from the philosophy but then they hit it from everybody by making all
of them individual commands and those commands are all in a single binary that binary fits on
a floppy disk on a 1.5 megabyte floppy disk that's why busybox was curated and and you can go back
on a lot of people don't know this but you can go let's do the same thing let's run busybox this time
assuming I can get the command right and you just go into bin here and you'll see
hard links this time so the way you know it's a hard link because you got 401 hard links here
they're all exactly the same size binary and they all look like they're actually separate no they're
all hard links and yeah and so yeah this is this is the modern era though so the modern era started
with busybox really but these days you know the closest thing I mean git was the first one
git said you know Torvald said you know we got memory I'm going to put all of the commands
that again now git is almost its own you know thing and strictly speaking these command lines
that we're using for git or whatever are domain specific languages and you know what if we had
treated them like that from the beginning we would have a much better command line world
today and I am happy to report that the world has woken up and decided that creating things that are
naturally intuitive like git has been I mean I mean obviously there's a lot of selections here
but but let me give you another example so you can go to any one of these things right
but let me give you another really good example ip the ip command right same thing it's a it's a
it's a you want to call it a model it you want to call it a command with subcommands whatever you
want to call it it has that and you can like kind of keep going right you can do address okay I got
that and I go address tab tab oh look I got I can do address change delete flush and help
I really really really love this command because I had nothing to do with this command nothing to
do with it I did not even know about it and it has the the creators the brilliant people
behind the ip command have created exactly what I created in bonsai to the letter to the letter
now they they do allow dashes and stuff like that and but the fact that they put the help command
after the command that help is a subcommand of the main command is exactly what I did was z
so I do z bonsai right so I do z is the um my help is way better than that but if I do z unique
right everything in bonsai comes with an optional embedded help command so I can type help and I get
a man page and this has been structured exactly like the man pages and you get this help documentation
for free with bonsai it automatically detects the subcommands as they have been uh composed
into your monolith and at every level in the commands tree at every level of the you know the
command level uh of your of your commentary you you get a different help command that is
specific to the available commands under that section automatically and I built that into
bonsai so the fact that the ip people have actually done the same thing and shows to put help there
instead of dash h which is probably also going to work nope good for you I love the ip whoever
designed the ip command you are brilliant you're a brilliant wonderful people thank you so much for
seat for days and and you know there's a lot of other commands so net plan is one I know people
don't like net plan but people are starting to wake up and we have git you know a cube ctl is
getting better I think it'll eventually come around and create you know this this kind of interface
but I just I'm just super happy with that now unfortunately uh you know that in order to get
color here I still couldn't set state so guess what I had to do you're gonna see it aren't you
I can't set state so the thing the thing that the people doing these command line interfaces have
not yet fully accepted is a way to standardize context and so my term for this and this is
going to be the term I'm going to propagate going forward is contextual rooted command trees
contextual rooted command trees or stateful rooted command trees
stateful contextual the point is that you should be able to set the state of your switches
and and do it one at a time so I'm going to go do this one I'm going to go do another one
and it's not that most of the time when you want dash c on a thing you always want dash c on a thing
right and like for cube ctl how many times have you just wanted the namespace to be for a single
command during a cube ctl session pretty much never right and so you are forced to go up and
redo that exact same command line and rebuild it every time because there's no command to set the
default namespace you can in the context but then you have to go through that convoluted
context switching crap because because no one is really standardized or thought about a simplified
way to do it now I have in bonsai so in bonsai you can actually do var and var is a generic way
to capture variables that are stored statefully in a file for everything
that uses for everything in the monolith and I really wish that that we could standardize on
this so and it so the default way to do this is home art of x robbie goes into your home directory
I don't know can you see that my help description is actually specific to my account
you know why because I'm running the help command from the command
so I have dynamic help that detects your current situation that means all that stateful
stuff that we're also adding guess what you can leverage that in your help documentation so when
you go man or instead of doing man rides you go z whatever help it can actually in interrogate
the local cache or the very variables they've already set and it will display them in your help
I mean these are things that that are like next level when it comes to thinking about these these
these type of like really extremely human friendly interfaces and and and I you know just
rather than getting angry about it I went ahead and build it I would like to see these things
incorporated into more things but being able to standardize on dot cache z vars I mean you throw
away there usually the cache oh yeah this is actually probably one of the best use cases for
go but you know I mean let me just I sounds like I'm selling bounds bonsai here that's not how
what I started on this but bonsai was you know of course my solution to this but I have a z
monolith that that is here just to show you what I'm talking about so um you know and just to show
you how easy it is to do this all I these are all of the the bonsai branches I call them which are
just commands with their own trees and I just import them and they're here that's the end of it
I can create my own uh dynamic template variables for my help I can set flags I can create you know
if I want to do a multi-call I can do that um here is a here is a parent command so this is
this is a command is different I mean you have to get into bonsai I'll do a whole thing I'm on
bonsai I'm gonna write a book about bonsai actually the reason I'm doing all this keg stuff
it's got a lot of books to write and one of the books I want to write is is is bonsai the book
about bonsai the bonsai guide because I think and here's here's the shortcuts here's all my
shortcuts through the command tree that goes into the monolith so I can bypass some things right
and and stuff um and here it says uh and there's I mean here's an example of the help template
which uses the most amazing templating system in the world the go templating system is by far
the most powerful that's ever been created uh it's so easy to create extensive extensible
uh syntax for your templates everything anyway so that's it the rest of this stuff is all pulled
in from these other things including local stuff so the env go this is a sub-command I just wrote
really quickly I was like hey I just want to print my environment variables and I you know
just couldn't come out of stuff I I don't want to get too much into bonsai I just wanted to show
you know I wrote some tmux stuff I'm in the middle of converting all of my
bash scripts into a single z monolith that I can copy onto any target system
including things that running any shell on planet earth because because this is a binary it doesn't
care how it's being executed at all and one of the things I haven't added yet is I want to add
completion so that if you I don't have this yet but if I were right now if I just do z enter it
shows me the help but I am going to add so if you if you wish to you can set up the default shell
and when you do z enter what it will do is it'll it'll put you into a tab completion terminal mode
that's supported on any on any shell whatsoever including DOS so if and when we get that because
that library has already been written I mean gh already uses it right so the gh tool already
uses something to this effect so the create repo create you're seeing this more and more it has
this whole terminal interactive it's like a little sort of it's not truly a command line it's an
interactive terminal session but but but for places that don't have completion I want to
be able to just go z enter and then enter a command and hit tab and have it find the right
command on anything anything anything whatsoever because because the completion will then be built
into the monolith itself in a very tiny like micro shell if you will so that that haven't built that
yet but that that's coming and and to me that's that's where we're going you know we we have these
these other things here you know I have my pomo command is in here and pomo start and there's
my pomo up in the corner z pomo stop anyway so that that's what I I don't know what should we call
them should we call them stateful or contextual what should what should we call them I think we
should call them stateful rooted commandries uh that's what I think I think they're stateful
I think stateful is the right word because because they do have state I mean you know
the a subcommand might you know it switches and stuff might be changed now I also have a config
command which is for you know that throws you into a config yaml file and lets you change your
configuration for your local system for your local z bonzai command and that stuff's not meant to be
temporary cache and that's the kind of thing that you would copy around with you in your dot files
but the vars the vars uh you know bonzai tree those are all optional by the way you don't have to
put those into your bonzai tree if you don't want but if you do put the vars uh the vars into your
bonzai tree you get stuff under dot cache but then if you go onto another system and you don't take
your cache with you you just get the defaults for all your your commands uh unless you you know and
that's it's up to you to kind of decide whether you want to implement uh your bonzai tree command
using config uh so which you know can use a centralized config by the way one config for an
entire monolith um and because you know you're able to like drill down and versus um you know having
having cached variables that are that are that are there now you know the amount of time it takes
to read from those variables and all that stuff is so infinitesimally small that it's it's not an
issue it's not an issue it might have been an issue in 1976 but it's you know it's not anymore
so so that's that's what that's about um that's really all I have to say about that so I I encourage
people to um to play around and if you discover a a stateful root of node tree uh root of command
some somewhere um let me know and we can you know put these together I'd like I'd really
like to kind of see how the world is waking up and throwing get out out thank god uh you know
dashes be damned uh you know I the other great thing about this is that these interfaces that
we're building can easily be spoken if you pick words that are real if you I've tested this on my
on my pixel my google pixel with natural language so I mean people people are already using command
lines we have like sales people using command lines because they're using uh slack right so
somebody writes a slack bot or a twitch bot and you know maybe they put an exclamation point in
front of it but they put a bot in there and then the bot is is processing natural you know
is processing these messages all the time and those messages are real so so the more realistic
and and human that we make our interfaces is simpler we make them without all the dashes you
can never do this with get off right but but if we actually move to a stateful root of node tree
command kind of situation all of our commands on the command line can be directly implemented
as bot commands with no modification and now you can go into your favorite chat app and slack
or a twitch or whatever and you can speak your commands to the thing and that is really the
future now you don't need a full blown machine learning algorithm to to process every possible
thing here you just need the definition of a domain specific language so that you can tell
your bot or your system or whatever about it and then do it alexa's already doing this
series already doing this they already have gotten in fact if you go out if you've ever written on
alexa uh conversational command i was really into conversational ui for a long time about four years
ago i created a thing called skeezix and and sabah which is conversational assistant virtual agent
but i that's i haven't gotten anywhere without since then but i do believe that the future is
going to be conversational interfaces so the more we can start using stateful rooted tree
node tree commands the the closer we're going to get to conversational interactions with our
computer i systems to those you know sci-fi's in the 1970s that we saw where people were talking
to the computers and telling them what to do until we create conversation until we get to the point
where we're getting rid of get ops i can run an ip command by speaking it into my command line if i
had a voice interface i can do it i can't do that with gpg imagine that example i i want to create a
new gpg key right or i want to encrypt something with gpg can i speak the command to my computer
at this moment and have it work no but i could if i wanted to look up the current ip address for
for a specific ethernet configuration assuming my conversational interface let me spell out you
know individual um ethernet ids which would be great if some of the conversation the uis would
start to allow that if they would have a keyword that said spell blah blah blah or whatever we
could actually start doing that and then then we can start using our fancy microphones to write code
or to interact with these systems and we will not ever be able to do that until the world wakes up
as it has been and starts using stateful rooted node node node command trees or if you wish just
natural language command line uis which is what it is i mean i kind of think that's probably the
better way to say it we should start being we should start to use natural language command
line uis and maybe that means that we put you know we make certain words optional maybe maybe we do
maybe we say if somebody puts an article in there or something that we you know they don't have to
talk like a robot to interact with their command line conversational ui maybe maybe we we we use
regular expressions actually that's that's what schesix and kava were they actually i i wrote an
app it's i got to go find it again but i started writing a conversational ui that used a regular
expression to match any of the root node tree commands and now that i think about it that's
probably something we could add to bonsai um the only problem with that is that uh right now the
the way that the um the node tree works you have to have a single unique you know thing through it
but if we could ever create a way to to add helper words that are ignored you know the or whatever
without going full-blown machine learning algorithm model you know or we could we could actually start
speaking in very very natural ways to our to our to our monoliths and do things like that
so and i i look forward to the day but i mean just being able to tab through something to me is like
is like plenty plenty good for now because i don't like reading about all the help and everything i
think you should be able to to immediately understand what your options are on on any command just by
hitting tab i mean if you can't do that if you have to go slog through a man page uh i mean you
should be able to see boom and see all your options and go hmm this one looks really good and you
know to cobra's cobra's credit i will tell them this i they you know if you tab tab through this
um wait that's not the one i'm thinking of um which is the one that does it there's there's uh
there's there's one oh that's not it there's there's one that uh will actually give you a
summary like a very long-winded description oh no gh there is it'll give you a long-winded description
it runs it into more and everything when you do this right um and i do find that kind of interesting
that it that it does that um the reason it's the way it's doing that is it's actually running a shell
script uh in order to get you that and that's that's a bonsai thing and that that's very
shell dependent and they have different versions for each shell and i i feel like that's nice and all
but i it's not it's definitely not portable so um but but i want to show this because it does show
how you could break down you know the the description of of what each of the things are but
i don't even think you really need that i i think you just need to be able to just do z tab tab um
and you should be able to get to look at um you know all of these different things to go
hmm well what does that one about right and then just do path help and you'll you can see the help
okay path doesn't have that path must be a uh a shortcut to something else and i actually don't
know which one it is it is a shortcut i probably should have a shortcuts command or something
that is that is something that i want to look at so i mean help here will show me
i think actually my help does show my shortcuts it does there it goes uh it does yay i did something
good so path path thing is env get path so if i were to do z env uh help and that would give me
that and you can actually do help help help help on being repressed um so so yeah you can actually
the help command uh has a bunch of sub commands and it does its own parsing of the thing so i mean
that's all that's all i have for this youtube video but but i encourage you as i said to to
consider you know making human friendly interfaces at the end of the day that's what we're talking
about and human friendly these days means conversational and that in this case means you
know a stateful commentary uh and and i'm going to just shorten it i'm going to say stateful
commentaries uh and there we made up a new term let me know what you think in the comments below
am i youtubey enough yet
