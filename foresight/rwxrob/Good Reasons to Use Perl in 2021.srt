1
00:00:00,000 --> 00:00:20,160
This desert is awesome.

2
00:00:20,160 --> 00:00:23,800
That's how I feel like about doing this topic.

3
00:00:23,800 --> 00:00:33,000
I feel like I feel like the better approach to people who criticize Pearl is to just like

4
00:00:33,000 --> 00:00:45,600
chill and drink my coffee and go, mm-hmm, mm-hmm, mm-hmm, yeah, yeah, yeah, mm-hmm,

5
00:00:45,600 --> 00:00:58,120
Are you done yet? Yep, are you done? Mm-hmm. Oh, right, right, right. Yeah, when was the last time you used Pearl?

6
00:00:58,120 --> 00:01:06,200
Oh, oh, yeah. Oh, did you? What was that? What was that? Regular expression? Did you have trouble with that?

7
00:01:06,200 --> 00:01:14,320
What's a regular expression? Oh, um, how do I put this?

8
00:01:14,320 --> 00:01:20,680
Yeah, what was the language you were using instead that you said you prefer to use?

9
00:01:20,680 --> 00:01:25,280
Oh, do you think that that language is the only language that has regular expressions?

10
00:01:25,280 --> 00:01:33,960
Okay, mm, all right. How much coding in Chinese do you do for Chinese strings that use the Unicode?

11
00:01:33,960 --> 00:01:36,760
Oh, none. Right, okay.

12
00:01:36,760 --> 00:01:47,160
Well, yeah. Well, I'm sure you're going to have a great day. I really am. I'm sure you're going to have a great day.

13
00:01:47,160 --> 00:02:03,160
I got stuff to do, though. So if it's okay with you, I'm going to go up on my camel here and we'll get you done while you're doing whatever you do.

14
00:02:03,160 --> 00:02:16,480
I'm sure it's fun. I couldn't resist. I couldn't resist. I know I'm an old pedantic, grumpy asshole. My Rust video proves it.

15
00:02:16,480 --> 00:02:32,760
I know it. I'm just going to own it. And one of the things that makes me the most annoyed of all is people criticizing Pearl for being a read only language

16
00:02:32,760 --> 00:02:43,040
or writing it and not being able to understand it or not knowing what it's for. Or, oh, that's only a Boomer language.

17
00:02:43,040 --> 00:02:52,880
You know what else is a Boomer language? C. You know what else is Boomer technology? Linux. These are old things.

18
00:02:52,880 --> 00:03:01,320
You still use them every day and you love it. Just because something, you know, has been around a while doesn't mean you throw it out and start using something new.

19
00:03:01,320 --> 00:03:17,280
And that's not just, I'm not just saying it because I'm an old guy. I'm saying it because I recently had a massive sort of come to tech Jesus moment where I just was like, why did I ever throw Pearl out?

20
00:03:17,280 --> 00:03:26,080
Some 12 years ago, 13 years ago, I threw Pearl out on the floor and I said, no, I'm going to do everything in Python from now on because that's what the world is doing.

21
00:03:26,080 --> 00:03:32,440
I didn't bother to ask myself why. I just listened to everybody else and said, well, this is obviously the way to do it. If I want to get a job, I better do it in Python.

22
00:03:32,440 --> 00:03:39,200
So I did invest back when four people were doing Python. I was doing Ruby and I had done Ruby before that. Ruby was awesome. But here's the thing.

23
00:03:39,200 --> 00:03:49,240
We were also writing large applications. We were writing applications that needed the pseudo object orientedness of Python or, you know, the scale of Ruby.

24
00:03:49,240 --> 00:03:59,600
Really, what we needed was go at the time or a language like it that could support the weight of enterprise development without the complexity and just absolute bloat of Java.

25
00:03:59,600 --> 00:04:06,600
And so that's what we needed. So I went ahead and I'm definitely going to accept comments at some point and I'm going to go into the IRC.

26
00:04:06,600 --> 00:04:15,440
There's going to be all kinds of people in here with all kinds of opinions and I love that. But I was particularly grumpy recently.

27
00:04:15,640 --> 00:04:24,080
Not particularly because of any single person. A lot of people took the back end of my wrath on this because it was actually me.

28
00:04:24,080 --> 00:04:40,760
I've done a lot of reflection over the last day. It was actually me coming to terms with the fact that I threw out something which I tend to do that had an application for a specific area.

29
00:04:40,760 --> 00:04:53,720
And that area is a very niche area, but it is a very important area. And so then I came back to it. I actually just discovered all over again that the only prototyping language I should be using for Unicode regular expression matches right now is Perl.

30
00:04:53,720 --> 00:05:00,400
It's the only language on the planet that supports it as far as I know right now. If I'm wrong, put it in the comments and I'll go look it up.

31
00:05:00,400 --> 00:05:09,160
But so here's I just put these these items together here. I don't know, but these are good reasons to use Perl in 2021.

32
00:05:09,160 --> 00:05:13,320
It's 2021 that everybody thinks, oh, my God, we got to get Perl out of there.

33
00:05:13,320 --> 00:05:20,600
The BSC team went to exhaustive effort to remove Perl permanently from the district, which I think was a stupid choice.

34
00:05:20,600 --> 00:05:24,840
The new of him, the new of him team ripped out Perl from inside of it.

35
00:05:24,840 --> 00:05:28,960
You know, it had some internal Perl support from they might get that fucking Perl out of there. We get that out of there.

36
00:05:28,960 --> 00:05:41,880
We can't have that. And everybody's just got this Perl hate F security, which by the way, F security, really, really, you're going to you're going to permanently date your company to,

37
00:05:44,400 --> 00:05:51,840
you know, to an Amazon thing about a guy who struggles with

38
00:05:52,640 --> 00:05:57,400
psychotic problems. That's that's you're going to make a Mr. Elliot reference for your company name.

39
00:05:57,400 --> 00:06:04,760
And then you're going to have the gall to put inside of your job description as a bullet point has a healthy disdain for Perl.

40
00:06:04,760 --> 00:06:10,480
I'll show you those lines of that. You know, all you're really doing is proving how stupid you are.

41
00:06:10,480 --> 00:06:21,320
If you don't understand why Perl is still a very, very viable cybersecurity language, then you don't have any business being in the industry.

42
00:06:21,560 --> 00:06:26,720
Because Python's not going to do what Perl is going to do. And I'm going to tell you all the ways that that's true.

43
00:06:27,200 --> 00:06:31,520
All right. So the first one is regular expressions.

44
00:06:32,760 --> 00:06:44,920
Perl is the industry standard for regular expressions. In fact, your regular expressions use in JavaScript and in go and in and in Python, they're all using PCRE.

45
00:06:44,920 --> 00:06:56,360
In fact, you look at the Python source code, it literally links in live PCRE, which is the exact library created for Perl compatible regular expressions, because Perl set the standard.

46
00:06:57,160 --> 00:07:06,240
Because Larry Wall in the game, they saw, they saw a problem. They said, you know what, Auk ain't doing it, said, Oh, my God, ain't doing it. By the way, which version of Auk or said you have on your system?

47
00:07:06,240 --> 00:07:19,400
Is it Auk or is it N Auk? So Larry Wall fixed a problem. He said, you know what, we need something that's relatively standardized that has the best of all of these things together that fits that space in between shell and C.

48
00:07:20,080 --> 00:07:36,120
And that's what Perl was. That's what it became. And that's all it was ever intended to be. The fact that Perl went on to become the industry standard for back end web development is just a testament to the robustness of this

49
00:07:36,880 --> 00:07:52,560
command line utility scripting language. That's all it was ever intended to be. The fact that he even put up with what it was put under all the weight of the entire worldwide web development was put on Perl's shoulders, which it was never designed to do.

50
00:07:53,360 --> 00:08:03,360
The fact that I was right able to write enterprise software that fell on its face with PHP, by the way, and with Python, those things just did not do it. It didn't do it.

51
00:08:04,360 --> 00:08:29,360
And so Perl was there to do that thing. So stop judging Perl as an enterprise language. It was never meant to be a language. You know what it was meant to do? It was meant to replace said Auk, TR, Cut, and all the other unnecessary sub shells in a way that could take one sub shell and it could be extremely powerful and it could be loaded and it could do things that the other languages don't even dream of doing, like, oh, something as simple as mapping, you know, map, filter, reduce.

52
00:08:29,360 --> 00:08:47,360
Those are all built into Perl. Those concepts were built into Perl before JavaScript was even conceived and they've been there all along. Somebody the other day was saying, you know, I've been looking for a language that's better than Node because it has more, it's like, that's more, you know, powerful on the command line. I don't have to have a Node install Node on everything. I was like, have you even looked at Perl? What's Perl?

53
00:08:48,360 --> 00:09:03,360
So leave it to the old guy to bring this up. And, you know, I was just as much, I even made jokes about it. There's a video, somebody put a comment recently on one of my Go videos and they say I was making a joke about it. You know, this looks like, you know, it's harder to read than Perl.

54
00:09:04,360 --> 00:09:20,360
And I'll be the first to admit that there has been really bad Perl written. There really has been. There's been Perl that's been written that is, you know, just abysmally bad. In fact, there's entire competitions that I'll let you go look up on your own about Perl obfuscation contests.

55
00:09:20,360 --> 00:09:38,360
We're like really super intelligent people, you know, show off their ability to make their code absolutely completely incomprehensible. By the way, that same sort of culture and thinking reminds me a lot of the Rust community today. A lot of the Rust developers, they're very elite, they're very intelligent, and they take pride in writing code that no one can understand.

56
00:09:38,360 --> 00:09:55,360
Well, it sucks to be you. Can we just agree that that attitude in a developer should be like rooted out of any dev shop? If you think you're better because you can write code that no one can understand, you need to be fired on the spot.

57
00:09:55,360 --> 00:10:15,360
I mean, if that sentiment bubbles up at any level in your team, you have to shut that stuff down because it will destroy your team because, you know, they'll think they're elite and they wanted this thing. But let's talk about that for a second. The reason that Perl is considered a read-only language is because it's got completely different design decisions.

58
00:10:15,360 --> 00:10:34,360
The design decisions are, we want to write a very contextual, very implicit, very magical language that is able to write very, very quickly and powerfully in the fewest amount of keystrokes because it's a shell script. It's a shell scripting language, guys.

59
00:10:34,360 --> 00:10:48,360
It has the best command line one-liners for shell that you will ever come across. You might not understand them, but it doesn't matter because they're a single, I'm not reading the comments yet. If you guys are slamming me, I'm going to get my, say my piece and then I'll read what you guys had to say.

60
00:10:49,360 --> 00:11:10,360
So this is an example. So here is a one-liner for Perl right here. It's integrated into my VMRC that will actually go out and it will change any markdown link that doesn't have anything between the parentheses into something that contains a link to DuckDuckO every time I exit my program.

61
00:11:11,360 --> 00:11:23,360
Now, that is a very, very dense, unreadable line. It would take you several minutes to look at it because everything that it's doing, if you were to write it out in Python one step at a time, you would have like 30 lines of code.

62
00:11:24,360 --> 00:11:38,360
So, you know, 20 lines, maybe. You know, the point I'm trying to make is that Perl is deliberately dense and contextual. It's deliberately that way. It's that way so that you can get more done on the command line.

63
00:11:39,360 --> 00:11:51,360
And if you look at a language like AUK, you know, people are like, people, people, this is, this is the craziest thing. I, in 2021, 2020, I continue to read and hear people talk about the praises of said and AUK and how awesome they are.

64
00:11:52,360 --> 00:11:57,360
And then those same people will turn around without having any knowledge of what Perl even does and they will slam on Perl.

65
00:11:58,360 --> 00:12:02,360
They will slam on Perl and they will say, well, Perl is that, oh, blah, blah, blah. Meanwhile, AUK is awesome.

66
00:12:03,360 --> 00:12:14,360
And they have no idea what they're talking about. And it's like, and they'll talk about how great AUK and these big, fancy lines, you know, like if you're going to make a bunch of subchills, do it on a single command line.

67
00:12:15,360 --> 00:12:22,360
And a powerful single command line is an essential skill to have if you're in cybersecurity, if you're doing a lot of system administration.

68
00:12:23,360 --> 00:12:30,360
But most knowledge workers should be able to learn how to use the UNIX command line. That is the true power of the UNIX command line is learning how to use pipes and stuff.

69
00:12:30,360 --> 00:12:36,360
And so if you don't know how to do that, you know, that's on you. It's not on the language.

70
00:12:37,360 --> 00:12:42,360
The language was designed for those people who can level up to the place where they can get a lot done in one line.

71
00:12:43,360 --> 00:12:48,360
And that's why it exists that way. And AUK, by the way, is very contextual as well.

72
00:12:49,360 --> 00:12:56,360
It's very, very contextual. And people will love on AUK while they'll hate on Perl, even though Perl is also contextual and they'll hate on it for the same reason.

73
00:12:56,360 --> 00:13:07,360
The difference is you don't see AUK scripts in files that are running back-end common gateway interface processing to connect to a database.

74
00:13:08,360 --> 00:13:15,360
Perl can do that shit. AUK can't. And it's the same exact language. In fact, it starts up almost faster than AUK.

75
00:13:16,360 --> 00:13:21,360
Not the same speed. Perl is obviously bigger than AUK, but AUK is, you know, instead, people complain all the time about it.

76
00:13:21,360 --> 00:13:25,360
Well, it says, you know, but you should see how fast the runtimes are in Perl these days.

77
00:13:26,360 --> 00:13:29,360
I mean, you just started from the command line. So let's talk about that for a second.

78
00:13:30,360 --> 00:13:39,360
The chances of you getting a consistent version of Perl on a Unix system are equal or better than getting a consistent version of AUK on a system.

79
00:13:40,360 --> 00:13:46,360
In the day, in the 90s, there was an AUK, there was NAUK, AUK, and all of the different AUKs had different forms of regular expressions.

80
00:13:46,360 --> 00:13:54,360
One of the most annoying things that Larry Wall fixed with Perl is he was sick and tired of everybody disagreeing about regular expressions.

81
00:13:55,360 --> 00:13:59,360
Regular expressions are hard enough to learn as it is. I mean, there's wicked difficulty to master as a beginner.

82
00:14:00,360 --> 00:14:07,360
And so he was like, you know, I can't remember which one has which. If you've written any VIM script, you'll know it's already different than said.

83
00:14:08,360 --> 00:14:13,360
You know, do I escape it? Do I not escape it? Does it support this class? Does it support, you know, politics classes? Does it have a backslash?

84
00:14:13,360 --> 00:14:18,360
So he said, you know what, I'm done with that. I'm going to take all of that. I'm going to put it in here and I'm going to take all of this.

85
00:14:19,360 --> 00:14:32,360
I'm going to put that in there. And he took every single regular expression was there and made sure that the priority of Perl is on really powerful text manipulation, the practical extraction and reporting language, P-E-R-L.

86
00:14:33,360 --> 00:14:42,360
I think that the acronym came after Perl existed. And, you know, there's all kinds of stuff you can read out there from people on this whole topic.

87
00:14:43,360 --> 00:14:56,360
So that's what Perl has always been good at doing. Perl has a wicked, great templating. People don't even know. You can use FMT in Perl and get really great textual templates for output.

88
00:14:57,360 --> 00:15:05,360
You can, you know, anytime you're dealing with text manipulation and that includes parsing logs, you know, power gripping through stuff.

89
00:15:06,360 --> 00:15:11,360
It also includes converting things to binary. People don't understand this very well. It's usually the last thing they learn in Perl.

90
00:15:11,360 --> 00:15:23,360
There's a Perl pack, it's called. And Perl pack allows you to specify very precise binary notation so you can parse binary files with Perl using the pack statement.

91
00:15:24,360 --> 00:15:32,360
Let's you do that with Ock. You can do it with Python, but which version of Python is Python even going to be on your system? Is it going to require a pip install?

92
00:15:33,360 --> 00:15:39,360
That's the problem with Python. Python's not on those systems. It's not on all unique systems. And if it is, it's not going to be consistent.

93
00:15:39,360 --> 00:15:46,360
It's not. You can't count on it. So think of all the reasons that you want something that's already there.

94
00:15:47,360 --> 00:15:50,360
The reason that you use, you know, the bash is because it's default on Linux.

95
00:15:51,360 --> 00:15:55,360
The arguments people make for using a POSIX shell is because that's supported on all forms of Unix.

96
00:15:56,360 --> 00:15:59,360
They don't have to, you know, have a Docker container just to run their application.

97
00:16:00,360 --> 00:16:03,360
They can write a script and share it, or they can, more importantly, they can put a script on the system.

98
00:16:03,360 --> 00:16:08,360
And if you've done any pen testing at all, you should obviously immediately understand the benefit of this,

99
00:16:09,360 --> 00:16:20,360
which is why it's so stupid that F security would make fun of the language that's the most effective for writing, harvesting, you know, penetrations code on.

100
00:16:21,360 --> 00:16:32,360
The reason that Go is going to destroy Python in a cybersecurity world as soon as everything gets ported over is because Go can write packages and payloads that run on the target system

101
00:16:33,360 --> 00:16:42,360
without any other system. I can write it on my Mac. I can write a target for a Windows machine, send it over there and execute it on the system without any dependencies whatsoever.

102
00:16:43,360 --> 00:16:50,360
If the system is a Unix system, I can write it in Perl. I can write a Perl script and run that Perl script over there.

103
00:16:51,360 --> 00:16:56,360
And I could, you know, it depends on how powerful your shell is, right, but that you've, you know, your back door you've got.

104
00:16:57,360 --> 00:17:00,360
But if you go on that system, you have Perl ready. It's a Unix system, right?

105
00:17:00,360 --> 00:17:08,360
So you don't have Python. Go dig apart the rootkits. They use Python.

106
00:17:09,360 --> 00:17:16,360
They have to ship the whole fucking Python interpreter with it to make sure that they have the right version.

107
00:17:17,360 --> 00:17:20,360
Whereas if they were attacking a system, and that's fine if you're attacking Windows or something.

108
00:17:21,360 --> 00:17:23,360
This is why Go is going to be better. Go doesn't have a whole bunch of bundles.

109
00:17:23,360 --> 00:17:29,360
It's just got one very difficult to decompile executable that then can go on the target system.

110
00:17:30,360 --> 00:17:35,360
That's got a ton of stuff, including high-level encryption built into the standard library.

111
00:17:36,360 --> 00:17:44,360
So, again, I think Go and Perl are still very viable for all kinds of hacking techniques, particularly when you just have a shell thing.

112
00:17:45,360 --> 00:17:51,360
So, I mean, anytime you're dealing with text, and so the reason I came to this is because I'm doing, oh, here's another thing.

113
00:17:51,360 --> 00:18:00,360
Let's say you want to work with a system that's in Chinese, and you want to use regular expressions to parse through logs in Chinese.

114
00:18:01,360 --> 00:18:09,360
Oh, no, you don't have regular expressions support for Unicode. How am I going to parse these congee characters? Can't do it.

115
00:18:10,360 --> 00:18:20,360
It's no surprise that Perl is the first language to implement backslash p, which is a Unicode REGAX class match.

116
00:18:21,360 --> 00:18:26,360
So, you put in parentheses behind that, you can put whatever plane of Unicode set that you want.

117
00:18:27,360 --> 00:18:30,360
As far as I know, as of this date, Perl is the only thing that supports that.

118
00:18:31,360 --> 00:18:43,360
And so, as I was implementing my KN utility for knowledge management stuff, I wanted to make very strict regular expression matches for the URIs that I'm using for knowledge nodes.

119
00:18:44,360 --> 00:18:48,360
And I wanted to set any uppercase letter, not just any ASCII uppercase letter.

120
00:18:49,360 --> 00:18:57,360
You should all go, if you want some homework right now, go find your preferred language right now for your standard language, your workhorse language,

121
00:18:58,360 --> 00:19:08,360
and go find out, go see if with a regular expression you can match a set of Unicode characters that matches all capital L lowercase u, that class,

122
00:19:09,360 --> 00:19:14,360
which is the Unicode character set for uppercase letters. And we're not talking about just ASCII.

123
00:19:15,360 --> 00:19:18,360
Ask yourself and then do the research to see if your language can do it.

124
00:19:19,360 --> 00:19:20,360
And I'll bet you that it can't.

125
00:19:22,360 --> 00:19:23,360
Because I know BASH can't.

126
00:19:24,360 --> 00:19:31,360
I was trying to do some of this stuff in BASH because 2020 was an experiment to see how much of my life I could just do completely entirely in BASH and go.

127
00:19:32,360 --> 00:19:36,360
And I found out that as of this week that there's a pretty significant portion of what I like to do that I can't do.

128
00:19:37,360 --> 00:19:40,360
I can't match Unicode character classes, period, not possible.

129
00:19:41,360 --> 00:19:42,360
Maybe that's coming out.

130
00:19:42,360 --> 00:19:43,360
I imagine all of that.

131
00:19:43,360 --> 00:19:46,360
I imagine the pressure that Pearl's going to put on everything else is going to do that.

132
00:19:47,360 --> 00:20:00,360
And since Pearl is the thing that defines the standard for regular expressions, LibPCRE is a good bet that anything that supports LibPCRE is going to get an upgrade because the people who support LibPCRE who are no longer associated with the Pearl project

133
00:20:01,360 --> 00:20:07,360
are going to add that Unicode backslash p support and it's going to land in every other language thanks to Pearl.

134
00:20:10,360 --> 00:20:12,360
Alright, so I don't know how many times I have to say it.

135
00:20:13,360 --> 00:20:25,360
I have a little soft spot on this in me and if I sound aggravated, it's mostly because I'm aggravated at myself for not remembering what Pearl is good for.

136
00:20:26,360 --> 00:20:29,360
Now let's do spend some time talking about what Pearl is horrible for.

137
00:20:30,360 --> 00:20:34,360
Pearl is not for object-oriented programming in any sense.

138
00:20:35,360 --> 00:20:37,360
It's not for programming anything at scale.

139
00:20:38,360 --> 00:20:39,360
It was never designed to do that.

140
00:20:39,360 --> 00:20:40,360
Do that in Pearl.

141
00:20:40,360 --> 00:20:41,360
Do it in Python.

142
00:20:41,360 --> 00:20:42,360
Do it in Go.

143
00:20:42,360 --> 00:20:43,360
Do it in Java.

144
00:20:43,360 --> 00:20:44,360
Do it in C-sharp.

145
00:20:45,360 --> 00:20:51,360
Don't do 10,000 lines, 100,000 lines of Pearl code.

146
00:20:51,360 --> 00:20:52,360
That's ridiculous.

147
00:20:52,360 --> 00:20:54,360
Pearl is a fucking shell script.

148
00:20:54,360 --> 00:20:55,360
It's not designed for that.

149
00:20:56,360 --> 00:20:57,360
Don't use it that way.

150
00:20:57,360 --> 00:20:58,360
Use it the way it's intended.

151
00:20:59,360 --> 00:21:01,360
And then you'll make a benefit of it, right?

152
00:21:02,360 --> 00:21:08,360
So even TypeScript is more suited for that because it's strictly typed.

153
00:21:08,360 --> 00:21:09,360
It can be transpiled.

154
00:21:10,360 --> 00:21:12,360
I mean, Pearl is not the language for that.

155
00:21:12,360 --> 00:21:13,360
It was never designed to do that.

156
00:21:13,360 --> 00:21:14,360
Don't do that.

157
00:21:14,360 --> 00:21:15,360
I did it.

158
00:21:15,360 --> 00:21:17,360
We all did because it was the only thing.

159
00:21:17,360 --> 00:21:19,360
Python couldn't even do some of the stuff we did.

160
00:21:19,360 --> 00:21:22,360
And then eventually Python caught up and it started being able to do that.

161
00:21:22,360 --> 00:21:24,360
It was a little bit more verbose.

162
00:21:24,360 --> 00:21:32,360
It had Python and that really, really, really sweet, you know, C-stubbing so you could like make NumPy and all the stuff that Python's become famous for.

163
00:21:32,360 --> 00:21:37,360
Pearl was always, Pearl didn't like people writing C-stubs for the language.

164
00:21:37,360 --> 00:21:39,360
That was, no, it's a shell scripting language.

165
00:21:39,360 --> 00:21:41,360
We're not going to add support for C-stubbing to the language.

166
00:21:41,360 --> 00:21:42,360
It has it.

167
00:21:42,360 --> 00:21:43,360
It has it.

168
00:21:43,360 --> 00:21:45,360
But it was like, we're not going to really focus on that.

169
00:21:45,360 --> 00:21:46,360
That's not our goal here.

170
00:21:46,360 --> 00:21:50,360
Our goal is to maintain a decent shell scripting language.

171
00:21:50,360 --> 00:21:56,360
As soon as you start, as soon as you have to add a dependency to something from C-pan in your Pearl code, you've failed.

172
00:21:56,360 --> 00:21:57,360
It's my opinion.

173
00:21:57,360 --> 00:22:00,360
In my opinion, you're no longer using Pearl for what it was intended to be.

174
00:22:00,360 --> 00:22:03,360
Just a present shell script that gets a lot of stuff done.

175
00:22:03,360 --> 00:22:09,360
That's better than Bash and Z-shell and Fish and all the other shells for writing really great, fast code.

176
00:22:09,360 --> 00:22:16,360
And the performance of Pearl is way better because your average Bash code that would be, you know, 100 lines, 200 lines long,

177
00:22:16,360 --> 00:22:22,360
is probably got at least half dozen, two dozen, three dozen sub-shells in there to get stuff done.

178
00:22:22,360 --> 00:22:25,360
Even more if you don't know what you're doing and you're using a lot of set and awk.

179
00:22:25,360 --> 00:22:30,360
In that case, you might as well just write one Pearl script, which is one sub-shell.

180
00:22:30,360 --> 00:22:37,360
And all that performance goes away and it's actually faster, even though it might take a little bit more memory for it to run.

181
00:22:37,360 --> 00:22:40,360
It still runs just as fast.

182
00:22:40,360 --> 00:22:43,360
So that's the case where you wouldn't want to use Pearl.

183
00:22:43,360 --> 00:22:48,360
You definitely don't want to use Pearl for large-scale enterprise applications.

184
00:22:48,360 --> 00:22:50,360
It was never intended for that.

185
00:22:50,360 --> 00:22:51,360
Don't do that.

186
00:22:51,360 --> 00:22:53,360
It's a bad idea.

187
00:22:53,360 --> 00:23:03,360
And for that, I personally think Go is the best thing for that because you can tell that Go is highly influenced by Pearl on many levels.

188
00:23:03,360 --> 00:23:08,360
But, you know, grab a more verbose, strictly-type language.

189
00:23:08,360 --> 00:23:14,360
I mean, the whole world has realized that interpreter languages are not the thing to go to for large-scale development.

190
00:23:14,360 --> 00:23:18,360
Microservices, the whole cloud-native world is all Go right now.

191
00:23:18,360 --> 00:23:19,360
All of it.

192
00:23:19,360 --> 00:23:21,360
This is just stating facts for people.

193
00:23:21,360 --> 00:23:22,360
This is an opinion.

194
00:23:22,360 --> 00:23:24,360
This is a fact.

195
00:23:24,360 --> 00:23:35,360
Go was developed for cloud-native development, wherever you want to call that, at Google, specifically for those reasons, with strong concurrency before anyone was thinking about it, because Google needed it.

196
00:23:35,360 --> 00:23:42,360
And now we've all benefited from that and Go has become the overwhelming industry standard for cloud-native development, period.

197
00:23:42,360 --> 00:23:44,360
And that's not even up for debate.

198
00:23:44,360 --> 00:23:47,360
I mean, you can confirm that all over the place.

199
00:23:47,360 --> 00:23:49,360
I don't need to tell you that.

200
00:23:49,360 --> 00:23:52,360
So don't use Pearl for the wrong thing, but do use Pearl for the right thing.

201
00:23:52,360 --> 00:23:53,360
What is Pearl's right thing?

202
00:23:53,360 --> 00:23:56,360
Pearl is the right thing whenever there's a lot of text involved.

203
00:23:56,360 --> 00:24:07,360
Or whenever you're pushing the limit of that little shell script that you wrote, whether it's ZShell or Bash or TCShell or whatever, you know, if you're starting to push the boundary a little bit.

204
00:24:07,360 --> 00:24:14,360
And particularly if you're a little bit afraid of that POSIX glob in your shell, you don't want it to work.

205
00:24:14,360 --> 00:24:18,360
This is another thing about Pearl that people don't really give it credit for.

206
00:24:18,360 --> 00:24:21,360
Pearl is a very, very safe language to write in.

207
00:24:21,360 --> 00:24:26,360
It's probably one of the safest, and that was largely because of all the stuff that was happening with the web.

208
00:24:26,360 --> 00:24:29,360
Anybody know about dash T, capital T?

209
00:24:34,360 --> 00:24:39,360
Okay, so you were slamming on Pearl, but you've never used the dash capital T switch ever?

210
00:24:39,360 --> 00:24:40,360
You don't know what it is?

211
00:24:40,360 --> 00:24:42,360
Okay, let me help you understand that.

212
00:24:42,360 --> 00:24:47,360
Dash capital T turns on taint checking.

213
00:24:47,360 --> 00:24:52,360
And there is no language on planet Earth that does this, and they should.

214
00:24:52,360 --> 00:24:58,360
Taint checking is one of the best things you will ever add to a language.

215
00:24:58,360 --> 00:25:10,360
Taint checking automatically says any input, whether it be an environment variable, standard input, or any other file handle, is automatically tainted.

216
00:25:10,360 --> 00:25:19,360
And the only way it gets untainted is if you explicitly write code that checks the data coming in in some way.

217
00:25:19,360 --> 00:25:23,360
Generally speaking, match it against the regular expression, or you explicitly set the path.

218
00:25:23,360 --> 00:25:30,360
When you turn taint checking on, one of the reasons people turn it off immediately is because it forces you to set the path in the script,

219
00:25:30,360 --> 00:25:33,360
which means that you can't trust the path of the system.

220
00:25:33,360 --> 00:25:35,360
You have to explicitly set the path.

221
00:25:35,360 --> 00:25:41,360
Because the people who made Pearl and added taint checking were fundamentally interested in security.

222
00:25:41,360 --> 00:25:43,360
You don't see that in Python.

223
00:25:43,360 --> 00:25:46,360
You don't see that in many other languages, even Rust.

224
00:25:46,360 --> 00:25:48,360
Rust is supposed to be a secure language.

225
00:25:48,360 --> 00:25:51,360
Well, I don't see anything about tainting in there.

226
00:25:51,360 --> 00:25:56,360
There's a lot about managing memory and borrowing and stuff like that from what I know.

227
00:25:56,360 --> 00:26:01,360
I'm not going to say I'm a Rust expert, of course, but I don't see anything that's doing that.

228
00:26:01,360 --> 00:26:04,360
And I really wish more languages would do it, and Pearl is really good at that.

229
00:26:04,360 --> 00:26:11,360
And by the way, if you're writing a shell, one of the dangers of shell scripting is if your shell script gets adopted as something that gets installed everywhere,

230
00:26:11,360 --> 00:26:13,360
you might want to add those kind of things.

231
00:26:13,360 --> 00:26:21,360
But at that point, you probably should move it to another language like Go, or C Sharp, or Java, or whatever, or even Rust.

232
00:26:21,360 --> 00:26:24,360
But again, Rust is a systems engineering language.

233
00:26:24,360 --> 00:26:29,360
It's a C++ replacement.

234
00:26:29,360 --> 00:26:32,360
I don't want to get into the language where I know.

235
00:26:32,360 --> 00:26:34,360
So let's just recap here.

236
00:26:34,360 --> 00:26:37,360
So good reason to use Pearl in 2021.

237
00:26:37,360 --> 00:26:42,360
So it's old, but it's still very useful, like Linux.

238
00:26:42,360 --> 00:26:44,360
Old, very useful.

239
00:26:44,360 --> 00:26:46,360
Still getting improved upon, still increased.

240
00:26:46,360 --> 00:26:48,360
Just forget Pearl 6 ever existed.

241
00:26:48,360 --> 00:26:50,360
All the rest of us have.

242
00:26:50,360 --> 00:26:53,360
It's got the industry standard for regular expression.

243
00:26:53,360 --> 00:26:59,360
It includes Unicode support, which supports matching Chinese characters as well as emojis and everything else.

244
00:26:59,360 --> 00:27:01,360
And others don't.

245
00:27:01,360 --> 00:27:03,360
Other languages don't.

246
00:27:03,360 --> 00:27:09,360
It's on every system, every Unix or Linux system created in the last 30 years.

247
00:27:09,360 --> 00:27:14,360
I mean, you can go back to Pearl 4, and if you don't push the boundaries, you know, if you don't need Unicode and stuff like that,

248
00:27:14,360 --> 00:27:22,360
you can find Pearl 4 on systems that go all the way back to this, you know, late, I'd say, the very early 80s, probably 86, right?

249
00:27:22,360 --> 00:27:25,360
So, you know, it's going to be on everything.

250
00:27:25,360 --> 00:27:31,360
You have a good, just a good chance of finding Pearl on things as you will finding Auk.

251
00:27:31,360 --> 00:27:33,360
Except BSD.

252
00:27:33,360 --> 00:27:35,360
BSD went to great lengths to rip it out.

253
00:27:35,360 --> 00:27:40,360
And I think that was a really stupid decision, but that's their decision.

254
00:27:40,360 --> 00:27:48,360
It has, it creates a single powerful sub-process instead of lots and lots and lots of sub-processes like you would use in any other shell scripting.

255
00:27:48,360 --> 00:27:53,360
I think it's got one of the most brilliant developer teams ever to have lived.

256
00:27:53,360 --> 00:27:58,360
I have never been burned by Pearl, and I wrote a list of all the things that have burned me over the years,

257
00:27:58,360 --> 00:28:01,360
and Pearl was always there to have my back.

258
00:28:01,360 --> 00:28:03,360
PHP, Bad Memory Lakes burned me.

259
00:28:03,360 --> 00:28:05,360
Java, serious JVM bug.

260
00:28:05,360 --> 00:28:13,360
They had to fly a guy in from Sun Microsystems so I could prove that, you know, our Nike software wasn't going to make the deadline

261
00:28:13,360 --> 00:28:20,360
because of this stupid JVM bug to which the guy said, oh, and I just felt very validated and pissed off at the same time.

262
00:28:20,360 --> 00:28:21,360
Pearl had my back.

263
00:28:21,360 --> 00:28:22,360
It worked out every time.

264
00:28:22,360 --> 00:28:25,360
Every single time something else has failed, and especially because I know Pearl,

265
00:28:25,360 --> 00:28:28,360
it's because it has rock solid development.

266
00:28:28,360 --> 00:28:34,360
It has never had a stop you in your tracks bug that I've encountered.

267
00:28:34,360 --> 00:28:36,360
It may have had them, but I just didn't ever encounter them.

268
00:28:36,360 --> 00:28:37,360
PHP had them.

269
00:28:37,360 --> 00:28:40,360
JVM, Java's had them.

270
00:28:40,360 --> 00:28:43,360
You know, Go hasn't had them in any so far, too.

271
00:28:43,360 --> 00:28:45,360
So far, Go hasn't had any.

272
00:28:45,360 --> 00:28:50,360
The only thing that stopped me with Go that I would consider a bug, a big one,

273
00:28:50,360 --> 00:28:57,360
is that Go routines, if you're not careful with them, they'll leak.

274
00:28:57,360 --> 00:28:59,360
That's not a bug, though.

275
00:28:59,360 --> 00:29:07,360
Pearl provides the ability to write the most powerful one-liners in the world.

276
00:29:08,360 --> 00:29:15,360
I have an alias called Pi, Pearl-P-I-S-E, which will recursively find and replace a keyword in everything.

277
00:29:15,360 --> 00:29:20,360
Said some years, almost like five or six years after Pearl had ever had this,

278
00:29:20,360 --> 00:29:24,360
added said-I in the Linux version, which does essentially the same thing.

279
00:29:24,360 --> 00:29:27,360
The difference is, is it said has a completely different set of regular expressions.

280
00:29:27,360 --> 00:29:31,360
It doesn't use the same PCRE standard, which is really confusing.

281
00:29:31,360 --> 00:29:32,360
So might not go with that.

282
00:29:32,360 --> 00:29:35,360
There is a replacement for that these days called, just read about SD.

283
00:29:35,360 --> 00:29:42,360
It's not in any of the app package kind of things, which actually replaces with the Pearl expression,

284
00:29:42,360 --> 00:29:44,360
so you can use it for said that way.

285
00:29:44,360 --> 00:29:48,360
A lot of the new utilities are getting replaced.

286
00:29:48,360 --> 00:29:53,360
Pearl is dense, hard to read, contextual, and implicit, but it does it on purpose,

287
00:29:53,360 --> 00:29:55,360
so it'll be more powerful.

288
00:29:55,360 --> 00:29:56,360
Pearl's not going anywhere.

289
00:29:56,360 --> 00:29:59,360
Sorry, people are not taking it off of stuff.

290
00:29:59,360 --> 00:30:02,360
In fact, if anything, I think Pearl's going to increase in usage as we go forward,

291
00:30:02,360 --> 00:30:05,360
because the world is turning to conversational things.

292
00:30:05,360 --> 00:30:10,360
The terminal is becoming important again.

293
00:30:10,360 --> 00:30:16,360
People are learning that manipulating text and parsing conversational text and grammars,

294
00:30:16,360 --> 00:30:20,360
and things like that are important, and Pearl's going to be right there to do that.

295
00:30:20,360 --> 00:30:25,360
Python will do it, but it's just you have to, first of all, you have to install Python.

296
00:30:25,360 --> 00:30:28,360
Secondly, you have to make sure you have the right version of Python,

297
00:30:28,360 --> 00:30:32,360
and the answer to that that everyone tells me is, well, you should run a Python virtual environment.

298
00:30:32,360 --> 00:30:39,360
I'm not running a Python virtual environment to run what is a glorified shell script.

299
00:30:39,360 --> 00:30:41,360
Python is good for those applications.

300
00:30:41,360 --> 00:30:43,360
It's horrible as a shell scripting language.

301
00:30:43,360 --> 00:30:44,360
It's horrible.

302
00:30:44,360 --> 00:30:46,360
Have you ever tried to do one-liners in Python?

303
00:30:46,360 --> 00:30:47,360
They're so horrible.

304
00:30:47,360 --> 00:30:51,360
I hate them.

305
00:30:51,360 --> 00:30:53,360
It's still the best language where text is concerned.

306
00:30:53,360 --> 00:30:57,360
It has a pack and map and grip.

307
00:30:57,360 --> 00:31:02,360
The safest shell scripting possible, way safer than Python,

308
00:31:02,360 --> 00:31:04,360
and it has syntax similar to shell.

309
00:31:04,360 --> 00:31:06,360
That's actually something people don't like.

310
00:31:06,360 --> 00:31:10,360
At first, they complain about it being kind of weird and cryptic and looking weird,

311
00:31:10,360 --> 00:31:16,360
but that's because it's designed to feel like you're coding in sort of POSIX or Bash or ZShell

312
00:31:16,360 --> 00:31:19,360
with some extra power.

313
00:31:19,360 --> 00:31:24,360
So $0 is a special variable name for the current running script.

314
00:31:24,360 --> 00:31:27,360
Well, that's the same thing you would use if you were writing shell code.

315
00:31:27,360 --> 00:31:31,360
So that kind of weirdness in the variable naming and stuff like that, that's not Perl's fault.

316
00:31:31,360 --> 00:31:35,360
That's because it feels like you're writing shell code.

317
00:31:35,360 --> 00:31:41,360
So Perl is the natural progression from writing Bash or ZShell or Shell.

318
00:31:41,360 --> 00:31:44,360
And actually, if you're a ZShell advocate, you guys know I don't like ZShell.

319
00:31:44,360 --> 00:31:46,360
I play and complain about it all the time.

320
00:31:46,360 --> 00:31:52,360
But if you are a ZShell or a POSIX person, then Perl is a really great companion for you

321
00:31:52,360 --> 00:31:57,360
because Perl does all of the things that those languages can't do.

322
00:31:57,360 --> 00:32:02,360
Bash can step into that Perl space way more than ZShell can,

323
00:32:02,360 --> 00:32:06,360
particularly with exported functions and things, and full regular expression support.

324
00:32:06,360 --> 00:32:08,360
Actually, ZShell has regular expression support.

325
00:32:08,360 --> 00:32:09,360
We saw that.

326
00:32:09,360 --> 00:32:16,360
The regular expression support in Bash and in ZShell appears to be the same exact regular expression support that you see in Perl.

327
00:32:16,360 --> 00:32:19,360
So I'm able to reuse those kind of things.

328
00:32:19,360 --> 00:32:27,360
And by the way, the use of associative arrays, which are otherwise known as hashes or dictionaries in Python,

329
00:32:27,360 --> 00:32:31,360
you have to have Bash 4.2 or higher to get that.

330
00:32:31,360 --> 00:32:35,360
ZShell doesn't have it, of course, and neither do the POSIX shell scripts.

331
00:32:35,360 --> 00:32:38,360
But Perl has gobs of that in droves.

332
00:32:38,360 --> 00:32:43,360
It's this very advanced support for references and all of that stuff.

333
00:32:43,360 --> 00:32:47,360
So you can do some of those advanced techniques where you're dereferencing

334
00:32:47,360 --> 00:32:52,360
and you can actually directly manipulate the symbol table, which I did to create Perl Classes Pragma,

335
00:32:52,360 --> 00:32:56,360
which at the time it made sense.

336
00:32:56,360 --> 00:33:02,360
It was sort of an effort to bring some of the better parts of object-driven programming for Ruby into Perl.

337
00:33:02,360 --> 00:33:03,360
You can look at that.

338
00:33:03,360 --> 00:33:07,360
It's called Perl Classes Pragma in my GitHub if you want to see it.

339
00:33:07,360 --> 00:33:08,360
But it shows what you can do.

340
00:33:08,360 --> 00:33:11,360
You can actually directly manipulate the symbol table in Perl.

341
00:33:11,360 --> 00:33:19,360
That's the kind of stuff that in Python, you can get down into the underlying stuff,

342
00:33:19,360 --> 00:33:21,360
which by the way, almost all objects in Python are dictionaries.

343
00:33:21,360 --> 00:33:23,360
And it turns out it's benchmarked.

344
00:33:23,360 --> 00:33:28,360
It's actually faster to deal with the internal dictionaries

345
00:33:28,360 --> 00:33:40,360
than it is to use objects as small objects as if they were rather than hash maps.

346
00:33:40,360 --> 00:33:45,360
Anyway, so it can take you to where you need to be, but not further.

347
00:33:45,360 --> 00:33:48,360
And if you try to take it further than that, you're doing it wrong.

348
00:33:48,360 --> 00:33:52,360
At that point, it's probably time to grab another language.

349
00:33:52,360 --> 00:33:55,360
And one of those other languages would be Python.

350
00:33:55,360 --> 00:34:01,360
Python is definitely suited for a larger application sort of approach.

351
00:34:01,360 --> 00:34:03,360
So let's type script.

352
00:34:03,360 --> 00:34:09,360
So as I imagine Dino is going to be more of that kind of thing, but definitely go in that space.

353
00:34:09,360 --> 00:34:11,360
Those are meant for larger applications.

354
00:34:11,360 --> 00:34:14,360
C Sharp and the Java, all the traditional OOP things.

355
00:34:14,360 --> 00:34:17,360
And C++, but if you're going to do, that's a different thing altogether.

356
00:34:17,360 --> 00:34:21,360
As soon as you're headed to C++ and Rust, you're looking for performance and, you know,

357
00:34:21,360 --> 00:34:23,360
C and optimization, something like that.

358
00:34:23,360 --> 00:34:26,360
And all different languages for different purposes.

359
00:34:26,360 --> 00:34:31,360
But to date, Perl remains the best language where regular expressions are concerned

360
00:34:31,360 --> 00:34:35,360
and where any text manipulation or command line is concerned.

361
00:34:35,360 --> 00:34:39,360
Basically, when your shell starts to get a little complicated,

362
00:34:39,360 --> 00:34:41,360
time to pick up some Perl and just use it.

363
00:34:41,360 --> 00:34:43,360
Use the Perl on your system.

364
00:34:43,360 --> 00:34:44,360
You don't have to get crazy.

365
00:34:44,360 --> 00:34:46,360
All right, that's all about it here.

366
00:34:46,360 --> 00:34:50,360
I'm going to actually, technically, I'll be closing the video at this point.

367
00:34:50,360 --> 00:34:55,360
I'm going to take some questions from the chat and try to keep my cool here.

368
00:34:55,360 --> 00:34:57,360
I'm just going to tell you right out.

369
00:34:57,360 --> 00:35:01,360
I have had in the past very little patience for people,

370
00:35:01,360 --> 00:35:05,360
as I kind of started out with, people who attack Perl who don't know it

371
00:35:05,360 --> 00:35:08,360
and have never used it.

372
00:35:08,360 --> 00:35:11,360
And I try my hardest to not be that person.

373
00:35:11,360 --> 00:35:17,360
You should at least have tried it at a minimal level in order to get at least your basic

374
00:35:17,360 --> 00:35:19,360
bearings on it before you don't like it.

375
00:35:19,360 --> 00:35:22,360
And that's my opinion.

376
00:35:22,360 --> 00:35:25,360
So, I mean, obviously, this is all opinionated stuff.

377
00:35:25,360 --> 00:35:29,360
I'm going to bring up the whole chat here.

378
00:35:30,360 --> 00:35:34,360
And I don't know.

379
00:35:34,360 --> 00:35:35,360
I'll put you guys down here.

380
00:35:35,360 --> 00:35:39,360
I'll go back up and go back to the earlier pages.

381
00:35:39,360 --> 00:35:41,360
Windows is boomer.

382
00:35:41,360 --> 00:35:43,360
I fecal.

383
00:35:43,360 --> 00:35:44,360
It's background.

384
00:35:44,360 --> 00:35:46,360
Community and Perl could be there.

385
00:35:46,360 --> 00:35:47,360
Could there be a better combo?

386
00:35:47,360 --> 00:35:50,360
Hi all.

387
00:35:50,360 --> 00:35:51,360
Let's see.

388
00:35:51,360 --> 00:35:52,360
Hello.

389
00:35:52,360 --> 00:35:53,360
Perl is my Swiss Army chainsaw.

390
00:35:53,360 --> 00:35:54,360
I went back anymore.

391
00:35:54,360 --> 00:35:56,360
I like that term.

392
00:35:56,360 --> 00:35:58,360
I heard that term yesterday again.

393
00:35:58,360 --> 00:35:59,360
This was my Swiss Army macro.

394
00:35:59,360 --> 00:36:01,360
This was my Swiss Army chainsaw.

395
00:36:01,360 --> 00:36:02,360
How are you doing today?

396
00:36:02,360 --> 00:36:03,360
I'm pretty good.

397
00:36:03,360 --> 00:36:04,360
Hey, Norman.

398
00:36:04,360 --> 00:36:06,360
It's good to see you the other day, too.

399
00:36:06,360 --> 00:36:07,360
He doesn't read Twitch chat.

400
00:36:07,360 --> 00:36:10,360
I do now, Flame, because I can see Twitch chat now.

401
00:36:10,360 --> 00:36:12,360
So, thank you for having my back there.

402
00:36:12,360 --> 00:36:14,360
But, yeah, you want to chat live.

403
00:36:14,360 --> 00:36:16,360
I don't need to go to blah, blah, blah.

404
00:36:16,360 --> 00:36:17,360
Oh, yesterday he was reading.

405
00:36:17,360 --> 00:36:20,360
So, I thought, yep, Norman, we have a bridge now.

406
00:36:20,360 --> 00:36:22,360
All messages from Twitch are Mirage IRC now.

407
00:36:22,360 --> 00:36:23,360
Thanks.

408
00:36:23,360 --> 00:36:26,360
Yeah, by the way, let me credit to Vera to be Vera for that.

409
00:36:26,360 --> 00:36:28,360
My IRC admin has been doing great.

410
00:36:28,360 --> 00:36:30,360
I really appreciate that.

411
00:36:30,360 --> 00:36:33,360
User Perl, wow, that's new.

412
00:36:33,360 --> 00:36:36,360
Yeah, it was new within the last three days.

413
00:36:36,360 --> 00:36:41,360
So, we move kind of faster, particularly with the people I have helping me out.

414
00:36:41,360 --> 00:36:42,360
Hello, sir.

415
00:36:42,360 --> 00:36:44,360
Just discovered your channel and great.

416
00:36:44,360 --> 00:36:47,360
They're also great, bite-sized articles.

417
00:36:47,360 --> 00:36:49,360
I learned a lot from back in the day.

418
00:36:49,360 --> 00:36:51,360
Yeah, articles and magazines from Merlin.

419
00:36:51,360 --> 00:36:54,360
Yeah, actually, Merlin used to live in the same town as me.

420
00:36:54,360 --> 00:36:57,360
When I was in Portland, yeah, Randall.

421
00:36:57,360 --> 00:37:00,360
I was there when Randall was convicted of hacking.

422
00:37:00,360 --> 00:37:03,360
And we had the Save Randall campaign and all of that stuff.

423
00:37:03,360 --> 00:37:08,360
In fact, Randall, if you happen to watch this all the best, you know,

424
00:37:08,360 --> 00:37:10,360
I know you probably don't remember me.

425
00:37:10,360 --> 00:37:17,360
I remember one time in the middle of the day, Randall Schwartz and I and Lynn Soprell,

426
00:37:17,360 --> 00:37:20,360
the web mistress from Teleport Internet Services,

427
00:37:20,360 --> 00:37:22,360
we went and grabbed a drink.

428
00:37:22,360 --> 00:37:25,360
And I remember just shooting the breeze.

429
00:37:25,360 --> 00:37:27,360
I don't even remember what we were talking about.

430
00:37:27,360 --> 00:37:29,360
He was a really nice guy.

431
00:37:29,360 --> 00:37:32,360
And I remember all the hassle he had to go through.

432
00:37:32,360 --> 00:37:34,360
He's the one who wrote Learning Pearl.

433
00:37:34,360 --> 00:37:36,360
He's something of a God in the Pearl community.

434
00:37:36,360 --> 00:37:40,360
He invented the Schwartzian transformation and a bunch of other optimizations for Pearl

435
00:37:40,360 --> 00:37:43,360
that, quite frankly, should have been unnecessary.

436
00:37:43,360 --> 00:37:48,360
As I said, Pearl was pushed to do things it was never intended to do.

437
00:37:48,360 --> 00:37:53,360
And the fact that it did them and kept on going

438
00:37:53,360 --> 00:37:58,360
is just a testament to how great this shell scripting language is.

439
00:37:58,360 --> 00:37:59,360
Okay?

440
00:37:59,360 --> 00:38:01,360
Let's just remember that that's what it is.

441
00:38:01,360 --> 00:38:02,360
It's a shell scripting language.

442
00:38:02,360 --> 00:38:05,360
It's not anything more, so don't use it for that.

443
00:38:05,360 --> 00:38:06,360
And you'll be fine.

444
00:38:06,360 --> 00:38:09,360
In fact, you'll be happy, particularly if you're in cybersecurity.

445
00:38:09,360 --> 00:38:14,360
And if I was in security, I'd be all over this thing.

446
00:38:14,360 --> 00:38:16,360
Thanks for a great talk this morning.

447
00:38:16,360 --> 00:38:17,360
Yeah.

448
00:38:17,360 --> 00:38:19,360
You know, problem.

449
00:38:19,360 --> 00:38:20,360
Hi, everybody.

450
00:38:20,360 --> 00:38:21,360
Hi, Rob.

451
00:38:21,360 --> 00:38:22,360
This is...

452
00:38:22,360 --> 00:38:24,360
Oh, hi, Kitty.

453
00:38:24,360 --> 00:38:26,360
Yesh's mood and I see...

454
00:38:26,360 --> 00:38:27,360
Hi, everybody.

455
00:38:27,360 --> 00:38:29,360
Rob is in the yesterday's mood as I see.

456
00:38:29,360 --> 00:38:31,360
I'm not even sure what Pearl is.

457
00:38:31,360 --> 00:38:33,360
And I've just started learning how to navigate the terminal.

458
00:38:33,360 --> 00:38:35,360
That's nice, Mark.

459
00:38:35,360 --> 00:38:39,360
Pearl is basically a more powerful version of Bash.

460
00:38:39,360 --> 00:38:40,360
I'm going to get shot.

461
00:38:40,360 --> 00:38:42,360
Bash, awk and said all combined.

462
00:38:42,360 --> 00:38:44,360
Those are all tools that you use on the command line.

463
00:38:44,360 --> 00:38:48,360
Bash is the language that the interpreter that you use every time you execute a command

464
00:38:48,360 --> 00:38:51,360
in an analytics system by default.

465
00:38:51,360 --> 00:38:53,360
And so Pearl is...

466
00:38:53,360 --> 00:38:56,360
You can write scripts in that language in the same language that you run,

467
00:38:56,360 --> 00:38:58,360
you're interactive terminal.

468
00:38:58,360 --> 00:39:01,360
You can write things that just happen when you run them,

469
00:39:01,360 --> 00:39:03,360
you know, and that's what makes the terminal so powerful.

470
00:39:03,360 --> 00:39:07,360
But at some point, you're going to want to reach for a little bit more power,

471
00:39:07,360 --> 00:39:09,360
particularly when you're dealing with stuff with text.

472
00:39:09,360 --> 00:39:12,360
And then when that time comes, that's what Pearl is there to help you with.

473
00:39:12,360 --> 00:39:13,360
And that's normal in the past.

474
00:39:13,360 --> 00:39:15,360
You would reach for said and awk and TR and stuff.

475
00:39:15,360 --> 00:39:19,360
So these days, that's what Pearl is there to help you with.

476
00:39:19,360 --> 00:39:21,360
Pearl's a women wisdom.

477
00:39:21,360 --> 00:39:22,360
Did I say women?

478
00:39:22,360 --> 00:39:23,360
I did.

479
00:39:23,360 --> 00:39:24,360
I know.

480
00:39:24,360 --> 00:39:26,360
I can't remember the soundly defunct London Pearl Mangers Group.

481
00:39:26,360 --> 00:39:27,360
I know.

482
00:39:27,360 --> 00:39:30,360
I was all over the Pearl Mangers Groups too.

483
00:39:30,360 --> 00:39:31,360
I loved them.

484
00:39:31,360 --> 00:39:37,360
I gave lots of conversations and presentations and all that stuff.

485
00:39:37,360 --> 00:39:41,360
This has inspired me to learn to Pearl.

486
00:39:41,360 --> 00:39:45,360
I still use Pearl all the time for interacting with network kits and APIs.

487
00:39:45,360 --> 00:39:46,360
There you go.

488
00:39:46,360 --> 00:39:47,360
See what I'm saying?

489
00:39:47,360 --> 00:39:54,360
And this is something too, is people like Cypheric, do not speak up.

490
00:39:54,360 --> 00:39:55,360
You don't.

491
00:39:55,360 --> 00:39:59,360
The people who are using Pearl aren't just old cronies like me, you know,

492
00:39:59,360 --> 00:40:02,360
curmudgeons in me, pearl curmudgeons, like we used to call them.

493
00:40:02,360 --> 00:40:03,360
They're not.

494
00:40:03,360 --> 00:40:09,360
There are people who have discovered the use of Pearl as a network integration layer,

495
00:40:09,360 --> 00:40:13,360
as the duct tape of the internet, that was once called.

496
00:40:13,360 --> 00:40:15,360
Because that's what it's good at doing.

497
00:40:15,360 --> 00:40:17,360
Pearl is fantastic duct tape.

498
00:40:17,360 --> 00:40:21,360
It's like really great and making a whole bunch of stuff work interactive together.

499
00:40:21,360 --> 00:40:23,360
So you can have executables and you can call those executables.

500
00:40:23,360 --> 00:40:25,360
I do that in the KN tool.

501
00:40:25,360 --> 00:40:27,360
You can parse network input.

502
00:40:27,360 --> 00:40:30,360
It has a really great TCP IP stack so we can go talk to it.

503
00:40:30,360 --> 00:40:31,360
Try that with awk.

504
00:40:31,360 --> 00:40:32,360
Can't do it.

505
00:40:32,360 --> 00:40:35,360
Python has it, but it gets like which version, right?

506
00:40:35,360 --> 00:40:37,360
And it's not going to be on the system by default.

507
00:40:37,360 --> 00:40:41,360
So, yeah, will Pearl integrate with Vim as well as Bash?

508
00:40:41,360 --> 00:40:42,360
Absolutely.

509
00:40:42,360 --> 00:40:43,360
You know why?

510
00:40:43,360 --> 00:40:44,360
Because Pearl can be any...

511
00:40:44,360 --> 00:40:46,360
Look, so Fecal, let me...

512
00:40:46,360 --> 00:40:48,360
I want to make something clear here.

513
00:40:48,360 --> 00:40:52,360
Anything that can be executed can be integrated into Shell.

514
00:40:52,360 --> 00:40:53,360
Okay.

515
00:40:53,360 --> 00:40:54,360
So if you use the...

516
00:40:54,360 --> 00:40:58,360
And if you watch me do the KN development, which I'm going to do later,

517
00:40:58,360 --> 00:41:02,360
the script that can run can be integrated into Vim, right?

518
00:41:02,360 --> 00:41:04,360
Now, this is actually...

519
00:41:04,360 --> 00:41:09,360
If Pearl and Vim has integrated support so you can actually code Vim script in Pearl,

520
00:41:09,360 --> 00:41:12,360
the new Vim people ripped it out.

521
00:41:12,360 --> 00:41:15,360
Another reason new Vim is totally stupid.

522
00:41:15,360 --> 00:41:17,360
I mean, they've made so many...

523
00:41:17,360 --> 00:41:26,360
I mean, why would you rip out the world's best text manipulation language from the world's best editor?

524
00:41:26,360 --> 00:41:30,360
I mean, what kind of stupidity do you have to have in your head

525
00:41:30,360 --> 00:41:33,360
to disassociate Pearl from new Vim?

526
00:41:33,360 --> 00:41:37,360
That decision by itself, when I saw that, I was like,

527
00:41:37,360 --> 00:41:42,360
okay, you've just proved you have absolutely no idea what you're doing to me.

528
00:41:42,360 --> 00:41:44,360
That's a project.

529
00:41:44,360 --> 00:41:48,360
Anything that braves appropriately with stead instead of what works with Pearl.

530
00:41:48,360 --> 00:41:49,360
That's right.

531
00:41:49,360 --> 00:41:51,360
And that's really the shell.

532
00:41:51,360 --> 00:41:55,360
When I say shell integration, what I really mean is anything that can be run from the shell.

533
00:41:55,360 --> 00:41:56,360
And that includes Pearl.

534
00:41:56,360 --> 00:41:57,360
So let's try something here.

535
00:41:57,360 --> 00:41:59,360
I want to show you what I mean by that.

536
00:41:59,360 --> 00:42:05,360
So if I'm just doing a foo, I can write a markdown file, right?

537
00:42:05,360 --> 00:42:15,360
I can just say, I put my title up here, something in the title.

538
00:42:15,360 --> 00:42:21,360
And then over here, I'm going to say, I can actually write some Pearl code.

539
00:42:21,360 --> 00:42:25,360
And I can say, well, let's see.

540
00:42:25,360 --> 00:42:31,360
Something simple.

541
00:42:31,360 --> 00:42:35,360
I mean, I'm used to writing Bash so much because Bash is so easy to integrate.

542
00:42:35,360 --> 00:42:37,360
You could do four.

543
00:42:37,360 --> 00:42:46,360
I mean, there's not very many reasons that I would write Pearl in line to do this kind of thing.

544
00:42:46,360 --> 00:42:48,360
But I guess I could.

545
00:42:49,360 --> 00:42:50,360
I know.

546
00:42:50,360 --> 00:42:52,360
I just can't think of any reason that you would do.

547
00:42:52,360 --> 00:42:53,360
Oh, maybe a pack.

548
00:42:53,360 --> 00:42:55,360
Let me see if I can think of a pack.

549
00:42:55,360 --> 00:42:57,360
I'll do one for you, Fico.

550
00:42:57,360 --> 00:42:58,360
I'll make a video on that.

551
00:42:58,360 --> 00:43:03,360
So one example would be if you had to bring in some binary data.

552
00:43:03,360 --> 00:43:06,360
You know what I mean?

553
00:43:06,360 --> 00:43:08,360
But Pearl isn't very good for writing one-liners.

554
00:43:08,360 --> 00:43:12,360
For that kind of thing, I'm big into shell.

555
00:43:12,360 --> 00:43:19,360
For I in 0, like 34, I do echo I done.

556
00:43:19,360 --> 00:43:24,360
And most of the time when I'm writing one-liners, I'm writing in Bash and I will continue to do so.

557
00:43:24,360 --> 00:43:27,360
Pearl steps in when I need to make a script.

558
00:43:27,360 --> 00:43:28,360
You know what I mean?

559
00:43:28,360 --> 00:43:29,360
Like when I need to make a script.

560
00:43:29,360 --> 00:43:35,360
But if I'm writing one-liners, yeah, that is your friend.

561
00:43:35,360 --> 00:43:39,360
But so much of that is already done in Bash.

562
00:43:39,360 --> 00:43:44,360
So I would be, you know, I'd be sort of hesitant to do that.

563
00:43:44,360 --> 00:43:46,360
So, okay, so let me show you how to do this.

564
00:43:46,360 --> 00:43:48,360
This is some Bash code in the middle of my thing.

565
00:43:48,360 --> 00:43:52,360
And let's say I want to write, you know, number, I want to number a bunch of stuff.

566
00:43:52,360 --> 00:43:58,360
So some, and then I can just run this code.

567
00:43:58,360 --> 00:44:04,360
Old Codgers, Git team, yeah.

568
00:44:05,360 --> 00:44:06,360
Yeah.

569
00:44:06,360 --> 00:44:11,360
Yeah, they're, the Git team, I think the Git team has some pearls still left in it.

570
00:44:11,360 --> 00:44:13,360
That's what people were complaining about actually.

571
00:44:13,360 --> 00:44:18,360
So I can run this through Bash and then that'll just replace it.

572
00:44:18,360 --> 00:44:20,360
It'll put the zero in there even if I want.

573
00:44:20,360 --> 00:44:28,360
So I got to, so for that kind of thing, I would stick with Bash just because it's so easy to do.

574
00:44:28,360 --> 00:44:34,360
But when you want to use pearls, when you want to start to write a script like I've done with the KN tool.

575
00:44:34,360 --> 00:44:38,360
So this is the KN tool that has to look through the environment.

576
00:44:38,360 --> 00:44:43,360
And it has, another thing too is it has the data dumpers and things like that are standard.

577
00:44:43,360 --> 00:44:50,360
So you can like dump your structures and get, you know, do that kind of stuff in Bash is really, really painful.

578
00:44:50,360 --> 00:44:51,360
I mean, it's really painful.

579
00:44:51,360 --> 00:44:55,360
You've got to know, like, I just, it's just crazy.

580
00:44:55,360 --> 00:45:00,360
I got into it there at the little bit at the end and then I came back to Pearl and I was like, oh my God, this is so much easier.

581
00:45:00,360 --> 00:45:05,360
But the thing that's important to consider is that the subroutines are like shell subroutines.

582
00:45:05,360 --> 00:45:10,360
In other words, you don't pass, you know, define an argument signature, you just shift stuff off.

583
00:45:10,360 --> 00:45:12,360
It's, you're coding in shell is what it is.

584
00:45:12,360 --> 00:45:18,360
And once again, if you take nothing more away from this, Pearl is a shell scripting language.

585
00:45:18,360 --> 00:45:19,360
That's what it is.

586
00:45:19,360 --> 00:45:24,360
It's not meant to be, you know, you don't, you can't run a Pearl interactive shell.

587
00:45:24,360 --> 00:45:28,360
But it's meant to be a shell scripting language like the next level up.

588
00:45:28,360 --> 00:45:30,360
So here's how you do a dictionary.

589
00:45:30,360 --> 00:45:36,360
This is actually, this actually is taking a reference to the function so that I can run the function later.

590
00:45:36,360 --> 00:45:39,360
Here, this is a good example of a map.

591
00:45:39,360 --> 00:45:46,360
So this, this takes, this takes every file inside of this directory through Glob expansion.

592
00:45:46,360 --> 00:45:51,360
Maps every one of those files replacing everything up to the slash with nothing.

593
00:45:51,360 --> 00:45:54,360
So it's basically trimming off the stuff except for the name.

594
00:45:54,360 --> 00:45:58,360
And then it, it returns the name by just, that's the current value through the loop.

595
00:45:58,360 --> 00:46:00,360
And then that thing gets returned.

596
00:46:00,360 --> 00:46:02,360
So all of that returns as an array.

597
00:46:02,360 --> 00:46:06,360
And then it loops through the array and it joins them all and makes it will pass for the whole thing.

598
00:46:06,360 --> 00:46:09,360
So that looks pretty dense.

599
00:46:09,360 --> 00:46:15,360
And it is dense, but it's also very, very, very powerful.

600
00:46:15,360 --> 00:46:18,360
I mean, if I were to write that in Python, I don't know how many lines that would be.

601
00:46:18,360 --> 00:46:24,360
That would, you know, so.

602
00:46:24,360 --> 00:46:29,360
Actually, for Pearl, I recommend you do install Pearl docs and just use the man pages.

603
00:46:29,360 --> 00:46:33,360
Something else I didn't even mention is how great the man pages are.

604
00:46:33,360 --> 00:46:36,360
You gotta remember, Pearl existed before the internet existed.

605
00:46:36,360 --> 00:46:38,360
So it's documentation.

606
00:46:38,360 --> 00:46:41,360
You can go Pearl intro, man, Pearl intro.

607
00:46:41,360 --> 00:46:46,360
This is the best source of information on Pearl you'll ever find.

608
00:46:46,360 --> 00:46:47,360
I'm telling you.

609
00:46:47,360 --> 00:46:49,360
And they even have user-bin ENV.

610
00:46:49,360 --> 00:46:50,360
I hate this.

611
00:46:50,360 --> 00:46:52,360
I do not like user-bin ENV.

612
00:46:52,360 --> 00:46:54,360
I do not recommend you do that.

613
00:46:54,360 --> 00:46:55,360
It's unnecessary.

614
00:46:55,360 --> 00:46:57,360
So it's also insecure, even though they suggest it.

615
00:46:57,360 --> 00:47:02,360
But my point is, is that you can go read anything you might want to ever read about here,

616
00:47:02,360 --> 00:47:06,360
just by reading through the documents that come with it.

617
00:47:06,360 --> 00:47:10,360
So the man pages on Pearl are what I would recommend for free.

618
00:47:10,360 --> 00:47:14,360
There's, you know, the good old learning Pearl from Randall Schwartz.

619
00:47:14,360 --> 00:47:17,360
It's probably, I don't know if it's been updated recently.

620
00:47:17,360 --> 00:47:19,360
The thing about Pearl is it's been around.

621
00:47:19,360 --> 00:47:22,360
It hasn't really changed in 15 years.

622
00:47:22,360 --> 00:47:26,360
I mean, they've added support for a command called say, which I really love.

623
00:47:26,360 --> 00:47:34,360
I mean, actually, I found out, by the way, if you are a Pearl person, this might be of interest to you.

624
00:47:34,360 --> 00:47:39,360
If you are a Pearl person, you need at least 5.10 to use say instead of print.

625
00:47:39,360 --> 00:47:43,360
But that'll save you that annoying backslash and at the end of everything.

626
00:47:43,360 --> 00:47:46,360
And if you've done any Pearl coding at all, you know what I'm talking about.

627
00:47:46,360 --> 00:47:48,360
Super annoying, right?

628
00:47:48,360 --> 00:47:50,360
You have to put backslash and on the end of everything.

629
00:47:50,360 --> 00:47:52,360
And if you're a shell scrapper, it's super annoying.

630
00:47:52,360 --> 00:47:59,360
So if you use at least version 5.10 or above, I also did the research and found out that 5.14.

631
00:47:59,360 --> 00:48:03,360
5.14 is the first version that supports Unicode backslash P.

632
00:48:03,360 --> 00:48:08,360
And they're at now at Pearl 5.30.

633
00:48:08,360 --> 00:48:13,360
And there's no intention of ceasing support for Pearl 5 ever in the future.

634
00:48:13,360 --> 00:48:16,360
So they're continuing to maintain it.

635
00:48:16,360 --> 00:48:20,360
The Pearl Cookbook is, yeah, I love the Pearl Cookbook.

636
00:48:20,360 --> 00:48:26,360
It's funny, I actually, when I gave it to Pearl some years ago for Python and some other things, I got rid of all my books.

637
00:48:26,360 --> 00:48:29,360
I had, I have like, Pearl testing.

638
00:48:29,360 --> 00:48:33,360
I used to be on pretty good terms with most of the book authors.

639
00:48:33,360 --> 00:48:35,360
It's been forever.

640
00:48:35,360 --> 00:48:37,360
It's been forever.

641
00:48:37,360 --> 00:48:39,360
I mean, I was really in the Pearl community.

642
00:48:39,360 --> 00:48:43,360
But I, you know, and then I kind of moved on.

643
00:48:43,360 --> 00:48:47,360
And it was funny because a lot of the people in the Pearl community, many of them have never left.

644
00:48:47,360 --> 00:48:50,360
There's still all they do every day all day is Pearl.

645
00:48:50,360 --> 00:48:53,360
I'm like, guys, there's a lot of other stuff out there now.

646
00:48:53,360 --> 00:48:56,360
You know, just give it a hard time.

647
00:48:56,360 --> 00:48:58,360
But environment variables are the same.

648
00:48:58,360 --> 00:49:02,360
I don't know if you can notice this, but you see how things look a lot similar to Shell, right?

649
00:49:02,360 --> 00:49:05,360
This is a file spec is a standard library for joining.

650
00:49:05,360 --> 00:49:09,360
So you can do it in a, you know, in a standard way.

651
00:49:09,360 --> 00:49:13,360
If it looks a little bit like, you know, I also find interesting.

652
00:49:13,360 --> 00:49:15,360
Doesn't this look a little bit like Rust?

653
00:49:15,360 --> 00:49:17,360
It does, doesn't it?

654
00:49:17,360 --> 00:49:20,360
In fact, there's remarkable similarities between Pearl syntax and Rust syntax.

655
00:49:20,360 --> 00:49:22,360
I think I find always find interesting.

656
00:49:22,360 --> 00:49:28,360
You can sometimes run into a Rust person that will slam Pearl for being right only or read only because the syntax is so bad.

657
00:49:28,360 --> 00:49:35,360
Meanwhile, they're on syntax.

658
00:49:35,360 --> 00:49:38,360
That's not, I mean, I'm going to say it again.

659
00:49:38,360 --> 00:49:49,360
Since I had, I just moderated like 80 comments on my 48,000 hit Rust is slow and I changed the title and everything to try to get people to leave me alone.

660
00:49:49,360 --> 00:49:51,360
Over that thing.

661
00:49:51,360 --> 00:49:56,360
But no one watches the end 14% of the people only 14% of the people watch.

662
00:49:56,360 --> 00:49:59,360
They only watch the first like 20 minutes of that Rust video.

663
00:49:59,360 --> 00:50:01,360
They don't see any of my conclusions at the end.

664
00:50:01,360 --> 00:50:03,360
They just see the first stuff and then they go off.

665
00:50:03,360 --> 00:50:05,360
Most of them don't even watch the video.

666
00:50:05,360 --> 00:50:11,360
So I had to be careful by making this video and try to be more specific about it.

667
00:50:11,360 --> 00:50:15,360
I'm going to go ahead and drop the stream here pretty soon and restart the stream.

668
00:50:15,360 --> 00:50:19,360
I have a little coffee with my wife and I'll come back.

669
00:50:19,360 --> 00:50:21,360
I'll be coding in Pearl all day today and tomorrow.

670
00:50:21,360 --> 00:50:24,360
In fact, I'm going to be coding in Pearl a lot over the next few days.

671
00:50:24,360 --> 00:50:32,360
Most of my shell script library in my .files is going to be converted to Pearl sub commands of the KN tool.

672
00:50:32,360 --> 00:50:40,360
And the rest of them are probably going to, I'm going to rewrite them in either POSIX and dash or a few will remain as bash.

673
00:50:40,360 --> 00:50:44,360
But I'm personally going to start writing everything.

674
00:50:44,360 --> 00:50:48,360
All my shell scripts will either be in POSIX, Shell or Pearl.

675
00:50:48,360 --> 00:50:54,360
And to the ZShell people out there, that's probably going to be music to your ears because everything I write, you'll be able to use.

676
00:50:54,360 --> 00:50:56,360
You could use the bash stuff anyway, right?

677
00:50:56,360 --> 00:51:00,360
Because it's got a shebang line that points to bash and your system probably has bash on it even if it has ZShell.

678
00:51:00,360 --> 00:51:04,360
Not if you have a Mac though, but there's a good bet that you have Pearl on it.

679
00:51:04,360 --> 00:51:08,360
So say, for example, you're a Mac user and you want to use any of the stuff that I write.

680
00:51:08,360 --> 00:51:17,360
You'll be able to use it because it'll either be in POSIX Shell, which is ZShell compatible, or it'll be in Pearl.

681
00:51:17,360 --> 00:51:20,360
And you already got Pearl in your system usually.

682
00:51:20,360 --> 00:51:26,360
In fact, anybody got a Mac handy right now, they can just go on their terminal and do which Pearl or do pearl dash version.

683
00:51:26,360 --> 00:51:31,360
Anybody have a Mac out there and want to admit it?

684
00:51:31,360 --> 00:51:34,360
I would love to see what version Mac comes with.

685
00:51:34,360 --> 00:51:40,360
It might not come with it though, but Pearl Artistic License is completely different than GPL3.

686
00:51:40,360 --> 00:51:45,360
So I think it has a good shot of still staying on the system, maybe not though.

687
00:51:45,360 --> 00:51:48,360
5.32, seriously, on your Mac?

688
00:51:48,360 --> 00:51:50,360
Wow, I'm impressed.

689
00:51:50,360 --> 00:51:53,360
So there's another reason to use it.

690
00:51:53,360 --> 00:52:02,360
Yeah, so I'm going to, I mean, another reason to write your shell scripts is if you write your shell scripts in bash, default Mac users won't be able to run your shell script.

691
00:52:02,360 --> 00:52:04,360
Because bash has to be installed.

692
00:52:04,360 --> 00:52:06,360
They can run your pearl script.

693
00:52:06,360 --> 00:52:08,360
We just proved it.

694
00:52:08,360 --> 00:52:11,360
They can run your POSIX Shell scripts.

695
00:52:11,360 --> 00:52:25,360
So if you're searching for usability across the board for your team and for your friends, or if you're a live streamer who wants to be able to share cool things with people, you know, it kind of behooves you to write it either in POSIX Shell.

696
00:52:25,360 --> 00:52:31,360
And interestingly, that's the position I had in 2007.

697
00:52:31,360 --> 00:52:34,360
Or Python, but Python has to be installed, right?

698
00:52:34,360 --> 00:52:37,360
So yeah, there are slight differences with Active Pearl, Strawberry Pearl.

699
00:52:37,360 --> 00:52:39,360
Yeah, especially using different modules.

700
00:52:39,360 --> 00:52:42,360
Yeah, I don't, but none of those need to be installed.

701
00:52:42,360 --> 00:52:44,360
Yeah, yep.

702
00:52:44,360 --> 00:52:46,360
Good old Active Pearl, Strawberry Pearl.

703
00:52:46,360 --> 00:52:48,360
Anybody ever play with Indigo Pearl?

704
00:52:48,360 --> 00:52:52,360
That's how I used to, I got Indigo Pearl.

705
00:52:52,360 --> 00:52:54,360
I'm not a Pearl 7 or a Pearl 6 fan.

706
00:52:54,360 --> 00:52:56,360
I will only use the Pearl that comes on the system.

707
00:52:56,360 --> 00:53:01,360
The very purpose of Pearl is to have a shell script that's on everything that just works.

708
00:53:01,360 --> 00:53:03,360
And that's Pearl 5.

709
00:53:03,360 --> 00:53:05,360
And that's never going to be Pearl 6 or 7.

710
00:53:05,360 --> 00:53:10,360
If you're reaching for Pearl 6 or 7, then you're making a different decision.

711
00:53:10,360 --> 00:53:11,360
You know what I'm saying?

712
00:53:11,360 --> 00:53:17,360
You're now making a decision about kind of a different scope of application.

713
00:53:17,360 --> 00:53:20,360
And at that point, you've got lots of things to evaluate, right?

714
00:53:20,360 --> 00:53:22,360
You've got to see, is this better than TypeScript?

715
00:53:22,360 --> 00:53:27,360
Is this better than Go or Rust if it's like low level?

716
00:53:27,360 --> 00:53:31,360
I am never going to code any Pearl other than Pearl 5.

717
00:53:31,360 --> 00:53:35,360
Because I want, I just want the shell script.

718
00:53:35,360 --> 00:53:36,360
That's what Pearl was intended to be.

719
00:53:36,360 --> 00:53:38,360
That's the best thing it ever was.

720
00:53:38,360 --> 00:53:41,360
And the fact that it keeps getting pushed to be more, I think is a mistake.

721
00:53:41,360 --> 00:53:43,360
I apologize, Pearl people out there.

722
00:53:43,360 --> 00:53:47,360
I know some of you are very hard working and they tried really hard with Pearl 6.

723
00:53:47,360 --> 00:53:58,360
But Pearl 6 is a perfect example of what Brian Cantrell, formerly a joint now from Oxide Computing, calls Second System Syndrome.

724
00:53:58,360 --> 00:54:06,360
It's when you open up the gates because you're going to make a new thing and all of a sudden it never gets done all of a sudden.

725
00:54:06,360 --> 00:54:12,360
Because so many new ideas come in and they overweigh the thing so it never gets done.

726
00:54:12,360 --> 00:54:14,360
Because you just keep trying to do it.

727
00:54:14,360 --> 00:54:21,360
So I think all of the Pearl versions beyond Pearl 5 suffer from Second System Syndrome.

728
00:54:21,360 --> 00:54:23,360
And they frankly, they open the door for Python.

729
00:54:23,360 --> 00:54:27,360
I would easily pick Python over Pearl 6 or 7 any day.

730
00:54:27,360 --> 00:54:32,360
Just based on the TensorFlow support and all its wide adoption and Jupyter notebooks.

731
00:54:32,360 --> 00:54:38,360
And I mean, I know those things can be done in Pearl 2, but there are so many reasons to stick with Python for that stuff.

732
00:54:38,360 --> 00:54:43,360
And automation, all of that stuff.

733
00:54:43,360 --> 00:54:46,360
Pearl 5 after 4, yeah, completely fair.

734
00:54:46,360 --> 00:54:47,360
That's a fair critique.

735
00:54:47,360 --> 00:54:48,360
Yep.

736
00:54:48,360 --> 00:54:49,360
Yeah.

737
00:54:49,360 --> 00:54:50,360
Yeah, finding talk.

738
00:54:50,360 --> 00:54:51,360
I'm off.

739
00:54:51,360 --> 00:54:52,360
Take care Q-Macro.

740
00:54:52,360 --> 00:54:53,360
I completely agree.

741
00:54:53,360 --> 00:54:58,360
A lot of people don't know this, but Pearl 4 didn't have this notation at all.

742
00:54:58,360 --> 00:55:01,360
This reference notation right here.

743
00:55:01,360 --> 00:55:03,360
See this file spec stuff like this?

744
00:55:03,360 --> 00:55:05,360
That was all of Pearl 5 edition.

745
00:55:05,360 --> 00:55:07,360
Yeah, the split between Pearl 4 and 5.

746
00:55:07,360 --> 00:55:10,360
Pearl 4 was really, really just a better awk.

747
00:55:10,360 --> 00:55:14,360
And you didn't have this idea of objects at all and bless.

748
00:55:14,360 --> 00:55:16,360
I don't even want to talk to you about stuff.

749
00:55:16,360 --> 00:55:17,360
That stuff.

750
00:55:17,360 --> 00:55:19,360
In fact, I would suggest you not even use it.

751
00:55:19,360 --> 00:55:21,360
I really, I think as best as possible.

752
00:55:21,360 --> 00:55:30,360
I do hear because I'm doing a join, but for the most part, I would rather you try to stick with Pearl 4 syntax as much as you can and keep it functional.

753
00:55:30,360 --> 00:55:36,360
And if you get too much into the pro object oriented world, which you can totally do with the thing called bless.

754
00:55:36,360 --> 00:55:38,360
Python does the same thing as bless, by the way.

755
00:55:38,360 --> 00:55:40,360
They just don't call it that.

756
00:55:40,360 --> 00:55:44,360
Then you're kind of going off the deep end at that point.

757
00:55:44,360 --> 00:55:51,360
If you're reaching for bless or for some way to make an object, you're probably doing it in the wrong language.

758
00:55:51,360 --> 00:55:56,360
And you probably want to rethink your selection of Pearl for that and move to something else.

759
00:55:56,360 --> 00:55:59,360
And keep Pearl as a glorified shell language.

760
00:55:59,360 --> 00:56:02,360
And then you'll be fine because that's what it's really, really great at doing.

761
00:56:02,360 --> 00:56:05,360
So anyway, yeah.

762
00:56:05,360 --> 00:56:08,360
So any other questions?

763
00:56:08,360 --> 00:56:10,360
Let me talk to the YouTube people for a second.

764
00:56:10,360 --> 00:56:19,360
Oh, here, by the way, here is the regular expression I want to see if people can test in their own languages and see their preferred languages and see if they can match it.

765
00:56:19,360 --> 00:56:21,360
So we have a match.

766
00:56:21,360 --> 00:56:31,360
This matches any uppercase letter character according to the Unicode classification, which includes several letters that are not in the code play.

767
00:56:31,360 --> 00:56:34,360
If you're interested in this, by the way, this stuff is all in the pagan notation.

768
00:56:34,360 --> 00:56:44,360
If you go to getup.com slash pagan and you click on spec and then classes in there, you'll see all of these planes subdivided out by their exact character names.

769
00:56:44,360 --> 00:56:47,360
And so you can decide if the match is actually working.

770
00:56:47,360 --> 00:56:55,360
We did that because we built it into the specification, into the parsing expression grammar notation, into the specification for that.

771
00:56:55,360 --> 00:56:56,360
No more talking about that, though.

772
00:56:56,360 --> 00:56:58,360
If you want to know about that, we do that on Fridays.

773
00:56:58,360 --> 00:57:05,360
We work on the pagan grammar notation, meta language, and writing all of that stuff up, which is really fun.

774
00:57:05,360 --> 00:57:12,360
That's how I happened to know about this because I was going through it and because of pagan, I was like, well, gosh, I really don't want to just match upper ASCII here.

775
00:57:12,360 --> 00:57:19,360
I want to match any uppercase letter even though I think environment variables, as a default, must be ASCII characters.

776
00:57:19,360 --> 00:57:22,360
I think that's the requirement for all systems, but I don't know that.

777
00:57:22,360 --> 00:57:27,360
So this is just a match to isolate any action that might actually be an environment variable, which allows me to do this.

778
00:57:27,360 --> 00:57:31,360
So now I can just do a KN path, and it will show me the whole path, right?

779
00:57:31,360 --> 00:57:33,360
I can do, you know, whatever.

780
00:57:33,360 --> 00:57:36,360
And I can do some other things with KN.

781
00:57:36,360 --> 00:57:44,360
But if you want to know more about the KN tool and you have questions about what it does and how it works and why I'm doing it, stick around.

782
00:57:44,360 --> 00:57:47,360
And when I come back, I'm going to be coding on that all day today.

783
00:57:47,360 --> 00:57:49,360
And I'll be coding in Perl, mostly.

784
00:57:49,360 --> 00:57:55,360
Perl and, in fact, I'm going to be moving all of my library, my dotfalls library, either to Perl or to POSIX shell.

785
00:57:55,360 --> 00:57:59,360
So if those topics interest you, please stay tuned.

786
00:57:59,360 --> 00:58:06,360
I won't always be talking a lot, because, you know, you can listen to the desert in the background if you want.

787
00:58:06,360 --> 00:58:13,360
I thought I'd bring up the old Perl Camel for fun, because, you know, Perl's not lost in the desert.

788
00:58:13,360 --> 00:58:16,360
It's still getting used all over the place, right, Cypheric?

789
00:58:16,360 --> 00:58:19,360
Anyway, it's been fun.

790
00:58:19,360 --> 00:58:22,360
I'm going to go check our YouTubers who don't have a way to communicate with us right now.

791
00:58:22,360 --> 00:58:24,360
It's unfortunate.

792
00:58:24,360 --> 00:58:25,360
Uh-oh.

793
00:58:25,360 --> 00:58:26,360
Message retacted.

794
00:58:26,360 --> 00:58:28,360
We had a couple of messages get retacted.

795
00:58:28,360 --> 00:58:31,360
Looks like they didn't want to follow through with it anyway.

796
00:58:31,360 --> 00:58:35,360
Maybe they came in to our other thing.

797
00:58:35,360 --> 00:58:39,360
So, Alexi, did you get your question answered?

798
00:58:39,360 --> 00:58:42,360
And, Catalan, I was planning on using a Perl set of Bash scripts.

799
00:58:42,360 --> 00:58:43,360
What do you think?

800
00:58:43,360 --> 00:58:45,360
I think it's a great idea.

801
00:58:45,360 --> 00:58:46,360
I do.

802
00:58:46,360 --> 00:58:50,360
And you're hearing this from a guy who was big on Bash until two days ago.

803
00:58:50,360 --> 00:58:53,360
Two days ago, I got really burned by Bash.

804
00:58:53,360 --> 00:58:56,360
And the first burn was that, oh, okay.

805
00:58:56,360 --> 00:58:57,360
Thank you.

806
00:58:57,360 --> 00:58:58,360
Thank you.

807
00:58:58,360 --> 00:59:03,360
The first burn about Bash was that I could not match Unicode characters.

808
00:59:03,360 --> 00:59:05,360
That was the first burn.

809
00:59:05,360 --> 00:59:10,360
And the second one was that I could not do documentation.

810
00:59:10,360 --> 00:59:15,360
And we haven't even talked about that, but Perl has wicked awesome documentation support.

811
00:59:15,360 --> 00:59:20,360
You write the documentation in the script file at the end.

812
00:59:20,360 --> 00:59:24,360
So it doesn't, your interpreter doesn't have to go through the hassle of parsing it

813
00:59:24,360 --> 00:59:26,360
like it does with Python.

814
00:59:26,360 --> 00:59:29,360
And it makes it wicked fast.

815
00:59:29,360 --> 00:59:33,360
And so that way your little script that was, at one point it was just a little shell script

816
00:59:33,360 --> 00:59:38,360
and now it's a Perl script can actually document it in a way that is totally marked.

817
00:59:38,360 --> 00:59:40,360
You can mark it up and everything using pod.

818
00:59:40,360 --> 00:59:45,360
Pod's an old format, but it still allows you to do to create man pages and stuff for your little shell script.

819
00:59:45,360 --> 00:59:48,360
So you got little shell script that you made as it can grow up.

820
00:59:48,360 --> 00:59:53,360
And because it's all coming at the end of the file, the interpreter completely ignores it.

821
00:59:53,360 --> 00:59:55,360
Completely ignores it.

822
00:59:55,360 --> 00:59:57,360
So it's extremely efficient documentation.

823
00:59:57,360 --> 01:00:05,360
So for the KN tool, I wanted to document each of these commands that I'm making, these actions I'm calling them.

824
01:00:05,360 --> 01:00:08,360
And I was like putting these big long bash comments and stuff.

825
01:00:08,360 --> 01:00:10,360
I'm like, man, this is horrible.

826
01:00:10,360 --> 01:00:14,360
And then I remembered how well and easy it was to document your functions in Perl.

827
01:00:14,360 --> 01:00:20,360
I mean, to document everything in Perl using Perl pod after the underscore underscore end and putting it all there.

828
01:00:20,360 --> 01:00:22,360
And so that documentation travels with your script.

829
01:00:22,360 --> 01:00:31,360
So once again, that and the Unicode support caused me to change writing my KN actions from bash to Perl.

830
01:00:31,360 --> 01:00:38,360
And frankly, based on that, I won't be returning to bash other than as an interactive shell.

831
01:00:38,360 --> 01:00:42,360
I won't be writing any more shell scripts in bash because of it.

832
01:00:42,360 --> 01:00:43,360
And I love bash.

833
01:00:43,360 --> 01:00:44,360
Don't get me wrong.

834
01:00:44,360 --> 01:00:45,360
I love it.

835
01:00:45,360 --> 01:00:46,360
I think it's really cool.

836
01:00:46,360 --> 01:00:47,360
I learned a lot going through it.

837
01:00:47,360 --> 01:00:50,360
I still think reading through the bash user guidelines is fine.

838
01:00:50,360 --> 01:00:56,360
But I've got to tell you, I was getting a little bit annoyed at all the stuff for variables that I had to do to use the Perl in bash.

839
01:00:56,360 --> 01:01:04,360
In bash, I had to make sure that I had curly brackets and double quotes around all my variables and I had to write a little macro to do that.

840
01:01:04,360 --> 01:01:06,360
And I was starting to wear on me.

841
01:01:06,360 --> 01:01:09,360
And then last night, I started writing all the same stuff in Perl.

842
01:01:09,360 --> 01:01:11,360
And it was like, I wasn't pushing a rock uphill anymore.

843
01:01:11,360 --> 01:01:12,360
It was like easy.

844
01:01:12,360 --> 01:01:16,360
I can just use $ whatever for a variable name and just be done with it.

845
01:01:16,360 --> 01:01:19,360
And it was just so liberating.

846
01:01:19,360 --> 01:01:21,360
And it just started flowing again.

847
01:01:21,360 --> 01:01:26,360
Not just because I knew it before, but because it's a much better language to write shell scripts in.

848
01:01:26,360 --> 01:01:28,360
And that's what it's always been intended for.

849
01:01:28,360 --> 01:01:34,360
So anyway, also I feel Perl is easier to read than bash.

850
01:01:34,360 --> 01:01:35,360
Yes, absolutely.

851
01:01:35,360 --> 01:01:38,360
In fact, can I show you the bash equivalent?

852
01:01:38,360 --> 01:01:43,360
So the other thing that, and you got to understand, I was really loving on bash.

853
01:01:43,360 --> 01:01:49,360
But let me show you this here.

854
01:01:49,360 --> 01:01:55,360
So here's a good example of where bash falls on its face.

855
01:01:55,360 --> 01:01:58,360
The fact that you can do it is still pretty cool.

856
01:01:58,360 --> 01:01:59,360
I'm sorry for the background.

857
01:01:59,360 --> 01:02:06,360
It's a little bit off, but so here is the code to do completion for build scripts.

858
01:02:06,360 --> 01:02:08,360
Oh, yeah.

859
01:02:08,360 --> 01:02:11,360
Perl has got awesome support on Windows.

860
01:02:11,360 --> 01:02:18,360
You usually have to install something, but usually people are running it on Linux through WSL or something like that.

861
01:02:18,360 --> 01:02:23,360
So let me see if I can find it offline.

862
01:02:23,360 --> 01:02:33,360
All right, so this code right here, so this is code that converts.

863
01:02:33,360 --> 01:02:37,360
I mean, it's just as every bit is dense as Perl, right?

864
01:02:37,360 --> 01:02:41,360
The difference is that it's not as powerful as Perl.

865
01:02:41,360 --> 01:02:49,360
So if you're going to buy off on that kind of, this replaces everything up to the dot.

866
01:02:49,360 --> 01:02:52,360
Actually, this replaces all the dots with the slash, right?

867
01:02:52,360 --> 01:02:53,360
So that's what it does.

868
01:02:53,360 --> 01:02:55,360
But this is where it really gets crazy.

869
01:02:55,360 --> 01:03:00,360
So let me see if I can find it.

870
01:03:00,360 --> 01:03:01,360
Compliant.

871
01:03:01,360 --> 01:03:02,360
Where's my complaint?

872
01:03:02,360 --> 01:03:05,360
I guess I took it out already.

873
01:03:05,360 --> 01:03:07,360
Yep.

874
01:03:07,360 --> 01:03:10,360
See dot files.

875
01:03:10,360 --> 01:03:13,360
Scripts.

876
01:03:13,360 --> 01:03:16,360
I might remove those icons.

877
01:03:16,360 --> 01:03:18,360
They're kind of annoying.

878
01:03:18,360 --> 01:03:22,360
I was just trying another thing for icons.

879
01:03:23,360 --> 01:03:24,360
Let's try Perl.

880
01:03:24,360 --> 01:03:26,360
Yeah, for Windows.

881
01:03:30,360 --> 01:03:31,360
Where is it?

882
01:03:31,360 --> 01:03:32,360
Right here?

883
01:03:32,360 --> 01:03:34,360
No, I think I removed it already.

884
01:03:34,360 --> 01:03:35,360
Oh, well.

885
01:03:35,360 --> 01:03:40,360
Actually, I have another one that does this.

886
01:03:40,360 --> 01:03:44,360
All right, so this command, this here, see this?

887
01:03:44,360 --> 01:03:50,360
This code right here fulfills tab completion by checking to see if an environment variable has a

888
01:03:50,360 --> 01:03:51,360
compliance set.

889
01:03:51,360 --> 01:03:54,360
And if it does, it iterates over all of the commands.

890
01:03:54,360 --> 01:03:57,360
This is how you write, and this is, I'm just going to say it.

891
01:03:57,360 --> 01:03:58,360
This is ugly.

892
01:03:58,360 --> 01:04:06,360
This is how you write a dictionary in Bash.

893
01:04:06,360 --> 01:04:07,360
Yeah.

894
01:04:07,360 --> 01:04:09,360
Ugly sin, right?

895
01:04:09,360 --> 01:04:11,360
You know how you write that in Perl?

896
01:04:11,360 --> 01:04:15,360
Hashtag, I mean percent commands.

897
01:04:15,360 --> 01:04:20,360
But you have to type all of that just to get to that in Bash.

898
01:04:20,360 --> 01:04:25,360
This here points to malware.

899
01:04:25,360 --> 01:04:28,360
The address tied to malware.

900
01:04:28,360 --> 01:04:29,360
What's that?

901
01:04:29,360 --> 01:04:33,360
Perl com domain.

902
01:04:33,360 --> 01:04:35,360
IP address tied to malware.

903
01:04:35,360 --> 01:04:37,360
Oh, boy.

904
01:04:37,360 --> 01:04:39,360
Perl.com points to malware.

905
01:04:39,360 --> 01:04:41,360
It doesn't surprise me.

906
01:04:42,360 --> 01:04:43,360
Yeah.

907
01:04:43,360 --> 01:04:44,360
There's a lot of hackers still using Perl.

908
01:04:44,360 --> 01:04:45,360
Not just old people.

909
01:04:45,360 --> 01:04:48,360
This here says replace.

910
01:04:48,360 --> 01:04:55,360
This says, does the substring from zero to however long the first argument is, which

911
01:04:55,360 --> 01:05:00,360
is like maybe five, 10, six characters, does it equal that same value to see?

912
01:05:00,360 --> 01:05:02,360
It's basically a substring match.

913
01:05:02,360 --> 01:05:05,360
That match is like no problem.

914
01:05:05,360 --> 01:05:07,360
It's like half that length in Perl.

915
01:05:08,360 --> 01:05:15,360
The one I was really going to show you is the dereferencing.

916
01:05:15,360 --> 01:05:20,360
When you're dereferencing a function and you want to do alias and stuff like that, Bash

917
01:05:20,360 --> 01:05:23,360
just really falls apart because it's not designed for that.

918
01:05:23,360 --> 01:05:25,360
Bash is not meant to do that kind of thing.

919
01:05:25,360 --> 01:05:27,360
You know what I mean?

920
01:05:27,360 --> 01:05:29,360
They forgot to renew the domain.

921
01:05:29,360 --> 01:05:31,360
That doesn't surprise me.

922
01:05:31,360 --> 01:05:36,360
A lot of the Perlmongers are tired.

923
01:05:36,360 --> 01:05:39,360
They're just like, I just want to make my stuff work.

924
01:05:39,360 --> 01:05:44,360
That's another reason I decided to do an entire video on Perl because a lot of them

925
01:05:44,360 --> 01:05:47,360
aren't doing anything.

926
01:05:47,360 --> 01:05:49,360
I'm going to call you out, guys.

927
01:05:49,360 --> 01:05:53,360
They're stuck on UCP and they don't come up for air.

928
01:05:53,360 --> 01:05:59,360
They barely got on Twitter like three years ago.

929
01:05:59,360 --> 01:06:01,360
I hate to say it, but it's true.

930
01:06:01,360 --> 01:06:06,360
There are many people from the Perl community who are stuck in the past.

931
01:06:06,360 --> 01:06:07,360
They're good.

932
01:06:07,360 --> 01:06:09,360
They're smart in their intelligence.

933
01:06:09,360 --> 01:06:12,360
Would they consider live streaming?

934
01:06:12,360 --> 01:06:14,360
Probably not.

935
01:06:14,360 --> 01:06:22,360
I figured I had to make a video on it at least to show people what's available.

936
01:06:22,360 --> 01:06:24,360
People didn't even want to use the terminal.

937
01:06:24,360 --> 01:06:26,360
Now everybody is starting to see the terminal.

938
01:06:26,360 --> 01:06:29,360
That's largely because people who have been making powerful use of the terminal for years

939
01:06:29,360 --> 01:06:31,360
are finally making videos and showing it.

940
01:06:31,360 --> 01:06:32,360
Hey, this thing is actually a thing.

941
01:06:32,360 --> 01:06:36,360
In fact, I've seen several security people do things.

942
01:06:36,360 --> 01:06:39,360
Hammond comes to mind.

943
01:06:39,360 --> 01:06:41,360
Stoke, I think his name is.

944
01:06:41,360 --> 01:06:43,360
A couple of people have done videos on the terminal.

945
01:06:43,360 --> 01:06:45,360
The terminal is really awesome for cybersecurity.

946
01:06:45,360 --> 01:06:48,360
Oh, news flash.

947
01:06:48,360 --> 01:06:52,360
Because they're doing it, other people are becoming interested because the generation,

948
01:06:52,360 --> 01:06:54,360
that's where they get their data.

949
01:06:54,360 --> 01:06:56,360
Everyone else is like, well, yeah.

950
01:06:56,360 --> 01:07:03,360
But there's not a lot of people making content that's digestible.

951
01:07:03,360 --> 01:07:05,360
I'm just going to say it.

952
01:07:05,360 --> 01:07:10,360
The older generation is not communicating their knowledge to the younger generation.

953
01:07:10,360 --> 01:07:15,360
They're doing their thing and they're too busy to be bothered to do it.

954
01:07:15,360 --> 01:07:16,360
They're making their craft beer.

955
01:07:16,360 --> 01:07:19,360
They're doing whatever they're doing and they're not sharing.

956
01:07:19,360 --> 01:07:23,360
So I figured I at least needed to start sharing.

957
01:07:23,360 --> 01:07:27,360
It doesn't mean what I have to say is anything is any better than what anybody else has to say.

958
01:07:27,360 --> 01:07:31,360
It just means that I just have an opinion to the voice as well.

959
01:07:31,360 --> 01:07:34,360
And so we can put that out there with everybody else.

960
01:07:34,360 --> 01:07:35,360
What's that?

961
01:07:35,360 --> 01:07:39,360
I switched to Win at 10 to FreeBSD and JWM for the exact reason of never going back.

962
01:07:39,360 --> 01:07:43,360
And I'd be curious, does your FreeBSD come with parole?

963
01:07:43,360 --> 01:07:44,360
I'm not going to rip on you.

964
01:07:44,360 --> 01:07:45,360
I promise.

965
01:07:45,360 --> 01:07:46,360
Don't be afraid.

966
01:07:46,360 --> 01:07:48,360
Does your BSD have parole on it by default?

967
01:07:48,360 --> 01:07:51,360
I'm pretty sure it doesn't, right?

968
01:07:51,360 --> 01:07:52,360
Yeah.

969
01:07:52,360 --> 01:08:00,360
I read a bunch of stuff that said that the modern BSD variants have successfully ripped parole dependencies out of everything.

970
01:08:00,360 --> 01:08:05,360
I still think Git has a dependency on it, but I think it's built into the problem, to the program.

971
01:08:05,360 --> 01:08:07,360
And I understand why they did that.

972
01:08:07,360 --> 01:08:11,360
I think it was a stupid decision, but I understand why they did it, right?

973
01:08:11,360 --> 01:08:18,360
But anyway, trying to turn it back to processes going on right now for parole.com.

974
01:08:18,360 --> 01:08:20,360
Oh, wow.

975
01:08:20,360 --> 01:08:23,360
Yeah, Git is heavily dependent on parole, right?

976
01:08:23,360 --> 01:08:26,360
When I joined development, parole was already considered legacy.

977
01:08:26,360 --> 01:08:27,360
Yeah.

978
01:08:27,360 --> 01:08:29,360
So it's interesting to hear that alternative point of view.

979
01:08:29,360 --> 01:08:31,360
Well, I'm going to say something here.

980
01:08:31,360 --> 01:08:33,360
Pearl is legacy.

981
01:08:33,360 --> 01:08:35,360
You know what else is legacy?

982
01:08:35,360 --> 01:08:36,360
Linux.

983
01:08:36,360 --> 01:08:38,360
Linux is legacy.

984
01:08:38,360 --> 01:08:41,360
Linux is older than parole.

985
01:08:41,360 --> 01:08:43,360
Is that true?

986
01:08:43,360 --> 01:08:45,360
No, I don't even think that's true.

987
01:08:45,360 --> 01:08:47,360
I think parole is older than Linux.

988
01:08:47,360 --> 01:08:49,360
I would love to know that.

989
01:08:49,360 --> 01:08:57,360
The point is, using parole for machine learning is idiotic and definitely legacy.

990
01:08:57,360 --> 01:09:03,360
But using parole as a better awk, as a better said, is...

991
01:09:03,360 --> 01:09:04,360
Yeah, it's 87.

992
01:09:04,360 --> 01:09:05,360
Yeah, clean start.

993
01:09:05,360 --> 01:09:13,360
Using parole for what it was intended to be used for, which it is still the best in breed at doing, is not legacy.

994
01:09:13,360 --> 01:09:15,360
It's not legacy.

995
01:09:15,360 --> 01:09:16,360
I mean, the code bases are trying to migrate.

996
01:09:16,360 --> 01:09:17,360
God, yes.

997
01:09:17,360 --> 01:09:22,360
The term parole code base is a fucking oxymoron.

998
01:09:22,360 --> 01:09:25,360
Sorry.

999
01:09:25,360 --> 01:09:28,360
Sorry for the swear word.

1000
01:09:28,360 --> 01:09:30,360
It's a tool for the job.

1001
01:09:30,360 --> 01:09:32,360
Yeah, it's a tool for the job.

1002
01:09:32,360 --> 01:09:34,360
And I recently had to blog a lot about this.

1003
01:09:34,360 --> 01:09:40,360
I find myself, you know, getting uptight for having to defend tools that are the best tools for the job.

1004
01:09:40,360 --> 01:09:43,360
And sometimes, you know, people...

1005
01:09:43,360 --> 01:09:47,360
I get overly defensive about it, and I call people assholes and stuff, which I shouldn't do.

1006
01:09:47,360 --> 01:09:49,360
I did that yesterday to Mosh if you're out there.

1007
01:09:49,360 --> 01:09:50,360
I apologize.

1008
01:09:50,360 --> 01:09:52,360
You know, I...

1009
01:09:52,360 --> 01:09:53,360
It's not about that.

1010
01:09:53,360 --> 01:09:57,360
What it's about is it's like what Cypheric says, it's the best tool for the job.

1011
01:09:57,360 --> 01:10:04,360
If the job is parsing text that potentially has Unicode in it, there is no better tool on planet Earth than parole right now.

1012
01:10:04,360 --> 01:10:11,360
Your language doesn't do backslash p capital L U to parse uppercase letters in Unicode.

1013
01:10:11,360 --> 01:10:13,360
It doesn't do it.

1014
01:10:13,360 --> 01:10:16,360
And so, you know, just best tool for the job.

1015
01:10:16,360 --> 01:10:22,360
And if the job is a better bash, that's going to write a shell script and prototype rapid applications development in,

1016
01:10:22,360 --> 01:10:27,360
and then port it perhaps if you're going to, you know, write a module or thing that does grow a little bit,

1017
01:10:27,360 --> 01:10:30,360
then at that point, yeah, do it in Python, do it in Go, do it in something else.

1018
01:10:30,360 --> 01:10:37,360
But having a parole code base that's not a bunch of scripts, that's definitely legacy, in my opinion.

1019
01:10:37,360 --> 01:10:38,360
In my opinion, that's legacy.

1020
01:10:38,360 --> 01:10:39,360
You know what else is legacy?

1021
01:10:39,360 --> 01:10:47,360
Using anything with parole moose or mong, you know, there's all kinds of object-oriented things that got added onto parole.

1022
01:10:47,360 --> 01:10:48,360
I hated all of them.

1023
01:10:48,360 --> 01:10:53,360
I tried really hard to make parole into object-oriented language back when I drank the object-oriented Kool-Aid.

1024
01:10:53,360 --> 01:10:56,360
But then, you know, the parole class is pregnant that I made.

1025
01:10:56,360 --> 01:11:00,360
But the fact of the matter is, is if parole has no business in that space,

1026
01:11:00,360 --> 01:11:05,360
I have a parole code base running on 52,000 machines that I've been to this day.

1027
01:11:05,360 --> 01:11:08,360
And I wrote it, and for only going, I got shipped.

1028
01:11:08,360 --> 01:11:10,360
It was my endpoint for collecting data.

1029
01:11:10,360 --> 01:11:13,360
But that was definitely a sweet spot application for Go.

1030
01:11:13,360 --> 01:11:17,360
And if I had it to do today, I would have done the whole thing in Go.

1031
01:11:17,360 --> 01:11:19,360
But we didn't have those options back then.

1032
01:11:19,360 --> 01:11:24,360
So I definitely agree that most parole in the enterprise that you're going to encounter, or anywhere, frankly,

1033
01:11:24,360 --> 01:11:26,360
is going to be legacy.

1034
01:11:26,360 --> 01:11:27,360
The application is legacy.

1035
01:11:27,360 --> 01:11:30,360
The application of parole in that instance is legacy.

1036
01:11:30,360 --> 01:11:34,360
But parole itself is not legacy at all.

1037
01:11:34,360 --> 01:11:39,360
Paral is cutting edge when it comes to regular expression parsing.

1038
01:11:39,360 --> 01:11:47,360
It is the front of the pack in creating the best regular expressions known to mankind, humankind, whatever.

1039
01:11:47,360 --> 01:11:50,360
And in that sense, parole is not legacy.

1040
01:11:50,360 --> 01:11:53,360
Paral is the industry standard.

1041
01:11:53,360 --> 01:11:56,360
So as long as you can separate those things, though.

1042
01:11:56,360 --> 01:12:01,360
PCRE is a separate lib, but it does not have slash pat p in it yet, as far as I know.

1043
01:12:01,360 --> 01:12:03,360
If it did, Python would have.

1044
01:12:03,360 --> 01:12:06,360
So that might be that it's a new thing.

1045
01:12:06,360 --> 01:12:08,360
So if anybody has any information on that, I'm wrong.

1046
01:12:08,360 --> 01:12:10,360
I would really love to be wrong on that.

1047
01:12:10,360 --> 01:12:20,360
So please let me know if your language supports the backslash p Unicode class match.

1048
01:12:20,360 --> 01:12:23,360
PCRE is not the same as Paral Regex.

1049
01:12:23,360 --> 01:12:25,360
It's very close.

1050
01:12:25,360 --> 01:12:28,360
Yes, it's very close, but it was heavily inspired by Paral.

1051
01:12:29,360 --> 01:12:35,360
In regular expressions, most people don't ever need a regular expression.

1052
01:12:35,360 --> 01:12:41,360
I'm the first to admit that regular expressions are usually bad.

1053
01:12:41,360 --> 01:12:48,360
Regular expressions are a bad idea if a simple substring match or a split would work.

1054
01:12:48,360 --> 01:12:54,360
Paral regular expressions are an unnecessary complexity that can actually really tank your performance.

1055
01:12:54,360 --> 01:13:01,360
So a lot of times, just a good old substring match or a prefix match or a range match are way better.

1056
01:13:01,360 --> 01:13:09,360
I'm guilty of really, really loving a good regular expression and wanting to do that first because it's just easier to write.

1057
01:13:09,360 --> 01:13:14,360
It's easier to write than a substring this and if this substring matches that, but that code is usually more performant.

1058
01:13:14,360 --> 01:13:18,360
So that's the thing.

1059
01:13:18,360 --> 01:13:20,360
Are more powerful than PCRE?

1060
01:13:20,360 --> 01:13:22,360
Yeah, they are.

1061
01:13:22,360 --> 01:13:25,360
Paral regular expressions continue to be more powerful than PCRE and they will be.

1062
01:13:25,360 --> 01:13:27,360
I think they're going to continue.

1063
01:13:27,360 --> 01:13:32,360
Paral once again proves that on the front of regular expressions, it is not legacy.

1064
01:13:32,360 --> 01:13:38,360
It is the cutting edge and it's going to continue to influence PCRE and the rest of the regular expression.

1065
01:13:38,360 --> 01:13:41,360
It's because it's dominated the industry forever doing that.

1066
01:13:41,360 --> 01:13:48,360
So yes, most code bases are legacy Paral, but Paral itself is anything but legacy.

1067
01:13:48,360 --> 01:13:57,360
And as long as you use it as the most powerful shell scripting language on planet Earth, which it is, then you're going to be fine.

1068
01:13:57,360 --> 01:14:00,360
How's that?

1069
01:14:00,360 --> 01:14:04,360
And you might profit, particularly in cybersecurity.

1070
01:14:04,360 --> 01:14:07,360
You can clean up with cybersecurity.

1071
01:14:07,360 --> 01:14:09,360
Yep, I'm telling you, man.

1072
01:14:09,360 --> 01:14:14,360
I wonder if I might subcode really fast and hack really quickly.

1073
01:14:14,360 --> 01:14:15,360
Paral's your baby.

1074
01:14:15,360 --> 01:14:16,360
Plus it looks cool.

1075
01:14:16,360 --> 01:14:17,360
Hackers love it.

1076
01:14:18,360 --> 01:14:21,360
We'll be sticking to Paral 5 plus instead of a code.

1077
01:14:21,360 --> 01:14:22,360
Yeah, absolutely.

1078
01:14:22,360 --> 01:14:31,360
I personally, I personally, I'm not telling you what to do, but I personally am not ever going to use anything but Paral 5.

1079
01:14:31,360 --> 01:14:43,360
Because the whole point of me using it is that it's everywhere and it has regular expression support for Unicode and that I just know how to write it really quickly.

1080
01:14:43,360 --> 01:14:49,360
I'm not going to use anything that, look, I'm not putting down the people who have made those projects.

1081
01:14:49,360 --> 01:14:59,360
I just, as I said before, if you are using, if you're reaching for something besides Paral 5, you have a lot of other options in that field.

1082
01:14:59,360 --> 01:15:09,360
At that point, you need to compare your choice with a bunch of other things and not just, and not just, you know, a great, you know, the world's best shell scripting language.

1083
01:15:09,360 --> 01:15:11,360
Because that's what it is.

1084
01:15:11,360 --> 01:15:14,360
And, you know, so that's all I'm going to say about that.

1085
01:15:14,360 --> 01:15:20,360
I have not even cracked open Rakudu and the other ones.

1086
01:15:20,360 --> 01:15:25,360
We had, actually, we had one of the developers was on our stream some time ago and she said, you should really give it a try.

1087
01:15:25,360 --> 01:15:27,360
And I, she's very, very nice.

1088
01:15:27,360 --> 01:15:35,360
And I was seriously thinking about looking at it, but I got to tell you, I mean, I like keeping my mind open on those kind of things.

1089
01:15:35,360 --> 01:15:52,360
I, I can't imagine there being, I've been wrong before, but I can't imagine there being anything that I would ever want to code in besides, you know, because every, because Go covers all my other bases.

1090
01:15:52,360 --> 01:16:03,360
And the very few little edge cases that aren't covered by Go are covered by Rust or they're covered by Python or Bash or C.

1091
01:16:04,360 --> 01:16:06,360
There's no more room.

1092
01:16:06,360 --> 01:16:08,360
There's no more room in there.

1093
01:16:08,360 --> 01:16:09,360
You see what I'm saying?

1094
01:16:09,360 --> 01:16:16,360
I mean, it's like, if there's going to be other languages in NIM, for example, NIM is another one that's really, really cool, right?

1095
01:16:16,360 --> 01:16:18,360
Am I getting it right?

1096
01:16:18,360 --> 01:16:19,360
I think it's called NIM.

1097
01:16:19,360 --> 01:16:21,360
I mean, there's a lot of really cool languages.

1098
01:16:21,360 --> 01:16:23,360
Haskell, you know, any of the purely functional.

1099
01:16:24,360 --> 01:16:35,360
If I, you know, if I was going to go to plug in for Pandoc or something like that, then I could see doing, or if I was having a really, really, really highly concurrent system like Discord does, I would do Erlang for that.

1100
01:16:35,360 --> 01:16:41,360
You know, but, but I don't see, I don't see the sweet spot for anything outside of Pro 5.

1101
01:16:41,360 --> 01:16:42,360
If that makes sense.

1102
01:16:42,360 --> 01:16:44,360
Because, you know what I mean?

1103
01:16:44,360 --> 01:16:45,360
You know what I mean?

1104
01:16:45,360 --> 01:16:55,360
Because all the other needs that I would have are well, well covered by other languages, sometimes redundantly well covered, and particularly Rust and C++.

1105
01:16:55,360 --> 01:16:57,360
They both cover and see, right?

1106
01:16:57,360 --> 01:17:08,360
They want, they cover, all of them cover one area of high performance computing that is, you know, arguably harder to write, but more stable and more performant.

1107
01:17:08,360 --> 01:17:12,360
But not the thing that you would grab for every day to make a microservice.

1108
01:17:12,360 --> 01:17:15,360
In fact, you, to write a microservice in Rust seems kind of silly, right?

1109
01:17:15,360 --> 01:17:20,360
It's particularly given all the libraries that exist in, in, for go and to do that very same thing.

1110
01:17:20,360 --> 01:17:30,360
You know, if you're, if you're doing, if you're doing machine learning, it's either, it's either Python, obviously, or, you know, or R, or, you know, scientific computing, or Julia.

1111
01:17:30,360 --> 01:17:41,360
I just don't see there being a lot of space in the language realm for yet another multi-purpose offering.

1112
01:17:41,360 --> 01:17:43,360
That's not one of the ones that's already existed.

1113
01:17:43,360 --> 01:17:45,360
It's already been adopted by everybody.

1114
01:17:45,360 --> 01:17:49,360
And so that's, that's my reason for not really caring about anything besides Pro 5.

1115
01:17:49,360 --> 01:17:53,360
And I apologize if that, if that makes people sad.

1116
01:17:53,360 --> 01:17:56,360
I mean, you know, because there's, there's probably people have done a lot of really good work on that.

1117
01:17:56,360 --> 01:17:58,360
Pro 6 was a complete disaster.

1118
01:17:58,360 --> 01:18:00,360
And you guys, we just have to own it.

1119
01:18:00,360 --> 01:18:04,360
The reason you try to rebrand the whole thing is because Pro 6 was a freaking disaster.

1120
01:18:04,360 --> 01:18:05,360
You couldn't get it right.

1121
01:18:05,360 --> 01:18:06,360
You couldn't plan the thing.

1122
01:18:06,360 --> 01:18:08,360
You tried to spite up more than you could chew.

1123
01:18:08,360 --> 01:18:12,360
You basically tried to do all things for all people and you failed.

1124
01:18:12,360 --> 01:18:19,360
And maybe you finally came around and got it to being something better than it is, but, but at the time it failed.

1125
01:18:19,360 --> 01:18:24,360
I mean, it was, I'm sad to say that because I lived through that.

1126
01:18:24,360 --> 01:18:29,360
I was, I was buying into the 6, the Pro 6 thing and I was sending a waiting, waiting, waiting, waiting, waiting.

1127
01:18:29,360 --> 01:18:36,360
And meanwhile, Python was progressing and people were moving, porting from Pro to Python for enterprise solutions for all the right reasons.

1128
01:18:36,360 --> 01:18:41,360
And, and, you know, C++ was getting a lot of big leverage at that time.

1129
01:18:41,360 --> 01:18:45,360
It was coming into the enterprise because it was easier to write than Bruno was taking over from Java.

1130
01:18:45,360 --> 01:18:47,360
And Java, of course, was dominant through the whole thing.

1131
01:18:47,360 --> 01:18:49,360
And, and then what?

1132
01:18:49,360 --> 01:18:51,360
Nothing.

1133
01:18:51,360 --> 01:18:58,360
And now, you know, like 12 years after I gave up Pearl, someone tells me that there's a version of Pearl that's actually really awesome.

1134
01:18:58,360 --> 01:19:00,360
I'm like, I'm just sorry.

1135
01:19:00,360 --> 01:19:01,360
You had your chance.

1136
01:19:01,360 --> 01:19:02,360
I'm not interested.

1137
01:19:02,360 --> 01:19:10,360
You know, I would, I'm not saying I won't look, but, you know, pre-installed most of us.

1138
01:19:10,360 --> 01:19:11,360
Right.

1139
01:19:11,360 --> 01:19:13,360
Pearl is, but not, but not, not Roku.

1140
01:19:13,360 --> 01:19:14,360
Yeah.

1141
01:19:15,360 --> 01:19:22,360
And one, one of the reasons I say that you should, you know, Pearl for is on everything.

1142
01:19:22,360 --> 01:19:25,360
So, and, and that's pretty much on steroids.

1143
01:19:25,360 --> 01:19:33,360
So if you just keep yourself to, to writing basic Pearl for constructs and you don't do any of the other stuff, you're totally fine.

1144
01:19:33,360 --> 01:19:43,360
You can write at Pearl run anywhere except for BSD, apparently, you know, some BSD stuff and in which case, you know, you have to decide why you're doing that in the first place.

1145
01:19:43,360 --> 01:19:54,360
So, yeah, I don't, I don't believe that I would ever deploy production software in Pearl today.

1146
01:19:54,360 --> 01:19:59,360
And I don't mean that to be as an SRE.

1147
01:19:59,360 --> 01:20:01,360
I would use it all the time as a cybersecurity person.

1148
01:20:01,360 --> 01:20:03,360
I would use it all the time as a, you know, as a tool.

1149
01:20:03,360 --> 01:20:05,360
Anytime I would use bash as a tool.

1150
01:20:05,360 --> 01:20:09,360
It's not like you're going to deploy a thousand lines of bash in a production system.

1151
01:20:09,360 --> 01:20:16,360
If you're doing that, and I know Vera was talking about doing that, and he's porting that code to go right now, picking on him a little bit.

1152
01:20:16,360 --> 01:20:23,360
You know, if you're doing that, that's, that's fine, but it's, it's, it's arguably not the best way to do it.

1153
01:20:23,360 --> 01:20:29,360
Really, if you got 10,000 lines of bash code, you want to reconsider your life priorities.

1154
01:20:29,360 --> 01:20:40,360
You know, I actually refactored 9,000 lines of Pearl for, for VMware integration layer at IBM.

1155
01:20:40,360 --> 01:20:42,360
Yeah, that was not fun.

1156
01:20:42,360 --> 01:20:44,360
You have to duck.

1157
01:20:44,360 --> 01:20:47,360
Love that someone else is loving Pearl the way I do.

1158
01:20:47,360 --> 01:20:49,360
Pearl was my second language after C. Wow.

1159
01:20:49,360 --> 01:20:50,360
Yeah.

1160
01:20:50,360 --> 01:20:53,360
And it does, it feels like C a little bit, you know, don't you?

1161
01:20:53,360 --> 01:20:57,360
I love Pearl for what Pearl is designed to be.

1162
01:20:57,360 --> 01:20:58,360
I'm wrapping up here.

1163
01:20:58,360 --> 01:21:03,360
This is a long video, but, but, but I really want to hit that part home.

1164
01:21:03,360 --> 01:21:10,360
I love Pearl for what Pearl, and I suggest Pearl is cutting edge for what Pearl was intended to be, the world's best shell scripting language.

1165
01:21:10,360 --> 01:21:13,360
It's not designed to be an enterprise language.

1166
01:21:13,360 --> 01:21:19,360
The prototype that I'm making in KN will eventually, many pieces of that will be rewritten in Go.

1167
01:21:19,360 --> 01:21:21,360
The core pieces of it will be rewritten in Go.

1168
01:21:22,360 --> 01:21:29,360
This scripting language, so people can write their own plugins, will support anything that can run on the command line, including probably mostly Pearl.

1169
01:21:29,360 --> 01:21:40,360
So, so that's, you know, if you want to add expandability on a, on a Unix or Linux system to assist to something, and you can say, well, you can write it in any shifting scripting language, right?

1170
01:21:40,360 --> 01:21:45,360
Or you could, you know, make a compile compatible program in Go.

1171
01:21:46,360 --> 01:21:49,360
I'm back and read the chat again.

1172
01:21:49,360 --> 01:21:53,360
Lots of, lots of great people here.

1173
01:21:53,360 --> 01:21:54,360
How's it going?

1174
01:21:54,360 --> 01:21:56,360
Infility?

1175
01:21:56,360 --> 01:21:59,360
See, it's moving to Subversion to get.

1176
01:21:59,360 --> 01:22:01,360
Are they?

1177
01:22:01,360 --> 01:22:04,360
Oh wait, I got some interesting stuff to read.

1178
01:22:06,360 --> 01:22:08,360
Yesterday was fun though.

1179
01:22:08,360 --> 01:22:10,360
Legacy, yeah.

1180
01:22:11,360 --> 01:22:16,360
Um, yeah, yep, yep, yep, yep, yep.

1181
01:22:16,360 --> 01:22:23,360
BSD, since free BSD is moving from Subversion to get, it's supposed Pearl will be, will be added back to, you think it's going to be?

1182
01:22:23,360 --> 01:22:26,360
I wonder what version it is.

1183
01:22:26,360 --> 01:22:28,360
That'd be interesting to know.

1184
01:22:28,360 --> 01:22:33,360
I wonder, I bet it's, I bet it's 5.10.

1185
01:22:33,360 --> 01:22:35,360
That's the one I'm going to bet they're going to go with.

1186
01:22:35,360 --> 01:22:37,360
I think we should probably know.

1187
01:22:37,360 --> 01:22:42,360
Which, I could have swore get Bundles Pearl with it.

1188
01:22:49,360 --> 01:22:53,360
You know, it makes sense that get has Pearl in it because of how fast it was turned around.

1189
01:22:53,360 --> 01:22:57,360
I mean, it was like, it was like he thought of it and then it was done.

1190
01:22:57,360 --> 01:23:03,360
So it was like, yeah, it looks like it's been installed with it.

1191
01:23:03,360 --> 01:23:07,360
Um, version forget.

1192
01:23:07,360 --> 01:23:09,360
Oh, let's look at this one.

1193
01:23:12,360 --> 01:23:14,360
Do, do, do, do, do, do.

1194
01:23:14,360 --> 01:23:15,360
Let me check this.

1195
01:23:15,360 --> 01:23:16,360
Take a, take a pic.

1196
01:23:16,360 --> 01:23:17,360
Ah, there we go.

1197
01:23:17,360 --> 01:23:19,360
Uh, get on the system which runs.

1198
01:23:19,360 --> 01:23:21,360
And the standard version is Pearl 5.8.

1199
01:23:21,360 --> 01:23:23,360
Oh my gosh, that is ancient.

1200
01:23:23,360 --> 01:23:29,360
Uh, what's important is that Pearl command keeps referring to Pearl 8.8 so that our script run fine.

1201
01:23:30,360 --> 01:23:34,360
Oh, let's see.

1202
01:23:34,360 --> 01:23:37,360
Get has a dependency on Pearl 5.28.

1203
01:23:37,360 --> 01:23:38,360
That's not true.

1204
01:23:38,360 --> 01:23:41,360
The docs doesn't even mention it requires Pearl though.

1205
01:23:41,360 --> 01:23:43,360
It does require Pearl that we know for sure.

1206
01:23:43,360 --> 01:23:47,360
Um, it doesn't say it get depends on who it is.

1207
01:23:47,360 --> 01:23:49,360
It says that package requires that.

1208
01:23:49,360 --> 01:23:52,360
It says that package requires 5.28.

1209
01:23:52,360 --> 01:23:53,360
Okay.

1210
01:23:53,360 --> 01:23:54,360
No good answers here.

1211
01:23:54,360 --> 01:23:57,360
The proscripts that get runs on beginning with the shebang lines.

1212
01:23:58,360 --> 01:23:59,360
And they get sourced.

1213
01:23:59,360 --> 01:24:00,360
These lines are user bin pearl.

1214
01:24:00,360 --> 01:24:01,360
Yay.

1215
01:24:01,360 --> 01:24:03,360
Which is what you should use instead of user bin ENV.

1216
01:24:03,360 --> 01:24:07,360
But as you build to get to install it, the source builder replaces these with the correct path,

1217
01:24:07,360 --> 01:24:11,360
which is also the right thing to do instead of using bin ENV.

1218
01:24:11,360 --> 01:24:14,360
So if you correct password or correct version of Pearl, use it with a bin pearl.

1219
01:24:14,360 --> 01:24:16,360
Uh, all right, fine.

1220
01:24:16,360 --> 01:24:17,360
What's the version?

1221
01:24:17,360 --> 01:24:19,360
God damn it.

1222
01:24:19,360 --> 01:24:22,360
Um, anybody know?

1223
01:24:22,360 --> 01:24:23,360
Uh, question.

1224
01:24:23,360 --> 01:24:26,360
What does it matter so much whether something is installed by default?

1225
01:24:26,360 --> 01:24:29,360
Let's say a scripting language takes someone, package manager, away from being able,

1226
01:24:29,360 --> 01:24:32,360
it's really important that you have installed something from the fishery pod stories.

1227
01:24:32,360 --> 01:24:36,360
Oh, Pearl 5 is greater than equal 5.32.

1228
01:24:36,360 --> 01:24:38,360
Really?

1229
01:24:38,360 --> 01:24:42,360
Git has a 5.32 runtime dependency?

1230
01:24:42,360 --> 01:24:44,360
Holy cow.

1231
01:24:44,360 --> 01:24:47,360
So much for no pearl on VSD.

1232
01:24:47,360 --> 01:24:52,360
That's like the most recent version.

1233
01:24:52,360 --> 01:24:54,360
Wow.

1234
01:24:55,360 --> 01:24:58,360
Well, do I need to make my case further?

1235
01:24:58,360 --> 01:25:07,360
The most useful, powerful version management system in the world depends on Pearl 5.32.

1236
01:25:07,360 --> 01:25:09,360
There we go.

1237
01:25:09,360 --> 01:25:19,360
So, and, um, so yeah, it is really important to have it on the remote system.

1238
01:25:19,360 --> 01:25:20,360
Yeah.

1239
01:25:20,360 --> 01:25:22,360
It depends on what you're making, right?

1240
01:25:22,360 --> 01:25:26,360
Uh, if you're, if you're, if you're, if you're a system administrator and you want your script to just be able to work,

1241
01:25:26,360 --> 01:25:30,360
you want to SCP the script over and be able to run it or your hacker and you want to be able to do that,

1242
01:25:30,360 --> 01:25:33,360
uh, that makes a lot of difference.

1243
01:25:33,360 --> 01:25:37,360
I'm going to be able to share your script with somebody else who has also has a Linux machine.

1244
01:25:37,360 --> 01:25:39,360
It doesn't have, you don't have to install anything.

1245
01:25:39,360 --> 01:25:41,360
The small things make a difference.

1246
01:25:41,360 --> 01:25:44,360
There are less and less of a difference in a Docker world now, right?

1247
01:25:44,360 --> 01:25:48,360
Most people have Docker installed, but that's usually for larger applications.

1248
01:25:48,360 --> 01:25:54,360
So it's different in that space, in that space of, you know, shell scripts on steroids,

1249
01:25:54,360 --> 01:25:58,360
Pearl, having Pearl everywhere is a plus.

1250
01:25:58,360 --> 01:26:01,360
Uh, but as soon as you go beyond that, as soon as you're making an application,

1251
01:26:01,360 --> 01:26:03,360
then it's not as big a deal, right?

1252
01:26:03,360 --> 01:26:07,360
Because you, you've got to already bundle and then, you know, the Python virtual environment makes sense,

1253
01:26:07,360 --> 01:26:10,360
even though it's stupid, but, you know, you have to bundle everything together.

1254
01:26:10,360 --> 01:26:12,360
You have all your dependencies match and everything at that point,

1255
01:26:12,360 --> 01:26:14,360
you should just make a Docker container, by the way.

1256
01:26:14,360 --> 01:26:17,360
Um, you're running 13 current though.

1257
01:26:18,360 --> 01:26:20,360
Interesting.

1258
01:26:20,360 --> 01:26:22,360
There's a runtime dependency.

1259
01:26:22,360 --> 01:26:24,360
That's really interesting.

1260
01:26:24,360 --> 01:26:26,360
You have to report back on that.

1261
01:26:26,360 --> 01:26:28,360
That's a really, uh, it's a really interesting question.

1262
01:26:28,360 --> 01:26:30,360
Uh, don't go to Pearl.com.

1263
01:26:30,360 --> 01:26:34,360
There are a bunch of, uh, it's apparently malware,

1264
01:26:34,360 --> 01:26:42,360
which I didn't say that the Pearl community is on top of everything as well as some of our other communities.

1265
01:26:42,360 --> 01:26:45,360
They're just, they're tired.

1266
01:26:46,360 --> 01:26:51,360
So they're forgetting to renew things and they have like really, really ancient websites.

1267
01:26:51,360 --> 01:26:53,360
I was on the Pearl Mager site the other day.

1268
01:26:53,360 --> 01:26:56,360
I was like, it needs a facelift so bad.

1269
01:26:56,360 --> 01:27:02,360
I was like, you know, because they, I mean, the whole, the whole initiative has lost a lot of its oomph,

1270
01:27:02,360 --> 01:27:09,360
because it's not sexy and cool anymore, but, but it's still sexy and cool when it comes to being a powerful shell script.

1271
01:27:09,360 --> 01:27:11,360
Stop thinking of Pearl as more than that.

1272
01:27:11,360 --> 01:27:18,360
And a lot of the, frankly, a lot of the, the, the Pearl community, you know, the, you know, previous community and current community

1273
01:27:18,360 --> 01:27:22,360
still trying to push Pearl for large scale applications development.

1274
01:27:22,360 --> 01:27:24,360
And I think that's a mistake.

1275
01:27:24,360 --> 01:27:26,360
I think it's a huge mistake.

1276
01:27:26,360 --> 01:27:30,360
Um, but again, if you look at Pearl as a shell script language, I'm just going to put it that way.

1277
01:27:30,360 --> 01:27:37,360
They're trying to change the version that required, uh, at most it's just looking if you're compliant, uh, when you're, uh, you're closed over.

1278
01:27:37,360 --> 01:27:40,360
Yeah, that's probably what's going on with it.

1279
01:27:40,360 --> 01:27:43,360
Yeah, it really depends on the dependency there as well.

1280
01:27:43,360 --> 01:27:48,360
Uh, this, this particular video has, has, has generated a lot more interest than I would have thought.

1281
01:27:48,360 --> 01:27:49,360
So this has been really fun.

1282
01:27:49,360 --> 01:27:54,360
I'm going to have to go ahead and cut it short and just want to go read if there's any more questions.

1283
01:27:54,360 --> 01:27:56,360
Um, I have to duck down again.

1284
01:27:56,360 --> 01:27:58,360
Learning Pearl is one of the best programming books I've ever written.

1285
01:27:58,360 --> 01:27:59,360
I agree.

1286
01:27:59,360 --> 01:28:02,360
Um, yeah, Schwartz did a great job with it.

1287
01:28:02,360 --> 01:28:04,360
It's very, very easy to understand.

1288
01:28:04,360 --> 01:28:09,360
It's one of the better, one of the greatest things about Pearl is that all of the documentation has always been really easy to read.

1289
01:28:10,360 --> 01:28:12,360
And I told you all the man pages that are there, right?

1290
01:28:12,360 --> 01:28:18,360
There's literally a man page on everything and you have to learn man to do Pearl really, uh, to do it really well.

1291
01:28:18,360 --> 01:28:20,360
But if you're going to jump into it, do that.

1292
01:28:20,360 --> 01:28:22,360
Please don't go overboard though.

1293
01:28:22,360 --> 01:28:27,360
I, I'm going to just recommend that you not, there are other very much more important languages for you to learn than Pearl.

1294
01:28:27,360 --> 01:28:32,360
Pearl, Pearl is important if you're, if you want to do a lot of shell scripting, you're going to live on the command line.

1295
01:28:32,360 --> 01:28:38,360
If you're going to be an SRE, if you're, you know, if you're going to be a hacker, uh, or if you just want to be a terminal power,

1296
01:28:38,360 --> 01:28:43,360
user, Pearl is really good, but it wouldn't be the first thing I would learn, right?

1297
01:28:43,360 --> 01:28:49,360
Uh, I would, I would have you learn JavaScript first, uh, you know, in the web browser, by the way, not on the command line.

1298
01:28:49,360 --> 01:28:53,360
And then I would learn, uh, go as the first compiled language personally.

1299
01:28:53,360 --> 01:28:55,360
That's what I'd recommend.

1300
01:28:55,360 --> 01:29:04,360
And, uh, I would learn enough shell, uh, to be able to write shell scripts and, uh, and, and then I would, I would learn Pearl to help you out.

1301
01:29:04,360 --> 01:29:09,360
But it's a supplementary language that basically turns you into a terminal power user.

1302
01:29:09,360 --> 01:29:15,360
And I, and that way, you know, you won't get into the problem of, it's, it's more important that you learn Python than Pearl,

1303
01:29:15,360 --> 01:29:17,360
unless you're going to live on the command line all the time.

1304
01:29:17,360 --> 01:29:20,360
So, but don't rule it out.

1305
01:29:20,360 --> 01:29:23,360
It does have a place that is not filled by any other language.

1306
01:29:23,360 --> 01:29:25,360
And that's the recent discovery.

1307
01:29:25,360 --> 01:29:28,360
And frankly, I thought Bash filled that spot and it doesn't, it doesn't.

1308
01:29:28,360 --> 01:29:33,360
In fact, Bash and I, it was a fun, it was a fun year that I think Bash and I are done for a while.

1309
01:29:33,360 --> 01:29:34,360
Yeah.

1310
01:29:34,360 --> 01:29:39,360
I'm going to be back to Dash and, uh, Pearl for everything and Python.

1311
01:29:39,360 --> 01:29:40,360
Yeah.

1312
01:29:40,360 --> 01:29:44,360
Because you have, you have like, you have like POSIX, right?

1313
01:29:44,360 --> 01:29:46,360
POSIX shell, which is compatible everywhere.

1314
01:29:46,360 --> 01:29:49,360
And then you have Pearl, which is everywhere when you need something more powerful.

1315
01:29:49,360 --> 01:29:57,360
You have Python for those enterprise, Python and TypeScript for like those enterprisey kind of scale interpreted applications,

1316
01:29:57,360 --> 01:29:59,360
still interpreted language applications.

1317
01:29:59,360 --> 01:30:02,360
And then boom, you need some, you need some statically typed compilation stuff.

1318
01:30:02,360 --> 01:30:03,360
Go as your friend.

1319
01:30:03,360 --> 01:30:07,360
So that kind of go TypeScript and Python kind of all overlap.

1320
01:30:07,360 --> 01:30:13,360
And then you need like edgy, high-performance stuff, Rust and C, C++, right?

1321
01:30:13,360 --> 01:30:16,360
And you need, you need stuff on the hardware assembly.

1322
01:30:16,360 --> 01:30:17,360
Yeah.

1323
01:30:17,360 --> 01:30:21,360
And, and that's, that's my spectrum of languages right now.

1324
01:30:21,360 --> 01:30:28,360
So, but the distinction between POSIX shell, Bash, you know, there might be a little bit of,

1325
01:30:28,360 --> 01:30:35,360
I am still going to use the Bash interactive shell because I want to be able to export functions that do things that I can't do with the shell.

1326
01:30:35,360 --> 01:30:44,360
So as a shell, it's still the best interactive shell if you ask me, but, but, but, you know, so that, that's still, that's where I'll be.

1327
01:30:44,360 --> 01:30:47,360
If I write any code in Bash, that's where it'll be.

1328
01:30:47,360 --> 01:30:51,360
Otherwise it's going to be just in straight up POSIX Dash or it's going to be in Pearl.

1329
01:30:51,360 --> 01:30:54,360
And that's, that's a position that I held or Python.

1330
01:30:54,360 --> 01:30:59,360
And that's a position I held back in, in 2007.

1331
01:30:59,360 --> 01:31:00,360
And I'm just returning to it.

1332
01:31:00,360 --> 01:31:03,360
And if you read my blog, it's not a blog.

1333
01:31:03,360 --> 01:31:06,360
If you read my notes, if you go to github.com.

1334
01:31:06,360 --> 01:31:18,360
And you click on log, you can read some of my lament about going through all of this and how it made me into a very grumpy Gus yesterday, going through this, this, this process of discovery.

1335
01:31:18,360 --> 01:31:23,360
And to anyone that I may have offended yesterday, I'm sorry.

1336
01:31:23,360 --> 01:31:25,360
I'm just, I'm sorry.

1337
01:31:25,360 --> 01:31:27,360
That's all I'm going to say.

1338
01:31:27,360 --> 01:31:29,360
Probably time for me to go.

1339
01:31:29,360 --> 01:31:31,360
Can we, can we agree this topic is dead now?

1340
01:31:31,360 --> 01:31:33,360
Did we kill the camel?

1341
01:31:33,360 --> 01:31:35,360
Or did we resurrect the camel?

1342
01:31:35,360 --> 01:31:42,360
I was actually really fun for me because I feel like I've given myself permission to use, to use it again.

1343
01:31:42,360 --> 01:31:45,360
Just like I gave myself permission in January to use Bash.

1344
01:31:45,360 --> 01:31:46,360
So this is what happened.

1345
01:31:46,360 --> 01:31:56,360
I gave myself permission in January to use Bash all the ways that I'd been prohibited from using as a, as a system in a developer at IBM for years, because I was forced to use POSIX compliance.

1346
01:31:56,360 --> 01:31:59,360
So I'd run on Solaris and AIX and all that stuff.

1347
01:31:59,360 --> 01:32:04,360
And, and then I'm going to, I'm going to go, but I'm going to just drop the stream.

1348
01:32:04,360 --> 01:32:06,360
I'll be back in a bit.

1349
01:32:06,360 --> 01:32:11,360
The stream script removed the R to let off steam.

1350
01:32:11,360 --> 01:32:14,360
It was all good.

1351
01:32:14,360 --> 01:32:21,360
And so all I want to say is that, you know, that was fun.

1352
01:32:21,360 --> 01:32:22,360
It was an experiment.

1353
01:32:22,360 --> 01:32:23,360
So I used Bash.

1354
01:32:23,360 --> 01:32:26,360
All of Bash is crazy, awesome things.

1355
01:32:26,360 --> 01:32:27,360
You know what?

1356
01:32:27,360 --> 01:32:34,360
I discovered about CD path, which nobody knows about, which is the same thing that you want out of your, your fish and your Z-shell for automatic CD completion.

1357
01:32:34,360 --> 01:32:38,360
Lots of things I discovered about Bash over the last year.

1358
01:32:39,360 --> 01:32:50,360
And, and I'm so I'm not, I don't look, I don't feel that was a bad thing, but I gave myself permission to use it after having been told, you can't, thou shall not use that cool Bashism and that Bashism and that Bashism.

1359
01:32:50,360 --> 01:32:54,360
And, and I let myself do that and I had a lot of fun with it for about a year.

1360
01:32:54,360 --> 01:32:59,360
But, you know, this week I hit a two, those two significant blocks for Bash.

1361
01:32:59,360 --> 01:33:07,360
No Unicode support for regular expressions, which Pearl does, and no support for extensive documentation in a script, which Pearl does.

1362
01:33:07,360 --> 01:33:11,360
And those two things have caused me to abandon Bash and relook at the whole thing.

1363
01:33:11,360 --> 01:33:16,360
And, and so I'm back to using basically pausing shell and Pearl for everything.

1364
01:33:16,360 --> 01:33:21,360
And you'll see me doing a lot of code doing that and go, of course.

1365
01:33:21,360 --> 01:33:29,360
So I think with that, I'm going to go ahead and put the, the, the dunes, the dunes back on, maybe turn them up a little bit.

1366
01:33:29,360 --> 01:33:31,360
Yeah.

1367
01:33:31,360 --> 01:33:33,360
Actually, this terrifies my wife.

1368
01:33:33,360 --> 01:33:34,360
She's scared of the desert like this.

1369
01:33:34,360 --> 01:33:36,360
I'm like, this looks really fun to me.

1370
01:33:36,360 --> 01:33:37,360
I'll be back.

1371
01:33:37,360 --> 01:33:39,360
It'll probably be about a half an hour or so.

1372
01:33:39,360 --> 01:33:40,360
I will be back when I come back.

1373
01:33:40,360 --> 01:33:45,360
I'll be doing a lot of Pearl coding actually on the knowledge node utility.

1374
01:33:45,360 --> 01:33:47,360
It's called KN.

1375
01:33:47,360 --> 01:33:50,360
It's a way of managing your notes and your schedule and everything.

1376
01:33:50,360 --> 01:33:53,360
And it's modular so you can expand it and customize it.

1377
01:33:53,360 --> 01:34:00,360
It's part of the associated federated knowledge workers, our effort to create tools that are kind of come together on,

1378
01:34:00,360 --> 01:34:06,360
building for each other so that we can manage our knowledge better and then share that knowledge over the knowledge exchange grid,

1379
01:34:06,360 --> 01:34:09,360
which we call KEG, which I'm going to put a plug in for that.

1380
01:34:09,360 --> 01:34:13,360
If you want to be involved with any of that conversation, that's always going to be on Friday.

1381
01:34:13,360 --> 01:34:23,360
But in my time as I do my daily routine, I'm going to be doing a lot of, a lot of refactoring of all my scripts directory.

1382
01:34:23,360 --> 01:34:28,360
And it's going to be a lot of code in POSIX and in Pearl for the next week or two.

1383
01:34:28,360 --> 01:34:29,360
All right.

1384
01:34:29,360 --> 01:34:30,360
Take care.

1385
01:34:30,360 --> 01:34:31,360
Bye.

1386
01:34:59,360 --> 01:35:01,360
Bye.

