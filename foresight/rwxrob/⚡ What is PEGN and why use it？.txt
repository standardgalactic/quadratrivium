So, what is Pagan and why use it?
So Pagan, I've talked about this a lot, but I'm going to go through and review it again.
So Pagan is a language that I wrote, you can go to pagan.dev, I think I still have that
up there.
I've been using it a lot because I'm using Pagan to write KML.
Sometimes you need a language to write a language, it's called a meta language, and that's what
Pagan is, you can go here and read about it.
So Pagan is a language for defining languages, more precisely as universal notation for expressing
any grammar, including natural language, which I'm very proud of, in a way that is easy
to parse cognitively and programmatically without any specific application or implementation
in mind.
And this is the problem with Pagan, which is from Brian Ford, which I'll get to.
Pagan builds on the best of the existing meta data structures such as Pagan, ABNF, EBNF,
and JSON.
If you've ever read the GoLang specification, it's all an EBNF, it's very common for people
to write language specifications, an EBNF, it's more common to see ABNF for things like
Internet IRFCs and IRFCs, things like that.
But ABNF, you can't even use characters in it, you have to use hexadecimal notation for
everything, just because it's so precise.
It's like, how do I define the HTTP protocol?
Go read ABNF for that.
Now, ABNF allows ranges and stuff like that, Pagan does not do that, Pagan is a very, very
friendly kind of flying in the face of traditional parsing mentality, primarily by saying we
have infinite memory in our assumption, our base assumption, rather than saying we only
have one byte of memory, which is what all the other parsers do.
I am absolutely obsessed with parsing, I think it's so fun.
If I was going to have done a computer science thing, I would have really, really obsessed
about parsing.
And I've already written in Pagan parser some time ago, a couple years back, and we've
had lots of people use Pagan, Quint comes to mind, Quint, if you're out there, thank
you for your contributions.
Quint has actually got his Pagan parser that we kind of collaborated on running in production
for a rather large company that I won't say.
But it is a way of specifying languages, and so what does that actually mean?
So the motivation here, let me just keep reading here, and then I'll close this up.
So the motivation, technology increases complexity, the need for a better human-computer interaction
becomes more pronounced, creating language grammars quickly and simply has become a critical
need.
And there's something that I have found out recently has got the name Fluid APIs, and
that's why I made Bonsai.
So Bonsai defines a natural language API that could be spoken on the command line as opposed
to demanding dashes and get off and all that other crap, which is another project I made
related to this.
But Pagan is somewhat related to the same need, because we need a way to define domain-specific
languages very quickly.
The way that I learned about Pagan, quite frankly, yet again, TJ Hollowaycheck, I was
following him and he wrote his own domain-specific language for parsing and querying logs for
his APEX, one of his projects on his APEX company, and he used Pagan for that.
And so I found Pagan, I actually helped contribute to one of the GoPeg parsers that's out there,
and then I realized that it didn't have enough, and I needed to add a little bit more, and
so I made Pagan.
So Pagan has decided to keep things by allowing any data to be represented as a grammar and
breaking it down into universal data form, it can be composed, combined, and analyzed
in a remarkable way.
So my eventual dream is to allow Pagan notation to replace regular expressions.
Regular expressions are nice and all, but when it comes to structured data and the ASTs
that are produced by it, it was really, really problematic.
Whether it be simple counting all the words in a document, creating a simple query language
to make searching logs easier, coding a human-friendly interface to an otherwise complicated web
API, simplifying the parsing of a form of common markup, implementing a fully-programmed
language that leverages LVM to quickly create high-performance compilers, or developing a
binary language for moisture evaporators, ah, Star Wars joke.
Pagan addresses these issues by prioritizing the creation of other language grammars without
weighing them down with any specific bias, and I keep hitting that point because that's
why all of the Pagan parsers that are out there right now, Guido van Rosen, Pagan of
the Python creator, obsessed with Pagan, there's lots of videos from him trying to re-implement
the entire grammar of Python and Pagan.
I don't know if he ever made it through that or not, but lots and lots of implementations
of Pagan that forced you to use that specific language, and so Pagan, the N in Pagan stands
for notation, which means we don't care.
It means we are not associated with any specific language, and therefore it's universal.
It's now, and see, Python, is it okay?
Weighing it down is specific bias commitment.
In fact, Pagan is so flexible it can also be used to define written language as a music
notation.
Pagan grammars are exploding, but inconsistent in 2004, Pagan grammars have exploded in popularity
and that's when I started this.
God, that was, I mean, that's not true.
I started, that's when they came become popular.
I didn't get into it and probably tell, I want to say 2020.
I was already streaming, so it'd be like 2021, 20.
Anyway, Brian Ford's example, Pagan grammar is all but ignored.
It's also incorrect.
While we were going through the parsing of his example, we realized it violates his own
syntax.
I still haven't ever told Brian that.
His example is invalid, Peg, according to his own specification.
I don't think he actually ever tested it with a parser or anything.
We actually found that out very surprisingly, quit when we were going through making our
own parser, and we use this example.
So Brian Ford's example, Pagan grammar is all but ignored as people continue to build
on their own syntax as a very little resemblance to the original.
I think that's probably why it doesn't work, because he just threw it in there because
everyone else has got their own idea of what it should be.
There are more implementation code than Peg.
This is demonstrated by many projects that contain both a grammar file for becoming acquainted
with the syntax and another virtually identical file containing additional implementation
specific to the code, a specific implementation language.
So this is how it goes, right?
You run your code through this and through the parser, right?
And then the parser will actually, if you do a Peg parser, right, it'll actually generate
code for you.
It'll generate parser code in your target language, and, you know, like Lex and Yak
and all those other things, except for its much more modern approach.
And so there's lots of them out there, you can go look at them.
So anyway, this redundancy and specialization are not only less sustainable, but they're
also highly rigid and counterproductive, and you can't exchange them with anybody else.
Pagan is a language grammar specification that does not allow implementation code so
that the resulting grammar specifications stand on their own, allowing their creation
of any variety of lunches and co-generators in different language implementations.
Even different design variations in the same implementation language, AST, callbacks, etc.
I'm going to get there, but Pagan actually defines the AST format as well, which is not
included in any other thing.
So I mean, having the AST, which is, you know, the thing that you care about when you run
some code through a parser, you want the AST then so you can check for the syntax properly,
or you can, you know, create your compile in any number of ways, or you can transpile
or whatever.
You have to have an AST.
I mean, there are implementations that don't use an AST because it takes, it's a minimally,
you know, slower to do that.
That's the compile part of regular expressions, by the way.
When you say you have to compile a regular expression, you're pretty much building a binary
that's going to give you an internal AST really quickly.
And then, you know, it's kind of internal.
I don't even know if there's an AST for most regular expressions, actually.
But these days you want the AST because that's the thing that's going to give it to you.
So like if you do, if you do pandoc, let's say you take, pandoc actually has this built
in, you can do pandoc t, is it raw?
You can do JSON if you want.
So JSON, this is a representation of this document in an AST.
It's a very simple document, right?
And it's parsed using pandoc with the specification for markdown, pandoc markdown.
And this is the resulting JSON version of the AST.
Now, there's another one.
I don't know the name of it.
Is it dead?
I don't know what the name of it is.
I want to say raw.
Maybe it's data.
It might be AST, data.
I wish pandoc had completion.
It does not have completion.
There's another number of reasons I don't like it.
Oh wait, maybe it does have completion.
When did it add it?
Maybe it already said, I always had it, I just forgot.
Which is the one we want.
We want not GFM, we want not LaTeX native.
There we go.
So this is the internal Haskell AST that is used by pandoc.
So it tells you the thing, so you have a header, and then you have a string, and then
another string, space, space, string, space, string, space, space.
So this is Haskell is the perfect language for writing ASTs.
I want you to notice something here that all of the nodes that are parsed in the AST
have three elements to them.
They have the type.
I think they have an array of how many there are, and then they have the actual content.
I can't remember.
Oh no, no, that's a variation on a header.
It must be an attribute of it, whatever.
So that's the AST, and you need an AST if you're going to do anything.
It's a Haskell data representation, yeah.
This is a Haskell data representation of, and I don't know, they have nodes with attributes
which I hate.
So Pagan does not allow attributes for a reason.
You can never decide whether you want your node to have attributes or not, or you want
it to just have the attributes to just be subnodes.
And so Pagan doesn't allow that.
It's a pretty deep comment, and if you don't know about parsers and stuff, but it's really
a...
ASTs are all over the place, by the way.
If you go look at the web page, this is an AST.
This is an A...
Any time you look at this, this is an AST.
The reason node is called node is because the document object model is a specification
of how to parse the thing.
That was at one point defined through something else.
It can get tricky without properties and attributes.
I haven't had any problem with it so far because you can just define...
You don't want to have one type have a different attribute to it.
I mean, like H1, H2, H3, you can actually have a parent, and then you can have the child
be the attribute.
It does get a little bit harder to traverse it, but it can be done.
So anyway, Pagan doesn't allow for properties like that, and neither does Peg, actually.
Strictly speaking, though, I mean, you could use Peg or Pagan, and then just...
I mean, the AST is...
You could use your own AST instead of the one that I have in here, if you wanted.
But original Peg lacks specificity.
For yours, ABNF and ABNF provided a cruising level of specificity.
Yeah, I don't trust this channel.
You have to switch, yes.
But it's very stateful.
So it's like one state at a time, and that's what I like about it.
It's not some variation on the state.
You see all different variations in node trees when people are doing this kind of thing.
There's people that will make all the nodes the same, and then they'll have attributes
on each of the nodes, and that's the only distinction between all the nodes.
And there's a million ways to model this.
And my favorite is to just...
You either have a node that's apparent that has children, or you have a node that is a
leaf and that is an attribute or whatever in this case.
So anyway, ABNF and ABNF provided a cruising level of specificity in their grammars, but
lack of obvious advantages of order priority and a simplicity of the original ASCII Peg
grammar.
For example, Pagan adds count and min max to provide limits and adds unicode tokens.
So there's no unicode tokens in ABNF at all.
You have to do everything based on that.
In fact, they created an extension to ABNF to allow for...
There's one of the data things from ABNF had to be expanded.
I actually wrote a VIM syntax header for ABNF if anybody's wondering too.
If you ever just want to open an ABNF VIM file and have it actually make sense, then
I updated it to include some of the new stuff from the latest extension to ABNF.
I was obsessed with ABNF for a long time because I was just looking for a way to specify
grammars and those are the only ways until I made Pagan.
So the hope is that Pagan's language itself can be more explicit, better performing and
readable replacement for grammar, meta languages, and inline regular expressions.
Code generators producing parses of different types and different implementation languages
can be created from the same grammar specification expressed in Pagan.
In other words, you can take a Pagan thing and you can run it through a code generator
and generate Ruby code.
You could generate Rust code.
You could generate Perl code.
You could generate C code.
It doesn't matter because there's nothing specific, language specific in Pagan and that's the
biggest selling point of all of the whole thing.
Pagan parses and center libraries can even provide highly optimized handling of Pagan
grammars, including directly in code as strings and constants, much like compiled regular
expressions are handled today, but with much greater clarity and efficiency.
So for example, when you use a regular expression, you have the parenthesized list, but it's a
linked list.
It's not a structure.
It does kind of make one, but you just get an array out of it.
You have to know the number and you have to figure out where your parentheses are inside
of this other thing to see whether it's number one or two because you have to unpack the
parentheses in your brain in order to understand what integer it becomes in terms of index.
And with Pagan, you don't have to do that because you get an AST out of it.
You get a standardized AST out of it every time.
You always get the same one and that is a structure.
It's a full structure that you can walk however you want and do it.
So that, in my opinion, might be slightly slower than regular expressions, but it gives
you more power when you're dealing with grammars and specifying them.
A progressive best example is what is itself, which is specified in Pagan.
Here's another example, the JSON specification in Pagan.
So Pagan is itself specified in Pagan and this is an old one.
Yeah, this is, that link is broken.
I got to fix that, obviously.
I haven't picked up Pagan for a long time.
I've used it for lots of things, but this site needs to be fixed.
So here's the JSON RFC according to RCA 259.
This is the implementation of JSON in Pagan.
And you have the overall grammar, grammar is a conventional name for the top level node.
And then you have the white space and then a value or whatever and then more white space.
And I use the actual terminology from the thing.
There are syntax conventions for the name.
So if they're initial caps, those are kind of easily to identify.
The other couple of things when you have two, I don't want to teach you all Pagan right
now, take forever, but two dashes, this is pretty significant.
The two dashes signifies a substantial node or a semantic, what I call a semantic node.
That means capture it.
If we don't have that, it's just a simplification of code so that, you know, the spec of the
Pagan spec code can become simpler.
So anytime you see value, value is all of these things, right?
But this says don't make value a node.
It just says this is how we refer to value so I can put value down here later.
And then, but any of these things would be a node.
If there's a node, it would be implemented at that point, it would be captured.
So an object is a significant node and it would, you know, it's just, I mean, it's basically
the same as peg.
You get a bracket and then zero or more white spaces and then a member and then you go down
and what's a member?
A member is a string plus a colon plus a value and then you get, you know, zero or more
of this, you know, sort of thing combined together.
In that sense, if you know regular expressions, you can see this.
One of the things that's nice about this is it is a lot easier to read than regular expressions.
We do have an entire standard subset of predefined tokens like DQ and everything, which APNF
has also done so you can just use those if you already know them.
In fact, anything that's lowercase is considered a class and some of the classes can be used
without specifying them because they're assumed there to be coming from the, the peg and specification
itself.
So they're predefined such as WS.
And that includes every positive span range and things like that, digit and stuff.
And so, yeah, so digit is another class.
Actually, I think digit is a token, you know, there's differences between classes and tokens.
Class is like one of these set and the other one, a specific token is like this exact
single character or, you know, three characters or something like that.
And so, the other thing that's cool about peg and peg is that they're left to right
versus ABNF and EBNF, which are like, when you specify something with a slash and EBNF
and EBNF, it can be any of those things at any order.
And the really, really, really great simplification of peg is it's guaranteed to match first left
wins.
So you put the stuff to the left.
So for example, in my specification for, for Kegumel, you know, wait, let me go see
you.
Where is my spec?
Is it over here?
Okay.
So in my specification for Kegumel, let's, let's do the, let's do the, the, you see here
I have bulleted and then numbered and then figure, right?
Well, if I was going to do those bulleted, right, a bulleted list begins, I'm not bulleted,
let's, let's do, let's do spans, spans are better.
So let's do strong emphasis.
The reason strong emphasis first, even though you might not want to list it that way is
because strong emphasis for me is three stars plus, you know, something and that this is
the part that's kind of interesting.
So right here, we're going to put a plane and so then we can put a plane.
So it's a, you know, it's a plane span and followed by another token, right?
And so, so there, the reason that's the strongest are that the reason that that one comes first,
of course, is because the strong one has two and the emphasis one, which is italic is just
one.
Now, what if I put, so if I was trying to specify this in EB enough, you see how problematic
this would be?
By just placing the order to check for each one, I can have tokens that would otherwise
be included in the other tokens.
This is where you get all the craziness with XML and everything because they don't have
the idea of, well, first look for this, and I can't tell you how valuable this is when
it comes to code generation or just writing the code by hand, because just by looking
at the peg and I know right away what comes first, I know that I need to write, I need
to check for a strong emphasis token before I check for an emphasis token so that I can
fail out or, you know, go to or hand off to the next, to the next parser, the next token
parser, because I have the order and I know, I keep talking about this, but that is such
a huge thing when it comes to writing parsers, because otherwise you just don't know.
And it's really nice because it keeps the syntax of Kegamel or Bonzai.
Very simple.
I'm a huge fan of just one way to do things in a markdown language like this.
And so I just use stars all the time, and even though you can use underscores in any
number of combinations, infinite number of combinations, which to represent in a grammar
would be crazy hard, not to mention putting an unnecessary amount of overload on a parser.
And if you're going to make a specification for something that's going to potentially
be capturing all the knowledge of the world.
We want to be optimized in our parsing.
And so this is one of those cases where we just want one best way to do it.
Other grammars would nest them.
Lots of grammars would nest these, and you can represent these as nested, but I do not
ever want to do that.
And neither does medium.
Medium does not allow you to nest your grammar, to nest your emphasis.
You cannot have italics in something that's already been bolded.
And if you've ever played around with any kind of syntax highlighters or Vim plugins
or anything like that, you have experienced a broken emphasis highlighter, something that
gets it wrong because it wasn't well specified, or it thinks it's got a span when it really
doesn't because it's on a different line.
Or I'm guarantee you, if you spend any amount of time doing any kind of syntax highlighting
stuff, you will find something that's really broken.
And it's really too bad because of that.
So for my particular grammar, and this is one of the reasons I made Pagan, I wanted
to be able to very precisely specify, I wanted to be very precise in my specification of
the grammar, and to keep it deliberately simple.
And people might accuse me of keeping it too simple, and they're like, why is it simple?
I was like, because I don't need more.
But it's not as simple as Godoc, for example.
Godoc doesn't have anything.
Godoc is even worse.
It's just text.
And you can indent something by four spaces to get it to be the same.
And headers are lines by themselves.
So there is a grammar there.
It's just not specified.
You have to go read the Go source code to understand what the grammar is.
This is why I made Pagan.
At least when somebody comes to me and says, OK, I said, well, what's Kegelman, I don't
want to have to learn another thing.
I said, you probably already know it.
I was like, how do you know it?
Well, do you know Markdown?
Yeah.
So it's a simplified version of Pandoc Markdown, which means it's got semantic div brakes and
it's got math support, which GitHub now has.
That's what Pagan is.
Pagan is a way to specify a language.
You can go read more about it if you want to get into the details.
I feel like I've gone too far in the details already.
I do think it's important that I mentioned that the grammar, the Pagan itself does specify
the AST to be used.
I am seriously considering a revamp of this AST at some point.
So the format for the AST, the text version of the AST is also written in Pagan.
You can go read that if you want, or you can actually look at the long form.
I'm trying to find an example.
So here is a long form example of the JSON AST.
So this is the AST of the JSON file itself, but in compact form, it's actually extremely
compact.
It's the smallest text-based JSON compatible, human readable AST that you can get, and it
can be easily expanded.
So that was by design.
When I looked at the native Haskell, this was all inspired by Pandoc.
Pandoc's JSON AST is abysmally bad.
I mean, let me just show you.
I talked about this earlier, but I'm going to talk about it again.
I just love salmon on this particular thing.
So when you do Pandoc, I mean, they didn't have as much information as they do now.
It's too bad because they can't go back and redo it.
But I don't know if you can see this, but so they have strings here, right?
They have spaces, like a space, meaning white space, and then Kegamel.
And they have, first of all, they have way too many, too much, like two verbose rich
thing.
But what I really, really don't like is when they have strings, I'm trying to find one.
There's no one there.
Okay.
So here, this right here, string C documentation slash docs.
What is that?
Oh, this is a link.
Okay.
So we have a link and the properties of the link are, and it's got all the properties
in order, so they're not named.
And what I'm trying to show you is that they, when they have strings, the strings include
quotes on them and stuff like that.
So let me see if I can find another version.
So if I have, I don't know, let me see if I can find one, pandoc-tjson, read me.
Did I just go to look at the same one again?
I did.
And it's in the spec, ml spec.
All right.
So let's go, let's look at this, read me.
Okay.
So look at this one.
So you know, you have the links here, you have the types, you have a soft break and it,
it deliberately uses long words.
There's no way to make it shorter.
So the, the textual ASTs that are generated from pandoc are so fucking long that, and
the standard instruction from pandoc, if you want to write your own conversions is to convert
to the JSON AST and, and then walk the, the JSON AST and parse that and produce your other
thing.
And I guarantee you, you, you should see how long it takes to do that.
Because this thing is a monstrously big waste and it also gets tons of stuff wrong.
So for example, it, it deliberately lumps together, uh, quoted content as a string.
So for example, or a parenthesized word as a string, it doesn't consider the idea of
fields and then words and then things like that.
It's, it's so, it's just a mess.
And that's, I, I, look, I really, really appreciate that we have pandoc.
I don't want it to be misunderstood.
I think it's so great that we have it, uh, JQ.
I could pipe it through JQ, but yeah, uh, Jeff needs some love.
Yeah, it does.
So, and they could actually make a different representation.
You could probably do a Haskell, uh, you know, PR and, and do that.
But the, the, the, yeah, they probably prefer Haskell reformos.
I agree.
But the, the, the point is, is that, I mean, if you're going to tell somebody that
you're a standard way of supporting other conversion method out methods is to,
and by the way, you can make your own.
You can write your own Lua plugins that will render the whole entire thing.
It's beautiful Haskell.
If you get into the functional program, if you, if you want a really good example
of when functional programming really shines, uh, you know, pandoc is a good example
of that because it was Haskell is like Taylor made for parsing syntaxes and
grammars and stuff.
It's just so perfect for it.
And, and, you know, I imagine, uh, you know, Lisper or Lang or something,
uh, would be just as good.
Uh, but, but that's, you know, that's my experience with Haskell too.
Um, and, you know, it's super fast, but, but, I mean, it, it does lack a lot in the,
in the, you know, the, the, to me, the AST is really core because if you want to have
a, the ability to make a conversion from one thing into anything else, uh, it's so
important that you get that AST, right?
Because then everybody else can render it however they want to.
Well, you've just created a data model for the thing that you're
representing, whatever it is, a document or whatever.
And, and, and that's really core of the whole thing.
And the people who made pandoc, of course, are not web people.
They are, you know, publishers and Haskell people and academics and they're
over at Berkeley and, you know, JGM's an amazing spearheaded common mark and a
bunch of other amazing things.
And I, I've had some interactions with JGM.
JGM is completely 100% unimpressed with anything I've ever done, which is fine
because, but I'm doing things that I need, uh, and yeah, including Peg.
And I, I ran Peg and by him and he was like, why am I, well, you know, why Peg?
And he doesn't, he's not interested.
He just, he got his answer.
He's a philosophy major and he's a great guy, but, uh, a philosophy professor.
So, um, anyway, here's the parent nodes, uh, given the following data example, you
get this copyright and, and, um, yeah, here you get another AST.
No, no AST node attributes.
Summary node 2 data structure models, a lot for attributes.
Peg and Stacy does not, since attributes can more, uh, efficiently and precisely
indicated by adding an additional parameter parent or terminal type, which is
another word for leaf node.
Uh, Peg was conceived originally developed by me.
Uh, I'm working with tokenizers and text generation.
Oh, nice.
Uh, while creating grammars, uh, was needed for artifacts knowledge net.
That's keg, uh, easy mark, data mark, mate, man, I can update this.
These are all of the different, uh, base QL, all of the ones that I've been doing.
Uh, live coding streams.
Others to update and contribute it and help this is, that's, I got to update them.
Uh, related tools to Vimplug and Emacs.
I don't have them in plugin done yet.
I need to other efforts out there.
You can go look at peg leg.
That's the one I helped contribute to go peg.
It's the one I contributed to actually space on peg.
Look, uh, the Python ones, the Guido one that, that they added 3.9 and Python, I
think, uh, Pigeon Pigeon pest.rs, which I was so excited about.
Turned out it's crap and antler antler has been his Java is all about Java.
But it's, it's exactly in the same sort of space, uh, for defining grammars and
stuff, but it's Java only.
Um, from a peg a grammar specifications, blah, blah, blah, go read that.
Uh, linking documentation with definitions, uh, legal considerations, what
adoption is blah, mime type.
I'm, I'm hoping to get X dash Pagan from my type, but I haven't submitted that yet.
Trademarks, uh, blah, blah, licensing, it's Apache tube, uh, attribution,
patents, uh, contributing, IFC, or you can't see the race.
So I would like to get this eventually submitted, but I don't want, I want to
use it for like a year or two and have all the tools done for it before I do that.
Um, Pagan has, Pagan parsering has been used in production at at least one
company that I know of besides mine, uh, for over a year and a half at this point.
And so if you're wondering whether it's worthy of abuse and there has been, uh,
some tweaking to the specification in that time based on, uh, you know, the
very intense usage that's happening over in that other company.
Um, so, so it's out there.
You can go use it if you want.
You can play around with it.
If you ever want to write your own language, you probably can.
I, I may very well do, uh, write a book about Pagan.
Uh, I'm, I'm all about writing books these days.
Um, I got to finish the terminal velocity.
That's the book I'm working on right now.
And after that, uh, you know, these other books in spaces that are not covered by
anything, uh, will be all right.
I mean, write a book about bonsai, write a book about Pagan and, uh, some of these
other things so that people can take them and use them.
So that's all I have to say about that.
