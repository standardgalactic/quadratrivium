WEBVTT

00:00.000 --> 00:01.520
All right, we're gonna jump right into this.

00:01.520 --> 00:04.240
So this is the results of the best amount

00:05.920 --> 00:08.400
of research that I can do.

00:08.400 --> 00:11.200
And now when I do research R being the,

00:11.200 --> 00:16.200
you know, the research being the principal meaning of R,

00:16.800 --> 00:19.040
don't put Rust out there again.

00:19.040 --> 00:20.560
Why are you bullying up Rust right now?

00:20.560 --> 00:22.480
We're not talking about Rust.

00:22.480 --> 00:24.680
No, we're not.

00:24.680 --> 00:29.440
So anyway, so by the way,

00:29.440 --> 00:30.960
my feelings on Rust have totally changed

00:30.960 --> 00:32.320
within the last few days

00:32.320 --> 00:34.080
because of the whole other thing

00:34.080 --> 00:34.920
that we've been talking about.

00:34.920 --> 00:38.640
So please don't, we're not gonna talk about that right now.

00:38.640 --> 00:41.600
I did talk about Rust a little bit when we,

00:41.600 --> 00:43.160
yesterday because we were talking about Firecracker

00:43.160 --> 00:46.520
and how I think Rust could be kind of the golden child

00:46.520 --> 00:49.720
of the micro virtualization emerging,

00:49.720 --> 00:52.960
but that is unrelated to what we're gonna talk about

00:52.960 --> 00:53.800
right now.

00:53.800 --> 00:55.320
So I'm gonna try to look away from the chat,

00:55.320 --> 00:59.240
but let's try at least for the next 45 minutes

00:59.240 --> 01:01.880
or 90 minutes to stay focused on one topic

01:01.880 --> 01:03.840
so that we can have the speed of this YouTube video

01:03.840 --> 01:05.400
be kind of to the point.

01:05.400 --> 01:08.200
What is going on with containers

01:08.200 --> 01:12.840
and specifically Kubernetes containers in 2022?

01:12.840 --> 01:15.320
And we're about to start KubeCon on Monday.

01:15.320 --> 01:16.720
So there's gonna be a lot of other new content

01:16.720 --> 01:17.560
and announcements, I'm sure.

01:17.560 --> 01:21.480
But this, what you're seeing on the screen right now,

01:21.480 --> 01:23.720
and by the way, if you wanna join me,

01:23.720 --> 01:25.440
let me post a link one more time.

01:25.440 --> 01:27.640
If you wanna join me and move your pointer around

01:27.720 --> 01:30.320
and participate, you can, you're welcome to do that.

01:30.320 --> 01:34.720
This is a read-only Excalidraw thing.

01:34.720 --> 01:37.120
I'm a huge fan of Excalidraw.

01:38.000 --> 01:40.600
Full disclosure, I was gifted a membership to Excalidraw

01:40.600 --> 01:41.680
from one of our community members

01:41.680 --> 01:43.560
and I never look back, it's so amazing.

01:43.560 --> 01:47.960
I've also been posting the PNGs of this to the Discord.

01:47.960 --> 01:50.320
So if you wanna see those, you can go there.

01:50.320 --> 01:53.320
But you should be able to use the URL anytime to come to it.

01:53.320 --> 01:57.320
Now, this, hey, look at all these fun little arrows.

01:58.440 --> 02:03.440
So what I'm gonna start by saying is a disclaimer.

02:03.440 --> 02:07.440
I consider myself, I mean, I've had people call me advanced

02:07.440 --> 02:10.000
in Kubernetes compared to the average Kubernetes admin

02:10.000 --> 02:12.320
and I don't feel that way myself.

02:12.320 --> 02:13.680
I don't know if it's imposter syndrome or what,

02:13.680 --> 02:16.200
I feel like, yes, I've installed several clusters

02:16.200 --> 02:20.000
and I administer one, but I still feel like

02:20.000 --> 02:21.560
I'm always learning something

02:21.560 --> 02:23.320
that I should have already known.

02:23.320 --> 02:27.960
And this video right here is about that.

02:27.960 --> 02:30.800
It's about one of the things that I,

02:30.800 --> 02:32.460
every time I think I understand it,

02:32.460 --> 02:34.880
I like get introduced to a new piece of the puzzle

02:34.880 --> 02:37.240
and I'm like, oh, oh, so that's how that works.

02:37.240 --> 02:38.520
And short of looking at the source code,

02:38.520 --> 02:40.140
which I am very prepared to do,

02:41.560 --> 02:43.000
this is the best that I could come up with.

02:43.000 --> 02:45.040
So I say that as a disclaimer

02:45.040 --> 02:48.120
because there might be some glaring mistakes in here.

02:48.120 --> 02:50.880
And if they are in your YouTube, just let me have it.

02:50.880 --> 02:53.080
Write it in the comments, say you got this wrong

02:53.080 --> 02:55.360
and you got this wrong and you got this wrong

02:55.360 --> 02:57.200
and I'll go in and I'll fix it

02:57.200 --> 03:02.200
so we can have our hopefully corrective version of this.

03:02.760 --> 03:04.040
And the reason I put that out there

03:04.040 --> 03:06.560
is because in order for me to even come to this knowledge

03:06.560 --> 03:08.200
that I am showing you right now,

03:08.200 --> 03:11.960
I had to sift through a ton of bad information

03:11.960 --> 03:15.740
on the internet, bad information, misuse terminology,

03:16.640 --> 03:21.360
confusion, renaming, reorganization of projects

03:21.360 --> 03:22.400
and all kinds of stuff.

03:22.400 --> 03:24.800
It's a pain in the butt to get to this.

03:24.800 --> 03:26.840
So I'm really glad that I was able to leverage

03:26.840 --> 03:30.080
my research skills to get to the right thing.

03:30.080 --> 03:33.200
So the overall topic for the next 45 to 90 minutes

03:33.200 --> 03:36.560
is gonna be Kubernetes containers in 2022.

03:36.560 --> 03:38.000
And let me ask the question.

03:38.000 --> 03:40.400
First of all, why do you think you know this?

03:40.400 --> 03:42.720
And please, if you have input, please let me know.

03:42.720 --> 03:46.080
Why do you think understanding container engines

03:46.080 --> 03:48.200
in 2022 is important?

03:48.200 --> 03:49.040
Why?

03:49.040 --> 03:50.960
Why is understanding container?

03:50.960 --> 03:52.640
I mean, it's pretty obvious to a lot of us,

03:52.640 --> 03:55.680
but what's your best way of succinctly saying that?

03:55.680 --> 03:58.840
Why do you care about the container engine

03:58.840 --> 04:00.680
when you're deploying Kubernetes?

04:00.680 --> 04:03.680
Why do you care about Kubernetes in general?

04:03.680 --> 04:05.680
Why do you care about container engines in general?

04:05.680 --> 04:07.880
Does anybody have any input on that?

04:07.880 --> 04:09.360
You can go ahead and throw it out there in the chat

04:09.360 --> 04:10.200
if you want to.

04:11.200 --> 04:14.880
But I'm gonna submit to you that the reason

04:14.880 --> 04:18.200
that you should know about Kubernetes container engines

04:18.320 --> 04:23.320
is because they are the very basic elements

04:24.160 --> 04:29.160
of everything that you use in Kubernetes.

04:29.560 --> 04:32.680
They are, Kubernetes is described

04:32.680 --> 04:34.800
as a container orchestration framework.

04:36.920 --> 04:38.600
So if you don't know what containers are,

04:38.600 --> 04:40.640
then you're gonna be totally screwed up.

04:40.640 --> 04:45.120
So we should probably talk about, yeah,

04:45.120 --> 04:46.160
we should probably talk about

04:46.160 --> 04:47.800
what containers are versus virtualization.

04:47.800 --> 04:49.600
We talked about that a lot last time

04:49.600 --> 04:52.200
and about how I think that the future,

04:52.200 --> 04:54.400
in fact, we have that in a different diagram.

04:54.400 --> 04:57.000
I'm just gonna refer to it really quickly.

04:57.000 --> 04:59.600
In my airgapped home network yesterday,

04:59.600 --> 05:02.160
we were talking about, this is my conceptual thing,

05:03.080 --> 05:05.880
we were talking about Kubernetes,

05:05.880 --> 05:07.840
so here's gonna be, I've decided to do

05:07.840 --> 05:10.600
a TALOS cluster over here out of OptiPlex servers

05:10.600 --> 05:12.800
if I can get Pixiboot to work.

05:12.800 --> 05:16.840
We have open PBS for batch processes

05:16.840 --> 05:18.960
and then we have a traditional

05:18.960 --> 05:20.520
on-prem Kubernetes cluster here.

05:20.520 --> 05:22.240
And then we have all of these VMs,

05:22.240 --> 05:26.040
potentially micro VMs on our single VM server.

05:26.040 --> 05:28.920
So containerization and virtualization

05:28.920 --> 05:31.200
are important that you understand.

05:31.200 --> 05:32.980
I'm not gonna dive into that right now.

05:32.980 --> 05:35.960
So we're assuming that you actually understand

05:35.960 --> 05:37.920
the difference and why they matter.

05:38.920 --> 05:40.960
And so we can jump right to the point

05:40.960 --> 05:44.680
where we talk about, what do we talk about

05:44.680 --> 05:45.840
just about Kubernetes?

05:46.760 --> 05:49.600
Okay, so, where did that come from?

05:49.600 --> 05:51.600
Did somebody draw that or did I draw that?

05:52.680 --> 05:53.680
Did I draw that?

05:53.680 --> 05:55.400
I might have drawn that on accident.

05:56.480 --> 05:57.320
I did.

05:58.200 --> 05:59.640
Or did somebody else?

05:59.640 --> 06:03.240
All right, so, no, Docker Compose

06:03.240 --> 06:04.280
is not a part of the diagram

06:04.280 --> 06:06.300
because this is Kubernetes containers.

06:08.040 --> 06:09.280
Who's drawing on there?

06:10.480 --> 06:12.520
Did I give somebody draw access on accident?

06:14.040 --> 06:15.520
Or did I do that drawing?

06:16.840 --> 06:21.600
I need to make sure that I didn't allow that.

06:23.160 --> 06:25.160
It might've just been a different color.

06:29.240 --> 06:32.040
Do, do, do, that should not be there.

06:32.040 --> 06:34.440
I feel like something didn't get saved somehow.

06:35.520 --> 06:38.280
Yeah, that should not be there either.

06:38.280 --> 06:39.960
I don't know what happened there.

06:42.680 --> 06:44.880
Oh my God, it reverted my whole diagram.

06:46.160 --> 06:47.000
It did.

06:50.480 --> 06:52.520
It did, it reverted my diagram.

06:53.800 --> 06:56.640
This is a different version of the diagram I had before.

06:58.760 --> 07:01.880
It's got a lot of stuff on it that wasn't there before.

07:02.800 --> 07:04.200
I'm kind of worried about that,

07:04.200 --> 07:06.040
but it's good enough we can go with it.

07:08.160 --> 07:10.080
There might be a bug in Excalidraw.

07:11.120 --> 07:14.680
So, let's go back to it.

07:15.680 --> 07:17.280
That was weird.

07:17.280 --> 07:18.600
That was really weird.

07:19.800 --> 07:21.400
All right, so back here we go.

07:24.080 --> 07:26.640
So, there are some strong,

07:26.640 --> 07:29.240
there are some really strong opinions on this diagram.

07:30.480 --> 07:35.480
And I challenge myself to justify those all the time.

07:35.760 --> 07:37.360
If you want to challenge my opinions,

07:37.360 --> 07:38.880
please do in the chat.

07:38.880 --> 07:40.840
You can do it right now if you want to,

07:40.840 --> 07:42.280
or in Discord if you don't want to do it

07:42.280 --> 07:43.680
like right out of the gate.

07:43.760 --> 07:47.120
But what I'm gonna start by saying

07:48.520 --> 07:51.520
that this is Kubernetes specific.

07:51.520 --> 07:56.520
So, none of this has anything to do with other stuff.

07:58.280 --> 08:02.720
So like, for example, Docker Compose and any of that.

08:02.720 --> 08:07.720
So, and I think it's super important especially now

08:08.680 --> 08:13.440
that we start to think of containerization

08:13.440 --> 08:15.560
without Kubernetes as a separate beast.

08:15.560 --> 08:19.400
And let me, this entire diagram is completely focused

08:19.400 --> 08:24.400
on that separation based on the container runtime interface

08:24.880 --> 08:29.080
as defined by the Kubernetes project,

08:29.080 --> 08:31.160
which was led by the Kubernetes project,

08:31.160 --> 08:35.000
but it's not necessarily just a container thing.

08:35.000 --> 08:36.400
It was something that came out

08:36.400 --> 08:37.600
from the Open Container Initiative.

08:37.600 --> 08:40.800
So, let's talk about all of this and why this is relevant.

08:40.800 --> 08:45.080
So, this, first of all, is for orchestration

08:45.080 --> 08:49.040
and my orchestration, we've primarily been Kubernetes,

08:49.040 --> 08:51.600
but it could have easily just been an old man or anything.

08:51.600 --> 08:53.600
So, I'm gonna try to get into this

08:53.600 --> 08:55.520
by telling you a number of stories.

08:55.520 --> 08:58.360
So, the first story is how did Kubernetes start?

08:58.360 --> 08:59.680
So, Kubernetes, it was really quickly,

08:59.680 --> 09:02.400
Kubernetes started as a way to manage Kubernetes clusters,

09:02.400 --> 09:06.480
I mean, containers, and to run them in a way

09:06.480 --> 09:09.920
that could be easily started up again and all that.

09:09.920 --> 09:14.120
But, the original version of Kubernetes

09:14.120 --> 09:16.400
depended on Docker and Docker has always been

09:16.400 --> 09:20.840
a proprietary thing and that was well and good.

09:20.840 --> 09:25.840
But then in 2017, they created the people behind Kubernetes

09:27.560 --> 09:29.560
came together and said, you know what?

09:29.560 --> 09:32.600
Kubernetes probably shouldn't be depending

09:32.600 --> 09:37.600
on this ever-changing underlying deep low-level API

09:37.840 --> 09:39.800
from Kubernetes, we should probably standardize that.

09:39.840 --> 09:42.440
So, they created something called

09:42.440 --> 09:46.680
the Open Container Initiative, or OCI,

09:46.680 --> 09:51.680
and that led to the creation of the container runtime

09:52.880 --> 09:55.640
interface, which is this.

09:55.640 --> 09:57.720
So, the container run, CRI defines the API

09:57.720 --> 09:59.520
used to talk to container engines.

09:59.520 --> 10:01.920
The CRI API comes from the Open Container Initiative

10:01.920 --> 10:04.880
formed in 2017 to deal with problems from Docker

10:04.880 --> 10:07.000
being proprietary and non-standardized.

10:07.000 --> 10:09.640
As of Kubernetes 1.24, all container run times

10:09.640 --> 10:12.360
must provide a full CRI implementation.

10:12.360 --> 10:17.080
And if you ever read anything about Docker shim,

10:17.080 --> 10:19.920
I mean, or any of these things, that's because,

10:19.920 --> 10:21.000
and I'm gonna read it right here,

10:21.000 --> 10:22.800
Docker is a significant decline after failing

10:22.800 --> 10:24.440
to respond to the needs of Kubernetes

10:24.440 --> 10:26.200
forcing the creation of Docker shim

10:26.200 --> 10:28.720
and later hitting the industry with a bait

10:28.720 --> 10:31.120
and switch tactic to force enterprises to pay up.

10:31.120 --> 10:34.880
So, Docker itself is in massive decline.

10:34.880 --> 10:38.360
Nobody's using it, people are abandoning it like crazy.

10:38.360 --> 10:40.840
Enterprises like mine, which is a huge multinational

10:40.840 --> 10:44.280
corporation, have decided to basically banish Docker

10:44.280 --> 10:46.200
from their entire enterprise.

10:46.200 --> 10:48.540
It's in massive decline, the founder of Docker

10:48.540 --> 10:50.120
has left to pursue other interests.

10:50.120 --> 10:52.940
The company was already in financial peril before,

10:52.940 --> 10:56.080
and it's just a matter of time before it goes under.

10:56.080 --> 10:59.800
That being said, it is still holding onto

10:59.800 --> 11:03.120
the maintenance of the number one container engine

11:03.120 --> 11:05.560
recommended in the certification exam for Kubernetes,

11:05.560 --> 11:07.640
according to the official companies that IOS site,

11:07.640 --> 11:08.620
which is Container D.

11:08.620 --> 11:10.160
Now, those docs are kind of old,

11:10.160 --> 11:12.040
those docs were created a while ago,

11:12.040 --> 11:16.120
and Creo, which is coming out of the OpenShift world,

11:17.200 --> 11:19.160
has really stepped up, and it doesn't have

11:19.160 --> 11:21.640
as many bugs as before, and it's extremely lightweight,

11:21.640 --> 11:23.680
we're gonna talk about that in a bit,

11:23.680 --> 11:26.840
and it's a full implementation of the CRI and nothing more.

11:27.800 --> 11:31.000
So, Container D actually has a lot of extra bloat on it,

11:31.000 --> 11:33.840
because it tried to be more,

11:33.840 --> 11:36.000
and that has an advantage or a disadvantage,

11:36.400 --> 11:39.640
the ultimate decision in 2022 is, in my opinion,

11:39.640 --> 11:42.440
is whether you use Creo or you use Container D.

11:42.440 --> 11:45.360
That's really, Kubernetes is an orchestration platform

11:45.360 --> 11:47.280
for Kubernetes, right?

11:47.280 --> 11:49.280
People have been saying Docker's in decline for six years.

11:49.280 --> 11:52.040
Yeah, well, I can tell you that a company

11:52.040 --> 11:54.360
of the significance of the one that I work for,

11:54.360 --> 11:55.840
and the other ones that I've heard of,

11:55.840 --> 11:58.480
who've decided not to allow Docker on the desktop ever,

11:58.480 --> 12:02.680
and not to depend on Docker CE, has actually been executed.

12:02.680 --> 12:05.480
I'm in the process of doing it right now.

12:06.320 --> 12:09.440
You can see it, and so there's a number of reasons,

12:09.440 --> 12:12.040
even most recently, so Podman desktop,

12:12.040 --> 12:15.240
let's continue the story.

12:15.240 --> 12:16.280
So Kubernetes got started,

12:16.280 --> 12:18.080
Docker was a good player for a while,

12:18.080 --> 12:19.720
and then everybody's like, no more Docker,

12:19.720 --> 12:20.880
and they've been trying to get off of it,

12:20.880 --> 12:23.760
but Docker had such a stranglehold on the whole industry

12:23.760 --> 12:25.320
that they've been really holding onto it,

12:25.320 --> 12:27.960
and all of the other players weren't really that well

12:27.960 --> 12:29.480
implemented, Creo had lots of problems

12:29.480 --> 12:32.480
like two, three years ago, two years ago,

12:32.480 --> 12:35.800
and it's since kind of come around from what I can tell.

12:36.720 --> 12:38.960
And so now everybody's like, no, we're gonna use Creo,

12:38.960 --> 12:40.160
Creo is the standard thing to use,

12:40.160 --> 12:41.520
you should use Creo, it's the best thing.

12:41.520 --> 12:44.160
But more importantly, underneath all of that,

12:44.160 --> 12:47.880
is this thing that used to be called libcontainer,

12:47.880 --> 12:49.640
which is now called RunC,

12:49.640 --> 12:53.400
which is the thing that actually does the container creation,

12:53.400 --> 12:58.400
it's the low level go library that talks to...

12:59.240 --> 13:03.440
I think it's RunC in C or go, either one,

13:03.440 --> 13:05.120
but it's the thing that actually does

13:05.120 --> 13:08.440
all the container creation and stuff.

13:08.440 --> 13:11.880
So that's really the biggest piece of this whole puzzle.

13:11.880 --> 13:16.600
And actually containerD used to use libcontainer,

13:16.600 --> 13:18.520
I was an ancient blog I read,

13:18.520 --> 13:19.640
used to use libcontainer,

13:19.640 --> 13:22.480
and then I read someplace that I wrote this here,

13:24.360 --> 13:25.880
whereas the containerD is still maintained

13:25.880 --> 13:26.720
by the Docker company,

13:26.720 --> 13:30.040
which requires some Docker C packages to be installed.

13:30.040 --> 13:33.160
The RunC container runtime engine was once libcontainer,

13:33.160 --> 13:34.640
causing some confusion when researching

13:34.640 --> 13:35.920
the actual container source libraries

13:35.920 --> 13:37.560
used by the container tooling.

13:37.560 --> 13:39.520
So if you're like me and you like to get into

13:39.520 --> 13:41.160
the low level details to see, okay,

13:41.160 --> 13:43.340
which libraries are the most popular,

13:43.340 --> 13:44.180
which have the most stars,

13:44.180 --> 13:45.640
which are getting the most usage,

13:45.640 --> 13:48.200
and what are up the chain,

13:48.200 --> 13:50.400
what are the products that are using that,

13:50.400 --> 13:52.960
what are the projects that are using it,

13:52.960 --> 13:56.440
then it's really obvious right now in 2022

13:56.480 --> 13:58.600
that anything that's not using RunC

13:58.600 --> 14:02.680
is gonna be completely irrelevant in this space

14:02.680 --> 14:04.520
at this moment.

14:04.520 --> 14:08.000
So in my opinion, RunC is where it's at.

14:08.000 --> 14:09.360
And if you're not using RunC,

14:09.360 --> 14:11.560
just, I mean, technically speaking,

14:11.560 --> 14:13.840
Creo, which stands for the container runtime interface

14:13.840 --> 14:16.440
dash open or open shift, depending on who you ask,

14:16.440 --> 14:19.040
I've read both in two different places,

14:19.040 --> 14:22.800
was created up by Docker, I'm sorry, by Red Hat,

14:22.800 --> 14:26.100
and is meant to just fulfill the minimum elements

14:26.100 --> 14:27.420
of the container runtime interface.

14:27.420 --> 14:29.540
So let's read about the container runtime interface

14:29.540 --> 14:30.380
for a bit.

14:30.380 --> 14:32.740
So the CRI defines the API I use

14:32.740 --> 14:35.820
to talk to container engines, I talked about that.

14:38.420 --> 14:40.700
Okay, so Creo CRI dash show,

14:40.700 --> 14:42.420
which is either open or open shift allows you

14:42.420 --> 14:46.340
to run containers directly from Kubernetes.

14:46.340 --> 14:49.700
Now, it was designed for use by Kubernetes,

14:49.700 --> 14:51.620
but they were very careful to not say

14:51.620 --> 14:54.220
this is only for Kubernetes, right?

14:54.220 --> 14:56.820
So this is a container runtime interface,

14:56.820 --> 14:59.740
which defines a set of operations.

14:59.740 --> 15:03.260
So you might be wondering, well, what is it really, right?

15:03.260 --> 15:05.860
So it's basically just, you can go read the spec,

15:05.860 --> 15:07.380
it's really long and boring,

15:07.380 --> 15:10.380
but it defines a set of operations

15:10.380 --> 15:13.900
which are implemented either through direct calls

15:13.900 --> 15:15.980
or through API calls or whatever.

15:17.180 --> 15:20.620
And the operations that must be implemented are,

15:21.620 --> 15:25.820
create, start, kill, delete, and state.

15:25.820 --> 15:27.420
And you can go read about these in the specification,

15:27.420 --> 15:32.420
but those are the only things required by the CRI standard.

15:36.260 --> 15:38.840
And that is kind of an interesting thing.

15:38.840 --> 15:41.500
And I've discovered this through the hard way.

15:41.500 --> 15:44.940
So there is a tool that now ships with Kubernetes

15:44.940 --> 15:47.940
called CRI CTO.

15:47.940 --> 15:50.540
This tool does not ship with Creo.

15:50.580 --> 15:52.140
There's a dependency on it,

15:52.140 --> 15:56.540
but it's designed to be a part of the Kubernetes space.

15:56.540 --> 15:58.460
And as I said, so there's no,

15:59.340 --> 16:00.620
like an interface and programming, yeah.

16:00.620 --> 16:05.620
So there's, the Kubernetes project is very good

16:05.780 --> 16:07.820
at not putting their foot down on something.

16:07.820 --> 16:08.940
It's kind of annoying.

16:08.940 --> 16:12.580
So like the open container initiative

16:12.580 --> 16:14.340
was maybe kicked off by Kubernetes,

16:14.340 --> 16:16.900
but it didn't necessarily mean all things Kubernetes.

16:16.900 --> 16:19.100
So everybody's following it, right?

16:19.100 --> 16:22.220
So they're all implementing the CRI,

16:22.220 --> 16:24.300
no matter what, to talk to containers.

16:24.300 --> 16:26.020
And to tell you the truth,

16:26.020 --> 16:28.820
there is actually the hope that I think

16:28.820 --> 16:30.740
that maybe BSD containers at some point

16:30.740 --> 16:32.580
could implement the CRI.

16:32.580 --> 16:34.580
And if they actually do that,

16:34.580 --> 16:37.460
then that means all of this cloud-native hardware

16:37.460 --> 16:39.860
and every software and everything could run on BSD.

16:40.780 --> 16:44.640
And that it, there is nothing that says it has to be,

16:45.640 --> 16:49.960
you know, LXC, you know, Linux specific containers,

16:49.960 --> 16:52.320
as far as I can tell in the specification

16:52.320 --> 16:55.040
of how to make the container interface work.

16:55.040 --> 16:59.680
So it's very possible that some day we might be able

16:59.680 --> 17:00.520
to do that.

17:00.520 --> 17:02.120
Now there's a whole big problem

17:02.120 --> 17:03.800
about how do you store the containers,

17:03.800 --> 17:05.480
you know, and this little green dots here.

17:05.480 --> 17:07.280
I mean, these green things here, you know, and that thing.

17:07.280 --> 17:09.000
So I don't want to get into that rabbit hole,

17:09.000 --> 17:11.400
but there is some standardization here.

17:11.400 --> 17:16.240
So the, if you want it, so the Cree CTL thing,

17:16.240 --> 17:18.880
which I, as I understand it gets installed by Kubernetes

17:18.880 --> 17:20.680
packages when you're installing those things,

17:20.680 --> 17:24.800
allows you to talk directly to,

17:26.360 --> 17:30.320
I think it's Run-C, I don't think it is directly

17:30.320 --> 17:31.160
to the keyboard.

17:31.160 --> 17:33.520
I can't remember, this one I might have wrong actually.

17:33.520 --> 17:36.160
I think that this might, does anybody know?

17:36.160 --> 17:38.520
I think that this might actually not be here.

17:38.520 --> 17:42.920
I think it might be to, I think it, I had some,

17:42.920 --> 17:44.920
at one point I had it pointing to the Qubelet

17:45.920 --> 17:50.400
and then I had it pointing to the Run-C.

17:50.400 --> 17:52.480
I think it might actually be able to talk to both

17:54.160 --> 17:56.480
because I do know that when the Qubelet is not running

17:56.480 --> 17:58.400
because the Qubelet crashes, right?

17:58.400 --> 18:02.440
You can get on CRCTL and you can run CRCTL list

18:02.440 --> 18:05.040
and you can list all the pods on the machine,

18:05.040 --> 18:07.240
whether or not they're in the Qubelet.

18:07.240 --> 18:11.720
And pods are things, static pods that have been defined

18:11.720 --> 18:16.720
on the host, that's like, that's what all of that stuff is.

18:16.840 --> 18:21.320
And they are just defined in configuration files

18:21.320 --> 18:25.480
that point to containers that are running via Run-C

18:25.480 --> 18:26.560
on the machine.

18:26.560 --> 18:29.160
So you don't have to have a Qubelet.

18:29.160 --> 18:31.120
CRCTL I think can talk to the Qubelet,

18:31.120 --> 18:33.720
but it goes directly through Run-C

18:33.720 --> 18:36.540
to the containers on the machine,

18:36.540 --> 18:40.140
but it also has knowledge of the configuration files

18:40.140 --> 18:41.740
that the Qubelet has access to.

18:41.740 --> 18:44.340
In fact, that is probably something I wanna add here.

18:44.340 --> 18:46.540
Let me go ahead and add that really quick.

18:46.540 --> 18:49.340
So I think it would be safe to add

18:49.340 --> 18:54.340
like a configuration file icon here and stuff.

18:56.420 --> 18:58.540
So, you know, where's that doing it?

18:58.540 --> 18:59.380
Where am I?

18:59.380 --> 19:00.200
I don't know.

19:00.200 --> 19:02.780
So yeah, I think that let's do that.

19:02.780 --> 19:07.300
So that is the, why is that the fill?

19:07.300 --> 19:12.180
Oh, yeah, we need to do, let's do white on this.

19:12.180 --> 19:14.420
I'm almost positive that that's true

19:16.460 --> 19:19.420
because it does not communicate with the Qubelet.

19:19.420 --> 19:21.060
I know it doesn't need the Qubelet to be there

19:21.060 --> 19:22.460
because the Qubelet is not there

19:22.460 --> 19:23.900
when you do Qubetium in it.

19:28.500 --> 19:32.620
But it can look at the file itself.

19:32.660 --> 19:34.740
So this would be the configuration file.

19:34.740 --> 19:36.060
So I'll add that in there.

19:37.700 --> 19:39.320
What's that?

19:39.320 --> 19:40.700
Those are possible options for components.

19:40.700 --> 19:42.100
Is that a minimum you need?

19:43.580 --> 19:46.740
When you're talking about a Qubelet endpoint,

19:46.740 --> 19:48.340
you need a runtime.

19:48.340 --> 19:52.980
You need a Qubelet, a runtime engine, I should say.

19:52.980 --> 19:55.300
You don't need, and this is another thing.

19:55.300 --> 19:57.540
There's the terminology regarding a runtime

19:57.540 --> 19:59.420
and that people have said it doesn't have a runtime.

19:59.420 --> 20:00.920
I've heard that statement three times

20:00.920 --> 20:03.520
and I restated that to some other team today

20:03.520 --> 20:04.400
and I was wrong.

20:04.400 --> 20:06.680
I further did further research on that

20:06.680 --> 20:09.240
to say that Podman does not have a runtime

20:09.240 --> 20:10.680
is a false statement.

20:11.880 --> 20:14.320
So this is very, very frustrating

20:14.320 --> 20:17.160
because this terminology gets misused all the time

20:17.160 --> 20:20.040
and I have read it at least in three places

20:20.040 --> 20:21.960
since I repeated it incorrectly.

20:21.960 --> 20:23.560
Yeah, but what is Run C?

20:25.120 --> 20:26.800
Run C by definition,

20:26.800 --> 20:29.440
and I have at least three or four sources of this

20:29.440 --> 20:32.260
is a container runtime.

20:32.260 --> 20:37.260
So I've heard at least five people tell me incorrectly

20:37.400 --> 20:39.520
that Podman, as far as I know,

20:39.520 --> 20:44.440
that Podman is a container runtime

20:45.600 --> 20:46.880
and that's not true.

20:46.880 --> 20:51.200
And they've told me that Creo is a container engine

20:51.200 --> 20:52.120
that doesn't have a runtime

20:52.120 --> 20:54.780
and that I cannot overstate how wrong that is.

20:55.720 --> 20:57.040
And I just repeated it incorrectly.

20:57.040 --> 20:59.080
It's using completely different wrong terminology.

20:59.080 --> 21:01.880
So let's get to terminology right here, okay?

21:01.880 --> 21:06.120
So according to the documentation,

21:06.120 --> 21:09.400
Creo is a container engine

21:09.400 --> 21:13.680
that fulfills the container runtime interface.

21:13.680 --> 21:18.280
And it does so by calling into Run C

21:18.280 --> 21:21.160
which fulfills the CRI stuff.

21:21.160 --> 21:24.120
Now, container D, which if it's not confusing enough

21:24.120 --> 21:26.280
has its own component called CRI

21:26.280 --> 21:31.280
which also fulfills this CRI and its own way.

21:31.600 --> 21:33.760
And I've read two different blogs

21:33.760 --> 21:35.720
that said container D doesn't use Run C

21:35.720 --> 21:37.800
and then I read another two blogs that were newer

21:37.800 --> 21:39.720
that said container D now uses Run C

21:39.720 --> 21:41.240
and then I put it together

21:41.240 --> 21:42.920
that the other ones were saying

21:42.920 --> 21:45.160
that it used container lib or lib container.

21:45.160 --> 21:47.640
And then I actually read another blog that said,

21:47.640 --> 21:50.880
actually Run C is lib container,

21:50.880 --> 21:53.800
it got modernized and that's its new name.

21:53.840 --> 21:58.200
So I just saved you like two hours of research

21:58.200 --> 22:00.980
to get that down if that turns out to be true

22:00.980 --> 22:02.760
because that was so frustrating.

22:02.760 --> 22:05.600
I was like, what the hell are we talking about here?

22:05.600 --> 22:08.960
So as of this moment, knock on wood,

22:08.960 --> 22:10.640
I think it's safe to say

22:10.640 --> 22:14.060
that all of the major container engines

22:14.060 --> 22:19.060
that are used by Kubernetes all use Run C.

22:19.360 --> 22:21.480
There is no other competitor to this.

22:22.320 --> 22:26.280
And so anyway, this is the problem with blogging, right?

22:26.280 --> 22:27.720
As it gets all outdated and everything.

22:27.720 --> 22:30.760
So I was actually really happy to hear that

22:30.760 --> 22:31.960
because that simplified my graph

22:31.960 --> 22:33.600
because before I had to have like another piece here

22:33.600 --> 22:34.840
or something, right?

22:34.840 --> 22:36.280
There was another thing that fulfilled the CRI

22:36.280 --> 22:38.680
and I found out, oh, it's just Run C, right?

22:38.680 --> 22:43.680
So is Nerd CTL only for container D?

22:45.160 --> 22:46.820
Show me that in writing someplace.

22:47.700 --> 22:51.660
Show me that Nerd CTL can't talk to CRIO.

22:52.740 --> 22:53.880
If you could show me that in writing,

22:53.880 --> 22:55.180
I'd be happy to change it.

22:57.500 --> 23:00.820
Cause I think that's what that is, right?

23:00.820 --> 23:04.660
You can use CTR or that, right?

23:04.660 --> 23:06.580
I think that's right.

23:06.580 --> 23:08.900
Frankly, I didn't do any research on Nerd CTL at all.

23:08.900 --> 23:10.180
I've just heard people talking about it.

23:10.180 --> 23:11.460
I don't plan on using it at all.

23:11.460 --> 23:12.780
I just let it put it there.

23:12.780 --> 23:14.780
So if you know for a fact

23:14.780 --> 23:16.020
that that only talks to container D

23:16.060 --> 23:17.740
please let me know.

23:17.740 --> 23:19.660
There is a CTR command that's documented

23:19.660 --> 23:21.580
in the Talos documentation.

23:21.580 --> 23:23.740
It's also documented in the QADM,

23:24.820 --> 23:27.380
a NIT documentation on the official community site.

23:27.380 --> 23:29.660
So in fact, container D is still, as I said,

23:29.660 --> 23:32.260
is still front and center when it comes to certification.

23:32.260 --> 23:33.100
It doesn't have anything

23:33.100 --> 23:36.340
on the certification preparation materials for CRIO at all.

23:37.900 --> 23:40.980
This is the Nerd CTL Docker compatible CLI for container D.

23:42.820 --> 23:44.660
Docker compatible CLI for container D.

23:44.660 --> 23:46.740
Okay, well, that actually really helps.

23:46.740 --> 23:47.580
Thank you very much.

23:47.580 --> 23:49.740
That's why I'm doing this.

23:49.740 --> 23:50.700
All right.

23:50.700 --> 23:51.620
Yeah, I didn't even go there.

23:51.620 --> 23:52.620
I didn't know I didn't read anything

23:52.620 --> 23:54.820
about the Nerd CTL at all, little or nothing.

23:54.820 --> 23:55.900
I just put it on here

23:55.900 --> 23:58.100
because people keep recommending it.

23:59.340 --> 24:01.620
So that's good to know, that's good to know.

24:01.620 --> 24:05.660
So container D is still a really strong container

24:05.660 --> 24:07.860
but let me tell you the reason I'm not using it.

24:07.860 --> 24:09.180
Container D is still maintained

24:09.180 --> 24:10.980
by the Docker company officially

24:10.980 --> 24:13.740
and requires some Docker CE packages

24:13.740 --> 24:14.860
to be installed causing confusion.

24:14.860 --> 24:16.380
I did this last year.

24:16.380 --> 24:19.900
Last year, I installed container D as my runtime engine

24:19.900 --> 24:22.500
and it forces you to do,

24:22.500 --> 24:26.300
as soon as you pack, install or whatever you wanna do,

24:26.300 --> 24:29.100
I had to install Docker CE in order to use container D.

24:29.100 --> 24:30.540
And I was like, what the hell?

24:30.540 --> 24:32.540
Because there were packages from it.

24:32.540 --> 24:34.740
And they have never, as far as I know,

24:34.740 --> 24:35.620
they haven't separated them.

24:35.620 --> 24:38.060
So when you read the documentation for installing container D

24:38.060 --> 24:41.140
because it's the same thing that's used in Docker now,

24:41.140 --> 24:43.720
you'll read all this conflicting information

24:43.720 --> 24:44.920
about how to install it.

24:44.920 --> 24:46.160
It turns out that I had to,

24:46.160 --> 24:48.400
yes, I had to follow these installation instructions

24:48.400 --> 24:52.240
and then I had to go in and change all of the defaults

24:52.240 --> 24:53.920
that were installed by Docker CE

24:53.920 --> 24:55.520
so that they would use only container D.

24:55.520 --> 24:58.060
And that step was a pain in the butt.

24:58.060 --> 25:00.680
It took me like an hour to do it, felt like a year

25:00.680 --> 25:02.480
but it took me like an hour to do it.

25:04.560 --> 25:06.360
And container D filled the same role.

25:07.480 --> 25:09.320
Well, I know that's what we're trying to get at.

25:09.320 --> 25:12.240
So the way of JS libraries is if I feel like

25:12.240 --> 25:13.600
the next best thing has come out every week,

25:14.520 --> 25:16.760
yeah, well, the effect of it is is every time they do that,

25:16.760 --> 25:17.800
they also complicate things.

25:17.800 --> 25:20.120
But also, I mean, the abstraction of the interfaces,

25:20.120 --> 25:22.400
the CNI as well, which is the networking part of all this.

25:22.400 --> 25:23.960
We haven't even got that yet.

25:23.960 --> 25:26.760
That completely complicates it even more.

25:26.760 --> 25:30.420
So, you have to know about these things.

25:30.420 --> 25:32.720
And then we got micro virtualization

25:32.720 --> 25:33.880
coming on the scene too.

25:33.880 --> 25:37.480
So anyway, so this is my attempt to simplify this

25:37.480 --> 25:38.760
and make decisions for myself

25:38.760 --> 25:41.840
and to stand by my recommendations for other people.

25:42.800 --> 25:45.720
This is something that's very rare to find in our industry.

25:45.720 --> 25:46.920
There's a lot of people that will tell you

25:46.920 --> 25:48.440
all the possible ways to do things

25:48.440 --> 25:50.160
and they'll have very few opinions.

25:50.160 --> 25:52.440
And I'm gonna tell you why I chose to do these things.

25:52.440 --> 25:54.000
I mean, Tal was, of course, all of this stuff

25:54.000 --> 25:54.840
is irrelevant, right?

25:54.840 --> 25:57.080
Because it's all black box, it's all hidden from you.

25:57.080 --> 25:59.520
But there's other considerations for that.

25:59.520 --> 26:02.640
So if you're installing your own on-prem Kubernetes,

26:02.640 --> 26:05.000
you need to know about these choices.

26:06.240 --> 26:09.960
And so, I mean, I still think it's extremely confusing

26:09.960 --> 26:14.240
that the name Podman has nothing to do with pods at all.

26:16.360 --> 26:18.560
Why did they name it Podman?

26:18.560 --> 26:20.480
I need to drink after that statement.

26:25.440 --> 26:27.320
Red Hat, can you please change the name?

26:27.320 --> 26:29.320
That'll just confuse us all even more.

26:30.880 --> 26:33.800
There's nothing to do with the Kubernetes pod

26:33.800 --> 26:37.680
in the program Podman, not at all.

26:37.680 --> 26:41.240
There is not a single reference to pods at all.

26:41.240 --> 26:42.760
It just happens to be misnamed.

26:43.880 --> 26:46.240
It has pods, but they're different from Kubernetes.

26:46.240 --> 26:47.640
Oh, that's nice to know.

26:49.360 --> 26:51.080
Okay, all right, I'm gonna update my,

26:51.080 --> 26:53.160
I gotta make my thing more accurate then.

26:54.560 --> 26:58.640
Actually, Podman,

26:59.640 --> 27:01.760
as if it wasn't confusing enough,

27:01.760 --> 27:04.880
Podman does have Kubernetes,

27:04.880 --> 27:09.160
does have pods,

27:09.160 --> 27:10.820
have pods,

27:12.400 --> 27:14.840
just not Kubernetes pods.

27:17.440 --> 27:19.000
That makes it even worse.

27:19.920 --> 27:22.360
That makes it even worse.

27:23.960 --> 27:28.600
I mean, the foundational concept is the same, of course it is,

27:28.600 --> 27:30.840
but gotta help you if you think you're gonna be able

27:30.840 --> 27:33.480
to go check all your pods on an input with Podman.

27:33.560 --> 27:35.760
If you install Podman on your endpoint,

27:35.760 --> 27:38.080
this is another thing that's really dangerous,

27:38.080 --> 27:39.040
because I did it.

27:41.600 --> 27:43.760
I'm about to tell you another story of something I did

27:43.760 --> 27:46.800
that I learned from that I'm gonna save you some time on.

27:46.800 --> 27:50.120
So it's like, so I was going through,

27:50.120 --> 27:52.240
I was going through doing my Kubernetes installation

27:52.240 --> 27:55.440
and I needed to get a container in order to use Vault.

27:56.960 --> 27:58.600
No, in order to use

27:59.560 --> 28:03.080
theCUBE VIP, what is it?

28:03.080 --> 28:04.840
Virtual IP, CUBE VIP.

28:04.840 --> 28:06.200
In order to install CUBE VIP,

28:06.200 --> 28:08.320
which is a load balancer, right?

28:08.320 --> 28:12.200
I had to have a running Docker instance,

28:12.200 --> 28:14.720
a container engine on my endpoint,

28:14.720 --> 28:17.600
but I wanted to install it on the control plane

28:17.600 --> 28:20.040
and my control plane, I had Creo on there.

28:20.040 --> 28:22.800
So I'm gonna tell you my sad story, okay?

28:22.800 --> 28:24.520
So don't be me.

28:24.520 --> 28:25.880
I was like, okay, I picked Creo,

28:25.880 --> 28:27.200
I picked the lightweight engine, everything.

28:27.200 --> 28:30.200
And that's where I learned this important lesson.

28:30.200 --> 28:33.160
Now, just because something is CRI compatible

28:33.160 --> 28:35.840
does not mean it's going to have run or exec

28:35.840 --> 28:37.560
or any of the other stuff that you expect

28:37.560 --> 28:39.520
when you're gonna use Docker or Potman

28:39.520 --> 28:41.640
or any of these higher level tools.

28:41.640 --> 28:42.560
So what happened?

28:42.560 --> 28:47.200
I went in there and the documentation for CUBE VIP says,

28:47.200 --> 28:50.640
either use CTR to install the container

28:50.640 --> 28:51.680
that then you can then run,

28:51.680 --> 28:53.920
which will then install the software.

28:53.920 --> 28:56.440
You have to have a container engine running

28:56.440 --> 29:01.440
and Docker quotes to even install this static pod,

29:02.640 --> 29:04.560
which makes no sense at all.

29:04.560 --> 29:06.320
But that's, in fact, I have soured

29:06.320 --> 29:09.200
on that entire CUBE VIP thing now so much

29:09.200 --> 29:10.880
by those, because of those decisions.

29:10.880 --> 29:13.240
And there's a huge thread on their support channel

29:13.240 --> 29:15.280
about how confusing this is for new users

29:15.280 --> 29:16.200
and all this other stuff.

29:16.200 --> 29:18.640
And now the fact that Creo is like the leading container engine

29:18.640 --> 29:20.080
has further complicated the issue

29:20.080 --> 29:21.440
and they don't even have anything there.

29:21.440 --> 29:26.120
In fact, everybody's pushing for the CUBE VIP project

29:26.120 --> 29:30.160
to just put examples of the config files for static pods,

29:30.160 --> 29:32.080
which just have config files in the API

29:32.080 --> 29:35.400
to just leave that and just let people figure it out

29:35.400 --> 29:37.560
because they don't need to install this container runtime.

29:37.560 --> 29:39.160
So because of all of this crap,

29:39.160 --> 29:41.160
I mean, I lost two hours on this shit.

29:41.160 --> 29:42.800
So I'm saving you some time here.

29:42.800 --> 29:46.840
So I was like, okay, I'm following the instructions

29:46.840 --> 29:49.440
and it says that I need to install,

29:51.000 --> 29:53.400
it says I need to install a Docker engine

29:53.400 --> 29:55.200
or something like that, a container engine.

29:55.280 --> 29:57.280
And then I needed to run it

29:57.280 --> 29:58.960
as a way to bootstrap the manifest system.

29:58.960 --> 30:00.160
Yeah, I agree.

30:00.160 --> 30:05.160
And so it either lists CTR or Docker, that's it.

30:05.920 --> 30:07.720
CTR or Docker.

30:07.720 --> 30:09.280
So what did I do?

30:09.280 --> 30:11.280
I assumed, well, okay, I'll try,

30:11.280 --> 30:12.680
I didn't have CTR because I didn't have

30:12.680 --> 30:13.880
a container runtime engine.

30:13.880 --> 30:16.480
So I made a bunch of bad guesses.

30:16.480 --> 30:19.240
And the first bad guess I made was,

30:19.240 --> 30:22.640
oh, I'll just use Cree CTL because it has a list command.

30:22.640 --> 30:24.440
It shows me all of my containers.

30:24.480 --> 30:25.640
It shows me all of my pods

30:25.640 --> 30:26.880
and I don't even have to have a running queue,

30:26.880 --> 30:27.800
but this will be awesome.

30:27.800 --> 30:32.800
I'm sure it's Docker compatible and not yet, we will.

30:33.040 --> 30:34.920
And so I went to go see if it would work

30:34.920 --> 30:36.960
and it didn't work, obviously, why?

30:36.960 --> 30:39.880
Because Cree CTL only deals with pods.

30:40.960 --> 30:43.080
And pods, yeah, sure.

30:43.080 --> 30:43.920
We had some people tell,

30:43.920 --> 30:44.800
oh, it's fine, it does containers.

30:44.800 --> 30:47.840
No, it doesn't do containers unless they're a pod.

30:47.840 --> 30:49.760
So if you have written all the configuration file

30:49.760 --> 30:53.200
to turn a container that's on the system into a pod,

30:53.200 --> 30:54.600
yeah, it's happy to play with that

30:54.600 --> 30:56.320
and it'll do it and you can run it.

30:56.320 --> 30:59.360
You can start it, you can't run it, you have to start it

30:59.360 --> 31:01.880
because it only implements the minimum necessary

31:01.880 --> 31:04.220
for CRR, which is create, start, kill, delete.

31:04.220 --> 31:05.240
There's no run.

31:06.280 --> 31:07.840
Okay, so that was the first mistake I made.

31:07.840 --> 31:08.880
I was like, I cannot do this.

31:08.880 --> 31:11.280
And then I had a whole bunch of people on the stream

31:11.280 --> 31:13.200
telling me, yes you can, you just have to turn it into a pod.

31:13.200 --> 31:16.680
I'm like, I just wanna run a stupid install script here.

31:16.680 --> 31:18.920
Why did they not give us an installer?

31:18.920 --> 31:20.560
Why did they not give us an install script?

31:20.560 --> 31:22.000
Why didn't they give us config files?

31:22.000 --> 31:23.560
And everybody came up with opinions that are like,

31:23.560 --> 31:25.640
oh, blah, blah, blah, and I'm like, look, I'm the noob here.

31:25.640 --> 31:26.760
I just wanna use this thing.

31:26.760 --> 31:28.160
And I about threw it all out

31:28.160 --> 31:31.400
because just because of the bad installation steps

31:31.400 --> 31:32.640
because of all these complications

31:32.640 --> 31:34.000
that they didn't even think about.

31:34.000 --> 31:35.520
Yeah, create your YAML and then you're good.

31:35.520 --> 31:36.360
You just copy and paste it.

31:36.360 --> 31:38.680
But it doesn't say that in the documentation at all.

31:38.680 --> 31:40.000
It says your best way to do this

31:40.000 --> 31:41.680
is just go run the container and do this thing.

31:41.680 --> 31:43.880
They could have just provided like a bash script

31:43.880 --> 31:45.880
and been done with it or any of these things.

31:45.880 --> 31:47.160
They didn't do any of that.

31:47.160 --> 31:50.160
And that frustration was enough to almost send me

31:50.160 --> 31:52.200
down the HA proxy path,

31:52.200 --> 31:54.240
which is completely separate from all of this stuff,

31:54.240 --> 31:55.640
which runs under its own daemon,

31:55.640 --> 31:57.440
which I would probably run as a VM

31:57.440 --> 32:00.160
completely outside of Kubernetes if I ended up doing that,

32:00.160 --> 32:01.000
which is a load balance.

32:01.000 --> 32:04.320
It's a different topic, but the accuracy,

32:04.320 --> 32:05.280
I think they should.

32:05.280 --> 32:06.720
I think they should, a lot of people agree with it.

32:06.720 --> 32:07.560
They should do that.

32:07.560 --> 32:09.360
So anyway, I mean, I lost hours on that.

32:09.360 --> 32:11.560
And so did everybody else that was watching this.

32:11.560 --> 32:14.080
And I'm saving you the time by looking at this annoying,

32:14.080 --> 32:14.960
don't do that.

32:14.960 --> 32:17.680
And the reason, I actually, it was so annoyed by it

32:17.680 --> 32:19.840
that I actually read the entire,

32:19.840 --> 32:21.960
I briefly scanned, I should say,

32:21.960 --> 32:27.120
the entire CRI specification to see why this command

32:27.120 --> 32:27.960
isn't in there.

32:27.960 --> 32:29.360
And that was when I uncovered that only create,

32:29.360 --> 32:31.720
start, kill, and delete are truly supported.

32:31.720 --> 32:34.460
They're the only operations required by the CRI,

32:34.460 --> 32:35.880
by the entire specification.

32:35.880 --> 32:39.600
So I was like, okay, so mistake number two that I did,

32:39.600 --> 32:40.760
mistake number two.

32:40.760 --> 32:43.740
I said, okay, well, if I need a container runtime engine

32:43.740 --> 32:45.120
over there and I need to get to these containers,

32:45.120 --> 32:46.320
I need to be able to do the,

32:46.320 --> 32:47.520
I need to follow the instructions,

32:47.520 --> 32:49.760
which are Docker run, right?

32:49.760 --> 32:51.120
Or CTR run.

32:51.120 --> 32:53.040
I'm like, huh, well, there's no Docker, there's no CTR.

32:53.040 --> 32:54.240
What's my next best guess?

32:54.240 --> 32:55.080
Podman.

32:55.080 --> 32:56.440
So I mean, I was like, well,

32:56.440 --> 32:58.360
Podman is supposed to work with everything, right?

32:58.360 --> 33:01.180
It's CRI, it's got CRI built into it.

33:01.180 --> 33:02.880
I'm sure that will work.

33:02.880 --> 33:03.720
Wrong.

33:03.720 --> 33:07.000
So I installed Podman onto the cube controller,

33:07.000 --> 33:10.280
the Kubernetes plane, so that for one reason only,

33:10.280 --> 33:14.000
just so that I could run the container that would then,

33:14.000 --> 33:18.840
you know, start and install my cube, my QVIP, right?

33:18.840 --> 33:21.760
And it worked, it worked, it installed it just fine.

33:21.760 --> 33:23.880
But then I later on, I started noticing

33:24.840 --> 33:28.120
that what the Podman was showing me

33:28.120 --> 33:31.780
was completely different from what Cree CTL was showing me.

33:32.680 --> 33:35.280
And I noticed that they were looking at different sockets

33:35.280 --> 33:37.440
or different services and things completely entirely.

33:37.440 --> 33:40.880
And then I realized a very, very important lesson.

33:40.880 --> 33:44.480
And I cannot overemphasize this enough.

33:44.480 --> 33:49.480
Do not mix your Creo container engines

33:50.720 --> 33:55.160
on a Kubernetes node with any other high level

33:55.160 --> 33:57.860
runtime management tool.

33:57.860 --> 34:01.680
Just don't do it, because you cannot be sure

34:01.680 --> 34:05.040
that they're gonna use the same thing underneath.

34:05.040 --> 34:07.280
In fact, the very nature of the engine makes it

34:07.280 --> 34:09.720
so that they have radically different ways

34:09.720 --> 34:10.560
of implementing things.

34:10.560 --> 34:12.560
Container D has its whole socket thing.

34:12.560 --> 34:14.620
Creo has got its own service thing.

34:15.960 --> 34:17.880
And you know what I'm saying?

34:17.880 --> 34:22.880
It's like there's just a ton of reasons not to do that

34:23.720 --> 34:27.120
because the way that containers are implemented

34:27.120 --> 34:30.960
by the engine, even if the underlying LXC stuff

34:30.960 --> 34:33.840
is the same, because that's what this is all into, right?

34:33.840 --> 34:37.800
But that middleware between the person talking

34:37.800 --> 34:39.320
to the container for, or the thing talking

34:39.320 --> 34:41.200
to the container, person or service,

34:41.200 --> 34:45.640
and the underlying LXC execution of the containers,

34:45.640 --> 34:48.680
the stuff in between there can radically differ.

34:48.680 --> 34:52.240
And this has been the whole area of the fight

34:52.240 --> 34:53.760
between Creo and Container D.

34:53.760 --> 34:55.360
Container D is insecure.

34:55.360 --> 34:57.020
I mean, they fixed a lot of it now,

34:57.020 --> 35:00.760
but Creo does not have, get privileged,

35:00.760 --> 35:02.840
it doesn't have a socket that's running its route.

35:02.840 --> 35:06.600
All the things that Docker just got beat up over

35:06.600 --> 35:08.480
for just doing poorly.

35:08.520 --> 35:11.240
Inefficiently, poorly, and insecurely,

35:11.240 --> 35:13.280
Docker just really messed up.

35:13.280 --> 35:14.920
And they just never intended to fix it.

35:14.920 --> 35:17.240
And so Container D has tried to kind of fix

35:17.240 --> 35:18.560
all those things over the years and say,

35:18.560 --> 35:20.080
well, yeah, okay, we did that wrong.

35:20.080 --> 35:21.600
If you wanna do it this other way, do it this other way,

35:21.600 --> 35:22.880
but it's not the default, blah, blah, blah.

35:22.880 --> 35:24.160
It's a pain in the ass.

35:24.160 --> 35:26.200
The bottom line is that the stuff

35:26.200 --> 35:28.440
in this middle layer here, right?

35:28.440 --> 35:31.060
The stuff right here and this middle layer

35:31.060 --> 35:33.440
is so different depending on the stuff

35:33.440 --> 35:35.920
in the top layer that gets installed

35:35.920 --> 35:40.040
that you just don't wanna mix the two.

35:40.040 --> 35:41.640
Do not cross the streams.

35:41.640 --> 35:43.800
If you do, you're gonna get burned.

35:43.800 --> 35:47.280
And I'm gonna read the statement down here

35:47.280 --> 35:48.120
that goes with this.

35:48.120 --> 35:50.960
I'm gonna zoom in on this a little bit and read this.

35:50.960 --> 35:55.200
But this summation down here with the explosion

35:55.200 --> 35:59.280
is my conclusion about this.

35:59.280 --> 36:00.800
So with Creo containers,

36:01.800 --> 36:04.400
the Creo containers must be put into pods

36:04.400 --> 36:07.240
to run them at all, all right?

36:07.240 --> 36:09.360
So this is considered good

36:09.360 --> 36:11.480
because using a container runtime for anything

36:11.480 --> 36:14.840
but Kubernetes on a node, on a Kubernetes node

36:14.840 --> 36:17.060
is considered bad practice.

36:17.060 --> 36:20.800
In fact, when I suggested on the stream,

36:20.800 --> 36:22.200
while I was doing this,

36:22.200 --> 36:24.160
that our company regularly does this

36:24.160 --> 36:26.160
because they don't allow users to have their own Docker

36:26.160 --> 36:28.100
and they regularly tell people

36:28.100 --> 36:29.720
if you need to run Docker for anything,

36:29.720 --> 36:31.520
just go get on one of the head nodes

36:31.520 --> 36:34.320
and run Docker straight up on it

36:34.320 --> 36:37.040
and just reuse the Docker container engine on there.

36:37.040 --> 36:39.880
That's also running the control plane containers

36:39.880 --> 36:40.840
and pods on there.

36:41.760 --> 36:45.080
That is like a really bad offense.

36:45.080 --> 36:47.760
It's not the kind of thing you're gonna get fired for yet

36:47.760 --> 36:49.400
but when I mentioned that on the stream

36:49.400 --> 36:50.240
that people were doing it,

36:50.240 --> 36:52.520
people were laughing their asses off.

36:52.520 --> 36:54.120
They were freaking the fuck out.

36:54.120 --> 36:57.280
They could not believe that any company

36:57.280 --> 36:58.960
would ever allow that

36:58.960 --> 37:00.440
because it's not only is it insecure

37:00.440 --> 37:02.560
but it's just asking to blow up.

37:03.440 --> 37:06.040
It is, it's asking to blow up.

37:06.040 --> 37:08.620
It's absolutely horrible to do that.

37:08.620 --> 37:11.020
Now, I tried to make the case wrongly

37:11.020 --> 37:13.000
that well, what if you only have one machine

37:13.000 --> 37:13.840
then you have to decide

37:13.840 --> 37:16.920
and maybe you wanna share both of them over there.

37:16.920 --> 37:17.920
You know what I mean?

37:17.920 --> 37:20.120
And the fact of the matter is

37:20.120 --> 37:24.360
thou shalt never ever use your Kubernetes nodes,

37:24.360 --> 37:26.280
the container engine on your Kubernetes nodes

37:26.320 --> 37:28.400
for anything but Kubernetes.

37:30.720 --> 37:33.200
Here's some VMs on ES6, of course.

37:33.200 --> 37:35.920
So yeah, right.

37:35.920 --> 37:38.640
And so let me just continue reading this.

37:38.640 --> 37:41.400
So it's considered very bad practice today.

37:41.400 --> 37:44.440
It is also a bad practice to install Podman

37:44.440 --> 37:47.960
or any container utility on a node

37:47.960 --> 37:52.240
because the engine used may not coincide.

37:52.240 --> 37:55.920
And it may, it'll still use LXC down on the bottom.

37:55.920 --> 37:59.160
It has to, but the stuff in between there

37:59.160 --> 38:01.240
is totally different, whether it uses a service

38:01.240 --> 38:02.640
or a daemon or a container.

38:02.640 --> 38:06.600
So it's not gonna be what you would expect, right?

38:06.600 --> 38:09.120
And so as you become familiar with the internals

38:09.120 --> 38:13.600
of how, you know, Creo uses its thing, which is a service

38:13.600 --> 38:16.240
then you know that how to do that

38:16.240 --> 38:18.680
but a container uses a socket, which is totally different.

38:18.680 --> 38:22.000
It may be that there's multiple options for both of them

38:22.600 --> 38:27.480
but the point is, is that you can't be sure

38:27.480 --> 38:31.120
that you're apt install or DNF install Podman

38:31.120 --> 38:34.280
is actually going to do the same thing

38:34.280 --> 38:39.280
that you used when you installed your container runtime engine

38:39.280 --> 38:40.680
which is a totally, whether it's containerity

38:40.680 --> 38:41.640
or it's the other thing.

38:41.640 --> 38:43.280
So do not mix the two.

38:43.280 --> 38:46.240
If you mix the two, you're just asking for pain and hurt

38:46.240 --> 38:49.800
even though you think it might be saving something, it's not.

38:49.840 --> 38:52.080
It is also bad practice itself on that, okay.

38:52.080 --> 38:55.360
As a rule of thumb, use kreectl for pods,

38:55.360 --> 38:56.400
containers on a note.

38:56.400 --> 38:59.760
And I said the word pod there on purpose, right?

38:59.760 --> 39:04.460
Kreectl cannot directly access containers, period.

39:04.460 --> 39:05.800
It doesn't have to go to kubelet.

39:05.800 --> 39:07.040
That's why I drew that little picture

39:07.040 --> 39:08.400
of a configuration file.

39:08.400 --> 39:11.720
So if you have static pods on the machine,

39:11.720 --> 39:14.360
it can talk directly to those pods

39:14.360 --> 39:16.340
but it has to have knowledge of those pods.

39:16.340 --> 39:18.320
That means it has to see the configuration file

39:18.320 --> 39:19.880
to know how to wrap up that container

39:19.880 --> 39:22.920
and put it into a pod and then access it using a pod.

39:24.560 --> 39:27.440
And of course, you can't use kubectl

39:27.440 --> 39:29.280
on the endpoint without kubelet.

39:29.280 --> 39:31.600
That has to have the API as far as I know.

39:31.600 --> 39:35.680
So as a rule of thumb, use kreectl for pods,

39:35.680 --> 39:38.520
containers on a note, everything on a note,

39:40.520 --> 39:41.520
for everything on a note.

39:41.520 --> 39:44.840
And podman, despite the horribly confusing name

39:44.880 --> 39:48.520
or nerdctl for non-kubernetes containers.

39:50.000 --> 39:54.040
So containers are still very relevant.

39:54.040 --> 39:55.440
So people were asking me about Docker compose,

39:55.440 --> 39:56.920
why that isn't on here and stuff.

39:56.920 --> 40:00.760
Because Docker compose and these top-level things,

40:03.240 --> 40:05.080
these top-level things up here,

40:05.080 --> 40:07.040
they're nice and good and all

40:07.040 --> 40:12.040
but they're not really, these things up here,

40:12.120 --> 40:17.120
these things do not have to be associated with Kubernetes.

40:18.320 --> 40:21.080
But that is an entirely different approach to containers.

40:21.080 --> 40:24.720
And I really wanna emphasize that in 2022,

40:24.720 --> 40:27.400
the best thing you can do for yourself as a beginner

40:27.400 --> 40:31.200
or as a veteran is to think of Kubernetes containers

40:31.200 --> 40:34.360
differently than everything else.

40:35.640 --> 40:38.280
Because if you do, you'll save yourself.

40:38.280 --> 40:40.600
You say, well, they're all just containers.

40:40.600 --> 40:42.880
And yeah, okay, they're containers

40:42.880 --> 40:46.640
at the lowest, lowest, lowest, lowest, lowest, lowest level.

40:46.640 --> 40:48.200
They're all using LXC.

40:48.200 --> 40:49.560
Okay, that's true.

40:49.560 --> 40:53.880
But everything in between there and you

40:53.880 --> 40:57.160
is totally different depending on whether you're doing it

40:57.160 --> 41:00.680
for Kubernetes or you're doing it for Docker compose.

41:00.680 --> 41:04.560
And to save yourself a lot of pain and suffering,

41:04.560 --> 41:06.440
I cannot overstate this enough

41:06.440 --> 41:09.000
because I went through hours of it.

41:09.000 --> 41:14.000
That you need to separate those concepts in your brain.

41:14.480 --> 41:16.680
And should you learn Docker compose?

41:16.680 --> 41:19.040
Yeah, should you learn Docker swarm?

41:19.040 --> 41:20.520
I don't know, maybe not.

41:20.520 --> 41:22.640
But Docker compose is not bad.

41:22.640 --> 41:25.040
And you can do podman compose too, right?

41:25.040 --> 41:27.520
But those are things that are for a totally different approach.

41:27.520 --> 41:31.480
And frankly, we need to have, in fact,

41:31.480 --> 41:34.560
from now on I'm gonna refer to them as Kubernetes containers

41:34.560 --> 41:37.520
and probably Docker compose containers.

41:38.520 --> 41:40.920
Because those, to me, that's the biggest separation, right?

41:40.920 --> 41:42.960
If you're using Docker compose

41:44.680 --> 41:46.240
or you're using podman compose or whatever,

41:46.240 --> 41:48.560
but Docker, as soon as you were Docker and compose,

41:48.560 --> 41:51.760
you're like, oh, we're talking about that.

41:51.760 --> 41:53.640
You're talking about all the container wonderfulness

41:53.640 --> 41:55.400
that doesn't have anything to do with Kubernetes.

41:55.400 --> 41:57.200
But when you start talking about Kubernetes containers,

41:57.200 --> 41:59.600
you're talking about a different beast altogether,

41:59.600 --> 42:01.800
even though some of these things have similarities

42:01.800 --> 42:03.640
at certain points in the architecture.

42:04.600 --> 42:07.040
Whew, now that seems like a lot to say.

42:08.160 --> 42:11.640
But I really feel like I finally understand it.

42:11.640 --> 42:14.560
And I just had to capture that really quickly into a video.

42:14.560 --> 42:16.640
That's all I have for this specific video.

42:18.040 --> 42:21.400
And hopefully that will save you some pain and suffering

42:21.400 --> 42:25.400
as you go about your Kubernetes admin installations

42:25.400 --> 42:29.400
and all of the other stuff that you might end up wanting to do.

42:29.400 --> 42:31.360
This diagram is available.

42:31.360 --> 42:33.560
Anybody to come see, I'll put it in the Discord.

42:33.560 --> 42:38.560
And I'll be using this diagram to make sense of my world

42:40.400 --> 42:43.720
as I go about the installation of my,

42:43.720 --> 42:44.720
the next thing I'm gonna be doing,

42:44.720 --> 42:48.040
I'm gonna be installing these clusters.

42:48.040 --> 42:50.560
And I, did we save this already?

42:50.560 --> 42:53.160
This, I think it saves automatically actually.

42:53.160 --> 42:54.160
Supposed to anyway.

42:55.480 --> 42:58.600
But so yeah, so this, the next thing I'm gonna be doing,

42:58.600 --> 43:00.360
which I may or may not do today,

43:00.360 --> 43:03.360
is I'll be installing some other Kubernetes clusters

43:03.360 --> 43:06.840
over here and we're gonna go back to using QBDM for that.

43:06.840 --> 43:11.320
I do need to solve all so I can get some PKI root CA stuff.

43:11.320 --> 43:13.080
And I need to get my head around

43:13.080 --> 43:15.160
how I'm gonna manage VMs on this machine

43:15.160 --> 43:18.160
because I'm gonna be running a Cordeon S&D,

43:18.160 --> 43:20.760
a Key Cloak and Vault and all of that stuff

43:20.760 --> 43:23.880
before I go forth with my QBDM installation,

43:23.880 --> 43:28.120
which is probably not gonna happen tonight or even tomorrow,

43:28.120 --> 43:31.080
but I am going out of town for next week.

43:32.080 --> 43:33.960
Yeah, and you like Vault, yeah.

43:33.960 --> 43:37.280
So just to give you an overview of what's next

43:37.280 --> 43:38.880
and why this might relate.

43:40.800 --> 43:41.840
Oh, we use build a lot.

43:41.840 --> 43:46.840
Yeah, so builda is actually built into Podman.

43:46.920 --> 43:48.400
That's another thing I like about Podman

43:48.400 --> 43:49.640
is the build is built into,

43:49.640 --> 43:50.960
and builda is just,

43:50.960 --> 43:53.760
it's all it does is just build the images, right?

43:53.760 --> 43:55.560
And escopio is another good one

43:55.560 --> 43:59.560
that will transfer containers between registries

43:59.560 --> 44:00.560
and stuff like that.

44:01.760 --> 44:03.560
So yeah, just to finish out the idea

44:03.560 --> 44:04.960
about where this is going.

44:06.600 --> 44:07.560
I keep drawing on here

44:07.560 --> 44:10.000
because I'm still got that selected.

44:12.280 --> 44:15.680
So the next steps are probably,

44:15.680 --> 44:17.160
so as I got my whole Vlan all set up,

44:17.160 --> 44:18.560
I'm so happy about that.

44:18.560 --> 44:20.800
There's a video on that if you wanna watch that.

44:21.760 --> 44:24.800
That we're gonna go ahead and,

44:24.800 --> 44:25.800
where does Istio fit?

44:25.800 --> 44:27.480
Istio is just a service mesh.

44:28.480 --> 44:32.080
Yeah, so we are gonna do Istio,

44:32.080 --> 44:34.840
but it's gonna be like the last thing.

44:34.840 --> 44:36.040
The main thing Istio gives you,

44:36.040 --> 44:36.880
it gives you lots of things,

44:36.880 --> 44:37.800
but the main thing it gives you

44:37.800 --> 44:40.560
is like virtual machine, virtual servers

44:40.560 --> 44:43.880
that have domain names that get a little balance of stuff.

44:43.880 --> 44:44.720
Yeah.

44:47.240 --> 44:49.400
Yeah, we still have to pick a CNI and all that.

44:49.400 --> 44:51.920
So before, so a couple of changes

44:51.920 --> 44:53.760
just to update everybody who hasn't watched.

44:53.760 --> 44:56.340
So this is gonna be the TALIS cluster over here.

44:56.380 --> 44:58.220
Right now, I'm doing some testing offline

44:58.220 --> 45:00.820
to see if I can TFTP boot

45:00.820 --> 45:03.700
one of the Dell Optuplex machines that I already have.

45:03.700 --> 45:06.860
There is some problems with the Pixie boot

45:06.860 --> 45:09.580
and it requires you to push F11 to do the booting.

45:09.580 --> 45:13.300
So that does annoy me a lot actually.

45:15.260 --> 45:18.900
And because I can't, I don't know.

45:18.900 --> 45:23.460
I'm really tempted to just throw TALIS out for now.

45:23.460 --> 45:25.380
As soon as I read that TALIS cannot do,

45:25.420 --> 45:26.380
I mean, this is another topic.

45:26.380 --> 45:27.620
I should talk about this, not right now,

45:27.620 --> 45:31.740
but when I found out that TALIS cannot,

45:31.740 --> 45:34.500
that these machines cannot do true Pixie boot

45:34.500 --> 45:37.460
that any time you, TALIS requires

45:37.460 --> 45:38.860
being able to reboot the machine.

45:38.860 --> 45:41.620
And I have not gotten around.

45:41.620 --> 45:44.180
I need to ask somebody from Cedaro or TALIS

45:44.180 --> 45:48.180
as like, what happens about that, right?

45:48.180 --> 45:51.140
So I want a totally, you know,

45:51.140 --> 45:53.700
hands off installation and management of TALIS.

45:53.700 --> 45:56.220
That's the thing that they keep promising you.

45:56.220 --> 45:58.460
But if every time I reconfigure a server,

45:58.460 --> 46:01.020
I have to go in and touch every server and reboot them.

46:01.020 --> 46:03.300
I don't, it's not even, it's not, it's a non-starter.

46:03.300 --> 46:05.380
I don't even want to do that.

46:05.380 --> 46:06.700
Thank you for that.

46:06.700 --> 46:09.900
So, so I, I'm, you know what?

46:09.900 --> 46:11.380
I'm just gonna make a decision.

46:11.380 --> 46:12.780
I'm gonna throw these out.

46:14.060 --> 46:16.860
I'm gonna throw TALIS out of the environment for now.

46:16.860 --> 46:19.660
For now, I got too much other stuff to deploy.

46:20.260 --> 46:25.260
And we will go with that.

46:26.300 --> 46:28.100
It might be that I do PBS for this.

46:28.100 --> 46:31.820
We don't know, the key HTTP from IC.

46:31.820 --> 46:33.780
Yeah, did you know, did you know that,

46:33.780 --> 46:34.860
did you hear that we found out that

46:34.860 --> 46:37.260
IC DHCP is supported on OpenSense?

46:37.260 --> 46:38.900
That's the, that's the DHCP it uses.

46:38.900 --> 46:40.420
So you can go in there and edit it.

46:40.420 --> 46:42.500
The problem is, is you got to save your files someplace

46:42.500 --> 46:45.140
because if OpenSense, if you update the firmware,

46:45.140 --> 46:46.900
it'll throw out your entire configuration.

46:46.900 --> 46:48.780
So you got to, it will back it up for you.

46:48.860 --> 46:51.260
But it's something that's kind of, I was,

46:51.260 --> 46:54.300
we, I found out, is it, yeah.

46:55.900 --> 46:57.940
I think the key DHCP server is probably gonna be the one

46:57.940 --> 46:59.100
that I'm gonna install.

47:00.940 --> 47:04.900
I am going to install a DHCP server on my internal VLAN,

47:04.900 --> 47:09.340
but I don't know how much of a priority it is right away

47:10.300 --> 47:12.900
for years, very, very fantastic, very good stuff.

47:14.700 --> 47:17.460
So, I mean, as far as YouTube goes,

47:18.460 --> 47:19.820
I'm gonna go ahead and end that video here.

47:19.820 --> 47:23.300
So just as a follow-up, so, you know,

47:23.300 --> 47:28.300
have fun with that, with the container runtime engine,

47:30.060 --> 47:31.060
maybe play around with it.

47:31.060 --> 47:33.860
The last thing I will say, for a very long time,

47:33.860 --> 47:36.820
I've been, I was anti-podman and I was wrong.

47:36.820 --> 47:39.380
I was wrong for a number of reasons,

47:39.380 --> 47:41.180
but the most important reason that I was wrong,

47:41.180 --> 47:42.820
I was mostly wrong because I was looking at how

47:42.820 --> 47:44.280
podman manages a container.

47:44.280 --> 47:47.220
For example, podman does a lot of magic

47:47.220 --> 47:48.060
to the container.

47:48.060 --> 47:50.980
For example, it injects the system CTL into any pod

47:52.100 --> 47:55.940
or stuff that enables system CTL to be more specific

47:55.940 --> 47:58.660
because they make a big case at Red Hat

47:58.660 --> 48:03.180
that container should be able to simulate machines,

48:03.180 --> 48:05.300
you know, and be basically miniature VMs,

48:05.300 --> 48:07.600
which I completely disagree with.

48:07.600 --> 48:09.220
I think micro, you know, use the virtual machine

48:09.220 --> 48:11.220
for a virtual machine and don't use podman for that.

48:11.220 --> 48:12.980
It was annoying though, like a year and a half ago

48:12.980 --> 48:14.900
when I was doing the boost and we were using containers

48:14.900 --> 48:17.260
because I couldn't simulate the installation

48:17.260 --> 48:19.400
and management of services the same way you would

48:19.400 --> 48:21.460
on an actual Linux virtual machine.

48:21.460 --> 48:23.740
And that's one of the main reasons that we switched over

48:23.740 --> 48:26.260
to this when you're doing like system CTL, you know,

48:26.260 --> 48:29.940
restart, you know, whatever, HTTPD or NGINX or whatever,

48:29.940 --> 48:32.940
those kinds of commands can't be done in a container

48:32.940 --> 48:34.260
and they can't be practiced in a container.

48:34.260 --> 48:35.900
But if you just need access to a terminal

48:35.900 --> 48:37.940
to practice bash and stuff, great.

48:37.940 --> 48:41.140
But if you want to practice systems administration

48:41.140 --> 48:43.860
and on whatever, I think you need a virtual machine

48:43.860 --> 48:46.900
which prompted the change to use virtual machines

48:46.900 --> 48:48.860
in the boost in 2022.

48:48.860 --> 48:52.100
So in 2023, however, I'm strongly, well,

48:52.100 --> 48:56.660
I already decided that we're gonna be doing all four ways,

48:56.660 --> 48:59.380
all five ways of getting Linux, which I've mentioned before.

48:59.380 --> 49:01.260
And one of those ways is podman.

49:01.260 --> 49:04.620
And the reason I'm even saying about this now

49:04.620 --> 49:09.620
is that it's six-caliber, you guys wanna copy again.

49:10.620 --> 49:15.620
So as I've said, the podman, now I've tested it

49:24.140 --> 49:26.860
in three different machines, I've tested on Mac, Linux

49:26.860 --> 49:31.260
and Windows, the podman desktop installation process

49:31.260 --> 49:36.100
is as easy as desktop, Docker desktop used to be.

49:36.100 --> 49:37.660
I need a lot of commands.

49:37.660 --> 49:39.540
The command thing wasn't even working till yesterday.

49:39.540 --> 49:41.540
So I'll update all of that, I need lots of things.

49:41.540 --> 49:46.540
I also need help and time and a clean room.

49:47.580 --> 49:52.580
Okay, so we will be providing instructions

49:54.180 --> 49:58.180
in the boost about how to get podman up

49:59.620 --> 50:02.380
and running on your desktop.

50:02.380 --> 50:04.820
But I just wanna kind of conclude this YouTube video

50:04.820 --> 50:09.220
with that, if you haven't tried podman out yet

50:09.220 --> 50:12.300
on the desktop, whatever your desktop is, you might try it.

50:12.300 --> 50:14.340
Something else I'm super interested in

50:14.340 --> 50:18.380
is that podman actually chose to use Kimu and KVM,

50:18.380 --> 50:21.180
which is exactly what Docker desktop does, by the way.

50:21.180 --> 50:23.220
Okay, here's a fun fact that you might not understand.

50:23.220 --> 50:25.420
I'm gonna actually sip some wine for effect.

50:28.740 --> 50:30.020
Here it comes.

50:30.020 --> 50:35.020
You cannot run a container on anything but Linux.

50:35.260 --> 50:38.260
Someone explain that while I take another sip of my wine.

50:43.260 --> 50:48.260
You cannot run a container,

50:48.260 --> 50:51.140
if you wanna get really pedantic with your friends,

50:51.140 --> 50:54.740
pick you up, you cannot run a container

50:54.740 --> 50:57.180
on anything but Linux.

50:59.180 --> 51:00.860
A modern container, a Docker container,

51:00.860 --> 51:02.300
if you wanna put the word Docker in front of it,

51:02.660 --> 51:05.060
you cannot run a Docker container on anything but Linux.

51:05.060 --> 51:08.060
BSD has jails, they are not Docker containers.

51:08.060 --> 51:10.380
So if you wanna use the word that people will recognize,

51:10.380 --> 51:12.380
the statement, you cannot run Docker.

51:12.380 --> 51:15.380
But I run it on my Mac all the time, you know, you don't.

51:17.380 --> 51:20.380
You do not run containers on your Mac.

51:20.380 --> 51:23.380
You do not run containers on your Windows machine.

51:23.380 --> 51:26.380
You don't even run containers in WSL.

51:26.460 --> 51:28.460
On Mac, they use a compatibility layer.

51:28.460 --> 51:31.460
And on, you know what the compatibility layer is?

51:31.460 --> 51:36.460
Kimu, Docker desktop and Podman desktop.

51:36.460 --> 51:41.460
And I assume now Rancher desktop all use a minimal virtual machine

51:41.460 --> 51:46.460
that uses Kimu in order to emulate Linux.

51:46.460 --> 51:48.460
And that's how they do it.

51:48.460 --> 51:51.460
You don't even run containers in WSL.

51:51.460 --> 51:53.460
On Mac, they use a compatibility layer.

51:53.540 --> 51:56.540
Linux, and that's how they do it.

51:56.540 --> 51:57.540
They all do it.

51:57.540 --> 51:59.540
And so I was actually looking for the internals of the Podman.

51:59.540 --> 52:00.540
I'm like, what are they doing here?

52:00.540 --> 52:02.540
It turns out they completely straight up copied

52:02.540 --> 52:04.540
what Docker desktop was doing.

52:04.540 --> 52:06.540
Docker desktop is this nice, happy, you know,

52:06.540 --> 52:08.540
electron front end to everything.

52:08.540 --> 52:10.540
But under the hood, it's running Kimu.

52:10.540 --> 52:12.540
And I think Zen, it's not Zen, no, it's not Zen,

52:12.540 --> 52:14.540
because I couldn't run it on the hardware.

52:14.540 --> 52:16.540
Containers need C groups for Linux kernel, I think.

52:16.540 --> 52:21.540
Yeah, LXC, C groups and LXC are what modern Docker containers

52:21.540 --> 52:23.540
are defined to be.

52:23.540 --> 52:27.540
So you cannot have a Docker container without Linux.

52:27.540 --> 52:29.540
So next time you run that on Windows or whatever.

52:29.540 --> 52:32.540
But there's something else I want you to consider here.

52:32.540 --> 52:35.540
It used to be that I would like complain people,

52:35.540 --> 52:38.540
or I would like, well, God, I got to install a whole virtual machine.

52:38.540 --> 52:41.540
In fact, Podman was kind of slow to do Docker desktop.

52:41.540 --> 52:42.540
You know why?

52:42.540 --> 52:44.540
Because there are pedantic engineers over at Red Hat,

52:44.540 --> 52:46.540
and they're like, well, you got to have Linux anyway.

52:46.540 --> 52:49.540
Why don't you just install your own VM and just do it that way?

52:52.540 --> 52:53.540
Am I wrong?

52:53.540 --> 52:57.540
That was Red Hat's position in my mind up till like last year,

52:57.540 --> 52:59.540
or within the last three months.

52:59.540 --> 53:02.540
Before that, they were like, you know what?

53:02.540 --> 53:06.540
Podman's like, we don't need to do stupid desktop stuff.

53:06.540 --> 53:08.540
Nobody needs that.

53:10.540 --> 53:15.540
I mean, everybody knows that containers have to have Linux anyway.

53:15.540 --> 53:17.540
They'll figure it out, and then they'll install a VM,

53:17.540 --> 53:19.540
and then they'll put Linux on there,

53:19.540 --> 53:22.540
and then they'll do Docker as God intended by installing it on Linux

53:22.540 --> 53:24.540
using Podman install.

53:24.540 --> 53:27.540
They can do apt install Podman or DNF install Podman or whatever they want.

53:30.540 --> 53:36.540
And so Red Hat missed the whole desktop market by saying,

53:36.540 --> 53:39.540
just do it that way, and then what happened?

53:39.540 --> 53:43.540
And then last year, Docker famously said,

53:43.540 --> 53:47.540
psych, you'll have to pay us now if you're a certain size,

53:47.540 --> 53:50.540
which is pretty much everybody using it.

53:50.540 --> 53:53.540
And Docker perked their ears up, and Rancher perked their ears up,

53:53.540 --> 53:58.540
and they're like, oh crap, there's no free desktop option anymore.

53:58.540 --> 54:00.540
People will stop using containers and be annoyed by it,

54:00.540 --> 54:03.540
and they'll stop using our other products.

54:03.540 --> 54:04.540
We got to fix this.

54:04.540 --> 54:07.540
And so I imagine somebody over at Red Hat,

54:07.540 --> 54:10.540
somebody over at Red Hat's like, damn, we got to get on this.

54:10.540 --> 54:16.540
So then Rancher desktop and Podman desktop

54:16.540 --> 54:19.540
kind of seem like they're in a race to see who can make the best

54:19.540 --> 54:21.540
desktop container option.

54:21.540 --> 54:23.540
And now we have Podman.

54:23.540 --> 54:26.540
Last week we had, I tested it all out, and Podman works wonderfully

54:26.540 --> 54:27.540
on everything.

54:27.540 --> 54:29.540
It's really weird that it uses WSL instead of WSL2.

54:29.540 --> 54:30.540
I think that's very interesting.

54:30.540 --> 54:32.540
Probably because of the hypervisor dependency.

54:32.540 --> 54:33.540
But I don't know.

54:33.540 --> 54:34.540
I don't know.

54:38.540 --> 54:40.540
You know, our instrument windows is on the Linux containers.

54:40.540 --> 54:41.540
Yes, you can.

54:41.540 --> 54:42.540
That's pretty cool to have that, isn't it?

54:42.540 --> 54:43.540
Anyway.

54:47.540 --> 54:51.540
So we're virtual machines in disguise behind a poorly optimized

54:51.540 --> 54:52.540
electron interface.

54:52.540 --> 54:55.540
I know, exactly.

54:55.540 --> 55:00.540
I mean, you know, in retrospect, I got to tell you,

55:00.540 --> 55:06.540
it actually has improved my position on what I think of Red Hat.

55:06.540 --> 55:09.540
Because Red Hat's like, no, we're not going to do that.

55:09.540 --> 55:13.540
We're not going to bundle a bunch of really beautiful garbage.

55:13.540 --> 55:16.540
We're not going to put lipstick on this turd and get people to

55:16.540 --> 55:19.540
use this virtual machine that's going to screw up.

55:19.540 --> 55:21.540
I mean, Docker did it because they wanted the user experience

55:21.540 --> 55:22.540
to be nice and easy.

55:22.540 --> 55:24.540
That's what made Docker famous.

55:24.540 --> 55:26.540
Because the Linux LXC people forever have been saying,

55:26.540 --> 55:27.540
you can do containers.

55:27.540 --> 55:29.540
And Docker comes along and says, well, yeah, but the CLI sucks.

55:29.540 --> 55:30.540
There's no way to do it.

55:30.540 --> 55:31.540
The average person can't do it.

55:31.540 --> 55:33.540
So we're going to make this nice, pretty happy command line

55:33.540 --> 55:34.540
thing called Docker.

55:34.540 --> 55:38.540
And guess who gets all the credit?

55:38.540 --> 55:39.540
Now they're called Docker containers.

55:39.540 --> 55:41.540
They're not called Linux containers.

55:41.540 --> 55:45.540
Everybody who worked on the LXC project and C groups,

55:45.540 --> 55:47.540
and all the people who made containers happen,

55:47.540 --> 55:50.540
which have been around for more than two decades,

55:50.540 --> 55:53.540
about a decade, I think, probably something like 2011 or something.

55:53.540 --> 55:56.540
They're like just smacking their foreheads.

55:56.540 --> 55:57.540
And they're like, what the hell?

55:57.540 --> 56:00.540
Along comes somebody who cares about their users.

56:00.540 --> 56:02.540
And they're like, no, we're going to make a nice, happy front

56:02.540 --> 56:07.540
and interface to this thing, to the great anger of all the people

56:07.540 --> 56:09.540
who were using containers the hard way.

56:09.540 --> 56:11.540
And they get all their credit.

56:11.540 --> 56:13.540
And then they decided to do this bait and switch on top

56:13.540 --> 56:15.540
of everything else, which just makes the Linux community

56:15.540 --> 56:19.540
fucking hate them because they're, you know,

56:19.540 --> 56:22.540
and that part of the Linux community would have been,

56:22.540 --> 56:24.540
in my estimation, would have been the Red Hat.

56:24.540 --> 56:27.540
Red Hat is more a member of that technical part

56:27.540 --> 56:30.540
of the Linux community than Docker has ever been.

56:30.540 --> 56:32.540
And I mean, there's good people with Docker.

56:32.540 --> 56:34.540
I'm not attacking any specific individuals,

56:34.540 --> 56:38.540
but as a company, they've had really poor decisions.

56:38.540 --> 56:40.540
And so they won't call it good 3C groups.

56:40.540 --> 56:41.540
No, they won't.

56:41.540 --> 56:43.540
I call them containers and container images.

56:43.540 --> 56:45.540
I don't say Docker, nobody does anymore.

56:45.540 --> 56:48.540
Docker is more like canonical in that sense.

56:48.540 --> 56:51.540
Docker has the user's considerations in the forefront

56:51.540 --> 56:54.540
and they will violate good back-end architecture

56:54.540 --> 56:56.540
to make it easier for the user.

56:56.540 --> 56:58.540
And I think that's a good thing.

56:58.540 --> 56:59.540
I do.

56:59.540 --> 57:01.540
I think that we need to, it's a combination of both, right?

57:01.540 --> 57:04.540
And it took them doing that to get Podman

57:05.540 --> 57:08.540
to have a decent desktop offering.

57:08.540 --> 57:10.540
And I'm really glad they did that.

57:10.540 --> 57:14.540
So it's a big, you know, it's a big dynamic going on

57:14.540 --> 57:15.540
all the time.

57:15.540 --> 57:17.540
And many of the things I've said have probably offended

57:17.540 --> 57:19.540
many people very seriously here.

57:19.540 --> 57:20.540
I'm sorry.

57:20.540 --> 57:23.540
I largely don't care because I feel like

57:23.540 --> 57:25.540
we need more opinions in this industry.

57:25.540 --> 57:27.540
There are just too many choices.

57:27.540 --> 57:30.540
And we need more best practice opinions.

57:30.540 --> 57:32.540
And we need to justify those opinions and say,

57:32.540 --> 57:35.540
hey, if you meet this criteria, this is what you should do.

57:35.540 --> 57:37.540
And we should have the courage to start saying those things

57:37.540 --> 57:40.540
and then fixing them when something better comes along.

57:40.540 --> 57:43.540
Otherwise, we're just going to be just floundering around

57:43.540 --> 57:48.540
like we have like for years and we still will continue to do that.

57:48.540 --> 57:50.540
Both the Docker Project and KhanCon have always gone their way

57:50.540 --> 57:52.540
out of the aspect of show typical signs.

57:52.540 --> 57:54.540
Oh, right.

57:54.540 --> 57:56.540
Yes.

57:56.540 --> 57:57.540
Yeah.

57:57.540 --> 57:58.540
But not invented here.

57:58.540 --> 57:59.540
They do that.

57:59.540 --> 58:00.540
Yeah.

58:00.540 --> 58:03.540
I mean, that's just a tech problem in general.

58:03.540 --> 58:08.540
But at the same time, I do believe, to their credit,

58:08.540 --> 58:13.540
that Docker and KhanCon have been more focused on user experience

58:13.540 --> 58:15.540
than the technology.

58:15.540 --> 58:18.540
And that's not a bad thing.

58:18.540 --> 58:19.540
That part of it's not bad.

58:19.540 --> 58:22.540
So I don't want to Docker to integrate better with system

58:22.540 --> 58:24.540
B, but Docker just already said, nah.

58:24.540 --> 58:25.540
Yeah.

58:25.540 --> 58:26.540
Docker's been doing that all along.

58:26.540 --> 58:28.540
The whole system B stuff.

58:28.540 --> 58:33.540
The system B integration and the, you know,

58:33.540 --> 58:36.540
they were trying to stand their ground and say,

58:36.540 --> 58:38.540
we want to have an independent socket.

58:38.540 --> 58:41.540
And I actually agree with that.

58:41.540 --> 58:43.540
I mean, for some of the stuff that I was doing,

58:43.540 --> 58:45.540
I was able to, you can't do Docker in a Docker.

58:45.540 --> 58:46.540
You know that, right?

58:46.540 --> 58:48.540
You can't do Podman and Podman.

58:48.540 --> 58:50.540
It's impossible.

58:50.540 --> 58:54.540
Before you could just remount the socket and you could have,

58:54.540 --> 58:57.540
you could have a Docker running inside a Docker container,

58:57.540 --> 58:59.540
use the same host container image.

58:59.540 --> 59:03.540
Now, some people would call that an absolute Frankenstein's

59:03.540 --> 59:06.540
monster of problems.

59:06.540 --> 59:11.540
But yeah, the idea is it's just bad,

59:11.540 --> 59:14.540
but it doesn't matter because it was very practical.

59:14.540 --> 59:15.540
I use that all the time.

59:15.540 --> 59:18.540
I use that all the time because I didn't have any Linux on my system

59:18.540 --> 59:22.540
before I switched back over to VMs because, you know,

59:22.540 --> 59:24.540
and by the way, the VM is the clear way to do that, right?

59:24.540 --> 59:27.540
If you install a Linux VM, then that's not a problem.

59:27.540 --> 59:29.540
All your stuff lives in the VM.

59:29.540 --> 59:31.540
You know, you're good to go.

59:31.540 --> 59:33.540
Assuming you can get a virtual machine on your machine.

59:33.540 --> 59:38.540
So I think there's going to be a strong resurgence of VMs in the world.

59:38.540 --> 59:42.540
But yeah, but the Docker and Docker thing was always kind of a hack.

59:42.540 --> 59:46.540
And by the way, it was actually using pods.

59:46.540 --> 59:48.540
There's Kubernetes pods and stuff that would use the Docker

59:48.540 --> 59:51.540
and Docker thing, which is just like such a security violation.

59:51.540 --> 59:53.540
It's outrageous.

59:53.540 --> 59:56.540
So that's why people are owning it.

59:56.540 --> 59:58.540
But I did think it was useful for pipelines.

59:58.540 --> 59:59.540
That's why I used it.

59:59.540 --> 01:00:00.540
I did.

01:00:00.540 --> 01:00:01.540
I used it for that for a long time.

01:00:01.540 --> 01:00:05.540
And there is no alternative in the Podman landscape.

01:00:05.540 --> 01:00:07.540
The Creo landscape, Podman landscape is not there

01:00:07.540 --> 01:00:09.540
because it's insecure to them.

01:00:09.540 --> 01:00:12.540
So not enough for VMs.

01:00:12.540 --> 01:00:13.540
Yeah.

01:00:13.540 --> 01:00:14.540
And if you don't have enough for VMs,

01:00:14.540 --> 01:00:16.540
then you got to do the Docker and Docker thing.

01:00:16.540 --> 01:00:20.540
And so that was, again, it was a very practical thing,

01:00:20.540 --> 01:00:22.540
but it probably wasn't a good thing.

01:00:22.540 --> 01:00:24.540
For developers, it was nice.

01:00:24.540 --> 01:00:30.540
But for all the other reasons, probably not with a VM.

01:00:30.540 --> 01:00:32.540
Yeah.

01:00:32.540 --> 01:00:36.540
Not everybody has the option of running non-windows on their desktops.

01:00:36.540 --> 01:00:39.540
I just read another blog from a guy who was super annoyed

01:00:39.540 --> 01:00:43.540
that he had to run windows on his desktop at work.

01:00:43.540 --> 01:00:45.540
And it was all the ways he got around it.

01:00:45.540 --> 01:00:49.540
But yeah.

01:00:50.540 --> 01:00:52.540
Hmm.

01:00:52.540 --> 01:00:53.540
And ruin the nodes quite often.

01:00:53.540 --> 01:00:57.540
You've seen DIND pipelines in the wild.

01:00:57.540 --> 01:00:58.540
Devs have probably used Docker.

01:00:58.540 --> 01:00:59.540
I'm not messing up.

01:00:59.540 --> 01:01:01.540
Oh my God.

01:01:01.540 --> 01:01:05.540
DIND was always used in CI as tools to simplify stuff.

01:01:05.540 --> 01:01:07.540
So it's not that bad keeping things simple.

01:01:07.540 --> 01:01:08.540
I think that's right.

01:01:08.540 --> 01:01:10.540
And that's one of the reasons I think that DIND,

01:01:10.540 --> 01:01:12.540
it's a huge debate.

01:01:12.540 --> 01:01:14.540
It's very good wine.

01:01:14.540 --> 01:01:16.540
It's also the end of the wine.

01:01:16.540 --> 01:01:18.540
We don't have any more.

01:01:19.540 --> 01:01:20.540
Hmm.

01:01:20.540 --> 01:01:21.540
But it's the weekend.

01:01:21.540 --> 01:01:23.540
And I hope everybody, you know, I'm going to,

01:01:23.540 --> 01:01:26.540
I'll say cheers to everybody as I go get more wine.

01:01:26.540 --> 01:01:28.540
I'm going to go ahead and end the YouTube videos here.

01:01:28.540 --> 01:01:30.540
So I'm trying to keep the YouTube videos shorter.

01:01:30.540 --> 01:01:33.540
I apologize for how long winded I am.

01:01:33.540 --> 01:01:38.540
And I do hope that this doesn't scare you away from all this technology.

01:01:38.540 --> 01:01:40.540
I do find it extremely exciting.

01:01:40.540 --> 01:01:44.540
I think the movement in the industry is in the right direction, actually.

01:01:44.540 --> 01:01:48.540
All of this movement might make CI CD more annoying

01:01:48.540 --> 01:01:50.540
and developer processes more annoying,

01:01:50.540 --> 01:01:54.540
but it's going to make for a more secure container orchestration

01:01:54.540 --> 01:01:57.540
as we adopt these practices.

01:01:57.540 --> 01:01:59.540
And it's going to, actually, it's going to ferret out

01:01:59.540 --> 01:02:01.540
a bunch of bad practices.

01:02:01.540 --> 01:02:04.540
So for example, putting Creo as your container engine on your nodes,

01:02:04.540 --> 01:02:05.540
including your control plane,

01:02:05.540 --> 01:02:08.540
is automatically going to shut down any user who's using

01:02:08.540 --> 01:02:12.540
that control plane head node for Docker.

01:02:12.540 --> 01:02:13.540
And their process is going to break.

01:02:13.540 --> 01:02:17.540
And they probably should break because they shouldn't be mixing the two

01:02:17.540 --> 01:02:18.540
as we talked about.

01:02:18.540 --> 01:02:22.540
So hopefully this will be something that you can consider as you go forward.

01:02:22.540 --> 01:02:25.540
I don't know if I'm going to do another actual video tonight.

01:02:25.540 --> 01:02:28.540
I'm probably just going to be shooting the breeze on Twitch.

01:02:28.540 --> 01:02:32.540
And as a general rule, though, going forward,

01:02:32.540 --> 01:02:34.540
I'm going to try to start each one of my streams

01:02:34.540 --> 01:02:38.540
with a YouTube video quality content that's very organized

01:02:38.540 --> 01:02:40.540
and about a specific thing.

01:02:40.540 --> 01:02:43.540
And then we'll stop the video.

01:02:43.540 --> 01:02:49.540
And then we'll just do silly stuff for the rest of the night on Twitch.

01:02:49.540 --> 01:02:53.540
So we can start on a good note and get some value out of it.

01:02:53.540 --> 01:02:57.540
And then we can do the crazy stuff that I tend to do.

01:02:57.540 --> 01:02:59.540
All right, so if you want to come and join us for the crazy stuff,

01:02:59.540 --> 01:03:01.540
come on over to Twitch.

01:03:01.540 --> 01:03:05.540
Otherwise, thank you for stopping by whether you're on Twitch or YouTube.

