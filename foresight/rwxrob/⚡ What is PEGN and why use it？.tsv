start	end	text
0	3600	So, what is Pagan and why use it?
3600	7960	So Pagan, I've talked about this a lot, but I'm going to go through and review it again.
7960	14120	So Pagan is a language that I wrote, you can go to pagan.dev, I think I still have that
14120	15120	up there.
15120	19880	I've been using it a lot because I'm using Pagan to write KML.
19880	23760	Sometimes you need a language to write a language, it's called a meta language, and that's what
23760	25160	Pagan is, you can go here and read about it.
25160	29140	So Pagan is a language for defining languages, more precisely as universal notation for expressing
29140	33620	any grammar, including natural language, which I'm very proud of, in a way that is easy
33620	37100	to parse cognitively and programmatically without any specific application or implementation
37100	38420	in mind.
38420	44820	And this is the problem with Pagan, which is from Brian Ford, which I'll get to.
44820	50300	Pagan builds on the best of the existing meta data structures such as Pagan, ABNF, EBNF,
50300	51300	and JSON.
51300	54460	If you've ever read the GoLang specification, it's all an EBNF, it's very common for people
54460	58980	to write language specifications, an EBNF, it's more common to see ABNF for things like
59820	64100	Internet IRFCs and IRFCs, things like that.
64100	68700	But ABNF, you can't even use characters in it, you have to use hexadecimal notation for
68700	70740	everything, just because it's so precise.
70740	73700	It's like, how do I define the HTTP protocol?
73700	75100	Go read ABNF for that.
75100	80420	Now, ABNF allows ranges and stuff like that, Pagan does not do that, Pagan is a very, very
80420	88380	friendly kind of flying in the face of traditional parsing mentality, primarily by saying we
88380	93660	have infinite memory in our assumption, our base assumption, rather than saying we only
93660	97020	have one byte of memory, which is what all the other parsers do.
97020	101700	I am absolutely obsessed with parsing, I think it's so fun.
101700	105780	If I was going to have done a computer science thing, I would have really, really obsessed
105780	106780	about parsing.
106780	111260	And I've already written in Pagan parser some time ago, a couple years back, and we've
111260	116140	had lots of people use Pagan, Quint comes to mind, Quint, if you're out there, thank
116140	117140	you for your contributions.
117260	122620	Quint has actually got his Pagan parser that we kind of collaborated on running in production
122620	128500	for a rather large company that I won't say.
128500	132020	But it is a way of specifying languages, and so what does that actually mean?
132020	135540	So the motivation here, let me just keep reading here, and then I'll close this up.
135540	139660	So the motivation, technology increases complexity, the need for a better human-computer interaction
139660	144140	becomes more pronounced, creating language grammars quickly and simply has become a critical
144140	145140	need.
145140	149100	And there's something that I have found out recently has got the name Fluid APIs, and
149100	150860	that's why I made Bonsai.
150860	155500	So Bonsai defines a natural language API that could be spoken on the command line as opposed
155500	160340	to demanding dashes and get off and all that other crap, which is another project I made
160340	161340	related to this.
161340	165940	But Pagan is somewhat related to the same need, because we need a way to define domain-specific
165940	167540	languages very quickly.
167540	171500	The way that I learned about Pagan, quite frankly, yet again, TJ Hollowaycheck, I was
171500	177340	following him and he wrote his own domain-specific language for parsing and querying logs for
177340	182580	his APEX, one of his projects on his APEX company, and he used Pagan for that.
182580	188580	And so I found Pagan, I actually helped contribute to one of the GoPeg parsers that's out there,
188580	191580	and then I realized that it didn't have enough, and I needed to add a little bit more, and
191580	193620	so I made Pagan.
193620	196980	So Pagan has decided to keep things by allowing any data to be represented as a grammar and
196980	200900	breaking it down into universal data form, it can be composed, combined, and analyzed
200900	201900	in a remarkable way.
201900	208900	So my eventual dream is to allow Pagan notation to replace regular expressions.
208900	214380	Regular expressions are nice and all, but when it comes to structured data and the ASTs
214380	216380	that are produced by it, it was really, really problematic.
216380	219140	Whether it be simple counting all the words in a document, creating a simple query language
219140	224060	to make searching logs easier, coding a human-friendly interface to an otherwise complicated web
224060	230020	API, simplifying the parsing of a form of common markup, implementing a fully-programmed
230020	233900	language that leverages LVM to quickly create high-performance compilers, or developing a
233900	237340	binary language for moisture evaporators, ah, Star Wars joke.
237340	240580	Pagan addresses these issues by prioritizing the creation of other language grammars without
240580	244780	weighing them down with any specific bias, and I keep hitting that point because that's
244780	248780	why all of the Pagan parsers that are out there right now, Guido van Rosen, Pagan of
248780	253140	the Python creator, obsessed with Pagan, there's lots of videos from him trying to re-implement
253140	254740	the entire grammar of Python and Pagan.
254740	259420	I don't know if he ever made it through that or not, but lots and lots of implementations
259420	264460	of Pagan that forced you to use that specific language, and so Pagan, the N in Pagan stands
264460	267020	for notation, which means we don't care.
267020	273380	It means we are not associated with any specific language, and therefore it's universal.
273380	276940	It's now, and see, Python, is it okay?
276940	278380	Weighing it down is specific bias commitment.
278380	283580	In fact, Pagan is so flexible it can also be used to define written language as a music
283580	284580	notation.
284580	289100	Pagan grammars are exploding, but inconsistent in 2004, Pagan grammars have exploded in popularity
289660	290780	and that's when I started this.
290780	292940	God, that was, I mean, that's not true.
292940	295540	I started, that's when they came become popular.
295540	298500	I didn't get into it and probably tell, I want to say 2020.
298500	301180	I was already streaming, so it'd be like 2021, 20.
301180	306100	Anyway, Brian Ford's example, Pagan grammar is all but ignored.
306100	307940	It's also incorrect.
307940	311580	While we were going through the parsing of his example, we realized it violates his own
311580	313380	syntax.
313380	315380	I still haven't ever told Brian that.
315380	320740	His example is invalid, Peg, according to his own specification.
320740	324620	I don't think he actually ever tested it with a parser or anything.
324620	329500	We actually found that out very surprisingly, quit when we were going through making our
329500	332260	own parser, and we use this example.
332260	335060	So Brian Ford's example, Pagan grammar is all but ignored as people continue to build
335060	337500	on their own syntax as a very little resemblance to the original.
337500	340420	I think that's probably why it doesn't work, because he just threw it in there because
340420	343380	everyone else has got their own idea of what it should be.
343380	345140	There are more implementation code than Peg.
345140	349020	This is demonstrated by many projects that contain both a grammar file for becoming acquainted
349020	352780	with the syntax and another virtually identical file containing additional implementation
352780	355700	specific to the code, a specific implementation language.
355700	357500	So this is how it goes, right?
357500	365180	You run your code through this and through the parser, right?
365180	369540	And then the parser will actually, if you do a Peg parser, right, it'll actually generate
369540	370540	code for you.
370540	374420	It'll generate parser code in your target language, and, you know, like Lex and Yak
374420	377380	and all those other things, except for its much more modern approach.
377380	381740	And so there's lots of them out there, you can go look at them.
381740	385740	So anyway, this redundancy and specialization are not only less sustainable, but they're
385740	390180	also highly rigid and counterproductive, and you can't exchange them with anybody else.
390180	393900	Pagan is a language grammar specification that does not allow implementation code so
393900	397580	that the resulting grammar specifications stand on their own, allowing their creation
397580	401780	of any variety of lunches and co-generators in different language implementations.
401780	407340	Even different design variations in the same implementation language, AST, callbacks, etc.
407340	415100	I'm going to get there, but Pagan actually defines the AST format as well, which is not
415100	418300	included in any other thing.
418300	424260	So I mean, having the AST, which is, you know, the thing that you care about when you run
424260	429700	some code through a parser, you want the AST then so you can check for the syntax properly,
429700	433580	or you can, you know, create your compile in any number of ways, or you can transpile
433580	434580	or whatever.
434580	435580	You have to have an AST.
435580	441380	I mean, there are implementations that don't use an AST because it takes, it's a minimally,
441380	443300	you know, slower to do that.
443300	445860	That's the compile part of regular expressions, by the way.
445860	449980	When you say you have to compile a regular expression, you're pretty much building a binary
449980	453180	that's going to give you an internal AST really quickly.
453180	454780	And then, you know, it's kind of internal.
454780	457700	I don't even know if there's an AST for most regular expressions, actually.
457700	461900	But these days you want the AST because that's the thing that's going to give it to you.
461900	466500	So like if you do, if you do pandoc, let's say you take, pandoc actually has this built
466500	472500	in, you can do pandoc t, is it raw?
472500	474140	You can do JSON if you want.
474140	478780	So JSON, this is a representation of this document in an AST.
478780	480700	It's a very simple document, right?
480700	486420	And it's parsed using pandoc with the specification for markdown, pandoc markdown.
486420	489540	And this is the resulting JSON version of the AST.
489540	491180	Now, there's another one.
491180	494540	I don't know the name of it.
494540	495540	Is it dead?
495540	498380	I don't know what the name of it is.
498380	499380	I want to say raw.
499380	500380	Maybe it's data.
500380	504820	It might be AST, data.
504820	506420	I wish pandoc had completion.
506420	507420	It does not have completion.
507420	509140	There's another number of reasons I don't like it.
509140	510620	Oh wait, maybe it does have completion.
510620	512140	When did it add it?
512140	515300	Maybe it already said, I always had it, I just forgot.
515300	516300	Which is the one we want.
516300	523500	We want not GFM, we want not LaTeX native.
523500	524500	There we go.
524500	533620	So this is the internal Haskell AST that is used by pandoc.
533620	539460	So it tells you the thing, so you have a header, and then you have a string, and then
539460	543060	another string, space, space, string, space, string, space, space.
543060	546140	So this is Haskell is the perfect language for writing ASTs.
546140	551660	I want you to notice something here that all of the nodes that are parsed in the AST
551660	552820	have three elements to them.
552820	556620	They have the type.
556620	562660	I think they have an array of how many there are, and then they have the actual content.
562660	563660	I can't remember.
563660	565460	Oh no, no, that's a variation on a header.
565460	567240	It must be an attribute of it, whatever.
567240	571500	So that's the AST, and you need an AST if you're going to do anything.
571500	574180	It's a Haskell data representation, yeah.
574180	580500	This is a Haskell data representation of, and I don't know, they have nodes with attributes
580500	581740	which I hate.
581740	587140	So Pagan does not allow attributes for a reason.
587140	589940	You can never decide whether you want your node to have attributes or not, or you want
589940	592860	it to just have the attributes to just be subnodes.
592860	594460	And so Pagan doesn't allow that.
594460	602500	It's a pretty deep comment, and if you don't know about parsers and stuff, but it's really
602500	603500	a...
603500	604500	ASTs are all over the place, by the way.
604500	607660	If you go look at the web page, this is an AST.
607660	608660	This is an A...
608660	611460	Any time you look at this, this is an AST.
611460	617400	The reason node is called node is because the document object model is a specification
617400	618940	of how to parse the thing.
618940	622060	That was at one point defined through something else.
622060	624700	It can get tricky without properties and attributes.
624700	629540	I haven't had any problem with it so far because you can just define...
629540	632100	You don't want to have one type have a different attribute to it.
632100	639500	I mean, like H1, H2, H3, you can actually have a parent, and then you can have the child
639500	640500	be the attribute.
640500	645620	It does get a little bit harder to traverse it, but it can be done.
645620	653580	So anyway, Pagan doesn't allow for properties like that, and neither does Peg, actually.
653580	659180	Strictly speaking, though, I mean, you could use Peg or Pagan, and then just...
659180	661340	I mean, the AST is...
661340	666300	You could use your own AST instead of the one that I have in here, if you wanted.
666300	668060	But original Peg lacks specificity.
668060	670900	For yours, ABNF and ABNF provided a cruising level of specificity.
670900	673900	Yeah, I don't trust this channel.
673900	676140	You have to switch, yes.
676140	678140	But it's very stateful.
678140	681540	So it's like one state at a time, and that's what I like about it.
681540	684500	It's not some variation on the state.
684500	689420	You see all different variations in node trees when people are doing this kind of thing.
689420	693860	There's people that will make all the nodes the same, and then they'll have attributes
693860	697180	on each of the nodes, and that's the only distinction between all the nodes.
697180	699460	And there's a million ways to model this.
699460	701500	And my favorite is to just...
701500	707540	You either have a node that's apparent that has children, or you have a node that is a
707540	712580	leaf and that is an attribute or whatever in this case.
712580	716500	So anyway, ABNF and ABNF provided a cruising level of specificity in their grammars, but
716500	721140	lack of obvious advantages of order priority and a simplicity of the original ASCII Peg
721140	722140	grammar.
722140	726780	For example, Pagan adds count and min max to provide limits and adds unicode tokens.
726780	729140	So there's no unicode tokens in ABNF at all.
729140	731860	You have to do everything based on that.
731860	740300	In fact, they created an extension to ABNF to allow for...
740300	744700	There's one of the data things from ABNF had to be expanded.
744700	748100	I actually wrote a VIM syntax header for ABNF if anybody's wondering too.
748100	752540	If you ever just want to open an ABNF VIM file and have it actually make sense, then
752540	756500	I updated it to include some of the new stuff from the latest extension to ABNF.
756500	760840	I was obsessed with ABNF for a long time because I was just looking for a way to specify
760840	764140	grammars and those are the only ways until I made Pagan.
764140	767940	So the hope is that Pagan's language itself can be more explicit, better performing and
767940	771860	readable replacement for grammar, meta languages, and inline regular expressions.
771860	774700	Code generators producing parses of different types and different implementation languages
774700	778020	can be created from the same grammar specification expressed in Pagan.
778020	782340	In other words, you can take a Pagan thing and you can run it through a code generator
782340	784620	and generate Ruby code.
784620	785820	You could generate Rust code.
785820	786980	You could generate Perl code.
786980	788420	You could generate C code.
788420	792420	It doesn't matter because there's nothing specific, language specific in Pagan and that's the
792420	797220	biggest selling point of all of the whole thing.
797220	800580	Pagan parses and center libraries can even provide highly optimized handling of Pagan
800580	804980	grammars, including directly in code as strings and constants, much like compiled regular
804980	808380	expressions are handled today, but with much greater clarity and efficiency.
808380	815540	So for example, when you use a regular expression, you have the parenthesized list, but it's a
815540	817060	linked list.
817060	819060	It's not a structure.
819060	822980	It does kind of make one, but you just get an array out of it.
822980	827100	You have to know the number and you have to figure out where your parentheses are inside
827100	831580	of this other thing to see whether it's number one or two because you have to unpack the
831580	838980	parentheses in your brain in order to understand what integer it becomes in terms of index.
838980	842620	And with Pagan, you don't have to do that because you get an AST out of it.
842620	844900	You get a standardized AST out of it every time.
844900	847220	You always get the same one and that is a structure.
847220	851780	It's a full structure that you can walk however you want and do it.
851780	854780	So that, in my opinion, might be slightly slower than regular expressions, but it gives
854780	859100	you more power when you're dealing with grammars and specifying them.
859460	864020	A progressive best example is what is itself, which is specified in Pagan.
864020	866620	Here's another example, the JSON specification in Pagan.
866620	873660	So Pagan is itself specified in Pagan and this is an old one.
873660	877820	Yeah, this is, that link is broken.
877820	880420	I got to fix that, obviously.
880420	882020	I haven't picked up Pagan for a long time.
882020	884540	I've used it for lots of things, but this site needs to be fixed.
884540	889060	So here's the JSON RFC according to RCA 259.
889060	892500	This is the implementation of JSON in Pagan.
892500	896860	And you have the overall grammar, grammar is a conventional name for the top level node.
896860	902180	And then you have the white space and then a value or whatever and then more white space.
902180	905420	And I use the actual terminology from the thing.
905420	908980	There are syntax conventions for the name.
908980	915020	So if they're initial caps, those are kind of easily to identify.
915020	918740	The other couple of things when you have two, I don't want to teach you all Pagan right
918740	922780	now, take forever, but two dashes, this is pretty significant.
922780	932860	The two dashes signifies a substantial node or a semantic, what I call a semantic node.
932860	935100	That means capture it.
935100	942300	If we don't have that, it's just a simplification of code so that, you know, the spec of the
942300	944540	Pagan spec code can become simpler.
944540	948820	So anytime you see value, value is all of these things, right?
948820	952780	But this says don't make value a node.
952780	957420	It just says this is how we refer to value so I can put value down here later.
957420	959620	And then, but any of these things would be a node.
959620	962580	If there's a node, it would be implemented at that point, it would be captured.
962580	970180	So an object is a significant node and it would, you know, it's just, I mean, it's basically
970180	971180	the same as peg.
971180	976020	You get a bracket and then zero or more white spaces and then a member and then you go down
976020	977020	and what's a member?
977020	984140	A member is a string plus a colon plus a value and then you get, you know, zero or more
984140	987980	of this, you know, sort of thing combined together.
987980	990620	In that sense, if you know regular expressions, you can see this.
990620	995100	One of the things that's nice about this is it is a lot easier to read than regular expressions.
995100	1003100	We do have an entire standard subset of predefined tokens like DQ and everything, which APNF
1003100	1007100	has also done so you can just use those if you already know them.
1007100	1011580	In fact, anything that's lowercase is considered a class and some of the classes can be used
1011580	1017740	without specifying them because they're assumed there to be coming from the, the peg and specification
1017740	1018740	itself.
1018740	1020940	So they're predefined such as WS.
1020940	1032980	And that includes every positive span range and things like that, digit and stuff.
1032980	1035580	And so, yeah, so digit is another class.
1035580	1042540	Actually, I think digit is a token, you know, there's differences between classes and tokens.
1042540	1049460	Class is like one of these set and the other one, a specific token is like this exact
1049460	1054060	single character or, you know, three characters or something like that.
1054060	1058500	And so, the other thing that's cool about peg and peg is that they're left to right
1058500	1062860	versus ABNF and EBNF, which are like, when you specify something with a slash and EBNF
1062860	1066980	and EBNF, it can be any of those things at any order.
1066980	1073940	And the really, really, really great simplification of peg is it's guaranteed to match first left
1073940	1075100	wins.
1075100	1076580	So you put the stuff to the left.
1076580	1085020	So for example, in my specification for, for Kegumel, you know, wait, let me go see
1085020	1086020	you.
1086020	1087020	Where is my spec?
1087020	1088020	Is it over here?
1088020	1089020	Okay.
1089020	1093100	So in my specification for Kegumel, let's, let's do the, let's do the, the, you see here
1093100	1097180	I have bulleted and then numbered and then figure, right?
1097180	1104500	Well, if I was going to do those bulleted, right, a bulleted list begins, I'm not bulleted,
1104500	1107060	let's, let's do, let's do spans, spans are better.
1107060	1108380	So let's do strong emphasis.
1108380	1113900	The reason strong emphasis first, even though you might not want to list it that way is
1113900	1121940	because strong emphasis for me is three stars plus, you know, something and that this is
1121940	1124020	the part that's kind of interesting.
1124020	1132500	So right here, we're going to put a plane and so then we can put a plane.
1132500	1138740	So it's a, you know, it's a plane span and followed by another token, right?
1138740	1144620	And so, so there, the reason that's the strongest are that the reason that that one comes first,
1144620	1155220	of course, is because the strong one has two and the emphasis one, which is italic is just
1155220	1156220	one.
1156220	1160500	Now, what if I put, so if I was trying to specify this in EB enough, you see how problematic
1160500	1161700	this would be?
1161700	1166740	By just placing the order to check for each one, I can have tokens that would otherwise
1166740	1168180	be included in the other tokens.
1168180	1171700	This is where you get all the craziness with XML and everything because they don't have
1171700	1175740	the idea of, well, first look for this, and I can't tell you how valuable this is when
1175740	1178980	it comes to code generation or just writing the code by hand, because just by looking
1178980	1185500	at the peg and I know right away what comes first, I know that I need to write, I need
1185500	1192460	to check for a strong emphasis token before I check for an emphasis token so that I can
1192460	1199180	fail out or, you know, go to or hand off to the next, to the next parser, the next token
1199180	1205300	parser, because I have the order and I know, I keep talking about this, but that is such
1205300	1210900	a huge thing when it comes to writing parsers, because otherwise you just don't know.
1210900	1217540	And it's really nice because it keeps the syntax of Kegamel or Bonzai.
1217540	1218540	Very simple.
1218540	1222540	I'm a huge fan of just one way to do things in a markdown language like this.
1222540	1226500	And so I just use stars all the time, and even though you can use underscores in any
1226500	1230300	number of combinations, infinite number of combinations, which to represent in a grammar
1230300	1235100	would be crazy hard, not to mention putting an unnecessary amount of overload on a parser.
1235100	1237860	And if you're going to make a specification for something that's going to potentially
1237860	1239900	be capturing all the knowledge of the world.
1239900	1242500	We want to be optimized in our parsing.
1242500	1247440	And so this is one of those cases where we just want one best way to do it.
1247440	1249420	Other grammars would nest them.
1249420	1253020	Lots of grammars would nest these, and you can represent these as nested, but I do not
1253020	1255260	ever want to do that.
1255260	1256540	And neither does medium.
1256540	1259380	Medium does not allow you to nest your grammar, to nest your emphasis.
1259380	1263680	You cannot have italics in something that's already been bolded.
1263680	1267260	And if you've ever played around with any kind of syntax highlighters or Vim plugins
1267260	1273860	or anything like that, you have experienced a broken emphasis highlighter, something that
1273860	1280780	gets it wrong because it wasn't well specified, or it thinks it's got a span when it really
1280780	1283180	doesn't because it's on a different line.
1283180	1287860	Or I'm guarantee you, if you spend any amount of time doing any kind of syntax highlighting
1287860	1290860	stuff, you will find something that's really broken.
1290860	1294540	And it's really too bad because of that.
1294540	1297340	So for my particular grammar, and this is one of the reasons I made Pagan, I wanted
1297340	1303220	to be able to very precisely specify, I wanted to be very precise in my specification of
1303220	1306940	the grammar, and to keep it deliberately simple.
1306940	1311100	And people might accuse me of keeping it too simple, and they're like, why is it simple?
1311100	1312500	I was like, because I don't need more.
1312500	1314740	But it's not as simple as Godoc, for example.
1314740	1316980	Godoc doesn't have anything.
1316980	1318380	Godoc is even worse.
1318380	1319820	It's just text.
1319820	1323540	And you can indent something by four spaces to get it to be the same.
1323540	1326180	And headers are lines by themselves.
1326180	1327540	So there is a grammar there.
1327540	1328540	It's just not specified.
1328540	1331780	You have to go read the Go source code to understand what the grammar is.
1331780	1332780	This is why I made Pagan.
1332780	1336740	At least when somebody comes to me and says, OK, I said, well, what's Kegelman, I don't
1336740	1337740	want to have to learn another thing.
1337740	1338740	I said, you probably already know it.
1338740	1339940	I was like, how do you know it?
1339940	1340940	Well, do you know Markdown?
1340940	1341940	Yeah.
1341940	1347860	So it's a simplified version of Pandoc Markdown, which means it's got semantic div brakes and
1347860	1353500	it's got math support, which GitHub now has.
1354460	1355460	That's what Pagan is.
1355460	1357300	Pagan is a way to specify a language.
1357300	1359100	You can go read more about it if you want to get into the details.
1359100	1361300	I feel like I've gone too far in the details already.
1361300	1365940	I do think it's important that I mentioned that the grammar, the Pagan itself does specify
1365940	1368420	the AST to be used.
1368420	1374820	I am seriously considering a revamp of this AST at some point.
1374820	1383180	So the format for the AST, the text version of the AST is also written in Pagan.
1383260	1387460	You can go read that if you want, or you can actually look at the long form.
1387460	1390140	I'm trying to find an example.
1390140	1397260	So here is a long form example of the JSON AST.
1397260	1409700	So this is the AST of the JSON file itself, but in compact form, it's actually extremely
1409700	1410700	compact.
1410740	1422060	It's the smallest text-based JSON compatible, human readable AST that you can get, and it
1422060	1423460	can be easily expanded.
1423460	1426700	So that was by design.
1426700	1430980	When I looked at the native Haskell, this was all inspired by Pandoc.
1430980	1433380	Pandoc's JSON AST is abysmally bad.
1433380	1435340	I mean, let me just show you.
1435340	1437300	I talked about this earlier, but I'm going to talk about it again.
1437300	1439620	I just love salmon on this particular thing.
1439660	1445060	So when you do Pandoc, I mean, they didn't have as much information as they do now.
1445060	1447180	It's too bad because they can't go back and redo it.
1447180	1452140	But I don't know if you can see this, but so they have strings here, right?
1452140	1457140	They have spaces, like a space, meaning white space, and then Kegamel.
1457140	1460700	And they have, first of all, they have way too many, too much, like two verbose rich
1460700	1461700	thing.
1461700	1467500	But what I really, really don't like is when they have strings, I'm trying to find one.
1467500	1468500	There's no one there.
1468500	1469500	Okay.
1469500	1478100	So here, this right here, string C documentation slash docs.
1478100	1479100	What is that?
1479100	1480100	Oh, this is a link.
1480100	1481100	Okay.
1481100	1486420	So we have a link and the properties of the link are, and it's got all the properties
1486420	1489820	in order, so they're not named.
1489820	1495580	And what I'm trying to show you is that they, when they have strings, the strings include
1495580	1496980	quotes on them and stuff like that.
1496980	1499900	So let me see if I can find another version.
1499900	1510740	So if I have, I don't know, let me see if I can find one, pandoc-tjson, read me.
1510740	1513980	Did I just go to look at the same one again?
1513980	1514980	I did.
1514980	1517500	And it's in the spec, ml spec.
1517500	1518580	All right.
1518580	1522460	So let's go, let's look at this, read me.
1522460	1523460	Okay.
1523460	1524460	So look at this one.
1524940	1529340	So you know, you have the links here, you have the types, you have a soft break and it,
1529340	1531060	it deliberately uses long words.
1531060	1532980	There's no way to make it shorter.
1532980	1539580	So the, the textual ASTs that are generated from pandoc are so fucking long that, and
1539580	1545020	the standard instruction from pandoc, if you want to write your own conversions is to convert
1545020	1551220	to the JSON AST and, and then walk the, the JSON AST and parse that and produce your other
1551220	1552220	thing.
1552220	1554420	And I guarantee you, you, you should see how long it takes to do that.
1554900	1561740	Because this thing is a monstrously big waste and it also gets tons of stuff wrong.
1561740	1568900	So for example, it, it deliberately lumps together, uh, quoted content as a string.
1568900	1572860	So for example, or a parenthesized word as a string, it doesn't consider the idea of
1572860	1575740	fields and then words and then things like that.
1575740	1577740	It's, it's so, it's just a mess.
1577740	1581780	And that's, I, I, look, I really, really appreciate that we have pandoc.
1581780	1583700	I don't want it to be misunderstood.
1583700	1586460	I think it's so great that we have it, uh, JQ.
1586460	1590620	I could pipe it through JQ, but yeah, uh, Jeff needs some love.
1590660	1591500	Yeah, it does.
1591500	1596140	So, and they could actually make a different representation.
1596140	1600660	You could probably do a Haskell, uh, you know, PR and, and do that.
1600660	1603460	But the, the, the, yeah, they probably prefer Haskell reformos.
1603620	1604060	I agree.
1604340	1608180	But the, the, the point is, is that, I mean, if you're going to tell somebody that
1608180	1613580	you're a standard way of supporting other conversion method out methods is to,
1613620	1614820	and by the way, you can make your own.
1614820	1617380	You can write your own Lua plugins that will render the whole entire thing.
1617660	1618940	It's beautiful Haskell.
1618940	1622020	If you get into the functional program, if you, if you want a really good example
1622020	1627500	of when functional programming really shines, uh, you know, pandoc is a good example
1627500	1632100	of that because it was Haskell is like Taylor made for parsing syntaxes and
1632100	1632740	grammars and stuff.
1632740	1633940	It's just so perfect for it.
1634300	1638860	And, and, you know, I imagine, uh, you know, Lisper or Lang or something,
1638980	1640260	uh, would be just as good.
1640620	1643140	Uh, but, but that's, you know, that's my experience with Haskell too.
1643540	1649660	Um, and, you know, it's super fast, but, but, I mean, it, it does lack a lot in the,
1649700	1656340	in the, you know, the, the, to me, the AST is really core because if you want to have
1656380	1662820	a, the ability to make a conversion from one thing into anything else, uh, it's so
1662820	1664140	important that you get that AST, right?
1664140	1667260	Because then everybody else can render it however they want to.
1667260	1670140	Well, you've just created a data model for the thing that you're
1670140	1672100	representing, whatever it is, a document or whatever.
1672380	1674180	And, and, and that's really core of the whole thing.
1674180	1676820	And the people who made pandoc, of course, are not web people.
1676820	1680620	They are, you know, publishers and Haskell people and academics and they're
1680620	1685220	over at Berkeley and, you know, JGM's an amazing spearheaded common mark and a
1685220	1686220	bunch of other amazing things.
1686220	1688300	And I, I've had some interactions with JGM.
1688300	1692780	JGM is completely 100% unimpressed with anything I've ever done, which is fine
1693260	1697620	because, but I'm doing things that I need, uh, and yeah, including Peg.
1697620	1702020	And I, I ran Peg and by him and he was like, why am I, well, you know, why Peg?
1702020	1703820	And he doesn't, he's not interested.
1703820	1704980	He just, he got his answer.
1704980	1708980	He's a philosophy major and he's a great guy, but, uh, a philosophy professor.
1709300	1715340	So, um, anyway, here's the parent nodes, uh, given the following data example, you
1715340	1720500	get this copyright and, and, um, yeah, here you get another AST.
1720500	1722420	No, no AST node attributes.
1722660	1724660	Summary node 2 data structure models, a lot for attributes.
1724660	1728620	Peg and Stacy does not, since attributes can more, uh, efficiently and precisely
1728620	1733340	indicated by adding an additional parameter parent or terminal type, which is
1733340	1734500	another word for leaf node.
1734980	1737100	Uh, Peg was conceived originally developed by me.
1737580	1740820	Uh, I'm working with tokenizers and text generation.
1740820	1741300	Oh, nice.
1741860	1744660	Uh, while creating grammars, uh, was needed for artifacts knowledge net.
1744660	1748700	That's keg, uh, easy mark, data mark, mate, man, I can update this.
1749020	1753140	These are all of the different, uh, base QL, all of the ones that I've been doing.
1753660	1755740	Uh, live coding streams.
1757100	1759700	Others to update and contribute it and help this is, that's, I got to update them.
1760220	1762060	Uh, related tools to Vimplug and Emacs.
1762180	1763500	I don't have them in plugin done yet.
1763540	1765740	I need to other efforts out there.
1765740	1766660	You can go look at peg leg.
1766660	1768780	That's the one I helped contribute to go peg.
1768780	1770660	It's the one I contributed to actually space on peg.
1770660	1774860	Look, uh, the Python ones, the Guido one that, that they added 3.9 and Python, I
1774860	1778380	think, uh, Pigeon Pigeon pest.rs, which I was so excited about.
1778380	1782380	Turned out it's crap and antler antler has been his Java is all about Java.
1782380	1786860	But it's, it's exactly in the same sort of space, uh, for defining grammars and
1786860	1787940	stuff, but it's Java only.
1788500	1792300	Um, from a peg a grammar specifications, blah, blah, blah, go read that.
1792900	1797500	Uh, linking documentation with definitions, uh, legal considerations, what
1797500	1799820	adoption is blah, mime type.
1799900	1803220	I'm, I'm hoping to get X dash Pagan from my type, but I haven't submitted that yet.
1803620	1810700	Trademarks, uh, blah, blah, licensing, it's Apache tube, uh, attribution,
1810700	1814740	patents, uh, contributing, IFC, or you can't see the race.
1814740	1817580	So I would like to get this eventually submitted, but I don't want, I want to
1817580	1821100	use it for like a year or two and have all the tools done for it before I do that.
1821420	1825820	Um, Pagan has, Pagan parsering has been used in production at at least one
1825820	1829780	company that I know of besides mine, uh, for over a year and a half at this point.
1830180	1834540	And so if you're wondering whether it's worthy of abuse and there has been, uh,
1834540	1838540	some tweaking to the specification in that time based on, uh, you know, the
1838540	1841260	very intense usage that's happening over in that other company.
1841740	1844620	Um, so, so it's out there.
1844620	1845700	You can go use it if you want.
1845700	1846500	You can play around with it.
1846740	1848700	If you ever want to write your own language, you probably can.
1848940	1851940	I, I may very well do, uh, write a book about Pagan.
1852380	1854900	Uh, I'm, I'm all about writing books these days.
1854900	1856860	Um, I got to finish the terminal velocity.
1856860	1858180	That's the book I'm working on right now.
1858660	1863660	And after that, uh, you know, these other books in spaces that are not covered by
1863660	1865380	anything, uh, will be all right.
1865380	1869380	I mean, write a book about bonsai, write a book about Pagan and, uh, some of these
1869380	1871140	other things so that people can take them and use them.
1871820	1873380	So that's all I have to say about that.
