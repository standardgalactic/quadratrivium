WEBVTT

00:00.000 --> 00:04.720
So, I just want to make a quick YouTube video about this because it seems to be coming up

00:04.720 --> 00:10.400
and it's a really important topic and I don't know how to make it into a question so I mean

00:10.400 --> 00:20.020
the question I originally was going to have was, what did I just do, you know like I don't

00:20.020 --> 00:24.780
know.

00:24.780 --> 00:34.780
What are contextual rooted command trees?

00:34.780 --> 00:36.660
And this is my new term.

00:36.660 --> 00:40.660
We thought, Milesi's not here, he's one of our community members who told me the idea

00:40.660 --> 00:47.100
that people were referring to this by saying fluid and fluid APIs or fluid command line

00:47.100 --> 00:50.900
APIs and I have not found any reference for that yet.

00:50.900 --> 00:53.980
So, Milesi if you're out there, let me know and put a comment in there, does anybody on

00:53.980 --> 00:57.780
YouTube who knows about this who's got an actual term for this?

00:57.780 --> 01:02.580
So I'm going to describe what it is and I'm going to use my best way of describing it

01:02.580 --> 01:07.500
which the community and I have recently just kind of come up with, you know I'm a little

01:07.500 --> 01:12.420
bit out of the idea but and I'm going to tell you what it is and then we're going to come

01:12.420 --> 01:19.580
up with a name for it because this is really becoming spectacularly popular and so we're

01:19.580 --> 01:23.620
seeing, so let me just summarize what's happening, let me tell you a little story, so you know

01:23.620 --> 01:27.220
if you go back to the Boomer days, you know a lot of good things came from the Boomers,

01:27.220 --> 01:31.700
the Internet, you know C, Unix, bunch of other stuff but one of the horrible things that

01:31.700 --> 01:43.300
came from the Boomer generation is stuff like this, GPG, this is the epitome of Boomer

01:43.300 --> 01:49.260
get-opt hell and I can sit here and hold my finger down and I can, you can see all of

01:49.260 --> 01:54.220
the potential options for like, you know good 60 seconds there and all of those things

01:54.220 --> 01:58.540
have dash dash and everything else right and it's absolutely horrible and in fact there

01:58.540 --> 02:07.620
is other programs that still use this, Cube CTL being one of them, so I mean they do have

02:07.620 --> 02:15.220
kind of a top level of contextual thing but beyond that right you're like, you know it

02:15.220 --> 02:22.260
does kind of give you contextual stuff a little bit right so but you still have like a ton

02:22.260 --> 02:29.900
of options to deal with and it becomes so unwieldy that you know you just, you can't do it, you

02:29.900 --> 02:34.580
have these top level commands and then but beyond that you're you're relegated to command

02:34.580 --> 02:43.140
hell with dashes okay so so so if you go back to the 70s when people had you know constraints

02:43.140 --> 02:49.460
on memory and everything this thing called get-opt was invented right and get-opt is

02:49.460 --> 02:55.140
the thing that from which all of the modern command lines that were not modern but you

02:55.140 --> 03:00.020
know semi-modern command lines have used it's the idea of having a switch with a dash or

03:00.020 --> 03:05.860
two dashes and there's varying and there's competing things and this entire hellish world

03:05.860 --> 03:10.620
that we live in that's that where everything has to have dashes in front of it is finally

03:10.620 --> 03:15.780
dying and I can I can I just tell you how happy I am that this is dying so you know I have

03:15.780 --> 03:19.740
a mantra don't get mad get busy and I was so annoyed by this entire thing and I built

03:19.740 --> 03:24.900
bonsai and this question isn't about bonsai I'll talk about that another day but if you

03:24.900 --> 03:35.020
go to mygithub.com slash rbxrob so bonsai is my my way of dealing with this and it basically

03:35.020 --> 03:42.140
makes very elegant contextual rooted command hierarchies or rooted command trees and so

03:42.140 --> 03:47.620
instead of having all of these dashes like my z command you just do z dot tab tab and

03:47.620 --> 03:58.060
you get a number of composite command trees I call them bonsai trees or bonsai branches

03:58.060 --> 04:02.100
and by the way you can import them very easily just by with one import command from go which

04:02.100 --> 04:07.180
is one of the reasons I love go and and then you can also create alternative pass through

04:07.180 --> 04:11.460
the rooted node graph which is the data structure we're using here and this bonsai bonsai is

04:11.460 --> 04:15.260
something that came about for me completely independent without knowing any of these other

04:15.260 --> 04:18.180
products that are doing the same thing so let me give you an example so if I go to you

04:18.180 --> 04:25.420
tab tab for unique I tap again and I get all these variations on on uniqueness right and

04:25.420 --> 04:31.900
you know I can type hex oops let's do iso sec iso sec you know like oh my god that's

04:31.900 --> 04:36.140
like too much to type well you can create a shortcut through that if you want to that's

04:36.140 --> 04:40.140
just you can create shortcut commands that that that zoom right down to the bottom level

04:40.140 --> 04:45.980
the contextual thing and then you deal with switches and stuff you know like whether you

04:45.980 --> 04:49.500
want your output in yaml and things like that all of those things you might actually be

04:49.500 --> 04:56.060
able to justify a switch for are now stateful and and so that means like if I have a command

04:56.060 --> 05:01.900
that that needs to say okay I prefer yaml as my output then we have like var and we have

05:01.900 --> 05:06.740
a thing called var and we have a thing called config and you can save those things in a stateful

05:06.740 --> 05:10.940
contextual way that sticks into your home directory and that's all built in and those

05:10.940 --> 05:14.500
are you don't have to put that into your monoliths but you can do so those are and by the way

05:14.500 --> 05:19.020
this approach that I do with bonsai is is elsewhere so let me let me give you an example

05:19.020 --> 05:24.940
so even Qubectl has a hint of this right so Qubectl tab tab you get all these options

05:24.940 --> 05:30.260
right but if you go Qube config right when Qubectl config like wow look at all these

05:30.260 --> 05:35.180
other commands right and so then we're going to do available commands wait what happened

05:36.180 --> 05:42.900
all right so get get context so Qubectl is kind of doing the same thing right but so

05:42.900 --> 05:46.940
but it still has dash dash current and all these are the things that you have to add

05:46.940 --> 05:50.180
right but I didn't want to bring this up I'm only I only have one context right now if

05:50.180 --> 05:57.980
you're if you're so this is an I this is an example of stateful contexts entering into

05:57.980 --> 06:02.700
the mainstream and it's not just here you're having more and more commands that that are

06:02.700 --> 06:08.820
expecting they're providing like a default context or state and I mean this this is

06:08.820 --> 06:13.740
revolutionary when it comes to like you know what we used to do the idea that your that

06:13.740 --> 06:19.220
a specific command like Qubectl or anything would have state that's stored in your home

06:19.220 --> 06:24.540
directory that you can then change rather than dealing with this switch every time I

06:24.540 --> 06:27.700
mean because the answer to this up to this moment has been right a bash script or something

06:27.700 --> 06:31.860
like that that's got all of the particular you know options that you want in there and

06:31.860 --> 06:37.500
or an alias or something right I mean let me give you an example so so so so LS right

06:37.500 --> 06:44.460
so LS my LS command is actually LS dash H color equals auto color equals auto if LS had

06:44.460 --> 06:51.140
been written to be a stateful you know command then these kind of things would automatically

06:51.140 --> 06:58.260
be stored in a in a sort of standard way within the home directory of the user rather than

06:58.260 --> 07:04.060
as an alias right with these crazy ass you know human readable thing like and if we actually

07:04.060 --> 07:08.740
did this kind of thing more frequently we would have the ability to transfer our preferences

07:08.740 --> 07:12.820
in a single file or directory dot under dog configure dot local or cash in like that so

07:12.820 --> 07:17.500
this is I'm think I'm thankful to say that this is where the universe is going thank

07:17.500 --> 07:23.500
God is that we are allowing state to be added to even things as granular as LS rather than

07:23.500 --> 07:28.460
create these aliases and stuff and we see that in Cube CTO when we do Cube CTO config

07:28.460 --> 07:31.740
you know we could change the context and all our commands are based on that namespace or

07:31.740 --> 07:35.900
based on that preference or but unfortunately we can't set our default output format that

07:35.900 --> 07:39.740
would be fantastic wouldn't it how many of you would like to change your output format

07:39.740 --> 07:46.100
for Cube CTO to default to wide probably a lot of you or to YAML or to JSON you probably

07:46.100 --> 07:49.700
want for this for the for the duration of the session to change that instead of having

07:49.700 --> 07:54.740
use that fucking switch on every single time you go back into your history and go edit

07:54.740 --> 08:00.980
it no amount of Z shell or fish you know assistance on the command line is going to overcome

08:00.980 --> 08:05.860
the bad design that forces you to put that switch on every fucking command line every

08:05.860 --> 08:10.020
time if that had been turned into a stateful configuration parameter I'm sorry I'm swear

08:10.020 --> 08:15.180
I normally don't do that on YouTube but this stuff gets me very angry yeah pain would have

08:15.180 --> 08:24.580
a config if if if we if we you know dare to give ourselves permission to give all commands

08:24.580 --> 08:33.620
state and context and rooted you know command trees the world would become a better place

08:33.620 --> 08:39.220
and I'm again I'm very grateful to report that this is already sneaking into our world

08:39.220 --> 08:44.660
let me show you a few examples so the first one I know of is get the first substantial

08:44.660 --> 08:55.340
program to violate the one one thing you know do one thing well idea was get and and ironically

08:55.340 --> 09:00.140
get still fulfills that get is just a front end there's actually a ton of commands in

09:00.140 --> 09:06.220
here so you can get add I mean it used to be multiple commands right so the old days

09:06.220 --> 09:12.940
of doing one thing well and and I mean that still applies that that that refactoring into

09:12.940 --> 09:20.020
one thing well but but in you know 2022 we've allowed ourselves to say look we have memory

09:20.020 --> 09:25.860
we have this space it's okay to put these one thing well things inside of monoliths that

09:25.860 --> 09:29.780
travel around and that's what bonsai is by the way and and then that way we know we have

09:29.780 --> 09:35.500
the portability of it all but we bring all of that functionality with us so and I mean

09:35.500 --> 09:40.700
busybox did this very thing and you guys ever seen busybox every single command from the

09:40.820 --> 09:45.580
from unix all of all the base units commands we've been this is not new right it's been

09:45.580 --> 09:50.180
used it's been it's been multicoll binaries before but busybox busy you know let me do

09:50.180 --> 09:54.340
a Docker thing so Docker you some people might not know this actually I have podman on here

09:54.340 --> 10:01.100
let me see if this doesn't work a podman dash it dash dash run I mean how how annoying is

10:01.100 --> 10:06.740
it that I have to type all that right isn't it I mean I am running podman so frequently

10:06.740 --> 10:10.220
with these parameters that I would want that to be my default context but I can't do that

10:10.860 --> 10:17.100
right it drives me crazy why can't I tell podman or docker that by default I want to remove

10:17.660 --> 10:24.140
the things after I run them I have to type dash dash rm every fucking time because it has no sense

10:24.140 --> 10:29.740
of state it should it should and I might actually redo a podman that has it that way but unfortunately

10:29.740 --> 10:35.980
no so it still has a command so I'm going to do a run and I just want to show you alpine

10:36.940 --> 10:43.740
which is the most common with the most popular Unix distro okay fine a Docker just to get it out

10:43.740 --> 10:56.860
of here whoops run what am I doing wrong exec alpine right I cannot remember my Docker commands

10:56.860 --> 11:01.100
right now what am I doing wrong people I'm doing something wrong

11:05.420 --> 11:11.580
is it does it have to be before the flags okay thank you for helping me make my case further

11:14.460 --> 11:20.380
I mean how annoying is that I'm glad that happened on the stream alive because that's

11:20.380 --> 11:24.940
exactly what I'm talking about the flags are part of the commands sometimes they're not though

11:24.940 --> 11:28.860
there has been several commands where that does not matter where they appear in the command line

11:28.860 --> 11:34.620
right but some do yeah whatever I mean it's super annoying it's super annoying because I mean how

11:34.620 --> 11:39.180
many times have I written this command I still can't remember it I should have been able to just

11:39.180 --> 11:45.420
tab my way through the thing and figure out the syntax if it had had a you know a human friendly

11:46.540 --> 11:49.420
you know rooted command tree that I would I would already know what to do

11:50.460 --> 11:53.980
right and if one of those commands has helped then I could I could say okay well this particular

11:53.980 --> 11:58.540
command has state and I can set the state variables for that thing such as remove yourself every time

12:00.220 --> 12:04.540
you know whatever so so so here we are on alpine let me just show you what I'm talking about so if

12:04.540 --> 12:10.460
you go to this slash bin and you ls that shell you'll notice right away that there is a bunch of

12:10.460 --> 12:16.780
stuff that's sim linked right if you go look at the same stuff on busybox it's hard links

12:17.580 --> 12:20.860
it's actually kind of interesting you want to see the difference they're all the same file they're

12:20.860 --> 12:27.340
all the same this is called a multicoll binary and this is a very early version probably earliest

12:27.340 --> 12:38.540
version of a contextual command interface so they maintained you know the one thing good

12:38.540 --> 12:45.100
kind of mantra from unix and from the philosophy but then they hit it from everybody by making all

12:45.100 --> 12:50.220
of them individual commands and those commands are all in a single binary that binary fits on

12:50.220 --> 12:55.820
a floppy disk on a 1.5 megabyte floppy disk that's why busybox was curated and and you can go back

12:55.820 --> 13:00.060
on a lot of people don't know this but you can go let's do the same thing let's run busybox this time

13:01.180 --> 13:06.460
assuming I can get the command right and you just go into bin here and you'll see

13:08.060 --> 13:12.620
hard links this time so the way you know it's a hard link because you got 401 hard links here

13:12.620 --> 13:16.380
they're all exactly the same size binary and they all look like they're actually separate no they're

13:16.380 --> 13:26.700
all hard links and yeah and so yeah this is this is the modern era though so the modern era started

13:26.700 --> 13:32.220
with busybox really but these days you know the closest thing I mean git was the first one

13:32.220 --> 13:36.300
git said you know Torvald said you know we got memory I'm going to put all of the commands

13:36.300 --> 13:46.140
that again now git is almost its own you know thing and strictly speaking these command lines

13:46.140 --> 13:52.220
that we're using for git or whatever are domain specific languages and you know what if we had

13:52.220 --> 13:57.500
treated them like that from the beginning we would have a much better command line world

13:57.500 --> 14:03.980
today and I am happy to report that the world has woken up and decided that creating things that are

14:04.060 --> 14:08.780
naturally intuitive like git has been I mean I mean obviously there's a lot of selections here

14:08.780 --> 14:12.540
but but let me give you another example so you can go to any one of these things right

14:12.540 --> 14:18.860
but let me give you another really good example ip the ip command right same thing it's a it's a

14:18.860 --> 14:23.180
it's a you want to call it a model it you want to call it a command with subcommands whatever you

14:23.180 --> 14:29.820
want to call it it has that and you can like kind of keep going right you can do address okay I got

14:29.820 --> 14:35.660
that and I go address tab tab oh look I got I can do address change delete flush and help

14:35.660 --> 14:42.060
I really really really love this command because I had nothing to do with this command nothing to

14:42.060 --> 14:48.540
do with it I did not even know about it and it has the the creators the brilliant people

14:48.540 --> 14:55.740
behind the ip command have created exactly what I created in bonsai to the letter to the letter

14:55.740 --> 15:02.140
now they they do allow dashes and stuff like that and but the fact that they put the help command

15:02.140 --> 15:09.820
after the command that help is a subcommand of the main command is exactly what I did was z

15:09.820 --> 15:16.140
so I do z bonsai right so I do z is the um my help is way better than that but if I do z unique

15:16.140 --> 15:23.020
right everything in bonsai comes with an optional embedded help command so I can type help and I get

15:23.020 --> 15:28.620
a man page and this has been structured exactly like the man pages and you get this help documentation

15:28.620 --> 15:35.740
for free with bonsai it automatically detects the subcommands as they have been uh composed

15:35.740 --> 15:40.860
into your monolith and at every level in the commands tree at every level of the you know the

15:40.860 --> 15:46.620
command level uh of your of your commentary you you get a different help command that is

15:47.660 --> 15:52.620
specific to the available commands under that section automatically and I built that into

15:52.620 --> 15:57.580
bonsai so the fact that the ip people have actually done the same thing and shows to put help there

15:57.580 --> 16:03.900
instead of dash h which is probably also going to work nope good for you I love the ip whoever

16:03.900 --> 16:09.580
designed the ip command you are brilliant you're a brilliant wonderful people thank you so much for

16:09.580 --> 16:13.500
seat for days and and you know there's a lot of other commands so net plan is one I know people

16:13.500 --> 16:19.420
don't like net plan but people are starting to wake up and we have git you know a cube ctl is

16:19.420 --> 16:23.900
getting better I think it'll eventually come around and create you know this this kind of interface

16:25.180 --> 16:31.580
but I just I'm just super happy with that now unfortunately uh you know that in order to get

16:31.580 --> 16:37.820
color here I still couldn't set state so guess what I had to do you're gonna see it aren't you

16:38.780 --> 16:44.060
I can't set state so the thing the thing that the people doing these command line interfaces have

16:44.060 --> 16:52.700
not yet fully accepted is a way to standardize context and so my term for this and this is

16:52.700 --> 16:59.100
going to be the term I'm going to propagate going forward is contextual rooted command trees

17:00.140 --> 17:03.900
contextual rooted command trees or stateful rooted command trees

17:05.660 --> 17:11.820
stateful contextual the point is that you should be able to set the state of your switches

17:12.620 --> 17:17.420
and and do it one at a time so I'm going to go do this one I'm going to go do another one

17:18.380 --> 17:24.300
and it's not that most of the time when you want dash c on a thing you always want dash c on a thing

17:24.940 --> 17:30.060
right and like for cube ctl how many times have you just wanted the namespace to be for a single

17:30.060 --> 17:38.540
command during a cube ctl session pretty much never right and so you are forced to go up and

17:38.540 --> 17:44.220
redo that exact same command line and rebuild it every time because there's no command to set the

17:44.220 --> 17:49.340
default namespace you can in the context but then you have to go through that convoluted

17:49.340 --> 17:54.940
context switching crap because because no one is really standardized or thought about a simplified

17:54.940 --> 18:02.140
way to do it now I have in bonsai so in bonsai you can actually do var and var is a generic way

18:02.860 --> 18:09.900
to capture variables that are stored statefully in a file for everything

18:10.540 --> 18:16.460
that uses for everything in the monolith and I really wish that that we could standardize on

18:16.460 --> 18:21.660
this so and it so the default way to do this is home art of x robbie goes into your home directory

18:21.660 --> 18:25.820
I don't know can you see that my help description is actually specific to my account

18:25.980 --> 18:33.100
you know why because I'm running the help command from the command

18:34.540 --> 18:41.180
so I have dynamic help that detects your current situation that means all that stateful

18:41.180 --> 18:45.900
stuff that we're also adding guess what you can leverage that in your help documentation so when

18:45.900 --> 18:52.540
you go man or instead of doing man rides you go z whatever help it can actually in interrogate

18:52.540 --> 18:56.460
the local cache or the very variables they've already set and it will display them in your help

18:58.540 --> 19:03.580
I mean these are things that that are like next level when it comes to thinking about these these

19:03.580 --> 19:08.300
these type of like really extremely human friendly interfaces and and and I you know just

19:08.300 --> 19:11.980
rather than getting angry about it I went ahead and build it I would like to see these things

19:11.980 --> 19:18.540
incorporated into more things but being able to standardize on dot cache z vars I mean you throw

19:18.540 --> 19:22.860
away there usually the cache oh yeah this is actually probably one of the best use cases for

19:22.860 --> 19:26.780
go but you know I mean let me just I sounds like I'm selling bounds bonsai here that's not how

19:26.780 --> 19:31.580
what I started on this but bonsai was you know of course my solution to this but I have a z

19:31.580 --> 19:38.700
monolith that that is here just to show you what I'm talking about so um you know and just to show

19:38.700 --> 19:45.660
you how easy it is to do this all I these are all of the the bonsai branches I call them which are

19:45.660 --> 19:54.140
just commands with their own trees and I just import them and they're here that's the end of it

19:54.140 --> 20:01.340
I can create my own uh dynamic template variables for my help I can set flags I can create you know

20:01.340 --> 20:07.020
if I want to do a multi-call I can do that um here is a here is a parent command so this is

20:07.020 --> 20:09.660
this is a command is different I mean you have to get into bonsai I'll do a whole thing I'm on

20:09.660 --> 20:12.780
bonsai I'm gonna write a book about bonsai actually the reason I'm doing all this keg stuff

20:12.780 --> 20:17.580
it's got a lot of books to write and one of the books I want to write is is is bonsai the book

20:17.580 --> 20:21.420
about bonsai the bonsai guide because I think and here's here's the shortcuts here's all my

20:21.420 --> 20:26.700
shortcuts through the command tree that goes into the monolith so I can bypass some things right

20:28.380 --> 20:35.740
and and stuff um and here it says uh and there's I mean here's an example of the help template

20:35.740 --> 20:40.380
which uses the most amazing templating system in the world the go templating system is by far

20:40.380 --> 20:45.740
the most powerful that's ever been created uh it's so easy to create extensive extensible

20:45.740 --> 20:51.260
uh syntax for your templates everything anyway so that's it the rest of this stuff is all pulled

20:51.260 --> 20:56.460
in from these other things including local stuff so the env go this is a sub-command I just wrote

20:56.460 --> 21:00.700
really quickly I was like hey I just want to print my environment variables and I you know

21:00.700 --> 21:03.980
just couldn't come out of stuff I I don't want to get too much into bonsai I just wanted to show

21:04.780 --> 21:08.620
you know I wrote some tmux stuff I'm in the middle of converting all of my

21:08.620 --> 21:12.140
bash scripts into a single z monolith that I can copy onto any target system

21:12.140 --> 21:17.740
including things that running any shell on planet earth because because this is a binary it doesn't

21:17.740 --> 21:23.420
care how it's being executed at all and one of the things I haven't added yet is I want to add

21:23.420 --> 21:27.820
completion so that if you I don't have this yet but if I were right now if I just do z enter it

21:27.820 --> 21:34.940
shows me the help but I am going to add so if you if you wish to you can set up the default shell

21:35.580 --> 21:40.780
and when you do z enter what it will do is it'll it'll put you into a tab completion terminal mode

21:41.660 --> 21:50.300
that's supported on any on any shell whatsoever including DOS so if and when we get that because

21:50.300 --> 21:55.420
that library has already been written I mean gh already uses it right so the gh tool already

21:55.420 --> 22:02.460
uses something to this effect so the create repo create you're seeing this more and more it has

22:02.460 --> 22:07.020
this whole terminal interactive it's like a little sort of it's not truly a command line it's an

22:07.020 --> 22:13.580
interactive terminal session but but but for places that don't have completion I want to

22:13.580 --> 22:16.940
be able to just go z enter and then enter a command and hit tab and have it find the right

22:16.940 --> 22:22.140
command on anything anything anything whatsoever because because the completion will then be built

22:22.140 --> 22:29.580
into the monolith itself in a very tiny like micro shell if you will so that that haven't built that

22:29.580 --> 22:34.460
yet but that that's coming and and to me that's that's where we're going you know we we have these

22:34.460 --> 22:42.700
these other things here you know I have my pomo command is in here and pomo start and there's

22:42.700 --> 22:50.060
my pomo up in the corner z pomo stop anyway so that that's what I I don't know what should we call

22:50.060 --> 22:55.260
them should we call them stateful or contextual what should what should we call them I think we

22:55.260 --> 23:01.500
should call them stateful rooted commandries uh that's what I think I think they're stateful

23:02.540 --> 23:07.180
I think stateful is the right word because because they do have state I mean you know

23:07.180 --> 23:12.300
the a subcommand might you know it switches and stuff might be changed now I also have a config

23:12.300 --> 23:18.220
command which is for you know that throws you into a config yaml file and lets you change your

23:18.220 --> 23:22.220
configuration for your local system for your local z bonzai command and that stuff's not meant to be

23:22.220 --> 23:26.060
temporary cache and that's the kind of thing that you would copy around with you in your dot files

23:26.860 --> 23:31.820
but the vars the vars uh you know bonzai tree those are all optional by the way you don't have to

23:31.820 --> 23:36.700
put those into your bonzai tree if you don't want but if you do put the vars uh the vars into your

23:36.700 --> 23:42.220
bonzai tree you get stuff under dot cache but then if you go onto another system and you don't take

23:42.220 --> 23:47.340
your cache with you you just get the defaults for all your your commands uh unless you you know and

23:47.340 --> 23:53.340
that's it's up to you to kind of decide whether you want to implement uh your bonzai tree command

23:54.460 --> 23:59.820
using config uh so which you know can use a centralized config by the way one config for an

23:59.820 --> 24:09.260
entire monolith um and because you know you're able to like drill down and versus um you know having

24:09.260 --> 24:14.620
having cached variables that are that are that are there now you know the amount of time it takes

24:14.620 --> 24:21.100
to read from those variables and all that stuff is so infinitesimally small that it's it's not an

24:21.100 --> 24:26.140
issue it's not an issue it might have been an issue in 1976 but it's you know it's not anymore

24:27.180 --> 24:31.900
so so that's that's what that's about um that's really all I have to say about that so I I encourage

24:31.900 --> 24:39.500
people to um to play around and if you discover a a stateful root of node tree uh root of command

24:40.300 --> 24:48.060
some somewhere um let me know and we can you know put these together I'd like I'd really

24:48.060 --> 24:54.940
like to kind of see how the world is waking up and throwing get out out thank god uh you know

24:54.940 --> 25:02.300
dashes be damned uh you know I the other great thing about this is that these interfaces that

25:02.300 --> 25:10.060
we're building can easily be spoken if you pick words that are real if you I've tested this on my

25:10.060 --> 25:15.260
on my pixel my google pixel with natural language so I mean people people are already using command

25:15.260 --> 25:22.060
lines we have like sales people using command lines because they're using uh slack right so

25:22.060 --> 25:26.620
somebody writes a slack bot or a twitch bot and you know maybe they put an exclamation point in

25:26.620 --> 25:32.300
front of it but they put a bot in there and then the bot is is processing natural you know

25:32.300 --> 25:38.540
is processing these messages all the time and those messages are real so so the more realistic

25:38.540 --> 25:42.620
and and human that we make our interfaces is simpler we make them without all the dashes you

25:42.620 --> 25:46.780
can never do this with get off right but but if we actually move to a stateful root of node tree

25:46.780 --> 25:53.660
command kind of situation all of our commands on the command line can be directly implemented

25:53.660 --> 26:00.140
as bot commands with no modification and now you can go into your favorite chat app and slack

26:00.140 --> 26:07.260
or a twitch or whatever and you can speak your commands to the thing and that is really the

26:07.260 --> 26:12.780
future now you don't need a full blown machine learning algorithm to to process every possible

26:12.780 --> 26:18.380
thing here you just need the definition of a domain specific language so that you can tell

26:18.460 --> 26:23.660
your bot or your system or whatever about it and then do it alexa's already doing this

26:24.220 --> 26:27.900
series already doing this they already have gotten in fact if you go out if you've ever written on

26:27.900 --> 26:33.580
alexa uh conversational command i was really into conversational ui for a long time about four years

26:33.580 --> 26:40.380
ago i created a thing called skeezix and and sabah which is conversational assistant virtual agent

26:40.380 --> 26:44.700
but i that's i haven't gotten anywhere without since then but i do believe that the future is

26:44.700 --> 26:49.660
going to be conversational interfaces so the more we can start using stateful rooted tree

26:49.660 --> 26:54.060
node tree commands the the closer we're going to get to conversational interactions with our

26:54.060 --> 27:00.780
computer i systems to those you know sci-fi's in the 1970s that we saw where people were talking

27:00.780 --> 27:06.780
to the computers and telling them what to do until we create conversation until we get to the point

27:06.780 --> 27:13.980
where we're getting rid of get ops i can run an ip command by speaking it into my command line if i

27:13.980 --> 27:26.300
had a voice interface i can do it i can't do that with gpg imagine that example i i want to create a

27:26.300 --> 27:31.820
new gpg key right or i want to encrypt something with gpg can i speak the command to my computer

27:31.820 --> 27:37.820
at this moment and have it work no but i could if i wanted to look up the current ip address for

27:37.820 --> 27:42.620
for a specific ethernet configuration assuming my conversational interface let me spell out you

27:42.620 --> 27:47.500
know individual um ethernet ids which would be great if some of the conversation the uis would

27:47.500 --> 27:51.740
start to allow that if they would have a keyword that said spell blah blah blah or whatever we

27:51.740 --> 27:57.260
could actually start doing that and then then we can start using our fancy microphones to write code

27:58.540 --> 28:03.020
or to interact with these systems and we will not ever be able to do that until the world wakes up

28:03.020 --> 28:09.820
as it has been and starts using stateful rooted node node node command trees or if you wish just

28:09.820 --> 28:15.100
natural language command line uis which is what it is i mean i kind of think that's probably the

28:15.100 --> 28:19.180
better way to say it we should start being we should start to use natural language command

28:19.180 --> 28:26.700
line uis and maybe that means that we put you know we make certain words optional maybe maybe we do

28:26.700 --> 28:30.380
maybe we say if somebody puts an article in there or something that we you know they don't have to

28:30.380 --> 28:35.420
talk like a robot to interact with their command line conversational ui maybe maybe we we we use

28:35.420 --> 28:40.540
regular expressions actually that's that's what schesix and kava were they actually i i wrote an

28:40.540 --> 28:45.980
app it's i got to go find it again but i started writing a conversational ui that used a regular

28:45.980 --> 28:53.900
expression to match any of the root node tree commands and now that i think about it that's

28:53.900 --> 29:03.100
probably something we could add to bonsai um the only problem with that is that uh right now the

29:03.100 --> 29:08.300
the way that the um the node tree works you have to have a single unique you know thing through it

29:08.300 --> 29:16.940
but if we could ever create a way to to add helper words that are ignored you know the or whatever

29:16.940 --> 29:23.260
without going full-blown machine learning algorithm model you know or we could we could actually start

29:23.260 --> 29:28.780
speaking in very very natural ways to our to our to our monoliths and do things like that

29:28.780 --> 29:33.580
so and i i look forward to the day but i mean just being able to tab through something to me is like

29:33.580 --> 29:38.620
is like plenty plenty good for now because i don't like reading about all the help and everything i

29:38.620 --> 29:43.980
think you should be able to to immediately understand what your options are on on any command just by

29:43.980 --> 29:50.220
hitting tab i mean if you can't do that if you have to go slog through a man page uh i mean you

29:50.220 --> 29:54.700
should be able to see boom and see all your options and go hmm this one looks really good and you

29:54.700 --> 29:59.980
know to cobra's cobra's credit i will tell them this i they you know if you tab tab through this

30:00.780 --> 30:07.900
um wait that's not the one i'm thinking of um which is the one that does it there's there's uh

30:09.980 --> 30:17.100
there's there's one oh that's not it there's there's one that uh will actually give you a

30:17.100 --> 30:23.340
summary like a very long-winded description oh no gh there is it'll give you a long-winded description

30:23.420 --> 30:31.100
it runs it into more and everything when you do this right um and i do find that kind of interesting

30:31.100 --> 30:36.860
that it that it does that um the reason it's the way it's doing that is it's actually running a shell

30:36.860 --> 30:43.500
script uh in order to get you that and that's that's a bonsai thing and that that's very

30:43.500 --> 30:48.380
shell dependent and they have different versions for each shell and i i feel like that's nice and all

30:48.380 --> 30:54.620
but i it's not it's definitely not portable so um but but i want to show this because it does show

30:55.340 --> 30:59.260
how you could break down you know the the description of of what each of the things are but

30:59.260 --> 31:04.140
i don't even think you really need that i i think you just need to be able to just do z tab tab um

31:05.340 --> 31:12.860
and you should be able to get to look at um you know all of these different things to go

31:12.860 --> 31:17.500
hmm well what does that one about right and then just do path help and you'll you can see the help

31:17.500 --> 31:23.340
okay path doesn't have that path must be a uh a shortcut to something else and i actually don't

31:23.340 --> 31:27.180
know which one it is it is a shortcut i probably should have a shortcuts command or something

31:28.140 --> 31:31.900
that is that is something that i want to look at so i mean help here will show me

31:32.700 --> 31:39.660
i think actually my help does show my shortcuts it does there it goes uh it does yay i did something

31:39.660 --> 31:48.700
good so path path thing is env get path so if i were to do z env uh help and that would give me

31:48.700 --> 31:57.340
that and you can actually do help help help help on being repressed um so so yeah you can actually

31:57.340 --> 32:02.780
the help command uh has a bunch of sub commands and it does its own parsing of the thing so i mean

32:02.780 --> 32:07.740
that's all that's all i have for this youtube video but but i encourage you as i said to to

32:07.740 --> 32:12.220
consider you know making human friendly interfaces at the end of the day that's what we're talking

32:12.220 --> 32:17.580
about and human friendly these days means conversational and that in this case means you

32:17.580 --> 32:25.100
know a stateful commentary uh and and i'm going to just shorten it i'm going to say stateful

32:25.100 --> 32:33.500
commentaries uh and there we made up a new term let me know what you think in the comments below

32:33.500 --> 32:39.260
am i youtubey enough yet

