That's some good stuff.
Hey there. Welcome to the stream today. I'm gonna do a little stream about which
editor you should use first for coding and this is because I have been trying
to make the decision about what editor to use on the stream as I go forward with
the rest of the beginner boots and I think it's a big big topic. I've never
covered it before. I've covered little pieces of it all over the place but I've
never tackled the topic at large. It's a huge topic. So before I even let the
crew of hecklers and debaters and you know outlying intelligent people to come
on here and like make all their cases for whatever thing they use, I just wanted
to talk to you for a second about you making your own decision about what to
use and God knows I'm a very opinionated guy and I have a lot of specific
opinions about this but I wanted to just go ahead and run it all by you. First
of all though, let me just make one change.
There we go. Much better. Cheers.
A little bit of spike coffee there to get me through this. Actually chai.
The topic of the topic of an editor is a really controversial topic. Everybody
argues about it all the time. Everybody's right. Everybody's wrong and the bottom
line is that it comes down to what is the best tool for you and so today we're
going to talk about three specific types of editors, types of tools that you can
use for editing code. A lot of these editors you could use just to edit
whatever you wanted to and they file into three categories IDEs where they
call individual development environments, lightweight graphic editors, and terminal
based editors that you know what if you know me at all you know terminal editing
is my preference but I want to talk about all of them so that you can kind of
speak intelligently about which one is the best to use for a particular task
and if you're if you're watching this video live stream right now you're
probably gonna see a graphic for a while but some of there's gonna be other
graphics inserted in here to talk about this. So the first editor I wanted to
talk about is one called Visual Studio and we're gonna we can go ahead and
look at where to get this and everything. So Visual Studio, let me just put my thing
back on. Visual Studio is the default for most C++ development on Windows and
from Microsoft and you just do the search for Visual Studio you'll find it. It's
really important that you understand that Visual Studio is not Visual Studio
code and we're gonna talk about that that's what that gets under the lightweight
category. This is a great tool for what it's designed to do which is largely
work on very big Microsoft applications and some people swear by it and they
use it all the time. I hate it. I've had to use it on occasion and it's a fun fact
there's there's somebody who did some analysis on it from Microsoft who
discovered that something like 50,000 lines of code are never even used in the
codebase. It's the epitome of Microsoft bloat but it is a mandatory tool if
you're going to be doing anything in C sharp or C++ for Windows. It's just
it's just really not worth trying to do it in any other way. You certainly can
use other editors for that but that it's really not it's really not worth
attempting that and so that's one of your choices. If you attend if you're
going to be doing Unity development or you've been doing something C sharp you
might want to pick this editor if you can use that. There's another popular
editor that's been around for a long time by the way Visual Studio has been around
forever. Another editor that's been around for a while is called JetBrains it's
actually so much an editor as it is a company. IntelliJ is there JetBrains has
become famous for specifically their IntelliJ editor which has been around
since the 90s. It's a really good one but this is you know this is your decision
whether you want to use this or not. Personally if they have they have they
I think they're the ones who did PyCharm. This is a little bit lighter than
traditional you know integrated development environment than some of the
other ones that are out there but it is it is a thing that you can use and you
can give it some some consideration. There's Python developers who absolutely
swear by PyCharm. I would never ever use it but you know that might
be you. I want to say there's there's another one in that branch that's called
GoLand which is the other thing too is you get language specific ID's yeah
there we go. GoLand is the JetBrains ID. This is one I've heard rave reviews
on. Petit Jolliway check really loves it. One of the most famous converts from
Node to Go. He uses it. He was raving about it. A lot of people really like it.
It's got great theming and everything and frankly if you're going to be
developing in a specific language in fact somebody who recently got a job with
a company that does go development they this is their go-to editor. It's not
mandated but it's really encouraged that you use it. I have been to be a fan of
the idea of having if you're going to have a graphic editor that you have a
graphic editor that's highly customized for your whatever it is that you're
developing and so this would be one you might consider if you're going to do
go development. PyCharm is that way and frankly JetBrains as a company has made
kind of a business out of creating editors for specific languages the first
being IntelliJ which they was a worldwide hit. I believe IntelliJ then
went on to become the standard native application development tool for
Android and you know with 39% of all internet traffic going to Android
phones with Chrome now that's a significant choice. So if you're going
to pick an editor you might want to consider JetBrains for that. There's
one that I have to mention that I absolutely despise mostly because I
had to use it. I was forced to use it. This we got really popular. It's called
Eclipse and there would be groans in the audience if they could if they could if
they could hear that you could hear them right now. Eclipse is probably one of
the most notoriously bloated and horrible integrated development
environments on the planet as far as I'm concerned. However it is everywhere.
There's an Eclipse foundation and there's I mean it's been everywhere since the
90s because Eclipse got really popular because it was really the first
substantial Java editor written in Java and Eclipse itself has gone on to be
embedded in applications because of its framework. IBM for example same time
their chat client is an entire Eclipse instance with Java built in. It's one of
the most bloated pieces of crap I've ever used and not just that but Lotus was
the same way and you see a lot of things around that still use Eclipse for
lots of reasons then you're likely to encounter it if you're doing any Java
development and particularly even in Minecraft if you're doing Minecraft
development. If I had a choice and I was going to be doing Java development
which I would never choose to do I would you know I would probably be reaching
for IntelliJ over Eclipse but again you might not have that choice and Eclipse
is super famous for having all the things integrated into it and it's really
popular with enterprises. So they've developed a lot of enterprise tools
that use it and a lot of times I'll mandate that use it. When I was at IBM I
had to use Eclipse and I figured out ways to get around that and use VI under the
hood so that I could just use Eclipse for the things that Eclipse had to be used
for for like committing code into the source tree and stuff like that. So again
we that's those are the those are the only individual development environments
I'm going to cover just to give you an introduction to them so you know about
them. This is you know beginner boost material here so I'm assuming that you
don't know anything about editors and maybe you've heard somebody say you need
to learn this and you need to know this and hopefully this will help you make
your own decision. The next category of editors is actually the lightweight
text editors. There was something of a revolution started by Sublime and it was
the first so I talked about this before I'm doing it again though because I feel
like it's important to do it in a more succinct way. So Sublime text is still I
believe the fastest visual lightweight editor in class. There's still people
who really love it but it has fallen out of favor for two well three main reasons
the first main reason is that it's highly proprietary. You can use it but
you're supposed to buy it. Number two you can't extend it and there's there's
almost like yelling at each other flame wars in in the support forums because
the person who maintains it which I shall not name can't doesn't listen to
anybody does whatever he wants and and and the people who are trying to expand
it and do their own thing just can't and they're just so frustrated that this
project this part of this product which was so great is just completely not
available to anybody to extend or use. Now you can write Python plugins and
things like that. A lot of people do that. And the third thing the fourth thing is
it's it's all Python. It's Python and C and so extending it is is you know even
if you could it would be really tough to do it. I think it's C++ actually but
fastest editor on the planet for a very long time in the graphics category
you know short of like really simple ones and we'll get to those two. This is a
little bit across between you know the whatever the editor is on your computer
and I don't need to tell you that about you know notepad or simple text or
whatever the editor is it comes on your computer just a plain old text editor
which by the way Jennifer recommends in learning web design you just use that
and that's actually how I learned web design in like what 95 or so I actually
coded my first HTML using simple text on a Mac and that's totally fine. It didn't
have any syntax highlighting you know as a whole world opening up to me after
that point so don't feel bad if that's all you know and then if you have if you
have pop OS or Linux of any kind that the built-in graphic editor is pretty dang
good the text editor so we're going to stick with those are all lightweight
but that's really ultra lightweight right so in between ultra lightweight which
is just text editing and nothing to do with code and the big fat behemoth IDEs
you have these light this lightweight brand of editor called Sublime Text
which is the first one and I'm very gonna quickly gonna go through the
history of that so after Sublime Text came out and had its problems that I
mentioned people ran to Adam and Adam was that it was was GitHub's answer to
Sublime it was an editor developed by GitHub before they were consumed by
Microsoft and it was designed entirely to use JavaScript in fact the entire
Electron API which people love the bag on now because it is responsible for
Eclipse Slack God how many more I mean there's so many applications that have
Electron built into them now and Electron is the framework that was built to
build out of them primarily oh boy what did I just search for Electron so so we
have Electron here I probably should say engine or something no which I say
framework Electron gets a really bad black eye these days because so many
people make very simple applications that have an entire Electron you know
framework built into them Electron just wondering is the combination of the
Chrome web browser and some a web server that by default I think is node and
and the stuff to talk between the two so it's basically like you have a little
miniature web server and web browser all built into one and that way you don't
you know it's it's kind of like a web application so so you'll get you're
gonna hear a lot more about Electron I actually have done a video on Electron if
you can go search up on my YouTube but it's important you understand that
Electron was created to make Adam and as soon as Electron came up you know
everyone's like well maybe we can do better so and it was JavaScript it was
really slow compared to Sublime it's still slow compared to Sublime but Adam
was really lighter than the IDEs and it was extensively using JavaScript which
made it really popular with a lot of people really fast it's still really
popular actually and and then you have brackets so so brackets was Adobe Adobe's
answer to this they said hey we want to make one and I'm almost positive that
it's running off the Electron editor but the Electron framework but I can't
confirm that right now and it basically the same idea it's just Adobe style
different approach you know Adobe I guess wanted to do their own for some
reason I've never met anybody who uses brackets who's not a big die-hard Adobe
fanatic and you know what I'm talking about they are there but that exists and
so that's one of the one of those and then sometime after that Microsoft
decided to get into the game and they said you know what let's make code visual
studio code VS code so that's code.mic let's see code.visualstudio I think it
is yeah code.visualstudio.com now this you know they could they had an
opportunity to really clean things up but they did it and they named it visual
studio code instead of visual studio and this has created crazy confusion for
beginners I don't know how many times somebody's downloaded visual studio
instead of visual studio code because the icons are similar they wanted to just
carry on their branding and maybe you know make people think that visual studio
is actually not the horrible bloated piece of crap that it is and so they you
know they added code in the front of it and it's really tough but just make sure
you go to code.visualstudio this is the number one editor on the planet right
now hands down by every measure this is what most code is being written in
Microsoft does know developers and they they're pretty good at making editors
and so they released they did a lot of things that weren't very Microsofty at
the time fact you could argue that this was the beginning of the new Microsoft
under Sanjay that you know really really embraces open source and as far as we
know and they released this to the world and said here's our version and we're
using Electron and ours is faster than Adam and we still use some techniques
that are the same they have their own plugin architecture which is very very
rich right now and people go crazy over this thing there's people who love
completion I despise that and there's you know it's just really popular with a
lot of people this is the editor that I usually have beginners use so if you're
just coming to the booths for the first time and you've never done any editing
and you don't particularly want to you know rack your brain learning a more
difficult editor that I'm going to talk about in a second this is the editor
that I recommend you pull out either this one or Adam chances are the VS code
is going to be more fun for you out of the gate one of the things that VS code
does very very well as it integrates with with other services that github now
I mean that Microsoft now owns Microsoft bought github and at that meant that they
also bought the Adam editor it's open source but you know and they bought
control of this code and they got all the 10 million developers just so that
we're you know committing to get him all the time and that's very good 7.8
billion dollars they paid I believe and that's a very controversial decision and
that's that was that was after Git lab came out but I'm going down kind of a
rabbit hole there but just understand that this is still under Microsoft's
control the future looks pretty bright for Visual Studio code because Microsoft
does control it other than the fact that they're probably going to blow it out
like they do everything else it it it is integrated very tightly with with
github which is the world's leading source repository even though it's not my
favorite and that's a depth separate conversation I use Git lab for everything
and so that's I'm going to kind of conclude on that except but one other
thing Visual Studio code has Microsoft's
limitry that's embedded in it that you have to actively go in and find and
turn off and nobody does by default so I can't recommend an off that you at least
give VS code in the try VS code him and you can go find it it's actually if
you're using pop a West like me you can just search for it and it'll it'll you
know it this is what it looks like it's exactly the same we're not gonna run it
right now but so so that's what we're looking at and you can download VS
code him all this podium is it's exactly the same project thank God for open
source right it is VS code in every way it's just had all of the telemetry the
tracking and privacy violation and stuff that it is activated by default in
Microsoft's tool there are some things that don't work in it I've heard but for
the most part I think you're gonna be fine to use this I have not well other
than the other day I haven't given a lot of work but I have used this code for
more than a year and a half at one point I was a total convert to VS code and I
actually gave up my favorite editor of all time them for VS code for a good
year and a half and I did a video on that ultimately though I concluded that
even a lightweight text editor for me is is just too heavy and too slow and and
people take great exception with that but but I am not a graphic editor I
never have been because the terminal is always going to be faster I can I could
argue all day that the terminal on every level is faster than any graphic
application period just from the trips that you have to make over to the mouse
all the time and however to use a terminal editor today is is you know it's a
craft you have to like practice it just like the piano or something you can't
just jump in and use it it's pretty hard so let's shift our gears now to the
terminal editors and I want to talk about those and a little bit of the
history of the terminal editors this is that the terminal editors are my favorite
and after that year of VS code it was my own people then my own community
reminded me to that that it was still faster to start up files and everything
with vi and and I it is it's just better so based on that we're going to go back
and I'm going to pull up the chat I'm sure we're going to have all kinds of
people in the chat talking right now but before we do that I just wanted to tell
you about them I think I can probably go pull up so that I have to give you a
quick history on the editors here so this let me go back to the title screen
for sec alright so so when it comes to when it comes to terminal editors you
have to go back into the history of terminal editor and know what a terminal
is first of all a terminal is the thing that you get when you fire up I'm
firing up one right now so you guys can see so this is a terminal editor and I'm
going to show you this actually give me a second I'm going to make it a big screen
when it changes one to be so that it hides stuff and I'm going to go into
preferences at the thing about terminals is that you can set their colors and
everything and I just just want to set that to something that's very readable
for right now instead of the transparency just so you can read it I mean I love
transparency don't get me wrong but it's a little hard to read sometime all
right so so we'll do that and then we'll bring this guy make this thing full
screen alright so actually yeah let's do that so if I bring you back if I bring
us back to to here you see you just get a plain terminal there's nothing going
on it's just a terminal and terminals can be really scary if you don't know
about them you haven't used them before but they're very powerful and we're gonna
talk about terminals at another time we're gonna talk not gonna talk about
terminals right now but I did want to introduce you to different kinds of
terminals so the first terminal is ed and it's actually you could argue that it
was the first terminal ever made X I think predates it but and it is a line
editor and I mean Ed like this Ed and it lets you like you can set in commands
and those commands will it will adjust each line of a file that's coming in and
I don't want to spend time with any of the editor showing you because I know
it'll take too much time and but the second editor after Ed was it what
editor called VI and VI stood for visual mode of X or Ed and so it was in the
other one just allowed you to change one line at a time and and VI let you have
like a whole screen and to just let you see what that looks like so I mean where
are we right now we could probably do damp some md and you see you get you get
this screen this is actually them and we're talking about that but you get
the screen you can type stuff in here and save it and and such right and so
that was visual mode we see how it took out the whole screen so via and actually
there is another I don't think I have it installed but let me do this really
quick install and VI and you got to do my password there and there we go
we'll install this really fast our package is great package systems alright
so so now I can do the same thing I can do and VI and this is this is NVI is
the original VI there is no you can't get the original VI usually these days
it's really hard to find unless you're using a really old computer most
computers come with command call VI which is aliased to a modern version of
it called them they VI improved but the original VI is is is represented in a
program called NVI not to be confused with Neil them and we'll talk about them
and you have them in a second so NVI is a want bug for bug compatible version of
the original VI that came on Unix systems from the dawn of time and and it
continues to be the default editor right here on BSD Unix which is a different
you know kind of operating system we're talking about today but all this
terminal stuff originated with Unix actually Minix and we can go back but
for all intents and purposes Unix was the very first time and you know in
college campuses this was sort of used and then Lennox came about this isn't a
terminal history class right now but we'll talk about later so so this the
question comes up well so what should I use should I use VI and you know or
should I use them so the next generation of editors that came out after this was
the thing called VIM and VIM is just improved VI and and and then to and it
attempts to improve upon that yet another version of them came out called
Neo VIM and rumor has it there's another one called space VIM now which I am not
interested at all I'm not interested at all in the OVM and I actually strongly
discourage you from using it for reasons that I can describe you think I can
send you to my blog post about why you might not want to use it VIM however is
my favorite and and because VIM gives you all the power of customization of your
command line terminal and why would you use a terminal on the command line the
single biggest answer to that is in the case of VI or VIM it's because you can
fully integrate your computer's terminal power into your editor and while you can
pull up a terminal in VS code that is not necessarily the case right you it's a
lot harder to do you can do it but it's not as obvious so you know if you learn
VI and you don't learn or VIM and you don't learn how to integrate the shell
commands and be able to write really quick little shell scripts in order to do
things or you don't learn how to use macros which I took a long time to do
because I was a sort of a VI purist for a very long time you know you haven't
really learned them and you're not gonna really understand a lot of its
advantages you'll just be frustrated because you can't exit you can't escape
which is you know big joke out there so but if you do allow yourself to do the
things you can you you can make the most powerful editor you can imagine in
fact when combined with a really amazing shell like bash and a multi a terminal
multiplexer which allows you to split your screen up into pieces like Tmux you
have what I believe is a far more powerful individual development
environment with without the bloke it's the most efficient way to do editing of
all time not only that but it works everywhere and so I before we go to the
other terminal options I just want to say that VI is installed on every VR
Vim is installed on every Unix and Linux system for the last like 50 years and so
if you are going to be in a situation where you just need to attach to a cloud
machine with you know headless that means it doesn't have a graphic user
interface and you want to be able to apply what you're going to do there you
you just want to learn them or VI and you just you just do because that way
you can make it you can be effective anywhere if you're going to be a hacker
you really need to learn VI if you're gonna be a hacker you need to learn Ed
also because a lot of times when you break into a system you don't even have
that big fancy screen all you have is one line at a time and that therefore Ed
comes in really handy because Ed allows you to edit files there's other ways to
edit files but but Ed that would that's a really strong case for you to learn Ed
if you're just like wanting to be a web developer or you're wanting to just write
you know some go-co for some reason or you know or for whatever you know edit
pod files for Kubernetes or something that that is you know not necessarily a
reason to learn Ed but VI doesn't hurt because it works everywhere but that
brings us to the next option but speaking of defaults some time ago the
Linux foundation and all the Linux people decided to get rid of VI as the
default they didn't take VI off but they they stopped making VI the default
editor and they started using something called Nano which I actually despise but
I understand why people need to use it to get going the reason I despise this
editor and you see me using my my my my my just you know like writing and then
pushing backspace and stuff like that this this nano is by the way is an
is a is a newer version of Pico which has been around for a while and these got
really popular because they were used for mail processing back in the day when
you would use a terminal for mail so people remember them and it is
definitely more intuitive to a beginner but you really have to span the arrow
keys you can't navigate around you can't really integrate your shell you sort of
can and the most annoying thing of all here is that it encourages you to use
control X to exit and and that just the the the see all these things down here
that begin with a carrot those are all as you know control things and and I just
I just really don't like the use of control characters but now I've been
overruled everybody everybody on the planet thinks nano should be the default
editor on Linux now and now now it is to be fair sometimes you would do
something that was really important like you'd be editing you know a scheduler
file and cron job and you would go to edit it and it would throw into vi and
if you didn't know vi you were in trouble because now you couldn't exit
you didn't know how to exit there's no help there's no menu you couldn't get
out of it and that's like a long time you know joke in that in that world in the
world of of vi so so that's why nano is there I can't in good conscious
recommend nano if you're going to use a terminal because the whole reason for
using the terminal is to make it take advantage of the terminal and its
integration with the shell and so that brings us to yet another option which is
very popular with with academics and and and hard hardcore coders and
Linus Torvalds you made Linux and many many other really you know substantial
developers and that's emacs and and I actually do not like emacs I I played
around those emacs curious for a while the reason I'm gonna before I get into
emacs I don't think I could operate it I don't even know if it's on here yeah let
me check and see nope it's not even on here I have to install I that I'm not
going to install I'm not gonna waste your time I would be totally lost using it
some people swear by it people joke and say a max is in an editor it's an
operating system and the reason for that is because emacs was developed
primarily by a guy named amateur stallman who wrote most of the C code for
the utilities that use along with Linux the GNU core utilities he's the guy who
says you should call everything GNU Linux instead of Linux because he believes
his contribution outweighed the Linux kernel itself as well as everybody else's
contribution to the whole Linux system which I totally disagree with but but
he you know made emacs and and emacs is still popular in most of all is using
something called microlinux apparently and the the attraction from emacs is
that it can be customized it's it's it's it's basically the heaviest possible
terminal application you can run for editing anything and it's not just
editing you can like change your file system you can they've got so many
plugins to make it do so many different things they've even got stuff that makes
it behave like vi if you want and and for some people they really love that you
gotta understand that that was a thing when terminals were the only thing in
the house emacs was like really powerful I mean it was really powerful back then
there was no tmux you couldn't split panes up you had screen which allowed
you to have different windows and cut and paste in text back and forth but but a
tool like emacs at the time was I could see how it would be really compelling
particularly because there wasn't no network yet so you know even before
networking existed emacs existed right so but nowadays when we pick a
terminal editor I believe you're picking a terminal editor because you want to be
fast you want to integrate the shell commands and you want to be able to use
your editor anywhere as fast as possible you don't want to wait up for things to
start up and and by the way that means that you can't take your big fancy emacs
configuration with you you've got to know how to be how to edit files on
remote systems without all that it doesn't take very much to copy over that
to a system but you might not even have permissions to do that in certain
enterprise environments you have to have a change ticket to do that and so that's
my my take on it becoming proficient with vi first and then vim allowing
yourself to use the extra vimisms which I finally gave in on allows you to be you
know have the the efficiencies of of emacs locally but and you know and
build it and basically an IDE by combining bash you know vim and and you
know tmux but it also allows you to be to use the same fingers and operations
you know think muscle memory on any system anywhere and emacs doesn't allow
that you'd have to install it as you just saw on all those systems to be able to
use it so so I believe that's a big strike against emacs for anyone who
wants to use more than one computer if you're gonna spend what you're just do
it you're an astrophysicist you're gonna just work on one computer the whole
time and you want to be able to write your own plugins and everything and all
this stuff and then you max might be might be your option there and and by
the way another reason to use vi is because the bindings for vi are built
into everything so the use of hjknl for navigating through the history is the
thing right and by default the the terminal and Linux is set to back to emacs
mode so it's as if you're interacting with an emacs session but if you do set
that show vi you can use that you can use vi mode there is no nano mode or
anything like that and you'll come to really appreciate that because your
fingers will memorize things from the terminal that carry over into your
editor and that didn't goes into like terminal terminal browsing like when I
when I browse you know when I browse the website I'm using one hand and I'm
using the same vi navigation keys because those are once again you know
built-in and it's very common to encounter you know terminal software
that has Vim bindings you can even do a thing called Vim Vimium which can work
in Chrome as a program plugin allow you to navigate your graphics browser without
touching your mouse at all you can just stay there and do vi sorts of things I'm
sure similar things exist in to for the emacs kind of people but as I've said
from the beginning you know there's different stages here and if you're
just starting out and you don't know what to use and you don't want to use text
edit anymore you know the first pick I would say it'd be VS code it's very
intuitive it uses the mouse you it's what you see is what you get but if you
want to you know move into the terminal you're eventually going to have to move
into the terminal just there's just not very much not even in the web development
front-end world there's not very much that doesn't force you at some point to
go on to a terminal to do something and I'm not going to go into all those
reasons you would have to use a terminal but these days using a terminal is sort
of mandatory skill for a technologist and the particularly in the cloud
environment and because it's just ubiquitous it's just everywhere it gives
you so much power and so if that is true you know and you have to use it you
might as well I think you might as well learn the best editor for the terminal
on any terminal so that you can be productive no matter what and if you
want to take it up a notch and use emacs some people use emacs and vi
there's a couple of really great BSD people in here who use they'll use emacs
and they'll also you vi depending on what system they're on and that's only
two terminal editors to learn that's not too bad in a way you're going to be
able to do a VS code on that by the way just just say no to all of the remote
editing crap that's coming out in VS code and all these graphic editors that are
claiming to be able to integrate remote file editing what they're doing is under
the hood they're copying down a file copy allowing you to edit it and then
they're synchronizing up that copy to the server there's so many things that
can go wrong with that I just can't even begin to comprehend all the possible
things that could go wrong with that and if you are in charge of editing files
on a remote system first of all why are you doing that right you should be
staging it if you are somehow doing that one of the legitimate reasons to be
doing that would be responding to an emergency as I did many times you know
working as a system administrator and when you have to remotely connect to a
system and edit files there the last thing you want in the way is a visual
editor that's run by Microsoft I mean that I can't even begin to imagine the
terror of trying to be a system administrator and do that so you know
just if you're if that's where you're headed in cybersecurity and say
in the system of engineering and even you know full-stack development as opposed
to just running engineering then I would eventually move off of this code you
can still use it you know if you want to do you know big web projects it's
really good for that but if you if you're gonna start you know getting
serious about development see see development is pretty much all on the
command line that's kind of the culture you can do it in BS code but you know
using make files all this stuff you're gonna need to learn the terminal so I
would say you know probably 70 to 80% of all the careers in technology involve
the terminal and of those careers you know probably 50 of those percent of
those careers involve using a terminal on multiple computers without having an
editor installed on them that you would stall and therefore my justification is
learn Vi and then learn them and if you want to do that I will do videos on how
to do that how to learn Vi a little bit of a spoiler here though if you want to
just jump right in with Vi you can actually go read the little guide I made
called Vi Survive so you can go rwx.gg slash Vi Survive and this is just the
minimum you need to know to get around to Vi and this does or VIM and this does
make use of the arrow keys because if you're using nano and you want to get
started with Vi and not start with nano this is the way to do it this is the way
to do it rwx.gg slash Vi Survive and that I'll talk you through how to how to
just you know use Vi as if it were nano and then you can slowly add on more
skills that's how Vi learning works I'll do the different videos on Vi
specifically as part of the terminal mastery series but I just wanted to do
this one on editing all right so that concludes this video I'm going to turn
and take some comments I'm sure I'm sure that I'm sure the forums are full of
the comments are full of people raging about different things that I've said
here and as I've said all along be your own person be a critical thinker do your
own analysis for your own needs and make your own decision don't take my word for
it don't take their word for it don't let any pedantic argumentative jerk decide
for you what's best for you and that includes me because I can be that guy so
you make your own decision but taking a bunch of information make an informed
dependence and be ready to change your opinion when you have new opinions when
you have new information but don't don't let anyone shame you because you're
using the wrong editor and by the way if I ever do that I'm always joking right I
do I have fun we all have fun but but and that's that's fine that's the part
of natural natural healthy debate but but you know just take that with a great
assault when we do that I'm gonna turn to the chat now at at potentially what
will be my peril so I'm gonna put that on here so here we go Pico Pico came
with pine oh yeah Pico was a pine pine was a male editor no nano yeah I made a
thing about nano
you max always makes me picture emack Mendy the people the problem with emacs
is the same as the clips people are already making emacs based applications
are they really didn't know that when I browse the lips that I'm using one hand
yeah I know that sounds pretty funny doesn't PG just quoting I walk into
those things all the time obviously I didn't mean it I'm browsing a text-based
website so yeah text oh you're the vimeo you're thinking you're talking about
vimeo okay why don't you know them neo van is a disaster that never needed to be
made and and has been completely superseded by all of the additions that
been made and I'm gonna just if you want to get my my full story on them let me
just on on Neil them I can give that to you here so if you go to no pet or noob
G Vim I'm not a fan of graphics Vim although somebody informed me the other
day that you can interact with the shell using graphics G Vim but to me that
defeats the whole entire purpose of using them at all if you're using Vim you
want to integrate the shell and if you're using Vim on Windows with no bash
shell I think it's a waste so I don't that's not the way God intended it to be
used this put it that way many have keyboard shortcuts yes have Vim
shortcuts yes I like using a terminal but never really use terminal editors for
anything other than reading manual pages well that's not an editor in the
first place you're not you're not you're not using an editor to read a man page
you're using a pager they're like less or more I think remote editing is
sometimes used for working on a machine that is much more powerful for huge
coach bases with specialized hardware I could see that right that might be that
may be fine that might be an use case for that otherwise not a fan of that pretty
calm here yeah are there good resources for learning V of them but the sounds of
it you can't just dive in there are many and if you I've listed them on RWX I
haven't been to a whole thing on that RWX slash I want to say tools editor Vim
I don't remember let me go check here
let me see here can't find them there we go editors VIM go VIMisms so there's
your there's your link well I'll just do this
RWX dot gg tools editors and I have a number of things you can use there the
VIM tutor is probably the best even though it's out of date I I would never
use anything but the VIM that that is managed by the original creator of VIM
one of the complaints against VIM the reason you know VIM was created is they
the two biggest complaints against it were it was not it was not conducive to
community development which I believe is BS and number two that they didn't have
concurrency and that was immediately fixed so if anything good came out of
Neil Vim it was the pressure for for Brom to add that and and he did and I
believe something as important as VIM needs to be managed by one person or two
and that's it I've seen committees destroy applications and and I've
actually put my advice about not using Neil Vim out there in fact I could
probably find that for you right now the biggest one is all the things they just
ripped out without even asking anybody there's like a tons of changes that they
made they didn't even ask anybody and but they made it so you can use plugins
with node I mean all the technical and architectural decisions behind Neil Vim
are almost one after the other a testament to horrible technical design
and architecture and I just I cannot overstate that I hate it I hate it I just
I really hate it it's just really bad hi I can't I'm in the middle of us of an
actual educational video but I'll be right there I'll be right there okay so so
that's my my complaint against Neil Vim if you want to know and so alright what
else we got here a new follower here hey how's it going whatever can I use if I
have to develop on a remote computer like a Linux cloud machine vi the end I
just made a case for that use vi or VIM that's why you should learn it uh-huh and
the way to learn that is use VIM tutor if you want to you can use eventually you
can use VIM genius online there's open I think it's open VIM which is another one
then we kind of get you started on that there's a number of them they're all
listed on my on the VIM editors H URL that I posted when it comes to graphical
editors I always have no pad plus plus besides the other more powerful ones it
is just the fastest graphical one yeah I agree I mean no pad plus plus is really
great it I I still think no pod no pad plus plus I didn't mention at all no pad
plus plus fits between no pad and sublime I believe it is really fast but it you
know and it is graphical it's very intuitive because you're just using your
mouse and it's got a little bit of more umph in it besides the plain old no pad
particularly it understands utfa you know that that's a thing so so that's you
know you might want to might want to give that one a try to I know people that
still love no pad plus plus and and I use it for a while a long time ago but I'm
I'm pretty much a if I have to use a Windows machine and that would be the
thing but these days Linux is so prevalent on on Windows that I got you
know a Linux terminal at my fingertips I don't I don't need to use any any you
know Windows only kind of editor for any reason did I miss the 2020 dumpster yeah
it's gone what we'll do that again I'm glad it was a hit which one yeah and so
yeah thanks for the direct the the 2020 dumpster we'll come and do that again I
am gonna wrap up the stream for right now thanks for participating in our
little dialogue about this if you have any specific questions that you know you
you want to go into ask them in the discord you can ask me directly if I'm
available but but you know we have a whole discord just for this kind of
thing asking questions getting getting in there but I really really felt like I
needed to go break this down because for the rest of or Vim Neo Vim and Vim
plug-in will be a support I felt like how you do when you and then came out I'm
seeing more and more and then plugins these days yeah no they stink if you're
first of all okay I'm glad you brought that up if you are searching to use a
Vim that allows a lot of plugins if you're picking a Vim editor because of
it uses more plugins or because it's prettier you're picking it for the
wrong reason you might as well just use VS code or a graphic editor at that
point and I strongly believe in that if you're seeking to use to do plugins
instead of integrating shell scripts you're not doing it right in my opinion
you're doing it wrong you look if you're gonna reach for a plugin at least
before you reach a plugin learn how to use vi properly if you don't know how
to if you don't know how to use exclamation point and vi and if you
don't know what I'm talking about it's just making my point you don't know how
to use vi on Vim you're not in a position to make a decision about stop
using it because it doesn't have plugins and and you need to practice doing the
standard way of using Vim integration into the shell before you start punting
and looking for every plugin under the sun and for and picking a tool that will
allow you to plug in to make a plugin in 50 different languages sometimes
specificity is the thing sometimes you don't want 50 options sometimes you
don't want to have a configuration file in 20 different formats sometimes you
want limitations on your types sometimes you want strict typing so all of those
architectural principles apply to Vim you don't want too much choice you want
the right choice and that's why Python won over Pearl because it was one best
way right so my biggest complaint against Neo Vim is this idea that we
should expand the crap out of it and put whatever we want in and and rip up
rip out stuff that's been there for years and it's not just because I'm an
old guy it's because the entire approach is broken the entire architectural
mindset of the Neo Vim team is just totally bored and and I that's
that's my opinion on that I if you disagree that's fine go use it and have
fun there's lots of really respectable awesome people who disagree with me
very strongly primegian comes to mind big and bot comes to mind I'm not these
these are great people and great human beings I love them I'm really glad that
I get to be count myself among the streamers with them but there is no way
I will ever be okay with Neo Vim unless I'm presented with new information that
that contradicts what I've just told you what I see them doing is bloating the
crap out of them in ways that are unnecessary and defeat the purpose for
them in the first place the reason that you're picking them in the first place
above all is ubiquity you want to use VI everywhere you might be able to go
here and use it in fact I feel guilty using some of my vimisms but I'm okay
with it and by that argument you can almost say well fine I'm going to use
all the plugins I can I'm going to let myself go crazy as long as I remember
the fundamental navigation elements of VI and stuff so that I'm effective on an
AIX machine or a Solaris machine or anything else that I had to administer
while I was being paid to administer machines and those jobs still exist so
my point is that if you know before you give in to the to the tendency to
expand and bloat your stuff out for questionable reasons at least consider
using what's already there and that includes learning shell integration
when you learn shell integration with the exclamation point I call it VI magic
here go read this
rwxigg vi magic will teach you what I'm talking about the specific thing when
you understand how to use true vi magic then you're in a position to say well
this plugin covers something I don't have I want the groove box thing I want
whatever you know I do have plugins I do I use plugins but but I'm very picky
about the plugins because they have to be downloaded on every system I'm going to
use them on you need to make really sure that you're using a plugin manager that
can be turned off or disabled if there's if the if the plugin manager is not on
the system and all of those are things that that are not an option for new of
him if you use a new of him specific configuration you've just blown away your
ability to use that configuration on any remote system by default
you better have a damn good reason to do that if you picked them because you want
to be able to use it on multiple systems and I don't think there's ever a decent
enough reason for that vim however is everywhere so you can actually port your
you can scp in one command your vmrc over to any other system use that edit your
files over there without a problem if you've used neo vmisms in your vmrc and
haven't done it properly you've just blown away your ability to customize any
remote system on the fly because you cannot install neo vm on that cloud
machine without approval from your higher ups that for another change ticket
just say no to neo vm i'm telling you say no vim is the is the standard editor
for this kind of thing uh and if you do go with neo vm be damn sure you know what
you're doing make sure you know how you use the shell make sure you know that
those plugins need to be encapsulated in some vmrc uh code that keeps them from
being unusable on a remote system and if you don't know how if you know anything
about what i just said you have no business using neo vm but the reason i
get so spun up about this is because they hear from somebody on some switch stream
or somewhere that they should just go through that on they end up throwing it
on and they destroy their ability to be to be a performant you know administrator
and developer on a remote system because they somebody told them neo vm was the
thing that they should use i spoke in my piece i think it's probably enough for me
i think the plugins are an interesting aspect of how vim is growing over the years
i agree i agree and i'm not and plug is amazing right uh plug is um i mean plug
the plug is the plug i i i wish that the native plugins within vim uh were good
enough but they're not and the plug plug in manager is amazing it keeps all your
plugins in a separate directory uh if you look at my vmrc by the way i'll send
that to you guys if you want to see it uh it's in rwx.gg uh i'm sorry it's uh
it's in my git lab so just go to artybex live uh artybex rob.live and click on
github or git lab you can go to my dot files and you can go find my vmrc if you want to
spelunk it and by the way it is very common it's a common rite of passage to to steal somebody else's
vmrc and and to just use it and understand it but make sure you go through the lines and
get a sense of what it's doing because everybody's is highly customized and it's actually it's kind
of a rite of passage to be a terminal user to do that uh along with you know understanding your
own bash rc uh not to mention a full-time hobby just playing with your configuration i i cannot
get enough of of of that i constantly love tweaking my terminal config it's it's really fun i enjoy
that more than messing with my operating system uh people ask me all the time well what manager
you're using i have window managers and goes whatever one is going to get me tmux because
i don't care about the window manager i have a pain so there'll be other videos on that i have
already done some videos about it but i'll be redoing them um these videos are all going to be
edited polished and you know scrubbed and put up on vimeo for subscription if you'd like uh
but the raw youtube video that i just made here will will remain standing for as long as youtube
allows it to stay here and i really appreciate you guys coming by and spending some time here
and uh i'm going to go ahead and i think we made that through that pretty well didn't we guys we
didn't argue too much by i'm going to come back in uh 10 20 minutes and we're going to
do some more web development
so
