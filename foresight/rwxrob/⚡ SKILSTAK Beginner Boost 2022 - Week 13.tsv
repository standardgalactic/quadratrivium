start	end	text
0	5660	Start recording. All right, we're recording for the beginner boost today. As you can tell, I am very casual today
5660	12500	I am supposed to clean my room and I've been playing all weekend and went out and had sushi and watched jazz last night and
13980	18420	Before that went to the art show and stuff. So that's on the VODs
19300	21620	What are we doing today though? What do you hear? What are you here?
21620	28660	You're here because you want to know how to configure your dot files and that is what we're gonna do week 13
28660	30660	What an appropriate number
31300	36240	To do your Linux dot files. And so we're gonna talk about well, what what is the dot file?
37220	42020	Where's the name come from what it what which ones do I care about how many of them are there?
42380	47340	What's the standard and this is an essential part of understanding Linux?
48620	50620	Or Unix, you know
51140	57260	The Unix standard does sometimes apply but not not always and so we're gonna we're gonna go over all that
57260	60300	So the first thing I'm gonna do and we already did this like four or five weeks ago, right?
60300	62460	We we went through kind of like a speed pace
62460	66260	We went through all the configuration files just to kind of talk about the file system
66260	71740	We were talking about the organization of the overall file system of Linux and we really don't have other than that
71740	76420	Dave or we kind of went through that. We really don't want to spend a lot of time explaining to you
76420	78760	What every directory in all of Linux is for?
79860	84140	That wouldn't be a boost that would be you know a full whatever, you know
84580	87380	Comprehensive coverage of the whole thing. So we're not gonna do that
87380	91660	But we are gonna talk about everything in your home directory and that's super important
92180	97660	We did finish bash coding scripting yesterday or last not yesterday, but last time
98380	100020	so
100020	106260	And that was a prerequisite you really can't do any configuration until you know how to write the code
106260	111240	So one of the best ways to get practice with with bash is to actually write the bash
111560	117380	Configuration file, which is also written in bash and so we're gonna jump right in and talk about all that
118280	123300	We are gonna go for four hours today. So we'll be taking breaks as we go, but but beyond bash. So
124560	129440	Let's talk about the specific files. We're gonna cover. Okay, so we're gonna say we're gonna do
131000	132520	shell
132520	134240	bash
134240	139400	Shell configuration and we will talk about how to configure other shells a little bit
141280	143960	Just so you can know if you like around a Mac you see stuff
143960	149200	It's different, you know why which defaults to Z shell we've already, you know talked about that
149200	151200	We've already bashed Z shell enough
156080	161600	And we already know how to use them we did that we covered that y'all should know that so we're gonna talk about
162120	164120	them configuration and
164840	166840	We're gonna talk about
166920	168920	Actually, we're gonna do X
169280	171280	slash
172240	174240	Vi
175240	177240	Slash
177240	178920	Vim
178920	181480	Configuration we are not gonna do anything besides that
182520	187880	We are gonna do T-Mux configuration. So we covered T-Mux utilization
189320	192560	But we didn't cover T-Mux configuration very much and
193400	195400	And
195760	200640	So these are the things that kind of go together bash vi T-Mux and
203160	206440	We will configure a few other things
208000	210000	So like your scripts directory
210760	212760	right and
213400	219520	So you can start writing scripts and you know use them and thing and what else we need to do
219760	224480	We probably will do links and or w3m
226560	228560	So you can use those
228880	230000	And
230000	233080	We already talked about that but we're gonna talk about after that and
233760	237920	I mean once you have those things you're pretty much gonna have everything on the terminal that you need and
238200	242160	The real important ones are these three the bash vi and T-Mux
242520	248520	Because those are gonna give you files that you can transfer as a single file each one a single file
249080	250760	into
250760	255920	Any system that you're ever using so if you get on a container, and I'll show you how to do that using SSH
257000	261680	We did do some SSH configurations. So we should probably put that in there
262560	263760	I
263760	268960	Mean I think you already have that but we should refer to that. So it's really important that we talk about that one for security purposes
269280	272440	We're not gonna be doing GPG today. Okay. I
274360	277720	Mean I don't I don't know maybe we should do GPG today
279320	285240	Because we have to do get up eventually, you know, we'll save GPG from when we do get up which will probably be next week
288280	295560	But I would I really want to get through all this today if we can because I just want all the configuration settings in here
296040	298680	kind of kind of talked about in one day and then
299200	303480	Y'all can go use it and configure your own VM. Let me just remind you
304280	310040	That the VM that I'm using that has all of my own configurations in it that we're going to be going over today is
310640	312560	in github.com
312560	313760	rvx-rob
313760	314760	boost
314760	320320	VM and you can install VMware player or VMware workstation pro if you want to buy it and
320520	325800	You can put that VM that I'm using you can use this exact same one. We've covered that already in earlier days of the boost
327400	332840	So but that's I'm saying that because you're gonna want to know where to get all that stuff and that's where it's at
334280	337680	So again, these are the things like when I when I install a system
337680	341720	They're the first things I put on so that everything just works, right? And
344280	347640	I'm we should probably talk about I
348440	351040	Mean there's we're not gonna talk about it. I
353000	356080	Want to talk about git I want to talk about github. I want to talk about a bunch of us
356240	360360	But we're gonna save those conversations for when we talk about those tools
363480	365480	I have a question for the for the group here
366440	370800	Should we cover and this is my style. I would do this if I were teaching in person
371360	373360	should we cover
375520	378760	Get and github before we do go programming or after
381200	383200	Because if we do it before
383320	388600	Then we can use it to do our commits to our go code as we are working through it if we do it after then
388920	390660	We can kind of retroactively do it
390660	394540	But we there's a there's a chance we're gonna lose our our code along the way. I
395260	400020	Think we should probably do it before but it's so it's not fun people don't like it
400020	401900	They you know, they just want to get coding, right?
403100	406060	Before would be helpful for go commits. You think before all right
406540	411140	Well, we'll go ahead and and and do it before I think you're right. I think we do need to do it before
412020	417540	All right, so that's at least you know another week of stuff that we have to do before
418540	422580	It's definitely not fun though. And that's why I don't I mean, you know, I
423420	429420	I'm gonna tell you right now being a boost and all we are not going to do. Yeah. Oh, it's absolutely safe your butt
429420	432580	Oh my god, it's saved me so many times. All right, so we will do that
433540	438500	Next week. All right, so so next week. We'll put that down here
439780	441780	Next week
442140	446580	We're gonna do I want to put these all here we're gonna do that means we're gonna have to do GPG
447180	451860	Let's actually save SSH for that same day and that I'll get us through this nice and fun
451860	456060	We'll have a fun day today and then we'll do SSH and GPG config, right?
456820	458820	and then we'll do get
460140	462140	We'll do the GH tool and
463020	465020	We'll do get hub and
466300	471980	We'll talk about we'll talk about all that that that's gonna take a full, you know, a four-hour day all by itself
472980	477220	So that I think that's good. Let's do that and then and then the week after that
478340	479700	I
479700	484500	Think we're pretty set to start coding after that and go
485380	488500	Again, the whole this is very loosey-goosey because I like to
488900	491900	Work with a group and see where they where they want to be and what they want to do
491900	497060	I've changed entire classes from from Java to go on the whims of the people in the class
497820	501500	That's six weeks to set up emacs. No, we're not we're not touching emacs
501500	505380	If you want to touch emacs or VS code or any of that you're gonna have to learn that on your own
506660	510700	Because I mean, you know, that's not hard to pick up that none of this is really hard to pick up if you spend time with it
510700	515980	But but but yeah, all right, so that's a that's kind of our goal for today
517580	519580	I'm gonna put this is the read me and
520980	524180	We're talking about configuration today not necessarily usage but
525020	527020	As we go we're gonna cover that as well
527540	532020	All right, so the first file that we need to talk about is the bash receive us
532020	536440	Let's talk about the home directory. So let's cd enter which takes you into your home directory
537220	540420	And what does the tilde mean? It's just a little bit of a review
541220	544020	What does the tilde mean the tilde means are in your home directory, right?
545780	548140	The review of the prompt this is the active username
548900	550900	This is the machine. I'm on
551020	556100	This stuff is all represented in an environment variable called ps is a ps or ps one
556620	560980	There's my ps one. This tells me everything. We're gonna go through these really quickly
561860	564180	as usual if you want a full
565940	572460	Explanation of bash the best place to go is the man bash and I strongly strongly encourage everybody listening to this
572980	579220	Including the veterans to go through all of the bash man page beginning to end at least once
579860	585260	Right because there's stuff in there that you may not even know exists like for example completion
585500	590380	You can do completion with one command instead of writing a separate shell script and people don't know this because I haven't read it
590780	593100	So it's not covered in any books or anything
593740	598260	So so there you go. You can go look at that and and know where to go to look for stuff
598820	603140	All right, so I am in my home directory. So if I type tree you're gonna get a lot of stuff
603140	606900	I don't want you to see all of that stuff. That's like all my get commits and stuff
607780	612060	And as you I mean, let's just do find dot
613020	615020	depth one
615540	617540	Whoops
617540	619540	Past must be presided. Oh
621260	624780	By what did I do that right is it depth I thought was depth I
628860	634260	Have to look at my thing you guys know about this so if you don't want to list everything. Hey, thank you for the fall
637780	640500	I don't remember my depth command again go look at max depth
642180	644180	Yeah max depth, I think it is
646140	648140	Max depth one. Yeah
648940	654140	All right, so this tells you everything that's in the current directory. Okay, so let's let's just do directories though
656140	661460	Let's do find dash type TD find as your friend my friends
662060	663260	Uh
663260	671140	Warning you have a global max to find the arguments type bookable options are not positional max of effects test specific specified before it as well
671140	672460	Okay
672460	679260	All right. Well, maybe I should do it like this then instead that make the warning go away. Okay, so here's everything in there
679260	681260	If we do a max depth of two
682460	684460	You can see like two layers
685380	693820	So, I mean, there's lots of stuff in here and we're gonna talk about what's in here, but the reason it's called dot files is
697340	699660	So we'll say covered
703700	705700	Covered
707660	709980	Why are they called dot files
710500	715580	Pipes, yeah, we did that we did pipes
719380	721460	Yeah, we did pipes and filters and stuff
723060	725900	I'm pretty sure we did that didn't we we did that last week
726540	729820	How to read use reading we did read IFS and all that stuff
731220	734300	We didn't do different the pipe file type we didn't do five-folds or anything
735100	737100	So why are they called dot files?
737540	740980	They're called off I was gonna be without and what does a dot do?
743060	747580	What is the dot use use initial
748380	750380	dot to
750460	752140	hide a
752140	754140	file or directory
754500	760660	So that's why we use the dot to hide things. Okay, so so normally when you're listening in here
760660	764060	You don't see all that stuff right if you do want to see them. What do you use?
765060	767060	L s dash L a
767820	769820	to see all hidden
771140	776020	Right, you could also use find and I just did that right so you could do L s dash L a
776740	783220	You see all your files there and you see some of them are redirects and we're gonna talk about that and that's a that's a
783700	787740	Way to manage your dot files. I mean we don't we're not gonna don't worry. We'll get there
788300	790700	But just so you know dot files means
791300	795940	Hidden right so that it's not shown. It's not in your face all the time
796500	800500	L s dash L will give you the long version L s dash a will give you just others all the files
800500	802500	so there's lots of them there and
802940	809060	The colors represent different, you know, whether they're a symbolic link or their directory or just a file
809860	815620	I have to be careful here because I mean I haven't put anything in there that I need to be careful of except for the SSH directory
815820	817820	Which we'll talk about next week
818060	823220	But the thing to note here is be careful
825500	830060	Who you know who you show
832140	834140	Your dot files
834140	835580	to
835580	841700	It really depends on the dot file most of the time it doesn't matter and I all of my dot files
841700	845800	By the way, if you want to see any of mine are in my dot directory
846040	851360	Which is on github so you can go in there and you can study it offline if you want to
852040	857160	Art of X-Rob slash dot and that includes my scripts and stuff like that. So I
859120	863640	Mean so how let's talk about how should I manage?
865440	867240	Manage my
867240	868840	Dodd files
868840	870400	So there's lots of ways to do this
870400	875360	I've seen streamers talk about tools that they install to help manage your dot files better and everything
875880	882080	I don't like any of those techniques. So my favorite technique is to
883000	885000	Put your dot file
885560	887360	Into a git repo
887360	891480	Which we will do next week. Okay, we're gonna create the dot file directory today
892480	897840	And we're gonna put our stuff in there, but and we're gonna symbolic link it and all that but we are not going
898600	904920	To you know, we're not we're not gonna make a git a repo for you not this week. Okay, so
905800	911760	See see here. I have like all my dot files and and you can choose how you want to organize them and we're gonna go through all that right now
911840	913680	All right, so
913680	915480	And I'm gonna show you how I do it
915480	919480	But of course you can do it however you want I've had you know
919480	924840	There's streamers who take strong exception to the idea of writing your own setup scripts to do your dot files
924840	926960	I'm like, why would you need a tool for that?
927600	932240	That's what shell scripting is for so I want control of it. And so I do it that way
933200	934800	I
934800	939200	Mean any there's a couple of things about the dot file organization that we need to cover before we leave this
941160	943160	So
945160	949400	Let's let's talk about that a standard
952560	954560	Expected right
957440	960840	Content I guess files and directories
962360	965760	And this is kind of gonna be I
968320	970320	Don't know how to do this
970920	973880	Let's make it its own section. Okay, so there
975000	977880	So let's let's just start start right off the bat
977880	983040	I'm gonna give you an overview and then we'll go in and then we'll start looking at them. Okay, so profile profile
984080	986080	What is profile?
986280	988280	right
988680	990680	profile is
990960	997360	Used this is the boost. Yep. This is a boost episode even though I'm being like chill
998280	1000280	so
1000520	1005640	So boost I'm actually live in case you're wondering so profile is like
1006560	1008560	original
1008560	1010560	login
1011120	1013120	Script so
1013280	1016840	What is the dot profile file? Let's see how they say it
1018280	1020280	What is the stream title saying right now?
1021400	1023600	Well, yeah, let me change the stream title. I'm sorry
1025040	1029220	Yeah, let me change it. You know what I've gotten used to not doing that because these days
1029220	1031720	I don't need to change the stream title
1033000	1035000	because
1035560	1038960	I'm just recording it. So thank you for the reminder
1041280	1043280	We are week 13
1045120	1047120	Thank you for the reminder
1047480	1051000	Let me change it really quick
1052040	1054040	We're still in just chatting to you
1054520	1057040	We should go in software and where's the science and tech
1058480	1060480	We're in science and tech. This isn't software
1061880	1063560	Linux
1063560	1065120	MA. Yeah
1065120	1066440	done
1066440	1068440	How's that?
1069000	1073080	Sorry about that everybody as I said, I'm very informal I
1074080	1077280	Said a dash a for what?
1079840	1081840	For listing
1082840	1084840	What are you talking about
1086760	1088920	No, no such else fine
1092840	1097280	Does it I mean I've never used it is that is that a positive thing as well I
1098600	1100600	Mean let's test it
1100600	1104120	This is why we have a team of people here are watching me so we can check it
1104120	1106640	Let's go to busybox to see if it supports actually that was the alpine
1108480	1110480	Run
1110800	1113400	RM we'll do is whatever alpine has hey
1116320	1117880	Alpine
1117880	1121360	Alpine is a container that has a minimal unit distribution in it and
1122480	1125080	So LS dash capital L. Okay, cool
1125840	1129080	Never used it not not a thing that I ever used really
1130840	1132840	Let's see go back home LS dash
1134000	1136160	L L L nothing there
1138680	1140040	Interesting
1140040	1145200	Yeah, I I don't know I've never used it. So but yeah, it's cool. Sounds like a good option to use
1147680	1156040	Okay, what is profile so profile and in Linux is I mean I when I list I want to see everything so it's probably why
1157040	1158240	Um
1158240	1164680	Profile extension issues for files in the terminal programs show profiles by Linux and macOS terminal program contains definition for shell environments
1164680	1167960	Such as environment variables. This is a horrible answer
1169640	1171640	And how do I open it?
1172240	1174240	No
1175760	1180920	So I know what I want to say, but I want to see what other people are saying about it
1181920	1186120	So I'm gonna go ahead and say it so the profile is
1188400	1195920	What controls you logging in right it's for logging in and there's something we probably need to talk about here really quick
1198520	1200520	So there is
1202680	1204680	Difference between
1206480	1208480	Login
1208520	1210520	And
1211720	1213720	Login let's see
1214440	1216440	Login shell
1217120	1220040	All right, so what is the login show we're gonna have to talk about this so
1220880	1224200	There are log in slash interactive, right?
1226840	1231200	Now who does anybody want to take a stab at talking about the difference here
1232200	1236320	In order we have the knowledge to cover this because we've already talked about
1237040	1240400	Sub shells and sub process anybody remember what those are?
1241520	1246320	So this isn't this is gonna be important because it's the first thing in the bash RC file when we get into it
1246560	1251880	So when I run a shell, so when I start a new bash program
1252400	1256320	It runs a new interactive shell because it knows it's got a terminal and everything right
1256560	1263280	But when I run something in the background and we haven't talked about backgrounding processes or anything like that yet and bash
1263280	1265280	And we probably should have talked about that
1265560	1267560	I
1269120	1272800	Don't know if that's a boost topic or not. All right
1275200	1279680	Suffice it to say that when you like run ps3 you might have to install it, right?
1279680	1282560	If you have to sudo app install ps3, right?
1282560	1286400	So this shows you everything that's running on the machine as you can see we got system D
1286400	1293680	There's running as a top and and then we have all the the the the programs that run under that these programs are all executed
1293680	1295680	using a syscall called exec and
1296720	1300800	Ultimately, they create this parent child hierarchy relationship, right?
1301360	1304320	That's kind of thing exists all over in in you know
1305040	1309840	In this and you can see there's my tmux server and I have bash and bash is running links and stuff, right?
1309920	1312160	And there's my bash process running ps3. Okay
1313440	1316160	Well, what happens when you have a bash?
1316800	1318800	That's running another bash
1318960	1320400	right
1320400	1326000	Then you have a situation where we talked about exporting variables and all that. I don't want to cover that again
1326720	1328240	but
1328240	1330240	The difference between interactive shell
1330960	1332640	and a login shell
1332640	1338160	Or I mean a non login shell login or interactive. I guess of the kind of the same or technically not. I mean there
1338960	1346320	There's yet another situation where you remotely connect into the shell into the machine and that is yet another thing
1347040	1351120	Um, that will that will run if you make a remote connection into the machine
1351760	1354640	so you have these sort of three states of
1355360	1358320	Bash or frankly anything running on the system you have
1358960	1364800	Some a shell where someone has interactively like connected and and that's going to show you like
1365840	1368000	Look at all those tmux processes that are still running
1368880	1374640	Um, so like you remember I I I'm I'm ssh'd into this so technically I'm remote
1375520	1377280	Uh, would be who?
1377280	1382800	Yeah, so here's all my tmux sessions and it shows that I came from that machine and the ssh'd in or whatever
1383680	1390560	And and then you have just an interactive shell that maybe was started by another login shell
1391280	1397520	Uh, I think yeah, you have remote shell non login and login. That's a good way to put it. Thank you and
1398640	1402960	Interactive just means that you can type you can like interact with the shell, right? It's not
1403600	1409280	Running behind something it's not running because some other programs started it or something and
1410080	1414640	This becomes important when you're doing things like like in my my my bonsai command
1414640	1416720	Which we're going to write we're going to write some bonsai and go
1417440	1420880	And I you can see how the colors are all here and everything, right?
1421440	1425760	That's because the program that can detect that it's in an interactive shell
1426560	1429840	That the that the output the standard output is to a terminal
1429920	1434800	That's how you detect this by the way the way to detect that you are using an interactive
1435520	1440080	Uh slash login shell is that the standard output is going to
1440960	1444560	Uh a terminal if it's not going to a terminal. It's going to a program or something
1445040	1447680	And and the that's so you can do things like this
1448080	1453440	I can see that the colors are not there now, right because why I I sent the same exact output
1454000	1457760	Uh to a program to a pager more which is alias to less
1458400	1462960	And and now the colors are taken away and the reason for that is so that if I wanted to output
1463600	1466000	That the output of that command to a file
1466080	1470800	I wouldn't have all those ugly, you know color escapes for the for that in there
1470960	1473520	And that's a that's an important technique that's used all the time
1473920	1480960	But I'm I'm showing it right now to illustrate that an interactive shell or an interactive terminal or a login terminal
1480960	1482960	Which are kind of the same
1483760	1486640	Is you know one that the the output
1487520	1491680	Is going to a terminal and that's the best way programmatically to determine that
1493360	1499360	I believe that dot profile is the one that runs all the time no matter what it always runs, right?
1499760	1503760	So you kind of have to have a dot profile even if
1505200	1507200	In fact, let me try it without it
1507520	1509520	Let me let me try it. Let's do some experimentation
1509840	1513600	Let's go back into here and let's actually move my dot profile out of the way, right?
1514080	1516080	Let's move it to dot old profile
1517360	1521440	And so now I have no profile, right now. Let's actually log in
1522000	1524880	Uh from Anton again. I'm going to have to go out here
1525920	1527920	And make a a new screen
1528320	1533440	So so this this is robbit tv. This is this is my git bash terminal running on windows
1533920	1537120	Not wsl windows. This is git bash running on windows
1537600	1539600	So I can ssh
1539920	1546080	If you want a bash like environment, your bash is by far the best and you ssh into Anton
1546480	1550720	Which is the name of my system and it gives me normal stuff
1552400	1554400	And it says
1555040	1557040	Well, it's kind of filled the screen there. What's up with that?
1557760	1559760	All right, so so as you can see
1560960	1566080	That still worked and the reason it worked is because my shell is bash
1566880	1568880	Right, so
1569040	1572880	It knows to run another file in here, which is called
1574560	1576560	Dot bash, right
1577600	1581840	That dot bash, uh, I think profile or bash rc
1582480	1586800	So bash profile, uh, is let's go actually take a
1587920	1589920	Let's go. Let's take a look at
1590960	1592400	Um
1592400	1594400	Another account here
1595360	1600640	I want to take a look at a brand new account. Actually, let's do that. Let's use a brand. Let's don't use mine. Let's use a brand new one
1602160	1604960	All right, so so now well
1609200	1611200	I think we already configured this one, didn't we?
1612560	1614880	No, I did ssh. That's why so it should be fine
1615600	1617920	So if I look at dot profile, what's in there?
1618640	1621440	All right, so this is what becomes in your dot profile file
1622160	1624160	And it's usually really bad
1624880	1627520	The profile executed by the command interpreter for login shills
1628400	1629760	So
1629760	1631440	The file is not
1631440	1636720	Read by bash if bash profile bash login exists. Okay, so bash is unique
1637280	1640080	Um, if you're on older unique systems that we won't get into
1640720	1643280	uh profile becomes important because
1644000	1646320	Uh, particularly if you're like running on mac
1646880	1648160	I'm pretty sure if you're running mac
1648160	1652240	If unless you're running your back even if you're running bash is you're making sure they're still needed. Um
1653200	1654560	And
1654560	1656560	Is it good to have this file around?
1656880	1659600	Yeah, it's probably good to keep it in your collection
1660000	1663120	I've never had it had to need it when I go work on a remote system
1663440	1665440	I just copy over my bash rc file
1665760	1670240	And so one of the the goals that we're going to talk about is how to make all your stuff in a single file
1670560	1673680	Instead of having it in bash profile and bash login and all over the place
1674240	1675280	um
1675280	1677280	And so bash rc so
1677920	1686400	Bash rc is meant to run anytime you have any bash program execute whatsoever login remote or anything, right?
1686960	1688080	um
1688080	1690080	Bash profile and bash login
1690480	1696640	Are supposed to be only for login shills, right? And uh the default mask is an etsy profile
1697760	1701600	By the way, if you want to change where this comes from you can go look at that, right?
1702320	1706320	Uh etsy profile is where all this stuff comes from for the whole system
1707120	1710880	Right, this is this is where it copies this over for everybody
1711680	1713120	um
1713120	1714400	and
1714400	1719280	So I I don't want to go too far down that horrible. It's a pretty big rabbit hole
1720000	1723600	It suffices to say it's annoying as hell to have to manage multiple files
1724400	1728800	So the region so what I would suggest is that
1729840	1735520	You just put everything in bash rc and I'm going to show you how to do that. Okay, so
1736640	1741680	Like right now if we log we log in actually, let's do this. Let's let's actually log in
1742320	1748800	So you can actually log in from the command line to another account as if you had remotely logged in using the login command
1749360	1753360	Uh su uh su dash does the same thing essentially
1753920	1756880	um, but so we're going to do login. Let's log in as the boost account
1757680	1758960	and
1758960	1760960	Cannot work without effective root
1761600	1762960	all right fine
1762960	1764960	su do login
1764960	1766160	uh
1766160	1769680	Called by bash rc and can keep bash is clean. I don't I don't agree with that at all
1770640	1774320	I hate that approach. I I've read that so many times and I hate it
1774800	1779840	Bash aliases is supposed to be for bash aliases people who put a full blown bash rc and our bash aliases
1780480	1782880	Are not doing what I would do
1783760	1786400	Uh, I don't agree with that, but if you want to do that, that's fine
1787120	1792560	People think it's fine and they'll leave there the only time that would make sense to put anything in your bash aliases file
1793040	1795120	would be if you wanted to keep the
1795840	1797840	uh dot bash rc file
1798480	1802960	Unmodified and you or for some reason your multi user system has locked down that file
1803520	1809360	Uh, I don't encounter that situation very often. So that's that's not something I recommend
1809520	1811520	That it made a lot of people recommend it all the time
1811840	1818720	So I just want to say I find that really annoying mostly because it's a misnomer. It's not a bash aliases file
1818960	1822000	It's like everything right so my preference
1822160	1826480	By the way, when you're doing this you got to be careful to do it with this with an extra account
1826960	1831120	Because or to keep the other file around because you can keep yourself from logging in
1831760	1833920	Uh, if if you're not careful, so
1834800	1840240	You know, but you have a vm. By the way, how do you go take a so we take a snapshot of our vm?
1841120	1843680	You can go take a snapshot of your vm if you if you're scared
1844720	1846720	Right, that's why we're doing vms. Let's do it
1847200	1849200	Let's go into
1849200	1851200	um
1851440	1853840	Maybe in our workstation pro or whatever yours is
1854720	1860800	And where are you my friend? Okay, here we go. And so we're not on the ssh endpoint. We're going to go find
1861520	1863520	Our other one. We're going to go to anton
1864080	1866560	And I am going to take a snapshot
1868080	1873520	File where is it? It's vm snap snapshot take snapshot
1874400	1877920	All right, and we're going to do take snapshot snapshot one
1878480	1881840	Boom. Okay. Now you can always go back to that later if you need to
1882720	1887680	Uh, we are running right now. So this might make us a little bit slower for a second
1888800	1890800	It's really lagging. Oh my god
1893200	1897760	It's a pretty big image, so I don't know we might crash. I hope I don't
1900400	1902400	Uh
1902640	1909120	Yeah, you know what, you know, I forgot to pause it. I forgot to pause Anton to take a snapshot
1910080	1912080	You should generally pause it before you do that
1914240	1916240	I'm kind of curious to see if it's even going to be able to do it
1918880	1921680	My uh, my fan is sure moving fast
1924720	1926720	Yeah, I did a lot of around there
1928160	1930160	I hope I didn't break it
1932720	1936560	I was at a grub arg
1938160	1940160	Because we finished. Oh
1943200	1946000	When is command jake command no, I'm not doing that
1947360	1949360	Um
1950000	1952640	In it bin bash interesting. Yeah
1953360	1958240	Yeah, I we don't play with grub because we're using VMs right now, but you could do that if you wanted to
1959200	1963200	Um, yeah, that would be more for like if you want to which I want to do by the way
1963200	1966720	If we have time not in this booth, but later on I make it so
1967600	1969760	We can talk about how to make your own Linux machine
1970640	1974560	If that's what you want to do, uh, I'm not I've done something that I do anymore
1974960	1979600	I am going to be installing Linux on a bunch of other stuff. We're getting kind of foggy here
1981760	1983760	Yeah
1983920	1985920	Get back into a VM
1986720	1988720	Yeah, I feel like I might have broke this
1990960	1994080	I might have broke this by taking a snapshot. It usually doesn't do that
1995920	1997760	Well
1997760	2001120	I should have I should have stopped the image engine before it's taken a snapshot
2001680	2007040	It's trying really hard to do it with all this processing power going on and it's kind of lagging my community up if you're up
2009360	2011360	Yeah
2012320	2019680	We are definitely breaking I know we're breaking because I this is a huge VM
2024480	2029680	Yeah, it it's a huge the machine doesn't have enough memory is the problem
2032320	2034320	Uh, I don't have to stop it
2034320	2036320	Okay
2062080	2064080	Shut down
2064320	2078320	Client loop. We got a client loop. Yeah. Power off.
2078320	2090320	Are you still there?
2090320	2105320	Taking a snapshot is supposed to take a snapshot of the VM, but you need to have the VM paused or stopped to do it. I can't believe it. Let me do it. I made a mistake.
2105320	2115320	Yeah.
2115320	2131320	Yeah, I broke it. And then my host OS is having all kinds of problems because it's running out of RAM.
2131320	2152320	So because I turned up the RAM on my VM and it's trying to swap it all out, which is really bad.
2152320	2179320	And I think about bash OSes.
2179320	2194320	Yeah, it didn't have enough RAM. I had to free up some apps to give it the RAM. That's why it was failing.
2194320	2198320	Now it's fine. It's fine now. I had to free up some RAM.
2198320	2204320	Yep. All right. So we're back. We should be back now. Sorry about that.
2204320	2215320	The reason for that, in case you're wondering, I know exactly why that happened. I just forgot. First of all, number one, I forgot to pause the VM, which makes the saving faster.
2215320	2226320	And number two, I've allocated eight gigabytes of RAM to Anton because I want a nice smooth experience.
2226320	2242320	So taking a snapshot of an eight gigabyte memory image on a 16 gigabyte system that's running other things at all causes lots of like pain and suffering on the part of windows.
2242320	2251320	Or any computer, frankly, because it didn't have it and it didn't swap it very well. So as soon as I cleaned up some of that memory and got rid of those other applications,
2251320	2258320	both of them electron applications, by the way, Discord and Spotify, which take enormous amounts of RAM.
2258320	2267320	And as soon as I cleared it, cleared up that RAM, I had enough RAM for VMware to finish the snapshot, which probably would have done even without me turning it off.
2267320	2275320	But I'm going to go ahead and turn it back on. I actually have a command for that. We already have a snapshot now taken so we can do that.
2275320	2283320	So if I want to turn it back on, I have a command here called VM run Anton.
2283320	2293320	And that's a script I have. And that will start up Anton and then we can ssh back into Anton as soon as it comes back up.
2293320	2302320	And that does it headlessly. And we've covered about how to do this stuff in other booths. So I don't want to go back to it, but that's kind of a fun.
2302320	2313320	You have to write your own VM run command. It's waiting for it to come on. You guys want to see which one it is.
2313320	2318320	So this is what's in there. Oh, whoops.
2319320	2335320	Oh, it's just a, okay, there we go. So VM run is just a, is just a function that I added to my bash RC file in on my Windows machine.
2335320	2345320	And so it runs VM run and runs the headless no GUI for this. This is actually a really good thing to have.
2345320	2354320	I did, I think we cut and paste that into other, other stuff, but I kind of want to put it in the notes as well.
2354320	2362320	Again, once we get there, so ssh Anton, Anton should be up now. And that's because we set up our ssh config, which we did a while ago.
2362320	2372320	And so now we are in here again, we're in the home directory, and we'll just run the Tmux from here.
2372320	2386320	And we should be good. All right, so let's see here though, I do want to go to the boost again really quick and go to the 13 read me.
2386320	2396320	I want to put that a little bit of code in there.
2396320	2407320	VM, actually, let's, let's put it a separate file, because I want to cut and paste that into the, to the docs.
2407320	2418320	Tmux, actually, no, because it's a, it's a function.
2418320	2434320	So, so yeah, that's a windows thing. Now, I do kind of want this, in fact, in fact, I'm probably going to add this to my bash RC file because, and this is leading into another thing I want to talk about, which is conditional evaluation of stuff in your bash RC.
2434320	2445320	So, even if you can always use init equals bin bash to get back into Linux without a snapshot.
2445320	2456320	Yeah, but I wanted to save the changes up to that point. So, okay, so we've got, we'll call this and read me again.
2457320	2465320	And we'll go back here. And we're in the home directory. All right, so dot profile.
2465320	2475320	By default, if you want to look, and the master makes a good point, if you, if you want to use all the defaults, you can do that if you want.
2475320	2483320	Right. And you can just put everything in the bash aliases file. I don't particularly like to do that myself. But if you want to do that, you could with bash.
2483320	2492320	Okay. If you want it. Now, the way that I've configured mine is that it works at one point. I think I actually have broken it since then.
2492320	2503320	At one point, my bash RC would work with politics shell and bash and a bunch of other stuff. But I've since changed it. So it's pretty bash, bashified.
2503320	2511320	It's also no longer generic. And so let's talk about, let's talk about organization of files again for a second.
2511320	2525320	So, so you have, you have this profile, we talked about the interactive thing, right? And you have the login or slash interactive, and then you have remote, which means you came from outside from someplace else.
2525320	2539320	And those are the main ways. And then you have non interactive, which means stuff is running, but there's no interactive terminal and that includes scripts that are being called from, from other things.
2539320	2550320	Okay. And we're going to, we're going to jump right into the bash RC file right away on that. And you can decide whether you want to do the, but let's talk about the organization a bit.
2550320	2560320	So you have the dot profile, which is just kind of there, you have the bash profile, which executed if you have bash, the bash history file, which is created.
2561320	2571320	That's the thing that, you know, when you do your set dash OVI, which we're going to talk about, you can navigate through here and check the lines out, you can even go to a line.
2571320	2584320	If you, well, no, I guess you can't. That was, I guess you can't. I thought you could. Anyway, so bash profile bash RC. And then we have some standard directories and I want to put these in the read me.
2584320	2609320	Okay. So we have, I'm just going to put these out here first. So we have dot config, standard, say, user slash local, local means, usually just for the user configurations for different applications.
2609320	2628320	And go, by the way, this is called the US OS. I think it's user. It's not user. It's user config. I think it is. I guess user configure.
2628320	2648320	Let people know this. So I'm going to show you how to get to it. There we go. User caster, user configure and user home. Those are the, those are the main ones. So user configure.
2648320	2665320	So this is a standard across, it's set by the, the open desktop. And we have cash, okay, is your local cash. Now what is cash?
2665320	2686320	Cash is cash is where you write things temporarily that are meant to be to go away. So like your browser cash or, you know, things that are that a program wants to use and have it be there for next time, but might throw it away.
2686320	2699320	And that contains sensitive data like tokens and things like that. So you don't want to make that public. There's another one couple here that are that don't have, they're not part of an official standard.
2699320	2720320	And this localized is just a localized tree similar to slash. So this is something that has kind of taken off recently, which recently being like five, six years or so, which is, which I find very, very nice.
2720320	2739320	So if you want to, instead of putting something in like user bin, which is, you know, you guys know user bin is right. User bin is where we have all the programs and stuff, right. So let's say you compile some code, you know, you could, at one point we used to put this in, you know, bin, right.
2740320	2761320	And at one point we used to have, you know, TMP and, and that kind of thing and we would put them, you know, as a old, old school place to put localized biners.
2761320	2775320	But this has since changed to be like, like this is your local bin, modern place to put localized binary executables.
2776320	2798320	So, you know, I used to put them in bin. It's like, you know, this is like the old school place to put, to put TMP files. And, and these, these things, you know, are related to the stuff that's on the system.
2799320	2824320	What else we got? So, so we have cash, which we talked about. And if you look at the cash, LSDOT cash, you'll see we have, you know, different programs in here, I put my Z program cash in here, go Java, go build, I mean, stuff does this.
2824320	2836320	Now, the problem we're going to have is that there's kind of modernized applications and there's the old stuff. And the old stuff still does dot files at the root.
2836320	2850320	And as you can see, it's rather messy. And this has been a problem now that Linux has kind of become more prominent, because there's so many people that wanted a configuration that the dot files, I mean, this is a relatively clean new system.
2850320	2863320	I've only been working on the ads on here for kind of a couple months. And, but, but as you get going, and depending on how old the applications are, the more messy everything gets. And one of the things that NeoVim claims to fame is that they put their stuff in the right location.
2863320	2876320	Right, because they, NeoVim will put everything under dot config cat dot cash and dot local, as opposed to VIM, which uses dot VIM info dot VIM and dot VIM RC at the top level.
2876320	2895320	Right. And in GNU PG, for example, GPG, that's, that's another thing that doesn't observe, you know, these old conventions that SSH is one of the older applications. So when you are looking around in here, just know that there are kind of modern approaches to this and then there's the old approach to it.
2895320	2899320	Right. Tmux by default looks here as well.
2900320	2912320	And this is my own stuff, but, but the Tmux. So that's just something to keep in mind as, as we go through it. So those are the, the, the main directories.
2912320	2941320	So, yeah, I, we want to put here something about old school, Holmder organization versus, that's about right, versus, versus modern standards.
2941320	2950320	And it's, it's called, and if you want to know where the standard is, you can go look it up. I think it's x 386.
2950320	2961320	A desktop standard. This has become the, the place to go get the documentation.
2962320	2980320	If you want to look it up, the, they're the ones who, who kind of championed it, even though X is a, you know, is it the terminal, not a nonterm, I mean, I want to say a window technology.
2980320	2987320	So you can actually do a desktop standard directory organization.
2987320	3005320	All right. Let's go look at that x 36 directory, FSF free software directory x 36 implementation. No, I don't know what it is.
3005320	3011320	Linux directory. I'm trying to, I thought it was free desktop foundation.
3011320	3038320	Actually, there we go. It's specifications free desktop.org based or x DG cash home x DG, whatever. So these environment variables, which we'll talk about are also where you should go if you're writing scripts instead of, you know, but go has encapsulated that.
3038320	3052320	And it's looking for that base directory. If you're making new code, if you're making new scripts that are meant to be run by users, or if you're making new applications, I strongly encourage you to get up to speed on the specification for that.
3052320	3068320	And again, and on Windows, it's local app data, which is low cash, and it varies right so it's home dash cash on Linux and Unix. And this is again one of the advantages of go is that, you know, you write it and go you do it right.
3068320	3074320	It will cross compile and work anywhere and it will use appropriate locations for things. That's why I like it so much.
3075320	3084320	And so, so there we go. Well, old school home to organization versus modern standards. So just make sure you got that down.
3086320	3095320	And I think that's enough conversation about how this thing is organized. And now we're going to dive into the individual programs to and how to organize them.
3095320	3116320	So the, the first one is going to be all the stuff to log in. And we talked about this. So the bash profile, the bash RC is the most important, in my opinion, unless they don't have a bash aliases file, if you look at the standard bash aliases, or bash profile, which I should be able to look at here.
3117320	3141320	Oh, no, Etsy scale Etsy scale contains a Etsy scale is an exact duplicate of a new user's home directory. So if you put anything in Etsy scale, adding to Etsy scale for all new users.
3141320	3147320	If you add anything in Etsy scale will automatically be added to everybody else. So it's also a good way to go back and see the defaults.
3148320	3157320	So let's say you screw something up and you want to revert. Yeah, you can go back to the skill. And, and you can go check it out.
3158320	3164320	So this is one of the reasons I don't mind just using my bash RC because if I needed to revert, I can go back in here and see it.
3165320	3170320	Bash RC. So this is a default bash RC for the system.
3172320	3181320	And again, so this is the first program that runs when you log in. And we talked about this before, but I want to show it to you again.
3182320	3187320	So Etsy password is the file that contains all the users on the system.
3188320	3196320	The X stands for where the password used to be in flat text, by the way, and, and it's now in secret.
3197320	3202320	And then we have the user ID and the user group ID, which are almost always the same.
3203320	3205320	There's usually always a group made for a given user.
3206320	3212320	And then we have just a generic like comment field, people put all kinds of things in here.
3213320	3216320	There's a standard like common notation for like that.
3217320	3223320	It's a really old script from for dealing with like multi-user student systems when you do add password that does that.
3224320	3227320	And then we have over here, we have the actual home directory.
3228320	3234320	This is the directory that they'll be put into when they start their login or if they start a new process.
3235320	3240320	And over here, then we have their shell and the shell, the shell can be used.
3240320	3243320	I mean, this is our login shell or your login application.
3244320	3246320	And you can do all kinds of fancy things with this.
3247320	3248320	I mean, you see route has been bashed.
3249320	3251320	You could actually make your login shell Python if you wanted to.
3252320	3259320	You can, when I worked at teleport, we made the login shell of a particular account and application that showed transit times.
3260320	3262320	And it was actually a way to start it.
3263320	3267320	If you wanted to create a mud multi-user dungeon or some sort of interactive text adventure,
3267320	3270320	as long as you're careful so they can't break out, right?
3271320	3273320	You can, you can set that to be the shell.
3274320	3277320	And then people get, there's actually the Star Wars.
3278320	3284320	You can, you can SSH to a particular account someplace and you can watch and ask the animation of Star Wars.
3285320	3289320	And that's because they set as the shell the program to run when they log in.
3290320	3296320	So we covered this already, but it's important that we go over it again because it does kind of, I mean, bin false means, hey,
3297320	3299320	you know, nobody should be logging into that account.
3300320	3301320	Period. Right.
3302320	3306320	And bin bashed and Berry is another one.
3307320	3308320	So I've been bashed on Berry too.
3309320	3312320	And that, that's going to cover it.
3316320	3317320	Yeah.
3321320	3323320	I'm sure I'm thinking about something here.
3324320	3327320	Yeah, that's it. No, that's right. That's right. I got it. Okay.
3328320	3336320	What's the difference between user bin no login and false bin false is a program that just returns one, I mean, zero, one or negative one or something.
3337320	3339320	Let's say it's an actual program that predates everything.
3340320	3343320	No login is a fancier version of that.
3344320	3345320	I don't, I don't know.
3346320	3347320	Man, no login.
3348320	3350320	Politely refuse a login.
3350320	3353320	Oh, apparently it's more polite than it's a BSD thing.
3354320	3356320	I'm not, I don't use the login.
3357320	3358320	I use false.
3359320	3360320	I've been using false forever.
3361320	3363320	So, yeah.
3364320	3366320	I don't think that's why I didn't log into the login.
3370320	3371320	Yeah. Interesting.
3374320	3376320	It gives less, less exciting.
3377320	3378320	Yeah, it doesn't give any.
3378320	3379320	Info at all.
3380320	3381320	So they don't know what to use or anything.
3382320	3383320	They just connect and it just drops it.
3384320	3385320	That's why I like false.
3387320	3390320	I couldn't remember why, but I think that's probably the reason.
3391320	3394320	So, so again, here is the standard bash RC file.
3395320	3398320	So this, this is the, I mean, technically speaking,
3399320	3402320	if you're running from a remote login shell bash profile,
3403320	3406320	I think runs first, but it's empty, right?
3406320	3409320	Let's look, let's, let's see what's in XT scale, by the way.
3410320	3415320	So, so dot profile is like any remote thing.
3416320	3417320	So let's look at that one.
3420320	3423320	So this on a standard system executes command interpreter
3424320	3425320	for login shells.
3426320	3427320	This file is not read by bash.
3428320	3429320	If bash profile bash login exists.
3430320	3431320	And then I'm asking myself, why do I even have one?
3432320	3434320	The only reason I do have one is there are occasions
3434320	3435320	I think Mac is one of them.
3436320	3437320	We're having it night.
3438320	3439320	It works nicely.
3440320	3441320	So this just says, Hey, if I'm going to, for some reason,
3442320	3443320	I ran dot profile instead of everything else,
3444320	3445320	go ahead and execute it.
3446320	3448320	In fact, I wonder, I'm going to experiment with something.
3449320	3450320	I'm going to get rid of mine.
3451320	3452320	Did we already do that?
3453320	3454320	Did we already do that?
3459320	3460320	No, it's not there.
3461320	3462320	So apparently profiles like really not used.
3463320	3464320	I might even be able to delete it from my system.
3465320	3466320	Let me try something else.
3467320	3468320	Bash dash.
3469320	3470320	Nope.
3471320	3472320	They got it.
3473320	3474320	So kind of useless.
3475320	3476320	I mean, I hate to say it, but it is the profile is kind of useless.
3477320	3478320	You may find that you need it on another system.
3479320	3480320	If you want to run bashing for some reason,
3481320	3482320	you can't change your login show.
3483320	3484320	I mean, I don't know.
3485320	3486320	I can't remember why I have it.
3487320	3488320	This one, I'm considering getting rid of it.
3489320	3490320	I mean, I do have one,
3490320	3493320	but mine is all it does is just run my bash RC.
3494320	3496320	It's basically a short version.
3497320	3498320	It was anyway until I moved it.
3499320	3502320	It's just a, do I have a bash profession in this?
3503320	3505320	Oh, and you notice how this is written in old school shell as well.
3507320	3508320	It's like the headaches.
3510320	3511320	Yeah.
3512320	3513320	So if we have bash,
3514320	3516320	then include bash RC and just run it.
3518320	3519320	Yeah.
3520320	3521320	It's interesting because this is using,
3522320	3525320	this is using politics notation for the shell stuff as if,
3526320	3528320	because dot profile, this is the one thing I know about profile dot
3529320	3533320	profile is spans all shell types.
3534320	3536320	So like if you're on a unique system reacts,
3537320	3538320	which I haven't been on in a long time,
3539320	3540320	or BST even on a Mac,
3541320	3542320	you might have issues with dot profile.
3543320	3544320	So dot profile might be the first thing that runs.
3545320	3546320	Just know that.
3547320	3549320	But more importantly is dot bash RC, right?
3550320	3551320	This is the most important file
3552320	3557320	and you're the main bash configuration file.
3558320	3562320	And I prefer to do everything in bash RC
3563320	3565320	so that I can SCP that bash RC file to anything
3566320	3567320	and I get the exactly the same environment.
3568320	3569320	So, so let me give you,
3570320	3571320	let's actually do an example of that.
3571320	3572320	Okay.
3573320	3576320	So if I, let's say I want to work on a container for some reason
3577320	3579320	and I want to Docker, we haven't done Docker yet,
3580320	3581320	but in fact, when are we going to put Docker on there?
3582320	3583320	And we need to put that on there somewhere,
3584320	3585320	probably after the ghost stuff,
3586320	3587320	because we can do from scratch containers.
3588320	3589320	All right.
3590320	3591320	So Docker dot it dash dash RM, let's run Ubuntu,
3592320	3593320	which will run Ubuntu server.
3594320	3595320	It's a lightweight image.
3596320	3597320	And let's just go run that.
3599320	3600320	Oh, I didn't do run.
3601320	3603320	And so now I'm on Ubuntu.
3604320	3605320	Okay.
3606320	3607320	And let's actually see.
3608320	3609320	Do we have a user over here?
3610320	3611320	Let's add a user, add user.
3613320	3616320	RxRob and new password.
3617320	3618320	By the way, these,
3619320	3620320	see how it's copying files?
3622320	3623320	That's what you want to try again.
3624320	3625320	Oopsie.
3626320	3627320	Yes, please.
3628320	3629320	My super secret password.
3629320	3630320	And I'm going to leave them.
3631320	3632320	I told you the commas.
3633320	3634320	So this stuff all goes in the common.
3635320	3636320	There is a user ad as well.
3637320	3638320	Ad user is a pearl script that comes on all Ubuntu.
3639320	3640320	Makes it kind of nice to do it.
3641320	3642320	It's just a convenience.
3643320	3644320	You can do all the same things with user ad,
3645320	3646320	which you should probably memorize as well.
3647320	3648320	I haven't, I mean, I look for it all the time
3649320	3650320	because I always do this.
3651320	3652320	So, and now I can actually change over to that user.
3653320	3654320	And now I'm running as me.
3655320	3656320	Now I don't have my profile, right?
3657320	3658320	So this is me with an absolute bare bones
3659320	3660320	of my Linux profile.
3661320	3663320	And I have all the stuff we just looked at.
3664320	3666320	We have a profile that there's no VI on here.
3668320	3669320	Oh, that's right.
3670320	3671320	I have to use Vim.
3672320	3673320	It's probably Vim Tiny too.
3674320	3675320	What the hell?
3676320	3678320	Ubuntu server doesn't have Vim installed by default anymore?
3679320	3680320	Since when?
3680320	3681320	Since when?
3685320	3686320	Sudo app update.
3688320	3689320	I should have pushed.
3690320	3691320	Oh, I guess I don't need that.
3692320	3693320	There's no, there's no Sudo either.
3694320	3695320	What?
3698320	3699320	There's no Vim.
3702320	3703320	I have to install Vim.
3704320	3705320	You don't want, you want Vim instead of Vim Tiny.
3706320	3707320	Vim Tiny is usually the one on by default.
3708320	3710320	I mean, I don't know why you would do this, but, you know.
3712320	3713320	All right.
3714320	3715320	Let's do that.
3716320	3717320	Okay.
3718320	3719320	Hey, we can see stuff now.
3720320	3721320	So let's do our XROM.
3722320	3723320	Vim.profile.
3724320	3725320	So here is the file as we just saw.
3726320	3728320	And the default Vim's gotten better, by the way.
3729320	3730320	The syntax highlighting's gotten a lot better.
3731320	3733320	So now we have a Vim info because I actually did something with Vim.
3734320	3736320	So we have a bash history because that shows
3737320	3738320	all this stuff that I did.
3740320	3741320	There's all my commands.
3742320	3745320	My skill bot actually would query interactively the history file,
3746320	3748320	which you can make update in real time.
3749320	3752320	And it would tell you if you did it right by looking at your commands.
3754320	3755320	And that's why I, be careful.
3756320	3758320	I mean, if you type a password wrong or something like that
3759320	3761320	and you go splash your, your history file on this live stream.
3763320	3764320	Yeah.
3765320	3767320	I've seen passwords in history files before
3768320	3771320	because people don't know where they are and they type in the wrong place
3772320	3773320	or something or worse.
3774320	3775320	They're in a program that takes the password on the command line,
3776320	3777320	which is totally stupid.
3778320	3781320	Bash logout executed by bash when login script exists.
3782320	3784320	So this is kind of a way with bash logout file.
3785320	3786320	I don't ever use it.
3787320	3788320	I don't even think I have one actually.
3790320	3791320	Do I have one?
3795320	3796320	I do have one, but I don't use it.
3798320	3799320	Oh, it just clears your console.
3800320	3801320	So it increases your privacy.
3802320	3803320	That's cool.
3804320	3805320	Now I don't use that though.
3806320	3807320	You have an alias to delete the last history line for that.
3808320	3809320	Just to delete the last one.
3810320	3811320	Yeah, that's probably a good idea.
3813320	3814320	Yeah.
3815320	3816320	And everybody knows like if you, if you're,
3817320	3818320	I'm going to show you something.
3819320	3820320	I mean, I think people know this already.
3821320	3822320	We already covered it, but let me show you again.
3822320	3823320	My thing.
3824320	3826320	I'm a bad streamer, bad streamer.
3827320	3828320	I did.
3829320	3830320	I killed my thing.
3832320	3833320	Where's my Docker line?
3834320	3835320	All right, let's get back in a bunch again.
3836320	3837320	I got to do it over again now.
3838320	3839320	So it's good exercise.
3840320	3841320	I'm not going to have them on here again though,
3842320	3845320	because I threw it away because ephemeral containers don't stay around.
3846320	3847320	They don't remember their state.
3848320	3850320	So I got to put container.
3852320	3853320	How about that?
3854320	3855320	Sudo.
3856320	3857320	No.
3858320	3859320	Update.
3860320	3861320	That's why.
3862320	3863320	And that's why it is taken by apt update.
3864320	3865320	By the way, people said it's not.
3866320	3867320	It is.
3870320	3871320	So we do apt install them.
3872320	3873320	That's why them.
3874320	3875320	I'm rooted.
3876320	3877320	So I don't need a sudo there.
3879320	3880320	Alrighty.
3880320	3881320	So what I wanted to show you.
3882320	3885320	So we were, we were talking about add user to the X-Rub.
3887320	3888320	Password, password.
3894320	3895320	All right.
3896320	3898320	Now that's the same as saying login if I had, right?
3899320	3900320	So you see my stuff sell the same.
3901320	3904320	I hate fuzzy finders and I absolutely detest control R.
3906320	3907320	I do not ever use control R.
3907320	3909320	I use set dash OVI and we're going to talk about that.
3910320	3911320	Don't let me forget.
3912320	3914320	If you're not using set dash OVI, you're doing it wrong in my opinion.
3915320	3916320	Because you're using VI for everything else.
3917320	3918320	And I have strong opinion on that.
3919320	3920320	So we'll talk about that.
3921320	3923320	People tell me all the time use control L the clear the screen.
3924320	3925320	I'm like, get bent.
3928320	3929320	You have no idea what you're talking about.
3930320	3931320	Okay.
3932320	3933320	So LS, LS dash A.
3934320	3935320	So there's all our files, right?
3935320	3940320	And let's go edit a profile and we'll get our VIM stuff all automatically initialized.
3941320	3942320	And we do that.
3943320	3944320	So there's our VIM info.
3946320	3947320	Yeah.
3948320	3949320	Look, if you want to do it, that's fine.
3950320	3951320	You know, I don't really hate you when I say that, right?
3952320	3953320	I'm just, I'll just laugh at you.
3954320	3955320	And then I'll buy you a beer.
3957320	3958320	Okay.
3959320	3960320	So if you want to do that, that's fine.
3960320	3964320	HL search, uh, file marks.
3965320	3966320	It tells you this remembers.
3967320	3971320	So this file like remembers all the information about your stuff while you're doing your VIM editing.
3972320	3973320	And you really shouldn't depend on it.
3974320	3975320	It is nice.
3976320	3977320	It does remember where your lines are.
3978320	3979320	And we're going to go through that later.
3980320	3981320	But, uh, and the bash log out, you don't need mess with.
3982320	3984320	But what I wanted to show you is that the only file that matters here is bash RC.
3985320	3989320	But I do want to show you what Mossy was talking about, which is if you'd rather not mess with the file,
3990320	3992320	even says it in the recommendations in the comments down here.
3993320	3994320	And, but I just don't trust them.
3995320	3996320	Alias definitions.
3997320	4003320	You may want to put all your additions into a separate file like bash, like bash aliases instead of adding them here directly.
4004320	4005320	And my question is why?
4007320	4010320	Why have yet another file that you have to manage that's just sitting around there?
4011320	4016320	I don't, I don't ever do this because I want to clean directory and I want to control what goes into the directory.
4017320	4018320	I want total control.
4018320	4021320	I don't want to trust some really bad shell code, by the way.
4022320	4026320	Uh, this, this new bun two default bash RC is really bad.
4027320	4028320	It's just so bad.
4029320	4033320	And, and I don't want to go, for example, the history file size massively broken.
4034320	4036320	And we can get into this when we get into it.
4037320	4039320	Um, it does set some other history settings.
4040320	4047320	So the main reason that I don't want to use a bash aliases thing is because I want to throw this crap out as soon as possible.
4048320	4050320	It's absolute crap.
4050320	4051320	It's a good start.
4051320	4054320	If you want to like go from there, but it does things that I would never do.
4054320	4055320	Plus it's using single.
4055320	4057320	I mean, I don't, I just don't want to talk about because I'll get angry.
4058320	4059320	Okay.
4059320	4060320	It's horrible.
4060320	4061320	It's just really bad.
4061320	4063320	And I mean, God, look at this.
4064320	4065320	I cannot.
4065320	4066320	Okay.
4067320	4071320	Plus it says you're really horrible color prompt, which is completely bad.
4071320	4072320	And it's inefficient.
4073320	4080320	It's totally inefficient because now you're, you're starting this really horrible thing to start another thing, which also has to run another script.
4081320	4082320	It's inefficient.
4082320	4084320	It slows down your, it slows down your logins and everything.
4084320	4085320	Okay.
4085320	4087320	And, and I don't want to do that.
4087320	4089320	It tries to give you some aliases.
4089320	4092320	Uh, it's just, it's just bad.
4092320	4096320	I mean, why would they put the aliases in dirt colors if dirt colors doesn't exist?
4096320	4097320	Right.
4097320	4101320	Why would they, you know, they only activate color if there's only dirt colors.
4101320	4104320	No, you can use grep with color without dirt colors being enabled.
4104320	4110320	There's just like so many stupid assumptions based in here that I just, I can't talk about it and not get upset.
4110320	4114320	I do want to say though that this is where a number of misconceptions come from.
4114320	4120320	For example, people log into Ubuntu or Kali Linux or something and they tell me, oh, you should use LL for everything.
4120320	4123320	And I'm talking about, you mean LS-L, right?
4123320	4128320	And, or they make a command called L that does this, right?
4128320	4133320	And the answer is that's an alias and they don't know it because they don't know what an alias is.
4133320	4134320	Now you do.
4134320	4140320	Um, and you know, they, they set up alerting, which I don't really like alert.
4140320	4143320	I mean, look at how horrible this line is.
4143320	4146320	This is, this is objective proof.
4146320	4150320	These people have no idea how to code or script.
4150320	4153320	This script is so stinking bad.
4153320	4155320	I don't have words.
4155320	4159320	And, and you do, you understand why all these sub-shells are unnecessary.
4159320	4164320	Uh, the reason they had to do that is because they made it into an alert instead of making it another script or a function.
4164320	4168320	They could have done this whole thing as a function and saved all of that crap, but they didn't.
4168320	4170320	And they decided to make an alias.
4170320	4173320	And by the way, why are alias is bad because it can't be used as Unix filters.
4173320	4176320	I could go on and on and on.
4176320	4183320	This was written by whoever manages, somebody at Canonical, whoever manages the, the main login for Ubuntu.
4183320	4188320	And I'm glad I opened it up because it was a really good reminder why I'm never using it.
4188320	4191320	Okay.
4191320	4193320	And you don't have to use it either.
4193320	4194320	And here's how you change it.
4194320	4195320	Okay.
4195320	4200320	So, so I'm going to go back over to my other script over here and I'm going to show you why I think you should put everything in a single Bash RC.
4200320	4205320	Because when it's in a single Bash RC, all I have to do, uh, is copy it over.
4205320	4206320	Right.
4206320	4211320	And, uh, I don't remember how to, how to SSH into containers.
4211320	4213320	Does anybody else know how to do that?
4213320	4215320	What's the Docker command for that?
4215320	4216320	What's the command for it?
4216320	4217320	I don't remember it.
4217320	4220320	Does anybody remember?
4220320	4221320	What is the Docker?
4221320	4225320	I know there's an SCP command for Docker that will SCP into a running instance.
4225320	4226320	And I can't remember it.
4226320	4230320	And I didn't mount the directory because they don't normally do this.
4230320	4237320	Normally I would, you know, but if I wanted to, I'm trying to figure out how, how I could do that.
4237320	4238320	I mean, let me think.
4238320	4239320	Let me think.
4239320	4240320	Let me think.
4240320	4241320	Let me think.
4241320	4242320	We can actually SSH.
4242320	4246320	Sometimes I go to the machine and SCP it from the target machine and sometimes I do the
4246320	4247320	reverse.
4247320	4248320	Is it just Docker copy?
4248320	4249320	Really?
4249320	4250320	God, am I that?
4250320	4253320	But don't have to do it to the running container.
4253320	4256320	God, I'm so out of shape.
4256320	4258320	I am so out of shape when it comes to this stuff.
4258320	4259320	So we are running one.
4259320	4260320	Okay.
4260320	4261320	So there, what is this name?
4261320	4262320	And container ID.
4262320	4263320	Okay.
4263320	4264320	Okay.
4264320	4265320	Okay.
4265320	4269320	So, uh, Docker copy, uh, dot Bash RC.
4269320	4271320	To, I mean, this is one example.
4271320	4276320	I mean, pretend like this Docker copy is like an SCP to another VM or something.
4276320	4277320	Right.
4277320	4283320	Um, I'm not the feeling that containers going to come first.
4283320	4287320	Uh, dot Bash RC.
4287320	4290320	And I mean, I didn't put the user.
4290320	4292320	I should probably do that.
4292320	4296320	I must specify at least one container source.
4296320	4298320	I think it did.
4298320	4300320	I don't, I don't know how to do this.
4300320	4305320	I don't have to look it up.
4305320	4306320	I'm sorry.
4306320	4308320	I don't know everything.
4308320	4309320	Sue me.
4309320	4311320	Uh, Docker copy.
4311320	4312320	Oh, really?
4312320	4313320	Is it?
4313320	4314320	That's all.
4314320	4315320	All right.
4315320	4323320	Well, colon, uh, no, no, no, no, no, no.
4323320	4329320	We want to dot Bash RC into, and yes, I use my mouse again.
4329320	4330320	Sue me.
4330320	4334320	Um, slash 10.
4334320	4335320	Yay.
4335320	4336320	All right.
4336320	4341320	So we should be able to go back to the Docker container and do LL slash temp and see nothing
4341320	4343320	because it's hidden.
4343320	4344320	All right.
4344320	4346320	So now we have a bash.
4346320	4347320	Oh, you know what?
4347320	4348320	It's a sim link.
4348320	4349320	Yeah.
4349320	4350320	Watch.
4350320	4355320	I copied the sim link and not the file it points to, which, you know, you wouldn't do.
4355320	4358680	Okay, let me resolve the sim link there.
4358680	4359680	I can fix this.
4359680	4360680	I can fix it.
4360680	4369680	All right, so we're going to say, what's the thing that resolves symbolic links automatically?
4369680	4372200	I should probably learn that again.
4372200	4373200	There's a switch.
4373200	4378600	There's a flag you can put on copy and the other one that will actually copy the destination
4378600	4382520	file instead of the actual symbolic link because I, what I want to do is this.
4382520	4386000	I want to do, I think, is it dash F?
4386000	4387480	I don't use it very much.
4387480	4389120	This is for me too.
4389120	4392880	So we want to follow some links.
4392880	4393880	Hard links are going to dereference.
4393880	4394880	There we go.
4394880	4401680	Dash L. So you might want to do a dash L. I wonder if the Docker has a dash L. Wouldn't
4401680	4405720	that be cool?
4405720	4407280	It might.
4407280	4409880	It might have it.
4409880	4415800	Oh, damn.
4415800	4418120	It does.
4418120	4419120	It does have it.
4419120	4420120	That makes me very happy.
4420120	4423640	Okay, so the Docker CP command has a dash capital L as well as the capital.
4423640	4426640	All right, I'm going to put that on my list because I need to remember that one.
4426640	4427640	I don't use that ever.
4427640	4432280	I need to.
4432280	4439800	C dash L. Follow symbolic links.
4439800	4440800	We haven't.
4440800	4441800	Do we do symbolic links?
4441800	4443920	I don't think we've done symbolic links yet.
4443920	4446080	Do we need to talk about that?
4446080	4447960	I think we, no, we're going to, you know what?
4447960	4450240	We're going to talk about it because we're going to put all that stuff in a Git repo
4450240	4452000	and then we're going to link it in.
4452000	4456480	And people, people complain about that all the time and they say it's messy.
4456480	4459400	There's streamers who complain about that because then they want to use some fancy tool
4459400	4460400	for it.
4460400	4464080	And I think learning how to do the symbolic links properly is better personally because
4464080	4465080	it works everywhere.
4465080	4468000	And you don't have to install some extra tool that you don't have access to.
4468000	4469000	It just works.
4469000	4474280	It's spelled out flag when I don't remember.
4474280	4476880	Can you do dash dash flag?
4476880	4477880	I wasn't sure of that.
4477880	4478880	Okay.
4478880	4481800	So, so anyway, we've got this new bash rc here, right?
4481800	4483320	And I want to take it over.
4483320	4488000	So all I have to do, I mean, I could have copied it right to the directory if I wanted to,
4488000	4492080	but I kind of want the option of having, you know, remember, I can go get the, this
4492080	4494760	one from Etsy scale if I need to, right?
4494760	4496000	So let's just do that.
4496000	4501520	Let's just copy temp.bashrc and we'll copy it to here if we can.
4501520	4507680	And now I do ls-l, a, we should see that the file has changed.
4507680	4509680	It's still readable and everything.
4509680	4511320	It's bigger though.
4511320	4513680	And we're going to go look at it.
4513680	4521480	And now we have, this is my shell check enabled bash rc file, which we are now going to go
4521480	4522480	through.
4522480	4523480	All right.
4523480	4530400	But now the other piece of this is when you copy a bash rc file over, you're like, but
4530400	4533200	it doesn't look like it's using it.
4533200	4537240	And people log out of the terminal all the time and log all the way back in, you know,
4537240	4539840	reboot their computer to get the fresh colors on their terminal.
4539840	4541520	You know, you don't need to do any of that.
4541520	4543600	You need to remember this command.
4543600	4547640	ssec bash dash l for login shell.
4547640	4550480	And what this does, oh, do you reference this one?
4550480	4551480	Okay.
4551480	4560560	What this does is it replaces the running program with a new program, keeping all of its associated
4560560	4564280	connections and pipes and resources and everything.
4564280	4567960	And it's a way to re-initialize your shell with a new one.
4567960	4571720	So after I execute that, it executes bash really quickly.
4571720	4579440	And you see now I get my fancy ps prompt from, you know, the one that I've been maintaining.
4579440	4584880	And you can't even tell other than the host name that I'm not on my own system, right?
4584880	4588800	All I had to do was copy one file and I copied it to temp, but I didn't have to.
4588800	4590960	I could have copied it right over the top of the other one.
4590960	4592200	It would have worked.
4592200	4596640	And that is all I would have had to do to get my bash to work properly.
4596640	4602680	So you'll hear me when I argue against these shell and fish and other things like that.
4602680	4608400	One of my main arguments against them is all of the individual files that have to be copied
4608400	4611380	over to a target environment to get it to work.
4611380	4614220	So hypothetically, you're working for a new company.
4614220	4618080	You come on and they have like really old login jump machines that you have to use.
4618080	4619080	You don't get the choice.
4619080	4620240	You have to use them.
4620240	4625160	But you do get the ability to manage your own home directory, hopefully, including your
4625160	4626160	RC file.
4626360	4631600	Some places that won't let you even change your own RC file, which is just stupid.
4631600	4634760	But if they do, then you just copy that file over.
4634760	4638480	You log in your exec bash shell and you're good to go.
4638480	4640760	And now you've got all your favorite things.
4640760	4647560	You got your, you got your, you know, you got your aliases, but actually I don't, right?
4647560	4650720	And this is actually one of the problems I've had in the past.
4650720	4653960	At one point I'm going to, I'm going to just confess here.
4653960	4658560	At one point I put all of the stuff that I have in my scripts directory, I put all of
4658560	4663280	it as functions inside of my bash or C file, and it was huge.
4663280	4667120	And it was kind of stupid because every time anything ran, it had to initialize all that
4667120	4668720	stuff over again.
4668720	4671700	And that's actually one of the advantages of Z shell.
4671700	4675920	If you're on the same environment is it has lazy loading of functions when they're used.
4675920	4678240	And so you, the functions are not stored in the file.
4678240	4680520	They're stored in a separate directory.
4680520	4683920	And that you have to copy the whole directory over if you want to use any of the functions.
4683920	4689200	And since my, and by the way, if you use functions like that, those functions are still not usable
4689200	4691400	as, as UNIX filters.
4691400	4695520	So you can't use them as, you know, from, you know, magic wand commands inside of them
4695520	4696560	or anything like that.
4696560	4701680	So you still have to have a collection of scripts and we're going to get to that.
4701680	4705000	But you only need to bring over the scripts that you've come to love.
4705000	4710640	But as we go through the bash or C file, one of the topics we're going to talk about is
4710640	4725480	when to use, when to use an alias, an alias function or a script.
4725480	4728120	Okay.
4728120	4732720	And that, that is, that is a big question.
4732720	4736800	Every time a script runs bash or C runs, yes, it's absolutely right.
4736800	4743960	And that, that is why I'm glad you answered the question because, because, because we're
4743960	4748560	going to watch the, the reason it's, okay, so let's get into the bash or C file itself.
4748560	4750120	Let's start going through it.
4750120	4751120	Okay.
4751120	4757080	And just like anything else, you can actually put shell check in here.
4757080	4763720	We can guarantee the correct, the correct task with the script of copy process, correct
4763720	4764720	task of the script.
4764720	4766760	I don't know about that.
4766760	4767800	Yeah.
4767800	4770040	I don't know.
4770040	4771040	Let's go through this.
4771040	4772040	Okay.
4772040	4773040	So I'm going to go through this.
4773040	4774040	Really.
4774040	4775040	I know we haven't taken any breaks.
4775040	4776040	Do we need a break before we keep going?
4776040	4777040	What time is it?
4777040	4779540	Is everybody, does anybody need a break?
4779540	4783080	Otherwise I just, I feel the need to keep going.
4783080	4785620	Shaw, you can, but you don't need to.
4785620	4786760	You could just read it.
4786760	4787760	Right.
4787760	4791760	You could do that, but in this case, we're just reading it, it's just copying locally.
4791760	4793580	You know.
4793580	4797300	All right, I'm just going to keep going.
4797300	4803900	If you need to pause the video or whatever, let me know.
4803900	4805100	So here we go.
4805100	4806460	You could do it, Sean.
4806460	4813020	So Ping and Masi are talking about validating the file that you just copied over, right?
4813020	4817980	If you're using SCP, you don't need to do that, you just don't.
4817980	4822460	If you want to be extremely paranoid for no reason, you could, but you really don't need
4822460	4823460	to do that.
4823460	4825860	You don't want to do that, you could, right?
4825860	4830020	And what that's, checking an SHJ is a way to validate that the file has not been modified
4830020	4831700	in any way.
4831700	4832700	And it usually works.
4832700	4833700	It didn't.
4833700	4839340	One of the biggest hacks in history in the 90s, they hacked the WFTP server and they
4839340	4848940	successfully hacked the source and created a file that had Trojan in it malware that
4848940	4854060	passed the checksum validation because they made sure to avoid the sections of the file
4854060	4857220	that were used in calculating the mathematical checksum of the file.
4857220	4862460	So the checksums have gotten way better since then, and you know, you're usually safe to
4862460	4867860	do that checksum validation, but it can still be defeated if you're using the bad one.
4867860	4872460	So I don't know if that's the reason I don't, I think you should do it, but if you're doing
4872460	4881780	encrypted tunneling, so which is SCP or HTTPS, TLS, then it's not as big a deal.
4881780	4885900	You should probably still do it for fun, but particularly if it's a script that you're
4885900	4886900	going to be reading, right?
4886900	4889980	If you're going to be reading through the script, but if it makes you feel better, you
4889980	4891580	should do checksum validation on the thing.
4891580	4895100	If there's any possible reason to do that.
4895100	4898580	We are doing the boost, my friend, so welcome to the stream.
4898580	4900820	We are recording this for YouTube.
4900820	4904780	So just know this, every Sunday we record videos for YouTube.
4904780	4908620	Okay, so I'm going to go through this file line by line, and we got a lot of coverage.
4908620	4913060	So, and I'm going to give very brief summaries of what it's doing.
4913060	4917420	If anybody has questions, please ask the questions now because I'm not going through it again,
4917420	4918500	all right?
4918500	4923020	And this is based on the assumption that as any beginner would, you're going to find
4923020	4927620	a veteran out there or somebody that you trust, and you're going to say, I don't really understand
4927620	4930180	Bash yet, or I don't understand Vim or T-Mux.
4930300	4931900	I kind of use your files.
4931900	4940300	And so it's a part of the culture of Linux and Unix to pass down or to share .files.
4940300	4950060	In fact, if you go to GitHub, and you just search on GitHub for .files, you will find
4950060	4957340	literally thousands of repos that have different people's .files, right?
4957340	4959620	Because everybody is proud of their .files.
4959620	4965620	It's like the customization on their car, and they want to show you their version.
4965620	4967500	There's Jess Razzles .files.
4967500	4969260	So she's container girl.
4969260	4970260	She was.
4970260	4973740	She's over at Oxide with Brian Ketchel now.
4973740	4975500	Everybody puts in .files.
4975500	4977060	My .files are there.
4977060	4978060	Everybody puts in .files.
4978060	4985620	In fact, having a significant .files repo that is well-organized is a really great way
4985620	4989820	to improve trust with a potential employer, because they can go in there, and they can
4989820	4991060	see that you know you're talking about.
4991060	4994740	Right away, I know this person is not someone I would ever talk to, because they're using
4994740	4997900	crappy ZShell shit on a Mac.
4997900	4998900	I'm just kidding.
4998900	4999900	It's a joke.
4999900	5000900	Oh, my God.
5000900	5001900	All right.
5001900	5006700	So, and look at what they're doing, too.
5006700	5008900	He's making his entire Git repo.
5008900	5010420	This just shows he doesn't know what he's doing.
5010420	5012660	This person doesn't know what he's doing.
5012660	5015660	He's cloning.
5015660	5019060	He's making a .files, and then he's going into there, and he's doing script bootstrap
5019060	5020060	for the whole thing.
5020060	5021060	Okay.
5021060	5029820	So, I'm kind of jumping ahead, but is there not having public .files?
5029820	5034340	Because a lot of the things that are going to go in your .files are going to be login
5034340	5043180	tokens, organization of mostly login tokens, your secure shell configuration files.
5043180	5047260	By the way, people commit, all the time, they commit their private keys.
5047260	5051340	People constantly commit their private keys to GitHub, because they don't have any, they
5051340	5054580	just, I'm going to put my whole home directory in there, and they just commit their home.
5054580	5056220	Please don't do that.
5056220	5062300	There's nothing that says, don't ever hire me more than some shit like that.
5062300	5066380	By the way, we have that, there's a company that I know of that shall not be named, that
5066380	5068460	is doing that in production.
5068460	5076420	And they're saying, well, the repos are private, and I'm like, oh my God.
5076420	5077500	You know, and then what is it?
5077500	5081860	Last month, all of GitHub's private repos were compromised.
5081860	5082860	Okay.
5082860	5086780	Well, it's more fun for the hackers out there.
5086780	5088100	I'll put it that way.
5088100	5090580	So anyway, you can go through the dot files.
5090580	5094060	It's don't feel bad or don't feel guilty or dirty.
5094060	5097860	Just set as a goal that you're going to go make your own dot files.
5097860	5101900	You're going to seek to understand your own dot files, but for right now, there's no reason
5101900	5103140	not to steal somebody else.
5103140	5107260	And as I mentioned, if you want to go steal mine, which could always use improvement because,
5107260	5111980	you know, you can go out to slash dot and you can see my stuff.
5111980	5116860	Now, one of the things I'm going to show you right away, I'll show you from here actually,
5116860	5118140	it's the organization of it.
5118140	5125180	So my bash or C, and this, by the way, I noticed the other day when I was going through this
5125180	5132740	that a couple of specific things to me referring to my name are in here.
5132740	5138180	My goal in creating a dot files is creating something that you can copy and paste as is
5138180	5140500	for you, right?
5140500	5142420	So see this whole who am I thing?
5142420	5143860	This is so that I can create a user.
5143860	5145460	We're going to come back to that.
5145460	5150460	But you know, I get busy and sometimes I'll make a mistake and I'll commit something that
5150460	5151460	refers to me.
5151460	5152700	In fact, I think I have something in here.
5152700	5161700	I don't know where it is, but if you do that kind of thing, now, see the better option
5161700	5166740	instead of doing a dot files that is this, right?
5166740	5174460	So this is something I use, I source, I wrote a function called source if, and then I have
5174460	5179580	added dot bash personal dot bash private and dot bash work.
5179580	5184100	And this allows me to use the same bash or C file everywhere I am.
5184100	5188580	And I have a bunch of stuff in dot bash work, for example, that deals with our VPN and logging
5188580	5193580	around it and, you know, sets a SOX proxy and all this stuff that you'll get into if
5193580	5196900	you get into the IT profession.
5196900	5202180	And you know, so you can you can do that that way if you want to my dot bash private is
5202180	5208020	actually mounted as a USB stick, which is another reason to use a VM instead of Docker.
5208020	5216540	I'm sorry, instead of, instead of WSL2, WSL2 does not allow you to mount USB sticks, period,
5216540	5218260	which is really horrible.
5218260	5223620	So I happen to keep, I mean, I'm not doxing anything here, I keep my private data, my
5223620	5228860	private stuff on a USB stick, and then I mount that USB stick, and then this gets symbolically
5228860	5234020	linked to what's called a raw Git repo that never touches the internet, ever.
5234020	5238900	And that's got, you know, my private keys, my GPG stuff in it and stuff like that.
5238900	5241500	And that's one of the reasons I'm using a VM container here, because I don't want to
5241500	5242500	show you that stuff.
5242500	5246340	But I do want to show you how you could do that if you wanted to.
5246340	5249420	And then you can you can break these out, okay.
5249420	5254140	So in terms of references, if you want to follow along in this thing, and you can just
5254140	5258820	go click on the dot file here, and I'll send you the link here so you can go look at it.
5259780	5263700	And I'm always, you know, pilfering other people's good ideas as well, I'm constantly
5263700	5264700	going through it.
5264700	5267500	All right, so let's let's jam through this thing really fast.
5267500	5270060	I'd like to read about dot files.
5270060	5271580	Oh, yeah, it's so much fun.
5271580	5274740	Yeah, I've made so many friends just through my dot files.
5274740	5278540	Seriously, because I've like reached out to other people's dot files, I'm like, man, I
5278540	5280060	really love what you did here.
5280060	5283340	Blah, blah, blah, say thank you, or you open an issue on the dot files thing just to be
5283340	5285980	nice or, you know, comment or something.
5285980	5292220	And I've had people, Q-Macro found me through my dot files on Twitter, and then saw some
5292220	5296820	stuff in there and started talking about it to his to his pair of group, and it's a part
5296820	5298060	of the culture, right.
5298060	5302660	So, you know, drink a beer or whatever, non beer, coffee, whatever you want to whatever
5302660	5306020	beverage you want, and then talk about making a better dot files.
5306020	5310540	People at night, like when I'm like putting the music on, I'm all I'm doing is cleaning
5310540	5313980	my dot files up, and it's fun.
5313980	5318300	Cleaning your dot files, your dot files up is really, really fun.
5318300	5322700	You just put music on and, you know, shoot the breeze of your friends on Twitch and just
5322700	5323700	clean up your dot files.
5323700	5324700	In fact, it's addicting.
5324700	5325700	It's really addicting.
5325700	5329060	You want to like creating new ways to doing things.
5329060	5335540	In fact, because of this, I ended up making Banzai, which is a monolith that has all of
5335540	5338540	my commands in it that I can compile for another system.
5338540	5340020	Let me show you that.
5340020	5344580	So this, I'm going to give you a little snapshot of Banzai.
5344580	5346900	So where's my CP command?
5346900	5353140	All right, wait, wait, wait, wait, so it's over here, there we do it, okay.
5353140	5359860	So I can do capi dash l, I can do which is Z, right.
5359860	5362740	You remember my Z command that's got the POMO timer and everything?
5362740	5366340	Yeah, I can copy my Z command, and I can copy that.
5366340	5367980	Oh, let's make a new directory.
5367980	5371460	So while we're at it, where am I?
5371460	5375660	All right, so I want to be careful because if I close this window, we're dead.
5375660	5377660	My whole thing will get reset.
5377660	5385860	So we're going to make a directory called .local.bin, notice file directory, oh, what's the fix
5385860	5387940	for that?
5387940	5391420	What's the fix for that?
5391420	5396140	It's a non-posix fix, but what's the fix for that?
5396140	5397140	What just happened?
5397140	5401660	We have a quiz here, we cover this, I just want to see who knows.
5401660	5406740	I tried to create a directory that doesn't have a parent directory, how do I fix that?
5406740	5411540	Dash P, well, that's a good job, okay, so dash P, it says make all parent directories
5411540	5415340	as well, right.
5415340	5417260	That's all in it, yep, dash P.
5417260	5419660	That does not work on BSD Unix, by the way.
5419660	5428180	It is a bash, I'm sorry, it's a, I don't know, it's a bashism, it's a linuxism.
5428180	5434660	All right, so anyway, so now I have a bin directory, right, and I'm going to go over
5434660	5441380	here and I'm going to copy my Z program, which is, you guys are going to make one too if
5441380	5449500	you want to, it's a bunch of only, a bunch of only, a lot of people do that, yeah.
5450340	5455260	A lot of people do that, but I don't, like, sometimes I like doing it explicitly, but,
5455260	5460940	so let's actually copy this into the home directory, but to do this, we might have to
5460940	5463780	do it as a specific user.
5463780	5467140	I think it's just going to copy it over as root, does it dash U, already make sure of?
5467140	5471140	Actually, no, let's just put it in slash temp, and I'll copy it over, it doesn't matter.
5471140	5472140	Either way, it's fine.
5472140	5478740	All right, so now I can do this, I can say copy slash temp Z into .local, and because
5478740	5488980	it's Unix, already, right, which is Z, exec bash dash L, and which is Z, and the reason
5488980	5493100	that it didn't see it in the path is some cool magic that I'm doing with the path, building
5493100	5497540	up my path on login, and I want to show you that in a second.
5497540	5500140	So now I have a Z program, right?
5500140	5507780	Well, it's not, you know, schmox, which is Z.
5507780	5513180	All right, so now we can do Z, and that's my Z program.
5513180	5514420	Pretty cool, huh?
5514420	5518300	I could have done that on PowerShell, I could have done that on Plan 9, I could have done
5518300	5523180	that on BSD Unix, I could have done that on AIX, I could have done it on anything.
5523180	5528220	So this is the moment where I'm going to tell you that I am in the middle of porting all
5528220	5538780	of my scripts, why use a bonsai monolith instead of scripts.
5538780	5544460	So I'm moving on to the next phase of evolution, and I am getting rid of my scripts, and I'm
5544460	5549920	putting the ones that I use all the time and do a single bonsai monolith, because why?
5549920	5554700	Because I was able to copy every single script and every single thing I ever want to use
5554700	5562340	by using one copy command for all of that stuff, and it fulfills everything I need as
5562340	5569060	a, look at that, ZPOMO start.
5569060	5571740	My Tmux over here isn't set up yet, so that's why it's not doing it.
5571740	5574260	But if I do ZPOMO, you'll see it's there.
5574260	5577540	Oh, I haven't set it yet, ZPOMO in it.
5577540	5583500	All right, now let's try ZPOMO.
5583500	5584940	There we go.
5584940	5588460	So my POMO is running in my new container, and I didn't have to do anything, I just
5588460	5591140	copied it to binary over, one binary.
5591140	5595100	So and look at all the commands I get for free.
5595100	5596100	You see that?
5596100	5597740	I get all of those commands for free.
5597740	5603820	I want to do epic, and I want to do iso-nan.
5603820	5611700	I can do that, I can do, I can run, I mean anything, I've got my ENV thing, I don't know
5612100	5618420	how to get all of my environment variables, I can get, whatever, and that would work on
5618420	5620740	Windows, it doesn't even have Linux if I did it.
5620740	5622720	It's one of the reasons I like it so much.
5622720	5628420	So I'm, as I said, it's got, it's got my YAML parser built into it, so I don't have
5628420	5629780	to install that.
5629780	5635600	It's got my, you know, it's got a way to set localized variables.
5635600	5640980	It's got a way to talk to Twitch if I wanted to do that, and I can adjust it to have anything
5640980	5643540	else off of that that I might not want.
5643540	5645860	What does AFK do?
5645860	5648740	Oh, there's no chat command.
5648740	5651620	Oh, my chat command talks to WeChat.
5651620	5652620	That's the problem.
5652620	5653620	Hello.
5653620	5656620	Well, I'm just going to try to chat, talk to WeChat, and there's no WeChat.
5656620	5662340	Yeah, so it can't do it, and now it's not happy.
5662340	5665140	Why isn't it happy?
5665140	5666140	What did I do to it?
5666140	5667140	I broke it.
5667140	5672020	It's waiting on my, it's waiting on terminal input, and it's trying to talk to WeChat,
5672020	5675220	and WeChat's not there.
5675220	5676220	I found a bug.
5676220	5679220	I definitely found a bug.
5679220	5680220	All right.
5680220	5682620	Let me, let me go log in or something, so I can fix that one.
5682620	5683620	All right.
5683620	5685740	So Docker, when does it connect?
5685740	5689060	No, it's attached, right?
5689060	5690060	Docker attached.
5690060	5691060	I know.
5691060	5692060	That's embarrassing.
5692060	5693060	That's what I do.
5693060	5696060	My program is trying to talk to WeChat, and it's all hung, and it's not doing control
5696060	5701500	D because control D is getting intercepted by stuff before.
5701500	5702780	A monolithic function is only file.
5702780	5703780	I would love that.
5703780	5705780	Wouldn't that be great, Masi?
5705780	5706780	Yeah.
5706780	5709500	I mean, we'd have to be scripts though.
5709500	5712340	So I mean, you could just do a tar ball and untar it.
5712340	5715340	That's what everybody else does, right?
5715340	5718060	Another way to do this is just make a tar ball of your scripts, and then just untar
5718060	5720500	your scripts, and then you're good to go, right?
5720500	5722740	Some people do that with their entire home directory.
5722740	5726580	They just tar, they have a set up script that just tars their home directory, and they
5726580	5728940	just go over there, and they just run it, and untars it, and does it.
5728940	5733540	It's kind of a fun script to write if you want to do that.
5733540	5736260	So oops, I don't know.
5736260	5738580	What is the name of our Docker thing?
5738580	5741420	I know this is taking a long time.
5741420	5742420	I'm sorry.
5742420	5743420	Docker attached.
5743420	5753540	Did I do that right, or did I do exec?
5753540	5754940	I can't remember my Docker commands.
5754940	5755940	I'm sorry.
5755940	5756940	There we go.
5756940	5757940	su-rvxrub.
5757940	5758940	Phew.
5758940	5759940	ps-efgrapvxrub.
5759940	5760940	Oh, there's no pcrgrapv.
5760940	5770940	I forgot about that.
5770940	5783180	You guys know about that, right?
5783180	5784180	Any time.
5784180	5787500	Okay, I'm going to show you this.
5787500	5804860	Use to disable aliases, aliases and functions.
5804860	5806860	So do you see what I did?
5806860	5810900	It's like, I forgot I don't have pcrgrep installed, so I want to use the actual grip
5810900	5814740	from the system, so I put a slash in front of grip, and then that finds the actual grip
5814740	5817060	and it works, right?
5817060	5819180	So now I need to kill zchat.
5819180	5823140	So the other thing that I like about using the zchat compile thing is I can see it.
5823140	5825300	It's not like bash something, right?
5825300	5826300	So I need to do this.
5826300	5839820	I need to do pkill756, we'll try to kill it nicely and see if it dies, and I'll see.
5839820	5840820	Is it still there?
5840820	5842220	No, I'm not having it.
5842220	5843220	Okay, fine.
5843220	5844220	That's nine.
5844220	5849220	No, we need to kill sophysics.
5849220	5851220	One more time.
5851220	5853220	Okay, it's gone.
5853220	5860660	I could also have done pkillz and that would have got it, but that's a little bit scarier.
5860660	5863340	And now we should have two containers.
5863340	5867660	Yeah, we should have two container processes.
5867660	5868660	There we go.
5868660	5872020	So, by the way, has anybody had to do that on assistive before?
5872020	5875900	Did you like login on the outside and then go kill the process and went crazy?
5875900	5880460	So it's a thing that people do to survive.
5880460	5882380	I've done that with X before.
5882380	5891980	I've had my, it's happened with, what's it called?
5891980	5892980	Popoos.
5892980	5898260	Popoos was blacking out my screen and I had to SSH in, kill all the processes surgically
5898260	5900660	and then reboot it because it was so screwed up.
5901140	5902900	That's why I got rid of Popoos, by the way.
5902900	5903900	It's crap.
5903900	5904900	Absolute crap.
5904900	5910940	We've read an install script for every dependency like use for curl, etc.
5910940	5911940	I do.
5911940	5913860	I do have an install script and we're going to talk about that.
5913860	5917220	We're going to talk about how to write installers.
5917220	5918940	I don't know if we're going to get to that today.
5918940	5921460	Maybe we should do that next week.
5921460	5922460	Let's talk about that.
5922460	5923460	Do we have time?
5923460	5925500	I don't know if we're going to have time.
5925500	5929900	We still have to get through the other configuration files and it's, oops, wrong system.
5930900	5931900	Date.
5931900	5937060	It's four o'clock and we're supposed to, we're going until six though, right?
5937060	5938060	We're going until six.
5938060	5940220	I get that right.
5940220	5943100	We just changed the time recently, that's why I'm wondering.
5943100	5944660	So yeah, we're going until six.
5944660	5945660	Okay.
5945660	5946660	So we have time.
5946660	5948460	We have a lot of things to configure.
5948460	5953460	So let me, let me, let me put that on the list.
5953460	5959100	We need to put linking, we're going to put git, we're going to put gh, we're going to
5959100	5972900	put github, we're going to put linking, uh, ln, and we need to do, uh, installers, uh,
5972900	5974140	custom installers if you want them.
5974140	5975540	And we will justify why.
5975540	5977460	I don't want to get into that right now.
5977460	5979060	Let's finish going through the bash recipe file.
5979060	5983860	But yes, I have custom installers for everything because there's no less than six ways to install
5983860	5989020	most Kubernetes things and you have to pick the way you want to, you know, do that.
5989020	5993660	Sometimes it's just adding it to an app, you know, a list of stuff to app get, um, and
5993660	5995740	other times it's snot.
5995740	5999500	So I, this has been a problem.
5999500	6002900	I'm, I'm repeating, I'm going to repeat myself tomorrow the next week.
6002900	6010740	But this is, um, this is one of my, my, my main concerns is, is I want to be in charge
6010740	6013500	of how something gets installed on my system.
6013500	6018100	And I like the package matters and stuff, but let's take go for example, right?
6018100	6021620	Depending on where you install it, you're going to get version 16 or 17.
6021620	6023500	You're not going to get version 1.18.
6023500	6026780	So in order to get a 1.18, you got to do some extra things to make sure you get the right
6026780	6027780	one.
6027780	6032860	You can try to customize an extra, you know, get repo, uh, an extra, you know, app repository
6032860	6036660	in order to get the latest one to do apt install, or you can just write a minimal script that
6036660	6040500	curls down the right tar ball and, and untars it to the right location.
6040500	6046500	And so the ability, this is why we did bash scripting my friends before I wanted to do
6046500	6054100	anything with configuration because you know, if you don't know how to do basic bash scripting,
6054100	6059220	you're really going to be lost when it comes to automating yourself, you know, and configuring
6059220	6063940	your life in Linux and, and, and that includes writing those installers.
6063940	6066140	So we covered that over three weeks.
6066140	6068780	So hopefully you've got at least enough bash behind you to understand what we're going
6068780	6069780	to be reading.
6069780	6070780	All right.
6070780	6073460	So let's go back to the container and read the default bash RC, which I just copied over
6073460	6074460	here.
6074460	6078180	Um, and let's break this down line by line as we were going.
6078180	6079180	All right.
6079180	6083580	So the first thing you see is a shebang line that has just the word bash in it.
6083580	6085140	And this is for one purpose only.
6085140	6092900	This is to tell, uh, my VIM or any VIM, whether or not VIM has been configured yet, which
6092900	6096700	is kind of the point that it's a bash file, right?
6096700	6103060	Uh, dot bash RC is not by default recognized as a bash, uh, thing.
6103060	6107700	And of course you could always do set, you know, FT equals bash here.
6107700	6109340	And that'll do the same thing.
6109340	6112300	But that's just a nice convenience.
6112300	6113300	It works everywhere.
6113300	6115780	It does not actually evaluate it at all.
6115780	6116780	It's just a thing.
6116780	6119620	You'll see people, pearl people doing that too, sometimes Python people will do that.
6119620	6127380	Um, this next line is the default line that's read by shell check to disable certain checks
6127380	6129820	that I think are dumb or stupid or overzealous.
6129820	6131620	And I turned that off.
6131620	6134460	And I haven't run shell check on my, I'm kind of embarrassed to run.
6134460	6135460	I don't want to do it.
6135460	6138380	I haven't run shell check on my, on my bash RC in a long time.
6138380	6142820	I am regularly changing my bash RC and not running shell check on.
6142820	6143820	I probably should.
6143820	6150620	Um, so anyway, and, and then we're onto the most important piece of the beginning of this.
6150620	6151620	Okay.
6151620	6155020	And this is what allows you to have a single file instead of all those other files.
6155020	6159740	Remember all that talk we said about login and interactive shells and all that stuff.
6159740	6161240	Well, here you go.
6161240	6165840	This is one of the most cryptic things any beginner will ever see.
6165840	6170160	And I, to this day, still have trouble understanding what it is.
6170160	6174800	So we're going to unpack it, but I want you to know that all it's really doing is it's
6174800	6182160	detecting whether this bash RC is running from a login shell or is it running under
6182160	6183960	an interactive shell?
6183960	6185120	Okay.
6185120	6192280	And, um, if it's running, uh, interactively, then it continues to work.
6192280	6196240	If it's not running interactively, and this is, we were talking about this before, we're
6196240	6199600	kind of bouncing around the topic.
6199600	6203120	Sometimes you don't want all of this to run, right?
6203120	6206840	So if it's running interactively, I want this bash RC to run.
6206840	6211400	If it's not running interactively, I want it to end immediately.
6211400	6216000	I want it to stop working and I want it to return, right?
6216000	6219360	And if you don't do that, then every shell script under that is going to run the bash
6219360	6221240	RC file.
6221240	6224960	And I forgot about the nuances of this, but that's what this is doing.
6224960	6230840	This is ensuring that, um, and I, if I think, if I remember right, I think, um, I think
6230840	6235760	no matter what dot pro, well, no, that's not right, never mind, uh, prefer version that
6235760	6238400	might not be a part of the package measure repo.
6238400	6240120	Yes.
6240120	6241120	That is part of it.
6241120	6242120	Problem.
6242120	6243120	Yes.
6243120	6244120	That is very true too.
6244120	6245120	And you stick a list of packages and you have an app.
6245120	6252040	No, you can't actually, um, yes.
6252040	6253040	Animation first approach.
6253040	6254040	Yes.
6254040	6260360	Uh, if we're just doing not manual action, yeah.
6260360	6263160	And another thing too about writing install scripts and we're going to talk about that
6263160	6268920	at length next week is I, I regularly take those install scripts and copy an install
6268920	6270560	script over to a system.
6270560	6276360	I want to put that on or I copy that in skull script and I put that code into a Docker file
6276360	6278160	to create a new Docker image.
6278160	6281480	Um, so there's lots of reasons to isolate your stuff.
6281480	6285120	I've tried to make my own package management systems before and stuff in a bottom line.
6285120	6290360	I just broke down and make individual scripts and make somewhat logical break up here.
6290360	6296000	So all you need to know about this is that this says return right away unless this is
6296000	6297560	an interactive login show.
6297560	6298560	Okay.
6298560	6304680	And you can actually look at, um, I don't know if this is going to be covered here.
6304680	6309440	We're going to have to go look for that.
6309440	6311440	Oh, whoops.
6311440	6322560	Uh, let's go see that actually dollar that actually does say what does dollar, uh, do
6322560	6325960	in Linux.
6326920	6331680	Yeah, I don't, but the, the things change too much.
6331680	6334760	It changes too much for you to modify your VM that often.
6334760	6336960	It's way too tedious in my opinion.
6336960	6341920	Uh, so anyway, Linux terminal.
6341920	6344680	So they got all these special things, right?
6344680	6351800	Um, these are all the arguments, like what the argument numbers are actually, I'm this
6351800	6360640	I'm trying to look, I'm trying to look for the actual explanation of that thing.
6360640	6366160	I know you can just echo it by the way, it'll tell you all the things in it, but I've never,
6366160	6372400	these are all of the commands that have been set for the current shell.
6372400	6374880	Yeah.
6374880	6377640	So, yeah.
6377640	6389000	So you could do, I'm trying to find, I think it's options.
6389000	6399320	I should know this, but I don't know this dollar, it's preceded by dollars per understand
6399320	6407640	what dollar dash, I think we have to escape it.
6407640	6408640	There it is.
6408640	6415640	PS one is set and dollar dash includes I, oh, there we go.
6415640	6416640	Here we go.
6416640	6422360	Oh, look, look, a login shell and the good reason I read, read the bash man page.
6422360	6428680	A login shell is one of the first characters of argument zero, uh, is dash or when it started
6428680	6434440	with dash dash login option and interactive shell is one started without non-option arguments
6434440	6438960	unless dash s is specified and without dash c option, blah, blah, blah.
6438960	6446800	So PS one is set and so you don't even get a PS one unless dollar I includes, unless
6446800	6450840	dollar dash includes I, if bash is interactive.
6450840	6457840	So this is how you can tell if it's interactive and let's go see if we can find the next one.
6457840	6461360	The current set of options, there we go.
6461360	6462360	Here we go.
6462360	6463360	Here we go.
6463360	6464360	Here we go.
6464360	6465360	Here we go.
6465360	6466360	Here we go.
6466360	6467360	Here we go.
6467360	6468360	So signal the end of options.
6468360	6469360	Okay.
6469360	6472960	Cause all R extra to be assigned.
6472960	6477440	So here's all of the options, right?
6477440	6484880	So we have H set, location of commands that are set.
6484880	6488200	So I guess that's all the commands that, all the options that were passed the bash.
6488200	6494320	I've never really looked.
6494320	6499760	The options are off by default unless otherwise noted using plus rather than dash causes the
6499760	6502000	options to be turned off.
6502000	6506400	The options can be, can, can also be specified as arguments to the indication of the shell.
6506400	6509880	The current set of options may be found in dollar dash.
6509880	6512080	The return status is always true.
6512080	6513080	Interesting.
6513080	6518800	So dollar dash tells you all your options.
6518800	6521800	Yeah.
6521800	6528400	So that, that's interesting because some of them are just indicated by a dash, you know?
6528400	6531200	So, so yeah.
6531200	6532200	Very cool.
6532200	6536240	Anyway, so this is how you check if it's interactive and this is pretty much code.
6536240	6537240	Hi Matt.
6537240	6538240	How you doing?
6538240	6542240	So this is code you're pretty much going to need to write no matter what, right?
6542240	6543240	This always to be there.
6543240	6544240	All right.
6544240	6545440	Let's go on.
6545440	6547440	So a district detection.
6547440	6553880	So this is something, I actually had a very exhaustive district detection section at
6553880	6555800	one point.
6555800	6561040	I was checking the U names for Mac and, and all these different versions and I deleted
6561040	6562040	it all.
6562040	6565920	If you go back in my files and look at the history of that, you can find that this is
6565920	6567240	actually dead.
6567240	6572160	I don't do WSL2 at all anymore, so I would take that out.
6572160	6578720	But if you want to set a variable, we're, you know, back to, this is why you know bash,
6578720	6579720	right?
6579720	6582960	If you want to set an environment variable that contains your distro, you can do a little
6582960	6588240	bit of detection and then you can have a single bash RC that has conditional logic in it for
6588240	6591360	the different distros.
6591360	6600800	I am so regularly on the one-two server and potentially in the future, Fedora or, you
6600800	6604840	know, Rocky or something that I really don't care.
6604840	6612000	But I also have a bash RC that's, that I run on my Mac, but I stopped caring about that
6612000	6615600	as well because I started running VMs and just using Linux everywhere.
6615600	6621240	So in order to simplify my shell, I added this U name, let's look at U name.
6621240	6637800	So let's see, use U name to see, to see info about the system.
6637800	6643680	So U name and there's LS, LF or whatever, not LF, there's no one.
6643680	6644800	U name is pretty common though.
6644800	6651360	So U name, U name dash A, this gives you basic information about your system.
6651360	6654560	And we'll just, I'll let you read about that on your own.
6654560	6661560	So U name dash R gives you, I think the, what is it, the distro?
6661560	6665840	Oh, it gives you the actual version.
6665840	6666840	Interesting.
6666840	6669880	And I noticed the WSL, if you do that, you get Microsoft.
6669880	6670880	It's so weird.
6670880	6673520	I would put that, that doesn't make any sense.
6673520	6674520	Okay.
6674520	6677240	So at one point I had all the rest in there, I deleted them all.
6677240	6678240	Yeah.
6678240	6683840	Because Darwin, if you're on a Mac, it gives you Darwin, if you're on, you know, whatever.
6683840	6686440	Local utility functions.
6686440	6688440	So these are some functions that I wrote.
6688440	6691920	By the way, if you're going to do an inline function in Bash, you're supposed to do Bash
6691920	6692920	already.
6692920	6693920	We just spent three weeks on it.
6693920	6694920	Okay.
6694920	6699640	So if you, I put underscores in front of things that I want to be private, I just do that
6699640	6703640	no matter what, just to remind me visually.
6703640	6707080	So this, by the way, we didn't talk about this before.
6707080	6711960	This redirects both standard error and output at the same time.
6711960	6714840	It's a Bash four plus ism.
6714840	6719160	And you can do one liner's functions if you put a semicolon in there.
6719160	6723000	You got to make sure to put a semicolon in there because that serves as a line return,
6723000	6724000	right?
6724000	6728840	So this is probably not the best, I probably use command dash v here, but that would be
6728840	6730000	only if I wanted to command.
6730000	6735520	So type says, this is, I just have this to check whether I either have a function, alias
6735520	6738320	or script, right?
6738320	6742320	If I have any of those three script in the path, if I have any of those three that will
6742320	6746240	come back as positive, source if.
6746240	6754400	So source if says, if the first argument exists, if it's readable, if it's a readable file,
6754400	6756840	then source it.
6756840	6758320	And what does sourcing do?
6758320	6761400	So we haven't talked about this in Bash before, but I'm going to go through it.
6761400	6769560	So sourcing, which is either the word source or a dot by itself, literally, this does the
6769560	6774480	same thing as if you typed every line of the file at that location.
6774480	6777240	So it's not like import in Python or something like that.
6777240	6783960	It's the same thing as if you had actually typed those lines at that location, as is.
6783960	6787320	And it's very essential in your Bash or C file.
6787360	6792920	Also, I really make sources of security flaws because somebody who makes some stupid app
6792920	6796400	out there is going to say, just source this and you'll be good.
6796400	6798320	And they don't even have you look at the code.
6798320	6803040	Cobra is one of these dumb things that does this.
6803040	6804840	And we'll get into that a little bit later.
6804840	6808520	So environment variables also see NVX.
6808520	6813640	NVX is a command of mine that helps me manage environment variables without having them be
6813640	6814640	hard coded.
6814640	6816640	Hey, how are you?
6817520	6818520	What's that?
6818520	6823400	I remember to test for interactive to use the test command itself.
6823400	6824400	That's another way.
6824400	6825400	Yeah.
6825400	6826400	That's another way to do that.
6826400	6828400	You could also do that for sure.
6828400	6829400	Yeah.
6829400	6836320	And that's actually how I test for interactivity in other applications.
6836320	6843520	I think that the way of using dash T, of using, I don't use single brackets, but if it's
6843520	6848120	just, you know, I think you can use that as well.
6848120	6860160	If you are, I think you could do that on any shell, not just bash.
6860160	6863240	So I've seen both of these.
6863240	6866240	I actually do that very thing in my bash code too.
6866240	6867880	So they're both work.
6868720	6875720	The reason this one is here is I'm pretty sure this one works in shells that are not
6875720	6876720	bash.
6876720	6879400	Did I get that right?
6879400	6881760	I think it works in POSIX as well, but I don't remember.
6881760	6885640	I've had this this way for God, since the 90s.
6885640	6891440	So what this does, by the way, everybody, Klondike is repeating something we talked
6891440	6892760	about earlier.
6892760	6899600	This checks to see if the terminal to which the running shell program is connected.
6899600	6908120	If the standard output, which is zero, is going to standard output, I mean, if the program's
6908120	6916240	output is being sent to zero, which is standard output, if it's not, then you know that it's
6916240	6919040	embedded inside of something else.
6919040	6920200	C shell as well.
6920200	6921200	Does it?
6921200	6922200	Yeah.
6922640	6923640	Yeah.
6923640	6928760	So I think this might be a better answer saying you say that.
6928760	6929760	Thank you for bringing that up.
6929760	6930760	Yeah.
6930760	6936560	I'm going to put that in the notes.
6936560	6948400	When to use dash t zero versus case dot dot.
6948400	6950960	So yeah, that's a good thing.
6951000	6956640	I don't think I really, I mean, I honestly didn't know that until today.
6956640	6963240	I mean, I knew that it worked on bash, but I, and I suspected it worked on AT&T and other
6963240	6966560	stuff, but that it's hard because I've been around for a while.
6966560	6971840	So I don't always remember whether it works on AIX or whatever.
6971840	6978600	And this, my original bash RC was created to run or it wasn't even a bash RC originally.
6978600	6981360	And it was just, you know, whatever.
6981360	6985040	And it was originally designed to run, to run on anything.
6985040	6986960	It's very much of just bash now though.
6986960	6987960	All right.
6987960	6989840	So here we have a number of environment variables.
6989840	6990840	Let's go through these.
6990840	6991840	What time we got?
6991840	6995160	So I'm just going to power through my friends.
6995160	7000520	So this is using the default sort of thing.
7000520	7005440	It's a little bit redundant because, you know, I could have just done this, but this says
7005440	7011320	set the user to the user, uh, it will go until six map.
7011320	7013960	So and then it's just me at home eating food.
7013960	7015840	I'm not going to do anything fancy today.
7015840	7020440	I got, I'm, I'm, I got my jammies on, I'm making YouTube videos with my jammies on.
7020440	7022600	That's how shelly I'm doing.
7022600	7027040	Um, so user equals user, whatever.
7027040	7028800	And then who am I?
7028800	7032240	So this actually runs the command, who am I?
7032240	7038120	And gives you the current, um, effective user ID.
7038120	7040480	And you can read all about it here.
7040480	7045920	Uh, what's the difference between effective user ID and user ID?
7045920	7046920	Right.
7046920	7053440	And there, I think I could have used an environment variable for that, but that's a reliable way
7053440	7054440	to do it.
7054440	7058160	The reason I want this is so that I can set these things up and, and if I'm running as
7058160	7062360	a different user, uh, my, my brush are still work, right?
7062360	7063360	These are all exported.
7063360	7064360	Why?
7064360	7067200	Why am I exporting these?
7067200	7069800	Somebody, somebody give us a quick and dirty answer.
7069800	7074640	Why am I exporting these variables instead of just setting them for this file?
7074640	7079840	I mean, we cover this as a bit of review.
7079840	7087240	Why not just do whatever, right?
7087240	7092600	We're exporting them because we want any program that uses this shell, which is every
7092600	7097680	single program after the shell starts to use them as well.
7097680	7104120	So that means when I run any program at all, uh, that starts from the shell as the parent,
7104120	7105120	it gets it.
7105120	7109280	So that's what exports about, um, we're putting double quotes around everything for safety
7109280	7111600	because she'll check told us to write.
7111600	7114240	We don't want people doing crazy things there.
7114240	7116680	Uh, I'm setting a repost directory.
7116680	7119520	I, I personally think it's good to have your get it.
7119520	7124560	We'll talk about the get up stuff next week, but I personally use a repost directory and
7124560	7127360	put everything in there and we'll talk about that a lot.
7127360	7131800	I have a dot files repo, which links to my GitHub repos.
7131800	7136240	And then, um, I can use that as a variable as well.
7136240	7141160	Uh, I've added some other ones, some snippets and scripts, my help browser, you know, these
7141160	7142680	things keep growing.
7142680	7145760	Um, I have documents downloads and templates and things because not everybody wants to
7145760	7147320	name them the same.
7147320	7152160	And I have those pointing to other things, uh, public and private, my pictures, music
7152160	7156760	videos, PDFs, virtual machines, um, all stuff that I've just come to use for my other scripts
7156760	7157760	and stuff.
7157760	7159080	Uh, is that directory?
7159080	7160080	This is a big thing.
7160080	7164200	This is, you know, for my notes and stuff, my Zettle cast back when I was doing videos
7164200	7165720	to go with my Zettle cast entries.
7165720	7167120	I don't do that anymore.
7167120	7171280	Um, my clips directory, which makes me very sad because I can't run my clips now that I'm
7171280	7173200	doing terminal only.
7173200	7174280	I need to figure that out.
7174280	7175280	I'm going to do that.
7175280	7178760	And then command clip, this stuff is all old, I need to get rid of it.
7178760	7181040	So here's a very controversial one.
7181040	7185120	I'm setting, I'm explicitly setting the term to X term, two to six color.
7185120	7190960	And this, this is highly controversial because it's not necessarily a two to six color terminal.
7190960	7196040	And I don't want to go down the rabbit hole of terminal color right now, uh, when we do
7196040	7199960	some of our coding and go, we're going to be talking about escape sequences and terminal
7199960	7204920	colors and, and, and dealing with all of the ANSI terminal, you know, standards and everything.
7204920	7206520	So we're going to talk about that.
7206520	7210040	But if you want your 256 colors to work, you have to do this.
7210040	7214920	So if you're going to run things like sunrise, which, uh, I know it's like, you see how it's
7214920	7217600	kind of the colors are not completely on.
7217600	7221840	It's kind of because there's, there's a millions of colors set, right?
7221840	7230240	So we'll get to that HR rule is my own rule with, uh, 73 total, uh, editor of EI visual
7230240	7239120	VI. This is your editor, uh, editor prefix VI, uh, my, my private binary key that we'll
7239120	7241360	talk about in the go environment variables later.
7241360	7245520	Uh, these are really important, but they're not, we're talking about it all right now.
7245520	7250880	Uh, Python don't write by who I used to have a really derogatory comment right by the
7250880	7252560	century.
7252560	7256880	If you go through my history, you can go find it because I hate it.
7256880	7262280	Who made this, who picked this name, some stupid Python programmer.
7262280	7269800	Um, so anyway, LC collate, this makes all of your sorting, uh, use the C method for,
7269800	7273920	for, for sorting and you're going to want to set that for everything.
7273920	7279240	Um, the C flags, this is just for C compilation, um, by standard flags, it just uses them.
7279240	7282280	We're not going to do any of that until maybe Christmas, we'll go through the C book pop
7282280	7283280	possibly again.
7283280	7286000	Um, and then here's some fun stuff.
7286000	7287000	Okay.
7287000	7288000	A lot of people don't know this.
7288000	7290880	This, this is something I didn't find until my forties.
7290880	7295880	And this is, this is based on, this is how I get terminal color, right?
7295880	7300960	So when I'm doing, when I do man LS, I get colors in my LS, right?
7300960	7306440	And people will tell you to use some other form of man or, you know, they'll install
7306440	7308520	this or that program.
7308520	7315720	All you really need to do is use the historical support for term cap, which is a way of communicating
7315720	7318000	what type of terminal you have to everything.
7318000	7321960	Now that's terminals have been really, really standardized at this point.
7321960	7327480	Um, so these settings are not as significant, but you can go in here and we're actually
7327480	7334520	putting in, uh, the codes for the colors, which again, we'll get into when we do go programming
7334520	7336880	and you can set them.
7336880	7337880	You can set them.
7337880	7343600	And once you set them, uh, anytime you do anything that uses, uh, less or more or anything
7343600	7347920	that, that, that uses, you know, trough and rough, all the stuff that does that rendering,
7347920	7349240	you'll get color.
7349240	7351280	So if you want color, that's how to do it.
7351280	7355880	Uh, Ansible inventory, uh, this is something left over from Ansible that I don't even know
7355880	7356880	about.
7356880	7360160	There's my good old Docker UNIX host, which I hate.
7360160	7362720	We're not going to talk about that right now.
7362720	7367520	VIM spell, um, we'll talk about that when we talk about VIM configuration after this.
7367520	7371680	Uh, it's, this is pointing to your spelling, your spelling dictionary.
7371920	7377240	Uh, GPG, GPG, TTY, I don't know about that one.
7377240	7380320	We'll have to go look back at that one when we do GPG.
7380320	7386080	So pager, this is important, um, this checks to see if you have less pipe enabled.
7386080	7391960	Um, if you do, it makes it so your pager acts better.
7391960	7394680	Uh, that's all I can say about that.
7394680	7396200	Uh, let's keep going.
7396200	7397200	Door colors.
7397200	7398200	Okay.
7398200	7399200	This is super important.
7399200	7400200	Right.
7400200	7405080	If you're in your terminal on the LS command, you have to set up your drawer colors.
7405080	7406320	All right.
7406320	7409000	So, um, let's do that.
7409000	7410000	Let's look at that.
7410000	7413480	So drawer color.
7413480	7418680	And do you, if you think that I typed this by myself, you would be vastly mistaken.
7418680	7422840	So I have taken somebody, I love that this, this is such an old file.
7422840	7428360	It actually has something that shows you the colors when you set them, isn't that cool?
7428360	7434600	So this is an ancient, ancient file, a dot dir colors file that you need to go in and
7434600	7435600	set.
7435600	7438240	I, I don't even know where I got mine.
7438240	7443200	I, I ripped it off from somebody years ago and I have been tweaking on it ever since.
7443200	7448440	Um, but this allows you to set the colors for the different type of files depending
7448440	7452040	on your, on your, you know, your, your terminal color.
7452040	7455440	And if you want my terminal cause, I already told you, you can go get those in my dot files.
7455440	7461080	Um, but this is how come that when I, unless I get files that look a particular way, I
7461080	7464960	go in slash proc L S S L you see some of those files.
7464960	7465960	They look a little bit different.
7465960	7470320	Uh, I don't see any FIFOs though, where would they be?
7470320	7474440	Maybe in slash, um, yeah, look at all those weird, different colors.
7474440	7479360	See, I might actually want to change the, the TTY, uh, color scheme now that I'm looking
7479360	7480360	at it.
7480360	7485120	I haven't ever invested a lot of time into it, um, but, but yeah, that's, that's where
7485120	7489280	you would go do all that stuff, uh, is in your adult dirt colors.
7489280	7494640	This says dash R says, if I have a readable dirt colors file in my home directory, then
7494640	7499400	evaluate dirt colors dash B home home colors.
7499400	7506440	And that means evaluate, you have to be very, very careful with evaluate says take run this
7506440	7507440	command.
7507440	7508700	See how it's in quotes.
7508700	7511440	It actually runs that command at that location.
7511440	7512440	All right.
7512440	7514120	It's not the same as an import.
7514120	7517400	It actually runs the command and you build up the command as a string and then you run
7517400	7518800	evaluate the string.
7518800	7523000	Eval is generally considered to be really, really, really bad and you don't really need
7523000	7524000	it in bash.
7524000	7529120	There's another way to do this, uh, using a here variable, um, I mean, uh, not a here
7529120	7533480	variable file descriptor replacement and I probably should update that, but this works
7533480	7537960	any on any shell, um, and line text backgrounds.
7537960	7538960	Yeah.
7538960	7541720	You can use any kinds that you want.
7541720	7548000	Um, I've left this as an eval because this, this particular code right here works on any
7548000	7549880	Unix or Linux system.
7549880	7554160	Uh, and if I were to do some of the other fancy batches and there, it would not work.
7554160	7555720	So I left it that way.
7555720	7559720	Uh, uh, it's just that that makes it, I love color.
7559720	7560720	Yeah.
7560720	7565480	So this is some pretty amazing magic that I discovered on the internet, um, two years
7565480	7571480	ago actually, and I will never, ever go back and I cannot tell you how cool this is.
7571480	7572920	Uh, I'm running out of steam.
7572920	7575560	I've been talking straight for 43 hours.
7575560	7576560	How much time we got?
7576560	7583480	Are we, are we, this one's going to take a while to talk through, uh, date 427.
7583480	7584480	Man.
7584480	7587200	I haven't, I've been, I haven't been taking any breaks.
7587200	7588200	I'm just going to keep going.
7588200	7590440	I want to get through these configs today.
7590440	7591440	All right.
7591440	7594600	So, I mean, you got, you all can stop the video, right?
7594600	7599560	So if you need to stop it, uh, so a couple of things here.
7599560	7605200	This thing, I want you to see how the functions have the pattern of a function definition
7605200	7609320	body and then at an, an export.
7609320	7611760	I know I need a coffee break, but I'm not going to take it right now.
7611760	7615360	I'm actually really hungry, but I'm, I'm going to go through the six.
7615360	7619560	So maybe after this bash RC and then we'll do the MRC after this.
7619560	7620560	Okay.
7620560	7621560	I want to get through this file.
7621560	7622560	It's going to take a long time.
7622560	7623560	This is like 800 lines long.
7623560	7629520	So, um, so here we have where this, I don't want the, the, the, the, the, the, the, the
7629520	7633480	convention I want you to see here is we will soon.
7633480	7634480	Yeah.
7634480	7638720	See here it says and export path append.
7638720	7646120	If you don't do that, then this says conditionally, if, if there's nothing wrong with the syntax
7646120	7653440	of this function, then export it so that sub bash shells can use it.
7653440	7654440	Okay.
7654440	7656040	That's what this is about.
7656040	7657240	That's what that convention is about.
7657240	7658360	And this is the way you should do it.
7658360	7661080	And this is a bash only thing.
7661080	7667960	You cannot export functions from Z shell and, um, exporting functions in bash was the, the
7667960	7670720	cause of shell shock, uh, or bash door.
7670720	7674120	If you want to go do the research on it as the biggest, is the biggest Linux bug in history
7674120	7680360	some say they refer to it in Mr. Robot actually, uh, shell shock was called.
7680360	7686080	And what it did is it allowed people to define functions, uh, just by setting, setting variables
7686080	7691920	because they, they had a problem and that, that's been fixed for more than a decade.
7691920	7696280	And so that's not a problem, but the ability to export functions in bash is one of its most
7696280	7698920	powerful and most controversial things.
7698920	7702560	Um, but that's, that's, that's a function that's doing that.
7702560	7707760	So this says for all the arguments that we've talked about that, go ahead and check them.
7707760	7711840	And I'm going to go through this logic and then, um, we're, we'll take a break of this.
7711840	7715040	Um, so path equals.
7715040	7720280	So again, the path is a variable, an environment variable path, right?
7720280	7721440	Echo path.
7721440	7724520	Here's the, here's the short, here's the actual version.
7724520	7731560	The path is a variable that contains in order every directory to look in to run a program.
7731560	7734400	So when I do which LS, it tells me, Oh, it's user bin LS.
7734400	7740920	Well, we see here user bin LS, oops, user bin LS is one of the directories, right?
7740920	7745480	If I were to put a program called LS up higher in the directory path, that one would resolve
7745480	7749920	first, which is one of the reasons I don't like using user bin ENV Python or bash or
7749920	7757280	things like that, because user bin ENV, uh, can be defeated by messing with the path locations
7757280	7758280	of things.
7758280	7763240	If you, if you want to own somebody, uh, put something that they use all the time.
7763240	7768920	And if you get access, put something in a path above that, uh, and watch them get very
7768920	7773920	confused because, you know, it'll run that instead of what they think.
7773920	7776880	So and you'll do that to yourself a lot too.
7776880	7784800	Um, so what this script does, what this function does is it adds something to the end of the
7784800	7792160	path if and only if that thing exists, right?
7792160	7797040	That thing, that thing is not already in the path.
7797040	7804600	That's what this is, uh, that thing doesn't already exist in the path and it also actually
7804600	7806460	exists as a file.
7806460	7811120	So the test that she says, if it doesn't exist, we're going to skip it, right?
7811120	7815240	And this is why when I added that new Z bin and I tried to look for it, I couldn't find
7815240	7819520	it and it had to rerun the shell because you don't want to unnecessarily clutter your
7819520	7821800	path with a bunch of paths to things.
7821800	7827400	So I am a huge fan of this approach because it only updates your path with stuff that
7827400	7832800	exists and because if, if you have something in your path and somebody sees you have something
7832800	7835560	in your path and there's a directory there and they can access, they can just go put
7835560	7836560	everything one in that directory.
7836560	7840800	I mean, they have to get, you know, they have to escalate privileges to do that, but still
7840800	7843280	it's just not wise to do that, right?
7843280	7847400	You shouldn't be putting anything in your path that, and, and you can actually append to
7847400	7848400	the back.
7848400	7850360	The other thing that's really great about this is let's say you have a script and you
7850360	7854640	want to add a new path just for the, the sake of testing, you can run this from the
7854640	7856120	command line, right?
7856120	7858960	So I can go over here and I can say so path, right?
7858960	7862200	And it gives me my path and I can say, well, what's my current directory?
7862200	7863200	Okay.
7863200	7864200	Well, that's not in the path.
7864200	7865200	Let's temporarily add it.
7865200	7871680	So I can say path prepend, path prepend dot, right?
7871680	7876440	And now when I run my path, I can say, okay, so let's say that I'm running a bunch of stuff
7876440	7878200	in this directory, right?
7878200	7893040	So, you know, like echo, echo, hello, hello world, do, hello, schmox, hello.
7893040	7898800	And now I can run hello and it will see it, at least it should see it.
7898800	7902600	Why did I not do it right?
7902600	7905760	Oh, whoops.
7905760	7907360	I had an infinite loop.
7907360	7908520	So there you go.
7908520	7915520	See how it ran it without me doing the dot slash, but, but, uh, exec bash, I think it
7915520	7917520	actually is going to remember it.
7917520	7921960	Yeah, it still did see that, but it put the other stuff in front of it.
7921960	7922960	That's interesting.
7922960	7923960	Hmm.
7923960	7925960	That's really interesting.
7925960	7929120	So yeah, but you can go ahead and remove it out of there if you want.
7929120	7933560	Um, so anyway, if you temporarily want to add something to your path, you can just type
7933560	7934560	that and add it.
7934840	7939400	It also prevents you from adding, a lot of people who are in their scripts, what they
7939400	7944880	will do is they will add to the end of the path and they'll just keep adding to the end.
7944880	7947360	And so you'll end up with a path.
7947360	7951800	Every time you rerun your shell, you end up with a path that's got the same path in it
7951800	7954000	like 40 times, right?
7954000	7956920	So, so this fixes that.
7956920	7959280	And I encourage you to study it and look at it.
7959280	7963160	Um, another cool thing about this is that, I don't care if you can see this here, but
7963160	7970160	this adds any command, uh, that I have so I can actually make a GitHub repo and it will
7970160	7973000	look inside of the repos.
7973000	7977880	And if it sees anything in there, it will add that directory to the path automatically.
7977880	7982160	So this allows me to, some of my bigger commands, I can put them in their own get repo and then
7982160	7985640	they get added to the path automatically as long as I put them in the right place.
7985640	7990840	Um, and then we have all the, all the regular things here, open gdk bin and my script directory
7990840	7991840	is last.
7991840	7995080	Um, and again, we have the path append here.
7995080	7996640	So this is my append path.
7996640	7997640	I put all my stuff.
7997640	7998920	And this is relatively new additions.
7998920	8003760	I put some of the virtual box stuff up there, uh, because again, I can run this on git bash
8003760	8006560	or the Bissell too, or whatever, right?
8006560	8011440	So I can, I can do some of that stuff ahead CD path.
8011440	8012440	Okay.
8012440	8016640	So this is the last thing we're going to cover for a bit before I go get some coffee or something.
8016640	8025960	So the CD path is by far the most misunderstood, not known thing in bash.
8025960	8032400	Anybody who comes at you with, I want, I want to be able to do, I want to do fuzzy finding
8032400	8037520	and tab completion on my paths and, and I just love how all my Zshell just reads my mind
8037520	8038720	when I want to change directories.
8038720	8041160	They don't know about CD path.
8041160	8045360	It's very poorly documented, even in the bash man page.
8045360	8048880	And it's considered unsafe by some people.
8048880	8053800	And I want to talk about it fully before we get into it, um, because of that.
8053800	8058520	So CD path is a special environment variable, which for some reason doesn't even show when
8058520	8059520	you try to echo it.
8059520	8060520	It doesn't even display.
8060520	8062520	I think it's a bug.
8062520	8064280	And I mean, you can't do this.
8064280	8066960	You can't echo CD path.
8066960	8068460	It doesn't work.
8068460	8070680	I don't know why it, wait, that worked that time.
8070680	8071680	I must have lied.
8071680	8072680	Oh well.
8072680	8073680	I lied.
8073680	8074680	I didn't work before.
8074680	8075680	I was wrong.
8075680	8077360	I must have been doing something wrong.
8077360	8081640	So the search for path for CD, this is a column separate list of directories that the shell
8081640	8085320	looks for destination directory specified by the CD command.
8085320	8087680	A sample value is dot.
8087680	8091320	And okay, this is the part where it gets controversial, right?
8091320	8092520	There's like that.
8092520	8094680	Never, never, never put dot in your path.
8094680	8095680	Right?
8095680	8096680	Why?
8096680	8099000	Because you don't want people running stuff in your current path.
8099000	8103080	They want to make sure you put it in a safe place or make them type dot slash, right?
8103080	8107080	But when you're talking about seeding around to different things, you always want to include
8107080	8108520	dot colon as the first.
8108520	8113560	And if you don't, it's really funny.
8113560	8117460	If you don't do that, if you, if you add a CD path and you don't put that, you'll type
8117460	8121560	CD to go into something that's in the current directory and it will take you someplace completely
8121560	8123480	different based on the rest of the path.
8123480	8126560	Because it won't let you change directories into anything in the current directories.
8126560	8130800	Very, very, the first time you do it and I did it, it was, it's pretty freaky trick,
8130800	8133160	triggers it out, you know, freaks you out.
8133160	8138400	So, so yeah, this says, this says I want to look in my current directory.
8138400	8142000	I want to look into my home directory or I want to look into the user directory.
8142000	8146080	And if you look at my CD path, it's pretty complicated.
8146080	8156360	I actually build up a CD path, CD path, I build up a CD path that contains my dot files,
8156360	8158400	my common directories.
8158400	8160760	And this is how I can get away with this.
8160760	8163880	So I can do CD scripts, right?
8163880	8165400	Look what it took me to.
8165400	8170080	I was in my home directory and it took me right into the scripts directory.
8170080	8178280	And yes, but it does add to the length of letters to type different, differential out
8178280	8179280	of directories.
8179280	8180280	I don't know.
8180280	8181280	It depends on the directories.
8181280	8183560	I don't have that many places I go.
8183560	8184560	No.
8185520	8188240	I mean, yeah, I mean, what would you do?
8188240	8194560	You could just do CD scripts tab, tab, and I can just do that.
8194560	8198040	It does tab completion.
8198040	8199520	So I don't know.
8199520	8203040	I like it because I don't have to install anything.
8203040	8206680	And people that like to install extra fuzzy finders and tools and stuff like that just
8206680	8207920	exhaust me.
8207920	8214240	I only want to install one RC file and one monolith script.
8214240	8217880	I mean, command from now on, I don't want to have to install scripts or untar a whole
8217880	8218880	bunch of stuff.
8218880	8223360	I want to minimize the amount of time it takes me to set up on a remote system or any system.
8223360	8225480	And that's my priority.
8225480	8229520	So people have different priorities and that's fine.
8229520	8234800	So I would encourage you to look at CD path before reaching for Z shell, which is a horribly
8234800	8238360	flawed shell on several counts.
8238360	8243640	And we'll just burn into your muscle memory things that I think are bad for you.
8243640	8248800	Seriously, a lot of my best friends strongly disagree with that statement, but I'm telling
8248800	8251800	you what I think.
8251800	8257880	Having any friction using CD path, yeah, particularly because it's for an interactive process.
8257880	8264560	Putting is setting up a CD path in an actual script would be interesting.
8264560	8267640	You'd only be able to CD into that thing.
8267640	8274900	You could actually export CD path into a runnable script and force it so that directory could
8274900	8279400	never go in any of those, but those paths, which is a nice security mechanism that's
8279400	8282760	consistent with what we used to do with path by explicitly defining path at the beginning
8282760	8288040	of any script, particularly in system scripts that are shell scripts that run at log in
8288040	8290120	or the running is rude or something like that.
8290120	8292120	And we talked about that a lot during the show programming days.
8292120	8295840	I don't want to get rehashed, but people that write shell scripts these days are just like
8295840	8298640	totally lazy when it comes to security.
8298640	8303400	They use use of an ENV, they don't care where they are, sometimes they'll put dot slash
8303400	8304400	in their path.
8304400	8309960	I mean, they're just lame and it drives me nuts because there was a time when we actually
8309960	8314480	cared about security for these things and you just don't see that that much these days.
8314480	8317480	So yeah, a good old days, right?
8317480	8323040	You've tab complete a lot of directories, so CD path can give you unexpected completions.
8323520	8326760	I don't think it is ever giving you an unexpected completion.
8327360	8329760	No, it gives me because I know where my directories are.
8330360	8336000	Yeah, there has been a time or two where something resolves ahead in priority from another thing.
8336480	8339800	And in those cases, I just CD into one of the top level things that I'm fine.
8340040	8346480	So for example, one of my favorite commands is this CD GitHub.com is like, OK, well, now,
8346480	8347160	now what do I do?
8347160	8348360	Tab, tab, right?
8348360	8351360	CD, tab, tab, and I can get, I can do my old, all my other stuff.
8351360	8357800	So I don't I think the reason I like it is because I'm no less fast than people who use
8357800	8363520	any other type of tool, and I'm 100 percent compliant with bash on any system.
8364160	8371120	So, you know, I if you I don't believe in adding a dependency to your muscle memory
8371120	8373920	or that has to be installed without there being a good reason.
8374160	8378160	And if there's something that's good enough, I'm going to give it more weight than
8378440	8383680	some extra shit written in Rust by somebody who wants to replace, you know, whatever.
8384160	8388120	And that's why I use VI, you know, instead of I use Vim, but that's why I don't use any of them.
8388840	8391440	So anyway, so here's a check.
8391440	8393400	Here's the options.
8393400	8395400	The options are going to take a while for us to talk about.
8396480	8397400	And so is history.
8397400	8399440	So how much how much more we got?
8399440	8401000	We got a line of 150.
8401000	8403480	OK, so we're halfway through.
8403480	8406680	I am going to take a break, though, because I am stop.
8406720	8408640	I'm going to stop talking here.
8408640	8410360	Simplicity is undervalued.
8410360	8412160	I do think simplicity is undervalued.
8412160	8415840	And I, you know, I'll end with this.
8415840	8421760	But the thing that annoys me is that so many people.
8422880	8426400	I don't know if it's an age thing, but I think when you've been around longer,
8427480	8434320	you start to value the simplicity more than you do your ability to show off something.
8434520	8437360	I don't know if it's an age thing.
8437360	8443760	I don't know what it is, but but I find it unfortunate that that sometimes people who
8443760	8447800	choose simplicity who are very capable of using a very highly complex method,
8447800	8453320	they've just chosen the simple one are judged as being simple themselves.
8453640	8457120	And, you know, I don't have any specific cases to talk about here,
8457120	8459480	but I do feel I feel like that's a thing.
8460520	8461920	Yeah, we're going to take a break.
8461920	8463600	We're we're not going anywhere, though.
8463600	8465440	We're going to be here until six tonight.
8466680	8469320	And I don't know.
8469320	8471080	Maybe I might catch the sunset.
8471080	8473520	We'll see. So I'm going to put the timer on.
8473600	8474560	I'm going to take eight minutes.
8474560	8477080	I'm going to go make a smoothie and we'll be back.
8478200	8481800	I can't turn music on for you, though, unfortunately,
8481800	8487760	because the music will be recorded.
8488240	8490200	And I can't I can't do that.
8490200	8491040	Can I do stock?
8491040	8492200	Can I go pause recording?
8492240	8494280	I can do pause recording.
8494280	8495720	Oh, my gosh, I'm going to do that.
8495720	8496720	All right.
8497800	8499800	So on pause.
8501920	8503600	Pause recording. OK.
8503600	8505000	So it looks like we're recording again.
8505000	8507080	All right. So.
8507080	8509800	It's auto-tenera and now it's auto-tenera.
8509800	8511680	We're just talking about music, my friends.
8511680	8514480	We were we were just going we were just we were listening to the killers
8514480	8518240	and and, you know, different people.
8518240	8521840	There's a playlist called She's Still Preoccupied with 2005.
8522480	8525120	It's kind of a play on the 1985 thing, right?
8525120	8530040	And, you know, it's just crazy to me how an entire decade
8530040	8533280	has gone by, a decade and a half since this music.
8535360	8538760	I know it's making me feel old.
8540760	8542960	But it's time to finish up our configuration
8542960	8544720	and have some fun tonight later on.
8544720	8545520	I'm not going anywhere.
8545520	8546320	I'm just getting wondering.
8546320	8548560	Not even the sunset tonight.
8548560	8551240	OK, maybe the sunset looks pretty.
8551280	8554080	We'll see. American hip hop.
8554240	8556680	Yeah. OK, we can talk about music forever.
8557320	8560600	Come back if you're on the YouTube watching this right now.
8560600	8562160	Come back some other time and have fun with us.
8562160	8564160	We we have a lot of fun over on Twitch.
8566600	8567960	But you don't want to hear about that now.
8567960	8569560	You want to skip over. OK.
8569560	8573240	What are all these show check options and where do I read about them?
8574360	8576840	I'm going to confess something right now.
8576840	8579040	I only know what two or three of these actually mean.
8579160	8581080	And I have to go look them up every time.
8581080	8586040	And. And no, I remember finding this problem.
8587400	8589560	We want to cover. We want to cover no clover, though.
8590840	8593240	I think no cover is an important one to cover.
8593240	8598680	So. So. So. First of all, how can you even look these up?
8598680	8601360	I don't recall. So let's go look shopped.
8602800	8605360	Help shopped.
8605360	8609160	So shopped is said an unset shell options,
8609200	8613320	changing the setting of each shell option, which takes the name dash.
8613320	8616720	Oh. Well, how is this different than set?
8618040	8619280	What is set about?
8619280	8621400	Because I use set all the time.
8621400	8622960	How is set different than shopped?
8622960	8625640	I know my club service. Yeah, we'll talk about those ones.
8627400	8630000	Is it for a project of work?
8630000	8632120	Really? Oh, that's so kind.
8632120	8634200	Thank you for saying so. That makes me very happy.
8635960	8636920	I'm going to make it better.
8636920	8637520	I'm going to make it better.
8637520	8639880	We're going to make it so you can do pipes within it, if you want.
8640760	8643720	Anyway, stay tuned for bonsai programming.
8643720	8646320	I may do some of that tonight, but I'm not promising anything.
8647160	8650720	All right. So what is the difference between set and shopped?
8650720	8653840	I have wanted to know this since I mean, I've been doing this for years
8653840	8655440	and I still don't know the difference.
8655440	8656880	So what is it?
8656880	8662800	So set that show V I, which we'll get to is a thing, right?
8664080	8667280	And set our unset values of shell options and positional parameters.
8668400	8670880	Change the value of shell attributes or positional parameters
8670880	8672160	or display the names of them.
8673520	8676320	I mean, seriously, I still don't get the difference.
8676320	8677520	I want help here.
8677520	8679920	What is the difference between set and shopped?
8680800	8682400	I have never known.
8683360	8684640	They're both in there.
8685360	8687600	Change the setting of each shell option op name.
8690080	8691040	Set an unset shell option.
8691040	8691840	Should we try it?
8691840	8692640	Should we try it?
8692640	8693200	Let's try it.
8693200	8696720	Let's do, let's do a, well, let's see.
8696720	8697680	It doesn't be a bash.
8698240	8699840	Let's, let's run a new shell.
8699840	8701600	I'm, I'm going to try something here.
8701600	8704640	Let's, let's see if we can actually set the VI as a default shell command
8704640	8707040	editor with this.
8707040	8708560	I mean, X, right?
8708560	8709040	Experiment.
8709040	8709840	Let's experiment.
8709840	8713280	So run it.
8713280	8713920	What are we going to run?
8713920	8715680	We're going to run it and remove it.
8716240	8720480	We're going to run it one, two server and see what we get.
8723600	8725840	So, so there.
8725840	8729760	So shopped dash O. Yeah.
8732720	8734960	It shows you what the value is.
8737120	8737600	What?
8739440	8740320	Set that show.
8740320	8740560	Yeah.
8742240	8743520	Oh, look at that.
8743520	8749360	So set changed it and shopped just told me what the value is.
8749360	8751040	At least dash O shows you what the value is.
8751040	8751840	That's interesting.
8751840	8752560	I did not know that.
8753520	8754480	I did not know that.
8755440	8755920	All right.
8755920	8762560	So, so, so, so I'll put that in here in the notes.
8764640	8778400	Use shopped dash O to see the value of a shell option and use set dash O
8780000	8783840	to change the value of a shell option.
8784560	8785120	Kind of cool.
8786720	8788080	Are you found a stack exchange thing?
8791760	8792640	What were your search terms?
8792640	8795200	Because I refuse to use a graphic browser.
8795200	8796320	It's against my religion.
8797520	8804400	So set and shopped Y2.
8804400	8808560	You know, I hate it when I have to admit that stack exchange is useful sometimes.
8809280	8810000	I really hate it.
8810000	8814720	Good old Google.
8814720	8815760	No, I used duck duck O.
8815760	8816160	So there.
8817280	8818480	I at least I didn't use Google.
8819280	8819680	Okay.
8819680	8821600	So what are we reading here?
8824240	8827440	A set and shopped are both shell built-ins that control various options.
8828560	8829840	I often forget which ones as well.
8829840	8830480	That's the question.
8830480	8830720	Okay.
8831680	8834000	I tried looking at the second line of help set and help shop.
8834000	8835280	If I did that, we just did that.
8836240	8837440	Don't tell me what I already know.
8837440	8838400	Don't tell me to RTFM.
8840000	8843200	In bash release, it says set or unset values of shell options, personal values and set
8843200	8844240	and unset shell options.
8846960	8847920	This is not helping me.
8849440	8851120	As usual, the first answer is wrong.
8851120	8853600	As far as I know, the set that show options are the ones that are
8853600	8855520	inherited from born self shell.
8856080	8857600	Ooh, now that would make sense.
8858400	8859360	That would make sense.
8865600	8867440	You might know where the comments is strictly speaking.
8867440	8867680	Yes.
8868320	8871520	And the shopped options are the ones that are specific to bash.
8873440	8875120	That makes a lot of sense to me.
8875120	8878400	It seems intuitive, even though I don't see enough proof that that's true.
8879120	8880320	There's no logic that I know of.
8881920	8883280	Any documentation are shopped.
8883280	8885680	Well, there are set to show options like blah, blah, blah.
8888000	8888880	It's probably the idea.
8888880	8890000	I don't want to hear probably.
8890000	8891280	I want to hear what it is.
8891840	8894800	The difference is it changed environment variables.
8894800	8898720	The difference is in the changed environment variable used by bash
8899520	8905840	setting with a set command results in shell ops while shopped results in bash ops.
8906480	8907440	And there it is.
8909040	8910480	And that is worth quoting.
8912240	8913600	That is indeed worth quoting.
8915200	8915600	Yeah.
8917360	8918160	I don't know.
8918160	8918800	We'll figure it.
8918800	8919040	Okay.
8922560	8922880	Okay.
8925760	8933680	Grock the difference between shopped and set,
8934400	8940320	which boils down to set being legacy and shopping bash.
8942480	8943520	I learned something today.
8944320	8945200	Did not know that.
8946240	8947120	Did not know that.
8949600	8950080	So yeah.
8952800	8953040	Okay.
8953040	8954560	So anyway, all right, we're done.
8954960	8956000	We're done with that part anyway.
8956880	8957200	Next.
8958000	8958320	Okay.
8958320	8959680	So what is check wind size?
8960320	8961680	I don't even know how to look these things up.
8962880	8964320	I think we can do it in the man page though.
8964320	8964880	Let's do that.
8967200	8968240	Can we do it in the man page?
8969120	8969680	I think we can.
8970880	8971680	I think we can.
8971680	8972240	I think we can.
8972240	8977200	Um, help shopped.
8978160	8982160	All right.
8982160	8983760	So scoop it up.
8985040	8986480	I'm the scat man.
8988000	8988960	Who played that the other day?
8988960	8989600	It was so funny.
8991600	8992640	Because I'm always doing that too.
8992640	8996560	I'm like, cool story too for the scat man.
8996560	8998480	Did you know the scat man actually had problems speaking?
8998480	8999760	And then he'd made the scat man stuff.
8999760	9001120	Now he's famous because he's a scat man.
9003680	9004480	That's what happened.
9004480	9005120	That's the story.
9006080	9009280	A little, a little, that's the coffee.
9009280	9010720	That's why I'm getting like this.
9010720	9011040	Okay.
9011040	9013360	So shopped.
9013360	9014640	I have no idea how to look it up.
9014640	9015360	Man bash.
9016160	9017440	When in doubt, man it out.
9018400	9018880	Man up.
9022160	9023360	Check wind size.
9026800	9027280	Columns.
9028480	9029760	Columns used by the select compound.
9029760	9030960	So columns is a variable.
9031200	9036000	Automatically said, if the check wind size option is enabled,
9037840	9042160	are you telling me that we don't get columns and rows without the check wind size option?
9042160	9048400	Oh, I'm going to actually put this in here.
9048400	9049040	Wait, no, I'm not.
9049040	9049680	That's a container.
9050560	9053200	That would be, that would be non-productive.
9054000	9056960	I'm going to put this in my own bash receive because reasons.
9057920	9064240	I, I like, I like making my bash receive into like an instructive assistant sort of thing.
9065040	9079520	So even though it's an extra line that parts shopped is for bash ops set is for shell ops.
9081840	9084800	I think shell is actually a dollar dash as well.
9087840	9098320	So check, check wind size enables columns and rows.
9099840	9100640	I'm going to check this.
9100640	9101440	I'm going to check this.
9101440	9104640	I, I, I know that we're going over time, but I don't care.
9104640	9108000	I mean, we're not really, but I want to check this.
9108000	9108880	I'm going to check it right now.
9108880	9121840	So there, docker run dash it anything really that has to be, it has to be bashy.
9121840	9125600	So let's do one, one, two dash, dash or one, two.
9126400	9129920	This is why I do like having Docker around because I can try different distros that really quickly.
9130480	9131920	I could have done with Cali if I wanted.
9134560	9136000	So echo columns.
9136640	9137920	Oh, look, we have columns.
9138640	9139120	Yeah.
9139120	9143440	I wonder if we have, let's see, echo bash ops.
9144720	9147360	We have check wind size set by default.
9148640	9149120	Interesting.
9149120	9151120	So I, I didn't really need to put to set it.
9151120	9152800	It's kind of a built in, right?
9153520	9154240	How do I turn it off?
9154240	9154960	Shopped.
9158400	9159840	I mean, shopped.
9160480	9160960	What?
9161920	9167440	What's the opposite of dash s?
9169200	9170240	I don't know shopped.
9170240	9170960	I'm learning it.
9170960	9171360	So there.
9174560	9176800	Enable, set each up name, disable.
9176800	9177200	Okay.
9179040	9179760	Set that show.
9179760	9180400	We know that one.
9181520	9182240	I know.
9182240	9183360	Unset's for variables, right?
9183920	9187920	So, so let's try.
9187920	9193760	I mean, shopped dash.
9193760	9195040	I've never done this before.
9195040	9196080	U for unset.
9198880	9201760	Check wind size.
9201760	9202800	I want to know.
9202800	9203600	I want to know.
9209200	9210240	Shopped dash.
9210240	9212000	Oh, check wind size.
9214320	9215040	Gosh, dang it.
9218640	9221600	What the heck?
9224960	9225760	All right.
9225760	9227520	Shopped dash you.
9228640	9230720	Check wind size.
9232640	9233040	Uh-huh.
9233920	9235120	I want to do echo bash ops.
9235840	9236560	It's off now.
9237280	9238640	Echo columns.
9238640	9239600	I bet it's already there though,
9239600	9240880	because it was already set when it logged in.
9241760	9242640	I see it told you.
9243440	9244400	I told you.
9244400	9246640	So, so how do I not have that?
9248240	9255680	Exec bash to show.
9257040	9258080	No, because it's going to log in
9258080	9259040	and it's going to set it again,
9259040	9260320	because it's going to run through the bash or C.
9263440	9263920	Uh-huh.
9264480	9265760	I mean, what, what have I did this?
9265760	9270080	What if I said bash or C?
9271600	9272160	No, Vim.
9273120	9273840	Oh my God.
9275360	9276000	Oh my God.
9278640	9280720	I don't know why I'm doing this.
9281600	9282320	Set emacs.
9283600	9284320	That would be a no.
9289760	9291360	I can't believe they don't ship with Vim anymore.
9292560	9294000	They want that thing tiny, I guess.
9295680	9297200	Okay, Vim.
9298720	9299680	That's Vim, I promise.
9302320	9304880	Bash or C.
9308080	9312080	Where's all the, the stuff?
9314880	9315280	You know?
9316000	9317440	All right, all right, all right, all right.
9317440	9318400	Hissapen, there it is.
9319760	9322960	Shopped dash U.
9326160	9326800	Check.
9326800	9329680	This is a bunch of server container.
9330480	9331360	Check win size.
9332800	9333360	Now what?
9334080	9335760	Exec bash dash U.
9335760	9336000	L.
9336640	9337200	Now what?
9339200	9346800	Uh, shopped, um, oh, check win size.
9349440	9351680	I, that's it.
9352880	9354000	Echo bash ops.
9356800	9357200	Damn it.
9360080	9361520	What's, what's happening, people?
9361520	9362320	All right, so let's say.
9363920	9365120	Shopped, no.
9366080	9367360	I'm staring at you.
9367360	9368800	And why are you saying that it don't exist?
9368800	9370240	Because I am staring right at you.
9374400	9375280	Oh, I know.
9375920	9378880	Wait, I know an option name.
9380240	9381680	But does this only do that with like a VI?
9382240	9383600	Oh my goodness.
9384240	9385200	What do we have here?
9387600	9388480	What do we have here?
9391120	9393280	Shopped is, uh, fine.
9394800	9395520	Man, shopped.
9396240	9399280	Uh, help shopped.
9401280	9402080	Oh my God.
9405280	9407280	Uh, oh, restrict op name.
9407280	9408480	Oh, look at that.
9412400	9414240	I thought I was just going to print it.
9414240	9416800	Print HSO option with an indication of a status.
9416800	9418240	Ooh, that's what I should have done.
9418240	9418960	I should have done that one.
9418960	9420000	Let's do that.
9420000	9420480	All right.
9420480	9420800	Ready?
9421520	9422240	Ready?
9422240	9423440	Shopped dash P.
9424400	9424880	Wow.
9426080	9426880	My goodness.
9426880	9428720	I did not know that was the thing until today.
9432640	9433600	I like it.
9438720	9440240	Look at all those things.
9440240	9441760	Look at all those thingamabobs.
9446000	9446640	Yeah.
9446640	9448880	All those great options that are set on the shell.
9450000	9450560	Last pipe.
9450560	9452160	I mean, some of these you actually want to,
9452160	9454000	you want to set, but I think most of them you do with,
9454000	9455520	with, with, with the set dash.
9455520	9456080	Oh, I think.
9458560	9462080	I think, I think shopped is like set on steroids.
9462080	9462960	That's what I think it is.
9463920	9465600	I think shopped is set on steroids,
9465600	9467920	but I can't say that for sure.
9469520	9471760	That's enough for my curiosity to be satisfied.
9471760	9472000	All right.
9472000	9472720	So let's move on.
9475120	9479040	Shopped is a thing that sets options.
9480880	9483280	There's probably a shopped variation for no clover.
9483280	9485280	I probably could put no clover here
9485280	9486400	without using set dash O.
9487200	9489520	I know that set dash O works on any system though.
9489520	9490000	You know what I mean?
9492480	9493040	Or unsaid.
9493040	9493840	Yes, they're unsaid.
9495040	9496240	But did it say, did it wait?
9498640	9500080	Shopped dash P.
9500080	9501200	Was there like a no clover there?
9504240	9505360	No, there's not.
9507120	9507360	No.
9510480	9511120	What?
9515920	9517840	No, that's freaking me out.
9519600	9520320	So, okay.
9520320	9521200	So apparently.
9522960	9523360	All right.
9523360	9523680	All right.
9523680	9524080	All right.
9525040	9525920	Set dash P.
9527280	9528480	Man set.
9528480	9529280	Help set.
9533600	9536080	Turns on whatever the real effective user needs to do to the match.
9537200	9538160	Look at all that stuff.
9538800	9541680	Oh, this is the one where it's like all smashed into each other.
9543200	9544400	Same as dash C.
9546240	9547280	This is weird.
9550480	9552320	See if I can run it like this or not.
9552320	9555040	I think these are the things that are in the opt variable.
9555680	9556400	That's what I think.
9558160	9559520	Set of the value of the variable.
9561680	9564480	All assignments, job controls, enable, recommands.
9565680	9566240	Set dash O.
9566240	9567840	This is what I use all the time.
9567840	9569120	This is how you turn VI mode on.
9569120	9570080	And we'll talk about that in a bit.
9570640	9571280	In fact, I don't.
9571280	9572560	Why has the VI mode on here?
9573600	9574640	Oh, I think I put it under VI.
9575440	9578880	That's a history thing.
9578880	9579760	That's why.
9579760	9580080	All right.
9583840	9584960	We got keywords.
9584960	9585360	What else?
9585360	9586720	I want to see all the options.
9586720	9587280	How do I do that?
9588880	9589600	How do I do that?
9592480	9594960	How do I run it to see all of the options?
9600240	9602080	I want to see all the stuff that's on.
9602080	9602960	Oh, there we go.
9602960	9606160	The current set of flags may be found in dollar dash.
9612320	9613600	Oh, look at this.
9614240	9614800	Oh my God.
9614800	9616480	That's so freaking cryptic.
9617040	9618800	Does that mean, watch, echo.
9620080	9622480	I now, well, I finally understand dollar dash.
9624160	9627040	Because it has like a one line equal.
9627920	9628400	Look, watch.
9629200	9631600	Set that show no clover and watch.
9631600	9632560	Big C is going to go on.
9633840	9634480	Yep.
9634480	9634800	See.
9637200	9638320	I made a joke.
9639680	9640800	I'm writing some code in the goal.
9640800	9642880	They allow me to create and manage my virtual machines.
9642880	9643200	Nice.
9644800	9646000	Using the vert.
9646000	9646560	Super cool.
9650240	9650560	All right.
9650560	9653440	So, so, so this is interesting.
9653440	9655760	So apparently there are two sets.
9655760	9656960	I'm going to summarize their phrase.
9656960	9658480	You don't have to pay attention.
9658480	9658800	Okay.
9659520	9662080	Apparently there are two sets of settings.
9663600	9667200	For bash, there are the bash only settings,
9667200	9670240	which are set with shopped SHOPT.
9670240	9672400	And there are the kind of legacy settings,
9672400	9673760	which have always been set as,
9674320	9677440	as with just the set command that go back to politics,
9677440	9679680	both of which are, are, are,
9679680	9682400	are contained in different environment variables.
9682400	9683520	So we have bash opt,
9686080	9689520	which will give you all of these.
9689520	9691840	And then we have shell ops,
9691920	9698240	which is the long form of, oh, wow.
9701840	9702720	Are you seeing this?
9703680	9704000	Okay.
9704000	9707200	So shell opt is the long form of bash opt
9707200	9708800	that gives you the names.
9712880	9715680	And that's very interesting.
9717840	9718960	Because we had a no club.
9718960	9722000	But, but, but there's also this other old school
9722000	9722880	environment variable,
9722880	9727040	which just has the letters that go with the names.
9728640	9730240	So I want to see if this works here.
9730240	9733920	So up here we have an H and H is what,
9733920	9735040	as an H is what it said.
9735040	9736080	I've always wanted to know this.
9736080	9737920	So I'm taking some time to figure it out.
9737920	9739840	So the H hash all.
9740560	9740880	All right.
9740880	9742080	So there's hash all, right?
9744160	9745360	Did I am positive recording?
9746160	9746480	Yeah.
9749040	9749520	Yeah.
9749520	9750240	I think I did.
9753520	9755520	I mean, I think it says it's some pause.
9756480	9758240	Should I check the file and see if it's,
9758240	9759280	see if it's getting bigger?
9761840	9762160	I know.
9762160	9763200	Now you got me scared.
9773520	9776640	I mean, yeah.
9779920	9781280	Properties.
9784800	9786720	1.18 gigabytes.
9786720	9787280	What the hell?
9789200	9790240	That's huge.
9790240	9791520	That's gonna take forever to load then.
9792640	9793120	Oh, well.
9794000	9797600	Um, yeah, we're, I'm pretty sure I did.
9800560	9802160	If I didn't, I'll just publish the volume.
9802160	9802880	We'll call it a day.
9804400	9806080	Now I'll go cut out the music and stuff.
9807280	9808000	All right.
9808000	9809280	So never you fear.
9810560	9811280	Anyway.
9811280	9813280	So I, what does the I do?
9814400	9818400	So I, I don't know.
9820560	9821920	Emux, I'll screw that.
9823680	9824000	No.
9824000	9824640	Here we go.
9824640	9825600	Help, help set.
9830320	9832640	I think I is interactive.
9832640	9833360	Set that shy.
9834400	9835920	Oh, we know that one because we already went through.
9835920	9836240	Yeah.
9836240	9837040	Okay.
9837040	9841440	So that is, but is it interactive dash comments?
9842640	9844480	What the hell is interactive dash comments?
9844480	9845360	I do not know.
9847760	9850400	Um, you know what I'm saying?
9852160	9853600	Mark variables, blah, blah, blah, blah, blah.
9854720	9856640	Option name, set is that she all export.
9858720	9861680	I mean, interactive comment.
9861680	9864480	Allow comments to appear in interactive commands.
9867840	9870240	Could I indeed be checking for,
9874720	9879600	I don't, it doesn't look like I have interactive mode set to me,
9880640	9881760	which is like freaking me out.
9882960	9883600	Look at this too.
9883600	9885440	We have like an interactive comments here
9885440	9887120	and then we have an interactive comments here.
9887120	9887760	It's totally different.
9888480	9890480	Login shell, that's set over there.
9895040	9896160	Wait, wait, wait.
9896240	9899840	I have a feeling that this is actually this one
9899840	9901120	and not this one.
9901120	9901840	That's what I think.
9903200	9905600	I think that this is, I think this is goes with bash.
9905600	9906640	That's what I think.
9906640	9906880	Yeah.
9906880	9911840	Because watch, if we do no clover, we already have no clover is set.
9911840	9913360	We know we have, we already set that one, right?
9914640	9915840	So, yeah.
9915840	9919680	So no clover was correct, right?
9919680	9920480	That one matches.
9920480	9922160	It was capital C. That was the one I checked.
9923120	9925120	So there's capital C, right?
9926400	9928880	Um, vi mode should be here.
9930880	9931280	Uh-huh.
9932480	9933920	Vi mode is the one I set all the time.
9933920	9934880	So let's go check that one.
9936080	9938320	Exit error set dash E,
9938320	9940160	which is something we should set in our shell scripts.
9940160	9941200	We talked about last week.
9942080	9944240	Um, emacs style.
9946640	9947760	I don't have emacs style.
9948480	9950960	So what does that go?
9952480	9954080	There's like no equivalent for that one.
9954080	9954640	What the hell?
9955600	9957200	If I fail, pause, I pretty much vi.
9957200	9960000	Oh, use the vi line editing interface.
9963120	9966640	But it doesn't look like I can grab it from here.
9968000	9970320	So there's only like special things that get written here.
9970320	9971920	This is kind of frustrating.
9974240	9975600	I mean, what's the criteria, right?
9975600	9976320	Like what's I?
9976960	9978160	I is interactive commands.
9978160	9980480	I'm guessing there's no proof of that.
9981040	9982080	M is what?
9983600	9984240	What is M?
9984640	9987040	M is monitor, which is on.
9987040	9987280	Okay.
9988400	9989440	Sometimes I have short flags.
9990400	9991280	Capital B.
9991280	9992080	Is that one covered?
9996000	9996240	No.
9997360	9998640	What is capital B?
9998640	9999440	Oh, there it is.
9999440	10000320	Brace expand.
10001600	10002320	Okay.
10002320	10003120	Brace expand.
10003120	10003360	Okay.
10003360	10004080	Then we got that one.
10004720	10006720	C we know that one's no clover.
10006720	10007040	H.
10011120	10012160	Do you have to get it to show up?
10012160	10012800	Is that a thing?
10013760	10015120	Manic, that's it.
10015120	10016080	That looks very interesting.
10016080	10016800	We'll try that next.
10019840	10020720	Let me give you a second though.
10020720	10022640	So we got B for brace expanded.
10022640	10025920	C for no clover.
10025920	10028800	H is his expand, which we have.
10030160	10032800	And S.
10032800	10034080	S has got to be VI mode.
10038400	10040480	S has got to be VI mode, but I don't see how.
10043760	10044960	You know what I mean?
10046320	10047280	I was not listed here.
10049360	10050080	And it's like V.
10052080	10054160	Let's set brace expand and see if it'll be, yeah.
10054160	10055600	I actually think it will do that, yeah.
10056640	10057760	All right, that's that.
10057760	10058000	All right.
10058000	10064480	So we set, it's not unset.
10064480	10065600	Unset is for variables.
10067280	10067840	What is it?
10067840	10068560	Set dash?
10068560	10068960	What is it?
10068960	10069680	Set dash something?
10070640	10071280	How's it going?
10071280	10072160	Job?
10073680	10076880	Job's value.
10079440	10082080	Pprivilege VI verbose mode.
10083120	10084000	Is it dash U?
10084000	10084720	Same as the other one?
10084720	10085520	Okay.
10085520	10090720	So set dash U brace expand.
10092560	10093600	What is brace expand?
10095520	10098000	Can I use like the, yeah, you can.
10101120	10102160	I mean, I remember reading that.
10102240	10104560	So I'll get that.
10105200	10105840	It's gone.
10107360	10108000	It's gone.
10109920	10110480	It did it.
10112160	10114640	So VI is just not covered.
10116000	10118720	I mean, it's not covered.
10118720	10120000	I don't know why it's just not.
10121360	10123200	VI print shell input lines as they're read.
10123200	10123360	No.
10124160	10125280	Turn on whatever the real thing is.
10125280	10126000	Same as X.
10126800	10127600	Emax mode.
10128160	10129920	It's almost like the person who wrote this
10129920	10131920	didn't want to do the other one.
10132400	10134800	Either we are truncating our help file or something.
10137040	10137520	Emax.
10138160	10138800	There's no Emax.
10138800	10141440	There's only VI because I set dash VI.
10143440	10146160	I think it's probably like a flip on or off kind of thing.
10146160	10147440	That's why it doesn't have its own value.
10148400	10149440	But I don't know.
10149440	10149920	I don't know.
10150640	10151760	I just know that that's a way.
10151760	10152720	There's no way to know.
10152720	10153520	I mean, what's S?
10154960	10155680	What is S?
10158160	10158480	All right.
10158480	10159040	I'm going to change it.
10159040	10160320	I'm going to change it to Emax mode.
10161120	10161760	Uh-huh.
10161760	10162560	Set that show.
10163280	10163840	Emax.
10165120	10166480	And then we're going to echo.
10167280	10169200	I can't even use my counter cursor anymore.
10170800	10171840	And it's still S.
10173120	10174640	It's still S, people.
10176560	10176960	Why?
10179520	10180480	No unset.
10180480	10181440	What the hell does that mean?
10182000	10183840	And why isn't there Emax mode there anymore?
10186880	10188160	Is Emax not a thing?
10189040	10190400	Maybe Emax is a default.
10192880	10193680	Oh, there it is.
10193680	10194240	Never mind.
10194240	10194720	There it is.
10194720	10195440	There's it right there.
10196400	10196880	All right.
10196880	10207040	So, so, I think the dash, the S is whatever.
10207040	10207760	No, it's not.
10208640	10209600	No, Emax.
10209600	10211360	No, it's stash OVI.
10212640	10213680	Stash OVI.
10214480	10217440	That's, I've been doing that for literally three days.
10217760	10218480	Literally three decades.
10221360	10224000	So, there you go.
10225280	10229280	So, it's interesting because it does not have a letter equivalent.
10230640	10232960	You cannot look it up in the show-up.
10232960	10236320	I mean, not in the small ones anyway.
10236320	10237200	The short ones.
10237200	10237760	It's not there.
10239280	10239920	It's not there.
10239920	10243200	We noticed that because we saw that it didn't change at all when we were changing.
10243200	10244400	So, it's one of those options.
10244400	10246000	It's interesting because I have a feeling that
10246960	10254560	that it's kind of in between, historically, the single letter sort of operate,
10255600	10258400	settings, and then the full shop stuff that came later.
10261520	10262640	Editor is different.
10262640	10264640	No, this is not editor, right?
10264640	10266320	This is your command line, read line.
10267600	10269680	Yeah, it's your history.
10269680	10270720	It's your history editor.
10270720	10271600	It's your history mode.
10272160	10274160	So, I mean, we're getting ahead of ourselves.
10274480	10279920	But the history uses something called the read line C package and the read line,
10279920	10284160	anything that uses read line, including, I mean, anything, you know, whether it be
10284160	10288400	Pine or Nano or WeChat or any application that uses the read line library,
10290160	10293360	allows you to, will recognize VI mode or Emacs mode.
10294160	10298800	And that means you just navigate the history using VI or Emacs.
10299760	10305360	And the default, by the way, is Emacs because the people that wrote Bash and all this stuff
10305360	10313280	are big Emacs users, even though the standard should have been VI because VI is the standard
10313280	10320880	Unix editor because VI is the visual mode of X and X is the modern version of Ed.
10320880	10322720	And Ed is the standard Unix editor.
10323360	10328480	Emacs is a bloated piece of crap that a lot of amazing people use to make great software.
10329520	10334240	It has, so, so, yeah.
10334240	10336960	Anyway, I mean, that was a, that was a fun rabbit hole.
10336960	10339440	I mean, that was a big X on the RWX, right?
10339440	10341040	Explorant rotation.
10341920	10346400	But I feel like I know more about set and shopped.
10346400	10348480	I've been wanting to know about them for a long time.
10348480	10349920	So that was kind of fun to look at.
10351120	10353840	So as you can see, you can go read about these anywhere you want to.
10354640	10356400	Check when size is by default.
10356400	10358000	A lot of these are on by default.
10358000	10359680	But I go ahead and set them anyway.
10361120	10366720	I need columns or rows if I want to do anything fancy with like resizing my window or anything.
10368400	10369920	Like Tim, I use those in Timx all the time.
10370800	10372400	And expand aliases.
10372400	10377920	This is, so like if you have, if you have an alias, do I have an alias?
10377920	10378560	What do I have an alias?
10378560	10379520	What kind of alias do I have?
10380560	10381600	Do I have any alias?
10382880	10384080	Alias dashed out.
10384080	10384640	Is that a thing?
10385600	10386480	I don't know.
10386480	10387120	I've never done it.
10387120	10387920	There we go, alias.
10388880	10389920	Oh, coin flip.
10389920	10390720	Yeah, we don't have that.
10391520	10394400	So, so you can do diff tab, tab.
10397840	10400960	I think, I don't know, it's not working right now,
10400960	10404800	but that will expand aliases in the command line.
10404800	10409200	Globstar is the thing that gets you extended Globstar.
10409840	10413280	Globstar gets you your star expansion from the command line,
10413280	10416160	which we talked about at length in the bash the other day.
10417600	10421120	Dot glob includes the dot files in your glob.
10421120	10426240	If you don't have that, when you do commands and stuff, they won't get included.
10426880	10433440	So, so yeah, an extended glob allows you to use star star.
10434160	10436080	If you don't have that, you actually need to put that.
10436080	10441200	If you want to use the like 10 line shell script to write your own static site generator
10441200	10444160	with Pandoc and bash, you need to have that enabled
10444160	10446720	because otherwise it won't descend and won't use the two star thing.
10446720	10447760	That's not on by default.
10450400	10451520	You know, the VIMO though.
10451520	10453680	Yeah, I don't, I don't, I don't know what VIMO does.
10455840	10459760	It will get to the VI stuff in a bit here and shop no glob.
10459760	10466320	So, I don't remember why no glob killed something.
10466320	10472960	I think no glob will actually
10474400	10477440	glob even if you don't have anything typed at all.
10479600	10480240	Let's go look.
10482320	10485360	So we could do man, no.
10486480	10490240	I mean, we could do man bash, no glob.
10490240	10491360	Go back to the source.
10492320	10493760	The little glob option is set.
10496160	10500160	Let's see if, if no matching file names are found and the shell option no glob is not
10500160	10502560	enabled, the word is left unchanged.
10502560	10506080	If the null glob option is set and no matches are found,
10506080	10506960	the word is removed.
10506960	10509680	If the fail glob is set, no matches.
10511200	10511920	I don't want to do that.
10512800	10516160	At the start of the name or immediately following a slash must be matched explicitly
10516160	10518640	unless the shell option dot glob is set.
10518640	10521680	The file names dot and dot dot must always be matched explicitly,
10522560	10524320	even if dot glob is unset.
10525840	10530320	So all of this stuff has to do with globbing from the command line.
10530320	10532800	And we talked about that a couple of weeks ago.
10532800	10535440	So like L is splat, right?
10535440	10538560	If I do splat splat, it does everything all the way down, right?
10540480	10541520	I do like that.
10541520	10542960	It's going to do everything.
10542960	10545760	In fact, there's too much stuff, like way too much stuff.
10546640	10547520	So let's go over here.
10547520	10548160	So let's do this.
10548160	10553280	Let's say ls, wait, am I on Anton?
10554080	10555120	We need to get off Anton.
10556240	10556480	All right.
10556480	10560880	So let's do ls-l star.
10560880	10562240	And it will give you all the directories.
10563040	10564080	I use star star.
10564080	10566480	It will give me all the directories and the sub directories.
10567760	10568720	And it includes dot.
10569600	10570880	And I think if I turn the other stuff off,
10570880	10572160	it wouldn't even give me the dot file.
10572160	10574800	So they would be kept out of that.
10575440	10577920	I should note, by the way, that you can set these things.
10577920	10580160	These options for the course of a script,
10580160	10583280	if you want to have your script not go through the hidden files
10583280	10586800	or something, you can explicitly set it at the top of your script.
10587760	10588640	And people did it a lot.
10588640	10591360	Or if you need to turn on double star expanded globs,
10591360	10593600	like if you're making a static site generator with Pandoc,
10594320	10596240	that's something you could do for that as well.
10598560	10600320	So yeah, did I just close my container?
10600320	10601760	Damn, I'm going to have another one open.
10603360	10604800	I've been trying not to do that.
10605600	10606480	Oh, shit.
10606480	10607520	I think I closed this one too.
10608400	10610320	I think my container is no more.
10611120	10611520	Oh, well.
10612880	10613360	Hey, Doug.
10615280	10615680	Whatever.
10616560	10619200	You know, I'm getting sloppy because I'm tired.
10620080	10620800	Here we go.
10620800	10622240	So back to where we were.
10624320	10625600	STTY annoyances.
10625600	10631440	So STTY, so this is a really, really big one.
10632000	10633120	And let's talk about this.
10633120	10637040	So just Disables, Control, S, Accidental, Thermal Stop.
10637040	10640000	Somebody told me about this two years ago,
10640000	10641760	a year ago, a year and a half ago on Twitch.
10642480	10643280	I love Twitch.
10643280	10644160	God bless you, Twitch.
10644160	10645120	Thank you for existing.
10645120	10646880	If we have any Twitch admins watching right now,
10647440	10649920	thank you for existing because I have learned so much through Twitch
10649920	10652560	just from people telling me, why are you doing that?
10652560	10653040	You're dumb.
10653520	10656160	And I've fixed some things.
10656160	10657680	And this is something I've never known about.
10657680	10660000	So let's take a moment to show you about this.
10660000	10662240	This is really, really important.
10662240	10663120	In fact, it's so important.
10663120	10665440	I'm going to give it its own bullet point in the
10667360	10669040	in the video, right?
10670960	10679760	So yeah, this is so use STTY.
10679760	10681600	We talked about TTYs and what they were.
10681600	10683520	We're going to talk about them a lot more
10683520	10686640	when we talk about the colors.
10686640	10689200	But we've already gone through that it stands for teletype
10689200	10692320	and it's left over from the days of terminals stuff.
10692320	10701120	It's a disabled, dental terminal suspend.
10702320	10702640	All right.
10702640	10704400	So in order for me to explain this one to you,
10704400	10705760	and I've talked about this before.
10705760	10709200	So back in the day, teletype machines,
10709200	10710640	you don't know what a teletype machine is.
10710640	10712880	I know for visual interest,
10712880	10714720	I will show you what a teletype machine looks like.
10715360	10716080	If you haven't seen it,
10716080	10718320	you can think about the teletype machine while I'm talking.
10719280	10723040	And so all terminals are have as origins,
10723040	10724160	these teletype things, right?
10725040	10726960	And that's what TTY means, right?
10726960	10730000	So and, you know, their line return,
10730000	10731600	line feed, carriage return, line feed,
10731600	10733360	that whole thing was all, you know,
10733360	10735120	advanced backspace, bell.
10736400	10738560	And so all of these special, you know,
10738560	10740800	escape sequences that don't print anything
10741760	10744800	were designed to control the teletype machine.
10745760	10749680	And to this day, they still exist, right?
10749680	10752080	Well, one of the commands was for when
10752080	10754720	the teletype machine got too slow.
10754720	10756320	If the teletype machine was too slow
10756320	10757840	and it was getting too much data,
10759280	10763040	there was a special escape sequence that it could use
10763600	10766720	to say, I want to suspend, right?
10767280	10769920	And what it would do is the data would still come in,
10770640	10773760	but it would suspend the data for a while
10773760	10774960	and it would stop printing,
10774960	10778320	even though it was still receiving data from whatever,
10778320	10779360	being typed in or whatever.
10779360	10780560	And it would be some sort of buffer
10781360	10782800	that would capture all that stuff.
10782800	10784560	And then when it unsuspended,
10784560	10786560	it would go back and get the new stuff and write it out.
10786560	10790880	Well, let me show you that exact thing happening
10790880	10793200	on the command line to an unsuspecting person
10794480	10796400	who just started using the terminal.
10796400	10798480	It's the most annoying thing beginners
10798480	10800080	have to deal with all the time.
10800080	10802320	And I didn't know until two years ago
10802400	10806880	how to escape this without exiting my terminal, right?
10806880	10808960	So I'm going to try to recreate it for you.
10808960	10810640	In fact, I'm going to start a brand.
10810640	10813040	I don't know if I think I've got too many fixes in place for it.
10813680	10821040	So I'm actually going to start a new terminal to Anton as Boost.
10821040	10821440	Let's do it.
10821440	10822240	No, let's see.
10823680	10825040	I'm wondering who I could attach to.
10825040	10828320	So we need to Boost at Anton.
10830000	10830560	Okay, fine.
10831120	10836240	Let me go back on Anton and then we'll SU.
10836240	10837760	I think we can probably, I don't know.
10839120	10841040	You know, I think I'm going to be fine over here.
10841040	10841840	I think so.
10841840	10845200	I think if I just, here, su-boost.
10848400	10850640	Oh no, I got too much configuration going on.
10850640	10852000	So we can't have that.
10852000	10857360	Let's do, I mean, I, okay.
10857360	10859280	So the reason I'm concerned is because we have Tmux
10859280	10860880	and a bunch of other things that might fix it for us.
10860880	10862880	Okay, but I'm going to try it anyway.
10862880	10866960	Okay, so normally if you, if you type this and be careful
10866960	10869920	if you do this case, because you're, when you do it,
10869920	10871600	you might have trouble recovering.
10871600	10873840	So make an extra terminal or whatever you want to do.
10874640	10879520	But you'll be typing along and then you hit control S, right?
10880320	10883120	Now, mine goes into searching mode, right?
10884640	10885840	Which is a totally different thing.
10886800	10889680	And the reason for that is because I have this safeguard
10889680	10890560	put in place now.
10891120	10896160	And I didn't have this, this before, right?
10896160	10901200	And I'm trying to create a situation where that's true.
10901200	10904240	And let me see if I can, I'm going to break.
10907360	10909200	All right, so, so root doesn't have it.
10909200	10911840	Okay, so root doesn't have it.
10911840	10912800	I'm not taking it in my head.
10912800	10913600	I'm not right now anyway.
10914320	10916080	So root doesn't have it.
10917040	10919360	And let's see if root has trolls.
10919360	10922160	So I'm typing LS, I'm taking me PWD.
10922160	10924720	Maybe I'm working on a file temp foo.
10924720	10927920	I'm like, and I'm really going fast or something.
10927920	10929040	And I hit control S.
10930240	10931600	Well, that one doesn't do it either.
10931600	10932000	Damn it.
10933360	10934480	All right, control S.
10935840	10937360	No, this has been fixed too.
10937920	10938320	Damn.
10939520	10941200	I can't, this isn't work.
10941200	10942160	I knew this was going to happen.
10942800	10944000	I can't break it now.
10946880	10947760	It's only, you know what?
10948400	10949440	Wait, wait, wait, wait.
10951520	10952480	I might have an idea.
10954640	10956320	I've totally fixed myself.
10956320	10960480	So I fixed myself so good that now I'm broke
10960480	10962240	because I can't show you how to break it.
10963280	10966960	All right, so, so yeah, so control S.
10967600	10968480	No, damn.
10969360	10971440	I mean, maybe a container, maybe a container.
10972160	10976560	SSH, no, because the whole thing's getting,
10976560	10976960	you know what?
10976960	10978800	It's all because of the host terminal.
10979520	10979760	Yeah.
10979760	10981360	And my git bash has it in as well.
10981360	10983360	So it's really hard for me to break it again.
10985200	10985760	You know what?
10985760	10986160	You know what?
10986160	10987040	I think I figured it out.
10987760	10989360	I'll go use Anton from the command line.
10990480	10990720	Yeah.
10991440	10993600	Because I mean, watch, I mean, even here,
10995280	10998800	see, it's even fixed here because my bash
10998800	10999600	grandline's about to fix it.
11002320	11003920	I can't break it, my friends.
11004480	11004880	All right.
11004880	11010800	So I know, well, what does that do?
11010800	11011680	Resets everything?
11013120	11014320	Is that the one that turns them all off?
11015600	11016720	Is that the one that lists them all?
11020480	11021200	I can't remember.
11023840	11028160	So anyway, the STTY command controls the TTY.
11028160	11030640	It's a great way to look up how many rows and stuff you have
11030640	11032160	like that, if you don't have the environment variable.
11032880	11034880	It can do all kinds of fancy stuff from here.
11034880	11035680	Oh, it is the one.
11035680	11036480	That is the printer.
11037040	11037280	Yeah.
11038480	11038800	All right.
11038800	11041040	So let me check it.
11041040	11042560	Here's your BOD speed.
11042560	11044240	I mean, all this stuff from the old school terminal
11044240	11044880	that mattered, right?
11044880	11046160	We don't do any of that now.
11048080	11049520	Suspend is Control-Z.
11050400	11051600	See, this is what I find interesting,
11051600	11053760	is that it's not doing it anymore.
11053760	11055760	That's like, oh, stop.
11055760	11057120	See, look, stop, spend, undeft.
11058400	11060160	And actually, it wasn't suspend.
11060160	11062480	It was, was it, did I do it wrong?
11062480	11063120	Control-Z.
11064640	11066160	No, my Control-Z is off too.
11066720	11068640	It's, it must have been stop.
11069680	11070480	I think I got it wrong.
11070480	11072240	I think I've been saying it wrong all this time.
11072240	11074000	It was doing stop instead of suspend.
11074000	11075440	It was, I mean, it felt like a suspend,
11075440	11077520	but it was stopping the stuff.
11078640	11081680	So we have to get it so that that's not undeft.
11081680	11083040	We need to define it to be, I know.
11083760	11084400	I know.
11084400	11085360	I think we can do this.
11086400	11087760	I mean, how can we tell it here?
11088240	11091440	STTY, I've never done this.
11092000	11095040	STTY, stop.
11098320	11099120	I don't know.
11099120	11100000	I don't know what I'm doing.
11100960	11101760	I want to know though.
11103200	11104560	I promise it'll be worth it,
11104560	11106560	because every one of you who doesn't have this set right now
11106560	11107920	has encountered this as soon as you see it,
11107920	11109520	you're like, oh my gosh, that's what's going on.
11110080	11110960	It's so annoying.
11113200	11115040	Echo, so turning off Echo, by the way,
11115040	11117440	if you want to make a script that doesn't echo to the screen
11117440	11118960	when you're typing in passwords and stuff,
11118960	11119760	that's how you do it.
11120800	11123040	Is it just S?
11125360	11127120	Yeah, yours does S, right?
11128400	11131280	I don't know how to have it type it though.
11133200	11134560	Yeah, I'm trying to figure it out.
11135760	11136640	Input settings.
11138640	11139680	It's definitely stop.
11142160	11143760	This is way more than I normally would look up.
11143760	11144320	I don't care.
11144960	11150000	There is stop, char, but I have to type the character.
11152400	11155120	Yeah, and it's going to try to do something when I type it.
11156240	11158240	Yeah, but I don't think I can type.
11159600	11164480	Yeah, I think I have to do the dollar sign for that.
11165040	11165760	Yeah, let's try this.
11166480	11170160	STTY, I'm just taking it on my Bashar scene and reload.
11171120	11173360	You know, stop.
11177280	11178320	I can't just do that.
11178320	11179680	That's not going to, I don't think it's going to work.
11181680	11182800	I don't think it's going to work.
11182800	11183440	Let's go check.
11184160	11184400	Hey.
11185520	11186000	Oh, wow.
11186000	11186720	Maybe it did work.
11187680	11188720	Maybe it did work.
11188720	11189920	All right, here we go.
11189920	11191200	So we're doing our thing.
11192800	11194320	And I accidentally hit Control S.
11194960	11196160	Oh, it worked.
11196160	11196800	Yay.
11196800	11198480	So it is, it is a carrot.
11198480	11198720	Okay.
11199600	11202240	So now I'm like typing like, oh, what happened?
11202240	11203680	Anybody ever had this happen, by the way?
11204640	11208080	Has anybody, I call this a suspend, but actually that's wrong.
11208080	11209280	The name is stop.
11209280	11210720	Has anybody ever stopped their terminal?
11213440	11214320	Anybody ever done it?
11216640	11220240	I know it's control, but normally when you see a carrot,
11220240	11222720	it means that the actual control character has to be typed.
11223680	11225520	So in, at least in Bash.
11225520	11228320	So anyway, I just typed a whole bunch of stuff.
11228320	11233600	Watch what happens when I do start, which is control Q.
11233600	11234000	Boom.
11234000	11236080	It types them all out because it just bring the buffer
11236080	11237360	was all filling on and all that stuff.
11238560	11244400	Control Z is suspend and the suspend will work.
11244400	11246000	Like if you're doing sunrise, right?
11247600	11250480	You can do sunrise and you can do control Z and it will stop it,
11251440	11252240	but it's still running.
11252960	11256000	And that sends it, it sends it a suspend, right?
11256880	11260000	And you can foreground that and it will bring it back.
11261680	11263120	Control Z is suspend.
11263760	11268160	By the way, this is a reason I hate nano for beginners
11269440	11274880	because nano encourages beginners to try to use control commands
11275840	11277680	to do things they shouldn't.
11278400	11282800	Like they want to get out of something so they do control S for stop or something
11282800	11284880	and then they, then they get getting screwed up.
11284880	11286720	And if they don't have that configuration,
11286720	11291120	which is what set us off on this conversation, they don't have this thing.
11291120	11294400	So while we're at it since time, and we haven't really talked to it before,
11295920	11304480	let's under this, but here, grok backgrounding, suspending processes.
11304480	11306160	So a process is a running program.
11307280	11311840	And any program that you have at all, it can be backgrounded, right?
11311840	11314240	So I can do like right now, I could probably try it.
11314240	11316800	Let's try, I'm gonna save my stuff so I don't lose it.
11316800	11320160	So control Z there.
11320160	11325120	So that stopped my Vim program, but it's still there, right?
11325120	11328720	By the way, how do I show all the running programs in the background?
11328720	11332320	Jobs, jobs shows all the stuff that I have running, right?
11333040	11335600	And if I go on it back, I just do foreground.
11336640	11339600	And if you have to pick one, you can do foreground and then percent
11339600	11341840	and then the number and that'll get it.
11341840	11344080	I don't want to overly dwell on jobs.
11344560	11347680	But it is the way you can like suspend a thing or put it in the background.
11347680	11351360	So if you're doing something, yeah, you wouldn't want to do kill,
11351360	11353280	that's one that would kill that process, right?
11354000	11356720	But you can refer to any job with a percent in front of it.
11357840	11360240	And that will do it.
11360240	11364800	So, but sometimes, for example, if you're like running a Minecraft server, right?
11365680	11368560	If you accidentally run Minecraft, you don't have Tmux running
11368560	11370320	and you just have backgrounding and that's all you have.
11370320	11372720	And you got to get to the shell and then come back to it.
11372720	11374960	You can like leave the Minecraft server running
11374960	11379520	and you can do control Z and suspend it and do whatever.
11380080	11383200	And then you can just foreground or whatever and you go back to your process.
11383200	11383760	Okay.
11383760	11389040	So it's kind of like a poor person's poor man's screen or poor man's Tmux, right?
11389040	11390960	Tmux and screen are way better for that kind of stuff.
11392400	11394000	But it is, it is possible.
11394000	11396960	Now, the problem, though, is that if you do control S,
11398000	11400720	which is not currently enabled on this one,
11401360	11403280	we got to, we got to put that in a terminal where it's enabled,
11403280	11405520	it's enabled in a stty-shay.
11405520	11406400	Let's go look.
11406400	11407360	So it's undefined again.
11407360	11410000	So stty, we used to have to do this with,
11410000	11411920	anybody remember having backspace problems?
11413600	11416320	We used to have to do, we used to have to set a race
11417680	11420160	and EOL, we used to have to set a race all the time.
11420160	11421840	Otherwise, if you push the delete key,
11421840	11423760	it would just keep pushing control characters.
11423760	11425120	Anybody remember this?
11425120	11427120	I mean, it was a long time ago, but in the 90s,
11427760	11429920	in order to get delete, the delete key to work,
11430480	11431680	you'd have to do that, right?
11431680	11432640	So you can also do,
11434720	11437120	you can also suspend a process using the PID, right?
11437120	11437600	Absolutely.
11438320	11439040	Yeah, you can.
11439040	11440800	You can do kill, whatever, and then the PID.
11440800	11443120	And then that'll stop, that'll suspend the process as well.
11445120	11448320	So, so yeah, let's try the other stty.
11448320	11454400	So stty, stop, we're going to make it the same as normal S.
11455360	11460320	And, and now when we, we type control S, we get frozen and like,
11460320	11461920	oh no, I need to close my terminal.
11461920	11462720	No, you don't really.
11462720	11465840	You just need to do control Q and that'll restart it.
11465840	11468560	Now, granted, a lot of people do this,
11468560	11470080	and then they try all kinds of crap.
11470080	11472560	They're like exit and all sorts of things.
11472560	11474160	Remember that everything, when you,
11474160	11476000	when you actually find the right keystrokes,
11476000	11479280	all that random stuff that you type to try to get the right thing,
11479280	11481920	will execute because it's just been, you know,
11481920	11484080	so sometimes it is better to just kill the screen.
11484560	11486000	I mean, if that were to ever happen to you too,
11486000	11487840	you can only just do, you know, Tmux,
11487840	11491840	which is control a ampersand, you know, and sign,
11492480	11496960	and that puts you, it just kills your whole terminal window.
11496960	11498960	And I, that's my go-to for everything.
11498960	11501680	It just shuts my entire window instantly,
11501680	11503920	and it's just as easy to type.
11503920	11505600	But I don't always have Tmux available,
11505600	11508000	so it's good to know how to do that.
11508720	11514880	And, and so, it's so back to our, our exercise.
11517360	11518400	Yeah, there's all the other stuff.
11521040	11523520	Looks like we got a lot of random crap running right now, so.
11524400	11528960	All right, so here is our vashrc file.
11531680	11532800	Yeah, I'm not using control alt.
11534080	11534960	I need a TTY.
11536160	11536480	No.
11538320	11539760	No, I'm not, not a fan of that.
11540320	11542000	I guess you could do that, but I'm not a fan.
11542640	11546080	So stdty noise is disabled control s accidental terminal stops.
11546080	11547200	So if you don't do that,
11547200	11551120	then it will actually send control s to this,
11551120	11553120	to the, the, the program.
11553120	11555760	And in the case of bash,
11555760	11559280	that makes an interactive backwards search,
11559280	11562080	which is something I don't normally do, but, but,
11562080	11563360	and frankly, I didn't do probably
11563360	11566080	because this was never a set in my vashrc before.
11567040	11570000	So that's a, quite a bit on that one, but that'll help you out.
11570000	11570640	We're halfway through.
11570640	11572480	We're going to go through this fast history control.
11574640	11577360	So it's super important, my friends,
11577360	11579520	that you increase your history file size.
11581760	11587040	And for lots of reasons, we'll get into history and his depend.
11588080	11589920	The shot of history pen, what this does
11589920	11593200	is it causes your history to constantly get added to
11593200	11594960	instead of resetting it every time you log in.
11596240	11598480	Set that show causes your history to be editable
11598480	11600000	as if it's a big VI file.
11600720	11605120	So my, I escape and then I'm pushing up and down J and K.
11605120	11606240	I'm going up and down.
11606240	11610320	I can look through anything in my entire shell history with a slash.
11610320	11612320	So I don't need to have completion for this.
11612320	11613600	And if I wanted to, I could do it.
11613600	11615600	I, I prefer this because my,
11615600	11617280	it turns my history into,
11617280	11622640	in a huge VI file to which I have one line of visibility.
11623440	11626000	And since my go to is using slash for things,
11626000	11628320	anyway, and then I can just N, N, N, N, N,
11628320	11630880	and find all the Docker things or capital N, N, N, N, N,
11630880	11632640	or dot and then go to the right thing.
11633360	11634960	I use it constantly.
11634960	11636400	I use, I use that constantly.
11636400	11638240	I don't use anything else.
11639440	11641360	I think it's kind of silly to,
11641360	11643280	to use some of the other options that are out there.
11644320	11646640	I'm able to pull up stuff from months ago
11647280	11649200	by just typing slash whatever and it'll pull it up.
11650160	11652160	And I like it more because it's explicit.
11652160	11653600	It does take a few more keystrokes.
11654400	11657600	I really, really don't like command line history,
11658240	11659760	things like, like all my z-show
11659760	11661760	that try to guess what you want to do.
11661760	11664400	And they're constantly trying to help you out by hitting tab.
11664400	11665520	Drives me insane.
11666880	11668000	I, I don't like that.
11668000	11669520	I'm a more of a precise guy.
11669520	11671440	I want to put slash and I want to know exactly
11671440	11674800	what I'm looking for so that I can find it.
11674800	11676560	So if I did something as rude, I can go look it up.
11677120	11678720	By the way, this is another reason
11678720	11682000	that I use command line links searching
11682000	11685040	because my command line history becomes my search history.
11685920	11686800	Let me say that again.
11687600	11690240	If you learn how to do command line text searches,
11690880	11695840	your command line search history becomes your web search history.
11696640	11698240	At least when it comes to research
11698240	11700240	that you don't really care about, you know,
11700240	11702240	even if I need pictures or something,
11702240	11706560	I will do the initial like location of those pictures from here.
11706560	11709600	And then I'll go to the URL with the dot or whatever.
11709600	11712160	And I'll open a graphic web browser and look at the image.
11712960	11713840	Much more efficient.
11713840	11715120	We'll talk about that more when we did links.
11715120	11716240	We already did links a little bit.
11716240	11717440	We'll come back to it.
11717440	11719440	So, but that's another reason I did that.
11720080	11723360	I also do, you know, my Zettle Castings when I create them,
11723360	11724320	I use the term.
11724320	11727040	So I use my history for everything.
11727840	11730960	And I don't use, you know, dollar, dollar, I mean,
11730960	11733040	or bang, bang or whatever people use.
11733040	11735280	I don't need it because I can just go up into history.
11735280	11736400	It's like faster.
11736400	11739120	So, so that's my take on that.
11739120	11739840	You can go look at them.
11740800	11743120	There is another option here that you can set that
11744480	11745680	is a little more complicated,
11745680	11752320	but you can put a command inside of your dynamically evaluated prompt
11753040	11756000	that will cause your history to update
11757680	11762480	as each time your prompt displays,
11762480	11764240	it will update the last history.
11764880	11766800	And that's more efficient.
11767600	11769760	It confuses you though if you have multiple terminals on,
11769760	11772880	right, because you'll maybe have another terminal
11772880	11775920	and then now your history and you go up in the other terminal.
11775920	11777520	And logically you're thinking you're going to go get
11777520	11778560	to that last command you were at
11778560	11779760	and you ended up going to the last command
11779760	11781360	that was entered in another terminal.
11782000	11785600	So I don't like that, but that's the trick a lot of people do.
11787840	11790480	You can set, this is me building my prompt.
11791360	11793120	I am not going to explain this.
11793120	11797280	This is me proving to myself into the world
11797280	11799280	that you don't need fancy prompts.
11799280	11803200	This gives you a prompt that will automatically
11803200	11804880	wrap to two lines.
11806480	11807440	History dash A, yeah,
11807440	11809200	if you want to put history dash A in there, you can do that.
11810000	11811760	I don't particularly like that,
11811760	11813040	but if you want to do that,
11813040	11815360	it just makes your history update
11815360	11816640	no matter what terminal you're on.
11817680	11820080	And I, again, I like having,
11820640	11823360	so my history doesn't update until,
11825520	11827520	for everything until the terminal dies.
11827520	11828640	If that terminal dies,
11828640	11831200	it writes everything that that terminal ever did
11831200	11832800	to my master history file.
11832800	11835840	Otherwise it's just available to that terminal only.
11835840	11837680	I'm talking about Tmux window.
11837680	11841840	And then, but if I, if I want all that stuff to be available,
11841840	11843920	I just have to close that pane and then boom,
11843920	11846240	it gets all written to the history file and go get it.
11846240	11847440	And I prefer that myself.
11847760	11849280	I don't like being surprised
11849280	11851520	by having edited something like,
11851520	11853120	usually when I'm opening a new window,
11853120	11854800	it's because I want to do something really temporarily.
11854800	11855840	I want to go look at something.
11855840	11859040	I don't want it to screw up the history of my other pane.
11859680	11862640	And so I don't like history dash A in the prompt command,
11862640	11865200	personally. A lot of people do it though.
11865200	11868880	All right, so down here I have my prompt command.
11869840	11872720	Again, as I said, the prompt command is,
11872720	11874480	does one, you don't need to export this, by the way,
11874480	11876160	because it's not used by anything else.
11876160	11879120	The prompt command environment variable is very special,
11879120	11883600	and it will execute or eval whatever the string is
11883600	11886080	every time you enter a command.
11887040	11889840	And it can slow things down, but by doing that,
11889840	11891600	I've written this kind of fun little script
11891600	11896800	that rebuilds my prompt, depending on the size and where I am.
11896800	11899520	So if I have a short name like this,
11899520	11901200	it puts it all on the same.
11901200	11904960	If I get kind of down low into the middle,
11905040	11906560	user local bin.
11907840	11909360	It's just usually still using bin.
11910560	11912400	I think only if I get,
11912400	11914160	I probably need to get into GitHub directory.
11915120	11916720	If the, there we go.
11916720	11918480	So if I want to show my GitHub,
11918480	11920000	or I want to show what branch I'm in,
11921040	11922320	I was going to detect on CD.
11924160	11925440	Did I remove that?
11925440	11926080	I hope I didn't.
11927840	11930640	Yeah, I'm still in main right now, so it's not showing it.
11930640	11932480	At one point I had it showing like,
11932480	11933680	what my current directory was,
11933680	11935520	and I, that's not there anymore for some reason.
11936640	11937520	I'll have to go fix that.
11937520	11939200	But it was, you know,
11939200	11942160	I'll show you what branch you're on and that kind of thing.
11942160	11945440	And it wraps automatically if this number count
11945440	11948640	is past a certain point and it does the double line.
11949440	11951120	So you can have fun with your own prompt.
11951120	11952560	I'm not going to go there.
11953520	11955600	Yeah, but my B is not working for some reason.
11955600	11957600	Oh, maybe it's because I'm a master.
11959520	11961520	Yeah, if I'm a master, it doesn't look like it.
11961520	11962320	Well, maybe not me.
11962320	11964720	It doesn't look like it's working right now at all.
11964720	11965520	Should I take it out?
11966560	11967520	I might have taken it out.
11970240	11972320	Double, short, where's B?
11972320	11972880	B is there.
11975040	11976400	B equals master.
11976400	11977920	If B equals master or B equals main,
11979680	11983920	that, that is incorrect, I think.
11986000	11987120	I have a bug.
11989200	11990080	I do have a bug.
11992720	11993920	I'll have to go figure it out.
11993920	11994240	Anyway,
11999120	12000960	I don't know where my B is not showing up.
12002400	12003120	Nope, it's not.
12003120	12004160	I'll have to fix it another day.
12005360	12006160	I don't know where it went.
12006160	12008160	I actually didn't notice that that was broken.
12008160	12010320	It used to show main and blah, blah, blah, blah, blah, blah,
12011440	12014080	but somehow I broke it and I'll go figure it out.
12014080	12015200	It's kind of fun though.
12015200	12016240	This is the kind of thing, you know,
12016240	12019200	you blow like an evening on just having fun with.
12019920	12021200	These are all the colors, by the way.
12023280	12024240	And stuff.
12024960	12025840	I'm going to skip this though.
12025840	12026960	I'm spending too much time on it.
12027680	12029040	All right, so keyboard.
12030640	12033760	This is where I map my keyboard.
12033760	12037040	This only works on a system where I can actually map it.
12038320	12040640	It says 6K, XK, B map.
12040640	12042160	This doesn't work on a virtual machine.
12043360	12046160	So, I mean, I don't think it does anyway.
12046160	12046720	Let me try.
12052560	12053840	Yeah, it's not working right now.
12053840	12055520	It only works if you have a hardware.
12055520	12056000	Oh boy.
12057520	12058320	Yeah, I see what I did.
12058960	12060880	So, that was me remapping Caps Lock.
12062400	12065680	It only works if you don't, if you have access to the hardware.
12066480	12068640	And I don't in my virtual machine.
12068640	12071520	It would be interesting to find out a good way to get this to work.
12072800	12074560	Oh, it's looking for the display variable, that's why.
12075360	12077440	This only works if it's an X thing.
12077440	12079280	So, it probably wouldn't work with Wayland either, I don't know.
12080240	12083440	But if you had, it's because it's a hardware OS mapping.
12085840	12088080	You know, I don't know.
12088080	12091200	And I don't think I even have a display variable set, actually.
12092000	12092880	Let me go check.
12092880	12099520	Display is the thing that X uses to display stuff.
12099520	12100480	Yeah, my display's empty.
12101440	12104160	If I turn on, so I'm not even using X.
12104160	12108160	So, this doesn't work unless you have like a window manager.
12108160	12109360	And I don't, I'm just a terminal.
12110400	12111440	So, you can't remap it.
12112080	12113120	You can't remap Caps Lock.
12113120	12114320	There's probably some other way.
12114320	12117440	But that's, I added that when I was doing
12118640	12121120	Papa Weston Min on the desktop when I stopped.
12121120	12127360	So, I mean, I'd be interested to see if this actually works
12127360	12128000	all by itself.
12128000	12128400	Let's try.
12129280	12130560	I can run this command from here.
12131760	12133120	No, we need to export that though.
12133120	12134320	Let's go grab it.
12134320	12134800	Oopsie.
12138320	12140160	I'm kind of curious to see if it'll even work.
12142400	12144400	X and RWX break things.
12147440	12148800	I don't think it's going to work.
12150400	12151360	Load keys could do it.
12151360	12154880	Yeah, there's, yeah, I could get something from windows
12154880	12156400	that they would take it over.
12157680	12158240	You know what I mean?
12161840	12164240	Yeah, I'm pretty sure I could do something.
12165200	12170880	Now, it doesn't work because it's a hardware thing, right?
12170880	12171760	It's a hardware interface.
12172480	12173440	It just messes me up.
12173440	12175440	I have mixed feelings about that anyway.
12175440	12178000	I've gone back, just so you know, I've gone back
12178000	12179600	to using control of bracket for everything
12179600	12182800	because every fucking, every keyboard works that has it.
12183440	12185520	So, I don't mess with this at all.
12185520	12188320	In fact, I should probably disable this.
12188320	12196400	There's something like only works if you have X
12196400	12204720	and are using graphics, graphic Linux terminal.
12207440	12208320	And I don't.
12208320	12209360	I use the terminal.
12209360	12211200	So, I'm not a fan.
12211200	12214960	Control left bracket is exactly the same as escape.
12214960	12216160	It's easier to hit than escape.
12216720	12218640	And it doesn't require any modifications
12218640	12219520	that are messing around.
12219520	12221200	When we get to the VI stuff, there's a lot of people
12221200	12222880	who remap VI keys.
12222880	12223760	I hate doing that.
12224640	12225600	I tried it for a while.
12225600	12228640	I tried to use FG as a thing.
12228640	12229920	I think I still have it mapped here.
12231680	12232560	No, I turned it off.
12233840	12234480	I turned it off.
12234480	12236960	If you type two letters really fast,
12238080	12240080	it'll operate the same as escape,
12240080	12242160	but it really messes your muscle memory up.
12243200	12244560	Control left bracket does not.
12244560	12246720	So, we'll talk about that when we get to VI later.
12246720	12248080	So, here's all my aliases.
12249200	12251520	We're about, we're almost done here, I promise.
12253600	12255600	We're not going to talk about any of the command line
12255600	12259440	search aliases until we start talking about links.
12259440	12262080	And we will cover that probably next week, it looks like.
12263520	12265440	But this is how I do all my command line searching.
12265440	12266960	I call program well duck.
12266960	12270000	And that opens up a text based web browser
12270000	12273440	that opens up a search over the web, et cetera.
12273440	12276320	The unalias dash A, that clears out any aliases
12276320	12278000	that may have been previously said.
12278000	12279440	And then I reset all my new ones.
12280320	12284640	As I said before, aliases are generally a bad idea
12285840	12290320	if you want the output of the thing that comes from the alias.
12291040	12291840	Because you can't use them.
12291840	12293840	So, see here, free dash H, right?
12294400	12295440	Let me give you an example.
12295440	12298720	So, free dash H, I'm going to put this in my thing here.
12299680	12306560	No, no one to use aliases and when to not.
12307280	12312720	All right, so, okay, so free dash H, right?
12312720	12315280	That's a thing that, yeah, I want to use that.
12315280	12318320	Free, it gives me human readable, right?
12318320	12320800	If I, the real free with the slash in front, right?
12320800	12322320	It gives me this thing I can't read.
12323200	12325040	And so that's nice, right?
12325040	12325520	I want that.
12326080	12329120	Now, if I go edit a file and I want the same thing.
12330160	12333520	So, I'm going to use my handy dandy, you know,
12333520	12335200	bang bang, which you now know, right?
12335200	12336880	And I type free, what am I going to get?
12338400	12340400	I get the non-aliased version.
12341280	12347120	And that, my friends, is why aliases are not the best option
12348320	12349920	for certain things.
12349920	12353040	Now, if I, so, you know, let's go back here.
12354000	12358240	I want to use aliases, functions, or scripts.
12360000	12361040	Oh, I already have that up here.
12363520	12365600	I want to use an alias function or a script.
12365600	12367440	I already have it up there, okay.
12367440	12369200	So, but I must be, I must like this.
12369200	12371440	So, let me show you another option here.
12371440	12376080	So, if I comment this guy out, or if I un-set that or whatever,
12376960	12380400	let's just for grins, let's make this into a function.
12380400	12384080	Okay, so we're going to say free, and we're going to take over,
12384080	12388960	you know, whatever it is, and export-f free, right?
12389680	12394480	And then we're going to say free-h, and we'll pass it any
12395120	12397760	potential arguments that are there, okay.
12397760	12400160	So, I now want to use that.
12401120	12402960	I can do that up here.
12402960	12407360	So, I can say that I want to use this.
12407360	12412480	I'm going to say exec bash-l to reload.
12413360	12415040	Let's see what my free is.
12415040	12420640	So, my free is a function now, and this is a recap of what's the difference, right?
12420640	12424240	So, if I go into temp foo now, so what do you think is going to happen?
12425600	12428080	Actually, I'm already in temp foo, I thought I was so myself.
12428080	12430960	What happens, what do you think is going to happen when I do bang bang free?
12432240	12433280	Is it going to print it or not?
12435920	12436480	Anybody?
12436480	12438880	Well, let's see if you can guess right now what you think is going to happen.
12442080	12445600	I don't use tilde for anything, because I just use cd.
12450720	12455840	Yeah, so, well, that was bad.
12459440	12460240	That was really bad.
12462160	12463040	Why isn't that working?
12464000	12466960	I must have my free waiting on input somehow.
12472480	12473200	Oh, you know why?
12475440	12479200	Yeah, free is a function.
12481600	12488080	Here, I think it's because I think it's calling itself, actually.
12488080	12493760	Yeah, let me, oh, right, right, right, right, right, right, right, never mind.
12495440	12498560	Dash free, dash eight, oh, I did it wrong.
12498560	12499680	Okay, here we go.
12499680	12500160	There we go.
12500800	12502240	I did it wrong, I'm sorry.
12505440	12506560	Isn't slash nice?
12508240	12511520	So, type free, free is make sure it works.
12511520	12512880	It's not working, god damn it.
12513520	12521200	I think, you know what, it's doing an infinite thing and my computer's going to crash here.
12525920	12527280	I'm so bad, I'm so stupid.
12527280	12529040	Okay, there's a couple of ways you can do this.
12529040	12530000	I thought slash worked.
12531040	12532640	I've used that before, I swear I have.
12532640	12535120	Anyway, so let's do this instead.
12535120	12540480	Let's do command dash v free, which I know will work.
12541440	12543120	Better, damn well, work.
12544000	12545200	You better damn well work.
12550720	12552480	All right, so let's try this one now.
12552480	12553760	So let's try that one free.
12556720	12558800	I might, you know what, I might have to do witch free, actually.
12559840	12560800	Yeah, I think I do have the witch.
12564400	12568720	Or I don't, maybe the problem is I'm trying to name it the same thing, which is dumb.
12571440	12572880	Vash, at least it's Vubar.
12574400	12577040	Yeah, I could do that, but I want to break things.
12579280	12580640	No, it's not doing it.
12580640	12581440	It has to be witch.
12582880	12585040	It has to be witch because that's the one that's in the path.
12586320	12586720	Yeah.
12590160	12590400	So,
12594960	12598960	do, do, do, do, do, do, I'll get it, I promise.
12601440	12602320	Time free.
12604720	12605920	That's because it's the same name.
12608160	12608720	There we go.
12608720	12610720	Okay, that's what I wanted to show you.
12611840	12612560	Well, you learned something.
12612560	12613840	You learned three ways not to do it.
12615040	12618720	Okay, so is that inside a script?
12618720	12619920	Possibly, yeah.
12620720	12624480	But I don't want, I wouldn't, I wouldn't want to do it that way.
12624480	12626000	That's like way too much hassle.
12626800	12630240	No, I mean, the whole point of this, of using bash command line stuff,
12630320	12633280	is I don't want to think about it, right?
12633280	12637440	I want to type bang bang free, and I want it to be what I want, and now it is.
12639760	12642080	Why did the function work, and why did the alias not work?
12642080	12643840	I want you to take a moment to think about that.
12646320	12648080	Why did the alias not work?
12650960	12654560	And I think, Mosse, I think you were the one who actually tracked this down for us,
12654560	12658640	and we figured out a way to export aliases so they actually work in sub-processes,
12658640	12662240	sub-shells specifically, not sub-processes, sub-shells.
12663360	12665920	And there is another reason for this too, okay?
12668640	12673120	So there is yet another situation that we're not going to hit until we use go.
12674400	12681440	But this method that I use will not work if the program that wants to run it
12682400	12688960	is going to use an exec syscall, because this only works with bash shells.
12690320	12693600	And I actually ran into that while I was like importing some code over to go.
12694160	12700640	So the moral of the story is, if you ever are going to use it in vi,
12701600	12703520	you're more likely to be able to use a function.
12704480	12710800	But in general, it might be better for you to make it as a bonsai subtree command or as a script.
12710960	12715760	And the reason for that is because you're going to want to use these things from other executables,
12715760	12717920	and sometimes they're not always going to be bash scripts.
12717920	12719120	Sometimes they're going to be other things.
12719120	12720320	You're going to just want to use that little thing,
12720320	12723840	and you're going to want to leverage the whole unix-ness of the whole thing.
12723840	12729920	And you can't do that with a bash function, because a bash function can only be executed from bash.
12732080	12738080	And if you're running from another executable, it has no idea about bash functions.
12738960	12743920	So this kind of thing is the kind of thing that's a small thing,
12743920	12746160	but it would actually end up in my bonsai command.
12746800	12748160	And I'll show you how I would do that.
12748160	12753760	I would go to my main here, and I would add myself another command in here,
12755200	12758560	some sort of simple command to do this kind of thing.
12759600	12762080	And I mean, I could just do a standard executable.
12763040	12764640	I don't know if you want to see that right now or not.
12764640	12768720	But I mean, here's the env one that I wrote.
12768720	12774240	So this is just a basic command, and it runs the same thing, right?
12774240	12777840	And then we could have it call-free and look up the free executable and run it that way.
12779120	12785040	And then when I compile that in, then I can just do zenv, path, or whatever,
12785040	12788160	and it'll go do this stuff, just like it was in a shell script already.
12789120	12792240	Expand aliases, aliases, alias free.
12793360	12795120	That doesn't work. I wish it did.
12795120	12796480	I wish it did. I've tried that before.
12797680	12799600	I have expanded aliases on right now.
12800560	12804240	Yeah, it doesn't work because I'm calling it from within a script,
12804240	12808080	and it doesn't expand it, unfortunately, at least not consistently.
12808080	12810080	And it certainly doesn't do it from an executable.
12810720	12813600	So it's not unixi to do this.
12814160	12816960	In fact, I have stopped using functions altogether.
12818080	12820560	The only time to use a function, I've covered this before,
12820560	12822320	but I'm going to cover it again. It's so important.
12822880	12826320	The only time I ever use a function, the only time,
12826880	12831840	is when I want to do something complex that modifies the existing environment.
12831840	12836080	And usually, that means changing the current directory,
12836080	12838560	which you cannot do from a sub-shell.
12839600	12843120	You can't do it because you need to modify the properties of the existing shell.
12844240	12846240	Everything else that is just saving me typing,
12847120	12849680	that I really don't care to use in Bash or anything like that,
12850640	12855280	turning colors on, changing view, these kind of things,
12855280	12857440	this faster versions of clear the screen.
12858400	12865440	These are all things that I prefer to do from aliases.
12865440	12866640	And that's not a very big list.
12867280	12869360	If you say, I'll re-grab Bash Top, whatever.
12870240	12873760	And I never, ever depend on an alias to be out of M
12873760	12874960	because my fingers remember it.
12876080	12880000	So here are some functions, turn less color off.
12881760	12883760	I haven't used ENVX in a long time.
12885760	12887600	ENVX is kind of nice.
12889280	12891760	What it does is it takes a file, parses it up,
12891760	12894640	and then sets it in the current environment.
12895600	12900880	So if you have a script, it's very dockery,
12900880	12902160	but if you have a script or something that
12902800	12905120	wants to do significant changes to the current environment
12906000	12908560	and then throw them all away, you can use this.
12911920	12914400	And I used to put a number of...
12914400	12919040	I would have a private .env file that had all my local environment variable sets.
12919680	12920320	How's it going?
12921280	12926960	And so new from another shell script, another function.
12927520	12928720	Again, why do I have it here?
12928720	12931120	Because it ends by changing the current directory.
12932080	12933120	So I have one like this.
12933120	12942080	I have a clone structs, and that what it does is it clones
12945120	12948400	my GitHub repo and changes into it.
12949040	12950800	So it takes care of a number of things at once.
12951360	12953600	That's the kind of thing new from.
12953600	12959040	This actually will make a new GitHub repo and change into it.
12959680	12962640	This will make me a new Bonsai command and change into it.
12964000	12967680	CDZ, this just changes my directory into my Zettlecast
12967680	12969840	and then it matches whatever I'm searching for.
12971280	12973280	And then I export all those functions kind of on their own.
12974080	12975520	Clone is the one I just showed you.
12976320	12980800	So clone will clone any GitHub repo by default.
12980800	12983360	It assumes you as the user.
12984400	12989040	Otherwise it will, if it doesn't have a slash in it,
12989040	12991600	it will just, it will take the user so I can clone.
12991600	12994000	I do this all the time to like look at stuff, right?
12994000	12996080	So who has a GitHub repo?
12996080	12997280	You want me to look at?
12997280	12998880	Someone give me a GitHub repo to look at.
12998880	13000720	And I'll give you a sense of how that works.
13000720	13001840	I really love this function.
13001840	13003920	This function saves me so much time.
13004400	13006160	Of all the functions I have,
13006160	13008960	I'd say this is probably my favorite besides the path append.
13010560	13011440	And this is original.
13011440	13012640	I wrote this one.
13012640	13014640	It also grabs all the recursive submodules,
13014640	13016080	which is super cool.
13016080	13018640	So let's say, and you'll see me use this all the time
13019200	13020560	while I'm doing streaming.
13020560	13022800	So I say, let's go evaluate that code, right?
13023760	13024960	So who wants their code evaluated?
13024960	13025280	No one?
13026800	13029040	No one brave enough to get their code evaluated right now.
13029040	13031520	Okay, so we'll go to GitHub.com.
13031520	13033280	Let's go find somebody's random code.
13033280	13034080	How about Neo?
13035200	13036320	I think we need to find Neo.
13037200	13037760	I do.
13037760	13039360	I don't even have Neo here right now.
13041040	13043440	A while ago, we're wrapping up a YouTube video here,
13043440	13045920	but you're welcome to hang tight.
13046480	13049200	So the Neo project, Neo smart economy,
13049200	13050640	command Neo, Neo Vim, no.
13052160	13053280	Neo for J, no.
13055680	13056320	Oh my God.
13057440	13058640	Neo matrix.
13058800	13063440	I think this is the one.
13064320	13064640	Yeah.
13064640	13068000	So is that the one?
13068880	13069680	No, this is it.
13069680	13070480	STW3.
13072160	13075040	Can the function take in a path to CDN2?
13076080	13078080	No, because I have the standard path for all that.
13078960	13080160	You could set that if you wanted to,
13080160	13081040	but I don't have that.
13081680	13083200	So let's say ST3W.
13083200	13084160	I want this, right?
13085520	13086240	So copy.
13086240	13087120	I'm going to go grab this.
13088000	13089840	So I'm going to go clone, paste,
13090640	13092640	and that downloaded it.
13092640	13093280	I already had it.
13093280	13094000	So let's delete it.
13097120	13098400	I already had it, I realized.
13098400	13099280	So now let's do it.
13099280	13102480	So clone, ST3W, it goes and grabs it,
13102480	13103680	grabs all the other crystal sub modules,
13103680	13104880	puts me right in there,
13104880	13107440	and I can get to work looking right at the code right away.
13107440	13110240	And I don't have to deal with the command line at all.
13110240	13111600	I don't have to go to the web.
13111600	13112400	I don't have to do anything.
13115520	13116000	Working Vim.
13117840	13119600	Well, because it's a sub shell.
13122160	13124160	The sub shell is the only run executable things.
13124160	13126480	You can get functions to work.
13126480	13127680	I showed that just now.
13129760	13131600	If you wanted to make it so that it took a path
13131600	13132480	into where to the thing,
13132480	13133600	yeah, you can modify that one.
13134320	13134960	I don't though.
13135520	13138720	So if repo equals whatever,
13141200	13143760	yeah, user repo equals the HTTPS.
13144800	13146080	Oh, look, it looks like,
13146080	13147200	oh yeah, takes a repo.
13149040	13149520	I don't know.
13149520	13150480	I don't think so.
13150480	13151760	I think you can actually cause it.
13152480	13154320	I think there is a way to make aliases
13154320	13155360	propagate to sub shells.
13155360	13156000	I know that.
13156000	13157680	I just, I don't think it's a good idea
13159280	13160960	because it's first of all, it's a bash shell.
13160960	13162960	As I said, the executables are always
13162960	13163680	going to be the way to go.
13163680	13165600	That's why I'm more, you know,
13165600	13167760	akin to using a bonsai thing.
13167760	13170960	Anyway, so there's that function.
13171840	13174320	Okay, so let's talk about completion.
13174320	13175520	We're going to go kind of longer tonight,
13175520	13176080	but that's okay.
13176720	13178880	So this is one of the most important
13178880	13180320	topics to cover today.
13180960	13183040	And tab completion, you know,
13183040	13184240	people laugh at me because,
13184240	13186000	because I'm not really a fan of
13186000	13187040	completion inside code.
13187040	13188240	I could be convinced to use it.
13190400	13192640	But, you know, when it comes to,
13196240	13198000	how was it, does not exist.
13198960	13201280	Did I, did I, mine, mine worked.
13204000	13205040	You might need to set some of your
13205040	13206480	other environment variables to get it to work.
13207760	13209600	Yeah, because it has some other dependencies.
13211440	13213360	You know, yeah, mine's there.
13214640	13215680	Yeah, you might have to go look at some
13215680	13217360	of the other stuff that it has in there.
13217360	13218560	So let's talk about completion.
13218560	13220000	So what is completion?
13220000	13223520	Completion is what allows you to work really fast.
13223520	13226800	So, so when I CD into questions,
13227440	13229200	I hit tab and I don't have to type all that.
13229200	13230800	Can you imagine if that's type that every time?
13231760	13233120	And in fact, completion is,
13233200	13235680	is to blame for so many like really long names
13235680	13237360	because they're just so easy to type, you know,
13238400	13239840	and you just hit tab and do whatever.
13239840	13242960	Completion is a popular thing in VS Code
13242960	13244320	and in other code editors
13244320	13245520	and it's been around for a long time.
13246800	13249200	But it's also going on the command line.
13249200	13251360	And if you have CD path set,
13251360	13252880	it will also work for that.
13254000	13255440	And so there's, there's a bunch of,
13255440	13256800	the way completion works is that the
13256800	13258320	bashell and any show really,
13259680	13261600	they have something called completion context.
13261600	13263280	And when you hit tab, it says,
13263280	13265120	okay, let's look at this line
13265120	13268800	and let's evaluate what, what the person thinks they want.
13268800	13270000	I happen to think completion
13270000	13273920	is one of the most effective ways of doing anything.
13273920	13276800	I mean, I'm more likely to go ZZ tab, tab
13276800	13278000	to see what I can use here
13278000	13280960	or go YouTube CTO tab, tab, right?
13282080	13283600	Tab, tab to see what,
13283600	13284800	ooh, look at all those commands.
13284800	13286560	I don't have to read them at all.
13286560	13287840	If I don't remember them,
13287840	13289440	I can just tab, tab, complete them.
13289920	13292240	And people who like tab completion for code,
13292240	13295040	coding, coding argue the same point.
13295040	13297120	And which is why I think I could be convinced,
13297120	13298560	eventually to use, you know,
13298560	13301280	COC or some sort of tab completion within my VIM
13302000	13303600	or my IDE or something like that.
13303600	13305680	In fact, you can type an entire web page
13305680	13308160	with like HTML tab in VS code
13308160	13309760	and pick from the one you want.
13309760	13312400	And this is where people are going with the whole,
13314400	13316640	what is this, you know, that AI
13316640	13318000	that's doing all the completion,
13318000	13318960	which is a different issue,
13318960	13321040	which we talked about in questions and conversations
13321040	13323680	the other night regarding legality,
13323680	13326320	because it's including code that's proprietary
13326320	13328240	and could be tainting your code.
13329600	13332320	But the concept of completion is a really strong one.
13332320	13334880	I think it's really solid, copilot, yeah.
13334880	13336800	And then people should learn to use it.
13338160	13340960	And unfortunately, a lot of people don't understand
13340960	13342720	that you don't have to write a separate script
13342720	13343440	to do completion.
13344320	13347600	You can actually just enable a program to do completion
13347600	13352640	by typing complete-c, you know, build, build or something.
13352640	13355920	And you can have the program do its own completion.
13355920	13357520	And if you want to get into that stuff
13357520	13358800	and you really want to see any of that,
13358800	13360480	I've prepared some examples for you.
13360480	13363200	You can go read that.
13363200	13365040	I don't really want to get into right now,
13365040	13370320	but if you go to ArtifactsRob.CMD, is this CMD?
13370320	13372240	I mean, it might be Bash example.
13372240	13374160	There it is. Bash command example.
13374160	13377120	So this has my example in here.
13378080	13380480	And it uses Bash completion,
13380480	13385440	and then Bonsai uses the same technique for completion using.
13385440	13388240	So this also includes documentation generation
13388800	13392400	and completion that automatically is detected
13392400	13395120	based on any function that begins with x dot.
13395760	13397280	If the function begins with x dot,
13397280	13398640	it gets completed automatically.
13399760	13403840	And a simple version of that is I did with the Ops API recently.
13404480	13405920	Oops, Ops API.
13406800	13408720	In our dev script here.
13409840	13411840	And I took out all the other doc stuff,
13411840	13414160	and I just put this here.
13414160	13416880	So this is, if you, we talked about this
13416880	13418400	in the Bash scripting the other day,
13418400	13422560	if you kind of decompile this and understand what it's doing,
13423200	13424480	you'll understand a lot about Bash.
13424480	13428160	But what it's doing is it's just making it so that this program,
13428160	13432720	anything that begins with x dot is automatically tab-tabable.
13432720	13435360	And you can type check, tab,
13435360	13438000	and get all the stuff that has check with the end, etc.
13438000	13438960	So that's completion.
13441040	13442400	But in order to enable completion,
13442400	13443840	you have to put that in your Bash receive file.
13444400	13447120	And up here I have own comp, and this is an array.
13447120	13449120	And it's like, these are all of the things
13449680	13451920	that provide their own completion.
13451920	13454080	So they would be evaluated,
13454080	13456480	they would be set up using complete dash capital C,
13457280	13460960	which is very minimally documented in the Bash thing.
13460960	13463280	So you have to look for programmable completion.
13463280	13466400	That's the secret word that will get you to the line
13466400	13467120	where you need to be.
13468160	13471680	And this will talk to you all about completion ad nauseam.
13471680	13473600	Most people check out when they talk about completion
13473600	13476800	because there's these, lots of these functions
13476800	13478560	that have been created to help you,
13478560	13480480	but they actually hinder you in a lot of ways.
13481760	13486880	But you see them used extensively in all of these other programs.
13486880	13490480	This is my single biggest complaint about Cobra,
13490480	13495200	which is a Go library that creates extensive completion
13495200	13498240	code scripts that need to be sourced and used.
13498240	13503360	And the reason to do this is because ZShell doesn't support
13504000	13505120	commands with their own completion,
13505120	13506560	which is really unfortunate.
13506560	13510240	That is a reason all by itself for me to never use KShell,
13511200	13513840	or ZShell or KShell or any variation on it.
13513840	13518560	They don't support basic internal completion.
13518560	13520320	What would you rather do completion with?
13520320	13523280	Some shell script that has to be created to reflect
13523280	13525520	the same logic that's already written in Go,
13525520	13527600	or something that already can use the Go code
13527600	13528720	that you already wrote.
13528720	13533840	So the entire reason raison d'être for Balzai,
13534480	13536080	I'm going to make a plug for it right now,
13536080	13539120	is because of completion and internal documentation
13539680	13541680	and all the things that come from that.
13542960	13543840	And so you can go look at that,
13543840	13545040	but let me give you a sense of this.
13545040	13545840	That's what this is doing.
13545840	13549040	So this is saying, for all the ones that I already have,
13549120	13551280	just do complete-c, because those are the easy ones.
13551280	13552080	Those are the cool ones.
13552080	13553200	Those are the good ones.
13553200	13557200	But the rest of them, we've got to go use its own clunky
13557200	13558880	completion type mechanism.
13558880	13561200	And most of them have something completion bash.
13561200	13564800	That's how you know you're using a Cobra piece of crap,
13564800	13568480	because it always has the same thing, at least it's consistent.
13569520	13571440	But let me tell you why I think this is crap,
13571440	13576400	because if you look at, let's do CubeCTL, right?
13577360	13581600	CubeCTL completion, okay?
13582240	13585120	Oops, we have to tell it what shell we want, bash.
13585760	13588320	All right, so that might not look like much of a big deal,
13588320	13589600	right, until you count it.
13591120	13593360	All right, so that's 302 lines.
13593360	13594640	It's gotten smaller, actually.
13595600	13597200	It has gotten smaller, thank God.
13598000	13599760	It was much bigger than that before.
13599760	13603200	It's 302 lines that have to be evaluated
13603200	13604960	every time you run an interactive shell.
13606960	13609440	Every time you run an interactive shell.
13610080	13611600	And if you want your completion to just be there,
13611600	13612400	let's do kind.
13613840	13619200	Kind, WC, dash L.
13620240	13623200	Oh, whoops, bash.
13626560	13630080	1,174 lines.
13632320	13636240	Yeah, I mean, they've taken it down a notch
13636400	13638800	CubeCTL used to be thousands of lines long.
13638800	13640400	It used to be 32,000 lines long.
13641200	13644400	32,000, I mean, 320, 321.
13644400	13646320	They've fixed it.
13646320	13647920	They've dabbed, they've taken it down a notch.
13647920	13648400	That's good.
13649040	13651120	Probably because everybody was complaining about it.
13651120	13652320	Seriously, last time I did this,
13652320	13654000	I actually wrote a big thing on Banzai about it.
13655040	13655680	I did.
13655680	13657920	I wrote a big thing, like reaming him for it.
13659680	13661440	And I think they might have fixed it.
13661440	13662480	That's actually really good news.
13663360	13665440	So here's Banzai.
13666240	13666720	There we go.
13668080	13673200	So CubeCTL was 12,637 lines last time I checked.
13673200	13674000	And now we just checked it.
13674000	13675040	It's only 302 now.
13676080	13677040	That's really good.
13677040	13678160	Pandoc's actually pretty good.
13679040	13680640	Yeah, Pandoc does a pretty good job.
13681920	13683200	Pandoc has its own thing though.
13683200	13684000	Let's check the other ones.
13684000	13684880	Let's check Minicube.
13685760	13688320	Minicube has, oops, Minitube.
13689920	13691120	I don't know how Minicube installed.
13692080	13694320	That's why I have the check it out if you haven't.
13695040	13697520	Spotify, Kind, Compose, Helm.
13697520	13698080	Let's do Helm.
13698080	13699120	Helm is trash.
13699120	13701680	So the source code is absolute trash.
13703680	13705280	I don't have that installed either.
13705280	13705680	Damn it.
13708000	13709920	Yeah, the rest of them I don't have any of these installed.
13710880	13711760	What's Docker like?
13711760	13713440	Oh, so Docker, okay.
13713440	13715440	So Docker and these other ones are kind of weird.
13716080	13720320	You have to actually use their independent completion file
13720320	13725120	and then source it if you want to create shortcuts.
13725120	13726080	And that's what this is doing.
13726080	13727200	This is creating a shortcut.
13729200	13730000	Let's do Pandoc.
13731120	13733520	So Pandoc is, what did they say?
13735440	13739120	Pandoc, I dash dash bash completion.
13740560	13741520	83, that's not bad.
13742800	13745840	I'm really happy to hear that the QPCTL has come down.
13746400	13748160	It was 12,000 lines.
13749120	13752320	Imagine forcing every single person who ever used your command
13752880	13756000	to get to source 12,000 lines of code.
13757040	13761760	I mean, my entire bash RC file is only 500 lines.
13762720	13767840	So in order for it to run completion for just QPCTL up until recently,
13768400	13771600	I had to, as I told you, it's sourcing it.
13771600	13773680	So it's essentially the same typing right there.
13773680	13777920	And that effectively increased the size of my bash RC file
13778400	13781600	to something on the order of like 15,000 lines
13782320	13784320	every time I run an interactive thing.
13784320	13785920	And if you want to hear people complain,
13787520	13791040	there was somebody who wandered into my Twitch year and a half back
13791040	13793200	and they were like, oh my God, I wish they would just stop
13793200	13796800	because all the cloud native people have been complaining about this
13796800	13798240	because they're all using the same thing.
13798240	13799920	So you combine, you put all those things in there
13799920	13802880	and they're all just blowing up everybody's bash RC files.
13802880	13805360	And so the startup on their interactive shells
13805360	13806880	is the slowest VS code.
13809120	13810480	There was no error in it at all.
13810480	13810960	I don't know.
13813200	13814960	So yeah, I don't know.
13814960	13817520	That seems interesting that it's like working out.
13818640	13820320	This is some stuff for swagger completion.
13820320	13824320	So this is kind of stupid because it actually had to,
13825120	13826800	the number one complaint I have,
13826800	13830640	and this is why I forever hate Anaconda.
13830640	13835840	Anaconda is kind of a, I don't know what it is.
13835840	13837120	What is Anaconda?
13837120	13841520	Anaconda is like a really bad CPAN for Python,
13841520	13843440	specifically for machine learning kind of things.
13844080	13846080	And it's absolutely horrible.
13846640	13850320	I mean, it's just so bad on so many levels.
13850320	13852880	And I don't have time to go through every one of those things.
13852880	13855200	I don't like just saying things are bad without telling you why,
13855200	13857120	but it is, it's just terrible.
13857120	13859760	And the first way, and the first reason I know it's horrible
13859760	13862640	is because it screwed with my bash RC file.
13863920	13866160	When I went to go install it, now it warned me,
13866160	13867680	it warned me it was doing it,
13867680	13871760	but then it proceeded to go in and screw up my bash RC file
13871760	13874160	and write whatever it wanted to to the end of it.
13874160	13877840	And if you write a program that willingly,
13877840	13880720	I don't care if you put markers around it or something,
13880720	13883600	if you're willingly screwing with somebody's bash RC file,
13883600	13886400	you're a bad person and you should be fired.
13890960	13892320	I'm only kind of kidding.
13892720	13897760	Seriously, there is nothing that makes me more angry
13897760	13902880	than some dome developer full of hubris
13902880	13906400	who thinks they have the right to screw with my dot files.
13909840	13915280	Who gave you permission to screw with my RC files?
13915840	13918480	In this case, it would be me because they asked me,
13918480	13921440	they said, do you want to say all this is required
13922240	13923840	stuff to your bash RC for you?
13923840	13925040	Well, we're helping you out here.
13925040	13925920	I'm like, okay, fine.
13926880	13928640	Somebody reminded me after that, after a rant,
13928640	13930480	I was ranting like, you know, you don't have to do that.
13930480	13931120	You could have said, no.
13931120	13932160	And I'm like, oh, okay.
13934000	13937200	But still, I mean, I can't tell you how many times
13937840	13940640	I have had stuff royally screw up.
13940640	13942640	And by the way, every time you do a new install
13942640	13944400	or something like that, it never remembers.
13944400	13946400	So it's just screwing up your,
13946400	13948560	and if you're storing your dot files and get repos,
13948560	13950000	which we will do at the end of all of this,
13950960	13952720	you know, you're even more screwed up
13952720	13954480	because now you're making changes
13954480	13956160	that you didn't have any control over.
13956720	13958640	And this is what swagger is.
13959200	13963360	So swagger is one of the hands down worst projects
13963360	13964400	I have ever seen.
13965200	13967680	It is so totally bad.
13968320	13972240	The open API YAML specification is the only good thing about it.
13973440	13976880	Everything else, all of the software, the crappy Java,
13976880	13979440	the horrendous, you know, necessity
13979440	13981520	to like change my bash rc file
13981520	13986080	and all of the other novice crap is just terrible.
13986080	13987280	In fact, I'm deleting this right now.
13988240	13989120	I'm deleting this right now.
13989120	13991760	I added that because swagger told me to add that
13991760	13993360	and swagger is not even a thing now.
13993360	13995520	The core people on the project left the project
13995520	13998480	and created open API, which is only minimally better now.
13998480	13999680	And we're going to rewrite all of that.
13999680	14001200	Don't get mad, get busy.
14001200	14003200	In the open source world, you can rewrite it and make your own.
14004320	14006080	And that's probably a good note to end on.
14006960	14012720	So this stuff down here is for all of that customization that you want.
14012720	14015600	So you may be saying, Mr. Rob,
14015600	14018640	I want to be able to show off my .files with the rest of the world
14018640	14021360	and how awesome my .files are.
14021360	14023360	And I want to help all those beginners out there.
14023360	14025440	And I want to show that I'm not a noob.
14025440	14028480	And I'm going to put snarky comments and fun jokes in there
14028480	14031200	and all the other things that people do in the .files world, right?
14032960	14035280	But I want to be able to have like sub tokens.
14035280	14039120	And I want to add a Twitch token so I can do a lot of the WeChat.
14039120	14045040	And I want to be able to add tokens that talk to Twitch with my scripts.
14045040	14048960	And I don't want to necessarily like even knowing where the files are.
14048960	14050160	I don't want to give up that information.
14050160	14052160	Plus I want them to be able to use my file,
14052160	14057120	my thing without forcing them to use my exact directory structure, blah, blah, blah, blah, blah.
14057120	14060640	Well, one of the things you can do is you can add a source if at the end
14060640	14064160	for the different files that you might want to maintain.
14064160	14067200	So I actually maintain a bash work.
14067200	14070160	As I said before, I maintain a bash work at work.
14070160	14071360	It's an enterprise GitHub.
14071360	14073120	Nobody sees it except for here.
14073120	14076240	And it overrides everything above here, right?
14076240	14083520	So it takes over my GitHub information and whether to go out to githubthis.com
14083520	14085120	or to go out to the internal one.
14086240	14090400	And then the private one is only loaded for my local machine when I have it connected.
14090400	14095520	And that's got GPG keys and stuff like that that I would never want to commit.
14095520	14096960	So that's what those are about.
14096960	14098880	We talked about them already, but I'll talk about them here.
14099760	14102560	The Terraform stuff is just left over from completion.
14102560	14105600	For some reason, the Terraform completion stuff does not work up here.
14105600	14107120	I couldn't figure that out for the life of me.
14109840	14112240	I don't remember why that was actually.
14112960	14114720	So I'll just leave that one there.
14116000	14117760	And that's the end of today.
14118720	14123440	I know it's been a long day and some of you probably had to take several breaks along the way.
14124720	14125360	No worries.
14126080	14127600	We made it through the BashRC file.
14129120	14131440	You're going to be spending the rest of your life,
14132480	14137440	Lennox life, playing around with your BashRC file for fun and profit.
14137440	14143680	And grab a beer and come mess with your .files and listen to good music with us.
14145520	14146800	It's a never-ending thing.
14146800	14151600	I'm constantly redoing my .files and my shell scripts.
14151600	14156080	By the way, just as kind of a summary here, and I'll zoom in for this story.
14157200	14164800	When I was first starting, I didn't know shell very well, but I knew Perl really, really well.
14165440	14168880	And so I wrote all of my scripts directories and everything in Perl.
14169600	14174480	And then in a 2000 someplace along there, I was like,
14174480	14177120	man, I should get up with speed with Python.
14177120	14178800	So I rewrote everything all in Python.
14180320	14185200	And then a lot of them are the same things, the same things that I rewritten over and over again.
14185840	14189120	And I've always had Bash as my shell.
14189120	14195200	So I did for an entire weekend, I tried to do ZShell with people on Twitch helping me
14195200	14196880	and just to do a fair comparison of the two.
14196880	14201440	And that's when I determined that in a friendly way, I don't want anything to do with it ever.
14202320	14209120	And then the latest incarnation of this is, you know, I'm tired of maintaining all of these
14209120	14210400	scripts in all of these different places.
14210400	14211520	I just want one executable.
14211520	14213040	And so that's where Banzai is coming from.
14213760	14218240	And we're kind of at permission to do that because everybody's doing that now.
14218800	14220640	I get GH, Twitch, Twirl.
14220640	14224480	I mean, they're all these like monolith UNIXE monoliths,
14224480	14227920	which means that it's a monolith that's got broken up into multiple subcommands.
14228560	14231600	And so that's been my current take on that.
14231600	14233600	I've been really enjoying it too much, actually.
14234320	14236480	There's actually a really interesting blog out there somewhere.
14236480	14237760	I wish I knew the name.
14238320	14244480	And it was written by a guy who was like, he's basically like, just stop configuring.
14245600	14252080	And he was basically capturing the dilemma of spending your entire...
14252080	14255920	I mean, the whole idea of optimizing your configuration for your workflow
14255920	14257520	is to make you more efficient.
14257600	14262240	But if you count the amount of time that I have total number of hours
14262240	14268000	that I've spent optimizing my workstation and my top files and everything,
14268800	14272240	there's probably not enough time ever for me to ever recoup that time
14272240	14273520	in terms of efficiency.
14274480	14278480	But every once in a while, you do add something that adds tremendous value
14278480	14284240	to your entire workflow, such as my clone command or the Banzai command
14284240	14285840	or that kind of thing.
14285840	14289120	And so I think it's worth it to do it.
14289120	14290080	Plus, it's fun.
14290080	14293200	And it keeps your skills fresh, keeps your shell scripting or go coding fresh.
14294560	14297280	So don't take it too much of that to heart.
14297280	14298080	It's fun.
14299040	14301680	And personally, I think it's very addicting.
14301680	14304880	And I think there's probably more than one person in this room right now
14304880	14310000	who is very addicted to configuring their stuff.
14310800	14315040	So it's time for me to end the stream and pick my socks up and stuff.
14315040	14318400	And be a good citizen.
14318400	14319200	It is Sunday, though.
14319200	14319760	Give me a break.
14320480	14324240	And we are going to call it at that point.
14324240	14327920	So if you want to hang around at ranting,
14327920	14330880	ranting time is greater than improving work full of time.
14331920	14333200	I don't know if it is.
14334240	14335440	I don't know about that.
14335440	14337440	I mean, it is fun to rant.
14337440	14339760	It's probably not good for my blood pressure, but it's really fun.
14342000	14342800	I thank you, everybody.
14343520	14344480	I'm just going to say it again.
14344480	14345760	I appreciate everybody being here.
14346560	14347120	Don't get angry.
14347120	14347600	Get busy.
14348400	14348800	Yes.
14349840	14354000	Reconfigure or write your own editor if you have to.
14355360	14355920	People have.
14357120	14358320	I mean, that's good.
14358320	14360800	I want to encourage people to do that.
14360800	14363600	Even if they get it wrong, at least, you know, they have the courage to do it.
14364560	14366640	So we're done here.
14368240	14372640	And the next thing you're going to see on this channel is probably me playing games
14372640	14373760	or eating or something.
14373760	14377840	So I'm going to go ahead and just stop the recording.
14377840	14378800	Again, thank you for being here.
14378800	14380720	We'll see you next Sunday at two.
14380720	14382320	We'll be two to six.
14382320	14385600	And it looks like we'll be covering the rest of the configuration.
14385600	14388560	So we only got to the bash configuration today.
14388560	14389600	I think all we got through that.
14390480	14393200	I have a feeling it's going to take us a whole day to get through VimConfig.
14394480	14395840	But I'm going to hope not.
14395840	14399760	So we're going to put that down here.
14399760	14400800	Wait, why does it keep doing that?
14401760	14403600	Wait, you can't see my screen here.
14403600	14404080	Here you go.
14404880	14405680	So I'm moving.
14405680	14407040	I'm moving these topics to the next time.
14407040	14411120	So we just did configure as a bash configuration day.
14413440	14415600	Let's say that bash configuration day.
14418720	14428480	I mean, but for no other reason, then, uh-oh, uh-oh, uh-oh, I screwed up somewhere.
14429360	14430080	What else is new?
14431760	14432880	I want to use what?
14438000	14439520	Oh my god, it got rid of it.
14439520	14440080	That's weird.
14442240	14442880	Yeah, it did.
14442880	14443520	It got rid of it.
14445440	14446160	Okie dokie.
14447280	14448080	All right.
14448080	14448880	All right, peoples.
14450960	14452880	Uh, bye-bye.
14452880	14454640	Thank you for the follows.
