1
00:00:00,000 --> 00:00:01,520
All right, we're gonna jump right into this.

2
00:00:01,520 --> 00:00:04,240
So this is the results of the best amount

3
00:00:05,920 --> 00:00:08,400
of research that I can do.

4
00:00:08,400 --> 00:00:11,200
And now when I do research R being the,

5
00:00:11,200 --> 00:00:16,200
you know, the research being the principal meaning of R,

6
00:00:16,800 --> 00:00:19,040
don't put Rust out there again.

7
00:00:19,040 --> 00:00:20,560
Why are you bullying up Rust right now?

8
00:00:20,560 --> 00:00:22,480
We're not talking about Rust.

9
00:00:22,480 --> 00:00:24,680
No, we're not.

10
00:00:24,680 --> 00:00:29,440
So anyway, so by the way,

11
00:00:29,440 --> 00:00:30,960
my feelings on Rust have totally changed

12
00:00:30,960 --> 00:00:32,320
within the last few days

13
00:00:32,320 --> 00:00:34,080
because of the whole other thing

14
00:00:34,080 --> 00:00:34,920
that we've been talking about.

15
00:00:34,920 --> 00:00:38,640
So please don't, we're not gonna talk about that right now.

16
00:00:38,640 --> 00:00:41,600
I did talk about Rust a little bit when we,

17
00:00:41,600 --> 00:00:43,160
yesterday because we were talking about Firecracker

18
00:00:43,160 --> 00:00:46,520
and how I think Rust could be kind of the golden child

19
00:00:46,520 --> 00:00:49,720
of the micro virtualization emerging,

20
00:00:49,720 --> 00:00:52,960
but that is unrelated to what we're gonna talk about

21
00:00:52,960 --> 00:00:53,800
right now.

22
00:00:53,800 --> 00:00:55,320
So I'm gonna try to look away from the chat,

23
00:00:55,320 --> 00:00:59,240
but let's try at least for the next 45 minutes

24
00:00:59,240 --> 00:01:01,880
or 90 minutes to stay focused on one topic

25
00:01:01,880 --> 00:01:03,840
so that we can have the speed of this YouTube video

26
00:01:03,840 --> 00:01:05,400
be kind of to the point.

27
00:01:05,400 --> 00:01:08,200
What is going on with containers

28
00:01:08,200 --> 00:01:12,840
and specifically Kubernetes containers in 2022?

29
00:01:12,840 --> 00:01:15,320
And we're about to start KubeCon on Monday.

30
00:01:15,320 --> 00:01:16,720
So there's gonna be a lot of other new content

31
00:01:16,720 --> 00:01:17,560
and announcements, I'm sure.

32
00:01:17,560 --> 00:01:21,480
But this, what you're seeing on the screen right now,

33
00:01:21,480 --> 00:01:23,720
and by the way, if you wanna join me,

34
00:01:23,720 --> 00:01:25,440
let me post a link one more time.

35
00:01:25,440 --> 00:01:27,640
If you wanna join me and move your pointer around

36
00:01:27,720 --> 00:01:30,320
and participate, you can, you're welcome to do that.

37
00:01:30,320 --> 00:01:34,720
This is a read-only Excalidraw thing.

38
00:01:34,720 --> 00:01:37,120
I'm a huge fan of Excalidraw.

39
00:01:38,000 --> 00:01:40,600
Full disclosure, I was gifted a membership to Excalidraw

40
00:01:40,600 --> 00:01:41,680
from one of our community members

41
00:01:41,680 --> 00:01:43,560
and I never look back, it's so amazing.

42
00:01:43,560 --> 00:01:47,960
I've also been posting the PNGs of this to the Discord.

43
00:01:47,960 --> 00:01:50,320
So if you wanna see those, you can go there.

44
00:01:50,320 --> 00:01:53,320
But you should be able to use the URL anytime to come to it.

45
00:01:53,320 --> 00:01:57,320
Now, this, hey, look at all these fun little arrows.

46
00:01:58,440 --> 00:02:03,440
So what I'm gonna start by saying is a disclaimer.

47
00:02:03,440 --> 00:02:07,440
I consider myself, I mean, I've had people call me advanced

48
00:02:07,440 --> 00:02:10,000
in Kubernetes compared to the average Kubernetes admin

49
00:02:10,000 --> 00:02:12,320
and I don't feel that way myself.

50
00:02:12,320 --> 00:02:13,680
I don't know if it's imposter syndrome or what,

51
00:02:13,680 --> 00:02:16,200
I feel like, yes, I've installed several clusters

52
00:02:16,200 --> 00:02:20,000
and I administer one, but I still feel like

53
00:02:20,000 --> 00:02:21,560
I'm always learning something

54
00:02:21,560 --> 00:02:23,320
that I should have already known.

55
00:02:23,320 --> 00:02:27,960
And this video right here is about that.

56
00:02:27,960 --> 00:02:30,800
It's about one of the things that I,

57
00:02:30,800 --> 00:02:32,460
every time I think I understand it,

58
00:02:32,460 --> 00:02:34,880
I like get introduced to a new piece of the puzzle

59
00:02:34,880 --> 00:02:37,240
and I'm like, oh, oh, so that's how that works.

60
00:02:37,240 --> 00:02:38,520
And short of looking at the source code,

61
00:02:38,520 --> 00:02:40,140
which I am very prepared to do,

62
00:02:41,560 --> 00:02:43,000
this is the best that I could come up with.

63
00:02:43,000 --> 00:02:45,040
So I say that as a disclaimer

64
00:02:45,040 --> 00:02:48,120
because there might be some glaring mistakes in here.

65
00:02:48,120 --> 00:02:50,880
And if they are in your YouTube, just let me have it.

66
00:02:50,880 --> 00:02:53,080
Write it in the comments, say you got this wrong

67
00:02:53,080 --> 00:02:55,360
and you got this wrong and you got this wrong

68
00:02:55,360 --> 00:02:57,200
and I'll go in and I'll fix it

69
00:02:57,200 --> 00:03:02,200
so we can have our hopefully corrective version of this.

70
00:03:02,760 --> 00:03:04,040
And the reason I put that out there

71
00:03:04,040 --> 00:03:06,560
is because in order for me to even come to this knowledge

72
00:03:06,560 --> 00:03:08,200
that I am showing you right now,

73
00:03:08,200 --> 00:03:11,960
I had to sift through a ton of bad information

74
00:03:11,960 --> 00:03:15,740
on the internet, bad information, misuse terminology,

75
00:03:16,640 --> 00:03:21,360
confusion, renaming, reorganization of projects

76
00:03:21,360 --> 00:03:22,400
and all kinds of stuff.

77
00:03:22,400 --> 00:03:24,800
It's a pain in the butt to get to this.

78
00:03:24,800 --> 00:03:26,840
So I'm really glad that I was able to leverage

79
00:03:26,840 --> 00:03:30,080
my research skills to get to the right thing.

80
00:03:30,080 --> 00:03:33,200
So the overall topic for the next 45 to 90 minutes

81
00:03:33,200 --> 00:03:36,560
is gonna be Kubernetes containers in 2022.

82
00:03:36,560 --> 00:03:38,000
And let me ask the question.

83
00:03:38,000 --> 00:03:40,400
First of all, why do you think you know this?

84
00:03:40,400 --> 00:03:42,720
And please, if you have input, please let me know.

85
00:03:42,720 --> 00:03:46,080
Why do you think understanding container engines

86
00:03:46,080 --> 00:03:48,200
in 2022 is important?

87
00:03:48,200 --> 00:03:49,040
Why?

88
00:03:49,040 --> 00:03:50,960
Why is understanding container?

89
00:03:50,960 --> 00:03:52,640
I mean, it's pretty obvious to a lot of us,

90
00:03:52,640 --> 00:03:55,680
but what's your best way of succinctly saying that?

91
00:03:55,680 --> 00:03:58,840
Why do you care about the container engine

92
00:03:58,840 --> 00:04:00,680
when you're deploying Kubernetes?

93
00:04:00,680 --> 00:04:03,680
Why do you care about Kubernetes in general?

94
00:04:03,680 --> 00:04:05,680
Why do you care about container engines in general?

95
00:04:05,680 --> 00:04:07,880
Does anybody have any input on that?

96
00:04:07,880 --> 00:04:09,360
You can go ahead and throw it out there in the chat

97
00:04:09,360 --> 00:04:10,200
if you want to.

98
00:04:11,200 --> 00:04:14,880
But I'm gonna submit to you that the reason

99
00:04:14,880 --> 00:04:18,200
that you should know about Kubernetes container engines

100
00:04:18,320 --> 00:04:23,320
is because they are the very basic elements

101
00:04:24,160 --> 00:04:29,160
of everything that you use in Kubernetes.

102
00:04:29,560 --> 00:04:32,680
They are, Kubernetes is described

103
00:04:32,680 --> 00:04:34,800
as a container orchestration framework.

104
00:04:36,920 --> 00:04:38,600
So if you don't know what containers are,

105
00:04:38,600 --> 00:04:40,640
then you're gonna be totally screwed up.

106
00:04:40,640 --> 00:04:45,120
So we should probably talk about, yeah,

107
00:04:45,120 --> 00:04:46,160
we should probably talk about

108
00:04:46,160 --> 00:04:47,800
what containers are versus virtualization.

109
00:04:47,800 --> 00:04:49,600
We talked about that a lot last time

110
00:04:49,600 --> 00:04:52,200
and about how I think that the future,

111
00:04:52,200 --> 00:04:54,400
in fact, we have that in a different diagram.

112
00:04:54,400 --> 00:04:57,000
I'm just gonna refer to it really quickly.

113
00:04:57,000 --> 00:04:59,600
In my airgapped home network yesterday,

114
00:04:59,600 --> 00:05:02,160
we were talking about, this is my conceptual thing,

115
00:05:03,080 --> 00:05:05,880
we were talking about Kubernetes,

116
00:05:05,880 --> 00:05:07,840
so here's gonna be, I've decided to do

117
00:05:07,840 --> 00:05:10,600
a TALOS cluster over here out of OptiPlex servers

118
00:05:10,600 --> 00:05:12,800
if I can get Pixiboot to work.

119
00:05:12,800 --> 00:05:16,840
We have open PBS for batch processes

120
00:05:16,840 --> 00:05:18,960
and then we have a traditional

121
00:05:18,960 --> 00:05:20,520
on-prem Kubernetes cluster here.

122
00:05:20,520 --> 00:05:22,240
And then we have all of these VMs,

123
00:05:22,240 --> 00:05:26,040
potentially micro VMs on our single VM server.

124
00:05:26,040 --> 00:05:28,920
So containerization and virtualization

125
00:05:28,920 --> 00:05:31,200
are important that you understand.

126
00:05:31,200 --> 00:05:32,980
I'm not gonna dive into that right now.

127
00:05:32,980 --> 00:05:35,960
So we're assuming that you actually understand

128
00:05:35,960 --> 00:05:37,920
the difference and why they matter.

129
00:05:38,920 --> 00:05:40,960
And so we can jump right to the point

130
00:05:40,960 --> 00:05:44,680
where we talk about, what do we talk about

131
00:05:44,680 --> 00:05:45,840
just about Kubernetes?

132
00:05:46,760 --> 00:05:49,600
Okay, so, where did that come from?

133
00:05:49,600 --> 00:05:51,600
Did somebody draw that or did I draw that?

134
00:05:52,680 --> 00:05:53,680
Did I draw that?

135
00:05:53,680 --> 00:05:55,400
I might have drawn that on accident.

136
00:05:56,480 --> 00:05:57,320
I did.

137
00:05:58,200 --> 00:05:59,640
Or did somebody else?

138
00:05:59,640 --> 00:06:03,240
All right, so, no, Docker Compose

139
00:06:03,240 --> 00:06:04,280
is not a part of the diagram

140
00:06:04,280 --> 00:06:06,300
because this is Kubernetes containers.

141
00:06:08,040 --> 00:06:09,280
Who's drawing on there?

142
00:06:10,480 --> 00:06:12,520
Did I give somebody draw access on accident?

143
00:06:14,040 --> 00:06:15,520
Or did I do that drawing?

144
00:06:16,840 --> 00:06:21,600
I need to make sure that I didn't allow that.

145
00:06:23,160 --> 00:06:25,160
It might've just been a different color.

146
00:06:29,240 --> 00:06:32,040
Do, do, do, that should not be there.

147
00:06:32,040 --> 00:06:34,440
I feel like something didn't get saved somehow.

148
00:06:35,520 --> 00:06:38,280
Yeah, that should not be there either.

149
00:06:38,280 --> 00:06:39,960
I don't know what happened there.

150
00:06:42,680 --> 00:06:44,880
Oh my God, it reverted my whole diagram.

151
00:06:46,160 --> 00:06:47,000
It did.

152
00:06:50,480 --> 00:06:52,520
It did, it reverted my diagram.

153
00:06:53,800 --> 00:06:56,640
This is a different version of the diagram I had before.

154
00:06:58,760 --> 00:07:01,880
It's got a lot of stuff on it that wasn't there before.

155
00:07:02,800 --> 00:07:04,200
I'm kind of worried about that,

156
00:07:04,200 --> 00:07:06,040
but it's good enough we can go with it.

157
00:07:08,160 --> 00:07:10,080
There might be a bug in Excalidraw.

158
00:07:11,120 --> 00:07:14,680
So, let's go back to it.

159
00:07:15,680 --> 00:07:17,280
That was weird.

160
00:07:17,280 --> 00:07:18,600
That was really weird.

161
00:07:19,800 --> 00:07:21,400
All right, so back here we go.

162
00:07:24,080 --> 00:07:26,640
So, there are some strong,

163
00:07:26,640 --> 00:07:29,240
there are some really strong opinions on this diagram.

164
00:07:30,480 --> 00:07:35,480
And I challenge myself to justify those all the time.

165
00:07:35,760 --> 00:07:37,360
If you want to challenge my opinions,

166
00:07:37,360 --> 00:07:38,880
please do in the chat.

167
00:07:38,880 --> 00:07:40,840
You can do it right now if you want to,

168
00:07:40,840 --> 00:07:42,280
or in Discord if you don't want to do it

169
00:07:42,280 --> 00:07:43,680
like right out of the gate.

170
00:07:43,760 --> 00:07:47,120
But what I'm gonna start by saying

171
00:07:48,520 --> 00:07:51,520
that this is Kubernetes specific.

172
00:07:51,520 --> 00:07:56,520
So, none of this has anything to do with other stuff.

173
00:07:58,280 --> 00:08:02,720
So like, for example, Docker Compose and any of that.

174
00:08:02,720 --> 00:08:07,720
So, and I think it's super important especially now

175
00:08:08,680 --> 00:08:13,440
that we start to think of containerization

176
00:08:13,440 --> 00:08:15,560
without Kubernetes as a separate beast.

177
00:08:15,560 --> 00:08:19,400
And let me, this entire diagram is completely focused

178
00:08:19,400 --> 00:08:24,400
on that separation based on the container runtime interface

179
00:08:24,880 --> 00:08:29,080
as defined by the Kubernetes project,

180
00:08:29,080 --> 00:08:31,160
which was led by the Kubernetes project,

181
00:08:31,160 --> 00:08:35,000
but it's not necessarily just a container thing.

182
00:08:35,000 --> 00:08:36,400
It was something that came out

183
00:08:36,400 --> 00:08:37,600
from the Open Container Initiative.

184
00:08:37,600 --> 00:08:40,800
So, let's talk about all of this and why this is relevant.

185
00:08:40,800 --> 00:08:45,080
So, this, first of all, is for orchestration

186
00:08:45,080 --> 00:08:49,040
and my orchestration, we've primarily been Kubernetes,

187
00:08:49,040 --> 00:08:51,600
but it could have easily just been an old man or anything.

188
00:08:51,600 --> 00:08:53,600
So, I'm gonna try to get into this

189
00:08:53,600 --> 00:08:55,520
by telling you a number of stories.

190
00:08:55,520 --> 00:08:58,360
So, the first story is how did Kubernetes start?

191
00:08:58,360 --> 00:08:59,680
So, Kubernetes, it was really quickly,

192
00:08:59,680 --> 00:09:02,400
Kubernetes started as a way to manage Kubernetes clusters,

193
00:09:02,400 --> 00:09:06,480
I mean, containers, and to run them in a way

194
00:09:06,480 --> 00:09:09,920
that could be easily started up again and all that.

195
00:09:09,920 --> 00:09:14,120
But, the original version of Kubernetes

196
00:09:14,120 --> 00:09:16,400
depended on Docker and Docker has always been

197
00:09:16,400 --> 00:09:20,840
a proprietary thing and that was well and good.

198
00:09:20,840 --> 00:09:25,840
But then in 2017, they created the people behind Kubernetes

199
00:09:27,560 --> 00:09:29,560
came together and said, you know what?

200
00:09:29,560 --> 00:09:32,600
Kubernetes probably shouldn't be depending

201
00:09:32,600 --> 00:09:37,600
on this ever-changing underlying deep low-level API

202
00:09:37,840 --> 00:09:39,800
from Kubernetes, we should probably standardize that.

203
00:09:39,840 --> 00:09:42,440
So, they created something called

204
00:09:42,440 --> 00:09:46,680
the Open Container Initiative, or OCI,

205
00:09:46,680 --> 00:09:51,680
and that led to the creation of the container runtime

206
00:09:52,880 --> 00:09:55,640
interface, which is this.

207
00:09:55,640 --> 00:09:57,720
So, the container run, CRI defines the API

208
00:09:57,720 --> 00:09:59,520
used to talk to container engines.

209
00:09:59,520 --> 00:10:01,920
The CRI API comes from the Open Container Initiative

210
00:10:01,920 --> 00:10:04,880
formed in 2017 to deal with problems from Docker

211
00:10:04,880 --> 00:10:07,000
being proprietary and non-standardized.

212
00:10:07,000 --> 00:10:09,640
As of Kubernetes 1.24, all container run times

213
00:10:09,640 --> 00:10:12,360
must provide a full CRI implementation.

214
00:10:12,360 --> 00:10:17,080
And if you ever read anything about Docker shim,

215
00:10:17,080 --> 00:10:19,920
I mean, or any of these things, that's because,

216
00:10:19,920 --> 00:10:21,000
and I'm gonna read it right here,

217
00:10:21,000 --> 00:10:22,800
Docker is a significant decline after failing

218
00:10:22,800 --> 00:10:24,440
to respond to the needs of Kubernetes

219
00:10:24,440 --> 00:10:26,200
forcing the creation of Docker shim

220
00:10:26,200 --> 00:10:28,720
and later hitting the industry with a bait

221
00:10:28,720 --> 00:10:31,120
and switch tactic to force enterprises to pay up.

222
00:10:31,120 --> 00:10:34,880
So, Docker itself is in massive decline.

223
00:10:34,880 --> 00:10:38,360
Nobody's using it, people are abandoning it like crazy.

224
00:10:38,360 --> 00:10:40,840
Enterprises like mine, which is a huge multinational

225
00:10:40,840 --> 00:10:44,280
corporation, have decided to basically banish Docker

226
00:10:44,280 --> 00:10:46,200
from their entire enterprise.

227
00:10:46,200 --> 00:10:48,540
It's in massive decline, the founder of Docker

228
00:10:48,540 --> 00:10:50,120
has left to pursue other interests.

229
00:10:50,120 --> 00:10:52,940
The company was already in financial peril before,

230
00:10:52,940 --> 00:10:56,080
and it's just a matter of time before it goes under.

231
00:10:56,080 --> 00:10:59,800
That being said, it is still holding onto

232
00:10:59,800 --> 00:11:03,120
the maintenance of the number one container engine

233
00:11:03,120 --> 00:11:05,560
recommended in the certification exam for Kubernetes,

234
00:11:05,560 --> 00:11:07,640
according to the official companies that IOS site,

235
00:11:07,640 --> 00:11:08,620
which is Container D.

236
00:11:08,620 --> 00:11:10,160
Now, those docs are kind of old,

237
00:11:10,160 --> 00:11:12,040
those docs were created a while ago,

238
00:11:12,040 --> 00:11:16,120
and Creo, which is coming out of the OpenShift world,

239
00:11:17,200 --> 00:11:19,160
has really stepped up, and it doesn't have

240
00:11:19,160 --> 00:11:21,640
as many bugs as before, and it's extremely lightweight,

241
00:11:21,640 --> 00:11:23,680
we're gonna talk about that in a bit,

242
00:11:23,680 --> 00:11:26,840
and it's a full implementation of the CRI and nothing more.

243
00:11:27,800 --> 00:11:31,000
So, Container D actually has a lot of extra bloat on it,

244
00:11:31,000 --> 00:11:33,840
because it tried to be more,

245
00:11:33,840 --> 00:11:36,000
and that has an advantage or a disadvantage,

246
00:11:36,400 --> 00:11:39,640
the ultimate decision in 2022 is, in my opinion,

247
00:11:39,640 --> 00:11:42,440
is whether you use Creo or you use Container D.

248
00:11:42,440 --> 00:11:45,360
That's really, Kubernetes is an orchestration platform

249
00:11:45,360 --> 00:11:47,280
for Kubernetes, right?

250
00:11:47,280 --> 00:11:49,280
People have been saying Docker's in decline for six years.

251
00:11:49,280 --> 00:11:52,040
Yeah, well, I can tell you that a company

252
00:11:52,040 --> 00:11:54,360
of the significance of the one that I work for,

253
00:11:54,360 --> 00:11:55,840
and the other ones that I've heard of,

254
00:11:55,840 --> 00:11:58,480
who've decided not to allow Docker on the desktop ever,

255
00:11:58,480 --> 00:12:02,680
and not to depend on Docker CE, has actually been executed.

256
00:12:02,680 --> 00:12:05,480
I'm in the process of doing it right now.

257
00:12:06,320 --> 00:12:09,440
You can see it, and so there's a number of reasons,

258
00:12:09,440 --> 00:12:12,040
even most recently, so Podman desktop,

259
00:12:12,040 --> 00:12:15,240
let's continue the story.

260
00:12:15,240 --> 00:12:16,280
So Kubernetes got started,

261
00:12:16,280 --> 00:12:18,080
Docker was a good player for a while,

262
00:12:18,080 --> 00:12:19,720
and then everybody's like, no more Docker,

263
00:12:19,720 --> 00:12:20,880
and they've been trying to get off of it,

264
00:12:20,880 --> 00:12:23,760
but Docker had such a stranglehold on the whole industry

265
00:12:23,760 --> 00:12:25,320
that they've been really holding onto it,

266
00:12:25,320 --> 00:12:27,960
and all of the other players weren't really that well

267
00:12:27,960 --> 00:12:29,480
implemented, Creo had lots of problems

268
00:12:29,480 --> 00:12:32,480
like two, three years ago, two years ago,

269
00:12:32,480 --> 00:12:35,800
and it's since kind of come around from what I can tell.

270
00:12:36,720 --> 00:12:38,960
And so now everybody's like, no, we're gonna use Creo,

271
00:12:38,960 --> 00:12:40,160
Creo is the standard thing to use,

272
00:12:40,160 --> 00:12:41,520
you should use Creo, it's the best thing.

273
00:12:41,520 --> 00:12:44,160
But more importantly, underneath all of that,

274
00:12:44,160 --> 00:12:47,880
is this thing that used to be called libcontainer,

275
00:12:47,880 --> 00:12:49,640
which is now called RunC,

276
00:12:49,640 --> 00:12:53,400
which is the thing that actually does the container creation,

277
00:12:53,400 --> 00:12:58,400
it's the low level go library that talks to...

278
00:12:59,240 --> 00:13:03,440
I think it's RunC in C or go, either one,

279
00:13:03,440 --> 00:13:05,120
but it's the thing that actually does

280
00:13:05,120 --> 00:13:08,440
all the container creation and stuff.

281
00:13:08,440 --> 00:13:11,880
So that's really the biggest piece of this whole puzzle.

282
00:13:11,880 --> 00:13:16,600
And actually containerD used to use libcontainer,

283
00:13:16,600 --> 00:13:18,520
I was an ancient blog I read,

284
00:13:18,520 --> 00:13:19,640
used to use libcontainer,

285
00:13:19,640 --> 00:13:22,480
and then I read someplace that I wrote this here,

286
00:13:24,360 --> 00:13:25,880
whereas the containerD is still maintained

287
00:13:25,880 --> 00:13:26,720
by the Docker company,

288
00:13:26,720 --> 00:13:30,040
which requires some Docker C packages to be installed.

289
00:13:30,040 --> 00:13:33,160
The RunC container runtime engine was once libcontainer,

290
00:13:33,160 --> 00:13:34,640
causing some confusion when researching

291
00:13:34,640 --> 00:13:35,920
the actual container source libraries

292
00:13:35,920 --> 00:13:37,560
used by the container tooling.

293
00:13:37,560 --> 00:13:39,520
So if you're like me and you like to get into

294
00:13:39,520 --> 00:13:41,160
the low level details to see, okay,

295
00:13:41,160 --> 00:13:43,340
which libraries are the most popular,

296
00:13:43,340 --> 00:13:44,180
which have the most stars,

297
00:13:44,180 --> 00:13:45,640
which are getting the most usage,

298
00:13:45,640 --> 00:13:48,200
and what are up the chain,

299
00:13:48,200 --> 00:13:50,400
what are the products that are using that,

300
00:13:50,400 --> 00:13:52,960
what are the projects that are using it,

301
00:13:52,960 --> 00:13:56,440
then it's really obvious right now in 2022

302
00:13:56,480 --> 00:13:58,600
that anything that's not using RunC

303
00:13:58,600 --> 00:14:02,680
is gonna be completely irrelevant in this space

304
00:14:02,680 --> 00:14:04,520
at this moment.

305
00:14:04,520 --> 00:14:08,000
So in my opinion, RunC is where it's at.

306
00:14:08,000 --> 00:14:09,360
And if you're not using RunC,

307
00:14:09,360 --> 00:14:11,560
just, I mean, technically speaking,

308
00:14:11,560 --> 00:14:13,840
Creo, which stands for the container runtime interface

309
00:14:13,840 --> 00:14:16,440
dash open or open shift, depending on who you ask,

310
00:14:16,440 --> 00:14:19,040
I've read both in two different places,

311
00:14:19,040 --> 00:14:22,800
was created up by Docker, I'm sorry, by Red Hat,

312
00:14:22,800 --> 00:14:26,100
and is meant to just fulfill the minimum elements

313
00:14:26,100 --> 00:14:27,420
of the container runtime interface.

314
00:14:27,420 --> 00:14:29,540
So let's read about the container runtime interface

315
00:14:29,540 --> 00:14:30,380
for a bit.

316
00:14:30,380 --> 00:14:32,740
So the CRI defines the API I use

317
00:14:32,740 --> 00:14:35,820
to talk to container engines, I talked about that.

318
00:14:38,420 --> 00:14:40,700
Okay, so Creo CRI dash show,

319
00:14:40,700 --> 00:14:42,420
which is either open or open shift allows you

320
00:14:42,420 --> 00:14:46,340
to run containers directly from Kubernetes.

321
00:14:46,340 --> 00:14:49,700
Now, it was designed for use by Kubernetes,

322
00:14:49,700 --> 00:14:51,620
but they were very careful to not say

323
00:14:51,620 --> 00:14:54,220
this is only for Kubernetes, right?

324
00:14:54,220 --> 00:14:56,820
So this is a container runtime interface,

325
00:14:56,820 --> 00:14:59,740
which defines a set of operations.

326
00:14:59,740 --> 00:15:03,260
So you might be wondering, well, what is it really, right?

327
00:15:03,260 --> 00:15:05,860
So it's basically just, you can go read the spec,

328
00:15:05,860 --> 00:15:07,380
it's really long and boring,

329
00:15:07,380 --> 00:15:10,380
but it defines a set of operations

330
00:15:10,380 --> 00:15:13,900
which are implemented either through direct calls

331
00:15:13,900 --> 00:15:15,980
or through API calls or whatever.

332
00:15:17,180 --> 00:15:20,620
And the operations that must be implemented are,

333
00:15:21,620 --> 00:15:25,820
create, start, kill, delete, and state.

334
00:15:25,820 --> 00:15:27,420
And you can go read about these in the specification,

335
00:15:27,420 --> 00:15:32,420
but those are the only things required by the CRI standard.

336
00:15:36,260 --> 00:15:38,840
And that is kind of an interesting thing.

337
00:15:38,840 --> 00:15:41,500
And I've discovered this through the hard way.

338
00:15:41,500 --> 00:15:44,940
So there is a tool that now ships with Kubernetes

339
00:15:44,940 --> 00:15:47,940
called CRI CTO.

340
00:15:47,940 --> 00:15:50,540
This tool does not ship with Creo.

341
00:15:50,580 --> 00:15:52,140
There's a dependency on it,

342
00:15:52,140 --> 00:15:56,540
but it's designed to be a part of the Kubernetes space.

343
00:15:56,540 --> 00:15:58,460
And as I said, so there's no,

344
00:15:59,340 --> 00:16:00,620
like an interface and programming, yeah.

345
00:16:00,620 --> 00:16:05,620
So there's, the Kubernetes project is very good

346
00:16:05,780 --> 00:16:07,820
at not putting their foot down on something.

347
00:16:07,820 --> 00:16:08,940
It's kind of annoying.

348
00:16:08,940 --> 00:16:12,580
So like the open container initiative

349
00:16:12,580 --> 00:16:14,340
was maybe kicked off by Kubernetes,

350
00:16:14,340 --> 00:16:16,900
but it didn't necessarily mean all things Kubernetes.

351
00:16:16,900 --> 00:16:19,100
So everybody's following it, right?

352
00:16:19,100 --> 00:16:22,220
So they're all implementing the CRI,

353
00:16:22,220 --> 00:16:24,300
no matter what, to talk to containers.

354
00:16:24,300 --> 00:16:26,020
And to tell you the truth,

355
00:16:26,020 --> 00:16:28,820
there is actually the hope that I think

356
00:16:28,820 --> 00:16:30,740
that maybe BSD containers at some point

357
00:16:30,740 --> 00:16:32,580
could implement the CRI.

358
00:16:32,580 --> 00:16:34,580
And if they actually do that,

359
00:16:34,580 --> 00:16:37,460
then that means all of this cloud-native hardware

360
00:16:37,460 --> 00:16:39,860
and every software and everything could run on BSD.

361
00:16:40,780 --> 00:16:44,640
And that it, there is nothing that says it has to be,

362
00:16:45,640 --> 00:16:49,960
you know, LXC, you know, Linux specific containers,

363
00:16:49,960 --> 00:16:52,320
as far as I can tell in the specification

364
00:16:52,320 --> 00:16:55,040
of how to make the container interface work.

365
00:16:55,040 --> 00:16:59,680
So it's very possible that some day we might be able

366
00:16:59,680 --> 00:17:00,520
to do that.

367
00:17:00,520 --> 00:17:02,120
Now there's a whole big problem

368
00:17:02,120 --> 00:17:03,800
about how do you store the containers,

369
00:17:03,800 --> 00:17:05,480
you know, and this little green dots here.

370
00:17:05,480 --> 00:17:07,280
I mean, these green things here, you know, and that thing.

371
00:17:07,280 --> 00:17:09,000
So I don't want to get into that rabbit hole,

372
00:17:09,000 --> 00:17:11,400
but there is some standardization here.

373
00:17:11,400 --> 00:17:16,240
So the, if you want it, so the Cree CTL thing,

374
00:17:16,240 --> 00:17:18,880
which I, as I understand it gets installed by Kubernetes

375
00:17:18,880 --> 00:17:20,680
packages when you're installing those things,

376
00:17:20,680 --> 00:17:24,800
allows you to talk directly to,

377
00:17:26,360 --> 00:17:30,320
I think it's Run-C, I don't think it is directly

378
00:17:30,320 --> 00:17:31,160
to the keyboard.

379
00:17:31,160 --> 00:17:33,520
I can't remember, this one I might have wrong actually.

380
00:17:33,520 --> 00:17:36,160
I think that this might, does anybody know?

381
00:17:36,160 --> 00:17:38,520
I think that this might actually not be here.

382
00:17:38,520 --> 00:17:42,920
I think it might be to, I think it, I had some,

383
00:17:42,920 --> 00:17:44,920
at one point I had it pointing to the Qubelet

384
00:17:45,920 --> 00:17:50,400
and then I had it pointing to the Run-C.

385
00:17:50,400 --> 00:17:52,480
I think it might actually be able to talk to both

386
00:17:54,160 --> 00:17:56,480
because I do know that when the Qubelet is not running

387
00:17:56,480 --> 00:17:58,400
because the Qubelet crashes, right?

388
00:17:58,400 --> 00:18:02,440
You can get on CRCTL and you can run CRCTL list

389
00:18:02,440 --> 00:18:05,040
and you can list all the pods on the machine,

390
00:18:05,040 --> 00:18:07,240
whether or not they're in the Qubelet.

391
00:18:07,240 --> 00:18:11,720
And pods are things, static pods that have been defined

392
00:18:11,720 --> 00:18:16,720
on the host, that's like, that's what all of that stuff is.

393
00:18:16,840 --> 00:18:21,320
And they are just defined in configuration files

394
00:18:21,320 --> 00:18:25,480
that point to containers that are running via Run-C

395
00:18:25,480 --> 00:18:26,560
on the machine.

396
00:18:26,560 --> 00:18:29,160
So you don't have to have a Qubelet.

397
00:18:29,160 --> 00:18:31,120
CRCTL I think can talk to the Qubelet,

398
00:18:31,120 --> 00:18:33,720
but it goes directly through Run-C

399
00:18:33,720 --> 00:18:36,540
to the containers on the machine,

400
00:18:36,540 --> 00:18:40,140
but it also has knowledge of the configuration files

401
00:18:40,140 --> 00:18:41,740
that the Qubelet has access to.

402
00:18:41,740 --> 00:18:44,340
In fact, that is probably something I wanna add here.

403
00:18:44,340 --> 00:18:46,540
Let me go ahead and add that really quick.

404
00:18:46,540 --> 00:18:49,340
So I think it would be safe to add

405
00:18:49,340 --> 00:18:54,340
like a configuration file icon here and stuff.

406
00:18:56,420 --> 00:18:58,540
So, you know, where's that doing it?

407
00:18:58,540 --> 00:18:59,380
Where am I?

408
00:18:59,380 --> 00:19:00,200
I don't know.

409
00:19:00,200 --> 00:19:02,780
So yeah, I think that let's do that.

410
00:19:02,780 --> 00:19:07,300
So that is the, why is that the fill?

411
00:19:07,300 --> 00:19:12,180
Oh, yeah, we need to do, let's do white on this.

412
00:19:12,180 --> 00:19:14,420
I'm almost positive that that's true

413
00:19:16,460 --> 00:19:19,420
because it does not communicate with the Qubelet.

414
00:19:19,420 --> 00:19:21,060
I know it doesn't need the Qubelet to be there

415
00:19:21,060 --> 00:19:22,460
because the Qubelet is not there

416
00:19:22,460 --> 00:19:23,900
when you do Qubetium in it.

417
00:19:28,500 --> 00:19:32,620
But it can look at the file itself.

418
00:19:32,660 --> 00:19:34,740
So this would be the configuration file.

419
00:19:34,740 --> 00:19:36,060
So I'll add that in there.

420
00:19:37,700 --> 00:19:39,320
What's that?

421
00:19:39,320 --> 00:19:40,700
Those are possible options for components.

422
00:19:40,700 --> 00:19:42,100
Is that a minimum you need?

423
00:19:43,580 --> 00:19:46,740
When you're talking about a Qubelet endpoint,

424
00:19:46,740 --> 00:19:48,340
you need a runtime.

425
00:19:48,340 --> 00:19:52,980
You need a Qubelet, a runtime engine, I should say.

426
00:19:52,980 --> 00:19:55,300
You don't need, and this is another thing.

427
00:19:55,300 --> 00:19:57,540
There's the terminology regarding a runtime

428
00:19:57,540 --> 00:19:59,420
and that people have said it doesn't have a runtime.

429
00:19:59,420 --> 00:20:00,920
I've heard that statement three times

430
00:20:00,920 --> 00:20:03,520
and I restated that to some other team today

431
00:20:03,520 --> 00:20:04,400
and I was wrong.

432
00:20:04,400 --> 00:20:06,680
I further did further research on that

433
00:20:06,680 --> 00:20:09,240
to say that Podman does not have a runtime

434
00:20:09,240 --> 00:20:10,680
is a false statement.

435
00:20:11,880 --> 00:20:14,320
So this is very, very frustrating

436
00:20:14,320 --> 00:20:17,160
because this terminology gets misused all the time

437
00:20:17,160 --> 00:20:20,040
and I have read it at least in three places

438
00:20:20,040 --> 00:20:21,960
since I repeated it incorrectly.

439
00:20:21,960 --> 00:20:23,560
Yeah, but what is Run C?

440
00:20:25,120 --> 00:20:26,800
Run C by definition,

441
00:20:26,800 --> 00:20:29,440
and I have at least three or four sources of this

442
00:20:29,440 --> 00:20:32,260
is a container runtime.

443
00:20:32,260 --> 00:20:37,260
So I've heard at least five people tell me incorrectly

444
00:20:37,400 --> 00:20:39,520
that Podman, as far as I know,

445
00:20:39,520 --> 00:20:44,440
that Podman is a container runtime

446
00:20:45,600 --> 00:20:46,880
and that's not true.

447
00:20:46,880 --> 00:20:51,200
And they've told me that Creo is a container engine

448
00:20:51,200 --> 00:20:52,120
that doesn't have a runtime

449
00:20:52,120 --> 00:20:54,780
and that I cannot overstate how wrong that is.

450
00:20:55,720 --> 00:20:57,040
And I just repeated it incorrectly.

451
00:20:57,040 --> 00:20:59,080
It's using completely different wrong terminology.

452
00:20:59,080 --> 00:21:01,880
So let's get to terminology right here, okay?

453
00:21:01,880 --> 00:21:06,120
So according to the documentation,

454
00:21:06,120 --> 00:21:09,400
Creo is a container engine

455
00:21:09,400 --> 00:21:13,680
that fulfills the container runtime interface.

456
00:21:13,680 --> 00:21:18,280
And it does so by calling into Run C

457
00:21:18,280 --> 00:21:21,160
which fulfills the CRI stuff.

458
00:21:21,160 --> 00:21:24,120
Now, container D, which if it's not confusing enough

459
00:21:24,120 --> 00:21:26,280
has its own component called CRI

460
00:21:26,280 --> 00:21:31,280
which also fulfills this CRI and its own way.

461
00:21:31,600 --> 00:21:33,760
And I've read two different blogs

462
00:21:33,760 --> 00:21:35,720
that said container D doesn't use Run C

463
00:21:35,720 --> 00:21:37,800
and then I read another two blogs that were newer

464
00:21:37,800 --> 00:21:39,720
that said container D now uses Run C

465
00:21:39,720 --> 00:21:41,240
and then I put it together

466
00:21:41,240 --> 00:21:42,920
that the other ones were saying

467
00:21:42,920 --> 00:21:45,160
that it used container lib or lib container.

468
00:21:45,160 --> 00:21:47,640
And then I actually read another blog that said,

469
00:21:47,640 --> 00:21:50,880
actually Run C is lib container,

470
00:21:50,880 --> 00:21:53,800
it got modernized and that's its new name.

471
00:21:53,840 --> 00:21:58,200
So I just saved you like two hours of research

472
00:21:58,200 --> 00:22:00,980
to get that down if that turns out to be true

473
00:22:00,980 --> 00:22:02,760
because that was so frustrating.

474
00:22:02,760 --> 00:22:05,600
I was like, what the hell are we talking about here?

475
00:22:05,600 --> 00:22:08,960
So as of this moment, knock on wood,

476
00:22:08,960 --> 00:22:10,640
I think it's safe to say

477
00:22:10,640 --> 00:22:14,060
that all of the major container engines

478
00:22:14,060 --> 00:22:19,060
that are used by Kubernetes all use Run C.

479
00:22:19,360 --> 00:22:21,480
There is no other competitor to this.

480
00:22:22,320 --> 00:22:26,280
And so anyway, this is the problem with blogging, right?

481
00:22:26,280 --> 00:22:27,720
As it gets all outdated and everything.

482
00:22:27,720 --> 00:22:30,760
So I was actually really happy to hear that

483
00:22:30,760 --> 00:22:31,960
because that simplified my graph

484
00:22:31,960 --> 00:22:33,600
because before I had to have like another piece here

485
00:22:33,600 --> 00:22:34,840
or something, right?

486
00:22:34,840 --> 00:22:36,280
There was another thing that fulfilled the CRI

487
00:22:36,280 --> 00:22:38,680
and I found out, oh, it's just Run C, right?

488
00:22:38,680 --> 00:22:43,680
So is Nerd CTL only for container D?

489
00:22:45,160 --> 00:22:46,820
Show me that in writing someplace.

490
00:22:47,700 --> 00:22:51,660
Show me that Nerd CTL can't talk to CRIO.

491
00:22:52,740 --> 00:22:53,880
If you could show me that in writing,

492
00:22:53,880 --> 00:22:55,180
I'd be happy to change it.

493
00:22:57,500 --> 00:23:00,820
Cause I think that's what that is, right?

494
00:23:00,820 --> 00:23:04,660
You can use CTR or that, right?

495
00:23:04,660 --> 00:23:06,580
I think that's right.

496
00:23:06,580 --> 00:23:08,900
Frankly, I didn't do any research on Nerd CTL at all.

497
00:23:08,900 --> 00:23:10,180
I've just heard people talking about it.

498
00:23:10,180 --> 00:23:11,460
I don't plan on using it at all.

499
00:23:11,460 --> 00:23:12,780
I just let it put it there.

500
00:23:12,780 --> 00:23:14,780
So if you know for a fact

501
00:23:14,780 --> 00:23:16,020
that that only talks to container D

502
00:23:16,060 --> 00:23:17,740
please let me know.

503
00:23:17,740 --> 00:23:19,660
There is a CTR command that's documented

504
00:23:19,660 --> 00:23:21,580
in the Talos documentation.

505
00:23:21,580 --> 00:23:23,740
It's also documented in the QADM,

506
00:23:24,820 --> 00:23:27,380
a NIT documentation on the official community site.

507
00:23:27,380 --> 00:23:29,660
So in fact, container D is still, as I said,

508
00:23:29,660 --> 00:23:32,260
is still front and center when it comes to certification.

509
00:23:32,260 --> 00:23:33,100
It doesn't have anything

510
00:23:33,100 --> 00:23:36,340
on the certification preparation materials for CRIO at all.

511
00:23:37,900 --> 00:23:40,980
This is the Nerd CTL Docker compatible CLI for container D.

512
00:23:42,820 --> 00:23:44,660
Docker compatible CLI for container D.

513
00:23:44,660 --> 00:23:46,740
Okay, well, that actually really helps.

514
00:23:46,740 --> 00:23:47,580
Thank you very much.

515
00:23:47,580 --> 00:23:49,740
That's why I'm doing this.

516
00:23:49,740 --> 00:23:50,700
All right.

517
00:23:50,700 --> 00:23:51,620
Yeah, I didn't even go there.

518
00:23:51,620 --> 00:23:52,620
I didn't know I didn't read anything

519
00:23:52,620 --> 00:23:54,820
about the Nerd CTL at all, little or nothing.

520
00:23:54,820 --> 00:23:55,900
I just put it on here

521
00:23:55,900 --> 00:23:58,100
because people keep recommending it.

522
00:23:59,340 --> 00:24:01,620
So that's good to know, that's good to know.

523
00:24:01,620 --> 00:24:05,660
So container D is still a really strong container

524
00:24:05,660 --> 00:24:07,860
but let me tell you the reason I'm not using it.

525
00:24:07,860 --> 00:24:09,180
Container D is still maintained

526
00:24:09,180 --> 00:24:10,980
by the Docker company officially

527
00:24:10,980 --> 00:24:13,740
and requires some Docker CE packages

528
00:24:13,740 --> 00:24:14,860
to be installed causing confusion.

529
00:24:14,860 --> 00:24:16,380
I did this last year.

530
00:24:16,380 --> 00:24:19,900
Last year, I installed container D as my runtime engine

531
00:24:19,900 --> 00:24:22,500
and it forces you to do,

532
00:24:22,500 --> 00:24:26,300
as soon as you pack, install or whatever you wanna do,

533
00:24:26,300 --> 00:24:29,100
I had to install Docker CE in order to use container D.

534
00:24:29,100 --> 00:24:30,540
And I was like, what the hell?

535
00:24:30,540 --> 00:24:32,540
Because there were packages from it.

536
00:24:32,540 --> 00:24:34,740
And they have never, as far as I know,

537
00:24:34,740 --> 00:24:35,620
they haven't separated them.

538
00:24:35,620 --> 00:24:38,060
So when you read the documentation for installing container D

539
00:24:38,060 --> 00:24:41,140
because it's the same thing that's used in Docker now,

540
00:24:41,140 --> 00:24:43,720
you'll read all this conflicting information

541
00:24:43,720 --> 00:24:44,920
about how to install it.

542
00:24:44,920 --> 00:24:46,160
It turns out that I had to,

543
00:24:46,160 --> 00:24:48,400
yes, I had to follow these installation instructions

544
00:24:48,400 --> 00:24:52,240
and then I had to go in and change all of the defaults

545
00:24:52,240 --> 00:24:53,920
that were installed by Docker CE

546
00:24:53,920 --> 00:24:55,520
so that they would use only container D.

547
00:24:55,520 --> 00:24:58,060
And that step was a pain in the butt.

548
00:24:58,060 --> 00:25:00,680
It took me like an hour to do it, felt like a year

549
00:25:00,680 --> 00:25:02,480
but it took me like an hour to do it.

550
00:25:04,560 --> 00:25:06,360
And container D filled the same role.

551
00:25:07,480 --> 00:25:09,320
Well, I know that's what we're trying to get at.

552
00:25:09,320 --> 00:25:12,240
So the way of JS libraries is if I feel like

553
00:25:12,240 --> 00:25:13,600
the next best thing has come out every week,

554
00:25:14,520 --> 00:25:16,760
yeah, well, the effect of it is is every time they do that,

555
00:25:16,760 --> 00:25:17,800
they also complicate things.

556
00:25:17,800 --> 00:25:20,120
But also, I mean, the abstraction of the interfaces,

557
00:25:20,120 --> 00:25:22,400
the CNI as well, which is the networking part of all this.

558
00:25:22,400 --> 00:25:23,960
We haven't even got that yet.

559
00:25:23,960 --> 00:25:26,760
That completely complicates it even more.

560
00:25:26,760 --> 00:25:30,420
So, you have to know about these things.

561
00:25:30,420 --> 00:25:32,720
And then we got micro virtualization

562
00:25:32,720 --> 00:25:33,880
coming on the scene too.

563
00:25:33,880 --> 00:25:37,480
So anyway, so this is my attempt to simplify this

564
00:25:37,480 --> 00:25:38,760
and make decisions for myself

565
00:25:38,760 --> 00:25:41,840
and to stand by my recommendations for other people.

566
00:25:42,800 --> 00:25:45,720
This is something that's very rare to find in our industry.

567
00:25:45,720 --> 00:25:46,920
There's a lot of people that will tell you

568
00:25:46,920 --> 00:25:48,440
all the possible ways to do things

569
00:25:48,440 --> 00:25:50,160
and they'll have very few opinions.

570
00:25:50,160 --> 00:25:52,440
And I'm gonna tell you why I chose to do these things.

571
00:25:52,440 --> 00:25:54,000
I mean, Tal was, of course, all of this stuff

572
00:25:54,000 --> 00:25:54,840
is irrelevant, right?

573
00:25:54,840 --> 00:25:57,080
Because it's all black box, it's all hidden from you.

574
00:25:57,080 --> 00:25:59,520
But there's other considerations for that.

575
00:25:59,520 --> 00:26:02,640
So if you're installing your own on-prem Kubernetes,

576
00:26:02,640 --> 00:26:05,000
you need to know about these choices.

577
00:26:06,240 --> 00:26:09,960
And so, I mean, I still think it's extremely confusing

578
00:26:09,960 --> 00:26:14,240
that the name Podman has nothing to do with pods at all.

579
00:26:16,360 --> 00:26:18,560
Why did they name it Podman?

580
00:26:18,560 --> 00:26:20,480
I need to drink after that statement.

581
00:26:25,440 --> 00:26:27,320
Red Hat, can you please change the name?

582
00:26:27,320 --> 00:26:29,320
That'll just confuse us all even more.

583
00:26:30,880 --> 00:26:33,800
There's nothing to do with the Kubernetes pod

584
00:26:33,800 --> 00:26:37,680
in the program Podman, not at all.

585
00:26:37,680 --> 00:26:41,240
There is not a single reference to pods at all.

586
00:26:41,240 --> 00:26:42,760
It just happens to be misnamed.

587
00:26:43,880 --> 00:26:46,240
It has pods, but they're different from Kubernetes.

588
00:26:46,240 --> 00:26:47,640
Oh, that's nice to know.

589
00:26:49,360 --> 00:26:51,080
Okay, all right, I'm gonna update my,

590
00:26:51,080 --> 00:26:53,160
I gotta make my thing more accurate then.

591
00:26:54,560 --> 00:26:58,640
Actually, Podman,

592
00:26:59,640 --> 00:27:01,760
as if it wasn't confusing enough,

593
00:27:01,760 --> 00:27:04,880
Podman does have Kubernetes,

594
00:27:04,880 --> 00:27:09,160
does have pods,

595
00:27:09,160 --> 00:27:10,820
have pods,

596
00:27:12,400 --> 00:27:14,840
just not Kubernetes pods.

597
00:27:17,440 --> 00:27:19,000
That makes it even worse.

598
00:27:19,920 --> 00:27:22,360
That makes it even worse.

599
00:27:23,960 --> 00:27:28,600
I mean, the foundational concept is the same, of course it is,

600
00:27:28,600 --> 00:27:30,840
but gotta help you if you think you're gonna be able

601
00:27:30,840 --> 00:27:33,480
to go check all your pods on an input with Podman.

602
00:27:33,560 --> 00:27:35,760
If you install Podman on your endpoint,

603
00:27:35,760 --> 00:27:38,080
this is another thing that's really dangerous,

604
00:27:38,080 --> 00:27:39,040
because I did it.

605
00:27:41,600 --> 00:27:43,760
I'm about to tell you another story of something I did

606
00:27:43,760 --> 00:27:46,800
that I learned from that I'm gonna save you some time on.

607
00:27:46,800 --> 00:27:50,120
So it's like, so I was going through,

608
00:27:50,120 --> 00:27:52,240
I was going through doing my Kubernetes installation

609
00:27:52,240 --> 00:27:55,440
and I needed to get a container in order to use Vault.

610
00:27:56,960 --> 00:27:58,600
No, in order to use

611
00:27:59,560 --> 00:28:03,080
theCUBE VIP, what is it?

612
00:28:03,080 --> 00:28:04,840
Virtual IP, CUBE VIP.

613
00:28:04,840 --> 00:28:06,200
In order to install CUBE VIP,

614
00:28:06,200 --> 00:28:08,320
which is a load balancer, right?

615
00:28:08,320 --> 00:28:12,200
I had to have a running Docker instance,

616
00:28:12,200 --> 00:28:14,720
a container engine on my endpoint,

617
00:28:14,720 --> 00:28:17,600
but I wanted to install it on the control plane

618
00:28:17,600 --> 00:28:20,040
and my control plane, I had Creo on there.

619
00:28:20,040 --> 00:28:22,800
So I'm gonna tell you my sad story, okay?

620
00:28:22,800 --> 00:28:24,520
So don't be me.

621
00:28:24,520 --> 00:28:25,880
I was like, okay, I picked Creo,

622
00:28:25,880 --> 00:28:27,200
I picked the lightweight engine, everything.

623
00:28:27,200 --> 00:28:30,200
And that's where I learned this important lesson.

624
00:28:30,200 --> 00:28:33,160
Now, just because something is CRI compatible

625
00:28:33,160 --> 00:28:35,840
does not mean it's going to have run or exec

626
00:28:35,840 --> 00:28:37,560
or any of the other stuff that you expect

627
00:28:37,560 --> 00:28:39,520
when you're gonna use Docker or Potman

628
00:28:39,520 --> 00:28:41,640
or any of these higher level tools.

629
00:28:41,640 --> 00:28:42,560
So what happened?

630
00:28:42,560 --> 00:28:47,200
I went in there and the documentation for CUBE VIP says,

631
00:28:47,200 --> 00:28:50,640
either use CTR to install the container

632
00:28:50,640 --> 00:28:51,680
that then you can then run,

633
00:28:51,680 --> 00:28:53,920
which will then install the software.

634
00:28:53,920 --> 00:28:56,440
You have to have a container engine running

635
00:28:56,440 --> 00:29:01,440
and Docker quotes to even install this static pod,

636
00:29:02,640 --> 00:29:04,560
which makes no sense at all.

637
00:29:04,560 --> 00:29:06,320
But that's, in fact, I have soured

638
00:29:06,320 --> 00:29:09,200
on that entire CUBE VIP thing now so much

639
00:29:09,200 --> 00:29:10,880
by those, because of those decisions.

640
00:29:10,880 --> 00:29:13,240
And there's a huge thread on their support channel

641
00:29:13,240 --> 00:29:15,280
about how confusing this is for new users

642
00:29:15,280 --> 00:29:16,200
and all this other stuff.

643
00:29:16,200 --> 00:29:18,640
And now the fact that Creo is like the leading container engine

644
00:29:18,640 --> 00:29:20,080
has further complicated the issue

645
00:29:20,080 --> 00:29:21,440
and they don't even have anything there.

646
00:29:21,440 --> 00:29:26,120
In fact, everybody's pushing for the CUBE VIP project

647
00:29:26,120 --> 00:29:30,160
to just put examples of the config files for static pods,

648
00:29:30,160 --> 00:29:32,080
which just have config files in the API

649
00:29:32,080 --> 00:29:35,400
to just leave that and just let people figure it out

650
00:29:35,400 --> 00:29:37,560
because they don't need to install this container runtime.

651
00:29:37,560 --> 00:29:39,160
So because of all of this crap,

652
00:29:39,160 --> 00:29:41,160
I mean, I lost two hours on this shit.

653
00:29:41,160 --> 00:29:42,800
So I'm saving you some time here.

654
00:29:42,800 --> 00:29:46,840
So I was like, okay, I'm following the instructions

655
00:29:46,840 --> 00:29:49,440
and it says that I need to install,

656
00:29:51,000 --> 00:29:53,400
it says I need to install a Docker engine

657
00:29:53,400 --> 00:29:55,200
or something like that, a container engine.

658
00:29:55,280 --> 00:29:57,280
And then I needed to run it

659
00:29:57,280 --> 00:29:58,960
as a way to bootstrap the manifest system.

660
00:29:58,960 --> 00:30:00,160
Yeah, I agree.

661
00:30:00,160 --> 00:30:05,160
And so it either lists CTR or Docker, that's it.

662
00:30:05,920 --> 00:30:07,720
CTR or Docker.

663
00:30:07,720 --> 00:30:09,280
So what did I do?

664
00:30:09,280 --> 00:30:11,280
I assumed, well, okay, I'll try,

665
00:30:11,280 --> 00:30:12,680
I didn't have CTR because I didn't have

666
00:30:12,680 --> 00:30:13,880
a container runtime engine.

667
00:30:13,880 --> 00:30:16,480
So I made a bunch of bad guesses.

668
00:30:16,480 --> 00:30:19,240
And the first bad guess I made was,

669
00:30:19,240 --> 00:30:22,640
oh, I'll just use Cree CTL because it has a list command.

670
00:30:22,640 --> 00:30:24,440
It shows me all of my containers.

671
00:30:24,480 --> 00:30:25,640
It shows me all of my pods

672
00:30:25,640 --> 00:30:26,880
and I don't even have to have a running queue,

673
00:30:26,880 --> 00:30:27,800
but this will be awesome.

674
00:30:27,800 --> 00:30:32,800
I'm sure it's Docker compatible and not yet, we will.

675
00:30:33,040 --> 00:30:34,920
And so I went to go see if it would work

676
00:30:34,920 --> 00:30:36,960
and it didn't work, obviously, why?

677
00:30:36,960 --> 00:30:39,880
Because Cree CTL only deals with pods.

678
00:30:40,960 --> 00:30:43,080
And pods, yeah, sure.

679
00:30:43,080 --> 00:30:43,920
We had some people tell,

680
00:30:43,920 --> 00:30:44,800
oh, it's fine, it does containers.

681
00:30:44,800 --> 00:30:47,840
No, it doesn't do containers unless they're a pod.

682
00:30:47,840 --> 00:30:49,760
So if you have written all the configuration file

683
00:30:49,760 --> 00:30:53,200
to turn a container that's on the system into a pod,

684
00:30:53,200 --> 00:30:54,600
yeah, it's happy to play with that

685
00:30:54,600 --> 00:30:56,320
and it'll do it and you can run it.

686
00:30:56,320 --> 00:30:59,360
You can start it, you can't run it, you have to start it

687
00:30:59,360 --> 00:31:01,880
because it only implements the minimum necessary

688
00:31:01,880 --> 00:31:04,220
for CRR, which is create, start, kill, delete.

689
00:31:04,220 --> 00:31:05,240
There's no run.

690
00:31:06,280 --> 00:31:07,840
Okay, so that was the first mistake I made.

691
00:31:07,840 --> 00:31:08,880
I was like, I cannot do this.

692
00:31:08,880 --> 00:31:11,280
And then I had a whole bunch of people on the stream

693
00:31:11,280 --> 00:31:13,200
telling me, yes you can, you just have to turn it into a pod.

694
00:31:13,200 --> 00:31:16,680
I'm like, I just wanna run a stupid install script here.

695
00:31:16,680 --> 00:31:18,920
Why did they not give us an installer?

696
00:31:18,920 --> 00:31:20,560
Why did they not give us an install script?

697
00:31:20,560 --> 00:31:22,000
Why didn't they give us config files?

698
00:31:22,000 --> 00:31:23,560
And everybody came up with opinions that are like,

699
00:31:23,560 --> 00:31:25,640
oh, blah, blah, blah, and I'm like, look, I'm the noob here.

700
00:31:25,640 --> 00:31:26,760
I just wanna use this thing.

701
00:31:26,760 --> 00:31:28,160
And I about threw it all out

702
00:31:28,160 --> 00:31:31,400
because just because of the bad installation steps

703
00:31:31,400 --> 00:31:32,640
because of all these complications

704
00:31:32,640 --> 00:31:34,000
that they didn't even think about.

705
00:31:34,000 --> 00:31:35,520
Yeah, create your YAML and then you're good.

706
00:31:35,520 --> 00:31:36,360
You just copy and paste it.

707
00:31:36,360 --> 00:31:38,680
But it doesn't say that in the documentation at all.

708
00:31:38,680 --> 00:31:40,000
It says your best way to do this

709
00:31:40,000 --> 00:31:41,680
is just go run the container and do this thing.

710
00:31:41,680 --> 00:31:43,880
They could have just provided like a bash script

711
00:31:43,880 --> 00:31:45,880
and been done with it or any of these things.

712
00:31:45,880 --> 00:31:47,160
They didn't do any of that.

713
00:31:47,160 --> 00:31:50,160
And that frustration was enough to almost send me

714
00:31:50,160 --> 00:31:52,200
down the HA proxy path,

715
00:31:52,200 --> 00:31:54,240
which is completely separate from all of this stuff,

716
00:31:54,240 --> 00:31:55,640
which runs under its own daemon,

717
00:31:55,640 --> 00:31:57,440
which I would probably run as a VM

718
00:31:57,440 --> 00:32:00,160
completely outside of Kubernetes if I ended up doing that,

719
00:32:00,160 --> 00:32:01,000
which is a load balance.

720
00:32:01,000 --> 00:32:04,320
It's a different topic, but the accuracy,

721
00:32:04,320 --> 00:32:05,280
I think they should.

722
00:32:05,280 --> 00:32:06,720
I think they should, a lot of people agree with it.

723
00:32:06,720 --> 00:32:07,560
They should do that.

724
00:32:07,560 --> 00:32:09,360
So anyway, I mean, I lost hours on that.

725
00:32:09,360 --> 00:32:11,560
And so did everybody else that was watching this.

726
00:32:11,560 --> 00:32:14,080
And I'm saving you the time by looking at this annoying,

727
00:32:14,080 --> 00:32:14,960
don't do that.

728
00:32:14,960 --> 00:32:17,680
And the reason, I actually, it was so annoyed by it

729
00:32:17,680 --> 00:32:19,840
that I actually read the entire,

730
00:32:19,840 --> 00:32:21,960
I briefly scanned, I should say,

731
00:32:21,960 --> 00:32:27,120
the entire CRI specification to see why this command

732
00:32:27,120 --> 00:32:27,960
isn't in there.

733
00:32:27,960 --> 00:32:29,360
And that was when I uncovered that only create,

734
00:32:29,360 --> 00:32:31,720
start, kill, and delete are truly supported.

735
00:32:31,720 --> 00:32:34,460
They're the only operations required by the CRI,

736
00:32:34,460 --> 00:32:35,880
by the entire specification.

737
00:32:35,880 --> 00:32:39,600
So I was like, okay, so mistake number two that I did,

738
00:32:39,600 --> 00:32:40,760
mistake number two.

739
00:32:40,760 --> 00:32:43,740
I said, okay, well, if I need a container runtime engine

740
00:32:43,740 --> 00:32:45,120
over there and I need to get to these containers,

741
00:32:45,120 --> 00:32:46,320
I need to be able to do the,

742
00:32:46,320 --> 00:32:47,520
I need to follow the instructions,

743
00:32:47,520 --> 00:32:49,760
which are Docker run, right?

744
00:32:49,760 --> 00:32:51,120
Or CTR run.

745
00:32:51,120 --> 00:32:53,040
I'm like, huh, well, there's no Docker, there's no CTR.

746
00:32:53,040 --> 00:32:54,240
What's my next best guess?

747
00:32:54,240 --> 00:32:55,080
Podman.

748
00:32:55,080 --> 00:32:56,440
So I mean, I was like, well,

749
00:32:56,440 --> 00:32:58,360
Podman is supposed to work with everything, right?

750
00:32:58,360 --> 00:33:01,180
It's CRI, it's got CRI built into it.

751
00:33:01,180 --> 00:33:02,880
I'm sure that will work.

752
00:33:02,880 --> 00:33:03,720
Wrong.

753
00:33:03,720 --> 00:33:07,000
So I installed Podman onto the cube controller,

754
00:33:07,000 --> 00:33:10,280
the Kubernetes plane, so that for one reason only,

755
00:33:10,280 --> 00:33:14,000
just so that I could run the container that would then,

756
00:33:14,000 --> 00:33:18,840
you know, start and install my cube, my QVIP, right?

757
00:33:18,840 --> 00:33:21,760
And it worked, it worked, it installed it just fine.

758
00:33:21,760 --> 00:33:23,880
But then I later on, I started noticing

759
00:33:24,840 --> 00:33:28,120
that what the Podman was showing me

760
00:33:28,120 --> 00:33:31,780
was completely different from what Cree CTL was showing me.

761
00:33:32,680 --> 00:33:35,280
And I noticed that they were looking at different sockets

762
00:33:35,280 --> 00:33:37,440
or different services and things completely entirely.

763
00:33:37,440 --> 00:33:40,880
And then I realized a very, very important lesson.

764
00:33:40,880 --> 00:33:44,480
And I cannot overemphasize this enough.

765
00:33:44,480 --> 00:33:49,480
Do not mix your Creo container engines

766
00:33:50,720 --> 00:33:55,160
on a Kubernetes node with any other high level

767
00:33:55,160 --> 00:33:57,860
runtime management tool.

768
00:33:57,860 --> 00:34:01,680
Just don't do it, because you cannot be sure

769
00:34:01,680 --> 00:34:05,040
that they're gonna use the same thing underneath.

770
00:34:05,040 --> 00:34:07,280
In fact, the very nature of the engine makes it

771
00:34:07,280 --> 00:34:09,720
so that they have radically different ways

772
00:34:09,720 --> 00:34:10,560
of implementing things.

773
00:34:10,560 --> 00:34:12,560
Container D has its whole socket thing.

774
00:34:12,560 --> 00:34:14,620
Creo has got its own service thing.

775
00:34:15,960 --> 00:34:17,880
And you know what I'm saying?

776
00:34:17,880 --> 00:34:22,880
It's like there's just a ton of reasons not to do that

777
00:34:23,720 --> 00:34:27,120
because the way that containers are implemented

778
00:34:27,120 --> 00:34:30,960
by the engine, even if the underlying LXC stuff

779
00:34:30,960 --> 00:34:33,840
is the same, because that's what this is all into, right?

780
00:34:33,840 --> 00:34:37,800
But that middleware between the person talking

781
00:34:37,800 --> 00:34:39,320
to the container for, or the thing talking

782
00:34:39,320 --> 00:34:41,200
to the container, person or service,

783
00:34:41,200 --> 00:34:45,640
and the underlying LXC execution of the containers,

784
00:34:45,640 --> 00:34:48,680
the stuff in between there can radically differ.

785
00:34:48,680 --> 00:34:52,240
And this has been the whole area of the fight

786
00:34:52,240 --> 00:34:53,760
between Creo and Container D.

787
00:34:53,760 --> 00:34:55,360
Container D is insecure.

788
00:34:55,360 --> 00:34:57,020
I mean, they fixed a lot of it now,

789
00:34:57,020 --> 00:35:00,760
but Creo does not have, get privileged,

790
00:35:00,760 --> 00:35:02,840
it doesn't have a socket that's running its route.

791
00:35:02,840 --> 00:35:06,600
All the things that Docker just got beat up over

792
00:35:06,600 --> 00:35:08,480
for just doing poorly.

793
00:35:08,520 --> 00:35:11,240
Inefficiently, poorly, and insecurely,

794
00:35:11,240 --> 00:35:13,280
Docker just really messed up.

795
00:35:13,280 --> 00:35:14,920
And they just never intended to fix it.

796
00:35:14,920 --> 00:35:17,240
And so Container D has tried to kind of fix

797
00:35:17,240 --> 00:35:18,560
all those things over the years and say,

798
00:35:18,560 --> 00:35:20,080
well, yeah, okay, we did that wrong.

799
00:35:20,080 --> 00:35:21,600
If you wanna do it this other way, do it this other way,

800
00:35:21,600 --> 00:35:22,880
but it's not the default, blah, blah, blah.

801
00:35:22,880 --> 00:35:24,160
It's a pain in the ass.

802
00:35:24,160 --> 00:35:26,200
The bottom line is that the stuff

803
00:35:26,200 --> 00:35:28,440
in this middle layer here, right?

804
00:35:28,440 --> 00:35:31,060
The stuff right here and this middle layer

805
00:35:31,060 --> 00:35:33,440
is so different depending on the stuff

806
00:35:33,440 --> 00:35:35,920
in the top layer that gets installed

807
00:35:35,920 --> 00:35:40,040
that you just don't wanna mix the two.

808
00:35:40,040 --> 00:35:41,640
Do not cross the streams.

809
00:35:41,640 --> 00:35:43,800
If you do, you're gonna get burned.

810
00:35:43,800 --> 00:35:47,280
And I'm gonna read the statement down here

811
00:35:47,280 --> 00:35:48,120
that goes with this.

812
00:35:48,120 --> 00:35:50,960
I'm gonna zoom in on this a little bit and read this.

813
00:35:50,960 --> 00:35:55,200
But this summation down here with the explosion

814
00:35:55,200 --> 00:35:59,280
is my conclusion about this.

815
00:35:59,280 --> 00:36:00,800
So with Creo containers,

816
00:36:01,800 --> 00:36:04,400
the Creo containers must be put into pods

817
00:36:04,400 --> 00:36:07,240
to run them at all, all right?

818
00:36:07,240 --> 00:36:09,360
So this is considered good

819
00:36:09,360 --> 00:36:11,480
because using a container runtime for anything

820
00:36:11,480 --> 00:36:14,840
but Kubernetes on a node, on a Kubernetes node

821
00:36:14,840 --> 00:36:17,060
is considered bad practice.

822
00:36:17,060 --> 00:36:20,800
In fact, when I suggested on the stream,

823
00:36:20,800 --> 00:36:22,200
while I was doing this,

824
00:36:22,200 --> 00:36:24,160
that our company regularly does this

825
00:36:24,160 --> 00:36:26,160
because they don't allow users to have their own Docker

826
00:36:26,160 --> 00:36:28,100
and they regularly tell people

827
00:36:28,100 --> 00:36:29,720
if you need to run Docker for anything,

828
00:36:29,720 --> 00:36:31,520
just go get on one of the head nodes

829
00:36:31,520 --> 00:36:34,320
and run Docker straight up on it

830
00:36:34,320 --> 00:36:37,040
and just reuse the Docker container engine on there.

831
00:36:37,040 --> 00:36:39,880
That's also running the control plane containers

832
00:36:39,880 --> 00:36:40,840
and pods on there.

833
00:36:41,760 --> 00:36:45,080
That is like a really bad offense.

834
00:36:45,080 --> 00:36:47,760
It's not the kind of thing you're gonna get fired for yet

835
00:36:47,760 --> 00:36:49,400
but when I mentioned that on the stream

836
00:36:49,400 --> 00:36:50,240
that people were doing it,

837
00:36:50,240 --> 00:36:52,520
people were laughing their asses off.

838
00:36:52,520 --> 00:36:54,120
They were freaking the fuck out.

839
00:36:54,120 --> 00:36:57,280
They could not believe that any company

840
00:36:57,280 --> 00:36:58,960
would ever allow that

841
00:36:58,960 --> 00:37:00,440
because it's not only is it insecure

842
00:37:00,440 --> 00:37:02,560
but it's just asking to blow up.

843
00:37:03,440 --> 00:37:06,040
It is, it's asking to blow up.

844
00:37:06,040 --> 00:37:08,620
It's absolutely horrible to do that.

845
00:37:08,620 --> 00:37:11,020
Now, I tried to make the case wrongly

846
00:37:11,020 --> 00:37:13,000
that well, what if you only have one machine

847
00:37:13,000 --> 00:37:13,840
then you have to decide

848
00:37:13,840 --> 00:37:16,920
and maybe you wanna share both of them over there.

849
00:37:16,920 --> 00:37:17,920
You know what I mean?

850
00:37:17,920 --> 00:37:20,120
And the fact of the matter is

851
00:37:20,120 --> 00:37:24,360
thou shalt never ever use your Kubernetes nodes,

852
00:37:24,360 --> 00:37:26,280
the container engine on your Kubernetes nodes

853
00:37:26,320 --> 00:37:28,400
for anything but Kubernetes.

854
00:37:30,720 --> 00:37:33,200
Here's some VMs on ES6, of course.

855
00:37:33,200 --> 00:37:35,920
So yeah, right.

856
00:37:35,920 --> 00:37:38,640
And so let me just continue reading this.

857
00:37:38,640 --> 00:37:41,400
So it's considered very bad practice today.

858
00:37:41,400 --> 00:37:44,440
It is also a bad practice to install Podman

859
00:37:44,440 --> 00:37:47,960
or any container utility on a node

860
00:37:47,960 --> 00:37:52,240
because the engine used may not coincide.

861
00:37:52,240 --> 00:37:55,920
And it may, it'll still use LXC down on the bottom.

862
00:37:55,920 --> 00:37:59,160
It has to, but the stuff in between there

863
00:37:59,160 --> 00:38:01,240
is totally different, whether it uses a service

864
00:38:01,240 --> 00:38:02,640
or a daemon or a container.

865
00:38:02,640 --> 00:38:06,600
So it's not gonna be what you would expect, right?

866
00:38:06,600 --> 00:38:09,120
And so as you become familiar with the internals

867
00:38:09,120 --> 00:38:13,600
of how, you know, Creo uses its thing, which is a service

868
00:38:13,600 --> 00:38:16,240
then you know that how to do that

869
00:38:16,240 --> 00:38:18,680
but a container uses a socket, which is totally different.

870
00:38:18,680 --> 00:38:22,000
It may be that there's multiple options for both of them

871
00:38:22,600 --> 00:38:27,480
but the point is, is that you can't be sure

872
00:38:27,480 --> 00:38:31,120
that you're apt install or DNF install Podman

873
00:38:31,120 --> 00:38:34,280
is actually going to do the same thing

874
00:38:34,280 --> 00:38:39,280
that you used when you installed your container runtime engine

875
00:38:39,280 --> 00:38:40,680
which is a totally, whether it's containerity

876
00:38:40,680 --> 00:38:41,640
or it's the other thing.

877
00:38:41,640 --> 00:38:43,280
So do not mix the two.

878
00:38:43,280 --> 00:38:46,240
If you mix the two, you're just asking for pain and hurt

879
00:38:46,240 --> 00:38:49,800
even though you think it might be saving something, it's not.

880
00:38:49,840 --> 00:38:52,080
It is also bad practice itself on that, okay.

881
00:38:52,080 --> 00:38:55,360
As a rule of thumb, use kreectl for pods,

882
00:38:55,360 --> 00:38:56,400
containers on a note.

883
00:38:56,400 --> 00:38:59,760
And I said the word pod there on purpose, right?

884
00:38:59,760 --> 00:39:04,460
Kreectl cannot directly access containers, period.

885
00:39:04,460 --> 00:39:05,800
It doesn't have to go to kubelet.

886
00:39:05,800 --> 00:39:07,040
That's why I drew that little picture

887
00:39:07,040 --> 00:39:08,400
of a configuration file.

888
00:39:08,400 --> 00:39:11,720
So if you have static pods on the machine,

889
00:39:11,720 --> 00:39:14,360
it can talk directly to those pods

890
00:39:14,360 --> 00:39:16,340
but it has to have knowledge of those pods.

891
00:39:16,340 --> 00:39:18,320
That means it has to see the configuration file

892
00:39:18,320 --> 00:39:19,880
to know how to wrap up that container

893
00:39:19,880 --> 00:39:22,920
and put it into a pod and then access it using a pod.

894
00:39:24,560 --> 00:39:27,440
And of course, you can't use kubectl

895
00:39:27,440 --> 00:39:29,280
on the endpoint without kubelet.

896
00:39:29,280 --> 00:39:31,600
That has to have the API as far as I know.

897
00:39:31,600 --> 00:39:35,680
So as a rule of thumb, use kreectl for pods,

898
00:39:35,680 --> 00:39:38,520
containers on a note, everything on a note,

899
00:39:40,520 --> 00:39:41,520
for everything on a note.

900
00:39:41,520 --> 00:39:44,840
And podman, despite the horribly confusing name

901
00:39:44,880 --> 00:39:48,520
or nerdctl for non-kubernetes containers.

902
00:39:50,000 --> 00:39:54,040
So containers are still very relevant.

903
00:39:54,040 --> 00:39:55,440
So people were asking me about Docker compose,

904
00:39:55,440 --> 00:39:56,920
why that isn't on here and stuff.

905
00:39:56,920 --> 00:40:00,760
Because Docker compose and these top-level things,

906
00:40:03,240 --> 00:40:05,080
these top-level things up here,

907
00:40:05,080 --> 00:40:07,040
they're nice and good and all

908
00:40:07,040 --> 00:40:12,040
but they're not really, these things up here,

909
00:40:12,120 --> 00:40:17,120
these things do not have to be associated with Kubernetes.

910
00:40:18,320 --> 00:40:21,080
But that is an entirely different approach to containers.

911
00:40:21,080 --> 00:40:24,720
And I really wanna emphasize that in 2022,

912
00:40:24,720 --> 00:40:27,400
the best thing you can do for yourself as a beginner

913
00:40:27,400 --> 00:40:31,200
or as a veteran is to think of Kubernetes containers

914
00:40:31,200 --> 00:40:34,360
differently than everything else.

915
00:40:35,640 --> 00:40:38,280
Because if you do, you'll save yourself.

916
00:40:38,280 --> 00:40:40,600
You say, well, they're all just containers.

917
00:40:40,600 --> 00:40:42,880
And yeah, okay, they're containers

918
00:40:42,880 --> 00:40:46,640
at the lowest, lowest, lowest, lowest, lowest, lowest level.

919
00:40:46,640 --> 00:40:48,200
They're all using LXC.

920
00:40:48,200 --> 00:40:49,560
Okay, that's true.

921
00:40:49,560 --> 00:40:53,880
But everything in between there and you

922
00:40:53,880 --> 00:40:57,160
is totally different depending on whether you're doing it

923
00:40:57,160 --> 00:41:00,680
for Kubernetes or you're doing it for Docker compose.

924
00:41:00,680 --> 00:41:04,560
And to save yourself a lot of pain and suffering,

925
00:41:04,560 --> 00:41:06,440
I cannot overstate this enough

926
00:41:06,440 --> 00:41:09,000
because I went through hours of it.

927
00:41:09,000 --> 00:41:14,000
That you need to separate those concepts in your brain.

928
00:41:14,480 --> 00:41:16,680
And should you learn Docker compose?

929
00:41:16,680 --> 00:41:19,040
Yeah, should you learn Docker swarm?

930
00:41:19,040 --> 00:41:20,520
I don't know, maybe not.

931
00:41:20,520 --> 00:41:22,640
But Docker compose is not bad.

932
00:41:22,640 --> 00:41:25,040
And you can do podman compose too, right?

933
00:41:25,040 --> 00:41:27,520
But those are things that are for a totally different approach.

934
00:41:27,520 --> 00:41:31,480
And frankly, we need to have, in fact,

935
00:41:31,480 --> 00:41:34,560
from now on I'm gonna refer to them as Kubernetes containers

936
00:41:34,560 --> 00:41:37,520
and probably Docker compose containers.

937
00:41:38,520 --> 00:41:40,920
Because those, to me, that's the biggest separation, right?

938
00:41:40,920 --> 00:41:42,960
If you're using Docker compose

939
00:41:44,680 --> 00:41:46,240
or you're using podman compose or whatever,

940
00:41:46,240 --> 00:41:48,560
but Docker, as soon as you were Docker and compose,

941
00:41:48,560 --> 00:41:51,760
you're like, oh, we're talking about that.

942
00:41:51,760 --> 00:41:53,640
You're talking about all the container wonderfulness

943
00:41:53,640 --> 00:41:55,400
that doesn't have anything to do with Kubernetes.

944
00:41:55,400 --> 00:41:57,200
But when you start talking about Kubernetes containers,

945
00:41:57,200 --> 00:41:59,600
you're talking about a different beast altogether,

946
00:41:59,600 --> 00:42:01,800
even though some of these things have similarities

947
00:42:01,800 --> 00:42:03,640
at certain points in the architecture.

948
00:42:04,600 --> 00:42:07,040
Whew, now that seems like a lot to say.

949
00:42:08,160 --> 00:42:11,640
But I really feel like I finally understand it.

950
00:42:11,640 --> 00:42:14,560
And I just had to capture that really quickly into a video.

951
00:42:14,560 --> 00:42:16,640
That's all I have for this specific video.

952
00:42:18,040 --> 00:42:21,400
And hopefully that will save you some pain and suffering

953
00:42:21,400 --> 00:42:25,400
as you go about your Kubernetes admin installations

954
00:42:25,400 --> 00:42:29,400
and all of the other stuff that you might end up wanting to do.

955
00:42:29,400 --> 00:42:31,360
This diagram is available.

956
00:42:31,360 --> 00:42:33,560
Anybody to come see, I'll put it in the Discord.

957
00:42:33,560 --> 00:42:38,560
And I'll be using this diagram to make sense of my world

958
00:42:40,400 --> 00:42:43,720
as I go about the installation of my,

959
00:42:43,720 --> 00:42:44,720
the next thing I'm gonna be doing,

960
00:42:44,720 --> 00:42:48,040
I'm gonna be installing these clusters.

961
00:42:48,040 --> 00:42:50,560
And I, did we save this already?

962
00:42:50,560 --> 00:42:53,160
This, I think it saves automatically actually.

963
00:42:53,160 --> 00:42:54,160
Supposed to anyway.

964
00:42:55,480 --> 00:42:58,600
But so yeah, so this, the next thing I'm gonna be doing,

965
00:42:58,600 --> 00:43:00,360
which I may or may not do today,

966
00:43:00,360 --> 00:43:03,360
is I'll be installing some other Kubernetes clusters

967
00:43:03,360 --> 00:43:06,840
over here and we're gonna go back to using QBDM for that.

968
00:43:06,840 --> 00:43:11,320
I do need to solve all so I can get some PKI root CA stuff.

969
00:43:11,320 --> 00:43:13,080
And I need to get my head around

970
00:43:13,080 --> 00:43:15,160
how I'm gonna manage VMs on this machine

971
00:43:15,160 --> 00:43:18,160
because I'm gonna be running a Cordeon S&D,

972
00:43:18,160 --> 00:43:20,760
a Key Cloak and Vault and all of that stuff

973
00:43:20,760 --> 00:43:23,880
before I go forth with my QBDM installation,

974
00:43:23,880 --> 00:43:28,120
which is probably not gonna happen tonight or even tomorrow,

975
00:43:28,120 --> 00:43:31,080
but I am going out of town for next week.

976
00:43:32,080 --> 00:43:33,960
Yeah, and you like Vault, yeah.

977
00:43:33,960 --> 00:43:37,280
So just to give you an overview of what's next

978
00:43:37,280 --> 00:43:38,880
and why this might relate.

979
00:43:40,800 --> 00:43:41,840
Oh, we use build a lot.

980
00:43:41,840 --> 00:43:46,840
Yeah, so builda is actually built into Podman.

981
00:43:46,920 --> 00:43:48,400
That's another thing I like about Podman

982
00:43:48,400 --> 00:43:49,640
is the build is built into,

983
00:43:49,640 --> 00:43:50,960
and builda is just,

984
00:43:50,960 --> 00:43:53,760
it's all it does is just build the images, right?

985
00:43:53,760 --> 00:43:55,560
And escopio is another good one

986
00:43:55,560 --> 00:43:59,560
that will transfer containers between registries

987
00:43:59,560 --> 00:44:00,560
and stuff like that.

988
00:44:01,760 --> 00:44:03,560
So yeah, just to finish out the idea

989
00:44:03,560 --> 00:44:04,960
about where this is going.

990
00:44:06,600 --> 00:44:07,560
I keep drawing on here

991
00:44:07,560 --> 00:44:10,000
because I'm still got that selected.

992
00:44:12,280 --> 00:44:15,680
So the next steps are probably,

993
00:44:15,680 --> 00:44:17,160
so as I got my whole Vlan all set up,

994
00:44:17,160 --> 00:44:18,560
I'm so happy about that.

995
00:44:18,560 --> 00:44:20,800
There's a video on that if you wanna watch that.

996
00:44:21,760 --> 00:44:24,800
That we're gonna go ahead and,

997
00:44:24,800 --> 00:44:25,800
where does Istio fit?

998
00:44:25,800 --> 00:44:27,480
Istio is just a service mesh.

999
00:44:28,480 --> 00:44:32,080
Yeah, so we are gonna do Istio,

1000
00:44:32,080 --> 00:44:34,840
but it's gonna be like the last thing.

1001
00:44:34,840 --> 00:44:36,040
The main thing Istio gives you,

1002
00:44:36,040 --> 00:44:36,880
it gives you lots of things,

1003
00:44:36,880 --> 00:44:37,800
but the main thing it gives you

1004
00:44:37,800 --> 00:44:40,560
is like virtual machine, virtual servers

1005
00:44:40,560 --> 00:44:43,880
that have domain names that get a little balance of stuff.

1006
00:44:43,880 --> 00:44:44,720
Yeah.

1007
00:44:47,240 --> 00:44:49,400
Yeah, we still have to pick a CNI and all that.

1008
00:44:49,400 --> 00:44:51,920
So before, so a couple of changes

1009
00:44:51,920 --> 00:44:53,760
just to update everybody who hasn't watched.

1010
00:44:53,760 --> 00:44:56,340
So this is gonna be the TALIS cluster over here.

1011
00:44:56,380 --> 00:44:58,220
Right now, I'm doing some testing offline

1012
00:44:58,220 --> 00:45:00,820
to see if I can TFTP boot

1013
00:45:00,820 --> 00:45:03,700
one of the Dell Optuplex machines that I already have.

1014
00:45:03,700 --> 00:45:06,860
There is some problems with the Pixie boot

1015
00:45:06,860 --> 00:45:09,580
and it requires you to push F11 to do the booting.

1016
00:45:09,580 --> 00:45:13,300
So that does annoy me a lot actually.

1017
00:45:15,260 --> 00:45:18,900
And because I can't, I don't know.

1018
00:45:18,900 --> 00:45:23,460
I'm really tempted to just throw TALIS out for now.

1019
00:45:23,460 --> 00:45:25,380
As soon as I read that TALIS cannot do,

1020
00:45:25,420 --> 00:45:26,380
I mean, this is another topic.

1021
00:45:26,380 --> 00:45:27,620
I should talk about this, not right now,

1022
00:45:27,620 --> 00:45:31,740
but when I found out that TALIS cannot,

1023
00:45:31,740 --> 00:45:34,500
that these machines cannot do true Pixie boot

1024
00:45:34,500 --> 00:45:37,460
that any time you, TALIS requires

1025
00:45:37,460 --> 00:45:38,860
being able to reboot the machine.

1026
00:45:38,860 --> 00:45:41,620
And I have not gotten around.

1027
00:45:41,620 --> 00:45:44,180
I need to ask somebody from Cedaro or TALIS

1028
00:45:44,180 --> 00:45:48,180
as like, what happens about that, right?

1029
00:45:48,180 --> 00:45:51,140
So I want a totally, you know,

1030
00:45:51,140 --> 00:45:53,700
hands off installation and management of TALIS.

1031
00:45:53,700 --> 00:45:56,220
That's the thing that they keep promising you.

1032
00:45:56,220 --> 00:45:58,460
But if every time I reconfigure a server,

1033
00:45:58,460 --> 00:46:01,020
I have to go in and touch every server and reboot them.

1034
00:46:01,020 --> 00:46:03,300
I don't, it's not even, it's not, it's a non-starter.

1035
00:46:03,300 --> 00:46:05,380
I don't even want to do that.

1036
00:46:05,380 --> 00:46:06,700
Thank you for that.

1037
00:46:06,700 --> 00:46:09,900
So, so I, I'm, you know what?

1038
00:46:09,900 --> 00:46:11,380
I'm just gonna make a decision.

1039
00:46:11,380 --> 00:46:12,780
I'm gonna throw these out.

1040
00:46:14,060 --> 00:46:16,860
I'm gonna throw TALIS out of the environment for now.

1041
00:46:16,860 --> 00:46:19,660
For now, I got too much other stuff to deploy.

1042
00:46:20,260 --> 00:46:25,260
And we will go with that.

1043
00:46:26,300 --> 00:46:28,100
It might be that I do PBS for this.

1044
00:46:28,100 --> 00:46:31,820
We don't know, the key HTTP from IC.

1045
00:46:31,820 --> 00:46:33,780
Yeah, did you know, did you know that,

1046
00:46:33,780 --> 00:46:34,860
did you hear that we found out that

1047
00:46:34,860 --> 00:46:37,260
IC DHCP is supported on OpenSense?

1048
00:46:37,260 --> 00:46:38,900
That's the, that's the DHCP it uses.

1049
00:46:38,900 --> 00:46:40,420
So you can go in there and edit it.

1050
00:46:40,420 --> 00:46:42,500
The problem is, is you got to save your files someplace

1051
00:46:42,500 --> 00:46:45,140
because if OpenSense, if you update the firmware,

1052
00:46:45,140 --> 00:46:46,900
it'll throw out your entire configuration.

1053
00:46:46,900 --> 00:46:48,780
So you got to, it will back it up for you.

1054
00:46:48,860 --> 00:46:51,260
But it's something that's kind of, I was,

1055
00:46:51,260 --> 00:46:54,300
we, I found out, is it, yeah.

1056
00:46:55,900 --> 00:46:57,940
I think the key DHCP server is probably gonna be the one

1057
00:46:57,940 --> 00:46:59,100
that I'm gonna install.

1058
00:47:00,940 --> 00:47:04,900
I am going to install a DHCP server on my internal VLAN,

1059
00:47:04,900 --> 00:47:09,340
but I don't know how much of a priority it is right away

1060
00:47:10,300 --> 00:47:12,900
for years, very, very fantastic, very good stuff.

1061
00:47:14,700 --> 00:47:17,460
So, I mean, as far as YouTube goes,

1062
00:47:18,460 --> 00:47:19,820
I'm gonna go ahead and end that video here.

1063
00:47:19,820 --> 00:47:23,300
So just as a follow-up, so, you know,

1064
00:47:23,300 --> 00:47:28,300
have fun with that, with the container runtime engine,

1065
00:47:30,060 --> 00:47:31,060
maybe play around with it.

1066
00:47:31,060 --> 00:47:33,860
The last thing I will say, for a very long time,

1067
00:47:33,860 --> 00:47:36,820
I've been, I was anti-podman and I was wrong.

1068
00:47:36,820 --> 00:47:39,380
I was wrong for a number of reasons,

1069
00:47:39,380 --> 00:47:41,180
but the most important reason that I was wrong,

1070
00:47:41,180 --> 00:47:42,820
I was mostly wrong because I was looking at how

1071
00:47:42,820 --> 00:47:44,280
podman manages a container.

1072
00:47:44,280 --> 00:47:47,220
For example, podman does a lot of magic

1073
00:47:47,220 --> 00:47:48,060
to the container.

1074
00:47:48,060 --> 00:47:50,980
For example, it injects the system CTL into any pod

1075
00:47:52,100 --> 00:47:55,940
or stuff that enables system CTL to be more specific

1076
00:47:55,940 --> 00:47:58,660
because they make a big case at Red Hat

1077
00:47:58,660 --> 00:48:03,180
that container should be able to simulate machines,

1078
00:48:03,180 --> 00:48:05,300
you know, and be basically miniature VMs,

1079
00:48:05,300 --> 00:48:07,600
which I completely disagree with.

1080
00:48:07,600 --> 00:48:09,220
I think micro, you know, use the virtual machine

1081
00:48:09,220 --> 00:48:11,220
for a virtual machine and don't use podman for that.

1082
00:48:11,220 --> 00:48:12,980
It was annoying though, like a year and a half ago

1083
00:48:12,980 --> 00:48:14,900
when I was doing the boost and we were using containers

1084
00:48:14,900 --> 00:48:17,260
because I couldn't simulate the installation

1085
00:48:17,260 --> 00:48:19,400
and management of services the same way you would

1086
00:48:19,400 --> 00:48:21,460
on an actual Linux virtual machine.

1087
00:48:21,460 --> 00:48:23,740
And that's one of the main reasons that we switched over

1088
00:48:23,740 --> 00:48:26,260
to this when you're doing like system CTL, you know,

1089
00:48:26,260 --> 00:48:29,940
restart, you know, whatever, HTTPD or NGINX or whatever,

1090
00:48:29,940 --> 00:48:32,940
those kinds of commands can't be done in a container

1091
00:48:32,940 --> 00:48:34,260
and they can't be practiced in a container.

1092
00:48:34,260 --> 00:48:35,900
But if you just need access to a terminal

1093
00:48:35,900 --> 00:48:37,940
to practice bash and stuff, great.

1094
00:48:37,940 --> 00:48:41,140
But if you want to practice systems administration

1095
00:48:41,140 --> 00:48:43,860
and on whatever, I think you need a virtual machine

1096
00:48:43,860 --> 00:48:46,900
which prompted the change to use virtual machines

1097
00:48:46,900 --> 00:48:48,860
in the boost in 2022.

1098
00:48:48,860 --> 00:48:52,100
So in 2023, however, I'm strongly, well,

1099
00:48:52,100 --> 00:48:56,660
I already decided that we're gonna be doing all four ways,

1100
00:48:56,660 --> 00:48:59,380
all five ways of getting Linux, which I've mentioned before.

1101
00:48:59,380 --> 00:49:01,260
And one of those ways is podman.

1102
00:49:01,260 --> 00:49:04,620
And the reason I'm even saying about this now

1103
00:49:04,620 --> 00:49:09,620
is that it's six-caliber, you guys wanna copy again.

1104
00:49:10,620 --> 00:49:15,620
So as I've said, the podman, now I've tested it

1105
00:49:24,140 --> 00:49:26,860
in three different machines, I've tested on Mac, Linux

1106
00:49:26,860 --> 00:49:31,260
and Windows, the podman desktop installation process

1107
00:49:31,260 --> 00:49:36,100
is as easy as desktop, Docker desktop used to be.

1108
00:49:36,100 --> 00:49:37,660
I need a lot of commands.

1109
00:49:37,660 --> 00:49:39,540
The command thing wasn't even working till yesterday.

1110
00:49:39,540 --> 00:49:41,540
So I'll update all of that, I need lots of things.

1111
00:49:41,540 --> 00:49:46,540
I also need help and time and a clean room.

1112
00:49:47,580 --> 00:49:52,580
Okay, so we will be providing instructions

1113
00:49:54,180 --> 00:49:58,180
in the boost about how to get podman up

1114
00:49:59,620 --> 00:50:02,380
and running on your desktop.

1115
00:50:02,380 --> 00:50:04,820
But I just wanna kind of conclude this YouTube video

1116
00:50:04,820 --> 00:50:09,220
with that, if you haven't tried podman out yet

1117
00:50:09,220 --> 00:50:12,300
on the desktop, whatever your desktop is, you might try it.

1118
00:50:12,300 --> 00:50:14,340
Something else I'm super interested in

1119
00:50:14,340 --> 00:50:18,380
is that podman actually chose to use Kimu and KVM,

1120
00:50:18,380 --> 00:50:21,180
which is exactly what Docker desktop does, by the way.

1121
00:50:21,180 --> 00:50:23,220
Okay, here's a fun fact that you might not understand.

1122
00:50:23,220 --> 00:50:25,420
I'm gonna actually sip some wine for effect.

1123
00:50:28,740 --> 00:50:30,020
Here it comes.

1124
00:50:30,020 --> 00:50:35,020
You cannot run a container on anything but Linux.

1125
00:50:35,260 --> 00:50:38,260
Someone explain that while I take another sip of my wine.

1126
00:50:43,260 --> 00:50:48,260
You cannot run a container,

1127
00:50:48,260 --> 00:50:51,140
if you wanna get really pedantic with your friends,

1128
00:50:51,140 --> 00:50:54,740
pick you up, you cannot run a container

1129
00:50:54,740 --> 00:50:57,180
on anything but Linux.

1130
00:50:59,180 --> 00:51:00,860
A modern container, a Docker container,

1131
00:51:00,860 --> 00:51:02,300
if you wanna put the word Docker in front of it,

1132
00:51:02,660 --> 00:51:05,060
you cannot run a Docker container on anything but Linux.

1133
00:51:05,060 --> 00:51:08,060
BSD has jails, they are not Docker containers.

1134
00:51:08,060 --> 00:51:10,380
So if you wanna use the word that people will recognize,

1135
00:51:10,380 --> 00:51:12,380
the statement, you cannot run Docker.

1136
00:51:12,380 --> 00:51:15,380
But I run it on my Mac all the time, you know, you don't.

1137
00:51:17,380 --> 00:51:20,380
You do not run containers on your Mac.

1138
00:51:20,380 --> 00:51:23,380
You do not run containers on your Windows machine.

1139
00:51:23,380 --> 00:51:26,380
You don't even run containers in WSL.

1140
00:51:26,460 --> 00:51:28,460
On Mac, they use a compatibility layer.

1141
00:51:28,460 --> 00:51:31,460
And on, you know what the compatibility layer is?

1142
00:51:31,460 --> 00:51:36,460
Kimu, Docker desktop and Podman desktop.

1143
00:51:36,460 --> 00:51:41,460
And I assume now Rancher desktop all use a minimal virtual machine

1144
00:51:41,460 --> 00:51:46,460
that uses Kimu in order to emulate Linux.

1145
00:51:46,460 --> 00:51:48,460
And that's how they do it.

1146
00:51:48,460 --> 00:51:51,460
You don't even run containers in WSL.

1147
00:51:51,460 --> 00:51:53,460
On Mac, they use a compatibility layer.

1148
00:51:53,540 --> 00:51:56,540
Linux, and that's how they do it.

1149
00:51:56,540 --> 00:51:57,540
They all do it.

1150
00:51:57,540 --> 00:51:59,540
And so I was actually looking for the internals of the Podman.

1151
00:51:59,540 --> 00:52:00,540
I'm like, what are they doing here?

1152
00:52:00,540 --> 00:52:02,540
It turns out they completely straight up copied

1153
00:52:02,540 --> 00:52:04,540
what Docker desktop was doing.

1154
00:52:04,540 --> 00:52:06,540
Docker desktop is this nice, happy, you know,

1155
00:52:06,540 --> 00:52:08,540
electron front end to everything.

1156
00:52:08,540 --> 00:52:10,540
But under the hood, it's running Kimu.

1157
00:52:10,540 --> 00:52:12,540
And I think Zen, it's not Zen, no, it's not Zen,

1158
00:52:12,540 --> 00:52:14,540
because I couldn't run it on the hardware.

1159
00:52:14,540 --> 00:52:16,540
Containers need C groups for Linux kernel, I think.

1160
00:52:16,540 --> 00:52:21,540
Yeah, LXC, C groups and LXC are what modern Docker containers

1161
00:52:21,540 --> 00:52:23,540
are defined to be.

1162
00:52:23,540 --> 00:52:27,540
So you cannot have a Docker container without Linux.

1163
00:52:27,540 --> 00:52:29,540
So next time you run that on Windows or whatever.

1164
00:52:29,540 --> 00:52:32,540
But there's something else I want you to consider here.

1165
00:52:32,540 --> 00:52:35,540
It used to be that I would like complain people,

1166
00:52:35,540 --> 00:52:38,540
or I would like, well, God, I got to install a whole virtual machine.

1167
00:52:38,540 --> 00:52:41,540
In fact, Podman was kind of slow to do Docker desktop.

1168
00:52:41,540 --> 00:52:42,540
You know why?

1169
00:52:42,540 --> 00:52:44,540
Because there are pedantic engineers over at Red Hat,

1170
00:52:44,540 --> 00:52:46,540
and they're like, well, you got to have Linux anyway.

1171
00:52:46,540 --> 00:52:49,540
Why don't you just install your own VM and just do it that way?

1172
00:52:52,540 --> 00:52:53,540
Am I wrong?

1173
00:52:53,540 --> 00:52:57,540
That was Red Hat's position in my mind up till like last year,

1174
00:52:57,540 --> 00:52:59,540
or within the last three months.

1175
00:52:59,540 --> 00:53:02,540
Before that, they were like, you know what?

1176
00:53:02,540 --> 00:53:06,540
Podman's like, we don't need to do stupid desktop stuff.

1177
00:53:06,540 --> 00:53:08,540
Nobody needs that.

1178
00:53:10,540 --> 00:53:15,540
I mean, everybody knows that containers have to have Linux anyway.

1179
00:53:15,540 --> 00:53:17,540
They'll figure it out, and then they'll install a VM,

1180
00:53:17,540 --> 00:53:19,540
and then they'll put Linux on there,

1181
00:53:19,540 --> 00:53:22,540
and then they'll do Docker as God intended by installing it on Linux

1182
00:53:22,540 --> 00:53:24,540
using Podman install.

1183
00:53:24,540 --> 00:53:27,540
They can do apt install Podman or DNF install Podman or whatever they want.

1184
00:53:30,540 --> 00:53:36,540
And so Red Hat missed the whole desktop market by saying,

1185
00:53:36,540 --> 00:53:39,540
just do it that way, and then what happened?

1186
00:53:39,540 --> 00:53:43,540
And then last year, Docker famously said,

1187
00:53:43,540 --> 00:53:47,540
psych, you'll have to pay us now if you're a certain size,

1188
00:53:47,540 --> 00:53:50,540
which is pretty much everybody using it.

1189
00:53:50,540 --> 00:53:53,540
And Docker perked their ears up, and Rancher perked their ears up,

1190
00:53:53,540 --> 00:53:58,540
and they're like, oh crap, there's no free desktop option anymore.

1191
00:53:58,540 --> 00:54:00,540
People will stop using containers and be annoyed by it,

1192
00:54:00,540 --> 00:54:03,540
and they'll stop using our other products.

1193
00:54:03,540 --> 00:54:04,540
We got to fix this.

1194
00:54:04,540 --> 00:54:07,540
And so I imagine somebody over at Red Hat,

1195
00:54:07,540 --> 00:54:10,540
somebody over at Red Hat's like, damn, we got to get on this.

1196
00:54:10,540 --> 00:54:16,540
So then Rancher desktop and Podman desktop

1197
00:54:16,540 --> 00:54:19,540
kind of seem like they're in a race to see who can make the best

1198
00:54:19,540 --> 00:54:21,540
desktop container option.

1199
00:54:21,540 --> 00:54:23,540
And now we have Podman.

1200
00:54:23,540 --> 00:54:26,540
Last week we had, I tested it all out, and Podman works wonderfully

1201
00:54:26,540 --> 00:54:27,540
on everything.

1202
00:54:27,540 --> 00:54:29,540
It's really weird that it uses WSL instead of WSL2.

1203
00:54:29,540 --> 00:54:30,540
I think that's very interesting.

1204
00:54:30,540 --> 00:54:32,540
Probably because of the hypervisor dependency.

1205
00:54:32,540 --> 00:54:33,540
But I don't know.

1206
00:54:33,540 --> 00:54:34,540
I don't know.

1207
00:54:38,540 --> 00:54:40,540
You know, our instrument windows is on the Linux containers.

1208
00:54:40,540 --> 00:54:41,540
Yes, you can.

1209
00:54:41,540 --> 00:54:42,540
That's pretty cool to have that, isn't it?

1210
00:54:42,540 --> 00:54:43,540
Anyway.

1211
00:54:47,540 --> 00:54:51,540
So we're virtual machines in disguise behind a poorly optimized

1212
00:54:51,540 --> 00:54:52,540
electron interface.

1213
00:54:52,540 --> 00:54:55,540
I know, exactly.

1214
00:54:55,540 --> 00:55:00,540
I mean, you know, in retrospect, I got to tell you,

1215
00:55:00,540 --> 00:55:06,540
it actually has improved my position on what I think of Red Hat.

1216
00:55:06,540 --> 00:55:09,540
Because Red Hat's like, no, we're not going to do that.

1217
00:55:09,540 --> 00:55:13,540
We're not going to bundle a bunch of really beautiful garbage.

1218
00:55:13,540 --> 00:55:16,540
We're not going to put lipstick on this turd and get people to

1219
00:55:16,540 --> 00:55:19,540
use this virtual machine that's going to screw up.

1220
00:55:19,540 --> 00:55:21,540
I mean, Docker did it because they wanted the user experience

1221
00:55:21,540 --> 00:55:22,540
to be nice and easy.

1222
00:55:22,540 --> 00:55:24,540
That's what made Docker famous.

1223
00:55:24,540 --> 00:55:26,540
Because the Linux LXC people forever have been saying,

1224
00:55:26,540 --> 00:55:27,540
you can do containers.

1225
00:55:27,540 --> 00:55:29,540
And Docker comes along and says, well, yeah, but the CLI sucks.

1226
00:55:29,540 --> 00:55:30,540
There's no way to do it.

1227
00:55:30,540 --> 00:55:31,540
The average person can't do it.

1228
00:55:31,540 --> 00:55:33,540
So we're going to make this nice, pretty happy command line

1229
00:55:33,540 --> 00:55:34,540
thing called Docker.

1230
00:55:34,540 --> 00:55:38,540
And guess who gets all the credit?

1231
00:55:38,540 --> 00:55:39,540
Now they're called Docker containers.

1232
00:55:39,540 --> 00:55:41,540
They're not called Linux containers.

1233
00:55:41,540 --> 00:55:45,540
Everybody who worked on the LXC project and C groups,

1234
00:55:45,540 --> 00:55:47,540
and all the people who made containers happen,

1235
00:55:47,540 --> 00:55:50,540
which have been around for more than two decades,

1236
00:55:50,540 --> 00:55:53,540
about a decade, I think, probably something like 2011 or something.

1237
00:55:53,540 --> 00:55:56,540
They're like just smacking their foreheads.

1238
00:55:56,540 --> 00:55:57,540
And they're like, what the hell?

1239
00:55:57,540 --> 00:56:00,540
Along comes somebody who cares about their users.

1240
00:56:00,540 --> 00:56:02,540
And they're like, no, we're going to make a nice, happy front

1241
00:56:02,540 --> 00:56:07,540
and interface to this thing, to the great anger of all the people

1242
00:56:07,540 --> 00:56:09,540
who were using containers the hard way.

1243
00:56:09,540 --> 00:56:11,540
And they get all their credit.

1244
00:56:11,540 --> 00:56:13,540
And then they decided to do this bait and switch on top

1245
00:56:13,540 --> 00:56:15,540
of everything else, which just makes the Linux community

1246
00:56:15,540 --> 00:56:19,540
fucking hate them because they're, you know,

1247
00:56:19,540 --> 00:56:22,540
and that part of the Linux community would have been,

1248
00:56:22,540 --> 00:56:24,540
in my estimation, would have been the Red Hat.

1249
00:56:24,540 --> 00:56:27,540
Red Hat is more a member of that technical part

1250
00:56:27,540 --> 00:56:30,540
of the Linux community than Docker has ever been.

1251
00:56:30,540 --> 00:56:32,540
And I mean, there's good people with Docker.

1252
00:56:32,540 --> 00:56:34,540
I'm not attacking any specific individuals,

1253
00:56:34,540 --> 00:56:38,540
but as a company, they've had really poor decisions.

1254
00:56:38,540 --> 00:56:40,540
And so they won't call it good 3C groups.

1255
00:56:40,540 --> 00:56:41,540
No, they won't.

1256
00:56:41,540 --> 00:56:43,540
I call them containers and container images.

1257
00:56:43,540 --> 00:56:45,540
I don't say Docker, nobody does anymore.

1258
00:56:45,540 --> 00:56:48,540
Docker is more like canonical in that sense.

1259
00:56:48,540 --> 00:56:51,540
Docker has the user's considerations in the forefront

1260
00:56:51,540 --> 00:56:54,540
and they will violate good back-end architecture

1261
00:56:54,540 --> 00:56:56,540
to make it easier for the user.

1262
00:56:56,540 --> 00:56:58,540
And I think that's a good thing.

1263
00:56:58,540 --> 00:56:59,540
I do.

1264
00:56:59,540 --> 00:57:01,540
I think that we need to, it's a combination of both, right?

1265
00:57:01,540 --> 00:57:04,540
And it took them doing that to get Podman

1266
00:57:05,540 --> 00:57:08,540
to have a decent desktop offering.

1267
00:57:08,540 --> 00:57:10,540
And I'm really glad they did that.

1268
00:57:10,540 --> 00:57:14,540
So it's a big, you know, it's a big dynamic going on

1269
00:57:14,540 --> 00:57:15,540
all the time.

1270
00:57:15,540 --> 00:57:17,540
And many of the things I've said have probably offended

1271
00:57:17,540 --> 00:57:19,540
many people very seriously here.

1272
00:57:19,540 --> 00:57:20,540
I'm sorry.

1273
00:57:20,540 --> 00:57:23,540
I largely don't care because I feel like

1274
00:57:23,540 --> 00:57:25,540
we need more opinions in this industry.

1275
00:57:25,540 --> 00:57:27,540
There are just too many choices.

1276
00:57:27,540 --> 00:57:30,540
And we need more best practice opinions.

1277
00:57:30,540 --> 00:57:32,540
And we need to justify those opinions and say,

1278
00:57:32,540 --> 00:57:35,540
hey, if you meet this criteria, this is what you should do.

1279
00:57:35,540 --> 00:57:37,540
And we should have the courage to start saying those things

1280
00:57:37,540 --> 00:57:40,540
and then fixing them when something better comes along.

1281
00:57:40,540 --> 00:57:43,540
Otherwise, we're just going to be just floundering around

1282
00:57:43,540 --> 00:57:48,540
like we have like for years and we still will continue to do that.

1283
00:57:48,540 --> 00:57:50,540
Both the Docker Project and KhanCon have always gone their way

1284
00:57:50,540 --> 00:57:52,540
out of the aspect of show typical signs.

1285
00:57:52,540 --> 00:57:54,540
Oh, right.

1286
00:57:54,540 --> 00:57:56,540
Yes.

1287
00:57:56,540 --> 00:57:57,540
Yeah.

1288
00:57:57,540 --> 00:57:58,540
But not invented here.

1289
00:57:58,540 --> 00:57:59,540
They do that.

1290
00:57:59,540 --> 00:58:00,540
Yeah.

1291
00:58:00,540 --> 00:58:03,540
I mean, that's just a tech problem in general.

1292
00:58:03,540 --> 00:58:08,540
But at the same time, I do believe, to their credit,

1293
00:58:08,540 --> 00:58:13,540
that Docker and KhanCon have been more focused on user experience

1294
00:58:13,540 --> 00:58:15,540
than the technology.

1295
00:58:15,540 --> 00:58:18,540
And that's not a bad thing.

1296
00:58:18,540 --> 00:58:19,540
That part of it's not bad.

1297
00:58:19,540 --> 00:58:22,540
So I don't want to Docker to integrate better with system

1298
00:58:22,540 --> 00:58:24,540
B, but Docker just already said, nah.

1299
00:58:24,540 --> 00:58:25,540
Yeah.

1300
00:58:25,540 --> 00:58:26,540
Docker's been doing that all along.

1301
00:58:26,540 --> 00:58:28,540
The whole system B stuff.

1302
00:58:28,540 --> 00:58:33,540
The system B integration and the, you know,

1303
00:58:33,540 --> 00:58:36,540
they were trying to stand their ground and say,

1304
00:58:36,540 --> 00:58:38,540
we want to have an independent socket.

1305
00:58:38,540 --> 00:58:41,540
And I actually agree with that.

1306
00:58:41,540 --> 00:58:43,540
I mean, for some of the stuff that I was doing,

1307
00:58:43,540 --> 00:58:45,540
I was able to, you can't do Docker in a Docker.

1308
00:58:45,540 --> 00:58:46,540
You know that, right?

1309
00:58:46,540 --> 00:58:48,540
You can't do Podman and Podman.

1310
00:58:48,540 --> 00:58:50,540
It's impossible.

1311
00:58:50,540 --> 00:58:54,540
Before you could just remount the socket and you could have,

1312
00:58:54,540 --> 00:58:57,540
you could have a Docker running inside a Docker container,

1313
00:58:57,540 --> 00:58:59,540
use the same host container image.

1314
00:58:59,540 --> 00:59:03,540
Now, some people would call that an absolute Frankenstein's

1315
00:59:03,540 --> 00:59:06,540
monster of problems.

1316
00:59:06,540 --> 00:59:11,540
But yeah, the idea is it's just bad,

1317
00:59:11,540 --> 00:59:14,540
but it doesn't matter because it was very practical.

1318
00:59:14,540 --> 00:59:15,540
I use that all the time.

1319
00:59:15,540 --> 00:59:18,540
I use that all the time because I didn't have any Linux on my system

1320
00:59:18,540 --> 00:59:22,540
before I switched back over to VMs because, you know,

1321
00:59:22,540 --> 00:59:24,540
and by the way, the VM is the clear way to do that, right?

1322
00:59:24,540 --> 00:59:27,540
If you install a Linux VM, then that's not a problem.

1323
00:59:27,540 --> 00:59:29,540
All your stuff lives in the VM.

1324
00:59:29,540 --> 00:59:31,540
You know, you're good to go.

1325
00:59:31,540 --> 00:59:33,540
Assuming you can get a virtual machine on your machine.

1326
00:59:33,540 --> 00:59:38,540
So I think there's going to be a strong resurgence of VMs in the world.

1327
00:59:38,540 --> 00:59:42,540
But yeah, but the Docker and Docker thing was always kind of a hack.

1328
00:59:42,540 --> 00:59:46,540
And by the way, it was actually using pods.

1329
00:59:46,540 --> 00:59:48,540
There's Kubernetes pods and stuff that would use the Docker

1330
00:59:48,540 --> 00:59:51,540
and Docker thing, which is just like such a security violation.

1331
00:59:51,540 --> 00:59:53,540
It's outrageous.

1332
00:59:53,540 --> 00:59:56,540
So that's why people are owning it.

1333
00:59:56,540 --> 00:59:58,540
But I did think it was useful for pipelines.

1334
00:59:58,540 --> 00:59:59,540
That's why I used it.

1335
00:59:59,540 --> 01:00:00,540
I did.

1336
01:00:00,540 --> 01:00:01,540
I used it for that for a long time.

1337
01:00:01,540 --> 01:00:05,540
And there is no alternative in the Podman landscape.

1338
01:00:05,540 --> 01:00:07,540
The Creo landscape, Podman landscape is not there

1339
01:00:07,540 --> 01:00:09,540
because it's insecure to them.

1340
01:00:09,540 --> 01:00:12,540
So not enough for VMs.

1341
01:00:12,540 --> 01:00:13,540
Yeah.

1342
01:00:13,540 --> 01:00:14,540
And if you don't have enough for VMs,

1343
01:00:14,540 --> 01:00:16,540
then you got to do the Docker and Docker thing.

1344
01:00:16,540 --> 01:00:20,540
And so that was, again, it was a very practical thing,

1345
01:00:20,540 --> 01:00:22,540
but it probably wasn't a good thing.

1346
01:00:22,540 --> 01:00:24,540
For developers, it was nice.

1347
01:00:24,540 --> 01:00:30,540
But for all the other reasons, probably not with a VM.

1348
01:00:30,540 --> 01:00:32,540
Yeah.

1349
01:00:32,540 --> 01:00:36,540
Not everybody has the option of running non-windows on their desktops.

1350
01:00:36,540 --> 01:00:39,540
I just read another blog from a guy who was super annoyed

1351
01:00:39,540 --> 01:00:43,540
that he had to run windows on his desktop at work.

1352
01:00:43,540 --> 01:00:45,540
And it was all the ways he got around it.

1353
01:00:45,540 --> 01:00:49,540
But yeah.

1354
01:00:50,540 --> 01:00:52,540
Hmm.

1355
01:00:52,540 --> 01:00:53,540
And ruin the nodes quite often.

1356
01:00:53,540 --> 01:00:57,540
You've seen DIND pipelines in the wild.

1357
01:00:57,540 --> 01:00:58,540
Devs have probably used Docker.

1358
01:00:58,540 --> 01:00:59,540
I'm not messing up.

1359
01:00:59,540 --> 01:01:01,540
Oh my God.

1360
01:01:01,540 --> 01:01:05,540
DIND was always used in CI as tools to simplify stuff.

1361
01:01:05,540 --> 01:01:07,540
So it's not that bad keeping things simple.

1362
01:01:07,540 --> 01:01:08,540
I think that's right.

1363
01:01:08,540 --> 01:01:10,540
And that's one of the reasons I think that DIND,

1364
01:01:10,540 --> 01:01:12,540
it's a huge debate.

1365
01:01:12,540 --> 01:01:14,540
It's very good wine.

1366
01:01:14,540 --> 01:01:16,540
It's also the end of the wine.

1367
01:01:16,540 --> 01:01:18,540
We don't have any more.

1368
01:01:19,540 --> 01:01:20,540
Hmm.

1369
01:01:20,540 --> 01:01:21,540
But it's the weekend.

1370
01:01:21,540 --> 01:01:23,540
And I hope everybody, you know, I'm going to,

1371
01:01:23,540 --> 01:01:26,540
I'll say cheers to everybody as I go get more wine.

1372
01:01:26,540 --> 01:01:28,540
I'm going to go ahead and end the YouTube videos here.

1373
01:01:28,540 --> 01:01:30,540
So I'm trying to keep the YouTube videos shorter.

1374
01:01:30,540 --> 01:01:33,540
I apologize for how long winded I am.

1375
01:01:33,540 --> 01:01:38,540
And I do hope that this doesn't scare you away from all this technology.

1376
01:01:38,540 --> 01:01:40,540
I do find it extremely exciting.

1377
01:01:40,540 --> 01:01:44,540
I think the movement in the industry is in the right direction, actually.

1378
01:01:44,540 --> 01:01:48,540
All of this movement might make CI CD more annoying

1379
01:01:48,540 --> 01:01:50,540
and developer processes more annoying,

1380
01:01:50,540 --> 01:01:54,540
but it's going to make for a more secure container orchestration

1381
01:01:54,540 --> 01:01:57,540
as we adopt these practices.

1382
01:01:57,540 --> 01:01:59,540
And it's going to, actually, it's going to ferret out

1383
01:01:59,540 --> 01:02:01,540
a bunch of bad practices.

1384
01:02:01,540 --> 01:02:04,540
So for example, putting Creo as your container engine on your nodes,

1385
01:02:04,540 --> 01:02:05,540
including your control plane,

1386
01:02:05,540 --> 01:02:08,540
is automatically going to shut down any user who's using

1387
01:02:08,540 --> 01:02:12,540
that control plane head node for Docker.

1388
01:02:12,540 --> 01:02:13,540
And their process is going to break.

1389
01:02:13,540 --> 01:02:17,540
And they probably should break because they shouldn't be mixing the two

1390
01:02:17,540 --> 01:02:18,540
as we talked about.

1391
01:02:18,540 --> 01:02:22,540
So hopefully this will be something that you can consider as you go forward.

1392
01:02:22,540 --> 01:02:25,540
I don't know if I'm going to do another actual video tonight.

1393
01:02:25,540 --> 01:02:28,540
I'm probably just going to be shooting the breeze on Twitch.

1394
01:02:28,540 --> 01:02:32,540
And as a general rule, though, going forward,

1395
01:02:32,540 --> 01:02:34,540
I'm going to try to start each one of my streams

1396
01:02:34,540 --> 01:02:38,540
with a YouTube video quality content that's very organized

1397
01:02:38,540 --> 01:02:40,540
and about a specific thing.

1398
01:02:40,540 --> 01:02:43,540
And then we'll stop the video.

1399
01:02:43,540 --> 01:02:49,540
And then we'll just do silly stuff for the rest of the night on Twitch.

1400
01:02:49,540 --> 01:02:53,540
So we can start on a good note and get some value out of it.

1401
01:02:53,540 --> 01:02:57,540
And then we can do the crazy stuff that I tend to do.

1402
01:02:57,540 --> 01:02:59,540
All right, so if you want to come and join us for the crazy stuff,

1403
01:02:59,540 --> 01:03:01,540
come on over to Twitch.

1404
01:03:01,540 --> 01:03:05,540
Otherwise, thank you for stopping by whether you're on Twitch or YouTube.

