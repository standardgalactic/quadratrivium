ᶠᶕᶖᶦᶜᵗ ᶠᶫᶜᶜᶜᶜᵉylᶦᵛᶜᶜᶜᶜᶜᶜ featured in the anime reaching and beforehand…
RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR44ınınᶠᶠᶜ� while the headphone calls it over before the sound.
2M
ლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლლ�
ვოლლლლ მლლლლლგლლლლლლლლლლლლ ეით ეგ მʄპვო ნოევს�iyლი Ⴠ჏ეპბʐფივემო სჩივემლ� western western western western western western western western western western western western western western意us
,,,,,, ,,
,,,
,
Oh, right. Okay, let me just show you. Let me just finish up real quick.
Ready?
Wait, I don't follow this.
It's a doughnut.
It's incredible, isn't it?
So all of this just to render a doughnut on your terminal?
What the f-
Thanks for watching. The idea and code were originally from the amazing Andy Sloan.
Where he was able to code this whole program in C and made the code itself look like a doughnut.
He has an article explaining how the code works, which I'll link in the description.
So why is math important for programming?
Well, it's because even if 99% of the time you won't need it, there's a 1% chance that you might.
And it's in those moments that separate out a great programmer from average ones.
And if you do know your math, you'll know how to modify this doughnut to increase the size, change the rotation, or even make a cube instead.
Also, if you want to do computer graphics, machine learning or cryptography, you're going to need math.
So might as well get good at it as you did for programming.
Anyway, back to the doughnut. How do we write this program?
Well, first you have to create a doughnut, which is essentially a solid of revolution where we have a circle that rotates around the y-axis, which will make a doughnut, a.k.a. a tourist.
This is the formula to create the circle centered at R2 with radius R1.
And this is the rotation matrix to rotate this circle around the y-axis.
So when we combine them, we get the coordinates of every point on your doughnut.
Now that we have a doughnut, shut up, I know this is a bagel.
Now that we have a doughnut, we want to rotate it around the x and z-axis so it looks cool or flying and stuff.
We can do that by multiplying our doughnut coordinates with these two rotation matrices.
Now we have to map this 3D flying doughnut onto a 2D screen, which will become our terminal.
So each character on the terminal will be a pixel on the screen.
To figure out how to shade our doughnut, we calculate the dot product of the surface normal and the direction of the light.
So as you can see, when the normal points this way, it's way brighter.
And when it points that way, it's way darker.
So the dot product will tell us how light or dark it is.
We take the result of the dot product and map it into these characters from darkest to brightest.
And lastly, we draw that on our terminal.
And voila!
If you like the way I teach, you can check out my new course on data structures and algorithms,
where I use easy to understand animations to explain these concepts.
The first 100 people to sign up for Joma class will get 15% off.
Joma class!
