Hey everyone, welcome to the Late in Space Pockets.
This is Alessio, partner in CTO and residence at Decibel Partners, and I'm joined by my
co-host, Swix, founder of SmallAI.
Hey, and today we have in the remote studio Jeremy Howard from, all the way from Australia.
Good morning.
The remote studio, also known as my house.
Good morning.
Nice to see you, Ruth.
Nice to see you too.
I'm actually very used to seeing you in your mask as a message to people, but today we're
mostly audio.
But thank you for doing the very important public service of COVID awareness.
Once there was a pleasure, it was all very annoying and frustrating and tedious, but
somebody had to do it.
Somebody had to do it, especially somebody with your profile, I think, Julie drives home
the message.
So we tend to introduce people for them and then ask people to fill in the blanks on the
personal side.
Something I did not know about you was that you graduated with a B in philosophy from the
University of Melbourne.
I assumed you had a PhD.
No, I barely got through my BA because I was working 80 to 100 hour weeks at McKinsey and
a company from 19 years old onwards.
So I actually didn't attend any lectures in second and third year university.
Well, I guess you didn't need it or you're very sort of self-driven and self-motivated.
I just took two weeks off before each exam period when I was working at McKinsey and
then I can't believe I got away with this in hindsight.
I would go to all my professors and say, oh, I was meant to be in your class this semester
and I didn't quite turn up, were there any assignments I was meant to have done, whatever.
I can't believe all of them let me basically, they basically always would say like, okay,
well, if you can have this written by tomorrow, I'll accept it.
So yeah, stressful way to get through university.
Well, it shows that, I guess, you min-maxed the opportunities.
That definitely was a tricker.
I mean, finally, in philosophy, the things I found interesting and focused on in the
little bit of time I did spend on it was ethics and cognitive science.
And it's kind of really amazing that now come back around and those are actually genuinely
useful things to know about, which I never thought would happen.
A lot of relevant conversations there.
So you were a consultant for a while and then in the magical month of June, 1999, you found
it, both optimal decisions and fast meal, which I also really used.
So thank you for that.
Oh, good for you.
Yeah.
Because I had read the statistics switches at like 90% or something of small businesses
fail.
So I thought if I start two businesses, I have a higher chance.
In hindsight, I was thinking of it as some kind of stochastic thing.
I didn't have control over it, but it's a bit hard, but anyway.
And then you were president and chief scientist at Kaggle, which obviously is the composition
platform of machine learning.
And then in Lytec, where you were working on using deep learning to improve medical diagnostics
and clinical decisions.
Yeah.
That was actually the first company to use deep learning in medicine.
So it kind of founded the field.
And even now, that's still like a pretty early phase.
And I actually heard you on your new podcast with Tanishk, where you went very, very deep
into the stuff, the kind of work that he's doing, such a young prodigy at his age.
Maybe he's too old to be called a prodigy now.
X prodigy.
No, I think he still counts.
And anyway, just to round out the bio, you have a lot more other credentials, obviously.
But most recently, you started Fast.AI, which is still, I guess, your primary identity with
Rachel Thomas.
So welcome.
Thanks.
Thank you.
Yeah.
Being a lot of public service there with getting people involved in AI, and I can imagine
a better way to describe it than Fast.AI is you teach people from nothing to stable
diffusion in seven weeks or something.
And that's amazing.
Yeah.
Yeah.
I mean, it's funny.
When we started that, what was that like 2016 or something?
The idea that deep learning was something that you could make more accessible was generally
considered stupid, but everybody knew that deep learning was a thing that you got a math
through a computer science PhD, you know, those one of five labs that could give you
the appropriate skills, then you would join, yeah, basically from one of those labs, you
might be able to write some papers.
So yeah, the idea that normal people could use that technology to do good work was considered
kind of ridiculous when we started it.
And we weren't sure if it was possible either, but we kind of felt like we had to give it
a go because the alternative was we were pretty sure that deep learning was on its
way to becoming the most or one of the most important technologies in human history.
And if the only people that could use it were a handful of computer science PhDs, that seemed
like A, a big waste and B, kind of dangerous.
And you know, well, I just wanted to know one thing on your bio that at Kaggle, you
were also the top rank participant in both 2010 and 2011.
So sometimes you see a lot of founders running companies that are not really in touch with
the problem, but you were clearly building something that you knew a lot about, which
is awesome.
And even, yeah, talking about deep learning, you created, published a paper on ULM fit,
which was kind of the predecessor to multitask learning and a lot of the groundwork that
then went to into transformers.
I read back on the paper and you turn this model AWD LSTM, which I did the math and it
was like 24 to 33 million parameters, depending on what training data set you use today.
That's kind of like not even small, it's like super small.
What were some of the kind of like contrarian takes that you had at the time and maybe set
the stage a little bit for the rest of the audience on what was kind of like the state
of the art, so to speak at the time and what people were working towards.
Yeah, the whole thing was a contrarian take, you know.
So okay, so we started first AI, my wife and I, and we, yeah, so we're trying to think,
okay, how do we make it more accessible?
So when we started thinking about it, it was very 2015 and then 2016, we started doing
something about it.
Why is it inaccessible?
Okay, well, A, no one knows how to do it other than a few number of people and then when
we asked those few number of people, well, how do you actually get good results?
They would say like, oh, it's like, you know, a box of tricks that aren't published.
So you have to join one of the, you know, labs and learn the tricks.
So a bunch of unpublished tricks, not much software around, but you know, thankfully
there was Theano and, you know, rappers and particularly Lasagna, the rapper.
But yeah, not much software around, not much in the way of data sets, you know, very hard
to get started in terms of the compute, like how do you get that set up?
So you know, everything was kind of inaccessible.
And you know, as we started looking into it, we had a key insight which was like, you know,
most of the compute and data for image recognition, for example, we don't need to do it.
You know, there's this thing which nobody knows about, nobody talks about called transfer
learning where you take somebody else's model where they already figured out like how to
detect edges and gradients and corners and text and whatever else, and then you can fine
tune it to do the thing you want to do.
And we thought that's the key, that's the key to becoming more accessible in terms of
compute and data requirements.
So when we started FastAI, we focused from day one on transfer learning, lesson one,
in fact, was transfer learning, literally lesson one, something not normally even mentioned
in.
I mean, there wasn't much in the way of courses, you know, basically, really the courses out
there were PhD programs that had happened to have recorded their lessons, they would
really mention it at all.
We wanted to show how to do four things that seemed really useful, you know, work with
vision, work with tables of data, work with kind of recommendation systems and collaborative
filtering and work with text, because we felt like those four kind of modalities covered
a lot of the stuff that, you know, are useful in real life.
And no one was doing anything much useful with text.
Everybody was talking about Word2Vec, you know, like King plus, Queen minus, woman and
blah, blah, blah, and it was like cool experiments, but nobody was doing anything like useful
with it.
NLP was all like lamertization and stop words and topic models and diagrams and SPMs, and
it was really academic and not practical.
But I mean, to be honest, I've been thinking about this crazy idea for nearly 30 years
since I had done cognitive science at university, where we talked a lot about the cells Chinese
room experiment, this idea of like, what if there was somebody that could kind of like
knew all of the symbolic manipulations required to answer questions in Chinese, but they didn't
speak Chinese, they were kind of inside a room with no other way to talk to the outside
world other than taking in slips of paper with Chinese written on them and then they
do all their rules and then they pass back a piece of paper with Chinese back and this
room with a person in is actually fantastically good at answering any question you give them
written in Chinese, do they understand Chinese and is this something that's intelligently
working with Chinese ever since that time, I'd say to me the most thoughtful and compelling
philosophical response is yes, intuitively it feels like no, that's just because we
can't imagine such a large kind of system, but if it looks like a duck and acts like
a duck, it's a duck or to all intents and purposes.
And so I always kind of thought, so this is basically a kind of analysis of the limits
of text and I kind of felt like, yeah, if something could ingest enough text and could
use the patterns it saw to then generate text in response to text, it could appear to be
intelligent, whether that means it is intelligent or not is a different discussion and not one
I find very interesting.
Yeah, and then when I came across neural nets when I was about 20, I learned about the universal
approximation theorem and stuff and I started thinking like, oh, I wonder if like a neural
net could ever get big enough, take in enough data to be a Chinese room experiment.
With that background and this kind of like interest in transfer learning, I'd been thinking
about this thing for kind of 30 years and I thought like, oh, I wonder if we're there
yet, because we have a lot of text, like I can literally download Wikipedia, which is
a lot of text.
And I thought, you know, how would something learn to kind of answer questions or respond
text?
And I thought, well, what if we used a language model?
So language models are already a thing, you know, they were not a popular or well known
thing, but they were a thing.
But language models exist to this idea that you could train a model to fill in the gaps
or actually in those days, it wasn't fill in the gaps, it was finish a string.
In fact, Andre Kapathy did his fantastic RNN demonstration from this at a similar time
where he showed like you can have it ingest Shakespeare and it will generate something
that looks a bit like Shakespeare.
I thought, okay, so if I do this at a much bigger scale using all of Wikipedia, what
would it need to be able to do to finish a sentence in Wikipedia effectively, to do it
quite accurately quite often?
I thought, Jesus, it would actually have to know a lot about the world, you know, it
would have to know that there is a world and that there are objects and that objects relate
to each other through time and cause each other to react in ways and that causes proceed
effects and that, you know, when there are animals and there are people and that people
couldn't be in certain positions during certain timeframes and then you could, you know, all
that together, you can then finish a sentence like this was signed into law in 2016 by US
President X and it would fill in the gaps, you know.
So that's why I tried to create a, what in those days was considered a big language model
trained on the entirety on Wikipedia, which is that was a bit unheard of and my interest
was not in, you know, just having a language model, my interest was in like, what latent
capabilities would such a system have that would allow it to finish those kind of sentences?
Because I was pretty sure based on our work with transfer learning and vision that I could
then suck out those latent capabilities by transfer learning, you know, by fine-tuning
it on a task data set or whatever.
So we generated this three-step system.
So step one was train a language model on a big corpus.
Step two was fine-tune a language model on a more curated corpus and step three was further
fine-tune that model on a task and of course that's why everybody still does today, right?
That's what chat GPT is and so the first time I tried it within hours I had a new state
of the art academic result on IMDB and I was like, holy shit, it does work.
So you asked to what degree was this kind of like pushing against the established wisdom?
Every way, like the reason it took me so long to try it was because I asked all my friends
in NLP if this could work and everybody said no, it definitely won't work.
It wasn't like, oh maybe, everybody was like, it definitely won't work.
NLP is much more complicated than vision.
Languages are much more vastly complicated to main, you know, and you've got problems
like the grounding problem we know from like philosophy and theory of mind that it's actually
impossible for it to work.
So yeah, so don't waste your time.
Jeremy, had people not tried because it was like too complicated to actually get the data
and like set up the training or like were people just lazy and kind of like, hey, this
is just not going to work.
No, it was lazy.
So like, so the person I thought at that time who, there were two people I thought at that
time actually who were the strongest at language models were Stephen Merity and Alec Radford.
And at the time I didn't know Alec, but I, after we had both, after I'd released ULM Fit and
he had released GPT, I organized a chat for both of us with Kate Metz of the New York
Times and Kate Metz answered, and Alec answered this question for Kate and Kate just like,
so how did, you know, GPT come about?
And he said, well, I was pretty sure that pre-training on a general large corpus wouldn't work.
So I hadn't tried it.
And then I read ULM Fit and turns out it did work.
And so I did it, you know, bigger and it worked even better.
And similar with Stephen, you know, I asked Stephen Merity, like, why don't we just find,
you know, I'll take your AWDSTLM and like, trade it on all of Wikipedia and fine tune
it.
And he's kind of like, I don't think that's going to really lie.
Like two years before, I did a very popular talk at KDD, the conference where everybody
in NLP was in the audience.
I recognized after faces, you know, and I told them all this, I'm sure transfer learning
is the key.
I'm sure ImageNet, you know, is going to be an NLP thing as well.
And you know, everybody was interested and people asked me questions afterwards, but
just, yeah, nobody followed up because everybody knew that it didn't work.
I mean, even like, so we were scooped a little bit by Dye and Lee at Google.
They had, I already, I didn't even realize this, it's just a bit embarrassing.
They had already done a large language model and fine tuned it.
But again, they didn't create a general purpose large language model on a general purpose
corpus.
They only ever tested a domain specific corpus.
And I haven't spoken to Kwok actually about that, but I assume that the reason was the
same.
It probably just didn't occur to them that the general approach could work.
So maybe it was that kind of 30 years of mulling over the, this whole Chinese room experiment
that had convinced me that it probably would work.
I don't know.
Yeah.
Interesting.
I just dug up Alec announcement tweet from Tony 18.
He said, inspired by Kobe, Elmo and Yola and Fit.
We showed a single transformer language model can be fine tuned to a variety.
It's interesting because, you know, today people think of the leader kind of like, kind of
like the research lab pushing forward the field.
What was that at the time, you know, like kind of like going back five years, people
think of it as an overnight success, but obviously it took a while.
Yeah.
Yeah.
No, I mean, absolutely.
And I'll say like, it's interesting that it mentioned Elmo because in some ways that
was kind of diametrically opposed to, to ULM fit, you know, there was these kind of like,
so there was a lot of, there was a lot of activity at the same time as ULM fits release.
So there was, so before it, as Brian McCann, I think at Salesforce had come out with this
neat model that did a kind of multitask learning.
But again, they didn't create a general fine tune language model first.
There was Elmo, which I think was a little, you know, actually quite a few months after
the first ULM fit example, I think.
But yeah, there was a bit of this stuff going on.
And the problem was everybody was doing, and particularly after GPT came out there and
everybody wanted to focus on zero shot and few shot learning, you know, everybody hated
fine tuning, everybody hated transfer learning.
And like I literally did tours trying to get people to start doing transfer learning.
And people, you know, nobody was interested, particularly after GPT showed such good results
with zero shot and few shot learning.
And so I actually feel like we kind of went backwards for years and, and not to be honest,
I mean, I'm a bit sad about this now, but I kind of got so disappointed and dissuaded
by like, it felt like these bigger lab, much bigger labs, you know, like fast AI had only
ever been just me and Rachel were getting all of this attention for an approach I thought
was the wrong way to do it.
You know, I was convinced was the wrong way to do it.
And so yeah, for years, people were really focused on getting better zero shot and few
shot.
And it wasn't until, you know, this key idea of like, well, let's take the ULM fit approach.
But for step two, rather than fine tuning on a kind of a domain corpus, let's fine tune
on an instruction corpus.
And then in step three, rather than fine tuning on a reasonably specific task classification,
let's fine tune on a, on a RLHF class classification.
And so that was really, that was really key, you know.
So I was kind of like out of the NLP field for a few years there, because yeah, it just
felt like, I don't know, pushing uphill against this vast tide, which I was convinced was
not the right direction, but he's going to listen to me, you know, because I, as you
said, I don't have a PhD, not at a university, or at least it wasn't then I don't have a
big set of computers to fine tune huge transformer models.
So yeah, it was definitely difficult.
It's always been hard.
You know, it's always been hard, like I've always been somebody who does not want to
build stuff on lots of big computers, because most people don't have lots of big computers.
And I hate creating stuff that most people can't use, you know, and also stuff that's
created on lots of big computers has always been like much more media friendly.
So like, it might seem like a recent thing, but actually throughout my 30 years in data
science, the attention's always been on, you know, the big iron results.
So when I first started, everybody was talking about data warehouses, and it was all about
teradata, and it'd be like, oh, this big bank has this huge room full of computers, and
they have like terabytes of data available, you know, the press for button.
And yeah, that's always what people want to talk about, what people want to write about.
And then of course, students coming out of their PhDs and stuff, that's where they want
to go work, because that's where they read about.
And to me, it's a huge distraction, you know, because like I say, most people don't have
unlimited compute, and I want to help most people, not the small subset of the most well-off
people.
Yeah.
That's awesome.
It's great to hear, you know, you do such a great job educating that a lot of times,
you're not telling your own story, you know, so I love this conversation.
And the other thing before we jump into FASTI, actually, you know, a lot of people that I
know, they run across a new architecture and one other, like, I got to start a company
and raise a bunch of money and do all of this stuff, instead you were like, I want everybody
to have access to this.
Why was that the case for you?
Was it because you already had like a successful, you know, venture and like fast mail and you
were more interested in that?
What was the reasoning?
That's a really good question.
So I guess the answer is yes, that's the reason why.
So when I was a teenager, I thought it would be really cool to like have my own company.
You know, I didn't know the word startup, I didn't know the word entrepreneur, I didn't
know the word VC, and I didn't really know what any of those things were really until
after we started Kaggle, to be honest, even though I'd started to what would now call
startups, I just thought they were just small businesses, you know, they were just companies.
So yeah, so those two companies were fast mail and optimal decisions.
Fast mail was the first kind of synchronized email provider for non-businesses, so something
you can get your same email at home on your laptop that were on your phone, whatever.
And then optimal decisions invented a new approach to insurance pricing, so they called
profit optimized insurance pricing.
So I saw both of those companies, you know, after 10 years, and at that point I had achieved
the thing that as a teenager I wanted to do, you know, it took a lot longer than it should
have because I spent way longer in management consulting than I should have because I got
caught up in that stupid rat race, but you know, eventually I got there and I remember
my mom saying to me, oh, you must be so proud, you know, because she remembered, my dreams
is like, you've done it.
And I kind of reflected and I was like, I'm not, I'm not proud at all, you know, like
people quite liked fast mail, you know, it's quite nice to have synchronized email, it
probably would have happened anyway, yeah, I'm certainly not proud that I've helped
some insurance companies suck more money out of their customers.
Yeah, no, I'm not proud, you know, it's this actually, I haven't really helped the world
very much, you know, maybe in the insurance case, I've made it a little bit worse.
I don't know.
So yeah, I was determined to not waste more years of my life doing things, working hard
to do things which I could not be reasonably sure would have a lot of value.
So, you know, I took some time off, I wasn't sure if I'd ever work again, actually, I didn't
particularly want to, because it felt like, yeah, it felt like such a disappointment.
And but you know, and I didn't need to, I had enough money, like I wasn't super rich,
but I had enough money, I didn't need to work.
And I certainly recognized that amongst the other people, I knew who had enough money
that they didn't need to work, they all worked ridiculously hard, you know, and constantly
put themselves in extremely stressful situations.
And I thought, I don't want to be one of those idiots who's tied to, you know, buying a bigger
plane than the next guy or whatever, you know, Kaggle came along and I mainly kind of did
that just because it was fun and interesting to hang out with interesting people.
But, you know, with fast AI in particular, you know, Rachel and I had a very explicit, you
know, long series of conversations over a long period of time about like, well, how can we be
the most helpful to society as a whole, and particularly to those people who maybe need
more help, you know.
And so we definitely saw the world going in a potentially pretty dystopian direction, if
the world's most powerful technology was controlled by a small group of elites.
So we thought, yeah, we should focus on trying to help that not happen.
You know, sadly, it looks like it still is likely to happen.
But I mean, I feel like we've, we've helped make it a little bit less likely.
So we've done our best.
You've shown that it's possible.
And I think, I think your constant advocacy, your courses, your research that you publish,
you know, just the other day you published a signing on, you know, learning that I think
is still something that people are still talking about quite a lot.
I think that that is the origin story of a lot of people who are going to be, you know,
little Jeremy Howard's sort of in your mission with, you know, you don't have to do
everything by yourself is what I'm saying.
Definitely, definitely.
You know, that was a, that was a big takeaway from like, and Lydic was that Lydic, it
definitely felt like we had to do everything ourselves.
And I kind of, I wanted to solve medicine.
I'll say, yeah, okay, solving medicine is actually quite difficult.
And I can't do it on my own.
And there's a lot of other things I'd like to solve, and I can't do those either.
So that was, that was definitely the other piece was like, yeah, you know, can we create
an army of passionate domain experts who can change their little part of the world.
And that's definitely happened.
Like I find nowadays, at least half the time, probably quite a bit more, that I get in
contact with somebody who's done really interesting work in some domain.
Most of the time, I'd say, they say, yeah, I got my start with fast AI.
So it's definitely, I can, I can see that.
And I also know from talking to folks at places like Amazon and Adobe and stuff, which, you
know, there's lots of alumni there.
And they say, oh my God, I got here in like half of the people who are fast AI alumni.
So it's fantastic.
Yeah, actually, Andre Capati grabbed me when I saw him at Europe's a few years ago.
And he's like, I have to tell you thanks to the fast AI courses.
When people come to Tesla and they need to know more about deep learning, we always
send them to your course.
And the OpenAI scholars program was doing the same thing.
So it's kind of like, yeah, it's had a surprising impact, you know, that's just one
of like three things we do is the course, you know, and it's, it's, it's only ever
been at most two people, either me and Rachel or me and Silver.
Nowadays, it's just me.
So, yeah, I think it shows you don't necessarily need a huge amount of money and a
huge team of people to, to make an impact.
Yeah.
So just to reintroduce fast AI for people who may not have dived into it much.
There is the courses that you do.
There is the library that is, that is very well loved.
And I kind of think of it as a nicer layer on top of PyTorch that people should
start with by default and use it as the basis for a lot of your courses.
And then you have, you have like NB Dev, which I don't know, is that the third
one? Oh, so the three areas were research, software, and, and courses.
Oh, sorry.
I was going by.
So then in software, you know, fast AI is the main thing, but NB Dev is not far
behind, but then there's also things like Fastcore, GHAPI, I mean, dozens of open
source projects that I've created and some of them have been pretty popular.
And some of them are still a little bit hidden.
Actually, I should, some of them I should try to do a better job of telling people
about. What are you, what are you thinking about?
Yeah.
What, what's on this little things like, for example, for working with EC2 and AWS,
I created a fast EC2 library, which I think is like way more convenient and nice
to use than anything else out there.
And it's literally got a whole autocomplete dynamic autocomplete that works
both on the command line and in notebooks, sort of like autocomplete your
instance names and everything like that.
You know, just little things like that.
I try to make like, when I work with some domain, I try to make it like, I want
to make it as enjoyable as possible for me to do that.
So I always try to kind of like, like with GHAPI, for example, I think that
GitHub API is incredibly powerful, but I didn't find it good to work with
because I didn't particularly like the libraries that are out there.
So like GHAPI, like Fast EC2, it like autocompletes both at the command
line or in a notebook or whatever, like literally the entire GitHub API.
The entire thing is like, I think it's like less than a hundred K of code
because it actually, as far as I know, the only one that grabs it directly
from the official open API spec that GitHub produces.
And like, if you're in GitHub and you just type an API, you know, autocomplete
API method and it enter, it prints out the docs or the six brief docs and
then gives you a link to the actual documentation page, you know, GitHub
actions I can write now in Python, which is just so much easier than writing
them in typescript and stuff.
So, you know, just little things like that.
I think that's a approach that more, I wish more developers took to publish
some of the work along the way.
You describe the third arm of Fast EIS research.
It's not something I see often.
Obviously, you do do some research and how do you run your research?
What are your research interests?
Yeah.
So research is what I spend the vast majority of my time on.
And the artifacts that come out of that are largely software and courses, you
know, so to me, the main artifact shouldn't be papers because papers are
things read by a small exclusive group of people.
You know, to me, the main artifacts should be like something teaching you
people, here's how to use this insight and here's software you can use that
builds it in.
So I think I've only ever done three first person papers in my life, you know,
and they were, and none of those are ones I wanted to do, you know, they were all
once like, so one was ULM fit where Sebastian Ruda reached out to me after
seeing the course and said, like, you have to publish this as a paper, you know.
And he said, I'll write it.
He said, I want to write it.
Cause if I do, I can put it on my PhD and that would be great.
And it's like, okay, well, I want to help you with your PhD and that sounds great.
So like, you know, one was the masks paper, which just had to exist and nobody
else was writing it.
And then the third was the fast AI library paper, which again, somebody reached
out and said, please, please write this.
We will waive the fee for the journal and everything and actually help you get it
through publishing and stuff.
So yeah, so I don't, other than that, I've never written a first author paper.
So the research is like, well, so for example, you know, Don Bench was a
competition which Stanford ran a few years ago.
It was kind of the first big competition of like, who couldn't train
neural nets the fastest rather than the most accurate.
And specifically it was who couldn't train ImageNet the fastest.
And this was like one of these things where it was created by necessity.
So Google had just released their TPUs.
And so I heard from my friends at Google that they had put together this big team
to smash Don Bench so that they could prove to people that they had to use
Google Cloud and use their TPUs and show who could their TPUs were.
And we kind of thought, oh, shit, this would be a disaster if they do that
because then everybody's going to be like, oh, deep learning is not accessible.
You know, to actually be good at it, you have to be Google and you have to
use special silicon and so.
So, you know, we, we only found out about this 10 days before the competition finished.
But, you know, we basically got together an emergency bunch of our students and
Rachel and I and sat for the next 10 days and just tried to crunch through and
tried to use all of our best ideas that had come from our research.
That's a particularly progressive resizing, which is basically train mainly on small things.
Train on non-square things, you know, stuff like that.
And so, yeah, we ended up winning.
Thank God.
And so, you know, we turned it around from being like, oh, shit, you know, this is
going to show that you have to be Google and have TPUs to being like, oh, my God,
even the little guy can do deep learning.
So that's an example of the kind of like research artifacts we do.
And yeah, so all of my research is always, how do we do more with less, you know,
so how do we get better results with less data, with less compute, with less complexity.
With less education, you know, stuff like that.
So your LLM fits obviously a good example of that.
And most recently you published, can LLMs learn from a single example?
Maybe could you tell the story a little bit behind that?
And maybe that goes a little bit too far into the learning on very low resource.
The literature.
Yeah.
Yeah.
So me and my friend, John O'Whittaker, basically had been playing around with
this fun Kaggle competition, which is actually still running as we speak,
which is, can you create a model which can answer multiple choice questions
about anything that's in Wikipedia?
And the thing that makes it interesting is that your model has to run on Kaggle
within nine hours and Kaggle is very, very limited.
So you've only got 14 gig RAM, only two CPUs and a small, very old GPU.
So this is cool, you know, if you can do well at this, and this is a good example
of like, oh, you can do more with less.
So yeah, John O and I were playing around with fine tuning, of course, transfer
learning, pre-trained language models.
And we saw this like, so we always, you know, plot our losses as we go.
So here's another thing we created, we actually, Sylvain Gougir, when he worked
with us created called Fast Progress, which is kind of like TQEDM, but we think
a lot better.
So you look at our Fast Progress curves, and they kind of go down, down, down,
down, down, down, a little bit, a little bit, a little bit, and then suddenly
go clunk, and they drop.
And then down, down, down, down, a little bit, and then suddenly clunk, they drop.
We're like, what the hell?
These clunks are occurring at the end of each epoch.
So normally in deep learning, this would be, you know, I've seen this before,
it's always been a bug.
It's always turned out that like, oh, we accidentally forgot to turn on
eval mode during the validation set.
So I was actually learning then, or, oh, we accidentally were kept letting moving
average statistics throughout the epoch.
So, you know, for it's recent, the moving average or whatever.
And so we were using hugging face trainer.
So, you know, I did not give my friends at hugging face the benefit
of the doubt.
I thought, oh, they fucked up hugging face trainer, you know, idiots.
Well, you'll use the faster trainer instead.
So we switched over to learner.
We still saw the clunks.
And, you know, that's, yeah, it shouldn't really happen because semantically
speaking in the epoch isn't like, it's not a thing, you know, like nothing
happens or nothing's meant to happen when you go from ending one epoch to
starting the next one.
So there shouldn't be a clunk.
You know, so I kind of asked around on the open source discords.
That's like, what's going on here?
And everybody was just like, oh, that's just what, that's just what these
training curves look like.
Those all look like that.
Don't worry about it.
That's like, oh, are you all using trainer?
Yes.
Oh, well, there must be some buck with training.
And it's like, well, we also saw it in learner and somebody else is like, no,
we've got our own trainer.
We get it as well.
They're just like, don't worry about it.
It's just something we see.
It's just normal.
I can't do that.
I can't just be like, here's something that's like in the previous 30 years of
neural networks, nobody ever saw it.
And now suddenly we see it.
So don't worry about it.
I like, I just, I have to know why.
Can I clarify this is, was everyone that you're talking to, were they all
seeing it for the same data set or in different data sets?
Data, different data sets, different trainers.
They're just like, no, this is just, this is just what it looks like when
you fine tune language models.
Don't worry about it.
You know, as I say, I hadn't seen it before, but I'd been kind of like, as I
say, I, you know, I kept working on them for a couple of years after ULM fit.
And then I kind of moved on to other things, partly out of frustration.
So I hadn't been fine tuning, you know, um, I mean, Lamar's only been out for a
few months, right?
But I, I, I, I, I wasn't one of those people who jumped straight into it, you
know, so I was relatively new to the kind of Lamar fine tuning world, or else
these guys had been, you know, doing it since day one.
Um, it's only a few months ago, but it's still quite a bit of time.
So, so yeah, they're just like, no, this is all what we see.
Don't worry about it.
So yeah, I, I've got a very kind of like, I don't know, I've just got this
brain where I have to know why things are.
And so I kind of, I asked people like, well, why, why do you think it's happening?
And they'd be like, oh, we're pretty obviously, cause it's like memorized the
data set.
It's just like, it can't be right.
It's only seen it once.
Like, look at this.
The, the losses dropped by 0.3, 0.3, which is like, basically it knows the answer.
Um, they're like, no, no, it's just, it is, it's just memorized the data set.
So yeah.
So look, John, when I did not discover this and John O and I did not come up with a
hypothesis, you know, I guess we were just the ones, I guess, who had been around
for long enough to recognize that like this, this isn't how it's meant to work.
And so we, you know, and so we went back and like, okay, let's just run some
experiments, you know, cause nobody since we've actually published anything about
this, um, well, not quite true.
Some people have published things, but nobody ever actually stepped back and
said like, what the hell, you know, how can this be possible?
Is it possible?
Is this what's happening?
And so yeah, we created a bunch of experiments where we basically predicted
ahead of time.
It's like, okay, if this hypothesis is correct, that it's memorized in the
training set, then we ought to see blah under conditions, blah, but not only these
conditions.
And so we ran a bunch of experiments and all of them supported the hypothesis
that it was memorizing the data set in a single thing at once.
Um, and it's a pretty big data set, you know, um, which in hindsight, it's not
totally surprising because the theory, remember, of the ULM fit theory was like
what's kind of creating all these latent capabilities to make it easier for it to
predict the next token.
So if it's got all this kind of latent capability, it ought to also be really
good at compressing new tokens because it can immediately recognize that it's
like, oh, that's just a version of this.
So it's, it's not so crazy, you know, but it is, um, it requires us to rethink
everything because like, and nobody knows like, okay, so how do we fine tune
these things?
Because like, it doesn't even matter.
Like maybe it's fine.
Like maybe it's fine that it's memorized the data set after one go and you do a
second go and okay, the validation loss is terrible because it's now really
overconfident.
That's fine.
Don't, you know, don't keep telling people, don't track validation loss,
track validation accuracy, um, because at least that, that will still be useful.
Um, there's another thing that's got lost since ULM fit, nobody tracks accuracy
of language models anymore.
Um, but you know, it'll still keep learning and it does, it does keep improving.
But is it worse?
You know, like, is it like now that it's kind of memorized it, it's probably
getting a less strong signal, you know, um, I don't know.
So I still don't know how to fine tune language models properly.
And I haven't found anybody who feels like they do, like nobody really knows
whether this memorization thing is, it's probably a feature in some ways.
There's probably some things that you can do usefully with it.
It's probably, yeah, I have a feeling it's messing up training dynamics as well.
It doesn't come at the cost of catastrophic forgetting as well, right?
Like, which is the other side of the coin.
Um, it does, um, to some extent, like, we know it does like look at CodeLama,
for example.
So CodeLama was a, I think it was like a 500 billion token fine tuning of
CodeLama to using code and also pros about code that Meta did.
And, um, honestly, they kind of blew it because CodeLama is good at coding,
but it's bad at everything else.
You know, and it used to be good.
Yeah.
I was pretty sure it was like, before they released it at me and lots of people
in the open source discords were like, Oh my God, you know, we know this is
coming.
You're not going to say it's coming.
I, I hope they kept at least like 50% long code data because otherwise
it's going to forget everything else.
And they didn't only like 0.3 of their 0.3% of their epochs were non-code data.
So I did it, forgot everything else.
So now it's good at code and it's bad at everything else.
So we definitely have catastrophic forgetting.
It's fixable.
Just somebody has to do, you know, somebody, somebody has to spend their time
training a model on a, a good mix of data.
Like, so, okay.
So here's the thing.
Um, even though I originally created the three step approach that everybody
now does, my view is it's actually wrong and we shouldn't use it.
Um, um, and that's because people are using it in a way different to why I
created it.
You know, I created it thinking that the tasks specific models would be more
specific, you know, it's like, Oh, this is like a sentiment classifier.
This is an example of a task, you know, but the tasks now are like a, um, you
know, RLHF, which is basically like answer questions that make people feel
happy about your answer.
So that's a much more general task and it's a really cool approach.
And so we see, for example, RLHF also breaks models.
Like, you know, like GPT for RLHDEFT, we know from kind of the, the work that
Microsoft did, you know, the pre, the, the earlier less aligned version was better.
Um, and these are all kind of examples of catastrophic forgetting.
And so to me, the right way to do this is to fine-tune language models is to
actually throw away the idea of fine-tuning.
There's no such thing.
There's only continued pre-training.
Uh, and pre-training is something where from the very start, you try to include
all the kinds of data that you care about, all the kinds of problems that you
care about, instructions, exercises, code, general purpose document completion,
whatever.
And then as you train, you gradually curate that, you know, you gradually
make that higher and higher quality and more and more specific to the kinds of
tasks you want it to do.
Um, but you never throw away any data.
You always keep all of the data types there in reasonably high quantities.
Um, you know, maybe the quality filter, you stop training on low-quality data.
Cause that's probably fine to forget how to write badly, maybe.
Um, so yeah, that's now my view is I think ULM fit is the wrong approach.
Um, and that's why we're seeing a lot of these, uh, you know, so-called alignment
tax and this view of like, oh, a model can't both code and do other things.
You know, I think it's actually cause people are training them wrong.
Well, I think you have a clear anti-laziness approach.
I think other people are not as, uh, good hearted, you know, they're like,
Hey, they told me this thing works.
And if I release a model this way, people will appreciate it.
I'll get promoted and I'll kind of make, make more money.
Oh, absolutely.
Yeah.
And it's not just money.
It's like, this is how citations work most, most badly, you know, so if you
want to get cited, you need to write a paper that people in your field recognize
as an advancement on things that we know are good.
And so we've seen this happen again and again.
So like I say, like zero shot and a few shot learning, everybody was writing about
that or, you know, with, um, image generation, every, everybody just was writing
about GANs, you know, and I was trying to say like, no, GANs are not the right approach.
You know, when I showed again through research that we demonstrated in our
videos, that you can do better than GANs much faster and with much less data.
And nobody cared because again, like if you want to get published, you rewrite
a GAN paper that slightly improves this part of GANs and this tiny field, you'll,
you'll get published, you know, so it's, yeah, it's not set up for real innovation.
Um, it's, you know, it's, again, it's really helpful for me, you know, have my own
research lab with nobody telling me what to do and I don't even publish.
So it doesn't matter if I get citations.
So I just write what I think is actually matters.
Um, I wish there was, and you know, it actually places like open AI, you know,
the researchers there can do that as well.
It's a shame, you know, I wish there was more academic, open,
venues in which people can focus on like genuine innovation.
Uh, Twitter, which is, uh, unironically has, has become a little bit of that form.
Uh, I wanted to follow up on one thing that you mentioned, uh, which is that
you checked around the open source discords.
Uh, I don't know if it's, uh, to, uh, I don't know if it's a kosher to ask
like what discords are lively, uh, or useful right now.
Um, I think that something I definitely felt like I missed out on was the early
days of Luther AI, which where, which is a fair hot bit.
And, uh, you know, like what is the new Luther and you were, you actually
shouted out the alignment lab AI discord in your blog posts.
And it was the first time I even knew, like I saw them on Twitter and never
knew they had a discord, never knew that there was actually
substantive discussions going on in there and that you were an active member of it.
Okay.
Yeah.
And then even then, if you do know about that, you go there, it'll look like
it's totally dead.
And that's because unfortunately, nearly all the discords, nearly all of
the conversation happens in private channels, you know, um, and how does
someone get into that world?
Cause it's obviously very, very, um, instructive, right?
You could just come to the first day I discord, which I'll be honest with you,
it's less bustling than some of the others, but it's not terrible.
And so like, at least, you know, to be fair, one of Emma's bustling
channels is private.
I guess.
So I'm just thinking, why is that?
It's just a nature of quality discussion, right?
Yeah, I guess when I think about it, like, I didn't have any private
discussions on a discord for years.
Um, but there was a lot of people who came in with like, oh, I just had
this amazing idea for AGI.
If you just thought about like, if you imagine the AI is a brain and we, you
know, this just, I don't want to talk about it.
You know, I don't want to like, but you don't want to be dismissive or whatever.
And it's like, oh, well, that's an interesting comment, but maybe you should
like try training some models first to see if that aligns with your intuition.
Like, oh, but how can I possibly learn?
It's like, well, we have a course just actually spend time learning.
Like, uh, yeah.
Anyway.
And there's like, okay, I know the people who always have good answers there.
And so I created a private channel and put them all in it.
And I got to admit, I, that's where I post more often because.
There's much less, you know, flight of fancy views about how we could solve AGI,
blah, blah, blah.
So there is a bit of that, but having said that, like, I think the bar is pretty
low, like if you join a discord and you can hit the, like participants or
community or whatever button and you can see who's in it.
And you'll see at the top who, who the admins or moderators or people in the dev
role are and, uh, just DM one of them and say, like, oh, I, here's my GitHub.
Well, here's some blog posts they wrote, you know, I'm interested in talking about
this, you know, can I join the private channels and I've never heard of anybody
saying no, I will say, you know, uh, a Luther's all pretty open.
So you can do the Aleutha discord still, you know, one problem with your
Luther discord is it's been going on for so long that it's like, it's very
inside baseball.
It's hard to, it's hard to get started.
Yeah.
Um, Kappa AI looks, I think it's all open.
This just left a stability.
That's more accessible.
Yeah.
Um, uh, there's also, uh, just recently, uh, now three search that
does like the Hermes models and data set just, just opened, they've got some
private channels, but it's pretty open.
I think, uh, you mentioned alignment lab, that one, it's all the interesting
stuff is on private channels.
So just ask, um, if, if you know me, ask me, cause I've got admin on that one.
There's also, yeah, uh, OS skunkworks, OS skunkworks AI is a good discord,
which I think it's open.
So they're, yeah, they're all pretty good.
I don't want you to leak any, any, uh, you know, uh, discords that don't
want any publicity, but we all want people, like we all want people.
We just, we just want people who like want to build stuff, you know, um, rather
than people who, and like, it's fine to not know anything as well, but if you
don't know anything, but you want to tell everybody else what to do and how to
do it, that's annoying.
If you don't know anything and want to be told, like, here's a really small kind
of task that as somebody who doesn't know anything, it's going to take you a
really long time to do, but it would still be helpful.
Then, and then you go and do it.
That would be great.
The truth is, yeah, like, I don't know, maybe 5% of people who come in with
great enthusiasm and saying that they want to learn and they'll do anything.
And then somebody says like, okay, here's some work you can do.
Almost nobody does that work.
So if you're somebody who actually does the work and follows up, you will massively
stand out.
That's an extreme rarity and everybody will then want to help you do more work.
So, yeah, so just, um, yeah, just do work and people will want to support you.
Our discord used to be referral only for a long time.
We then have a public invite and then we opened it and they're kind of like
channel gating.
Um, yeah, a lot of people just want to do.
I remember it used to be like, you know, a forum moderator.
It's like people just want to do like drive by posting, you know, I'm like, they
don't want to help the community.
They just want to get their question answered.
I mean, the funny thing is our, um, our forum community does not have any of that
garbage, you know, there's something specific about the low latency thing.
There were people like, they expect an instant answer and yeah, we're all somehow
in a forum's tread where they know it's like they're forever.
People are a bit more thoughtful, but then the forums are less active than they
used to be because discord has got more popular, you know, so it's all a bit of
a compromise, you know, running a healthy community is, yes, it's always a bit of a
challenge.
All right, we've got so many more things we want to dive in, but I don't want to
keep you here for hours.
Uh, this is not the, the lack of freedom in pockets.
We always like to say, uh, one topic I would love to maybe chat a bit about is
Mojo modular, you know, Chris Liner nominated you on the pockets.
So, uh, we want to spend a little time there.
You recently did a hacker's guide to language models and you ran through
everything from quantized model to like smaller models, larger models and all of
that.
Um, but obviously modular is taking its own approach.
Uh, yeah, we'll get you excited.
I know you Chris have been talking about this for like years and a lot of the
ideas you had, so.
Yeah, yeah, yeah, absolutely.
So I met Chris, I think it was at the first TensorFlow Dev Summit.
And I don't think he had even like, I'm not sure if he'd even sufficiently
started his employment with Google at that point.
So I, I don't know, you know, certainly nothing had been mentioned.
So I, you know, I admired him from afar with LLVM and Swift and whatever.
And so I saw him walk into the courtyard at, at Google.
It's just like, oh, man, Chris Lander.
I wonder if he would lower his standards enough to talk to me.
Was worth a try.
So I caught up my carriage because like he, nobody was talking to him.
He looked a bit lost and I wandered over and it's like, oh, you're Chris
Latino, right?
It's like, what are you doing here?
And it's like, yeah, yeah, I am.
I'm like, oh, I'm Jeremy Howard.
It's like, oh, did you do some of this AI stuff?
And I was like, yeah, yeah, I like this AI stuff.
Are you doing AI stuff?
It's like, well, I'm thinking about starting to do some AI stuff.
Yeah, I think it's going to be cool.
And so, well, so like I spent the next half hour just basically brain
dumping all the ways in which AI was stupid to him and he listened
patiently and I thought he probably wasn't even remember or care or whatever.
But yeah, then I kind of like, I guess I re-caught up with him a few months
later and it's like, I've been thinking about everything you said in that
conversation and he like narrated back his response to every part of it, the
projects he was planning to do.
And it's just like, oh, this dude follows up, holy shit.
And I was like, wow, okay.
And he was like, yeah, so we're going to create this new thing called Swift
for TensorFlow and it's going to be like, it's going to be a compiler
with auto differentiation built in and blah, blah, blah, blah.
And I say, wait, why would that help?
You know, why would you, and he was like, okay, with a compiler during the
forward pass, you don't have to worry about saving context, you know,
because a lot of it will be optimized in the backward, but I was like, oh my God.
Because I didn't really know much about compilers.
You know, I spent enough to kind of like understand the ideas, but it hadn't
occurred to me that a compiler basically solves a lot of the problems
we have as end users.
I was like, wow, that's amazing.
Okay, you do know, right, that nobody's going to use this unless it's like usable.
It's like, yeah, I know, right?
So I was thinking you should create like a fast AI for this.
So, okay, but I don't even know Swift.
And it's like, well, why don't you start learning it?
And if you have any questions, ask me.
It's just like, holy shit.
Like, not only is Chris Latner lowered his standards enough to talk to me, but
he's offering me personal tutoring on the programming language that he made.
So I was just like, I'm not going to let him down.
So I spent like the next two months, like just nerding out on Swift.
And it was just before Christmas that I kind of like started writing down what I'd learned.
So I wrote a couple of blog posts on like, okay, this is like my attempt to
do a numeric programming in Swift.
And these are all the challenges I had and the some of the issues I had with like
making things properly performant.
And here are some libraries I wrote and I sent it to Chris and I was like,
I hope he's not too disappointed with me, you know, because that would be the worst.
It's like, you know, and I was also like, I was like, I hope he doesn't
dislike the fact that I've, you know, didn't love everything.
And yeah, he was like, oh, thanks for sending me that.
Let's get on a call and talk about it.
And we spoke and he was like, this is amazing.
I can't believe that you made this.
This is exactly what Swift needs.
And he was like, and so like somebody set up like a new Swift,
I don't remember what they call them, the equivalent of a pep, you know,
kind of IFC thing of like, oh, you know, let's look at how we can implement
Jeremy's ideas in the language.
And he's just like, oh, wow.
And so, yeah, you know, so, you know, and then we ended up like literally
teaching some lessons together about Swift for TensorFlow.
And we built a fast AI kind of equivalent with him and his team.
It's so much fun.
Then in the end, you know, Google didn't follow through just fair enough,
like asking everybody to learn a new programming language is going to be tough.
But like it was very obvious, very, very obvious at that time that TensorFlow
2 is going to be a failure, you know, and so this felt like, okay, I, you know,
well, you know, what are you going to do?
Like, you can't focus on TensorFlow 2 because it's not going to, like it's
not working.
It's never going to work, you know, nobody at Google is using it internally.
So, you know, in the end, Chris left, you know, Swift for TensorFlow got archived.
There was no backup plan.
So I kind of felt like Google was kind of screwed, you know, and Chris went and
did something else, but we kept talking and I was like, look, Chris, you know,
you've got to be your own boss, man, because like, you know, you've got the ideas,
you know, like only you've got the ideas, you know, and if your ideas are implemented,
we'd all be so much better off because like, Python's the best of a whole bunch
of shit, you know, like, I would, it's amazing, but it's awful, you know, compared
to what it could be.
Anyway, so eventually a few years later, he called me up and he was like, Jeremy,
I've taken your advice.
I've started a company so much like, oh my God, so we got to create a new language.
We're going to create a new infrastructure.
It's going to build, it's going to have all the stuff we've talked about.
And it's like, oh, wow.
So that's what Mojo is.
And so Mojo is like, you know, building on all the stuff that Chris has figured out
over, I mean, really from when he did his PhD thesis, which developed LLVM onwards,
you know, in Swift and MLAR, you know, the TensorFlow runtime engine, which is very good.
You know, that was something that he built and has lasted.
So yeah, I'm pumped about that.
I mean, it's very speculative.
Creating a whole new language is tough.
I mean, Chris has done it before and he's created a whole C++ compiler amongst other things.
Looking pretty hopeful.
I mean, I hope it works because, you know, I mean.
You're doing them to quit his job, so.
And I mean, in the meantime, I will say, you know, Google now does have a backup plan, you know,
they have JAX, which was never a strategy.
It was just a bunch of people who also recognized TensorFlow 2 as shit and they just decided to build something else.
And for years, my friends in that team were like, don't tell anybody about us because we, you know,
we don't want to be anything but a research project.
So now these poor guys suddenly, they're the great white hope for Google's future.
And so JAX is, you know, also not terrible, but it's still written in Python.
Like it would be cool if we had all the benefits of JAX but in a language that was designed for those kind of purposes.
So, you know, fingers crossed that, yeah, that Mocho turns out great.
Yeah.
Any other thoughts on when, where people should be spending their time?
So that's more the kind of language framework level than you have the, you know, GGML.
Some of these are like quantization-focused kind of model-level things.
Then you got the hardware people.
It's like a whole other bucket.
Yeah, what are some of the exciting stuff that you're excited about?
Well, you won't be surprised to hear me say this, but I think fine-tuning, transfer learning is still a hugely underappreciated area.
So today's zero-shot, few-shot learning equivalent is retrieval augmented generation, you know, RAG.
Which is like, just like few-shot learning is a thing.
Like it's a real thing.
It's a useful thing.
It's not a thing anybody would want to ignore.
Why are people not spending at least as much effort on fine-tuning?
You know, because, you know, RAG is like such an inefficient hack, really, isn't it?
It's like, you know, segment up my data in some somewhat arbitrary way.
Embed it, ask questions about that.
You know, hope that my embedding model embeds questions in the same bedding space as a paragraph.
Which obviously is not going to, if your question is like, if I've got a whole bunch of archive papers embeddings.
And I asked like, what are all the ways in which we can make inference more efficient?
The only paragraphs it'll find is like, if there's a review paper that says here's a list of ways to make, you know, inference more efficient.
Doesn't have any of the specifics.
No, it's not going to be like, oh, here's one way, here's one way, here's a different way in different papers, you know.
Yeah, if you fine-tune a model, then all of that information is getting directly incorporated into the weights of your model in a much more efficient and nuanced way.
And then you can use RAG on top of that.
So I think that that's one area that's definitely underappreciated.
And also the confluence of like, okay, how do you combine RAG and fine-tuning, for example.
Something that I think a lot of people are uncertain about, and I don't expect you to know either, is that whether or not you can fine-tune new information in.
And I think that that is the focus of some of your open questions and research.
But of course you can, right?
Because it's additional pre-training.
Obviously you can, because there's no such thing as fine-tuning.
There's only continued pre-training.
So fine-tuning is pre-training, like they're literally the same thing.
So the knowledge got in there in the first place through pre-training.
So how could continuing to pre-train not put more knowledge in?
Like it's the same thing.
The problem is just we're really bad at it, because everybody's doing it dumb ways.
So it's a good question, and it's not just new knowledge, but new capabilities.
You know, I think like in my Hackers Guide to LL, into Hackers Guide to LLM's talk, I show simple.
I mean, it's a funny, that's a simple example, because it doesn't sound it, but like taking a pre-trained based model and getting it to generate SQL.
And it took 15 minutes to train on a single GPU.
You know, I think that might surprise people that that capability is actual fingertips.
And you know, because it was already there, it was just latent in the base model.
Really pushing the boundaries of what you can do with small models, I think is a really interesting question.
Like what can you do with a...
I mean, there isn't much in the way of good small models.
A really underappreciated one is a BTLM 3B, which is a like kind of 7B quality 3B model.
There's not much of the 1-2B range, sadly.
There are some code ones, but like the fact that there are some really good code ones in that 1-2B range shows you that that's a great size for doing complex tasks well.
There was PHY1 recently, which has been the subject of a little bit of discussion about whether they're trained on benchmarks.
Yeah, PHY1.5 as well.
So that's not a good model yet.
Why not?
So PHY1 in particular is good at doing a very specific thing, which is creating very small Python snippets.
The thing...
Okay, so like PHY1.5 has never read Wikipedia, for example.
So it doesn't know who Tom Cruise is, you know.
It doesn't know who anybody is.
He doesn't know about any movies.
It doesn't really know anything about anything because it's never read anything.
You know, it was trained on a nearly entirely synthetic data set, which is designed for it to learn reasoning.
And so it was a research project and a really good one, and it definitely shows us a powerful direction in terms of what you can do with synthetic data.
And wow, gosh, even these tiny models can get pretty good reasoning skills, pretty good math skills, pretty good toting skills.
But I don't know if it's a model you could necessarily build on.
Some people have tried to do some fine tunes of it.
And again, they're like surprisingly good in some ways for a 1.5B model, but not sure you'd find it useful for anything.
I think that's the struggle of pitching small models because small is great, you know, you don't need a lot of resources to run them.
But the performance evaluation is always so iffy.
It's always just like, yeah, it works on some things and we don't trust it for others.
Yeah, so that's why we're back to fine tuning.
I would say, so Microsoft did create a PHY1.5 web, but they didn't release it, unfortunately.
I would say a PHY1.5 web with fine tuning for your task might solve a lot of tasks that people have in their kind of day-to-day lives,
particularly in kind of an enterprise setting.
I think there's a lot of repetitive kind of processing that has to be done.
It's a useful thing for coders to know about because I think quite often you can replace some thousands and thousands of lines of complex buggy code maybe with a fine tune, you know.
Good.
Yeah.
And Jeremy, before we let you go, I think one question on top of a lot of people's minds.
So you've done practical deep learning for coders in 2018, 19, 21, 22.
I feel like the more time goes by, the more the GPUs get concentrated.
If you're somebody who's interested in deep learning today and you don't want to go join OpenAI, you don't want to join Anthropic,
what's like the best use of their time?
Should they focus on, yes, model development?
Should they focus on fine tuning math and all of that?
Should they just like focus on making rag not a hack and coming up with a better solution?
Yeah, what's practical deep learning for coders 2024 kind of look like?
Yeah.
I mean, good question.
I'm trying to figure that out for myself, you know, like what should I teach?
Because I definitely feel like things have changed a bit, you know.
One of the ways in which things have changed is that coding is much more accessible now.
So if you look at a lot of the folks in the kind of open source LLM community,
they're folks who really hadn't coded before a year ago.
And they're using these models to help them build stuff they couldn't build before, which is just fantastic, you know.
So one thing I kind of think is like, okay, well, we need a lot more material to help these people use this newfound skill they have,
because they don't really know what they're doing, you know, and they don't claim to,
but they're doing it anyway.
And I think that's fantastic, you know.
So like other things we could do to help people, you know, bridge this gap,
because previously, you know, I know folks who were, you know, doing menial jobs a year ago,
and now they're training language models thanks to the help of codecs and co-pilot and whatever.
So, you know, yeah, what does it look like to like really grab this opportunity?
You know, maybe fast AIs goals can be dramatically expanded now to being like,
let's make coding more accessible, you know, or kind of AI-oriented coding more accessible.
If so, our costs should probably look very different, you know,
and we'd have to throw away that like, oh, you have to have at least a year of full-time programming,
you know, as a prerequisite.
Yeah, what would happen if we got rid of that?
So that's kind of one thought that's in my head.
You know, as to what should other people do, honestly, I don't think anybody has any idea,
like the more I look at it, what's going on.
I know I don't, you know, like, we don't really know how to do anything very well.
Clearly open AI do, like they seem to be quite good at some things,
or they're talking to folks at or who have recently left open AI.
Even there, it's clear there's a lot of stuff they haven't really figured out,
and they're just kind of like using recipes that they've noticed have been okay.
So yeah, we don't really know how to train these models well.
We don't know how to fine-tune them well.
We don't know how to do RAG well.
We don't know what they can do.
We don't know what they can't do.
We don't know how big a model you need to solve different kinds of problems.
We don't know what kind of problems they can't do.
We don't know what good prompting strategies are for particular problems, you know,
like somebody sent me a message the other day saying they've written something
that is a prompting strategy for GPT-4.
They've written like 6,000 lines of Python code,
and it's to help it play chess.
And then they've said they've had it play against other chess engines,
including the best stockfish engines,
and it's got an ELO of 3400,
which would make it close to the best chess engine in existence.
And I think this is a good example of like people were saying like GPT-4 can't play chess.
I mean, I was sure that was wrong.
I mean, obviously it can play chess,
but the difference between like with no prompting strategy,
they can't even make legal moves.
With good prompting strategies,
it might be just about the best chess engine in the world,
far better than any human player.
So, yeah, I mean, we don't really know what the capabilities are yet.
So I feel like it's all blue sky at this point.
It feels like computer vision in 2013 to me,
which was like in 2013 computer vision.
We just had the AlexNet.
We've had AlexNet.
We've had VGGNet.
It's around the time Xyler and Fergus like,
no, it's probably before that.
So we hadn't yet had the Xyler and Fergus like,
oh, this is actually what's going on inside the layers.
So, you know, we don't actually know what's happening inside these transformers.
We don't know how to create good training dynamics.
We don't really know anything much.
And there's a reason for that, right?
And the reason for that is language models suddenly got really useful.
And so the kind of economically rational thing to do,
like this is not criticism, this is true.
The economic rational thing to do is to like,
okay, like build that as fast as possible,
you know, make something work, get it out there.
And that's what, you know, open AI in particular did,
anthropic kind of did.
But there's a whole lot of technical debt everywhere, you know,
nobody's really figured this stuff out because everybody's been so busy
building what we know works as quickly as possible.
So, yeah, I think there's a huge amount of opportunity to,
you know, I think we'll find things can be made to work a lot faster,
a lot less memory.
I got a whole bunch of ideas I want to try, you know,
every time I look at something closely, like really closely,
I'm always like, oh, turns out this person actually had no idea what they're doing.
You know, which is fine, like none of us know what we're doing.
We should experiment with that.
We had a treat out on the podcast who created flash attention.
And I asked them, did nobody think of using SRAM before you?
Like where people just like, you know, and he was like, yeah,
people just didn't think of it, didn't try.
They didn't come from like a systems background.
Yeah.
I mean, the thing about flash attention is, I mean,
lots of people absolutely thought of that.
So had I, right?
But I mean, the honest truth is particularly before Triton,
like everybody knew that tiling is the right way to solve anything.
And everybody knew that attention,
used attention, wasn't tiled.
That was stupid.
But not everybody's got his ability to like be like,
oh, well, I'm confident enough in CUDA and or Triton
to use that insight to write something better.
And this is where like, I'm super excited about Mojo, right?
And I always talk to Chris about flash attention as I'm like,
there is a thousand flash attentions out there for us to build.
You just got to make it easy for us to build them.
So like Triton definitely helps.
But it's still not easy.
It still requires kind of really understanding the GPU architecture,
writing it in that kind of very CUDA-ish way.
So yeah, I think, you know, if Mojo or something equivalent
can really work well, we're going to see a lot more flash attentions
popping up.
Great, Jaren.
Before we wrap, we usually do a quick lightning round.
We've got three simple questions.
So the first one is around acceleration
and you've been in this field a long time.
What's something that it's already here today
and AI that you thought would take much longer?
I don't think anything.
So I've actually been slightly too bullish.
So in my 2014 TED Talk, I had a graph and I said like,
this is like the slope of human capabilities
and this is the slope of AI capabilities.
And I said, oh, and I put a dot saying we are here.
It was just before they passed.
And I looked back at the transcript the other day
and I said in five years, I think we might have crossed
that threshold in which computers will be better
at most human tasks than most humans, most average humans.
And so that might be almost true now for non-physical tasks.
So I took that twice as long as I thought it might.
Yeah, no, I wouldn't say anything surprised me too much.
It's still like definitely like, I got to admit,
I had a very visceral reaction using GPT-4 for the first time,
not because I found it surprising, but actually doing it.
Something I was pretty sure would exist by about now,
maybe a bit earlier.
But actually using it definitely is different
to just feeling like it's probably on its way.
And yeah, whatever GPT-5 looks like,
I'm sure I imagine I'll have the same visceral reaction.
It's really amazing to watch develop.
We also have an exploration question.
So what do you think is the most interesting
unsolved question in AI?
How do language models learn?
What are the training dynamics?
Like I want to see, there was a great paper about Resnets
a few years ago that showed how that was able to like plot
a kind of projected three-dimensional loss surface
for a ConvNet with and without skip connections.
And you could very clearly see without the skip connections,
it was super bumpy and with the skip connections,
it was super smooth.
That's the kind of work we need.
So there was actually an interesting blog post
that came out just today from the PyTorch team
where some of them have created this like 3D
matrix product visualization thing.
And they actually showed some nice examples
of like a GPT-2 attention layer
and showed an animation and said,
like, if you look at this, we can actually see a bit
about what it's doing.
You know, so again, it reminds me of the Zeiler
and Fergus, you know, ConvNet paper.
That was the first one to do these reverse convolutions
to show what's actually being learned
in each layer in a ConvNet.
Yeah, we need a lot more of this, like,
what is going on inside these models?
How do they actually learn?
And then how can we use those insights
to help them to learn better?
So I think that would be one.
The other exploration I'd really like to see
is a much more rigorous analysis
of what kind of data do they need,
at what level, and when do they need it,
and how often.
So that kind of like data set mixing, curation,
so forth in order to get the best capabilities.
Yeah.
How much is Wikipedia?
Yeah.
Very uncertain.
You know, to fine-tune what kind of mix
do you need for it to keep its capabilities
and what are the kind of underlying capabilities
that it most needs to keep?
And if it loses those, it would lose all these other ones
and what data do you need to keep those?
And, you know, are there things we can do
to change the loss function, to help it,
to not forget to do things, stuff like that?
Awesome.
And yeah, before wrapping, what's one message,
one idea you want everyone to remember
and think about?
You know, I guess the main thing I want everybody
to remember is that, you know,
there's a lot of people in the world
and they have a lot of, you know,
diverse experiences and capabilities
and, you know, they all matter.
And now that we have, you know,
nearly powerful technology in our lives,
we could think of that in one of two ways.
One would be, gee, that's really scary
what would happen if all of these people in the world
had access to this technology.
One of them might be bad people.
Let's make sure they can't have it.
Or one might be, wow,
if all those people in the world are better,
a lot of them could really improve the lives
of a lot of humanity if they had this tool.
This has always been the case, you know,
from the invention of writing
to the invention of the printing press
to the, you know, development of education.
And it's been a constant battle
between people who think that distributed power is unsafe
and it should be held on to by an elite few
and people who think that humanity on net,
you know, is a marvellous species,
particularly when part of a society and a civilization
and we should do everything we can
to enable more of them to contribute.
There's a really big conversation right now
and, you know, I want to see more and more people
showing up and showing what, you know,
what the great unwashed masses out there
can actually achieve, you know,
that actually, you know, regular people
are going to do a lot of really valuable work
and actually help us be, you know, more safe
and also flourishing in our lives
and providing a future for our children to flourish in,
you know, if we lock things down
to the people that we think, you know,
the elites that we think can be trusted to run it for us.
Yeah, I think all bets are off about where that lives as a society, you know.
Yep.
Now, that's an important message
and yeah, that's why we've been promoting a lot
of open source developers, open source communities.
I think letting the builders build and explore,
that's always a good idea.
Thank you so much for coming on, Jeremy.
This was great.
Thank you for having me.
