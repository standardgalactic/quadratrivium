So good morning, everyone.
Finally started the screens.
It's great to be here.
I'm Garagay.
Thank you for the introduction, Jose.
And I am most well-known right now
for writing The Pragmatic Engineer, which
is the newsletter that does dive into big tech and startups.
And I do talk with people working at these companies.
And I also wrote the book, the Software Engineers Guidebook.
And before I started this newsletter,
I worked at tech companies.
So I worked at Uber, Skyscanner, Skype.
I like to say Skype, but it was actually Microsoft at the time.
I got to work on the Xbox One, which came out a bit more
than 10 years ago now, and at JP Morgan.
And I was a software engineer for about 10 years,
engineering manager for another five.
And I kicked off this newsletter, where
I'm now writing about the stuff that I've been doing.
But today, we're going to talk about change.
We're going to talk about, we've seen a lot of change
lately in the tech industry, more than usual.
But we're going to talk about a specific type of change,
change that feels like it's a very new type of change.
But it's something that we actually
might have seen before, at least people who have been
in tech industry for a long enough time.
And let me give you one example to start with.
So these days, we're starting to see small teams
move faster, build solutions kind of faster
than they would have normally done in the past.
And this kind of makes sense, right?
But we have better tools.
We have better know-how, more seniority.
An example is Blue Sky, a Twitter competitor.
It's nice that we mentioned Twitter.
Like a lot of people, I think, heard about it
the first time when Twitter was in turmoil,
and I managed to talk with people who were working there.
I no longer know anyone who's working there, by the way,
even though I know a lot of people.
But Blue Sky is one of the challengers to Twitter
these days, and what they did is they started in 2022.
So almost two years ago, that's when the company was founded.
They had one CEO and two developers.
They started to develop a mobile app six months
later with two developers.
Only one developer was developing an iOS and an Android app.
They did a soft launch one year ago.
In six months, they got to a million users.
And last month, they were at 5.5 million users,
and they have 12 developers.
And this is kind of impressive in the sense
of what a small team launches this kind of application.
Usually, most companies have way more developers
for a similar scale.
But we've seen this before, haven't we?
This is not entirely new.
I mean, here's an example from 2010,
from a different startup.
They started mobile development.
They got to million users in the first year.
Then to 5 million, 10 million, then 30 million.
And in two years, they were at 13 developers.
And of course, I'm talking about Instagram, which
is one of these well-known stories.
And if we compare the two together,
it's a very similar timeline in terms of when
I just look at the number of developers.
And I mean, Instagram got to more users.
But both of these companies built an iOS app, an Android app,
and a web site, and obviously the backend services,
and enough scale to handle those millions of users
in the same time period.
But the interesting thing is, it should have been a lot easier
in 2022.
I mean, in 2010, building native apps was really hard.
And yeah, so I guess we kind of have seen this before.
So what else is familiar from earlier times?
And I reached out to a friend, Ken Beck.
He's one of the Azure Manifesto founders.
He's been very involved in TDD in the 2000s.
He's just published a book recently called
Tidy First.
And he works at a company called Mechanical Orchard,
where they help companies migrate their COBOL code using AI
onto modern code, which is really cool.
So anyway, ask Kent.
Hey, Kent, you've been around in the industry
for working in the software industry just for 40 years.
You've seen a lot.
Have you seen some changes in software engineering
where you feel they've happened before?
And Kent is like, oh, yeah, I've seen plenty.
Here's one.
Feedback loops are getting longer.
And I was like, what do we mean?
What kind of feedback loops, like deploying to production,
like responding to bug requests or something?
He's like, no, every imaginable feedback loop.
What I mean is, and this is him saying it,
if as a team we made a mistake, we don't really
want to know about it.
Let it be someone else's problem.
It's not our teams.
I was like, oh, really?
That's what you're seeing?
He's like, yeah, there's a lot of excuses for it,
but it all seems like BS to me.
And he tells me, this was like this in the 2000s as well.
He's like, I don't know why, but it's just going back
to where it used to be.
I was like, huh, that's interesting.
So it seems we're seeing a couple of things
that did happen before.
But today, we'll start by talking
about what is happening right now.
Then we'll talk about the new reality of things,
and then we'll go back to where did we see this before and why.
So let's start with what is going on.
What is going on in the tech industry?
And we've seen change.
I'll talk about a few different areas, the job market, VC
funding, IPOs, and big tech.
So on the job market, in 2021, it was looking back.
It was the hottest tech job market ever,
like probably in all of tech history,
where if you wanted to get a job,
that was the time to get a raise,
to get a better opportunity, and to give an example of how
crazy this was.
Here's a CTO at a scalep in Germany back in the end of 2021
telling me this, that our interview process is short,
but we're still seeing people drop out
because they have multiple offers.
We've lost a person that went to Twitter to work remotely.
This was when Twitter announced remote work forever
before it was reversed a few years later.
And the competition has intensified with Silicon Valley
companies allowing remote work.
In every single company, this was a well-funded scaleup.
They raised, I think, tens of millions of euros or dollars.
They were struggling to hire, and big tech
was struggling to retain, and everyone was struggling to hire.
And it was so good to be on the job market.
It was really good to shop around.
And we've seen reports of this.
And just in February 2022, the New York Times
also reported on tech companies facing this hiring crisis.
But then, out of almost nowhere, in just two months later,
we started to see some really unexpected layoffs
seeming out of nowhere.
First, fast, the one-click checkout startup
that raised $100 million a year ago.
There's one bankrupt, pretty much overnight.
Bolt, one-click checkout, did layoffs.
Klarna, by now, pay later.
They also let go, I think, 5% or 10% of staff.
The instant delivery apps, FinTech, cybersecurity,
they all start to do like 5% or 10% layoffs.
And it didn't really stop.
In the fall of 2022, there were just more startups
and scaleups letting go, I think.
Stripe let go more than 10%.
We had Lyft, we had a lot of startups.
But there was one thing that kind of connected all of these.
All of these companies were making a loss.
So, I mean, we could kind of put it together.
We're like, well, okay, I guess it's not great to have layoffs,
but these companies are making a loss.
Clearly, they're not able to raise money.
I mean, that kind of makes sense, right?
And the thinking back then was like, well,
maybe just beware if you're not working in a company
that makes profit.
Like, working at a profitable company should be fine.
And then a month later, this happens.
Meta, extremely profitable company.
They're posting close record profits,
and they let 10% of staff go, 13%, 11,000 employees.
And a few months later, every single other profitable company,
public and trade at Amazon, Microsoft, Google,
they do the same.
And when we look at the actual layoffs by number
on this website called layoffs.fyi,
there was this huge spike in 2023.
So, something was happening there,
and it wasn't just non-profitable companies.
But it wasn't just a job market VC funding.
Up to 2021, it was just going up.
It was going, this is every year from 2011 to 2021,
it was going up, up, up, and a huge jump in 2021.
And after 2021, there was just a drop downwards.
This is data from Pitchbook who gather,
who are one of the best sources for this information.
And in 2000, right now, last quarter, in 2024,
we are at 2018 levels.
So it's kind of like we're seeing less venture capital,
less money going, being able to go to startups.
And it's not just the job market and venture capital,
but IPOs, companies going public.
Like, companies going public is a big exit opportunity
for people who work there.
If you have shares, they're gonna be worth something.
And it's also a big one for investors.
The more companies go public, the more money they have
to re-invest.
Again, in 2021, a huge spike in companies going public.
These are, the blue ones are the public listing,
again, from Pitchbook.
And in 2023, this number dropped incredibly.
And we only, we saw zero tech IPOs in 2022,
and only three in 2023.
And now we're seeing a couple more.
But again, it just really went up and down.
And finally, for Big Tech, some of the largest tech companies,
this is where it gets really puzzling.
Big Tech did largely up in 2023,
where they let go a large amount of people.
And we could justify that saying that was a pandemic,
they over-hired and they had to let people go.
But now, just this January and February in this year,
they all posted record profits.
They were all doing very well financially,
and they still went around and did more cuts.
And Google specifically is a really good one to look at,
because it just highlights the seemingly doesn't make sense.
So Google was founded in 1998,
and I've marked the layoffs with reds,
whenever they had mass layoffs.
In 2008, with the financial crisis,
Google got worried and they let go of 2%
of their staff, about 300 people.
They had one layoff in 2013,
where they bought Motorola and they let a lot of Motorola people go,
but not Google employees, or the ones that were at Google.
And then nothing, for 15 years, there was no layoffs.
So if you looked at, if in 2022 you looked at Google,
it was the safest place to work.
They had one mass layoff, which was a very small one
in the financial crisis, but nothing else.
And then, in 2023, they let go a 6% of staff.
And in 2024, there now seems to be doing layoffs again.
And this is just very strange,
because Google has been awarded many times
as the best place to work in tech.
So why were they doing this?
It's pretty puzzling.
So to sum it up, what we're seeing is less VC funding, fewer IPOs,
big tech having record profits and still laying off,
and the job market just getting tougher.
So why?
Why is this all happening?
Something clearly changed around 2022 and 2023.
And yes, the pandemic was easing, the lockdowns were ending.
That is clearly one part.
But as I look through the data, as I talk with people,
as I talk with CTOs and founders on why they're doing this thing,
it was something else.
I found this article as a kind of reverse researching
in the middle of 2022.
The Federal Reserve, which is like the central bank of the US,
if you will, by a small stretch, they
did an interest raise that was the largest in 28 years.
And this is finance news.
We're tech conferences.
We're software industry.
Why am I talking about interest rates?
Are we really going to talk about interest rates right now?
Yes, we're really going to talk about interest rates right now.
So it's going to be important for us
to understand why interest rates are affecting tech in the end.
And in the start of it, we need to understand
why interest rates impact inflation,
because the Fed did a raise in order
to combat the high inflation in the US.
Back then, it was about 8% in the US,
and they wanted to bring it down.
So why would raising interest rates help reduce inflation?
Well, I took this quote from the BBC, who
talks about the UK central bank fighting inflation, which
applies to the US, to Hungary, with the European central bank.
So this is from the BBC quote.
The Bank of England, and any central bank really,
moves rates up and down to control inflation in the country.
And inflation means the increase of prices,
as we know over time.
When inflation is high, the bank may decide to raise rates
as well.
But why would raising rates do anything with inflation?
Well, when you raise rates, so when a central bank raises
rates, everything goes up.
The price of taking out a mortgage goes up,
so fewer people are going to buy houses.
The price of credit goes up, so interest on your credit card
goes up, so you might think about doing it as well.
And if you leave your money in the bank before you got nothing,
or like 0.25%, now you might get 3% or 4% or 5%,
so you're probably going to leave it there to accumulate
and spend less.
So demand in the economy will go down.
People will spend less, and when people spend less,
prices will not go up as much, because it's silly to raise
prices at that time, because no one's going to buy it.
And then the bank monitors this, whether they hold rates
or whether they raise it.
And it's a balance to raise prices
against the risk of damaging the economy.
So with this finance, I guess less than that all the way,
this is important to see, because there
is a big question of why rates are so high globally.
So let's go back to rates.
So this is what it was like in the US, the rates,
it was 0.25%, and it went to 5% in less than a year.
This was a pretty big change.
But let's zoom out, let's zoom out 15 years.
What were the rates like in the US?
And it was from 2009, it was almost zero all the way
to like 2022, there was a small raise, you can see in steps.
It went up to like 2% in 2017, and then it dropped down again
because COVID started and the bank again
wanted to simulate the economy.
But let's zoom out even more.
Let's zoom out 50 years, or as long as we can,
as long as we have data in the US.
This is all the data we have from 1955 all the way to here.
So I guess modern American interest rates history.
And something really interesting happens.
When we look at the only times there
were low interest rates, which means 1% or below,
in 1958, it was two months.
In 2003, after the dot-com bus, it was two months.
And then we had this nine-year straight from 2008,
and then another two years, so like for 15 years,
we've had very low interest rates.
And this has never happened before, ever.
The rates have only been for a few months,
and now we're here for 15 years.
And it's not just the US.
If we look at Canada, if we look at the EU,
if we look at the UK, it's all the same.
The rates went down globally, everywhere.
So OK, but why should we care?
We're in tech.
We're not in finance.
I'm sure you enjoyed this interesting observation.
But now let's get to how it affects tech.
Interest rates and startups are actually connected.
And this is not me saying it.
This is Matt Levine, a Bloomberg analyst who writes the money
stuff daily news that are in Bloomberg.
This is a quote from him.
He's saying startups are a low interest rate phenomenon.
When interest rates are low everywhere,
a dollar in 20 years is as good as a dollar today.
And this means that if you have a dollar
and you put it in the bank, in 20 years with a zero interest
rate, you will have a dollar in the bank.
And so a Starbucks business model
is I will lose money for a decade building
artificial intelligence and then make a lot of money
in the far future in 10 or 20 years.
That sounds pretty good, because what else are you going to do?
You're going to just put your money in the bank,
and you're not going to get an interest.
Instead, you put it in a startup,
and you're not going to see anything for 10 or 20 years,
and you might see a bigger turn, or you might lose it all.
You do this with 100 startups.
You're a big fund.
You invest $100 million.
And over 10 years, you're not going to see anything.
And then you might turn that $100 million to $150,000,000,
or $200,000,000, or $250,000,000.
And that sounds pretty good, because the alternative
is make no interest.
So Matt Levine continues, if some charismatic tech founder
have come to you in 2021, I'm going to revolutionize the world
via AI, robotaxis, flying taxis, flake taxes, or blockchain,
it might have been unnatural to apply.
Nah, what if the Fed raises rates by 0.255%?
Because tech was supposed to be an industry
with this radical vision of the future of humanity,
and not a bet on interest rates.
Turns out it was a bet on interest rates all along.
And when I read this, I read this, I think,
maybe six months ago.
At first, I was like, no way, no way.
It can be.
But it actually is.
So what happens when the rates go up, like they have?
They go from 0 to 5%.
Well, what this means for VC funding,
you're just going to see less VC funding,
because VC has funded by pension funds,
high net individuals, and all of them are like, huh,
I could just put my money into the bank for 5%.
If I have $100 million, and there's a 5% interest rate,
everywhere I make $5 million, in 10 years I make $150 million,
in 10 years, by doing nothing,
I turned that $100 million into $150 million
with zero risk, or virtually zero risk.
So, VCs are going to have a hard time convincing them
to give us some DeSardos, where in 10 years,
you're not going to see anything,
and every year you're going to see a return.
There's going to be fewer IPOs initially,
because a lot of tech companies,
fewer tech IPOs, because a lot of the tech companies
are loss making, and no one wants to give money
to loss making companies in a high interest rate world.
There's, big tech will have to generate more profits
than before, because everyone cares about more profits,
more profits, because you can get more profits
just by putting your money in the bank,
and then the job market will just be tougher
because of all this.
But it's not just interest rates.
Something else also happened in 2007, 2008.
In 2007, this came out, the iPhone.
It's pretty interesting, because that's also
when the low interest rates started,
almost at the same time, I think, maybe a year after,
but in 2008, Android came out.
And then it wasn't just smartphones,
which we know revolutionize everything,
but in cloud computing, AWS launched in 2006,
Azure, Google Cloud, 2008.
And the timing is pretty darn incredible.
I just mapped it out together,
the smartphone key events and the cloud key events,
they almost all happened right as interest rates went to zero,
so not only did we have a low interest rate period
where more venture capital will flow into startups,
we actually had more reason to invest in startups,
because suddenly, the smartphone revolution
birthed so many huge companies today.
Spotify was founded in 2006,
but they really took off with the iPhone and Android,
WhatsApp, Instagram, Uber, Snap,
they all exist because of smartphones.
If it wasn't for this smartphone revolution,
who knows if they would be around,
and there's thousands of more.
And cloud computing made a lot of startups
just a lot easier or more profitable.
Netflix, so these are all large AWS customers,
Netflix, Airbnb, Stripe, Twitch,
without cloud computing,
they would have had to build their own data centers,
it would have been slower, more expensive,
they would have not been able to grow as fast.
And again, thousands of more companies were enabled.
But it's been 15 years,
and I think it's fair to say
that the smartphone cloud computing revolution
kind of maybe ran its course,
because now 15 years later,
building a mobile app for a cloud,
it's just not a huge advantage.
I mean, it is, but it's what everyone does.
So to recap why all these changes happening now,
it's because mostly of the low interest rates,
but as an added interest,
it was really interesting
that when low interest rates started,
we had two massive technology revolutions kickoff.
Now these days, we're seeing the AI revolution kickoff.
So I marked the chat GPD launch in November, 2022,
we see AI is really hot,
and this could be a very interesting
and promising revolution,
but it's now happening in a high interest rate environment,
not a low interest rate one.
So,
this is what's happening,
but what is a new reality?
And I'll talk about what it means
for software engineers and for engineering practices.
For software engineers,
it's just tougher to get a job.
There are just fewer jobs posted,
so these graphs start from 2020,
and they end in 2024.
Their job listings are hacker news on Indeed
in the US, UK, and Germany,
and you can see that the number of job posting
peaked in 2021, 2022,
and they're now kind of back to where they were in 2019, 2020.
So there are fewer jobs out there to apply to them
just two years ago, for example,
and there are more applicants for jobs.
So this is, I talked with a startup,
a scale-up in the US called SupplyPike.
They're based in Arizona.
I think there are around 50 or 100 people.
They require people to work hybrid,
so you need to either move to Arizona
or Kansas.
You need to move there or be willing to move there,
so it's not a full remote company,
but for one posting, for every one open headcount,
they get 192 intern applications for software engineering,
164 software, and 37 senior engineer.
And their CTO shared some observations with me this January.
They said that internship applications
doubled since last year.
Software engineering applications
tripled since last year.
More big tech applicants from Facebook, Google, et cetera.
Senior engineers are no longer kind of shopping around,
interviewing, and then choosing the best one.
They're just taking the first one.
And they're saying that from their perspective,
Compensation Astor, returning back to normal,
which always gives pleasure to hiring managers.
It just means that it's harder
to negotiate a higher compensation package.
We also see fewer developers quitting.
So this January, with the help of Dominic Jack-Weston,
who's part of Founder Keeper's CPO forum,
he asked around, how are you seeing
basically people quitting at your company?
50% of EU founders said no change,
but another 50% said they see a lot fewer people quitting.
And with fewer developers quitting,
there's just less hiring,
because you need to backfill fewer people.
Another thing that we should expect as software engineers
is just slower career growth.
And this is just because when there's less hiring,
either because the backfilling of a company
is not growing as much,
there's just less need for more senior elite positions.
You don't really need, if you have a team of 10,
and you have a pretty good distribution of seniority,
you will not need that many more tech leads
or staff engineers from a budget perspective.
We never recognize this,
because until now, those teams were growing.
This year was 10, next year, 15, 20.
There was always room to get promoted,
but there might not be a business reason.
So there's gonna be fewer promotions.
And here's the thing, a few companies, I think,
are kind of preparing for this new reality
of fewer promotions.
And Shopify is a good example, I'll just talk you through.
I wrote this article just a few months ago asking,
is Shopify responding to higher interest rates
by changing their promotion process,
which sounds pretty cheeky,
but it's actually a legit question.
Here's what Shopify did.
Before, they had levels from C1 to like C10,
C6 was senior engineer, I think C7 maybe staff engineer,
and you get promoted from C4, C5, C6,
it's just a leveling framework.
That was the only way to get promoted.
They changed this.
They introduced a mastery score from zero to 50
on each levels for like C6, C7.
And now they're saying, there's two ways
to advance your career.
You can either up level in your mastery,
so go from a 30 points on C7 to like 40 points,
because you're getting better at your craft.
And going higher, by the way, it means a pay rise,
it doesn't mean bonus, it means all those things.
Or you can change your scope,
go from C7 team lead to C8, I think, a discipline lead,
but then your mastery drops,
and they're emphasizing that's now a different job.
Like, and you know, you should think about,
do you want to do that different job?
Now what this is really preparing for,
I talked with, I also thought about it,
and my thinking was that,
I think they're kind of watering down the old,
cleaning up promotions because they're probably
expecting to see a lot fewer promotions.
And I talked with a manager at a company
who actually agreed with this,
but at the same time, I think what Shopify is doing
is brilliant because, I mean, it's not great
to work at a company and, you know,
like until now you saw promotions every one or two,
or every like two or three years,
and now it's gonna be, you know,
four or five years with no promotion.
But at Shopify, people are going to advance
every six months, their mastery will increase,
they will get small bonuses,
they'll get that recognition.
So I think it's really smart about what they're doing,
and I think more companies will follow,
or companies that look ahead and they see
that they're gonna be hiring less, they should follow.
So Shopify, I think, will keep their engineers
happier this way.
So this is the new reality for software injury.
The tougher to get a job and promotions are harder,
and the career growth is slower.
What does this mean for,
this change mean for software injury practices?
Clearly when we're looking at a time
where there's less money, more constraints,
more focus on efficiency, we should be choosing
more boring technology that gets the job done, right?
I made this comment to illustrate this point
where you can choose either to, you know,
choose the technology that solves the business problem,
it's proven and good and it's working, you know,
may that be Java or PHP or JQuery,
or you can just choose the really, really cool technology,
right, you could do Rust, you could do Next.js,
you could do Kubernetes, I'm no longer sure where that goes,
and I just wanted to make this funny point
that this choice should be obvious,
that you should press the business button,
but the more I looked at this photo,
the more I felt I don't really wanna press the,
I actually wanna, I really wanna press the new technology
because that's how we learn, that's what's funny,
new technologies are usually there for a reason,
they usually have better performance,
they work around the limitations of the other stuff
and they're the future.
So, I mean, I want to say that we're gonna see
more people pressing this love button
just to solve the business problem,
but I think most engineers will just say,
let's just choose both, let's press both at the same time,
we'll use this new technology
in order to solve your business problems.
And this will still mean we'll try to justify
how to use a really cool new tech,
but we will also solve,
we will be mindful of solving the business problem,
but the truth is we will have a lot more pressure
of software engineers coming from non,
especially from the non-technical people,
the business leadership,
to choose the boring technology
because that will be their preference,
it might not be our preference,
but it will be theirs.
And just to show how different this used to be,
just a few years ago,
what technology choices during
the zero interest rates periods looked like,
I'm gonna single out Monzo here
with a Slack message that their founder
and CEO sent to the team,
and they actually put it on a conference,
so it's not some internal conference.
And this was in 2015,
so in the middle of zero interest rates period,
he went step one, go,
step two, microservices,
step three, who knows,
step four, profit.
And this was actually shared
on a microservices conference in, I think, 2016,
as the explanation of why Monzo chose microservices,
because after Uber,
I think they have the most microservices out there,
one of the most,
they have thousands of microservices with 500 engineers,
so it's like a couple of microservices per engineer.
They got it to work for themselves,
but I mean, if this really was the reasoning,
that raises some questions,
but I am glad, by the way,
that they shared this because a lot of,
this was not just them,
a lot of companies thought like this, right,
with CTOs, even the CEOs really got into this,
because what this meant, don't forget,
this kind of made some sense.
Back then, it was really hard to hire software engineers,
even if you had the funding, you struggled,
you needed to give them something else,
like cool technology.
So I think what this really said is,
we know this way we're gonna hire software engineers,
and they went to conferences to talk about it,
and to hire more software engineers,
and they succeeded,
but seriously, one thing that's gonna change,
looking forward, I've been talking to a lot of startups,
I think monoliths are making their way back yet again.
It's just starting to become trendy,
to start with a monolith,
and then stick with a monolith.
I mean, there's one company that's been doing this
for a long time, Shopify,
you turn into a modular monolith, obviously,
but there is some sense in this,
in the sense that when you know you're gonna hire
a lot of people for the next two or three years,
you're gonna double your team every time,
microservices solves an organizational problem.
If that's not gonna happen,
you don't really have an organizational problem to solve,
so monoliths should be good enough.
But I suspect that in a few years we'll be going back,
but for now, monoliths might just be
the new microservices, who knows.
Full stack is in full swing.
We've been hearing full stack a lot,
but I'm hearing it way more everywhere.
And here's a simple explanation why.
Here's a typical small team that's building
iOS, Android, web, and backend.
Two backend engineers, one web engineer,
one iOS, and one Android.
How does this look like when you change your tech stack
a little bit to something like React Native,
or Flutter, or something else?
Well, you can just actually have,
I guess, three types of engineers,
all who are full stack.
One with the backend focus,
one with the web plus backend,
one with the mobile focus.
I know, I know there's KBits on this,
but you can produce a similar output.
You can produce those iOS, Android, and web applications,
and they'll, functionally wise, they'll be similar.
And now you'll have a smaller team.
Less communication, from a manager perspective,
that's a lower budget.
And one thing that's helping this transition,
so if we compare it to, it's pretty obvious,
it's a different number of people.
And again, smaller teams do move faster, right?
But TypeScript is helping make this transition.
I've seen so many startups that have been
started the past few years,
who talk about how TypeScript makes all of this possible.
Blue Sky, the company we talked about,
one of their, I guess, secrets was,
they use TypeScript almost all the way.
The backend is in TypeScript, the front end is in TypeScript,
the mobile apps are in TypeScript,
it's using React Native and Expo.
And so, all of their engineers can modify any part of it,
well, I mean, you still need to know the,
but all of their 12 engineers modify the backend,
the mobile, and the web, this is pretty incredible.
And it's not just, it's not just Blue Sky,
a linear, the popular product management solution
funded by Thomas Artman, a former colleague of mine at Uber.
He told me this in October, I get reminded really
how awesome it is to have just one language TypeScript
for the entire stack from back into front end.
It's safe to say that our tech stack is serving as well.
And this is, I'm not, I don't wanna single out TypeScript,
but like having a technology where your engineers
can contribute to the whole stack is a good one.
One more thing that's changing is developer responsibilities
are shifting left.
You're gonna probably hear shift left a lot
on conferences in the coming years.
And what this means is before, a few years ago,
or even a decade ago, we had developers
write code and we had QA tested
and we had ops deployed to production.
Obviously this has already changed at a lot of companies
where developers do all of this thing,
so they write tests and they deploy it.
You might have some platform teams that help with this,
but we're now also starting to see more things
shifting left on developers.
Security, some SRE tasks, and from the other side as well,
there's a little bit of project management.
So like, I don't think developer jobs are at any risk of,
there's this question of will AI replace software engineers,
which seems like a very popular one to us,
but I don't think it's happening.
What is happening as a software engineer,
we're gonna be doing a lot more of this work,
and there will still be some of these specialized roles
that in companies, security engineers exist,
but there will be fewer of these specialized roles
per 50 or 100 software engineers.
And finally, I think we're just gonna
select reinventing the wheel.
We're gonna see companies instead of building
your own platform solution that we've seen
so many companies do.
Like, there's this like open secret pretty much,
that in the tech industry, every single large company
re-invents React Native internally,
and I've seen it, we've done it at Uber,
it was kind of built because React Native wouldn't scale
or do whatever we wanted to do,
and it was built for a couple of years,
rolled out internally, quietly retired,
but it happens everywhere,
and I think this reinventing will just stop,
we'll see a lot more buying softwares
or adapting open source solutions.
So this is the new reality for software engineering practices,
more push for boring technology,
monoliths becoming more popular,
full stack becoming more popular,
more shift left, and rest reinventing the wheel.
I mean, and all of these are kind of,
I guess, practical or sensible,
so like, they don't seem too drastic,
I think the only one, you know,
we could get into argument is like,
monoliths versus microservices,
but outside of that, not that much.
And so, for the last part,
have we not seen some of this before, all this change?
And there is a bit of a deja vu with the dot-combust.
I talked with people who were working
during the dot-combust during 2001,
so there was a huge investment splurge
from like 1998 to like 2000
into all these companies like Webvan,
which promised a five minute grocery delivery,
and I guess, you know, they went bankrupt,
but like 20 years later,
we have Instacart, which promises
maybe a 30 minute or hour stop delivery,
but, and then there was a big, big, big bust,
especially in Silicon Valley,
people lost their jobs,
and it was really, really hard to get jobs.
And here's quotes from two people who were in that time.
So here's a quote from someone who graduated in 2000
saying, saying, I was laid off by the time I graduated.
Most of my friends' startups failed,
and we were all desperately looking for work.
She's a computer science major in the US.
We were competing with experienced engineers
who were also laid off and who started her sale.
Every day, we heard a big startup collapse.
It was really depressing.
And she said that we accepted anything,
part-time, unpaid internship,
just under the premise to build a resumes.
And she pivoted from software engineering
to consulting as a website developer,
and then into technical PM.
And this is Nivea Henry.
She's now a director of engineering at Spotify in New York.
And she told me that I think for like five or six years,
she worked at these like non-technical roles
as a software engineer,
because that was the only way she could get that job.
And she went back into software engineering later on.
And here's one learning from a dot-com bus
from someone who graduated there, a Google SRE.
And this person said that his learning was,
20 years later, always be on a revenue side
of whatever company you work for.
Make sure that they sell software
and don't use software to sell for something else.
I mean, this is a way to say that
if you work in a profit center,
your jobs are more safe during a time
where there's a focus on efficiency.
And going back to Ken back, I asked Ken back,
what's similar, he sees it in 2000s
where he already was working for 20 years at now,
and he listed a couple of things.
He's saying very interesting things.
Fixed specification and upfront design are back,
and iterated continuously are just happening less.
He's saying that there's more handoffs
between like developers handing up the QA
or someone else is a bit more like,
oh, we did our job, we did it perfectly.
It's not our problem now, we don't wanna be responsible.
Apparently he's saying he's seeing more documentation.
People just document more.
Again, potentially it's like say,
you know, we've done our jobs perfectly,
like don't bug us with this,
and let's frequent deployments to prod
and just longer feedback loops.
And we're kind of talking about why this is happening
and my theory is that there might be this thing,
like when you're working in an environment
where it's kind of stressful
and you're kind of fearing for your job and your manager,
not really, but you know,
you could be like go anytime if the company does well.
You wanna do a great job,
you wanna show that you're busy,
you're doing the best job,
so you're gonna document it, you'll hand it over,
and it's a bit of a less incentive to take risks,
to like, you know, take that bug that is not your stuff
that you might not be able to fix
even though the customers want it to fix,
because if you fail, it might make you look bad.
I'm not sure, but it seems,
Ken Beck said that after dot-com,
but the same thing happened,
like things slowed down, it went more into silos,
and it took a while for it to ease up.
So this, I just want to share, because it's so interesting.
And this is what I think,
I think there's a push to kind of become focused
or utilize or to make sure you look busy,
and then there's just no time for like,
I guess, Slack to do, when you're not as busy,
you actually have time to step in and do all these things.
But what is different in 2024 versus in 2000?
A few things are differently,
in 2000, the internet was growing rapidly.
Today, AI and large language models are growing rapidly,
and here's the investment,
the percentage of investment in all venture capital
going into AI by the middle of 2023,
one in $4, so 25% of all VC investments went into AI.
So clearly, you know, this is whatever the internet was,
it looks like the, in terms of investment,
looks like it's AI, so it's different.
But in 2000, the tech industry was much, much smaller.
Let me show you the seven largest
publicly traded tech companies in 2003.
And on this list, the ones that are boldest,
so like Google was number four,
Microsoft and Apple number six and seven,
the others were non-tech companies.
And in 2024, the top four are tech companies,
and actually five out of the seven are tech companies,
and they're way larger, by the way,
if we compare the Microsoft size back then,
even just the dollars,
tech industry has become massive, it's everywhere.
And I think the only question is,
how much larger will it become?
It's still growing, but at some point,
that growth will slow.
So, as a takeaways, what happened in the 2000s
after a big boom and then bust?
It's probably gonna happen now, to some extent.
We'll probably have, where are we seeing
the more doersphere planners?
When companies are cutting, are doing layoffs,
and software engineering,
engineering managers are often targeted a lot more,
because teams are being flattened.
I know some startups that let go
a lot of their middle management,
or director of engineering,
but they didn't touch software engineers,
because they know what they're the doers.
And so, for engineering managers,
becoming hands-on, and a lot of engineering managers
moving back to tech lead positions,
to be more doers than planners,
be seen less as an overhead.
We know, by the way, there's a reason for it,
the overhead, but in this scenario,
a lot of companies are kind of ignoring it.
There's a lot of doing more with less,
and a lot of full stack push,
and just using boring technology.
So, getting a job is more of a first,
so you just need to plan for it,
and here's some advice.
Your network is becoming a lot more important,
whether you have it or not,
if you have it, it's good to rely on.
If not, it's good to try to build it.
Referrals are more important.
Applying early is becoming important,
because there's so many applications coming in,
that sometimes, only the first,
I don't know, 50 or so are being looked at.
Investing unpaid time in interviews, like take-homes,
it's gonna be just the norm,
and it's becoming a bit of a numbers game.
You need to apply it to a lot of places to hear back.
One big change, I think,
and one thing that will help greatly,
is becoming more, I guess, business or product-minded,
which means, just understand the business model
of your company.
How are they making money, or are they even making money,
or can they become profitable at some point?
Build a relationship with your product manager,
who should be really good at understanding it,
and figuring out how we can transform that,
and then just talk with people outside of engineering,
customer support, research,
come up with ideas on how you can help the company.
The software engineers who can help their company
make more money, or spend less money,
are really, really valuable,
and I think most companies are gonna be looking for
for those kind of people.
I wrote an article about this,
called the product-minded software engineer,
just Google this, and I share a couple of more
advice there, insights.
And my final takeaway is just, in this environment,
I think we should all aim for career security,
not job security.
And this is a quote from someone,
I think, thank you for the clap,
and this is for, here's a quote from someone
who under one of my posts commented,
her name is Alain May, she said,
it's always worth preparing for the possible job cuts.
I was part, this is her saying,
part of layoffs in 2001 and two,
where there were four rounds, one per quarter,
and it took our organization from 180 people to 35 people.
And from that experience from laid off,
she also will also lay it off,
I learned that there's no such thing as job security.
I can either promise it as a manager,
because now she's a manager, or expect it as an employee.
What I can do, what all of us can do,
is have a career security, keep learning,
keep working on challenging projects at your company,
and keep working with great people.
And this is the most you can do,
and she said that after she got let go,
she did find different positions.
Again, hopefully this will not happen with most of us,
but it's good to keep in mind for this time.
So, what happened in 2000,
like to happen now, getting a job is more difficult,
becoming product minded is a good strategy,
and aiming for career security as well.
And to close with, I just want to mention
the elephant in the room.
And by the elephant in the room, obviously I mean AI.
I mean, I like to, I'm liking this term,
less and less artificial intelligence,
because it suggests that this,
I just like to say what it is,
this large language models, that's what we, under AI.
And I don't think that AI will replace developers.
There's this question going around,
it's really popular, it gets trending on social media,
but I do see that it makes developers
using tools more productive.
It makes me more productive when I get co-pilot,
or I use chat GPT for some of my brainstorming,
some of my patterning, picking up technologies
that I'm not as familiar with.
It really makes a big difference.
So, my suggestion is just make these tools your ally,
understand how they work.
You can Google an article from Steven Wolfram
called How Does Chat GPT Work?
In a few pages he explains it really well.
It's a very simple underlying technology
using a lot of data.
Try out the tools, co-pilot, codey,
any other thing that you can get your hands on,
and just get your own opinion on it,
improve your own workflows,
because it's just an assistant,
it's just like your ID, auto-complete is an assistant,
these tools will be an assistant.
And with these tools you probably can pick up
new frameworks faster, I certainly do,
and just avoid the hype.
So, see it for yourself, see what works.
There's way too much hype out there.
Most from people who don't write code with these tools
and don't know where it's helpful and where it's not,
make them your ally.
And finally, as closing, don't forget,
there's a lot of change right now,
but this change, even though for many of us
who have not been working professionally in 2000,
it's not happening before,
it has happened in industry before.
And even though it feels like there's some downward spiral,
actually what's happening is we're going back
to what it was like before, in 2018 or 2019,
or even in 2000, and you know,
the tech world was pretty awesome even then.
So, I believe the tech world will continue to be
a great and interesting industry to work in,
and even though it's way less predictable,
but this is what makes it part of the fun
and part of the challenge.
So, thank you for your time.
Thank you.
Thanks again.
Show a smile.
Thank you.
Thank you for being with us today.
Thanks again.
Thank you.
Thank you so much.
Thank you.
Thank you.
Thank you.
Thank you again, Sam.
This was an average Deaf person!
Thank you too.
Goodbye Sam.
See you again!
Bye-bye.
Hi.
Bye-bye.
