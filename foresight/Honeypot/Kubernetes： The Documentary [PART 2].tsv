start	end	text
0	7000	What would you say is the moral of the story?
7000	12000	Open Source is most successful when it's played as a positive sum game.
31000	34000	OpenShift started 2010.
34000	37000	There was this divide in the platform as a service base.
37000	40000	There was all the really simple, modern apps,
40000	42000	and then there was all the stuff that made money.
42000	44000	And kind of we came in from the perspective of like,
44000	46000	how do we make this stuff easier?
46000	49000	And so we were kind of getting tugged to the right on the complexity scale.
49000	52000	We started with simple apps in OpenShift.
52000	53000	But we were kind of thinking, you know,
53000	59000	what's the more general problem that would bring the whole spectrum of application authors?
59000	61000	We wanted to use Docker with an OpenShift,
61000	62000	but it's still not enough, right?
62000	65000	Because the Docker container is how you get a reproducible unit of software.
65000	67000	But how do you get those chunks coming together?
67000	69000	How do you take three bits of software and bring them together?
69000	73000	We'd reached out through one of our board members to Google,
73000	77000	you know, this container space is getting interesting.
77000	79000	Are you guys doing anything?
79000	84000	Is there anything that you're interested in that maybe we could work together on?
84000	88000	Clayton was looking to redesign the next version of OpenShift,
88000	92000	what became OpenShift 3 on top of Docker.
92000	95000	Which, you know, Docker was initially created by DocCloud
95000	101000	to serve as the basis for a multi-language platform as a service engine.
101000	106000	And OpenShift was a platform as a service open source project and Red Hat product.
106000	109000	We actually got a very quickly got an email back, which is,
109000	113000	oh, we're thinking about this project, we don't know.
113000	115000	We can kind of give you some details.
115000	117000	They kind of walked us through this demo.
117000	119000	They're calling it the 7-lit at the time.
119000	121000	They didn't really have a name.
121000	124000	And this is based on what we do internally at Google, at Borg.
124000	126000	And we're thinking about open sourcing it.
126000	128000	And I was interested.
128000	130000	It wasn't impressive.
130000	133000	The idea of working on something completely new, though,
133000	138000	like something that was from scratch, but was based on those ideas, was appealing.
138000	141000	So we were interested and we were excited.
141000	144000	But they're a little wishy-washy.
144000	148000	Google was like, well, we don't know whether we're going to be able to open source this or not.
148000	150000	We don't know.
150000	152000	It's a little, we're just not sure.
152000	156000	So we were like, probably our best bet is this Mesos thing.
156000	161000	I guess we're just going to announce that the next version of OpenShift will be Mesos and Docker.
161000	164000	And Mesos isn't really designed around Docker.
164000	167000	But it was, you know, it was the best option we had.
171000	181000	An internal phrase we use sometimes is uncomfortably exciting.
181000	184000	Meaning maybe we bit off more than we could chew.
184000	187000	It's hard to know that this is, in fact, the right journey.
187000	191000	We want to take these crown jewels and open source them.
191000	195000	And it's going to be okay because we'll make it up in volume, so to speak.
195000	197000	And that is kind of the essence of the strategy,
197000	199000	but the volume comes from managing the service.
199000	202000	So it was a pretty quick timeline.
202000	206000	We had the code available, but getting permission to release it as part of DockerCon
206000	209000	was made relatively late in that game.
209000	211000	So after we got the OK to open source,
211000	215000	now it was time to actually start getting the thing ready to release it.
215000	220000	Luckily, we engage with many people outside of Google.
220000	225000	And like Clayton from Red Hat, we wanted to work together.
225000	230000	Two weeks before DockerCon, my boss, Matt Hicks,
230000	232000	I think he texted me, he's like,
232000	235000	so Google just got back to us and they want to know if we're in or not.
235000	237000	And so we typed and we said, yeah, sure, we're in.
237000	241000	And so I think the next day they gave me private commit access.
241000	244000	I was either the first or the second external contributor to Kubernetes
244000	246000	in that sense because I had access.
246000	249000	There were a few others from a few other startups as well.
249000	253000	Clayton just showed up and he just came in and started just cleaning up.
253000	258000	He helped us get a lot of the code into proper Golang semantics
258000	260000	and we were like, yeah, we really do like this Clayton guy.
260000	261000	He's awesome.
261000	268000	And that really became a big part of what started that kind of open community working.
268000	270000	I can't wait to see all of you at DockerCon
270000	276000	and see the amazing, incredible, creative things that everybody in our community is doing
276000	278000	and everything that the people in this team are doing.
278000	279000	So thank you.
280000	286000	I believe we actually open-sourced the repos on the day of the DockerCon keynote
286000	289000	as part of that keynote was the announcement of Kubernetes publicly
289000	292000	and made the code available that day.
297000	301000	Now, we're releasing something called Kubernetes today.
301000	306000	It is yet another orchestration thing that sits on top.
306000	308000	That is not a bad thing, as Solomon said.
308000	311000	There are many of them because it's an exciting and important area
311000	313000	and an area where we need to get agreement.
313000	315000	And I'm not going to give a demo, sadly.
315000	318000	I only have 25 minutes, most of which is gone.
318000	324000	But Craig and Brendan are going to actually go through that later today at 2 o'clock.
324000	326000	You can go see that session.
326000	332000	Now, the reason to do an open-source release right now in this space
332000	334000	is because it's about the ideas.
334000	337000	So I'm going to talk a little bit about some of the ideas in it
337000	340000	and then you can get the details from Brendan and Craig.
340000	342000	This was it. This was our big moment.
342000	345000	We had something that we were pretty embarrassed about
345000	347000	in terms of its rudimentary state.
347000	349000	But that's when you're supposed to launch, right?
349000	354000	So we got out there and with Eric Brewer's support, we made our announcement.
354000	356000	We're doing orchestrations.
356000	360000	We want to have a manager that's going to have an API for managing the cluster.
360000	365000	We announced June 10th at DockerCon,
365000	367000	which is the day I created my Twitter account.
367000	369000	With these container technologies,
369000	372000	it's the first time that customers have really had an opportunity
372000	376000	to package up their application in a framework that's portable.
376000	382000	If I recall, there were five or six other container management systems announced the same day.
382000	385000	Some were proprietary and some were also open-source.
385000	386000	The same day.
386000	390000	Every big startup I felt like had a container orchestration project
390000	394000	and half of them were announced at DockerCon 2014.
394000	398000	We all split up and went to different sessions at that DockerCon
398000	401000	and we were texting each other back and forth like,
401000	402000	oh, Sonzo just released this.
402000	404000	Oh, Facebook just announced Tupperware.
404000	406000	Oh, it was very interesting.
406000	410000	There's two ballrooms and so it was Google announces Kubernetes,
410000	413000	startup announces container orchestration framework.
413000	416000	Facebook was there talking about Tupperware.
416000	418000	Heroku was there, I believe.
418000	423000	Some of the Heroku guys were there talking about how they were all in on Docker.
423000	426000	Startup announces Docker monitoring solutions,
426000	431000	startup announces new business around container-native orchestration and monitoring.
431000	432000	Everybody had the same idea.
432000	434000	This is not a brand new idea.
434000	443000	But there was a tension because Google announced this net new thing
443000	446000	that was almost more exciting than Docker.
446000	452000	And I remember being there and there were times where there were a few conversations I had with people
452000	454000	that was like, this is a little awkward.
454000	457000	Like Google's stealing Docker's thunder.
457000	461000	Docker's swarm project, lib swarm at that time.
461000	464000	It was a library for starting containers on a few machines.
464000	469000	Its commits went to zero, the week we announced, I think.
469000	471000	And that kind of set in motion some of that,
471000	474000	like that tension that played out over the next couple of years,
474000	479000	which was this young startup super excited about what they're doing.
479000	484000	Huge community traction, really captured developers' hearts and minds.
484000	487000	And then the project that I personally really believed in,
487000	489000	which I think Docker is great,
489000	492000	but like Kubernetes was about the application, it was about enterprise IT,
492000	496000	it was for us, it was very much the evolution of the bets we were making around
496000	500000	how to use streamlined building applications for everybody.
500000	508000	And that larger vision at DockerCon, I think it ran headlong into Docker inks, hopes and dreams.
508000	510000	And it got really awkward after that.
510000	514000	I think we are on the verge of something that's a major shift.
514000	518000	And I really look forward to making a great space together with all of you.
518000	520000	Thank you so much.
520000	524000	APPLAUSE
528000	533000	Google was in a war about cloud, and that is the most important thing for them.
533000	536000	I was working as an engineer with other engineers.
536000	539000	Engineers are not so much about corporate strategy and politics.
539000	542000	Most of them were really about tech merits
542000	545000	and about the quality of what we were building together.
545000	549000	There was no such thing as politics in the open source project.
549000	552000	There was corporate politics above,
552000	557000	and of course eventually it started crippling into the open source relationships.
558000	564000	To understand the way that Kubernetes and Docker Swarm and Mezos
564000	567000	were competing with each other back at this time,
567000	570000	I think that there are multiple layers to it.
570000	573000	But on a technical level, I think it's important to understand
573000	577000	the different philosophies that Kubernetes and Mezos and Docker Swarm
577000	579000	really brought to this problem space.
579000	583000	Kubernetes, our focus was on making sure that we presented
583000	588000	a really clean API that fit the way that we viewed the problem space
588000	591000	of being able to deal with scheduling containers
591000	593000	and work across a bunch of different computers.
593000	596000	Mezos, the focus was on the scheduler,
596000	599000	and Mezos had a very, very sophisticated scheduler
599000	603000	that had some really interesting qualities in terms of the way
603000	606000	that they distributed that scheduling problem and distributed work.
606000	609000	Docker Swarm, on the other hand, starting out,
609000	613000	they wanted to view a cluster of computers as one big computer.
613000	615000	And once you introduce networks,
615000	617000	once you introduce partial failure modes,
617000	619000	different scheduling constraints,
619000	624000	there ended up being a lot of capability sacrifices
624000	626000	that were made in Docker Swarm
626000	630000	to have that initial experience be as easy and simple as possible.
633000	636000	Kubernetes is what you would build if you had enough time
636000	638000	and experience.
638000	641000	I doubt anyone had the same level of experience that Google had.
647000	649000	I'm at CoreOS, and we have this thing called Fleet,
649000	653000	and we have our vision for building container orchestration.
653000	656000	We have another startup around the corner, Docker Inc.,
656000	660000	that has their own vision about container orchestration called Swarm,
660000	663000	and we also have an incumbent startup, Mesosphere.
663000	668000	That has a successful orchestration platform already out there
668000	670000	used by giant companies.
670000	673000	And so there's a new entrant.
673000	676000	There's this thing called Kubernetes, and what do we do about it?
676000	680000	Luckily, I was working at a startup that was open to new ideas,
680000	683000	and so I was just contributing at night time.
683000	687000	My contributions were about making sure that Kubernetes
687000	689000	worked well on top of CoreOS.
689000	693000	And at the same time, I noticed that I was the one speaking at meetups,
693000	696000	telling people, there's this new thing, here's how it works.
696000	698000	There was a tool called Flannel that came out
698000	701000	that made it really easy to implement this with Kubernetes.
701000	703000	There was another startup at the time, Kismatic.
703000	707000	I think Kismatic, Patrick Riley and Joseph Jax,
707000	709000	they knew that Kubernetes was probably going to be a thing
709000	711000	that was going to stick around for a little while.
711000	715000	And so Patrick and team put up the money to do the first KubeCon
715000	717000	here in San Francisco.
717000	719000	And they asked if I would emcee the conference
719000	723000	because a lot of people knew me from talking in the space.
723000	725000	So our next session before lunch,
725000	728000	we're going to talk to the Kubernetes core team.
728000	731000	And so now I'm on this stage at a single-track conference.
731000	734000	Maybe we have 300 or 400 people there,
734000	736000	but now people were showing up to say,
736000	738000	what is this Kubernetes thing that we keep hearing about
738000	740000	for the last couple of years?
740000	743000	And so I think the attraction to Google was,
743000	747000	who is this kind of crowned by the community spokesperson
747000	749000	for this thing we call Kubernetes,
749000	751000	this project that we've put it out.
751000	754000	I started to get a lot of opportunities from around the industry.
754000	757000	I remember the Google team was just like, hey, how about Google?
757000	760000	And I thought about it for a while, and it was a natural fit.
760000	764000	And I remember being honored to become like the voice of that project.
764000	767000	I was able to meet people where they were
767000	769000	and then show them what was next
769000	772000	and then invite them to kind of get involved
772000	774000	and invite them to contribute.
782000	784000	At the time Kubernetes was open sourced,
784000	788000	we didn't take it for granted that the thing we built
788000	791000	would automatically be successful.
794000	796000	That original release was really raw.
796000	798000	I mean, you know, it's there in the GitHub history.
798000	800000	You can go take a look at it.
800000	805000	There was a lot of duct tape and bailing wire holding it together.
805000	807000	So we set ourselves a really ambitious goal.
807000	809000	We want to GA this thing a year from now, right?
809000	812000	Okay, let's start working on 1.0.
812000	816000	I have never in my career worked so fast or so furious.
816000	818000	It's kind of like you just have the baby
818000	821000	and you just couldn't stop love that one.
821000	825000	And you never feel tired, put all the effort into that one.
825000	829000	You worry about sometimes maybe a little bit of a sense
829000	833000	about success or maybe in the right path.
833000	837000	In the first two years of the project,
837000	841000	I got 200,000 notifications from GitHub in my inbox.
841000	844000	The fact that we open sourced it so early
844000	847000	really invited people to get involved.
847000	850000	You have to learn hard to think about how to inspire people
850000	854000	outside of Google, outside of Red Hat to help.
857000	861000	At 1.0, it was going to be for web app style,
861000	864000	stateless, low-scale systems.
864000	865000	That's it.
865000	867000	Anything else we're not focusing on?
867000	869000	Backburner, take it off the plate.
869000	872000	How little can we get away with was our theme.
872000	874000	There's a lot of conversations in that first year
874000	878000	where it was the developer and application-focused mindset
878000	882000	kind of clashing with the how to build systems
882000	884000	that scale mindset.
884000	886000	We just had to draw the line about what was going to be done
886000	888000	and what was not going to be done.
888000	889000	So there was a lot not done.
889000	892000	There was this fear there was too complex.
892000	895000	Docker swarm was much simpler.
895000	897000	Mesos was more powerful.
897000	899000	It could scale to thousands of nodes.
899000	902000	And Kubernetes, I think at the time, was 100 nodes or something.
902000	904000	Andrew Speicher was kicking the tires of Kubernetes
904000	906000	right after we open sourced it
906000	909000	and concluded that it wasn't mature enough.
909000	910000	It didn't scale.
910000	912000	And Netflix chose Mesos.
912000	916000	And other large companies chose Mesos like Apple and Airbnb
916000	918000	because it was more mature.
918000	920000	It existed for a few years already
920000	924000	and it scaled to 10,000 instances.
927000	929000	If you want a technology to be ubiquitous,
929000	932000	if you want a technology to be used by everyone,
932000	934000	if you want a technology that you can actually
934000	936000	create that alloy that's stronger
936000	938000	than the contributions of any individual,
938000	941000	it needs to be held under open and free governance.
941000	943000	At the beginning, it was just a promise, right?
943000	945000	We will put this in a foundation.
945000	948000	The project was actually in a Google-owned GitHub org
948000	951000	and the Community Contributor License Agreement
951000	953000	was a Google Contributor License Agreement
953000	955000	and people had to basically give Google the right
955000	957000	to re-license the product.
957000	959000	That put off a lot of people.
959000	961000	As we started looking for partners to get involved,
961000	964000	the fact that the project was still dominated by Google,
964000	967000	despite us talking about it being open source,
967000	970000	it still gave folks a lot of pause.
970000	975000	Many large companies do not like their employees
975000	979000	signing a competitor's Contributor License Agreement.
979000	983000	That was the context where Craig went off
983000	986000	and did a lot of coalition building
986000	990000	to eventually form the Cloud Native Computing Foundation.
992000	997000	We set a hard milestone for 1.0 to be OSCON
997000	1002000	when we would announce 1.0 and also as it turns out CNCF.
1002000	1004000	It was probably the most stressful thing I've ever done
1004000	1008000	was trying to bootstrap and navigate the multi-vendor
1008000	1011000	interests in getting something like CNCF off the ground.
1011000	1014000	There was about six months of essentially like bootstrapping
1014000	1016000	work of trying to get this thing going.
1016000	1019000	It was announced June 2015 at OSCON.
1019000	1023000	It's clear that we need to start working more closely together as a community.
1023000	1026000	As we looked at the 1.0 point of Kubernetes,
1026000	1028000	as it's going production-ready,
1028000	1030000	as we're looking at the future of this project,
1030000	1033000	it was clear to us we had to take it to foundation.
1033000	1035000	My idea at the time was like,
1035000	1040000	I want to go build bridges with our competing orchestration.
1040000	1043000	Even though Mesos has opinion on something,
1043000	1045000	Kubernetes' opinion on something,
1045000	1047000	there's usually some common interest.
1047000	1051000	Maybe we could standardize how storage is attached to a container.
1051000	1053000	Let's make that work.
1053000	1058000	I convinced Ben Hyman to come on the TOC as we called it.
1058000	1060000	There was a bunch of other folks.
1060000	1063000	We had this good mix of folks from different overlapping
1063000	1066000	and competing technologies to start the organization.
1066000	1071000	We were able to secure a pretty rich base of support early out of the gate.
1071000	1076000	Getting that to happen was maybe the most critical piece to the project's success.
1076000	1078000	All the technology aside, without that,
1078000	1080000	I don't think it would have gone anywhere.
1080000	1082000	We believe it's going to take a whole community,
1082000	1084000	and with that in mind, with Linux Foundation
1084000	1087000	and a broad array of industry partners,
1087000	1090000	we're announcing the Cloud Native Computing Foundation today,
1090000	1094000	which will be charted to take Kubernetes and adjacent technologies,
1094000	1097000	harmonize them, and ultimately progress the agenda
1097000	1099000	of Cloud Native Computing for everybody.
1099000	1104000	APPLAUSE
1113000	1119000	We built the organization around Kubernetes in a very specific way.
1119000	1123000	This was work that was done by what we called the Bootstrap Steering Committee,
1123000	1128000	and that was the group that was early, early contributors to the project,
1128000	1132000	and then myself added to that to try to build what our governance would be.
1132000	1135000	Because they reached a point in 2016, 2017,
1135000	1139000	where it was not easy to figure out how to get something done,
1139000	1143000	and you just had to go ask a Googler but which Googler,
1143000	1146000	and that wasn't fair, it wasn't well documented.
1146000	1149000	The challenge then was how do you take this fragile community
1149000	1152000	where everybody felt a sense of ownership
1152000	1156000	and slide a sort of governance model underneath that?
1156000	1160000	If you want to build a distributed compute platform,
1160000	1165000	Conway's Law suggests that you need a distributed decision-making setup.
1165000	1168000	So we pushed very hard to have that distributed
1168000	1173000	and closer to the code than to a leader.
1173000	1177000	We saw this great inflection point of interest and engagement
1177000	1180000	because as we started moving things out to more open governance
1180000	1186000	and as we moved the copyright and intellectual property to the CNCF,
1186000	1189000	more larger companies were able to participate,
1189000	1196000	and at that point it really became an exercise in how to grow the next set of leaders
1196000	1201000	and taking the community as the piece that needed to be grown
1201000	1205000	more than anything else and nurtured more than anything else.
1211000	1214000	We didn't have a manager, actually,
1214000	1218000	even so Tim and I were in Mountain View at the time
1218000	1221000	and Craig, Joe and Brendan were in Seattle,
1221000	1225000	and we all reported to different managers for several months
1225000	1227000	while we were working things out.
1229000	1233000	My first time at Google was mid-February 2016
1233000	1235000	from a Kubernetes timeline.
1235000	1238000	The team was working on Kubernetes 1.2.
1238000	1243000	The thing that was obvious and clear is that they were on the edge of burnout.
1243000	1246000	Everybody had been working 16-hour days,
1246000	1248000	6 days a week for a long time.
1248000	1251000	It was like a 24-7 job.
1251000	1257000	People would ping you on Slack, on Git, on Twitter, customers calling,
1257000	1259000	the build is breaking, someone cannot come in.
1259000	1261000	The work actually never stops.
1261000	1266000	By the end of 2016 we were having between 700 and 1,000 people
1266000	1268000	contributing to each release.
1268000	1272000	It was clear that with the way we were structured,
1272000	1274000	we will fail.
1274000	1276000	We will burn ourselves.
1276000	1280000	Ken knew that what we were doing was not going to work in the long term.
1280000	1283000	It was great when it was five or six people.
1283000	1286000	She knew that she needed to grow this organization
1286000	1289000	if we were going to keep on the trajectory that we were on.
1289000	1292000	So I think at the first phase, coming in as a leader
1292000	1294000	and as a manager of that team,
1294000	1299000	I first wanted just to stabilize and make space for folks
1299000	1303000	and that idea that we are not going to solve things for the short term
1303000	1306000	but we are actually going to think about how it's going to be solved
1306000	1311000	from this point on was I think a critical point
1311000	1313000	at the success of Kubernetes.
1313000	1317000	That idea actually evolved later on to what we call sustainable success.
1317000	1321000	She was very deliberate about putting together the teams
1321000	1325000	and giving responsibilities to which site had which things
1325000	1327000	that they were responsible for
1327000	1329000	and how we were going to grow the team
1329000	1331000	just to get it back under control.
1331000	1336000	It was also time to focus a little bit on stability and predictability
1336000	1338000	and now we had real customers.
1338000	1342000	We had people who were actually using 1.0 in production,
1342000	1345000	big video games you might have played
1345000	1350000	and we needed a focus on making sure that we didn't screw them up.
1351000	1356000	We learned that Niantic was building Pokemon Go on GKE.
1356000	1359000	And so very quickly we got in a bunch of conversations
1359000	1362000	with the folks over at Niantic about how it was going,
1362000	1364000	what were they doing, what could we do to help them out,
1364000	1366000	how was Kubernetes fitting their problem.
1366000	1372000	They ran Pokemon Go on one big cluster,
1372000	1375000	which was exciting and terrifying.
1375000	1379000	Once it launched, they actually experienced 50 times
1379000	1383000	the load or the volume than what they expected.
1383000	1386000	We sort of went into, I won't say panic mode,
1386000	1389000	but near panic mode as we tried to figure out
1389000	1391000	how we were going to give them more headroom
1391000	1394000	because the game was just growing and growing and growing.
1394000	1398000	They were just pushing the limits of everything.
1398000	1400000	You are like an engineer on the team, you are on call,
1400000	1403000	we are like 24-7 managing those clusters.
1403000	1407000	We see the entire world going with their phones everywhere.
1407000	1411000	And in my head, all I'm seeing is like, please stop playing.
1411000	1413000	We are not ready for that.
1413000	1417000	What was amazing, that we actually were ready for that.
1417000	1419000	This was a huge deal.
1419000	1421000	We all felt great about it.
1421000	1423000	Definitely validation of what we were doing.
1423000	1425000	The idea that we were able to continue and grow
1425000	1431000	and see that game expand everywhere and meet the demand,
1431000	1435000	like this is why Kubernetes is a thing, right?
1435000	1439000	To build something, you are not really sure how it will scale,
1439000	1442000	but then you have this amazing foundation
1442000	1445000	that really helps you to get to that scale.
1451000	1453000	I hate the term the container wars,
1453000	1456000	but the debate about what were people going to use
1456000	1459000	was still very much going on.
1459000	1463000	Niantic took a big bet on Kubernetes,
1463000	1465000	but definitely there was a lot going on in the market.
1465000	1468000	You couldn't read a blog site
1468000	1471000	without running across a Docker versus Kubernetes.
1471000	1479000	The container wars began the day Kubernetes was announced at DockerCon.
1479000	1482000	And it was interesting because it didn't feel like a war in the beginning.
1482000	1485000	It felt like tension about what's on top.
1485000	1487000	The container wars were complicated by the fact
1487000	1490000	that there was also a fight over orchestration,
1490000	1493000	the things that managed containers above that.
1493000	1496000	There's a lot of value in being the top of the stack.
1496000	1500000	Look into any kind of marketing materials or website everywhere.
1500000	1503000	You're never going to find somebody who's proud of saying
1503000	1506000	that we are the little dot at the bottom of the stack
1506000	1507000	that you never think about.
1507000	1509000	Everybody wants to own the user experience.
1509000	1512000	Everybody wants to be on top of the value chain.
1512000	1517000	And this is the kind of race that happened during this Docker era
1517000	1521000	about who owns the developer experience, who owns the app's experience,
1521000	1524000	who owns the mindset of the engineers ultimately
1524000	1526000	because this is where the value really is
1526000	1528000	and this is what the people are going to buy.
1528000	1533000	People were fighting over what should be the dominant way to run containers,
1533000	1535000	how to define applications.
1535000	1539000	Both approaches had valid ideas.
1539000	1541000	I think the mistake that was made early on
1541000	1543000	is people thought there was going to be a zero sum game.
1543000	1548000	If you looked at Kubernetes at the time, it was layered.
1548000	1550000	Linux was at the bottom still.
1550000	1553000	Docker was the container runtime.
1553000	1555000	SCD is where we stored everything.
1555000	1558000	It looked like it was a big combination and collaboration
1558000	1560000	of the entire industry at the time.
1560000	1562000	But no one really treated it like that
1562000	1564000	and I think that was the missed opportunity.
1564000	1568000	So I think the tension was people felt like it was a zero sum game.
1568000	1570000	Whoever won the orchestration wars
1570000	1574000	would somehow win all the business and all the customers.
1574000	1577000	We couldn't have done Kubernetes without Docker.
1577000	1580000	It just would not have been a thing that would have worked out.
1580000	1583000	Something else would have happened.
1583000	1586000	And yet people wanted to make drama out of it.
1586000	1588000	The world loves drama
1588000	1592000	and I don't think there was nearly as much actual drama as people made out of it.
1592000	1596000	At the end of the day, everything eventually settled down
1596000	1599000	and CNCF, we brought in both container D and Rocket
1599000	1601000	under the same foundation
1601000	1606000	and we also pushed to standardize the image specification.
1606000	1608000	It became a standard.
1608000	1612000	For a good three years or four years,
1612000	1614000	every day was,
1614000	1618000	is Docker going to change to adopt Kubernetes?
1618000	1623000	Is AWS going to suddenly adopt Kubernetes?
1623000	1625000	DockerCon were like,
1625000	1629000	is someone going to change everything with an announcement?
1629000	1633000	And then one day Solomon called me and said,
1633000	1634000	we did it.
1634000	1637000	We built Docker on top of Kubernetes
1637000	1640000	and we're going to announce it at DockerCon in Copenhagen
1640000	1641000	week after next.
1641000	1642000	Can you be there?
1642000	1646000	Docker announced that they were going to start supporting Kubernetes
1646000	1650000	and DockerCon in addition to Docker Swarm.
1650000	1653000	They recognized that this was something that they couldn't ignore.
1653000	1657000	And so Brendan and I were there to say congratulations
1657000	1660000	and it was really a cool moment
1660000	1663000	where I finally felt like we stopped pulling against each other
1663000	1665000	and started pulling together.
1670000	1677000	2017, a lot of competitors embraced Kubernetes.
1677000	1679000	Mesos, Docker, Pivotal.
1679000	1682000	And really near the end of 2017,
1682000	1685000	Amazon launched a Kubernetes product.
1685000	1687000	Back then when joining Google even,
1687000	1691000	I never thought AWS would seriously have a Kubernetes offering.
1691000	1692000	For the longest time,
1692000	1694000	Amazon had been a holdout on this.
1694000	1696000	And so to see it come full circle where it's like,
1696000	1700000	have Amazon supporting it was one of the largest signals
1700000	1702000	that Kubernetes, at least for me,
1702000	1704000	that Kubernetes was really here to stay.
1704000	1707000	And now Kubernetes seems to be the de facto standard
1707000	1710000	across all cloud providers globally.
1710000	1715000	When we saw Mesospheres rebrand and embrace Kubernetes,
1715000	1718000	when we saw Docker start to introduce their own Kubernetes offerings,
1718000	1720000	it really kind of closed out that arc.
1720000	1723000	But there were a lot of highlights at every point of the journey
1723000	1725000	that were worth celebrating.
1725000	1727000	It was a phenomenal experience.
1727000	1731000	In the end, I think Kubernetes won in part because it had
1731000	1735000	a vast army of contributors behind it.
1735000	1739000	And it just kept marching along with a huge number of commits per day.
1739000	1743000	And that rate of change kind of trumps everything else.
1743000	1746000	Back then, most of the things that truly attracted people
1746000	1750000	who even knew the tech and who knew containers was the UX.
1750000	1752000	Yes, in a sense, Kubernetes managed to capture
1752000	1755000	the orchestration layer building on top of Docker.
1755000	1757000	But they never really captured the developer experience.
1757000	1760000	And the truth is, nobody really is but Docker right now.
1760000	1764000	And that's still, I think, one of the areas that there's a lot of things to do
1764000	1766000	and we're not done yet.
1766000	1769000	And Docker, as a company today, decided to focus on the developer experience
1769000	1771000	side of things for a good reason, I think.
1771000	1777000	I'm seeing Kubernetes being used in ways that surprise me and delight me
1777000	1781000	to see, like, wow, I hadn't even thought that that was something that we could do.
1781000	1786000	It's clear that Kubernetes is going to take on a life of its own
1786000	1792000	and go off and evolve beyond what any of us really imagined when we started out.
1792000	1794000	Things cannot repeat.
1794000	1800000	And I think we just lucky have that right time and right support.
1800000	1804000	The container wash has benefited from the fact that there was lots of VC dollars
1804000	1806000	fueling this race.
1806000	1809000	But the truth is, there was no zero sum game.
1809000	1814000	The best ideas from that race are still with us.
1814000	1816000	And they've consolidated now.
1816000	1820000	And they've consolidated so far into the latest checkpoint, which is Kubernetes.
1820000	1824000	But the truth is, there's going to be something that will place Kubernetes.
1824000	1826000	Maybe it's some serverless component.
1826000	1830000	Maybe it's a different way of thinking about these APIs and how they should fit together.
1830000	1834000	And typically, the higher you get gives freedom for the system underneath you
1834000	1837000	to also evolve and sometimes become simpler.
1837000	1843000	So I think this is just the latest checkpoint, but whatever war people were fighting,
1843000	1845000	there was nothing to actually fight.
1873000	1876000	Thank you.
