WEBVTT

00:00.000 --> 00:07.000
What would you say is the moral of the story?

00:07.000 --> 00:12.000
Open Source is most successful when it's played as a positive sum game.

00:31.000 --> 00:34.000
OpenShift started 2010.

00:34.000 --> 00:37.000
There was this divide in the platform as a service base.

00:37.000 --> 00:40.000
There was all the really simple, modern apps,

00:40.000 --> 00:42.000
and then there was all the stuff that made money.

00:42.000 --> 00:44.000
And kind of we came in from the perspective of like,

00:44.000 --> 00:46.000
how do we make this stuff easier?

00:46.000 --> 00:49.000
And so we were kind of getting tugged to the right on the complexity scale.

00:49.000 --> 00:52.000
We started with simple apps in OpenShift.

00:52.000 --> 00:53.000
But we were kind of thinking, you know,

00:53.000 --> 00:59.000
what's the more general problem that would bring the whole spectrum of application authors?

00:59.000 --> 01:01.000
We wanted to use Docker with an OpenShift,

01:01.000 --> 01:02.000
but it's still not enough, right?

01:02.000 --> 01:05.000
Because the Docker container is how you get a reproducible unit of software.

01:05.000 --> 01:07.000
But how do you get those chunks coming together?

01:07.000 --> 01:09.000
How do you take three bits of software and bring them together?

01:09.000 --> 01:13.000
We'd reached out through one of our board members to Google,

01:13.000 --> 01:17.000
you know, this container space is getting interesting.

01:17.000 --> 01:19.000
Are you guys doing anything?

01:19.000 --> 01:24.000
Is there anything that you're interested in that maybe we could work together on?

01:24.000 --> 01:28.000
Clayton was looking to redesign the next version of OpenShift,

01:28.000 --> 01:32.000
what became OpenShift 3 on top of Docker.

01:32.000 --> 01:35.000
Which, you know, Docker was initially created by DocCloud

01:35.000 --> 01:41.000
to serve as the basis for a multi-language platform as a service engine.

01:41.000 --> 01:46.000
And OpenShift was a platform as a service open source project and Red Hat product.

01:46.000 --> 01:49.000
We actually got a very quickly got an email back, which is,

01:49.000 --> 01:53.000
oh, we're thinking about this project, we don't know.

01:53.000 --> 01:55.000
We can kind of give you some details.

01:55.000 --> 01:57.000
They kind of walked us through this demo.

01:57.000 --> 01:59.000
They're calling it the 7-lit at the time.

01:59.000 --> 02:01.000
They didn't really have a name.

02:01.000 --> 02:04.000
And this is based on what we do internally at Google, at Borg.

02:04.000 --> 02:06.000
And we're thinking about open sourcing it.

02:06.000 --> 02:08.000
And I was interested.

02:08.000 --> 02:10.000
It wasn't impressive.

02:10.000 --> 02:13.000
The idea of working on something completely new, though,

02:13.000 --> 02:18.000
like something that was from scratch, but was based on those ideas, was appealing.

02:18.000 --> 02:21.000
So we were interested and we were excited.

02:21.000 --> 02:24.000
But they're a little wishy-washy.

02:24.000 --> 02:28.000
Google was like, well, we don't know whether we're going to be able to open source this or not.

02:28.000 --> 02:30.000
We don't know.

02:30.000 --> 02:32.000
It's a little, we're just not sure.

02:32.000 --> 02:36.000
So we were like, probably our best bet is this Mesos thing.

02:36.000 --> 02:41.000
I guess we're just going to announce that the next version of OpenShift will be Mesos and Docker.

02:41.000 --> 02:44.000
And Mesos isn't really designed around Docker.

02:44.000 --> 02:47.000
But it was, you know, it was the best option we had.

02:51.000 --> 03:01.000
An internal phrase we use sometimes is uncomfortably exciting.

03:01.000 --> 03:04.000
Meaning maybe we bit off more than we could chew.

03:04.000 --> 03:07.000
It's hard to know that this is, in fact, the right journey.

03:07.000 --> 03:11.000
We want to take these crown jewels and open source them.

03:11.000 --> 03:15.000
And it's going to be okay because we'll make it up in volume, so to speak.

03:15.000 --> 03:17.000
And that is kind of the essence of the strategy,

03:17.000 --> 03:19.000
but the volume comes from managing the service.

03:19.000 --> 03:22.000
So it was a pretty quick timeline.

03:22.000 --> 03:26.000
We had the code available, but getting permission to release it as part of DockerCon

03:26.000 --> 03:29.000
was made relatively late in that game.

03:29.000 --> 03:31.000
So after we got the OK to open source,

03:31.000 --> 03:35.000
now it was time to actually start getting the thing ready to release it.

03:35.000 --> 03:40.000
Luckily, we engage with many people outside of Google.

03:40.000 --> 03:45.000
And like Clayton from Red Hat, we wanted to work together.

03:45.000 --> 03:50.000
Two weeks before DockerCon, my boss, Matt Hicks,

03:50.000 --> 03:52.000
I think he texted me, he's like,

03:52.000 --> 03:55.000
so Google just got back to us and they want to know if we're in or not.

03:55.000 --> 03:57.000
And so we typed and we said, yeah, sure, we're in.

03:57.000 --> 04:01.000
And so I think the next day they gave me private commit access.

04:01.000 --> 04:04.000
I was either the first or the second external contributor to Kubernetes

04:04.000 --> 04:06.000
in that sense because I had access.

04:06.000 --> 04:09.000
There were a few others from a few other startups as well.

04:09.000 --> 04:13.000
Clayton just showed up and he just came in and started just cleaning up.

04:13.000 --> 04:18.000
He helped us get a lot of the code into proper Golang semantics

04:18.000 --> 04:20.000
and we were like, yeah, we really do like this Clayton guy.

04:20.000 --> 04:21.000
He's awesome.

04:21.000 --> 04:28.000
And that really became a big part of what started that kind of open community working.

04:28.000 --> 04:30.000
I can't wait to see all of you at DockerCon

04:30.000 --> 04:36.000
and see the amazing, incredible, creative things that everybody in our community is doing

04:36.000 --> 04:38.000
and everything that the people in this team are doing.

04:38.000 --> 04:39.000
So thank you.

04:40.000 --> 04:46.000
I believe we actually open-sourced the repos on the day of the DockerCon keynote

04:46.000 --> 04:49.000
as part of that keynote was the announcement of Kubernetes publicly

04:49.000 --> 04:52.000
and made the code available that day.

04:57.000 --> 05:01.000
Now, we're releasing something called Kubernetes today.

05:01.000 --> 05:06.000
It is yet another orchestration thing that sits on top.

05:06.000 --> 05:08.000
That is not a bad thing, as Solomon said.

05:08.000 --> 05:11.000
There are many of them because it's an exciting and important area

05:11.000 --> 05:13.000
and an area where we need to get agreement.

05:13.000 --> 05:15.000
And I'm not going to give a demo, sadly.

05:15.000 --> 05:18.000
I only have 25 minutes, most of which is gone.

05:18.000 --> 05:24.000
But Craig and Brendan are going to actually go through that later today at 2 o'clock.

05:24.000 --> 05:26.000
You can go see that session.

05:26.000 --> 05:32.000
Now, the reason to do an open-source release right now in this space

05:32.000 --> 05:34.000
is because it's about the ideas.

05:34.000 --> 05:37.000
So I'm going to talk a little bit about some of the ideas in it

05:37.000 --> 05:40.000
and then you can get the details from Brendan and Craig.

05:40.000 --> 05:42.000
This was it. This was our big moment.

05:42.000 --> 05:45.000
We had something that we were pretty embarrassed about

05:45.000 --> 05:47.000
in terms of its rudimentary state.

05:47.000 --> 05:49.000
But that's when you're supposed to launch, right?

05:49.000 --> 05:54.000
So we got out there and with Eric Brewer's support, we made our announcement.

05:54.000 --> 05:56.000
We're doing orchestrations.

05:56.000 --> 06:00.000
We want to have a manager that's going to have an API for managing the cluster.

06:00.000 --> 06:05.000
We announced June 10th at DockerCon,

06:05.000 --> 06:07.000
which is the day I created my Twitter account.

06:07.000 --> 06:09.000
With these container technologies,

06:09.000 --> 06:12.000
it's the first time that customers have really had an opportunity

06:12.000 --> 06:16.000
to package up their application in a framework that's portable.

06:16.000 --> 06:22.000
If I recall, there were five or six other container management systems announced the same day.

06:22.000 --> 06:25.000
Some were proprietary and some were also open-source.

06:25.000 --> 06:26.000
The same day.

06:26.000 --> 06:30.000
Every big startup I felt like had a container orchestration project

06:30.000 --> 06:34.000
and half of them were announced at DockerCon 2014.

06:34.000 --> 06:38.000
We all split up and went to different sessions at that DockerCon

06:38.000 --> 06:41.000
and we were texting each other back and forth like,

06:41.000 --> 06:42.000
oh, Sonzo just released this.

06:42.000 --> 06:44.000
Oh, Facebook just announced Tupperware.

06:44.000 --> 06:46.000
Oh, it was very interesting.

06:46.000 --> 06:50.000
There's two ballrooms and so it was Google announces Kubernetes,

06:50.000 --> 06:53.000
startup announces container orchestration framework.

06:53.000 --> 06:56.000
Facebook was there talking about Tupperware.

06:56.000 --> 06:58.000
Heroku was there, I believe.

06:58.000 --> 07:03.000
Some of the Heroku guys were there talking about how they were all in on Docker.

07:03.000 --> 07:06.000
Startup announces Docker monitoring solutions,

07:06.000 --> 07:11.000
startup announces new business around container-native orchestration and monitoring.

07:11.000 --> 07:12.000
Everybody had the same idea.

07:12.000 --> 07:14.000
This is not a brand new idea.

07:14.000 --> 07:23.000
But there was a tension because Google announced this net new thing

07:23.000 --> 07:26.000
that was almost more exciting than Docker.

07:26.000 --> 07:32.000
And I remember being there and there were times where there were a few conversations I had with people

07:32.000 --> 07:34.000
that was like, this is a little awkward.

07:34.000 --> 07:37.000
Like Google's stealing Docker's thunder.

07:37.000 --> 07:41.000
Docker's swarm project, lib swarm at that time.

07:41.000 --> 07:44.000
It was a library for starting containers on a few machines.

07:44.000 --> 07:49.000
Its commits went to zero, the week we announced, I think.

07:49.000 --> 07:51.000
And that kind of set in motion some of that,

07:51.000 --> 07:54.000
like that tension that played out over the next couple of years,

07:54.000 --> 07:59.000
which was this young startup super excited about what they're doing.

07:59.000 --> 08:04.000
Huge community traction, really captured developers' hearts and minds.

08:04.000 --> 08:07.000
And then the project that I personally really believed in,

08:07.000 --> 08:09.000
which I think Docker is great,

08:09.000 --> 08:12.000
but like Kubernetes was about the application, it was about enterprise IT,

08:12.000 --> 08:16.000
it was for us, it was very much the evolution of the bets we were making around

08:16.000 --> 08:20.000
how to use streamlined building applications for everybody.

08:20.000 --> 08:28.000
And that larger vision at DockerCon, I think it ran headlong into Docker inks, hopes and dreams.

08:28.000 --> 08:30.000
And it got really awkward after that.

08:30.000 --> 08:34.000
I think we are on the verge of something that's a major shift.

08:34.000 --> 08:38.000
And I really look forward to making a great space together with all of you.

08:38.000 --> 08:40.000
Thank you so much.

08:40.000 --> 08:44.000
APPLAUSE

08:48.000 --> 08:53.000
Google was in a war about cloud, and that is the most important thing for them.

08:53.000 --> 08:56.000
I was working as an engineer with other engineers.

08:56.000 --> 08:59.000
Engineers are not so much about corporate strategy and politics.

08:59.000 --> 09:02.000
Most of them were really about tech merits

09:02.000 --> 09:05.000
and about the quality of what we were building together.

09:05.000 --> 09:09.000
There was no such thing as politics in the open source project.

09:09.000 --> 09:12.000
There was corporate politics above,

09:12.000 --> 09:17.000
and of course eventually it started crippling into the open source relationships.

09:18.000 --> 09:24.000
To understand the way that Kubernetes and Docker Swarm and Mezos

09:24.000 --> 09:27.000
were competing with each other back at this time,

09:27.000 --> 09:30.000
I think that there are multiple layers to it.

09:30.000 --> 09:33.000
But on a technical level, I think it's important to understand

09:33.000 --> 09:37.000
the different philosophies that Kubernetes and Mezos and Docker Swarm

09:37.000 --> 09:39.000
really brought to this problem space.

09:39.000 --> 09:43.000
Kubernetes, our focus was on making sure that we presented

09:43.000 --> 09:48.000
a really clean API that fit the way that we viewed the problem space

09:48.000 --> 09:51.000
of being able to deal with scheduling containers

09:51.000 --> 09:53.000
and work across a bunch of different computers.

09:53.000 --> 09:56.000
Mezos, the focus was on the scheduler,

09:56.000 --> 09:59.000
and Mezos had a very, very sophisticated scheduler

09:59.000 --> 10:03.000
that had some really interesting qualities in terms of the way

10:03.000 --> 10:06.000
that they distributed that scheduling problem and distributed work.

10:06.000 --> 10:09.000
Docker Swarm, on the other hand, starting out,

10:09.000 --> 10:13.000
they wanted to view a cluster of computers as one big computer.

10:13.000 --> 10:15.000
And once you introduce networks,

10:15.000 --> 10:17.000
once you introduce partial failure modes,

10:17.000 --> 10:19.000
different scheduling constraints,

10:19.000 --> 10:24.000
there ended up being a lot of capability sacrifices

10:24.000 --> 10:26.000
that were made in Docker Swarm

10:26.000 --> 10:30.000
to have that initial experience be as easy and simple as possible.

10:33.000 --> 10:36.000
Kubernetes is what you would build if you had enough time

10:36.000 --> 10:38.000
and experience.

10:38.000 --> 10:41.000
I doubt anyone had the same level of experience that Google had.

10:47.000 --> 10:49.000
I'm at CoreOS, and we have this thing called Fleet,

10:49.000 --> 10:53.000
and we have our vision for building container orchestration.

10:53.000 --> 10:56.000
We have another startup around the corner, Docker Inc.,

10:56.000 --> 11:00.000
that has their own vision about container orchestration called Swarm,

11:00.000 --> 11:03.000
and we also have an incumbent startup, Mesosphere.

11:03.000 --> 11:08.000
That has a successful orchestration platform already out there

11:08.000 --> 11:10.000
used by giant companies.

11:10.000 --> 11:13.000
And so there's a new entrant.

11:13.000 --> 11:16.000
There's this thing called Kubernetes, and what do we do about it?

11:16.000 --> 11:20.000
Luckily, I was working at a startup that was open to new ideas,

11:20.000 --> 11:23.000
and so I was just contributing at night time.

11:23.000 --> 11:27.000
My contributions were about making sure that Kubernetes

11:27.000 --> 11:29.000
worked well on top of CoreOS.

11:29.000 --> 11:33.000
And at the same time, I noticed that I was the one speaking at meetups,

11:33.000 --> 11:36.000
telling people, there's this new thing, here's how it works.

11:36.000 --> 11:38.000
There was a tool called Flannel that came out

11:38.000 --> 11:41.000
that made it really easy to implement this with Kubernetes.

11:41.000 --> 11:43.000
There was another startup at the time, Kismatic.

11:43.000 --> 11:47.000
I think Kismatic, Patrick Riley and Joseph Jax,

11:47.000 --> 11:49.000
they knew that Kubernetes was probably going to be a thing

11:49.000 --> 11:51.000
that was going to stick around for a little while.

11:51.000 --> 11:55.000
And so Patrick and team put up the money to do the first KubeCon

11:55.000 --> 11:57.000
here in San Francisco.

11:57.000 --> 11:59.000
And they asked if I would emcee the conference

11:59.000 --> 12:03.000
because a lot of people knew me from talking in the space.

12:03.000 --> 12:05.000
So our next session before lunch,

12:05.000 --> 12:08.000
we're going to talk to the Kubernetes core team.

12:08.000 --> 12:11.000
And so now I'm on this stage at a single-track conference.

12:11.000 --> 12:14.000
Maybe we have 300 or 400 people there,

12:14.000 --> 12:16.000
but now people were showing up to say,

12:16.000 --> 12:18.000
what is this Kubernetes thing that we keep hearing about

12:18.000 --> 12:20.000
for the last couple of years?

12:20.000 --> 12:23.000
And so I think the attraction to Google was,

12:23.000 --> 12:27.000
who is this kind of crowned by the community spokesperson

12:27.000 --> 12:29.000
for this thing we call Kubernetes,

12:29.000 --> 12:31.000
this project that we've put it out.

12:31.000 --> 12:34.000
I started to get a lot of opportunities from around the industry.

12:34.000 --> 12:37.000
I remember the Google team was just like, hey, how about Google?

12:37.000 --> 12:40.000
And I thought about it for a while, and it was a natural fit.

12:40.000 --> 12:44.000
And I remember being honored to become like the voice of that project.

12:44.000 --> 12:47.000
I was able to meet people where they were

12:47.000 --> 12:49.000
and then show them what was next

12:49.000 --> 12:52.000
and then invite them to kind of get involved

12:52.000 --> 12:54.000
and invite them to contribute.

13:02.000 --> 13:04.000
At the time Kubernetes was open sourced,

13:04.000 --> 13:08.000
we didn't take it for granted that the thing we built

13:08.000 --> 13:11.000
would automatically be successful.

13:14.000 --> 13:16.000
That original release was really raw.

13:16.000 --> 13:18.000
I mean, you know, it's there in the GitHub history.

13:18.000 --> 13:20.000
You can go take a look at it.

13:20.000 --> 13:25.000
There was a lot of duct tape and bailing wire holding it together.

13:25.000 --> 13:27.000
So we set ourselves a really ambitious goal.

13:27.000 --> 13:29.000
We want to GA this thing a year from now, right?

13:29.000 --> 13:32.000
Okay, let's start working on 1.0.

13:32.000 --> 13:36.000
I have never in my career worked so fast or so furious.

13:36.000 --> 13:38.000
It's kind of like you just have the baby

13:38.000 --> 13:41.000
and you just couldn't stop love that one.

13:41.000 --> 13:45.000
And you never feel tired, put all the effort into that one.

13:45.000 --> 13:49.000
You worry about sometimes maybe a little bit of a sense

13:49.000 --> 13:53.000
about success or maybe in the right path.

13:53.000 --> 13:57.000
In the first two years of the project,

13:57.000 --> 14:01.000
I got 200,000 notifications from GitHub in my inbox.

14:01.000 --> 14:04.000
The fact that we open sourced it so early

14:04.000 --> 14:07.000
really invited people to get involved.

14:07.000 --> 14:10.000
You have to learn hard to think about how to inspire people

14:10.000 --> 14:14.000
outside of Google, outside of Red Hat to help.

14:17.000 --> 14:21.000
At 1.0, it was going to be for web app style,

14:21.000 --> 14:24.000
stateless, low-scale systems.

14:24.000 --> 14:25.000
That's it.

14:25.000 --> 14:27.000
Anything else we're not focusing on?

14:27.000 --> 14:29.000
Backburner, take it off the plate.

14:29.000 --> 14:32.000
How little can we get away with was our theme.

14:32.000 --> 14:34.000
There's a lot of conversations in that first year

14:34.000 --> 14:38.000
where it was the developer and application-focused mindset

14:38.000 --> 14:42.000
kind of clashing with the how to build systems

14:42.000 --> 14:44.000
that scale mindset.

14:44.000 --> 14:46.000
We just had to draw the line about what was going to be done

14:46.000 --> 14:48.000
and what was not going to be done.

14:48.000 --> 14:49.000
So there was a lot not done.

14:49.000 --> 14:52.000
There was this fear there was too complex.

14:52.000 --> 14:55.000
Docker swarm was much simpler.

14:55.000 --> 14:57.000
Mesos was more powerful.

14:57.000 --> 14:59.000
It could scale to thousands of nodes.

14:59.000 --> 15:02.000
And Kubernetes, I think at the time, was 100 nodes or something.

15:02.000 --> 15:04.000
Andrew Speicher was kicking the tires of Kubernetes

15:04.000 --> 15:06.000
right after we open sourced it

15:06.000 --> 15:09.000
and concluded that it wasn't mature enough.

15:09.000 --> 15:10.000
It didn't scale.

15:10.000 --> 15:12.000
And Netflix chose Mesos.

15:12.000 --> 15:16.000
And other large companies chose Mesos like Apple and Airbnb

15:16.000 --> 15:18.000
because it was more mature.

15:18.000 --> 15:20.000
It existed for a few years already

15:20.000 --> 15:24.000
and it scaled to 10,000 instances.

15:27.000 --> 15:29.000
If you want a technology to be ubiquitous,

15:29.000 --> 15:32.000
if you want a technology to be used by everyone,

15:32.000 --> 15:34.000
if you want a technology that you can actually

15:34.000 --> 15:36.000
create that alloy that's stronger

15:36.000 --> 15:38.000
than the contributions of any individual,

15:38.000 --> 15:41.000
it needs to be held under open and free governance.

15:41.000 --> 15:43.000
At the beginning, it was just a promise, right?

15:43.000 --> 15:45.000
We will put this in a foundation.

15:45.000 --> 15:48.000
The project was actually in a Google-owned GitHub org

15:48.000 --> 15:51.000
and the Community Contributor License Agreement

15:51.000 --> 15:53.000
was a Google Contributor License Agreement

15:53.000 --> 15:55.000
and people had to basically give Google the right

15:55.000 --> 15:57.000
to re-license the product.

15:57.000 --> 15:59.000
That put off a lot of people.

15:59.000 --> 16:01.000
As we started looking for partners to get involved,

16:01.000 --> 16:04.000
the fact that the project was still dominated by Google,

16:04.000 --> 16:07.000
despite us talking about it being open source,

16:07.000 --> 16:10.000
it still gave folks a lot of pause.

16:10.000 --> 16:15.000
Many large companies do not like their employees

16:15.000 --> 16:19.000
signing a competitor's Contributor License Agreement.

16:19.000 --> 16:23.000
That was the context where Craig went off

16:23.000 --> 16:26.000
and did a lot of coalition building

16:26.000 --> 16:30.000
to eventually form the Cloud Native Computing Foundation.

16:32.000 --> 16:37.000
We set a hard milestone for 1.0 to be OSCON

16:37.000 --> 16:42.000
when we would announce 1.0 and also as it turns out CNCF.

16:42.000 --> 16:44.000
It was probably the most stressful thing I've ever done

16:44.000 --> 16:48.000
was trying to bootstrap and navigate the multi-vendor

16:48.000 --> 16:51.000
interests in getting something like CNCF off the ground.

16:51.000 --> 16:54.000
There was about six months of essentially like bootstrapping

16:54.000 --> 16:56.000
work of trying to get this thing going.

16:56.000 --> 16:59.000
It was announced June 2015 at OSCON.

16:59.000 --> 17:03.000
It's clear that we need to start working more closely together as a community.

17:03.000 --> 17:06.000
As we looked at the 1.0 point of Kubernetes,

17:06.000 --> 17:08.000
as it's going production-ready,

17:08.000 --> 17:10.000
as we're looking at the future of this project,

17:10.000 --> 17:13.000
it was clear to us we had to take it to foundation.

17:13.000 --> 17:15.000
My idea at the time was like,

17:15.000 --> 17:20.000
I want to go build bridges with our competing orchestration.

17:20.000 --> 17:23.000
Even though Mesos has opinion on something,

17:23.000 --> 17:25.000
Kubernetes' opinion on something,

17:25.000 --> 17:27.000
there's usually some common interest.

17:27.000 --> 17:31.000
Maybe we could standardize how storage is attached to a container.

17:31.000 --> 17:33.000
Let's make that work.

17:33.000 --> 17:38.000
I convinced Ben Hyman to come on the TOC as we called it.

17:38.000 --> 17:40.000
There was a bunch of other folks.

17:40.000 --> 17:43.000
We had this good mix of folks from different overlapping

17:43.000 --> 17:46.000
and competing technologies to start the organization.

17:46.000 --> 17:51.000
We were able to secure a pretty rich base of support early out of the gate.

17:51.000 --> 17:56.000
Getting that to happen was maybe the most critical piece to the project's success.

17:56.000 --> 17:58.000
All the technology aside, without that,

17:58.000 --> 18:00.000
I don't think it would have gone anywhere.

18:00.000 --> 18:02.000
We believe it's going to take a whole community,

18:02.000 --> 18:04.000
and with that in mind, with Linux Foundation

18:04.000 --> 18:07.000
and a broad array of industry partners,

18:07.000 --> 18:10.000
we're announcing the Cloud Native Computing Foundation today,

18:10.000 --> 18:14.000
which will be charted to take Kubernetes and adjacent technologies,

18:14.000 --> 18:17.000
harmonize them, and ultimately progress the agenda

18:17.000 --> 18:19.000
of Cloud Native Computing for everybody.

18:19.000 --> 18:24.000
APPLAUSE

18:33.000 --> 18:39.000
We built the organization around Kubernetes in a very specific way.

18:39.000 --> 18:43.000
This was work that was done by what we called the Bootstrap Steering Committee,

18:43.000 --> 18:48.000
and that was the group that was early, early contributors to the project,

18:48.000 --> 18:52.000
and then myself added to that to try to build what our governance would be.

18:52.000 --> 18:55.000
Because they reached a point in 2016, 2017,

18:55.000 --> 18:59.000
where it was not easy to figure out how to get something done,

18:59.000 --> 19:03.000
and you just had to go ask a Googler but which Googler,

19:03.000 --> 19:06.000
and that wasn't fair, it wasn't well documented.

19:06.000 --> 19:09.000
The challenge then was how do you take this fragile community

19:09.000 --> 19:12.000
where everybody felt a sense of ownership

19:12.000 --> 19:16.000
and slide a sort of governance model underneath that?

19:16.000 --> 19:20.000
If you want to build a distributed compute platform,

19:20.000 --> 19:25.000
Conway's Law suggests that you need a distributed decision-making setup.

19:25.000 --> 19:28.000
So we pushed very hard to have that distributed

19:28.000 --> 19:33.000
and closer to the code than to a leader.

19:33.000 --> 19:37.000
We saw this great inflection point of interest and engagement

19:37.000 --> 19:40.000
because as we started moving things out to more open governance

19:40.000 --> 19:46.000
and as we moved the copyright and intellectual property to the CNCF,

19:46.000 --> 19:49.000
more larger companies were able to participate,

19:49.000 --> 19:56.000
and at that point it really became an exercise in how to grow the next set of leaders

19:56.000 --> 20:01.000
and taking the community as the piece that needed to be grown

20:01.000 --> 20:05.000
more than anything else and nurtured more than anything else.

20:11.000 --> 20:14.000
We didn't have a manager, actually,

20:14.000 --> 20:18.000
even so Tim and I were in Mountain View at the time

20:18.000 --> 20:21.000
and Craig, Joe and Brendan were in Seattle,

20:21.000 --> 20:25.000
and we all reported to different managers for several months

20:25.000 --> 20:27.000
while we were working things out.

20:29.000 --> 20:33.000
My first time at Google was mid-February 2016

20:33.000 --> 20:35.000
from a Kubernetes timeline.

20:35.000 --> 20:38.000
The team was working on Kubernetes 1.2.

20:38.000 --> 20:43.000
The thing that was obvious and clear is that they were on the edge of burnout.

20:43.000 --> 20:46.000
Everybody had been working 16-hour days,

20:46.000 --> 20:48.000
6 days a week for a long time.

20:48.000 --> 20:51.000
It was like a 24-7 job.

20:51.000 --> 20:57.000
People would ping you on Slack, on Git, on Twitter, customers calling,

20:57.000 --> 20:59.000
the build is breaking, someone cannot come in.

20:59.000 --> 21:01.000
The work actually never stops.

21:01.000 --> 21:06.000
By the end of 2016 we were having between 700 and 1,000 people

21:06.000 --> 21:08.000
contributing to each release.

21:08.000 --> 21:12.000
It was clear that with the way we were structured,

21:12.000 --> 21:14.000
we will fail.

21:14.000 --> 21:16.000
We will burn ourselves.

21:16.000 --> 21:20.000
Ken knew that what we were doing was not going to work in the long term.

21:20.000 --> 21:23.000
It was great when it was five or six people.

21:23.000 --> 21:26.000
She knew that she needed to grow this organization

21:26.000 --> 21:29.000
if we were going to keep on the trajectory that we were on.

21:29.000 --> 21:32.000
So I think at the first phase, coming in as a leader

21:32.000 --> 21:34.000
and as a manager of that team,

21:34.000 --> 21:39.000
I first wanted just to stabilize and make space for folks

21:39.000 --> 21:43.000
and that idea that we are not going to solve things for the short term

21:43.000 --> 21:46.000
but we are actually going to think about how it's going to be solved

21:46.000 --> 21:51.000
from this point on was I think a critical point

21:51.000 --> 21:53.000
at the success of Kubernetes.

21:53.000 --> 21:57.000
That idea actually evolved later on to what we call sustainable success.

21:57.000 --> 22:01.000
She was very deliberate about putting together the teams

22:01.000 --> 22:05.000
and giving responsibilities to which site had which things

22:05.000 --> 22:07.000
that they were responsible for

22:07.000 --> 22:09.000
and how we were going to grow the team

22:09.000 --> 22:11.000
just to get it back under control.

22:11.000 --> 22:16.000
It was also time to focus a little bit on stability and predictability

22:16.000 --> 22:18.000
and now we had real customers.

22:18.000 --> 22:22.000
We had people who were actually using 1.0 in production,

22:22.000 --> 22:25.000
big video games you might have played

22:25.000 --> 22:30.000
and we needed a focus on making sure that we didn't screw them up.

22:31.000 --> 22:36.000
We learned that Niantic was building Pokemon Go on GKE.

22:36.000 --> 22:39.000
And so very quickly we got in a bunch of conversations

22:39.000 --> 22:42.000
with the folks over at Niantic about how it was going,

22:42.000 --> 22:44.000
what were they doing, what could we do to help them out,

22:44.000 --> 22:46.000
how was Kubernetes fitting their problem.

22:46.000 --> 22:52.000
They ran Pokemon Go on one big cluster,

22:52.000 --> 22:55.000
which was exciting and terrifying.

22:55.000 --> 22:59.000
Once it launched, they actually experienced 50 times

22:59.000 --> 23:03.000
the load or the volume than what they expected.

23:03.000 --> 23:06.000
We sort of went into, I won't say panic mode,

23:06.000 --> 23:09.000
but near panic mode as we tried to figure out

23:09.000 --> 23:11.000
how we were going to give them more headroom

23:11.000 --> 23:14.000
because the game was just growing and growing and growing.

23:14.000 --> 23:18.000
They were just pushing the limits of everything.

23:18.000 --> 23:20.000
You are like an engineer on the team, you are on call,

23:20.000 --> 23:23.000
we are like 24-7 managing those clusters.

23:23.000 --> 23:27.000
We see the entire world going with their phones everywhere.

23:27.000 --> 23:31.000
And in my head, all I'm seeing is like, please stop playing.

23:31.000 --> 23:33.000
We are not ready for that.

23:33.000 --> 23:37.000
What was amazing, that we actually were ready for that.

23:37.000 --> 23:39.000
This was a huge deal.

23:39.000 --> 23:41.000
We all felt great about it.

23:41.000 --> 23:43.000
Definitely validation of what we were doing.

23:43.000 --> 23:45.000
The idea that we were able to continue and grow

23:45.000 --> 23:51.000
and see that game expand everywhere and meet the demand,

23:51.000 --> 23:55.000
like this is why Kubernetes is a thing, right?

23:55.000 --> 23:59.000
To build something, you are not really sure how it will scale,

23:59.000 --> 24:02.000
but then you have this amazing foundation

24:02.000 --> 24:05.000
that really helps you to get to that scale.

24:11.000 --> 24:13.000
I hate the term the container wars,

24:13.000 --> 24:16.000
but the debate about what were people going to use

24:16.000 --> 24:19.000
was still very much going on.

24:19.000 --> 24:23.000
Niantic took a big bet on Kubernetes,

24:23.000 --> 24:25.000
but definitely there was a lot going on in the market.

24:25.000 --> 24:28.000
You couldn't read a blog site

24:28.000 --> 24:31.000
without running across a Docker versus Kubernetes.

24:31.000 --> 24:39.000
The container wars began the day Kubernetes was announced at DockerCon.

24:39.000 --> 24:42.000
And it was interesting because it didn't feel like a war in the beginning.

24:42.000 --> 24:45.000
It felt like tension about what's on top.

24:45.000 --> 24:47.000
The container wars were complicated by the fact

24:47.000 --> 24:50.000
that there was also a fight over orchestration,

24:50.000 --> 24:53.000
the things that managed containers above that.

24:53.000 --> 24:56.000
There's a lot of value in being the top of the stack.

24:56.000 --> 25:00.000
Look into any kind of marketing materials or website everywhere.

25:00.000 --> 25:03.000
You're never going to find somebody who's proud of saying

25:03.000 --> 25:06.000
that we are the little dot at the bottom of the stack

25:06.000 --> 25:07.000
that you never think about.

25:07.000 --> 25:09.000
Everybody wants to own the user experience.

25:09.000 --> 25:12.000
Everybody wants to be on top of the value chain.

25:12.000 --> 25:17.000
And this is the kind of race that happened during this Docker era

25:17.000 --> 25:21.000
about who owns the developer experience, who owns the app's experience,

25:21.000 --> 25:24.000
who owns the mindset of the engineers ultimately

25:24.000 --> 25:26.000
because this is where the value really is

25:26.000 --> 25:28.000
and this is what the people are going to buy.

25:28.000 --> 25:33.000
People were fighting over what should be the dominant way to run containers,

25:33.000 --> 25:35.000
how to define applications.

25:35.000 --> 25:39.000
Both approaches had valid ideas.

25:39.000 --> 25:41.000
I think the mistake that was made early on

25:41.000 --> 25:43.000
is people thought there was going to be a zero sum game.

25:43.000 --> 25:48.000
If you looked at Kubernetes at the time, it was layered.

25:48.000 --> 25:50.000
Linux was at the bottom still.

25:50.000 --> 25:53.000
Docker was the container runtime.

25:53.000 --> 25:55.000
SCD is where we stored everything.

25:55.000 --> 25:58.000
It looked like it was a big combination and collaboration

25:58.000 --> 26:00.000
of the entire industry at the time.

26:00.000 --> 26:02.000
But no one really treated it like that

26:02.000 --> 26:04.000
and I think that was the missed opportunity.

26:04.000 --> 26:08.000
So I think the tension was people felt like it was a zero sum game.

26:08.000 --> 26:10.000
Whoever won the orchestration wars

26:10.000 --> 26:14.000
would somehow win all the business and all the customers.

26:14.000 --> 26:17.000
We couldn't have done Kubernetes without Docker.

26:17.000 --> 26:20.000
It just would not have been a thing that would have worked out.

26:20.000 --> 26:23.000
Something else would have happened.

26:23.000 --> 26:26.000
And yet people wanted to make drama out of it.

26:26.000 --> 26:28.000
The world loves drama

26:28.000 --> 26:32.000
and I don't think there was nearly as much actual drama as people made out of it.

26:32.000 --> 26:36.000
At the end of the day, everything eventually settled down

26:36.000 --> 26:39.000
and CNCF, we brought in both container D and Rocket

26:39.000 --> 26:41.000
under the same foundation

26:41.000 --> 26:46.000
and we also pushed to standardize the image specification.

26:46.000 --> 26:48.000
It became a standard.

26:48.000 --> 26:52.000
For a good three years or four years,

26:52.000 --> 26:54.000
every day was,

26:54.000 --> 26:58.000
is Docker going to change to adopt Kubernetes?

26:58.000 --> 27:03.000
Is AWS going to suddenly adopt Kubernetes?

27:03.000 --> 27:05.000
DockerCon were like,

27:05.000 --> 27:09.000
is someone going to change everything with an announcement?

27:09.000 --> 27:13.000
And then one day Solomon called me and said,

27:13.000 --> 27:14.000
we did it.

27:14.000 --> 27:17.000
We built Docker on top of Kubernetes

27:17.000 --> 27:20.000
and we're going to announce it at DockerCon in Copenhagen

27:20.000 --> 27:21.000
week after next.

27:21.000 --> 27:22.000
Can you be there?

27:22.000 --> 27:26.000
Docker announced that they were going to start supporting Kubernetes

27:26.000 --> 27:30.000
and DockerCon in addition to Docker Swarm.

27:30.000 --> 27:33.000
They recognized that this was something that they couldn't ignore.

27:33.000 --> 27:37.000
And so Brendan and I were there to say congratulations

27:37.000 --> 27:40.000
and it was really a cool moment

27:40.000 --> 27:43.000
where I finally felt like we stopped pulling against each other

27:43.000 --> 27:45.000
and started pulling together.

27:50.000 --> 27:57.000
2017, a lot of competitors embraced Kubernetes.

27:57.000 --> 27:59.000
Mesos, Docker, Pivotal.

27:59.000 --> 28:02.000
And really near the end of 2017,

28:02.000 --> 28:05.000
Amazon launched a Kubernetes product.

28:05.000 --> 28:07.000
Back then when joining Google even,

28:07.000 --> 28:11.000
I never thought AWS would seriously have a Kubernetes offering.

28:11.000 --> 28:12.000
For the longest time,

28:12.000 --> 28:14.000
Amazon had been a holdout on this.

28:14.000 --> 28:16.000
And so to see it come full circle where it's like,

28:16.000 --> 28:20.000
have Amazon supporting it was one of the largest signals

28:20.000 --> 28:22.000
that Kubernetes, at least for me,

28:22.000 --> 28:24.000
that Kubernetes was really here to stay.

28:24.000 --> 28:27.000
And now Kubernetes seems to be the de facto standard

28:27.000 --> 28:30.000
across all cloud providers globally.

28:30.000 --> 28:35.000
When we saw Mesospheres rebrand and embrace Kubernetes,

28:35.000 --> 28:38.000
when we saw Docker start to introduce their own Kubernetes offerings,

28:38.000 --> 28:40.000
it really kind of closed out that arc.

28:40.000 --> 28:43.000
But there were a lot of highlights at every point of the journey

28:43.000 --> 28:45.000
that were worth celebrating.

28:45.000 --> 28:47.000
It was a phenomenal experience.

28:47.000 --> 28:51.000
In the end, I think Kubernetes won in part because it had

28:51.000 --> 28:55.000
a vast army of contributors behind it.

28:55.000 --> 28:59.000
And it just kept marching along with a huge number of commits per day.

28:59.000 --> 29:03.000
And that rate of change kind of trumps everything else.

29:03.000 --> 29:06.000
Back then, most of the things that truly attracted people

29:06.000 --> 29:10.000
who even knew the tech and who knew containers was the UX.

29:10.000 --> 29:12.000
Yes, in a sense, Kubernetes managed to capture

29:12.000 --> 29:15.000
the orchestration layer building on top of Docker.

29:15.000 --> 29:17.000
But they never really captured the developer experience.

29:17.000 --> 29:20.000
And the truth is, nobody really is but Docker right now.

29:20.000 --> 29:24.000
And that's still, I think, one of the areas that there's a lot of things to do

29:24.000 --> 29:26.000
and we're not done yet.

29:26.000 --> 29:29.000
And Docker, as a company today, decided to focus on the developer experience

29:29.000 --> 29:31.000
side of things for a good reason, I think.

29:31.000 --> 29:37.000
I'm seeing Kubernetes being used in ways that surprise me and delight me

29:37.000 --> 29:41.000
to see, like, wow, I hadn't even thought that that was something that we could do.

29:41.000 --> 29:46.000
It's clear that Kubernetes is going to take on a life of its own

29:46.000 --> 29:52.000
and go off and evolve beyond what any of us really imagined when we started out.

29:52.000 --> 29:54.000
Things cannot repeat.

29:54.000 --> 30:00.000
And I think we just lucky have that right time and right support.

30:00.000 --> 30:04.000
The container wash has benefited from the fact that there was lots of VC dollars

30:04.000 --> 30:06.000
fueling this race.

30:06.000 --> 30:09.000
But the truth is, there was no zero sum game.

30:09.000 --> 30:14.000
The best ideas from that race are still with us.

30:14.000 --> 30:16.000
And they've consolidated now.

30:16.000 --> 30:20.000
And they've consolidated so far into the latest checkpoint, which is Kubernetes.

30:20.000 --> 30:24.000
But the truth is, there's going to be something that will place Kubernetes.

30:24.000 --> 30:26.000
Maybe it's some serverless component.

30:26.000 --> 30:30.000
Maybe it's a different way of thinking about these APIs and how they should fit together.

30:30.000 --> 30:34.000
And typically, the higher you get gives freedom for the system underneath you

30:34.000 --> 30:37.000
to also evolve and sometimes become simpler.

30:37.000 --> 30:43.000
So I think this is just the latest checkpoint, but whatever war people were fighting,

30:43.000 --> 30:45.000
there was nothing to actually fight.

31:13.000 --> 31:16.000
Thank you.

