1
00:00:00,000 --> 00:00:07,000
What would you say is the moral of the story?

2
00:00:07,000 --> 00:00:12,000
Open Source is most successful when it's played as a positive sum game.

3
00:00:31,000 --> 00:00:34,000
OpenShift started 2010.

4
00:00:34,000 --> 00:00:37,000
There was this divide in the platform as a service base.

5
00:00:37,000 --> 00:00:40,000
There was all the really simple, modern apps,

6
00:00:40,000 --> 00:00:42,000
and then there was all the stuff that made money.

7
00:00:42,000 --> 00:00:44,000
And kind of we came in from the perspective of like,

8
00:00:44,000 --> 00:00:46,000
how do we make this stuff easier?

9
00:00:46,000 --> 00:00:49,000
And so we were kind of getting tugged to the right on the complexity scale.

10
00:00:49,000 --> 00:00:52,000
We started with simple apps in OpenShift.

11
00:00:52,000 --> 00:00:53,000
But we were kind of thinking, you know,

12
00:00:53,000 --> 00:00:59,000
what's the more general problem that would bring the whole spectrum of application authors?

13
00:00:59,000 --> 00:01:01,000
We wanted to use Docker with an OpenShift,

14
00:01:01,000 --> 00:01:02,000
but it's still not enough, right?

15
00:01:02,000 --> 00:01:05,000
Because the Docker container is how you get a reproducible unit of software.

16
00:01:05,000 --> 00:01:07,000
But how do you get those chunks coming together?

17
00:01:07,000 --> 00:01:09,000
How do you take three bits of software and bring them together?

18
00:01:09,000 --> 00:01:13,000
We'd reached out through one of our board members to Google,

19
00:01:13,000 --> 00:01:17,000
you know, this container space is getting interesting.

20
00:01:17,000 --> 00:01:19,000
Are you guys doing anything?

21
00:01:19,000 --> 00:01:24,000
Is there anything that you're interested in that maybe we could work together on?

22
00:01:24,000 --> 00:01:28,000
Clayton was looking to redesign the next version of OpenShift,

23
00:01:28,000 --> 00:01:32,000
what became OpenShift 3 on top of Docker.

24
00:01:32,000 --> 00:01:35,000
Which, you know, Docker was initially created by DocCloud

25
00:01:35,000 --> 00:01:41,000
to serve as the basis for a multi-language platform as a service engine.

26
00:01:41,000 --> 00:01:46,000
And OpenShift was a platform as a service open source project and Red Hat product.

27
00:01:46,000 --> 00:01:49,000
We actually got a very quickly got an email back, which is,

28
00:01:49,000 --> 00:01:53,000
oh, we're thinking about this project, we don't know.

29
00:01:53,000 --> 00:01:55,000
We can kind of give you some details.

30
00:01:55,000 --> 00:01:57,000
They kind of walked us through this demo.

31
00:01:57,000 --> 00:01:59,000
They're calling it the 7-lit at the time.

32
00:01:59,000 --> 00:02:01,000
They didn't really have a name.

33
00:02:01,000 --> 00:02:04,000
And this is based on what we do internally at Google, at Borg.

34
00:02:04,000 --> 00:02:06,000
And we're thinking about open sourcing it.

35
00:02:06,000 --> 00:02:08,000
And I was interested.

36
00:02:08,000 --> 00:02:10,000
It wasn't impressive.

37
00:02:10,000 --> 00:02:13,000
The idea of working on something completely new, though,

38
00:02:13,000 --> 00:02:18,000
like something that was from scratch, but was based on those ideas, was appealing.

39
00:02:18,000 --> 00:02:21,000
So we were interested and we were excited.

40
00:02:21,000 --> 00:02:24,000
But they're a little wishy-washy.

41
00:02:24,000 --> 00:02:28,000
Google was like, well, we don't know whether we're going to be able to open source this or not.

42
00:02:28,000 --> 00:02:30,000
We don't know.

43
00:02:30,000 --> 00:02:32,000
It's a little, we're just not sure.

44
00:02:32,000 --> 00:02:36,000
So we were like, probably our best bet is this Mesos thing.

45
00:02:36,000 --> 00:02:41,000
I guess we're just going to announce that the next version of OpenShift will be Mesos and Docker.

46
00:02:41,000 --> 00:02:44,000
And Mesos isn't really designed around Docker.

47
00:02:44,000 --> 00:02:47,000
But it was, you know, it was the best option we had.

48
00:02:51,000 --> 00:03:01,000
An internal phrase we use sometimes is uncomfortably exciting.

49
00:03:01,000 --> 00:03:04,000
Meaning maybe we bit off more than we could chew.

50
00:03:04,000 --> 00:03:07,000
It's hard to know that this is, in fact, the right journey.

51
00:03:07,000 --> 00:03:11,000
We want to take these crown jewels and open source them.

52
00:03:11,000 --> 00:03:15,000
And it's going to be okay because we'll make it up in volume, so to speak.

53
00:03:15,000 --> 00:03:17,000
And that is kind of the essence of the strategy,

54
00:03:17,000 --> 00:03:19,000
but the volume comes from managing the service.

55
00:03:19,000 --> 00:03:22,000
So it was a pretty quick timeline.

56
00:03:22,000 --> 00:03:26,000
We had the code available, but getting permission to release it as part of DockerCon

57
00:03:26,000 --> 00:03:29,000
was made relatively late in that game.

58
00:03:29,000 --> 00:03:31,000
So after we got the OK to open source,

59
00:03:31,000 --> 00:03:35,000
now it was time to actually start getting the thing ready to release it.

60
00:03:35,000 --> 00:03:40,000
Luckily, we engage with many people outside of Google.

61
00:03:40,000 --> 00:03:45,000
And like Clayton from Red Hat, we wanted to work together.

62
00:03:45,000 --> 00:03:50,000
Two weeks before DockerCon, my boss, Matt Hicks,

63
00:03:50,000 --> 00:03:52,000
I think he texted me, he's like,

64
00:03:52,000 --> 00:03:55,000
so Google just got back to us and they want to know if we're in or not.

65
00:03:55,000 --> 00:03:57,000
And so we typed and we said, yeah, sure, we're in.

66
00:03:57,000 --> 00:04:01,000
And so I think the next day they gave me private commit access.

67
00:04:01,000 --> 00:04:04,000
I was either the first or the second external contributor to Kubernetes

68
00:04:04,000 --> 00:04:06,000
in that sense because I had access.

69
00:04:06,000 --> 00:04:09,000
There were a few others from a few other startups as well.

70
00:04:09,000 --> 00:04:13,000
Clayton just showed up and he just came in and started just cleaning up.

71
00:04:13,000 --> 00:04:18,000
He helped us get a lot of the code into proper Golang semantics

72
00:04:18,000 --> 00:04:20,000
and we were like, yeah, we really do like this Clayton guy.

73
00:04:20,000 --> 00:04:21,000
He's awesome.

74
00:04:21,000 --> 00:04:28,000
And that really became a big part of what started that kind of open community working.

75
00:04:28,000 --> 00:04:30,000
I can't wait to see all of you at DockerCon

76
00:04:30,000 --> 00:04:36,000
and see the amazing, incredible, creative things that everybody in our community is doing

77
00:04:36,000 --> 00:04:38,000
and everything that the people in this team are doing.

78
00:04:38,000 --> 00:04:39,000
So thank you.

79
00:04:40,000 --> 00:04:46,000
I believe we actually open-sourced the repos on the day of the DockerCon keynote

80
00:04:46,000 --> 00:04:49,000
as part of that keynote was the announcement of Kubernetes publicly

81
00:04:49,000 --> 00:04:52,000
and made the code available that day.

82
00:04:57,000 --> 00:05:01,000
Now, we're releasing something called Kubernetes today.

83
00:05:01,000 --> 00:05:06,000
It is yet another orchestration thing that sits on top.

84
00:05:06,000 --> 00:05:08,000
That is not a bad thing, as Solomon said.

85
00:05:08,000 --> 00:05:11,000
There are many of them because it's an exciting and important area

86
00:05:11,000 --> 00:05:13,000
and an area where we need to get agreement.

87
00:05:13,000 --> 00:05:15,000
And I'm not going to give a demo, sadly.

88
00:05:15,000 --> 00:05:18,000
I only have 25 minutes, most of which is gone.

89
00:05:18,000 --> 00:05:24,000
But Craig and Brendan are going to actually go through that later today at 2 o'clock.

90
00:05:24,000 --> 00:05:26,000
You can go see that session.

91
00:05:26,000 --> 00:05:32,000
Now, the reason to do an open-source release right now in this space

92
00:05:32,000 --> 00:05:34,000
is because it's about the ideas.

93
00:05:34,000 --> 00:05:37,000
So I'm going to talk a little bit about some of the ideas in it

94
00:05:37,000 --> 00:05:40,000
and then you can get the details from Brendan and Craig.

95
00:05:40,000 --> 00:05:42,000
This was it. This was our big moment.

96
00:05:42,000 --> 00:05:45,000
We had something that we were pretty embarrassed about

97
00:05:45,000 --> 00:05:47,000
in terms of its rudimentary state.

98
00:05:47,000 --> 00:05:49,000
But that's when you're supposed to launch, right?

99
00:05:49,000 --> 00:05:54,000
So we got out there and with Eric Brewer's support, we made our announcement.

100
00:05:54,000 --> 00:05:56,000
We're doing orchestrations.

101
00:05:56,000 --> 00:06:00,000
We want to have a manager that's going to have an API for managing the cluster.

102
00:06:00,000 --> 00:06:05,000
We announced June 10th at DockerCon,

103
00:06:05,000 --> 00:06:07,000
which is the day I created my Twitter account.

104
00:06:07,000 --> 00:06:09,000
With these container technologies,

105
00:06:09,000 --> 00:06:12,000
it's the first time that customers have really had an opportunity

106
00:06:12,000 --> 00:06:16,000
to package up their application in a framework that's portable.

107
00:06:16,000 --> 00:06:22,000
If I recall, there were five or six other container management systems announced the same day.

108
00:06:22,000 --> 00:06:25,000
Some were proprietary and some were also open-source.

109
00:06:25,000 --> 00:06:26,000
The same day.

110
00:06:26,000 --> 00:06:30,000
Every big startup I felt like had a container orchestration project

111
00:06:30,000 --> 00:06:34,000
and half of them were announced at DockerCon 2014.

112
00:06:34,000 --> 00:06:38,000
We all split up and went to different sessions at that DockerCon

113
00:06:38,000 --> 00:06:41,000
and we were texting each other back and forth like,

114
00:06:41,000 --> 00:06:42,000
oh, Sonzo just released this.

115
00:06:42,000 --> 00:06:44,000
Oh, Facebook just announced Tupperware.

116
00:06:44,000 --> 00:06:46,000
Oh, it was very interesting.

117
00:06:46,000 --> 00:06:50,000
There's two ballrooms and so it was Google announces Kubernetes,

118
00:06:50,000 --> 00:06:53,000
startup announces container orchestration framework.

119
00:06:53,000 --> 00:06:56,000
Facebook was there talking about Tupperware.

120
00:06:56,000 --> 00:06:58,000
Heroku was there, I believe.

121
00:06:58,000 --> 00:07:03,000
Some of the Heroku guys were there talking about how they were all in on Docker.

122
00:07:03,000 --> 00:07:06,000
Startup announces Docker monitoring solutions,

123
00:07:06,000 --> 00:07:11,000
startup announces new business around container-native orchestration and monitoring.

124
00:07:11,000 --> 00:07:12,000
Everybody had the same idea.

125
00:07:12,000 --> 00:07:14,000
This is not a brand new idea.

126
00:07:14,000 --> 00:07:23,000
But there was a tension because Google announced this net new thing

127
00:07:23,000 --> 00:07:26,000
that was almost more exciting than Docker.

128
00:07:26,000 --> 00:07:32,000
And I remember being there and there were times where there were a few conversations I had with people

129
00:07:32,000 --> 00:07:34,000
that was like, this is a little awkward.

130
00:07:34,000 --> 00:07:37,000
Like Google's stealing Docker's thunder.

131
00:07:37,000 --> 00:07:41,000
Docker's swarm project, lib swarm at that time.

132
00:07:41,000 --> 00:07:44,000
It was a library for starting containers on a few machines.

133
00:07:44,000 --> 00:07:49,000
Its commits went to zero, the week we announced, I think.

134
00:07:49,000 --> 00:07:51,000
And that kind of set in motion some of that,

135
00:07:51,000 --> 00:07:54,000
like that tension that played out over the next couple of years,

136
00:07:54,000 --> 00:07:59,000
which was this young startup super excited about what they're doing.

137
00:07:59,000 --> 00:08:04,000
Huge community traction, really captured developers' hearts and minds.

138
00:08:04,000 --> 00:08:07,000
And then the project that I personally really believed in,

139
00:08:07,000 --> 00:08:09,000
which I think Docker is great,

140
00:08:09,000 --> 00:08:12,000
but like Kubernetes was about the application, it was about enterprise IT,

141
00:08:12,000 --> 00:08:16,000
it was for us, it was very much the evolution of the bets we were making around

142
00:08:16,000 --> 00:08:20,000
how to use streamlined building applications for everybody.

143
00:08:20,000 --> 00:08:28,000
And that larger vision at DockerCon, I think it ran headlong into Docker inks, hopes and dreams.

144
00:08:28,000 --> 00:08:30,000
And it got really awkward after that.

145
00:08:30,000 --> 00:08:34,000
I think we are on the verge of something that's a major shift.

146
00:08:34,000 --> 00:08:38,000
And I really look forward to making a great space together with all of you.

147
00:08:38,000 --> 00:08:40,000
Thank you so much.

148
00:08:40,000 --> 00:08:44,000
APPLAUSE

149
00:08:48,000 --> 00:08:53,000
Google was in a war about cloud, and that is the most important thing for them.

150
00:08:53,000 --> 00:08:56,000
I was working as an engineer with other engineers.

151
00:08:56,000 --> 00:08:59,000
Engineers are not so much about corporate strategy and politics.

152
00:08:59,000 --> 00:09:02,000
Most of them were really about tech merits

153
00:09:02,000 --> 00:09:05,000
and about the quality of what we were building together.

154
00:09:05,000 --> 00:09:09,000
There was no such thing as politics in the open source project.

155
00:09:09,000 --> 00:09:12,000
There was corporate politics above,

156
00:09:12,000 --> 00:09:17,000
and of course eventually it started crippling into the open source relationships.

157
00:09:18,000 --> 00:09:24,000
To understand the way that Kubernetes and Docker Swarm and Mezos

158
00:09:24,000 --> 00:09:27,000
were competing with each other back at this time,

159
00:09:27,000 --> 00:09:30,000
I think that there are multiple layers to it.

160
00:09:30,000 --> 00:09:33,000
But on a technical level, I think it's important to understand

161
00:09:33,000 --> 00:09:37,000
the different philosophies that Kubernetes and Mezos and Docker Swarm

162
00:09:37,000 --> 00:09:39,000
really brought to this problem space.

163
00:09:39,000 --> 00:09:43,000
Kubernetes, our focus was on making sure that we presented

164
00:09:43,000 --> 00:09:48,000
a really clean API that fit the way that we viewed the problem space

165
00:09:48,000 --> 00:09:51,000
of being able to deal with scheduling containers

166
00:09:51,000 --> 00:09:53,000
and work across a bunch of different computers.

167
00:09:53,000 --> 00:09:56,000
Mezos, the focus was on the scheduler,

168
00:09:56,000 --> 00:09:59,000
and Mezos had a very, very sophisticated scheduler

169
00:09:59,000 --> 00:10:03,000
that had some really interesting qualities in terms of the way

170
00:10:03,000 --> 00:10:06,000
that they distributed that scheduling problem and distributed work.

171
00:10:06,000 --> 00:10:09,000
Docker Swarm, on the other hand, starting out,

172
00:10:09,000 --> 00:10:13,000
they wanted to view a cluster of computers as one big computer.

173
00:10:13,000 --> 00:10:15,000
And once you introduce networks,

174
00:10:15,000 --> 00:10:17,000
once you introduce partial failure modes,

175
00:10:17,000 --> 00:10:19,000
different scheduling constraints,

176
00:10:19,000 --> 00:10:24,000
there ended up being a lot of capability sacrifices

177
00:10:24,000 --> 00:10:26,000
that were made in Docker Swarm

178
00:10:26,000 --> 00:10:30,000
to have that initial experience be as easy and simple as possible.

179
00:10:33,000 --> 00:10:36,000
Kubernetes is what you would build if you had enough time

180
00:10:36,000 --> 00:10:38,000
and experience.

181
00:10:38,000 --> 00:10:41,000
I doubt anyone had the same level of experience that Google had.

182
00:10:47,000 --> 00:10:49,000
I'm at CoreOS, and we have this thing called Fleet,

183
00:10:49,000 --> 00:10:53,000
and we have our vision for building container orchestration.

184
00:10:53,000 --> 00:10:56,000
We have another startup around the corner, Docker Inc.,

185
00:10:56,000 --> 00:11:00,000
that has their own vision about container orchestration called Swarm,

186
00:11:00,000 --> 00:11:03,000
and we also have an incumbent startup, Mesosphere.

187
00:11:03,000 --> 00:11:08,000
That has a successful orchestration platform already out there

188
00:11:08,000 --> 00:11:10,000
used by giant companies.

189
00:11:10,000 --> 00:11:13,000
And so there's a new entrant.

190
00:11:13,000 --> 00:11:16,000
There's this thing called Kubernetes, and what do we do about it?

191
00:11:16,000 --> 00:11:20,000
Luckily, I was working at a startup that was open to new ideas,

192
00:11:20,000 --> 00:11:23,000
and so I was just contributing at night time.

193
00:11:23,000 --> 00:11:27,000
My contributions were about making sure that Kubernetes

194
00:11:27,000 --> 00:11:29,000
worked well on top of CoreOS.

195
00:11:29,000 --> 00:11:33,000
And at the same time, I noticed that I was the one speaking at meetups,

196
00:11:33,000 --> 00:11:36,000
telling people, there's this new thing, here's how it works.

197
00:11:36,000 --> 00:11:38,000
There was a tool called Flannel that came out

198
00:11:38,000 --> 00:11:41,000
that made it really easy to implement this with Kubernetes.

199
00:11:41,000 --> 00:11:43,000
There was another startup at the time, Kismatic.

200
00:11:43,000 --> 00:11:47,000
I think Kismatic, Patrick Riley and Joseph Jax,

201
00:11:47,000 --> 00:11:49,000
they knew that Kubernetes was probably going to be a thing

202
00:11:49,000 --> 00:11:51,000
that was going to stick around for a little while.

203
00:11:51,000 --> 00:11:55,000
And so Patrick and team put up the money to do the first KubeCon

204
00:11:55,000 --> 00:11:57,000
here in San Francisco.

205
00:11:57,000 --> 00:11:59,000
And they asked if I would emcee the conference

206
00:11:59,000 --> 00:12:03,000
because a lot of people knew me from talking in the space.

207
00:12:03,000 --> 00:12:05,000
So our next session before lunch,

208
00:12:05,000 --> 00:12:08,000
we're going to talk to the Kubernetes core team.

209
00:12:08,000 --> 00:12:11,000
And so now I'm on this stage at a single-track conference.

210
00:12:11,000 --> 00:12:14,000
Maybe we have 300 or 400 people there,

211
00:12:14,000 --> 00:12:16,000
but now people were showing up to say,

212
00:12:16,000 --> 00:12:18,000
what is this Kubernetes thing that we keep hearing about

213
00:12:18,000 --> 00:12:20,000
for the last couple of years?

214
00:12:20,000 --> 00:12:23,000
And so I think the attraction to Google was,

215
00:12:23,000 --> 00:12:27,000
who is this kind of crowned by the community spokesperson

216
00:12:27,000 --> 00:12:29,000
for this thing we call Kubernetes,

217
00:12:29,000 --> 00:12:31,000
this project that we've put it out.

218
00:12:31,000 --> 00:12:34,000
I started to get a lot of opportunities from around the industry.

219
00:12:34,000 --> 00:12:37,000
I remember the Google team was just like, hey, how about Google?

220
00:12:37,000 --> 00:12:40,000
And I thought about it for a while, and it was a natural fit.

221
00:12:40,000 --> 00:12:44,000
And I remember being honored to become like the voice of that project.

222
00:12:44,000 --> 00:12:47,000
I was able to meet people where they were

223
00:12:47,000 --> 00:12:49,000
and then show them what was next

224
00:12:49,000 --> 00:12:52,000
and then invite them to kind of get involved

225
00:12:52,000 --> 00:12:54,000
and invite them to contribute.

226
00:13:02,000 --> 00:13:04,000
At the time Kubernetes was open sourced,

227
00:13:04,000 --> 00:13:08,000
we didn't take it for granted that the thing we built

228
00:13:08,000 --> 00:13:11,000
would automatically be successful.

229
00:13:14,000 --> 00:13:16,000
That original release was really raw.

230
00:13:16,000 --> 00:13:18,000
I mean, you know, it's there in the GitHub history.

231
00:13:18,000 --> 00:13:20,000
You can go take a look at it.

232
00:13:20,000 --> 00:13:25,000
There was a lot of duct tape and bailing wire holding it together.

233
00:13:25,000 --> 00:13:27,000
So we set ourselves a really ambitious goal.

234
00:13:27,000 --> 00:13:29,000
We want to GA this thing a year from now, right?

235
00:13:29,000 --> 00:13:32,000
Okay, let's start working on 1.0.

236
00:13:32,000 --> 00:13:36,000
I have never in my career worked so fast or so furious.

237
00:13:36,000 --> 00:13:38,000
It's kind of like you just have the baby

238
00:13:38,000 --> 00:13:41,000
and you just couldn't stop love that one.

239
00:13:41,000 --> 00:13:45,000
And you never feel tired, put all the effort into that one.

240
00:13:45,000 --> 00:13:49,000
You worry about sometimes maybe a little bit of a sense

241
00:13:49,000 --> 00:13:53,000
about success or maybe in the right path.

242
00:13:53,000 --> 00:13:57,000
In the first two years of the project,

243
00:13:57,000 --> 00:14:01,000
I got 200,000 notifications from GitHub in my inbox.

244
00:14:01,000 --> 00:14:04,000
The fact that we open sourced it so early

245
00:14:04,000 --> 00:14:07,000
really invited people to get involved.

246
00:14:07,000 --> 00:14:10,000
You have to learn hard to think about how to inspire people

247
00:14:10,000 --> 00:14:14,000
outside of Google, outside of Red Hat to help.

248
00:14:17,000 --> 00:14:21,000
At 1.0, it was going to be for web app style,

249
00:14:21,000 --> 00:14:24,000
stateless, low-scale systems.

250
00:14:24,000 --> 00:14:25,000
That's it.

251
00:14:25,000 --> 00:14:27,000
Anything else we're not focusing on?

252
00:14:27,000 --> 00:14:29,000
Backburner, take it off the plate.

253
00:14:29,000 --> 00:14:32,000
How little can we get away with was our theme.

254
00:14:32,000 --> 00:14:34,000
There's a lot of conversations in that first year

255
00:14:34,000 --> 00:14:38,000
where it was the developer and application-focused mindset

256
00:14:38,000 --> 00:14:42,000
kind of clashing with the how to build systems

257
00:14:42,000 --> 00:14:44,000
that scale mindset.

258
00:14:44,000 --> 00:14:46,000
We just had to draw the line about what was going to be done

259
00:14:46,000 --> 00:14:48,000
and what was not going to be done.

260
00:14:48,000 --> 00:14:49,000
So there was a lot not done.

261
00:14:49,000 --> 00:14:52,000
There was this fear there was too complex.

262
00:14:52,000 --> 00:14:55,000
Docker swarm was much simpler.

263
00:14:55,000 --> 00:14:57,000
Mesos was more powerful.

264
00:14:57,000 --> 00:14:59,000
It could scale to thousands of nodes.

265
00:14:59,000 --> 00:15:02,000
And Kubernetes, I think at the time, was 100 nodes or something.

266
00:15:02,000 --> 00:15:04,000
Andrew Speicher was kicking the tires of Kubernetes

267
00:15:04,000 --> 00:15:06,000
right after we open sourced it

268
00:15:06,000 --> 00:15:09,000
and concluded that it wasn't mature enough.

269
00:15:09,000 --> 00:15:10,000
It didn't scale.

270
00:15:10,000 --> 00:15:12,000
And Netflix chose Mesos.

271
00:15:12,000 --> 00:15:16,000
And other large companies chose Mesos like Apple and Airbnb

272
00:15:16,000 --> 00:15:18,000
because it was more mature.

273
00:15:18,000 --> 00:15:20,000
It existed for a few years already

274
00:15:20,000 --> 00:15:24,000
and it scaled to 10,000 instances.

275
00:15:27,000 --> 00:15:29,000
If you want a technology to be ubiquitous,

276
00:15:29,000 --> 00:15:32,000
if you want a technology to be used by everyone,

277
00:15:32,000 --> 00:15:34,000
if you want a technology that you can actually

278
00:15:34,000 --> 00:15:36,000
create that alloy that's stronger

279
00:15:36,000 --> 00:15:38,000
than the contributions of any individual,

280
00:15:38,000 --> 00:15:41,000
it needs to be held under open and free governance.

281
00:15:41,000 --> 00:15:43,000
At the beginning, it was just a promise, right?

282
00:15:43,000 --> 00:15:45,000
We will put this in a foundation.

283
00:15:45,000 --> 00:15:48,000
The project was actually in a Google-owned GitHub org

284
00:15:48,000 --> 00:15:51,000
and the Community Contributor License Agreement

285
00:15:51,000 --> 00:15:53,000
was a Google Contributor License Agreement

286
00:15:53,000 --> 00:15:55,000
and people had to basically give Google the right

287
00:15:55,000 --> 00:15:57,000
to re-license the product.

288
00:15:57,000 --> 00:15:59,000
That put off a lot of people.

289
00:15:59,000 --> 00:16:01,000
As we started looking for partners to get involved,

290
00:16:01,000 --> 00:16:04,000
the fact that the project was still dominated by Google,

291
00:16:04,000 --> 00:16:07,000
despite us talking about it being open source,

292
00:16:07,000 --> 00:16:10,000
it still gave folks a lot of pause.

293
00:16:10,000 --> 00:16:15,000
Many large companies do not like their employees

294
00:16:15,000 --> 00:16:19,000
signing a competitor's Contributor License Agreement.

295
00:16:19,000 --> 00:16:23,000
That was the context where Craig went off

296
00:16:23,000 --> 00:16:26,000
and did a lot of coalition building

297
00:16:26,000 --> 00:16:30,000
to eventually form the Cloud Native Computing Foundation.

298
00:16:32,000 --> 00:16:37,000
We set a hard milestone for 1.0 to be OSCON

299
00:16:37,000 --> 00:16:42,000
when we would announce 1.0 and also as it turns out CNCF.

300
00:16:42,000 --> 00:16:44,000
It was probably the most stressful thing I've ever done

301
00:16:44,000 --> 00:16:48,000
was trying to bootstrap and navigate the multi-vendor

302
00:16:48,000 --> 00:16:51,000
interests in getting something like CNCF off the ground.

303
00:16:51,000 --> 00:16:54,000
There was about six months of essentially like bootstrapping

304
00:16:54,000 --> 00:16:56,000
work of trying to get this thing going.

305
00:16:56,000 --> 00:16:59,000
It was announced June 2015 at OSCON.

306
00:16:59,000 --> 00:17:03,000
It's clear that we need to start working more closely together as a community.

307
00:17:03,000 --> 00:17:06,000
As we looked at the 1.0 point of Kubernetes,

308
00:17:06,000 --> 00:17:08,000
as it's going production-ready,

309
00:17:08,000 --> 00:17:10,000
as we're looking at the future of this project,

310
00:17:10,000 --> 00:17:13,000
it was clear to us we had to take it to foundation.

311
00:17:13,000 --> 00:17:15,000
My idea at the time was like,

312
00:17:15,000 --> 00:17:20,000
I want to go build bridges with our competing orchestration.

313
00:17:20,000 --> 00:17:23,000
Even though Mesos has opinion on something,

314
00:17:23,000 --> 00:17:25,000
Kubernetes' opinion on something,

315
00:17:25,000 --> 00:17:27,000
there's usually some common interest.

316
00:17:27,000 --> 00:17:31,000
Maybe we could standardize how storage is attached to a container.

317
00:17:31,000 --> 00:17:33,000
Let's make that work.

318
00:17:33,000 --> 00:17:38,000
I convinced Ben Hyman to come on the TOC as we called it.

319
00:17:38,000 --> 00:17:40,000
There was a bunch of other folks.

320
00:17:40,000 --> 00:17:43,000
We had this good mix of folks from different overlapping

321
00:17:43,000 --> 00:17:46,000
and competing technologies to start the organization.

322
00:17:46,000 --> 00:17:51,000
We were able to secure a pretty rich base of support early out of the gate.

323
00:17:51,000 --> 00:17:56,000
Getting that to happen was maybe the most critical piece to the project's success.

324
00:17:56,000 --> 00:17:58,000
All the technology aside, without that,

325
00:17:58,000 --> 00:18:00,000
I don't think it would have gone anywhere.

326
00:18:00,000 --> 00:18:02,000
We believe it's going to take a whole community,

327
00:18:02,000 --> 00:18:04,000
and with that in mind, with Linux Foundation

328
00:18:04,000 --> 00:18:07,000
and a broad array of industry partners,

329
00:18:07,000 --> 00:18:10,000
we're announcing the Cloud Native Computing Foundation today,

330
00:18:10,000 --> 00:18:14,000
which will be charted to take Kubernetes and adjacent technologies,

331
00:18:14,000 --> 00:18:17,000
harmonize them, and ultimately progress the agenda

332
00:18:17,000 --> 00:18:19,000
of Cloud Native Computing for everybody.

333
00:18:19,000 --> 00:18:24,000
APPLAUSE

334
00:18:33,000 --> 00:18:39,000
We built the organization around Kubernetes in a very specific way.

335
00:18:39,000 --> 00:18:43,000
This was work that was done by what we called the Bootstrap Steering Committee,

336
00:18:43,000 --> 00:18:48,000
and that was the group that was early, early contributors to the project,

337
00:18:48,000 --> 00:18:52,000
and then myself added to that to try to build what our governance would be.

338
00:18:52,000 --> 00:18:55,000
Because they reached a point in 2016, 2017,

339
00:18:55,000 --> 00:18:59,000
where it was not easy to figure out how to get something done,

340
00:18:59,000 --> 00:19:03,000
and you just had to go ask a Googler but which Googler,

341
00:19:03,000 --> 00:19:06,000
and that wasn't fair, it wasn't well documented.

342
00:19:06,000 --> 00:19:09,000
The challenge then was how do you take this fragile community

343
00:19:09,000 --> 00:19:12,000
where everybody felt a sense of ownership

344
00:19:12,000 --> 00:19:16,000
and slide a sort of governance model underneath that?

345
00:19:16,000 --> 00:19:20,000
If you want to build a distributed compute platform,

346
00:19:20,000 --> 00:19:25,000
Conway's Law suggests that you need a distributed decision-making setup.

347
00:19:25,000 --> 00:19:28,000
So we pushed very hard to have that distributed

348
00:19:28,000 --> 00:19:33,000
and closer to the code than to a leader.

349
00:19:33,000 --> 00:19:37,000
We saw this great inflection point of interest and engagement

350
00:19:37,000 --> 00:19:40,000
because as we started moving things out to more open governance

351
00:19:40,000 --> 00:19:46,000
and as we moved the copyright and intellectual property to the CNCF,

352
00:19:46,000 --> 00:19:49,000
more larger companies were able to participate,

353
00:19:49,000 --> 00:19:56,000
and at that point it really became an exercise in how to grow the next set of leaders

354
00:19:56,000 --> 00:20:01,000
and taking the community as the piece that needed to be grown

355
00:20:01,000 --> 00:20:05,000
more than anything else and nurtured more than anything else.

356
00:20:11,000 --> 00:20:14,000
We didn't have a manager, actually,

357
00:20:14,000 --> 00:20:18,000
even so Tim and I were in Mountain View at the time

358
00:20:18,000 --> 00:20:21,000
and Craig, Joe and Brendan were in Seattle,

359
00:20:21,000 --> 00:20:25,000
and we all reported to different managers for several months

360
00:20:25,000 --> 00:20:27,000
while we were working things out.

361
00:20:29,000 --> 00:20:33,000
My first time at Google was mid-February 2016

362
00:20:33,000 --> 00:20:35,000
from a Kubernetes timeline.

363
00:20:35,000 --> 00:20:38,000
The team was working on Kubernetes 1.2.

364
00:20:38,000 --> 00:20:43,000
The thing that was obvious and clear is that they were on the edge of burnout.

365
00:20:43,000 --> 00:20:46,000
Everybody had been working 16-hour days,

366
00:20:46,000 --> 00:20:48,000
6 days a week for a long time.

367
00:20:48,000 --> 00:20:51,000
It was like a 24-7 job.

368
00:20:51,000 --> 00:20:57,000
People would ping you on Slack, on Git, on Twitter, customers calling,

369
00:20:57,000 --> 00:20:59,000
the build is breaking, someone cannot come in.

370
00:20:59,000 --> 00:21:01,000
The work actually never stops.

371
00:21:01,000 --> 00:21:06,000
By the end of 2016 we were having between 700 and 1,000 people

372
00:21:06,000 --> 00:21:08,000
contributing to each release.

373
00:21:08,000 --> 00:21:12,000
It was clear that with the way we were structured,

374
00:21:12,000 --> 00:21:14,000
we will fail.

375
00:21:14,000 --> 00:21:16,000
We will burn ourselves.

376
00:21:16,000 --> 00:21:20,000
Ken knew that what we were doing was not going to work in the long term.

377
00:21:20,000 --> 00:21:23,000
It was great when it was five or six people.

378
00:21:23,000 --> 00:21:26,000
She knew that she needed to grow this organization

379
00:21:26,000 --> 00:21:29,000
if we were going to keep on the trajectory that we were on.

380
00:21:29,000 --> 00:21:32,000
So I think at the first phase, coming in as a leader

381
00:21:32,000 --> 00:21:34,000
and as a manager of that team,

382
00:21:34,000 --> 00:21:39,000
I first wanted just to stabilize and make space for folks

383
00:21:39,000 --> 00:21:43,000
and that idea that we are not going to solve things for the short term

384
00:21:43,000 --> 00:21:46,000
but we are actually going to think about how it's going to be solved

385
00:21:46,000 --> 00:21:51,000
from this point on was I think a critical point

386
00:21:51,000 --> 00:21:53,000
at the success of Kubernetes.

387
00:21:53,000 --> 00:21:57,000
That idea actually evolved later on to what we call sustainable success.

388
00:21:57,000 --> 00:22:01,000
She was very deliberate about putting together the teams

389
00:22:01,000 --> 00:22:05,000
and giving responsibilities to which site had which things

390
00:22:05,000 --> 00:22:07,000
that they were responsible for

391
00:22:07,000 --> 00:22:09,000
and how we were going to grow the team

392
00:22:09,000 --> 00:22:11,000
just to get it back under control.

393
00:22:11,000 --> 00:22:16,000
It was also time to focus a little bit on stability and predictability

394
00:22:16,000 --> 00:22:18,000
and now we had real customers.

395
00:22:18,000 --> 00:22:22,000
We had people who were actually using 1.0 in production,

396
00:22:22,000 --> 00:22:25,000
big video games you might have played

397
00:22:25,000 --> 00:22:30,000
and we needed a focus on making sure that we didn't screw them up.

398
00:22:31,000 --> 00:22:36,000
We learned that Niantic was building Pokemon Go on GKE.

399
00:22:36,000 --> 00:22:39,000
And so very quickly we got in a bunch of conversations

400
00:22:39,000 --> 00:22:42,000
with the folks over at Niantic about how it was going,

401
00:22:42,000 --> 00:22:44,000
what were they doing, what could we do to help them out,

402
00:22:44,000 --> 00:22:46,000
how was Kubernetes fitting their problem.

403
00:22:46,000 --> 00:22:52,000
They ran Pokemon Go on one big cluster,

404
00:22:52,000 --> 00:22:55,000
which was exciting and terrifying.

405
00:22:55,000 --> 00:22:59,000
Once it launched, they actually experienced 50 times

406
00:22:59,000 --> 00:23:03,000
the load or the volume than what they expected.

407
00:23:03,000 --> 00:23:06,000
We sort of went into, I won't say panic mode,

408
00:23:06,000 --> 00:23:09,000
but near panic mode as we tried to figure out

409
00:23:09,000 --> 00:23:11,000
how we were going to give them more headroom

410
00:23:11,000 --> 00:23:14,000
because the game was just growing and growing and growing.

411
00:23:14,000 --> 00:23:18,000
They were just pushing the limits of everything.

412
00:23:18,000 --> 00:23:20,000
You are like an engineer on the team, you are on call,

413
00:23:20,000 --> 00:23:23,000
we are like 24-7 managing those clusters.

414
00:23:23,000 --> 00:23:27,000
We see the entire world going with their phones everywhere.

415
00:23:27,000 --> 00:23:31,000
And in my head, all I'm seeing is like, please stop playing.

416
00:23:31,000 --> 00:23:33,000
We are not ready for that.

417
00:23:33,000 --> 00:23:37,000
What was amazing, that we actually were ready for that.

418
00:23:37,000 --> 00:23:39,000
This was a huge deal.

419
00:23:39,000 --> 00:23:41,000
We all felt great about it.

420
00:23:41,000 --> 00:23:43,000
Definitely validation of what we were doing.

421
00:23:43,000 --> 00:23:45,000
The idea that we were able to continue and grow

422
00:23:45,000 --> 00:23:51,000
and see that game expand everywhere and meet the demand,

423
00:23:51,000 --> 00:23:55,000
like this is why Kubernetes is a thing, right?

424
00:23:55,000 --> 00:23:59,000
To build something, you are not really sure how it will scale,

425
00:23:59,000 --> 00:24:02,000
but then you have this amazing foundation

426
00:24:02,000 --> 00:24:05,000
that really helps you to get to that scale.

427
00:24:11,000 --> 00:24:13,000
I hate the term the container wars,

428
00:24:13,000 --> 00:24:16,000
but the debate about what were people going to use

429
00:24:16,000 --> 00:24:19,000
was still very much going on.

430
00:24:19,000 --> 00:24:23,000
Niantic took a big bet on Kubernetes,

431
00:24:23,000 --> 00:24:25,000
but definitely there was a lot going on in the market.

432
00:24:25,000 --> 00:24:28,000
You couldn't read a blog site

433
00:24:28,000 --> 00:24:31,000
without running across a Docker versus Kubernetes.

434
00:24:31,000 --> 00:24:39,000
The container wars began the day Kubernetes was announced at DockerCon.

435
00:24:39,000 --> 00:24:42,000
And it was interesting because it didn't feel like a war in the beginning.

436
00:24:42,000 --> 00:24:45,000
It felt like tension about what's on top.

437
00:24:45,000 --> 00:24:47,000
The container wars were complicated by the fact

438
00:24:47,000 --> 00:24:50,000
that there was also a fight over orchestration,

439
00:24:50,000 --> 00:24:53,000
the things that managed containers above that.

440
00:24:53,000 --> 00:24:56,000
There's a lot of value in being the top of the stack.

441
00:24:56,000 --> 00:25:00,000
Look into any kind of marketing materials or website everywhere.

442
00:25:00,000 --> 00:25:03,000
You're never going to find somebody who's proud of saying

443
00:25:03,000 --> 00:25:06,000
that we are the little dot at the bottom of the stack

444
00:25:06,000 --> 00:25:07,000
that you never think about.

445
00:25:07,000 --> 00:25:09,000
Everybody wants to own the user experience.

446
00:25:09,000 --> 00:25:12,000
Everybody wants to be on top of the value chain.

447
00:25:12,000 --> 00:25:17,000
And this is the kind of race that happened during this Docker era

448
00:25:17,000 --> 00:25:21,000
about who owns the developer experience, who owns the app's experience,

449
00:25:21,000 --> 00:25:24,000
who owns the mindset of the engineers ultimately

450
00:25:24,000 --> 00:25:26,000
because this is where the value really is

451
00:25:26,000 --> 00:25:28,000
and this is what the people are going to buy.

452
00:25:28,000 --> 00:25:33,000
People were fighting over what should be the dominant way to run containers,

453
00:25:33,000 --> 00:25:35,000
how to define applications.

454
00:25:35,000 --> 00:25:39,000
Both approaches had valid ideas.

455
00:25:39,000 --> 00:25:41,000
I think the mistake that was made early on

456
00:25:41,000 --> 00:25:43,000
is people thought there was going to be a zero sum game.

457
00:25:43,000 --> 00:25:48,000
If you looked at Kubernetes at the time, it was layered.

458
00:25:48,000 --> 00:25:50,000
Linux was at the bottom still.

459
00:25:50,000 --> 00:25:53,000
Docker was the container runtime.

460
00:25:53,000 --> 00:25:55,000
SCD is where we stored everything.

461
00:25:55,000 --> 00:25:58,000
It looked like it was a big combination and collaboration

462
00:25:58,000 --> 00:26:00,000
of the entire industry at the time.

463
00:26:00,000 --> 00:26:02,000
But no one really treated it like that

464
00:26:02,000 --> 00:26:04,000
and I think that was the missed opportunity.

465
00:26:04,000 --> 00:26:08,000
So I think the tension was people felt like it was a zero sum game.

466
00:26:08,000 --> 00:26:10,000
Whoever won the orchestration wars

467
00:26:10,000 --> 00:26:14,000
would somehow win all the business and all the customers.

468
00:26:14,000 --> 00:26:17,000
We couldn't have done Kubernetes without Docker.

469
00:26:17,000 --> 00:26:20,000
It just would not have been a thing that would have worked out.

470
00:26:20,000 --> 00:26:23,000
Something else would have happened.

471
00:26:23,000 --> 00:26:26,000
And yet people wanted to make drama out of it.

472
00:26:26,000 --> 00:26:28,000
The world loves drama

473
00:26:28,000 --> 00:26:32,000
and I don't think there was nearly as much actual drama as people made out of it.

474
00:26:32,000 --> 00:26:36,000
At the end of the day, everything eventually settled down

475
00:26:36,000 --> 00:26:39,000
and CNCF, we brought in both container D and Rocket

476
00:26:39,000 --> 00:26:41,000
under the same foundation

477
00:26:41,000 --> 00:26:46,000
and we also pushed to standardize the image specification.

478
00:26:46,000 --> 00:26:48,000
It became a standard.

479
00:26:48,000 --> 00:26:52,000
For a good three years or four years,

480
00:26:52,000 --> 00:26:54,000
every day was,

481
00:26:54,000 --> 00:26:58,000
is Docker going to change to adopt Kubernetes?

482
00:26:58,000 --> 00:27:03,000
Is AWS going to suddenly adopt Kubernetes?

483
00:27:03,000 --> 00:27:05,000
DockerCon were like,

484
00:27:05,000 --> 00:27:09,000
is someone going to change everything with an announcement?

485
00:27:09,000 --> 00:27:13,000
And then one day Solomon called me and said,

486
00:27:13,000 --> 00:27:14,000
we did it.

487
00:27:14,000 --> 00:27:17,000
We built Docker on top of Kubernetes

488
00:27:17,000 --> 00:27:20,000
and we're going to announce it at DockerCon in Copenhagen

489
00:27:20,000 --> 00:27:21,000
week after next.

490
00:27:21,000 --> 00:27:22,000
Can you be there?

491
00:27:22,000 --> 00:27:26,000
Docker announced that they were going to start supporting Kubernetes

492
00:27:26,000 --> 00:27:30,000
and DockerCon in addition to Docker Swarm.

493
00:27:30,000 --> 00:27:33,000
They recognized that this was something that they couldn't ignore.

494
00:27:33,000 --> 00:27:37,000
And so Brendan and I were there to say congratulations

495
00:27:37,000 --> 00:27:40,000
and it was really a cool moment

496
00:27:40,000 --> 00:27:43,000
where I finally felt like we stopped pulling against each other

497
00:27:43,000 --> 00:27:45,000
and started pulling together.

498
00:27:50,000 --> 00:27:57,000
2017, a lot of competitors embraced Kubernetes.

499
00:27:57,000 --> 00:27:59,000
Mesos, Docker, Pivotal.

500
00:27:59,000 --> 00:28:02,000
And really near the end of 2017,

501
00:28:02,000 --> 00:28:05,000
Amazon launched a Kubernetes product.

502
00:28:05,000 --> 00:28:07,000
Back then when joining Google even,

503
00:28:07,000 --> 00:28:11,000
I never thought AWS would seriously have a Kubernetes offering.

504
00:28:11,000 --> 00:28:12,000
For the longest time,

505
00:28:12,000 --> 00:28:14,000
Amazon had been a holdout on this.

506
00:28:14,000 --> 00:28:16,000
And so to see it come full circle where it's like,

507
00:28:16,000 --> 00:28:20,000
have Amazon supporting it was one of the largest signals

508
00:28:20,000 --> 00:28:22,000
that Kubernetes, at least for me,

509
00:28:22,000 --> 00:28:24,000
that Kubernetes was really here to stay.

510
00:28:24,000 --> 00:28:27,000
And now Kubernetes seems to be the de facto standard

511
00:28:27,000 --> 00:28:30,000
across all cloud providers globally.

512
00:28:30,000 --> 00:28:35,000
When we saw Mesospheres rebrand and embrace Kubernetes,

513
00:28:35,000 --> 00:28:38,000
when we saw Docker start to introduce their own Kubernetes offerings,

514
00:28:38,000 --> 00:28:40,000
it really kind of closed out that arc.

515
00:28:40,000 --> 00:28:43,000
But there were a lot of highlights at every point of the journey

516
00:28:43,000 --> 00:28:45,000
that were worth celebrating.

517
00:28:45,000 --> 00:28:47,000
It was a phenomenal experience.

518
00:28:47,000 --> 00:28:51,000
In the end, I think Kubernetes won in part because it had

519
00:28:51,000 --> 00:28:55,000
a vast army of contributors behind it.

520
00:28:55,000 --> 00:28:59,000
And it just kept marching along with a huge number of commits per day.

521
00:28:59,000 --> 00:29:03,000
And that rate of change kind of trumps everything else.

522
00:29:03,000 --> 00:29:06,000
Back then, most of the things that truly attracted people

523
00:29:06,000 --> 00:29:10,000
who even knew the tech and who knew containers was the UX.

524
00:29:10,000 --> 00:29:12,000
Yes, in a sense, Kubernetes managed to capture

525
00:29:12,000 --> 00:29:15,000
the orchestration layer building on top of Docker.

526
00:29:15,000 --> 00:29:17,000
But they never really captured the developer experience.

527
00:29:17,000 --> 00:29:20,000
And the truth is, nobody really is but Docker right now.

528
00:29:20,000 --> 00:29:24,000
And that's still, I think, one of the areas that there's a lot of things to do

529
00:29:24,000 --> 00:29:26,000
and we're not done yet.

530
00:29:26,000 --> 00:29:29,000
And Docker, as a company today, decided to focus on the developer experience

531
00:29:29,000 --> 00:29:31,000
side of things for a good reason, I think.

532
00:29:31,000 --> 00:29:37,000
I'm seeing Kubernetes being used in ways that surprise me and delight me

533
00:29:37,000 --> 00:29:41,000
to see, like, wow, I hadn't even thought that that was something that we could do.

534
00:29:41,000 --> 00:29:46,000
It's clear that Kubernetes is going to take on a life of its own

535
00:29:46,000 --> 00:29:52,000
and go off and evolve beyond what any of us really imagined when we started out.

536
00:29:52,000 --> 00:29:54,000
Things cannot repeat.

537
00:29:54,000 --> 00:30:00,000
And I think we just lucky have that right time and right support.

538
00:30:00,000 --> 00:30:04,000
The container wash has benefited from the fact that there was lots of VC dollars

539
00:30:04,000 --> 00:30:06,000
fueling this race.

540
00:30:06,000 --> 00:30:09,000
But the truth is, there was no zero sum game.

541
00:30:09,000 --> 00:30:14,000
The best ideas from that race are still with us.

542
00:30:14,000 --> 00:30:16,000
And they've consolidated now.

543
00:30:16,000 --> 00:30:20,000
And they've consolidated so far into the latest checkpoint, which is Kubernetes.

544
00:30:20,000 --> 00:30:24,000
But the truth is, there's going to be something that will place Kubernetes.

545
00:30:24,000 --> 00:30:26,000
Maybe it's some serverless component.

546
00:30:26,000 --> 00:30:30,000
Maybe it's a different way of thinking about these APIs and how they should fit together.

547
00:30:30,000 --> 00:30:34,000
And typically, the higher you get gives freedom for the system underneath you

548
00:30:34,000 --> 00:30:37,000
to also evolve and sometimes become simpler.

549
00:30:37,000 --> 00:30:43,000
So I think this is just the latest checkpoint, but whatever war people were fighting,

550
00:30:43,000 --> 00:30:45,000
there was nothing to actually fight.

551
00:31:13,000 --> 00:31:16,000
Thank you.

