WEBVTT

00:00.000 --> 00:08.600
Hi, humans here from Fast Tech Skills and in this video, I'm going to describe one of

00:08.600 --> 00:13.600
the most important things that comes to technology and that's computer programming.

00:13.600 --> 00:19.200
I'm going to actually take you through the most important concepts of computer programming.

00:19.200 --> 00:26.120
So by the end of this video, if you have no idea how computer coding works, so you get

00:26.120 --> 00:31.520
a really good idea at the end of this video and code like a code basis like this and source

00:31.520 --> 00:35.440
code like this wouldn't be as scary as they are now.

00:35.440 --> 00:39.880
So I just got this image from Google.

00:39.880 --> 00:44.520
When you look at this image, it looks a little bit like intimidating, it's not as clear and

00:44.520 --> 00:46.560
readable as you want it to be.

00:46.560 --> 00:52.920
So I'm just going to take you through four important concepts of computer programming,

00:52.920 --> 00:57.720
how we actually make computers do things.

00:57.720 --> 01:02.520
Hopefully by the end of this video, you would be amazed how simple computer programming

01:02.520 --> 01:03.520
could be.

01:03.520 --> 01:09.440
So I'm just going to delete that photo for now and we will talk about four different

01:09.440 --> 01:10.440
concepts.

01:10.440 --> 01:16.240
Basically, if you know these four different concepts, then you kind of get how computers

01:16.240 --> 01:19.120
work when it comes to computer coding.

01:19.120 --> 01:25.360
So I'm just going to actually grab my proper tool here.

01:25.360 --> 01:28.680
Okay, we've got the tool.

01:28.680 --> 01:33.400
So we will have four kind of concepts here.

01:33.400 --> 01:40.800
I'm going to separate the space for each of those so we know what we are doing in terms

01:40.800 --> 01:42.880
of using the space.

01:42.880 --> 01:48.720
The first one that we're going to talk about is step-by-step execution.

01:48.720 --> 01:50.160
So what do we mean by that?

01:50.160 --> 01:58.360
If I actually go ahead and make the brush a little bit smaller, so we have instructions.

01:58.360 --> 02:05.040
So every single line of code basically could do something when you write it.

02:05.040 --> 02:09.360
For example, a single line of code could print something on the screen.

02:09.360 --> 02:12.700
So this could print something on screen.

02:12.700 --> 02:19.420
Every single line of code could do a calculation, maybe calculate what two times three is,

02:19.420 --> 02:20.620
and so on and so forth.

02:20.620 --> 02:25.860
So every single line of code that you write on the screen could mean something, could

02:25.860 --> 02:29.340
actually order the computer to do something.

02:29.340 --> 02:34.980
In step-by-step execution, the machine actually goes through every single line step-by-step.

02:34.980 --> 02:42.660
So the order starts from the top and executes every single line one after the other.

02:43.300 --> 02:48.860
And this would be like a very simple basic way of executing commands.

02:48.860 --> 02:52.140
This would be step-by-step.

02:52.140 --> 03:00.500
So this is the most common and every single computer program would have such a structure

03:00.500 --> 03:02.020
in it.

03:02.020 --> 03:05.460
The next one is conditional execution.

03:05.460 --> 03:09.940
And basically the way that works is we would have a condition.

03:09.940 --> 03:15.900
So if the condition exists, we would execute a part of the code.

03:15.900 --> 03:19.860
If not, we won't execute that part, we would probably execute something else.

03:19.860 --> 03:22.260
So the condition works something like this.

03:22.260 --> 03:27.420
We have an input coming in, a value, and then we evaluate it.

03:27.420 --> 03:35.420
If the evaluation comes out as true or yes, we would go ahead and execute this piece of

03:35.420 --> 03:43.340
code here, or if it's no, then we would execute this other piece of code that we've got for

03:43.340 --> 03:44.940
the no condition.

03:44.940 --> 03:51.340
The best example would be kind of if you press a button on your computer, that could be a

03:51.340 --> 03:52.340
conditional.

03:52.340 --> 03:58.060
So when the condition of pressing the button kind of is true, then the code specifically

03:58.060 --> 04:00.060
for that button executes.

04:00.060 --> 04:05.020
So in code, if you want to write it in this structure, we have the kind of the condition

04:05.020 --> 04:07.140
at the top.

04:07.140 --> 04:16.340
So the condition we write it in red, then if it's true, the green will be executed here.

04:16.340 --> 04:20.660
If not, we can say that the orange will be executed.

04:20.660 --> 04:25.580
So it's a very, very simple way of actually building a condition.

04:25.580 --> 04:31.180
There are more sophisticated structures when it comes to conditionals, but you can get

04:31.180 --> 04:32.180
the idea.

04:32.180 --> 04:36.460
This part would be yes, and this part would be no.

04:36.460 --> 04:40.780
Or you can get enough to know all together and have the rest of your program.

04:40.780 --> 04:44.780
So if the condition exists, do something, if it doesn't exist, do nothing.

04:44.780 --> 04:47.020
So that could be another way of implementing it.

04:47.020 --> 04:52.100
Or vice versa, you can have if the condition doesn't exist, do something, or if it does

04:52.100 --> 04:53.100
do nothing.

04:53.100 --> 04:56.660
So you can arrange it in any way possible you want.

04:56.660 --> 04:59.340
And this basically is the conditional structure.

04:59.340 --> 05:03.620
We have a yes or no structure.

05:03.620 --> 05:05.980
The next one are the loops.

05:05.980 --> 05:12.860
And loops are pretty, pretty cool because it allows the computers to do tedious and hard

05:12.860 --> 05:13.860
work for us.

05:13.860 --> 05:16.740
It even helps us to write more efficient code.

05:16.740 --> 05:19.020
So let's see how it works.

05:19.020 --> 05:21.940
Let's say that we have some sort of instruction.

05:21.940 --> 05:23.580
Actually let me draw something.

05:23.580 --> 05:25.700
Let's say that we have apples.

05:25.700 --> 05:28.300
Let's say these are apples here.

05:28.300 --> 05:33.460
And we want to put these apples, we want to package them in boxes.

05:33.460 --> 05:38.260
So let me go ahead and actually grab another color for the color of the box.

05:38.260 --> 05:44.580
We have a box here and simply the instruction is that open the box.

05:44.580 --> 05:50.420
So we open the box and we put the apple in.

05:50.420 --> 05:55.820
So if I just change the color, so number one would be open the box.

05:55.820 --> 05:57.340
So we open it.

05:57.340 --> 06:01.100
We put the apple in and then we close the box.

06:01.100 --> 06:02.980
So that'd be like closing the box.

06:02.980 --> 06:05.220
So we have three steps.

06:05.220 --> 06:09.620
And if we want to do that for thousands of apples, that's a tedious work.

06:09.620 --> 06:15.340
So if we want to write it by step by step kind of instruction, we need to write thousands

06:15.340 --> 06:20.020
of lines of code defining that open the box, put the apple in, close the box.

06:20.020 --> 06:25.180
That would require as many times that we want to do the process, we need to write lines

06:25.180 --> 06:26.180
of code.

06:26.180 --> 06:30.360
And that kind of gives you the idea of what the loop is.

06:30.360 --> 06:37.100
So if you want to make a way that it's going to automate this process, we can use loops.

06:37.100 --> 06:41.980
Basically what loops do is we have some sort of instructions.

06:41.980 --> 06:46.700
So the instruction could be as simple as open the box, that'd be step number one.

06:46.700 --> 06:49.420
Put the apple in, close the box.

06:49.420 --> 06:54.900
Then we can repeat this process as many times as we want.

06:54.900 --> 07:00.980
So we can have a condition as long as the box or apples exist, do the process, or we

07:00.980 --> 07:06.020
can say do the process one thousand or one million times.

07:06.020 --> 07:10.860
Of course, these instructions could be printing a line on the screen, could be do some sort

07:10.860 --> 07:18.740
of calculation, whatever it is, loops allow us to basically go ahead and execute a set

07:18.740 --> 07:25.420
of instructions as many times as we want, which are very, very efficient and basically

07:25.420 --> 07:32.380
shows the true power of computer science and computing at large scale.

07:32.380 --> 07:38.220
The next one that we have, it's a bit kind of different than the other ones.

07:38.220 --> 07:47.020
Let's say that we have a set of instructions, and then we want to do something here.

07:47.420 --> 07:54.780
This thing that we want to do here has its own instruction, kind of its own box of instruction.

07:54.780 --> 08:00.420
Let's say that we have an instruction for packaging apples, we have that separated in

08:00.420 --> 08:06.220
a block of code, we call it a set of lines of code, kind of targeted to do something,

08:06.220 --> 08:10.580
and we want to use that instruction in multiple places.

08:10.700 --> 08:18.780
Instead of rewriting the code, then we can put that in a block and we can call that block

08:18.780 --> 08:22.220
to be executed throughout our code.

08:22.220 --> 08:27.740
Let's say that this is the apple packaging instruction, we separate it in the code, and

08:27.740 --> 08:35.100
then we can call that kind of block of code to do the instruction, and then we go ahead

08:35.100 --> 08:37.180
and do the next steps.

08:37.180 --> 08:43.900
This is basically functions and kind of separating the code so we can reuse them.

08:43.900 --> 08:48.940
It's a very, very important concept in computer programming, and there are more sophisticated

08:48.940 --> 08:54.260
models to it, but for now, if there is something that we keep using, if there are set of instructions

08:54.260 --> 09:02.820
that we keep using, then we just separate them in kind of a separate space in our code,

09:02.820 --> 09:08.140
and then we put them in a kind of a block sort of thing.

09:08.140 --> 09:12.020
There are some details to it, but for now, just imagine that you put them in a block

09:12.020 --> 09:17.380
and you can call that block to do those tasks anywhere you want throughout your code.

09:17.380 --> 09:24.020
So that's basically the last concept, so step by step, conditional loops and functions and

09:24.020 --> 09:27.020
kind of reusability in your code.

09:27.020 --> 09:30.540
So hope this video helped you to understand computer programming.

09:30.540 --> 09:36.380
If you understand these four concepts, then it's very, very simple to understand how computers

09:36.380 --> 09:43.180
work, because you can basically go ahead and break down every software on these constructing

09:43.180 --> 09:45.460
modules or parts.

09:45.460 --> 09:46.820
So that's it for this video.

09:46.820 --> 09:47.820
Thanks for watching.

09:47.820 --> 09:51.420
Subscribe to this channel if you like this explanation.

09:51.420 --> 09:54.740
Like this video, leave a comment, let me know what do you think, and I'll see you in the

09:54.740 --> 09:55.740
next video.

09:55.740 --> 09:56.740
So, romance here, and bye.

