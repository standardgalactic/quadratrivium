WEBVTT

00:00.000 --> 00:03.480
Welcome to my list of the top things that Python noobs do.

00:03.480 --> 00:08.820
I'm also giving away four professional licenses to PyCharm, so comment, hashtag PyCharm if

00:08.820 --> 00:10.680
you want a chance to win.

00:10.680 --> 00:15.240
Some of these are actual issues for your code, but a lot of them don't actually matter much.

00:15.240 --> 00:19.560
Nevertheless, these things will tip people off to your inexperience, so whether you're

00:19.560 --> 00:23.560
an actual noob looking to get better, or if you just want to catch any newbie habits

00:23.560 --> 00:26.160
that you still hold on to, let's dive in.

00:26.160 --> 00:29.240
Alright, newbie thing number one, manual string formatting.

00:29.240 --> 00:32.600
AKA, putting things together with the plus sign.

00:32.600 --> 00:37.160
Instead use F-strings, they're more readable, easier to write, and less prone to errors.

00:37.160 --> 00:38.840
Number two, manually closing a file.

00:38.840 --> 00:42.400
I can't tell you how many beginner tutorials recommend doing something like this.

00:42.400 --> 00:45.240
Open the file, write to it, and then call close.

00:45.240 --> 00:49.160
If this right call throws an exception, the file will never be closed.

00:49.160 --> 00:52.640
Instead use a with statement which will ensure the file is closed even if an exception is

00:52.640 --> 00:53.800
thrown.

00:53.800 --> 00:57.840
On a similar note, number three is using try finally instead of a context manager.

00:57.840 --> 01:02.800
I usually see this one from more experienced developers, but coming from a different language.

01:02.800 --> 01:06.760
In Python, most resources that need to be closed have their own context manager.

01:06.760 --> 01:07.840
Use it.

01:07.840 --> 01:10.800
Number four, using a bear accept clause.

01:10.800 --> 01:15.920
In Python, keyboard interrupts and system exits are propagated using exceptions.

01:15.920 --> 01:19.280
That means, for example, a bear accept is going to catch something like the user hitting

01:19.280 --> 01:23.120
control C. That's almost never what you actually want to do.

01:23.120 --> 01:26.720
If you still want to be lazy, but you don't want to trap your user in a box, then use

01:26.720 --> 01:29.040
an exit capital exception.

01:29.040 --> 01:32.160
Or if you want to do the right thing, then catch the actual exception that's going to

01:32.160 --> 01:33.400
be thrown.

01:33.400 --> 01:35.800
Number five, thinking the carrot means exponentiation.

01:35.800 --> 01:38.000
Nope, it's bitwise XOR.

01:38.000 --> 01:42.200
Okay, that one's a really newbie one, but I gotta pad the list somehow, right?

01:42.200 --> 01:45.880
Number six is any use of default mutable arguments.

01:45.880 --> 01:49.560
Argument defaults are defined when the function is defined, not when it's run.

01:49.560 --> 01:53.360
In this case, that means every call to the function is sharing the same list, meaning

01:53.360 --> 01:56.400
the second time we call it, it's not starting out as the empty list.

01:56.400 --> 02:00.080
It's starting out as the list containing zero from the previous call.

02:00.080 --> 02:01.800
Probably not what you wanted.

02:01.800 --> 02:05.480
If you want a mutable default, first set it to none and then check if it's none inside

02:05.480 --> 02:07.920
the function, setting the default there.

02:07.920 --> 02:10.160
Number seven, never using comprehensions.

02:10.160 --> 02:13.440
Or if they do use comprehensions, only list comprehensions.

02:13.440 --> 02:18.340
A lot of code can be made both shorter and clearer by using comprehension.

02:18.340 --> 02:22.400
You can have dictionary, list, set, and even generator comprehensions.

02:22.400 --> 02:24.480
Learn how to use them when they're appropriate.

02:24.480 --> 02:27.240
Number eight, always using comprehensions.

02:27.240 --> 02:28.240
I get it.

02:28.240 --> 02:33.480
You just learned about comprehensions and now it's time to flex, but stop for a moment.

02:33.480 --> 02:36.800
You don't need to turn every single loop into a comprehension.

02:36.800 --> 02:39.200
Sometimes this actually makes things less readable.

02:39.200 --> 02:43.520
I guess readability is really in the eye of the beholder, so you may not agree with this

02:43.520 --> 02:48.720
particular example, but I hope you can agree that not every loop should be turned into

02:48.720 --> 02:50.400
a comprehension.

02:50.400 --> 02:52.960
Number nine, checking for a type with equals equals.

02:52.960 --> 02:57.120
There are some rare cases where you do want to do this, but most of the time this is not

02:57.120 --> 02:58.280
what you want.

02:58.280 --> 02:59.760
The reason is inheritance.

02:59.760 --> 03:04.000
A named tuple is a tuple, so this point class is a tuple.

03:04.000 --> 03:07.680
But it's not literally the built-in tuple, it's a subclass.

03:07.680 --> 03:11.800
In most cases, you should program in a way where you should be able to substitute a subclass

03:11.800 --> 03:13.360
for its parent.

03:13.360 --> 03:18.040
This is called the Liskov substitution principle and checking a type for equality is a violation

03:18.040 --> 03:19.040
of it.

03:19.040 --> 03:23.480
In those cases, what you probably wanted instead was an is instance check.

03:23.480 --> 03:27.560
Number ten, using equals equals to check for none true and false.

03:27.560 --> 03:32.080
Instead of equality, you should check for identity using the is comparison.

03:32.080 --> 03:35.600
This is what equals equals was going to do anyway, so just cut out the middleman and

03:35.600 --> 03:37.240
use is directly.

03:37.240 --> 03:40.880
Eleven, using an if bool or if length check.

03:40.880 --> 03:44.320
There's nothing particularly wrong about these, it's just that they're usually equivalent

03:44.320 --> 03:46.240
to just a plain if x.

03:46.240 --> 03:50.240
So using an if bool or if length check kind of just shows that you don't know the language

03:50.240 --> 03:51.480
that well.

03:51.480 --> 03:54.400
Number twelve, using the range length idiom.

03:54.400 --> 03:58.120
A lot of beginners, especially those coming from other languages, think about loops in

03:58.120 --> 03:59.720
terms of indices.

03:59.720 --> 04:03.440
So they loop over the indices but only ever use them to grab out the elements.

04:03.440 --> 04:07.200
Instead, just loop over the underlying container and get the elements directly.

04:07.200 --> 04:09.560
It's much easier to read and less error prone.

04:09.560 --> 04:13.720
If you did actually want to use the index though, you still shouldn't use range length,

04:13.720 --> 04:17.400
use enumerate to get the index and the element at the same time.

04:17.400 --> 04:21.080
Another reason I see people use this is to use I as kind of a synchronizing variable

04:21.080 --> 04:24.000
to get corresponding elements from two different objects.

04:24.000 --> 04:27.080
Of course, the better way to do that is using zip.

04:27.080 --> 04:30.600
And if you still need the index, use enumerate zip.

04:30.600 --> 04:34.480
Number thirteen, looping over the keys of a dictionary.

04:34.480 --> 04:36.800
Don't you know, that's the default.

04:36.800 --> 04:40.480
If you're modifying the dictionary as you're looping over it, then it would be okay to make

04:40.480 --> 04:42.280
a copy of the keys.

04:42.280 --> 04:45.360
Depending on the situation, this might add a little bit of clarity.

04:45.360 --> 04:48.640
But even in this case, the dot keys is unnecessary.

04:48.640 --> 04:52.320
Number fourteen, not knowing about the dictionary items method.

04:52.320 --> 04:55.760
If you're looping over the keys of a dictionary and the first thing you do is grab the value

04:55.760 --> 05:00.120
out for each key, then what you really want is to loop over the items of the dictionary,

05:00.120 --> 05:02.000
which are key value pairs.

05:02.000 --> 05:04.280
Number fifteen, not using tuple unpacking.

05:04.280 --> 05:08.600
Do you have a tuple and want to get all of its elements out as separate variables?

05:08.600 --> 05:11.680
Well you're in luck, that's exactly what tuple unpacking does.

05:11.680 --> 05:15.200
Number sixteen, creating your own index counter variable.

05:15.200 --> 05:18.920
If you're starting at zero and adding one to something at the end of every loop, then

05:18.920 --> 05:22.000
once again what you really want is enumerate.

05:22.000 --> 05:24.880
Number seventeen, using time dot time to time.

05:24.880 --> 05:28.200
I think we gotta give the noobs a break on this one, how are they supposed to know that

05:28.200 --> 05:31.120
time dot time is not for timing your code?

05:31.120 --> 05:35.240
Time dot time is for telling you what time it currently is, and it's not as accurate

05:35.240 --> 05:37.080
as using perf counter.

05:37.080 --> 05:41.520
Subtracting two subsequent calls to perf counter gives you the most accurate way of measuring

05:41.760 --> 05:43.840
how much time it took your code to run.

05:43.840 --> 05:47.360
Number eighteen, littering your code with print statements instead of using the logging

05:47.360 --> 05:48.520
module.

05:48.520 --> 05:52.480
You can set up logging easily in your main function with your own custom format.

05:52.480 --> 05:55.960
You can also set the logging level or take it as a parameter so that you can filter out

05:55.960 --> 05:58.320
messages that you're not interested in.

05:58.320 --> 06:00.240
There doesn't that look a lot better?

06:00.240 --> 06:05.200
Nineteen, using shell equals true on any function in the sub-process library.

06:05.200 --> 06:09.520
Shell equals true is the source of a lot of security problems, and let's be honest the

06:09.520 --> 06:12.640
reason you probably did this in the first place is to avoid putting your arguments into

06:12.640 --> 06:13.640
a list.

06:13.640 --> 06:18.480
Number twenty, doing math or pretty much any kind of data analysis in Python.

06:18.480 --> 06:22.680
Learn to use NumPy for array operations and learn to use pandas for more general data

06:22.680 --> 06:23.680
analysis.

06:23.680 --> 06:28.280
Twenty-one, using import star outside of an interactive session.

06:28.280 --> 06:32.920
Import star usually litters your namespace with variables, instead just import the things

06:32.920 --> 06:34.400
you actually need.

06:34.400 --> 06:38.640
Number twenty-two, depending on a specific directory structure for your project, a lot

06:38.640 --> 06:43.000
of beginner code assumes that all of your source files are going to be in one flat source

06:43.000 --> 06:44.160
directory.

06:44.160 --> 06:48.960
They probably unknowingly are depending on the fact that when you import something, Python

06:48.960 --> 06:51.360
checks for it in your system path.

06:51.360 --> 06:57.560
Python also adds the directory of the file being run to the path, so this usually works.

06:57.560 --> 07:01.080
However, this can really get you into trouble if you have multiple scripts that aren't

07:01.080 --> 07:02.840
in the same directory.

07:02.840 --> 07:07.440
Take the time to learn how to package your code and install it into your current environment.

07:07.600 --> 07:12.400
Number twenty-three, the common misconception that Python is not compiled.

07:12.400 --> 07:15.800
Have you ever seen those .pyc files next to your py files?

07:15.800 --> 07:18.320
Or maybe they were in a pycash directory.

07:18.320 --> 07:21.160
Those files are compiled Python code.

07:21.160 --> 07:25.480
But of course, Python is also an interpreted language, so what's going on?

07:25.480 --> 07:29.800
Well, Python is compiled, but it's not compiled all the way down to machine code, instead

07:29.800 --> 07:32.160
it's compiled to bytecode.

07:32.160 --> 07:34.880
That bytecode is then run by the interpreter.

07:34.880 --> 07:37.480
Number twenty-four, not following pep eight.

07:37.480 --> 07:39.440
Pep eight is nothing more than a style guide.

07:39.440 --> 07:41.720
It doesn't actually affect your code at runtime.

07:41.720 --> 07:46.240
Nevertheless, your coworkers, contributors, and friends will nag at you incessantly until

07:46.240 --> 07:47.640
you conform.

07:47.640 --> 07:51.520
At this point, whether it actually looks better or makes any difference at all is kind of

07:51.520 --> 07:52.840
irrelevant.

07:52.840 --> 07:55.440
Experts do it this way to avoid the nagging.

07:55.440 --> 08:01.200
And I saved the best for last, number twenty-five, pretty much anything to do with Python two.

08:01.200 --> 08:05.280
Python two hit its end of life years ago, and the only reason you should still be using

08:05.280 --> 08:09.360
it is if you already have millions of lines of Python two written and it would be too

08:09.360 --> 08:11.280
much work to migrate.

08:11.280 --> 08:14.840
All new projects moving forward should be using Python three.

08:14.840 --> 08:19.240
And with that comes dispelling some rumors leaking over from Python two.

08:19.240 --> 08:22.560
Even though X is really big, this code will execute instantly.

08:22.560 --> 08:24.720
Ranges are not created in memory.

08:24.720 --> 08:27.520
Even checking if something is in a range will happen quickly.

08:27.520 --> 08:30.600
Given the endpoints of the range, you don't need to construct all the numbers to tell

08:30.640 --> 08:32.400
whether something is in that range.

08:32.400 --> 08:35.960
You just check how it compares to the boundary elements, and that's exactly what this end

08:35.960 --> 08:36.960
does.

08:36.960 --> 08:39.560
There are also things like the change behavior of keys.

08:39.560 --> 08:42.680
This no longer creates a copy of the keys of the dictionary.

08:42.680 --> 08:44.520
Instead it produces a view.

08:44.520 --> 08:48.080
That means if you delete a key, it'll no longer be in the view either.

08:48.080 --> 08:51.400
There are so many of these Python two to three things that have changed.

08:51.400 --> 08:53.680
It could probably be its own whole video.

08:53.680 --> 08:56.720
So just always be sure to check the docs if you're not sure.

08:56.720 --> 09:00.120
As always, thank you to my patrons and donors for supporting me.

09:00.120 --> 09:03.760
If you liked the video, don't forget to comment, subscribe, and slap that like button

09:03.760 --> 09:05.640
an odd number of times.

09:05.640 --> 09:10.240
And if you especially liked the video, please consider becoming one of my patrons on Patreon.

09:10.240 --> 09:11.440
Thanks and see you next time.

