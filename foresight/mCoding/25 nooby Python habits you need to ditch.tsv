start	end	text
0	3480	Welcome to my list of the top things that Python noobs do.
3480	8820	I'm also giving away four professional licenses to PyCharm, so comment, hashtag PyCharm if
8820	10680	you want a chance to win.
10680	15240	Some of these are actual issues for your code, but a lot of them don't actually matter much.
15240	19560	Nevertheless, these things will tip people off to your inexperience, so whether you're
19560	23560	an actual noob looking to get better, or if you just want to catch any newbie habits
23560	26160	that you still hold on to, let's dive in.
26160	29240	Alright, newbie thing number one, manual string formatting.
29240	32600	AKA, putting things together with the plus sign.
32600	37160	Instead use F-strings, they're more readable, easier to write, and less prone to errors.
37160	38840	Number two, manually closing a file.
38840	42400	I can't tell you how many beginner tutorials recommend doing something like this.
42400	45240	Open the file, write to it, and then call close.
45240	49160	If this right call throws an exception, the file will never be closed.
49160	52640	Instead use a with statement which will ensure the file is closed even if an exception is
52640	53800	thrown.
53800	57840	On a similar note, number three is using try finally instead of a context manager.
57840	62800	I usually see this one from more experienced developers, but coming from a different language.
62800	66760	In Python, most resources that need to be closed have their own context manager.
66760	67840	Use it.
67840	70800	Number four, using a bear accept clause.
70800	75920	In Python, keyboard interrupts and system exits are propagated using exceptions.
75920	79280	That means, for example, a bear accept is going to catch something like the user hitting
79280	83120	control C. That's almost never what you actually want to do.
83120	86720	If you still want to be lazy, but you don't want to trap your user in a box, then use
86720	89040	an exit capital exception.
89040	92160	Or if you want to do the right thing, then catch the actual exception that's going to
92160	93400	be thrown.
93400	95800	Number five, thinking the carrot means exponentiation.
95800	98000	Nope, it's bitwise XOR.
98000	102200	Okay, that one's a really newbie one, but I gotta pad the list somehow, right?
102200	105880	Number six is any use of default mutable arguments.
105880	109560	Argument defaults are defined when the function is defined, not when it's run.
109560	113360	In this case, that means every call to the function is sharing the same list, meaning
113360	116400	the second time we call it, it's not starting out as the empty list.
116400	120080	It's starting out as the list containing zero from the previous call.
120080	121800	Probably not what you wanted.
121800	125480	If you want a mutable default, first set it to none and then check if it's none inside
125480	127920	the function, setting the default there.
127920	130160	Number seven, never using comprehensions.
130160	133440	Or if they do use comprehensions, only list comprehensions.
133440	138340	A lot of code can be made both shorter and clearer by using comprehension.
138340	142400	You can have dictionary, list, set, and even generator comprehensions.
142400	144480	Learn how to use them when they're appropriate.
144480	147240	Number eight, always using comprehensions.
147240	148240	I get it.
148240	153480	You just learned about comprehensions and now it's time to flex, but stop for a moment.
153480	156800	You don't need to turn every single loop into a comprehension.
156800	159200	Sometimes this actually makes things less readable.
159200	163520	I guess readability is really in the eye of the beholder, so you may not agree with this
163520	168720	particular example, but I hope you can agree that not every loop should be turned into
168720	170400	a comprehension.
170400	172960	Number nine, checking for a type with equals equals.
172960	177120	There are some rare cases where you do want to do this, but most of the time this is not
177120	178280	what you want.
178280	179760	The reason is inheritance.
179760	184000	A named tuple is a tuple, so this point class is a tuple.
184000	187680	But it's not literally the built-in tuple, it's a subclass.
187680	191800	In most cases, you should program in a way where you should be able to substitute a subclass
191800	193360	for its parent.
193360	198040	This is called the Liskov substitution principle and checking a type for equality is a violation
198040	199040	of it.
199040	203480	In those cases, what you probably wanted instead was an is instance check.
203480	207560	Number ten, using equals equals to check for none true and false.
207560	212080	Instead of equality, you should check for identity using the is comparison.
212080	215600	This is what equals equals was going to do anyway, so just cut out the middleman and
215600	217240	use is directly.
217240	220880	Eleven, using an if bool or if length check.
220880	224320	There's nothing particularly wrong about these, it's just that they're usually equivalent
224320	226240	to just a plain if x.
226240	230240	So using an if bool or if length check kind of just shows that you don't know the language
230240	231480	that well.
231480	234400	Number twelve, using the range length idiom.
234400	238120	A lot of beginners, especially those coming from other languages, think about loops in
238120	239720	terms of indices.
239720	243440	So they loop over the indices but only ever use them to grab out the elements.
243440	247200	Instead, just loop over the underlying container and get the elements directly.
247200	249560	It's much easier to read and less error prone.
249560	253720	If you did actually want to use the index though, you still shouldn't use range length,
253720	257400	use enumerate to get the index and the element at the same time.
257400	261080	Another reason I see people use this is to use I as kind of a synchronizing variable
261080	264000	to get corresponding elements from two different objects.
264000	267080	Of course, the better way to do that is using zip.
267080	270600	And if you still need the index, use enumerate zip.
270600	274480	Number thirteen, looping over the keys of a dictionary.
274480	276800	Don't you know, that's the default.
276800	280480	If you're modifying the dictionary as you're looping over it, then it would be okay to make
280480	282280	a copy of the keys.
282280	285360	Depending on the situation, this might add a little bit of clarity.
285360	288640	But even in this case, the dot keys is unnecessary.
288640	292320	Number fourteen, not knowing about the dictionary items method.
292320	295760	If you're looping over the keys of a dictionary and the first thing you do is grab the value
295760	300120	out for each key, then what you really want is to loop over the items of the dictionary,
300120	302000	which are key value pairs.
302000	304280	Number fifteen, not using tuple unpacking.
304280	308600	Do you have a tuple and want to get all of its elements out as separate variables?
308600	311680	Well you're in luck, that's exactly what tuple unpacking does.
311680	315200	Number sixteen, creating your own index counter variable.
315200	318920	If you're starting at zero and adding one to something at the end of every loop, then
318920	322000	once again what you really want is enumerate.
322000	324880	Number seventeen, using time dot time to time.
324880	328200	I think we gotta give the noobs a break on this one, how are they supposed to know that
328200	331120	time dot time is not for timing your code?
331120	335240	Time dot time is for telling you what time it currently is, and it's not as accurate
335240	337080	as using perf counter.
337080	341520	Subtracting two subsequent calls to perf counter gives you the most accurate way of measuring
341760	343840	how much time it took your code to run.
343840	347360	Number eighteen, littering your code with print statements instead of using the logging
347360	348520	module.
348520	352480	You can set up logging easily in your main function with your own custom format.
352480	355960	You can also set the logging level or take it as a parameter so that you can filter out
355960	358320	messages that you're not interested in.
358320	360240	There doesn't that look a lot better?
360240	365200	Nineteen, using shell equals true on any function in the sub-process library.
365200	369520	Shell equals true is the source of a lot of security problems, and let's be honest the
369520	372640	reason you probably did this in the first place is to avoid putting your arguments into
372640	373640	a list.
373640	378480	Number twenty, doing math or pretty much any kind of data analysis in Python.
378480	382680	Learn to use NumPy for array operations and learn to use pandas for more general data
382680	383680	analysis.
383680	388280	Twenty-one, using import star outside of an interactive session.
388280	392920	Import star usually litters your namespace with variables, instead just import the things
392920	394400	you actually need.
394400	398640	Number twenty-two, depending on a specific directory structure for your project, a lot
398640	403000	of beginner code assumes that all of your source files are going to be in one flat source
403000	404160	directory.
404160	408960	They probably unknowingly are depending on the fact that when you import something, Python
408960	411360	checks for it in your system path.
411360	417560	Python also adds the directory of the file being run to the path, so this usually works.
417560	421080	However, this can really get you into trouble if you have multiple scripts that aren't
421080	422840	in the same directory.
422840	427440	Take the time to learn how to package your code and install it into your current environment.
427600	432400	Number twenty-three, the common misconception that Python is not compiled.
432400	435800	Have you ever seen those .pyc files next to your py files?
435800	438320	Or maybe they were in a pycash directory.
438320	441160	Those files are compiled Python code.
441160	445480	But of course, Python is also an interpreted language, so what's going on?
445480	449800	Well, Python is compiled, but it's not compiled all the way down to machine code, instead
449800	452160	it's compiled to bytecode.
452160	454880	That bytecode is then run by the interpreter.
454880	457480	Number twenty-four, not following pep eight.
457480	459440	Pep eight is nothing more than a style guide.
459440	461720	It doesn't actually affect your code at runtime.
461720	466240	Nevertheless, your coworkers, contributors, and friends will nag at you incessantly until
466240	467640	you conform.
467640	471520	At this point, whether it actually looks better or makes any difference at all is kind of
471520	472840	irrelevant.
472840	475440	Experts do it this way to avoid the nagging.
475440	481200	And I saved the best for last, number twenty-five, pretty much anything to do with Python two.
481200	485280	Python two hit its end of life years ago, and the only reason you should still be using
485280	489360	it is if you already have millions of lines of Python two written and it would be too
489360	491280	much work to migrate.
491280	494840	All new projects moving forward should be using Python three.
494840	499240	And with that comes dispelling some rumors leaking over from Python two.
499240	502560	Even though X is really big, this code will execute instantly.
502560	504720	Ranges are not created in memory.
504720	507520	Even checking if something is in a range will happen quickly.
507520	510600	Given the endpoints of the range, you don't need to construct all the numbers to tell
510640	512400	whether something is in that range.
512400	515960	You just check how it compares to the boundary elements, and that's exactly what this end
515960	516960	does.
516960	519560	There are also things like the change behavior of keys.
519560	522680	This no longer creates a copy of the keys of the dictionary.
522680	524520	Instead it produces a view.
524520	528080	That means if you delete a key, it'll no longer be in the view either.
528080	531400	There are so many of these Python two to three things that have changed.
531400	533680	It could probably be its own whole video.
533680	536720	So just always be sure to check the docs if you're not sure.
536720	540120	As always, thank you to my patrons and donors for supporting me.
540120	543760	If you liked the video, don't forget to comment, subscribe, and slap that like button
543760	545640	an odd number of times.
545640	550240	And if you especially liked the video, please consider becoming one of my patrons on Patreon.
550240	551440	Thanks and see you next time.
