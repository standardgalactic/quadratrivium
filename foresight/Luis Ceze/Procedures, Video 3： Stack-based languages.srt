1
00:00:00,000 --> 00:00:15,760
Okay, so we just saw how a stack can be used to keep track of the return address in a

2
00:00:15,760 --> 00:00:17,600
procedure call.

3
00:00:17,600 --> 00:00:23,360
Let's take this a little bit further now and look at stack-based languages in general.

4
00:00:23,360 --> 00:00:25,600
That's the next part of this section.

5
00:00:26,560 --> 00:00:29,600
Stack-based languages are really common.

6
00:00:29,600 --> 00:00:32,960
That's in fact the majority of the languages we use today.

7
00:00:32,960 --> 00:00:38,760
They're languages that support recursion, namely a procedure that calls itself.

8
00:00:38,760 --> 00:00:45,200
So these are languages like C, Pascal, if you remember from the old days, and Java as well.

9
00:00:45,200 --> 00:00:50,720
To make it possible to support recursion in a programming language, code must be what

10
00:00:50,720 --> 00:00:58,680
we call re-entrant, meaning that we can have simultaneous instantiations of a single procedure.

11
00:00:58,680 --> 00:00:59,680
What does that mean?

12
00:00:59,680 --> 00:01:03,360
That means that we've just called the procedure and in the middle of executing it.

13
00:01:03,360 --> 00:01:09,360
And then that procedure can call itself again and start executing a new copy of itself.

14
00:01:09,360 --> 00:01:14,760
And that one can call itself again and execute a new copy of itself and so forth.

15
00:01:14,760 --> 00:01:20,080
So that's, you can imagine, is an interesting problem to try to keep track of all of that.

16
00:01:20,080 --> 00:01:24,560
And in order to make that happen, what we need to do is to make sure to have a place

17
00:01:24,560 --> 00:01:29,200
to store the information for each instantiation of that procedure.

18
00:01:29,200 --> 00:01:31,600
And what information do we need to hold on to?

19
00:01:31,600 --> 00:01:34,320
Well, that's called the procedure state.

20
00:01:34,320 --> 00:01:40,520
And that includes the arguments we called it with, any local variables it has to work

21
00:01:40,520 --> 00:01:46,920
on, and of course, a return address, a return pointer to where it should go in the procedure

22
00:01:46,920 --> 00:01:50,880
that called it, including potentially itself.

23
00:01:50,880 --> 00:01:56,280
And to do that, we're going to extend this stack discipline, okay?

24
00:01:56,280 --> 00:02:02,080
So basically the state for a given procedure is all this stuff above the three check marks

25
00:02:02,080 --> 00:02:08,440
there that are things I need for a limited amount of time while that procedure is executing.

26
00:02:08,440 --> 00:02:12,880
And then when it returns, I can remove that state.

27
00:02:12,880 --> 00:02:15,500
I don't need it anymore.

28
00:02:15,500 --> 00:02:20,820
So the callee, fortunately, always returns before its caller because we're returning

29
00:02:20,820 --> 00:02:26,620
back to the caller and then continuing the execution where we left off in the caller

30
00:02:26,620 --> 00:02:28,820
procedure.

31
00:02:28,820 --> 00:02:35,460
So one last definition, we're going to call these allocations on the stack frames, procedure

32
00:02:35,460 --> 00:02:38,700
frames or stack frames in general.

33
00:02:38,700 --> 00:02:46,460
And for each procedure instantiation, we will have all the state in one of these frames.

34
00:02:46,460 --> 00:02:52,860
So let's take a look at an example of a call chain, a string of procedure calls, right?

35
00:02:52,860 --> 00:03:01,820
So here we have some funny functions, the function u which calls the function who, okay?

36
00:03:01,820 --> 00:03:06,540
And we can see in the call chain that we've somehow started with the function, the procedure

37
00:03:06,540 --> 00:03:12,940
u and it then calls who, okay?

38
00:03:12,940 --> 00:03:21,380
Now the procedure who in its turn calls mi twice.

39
00:03:21,380 --> 00:03:23,880
And in between, it probably does some other things, okay?

40
00:03:23,880 --> 00:03:30,340
So we're going to call mi, then return back to this point and do some other stuff and

41
00:03:30,340 --> 00:03:32,740
then call mi again.

42
00:03:32,740 --> 00:03:41,660
So here we see the two calls to mi that happen one after the other in who.

43
00:03:41,660 --> 00:03:46,460
But the function mi is a recursive procedure that calls itself.

44
00:03:46,460 --> 00:03:52,580
So here's the definition of mi and you see that inside of it it calls itself again, right?

45
00:03:52,580 --> 00:03:56,220
You've already seen factorial functions that do this, for example.

46
00:03:56,220 --> 00:04:04,300
So mi here, you just noticed in the first call, called itself once and then that copy

47
00:04:04,300 --> 00:04:07,220
of mi called itself again.

48
00:04:07,220 --> 00:04:16,500
But then it stopped and returned and returned and then made the second call to mi here.

49
00:04:16,500 --> 00:04:22,660
And then mi returned again, back up to who and then who returned up to you and then

50
00:04:22,660 --> 00:04:26,660
you returned to wherever it was called from, okay?

51
00:04:26,660 --> 00:04:34,740
So here we see that chain descending down the tree of calls that we have here and basically

52
00:04:34,740 --> 00:04:38,780
following that path, okay?

53
00:04:38,780 --> 00:04:42,620
So let's see how this looks on the stack, okay?

54
00:04:42,620 --> 00:04:48,700
So let's take a review that stack frame concept again.

55
00:04:48,700 --> 00:04:57,140
In the Linux IA32 architecture, the contents of a stack frame includes the local variables,

56
00:04:57,140 --> 00:05:01,460
arguments to the function, any information about return addresses that it needs to go

57
00:05:01,460 --> 00:05:07,780
to and then maybe some temporary scratch space this function might need.

58
00:05:07,780 --> 00:05:12,620
Maybe things like it's another version of local variables, if you will, but maybe more

59
00:05:12,620 --> 00:05:13,620
temporary.

60
00:05:13,620 --> 00:05:14,620
All right.

61
00:05:14,620 --> 00:05:18,060
So here's the previous frame on the stack, okay?

62
00:05:18,060 --> 00:05:23,740
And when we call a function, we create a new frame for it by adjusting the stack pointer

63
00:05:23,740 --> 00:05:29,820
to create a space for all of these things that are going to have to go into that frame,

64
00:05:29,820 --> 00:05:31,060
okay?

65
00:05:31,060 --> 00:05:35,980
What we're going to do is since we have a pointer to the top of it in the stack pointer,

66
00:05:35,980 --> 00:05:41,220
we're also going to use another special register called the base pointer.

67
00:05:41,220 --> 00:05:48,060
You've seen this already, EBP, the extended base pointer register, to point to the bottom

68
00:05:48,060 --> 00:05:51,380
of that stack frame, okay?

69
00:05:51,380 --> 00:05:57,500
So the management then of these frames is such that when a procedure is first entered,

70
00:05:57,500 --> 00:06:02,540
we run its setup code that creates the stuff in this frame.

71
00:06:02,540 --> 00:06:08,540
And when we return, before we do that, we run some finish code, that sort of cleans

72
00:06:08,540 --> 00:06:16,060
up what's in this frame before changing the stack pointer to go back to the previous frame,

73
00:06:16,060 --> 00:06:17,060
all right?

74
00:06:17,060 --> 00:06:22,340
So again, let's take a look at how our example is going to do this, all right?

75
00:06:22,340 --> 00:06:30,540
So here, remember, is our call chain that went through this sequence of things, calls

76
00:06:30,540 --> 00:06:33,660
going down, returns coming back up.

77
00:06:33,660 --> 00:06:39,500
So here we are in the middle of a procedure U, and we're about to call who, right?

78
00:06:39,500 --> 00:06:43,460
So here's our U stack frame on the stack.

79
00:06:43,460 --> 00:06:48,940
There's a base pointer to the bottom of it, stack pointer to the top of it.

80
00:06:48,940 --> 00:06:55,060
That helps us to find that size of that stack, the size of that frame, okay?

81
00:06:55,060 --> 00:07:00,980
But now we've just called who, and we've put a new frame on the stack, okay?

82
00:07:00,980 --> 00:07:07,580
And of course, our base pointer got adjusted, and our stack pointer got adjusted.

83
00:07:07,580 --> 00:07:12,500
And you'll recall from some of the previous examples, you might have seen assembly language

84
00:07:12,500 --> 00:07:13,500
examples.

85
00:07:13,500 --> 00:07:19,060
You might have seen the old EVP saved away first before we did this, so that we can reuse

86
00:07:19,060 --> 00:07:20,940
that register, okay?

87
00:07:20,940 --> 00:07:26,540
The next thing that's going to happen is we're going to call MI, okay?

88
00:07:26,540 --> 00:07:30,180
And here we go, another stack frame is put onto the stack.

89
00:07:30,180 --> 00:07:35,620
Then we've had to save that previous value of EVP that was there, because we had to change

90
00:07:35,620 --> 00:07:37,300
that again.

91
00:07:37,300 --> 00:07:41,500
So we've had to find a place to put that.

92
00:07:41,500 --> 00:07:46,100
We're going to go along and execute MI now, and it's going to call itself.

93
00:07:46,100 --> 00:07:51,220
So we're going to see another stack frame from MI appear on the stack, again with updated

94
00:07:51,220 --> 00:07:53,540
pointers.

95
00:07:53,540 --> 00:07:58,340
And yet a third one, as it calls itself, yet again, okay?

96
00:07:58,340 --> 00:08:04,460
So now we're at the bottom here of our call chain, and we're about to execute our first

97
00:08:04,460 --> 00:08:08,540
return in the third copy of MI.

98
00:08:08,540 --> 00:08:15,100
So when we do that, we remove its stack frame, put the EVP and ESP back to where they were

99
00:08:15,100 --> 00:08:19,700
for the previous instantiation of MI, okay?

100
00:08:20,140 --> 00:08:28,380
And we're now going to return from that one and remove that from the stack by adjusting

101
00:08:28,380 --> 00:08:30,780
the pointers again.

102
00:08:30,780 --> 00:08:35,700
So we have a new value for EVP, a new value for ESP, okay?

103
00:08:35,700 --> 00:08:42,820
And now our next thing is to return from this instance of MI back to who.

104
00:08:42,820 --> 00:08:48,580
And when we do that, we'll eliminate the last of those frames for MI, and we're now back

105
00:08:48,580 --> 00:08:54,380
at the frame for who, with its base pointer and stack pointer at either end.

106
00:08:54,380 --> 00:08:58,580
So we're now in the middle of the procedure who, and we're about to do our second call

107
00:08:58,580 --> 00:09:00,460
to MI there.

108
00:09:00,460 --> 00:09:05,460
So that'll put another copy of MI's stack frame on the stack.

109
00:09:05,460 --> 00:09:10,380
We'll return from that back to who, and then we're done with who, so we'll return back

110
00:09:10,380 --> 00:09:13,860
to you, and just have that left on the stack.

