{"text": " Okay, so we just saw how a stack can be used to keep track of the return address in a procedure call. Let's take this a little bit further now and look at stack-based languages in general. That's the next part of this section. Stack-based languages are really common. That's in fact the majority of the languages we use today. They're languages that support recursion, namely a procedure that calls itself. So these are languages like C, Pascal, if you remember from the old days, and Java as well. To make it possible to support recursion in a programming language, code must be what we call re-entrant, meaning that we can have simultaneous instantiations of a single procedure. What does that mean? That means that we've just called the procedure and in the middle of executing it. And then that procedure can call itself again and start executing a new copy of itself. And that one can call itself again and execute a new copy of itself and so forth. So that's, you can imagine, is an interesting problem to try to keep track of all of that. And in order to make that happen, what we need to do is to make sure to have a place to store the information for each instantiation of that procedure. And what information do we need to hold on to? Well, that's called the procedure state. And that includes the arguments we called it with, any local variables it has to work on, and of course, a return address, a return pointer to where it should go in the procedure that called it, including potentially itself. And to do that, we're going to extend this stack discipline, okay? So basically the state for a given procedure is all this stuff above the three check marks there that are things I need for a limited amount of time while that procedure is executing. And then when it returns, I can remove that state. I don't need it anymore. So the callee, fortunately, always returns before its caller because we're returning back to the caller and then continuing the execution where we left off in the caller procedure. So one last definition, we're going to call these allocations on the stack frames, procedure frames or stack frames in general. And for each procedure instantiation, we will have all the state in one of these frames. So let's take a look at an example of a call chain, a string of procedure calls, right? So here we have some funny functions, the function u which calls the function who, okay? And we can see in the call chain that we've somehow started with the function, the procedure u and it then calls who, okay? Now the procedure who in its turn calls mi twice. And in between, it probably does some other things, okay? So we're going to call mi, then return back to this point and do some other stuff and then call mi again. So here we see the two calls to mi that happen one after the other in who. But the function mi is a recursive procedure that calls itself. So here's the definition of mi and you see that inside of it it calls itself again, right? You've already seen factorial functions that do this, for example. So mi here, you just noticed in the first call, called itself once and then that copy of mi called itself again. But then it stopped and returned and returned and then made the second call to mi here. And then mi returned again, back up to who and then who returned up to you and then you returned to wherever it was called from, okay? So here we see that chain descending down the tree of calls that we have here and basically following that path, okay? So let's see how this looks on the stack, okay? So let's take a review that stack frame concept again. In the Linux IA32 architecture, the contents of a stack frame includes the local variables, arguments to the function, any information about return addresses that it needs to go to and then maybe some temporary scratch space this function might need. Maybe things like it's another version of local variables, if you will, but maybe more temporary. All right. So here's the previous frame on the stack, okay? And when we call a function, we create a new frame for it by adjusting the stack pointer to create a space for all of these things that are going to have to go into that frame, okay? What we're going to do is since we have a pointer to the top of it in the stack pointer, we're also going to use another special register called the base pointer. You've seen this already, EBP, the extended base pointer register, to point to the bottom of that stack frame, okay? So the management then of these frames is such that when a procedure is first entered, we run its setup code that creates the stuff in this frame. And when we return, before we do that, we run some finish code, that sort of cleans up what's in this frame before changing the stack pointer to go back to the previous frame, all right? So again, let's take a look at how our example is going to do this, all right? So here, remember, is our call chain that went through this sequence of things, calls going down, returns coming back up. So here we are in the middle of a procedure U, and we're about to call who, right? So here's our U stack frame on the stack. There's a base pointer to the bottom of it, stack pointer to the top of it. That helps us to find that size of that stack, the size of that frame, okay? But now we've just called who, and we've put a new frame on the stack, okay? And of course, our base pointer got adjusted, and our stack pointer got adjusted. And you'll recall from some of the previous examples, you might have seen assembly language examples. You might have seen the old EVP saved away first before we did this, so that we can reuse that register, okay? The next thing that's going to happen is we're going to call MI, okay? And here we go, another stack frame is put onto the stack. Then we've had to save that previous value of EVP that was there, because we had to change that again. So we've had to find a place to put that. We're going to go along and execute MI now, and it's going to call itself. So we're going to see another stack frame from MI appear on the stack, again with updated pointers. And yet a third one, as it calls itself, yet again, okay? So now we're at the bottom here of our call chain, and we're about to execute our first return in the third copy of MI. So when we do that, we remove its stack frame, put the EVP and ESP back to where they were for the previous instantiation of MI, okay? And we're now going to return from that one and remove that from the stack by adjusting the pointers again. So we have a new value for EVP, a new value for ESP, okay? And now our next thing is to return from this instance of MI back to who. And when we do that, we'll eliminate the last of those frames for MI, and we're now back at the frame for who, with its base pointer and stack pointer at either end. So we're now in the middle of the procedure who, and we're about to do our second call to MI there. So that'll put another copy of MI's stack frame on the stack. We'll return from that back to who, and then we're done with who, so we'll return back to you, and just have that left on the stack.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 15.76, "text": " Okay, so we just saw how a stack can be used to keep track of the return address in a", "tokens": [50364, 1033, 11, 370, 321, 445, 1866, 577, 257, 8630, 393, 312, 1143, 281, 1066, 2837, 295, 264, 2736, 2985, 294, 257, 51152], "temperature": 0.0, "avg_logprob": -0.180816404281124, "compression_ratio": 1.421383647798742, "no_speech_prob": 0.02757260575890541}, {"id": 1, "seek": 0, "start": 15.76, "end": 17.6, "text": " procedure call.", "tokens": [51152, 10747, 818, 13, 51244], "temperature": 0.0, "avg_logprob": -0.180816404281124, "compression_ratio": 1.421383647798742, "no_speech_prob": 0.02757260575890541}, {"id": 2, "seek": 0, "start": 17.6, "end": 23.36, "text": " Let's take this a little bit further now and look at stack-based languages in general.", "tokens": [51244, 961, 311, 747, 341, 257, 707, 857, 3052, 586, 293, 574, 412, 8630, 12, 6032, 8650, 294, 2674, 13, 51532], "temperature": 0.0, "avg_logprob": -0.180816404281124, "compression_ratio": 1.421383647798742, "no_speech_prob": 0.02757260575890541}, {"id": 3, "seek": 0, "start": 23.36, "end": 25.6, "text": " That's the next part of this section.", "tokens": [51532, 663, 311, 264, 958, 644, 295, 341, 3541, 13, 51644], "temperature": 0.0, "avg_logprob": -0.180816404281124, "compression_ratio": 1.421383647798742, "no_speech_prob": 0.02757260575890541}, {"id": 4, "seek": 2560, "start": 26.560000000000002, "end": 29.6, "text": " Stack-based languages are really common.", "tokens": [50412, 37649, 12, 6032, 8650, 366, 534, 2689, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1616428747944448, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.003482731757685542}, {"id": 5, "seek": 2560, "start": 29.6, "end": 32.96, "text": " That's in fact the majority of the languages we use today.", "tokens": [50564, 663, 311, 294, 1186, 264, 6286, 295, 264, 8650, 321, 764, 965, 13, 50732], "temperature": 0.0, "avg_logprob": -0.1616428747944448, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.003482731757685542}, {"id": 6, "seek": 2560, "start": 32.96, "end": 38.760000000000005, "text": " They're languages that support recursion, namely a procedure that calls itself.", "tokens": [50732, 814, 434, 8650, 300, 1406, 20560, 313, 11, 20926, 257, 10747, 300, 5498, 2564, 13, 51022], "temperature": 0.0, "avg_logprob": -0.1616428747944448, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.003482731757685542}, {"id": 7, "seek": 2560, "start": 38.760000000000005, "end": 45.2, "text": " So these are languages like C, Pascal, if you remember from the old days, and Java as well.", "tokens": [51022, 407, 613, 366, 8650, 411, 383, 11, 41723, 11, 498, 291, 1604, 490, 264, 1331, 1708, 11, 293, 10745, 382, 731, 13, 51344], "temperature": 0.0, "avg_logprob": -0.1616428747944448, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.003482731757685542}, {"id": 8, "seek": 2560, "start": 45.2, "end": 50.72, "text": " To make it possible to support recursion in a programming language, code must be what", "tokens": [51344, 1407, 652, 309, 1944, 281, 1406, 20560, 313, 294, 257, 9410, 2856, 11, 3089, 1633, 312, 437, 51620], "temperature": 0.0, "avg_logprob": -0.1616428747944448, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.003482731757685542}, {"id": 9, "seek": 5072, "start": 50.72, "end": 58.68, "text": " we call re-entrant, meaning that we can have simultaneous instantiations of a single procedure.", "tokens": [50364, 321, 818, 319, 12, 317, 7541, 11, 3620, 300, 321, 393, 362, 46218, 9836, 72, 763, 295, 257, 2167, 10747, 13, 50762], "temperature": 0.0, "avg_logprob": -0.10725514930591248, "compression_ratio": 1.9008264462809918, "no_speech_prob": 0.047417111694812775}, {"id": 10, "seek": 5072, "start": 58.68, "end": 59.68, "text": " What does that mean?", "tokens": [50762, 708, 775, 300, 914, 30, 50812], "temperature": 0.0, "avg_logprob": -0.10725514930591248, "compression_ratio": 1.9008264462809918, "no_speech_prob": 0.047417111694812775}, {"id": 11, "seek": 5072, "start": 59.68, "end": 63.36, "text": " That means that we've just called the procedure and in the middle of executing it.", "tokens": [50812, 663, 1355, 300, 321, 600, 445, 1219, 264, 10747, 293, 294, 264, 2808, 295, 32368, 309, 13, 50996], "temperature": 0.0, "avg_logprob": -0.10725514930591248, "compression_ratio": 1.9008264462809918, "no_speech_prob": 0.047417111694812775}, {"id": 12, "seek": 5072, "start": 63.36, "end": 69.36, "text": " And then that procedure can call itself again and start executing a new copy of itself.", "tokens": [50996, 400, 550, 300, 10747, 393, 818, 2564, 797, 293, 722, 32368, 257, 777, 5055, 295, 2564, 13, 51296], "temperature": 0.0, "avg_logprob": -0.10725514930591248, "compression_ratio": 1.9008264462809918, "no_speech_prob": 0.047417111694812775}, {"id": 13, "seek": 5072, "start": 69.36, "end": 74.75999999999999, "text": " And that one can call itself again and execute a new copy of itself and so forth.", "tokens": [51296, 400, 300, 472, 393, 818, 2564, 797, 293, 14483, 257, 777, 5055, 295, 2564, 293, 370, 5220, 13, 51566], "temperature": 0.0, "avg_logprob": -0.10725514930591248, "compression_ratio": 1.9008264462809918, "no_speech_prob": 0.047417111694812775}, {"id": 14, "seek": 5072, "start": 74.75999999999999, "end": 80.08, "text": " So that's, you can imagine, is an interesting problem to try to keep track of all of that.", "tokens": [51566, 407, 300, 311, 11, 291, 393, 3811, 11, 307, 364, 1880, 1154, 281, 853, 281, 1066, 2837, 295, 439, 295, 300, 13, 51832], "temperature": 0.0, "avg_logprob": -0.10725514930591248, "compression_ratio": 1.9008264462809918, "no_speech_prob": 0.047417111694812775}, {"id": 15, "seek": 8008, "start": 80.08, "end": 84.56, "text": " And in order to make that happen, what we need to do is to make sure to have a place", "tokens": [50364, 400, 294, 1668, 281, 652, 300, 1051, 11, 437, 321, 643, 281, 360, 307, 281, 652, 988, 281, 362, 257, 1081, 50588], "temperature": 0.0, "avg_logprob": -0.14203658331008184, "compression_ratio": 1.793991416309013, "no_speech_prob": 0.001169394119642675}, {"id": 16, "seek": 8008, "start": 84.56, "end": 89.2, "text": " to store the information for each instantiation of that procedure.", "tokens": [50588, 281, 3531, 264, 1589, 337, 1184, 9836, 6642, 295, 300, 10747, 13, 50820], "temperature": 0.0, "avg_logprob": -0.14203658331008184, "compression_ratio": 1.793991416309013, "no_speech_prob": 0.001169394119642675}, {"id": 17, "seek": 8008, "start": 89.2, "end": 91.6, "text": " And what information do we need to hold on to?", "tokens": [50820, 400, 437, 1589, 360, 321, 643, 281, 1797, 322, 281, 30, 50940], "temperature": 0.0, "avg_logprob": -0.14203658331008184, "compression_ratio": 1.793991416309013, "no_speech_prob": 0.001169394119642675}, {"id": 18, "seek": 8008, "start": 91.6, "end": 94.32, "text": " Well, that's called the procedure state.", "tokens": [50940, 1042, 11, 300, 311, 1219, 264, 10747, 1785, 13, 51076], "temperature": 0.0, "avg_logprob": -0.14203658331008184, "compression_ratio": 1.793991416309013, "no_speech_prob": 0.001169394119642675}, {"id": 19, "seek": 8008, "start": 94.32, "end": 100.52, "text": " And that includes the arguments we called it with, any local variables it has to work", "tokens": [51076, 400, 300, 5974, 264, 12869, 321, 1219, 309, 365, 11, 604, 2654, 9102, 309, 575, 281, 589, 51386], "temperature": 0.0, "avg_logprob": -0.14203658331008184, "compression_ratio": 1.793991416309013, "no_speech_prob": 0.001169394119642675}, {"id": 20, "seek": 8008, "start": 100.52, "end": 106.92, "text": " on, and of course, a return address, a return pointer to where it should go in the procedure", "tokens": [51386, 322, 11, 293, 295, 1164, 11, 257, 2736, 2985, 11, 257, 2736, 23918, 281, 689, 309, 820, 352, 294, 264, 10747, 51706], "temperature": 0.0, "avg_logprob": -0.14203658331008184, "compression_ratio": 1.793991416309013, "no_speech_prob": 0.001169394119642675}, {"id": 21, "seek": 10692, "start": 106.92, "end": 110.88, "text": " that called it, including potentially itself.", "tokens": [50364, 300, 1219, 309, 11, 3009, 7263, 2564, 13, 50562], "temperature": 0.0, "avg_logprob": -0.11590384400409201, "compression_ratio": 1.6244541484716157, "no_speech_prob": 0.014062722213566303}, {"id": 22, "seek": 10692, "start": 110.88, "end": 116.28, "text": " And to do that, we're going to extend this stack discipline, okay?", "tokens": [50562, 400, 281, 360, 300, 11, 321, 434, 516, 281, 10101, 341, 8630, 13635, 11, 1392, 30, 50832], "temperature": 0.0, "avg_logprob": -0.11590384400409201, "compression_ratio": 1.6244541484716157, "no_speech_prob": 0.014062722213566303}, {"id": 23, "seek": 10692, "start": 116.28, "end": 122.08, "text": " So basically the state for a given procedure is all this stuff above the three check marks", "tokens": [50832, 407, 1936, 264, 1785, 337, 257, 2212, 10747, 307, 439, 341, 1507, 3673, 264, 1045, 1520, 10640, 51122], "temperature": 0.0, "avg_logprob": -0.11590384400409201, "compression_ratio": 1.6244541484716157, "no_speech_prob": 0.014062722213566303}, {"id": 24, "seek": 10692, "start": 122.08, "end": 128.44, "text": " there that are things I need for a limited amount of time while that procedure is executing.", "tokens": [51122, 456, 300, 366, 721, 286, 643, 337, 257, 5567, 2372, 295, 565, 1339, 300, 10747, 307, 32368, 13, 51440], "temperature": 0.0, "avg_logprob": -0.11590384400409201, "compression_ratio": 1.6244541484716157, "no_speech_prob": 0.014062722213566303}, {"id": 25, "seek": 10692, "start": 128.44, "end": 132.88, "text": " And then when it returns, I can remove that state.", "tokens": [51440, 400, 550, 562, 309, 11247, 11, 286, 393, 4159, 300, 1785, 13, 51662], "temperature": 0.0, "avg_logprob": -0.11590384400409201, "compression_ratio": 1.6244541484716157, "no_speech_prob": 0.014062722213566303}, {"id": 26, "seek": 10692, "start": 132.88, "end": 135.5, "text": " I don't need it anymore.", "tokens": [51662, 286, 500, 380, 643, 309, 3602, 13, 51793], "temperature": 0.0, "avg_logprob": -0.11590384400409201, "compression_ratio": 1.6244541484716157, "no_speech_prob": 0.014062722213566303}, {"id": 27, "seek": 13550, "start": 135.5, "end": 140.82, "text": " So the callee, fortunately, always returns before its caller because we're returning", "tokens": [50364, 407, 264, 818, 1653, 11, 25511, 11, 1009, 11247, 949, 1080, 48324, 570, 321, 434, 12678, 50630], "temperature": 0.0, "avg_logprob": -0.16992383533053929, "compression_ratio": 1.7303370786516854, "no_speech_prob": 4.400073885335587e-05}, {"id": 28, "seek": 13550, "start": 140.82, "end": 146.62, "text": " back to the caller and then continuing the execution where we left off in the caller", "tokens": [50630, 646, 281, 264, 48324, 293, 550, 9289, 264, 15058, 689, 321, 1411, 766, 294, 264, 48324, 50920], "temperature": 0.0, "avg_logprob": -0.16992383533053929, "compression_ratio": 1.7303370786516854, "no_speech_prob": 4.400073885335587e-05}, {"id": 29, "seek": 13550, "start": 146.62, "end": 148.82, "text": " procedure.", "tokens": [50920, 10747, 13, 51030], "temperature": 0.0, "avg_logprob": -0.16992383533053929, "compression_ratio": 1.7303370786516854, "no_speech_prob": 4.400073885335587e-05}, {"id": 30, "seek": 13550, "start": 148.82, "end": 155.46, "text": " So one last definition, we're going to call these allocations on the stack frames, procedure", "tokens": [51030, 407, 472, 1036, 7123, 11, 321, 434, 516, 281, 818, 613, 12660, 763, 322, 264, 8630, 12083, 11, 10747, 51362], "temperature": 0.0, "avg_logprob": -0.16992383533053929, "compression_ratio": 1.7303370786516854, "no_speech_prob": 4.400073885335587e-05}, {"id": 31, "seek": 13550, "start": 155.46, "end": 158.7, "text": " frames or stack frames in general.", "tokens": [51362, 12083, 420, 8630, 12083, 294, 2674, 13, 51524], "temperature": 0.0, "avg_logprob": -0.16992383533053929, "compression_ratio": 1.7303370786516854, "no_speech_prob": 4.400073885335587e-05}, {"id": 32, "seek": 15870, "start": 158.7, "end": 166.45999999999998, "text": " And for each procedure instantiation, we will have all the state in one of these frames.", "tokens": [50364, 400, 337, 1184, 10747, 9836, 6642, 11, 321, 486, 362, 439, 264, 1785, 294, 472, 295, 613, 12083, 13, 50752], "temperature": 0.0, "avg_logprob": -0.13409915666901664, "compression_ratio": 1.7294685990338163, "no_speech_prob": 0.0023966957814991474}, {"id": 33, "seek": 15870, "start": 166.45999999999998, "end": 172.85999999999999, "text": " So let's take a look at an example of a call chain, a string of procedure calls, right?", "tokens": [50752, 407, 718, 311, 747, 257, 574, 412, 364, 1365, 295, 257, 818, 5021, 11, 257, 6798, 295, 10747, 5498, 11, 558, 30, 51072], "temperature": 0.0, "avg_logprob": -0.13409915666901664, "compression_ratio": 1.7294685990338163, "no_speech_prob": 0.0023966957814991474}, {"id": 34, "seek": 15870, "start": 172.85999999999999, "end": 181.82, "text": " So here we have some funny functions, the function u which calls the function who, okay?", "tokens": [51072, 407, 510, 321, 362, 512, 4074, 6828, 11, 264, 2445, 344, 597, 5498, 264, 2445, 567, 11, 1392, 30, 51520], "temperature": 0.0, "avg_logprob": -0.13409915666901664, "compression_ratio": 1.7294685990338163, "no_speech_prob": 0.0023966957814991474}, {"id": 35, "seek": 15870, "start": 181.82, "end": 186.54, "text": " And we can see in the call chain that we've somehow started with the function, the procedure", "tokens": [51520, 400, 321, 393, 536, 294, 264, 818, 5021, 300, 321, 600, 6063, 1409, 365, 264, 2445, 11, 264, 10747, 51756], "temperature": 0.0, "avg_logprob": -0.13409915666901664, "compression_ratio": 1.7294685990338163, "no_speech_prob": 0.0023966957814991474}, {"id": 36, "seek": 18654, "start": 186.54, "end": 192.94, "text": " u and it then calls who, okay?", "tokens": [50364, 344, 293, 309, 550, 5498, 567, 11, 1392, 30, 50684], "temperature": 0.0, "avg_logprob": -0.14786135809762138, "compression_ratio": 1.5345911949685536, "no_speech_prob": 0.0031725820153951645}, {"id": 37, "seek": 18654, "start": 192.94, "end": 201.38, "text": " Now the procedure who in its turn calls mi twice.", "tokens": [50684, 823, 264, 10747, 567, 294, 1080, 1261, 5498, 2752, 6091, 13, 51106], "temperature": 0.0, "avg_logprob": -0.14786135809762138, "compression_ratio": 1.5345911949685536, "no_speech_prob": 0.0031725820153951645}, {"id": 38, "seek": 18654, "start": 201.38, "end": 203.88, "text": " And in between, it probably does some other things, okay?", "tokens": [51106, 400, 294, 1296, 11, 309, 1391, 775, 512, 661, 721, 11, 1392, 30, 51231], "temperature": 0.0, "avg_logprob": -0.14786135809762138, "compression_ratio": 1.5345911949685536, "no_speech_prob": 0.0031725820153951645}, {"id": 39, "seek": 18654, "start": 203.88, "end": 210.34, "text": " So we're going to call mi, then return back to this point and do some other stuff and", "tokens": [51231, 407, 321, 434, 516, 281, 818, 2752, 11, 550, 2736, 646, 281, 341, 935, 293, 360, 512, 661, 1507, 293, 51554], "temperature": 0.0, "avg_logprob": -0.14786135809762138, "compression_ratio": 1.5345911949685536, "no_speech_prob": 0.0031725820153951645}, {"id": 40, "seek": 18654, "start": 210.34, "end": 212.73999999999998, "text": " then call mi again.", "tokens": [51554, 550, 818, 2752, 797, 13, 51674], "temperature": 0.0, "avg_logprob": -0.14786135809762138, "compression_ratio": 1.5345911949685536, "no_speech_prob": 0.0031725820153951645}, {"id": 41, "seek": 21274, "start": 212.74, "end": 221.66, "text": " So here we see the two calls to mi that happen one after the other in who.", "tokens": [50364, 407, 510, 321, 536, 264, 732, 5498, 281, 2752, 300, 1051, 472, 934, 264, 661, 294, 567, 13, 50810], "temperature": 0.0, "avg_logprob": -0.11718409220377604, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.0011694836430251598}, {"id": 42, "seek": 21274, "start": 221.66, "end": 226.46, "text": " But the function mi is a recursive procedure that calls itself.", "tokens": [50810, 583, 264, 2445, 2752, 307, 257, 20560, 488, 10747, 300, 5498, 2564, 13, 51050], "temperature": 0.0, "avg_logprob": -0.11718409220377604, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.0011694836430251598}, {"id": 43, "seek": 21274, "start": 226.46, "end": 232.58, "text": " So here's the definition of mi and you see that inside of it it calls itself again, right?", "tokens": [51050, 407, 510, 311, 264, 7123, 295, 2752, 293, 291, 536, 300, 1854, 295, 309, 309, 5498, 2564, 797, 11, 558, 30, 51356], "temperature": 0.0, "avg_logprob": -0.11718409220377604, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.0011694836430251598}, {"id": 44, "seek": 21274, "start": 232.58, "end": 236.22, "text": " You've already seen factorial functions that do this, for example.", "tokens": [51356, 509, 600, 1217, 1612, 36916, 6828, 300, 360, 341, 11, 337, 1365, 13, 51538], "temperature": 0.0, "avg_logprob": -0.11718409220377604, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.0011694836430251598}, {"id": 45, "seek": 23622, "start": 236.22, "end": 244.3, "text": " So mi here, you just noticed in the first call, called itself once and then that copy", "tokens": [50364, 407, 2752, 510, 11, 291, 445, 5694, 294, 264, 700, 818, 11, 1219, 2564, 1564, 293, 550, 300, 5055, 50768], "temperature": 0.0, "avg_logprob": -0.1725320021311442, "compression_ratio": 1.844155844155844, "no_speech_prob": 0.007121133618056774}, {"id": 46, "seek": 23622, "start": 244.3, "end": 247.22, "text": " of mi called itself again.", "tokens": [50768, 295, 2752, 1219, 2564, 797, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1725320021311442, "compression_ratio": 1.844155844155844, "no_speech_prob": 0.007121133618056774}, {"id": 47, "seek": 23622, "start": 247.22, "end": 256.5, "text": " But then it stopped and returned and returned and then made the second call to mi here.", "tokens": [50914, 583, 550, 309, 5936, 293, 8752, 293, 8752, 293, 550, 1027, 264, 1150, 818, 281, 2752, 510, 13, 51378], "temperature": 0.0, "avg_logprob": -0.1725320021311442, "compression_ratio": 1.844155844155844, "no_speech_prob": 0.007121133618056774}, {"id": 48, "seek": 23622, "start": 256.5, "end": 262.66, "text": " And then mi returned again, back up to who and then who returned up to you and then", "tokens": [51378, 400, 550, 2752, 8752, 797, 11, 646, 493, 281, 567, 293, 550, 567, 8752, 493, 281, 291, 293, 550, 51686], "temperature": 0.0, "avg_logprob": -0.1725320021311442, "compression_ratio": 1.844155844155844, "no_speech_prob": 0.007121133618056774}, {"id": 49, "seek": 26266, "start": 262.66, "end": 266.66, "text": " you returned to wherever it was called from, okay?", "tokens": [50364, 291, 8752, 281, 8660, 309, 390, 1219, 490, 11, 1392, 30, 50564], "temperature": 0.0, "avg_logprob": -0.11177334520551893, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.018545038998126984}, {"id": 50, "seek": 26266, "start": 266.66, "end": 274.74, "text": " So here we see that chain descending down the tree of calls that we have here and basically", "tokens": [50564, 407, 510, 321, 536, 300, 5021, 40182, 760, 264, 4230, 295, 5498, 300, 321, 362, 510, 293, 1936, 50968], "temperature": 0.0, "avg_logprob": -0.11177334520551893, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.018545038998126984}, {"id": 51, "seek": 26266, "start": 274.74, "end": 278.78000000000003, "text": " following that path, okay?", "tokens": [50968, 3480, 300, 3100, 11, 1392, 30, 51170], "temperature": 0.0, "avg_logprob": -0.11177334520551893, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.018545038998126984}, {"id": 52, "seek": 26266, "start": 278.78000000000003, "end": 282.62, "text": " So let's see how this looks on the stack, okay?", "tokens": [51170, 407, 718, 311, 536, 577, 341, 1542, 322, 264, 8630, 11, 1392, 30, 51362], "temperature": 0.0, "avg_logprob": -0.11177334520551893, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.018545038998126984}, {"id": 53, "seek": 26266, "start": 282.62, "end": 288.70000000000005, "text": " So let's take a review that stack frame concept again.", "tokens": [51362, 407, 718, 311, 747, 257, 3131, 300, 8630, 3920, 3410, 797, 13, 51666], "temperature": 0.0, "avg_logprob": -0.11177334520551893, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.018545038998126984}, {"id": 54, "seek": 28870, "start": 288.7, "end": 297.14, "text": " In the Linux IA32 architecture, the contents of a stack frame includes the local variables,", "tokens": [50364, 682, 264, 18734, 286, 32, 11440, 9482, 11, 264, 15768, 295, 257, 8630, 3920, 5974, 264, 2654, 9102, 11, 50786], "temperature": 0.0, "avg_logprob": -0.17110853779072666, "compression_ratio": 1.6062992125984252, "no_speech_prob": 0.03963350132107735}, {"id": 55, "seek": 28870, "start": 297.14, "end": 301.46, "text": " arguments to the function, any information about return addresses that it needs to go", "tokens": [50786, 12869, 281, 264, 2445, 11, 604, 1589, 466, 2736, 16862, 300, 309, 2203, 281, 352, 51002], "temperature": 0.0, "avg_logprob": -0.17110853779072666, "compression_ratio": 1.6062992125984252, "no_speech_prob": 0.03963350132107735}, {"id": 56, "seek": 28870, "start": 301.46, "end": 307.78, "text": " to and then maybe some temporary scratch space this function might need.", "tokens": [51002, 281, 293, 550, 1310, 512, 13413, 8459, 1901, 341, 2445, 1062, 643, 13, 51318], "temperature": 0.0, "avg_logprob": -0.17110853779072666, "compression_ratio": 1.6062992125984252, "no_speech_prob": 0.03963350132107735}, {"id": 57, "seek": 28870, "start": 307.78, "end": 312.62, "text": " Maybe things like it's another version of local variables, if you will, but maybe more", "tokens": [51318, 2704, 721, 411, 309, 311, 1071, 3037, 295, 2654, 9102, 11, 498, 291, 486, 11, 457, 1310, 544, 51560], "temperature": 0.0, "avg_logprob": -0.17110853779072666, "compression_ratio": 1.6062992125984252, "no_speech_prob": 0.03963350132107735}, {"id": 58, "seek": 28870, "start": 312.62, "end": 313.62, "text": " temporary.", "tokens": [51560, 13413, 13, 51610], "temperature": 0.0, "avg_logprob": -0.17110853779072666, "compression_ratio": 1.6062992125984252, "no_speech_prob": 0.03963350132107735}, {"id": 59, "seek": 28870, "start": 313.62, "end": 314.62, "text": " All right.", "tokens": [51610, 1057, 558, 13, 51660], "temperature": 0.0, "avg_logprob": -0.17110853779072666, "compression_ratio": 1.6062992125984252, "no_speech_prob": 0.03963350132107735}, {"id": 60, "seek": 28870, "start": 314.62, "end": 318.06, "text": " So here's the previous frame on the stack, okay?", "tokens": [51660, 407, 510, 311, 264, 3894, 3920, 322, 264, 8630, 11, 1392, 30, 51832], "temperature": 0.0, "avg_logprob": -0.17110853779072666, "compression_ratio": 1.6062992125984252, "no_speech_prob": 0.03963350132107735}, {"id": 61, "seek": 31806, "start": 318.06, "end": 323.74, "text": " And when we call a function, we create a new frame for it by adjusting the stack pointer", "tokens": [50364, 400, 562, 321, 818, 257, 2445, 11, 321, 1884, 257, 777, 3920, 337, 309, 538, 23559, 264, 8630, 23918, 50648], "temperature": 0.0, "avg_logprob": -0.12293213404966204, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.010012071579694748}, {"id": 62, "seek": 31806, "start": 323.74, "end": 329.82, "text": " to create a space for all of these things that are going to have to go into that frame,", "tokens": [50648, 281, 1884, 257, 1901, 337, 439, 295, 613, 721, 300, 366, 516, 281, 362, 281, 352, 666, 300, 3920, 11, 50952], "temperature": 0.0, "avg_logprob": -0.12293213404966204, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.010012071579694748}, {"id": 63, "seek": 31806, "start": 329.82, "end": 331.06, "text": " okay?", "tokens": [50952, 1392, 30, 51014], "temperature": 0.0, "avg_logprob": -0.12293213404966204, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.010012071579694748}, {"id": 64, "seek": 31806, "start": 331.06, "end": 335.98, "text": " What we're going to do is since we have a pointer to the top of it in the stack pointer,", "tokens": [51014, 708, 321, 434, 516, 281, 360, 307, 1670, 321, 362, 257, 23918, 281, 264, 1192, 295, 309, 294, 264, 8630, 23918, 11, 51260], "temperature": 0.0, "avg_logprob": -0.12293213404966204, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.010012071579694748}, {"id": 65, "seek": 31806, "start": 335.98, "end": 341.22, "text": " we're also going to use another special register called the base pointer.", "tokens": [51260, 321, 434, 611, 516, 281, 764, 1071, 2121, 7280, 1219, 264, 3096, 23918, 13, 51522], "temperature": 0.0, "avg_logprob": -0.12293213404966204, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.010012071579694748}, {"id": 66, "seek": 34122, "start": 341.22, "end": 348.06, "text": " You've seen this already, EBP, the extended base pointer register, to point to the bottom", "tokens": [50364, 509, 600, 1612, 341, 1217, 11, 50148, 47, 11, 264, 10913, 3096, 23918, 7280, 11, 281, 935, 281, 264, 2767, 50706], "temperature": 0.0, "avg_logprob": -0.12705633613500703, "compression_ratio": 1.6064814814814814, "no_speech_prob": 0.16023975610733032}, {"id": 67, "seek": 34122, "start": 348.06, "end": 351.38000000000005, "text": " of that stack frame, okay?", "tokens": [50706, 295, 300, 8630, 3920, 11, 1392, 30, 50872], "temperature": 0.0, "avg_logprob": -0.12705633613500703, "compression_ratio": 1.6064814814814814, "no_speech_prob": 0.16023975610733032}, {"id": 68, "seek": 34122, "start": 351.38000000000005, "end": 357.5, "text": " So the management then of these frames is such that when a procedure is first entered,", "tokens": [50872, 407, 264, 4592, 550, 295, 613, 12083, 307, 1270, 300, 562, 257, 10747, 307, 700, 9065, 11, 51178], "temperature": 0.0, "avg_logprob": -0.12705633613500703, "compression_ratio": 1.6064814814814814, "no_speech_prob": 0.16023975610733032}, {"id": 69, "seek": 34122, "start": 357.5, "end": 362.54, "text": " we run its setup code that creates the stuff in this frame.", "tokens": [51178, 321, 1190, 1080, 8657, 3089, 300, 7829, 264, 1507, 294, 341, 3920, 13, 51430], "temperature": 0.0, "avg_logprob": -0.12705633613500703, "compression_ratio": 1.6064814814814814, "no_speech_prob": 0.16023975610733032}, {"id": 70, "seek": 34122, "start": 362.54, "end": 368.54, "text": " And when we return, before we do that, we run some finish code, that sort of cleans", "tokens": [51430, 400, 562, 321, 2736, 11, 949, 321, 360, 300, 11, 321, 1190, 512, 2413, 3089, 11, 300, 1333, 295, 16912, 51730], "temperature": 0.0, "avg_logprob": -0.12705633613500703, "compression_ratio": 1.6064814814814814, "no_speech_prob": 0.16023975610733032}, {"id": 71, "seek": 36854, "start": 368.54, "end": 376.06, "text": " up what's in this frame before changing the stack pointer to go back to the previous frame,", "tokens": [50364, 493, 437, 311, 294, 341, 3920, 949, 4473, 264, 8630, 23918, 281, 352, 646, 281, 264, 3894, 3920, 11, 50740], "temperature": 0.0, "avg_logprob": -0.13498334531430844, "compression_ratio": 1.5947368421052632, "no_speech_prob": 0.001284272875636816}, {"id": 72, "seek": 36854, "start": 376.06, "end": 377.06, "text": " all right?", "tokens": [50740, 439, 558, 30, 50790], "temperature": 0.0, "avg_logprob": -0.13498334531430844, "compression_ratio": 1.5947368421052632, "no_speech_prob": 0.001284272875636816}, {"id": 73, "seek": 36854, "start": 377.06, "end": 382.34000000000003, "text": " So again, let's take a look at how our example is going to do this, all right?", "tokens": [50790, 407, 797, 11, 718, 311, 747, 257, 574, 412, 577, 527, 1365, 307, 516, 281, 360, 341, 11, 439, 558, 30, 51054], "temperature": 0.0, "avg_logprob": -0.13498334531430844, "compression_ratio": 1.5947368421052632, "no_speech_prob": 0.001284272875636816}, {"id": 74, "seek": 36854, "start": 382.34000000000003, "end": 390.54, "text": " So here, remember, is our call chain that went through this sequence of things, calls", "tokens": [51054, 407, 510, 11, 1604, 11, 307, 527, 818, 5021, 300, 1437, 807, 341, 8310, 295, 721, 11, 5498, 51464], "temperature": 0.0, "avg_logprob": -0.13498334531430844, "compression_ratio": 1.5947368421052632, "no_speech_prob": 0.001284272875636816}, {"id": 75, "seek": 36854, "start": 390.54, "end": 393.66, "text": " going down, returns coming back up.", "tokens": [51464, 516, 760, 11, 11247, 1348, 646, 493, 13, 51620], "temperature": 0.0, "avg_logprob": -0.13498334531430844, "compression_ratio": 1.5947368421052632, "no_speech_prob": 0.001284272875636816}, {"id": 76, "seek": 39366, "start": 393.66, "end": 399.5, "text": " So here we are in the middle of a procedure U, and we're about to call who, right?", "tokens": [50364, 407, 510, 321, 366, 294, 264, 2808, 295, 257, 10747, 624, 11, 293, 321, 434, 466, 281, 818, 567, 11, 558, 30, 50656], "temperature": 0.0, "avg_logprob": -0.08216814811413105, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.0001584353158250451}, {"id": 77, "seek": 39366, "start": 399.5, "end": 403.46000000000004, "text": " So here's our U stack frame on the stack.", "tokens": [50656, 407, 510, 311, 527, 624, 8630, 3920, 322, 264, 8630, 13, 50854], "temperature": 0.0, "avg_logprob": -0.08216814811413105, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.0001584353158250451}, {"id": 78, "seek": 39366, "start": 403.46000000000004, "end": 408.94000000000005, "text": " There's a base pointer to the bottom of it, stack pointer to the top of it.", "tokens": [50854, 821, 311, 257, 3096, 23918, 281, 264, 2767, 295, 309, 11, 8630, 23918, 281, 264, 1192, 295, 309, 13, 51128], "temperature": 0.0, "avg_logprob": -0.08216814811413105, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.0001584353158250451}, {"id": 79, "seek": 39366, "start": 408.94000000000005, "end": 415.06, "text": " That helps us to find that size of that stack, the size of that frame, okay?", "tokens": [51128, 663, 3665, 505, 281, 915, 300, 2744, 295, 300, 8630, 11, 264, 2744, 295, 300, 3920, 11, 1392, 30, 51434], "temperature": 0.0, "avg_logprob": -0.08216814811413105, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.0001584353158250451}, {"id": 80, "seek": 39366, "start": 415.06, "end": 420.98, "text": " But now we've just called who, and we've put a new frame on the stack, okay?", "tokens": [51434, 583, 586, 321, 600, 445, 1219, 567, 11, 293, 321, 600, 829, 257, 777, 3920, 322, 264, 8630, 11, 1392, 30, 51730], "temperature": 0.0, "avg_logprob": -0.08216814811413105, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.0001584353158250451}, {"id": 81, "seek": 42098, "start": 420.98, "end": 427.58000000000004, "text": " And of course, our base pointer got adjusted, and our stack pointer got adjusted.", "tokens": [50364, 400, 295, 1164, 11, 527, 3096, 23918, 658, 19871, 11, 293, 527, 8630, 23918, 658, 19871, 13, 50694], "temperature": 0.0, "avg_logprob": -0.16018238067626953, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.002050703391432762}, {"id": 82, "seek": 42098, "start": 427.58000000000004, "end": 432.5, "text": " And you'll recall from some of the previous examples, you might have seen assembly language", "tokens": [50694, 400, 291, 603, 9901, 490, 512, 295, 264, 3894, 5110, 11, 291, 1062, 362, 1612, 12103, 2856, 50940], "temperature": 0.0, "avg_logprob": -0.16018238067626953, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.002050703391432762}, {"id": 83, "seek": 42098, "start": 432.5, "end": 433.5, "text": " examples.", "tokens": [50940, 5110, 13, 50990], "temperature": 0.0, "avg_logprob": -0.16018238067626953, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.002050703391432762}, {"id": 84, "seek": 42098, "start": 433.5, "end": 439.06, "text": " You might have seen the old EVP saved away first before we did this, so that we can reuse", "tokens": [50990, 509, 1062, 362, 1612, 264, 1331, 15733, 47, 6624, 1314, 700, 949, 321, 630, 341, 11, 370, 300, 321, 393, 26225, 51268], "temperature": 0.0, "avg_logprob": -0.16018238067626953, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.002050703391432762}, {"id": 85, "seek": 42098, "start": 439.06, "end": 440.94, "text": " that register, okay?", "tokens": [51268, 300, 7280, 11, 1392, 30, 51362], "temperature": 0.0, "avg_logprob": -0.16018238067626953, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.002050703391432762}, {"id": 86, "seek": 42098, "start": 440.94, "end": 446.54, "text": " The next thing that's going to happen is we're going to call MI, okay?", "tokens": [51362, 440, 958, 551, 300, 311, 516, 281, 1051, 307, 321, 434, 516, 281, 818, 13696, 11, 1392, 30, 51642], "temperature": 0.0, "avg_logprob": -0.16018238067626953, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.002050703391432762}, {"id": 87, "seek": 42098, "start": 446.54, "end": 450.18, "text": " And here we go, another stack frame is put onto the stack.", "tokens": [51642, 400, 510, 321, 352, 11, 1071, 8630, 3920, 307, 829, 3911, 264, 8630, 13, 51824], "temperature": 0.0, "avg_logprob": -0.16018238067626953, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.002050703391432762}, {"id": 88, "seek": 45018, "start": 450.18, "end": 455.62, "text": " Then we've had to save that previous value of EVP that was there, because we had to change", "tokens": [50364, 1396, 321, 600, 632, 281, 3155, 300, 3894, 2158, 295, 15733, 47, 300, 390, 456, 11, 570, 321, 632, 281, 1319, 50636], "temperature": 0.0, "avg_logprob": -0.14858819820262767, "compression_ratio": 1.632034632034632, "no_speech_prob": 0.006692452356219292}, {"id": 89, "seek": 45018, "start": 455.62, "end": 457.3, "text": " that again.", "tokens": [50636, 300, 797, 13, 50720], "temperature": 0.0, "avg_logprob": -0.14858819820262767, "compression_ratio": 1.632034632034632, "no_speech_prob": 0.006692452356219292}, {"id": 90, "seek": 45018, "start": 457.3, "end": 461.5, "text": " So we've had to find a place to put that.", "tokens": [50720, 407, 321, 600, 632, 281, 915, 257, 1081, 281, 829, 300, 13, 50930], "temperature": 0.0, "avg_logprob": -0.14858819820262767, "compression_ratio": 1.632034632034632, "no_speech_prob": 0.006692452356219292}, {"id": 91, "seek": 45018, "start": 461.5, "end": 466.1, "text": " We're going to go along and execute MI now, and it's going to call itself.", "tokens": [50930, 492, 434, 516, 281, 352, 2051, 293, 14483, 13696, 586, 11, 293, 309, 311, 516, 281, 818, 2564, 13, 51160], "temperature": 0.0, "avg_logprob": -0.14858819820262767, "compression_ratio": 1.632034632034632, "no_speech_prob": 0.006692452356219292}, {"id": 92, "seek": 45018, "start": 466.1, "end": 471.22, "text": " So we're going to see another stack frame from MI appear on the stack, again with updated", "tokens": [51160, 407, 321, 434, 516, 281, 536, 1071, 8630, 3920, 490, 13696, 4204, 322, 264, 8630, 11, 797, 365, 10588, 51416], "temperature": 0.0, "avg_logprob": -0.14858819820262767, "compression_ratio": 1.632034632034632, "no_speech_prob": 0.006692452356219292}, {"id": 93, "seek": 45018, "start": 471.22, "end": 473.54, "text": " pointers.", "tokens": [51416, 44548, 13, 51532], "temperature": 0.0, "avg_logprob": -0.14858819820262767, "compression_ratio": 1.632034632034632, "no_speech_prob": 0.006692452356219292}, {"id": 94, "seek": 45018, "start": 473.54, "end": 478.34000000000003, "text": " And yet a third one, as it calls itself, yet again, okay?", "tokens": [51532, 400, 1939, 257, 2636, 472, 11, 382, 309, 5498, 2564, 11, 1939, 797, 11, 1392, 30, 51772], "temperature": 0.0, "avg_logprob": -0.14858819820262767, "compression_ratio": 1.632034632034632, "no_speech_prob": 0.006692452356219292}, {"id": 95, "seek": 47834, "start": 478.34, "end": 484.46, "text": " So now we're at the bottom here of our call chain, and we're about to execute our first", "tokens": [50364, 407, 586, 321, 434, 412, 264, 2767, 510, 295, 527, 818, 5021, 11, 293, 321, 434, 466, 281, 14483, 527, 700, 50670], "temperature": 0.0, "avg_logprob": -0.12110217630046688, "compression_ratio": 1.4350282485875707, "no_speech_prob": 0.0003569666878320277}, {"id": 96, "seek": 47834, "start": 484.46, "end": 488.53999999999996, "text": " return in the third copy of MI.", "tokens": [50670, 2736, 294, 264, 2636, 5055, 295, 13696, 13, 50874], "temperature": 0.0, "avg_logprob": -0.12110217630046688, "compression_ratio": 1.4350282485875707, "no_speech_prob": 0.0003569666878320277}, {"id": 97, "seek": 47834, "start": 488.53999999999996, "end": 495.09999999999997, "text": " So when we do that, we remove its stack frame, put the EVP and ESP back to where they were", "tokens": [50874, 407, 562, 321, 360, 300, 11, 321, 4159, 1080, 8630, 3920, 11, 829, 264, 15733, 47, 293, 12564, 47, 646, 281, 689, 436, 645, 51202], "temperature": 0.0, "avg_logprob": -0.12110217630046688, "compression_ratio": 1.4350282485875707, "no_speech_prob": 0.0003569666878320277}, {"id": 98, "seek": 47834, "start": 495.09999999999997, "end": 499.7, "text": " for the previous instantiation of MI, okay?", "tokens": [51202, 337, 264, 3894, 9836, 6642, 295, 13696, 11, 1392, 30, 51432], "temperature": 0.0, "avg_logprob": -0.12110217630046688, "compression_ratio": 1.4350282485875707, "no_speech_prob": 0.0003569666878320277}, {"id": 99, "seek": 49970, "start": 500.14, "end": 508.38, "text": " And we're now going to return from that one and remove that from the stack by adjusting", "tokens": [50386, 400, 321, 434, 586, 516, 281, 2736, 490, 300, 472, 293, 4159, 300, 490, 264, 8630, 538, 23559, 50798], "temperature": 0.0, "avg_logprob": -0.11893243375031845, "compression_ratio": 1.6127450980392157, "no_speech_prob": 0.10086150467395782}, {"id": 100, "seek": 49970, "start": 508.38, "end": 510.78, "text": " the pointers again.", "tokens": [50798, 264, 44548, 797, 13, 50918], "temperature": 0.0, "avg_logprob": -0.11893243375031845, "compression_ratio": 1.6127450980392157, "no_speech_prob": 0.10086150467395782}, {"id": 101, "seek": 49970, "start": 510.78, "end": 515.7, "text": " So we have a new value for EVP, a new value for ESP, okay?", "tokens": [50918, 407, 321, 362, 257, 777, 2158, 337, 15733, 47, 11, 257, 777, 2158, 337, 12564, 47, 11, 1392, 30, 51164], "temperature": 0.0, "avg_logprob": -0.11893243375031845, "compression_ratio": 1.6127450980392157, "no_speech_prob": 0.10086150467395782}, {"id": 102, "seek": 49970, "start": 515.7, "end": 522.8199999999999, "text": " And now our next thing is to return from this instance of MI back to who.", "tokens": [51164, 400, 586, 527, 958, 551, 307, 281, 2736, 490, 341, 5197, 295, 13696, 646, 281, 567, 13, 51520], "temperature": 0.0, "avg_logprob": -0.11893243375031845, "compression_ratio": 1.6127450980392157, "no_speech_prob": 0.10086150467395782}, {"id": 103, "seek": 49970, "start": 522.8199999999999, "end": 528.58, "text": " And when we do that, we'll eliminate the last of those frames for MI, and we're now back", "tokens": [51520, 400, 562, 321, 360, 300, 11, 321, 603, 13819, 264, 1036, 295, 729, 12083, 337, 13696, 11, 293, 321, 434, 586, 646, 51808], "temperature": 0.0, "avg_logprob": -0.11893243375031845, "compression_ratio": 1.6127450980392157, "no_speech_prob": 0.10086150467395782}, {"id": 104, "seek": 52858, "start": 528.58, "end": 534.38, "text": " at the frame for who, with its base pointer and stack pointer at either end.", "tokens": [50364, 412, 264, 3920, 337, 567, 11, 365, 1080, 3096, 23918, 293, 8630, 23918, 412, 2139, 917, 13, 50654], "temperature": 0.0, "avg_logprob": -0.1330335965523353, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.000472843530587852}, {"id": 105, "seek": 52858, "start": 534.38, "end": 538.58, "text": " So we're now in the middle of the procedure who, and we're about to do our second call", "tokens": [50654, 407, 321, 434, 586, 294, 264, 2808, 295, 264, 10747, 567, 11, 293, 321, 434, 466, 281, 360, 527, 1150, 818, 50864], "temperature": 0.0, "avg_logprob": -0.1330335965523353, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.000472843530587852}, {"id": 106, "seek": 52858, "start": 538.58, "end": 540.46, "text": " to MI there.", "tokens": [50864, 281, 13696, 456, 13, 50958], "temperature": 0.0, "avg_logprob": -0.1330335965523353, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.000472843530587852}, {"id": 107, "seek": 52858, "start": 540.46, "end": 545.46, "text": " So that'll put another copy of MI's stack frame on the stack.", "tokens": [50958, 407, 300, 603, 829, 1071, 5055, 295, 13696, 311, 8630, 3920, 322, 264, 8630, 13, 51208], "temperature": 0.0, "avg_logprob": -0.1330335965523353, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.000472843530587852}, {"id": 108, "seek": 52858, "start": 545.46, "end": 550.38, "text": " We'll return from that back to who, and then we're done with who, so we'll return back", "tokens": [51208, 492, 603, 2736, 490, 300, 646, 281, 567, 11, 293, 550, 321, 434, 1096, 365, 567, 11, 370, 321, 603, 2736, 646, 51454], "temperature": 0.0, "avg_logprob": -0.1330335965523353, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.000472843530587852}, {"id": 109, "seek": 52858, "start": 550.38, "end": 553.86, "text": " to you, and just have that left on the stack.", "tokens": [51454, 281, 291, 11, 293, 445, 362, 300, 1411, 322, 264, 8630, 13, 51628], "temperature": 0.0, "avg_logprob": -0.1330335965523353, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.000472843530587852}], "language": "en"}