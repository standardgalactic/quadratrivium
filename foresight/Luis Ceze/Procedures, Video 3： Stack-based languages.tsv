start	end	text
0	15760	Okay, so we just saw how a stack can be used to keep track of the return address in a
15760	17600	procedure call.
17600	23360	Let's take this a little bit further now and look at stack-based languages in general.
23360	25600	That's the next part of this section.
26560	29600	Stack-based languages are really common.
29600	32960	That's in fact the majority of the languages we use today.
32960	38760	They're languages that support recursion, namely a procedure that calls itself.
38760	45200	So these are languages like C, Pascal, if you remember from the old days, and Java as well.
45200	50720	To make it possible to support recursion in a programming language, code must be what
50720	58680	we call re-entrant, meaning that we can have simultaneous instantiations of a single procedure.
58680	59680	What does that mean?
59680	63360	That means that we've just called the procedure and in the middle of executing it.
63360	69360	And then that procedure can call itself again and start executing a new copy of itself.
69360	74760	And that one can call itself again and execute a new copy of itself and so forth.
74760	80080	So that's, you can imagine, is an interesting problem to try to keep track of all of that.
80080	84560	And in order to make that happen, what we need to do is to make sure to have a place
84560	89200	to store the information for each instantiation of that procedure.
89200	91600	And what information do we need to hold on to?
91600	94320	Well, that's called the procedure state.
94320	100520	And that includes the arguments we called it with, any local variables it has to work
100520	106920	on, and of course, a return address, a return pointer to where it should go in the procedure
106920	110880	that called it, including potentially itself.
110880	116280	And to do that, we're going to extend this stack discipline, okay?
116280	122080	So basically the state for a given procedure is all this stuff above the three check marks
122080	128440	there that are things I need for a limited amount of time while that procedure is executing.
128440	132880	And then when it returns, I can remove that state.
132880	135500	I don't need it anymore.
135500	140820	So the callee, fortunately, always returns before its caller because we're returning
140820	146620	back to the caller and then continuing the execution where we left off in the caller
146620	148820	procedure.
148820	155460	So one last definition, we're going to call these allocations on the stack frames, procedure
155460	158700	frames or stack frames in general.
158700	166460	And for each procedure instantiation, we will have all the state in one of these frames.
166460	172860	So let's take a look at an example of a call chain, a string of procedure calls, right?
172860	181820	So here we have some funny functions, the function u which calls the function who, okay?
181820	186540	And we can see in the call chain that we've somehow started with the function, the procedure
186540	192940	u and it then calls who, okay?
192940	201380	Now the procedure who in its turn calls mi twice.
201380	203880	And in between, it probably does some other things, okay?
203880	210340	So we're going to call mi, then return back to this point and do some other stuff and
210340	212740	then call mi again.
212740	221660	So here we see the two calls to mi that happen one after the other in who.
221660	226460	But the function mi is a recursive procedure that calls itself.
226460	232580	So here's the definition of mi and you see that inside of it it calls itself again, right?
232580	236220	You've already seen factorial functions that do this, for example.
236220	244300	So mi here, you just noticed in the first call, called itself once and then that copy
244300	247220	of mi called itself again.
247220	256500	But then it stopped and returned and returned and then made the second call to mi here.
256500	262660	And then mi returned again, back up to who and then who returned up to you and then
262660	266660	you returned to wherever it was called from, okay?
266660	274740	So here we see that chain descending down the tree of calls that we have here and basically
274740	278780	following that path, okay?
278780	282620	So let's see how this looks on the stack, okay?
282620	288700	So let's take a review that stack frame concept again.
288700	297140	In the Linux IA32 architecture, the contents of a stack frame includes the local variables,
297140	301460	arguments to the function, any information about return addresses that it needs to go
301460	307780	to and then maybe some temporary scratch space this function might need.
307780	312620	Maybe things like it's another version of local variables, if you will, but maybe more
312620	313620	temporary.
313620	314620	All right.
314620	318060	So here's the previous frame on the stack, okay?
318060	323740	And when we call a function, we create a new frame for it by adjusting the stack pointer
323740	329820	to create a space for all of these things that are going to have to go into that frame,
329820	331060	okay?
331060	335980	What we're going to do is since we have a pointer to the top of it in the stack pointer,
335980	341220	we're also going to use another special register called the base pointer.
341220	348060	You've seen this already, EBP, the extended base pointer register, to point to the bottom
348060	351380	of that stack frame, okay?
351380	357500	So the management then of these frames is such that when a procedure is first entered,
357500	362540	we run its setup code that creates the stuff in this frame.
362540	368540	And when we return, before we do that, we run some finish code, that sort of cleans
368540	376060	up what's in this frame before changing the stack pointer to go back to the previous frame,
376060	377060	all right?
377060	382340	So again, let's take a look at how our example is going to do this, all right?
382340	390540	So here, remember, is our call chain that went through this sequence of things, calls
390540	393660	going down, returns coming back up.
393660	399500	So here we are in the middle of a procedure U, and we're about to call who, right?
399500	403460	So here's our U stack frame on the stack.
403460	408940	There's a base pointer to the bottom of it, stack pointer to the top of it.
408940	415060	That helps us to find that size of that stack, the size of that frame, okay?
415060	420980	But now we've just called who, and we've put a new frame on the stack, okay?
420980	427580	And of course, our base pointer got adjusted, and our stack pointer got adjusted.
427580	432500	And you'll recall from some of the previous examples, you might have seen assembly language
432500	433500	examples.
433500	439060	You might have seen the old EVP saved away first before we did this, so that we can reuse
439060	440940	that register, okay?
440940	446540	The next thing that's going to happen is we're going to call MI, okay?
446540	450180	And here we go, another stack frame is put onto the stack.
450180	455620	Then we've had to save that previous value of EVP that was there, because we had to change
455620	457300	that again.
457300	461500	So we've had to find a place to put that.
461500	466100	We're going to go along and execute MI now, and it's going to call itself.
466100	471220	So we're going to see another stack frame from MI appear on the stack, again with updated
471220	473540	pointers.
473540	478340	And yet a third one, as it calls itself, yet again, okay?
478340	484460	So now we're at the bottom here of our call chain, and we're about to execute our first
484460	488540	return in the third copy of MI.
488540	495100	So when we do that, we remove its stack frame, put the EVP and ESP back to where they were
495100	499700	for the previous instantiation of MI, okay?
500140	508380	And we're now going to return from that one and remove that from the stack by adjusting
508380	510780	the pointers again.
510780	515700	So we have a new value for EVP, a new value for ESP, okay?
515700	522820	And now our next thing is to return from this instance of MI back to who.
522820	528580	And when we do that, we'll eliminate the last of those frames for MI, and we're now back
528580	534380	at the frame for who, with its base pointer and stack pointer at either end.
534380	538580	So we're now in the middle of the procedure who, and we're about to do our second call
538580	540460	to MI there.
540460	545460	So that'll put another copy of MI's stack frame on the stack.
545460	550380	We'll return from that back to who, and then we're done with who, so we'll return back
550380	553860	to you, and just have that left on the stack.
