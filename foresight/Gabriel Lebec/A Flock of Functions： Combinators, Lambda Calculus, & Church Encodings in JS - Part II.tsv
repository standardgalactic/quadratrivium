start	end	text
0	10000	Okay, we left off. I was going to teach you numbers. So how are we going to do this?
10000	15000	You know, we don't have multiplication. We don't have a quality. We don't have numbers.
15000	19000	We've got nothing. How are you going to do it? 0, 1, 2, 3, successor.
19000	26000	All right, let's think about instead of nouns 1 and 2 and 3, we're going to use adverbs.
26000	33000	Once, twice, thrice, etc. So how's this going to work? Let's look at 1 to start with.
33000	39000	1 is going to take a function and argument, and it's going to apply the function to the argument.
39000	45000	One time. It's going to call the function once. See you later, Elmer.
45000	51000	Ah, let's try it. Oops, that's not where I wanted that to go. That's where I wanted it to go.
51000	64000	Okay, so once is going to take a function and argument. It's going to apply the function to the argument a single time.
64000	74000	What is once of identity of 2?
74000	83000	2. That makes sense. What about once of not on true?
83000	88000	Yeah, straightforward so far.
88000	96000	So what about 2? 2 will take a function and argument, and it will apply the function twofold times.
96000	101000	It will apply the function to the argument, and then it will apply the function again to the result of that.
101000	106000	It will apply the function over and over again. So let's do twice.
106000	113000	Twice takes a function and an argument, and we'll apply the function to the function of the argument.
113000	124000	And we do twice not of false is, say again, wait, twice not. Not of not of false.
124000	130000	What's a double negative? It just loops back around, right?
130000	136000	And three times, well, that's just thrice. So we'll define that thrice takes a function and its argument.
136000	140000	It applies the function to the function to the function to the argument.
140000	145000	And we could do thrice not true.
145000	151000	False. Yeah, I'm flipping you back and forth. You got to keep on staying on your toes.
151000	158000	Well, this is kind of cool. You can see these building out here. We got a number of hard-coded in Fs, and that's kind of our number system.
158000	163000	So we just demoed this. Once not true is not true, which is false.
163000	167000	Twice not true is not not true, which is true.
167000	172000	Thrice not true is not not not true, which is false again.
172000	176000	We start to get this building up of a number system.
176000	181000	What is zero? What's the theme of the talk?
181000	186000	It's a function. It takes the same signature as all of our other numbers.
186000	191000	This is like a good rule in general. As you got a class of functions, they all got to share the same signature.
191000	201000	Even if you don't know how to design one of the functions, you start thinking, well, wait, it's got to take the same arguments as all my other functions.
201000	208000	Twice applies the two-fold F to A. Once applies the single F to A. What does zero do?
208000	220000	It just gives you back A. It applies F to A no times.
220000	225000	Does that look familiar to anybody?
225000	227000	Which one?
227000	232000	Not quite. Identity would be A to A. But this is F A to A.
232000	235000	Something other thing, return other thing.
235000	241000	First thing, second thing, return second thing. Zero is false.
241000	245000	That's really nice. I like that. That's cool, right?
245000	253000	So zero times not of true is of course just true because we didn't apply the function to true. We just returned it.
253000	261000	And of course it could say false of not true and that gives us the same thing. So zero is false.
261000	263000	Yeah, we saw this already.
263000	271000	So we start to do church encodings for numerals. Zero, one, two, three, four, five, and so on and so forth.
271000	277000	But we have a small annoyance here, which is that we've manually gone and written all these functions down.
277000	282000	Well, that's not math. That's numbers, but it's not math. That's not arithmetic, right?
282000	287000	Like we're not dynamically generating these functions. Zero is false.
287000	293000	By the way, what's once? Look at it carefully. It takes two things and it just gives you back those two things.
293000	298000	That sounds familiar. What did you say a second ago? What was your name again?
298000	299000	Truman.
299000	304000	Identity. This is the identity once removed, like the mockingbird once removed.
304000	311000	Yeah, an A to an A. Now we got AB to AB. It's the same thing. It acts exactly like the identity function.
311000	317000	That's kind of also fun. Zero is false and one is identity. That's really, really nice.
317000	321000	I mean, as a mathematician, that makes me smile.
321000	328000	But we got a problem. We want dynamically generate numbers. How are we going to do it? How can we add one?
328000	333000	It sounds trivial on the face of it, but it's not obvious. We need a successor function.
333000	339000	We want a function that if you give it a number, it gives you back the next number somehow.
339000	346000	If you give it two, it gives you three. And you could do it like this. You could say the successor of successor of one is three.
346000	354000	Well, that's Peano numbers. We're going way back to 1889 here. Sort of.
354000	359000	So we know our successors got to take in one of these church numerals.
359000	364000	And let's do a concrete example. The successor of one is two.
364000	369000	Well, let's replace these numbers by their implementations to see what this looks like.
369000	376000	One is the identity once removed. It takes a function and argument and applies the function once to the argument.
376000	383000	Twice takes a function and arguments and applies the function twice to the argument.
383000	390000	The thing on the left is really similar to the thing on the right. What's the difference? One extra F.
390000	397000	What we need the successor function to do is tack on an extra F at the beginning.
397000	409000	So if the successor takes a function, that end function, that church numeral, it's going to return a new number function, one that takes F and A.
409000	415000	And what does that new number function do? It does the original number of function applications.
415000	423000	And then it does one more on top of that. Wow.
423000	431000	So there's my successor function, NFA to F of NFA, an additional F, just one extra F. Let's try it out.
432000	438000	Successor takes a church numeral and it does, what am I doing here?
438000	453000	I'm doing N to F to A to N of F of A, but an F in front of all of that for one extra application of F.
453000	460000	Now, I've got this zero function and I've got this, did I have one? No, did I have once? I have once.
460000	471000	So if I get the successor of zero, this is some number function, but this is not intentionally equal to what we saw before.
471000	475000	It's only extensionally equal. So I need to prove that this is the one function.
475000	480000	So I can apply a function like not to an argument like true and I get false.
480000	484000	So that actually worked. This gets a little annoying.
484000	491000	So I'm going to just find this new JS num function. It'll take a church numeral and we'll apply the church numeral.
491000	500000	I'll say, hey, take this and do the addition of one N times starting at zero.
500000	506000	So the addition of one is I have some X and I add one to it.
506000	512000	So now I can call JS num on the successor of zero and it tells me that's one.
512000	517000	That's cool. I'm going to convert my church numbers into JavaScript numbers.
517000	522000	What about the successor of successor of zero?
522000	528000	Let's do successor of successor of successor of zero is three.
528000	538000	This is useful. So let's let's actually like start storing these things and zero equals zero and one equals once and two equals twice.
538000	545000	Is there a twice? Yeah, N2 is twice.
545000	552000	N3 equals the successor of N2 and four is the successor of N3.
552000	556000	I'll stop there for now, but we could do things like wait a second.
556000	567000	The successor of N4 ought to be five and it is not too shabby.
567000	576000	This is just demonstrating that and the purpose here is just to show that that new F gets tacked on and that's how we get a successor.
576000	580000	So we have our successor function tax on an extra application of F.
580000	584000	And at this point I want to talk about my favorite combinator of all.
584000	588000	This is probably the most extolled and beloved of all combinators.
588000	591000	Even the Y combinator doesn't compare to this.
591000	596000	This combinator gets more mentions probably, I think, than the Y combinator.
596000	600000	I'd have to do a Google search to prove that true. I might be wrong, but I wouldn't be surprised.
600000	604000	Except you won't find it if you go search for the Bluebird combinator.
604000	607000	You'll find it being talked about as something else.
607000	614000	Do any mathematicians or functional programmers want to identify this for me?
614000	625000	What am I looking at? What does the Bluebird do?
625000	638000	It takes G and then it applies F. It applies G to A and then F to that.
638000	646000	It's a pipeline. It takes A, puts it into G, puts the result of that into F, and that's the result you get out.
646000	651000	What is it? It's composed. This is function composition.
651000	655000	The Bluebird or the B combinator is function composition.
655000	658000	That's why I'm saying it's the most famous one of all.
658000	663000	Any time anybody tries to evangelize functional programming, what do they mention?
663000	668000	Composition. That's what this is. Let's make it.
668000	675000	B takes an F into G and it does G first and then F.
676000	684000	This is interesting. Let's do B of not and not.
684000	688000	This isn't as interesting because it doesn't matter whether it's right to left or left to right.
688000	692000	They're identical, but that's okay. We'll show other things in a moment.
692000	698000	This composition, the not not composition, is a function that first does not and then does the other not.
698000	704000	If we pass in something like true, oops, I got a mistake.
704000	710000	First mistake. A is not defined.
710000	714000	Oh, FG. I forgot. Yep. There we go.
714000	717000	It takes an F, a G, and an A.
717000	721000	Oh, JavaScript. There we go. That's what I expected.
721000	727000	I can compose these. I can pipeline them, chain them together into a new function that is their composition.
727000	731000	Use that composition on some argument.
731000	734000	This is boring because it doesn't matter whether it's right to left or left to right.
734000	740000	Let's say Yale takes some string. I'm sorry to pollute our Lambda calculus topic with JavaScript strings.
740000	747000	I would avoid it if I could, but just for demonstration, I don't know a better way yet of doing this.
747000	752000	It just tax on an exclamation point.
752000	759000	So if I yell Lambda, I get Lambda.
759000	763000	Well, now I can do a little bit more interesting things.
763000	770000	For instance, if I compose, first I will get the successor.
770000	777000	That's the right most. Then I will yell it and I call this, actually, I'll do a JS note.
777000	784000	First I'll get the successor, then I'll convert it to its JavaScript equivalent of N4.
784000	791000	I get 5. Right to left function composition.
791000	794000	We've seen these examples already. We can compose.
794000	798000	The T goes into the first one on the right, then the next one on the left, and that is our result.
798000	801000	So we get true.
801000	805000	So the composition is expressed in that other way.
805000	809000	And the right most one is the right most one in Haskell.
809000	814000	This is built in. It's that little dot, which is wonderful.
814000	817000	That's such a nice way of doing function composition.
817000	821000	So odd in Haskell is not even.
821000	824000	This is great.
824000	827000	This is a combinator. It's the bluebird, so we'll put it in there.
827000	830000	It's unary to unary composition going right to left.
830000	832000	It's a period in Haskell.
832000	836000	You can section it and turn it into the B combinator in prefix notation with parentheses.
836000	841000	So that would be parentheses period two functions instead of function period function.
841000	847000	But infix notation is more pleasant for function composition, I think.
847000	850000	So here's our successor. We already saw this.
850000	857000	It takes an N, returns a function FA that applies an extra F on top of NFA.
857000	859000	There's a nicer way of doing this.
859000	861000	Look what we have here.
861000	865000	F is a function and NF is a function.
865000	868000	This feeds an argument into the right most function
868000	874000	and then feeds the result of that into the left function, generating a result.
874000	877000	So which combinator it is?
877000	880000	It's the bluebird.
880000	884000	This is wrong. Successor...
884000	886000	No, that's right. Okay, good.
886000	893000	So the successor is the composition of one extra function on top of the original number of functions.
893000	898000	That's a little bit prettier to my eyes.
898000	904000	So we'll rearrange this. I'm not going to bother to demo it. It works.
904000	906000	Let's do some more math.
906000	909000	We've got adding by one. What about adding two numbers together?
909000	911000	Binary addition.
911000	916000	We're not binary in the sense of binary number systems, but two numbers together.
916000	920000	What is add? What's the theme of the talk?
920000	924000	How many arguments does it take?
924000	927000	All right, so it takes two church numerals.
927000	929000	If we're going to put them in the parameter list,
929000	933000	we're probably going to have to use them in the body of the function, right?
933000	935000	So let's consider a concrete example.
935000	940000	Adding one and five should be the successor of five.
940000	944000	Adding two and five should be the successor of five.
944000	949000	Adding three to five should be the successor of successor of successor of five.
949000	952000	But wait a second. What are we doing here?
952000	954000	This is function composition, right?
954000	956000	And what are church numerals?
956000	959000	They create n-fold compositions.
959000	963000	So that's the three-fold composition of successor.
964000	967000	And if that's the three-fold composition of successor,
967000	971000	we can generate that using a church numeral.
971000	979000	This is saying adding three and five is doing thrice the successor of five.
979000	982000	And that's our application there.
982000	985000	So let's code it out.
985000	991000	The add lambda calculus function takes an n and a k.
991000	997000	And it does an n-fold succession on top of k.
997000	999000	We'll try it.
999000	1002000	We'll do a convert this to JavaScript.
1002000	1009000	We'll say add two church numerals like n-three and n-four, seven.
1009000	1011000	It works.
1011000	1016000	So let's redo this and start storing a couple more numbers for fun.
1016000	1021000	Okay, n-seven is equal to that church numeral.
1021000	1025000	And six is the addition of three and three.
1025000	1028000	And five is the addition of two and three.
1028000	1035000	So now we got the church numeral zero through seven, I believe.
1035000	1038000	This is an Englishy way, but pure lambda calculus.
1038000	1042000	Just all we have to do is replace our shorthand with the equivalent lambda notation
1042000	1045000	to convert this into true lambda calculus.
1045000	1050000	So you can see this n-three successor in five is saying thrice successor of five-fold,
1050000	1054000	which is eight-fold. Nice.
1054000	1058000	Church arithmetic, we now have addition.
1058000	1061000	What about multiplication?
1061000	1063000	What is it?
1063000	1065000	Yeah.
1065000	1069000	All right, so we know that multiplying two by three should give us six.
1069000	1074000	But six is the six-fold composition of some function to an argument.
1074000	1078000	Okay, so it's six f's that we apply to an argument.
1078000	1085000	But six f's is also because composition is associative and commutative.
1085000	1086000	It's not associative.
1086000	1087000	Associative?
1087000	1090000	Yeah, it's associative, but it's not commutative.
1090000	1093000	It is associative.
1093000	1095000	Function composition is associative.
1095000	1098000	So this isn't just a six-fold composition of f.
1098000	1104000	It's also the two-fold composition of the three-fold composition of f.
1104000	1108000	Well, there's the three-fold composition, and I could just say n-three f to get that.
1108000	1113000	And the two-fold composition of that is n-two of that.
1113000	1115000	But now look what I've got here.
1115000	1117000	I've got an a on the end on both sides.
1117000	1118000	That just cancels out.
1118000	1120000	Bye-bye.
1120000	1126000	So multiplying two numbers and applying that new result to a function
1126000	1131000	that first does that, you know, three-fold composition of f
1131000	1134000	and then two-fold composition of that result.
1134000	1139000	So we can use that, and we can go ahead and say, yeah, that's twice thricef,
1139000	1141000	which is six-fold f.
1141000	1143000	Makes sense.
1143000	1147000	And we can write that down and say, yeah, sure, it's fine,
1147000	1148000	but there's an even better way.
1148000	1155000	Does anybody see it?
1156000	1159000	I take an argument f, and I apply it to the right-most function.
1159000	1162000	I take that result and apply it to the left-most function.
1162000	1164000	That generates my result.
1164000	1167000	That means it's really the composition of two and three.
1167000	1169000	But look what I've got here on the sides.
1169000	1171000	f and f, those cancel out.
1171000	1175000	So multiplying two numbers is just getting their composition.
1175000	1179000	But how do I get their composition, the lambda calculus, with the b-compinator?
1179000	1181000	But wait a second.
1181000	1183000	Two and three are arguments as well.
1183000	1184000	I take that out.
1184000	1185000	Oh, my gosh.
1185000	1188000	Multiplication is just composition.
1188000	1191000	Wow.
1191000	1193000	That's amazing.
1193000	1195000	These are identical functions.
1195000	1199000	They're alpha-equivalent, meaning that all we've done is change the variable names around.
1199000	1202000	But the really nice way of noting this is that multiplication
1202000	1205000	is just the composition of trig mammals.
1205000	1209000	So let's do this.
1209000	1212000	Multi-equals b, we're done.
1213000	1215000	We can demonstrate it, of course.
1215000	1222000	js num of the multiplication of two and three is a mistake.
1222000	1224000	What did I do wrong?
1224000	1226000	G is not a function.
1226000	1230000	Oh, I said two and three instead of my lambda two and lambda three.
1230000	1232000	There we go, six.
1232000	1234000	Neat.
1234000	1237000	Do something fun that we haven't done before, like five and four.
1237000	1238000	There's 20.
1238000	1241000	That's nice.
1241000	1244000	What about exponentiation?
1244000	1246000	Hmm.
1246000	1249000	Exponentiation.
1249000	1251000	It's going to take two arguments.
1251000	1254000	We know two to the third power is eight.
1254000	1256000	How did you do this in grade school?
1256000	1260000	What is two to the third?
1260000	1262000	Yeah.
1262000	1267000	But what's multiplication in the lambda calculus?
1267000	1269000	Composition.
1269000	1271000	And so we've done a three-fold composition of n two.
1271000	1277000	How do we express that using trig numerals?
1277000	1279000	How do you do the n-fold composition of anything?
1279000	1281000	It's just a trig number.
1281000	1283000	That's just n three n twos.
1283000	1285000	But wait a second.
1285000	1289000	That means a power just takes nk and it flips them around.
1289000	1292000	This is the thrush combinator.
1292000	1294000	Thrice of twice.
1294000	1296000	Well, that's doing twice of twice of twice.
1296000	1299000	Twice of twice of twice is eight-fold.
1299000	1302000	Beautiful.
1302000	1305000	Really nice.
1305000	1307000	So we've added a combinator.
1307000	1309000	We've added exponentiation.
1309000	1313000	We'll define this.
1313000	1317000	I'll say that this is pow.
1317000	1320000	The thrush, I'll call it pow.
1320000	1325000	It takes an n and a k and applies the k to n.
1326000	1330000	And of course I can try it out.
1330000	1334000	Raising three to the second power should give me nine.
1334000	1337000	Oops, I did this again.
1337000	1341000	There it is.
1341000	1344000	And by the way, the thrush is the cardinal of identity.
1344000	1347000	I don't find that particularly exciting, but it's cool, I guess.
1347000	1352000	Just one more example of things going on in the combinatorial logic.
1352000	1357000	We've got arithmetic uses of thrush.
1357000	1359000	Here's a nice little one.
1359000	1361000	I like this one. It's cute.
1361000	1363000	Checking if something is zero.
1363000	1366000	We know that if we give it zero, it should give us true.
1366000	1368000	If we give it one, it should be false.
1368000	1369000	Two should be false.
1369000	1370000	And so on and so forth.
1370000	1372000	It's pretty straightforward.
1372000	1374000	How can we define this?
1374000	1375000	It's a function.
1375000	1377000	It takes a church numeral.
1377000	1379000	Now here's where it gets interesting.
1379000	1382000	Well, if you're going to get a numeral and use your parameter,
1382000	1385000	you're probably going to have to use it in the function body.
1385000	1387000	What do church numerals do?
1387000	1394000	Where do they take its arguments?
1394000	1395000	Does anybody remember?
1395000	1396000	They take two arguments.
1396000	1399000	What are the two arguments?
1399000	1406000	When I say twice, yeah, twice a function applied to an argument.
1406000	1408000	So that's what a church numeral does.
1408000	1412000	It applies some function a certain number of times to an argument.
1412000	1415000	Well, what if n is zero?
1415000	1418000	It doesn't apply the function at all.
1418000	1420000	It just returns the second thing.
1420000	1424000	The function I'm trying to create here is the is zero function.
1424000	1426000	So if n is zero, it's just going to return arg.
1426000	1432000	So what should arg be?
1432000	1436000	True.
1436000	1439000	And n is zero, return true.
1439000	1441000	Pretty straightforward.
1441000	1442000	Skip the function.
1442000	1443000	Forget about it.
1443000	1445000	Don't run it.
1445000	1446000	Well, that's nice.
1446000	1447000	But what about the other case?
1447000	1452000	What if it's one or two or something else?
1452000	1454000	We want it to return false.
1454000	1457000	So somehow, however many times we do funk,
1457000	1461000	if we do it once, twice, thrice a billion times,
1461000	1463000	no matter how many times we do funk,
1463000	1465000	it's got to return false.
1465000	1472000	What's a function that always returns false?
1472000	1473000	Not quite.
1473000	1476000	The false function takes two arguments and chooses the second.
1476000	1484000	What's a function that always returns false?
1484000	1494000	This is going way back.
1495000	1498000	Remember how I showed you that the kestrel with one argument
1498000	1500000	is a constant function?
1500000	1501000	It's fixated.
1501000	1503000	It always returns a given argument.
1503000	1510000	So apply the constant false function n times true.
1510000	1513000	If I do this three times, that's the constant false
1513000	1516000	of constant false of constant false of true.
1516000	1517000	But who cares?
1517000	1523000	Because the constant false function always gives you back false.
1523000	1526000	And the only time this gives you true is if you don't run
1526000	1528000	the constant false function at all,
1528000	1531000	which happens when n is zero.
1531000	1532000	I think that's kind of neat.
1532000	1533000	Let's do that.
1533000	1535000	Clear this up.
1535000	1538000	Is zero takes a church numeral,
1538000	1542000	flies the church numeral to the constant false function
1542000	1545000	and to true.
1545000	1552000	And we can check if a church numeral like n7 is zero.
1552000	1554000	Zero, well, it's not.
1554000	1561000	One is also not, but zero is.
1561000	1566000	So we've got our first merging of booleans and arithmetic.
1566000	1568000	Multi-type functions go on here.
1568000	1571000	It takes in a number and gives you back a boolean.
1571000	1573000	Interesting.
1573000	1576000	We've defined addition, multiplication,
1576000	1581000	exponentiation from scratch with no numbers, no operators.
1581000	1583000	I'm not subtracting by one.
1583000	1585000	How hard could it be?
1585000	1587000	This bird knows how to do it.
1587000	1590000	Take out a dollar.
1590000	1593000	Oh, dear.
1593000	1596000	Yeah, I'm not going to explain this one to you.
1596000	1598000	It took me a long time to get this.
1598000	1600000	Then I tried to write an explanation for it,
1600000	1603000	and it was like a page of size 12 font.
1603000	1607000	It's like, no, we're going to skip that for a minute,
1607000	1610000	and we're going to teach you data structures in lambda calculus.
1610000	1612000	Just one data structure.
1612000	1614000	It's the smallest one.
1614000	1617000	The virio.
1617000	1622000	The virio takes two arguments and holds onto them.
1622000	1624000	It pairs things together.
1624000	1628000	And then you've got a box that's closed over two arguments.
1628000	1632000	You can move the box around, do things that they put in other boxes.
1632000	1635000	And when you want to access the things in the box,
1635000	1637000	you give the box a function,
1637000	1641000	and that function gets those two arguments.
1641000	1643000	It's closures.
1643000	1646000	Using closures as data structures.
1646000	1648000	So let's code it out.
1648000	1652000	The virio takes an A and a B,
1652000	1654000	and then waits for a function.
1654000	1656000	And once you give it a function,
1656000	1660000	it supplies A and B to the function.
1660000	1664000	That's the pair function.
1664000	1666000	There's a vim joke in there somewhere,
1666000	1668000	so let's get that.
1668000	1672000	The virio, the pair of identity and mockingbird,
1672000	1676000	is a function that holds onto the identity of mockingbird
1676000	1679000	and provides you an interface for interacting with it.
1679000	1684000	Give me a function, and I'll give you these two things that I'm holding onto.
1684000	1688000	So what if we give it the kestrel?
1688000	1695000	What do we get back?
1695000	1697000	What's that?
1697000	1699000	The kestrel comes into the function as f.
1699000	1701000	The kestrel takes two arguments, i and m,
1701000	1704000	and gives you back the first one.
1704000	1707000	The virio of i and m.
1707000	1711000	We'll call this vim for fun.
1711000	1716000	If I supply the virio with first,
1716000	1718000	it gives me back identity.
1718000	1724000	If I supply it with kite, what is it going to give me?
1725000	1730000	The virio of i and m holds onto i and m.
1730000	1735000	If I give it a function, it applies that function to two things, i and m.
1735000	1737000	There it is.
1737000	1740000	So this vim thing is a box holding onto my two arguments,
1740000	1746000	and it can get access to them by passing them functions.
1746000	1751000	This is a purely functional data structure,
1751000	1755000	like a birdhouse for a pair of birds.
1755000	1758000	That one was a stretch.
1758000	1760000	So there it is.
1760000	1763000	It's also the composition of the cardinal and the fresh.
1763000	1767000	Again, I'm not too excited about that, but cool, okay.
1767000	1769000	And we got church pairs.
1769000	1771000	Pairing things is the virio.
1771000	1773000	Pairs to arguments.
1773000	1775000	What are these two functions?
1775000	1778000	This one takes a pair and calls the pair with the kestrel.
1778000	1780000	The kite.
1780000	1787000	What do these do?
1787000	1792000	If the pair or the virio is holding onto two elements, two items,
1792000	1796000	and you give it kestrel, what do you get back?
1796000	1798000	The first one.
1798000	1802000	And that means if you give it the kite, you get the second one.
1802000	1804000	So let's define those.
1804000	1807000	They're just syntactic sugar for what we just did.
1807000	1811000	First takes a pair and it calls the pair with the kestrel.
1811000	1817000	Second takes a pair and it calls the pair with the kite.
1817000	1828000	So the vim, the first of vim is I, and the second of vim is M.
1828000	1830000	First and second.
1830000	1834000	Extract elements from our pair.
1834000	1836000	Closures.
1836000	1837000	Beautiful.
1837000	1838000	Wonderful.
1838000	1839000	Here's an interesting one.
1839000	1842000	The reason I'm showing you this is not obvious right now.
1842000	1845000	This is the Phi combinator function.
1845000	1847000	Maybe it's a combinator?
1847000	1848000	I don't know.
1848000	1849000	It's the Phi function.
1849000	1850000	What does it do?
1850000	1851000	It's a little weird.
1851000	1854000	I'm going to use this red parens with a comma to mean a pair.
1854000	1857000	Because I don't want to have to show you pair of M and N7.
1857000	1859000	It gets verbose.
1859000	1862000	So just imagine I paired those two things together with the virio.
1862000	1864000	I'm calling Phi on this.
1864000	1866000	Let's look at what it does.
1866000	1868000	Well, it generates a new pair.
1868000	1871000	It pairs two new things together.
1871000	1875000	The first thing in the pair is the second of the old pair.
1875000	1881000	The next thing of the pair is the successor of the second of the old pair.
1881000	1884000	Okay, not too bad.
1884000	1886000	Let's do it together now ourselves.
1886000	1890000	What does this generate?
1890000	1893000	Phi of M3.
1893000	1900000	It shifts the second thing to the first thing and it increments the second thing.
1900000	1903000	Okay, that's what the Phi combinator does to pairs.
1903000	1906000	What's Phi of 0, 0?
1906000	1909000	Phi of 0, 1?
1909000	1911000	Phi of 1, 2?
1911000	1913000	2, 3?
1913000	1919000	What's 8 applications of Phi to 0, 0?
1919000	1921000	Someone say it out loud.
1921000	1929000	Say it proud.
1929000	1933000	Just look at the pattern.
1933000	1938000	1 application of Phi to 0, 0 gave you a 1 on the right and a 0 on the left.
1938000	1942000	3 applications of Phi gave you a 3 on the right and a 2 on the left.
1942000	1945000	What's 8 applications going to do?
1945000	1948000	8 on the right, 7 on the left.
1948000	1954000	Aha, what's the first of that?
1954000	1957000	It's 7.
1957000	1959000	I've got subtraction.
1959000	1962000	I've got subtraction, Eureka.
1962000	1964000	This is my predecessor function.
1964000	1966000	I can subtract by 1.
1966000	1970000	Let's make sure I have the Phi combinator written down first because I don't think I do.
1970000	1972000	Nope, I don't.
1972000	1976000	Okay, what's Phi do?
1976000	1988000	It takes a pair and it pairs together the second of the pair along with the successor of the second of the pair.
1988000	1990000	1, 2, 3?
1990000	1993000	Okay, that makes sense.
1993000	1997000	I'll just double check that it works.
1998000	2002000	Vim doesn't have a number in it, so I've got a pair together or something.
2002000	2005000	Who cares what the first thing is?
2005000	2010000	N3, I guess.
2010000	2012000	Does that make sense?
2012000	2015000	Phi of that, and I'll get the first thing of this.
2015000	2019000	I'll get its js num form.
2019000	2022000	And I've made a mistake.
2022000	2027000	F is not a function.
2027000	2032000	Let's double check this inside out.
2032000	2034000	Does that work?
2034000	2036000	Yeah, it gives me a function.
2036000	2042000	Phi of that, what about the first of this?
2042000	2044000	Also a function.
2044000	2046000	What about the js num of that?
2046000	2048000	That's where it throws.
2048000	2051000	I've made a mistake somewhere.
2051000	2055000	What does Phi look like?
2055000	2057000	Phi takes a pair.
2057000	2063000	It pairs together the second of P.
2063000	2065000	Sorry?
2065000	2067000	Yes, it is very much so.
2067000	2069000	Very much so.
2069000	2076000	Successor's second of P.
2076000	2078000	No, I'm not sure.
2078000	2080000	What were you going to say?
2080000	2091000	Yes, that's what I'm trying to do, but it's getting confused.
2091000	2095000	Pair together the second thing with the successor of the second thing.
2095000	2098000	That feels right to me.
2098000	2102000	Let's call Phi on pairing.
2102000	2104000	Oh, I think that's the problem I did.
2104000	2109000	Pair together N0 and N0.
2109000	2112000	That's fine.
2112000	2116000	If I get the first of that, that's function 0.
2116000	2124000	Now if I do something like N4, that's a function and I can convert it.
2124000	2126000	The first of that is that.
2126000	2134000	What about the second?
2134000	2137000	The second of that should be 5.
2137000	2138000	It does work.
2138000	2140000	I was just messing up something somewhere.
2140000	2142000	Who knows?
2142000	2145000	That's my predecessor.
2145000	2146000	Write it down.
2146000	2148000	We're almost at the end.
2148000	2151000	You're troopers for staying this long.
2151000	2166000	Predecessor of N is the first of N applications of Phi to the pair of N0 and N0.
2166000	2168000	I've got to watch my friends here.
2168000	2169000	Close the pair.
2169000	2171000	Close the first.
2171000	2173000	All right, there's my predecessor.
2173000	2177000	We'll get the JS version of the predecessor of N7.
2177000	2179000	It is a mistake.
2179000	2181000	Pair is not defined.
2181000	2182000	Oh, okay.
2182000	2187000	Because I said this is burial.
2187000	2188000	6.
2188000	2190000	Predecessor of 7, 6.
2190000	2194000	Wow.
2194000	2200000	There was our totally impossible, crazy predecessor and here's our beautiful data structures-based
2200000	2204000	predecessor where we count up, but we always remember the last thing, too.
2204000	2205000	That's all we're doing.
2205000	2209000	Counting up, remembering the previous thing.
2209000	2211000	I'm going to fly through this bit.
2211000	2216000	Subtraction is just doing K predecessors to N.
2216000	2226000	Less than or equal to is just subtracting K from N and seeing if we bottom out and checking if that's 0.
2226000	2231000	Equality is just checking if it's less than or equal to in both directions.
2231000	2239000	If they're less than or equal to in both directions, then they must be equal because there's no other way that that would make sense.
2239000	2241000	So we got those things.
2241000	2242000	Greater than.
2242000	2247000	This one's fun because it's clearly not less than or equal to, right?
2247000	2255000	So we got an N and a K and an N and a K, but that looks kind of like function composition, except it's binary function composition.
2255000	2257000	The rightmost function doesn't take a single input.
2257000	2259000	It takes two inputs.
2259000	2263000	So we can't simply say it's the bluebird of not and less than or equal to.
2263000	2265000	That doesn't work.
2265000	2273000	We need some new combinator that does two arguments for the right function and then the result into the second function.
2273000	2277000	And that combinator is the blackbird.
2277000	2283000	So the blackbird, let's say the blackbird of not less than or equal to is greater than.
2283000	2287000	This is, we're really starting to cook with gas here.
2287000	2290000	You know what is absolutely mind blowing to me?
2290000	2297000	The blackbird is the composition of composition and composition.
2297000	2303000	Put that in your pipe and smoke it.
2303000	2307000	All right, and then we hit the conclusion of the talk, which is actually in part one.
2307000	2311000	So that's the entire talk.
2311000	2315000	Thank you very much.
2315000	2318000	Pretty mind blowing stuff.
2318000	2320000	And guess what? This can keep on going on and on.
2320000	2323000	We can do infinite lists of data structures that hold other lists.
2323000	2328000	And you could have, if the list has a head or a tail and is empty, and it just keeps going out from there.
2328000	2330000	And you can build up an entire language that way.
2330000	2334000	And people have, and they're called functional programming languages.
2334000	2339000	Now, real functional programming languages don't use church numerals, because that would be ridiculous.
2339000	2344000	Because if you wanted to calculate something with 50 million, you have to do 50 million function implications.
2344000	2347000	So real functional programming languages take shortcuts.
2347000	2351000	They let you do things with numbers that are actually using hardware based math.
2351000	2356000	So the compiler has to compile down to Turing machine, stateful computations.
2356000	2362000	But as much as possible, the languages have this backbone of lambda calculus built into them,
2362000	2366000	which proves very useful in a variety of situations.
2366000	2370000	Any questions before I stop the recording?
2370000	2376000	Anything beyond a pair are sort of like, well done, like you're talking about?
2376000	2381000	Yeah, so you can make a list by doing a pair whose second element is a pair,
2381000	2384000	whose second element is a pair, and so on and so forth.
2384000	2387000	And then one of the elements of the pair, like the first element,
2387000	2392000	is always like a flag of whether it's the end of the list or not, or something like that.
2392000	2394000	And you start to do equation checks.
2394000	2399000	So like if this first element is, or the first element is the element you're holding on to,
2399000	2402000	and the second element is the continuation of the list.
2402000	2407000	And if the continuation of the list is not a new pair, but it's some other value, like zero,
2407000	2412000	then that's the end of the list.
2412000	2416000	Right, the empty list is zero or something like that.
2416000	2419000	Or it's a pair of zero and zero or something.
2419000	2422000	So all sorts of interesting ways of building this out.
2422000	2425000	Some of those resources I have show how you can do that.
2425000	2436000	And it's not, it's really not too difficult once you've got this kind of way of thinking about functions down.
2436000	2443000	But as I said before, I really think that does this make you a better functional programmer?
2443000	2445000	Only in a very indirect way.
2445000	2452000	A mental workout slash being very comfortable with currying and partial function application and higher order functions.
2452000	2458000	And some of those combinators are useful like composition and flip and ID and constant.
2458000	2460000	There's a reason those are built into Haskell.
2460000	2464000	They show up again and again and again in very practical examples.
2464000	2470000	So being familiar with these things gives you a little bit of a boost or a leg up or a formal way of thinking about them.
2470000	2474000	And if you want to go make your own functional programming language, that's cool too.
2474000	2477000	But why do this?
2477000	2479000	I don't think it's necessary at all.
2479000	2480000	I think it's nice.
2480000	2483000	I think it's interesting and I hope you think so too.
2483000	2487000	As evidenced by the fact that you're here at 834.
2487000	2489000	So thank you all very much.
2489000	2493000	You've been a really great audience and have a good night.
