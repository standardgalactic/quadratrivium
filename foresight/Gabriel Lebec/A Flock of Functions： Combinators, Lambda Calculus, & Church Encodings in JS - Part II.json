{"text": " Okay, we left off. I was going to teach you numbers. So how are we going to do this? You know, we don't have multiplication. We don't have a quality. We don't have numbers. We've got nothing. How are you going to do it? 0, 1, 2, 3, successor. All right, let's think about instead of nouns 1 and 2 and 3, we're going to use adverbs. Once, twice, thrice, etc. So how's this going to work? Let's look at 1 to start with. 1 is going to take a function and argument, and it's going to apply the function to the argument. One time. It's going to call the function once. See you later, Elmer. Ah, let's try it. Oops, that's not where I wanted that to go. That's where I wanted it to go. Okay, so once is going to take a function and argument. It's going to apply the function to the argument a single time. What is once of identity of 2? 2. That makes sense. What about once of not on true? Yeah, straightforward so far. So what about 2? 2 will take a function and argument, and it will apply the function twofold times. It will apply the function to the argument, and then it will apply the function again to the result of that. It will apply the function over and over again. So let's do twice. Twice takes a function and an argument, and we'll apply the function to the function of the argument. And we do twice not of false is, say again, wait, twice not. Not of not of false. What's a double negative? It just loops back around, right? And three times, well, that's just thrice. So we'll define that thrice takes a function and its argument. It applies the function to the function to the function to the argument. And we could do thrice not true. False. Yeah, I'm flipping you back and forth. You got to keep on staying on your toes. Well, this is kind of cool. You can see these building out here. We got a number of hard-coded in Fs, and that's kind of our number system. So we just demoed this. Once not true is not true, which is false. Twice not true is not not true, which is true. Thrice not true is not not not true, which is false again. We start to get this building up of a number system. What is zero? What's the theme of the talk? It's a function. It takes the same signature as all of our other numbers. This is like a good rule in general. As you got a class of functions, they all got to share the same signature. Even if you don't know how to design one of the functions, you start thinking, well, wait, it's got to take the same arguments as all my other functions. Twice applies the two-fold F to A. Once applies the single F to A. What does zero do? It just gives you back A. It applies F to A no times. Does that look familiar to anybody? Which one? Not quite. Identity would be A to A. But this is F A to A. Something other thing, return other thing. First thing, second thing, return second thing. Zero is false. That's really nice. I like that. That's cool, right? So zero times not of true is of course just true because we didn't apply the function to true. We just returned it. And of course it could say false of not true and that gives us the same thing. So zero is false. Yeah, we saw this already. So we start to do church encodings for numerals. Zero, one, two, three, four, five, and so on and so forth. But we have a small annoyance here, which is that we've manually gone and written all these functions down. Well, that's not math. That's numbers, but it's not math. That's not arithmetic, right? Like we're not dynamically generating these functions. Zero is false. By the way, what's once? Look at it carefully. It takes two things and it just gives you back those two things. That sounds familiar. What did you say a second ago? What was your name again? Truman. Identity. This is the identity once removed, like the mockingbird once removed. Yeah, an A to an A. Now we got AB to AB. It's the same thing. It acts exactly like the identity function. That's kind of also fun. Zero is false and one is identity. That's really, really nice. I mean, as a mathematician, that makes me smile. But we got a problem. We want dynamically generate numbers. How are we going to do it? How can we add one? It sounds trivial on the face of it, but it's not obvious. We need a successor function. We want a function that if you give it a number, it gives you back the next number somehow. If you give it two, it gives you three. And you could do it like this. You could say the successor of successor of one is three. Well, that's Peano numbers. We're going way back to 1889 here. Sort of. So we know our successors got to take in one of these church numerals. And let's do a concrete example. The successor of one is two. Well, let's replace these numbers by their implementations to see what this looks like. One is the identity once removed. It takes a function and argument and applies the function once to the argument. Twice takes a function and arguments and applies the function twice to the argument. The thing on the left is really similar to the thing on the right. What's the difference? One extra F. What we need the successor function to do is tack on an extra F at the beginning. So if the successor takes a function, that end function, that church numeral, it's going to return a new number function, one that takes F and A. And what does that new number function do? It does the original number of function applications. And then it does one more on top of that. Wow. So there's my successor function, NFA to F of NFA, an additional F, just one extra F. Let's try it out. Successor takes a church numeral and it does, what am I doing here? I'm doing N to F to A to N of F of A, but an F in front of all of that for one extra application of F. Now, I've got this zero function and I've got this, did I have one? No, did I have once? I have once. So if I get the successor of zero, this is some number function, but this is not intentionally equal to what we saw before. It's only extensionally equal. So I need to prove that this is the one function. So I can apply a function like not to an argument like true and I get false. So that actually worked. This gets a little annoying. So I'm going to just find this new JS num function. It'll take a church numeral and we'll apply the church numeral. I'll say, hey, take this and do the addition of one N times starting at zero. So the addition of one is I have some X and I add one to it. So now I can call JS num on the successor of zero and it tells me that's one. That's cool. I'm going to convert my church numbers into JavaScript numbers. What about the successor of successor of zero? Let's do successor of successor of successor of zero is three. This is useful. So let's let's actually like start storing these things and zero equals zero and one equals once and two equals twice. Is there a twice? Yeah, N2 is twice. N3 equals the successor of N2 and four is the successor of N3. I'll stop there for now, but we could do things like wait a second. The successor of N4 ought to be five and it is not too shabby. This is just demonstrating that and the purpose here is just to show that that new F gets tacked on and that's how we get a successor. So we have our successor function tax on an extra application of F. And at this point I want to talk about my favorite combinator of all. This is probably the most extolled and beloved of all combinators. Even the Y combinator doesn't compare to this. This combinator gets more mentions probably, I think, than the Y combinator. I'd have to do a Google search to prove that true. I might be wrong, but I wouldn't be surprised. Except you won't find it if you go search for the Bluebird combinator. You'll find it being talked about as something else. Do any mathematicians or functional programmers want to identify this for me? What am I looking at? What does the Bluebird do? It takes G and then it applies F. It applies G to A and then F to that. It's a pipeline. It takes A, puts it into G, puts the result of that into F, and that's the result you get out. What is it? It's composed. This is function composition. The Bluebird or the B combinator is function composition. That's why I'm saying it's the most famous one of all. Any time anybody tries to evangelize functional programming, what do they mention? Composition. That's what this is. Let's make it. B takes an F into G and it does G first and then F. This is interesting. Let's do B of not and not. This isn't as interesting because it doesn't matter whether it's right to left or left to right. They're identical, but that's okay. We'll show other things in a moment. This composition, the not not composition, is a function that first does not and then does the other not. If we pass in something like true, oops, I got a mistake. First mistake. A is not defined. Oh, FG. I forgot. Yep. There we go. It takes an F, a G, and an A. Oh, JavaScript. There we go. That's what I expected. I can compose these. I can pipeline them, chain them together into a new function that is their composition. Use that composition on some argument. This is boring because it doesn't matter whether it's right to left or left to right. Let's say Yale takes some string. I'm sorry to pollute our Lambda calculus topic with JavaScript strings. I would avoid it if I could, but just for demonstration, I don't know a better way yet of doing this. It just tax on an exclamation point. So if I yell Lambda, I get Lambda. Well, now I can do a little bit more interesting things. For instance, if I compose, first I will get the successor. That's the right most. Then I will yell it and I call this, actually, I'll do a JS note. First I'll get the successor, then I'll convert it to its JavaScript equivalent of N4. I get 5. Right to left function composition. We've seen these examples already. We can compose. The T goes into the first one on the right, then the next one on the left, and that is our result. So we get true. So the composition is expressed in that other way. And the right most one is the right most one in Haskell. This is built in. It's that little dot, which is wonderful. That's such a nice way of doing function composition. So odd in Haskell is not even. This is great. This is a combinator. It's the bluebird, so we'll put it in there. It's unary to unary composition going right to left. It's a period in Haskell. You can section it and turn it into the B combinator in prefix notation with parentheses. So that would be parentheses period two functions instead of function period function. But infix notation is more pleasant for function composition, I think. So here's our successor. We already saw this. It takes an N, returns a function FA that applies an extra F on top of NFA. There's a nicer way of doing this. Look what we have here. F is a function and NF is a function. This feeds an argument into the right most function and then feeds the result of that into the left function, generating a result. So which combinator it is? It's the bluebird. This is wrong. Successor... No, that's right. Okay, good. So the successor is the composition of one extra function on top of the original number of functions. That's a little bit prettier to my eyes. So we'll rearrange this. I'm not going to bother to demo it. It works. Let's do some more math. We've got adding by one. What about adding two numbers together? Binary addition. We're not binary in the sense of binary number systems, but two numbers together. What is add? What's the theme of the talk? How many arguments does it take? All right, so it takes two church numerals. If we're going to put them in the parameter list, we're probably going to have to use them in the body of the function, right? So let's consider a concrete example. Adding one and five should be the successor of five. Adding two and five should be the successor of five. Adding three to five should be the successor of successor of successor of five. But wait a second. What are we doing here? This is function composition, right? And what are church numerals? They create n-fold compositions. So that's the three-fold composition of successor. And if that's the three-fold composition of successor, we can generate that using a church numeral. This is saying adding three and five is doing thrice the successor of five. And that's our application there. So let's code it out. The add lambda calculus function takes an n and a k. And it does an n-fold succession on top of k. We'll try it. We'll do a convert this to JavaScript. We'll say add two church numerals like n-three and n-four, seven. It works. So let's redo this and start storing a couple more numbers for fun. Okay, n-seven is equal to that church numeral. And six is the addition of three and three. And five is the addition of two and three. So now we got the church numeral zero through seven, I believe. This is an Englishy way, but pure lambda calculus. Just all we have to do is replace our shorthand with the equivalent lambda notation to convert this into true lambda calculus. So you can see this n-three successor in five is saying thrice successor of five-fold, which is eight-fold. Nice. Church arithmetic, we now have addition. What about multiplication? What is it? Yeah. All right, so we know that multiplying two by three should give us six. But six is the six-fold composition of some function to an argument. Okay, so it's six f's that we apply to an argument. But six f's is also because composition is associative and commutative. It's not associative. Associative? Yeah, it's associative, but it's not commutative. It is associative. Function composition is associative. So this isn't just a six-fold composition of f. It's also the two-fold composition of the three-fold composition of f. Well, there's the three-fold composition, and I could just say n-three f to get that. And the two-fold composition of that is n-two of that. But now look what I've got here. I've got an a on the end on both sides. That just cancels out. Bye-bye. So multiplying two numbers and applying that new result to a function that first does that, you know, three-fold composition of f and then two-fold composition of that result. So we can use that, and we can go ahead and say, yeah, that's twice thricef, which is six-fold f. Makes sense. And we can write that down and say, yeah, sure, it's fine, but there's an even better way. Does anybody see it? I take an argument f, and I apply it to the right-most function. I take that result and apply it to the left-most function. That generates my result. That means it's really the composition of two and three. But look what I've got here on the sides. f and f, those cancel out. So multiplying two numbers is just getting their composition. But how do I get their composition, the lambda calculus, with the b-compinator? But wait a second. Two and three are arguments as well. I take that out. Oh, my gosh. Multiplication is just composition. Wow. That's amazing. These are identical functions. They're alpha-equivalent, meaning that all we've done is change the variable names around. But the really nice way of noting this is that multiplication is just the composition of trig mammals. So let's do this. Multi-equals b, we're done. We can demonstrate it, of course. js num of the multiplication of two and three is a mistake. What did I do wrong? G is not a function. Oh, I said two and three instead of my lambda two and lambda three. There we go, six. Neat. Do something fun that we haven't done before, like five and four. There's 20. That's nice. What about exponentiation? Hmm. Exponentiation. It's going to take two arguments. We know two to the third power is eight. How did you do this in grade school? What is two to the third? Yeah. But what's multiplication in the lambda calculus? Composition. And so we've done a three-fold composition of n two. How do we express that using trig numerals? How do you do the n-fold composition of anything? It's just a trig number. That's just n three n twos. But wait a second. That means a power just takes nk and it flips them around. This is the thrush combinator. Thrice of twice. Well, that's doing twice of twice of twice. Twice of twice of twice is eight-fold. Beautiful. Really nice. So we've added a combinator. We've added exponentiation. We'll define this. I'll say that this is pow. The thrush, I'll call it pow. It takes an n and a k and applies the k to n. And of course I can try it out. Raising three to the second power should give me nine. Oops, I did this again. There it is. And by the way, the thrush is the cardinal of identity. I don't find that particularly exciting, but it's cool, I guess. Just one more example of things going on in the combinatorial logic. We've got arithmetic uses of thrush. Here's a nice little one. I like this one. It's cute. Checking if something is zero. We know that if we give it zero, it should give us true. If we give it one, it should be false. Two should be false. And so on and so forth. It's pretty straightforward. How can we define this? It's a function. It takes a church numeral. Now here's where it gets interesting. Well, if you're going to get a numeral and use your parameter, you're probably going to have to use it in the function body. What do church numerals do? Where do they take its arguments? Does anybody remember? They take two arguments. What are the two arguments? When I say twice, yeah, twice a function applied to an argument. So that's what a church numeral does. It applies some function a certain number of times to an argument. Well, what if n is zero? It doesn't apply the function at all. It just returns the second thing. The function I'm trying to create here is the is zero function. So if n is zero, it's just going to return arg. So what should arg be? True. And n is zero, return true. Pretty straightforward. Skip the function. Forget about it. Don't run it. Well, that's nice. But what about the other case? What if it's one or two or something else? We want it to return false. So somehow, however many times we do funk, if we do it once, twice, thrice a billion times, no matter how many times we do funk, it's got to return false. What's a function that always returns false? Not quite. The false function takes two arguments and chooses the second. What's a function that always returns false? This is going way back. Remember how I showed you that the kestrel with one argument is a constant function? It's fixated. It always returns a given argument. So apply the constant false function n times true. If I do this three times, that's the constant false of constant false of constant false of true. But who cares? Because the constant false function always gives you back false. And the only time this gives you true is if you don't run the constant false function at all, which happens when n is zero. I think that's kind of neat. Let's do that. Clear this up. Is zero takes a church numeral, flies the church numeral to the constant false function and to true. And we can check if a church numeral like n7 is zero. Zero, well, it's not. One is also not, but zero is. So we've got our first merging of booleans and arithmetic. Multi-type functions go on here. It takes in a number and gives you back a boolean. Interesting. We've defined addition, multiplication, exponentiation from scratch with no numbers, no operators. I'm not subtracting by one. How hard could it be? This bird knows how to do it. Take out a dollar. Oh, dear. Yeah, I'm not going to explain this one to you. It took me a long time to get this. Then I tried to write an explanation for it, and it was like a page of size 12 font. It's like, no, we're going to skip that for a minute, and we're going to teach you data structures in lambda calculus. Just one data structure. It's the smallest one. The virio. The virio takes two arguments and holds onto them. It pairs things together. And then you've got a box that's closed over two arguments. You can move the box around, do things that they put in other boxes. And when you want to access the things in the box, you give the box a function, and that function gets those two arguments. It's closures. Using closures as data structures. So let's code it out. The virio takes an A and a B, and then waits for a function. And once you give it a function, it supplies A and B to the function. That's the pair function. There's a vim joke in there somewhere, so let's get that. The virio, the pair of identity and mockingbird, is a function that holds onto the identity of mockingbird and provides you an interface for interacting with it. Give me a function, and I'll give you these two things that I'm holding onto. So what if we give it the kestrel? What do we get back? What's that? The kestrel comes into the function as f. The kestrel takes two arguments, i and m, and gives you back the first one. The virio of i and m. We'll call this vim for fun. If I supply the virio with first, it gives me back identity. If I supply it with kite, what is it going to give me? The virio of i and m holds onto i and m. If I give it a function, it applies that function to two things, i and m. There it is. So this vim thing is a box holding onto my two arguments, and it can get access to them by passing them functions. This is a purely functional data structure, like a birdhouse for a pair of birds. That one was a stretch. So there it is. It's also the composition of the cardinal and the fresh. Again, I'm not too excited about that, but cool, okay. And we got church pairs. Pairing things is the virio. Pairs to arguments. What are these two functions? This one takes a pair and calls the pair with the kestrel. The kite. What do these do? If the pair or the virio is holding onto two elements, two items, and you give it kestrel, what do you get back? The first one. And that means if you give it the kite, you get the second one. So let's define those. They're just syntactic sugar for what we just did. First takes a pair and it calls the pair with the kestrel. Second takes a pair and it calls the pair with the kite. So the vim, the first of vim is I, and the second of vim is M. First and second. Extract elements from our pair. Closures. Beautiful. Wonderful. Here's an interesting one. The reason I'm showing you this is not obvious right now. This is the Phi combinator function. Maybe it's a combinator? I don't know. It's the Phi function. What does it do? It's a little weird. I'm going to use this red parens with a comma to mean a pair. Because I don't want to have to show you pair of M and N7. It gets verbose. So just imagine I paired those two things together with the virio. I'm calling Phi on this. Let's look at what it does. Well, it generates a new pair. It pairs two new things together. The first thing in the pair is the second of the old pair. The next thing of the pair is the successor of the second of the old pair. Okay, not too bad. Let's do it together now ourselves. What does this generate? Phi of M3. It shifts the second thing to the first thing and it increments the second thing. Okay, that's what the Phi combinator does to pairs. What's Phi of 0, 0? Phi of 0, 1? Phi of 1, 2? 2, 3? What's 8 applications of Phi to 0, 0? Someone say it out loud. Say it proud. Just look at the pattern. 1 application of Phi to 0, 0 gave you a 1 on the right and a 0 on the left. 3 applications of Phi gave you a 3 on the right and a 2 on the left. What's 8 applications going to do? 8 on the right, 7 on the left. Aha, what's the first of that? It's 7. I've got subtraction. I've got subtraction, Eureka. This is my predecessor function. I can subtract by 1. Let's make sure I have the Phi combinator written down first because I don't think I do. Nope, I don't. Okay, what's Phi do? It takes a pair and it pairs together the second of the pair along with the successor of the second of the pair. 1, 2, 3? Okay, that makes sense. I'll just double check that it works. Vim doesn't have a number in it, so I've got a pair together or something. Who cares what the first thing is? N3, I guess. Does that make sense? Phi of that, and I'll get the first thing of this. I'll get its js num form. And I've made a mistake. F is not a function. Let's double check this inside out. Does that work? Yeah, it gives me a function. Phi of that, what about the first of this? Also a function. What about the js num of that? That's where it throws. I've made a mistake somewhere. What does Phi look like? Phi takes a pair. It pairs together the second of P. Sorry? Yes, it is very much so. Very much so. Successor's second of P. No, I'm not sure. What were you going to say? Yes, that's what I'm trying to do, but it's getting confused. Pair together the second thing with the successor of the second thing. That feels right to me. Let's call Phi on pairing. Oh, I think that's the problem I did. Pair together N0 and N0. That's fine. If I get the first of that, that's function 0. Now if I do something like N4, that's a function and I can convert it. The first of that is that. What about the second? The second of that should be 5. It does work. I was just messing up something somewhere. Who knows? That's my predecessor. Write it down. We're almost at the end. You're troopers for staying this long. Predecessor of N is the first of N applications of Phi to the pair of N0 and N0. I've got to watch my friends here. Close the pair. Close the first. All right, there's my predecessor. We'll get the JS version of the predecessor of N7. It is a mistake. Pair is not defined. Oh, okay. Because I said this is burial. 6. Predecessor of 7, 6. Wow. There was our totally impossible, crazy predecessor and here's our beautiful data structures-based predecessor where we count up, but we always remember the last thing, too. That's all we're doing. Counting up, remembering the previous thing. I'm going to fly through this bit. Subtraction is just doing K predecessors to N. Less than or equal to is just subtracting K from N and seeing if we bottom out and checking if that's 0. Equality is just checking if it's less than or equal to in both directions. If they're less than or equal to in both directions, then they must be equal because there's no other way that that would make sense. So we got those things. Greater than. This one's fun because it's clearly not less than or equal to, right? So we got an N and a K and an N and a K, but that looks kind of like function composition, except it's binary function composition. The rightmost function doesn't take a single input. It takes two inputs. So we can't simply say it's the bluebird of not and less than or equal to. That doesn't work. We need some new combinator that does two arguments for the right function and then the result into the second function. And that combinator is the blackbird. So the blackbird, let's say the blackbird of not less than or equal to is greater than. This is, we're really starting to cook with gas here. You know what is absolutely mind blowing to me? The blackbird is the composition of composition and composition. Put that in your pipe and smoke it. All right, and then we hit the conclusion of the talk, which is actually in part one. So that's the entire talk. Thank you very much. Pretty mind blowing stuff. And guess what? This can keep on going on and on. We can do infinite lists of data structures that hold other lists. And you could have, if the list has a head or a tail and is empty, and it just keeps going out from there. And you can build up an entire language that way. And people have, and they're called functional programming languages. Now, real functional programming languages don't use church numerals, because that would be ridiculous. Because if you wanted to calculate something with 50 million, you have to do 50 million function implications. So real functional programming languages take shortcuts. They let you do things with numbers that are actually using hardware based math. So the compiler has to compile down to Turing machine, stateful computations. But as much as possible, the languages have this backbone of lambda calculus built into them, which proves very useful in a variety of situations. Any questions before I stop the recording? Anything beyond a pair are sort of like, well done, like you're talking about? Yeah, so you can make a list by doing a pair whose second element is a pair, whose second element is a pair, and so on and so forth. And then one of the elements of the pair, like the first element, is always like a flag of whether it's the end of the list or not, or something like that. And you start to do equation checks. So like if this first element is, or the first element is the element you're holding on to, and the second element is the continuation of the list. And if the continuation of the list is not a new pair, but it's some other value, like zero, then that's the end of the list. Right, the empty list is zero or something like that. Or it's a pair of zero and zero or something. So all sorts of interesting ways of building this out. Some of those resources I have show how you can do that. And it's not, it's really not too difficult once you've got this kind of way of thinking about functions down. But as I said before, I really think that does this make you a better functional programmer? Only in a very indirect way. A mental workout slash being very comfortable with currying and partial function application and higher order functions. And some of those combinators are useful like composition and flip and ID and constant. There's a reason those are built into Haskell. They show up again and again and again in very practical examples. So being familiar with these things gives you a little bit of a boost or a leg up or a formal way of thinking about them. And if you want to go make your own functional programming language, that's cool too. But why do this? I don't think it's necessary at all. I think it's nice. I think it's interesting and I hope you think so too. As evidenced by the fact that you're here at 834. So thank you all very much. You've been a really great audience and have a good night.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.0, "text": " Okay, we left off. I was going to teach you numbers. So how are we going to do this?", "tokens": [50364, 1033, 11, 321, 1411, 766, 13, 286, 390, 516, 281, 2924, 291, 3547, 13, 407, 577, 366, 321, 516, 281, 360, 341, 30, 50864], "temperature": 0.0, "avg_logprob": -0.203428866816502, "compression_ratio": 1.5539906103286385, "no_speech_prob": 0.316342294216156}, {"id": 1, "seek": 0, "start": 10.0, "end": 15.0, "text": " You know, we don't have multiplication. We don't have a quality. We don't have numbers.", "tokens": [50864, 509, 458, 11, 321, 500, 380, 362, 27290, 13, 492, 500, 380, 362, 257, 3125, 13, 492, 500, 380, 362, 3547, 13, 51114], "temperature": 0.0, "avg_logprob": -0.203428866816502, "compression_ratio": 1.5539906103286385, "no_speech_prob": 0.316342294216156}, {"id": 2, "seek": 0, "start": 15.0, "end": 19.0, "text": " We've got nothing. How are you going to do it? 0, 1, 2, 3, successor.", "tokens": [51114, 492, 600, 658, 1825, 13, 1012, 366, 291, 516, 281, 360, 309, 30, 1958, 11, 502, 11, 568, 11, 805, 11, 31864, 13, 51314], "temperature": 0.0, "avg_logprob": -0.203428866816502, "compression_ratio": 1.5539906103286385, "no_speech_prob": 0.316342294216156}, {"id": 3, "seek": 0, "start": 19.0, "end": 26.0, "text": " All right, let's think about instead of nouns 1 and 2 and 3, we're going to use adverbs.", "tokens": [51314, 1057, 558, 11, 718, 311, 519, 466, 2602, 295, 48184, 502, 293, 568, 293, 805, 11, 321, 434, 516, 281, 764, 614, 43348, 13, 51664], "temperature": 0.0, "avg_logprob": -0.203428866816502, "compression_ratio": 1.5539906103286385, "no_speech_prob": 0.316342294216156}, {"id": 4, "seek": 2600, "start": 26.0, "end": 33.0, "text": " Once, twice, thrice, etc. So how's this going to work? Let's look at 1 to start with.", "tokens": [50364, 3443, 11, 6091, 11, 739, 573, 11, 5183, 13, 407, 577, 311, 341, 516, 281, 589, 30, 961, 311, 574, 412, 502, 281, 722, 365, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1269235610961914, "compression_ratio": 1.7178217821782178, "no_speech_prob": 0.01940879039466381}, {"id": 5, "seek": 2600, "start": 33.0, "end": 39.0, "text": " 1 is going to take a function and argument, and it's going to apply the function to the argument.", "tokens": [50714, 502, 307, 516, 281, 747, 257, 2445, 293, 6770, 11, 293, 309, 311, 516, 281, 3079, 264, 2445, 281, 264, 6770, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1269235610961914, "compression_ratio": 1.7178217821782178, "no_speech_prob": 0.01940879039466381}, {"id": 6, "seek": 2600, "start": 39.0, "end": 45.0, "text": " One time. It's going to call the function once. See you later, Elmer.", "tokens": [51014, 1485, 565, 13, 467, 311, 516, 281, 818, 264, 2445, 1564, 13, 3008, 291, 1780, 11, 2699, 936, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1269235610961914, "compression_ratio": 1.7178217821782178, "no_speech_prob": 0.01940879039466381}, {"id": 7, "seek": 2600, "start": 45.0, "end": 51.0, "text": " Ah, let's try it. Oops, that's not where I wanted that to go. That's where I wanted it to go.", "tokens": [51314, 2438, 11, 718, 311, 853, 309, 13, 21726, 11, 300, 311, 406, 689, 286, 1415, 300, 281, 352, 13, 663, 311, 689, 286, 1415, 309, 281, 352, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1269235610961914, "compression_ratio": 1.7178217821782178, "no_speech_prob": 0.01940879039466381}, {"id": 8, "seek": 5100, "start": 51.0, "end": 64.0, "text": " Okay, so once is going to take a function and argument. It's going to apply the function to the argument a single time.", "tokens": [50364, 1033, 11, 370, 1564, 307, 516, 281, 747, 257, 2445, 293, 6770, 13, 467, 311, 516, 281, 3079, 264, 2445, 281, 264, 6770, 257, 2167, 565, 13, 51014], "temperature": 0.0, "avg_logprob": -0.21354449667581699, "compression_ratio": 1.3157894736842106, "no_speech_prob": 0.06458259373903275}, {"id": 9, "seek": 5100, "start": 64.0, "end": 74.0, "text": " What is once of identity of 2?", "tokens": [51014, 708, 307, 1564, 295, 6575, 295, 568, 30, 51514], "temperature": 0.0, "avg_logprob": -0.21354449667581699, "compression_ratio": 1.3157894736842106, "no_speech_prob": 0.06458259373903275}, {"id": 10, "seek": 7400, "start": 74.0, "end": 83.0, "text": " 2. That makes sense. What about once of not on true?", "tokens": [50364, 568, 13, 663, 1669, 2020, 13, 708, 466, 1564, 295, 406, 322, 2074, 30, 50814], "temperature": 0.0, "avg_logprob": -0.10825406877618086, "compression_ratio": 1.7852760736196318, "no_speech_prob": 0.11751201003789902}, {"id": 11, "seek": 7400, "start": 83.0, "end": 88.0, "text": " Yeah, straightforward so far.", "tokens": [50814, 865, 11, 15325, 370, 1400, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10825406877618086, "compression_ratio": 1.7852760736196318, "no_speech_prob": 0.11751201003789902}, {"id": 12, "seek": 7400, "start": 88.0, "end": 96.0, "text": " So what about 2? 2 will take a function and argument, and it will apply the function twofold times.", "tokens": [51064, 407, 437, 466, 568, 30, 568, 486, 747, 257, 2445, 293, 6770, 11, 293, 309, 486, 3079, 264, 2445, 732, 18353, 1413, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10825406877618086, "compression_ratio": 1.7852760736196318, "no_speech_prob": 0.11751201003789902}, {"id": 13, "seek": 7400, "start": 96.0, "end": 101.0, "text": " It will apply the function to the argument, and then it will apply the function again to the result of that.", "tokens": [51464, 467, 486, 3079, 264, 2445, 281, 264, 6770, 11, 293, 550, 309, 486, 3079, 264, 2445, 797, 281, 264, 1874, 295, 300, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10825406877618086, "compression_ratio": 1.7852760736196318, "no_speech_prob": 0.11751201003789902}, {"id": 14, "seek": 10100, "start": 101.0, "end": 106.0, "text": " It will apply the function over and over again. So let's do twice.", "tokens": [50364, 467, 486, 3079, 264, 2445, 670, 293, 670, 797, 13, 407, 718, 311, 360, 6091, 13, 50614], "temperature": 0.0, "avg_logprob": -0.15641115693485036, "compression_ratio": 1.7730496453900708, "no_speech_prob": 0.2506660223007202}, {"id": 15, "seek": 10100, "start": 106.0, "end": 113.0, "text": " Twice takes a function and an argument, and we'll apply the function to the function of the argument.", "tokens": [50614, 46964, 2516, 257, 2445, 293, 364, 6770, 11, 293, 321, 603, 3079, 264, 2445, 281, 264, 2445, 295, 264, 6770, 13, 50964], "temperature": 0.0, "avg_logprob": -0.15641115693485036, "compression_ratio": 1.7730496453900708, "no_speech_prob": 0.2506660223007202}, {"id": 16, "seek": 10100, "start": 113.0, "end": 124.0, "text": " And we do twice not of false is, say again, wait, twice not. Not of not of false.", "tokens": [50964, 400, 321, 360, 6091, 406, 295, 7908, 307, 11, 584, 797, 11, 1699, 11, 6091, 406, 13, 1726, 295, 406, 295, 7908, 13, 51514], "temperature": 0.0, "avg_logprob": -0.15641115693485036, "compression_ratio": 1.7730496453900708, "no_speech_prob": 0.2506660223007202}, {"id": 17, "seek": 12400, "start": 124.0, "end": 130.0, "text": " What's a double negative? It just loops back around, right?", "tokens": [50364, 708, 311, 257, 3834, 3671, 30, 467, 445, 16121, 646, 926, 11, 558, 30, 50664], "temperature": 0.0, "avg_logprob": -0.1713417682451071, "compression_ratio": 1.6651162790697673, "no_speech_prob": 0.42969995737075806}, {"id": 18, "seek": 12400, "start": 130.0, "end": 136.0, "text": " And three times, well, that's just thrice. So we'll define that thrice takes a function and its argument.", "tokens": [50664, 400, 1045, 1413, 11, 731, 11, 300, 311, 445, 739, 573, 13, 407, 321, 603, 6964, 300, 739, 573, 2516, 257, 2445, 293, 1080, 6770, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1713417682451071, "compression_ratio": 1.6651162790697673, "no_speech_prob": 0.42969995737075806}, {"id": 19, "seek": 12400, "start": 136.0, "end": 140.0, "text": " It applies the function to the function to the function to the argument.", "tokens": [50964, 467, 13165, 264, 2445, 281, 264, 2445, 281, 264, 2445, 281, 264, 6770, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1713417682451071, "compression_ratio": 1.6651162790697673, "no_speech_prob": 0.42969995737075806}, {"id": 20, "seek": 12400, "start": 140.0, "end": 145.0, "text": " And we could do thrice not true.", "tokens": [51164, 400, 321, 727, 360, 739, 573, 406, 2074, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1713417682451071, "compression_ratio": 1.6651162790697673, "no_speech_prob": 0.42969995737075806}, {"id": 21, "seek": 12400, "start": 145.0, "end": 151.0, "text": " False. Yeah, I'm flipping you back and forth. You got to keep on staying on your toes.", "tokens": [51414, 50040, 13, 865, 11, 286, 478, 26886, 291, 646, 293, 5220, 13, 509, 658, 281, 1066, 322, 7939, 322, 428, 14681, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1713417682451071, "compression_ratio": 1.6651162790697673, "no_speech_prob": 0.42969995737075806}, {"id": 22, "seek": 15100, "start": 151.0, "end": 158.0, "text": " Well, this is kind of cool. You can see these building out here. We got a number of hard-coded in Fs, and that's kind of our number system.", "tokens": [50364, 1042, 11, 341, 307, 733, 295, 1627, 13, 509, 393, 536, 613, 2390, 484, 510, 13, 492, 658, 257, 1230, 295, 1152, 12, 66, 12340, 294, 479, 82, 11, 293, 300, 311, 733, 295, 527, 1230, 1185, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10446655416043005, "compression_ratio": 1.8814432989690721, "no_speech_prob": 0.028413446620106697}, {"id": 23, "seek": 15100, "start": 158.0, "end": 163.0, "text": " So we just demoed this. Once not true is not true, which is false.", "tokens": [50714, 407, 321, 445, 10723, 292, 341, 13, 3443, 406, 2074, 307, 406, 2074, 11, 597, 307, 7908, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10446655416043005, "compression_ratio": 1.8814432989690721, "no_speech_prob": 0.028413446620106697}, {"id": 24, "seek": 15100, "start": 163.0, "end": 167.0, "text": " Twice not true is not not true, which is true.", "tokens": [50964, 46964, 406, 2074, 307, 406, 406, 2074, 11, 597, 307, 2074, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10446655416043005, "compression_ratio": 1.8814432989690721, "no_speech_prob": 0.028413446620106697}, {"id": 25, "seek": 15100, "start": 167.0, "end": 172.0, "text": " Thrice not true is not not not true, which is false again.", "tokens": [51164, 334, 21299, 406, 2074, 307, 406, 406, 406, 2074, 11, 597, 307, 7908, 797, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10446655416043005, "compression_ratio": 1.8814432989690721, "no_speech_prob": 0.028413446620106697}, {"id": 26, "seek": 15100, "start": 172.0, "end": 176.0, "text": " We start to get this building up of a number system.", "tokens": [51414, 492, 722, 281, 483, 341, 2390, 493, 295, 257, 1230, 1185, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10446655416043005, "compression_ratio": 1.8814432989690721, "no_speech_prob": 0.028413446620106697}, {"id": 27, "seek": 17600, "start": 176.0, "end": 181.0, "text": " What is zero? What's the theme of the talk?", "tokens": [50364, 708, 307, 4018, 30, 708, 311, 264, 6314, 295, 264, 751, 30, 50614], "temperature": 0.0, "avg_logprob": -0.0808217454664778, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.018542297184467316}, {"id": 28, "seek": 17600, "start": 181.0, "end": 186.0, "text": " It's a function. It takes the same signature as all of our other numbers.", "tokens": [50614, 467, 311, 257, 2445, 13, 467, 2516, 264, 912, 13397, 382, 439, 295, 527, 661, 3547, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0808217454664778, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.018542297184467316}, {"id": 29, "seek": 17600, "start": 186.0, "end": 191.0, "text": " This is like a good rule in general. As you got a class of functions, they all got to share the same signature.", "tokens": [50864, 639, 307, 411, 257, 665, 4978, 294, 2674, 13, 1018, 291, 658, 257, 1508, 295, 6828, 11, 436, 439, 658, 281, 2073, 264, 912, 13397, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0808217454664778, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.018542297184467316}, {"id": 30, "seek": 17600, "start": 191.0, "end": 201.0, "text": " Even if you don't know how to design one of the functions, you start thinking, well, wait, it's got to take the same arguments as all my other functions.", "tokens": [51114, 2754, 498, 291, 500, 380, 458, 577, 281, 1715, 472, 295, 264, 6828, 11, 291, 722, 1953, 11, 731, 11, 1699, 11, 309, 311, 658, 281, 747, 264, 912, 12869, 382, 439, 452, 661, 6828, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0808217454664778, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.018542297184467316}, {"id": 31, "seek": 20100, "start": 201.0, "end": 208.0, "text": " Twice applies the two-fold F to A. Once applies the single F to A. What does zero do?", "tokens": [50364, 46964, 13165, 264, 732, 12, 18353, 479, 281, 316, 13, 3443, 13165, 264, 2167, 479, 281, 316, 13, 708, 775, 4018, 360, 30, 50714], "temperature": 0.0, "avg_logprob": -0.10788520451249747, "compression_ratio": 1.3576642335766422, "no_speech_prob": 0.3918549716472626}, {"id": 32, "seek": 20100, "start": 208.0, "end": 220.0, "text": " It just gives you back A. It applies F to A no times.", "tokens": [50714, 467, 445, 2709, 291, 646, 316, 13, 467, 13165, 479, 281, 316, 572, 1413, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10788520451249747, "compression_ratio": 1.3576642335766422, "no_speech_prob": 0.3918549716472626}, {"id": 33, "seek": 20100, "start": 220.0, "end": 225.0, "text": " Does that look familiar to anybody?", "tokens": [51314, 4402, 300, 574, 4963, 281, 4472, 30, 51564], "temperature": 0.0, "avg_logprob": -0.10788520451249747, "compression_ratio": 1.3576642335766422, "no_speech_prob": 0.3918549716472626}, {"id": 34, "seek": 20100, "start": 225.0, "end": 227.0, "text": " Which one?", "tokens": [51564, 3013, 472, 30, 51664], "temperature": 0.0, "avg_logprob": -0.10788520451249747, "compression_ratio": 1.3576642335766422, "no_speech_prob": 0.3918549716472626}, {"id": 35, "seek": 22700, "start": 227.0, "end": 232.0, "text": " Not quite. Identity would be A to A. But this is F A to A.", "tokens": [50364, 1726, 1596, 13, 25905, 507, 576, 312, 316, 281, 316, 13, 583, 341, 307, 479, 316, 281, 316, 13, 50614], "temperature": 0.0, "avg_logprob": -0.13038912225276866, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.07051130384206772}, {"id": 36, "seek": 22700, "start": 232.0, "end": 235.0, "text": " Something other thing, return other thing.", "tokens": [50614, 6595, 661, 551, 11, 2736, 661, 551, 13, 50764], "temperature": 0.0, "avg_logprob": -0.13038912225276866, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.07051130384206772}, {"id": 37, "seek": 22700, "start": 235.0, "end": 241.0, "text": " First thing, second thing, return second thing. Zero is false.", "tokens": [50764, 2386, 551, 11, 1150, 551, 11, 2736, 1150, 551, 13, 17182, 307, 7908, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13038912225276866, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.07051130384206772}, {"id": 38, "seek": 22700, "start": 241.0, "end": 245.0, "text": " That's really nice. I like that. That's cool, right?", "tokens": [51064, 663, 311, 534, 1481, 13, 286, 411, 300, 13, 663, 311, 1627, 11, 558, 30, 51264], "temperature": 0.0, "avg_logprob": -0.13038912225276866, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.07051130384206772}, {"id": 39, "seek": 22700, "start": 245.0, "end": 253.0, "text": " So zero times not of true is of course just true because we didn't apply the function to true. We just returned it.", "tokens": [51264, 407, 4018, 1413, 406, 295, 2074, 307, 295, 1164, 445, 2074, 570, 321, 994, 380, 3079, 264, 2445, 281, 2074, 13, 492, 445, 8752, 309, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13038912225276866, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.07051130384206772}, {"id": 40, "seek": 25300, "start": 253.0, "end": 261.0, "text": " And of course it could say false of not true and that gives us the same thing. So zero is false.", "tokens": [50364, 400, 295, 1164, 309, 727, 584, 7908, 295, 406, 2074, 293, 300, 2709, 505, 264, 912, 551, 13, 407, 4018, 307, 7908, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10831762615003084, "compression_ratio": 1.555045871559633, "no_speech_prob": 0.008060728199779987}, {"id": 41, "seek": 25300, "start": 261.0, "end": 263.0, "text": " Yeah, we saw this already.", "tokens": [50764, 865, 11, 321, 1866, 341, 1217, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10831762615003084, "compression_ratio": 1.555045871559633, "no_speech_prob": 0.008060728199779987}, {"id": 42, "seek": 25300, "start": 263.0, "end": 271.0, "text": " So we start to do church encodings for numerals. Zero, one, two, three, four, five, and so on and so forth.", "tokens": [50864, 407, 321, 722, 281, 360, 4128, 2058, 378, 1109, 337, 7866, 1124, 13, 17182, 11, 472, 11, 732, 11, 1045, 11, 1451, 11, 1732, 11, 293, 370, 322, 293, 370, 5220, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10831762615003084, "compression_ratio": 1.555045871559633, "no_speech_prob": 0.008060728199779987}, {"id": 43, "seek": 25300, "start": 271.0, "end": 277.0, "text": " But we have a small annoyance here, which is that we've manually gone and written all these functions down.", "tokens": [51264, 583, 321, 362, 257, 1359, 8759, 719, 510, 11, 597, 307, 300, 321, 600, 16945, 2780, 293, 3720, 439, 613, 6828, 760, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10831762615003084, "compression_ratio": 1.555045871559633, "no_speech_prob": 0.008060728199779987}, {"id": 44, "seek": 27700, "start": 277.0, "end": 282.0, "text": " Well, that's not math. That's numbers, but it's not math. That's not arithmetic, right?", "tokens": [50364, 1042, 11, 300, 311, 406, 5221, 13, 663, 311, 3547, 11, 457, 309, 311, 406, 5221, 13, 663, 311, 406, 42973, 11, 558, 30, 50614], "temperature": 0.0, "avg_logprob": -0.14193850755691528, "compression_ratio": 1.5822222222222222, "no_speech_prob": 0.028425883501768112}, {"id": 45, "seek": 27700, "start": 282.0, "end": 287.0, "text": " Like we're not dynamically generating these functions. Zero is false.", "tokens": [50614, 1743, 321, 434, 406, 43492, 17746, 613, 6828, 13, 17182, 307, 7908, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14193850755691528, "compression_ratio": 1.5822222222222222, "no_speech_prob": 0.028425883501768112}, {"id": 46, "seek": 27700, "start": 287.0, "end": 293.0, "text": " By the way, what's once? Look at it carefully. It takes two things and it just gives you back those two things.", "tokens": [50864, 3146, 264, 636, 11, 437, 311, 1564, 30, 2053, 412, 309, 7500, 13, 467, 2516, 732, 721, 293, 309, 445, 2709, 291, 646, 729, 732, 721, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14193850755691528, "compression_ratio": 1.5822222222222222, "no_speech_prob": 0.028425883501768112}, {"id": 47, "seek": 27700, "start": 293.0, "end": 298.0, "text": " That sounds familiar. What did you say a second ago? What was your name again?", "tokens": [51164, 663, 3263, 4963, 13, 708, 630, 291, 584, 257, 1150, 2057, 30, 708, 390, 428, 1315, 797, 30, 51414], "temperature": 0.0, "avg_logprob": -0.14193850755691528, "compression_ratio": 1.5822222222222222, "no_speech_prob": 0.028425883501768112}, {"id": 48, "seek": 27700, "start": 298.0, "end": 299.0, "text": " Truman.", "tokens": [51414, 49723, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14193850755691528, "compression_ratio": 1.5822222222222222, "no_speech_prob": 0.028425883501768112}, {"id": 49, "seek": 29900, "start": 299.0, "end": 304.0, "text": " Identity. This is the identity once removed, like the mockingbird once removed.", "tokens": [50364, 25905, 507, 13, 639, 307, 264, 6575, 1564, 7261, 11, 411, 264, 49792, 18080, 1564, 7261, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11533015461291297, "compression_ratio": 1.6692607003891051, "no_speech_prob": 0.1460205614566803}, {"id": 50, "seek": 29900, "start": 304.0, "end": 311.0, "text": " Yeah, an A to an A. Now we got AB to AB. It's the same thing. It acts exactly like the identity function.", "tokens": [50614, 865, 11, 364, 316, 281, 364, 316, 13, 823, 321, 658, 13838, 281, 13838, 13, 467, 311, 264, 912, 551, 13, 467, 10672, 2293, 411, 264, 6575, 2445, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11533015461291297, "compression_ratio": 1.6692607003891051, "no_speech_prob": 0.1460205614566803}, {"id": 51, "seek": 29900, "start": 311.0, "end": 317.0, "text": " That's kind of also fun. Zero is false and one is identity. That's really, really nice.", "tokens": [50964, 663, 311, 733, 295, 611, 1019, 13, 17182, 307, 7908, 293, 472, 307, 6575, 13, 663, 311, 534, 11, 534, 1481, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11533015461291297, "compression_ratio": 1.6692607003891051, "no_speech_prob": 0.1460205614566803}, {"id": 52, "seek": 29900, "start": 317.0, "end": 321.0, "text": " I mean, as a mathematician, that makes me smile.", "tokens": [51264, 286, 914, 11, 382, 257, 48281, 11, 300, 1669, 385, 7563, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11533015461291297, "compression_ratio": 1.6692607003891051, "no_speech_prob": 0.1460205614566803}, {"id": 53, "seek": 29900, "start": 321.0, "end": 328.0, "text": " But we got a problem. We want dynamically generate numbers. How are we going to do it? How can we add one?", "tokens": [51464, 583, 321, 658, 257, 1154, 13, 492, 528, 43492, 8460, 3547, 13, 1012, 366, 321, 516, 281, 360, 309, 30, 1012, 393, 321, 909, 472, 30, 51814], "temperature": 0.0, "avg_logprob": -0.11533015461291297, "compression_ratio": 1.6692607003891051, "no_speech_prob": 0.1460205614566803}, {"id": 54, "seek": 32800, "start": 328.0, "end": 333.0, "text": " It sounds trivial on the face of it, but it's not obvious. We need a successor function.", "tokens": [50364, 467, 3263, 26703, 322, 264, 1851, 295, 309, 11, 457, 309, 311, 406, 6322, 13, 492, 643, 257, 31864, 2445, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09736490249633789, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.029300320893526077}, {"id": 55, "seek": 32800, "start": 333.0, "end": 339.0, "text": " We want a function that if you give it a number, it gives you back the next number somehow.", "tokens": [50614, 492, 528, 257, 2445, 300, 498, 291, 976, 309, 257, 1230, 11, 309, 2709, 291, 646, 264, 958, 1230, 6063, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09736490249633789, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.029300320893526077}, {"id": 56, "seek": 32800, "start": 339.0, "end": 346.0, "text": " If you give it two, it gives you three. And you could do it like this. You could say the successor of successor of one is three.", "tokens": [50914, 759, 291, 976, 309, 732, 11, 309, 2709, 291, 1045, 13, 400, 291, 727, 360, 309, 411, 341, 13, 509, 727, 584, 264, 31864, 295, 31864, 295, 472, 307, 1045, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09736490249633789, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.029300320893526077}, {"id": 57, "seek": 32800, "start": 346.0, "end": 354.0, "text": " Well, that's Peano numbers. We're going way back to 1889 here. Sort of.", "tokens": [51264, 1042, 11, 300, 311, 2396, 3730, 3547, 13, 492, 434, 516, 636, 646, 281, 2443, 21115, 510, 13, 26149, 295, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09736490249633789, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.029300320893526077}, {"id": 58, "seek": 35400, "start": 354.0, "end": 359.0, "text": " So we know our successors got to take in one of these church numerals.", "tokens": [50364, 407, 321, 458, 527, 2245, 830, 658, 281, 747, 294, 472, 295, 613, 4128, 7866, 1124, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07131788947365501, "compression_ratio": 1.8458149779735682, "no_speech_prob": 0.0006666564731858671}, {"id": 59, "seek": 35400, "start": 359.0, "end": 364.0, "text": " And let's do a concrete example. The successor of one is two.", "tokens": [50614, 400, 718, 311, 360, 257, 9859, 1365, 13, 440, 31864, 295, 472, 307, 732, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07131788947365501, "compression_ratio": 1.8458149779735682, "no_speech_prob": 0.0006666564731858671}, {"id": 60, "seek": 35400, "start": 364.0, "end": 369.0, "text": " Well, let's replace these numbers by their implementations to see what this looks like.", "tokens": [50864, 1042, 11, 718, 311, 7406, 613, 3547, 538, 641, 4445, 763, 281, 536, 437, 341, 1542, 411, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07131788947365501, "compression_ratio": 1.8458149779735682, "no_speech_prob": 0.0006666564731858671}, {"id": 61, "seek": 35400, "start": 369.0, "end": 376.0, "text": " One is the identity once removed. It takes a function and argument and applies the function once to the argument.", "tokens": [51114, 1485, 307, 264, 6575, 1564, 7261, 13, 467, 2516, 257, 2445, 293, 6770, 293, 13165, 264, 2445, 1564, 281, 264, 6770, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07131788947365501, "compression_ratio": 1.8458149779735682, "no_speech_prob": 0.0006666564731858671}, {"id": 62, "seek": 35400, "start": 376.0, "end": 383.0, "text": " Twice takes a function and arguments and applies the function twice to the argument.", "tokens": [51464, 46964, 2516, 257, 2445, 293, 12869, 293, 13165, 264, 2445, 6091, 281, 264, 6770, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07131788947365501, "compression_ratio": 1.8458149779735682, "no_speech_prob": 0.0006666564731858671}, {"id": 63, "seek": 38300, "start": 383.0, "end": 390.0, "text": " The thing on the left is really similar to the thing on the right. What's the difference? One extra F.", "tokens": [50364, 440, 551, 322, 264, 1411, 307, 534, 2531, 281, 264, 551, 322, 264, 558, 13, 708, 311, 264, 2649, 30, 1485, 2857, 479, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09011671656653994, "compression_ratio": 1.7010309278350515, "no_speech_prob": 0.0035927151329815388}, {"id": 64, "seek": 38300, "start": 390.0, "end": 397.0, "text": " What we need the successor function to do is tack on an extra F at the beginning.", "tokens": [50714, 708, 321, 643, 264, 31864, 2445, 281, 360, 307, 9426, 322, 364, 2857, 479, 412, 264, 2863, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09011671656653994, "compression_ratio": 1.7010309278350515, "no_speech_prob": 0.0035927151329815388}, {"id": 65, "seek": 38300, "start": 397.0, "end": 409.0, "text": " So if the successor takes a function, that end function, that church numeral, it's going to return a new number function, one that takes F and A.", "tokens": [51064, 407, 498, 264, 31864, 2516, 257, 2445, 11, 300, 917, 2445, 11, 300, 4128, 1031, 2790, 11, 309, 311, 516, 281, 2736, 257, 777, 1230, 2445, 11, 472, 300, 2516, 479, 293, 316, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09011671656653994, "compression_ratio": 1.7010309278350515, "no_speech_prob": 0.0035927151329815388}, {"id": 66, "seek": 40900, "start": 409.0, "end": 415.0, "text": " And what does that new number function do? It does the original number of function applications.", "tokens": [50364, 400, 437, 775, 300, 777, 1230, 2445, 360, 30, 467, 775, 264, 3380, 1230, 295, 2445, 5821, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10102692894313646, "compression_ratio": 1.496969696969697, "no_speech_prob": 0.014500895515084267}, {"id": 67, "seek": 40900, "start": 415.0, "end": 423.0, "text": " And then it does one more on top of that. Wow.", "tokens": [50664, 400, 550, 309, 775, 472, 544, 322, 1192, 295, 300, 13, 3153, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10102692894313646, "compression_ratio": 1.496969696969697, "no_speech_prob": 0.014500895515084267}, {"id": 68, "seek": 40900, "start": 423.0, "end": 431.0, "text": " So there's my successor function, NFA to F of NFA, an additional F, just one extra F. Let's try it out.", "tokens": [51064, 407, 456, 311, 452, 31864, 2445, 11, 13576, 32, 281, 479, 295, 13576, 32, 11, 364, 4497, 479, 11, 445, 472, 2857, 479, 13, 961, 311, 853, 309, 484, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10102692894313646, "compression_ratio": 1.496969696969697, "no_speech_prob": 0.014500895515084267}, {"id": 69, "seek": 43100, "start": 432.0, "end": 438.0, "text": " Successor takes a church numeral and it does, what am I doing here?", "tokens": [50414, 23669, 284, 2516, 257, 4128, 1031, 2790, 293, 309, 775, 11, 437, 669, 286, 884, 510, 30, 50714], "temperature": 0.0, "avg_logprob": -0.11170501487199651, "compression_ratio": 1.5542857142857143, "no_speech_prob": 0.09806238114833832}, {"id": 70, "seek": 43100, "start": 438.0, "end": 453.0, "text": " I'm doing N to F to A to N of F of A, but an F in front of all of that for one extra application of F.", "tokens": [50714, 286, 478, 884, 426, 281, 479, 281, 316, 281, 426, 295, 479, 295, 316, 11, 457, 364, 479, 294, 1868, 295, 439, 295, 300, 337, 472, 2857, 3861, 295, 479, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11170501487199651, "compression_ratio": 1.5542857142857143, "no_speech_prob": 0.09806238114833832}, {"id": 71, "seek": 43100, "start": 453.0, "end": 460.0, "text": " Now, I've got this zero function and I've got this, did I have one? No, did I have once? I have once.", "tokens": [51464, 823, 11, 286, 600, 658, 341, 4018, 2445, 293, 286, 600, 658, 341, 11, 630, 286, 362, 472, 30, 883, 11, 630, 286, 362, 1564, 30, 286, 362, 1564, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11170501487199651, "compression_ratio": 1.5542857142857143, "no_speech_prob": 0.09806238114833832}, {"id": 72, "seek": 46000, "start": 460.0, "end": 471.0, "text": " So if I get the successor of zero, this is some number function, but this is not intentionally equal to what we saw before.", "tokens": [50364, 407, 498, 286, 483, 264, 31864, 295, 4018, 11, 341, 307, 512, 1230, 2445, 11, 457, 341, 307, 406, 22062, 2681, 281, 437, 321, 1866, 949, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07253137476303999, "compression_ratio": 1.6584158415841583, "no_speech_prob": 0.008575242944061756}, {"id": 73, "seek": 46000, "start": 471.0, "end": 475.0, "text": " It's only extensionally equal. So I need to prove that this is the one function.", "tokens": [50914, 467, 311, 787, 10320, 379, 2681, 13, 407, 286, 643, 281, 7081, 300, 341, 307, 264, 472, 2445, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07253137476303999, "compression_ratio": 1.6584158415841583, "no_speech_prob": 0.008575242944061756}, {"id": 74, "seek": 46000, "start": 475.0, "end": 480.0, "text": " So I can apply a function like not to an argument like true and I get false.", "tokens": [51114, 407, 286, 393, 3079, 257, 2445, 411, 406, 281, 364, 6770, 411, 2074, 293, 286, 483, 7908, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07253137476303999, "compression_ratio": 1.6584158415841583, "no_speech_prob": 0.008575242944061756}, {"id": 75, "seek": 46000, "start": 480.0, "end": 484.0, "text": " So that actually worked. This gets a little annoying.", "tokens": [51364, 407, 300, 767, 2732, 13, 639, 2170, 257, 707, 11304, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07253137476303999, "compression_ratio": 1.6584158415841583, "no_speech_prob": 0.008575242944061756}, {"id": 76, "seek": 48400, "start": 484.0, "end": 491.0, "text": " So I'm going to just find this new JS num function. It'll take a church numeral and we'll apply the church numeral.", "tokens": [50364, 407, 286, 478, 516, 281, 445, 915, 341, 777, 33063, 1031, 2445, 13, 467, 603, 747, 257, 4128, 1031, 2790, 293, 321, 603, 3079, 264, 4128, 1031, 2790, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09829447666803996, "compression_ratio": 1.66, "no_speech_prob": 0.019713057205080986}, {"id": 77, "seek": 48400, "start": 491.0, "end": 500.0, "text": " I'll say, hey, take this and do the addition of one N times starting at zero.", "tokens": [50714, 286, 603, 584, 11, 4177, 11, 747, 341, 293, 360, 264, 4500, 295, 472, 426, 1413, 2891, 412, 4018, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09829447666803996, "compression_ratio": 1.66, "no_speech_prob": 0.019713057205080986}, {"id": 78, "seek": 48400, "start": 500.0, "end": 506.0, "text": " So the addition of one is I have some X and I add one to it.", "tokens": [51164, 407, 264, 4500, 295, 472, 307, 286, 362, 512, 1783, 293, 286, 909, 472, 281, 309, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09829447666803996, "compression_ratio": 1.66, "no_speech_prob": 0.019713057205080986}, {"id": 79, "seek": 48400, "start": 506.0, "end": 512.0, "text": " So now I can call JS num on the successor of zero and it tells me that's one.", "tokens": [51464, 407, 586, 286, 393, 818, 33063, 1031, 322, 264, 31864, 295, 4018, 293, 309, 5112, 385, 300, 311, 472, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09829447666803996, "compression_ratio": 1.66, "no_speech_prob": 0.019713057205080986}, {"id": 80, "seek": 51200, "start": 512.0, "end": 517.0, "text": " That's cool. I'm going to convert my church numbers into JavaScript numbers.", "tokens": [50364, 663, 311, 1627, 13, 286, 478, 516, 281, 7620, 452, 4128, 3547, 666, 15778, 3547, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11952989979794151, "compression_ratio": 1.7445652173913044, "no_speech_prob": 0.020959356799721718}, {"id": 81, "seek": 51200, "start": 517.0, "end": 522.0, "text": " What about the successor of successor of zero?", "tokens": [50614, 708, 466, 264, 31864, 295, 31864, 295, 4018, 30, 50864], "temperature": 0.0, "avg_logprob": -0.11952989979794151, "compression_ratio": 1.7445652173913044, "no_speech_prob": 0.020959356799721718}, {"id": 82, "seek": 51200, "start": 522.0, "end": 528.0, "text": " Let's do successor of successor of successor of zero is three.", "tokens": [50864, 961, 311, 360, 31864, 295, 31864, 295, 31864, 295, 4018, 307, 1045, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11952989979794151, "compression_ratio": 1.7445652173913044, "no_speech_prob": 0.020959356799721718}, {"id": 83, "seek": 51200, "start": 528.0, "end": 538.0, "text": " This is useful. So let's let's actually like start storing these things and zero equals zero and one equals once and two equals twice.", "tokens": [51164, 639, 307, 4420, 13, 407, 718, 311, 718, 311, 767, 411, 722, 26085, 613, 721, 293, 4018, 6915, 4018, 293, 472, 6915, 1564, 293, 732, 6915, 6091, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11952989979794151, "compression_ratio": 1.7445652173913044, "no_speech_prob": 0.020959356799721718}, {"id": 84, "seek": 53800, "start": 538.0, "end": 545.0, "text": " Is there a twice? Yeah, N2 is twice.", "tokens": [50364, 1119, 456, 257, 6091, 30, 865, 11, 426, 17, 307, 6091, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1509430472915237, "compression_ratio": 1.5032679738562091, "no_speech_prob": 0.1081213429570198}, {"id": 85, "seek": 53800, "start": 545.0, "end": 552.0, "text": " N3 equals the successor of N2 and four is the successor of N3.", "tokens": [50714, 426, 18, 6915, 264, 31864, 295, 426, 17, 293, 1451, 307, 264, 31864, 295, 426, 18, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1509430472915237, "compression_ratio": 1.5032679738562091, "no_speech_prob": 0.1081213429570198}, {"id": 86, "seek": 53800, "start": 552.0, "end": 556.0, "text": " I'll stop there for now, but we could do things like wait a second.", "tokens": [51064, 286, 603, 1590, 456, 337, 586, 11, 457, 321, 727, 360, 721, 411, 1699, 257, 1150, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1509430472915237, "compression_ratio": 1.5032679738562091, "no_speech_prob": 0.1081213429570198}, {"id": 87, "seek": 53800, "start": 556.0, "end": 567.0, "text": " The successor of N4 ought to be five and it is not too shabby.", "tokens": [51264, 440, 31864, 295, 426, 19, 13416, 281, 312, 1732, 293, 309, 307, 406, 886, 402, 455, 2322, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1509430472915237, "compression_ratio": 1.5032679738562091, "no_speech_prob": 0.1081213429570198}, {"id": 88, "seek": 56700, "start": 567.0, "end": 576.0, "text": " This is just demonstrating that and the purpose here is just to show that that new F gets tacked on and that's how we get a successor.", "tokens": [50364, 639, 307, 445, 29889, 300, 293, 264, 4334, 510, 307, 445, 281, 855, 300, 300, 777, 479, 2170, 9426, 292, 322, 293, 300, 311, 577, 321, 483, 257, 31864, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09783210102309528, "compression_ratio": 1.7739463601532568, "no_speech_prob": 0.018540531396865845}, {"id": 89, "seek": 56700, "start": 576.0, "end": 580.0, "text": " So we have our successor function tax on an extra application of F.", "tokens": [50814, 407, 321, 362, 527, 31864, 2445, 3366, 322, 364, 2857, 3861, 295, 479, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09783210102309528, "compression_ratio": 1.7739463601532568, "no_speech_prob": 0.018540531396865845}, {"id": 90, "seek": 56700, "start": 580.0, "end": 584.0, "text": " And at this point I want to talk about my favorite combinator of all.", "tokens": [51014, 400, 412, 341, 935, 286, 528, 281, 751, 466, 452, 2954, 2512, 31927, 295, 439, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09783210102309528, "compression_ratio": 1.7739463601532568, "no_speech_prob": 0.018540531396865845}, {"id": 91, "seek": 56700, "start": 584.0, "end": 588.0, "text": " This is probably the most extolled and beloved of all combinators.", "tokens": [51214, 639, 307, 1391, 264, 881, 1279, 1833, 292, 293, 14553, 295, 439, 38514, 3391, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09783210102309528, "compression_ratio": 1.7739463601532568, "no_speech_prob": 0.018540531396865845}, {"id": 92, "seek": 56700, "start": 588.0, "end": 591.0, "text": " Even the Y combinator doesn't compare to this.", "tokens": [51414, 2754, 264, 398, 2512, 31927, 1177, 380, 6794, 281, 341, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09783210102309528, "compression_ratio": 1.7739463601532568, "no_speech_prob": 0.018540531396865845}, {"id": 93, "seek": 56700, "start": 591.0, "end": 596.0, "text": " This combinator gets more mentions probably, I think, than the Y combinator.", "tokens": [51564, 639, 2512, 31927, 2170, 544, 23844, 1391, 11, 286, 519, 11, 813, 264, 398, 2512, 31927, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09783210102309528, "compression_ratio": 1.7739463601532568, "no_speech_prob": 0.018540531396865845}, {"id": 94, "seek": 59600, "start": 596.0, "end": 600.0, "text": " I'd have to do a Google search to prove that true. I might be wrong, but I wouldn't be surprised.", "tokens": [50364, 286, 1116, 362, 281, 360, 257, 3329, 3164, 281, 7081, 300, 2074, 13, 286, 1062, 312, 2085, 11, 457, 286, 2759, 380, 312, 6100, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08881217500437862, "compression_ratio": 1.519650655021834, "no_speech_prob": 0.03787150979042053}, {"id": 95, "seek": 59600, "start": 600.0, "end": 604.0, "text": " Except you won't find it if you go search for the Bluebird combinator.", "tokens": [50564, 16192, 291, 1582, 380, 915, 309, 498, 291, 352, 3164, 337, 264, 8510, 18080, 2512, 31927, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08881217500437862, "compression_ratio": 1.519650655021834, "no_speech_prob": 0.03787150979042053}, {"id": 96, "seek": 59600, "start": 604.0, "end": 607.0, "text": " You'll find it being talked about as something else.", "tokens": [50764, 509, 603, 915, 309, 885, 2825, 466, 382, 746, 1646, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08881217500437862, "compression_ratio": 1.519650655021834, "no_speech_prob": 0.03787150979042053}, {"id": 97, "seek": 59600, "start": 607.0, "end": 614.0, "text": " Do any mathematicians or functional programmers want to identify this for me?", "tokens": [50914, 1144, 604, 32811, 2567, 420, 11745, 41504, 528, 281, 5876, 341, 337, 385, 30, 51264], "temperature": 0.0, "avg_logprob": -0.08881217500437862, "compression_ratio": 1.519650655021834, "no_speech_prob": 0.03787150979042053}, {"id": 98, "seek": 59600, "start": 614.0, "end": 625.0, "text": " What am I looking at? What does the Bluebird do?", "tokens": [51264, 708, 669, 286, 1237, 412, 30, 708, 775, 264, 8510, 18080, 360, 30, 51814], "temperature": 0.0, "avg_logprob": -0.08881217500437862, "compression_ratio": 1.519650655021834, "no_speech_prob": 0.03787150979042053}, {"id": 99, "seek": 62500, "start": 625.0, "end": 638.0, "text": " It takes G and then it applies F. It applies G to A and then F to that.", "tokens": [50364, 467, 2516, 460, 293, 550, 309, 13165, 479, 13, 467, 13165, 460, 281, 316, 293, 550, 479, 281, 300, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1972186432944404, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.048840250819921494}, {"id": 100, "seek": 62500, "start": 638.0, "end": 646.0, "text": " It's a pipeline. It takes A, puts it into G, puts the result of that into F, and that's the result you get out.", "tokens": [51014, 467, 311, 257, 15517, 13, 467, 2516, 316, 11, 8137, 309, 666, 460, 11, 8137, 264, 1874, 295, 300, 666, 479, 11, 293, 300, 311, 264, 1874, 291, 483, 484, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1972186432944404, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.048840250819921494}, {"id": 101, "seek": 62500, "start": 646.0, "end": 651.0, "text": " What is it? It's composed. This is function composition.", "tokens": [51414, 708, 307, 309, 30, 467, 311, 18204, 13, 639, 307, 2445, 12686, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1972186432944404, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.048840250819921494}, {"id": 102, "seek": 65100, "start": 651.0, "end": 655.0, "text": " The Bluebird or the B combinator is function composition.", "tokens": [50364, 440, 8510, 18080, 420, 264, 363, 2512, 31927, 307, 2445, 12686, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10766568241349186, "compression_ratio": 1.510204081632653, "no_speech_prob": 0.010984895750880241}, {"id": 103, "seek": 65100, "start": 655.0, "end": 658.0, "text": " That's why I'm saying it's the most famous one of all.", "tokens": [50564, 663, 311, 983, 286, 478, 1566, 309, 311, 264, 881, 4618, 472, 295, 439, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10766568241349186, "compression_ratio": 1.510204081632653, "no_speech_prob": 0.010984895750880241}, {"id": 104, "seek": 65100, "start": 658.0, "end": 663.0, "text": " Any time anybody tries to evangelize functional programming, what do they mention?", "tokens": [50714, 2639, 565, 4472, 9898, 281, 24546, 1125, 11745, 9410, 11, 437, 360, 436, 2152, 30, 50964], "temperature": 0.0, "avg_logprob": -0.10766568241349186, "compression_ratio": 1.510204081632653, "no_speech_prob": 0.010984895750880241}, {"id": 105, "seek": 65100, "start": 663.0, "end": 668.0, "text": " Composition. That's what this is. Let's make it.", "tokens": [50964, 6620, 5830, 13, 663, 311, 437, 341, 307, 13, 961, 311, 652, 309, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10766568241349186, "compression_ratio": 1.510204081632653, "no_speech_prob": 0.010984895750880241}, {"id": 106, "seek": 65100, "start": 668.0, "end": 675.0, "text": " B takes an F into G and it does G first and then F.", "tokens": [51214, 363, 2516, 364, 479, 666, 460, 293, 309, 775, 460, 700, 293, 550, 479, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10766568241349186, "compression_ratio": 1.510204081632653, "no_speech_prob": 0.010984895750880241}, {"id": 107, "seek": 67500, "start": 676.0, "end": 684.0, "text": " This is interesting. Let's do B of not and not.", "tokens": [50414, 639, 307, 1880, 13, 961, 311, 360, 363, 295, 406, 293, 406, 13, 50814], "temperature": 0.0, "avg_logprob": -0.14100117910475957, "compression_ratio": 1.708994708994709, "no_speech_prob": 0.3036500811576843}, {"id": 108, "seek": 67500, "start": 684.0, "end": 688.0, "text": " This isn't as interesting because it doesn't matter whether it's right to left or left to right.", "tokens": [50814, 639, 1943, 380, 382, 1880, 570, 309, 1177, 380, 1871, 1968, 309, 311, 558, 281, 1411, 420, 1411, 281, 558, 13, 51014], "temperature": 0.0, "avg_logprob": -0.14100117910475957, "compression_ratio": 1.708994708994709, "no_speech_prob": 0.3036500811576843}, {"id": 109, "seek": 67500, "start": 688.0, "end": 692.0, "text": " They're identical, but that's okay. We'll show other things in a moment.", "tokens": [51014, 814, 434, 14800, 11, 457, 300, 311, 1392, 13, 492, 603, 855, 661, 721, 294, 257, 1623, 13, 51214], "temperature": 0.0, "avg_logprob": -0.14100117910475957, "compression_ratio": 1.708994708994709, "no_speech_prob": 0.3036500811576843}, {"id": 110, "seek": 67500, "start": 692.0, "end": 698.0, "text": " This composition, the not not composition, is a function that first does not and then does the other not.", "tokens": [51214, 639, 12686, 11, 264, 406, 406, 12686, 11, 307, 257, 2445, 300, 700, 775, 406, 293, 550, 775, 264, 661, 406, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14100117910475957, "compression_ratio": 1.708994708994709, "no_speech_prob": 0.3036500811576843}, {"id": 111, "seek": 69800, "start": 698.0, "end": 704.0, "text": " If we pass in something like true, oops, I got a mistake.", "tokens": [50364, 759, 321, 1320, 294, 746, 411, 2074, 11, 34166, 11, 286, 658, 257, 6146, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14512256660846748, "compression_ratio": 1.5215311004784688, "no_speech_prob": 0.05337744578719139}, {"id": 112, "seek": 69800, "start": 704.0, "end": 710.0, "text": " First mistake. A is not defined.", "tokens": [50664, 2386, 6146, 13, 316, 307, 406, 7642, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14512256660846748, "compression_ratio": 1.5215311004784688, "no_speech_prob": 0.05337744578719139}, {"id": 113, "seek": 69800, "start": 710.0, "end": 714.0, "text": " Oh, FG. I forgot. Yep. There we go.", "tokens": [50964, 876, 11, 479, 38, 13, 286, 5298, 13, 7010, 13, 821, 321, 352, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14512256660846748, "compression_ratio": 1.5215311004784688, "no_speech_prob": 0.05337744578719139}, {"id": 114, "seek": 69800, "start": 714.0, "end": 717.0, "text": " It takes an F, a G, and an A.", "tokens": [51164, 467, 2516, 364, 479, 11, 257, 460, 11, 293, 364, 316, 13, 51314], "temperature": 0.0, "avg_logprob": -0.14512256660846748, "compression_ratio": 1.5215311004784688, "no_speech_prob": 0.05337744578719139}, {"id": 115, "seek": 69800, "start": 717.0, "end": 721.0, "text": " Oh, JavaScript. There we go. That's what I expected.", "tokens": [51314, 876, 11, 15778, 13, 821, 321, 352, 13, 663, 311, 437, 286, 5176, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14512256660846748, "compression_ratio": 1.5215311004784688, "no_speech_prob": 0.05337744578719139}, {"id": 116, "seek": 69800, "start": 721.0, "end": 727.0, "text": " I can compose these. I can pipeline them, chain them together into a new function that is their composition.", "tokens": [51514, 286, 393, 35925, 613, 13, 286, 393, 15517, 552, 11, 5021, 552, 1214, 666, 257, 777, 2445, 300, 307, 641, 12686, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14512256660846748, "compression_ratio": 1.5215311004784688, "no_speech_prob": 0.05337744578719139}, {"id": 117, "seek": 72700, "start": 727.0, "end": 731.0, "text": " Use that composition on some argument.", "tokens": [50364, 8278, 300, 12686, 322, 512, 6770, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11408659752379073, "compression_ratio": 1.5375, "no_speech_prob": 0.03159433230757713}, {"id": 118, "seek": 72700, "start": 731.0, "end": 734.0, "text": " This is boring because it doesn't matter whether it's right to left or left to right.", "tokens": [50564, 639, 307, 9989, 570, 309, 1177, 380, 1871, 1968, 309, 311, 558, 281, 1411, 420, 1411, 281, 558, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11408659752379073, "compression_ratio": 1.5375, "no_speech_prob": 0.03159433230757713}, {"id": 119, "seek": 72700, "start": 734.0, "end": 740.0, "text": " Let's say Yale takes some string. I'm sorry to pollute our Lambda calculus topic with JavaScript strings.", "tokens": [50714, 961, 311, 584, 26711, 2516, 512, 6798, 13, 286, 478, 2597, 281, 6418, 1169, 527, 45691, 33400, 4829, 365, 15778, 13985, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11408659752379073, "compression_ratio": 1.5375, "no_speech_prob": 0.03159433230757713}, {"id": 120, "seek": 72700, "start": 740.0, "end": 747.0, "text": " I would avoid it if I could, but just for demonstration, I don't know a better way yet of doing this.", "tokens": [51014, 286, 576, 5042, 309, 498, 286, 727, 11, 457, 445, 337, 16520, 11, 286, 500, 380, 458, 257, 1101, 636, 1939, 295, 884, 341, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11408659752379073, "compression_ratio": 1.5375, "no_speech_prob": 0.03159433230757713}, {"id": 121, "seek": 72700, "start": 747.0, "end": 752.0, "text": " It just tax on an exclamation point.", "tokens": [51364, 467, 445, 3366, 322, 364, 1624, 43233, 935, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11408659752379073, "compression_ratio": 1.5375, "no_speech_prob": 0.03159433230757713}, {"id": 122, "seek": 75200, "start": 752.0, "end": 759.0, "text": " So if I yell Lambda, I get Lambda.", "tokens": [50364, 407, 498, 286, 20525, 45691, 11, 286, 483, 45691, 13, 50714], "temperature": 0.0, "avg_logprob": -0.17412496937645805, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.03019953891634941}, {"id": 123, "seek": 75200, "start": 759.0, "end": 763.0, "text": " Well, now I can do a little bit more interesting things.", "tokens": [50714, 1042, 11, 586, 286, 393, 360, 257, 707, 857, 544, 1880, 721, 13, 50914], "temperature": 0.0, "avg_logprob": -0.17412496937645805, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.03019953891634941}, {"id": 124, "seek": 75200, "start": 763.0, "end": 770.0, "text": " For instance, if I compose, first I will get the successor.", "tokens": [50914, 1171, 5197, 11, 498, 286, 35925, 11, 700, 286, 486, 483, 264, 31864, 13, 51264], "temperature": 0.0, "avg_logprob": -0.17412496937645805, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.03019953891634941}, {"id": 125, "seek": 75200, "start": 770.0, "end": 777.0, "text": " That's the right most. Then I will yell it and I call this, actually, I'll do a JS note.", "tokens": [51264, 663, 311, 264, 558, 881, 13, 1396, 286, 486, 20525, 309, 293, 286, 818, 341, 11, 767, 11, 286, 603, 360, 257, 33063, 3637, 13, 51614], "temperature": 0.0, "avg_logprob": -0.17412496937645805, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.03019953891634941}, {"id": 126, "seek": 77700, "start": 777.0, "end": 784.0, "text": " First I'll get the successor, then I'll convert it to its JavaScript equivalent of N4.", "tokens": [50364, 2386, 286, 603, 483, 264, 31864, 11, 550, 286, 603, 7620, 309, 281, 1080, 15778, 10344, 295, 426, 19, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12160255030581826, "compression_ratio": 1.5890410958904109, "no_speech_prob": 0.014500878751277924}, {"id": 127, "seek": 77700, "start": 784.0, "end": 791.0, "text": " I get 5. Right to left function composition.", "tokens": [50714, 286, 483, 1025, 13, 1779, 281, 1411, 2445, 12686, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12160255030581826, "compression_ratio": 1.5890410958904109, "no_speech_prob": 0.014500878751277924}, {"id": 128, "seek": 77700, "start": 791.0, "end": 794.0, "text": " We've seen these examples already. We can compose.", "tokens": [51064, 492, 600, 1612, 613, 5110, 1217, 13, 492, 393, 35925, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12160255030581826, "compression_ratio": 1.5890410958904109, "no_speech_prob": 0.014500878751277924}, {"id": 129, "seek": 77700, "start": 794.0, "end": 798.0, "text": " The T goes into the first one on the right, then the next one on the left, and that is our result.", "tokens": [51214, 440, 314, 1709, 666, 264, 700, 472, 322, 264, 558, 11, 550, 264, 958, 472, 322, 264, 1411, 11, 293, 300, 307, 527, 1874, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12160255030581826, "compression_ratio": 1.5890410958904109, "no_speech_prob": 0.014500878751277924}, {"id": 130, "seek": 77700, "start": 798.0, "end": 801.0, "text": " So we get true.", "tokens": [51414, 407, 321, 483, 2074, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12160255030581826, "compression_ratio": 1.5890410958904109, "no_speech_prob": 0.014500878751277924}, {"id": 131, "seek": 77700, "start": 801.0, "end": 805.0, "text": " So the composition is expressed in that other way.", "tokens": [51564, 407, 264, 12686, 307, 12675, 294, 300, 661, 636, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12160255030581826, "compression_ratio": 1.5890410958904109, "no_speech_prob": 0.014500878751277924}, {"id": 132, "seek": 80500, "start": 805.0, "end": 809.0, "text": " And the right most one is the right most one in Haskell.", "tokens": [50364, 400, 264, 558, 881, 472, 307, 264, 558, 881, 472, 294, 8646, 43723, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09461895908628191, "compression_ratio": 1.7658536585365854, "no_speech_prob": 0.013633807189762592}, {"id": 133, "seek": 80500, "start": 809.0, "end": 814.0, "text": " This is built in. It's that little dot, which is wonderful.", "tokens": [50564, 639, 307, 3094, 294, 13, 467, 311, 300, 707, 5893, 11, 597, 307, 3715, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09461895908628191, "compression_ratio": 1.7658536585365854, "no_speech_prob": 0.013633807189762592}, {"id": 134, "seek": 80500, "start": 814.0, "end": 817.0, "text": " That's such a nice way of doing function composition.", "tokens": [50814, 663, 311, 1270, 257, 1481, 636, 295, 884, 2445, 12686, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09461895908628191, "compression_ratio": 1.7658536585365854, "no_speech_prob": 0.013633807189762592}, {"id": 135, "seek": 80500, "start": 817.0, "end": 821.0, "text": " So odd in Haskell is not even.", "tokens": [50964, 407, 7401, 294, 8646, 43723, 307, 406, 754, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09461895908628191, "compression_ratio": 1.7658536585365854, "no_speech_prob": 0.013633807189762592}, {"id": 136, "seek": 80500, "start": 821.0, "end": 824.0, "text": " This is great.", "tokens": [51164, 639, 307, 869, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09461895908628191, "compression_ratio": 1.7658536585365854, "no_speech_prob": 0.013633807189762592}, {"id": 137, "seek": 80500, "start": 824.0, "end": 827.0, "text": " This is a combinator. It's the bluebird, so we'll put it in there.", "tokens": [51314, 639, 307, 257, 2512, 31927, 13, 467, 311, 264, 3344, 18080, 11, 370, 321, 603, 829, 309, 294, 456, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09461895908628191, "compression_ratio": 1.7658536585365854, "no_speech_prob": 0.013633807189762592}, {"id": 138, "seek": 80500, "start": 827.0, "end": 830.0, "text": " It's unary to unary composition going right to left.", "tokens": [51464, 467, 311, 517, 822, 281, 517, 822, 12686, 516, 558, 281, 1411, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09461895908628191, "compression_ratio": 1.7658536585365854, "no_speech_prob": 0.013633807189762592}, {"id": 139, "seek": 80500, "start": 830.0, "end": 832.0, "text": " It's a period in Haskell.", "tokens": [51614, 467, 311, 257, 2896, 294, 8646, 43723, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09461895908628191, "compression_ratio": 1.7658536585365854, "no_speech_prob": 0.013633807189762592}, {"id": 140, "seek": 83200, "start": 832.0, "end": 836.0, "text": " You can section it and turn it into the B combinator in prefix notation with parentheses.", "tokens": [50364, 509, 393, 3541, 309, 293, 1261, 309, 666, 264, 363, 2512, 31927, 294, 46969, 24657, 365, 34153, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11477667808532716, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.001000444171950221}, {"id": 141, "seek": 83200, "start": 836.0, "end": 841.0, "text": " So that would be parentheses period two functions instead of function period function.", "tokens": [50564, 407, 300, 576, 312, 34153, 2896, 732, 6828, 2602, 295, 2445, 2896, 2445, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11477667808532716, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.001000444171950221}, {"id": 142, "seek": 83200, "start": 841.0, "end": 847.0, "text": " But infix notation is more pleasant for function composition, I think.", "tokens": [50814, 583, 1536, 970, 24657, 307, 544, 16232, 337, 2445, 12686, 11, 286, 519, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11477667808532716, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.001000444171950221}, {"id": 143, "seek": 83200, "start": 847.0, "end": 850.0, "text": " So here's our successor. We already saw this.", "tokens": [51114, 407, 510, 311, 527, 31864, 13, 492, 1217, 1866, 341, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11477667808532716, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.001000444171950221}, {"id": 144, "seek": 83200, "start": 850.0, "end": 857.0, "text": " It takes an N, returns a function FA that applies an extra F on top of NFA.", "tokens": [51264, 467, 2516, 364, 426, 11, 11247, 257, 2445, 19894, 300, 13165, 364, 2857, 479, 322, 1192, 295, 13576, 32, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11477667808532716, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.001000444171950221}, {"id": 145, "seek": 83200, "start": 857.0, "end": 859.0, "text": " There's a nicer way of doing this.", "tokens": [51614, 821, 311, 257, 22842, 636, 295, 884, 341, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11477667808532716, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.001000444171950221}, {"id": 146, "seek": 85900, "start": 859.0, "end": 861.0, "text": " Look what we have here.", "tokens": [50364, 2053, 437, 321, 362, 510, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1341092184688268, "compression_ratio": 1.5913978494623655, "no_speech_prob": 0.0009696834022179246}, {"id": 147, "seek": 85900, "start": 861.0, "end": 865.0, "text": " F is a function and NF is a function.", "tokens": [50464, 479, 307, 257, 2445, 293, 13576, 307, 257, 2445, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1341092184688268, "compression_ratio": 1.5913978494623655, "no_speech_prob": 0.0009696834022179246}, {"id": 148, "seek": 85900, "start": 865.0, "end": 868.0, "text": " This feeds an argument into the right most function", "tokens": [50664, 639, 23712, 364, 6770, 666, 264, 558, 881, 2445, 50814], "temperature": 0.0, "avg_logprob": -0.1341092184688268, "compression_ratio": 1.5913978494623655, "no_speech_prob": 0.0009696834022179246}, {"id": 149, "seek": 85900, "start": 868.0, "end": 874.0, "text": " and then feeds the result of that into the left function, generating a result.", "tokens": [50814, 293, 550, 23712, 264, 1874, 295, 300, 666, 264, 1411, 2445, 11, 17746, 257, 1874, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1341092184688268, "compression_ratio": 1.5913978494623655, "no_speech_prob": 0.0009696834022179246}, {"id": 150, "seek": 85900, "start": 874.0, "end": 877.0, "text": " So which combinator it is?", "tokens": [51114, 407, 597, 2512, 31927, 309, 307, 30, 51264], "temperature": 0.0, "avg_logprob": -0.1341092184688268, "compression_ratio": 1.5913978494623655, "no_speech_prob": 0.0009696834022179246}, {"id": 151, "seek": 85900, "start": 877.0, "end": 880.0, "text": " It's the bluebird.", "tokens": [51264, 467, 311, 264, 3344, 18080, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1341092184688268, "compression_ratio": 1.5913978494623655, "no_speech_prob": 0.0009696834022179246}, {"id": 152, "seek": 85900, "start": 880.0, "end": 884.0, "text": " This is wrong. Successor...", "tokens": [51414, 639, 307, 2085, 13, 23669, 284, 485, 51614], "temperature": 0.0, "avg_logprob": -0.1341092184688268, "compression_ratio": 1.5913978494623655, "no_speech_prob": 0.0009696834022179246}, {"id": 153, "seek": 85900, "start": 884.0, "end": 886.0, "text": " No, that's right. Okay, good.", "tokens": [51614, 883, 11, 300, 311, 558, 13, 1033, 11, 665, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1341092184688268, "compression_ratio": 1.5913978494623655, "no_speech_prob": 0.0009696834022179246}, {"id": 154, "seek": 88600, "start": 886.0, "end": 893.0, "text": " So the successor is the composition of one extra function on top of the original number of functions.", "tokens": [50364, 407, 264, 31864, 307, 264, 12686, 295, 472, 2857, 2445, 322, 1192, 295, 264, 3380, 1230, 295, 6828, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07940984046322176, "compression_ratio": 1.5311004784688995, "no_speech_prob": 0.00043052699766121805}, {"id": 155, "seek": 88600, "start": 893.0, "end": 898.0, "text": " That's a little bit prettier to my eyes.", "tokens": [50714, 663, 311, 257, 707, 857, 36825, 281, 452, 2575, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07940984046322176, "compression_ratio": 1.5311004784688995, "no_speech_prob": 0.00043052699766121805}, {"id": 156, "seek": 88600, "start": 898.0, "end": 904.0, "text": " So we'll rearrange this. I'm not going to bother to demo it. It works.", "tokens": [50964, 407, 321, 603, 39568, 341, 13, 286, 478, 406, 516, 281, 8677, 281, 10723, 309, 13, 467, 1985, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07940984046322176, "compression_ratio": 1.5311004784688995, "no_speech_prob": 0.00043052699766121805}, {"id": 157, "seek": 88600, "start": 904.0, "end": 906.0, "text": " Let's do some more math.", "tokens": [51264, 961, 311, 360, 512, 544, 5221, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07940984046322176, "compression_ratio": 1.5311004784688995, "no_speech_prob": 0.00043052699766121805}, {"id": 158, "seek": 88600, "start": 906.0, "end": 909.0, "text": " We've got adding by one. What about adding two numbers together?", "tokens": [51364, 492, 600, 658, 5127, 538, 472, 13, 708, 466, 5127, 732, 3547, 1214, 30, 51514], "temperature": 0.0, "avg_logprob": -0.07940984046322176, "compression_ratio": 1.5311004784688995, "no_speech_prob": 0.00043052699766121805}, {"id": 159, "seek": 88600, "start": 909.0, "end": 911.0, "text": " Binary addition.", "tokens": [51514, 363, 4066, 4500, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07940984046322176, "compression_ratio": 1.5311004784688995, "no_speech_prob": 0.00043052699766121805}, {"id": 160, "seek": 91100, "start": 911.0, "end": 916.0, "text": " We're not binary in the sense of binary number systems, but two numbers together.", "tokens": [50364, 492, 434, 406, 17434, 294, 264, 2020, 295, 17434, 1230, 3652, 11, 457, 732, 3547, 1214, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09360064121714809, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.004981737583875656}, {"id": 161, "seek": 91100, "start": 916.0, "end": 920.0, "text": " What is add? What's the theme of the talk?", "tokens": [50614, 708, 307, 909, 30, 708, 311, 264, 6314, 295, 264, 751, 30, 50814], "temperature": 0.0, "avg_logprob": -0.09360064121714809, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.004981737583875656}, {"id": 162, "seek": 91100, "start": 920.0, "end": 924.0, "text": " How many arguments does it take?", "tokens": [50814, 1012, 867, 12869, 775, 309, 747, 30, 51014], "temperature": 0.0, "avg_logprob": -0.09360064121714809, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.004981737583875656}, {"id": 163, "seek": 91100, "start": 924.0, "end": 927.0, "text": " All right, so it takes two church numerals.", "tokens": [51014, 1057, 558, 11, 370, 309, 2516, 732, 4128, 7866, 1124, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09360064121714809, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.004981737583875656}, {"id": 164, "seek": 91100, "start": 927.0, "end": 929.0, "text": " If we're going to put them in the parameter list,", "tokens": [51164, 759, 321, 434, 516, 281, 829, 552, 294, 264, 13075, 1329, 11, 51264], "temperature": 0.0, "avg_logprob": -0.09360064121714809, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.004981737583875656}, {"id": 165, "seek": 91100, "start": 929.0, "end": 933.0, "text": " we're probably going to have to use them in the body of the function, right?", "tokens": [51264, 321, 434, 1391, 516, 281, 362, 281, 764, 552, 294, 264, 1772, 295, 264, 2445, 11, 558, 30, 51464], "temperature": 0.0, "avg_logprob": -0.09360064121714809, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.004981737583875656}, {"id": 166, "seek": 91100, "start": 933.0, "end": 935.0, "text": " So let's consider a concrete example.", "tokens": [51464, 407, 718, 311, 1949, 257, 9859, 1365, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09360064121714809, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.004981737583875656}, {"id": 167, "seek": 91100, "start": 935.0, "end": 940.0, "text": " Adding one and five should be the successor of five.", "tokens": [51564, 31204, 472, 293, 1732, 820, 312, 264, 31864, 295, 1732, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09360064121714809, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.004981737583875656}, {"id": 168, "seek": 94000, "start": 940.0, "end": 944.0, "text": " Adding two and five should be the successor of five.", "tokens": [50364, 31204, 732, 293, 1732, 820, 312, 264, 31864, 295, 1732, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09223181219661937, "compression_ratio": 1.8522727272727273, "no_speech_prob": 0.00041726318886503577}, {"id": 169, "seek": 94000, "start": 944.0, "end": 949.0, "text": " Adding three to five should be the successor of successor of successor of five.", "tokens": [50564, 31204, 1045, 281, 1732, 820, 312, 264, 31864, 295, 31864, 295, 31864, 295, 1732, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09223181219661937, "compression_ratio": 1.8522727272727273, "no_speech_prob": 0.00041726318886503577}, {"id": 170, "seek": 94000, "start": 949.0, "end": 952.0, "text": " But wait a second. What are we doing here?", "tokens": [50814, 583, 1699, 257, 1150, 13, 708, 366, 321, 884, 510, 30, 50964], "temperature": 0.0, "avg_logprob": -0.09223181219661937, "compression_ratio": 1.8522727272727273, "no_speech_prob": 0.00041726318886503577}, {"id": 171, "seek": 94000, "start": 952.0, "end": 954.0, "text": " This is function composition, right?", "tokens": [50964, 639, 307, 2445, 12686, 11, 558, 30, 51064], "temperature": 0.0, "avg_logprob": -0.09223181219661937, "compression_ratio": 1.8522727272727273, "no_speech_prob": 0.00041726318886503577}, {"id": 172, "seek": 94000, "start": 954.0, "end": 956.0, "text": " And what are church numerals?", "tokens": [51064, 400, 437, 366, 4128, 7866, 1124, 30, 51164], "temperature": 0.0, "avg_logprob": -0.09223181219661937, "compression_ratio": 1.8522727272727273, "no_speech_prob": 0.00041726318886503577}, {"id": 173, "seek": 94000, "start": 956.0, "end": 959.0, "text": " They create n-fold compositions.", "tokens": [51164, 814, 1884, 297, 12, 18353, 43401, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09223181219661937, "compression_ratio": 1.8522727272727273, "no_speech_prob": 0.00041726318886503577}, {"id": 174, "seek": 94000, "start": 959.0, "end": 963.0, "text": " So that's the three-fold composition of successor.", "tokens": [51314, 407, 300, 311, 264, 1045, 12, 18353, 12686, 295, 31864, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09223181219661937, "compression_ratio": 1.8522727272727273, "no_speech_prob": 0.00041726318886503577}, {"id": 175, "seek": 96300, "start": 964.0, "end": 967.0, "text": " And if that's the three-fold composition of successor,", "tokens": [50414, 400, 498, 300, 311, 264, 1045, 12, 18353, 12686, 295, 31864, 11, 50564], "temperature": 0.0, "avg_logprob": -0.09056787001780975, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.007576186675578356}, {"id": 176, "seek": 96300, "start": 967.0, "end": 971.0, "text": " we can generate that using a church numeral.", "tokens": [50564, 321, 393, 8460, 300, 1228, 257, 4128, 1031, 2790, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09056787001780975, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.007576186675578356}, {"id": 177, "seek": 96300, "start": 971.0, "end": 979.0, "text": " This is saying adding three and five is doing thrice the successor of five.", "tokens": [50764, 639, 307, 1566, 5127, 1045, 293, 1732, 307, 884, 739, 573, 264, 31864, 295, 1732, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09056787001780975, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.007576186675578356}, {"id": 178, "seek": 96300, "start": 979.0, "end": 982.0, "text": " And that's our application there.", "tokens": [51164, 400, 300, 311, 527, 3861, 456, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09056787001780975, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.007576186675578356}, {"id": 179, "seek": 96300, "start": 982.0, "end": 985.0, "text": " So let's code it out.", "tokens": [51314, 407, 718, 311, 3089, 309, 484, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09056787001780975, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.007576186675578356}, {"id": 180, "seek": 96300, "start": 985.0, "end": 991.0, "text": " The add lambda calculus function takes an n and a k.", "tokens": [51464, 440, 909, 13607, 33400, 2445, 2516, 364, 297, 293, 257, 350, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09056787001780975, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.007576186675578356}, {"id": 181, "seek": 99100, "start": 991.0, "end": 997.0, "text": " And it does an n-fold succession on top of k.", "tokens": [50364, 400, 309, 775, 364, 297, 12, 18353, 36624, 322, 1192, 295, 350, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12897757994822967, "compression_ratio": 1.4319526627218935, "no_speech_prob": 0.005728742573410273}, {"id": 182, "seek": 99100, "start": 997.0, "end": 999.0, "text": " We'll try it.", "tokens": [50664, 492, 603, 853, 309, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12897757994822967, "compression_ratio": 1.4319526627218935, "no_speech_prob": 0.005728742573410273}, {"id": 183, "seek": 99100, "start": 999.0, "end": 1002.0, "text": " We'll do a convert this to JavaScript.", "tokens": [50764, 492, 603, 360, 257, 7620, 341, 281, 15778, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12897757994822967, "compression_ratio": 1.4319526627218935, "no_speech_prob": 0.005728742573410273}, {"id": 184, "seek": 99100, "start": 1002.0, "end": 1009.0, "text": " We'll say add two church numerals like n-three and n-four, seven.", "tokens": [50914, 492, 603, 584, 909, 732, 4128, 7866, 1124, 411, 297, 12, 27583, 293, 297, 12, 23251, 11, 3407, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12897757994822967, "compression_ratio": 1.4319526627218935, "no_speech_prob": 0.005728742573410273}, {"id": 185, "seek": 99100, "start": 1009.0, "end": 1011.0, "text": " It works.", "tokens": [51264, 467, 1985, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12897757994822967, "compression_ratio": 1.4319526627218935, "no_speech_prob": 0.005728742573410273}, {"id": 186, "seek": 99100, "start": 1011.0, "end": 1016.0, "text": " So let's redo this and start storing a couple more numbers for fun.", "tokens": [51364, 407, 718, 311, 29956, 341, 293, 722, 26085, 257, 1916, 544, 3547, 337, 1019, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12897757994822967, "compression_ratio": 1.4319526627218935, "no_speech_prob": 0.005728742573410273}, {"id": 187, "seek": 101600, "start": 1016.0, "end": 1021.0, "text": " Okay, n-seven is equal to that church numeral.", "tokens": [50364, 1033, 11, 297, 12, 44476, 307, 2681, 281, 300, 4128, 1031, 2790, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10618014382843924, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.015902940183877945}, {"id": 188, "seek": 101600, "start": 1021.0, "end": 1025.0, "text": " And six is the addition of three and three.", "tokens": [50614, 400, 2309, 307, 264, 4500, 295, 1045, 293, 1045, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10618014382843924, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.015902940183877945}, {"id": 189, "seek": 101600, "start": 1025.0, "end": 1028.0, "text": " And five is the addition of two and three.", "tokens": [50814, 400, 1732, 307, 264, 4500, 295, 732, 293, 1045, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10618014382843924, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.015902940183877945}, {"id": 190, "seek": 101600, "start": 1028.0, "end": 1035.0, "text": " So now we got the church numeral zero through seven, I believe.", "tokens": [50964, 407, 586, 321, 658, 264, 4128, 1031, 2790, 4018, 807, 3407, 11, 286, 1697, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10618014382843924, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.015902940183877945}, {"id": 191, "seek": 101600, "start": 1035.0, "end": 1038.0, "text": " This is an Englishy way, but pure lambda calculus.", "tokens": [51314, 639, 307, 364, 3669, 88, 636, 11, 457, 6075, 13607, 33400, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10618014382843924, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.015902940183877945}, {"id": 192, "seek": 101600, "start": 1038.0, "end": 1042.0, "text": " Just all we have to do is replace our shorthand with the equivalent lambda notation", "tokens": [51464, 1449, 439, 321, 362, 281, 360, 307, 7406, 527, 402, 2652, 474, 365, 264, 10344, 13607, 24657, 51664], "temperature": 0.0, "avg_logprob": -0.10618014382843924, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.015902940183877945}, {"id": 193, "seek": 101600, "start": 1042.0, "end": 1045.0, "text": " to convert this into true lambda calculus.", "tokens": [51664, 281, 7620, 341, 666, 2074, 13607, 33400, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10618014382843924, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.015902940183877945}, {"id": 194, "seek": 104500, "start": 1045.0, "end": 1050.0, "text": " So you can see this n-three successor in five is saying thrice successor of five-fold,", "tokens": [50364, 407, 291, 393, 536, 341, 297, 12, 27583, 31864, 294, 1732, 307, 1566, 739, 573, 31864, 295, 1732, 12, 18353, 11, 50614], "temperature": 0.0, "avg_logprob": -0.08018187681833903, "compression_ratio": 1.5596330275229358, "no_speech_prob": 0.0008557596593163908}, {"id": 195, "seek": 104500, "start": 1050.0, "end": 1054.0, "text": " which is eight-fold. Nice.", "tokens": [50614, 597, 307, 3180, 12, 18353, 13, 5490, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08018187681833903, "compression_ratio": 1.5596330275229358, "no_speech_prob": 0.0008557596593163908}, {"id": 196, "seek": 104500, "start": 1054.0, "end": 1058.0, "text": " Church arithmetic, we now have addition.", "tokens": [50814, 7882, 42973, 11, 321, 586, 362, 4500, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08018187681833903, "compression_ratio": 1.5596330275229358, "no_speech_prob": 0.0008557596593163908}, {"id": 197, "seek": 104500, "start": 1058.0, "end": 1061.0, "text": " What about multiplication?", "tokens": [51014, 708, 466, 27290, 30, 51164], "temperature": 0.0, "avg_logprob": -0.08018187681833903, "compression_ratio": 1.5596330275229358, "no_speech_prob": 0.0008557596593163908}, {"id": 198, "seek": 104500, "start": 1061.0, "end": 1063.0, "text": " What is it?", "tokens": [51164, 708, 307, 309, 30, 51264], "temperature": 0.0, "avg_logprob": -0.08018187681833903, "compression_ratio": 1.5596330275229358, "no_speech_prob": 0.0008557596593163908}, {"id": 199, "seek": 104500, "start": 1063.0, "end": 1065.0, "text": " Yeah.", "tokens": [51264, 865, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08018187681833903, "compression_ratio": 1.5596330275229358, "no_speech_prob": 0.0008557596593163908}, {"id": 200, "seek": 104500, "start": 1065.0, "end": 1069.0, "text": " All right, so we know that multiplying two by three should give us six.", "tokens": [51364, 1057, 558, 11, 370, 321, 458, 300, 30955, 732, 538, 1045, 820, 976, 505, 2309, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08018187681833903, "compression_ratio": 1.5596330275229358, "no_speech_prob": 0.0008557596593163908}, {"id": 201, "seek": 104500, "start": 1069.0, "end": 1074.0, "text": " But six is the six-fold composition of some function to an argument.", "tokens": [51564, 583, 2309, 307, 264, 2309, 12, 18353, 12686, 295, 512, 2445, 281, 364, 6770, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08018187681833903, "compression_ratio": 1.5596330275229358, "no_speech_prob": 0.0008557596593163908}, {"id": 202, "seek": 107400, "start": 1074.0, "end": 1078.0, "text": " Okay, so it's six f's that we apply to an argument.", "tokens": [50364, 1033, 11, 370, 309, 311, 2309, 283, 311, 300, 321, 3079, 281, 364, 6770, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10300677163260323, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.0004305297916289419}, {"id": 203, "seek": 107400, "start": 1078.0, "end": 1085.0, "text": " But six f's is also because composition is associative and commutative.", "tokens": [50564, 583, 2309, 283, 311, 307, 611, 570, 12686, 307, 4180, 1166, 293, 800, 325, 1166, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10300677163260323, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.0004305297916289419}, {"id": 204, "seek": 107400, "start": 1085.0, "end": 1086.0, "text": " It's not associative.", "tokens": [50914, 467, 311, 406, 4180, 1166, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10300677163260323, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.0004305297916289419}, {"id": 205, "seek": 107400, "start": 1086.0, "end": 1087.0, "text": " Associative?", "tokens": [50964, 8619, 1166, 30, 51014], "temperature": 0.0, "avg_logprob": -0.10300677163260323, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.0004305297916289419}, {"id": 206, "seek": 107400, "start": 1087.0, "end": 1090.0, "text": " Yeah, it's associative, but it's not commutative.", "tokens": [51014, 865, 11, 309, 311, 4180, 1166, 11, 457, 309, 311, 406, 800, 325, 1166, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10300677163260323, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.0004305297916289419}, {"id": 207, "seek": 107400, "start": 1090.0, "end": 1093.0, "text": " It is associative.", "tokens": [51164, 467, 307, 4180, 1166, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10300677163260323, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.0004305297916289419}, {"id": 208, "seek": 107400, "start": 1093.0, "end": 1095.0, "text": " Function composition is associative.", "tokens": [51314, 11166, 882, 12686, 307, 4180, 1166, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10300677163260323, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.0004305297916289419}, {"id": 209, "seek": 107400, "start": 1095.0, "end": 1098.0, "text": " So this isn't just a six-fold composition of f.", "tokens": [51414, 407, 341, 1943, 380, 445, 257, 2309, 12, 18353, 12686, 295, 283, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10300677163260323, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.0004305297916289419}, {"id": 210, "seek": 109800, "start": 1098.0, "end": 1104.0, "text": " It's also the two-fold composition of the three-fold composition of f.", "tokens": [50364, 467, 311, 611, 264, 732, 12, 18353, 12686, 295, 264, 1045, 12, 18353, 12686, 295, 283, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05246831616784772, "compression_ratio": 1.8647342995169083, "no_speech_prob": 0.06849309056997299}, {"id": 211, "seek": 109800, "start": 1104.0, "end": 1108.0, "text": " Well, there's the three-fold composition, and I could just say n-three f to get that.", "tokens": [50664, 1042, 11, 456, 311, 264, 1045, 12, 18353, 12686, 11, 293, 286, 727, 445, 584, 297, 12, 27583, 283, 281, 483, 300, 13, 50864], "temperature": 0.0, "avg_logprob": -0.05246831616784772, "compression_ratio": 1.8647342995169083, "no_speech_prob": 0.06849309056997299}, {"id": 212, "seek": 109800, "start": 1108.0, "end": 1113.0, "text": " And the two-fold composition of that is n-two of that.", "tokens": [50864, 400, 264, 732, 12, 18353, 12686, 295, 300, 307, 297, 12, 20534, 295, 300, 13, 51114], "temperature": 0.0, "avg_logprob": -0.05246831616784772, "compression_ratio": 1.8647342995169083, "no_speech_prob": 0.06849309056997299}, {"id": 213, "seek": 109800, "start": 1113.0, "end": 1115.0, "text": " But now look what I've got here.", "tokens": [51114, 583, 586, 574, 437, 286, 600, 658, 510, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05246831616784772, "compression_ratio": 1.8647342995169083, "no_speech_prob": 0.06849309056997299}, {"id": 214, "seek": 109800, "start": 1115.0, "end": 1117.0, "text": " I've got an a on the end on both sides.", "tokens": [51214, 286, 600, 658, 364, 257, 322, 264, 917, 322, 1293, 4881, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05246831616784772, "compression_ratio": 1.8647342995169083, "no_speech_prob": 0.06849309056997299}, {"id": 215, "seek": 109800, "start": 1117.0, "end": 1118.0, "text": " That just cancels out.", "tokens": [51314, 663, 445, 393, 66, 1625, 484, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05246831616784772, "compression_ratio": 1.8647342995169083, "no_speech_prob": 0.06849309056997299}, {"id": 216, "seek": 109800, "start": 1118.0, "end": 1120.0, "text": " Bye-bye.", "tokens": [51364, 4621, 12, 6650, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05246831616784772, "compression_ratio": 1.8647342995169083, "no_speech_prob": 0.06849309056997299}, {"id": 217, "seek": 109800, "start": 1120.0, "end": 1126.0, "text": " So multiplying two numbers and applying that new result to a function", "tokens": [51464, 407, 30955, 732, 3547, 293, 9275, 300, 777, 1874, 281, 257, 2445, 51764], "temperature": 0.0, "avg_logprob": -0.05246831616784772, "compression_ratio": 1.8647342995169083, "no_speech_prob": 0.06849309056997299}, {"id": 218, "seek": 112600, "start": 1126.0, "end": 1131.0, "text": " that first does that, you know, three-fold composition of f", "tokens": [50364, 300, 700, 775, 300, 11, 291, 458, 11, 1045, 12, 18353, 12686, 295, 283, 50614], "temperature": 0.0, "avg_logprob": -0.12630191076369512, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.06849288195371628}, {"id": 219, "seek": 112600, "start": 1131.0, "end": 1134.0, "text": " and then two-fold composition of that result.", "tokens": [50614, 293, 550, 732, 12, 18353, 12686, 295, 300, 1874, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12630191076369512, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.06849288195371628}, {"id": 220, "seek": 112600, "start": 1134.0, "end": 1139.0, "text": " So we can use that, and we can go ahead and say, yeah, that's twice thricef,", "tokens": [50764, 407, 321, 393, 764, 300, 11, 293, 321, 393, 352, 2286, 293, 584, 11, 1338, 11, 300, 311, 6091, 739, 573, 69, 11, 51014], "temperature": 0.0, "avg_logprob": -0.12630191076369512, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.06849288195371628}, {"id": 221, "seek": 112600, "start": 1139.0, "end": 1141.0, "text": " which is six-fold f.", "tokens": [51014, 597, 307, 2309, 12, 18353, 283, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12630191076369512, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.06849288195371628}, {"id": 222, "seek": 112600, "start": 1141.0, "end": 1143.0, "text": " Makes sense.", "tokens": [51114, 25245, 2020, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12630191076369512, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.06849288195371628}, {"id": 223, "seek": 112600, "start": 1143.0, "end": 1147.0, "text": " And we can write that down and say, yeah, sure, it's fine,", "tokens": [51214, 400, 321, 393, 2464, 300, 760, 293, 584, 11, 1338, 11, 988, 11, 309, 311, 2489, 11, 51414], "temperature": 0.0, "avg_logprob": -0.12630191076369512, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.06849288195371628}, {"id": 224, "seek": 112600, "start": 1147.0, "end": 1148.0, "text": " but there's an even better way.", "tokens": [51414, 457, 456, 311, 364, 754, 1101, 636, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12630191076369512, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.06849288195371628}, {"id": 225, "seek": 112600, "start": 1148.0, "end": 1155.0, "text": " Does anybody see it?", "tokens": [51464, 4402, 4472, 536, 309, 30, 51814], "temperature": 0.0, "avg_logprob": -0.12630191076369512, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.06849288195371628}, {"id": 226, "seek": 115500, "start": 1156.0, "end": 1159.0, "text": " I take an argument f, and I apply it to the right-most function.", "tokens": [50414, 286, 747, 364, 6770, 283, 11, 293, 286, 3079, 309, 281, 264, 558, 12, 1761, 2445, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10468064373686113, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.07258599996566772}, {"id": 227, "seek": 115500, "start": 1159.0, "end": 1162.0, "text": " I take that result and apply it to the left-most function.", "tokens": [50564, 286, 747, 300, 1874, 293, 3079, 309, 281, 264, 1411, 12, 1761, 2445, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10468064373686113, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.07258599996566772}, {"id": 228, "seek": 115500, "start": 1162.0, "end": 1164.0, "text": " That generates my result.", "tokens": [50714, 663, 23815, 452, 1874, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10468064373686113, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.07258599996566772}, {"id": 229, "seek": 115500, "start": 1164.0, "end": 1167.0, "text": " That means it's really the composition of two and three.", "tokens": [50814, 663, 1355, 309, 311, 534, 264, 12686, 295, 732, 293, 1045, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10468064373686113, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.07258599996566772}, {"id": 230, "seek": 115500, "start": 1167.0, "end": 1169.0, "text": " But look what I've got here on the sides.", "tokens": [50964, 583, 574, 437, 286, 600, 658, 510, 322, 264, 4881, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10468064373686113, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.07258599996566772}, {"id": 231, "seek": 115500, "start": 1169.0, "end": 1171.0, "text": " f and f, those cancel out.", "tokens": [51064, 283, 293, 283, 11, 729, 10373, 484, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10468064373686113, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.07258599996566772}, {"id": 232, "seek": 115500, "start": 1171.0, "end": 1175.0, "text": " So multiplying two numbers is just getting their composition.", "tokens": [51164, 407, 30955, 732, 3547, 307, 445, 1242, 641, 12686, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10468064373686113, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.07258599996566772}, {"id": 233, "seek": 115500, "start": 1175.0, "end": 1179.0, "text": " But how do I get their composition, the lambda calculus, with the b-compinator?", "tokens": [51364, 583, 577, 360, 286, 483, 641, 12686, 11, 264, 13607, 33400, 11, 365, 264, 272, 12, 21541, 31927, 30, 51564], "temperature": 0.0, "avg_logprob": -0.10468064373686113, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.07258599996566772}, {"id": 234, "seek": 115500, "start": 1179.0, "end": 1181.0, "text": " But wait a second.", "tokens": [51564, 583, 1699, 257, 1150, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10468064373686113, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.07258599996566772}, {"id": 235, "seek": 115500, "start": 1181.0, "end": 1183.0, "text": " Two and three are arguments as well.", "tokens": [51664, 4453, 293, 1045, 366, 12869, 382, 731, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10468064373686113, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.07258599996566772}, {"id": 236, "seek": 118300, "start": 1183.0, "end": 1184.0, "text": " I take that out.", "tokens": [50364, 286, 747, 300, 484, 13, 50414], "temperature": 0.0, "avg_logprob": -0.22597468340838398, "compression_ratio": 1.59375, "no_speech_prob": 0.01321449689567089}, {"id": 237, "seek": 118300, "start": 1184.0, "end": 1185.0, "text": " Oh, my gosh.", "tokens": [50414, 876, 11, 452, 6502, 13, 50464], "temperature": 0.0, "avg_logprob": -0.22597468340838398, "compression_ratio": 1.59375, "no_speech_prob": 0.01321449689567089}, {"id": 238, "seek": 118300, "start": 1185.0, "end": 1188.0, "text": " Multiplication is just composition.", "tokens": [50464, 29238, 4770, 399, 307, 445, 12686, 13, 50614], "temperature": 0.0, "avg_logprob": -0.22597468340838398, "compression_ratio": 1.59375, "no_speech_prob": 0.01321449689567089}, {"id": 239, "seek": 118300, "start": 1188.0, "end": 1191.0, "text": " Wow.", "tokens": [50614, 3153, 13, 50764], "temperature": 0.0, "avg_logprob": -0.22597468340838398, "compression_ratio": 1.59375, "no_speech_prob": 0.01321449689567089}, {"id": 240, "seek": 118300, "start": 1191.0, "end": 1193.0, "text": " That's amazing.", "tokens": [50764, 663, 311, 2243, 13, 50864], "temperature": 0.0, "avg_logprob": -0.22597468340838398, "compression_ratio": 1.59375, "no_speech_prob": 0.01321449689567089}, {"id": 241, "seek": 118300, "start": 1193.0, "end": 1195.0, "text": " These are identical functions.", "tokens": [50864, 1981, 366, 14800, 6828, 13, 50964], "temperature": 0.0, "avg_logprob": -0.22597468340838398, "compression_ratio": 1.59375, "no_speech_prob": 0.01321449689567089}, {"id": 242, "seek": 118300, "start": 1195.0, "end": 1199.0, "text": " They're alpha-equivalent, meaning that all we've done is change the variable names around.", "tokens": [50964, 814, 434, 8961, 12, 12816, 3576, 317, 11, 3620, 300, 439, 321, 600, 1096, 307, 1319, 264, 7006, 5288, 926, 13, 51164], "temperature": 0.0, "avg_logprob": -0.22597468340838398, "compression_ratio": 1.59375, "no_speech_prob": 0.01321449689567089}, {"id": 243, "seek": 118300, "start": 1199.0, "end": 1202.0, "text": " But the really nice way of noting this is that multiplication", "tokens": [51164, 583, 264, 534, 1481, 636, 295, 26801, 341, 307, 300, 27290, 51314], "temperature": 0.0, "avg_logprob": -0.22597468340838398, "compression_ratio": 1.59375, "no_speech_prob": 0.01321449689567089}, {"id": 244, "seek": 118300, "start": 1202.0, "end": 1205.0, "text": " is just the composition of trig mammals.", "tokens": [51314, 307, 445, 264, 12686, 295, 35386, 35408, 13, 51464], "temperature": 0.0, "avg_logprob": -0.22597468340838398, "compression_ratio": 1.59375, "no_speech_prob": 0.01321449689567089}, {"id": 245, "seek": 118300, "start": 1205.0, "end": 1209.0, "text": " So let's do this.", "tokens": [51464, 407, 718, 311, 360, 341, 13, 51664], "temperature": 0.0, "avg_logprob": -0.22597468340838398, "compression_ratio": 1.59375, "no_speech_prob": 0.01321449689567089}, {"id": 246, "seek": 118300, "start": 1209.0, "end": 1212.0, "text": " Multi-equals b, we're done.", "tokens": [51664, 29238, 12, 12816, 1124, 272, 11, 321, 434, 1096, 13, 51814], "temperature": 0.0, "avg_logprob": -0.22597468340838398, "compression_ratio": 1.59375, "no_speech_prob": 0.01321449689567089}, {"id": 247, "seek": 121200, "start": 1213.0, "end": 1215.0, "text": " We can demonstrate it, of course.", "tokens": [50414, 492, 393, 11698, 309, 11, 295, 1164, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11815238693385448, "compression_ratio": 1.5, "no_speech_prob": 0.0012840823037549853}, {"id": 248, "seek": 121200, "start": 1215.0, "end": 1222.0, "text": " js num of the multiplication of two and three is a mistake.", "tokens": [50514, 42713, 1031, 295, 264, 27290, 295, 732, 293, 1045, 307, 257, 6146, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11815238693385448, "compression_ratio": 1.5, "no_speech_prob": 0.0012840823037549853}, {"id": 249, "seek": 121200, "start": 1222.0, "end": 1224.0, "text": " What did I do wrong?", "tokens": [50864, 708, 630, 286, 360, 2085, 30, 50964], "temperature": 0.0, "avg_logprob": -0.11815238693385448, "compression_ratio": 1.5, "no_speech_prob": 0.0012840823037549853}, {"id": 250, "seek": 121200, "start": 1224.0, "end": 1226.0, "text": " G is not a function.", "tokens": [50964, 460, 307, 406, 257, 2445, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11815238693385448, "compression_ratio": 1.5, "no_speech_prob": 0.0012840823037549853}, {"id": 251, "seek": 121200, "start": 1226.0, "end": 1230.0, "text": " Oh, I said two and three instead of my lambda two and lambda three.", "tokens": [51064, 876, 11, 286, 848, 732, 293, 1045, 2602, 295, 452, 13607, 732, 293, 13607, 1045, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11815238693385448, "compression_ratio": 1.5, "no_speech_prob": 0.0012840823037549853}, {"id": 252, "seek": 121200, "start": 1230.0, "end": 1232.0, "text": " There we go, six.", "tokens": [51264, 821, 321, 352, 11, 2309, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11815238693385448, "compression_ratio": 1.5, "no_speech_prob": 0.0012840823037549853}, {"id": 253, "seek": 121200, "start": 1232.0, "end": 1234.0, "text": " Neat.", "tokens": [51364, 1734, 267, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11815238693385448, "compression_ratio": 1.5, "no_speech_prob": 0.0012840823037549853}, {"id": 254, "seek": 121200, "start": 1234.0, "end": 1237.0, "text": " Do something fun that we haven't done before, like five and four.", "tokens": [51464, 1144, 746, 1019, 300, 321, 2378, 380, 1096, 949, 11, 411, 1732, 293, 1451, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11815238693385448, "compression_ratio": 1.5, "no_speech_prob": 0.0012840823037549853}, {"id": 255, "seek": 121200, "start": 1237.0, "end": 1238.0, "text": " There's 20.", "tokens": [51614, 821, 311, 945, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11815238693385448, "compression_ratio": 1.5, "no_speech_prob": 0.0012840823037549853}, {"id": 256, "seek": 121200, "start": 1238.0, "end": 1241.0, "text": " That's nice.", "tokens": [51664, 663, 311, 1481, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11815238693385448, "compression_ratio": 1.5, "no_speech_prob": 0.0012840823037549853}, {"id": 257, "seek": 124100, "start": 1241.0, "end": 1244.0, "text": " What about exponentiation?", "tokens": [50364, 708, 466, 37871, 6642, 30, 50514], "temperature": 0.0, "avg_logprob": -0.1438674220332393, "compression_ratio": 1.4941176470588236, "no_speech_prob": 0.0003353144566062838}, {"id": 258, "seek": 124100, "start": 1244.0, "end": 1246.0, "text": " Hmm.", "tokens": [50514, 8239, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1438674220332393, "compression_ratio": 1.4941176470588236, "no_speech_prob": 0.0003353144566062838}, {"id": 259, "seek": 124100, "start": 1246.0, "end": 1249.0, "text": " Exponentiation.", "tokens": [50614, 21391, 30365, 6642, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1438674220332393, "compression_ratio": 1.4941176470588236, "no_speech_prob": 0.0003353144566062838}, {"id": 260, "seek": 124100, "start": 1249.0, "end": 1251.0, "text": " It's going to take two arguments.", "tokens": [50764, 467, 311, 516, 281, 747, 732, 12869, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1438674220332393, "compression_ratio": 1.4941176470588236, "no_speech_prob": 0.0003353144566062838}, {"id": 261, "seek": 124100, "start": 1251.0, "end": 1254.0, "text": " We know two to the third power is eight.", "tokens": [50864, 492, 458, 732, 281, 264, 2636, 1347, 307, 3180, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1438674220332393, "compression_ratio": 1.4941176470588236, "no_speech_prob": 0.0003353144566062838}, {"id": 262, "seek": 124100, "start": 1254.0, "end": 1256.0, "text": " How did you do this in grade school?", "tokens": [51014, 1012, 630, 291, 360, 341, 294, 7204, 1395, 30, 51114], "temperature": 0.0, "avg_logprob": -0.1438674220332393, "compression_ratio": 1.4941176470588236, "no_speech_prob": 0.0003353144566062838}, {"id": 263, "seek": 124100, "start": 1256.0, "end": 1260.0, "text": " What is two to the third?", "tokens": [51114, 708, 307, 732, 281, 264, 2636, 30, 51314], "temperature": 0.0, "avg_logprob": -0.1438674220332393, "compression_ratio": 1.4941176470588236, "no_speech_prob": 0.0003353144566062838}, {"id": 264, "seek": 124100, "start": 1260.0, "end": 1262.0, "text": " Yeah.", "tokens": [51314, 865, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1438674220332393, "compression_ratio": 1.4941176470588236, "no_speech_prob": 0.0003353144566062838}, {"id": 265, "seek": 124100, "start": 1262.0, "end": 1267.0, "text": " But what's multiplication in the lambda calculus?", "tokens": [51414, 583, 437, 311, 27290, 294, 264, 13607, 33400, 30, 51664], "temperature": 0.0, "avg_logprob": -0.1438674220332393, "compression_ratio": 1.4941176470588236, "no_speech_prob": 0.0003353144566062838}, {"id": 266, "seek": 124100, "start": 1267.0, "end": 1269.0, "text": " Composition.", "tokens": [51664, 6620, 5830, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1438674220332393, "compression_ratio": 1.4941176470588236, "no_speech_prob": 0.0003353144566062838}, {"id": 267, "seek": 126900, "start": 1269.0, "end": 1271.0, "text": " And so we've done a three-fold composition of n two.", "tokens": [50364, 400, 370, 321, 600, 1096, 257, 1045, 12, 18353, 12686, 295, 297, 732, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1250850563375359, "compression_ratio": 1.6926605504587156, "no_speech_prob": 0.0012641616631299257}, {"id": 268, "seek": 126900, "start": 1271.0, "end": 1277.0, "text": " How do we express that using trig numerals?", "tokens": [50464, 1012, 360, 321, 5109, 300, 1228, 35386, 7866, 1124, 30, 50764], "temperature": 0.0, "avg_logprob": -0.1250850563375359, "compression_ratio": 1.6926605504587156, "no_speech_prob": 0.0012641616631299257}, {"id": 269, "seek": 126900, "start": 1277.0, "end": 1279.0, "text": " How do you do the n-fold composition of anything?", "tokens": [50764, 1012, 360, 291, 360, 264, 297, 12, 18353, 12686, 295, 1340, 30, 50864], "temperature": 0.0, "avg_logprob": -0.1250850563375359, "compression_ratio": 1.6926605504587156, "no_speech_prob": 0.0012641616631299257}, {"id": 270, "seek": 126900, "start": 1279.0, "end": 1281.0, "text": " It's just a trig number.", "tokens": [50864, 467, 311, 445, 257, 35386, 1230, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1250850563375359, "compression_ratio": 1.6926605504587156, "no_speech_prob": 0.0012641616631299257}, {"id": 271, "seek": 126900, "start": 1281.0, "end": 1283.0, "text": " That's just n three n twos.", "tokens": [50964, 663, 311, 445, 297, 1045, 297, 683, 329, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1250850563375359, "compression_ratio": 1.6926605504587156, "no_speech_prob": 0.0012641616631299257}, {"id": 272, "seek": 126900, "start": 1283.0, "end": 1285.0, "text": " But wait a second.", "tokens": [51064, 583, 1699, 257, 1150, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1250850563375359, "compression_ratio": 1.6926605504587156, "no_speech_prob": 0.0012641616631299257}, {"id": 273, "seek": 126900, "start": 1285.0, "end": 1289.0, "text": " That means a power just takes nk and it flips them around.", "tokens": [51164, 663, 1355, 257, 1347, 445, 2516, 297, 74, 293, 309, 40249, 552, 926, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1250850563375359, "compression_ratio": 1.6926605504587156, "no_speech_prob": 0.0012641616631299257}, {"id": 274, "seek": 126900, "start": 1289.0, "end": 1292.0, "text": " This is the thrush combinator.", "tokens": [51364, 639, 307, 264, 739, 1498, 2512, 31927, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1250850563375359, "compression_ratio": 1.6926605504587156, "no_speech_prob": 0.0012641616631299257}, {"id": 275, "seek": 126900, "start": 1292.0, "end": 1294.0, "text": " Thrice of twice.", "tokens": [51514, 334, 21299, 295, 6091, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1250850563375359, "compression_ratio": 1.6926605504587156, "no_speech_prob": 0.0012641616631299257}, {"id": 276, "seek": 126900, "start": 1294.0, "end": 1296.0, "text": " Well, that's doing twice of twice of twice.", "tokens": [51614, 1042, 11, 300, 311, 884, 6091, 295, 6091, 295, 6091, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1250850563375359, "compression_ratio": 1.6926605504587156, "no_speech_prob": 0.0012641616631299257}, {"id": 277, "seek": 129600, "start": 1296.0, "end": 1299.0, "text": " Twice of twice of twice is eight-fold.", "tokens": [50364, 46964, 295, 6091, 295, 6091, 307, 3180, 12, 18353, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1300116916035497, "compression_ratio": 1.50625, "no_speech_prob": 0.004197715315967798}, {"id": 278, "seek": 129600, "start": 1299.0, "end": 1302.0, "text": " Beautiful.", "tokens": [50514, 14724, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1300116916035497, "compression_ratio": 1.50625, "no_speech_prob": 0.004197715315967798}, {"id": 279, "seek": 129600, "start": 1302.0, "end": 1305.0, "text": " Really nice.", "tokens": [50664, 4083, 1481, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1300116916035497, "compression_ratio": 1.50625, "no_speech_prob": 0.004197715315967798}, {"id": 280, "seek": 129600, "start": 1305.0, "end": 1307.0, "text": " So we've added a combinator.", "tokens": [50814, 407, 321, 600, 3869, 257, 2512, 31927, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1300116916035497, "compression_ratio": 1.50625, "no_speech_prob": 0.004197715315967798}, {"id": 281, "seek": 129600, "start": 1307.0, "end": 1309.0, "text": " We've added exponentiation.", "tokens": [50914, 492, 600, 3869, 37871, 6642, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1300116916035497, "compression_ratio": 1.50625, "no_speech_prob": 0.004197715315967798}, {"id": 282, "seek": 129600, "start": 1309.0, "end": 1313.0, "text": " We'll define this.", "tokens": [51014, 492, 603, 6964, 341, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1300116916035497, "compression_ratio": 1.50625, "no_speech_prob": 0.004197715315967798}, {"id": 283, "seek": 129600, "start": 1313.0, "end": 1317.0, "text": " I'll say that this is pow.", "tokens": [51214, 286, 603, 584, 300, 341, 307, 3388, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1300116916035497, "compression_ratio": 1.50625, "no_speech_prob": 0.004197715315967798}, {"id": 284, "seek": 129600, "start": 1317.0, "end": 1320.0, "text": " The thrush, I'll call it pow.", "tokens": [51414, 440, 739, 1498, 11, 286, 603, 818, 309, 3388, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1300116916035497, "compression_ratio": 1.50625, "no_speech_prob": 0.004197715315967798}, {"id": 285, "seek": 129600, "start": 1320.0, "end": 1325.0, "text": " It takes an n and a k and applies the k to n.", "tokens": [51564, 467, 2516, 364, 297, 293, 257, 350, 293, 13165, 264, 350, 281, 297, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1300116916035497, "compression_ratio": 1.50625, "no_speech_prob": 0.004197715315967798}, {"id": 286, "seek": 132500, "start": 1326.0, "end": 1330.0, "text": " And of course I can try it out.", "tokens": [50414, 400, 295, 1164, 286, 393, 853, 309, 484, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08582385042880444, "compression_ratio": 1.4626168224299065, "no_speech_prob": 0.004196913912892342}, {"id": 287, "seek": 132500, "start": 1330.0, "end": 1334.0, "text": " Raising three to the second power should give me nine.", "tokens": [50614, 43374, 278, 1045, 281, 264, 1150, 1347, 820, 976, 385, 4949, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08582385042880444, "compression_ratio": 1.4626168224299065, "no_speech_prob": 0.004196913912892342}, {"id": 288, "seek": 132500, "start": 1334.0, "end": 1337.0, "text": " Oops, I did this again.", "tokens": [50814, 21726, 11, 286, 630, 341, 797, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08582385042880444, "compression_ratio": 1.4626168224299065, "no_speech_prob": 0.004196913912892342}, {"id": 289, "seek": 132500, "start": 1337.0, "end": 1341.0, "text": " There it is.", "tokens": [50964, 821, 309, 307, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08582385042880444, "compression_ratio": 1.4626168224299065, "no_speech_prob": 0.004196913912892342}, {"id": 290, "seek": 132500, "start": 1341.0, "end": 1344.0, "text": " And by the way, the thrush is the cardinal of identity.", "tokens": [51164, 400, 538, 264, 636, 11, 264, 739, 1498, 307, 264, 2920, 2071, 295, 6575, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08582385042880444, "compression_ratio": 1.4626168224299065, "no_speech_prob": 0.004196913912892342}, {"id": 291, "seek": 132500, "start": 1344.0, "end": 1347.0, "text": " I don't find that particularly exciting, but it's cool, I guess.", "tokens": [51314, 286, 500, 380, 915, 300, 4098, 4670, 11, 457, 309, 311, 1627, 11, 286, 2041, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08582385042880444, "compression_ratio": 1.4626168224299065, "no_speech_prob": 0.004196913912892342}, {"id": 292, "seek": 132500, "start": 1347.0, "end": 1352.0, "text": " Just one more example of things going on in the combinatorial logic.", "tokens": [51464, 1449, 472, 544, 1365, 295, 721, 516, 322, 294, 264, 2512, 31927, 831, 9952, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08582385042880444, "compression_ratio": 1.4626168224299065, "no_speech_prob": 0.004196913912892342}, {"id": 293, "seek": 135200, "start": 1352.0, "end": 1357.0, "text": " We've got arithmetic uses of thrush.", "tokens": [50364, 492, 600, 658, 42973, 4960, 295, 739, 1498, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08768032872399618, "compression_ratio": 1.6680672268907564, "no_speech_prob": 0.001781926373951137}, {"id": 294, "seek": 135200, "start": 1357.0, "end": 1359.0, "text": " Here's a nice little one.", "tokens": [50614, 1692, 311, 257, 1481, 707, 472, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08768032872399618, "compression_ratio": 1.6680672268907564, "no_speech_prob": 0.001781926373951137}, {"id": 295, "seek": 135200, "start": 1359.0, "end": 1361.0, "text": " I like this one. It's cute.", "tokens": [50714, 286, 411, 341, 472, 13, 467, 311, 4052, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08768032872399618, "compression_ratio": 1.6680672268907564, "no_speech_prob": 0.001781926373951137}, {"id": 296, "seek": 135200, "start": 1361.0, "end": 1363.0, "text": " Checking if something is zero.", "tokens": [50814, 6881, 278, 498, 746, 307, 4018, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08768032872399618, "compression_ratio": 1.6680672268907564, "no_speech_prob": 0.001781926373951137}, {"id": 297, "seek": 135200, "start": 1363.0, "end": 1366.0, "text": " We know that if we give it zero, it should give us true.", "tokens": [50914, 492, 458, 300, 498, 321, 976, 309, 4018, 11, 309, 820, 976, 505, 2074, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08768032872399618, "compression_ratio": 1.6680672268907564, "no_speech_prob": 0.001781926373951137}, {"id": 298, "seek": 135200, "start": 1366.0, "end": 1368.0, "text": " If we give it one, it should be false.", "tokens": [51064, 759, 321, 976, 309, 472, 11, 309, 820, 312, 7908, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08768032872399618, "compression_ratio": 1.6680672268907564, "no_speech_prob": 0.001781926373951137}, {"id": 299, "seek": 135200, "start": 1368.0, "end": 1369.0, "text": " Two should be false.", "tokens": [51164, 4453, 820, 312, 7908, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08768032872399618, "compression_ratio": 1.6680672268907564, "no_speech_prob": 0.001781926373951137}, {"id": 300, "seek": 135200, "start": 1369.0, "end": 1370.0, "text": " And so on and so forth.", "tokens": [51214, 400, 370, 322, 293, 370, 5220, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08768032872399618, "compression_ratio": 1.6680672268907564, "no_speech_prob": 0.001781926373951137}, {"id": 301, "seek": 135200, "start": 1370.0, "end": 1372.0, "text": " It's pretty straightforward.", "tokens": [51264, 467, 311, 1238, 15325, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08768032872399618, "compression_ratio": 1.6680672268907564, "no_speech_prob": 0.001781926373951137}, {"id": 302, "seek": 135200, "start": 1372.0, "end": 1374.0, "text": " How can we define this?", "tokens": [51364, 1012, 393, 321, 6964, 341, 30, 51464], "temperature": 0.0, "avg_logprob": -0.08768032872399618, "compression_ratio": 1.6680672268907564, "no_speech_prob": 0.001781926373951137}, {"id": 303, "seek": 135200, "start": 1374.0, "end": 1375.0, "text": " It's a function.", "tokens": [51464, 467, 311, 257, 2445, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08768032872399618, "compression_ratio": 1.6680672268907564, "no_speech_prob": 0.001781926373951137}, {"id": 304, "seek": 135200, "start": 1375.0, "end": 1377.0, "text": " It takes a church numeral.", "tokens": [51514, 467, 2516, 257, 4128, 1031, 2790, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08768032872399618, "compression_ratio": 1.6680672268907564, "no_speech_prob": 0.001781926373951137}, {"id": 305, "seek": 135200, "start": 1377.0, "end": 1379.0, "text": " Now here's where it gets interesting.", "tokens": [51614, 823, 510, 311, 689, 309, 2170, 1880, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08768032872399618, "compression_ratio": 1.6680672268907564, "no_speech_prob": 0.001781926373951137}, {"id": 306, "seek": 137900, "start": 1379.0, "end": 1382.0, "text": " Well, if you're going to get a numeral and use your parameter,", "tokens": [50364, 1042, 11, 498, 291, 434, 516, 281, 483, 257, 1031, 2790, 293, 764, 428, 13075, 11, 50514], "temperature": 0.0, "avg_logprob": -0.11670272166912372, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.0074592833407223225}, {"id": 307, "seek": 137900, "start": 1382.0, "end": 1385.0, "text": " you're probably going to have to use it in the function body.", "tokens": [50514, 291, 434, 1391, 516, 281, 362, 281, 764, 309, 294, 264, 2445, 1772, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11670272166912372, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.0074592833407223225}, {"id": 308, "seek": 137900, "start": 1385.0, "end": 1387.0, "text": " What do church numerals do?", "tokens": [50664, 708, 360, 4128, 7866, 1124, 360, 30, 50764], "temperature": 0.0, "avg_logprob": -0.11670272166912372, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.0074592833407223225}, {"id": 309, "seek": 137900, "start": 1387.0, "end": 1394.0, "text": " Where do they take its arguments?", "tokens": [50764, 2305, 360, 436, 747, 1080, 12869, 30, 51114], "temperature": 0.0, "avg_logprob": -0.11670272166912372, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.0074592833407223225}, {"id": 310, "seek": 137900, "start": 1394.0, "end": 1395.0, "text": " Does anybody remember?", "tokens": [51114, 4402, 4472, 1604, 30, 51164], "temperature": 0.0, "avg_logprob": -0.11670272166912372, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.0074592833407223225}, {"id": 311, "seek": 137900, "start": 1395.0, "end": 1396.0, "text": " They take two arguments.", "tokens": [51164, 814, 747, 732, 12869, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11670272166912372, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.0074592833407223225}, {"id": 312, "seek": 137900, "start": 1396.0, "end": 1399.0, "text": " What are the two arguments?", "tokens": [51214, 708, 366, 264, 732, 12869, 30, 51364], "temperature": 0.0, "avg_logprob": -0.11670272166912372, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.0074592833407223225}, {"id": 313, "seek": 137900, "start": 1399.0, "end": 1406.0, "text": " When I say twice, yeah, twice a function applied to an argument.", "tokens": [51364, 1133, 286, 584, 6091, 11, 1338, 11, 6091, 257, 2445, 6456, 281, 364, 6770, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11670272166912372, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.0074592833407223225}, {"id": 314, "seek": 137900, "start": 1406.0, "end": 1408.0, "text": " So that's what a church numeral does.", "tokens": [51714, 407, 300, 311, 437, 257, 4128, 1031, 2790, 775, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11670272166912372, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.0074592833407223225}, {"id": 315, "seek": 140800, "start": 1408.0, "end": 1412.0, "text": " It applies some function a certain number of times to an argument.", "tokens": [50364, 467, 13165, 512, 2445, 257, 1629, 1230, 295, 1413, 281, 364, 6770, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07710674830845424, "compression_ratio": 1.6432432432432433, "no_speech_prob": 0.002472290536388755}, {"id": 316, "seek": 140800, "start": 1412.0, "end": 1415.0, "text": " Well, what if n is zero?", "tokens": [50564, 1042, 11, 437, 498, 297, 307, 4018, 30, 50714], "temperature": 0.0, "avg_logprob": -0.07710674830845424, "compression_ratio": 1.6432432432432433, "no_speech_prob": 0.002472290536388755}, {"id": 317, "seek": 140800, "start": 1415.0, "end": 1418.0, "text": " It doesn't apply the function at all.", "tokens": [50714, 467, 1177, 380, 3079, 264, 2445, 412, 439, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07710674830845424, "compression_ratio": 1.6432432432432433, "no_speech_prob": 0.002472290536388755}, {"id": 318, "seek": 140800, "start": 1418.0, "end": 1420.0, "text": " It just returns the second thing.", "tokens": [50864, 467, 445, 11247, 264, 1150, 551, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07710674830845424, "compression_ratio": 1.6432432432432433, "no_speech_prob": 0.002472290536388755}, {"id": 319, "seek": 140800, "start": 1420.0, "end": 1424.0, "text": " The function I'm trying to create here is the is zero function.", "tokens": [50964, 440, 2445, 286, 478, 1382, 281, 1884, 510, 307, 264, 307, 4018, 2445, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07710674830845424, "compression_ratio": 1.6432432432432433, "no_speech_prob": 0.002472290536388755}, {"id": 320, "seek": 140800, "start": 1424.0, "end": 1426.0, "text": " So if n is zero, it's just going to return arg.", "tokens": [51164, 407, 498, 297, 307, 4018, 11, 309, 311, 445, 516, 281, 2736, 3882, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07710674830845424, "compression_ratio": 1.6432432432432433, "no_speech_prob": 0.002472290536388755}, {"id": 321, "seek": 140800, "start": 1426.0, "end": 1432.0, "text": " So what should arg be?", "tokens": [51264, 407, 437, 820, 3882, 312, 30, 51564], "temperature": 0.0, "avg_logprob": -0.07710674830845424, "compression_ratio": 1.6432432432432433, "no_speech_prob": 0.002472290536388755}, {"id": 322, "seek": 140800, "start": 1432.0, "end": 1436.0, "text": " True.", "tokens": [51564, 13587, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07710674830845424, "compression_ratio": 1.6432432432432433, "no_speech_prob": 0.002472290536388755}, {"id": 323, "seek": 143600, "start": 1436.0, "end": 1439.0, "text": " And n is zero, return true.", "tokens": [50364, 400, 297, 307, 4018, 11, 2736, 2074, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07318575013943804, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.005640964489430189}, {"id": 324, "seek": 143600, "start": 1439.0, "end": 1441.0, "text": " Pretty straightforward.", "tokens": [50514, 10693, 15325, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07318575013943804, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.005640964489430189}, {"id": 325, "seek": 143600, "start": 1441.0, "end": 1442.0, "text": " Skip the function.", "tokens": [50614, 46405, 264, 2445, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07318575013943804, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.005640964489430189}, {"id": 326, "seek": 143600, "start": 1442.0, "end": 1443.0, "text": " Forget about it.", "tokens": [50664, 18675, 466, 309, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07318575013943804, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.005640964489430189}, {"id": 327, "seek": 143600, "start": 1443.0, "end": 1445.0, "text": " Don't run it.", "tokens": [50714, 1468, 380, 1190, 309, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07318575013943804, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.005640964489430189}, {"id": 328, "seek": 143600, "start": 1445.0, "end": 1446.0, "text": " Well, that's nice.", "tokens": [50814, 1042, 11, 300, 311, 1481, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07318575013943804, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.005640964489430189}, {"id": 329, "seek": 143600, "start": 1446.0, "end": 1447.0, "text": " But what about the other case?", "tokens": [50864, 583, 437, 466, 264, 661, 1389, 30, 50914], "temperature": 0.0, "avg_logprob": -0.07318575013943804, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.005640964489430189}, {"id": 330, "seek": 143600, "start": 1447.0, "end": 1452.0, "text": " What if it's one or two or something else?", "tokens": [50914, 708, 498, 309, 311, 472, 420, 732, 420, 746, 1646, 30, 51164], "temperature": 0.0, "avg_logprob": -0.07318575013943804, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.005640964489430189}, {"id": 331, "seek": 143600, "start": 1452.0, "end": 1454.0, "text": " We want it to return false.", "tokens": [51164, 492, 528, 309, 281, 2736, 7908, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07318575013943804, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.005640964489430189}, {"id": 332, "seek": 143600, "start": 1454.0, "end": 1457.0, "text": " So somehow, however many times we do funk,", "tokens": [51264, 407, 6063, 11, 4461, 867, 1413, 321, 360, 26476, 11, 51414], "temperature": 0.0, "avg_logprob": -0.07318575013943804, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.005640964489430189}, {"id": 333, "seek": 143600, "start": 1457.0, "end": 1461.0, "text": " if we do it once, twice, thrice a billion times,", "tokens": [51414, 498, 321, 360, 309, 1564, 11, 6091, 11, 739, 573, 257, 5218, 1413, 11, 51614], "temperature": 0.0, "avg_logprob": -0.07318575013943804, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.005640964489430189}, {"id": 334, "seek": 143600, "start": 1461.0, "end": 1463.0, "text": " no matter how many times we do funk,", "tokens": [51614, 572, 1871, 577, 867, 1413, 321, 360, 26476, 11, 51714], "temperature": 0.0, "avg_logprob": -0.07318575013943804, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.005640964489430189}, {"id": 335, "seek": 143600, "start": 1463.0, "end": 1465.0, "text": " it's got to return false.", "tokens": [51714, 309, 311, 658, 281, 2736, 7908, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07318575013943804, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.005640964489430189}, {"id": 336, "seek": 146500, "start": 1465.0, "end": 1472.0, "text": " What's a function that always returns false?", "tokens": [50364, 708, 311, 257, 2445, 300, 1009, 11247, 7908, 30, 50714], "temperature": 0.0, "avg_logprob": -0.08730827331542969, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.0024720686487853527}, {"id": 337, "seek": 146500, "start": 1472.0, "end": 1473.0, "text": " Not quite.", "tokens": [50714, 1726, 1596, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08730827331542969, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.0024720686487853527}, {"id": 338, "seek": 146500, "start": 1473.0, "end": 1476.0, "text": " The false function takes two arguments and chooses the second.", "tokens": [50764, 440, 7908, 2445, 2516, 732, 12869, 293, 25963, 264, 1150, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08730827331542969, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.0024720686487853527}, {"id": 339, "seek": 146500, "start": 1476.0, "end": 1484.0, "text": " What's a function that always returns false?", "tokens": [50914, 708, 311, 257, 2445, 300, 1009, 11247, 7908, 30, 51314], "temperature": 0.0, "avg_logprob": -0.08730827331542969, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.0024720686487853527}, {"id": 340, "seek": 146500, "start": 1484.0, "end": 1494.0, "text": " This is going way back.", "tokens": [51314, 639, 307, 516, 636, 646, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08730827331542969, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.0024720686487853527}, {"id": 341, "seek": 149400, "start": 1495.0, "end": 1498.0, "text": " Remember how I showed you that the kestrel with one argument", "tokens": [50414, 5459, 577, 286, 4712, 291, 300, 264, 350, 377, 4419, 365, 472, 6770, 50564], "temperature": 0.0, "avg_logprob": -0.13159064451853433, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.23892542719841003}, {"id": 342, "seek": 149400, "start": 1498.0, "end": 1500.0, "text": " is a constant function?", "tokens": [50564, 307, 257, 5754, 2445, 30, 50664], "temperature": 0.0, "avg_logprob": -0.13159064451853433, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.23892542719841003}, {"id": 343, "seek": 149400, "start": 1500.0, "end": 1501.0, "text": " It's fixated.", "tokens": [50664, 467, 311, 3191, 770, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13159064451853433, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.23892542719841003}, {"id": 344, "seek": 149400, "start": 1501.0, "end": 1503.0, "text": " It always returns a given argument.", "tokens": [50714, 467, 1009, 11247, 257, 2212, 6770, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13159064451853433, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.23892542719841003}, {"id": 345, "seek": 149400, "start": 1503.0, "end": 1510.0, "text": " So apply the constant false function n times true.", "tokens": [50814, 407, 3079, 264, 5754, 7908, 2445, 297, 1413, 2074, 13, 51164], "temperature": 0.0, "avg_logprob": -0.13159064451853433, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.23892542719841003}, {"id": 346, "seek": 149400, "start": 1510.0, "end": 1513.0, "text": " If I do this three times, that's the constant false", "tokens": [51164, 759, 286, 360, 341, 1045, 1413, 11, 300, 311, 264, 5754, 7908, 51314], "temperature": 0.0, "avg_logprob": -0.13159064451853433, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.23892542719841003}, {"id": 347, "seek": 149400, "start": 1513.0, "end": 1516.0, "text": " of constant false of constant false of true.", "tokens": [51314, 295, 5754, 7908, 295, 5754, 7908, 295, 2074, 13, 51464], "temperature": 0.0, "avg_logprob": -0.13159064451853433, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.23892542719841003}, {"id": 348, "seek": 149400, "start": 1516.0, "end": 1517.0, "text": " But who cares?", "tokens": [51464, 583, 567, 12310, 30, 51514], "temperature": 0.0, "avg_logprob": -0.13159064451853433, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.23892542719841003}, {"id": 349, "seek": 149400, "start": 1517.0, "end": 1523.0, "text": " Because the constant false function always gives you back false.", "tokens": [51514, 1436, 264, 5754, 7908, 2445, 1009, 2709, 291, 646, 7908, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13159064451853433, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.23892542719841003}, {"id": 350, "seek": 152300, "start": 1523.0, "end": 1526.0, "text": " And the only time this gives you true is if you don't run", "tokens": [50364, 400, 264, 787, 565, 341, 2709, 291, 2074, 307, 498, 291, 500, 380, 1190, 50514], "temperature": 0.0, "avg_logprob": -0.08376445220066951, "compression_ratio": 1.719387755102041, "no_speech_prob": 0.005382096860557795}, {"id": 351, "seek": 152300, "start": 1526.0, "end": 1528.0, "text": " the constant false function at all,", "tokens": [50514, 264, 5754, 7908, 2445, 412, 439, 11, 50614], "temperature": 0.0, "avg_logprob": -0.08376445220066951, "compression_ratio": 1.719387755102041, "no_speech_prob": 0.005382096860557795}, {"id": 352, "seek": 152300, "start": 1528.0, "end": 1531.0, "text": " which happens when n is zero.", "tokens": [50614, 597, 2314, 562, 297, 307, 4018, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08376445220066951, "compression_ratio": 1.719387755102041, "no_speech_prob": 0.005382096860557795}, {"id": 353, "seek": 152300, "start": 1531.0, "end": 1532.0, "text": " I think that's kind of neat.", "tokens": [50764, 286, 519, 300, 311, 733, 295, 10654, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08376445220066951, "compression_ratio": 1.719387755102041, "no_speech_prob": 0.005382096860557795}, {"id": 354, "seek": 152300, "start": 1532.0, "end": 1533.0, "text": " Let's do that.", "tokens": [50814, 961, 311, 360, 300, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08376445220066951, "compression_ratio": 1.719387755102041, "no_speech_prob": 0.005382096860557795}, {"id": 355, "seek": 152300, "start": 1533.0, "end": 1535.0, "text": " Clear this up.", "tokens": [50864, 14993, 341, 493, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08376445220066951, "compression_ratio": 1.719387755102041, "no_speech_prob": 0.005382096860557795}, {"id": 356, "seek": 152300, "start": 1535.0, "end": 1538.0, "text": " Is zero takes a church numeral,", "tokens": [50964, 1119, 4018, 2516, 257, 4128, 1031, 2790, 11, 51114], "temperature": 0.0, "avg_logprob": -0.08376445220066951, "compression_ratio": 1.719387755102041, "no_speech_prob": 0.005382096860557795}, {"id": 357, "seek": 152300, "start": 1538.0, "end": 1542.0, "text": " flies the church numeral to the constant false function", "tokens": [51114, 17414, 264, 4128, 1031, 2790, 281, 264, 5754, 7908, 2445, 51314], "temperature": 0.0, "avg_logprob": -0.08376445220066951, "compression_ratio": 1.719387755102041, "no_speech_prob": 0.005382096860557795}, {"id": 358, "seek": 152300, "start": 1542.0, "end": 1545.0, "text": " and to true.", "tokens": [51314, 293, 281, 2074, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08376445220066951, "compression_ratio": 1.719387755102041, "no_speech_prob": 0.005382096860557795}, {"id": 359, "seek": 152300, "start": 1545.0, "end": 1552.0, "text": " And we can check if a church numeral like n7 is zero.", "tokens": [51464, 400, 321, 393, 1520, 498, 257, 4128, 1031, 2790, 411, 297, 22, 307, 4018, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08376445220066951, "compression_ratio": 1.719387755102041, "no_speech_prob": 0.005382096860557795}, {"id": 360, "seek": 155200, "start": 1552.0, "end": 1554.0, "text": " Zero, well, it's not.", "tokens": [50364, 17182, 11, 731, 11, 309, 311, 406, 13, 50464], "temperature": 0.0, "avg_logprob": -0.15180211538796898, "compression_ratio": 1.4711538461538463, "no_speech_prob": 0.0013455639127641916}, {"id": 361, "seek": 155200, "start": 1554.0, "end": 1561.0, "text": " One is also not, but zero is.", "tokens": [50464, 1485, 307, 611, 406, 11, 457, 4018, 307, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15180211538796898, "compression_ratio": 1.4711538461538463, "no_speech_prob": 0.0013455639127641916}, {"id": 362, "seek": 155200, "start": 1561.0, "end": 1566.0, "text": " So we've got our first merging of booleans and arithmetic.", "tokens": [50814, 407, 321, 600, 658, 527, 700, 44559, 295, 748, 4812, 599, 293, 42973, 13, 51064], "temperature": 0.0, "avg_logprob": -0.15180211538796898, "compression_ratio": 1.4711538461538463, "no_speech_prob": 0.0013455639127641916}, {"id": 363, "seek": 155200, "start": 1566.0, "end": 1568.0, "text": " Multi-type functions go on here.", "tokens": [51064, 29238, 12, 20467, 6828, 352, 322, 510, 13, 51164], "temperature": 0.0, "avg_logprob": -0.15180211538796898, "compression_ratio": 1.4711538461538463, "no_speech_prob": 0.0013455639127641916}, {"id": 364, "seek": 155200, "start": 1568.0, "end": 1571.0, "text": " It takes in a number and gives you back a boolean.", "tokens": [51164, 467, 2516, 294, 257, 1230, 293, 2709, 291, 646, 257, 748, 4812, 282, 13, 51314], "temperature": 0.0, "avg_logprob": -0.15180211538796898, "compression_ratio": 1.4711538461538463, "no_speech_prob": 0.0013455639127641916}, {"id": 365, "seek": 155200, "start": 1571.0, "end": 1573.0, "text": " Interesting.", "tokens": [51314, 14711, 13, 51414], "temperature": 0.0, "avg_logprob": -0.15180211538796898, "compression_ratio": 1.4711538461538463, "no_speech_prob": 0.0013455639127641916}, {"id": 366, "seek": 155200, "start": 1573.0, "end": 1576.0, "text": " We've defined addition, multiplication,", "tokens": [51414, 492, 600, 7642, 4500, 11, 27290, 11, 51564], "temperature": 0.0, "avg_logprob": -0.15180211538796898, "compression_ratio": 1.4711538461538463, "no_speech_prob": 0.0013455639127641916}, {"id": 367, "seek": 155200, "start": 1576.0, "end": 1581.0, "text": " exponentiation from scratch with no numbers, no operators.", "tokens": [51564, 37871, 6642, 490, 8459, 365, 572, 3547, 11, 572, 19077, 13, 51814], "temperature": 0.0, "avg_logprob": -0.15180211538796898, "compression_ratio": 1.4711538461538463, "no_speech_prob": 0.0013455639127641916}, {"id": 368, "seek": 158100, "start": 1581.0, "end": 1583.0, "text": " I'm not subtracting by one.", "tokens": [50364, 286, 478, 406, 16390, 278, 538, 472, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10074609518051147, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.005059588234871626}, {"id": 369, "seek": 158100, "start": 1583.0, "end": 1585.0, "text": " How hard could it be?", "tokens": [50464, 1012, 1152, 727, 309, 312, 30, 50564], "temperature": 0.0, "avg_logprob": -0.10074609518051147, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.005059588234871626}, {"id": 370, "seek": 158100, "start": 1585.0, "end": 1587.0, "text": " This bird knows how to do it.", "tokens": [50564, 639, 5255, 3255, 577, 281, 360, 309, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10074609518051147, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.005059588234871626}, {"id": 371, "seek": 158100, "start": 1587.0, "end": 1590.0, "text": " Take out a dollar.", "tokens": [50664, 3664, 484, 257, 7241, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10074609518051147, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.005059588234871626}, {"id": 372, "seek": 158100, "start": 1590.0, "end": 1593.0, "text": " Oh, dear.", "tokens": [50814, 876, 11, 6875, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10074609518051147, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.005059588234871626}, {"id": 373, "seek": 158100, "start": 1593.0, "end": 1596.0, "text": " Yeah, I'm not going to explain this one to you.", "tokens": [50964, 865, 11, 286, 478, 406, 516, 281, 2903, 341, 472, 281, 291, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10074609518051147, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.005059588234871626}, {"id": 374, "seek": 158100, "start": 1596.0, "end": 1598.0, "text": " It took me a long time to get this.", "tokens": [51114, 467, 1890, 385, 257, 938, 565, 281, 483, 341, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10074609518051147, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.005059588234871626}, {"id": 375, "seek": 158100, "start": 1598.0, "end": 1600.0, "text": " Then I tried to write an explanation for it,", "tokens": [51214, 1396, 286, 3031, 281, 2464, 364, 10835, 337, 309, 11, 51314], "temperature": 0.0, "avg_logprob": -0.10074609518051147, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.005059588234871626}, {"id": 376, "seek": 158100, "start": 1600.0, "end": 1603.0, "text": " and it was like a page of size 12 font.", "tokens": [51314, 293, 309, 390, 411, 257, 3028, 295, 2744, 2272, 10703, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10074609518051147, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.005059588234871626}, {"id": 377, "seek": 158100, "start": 1603.0, "end": 1607.0, "text": " It's like, no, we're going to skip that for a minute,", "tokens": [51464, 467, 311, 411, 11, 572, 11, 321, 434, 516, 281, 10023, 300, 337, 257, 3456, 11, 51664], "temperature": 0.0, "avg_logprob": -0.10074609518051147, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.005059588234871626}, {"id": 378, "seek": 158100, "start": 1607.0, "end": 1610.0, "text": " and we're going to teach you data structures in lambda calculus.", "tokens": [51664, 293, 321, 434, 516, 281, 2924, 291, 1412, 9227, 294, 13607, 33400, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10074609518051147, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.005059588234871626}, {"id": 379, "seek": 161000, "start": 1610.0, "end": 1612.0, "text": " Just one data structure.", "tokens": [50364, 1449, 472, 1412, 3877, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09562093734741212, "compression_ratio": 1.6862745098039216, "no_speech_prob": 0.003074810840189457}, {"id": 380, "seek": 161000, "start": 1612.0, "end": 1614.0, "text": " It's the smallest one.", "tokens": [50464, 467, 311, 264, 16998, 472, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09562093734741212, "compression_ratio": 1.6862745098039216, "no_speech_prob": 0.003074810840189457}, {"id": 381, "seek": 161000, "start": 1614.0, "end": 1617.0, "text": " The virio.", "tokens": [50564, 440, 4107, 1004, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09562093734741212, "compression_ratio": 1.6862745098039216, "no_speech_prob": 0.003074810840189457}, {"id": 382, "seek": 161000, "start": 1617.0, "end": 1622.0, "text": " The virio takes two arguments and holds onto them.", "tokens": [50714, 440, 4107, 1004, 2516, 732, 12869, 293, 9190, 3911, 552, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09562093734741212, "compression_ratio": 1.6862745098039216, "no_speech_prob": 0.003074810840189457}, {"id": 383, "seek": 161000, "start": 1622.0, "end": 1624.0, "text": " It pairs things together.", "tokens": [50964, 467, 15494, 721, 1214, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09562093734741212, "compression_ratio": 1.6862745098039216, "no_speech_prob": 0.003074810840189457}, {"id": 384, "seek": 161000, "start": 1624.0, "end": 1628.0, "text": " And then you've got a box that's closed over two arguments.", "tokens": [51064, 400, 550, 291, 600, 658, 257, 2424, 300, 311, 5395, 670, 732, 12869, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09562093734741212, "compression_ratio": 1.6862745098039216, "no_speech_prob": 0.003074810840189457}, {"id": 385, "seek": 161000, "start": 1628.0, "end": 1632.0, "text": " You can move the box around, do things that they put in other boxes.", "tokens": [51264, 509, 393, 1286, 264, 2424, 926, 11, 360, 721, 300, 436, 829, 294, 661, 9002, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09562093734741212, "compression_ratio": 1.6862745098039216, "no_speech_prob": 0.003074810840189457}, {"id": 386, "seek": 161000, "start": 1632.0, "end": 1635.0, "text": " And when you want to access the things in the box,", "tokens": [51464, 400, 562, 291, 528, 281, 2105, 264, 721, 294, 264, 2424, 11, 51614], "temperature": 0.0, "avg_logprob": -0.09562093734741212, "compression_ratio": 1.6862745098039216, "no_speech_prob": 0.003074810840189457}, {"id": 387, "seek": 161000, "start": 1635.0, "end": 1637.0, "text": " you give the box a function,", "tokens": [51614, 291, 976, 264, 2424, 257, 2445, 11, 51714], "temperature": 0.0, "avg_logprob": -0.09562093734741212, "compression_ratio": 1.6862745098039216, "no_speech_prob": 0.003074810840189457}, {"id": 388, "seek": 163700, "start": 1637.0, "end": 1641.0, "text": " and that function gets those two arguments.", "tokens": [50364, 293, 300, 2445, 2170, 729, 732, 12869, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08472721986096314, "compression_ratio": 1.6282722513089005, "no_speech_prob": 0.0008040304528549314}, {"id": 389, "seek": 163700, "start": 1641.0, "end": 1643.0, "text": " It's closures.", "tokens": [50564, 467, 311, 2611, 1303, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08472721986096314, "compression_ratio": 1.6282722513089005, "no_speech_prob": 0.0008040304528549314}, {"id": 390, "seek": 163700, "start": 1643.0, "end": 1646.0, "text": " Using closures as data structures.", "tokens": [50664, 11142, 2611, 1303, 382, 1412, 9227, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08472721986096314, "compression_ratio": 1.6282722513089005, "no_speech_prob": 0.0008040304528549314}, {"id": 391, "seek": 163700, "start": 1646.0, "end": 1648.0, "text": " So let's code it out.", "tokens": [50814, 407, 718, 311, 3089, 309, 484, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08472721986096314, "compression_ratio": 1.6282722513089005, "no_speech_prob": 0.0008040304528549314}, {"id": 392, "seek": 163700, "start": 1648.0, "end": 1652.0, "text": " The virio takes an A and a B,", "tokens": [50914, 440, 4107, 1004, 2516, 364, 316, 293, 257, 363, 11, 51114], "temperature": 0.0, "avg_logprob": -0.08472721986096314, "compression_ratio": 1.6282722513089005, "no_speech_prob": 0.0008040304528549314}, {"id": 393, "seek": 163700, "start": 1652.0, "end": 1654.0, "text": " and then waits for a function.", "tokens": [51114, 293, 550, 40597, 337, 257, 2445, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08472721986096314, "compression_ratio": 1.6282722513089005, "no_speech_prob": 0.0008040304528549314}, {"id": 394, "seek": 163700, "start": 1654.0, "end": 1656.0, "text": " And once you give it a function,", "tokens": [51214, 400, 1564, 291, 976, 309, 257, 2445, 11, 51314], "temperature": 0.0, "avg_logprob": -0.08472721986096314, "compression_ratio": 1.6282722513089005, "no_speech_prob": 0.0008040304528549314}, {"id": 395, "seek": 163700, "start": 1656.0, "end": 1660.0, "text": " it supplies A and B to the function.", "tokens": [51314, 309, 11768, 316, 293, 363, 281, 264, 2445, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08472721986096314, "compression_ratio": 1.6282722513089005, "no_speech_prob": 0.0008040304528549314}, {"id": 396, "seek": 163700, "start": 1660.0, "end": 1664.0, "text": " That's the pair function.", "tokens": [51514, 663, 311, 264, 6119, 2445, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08472721986096314, "compression_ratio": 1.6282722513089005, "no_speech_prob": 0.0008040304528549314}, {"id": 397, "seek": 163700, "start": 1664.0, "end": 1666.0, "text": " There's a vim joke in there somewhere,", "tokens": [51714, 821, 311, 257, 371, 332, 7647, 294, 456, 4079, 11, 51814], "temperature": 0.0, "avg_logprob": -0.08472721986096314, "compression_ratio": 1.6282722513089005, "no_speech_prob": 0.0008040304528549314}, {"id": 398, "seek": 166600, "start": 1666.0, "end": 1668.0, "text": " so let's get that.", "tokens": [50364, 370, 718, 311, 483, 300, 13, 50464], "temperature": 0.0, "avg_logprob": -0.12556832701295287, "compression_ratio": 1.6185567010309279, "no_speech_prob": 0.00026117745437659323}, {"id": 399, "seek": 166600, "start": 1668.0, "end": 1672.0, "text": " The virio, the pair of identity and mockingbird,", "tokens": [50464, 440, 4107, 1004, 11, 264, 6119, 295, 6575, 293, 49792, 18080, 11, 50664], "temperature": 0.0, "avg_logprob": -0.12556832701295287, "compression_ratio": 1.6185567010309279, "no_speech_prob": 0.00026117745437659323}, {"id": 400, "seek": 166600, "start": 1672.0, "end": 1676.0, "text": " is a function that holds onto the identity of mockingbird", "tokens": [50664, 307, 257, 2445, 300, 9190, 3911, 264, 6575, 295, 49792, 18080, 50864], "temperature": 0.0, "avg_logprob": -0.12556832701295287, "compression_ratio": 1.6185567010309279, "no_speech_prob": 0.00026117745437659323}, {"id": 401, "seek": 166600, "start": 1676.0, "end": 1679.0, "text": " and provides you an interface for interacting with it.", "tokens": [50864, 293, 6417, 291, 364, 9226, 337, 18017, 365, 309, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12556832701295287, "compression_ratio": 1.6185567010309279, "no_speech_prob": 0.00026117745437659323}, {"id": 402, "seek": 166600, "start": 1679.0, "end": 1684.0, "text": " Give me a function, and I'll give you these two things that I'm holding onto.", "tokens": [51014, 5303, 385, 257, 2445, 11, 293, 286, 603, 976, 291, 613, 732, 721, 300, 286, 478, 5061, 3911, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12556832701295287, "compression_ratio": 1.6185567010309279, "no_speech_prob": 0.00026117745437659323}, {"id": 403, "seek": 166600, "start": 1684.0, "end": 1688.0, "text": " So what if we give it the kestrel?", "tokens": [51264, 407, 437, 498, 321, 976, 309, 264, 350, 377, 4419, 30, 51464], "temperature": 0.0, "avg_logprob": -0.12556832701295287, "compression_ratio": 1.6185567010309279, "no_speech_prob": 0.00026117745437659323}, {"id": 404, "seek": 166600, "start": 1688.0, "end": 1695.0, "text": " What do we get back?", "tokens": [51464, 708, 360, 321, 483, 646, 30, 51814], "temperature": 0.0, "avg_logprob": -0.12556832701295287, "compression_ratio": 1.6185567010309279, "no_speech_prob": 0.00026117745437659323}, {"id": 405, "seek": 169500, "start": 1695.0, "end": 1697.0, "text": " What's that?", "tokens": [50364, 708, 311, 300, 30, 50464], "temperature": 0.0, "avg_logprob": -0.09693454293643727, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.002082585822790861}, {"id": 406, "seek": 169500, "start": 1697.0, "end": 1699.0, "text": " The kestrel comes into the function as f.", "tokens": [50464, 440, 350, 377, 4419, 1487, 666, 264, 2445, 382, 283, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09693454293643727, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.002082585822790861}, {"id": 407, "seek": 169500, "start": 1699.0, "end": 1701.0, "text": " The kestrel takes two arguments, i and m,", "tokens": [50564, 440, 350, 377, 4419, 2516, 732, 12869, 11, 741, 293, 275, 11, 50664], "temperature": 0.0, "avg_logprob": -0.09693454293643727, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.002082585822790861}, {"id": 408, "seek": 169500, "start": 1701.0, "end": 1704.0, "text": " and gives you back the first one.", "tokens": [50664, 293, 2709, 291, 646, 264, 700, 472, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09693454293643727, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.002082585822790861}, {"id": 409, "seek": 169500, "start": 1704.0, "end": 1707.0, "text": " The virio of i and m.", "tokens": [50814, 440, 4107, 1004, 295, 741, 293, 275, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09693454293643727, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.002082585822790861}, {"id": 410, "seek": 169500, "start": 1707.0, "end": 1711.0, "text": " We'll call this vim for fun.", "tokens": [50964, 492, 603, 818, 341, 371, 332, 337, 1019, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09693454293643727, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.002082585822790861}, {"id": 411, "seek": 169500, "start": 1711.0, "end": 1716.0, "text": " If I supply the virio with first,", "tokens": [51164, 759, 286, 5847, 264, 4107, 1004, 365, 700, 11, 51414], "temperature": 0.0, "avg_logprob": -0.09693454293643727, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.002082585822790861}, {"id": 412, "seek": 169500, "start": 1716.0, "end": 1718.0, "text": " it gives me back identity.", "tokens": [51414, 309, 2709, 385, 646, 6575, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09693454293643727, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.002082585822790861}, {"id": 413, "seek": 169500, "start": 1718.0, "end": 1724.0, "text": " If I supply it with kite, what is it going to give me?", "tokens": [51514, 759, 286, 5847, 309, 365, 38867, 11, 437, 307, 309, 516, 281, 976, 385, 30, 51814], "temperature": 0.0, "avg_logprob": -0.09693454293643727, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.002082585822790861}, {"id": 414, "seek": 172400, "start": 1725.0, "end": 1730.0, "text": " The virio of i and m holds onto i and m.", "tokens": [50414, 440, 4107, 1004, 295, 741, 293, 275, 9190, 3911, 741, 293, 275, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0875684590566726, "compression_ratio": 1.653179190751445, "no_speech_prob": 0.0006070206291042268}, {"id": 415, "seek": 172400, "start": 1730.0, "end": 1735.0, "text": " If I give it a function, it applies that function to two things, i and m.", "tokens": [50664, 759, 286, 976, 309, 257, 2445, 11, 309, 13165, 300, 2445, 281, 732, 721, 11, 741, 293, 275, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0875684590566726, "compression_ratio": 1.653179190751445, "no_speech_prob": 0.0006070206291042268}, {"id": 416, "seek": 172400, "start": 1735.0, "end": 1737.0, "text": " There it is.", "tokens": [50914, 821, 309, 307, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0875684590566726, "compression_ratio": 1.653179190751445, "no_speech_prob": 0.0006070206291042268}, {"id": 417, "seek": 172400, "start": 1737.0, "end": 1740.0, "text": " So this vim thing is a box holding onto my two arguments,", "tokens": [51014, 407, 341, 371, 332, 551, 307, 257, 2424, 5061, 3911, 452, 732, 12869, 11, 51164], "temperature": 0.0, "avg_logprob": -0.0875684590566726, "compression_ratio": 1.653179190751445, "no_speech_prob": 0.0006070206291042268}, {"id": 418, "seek": 172400, "start": 1740.0, "end": 1746.0, "text": " and it can get access to them by passing them functions.", "tokens": [51164, 293, 309, 393, 483, 2105, 281, 552, 538, 8437, 552, 6828, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0875684590566726, "compression_ratio": 1.653179190751445, "no_speech_prob": 0.0006070206291042268}, {"id": 419, "seek": 172400, "start": 1746.0, "end": 1751.0, "text": " This is a purely functional data structure,", "tokens": [51464, 639, 307, 257, 17491, 11745, 1412, 3877, 11, 51714], "temperature": 0.0, "avg_logprob": -0.0875684590566726, "compression_ratio": 1.653179190751445, "no_speech_prob": 0.0006070206291042268}, {"id": 420, "seek": 175100, "start": 1751.0, "end": 1755.0, "text": " like a birdhouse for a pair of birds.", "tokens": [50364, 411, 257, 5255, 6410, 337, 257, 6119, 295, 9009, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1598353726523263, "compression_ratio": 1.550660792951542, "no_speech_prob": 0.016141168773174286}, {"id": 421, "seek": 175100, "start": 1755.0, "end": 1758.0, "text": " That one was a stretch.", "tokens": [50564, 663, 472, 390, 257, 5985, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1598353726523263, "compression_ratio": 1.550660792951542, "no_speech_prob": 0.016141168773174286}, {"id": 422, "seek": 175100, "start": 1758.0, "end": 1760.0, "text": " So there it is.", "tokens": [50714, 407, 456, 309, 307, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1598353726523263, "compression_ratio": 1.550660792951542, "no_speech_prob": 0.016141168773174286}, {"id": 423, "seek": 175100, "start": 1760.0, "end": 1763.0, "text": " It's also the composition of the cardinal and the fresh.", "tokens": [50814, 467, 311, 611, 264, 12686, 295, 264, 2920, 2071, 293, 264, 4451, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1598353726523263, "compression_ratio": 1.550660792951542, "no_speech_prob": 0.016141168773174286}, {"id": 424, "seek": 175100, "start": 1763.0, "end": 1767.0, "text": " Again, I'm not too excited about that, but cool, okay.", "tokens": [50964, 3764, 11, 286, 478, 406, 886, 2919, 466, 300, 11, 457, 1627, 11, 1392, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1598353726523263, "compression_ratio": 1.550660792951542, "no_speech_prob": 0.016141168773174286}, {"id": 425, "seek": 175100, "start": 1767.0, "end": 1769.0, "text": " And we got church pairs.", "tokens": [51164, 400, 321, 658, 4128, 15494, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1598353726523263, "compression_ratio": 1.550660792951542, "no_speech_prob": 0.016141168773174286}, {"id": 426, "seek": 175100, "start": 1769.0, "end": 1771.0, "text": " Pairing things is the virio.", "tokens": [51264, 430, 1246, 278, 721, 307, 264, 4107, 1004, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1598353726523263, "compression_ratio": 1.550660792951542, "no_speech_prob": 0.016141168773174286}, {"id": 427, "seek": 175100, "start": 1771.0, "end": 1773.0, "text": " Pairs to arguments.", "tokens": [51364, 430, 4094, 281, 12869, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1598353726523263, "compression_ratio": 1.550660792951542, "no_speech_prob": 0.016141168773174286}, {"id": 428, "seek": 175100, "start": 1773.0, "end": 1775.0, "text": " What are these two functions?", "tokens": [51464, 708, 366, 613, 732, 6828, 30, 51564], "temperature": 0.0, "avg_logprob": -0.1598353726523263, "compression_ratio": 1.550660792951542, "no_speech_prob": 0.016141168773174286}, {"id": 429, "seek": 175100, "start": 1775.0, "end": 1778.0, "text": " This one takes a pair and calls the pair with the kestrel.", "tokens": [51564, 639, 472, 2516, 257, 6119, 293, 5498, 264, 6119, 365, 264, 350, 377, 4419, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1598353726523263, "compression_ratio": 1.550660792951542, "no_speech_prob": 0.016141168773174286}, {"id": 430, "seek": 177800, "start": 1778.0, "end": 1780.0, "text": " The kite.", "tokens": [50364, 440, 38867, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10605366686557202, "compression_ratio": 1.5668449197860963, "no_speech_prob": 0.020015019923448563}, {"id": 431, "seek": 177800, "start": 1780.0, "end": 1787.0, "text": " What do these do?", "tokens": [50464, 708, 360, 613, 360, 30, 50814], "temperature": 0.0, "avg_logprob": -0.10605366686557202, "compression_ratio": 1.5668449197860963, "no_speech_prob": 0.020015019923448563}, {"id": 432, "seek": 177800, "start": 1787.0, "end": 1792.0, "text": " If the pair or the virio is holding onto two elements, two items,", "tokens": [50814, 759, 264, 6119, 420, 264, 4107, 1004, 307, 5061, 3911, 732, 4959, 11, 732, 4754, 11, 51064], "temperature": 0.0, "avg_logprob": -0.10605366686557202, "compression_ratio": 1.5668449197860963, "no_speech_prob": 0.020015019923448563}, {"id": 433, "seek": 177800, "start": 1792.0, "end": 1796.0, "text": " and you give it kestrel, what do you get back?", "tokens": [51064, 293, 291, 976, 309, 350, 377, 4419, 11, 437, 360, 291, 483, 646, 30, 51264], "temperature": 0.0, "avg_logprob": -0.10605366686557202, "compression_ratio": 1.5668449197860963, "no_speech_prob": 0.020015019923448563}, {"id": 434, "seek": 177800, "start": 1796.0, "end": 1798.0, "text": " The first one.", "tokens": [51264, 440, 700, 472, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10605366686557202, "compression_ratio": 1.5668449197860963, "no_speech_prob": 0.020015019923448563}, {"id": 435, "seek": 177800, "start": 1798.0, "end": 1802.0, "text": " And that means if you give it the kite, you get the second one.", "tokens": [51364, 400, 300, 1355, 498, 291, 976, 309, 264, 38867, 11, 291, 483, 264, 1150, 472, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10605366686557202, "compression_ratio": 1.5668449197860963, "no_speech_prob": 0.020015019923448563}, {"id": 436, "seek": 177800, "start": 1802.0, "end": 1804.0, "text": " So let's define those.", "tokens": [51564, 407, 718, 311, 6964, 729, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10605366686557202, "compression_ratio": 1.5668449197860963, "no_speech_prob": 0.020015019923448563}, {"id": 437, "seek": 177800, "start": 1804.0, "end": 1807.0, "text": " They're just syntactic sugar for what we just did.", "tokens": [51664, 814, 434, 445, 23980, 19892, 5076, 337, 437, 321, 445, 630, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10605366686557202, "compression_ratio": 1.5668449197860963, "no_speech_prob": 0.020015019923448563}, {"id": 438, "seek": 180700, "start": 1807.0, "end": 1811.0, "text": " First takes a pair and it calls the pair with the kestrel.", "tokens": [50364, 2386, 2516, 257, 6119, 293, 309, 5498, 264, 6119, 365, 264, 350, 377, 4419, 13, 50564], "temperature": 0.0, "avg_logprob": -0.14456795992916577, "compression_ratio": 1.78125, "no_speech_prob": 0.004904601722955704}, {"id": 439, "seek": 180700, "start": 1811.0, "end": 1817.0, "text": " Second takes a pair and it calls the pair with the kite.", "tokens": [50564, 5736, 2516, 257, 6119, 293, 309, 5498, 264, 6119, 365, 264, 38867, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14456795992916577, "compression_ratio": 1.78125, "no_speech_prob": 0.004904601722955704}, {"id": 440, "seek": 180700, "start": 1817.0, "end": 1828.0, "text": " So the vim, the first of vim is I, and the second of vim is M.", "tokens": [50864, 407, 264, 371, 332, 11, 264, 700, 295, 371, 332, 307, 286, 11, 293, 264, 1150, 295, 371, 332, 307, 376, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14456795992916577, "compression_ratio": 1.78125, "no_speech_prob": 0.004904601722955704}, {"id": 441, "seek": 180700, "start": 1828.0, "end": 1830.0, "text": " First and second.", "tokens": [51414, 2386, 293, 1150, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14456795992916577, "compression_ratio": 1.78125, "no_speech_prob": 0.004904601722955704}, {"id": 442, "seek": 180700, "start": 1830.0, "end": 1834.0, "text": " Extract elements from our pair.", "tokens": [51514, 9881, 1897, 4959, 490, 527, 6119, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14456795992916577, "compression_ratio": 1.78125, "no_speech_prob": 0.004904601722955704}, {"id": 443, "seek": 183400, "start": 1834.0, "end": 1836.0, "text": " Closures.", "tokens": [50364, 2033, 329, 1303, 13, 50464], "temperature": 0.0, "avg_logprob": -0.12265590693326604, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.05495961382985115}, {"id": 444, "seek": 183400, "start": 1836.0, "end": 1837.0, "text": " Beautiful.", "tokens": [50464, 14724, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12265590693326604, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.05495961382985115}, {"id": 445, "seek": 183400, "start": 1837.0, "end": 1838.0, "text": " Wonderful.", "tokens": [50514, 22768, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12265590693326604, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.05495961382985115}, {"id": 446, "seek": 183400, "start": 1838.0, "end": 1839.0, "text": " Here's an interesting one.", "tokens": [50564, 1692, 311, 364, 1880, 472, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12265590693326604, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.05495961382985115}, {"id": 447, "seek": 183400, "start": 1839.0, "end": 1842.0, "text": " The reason I'm showing you this is not obvious right now.", "tokens": [50614, 440, 1778, 286, 478, 4099, 291, 341, 307, 406, 6322, 558, 586, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12265590693326604, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.05495961382985115}, {"id": 448, "seek": 183400, "start": 1842.0, "end": 1845.0, "text": " This is the Phi combinator function.", "tokens": [50764, 639, 307, 264, 41435, 2512, 31927, 2445, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12265590693326604, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.05495961382985115}, {"id": 449, "seek": 183400, "start": 1845.0, "end": 1847.0, "text": " Maybe it's a combinator?", "tokens": [50914, 2704, 309, 311, 257, 2512, 31927, 30, 51014], "temperature": 0.0, "avg_logprob": -0.12265590693326604, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.05495961382985115}, {"id": 450, "seek": 183400, "start": 1847.0, "end": 1848.0, "text": " I don't know.", "tokens": [51014, 286, 500, 380, 458, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12265590693326604, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.05495961382985115}, {"id": 451, "seek": 183400, "start": 1848.0, "end": 1849.0, "text": " It's the Phi function.", "tokens": [51064, 467, 311, 264, 41435, 2445, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12265590693326604, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.05495961382985115}, {"id": 452, "seek": 183400, "start": 1849.0, "end": 1850.0, "text": " What does it do?", "tokens": [51114, 708, 775, 309, 360, 30, 51164], "temperature": 0.0, "avg_logprob": -0.12265590693326604, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.05495961382985115}, {"id": 453, "seek": 183400, "start": 1850.0, "end": 1851.0, "text": " It's a little weird.", "tokens": [51164, 467, 311, 257, 707, 3657, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12265590693326604, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.05495961382985115}, {"id": 454, "seek": 183400, "start": 1851.0, "end": 1854.0, "text": " I'm going to use this red parens with a comma to mean a pair.", "tokens": [51214, 286, 478, 516, 281, 764, 341, 2182, 7448, 3695, 365, 257, 22117, 281, 914, 257, 6119, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12265590693326604, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.05495961382985115}, {"id": 455, "seek": 183400, "start": 1854.0, "end": 1857.0, "text": " Because I don't want to have to show you pair of M and N7.", "tokens": [51364, 1436, 286, 500, 380, 528, 281, 362, 281, 855, 291, 6119, 295, 376, 293, 426, 22, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12265590693326604, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.05495961382985115}, {"id": 456, "seek": 183400, "start": 1857.0, "end": 1859.0, "text": " It gets verbose.", "tokens": [51514, 467, 2170, 9595, 541, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12265590693326604, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.05495961382985115}, {"id": 457, "seek": 183400, "start": 1859.0, "end": 1862.0, "text": " So just imagine I paired those two things together with the virio.", "tokens": [51614, 407, 445, 3811, 286, 25699, 729, 732, 721, 1214, 365, 264, 4107, 1004, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12265590693326604, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.05495961382985115}, {"id": 458, "seek": 186200, "start": 1862.0, "end": 1864.0, "text": " I'm calling Phi on this.", "tokens": [50364, 286, 478, 5141, 41435, 322, 341, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07057449817657471, "compression_ratio": 1.7606382978723405, "no_speech_prob": 0.022968262434005737}, {"id": 459, "seek": 186200, "start": 1864.0, "end": 1866.0, "text": " Let's look at what it does.", "tokens": [50464, 961, 311, 574, 412, 437, 309, 775, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07057449817657471, "compression_ratio": 1.7606382978723405, "no_speech_prob": 0.022968262434005737}, {"id": 460, "seek": 186200, "start": 1866.0, "end": 1868.0, "text": " Well, it generates a new pair.", "tokens": [50564, 1042, 11, 309, 23815, 257, 777, 6119, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07057449817657471, "compression_ratio": 1.7606382978723405, "no_speech_prob": 0.022968262434005737}, {"id": 461, "seek": 186200, "start": 1868.0, "end": 1871.0, "text": " It pairs two new things together.", "tokens": [50664, 467, 15494, 732, 777, 721, 1214, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07057449817657471, "compression_ratio": 1.7606382978723405, "no_speech_prob": 0.022968262434005737}, {"id": 462, "seek": 186200, "start": 1871.0, "end": 1875.0, "text": " The first thing in the pair is the second of the old pair.", "tokens": [50814, 440, 700, 551, 294, 264, 6119, 307, 264, 1150, 295, 264, 1331, 6119, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07057449817657471, "compression_ratio": 1.7606382978723405, "no_speech_prob": 0.022968262434005737}, {"id": 463, "seek": 186200, "start": 1875.0, "end": 1881.0, "text": " The next thing of the pair is the successor of the second of the old pair.", "tokens": [51014, 440, 958, 551, 295, 264, 6119, 307, 264, 31864, 295, 264, 1150, 295, 264, 1331, 6119, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07057449817657471, "compression_ratio": 1.7606382978723405, "no_speech_prob": 0.022968262434005737}, {"id": 464, "seek": 186200, "start": 1881.0, "end": 1884.0, "text": " Okay, not too bad.", "tokens": [51314, 1033, 11, 406, 886, 1578, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07057449817657471, "compression_ratio": 1.7606382978723405, "no_speech_prob": 0.022968262434005737}, {"id": 465, "seek": 186200, "start": 1884.0, "end": 1886.0, "text": " Let's do it together now ourselves.", "tokens": [51464, 961, 311, 360, 309, 1214, 586, 4175, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07057449817657471, "compression_ratio": 1.7606382978723405, "no_speech_prob": 0.022968262434005737}, {"id": 466, "seek": 186200, "start": 1886.0, "end": 1890.0, "text": " What does this generate?", "tokens": [51564, 708, 775, 341, 8460, 30, 51764], "temperature": 0.0, "avg_logprob": -0.07057449817657471, "compression_ratio": 1.7606382978723405, "no_speech_prob": 0.022968262434005737}, {"id": 467, "seek": 189000, "start": 1890.0, "end": 1893.0, "text": " Phi of M3.", "tokens": [50364, 41435, 295, 376, 18, 13, 50514], "temperature": 0.0, "avg_logprob": -0.15202551538294012, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.0166496429592371}, {"id": 468, "seek": 189000, "start": 1893.0, "end": 1900.0, "text": " It shifts the second thing to the first thing and it increments the second thing.", "tokens": [50514, 467, 19201, 264, 1150, 551, 281, 264, 700, 551, 293, 309, 1946, 1117, 264, 1150, 551, 13, 50864], "temperature": 0.0, "avg_logprob": -0.15202551538294012, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.0166496429592371}, {"id": 469, "seek": 189000, "start": 1900.0, "end": 1903.0, "text": " Okay, that's what the Phi combinator does to pairs.", "tokens": [50864, 1033, 11, 300, 311, 437, 264, 41435, 2512, 31927, 775, 281, 15494, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15202551538294012, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.0166496429592371}, {"id": 470, "seek": 189000, "start": 1903.0, "end": 1906.0, "text": " What's Phi of 0, 0?", "tokens": [51014, 708, 311, 41435, 295, 1958, 11, 1958, 30, 51164], "temperature": 0.0, "avg_logprob": -0.15202551538294012, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.0166496429592371}, {"id": 471, "seek": 189000, "start": 1906.0, "end": 1909.0, "text": " Phi of 0, 1?", "tokens": [51164, 41435, 295, 1958, 11, 502, 30, 51314], "temperature": 0.0, "avg_logprob": -0.15202551538294012, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.0166496429592371}, {"id": 472, "seek": 189000, "start": 1909.0, "end": 1911.0, "text": " Phi of 1, 2?", "tokens": [51314, 41435, 295, 502, 11, 568, 30, 51414], "temperature": 0.0, "avg_logprob": -0.15202551538294012, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.0166496429592371}, {"id": 473, "seek": 189000, "start": 1911.0, "end": 1913.0, "text": " 2, 3?", "tokens": [51414, 568, 11, 805, 30, 51514], "temperature": 0.0, "avg_logprob": -0.15202551538294012, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.0166496429592371}, {"id": 474, "seek": 189000, "start": 1913.0, "end": 1919.0, "text": " What's 8 applications of Phi to 0, 0?", "tokens": [51514, 708, 311, 1649, 5821, 295, 41435, 281, 1958, 11, 1958, 30, 51814], "temperature": 0.0, "avg_logprob": -0.15202551538294012, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.0166496429592371}, {"id": 475, "seek": 191900, "start": 1919.0, "end": 1921.0, "text": " Someone say it out loud.", "tokens": [50364, 8734, 584, 309, 484, 6588, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07578847143385145, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.002182012191042304}, {"id": 476, "seek": 191900, "start": 1921.0, "end": 1929.0, "text": " Say it proud.", "tokens": [50464, 6463, 309, 4570, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07578847143385145, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.002182012191042304}, {"id": 477, "seek": 191900, "start": 1929.0, "end": 1933.0, "text": " Just look at the pattern.", "tokens": [50864, 1449, 574, 412, 264, 5102, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07578847143385145, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.002182012191042304}, {"id": 478, "seek": 191900, "start": 1933.0, "end": 1938.0, "text": " 1 application of Phi to 0, 0 gave you a 1 on the right and a 0 on the left.", "tokens": [51064, 502, 3861, 295, 41435, 281, 1958, 11, 1958, 2729, 291, 257, 502, 322, 264, 558, 293, 257, 1958, 322, 264, 1411, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07578847143385145, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.002182012191042304}, {"id": 479, "seek": 191900, "start": 1938.0, "end": 1942.0, "text": " 3 applications of Phi gave you a 3 on the right and a 2 on the left.", "tokens": [51314, 805, 5821, 295, 41435, 2729, 291, 257, 805, 322, 264, 558, 293, 257, 568, 322, 264, 1411, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07578847143385145, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.002182012191042304}, {"id": 480, "seek": 191900, "start": 1942.0, "end": 1945.0, "text": " What's 8 applications going to do?", "tokens": [51514, 708, 311, 1649, 5821, 516, 281, 360, 30, 51664], "temperature": 0.0, "avg_logprob": -0.07578847143385145, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.002182012191042304}, {"id": 481, "seek": 191900, "start": 1945.0, "end": 1948.0, "text": " 8 on the right, 7 on the left.", "tokens": [51664, 1649, 322, 264, 558, 11, 1614, 322, 264, 1411, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07578847143385145, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.002182012191042304}, {"id": 482, "seek": 194800, "start": 1948.0, "end": 1954.0, "text": " Aha, what's the first of that?", "tokens": [50364, 27448, 11, 437, 311, 264, 700, 295, 300, 30, 50664], "temperature": 0.0, "avg_logprob": -0.1159531127574832, "compression_ratio": 1.467455621301775, "no_speech_prob": 0.03063652478158474}, {"id": 483, "seek": 194800, "start": 1954.0, "end": 1957.0, "text": " It's 7.", "tokens": [50664, 467, 311, 1614, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1159531127574832, "compression_ratio": 1.467455621301775, "no_speech_prob": 0.03063652478158474}, {"id": 484, "seek": 194800, "start": 1957.0, "end": 1959.0, "text": " I've got subtraction.", "tokens": [50814, 286, 600, 658, 16390, 313, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1159531127574832, "compression_ratio": 1.467455621301775, "no_speech_prob": 0.03063652478158474}, {"id": 485, "seek": 194800, "start": 1959.0, "end": 1962.0, "text": " I've got subtraction, Eureka.", "tokens": [50914, 286, 600, 658, 16390, 313, 11, 462, 540, 2330, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1159531127574832, "compression_ratio": 1.467455621301775, "no_speech_prob": 0.03063652478158474}, {"id": 486, "seek": 194800, "start": 1962.0, "end": 1964.0, "text": " This is my predecessor function.", "tokens": [51064, 639, 307, 452, 34991, 2445, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1159531127574832, "compression_ratio": 1.467455621301775, "no_speech_prob": 0.03063652478158474}, {"id": 487, "seek": 194800, "start": 1964.0, "end": 1966.0, "text": " I can subtract by 1.", "tokens": [51164, 286, 393, 16390, 538, 502, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1159531127574832, "compression_ratio": 1.467455621301775, "no_speech_prob": 0.03063652478158474}, {"id": 488, "seek": 194800, "start": 1966.0, "end": 1970.0, "text": " Let's make sure I have the Phi combinator written down first because I don't think I do.", "tokens": [51264, 961, 311, 652, 988, 286, 362, 264, 41435, 2512, 31927, 3720, 760, 700, 570, 286, 500, 380, 519, 286, 360, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1159531127574832, "compression_ratio": 1.467455621301775, "no_speech_prob": 0.03063652478158474}, {"id": 489, "seek": 194800, "start": 1970.0, "end": 1972.0, "text": " Nope, I don't.", "tokens": [51464, 12172, 11, 286, 500, 380, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1159531127574832, "compression_ratio": 1.467455621301775, "no_speech_prob": 0.03063652478158474}, {"id": 490, "seek": 197200, "start": 1972.0, "end": 1976.0, "text": " Okay, what's Phi do?", "tokens": [50364, 1033, 11, 437, 311, 41435, 360, 30, 50564], "temperature": 0.0, "avg_logprob": -0.15867161750793457, "compression_ratio": 1.4366197183098592, "no_speech_prob": 0.11583901196718216}, {"id": 491, "seek": 197200, "start": 1976.0, "end": 1988.0, "text": " It takes a pair and it pairs together the second of the pair along with the successor of the second of the pair.", "tokens": [50564, 467, 2516, 257, 6119, 293, 309, 15494, 1214, 264, 1150, 295, 264, 6119, 2051, 365, 264, 31864, 295, 264, 1150, 295, 264, 6119, 13, 51164], "temperature": 0.0, "avg_logprob": -0.15867161750793457, "compression_ratio": 1.4366197183098592, "no_speech_prob": 0.11583901196718216}, {"id": 492, "seek": 197200, "start": 1988.0, "end": 1990.0, "text": " 1, 2, 3?", "tokens": [51164, 502, 11, 568, 11, 805, 30, 51264], "temperature": 0.0, "avg_logprob": -0.15867161750793457, "compression_ratio": 1.4366197183098592, "no_speech_prob": 0.11583901196718216}, {"id": 493, "seek": 197200, "start": 1990.0, "end": 1993.0, "text": " Okay, that makes sense.", "tokens": [51264, 1033, 11, 300, 1669, 2020, 13, 51414], "temperature": 0.0, "avg_logprob": -0.15867161750793457, "compression_ratio": 1.4366197183098592, "no_speech_prob": 0.11583901196718216}, {"id": 494, "seek": 197200, "start": 1993.0, "end": 1997.0, "text": " I'll just double check that it works.", "tokens": [51414, 286, 603, 445, 3834, 1520, 300, 309, 1985, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15867161750793457, "compression_ratio": 1.4366197183098592, "no_speech_prob": 0.11583901196718216}, {"id": 495, "seek": 199700, "start": 1998.0, "end": 2002.0, "text": " Vim doesn't have a number in it, so I've got a pair together or something.", "tokens": [50414, 691, 332, 1177, 380, 362, 257, 1230, 294, 309, 11, 370, 286, 600, 658, 257, 6119, 1214, 420, 746, 13, 50614], "temperature": 0.0, "avg_logprob": -0.22462819871448336, "compression_ratio": 1.4642857142857142, "no_speech_prob": 0.05744915455579758}, {"id": 496, "seek": 199700, "start": 2002.0, "end": 2005.0, "text": " Who cares what the first thing is?", "tokens": [50614, 2102, 12310, 437, 264, 700, 551, 307, 30, 50764], "temperature": 0.0, "avg_logprob": -0.22462819871448336, "compression_ratio": 1.4642857142857142, "no_speech_prob": 0.05744915455579758}, {"id": 497, "seek": 199700, "start": 2005.0, "end": 2010.0, "text": " N3, I guess.", "tokens": [50764, 426, 18, 11, 286, 2041, 13, 51014], "temperature": 0.0, "avg_logprob": -0.22462819871448336, "compression_ratio": 1.4642857142857142, "no_speech_prob": 0.05744915455579758}, {"id": 498, "seek": 199700, "start": 2010.0, "end": 2012.0, "text": " Does that make sense?", "tokens": [51014, 4402, 300, 652, 2020, 30, 51114], "temperature": 0.0, "avg_logprob": -0.22462819871448336, "compression_ratio": 1.4642857142857142, "no_speech_prob": 0.05744915455579758}, {"id": 499, "seek": 199700, "start": 2012.0, "end": 2015.0, "text": " Phi of that, and I'll get the first thing of this.", "tokens": [51114, 41435, 295, 300, 11, 293, 286, 603, 483, 264, 700, 551, 295, 341, 13, 51264], "temperature": 0.0, "avg_logprob": -0.22462819871448336, "compression_ratio": 1.4642857142857142, "no_speech_prob": 0.05744915455579758}, {"id": 500, "seek": 199700, "start": 2015.0, "end": 2019.0, "text": " I'll get its js num form.", "tokens": [51264, 286, 603, 483, 1080, 42713, 1031, 1254, 13, 51464], "temperature": 0.0, "avg_logprob": -0.22462819871448336, "compression_ratio": 1.4642857142857142, "no_speech_prob": 0.05744915455579758}, {"id": 501, "seek": 199700, "start": 2019.0, "end": 2022.0, "text": " And I've made a mistake.", "tokens": [51464, 400, 286, 600, 1027, 257, 6146, 13, 51614], "temperature": 0.0, "avg_logprob": -0.22462819871448336, "compression_ratio": 1.4642857142857142, "no_speech_prob": 0.05744915455579758}, {"id": 502, "seek": 202200, "start": 2022.0, "end": 2027.0, "text": " F is not a function.", "tokens": [50364, 479, 307, 406, 257, 2445, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11478498505383003, "compression_ratio": 1.4939759036144578, "no_speech_prob": 0.017172889783978462}, {"id": 503, "seek": 202200, "start": 2027.0, "end": 2032.0, "text": " Let's double check this inside out.", "tokens": [50614, 961, 311, 3834, 1520, 341, 1854, 484, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11478498505383003, "compression_ratio": 1.4939759036144578, "no_speech_prob": 0.017172889783978462}, {"id": 504, "seek": 202200, "start": 2032.0, "end": 2034.0, "text": " Does that work?", "tokens": [50864, 4402, 300, 589, 30, 50964], "temperature": 0.0, "avg_logprob": -0.11478498505383003, "compression_ratio": 1.4939759036144578, "no_speech_prob": 0.017172889783978462}, {"id": 505, "seek": 202200, "start": 2034.0, "end": 2036.0, "text": " Yeah, it gives me a function.", "tokens": [50964, 865, 11, 309, 2709, 385, 257, 2445, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11478498505383003, "compression_ratio": 1.4939759036144578, "no_speech_prob": 0.017172889783978462}, {"id": 506, "seek": 202200, "start": 2036.0, "end": 2042.0, "text": " Phi of that, what about the first of this?", "tokens": [51064, 41435, 295, 300, 11, 437, 466, 264, 700, 295, 341, 30, 51364], "temperature": 0.0, "avg_logprob": -0.11478498505383003, "compression_ratio": 1.4939759036144578, "no_speech_prob": 0.017172889783978462}, {"id": 507, "seek": 202200, "start": 2042.0, "end": 2044.0, "text": " Also a function.", "tokens": [51364, 2743, 257, 2445, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11478498505383003, "compression_ratio": 1.4939759036144578, "no_speech_prob": 0.017172889783978462}, {"id": 508, "seek": 202200, "start": 2044.0, "end": 2046.0, "text": " What about the js num of that?", "tokens": [51464, 708, 466, 264, 42713, 1031, 295, 300, 30, 51564], "temperature": 0.0, "avg_logprob": -0.11478498505383003, "compression_ratio": 1.4939759036144578, "no_speech_prob": 0.017172889783978462}, {"id": 509, "seek": 202200, "start": 2046.0, "end": 2048.0, "text": " That's where it throws.", "tokens": [51564, 663, 311, 689, 309, 19251, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11478498505383003, "compression_ratio": 1.4939759036144578, "no_speech_prob": 0.017172889783978462}, {"id": 510, "seek": 202200, "start": 2048.0, "end": 2051.0, "text": " I've made a mistake somewhere.", "tokens": [51664, 286, 600, 1027, 257, 6146, 4079, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11478498505383003, "compression_ratio": 1.4939759036144578, "no_speech_prob": 0.017172889783978462}, {"id": 511, "seek": 205100, "start": 2051.0, "end": 2055.0, "text": " What does Phi look like?", "tokens": [50364, 708, 775, 41435, 574, 411, 30, 50564], "temperature": 0.0, "avg_logprob": -0.20051867253071554, "compression_ratio": 1.375886524822695, "no_speech_prob": 0.03254059702157974}, {"id": 512, "seek": 205100, "start": 2055.0, "end": 2057.0, "text": " Phi takes a pair.", "tokens": [50564, 41435, 2516, 257, 6119, 13, 50664], "temperature": 0.0, "avg_logprob": -0.20051867253071554, "compression_ratio": 1.375886524822695, "no_speech_prob": 0.03254059702157974}, {"id": 513, "seek": 205100, "start": 2057.0, "end": 2063.0, "text": " It pairs together the second of P.", "tokens": [50664, 467, 15494, 1214, 264, 1150, 295, 430, 13, 50964], "temperature": 0.0, "avg_logprob": -0.20051867253071554, "compression_ratio": 1.375886524822695, "no_speech_prob": 0.03254059702157974}, {"id": 514, "seek": 205100, "start": 2063.0, "end": 2065.0, "text": " Sorry?", "tokens": [50964, 4919, 30, 51064], "temperature": 0.0, "avg_logprob": -0.20051867253071554, "compression_ratio": 1.375886524822695, "no_speech_prob": 0.03254059702157974}, {"id": 515, "seek": 205100, "start": 2065.0, "end": 2067.0, "text": " Yes, it is very much so.", "tokens": [51064, 1079, 11, 309, 307, 588, 709, 370, 13, 51164], "temperature": 0.0, "avg_logprob": -0.20051867253071554, "compression_ratio": 1.375886524822695, "no_speech_prob": 0.03254059702157974}, {"id": 516, "seek": 205100, "start": 2067.0, "end": 2069.0, "text": " Very much so.", "tokens": [51164, 4372, 709, 370, 13, 51264], "temperature": 0.0, "avg_logprob": -0.20051867253071554, "compression_ratio": 1.375886524822695, "no_speech_prob": 0.03254059702157974}, {"id": 517, "seek": 205100, "start": 2069.0, "end": 2076.0, "text": " Successor's second of P.", "tokens": [51264, 23669, 284, 311, 1150, 295, 430, 13, 51614], "temperature": 0.0, "avg_logprob": -0.20051867253071554, "compression_ratio": 1.375886524822695, "no_speech_prob": 0.03254059702157974}, {"id": 518, "seek": 205100, "start": 2076.0, "end": 2078.0, "text": " No, I'm not sure.", "tokens": [51614, 883, 11, 286, 478, 406, 988, 13, 51714], "temperature": 0.0, "avg_logprob": -0.20051867253071554, "compression_ratio": 1.375886524822695, "no_speech_prob": 0.03254059702157974}, {"id": 519, "seek": 205100, "start": 2078.0, "end": 2080.0, "text": " What were you going to say?", "tokens": [51714, 708, 645, 291, 516, 281, 584, 30, 51814], "temperature": 0.0, "avg_logprob": -0.20051867253071554, "compression_ratio": 1.375886524822695, "no_speech_prob": 0.03254059702157974}, {"id": 520, "seek": 208000, "start": 2080.0, "end": 2091.0, "text": " Yes, that's what I'm trying to do, but it's getting confused.", "tokens": [50364, 1079, 11, 300, 311, 437, 286, 478, 1382, 281, 360, 11, 457, 309, 311, 1242, 9019, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10527950678116237, "compression_ratio": 1.5375, "no_speech_prob": 0.004980770405381918}, {"id": 521, "seek": 208000, "start": 2091.0, "end": 2095.0, "text": " Pair together the second thing with the successor of the second thing.", "tokens": [50914, 430, 1246, 1214, 264, 1150, 551, 365, 264, 31864, 295, 264, 1150, 551, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10527950678116237, "compression_ratio": 1.5375, "no_speech_prob": 0.004980770405381918}, {"id": 522, "seek": 208000, "start": 2095.0, "end": 2098.0, "text": " That feels right to me.", "tokens": [51114, 663, 3417, 558, 281, 385, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10527950678116237, "compression_ratio": 1.5375, "no_speech_prob": 0.004980770405381918}, {"id": 523, "seek": 208000, "start": 2098.0, "end": 2102.0, "text": " Let's call Phi on pairing.", "tokens": [51264, 961, 311, 818, 41435, 322, 32735, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10527950678116237, "compression_ratio": 1.5375, "no_speech_prob": 0.004980770405381918}, {"id": 524, "seek": 208000, "start": 2102.0, "end": 2104.0, "text": " Oh, I think that's the problem I did.", "tokens": [51464, 876, 11, 286, 519, 300, 311, 264, 1154, 286, 630, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10527950678116237, "compression_ratio": 1.5375, "no_speech_prob": 0.004980770405381918}, {"id": 525, "seek": 208000, "start": 2104.0, "end": 2109.0, "text": " Pair together N0 and N0.", "tokens": [51564, 430, 1246, 1214, 426, 15, 293, 426, 15, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10527950678116237, "compression_ratio": 1.5375, "no_speech_prob": 0.004980770405381918}, {"id": 526, "seek": 210900, "start": 2109.0, "end": 2112.0, "text": " That's fine.", "tokens": [50364, 663, 311, 2489, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2129394667489188, "compression_ratio": 1.5142857142857142, "no_speech_prob": 0.020009299740195274}, {"id": 527, "seek": 210900, "start": 2112.0, "end": 2116.0, "text": " If I get the first of that, that's function 0.", "tokens": [50514, 759, 286, 483, 264, 700, 295, 300, 11, 300, 311, 2445, 1958, 13, 50714], "temperature": 0.0, "avg_logprob": -0.2129394667489188, "compression_ratio": 1.5142857142857142, "no_speech_prob": 0.020009299740195274}, {"id": 528, "seek": 210900, "start": 2116.0, "end": 2124.0, "text": " Now if I do something like N4, that's a function and I can convert it.", "tokens": [50714, 823, 498, 286, 360, 746, 411, 426, 19, 11, 300, 311, 257, 2445, 293, 286, 393, 7620, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2129394667489188, "compression_ratio": 1.5142857142857142, "no_speech_prob": 0.020009299740195274}, {"id": 529, "seek": 210900, "start": 2124.0, "end": 2126.0, "text": " The first of that is that.", "tokens": [51114, 440, 700, 295, 300, 307, 300, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2129394667489188, "compression_ratio": 1.5142857142857142, "no_speech_prob": 0.020009299740195274}, {"id": 530, "seek": 210900, "start": 2126.0, "end": 2134.0, "text": " What about the second?", "tokens": [51214, 708, 466, 264, 1150, 30, 51614], "temperature": 0.0, "avg_logprob": -0.2129394667489188, "compression_ratio": 1.5142857142857142, "no_speech_prob": 0.020009299740195274}, {"id": 531, "seek": 210900, "start": 2134.0, "end": 2137.0, "text": " The second of that should be 5.", "tokens": [51614, 440, 1150, 295, 300, 820, 312, 1025, 13, 51764], "temperature": 0.0, "avg_logprob": -0.2129394667489188, "compression_ratio": 1.5142857142857142, "no_speech_prob": 0.020009299740195274}, {"id": 532, "seek": 213700, "start": 2137.0, "end": 2138.0, "text": " It does work.", "tokens": [50364, 467, 775, 589, 13, 50414], "temperature": 0.0, "avg_logprob": -0.15027990458924093, "compression_ratio": 1.4619883040935673, "no_speech_prob": 0.10067262500524521}, {"id": 533, "seek": 213700, "start": 2138.0, "end": 2140.0, "text": " I was just messing up something somewhere.", "tokens": [50414, 286, 390, 445, 23258, 493, 746, 4079, 13, 50514], "temperature": 0.0, "avg_logprob": -0.15027990458924093, "compression_ratio": 1.4619883040935673, "no_speech_prob": 0.10067262500524521}, {"id": 534, "seek": 213700, "start": 2140.0, "end": 2142.0, "text": " Who knows?", "tokens": [50514, 2102, 3255, 30, 50614], "temperature": 0.0, "avg_logprob": -0.15027990458924093, "compression_ratio": 1.4619883040935673, "no_speech_prob": 0.10067262500524521}, {"id": 535, "seek": 213700, "start": 2142.0, "end": 2145.0, "text": " That's my predecessor.", "tokens": [50614, 663, 311, 452, 34991, 13, 50764], "temperature": 0.0, "avg_logprob": -0.15027990458924093, "compression_ratio": 1.4619883040935673, "no_speech_prob": 0.10067262500524521}, {"id": 536, "seek": 213700, "start": 2145.0, "end": 2146.0, "text": " Write it down.", "tokens": [50764, 23499, 309, 760, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15027990458924093, "compression_ratio": 1.4619883040935673, "no_speech_prob": 0.10067262500524521}, {"id": 537, "seek": 213700, "start": 2146.0, "end": 2148.0, "text": " We're almost at the end.", "tokens": [50814, 492, 434, 1920, 412, 264, 917, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15027990458924093, "compression_ratio": 1.4619883040935673, "no_speech_prob": 0.10067262500524521}, {"id": 538, "seek": 213700, "start": 2148.0, "end": 2151.0, "text": " You're troopers for staying this long.", "tokens": [50914, 509, 434, 4495, 33338, 337, 7939, 341, 938, 13, 51064], "temperature": 0.0, "avg_logprob": -0.15027990458924093, "compression_ratio": 1.4619883040935673, "no_speech_prob": 0.10067262500524521}, {"id": 539, "seek": 213700, "start": 2151.0, "end": 2166.0, "text": " Predecessor of N is the first of N applications of Phi to the pair of N0 and N0.", "tokens": [51064, 32969, 68, 25432, 295, 426, 307, 264, 700, 295, 426, 5821, 295, 41435, 281, 264, 6119, 295, 426, 15, 293, 426, 15, 13, 51814], "temperature": 0.0, "avg_logprob": -0.15027990458924093, "compression_ratio": 1.4619883040935673, "no_speech_prob": 0.10067262500524521}, {"id": 540, "seek": 216600, "start": 2166.0, "end": 2168.0, "text": " I've got to watch my friends here.", "tokens": [50364, 286, 600, 658, 281, 1159, 452, 1855, 510, 13, 50464], "temperature": 0.0, "avg_logprob": -0.2018769322609415, "compression_ratio": 1.458100558659218, "no_speech_prob": 0.029295044019818306}, {"id": 541, "seek": 216600, "start": 2168.0, "end": 2169.0, "text": " Close the pair.", "tokens": [50464, 16346, 264, 6119, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2018769322609415, "compression_ratio": 1.458100558659218, "no_speech_prob": 0.029295044019818306}, {"id": 542, "seek": 216600, "start": 2169.0, "end": 2171.0, "text": " Close the first.", "tokens": [50514, 16346, 264, 700, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2018769322609415, "compression_ratio": 1.458100558659218, "no_speech_prob": 0.029295044019818306}, {"id": 543, "seek": 216600, "start": 2171.0, "end": 2173.0, "text": " All right, there's my predecessor.", "tokens": [50614, 1057, 558, 11, 456, 311, 452, 34991, 13, 50714], "temperature": 0.0, "avg_logprob": -0.2018769322609415, "compression_ratio": 1.458100558659218, "no_speech_prob": 0.029295044019818306}, {"id": 544, "seek": 216600, "start": 2173.0, "end": 2177.0, "text": " We'll get the JS version of the predecessor of N7.", "tokens": [50714, 492, 603, 483, 264, 33063, 3037, 295, 264, 34991, 295, 426, 22, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2018769322609415, "compression_ratio": 1.458100558659218, "no_speech_prob": 0.029295044019818306}, {"id": 545, "seek": 216600, "start": 2177.0, "end": 2179.0, "text": " It is a mistake.", "tokens": [50914, 467, 307, 257, 6146, 13, 51014], "temperature": 0.0, "avg_logprob": -0.2018769322609415, "compression_ratio": 1.458100558659218, "no_speech_prob": 0.029295044019818306}, {"id": 546, "seek": 216600, "start": 2179.0, "end": 2181.0, "text": " Pair is not defined.", "tokens": [51014, 430, 1246, 307, 406, 7642, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2018769322609415, "compression_ratio": 1.458100558659218, "no_speech_prob": 0.029295044019818306}, {"id": 547, "seek": 216600, "start": 2181.0, "end": 2182.0, "text": " Oh, okay.", "tokens": [51114, 876, 11, 1392, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2018769322609415, "compression_ratio": 1.458100558659218, "no_speech_prob": 0.029295044019818306}, {"id": 548, "seek": 216600, "start": 2182.0, "end": 2187.0, "text": " Because I said this is burial.", "tokens": [51164, 1436, 286, 848, 341, 307, 35751, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2018769322609415, "compression_ratio": 1.458100558659218, "no_speech_prob": 0.029295044019818306}, {"id": 549, "seek": 216600, "start": 2187.0, "end": 2188.0, "text": " 6.", "tokens": [51414, 1386, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2018769322609415, "compression_ratio": 1.458100558659218, "no_speech_prob": 0.029295044019818306}, {"id": 550, "seek": 216600, "start": 2188.0, "end": 2190.0, "text": " Predecessor of 7, 6.", "tokens": [51464, 32969, 68, 25432, 295, 1614, 11, 1386, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2018769322609415, "compression_ratio": 1.458100558659218, "no_speech_prob": 0.029295044019818306}, {"id": 551, "seek": 216600, "start": 2190.0, "end": 2194.0, "text": " Wow.", "tokens": [51564, 3153, 13, 51764], "temperature": 0.0, "avg_logprob": -0.2018769322609415, "compression_ratio": 1.458100558659218, "no_speech_prob": 0.029295044019818306}, {"id": 552, "seek": 219400, "start": 2194.0, "end": 2200.0, "text": " There was our totally impossible, crazy predecessor and here's our beautiful data structures-based", "tokens": [50364, 821, 390, 527, 3879, 6243, 11, 3219, 34991, 293, 510, 311, 527, 2238, 1412, 9227, 12, 6032, 50664], "temperature": 0.0, "avg_logprob": -0.11801383608863467, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.012048207223415375}, {"id": 553, "seek": 219400, "start": 2200.0, "end": 2204.0, "text": " predecessor where we count up, but we always remember the last thing, too.", "tokens": [50664, 34991, 689, 321, 1207, 493, 11, 457, 321, 1009, 1604, 264, 1036, 551, 11, 886, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11801383608863467, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.012048207223415375}, {"id": 554, "seek": 219400, "start": 2204.0, "end": 2205.0, "text": " That's all we're doing.", "tokens": [50864, 663, 311, 439, 321, 434, 884, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11801383608863467, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.012048207223415375}, {"id": 555, "seek": 219400, "start": 2205.0, "end": 2209.0, "text": " Counting up, remembering the previous thing.", "tokens": [50914, 5247, 278, 493, 11, 20719, 264, 3894, 551, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11801383608863467, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.012048207223415375}, {"id": 556, "seek": 219400, "start": 2209.0, "end": 2211.0, "text": " I'm going to fly through this bit.", "tokens": [51114, 286, 478, 516, 281, 3603, 807, 341, 857, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11801383608863467, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.012048207223415375}, {"id": 557, "seek": 219400, "start": 2211.0, "end": 2216.0, "text": " Subtraction is just doing K predecessors to N.", "tokens": [51214, 8511, 83, 26766, 307, 445, 884, 591, 24874, 45700, 281, 426, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11801383608863467, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.012048207223415375}, {"id": 558, "seek": 221600, "start": 2216.0, "end": 2226.0, "text": " Less than or equal to is just subtracting K from N and seeing if we bottom out and checking if that's 0.", "tokens": [50364, 18649, 813, 420, 2681, 281, 307, 445, 16390, 278, 591, 490, 426, 293, 2577, 498, 321, 2767, 484, 293, 8568, 498, 300, 311, 1958, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10103895472384047, "compression_ratio": 1.8369565217391304, "no_speech_prob": 0.12078582495450974}, {"id": 559, "seek": 221600, "start": 2226.0, "end": 2231.0, "text": " Equality is just checking if it's less than or equal to in both directions.", "tokens": [50864, 462, 11286, 307, 445, 8568, 498, 309, 311, 1570, 813, 420, 2681, 281, 294, 1293, 11095, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10103895472384047, "compression_ratio": 1.8369565217391304, "no_speech_prob": 0.12078582495450974}, {"id": 560, "seek": 221600, "start": 2231.0, "end": 2239.0, "text": " If they're less than or equal to in both directions, then they must be equal because there's no other way that that would make sense.", "tokens": [51114, 759, 436, 434, 1570, 813, 420, 2681, 281, 294, 1293, 11095, 11, 550, 436, 1633, 312, 2681, 570, 456, 311, 572, 661, 636, 300, 300, 576, 652, 2020, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10103895472384047, "compression_ratio": 1.8369565217391304, "no_speech_prob": 0.12078582495450974}, {"id": 561, "seek": 221600, "start": 2239.0, "end": 2241.0, "text": " So we got those things.", "tokens": [51514, 407, 321, 658, 729, 721, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10103895472384047, "compression_ratio": 1.8369565217391304, "no_speech_prob": 0.12078582495450974}, {"id": 562, "seek": 224100, "start": 2241.0, "end": 2242.0, "text": " Greater than.", "tokens": [50364, 38410, 813, 13, 50414], "temperature": 0.0, "avg_logprob": -0.08643908853884097, "compression_ratio": 1.7363636363636363, "no_speech_prob": 0.025951143354177475}, {"id": 563, "seek": 224100, "start": 2242.0, "end": 2247.0, "text": " This one's fun because it's clearly not less than or equal to, right?", "tokens": [50414, 639, 472, 311, 1019, 570, 309, 311, 4448, 406, 1570, 813, 420, 2681, 281, 11, 558, 30, 50664], "temperature": 0.0, "avg_logprob": -0.08643908853884097, "compression_ratio": 1.7363636363636363, "no_speech_prob": 0.025951143354177475}, {"id": 564, "seek": 224100, "start": 2247.0, "end": 2255.0, "text": " So we got an N and a K and an N and a K, but that looks kind of like function composition, except it's binary function composition.", "tokens": [50664, 407, 321, 658, 364, 426, 293, 257, 591, 293, 364, 426, 293, 257, 591, 11, 457, 300, 1542, 733, 295, 411, 2445, 12686, 11, 3993, 309, 311, 17434, 2445, 12686, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08643908853884097, "compression_ratio": 1.7363636363636363, "no_speech_prob": 0.025951143354177475}, {"id": 565, "seek": 224100, "start": 2255.0, "end": 2257.0, "text": " The rightmost function doesn't take a single input.", "tokens": [51064, 440, 558, 1761, 2445, 1177, 380, 747, 257, 2167, 4846, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08643908853884097, "compression_ratio": 1.7363636363636363, "no_speech_prob": 0.025951143354177475}, {"id": 566, "seek": 224100, "start": 2257.0, "end": 2259.0, "text": " It takes two inputs.", "tokens": [51164, 467, 2516, 732, 15743, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08643908853884097, "compression_ratio": 1.7363636363636363, "no_speech_prob": 0.025951143354177475}, {"id": 567, "seek": 224100, "start": 2259.0, "end": 2263.0, "text": " So we can't simply say it's the bluebird of not and less than or equal to.", "tokens": [51264, 407, 321, 393, 380, 2935, 584, 309, 311, 264, 3344, 18080, 295, 406, 293, 1570, 813, 420, 2681, 281, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08643908853884097, "compression_ratio": 1.7363636363636363, "no_speech_prob": 0.025951143354177475}, {"id": 568, "seek": 224100, "start": 2263.0, "end": 2265.0, "text": " That doesn't work.", "tokens": [51464, 663, 1177, 380, 589, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08643908853884097, "compression_ratio": 1.7363636363636363, "no_speech_prob": 0.025951143354177475}, {"id": 569, "seek": 226500, "start": 2265.0, "end": 2273.0, "text": " We need some new combinator that does two arguments for the right function and then the result into the second function.", "tokens": [50364, 492, 643, 512, 777, 2512, 31927, 300, 775, 732, 12869, 337, 264, 558, 2445, 293, 550, 264, 1874, 666, 264, 1150, 2445, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10071632299530373, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.004608666989952326}, {"id": 570, "seek": 226500, "start": 2273.0, "end": 2277.0, "text": " And that combinator is the blackbird.", "tokens": [50764, 400, 300, 2512, 31927, 307, 264, 2211, 18080, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10071632299530373, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.004608666989952326}, {"id": 571, "seek": 226500, "start": 2277.0, "end": 2283.0, "text": " So the blackbird, let's say the blackbird of not less than or equal to is greater than.", "tokens": [50964, 407, 264, 2211, 18080, 11, 718, 311, 584, 264, 2211, 18080, 295, 406, 1570, 813, 420, 2681, 281, 307, 5044, 813, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10071632299530373, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.004608666989952326}, {"id": 572, "seek": 226500, "start": 2283.0, "end": 2287.0, "text": " This is, we're really starting to cook with gas here.", "tokens": [51264, 639, 307, 11, 321, 434, 534, 2891, 281, 2543, 365, 4211, 510, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10071632299530373, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.004608666989952326}, {"id": 573, "seek": 226500, "start": 2287.0, "end": 2290.0, "text": " You know what is absolutely mind blowing to me?", "tokens": [51464, 509, 458, 437, 307, 3122, 1575, 15068, 281, 385, 30, 51614], "temperature": 0.0, "avg_logprob": -0.10071632299530373, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.004608666989952326}, {"id": 574, "seek": 229000, "start": 2290.0, "end": 2297.0, "text": " The blackbird is the composition of composition and composition.", "tokens": [50364, 440, 2211, 18080, 307, 264, 12686, 295, 12686, 293, 12686, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11004403611304055, "compression_ratio": 1.544378698224852, "no_speech_prob": 0.01941550336778164}, {"id": 575, "seek": 229000, "start": 2297.0, "end": 2303.0, "text": " Put that in your pipe and smoke it.", "tokens": [50714, 4935, 300, 294, 428, 11240, 293, 8439, 309, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11004403611304055, "compression_ratio": 1.544378698224852, "no_speech_prob": 0.01941550336778164}, {"id": 576, "seek": 229000, "start": 2303.0, "end": 2307.0, "text": " All right, and then we hit the conclusion of the talk, which is actually in part one.", "tokens": [51014, 1057, 558, 11, 293, 550, 321, 2045, 264, 10063, 295, 264, 751, 11, 597, 307, 767, 294, 644, 472, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11004403611304055, "compression_ratio": 1.544378698224852, "no_speech_prob": 0.01941550336778164}, {"id": 577, "seek": 229000, "start": 2307.0, "end": 2311.0, "text": " So that's the entire talk.", "tokens": [51214, 407, 300, 311, 264, 2302, 751, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11004403611304055, "compression_ratio": 1.544378698224852, "no_speech_prob": 0.01941550336778164}, {"id": 578, "seek": 229000, "start": 2311.0, "end": 2315.0, "text": " Thank you very much.", "tokens": [51414, 1044, 291, 588, 709, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11004403611304055, "compression_ratio": 1.544378698224852, "no_speech_prob": 0.01941550336778164}, {"id": 579, "seek": 229000, "start": 2315.0, "end": 2318.0, "text": " Pretty mind blowing stuff.", "tokens": [51614, 10693, 1575, 15068, 1507, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11004403611304055, "compression_ratio": 1.544378698224852, "no_speech_prob": 0.01941550336778164}, {"id": 580, "seek": 231800, "start": 2318.0, "end": 2320.0, "text": " And guess what? This can keep on going on and on.", "tokens": [50364, 400, 2041, 437, 30, 639, 393, 1066, 322, 516, 322, 293, 322, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1384132872236536, "compression_ratio": 1.8865030674846626, "no_speech_prob": 0.20398081839084625}, {"id": 581, "seek": 231800, "start": 2320.0, "end": 2323.0, "text": " We can do infinite lists of data structures that hold other lists.", "tokens": [50464, 492, 393, 360, 13785, 14511, 295, 1412, 9227, 300, 1797, 661, 14511, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1384132872236536, "compression_ratio": 1.8865030674846626, "no_speech_prob": 0.20398081839084625}, {"id": 582, "seek": 231800, "start": 2323.0, "end": 2328.0, "text": " And you could have, if the list has a head or a tail and is empty, and it just keeps going out from there.", "tokens": [50614, 400, 291, 727, 362, 11, 498, 264, 1329, 575, 257, 1378, 420, 257, 6838, 293, 307, 6707, 11, 293, 309, 445, 5965, 516, 484, 490, 456, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1384132872236536, "compression_ratio": 1.8865030674846626, "no_speech_prob": 0.20398081839084625}, {"id": 583, "seek": 231800, "start": 2328.0, "end": 2330.0, "text": " And you can build up an entire language that way.", "tokens": [50864, 400, 291, 393, 1322, 493, 364, 2302, 2856, 300, 636, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1384132872236536, "compression_ratio": 1.8865030674846626, "no_speech_prob": 0.20398081839084625}, {"id": 584, "seek": 231800, "start": 2330.0, "end": 2334.0, "text": " And people have, and they're called functional programming languages.", "tokens": [50964, 400, 561, 362, 11, 293, 436, 434, 1219, 11745, 9410, 8650, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1384132872236536, "compression_ratio": 1.8865030674846626, "no_speech_prob": 0.20398081839084625}, {"id": 585, "seek": 231800, "start": 2334.0, "end": 2339.0, "text": " Now, real functional programming languages don't use church numerals, because that would be ridiculous.", "tokens": [51164, 823, 11, 957, 11745, 9410, 8650, 500, 380, 764, 4128, 7866, 1124, 11, 570, 300, 576, 312, 11083, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1384132872236536, "compression_ratio": 1.8865030674846626, "no_speech_prob": 0.20398081839084625}, {"id": 586, "seek": 231800, "start": 2339.0, "end": 2344.0, "text": " Because if you wanted to calculate something with 50 million, you have to do 50 million function implications.", "tokens": [51414, 1436, 498, 291, 1415, 281, 8873, 746, 365, 2625, 2459, 11, 291, 362, 281, 360, 2625, 2459, 2445, 16602, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1384132872236536, "compression_ratio": 1.8865030674846626, "no_speech_prob": 0.20398081839084625}, {"id": 587, "seek": 231800, "start": 2344.0, "end": 2347.0, "text": " So real functional programming languages take shortcuts.", "tokens": [51664, 407, 957, 11745, 9410, 8650, 747, 34620, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1384132872236536, "compression_ratio": 1.8865030674846626, "no_speech_prob": 0.20398081839084625}, {"id": 588, "seek": 234700, "start": 2347.0, "end": 2351.0, "text": " They let you do things with numbers that are actually using hardware based math.", "tokens": [50364, 814, 718, 291, 360, 721, 365, 3547, 300, 366, 767, 1228, 8837, 2361, 5221, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09950188398361207, "compression_ratio": 1.5398230088495575, "no_speech_prob": 0.006901706103235483}, {"id": 589, "seek": 234700, "start": 2351.0, "end": 2356.0, "text": " So the compiler has to compile down to Turing machine, stateful computations.", "tokens": [50564, 407, 264, 31958, 575, 281, 31413, 760, 281, 314, 1345, 3479, 11, 1785, 906, 2807, 763, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09950188398361207, "compression_ratio": 1.5398230088495575, "no_speech_prob": 0.006901706103235483}, {"id": 590, "seek": 234700, "start": 2356.0, "end": 2362.0, "text": " But as much as possible, the languages have this backbone of lambda calculus built into them,", "tokens": [50814, 583, 382, 709, 382, 1944, 11, 264, 8650, 362, 341, 34889, 295, 13607, 33400, 3094, 666, 552, 11, 51114], "temperature": 0.0, "avg_logprob": -0.09950188398361207, "compression_ratio": 1.5398230088495575, "no_speech_prob": 0.006901706103235483}, {"id": 591, "seek": 234700, "start": 2362.0, "end": 2366.0, "text": " which proves very useful in a variety of situations.", "tokens": [51114, 597, 25019, 588, 4420, 294, 257, 5673, 295, 6851, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09950188398361207, "compression_ratio": 1.5398230088495575, "no_speech_prob": 0.006901706103235483}, {"id": 592, "seek": 234700, "start": 2366.0, "end": 2370.0, "text": " Any questions before I stop the recording?", "tokens": [51314, 2639, 1651, 949, 286, 1590, 264, 6613, 30, 51514], "temperature": 0.0, "avg_logprob": -0.09950188398361207, "compression_ratio": 1.5398230088495575, "no_speech_prob": 0.006901706103235483}, {"id": 593, "seek": 237000, "start": 2370.0, "end": 2376.0, "text": " Anything beyond a pair are sort of like, well done, like you're talking about?", "tokens": [50364, 11998, 4399, 257, 6119, 366, 1333, 295, 411, 11, 731, 1096, 11, 411, 291, 434, 1417, 466, 30, 50664], "temperature": 0.0, "avg_logprob": -0.14963973652232776, "compression_ratio": 1.853211009174312, "no_speech_prob": 0.2362365573644638}, {"id": 594, "seek": 237000, "start": 2376.0, "end": 2381.0, "text": " Yeah, so you can make a list by doing a pair whose second element is a pair,", "tokens": [50664, 865, 11, 370, 291, 393, 652, 257, 1329, 538, 884, 257, 6119, 6104, 1150, 4478, 307, 257, 6119, 11, 50914], "temperature": 0.0, "avg_logprob": -0.14963973652232776, "compression_ratio": 1.853211009174312, "no_speech_prob": 0.2362365573644638}, {"id": 595, "seek": 237000, "start": 2381.0, "end": 2384.0, "text": " whose second element is a pair, and so on and so forth.", "tokens": [50914, 6104, 1150, 4478, 307, 257, 6119, 11, 293, 370, 322, 293, 370, 5220, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14963973652232776, "compression_ratio": 1.853211009174312, "no_speech_prob": 0.2362365573644638}, {"id": 596, "seek": 237000, "start": 2384.0, "end": 2387.0, "text": " And then one of the elements of the pair, like the first element,", "tokens": [51064, 400, 550, 472, 295, 264, 4959, 295, 264, 6119, 11, 411, 264, 700, 4478, 11, 51214], "temperature": 0.0, "avg_logprob": -0.14963973652232776, "compression_ratio": 1.853211009174312, "no_speech_prob": 0.2362365573644638}, {"id": 597, "seek": 237000, "start": 2387.0, "end": 2392.0, "text": " is always like a flag of whether it's the end of the list or not, or something like that.", "tokens": [51214, 307, 1009, 411, 257, 7166, 295, 1968, 309, 311, 264, 917, 295, 264, 1329, 420, 406, 11, 420, 746, 411, 300, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14963973652232776, "compression_ratio": 1.853211009174312, "no_speech_prob": 0.2362365573644638}, {"id": 598, "seek": 237000, "start": 2392.0, "end": 2394.0, "text": " And you start to do equation checks.", "tokens": [51464, 400, 291, 722, 281, 360, 5367, 13834, 13, 51564], "temperature": 0.0, "avg_logprob": -0.14963973652232776, "compression_ratio": 1.853211009174312, "no_speech_prob": 0.2362365573644638}, {"id": 599, "seek": 239400, "start": 2394.0, "end": 2399.0, "text": " So like if this first element is, or the first element is the element you're holding on to,", "tokens": [50364, 407, 411, 498, 341, 700, 4478, 307, 11, 420, 264, 700, 4478, 307, 264, 4478, 291, 434, 5061, 322, 281, 11, 50614], "temperature": 0.0, "avg_logprob": -0.11291438392970873, "compression_ratio": 1.9454545454545455, "no_speech_prob": 0.009706971235573292}, {"id": 600, "seek": 239400, "start": 2399.0, "end": 2402.0, "text": " and the second element is the continuation of the list.", "tokens": [50614, 293, 264, 1150, 4478, 307, 264, 29357, 295, 264, 1329, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11291438392970873, "compression_ratio": 1.9454545454545455, "no_speech_prob": 0.009706971235573292}, {"id": 601, "seek": 239400, "start": 2402.0, "end": 2407.0, "text": " And if the continuation of the list is not a new pair, but it's some other value, like zero,", "tokens": [50764, 400, 498, 264, 29357, 295, 264, 1329, 307, 406, 257, 777, 6119, 11, 457, 309, 311, 512, 661, 2158, 11, 411, 4018, 11, 51014], "temperature": 0.0, "avg_logprob": -0.11291438392970873, "compression_ratio": 1.9454545454545455, "no_speech_prob": 0.009706971235573292}, {"id": 602, "seek": 239400, "start": 2407.0, "end": 2412.0, "text": " then that's the end of the list.", "tokens": [51014, 550, 300, 311, 264, 917, 295, 264, 1329, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11291438392970873, "compression_ratio": 1.9454545454545455, "no_speech_prob": 0.009706971235573292}, {"id": 603, "seek": 239400, "start": 2412.0, "end": 2416.0, "text": " Right, the empty list is zero or something like that.", "tokens": [51264, 1779, 11, 264, 6707, 1329, 307, 4018, 420, 746, 411, 300, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11291438392970873, "compression_ratio": 1.9454545454545455, "no_speech_prob": 0.009706971235573292}, {"id": 604, "seek": 239400, "start": 2416.0, "end": 2419.0, "text": " Or it's a pair of zero and zero or something.", "tokens": [51464, 1610, 309, 311, 257, 6119, 295, 4018, 293, 4018, 420, 746, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11291438392970873, "compression_ratio": 1.9454545454545455, "no_speech_prob": 0.009706971235573292}, {"id": 605, "seek": 239400, "start": 2419.0, "end": 2422.0, "text": " So all sorts of interesting ways of building this out.", "tokens": [51614, 407, 439, 7527, 295, 1880, 2098, 295, 2390, 341, 484, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11291438392970873, "compression_ratio": 1.9454545454545455, "no_speech_prob": 0.009706971235573292}, {"id": 606, "seek": 242200, "start": 2422.0, "end": 2425.0, "text": " Some of those resources I have show how you can do that.", "tokens": [50364, 2188, 295, 729, 3593, 286, 362, 855, 577, 291, 393, 360, 300, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08090374276444719, "compression_ratio": 1.4896907216494846, "no_speech_prob": 0.010650400072336197}, {"id": 607, "seek": 242200, "start": 2425.0, "end": 2436.0, "text": " And it's not, it's really not too difficult once you've got this kind of way of thinking about functions down.", "tokens": [50514, 400, 309, 311, 406, 11, 309, 311, 534, 406, 886, 2252, 1564, 291, 600, 658, 341, 733, 295, 636, 295, 1953, 466, 6828, 760, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08090374276444719, "compression_ratio": 1.4896907216494846, "no_speech_prob": 0.010650400072336197}, {"id": 608, "seek": 242200, "start": 2436.0, "end": 2443.0, "text": " But as I said before, I really think that does this make you a better functional programmer?", "tokens": [51064, 583, 382, 286, 848, 949, 11, 286, 534, 519, 300, 775, 341, 652, 291, 257, 1101, 11745, 32116, 30, 51414], "temperature": 0.0, "avg_logprob": -0.08090374276444719, "compression_ratio": 1.4896907216494846, "no_speech_prob": 0.010650400072336197}, {"id": 609, "seek": 242200, "start": 2443.0, "end": 2445.0, "text": " Only in a very indirect way.", "tokens": [51414, 5686, 294, 257, 588, 19523, 636, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08090374276444719, "compression_ratio": 1.4896907216494846, "no_speech_prob": 0.010650400072336197}, {"id": 610, "seek": 244500, "start": 2445.0, "end": 2452.0, "text": " A mental workout slash being very comfortable with currying and partial function application and higher order functions.", "tokens": [50364, 316, 4973, 12169, 17330, 885, 588, 4619, 365, 18123, 278, 293, 14641, 2445, 3861, 293, 2946, 1668, 6828, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11081013559293346, "compression_ratio": 1.7096774193548387, "no_speech_prob": 0.6070330739021301}, {"id": 611, "seek": 244500, "start": 2452.0, "end": 2458.0, "text": " And some of those combinators are useful like composition and flip and ID and constant.", "tokens": [50714, 400, 512, 295, 729, 38514, 3391, 366, 4420, 411, 12686, 293, 7929, 293, 7348, 293, 5754, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11081013559293346, "compression_ratio": 1.7096774193548387, "no_speech_prob": 0.6070330739021301}, {"id": 612, "seek": 244500, "start": 2458.0, "end": 2460.0, "text": " There's a reason those are built into Haskell.", "tokens": [51014, 821, 311, 257, 1778, 729, 366, 3094, 666, 8646, 43723, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11081013559293346, "compression_ratio": 1.7096774193548387, "no_speech_prob": 0.6070330739021301}, {"id": 613, "seek": 244500, "start": 2460.0, "end": 2464.0, "text": " They show up again and again and again in very practical examples.", "tokens": [51114, 814, 855, 493, 797, 293, 797, 293, 797, 294, 588, 8496, 5110, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11081013559293346, "compression_ratio": 1.7096774193548387, "no_speech_prob": 0.6070330739021301}, {"id": 614, "seek": 244500, "start": 2464.0, "end": 2470.0, "text": " So being familiar with these things gives you a little bit of a boost or a leg up or a formal way of thinking about them.", "tokens": [51314, 407, 885, 4963, 365, 613, 721, 2709, 291, 257, 707, 857, 295, 257, 9194, 420, 257, 1676, 493, 420, 257, 9860, 636, 295, 1953, 466, 552, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11081013559293346, "compression_ratio": 1.7096774193548387, "no_speech_prob": 0.6070330739021301}, {"id": 615, "seek": 244500, "start": 2470.0, "end": 2474.0, "text": " And if you want to go make your own functional programming language, that's cool too.", "tokens": [51614, 400, 498, 291, 528, 281, 352, 652, 428, 1065, 11745, 9410, 2856, 11, 300, 311, 1627, 886, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11081013559293346, "compression_ratio": 1.7096774193548387, "no_speech_prob": 0.6070330739021301}, {"id": 616, "seek": 247400, "start": 2474.0, "end": 2477.0, "text": " But why do this?", "tokens": [50364, 583, 983, 360, 341, 30, 50514], "temperature": 0.0, "avg_logprob": -0.06552703696561146, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.017152411863207817}, {"id": 617, "seek": 247400, "start": 2477.0, "end": 2479.0, "text": " I don't think it's necessary at all.", "tokens": [50514, 286, 500, 380, 519, 309, 311, 4818, 412, 439, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06552703696561146, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.017152411863207817}, {"id": 618, "seek": 247400, "start": 2479.0, "end": 2480.0, "text": " I think it's nice.", "tokens": [50614, 286, 519, 309, 311, 1481, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06552703696561146, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.017152411863207817}, {"id": 619, "seek": 247400, "start": 2480.0, "end": 2483.0, "text": " I think it's interesting and I hope you think so too.", "tokens": [50664, 286, 519, 309, 311, 1880, 293, 286, 1454, 291, 519, 370, 886, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06552703696561146, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.017152411863207817}, {"id": 620, "seek": 247400, "start": 2483.0, "end": 2487.0, "text": " As evidenced by the fact that you're here at 834.", "tokens": [50814, 1018, 43699, 1232, 538, 264, 1186, 300, 291, 434, 510, 412, 1649, 12249, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06552703696561146, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.017152411863207817}, {"id": 621, "seek": 247400, "start": 2487.0, "end": 2489.0, "text": " So thank you all very much.", "tokens": [51014, 407, 1309, 291, 439, 588, 709, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06552703696561146, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.017152411863207817}, {"id": 622, "seek": 247400, "start": 2489.0, "end": 2493.0, "text": " You've been a really great audience and have a good night.", "tokens": [51114, 509, 600, 668, 257, 534, 869, 4034, 293, 362, 257, 665, 1818, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06552703696561146, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.017152411863207817}], "language": "en"}