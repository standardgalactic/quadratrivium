start	end	text
0	3000	You are now unmuted.
3000	6000	Okay, can you guys hear me?
6000	9000	Yeah, can you guys hear me too?
9000	13000	Yep, I can, and you're live, so take it away.
13000	17000	Okay, so hello everyone, my name is Fermin.
17000	20000	I'm a programmer math student from Spain.
20000	24000	I've been using Emacs for two years now, more or less,
24000	29000	and today I'm going to talk about Maxima Computer Algebra System into Emacs.
29000	32000	So, let's talk about what is Maxima?
32000	36000	Well, Maxima is a system for manipulation of symbolic and numerical expression.
36000	41000	It's similar in some regard to Octave, and it's also free software.
41000	45000	It's derived from the Maxima from the M-A-T from the M-A-T,
45000	50000	and it's written in common Lisp, which is a language that I really like and enjoy writing.
50000	52000	So for me, it's a plus.
52000	56000	So, let's talk about the initial support for Maxima.
56000	59000	When I first started using it, I looked for support into Emacs,
59000	64000	and I found that there's two major modes in the main repository of Maxima.
64000	69000	For Emacs, the first one is iMaxima, which I don't know too much about it,
69000	73000	and the second one is Maxima.L, which is the one I took first,
73000	75000	and it was pretty nice.
75000	79000	It has like a major mode, a minor mode, a nice ripple,
79000	83000	but it also has some disadvantages.
83000	86000	The first one is that it's quite outdated.
86000	89000	I think it was from the 2007.
89000	92000	So it's not tested with the Korean Emacs version,
92000	96000	and the second one is that it doesn't use modern Emacs capability.
96000	100000	I'm talking, for example, about the last or more latex preview
100000	104000	from the last iMax 27.1, I think.
104000	108000	And the last one is that it's not integrated with common third-party extension.
108000	111000	I'm talking about company, for example, well, third-party.
111000	115000	Yeah, you know, the Elpa Milpa packages.
115000	118000	So this stock is going to be divided into parts.
118000	122000	First one is going to be how much Maxima I made today in Max exercise.
122000	125000	Don't worry, it's going to be quite easy.
125000	128000	And the second one is going to be why for the package
128000	132000	and the least improvement that I did, and a couple of things more,
132000	136000	maybe the future and where's the package right now, if you can use it.
136000	139000	So let's talk about the workflow.
139000	142000	Right out of the box, it has like an almost super.
142000	147000	I didn't write this. It was already in Emacs.
147000	152000	So that's pretty nice. Let's go with a simple example.
152000	156000	Okay, so this is an array of three equations and three variables.
156000	160000	So it's a system that can be solved and the solution is unique.
160000	162000	So we're going to solve it, right?
162000	166000	Let's go. Solutions.
166000	170000	Okay, here's how you define a variable in, let's call solve.
170000	175000	Okay, let's call implicit.
175000	178000	Oh, no, sorry.
178000	182000	Okay, and now an array of variables.
182000	188000	Okay, so first of all, we have to send this variable to the Maxima.
188000	194000	We can do that with Ctrl C, Ctrl C, or with the Maxima.
194000	201000	And then line. Okay, so let's put the Maxima buffer right here.
201000	206000	Okay, so right now we can get the solution like this.
206000	210000	So we call this line right now, Ctrl C, Ctrl C.
210000	213000	As you can see, we get like an array inside an array,
213000	216000	because let's see why we get this.
216000	221000	So we can call Maxima help point.
221000	227000	So open a doc buffer with all information about the solve function.
227000	231000	So we can see that there's a list of solution equations.
231000	233000	You can see it. Okay.
233000	237000	So, but we know that the system only have one solution.
237000	239000	So we're only interested in the first one.
239000	242000	We can do this like pretty easily just to take the first one.
242000	245000	We can send it to the buffer.
245000	248000	So this is quite an easy example that you can see there to completion
248000	251000	of the help facilities that we have.
251000	253000	We can also get information about the symbol.
253000	256000	For example, Maxima symbol doc.
256000	259000	And we get in the, I don't know if you can see it correctly,
259000	265000	in the mini buffer all the possible parameters of the function.
265000	268000	So let's continue.
268000	270000	Okay.
270000	274000	So let's go to a more, well, complicated example, so to say.
274000	277000	Oops. Okay.
277000	283000	So we have this equation and we want to go from minus one to five.
283000	285000	I want to show in a nice graph.
285000	286000	Right.
286000	290000	First of all, we begin sending this line to the Maxima repo.
290000	292000	Put it in the bottom again.
292000	294000	Okay.
294000	297000	So this is not ideal if you want to write down this equation
297000	299000	because it's quite messy.
299000	301000	Where is when?
301000	303000	So what's thing are where?
303000	305000	I'm called the function Maxima.
305000	307000	Let's say insert form.
307000	308000	Okay.
308000	309000	And this is more easy.
309000	314000	This basically put text behind and led or more to render it.
314000	316000	And this is why easy to write down.
316000	320000	You can use it like in every expression.
320000	323000	So first we have to call a library.
323000	326000	Let's load the library.
326000	328000	Library draw.
328000	332000	So completion for local variable and local libraries.
332000	334000	Sorry.
334000	336000	Let me try to finish the draw.
336000	337000	Okay.
337000	339000	We send the line.
339000	342000	So right now we have a leverage and we should even have auto completion
342000	344000	for the library function.
344000	345000	Okay.
345000	347000	We have this called draw 2d.
347000	350000	And now we can call implicit.
350000	351000	We should have.
351000	352000	Okay.
352000	355000	And we can have input the variable of equations.
355000	357000	We put the first variable.
357000	361000	The minus five, the five.
361000	362000	Five.
362000	366000	The V variable, the minus five and the five.
366000	367000	Okay.
367000	368000	It should be all.
368000	369000	All good.
369000	371000	So let me try to send it.
371000	372000	Okay.
372000	374000	You cannot see it right now.
374000	376000	Because I'm just sharing the maximum screen.
376000	379000	Let me try to change that.
379000	383000	Okay.
383000	384000	Okay.
384000	385000	Can you plot?
385000	386000	Hello.
391000	392000	Okay.
392000	395000	So this is basically the graph that can you plot generates.
395000	398000	Right now it's not integrated into.
398000	402000	Into the maximum package, but it's a work in progress.
402000	405000	So let's go back to e-max.
405000	407000	Where are you?
407000	408000	Okay.
408000	410000	Okay.
410000	411000	Okay.
411000	415000	So, um, let's continue.
415000	420000	So, uh, this is some of the things that you can use for you day to day programming in
420000	421000	maxima.
421000	425000	Um, let's go now with the.
425000	426000	Okay.
426000	429000	As you can see, this is just text that is rendered.
429000	430000	Okay.
430000	431000	Let's go with the next slide.
431000	433000	This is how I use maxima a simple example.
433000	438000	We don't want to talk too much about it because everyone used the package in a different way.
438000	442000	So we're now going to talk about the original package and the way I change it.
442000	443000	Right.
443000	449000	So the documentation, uh, of the original was great, but for me, it wasn't embedded in
449000	450000	the code.
450000	452000	It wasn't something sometimes hard to read.
452000	455000	Like it was like a big chunk of comment.
455000	457000	Give me all the information.
457000	460000	Like, um, for me, that's too much.
460000	466000	I prefer a cohesive, small, um, comment and then a big read me with ordered all the links
466000	467000	and information.
467000	470000	So that's one of the first thing I change.
470000	471000	Um, then also completion.
471000	472000	I'm a big fan.
472000	474000	I'm used to slime.
474000	477000	So, um, I love beta to completion.
477000	481000	So, um, the first thing that I noticed that, well, it uses an absolute function.
481000	483000	I don't know if you can see correctly.
483000	484000	Okay.
484000	490000	Um, coming dynamic is deprecated and it also have like this, uh, variable, which is maxima
490000	495000	symbol, which is basically a big, uh, list of all the possible completion.
495000	501000	So, uh, if I load the library, it's not aware of the new symbols, or even if I create a
501000	503000	variable, it's not loaded.
503000	504000	So it's not dynamic.
504000	507000	So I want the first thing I want is dynamic completion.
507000	508000	Right.
508000	511000	So I improve it, which it wasn't that hard.
511000	516000	I first of all create maximum gets completion, which we're going to see in a moment.
516000	518000	And then I change is complete in the region.
518000	523000	So this is the improved version, but the good thing is like I decoupled the completion
523000	524000	function.
524000	526000	So I make that again, using all your own.
526000	533000	So you get a prefix, which is, um, like the thing that you're going to auto complete,
533000	538000	you get the inferior process, which I'm going to talk about later, but basically it's a
538000	540000	maximum process you can work with.
540000	543000	And you get an optional argument, which is fuzzy finding.
543000	544000	Okay.
544000	551000	So you can easily send a block here with, uh, with the approach, which is a maximum command
551000	553000	that gets you all the auto completion.
553000	560000	And then you process the, the output and you return, uh, a list of possible completion.
560000	563000	This function can be easily put into company.
563000	567000	As you can see, just get maximum cellular inferior process.
567000	570000	It's a process that just, uh, uses.
570000	571000	Sorry.
571000	575000	I have all the approach and the get that symbol.
575000	578000	It's like a, like I say, axillary lights.
578000	581000	Help me, uh, for all that dirty stuff.
581000	583000	So, and process manipulation.
583000	588000	Let's talk about how the maximum process was in the beginning.
588000	593000	So at first it was just one process and you send all of the things there and you move
593000	595000	the process here and there.
595000	598000	And there was a global state, right?
598000	601000	So all the function depends on variable variables.
601000	603000	Um, I don't like that approach.
603000	610000	I prefer more like a short to say functional, like you sense one things and you return something.
610000	613000	So it's not like avoid functions or to say.
613000	615000	So I change it drastically.
615000	618000	Uh, well, this is the maximum start function now.
618000	623000	It just create, uh, start a process with this function, which is maximum making failure.
623000	630000	So this function just, uh, uh, gets a name and it returned a process of maximum and you
630000	632000	can then manipulate it the way you want.
632000	634000	Let's see a better version.
634000	636000	So this is the opposite, right?
636000	641000	This remove an inferior process and delete the process and kill the buffer.
641000	642000	Right?
642000	643000	So let's give it an example.
643000	646000	Cause this, you can see it pretty easily in this example.
646000	651000	So, uh, I want to go to the scratch buffer, which I think you can see better.
651000	652000	Okay.
652000	657000	So, uh, this is the way you can get a process with your name and save it into a variable.
657000	658000	Right?
658000	659000	Let's execute this.
659000	663000	So as you can see, well, I don't know if you can see big, you get a process.
663000	665000	Let's go to it.
665000	668000	The process called my maxima as the buffer.
668000	669000	Right?
669000	671000	And if we can, you can send the stuff to the process.
671000	672000	Right?
672000	677000	We can call maxima send block, get a blog of pallid maxima code and just pass the variable
677000	680000	the process and we send code to the process.
680000	681000	Right?
681000	682000	We can, uh, this is youthful.
682000	687000	You have some expensive computation that you want to process as synchrony.
687000	690000	So to say, so the process can manage it.
690000	694000	And when you get the results correctly, you can also get the results from the process.
694000	697000	I mean, I don't put it here, but it's quite easy.
697000	703000	And then you remove the inferior, which is the way to get rid of the process and the
703000	704000	buffer.
704000	708000	So if we call this function, we should get rid of the process and it works.
708000	710000	The person is no longer.
710000	712000	I'm happy to continue.
712000	716000	So, um, other things that improve the package.
716000	718000	I'm doing time.
718000	719000	Okay.
719000	723000	Another thing that I did to the package was to add a continue integration and continue
723000	724000	delivery.
724000	725000	Right?
725000	729000	So the package didn't have any tests and the code was a little bit messy.
729000	738000	So I, um, add integration at test and test with the test simple framework from Rocky
738000	743000	bursting, the maintainer of real good, which is a great package by the way.
743000	746000	Um, yeah, this is one example of the process.
746000	751000	So right now, cause, um, the infrastructure of the process management is the couple.
751000	753000	So I can test it pretty easily.
753000	756000	This is the test function of the inferior running.
756000	759000	So I can check if an inferior is running right now.
759000	763000	And I can just delete it after and get the results.
763000	766000	And I also did some integration with the party packages.
766000	768000	The first one company, of course, I love auto completion.
768000	771000	The second one was our mold that was already there.
771000	776000	And Lattec with the, um, or Latin Lattec insert form.
776000	781000	And with poly mode, cause, um, let me evaluate this.
781000	783000	Maxima can understand list code.
783000	790000	Well, more or less, he has to like a function, so to say, that you can send a list command
790000	792000	to the Maxima rebel.
792000	794000	And you can understand it in some way.
794000	799000	So we can go to the Maxima, Paulie, Paulie, Maxima, right?
799000	804000	You enable Paulie Maxima and it creates a poly mode, which this is list code.
804000	806000	And this is Maxima code.
806000	808000	So we can send this to the Maxima rebel.
808000	816000	We come to C control art, which it send the, um, the Kurem, um, area, region.
816000	817000	Sorry.
817000	820000	And we define a variable with, which is called test.
820000	822000	And as we can see, we have the variable test right here.
822000	827000	So you can, uh, program in list, uh, and you can send it to Maxima.
828000	829000	So this is pretty good.
829000	830000	Pretty nice.
830000	834000	Um, working integration with this line mode and with shrunk.
834000	840000	So you can actually have a sort of completion of, uh, function inside the Maxima list package.
840000	843000	But this is going to take quite a while.
843000	844000	That's not trivial.
844000	848000	So, um, what are the features of Maxima right now?
848000	851000	Well, we have phones highlighting smart indentation.
851000	854000	Uh, it was already in the package, but now it's quite better.
854000	856000	Uh, great help functions right now.
856000	860000	Uh, you can find the documentation quite fast and currently they menu integration.
860000	861000	This is quite basic.
861000	865000	It needs to be a little bit improved, uh, latex support, auto completion, local company,
865000	868000	and maximum process integration and mini buffer.
868000	874000	I didn't show you, but basically if you call global Maxima minor mode, you have the minor
874000	876000	mode and you call Maxima mini buffer.
876000	877000	How are you?
877000	878000	Okay.
878000	882000	Maybe for you can basically use a right simple Maxima command and it will give you the
882000	883000	results.
883000	886000	This is like a program version of, um, calc.
886000	888000	So you can, okay.
888000	889000	Yeah.
889000	891000	You write the command and you get the output way more to come.
891000	897000	I have like a list of, um, issues that I put enhancements and new features that I'm going
897000	899000	to develop.
899000	902000	So, uh, the future and the present of the package.
902000	905000	Well, the package is right now Melpa, uh, Melpa stable.
905000	910000	Um, Melpa stable is in the zero point seven point six version.
910000	915000	And I'm planning to include into the non-genu Elpa.
915000	917000	This is the URL of the package by the way.
917000	921000	So you can, if you go to Melpa, you put Maxima and you can download it.
921000	923000	Uh, it doesn't have too much dependencies.
923000	925000	You're aware of that.
925000	927000	Um, and thank you very much.
927000	928000	Uh, this is going to be my talk.
928000	930000	These are my, uh, information.
930000	932000	This is my kid lab.
932000	934000	This is my page, which I don't love too much.
934000	936000	And this is my email.
936000	939000	So, um, thank you very much.
939000	943000	And I will be answering some questions right now and happy hacking.
948000	951000	Thank you very much for the great talk.
951000	955000	Um, yeah, let's see if we have any questions.
955000	956000	Yeah.
956000	958000	I'm reading like this.
958000	961000	Um, so I'm a body of each other user right now.
961000	963000	Okay.
964000	966000	Maximum of each other.
966000	967000	Yep.
967000	968000	There are a couple of questions.
969000	970000	Wow.
970000	971000	Maximum of October.
971000	974000	I don't want to, I don't know Octave that much.
974000	979000	Um, like I use it like a couple of time, but I'm not happy.
979000	986000	And I found the, um, Octave package to be quite a little bit harder to
986000	987000	understand.
987000	994000	Um, also that, um, it didn't have too much features.
994000	997000	Like I prefer the maximum used to maybe Octave is better.
997000	999000	I don't, I'm not a hundred percent sure.
999000	1003000	I know that you can use it for similar stuff, but that's it.
1003000	1004000	So, sorry.
1007000	1008000	Oh, okay.
1008000	1010000	I mean, a little bit of a rush.
1010000	1011000	Sorry.
1011000	1013000	Let me drink a little blue.
1013000	1014000	Okay.
1014000	1015000	Okay.
1015000	1016000	Okay.
1021000	1022000	Okay.
1023000	1026000	How does Maxima compare to Sage math in Emacs?
1029000	1034000	I mean, I don't know what is Sage math.
1034000	1035000	I'm sorry.
1035000	1039000	Um, so I cannot answer your squinch with your question.
1039000	1040000	I think.
1042000	1043000	Sorry.
1043000	1046000	But I mean, Maxima is ready in Como List.
1046000	1048000	That's just a preference for me because I like, uh,
1048000	1052000	a list dialect and Camel is interesting.
1052000	1057000	Um, yeah.
1057000	1063000	Uh, do you plan to have a maximum for session for Maxima code
1063000	1064000	block?
1064000	1065000	Yes.
1065000	1070000	I want to improve the, um, of Maxima package,
1070000	1073000	but I didn't have enough time and I want to clear a little bit of
1073000	1077000	the code because still right now, um,
1078000	1081000	uh, the code is quite messy in some areas because I pretty much
1081000	1083000	implement first the basic function.
1083000	1085000	I want to build in top off.
1085000	1086000	So right now it's quite usable,
1086000	1088000	but it's still have some things that I want to improve.
1088000	1091000	So when I finish that, I will, um,
1091000	1093000	improve the normal version.
1093000	1097000	I think it maximized it to get into, into your video.
1097000	1098000	Yes.
1098000	1103000	Uh, I think that the creator of Maxima like have this list, uh,
1103000	1108000	mine and probably, uh, um, that they,
1108000	1112000	if you go to a symbol, you get all the information and that reflect
1112000	1116000	that you can actually write your program of Maxima into,
1116000	1121000	um, into list literally cause they have a command.
1121000	1123000	So I think that is quite easy to get into.
1123000	1129000	So many versions they use it for, um, first, um, years.
1129000	1130000	So it is quite easy.
1130000	1134000	And I think with my package, you can use it like pretty,
1134000	1135000	pretty easily.
1135000	1139000	Just create a file and you can start typing and Maxima quite easy
1139000	1140000	to install also.
1140000	1143000	So I think, yeah, it is quite easy.
1143000	1145000	And the page, the page should restart.
1145000	1147000	I don't know why.
1147000	1148000	Sorry.
1149000	1150000	Okay.
1150000	1153000	Uh, Maxima seems to have strict infix listener.
1153000	1154000	Hmm.
1154000	1159000	Uh, infix strict infix.
1159000	1161000	Infix list syntax.
1161000	1167000	Um, you're talking about the Maxima itself syntax or I don't
1167000	1168000	understand the question.
1168000	1174000	Well, I going to go to the next question.
1174000	1177000	Is there a support for images in Maxima mode?
1177000	1178000	Not right now.
1178000	1186000	Uh, the way I want to implement some IMAX, um, things.
1187000	1191000	Uh, is there a support for, but right now it doesn't have like,
1191000	1195000	uh, if you want to have a new plot, um, inside your buffer right now,
1195000	1196000	it's not possible.
1196000	1201000	So that's the thing that I Maxima does that Maxima.l still doesn't
1201000	1204000	do which university you start to use Maxima.
1204000	1210000	Um, in the Saragossa university from Spain, they use Maxima in
1210000	1215000	the, um, thing in the engineer and in the math also.
1215000	1219000	So not 100% sure right now, but when I started, are you planning
1219000	1221000	to open your package into Maxima?
1221000	1226000	Um, I don't know about that because, um, maybe can be a little bit messy.
1226000	1232000	Um, because the Maxima repel is more built around like Maxima
1232000	1237000	itself and they don't update the interfaces that much.
1237000	1238000	I have no problem.
1238000	1240000	Like it's okay.
1240000	1245000	It just, um, you just have to, um, if you want to push,
1245000	1247000	you can push in other repository.
1247000	1251000	I mean, it's just changed the file in other way, but also the
1251000	1254000	test, um, it's going to be a little bit harder because I think
1254000	1260000	they're using, uh, search for, um, I'm using, uh, kid lab, uh,
1260000	1262000	continue integration with you in delivery.
1262000	1268000	So yeah, I don't think that, but it will, yeah, it will be nice.
1271000	1272000	Okay.
1272000	1274000	Um, it's possible to include maximizing or files,
1274000	1276000	similar to Jupyter notebooks.
1276000	1280000	Um, I mean, you can, uh, use Maxima in your,
1280000	1284000	or, uh, files and you have Maxima.l mode integrated.
1284000	1288000	And you can like create, uh, put that code in a buffer and then,
1288000	1294000	uh, um, uh, edit it correctly, but it is now not,
1294000	1297000	it doesn't have like all the features like all the languages
1297000	1301000	because right now, uh, as my understanding is quite basic.
1301000	1306000	So I still have some, still need some, some stuff, some workaround.
1308000	1309000	Okay.
1309000	1310000	I think that's it.
1316000	1317000	Yep.
1317000	1318000	So that's it.
1318000	1322000	Uh, thank you very much for your live talk and for,
1322000	1323000	you know, the live Q&A.
1324000	1325000	Thank you.
1325000	1326000	Thank you all.
1326000	1327000	Amazing.
1328000	1329000	Cheers.
1329000	1330000	Thank you.
1330000	1331000	It's thanks to all you guys.
1331000	1332000	It's awesome.
1332000	1333000	Okay.
1333000	1334000	Thank you.
1334000	1335000	Cheers.
1335000	1336000	Bye.
1336000	1337000	Bye.
