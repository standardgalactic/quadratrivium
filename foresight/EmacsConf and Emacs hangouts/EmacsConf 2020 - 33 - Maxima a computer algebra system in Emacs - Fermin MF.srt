1
00:00:00,000 --> 00:00:03,000
You are now unmuted.

2
00:00:03,000 --> 00:00:06,000
Okay, can you guys hear me?

3
00:00:06,000 --> 00:00:09,000
Yeah, can you guys hear me too?

4
00:00:09,000 --> 00:00:13,000
Yep, I can, and you're live, so take it away.

5
00:00:13,000 --> 00:00:17,000
Okay, so hello everyone, my name is Fermin.

6
00:00:17,000 --> 00:00:20,000
I'm a programmer math student from Spain.

7
00:00:20,000 --> 00:00:24,000
I've been using Emacs for two years now, more or less,

8
00:00:24,000 --> 00:00:29,000
and today I'm going to talk about Maxima Computer Algebra System into Emacs.

9
00:00:29,000 --> 00:00:32,000
So, let's talk about what is Maxima?

10
00:00:32,000 --> 00:00:36,000
Well, Maxima is a system for manipulation of symbolic and numerical expression.

11
00:00:36,000 --> 00:00:41,000
It's similar in some regard to Octave, and it's also free software.

12
00:00:41,000 --> 00:00:45,000
It's derived from the Maxima from the M-A-T from the M-A-T,

13
00:00:45,000 --> 00:00:50,000
and it's written in common Lisp, which is a language that I really like and enjoy writing.

14
00:00:50,000 --> 00:00:52,000
So for me, it's a plus.

15
00:00:52,000 --> 00:00:56,000
So, let's talk about the initial support for Maxima.

16
00:00:56,000 --> 00:00:59,000
When I first started using it, I looked for support into Emacs,

17
00:00:59,000 --> 00:01:04,000
and I found that there's two major modes in the main repository of Maxima.

18
00:01:04,000 --> 00:01:09,000
For Emacs, the first one is iMaxima, which I don't know too much about it,

19
00:01:09,000 --> 00:01:13,000
and the second one is Maxima.L, which is the one I took first,

20
00:01:13,000 --> 00:01:15,000
and it was pretty nice.

21
00:01:15,000 --> 00:01:19,000
It has like a major mode, a minor mode, a nice ripple,

22
00:01:19,000 --> 00:01:23,000
but it also has some disadvantages.

23
00:01:23,000 --> 00:01:26,000
The first one is that it's quite outdated.

24
00:01:26,000 --> 00:01:29,000
I think it was from the 2007.

25
00:01:29,000 --> 00:01:32,000
So it's not tested with the Korean Emacs version,

26
00:01:32,000 --> 00:01:36,000
and the second one is that it doesn't use modern Emacs capability.

27
00:01:36,000 --> 00:01:40,000
I'm talking, for example, about the last or more latex preview

28
00:01:40,000 --> 00:01:44,000
from the last iMax 27.1, I think.

29
00:01:44,000 --> 00:01:48,000
And the last one is that it's not integrated with common third-party extension.

30
00:01:48,000 --> 00:01:51,000
I'm talking about company, for example, well, third-party.

31
00:01:51,000 --> 00:01:55,000
Yeah, you know, the Elpa Milpa packages.

32
00:01:55,000 --> 00:01:58,000
So this stock is going to be divided into parts.

33
00:01:58,000 --> 00:02:02,000
First one is going to be how much Maxima I made today in Max exercise.

34
00:02:02,000 --> 00:02:05,000
Don't worry, it's going to be quite easy.

35
00:02:05,000 --> 00:02:08,000
And the second one is going to be why for the package

36
00:02:08,000 --> 00:02:12,000
and the least improvement that I did, and a couple of things more,

37
00:02:12,000 --> 00:02:16,000
maybe the future and where's the package right now, if you can use it.

38
00:02:16,000 --> 00:02:19,000
So let's talk about the workflow.

39
00:02:19,000 --> 00:02:22,000
Right out of the box, it has like an almost super.

40
00:02:22,000 --> 00:02:27,000
I didn't write this. It was already in Emacs.

41
00:02:27,000 --> 00:02:32,000
So that's pretty nice. Let's go with a simple example.

42
00:02:32,000 --> 00:02:36,000
Okay, so this is an array of three equations and three variables.

43
00:02:36,000 --> 00:02:40,000
So it's a system that can be solved and the solution is unique.

44
00:02:40,000 --> 00:02:42,000
So we're going to solve it, right?

45
00:02:42,000 --> 00:02:46,000
Let's go. Solutions.

46
00:02:46,000 --> 00:02:50,000
Okay, here's how you define a variable in, let's call solve.

47
00:02:50,000 --> 00:02:55,000
Okay, let's call implicit.

48
00:02:55,000 --> 00:02:58,000
Oh, no, sorry.

49
00:02:58,000 --> 00:03:02,000
Okay, and now an array of variables.

50
00:03:02,000 --> 00:03:08,000
Okay, so first of all, we have to send this variable to the Maxima.

51
00:03:08,000 --> 00:03:14,000
We can do that with Ctrl C, Ctrl C, or with the Maxima.

52
00:03:14,000 --> 00:03:21,000
And then line. Okay, so let's put the Maxima buffer right here.

53
00:03:21,000 --> 00:03:26,000
Okay, so right now we can get the solution like this.

54
00:03:26,000 --> 00:03:30,000
So we call this line right now, Ctrl C, Ctrl C.

55
00:03:30,000 --> 00:03:33,000
As you can see, we get like an array inside an array,

56
00:03:33,000 --> 00:03:36,000
because let's see why we get this.

57
00:03:36,000 --> 00:03:41,000
So we can call Maxima help point.

58
00:03:41,000 --> 00:03:47,000
So open a doc buffer with all information about the solve function.

59
00:03:47,000 --> 00:03:51,000
So we can see that there's a list of solution equations.

60
00:03:51,000 --> 00:03:53,000
You can see it. Okay.

61
00:03:53,000 --> 00:03:57,000
So, but we know that the system only have one solution.

62
00:03:57,000 --> 00:03:59,000
So we're only interested in the first one.

63
00:03:59,000 --> 00:04:02,000
We can do this like pretty easily just to take the first one.

64
00:04:02,000 --> 00:04:05,000
We can send it to the buffer.

65
00:04:05,000 --> 00:04:08,000
So this is quite an easy example that you can see there to completion

66
00:04:08,000 --> 00:04:11,000
of the help facilities that we have.

67
00:04:11,000 --> 00:04:13,000
We can also get information about the symbol.

68
00:04:13,000 --> 00:04:16,000
For example, Maxima symbol doc.

69
00:04:16,000 --> 00:04:19,000
And we get in the, I don't know if you can see it correctly,

70
00:04:19,000 --> 00:04:25,000
in the mini buffer all the possible parameters of the function.

71
00:04:25,000 --> 00:04:28,000
So let's continue.

72
00:04:28,000 --> 00:04:30,000
Okay.

73
00:04:30,000 --> 00:04:34,000
So let's go to a more, well, complicated example, so to say.

74
00:04:34,000 --> 00:04:37,000
Oops. Okay.

75
00:04:37,000 --> 00:04:43,000
So we have this equation and we want to go from minus one to five.

76
00:04:43,000 --> 00:04:45,000
I want to show in a nice graph.

77
00:04:45,000 --> 00:04:46,000
Right.

78
00:04:46,000 --> 00:04:50,000
First of all, we begin sending this line to the Maxima repo.

79
00:04:50,000 --> 00:04:52,000
Put it in the bottom again.

80
00:04:52,000 --> 00:04:54,000
Okay.

81
00:04:54,000 --> 00:04:57,000
So this is not ideal if you want to write down this equation

82
00:04:57,000 --> 00:04:59,000
because it's quite messy.

83
00:04:59,000 --> 00:05:01,000
Where is when?

84
00:05:01,000 --> 00:05:03,000
So what's thing are where?

85
00:05:03,000 --> 00:05:05,000
I'm called the function Maxima.

86
00:05:05,000 --> 00:05:07,000
Let's say insert form.

87
00:05:07,000 --> 00:05:08,000
Okay.

88
00:05:08,000 --> 00:05:09,000
And this is more easy.

89
00:05:09,000 --> 00:05:14,000
This basically put text behind and led or more to render it.

90
00:05:14,000 --> 00:05:16,000
And this is why easy to write down.

91
00:05:16,000 --> 00:05:20,000
You can use it like in every expression.

92
00:05:20,000 --> 00:05:23,000
So first we have to call a library.

93
00:05:23,000 --> 00:05:26,000
Let's load the library.

94
00:05:26,000 --> 00:05:28,000
Library draw.

95
00:05:28,000 --> 00:05:32,000
So completion for local variable and local libraries.

96
00:05:32,000 --> 00:05:34,000
Sorry.

97
00:05:34,000 --> 00:05:36,000
Let me try to finish the draw.

98
00:05:36,000 --> 00:05:37,000
Okay.

99
00:05:37,000 --> 00:05:39,000
We send the line.

100
00:05:39,000 --> 00:05:42,000
So right now we have a leverage and we should even have auto completion

101
00:05:42,000 --> 00:05:44,000
for the library function.

102
00:05:44,000 --> 00:05:45,000
Okay.

103
00:05:45,000 --> 00:05:47,000
We have this called draw 2d.

104
00:05:47,000 --> 00:05:50,000
And now we can call implicit.

105
00:05:50,000 --> 00:05:51,000
We should have.

106
00:05:51,000 --> 00:05:52,000
Okay.

107
00:05:52,000 --> 00:05:55,000
And we can have input the variable of equations.

108
00:05:55,000 --> 00:05:57,000
We put the first variable.

109
00:05:57,000 --> 00:06:01,000
The minus five, the five.

110
00:06:01,000 --> 00:06:02,000
Five.

111
00:06:02,000 --> 00:06:06,000
The V variable, the minus five and the five.

112
00:06:06,000 --> 00:06:07,000
Okay.

113
00:06:07,000 --> 00:06:08,000
It should be all.

114
00:06:08,000 --> 00:06:09,000
All good.

115
00:06:09,000 --> 00:06:11,000
So let me try to send it.

116
00:06:11,000 --> 00:06:12,000
Okay.

117
00:06:12,000 --> 00:06:14,000
You cannot see it right now.

118
00:06:14,000 --> 00:06:16,000
Because I'm just sharing the maximum screen.

119
00:06:16,000 --> 00:06:19,000
Let me try to change that.

120
00:06:19,000 --> 00:06:23,000
Okay.

121
00:06:23,000 --> 00:06:24,000
Okay.

122
00:06:24,000 --> 00:06:25,000
Can you plot?

123
00:06:25,000 --> 00:06:26,000
Hello.

124
00:06:31,000 --> 00:06:32,000
Okay.

125
00:06:32,000 --> 00:06:35,000
So this is basically the graph that can you plot generates.

126
00:06:35,000 --> 00:06:38,000
Right now it's not integrated into.

127
00:06:38,000 --> 00:06:42,000
Into the maximum package, but it's a work in progress.

128
00:06:42,000 --> 00:06:45,000
So let's go back to e-max.

129
00:06:45,000 --> 00:06:47,000
Where are you?

130
00:06:47,000 --> 00:06:48,000
Okay.

131
00:06:48,000 --> 00:06:50,000
Okay.

132
00:06:50,000 --> 00:06:51,000
Okay.

133
00:06:51,000 --> 00:06:55,000
So, um, let's continue.

134
00:06:55,000 --> 00:07:00,000
So, uh, this is some of the things that you can use for you day to day programming in

135
00:07:00,000 --> 00:07:01,000
maxima.

136
00:07:01,000 --> 00:07:05,000
Um, let's go now with the.

137
00:07:05,000 --> 00:07:06,000
Okay.

138
00:07:06,000 --> 00:07:09,000
As you can see, this is just text that is rendered.

139
00:07:09,000 --> 00:07:10,000
Okay.

140
00:07:10,000 --> 00:07:11,000
Let's go with the next slide.

141
00:07:11,000 --> 00:07:13,000
This is how I use maxima a simple example.

142
00:07:13,000 --> 00:07:18,000
We don't want to talk too much about it because everyone used the package in a different way.

143
00:07:18,000 --> 00:07:22,000
So we're now going to talk about the original package and the way I change it.

144
00:07:22,000 --> 00:07:23,000
Right.

145
00:07:23,000 --> 00:07:29,000
So the documentation, uh, of the original was great, but for me, it wasn't embedded in

146
00:07:29,000 --> 00:07:30,000
the code.

147
00:07:30,000 --> 00:07:32,000
It wasn't something sometimes hard to read.

148
00:07:32,000 --> 00:07:35,000
Like it was like a big chunk of comment.

149
00:07:35,000 --> 00:07:37,000
Give me all the information.

150
00:07:37,000 --> 00:07:40,000
Like, um, for me, that's too much.

151
00:07:40,000 --> 00:07:46,000
I prefer a cohesive, small, um, comment and then a big read me with ordered all the links

152
00:07:46,000 --> 00:07:47,000
and information.

153
00:07:47,000 --> 00:07:50,000
So that's one of the first thing I change.

154
00:07:50,000 --> 00:07:51,000
Um, then also completion.

155
00:07:51,000 --> 00:07:52,000
I'm a big fan.

156
00:07:52,000 --> 00:07:54,000
I'm used to slime.

157
00:07:54,000 --> 00:07:57,000
So, um, I love beta to completion.

158
00:07:57,000 --> 00:08:01,000
So, um, the first thing that I noticed that, well, it uses an absolute function.

159
00:08:01,000 --> 00:08:03,000
I don't know if you can see correctly.

160
00:08:03,000 --> 00:08:04,000
Okay.

161
00:08:04,000 --> 00:08:10,000
Um, coming dynamic is deprecated and it also have like this, uh, variable, which is maxima

162
00:08:10,000 --> 00:08:15,000
symbol, which is basically a big, uh, list of all the possible completion.

163
00:08:15,000 --> 00:08:21,000
So, uh, if I load the library, it's not aware of the new symbols, or even if I create a

164
00:08:21,000 --> 00:08:23,000
variable, it's not loaded.

165
00:08:23,000 --> 00:08:24,000
So it's not dynamic.

166
00:08:24,000 --> 00:08:27,000
So I want the first thing I want is dynamic completion.

167
00:08:27,000 --> 00:08:28,000
Right.

168
00:08:28,000 --> 00:08:31,000
So I improve it, which it wasn't that hard.

169
00:08:31,000 --> 00:08:36,000
I first of all create maximum gets completion, which we're going to see in a moment.

170
00:08:36,000 --> 00:08:38,000
And then I change is complete in the region.

171
00:08:38,000 --> 00:08:43,000
So this is the improved version, but the good thing is like I decoupled the completion

172
00:08:43,000 --> 00:08:44,000
function.

173
00:08:44,000 --> 00:08:46,000
So I make that again, using all your own.

174
00:08:46,000 --> 00:08:53,000
So you get a prefix, which is, um, like the thing that you're going to auto complete,

175
00:08:53,000 --> 00:08:58,000
you get the inferior process, which I'm going to talk about later, but basically it's a

176
00:08:58,000 --> 00:09:00,000
maximum process you can work with.

177
00:09:00,000 --> 00:09:03,000
And you get an optional argument, which is fuzzy finding.

178
00:09:03,000 --> 00:09:04,000
Okay.

179
00:09:04,000 --> 00:09:11,000
So you can easily send a block here with, uh, with the approach, which is a maximum command

180
00:09:11,000 --> 00:09:13,000
that gets you all the auto completion.

181
00:09:13,000 --> 00:09:20,000
And then you process the, the output and you return, uh, a list of possible completion.

182
00:09:20,000 --> 00:09:23,000
This function can be easily put into company.

183
00:09:23,000 --> 00:09:27,000
As you can see, just get maximum cellular inferior process.

184
00:09:27,000 --> 00:09:30,000
It's a process that just, uh, uses.

185
00:09:30,000 --> 00:09:31,000
Sorry.

186
00:09:31,000 --> 00:09:35,000
I have all the approach and the get that symbol.

187
00:09:35,000 --> 00:09:38,000
It's like a, like I say, axillary lights.

188
00:09:38,000 --> 00:09:41,000
Help me, uh, for all that dirty stuff.

189
00:09:41,000 --> 00:09:43,000
So, and process manipulation.

190
00:09:43,000 --> 00:09:48,000
Let's talk about how the maximum process was in the beginning.

191
00:09:48,000 --> 00:09:53,000
So at first it was just one process and you send all of the things there and you move

192
00:09:53,000 --> 00:09:55,000
the process here and there.

193
00:09:55,000 --> 00:09:58,000
And there was a global state, right?

194
00:09:58,000 --> 00:10:01,000
So all the function depends on variable variables.

195
00:10:01,000 --> 00:10:03,000
Um, I don't like that approach.

196
00:10:03,000 --> 00:10:10,000
I prefer more like a short to say functional, like you sense one things and you return something.

197
00:10:10,000 --> 00:10:13,000
So it's not like avoid functions or to say.

198
00:10:13,000 --> 00:10:15,000
So I change it drastically.

199
00:10:15,000 --> 00:10:18,000
Uh, well, this is the maximum start function now.

200
00:10:18,000 --> 00:10:23,000
It just create, uh, start a process with this function, which is maximum making failure.

201
00:10:23,000 --> 00:10:30,000
So this function just, uh, uh, gets a name and it returned a process of maximum and you

202
00:10:30,000 --> 00:10:32,000
can then manipulate it the way you want.

203
00:10:32,000 --> 00:10:34,000
Let's see a better version.

204
00:10:34,000 --> 00:10:36,000
So this is the opposite, right?

205
00:10:36,000 --> 00:10:41,000
This remove an inferior process and delete the process and kill the buffer.

206
00:10:41,000 --> 00:10:42,000
Right?

207
00:10:42,000 --> 00:10:43,000
So let's give it an example.

208
00:10:43,000 --> 00:10:46,000
Cause this, you can see it pretty easily in this example.

209
00:10:46,000 --> 00:10:51,000
So, uh, I want to go to the scratch buffer, which I think you can see better.

210
00:10:51,000 --> 00:10:52,000
Okay.

211
00:10:52,000 --> 00:10:57,000
So, uh, this is the way you can get a process with your name and save it into a variable.

212
00:10:57,000 --> 00:10:58,000
Right?

213
00:10:58,000 --> 00:10:59,000
Let's execute this.

214
00:10:59,000 --> 00:11:03,000
So as you can see, well, I don't know if you can see big, you get a process.

215
00:11:03,000 --> 00:11:05,000
Let's go to it.

216
00:11:05,000 --> 00:11:08,000
The process called my maxima as the buffer.

217
00:11:08,000 --> 00:11:09,000
Right?

218
00:11:09,000 --> 00:11:11,000
And if we can, you can send the stuff to the process.

219
00:11:11,000 --> 00:11:12,000
Right?

220
00:11:12,000 --> 00:11:17,000
We can call maxima send block, get a blog of pallid maxima code and just pass the variable

221
00:11:17,000 --> 00:11:20,000
the process and we send code to the process.

222
00:11:20,000 --> 00:11:21,000
Right?

223
00:11:21,000 --> 00:11:22,000
We can, uh, this is youthful.

224
00:11:22,000 --> 00:11:27,000
You have some expensive computation that you want to process as synchrony.

225
00:11:27,000 --> 00:11:30,000
So to say, so the process can manage it.

226
00:11:30,000 --> 00:11:34,000
And when you get the results correctly, you can also get the results from the process.

227
00:11:34,000 --> 00:11:37,000
I mean, I don't put it here, but it's quite easy.

228
00:11:37,000 --> 00:11:43,000
And then you remove the inferior, which is the way to get rid of the process and the

229
00:11:43,000 --> 00:11:44,000
buffer.

230
00:11:44,000 --> 00:11:48,000
So if we call this function, we should get rid of the process and it works.

231
00:11:48,000 --> 00:11:50,000
The person is no longer.

232
00:11:50,000 --> 00:11:52,000
I'm happy to continue.

233
00:11:52,000 --> 00:11:56,000
So, um, other things that improve the package.

234
00:11:56,000 --> 00:11:58,000
I'm doing time.

235
00:11:58,000 --> 00:11:59,000
Okay.

236
00:11:59,000 --> 00:12:03,000
Another thing that I did to the package was to add a continue integration and continue

237
00:12:03,000 --> 00:12:04,000
delivery.

238
00:12:04,000 --> 00:12:05,000
Right?

239
00:12:05,000 --> 00:12:09,000
So the package didn't have any tests and the code was a little bit messy.

240
00:12:09,000 --> 00:12:18,000
So I, um, add integration at test and test with the test simple framework from Rocky

241
00:12:18,000 --> 00:12:23,000
bursting, the maintainer of real good, which is a great package by the way.

242
00:12:23,000 --> 00:12:26,000
Um, yeah, this is one example of the process.

243
00:12:26,000 --> 00:12:31,000
So right now, cause, um, the infrastructure of the process management is the couple.

244
00:12:31,000 --> 00:12:33,000
So I can test it pretty easily.

245
00:12:33,000 --> 00:12:36,000
This is the test function of the inferior running.

246
00:12:36,000 --> 00:12:39,000
So I can check if an inferior is running right now.

247
00:12:39,000 --> 00:12:43,000
And I can just delete it after and get the results.

248
00:12:43,000 --> 00:12:46,000
And I also did some integration with the party packages.

249
00:12:46,000 --> 00:12:48,000
The first one company, of course, I love auto completion.

250
00:12:48,000 --> 00:12:51,000
The second one was our mold that was already there.

251
00:12:51,000 --> 00:12:56,000
And Lattec with the, um, or Latin Lattec insert form.

252
00:12:56,000 --> 00:13:01,000
And with poly mode, cause, um, let me evaluate this.

253
00:13:01,000 --> 00:13:03,000
Maxima can understand list code.

254
00:13:03,000 --> 00:13:10,000
Well, more or less, he has to like a function, so to say, that you can send a list command

255
00:13:10,000 --> 00:13:12,000
to the Maxima rebel.

256
00:13:12,000 --> 00:13:14,000
And you can understand it in some way.

257
00:13:14,000 --> 00:13:19,000
So we can go to the Maxima, Paulie, Paulie, Maxima, right?

258
00:13:19,000 --> 00:13:24,000
You enable Paulie Maxima and it creates a poly mode, which this is list code.

259
00:13:24,000 --> 00:13:26,000
And this is Maxima code.

260
00:13:26,000 --> 00:13:28,000
So we can send this to the Maxima rebel.

261
00:13:28,000 --> 00:13:36,000
We come to C control art, which it send the, um, the Kurem, um, area, region.

262
00:13:36,000 --> 00:13:37,000
Sorry.

263
00:13:37,000 --> 00:13:40,000
And we define a variable with, which is called test.

264
00:13:40,000 --> 00:13:42,000
And as we can see, we have the variable test right here.

265
00:13:42,000 --> 00:13:47,000
So you can, uh, program in list, uh, and you can send it to Maxima.

266
00:13:48,000 --> 00:13:49,000
So this is pretty good.

267
00:13:49,000 --> 00:13:50,000
Pretty nice.

268
00:13:50,000 --> 00:13:54,000
Um, working integration with this line mode and with shrunk.

269
00:13:54,000 --> 00:14:00,000
So you can actually have a sort of completion of, uh, function inside the Maxima list package.

270
00:14:00,000 --> 00:14:03,000
But this is going to take quite a while.

271
00:14:03,000 --> 00:14:04,000
That's not trivial.

272
00:14:04,000 --> 00:14:08,000
So, um, what are the features of Maxima right now?

273
00:14:08,000 --> 00:14:11,000
Well, we have phones highlighting smart indentation.

274
00:14:11,000 --> 00:14:14,000
Uh, it was already in the package, but now it's quite better.

275
00:14:14,000 --> 00:14:16,000
Uh, great help functions right now.

276
00:14:16,000 --> 00:14:20,000
Uh, you can find the documentation quite fast and currently they menu integration.

277
00:14:20,000 --> 00:14:21,000
This is quite basic.

278
00:14:21,000 --> 00:14:25,000
It needs to be a little bit improved, uh, latex support, auto completion, local company,

279
00:14:25,000 --> 00:14:28,000
and maximum process integration and mini buffer.

280
00:14:28,000 --> 00:14:34,000
I didn't show you, but basically if you call global Maxima minor mode, you have the minor

281
00:14:34,000 --> 00:14:36,000
mode and you call Maxima mini buffer.

282
00:14:36,000 --> 00:14:37,000
How are you?

283
00:14:37,000 --> 00:14:38,000
Okay.

284
00:14:38,000 --> 00:14:42,000
Maybe for you can basically use a right simple Maxima command and it will give you the

285
00:14:42,000 --> 00:14:43,000
results.

286
00:14:43,000 --> 00:14:46,000
This is like a program version of, um, calc.

287
00:14:46,000 --> 00:14:48,000
So you can, okay.

288
00:14:48,000 --> 00:14:49,000
Yeah.

289
00:14:49,000 --> 00:14:51,000
You write the command and you get the output way more to come.

290
00:14:51,000 --> 00:14:57,000
I have like a list of, um, issues that I put enhancements and new features that I'm going

291
00:14:57,000 --> 00:14:59,000
to develop.

292
00:14:59,000 --> 00:15:02,000
So, uh, the future and the present of the package.

293
00:15:02,000 --> 00:15:05,000
Well, the package is right now Melpa, uh, Melpa stable.

294
00:15:05,000 --> 00:15:10,000
Um, Melpa stable is in the zero point seven point six version.

295
00:15:10,000 --> 00:15:15,000
And I'm planning to include into the non-genu Elpa.

296
00:15:15,000 --> 00:15:17,000
This is the URL of the package by the way.

297
00:15:17,000 --> 00:15:21,000
So you can, if you go to Melpa, you put Maxima and you can download it.

298
00:15:21,000 --> 00:15:23,000
Uh, it doesn't have too much dependencies.

299
00:15:23,000 --> 00:15:25,000
You're aware of that.

300
00:15:25,000 --> 00:15:27,000
Um, and thank you very much.

301
00:15:27,000 --> 00:15:28,000
Uh, this is going to be my talk.

302
00:15:28,000 --> 00:15:30,000
These are my, uh, information.

303
00:15:30,000 --> 00:15:32,000
This is my kid lab.

304
00:15:32,000 --> 00:15:34,000
This is my page, which I don't love too much.

305
00:15:34,000 --> 00:15:36,000
And this is my email.

306
00:15:36,000 --> 00:15:39,000
So, um, thank you very much.

307
00:15:39,000 --> 00:15:43,000
And I will be answering some questions right now and happy hacking.

308
00:15:48,000 --> 00:15:51,000
Thank you very much for the great talk.

309
00:15:51,000 --> 00:15:55,000
Um, yeah, let's see if we have any questions.

310
00:15:55,000 --> 00:15:56,000
Yeah.

311
00:15:56,000 --> 00:15:58,000
I'm reading like this.

312
00:15:58,000 --> 00:16:01,000
Um, so I'm a body of each other user right now.

313
00:16:01,000 --> 00:16:03,000
Okay.

314
00:16:04,000 --> 00:16:06,000
Maximum of each other.

315
00:16:06,000 --> 00:16:07,000
Yep.

316
00:16:07,000 --> 00:16:08,000
There are a couple of questions.

317
00:16:09,000 --> 00:16:10,000
Wow.

318
00:16:10,000 --> 00:16:11,000
Maximum of October.

319
00:16:11,000 --> 00:16:14,000
I don't want to, I don't know Octave that much.

320
00:16:14,000 --> 00:16:19,000
Um, like I use it like a couple of time, but I'm not happy.

321
00:16:19,000 --> 00:16:26,000
And I found the, um, Octave package to be quite a little bit harder to

322
00:16:26,000 --> 00:16:27,000
understand.

323
00:16:27,000 --> 00:16:34,000
Um, also that, um, it didn't have too much features.

324
00:16:34,000 --> 00:16:37,000
Like I prefer the maximum used to maybe Octave is better.

325
00:16:37,000 --> 00:16:39,000
I don't, I'm not a hundred percent sure.

326
00:16:39,000 --> 00:16:43,000
I know that you can use it for similar stuff, but that's it.

327
00:16:43,000 --> 00:16:44,000
So, sorry.

328
00:16:47,000 --> 00:16:48,000
Oh, okay.

329
00:16:48,000 --> 00:16:50,000
I mean, a little bit of a rush.

330
00:16:50,000 --> 00:16:51,000
Sorry.

331
00:16:51,000 --> 00:16:53,000
Let me drink a little blue.

332
00:16:53,000 --> 00:16:54,000
Okay.

333
00:16:54,000 --> 00:16:55,000
Okay.

334
00:16:55,000 --> 00:16:56,000
Okay.

335
00:17:01,000 --> 00:17:02,000
Okay.

336
00:17:03,000 --> 00:17:06,000
How does Maxima compare to Sage math in Emacs?

337
00:17:09,000 --> 00:17:14,000
I mean, I don't know what is Sage math.

338
00:17:14,000 --> 00:17:15,000
I'm sorry.

339
00:17:15,000 --> 00:17:19,000
Um, so I cannot answer your squinch with your question.

340
00:17:19,000 --> 00:17:20,000
I think.

341
00:17:22,000 --> 00:17:23,000
Sorry.

342
00:17:23,000 --> 00:17:26,000
But I mean, Maxima is ready in Como List.

343
00:17:26,000 --> 00:17:28,000
That's just a preference for me because I like, uh,

344
00:17:28,000 --> 00:17:32,000
a list dialect and Camel is interesting.

345
00:17:32,000 --> 00:17:37,000
Um, yeah.

346
00:17:37,000 --> 00:17:43,000
Uh, do you plan to have a maximum for session for Maxima code

347
00:17:43,000 --> 00:17:44,000
block?

348
00:17:44,000 --> 00:17:45,000
Yes.

349
00:17:45,000 --> 00:17:50,000
I want to improve the, um, of Maxima package,

350
00:17:50,000 --> 00:17:53,000
but I didn't have enough time and I want to clear a little bit of

351
00:17:53,000 --> 00:17:57,000
the code because still right now, um,

352
00:17:58,000 --> 00:18:01,000
uh, the code is quite messy in some areas because I pretty much

353
00:18:01,000 --> 00:18:03,000
implement first the basic function.

354
00:18:03,000 --> 00:18:05,000
I want to build in top off.

355
00:18:05,000 --> 00:18:06,000
So right now it's quite usable,

356
00:18:06,000 --> 00:18:08,000
but it's still have some things that I want to improve.

357
00:18:08,000 --> 00:18:11,000
So when I finish that, I will, um,

358
00:18:11,000 --> 00:18:13,000
improve the normal version.

359
00:18:13,000 --> 00:18:17,000
I think it maximized it to get into, into your video.

360
00:18:17,000 --> 00:18:18,000
Yes.

361
00:18:18,000 --> 00:18:23,000
Uh, I think that the creator of Maxima like have this list, uh,

362
00:18:23,000 --> 00:18:28,000
mine and probably, uh, um, that they,

363
00:18:28,000 --> 00:18:32,000
if you go to a symbol, you get all the information and that reflect

364
00:18:32,000 --> 00:18:36,000
that you can actually write your program of Maxima into,

365
00:18:36,000 --> 00:18:41,000
um, into list literally cause they have a command.

366
00:18:41,000 --> 00:18:43,000
So I think that is quite easy to get into.

367
00:18:43,000 --> 00:18:49,000
So many versions they use it for, um, first, um, years.

368
00:18:49,000 --> 00:18:50,000
So it is quite easy.

369
00:18:50,000 --> 00:18:54,000
And I think with my package, you can use it like pretty,

370
00:18:54,000 --> 00:18:55,000
pretty easily.

371
00:18:55,000 --> 00:18:59,000
Just create a file and you can start typing and Maxima quite easy

372
00:18:59,000 --> 00:19:00,000
to install also.

373
00:19:00,000 --> 00:19:03,000
So I think, yeah, it is quite easy.

374
00:19:03,000 --> 00:19:05,000
And the page, the page should restart.

375
00:19:05,000 --> 00:19:07,000
I don't know why.

376
00:19:07,000 --> 00:19:08,000
Sorry.

377
00:19:09,000 --> 00:19:10,000
Okay.

378
00:19:10,000 --> 00:19:13,000
Uh, Maxima seems to have strict infix listener.

379
00:19:13,000 --> 00:19:14,000
Hmm.

380
00:19:14,000 --> 00:19:19,000
Uh, infix strict infix.

381
00:19:19,000 --> 00:19:21,000
Infix list syntax.

382
00:19:21,000 --> 00:19:27,000
Um, you're talking about the Maxima itself syntax or I don't

383
00:19:27,000 --> 00:19:28,000
understand the question.

384
00:19:28,000 --> 00:19:34,000
Well, I going to go to the next question.

385
00:19:34,000 --> 00:19:37,000
Is there a support for images in Maxima mode?

386
00:19:37,000 --> 00:19:38,000
Not right now.

387
00:19:38,000 --> 00:19:46,000
Uh, the way I want to implement some IMAX, um, things.

388
00:19:47,000 --> 00:19:51,000
Uh, is there a support for, but right now it doesn't have like,

389
00:19:51,000 --> 00:19:55,000
uh, if you want to have a new plot, um, inside your buffer right now,

390
00:19:55,000 --> 00:19:56,000
it's not possible.

391
00:19:56,000 --> 00:20:01,000
So that's the thing that I Maxima does that Maxima.l still doesn't

392
00:20:01,000 --> 00:20:04,000
do which university you start to use Maxima.

393
00:20:04,000 --> 00:20:10,000
Um, in the Saragossa university from Spain, they use Maxima in

394
00:20:10,000 --> 00:20:15,000
the, um, thing in the engineer and in the math also.

395
00:20:15,000 --> 00:20:19,000
So not 100% sure right now, but when I started, are you planning

396
00:20:19,000 --> 00:20:21,000
to open your package into Maxima?

397
00:20:21,000 --> 00:20:26,000
Um, I don't know about that because, um, maybe can be a little bit messy.

398
00:20:26,000 --> 00:20:32,000
Um, because the Maxima repel is more built around like Maxima

399
00:20:32,000 --> 00:20:37,000
itself and they don't update the interfaces that much.

400
00:20:37,000 --> 00:20:38,000
I have no problem.

401
00:20:38,000 --> 00:20:40,000
Like it's okay.

402
00:20:40,000 --> 00:20:45,000
It just, um, you just have to, um, if you want to push,

403
00:20:45,000 --> 00:20:47,000
you can push in other repository.

404
00:20:47,000 --> 00:20:51,000
I mean, it's just changed the file in other way, but also the

405
00:20:51,000 --> 00:20:54,000
test, um, it's going to be a little bit harder because I think

406
00:20:54,000 --> 00:21:00,000
they're using, uh, search for, um, I'm using, uh, kid lab, uh,

407
00:21:00,000 --> 00:21:02,000
continue integration with you in delivery.

408
00:21:02,000 --> 00:21:08,000
So yeah, I don't think that, but it will, yeah, it will be nice.

409
00:21:11,000 --> 00:21:12,000
Okay.

410
00:21:12,000 --> 00:21:14,000
Um, it's possible to include maximizing or files,

411
00:21:14,000 --> 00:21:16,000
similar to Jupyter notebooks.

412
00:21:16,000 --> 00:21:20,000
Um, I mean, you can, uh, use Maxima in your,

413
00:21:20,000 --> 00:21:24,000
or, uh, files and you have Maxima.l mode integrated.

414
00:21:24,000 --> 00:21:28,000
And you can like create, uh, put that code in a buffer and then,

415
00:21:28,000 --> 00:21:34,000
uh, um, uh, edit it correctly, but it is now not,

416
00:21:34,000 --> 00:21:37,000
it doesn't have like all the features like all the languages

417
00:21:37,000 --> 00:21:41,000
because right now, uh, as my understanding is quite basic.

418
00:21:41,000 --> 00:21:46,000
So I still have some, still need some, some stuff, some workaround.

419
00:21:48,000 --> 00:21:49,000
Okay.

420
00:21:49,000 --> 00:21:50,000
I think that's it.

421
00:21:56,000 --> 00:21:57,000
Yep.

422
00:21:57,000 --> 00:21:58,000
So that's it.

423
00:21:58,000 --> 00:22:02,000
Uh, thank you very much for your live talk and for,

424
00:22:02,000 --> 00:22:03,000
you know, the live Q&A.

425
00:22:04,000 --> 00:22:05,000
Thank you.

426
00:22:05,000 --> 00:22:06,000
Thank you all.

427
00:22:06,000 --> 00:22:07,000
Amazing.

428
00:22:08,000 --> 00:22:09,000
Cheers.

429
00:22:09,000 --> 00:22:10,000
Thank you.

430
00:22:10,000 --> 00:22:11,000
It's thanks to all you guys.

431
00:22:11,000 --> 00:22:12,000
It's awesome.

432
00:22:12,000 --> 00:22:13,000
Okay.

433
00:22:13,000 --> 00:22:14,000
Thank you.

434
00:22:14,000 --> 00:22:15,000
Cheers.

435
00:22:15,000 --> 00:22:16,000
Bye.

436
00:22:16,000 --> 00:22:17,000
Bye.

