WEBVTT

00:00.000 --> 00:03.000
You are now unmuted.

00:03.000 --> 00:06.000
Okay, can you guys hear me?

00:06.000 --> 00:09.000
Yeah, can you guys hear me too?

00:09.000 --> 00:13.000
Yep, I can, and you're live, so take it away.

00:13.000 --> 00:17.000
Okay, so hello everyone, my name is Fermin.

00:17.000 --> 00:20.000
I'm a programmer math student from Spain.

00:20.000 --> 00:24.000
I've been using Emacs for two years now, more or less,

00:24.000 --> 00:29.000
and today I'm going to talk about Maxima Computer Algebra System into Emacs.

00:29.000 --> 00:32.000
So, let's talk about what is Maxima?

00:32.000 --> 00:36.000
Well, Maxima is a system for manipulation of symbolic and numerical expression.

00:36.000 --> 00:41.000
It's similar in some regard to Octave, and it's also free software.

00:41.000 --> 00:45.000
It's derived from the Maxima from the M-A-T from the M-A-T,

00:45.000 --> 00:50.000
and it's written in common Lisp, which is a language that I really like and enjoy writing.

00:50.000 --> 00:52.000
So for me, it's a plus.

00:52.000 --> 00:56.000
So, let's talk about the initial support for Maxima.

00:56.000 --> 00:59.000
When I first started using it, I looked for support into Emacs,

00:59.000 --> 01:04.000
and I found that there's two major modes in the main repository of Maxima.

01:04.000 --> 01:09.000
For Emacs, the first one is iMaxima, which I don't know too much about it,

01:09.000 --> 01:13.000
and the second one is Maxima.L, which is the one I took first,

01:13.000 --> 01:15.000
and it was pretty nice.

01:15.000 --> 01:19.000
It has like a major mode, a minor mode, a nice ripple,

01:19.000 --> 01:23.000
but it also has some disadvantages.

01:23.000 --> 01:26.000
The first one is that it's quite outdated.

01:26.000 --> 01:29.000
I think it was from the 2007.

01:29.000 --> 01:32.000
So it's not tested with the Korean Emacs version,

01:32.000 --> 01:36.000
and the second one is that it doesn't use modern Emacs capability.

01:36.000 --> 01:40.000
I'm talking, for example, about the last or more latex preview

01:40.000 --> 01:44.000
from the last iMax 27.1, I think.

01:44.000 --> 01:48.000
And the last one is that it's not integrated with common third-party extension.

01:48.000 --> 01:51.000
I'm talking about company, for example, well, third-party.

01:51.000 --> 01:55.000
Yeah, you know, the Elpa Milpa packages.

01:55.000 --> 01:58.000
So this stock is going to be divided into parts.

01:58.000 --> 02:02.000
First one is going to be how much Maxima I made today in Max exercise.

02:02.000 --> 02:05.000
Don't worry, it's going to be quite easy.

02:05.000 --> 02:08.000
And the second one is going to be why for the package

02:08.000 --> 02:12.000
and the least improvement that I did, and a couple of things more,

02:12.000 --> 02:16.000
maybe the future and where's the package right now, if you can use it.

02:16.000 --> 02:19.000
So let's talk about the workflow.

02:19.000 --> 02:22.000
Right out of the box, it has like an almost super.

02:22.000 --> 02:27.000
I didn't write this. It was already in Emacs.

02:27.000 --> 02:32.000
So that's pretty nice. Let's go with a simple example.

02:32.000 --> 02:36.000
Okay, so this is an array of three equations and three variables.

02:36.000 --> 02:40.000
So it's a system that can be solved and the solution is unique.

02:40.000 --> 02:42.000
So we're going to solve it, right?

02:42.000 --> 02:46.000
Let's go. Solutions.

02:46.000 --> 02:50.000
Okay, here's how you define a variable in, let's call solve.

02:50.000 --> 02:55.000
Okay, let's call implicit.

02:55.000 --> 02:58.000
Oh, no, sorry.

02:58.000 --> 03:02.000
Okay, and now an array of variables.

03:02.000 --> 03:08.000
Okay, so first of all, we have to send this variable to the Maxima.

03:08.000 --> 03:14.000
We can do that with Ctrl C, Ctrl C, or with the Maxima.

03:14.000 --> 03:21.000
And then line. Okay, so let's put the Maxima buffer right here.

03:21.000 --> 03:26.000
Okay, so right now we can get the solution like this.

03:26.000 --> 03:30.000
So we call this line right now, Ctrl C, Ctrl C.

03:30.000 --> 03:33.000
As you can see, we get like an array inside an array,

03:33.000 --> 03:36.000
because let's see why we get this.

03:36.000 --> 03:41.000
So we can call Maxima help point.

03:41.000 --> 03:47.000
So open a doc buffer with all information about the solve function.

03:47.000 --> 03:51.000
So we can see that there's a list of solution equations.

03:51.000 --> 03:53.000
You can see it. Okay.

03:53.000 --> 03:57.000
So, but we know that the system only have one solution.

03:57.000 --> 03:59.000
So we're only interested in the first one.

03:59.000 --> 04:02.000
We can do this like pretty easily just to take the first one.

04:02.000 --> 04:05.000
We can send it to the buffer.

04:05.000 --> 04:08.000
So this is quite an easy example that you can see there to completion

04:08.000 --> 04:11.000
of the help facilities that we have.

04:11.000 --> 04:13.000
We can also get information about the symbol.

04:13.000 --> 04:16.000
For example, Maxima symbol doc.

04:16.000 --> 04:19.000
And we get in the, I don't know if you can see it correctly,

04:19.000 --> 04:25.000
in the mini buffer all the possible parameters of the function.

04:25.000 --> 04:28.000
So let's continue.

04:28.000 --> 04:30.000
Okay.

04:30.000 --> 04:34.000
So let's go to a more, well, complicated example, so to say.

04:34.000 --> 04:37.000
Oops. Okay.

04:37.000 --> 04:43.000
So we have this equation and we want to go from minus one to five.

04:43.000 --> 04:45.000
I want to show in a nice graph.

04:45.000 --> 04:46.000
Right.

04:46.000 --> 04:50.000
First of all, we begin sending this line to the Maxima repo.

04:50.000 --> 04:52.000
Put it in the bottom again.

04:52.000 --> 04:54.000
Okay.

04:54.000 --> 04:57.000
So this is not ideal if you want to write down this equation

04:57.000 --> 04:59.000
because it's quite messy.

04:59.000 --> 05:01.000
Where is when?

05:01.000 --> 05:03.000
So what's thing are where?

05:03.000 --> 05:05.000
I'm called the function Maxima.

05:05.000 --> 05:07.000
Let's say insert form.

05:07.000 --> 05:08.000
Okay.

05:08.000 --> 05:09.000
And this is more easy.

05:09.000 --> 05:14.000
This basically put text behind and led or more to render it.

05:14.000 --> 05:16.000
And this is why easy to write down.

05:16.000 --> 05:20.000
You can use it like in every expression.

05:20.000 --> 05:23.000
So first we have to call a library.

05:23.000 --> 05:26.000
Let's load the library.

05:26.000 --> 05:28.000
Library draw.

05:28.000 --> 05:32.000
So completion for local variable and local libraries.

05:32.000 --> 05:34.000
Sorry.

05:34.000 --> 05:36.000
Let me try to finish the draw.

05:36.000 --> 05:37.000
Okay.

05:37.000 --> 05:39.000
We send the line.

05:39.000 --> 05:42.000
So right now we have a leverage and we should even have auto completion

05:42.000 --> 05:44.000
for the library function.

05:44.000 --> 05:45.000
Okay.

05:45.000 --> 05:47.000
We have this called draw 2d.

05:47.000 --> 05:50.000
And now we can call implicit.

05:50.000 --> 05:51.000
We should have.

05:51.000 --> 05:52.000
Okay.

05:52.000 --> 05:55.000
And we can have input the variable of equations.

05:55.000 --> 05:57.000
We put the first variable.

05:57.000 --> 06:01.000
The minus five, the five.

06:01.000 --> 06:02.000
Five.

06:02.000 --> 06:06.000
The V variable, the minus five and the five.

06:06.000 --> 06:07.000
Okay.

06:07.000 --> 06:08.000
It should be all.

06:08.000 --> 06:09.000
All good.

06:09.000 --> 06:11.000
So let me try to send it.

06:11.000 --> 06:12.000
Okay.

06:12.000 --> 06:14.000
You cannot see it right now.

06:14.000 --> 06:16.000
Because I'm just sharing the maximum screen.

06:16.000 --> 06:19.000
Let me try to change that.

06:19.000 --> 06:23.000
Okay.

06:23.000 --> 06:24.000
Okay.

06:24.000 --> 06:25.000
Can you plot?

06:25.000 --> 06:26.000
Hello.

06:31.000 --> 06:32.000
Okay.

06:32.000 --> 06:35.000
So this is basically the graph that can you plot generates.

06:35.000 --> 06:38.000
Right now it's not integrated into.

06:38.000 --> 06:42.000
Into the maximum package, but it's a work in progress.

06:42.000 --> 06:45.000
So let's go back to e-max.

06:45.000 --> 06:47.000
Where are you?

06:47.000 --> 06:48.000
Okay.

06:48.000 --> 06:50.000
Okay.

06:50.000 --> 06:51.000
Okay.

06:51.000 --> 06:55.000
So, um, let's continue.

06:55.000 --> 07:00.000
So, uh, this is some of the things that you can use for you day to day programming in

07:00.000 --> 07:01.000
maxima.

07:01.000 --> 07:05.000
Um, let's go now with the.

07:05.000 --> 07:06.000
Okay.

07:06.000 --> 07:09.000
As you can see, this is just text that is rendered.

07:09.000 --> 07:10.000
Okay.

07:10.000 --> 07:11.000
Let's go with the next slide.

07:11.000 --> 07:13.000
This is how I use maxima a simple example.

07:13.000 --> 07:18.000
We don't want to talk too much about it because everyone used the package in a different way.

07:18.000 --> 07:22.000
So we're now going to talk about the original package and the way I change it.

07:22.000 --> 07:23.000
Right.

07:23.000 --> 07:29.000
So the documentation, uh, of the original was great, but for me, it wasn't embedded in

07:29.000 --> 07:30.000
the code.

07:30.000 --> 07:32.000
It wasn't something sometimes hard to read.

07:32.000 --> 07:35.000
Like it was like a big chunk of comment.

07:35.000 --> 07:37.000
Give me all the information.

07:37.000 --> 07:40.000
Like, um, for me, that's too much.

07:40.000 --> 07:46.000
I prefer a cohesive, small, um, comment and then a big read me with ordered all the links

07:46.000 --> 07:47.000
and information.

07:47.000 --> 07:50.000
So that's one of the first thing I change.

07:50.000 --> 07:51.000
Um, then also completion.

07:51.000 --> 07:52.000
I'm a big fan.

07:52.000 --> 07:54.000
I'm used to slime.

07:54.000 --> 07:57.000
So, um, I love beta to completion.

07:57.000 --> 08:01.000
So, um, the first thing that I noticed that, well, it uses an absolute function.

08:01.000 --> 08:03.000
I don't know if you can see correctly.

08:03.000 --> 08:04.000
Okay.

08:04.000 --> 08:10.000
Um, coming dynamic is deprecated and it also have like this, uh, variable, which is maxima

08:10.000 --> 08:15.000
symbol, which is basically a big, uh, list of all the possible completion.

08:15.000 --> 08:21.000
So, uh, if I load the library, it's not aware of the new symbols, or even if I create a

08:21.000 --> 08:23.000
variable, it's not loaded.

08:23.000 --> 08:24.000
So it's not dynamic.

08:24.000 --> 08:27.000
So I want the first thing I want is dynamic completion.

08:27.000 --> 08:28.000
Right.

08:28.000 --> 08:31.000
So I improve it, which it wasn't that hard.

08:31.000 --> 08:36.000
I first of all create maximum gets completion, which we're going to see in a moment.

08:36.000 --> 08:38.000
And then I change is complete in the region.

08:38.000 --> 08:43.000
So this is the improved version, but the good thing is like I decoupled the completion

08:43.000 --> 08:44.000
function.

08:44.000 --> 08:46.000
So I make that again, using all your own.

08:46.000 --> 08:53.000
So you get a prefix, which is, um, like the thing that you're going to auto complete,

08:53.000 --> 08:58.000
you get the inferior process, which I'm going to talk about later, but basically it's a

08:58.000 --> 09:00.000
maximum process you can work with.

09:00.000 --> 09:03.000
And you get an optional argument, which is fuzzy finding.

09:03.000 --> 09:04.000
Okay.

09:04.000 --> 09:11.000
So you can easily send a block here with, uh, with the approach, which is a maximum command

09:11.000 --> 09:13.000
that gets you all the auto completion.

09:13.000 --> 09:20.000
And then you process the, the output and you return, uh, a list of possible completion.

09:20.000 --> 09:23.000
This function can be easily put into company.

09:23.000 --> 09:27.000
As you can see, just get maximum cellular inferior process.

09:27.000 --> 09:30.000
It's a process that just, uh, uses.

09:30.000 --> 09:31.000
Sorry.

09:31.000 --> 09:35.000
I have all the approach and the get that symbol.

09:35.000 --> 09:38.000
It's like a, like I say, axillary lights.

09:38.000 --> 09:41.000
Help me, uh, for all that dirty stuff.

09:41.000 --> 09:43.000
So, and process manipulation.

09:43.000 --> 09:48.000
Let's talk about how the maximum process was in the beginning.

09:48.000 --> 09:53.000
So at first it was just one process and you send all of the things there and you move

09:53.000 --> 09:55.000
the process here and there.

09:55.000 --> 09:58.000
And there was a global state, right?

09:58.000 --> 10:01.000
So all the function depends on variable variables.

10:01.000 --> 10:03.000
Um, I don't like that approach.

10:03.000 --> 10:10.000
I prefer more like a short to say functional, like you sense one things and you return something.

10:10.000 --> 10:13.000
So it's not like avoid functions or to say.

10:13.000 --> 10:15.000
So I change it drastically.

10:15.000 --> 10:18.000
Uh, well, this is the maximum start function now.

10:18.000 --> 10:23.000
It just create, uh, start a process with this function, which is maximum making failure.

10:23.000 --> 10:30.000
So this function just, uh, uh, gets a name and it returned a process of maximum and you

10:30.000 --> 10:32.000
can then manipulate it the way you want.

10:32.000 --> 10:34.000
Let's see a better version.

10:34.000 --> 10:36.000
So this is the opposite, right?

10:36.000 --> 10:41.000
This remove an inferior process and delete the process and kill the buffer.

10:41.000 --> 10:42.000
Right?

10:42.000 --> 10:43.000
So let's give it an example.

10:43.000 --> 10:46.000
Cause this, you can see it pretty easily in this example.

10:46.000 --> 10:51.000
So, uh, I want to go to the scratch buffer, which I think you can see better.

10:51.000 --> 10:52.000
Okay.

10:52.000 --> 10:57.000
So, uh, this is the way you can get a process with your name and save it into a variable.

10:57.000 --> 10:58.000
Right?

10:58.000 --> 10:59.000
Let's execute this.

10:59.000 --> 11:03.000
So as you can see, well, I don't know if you can see big, you get a process.

11:03.000 --> 11:05.000
Let's go to it.

11:05.000 --> 11:08.000
The process called my maxima as the buffer.

11:08.000 --> 11:09.000
Right?

11:09.000 --> 11:11.000
And if we can, you can send the stuff to the process.

11:11.000 --> 11:12.000
Right?

11:12.000 --> 11:17.000
We can call maxima send block, get a blog of pallid maxima code and just pass the variable

11:17.000 --> 11:20.000
the process and we send code to the process.

11:20.000 --> 11:21.000
Right?

11:21.000 --> 11:22.000
We can, uh, this is youthful.

11:22.000 --> 11:27.000
You have some expensive computation that you want to process as synchrony.

11:27.000 --> 11:30.000
So to say, so the process can manage it.

11:30.000 --> 11:34.000
And when you get the results correctly, you can also get the results from the process.

11:34.000 --> 11:37.000
I mean, I don't put it here, but it's quite easy.

11:37.000 --> 11:43.000
And then you remove the inferior, which is the way to get rid of the process and the

11:43.000 --> 11:44.000
buffer.

11:44.000 --> 11:48.000
So if we call this function, we should get rid of the process and it works.

11:48.000 --> 11:50.000
The person is no longer.

11:50.000 --> 11:52.000
I'm happy to continue.

11:52.000 --> 11:56.000
So, um, other things that improve the package.

11:56.000 --> 11:58.000
I'm doing time.

11:58.000 --> 11:59.000
Okay.

11:59.000 --> 12:03.000
Another thing that I did to the package was to add a continue integration and continue

12:03.000 --> 12:04.000
delivery.

12:04.000 --> 12:05.000
Right?

12:05.000 --> 12:09.000
So the package didn't have any tests and the code was a little bit messy.

12:09.000 --> 12:18.000
So I, um, add integration at test and test with the test simple framework from Rocky

12:18.000 --> 12:23.000
bursting, the maintainer of real good, which is a great package by the way.

12:23.000 --> 12:26.000
Um, yeah, this is one example of the process.

12:26.000 --> 12:31.000
So right now, cause, um, the infrastructure of the process management is the couple.

12:31.000 --> 12:33.000
So I can test it pretty easily.

12:33.000 --> 12:36.000
This is the test function of the inferior running.

12:36.000 --> 12:39.000
So I can check if an inferior is running right now.

12:39.000 --> 12:43.000
And I can just delete it after and get the results.

12:43.000 --> 12:46.000
And I also did some integration with the party packages.

12:46.000 --> 12:48.000
The first one company, of course, I love auto completion.

12:48.000 --> 12:51.000
The second one was our mold that was already there.

12:51.000 --> 12:56.000
And Lattec with the, um, or Latin Lattec insert form.

12:56.000 --> 13:01.000
And with poly mode, cause, um, let me evaluate this.

13:01.000 --> 13:03.000
Maxima can understand list code.

13:03.000 --> 13:10.000
Well, more or less, he has to like a function, so to say, that you can send a list command

13:10.000 --> 13:12.000
to the Maxima rebel.

13:12.000 --> 13:14.000
And you can understand it in some way.

13:14.000 --> 13:19.000
So we can go to the Maxima, Paulie, Paulie, Maxima, right?

13:19.000 --> 13:24.000
You enable Paulie Maxima and it creates a poly mode, which this is list code.

13:24.000 --> 13:26.000
And this is Maxima code.

13:26.000 --> 13:28.000
So we can send this to the Maxima rebel.

13:28.000 --> 13:36.000
We come to C control art, which it send the, um, the Kurem, um, area, region.

13:36.000 --> 13:37.000
Sorry.

13:37.000 --> 13:40.000
And we define a variable with, which is called test.

13:40.000 --> 13:42.000
And as we can see, we have the variable test right here.

13:42.000 --> 13:47.000
So you can, uh, program in list, uh, and you can send it to Maxima.

13:48.000 --> 13:49.000
So this is pretty good.

13:49.000 --> 13:50.000
Pretty nice.

13:50.000 --> 13:54.000
Um, working integration with this line mode and with shrunk.

13:54.000 --> 14:00.000
So you can actually have a sort of completion of, uh, function inside the Maxima list package.

14:00.000 --> 14:03.000
But this is going to take quite a while.

14:03.000 --> 14:04.000
That's not trivial.

14:04.000 --> 14:08.000
So, um, what are the features of Maxima right now?

14:08.000 --> 14:11.000
Well, we have phones highlighting smart indentation.

14:11.000 --> 14:14.000
Uh, it was already in the package, but now it's quite better.

14:14.000 --> 14:16.000
Uh, great help functions right now.

14:16.000 --> 14:20.000
Uh, you can find the documentation quite fast and currently they menu integration.

14:20.000 --> 14:21.000
This is quite basic.

14:21.000 --> 14:25.000
It needs to be a little bit improved, uh, latex support, auto completion, local company,

14:25.000 --> 14:28.000
and maximum process integration and mini buffer.

14:28.000 --> 14:34.000
I didn't show you, but basically if you call global Maxima minor mode, you have the minor

14:34.000 --> 14:36.000
mode and you call Maxima mini buffer.

14:36.000 --> 14:37.000
How are you?

14:37.000 --> 14:38.000
Okay.

14:38.000 --> 14:42.000
Maybe for you can basically use a right simple Maxima command and it will give you the

14:42.000 --> 14:43.000
results.

14:43.000 --> 14:46.000
This is like a program version of, um, calc.

14:46.000 --> 14:48.000
So you can, okay.

14:48.000 --> 14:49.000
Yeah.

14:49.000 --> 14:51.000
You write the command and you get the output way more to come.

14:51.000 --> 14:57.000
I have like a list of, um, issues that I put enhancements and new features that I'm going

14:57.000 --> 14:59.000
to develop.

14:59.000 --> 15:02.000
So, uh, the future and the present of the package.

15:02.000 --> 15:05.000
Well, the package is right now Melpa, uh, Melpa stable.

15:05.000 --> 15:10.000
Um, Melpa stable is in the zero point seven point six version.

15:10.000 --> 15:15.000
And I'm planning to include into the non-genu Elpa.

15:15.000 --> 15:17.000
This is the URL of the package by the way.

15:17.000 --> 15:21.000
So you can, if you go to Melpa, you put Maxima and you can download it.

15:21.000 --> 15:23.000
Uh, it doesn't have too much dependencies.

15:23.000 --> 15:25.000
You're aware of that.

15:25.000 --> 15:27.000
Um, and thank you very much.

15:27.000 --> 15:28.000
Uh, this is going to be my talk.

15:28.000 --> 15:30.000
These are my, uh, information.

15:30.000 --> 15:32.000
This is my kid lab.

15:32.000 --> 15:34.000
This is my page, which I don't love too much.

15:34.000 --> 15:36.000
And this is my email.

15:36.000 --> 15:39.000
So, um, thank you very much.

15:39.000 --> 15:43.000
And I will be answering some questions right now and happy hacking.

15:48.000 --> 15:51.000
Thank you very much for the great talk.

15:51.000 --> 15:55.000
Um, yeah, let's see if we have any questions.

15:55.000 --> 15:56.000
Yeah.

15:56.000 --> 15:58.000
I'm reading like this.

15:58.000 --> 16:01.000
Um, so I'm a body of each other user right now.

16:01.000 --> 16:03.000
Okay.

16:04.000 --> 16:06.000
Maximum of each other.

16:06.000 --> 16:07.000
Yep.

16:07.000 --> 16:08.000
There are a couple of questions.

16:09.000 --> 16:10.000
Wow.

16:10.000 --> 16:11.000
Maximum of October.

16:11.000 --> 16:14.000
I don't want to, I don't know Octave that much.

16:14.000 --> 16:19.000
Um, like I use it like a couple of time, but I'm not happy.

16:19.000 --> 16:26.000
And I found the, um, Octave package to be quite a little bit harder to

16:26.000 --> 16:27.000
understand.

16:27.000 --> 16:34.000
Um, also that, um, it didn't have too much features.

16:34.000 --> 16:37.000
Like I prefer the maximum used to maybe Octave is better.

16:37.000 --> 16:39.000
I don't, I'm not a hundred percent sure.

16:39.000 --> 16:43.000
I know that you can use it for similar stuff, but that's it.

16:43.000 --> 16:44.000
So, sorry.

16:47.000 --> 16:48.000
Oh, okay.

16:48.000 --> 16:50.000
I mean, a little bit of a rush.

16:50.000 --> 16:51.000
Sorry.

16:51.000 --> 16:53.000
Let me drink a little blue.

16:53.000 --> 16:54.000
Okay.

16:54.000 --> 16:55.000
Okay.

16:55.000 --> 16:56.000
Okay.

17:01.000 --> 17:02.000
Okay.

17:03.000 --> 17:06.000
How does Maxima compare to Sage math in Emacs?

17:09.000 --> 17:14.000
I mean, I don't know what is Sage math.

17:14.000 --> 17:15.000
I'm sorry.

17:15.000 --> 17:19.000
Um, so I cannot answer your squinch with your question.

17:19.000 --> 17:20.000
I think.

17:22.000 --> 17:23.000
Sorry.

17:23.000 --> 17:26.000
But I mean, Maxima is ready in Como List.

17:26.000 --> 17:28.000
That's just a preference for me because I like, uh,

17:28.000 --> 17:32.000
a list dialect and Camel is interesting.

17:32.000 --> 17:37.000
Um, yeah.

17:37.000 --> 17:43.000
Uh, do you plan to have a maximum for session for Maxima code

17:43.000 --> 17:44.000
block?

17:44.000 --> 17:45.000
Yes.

17:45.000 --> 17:50.000
I want to improve the, um, of Maxima package,

17:50.000 --> 17:53.000
but I didn't have enough time and I want to clear a little bit of

17:53.000 --> 17:57.000
the code because still right now, um,

17:58.000 --> 18:01.000
uh, the code is quite messy in some areas because I pretty much

18:01.000 --> 18:03.000
implement first the basic function.

18:03.000 --> 18:05.000
I want to build in top off.

18:05.000 --> 18:06.000
So right now it's quite usable,

18:06.000 --> 18:08.000
but it's still have some things that I want to improve.

18:08.000 --> 18:11.000
So when I finish that, I will, um,

18:11.000 --> 18:13.000
improve the normal version.

18:13.000 --> 18:17.000
I think it maximized it to get into, into your video.

18:17.000 --> 18:18.000
Yes.

18:18.000 --> 18:23.000
Uh, I think that the creator of Maxima like have this list, uh,

18:23.000 --> 18:28.000
mine and probably, uh, um, that they,

18:28.000 --> 18:32.000
if you go to a symbol, you get all the information and that reflect

18:32.000 --> 18:36.000
that you can actually write your program of Maxima into,

18:36.000 --> 18:41.000
um, into list literally cause they have a command.

18:41.000 --> 18:43.000
So I think that is quite easy to get into.

18:43.000 --> 18:49.000
So many versions they use it for, um, first, um, years.

18:49.000 --> 18:50.000
So it is quite easy.

18:50.000 --> 18:54.000
And I think with my package, you can use it like pretty,

18:54.000 --> 18:55.000
pretty easily.

18:55.000 --> 18:59.000
Just create a file and you can start typing and Maxima quite easy

18:59.000 --> 19:00.000
to install also.

19:00.000 --> 19:03.000
So I think, yeah, it is quite easy.

19:03.000 --> 19:05.000
And the page, the page should restart.

19:05.000 --> 19:07.000
I don't know why.

19:07.000 --> 19:08.000
Sorry.

19:09.000 --> 19:10.000
Okay.

19:10.000 --> 19:13.000
Uh, Maxima seems to have strict infix listener.

19:13.000 --> 19:14.000
Hmm.

19:14.000 --> 19:19.000
Uh, infix strict infix.

19:19.000 --> 19:21.000
Infix list syntax.

19:21.000 --> 19:27.000
Um, you're talking about the Maxima itself syntax or I don't

19:27.000 --> 19:28.000
understand the question.

19:28.000 --> 19:34.000
Well, I going to go to the next question.

19:34.000 --> 19:37.000
Is there a support for images in Maxima mode?

19:37.000 --> 19:38.000
Not right now.

19:38.000 --> 19:46.000
Uh, the way I want to implement some IMAX, um, things.

19:47.000 --> 19:51.000
Uh, is there a support for, but right now it doesn't have like,

19:51.000 --> 19:55.000
uh, if you want to have a new plot, um, inside your buffer right now,

19:55.000 --> 19:56.000
it's not possible.

19:56.000 --> 20:01.000
So that's the thing that I Maxima does that Maxima.l still doesn't

20:01.000 --> 20:04.000
do which university you start to use Maxima.

20:04.000 --> 20:10.000
Um, in the Saragossa university from Spain, they use Maxima in

20:10.000 --> 20:15.000
the, um, thing in the engineer and in the math also.

20:15.000 --> 20:19.000
So not 100% sure right now, but when I started, are you planning

20:19.000 --> 20:21.000
to open your package into Maxima?

20:21.000 --> 20:26.000
Um, I don't know about that because, um, maybe can be a little bit messy.

20:26.000 --> 20:32.000
Um, because the Maxima repel is more built around like Maxima

20:32.000 --> 20:37.000
itself and they don't update the interfaces that much.

20:37.000 --> 20:38.000
I have no problem.

20:38.000 --> 20:40.000
Like it's okay.

20:40.000 --> 20:45.000
It just, um, you just have to, um, if you want to push,

20:45.000 --> 20:47.000
you can push in other repository.

20:47.000 --> 20:51.000
I mean, it's just changed the file in other way, but also the

20:51.000 --> 20:54.000
test, um, it's going to be a little bit harder because I think

20:54.000 --> 21:00.000
they're using, uh, search for, um, I'm using, uh, kid lab, uh,

21:00.000 --> 21:02.000
continue integration with you in delivery.

21:02.000 --> 21:08.000
So yeah, I don't think that, but it will, yeah, it will be nice.

21:11.000 --> 21:12.000
Okay.

21:12.000 --> 21:14.000
Um, it's possible to include maximizing or files,

21:14.000 --> 21:16.000
similar to Jupyter notebooks.

21:16.000 --> 21:20.000
Um, I mean, you can, uh, use Maxima in your,

21:20.000 --> 21:24.000
or, uh, files and you have Maxima.l mode integrated.

21:24.000 --> 21:28.000
And you can like create, uh, put that code in a buffer and then,

21:28.000 --> 21:34.000
uh, um, uh, edit it correctly, but it is now not,

21:34.000 --> 21:37.000
it doesn't have like all the features like all the languages

21:37.000 --> 21:41.000
because right now, uh, as my understanding is quite basic.

21:41.000 --> 21:46.000
So I still have some, still need some, some stuff, some workaround.

21:48.000 --> 21:49.000
Okay.

21:49.000 --> 21:50.000
I think that's it.

21:56.000 --> 21:57.000
Yep.

21:57.000 --> 21:58.000
So that's it.

21:58.000 --> 22:02.000
Uh, thank you very much for your live talk and for,

22:02.000 --> 22:03.000
you know, the live Q&A.

22:04.000 --> 22:05.000
Thank you.

22:05.000 --> 22:06.000
Thank you all.

22:06.000 --> 22:07.000
Amazing.

22:08.000 --> 22:09.000
Cheers.

22:09.000 --> 22:10.000
Thank you.

22:10.000 --> 22:11.000
It's thanks to all you guys.

22:11.000 --> 22:12.000
It's awesome.

22:12.000 --> 22:13.000
Okay.

22:13.000 --> 22:14.000
Thank you.

22:14.000 --> 22:15.000
Cheers.

22:15.000 --> 22:16.000
Bye.

22:16.000 --> 22:17.000
Bye.

