You are now unmuted.
Okay, can you guys hear me?
Yeah, can you guys hear me too?
Yep, I can, and you're live, so take it away.
Okay, so hello everyone, my name is Fermin.
I'm a programmer math student from Spain.
I've been using Emacs for two years now, more or less,
and today I'm going to talk about Maxima Computer Algebra System into Emacs.
So, let's talk about what is Maxima?
Well, Maxima is a system for manipulation of symbolic and numerical expression.
It's similar in some regard to Octave, and it's also free software.
It's derived from the Maxima from the M-A-T from the M-A-T,
and it's written in common Lisp, which is a language that I really like and enjoy writing.
So for me, it's a plus.
So, let's talk about the initial support for Maxima.
When I first started using it, I looked for support into Emacs,
and I found that there's two major modes in the main repository of Maxima.
For Emacs, the first one is iMaxima, which I don't know too much about it,
and the second one is Maxima.L, which is the one I took first,
and it was pretty nice.
It has like a major mode, a minor mode, a nice ripple,
but it also has some disadvantages.
The first one is that it's quite outdated.
I think it was from the 2007.
So it's not tested with the Korean Emacs version,
and the second one is that it doesn't use modern Emacs capability.
I'm talking, for example, about the last or more latex preview
from the last iMax 27.1, I think.
And the last one is that it's not integrated with common third-party extension.
I'm talking about company, for example, well, third-party.
Yeah, you know, the Elpa Milpa packages.
So this stock is going to be divided into parts.
First one is going to be how much Maxima I made today in Max exercise.
Don't worry, it's going to be quite easy.
And the second one is going to be why for the package
and the least improvement that I did, and a couple of things more,
maybe the future and where's the package right now, if you can use it.
So let's talk about the workflow.
Right out of the box, it has like an almost super.
I didn't write this. It was already in Emacs.
So that's pretty nice. Let's go with a simple example.
Okay, so this is an array of three equations and three variables.
So it's a system that can be solved and the solution is unique.
So we're going to solve it, right?
Let's go. Solutions.
Okay, here's how you define a variable in, let's call solve.
Okay, let's call implicit.
Oh, no, sorry.
Okay, and now an array of variables.
Okay, so first of all, we have to send this variable to the Maxima.
We can do that with Ctrl C, Ctrl C, or with the Maxima.
And then line. Okay, so let's put the Maxima buffer right here.
Okay, so right now we can get the solution like this.
So we call this line right now, Ctrl C, Ctrl C.
As you can see, we get like an array inside an array,
because let's see why we get this.
So we can call Maxima help point.
So open a doc buffer with all information about the solve function.
So we can see that there's a list of solution equations.
You can see it. Okay.
So, but we know that the system only have one solution.
So we're only interested in the first one.
We can do this like pretty easily just to take the first one.
We can send it to the buffer.
So this is quite an easy example that you can see there to completion
of the help facilities that we have.
We can also get information about the symbol.
For example, Maxima symbol doc.
And we get in the, I don't know if you can see it correctly,
in the mini buffer all the possible parameters of the function.
So let's continue.
Okay.
So let's go to a more, well, complicated example, so to say.
Oops. Okay.
So we have this equation and we want to go from minus one to five.
I want to show in a nice graph.
Right.
First of all, we begin sending this line to the Maxima repo.
Put it in the bottom again.
Okay.
So this is not ideal if you want to write down this equation
because it's quite messy.
Where is when?
So what's thing are where?
I'm called the function Maxima.
Let's say insert form.
Okay.
And this is more easy.
This basically put text behind and led or more to render it.
And this is why easy to write down.
You can use it like in every expression.
So first we have to call a library.
Let's load the library.
Library draw.
So completion for local variable and local libraries.
Sorry.
Let me try to finish the draw.
Okay.
We send the line.
So right now we have a leverage and we should even have auto completion
for the library function.
Okay.
We have this called draw 2d.
And now we can call implicit.
We should have.
Okay.
And we can have input the variable of equations.
We put the first variable.
The minus five, the five.
Five.
The V variable, the minus five and the five.
Okay.
It should be all.
All good.
So let me try to send it.
Okay.
You cannot see it right now.
Because I'm just sharing the maximum screen.
Let me try to change that.
Okay.
Okay.
Can you plot?
Hello.
Okay.
So this is basically the graph that can you plot generates.
Right now it's not integrated into.
Into the maximum package, but it's a work in progress.
So let's go back to e-max.
Where are you?
Okay.
Okay.
Okay.
So, um, let's continue.
So, uh, this is some of the things that you can use for you day to day programming in
maxima.
Um, let's go now with the.
Okay.
As you can see, this is just text that is rendered.
Okay.
Let's go with the next slide.
This is how I use maxima a simple example.
We don't want to talk too much about it because everyone used the package in a different way.
So we're now going to talk about the original package and the way I change it.
Right.
So the documentation, uh, of the original was great, but for me, it wasn't embedded in
the code.
It wasn't something sometimes hard to read.
Like it was like a big chunk of comment.
Give me all the information.
Like, um, for me, that's too much.
I prefer a cohesive, small, um, comment and then a big read me with ordered all the links
and information.
So that's one of the first thing I change.
Um, then also completion.
I'm a big fan.
I'm used to slime.
So, um, I love beta to completion.
So, um, the first thing that I noticed that, well, it uses an absolute function.
I don't know if you can see correctly.
Okay.
Um, coming dynamic is deprecated and it also have like this, uh, variable, which is maxima
symbol, which is basically a big, uh, list of all the possible completion.
So, uh, if I load the library, it's not aware of the new symbols, or even if I create a
variable, it's not loaded.
So it's not dynamic.
So I want the first thing I want is dynamic completion.
Right.
So I improve it, which it wasn't that hard.
I first of all create maximum gets completion, which we're going to see in a moment.
And then I change is complete in the region.
So this is the improved version, but the good thing is like I decoupled the completion
function.
So I make that again, using all your own.
So you get a prefix, which is, um, like the thing that you're going to auto complete,
you get the inferior process, which I'm going to talk about later, but basically it's a
maximum process you can work with.
And you get an optional argument, which is fuzzy finding.
Okay.
So you can easily send a block here with, uh, with the approach, which is a maximum command
that gets you all the auto completion.
And then you process the, the output and you return, uh, a list of possible completion.
This function can be easily put into company.
As you can see, just get maximum cellular inferior process.
It's a process that just, uh, uses.
Sorry.
I have all the approach and the get that symbol.
It's like a, like I say, axillary lights.
Help me, uh, for all that dirty stuff.
So, and process manipulation.
Let's talk about how the maximum process was in the beginning.
So at first it was just one process and you send all of the things there and you move
the process here and there.
And there was a global state, right?
So all the function depends on variable variables.
Um, I don't like that approach.
I prefer more like a short to say functional, like you sense one things and you return something.
So it's not like avoid functions or to say.
So I change it drastically.
Uh, well, this is the maximum start function now.
It just create, uh, start a process with this function, which is maximum making failure.
So this function just, uh, uh, gets a name and it returned a process of maximum and you
can then manipulate it the way you want.
Let's see a better version.
So this is the opposite, right?
This remove an inferior process and delete the process and kill the buffer.
Right?
So let's give it an example.
Cause this, you can see it pretty easily in this example.
So, uh, I want to go to the scratch buffer, which I think you can see better.
Okay.
So, uh, this is the way you can get a process with your name and save it into a variable.
Right?
Let's execute this.
So as you can see, well, I don't know if you can see big, you get a process.
Let's go to it.
The process called my maxima as the buffer.
Right?
And if we can, you can send the stuff to the process.
Right?
We can call maxima send block, get a blog of pallid maxima code and just pass the variable
the process and we send code to the process.
Right?
We can, uh, this is youthful.
You have some expensive computation that you want to process as synchrony.
So to say, so the process can manage it.
And when you get the results correctly, you can also get the results from the process.
I mean, I don't put it here, but it's quite easy.
And then you remove the inferior, which is the way to get rid of the process and the
buffer.
So if we call this function, we should get rid of the process and it works.
The person is no longer.
I'm happy to continue.
So, um, other things that improve the package.
I'm doing time.
Okay.
Another thing that I did to the package was to add a continue integration and continue
delivery.
Right?
So the package didn't have any tests and the code was a little bit messy.
So I, um, add integration at test and test with the test simple framework from Rocky
bursting, the maintainer of real good, which is a great package by the way.
Um, yeah, this is one example of the process.
So right now, cause, um, the infrastructure of the process management is the couple.
So I can test it pretty easily.
This is the test function of the inferior running.
So I can check if an inferior is running right now.
And I can just delete it after and get the results.
And I also did some integration with the party packages.
The first one company, of course, I love auto completion.
The second one was our mold that was already there.
And Lattec with the, um, or Latin Lattec insert form.
And with poly mode, cause, um, let me evaluate this.
Maxima can understand list code.
Well, more or less, he has to like a function, so to say, that you can send a list command
to the Maxima rebel.
And you can understand it in some way.
So we can go to the Maxima, Paulie, Paulie, Maxima, right?
You enable Paulie Maxima and it creates a poly mode, which this is list code.
And this is Maxima code.
So we can send this to the Maxima rebel.
We come to C control art, which it send the, um, the Kurem, um, area, region.
Sorry.
And we define a variable with, which is called test.
And as we can see, we have the variable test right here.
So you can, uh, program in list, uh, and you can send it to Maxima.
So this is pretty good.
Pretty nice.
Um, working integration with this line mode and with shrunk.
So you can actually have a sort of completion of, uh, function inside the Maxima list package.
But this is going to take quite a while.
That's not trivial.
So, um, what are the features of Maxima right now?
Well, we have phones highlighting smart indentation.
Uh, it was already in the package, but now it's quite better.
Uh, great help functions right now.
Uh, you can find the documentation quite fast and currently they menu integration.
This is quite basic.
It needs to be a little bit improved, uh, latex support, auto completion, local company,
and maximum process integration and mini buffer.
I didn't show you, but basically if you call global Maxima minor mode, you have the minor
mode and you call Maxima mini buffer.
How are you?
Okay.
Maybe for you can basically use a right simple Maxima command and it will give you the
results.
This is like a program version of, um, calc.
So you can, okay.
Yeah.
You write the command and you get the output way more to come.
I have like a list of, um, issues that I put enhancements and new features that I'm going
to develop.
So, uh, the future and the present of the package.
Well, the package is right now Melpa, uh, Melpa stable.
Um, Melpa stable is in the zero point seven point six version.
And I'm planning to include into the non-genu Elpa.
This is the URL of the package by the way.
So you can, if you go to Melpa, you put Maxima and you can download it.
Uh, it doesn't have too much dependencies.
You're aware of that.
Um, and thank you very much.
Uh, this is going to be my talk.
These are my, uh, information.
This is my kid lab.
This is my page, which I don't love too much.
And this is my email.
So, um, thank you very much.
And I will be answering some questions right now and happy hacking.
Thank you very much for the great talk.
Um, yeah, let's see if we have any questions.
Yeah.
I'm reading like this.
Um, so I'm a body of each other user right now.
Okay.
Maximum of each other.
Yep.
There are a couple of questions.
Wow.
Maximum of October.
I don't want to, I don't know Octave that much.
Um, like I use it like a couple of time, but I'm not happy.
And I found the, um, Octave package to be quite a little bit harder to
understand.
Um, also that, um, it didn't have too much features.
Like I prefer the maximum used to maybe Octave is better.
I don't, I'm not a hundred percent sure.
I know that you can use it for similar stuff, but that's it.
So, sorry.
Oh, okay.
I mean, a little bit of a rush.
Sorry.
Let me drink a little blue.
Okay.
Okay.
Okay.
Okay.
How does Maxima compare to Sage math in Emacs?
I mean, I don't know what is Sage math.
I'm sorry.
Um, so I cannot answer your squinch with your question.
I think.
Sorry.
But I mean, Maxima is ready in Como List.
That's just a preference for me because I like, uh,
a list dialect and Camel is interesting.
Um, yeah.
Uh, do you plan to have a maximum for session for Maxima code
block?
Yes.
I want to improve the, um, of Maxima package,
but I didn't have enough time and I want to clear a little bit of
the code because still right now, um,
uh, the code is quite messy in some areas because I pretty much
implement first the basic function.
I want to build in top off.
So right now it's quite usable,
but it's still have some things that I want to improve.
So when I finish that, I will, um,
improve the normal version.
I think it maximized it to get into, into your video.
Yes.
Uh, I think that the creator of Maxima like have this list, uh,
mine and probably, uh, um, that they,
if you go to a symbol, you get all the information and that reflect
that you can actually write your program of Maxima into,
um, into list literally cause they have a command.
So I think that is quite easy to get into.
So many versions they use it for, um, first, um, years.
So it is quite easy.
And I think with my package, you can use it like pretty,
pretty easily.
Just create a file and you can start typing and Maxima quite easy
to install also.
So I think, yeah, it is quite easy.
And the page, the page should restart.
I don't know why.
Sorry.
Okay.
Uh, Maxima seems to have strict infix listener.
Hmm.
Uh, infix strict infix.
Infix list syntax.
Um, you're talking about the Maxima itself syntax or I don't
understand the question.
Well, I going to go to the next question.
Is there a support for images in Maxima mode?
Not right now.
Uh, the way I want to implement some IMAX, um, things.
Uh, is there a support for, but right now it doesn't have like,
uh, if you want to have a new plot, um, inside your buffer right now,
it's not possible.
So that's the thing that I Maxima does that Maxima.l still doesn't
do which university you start to use Maxima.
Um, in the Saragossa university from Spain, they use Maxima in
the, um, thing in the engineer and in the math also.
So not 100% sure right now, but when I started, are you planning
to open your package into Maxima?
Um, I don't know about that because, um, maybe can be a little bit messy.
Um, because the Maxima repel is more built around like Maxima
itself and they don't update the interfaces that much.
I have no problem.
Like it's okay.
It just, um, you just have to, um, if you want to push,
you can push in other repository.
I mean, it's just changed the file in other way, but also the
test, um, it's going to be a little bit harder because I think
they're using, uh, search for, um, I'm using, uh, kid lab, uh,
continue integration with you in delivery.
So yeah, I don't think that, but it will, yeah, it will be nice.
Okay.
Um, it's possible to include maximizing or files,
similar to Jupyter notebooks.
Um, I mean, you can, uh, use Maxima in your,
or, uh, files and you have Maxima.l mode integrated.
And you can like create, uh, put that code in a buffer and then,
uh, um, uh, edit it correctly, but it is now not,
it doesn't have like all the features like all the languages
because right now, uh, as my understanding is quite basic.
So I still have some, still need some, some stuff, some workaround.
Okay.
I think that's it.
Yep.
So that's it.
Uh, thank you very much for your live talk and for,
you know, the live Q&A.
Thank you.
Thank you all.
Amazing.
Cheers.
Thank you.
It's thanks to all you guys.
It's awesome.
Okay.
Thank you.
Cheers.
Bye.
Bye.
