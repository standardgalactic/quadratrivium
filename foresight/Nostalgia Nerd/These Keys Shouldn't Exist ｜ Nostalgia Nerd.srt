1
00:00:00,000 --> 00:00:15,560
If you've used MS-DOS in the past, you're probably familiar with this character.

2
00:00:15,560 --> 00:00:19,360
This is the pipe symbol, and it's incredibly useful.

3
00:00:19,360 --> 00:00:25,200
It allows you to pipe or send the output of one program to another program.

4
00:00:25,200 --> 00:00:30,440
This episode is sponsored by Squarespace, more on that later.

5
00:00:30,440 --> 00:00:36,680
If I were to enter type readme.txt into this computer, it would spool out a huge readme

6
00:00:36,680 --> 00:00:39,680
file, giving me no time to read it.

7
00:00:39,680 --> 00:00:46,400
However, if I were to enter type readme.txt pipe more, the output gets sent to the more

8
00:00:46,400 --> 00:00:52,000
command, which handily breaks the document down into screen size chunks.

9
00:00:52,000 --> 00:00:54,840
But there's an issue with this pipe symbol.

10
00:00:54,840 --> 00:01:01,840
And the issue is, well, it doesn't actually exist, not in this context, and what's more,

11
00:01:01,840 --> 00:01:08,280
there are often two apparently identical instances of it on keyboards, neither of which are existing

12
00:01:08,280 --> 00:01:11,200
in the way they're supposed to.

13
00:01:11,200 --> 00:01:16,480
Allow me to explain.

14
00:01:16,480 --> 00:01:22,200
For centuries mankind has been using code to communicate, but it was really the telegraph

15
00:01:22,360 --> 00:01:28,560
which set a standard for a universally understood binary type communication with the International

16
00:01:28,560 --> 00:01:30,240
Telegraph alphabet.

17
00:01:30,240 --> 00:01:35,920
This used five pulses of electricity to encode the letters of the alphabet and various other

18
00:01:35,920 --> 00:01:41,080
figures, so they could be successfully decoded at the opposite end.

19
00:01:41,080 --> 00:01:46,440
Computers also needed character codes, so that data could be sent, processed and stored

20
00:01:46,440 --> 00:01:48,080
in the computer's memory.

21
00:01:48,080 --> 00:01:53,880
The problem was, by 1960, there was at least 29 different code standards being used by

22
00:01:53,880 --> 00:01:54,880
computers.

23
00:01:54,880 --> 00:02:01,760
IBM, for example, even had multiple character codes used across their own systems.

24
00:02:01,760 --> 00:02:06,440
Some standardization was needed, just like the telegraph, although that couldn't be

25
00:02:06,440 --> 00:02:11,640
adapted for computers because if you arranged for signals in binary order, it just produced

26
00:02:11,640 --> 00:02:13,680
a complete mess.

27
00:02:13,680 --> 00:02:19,800
And so, the American Standards Association, the ASA, began the process of character code

28
00:02:19,800 --> 00:02:28,000
standardization on the 4th of August 1960, creating the X3.2 subcommittee for coded character

29
00:02:28,000 --> 00:02:30,800
sets and data format.

30
00:02:30,800 --> 00:02:35,400
By March 1961, an initial code was produced.

31
00:02:35,400 --> 00:02:41,280
This one, 54 characters arranged across 4 columns and 15 rows.

32
00:02:41,280 --> 00:02:48,480
This gives you a maximum of 60 characters, which fits into 6 bits, so it's a 6-bit code.

33
00:02:48,480 --> 00:02:57,160
Going from this example, T is column 3, which is 1-1 in binary, and row 7, which is 0-1-1-1,

34
00:02:57,160 --> 00:03:01,960
giving a binary code of 1-1-0-1-1 for T.

35
00:03:01,960 --> 00:03:07,800
Of course, at this time, punched card was used for entering data, so this would be represented

36
00:03:07,800 --> 00:03:12,960
by 2 punched holes, 1 space, and 3 more punched holes.

37
00:03:12,960 --> 00:03:20,040
This is also why we have NULL at the start of the table, as that leaves all holes unpunished,

38
00:03:20,040 --> 00:03:27,700
binary 0-0-0-0-0-0, and delete at the end of the table, as that punches all holes, removing

39
00:03:27,700 --> 00:03:32,160
any data that was present, binary 1-1-1-1-1.

40
00:03:32,160 --> 00:03:38,600
However, that's not what the binary code for T is actually today, and you'll notice

41
00:03:38,600 --> 00:03:43,560
that a lot of the characters we use today are missing from this table.

42
00:03:43,560 --> 00:03:46,200
The lowercase alphabet for starters.

43
00:03:46,200 --> 00:03:53,520
Therefore, it was decided in May 1961 that a family of related codes of different sizes

44
00:03:53,520 --> 00:03:55,160
would be created.

45
00:03:55,160 --> 00:04:03,160
A 4-bit numeric set, a shifted 5-bit set, a 6-bit set for data processing, a 7-bit set

46
00:04:03,160 --> 00:04:08,240
for communications, and the possibility of an expanded 8-bit set.

47
00:04:08,240 --> 00:04:14,240
The 7-bit set was identified as the prime set for information exchange.

48
00:04:14,240 --> 00:04:20,360
So this is the initial 7-bit set, from the 1st of June 1961.

49
00:04:20,360 --> 00:04:24,040
Already it's very different from the first.

50
00:04:24,040 --> 00:04:29,280
It's also the first where we see the pipe symbol, or vertical line.

51
00:04:29,280 --> 00:04:34,520
The reason for its inclusion is that it's actually the logical OR symbol, and therefore

52
00:04:34,520 --> 00:04:41,000
grouped among other mathematical symbols, such as greater than, less than, logical not,

53
00:04:41,000 --> 00:04:42,480
you get the idea.

54
00:04:42,480 --> 00:04:48,360
However, this table, this code gave minimal concessions to keyboard design.

55
00:04:48,360 --> 00:04:54,400
For instance, if two symbols reside on a key, ideally you want them in the same row,

56
00:04:54,400 --> 00:04:59,480
because it equates to only a single bit difference between each character.

57
00:04:59,480 --> 00:05:02,920
This allows the keyboard to be mechanically simpler.

58
00:05:02,920 --> 00:05:07,760
You have to remember that, at this point, hollery for mechanical keyboards were often

59
00:05:07,760 --> 00:05:13,600
used to physically punch data into card or tape to be fed into the computer.

60
00:05:13,600 --> 00:05:18,840
And so this character set lacked elegance and practicality.

61
00:05:18,840 --> 00:05:24,280
And so, in collaboration with other global standards authorities, including the UK and

62
00:05:24,280 --> 00:05:30,920
Europe, the arduous process of determining a satisfactory 7-bit standard began.

63
00:05:30,920 --> 00:05:35,320
Now I won't bore you with each subsequent revision, but I can tell you that it would

64
00:05:35,320 --> 00:05:41,360
take another 6 years before the standard was agreed, with the vertical line phasing in

65
00:05:41,360 --> 00:05:46,840
and out of existence throughout.

66
00:05:46,840 --> 00:05:52,600
By the 12th of May 1966, we had this setup, which looks much better with corresponding

67
00:05:52,600 --> 00:05:59,880
shifted values in the correct rows, and the ability to create subsets of the main set.

68
00:05:59,880 --> 00:06:05,640
The idea here was that the four middle columns could be taken as an international subset

69
00:06:05,640 --> 00:06:10,960
and used on 6-bit machines, leaving some of the outside characters as part of the greatest

70
00:06:10,960 --> 00:06:12,860
7-bit set.

71
00:06:12,860 --> 00:06:18,040
Some of these outline characters could also be repurposed as part of a national set for

72
00:06:18,040 --> 00:06:21,520
localised accents and other requirements.

73
00:06:21,520 --> 00:06:27,360
Based around this draft, the international standards organisation would draft this proposal.

74
00:06:27,360 --> 00:06:31,000
You can see some characters are designated for national use.

75
00:06:31,000 --> 00:06:36,400
We also have a pound symbol where hash was, giving you some idea as why Americans refer

76
00:06:36,400 --> 00:06:39,520
to the hash as the pound symbol.

77
00:06:39,720 --> 00:06:46,560
However, even though this draft had international approval, it caused some upsets, mainly with

78
00:06:46,560 --> 00:06:50,120
an IBM user group known as SHARE.

79
00:06:50,120 --> 00:06:56,040
The chairman, H.W. Nelson, would pen an irate letter to the ASA, entitled

80
00:06:56,040 --> 00:07:02,440
The Proposed Revised American Standard Code for Information Interchange Does Not Meet

81
00:07:02,440 --> 00:07:05,800
the Requirements of Computer Programmers.

82
00:07:05,800 --> 00:07:11,240
This point was there weren't any characters in the international subset that could be

83
00:07:11,240 --> 00:07:17,600
used to satisfactorily represent the logical operations of ALL and NOT.

84
00:07:17,600 --> 00:07:23,920
His proposal was that the code table be arranged like so, with the vertical line, or logical

85
00:07:23,920 --> 00:07:30,600
ALL, at position 2-3 and the NOT, or negate symbol, at 2-4.

86
00:07:30,600 --> 00:07:36,160
This would allow for operation of programming languages, such as IBM's Programming Language

87
00:07:36,160 --> 00:07:42,160
1 universally, and on a wider variety of systems.

88
00:07:42,160 --> 00:07:48,120
But as the original ISO draft had already been accepted, changes would be difficult,

89
00:07:48,120 --> 00:07:51,960
so a compromise was made.

90
00:07:51,960 --> 00:07:57,880
Both the circumflex and exclamation mark would need to allow the ability to interchange with

91
00:07:57,880 --> 00:08:04,240
the logical NOT and logical ALL symbols respectively, as if they were some kind of shape shifters.

92
00:08:04,240 --> 00:08:09,880
So in some uses, such as programming, pressing these key commands would create logical symbols,

93
00:08:09,880 --> 00:08:14,240
and outside of programming or on a different machine, they would produce their original

94
00:08:14,240 --> 00:08:15,640
symbols.

95
00:08:15,640 --> 00:08:21,200
In an attempt to appease this significant and important programming community, the standard

96
00:08:21,200 --> 00:08:24,720
document was annotated as thus.

97
00:08:24,720 --> 00:08:29,680
It may be desirable to employ distinctive styling to facilitate their use for specific

98
00:08:29,680 --> 00:08:37,040
purposes, as for example to stylise the graphics in code positions 2-1 and 5-14 to those frequently

99
00:08:37,040 --> 00:08:42,240
associated with logical ALL and logical NOT respectively.

100
00:08:42,240 --> 00:08:48,320
The original vertical line, found in 712, was then broken, so that users would not mistake

101
00:08:48,320 --> 00:08:53,280
it as the logical ALL symbol, which would then create an erroneous output.

102
00:08:53,280 --> 00:08:56,040
And the ASCII-character codes were formed.

103
00:08:56,040 --> 00:09:02,840
So this broken bar would become ASCII-character 7C, and you get that with the formula 16 times

104
00:09:02,840 --> 00:09:08,440
x plus y, where x is the column number and y is the row number.

105
00:09:08,440 --> 00:09:15,600
That gives us 124, which is 7C in hex.

106
00:09:15,600 --> 00:09:19,000
Which brings me onto my sponsor, Squarespace.

107
00:09:19,000 --> 00:09:24,400
Now this is my last slot in this run with Squarespace, so I want to give them a big

108
00:09:24,400 --> 00:09:31,200
thanks for supporting me and frankly allowing me to upgrade some of my videography equipment.

109
00:09:31,200 --> 00:09:34,640
Look out for some improvements in future videos.

110
00:09:34,640 --> 00:09:39,200
But if you want to create your own website for, well, any purpose, be it business or

111
00:09:39,200 --> 00:09:42,000
pleasure, Squarespace has your back.

112
00:09:42,000 --> 00:09:46,320
It's incredibly simple to get a website up and running with a custom domain using their

113
00:09:46,320 --> 00:09:50,440
platform, with effortless tools and guides to help you along.

114
00:09:50,440 --> 00:09:58,880
And right now you can grab 10% off your first purchase by visiting the link in the description.

115
00:09:58,880 --> 00:10:04,000
But remember this is the last sponsor segment in this run, so don't hang about, check them

116
00:10:04,000 --> 00:10:11,440
out with the link below.

117
00:10:11,440 --> 00:10:18,320
And so, on the 5th July 1967, this would become the American Standards Code for Information

118
00:10:18,320 --> 00:10:24,720
Interchange, or ASCII, with the equivalent ISO 464 code published as a recommendation

119
00:10:24,720 --> 00:10:31,560
in December of the same year, ensuring that text remained readable and usable across multiple

120
00:10:31,560 --> 00:10:32,560
machines.

121
00:10:32,560 --> 00:10:39,040
So, all fonts going forward would be created around this code set, with the keyboard interface

122
00:10:39,040 --> 00:10:45,240
generating the correct signals to call the relevant characters up from ROM or software.

123
00:10:45,240 --> 00:10:51,760
So this explains why we have our broken vertical bar on the keyboard, and indeed why it appears

124
00:10:51,760 --> 00:10:53,640
in our software.

125
00:10:53,640 --> 00:10:59,160
It was part of the character set from 1967 onwards, but as it was no longer needed for

126
00:10:59,160 --> 00:11:05,600
its original operation, computer programs began repurposing it for their own uses.

127
00:11:05,600 --> 00:11:10,600
So going back to our initial example, this is how DOS ended up using it for the useful

128
00:11:10,600 --> 00:11:11,600
pipe command.

129
00:11:11,600 --> 00:11:16,480
Although, like a lot of things, really it was stolen from Unix, which had been using

130
00:11:16,480 --> 00:11:19,240
it since the early 70s.

131
00:11:19,240 --> 00:11:25,520
But something happened between 1967 and the release of DOS and the IBM PC compatible that

132
00:11:25,520 --> 00:11:36,880
should have had implications.

133
00:11:36,880 --> 00:11:39,880
Enter ASCII 1977.

134
00:11:39,880 --> 00:11:49,240
Yeah man, the 70s were a different, funkier time, and it meant that what was once taken

135
00:11:49,240 --> 00:11:51,240
out went back in.

136
00:11:51,240 --> 00:11:57,880
Yes, ten years on, and with the share group apparently a distant memory, ASCII 1977 went

137
00:11:57,880 --> 00:12:02,800
about undoing the compromises of the original ASCII 1967.

138
00:12:02,800 --> 00:12:07,360
The hash symbol could no longer be replaced by the pound, the circumflex could no longer

139
00:12:07,360 --> 00:12:14,040
be stylized as logical not, and importantly the exclamation mark could no longer be stylized

140
00:12:14,040 --> 00:12:16,160
as a vertical bar.

141
00:12:16,160 --> 00:12:22,920
This meant the original 7C broken bar was repaired to be a beautiful, full flowing,

142
00:12:22,920 --> 00:12:23,920
continuous bar.

143
00:12:23,920 --> 00:12:27,640
Yes, it was back in business again as logical or.

144
00:12:27,640 --> 00:12:35,480
Internationally, these had actually been done even sooner with ISO 646 1973.

145
00:12:35,480 --> 00:12:42,920
It seems like it really was done just to appease PL1 programmers for a few years.

146
00:12:42,920 --> 00:12:48,040
So enter the IBM PC in 1981 and enter Microsoft DOS.

147
00:12:48,040 --> 00:12:49,040
And what do we have?

148
00:12:49,040 --> 00:12:52,400
Yep, we've still got that broken bar.

149
00:12:52,400 --> 00:12:57,280
Here we have a character that does not conform to ASCII standards.

150
00:12:57,280 --> 00:13:02,840
This character should not exist, but yet it does there, it does here, and it does on almost

151
00:13:02,840 --> 00:13:09,520
every keyboard of the 1980s and 90s, or IBM PC compatibles at least.

152
00:13:09,520 --> 00:13:13,560
And in fact, still a lot of keyboards up until this day.

153
00:13:13,560 --> 00:13:18,760
But that in part is due to the IBM PC using its own character set.

154
00:13:18,760 --> 00:13:23,160
This is called code page 437 and should look pretty familiar to you.

155
00:13:23,160 --> 00:13:28,060
It's actually an 8-bit character set, it just does away with the extra 1-bit parity

156
00:13:28,060 --> 00:13:33,720
check used on the original 7-bit ASCII set, and gives us a load of graphical characters

157
00:13:33,720 --> 00:13:39,400
commonly used for DOS programs like edit, scan disk and QBasic.

158
00:13:39,480 --> 00:13:44,240
All the non-ASCII characters have bespoke numbering conventions to avoid confusion and

159
00:13:44,240 --> 00:13:46,120
interpretation issues.

160
00:13:46,120 --> 00:13:51,600
I mean, it is based on ASCII, it includes all principal ASCII character codes and extended

161
00:13:51,600 --> 00:13:55,520
codes and it's sometimes referred to as high ASCII.

162
00:13:55,520 --> 00:13:59,580
I'm not sure whether that's because it looks like it's on drugs or not, but it's not strictly

163
00:13:59,580 --> 00:14:02,480
speaking ASCII compatible.

164
00:14:02,480 --> 00:14:08,640
And rather than pulling the solid vertical bar from 1977 ASCII, it uses the broken bar

165
00:14:08,640 --> 00:14:13,120
that IBM had been accustomed to since 1967.

166
00:14:13,120 --> 00:14:17,800
Now if you're from the United States or really anywhere else, you might wonder why it's

167
00:14:17,800 --> 00:14:18,800
down here.

168
00:14:18,800 --> 00:14:22,140
Well, that's because this is a UK keyboard.

169
00:14:22,140 --> 00:14:27,320
If you recall our earlier dollar symbol, pound shenanigans, this is why UK keyboards are

170
00:14:27,320 --> 00:14:30,480
commonly 62 key rather than 61.

171
00:14:30,480 --> 00:14:37,280
The pound symbol is on 3, meaning the hash symbol is now on an extra key down near our

172
00:14:37,280 --> 00:14:43,280
larger enter key, meaning the key you Americans usually have over the enter key is actually

173
00:14:43,280 --> 00:14:45,480
now down here.

174
00:14:45,480 --> 00:14:47,640
And up there?

175
00:14:47,640 --> 00:14:49,440
Oh god what the hell is this?

176
00:14:49,440 --> 00:14:51,880
We have two vertical bars now.

177
00:14:51,880 --> 00:14:52,880
What is this?

178
00:14:52,880 --> 00:14:54,080
Two pipe symbols?

179
00:14:54,080 --> 00:14:55,720
What is going on here?

180
00:14:55,720 --> 00:15:01,600
Yes, UK keyboards have a second vertical line to the left of the one key.

181
00:15:01,600 --> 00:15:08,480
It's shared with that logical not symbol and a grave accent, used in various languages.

182
00:15:08,480 --> 00:15:13,120
If you're American and you have an international keyboard, then you'll find the second vertical

183
00:15:13,120 --> 00:15:17,360
line on the same key as the first vertical line.

184
00:15:17,360 --> 00:15:21,240
I'm not sure that makes it easier to comprehend, if anything it's worse.

185
00:15:21,240 --> 00:15:26,320
Anyway, on a lot of character sets, these two symbols will look identical.

186
00:15:26,320 --> 00:15:32,920
The original pipe is ASCII007C, whilst this new one is 00A6.

187
00:15:32,920 --> 00:15:38,160
And it's accessed on a UK keyboard using the alt graph and the top left key.

188
00:15:38,160 --> 00:15:45,520
The reason it's here is due to the extended ASCII codes introduced in 1985 with ISO8859-1

189
00:15:45,520 --> 00:15:48,400
or ECMA94.

190
00:15:48,400 --> 00:15:54,520
Also known as Latin 1, it consists of 191 characters from the Latin script.

191
00:15:54,520 --> 00:15:57,920
On the DOS it was introduced with code page 850.

192
00:15:57,920 --> 00:16:02,920
You can see how it fits alongside the original 7-bit set nicely.

193
00:16:02,920 --> 00:16:07,160
With it, this character set reintroduced back the broken vertical bar.

194
00:16:07,160 --> 00:16:14,040
Yes, the bar that was broken in 1967 to stop it being used the wrong way was brought back.

195
00:16:14,040 --> 00:16:16,320
I guess people missed it.

196
00:16:16,320 --> 00:16:21,320
But this new broken vertical bar is a different character to 7C, so it doesn't really have

197
00:16:21,320 --> 00:16:24,800
any purpose other than to look like a broken bar.

198
00:16:24,800 --> 00:16:30,880
Which ironically is what 7C still looks like in a lot of fonts and on a lot of keyboards.

199
00:16:30,880 --> 00:16:34,720
I guess it gives you an extra tool for ASCII art at least.

200
00:16:34,720 --> 00:16:39,680
So if you find an international or UK keyboard from 1985 onward, you will likely find it

201
00:16:39,680 --> 00:16:44,800
has two solid bars, or perhaps two broken bars, or even more weirdly, it will likely have

202
00:16:44,800 --> 00:16:49,680
a broken bar where the solid bar should be and a solid bar where the new broken bar should

203
00:16:49,680 --> 00:16:50,680
be.

204
00:16:50,880 --> 00:16:56,640
In part, this is due to IBM's Model M keyboard.

205
00:16:56,640 --> 00:17:04,840
It was also introduced in 1985 and has switched the vertical bars, just like code page 437.

206
00:17:04,840 --> 00:17:10,640
It was also the basis for many keyboards going forward, yet it's quite confusing.

207
00:17:10,640 --> 00:17:16,600
So you may come across the odd font that still has the back to front implementation.

208
00:17:16,680 --> 00:17:21,600
Whether your keyboard has them the right way around will vary depending on your keyboard.

209
00:17:21,600 --> 00:17:23,400
Some will, some won't.

210
00:17:23,400 --> 00:17:28,320
It's amazing as we're talking about a hangover from a standards dispute that now goes back

211
00:17:28,320 --> 00:17:30,760
over half a century.

212
00:17:30,760 --> 00:17:35,360
But regardless of how they look, the operating system should still recognise them as their

213
00:17:35,360 --> 00:17:41,160
original intention from 1967.

214
00:17:41,160 --> 00:17:46,040
So that's why we have two keys with almost the same character, and it's also why those

215
00:17:46,040 --> 00:17:51,520
keys, or the characters represented on those keys, shouldn't actually exist.

216
00:17:51,520 --> 00:17:54,360
Well not in the way they're intended.

217
00:17:54,360 --> 00:18:02,120
So as a recap, this key was once a broken bar, represented by a broken bar on screen,

218
00:18:02,120 --> 00:18:09,280
but it should have been a solid bar, represented by a solid bar on screen, and mostly these

219
00:18:09,280 --> 00:18:12,000
days that is the case.

220
00:18:12,000 --> 00:18:18,600
This extra broken bar, located on some keyboards, that is sometimes portrayed as a solid bar,

221
00:18:18,600 --> 00:18:25,480
but is in fact a broken bar, was introduced in 1985 and is really just for old times sake,

222
00:18:25,480 --> 00:18:30,640
but is a distinct different character from the original broken bar, so doesn't really

223
00:18:30,640 --> 00:18:32,720
serve that purpose.

224
00:18:32,720 --> 00:18:37,800
Unless programmers give it a bespoke purpose, just like this one was.

225
00:18:37,800 --> 00:18:40,320
Maybe Unix can have an extra pipe.

226
00:18:40,400 --> 00:18:42,880
It does seem to like them, after all.

227
00:18:42,880 --> 00:18:48,800
Or maybe YouTubers can just use them in video titles, as a separation mark.

228
00:18:48,800 --> 00:18:53,920
So I hope that explains something you probably never cared about, or possibly made it more

229
00:18:53,920 --> 00:18:55,480
confusing for you.

230
00:18:55,480 --> 00:19:00,280
In any case, thanks for watching and have a great evening.

