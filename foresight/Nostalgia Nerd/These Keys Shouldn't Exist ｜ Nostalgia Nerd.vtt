WEBVTT

00:00.000 --> 00:15.560
If you've used MS-DOS in the past, you're probably familiar with this character.

00:15.560 --> 00:19.360
This is the pipe symbol, and it's incredibly useful.

00:19.360 --> 00:25.200
It allows you to pipe or send the output of one program to another program.

00:25.200 --> 00:30.440
This episode is sponsored by Squarespace, more on that later.

00:30.440 --> 00:36.680
If I were to enter type readme.txt into this computer, it would spool out a huge readme

00:36.680 --> 00:39.680
file, giving me no time to read it.

00:39.680 --> 00:46.400
However, if I were to enter type readme.txt pipe more, the output gets sent to the more

00:46.400 --> 00:52.000
command, which handily breaks the document down into screen size chunks.

00:52.000 --> 00:54.840
But there's an issue with this pipe symbol.

00:54.840 --> 01:01.840
And the issue is, well, it doesn't actually exist, not in this context, and what's more,

01:01.840 --> 01:08.280
there are often two apparently identical instances of it on keyboards, neither of which are existing

01:08.280 --> 01:11.200
in the way they're supposed to.

01:11.200 --> 01:16.480
Allow me to explain.

01:16.480 --> 01:22.200
For centuries mankind has been using code to communicate, but it was really the telegraph

01:22.360 --> 01:28.560
which set a standard for a universally understood binary type communication with the International

01:28.560 --> 01:30.240
Telegraph alphabet.

01:30.240 --> 01:35.920
This used five pulses of electricity to encode the letters of the alphabet and various other

01:35.920 --> 01:41.080
figures, so they could be successfully decoded at the opposite end.

01:41.080 --> 01:46.440
Computers also needed character codes, so that data could be sent, processed and stored

01:46.440 --> 01:48.080
in the computer's memory.

01:48.080 --> 01:53.880
The problem was, by 1960, there was at least 29 different code standards being used by

01:53.880 --> 01:54.880
computers.

01:54.880 --> 02:01.760
IBM, for example, even had multiple character codes used across their own systems.

02:01.760 --> 02:06.440
Some standardization was needed, just like the telegraph, although that couldn't be

02:06.440 --> 02:11.640
adapted for computers because if you arranged for signals in binary order, it just produced

02:11.640 --> 02:13.680
a complete mess.

02:13.680 --> 02:19.800
And so, the American Standards Association, the ASA, began the process of character code

02:19.800 --> 02:28.000
standardization on the 4th of August 1960, creating the X3.2 subcommittee for coded character

02:28.000 --> 02:30.800
sets and data format.

02:30.800 --> 02:35.400
By March 1961, an initial code was produced.

02:35.400 --> 02:41.280
This one, 54 characters arranged across 4 columns and 15 rows.

02:41.280 --> 02:48.480
This gives you a maximum of 60 characters, which fits into 6 bits, so it's a 6-bit code.

02:48.480 --> 02:57.160
Going from this example, T is column 3, which is 1-1 in binary, and row 7, which is 0-1-1-1,

02:57.160 --> 03:01.960
giving a binary code of 1-1-0-1-1 for T.

03:01.960 --> 03:07.800
Of course, at this time, punched card was used for entering data, so this would be represented

03:07.800 --> 03:12.960
by 2 punched holes, 1 space, and 3 more punched holes.

03:12.960 --> 03:20.040
This is also why we have NULL at the start of the table, as that leaves all holes unpunished,

03:20.040 --> 03:27.700
binary 0-0-0-0-0-0, and delete at the end of the table, as that punches all holes, removing

03:27.700 --> 03:32.160
any data that was present, binary 1-1-1-1-1.

03:32.160 --> 03:38.600
However, that's not what the binary code for T is actually today, and you'll notice

03:38.600 --> 03:43.560
that a lot of the characters we use today are missing from this table.

03:43.560 --> 03:46.200
The lowercase alphabet for starters.

03:46.200 --> 03:53.520
Therefore, it was decided in May 1961 that a family of related codes of different sizes

03:53.520 --> 03:55.160
would be created.

03:55.160 --> 04:03.160
A 4-bit numeric set, a shifted 5-bit set, a 6-bit set for data processing, a 7-bit set

04:03.160 --> 04:08.240
for communications, and the possibility of an expanded 8-bit set.

04:08.240 --> 04:14.240
The 7-bit set was identified as the prime set for information exchange.

04:14.240 --> 04:20.360
So this is the initial 7-bit set, from the 1st of June 1961.

04:20.360 --> 04:24.040
Already it's very different from the first.

04:24.040 --> 04:29.280
It's also the first where we see the pipe symbol, or vertical line.

04:29.280 --> 04:34.520
The reason for its inclusion is that it's actually the logical OR symbol, and therefore

04:34.520 --> 04:41.000
grouped among other mathematical symbols, such as greater than, less than, logical not,

04:41.000 --> 04:42.480
you get the idea.

04:42.480 --> 04:48.360
However, this table, this code gave minimal concessions to keyboard design.

04:48.360 --> 04:54.400
For instance, if two symbols reside on a key, ideally you want them in the same row,

04:54.400 --> 04:59.480
because it equates to only a single bit difference between each character.

04:59.480 --> 05:02.920
This allows the keyboard to be mechanically simpler.

05:02.920 --> 05:07.760
You have to remember that, at this point, hollery for mechanical keyboards were often

05:07.760 --> 05:13.600
used to physically punch data into card or tape to be fed into the computer.

05:13.600 --> 05:18.840
And so this character set lacked elegance and practicality.

05:18.840 --> 05:24.280
And so, in collaboration with other global standards authorities, including the UK and

05:24.280 --> 05:30.920
Europe, the arduous process of determining a satisfactory 7-bit standard began.

05:30.920 --> 05:35.320
Now I won't bore you with each subsequent revision, but I can tell you that it would

05:35.320 --> 05:41.360
take another 6 years before the standard was agreed, with the vertical line phasing in

05:41.360 --> 05:46.840
and out of existence throughout.

05:46.840 --> 05:52.600
By the 12th of May 1966, we had this setup, which looks much better with corresponding

05:52.600 --> 05:59.880
shifted values in the correct rows, and the ability to create subsets of the main set.

05:59.880 --> 06:05.640
The idea here was that the four middle columns could be taken as an international subset

06:05.640 --> 06:10.960
and used on 6-bit machines, leaving some of the outside characters as part of the greatest

06:10.960 --> 06:12.860
7-bit set.

06:12.860 --> 06:18.040
Some of these outline characters could also be repurposed as part of a national set for

06:18.040 --> 06:21.520
localised accents and other requirements.

06:21.520 --> 06:27.360
Based around this draft, the international standards organisation would draft this proposal.

06:27.360 --> 06:31.000
You can see some characters are designated for national use.

06:31.000 --> 06:36.400
We also have a pound symbol where hash was, giving you some idea as why Americans refer

06:36.400 --> 06:39.520
to the hash as the pound symbol.

06:39.720 --> 06:46.560
However, even though this draft had international approval, it caused some upsets, mainly with

06:46.560 --> 06:50.120
an IBM user group known as SHARE.

06:50.120 --> 06:56.040
The chairman, H.W. Nelson, would pen an irate letter to the ASA, entitled

06:56.040 --> 07:02.440
The Proposed Revised American Standard Code for Information Interchange Does Not Meet

07:02.440 --> 07:05.800
the Requirements of Computer Programmers.

07:05.800 --> 07:11.240
This point was there weren't any characters in the international subset that could be

07:11.240 --> 07:17.600
used to satisfactorily represent the logical operations of ALL and NOT.

07:17.600 --> 07:23.920
His proposal was that the code table be arranged like so, with the vertical line, or logical

07:23.920 --> 07:30.600
ALL, at position 2-3 and the NOT, or negate symbol, at 2-4.

07:30.600 --> 07:36.160
This would allow for operation of programming languages, such as IBM's Programming Language

07:36.160 --> 07:42.160
1 universally, and on a wider variety of systems.

07:42.160 --> 07:48.120
But as the original ISO draft had already been accepted, changes would be difficult,

07:48.120 --> 07:51.960
so a compromise was made.

07:51.960 --> 07:57.880
Both the circumflex and exclamation mark would need to allow the ability to interchange with

07:57.880 --> 08:04.240
the logical NOT and logical ALL symbols respectively, as if they were some kind of shape shifters.

08:04.240 --> 08:09.880
So in some uses, such as programming, pressing these key commands would create logical symbols,

08:09.880 --> 08:14.240
and outside of programming or on a different machine, they would produce their original

08:14.240 --> 08:15.640
symbols.

08:15.640 --> 08:21.200
In an attempt to appease this significant and important programming community, the standard

08:21.200 --> 08:24.720
document was annotated as thus.

08:24.720 --> 08:29.680
It may be desirable to employ distinctive styling to facilitate their use for specific

08:29.680 --> 08:37.040
purposes, as for example to stylise the graphics in code positions 2-1 and 5-14 to those frequently

08:37.040 --> 08:42.240
associated with logical ALL and logical NOT respectively.

08:42.240 --> 08:48.320
The original vertical line, found in 712, was then broken, so that users would not mistake

08:48.320 --> 08:53.280
it as the logical ALL symbol, which would then create an erroneous output.

08:53.280 --> 08:56.040
And the ASCII-character codes were formed.

08:56.040 --> 09:02.840
So this broken bar would become ASCII-character 7C, and you get that with the formula 16 times

09:02.840 --> 09:08.440
x plus y, where x is the column number and y is the row number.

09:08.440 --> 09:15.600
That gives us 124, which is 7C in hex.

09:15.600 --> 09:19.000
Which brings me onto my sponsor, Squarespace.

09:19.000 --> 09:24.400
Now this is my last slot in this run with Squarespace, so I want to give them a big

09:24.400 --> 09:31.200
thanks for supporting me and frankly allowing me to upgrade some of my videography equipment.

09:31.200 --> 09:34.640
Look out for some improvements in future videos.

09:34.640 --> 09:39.200
But if you want to create your own website for, well, any purpose, be it business or

09:39.200 --> 09:42.000
pleasure, Squarespace has your back.

09:42.000 --> 09:46.320
It's incredibly simple to get a website up and running with a custom domain using their

09:46.320 --> 09:50.440
platform, with effortless tools and guides to help you along.

09:50.440 --> 09:58.880
And right now you can grab 10% off your first purchase by visiting the link in the description.

09:58.880 --> 10:04.000
But remember this is the last sponsor segment in this run, so don't hang about, check them

10:04.000 --> 10:11.440
out with the link below.

10:11.440 --> 10:18.320
And so, on the 5th July 1967, this would become the American Standards Code for Information

10:18.320 --> 10:24.720
Interchange, or ASCII, with the equivalent ISO 464 code published as a recommendation

10:24.720 --> 10:31.560
in December of the same year, ensuring that text remained readable and usable across multiple

10:31.560 --> 10:32.560
machines.

10:32.560 --> 10:39.040
So, all fonts going forward would be created around this code set, with the keyboard interface

10:39.040 --> 10:45.240
generating the correct signals to call the relevant characters up from ROM or software.

10:45.240 --> 10:51.760
So this explains why we have our broken vertical bar on the keyboard, and indeed why it appears

10:51.760 --> 10:53.640
in our software.

10:53.640 --> 10:59.160
It was part of the character set from 1967 onwards, but as it was no longer needed for

10:59.160 --> 11:05.600
its original operation, computer programs began repurposing it for their own uses.

11:05.600 --> 11:10.600
So going back to our initial example, this is how DOS ended up using it for the useful

11:10.600 --> 11:11.600
pipe command.

11:11.600 --> 11:16.480
Although, like a lot of things, really it was stolen from Unix, which had been using

11:16.480 --> 11:19.240
it since the early 70s.

11:19.240 --> 11:25.520
But something happened between 1967 and the release of DOS and the IBM PC compatible that

11:25.520 --> 11:36.880
should have had implications.

11:36.880 --> 11:39.880
Enter ASCII 1977.

11:39.880 --> 11:49.240
Yeah man, the 70s were a different, funkier time, and it meant that what was once taken

11:49.240 --> 11:51.240
out went back in.

11:51.240 --> 11:57.880
Yes, ten years on, and with the share group apparently a distant memory, ASCII 1977 went

11:57.880 --> 12:02.800
about undoing the compromises of the original ASCII 1967.

12:02.800 --> 12:07.360
The hash symbol could no longer be replaced by the pound, the circumflex could no longer

12:07.360 --> 12:14.040
be stylized as logical not, and importantly the exclamation mark could no longer be stylized

12:14.040 --> 12:16.160
as a vertical bar.

12:16.160 --> 12:22.920
This meant the original 7C broken bar was repaired to be a beautiful, full flowing,

12:22.920 --> 12:23.920
continuous bar.

12:23.920 --> 12:27.640
Yes, it was back in business again as logical or.

12:27.640 --> 12:35.480
Internationally, these had actually been done even sooner with ISO 646 1973.

12:35.480 --> 12:42.920
It seems like it really was done just to appease PL1 programmers for a few years.

12:42.920 --> 12:48.040
So enter the IBM PC in 1981 and enter Microsoft DOS.

12:48.040 --> 12:49.040
And what do we have?

12:49.040 --> 12:52.400
Yep, we've still got that broken bar.

12:52.400 --> 12:57.280
Here we have a character that does not conform to ASCII standards.

12:57.280 --> 13:02.840
This character should not exist, but yet it does there, it does here, and it does on almost

13:02.840 --> 13:09.520
every keyboard of the 1980s and 90s, or IBM PC compatibles at least.

13:09.520 --> 13:13.560
And in fact, still a lot of keyboards up until this day.

13:13.560 --> 13:18.760
But that in part is due to the IBM PC using its own character set.

13:18.760 --> 13:23.160
This is called code page 437 and should look pretty familiar to you.

13:23.160 --> 13:28.060
It's actually an 8-bit character set, it just does away with the extra 1-bit parity

13:28.060 --> 13:33.720
check used on the original 7-bit ASCII set, and gives us a load of graphical characters

13:33.720 --> 13:39.400
commonly used for DOS programs like edit, scan disk and QBasic.

13:39.480 --> 13:44.240
All the non-ASCII characters have bespoke numbering conventions to avoid confusion and

13:44.240 --> 13:46.120
interpretation issues.

13:46.120 --> 13:51.600
I mean, it is based on ASCII, it includes all principal ASCII character codes and extended

13:51.600 --> 13:55.520
codes and it's sometimes referred to as high ASCII.

13:55.520 --> 13:59.580
I'm not sure whether that's because it looks like it's on drugs or not, but it's not strictly

13:59.580 --> 14:02.480
speaking ASCII compatible.

14:02.480 --> 14:08.640
And rather than pulling the solid vertical bar from 1977 ASCII, it uses the broken bar

14:08.640 --> 14:13.120
that IBM had been accustomed to since 1967.

14:13.120 --> 14:17.800
Now if you're from the United States or really anywhere else, you might wonder why it's

14:17.800 --> 14:18.800
down here.

14:18.800 --> 14:22.140
Well, that's because this is a UK keyboard.

14:22.140 --> 14:27.320
If you recall our earlier dollar symbol, pound shenanigans, this is why UK keyboards are

14:27.320 --> 14:30.480
commonly 62 key rather than 61.

14:30.480 --> 14:37.280
The pound symbol is on 3, meaning the hash symbol is now on an extra key down near our

14:37.280 --> 14:43.280
larger enter key, meaning the key you Americans usually have over the enter key is actually

14:43.280 --> 14:45.480
now down here.

14:45.480 --> 14:47.640
And up there?

14:47.640 --> 14:49.440
Oh god what the hell is this?

14:49.440 --> 14:51.880
We have two vertical bars now.

14:51.880 --> 14:52.880
What is this?

14:52.880 --> 14:54.080
Two pipe symbols?

14:54.080 --> 14:55.720
What is going on here?

14:55.720 --> 15:01.600
Yes, UK keyboards have a second vertical line to the left of the one key.

15:01.600 --> 15:08.480
It's shared with that logical not symbol and a grave accent, used in various languages.

15:08.480 --> 15:13.120
If you're American and you have an international keyboard, then you'll find the second vertical

15:13.120 --> 15:17.360
line on the same key as the first vertical line.

15:17.360 --> 15:21.240
I'm not sure that makes it easier to comprehend, if anything it's worse.

15:21.240 --> 15:26.320
Anyway, on a lot of character sets, these two symbols will look identical.

15:26.320 --> 15:32.920
The original pipe is ASCII007C, whilst this new one is 00A6.

15:32.920 --> 15:38.160
And it's accessed on a UK keyboard using the alt graph and the top left key.

15:38.160 --> 15:45.520
The reason it's here is due to the extended ASCII codes introduced in 1985 with ISO8859-1

15:45.520 --> 15:48.400
or ECMA94.

15:48.400 --> 15:54.520
Also known as Latin 1, it consists of 191 characters from the Latin script.

15:54.520 --> 15:57.920
On the DOS it was introduced with code page 850.

15:57.920 --> 16:02.920
You can see how it fits alongside the original 7-bit set nicely.

16:02.920 --> 16:07.160
With it, this character set reintroduced back the broken vertical bar.

16:07.160 --> 16:14.040
Yes, the bar that was broken in 1967 to stop it being used the wrong way was brought back.

16:14.040 --> 16:16.320
I guess people missed it.

16:16.320 --> 16:21.320
But this new broken vertical bar is a different character to 7C, so it doesn't really have

16:21.320 --> 16:24.800
any purpose other than to look like a broken bar.

16:24.800 --> 16:30.880
Which ironically is what 7C still looks like in a lot of fonts and on a lot of keyboards.

16:30.880 --> 16:34.720
I guess it gives you an extra tool for ASCII art at least.

16:34.720 --> 16:39.680
So if you find an international or UK keyboard from 1985 onward, you will likely find it

16:39.680 --> 16:44.800
has two solid bars, or perhaps two broken bars, or even more weirdly, it will likely have

16:44.800 --> 16:49.680
a broken bar where the solid bar should be and a solid bar where the new broken bar should

16:49.680 --> 16:50.680
be.

16:50.880 --> 16:56.640
In part, this is due to IBM's Model M keyboard.

16:56.640 --> 17:04.840
It was also introduced in 1985 and has switched the vertical bars, just like code page 437.

17:04.840 --> 17:10.640
It was also the basis for many keyboards going forward, yet it's quite confusing.

17:10.640 --> 17:16.600
So you may come across the odd font that still has the back to front implementation.

17:16.680 --> 17:21.600
Whether your keyboard has them the right way around will vary depending on your keyboard.

17:21.600 --> 17:23.400
Some will, some won't.

17:23.400 --> 17:28.320
It's amazing as we're talking about a hangover from a standards dispute that now goes back

17:28.320 --> 17:30.760
over half a century.

17:30.760 --> 17:35.360
But regardless of how they look, the operating system should still recognise them as their

17:35.360 --> 17:41.160
original intention from 1967.

17:41.160 --> 17:46.040
So that's why we have two keys with almost the same character, and it's also why those

17:46.040 --> 17:51.520
keys, or the characters represented on those keys, shouldn't actually exist.

17:51.520 --> 17:54.360
Well not in the way they're intended.

17:54.360 --> 18:02.120
So as a recap, this key was once a broken bar, represented by a broken bar on screen,

18:02.120 --> 18:09.280
but it should have been a solid bar, represented by a solid bar on screen, and mostly these

18:09.280 --> 18:12.000
days that is the case.

18:12.000 --> 18:18.600
This extra broken bar, located on some keyboards, that is sometimes portrayed as a solid bar,

18:18.600 --> 18:25.480
but is in fact a broken bar, was introduced in 1985 and is really just for old times sake,

18:25.480 --> 18:30.640
but is a distinct different character from the original broken bar, so doesn't really

18:30.640 --> 18:32.720
serve that purpose.

18:32.720 --> 18:37.800
Unless programmers give it a bespoke purpose, just like this one was.

18:37.800 --> 18:40.320
Maybe Unix can have an extra pipe.

18:40.400 --> 18:42.880
It does seem to like them, after all.

18:42.880 --> 18:48.800
Or maybe YouTubers can just use them in video titles, as a separation mark.

18:48.800 --> 18:53.920
So I hope that explains something you probably never cared about, or possibly made it more

18:53.920 --> 18:55.480
confusing for you.

18:55.480 --> 19:00.280
In any case, thanks for watching and have a great evening.

