WEBVTT

00:00.000 --> 00:05.840
Welcome. This is the tutorial for a conch. If you're not here for a tutorial on conch, you're really in the wrong room.

00:08.160 --> 00:13.080
But we hope you're in the right room. Yeah, we think this room is the best actually. You made a good choice.

00:16.760 --> 00:22.120
You can introduce yourself. Hi, I'm Anthony Scopatz. I work for Quonsite and according to the slide

00:22.120 --> 00:28.280
I am both a madman and a poet, so I hope that this inspires you in some way today.

00:29.240 --> 00:31.800
I'm Gil Forsythe, not Gorsythe.

00:33.440 --> 00:37.840
I am also a madman and a poet according to the slide. I currently work for Capital One.

00:39.480 --> 00:44.360
Yeah, that's why I got it. Yeah, and thanks for being here with us 8 a.m. on a Monday morning.

00:45.080 --> 00:48.880
Not everybody wants to learn about new show languages at 8 a.m. on Monday morning, but

00:50.400 --> 00:52.400
so we have a few bits of

00:53.360 --> 00:59.120
bookkeeping and just want to get everyone kind of set up and ready to go. If you've been to a lot of, or any slide

00:59.120 --> 01:01.120
part tutorials before, sort of the

01:02.120 --> 01:08.080
the usual mode of presentation interaction is Jupyter Notebooks, and those are great. It works really badly

01:08.440 --> 01:11.960
if what you're teaching is like a show language and prompt.

01:12.760 --> 01:16.120
So we actually just do need you to install the stuff, and then we will

01:17.400 --> 01:21.280
be sort of live coding and have slides at the same time, and we're, you know,

01:21.280 --> 01:25.560
we'll be running around and help and stuff. But so if all of you can just take a few moments and we'll run around

01:26.560 --> 01:31.760
to troubleshoot and install Conch, we highly recommend using Conva for this, but

01:32.080 --> 01:36.960
there's other options. Yeah, and there's a new release as of last night at 10 p.m.

01:36.960 --> 01:40.200
So if you haven't updated since then, please

01:41.200 --> 01:44.200
there's a bug fix. Sorry, the code has bugs.

01:44.280 --> 01:54.720
Like all code. So yeah, please grab the 0.9.8 release, and we'll go from there. So who has

01:55.120 --> 01:57.120
Conch installed right now already?

01:58.160 --> 02:05.720
Okay, most of you, and if you don't, like just grab it, it should take two seconds because it is pure Python, thankfully.

02:07.040 --> 02:09.120
So you don't have to deal with like weird

02:10.040 --> 02:16.160
Fortran rust extension interactions and stuff or read line read line. Oh, yeah, we don't have to deal with read line

02:16.560 --> 02:18.560
Everyone's favorite library

02:19.120 --> 02:21.120
Three three chairs for read line

02:21.520 --> 02:27.360
No, no, no chairs. Okay. Wow. We got one tough crowd one one one one chair. Wow

02:28.440 --> 02:30.440
Nice input RC. There you go

02:31.680 --> 02:33.680
Thank you. I'll be here

02:33.680 --> 02:35.680
What?

02:39.120 --> 02:44.760
Alright, so oh, and we we should send out the link to the slides as well. So

02:47.040 --> 02:49.040
Slides should be at

02:52.440 --> 02:57.400
Conduct SH this is what's that repo called is it like conch?

03:02.440 --> 03:07.160
While people are installing conch and for people just coming into the room, please install conch

03:09.160 --> 03:13.880
I just want to sort of do a quick poll the room get a sense of who y'all are and why you're here

03:14.680 --> 03:18.280
So who here uses bash on a regular basis?

03:18.960 --> 03:20.960
Okay, any Z shell users?

03:21.440 --> 03:23.440
Okay, fish

03:23.560 --> 03:29.360
One, okay. Yeah, one cheer for fish one cheer for real on to you. Okay, fish got two chairs. All right. Has anybody used conch already?

03:30.320 --> 03:32.320
All right

03:35.400 --> 03:38.160
Okay, who here really likes bash?

03:40.120 --> 03:43.120
That's okay. No, no, there's nothing to be ashamed about. There's an open question

03:43.120 --> 03:47.840
We're not we're not here to know who here remembers the syntax for a for loop and bash that looking at stack overflow

03:48.560 --> 03:51.080
Okay, no, no, some people can do that. That's totally cool

03:51.240 --> 03:56.320
Who here remembers how to tokenize a non-whitespace string and bash without looking at stack overflow?

03:57.200 --> 04:01.000
Both so I'll believe you. I'm not gonna I'm not gonna you know, call you out there. That's good. Okay

04:02.880 --> 04:08.200
So while we get the slides everybody, I mean one of the things conscious for many things

04:08.960 --> 04:12.600
Partially, it's the to suit our mad desires

04:13.000 --> 04:17.960
But also it was a lot of these things which seem like they should be simple and easy to remember aren't

04:18.400 --> 04:22.000
and a lot of us are dealing on our daily workflows with

04:23.400 --> 04:25.800
Language decisions from the 70s which made a lot of sense

04:25.800 --> 04:32.760
But maybe we don't like want there to be a difference between single and double quotes all the time or like maybe we don't want to have that many square brackets in a row

04:33.560 --> 04:38.960
And so this is an effort to remove that pain because this should be a relatively

04:39.560 --> 04:44.760
Seamless and sort of fun interaction and you should just be able to do the things you want to do without struggling through it

04:46.560 --> 04:50.600
I think we probably can I don't have the slide link okay

04:51.600 --> 04:55.520
Are people and mostly installed and ready to go have contra running

04:56.880 --> 05:00.760
Cool, is anybody not have contra and that would be I guess the question to ask okay

05:01.240 --> 05:06.000
We're still going to be talking for just a bit so and we can we can catch up as we go

05:08.760 --> 05:10.760
Okay

05:11.520 --> 05:13.520
Also just a quick tante check if you can run

05:15.160 --> 05:19.960
Every time we say like the sound like co or something it's always gonna start with an X just a fair warning

05:20.360 --> 05:25.920
So if you can run config, it's x o n f i g in your conch shell

05:26.120 --> 05:29.360
That should probably not say what it says here

05:29.360 --> 05:34.120
Maybe should say zero point nine point eight at the top just so we were sure we're on roughly speaking the right versions

05:35.960 --> 05:41.840
I do have the link, but I don't know a good way to get it to you guys other than I'll just put it here

05:41.840 --> 05:45.160
So if you want to follow along with the tutorial

05:46.040 --> 05:48.040
You

05:49.920 --> 05:53.640
Can go to this link so it's conch.github.io

05:54.440 --> 05:56.440
sci-pi-2019-tutorial

05:57.160 --> 06:00.800
Slash remote HTML. We're sorry about the URL. Yeah

06:02.560 --> 06:04.560
Only a little sorry

06:06.240 --> 06:11.040
But yeah, you can click along and follow so you can skip ahead in the slides or go back

06:11.040 --> 06:13.520
There's some exercises and things like that and so

06:14.280 --> 06:16.280
Bring that up now

06:18.640 --> 06:22.000
Okay, I'll let you guys do that and then we'll

06:22.000 --> 06:24.000
Do

06:42.000 --> 06:44.520
Okay, that seems good. Yeah, great

06:45.800 --> 06:47.200
Okay, so

06:47.200 --> 06:50.440
Quickly just like an overview of just some things that you'll see us doing a lot

06:50.440 --> 06:53.520
And you should also feel free to do while you're interacting with the shell

06:53.920 --> 06:57.800
We don't have explicit slides about this because they're just sort of general overall

06:58.040 --> 07:00.600
Like things you can do in a shell or in conch anyway

07:00.960 --> 07:06.240
But if you see us do something like we obviously hit one key and something happens and you want to know what just happened

07:06.240 --> 07:11.040
Please just ask us if it if it seemed like it came out of nowhere or we're not trying to make this opaque

07:12.680 --> 07:15.480
So generally speaking there's tab completion. Oh, yes

07:18.200 --> 07:23.520
Oh from the there's an there's an L right at the end. Yeah, so it wrapped a little

07:25.680 --> 07:30.800
Yeah, I was getting well the directory doesn't have an index.html I can fix that in a moment, but

07:32.600 --> 07:34.600
Yeah

07:35.200 --> 07:39.600
Generally speaking this tab completion for almost everything so it'll save you time when you're typing

07:40.720 --> 07:42.240
Beware of that

07:42.240 --> 07:45.280
Does anyone not know what tab completion is? No, no shame

07:46.200 --> 07:48.200
All right great

07:48.800 --> 07:50.960
This will mean less for you at the beginning of the tutorial

07:50.960 --> 07:52.640
There's a lot of history search functionality

07:52.640 --> 07:55.040
You probably don't have much of a conch history at the moment

07:55.040 --> 07:58.240
So that won't mean that much but there are several ways to search up

07:58.680 --> 08:03.840
We'll kind of touch on those a little bit later control R as your friend that will kind of give you an anywhere

08:04.200 --> 08:07.480
Line search back in your history if you start typing a command

08:07.480 --> 08:10.360
You can press up and it will do a prefix search match

08:10.360 --> 08:14.940
So like anything that's any line that started with that initial bit will show up in the results as you arrow up

08:15.480 --> 08:20.600
And you'll see this sort of ghost text showing up if you're typing the same command this sort of a

08:21.200 --> 08:27.880
History match autocomplete thing and you can just hit right arrow or I think control E to sort of expand out to that if you want

08:28.320 --> 08:32.120
Don't worry about like taking all that in at once, but we'll come back to it

08:37.320 --> 08:39.880
Yes for all the

08:40.720 --> 08:43.440
Pythonic bits in conch and we'll find out what those are a little bit later

08:43.680 --> 08:49.240
You can always append a question mark to a command and it will bring up a little help screen in the pager

08:49.240 --> 08:53.920
Or you can do a double question mark for super help for even more if you've used ipython

08:54.560 --> 08:57.840
Fair bit. This will maybe be a familiar pattern. Yes

09:01.520 --> 09:07.800
I don't think there is one it's a UT guess and should just be an open wide open network

09:08.400 --> 09:10.680
Yeah, is there another question over here?

09:15.720 --> 09:18.240
I think we did discover that yeah

09:32.160 --> 09:34.160
Okay

09:34.800 --> 09:40.920
Yeah, okay, not gonna do that live we are gonna ask everyone about questions about that during the break so we can fix something

09:40.920 --> 09:43.640
That wasn't working and that would be but that's good news awesome

09:45.080 --> 09:48.000
Okay, are there any questions?

09:50.080 --> 09:52.080
Okay

09:53.480 --> 09:54.840
All right

09:54.840 --> 09:58.240
So yeah, there's was that a question. No, all right

09:58.240 --> 10:03.760
So everyone has conch working that can if you ran the sorry the config

10:04.680 --> 10:06.680
Let me just go into the

10:12.080 --> 10:16.440
Okay, so you should have been able to run the config command and see some output like this

10:16.480 --> 10:19.800
So if is everyone kind of at that stage?

10:22.600 --> 10:25.440
The cut oh, yeah, it's it's config with an X

10:28.760 --> 10:32.080
You're gonna love that X key in the next four hours. All right

10:32.920 --> 10:35.120
Okay, so we've got our agenda here

10:35.120 --> 10:40.200
We'll be taking some breaks in between these things and we're gonna be building up to sort of greater and greater capability

10:40.880 --> 10:46.000
Over the time. These are links. So if you have the slides up you can jump around if you want to

10:46.960 --> 10:50.320
And there are exercises at the end of each little section. So

10:51.880 --> 10:54.760
That's a gonna do the shuffle here

10:54.880 --> 10:56.880
So

10:59.160 --> 11:06.520
Conch is a superset of Python 3 so what that means is that all of the syntax that's in

11:06.680 --> 11:09.320
Python is also valid conch, right?

11:09.320 --> 11:11.320
So there's no so if you know Python

11:12.000 --> 11:16.320
Pretty well or really well or extremely well everything should be familiar to you

11:17.560 --> 11:21.440
And so you can do a bunch like basically everything that you would be able to do in Python, right?

11:21.480 --> 11:25.040
Like to find classes functions modules etc

11:26.200 --> 11:32.160
So we can go ahead and you know do these along with us like you know when they come up

11:32.160 --> 11:38.320
So let's try some in the mount. Oh, these are our first exercises actually. So the the first one is to

11:38.720 --> 11:40.720
compute the product of

11:40.880 --> 11:42.640
two three and seven

11:42.640 --> 11:44.640
the second one is to

11:44.640 --> 11:48.320
Import numpy or import sys if you don't have happened to have numpy installed

11:49.040 --> 11:52.800
And then also define a function you can do this all this right at the command line

11:52.800 --> 11:56.760
You don't need to go anywhere else. You don't need to do this in a file. So

11:58.280 --> 12:01.160
Try these out you can click on the details to get the answer

12:01.560 --> 12:05.920
And we'll give you guys a couple of minutes to try this stuff out

12:06.800 --> 12:09.640
And also be solving it very slowly in real time

12:19.200 --> 12:21.200
I

12:22.920 --> 12:28.240
Think you can go wow 42 what a what an auspicious number there

12:32.160 --> 12:40.640
Can we import a module Gil yes wow that's that's pretty impressive

12:48.320 --> 12:50.320
Oh

12:55.240 --> 12:57.940
We're in real life we should be like yeah, yeah, sorry

13:05.080 --> 13:07.080
No, I'll still in relay

13:08.520 --> 13:10.520
Yeah

13:13.360 --> 13:17.640
Sorry, I was in developer mode right there there we go

13:18.960 --> 13:22.120
So you're saying yeah, you should see there's a lot of tab completions available

13:22.120 --> 13:25.160
So if you import or I'll do sys actually too because that's one

13:25.920 --> 13:32.760
You can just hit tab after the dot and those will be all of the attributes and modules that are available in sys. Yep

13:34.760 --> 13:36.920
I forgot the last one the function

13:39.760 --> 13:42.360
Does anyone have any problems or questions these

13:43.360 --> 13:48.840
It's pretty simple right so this is just to prove to you that contrary is Python

13:54.160 --> 13:57.880
Yes, yes you can well we will get to that question later

14:00.280 --> 14:05.480
So Dhar Haas's question for those of you who are listening at home was can you define a function?

14:05.480 --> 14:08.760
That's all a command on your system and the answer is yes

14:08.800 --> 14:12.400
And we'll get to how all that resolves and works later so

14:13.800 --> 14:17.960
Great question. Okay, and we'll get to it pretty soon. I think actually

14:18.720 --> 14:21.440
So conscious of shell so conscious also a shell language

14:22.240 --> 14:25.960
or more more precisely, it's really a scripting language that is

14:26.880 --> 14:34.200
Mostly shlang compatible, which if you go back to like the 60s and 70s, you know, sh

14:34.720 --> 14:42.880
Was this old or is a shell language that we all have inherited a la bash and and z shell and another and other languages like that

14:44.000 --> 14:48.220
But unfortunately, it's actually impossible the syntax is

14:48.640 --> 14:53.600
Collide and it's impossible to be both a Python and shlang compatible language

14:54.360 --> 14:59.920
And so you have to kind of choose and in conch we have chosen that Python will always win

15:00.520 --> 15:02.520
There's a couple reasons for this

15:02.640 --> 15:05.440
but mostly it's that Python is the same language and

15:06.560 --> 15:10.400
sh is not really sane in some ways like the splitting

15:11.040 --> 15:18.520
Strings on non-whitespace characters and the machinery for how all that stuff works is kind of crazy if you dig into how the shlangs work

15:19.560 --> 15:24.560
But Python always wins. So if you found a place where Python syntax isn't working

15:25.000 --> 15:27.000
That is a bug

15:27.640 --> 15:29.640
Please report that

15:29.880 --> 15:37.440
Yeah, yes, sure. Just as an example of this this issues where so this is a command that you may be familiar with

15:42.240 --> 15:46.840
But this is also a valid Python syntax if Alice and L are you know defined so

15:46.960 --> 15:48.960
So

15:56.400 --> 16:00.920
So the rule is is that if one of those things isn't defined it'll still function, right?

16:00.920 --> 16:04.200
You can just delete the variables, but it is possible to overwrite those

16:04.600 --> 16:11.680
Built-in names, and there's a way to escape that which will this is just a convenience, but that we'll get to in a bit here

16:13.280 --> 16:16.440
So the purpose of the shell is to run commands obviously

16:17.360 --> 16:21.880
And so we've got some commands here, right? So we just saw ls-l

16:22.600 --> 16:27.360
Simple one. Yeah, please type you know type this out if you if you want just prove it to yourself

16:28.400 --> 16:31.280
But this works you can do echo

16:31.880 --> 16:33.880
You can make directories

16:34.120 --> 16:37.160
And cd into those directories touch files

16:38.040 --> 16:40.040
Do all the kinds of normal things that you

16:40.680 --> 16:45.520
You would you would want to do so and I think I actually have all that test code here still but

16:46.080 --> 16:49.640
And the other thing that you can do is you can pipe, right? So if you're

16:50.680 --> 16:54.160
Familiar with piping from other shell languages you can take the output

16:55.320 --> 17:02.360
From one command and and make that the input to another and so that all works normally like you would expect in conscious well

17:03.120 --> 17:08.560
So and basically under under the covers. This is a horrible abuse of the sub-process module

17:08.880 --> 17:14.160
As you would expect with a lot of fancy features added to it. So

17:16.520 --> 17:21.760
Okay, so the next bit of kind of basic syntax in the language is our environment variables

17:21.760 --> 17:26.080
So these function a little differently than other sh lengths, but similarly

17:26.280 --> 17:32.120
So you can refer to any environment variable by prefixing a name with the dollar sign character

17:32.120 --> 17:36.680
So if you want to look up right if you want to look up a variable in the environment

17:36.680 --> 17:40.440
You can say dollar sign that variable name and then you'll get back the result

17:40.680 --> 17:47.560
So right so then the environment is this like special namespace that processes use to communicate with each other and

17:48.840 --> 17:50.840
Conch gives you access to that

17:52.760 --> 17:55.640
And you can set and delete environment variables

17:56.400 --> 17:59.800
More like you would do in Python then you would do in other

18:00.320 --> 18:06.480
Shell languages, right? So these are just normal variables that happen to live in a special dictionary mapping somewhere

18:07.120 --> 18:09.760
and so because of that you

18:10.480 --> 18:15.680
Would set them with an equal sign and then you would delete them with the Dell operator. So

18:16.240 --> 18:18.240
Shouldn't be anything

18:18.320 --> 18:22.240
To out of the ordinary there anyone have any questions about that

18:25.800 --> 18:31.000
Is there any difference between this an OS environment OS dot environment and the answer is yes

18:31.000 --> 18:34.160
There's a lot. We'll get to that in a section coming up

18:40.440 --> 18:42.840
No export is not a feature of

18:43.600 --> 18:46.080
Conch or so exporting

18:46.440 --> 18:49.760
So, okay, this is a little this is getting into the weeds a bit

18:49.760 --> 18:54.800
But I think export is a is a bad idea. You shouldn't need to explicitly export things, right?

18:54.800 --> 18:57.240
You're already doing that with the dollar sign, right?

18:57.240 --> 19:03.080
So shlings when when you export or when you define an exported variable actually don't put the dollar sign

19:03.080 --> 19:09.400
So we've collapsed those seven characters export plus space into just the dollar sign

19:10.880 --> 19:17.880
They're well, they're not they're they're process-wide. Yeah, they go into the environment for the process

19:22.280 --> 19:26.320
Oh, so dollar zero for those so the question is what about dollar zero

19:26.960 --> 19:31.680
Dollar zero is how you refer to arguments or you get your the command that you run

19:32.400 --> 19:37.760
We use dollar args for that when you're running a script. It's an environment variable

19:37.760 --> 19:40.520
It's in the docs, which we'll have a link for very shortly. So

19:41.560 --> 19:49.160
Okay, I just realized this screen. We're standing in front of it. Yeah. Yeah, okay, but we'll maybe fix that during the break

19:51.640 --> 19:53.640
Okay, yeah, these pretty normal

19:55.240 --> 20:00.840
The other thing that you can do is you can do environment very or environment look up with Python expressions

20:01.280 --> 20:03.160
using dollar sign curly brace

20:03.360 --> 20:05.160
So if you want to

20:05.160 --> 20:07.760
Compute an environment variable

20:08.920 --> 20:15.200
Arbitrarily you can you can use dollar sign curly brace. So this is a little different than how other languages do it

20:15.600 --> 20:21.320
But for example say you have an x variable that equals a string in your namespace or your user

20:22.360 --> 20:28.960
You can do dollar sign curly brace x and then that'll look up the user environment variable. So that looks up the name

20:29.960 --> 20:31.600
oops

20:31.600 --> 20:33.160
Sorry, I skipped ahead

20:33.160 --> 20:38.280
bit and or if you want to compute it with some other some other expression

20:38.840 --> 20:40.840
You can just stick that right in there

20:41.200 --> 20:42.640
in

20:42.640 --> 20:49.600
Most SH links. These are actually dollar sign and dollar sign curly brace are the same have effectively the same meaning

20:50.320 --> 20:55.320
But they have distinct meanings here effectively. They're they're subtle differences. I know

20:56.160 --> 20:58.160
But they're very different here

20:58.240 --> 20:59.480
Okay

20:59.480 --> 21:05.840
The source command so is everyone is everyone familiar with source and other languages like bash and things

21:06.560 --> 21:10.840
Okay, yeah, so so if you're not what source does is source takes of

21:11.480 --> 21:15.000
File that's written in that language. So if you're in bash

21:15.400 --> 21:21.800
And you sort you can source a bash file and it will run the commands as if you had typed them into that

21:22.160 --> 21:28.160
Session, so it's just a shortcut for executing everything in a file in in your current

21:29.080 --> 21:30.920
Interpreter session

21:30.920 --> 21:34.840
So conch the source command does roughly this does basically the same thing

21:34.960 --> 21:36.960
It reads in the contents of a file

21:36.960 --> 21:43.360
And then it executes them and it brings all the variable all the global variables and everything in the environment, etc

21:43.520 --> 21:45.520
Into the current execution context

21:46.760 --> 21:50.400
But of course this doesn't work on bash this works on conch code

21:51.560 --> 21:53.560
So if you have a very simple

21:54.200 --> 21:55.800
example file

21:55.800 --> 21:57.800
Yeah, sorry. This is

21:58.160 --> 22:00.160
Yeah, you can do that

22:01.280 --> 22:06.600
So here what we have is we're setting an environment but variable in this file

22:07.800 --> 22:10.640
We are setting a password which is a terrible thing to do

22:11.200 --> 22:13.640
And then we're defining a function. Oh

22:14.880 --> 22:18.320
You can install VAM right now if you want go for it

22:20.040 --> 22:22.040
See if I care go just

22:22.040 --> 22:27.560
Can't do that to your laptop, but it seems me. How do I do this? Oh, well, I mean we're talking about sharing passwords

22:27.560 --> 22:30.580
I'll just say my my root password out right now. Yeah, okay

22:33.840 --> 22:35.840
Yeah, so you can

22:36.880 --> 22:39.680
You can then use this function and it's it's good

22:39.680 --> 22:45.440
So basically what you do to use source is you just say source and then the file name

22:45.480 --> 22:48.600
So here source example dot xsh and then

22:49.240 --> 22:52.280
You'll see that that those variables that we had like

22:53.080 --> 23:00.480
Dollar sign email are available as well as the combined function has been brought into your local exit or your current

23:00.680 --> 23:03.240
Sessions execution context and you can you can run it

23:05.160 --> 23:09.720
You can also import at dot xsh files as well

23:09.800 --> 23:12.640
so if you want to write python modules as

23:13.520 --> 23:20.000
As conch files, you're totally welcome to do that and you can import them even in other normal python projects

23:20.200 --> 23:24.480
Not going to show that here, but if you're interested that's something you can do

23:25.040 --> 23:28.120
Okay, any questions on source?

23:30.080 --> 23:32.080
Pretty simple alright

23:33.560 --> 23:39.480
The thing that you can't do in a lot of other languages that you can do in conch is that we have a notion of sourcing

23:40.320 --> 23:44.560
Files from other shell languages that we call source foreign

23:45.400 --> 23:47.400
so imagine you have

23:47.560 --> 23:54.160
Some bash script somewhere and you want to bring that in and execute that in conch and bring all the things into your local

23:54.760 --> 24:01.040
Execution context you're able to do that just by saying source bash and then the bash script

24:01.200 --> 24:06.080
So if you've got a you know a hundred thousand lines of Z shell well one. I'm sorry and two

24:06.280 --> 24:12.760
You can still use that so this is a way to integrate to slowly integrate

24:13.280 --> 24:15.280
with other languages

24:15.360 --> 24:18.520
Which is pretty cool actually so

24:19.120 --> 24:22.840
It's pretty nice any and and by default sorry

24:23.640 --> 24:27.800
We have a so source foreign is a generic infrastructure for doing this

24:28.440 --> 24:34.800
But we have shortcuts for doing source bash source Z shell and also source command or cmd

24:34.800 --> 24:40.160
So if you're on Windows using the Windows batch processing language you can source that stuff too

24:41.040 --> 24:43.040
which is

24:43.160 --> 24:45.160
madness, but I

24:48.840 --> 24:54.600
Mean we've got a core Windows developer for the past four years who's like it works pretty well

24:54.600 --> 24:59.440
I mean there's I imagine there's folks here using it on Windows right so are there any Windows users in the room

25:00.320 --> 25:03.000
Okay, let it I mean who are on Windows right now

25:05.440 --> 25:07.440
I

25:08.600 --> 25:12.760
Think the biggest problems are usually just that our examples are very like Unixy

25:12.760 --> 25:17.600
And so we say like run this command and it's like what command is that that's that's often the problem

25:19.360 --> 25:21.000
Okay

25:21.000 --> 25:26.360
Well, so we found with that like if you're on a base Windows install and you just install get bash

25:26.360 --> 25:31.880
Then you get all the Unix commands and everything works normally and supposedly works really well on Windows subsystem for Linux

25:31.880 --> 25:33.880
But I have not tested that

25:34.800 --> 25:36.800
I

25:43.760 --> 25:46.240
Mean you can we would be very happy for you to do

25:46.800 --> 25:49.280
We may not be able to help if it goes wrong, but we'll try I

25:51.520 --> 25:55.400
Saw another question over here. All right. Okay, so source foreign

25:56.880 --> 26:00.560
Really nice capability really helpful, especially if you're just getting started

26:01.560 --> 26:08.840
The other thing like most like most shell languages. We've got a configuration file that lives in home.contra rc

26:09.560 --> 26:11.560
And this is just a particular

26:12.120 --> 26:18.720
Special xsh file and that's loaded before basically everything else is loaded. So this is where you can stick all of your

26:19.120 --> 26:20.720
Customizations

26:20.720 --> 26:22.720
Mostly a lot of people just stick

26:23.000 --> 26:25.000
environment variables in there

26:26.040 --> 26:28.240
If you're a condi user conda as

26:29.240 --> 26:33.000
Activate or whatever and it will throw some stuff in there as well

26:33.760 --> 26:34.960
and

26:34.960 --> 26:36.960
yeah, so

26:37.040 --> 26:41.840
But basically if you want to read about all of the customizations, they're on there in the doc

26:41.840 --> 26:46.720
So every every environment variable that we touch has documentation associated with it

26:46.720 --> 26:49.760
And there's a lot of like tweaks that you can do a few if you need to

26:50.520 --> 26:52.280
all right

26:52.280 --> 26:54.280
So here's some more exercises

26:54.480 --> 26:57.120
So let's go ahead and take a few minutes to do these

26:57.480 --> 27:02.840
So the first one is to just set a random integer to the environment variable dollar sign secret

27:03.880 --> 27:07.040
The next is to print the secret value

27:07.720 --> 27:08.960
and

27:08.960 --> 27:10.480
then

27:10.480 --> 27:12.480
The third is to put a

27:13.120 --> 27:17.720
Generating just some generating code for that secret value into your contrast see

27:18.360 --> 27:22.640
When conch starts up if a dollar sign safe variable does not exist

27:23.120 --> 27:26.080
So we'll give you guys a couple. We'll give you all a couple moments to

27:26.880 --> 27:28.880
to try this out

27:31.640 --> 27:36.720
And if anyone's having problems just raise your hands right now and and Gil and I will will walk around and help

27:39.320 --> 27:44.640
The next thing that are for problem for part two. There's actually a couple different ways to do this

27:45.360 --> 27:49.640
The first is that you could either echo that

27:49.640 --> 27:53.160
So if you're thinking more in a shell language, you could echo that

27:53.640 --> 27:58.200
You know my secret value is dollar sign secret as a string and that will all

27:59.040 --> 28:05.040
All push out normally or if you're in more of a Python mode, you can just print it like you would print anything else

28:05.440 --> 28:07.040
Okay

28:07.040 --> 28:09.040
Both of those are totally valid

28:09.560 --> 28:11.960
and then the last one is

28:13.240 --> 28:17.760
If you wanted to this is getting cut off I guess but

28:18.760 --> 28:22.480
This is why you have it on your own machines, too

28:24.280 --> 28:26.120
You can say

28:26.120 --> 28:33.760
In your contrast see you because it's Python you can import random because it's conch you can set the environment variable

28:34.600 --> 28:41.680
To whatever random value and then oh we actually didn't cover this in text in this exercise, but

28:43.720 --> 28:45.880
Because we've moved around some slides, but

28:46.800 --> 28:53.120
We'll get back to that last one soon enough. So, okay, so very briefly

28:54.640 --> 28:56.640
So remember how we said dollar sign?

28:57.320 --> 29:00.280
Curly brace is an expression

29:01.280 --> 29:04.080
You can you do look up by expression so

29:04.720 --> 29:06.040
this

29:06.040 --> 29:12.080
This dot dot dot in Python is the special is the syntax for the ellipsis object

29:12.880 --> 29:15.280
So we use that numpy uses it, too

29:16.160 --> 29:20.320
So we use that to be a reference to the environment itself

29:20.320 --> 29:25.320
So if you do dollar sign curly brace dot dot dot you get back the environment object

29:26.160 --> 29:31.120
Because dot dot dot is obviously not or an ellipsis is obviously not any environment variable

29:31.720 --> 29:33.280
And it's a big mess

29:33.280 --> 29:35.960
Which is why we didn't want to cover it this soon, but there it is and

29:36.680 --> 29:38.780
Well, we will get back to it in a bit

29:39.800 --> 29:41.800
Okay

29:41.800 --> 29:47.800
So, yeah, the goal here is like because it's just a mapping you can test if if things are in the environment

29:48.240 --> 29:51.000
Through through this self-lookup. Okay

29:52.480 --> 29:59.200
Wow a break already that can't be right. No, probably not. Okay, so we're not gonna break. Yeah, because it's too early. I

30:01.280 --> 30:05.720
Built up your hopes and then I'm just crushing them right now

30:06.680 --> 30:08.200
crushing it. Yeah

30:08.200 --> 30:10.760
Okay, so Gil's gonna take over for this next part

30:11.800 --> 30:13.800
And maybe

30:14.840 --> 30:17.200
I'm not gonna move this one. Yeah. Yeah, it's impossible

30:20.480 --> 30:22.480
Okay, so

30:22.600 --> 30:24.600
We've sort of looked at you can still run

30:25.800 --> 30:31.180
Sort of a sub process command like a regular term a regular terminal command shell command and you can also run

30:32.800 --> 30:36.080
Python, you know models and functions and you can sort of you know

30:36.600 --> 30:38.960
set them to environment variables and then use that but

30:39.520 --> 30:44.680
Where this really starts to come into play is when you want to be able to start mixing those two things together to sort of get

30:44.680 --> 30:46.680
the best of both worlds

30:48.560 --> 30:53.320
So the idea here is that in a lot of ways conscious makes up using sub process really really simple

30:53.600 --> 30:58.440
Instead of trying to remember like we do set this like sub process type thing somewhere

30:58.440 --> 31:03.920
And how are you gonna like parse the output and all that we just all that's being handled for you in sort of a more intuitive way

31:04.920 --> 31:13.520
And we have a number of operators we've added to sort of help with this interaction between sort of sub process mode and Python mode

31:14.320 --> 31:16.320
so the first of these is

31:16.640 --> 31:18.640
dollar curly brace

31:19.360 --> 31:23.200
Parentheses. Yes. Sorry. I do remember what keys are sort of

31:23.840 --> 31:31.640
And what it does actually similar to bash is it captures the output of a command, but then it returns as it returns it as a string

31:32.640 --> 31:35.480
And it really does return the whole string, right?

31:35.480 --> 31:39.480
So, you know the output of LS has a bunch of line breaks in it

31:39.480 --> 31:45.600
So there are a bunch of line breaks in the output what that means that if you print it you actually get what the output of that was

31:46.640 --> 31:48.640
similarly it is a

31:49.840 --> 31:51.840
It's a string right like a Python string

31:52.040 --> 31:56.040
so if you type you know x dot and then hit tab or something or just

31:56.840 --> 32:00.680
Like you have all of the Python string methods available to you

32:00.680 --> 32:04.640
So if you wanted to split that say on new lines, which might be a useful thing to do with LS

32:04.640 --> 32:09.440
Or you really like uppercase letters and you want to do that or however you want to

32:10.560 --> 32:14.600
Mutate and parse and change that captured output all of

32:15.160 --> 32:16.560
Python's built-in

32:16.560 --> 32:21.200
Helpers are already there for you. You don't need to sit there and like try to write these things yourself

32:26.440 --> 32:31.520
Okay, so the second is bang parenz

32:32.920 --> 32:34.120
and

32:34.120 --> 32:37.040
This does the same thing and then also other stuff

32:37.400 --> 32:42.440
So what it actually is returning if you run a command with this is a command pipeline object

32:42.440 --> 32:44.520
Which is a sort of a conch thing

32:45.120 --> 32:49.280
And it includes the output of the command as well

32:49.280 --> 32:54.360
But also a bunch of information about like like the PID of the process what the return code was

32:54.680 --> 33:02.360
What the actual argument you ran was if it was an alias, what did it expand out to what are the starting stopping time stamps of that command?

33:02.920 --> 33:04.920
and also

33:05.200 --> 33:12.240
This object itself is truthy. So if the return code is a success then you can actually say like you know if

33:12.960 --> 33:19.200
Bang this command, you know like print this command and if it if it's successful then that you can use that for control flow

33:19.360 --> 33:21.360
So there's sort of a way to easily

33:22.080 --> 33:24.880
Figure out like I tried to do this thing was successful. Yes, or no

33:24.880 --> 33:26.760
What was the output if it was successful?

33:26.760 --> 33:33.560
How long did it take like all of this is just available to you and sort of the the the command pipeline object that's returned I?

33:34.600 --> 33:36.600
Think this is what I just said. Yeah, I

33:40.080 --> 33:44.800
Didn't do it command, but that's okay. That's all right. Does anybody have any questions about those?

33:51.360 --> 33:53.360
Yes, and some although in Python. It's a

33:54.240 --> 33:56.400
Tilde yeah, yeah, yeah, that's right

33:56.400 --> 34:04.220
So in in Python if you wanted to negate something you use not or tilde or till does it the invert operator, but yeah

34:04.760 --> 34:06.760
Yeah

34:07.880 --> 34:09.880
Okay

34:11.560 --> 34:18.560
Okay, also so you can iterate over the output of these commands line by line in bang exclamation point. Yes

34:21.360 --> 34:23.360
I

34:31.640 --> 34:37.640
In enumerate LS and then print what does it have string?

34:42.400 --> 34:45.260
And then just I and look

34:51.360 --> 34:56.560
Probably should have stripped look, but that's that's okay. That's okay. We can do it next time. Yeah

35:01.680 --> 35:08.300
For example, right, so the new lines are still in that look in that object that look object that ends up there

35:08.960 --> 35:10.960
And this is streaming by the way

35:11.400 --> 35:16.600
So that if you wanted to stream through your command, right if you've got output that's larger than memory

35:16.600 --> 35:18.600
This is how you you'd use

35:18.840 --> 35:21.360
Bang parentheses for for that. So

35:22.280 --> 35:24.800
Also in the list of things that we may have not mentioned

35:25.200 --> 35:26.840
There is this

35:26.840 --> 35:30.680
Multi-line prompt thing that keeps happening that we've just sort of been using without mentioning

35:31.360 --> 35:34.920
But yeah, so it's like in the same way that I Python functions. This is a

35:35.640 --> 35:41.520
Full you can just keep you know as long as your you can either shift return to maintain like to force a new line

35:41.600 --> 35:44.100
But you as long as the command isn't complete

35:44.100 --> 35:49.340
It'll just keep adding a new line for you to type on two entries at the end will run the thing and then when you arrow up through

35:49.340 --> 35:53.260
Your history it will load up the full command like the full command block for you

35:53.260 --> 35:57.300
You don't need to like go and hit arrow up for each of those individual lines. You were doing right

35:57.300 --> 36:00.860
So I just hit arrow up there once and I returned the whole input

36:06.540 --> 36:11.300
So we just went over those are captured sub processes and then there are uncaptured sub processes

36:11.300 --> 36:18.420
so here again, we're using a dollar sign and bang but this time using square braces and

36:18.980 --> 36:25.380
They function the same way as the captured ones except they they don't capture and so the output of the command

36:25.860 --> 36:31.380
Still goes through to the screen to standard out or standard error depending, but you can still capture that

36:32.180 --> 36:34.180
metadata along with it

36:34.700 --> 36:36.700
So in the case of

36:36.900 --> 36:38.900
dollar sign square braces

36:39.500 --> 36:43.580
It always returns none actually and so this is

36:45.060 --> 36:46.540
More for

36:46.540 --> 36:49.660
Forcing sub process mode where the context may be a little ambiguous

36:49.660 --> 36:53.980
You want to say like don't try to interpret this as python just run this as a command instead

36:57.020 --> 36:59.020
The bang

36:59.860 --> 37:01.860
Bracket there

37:01.860 --> 37:07.380
So the output gets streamed to standard out still so you see it and it would run as if you just ran the command regularly

37:07.460 --> 37:09.460
But at the same time

37:10.460 --> 37:14.420
Similar to the information from the capture sub process about the you know

37:14.420 --> 37:20.660
Starting and stopping times the arguments that were passed in if it was successful or not all of that is returned

37:21.140 --> 37:23.140
As a result of that

37:23.260 --> 37:27.500
Operator so you can have the output still kind of like showing in front of you

37:27.500 --> 37:32.780
But still be operating on sort of you know, what were the conditions of that command did it execute successfully?

37:32.780 --> 37:34.780
Should I stop should I continue?

37:34.940 --> 37:42.140
Right, so you get this rich command pipeline object back out that you can manipulate and this particular bit of syntax is

37:42.220 --> 37:44.540
The thing that really underlies a lot of conch

37:45.580 --> 37:50.700
So the what's actually happening. So if you just run LS here

37:51.100 --> 37:58.340
What conch is doing is it's secretly adding in a bang square bracket around that LS?

37:58.500 --> 38:01.500
That's it

38:05.420 --> 38:07.820
Okay, right column type good. Oh, yeah

38:09.500 --> 38:15.660
So now that we there I would suggest we just take a few moments and just to play with each of these a little bit to get a

38:15.660 --> 38:17.100
Handle on them

38:17.100 --> 38:22.180
This is basically the end of like new syntax that we're gonna introduce largely wait except for one big one coming up

38:23.020 --> 38:28.620
But just to kind of get a sense like of how they work make sure that they match your expectations like you know

38:28.620 --> 38:30.820
Which what should be captured what shouldn't be captured?

38:31.060 --> 38:36.420
How do you interact with the attributes of these returned command pipeline objects? What is in there?

38:36.940 --> 38:39.260
Is there something you would like to be in there? That's not we can talk

38:39.940 --> 38:42.780
You can definitely work on that and just as a general

38:43.300 --> 38:45.540
Mnemonic for this because it's you know bunch of stuff

38:45.540 --> 38:48.660
I've sort of come up with like curly captures and square streams

38:48.860 --> 38:51.580
And it's a bit misleading because it's all sort of streaming in one sense

38:51.580 --> 38:56.700
But like if you want output to not show up use the curly things if you do want it to show up use the square things

38:59.180 --> 39:04.300
Does does anyone have any questions about this stuff, you know, we just threw a lot at you yeah back there

39:04.740 --> 39:06.740
The last one

39:13.540 --> 39:17.140
Almost so bang square bracket prints it but

39:17.700 --> 39:22.500
Does save it to the variable and then bang Kurt bang parentheses

39:23.260 --> 39:26.420
Prince it, but then doesn't save it to the variable. I

39:28.420 --> 39:30.420
Know yeah, so

39:31.420 --> 39:34.460
Basically what what's going on here is that?

39:36.660 --> 39:38.660
Dollar sign

39:39.300 --> 39:40.700
parentheses

39:40.700 --> 39:48.420
Returns a string right it doesn't print it, but if we wanted to stream that so we use bang. What should that return?

39:53.460 --> 39:58.500
Sorry, yeah, so what should that return?

40:00.420 --> 40:02.420
None right because

40:03.620 --> 40:05.620
No, it's not

40:05.860 --> 40:07.940
Did I do something wrong? Yeah, what did I do?

40:10.820 --> 40:12.820
No, not all it's not

40:14.300 --> 40:18.580
No, it's still maybe it's that it's like when you do a sign

40:21.940 --> 40:26.300
No, that's still the thing so oh no, sorry, haha I did this wrong

40:27.300 --> 40:29.380
Yeah

40:29.380 --> 40:37.140
So if you do dollar sign if you change these two square brackets because you want to stream the square brackets kind of look like pipes

40:39.180 --> 40:43.340
That should return none rather than a string because there's no there's nothing to return

40:44.460 --> 40:46.060
You're already

40:46.060 --> 40:52.180
This this the coat the output that's coming in has already already been consumed and printed

40:52.180 --> 40:55.380
And so it's been streamed and there's nothing left to return

40:55.740 --> 40:57.740
the

40:59.660 --> 41:06.820
Which is why you see like because we did this is none we actually got this we got this true printed behind us

41:07.380 --> 41:11.780
Even because the the command actually printed right we didn't capture it

41:12.860 --> 41:14.860
if you wanted to

41:15.300 --> 41:17.300
capture it

41:18.020 --> 41:20.020
Or if you wanted to do you know bang

41:20.900 --> 41:25.100
Parentheses the bang is what gives you the object back

41:26.020 --> 41:31.180
And whether it's streaming or not is determined based on whether it's square brackets or not

41:35.300 --> 41:40.420
Yeah, so so the way to think about this is dollar sign return strings

41:41.780 --> 41:43.780
and

41:43.980 --> 41:45.980
bang will return

41:46.020 --> 41:54.340
Something else and then square brackets or in parentheses will capture and square brackets will stream

41:57.860 --> 41:59.860
90 yeah

42:06.100 --> 42:11.340
There is there is functionally no difference between bang with square brackets and bang with

42:12.580 --> 42:14.900
And and just typing the LS command

42:15.500 --> 42:17.500
Except in ambiguous cases

42:17.900 --> 42:22.420
so in cases where you have both a Python function and a

42:23.300 --> 42:30.740
System command with the same name or a Python variable and a system command with the same name like say I just said

42:31.260 --> 42:36.820
echo equals Wow or something right if I now went to run like echo

42:39.060 --> 42:41.060
Hello world

42:42.060 --> 42:47.740
Well that'll work because the syntax is not ambiguous, but like let's say I went to write like

42:48.860 --> 42:50.220
echo

42:50.220 --> 42:51.300
like

42:51.300 --> 42:53.300
dash

42:54.820 --> 42:58.020
What's another echo minus echo for example

42:58.620 --> 43:00.620
Which would be torque totally?

43:00.900 --> 43:08.300
Normal well, okay that but we would want to print minus echo right in a normal in a normal shell

43:08.380 --> 43:15.780
But both of these are variables, and so if you need to you can always explicitly put it in bang square brackets

43:15.780 --> 43:17.780
And then it'll run

43:19.300 --> 43:25.480
Yeah, so there's two things going on here, so or there's one thing going on here one or two so there's

43:29.180 --> 43:32.940
If you're observing it there are two and then yeah, it's it's complicated

43:33.940 --> 43:41.140
Basically, what's happening is there's a formal conch language that always uses bang square bracket

43:41.980 --> 43:44.740
Okay, and then we have

43:45.580 --> 43:47.020
What we call?

43:47.020 --> 43:53.300
So there's a context free grammar that we use that always uses the square brackets

43:53.740 --> 43:57.380
Then we do this context aware

43:58.220 --> 44:05.500
Grammar munging so we know because we know what's on your what commands are available and what your

44:05.940 --> 44:13.060
Execution context is we can shoot we actually go back and rewrite the AST of your code

44:13.540 --> 44:15.540
In such a way that we think it will execute

44:16.940 --> 44:18.940
Before we try to execute it

44:19.500 --> 44:21.500
And that's what's going on

44:21.500 --> 44:27.220
And so if you need to you can always go to the formal grammar and you can even turn that off

44:27.900 --> 44:34.220
In the in the exact we're definitely not doing that in this tutorial, but you can turn that off and make sure it's always formal

44:35.100 --> 44:39.540
That's a terrible way to live because you always have to type this bang exclamation point

44:39.540 --> 44:46.060
The whole idea behind conscious to make the things as easy as possible and match what your brain thinks it should be doing

44:46.140 --> 44:52.860
Like your brain thinks, you know ls-l should be a command and it just because that's not a python variable

44:52.860 --> 44:55.420
Doesn't mean it shouldn't be a it shouldn't be something that works

44:55.420 --> 45:02.780
And so we have a lot of like heuristics that are relatively simple that get get you incredibly far

45:03.740 --> 45:10.300
And but if those heuristics fail for some reason which they are they it's very very infrequent

45:10.300 --> 45:12.300
You can always go back to the formal grammar

45:12.540 --> 45:14.540
so

45:17.020 --> 45:19.020
But

45:22.020 --> 45:25.220
Yeah, I should maybe say curves cat mnemonics are hard

45:34.260 --> 45:40.940
So so the curly braces are for like with the dollar curly braces for like an environment lookup or for accessing the environment

45:41.940 --> 45:47.020
Whereas these are more just generally capturing a command that you're running and capturing the output of it

45:49.460 --> 45:53.100
Right so this looks up a variable in the environment

45:55.620 --> 46:00.100
Yeah, rather than yeah rather than

46:01.860 --> 46:03.860
Running a command so yeah

46:10.940 --> 46:27.180
Okay, so so the question so the question is what what's going on here, so you're saying ls equals

46:31.340 --> 46:36.460
So if you say ls equals one here, okay, and then you say ls

46:37.700 --> 46:39.700
Mot you then you were saying ls

46:41.380 --> 46:43.380
Uh-huh

46:43.740 --> 46:50.260
Right, so why does this happen well this happens because l is not a variable in your python context

46:51.180 --> 46:55.100
If you just do ls, and then we dot it right this is a

46:55.940 --> 46:59.020
LS itself is just the integer one

47:00.100 --> 47:06.820
Right the the the the bang square brackets are capturing the whole thing

47:07.460 --> 47:19.500
So yeah, so if I set l equal to one and I do ls minus l you'll get zero because they're both variables

47:22.060 --> 47:27.220
Python always wins right so the Python invite the Python context always wins

47:28.940 --> 47:32.660
Yeah, your system is whatever

47:33.060 --> 47:35.060
Okay

47:38.540 --> 47:43.940
Having thoroughly confused everyone I think now we can just take a few minutes for people just to play around with these a

47:43.940 --> 47:49.780
Little more get a sense of what's capturing and what's not what comes back from these commands of what's returned and what's printed

47:50.500 --> 47:52.300
Just to build up a little familiarity with it

47:52.300 --> 47:57.220
And then we'll continue on and feel free to raise hands and we can either circulate and just answer from the podium

47:58.220 --> 48:04.180
And we could fix this curly captures thing from yeah mnemonics

48:04.860 --> 48:08.520
Is anyone having issues with their system still or installing or anything?

48:09.980 --> 48:11.980
Yeah, or do you want me to come over?

48:13.900 --> 48:20.860
Just really quickly we had a question about for people who have used vi mode in terminals or in shelves before and want to do that

48:20.860 --> 48:24.480
You can do that. You just need to set vi mode equals true

48:27.220 --> 48:33.360
Yeah, and then you can bounce around your current line using you know zero g whatever

48:35.400 --> 48:37.400
Yep, and then we'll just load it by default

48:37.820 --> 48:39.820
Yeah

48:40.260 --> 48:48.700
All right, so I think gil you want to take it away. I will take it away. Are there any lingering questions from our our personal explorations?

48:51.340 --> 48:55.460
Great you can also ask us later. That's fine. Yeah, that's totally yeah

48:55.700 --> 49:02.020
So the I think this is really the last bit of new syntax we're going to introduce but I could be wrong

49:02.020 --> 49:04.340
I'm wrong, but for a while it'll be fine

49:05.220 --> 49:07.580
So this is the the Python mode operator

49:08.660 --> 49:11.820
So we've been talking for the last bit about how you

49:13.780 --> 49:15.580
Kind of capture

49:15.580 --> 49:20.100
Subprocess output and then you know turned into you like a Python string of this command pipeline object

49:20.100 --> 49:24.020
And then how you can play around with it and inspect it and do things with it

49:24.020 --> 49:26.020
but

49:28.340 --> 49:29.580
The

49:29.580 --> 49:37.580
The at-paran operator lets you go the other way it lets you insert things from your Python sort of scope or environment into a

49:38.260 --> 49:40.260
sub-process command

49:40.460 --> 49:42.700
So what we mean is generally

49:43.540 --> 49:46.540
Conscious like parsing is pretty clever at this stuff

49:46.540 --> 49:49.100
So if you give it for instance this command like for

49:49.700 --> 49:56.860
Something in range to and then just run echo high underneath that it will do the right thing right you can put your

49:57.420 --> 49:59.620
Like echo or LS or whatever

50:00.100 --> 50:05.180
Subprocess command you want in the body of a for loop and it will just execute as many times you tell it to do and you don't need

50:05.180 --> 50:07.180
To do anything special that actually just works

50:07.780 --> 50:09.380
right

50:09.380 --> 50:11.380
What does not just work is?

50:12.220 --> 50:14.220
If you do this

50:15.060 --> 50:20.300
So you want to instead you know iterate over the value in the for loop and have it be printed

50:24.140 --> 50:28.180
You just get I twice right so because it runs that command twice

50:29.460 --> 50:33.740
And so what the at parentheses operator does it lets you

50:34.660 --> 50:38.420
Capture that Python variable and insert it into that command

50:39.420 --> 50:46.540
So what it does it what's actually doing is it's it's evaluating an arbitrary Python expression and then returning that value as a string

50:46.540 --> 50:50.460
And that can be fed into the sub-process command in this case echo

50:54.780 --> 51:02.300
And if the output is not a string in case of like lists or sets it just gets joined and returned as a string

51:05.220 --> 51:08.180
So that's what that well, so it's a little different than that actually

51:08.860 --> 51:11.540
Sorry to want want want

51:12.500 --> 51:13.860
each

51:13.860 --> 51:18.580
Element of the string is actually getting passed in as its own argument to the command

51:19.860 --> 51:23.100
So each of these are their own command arguments

51:24.820 --> 51:28.300
So and it's just that echo happens to join them together

51:29.620 --> 51:31.620
So

51:33.380 --> 51:37.300
Yeah, thanks for closing the door we're gonna close not a good idea

51:39.300 --> 51:41.300
I

51:44.340 --> 51:48.380
Any questions about this syntax or what it's doing

51:49.980 --> 51:51.980
Yeah

51:55.100 --> 52:00.820
Yeah, so like if we did LS LS would try to search for all of these

52:01.500 --> 52:08.140
Files individually. Yeah, it's running it for for each. Yeah, cuz LS takes a

52:08.460 --> 52:10.460
big argument list like that

52:14.260 --> 52:17.100
If it's iterable and not a string

52:18.660 --> 52:21.060
Right, yeah the normal way

52:28.740 --> 52:30.740
Yes

52:31.260 --> 52:33.260
Right

52:37.420 --> 52:40.100
That's what LS does yeah, yeah

52:40.100 --> 52:47.820
It's just passing each Python thing in as its own each element of the putt list is its own argument or tuple or whatever

52:51.900 --> 52:59.260
Yes, exactly, it's a it's essentially echo zero one two or echo, you know or LS zero one two

53:01.540 --> 53:03.540
Yeah

53:05.220 --> 53:13.140
Okay, yeah, so if the result of the operator two is in the first position it gets treated as an alias

53:13.660 --> 53:15.980
So you can actually have this execute commands

53:22.780 --> 53:28.620
Probably like not something don't do this mine. I guess it's a really bad pattern, but it does that

53:29.620 --> 53:35.500
Right, but this is the this is different because if you I've got a my

53:36.260 --> 53:39.020
My trace back printing on but you can see

53:40.660 --> 53:43.580
If you try to just print this

53:44.260 --> 53:50.580
Or if you try to run it without splitting that is treated as the command the name of the command spaces included

53:50.580 --> 53:52.740
And so then it can't find the command cuz hello

53:53.780 --> 53:56.780
Commit hello there echo. Hello. There is not a valid command

53:59.340 --> 54:01.340
Okay

54:04.180 --> 54:06.180
Okay

54:06.900 --> 54:11.900
Your promise for more syntax is already broken. You should just stop. I'm gonna stop saying it now

54:14.940 --> 54:17.300
So with apologies

54:20.700 --> 54:23.780
So you can wrap a regular expression in back ticks

54:24.540 --> 54:32.100
And what it will do is return a list of every file or you know thing in that in a directory that matches that regular expression as a list

54:36.380 --> 54:38.840
And it's a Python list which means you can

54:40.260 --> 54:43.940
iterate over it you can you know like stick it in

54:44.900 --> 54:48.100
List comprehension and you know like mutate all the names

54:49.340 --> 54:52.660
And you can actually do even more stuff with these things as you kind of go along

54:54.780 --> 54:56.780
If you're about yes

55:01.660 --> 55:05.060
It's the Python rejects. Yeah, yeah, it's just the re module

55:05.620 --> 55:09.500
Yeah, just a handy way to get into re.compile

55:11.380 --> 55:13.380
Yeah

55:15.780 --> 55:17.780
No, no, these are not globs

55:18.500 --> 55:21.340
Dot dot star is a rejects a

55:22.180 --> 55:24.180
Glob would just be star

55:27.860 --> 55:32.220
Yeah, anything and so we could maybe a better example would be what's a

55:42.300 --> 55:49.180
Okay, so we've got some pings in here right so like what if we wanted to if we wanted to like grab I

55:50.020 --> 55:52.420
Guess we don't have a lot with anything

55:53.500 --> 56:00.180
With I want I want png's that have the letter zero letter o and them. Yeah, so like that's right. Yeah, so do

56:01.180 --> 56:03.180
dot star oh

56:04.500 --> 56:10.940
Dot star dot slash dot png

56:11.420 --> 56:22.620
But also regular expressions are hard so if you if you wanted to use globs, let's just say somebody had mentioned that

56:24.140 --> 56:27.220
Then you can prefix the back ticks the G

56:28.220 --> 56:34.500
And then it is glob matching so you don't need to do the dot thing that's just you know like star dot md star dot png

56:34.500 --> 56:39.340
Star whatever and as an extra special bonus in Python, I think three six and above

56:39.780 --> 56:42.620
this supports recursive globing the way that

56:43.940 --> 56:49.580
Then the glob lever it does so if you do like a star star slash star dot md

56:49.620 --> 56:56.740
That will recursively glob through the entire directory structure from where you are and find every single markdown file in that whole chunk

56:56.780 --> 56:59.700
This can take a long time like beat like use this

56:59.700 --> 57:03.240
You know like if you don't find it your route and it takes forever like same thing

57:03.840 --> 57:09.400
But it's really really handy for finding all the sort of files or patterns matching something in a in a large area

57:11.920 --> 57:13.920
Any questions on

57:25.000 --> 57:29.360
Yeah, so um we can't we can't oh so the question is like

57:29.360 --> 57:35.760
What are the use cases that led us to create all these things and just as a as a as a general like contra creation story?

57:37.000 --> 57:40.640
Almost everything in here is something we were like, you know what we really need to do thing

57:40.640 --> 57:48.320
We need to do today is this thing and then we did that so they they were all created from actual and us and other

57:48.440 --> 57:51.680
Contributors people who are like I really need this to do thing X

57:52.680 --> 57:58.680
And then what we discovered along the ways that a lot of it tied in together really well without it without us having to do anything extra

57:59.360 --> 58:03.640
We'll come up on some of that stuff around the way some of the string matching and string literals work

58:04.120 --> 58:10.440
So like one thing I just showed for the globs in particular right like being able to loop through a globb list is

58:10.920 --> 58:14.880
With this syntax is a lot nicer. Yeah, right. Yeah

58:16.000 --> 58:18.000
Yeah

58:18.200 --> 58:20.200
Between

58:26.880 --> 58:34.720
So yeah, so the the question is about trading off between Python module CLI and writing something in conch for me

58:34.760 --> 58:41.680
It's a really about how much your hammering sub process. So if you're interacting with sub process a lot

58:42.720 --> 58:46.880
Like do not write it in a Python CLA right write it in conch

58:47.120 --> 58:50.880
If you want some of these extra fancy features

58:51.640 --> 58:53.640
Like you really just want to be able to glob

58:54.000 --> 59:00.320
Tick things like very quickly or you want to like search through whatever then like do you know do it in conch as well?

59:00.320 --> 59:02.320
That that's my kind of

59:02.360 --> 59:06.320
We'll see some other syntax later where there's conch specific things

59:06.480 --> 59:10.000
But at this point it's kind of like if you're doing a ton of like

59:10.760 --> 59:12.320
basically scripting

59:12.320 --> 59:13.600
You know

59:13.600 --> 59:18.480
Like then you should be using conch because it's actually meant as a scripting language unlike Python

59:22.240 --> 59:25.160
Oh, yeah, yeah, yeah, well we can talk about those afterwards

59:25.520 --> 59:30.080
Yeah, yeah, for sure first for people who work at a certain institution. They can also use all my internal ones just saying

59:30.840 --> 59:33.560
Sorry, everyone else. I'll show you other things, but um, yeah

59:35.080 --> 59:37.080
Tom I think you're next

59:38.080 --> 59:40.080
Some

59:40.440 --> 59:46.000
Yes, yep, so the question is can you import conch code and use some of this stuff in Python?

59:57.240 --> 59:59.240
So we don't have an

59:59.800 --> 01:00:05.880
Yes, if we haven't we have we don't have that particular use case lined out so much but

01:00:07.080 --> 01:00:11.000
I would say there are two things there. So one we have a

01:00:12.000 --> 01:00:14.600
Quote-unquote standard library where we have sort of

01:00:15.000 --> 01:00:20.200
Extensions and updates to standard library things to make it easier so you can do like import conch.lib.os

01:00:21.320 --> 01:00:25.680
And you get some like like you get a remove tree that actually works on all platforms and

01:00:26.200 --> 01:00:33.000
You get like if you do like some process you get a version of run that uses our thing and returns the command pipeline object

01:00:34.000 --> 01:00:37.200
And you can also just get an executor back

01:00:37.200 --> 01:00:42.760
And then you can like like you would run conch code and you're like you would run Python code through a normal like

01:00:43.080 --> 01:00:47.200
Exact thing and you can do that that might not be what you want exactly

01:00:48.320 --> 01:00:52.040
But I like the way your brain is thinking so maybe we should talk more about that

01:00:52.720 --> 01:00:54.720
afterwards, yeah, so

01:00:54.720 --> 01:00:56.880
And there was another question back there. I think yeah

01:01:03.000 --> 01:01:14.000
Yeah, in regex if right, so it's just a normal

01:01:15.400 --> 01:01:17.360
You just have to do

01:01:17.360 --> 01:01:21.200
Right, like say let me just go back to my home directory. So the question is about

01:01:21.960 --> 01:01:29.760
How do you get your dot files with a regex? Well, you just use backslash dot, which is the regex

01:01:30.760 --> 01:01:38.800
The regex escape character for the dot character. So the oops, let me go back up and show you

01:01:39.320 --> 01:01:41.320
Apparently I've got a lot of configuration

01:01:44.560 --> 01:01:46.560
So you would do

01:01:47.600 --> 01:01:49.600
Don't tell anyone

01:01:51.320 --> 01:01:53.320
Yeah, I'm secretly a bash user

01:01:55.040 --> 01:01:59.160
The so you do backslash dot and then dot star

01:02:00.760 --> 01:02:05.360
To match anything right so the the backslash dot is a literal period

01:02:13.400 --> 01:02:19.040
So I would argue that it's more sane than a lot so the question is about history

01:02:19.040 --> 01:02:25.600
How does conch deal with multi-terminal history so conch sort of cribs from the Jupiter playbook a bit so

01:02:26.160 --> 01:02:32.880
By default all of your history is stored per session in a JSON file in

01:02:33.320 --> 01:02:35.320
the standard like

01:02:35.720 --> 01:02:42.320
Configuration location so you can go back and get each sessions history and then the terminal application itself

01:02:42.400 --> 01:02:48.360
Will present that to you in whatever nice way it needs to you can also switch to a sequel light history back end

01:02:48.360 --> 01:02:50.360
if you want to store a sequel light

01:02:50.360 --> 01:02:52.120
there is

01:02:52.160 --> 01:03:00.240
Tons of there's basically as much metadata as you want in the in the history and that's very configurable through environment variables

01:03:00.800 --> 01:03:02.640
Not going to go through that right now

01:03:02.640 --> 01:03:08.000
But I was like that was the thing that that sold me unconsciously was like I was trying to figure out how I'd compile the certain version of

01:03:08.000 --> 01:03:10.200
Petsy and I couldn't remember which environment variables

01:03:10.200 --> 01:03:14.180
I had set when I ran the thing and like you can't figure it out you look at your back history like well

01:03:14.180 --> 01:03:18.760
It was one of these seven because it and then you know you do this in contra like oh it was this term

01:03:18.760 --> 01:03:22.680
It was this session when I ran this thing in the tests past those are all the environment variables

01:03:22.680 --> 01:03:24.680
I need because they're just in one self-contained file

01:03:27.360 --> 01:03:29.360
Did you have a question over here?

01:03:33.000 --> 01:03:38.840
Yes, if you run source bash you'll get the aliases from that with one caveat

01:03:38.840 --> 01:03:40.440
You might have actually seen this pop up on the screen

01:03:40.440 --> 01:03:44.680
Which is that if there are there are collisions in certain aliases and also there are things the z-shell

01:03:44.680 --> 01:03:48.880
Especially does is they have like their own built-ins and if the alias refers to those built-ins

01:03:48.880 --> 01:03:53.240
We don't pull them in because it'll just break when you try to run it because it's gonna look for a command that doesn't exist

01:03:57.040 --> 01:04:00.440
There's I think there's some experimental some yeah, some people have done that

01:04:00.880 --> 01:04:06.880
But yeah, I don't use it. So but yeah, there are people who do that. We're happy to help try to figure that out though

01:04:07.680 --> 01:04:09.680
Well, I am anyway

01:04:10.040 --> 01:04:12.040
Okay, move on but

01:04:13.000 --> 01:04:14.400
So

01:04:14.400 --> 01:04:17.600
Next up this is not new syntax for contrary way, but it's Python. So

01:04:18.200 --> 01:04:20.200
Formatted string literals are great

01:04:20.320 --> 01:04:26.000
And they're part of Python, which means if you are running punch on Python three six or higher, which you should be

01:04:26.920 --> 01:04:28.920
Then they just work

01:04:29.440 --> 01:04:31.480
And they're really fantastic if you haven't played with these

01:04:31.480 --> 01:04:36.400
I think they're like they're my favorites like simple thing that should have always been there. I think I really enjoy them

01:04:37.520 --> 01:04:39.520
And yeah, the way they work if you have a

01:04:40.400 --> 01:04:46.320
Variable defined then instead of doing a dot format or doing like the you know parentheses, you know argument

01:04:46.320 --> 01:04:49.400
You can just have a string pre-pended with an F

01:04:49.440 --> 01:04:55.760
You wrap curly braces around the variable and it just gets evaluated at you know at that time and then prints the results

01:04:55.760 --> 01:04:57.760
So it's very handy

01:04:58.520 --> 01:05:00.520
There

01:05:00.680 --> 01:05:04.040
We also have a thing that is not in play on which is called a path string literal

01:05:04.800 --> 01:05:06.800
and this

01:05:06.960 --> 01:05:14.000
If you prepend a string with a P and then you have a quote what it returns is a path lib path object of

01:05:14.240 --> 01:05:21.000
The string that's there. So for instance, if you were I went the wrong way if you do like path equals

01:05:23.360 --> 01:05:25.360
Thing

01:05:27.840 --> 01:05:31.600
You got a you know on on Linux you got a posix path on Windows you got something else

01:05:31.600 --> 01:05:33.680
But it's just using path live under the hood so it'll work

01:05:34.480 --> 01:05:38.640
If you save that to a thing you can also then use tab completion on this object

01:05:39.280 --> 01:05:41.200
Like check does that folder exist or not?

01:05:41.200 --> 01:05:45.440
You could then create that folder or I mean path. This is just using path. The path is great

01:05:45.440 --> 01:05:48.400
But we have this sort of shortcut syntax to get into it

01:05:53.040 --> 01:05:56.800
Oh, and I'll get there just a little great thing about path lib is that you can do

01:05:57.560 --> 01:06:02.360
path joining using the they out overloaded the division operator for this so you just do like

01:06:03.080 --> 01:06:08.520
Path of object divided by thing and it does the join correctly depending on the underlying operating system

01:06:08.520 --> 01:06:13.240
So it takes like all of that deep pain out of like trying to get stuff to work on windows and Linux at the same time

01:06:15.960 --> 01:06:17.400
Yeah

01:06:17.400 --> 01:06:24.280
So there are f strings from python we've added p strings the the natural question is what what does a pf string look like?

01:06:26.440 --> 01:06:31.720
And it looks like awesome is what it looks like so you can define variables

01:06:33.000 --> 01:06:34.120
um

01:06:34.120 --> 01:06:35.720
and then

01:06:35.720 --> 01:06:37.160
you can

01:06:37.160 --> 01:06:38.840
Say pf

01:06:38.840 --> 01:06:43.240
And then a string and then you can treat it like an f string in the sense that you can put curly braces

01:06:43.240 --> 01:06:45.880
And it will fill in the value of those variables in the string

01:06:46.200 --> 01:06:53.160
But it's also saying this should be a path lib path so it returns you a path lib path of the result of the f string

01:06:56.120 --> 01:06:59.720
If you have ever done a lot of painful dev ops this just might seem appealing in some way

01:07:00.280 --> 01:07:01.160
um

01:07:01.160 --> 01:07:05.960
And the other really handy thing here is uh that the environment variables

01:07:06.360 --> 01:07:08.360
They are also python objects

01:07:08.680 --> 01:07:12.760
So you can evaluate those in f strings, which means you can evaluate those in pf strings

01:07:12.760 --> 01:07:18.680
Which means you can start chaining together environment variables and other values and other things to sort of construct

01:07:19.320 --> 01:07:21.720
Paths and folders and file locations

01:07:22.280 --> 01:07:27.880
Programmatically and then once you have the path lib thing you can start saying does this exist great if not touch it like now add

01:07:27.880 --> 01:07:31.240
It over here and now move it over here. No do this thing and all of these things will be

01:07:33.080 --> 01:07:36.440
Cross-platform because uh, it's just using path lib under the hood

01:07:36.520 --> 01:07:40.520
So it doesn't you know, you don't have to worry about which slash you're using or what's being escaped appropriately

01:07:43.880 --> 01:07:47.160
Yeah, hopefully um any questions on this stuff

01:07:49.640 --> 01:07:51.640
Not too bad, okay

01:07:51.640 --> 01:07:53.000
okay

01:07:53.000 --> 01:07:59.640
So, uh, we have a couple of exercises here the first one is to look up the absolute file path of every markdown file and the tutorial repo

01:08:00.040 --> 01:08:03.320
Just you know, you can use whatever you want. You can use bash if you want to too. That's fine. Um

01:08:05.000 --> 01:08:07.400
But pf strings and glob ticks are probably your friends here

01:08:08.600 --> 01:08:11.000
um, and then um

01:08:11.400 --> 01:08:16.120
A phone here is uh to load up a dictionary of every conda package you have installed in your current environment

01:08:16.600 --> 01:08:19.000
If you're not using conda you can just skip this one. That's okay

01:08:19.160 --> 01:08:25.720
If you have a questions, of course, just ask us and we'll come around

01:08:30.920 --> 01:08:33.240
Yeah, so load it up as a python dictionary

01:08:40.200 --> 01:08:41.400
Well

01:08:41.400 --> 01:08:46.840
The hint is important. Yeah, I run that conda list json command and then I would go from there. Yeah

01:08:49.400 --> 01:08:51.400
All right

01:08:52.280 --> 01:08:57.640
Okay, well then I think we'll go on to the next section, which is the environment

01:08:59.880 --> 01:09:03.640
Um, so we um, we touched on this earlier just for a moment

01:09:03.640 --> 01:09:06.440
But this will be a little more of what's going on and what you can do with it

01:09:07.000 --> 01:09:10.200
um, so the uh environment actually lives in

01:09:10.920 --> 01:09:15.480
Dunder conch dot env that's the everything in in conch is living in this dunder conch thing

01:09:15.480 --> 01:09:20.440
Like that's where all of the the various bits and pieces are if you want to explore and play around. It's all in there. Um,

01:09:21.160 --> 01:09:23.000
but uh

01:09:23.000 --> 01:09:24.120
The um

01:09:24.120 --> 01:09:28.520
The dollar curly brace ellipsis is the is a shortcut to that that object

01:09:28.520 --> 01:09:31.400
So you don't have to always just type dunder conch dot em to get there

01:09:32.360 --> 01:09:33.240
um

01:09:33.240 --> 01:09:39.560
As we mentioned earlier just ready you can check for membership in the environment just using, you know string in

01:09:40.360 --> 01:09:42.360
environment

01:09:43.160 --> 01:09:50.360
And you can also ask for help for environment variables. So there are a lot of environment a lot of different modes and

01:09:51.640 --> 01:09:54.120
Kind of extras are enabled via environment variable

01:09:54.920 --> 01:09:59.240
So if you know the name of the environment variable you see it they all have default values

01:09:59.240 --> 01:10:03.000
So if you see something that is in your environment, you're like, what is auto cd and why is it false?

01:10:03.480 --> 01:10:06.040
You can ask for help and it will tell you

01:10:06.760 --> 01:10:09.800
That if you turn it on then you can just type the name of directory and if it exists

01:10:09.880 --> 01:10:12.040
It'll just cd into it without you having to type cd

01:10:13.240 --> 01:10:14.440
Um

01:10:14.440 --> 01:10:15.960
Huh

01:10:15.960 --> 01:10:18.280
Yeah, the help is a method. Yeah, help is method

01:10:22.040 --> 01:10:26.760
Yeah, and also they the docs will tell you if something's configured a month. There are a few environment variables that you are not allowed to configure

01:10:28.600 --> 01:10:30.360
So we don't let you

01:10:30.360 --> 01:10:32.360
um, so

01:10:32.680 --> 01:10:35.960
Also something that's very different from uh bashland here

01:10:37.800 --> 01:10:39.800
Is that um

01:10:40.120 --> 01:10:45.080
Contra environment variables are python objects. Um, and that also means that they're typed

01:10:46.440 --> 01:10:49.080
You can begin of arguments about typing in python, but not now, please

01:10:50.040 --> 01:10:56.200
But they do all have types and um, sometimes those types are actually imposed based on a variable name

01:10:56.920 --> 01:10:59.960
Particularly and the important ones or anything that ends with path

01:11:00.840 --> 01:11:04.840
Is going to automatically be converted into what's called an end path

01:11:05.800 --> 01:11:09.560
And if you've ever had the scenario, let's just we can we can do a show of hands or not

01:11:09.560 --> 01:11:12.120
But where you've like sourced your bash rc twice

01:11:12.600 --> 01:11:16.680
And now your path is your entire path and then your entire path and then something else again

01:11:17.640 --> 01:11:20.120
Wow, we've got four. Wow. Wow. That's just not even the

01:11:20.680 --> 01:11:22.520
That was that that was a raised hand. Yeah, so we've we've all

01:11:22.760 --> 01:11:26.040
Many of us have been have been in this pain place before that's terrible

01:11:27.080 --> 01:11:33.400
So in conch that is not this is not a colon delimited string and which comes back to how do you split a non white space delimited string?

01:11:33.800 --> 01:11:36.360
Anyway, um, you don't because that's terrible

01:11:37.000 --> 01:11:39.000
But so path is an end path

01:11:39.080 --> 01:11:42.680
Which just means that it's a it's a list of the items on your path

01:11:42.760 --> 01:11:49.800
But this acts like a list which means you can do things like pop individual elements at arbitrary positions out of the path

01:11:50.200 --> 01:11:54.040
Or you can insert directories into arbitrary positions in the path

01:11:55.720 --> 01:11:57.720
Which is great

01:11:59.000 --> 01:12:01.000
Really really great

01:12:01.560 --> 01:12:03.560
Yeah

01:12:09.080 --> 01:12:12.440
No, it's just so just in this if you're if you're mutating your path in your session here

01:12:12.840 --> 01:12:15.160
It it will last for that session until you exit out

01:12:15.240 --> 01:12:19.560
It won't like also it will not like translate like a separate terminal into you have open

01:12:19.800 --> 01:12:23.640
Those are going to be totally separate if you want the question is if you start conch

01:12:24.120 --> 01:12:27.400
When you play the path and then exit it you're backing the root bash show

01:12:28.360 --> 01:12:35.160
Yes, yeah, yeah, but if you so if you wanted to do path manipulation for all of conch you would put that in your conch RC

01:12:38.360 --> 01:12:41.400
No, because why are you launching conch from bash just that is your

01:12:42.760 --> 01:12:45.240
I mean that that's the real answer, but the

01:12:46.200 --> 01:12:48.200
the reason you can't do that is

01:12:48.520 --> 01:12:53.640
Uh, it has to do with how processes communicate. And so if you want to push

01:12:54.440 --> 01:12:57.000
Environment variables into a parent process

01:12:57.640 --> 01:12:59.640
The parent process has to source

01:13:00.440 --> 01:13:02.440
Something coming from the child

01:13:03.160 --> 01:13:05.560
And so you have to be able to source

01:13:06.120 --> 01:13:11.400
Like you would have to get conch to dump out the environment in a way that like bash or something could source

01:13:23.640 --> 01:13:25.640
Again

01:13:31.000 --> 01:13:33.480
So so we do that. Yeah, yeah, so you okay, so

01:13:34.280 --> 01:13:37.720
Maybe there's a solution for you. It'll be ugly, but it'll work. Maybe you find out

01:13:38.760 --> 01:13:41.560
Yeah, yeah all this all sub processes get this path

01:13:44.120 --> 01:13:48.040
Well, sorry the question is is how are you the question is how are you supposed to start conch?

01:13:48.360 --> 01:13:51.400
So there's there's basically two ways to do it maybe three

01:13:51.400 --> 01:13:54.280
I'm going to say two one is you open a terminal

01:13:54.520 --> 01:13:57.960
It's running some like 1970s piece of software doesn't work really well

01:13:58.200 --> 01:14:00.520
And then you type conch and then you're in something better and newer

01:14:01.240 --> 01:14:05.240
The other thing is depending on your on your operating system of choice

01:14:05.400 --> 01:14:08.040
You can just have it start as your default shell on linux

01:14:08.040 --> 01:14:12.440
This means adding it to etsy shells and then setting it on if using i-term

01:14:12.440 --> 01:14:15.160
You can actually just have a profile that launch that you can say like

01:14:15.160 --> 01:14:18.280
I want you to launch this executable when I open a terminal or this profile

01:14:18.360 --> 01:14:24.040
Yeah, basically any terminal emulator in the unix land will let you set the the launch program

01:14:24.040 --> 01:14:26.040
So you just set that to conch

01:14:26.040 --> 01:14:31.960
Or you change your etsy shadow or you change your etsy shadow if you want it to be a true login shell, which conch can be

01:14:37.080 --> 01:14:40.760
So yeah, it's in conch back there's docs there also there are docs on that on the website

01:14:40.760 --> 01:14:44.840
So if you really there's platform specific doc, so if you want to go look up that you can see that

01:14:44.920 --> 01:14:46.920
It's right in the at the very top

01:14:48.680 --> 01:14:53.000
So the paths are n paths are back environment stuff other variables are booleans other ints

01:14:53.960 --> 01:14:59.560
Whatever they are like when you grab that environment variable in conch it will be its true type, you know, it'll tell you that

01:15:00.600 --> 01:15:04.600
That said if you need to like some some subprosk man's require

01:15:05.000 --> 01:15:08.600
You know these things to be fed to them as strings and so conch does that for you

01:15:09.240 --> 01:15:13.480
And by de typing it and you can also explicitly request these de typed things

01:15:14.520 --> 01:15:17.560
So you're asking like how do you manipulate your path and then do it you could

01:15:18.360 --> 01:15:19.560
I mean

01:15:19.560 --> 01:15:21.400
Like de type it

01:15:21.400 --> 01:15:24.360
overwrite your bash rc exit out and then source again

01:15:25.400 --> 01:15:26.920
that would be

01:15:26.920 --> 01:15:32.600
Moderately terrible, but it would work as long as it was an absolute path and you weren't like recursively sourcing it would probably work. Yeah

01:15:37.320 --> 01:15:39.320
Yeah, you can also do de type get back

01:15:40.600 --> 01:15:43.480
Yeah, and so that will depending on what it should look like

01:15:44.200 --> 01:15:48.200
In the base environment will do you know give back zeros or ones not trues and

01:15:50.760 --> 01:15:53.560
Paths get get turned into colon delimited strings

01:15:56.200 --> 01:15:58.200
Yeah

01:15:59.560 --> 01:16:04.360
There's a couple of other handy methods on the environment itself

01:16:05.320 --> 01:16:07.640
In particular one that's very handy is swap

01:16:08.600 --> 01:16:10.680
And so what swap does is what swap does with

01:16:11.480 --> 01:16:17.800
In general actually, but so you can swap in a new value

01:16:18.200 --> 01:16:21.160
It basically overwrite something and it's a context manager

01:16:21.400 --> 01:16:24.600
So only for that block of the context manager

01:16:24.680 --> 01:16:30.600
You can mutate certain elements of your environment and then they will get undone as soon as you are out of the context manager

01:16:37.560 --> 01:16:39.560
Like

01:16:39.560 --> 01:16:41.560
That

01:16:42.680 --> 01:16:44.040
Then

01:16:44.040 --> 01:16:46.200
If we try to access this down here

01:16:47.160 --> 01:16:50.680
It doesn't work because some of our has been removed from the environment

01:16:51.880 --> 01:16:53.880
So this is really useful for like

01:16:54.360 --> 01:16:58.680
Temporarily modifying your path or temporarily entering like a new in

01:16:59.400 --> 01:17:04.600
A new context that you need to run something in like say you want to switch between a million versions of CUDA for some reason

01:17:04.920 --> 01:17:07.560
Like this is a way to no one would ever do that. No one would ever do that

01:17:08.280 --> 01:17:10.280
Come see my tutorial tomorrow

01:17:12.920 --> 01:17:14.920
Okay, yes

01:17:30.920 --> 01:17:32.040
So

01:17:32.040 --> 01:17:37.560
The answer is both yes and no so we don't have a particular syntax for doing that yet because that

01:17:37.880 --> 01:17:43.560
Turns out to be pretty complicated in some edge cases that we'd like to work in conch that don't work in bash

01:17:43.640 --> 01:17:49.240
But that's a whole separate thing, but you can always run commands through nv. So if you wanted to do

01:17:50.280 --> 01:17:52.280
nv sum var

01:17:52.680 --> 01:17:54.280
You know

01:17:54.280 --> 01:17:56.280
Equals 10

01:17:56.760 --> 01:17:58.760
echo

01:17:59.800 --> 01:18:01.800
Sum var

01:18:02.680 --> 01:18:06.920
Uh, well actually that so that doesn't work in bash either. I think is the thing

01:18:07.000 --> 01:18:11.560
Yeah, that's one of those that this is one of the things that doesn't work in bash that we would like to

01:18:12.280 --> 01:18:15.960
Have work in conch and so this is why this uh

01:18:19.160 --> 01:18:25.240
This is why this like we really want that to work and and that the fact that that doesn't work is why we have

01:18:26.040 --> 01:18:29.960
Swap and other things, but if you wanted to set other environment variables and things like that you can

01:18:33.000 --> 01:18:35.000
Uh

01:18:35.720 --> 01:18:38.600
In bash, I mean well, yeah, so that's a different line

01:18:39.480 --> 01:18:43.160
Right, so export will export it to everyone and then you have to unset it

01:18:43.960 --> 01:18:45.480
Which is annoying

01:18:45.480 --> 01:18:48.120
Uh, if you want to remove it afterwards, right?

01:18:49.320 --> 01:18:52.600
Yeah, so that's what swap gets you. Yeah, but

01:18:55.400 --> 01:18:57.400
Uh, yeah

01:19:02.280 --> 01:19:05.720
Yeah, yeah, you could you could star star keyword arcs into that. Oh, definitely

01:19:09.240 --> 01:19:10.760
That's there

01:19:10.760 --> 01:19:13.480
Okay, so we have a few more exercises here using this stuff

01:19:14.440 --> 01:19:20.840
Um, these are things that I'll say like I I both do on a regular basis like these are these are true life examples

01:19:21.240 --> 01:19:25.400
um, so one is um use get pass to

01:19:25.960 --> 01:19:27.960
Temporarily set your password and environment variable

01:19:28.120 --> 01:19:34.120
So this is actually so far as I can tell the only way to securely type your password into a terminal session without it ever being

01:19:34.200 --> 01:19:36.280
Saved anywhere like including in your terminal history

01:19:36.760 --> 01:19:38.040
um

01:19:38.040 --> 01:19:45.000
and uh the second exercise is this also happens to me a lot which is like if you're um native like package manager

01:19:45.400 --> 01:19:50.760
Uh, it doesn't like uh like con to curl and keeps like yelling at you because like there's some sham is match

01:19:51.240 --> 01:19:51.880
um

01:19:51.880 --> 01:19:55.560
You just want to run an install command and just for that one install command pop

01:19:56.280 --> 01:19:59.480
Like the front element of your path off, but you don't want to mutate your path forever

01:19:59.480 --> 01:20:06.840
You just want to do that this one thing. So just you know temporarily mutate your path run some command and then return it

01:20:07.880 --> 01:20:10.200
I'll give you guys a few minutes. We can circle around answer questions

01:20:12.040 --> 01:20:14.040
All right, so

01:20:14.360 --> 01:20:18.920
Before we move on any questions on the previous stuff now that breaks over

01:20:19.640 --> 01:20:26.120
Uh anything all right, so the next section we're going to be talking about what we call callable aliases

01:20:26.760 --> 01:20:27.880
so

01:20:27.880 --> 01:20:28.680
um

01:20:28.680 --> 01:20:37.320
Callable aliases are basically a way for python functions or python callables and sub processes to exchange code

01:20:38.040 --> 01:20:39.560
um

01:20:39.560 --> 01:20:44.440
In a more integrated way than what we've seen through sort of the at operator and some of these other

01:20:45.080 --> 01:20:45.800
uh

01:20:45.880 --> 01:20:52.840
Curvy brace or curvy. I forget the mnemonic. This is curvy curvy captures. That's right. Um

01:20:54.120 --> 01:21:01.640
So we're going to be building up sort of data pipelines in a more uh in a more integrated fashion

01:21:02.360 --> 01:21:03.240
um

01:21:03.240 --> 01:21:09.400
And basically what callable aliases allow us to do is run any python function as a sub process command

01:21:09.960 --> 01:21:11.160
um

01:21:11.160 --> 01:21:16.680
It's not any python function really uh because it requires a certain set of known signatures

01:21:17.160 --> 01:21:19.400
But assuming you adhere to that

01:21:20.840 --> 01:21:26.440
And we're going to be going through what those are uh, then you'll you'll be able to run them. So

01:21:27.960 --> 01:21:30.360
Uh, they're callables right so that part makes sense

01:21:30.920 --> 01:21:36.360
They're aliases because they get stuck in what's called the aliases dictionary or the alias is mapping

01:21:36.600 --> 01:21:39.480
So this is something that gets shoved into built-ins as well

01:21:39.960 --> 01:21:42.840
Um, and it's just a mapping between all the possible different

01:21:43.480 --> 01:21:45.400
aliases that exist

01:21:45.400 --> 01:21:48.680
If you're familiar with other shells, you sort of know what an aliases, right?

01:21:49.160 --> 01:21:53.160
So and if you're not, uh, you'll see it's just another way to look up commands

01:21:53.160 --> 01:21:58.520
It's another dictionary to look up commands in uh, does this need to be plugged in? No, okay. All right

01:21:59.080 --> 01:22:01.080
um

01:22:01.080 --> 01:22:02.520
so

01:22:02.600 --> 01:22:05.960
The first function signature is just an empty function signature

01:22:06.520 --> 01:22:09.880
So and it can return either a string

01:22:10.680 --> 01:22:17.640
Or in an integer return code where you know zero means success and everything else means various degrees of failure

01:22:18.040 --> 01:22:20.040
So you can do this with a lambda if you want

01:22:20.600 --> 01:22:24.680
So go ahead and type this out. So if you say aliases, you know

01:22:25.400 --> 01:22:27.400
set item banana

01:22:27.480 --> 01:22:32.600
Equals lambda with no arguments and then banana for scale new line

01:22:33.160 --> 01:22:35.160
You can then run the banana command

01:22:35.880 --> 01:22:39.560
That is it. That's the essence of callable aliases

01:22:40.200 --> 01:22:42.200
And that that should just work

01:22:44.200 --> 01:22:48.040
Yes, so as tom caswell, i'm going to say his name out loud

01:22:48.920 --> 01:22:50.920
tom caswell says this is

01:22:52.040 --> 01:22:55.400
Lambda for your shell server server server lists for yourself shell

01:22:55.480 --> 01:22:57.480
I'm going to misquote him shamelessly

01:22:58.680 --> 01:23:00.680
as as well so

01:23:01.320 --> 01:23:06.600
Okay, matplotlib matplotlib. That's right. Yeah, as long as we're mispronouncing things. I think

01:23:07.880 --> 01:23:15.000
Okay, so you can pipe this into any other command. So the wc command counts characters and lines and words

01:23:15.880 --> 01:23:20.200
So if you pass the dash w flag that means to count the words

01:23:20.920 --> 01:23:22.920
Um based on white space

01:23:23.000 --> 01:23:30.520
So you can say banana pipe wc dash w and that'll tell you that the output of the banana command has three

01:23:31.480 --> 01:23:34.120
Three, uh, three words in it, right?

01:23:34.280 --> 01:23:37.480
and if if you think about what what it would take to do this in

01:23:38.360 --> 01:23:40.520
in using sub process with

01:23:41.320 --> 01:23:43.320
streaming data in and out this is

01:23:43.880 --> 01:23:47.960
Doing a lot behind the cover under the covers to make all of this work for you

01:23:48.440 --> 01:23:50.440
But it feels pretty natural

01:23:50.840 --> 01:23:55.720
Right, because it's just a command just a python function. You're running as a command in sub process mode

01:23:57.080 --> 01:24:02.200
Um, and of course if you want to get rid of that aliases alias because you don't like bananas

01:24:02.680 --> 01:24:08.200
Um, you can delete that alias in the same way that you would delete any other item out of the dictionary

01:24:08.920 --> 01:24:10.920
Any questions? Yes?

01:24:11.640 --> 01:24:13.640
So

01:24:15.560 --> 01:24:24.440
Swap is for environments and aliases is a totally different mapping. Yeah, uh, having a swap is not a bad idea though

01:24:24.600 --> 01:24:26.600
Please open an issue

01:24:28.360 --> 01:24:33.800
There's a banana command on the boondoo. I did not know that there was a banana command on boss. I don't know

01:24:35.080 --> 01:24:37.080
What are you doing?

01:24:37.640 --> 01:24:39.640
Where do they live?

01:24:40.040 --> 01:24:42.040
Where do where do what?

01:24:43.400 --> 01:24:47.480
Yeah, so aliases live in their own dictionary that gets shoved or

01:24:48.040 --> 01:24:50.920
Unfortunately aliased uh into built-ins

01:24:51.480 --> 01:24:57.320
So we're not really in this tutorial talking about how conch does all these tying of things together under the covers

01:24:57.640 --> 01:25:01.720
But in built-ins, there's an aliases dictionary that you can access at any time

01:25:02.680 --> 01:25:10.200
Yeah, and that allows it to persist so you can modify aliases or add these commands in your conch RC, and then they all live

01:25:10.840 --> 01:25:12.680
indefinitely

01:25:12.680 --> 01:25:14.680
okay

01:25:15.400 --> 01:25:19.320
Uh, the next is that you can take a single argument which is

01:25:19.960 --> 01:25:21.960
Uh, the command line arguments

01:25:22.360 --> 01:25:25.400
So like sys.rdv if you're familiar with that

01:25:25.960 --> 01:25:30.040
Um, and it's it comes in as a list of strings. So if you provide

01:25:30.840 --> 01:25:32.840
one argument

01:25:33.000 --> 01:25:40.860
That's called it. It's typically called args. Then you can take command line parameters. So here's an apple function

01:25:41.480 --> 01:25:43.480
which takes

01:25:44.200 --> 01:25:46.600
Takes an args it'll look at it and it'll say

01:25:47.560 --> 01:25:49.560
Is my args list of length one?

01:25:51.640 --> 01:25:59.640
And do one thing and if and succeed return zero right because you can return the return code from these functions

01:26:00.040 --> 01:26:04.200
And if not, um, it'll uh, and otherwise it'll return one

01:26:04.920 --> 01:26:06.040
so

01:26:06.040 --> 01:26:08.040
um, yep, and then

01:26:08.040 --> 01:26:09.560
uh

01:26:09.560 --> 01:26:13.560
And just showing off another bit of syntax if you use this with the at

01:26:14.040 --> 01:26:18.280
Python mode operator you can you don't even need to stick this in aliases

01:26:18.360 --> 01:26:23.800
You can just call it directly because it's a python object. So if you put the command the function

01:26:24.680 --> 01:26:27.320
at parentheses function as the first argument

01:26:28.280 --> 01:26:32.280
And then pass in a some command line arguments after that it'll read it in

01:26:35.800 --> 01:26:37.960
Any questions on how this works

01:26:40.040 --> 01:26:42.040
Any callable will work

01:26:42.840 --> 01:26:44.840
Callable classes are are yes

01:26:45.720 --> 01:26:49.080
Yes, go callable classes. Yeah, this is not limited to

01:26:50.200 --> 01:26:52.680
functions and and uh, and lambdas and things

01:26:53.560 --> 01:26:55.560
okay

01:26:56.040 --> 01:26:59.320
Yeah, and of course there's a formatting bug, but that's whatever

01:27:00.360 --> 01:27:02.360
Yeah

01:27:02.360 --> 01:27:04.360
Sure

01:27:19.800 --> 01:27:23.000
Yeah, so the question is would would you just want this to live in your

01:27:23.400 --> 01:27:30.680
Your conch execution context the python execution context or would you want this to live in aliases specifically like you might do in bash?

01:27:31.000 --> 01:27:32.120
um

01:27:32.120 --> 01:27:38.920
Oftentimes you just you stick them into the aliases dictionary like you do in bash because it's easier to call them

01:27:38.920 --> 01:27:40.680
It's simpler to call them

01:27:40.680 --> 01:27:43.960
It's kind of that's kind of the where what that's there for and where it lives

01:27:44.600 --> 01:27:46.600
If for some reason you don't want to have it

01:27:47.320 --> 01:27:52.040
There and you just want it to have it have it in your execution context. That's fine. That's fine, too

01:27:53.000 --> 01:27:55.000
Yeah

01:27:56.360 --> 01:27:58.200
All right

01:27:58.200 --> 01:28:00.200
Okay, so let's uh move on

01:28:01.320 --> 01:28:02.840
so

01:28:02.840 --> 01:28:05.320
The in the next case you can provide

01:28:06.280 --> 01:28:08.280
In sequential order

01:28:08.520 --> 01:28:10.520
Any of standard in standard

01:28:11.320 --> 01:28:13.320
Out and standard error

01:28:13.320 --> 01:28:20.280
And these are keyword arguments and they default to none right you may not have one of those streams although usually you have standard in

01:28:21.400 --> 01:28:23.400
So those come

01:28:23.400 --> 01:28:28.360
Immediately following the arguments parameter. So here we've got a grape function

01:28:29.480 --> 01:28:35.240
Or an underscore grape function. This is actually the most common pattern is you have pattern. Sorry. So you have the function

01:28:36.440 --> 01:28:38.680
Name preceded by an underscore

01:28:39.480 --> 01:28:41.480
And then you put that into

01:28:42.280 --> 01:28:44.280
The aliases dictionary without the underscore

01:28:45.880 --> 01:28:49.400
And basically what these do is these give you file like handles

01:28:49.960 --> 01:28:56.440
For standard in standard out and standard error. So if these are present you can access them and do whatever you would do normally

01:28:57.160 --> 01:28:59.720
with those those handles so

01:29:00.920 --> 01:29:04.760
We do some contact switching under the covers too. So like if you just

01:29:05.320 --> 01:29:10.360
write to sys.standard in or sys.standard error, etc. That that works as well, but

01:29:11.160 --> 01:29:13.160
it's usually better and and

01:29:13.960 --> 01:29:16.280
To write directly to those file handles. So here

01:29:17.240 --> 01:29:20.760
If you wanted to implement something that's streaming but not asynchronous

01:29:22.520 --> 01:29:28.520
You would do four line in standard in you'd be reading lines from standard in and then we'd be writing them out

01:29:30.040 --> 01:29:33.080
Write back out to standard out lowering them as we go

01:29:35.000 --> 01:29:37.000
Okay

01:29:38.040 --> 01:29:40.040
Yep

01:29:40.520 --> 01:29:42.520
The underscore pattern is there because

01:29:43.160 --> 01:29:45.160
When you source

01:29:45.880 --> 01:29:51.400
You don't get under you don't get the underscore variables in your execution context

01:29:51.960 --> 01:29:54.040
Those don't get brought in automatically. So

01:29:54.760 --> 01:30:00.600
It's a way of hiding things from your execution context if you don't want to pollute the namespace that you're just working in all the time

01:30:01.880 --> 01:30:02.760
Yeah

01:30:02.760 --> 01:30:08.600
Okay, so usage here we go. So this takes a standard in and kind of needs it because we didn't check if it was none here

01:30:09.000 --> 01:30:10.600
so if we spell

01:30:10.600 --> 01:30:12.360
echo wrath

01:30:12.360 --> 01:30:13.880
with

01:30:13.880 --> 01:30:15.880
And then pipe that to our grape command

01:30:16.840 --> 01:30:19.080
It will lowercase that and write it back out

01:30:21.880 --> 01:30:23.560
This makes sense to everybody

01:30:23.560 --> 01:30:25.560
right so the the

01:30:25.560 --> 01:30:27.000
standard

01:30:27.000 --> 01:30:31.240
The output of echo wrath becomes the standard in of the grape function

01:30:31.480 --> 01:30:37.080
Which then operates and then writes back out to what is our our terminals standard out

01:30:37.960 --> 01:30:41.560
Because that the grape is being called last in the pipeline

01:30:43.880 --> 01:30:51.880
Okay, um, you can use any of these but if if if you want to use standard error, you have to use standard in and standard out

01:30:54.120 --> 01:30:56.120
Yeah, that's about it

01:30:57.960 --> 01:31:00.040
Okay, whoops. Yeah, so

01:31:01.960 --> 01:31:05.960
Next up is you can also get a handle or a

01:31:06.840 --> 01:31:08.440
reference to

01:31:08.440 --> 01:31:16.600
The command specification. So this is a specific object that the command pipeline also has access to it's it's basically how conch

01:31:17.240 --> 01:31:24.760
Thinks you should be running the command. It's how the command pipeline got set up for that particular sub command

01:31:25.240 --> 01:31:27.320
Um, so this is a rich python object

01:31:27.320 --> 01:31:35.160
You can go look at the api if you want to but it it effectively contains all the metadata about how you should be running that command

01:31:35.880 --> 01:31:39.720
Um, including what goes in what goes out. So that'll come in

01:31:40.360 --> 01:31:43.400
after the standard in standard out and standard error

01:31:44.040 --> 01:31:44.840
um

01:31:44.840 --> 01:31:50.600
And you can do kind of like funny things here. So one of the things you can do is you can you can use this for is you can check

01:31:51.240 --> 01:31:52.360
whether

01:31:52.360 --> 01:31:53.880
the

01:31:53.880 --> 01:31:59.960
Command is meant to be in a captured sub process so that we talked about that before so you can check to see like

01:32:00.280 --> 01:32:02.920
Am I running this in a captured sub process or not?

01:32:03.160 --> 01:32:07.480
So this is particularly useful if you want to know if you're connected to a live terminal or not

01:32:08.360 --> 01:32:12.040
Or if you want to like this is actually used in the witch command pretty frequently

01:32:12.760 --> 01:32:15.720
Where you don't want to append a new line if you're capturing it

01:32:15.960 --> 01:32:19.960
If you're just printing it out to the screen, you want the new line to be there because you want everything to look nice

01:32:20.280 --> 01:32:21.960
but otherwise

01:32:21.960 --> 01:32:23.720
You don't want the new line to be there. So

01:32:23.720 --> 01:32:31.880
Um, and you can import part of conch to to do this check for you if it uh, if that makes it easier

01:32:36.360 --> 01:32:37.720
And

01:32:37.720 --> 01:32:44.520
Here's just our kiwi and this will have output that looks sort of like this. So if we just run the kiwi command

01:32:46.920 --> 01:32:48.520
Yep

01:32:48.520 --> 01:32:51.640
And then end equals end, but you didn't close the code. Yeah

01:32:54.680 --> 01:32:56.680
And then

01:32:57.320 --> 01:33:01.960
Yeah, so if you just run the kiwi command on its own in an uncaptured way

01:33:02.600 --> 01:33:05.960
It will produce the new line in the extra text and if you

01:33:06.840 --> 01:33:10.440
Capture the kiwi command then it doesn't actually have the new line in it

01:33:12.520 --> 01:33:14.360
Okay

01:33:14.360 --> 01:33:17.320
Any any questions on this or use cases?

01:33:20.520 --> 01:33:22.520
Yeah

01:33:22.600 --> 01:33:24.760
All right, so let's uh, let's move on

01:33:25.560 --> 01:33:29.960
um, so the last form of these functions is uh

01:33:30.840 --> 01:33:32.840
You can get back

01:33:33.480 --> 01:33:34.760
the

01:33:34.760 --> 01:33:38.600
stack frame of the call site of the alias

01:33:39.160 --> 01:33:41.160
So if you need to know

01:33:41.960 --> 01:33:44.440
the locals and global variables

01:33:45.320 --> 01:33:48.280
Where the sub process command was being called from

01:33:48.760 --> 01:33:53.080
You get back the the stack for that if you don't understand what this means

01:33:53.560 --> 01:33:58.200
Like don't worry about it. You definitely don't need it, but if you do this is like a ridiculous tool

01:33:58.680 --> 01:34:01.320
um, so please stack responsibly

01:34:02.760 --> 01:34:05.320
But uh, it it is something that's like

01:34:06.120 --> 01:34:08.760
You know, we don't need to necessarily dive into this

01:34:08.760 --> 01:34:13.080
But it is occasionally useful to know what you're what the variables are

01:34:13.720 --> 01:34:17.160
Around where you're being where the the sub process is being called

01:34:18.120 --> 01:34:21.400
Um and conch does that tying in for you automatically

01:34:23.480 --> 01:34:25.480
Any questions on this

01:34:26.760 --> 01:34:29.880
I know this is this one in particular is a little wacky

01:34:31.720 --> 01:34:35.400
Okay, so we've got some more exercises. Um, they're all related

01:34:36.120 --> 01:34:38.120
Uh, which is nice

01:34:38.280 --> 01:34:41.560
So the first exercise is to write a callable alias

01:34:42.040 --> 01:34:45.560
which just pulls down the contents of frankenstein

01:34:46.040 --> 01:34:51.640
And uh writes them out to the screen. So if you look at that link, it's basically the project Gutenberg link

01:34:52.040 --> 01:34:58.120
Um, and so you can just copy that and and provide an alias that prints out frankenstein to the screen

01:34:58.600 --> 01:35:00.600
grabbed from the internet

01:35:00.680 --> 01:35:03.160
Or you can grab it and then print it out however you want

01:35:03.720 --> 01:35:05.720
um

01:35:05.720 --> 01:35:11.800
The next is to write an alias that calls upper on the standard input and returns that as output

01:35:12.200 --> 01:35:18.200
Uh, the next one is to write an alias that returns all of the unique

01:35:18.840 --> 01:35:21.560
Sorted words coming from standard in

01:35:22.360 --> 01:35:23.480
um

01:35:23.480 --> 01:35:30.520
The next one after that is to write an alias that counts the number of white space separated tokens read from standard in

01:35:31.160 --> 01:35:37.400
And then finally the combine all of those into to a single command pipeline that executes

01:35:42.760 --> 01:35:47.240
And we will definitely walk around and help or you can look at the the details

01:35:48.200 --> 01:35:50.200
um

01:35:50.360 --> 01:35:54.440
Each of these is can't is basically a one liner. So don't overthink it

01:35:56.360 --> 01:36:01.560
But it's okay to overthink it if it gets the job done. I think that's fully qualified

01:36:12.280 --> 01:36:14.280
Okay, so

01:36:14.280 --> 01:36:16.040
um

01:36:16.040 --> 01:36:18.040
So for the first one if you

01:36:19.320 --> 01:36:22.120
Uh, you don't need to use python necessarily

01:36:22.920 --> 01:36:28.920
To to do this so much you can just set set an alias to frankenstein that is a

01:36:30.200 --> 01:36:31.400
lambda

01:36:31.400 --> 01:36:37.960
That calls curl or w getter whatever on that url and that will grab

01:36:38.760 --> 01:36:44.760
That url that we listed just straight away. So if you're using requests or something you you can definitely do that

01:36:44.760 --> 01:36:49.080
That's totally fine, but you don't need to so you can use a command here

01:36:49.800 --> 01:36:51.560
um

01:36:51.560 --> 01:36:53.560
Yeah

01:36:54.120 --> 01:36:57.080
So if you're getting stuck on that that's that's there

01:36:59.800 --> 01:37:05.480
And then yep, I'm sorry. All right, I'll come over so or but we should uh, should we do the second one too?

01:37:06.280 --> 01:37:07.480
Yeah

01:37:07.480 --> 01:37:09.480
So for the second one

01:37:09.880 --> 01:37:11.880
If you want an upper

01:37:12.360 --> 01:37:15.800
All you have to do is take both args and standard in

01:37:16.760 --> 01:37:19.480
Just read everything from standard in

01:37:20.200 --> 01:37:23.240
And then call which is a string and then return

01:37:24.200 --> 01:37:28.360
The upper of that string you could also do it in this streaming version

01:37:28.680 --> 01:37:33.320
Where you have lines that you're reading from and then writing them back out to standard out

01:37:33.480 --> 01:37:35.980
It's a little more complicated. You don't really need to do that

01:37:42.280 --> 01:37:44.280
So for the third example

01:37:44.920 --> 01:37:48.120
um, or the third exercise here, we do something

01:37:48.920 --> 01:37:50.920
pretty similar where

01:37:51.080 --> 01:37:54.120
um to the other where we want to count of words

01:37:54.680 --> 01:37:57.720
um, so the way that you do this is you read from standard in

01:37:58.440 --> 01:38:00.440
um, and then you

01:38:00.440 --> 01:38:04.600
Split those split based on the white space, right? We're all pretty familiar with that

01:38:05.080 --> 01:38:09.560
Um, if you want the unique, right? So that'll give you this big word list in order

01:38:09.880 --> 01:38:13.960
If you want to unique that you call set around it to get the unique words

01:38:14.600 --> 01:38:19.720
And then if you want them sorted you call sort it around that and then you join based on new lines

01:38:20.440 --> 01:38:25.320
So that you output a string again, and that's the uh, that's the thing that you return

01:38:26.040 --> 01:38:31.160
It's kind of a lot of parentheses, but it gets the job done in one line

01:38:31.240 --> 01:38:34.840
You could do it in more lines if you wanted to clean it up like we did in some of the other examples

01:38:34.920 --> 01:38:36.920
But there's no need here

01:38:46.200 --> 01:38:49.240
Do we have the we don't have these loaded in or you do okay. Oh, yeah

01:38:51.000 --> 01:38:53.000
Oh, nope. Okay

01:38:53.800 --> 01:38:55.800
That's probably in that. Yeah

01:39:03.400 --> 01:39:10.520
So for example, if you ran thus it's not perfect, right? Because this is text processing, but um

01:39:12.040 --> 01:39:14.040
There it is

01:39:14.680 --> 01:39:17.560
Um, then for the fourth example or fourth exercise

01:39:18.280 --> 01:39:23.240
If you wanted to count the length of that thing coming in you'd have to basically do the same thing, right?

01:39:23.480 --> 01:39:27.800
So here you'd you'd read it in you'd split based on white space again

01:39:28.680 --> 01:39:33.400
And then instead of calling set or something else you call length

01:39:33.960 --> 01:39:38.600
Uh, which returns an integer you don't want that integer to be the return code

01:39:38.680 --> 01:39:41.880
So you have to convert it to a string add a new line

01:39:42.600 --> 01:39:45.880
And uh, and then you go from there

01:39:48.520 --> 01:39:52.680
So that's how you do or you can do wc dot dash out because

01:39:53.960 --> 01:39:55.960
reasons

01:39:56.680 --> 01:39:59.160
You could also do that that'd be a better example here

01:40:01.480 --> 01:40:03.720
You could do that in the alias. Yeah, you could run

01:40:12.840 --> 01:40:15.640
Yeah, that's the simplest form of the alias really

01:40:17.800 --> 01:40:19.800
And

01:40:20.280 --> 01:40:22.920
Then pull down frankenstein

01:40:26.120 --> 01:40:28.120
Oh, I think we just did

01:40:29.960 --> 01:40:31.960
We really love this frankenstein

01:40:38.920 --> 01:40:40.920
How did you do

01:40:48.120 --> 01:40:50.120
Maybe

01:40:57.000 --> 01:40:59.000
Thank you mic mccarty

01:41:01.400 --> 01:41:10.760
All right, um, let's do it though. Yeah, do it the right way. Um, what was it upper? I'll let you do this and then

01:41:18.520 --> 01:41:20.520
We'll uh, we'll debug that later

01:41:22.520 --> 01:41:26.600
Oops, sorry you want the yeah, it's just words and then count

01:41:31.960 --> 01:41:35.480
The real count and then the point here is that you can

01:41:36.360 --> 01:41:41.160
Merge all of these together in a single command pipeline, uh that executes so

01:41:43.880 --> 01:41:46.360
Okay, any uh, any questions on this

01:41:48.520 --> 01:41:52.040
All right, so that's uh

01:41:53.080 --> 01:42:00.200
Let's if there's no questions on how this works or what it uses we'll move on not a break because we're doing breaks differently

01:42:00.840 --> 01:42:06.040
Um, and our next topic will be events which uh, so switch with y'all

01:42:11.880 --> 01:42:13.880
Okay, so um

01:42:14.440 --> 01:42:17.480
Uh an event is um, it's hard to actually describe

01:42:17.560 --> 01:42:24.840
An event I discovered this um, but um, it's it's uh, it's a trigger that you can fire and then um, if

01:42:25.720 --> 01:42:29.160
You have something that's set up to listen to that firing which we would call a handler

01:42:29.240 --> 01:42:31.240
It will then execute that thing

01:42:31.240 --> 01:42:33.240
That is a horrible

01:42:33.240 --> 01:42:35.080
vague description

01:42:35.080 --> 01:42:38.280
But is uh, I think we'll be a little clearer when we actually go through an example

01:42:38.520 --> 01:42:41.720
I'll just say the events a system in cons was written by one of our

01:42:42.200 --> 01:42:47.080
Contributors jimmy bliss and is just an incredible piece of work and I can say that because I had nothing to do with it

01:42:47.880 --> 01:42:49.880
It's really incredibly powerful

01:42:49.880 --> 01:42:53.400
um, and lets you do a lot of really interesting things if you want to

01:42:54.120 --> 01:43:00.120
Like introspect your code or have all sorts of things happen in response to all kinds of events. You can really start to um

01:43:00.840 --> 01:43:04.360
Do some very uh interesting clever and powerful things here

01:43:07.640 --> 01:43:09.160
Right, so I said this um

01:43:09.160 --> 01:43:12.120
A handler is just a function that is called when an event is fired

01:43:12.280 --> 01:43:17.640
So something says event this kind of event fires any handler that is attached to that event will then be run

01:43:17.640 --> 01:43:20.120
And you can have as many handlers as you want on a given event

01:43:20.200 --> 01:43:24.440
So several functions can be executed in response to something just happening somewhere

01:43:27.480 --> 01:43:33.000
Okay, so one of the events um all of these live in just the events uh, kind of built in at the base

01:43:33.000 --> 01:43:37.800
So you can say events um one of the common ones there's several that are built in to conch later

01:43:37.800 --> 01:43:41.800
We can look at like defining your own, but there are many that are built in the first is um on

01:43:42.440 --> 01:43:43.960
Changed here

01:43:43.960 --> 01:43:47.160
Which fires if you can imagine whenever you change directory

01:43:50.600 --> 01:43:52.600
So this event already exists

01:43:52.840 --> 01:43:58.280
So what we want to do is just create a handler that will execute in response to that event being fired

01:43:59.400 --> 01:44:04.760
So the way that you do that is with this decorator syntax. So you just say at events and the name of the event

01:44:07.160 --> 01:44:09.240
And in particular this event

01:44:10.200 --> 01:44:12.200
Hands off two

01:44:12.280 --> 01:44:16.520
Variables to whatever function is being called as handler. We'll show you how to sort of inspect that later

01:44:17.160 --> 01:44:19.160
They're called older and new dur

01:44:19.720 --> 01:44:23.800
Or old deer and new deer depending on your preferred pronunciation of words that aren't words

01:44:25.240 --> 01:44:28.600
And then in this case just for a kind of a simple example

01:44:28.680 --> 01:44:32.540
I'm just printing out a message that says hey, we just changed from this directory to that directory

01:44:39.240 --> 01:44:41.240
Um

01:44:51.720 --> 01:44:54.680
So now you can just move around in your terminal like do a cd dot dot

01:44:55.400 --> 01:44:59.400
And it'll tell you this thing and you can go back into the like directory. We're just in

01:45:02.920 --> 01:45:05.400
Um, of course now, uh

01:45:06.360 --> 01:45:11.400
Your terminal is is probably a little overly verbose and you don't want this to happen all the time. Um

01:45:12.360 --> 01:45:16.680
So, um, you can always remove handlers too because maybe you've made a mistake

01:45:16.760 --> 01:45:20.280
And it's saying way more than you meant it to say and you would just like to have your terminal back

01:45:20.760 --> 01:45:25.720
Um, so the simplest way is just there's a set of handlers on each event and you can just pop them off

01:45:26.200 --> 01:45:28.200
So in this case events on change deer

01:45:28.840 --> 01:45:29.800
um

01:45:29.800 --> 01:45:31.800
dot pop

01:45:31.800 --> 01:45:36.120
And then you should see the thing come up and then you can just test to make sure that your terminal has recovered by

01:45:36.280 --> 01:45:42.200
You know going somewhere else and confirming that in fact there is uh, no longer something being printed every time

01:45:45.160 --> 01:45:48.440
Um, so that was just a quick example to show you sort of what an event will do

01:45:48.520 --> 01:45:50.680
We can now we'll sort of just dive in a little deeper

01:45:51.080 --> 01:45:55.080
Um into what's happening and like what all you can do and how you can hook into things

01:45:55.720 --> 01:46:01.640
Um, so as we showed you register a handler by just using the name of the event as a decorator

01:46:02.600 --> 01:46:03.800
um

01:46:03.800 --> 01:46:08.600
those um input arguments uh, the keyword arguments that are there are being um

01:46:09.480 --> 01:46:11.480
supplied by the event itself

01:46:11.800 --> 01:46:13.160
um

01:46:13.160 --> 01:46:17.480
There are two ways to kind of figure out what an event provides. Um

01:46:18.200 --> 01:46:22.840
You can just um do help and then event dot name event. Um

01:46:23.480 --> 01:46:30.520
Currently in cons that has the unfortunate side effect of also printing out a bunch of like metaclass stuff that you maybe don't care about at the moment

01:46:31.480 --> 01:46:34.200
If you just want the simple succinct definition

01:46:34.440 --> 01:46:36.760
The better thing is just to look at the dunder dock

01:46:37.320 --> 01:46:40.680
Of the event you want. So in this case you can see that

01:46:41.880 --> 01:46:45.880
It is uh specifying the types of the two arguments that will be provided

01:46:48.120 --> 01:46:51.080
Right there. Yeah, um, and it's returning none

01:46:51.400 --> 01:46:57.640
So you sort of have this like type hint signature that uh describes what arguments will be provided their types

01:46:57.720 --> 01:46:59.720
And then what will come out of the event if anything

01:47:03.000 --> 01:47:06.040
Yes, there is a there there are two ways to get a list of events that are available

01:47:06.360 --> 01:47:11.400
Um, currently the tab completion on that events shortcut is a little bit borked

01:47:11.480 --> 01:47:17.080
Which we're going to fix like in a couple of days, but if you go to a dunder conch dot built-ins

01:47:20.440 --> 01:47:22.440
Built-ins dot events

01:47:24.680 --> 01:47:26.680
And then hit dot tab

01:47:27.240 --> 01:47:28.680
All of those

01:47:28.680 --> 01:47:33.480
And the other way is if you go to the docs, there's like, you know x o n dot s h slash events

01:47:33.560 --> 01:47:37.960
I think it is the html, but on the website. There's a list of all of them what they do when they fire

01:47:41.720 --> 01:47:43.720
Yeah

01:47:46.040 --> 01:47:49.880
Also, I should say if you want to register a handler for an event

01:47:50.200 --> 01:47:53.720
But you don't actually I mean it's going to provide those arguments no matter what you do

01:47:54.680 --> 01:47:56.840
Like it's that's what the event does to the handler

01:47:57.080 --> 01:47:58.600
You can choose not to use them

01:47:58.600 --> 01:48:02.920
But you do need to say like you need to give it like a star star quarks or something to at least capture them

01:48:03.000 --> 01:48:05.160
Or it will throw an error because you're going to pass

01:48:05.720 --> 01:48:08.520
Arguments to a function that doesn't know how to accept them. So it's just you know

01:48:08.520 --> 01:48:12.840
You can make these future basically future proof just so long as you always pass at star star quarks

01:48:13.160 --> 01:48:15.320
And then you don't have to worry about something firing

01:48:16.040 --> 01:48:18.200
Or like passing unknown arguments to your handler

01:48:19.000 --> 01:48:21.000
Um

01:48:22.600 --> 01:48:26.600
So events get fired when we tell them to fire or when you tell them to fire

01:48:27.080 --> 01:48:29.560
Is is effectively the short answer to how these things get set off

01:48:32.520 --> 01:48:33.800
Um

01:48:33.800 --> 01:48:37.800
But so we'll walk through an example of setting up our own event and telling it to fire just to give you a notion

01:48:37.800 --> 01:48:40.600
Of a kind of what this all looks like and how you would put all of this together

01:48:42.840 --> 01:48:45.720
Okay, so first um, we need to create an event

01:48:45.880 --> 01:48:47.880
Um, and uh

01:48:48.440 --> 01:48:52.040
The way you create an event is actually by writing a doc string for it

01:48:52.120 --> 01:48:59.480
It's sort of like the ultimate self-documenting code like it's impossible to create an event in contra without it having documentation because that's the only way to create it

01:49:00.040 --> 01:49:02.040
Um, it's kind of amazing

01:49:03.160 --> 01:49:04.360
Um

01:49:04.360 --> 01:49:08.920
So we're going to create an event that just raises an alarm if it's called that just you know that it's unhappy

01:49:09.400 --> 01:49:13.160
Um, so the the way you do this is you say events dot doc

01:49:13.640 --> 01:49:15.640
All right, and then the first

01:49:16.040 --> 01:49:18.520
Argument you give it is the title is the name of the event

01:49:19.880 --> 01:49:21.880
Uh, which in this case is never run this

01:49:23.720 --> 01:49:27.720
Um, and then you give it a doc string, but which should be um

01:49:28.600 --> 01:49:29.720
Uh

01:49:29.720 --> 01:49:35.160
The uh the signatures in this case this event takes no arguments and returns none. So it's just a it's a simpler

01:49:35.720 --> 01:49:36.840
Um

01:49:36.840 --> 01:49:44.440
Thing so it would just be events not never run this uh parens arrow none and then you can um on the next line

01:49:44.440 --> 01:49:47.560
You can kind of provide a description of what you know, you're expecting it to do

01:49:48.200 --> 01:49:50.200
That's more for other users or other people

01:49:50.200 --> 01:49:53.720
So if you were writing a plugin and you wanted to have some events

01:49:53.720 --> 01:49:58.840
You would kind of try to put your explanations in here so people understand how they can use the events you provided

01:49:59.320 --> 01:50:01.320
Um to full effect

01:50:07.800 --> 01:50:09.800
Okay

01:50:12.120 --> 01:50:16.360
Okay, so now what we're going to do is um the way you would use this event

01:50:17.160 --> 01:50:18.760
is you would um

01:50:18.760 --> 01:50:20.840
It's an event that you basically want to never be fired

01:50:20.840 --> 01:50:24.680
So you you would put it in a function that for some reason you have like really should never be run

01:50:24.760 --> 01:50:27.320
But you're you know you you want to recognize that it may exist

01:50:27.720 --> 01:50:30.760
And so you put this event in there to kind of alert you that this thing is happening

01:50:31.880 --> 01:50:35.240
So, uh, if you wrote a function that deleted everything on your computer

01:50:35.720 --> 01:50:37.720
I don't know why but let's just say you did

01:50:42.440 --> 01:50:49.160
Then what you would do in let's say the first line of that function or somewhere along is that you would just say events dot and then

01:50:49.720 --> 01:50:51.720
Never run this which we've defined

01:50:51.960 --> 01:50:53.960
in that

01:50:54.040 --> 01:50:56.200
Previous doc string thing and then dot fire

01:50:56.920 --> 01:51:02.040
And then what happens is that whenever that function is called and it gets to that line the event

01:51:02.760 --> 01:51:04.920
Management system will basically fire that event

01:51:06.120 --> 01:51:08.680
So we can go ahead actually and run delete my computer

01:51:10.680 --> 01:51:12.680
And nothing happens

01:51:13.960 --> 01:51:15.960
So in fact actually um

01:51:16.440 --> 01:51:20.360
Something does happen right the event fired, but we have nothing listening to the event

01:51:20.760 --> 01:51:22.280
So you don't get anything out of it, right?

01:51:22.600 --> 01:51:26.840
So then the final step is to set up a handler to add it so we create the event

01:51:27.400 --> 01:51:32.600
We tell the event to fire and then we have something that listens for the event firing that then reacts to it

01:51:32.760 --> 01:51:35.560
Right, so there's these three separate these these three separate components

01:51:39.640 --> 01:51:41.640
And given the fact that this is a uh

01:51:42.360 --> 01:51:45.400
Like an event that's supposed to fire when somebody has done something horrible to you

01:51:45.800 --> 01:51:47.960
You can make it a suitably chastening message

01:51:57.800 --> 01:51:59.800
Um and as always um

01:52:00.920 --> 01:52:02.680
Like you have access to the full

01:52:02.680 --> 01:52:03.480
You know uh

01:52:03.480 --> 01:52:07.160
Conspectrum here, so if you want like in this case it means like the who am I is a nice thing

01:52:07.160 --> 01:52:10.200
You can figure out exactly which user is responsible for doing this horrible thing to you

01:52:20.920 --> 01:52:24.920
That's a good tip. Yeah, perfect. Um, so then if you run delete my computer again

01:52:27.240 --> 01:52:33.560
Then the event fires and now you have you know, you know that it was scope at the delete of your computer. I'm sorry

01:52:35.000 --> 01:52:37.000
Can't take him anywhere

01:52:42.520 --> 01:52:49.400
Okay, so, um, are there any initial questions otherwise there's some exercises here that should help kind of like cement the general

01:52:50.120 --> 01:52:52.360
Pattern in place, but we're happy to take questions first

01:52:53.240 --> 01:52:55.240
Okay, great

01:52:55.240 --> 01:52:58.120
Um, so these sort of build on one another so I'll like reveal them as we go

01:52:58.760 --> 01:53:04.120
Um, but the first is just to create a handler for the event that is called on n var change

01:53:04.840 --> 01:53:11.000
Um, this is a built-in, uh event. You don't need to create the event. You just want a handler for the event and you want to have it print out the

01:53:12.200 --> 01:53:16.840
Um old value and then the new value and of course the name of the environment of the var umbrella is just changed

01:53:16.920 --> 01:53:21.320
Um, so you should probably check on the dock the dunder dock of the event to figure out what those variables are called

01:53:21.320 --> 01:53:23.320
Otherwise, it's going to be hard to refer to them

01:53:24.120 --> 01:53:26.120
And Anthony and I can sort of wander and help

01:53:32.120 --> 01:53:34.120
So as gill showed up here, um

01:53:34.280 --> 01:53:39.800
If you just write a simple if condition to check if the name which comes in as a string is

01:53:40.120 --> 01:53:42.600
Like the dock string says is in

01:53:43.400 --> 01:53:44.920
Is either

01:53:45.000 --> 01:53:50.920
In uh is either pwd or old pwd and then only print if it's not

01:53:51.800 --> 01:53:53.320
We can um

01:53:53.320 --> 01:54:00.840
We can check to make sure that it works normally for most environment variables, but if we change directory it um

01:54:01.880 --> 01:54:03.880
It it no longer gets called

01:54:09.000 --> 01:54:10.280
And then

01:54:10.280 --> 01:54:11.640
think we're

01:54:11.640 --> 01:54:16.920
I mean a little low on time. So maybe we'll skip this, uh, this particular

01:54:17.640 --> 01:54:22.040
Uh exercise, but you can go feel free to do it at home and and email us too

01:54:23.080 --> 01:54:25.080
Uh, do you want to just show it or

01:54:25.800 --> 01:54:27.800
Okay

01:54:29.400 --> 01:54:32.200
So one of the really um handy ones for doing some control flow

01:54:32.200 --> 01:54:35.000
We don't we don't have to take time to actually, you know, uh do it right now

01:54:35.000 --> 01:54:41.880
But there's on post command which has a bunch of um of those items that you get in the

01:54:43.000 --> 01:54:45.000
Command pipeline object

01:54:45.000 --> 01:54:47.560
Including like timestamps the name of the command that was run and other stuff

01:54:47.640 --> 01:54:51.880
So in this case, this is all it takes basically to set up like a power line style

01:54:51.880 --> 01:54:56.280
Like the timestamps of the previous command and just throw it onto your right prompt over on the side

01:54:56.600 --> 01:55:02.840
It's really just like this three line event handler thing that you can use and then you kind of set up this interactive thing to track

01:55:03.800 --> 01:55:06.600
You can also get like return codes and start coloring things differently

01:55:06.600 --> 01:55:11.000
I mean it gets really easy to build stuff up there, you know to get sort of the responsive prompt that you want

01:55:11.800 --> 01:55:13.800
That's all I wanted to say

01:55:19.160 --> 01:55:22.840
Okay, so now we're going to talk about macros

01:55:24.280 --> 01:55:25.800
so

01:55:25.800 --> 01:55:32.760
macros are syntax that replace a small amount of code with some with one of the few things

01:55:32.840 --> 01:55:40.200
So either another expression or a syntax tree or just a string rather than being evaluated normally

01:55:42.120 --> 01:55:44.680
So basically what happens in conch is

01:55:45.400 --> 01:55:48.280
That the the parser gets paused

01:55:49.320 --> 01:55:51.320
And then we skip the normal parsing

01:55:52.440 --> 01:55:55.320
We gather up whatever macro inputs are going to be

01:55:56.440 --> 01:55:58.680
Are handed off we'll get to what those are in a moment

01:55:59.560 --> 01:56:02.760
We evaluate the macro with however we're told to evaluate it

01:56:03.480 --> 01:56:06.040
And then we resume normal parsing and execution

01:56:07.640 --> 01:56:11.240
So conch's macro system is more like rusts than

01:56:11.880 --> 01:56:18.040
Other macro systems you might be familiar with so who here like knows rust even a little a little so

01:56:18.600 --> 01:56:24.520
This gets used all the time in rest. So if you're from if you know that it'll look familiar. If not, hopefully it won't be

01:56:25.240 --> 01:56:27.240
too much of a learning curve here

01:56:29.240 --> 01:56:32.280
But basically the point of this is that

01:56:33.880 --> 01:56:35.880
You're already familiar with macros

01:56:35.960 --> 01:56:42.440
Normally jupiter magics are just a macro system effectively. They they pause normal execution and do something else

01:56:45.720 --> 01:56:51.320
So in like in rust the conch macros use the special exclamation point syntax

01:56:53.080 --> 01:56:57.400
And there are three types of macros that we have

01:56:58.680 --> 01:57:03.560
So one are sub process macros, which we'll go over first the next are function macros

01:57:04.200 --> 01:57:07.800
Which we'll follow after and then third is context macros

01:57:07.800 --> 01:57:11.160
So we'll see what all of these look like in in a moment here

01:57:11.480 --> 01:57:13.480
So let's start with sub process macros

01:57:13.880 --> 01:57:19.960
So basically if you put an exclamation point anywhere a loan exclamation point anywhere in your command pipeline

01:57:20.440 --> 01:57:26.360
Anything after that will just be interpreted as a single string argument to the rest of the command

01:57:26.680 --> 01:57:32.200
Um, so if you say echo exclamation point, I'm mr.

01:57:32.200 --> 01:57:37.080
Meeseeks for example, then that entire thing is just a single string

01:57:37.720 --> 01:57:40.600
Uh after the exclamation point it's stripped

01:57:41.320 --> 01:57:43.320
we'll get but

01:57:43.560 --> 01:57:49.880
To show some counter examples if you just echo xyz right echo doesn't really care about the white space

01:57:50.440 --> 01:57:53.400
Um, so normally you'd have to pass this in as a string

01:57:54.280 --> 01:57:56.280
Which is two characters

01:57:56.440 --> 01:58:01.640
But if you use a macro you only have to use one it's echo exclamation point xyz in that whole thing

01:58:01.960 --> 01:58:04.760
It's equivalent to having put that everything in the string

01:58:06.600 --> 01:58:09.560
Okay, now this is sort of a contrived example

01:58:11.720 --> 01:58:13.720
Oh, but before we get into that

01:58:14.040 --> 01:58:16.840
And it's important to remember that macros pause all syntax right?

01:58:17.240 --> 01:58:22.360
Uh before until you escape the sub process command. So environment variables

01:58:22.360 --> 01:58:28.920
Uh will just be listed as there as the string you typed in not anything else

01:58:29.880 --> 01:58:33.320
Um, because we're not parsing that as an environment lookup anymore

01:58:34.040 --> 01:58:39.240
Um, so if you can if you want a more like extended example, you can say you're gonna have

01:58:39.960 --> 01:58:47.560
An environment lookup on both sides and you'll see the first one is uh is the value and the second one is actually just the string that you typed in

01:58:48.680 --> 01:58:50.120
um

01:58:50.120 --> 01:58:52.120
Okay

01:58:52.920 --> 01:58:56.680
So this is really useful when you want to pass in a lot of

01:58:57.400 --> 01:58:59.640
String like a very large string to a command

01:59:00.200 --> 01:59:04.680
Um, so for example time it time. It's like a classic case for this right?

01:59:04.760 --> 01:59:08.360
So if you do time it and then some python code

01:59:09.000 --> 01:59:13.640
Time it is a built-in alias in conch. So you don't need to worry about implementing it. Um, it's there

01:59:14.120 --> 01:59:15.400
Um

01:59:15.400 --> 01:59:17.480
All of that is up is a python

01:59:18.360 --> 01:59:20.520
The string that follows or a conch string that follows

01:59:20.520 --> 01:59:22.520
Um

01:59:22.760 --> 01:59:28.120
Or similarly if you wanted to do some bash code right normally you'd have to put that bash code

01:59:28.600 --> 01:59:30.200
in a string

01:59:30.200 --> 01:59:33.720
And then execute it but with the sub process macro you can just uh

01:59:34.600 --> 01:59:37.640
Type in the exclamation point and it's uh, it's done

01:59:38.760 --> 01:59:42.920
Um, or you can do this with python basically any of the things that you want to pass into dash c2

01:59:43.480 --> 01:59:45.480
Um, it'll work

01:59:46.200 --> 01:59:48.200
Okay

01:59:52.200 --> 01:59:54.200
I think uh, what did you

01:59:57.320 --> 02:00:00.040
Oh, yeah, there you go. Okay

02:00:01.080 --> 02:00:02.200
Um

02:00:02.200 --> 02:00:04.200
Any questions on the sub process macros?

02:00:04.760 --> 02:00:06.760
They're pretty simple

02:00:06.920 --> 02:00:08.920
That's why we did them first

02:00:09.480 --> 02:00:10.840
uh

02:00:10.840 --> 02:00:12.040
The

02:00:12.040 --> 02:00:15.720
Okay, so let's move on to the function macro. So these get a little more fun

02:00:16.360 --> 02:00:18.120
um

02:00:18.120 --> 02:00:19.160
So

02:00:19.160 --> 02:00:25.800
Macros don't require a special function definition. They only require a special function call. They modify how the function is called

02:00:26.440 --> 02:00:27.800
um

02:00:27.800 --> 02:00:30.840
And uh, it's just normal python callables

02:00:32.120 --> 02:00:38.920
What you do to call something as a macro is you stick an exclamation point between the name and the first the open parentheses

02:00:39.640 --> 02:00:40.920
um

02:00:40.920 --> 02:00:46.760
And macro arguments are split on commas like normal functions. So here's a few simple examples

02:00:47.320 --> 02:00:51.960
Uh, so if we had an f function if we wanted to call it as a macro with no arguments

02:00:52.040 --> 02:00:55.080
We would say f exclamation point parentheses

02:00:56.120 --> 02:00:58.520
Your use dross this should look pretty familiar

02:00:59.080 --> 02:01:00.360
um

02:01:00.360 --> 02:01:03.480
Uh, if you want to call it with a single argument, uh

02:01:04.200 --> 02:01:08.040
You would say you would do sort of the normal python single argument

02:01:08.760 --> 02:01:13.160
Uh methods or you can call it with multiple arguments splitting on those top-level commas

02:01:15.320 --> 02:01:17.320
Okay

02:01:17.320 --> 02:01:19.320
um

02:01:19.320 --> 02:01:24.280
How the function is defined uh determines what happens

02:01:24.840 --> 02:01:29.320
Or specifically how the function annotations what the function annotations look like

02:01:29.880 --> 02:01:33.800
Determine what actually happens in the macro when you do a macro call

02:01:34.280 --> 02:01:37.960
Um, and that's matched up with each individual parameter

02:01:38.600 --> 02:01:42.120
Uh, so here's an example. So say you have an identity

02:01:42.680 --> 02:01:48.040
Function that has its annotation for its x parameter set to string

02:01:48.760 --> 02:01:50.760
That x that comes in

02:01:51.480 --> 02:01:54.680
When it's a macro call will always be a string

02:01:55.640 --> 02:01:59.000
Even if what's what's normally put into that is not a string

02:01:59.640 --> 02:02:03.640
So here's a here's a comparison between the the two different versions

02:02:03.960 --> 02:02:08.280
So in the top we have the identity function. We call it with a string. We get a string back

02:02:09.240 --> 02:02:11.960
On the bottom when we call it with

02:02:12.600 --> 02:02:14.600
um, the identity

02:02:14.600 --> 02:02:18.440
With a string, but as a macro call we get a

02:02:19.240 --> 02:02:22.440
This the repper string effectively right returned

02:02:23.480 --> 02:02:24.760
um

02:02:24.760 --> 02:02:28.440
Similarly for ints in a normal python call you'd get an int back

02:02:29.080 --> 02:02:31.240
In the identity you always get

02:02:31.800 --> 02:02:37.240
Uh, the or in the macro call you always get the string and same thing with the the others, right?

02:02:37.320 --> 02:02:41.320
You you get the string form of the argument rather than the

02:02:43.800 --> 02:02:46.280
Rather than the the actual object itself

02:02:49.400 --> 02:02:51.400
Each argument is stripped

02:02:51.560 --> 02:02:53.560
This is basically done for consistency

02:02:54.440 --> 02:02:56.440
So that things like

02:02:56.920 --> 02:03:01.800
42 and 42 don't end up being different. They're not really meant to be different. So

02:03:03.720 --> 02:03:06.840
In this string one, they end up being the same

02:03:08.760 --> 02:03:15.240
You feel free to like raise any questions or deep concerns or anything as we're going. Yeah, tom. Why?

02:03:16.200 --> 02:03:18.200
Well, we're getting to why?

02:03:18.600 --> 02:03:19.560
in

02:03:19.560 --> 02:03:22.760
In context macros, which will see some cool things

02:03:23.560 --> 02:03:25.000
um

02:03:25.000 --> 02:03:28.040
But it's the same it's it's the same underlying infrastructure for functions

02:03:29.160 --> 02:03:30.760
Okay

02:03:30.760 --> 02:03:32.760
Yeah, wow so consistent

02:03:35.160 --> 02:03:39.160
Okay, so here's some like funny examples, uh that are really pretty bad

02:03:39.800 --> 02:03:44.760
Um, so if you macro call like import os obviously this is not valid python syntax

02:03:45.240 --> 02:03:49.240
But in any way shape or form, but you can get that code back

02:03:50.200 --> 02:03:52.200
You could embed some c++

02:03:53.160 --> 02:03:55.160
Because I don't know why

02:03:56.600 --> 02:03:58.600
I forget c++

02:03:58.920 --> 02:04:00.920
Wow, if only I could forget c++

02:04:05.000 --> 02:04:07.000
You don't have to type

02:04:07.560 --> 02:04:12.920
No, you don't have to quote that it's not it's a way of like circumventing that quoting. Yeah

02:04:13.800 --> 02:04:18.840
In this particular example, but there's more things that you can do than just strings. We just showed the strings here

02:04:20.040 --> 02:04:22.040
So if you said

02:04:22.120 --> 02:04:27.160
You wanted this to be an ast there's there's kind of flag codes for this if you want to annotate it in different ways

02:04:27.640 --> 02:04:32.760
You can get back the ast of what you put in if it's python or conch code

02:04:33.080 --> 02:04:38.920
So you can get that tree object back out, which is pretty pretty nice and useful if you're doing a lot of like

02:04:40.200 --> 02:04:42.040
a tree rewriting

02:04:42.120 --> 02:04:45.960
You can get a code object out if you want to want to put in

02:04:47.320 --> 02:04:52.440
Exec or val or something or if you put in the c flag or sorry if you put in compile

02:04:53.480 --> 02:04:55.480
There's six of these so here the first three

02:04:55.640 --> 02:05:02.760
The others are a val so that would just eval the argument as normal so that means that you basically could only put in python expressions

02:05:04.040 --> 02:05:06.440
If you wanted to put in exec you could put in

02:05:07.080 --> 02:05:09.080
Basically anything that you wanted

02:05:09.080 --> 02:05:11.560
Or you could say t and get the type back

02:05:12.120 --> 02:05:13.240
um

02:05:13.240 --> 02:05:18.520
So and in theory this could be extended if there are other things out there that people would want to see done

02:05:19.400 --> 02:05:22.520
But this is kind of this is what's available right now

02:05:24.840 --> 02:05:26.840
Any questions on this stuff?

02:05:28.680 --> 02:05:30.680
Okay

02:05:32.280 --> 02:05:34.920
Okay, so here's an example of some annotations

02:05:35.640 --> 02:05:38.440
Uh a simple function. So we're annotating with

02:05:39.400 --> 02:05:42.600
This the first argument by default since it's got no annotation

02:05:42.680 --> 02:05:44.680
We'll just come back as a string

02:05:44.680 --> 02:05:47.320
The second one will be an ast object

02:05:47.720 --> 02:05:52.600
And the third one will be a code object because we're passing in compile the built-in compile function

02:05:53.320 --> 02:05:54.360
um

02:05:54.360 --> 02:05:56.360
If we do a macro call

02:06:01.160 --> 02:06:02.680
Yep

02:06:02.680 --> 02:06:04.680
See a lot of pensive people

02:06:05.320 --> 02:06:07.320
head's exploding

02:06:07.400 --> 02:06:09.400
Okay

02:06:11.080 --> 02:06:16.840
Uh of this one. Yeah, so just call it with anything. Um, or any python anything excellent point

02:06:21.960 --> 02:06:26.920
Yep, uh, I don't know like three plus five I guess I don't

02:06:30.040 --> 02:06:36.280
Oh, yeah, uh, I think you have to do a new line after the three plus five right or after the os

02:06:37.800 --> 02:06:39.800
I

02:06:41.480 --> 02:06:43.480
Think it's after the os because you did a statement

02:06:47.720 --> 02:06:52.040
No, no, no like a literal new line

02:06:55.560 --> 02:06:57.560
I'll do it. It's too, uh

02:07:08.120 --> 02:07:10.120
No, I guess not string

02:07:12.760 --> 02:07:14.760
Interesting, uh

02:07:16.200 --> 02:07:20.760
I thought there was an example here. All right. Well, this is not working right

02:07:21.720 --> 02:07:24.040
Now, I don't know what the this should

02:07:24.920 --> 02:07:26.760
Know for their code

02:07:26.760 --> 02:07:28.760
Okay, well, it's not it's failing to

02:07:29.960 --> 02:07:31.960
Compile one of these things so

02:07:32.600 --> 02:07:34.600
um

02:07:35.160 --> 02:07:37.160
Let's maybe just do this

02:07:37.320 --> 02:07:39.320
Uh

02:07:42.440 --> 02:07:44.440
No

02:07:47.000 --> 02:07:53.800
Yeah, I don't know. It's uh, what the problem is I'm sorry. We'll have to figure it out afterwards. So, um

02:07:54.920 --> 02:07:56.920
We have a parser error. All right

02:07:58.760 --> 02:08:00.680
Um

02:08:00.680 --> 02:08:02.680
Okay, sorry about that

02:08:03.080 --> 02:08:05.080
uh, so

02:08:05.080 --> 02:08:07.080
the

02:08:07.080 --> 02:08:11.800
Next the the last bit of macros that we'll get to are context macros. So these use

02:08:12.360 --> 02:08:18.360
The exclamation point right after the with uh word so you can use with exclamation point

02:08:18.840 --> 02:08:21.640
um, and then everything after the colon will be

02:08:22.360 --> 02:08:24.360
captured, uh

02:08:24.760 --> 02:08:28.440
Like it was in a normal uh with semen. So this provides both

02:08:29.160 --> 02:08:31.320
Named blocks and anonymous blocks

02:08:31.960 --> 02:08:33.960
um, so if you say

02:08:33.960 --> 02:08:40.680
This isn't going to work because there's no x to enter but you say with x equals 10 print y this would come

02:08:41.400 --> 02:08:44.760
Uh come back as us as a string

02:08:45.720 --> 02:08:51.080
Um, and what this can be thought of really is is doing the follow. So you can think of this as saying

02:08:51.720 --> 02:08:58.920
Uh, whatever your context is x dot macro block equals the string of the code in the block

02:08:59.480 --> 02:09:00.680
de-indented

02:09:01.400 --> 02:09:08.040
And then assigning the locals and globals to to vary up to attributes of that as well and then passing for the actual block

02:09:09.000 --> 02:09:11.000
Um, so it's a bit of code rewriting

02:09:11.800 --> 02:09:13.800
macro block is de-indented

02:09:14.840 --> 02:09:20.040
And uh these attributes are set before the enter method is called

02:09:21.480 --> 02:09:25.720
But they're not cleaned up on the exit method. So you can do that if you want to uh, but they live around

02:09:25.800 --> 02:09:27.800
They stay around and live if you if you need them

02:09:28.600 --> 02:09:29.800
um

02:09:29.800 --> 02:09:33.400
Like with functions by default the contents of the block are returned as a string

02:09:34.040 --> 02:09:39.960
Um, however, they don't need to be they could be any of the other special annotations that we saw before

02:09:40.520 --> 02:09:41.800
um

02:09:41.800 --> 02:09:45.640
And that's just lives is the this conch block

02:09:46.360 --> 02:09:51.080
Attribute on the context manager. So that's how it knows what to look up what type to convert it to

02:09:51.880 --> 02:09:53.480
um

02:09:53.480 --> 02:09:55.160
So here's an example

02:09:55.720 --> 02:10:00.200
And and this is gets to the use case a bit. So we can write a simple

02:10:00.840 --> 02:10:02.360
xml block

02:10:02.360 --> 02:10:06.120
So if we say we're just going to be pretty explicit. You don't need the comments, obviously

02:10:06.680 --> 02:10:08.040
um

02:10:08.040 --> 02:10:10.200
So we say it's going to come back as a string

02:10:10.760 --> 02:10:14.280
We write an enter method that takes

02:10:15.080 --> 02:10:18.040
the contents of the block as a string

02:10:18.680 --> 02:10:24.040
And we'll parse them into an element tree an xml element tree and return that

02:10:24.520 --> 02:10:28.040
um as the uh as the object in the context manager

02:10:28.760 --> 02:10:34.200
Um, then when it exits, we're just going to clean up those things the things that we we had before

02:10:41.480 --> 02:10:43.480
Yeah, I think you need this star whatever

02:10:54.920 --> 02:10:57.160
Macro locals. Yeah

02:10:59.400 --> 02:11:04.280
Okay, and then you can use this. Oh, it's cutting it off a bit, but um

02:11:05.400 --> 02:11:07.640
Uh by saying with exclamation point

02:11:08.520 --> 02:11:11.160
xml block a new object as tree

02:11:12.120 --> 02:11:14.280
colon and then everything

02:11:15.560 --> 02:11:20.680
Um, you can just do a short one. So just do like you could even just do yeah you

02:11:21.240 --> 02:11:23.240
Uh

02:11:23.640 --> 02:11:25.640
And then just close out the note I think

02:11:26.440 --> 02:11:28.440
um

02:11:29.480 --> 02:11:32.280
And now if we we can inspect the tree object

02:11:33.000 --> 02:11:35.000
tree is an instance of

02:11:35.640 --> 02:11:37.960
So I think what is it if you do tree tag?

02:11:39.240 --> 02:11:41.640
Um, that gets the note so it parses

02:11:42.440 --> 02:11:44.680
That x xml. So this lets you

02:11:45.400 --> 02:11:50.280
write documents and other languages right in conch and then do whatever you want with them

02:11:51.640 --> 02:11:56.280
Which is somewhat insane, but actually kind of useful occasionally

02:11:57.720 --> 02:12:04.120
And you saw like writing that context macro macro object that class was actually pretty simple

02:12:05.160 --> 02:12:07.240
It didn't take a lot of lines of code to do that

02:12:09.880 --> 02:12:12.200
So yeah, that's kind of the

02:12:13.480 --> 02:12:15.480
Scenario there

02:12:15.480 --> 02:12:20.600
And hopefully that answers at least partially the use case question. Okay. So we have a few exercises

02:12:21.640 --> 02:12:23.640
Um

02:12:24.040 --> 02:12:28.440
The first is to use a sub process macro. So just run time it

02:12:29.000 --> 02:12:32.680
Um on the string and formatting a string

02:12:34.200 --> 02:12:36.040
The second is

02:12:36.040 --> 02:12:37.080
to

02:12:37.080 --> 02:12:39.640
Call the import module as a macro

02:12:41.080 --> 02:12:47.320
So you don't have to use quotes and the third is to run, uh, uh write a json block context manager

02:12:51.560 --> 02:12:53.560
Oh, yeah, we're not gonna

02:12:54.120 --> 02:12:56.120
Then we need to get into our example

02:12:56.520 --> 02:12:58.520
And then we need to get into our like

02:13:00.520 --> 02:13:03.000
Any questions on any of these or if there are questions, um

02:13:06.680 --> 02:13:08.680
Format was 42

02:13:10.600 --> 02:13:15.880
And you see like what this really prevents once time it completes

02:13:16.600 --> 02:13:24.440
Is you having to run it with a extra set of quotes, right? Because time it expects just a single argument that takes

02:13:25.080 --> 02:13:27.080
Um, so this is the same

02:13:27.400 --> 02:13:31.880
This is fundamentally the same, but you just you don't have to type that extra set of quotes. So

02:13:33.880 --> 02:13:35.880
Okay

02:13:37.560 --> 02:13:39.560
All right, you want to move on to the next

02:13:40.680 --> 02:13:42.680
And then yeah for the

02:13:42.840 --> 02:13:44.840
standard library import lib

02:13:45.400 --> 02:13:51.080
Um, this is just showing you can you actually you can just use existing functions, but call them using the macro syntax

02:13:51.960 --> 02:13:53.960
And so in this case you get back the

02:13:56.600 --> 02:13:58.600
Import lib sorry. Yeah

02:13:59.000 --> 02:14:00.440
dot

02:14:00.440 --> 02:14:02.440
import module

02:14:03.080 --> 02:14:05.080
So if we do sys

02:14:06.200 --> 02:14:10.360
Uh, right because the first argument is a string you can just get that so

02:14:11.160 --> 02:14:14.120
It'll it'll take it'll turn whatever you type that into a string

02:14:15.800 --> 02:14:17.800
Okay

02:14:20.120 --> 02:14:22.120
And then

02:14:22.360 --> 02:14:29.480
Uh, the third one is this json block. So this should be very familiar to the xml one where

02:14:30.440 --> 02:14:32.440
um

02:14:33.000 --> 02:14:34.840
Now we just have

02:14:34.840 --> 02:14:43.160
Or now we have uh json. We don't need the the macro block part because that's optional. Um, but we

02:14:44.120 --> 02:14:46.120
Uh, oops on enter

02:14:47.000 --> 02:14:48.520
um

02:14:48.520 --> 02:14:51.000
We'll assume that the code that comes in

02:14:51.800 --> 02:14:53.320
is

02:14:53.320 --> 02:14:57.720
Uh part of is valid json. So we'll return

02:14:59.320 --> 02:15:01.320
uh json

02:15:01.400 --> 02:15:03.400
dot loads

02:15:03.400 --> 02:15:04.760
of

02:15:04.760 --> 02:15:06.440
self dot

02:15:06.440 --> 02:15:08.440
macro block

02:15:08.760 --> 02:15:10.760
Um

02:15:11.400 --> 02:15:13.400
And then on exit

02:15:13.560 --> 02:15:18.280
Uh, we'll do this we'll do the same delete portion just to clean up after ourselves as well

02:15:18.840 --> 02:15:22.840
um, and so a use case for this is just with

02:15:23.960 --> 02:15:25.080
uh

02:15:25.080 --> 02:15:27.080
json block

02:15:27.160 --> 02:15:28.360
as

02:15:28.360 --> 02:15:31.560
Let's call it x. Um, and we can write like

02:15:33.640 --> 02:15:36.360
Hello, just some random json

02:15:37.720 --> 02:15:39.480
mom

02:15:39.480 --> 02:15:40.760
And now

02:15:40.760 --> 02:15:43.560
x is a dictionary that was parsed from that json pretty

02:15:44.280 --> 02:15:51.880
Pretty simple silly example because json and python are so similar here, but uh, you know, it's it's a one way to do things

02:15:52.120 --> 02:15:53.480
so

02:15:53.480 --> 02:15:55.480
Any questions on these exercises? Yeah

02:15:56.120 --> 02:15:56.920
So

02:15:56.920 --> 02:16:02.600
Where does this json block object end up in this case? What do you mean? So

02:16:03.560 --> 02:16:05.560
x ended up as the return value of enter

02:16:06.120 --> 02:16:08.120
Yes, so where did the json block instance

02:16:09.080 --> 02:16:11.560
It's gone. Okay, so like the so the cleanup is a little

02:16:13.000 --> 02:16:15.000
I guess you can show in the cleanup

02:16:15.000 --> 02:16:17.000
Implying these things are leaking

02:16:17.240 --> 02:16:23.320
Well, so the macro block and macro globals and macro locals. Yeah, so so this would leak

02:16:23.560 --> 02:16:27.400
I get in the case where you instead returned self from the

02:16:28.600 --> 02:16:31.080
From the from the enter method

02:16:32.280 --> 02:16:34.280
Right

02:16:35.240 --> 02:16:38.440
No, no, it's not it's not keeping a cache it would only leak if you

02:16:39.480 --> 02:16:40.760
so like

02:16:40.760 --> 02:16:45.640
So the the place where it would leak potentially where you wouldn't want it to necessarily is like if you wanted to

02:16:46.200 --> 02:16:47.400
Have the same

02:16:47.400 --> 02:16:53.480
Instance of json block be reentrant like that's what this makes us so you could like have one instance of json block

02:16:53.640 --> 02:16:55.640
And then just reenter it every time

02:16:56.040 --> 02:16:58.040
And always get the tree back

02:16:58.440 --> 02:17:01.640
Uh, or if you return self and we're doing something else with it later

02:17:02.360 --> 02:17:04.360
Right, so yeah

02:17:05.640 --> 02:17:07.880
That that's where the references get added

02:17:09.880 --> 02:17:11.640
Yeah

02:17:11.640 --> 02:17:13.640
Does that make sense

02:17:13.640 --> 02:17:18.840
Sort of um close enough. Yeah, I guess the the thing is like if you returned

02:17:20.120 --> 02:17:22.120
Uh, so if you said like

02:17:23.640 --> 02:17:25.080
self

02:17:25.080 --> 02:17:27.080
dot

02:17:27.320 --> 02:17:29.320
Like maybe you wanted like

02:17:30.040 --> 02:17:36.760
Like maybe you wanted to keep the j object around so you did like json dot

02:17:37.480 --> 02:17:39.480
Or you wanted to keep the tree

02:17:40.200 --> 02:17:42.200
um, so you do json.loads

02:17:43.560 --> 02:17:45.560
of

02:17:46.200 --> 02:17:48.200
self dot macro block

02:17:49.640 --> 02:17:51.640
And then

02:17:52.440 --> 02:17:54.440
And then you return

02:17:54.840 --> 02:17:56.840
self

02:17:56.920 --> 02:17:59.000
You know, you might not want to keep the globals

02:17:59.720 --> 02:18:04.280
You might want to keep the macro block itself around, but you might not want to keep the other locals and and

02:18:04.920 --> 02:18:06.520
globals here

02:18:06.520 --> 02:18:08.200
and so

02:18:08.200 --> 02:18:09.800
Just using this

02:18:09.800 --> 02:18:14.120
So now x is the json block and then x dot

02:18:15.400 --> 02:18:17.000
Tree

02:18:17.000 --> 02:18:19.000
Is the uh, is the actual

02:18:19.320 --> 02:18:23.480
Version, but you still have access to the string of what the macro block was

02:18:24.520 --> 02:18:26.520
Yeah

02:18:27.800 --> 02:18:33.160
They are the uh, they they're the the name they're the local and global

02:18:33.880 --> 02:18:37.880
Uh dictionaries like as if you had called locals and globals the python built-ins

02:18:38.440 --> 02:18:45.000
Where the where the macro block was called or the context macro was was written

02:18:46.200 --> 02:18:48.200
Yeah

02:18:48.680 --> 02:18:51.480
Yeah, okay. Yeah, any other questions on this?

02:18:57.320 --> 02:18:59.320
What are the use cases

02:19:02.200 --> 02:19:06.360
Yeah, so the most common use case is really something like time that right, it's really those

02:19:06.520 --> 02:19:13.000
Um, there's a couple of cases where that i've that we've used these things where like if you wanted to write some bash

02:19:13.240 --> 02:19:16.120
And you really needed it to be bash in a local context

02:19:16.600 --> 02:19:19.240
Then you would then you write like a little bash thing

02:19:19.720 --> 02:19:20.680
um

02:19:20.680 --> 02:19:26.680
There's been some other use cases where we take input or configuration files in as these macro blocks

02:19:27.720 --> 02:19:31.880
Um, uh, but otherwise, yeah, it's that's kind of the use cases

02:19:43.720 --> 02:19:45.720
Import sorry saying

02:19:47.240 --> 02:19:49.240
Oh, yeah, yeah

02:19:49.560 --> 02:19:53.880
That that was that's just a toy. Uh, that's kind of a toy example to show

02:19:54.760 --> 02:19:59.240
Um, right this comes from the standard library and the standard library didn't

02:19:59.880 --> 02:20:02.280
Uh, doesn't know anything about conscious

02:20:03.080 --> 02:20:04.120
Macro system

02:20:04.120 --> 02:20:09.640
So it didn't annotate these functions in any particular way and this is just showing that you that you can use

02:20:10.520 --> 02:20:15.720
You can use the macros on those functions if you if those functions happen to take string arguments

02:20:16.440 --> 02:20:23.960
Okay, so it's more just demonstrating it's it's demonstrating. Yeah, but the function macro stuff just ended up having to

02:20:24.360 --> 02:20:27.080
It kind of had to be there for the context macro stuff

02:20:27.720 --> 02:20:28.760
um

02:20:28.760 --> 02:20:33.880
That infrastructure all had to be the same. So it's there and available in the language if you want it, but

02:20:34.520 --> 02:20:37.800
Um, I wouldn't say there's like a killer feature for it unless you're coming

02:20:38.360 --> 02:20:44.680
From rust or you or you really like doing a lot of ast syntax ast tree like rewriting and stuff

02:20:45.480 --> 02:20:50.440
In which case this makes it easy for you to provide those rewriters or pattern matchers

02:20:51.320 --> 02:20:56.680
Um inside of conch, but there aren't that that intersection is basically me. So

02:20:59.400 --> 02:21:01.400
Yeah, so

02:21:02.040 --> 02:21:04.040
Okay, cool

02:21:05.320 --> 02:21:07.320
Good question

02:21:08.600 --> 02:21:14.520
Uh, let's we should maybe skip this well except we don't know if we can yeah, well I can try to

02:21:15.400 --> 02:21:20.520
Um, so this is going to be interesting as we discover if this is even possible anymore

02:21:21.000 --> 02:21:23.880
Um, but there, uh, there is an example here

02:21:24.360 --> 02:21:29.160
Which is that we were working in a lab that had a bunch of MRIs of mouse lemurs

02:21:30.600 --> 02:21:32.600
That's a mouse lemur

02:21:36.600 --> 02:21:42.200
So we had all these MRI datas, um, but uh, it was set up on our web server by a postdoc who disappeared last week

02:21:42.760 --> 02:21:45.000
Um, and we have some other bad news

02:21:45.800 --> 02:21:49.000
Uh, which is that he used bash to handle all the data collection

02:21:49.320 --> 02:21:52.680
He didn't know how to make sure that different datasets were saved to separate directories

02:21:52.680 --> 02:21:55.960
So he just added a random four-digit number to the end of all of these

02:21:56.600 --> 02:21:59.720
Um, NII MRI image data files

02:22:00.280 --> 02:22:05.640
Um, and he also neglected to do this with the json metadata that was included with it. So that's all been overwritten and lost

02:22:06.360 --> 02:22:08.120
Um

02:22:08.120 --> 02:22:10.680
And then he ran remove with an overly permissive glob

02:22:10.920 --> 02:22:12.920
I deleted all of them

02:22:13.320 --> 02:22:16.520
And uh, the files are kind of big in the postdoc's web servers at his house

02:22:17.160 --> 02:22:19.160
We don't want to have to download all of them

02:22:19.640 --> 02:22:21.480
um

02:22:21.480 --> 02:22:26.920
That being said, uh, the web server at the house, which is on my laptop is completely inaccessible to everyone on this network

02:22:26.920 --> 02:22:29.160
It turns out which makes this a little trickier

02:22:30.200 --> 02:22:32.200
um

02:22:34.600 --> 02:22:37.400
The data is now on uh github

02:22:37.640 --> 02:22:41.960
At uh in this repo called MRI data, sorry

02:22:47.800 --> 02:22:49.800
And uh

02:22:49.960 --> 02:22:53.160
This may not be possible. So we'll find that it's going to be a learning adventure for all of us

02:22:53.880 --> 02:22:58.120
Um, we do know a couple of things about the data. So this is sort of our exploratory thing

02:22:58.200 --> 02:23:00.840
They all do follow this naming convention

02:23:01.400 --> 02:23:06.200
Uh, so you just have like sub dash two-digit number underscore four-digit number dot NII

02:23:07.160 --> 02:23:08.280
Um

02:23:08.280 --> 02:23:13.640
The files are large, but the first 348 bytes of each file is a header

02:23:14.440 --> 02:23:17.000
So you can nominally just pull down the header

02:23:18.520 --> 02:23:21.480
Um, we're pretty sure there are 19 mouse lemur scans

02:23:23.240 --> 02:23:24.520
Um

02:23:24.520 --> 02:23:29.800
And the circle spine study going on the lab next door, which is mixed in with all this data only has six subjects

02:23:31.720 --> 02:23:33.080
Um

02:23:33.080 --> 02:23:41.000
And nominally this is how you would use curl to only pull down the first 348 bytes of a file if there were a functioning web server available

02:23:41.560 --> 02:23:47.240
Um, we're going to discover together if you can do this from like the raw link on a github repo

02:23:48.280 --> 02:23:50.280
But we're not sure

02:23:51.080 --> 02:23:53.080
Um

02:23:53.320 --> 02:23:58.760
So having said that if you would like to even try this and we welcome your support and efforts

02:23:59.640 --> 02:24:06.920
You can install, uh, n i babel, uh, n i b a b e l on kind of forage, which is a nice package for loading in this MRI data

02:24:08.120 --> 02:24:12.840
It's on pip, right? I don't know. Oh, you don't know. Okay. Yeah, I don't even look on pip anymore. Yeah

02:24:16.280 --> 02:24:18.280
And then um

02:24:18.600 --> 02:24:21.320
We are all gonna try together to see if we can

02:24:22.040 --> 02:24:25.800
Just download the headers of each of these files to sort of determine which of them are the ones we want

02:24:25.800 --> 02:24:30.520
So we don't just download everything which is never usually the right answer to these sorts of questions

02:24:32.600 --> 02:24:36.680
Maybe we should see if we can curl one of them right now. Yeah, let's try it. Okay

02:24:37.640 --> 02:24:39.640
um

02:24:41.160 --> 02:24:43.480
All right, so what it's curl dash

02:24:46.600 --> 02:24:48.200
R

02:24:48.200 --> 02:24:50.200
and then

02:24:50.840 --> 02:24:54.520
What I should have kept that and then what's the github URL?

02:24:55.800 --> 02:24:58.040
Well, the github api should be

02:25:01.240 --> 02:25:03.400
This feels way too much like real science right now

02:25:06.920 --> 02:25:08.920
So it would be uh

02:25:11.880 --> 02:25:17.240
github.com g4 site MRI data sorry blob master rifles true

02:25:19.640 --> 02:25:21.640
That didn't work

02:25:23.400 --> 02:25:25.400
No

02:25:26.680 --> 02:25:27.800
I

02:25:27.800 --> 02:25:29.800
Thought there was like a real

02:25:30.600 --> 02:25:35.240
Okay, you know like a raw user data kind of thing. Where does that live at?

02:25:36.360 --> 02:25:38.360
I think usually it's there unless the file is too big

02:25:39.800 --> 02:25:41.400
Oh

02:25:41.400 --> 02:25:45.720
Okay, this is why you don't store, you know big data on github this way. It's a really bad pattern

02:25:50.840 --> 02:25:52.840
Let's try this one

02:25:56.760 --> 02:25:58.760
Received

02:26:07.160 --> 02:26:09.480
No such key or maybe that one's not up yet

02:26:15.240 --> 02:26:17.560
It's another one of these file names that's definitely up

02:26:26.280 --> 02:26:28.280
Uh

02:26:32.440 --> 02:26:34.440
Okay, time to rewrite the slides

02:26:36.600 --> 02:26:43.880
Which you'll be able to reload and copy from yeah, what's that digital ocean droplet? Uh, they're all all

02:26:46.040 --> 02:26:48.040
Put it in this chat

02:26:52.440 --> 02:26:54.440
Sorry about this overall

02:26:56.520 --> 02:26:58.520
By

02:27:01.400 --> 02:27:05.800
Yes, yeah, no the network's all kinds of fun today

02:27:17.080 --> 02:27:23.800
Don't help me google. I don't want your help your help is terrible and poison. It's not help. It's spying. Just stop spying on everything we do

02:27:24.040 --> 02:27:26.040
They're watching us right now

02:27:27.480 --> 02:27:30.040
That's true, but we we ask them to

02:27:38.280 --> 02:27:43.560
Can you curl down a file list from there? Is that work? No, I don't well, I don't know how to what was the command for doing

02:27:45.240 --> 02:27:47.240
All right, I think

02:27:47.560 --> 02:27:53.480
It should just be this

02:27:57.640 --> 02:27:59.640
Okay, does it work

02:28:00.120 --> 02:28:04.120
Yeah, that's yeah that that the information's in there. Okay, so

02:28:06.040 --> 02:28:08.040
Yes

02:28:08.040 --> 02:28:10.040
So you've got an xml block

02:28:10.360 --> 02:28:12.360
all right

02:28:12.760 --> 02:28:16.920
We are happy to answer questions along the way this should actually work though, which is kind of amazing

02:28:18.120 --> 02:28:19.800
so we have

02:28:19.800 --> 02:28:25.560
The post doc is better than we thought he was and has uploaded the files to this digital ocean droplet

02:28:26.120 --> 02:28:28.120
That I've just added to this slide

02:28:29.000 --> 02:28:33.400
If you reload the slide deck you should be oh, I haven't I haven't pushed it up. Okay. I'm sorry

02:28:33.720 --> 02:28:38.360
I can't I can't push anything right now because I haven't set up the ssh thing and it wasn't working. I'm sorry

02:28:39.320 --> 02:28:40.520
um

02:28:40.520 --> 02:28:44.040
But if you curl that url you will get

02:28:45.160 --> 02:28:47.160
This looking kind of blob

02:28:47.720 --> 02:28:49.720
Which does have all of the file names in it

02:28:50.200 --> 02:28:52.200
So you can see there's one

02:28:52.360 --> 02:28:53.960
I lost it there

02:28:53.960 --> 02:28:55.960
sub 187785.nii

02:28:57.560 --> 02:29:02.040
And you should be able to pull out from this a list of all all of the names that match that pattern

02:29:02.760 --> 02:29:04.760
and then you can

02:29:04.760 --> 02:29:08.920
Pull down only the first 348 bytes of each of them load them into

02:29:10.040 --> 02:29:15.560
Ni babel and then inspect sort of the dimensions of the thing to figure out which are sort of the correct images

02:29:18.040 --> 02:29:20.040
Yes, I can

02:29:28.280 --> 02:29:35.080
You probably need to well actually yeah, it should just work. Yeah. Yeah, it works. Yeah, I do that all the time

02:29:36.440 --> 02:29:39.000
All right, kind of install something and then import it immediately

02:29:39.240 --> 02:29:41.240
Yeah, so

02:29:42.760 --> 02:29:48.120
Uh, yeah, and if you're having a problem or if you're running to issues like come just raise your hand let let us know

02:29:52.520 --> 02:29:55.320
And thanks for uh dealing with our debugging

02:29:59.960 --> 02:30:05.240
So for a quick update on our progress here is there anyone anyone doing on this if at all

02:30:09.000 --> 02:30:10.520
Sorry to hear that

02:30:10.520 --> 02:30:11.720
so, um

02:30:11.720 --> 02:30:15.400
One thing you can do for some of this is you first want to get

02:30:17.320 --> 02:30:19.320
Uh the raw kind of page

02:30:19.960 --> 02:30:25.000
So that would be you could just curl down that base. You are all there. I actually got encoded. This is a yeah

02:30:25.000 --> 02:30:27.000
Can you make the font? I sure can

02:30:29.720 --> 02:30:34.520
You want to show the other command? Oh, yeah base. You're all right. Yeah, so then if you have this

02:30:35.320 --> 02:30:37.400
Really long painful string like this, but you know

02:30:38.280 --> 02:30:40.280
That the files look like

02:30:43.320 --> 02:30:45.320
Somewhere there

02:30:46.840 --> 02:30:50.040
You can try to use xml, but xml is horrible

02:30:50.920 --> 02:30:51.960
so

02:30:51.960 --> 02:30:53.160
um

02:30:53.160 --> 02:30:59.320
You could also use a regular expression to scrape over that and pull out anything that matches a certain pattern

02:31:02.200 --> 02:31:05.000
So then that's sort of the list of files that match that

02:31:05.400 --> 02:31:10.200
So now you might want to try just like downloading one of those

02:31:12.280 --> 02:31:16.200
Which would be to grab the first 348 bytes

02:31:20.680 --> 02:31:24.760
Save it to the same output file it concatenate or just you know put together the base url

02:31:24.760 --> 02:31:27.320
And then the path of a single file just to kind of test it out

02:31:29.880 --> 02:31:32.440
Seems to work you import knee babble

02:31:35.400 --> 02:31:37.400
You can load that file

02:31:38.200 --> 02:31:40.200
And then if you explore

02:31:41.080 --> 02:31:44.760
Some of the different options here you might see this header thing

02:31:52.840 --> 02:31:54.840
Yeah back there

02:32:05.960 --> 02:32:14.360
Yeah, so the question is about uh, why why shouldn't you use a path string here? Well, yeah

02:32:14.360 --> 02:32:16.760
So the answer is basically that it's a url

02:32:17.320 --> 02:32:19.320
So it's not really a path in a normal way

02:32:19.560 --> 02:32:24.840
And the second is that you're you're just passing it back down to a command a sub process command

02:32:25.160 --> 02:32:29.720
And so it's going to get turned back into a string anyways, so you don't really need the path object

02:32:30.200 --> 02:32:32.200
Yeah, having said that what um

02:32:33.080 --> 02:32:36.760
You know as you go along on this you might you would maybe curl it down using just you know

02:32:36.920 --> 02:32:38.920
Just a string because you want to pass that to curl

02:32:39.240 --> 02:32:44.440
But then in terms of loading the file after you have it there you could first make it a a path lib path

02:32:45.080 --> 02:32:49.480
Load it from that and then depending on the results of like how you're inspecting it

02:32:49.560 --> 02:32:54.120
Then use path lib of that file to move it or change it or mark it or delete it or

02:32:54.840 --> 02:32:56.840
You know so you can work that into the

02:32:57.240 --> 02:32:59.240
The process

02:33:02.440 --> 02:33:04.920
I'm going to keep working on this like at lunch so people want to

02:33:05.960 --> 02:33:07.960
On this contrived example to be created

02:33:08.440 --> 02:33:10.440
But you want things to work

02:33:11.240 --> 02:33:16.440
So that um, thank you everyone for coming. Uh, I know it's like a lot of information just to dump into people's heads

02:33:16.840 --> 02:33:22.760
But we appreciate you guys kind of toughing it out with us. Um, we also um, there's a bunch of stuff we haven't covered

02:33:24.760 --> 02:33:27.560
There's even some more new syntax probably that I've forgotten about

02:33:27.640 --> 02:33:31.640
Um, but we're here all week and we're happy to help you answer questions

02:33:31.640 --> 02:33:35.480
If you have a certain thing you like to do and you just want it to you think it could work a little better

02:33:35.480 --> 02:33:38.360
You want to try see what it would look like on conch? Please like stop us anytime

02:33:38.440 --> 02:33:44.440
We have stickers on our badges and you probably would recognize at this point. Um, we also have stickers up front

02:33:44.520 --> 02:33:50.440
So feel free to take as many as you want of those and uh, yeah, thanks for coming and trying out conch and hopefully

02:33:51.080 --> 02:33:54.840
You know, it improves your life in some meaningful way. So

02:33:55.480 --> 02:33:57.240
uh, and then

02:33:57.240 --> 02:34:01.000
Yeah, we'll be around and open bug reports find us on getter

02:34:01.640 --> 02:34:04.440
Uh, open issues contribute. We're

02:34:05.400 --> 02:34:08.360
Friendly community. So thank you so much everybody

