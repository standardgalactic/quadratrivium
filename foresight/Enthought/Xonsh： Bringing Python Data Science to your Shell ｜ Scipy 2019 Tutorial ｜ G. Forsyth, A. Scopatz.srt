1
00:00:00,000 --> 00:00:05,840
Welcome. This is the tutorial for a conch. If you're not here for a tutorial on conch, you're really in the wrong room.

2
00:00:08,160 --> 00:00:13,080
But we hope you're in the right room. Yeah, we think this room is the best actually. You made a good choice.

3
00:00:16,760 --> 00:00:22,120
You can introduce yourself. Hi, I'm Anthony Scopatz. I work for Quonsite and according to the slide

4
00:00:22,120 --> 00:00:28,280
I am both a madman and a poet, so I hope that this inspires you in some way today.

5
00:00:29,240 --> 00:00:31,800
I'm Gil Forsythe, not Gorsythe.

6
00:00:33,440 --> 00:00:37,840
I am also a madman and a poet according to the slide. I currently work for Capital One.

7
00:00:39,480 --> 00:00:44,360
Yeah, that's why I got it. Yeah, and thanks for being here with us 8 a.m. on a Monday morning.

8
00:00:45,080 --> 00:00:48,880
Not everybody wants to learn about new show languages at 8 a.m. on Monday morning, but

9
00:00:50,400 --> 00:00:52,400
so we have a few bits of

10
00:00:53,360 --> 00:00:59,120
bookkeeping and just want to get everyone kind of set up and ready to go. If you've been to a lot of, or any slide

11
00:00:59,120 --> 00:01:01,120
part tutorials before, sort of the

12
00:01:02,120 --> 00:01:08,080
the usual mode of presentation interaction is Jupyter Notebooks, and those are great. It works really badly

13
00:01:08,440 --> 00:01:11,960
if what you're teaching is like a show language and prompt.

14
00:01:12,760 --> 00:01:16,120
So we actually just do need you to install the stuff, and then we will

15
00:01:17,400 --> 00:01:21,280
be sort of live coding and have slides at the same time, and we're, you know,

16
00:01:21,280 --> 00:01:25,560
we'll be running around and help and stuff. But so if all of you can just take a few moments and we'll run around

17
00:01:26,560 --> 00:01:31,760
to troubleshoot and install Conch, we highly recommend using Conva for this, but

18
00:01:32,080 --> 00:01:36,960
there's other options. Yeah, and there's a new release as of last night at 10 p.m.

19
00:01:36,960 --> 00:01:40,200
So if you haven't updated since then, please

20
00:01:41,200 --> 00:01:44,200
there's a bug fix. Sorry, the code has bugs.

21
00:01:44,280 --> 00:01:54,720
Like all code. So yeah, please grab the 0.9.8 release, and we'll go from there. So who has

22
00:01:55,120 --> 00:01:57,120
Conch installed right now already?

23
00:01:58,160 --> 00:02:05,720
Okay, most of you, and if you don't, like just grab it, it should take two seconds because it is pure Python, thankfully.

24
00:02:07,040 --> 00:02:09,120
So you don't have to deal with like weird

25
00:02:10,040 --> 00:02:16,160
Fortran rust extension interactions and stuff or read line read line. Oh, yeah, we don't have to deal with read line

26
00:02:16,560 --> 00:02:18,560
Everyone's favorite library

27
00:02:19,120 --> 00:02:21,120
Three three chairs for read line

28
00:02:21,520 --> 00:02:27,360
No, no, no chairs. Okay. Wow. We got one tough crowd one one one one chair. Wow

29
00:02:28,440 --> 00:02:30,440
Nice input RC. There you go

30
00:02:31,680 --> 00:02:33,680
Thank you. I'll be here

31
00:02:33,680 --> 00:02:35,680
What?

32
00:02:39,120 --> 00:02:44,760
Alright, so oh, and we we should send out the link to the slides as well. So

33
00:02:47,040 --> 00:02:49,040
Slides should be at

34
00:02:52,440 --> 00:02:57,400
Conduct SH this is what's that repo called is it like conch?

35
00:03:02,440 --> 00:03:07,160
While people are installing conch and for people just coming into the room, please install conch

36
00:03:09,160 --> 00:03:13,880
I just want to sort of do a quick poll the room get a sense of who y'all are and why you're here

37
00:03:14,680 --> 00:03:18,280
So who here uses bash on a regular basis?

38
00:03:18,960 --> 00:03:20,960
Okay, any Z shell users?

39
00:03:21,440 --> 00:03:23,440
Okay, fish

40
00:03:23,560 --> 00:03:29,360
One, okay. Yeah, one cheer for fish one cheer for real on to you. Okay, fish got two chairs. All right. Has anybody used conch already?

41
00:03:30,320 --> 00:03:32,320
All right

42
00:03:35,400 --> 00:03:38,160
Okay, who here really likes bash?

43
00:03:40,120 --> 00:03:43,120
That's okay. No, no, there's nothing to be ashamed about. There's an open question

44
00:03:43,120 --> 00:03:47,840
We're not we're not here to know who here remembers the syntax for a for loop and bash that looking at stack overflow

45
00:03:48,560 --> 00:03:51,080
Okay, no, no, some people can do that. That's totally cool

46
00:03:51,240 --> 00:03:56,320
Who here remembers how to tokenize a non-whitespace string and bash without looking at stack overflow?

47
00:03:57,200 --> 00:04:01,000
Both so I'll believe you. I'm not gonna I'm not gonna you know, call you out there. That's good. Okay

48
00:04:02,880 --> 00:04:08,200
So while we get the slides everybody, I mean one of the things conscious for many things

49
00:04:08,960 --> 00:04:12,600
Partially, it's the to suit our mad desires

50
00:04:13,000 --> 00:04:17,960
But also it was a lot of these things which seem like they should be simple and easy to remember aren't

51
00:04:18,400 --> 00:04:22,000
and a lot of us are dealing on our daily workflows with

52
00:04:23,400 --> 00:04:25,800
Language decisions from the 70s which made a lot of sense

53
00:04:25,800 --> 00:04:32,760
But maybe we don't like want there to be a difference between single and double quotes all the time or like maybe we don't want to have that many square brackets in a row

54
00:04:33,560 --> 00:04:38,960
And so this is an effort to remove that pain because this should be a relatively

55
00:04:39,560 --> 00:04:44,760
Seamless and sort of fun interaction and you should just be able to do the things you want to do without struggling through it

56
00:04:46,560 --> 00:04:50,600
I think we probably can I don't have the slide link okay

57
00:04:51,600 --> 00:04:55,520
Are people and mostly installed and ready to go have contra running

58
00:04:56,880 --> 00:05:00,760
Cool, is anybody not have contra and that would be I guess the question to ask okay

59
00:05:01,240 --> 00:05:06,000
We're still going to be talking for just a bit so and we can we can catch up as we go

60
00:05:08,760 --> 00:05:10,760
Okay

61
00:05:11,520 --> 00:05:13,520
Also just a quick tante check if you can run

62
00:05:15,160 --> 00:05:19,960
Every time we say like the sound like co or something it's always gonna start with an X just a fair warning

63
00:05:20,360 --> 00:05:25,920
So if you can run config, it's x o n f i g in your conch shell

64
00:05:26,120 --> 00:05:29,360
That should probably not say what it says here

65
00:05:29,360 --> 00:05:34,120
Maybe should say zero point nine point eight at the top just so we were sure we're on roughly speaking the right versions

66
00:05:35,960 --> 00:05:41,840
I do have the link, but I don't know a good way to get it to you guys other than I'll just put it here

67
00:05:41,840 --> 00:05:45,160
So if you want to follow along with the tutorial

68
00:05:46,040 --> 00:05:48,040
You

69
00:05:49,920 --> 00:05:53,640
Can go to this link so it's conch.github.io

70
00:05:54,440 --> 00:05:56,440
sci-pi-2019-tutorial

71
00:05:57,160 --> 00:06:00,800
Slash remote HTML. We're sorry about the URL. Yeah

72
00:06:02,560 --> 00:06:04,560
Only a little sorry

73
00:06:06,240 --> 00:06:11,040
But yeah, you can click along and follow so you can skip ahead in the slides or go back

74
00:06:11,040 --> 00:06:13,520
There's some exercises and things like that and so

75
00:06:14,280 --> 00:06:16,280
Bring that up now

76
00:06:18,640 --> 00:06:22,000
Okay, I'll let you guys do that and then we'll

77
00:06:22,000 --> 00:06:24,000
Do

78
00:06:42,000 --> 00:06:44,520
Okay, that seems good. Yeah, great

79
00:06:45,800 --> 00:06:47,200
Okay, so

80
00:06:47,200 --> 00:06:50,440
Quickly just like an overview of just some things that you'll see us doing a lot

81
00:06:50,440 --> 00:06:53,520
And you should also feel free to do while you're interacting with the shell

82
00:06:53,920 --> 00:06:57,800
We don't have explicit slides about this because they're just sort of general overall

83
00:06:58,040 --> 00:07:00,600
Like things you can do in a shell or in conch anyway

84
00:07:00,960 --> 00:07:06,240
But if you see us do something like we obviously hit one key and something happens and you want to know what just happened

85
00:07:06,240 --> 00:07:11,040
Please just ask us if it if it seemed like it came out of nowhere or we're not trying to make this opaque

86
00:07:12,680 --> 00:07:15,480
So generally speaking there's tab completion. Oh, yes

87
00:07:18,200 --> 00:07:23,520
Oh from the there's an there's an L right at the end. Yeah, so it wrapped a little

88
00:07:25,680 --> 00:07:30,800
Yeah, I was getting well the directory doesn't have an index.html I can fix that in a moment, but

89
00:07:32,600 --> 00:07:34,600
Yeah

90
00:07:35,200 --> 00:07:39,600
Generally speaking this tab completion for almost everything so it'll save you time when you're typing

91
00:07:40,720 --> 00:07:42,240
Beware of that

92
00:07:42,240 --> 00:07:45,280
Does anyone not know what tab completion is? No, no shame

93
00:07:46,200 --> 00:07:48,200
All right great

94
00:07:48,800 --> 00:07:50,960
This will mean less for you at the beginning of the tutorial

95
00:07:50,960 --> 00:07:52,640
There's a lot of history search functionality

96
00:07:52,640 --> 00:07:55,040
You probably don't have much of a conch history at the moment

97
00:07:55,040 --> 00:07:58,240
So that won't mean that much but there are several ways to search up

98
00:07:58,680 --> 00:08:03,840
We'll kind of touch on those a little bit later control R as your friend that will kind of give you an anywhere

99
00:08:04,200 --> 00:08:07,480
Line search back in your history if you start typing a command

100
00:08:07,480 --> 00:08:10,360
You can press up and it will do a prefix search match

101
00:08:10,360 --> 00:08:14,940
So like anything that's any line that started with that initial bit will show up in the results as you arrow up

102
00:08:15,480 --> 00:08:20,600
And you'll see this sort of ghost text showing up if you're typing the same command this sort of a

103
00:08:21,200 --> 00:08:27,880
History match autocomplete thing and you can just hit right arrow or I think control E to sort of expand out to that if you want

104
00:08:28,320 --> 00:08:32,120
Don't worry about like taking all that in at once, but we'll come back to it

105
00:08:37,320 --> 00:08:39,880
Yes for all the

106
00:08:40,720 --> 00:08:43,440
Pythonic bits in conch and we'll find out what those are a little bit later

107
00:08:43,680 --> 00:08:49,240
You can always append a question mark to a command and it will bring up a little help screen in the pager

108
00:08:49,240 --> 00:08:53,920
Or you can do a double question mark for super help for even more if you've used ipython

109
00:08:54,560 --> 00:08:57,840
Fair bit. This will maybe be a familiar pattern. Yes

110
00:09:01,520 --> 00:09:07,800
I don't think there is one it's a UT guess and should just be an open wide open network

111
00:09:08,400 --> 00:09:10,680
Yeah, is there another question over here?

112
00:09:15,720 --> 00:09:18,240
I think we did discover that yeah

113
00:09:32,160 --> 00:09:34,160
Okay

114
00:09:34,800 --> 00:09:40,920
Yeah, okay, not gonna do that live we are gonna ask everyone about questions about that during the break so we can fix something

115
00:09:40,920 --> 00:09:43,640
That wasn't working and that would be but that's good news awesome

116
00:09:45,080 --> 00:09:48,000
Okay, are there any questions?

117
00:09:50,080 --> 00:09:52,080
Okay

118
00:09:53,480 --> 00:09:54,840
All right

119
00:09:54,840 --> 00:09:58,240
So yeah, there's was that a question. No, all right

120
00:09:58,240 --> 00:10:03,760
So everyone has conch working that can if you ran the sorry the config

121
00:10:04,680 --> 00:10:06,680
Let me just go into the

122
00:10:12,080 --> 00:10:16,440
Okay, so you should have been able to run the config command and see some output like this

123
00:10:16,480 --> 00:10:19,800
So if is everyone kind of at that stage?

124
00:10:22,600 --> 00:10:25,440
The cut oh, yeah, it's it's config with an X

125
00:10:28,760 --> 00:10:32,080
You're gonna love that X key in the next four hours. All right

126
00:10:32,920 --> 00:10:35,120
Okay, so we've got our agenda here

127
00:10:35,120 --> 00:10:40,200
We'll be taking some breaks in between these things and we're gonna be building up to sort of greater and greater capability

128
00:10:40,880 --> 00:10:46,000
Over the time. These are links. So if you have the slides up you can jump around if you want to

129
00:10:46,960 --> 00:10:50,320
And there are exercises at the end of each little section. So

130
00:10:51,880 --> 00:10:54,760
That's a gonna do the shuffle here

131
00:10:54,880 --> 00:10:56,880
So

132
00:10:59,160 --> 00:11:06,520
Conch is a superset of Python 3 so what that means is that all of the syntax that's in

133
00:11:06,680 --> 00:11:09,320
Python is also valid conch, right?

134
00:11:09,320 --> 00:11:11,320
So there's no so if you know Python

135
00:11:12,000 --> 00:11:16,320
Pretty well or really well or extremely well everything should be familiar to you

136
00:11:17,560 --> 00:11:21,440
And so you can do a bunch like basically everything that you would be able to do in Python, right?

137
00:11:21,480 --> 00:11:25,040
Like to find classes functions modules etc

138
00:11:26,200 --> 00:11:32,160
So we can go ahead and you know do these along with us like you know when they come up

139
00:11:32,160 --> 00:11:38,320
So let's try some in the mount. Oh, these are our first exercises actually. So the the first one is to

140
00:11:38,720 --> 00:11:40,720
compute the product of

141
00:11:40,880 --> 00:11:42,640
two three and seven

142
00:11:42,640 --> 00:11:44,640
the second one is to

143
00:11:44,640 --> 00:11:48,320
Import numpy or import sys if you don't have happened to have numpy installed

144
00:11:49,040 --> 00:11:52,800
And then also define a function you can do this all this right at the command line

145
00:11:52,800 --> 00:11:56,760
You don't need to go anywhere else. You don't need to do this in a file. So

146
00:11:58,280 --> 00:12:01,160
Try these out you can click on the details to get the answer

147
00:12:01,560 --> 00:12:05,920
And we'll give you guys a couple of minutes to try this stuff out

148
00:12:06,800 --> 00:12:09,640
And also be solving it very slowly in real time

149
00:12:19,200 --> 00:12:21,200
I

150
00:12:22,920 --> 00:12:28,240
Think you can go wow 42 what a what an auspicious number there

151
00:12:32,160 --> 00:12:40,640
Can we import a module Gil yes wow that's that's pretty impressive

152
00:12:48,320 --> 00:12:50,320
Oh

153
00:12:55,240 --> 00:12:57,940
We're in real life we should be like yeah, yeah, sorry

154
00:13:05,080 --> 00:13:07,080
No, I'll still in relay

155
00:13:08,520 --> 00:13:10,520
Yeah

156
00:13:13,360 --> 00:13:17,640
Sorry, I was in developer mode right there there we go

157
00:13:18,960 --> 00:13:22,120
So you're saying yeah, you should see there's a lot of tab completions available

158
00:13:22,120 --> 00:13:25,160
So if you import or I'll do sys actually too because that's one

159
00:13:25,920 --> 00:13:32,760
You can just hit tab after the dot and those will be all of the attributes and modules that are available in sys. Yep

160
00:13:34,760 --> 00:13:36,920
I forgot the last one the function

161
00:13:39,760 --> 00:13:42,360
Does anyone have any problems or questions these

162
00:13:43,360 --> 00:13:48,840
It's pretty simple right so this is just to prove to you that contrary is Python

163
00:13:54,160 --> 00:13:57,880
Yes, yes you can well we will get to that question later

164
00:14:00,280 --> 00:14:05,480
So Dhar Haas's question for those of you who are listening at home was can you define a function?

165
00:14:05,480 --> 00:14:08,760
That's all a command on your system and the answer is yes

166
00:14:08,800 --> 00:14:12,400
And we'll get to how all that resolves and works later so

167
00:14:13,800 --> 00:14:17,960
Great question. Okay, and we'll get to it pretty soon. I think actually

168
00:14:18,720 --> 00:14:21,440
So conscious of shell so conscious also a shell language

169
00:14:22,240 --> 00:14:25,960
or more more precisely, it's really a scripting language that is

170
00:14:26,880 --> 00:14:34,200
Mostly shlang compatible, which if you go back to like the 60s and 70s, you know, sh

171
00:14:34,720 --> 00:14:42,880
Was this old or is a shell language that we all have inherited a la bash and and z shell and another and other languages like that

172
00:14:44,000 --> 00:14:48,220
But unfortunately, it's actually impossible the syntax is

173
00:14:48,640 --> 00:14:53,600
Collide and it's impossible to be both a Python and shlang compatible language

174
00:14:54,360 --> 00:14:59,920
And so you have to kind of choose and in conch we have chosen that Python will always win

175
00:15:00,520 --> 00:15:02,520
There's a couple reasons for this

176
00:15:02,640 --> 00:15:05,440
but mostly it's that Python is the same language and

177
00:15:06,560 --> 00:15:10,400
sh is not really sane in some ways like the splitting

178
00:15:11,040 --> 00:15:18,520
Strings on non-whitespace characters and the machinery for how all that stuff works is kind of crazy if you dig into how the shlangs work

179
00:15:19,560 --> 00:15:24,560
But Python always wins. So if you found a place where Python syntax isn't working

180
00:15:25,000 --> 00:15:27,000
That is a bug

181
00:15:27,640 --> 00:15:29,640
Please report that

182
00:15:29,880 --> 00:15:37,440
Yeah, yes, sure. Just as an example of this this issues where so this is a command that you may be familiar with

183
00:15:42,240 --> 00:15:46,840
But this is also a valid Python syntax if Alice and L are you know defined so

184
00:15:46,960 --> 00:15:48,960
So

185
00:15:56,400 --> 00:16:00,920
So the rule is is that if one of those things isn't defined it'll still function, right?

186
00:16:00,920 --> 00:16:04,200
You can just delete the variables, but it is possible to overwrite those

187
00:16:04,600 --> 00:16:11,680
Built-in names, and there's a way to escape that which will this is just a convenience, but that we'll get to in a bit here

188
00:16:13,280 --> 00:16:16,440
So the purpose of the shell is to run commands obviously

189
00:16:17,360 --> 00:16:21,880
And so we've got some commands here, right? So we just saw ls-l

190
00:16:22,600 --> 00:16:27,360
Simple one. Yeah, please type you know type this out if you if you want just prove it to yourself

191
00:16:28,400 --> 00:16:31,280
But this works you can do echo

192
00:16:31,880 --> 00:16:33,880
You can make directories

193
00:16:34,120 --> 00:16:37,160
And cd into those directories touch files

194
00:16:38,040 --> 00:16:40,040
Do all the kinds of normal things that you

195
00:16:40,680 --> 00:16:45,520
You would you would want to do so and I think I actually have all that test code here still but

196
00:16:46,080 --> 00:16:49,640
And the other thing that you can do is you can pipe, right? So if you're

197
00:16:50,680 --> 00:16:54,160
Familiar with piping from other shell languages you can take the output

198
00:16:55,320 --> 00:17:02,360
From one command and and make that the input to another and so that all works normally like you would expect in conscious well

199
00:17:03,120 --> 00:17:08,560
So and basically under under the covers. This is a horrible abuse of the sub-process module

200
00:17:08,880 --> 00:17:14,160
As you would expect with a lot of fancy features added to it. So

201
00:17:16,520 --> 00:17:21,760
Okay, so the next bit of kind of basic syntax in the language is our environment variables

202
00:17:21,760 --> 00:17:26,080
So these function a little differently than other sh lengths, but similarly

203
00:17:26,280 --> 00:17:32,120
So you can refer to any environment variable by prefixing a name with the dollar sign character

204
00:17:32,120 --> 00:17:36,680
So if you want to look up right if you want to look up a variable in the environment

205
00:17:36,680 --> 00:17:40,440
You can say dollar sign that variable name and then you'll get back the result

206
00:17:40,680 --> 00:17:47,560
So right so then the environment is this like special namespace that processes use to communicate with each other and

207
00:17:48,840 --> 00:17:50,840
Conch gives you access to that

208
00:17:52,760 --> 00:17:55,640
And you can set and delete environment variables

209
00:17:56,400 --> 00:17:59,800
More like you would do in Python then you would do in other

210
00:18:00,320 --> 00:18:06,480
Shell languages, right? So these are just normal variables that happen to live in a special dictionary mapping somewhere

211
00:18:07,120 --> 00:18:09,760
and so because of that you

212
00:18:10,480 --> 00:18:15,680
Would set them with an equal sign and then you would delete them with the Dell operator. So

213
00:18:16,240 --> 00:18:18,240
Shouldn't be anything

214
00:18:18,320 --> 00:18:22,240
To out of the ordinary there anyone have any questions about that

215
00:18:25,800 --> 00:18:31,000
Is there any difference between this an OS environment OS dot environment and the answer is yes

216
00:18:31,000 --> 00:18:34,160
There's a lot. We'll get to that in a section coming up

217
00:18:40,440 --> 00:18:42,840
No export is not a feature of

218
00:18:43,600 --> 00:18:46,080
Conch or so exporting

219
00:18:46,440 --> 00:18:49,760
So, okay, this is a little this is getting into the weeds a bit

220
00:18:49,760 --> 00:18:54,800
But I think export is a is a bad idea. You shouldn't need to explicitly export things, right?

221
00:18:54,800 --> 00:18:57,240
You're already doing that with the dollar sign, right?

222
00:18:57,240 --> 00:19:03,080
So shlings when when you export or when you define an exported variable actually don't put the dollar sign

223
00:19:03,080 --> 00:19:09,400
So we've collapsed those seven characters export plus space into just the dollar sign

224
00:19:10,880 --> 00:19:17,880
They're well, they're not they're they're process-wide. Yeah, they go into the environment for the process

225
00:19:22,280 --> 00:19:26,320
Oh, so dollar zero for those so the question is what about dollar zero

226
00:19:26,960 --> 00:19:31,680
Dollar zero is how you refer to arguments or you get your the command that you run

227
00:19:32,400 --> 00:19:37,760
We use dollar args for that when you're running a script. It's an environment variable

228
00:19:37,760 --> 00:19:40,520
It's in the docs, which we'll have a link for very shortly. So

229
00:19:41,560 --> 00:19:49,160
Okay, I just realized this screen. We're standing in front of it. Yeah. Yeah, okay, but we'll maybe fix that during the break

230
00:19:51,640 --> 00:19:53,640
Okay, yeah, these pretty normal

231
00:19:55,240 --> 00:20:00,840
The other thing that you can do is you can do environment very or environment look up with Python expressions

232
00:20:01,280 --> 00:20:03,160
using dollar sign curly brace

233
00:20:03,360 --> 00:20:05,160
So if you want to

234
00:20:05,160 --> 00:20:07,760
Compute an environment variable

235
00:20:08,920 --> 00:20:15,200
Arbitrarily you can you can use dollar sign curly brace. So this is a little different than how other languages do it

236
00:20:15,600 --> 00:20:21,320
But for example say you have an x variable that equals a string in your namespace or your user

237
00:20:22,360 --> 00:20:28,960
You can do dollar sign curly brace x and then that'll look up the user environment variable. So that looks up the name

238
00:20:29,960 --> 00:20:31,600
oops

239
00:20:31,600 --> 00:20:33,160
Sorry, I skipped ahead

240
00:20:33,160 --> 00:20:38,280
bit and or if you want to compute it with some other some other expression

241
00:20:38,840 --> 00:20:40,840
You can just stick that right in there

242
00:20:41,200 --> 00:20:42,640
in

243
00:20:42,640 --> 00:20:49,600
Most SH links. These are actually dollar sign and dollar sign curly brace are the same have effectively the same meaning

244
00:20:50,320 --> 00:20:55,320
But they have distinct meanings here effectively. They're they're subtle differences. I know

245
00:20:56,160 --> 00:20:58,160
But they're very different here

246
00:20:58,240 --> 00:20:59,480
Okay

247
00:20:59,480 --> 00:21:05,840
The source command so is everyone is everyone familiar with source and other languages like bash and things

248
00:21:06,560 --> 00:21:10,840
Okay, yeah, so so if you're not what source does is source takes of

249
00:21:11,480 --> 00:21:15,000
File that's written in that language. So if you're in bash

250
00:21:15,400 --> 00:21:21,800
And you sort you can source a bash file and it will run the commands as if you had typed them into that

251
00:21:22,160 --> 00:21:28,160
Session, so it's just a shortcut for executing everything in a file in in your current

252
00:21:29,080 --> 00:21:30,920
Interpreter session

253
00:21:30,920 --> 00:21:34,840
So conch the source command does roughly this does basically the same thing

254
00:21:34,960 --> 00:21:36,960
It reads in the contents of a file

255
00:21:36,960 --> 00:21:43,360
And then it executes them and it brings all the variable all the global variables and everything in the environment, etc

256
00:21:43,520 --> 00:21:45,520
Into the current execution context

257
00:21:46,760 --> 00:21:50,400
But of course this doesn't work on bash this works on conch code

258
00:21:51,560 --> 00:21:53,560
So if you have a very simple

259
00:21:54,200 --> 00:21:55,800
example file

260
00:21:55,800 --> 00:21:57,800
Yeah, sorry. This is

261
00:21:58,160 --> 00:22:00,160
Yeah, you can do that

262
00:22:01,280 --> 00:22:06,600
So here what we have is we're setting an environment but variable in this file

263
00:22:07,800 --> 00:22:10,640
We are setting a password which is a terrible thing to do

264
00:22:11,200 --> 00:22:13,640
And then we're defining a function. Oh

265
00:22:14,880 --> 00:22:18,320
You can install VAM right now if you want go for it

266
00:22:20,040 --> 00:22:22,040
See if I care go just

267
00:22:22,040 --> 00:22:27,560
Can't do that to your laptop, but it seems me. How do I do this? Oh, well, I mean we're talking about sharing passwords

268
00:22:27,560 --> 00:22:30,580
I'll just say my my root password out right now. Yeah, okay

269
00:22:33,840 --> 00:22:35,840
Yeah, so you can

270
00:22:36,880 --> 00:22:39,680
You can then use this function and it's it's good

271
00:22:39,680 --> 00:22:45,440
So basically what you do to use source is you just say source and then the file name

272
00:22:45,480 --> 00:22:48,600
So here source example dot xsh and then

273
00:22:49,240 --> 00:22:52,280
You'll see that that those variables that we had like

274
00:22:53,080 --> 00:23:00,480
Dollar sign email are available as well as the combined function has been brought into your local exit or your current

275
00:23:00,680 --> 00:23:03,240
Sessions execution context and you can you can run it

276
00:23:05,160 --> 00:23:09,720
You can also import at dot xsh files as well

277
00:23:09,800 --> 00:23:12,640
so if you want to write python modules as

278
00:23:13,520 --> 00:23:20,000
As conch files, you're totally welcome to do that and you can import them even in other normal python projects

279
00:23:20,200 --> 00:23:24,480
Not going to show that here, but if you're interested that's something you can do

280
00:23:25,040 --> 00:23:28,120
Okay, any questions on source?

281
00:23:30,080 --> 00:23:32,080
Pretty simple alright

282
00:23:33,560 --> 00:23:39,480
The thing that you can't do in a lot of other languages that you can do in conch is that we have a notion of sourcing

283
00:23:40,320 --> 00:23:44,560
Files from other shell languages that we call source foreign

284
00:23:45,400 --> 00:23:47,400
so imagine you have

285
00:23:47,560 --> 00:23:54,160
Some bash script somewhere and you want to bring that in and execute that in conch and bring all the things into your local

286
00:23:54,760 --> 00:24:01,040
Execution context you're able to do that just by saying source bash and then the bash script

287
00:24:01,200 --> 00:24:06,080
So if you've got a you know a hundred thousand lines of Z shell well one. I'm sorry and two

288
00:24:06,280 --> 00:24:12,760
You can still use that so this is a way to integrate to slowly integrate

289
00:24:13,280 --> 00:24:15,280
with other languages

290
00:24:15,360 --> 00:24:18,520
Which is pretty cool actually so

291
00:24:19,120 --> 00:24:22,840
It's pretty nice any and and by default sorry

292
00:24:23,640 --> 00:24:27,800
We have a so source foreign is a generic infrastructure for doing this

293
00:24:28,440 --> 00:24:34,800
But we have shortcuts for doing source bash source Z shell and also source command or cmd

294
00:24:34,800 --> 00:24:40,160
So if you're on Windows using the Windows batch processing language you can source that stuff too

295
00:24:41,040 --> 00:24:43,040
which is

296
00:24:43,160 --> 00:24:45,160
madness, but I

297
00:24:48,840 --> 00:24:54,600
Mean we've got a core Windows developer for the past four years who's like it works pretty well

298
00:24:54,600 --> 00:24:59,440
I mean there's I imagine there's folks here using it on Windows right so are there any Windows users in the room

299
00:25:00,320 --> 00:25:03,000
Okay, let it I mean who are on Windows right now

300
00:25:05,440 --> 00:25:07,440
I

301
00:25:08,600 --> 00:25:12,760
Think the biggest problems are usually just that our examples are very like Unixy

302
00:25:12,760 --> 00:25:17,600
And so we say like run this command and it's like what command is that that's that's often the problem

303
00:25:19,360 --> 00:25:21,000
Okay

304
00:25:21,000 --> 00:25:26,360
Well, so we found with that like if you're on a base Windows install and you just install get bash

305
00:25:26,360 --> 00:25:31,880
Then you get all the Unix commands and everything works normally and supposedly works really well on Windows subsystem for Linux

306
00:25:31,880 --> 00:25:33,880
But I have not tested that

307
00:25:34,800 --> 00:25:36,800
I

308
00:25:43,760 --> 00:25:46,240
Mean you can we would be very happy for you to do

309
00:25:46,800 --> 00:25:49,280
We may not be able to help if it goes wrong, but we'll try I

310
00:25:51,520 --> 00:25:55,400
Saw another question over here. All right. Okay, so source foreign

311
00:25:56,880 --> 00:26:00,560
Really nice capability really helpful, especially if you're just getting started

312
00:26:01,560 --> 00:26:08,840
The other thing like most like most shell languages. We've got a configuration file that lives in home.contra rc

313
00:26:09,560 --> 00:26:11,560
And this is just a particular

314
00:26:12,120 --> 00:26:18,720
Special xsh file and that's loaded before basically everything else is loaded. So this is where you can stick all of your

315
00:26:19,120 --> 00:26:20,720
Customizations

316
00:26:20,720 --> 00:26:22,720
Mostly a lot of people just stick

317
00:26:23,000 --> 00:26:25,000
environment variables in there

318
00:26:26,040 --> 00:26:28,240
If you're a condi user conda as

319
00:26:29,240 --> 00:26:33,000
Activate or whatever and it will throw some stuff in there as well

320
00:26:33,760 --> 00:26:34,960
and

321
00:26:34,960 --> 00:26:36,960
yeah, so

322
00:26:37,040 --> 00:26:41,840
But basically if you want to read about all of the customizations, they're on there in the doc

323
00:26:41,840 --> 00:26:46,720
So every every environment variable that we touch has documentation associated with it

324
00:26:46,720 --> 00:26:49,760
And there's a lot of like tweaks that you can do a few if you need to

325
00:26:50,520 --> 00:26:52,280
all right

326
00:26:52,280 --> 00:26:54,280
So here's some more exercises

327
00:26:54,480 --> 00:26:57,120
So let's go ahead and take a few minutes to do these

328
00:26:57,480 --> 00:27:02,840
So the first one is to just set a random integer to the environment variable dollar sign secret

329
00:27:03,880 --> 00:27:07,040
The next is to print the secret value

330
00:27:07,720 --> 00:27:08,960
and

331
00:27:08,960 --> 00:27:10,480
then

332
00:27:10,480 --> 00:27:12,480
The third is to put a

333
00:27:13,120 --> 00:27:17,720
Generating just some generating code for that secret value into your contrast see

334
00:27:18,360 --> 00:27:22,640
When conch starts up if a dollar sign safe variable does not exist

335
00:27:23,120 --> 00:27:26,080
So we'll give you guys a couple. We'll give you all a couple moments to

336
00:27:26,880 --> 00:27:28,880
to try this out

337
00:27:31,640 --> 00:27:36,720
And if anyone's having problems just raise your hands right now and and Gil and I will will walk around and help

338
00:27:39,320 --> 00:27:44,640
The next thing that are for problem for part two. There's actually a couple different ways to do this

339
00:27:45,360 --> 00:27:49,640
The first is that you could either echo that

340
00:27:49,640 --> 00:27:53,160
So if you're thinking more in a shell language, you could echo that

341
00:27:53,640 --> 00:27:58,200
You know my secret value is dollar sign secret as a string and that will all

342
00:27:59,040 --> 00:28:05,040
All push out normally or if you're in more of a Python mode, you can just print it like you would print anything else

343
00:28:05,440 --> 00:28:07,040
Okay

344
00:28:07,040 --> 00:28:09,040
Both of those are totally valid

345
00:28:09,560 --> 00:28:11,960
and then the last one is

346
00:28:13,240 --> 00:28:17,760
If you wanted to this is getting cut off I guess but

347
00:28:18,760 --> 00:28:22,480
This is why you have it on your own machines, too

348
00:28:24,280 --> 00:28:26,120
You can say

349
00:28:26,120 --> 00:28:33,760
In your contrast see you because it's Python you can import random because it's conch you can set the environment variable

350
00:28:34,600 --> 00:28:41,680
To whatever random value and then oh we actually didn't cover this in text in this exercise, but

351
00:28:43,720 --> 00:28:45,880
Because we've moved around some slides, but

352
00:28:46,800 --> 00:28:53,120
We'll get back to that last one soon enough. So, okay, so very briefly

353
00:28:54,640 --> 00:28:56,640
So remember how we said dollar sign?

354
00:28:57,320 --> 00:29:00,280
Curly brace is an expression

355
00:29:01,280 --> 00:29:04,080
You can you do look up by expression so

356
00:29:04,720 --> 00:29:06,040
this

357
00:29:06,040 --> 00:29:12,080
This dot dot dot in Python is the special is the syntax for the ellipsis object

358
00:29:12,880 --> 00:29:15,280
So we use that numpy uses it, too

359
00:29:16,160 --> 00:29:20,320
So we use that to be a reference to the environment itself

360
00:29:20,320 --> 00:29:25,320
So if you do dollar sign curly brace dot dot dot you get back the environment object

361
00:29:26,160 --> 00:29:31,120
Because dot dot dot is obviously not or an ellipsis is obviously not any environment variable

362
00:29:31,720 --> 00:29:33,280
And it's a big mess

363
00:29:33,280 --> 00:29:35,960
Which is why we didn't want to cover it this soon, but there it is and

364
00:29:36,680 --> 00:29:38,780
Well, we will get back to it in a bit

365
00:29:39,800 --> 00:29:41,800
Okay

366
00:29:41,800 --> 00:29:47,800
So, yeah, the goal here is like because it's just a mapping you can test if if things are in the environment

367
00:29:48,240 --> 00:29:51,000
Through through this self-lookup. Okay

368
00:29:52,480 --> 00:29:59,200
Wow a break already that can't be right. No, probably not. Okay, so we're not gonna break. Yeah, because it's too early. I

369
00:30:01,280 --> 00:30:05,720
Built up your hopes and then I'm just crushing them right now

370
00:30:06,680 --> 00:30:08,200
crushing it. Yeah

371
00:30:08,200 --> 00:30:10,760
Okay, so Gil's gonna take over for this next part

372
00:30:11,800 --> 00:30:13,800
And maybe

373
00:30:14,840 --> 00:30:17,200
I'm not gonna move this one. Yeah. Yeah, it's impossible

374
00:30:20,480 --> 00:30:22,480
Okay, so

375
00:30:22,600 --> 00:30:24,600
We've sort of looked at you can still run

376
00:30:25,800 --> 00:30:31,180
Sort of a sub process command like a regular term a regular terminal command shell command and you can also run

377
00:30:32,800 --> 00:30:36,080
Python, you know models and functions and you can sort of you know

378
00:30:36,600 --> 00:30:38,960
set them to environment variables and then use that but

379
00:30:39,520 --> 00:30:44,680
Where this really starts to come into play is when you want to be able to start mixing those two things together to sort of get

380
00:30:44,680 --> 00:30:46,680
the best of both worlds

381
00:30:48,560 --> 00:30:53,320
So the idea here is that in a lot of ways conscious makes up using sub process really really simple

382
00:30:53,600 --> 00:30:58,440
Instead of trying to remember like we do set this like sub process type thing somewhere

383
00:30:58,440 --> 00:31:03,920
And how are you gonna like parse the output and all that we just all that's being handled for you in sort of a more intuitive way

384
00:31:04,920 --> 00:31:13,520
And we have a number of operators we've added to sort of help with this interaction between sort of sub process mode and Python mode

385
00:31:14,320 --> 00:31:16,320
so the first of these is

386
00:31:16,640 --> 00:31:18,640
dollar curly brace

387
00:31:19,360 --> 00:31:23,200
Parentheses. Yes. Sorry. I do remember what keys are sort of

388
00:31:23,840 --> 00:31:31,640
And what it does actually similar to bash is it captures the output of a command, but then it returns as it returns it as a string

389
00:31:32,640 --> 00:31:35,480
And it really does return the whole string, right?

390
00:31:35,480 --> 00:31:39,480
So, you know the output of LS has a bunch of line breaks in it

391
00:31:39,480 --> 00:31:45,600
So there are a bunch of line breaks in the output what that means that if you print it you actually get what the output of that was

392
00:31:46,640 --> 00:31:48,640
similarly it is a

393
00:31:49,840 --> 00:31:51,840
It's a string right like a Python string

394
00:31:52,040 --> 00:31:56,040
so if you type you know x dot and then hit tab or something or just

395
00:31:56,840 --> 00:32:00,680
Like you have all of the Python string methods available to you

396
00:32:00,680 --> 00:32:04,640
So if you wanted to split that say on new lines, which might be a useful thing to do with LS

397
00:32:04,640 --> 00:32:09,440
Or you really like uppercase letters and you want to do that or however you want to

398
00:32:10,560 --> 00:32:14,600
Mutate and parse and change that captured output all of

399
00:32:15,160 --> 00:32:16,560
Python's built-in

400
00:32:16,560 --> 00:32:21,200
Helpers are already there for you. You don't need to sit there and like try to write these things yourself

401
00:32:26,440 --> 00:32:31,520
Okay, so the second is bang parenz

402
00:32:32,920 --> 00:32:34,120
and

403
00:32:34,120 --> 00:32:37,040
This does the same thing and then also other stuff

404
00:32:37,400 --> 00:32:42,440
So what it actually is returning if you run a command with this is a command pipeline object

405
00:32:42,440 --> 00:32:44,520
Which is a sort of a conch thing

406
00:32:45,120 --> 00:32:49,280
And it includes the output of the command as well

407
00:32:49,280 --> 00:32:54,360
But also a bunch of information about like like the PID of the process what the return code was

408
00:32:54,680 --> 00:33:02,360
What the actual argument you ran was if it was an alias, what did it expand out to what are the starting stopping time stamps of that command?

409
00:33:02,920 --> 00:33:04,920
and also

410
00:33:05,200 --> 00:33:12,240
This object itself is truthy. So if the return code is a success then you can actually say like you know if

411
00:33:12,960 --> 00:33:19,200
Bang this command, you know like print this command and if it if it's successful then that you can use that for control flow

412
00:33:19,360 --> 00:33:21,360
So there's sort of a way to easily

413
00:33:22,080 --> 00:33:24,880
Figure out like I tried to do this thing was successful. Yes, or no

414
00:33:24,880 --> 00:33:26,760
What was the output if it was successful?

415
00:33:26,760 --> 00:33:33,560
How long did it take like all of this is just available to you and sort of the the the command pipeline object that's returned I?

416
00:33:34,600 --> 00:33:36,600
Think this is what I just said. Yeah, I

417
00:33:40,080 --> 00:33:44,800
Didn't do it command, but that's okay. That's all right. Does anybody have any questions about those?

418
00:33:51,360 --> 00:33:53,360
Yes, and some although in Python. It's a

419
00:33:54,240 --> 00:33:56,400
Tilde yeah, yeah, yeah, that's right

420
00:33:56,400 --> 00:34:04,220
So in in Python if you wanted to negate something you use not or tilde or till does it the invert operator, but yeah

421
00:34:04,760 --> 00:34:06,760
Yeah

422
00:34:07,880 --> 00:34:09,880
Okay

423
00:34:11,560 --> 00:34:18,560
Okay, also so you can iterate over the output of these commands line by line in bang exclamation point. Yes

424
00:34:21,360 --> 00:34:23,360
I

425
00:34:31,640 --> 00:34:37,640
In enumerate LS and then print what does it have string?

426
00:34:42,400 --> 00:34:45,260
And then just I and look

427
00:34:51,360 --> 00:34:56,560
Probably should have stripped look, but that's that's okay. That's okay. We can do it next time. Yeah

428
00:35:01,680 --> 00:35:08,300
For example, right, so the new lines are still in that look in that object that look object that ends up there

429
00:35:08,960 --> 00:35:10,960
And this is streaming by the way

430
00:35:11,400 --> 00:35:16,600
So that if you wanted to stream through your command, right if you've got output that's larger than memory

431
00:35:16,600 --> 00:35:18,600
This is how you you'd use

432
00:35:18,840 --> 00:35:21,360
Bang parentheses for for that. So

433
00:35:22,280 --> 00:35:24,800
Also in the list of things that we may have not mentioned

434
00:35:25,200 --> 00:35:26,840
There is this

435
00:35:26,840 --> 00:35:30,680
Multi-line prompt thing that keeps happening that we've just sort of been using without mentioning

436
00:35:31,360 --> 00:35:34,920
But yeah, so it's like in the same way that I Python functions. This is a

437
00:35:35,640 --> 00:35:41,520
Full you can just keep you know as long as your you can either shift return to maintain like to force a new line

438
00:35:41,600 --> 00:35:44,100
But you as long as the command isn't complete

439
00:35:44,100 --> 00:35:49,340
It'll just keep adding a new line for you to type on two entries at the end will run the thing and then when you arrow up through

440
00:35:49,340 --> 00:35:53,260
Your history it will load up the full command like the full command block for you

441
00:35:53,260 --> 00:35:57,300
You don't need to like go and hit arrow up for each of those individual lines. You were doing right

442
00:35:57,300 --> 00:36:00,860
So I just hit arrow up there once and I returned the whole input

443
00:36:06,540 --> 00:36:11,300
So we just went over those are captured sub processes and then there are uncaptured sub processes

444
00:36:11,300 --> 00:36:18,420
so here again, we're using a dollar sign and bang but this time using square braces and

445
00:36:18,980 --> 00:36:25,380
They function the same way as the captured ones except they they don't capture and so the output of the command

446
00:36:25,860 --> 00:36:31,380
Still goes through to the screen to standard out or standard error depending, but you can still capture that

447
00:36:32,180 --> 00:36:34,180
metadata along with it

448
00:36:34,700 --> 00:36:36,700
So in the case of

449
00:36:36,900 --> 00:36:38,900
dollar sign square braces

450
00:36:39,500 --> 00:36:43,580
It always returns none actually and so this is

451
00:36:45,060 --> 00:36:46,540
More for

452
00:36:46,540 --> 00:36:49,660
Forcing sub process mode where the context may be a little ambiguous

453
00:36:49,660 --> 00:36:53,980
You want to say like don't try to interpret this as python just run this as a command instead

454
00:36:57,020 --> 00:36:59,020
The bang

455
00:36:59,860 --> 00:37:01,860
Bracket there

456
00:37:01,860 --> 00:37:07,380
So the output gets streamed to standard out still so you see it and it would run as if you just ran the command regularly

457
00:37:07,460 --> 00:37:09,460
But at the same time

458
00:37:10,460 --> 00:37:14,420
Similar to the information from the capture sub process about the you know

459
00:37:14,420 --> 00:37:20,660
Starting and stopping times the arguments that were passed in if it was successful or not all of that is returned

460
00:37:21,140 --> 00:37:23,140
As a result of that

461
00:37:23,260 --> 00:37:27,500
Operator so you can have the output still kind of like showing in front of you

462
00:37:27,500 --> 00:37:32,780
But still be operating on sort of you know, what were the conditions of that command did it execute successfully?

463
00:37:32,780 --> 00:37:34,780
Should I stop should I continue?

464
00:37:34,940 --> 00:37:42,140
Right, so you get this rich command pipeline object back out that you can manipulate and this particular bit of syntax is

465
00:37:42,220 --> 00:37:44,540
The thing that really underlies a lot of conch

466
00:37:45,580 --> 00:37:50,700
So the what's actually happening. So if you just run LS here

467
00:37:51,100 --> 00:37:58,340
What conch is doing is it's secretly adding in a bang square bracket around that LS?

468
00:37:58,500 --> 00:38:01,500
That's it

469
00:38:05,420 --> 00:38:07,820
Okay, right column type good. Oh, yeah

470
00:38:09,500 --> 00:38:15,660
So now that we there I would suggest we just take a few moments and just to play with each of these a little bit to get a

471
00:38:15,660 --> 00:38:17,100
Handle on them

472
00:38:17,100 --> 00:38:22,180
This is basically the end of like new syntax that we're gonna introduce largely wait except for one big one coming up

473
00:38:23,020 --> 00:38:28,620
But just to kind of get a sense like of how they work make sure that they match your expectations like you know

474
00:38:28,620 --> 00:38:30,820
Which what should be captured what shouldn't be captured?

475
00:38:31,060 --> 00:38:36,420
How do you interact with the attributes of these returned command pipeline objects? What is in there?

476
00:38:36,940 --> 00:38:39,260
Is there something you would like to be in there? That's not we can talk

477
00:38:39,940 --> 00:38:42,780
You can definitely work on that and just as a general

478
00:38:43,300 --> 00:38:45,540
Mnemonic for this because it's you know bunch of stuff

479
00:38:45,540 --> 00:38:48,660
I've sort of come up with like curly captures and square streams

480
00:38:48,860 --> 00:38:51,580
And it's a bit misleading because it's all sort of streaming in one sense

481
00:38:51,580 --> 00:38:56,700
But like if you want output to not show up use the curly things if you do want it to show up use the square things

482
00:38:59,180 --> 00:39:04,300
Does does anyone have any questions about this stuff, you know, we just threw a lot at you yeah back there

483
00:39:04,740 --> 00:39:06,740
The last one

484
00:39:13,540 --> 00:39:17,140
Almost so bang square bracket prints it but

485
00:39:17,700 --> 00:39:22,500
Does save it to the variable and then bang Kurt bang parentheses

486
00:39:23,260 --> 00:39:26,420
Prince it, but then doesn't save it to the variable. I

487
00:39:28,420 --> 00:39:30,420
Know yeah, so

488
00:39:31,420 --> 00:39:34,460
Basically what what's going on here is that?

489
00:39:36,660 --> 00:39:38,660
Dollar sign

490
00:39:39,300 --> 00:39:40,700
parentheses

491
00:39:40,700 --> 00:39:48,420
Returns a string right it doesn't print it, but if we wanted to stream that so we use bang. What should that return?

492
00:39:53,460 --> 00:39:58,500
Sorry, yeah, so what should that return?

493
00:40:00,420 --> 00:40:02,420
None right because

494
00:40:03,620 --> 00:40:05,620
No, it's not

495
00:40:05,860 --> 00:40:07,940
Did I do something wrong? Yeah, what did I do?

496
00:40:10,820 --> 00:40:12,820
No, not all it's not

497
00:40:14,300 --> 00:40:18,580
No, it's still maybe it's that it's like when you do a sign

498
00:40:21,940 --> 00:40:26,300
No, that's still the thing so oh no, sorry, haha I did this wrong

499
00:40:27,300 --> 00:40:29,380
Yeah

500
00:40:29,380 --> 00:40:37,140
So if you do dollar sign if you change these two square brackets because you want to stream the square brackets kind of look like pipes

501
00:40:39,180 --> 00:40:43,340
That should return none rather than a string because there's no there's nothing to return

502
00:40:44,460 --> 00:40:46,060
You're already

503
00:40:46,060 --> 00:40:52,180
This this the coat the output that's coming in has already already been consumed and printed

504
00:40:52,180 --> 00:40:55,380
And so it's been streamed and there's nothing left to return

505
00:40:55,740 --> 00:40:57,740
the

506
00:40:59,660 --> 00:41:06,820
Which is why you see like because we did this is none we actually got this we got this true printed behind us

507
00:41:07,380 --> 00:41:11,780
Even because the the command actually printed right we didn't capture it

508
00:41:12,860 --> 00:41:14,860
if you wanted to

509
00:41:15,300 --> 00:41:17,300
capture it

510
00:41:18,020 --> 00:41:20,020
Or if you wanted to do you know bang

511
00:41:20,900 --> 00:41:25,100
Parentheses the bang is what gives you the object back

512
00:41:26,020 --> 00:41:31,180
And whether it's streaming or not is determined based on whether it's square brackets or not

513
00:41:35,300 --> 00:41:40,420
Yeah, so so the way to think about this is dollar sign return strings

514
00:41:41,780 --> 00:41:43,780
and

515
00:41:43,980 --> 00:41:45,980
bang will return

516
00:41:46,020 --> 00:41:54,340
Something else and then square brackets or in parentheses will capture and square brackets will stream

517
00:41:57,860 --> 00:41:59,860
90 yeah

518
00:42:06,100 --> 00:42:11,340
There is there is functionally no difference between bang with square brackets and bang with

519
00:42:12,580 --> 00:42:14,900
And and just typing the LS command

520
00:42:15,500 --> 00:42:17,500
Except in ambiguous cases

521
00:42:17,900 --> 00:42:22,420
so in cases where you have both a Python function and a

522
00:42:23,300 --> 00:42:30,740
System command with the same name or a Python variable and a system command with the same name like say I just said

523
00:42:31,260 --> 00:42:36,820
echo equals Wow or something right if I now went to run like echo

524
00:42:39,060 --> 00:42:41,060
Hello world

525
00:42:42,060 --> 00:42:47,740
Well that'll work because the syntax is not ambiguous, but like let's say I went to write like

526
00:42:48,860 --> 00:42:50,220
echo

527
00:42:50,220 --> 00:42:51,300
like

528
00:42:51,300 --> 00:42:53,300
dash

529
00:42:54,820 --> 00:42:58,020
What's another echo minus echo for example

530
00:42:58,620 --> 00:43:00,620
Which would be torque totally?

531
00:43:00,900 --> 00:43:08,300
Normal well, okay that but we would want to print minus echo right in a normal in a normal shell

532
00:43:08,380 --> 00:43:15,780
But both of these are variables, and so if you need to you can always explicitly put it in bang square brackets

533
00:43:15,780 --> 00:43:17,780
And then it'll run

534
00:43:19,300 --> 00:43:25,480
Yeah, so there's two things going on here, so or there's one thing going on here one or two so there's

535
00:43:29,180 --> 00:43:32,940
If you're observing it there are two and then yeah, it's it's complicated

536
00:43:33,940 --> 00:43:41,140
Basically, what's happening is there's a formal conch language that always uses bang square bracket

537
00:43:41,980 --> 00:43:44,740
Okay, and then we have

538
00:43:45,580 --> 00:43:47,020
What we call?

539
00:43:47,020 --> 00:43:53,300
So there's a context free grammar that we use that always uses the square brackets

540
00:43:53,740 --> 00:43:57,380
Then we do this context aware

541
00:43:58,220 --> 00:44:05,500
Grammar munging so we know because we know what's on your what commands are available and what your

542
00:44:05,940 --> 00:44:13,060
Execution context is we can shoot we actually go back and rewrite the AST of your code

543
00:44:13,540 --> 00:44:15,540
In such a way that we think it will execute

544
00:44:16,940 --> 00:44:18,940
Before we try to execute it

545
00:44:19,500 --> 00:44:21,500
And that's what's going on

546
00:44:21,500 --> 00:44:27,220
And so if you need to you can always go to the formal grammar and you can even turn that off

547
00:44:27,900 --> 00:44:34,220
In the in the exact we're definitely not doing that in this tutorial, but you can turn that off and make sure it's always formal

548
00:44:35,100 --> 00:44:39,540
That's a terrible way to live because you always have to type this bang exclamation point

549
00:44:39,540 --> 00:44:46,060
The whole idea behind conscious to make the things as easy as possible and match what your brain thinks it should be doing

550
00:44:46,140 --> 00:44:52,860
Like your brain thinks, you know ls-l should be a command and it just because that's not a python variable

551
00:44:52,860 --> 00:44:55,420
Doesn't mean it shouldn't be a it shouldn't be something that works

552
00:44:55,420 --> 00:45:02,780
And so we have a lot of like heuristics that are relatively simple that get get you incredibly far

553
00:45:03,740 --> 00:45:10,300
And but if those heuristics fail for some reason which they are they it's very very infrequent

554
00:45:10,300 --> 00:45:12,300
You can always go back to the formal grammar

555
00:45:12,540 --> 00:45:14,540
so

556
00:45:17,020 --> 00:45:19,020
But

557
00:45:22,020 --> 00:45:25,220
Yeah, I should maybe say curves cat mnemonics are hard

558
00:45:34,260 --> 00:45:40,940
So so the curly braces are for like with the dollar curly braces for like an environment lookup or for accessing the environment

559
00:45:41,940 --> 00:45:47,020
Whereas these are more just generally capturing a command that you're running and capturing the output of it

560
00:45:49,460 --> 00:45:53,100
Right so this looks up a variable in the environment

561
00:45:55,620 --> 00:46:00,100
Yeah, rather than yeah rather than

562
00:46:01,860 --> 00:46:03,860
Running a command so yeah

563
00:46:10,940 --> 00:46:27,180
Okay, so so the question so the question is what what's going on here, so you're saying ls equals

564
00:46:31,340 --> 00:46:36,460
So if you say ls equals one here, okay, and then you say ls

565
00:46:37,700 --> 00:46:39,700
Mot you then you were saying ls

566
00:46:41,380 --> 00:46:43,380
Uh-huh

567
00:46:43,740 --> 00:46:50,260
Right, so why does this happen well this happens because l is not a variable in your python context

568
00:46:51,180 --> 00:46:55,100
If you just do ls, and then we dot it right this is a

569
00:46:55,940 --> 00:46:59,020
LS itself is just the integer one

570
00:47:00,100 --> 00:47:06,820
Right the the the the bang square brackets are capturing the whole thing

571
00:47:07,460 --> 00:47:19,500
So yeah, so if I set l equal to one and I do ls minus l you'll get zero because they're both variables

572
00:47:22,060 --> 00:47:27,220
Python always wins right so the Python invite the Python context always wins

573
00:47:28,940 --> 00:47:32,660
Yeah, your system is whatever

574
00:47:33,060 --> 00:47:35,060
Okay

575
00:47:38,540 --> 00:47:43,940
Having thoroughly confused everyone I think now we can just take a few minutes for people just to play around with these a

576
00:47:43,940 --> 00:47:49,780
Little more get a sense of what's capturing and what's not what comes back from these commands of what's returned and what's printed

577
00:47:50,500 --> 00:47:52,300
Just to build up a little familiarity with it

578
00:47:52,300 --> 00:47:57,220
And then we'll continue on and feel free to raise hands and we can either circulate and just answer from the podium

579
00:47:58,220 --> 00:48:04,180
And we could fix this curly captures thing from yeah mnemonics

580
00:48:04,860 --> 00:48:08,520
Is anyone having issues with their system still or installing or anything?

581
00:48:09,980 --> 00:48:11,980
Yeah, or do you want me to come over?

582
00:48:13,900 --> 00:48:20,860
Just really quickly we had a question about for people who have used vi mode in terminals or in shelves before and want to do that

583
00:48:20,860 --> 00:48:24,480
You can do that. You just need to set vi mode equals true

584
00:48:27,220 --> 00:48:33,360
Yeah, and then you can bounce around your current line using you know zero g whatever

585
00:48:35,400 --> 00:48:37,400
Yep, and then we'll just load it by default

586
00:48:37,820 --> 00:48:39,820
Yeah

587
00:48:40,260 --> 00:48:48,700
All right, so I think gil you want to take it away. I will take it away. Are there any lingering questions from our our personal explorations?

588
00:48:51,340 --> 00:48:55,460
Great you can also ask us later. That's fine. Yeah, that's totally yeah

589
00:48:55,700 --> 00:49:02,020
So the I think this is really the last bit of new syntax we're going to introduce but I could be wrong

590
00:49:02,020 --> 00:49:04,340
I'm wrong, but for a while it'll be fine

591
00:49:05,220 --> 00:49:07,580
So this is the the Python mode operator

592
00:49:08,660 --> 00:49:11,820
So we've been talking for the last bit about how you

593
00:49:13,780 --> 00:49:15,580
Kind of capture

594
00:49:15,580 --> 00:49:20,100
Subprocess output and then you know turned into you like a Python string of this command pipeline object

595
00:49:20,100 --> 00:49:24,020
And then how you can play around with it and inspect it and do things with it

596
00:49:24,020 --> 00:49:26,020
but

597
00:49:28,340 --> 00:49:29,580
The

598
00:49:29,580 --> 00:49:37,580
The at-paran operator lets you go the other way it lets you insert things from your Python sort of scope or environment into a

599
00:49:38,260 --> 00:49:40,260
sub-process command

600
00:49:40,460 --> 00:49:42,700
So what we mean is generally

601
00:49:43,540 --> 00:49:46,540
Conscious like parsing is pretty clever at this stuff

602
00:49:46,540 --> 00:49:49,100
So if you give it for instance this command like for

603
00:49:49,700 --> 00:49:56,860
Something in range to and then just run echo high underneath that it will do the right thing right you can put your

604
00:49:57,420 --> 00:49:59,620
Like echo or LS or whatever

605
00:50:00,100 --> 00:50:05,180
Subprocess command you want in the body of a for loop and it will just execute as many times you tell it to do and you don't need

606
00:50:05,180 --> 00:50:07,180
To do anything special that actually just works

607
00:50:07,780 --> 00:50:09,380
right

608
00:50:09,380 --> 00:50:11,380
What does not just work is?

609
00:50:12,220 --> 00:50:14,220
If you do this

610
00:50:15,060 --> 00:50:20,300
So you want to instead you know iterate over the value in the for loop and have it be printed

611
00:50:24,140 --> 00:50:28,180
You just get I twice right so because it runs that command twice

612
00:50:29,460 --> 00:50:33,740
And so what the at parentheses operator does it lets you

613
00:50:34,660 --> 00:50:38,420
Capture that Python variable and insert it into that command

614
00:50:39,420 --> 00:50:46,540
So what it does it what's actually doing is it's it's evaluating an arbitrary Python expression and then returning that value as a string

615
00:50:46,540 --> 00:50:50,460
And that can be fed into the sub-process command in this case echo

616
00:50:54,780 --> 00:51:02,300
And if the output is not a string in case of like lists or sets it just gets joined and returned as a string

617
00:51:05,220 --> 00:51:08,180
So that's what that well, so it's a little different than that actually

618
00:51:08,860 --> 00:51:11,540
Sorry to want want want

619
00:51:12,500 --> 00:51:13,860
each

620
00:51:13,860 --> 00:51:18,580
Element of the string is actually getting passed in as its own argument to the command

621
00:51:19,860 --> 00:51:23,100
So each of these are their own command arguments

622
00:51:24,820 --> 00:51:28,300
So and it's just that echo happens to join them together

623
00:51:29,620 --> 00:51:31,620
So

624
00:51:33,380 --> 00:51:37,300
Yeah, thanks for closing the door we're gonna close not a good idea

625
00:51:39,300 --> 00:51:41,300
I

626
00:51:44,340 --> 00:51:48,380
Any questions about this syntax or what it's doing

627
00:51:49,980 --> 00:51:51,980
Yeah

628
00:51:55,100 --> 00:52:00,820
Yeah, so like if we did LS LS would try to search for all of these

629
00:52:01,500 --> 00:52:08,140
Files individually. Yeah, it's running it for for each. Yeah, cuz LS takes a

630
00:52:08,460 --> 00:52:10,460
big argument list like that

631
00:52:14,260 --> 00:52:17,100
If it's iterable and not a string

632
00:52:18,660 --> 00:52:21,060
Right, yeah the normal way

633
00:52:28,740 --> 00:52:30,740
Yes

634
00:52:31,260 --> 00:52:33,260
Right

635
00:52:37,420 --> 00:52:40,100
That's what LS does yeah, yeah

636
00:52:40,100 --> 00:52:47,820
It's just passing each Python thing in as its own each element of the putt list is its own argument or tuple or whatever

637
00:52:51,900 --> 00:52:59,260
Yes, exactly, it's a it's essentially echo zero one two or echo, you know or LS zero one two

638
00:53:01,540 --> 00:53:03,540
Yeah

639
00:53:05,220 --> 00:53:13,140
Okay, yeah, so if the result of the operator two is in the first position it gets treated as an alias

640
00:53:13,660 --> 00:53:15,980
So you can actually have this execute commands

641
00:53:22,780 --> 00:53:28,620
Probably like not something don't do this mine. I guess it's a really bad pattern, but it does that

642
00:53:29,620 --> 00:53:35,500
Right, but this is the this is different because if you I've got a my

643
00:53:36,260 --> 00:53:39,020
My trace back printing on but you can see

644
00:53:40,660 --> 00:53:43,580
If you try to just print this

645
00:53:44,260 --> 00:53:50,580
Or if you try to run it without splitting that is treated as the command the name of the command spaces included

646
00:53:50,580 --> 00:53:52,740
And so then it can't find the command cuz hello

647
00:53:53,780 --> 00:53:56,780
Commit hello there echo. Hello. There is not a valid command

648
00:53:59,340 --> 00:54:01,340
Okay

649
00:54:04,180 --> 00:54:06,180
Okay

650
00:54:06,900 --> 00:54:11,900
Your promise for more syntax is already broken. You should just stop. I'm gonna stop saying it now

651
00:54:14,940 --> 00:54:17,300
So with apologies

652
00:54:20,700 --> 00:54:23,780
So you can wrap a regular expression in back ticks

653
00:54:24,540 --> 00:54:32,100
And what it will do is return a list of every file or you know thing in that in a directory that matches that regular expression as a list

654
00:54:36,380 --> 00:54:38,840
And it's a Python list which means you can

655
00:54:40,260 --> 00:54:43,940
iterate over it you can you know like stick it in

656
00:54:44,900 --> 00:54:48,100
List comprehension and you know like mutate all the names

657
00:54:49,340 --> 00:54:52,660
And you can actually do even more stuff with these things as you kind of go along

658
00:54:54,780 --> 00:54:56,780
If you're about yes

659
00:55:01,660 --> 00:55:05,060
It's the Python rejects. Yeah, yeah, it's just the re module

660
00:55:05,620 --> 00:55:09,500
Yeah, just a handy way to get into re.compile

661
00:55:11,380 --> 00:55:13,380
Yeah

662
00:55:15,780 --> 00:55:17,780
No, no, these are not globs

663
00:55:18,500 --> 00:55:21,340
Dot dot star is a rejects a

664
00:55:22,180 --> 00:55:24,180
Glob would just be star

665
00:55:27,860 --> 00:55:32,220
Yeah, anything and so we could maybe a better example would be what's a

666
00:55:42,300 --> 00:55:49,180
Okay, so we've got some pings in here right so like what if we wanted to if we wanted to like grab I

667
00:55:50,020 --> 00:55:52,420
Guess we don't have a lot with anything

668
00:55:53,500 --> 00:56:00,180
With I want I want png's that have the letter zero letter o and them. Yeah, so like that's right. Yeah, so do

669
00:56:01,180 --> 00:56:03,180
dot star oh

670
00:56:04,500 --> 00:56:10,940
Dot star dot slash dot png

671
00:56:11,420 --> 00:56:22,620
But also regular expressions are hard so if you if you wanted to use globs, let's just say somebody had mentioned that

672
00:56:24,140 --> 00:56:27,220
Then you can prefix the back ticks the G

673
00:56:28,220 --> 00:56:34,500
And then it is glob matching so you don't need to do the dot thing that's just you know like star dot md star dot png

674
00:56:34,500 --> 00:56:39,340
Star whatever and as an extra special bonus in Python, I think three six and above

675
00:56:39,780 --> 00:56:42,620
this supports recursive globing the way that

676
00:56:43,940 --> 00:56:49,580
Then the glob lever it does so if you do like a star star slash star dot md

677
00:56:49,620 --> 00:56:56,740
That will recursively glob through the entire directory structure from where you are and find every single markdown file in that whole chunk

678
00:56:56,780 --> 00:56:59,700
This can take a long time like beat like use this

679
00:56:59,700 --> 00:57:03,240
You know like if you don't find it your route and it takes forever like same thing

680
00:57:03,840 --> 00:57:09,400
But it's really really handy for finding all the sort of files or patterns matching something in a in a large area

681
00:57:11,920 --> 00:57:13,920
Any questions on

682
00:57:25,000 --> 00:57:29,360
Yeah, so um we can't we can't oh so the question is like

683
00:57:29,360 --> 00:57:35,760
What are the use cases that led us to create all these things and just as a as a as a general like contra creation story?

684
00:57:37,000 --> 00:57:40,640
Almost everything in here is something we were like, you know what we really need to do thing

685
00:57:40,640 --> 00:57:48,320
We need to do today is this thing and then we did that so they they were all created from actual and us and other

686
00:57:48,440 --> 00:57:51,680
Contributors people who are like I really need this to do thing X

687
00:57:52,680 --> 00:57:58,680
And then what we discovered along the ways that a lot of it tied in together really well without it without us having to do anything extra

688
00:57:59,360 --> 00:58:03,640
We'll come up on some of that stuff around the way some of the string matching and string literals work

689
00:58:04,120 --> 00:58:10,440
So like one thing I just showed for the globs in particular right like being able to loop through a globb list is

690
00:58:10,920 --> 00:58:14,880
With this syntax is a lot nicer. Yeah, right. Yeah

691
00:58:16,000 --> 00:58:18,000
Yeah

692
00:58:18,200 --> 00:58:20,200
Between

693
00:58:26,880 --> 00:58:34,720
So yeah, so the the question is about trading off between Python module CLI and writing something in conch for me

694
00:58:34,760 --> 00:58:41,680
It's a really about how much your hammering sub process. So if you're interacting with sub process a lot

695
00:58:42,720 --> 00:58:46,880
Like do not write it in a Python CLA right write it in conch

696
00:58:47,120 --> 00:58:50,880
If you want some of these extra fancy features

697
00:58:51,640 --> 00:58:53,640
Like you really just want to be able to glob

698
00:58:54,000 --> 00:59:00,320
Tick things like very quickly or you want to like search through whatever then like do you know do it in conch as well?

699
00:59:00,320 --> 00:59:02,320
That that's my kind of

700
00:59:02,360 --> 00:59:06,320
We'll see some other syntax later where there's conch specific things

701
00:59:06,480 --> 00:59:10,000
But at this point it's kind of like if you're doing a ton of like

702
00:59:10,760 --> 00:59:12,320
basically scripting

703
00:59:12,320 --> 00:59:13,600
You know

704
00:59:13,600 --> 00:59:18,480
Like then you should be using conch because it's actually meant as a scripting language unlike Python

705
00:59:22,240 --> 00:59:25,160
Oh, yeah, yeah, yeah, well we can talk about those afterwards

706
00:59:25,520 --> 00:59:30,080
Yeah, yeah, for sure first for people who work at a certain institution. They can also use all my internal ones just saying

707
00:59:30,840 --> 00:59:33,560
Sorry, everyone else. I'll show you other things, but um, yeah

708
00:59:35,080 --> 00:59:37,080
Tom I think you're next

709
00:59:38,080 --> 00:59:40,080
Some

710
00:59:40,440 --> 00:59:46,000
Yes, yep, so the question is can you import conch code and use some of this stuff in Python?

711
00:59:57,240 --> 00:59:59,240
So we don't have an

712
00:59:59,800 --> 01:00:05,880
Yes, if we haven't we have we don't have that particular use case lined out so much but

713
01:00:07,080 --> 01:00:11,000
I would say there are two things there. So one we have a

714
01:00:12,000 --> 01:00:14,600
Quote-unquote standard library where we have sort of

715
01:00:15,000 --> 01:00:20,200
Extensions and updates to standard library things to make it easier so you can do like import conch.lib.os

716
01:00:21,320 --> 01:00:25,680
And you get some like like you get a remove tree that actually works on all platforms and

717
01:00:26,200 --> 01:00:33,000
You get like if you do like some process you get a version of run that uses our thing and returns the command pipeline object

718
01:00:34,000 --> 01:00:37,200
And you can also just get an executor back

719
01:00:37,200 --> 01:00:42,760
And then you can like like you would run conch code and you're like you would run Python code through a normal like

720
01:00:43,080 --> 01:00:47,200
Exact thing and you can do that that might not be what you want exactly

721
01:00:48,320 --> 01:00:52,040
But I like the way your brain is thinking so maybe we should talk more about that

722
01:00:52,720 --> 01:00:54,720
afterwards, yeah, so

723
01:00:54,720 --> 01:00:56,880
And there was another question back there. I think yeah

724
01:01:03,000 --> 01:01:14,000
Yeah, in regex if right, so it's just a normal

725
01:01:15,400 --> 01:01:17,360
You just have to do

726
01:01:17,360 --> 01:01:21,200
Right, like say let me just go back to my home directory. So the question is about

727
01:01:21,960 --> 01:01:29,760
How do you get your dot files with a regex? Well, you just use backslash dot, which is the regex

728
01:01:30,760 --> 01:01:38,800
The regex escape character for the dot character. So the oops, let me go back up and show you

729
01:01:39,320 --> 01:01:41,320
Apparently I've got a lot of configuration

730
01:01:44,560 --> 01:01:46,560
So you would do

731
01:01:47,600 --> 01:01:49,600
Don't tell anyone

732
01:01:51,320 --> 01:01:53,320
Yeah, I'm secretly a bash user

733
01:01:55,040 --> 01:01:59,160
The so you do backslash dot and then dot star

734
01:02:00,760 --> 01:02:05,360
To match anything right so the the backslash dot is a literal period

735
01:02:13,400 --> 01:02:19,040
So I would argue that it's more sane than a lot so the question is about history

736
01:02:19,040 --> 01:02:25,600
How does conch deal with multi-terminal history so conch sort of cribs from the Jupiter playbook a bit so

737
01:02:26,160 --> 01:02:32,880
By default all of your history is stored per session in a JSON file in

738
01:02:33,320 --> 01:02:35,320
the standard like

739
01:02:35,720 --> 01:02:42,320
Configuration location so you can go back and get each sessions history and then the terminal application itself

740
01:02:42,400 --> 01:02:48,360
Will present that to you in whatever nice way it needs to you can also switch to a sequel light history back end

741
01:02:48,360 --> 01:02:50,360
if you want to store a sequel light

742
01:02:50,360 --> 01:02:52,120
there is

743
01:02:52,160 --> 01:03:00,240
Tons of there's basically as much metadata as you want in the in the history and that's very configurable through environment variables

744
01:03:00,800 --> 01:03:02,640
Not going to go through that right now

745
01:03:02,640 --> 01:03:08,000
But I was like that was the thing that that sold me unconsciously was like I was trying to figure out how I'd compile the certain version of

746
01:03:08,000 --> 01:03:10,200
Petsy and I couldn't remember which environment variables

747
01:03:10,200 --> 01:03:14,180
I had set when I ran the thing and like you can't figure it out you look at your back history like well

748
01:03:14,180 --> 01:03:18,760
It was one of these seven because it and then you know you do this in contra like oh it was this term

749
01:03:18,760 --> 01:03:22,680
It was this session when I ran this thing in the tests past those are all the environment variables

750
01:03:22,680 --> 01:03:24,680
I need because they're just in one self-contained file

751
01:03:27,360 --> 01:03:29,360
Did you have a question over here?

752
01:03:33,000 --> 01:03:38,840
Yes, if you run source bash you'll get the aliases from that with one caveat

753
01:03:38,840 --> 01:03:40,440
You might have actually seen this pop up on the screen

754
01:03:40,440 --> 01:03:44,680
Which is that if there are there are collisions in certain aliases and also there are things the z-shell

755
01:03:44,680 --> 01:03:48,880
Especially does is they have like their own built-ins and if the alias refers to those built-ins

756
01:03:48,880 --> 01:03:53,240
We don't pull them in because it'll just break when you try to run it because it's gonna look for a command that doesn't exist

757
01:03:57,040 --> 01:04:00,440
There's I think there's some experimental some yeah, some people have done that

758
01:04:00,880 --> 01:04:06,880
But yeah, I don't use it. So but yeah, there are people who do that. We're happy to help try to figure that out though

759
01:04:07,680 --> 01:04:09,680
Well, I am anyway

760
01:04:10,040 --> 01:04:12,040
Okay, move on but

761
01:04:13,000 --> 01:04:14,400
So

762
01:04:14,400 --> 01:04:17,600
Next up this is not new syntax for contrary way, but it's Python. So

763
01:04:18,200 --> 01:04:20,200
Formatted string literals are great

764
01:04:20,320 --> 01:04:26,000
And they're part of Python, which means if you are running punch on Python three six or higher, which you should be

765
01:04:26,920 --> 01:04:28,920
Then they just work

766
01:04:29,440 --> 01:04:31,480
And they're really fantastic if you haven't played with these

767
01:04:31,480 --> 01:04:36,400
I think they're like they're my favorites like simple thing that should have always been there. I think I really enjoy them

768
01:04:37,520 --> 01:04:39,520
And yeah, the way they work if you have a

769
01:04:40,400 --> 01:04:46,320
Variable defined then instead of doing a dot format or doing like the you know parentheses, you know argument

770
01:04:46,320 --> 01:04:49,400
You can just have a string pre-pended with an F

771
01:04:49,440 --> 01:04:55,760
You wrap curly braces around the variable and it just gets evaluated at you know at that time and then prints the results

772
01:04:55,760 --> 01:04:57,760
So it's very handy

773
01:04:58,520 --> 01:05:00,520
There

774
01:05:00,680 --> 01:05:04,040
We also have a thing that is not in play on which is called a path string literal

775
01:05:04,800 --> 01:05:06,800
and this

776
01:05:06,960 --> 01:05:14,000
If you prepend a string with a P and then you have a quote what it returns is a path lib path object of

777
01:05:14,240 --> 01:05:21,000
The string that's there. So for instance, if you were I went the wrong way if you do like path equals

778
01:05:23,360 --> 01:05:25,360
Thing

779
01:05:27,840 --> 01:05:31,600
You got a you know on on Linux you got a posix path on Windows you got something else

780
01:05:31,600 --> 01:05:33,680
But it's just using path live under the hood so it'll work

781
01:05:34,480 --> 01:05:38,640
If you save that to a thing you can also then use tab completion on this object

782
01:05:39,280 --> 01:05:41,200
Like check does that folder exist or not?

783
01:05:41,200 --> 01:05:45,440
You could then create that folder or I mean path. This is just using path. The path is great

784
01:05:45,440 --> 01:05:48,400
But we have this sort of shortcut syntax to get into it

785
01:05:53,040 --> 01:05:56,800
Oh, and I'll get there just a little great thing about path lib is that you can do

786
01:05:57,560 --> 01:06:02,360
path joining using the they out overloaded the division operator for this so you just do like

787
01:06:03,080 --> 01:06:08,520
Path of object divided by thing and it does the join correctly depending on the underlying operating system

788
01:06:08,520 --> 01:06:13,240
So it takes like all of that deep pain out of like trying to get stuff to work on windows and Linux at the same time

789
01:06:15,960 --> 01:06:17,400
Yeah

790
01:06:17,400 --> 01:06:24,280
So there are f strings from python we've added p strings the the natural question is what what does a pf string look like?

791
01:06:26,440 --> 01:06:31,720
And it looks like awesome is what it looks like so you can define variables

792
01:06:33,000 --> 01:06:34,120
um

793
01:06:34,120 --> 01:06:35,720
and then

794
01:06:35,720 --> 01:06:37,160
you can

795
01:06:37,160 --> 01:06:38,840
Say pf

796
01:06:38,840 --> 01:06:43,240
And then a string and then you can treat it like an f string in the sense that you can put curly braces

797
01:06:43,240 --> 01:06:45,880
And it will fill in the value of those variables in the string

798
01:06:46,200 --> 01:06:53,160
But it's also saying this should be a path lib path so it returns you a path lib path of the result of the f string

799
01:06:56,120 --> 01:06:59,720
If you have ever done a lot of painful dev ops this just might seem appealing in some way

800
01:07:00,280 --> 01:07:01,160
um

801
01:07:01,160 --> 01:07:05,960
And the other really handy thing here is uh that the environment variables

802
01:07:06,360 --> 01:07:08,360
They are also python objects

803
01:07:08,680 --> 01:07:12,760
So you can evaluate those in f strings, which means you can evaluate those in pf strings

804
01:07:12,760 --> 01:07:18,680
Which means you can start chaining together environment variables and other values and other things to sort of construct

805
01:07:19,320 --> 01:07:21,720
Paths and folders and file locations

806
01:07:22,280 --> 01:07:27,880
Programmatically and then once you have the path lib thing you can start saying does this exist great if not touch it like now add

807
01:07:27,880 --> 01:07:31,240
It over here and now move it over here. No do this thing and all of these things will be

808
01:07:33,080 --> 01:07:36,440
Cross-platform because uh, it's just using path lib under the hood

809
01:07:36,520 --> 01:07:40,520
So it doesn't you know, you don't have to worry about which slash you're using or what's being escaped appropriately

810
01:07:43,880 --> 01:07:47,160
Yeah, hopefully um any questions on this stuff

811
01:07:49,640 --> 01:07:51,640
Not too bad, okay

812
01:07:51,640 --> 01:07:53,000
okay

813
01:07:53,000 --> 01:07:59,640
So, uh, we have a couple of exercises here the first one is to look up the absolute file path of every markdown file and the tutorial repo

814
01:08:00,040 --> 01:08:03,320
Just you know, you can use whatever you want. You can use bash if you want to too. That's fine. Um

815
01:08:05,000 --> 01:08:07,400
But pf strings and glob ticks are probably your friends here

816
01:08:08,600 --> 01:08:11,000
um, and then um

817
01:08:11,400 --> 01:08:16,120
A phone here is uh to load up a dictionary of every conda package you have installed in your current environment

818
01:08:16,600 --> 01:08:19,000
If you're not using conda you can just skip this one. That's okay

819
01:08:19,160 --> 01:08:25,720
If you have a questions, of course, just ask us and we'll come around

820
01:08:30,920 --> 01:08:33,240
Yeah, so load it up as a python dictionary

821
01:08:40,200 --> 01:08:41,400
Well

822
01:08:41,400 --> 01:08:46,840
The hint is important. Yeah, I run that conda list json command and then I would go from there. Yeah

823
01:08:49,400 --> 01:08:51,400
All right

824
01:08:52,280 --> 01:08:57,640
Okay, well then I think we'll go on to the next section, which is the environment

825
01:08:59,880 --> 01:09:03,640
Um, so we um, we touched on this earlier just for a moment

826
01:09:03,640 --> 01:09:06,440
But this will be a little more of what's going on and what you can do with it

827
01:09:07,000 --> 01:09:10,200
um, so the uh environment actually lives in

828
01:09:10,920 --> 01:09:15,480
Dunder conch dot env that's the everything in in conch is living in this dunder conch thing

829
01:09:15,480 --> 01:09:20,440
Like that's where all of the the various bits and pieces are if you want to explore and play around. It's all in there. Um,

830
01:09:21,160 --> 01:09:23,000
but uh

831
01:09:23,000 --> 01:09:24,120
The um

832
01:09:24,120 --> 01:09:28,520
The dollar curly brace ellipsis is the is a shortcut to that that object

833
01:09:28,520 --> 01:09:31,400
So you don't have to always just type dunder conch dot em to get there

834
01:09:32,360 --> 01:09:33,240
um

835
01:09:33,240 --> 01:09:39,560
As we mentioned earlier just ready you can check for membership in the environment just using, you know string in

836
01:09:40,360 --> 01:09:42,360
environment

837
01:09:43,160 --> 01:09:50,360
And you can also ask for help for environment variables. So there are a lot of environment a lot of different modes and

838
01:09:51,640 --> 01:09:54,120
Kind of extras are enabled via environment variable

839
01:09:54,920 --> 01:09:59,240
So if you know the name of the environment variable you see it they all have default values

840
01:09:59,240 --> 01:10:03,000
So if you see something that is in your environment, you're like, what is auto cd and why is it false?

841
01:10:03,480 --> 01:10:06,040
You can ask for help and it will tell you

842
01:10:06,760 --> 01:10:09,800
That if you turn it on then you can just type the name of directory and if it exists

843
01:10:09,880 --> 01:10:12,040
It'll just cd into it without you having to type cd

844
01:10:13,240 --> 01:10:14,440
Um

845
01:10:14,440 --> 01:10:15,960
Huh

846
01:10:15,960 --> 01:10:18,280
Yeah, the help is a method. Yeah, help is method

847
01:10:22,040 --> 01:10:26,760
Yeah, and also they the docs will tell you if something's configured a month. There are a few environment variables that you are not allowed to configure

848
01:10:28,600 --> 01:10:30,360
So we don't let you

849
01:10:30,360 --> 01:10:32,360
um, so

850
01:10:32,680 --> 01:10:35,960
Also something that's very different from uh bashland here

851
01:10:37,800 --> 01:10:39,800
Is that um

852
01:10:40,120 --> 01:10:45,080
Contra environment variables are python objects. Um, and that also means that they're typed

853
01:10:46,440 --> 01:10:49,080
You can begin of arguments about typing in python, but not now, please

854
01:10:50,040 --> 01:10:56,200
But they do all have types and um, sometimes those types are actually imposed based on a variable name

855
01:10:56,920 --> 01:10:59,960
Particularly and the important ones or anything that ends with path

856
01:11:00,840 --> 01:11:04,840
Is going to automatically be converted into what's called an end path

857
01:11:05,800 --> 01:11:09,560
And if you've ever had the scenario, let's just we can we can do a show of hands or not

858
01:11:09,560 --> 01:11:12,120
But where you've like sourced your bash rc twice

859
01:11:12,600 --> 01:11:16,680
And now your path is your entire path and then your entire path and then something else again

860
01:11:17,640 --> 01:11:20,120
Wow, we've got four. Wow. Wow. That's just not even the

861
01:11:20,680 --> 01:11:22,520
That was that that was a raised hand. Yeah, so we've we've all

862
01:11:22,760 --> 01:11:26,040
Many of us have been have been in this pain place before that's terrible

863
01:11:27,080 --> 01:11:33,400
So in conch that is not this is not a colon delimited string and which comes back to how do you split a non white space delimited string?

864
01:11:33,800 --> 01:11:36,360
Anyway, um, you don't because that's terrible

865
01:11:37,000 --> 01:11:39,000
But so path is an end path

866
01:11:39,080 --> 01:11:42,680
Which just means that it's a it's a list of the items on your path

867
01:11:42,760 --> 01:11:49,800
But this acts like a list which means you can do things like pop individual elements at arbitrary positions out of the path

868
01:11:50,200 --> 01:11:54,040
Or you can insert directories into arbitrary positions in the path

869
01:11:55,720 --> 01:11:57,720
Which is great

870
01:11:59,000 --> 01:12:01,000
Really really great

871
01:12:01,560 --> 01:12:03,560
Yeah

872
01:12:09,080 --> 01:12:12,440
No, it's just so just in this if you're if you're mutating your path in your session here

873
01:12:12,840 --> 01:12:15,160
It it will last for that session until you exit out

874
01:12:15,240 --> 01:12:19,560
It won't like also it will not like translate like a separate terminal into you have open

875
01:12:19,800 --> 01:12:23,640
Those are going to be totally separate if you want the question is if you start conch

876
01:12:24,120 --> 01:12:27,400
When you play the path and then exit it you're backing the root bash show

877
01:12:28,360 --> 01:12:35,160
Yes, yeah, yeah, but if you so if you wanted to do path manipulation for all of conch you would put that in your conch RC

878
01:12:38,360 --> 01:12:41,400
No, because why are you launching conch from bash just that is your

879
01:12:42,760 --> 01:12:45,240
I mean that that's the real answer, but the

880
01:12:46,200 --> 01:12:48,200
the reason you can't do that is

881
01:12:48,520 --> 01:12:53,640
Uh, it has to do with how processes communicate. And so if you want to push

882
01:12:54,440 --> 01:12:57,000
Environment variables into a parent process

883
01:12:57,640 --> 01:12:59,640
The parent process has to source

884
01:13:00,440 --> 01:13:02,440
Something coming from the child

885
01:13:03,160 --> 01:13:05,560
And so you have to be able to source

886
01:13:06,120 --> 01:13:11,400
Like you would have to get conch to dump out the environment in a way that like bash or something could source

887
01:13:23,640 --> 01:13:25,640
Again

888
01:13:31,000 --> 01:13:33,480
So so we do that. Yeah, yeah, so you okay, so

889
01:13:34,280 --> 01:13:37,720
Maybe there's a solution for you. It'll be ugly, but it'll work. Maybe you find out

890
01:13:38,760 --> 01:13:41,560
Yeah, yeah all this all sub processes get this path

891
01:13:44,120 --> 01:13:48,040
Well, sorry the question is is how are you the question is how are you supposed to start conch?

892
01:13:48,360 --> 01:13:51,400
So there's there's basically two ways to do it maybe three

893
01:13:51,400 --> 01:13:54,280
I'm going to say two one is you open a terminal

894
01:13:54,520 --> 01:13:57,960
It's running some like 1970s piece of software doesn't work really well

895
01:13:58,200 --> 01:14:00,520
And then you type conch and then you're in something better and newer

896
01:14:01,240 --> 01:14:05,240
The other thing is depending on your on your operating system of choice

897
01:14:05,400 --> 01:14:08,040
You can just have it start as your default shell on linux

898
01:14:08,040 --> 01:14:12,440
This means adding it to etsy shells and then setting it on if using i-term

899
01:14:12,440 --> 01:14:15,160
You can actually just have a profile that launch that you can say like

900
01:14:15,160 --> 01:14:18,280
I want you to launch this executable when I open a terminal or this profile

901
01:14:18,360 --> 01:14:24,040
Yeah, basically any terminal emulator in the unix land will let you set the the launch program

902
01:14:24,040 --> 01:14:26,040
So you just set that to conch

903
01:14:26,040 --> 01:14:31,960
Or you change your etsy shadow or you change your etsy shadow if you want it to be a true login shell, which conch can be

904
01:14:37,080 --> 01:14:40,760
So yeah, it's in conch back there's docs there also there are docs on that on the website

905
01:14:40,760 --> 01:14:44,840
So if you really there's platform specific doc, so if you want to go look up that you can see that

906
01:14:44,920 --> 01:14:46,920
It's right in the at the very top

907
01:14:48,680 --> 01:14:53,000
So the paths are n paths are back environment stuff other variables are booleans other ints

908
01:14:53,960 --> 01:14:59,560
Whatever they are like when you grab that environment variable in conch it will be its true type, you know, it'll tell you that

909
01:15:00,600 --> 01:15:04,600
That said if you need to like some some subprosk man's require

910
01:15:05,000 --> 01:15:08,600
You know these things to be fed to them as strings and so conch does that for you

911
01:15:09,240 --> 01:15:13,480
And by de typing it and you can also explicitly request these de typed things

912
01:15:14,520 --> 01:15:17,560
So you're asking like how do you manipulate your path and then do it you could

913
01:15:18,360 --> 01:15:19,560
I mean

914
01:15:19,560 --> 01:15:21,400
Like de type it

915
01:15:21,400 --> 01:15:24,360
overwrite your bash rc exit out and then source again

916
01:15:25,400 --> 01:15:26,920
that would be

917
01:15:26,920 --> 01:15:32,600
Moderately terrible, but it would work as long as it was an absolute path and you weren't like recursively sourcing it would probably work. Yeah

918
01:15:37,320 --> 01:15:39,320
Yeah, you can also do de type get back

919
01:15:40,600 --> 01:15:43,480
Yeah, and so that will depending on what it should look like

920
01:15:44,200 --> 01:15:48,200
In the base environment will do you know give back zeros or ones not trues and

921
01:15:50,760 --> 01:15:53,560
Paths get get turned into colon delimited strings

922
01:15:56,200 --> 01:15:58,200
Yeah

923
01:15:59,560 --> 01:16:04,360
There's a couple of other handy methods on the environment itself

924
01:16:05,320 --> 01:16:07,640
In particular one that's very handy is swap

925
01:16:08,600 --> 01:16:10,680
And so what swap does is what swap does with

926
01:16:11,480 --> 01:16:17,800
In general actually, but so you can swap in a new value

927
01:16:18,200 --> 01:16:21,160
It basically overwrite something and it's a context manager

928
01:16:21,400 --> 01:16:24,600
So only for that block of the context manager

929
01:16:24,680 --> 01:16:30,600
You can mutate certain elements of your environment and then they will get undone as soon as you are out of the context manager

930
01:16:37,560 --> 01:16:39,560
Like

931
01:16:39,560 --> 01:16:41,560
That

932
01:16:42,680 --> 01:16:44,040
Then

933
01:16:44,040 --> 01:16:46,200
If we try to access this down here

934
01:16:47,160 --> 01:16:50,680
It doesn't work because some of our has been removed from the environment

935
01:16:51,880 --> 01:16:53,880
So this is really useful for like

936
01:16:54,360 --> 01:16:58,680
Temporarily modifying your path or temporarily entering like a new in

937
01:16:59,400 --> 01:17:04,600
A new context that you need to run something in like say you want to switch between a million versions of CUDA for some reason

938
01:17:04,920 --> 01:17:07,560
Like this is a way to no one would ever do that. No one would ever do that

939
01:17:08,280 --> 01:17:10,280
Come see my tutorial tomorrow

940
01:17:12,920 --> 01:17:14,920
Okay, yes

941
01:17:30,920 --> 01:17:32,040
So

942
01:17:32,040 --> 01:17:37,560
The answer is both yes and no so we don't have a particular syntax for doing that yet because that

943
01:17:37,880 --> 01:17:43,560
Turns out to be pretty complicated in some edge cases that we'd like to work in conch that don't work in bash

944
01:17:43,640 --> 01:17:49,240
But that's a whole separate thing, but you can always run commands through nv. So if you wanted to do

945
01:17:50,280 --> 01:17:52,280
nv sum var

946
01:17:52,680 --> 01:17:54,280
You know

947
01:17:54,280 --> 01:17:56,280
Equals 10

948
01:17:56,760 --> 01:17:58,760
echo

949
01:17:59,800 --> 01:18:01,800
Sum var

950
01:18:02,680 --> 01:18:06,920
Uh, well actually that so that doesn't work in bash either. I think is the thing

951
01:18:07,000 --> 01:18:11,560
Yeah, that's one of those that this is one of the things that doesn't work in bash that we would like to

952
01:18:12,280 --> 01:18:15,960
Have work in conch and so this is why this uh

953
01:18:19,160 --> 01:18:25,240
This is why this like we really want that to work and and that the fact that that doesn't work is why we have

954
01:18:26,040 --> 01:18:29,960
Swap and other things, but if you wanted to set other environment variables and things like that you can

955
01:18:33,000 --> 01:18:35,000
Uh

956
01:18:35,720 --> 01:18:38,600
In bash, I mean well, yeah, so that's a different line

957
01:18:39,480 --> 01:18:43,160
Right, so export will export it to everyone and then you have to unset it

958
01:18:43,960 --> 01:18:45,480
Which is annoying

959
01:18:45,480 --> 01:18:48,120
Uh, if you want to remove it afterwards, right?

960
01:18:49,320 --> 01:18:52,600
Yeah, so that's what swap gets you. Yeah, but

961
01:18:55,400 --> 01:18:57,400
Uh, yeah

962
01:19:02,280 --> 01:19:05,720
Yeah, yeah, you could you could star star keyword arcs into that. Oh, definitely

963
01:19:09,240 --> 01:19:10,760
That's there

964
01:19:10,760 --> 01:19:13,480
Okay, so we have a few more exercises here using this stuff

965
01:19:14,440 --> 01:19:20,840
Um, these are things that I'll say like I I both do on a regular basis like these are these are true life examples

966
01:19:21,240 --> 01:19:25,400
um, so one is um use get pass to

967
01:19:25,960 --> 01:19:27,960
Temporarily set your password and environment variable

968
01:19:28,120 --> 01:19:34,120
So this is actually so far as I can tell the only way to securely type your password into a terminal session without it ever being

969
01:19:34,200 --> 01:19:36,280
Saved anywhere like including in your terminal history

970
01:19:36,760 --> 01:19:38,040
um

971
01:19:38,040 --> 01:19:45,000
and uh the second exercise is this also happens to me a lot which is like if you're um native like package manager

972
01:19:45,400 --> 01:19:50,760
Uh, it doesn't like uh like con to curl and keeps like yelling at you because like there's some sham is match

973
01:19:51,240 --> 01:19:51,880
um

974
01:19:51,880 --> 01:19:55,560
You just want to run an install command and just for that one install command pop

975
01:19:56,280 --> 01:19:59,480
Like the front element of your path off, but you don't want to mutate your path forever

976
01:19:59,480 --> 01:20:06,840
You just want to do that this one thing. So just you know temporarily mutate your path run some command and then return it

977
01:20:07,880 --> 01:20:10,200
I'll give you guys a few minutes. We can circle around answer questions

978
01:20:12,040 --> 01:20:14,040
All right, so

979
01:20:14,360 --> 01:20:18,920
Before we move on any questions on the previous stuff now that breaks over

980
01:20:19,640 --> 01:20:26,120
Uh anything all right, so the next section we're going to be talking about what we call callable aliases

981
01:20:26,760 --> 01:20:27,880
so

982
01:20:27,880 --> 01:20:28,680
um

983
01:20:28,680 --> 01:20:37,320
Callable aliases are basically a way for python functions or python callables and sub processes to exchange code

984
01:20:38,040 --> 01:20:39,560
um

985
01:20:39,560 --> 01:20:44,440
In a more integrated way than what we've seen through sort of the at operator and some of these other

986
01:20:45,080 --> 01:20:45,800
uh

987
01:20:45,880 --> 01:20:52,840
Curvy brace or curvy. I forget the mnemonic. This is curvy curvy captures. That's right. Um

988
01:20:54,120 --> 01:21:01,640
So we're going to be building up sort of data pipelines in a more uh in a more integrated fashion

989
01:21:02,360 --> 01:21:03,240
um

990
01:21:03,240 --> 01:21:09,400
And basically what callable aliases allow us to do is run any python function as a sub process command

991
01:21:09,960 --> 01:21:11,160
um

992
01:21:11,160 --> 01:21:16,680
It's not any python function really uh because it requires a certain set of known signatures

993
01:21:17,160 --> 01:21:19,400
But assuming you adhere to that

994
01:21:20,840 --> 01:21:26,440
And we're going to be going through what those are uh, then you'll you'll be able to run them. So

995
01:21:27,960 --> 01:21:30,360
Uh, they're callables right so that part makes sense

996
01:21:30,920 --> 01:21:36,360
They're aliases because they get stuck in what's called the aliases dictionary or the alias is mapping

997
01:21:36,600 --> 01:21:39,480
So this is something that gets shoved into built-ins as well

998
01:21:39,960 --> 01:21:42,840
Um, and it's just a mapping between all the possible different

999
01:21:43,480 --> 01:21:45,400
aliases that exist

1000
01:21:45,400 --> 01:21:48,680
If you're familiar with other shells, you sort of know what an aliases, right?

1001
01:21:49,160 --> 01:21:53,160
So and if you're not, uh, you'll see it's just another way to look up commands

1002
01:21:53,160 --> 01:21:58,520
It's another dictionary to look up commands in uh, does this need to be plugged in? No, okay. All right

1003
01:21:59,080 --> 01:22:01,080
um

1004
01:22:01,080 --> 01:22:02,520
so

1005
01:22:02,600 --> 01:22:05,960
The first function signature is just an empty function signature

1006
01:22:06,520 --> 01:22:09,880
So and it can return either a string

1007
01:22:10,680 --> 01:22:17,640
Or in an integer return code where you know zero means success and everything else means various degrees of failure

1008
01:22:18,040 --> 01:22:20,040
So you can do this with a lambda if you want

1009
01:22:20,600 --> 01:22:24,680
So go ahead and type this out. So if you say aliases, you know

1010
01:22:25,400 --> 01:22:27,400
set item banana

1011
01:22:27,480 --> 01:22:32,600
Equals lambda with no arguments and then banana for scale new line

1012
01:22:33,160 --> 01:22:35,160
You can then run the banana command

1013
01:22:35,880 --> 01:22:39,560
That is it. That's the essence of callable aliases

1014
01:22:40,200 --> 01:22:42,200
And that that should just work

1015
01:22:44,200 --> 01:22:48,040
Yes, so as tom caswell, i'm going to say his name out loud

1016
01:22:48,920 --> 01:22:50,920
tom caswell says this is

1017
01:22:52,040 --> 01:22:55,400
Lambda for your shell server server server lists for yourself shell

1018
01:22:55,480 --> 01:22:57,480
I'm going to misquote him shamelessly

1019
01:22:58,680 --> 01:23:00,680
as as well so

1020
01:23:01,320 --> 01:23:06,600
Okay, matplotlib matplotlib. That's right. Yeah, as long as we're mispronouncing things. I think

1021
01:23:07,880 --> 01:23:15,000
Okay, so you can pipe this into any other command. So the wc command counts characters and lines and words

1022
01:23:15,880 --> 01:23:20,200
So if you pass the dash w flag that means to count the words

1023
01:23:20,920 --> 01:23:22,920
Um based on white space

1024
01:23:23,000 --> 01:23:30,520
So you can say banana pipe wc dash w and that'll tell you that the output of the banana command has three

1025
01:23:31,480 --> 01:23:34,120
Three, uh, three words in it, right?

1026
01:23:34,280 --> 01:23:37,480
and if if you think about what what it would take to do this in

1027
01:23:38,360 --> 01:23:40,520
in using sub process with

1028
01:23:41,320 --> 01:23:43,320
streaming data in and out this is

1029
01:23:43,880 --> 01:23:47,960
Doing a lot behind the cover under the covers to make all of this work for you

1030
01:23:48,440 --> 01:23:50,440
But it feels pretty natural

1031
01:23:50,840 --> 01:23:55,720
Right, because it's just a command just a python function. You're running as a command in sub process mode

1032
01:23:57,080 --> 01:24:02,200
Um, and of course if you want to get rid of that aliases alias because you don't like bananas

1033
01:24:02,680 --> 01:24:08,200
Um, you can delete that alias in the same way that you would delete any other item out of the dictionary

1034
01:24:08,920 --> 01:24:10,920
Any questions? Yes?

1035
01:24:11,640 --> 01:24:13,640
So

1036
01:24:15,560 --> 01:24:24,440
Swap is for environments and aliases is a totally different mapping. Yeah, uh, having a swap is not a bad idea though

1037
01:24:24,600 --> 01:24:26,600
Please open an issue

1038
01:24:28,360 --> 01:24:33,800
There's a banana command on the boondoo. I did not know that there was a banana command on boss. I don't know

1039
01:24:35,080 --> 01:24:37,080
What are you doing?

1040
01:24:37,640 --> 01:24:39,640
Where do they live?

1041
01:24:40,040 --> 01:24:42,040
Where do where do what?

1042
01:24:43,400 --> 01:24:47,480
Yeah, so aliases live in their own dictionary that gets shoved or

1043
01:24:48,040 --> 01:24:50,920
Unfortunately aliased uh into built-ins

1044
01:24:51,480 --> 01:24:57,320
So we're not really in this tutorial talking about how conch does all these tying of things together under the covers

1045
01:24:57,640 --> 01:25:01,720
But in built-ins, there's an aliases dictionary that you can access at any time

1046
01:25:02,680 --> 01:25:10,200
Yeah, and that allows it to persist so you can modify aliases or add these commands in your conch RC, and then they all live

1047
01:25:10,840 --> 01:25:12,680
indefinitely

1048
01:25:12,680 --> 01:25:14,680
okay

1049
01:25:15,400 --> 01:25:19,320
Uh, the next is that you can take a single argument which is

1050
01:25:19,960 --> 01:25:21,960
Uh, the command line arguments

1051
01:25:22,360 --> 01:25:25,400
So like sys.rdv if you're familiar with that

1052
01:25:25,960 --> 01:25:30,040
Um, and it's it comes in as a list of strings. So if you provide

1053
01:25:30,840 --> 01:25:32,840
one argument

1054
01:25:33,000 --> 01:25:40,860
That's called it. It's typically called args. Then you can take command line parameters. So here's an apple function

1055
01:25:41,480 --> 01:25:43,480
which takes

1056
01:25:44,200 --> 01:25:46,600
Takes an args it'll look at it and it'll say

1057
01:25:47,560 --> 01:25:49,560
Is my args list of length one?

1058
01:25:51,640 --> 01:25:59,640
And do one thing and if and succeed return zero right because you can return the return code from these functions

1059
01:26:00,040 --> 01:26:04,200
And if not, um, it'll uh, and otherwise it'll return one

1060
01:26:04,920 --> 01:26:06,040
so

1061
01:26:06,040 --> 01:26:08,040
um, yep, and then

1062
01:26:08,040 --> 01:26:09,560
uh

1063
01:26:09,560 --> 01:26:13,560
And just showing off another bit of syntax if you use this with the at

1064
01:26:14,040 --> 01:26:18,280
Python mode operator you can you don't even need to stick this in aliases

1065
01:26:18,360 --> 01:26:23,800
You can just call it directly because it's a python object. So if you put the command the function

1066
01:26:24,680 --> 01:26:27,320
at parentheses function as the first argument

1067
01:26:28,280 --> 01:26:32,280
And then pass in a some command line arguments after that it'll read it in

1068
01:26:35,800 --> 01:26:37,960
Any questions on how this works

1069
01:26:40,040 --> 01:26:42,040
Any callable will work

1070
01:26:42,840 --> 01:26:44,840
Callable classes are are yes

1071
01:26:45,720 --> 01:26:49,080
Yes, go callable classes. Yeah, this is not limited to

1072
01:26:50,200 --> 01:26:52,680
functions and and uh, and lambdas and things

1073
01:26:53,560 --> 01:26:55,560
okay

1074
01:26:56,040 --> 01:26:59,320
Yeah, and of course there's a formatting bug, but that's whatever

1075
01:27:00,360 --> 01:27:02,360
Yeah

1076
01:27:02,360 --> 01:27:04,360
Sure

1077
01:27:19,800 --> 01:27:23,000
Yeah, so the question is would would you just want this to live in your

1078
01:27:23,400 --> 01:27:30,680
Your conch execution context the python execution context or would you want this to live in aliases specifically like you might do in bash?

1079
01:27:31,000 --> 01:27:32,120
um

1080
01:27:32,120 --> 01:27:38,920
Oftentimes you just you stick them into the aliases dictionary like you do in bash because it's easier to call them

1081
01:27:38,920 --> 01:27:40,680
It's simpler to call them

1082
01:27:40,680 --> 01:27:43,960
It's kind of that's kind of the where what that's there for and where it lives

1083
01:27:44,600 --> 01:27:46,600
If for some reason you don't want to have it

1084
01:27:47,320 --> 01:27:52,040
There and you just want it to have it have it in your execution context. That's fine. That's fine, too

1085
01:27:53,000 --> 01:27:55,000
Yeah

1086
01:27:56,360 --> 01:27:58,200
All right

1087
01:27:58,200 --> 01:28:00,200
Okay, so let's uh move on

1088
01:28:01,320 --> 01:28:02,840
so

1089
01:28:02,840 --> 01:28:05,320
The in the next case you can provide

1090
01:28:06,280 --> 01:28:08,280
In sequential order

1091
01:28:08,520 --> 01:28:10,520
Any of standard in standard

1092
01:28:11,320 --> 01:28:13,320
Out and standard error

1093
01:28:13,320 --> 01:28:20,280
And these are keyword arguments and they default to none right you may not have one of those streams although usually you have standard in

1094
01:28:21,400 --> 01:28:23,400
So those come

1095
01:28:23,400 --> 01:28:28,360
Immediately following the arguments parameter. So here we've got a grape function

1096
01:28:29,480 --> 01:28:35,240
Or an underscore grape function. This is actually the most common pattern is you have pattern. Sorry. So you have the function

1097
01:28:36,440 --> 01:28:38,680
Name preceded by an underscore

1098
01:28:39,480 --> 01:28:41,480
And then you put that into

1099
01:28:42,280 --> 01:28:44,280
The aliases dictionary without the underscore

1100
01:28:45,880 --> 01:28:49,400
And basically what these do is these give you file like handles

1101
01:28:49,960 --> 01:28:56,440
For standard in standard out and standard error. So if these are present you can access them and do whatever you would do normally

1102
01:28:57,160 --> 01:28:59,720
with those those handles so

1103
01:29:00,920 --> 01:29:04,760
We do some contact switching under the covers too. So like if you just

1104
01:29:05,320 --> 01:29:10,360
write to sys.standard in or sys.standard error, etc. That that works as well, but

1105
01:29:11,160 --> 01:29:13,160
it's usually better and and

1106
01:29:13,960 --> 01:29:16,280
To write directly to those file handles. So here

1107
01:29:17,240 --> 01:29:20,760
If you wanted to implement something that's streaming but not asynchronous

1108
01:29:22,520 --> 01:29:28,520
You would do four line in standard in you'd be reading lines from standard in and then we'd be writing them out

1109
01:29:30,040 --> 01:29:33,080
Write back out to standard out lowering them as we go

1110
01:29:35,000 --> 01:29:37,000
Okay

1111
01:29:38,040 --> 01:29:40,040
Yep

1112
01:29:40,520 --> 01:29:42,520
The underscore pattern is there because

1113
01:29:43,160 --> 01:29:45,160
When you source

1114
01:29:45,880 --> 01:29:51,400
You don't get under you don't get the underscore variables in your execution context

1115
01:29:51,960 --> 01:29:54,040
Those don't get brought in automatically. So

1116
01:29:54,760 --> 01:30:00,600
It's a way of hiding things from your execution context if you don't want to pollute the namespace that you're just working in all the time

1117
01:30:01,880 --> 01:30:02,760
Yeah

1118
01:30:02,760 --> 01:30:08,600
Okay, so usage here we go. So this takes a standard in and kind of needs it because we didn't check if it was none here

1119
01:30:09,000 --> 01:30:10,600
so if we spell

1120
01:30:10,600 --> 01:30:12,360
echo wrath

1121
01:30:12,360 --> 01:30:13,880
with

1122
01:30:13,880 --> 01:30:15,880
And then pipe that to our grape command

1123
01:30:16,840 --> 01:30:19,080
It will lowercase that and write it back out

1124
01:30:21,880 --> 01:30:23,560
This makes sense to everybody

1125
01:30:23,560 --> 01:30:25,560
right so the the

1126
01:30:25,560 --> 01:30:27,000
standard

1127
01:30:27,000 --> 01:30:31,240
The output of echo wrath becomes the standard in of the grape function

1128
01:30:31,480 --> 01:30:37,080
Which then operates and then writes back out to what is our our terminals standard out

1129
01:30:37,960 --> 01:30:41,560
Because that the grape is being called last in the pipeline

1130
01:30:43,880 --> 01:30:51,880
Okay, um, you can use any of these but if if if you want to use standard error, you have to use standard in and standard out

1131
01:30:54,120 --> 01:30:56,120
Yeah, that's about it

1132
01:30:57,960 --> 01:31:00,040
Okay, whoops. Yeah, so

1133
01:31:01,960 --> 01:31:05,960
Next up is you can also get a handle or a

1134
01:31:06,840 --> 01:31:08,440
reference to

1135
01:31:08,440 --> 01:31:16,600
The command specification. So this is a specific object that the command pipeline also has access to it's it's basically how conch

1136
01:31:17,240 --> 01:31:24,760
Thinks you should be running the command. It's how the command pipeline got set up for that particular sub command

1137
01:31:25,240 --> 01:31:27,320
Um, so this is a rich python object

1138
01:31:27,320 --> 01:31:35,160
You can go look at the api if you want to but it it effectively contains all the metadata about how you should be running that command

1139
01:31:35,880 --> 01:31:39,720
Um, including what goes in what goes out. So that'll come in

1140
01:31:40,360 --> 01:31:43,400
after the standard in standard out and standard error

1141
01:31:44,040 --> 01:31:44,840
um

1142
01:31:44,840 --> 01:31:50,600
And you can do kind of like funny things here. So one of the things you can do is you can you can use this for is you can check

1143
01:31:51,240 --> 01:31:52,360
whether

1144
01:31:52,360 --> 01:31:53,880
the

1145
01:31:53,880 --> 01:31:59,960
Command is meant to be in a captured sub process so that we talked about that before so you can check to see like

1146
01:32:00,280 --> 01:32:02,920
Am I running this in a captured sub process or not?

1147
01:32:03,160 --> 01:32:07,480
So this is particularly useful if you want to know if you're connected to a live terminal or not

1148
01:32:08,360 --> 01:32:12,040
Or if you want to like this is actually used in the witch command pretty frequently

1149
01:32:12,760 --> 01:32:15,720
Where you don't want to append a new line if you're capturing it

1150
01:32:15,960 --> 01:32:19,960
If you're just printing it out to the screen, you want the new line to be there because you want everything to look nice

1151
01:32:20,280 --> 01:32:21,960
but otherwise

1152
01:32:21,960 --> 01:32:23,720
You don't want the new line to be there. So

1153
01:32:23,720 --> 01:32:31,880
Um, and you can import part of conch to to do this check for you if it uh, if that makes it easier

1154
01:32:36,360 --> 01:32:37,720
And

1155
01:32:37,720 --> 01:32:44,520
Here's just our kiwi and this will have output that looks sort of like this. So if we just run the kiwi command

1156
01:32:46,920 --> 01:32:48,520
Yep

1157
01:32:48,520 --> 01:32:51,640
And then end equals end, but you didn't close the code. Yeah

1158
01:32:54,680 --> 01:32:56,680
And then

1159
01:32:57,320 --> 01:33:01,960
Yeah, so if you just run the kiwi command on its own in an uncaptured way

1160
01:33:02,600 --> 01:33:05,960
It will produce the new line in the extra text and if you

1161
01:33:06,840 --> 01:33:10,440
Capture the kiwi command then it doesn't actually have the new line in it

1162
01:33:12,520 --> 01:33:14,360
Okay

1163
01:33:14,360 --> 01:33:17,320
Any any questions on this or use cases?

1164
01:33:20,520 --> 01:33:22,520
Yeah

1165
01:33:22,600 --> 01:33:24,760
All right, so let's uh, let's move on

1166
01:33:25,560 --> 01:33:29,960
um, so the last form of these functions is uh

1167
01:33:30,840 --> 01:33:32,840
You can get back

1168
01:33:33,480 --> 01:33:34,760
the

1169
01:33:34,760 --> 01:33:38,600
stack frame of the call site of the alias

1170
01:33:39,160 --> 01:33:41,160
So if you need to know

1171
01:33:41,960 --> 01:33:44,440
the locals and global variables

1172
01:33:45,320 --> 01:33:48,280
Where the sub process command was being called from

1173
01:33:48,760 --> 01:33:53,080
You get back the the stack for that if you don't understand what this means

1174
01:33:53,560 --> 01:33:58,200
Like don't worry about it. You definitely don't need it, but if you do this is like a ridiculous tool

1175
01:33:58,680 --> 01:34:01,320
um, so please stack responsibly

1176
01:34:02,760 --> 01:34:05,320
But uh, it it is something that's like

1177
01:34:06,120 --> 01:34:08,760
You know, we don't need to necessarily dive into this

1178
01:34:08,760 --> 01:34:13,080
But it is occasionally useful to know what you're what the variables are

1179
01:34:13,720 --> 01:34:17,160
Around where you're being where the the sub process is being called

1180
01:34:18,120 --> 01:34:21,400
Um and conch does that tying in for you automatically

1181
01:34:23,480 --> 01:34:25,480
Any questions on this

1182
01:34:26,760 --> 01:34:29,880
I know this is this one in particular is a little wacky

1183
01:34:31,720 --> 01:34:35,400
Okay, so we've got some more exercises. Um, they're all related

1184
01:34:36,120 --> 01:34:38,120
Uh, which is nice

1185
01:34:38,280 --> 01:34:41,560
So the first exercise is to write a callable alias

1186
01:34:42,040 --> 01:34:45,560
which just pulls down the contents of frankenstein

1187
01:34:46,040 --> 01:34:51,640
And uh writes them out to the screen. So if you look at that link, it's basically the project Gutenberg link

1188
01:34:52,040 --> 01:34:58,120
Um, and so you can just copy that and and provide an alias that prints out frankenstein to the screen

1189
01:34:58,600 --> 01:35:00,600
grabbed from the internet

1190
01:35:00,680 --> 01:35:03,160
Or you can grab it and then print it out however you want

1191
01:35:03,720 --> 01:35:05,720
um

1192
01:35:05,720 --> 01:35:11,800
The next is to write an alias that calls upper on the standard input and returns that as output

1193
01:35:12,200 --> 01:35:18,200
Uh, the next one is to write an alias that returns all of the unique

1194
01:35:18,840 --> 01:35:21,560
Sorted words coming from standard in

1195
01:35:22,360 --> 01:35:23,480
um

1196
01:35:23,480 --> 01:35:30,520
The next one after that is to write an alias that counts the number of white space separated tokens read from standard in

1197
01:35:31,160 --> 01:35:37,400
And then finally the combine all of those into to a single command pipeline that executes

1198
01:35:42,760 --> 01:35:47,240
And we will definitely walk around and help or you can look at the the details

1199
01:35:48,200 --> 01:35:50,200
um

1200
01:35:50,360 --> 01:35:54,440
Each of these is can't is basically a one liner. So don't overthink it

1201
01:35:56,360 --> 01:36:01,560
But it's okay to overthink it if it gets the job done. I think that's fully qualified

1202
01:36:12,280 --> 01:36:14,280
Okay, so

1203
01:36:14,280 --> 01:36:16,040
um

1204
01:36:16,040 --> 01:36:18,040
So for the first one if you

1205
01:36:19,320 --> 01:36:22,120
Uh, you don't need to use python necessarily

1206
01:36:22,920 --> 01:36:28,920
To to do this so much you can just set set an alias to frankenstein that is a

1207
01:36:30,200 --> 01:36:31,400
lambda

1208
01:36:31,400 --> 01:36:37,960
That calls curl or w getter whatever on that url and that will grab

1209
01:36:38,760 --> 01:36:44,760
That url that we listed just straight away. So if you're using requests or something you you can definitely do that

1210
01:36:44,760 --> 01:36:49,080
That's totally fine, but you don't need to so you can use a command here

1211
01:36:49,800 --> 01:36:51,560
um

1212
01:36:51,560 --> 01:36:53,560
Yeah

1213
01:36:54,120 --> 01:36:57,080
So if you're getting stuck on that that's that's there

1214
01:36:59,800 --> 01:37:05,480
And then yep, I'm sorry. All right, I'll come over so or but we should uh, should we do the second one too?

1215
01:37:06,280 --> 01:37:07,480
Yeah

1216
01:37:07,480 --> 01:37:09,480
So for the second one

1217
01:37:09,880 --> 01:37:11,880
If you want an upper

1218
01:37:12,360 --> 01:37:15,800
All you have to do is take both args and standard in

1219
01:37:16,760 --> 01:37:19,480
Just read everything from standard in

1220
01:37:20,200 --> 01:37:23,240
And then call which is a string and then return

1221
01:37:24,200 --> 01:37:28,360
The upper of that string you could also do it in this streaming version

1222
01:37:28,680 --> 01:37:33,320
Where you have lines that you're reading from and then writing them back out to standard out

1223
01:37:33,480 --> 01:37:35,980
It's a little more complicated. You don't really need to do that

1224
01:37:42,280 --> 01:37:44,280
So for the third example

1225
01:37:44,920 --> 01:37:48,120
um, or the third exercise here, we do something

1226
01:37:48,920 --> 01:37:50,920
pretty similar where

1227
01:37:51,080 --> 01:37:54,120
um to the other where we want to count of words

1228
01:37:54,680 --> 01:37:57,720
um, so the way that you do this is you read from standard in

1229
01:37:58,440 --> 01:38:00,440
um, and then you

1230
01:38:00,440 --> 01:38:04,600
Split those split based on the white space, right? We're all pretty familiar with that

1231
01:38:05,080 --> 01:38:09,560
Um, if you want the unique, right? So that'll give you this big word list in order

1232
01:38:09,880 --> 01:38:13,960
If you want to unique that you call set around it to get the unique words

1233
01:38:14,600 --> 01:38:19,720
And then if you want them sorted you call sort it around that and then you join based on new lines

1234
01:38:20,440 --> 01:38:25,320
So that you output a string again, and that's the uh, that's the thing that you return

1235
01:38:26,040 --> 01:38:31,160
It's kind of a lot of parentheses, but it gets the job done in one line

1236
01:38:31,240 --> 01:38:34,840
You could do it in more lines if you wanted to clean it up like we did in some of the other examples

1237
01:38:34,920 --> 01:38:36,920
But there's no need here

1238
01:38:46,200 --> 01:38:49,240
Do we have the we don't have these loaded in or you do okay. Oh, yeah

1239
01:38:51,000 --> 01:38:53,000
Oh, nope. Okay

1240
01:38:53,800 --> 01:38:55,800
That's probably in that. Yeah

1241
01:39:03,400 --> 01:39:10,520
So for example, if you ran thus it's not perfect, right? Because this is text processing, but um

1242
01:39:12,040 --> 01:39:14,040
There it is

1243
01:39:14,680 --> 01:39:17,560
Um, then for the fourth example or fourth exercise

1244
01:39:18,280 --> 01:39:23,240
If you wanted to count the length of that thing coming in you'd have to basically do the same thing, right?

1245
01:39:23,480 --> 01:39:27,800
So here you'd you'd read it in you'd split based on white space again

1246
01:39:28,680 --> 01:39:33,400
And then instead of calling set or something else you call length

1247
01:39:33,960 --> 01:39:38,600
Uh, which returns an integer you don't want that integer to be the return code

1248
01:39:38,680 --> 01:39:41,880
So you have to convert it to a string add a new line

1249
01:39:42,600 --> 01:39:45,880
And uh, and then you go from there

1250
01:39:48,520 --> 01:39:52,680
So that's how you do or you can do wc dot dash out because

1251
01:39:53,960 --> 01:39:55,960
reasons

1252
01:39:56,680 --> 01:39:59,160
You could also do that that'd be a better example here

1253
01:40:01,480 --> 01:40:03,720
You could do that in the alias. Yeah, you could run

1254
01:40:12,840 --> 01:40:15,640
Yeah, that's the simplest form of the alias really

1255
01:40:17,800 --> 01:40:19,800
And

1256
01:40:20,280 --> 01:40:22,920
Then pull down frankenstein

1257
01:40:26,120 --> 01:40:28,120
Oh, I think we just did

1258
01:40:29,960 --> 01:40:31,960
We really love this frankenstein

1259
01:40:38,920 --> 01:40:40,920
How did you do

1260
01:40:48,120 --> 01:40:50,120
Maybe

1261
01:40:57,000 --> 01:40:59,000
Thank you mic mccarty

1262
01:41:01,400 --> 01:41:10,760
All right, um, let's do it though. Yeah, do it the right way. Um, what was it upper? I'll let you do this and then

1263
01:41:18,520 --> 01:41:20,520
We'll uh, we'll debug that later

1264
01:41:22,520 --> 01:41:26,600
Oops, sorry you want the yeah, it's just words and then count

1265
01:41:31,960 --> 01:41:35,480
The real count and then the point here is that you can

1266
01:41:36,360 --> 01:41:41,160
Merge all of these together in a single command pipeline, uh that executes so

1267
01:41:43,880 --> 01:41:46,360
Okay, any uh, any questions on this

1268
01:41:48,520 --> 01:41:52,040
All right, so that's uh

1269
01:41:53,080 --> 01:42:00,200
Let's if there's no questions on how this works or what it uses we'll move on not a break because we're doing breaks differently

1270
01:42:00,840 --> 01:42:06,040
Um, and our next topic will be events which uh, so switch with y'all

1271
01:42:11,880 --> 01:42:13,880
Okay, so um

1272
01:42:14,440 --> 01:42:17,480
Uh an event is um, it's hard to actually describe

1273
01:42:17,560 --> 01:42:24,840
An event I discovered this um, but um, it's it's uh, it's a trigger that you can fire and then um, if

1274
01:42:25,720 --> 01:42:29,160
You have something that's set up to listen to that firing which we would call a handler

1275
01:42:29,240 --> 01:42:31,240
It will then execute that thing

1276
01:42:31,240 --> 01:42:33,240
That is a horrible

1277
01:42:33,240 --> 01:42:35,080
vague description

1278
01:42:35,080 --> 01:42:38,280
But is uh, I think we'll be a little clearer when we actually go through an example

1279
01:42:38,520 --> 01:42:41,720
I'll just say the events a system in cons was written by one of our

1280
01:42:42,200 --> 01:42:47,080
Contributors jimmy bliss and is just an incredible piece of work and I can say that because I had nothing to do with it

1281
01:42:47,880 --> 01:42:49,880
It's really incredibly powerful

1282
01:42:49,880 --> 01:42:53,400
um, and lets you do a lot of really interesting things if you want to

1283
01:42:54,120 --> 01:43:00,120
Like introspect your code or have all sorts of things happen in response to all kinds of events. You can really start to um

1284
01:43:00,840 --> 01:43:04,360
Do some very uh interesting clever and powerful things here

1285
01:43:07,640 --> 01:43:09,160
Right, so I said this um

1286
01:43:09,160 --> 01:43:12,120
A handler is just a function that is called when an event is fired

1287
01:43:12,280 --> 01:43:17,640
So something says event this kind of event fires any handler that is attached to that event will then be run

1288
01:43:17,640 --> 01:43:20,120
And you can have as many handlers as you want on a given event

1289
01:43:20,200 --> 01:43:24,440
So several functions can be executed in response to something just happening somewhere

1290
01:43:27,480 --> 01:43:33,000
Okay, so one of the events um all of these live in just the events uh, kind of built in at the base

1291
01:43:33,000 --> 01:43:37,800
So you can say events um one of the common ones there's several that are built in to conch later

1292
01:43:37,800 --> 01:43:41,800
We can look at like defining your own, but there are many that are built in the first is um on

1293
01:43:42,440 --> 01:43:43,960
Changed here

1294
01:43:43,960 --> 01:43:47,160
Which fires if you can imagine whenever you change directory

1295
01:43:50,600 --> 01:43:52,600
So this event already exists

1296
01:43:52,840 --> 01:43:58,280
So what we want to do is just create a handler that will execute in response to that event being fired

1297
01:43:59,400 --> 01:44:04,760
So the way that you do that is with this decorator syntax. So you just say at events and the name of the event

1298
01:44:07,160 --> 01:44:09,240
And in particular this event

1299
01:44:10,200 --> 01:44:12,200
Hands off two

1300
01:44:12,280 --> 01:44:16,520
Variables to whatever function is being called as handler. We'll show you how to sort of inspect that later

1301
01:44:17,160 --> 01:44:19,160
They're called older and new dur

1302
01:44:19,720 --> 01:44:23,800
Or old deer and new deer depending on your preferred pronunciation of words that aren't words

1303
01:44:25,240 --> 01:44:28,600
And then in this case just for a kind of a simple example

1304
01:44:28,680 --> 01:44:32,540
I'm just printing out a message that says hey, we just changed from this directory to that directory

1305
01:44:39,240 --> 01:44:41,240
Um

1306
01:44:51,720 --> 01:44:54,680
So now you can just move around in your terminal like do a cd dot dot

1307
01:44:55,400 --> 01:44:59,400
And it'll tell you this thing and you can go back into the like directory. We're just in

1308
01:45:02,920 --> 01:45:05,400
Um, of course now, uh

1309
01:45:06,360 --> 01:45:11,400
Your terminal is is probably a little overly verbose and you don't want this to happen all the time. Um

1310
01:45:12,360 --> 01:45:16,680
So, um, you can always remove handlers too because maybe you've made a mistake

1311
01:45:16,760 --> 01:45:20,280
And it's saying way more than you meant it to say and you would just like to have your terminal back

1312
01:45:20,760 --> 01:45:25,720
Um, so the simplest way is just there's a set of handlers on each event and you can just pop them off

1313
01:45:26,200 --> 01:45:28,200
So in this case events on change deer

1314
01:45:28,840 --> 01:45:29,800
um

1315
01:45:29,800 --> 01:45:31,800
dot pop

1316
01:45:31,800 --> 01:45:36,120
And then you should see the thing come up and then you can just test to make sure that your terminal has recovered by

1317
01:45:36,280 --> 01:45:42,200
You know going somewhere else and confirming that in fact there is uh, no longer something being printed every time

1318
01:45:45,160 --> 01:45:48,440
Um, so that was just a quick example to show you sort of what an event will do

1319
01:45:48,520 --> 01:45:50,680
We can now we'll sort of just dive in a little deeper

1320
01:45:51,080 --> 01:45:55,080
Um into what's happening and like what all you can do and how you can hook into things

1321
01:45:55,720 --> 01:46:01,640
Um, so as we showed you register a handler by just using the name of the event as a decorator

1322
01:46:02,600 --> 01:46:03,800
um

1323
01:46:03,800 --> 01:46:08,600
those um input arguments uh, the keyword arguments that are there are being um

1324
01:46:09,480 --> 01:46:11,480
supplied by the event itself

1325
01:46:11,800 --> 01:46:13,160
um

1326
01:46:13,160 --> 01:46:17,480
There are two ways to kind of figure out what an event provides. Um

1327
01:46:18,200 --> 01:46:22,840
You can just um do help and then event dot name event. Um

1328
01:46:23,480 --> 01:46:30,520
Currently in cons that has the unfortunate side effect of also printing out a bunch of like metaclass stuff that you maybe don't care about at the moment

1329
01:46:31,480 --> 01:46:34,200
If you just want the simple succinct definition

1330
01:46:34,440 --> 01:46:36,760
The better thing is just to look at the dunder dock

1331
01:46:37,320 --> 01:46:40,680
Of the event you want. So in this case you can see that

1332
01:46:41,880 --> 01:46:45,880
It is uh specifying the types of the two arguments that will be provided

1333
01:46:48,120 --> 01:46:51,080
Right there. Yeah, um, and it's returning none

1334
01:46:51,400 --> 01:46:57,640
So you sort of have this like type hint signature that uh describes what arguments will be provided their types

1335
01:46:57,720 --> 01:46:59,720
And then what will come out of the event if anything

1336
01:47:03,000 --> 01:47:06,040
Yes, there is a there there are two ways to get a list of events that are available

1337
01:47:06,360 --> 01:47:11,400
Um, currently the tab completion on that events shortcut is a little bit borked

1338
01:47:11,480 --> 01:47:17,080
Which we're going to fix like in a couple of days, but if you go to a dunder conch dot built-ins

1339
01:47:20,440 --> 01:47:22,440
Built-ins dot events

1340
01:47:24,680 --> 01:47:26,680
And then hit dot tab

1341
01:47:27,240 --> 01:47:28,680
All of those

1342
01:47:28,680 --> 01:47:33,480
And the other way is if you go to the docs, there's like, you know x o n dot s h slash events

1343
01:47:33,560 --> 01:47:37,960
I think it is the html, but on the website. There's a list of all of them what they do when they fire

1344
01:47:41,720 --> 01:47:43,720
Yeah

1345
01:47:46,040 --> 01:47:49,880
Also, I should say if you want to register a handler for an event

1346
01:47:50,200 --> 01:47:53,720
But you don't actually I mean it's going to provide those arguments no matter what you do

1347
01:47:54,680 --> 01:47:56,840
Like it's that's what the event does to the handler

1348
01:47:57,080 --> 01:47:58,600
You can choose not to use them

1349
01:47:58,600 --> 01:48:02,920
But you do need to say like you need to give it like a star star quarks or something to at least capture them

1350
01:48:03,000 --> 01:48:05,160
Or it will throw an error because you're going to pass

1351
01:48:05,720 --> 01:48:08,520
Arguments to a function that doesn't know how to accept them. So it's just you know

1352
01:48:08,520 --> 01:48:12,840
You can make these future basically future proof just so long as you always pass at star star quarks

1353
01:48:13,160 --> 01:48:15,320
And then you don't have to worry about something firing

1354
01:48:16,040 --> 01:48:18,200
Or like passing unknown arguments to your handler

1355
01:48:19,000 --> 01:48:21,000
Um

1356
01:48:22,600 --> 01:48:26,600
So events get fired when we tell them to fire or when you tell them to fire

1357
01:48:27,080 --> 01:48:29,560
Is is effectively the short answer to how these things get set off

1358
01:48:32,520 --> 01:48:33,800
Um

1359
01:48:33,800 --> 01:48:37,800
But so we'll walk through an example of setting up our own event and telling it to fire just to give you a notion

1360
01:48:37,800 --> 01:48:40,600
Of a kind of what this all looks like and how you would put all of this together

1361
01:48:42,840 --> 01:48:45,720
Okay, so first um, we need to create an event

1362
01:48:45,880 --> 01:48:47,880
Um, and uh

1363
01:48:48,440 --> 01:48:52,040
The way you create an event is actually by writing a doc string for it

1364
01:48:52,120 --> 01:48:59,480
It's sort of like the ultimate self-documenting code like it's impossible to create an event in contra without it having documentation because that's the only way to create it

1365
01:49:00,040 --> 01:49:02,040
Um, it's kind of amazing

1366
01:49:03,160 --> 01:49:04,360
Um

1367
01:49:04,360 --> 01:49:08,920
So we're going to create an event that just raises an alarm if it's called that just you know that it's unhappy

1368
01:49:09,400 --> 01:49:13,160
Um, so the the way you do this is you say events dot doc

1369
01:49:13,640 --> 01:49:15,640
All right, and then the first

1370
01:49:16,040 --> 01:49:18,520
Argument you give it is the title is the name of the event

1371
01:49:19,880 --> 01:49:21,880
Uh, which in this case is never run this

1372
01:49:23,720 --> 01:49:27,720
Um, and then you give it a doc string, but which should be um

1373
01:49:28,600 --> 01:49:29,720
Uh

1374
01:49:29,720 --> 01:49:35,160
The uh the signatures in this case this event takes no arguments and returns none. So it's just a it's a simpler

1375
01:49:35,720 --> 01:49:36,840
Um

1376
01:49:36,840 --> 01:49:44,440
Thing so it would just be events not never run this uh parens arrow none and then you can um on the next line

1377
01:49:44,440 --> 01:49:47,560
You can kind of provide a description of what you know, you're expecting it to do

1378
01:49:48,200 --> 01:49:50,200
That's more for other users or other people

1379
01:49:50,200 --> 01:49:53,720
So if you were writing a plugin and you wanted to have some events

1380
01:49:53,720 --> 01:49:58,840
You would kind of try to put your explanations in here so people understand how they can use the events you provided

1381
01:49:59,320 --> 01:50:01,320
Um to full effect

1382
01:50:07,800 --> 01:50:09,800
Okay

1383
01:50:12,120 --> 01:50:16,360
Okay, so now what we're going to do is um the way you would use this event

1384
01:50:17,160 --> 01:50:18,760
is you would um

1385
01:50:18,760 --> 01:50:20,840
It's an event that you basically want to never be fired

1386
01:50:20,840 --> 01:50:24,680
So you you would put it in a function that for some reason you have like really should never be run

1387
01:50:24,760 --> 01:50:27,320
But you're you know you you want to recognize that it may exist

1388
01:50:27,720 --> 01:50:30,760
And so you put this event in there to kind of alert you that this thing is happening

1389
01:50:31,880 --> 01:50:35,240
So, uh, if you wrote a function that deleted everything on your computer

1390
01:50:35,720 --> 01:50:37,720
I don't know why but let's just say you did

1391
01:50:42,440 --> 01:50:49,160
Then what you would do in let's say the first line of that function or somewhere along is that you would just say events dot and then

1392
01:50:49,720 --> 01:50:51,720
Never run this which we've defined

1393
01:50:51,960 --> 01:50:53,960
in that

1394
01:50:54,040 --> 01:50:56,200
Previous doc string thing and then dot fire

1395
01:50:56,920 --> 01:51:02,040
And then what happens is that whenever that function is called and it gets to that line the event

1396
01:51:02,760 --> 01:51:04,920
Management system will basically fire that event

1397
01:51:06,120 --> 01:51:08,680
So we can go ahead actually and run delete my computer

1398
01:51:10,680 --> 01:51:12,680
And nothing happens

1399
01:51:13,960 --> 01:51:15,960
So in fact actually um

1400
01:51:16,440 --> 01:51:20,360
Something does happen right the event fired, but we have nothing listening to the event

1401
01:51:20,760 --> 01:51:22,280
So you don't get anything out of it, right?

1402
01:51:22,600 --> 01:51:26,840
So then the final step is to set up a handler to add it so we create the event

1403
01:51:27,400 --> 01:51:32,600
We tell the event to fire and then we have something that listens for the event firing that then reacts to it

1404
01:51:32,760 --> 01:51:35,560
Right, so there's these three separate these these three separate components

1405
01:51:39,640 --> 01:51:41,640
And given the fact that this is a uh

1406
01:51:42,360 --> 01:51:45,400
Like an event that's supposed to fire when somebody has done something horrible to you

1407
01:51:45,800 --> 01:51:47,960
You can make it a suitably chastening message

1408
01:51:57,800 --> 01:51:59,800
Um and as always um

1409
01:52:00,920 --> 01:52:02,680
Like you have access to the full

1410
01:52:02,680 --> 01:52:03,480
You know uh

1411
01:52:03,480 --> 01:52:07,160
Conspectrum here, so if you want like in this case it means like the who am I is a nice thing

1412
01:52:07,160 --> 01:52:10,200
You can figure out exactly which user is responsible for doing this horrible thing to you

1413
01:52:20,920 --> 01:52:24,920
That's a good tip. Yeah, perfect. Um, so then if you run delete my computer again

1414
01:52:27,240 --> 01:52:33,560
Then the event fires and now you have you know, you know that it was scope at the delete of your computer. I'm sorry

1415
01:52:35,000 --> 01:52:37,000
Can't take him anywhere

1416
01:52:42,520 --> 01:52:49,400
Okay, so, um, are there any initial questions otherwise there's some exercises here that should help kind of like cement the general

1417
01:52:50,120 --> 01:52:52,360
Pattern in place, but we're happy to take questions first

1418
01:52:53,240 --> 01:52:55,240
Okay, great

1419
01:52:55,240 --> 01:52:58,120
Um, so these sort of build on one another so I'll like reveal them as we go

1420
01:52:58,760 --> 01:53:04,120
Um, but the first is just to create a handler for the event that is called on n var change

1421
01:53:04,840 --> 01:53:11,000
Um, this is a built-in, uh event. You don't need to create the event. You just want a handler for the event and you want to have it print out the

1422
01:53:12,200 --> 01:53:16,840
Um old value and then the new value and of course the name of the environment of the var umbrella is just changed

1423
01:53:16,920 --> 01:53:21,320
Um, so you should probably check on the dock the dunder dock of the event to figure out what those variables are called

1424
01:53:21,320 --> 01:53:23,320
Otherwise, it's going to be hard to refer to them

1425
01:53:24,120 --> 01:53:26,120
And Anthony and I can sort of wander and help

1426
01:53:32,120 --> 01:53:34,120
So as gill showed up here, um

1427
01:53:34,280 --> 01:53:39,800
If you just write a simple if condition to check if the name which comes in as a string is

1428
01:53:40,120 --> 01:53:42,600
Like the dock string says is in

1429
01:53:43,400 --> 01:53:44,920
Is either

1430
01:53:45,000 --> 01:53:50,920
In uh is either pwd or old pwd and then only print if it's not

1431
01:53:51,800 --> 01:53:53,320
We can um

1432
01:53:53,320 --> 01:54:00,840
We can check to make sure that it works normally for most environment variables, but if we change directory it um

1433
01:54:01,880 --> 01:54:03,880
It it no longer gets called

1434
01:54:09,000 --> 01:54:10,280
And then

1435
01:54:10,280 --> 01:54:11,640
think we're

1436
01:54:11,640 --> 01:54:16,920
I mean a little low on time. So maybe we'll skip this, uh, this particular

1437
01:54:17,640 --> 01:54:22,040
Uh exercise, but you can go feel free to do it at home and and email us too

1438
01:54:23,080 --> 01:54:25,080
Uh, do you want to just show it or

1439
01:54:25,800 --> 01:54:27,800
Okay

1440
01:54:29,400 --> 01:54:32,200
So one of the really um handy ones for doing some control flow

1441
01:54:32,200 --> 01:54:35,000
We don't we don't have to take time to actually, you know, uh do it right now

1442
01:54:35,000 --> 01:54:41,880
But there's on post command which has a bunch of um of those items that you get in the

1443
01:54:43,000 --> 01:54:45,000
Command pipeline object

1444
01:54:45,000 --> 01:54:47,560
Including like timestamps the name of the command that was run and other stuff

1445
01:54:47,640 --> 01:54:51,880
So in this case, this is all it takes basically to set up like a power line style

1446
01:54:51,880 --> 01:54:56,280
Like the timestamps of the previous command and just throw it onto your right prompt over on the side

1447
01:54:56,600 --> 01:55:02,840
It's really just like this three line event handler thing that you can use and then you kind of set up this interactive thing to track

1448
01:55:03,800 --> 01:55:06,600
You can also get like return codes and start coloring things differently

1449
01:55:06,600 --> 01:55:11,000
I mean it gets really easy to build stuff up there, you know to get sort of the responsive prompt that you want

1450
01:55:11,800 --> 01:55:13,800
That's all I wanted to say

1451
01:55:19,160 --> 01:55:22,840
Okay, so now we're going to talk about macros

1452
01:55:24,280 --> 01:55:25,800
so

1453
01:55:25,800 --> 01:55:32,760
macros are syntax that replace a small amount of code with some with one of the few things

1454
01:55:32,840 --> 01:55:40,200
So either another expression or a syntax tree or just a string rather than being evaluated normally

1455
01:55:42,120 --> 01:55:44,680
So basically what happens in conch is

1456
01:55:45,400 --> 01:55:48,280
That the the parser gets paused

1457
01:55:49,320 --> 01:55:51,320
And then we skip the normal parsing

1458
01:55:52,440 --> 01:55:55,320
We gather up whatever macro inputs are going to be

1459
01:55:56,440 --> 01:55:58,680
Are handed off we'll get to what those are in a moment

1460
01:55:59,560 --> 01:56:02,760
We evaluate the macro with however we're told to evaluate it

1461
01:56:03,480 --> 01:56:06,040
And then we resume normal parsing and execution

1462
01:56:07,640 --> 01:56:11,240
So conch's macro system is more like rusts than

1463
01:56:11,880 --> 01:56:18,040
Other macro systems you might be familiar with so who here like knows rust even a little a little so

1464
01:56:18,600 --> 01:56:24,520
This gets used all the time in rest. So if you're from if you know that it'll look familiar. If not, hopefully it won't be

1465
01:56:25,240 --> 01:56:27,240
too much of a learning curve here

1466
01:56:29,240 --> 01:56:32,280
But basically the point of this is that

1467
01:56:33,880 --> 01:56:35,880
You're already familiar with macros

1468
01:56:35,960 --> 01:56:42,440
Normally jupiter magics are just a macro system effectively. They they pause normal execution and do something else

1469
01:56:45,720 --> 01:56:51,320
So in like in rust the conch macros use the special exclamation point syntax

1470
01:56:53,080 --> 01:56:57,400
And there are three types of macros that we have

1471
01:56:58,680 --> 01:57:03,560
So one are sub process macros, which we'll go over first the next are function macros

1472
01:57:04,200 --> 01:57:07,800
Which we'll follow after and then third is context macros

1473
01:57:07,800 --> 01:57:11,160
So we'll see what all of these look like in in a moment here

1474
01:57:11,480 --> 01:57:13,480
So let's start with sub process macros

1475
01:57:13,880 --> 01:57:19,960
So basically if you put an exclamation point anywhere a loan exclamation point anywhere in your command pipeline

1476
01:57:20,440 --> 01:57:26,360
Anything after that will just be interpreted as a single string argument to the rest of the command

1477
01:57:26,680 --> 01:57:32,200
Um, so if you say echo exclamation point, I'm mr.

1478
01:57:32,200 --> 01:57:37,080
Meeseeks for example, then that entire thing is just a single string

1479
01:57:37,720 --> 01:57:40,600
Uh after the exclamation point it's stripped

1480
01:57:41,320 --> 01:57:43,320
we'll get but

1481
01:57:43,560 --> 01:57:49,880
To show some counter examples if you just echo xyz right echo doesn't really care about the white space

1482
01:57:50,440 --> 01:57:53,400
Um, so normally you'd have to pass this in as a string

1483
01:57:54,280 --> 01:57:56,280
Which is two characters

1484
01:57:56,440 --> 01:58:01,640
But if you use a macro you only have to use one it's echo exclamation point xyz in that whole thing

1485
01:58:01,960 --> 01:58:04,760
It's equivalent to having put that everything in the string

1486
01:58:06,600 --> 01:58:09,560
Okay, now this is sort of a contrived example

1487
01:58:11,720 --> 01:58:13,720
Oh, but before we get into that

1488
01:58:14,040 --> 01:58:16,840
And it's important to remember that macros pause all syntax right?

1489
01:58:17,240 --> 01:58:22,360
Uh before until you escape the sub process command. So environment variables

1490
01:58:22,360 --> 01:58:28,920
Uh will just be listed as there as the string you typed in not anything else

1491
01:58:29,880 --> 01:58:33,320
Um, because we're not parsing that as an environment lookup anymore

1492
01:58:34,040 --> 01:58:39,240
Um, so if you can if you want a more like extended example, you can say you're gonna have

1493
01:58:39,960 --> 01:58:47,560
An environment lookup on both sides and you'll see the first one is uh is the value and the second one is actually just the string that you typed in

1494
01:58:48,680 --> 01:58:50,120
um

1495
01:58:50,120 --> 01:58:52,120
Okay

1496
01:58:52,920 --> 01:58:56,680
So this is really useful when you want to pass in a lot of

1497
01:58:57,400 --> 01:58:59,640
String like a very large string to a command

1498
01:59:00,200 --> 01:59:04,680
Um, so for example time it time. It's like a classic case for this right?

1499
01:59:04,760 --> 01:59:08,360
So if you do time it and then some python code

1500
01:59:09,000 --> 01:59:13,640
Time it is a built-in alias in conch. So you don't need to worry about implementing it. Um, it's there

1501
01:59:14,120 --> 01:59:15,400
Um

1502
01:59:15,400 --> 01:59:17,480
All of that is up is a python

1503
01:59:18,360 --> 01:59:20,520
The string that follows or a conch string that follows

1504
01:59:20,520 --> 01:59:22,520
Um

1505
01:59:22,760 --> 01:59:28,120
Or similarly if you wanted to do some bash code right normally you'd have to put that bash code

1506
01:59:28,600 --> 01:59:30,200
in a string

1507
01:59:30,200 --> 01:59:33,720
And then execute it but with the sub process macro you can just uh

1508
01:59:34,600 --> 01:59:37,640
Type in the exclamation point and it's uh, it's done

1509
01:59:38,760 --> 01:59:42,920
Um, or you can do this with python basically any of the things that you want to pass into dash c2

1510
01:59:43,480 --> 01:59:45,480
Um, it'll work

1511
01:59:46,200 --> 01:59:48,200
Okay

1512
01:59:52,200 --> 01:59:54,200
I think uh, what did you

1513
01:59:57,320 --> 02:00:00,040
Oh, yeah, there you go. Okay

1514
02:00:01,080 --> 02:00:02,200
Um

1515
02:00:02,200 --> 02:00:04,200
Any questions on the sub process macros?

1516
02:00:04,760 --> 02:00:06,760
They're pretty simple

1517
02:00:06,920 --> 02:00:08,920
That's why we did them first

1518
02:00:09,480 --> 02:00:10,840
uh

1519
02:00:10,840 --> 02:00:12,040
The

1520
02:00:12,040 --> 02:00:15,720
Okay, so let's move on to the function macro. So these get a little more fun

1521
02:00:16,360 --> 02:00:18,120
um

1522
02:00:18,120 --> 02:00:19,160
So

1523
02:00:19,160 --> 02:00:25,800
Macros don't require a special function definition. They only require a special function call. They modify how the function is called

1524
02:00:26,440 --> 02:00:27,800
um

1525
02:00:27,800 --> 02:00:30,840
And uh, it's just normal python callables

1526
02:00:32,120 --> 02:00:38,920
What you do to call something as a macro is you stick an exclamation point between the name and the first the open parentheses

1527
02:00:39,640 --> 02:00:40,920
um

1528
02:00:40,920 --> 02:00:46,760
And macro arguments are split on commas like normal functions. So here's a few simple examples

1529
02:00:47,320 --> 02:00:51,960
Uh, so if we had an f function if we wanted to call it as a macro with no arguments

1530
02:00:52,040 --> 02:00:55,080
We would say f exclamation point parentheses

1531
02:00:56,120 --> 02:00:58,520
Your use dross this should look pretty familiar

1532
02:00:59,080 --> 02:01:00,360
um

1533
02:01:00,360 --> 02:01:03,480
Uh, if you want to call it with a single argument, uh

1534
02:01:04,200 --> 02:01:08,040
You would say you would do sort of the normal python single argument

1535
02:01:08,760 --> 02:01:13,160
Uh methods or you can call it with multiple arguments splitting on those top-level commas

1536
02:01:15,320 --> 02:01:17,320
Okay

1537
02:01:17,320 --> 02:01:19,320
um

1538
02:01:19,320 --> 02:01:24,280
How the function is defined uh determines what happens

1539
02:01:24,840 --> 02:01:29,320
Or specifically how the function annotations what the function annotations look like

1540
02:01:29,880 --> 02:01:33,800
Determine what actually happens in the macro when you do a macro call

1541
02:01:34,280 --> 02:01:37,960
Um, and that's matched up with each individual parameter

1542
02:01:38,600 --> 02:01:42,120
Uh, so here's an example. So say you have an identity

1543
02:01:42,680 --> 02:01:48,040
Function that has its annotation for its x parameter set to string

1544
02:01:48,760 --> 02:01:50,760
That x that comes in

1545
02:01:51,480 --> 02:01:54,680
When it's a macro call will always be a string

1546
02:01:55,640 --> 02:01:59,000
Even if what's what's normally put into that is not a string

1547
02:01:59,640 --> 02:02:03,640
So here's a here's a comparison between the the two different versions

1548
02:02:03,960 --> 02:02:08,280
So in the top we have the identity function. We call it with a string. We get a string back

1549
02:02:09,240 --> 02:02:11,960
On the bottom when we call it with

1550
02:02:12,600 --> 02:02:14,600
um, the identity

1551
02:02:14,600 --> 02:02:18,440
With a string, but as a macro call we get a

1552
02:02:19,240 --> 02:02:22,440
This the repper string effectively right returned

1553
02:02:23,480 --> 02:02:24,760
um

1554
02:02:24,760 --> 02:02:28,440
Similarly for ints in a normal python call you'd get an int back

1555
02:02:29,080 --> 02:02:31,240
In the identity you always get

1556
02:02:31,800 --> 02:02:37,240
Uh, the or in the macro call you always get the string and same thing with the the others, right?

1557
02:02:37,320 --> 02:02:41,320
You you get the string form of the argument rather than the

1558
02:02:43,800 --> 02:02:46,280
Rather than the the actual object itself

1559
02:02:49,400 --> 02:02:51,400
Each argument is stripped

1560
02:02:51,560 --> 02:02:53,560
This is basically done for consistency

1561
02:02:54,440 --> 02:02:56,440
So that things like

1562
02:02:56,920 --> 02:03:01,800
42 and 42 don't end up being different. They're not really meant to be different. So

1563
02:03:03,720 --> 02:03:06,840
In this string one, they end up being the same

1564
02:03:08,760 --> 02:03:15,240
You feel free to like raise any questions or deep concerns or anything as we're going. Yeah, tom. Why?

1565
02:03:16,200 --> 02:03:18,200
Well, we're getting to why?

1566
02:03:18,600 --> 02:03:19,560
in

1567
02:03:19,560 --> 02:03:22,760
In context macros, which will see some cool things

1568
02:03:23,560 --> 02:03:25,000
um

1569
02:03:25,000 --> 02:03:28,040
But it's the same it's it's the same underlying infrastructure for functions

1570
02:03:29,160 --> 02:03:30,760
Okay

1571
02:03:30,760 --> 02:03:32,760
Yeah, wow so consistent

1572
02:03:35,160 --> 02:03:39,160
Okay, so here's some like funny examples, uh that are really pretty bad

1573
02:03:39,800 --> 02:03:44,760
Um, so if you macro call like import os obviously this is not valid python syntax

1574
02:03:45,240 --> 02:03:49,240
But in any way shape or form, but you can get that code back

1575
02:03:50,200 --> 02:03:52,200
You could embed some c++

1576
02:03:53,160 --> 02:03:55,160
Because I don't know why

1577
02:03:56,600 --> 02:03:58,600
I forget c++

1578
02:03:58,920 --> 02:04:00,920
Wow, if only I could forget c++

1579
02:04:05,000 --> 02:04:07,000
You don't have to type

1580
02:04:07,560 --> 02:04:12,920
No, you don't have to quote that it's not it's a way of like circumventing that quoting. Yeah

1581
02:04:13,800 --> 02:04:18,840
In this particular example, but there's more things that you can do than just strings. We just showed the strings here

1582
02:04:20,040 --> 02:04:22,040
So if you said

1583
02:04:22,120 --> 02:04:27,160
You wanted this to be an ast there's there's kind of flag codes for this if you want to annotate it in different ways

1584
02:04:27,640 --> 02:04:32,760
You can get back the ast of what you put in if it's python or conch code

1585
02:04:33,080 --> 02:04:38,920
So you can get that tree object back out, which is pretty pretty nice and useful if you're doing a lot of like

1586
02:04:40,200 --> 02:04:42,040
a tree rewriting

1587
02:04:42,120 --> 02:04:45,960
You can get a code object out if you want to want to put in

1588
02:04:47,320 --> 02:04:52,440
Exec or val or something or if you put in the c flag or sorry if you put in compile

1589
02:04:53,480 --> 02:04:55,480
There's six of these so here the first three

1590
02:04:55,640 --> 02:05:02,760
The others are a val so that would just eval the argument as normal so that means that you basically could only put in python expressions

1591
02:05:04,040 --> 02:05:06,440
If you wanted to put in exec you could put in

1592
02:05:07,080 --> 02:05:09,080
Basically anything that you wanted

1593
02:05:09,080 --> 02:05:11,560
Or you could say t and get the type back

1594
02:05:12,120 --> 02:05:13,240
um

1595
02:05:13,240 --> 02:05:18,520
So and in theory this could be extended if there are other things out there that people would want to see done

1596
02:05:19,400 --> 02:05:22,520
But this is kind of this is what's available right now

1597
02:05:24,840 --> 02:05:26,840
Any questions on this stuff?

1598
02:05:28,680 --> 02:05:30,680
Okay

1599
02:05:32,280 --> 02:05:34,920
Okay, so here's an example of some annotations

1600
02:05:35,640 --> 02:05:38,440
Uh a simple function. So we're annotating with

1601
02:05:39,400 --> 02:05:42,600
This the first argument by default since it's got no annotation

1602
02:05:42,680 --> 02:05:44,680
We'll just come back as a string

1603
02:05:44,680 --> 02:05:47,320
The second one will be an ast object

1604
02:05:47,720 --> 02:05:52,600
And the third one will be a code object because we're passing in compile the built-in compile function

1605
02:05:53,320 --> 02:05:54,360
um

1606
02:05:54,360 --> 02:05:56,360
If we do a macro call

1607
02:06:01,160 --> 02:06:02,680
Yep

1608
02:06:02,680 --> 02:06:04,680
See a lot of pensive people

1609
02:06:05,320 --> 02:06:07,320
head's exploding

1610
02:06:07,400 --> 02:06:09,400
Okay

1611
02:06:11,080 --> 02:06:16,840
Uh of this one. Yeah, so just call it with anything. Um, or any python anything excellent point

1612
02:06:21,960 --> 02:06:26,920
Yep, uh, I don't know like three plus five I guess I don't

1613
02:06:30,040 --> 02:06:36,280
Oh, yeah, uh, I think you have to do a new line after the three plus five right or after the os

1614
02:06:37,800 --> 02:06:39,800
I

1615
02:06:41,480 --> 02:06:43,480
Think it's after the os because you did a statement

1616
02:06:47,720 --> 02:06:52,040
No, no, no like a literal new line

1617
02:06:55,560 --> 02:06:57,560
I'll do it. It's too, uh

1618
02:07:08,120 --> 02:07:10,120
No, I guess not string

1619
02:07:12,760 --> 02:07:14,760
Interesting, uh

1620
02:07:16,200 --> 02:07:20,760
I thought there was an example here. All right. Well, this is not working right

1621
02:07:21,720 --> 02:07:24,040
Now, I don't know what the this should

1622
02:07:24,920 --> 02:07:26,760
Know for their code

1623
02:07:26,760 --> 02:07:28,760
Okay, well, it's not it's failing to

1624
02:07:29,960 --> 02:07:31,960
Compile one of these things so

1625
02:07:32,600 --> 02:07:34,600
um

1626
02:07:35,160 --> 02:07:37,160
Let's maybe just do this

1627
02:07:37,320 --> 02:07:39,320
Uh

1628
02:07:42,440 --> 02:07:44,440
No

1629
02:07:47,000 --> 02:07:53,800
Yeah, I don't know. It's uh, what the problem is I'm sorry. We'll have to figure it out afterwards. So, um

1630
02:07:54,920 --> 02:07:56,920
We have a parser error. All right

1631
02:07:58,760 --> 02:08:00,680
Um

1632
02:08:00,680 --> 02:08:02,680
Okay, sorry about that

1633
02:08:03,080 --> 02:08:05,080
uh, so

1634
02:08:05,080 --> 02:08:07,080
the

1635
02:08:07,080 --> 02:08:11,800
Next the the last bit of macros that we'll get to are context macros. So these use

1636
02:08:12,360 --> 02:08:18,360
The exclamation point right after the with uh word so you can use with exclamation point

1637
02:08:18,840 --> 02:08:21,640
um, and then everything after the colon will be

1638
02:08:22,360 --> 02:08:24,360
captured, uh

1639
02:08:24,760 --> 02:08:28,440
Like it was in a normal uh with semen. So this provides both

1640
02:08:29,160 --> 02:08:31,320
Named blocks and anonymous blocks

1641
02:08:31,960 --> 02:08:33,960
um, so if you say

1642
02:08:33,960 --> 02:08:40,680
This isn't going to work because there's no x to enter but you say with x equals 10 print y this would come

1643
02:08:41,400 --> 02:08:44,760
Uh come back as us as a string

1644
02:08:45,720 --> 02:08:51,080
Um, and what this can be thought of really is is doing the follow. So you can think of this as saying

1645
02:08:51,720 --> 02:08:58,920
Uh, whatever your context is x dot macro block equals the string of the code in the block

1646
02:08:59,480 --> 02:09:00,680
de-indented

1647
02:09:01,400 --> 02:09:08,040
And then assigning the locals and globals to to vary up to attributes of that as well and then passing for the actual block

1648
02:09:09,000 --> 02:09:11,000
Um, so it's a bit of code rewriting

1649
02:09:11,800 --> 02:09:13,800
macro block is de-indented

1650
02:09:14,840 --> 02:09:20,040
And uh these attributes are set before the enter method is called

1651
02:09:21,480 --> 02:09:25,720
But they're not cleaned up on the exit method. So you can do that if you want to uh, but they live around

1652
02:09:25,800 --> 02:09:27,800
They stay around and live if you if you need them

1653
02:09:28,600 --> 02:09:29,800
um

1654
02:09:29,800 --> 02:09:33,400
Like with functions by default the contents of the block are returned as a string

1655
02:09:34,040 --> 02:09:39,960
Um, however, they don't need to be they could be any of the other special annotations that we saw before

1656
02:09:40,520 --> 02:09:41,800
um

1657
02:09:41,800 --> 02:09:45,640
And that's just lives is the this conch block

1658
02:09:46,360 --> 02:09:51,080
Attribute on the context manager. So that's how it knows what to look up what type to convert it to

1659
02:09:51,880 --> 02:09:53,480
um

1660
02:09:53,480 --> 02:09:55,160
So here's an example

1661
02:09:55,720 --> 02:10:00,200
And and this is gets to the use case a bit. So we can write a simple

1662
02:10:00,840 --> 02:10:02,360
xml block

1663
02:10:02,360 --> 02:10:06,120
So if we say we're just going to be pretty explicit. You don't need the comments, obviously

1664
02:10:06,680 --> 02:10:08,040
um

1665
02:10:08,040 --> 02:10:10,200
So we say it's going to come back as a string

1666
02:10:10,760 --> 02:10:14,280
We write an enter method that takes

1667
02:10:15,080 --> 02:10:18,040
the contents of the block as a string

1668
02:10:18,680 --> 02:10:24,040
And we'll parse them into an element tree an xml element tree and return that

1669
02:10:24,520 --> 02:10:28,040
um as the uh as the object in the context manager

1670
02:10:28,760 --> 02:10:34,200
Um, then when it exits, we're just going to clean up those things the things that we we had before

1671
02:10:41,480 --> 02:10:43,480
Yeah, I think you need this star whatever

1672
02:10:54,920 --> 02:10:57,160
Macro locals. Yeah

1673
02:10:59,400 --> 02:11:04,280
Okay, and then you can use this. Oh, it's cutting it off a bit, but um

1674
02:11:05,400 --> 02:11:07,640
Uh by saying with exclamation point

1675
02:11:08,520 --> 02:11:11,160
xml block a new object as tree

1676
02:11:12,120 --> 02:11:14,280
colon and then everything

1677
02:11:15,560 --> 02:11:20,680
Um, you can just do a short one. So just do like you could even just do yeah you

1678
02:11:21,240 --> 02:11:23,240
Uh

1679
02:11:23,640 --> 02:11:25,640
And then just close out the note I think

1680
02:11:26,440 --> 02:11:28,440
um

1681
02:11:29,480 --> 02:11:32,280
And now if we we can inspect the tree object

1682
02:11:33,000 --> 02:11:35,000
tree is an instance of

1683
02:11:35,640 --> 02:11:37,960
So I think what is it if you do tree tag?

1684
02:11:39,240 --> 02:11:41,640
Um, that gets the note so it parses

1685
02:11:42,440 --> 02:11:44,680
That x xml. So this lets you

1686
02:11:45,400 --> 02:11:50,280
write documents and other languages right in conch and then do whatever you want with them

1687
02:11:51,640 --> 02:11:56,280
Which is somewhat insane, but actually kind of useful occasionally

1688
02:11:57,720 --> 02:12:04,120
And you saw like writing that context macro macro object that class was actually pretty simple

1689
02:12:05,160 --> 02:12:07,240
It didn't take a lot of lines of code to do that

1690
02:12:09,880 --> 02:12:12,200
So yeah, that's kind of the

1691
02:12:13,480 --> 02:12:15,480
Scenario there

1692
02:12:15,480 --> 02:12:20,600
And hopefully that answers at least partially the use case question. Okay. So we have a few exercises

1693
02:12:21,640 --> 02:12:23,640
Um

1694
02:12:24,040 --> 02:12:28,440
The first is to use a sub process macro. So just run time it

1695
02:12:29,000 --> 02:12:32,680
Um on the string and formatting a string

1696
02:12:34,200 --> 02:12:36,040
The second is

1697
02:12:36,040 --> 02:12:37,080
to

1698
02:12:37,080 --> 02:12:39,640
Call the import module as a macro

1699
02:12:41,080 --> 02:12:47,320
So you don't have to use quotes and the third is to run, uh, uh write a json block context manager

1700
02:12:51,560 --> 02:12:53,560
Oh, yeah, we're not gonna

1701
02:12:54,120 --> 02:12:56,120
Then we need to get into our example

1702
02:12:56,520 --> 02:12:58,520
And then we need to get into our like

1703
02:13:00,520 --> 02:13:03,000
Any questions on any of these or if there are questions, um

1704
02:13:06,680 --> 02:13:08,680
Format was 42

1705
02:13:10,600 --> 02:13:15,880
And you see like what this really prevents once time it completes

1706
02:13:16,600 --> 02:13:24,440
Is you having to run it with a extra set of quotes, right? Because time it expects just a single argument that takes

1707
02:13:25,080 --> 02:13:27,080
Um, so this is the same

1708
02:13:27,400 --> 02:13:31,880
This is fundamentally the same, but you just you don't have to type that extra set of quotes. So

1709
02:13:33,880 --> 02:13:35,880
Okay

1710
02:13:37,560 --> 02:13:39,560
All right, you want to move on to the next

1711
02:13:40,680 --> 02:13:42,680
And then yeah for the

1712
02:13:42,840 --> 02:13:44,840
standard library import lib

1713
02:13:45,400 --> 02:13:51,080
Um, this is just showing you can you actually you can just use existing functions, but call them using the macro syntax

1714
02:13:51,960 --> 02:13:53,960
And so in this case you get back the

1715
02:13:56,600 --> 02:13:58,600
Import lib sorry. Yeah

1716
02:13:59,000 --> 02:14:00,440
dot

1717
02:14:00,440 --> 02:14:02,440
import module

1718
02:14:03,080 --> 02:14:05,080
So if we do sys

1719
02:14:06,200 --> 02:14:10,360
Uh, right because the first argument is a string you can just get that so

1720
02:14:11,160 --> 02:14:14,120
It'll it'll take it'll turn whatever you type that into a string

1721
02:14:15,800 --> 02:14:17,800
Okay

1722
02:14:20,120 --> 02:14:22,120
And then

1723
02:14:22,360 --> 02:14:29,480
Uh, the third one is this json block. So this should be very familiar to the xml one where

1724
02:14:30,440 --> 02:14:32,440
um

1725
02:14:33,000 --> 02:14:34,840
Now we just have

1726
02:14:34,840 --> 02:14:43,160
Or now we have uh json. We don't need the the macro block part because that's optional. Um, but we

1727
02:14:44,120 --> 02:14:46,120
Uh, oops on enter

1728
02:14:47,000 --> 02:14:48,520
um

1729
02:14:48,520 --> 02:14:51,000
We'll assume that the code that comes in

1730
02:14:51,800 --> 02:14:53,320
is

1731
02:14:53,320 --> 02:14:57,720
Uh part of is valid json. So we'll return

1732
02:14:59,320 --> 02:15:01,320
uh json

1733
02:15:01,400 --> 02:15:03,400
dot loads

1734
02:15:03,400 --> 02:15:04,760
of

1735
02:15:04,760 --> 02:15:06,440
self dot

1736
02:15:06,440 --> 02:15:08,440
macro block

1737
02:15:08,760 --> 02:15:10,760
Um

1738
02:15:11,400 --> 02:15:13,400
And then on exit

1739
02:15:13,560 --> 02:15:18,280
Uh, we'll do this we'll do the same delete portion just to clean up after ourselves as well

1740
02:15:18,840 --> 02:15:22,840
um, and so a use case for this is just with

1741
02:15:23,960 --> 02:15:25,080
uh

1742
02:15:25,080 --> 02:15:27,080
json block

1743
02:15:27,160 --> 02:15:28,360
as

1744
02:15:28,360 --> 02:15:31,560
Let's call it x. Um, and we can write like

1745
02:15:33,640 --> 02:15:36,360
Hello, just some random json

1746
02:15:37,720 --> 02:15:39,480
mom

1747
02:15:39,480 --> 02:15:40,760
And now

1748
02:15:40,760 --> 02:15:43,560
x is a dictionary that was parsed from that json pretty

1749
02:15:44,280 --> 02:15:51,880
Pretty simple silly example because json and python are so similar here, but uh, you know, it's it's a one way to do things

1750
02:15:52,120 --> 02:15:53,480
so

1751
02:15:53,480 --> 02:15:55,480
Any questions on these exercises? Yeah

1752
02:15:56,120 --> 02:15:56,920
So

1753
02:15:56,920 --> 02:16:02,600
Where does this json block object end up in this case? What do you mean? So

1754
02:16:03,560 --> 02:16:05,560
x ended up as the return value of enter

1755
02:16:06,120 --> 02:16:08,120
Yes, so where did the json block instance

1756
02:16:09,080 --> 02:16:11,560
It's gone. Okay, so like the so the cleanup is a little

1757
02:16:13,000 --> 02:16:15,000
I guess you can show in the cleanup

1758
02:16:15,000 --> 02:16:17,000
Implying these things are leaking

1759
02:16:17,240 --> 02:16:23,320
Well, so the macro block and macro globals and macro locals. Yeah, so so this would leak

1760
02:16:23,560 --> 02:16:27,400
I get in the case where you instead returned self from the

1761
02:16:28,600 --> 02:16:31,080
From the from the enter method

1762
02:16:32,280 --> 02:16:34,280
Right

1763
02:16:35,240 --> 02:16:38,440
No, no, it's not it's not keeping a cache it would only leak if you

1764
02:16:39,480 --> 02:16:40,760
so like

1765
02:16:40,760 --> 02:16:45,640
So the the place where it would leak potentially where you wouldn't want it to necessarily is like if you wanted to

1766
02:16:46,200 --> 02:16:47,400
Have the same

1767
02:16:47,400 --> 02:16:53,480
Instance of json block be reentrant like that's what this makes us so you could like have one instance of json block

1768
02:16:53,640 --> 02:16:55,640
And then just reenter it every time

1769
02:16:56,040 --> 02:16:58,040
And always get the tree back

1770
02:16:58,440 --> 02:17:01,640
Uh, or if you return self and we're doing something else with it later

1771
02:17:02,360 --> 02:17:04,360
Right, so yeah

1772
02:17:05,640 --> 02:17:07,880
That that's where the references get added

1773
02:17:09,880 --> 02:17:11,640
Yeah

1774
02:17:11,640 --> 02:17:13,640
Does that make sense

1775
02:17:13,640 --> 02:17:18,840
Sort of um close enough. Yeah, I guess the the thing is like if you returned

1776
02:17:20,120 --> 02:17:22,120
Uh, so if you said like

1777
02:17:23,640 --> 02:17:25,080
self

1778
02:17:25,080 --> 02:17:27,080
dot

1779
02:17:27,320 --> 02:17:29,320
Like maybe you wanted like

1780
02:17:30,040 --> 02:17:36,760
Like maybe you wanted to keep the j object around so you did like json dot

1781
02:17:37,480 --> 02:17:39,480
Or you wanted to keep the tree

1782
02:17:40,200 --> 02:17:42,200
um, so you do json.loads

1783
02:17:43,560 --> 02:17:45,560
of

1784
02:17:46,200 --> 02:17:48,200
self dot macro block

1785
02:17:49,640 --> 02:17:51,640
And then

1786
02:17:52,440 --> 02:17:54,440
And then you return

1787
02:17:54,840 --> 02:17:56,840
self

1788
02:17:56,920 --> 02:17:59,000
You know, you might not want to keep the globals

1789
02:17:59,720 --> 02:18:04,280
You might want to keep the macro block itself around, but you might not want to keep the other locals and and

1790
02:18:04,920 --> 02:18:06,520
globals here

1791
02:18:06,520 --> 02:18:08,200
and so

1792
02:18:08,200 --> 02:18:09,800
Just using this

1793
02:18:09,800 --> 02:18:14,120
So now x is the json block and then x dot

1794
02:18:15,400 --> 02:18:17,000
Tree

1795
02:18:17,000 --> 02:18:19,000
Is the uh, is the actual

1796
02:18:19,320 --> 02:18:23,480
Version, but you still have access to the string of what the macro block was

1797
02:18:24,520 --> 02:18:26,520
Yeah

1798
02:18:27,800 --> 02:18:33,160
They are the uh, they they're the the name they're the local and global

1799
02:18:33,880 --> 02:18:37,880
Uh dictionaries like as if you had called locals and globals the python built-ins

1800
02:18:38,440 --> 02:18:45,000
Where the where the macro block was called or the context macro was was written

1801
02:18:46,200 --> 02:18:48,200
Yeah

1802
02:18:48,680 --> 02:18:51,480
Yeah, okay. Yeah, any other questions on this?

1803
02:18:57,320 --> 02:18:59,320
What are the use cases

1804
02:19:02,200 --> 02:19:06,360
Yeah, so the most common use case is really something like time that right, it's really those

1805
02:19:06,520 --> 02:19:13,000
Um, there's a couple of cases where that i've that we've used these things where like if you wanted to write some bash

1806
02:19:13,240 --> 02:19:16,120
And you really needed it to be bash in a local context

1807
02:19:16,600 --> 02:19:19,240
Then you would then you write like a little bash thing

1808
02:19:19,720 --> 02:19:20,680
um

1809
02:19:20,680 --> 02:19:26,680
There's been some other use cases where we take input or configuration files in as these macro blocks

1810
02:19:27,720 --> 02:19:31,880
Um, uh, but otherwise, yeah, it's that's kind of the use cases

1811
02:19:43,720 --> 02:19:45,720
Import sorry saying

1812
02:19:47,240 --> 02:19:49,240
Oh, yeah, yeah

1813
02:19:49,560 --> 02:19:53,880
That that was that's just a toy. Uh, that's kind of a toy example to show

1814
02:19:54,760 --> 02:19:59,240
Um, right this comes from the standard library and the standard library didn't

1815
02:19:59,880 --> 02:20:02,280
Uh, doesn't know anything about conscious

1816
02:20:03,080 --> 02:20:04,120
Macro system

1817
02:20:04,120 --> 02:20:09,640
So it didn't annotate these functions in any particular way and this is just showing that you that you can use

1818
02:20:10,520 --> 02:20:15,720
You can use the macros on those functions if you if those functions happen to take string arguments

1819
02:20:16,440 --> 02:20:23,960
Okay, so it's more just demonstrating it's it's demonstrating. Yeah, but the function macro stuff just ended up having to

1820
02:20:24,360 --> 02:20:27,080
It kind of had to be there for the context macro stuff

1821
02:20:27,720 --> 02:20:28,760
um

1822
02:20:28,760 --> 02:20:33,880
That infrastructure all had to be the same. So it's there and available in the language if you want it, but

1823
02:20:34,520 --> 02:20:37,800
Um, I wouldn't say there's like a killer feature for it unless you're coming

1824
02:20:38,360 --> 02:20:44,680
From rust or you or you really like doing a lot of ast syntax ast tree like rewriting and stuff

1825
02:20:45,480 --> 02:20:50,440
In which case this makes it easy for you to provide those rewriters or pattern matchers

1826
02:20:51,320 --> 02:20:56,680
Um inside of conch, but there aren't that that intersection is basically me. So

1827
02:20:59,400 --> 02:21:01,400
Yeah, so

1828
02:21:02,040 --> 02:21:04,040
Okay, cool

1829
02:21:05,320 --> 02:21:07,320
Good question

1830
02:21:08,600 --> 02:21:14,520
Uh, let's we should maybe skip this well except we don't know if we can yeah, well I can try to

1831
02:21:15,400 --> 02:21:20,520
Um, so this is going to be interesting as we discover if this is even possible anymore

1832
02:21:21,000 --> 02:21:23,880
Um, but there, uh, there is an example here

1833
02:21:24,360 --> 02:21:29,160
Which is that we were working in a lab that had a bunch of MRIs of mouse lemurs

1834
02:21:30,600 --> 02:21:32,600
That's a mouse lemur

1835
02:21:36,600 --> 02:21:42,200
So we had all these MRI datas, um, but uh, it was set up on our web server by a postdoc who disappeared last week

1836
02:21:42,760 --> 02:21:45,000
Um, and we have some other bad news

1837
02:21:45,800 --> 02:21:49,000
Uh, which is that he used bash to handle all the data collection

1838
02:21:49,320 --> 02:21:52,680
He didn't know how to make sure that different datasets were saved to separate directories

1839
02:21:52,680 --> 02:21:55,960
So he just added a random four-digit number to the end of all of these

1840
02:21:56,600 --> 02:21:59,720
Um, NII MRI image data files

1841
02:22:00,280 --> 02:22:05,640
Um, and he also neglected to do this with the json metadata that was included with it. So that's all been overwritten and lost

1842
02:22:06,360 --> 02:22:08,120
Um

1843
02:22:08,120 --> 02:22:10,680
And then he ran remove with an overly permissive glob

1844
02:22:10,920 --> 02:22:12,920
I deleted all of them

1845
02:22:13,320 --> 02:22:16,520
And uh, the files are kind of big in the postdoc's web servers at his house

1846
02:22:17,160 --> 02:22:19,160
We don't want to have to download all of them

1847
02:22:19,640 --> 02:22:21,480
um

1848
02:22:21,480 --> 02:22:26,920
That being said, uh, the web server at the house, which is on my laptop is completely inaccessible to everyone on this network

1849
02:22:26,920 --> 02:22:29,160
It turns out which makes this a little trickier

1850
02:22:30,200 --> 02:22:32,200
um

1851
02:22:34,600 --> 02:22:37,400
The data is now on uh github

1852
02:22:37,640 --> 02:22:41,960
At uh in this repo called MRI data, sorry

1853
02:22:47,800 --> 02:22:49,800
And uh

1854
02:22:49,960 --> 02:22:53,160
This may not be possible. So we'll find that it's going to be a learning adventure for all of us

1855
02:22:53,880 --> 02:22:58,120
Um, we do know a couple of things about the data. So this is sort of our exploratory thing

1856
02:22:58,200 --> 02:23:00,840
They all do follow this naming convention

1857
02:23:01,400 --> 02:23:06,200
Uh, so you just have like sub dash two-digit number underscore four-digit number dot NII

1858
02:23:07,160 --> 02:23:08,280
Um

1859
02:23:08,280 --> 02:23:13,640
The files are large, but the first 348 bytes of each file is a header

1860
02:23:14,440 --> 02:23:17,000
So you can nominally just pull down the header

1861
02:23:18,520 --> 02:23:21,480
Um, we're pretty sure there are 19 mouse lemur scans

1862
02:23:23,240 --> 02:23:24,520
Um

1863
02:23:24,520 --> 02:23:29,800
And the circle spine study going on the lab next door, which is mixed in with all this data only has six subjects

1864
02:23:31,720 --> 02:23:33,080
Um

1865
02:23:33,080 --> 02:23:41,000
And nominally this is how you would use curl to only pull down the first 348 bytes of a file if there were a functioning web server available

1866
02:23:41,560 --> 02:23:47,240
Um, we're going to discover together if you can do this from like the raw link on a github repo

1867
02:23:48,280 --> 02:23:50,280
But we're not sure

1868
02:23:51,080 --> 02:23:53,080
Um

1869
02:23:53,320 --> 02:23:58,760
So having said that if you would like to even try this and we welcome your support and efforts

1870
02:23:59,640 --> 02:24:06,920
You can install, uh, n i babel, uh, n i b a b e l on kind of forage, which is a nice package for loading in this MRI data

1871
02:24:08,120 --> 02:24:12,840
It's on pip, right? I don't know. Oh, you don't know. Okay. Yeah, I don't even look on pip anymore. Yeah

1872
02:24:16,280 --> 02:24:18,280
And then um

1873
02:24:18,600 --> 02:24:21,320
We are all gonna try together to see if we can

1874
02:24:22,040 --> 02:24:25,800
Just download the headers of each of these files to sort of determine which of them are the ones we want

1875
02:24:25,800 --> 02:24:30,520
So we don't just download everything which is never usually the right answer to these sorts of questions

1876
02:24:32,600 --> 02:24:36,680
Maybe we should see if we can curl one of them right now. Yeah, let's try it. Okay

1877
02:24:37,640 --> 02:24:39,640
um

1878
02:24:41,160 --> 02:24:43,480
All right, so what it's curl dash

1879
02:24:46,600 --> 02:24:48,200
R

1880
02:24:48,200 --> 02:24:50,200
and then

1881
02:24:50,840 --> 02:24:54,520
What I should have kept that and then what's the github URL?

1882
02:24:55,800 --> 02:24:58,040
Well, the github api should be

1883
02:25:01,240 --> 02:25:03,400
This feels way too much like real science right now

1884
02:25:06,920 --> 02:25:08,920
So it would be uh

1885
02:25:11,880 --> 02:25:17,240
github.com g4 site MRI data sorry blob master rifles true

1886
02:25:19,640 --> 02:25:21,640
That didn't work

1887
02:25:23,400 --> 02:25:25,400
No

1888
02:25:26,680 --> 02:25:27,800
I

1889
02:25:27,800 --> 02:25:29,800
Thought there was like a real

1890
02:25:30,600 --> 02:25:35,240
Okay, you know like a raw user data kind of thing. Where does that live at?

1891
02:25:36,360 --> 02:25:38,360
I think usually it's there unless the file is too big

1892
02:25:39,800 --> 02:25:41,400
Oh

1893
02:25:41,400 --> 02:25:45,720
Okay, this is why you don't store, you know big data on github this way. It's a really bad pattern

1894
02:25:50,840 --> 02:25:52,840
Let's try this one

1895
02:25:56,760 --> 02:25:58,760
Received

1896
02:26:07,160 --> 02:26:09,480
No such key or maybe that one's not up yet

1897
02:26:15,240 --> 02:26:17,560
It's another one of these file names that's definitely up

1898
02:26:26,280 --> 02:26:28,280
Uh

1899
02:26:32,440 --> 02:26:34,440
Okay, time to rewrite the slides

1900
02:26:36,600 --> 02:26:43,880
Which you'll be able to reload and copy from yeah, what's that digital ocean droplet? Uh, they're all all

1901
02:26:46,040 --> 02:26:48,040
Put it in this chat

1902
02:26:52,440 --> 02:26:54,440
Sorry about this overall

1903
02:26:56,520 --> 02:26:58,520
By

1904
02:27:01,400 --> 02:27:05,800
Yes, yeah, no the network's all kinds of fun today

1905
02:27:17,080 --> 02:27:23,800
Don't help me google. I don't want your help your help is terrible and poison. It's not help. It's spying. Just stop spying on everything we do

1906
02:27:24,040 --> 02:27:26,040
They're watching us right now

1907
02:27:27,480 --> 02:27:30,040
That's true, but we we ask them to

1908
02:27:38,280 --> 02:27:43,560
Can you curl down a file list from there? Is that work? No, I don't well, I don't know how to what was the command for doing

1909
02:27:45,240 --> 02:27:47,240
All right, I think

1910
02:27:47,560 --> 02:27:53,480
It should just be this

1911
02:27:57,640 --> 02:27:59,640
Okay, does it work

1912
02:28:00,120 --> 02:28:04,120
Yeah, that's yeah that that the information's in there. Okay, so

1913
02:28:06,040 --> 02:28:08,040
Yes

1914
02:28:08,040 --> 02:28:10,040
So you've got an xml block

1915
02:28:10,360 --> 02:28:12,360
all right

1916
02:28:12,760 --> 02:28:16,920
We are happy to answer questions along the way this should actually work though, which is kind of amazing

1917
02:28:18,120 --> 02:28:19,800
so we have

1918
02:28:19,800 --> 02:28:25,560
The post doc is better than we thought he was and has uploaded the files to this digital ocean droplet

1919
02:28:26,120 --> 02:28:28,120
That I've just added to this slide

1920
02:28:29,000 --> 02:28:33,400
If you reload the slide deck you should be oh, I haven't I haven't pushed it up. Okay. I'm sorry

1921
02:28:33,720 --> 02:28:38,360
I can't I can't push anything right now because I haven't set up the ssh thing and it wasn't working. I'm sorry

1922
02:28:39,320 --> 02:28:40,520
um

1923
02:28:40,520 --> 02:28:44,040
But if you curl that url you will get

1924
02:28:45,160 --> 02:28:47,160
This looking kind of blob

1925
02:28:47,720 --> 02:28:49,720
Which does have all of the file names in it

1926
02:28:50,200 --> 02:28:52,200
So you can see there's one

1927
02:28:52,360 --> 02:28:53,960
I lost it there

1928
02:28:53,960 --> 02:28:55,960
sub 187785.nii

1929
02:28:57,560 --> 02:29:02,040
And you should be able to pull out from this a list of all all of the names that match that pattern

1930
02:29:02,760 --> 02:29:04,760
and then you can

1931
02:29:04,760 --> 02:29:08,920
Pull down only the first 348 bytes of each of them load them into

1932
02:29:10,040 --> 02:29:15,560
Ni babel and then inspect sort of the dimensions of the thing to figure out which are sort of the correct images

1933
02:29:18,040 --> 02:29:20,040
Yes, I can

1934
02:29:28,280 --> 02:29:35,080
You probably need to well actually yeah, it should just work. Yeah. Yeah, it works. Yeah, I do that all the time

1935
02:29:36,440 --> 02:29:39,000
All right, kind of install something and then import it immediately

1936
02:29:39,240 --> 02:29:41,240
Yeah, so

1937
02:29:42,760 --> 02:29:48,120
Uh, yeah, and if you're having a problem or if you're running to issues like come just raise your hand let let us know

1938
02:29:52,520 --> 02:29:55,320
And thanks for uh dealing with our debugging

1939
02:29:59,960 --> 02:30:05,240
So for a quick update on our progress here is there anyone anyone doing on this if at all

1940
02:30:09,000 --> 02:30:10,520
Sorry to hear that

1941
02:30:10,520 --> 02:30:11,720
so, um

1942
02:30:11,720 --> 02:30:15,400
One thing you can do for some of this is you first want to get

1943
02:30:17,320 --> 02:30:19,320
Uh the raw kind of page

1944
02:30:19,960 --> 02:30:25,000
So that would be you could just curl down that base. You are all there. I actually got encoded. This is a yeah

1945
02:30:25,000 --> 02:30:27,000
Can you make the font? I sure can

1946
02:30:29,720 --> 02:30:34,520
You want to show the other command? Oh, yeah base. You're all right. Yeah, so then if you have this

1947
02:30:35,320 --> 02:30:37,400
Really long painful string like this, but you know

1948
02:30:38,280 --> 02:30:40,280
That the files look like

1949
02:30:43,320 --> 02:30:45,320
Somewhere there

1950
02:30:46,840 --> 02:30:50,040
You can try to use xml, but xml is horrible

1951
02:30:50,920 --> 02:30:51,960
so

1952
02:30:51,960 --> 02:30:53,160
um

1953
02:30:53,160 --> 02:30:59,320
You could also use a regular expression to scrape over that and pull out anything that matches a certain pattern

1954
02:31:02,200 --> 02:31:05,000
So then that's sort of the list of files that match that

1955
02:31:05,400 --> 02:31:10,200
So now you might want to try just like downloading one of those

1956
02:31:12,280 --> 02:31:16,200
Which would be to grab the first 348 bytes

1957
02:31:20,680 --> 02:31:24,760
Save it to the same output file it concatenate or just you know put together the base url

1958
02:31:24,760 --> 02:31:27,320
And then the path of a single file just to kind of test it out

1959
02:31:29,880 --> 02:31:32,440
Seems to work you import knee babble

1960
02:31:35,400 --> 02:31:37,400
You can load that file

1961
02:31:38,200 --> 02:31:40,200
And then if you explore

1962
02:31:41,080 --> 02:31:44,760
Some of the different options here you might see this header thing

1963
02:31:52,840 --> 02:31:54,840
Yeah back there

1964
02:32:05,960 --> 02:32:14,360
Yeah, so the question is about uh, why why shouldn't you use a path string here? Well, yeah

1965
02:32:14,360 --> 02:32:16,760
So the answer is basically that it's a url

1966
02:32:17,320 --> 02:32:19,320
So it's not really a path in a normal way

1967
02:32:19,560 --> 02:32:24,840
And the second is that you're you're just passing it back down to a command a sub process command

1968
02:32:25,160 --> 02:32:29,720
And so it's going to get turned back into a string anyways, so you don't really need the path object

1969
02:32:30,200 --> 02:32:32,200
Yeah, having said that what um

1970
02:32:33,080 --> 02:32:36,760
You know as you go along on this you might you would maybe curl it down using just you know

1971
02:32:36,920 --> 02:32:38,920
Just a string because you want to pass that to curl

1972
02:32:39,240 --> 02:32:44,440
But then in terms of loading the file after you have it there you could first make it a a path lib path

1973
02:32:45,080 --> 02:32:49,480
Load it from that and then depending on the results of like how you're inspecting it

1974
02:32:49,560 --> 02:32:54,120
Then use path lib of that file to move it or change it or mark it or delete it or

1975
02:32:54,840 --> 02:32:56,840
You know so you can work that into the

1976
02:32:57,240 --> 02:32:59,240
The process

1977
02:33:02,440 --> 02:33:04,920
I'm going to keep working on this like at lunch so people want to

1978
02:33:05,960 --> 02:33:07,960
On this contrived example to be created

1979
02:33:08,440 --> 02:33:10,440
But you want things to work

1980
02:33:11,240 --> 02:33:16,440
So that um, thank you everyone for coming. Uh, I know it's like a lot of information just to dump into people's heads

1981
02:33:16,840 --> 02:33:22,760
But we appreciate you guys kind of toughing it out with us. Um, we also um, there's a bunch of stuff we haven't covered

1982
02:33:24,760 --> 02:33:27,560
There's even some more new syntax probably that I've forgotten about

1983
02:33:27,640 --> 02:33:31,640
Um, but we're here all week and we're happy to help you answer questions

1984
02:33:31,640 --> 02:33:35,480
If you have a certain thing you like to do and you just want it to you think it could work a little better

1985
02:33:35,480 --> 02:33:38,360
You want to try see what it would look like on conch? Please like stop us anytime

1986
02:33:38,440 --> 02:33:44,440
We have stickers on our badges and you probably would recognize at this point. Um, we also have stickers up front

1987
02:33:44,520 --> 02:33:50,440
So feel free to take as many as you want of those and uh, yeah, thanks for coming and trying out conch and hopefully

1988
02:33:51,080 --> 02:33:54,840
You know, it improves your life in some meaningful way. So

1989
02:33:55,480 --> 02:33:57,240
uh, and then

1990
02:33:57,240 --> 02:34:01,000
Yeah, we'll be around and open bug reports find us on getter

1991
02:34:01,640 --> 02:34:04,440
Uh, open issues contribute. We're

1992
02:34:05,400 --> 02:34:08,360
Friendly community. So thank you so much everybody

