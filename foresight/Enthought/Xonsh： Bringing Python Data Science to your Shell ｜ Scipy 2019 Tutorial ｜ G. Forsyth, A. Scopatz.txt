Welcome. This is the tutorial for a conch. If you're not here for a tutorial on conch, you're really in the wrong room.
But we hope you're in the right room. Yeah, we think this room is the best actually. You made a good choice.
You can introduce yourself. Hi, I'm Anthony Scopatz. I work for Quonsite and according to the slide
I am both a madman and a poet, so I hope that this inspires you in some way today.
I'm Gil Forsythe, not Gorsythe.
I am also a madman and a poet according to the slide. I currently work for Capital One.
Yeah, that's why I got it. Yeah, and thanks for being here with us 8 a.m. on a Monday morning.
Not everybody wants to learn about new show languages at 8 a.m. on Monday morning, but
so we have a few bits of
bookkeeping and just want to get everyone kind of set up and ready to go. If you've been to a lot of, or any slide
part tutorials before, sort of the
the usual mode of presentation interaction is Jupyter Notebooks, and those are great. It works really badly
if what you're teaching is like a show language and prompt.
So we actually just do need you to install the stuff, and then we will
be sort of live coding and have slides at the same time, and we're, you know,
we'll be running around and help and stuff. But so if all of you can just take a few moments and we'll run around
to troubleshoot and install Conch, we highly recommend using Conva for this, but
there's other options. Yeah, and there's a new release as of last night at 10 p.m.
So if you haven't updated since then, please
there's a bug fix. Sorry, the code has bugs.
Like all code. So yeah, please grab the 0.9.8 release, and we'll go from there. So who has
Conch installed right now already?
Okay, most of you, and if you don't, like just grab it, it should take two seconds because it is pure Python, thankfully.
So you don't have to deal with like weird
Fortran rust extension interactions and stuff or read line read line. Oh, yeah, we don't have to deal with read line
Everyone's favorite library
Three three chairs for read line
No, no, no chairs. Okay. Wow. We got one tough crowd one one one one chair. Wow
Nice input RC. There you go
Thank you. I'll be here
What?
Alright, so oh, and we we should send out the link to the slides as well. So
Slides should be at
Conduct SH this is what's that repo called is it like conch?
While people are installing conch and for people just coming into the room, please install conch
I just want to sort of do a quick poll the room get a sense of who y'all are and why you're here
So who here uses bash on a regular basis?
Okay, any Z shell users?
Okay, fish
One, okay. Yeah, one cheer for fish one cheer for real on to you. Okay, fish got two chairs. All right. Has anybody used conch already?
All right
Okay, who here really likes bash?
That's okay. No, no, there's nothing to be ashamed about. There's an open question
We're not we're not here to know who here remembers the syntax for a for loop and bash that looking at stack overflow
Okay, no, no, some people can do that. That's totally cool
Who here remembers how to tokenize a non-whitespace string and bash without looking at stack overflow?
Both so I'll believe you. I'm not gonna I'm not gonna you know, call you out there. That's good. Okay
So while we get the slides everybody, I mean one of the things conscious for many things
Partially, it's the to suit our mad desires
But also it was a lot of these things which seem like they should be simple and easy to remember aren't
and a lot of us are dealing on our daily workflows with
Language decisions from the 70s which made a lot of sense
But maybe we don't like want there to be a difference between single and double quotes all the time or like maybe we don't want to have that many square brackets in a row
And so this is an effort to remove that pain because this should be a relatively
Seamless and sort of fun interaction and you should just be able to do the things you want to do without struggling through it
I think we probably can I don't have the slide link okay
Are people and mostly installed and ready to go have contra running
Cool, is anybody not have contra and that would be I guess the question to ask okay
We're still going to be talking for just a bit so and we can we can catch up as we go
Okay
Also just a quick tante check if you can run
Every time we say like the sound like co or something it's always gonna start with an X just a fair warning
So if you can run config, it's x o n f i g in your conch shell
That should probably not say what it says here
Maybe should say zero point nine point eight at the top just so we were sure we're on roughly speaking the right versions
I do have the link, but I don't know a good way to get it to you guys other than I'll just put it here
So if you want to follow along with the tutorial
You
Can go to this link so it's conch.github.io
sci-pi-2019-tutorial
Slash remote HTML. We're sorry about the URL. Yeah
Only a little sorry
But yeah, you can click along and follow so you can skip ahead in the slides or go back
There's some exercises and things like that and so
Bring that up now
Okay, I'll let you guys do that and then we'll
Do
Okay, that seems good. Yeah, great
Okay, so
Quickly just like an overview of just some things that you'll see us doing a lot
And you should also feel free to do while you're interacting with the shell
We don't have explicit slides about this because they're just sort of general overall
Like things you can do in a shell or in conch anyway
But if you see us do something like we obviously hit one key and something happens and you want to know what just happened
Please just ask us if it if it seemed like it came out of nowhere or we're not trying to make this opaque
So generally speaking there's tab completion. Oh, yes
Oh from the there's an there's an L right at the end. Yeah, so it wrapped a little
Yeah, I was getting well the directory doesn't have an index.html I can fix that in a moment, but
Yeah
Generally speaking this tab completion for almost everything so it'll save you time when you're typing
Beware of that
Does anyone not know what tab completion is? No, no shame
All right great
This will mean less for you at the beginning of the tutorial
There's a lot of history search functionality
You probably don't have much of a conch history at the moment
So that won't mean that much but there are several ways to search up
We'll kind of touch on those a little bit later control R as your friend that will kind of give you an anywhere
Line search back in your history if you start typing a command
You can press up and it will do a prefix search match
So like anything that's any line that started with that initial bit will show up in the results as you arrow up
And you'll see this sort of ghost text showing up if you're typing the same command this sort of a
History match autocomplete thing and you can just hit right arrow or I think control E to sort of expand out to that if you want
Don't worry about like taking all that in at once, but we'll come back to it
Yes for all the
Pythonic bits in conch and we'll find out what those are a little bit later
You can always append a question mark to a command and it will bring up a little help screen in the pager
Or you can do a double question mark for super help for even more if you've used ipython
Fair bit. This will maybe be a familiar pattern. Yes
I don't think there is one it's a UT guess and should just be an open wide open network
Yeah, is there another question over here?
I think we did discover that yeah
Okay
Yeah, okay, not gonna do that live we are gonna ask everyone about questions about that during the break so we can fix something
That wasn't working and that would be but that's good news awesome
Okay, are there any questions?
Okay
All right
So yeah, there's was that a question. No, all right
So everyone has conch working that can if you ran the sorry the config
Let me just go into the
Okay, so you should have been able to run the config command and see some output like this
So if is everyone kind of at that stage?
The cut oh, yeah, it's it's config with an X
You're gonna love that X key in the next four hours. All right
Okay, so we've got our agenda here
We'll be taking some breaks in between these things and we're gonna be building up to sort of greater and greater capability
Over the time. These are links. So if you have the slides up you can jump around if you want to
And there are exercises at the end of each little section. So
That's a gonna do the shuffle here
So
Conch is a superset of Python 3 so what that means is that all of the syntax that's in
Python is also valid conch, right?
So there's no so if you know Python
Pretty well or really well or extremely well everything should be familiar to you
And so you can do a bunch like basically everything that you would be able to do in Python, right?
Like to find classes functions modules etc
So we can go ahead and you know do these along with us like you know when they come up
So let's try some in the mount. Oh, these are our first exercises actually. So the the first one is to
compute the product of
two three and seven
the second one is to
Import numpy or import sys if you don't have happened to have numpy installed
And then also define a function you can do this all this right at the command line
You don't need to go anywhere else. You don't need to do this in a file. So
Try these out you can click on the details to get the answer
And we'll give you guys a couple of minutes to try this stuff out
And also be solving it very slowly in real time
I
Think you can go wow 42 what a what an auspicious number there
Can we import a module Gil yes wow that's that's pretty impressive
Oh
We're in real life we should be like yeah, yeah, sorry
No, I'll still in relay
Yeah
Sorry, I was in developer mode right there there we go
So you're saying yeah, you should see there's a lot of tab completions available
So if you import or I'll do sys actually too because that's one
You can just hit tab after the dot and those will be all of the attributes and modules that are available in sys. Yep
I forgot the last one the function
Does anyone have any problems or questions these
It's pretty simple right so this is just to prove to you that contrary is Python
Yes, yes you can well we will get to that question later
So Dhar Haas's question for those of you who are listening at home was can you define a function?
That's all a command on your system and the answer is yes
And we'll get to how all that resolves and works later so
Great question. Okay, and we'll get to it pretty soon. I think actually
So conscious of shell so conscious also a shell language
or more more precisely, it's really a scripting language that is
Mostly shlang compatible, which if you go back to like the 60s and 70s, you know, sh
Was this old or is a shell language that we all have inherited a la bash and and z shell and another and other languages like that
But unfortunately, it's actually impossible the syntax is
Collide and it's impossible to be both a Python and shlang compatible language
And so you have to kind of choose and in conch we have chosen that Python will always win
There's a couple reasons for this
but mostly it's that Python is the same language and
sh is not really sane in some ways like the splitting
Strings on non-whitespace characters and the machinery for how all that stuff works is kind of crazy if you dig into how the shlangs work
But Python always wins. So if you found a place where Python syntax isn't working
That is a bug
Please report that
Yeah, yes, sure. Just as an example of this this issues where so this is a command that you may be familiar with
But this is also a valid Python syntax if Alice and L are you know defined so
So
So the rule is is that if one of those things isn't defined it'll still function, right?
You can just delete the variables, but it is possible to overwrite those
Built-in names, and there's a way to escape that which will this is just a convenience, but that we'll get to in a bit here
So the purpose of the shell is to run commands obviously
And so we've got some commands here, right? So we just saw ls-l
Simple one. Yeah, please type you know type this out if you if you want just prove it to yourself
But this works you can do echo
You can make directories
And cd into those directories touch files
Do all the kinds of normal things that you
You would you would want to do so and I think I actually have all that test code here still but
And the other thing that you can do is you can pipe, right? So if you're
Familiar with piping from other shell languages you can take the output
From one command and and make that the input to another and so that all works normally like you would expect in conscious well
So and basically under under the covers. This is a horrible abuse of the sub-process module
As you would expect with a lot of fancy features added to it. So
Okay, so the next bit of kind of basic syntax in the language is our environment variables
So these function a little differently than other sh lengths, but similarly
So you can refer to any environment variable by prefixing a name with the dollar sign character
So if you want to look up right if you want to look up a variable in the environment
You can say dollar sign that variable name and then you'll get back the result
So right so then the environment is this like special namespace that processes use to communicate with each other and
Conch gives you access to that
And you can set and delete environment variables
More like you would do in Python then you would do in other
Shell languages, right? So these are just normal variables that happen to live in a special dictionary mapping somewhere
and so because of that you
Would set them with an equal sign and then you would delete them with the Dell operator. So
Shouldn't be anything
To out of the ordinary there anyone have any questions about that
Is there any difference between this an OS environment OS dot environment and the answer is yes
There's a lot. We'll get to that in a section coming up
No export is not a feature of
Conch or so exporting
So, okay, this is a little this is getting into the weeds a bit
But I think export is a is a bad idea. You shouldn't need to explicitly export things, right?
You're already doing that with the dollar sign, right?
So shlings when when you export or when you define an exported variable actually don't put the dollar sign
So we've collapsed those seven characters export plus space into just the dollar sign
They're well, they're not they're they're process-wide. Yeah, they go into the environment for the process
Oh, so dollar zero for those so the question is what about dollar zero
Dollar zero is how you refer to arguments or you get your the command that you run
We use dollar args for that when you're running a script. It's an environment variable
It's in the docs, which we'll have a link for very shortly. So
Okay, I just realized this screen. We're standing in front of it. Yeah. Yeah, okay, but we'll maybe fix that during the break
Okay, yeah, these pretty normal
The other thing that you can do is you can do environment very or environment look up with Python expressions
using dollar sign curly brace
So if you want to
Compute an environment variable
Arbitrarily you can you can use dollar sign curly brace. So this is a little different than how other languages do it
But for example say you have an x variable that equals a string in your namespace or your user
You can do dollar sign curly brace x and then that'll look up the user environment variable. So that looks up the name
oops
Sorry, I skipped ahead
bit and or if you want to compute it with some other some other expression
You can just stick that right in there
in
Most SH links. These are actually dollar sign and dollar sign curly brace are the same have effectively the same meaning
But they have distinct meanings here effectively. They're they're subtle differences. I know
But they're very different here
Okay
The source command so is everyone is everyone familiar with source and other languages like bash and things
Okay, yeah, so so if you're not what source does is source takes of
File that's written in that language. So if you're in bash
And you sort you can source a bash file and it will run the commands as if you had typed them into that
Session, so it's just a shortcut for executing everything in a file in in your current
Interpreter session
So conch the source command does roughly this does basically the same thing
It reads in the contents of a file
And then it executes them and it brings all the variable all the global variables and everything in the environment, etc
Into the current execution context
But of course this doesn't work on bash this works on conch code
So if you have a very simple
example file
Yeah, sorry. This is
Yeah, you can do that
So here what we have is we're setting an environment but variable in this file
We are setting a password which is a terrible thing to do
And then we're defining a function. Oh
You can install VAM right now if you want go for it
See if I care go just
Can't do that to your laptop, but it seems me. How do I do this? Oh, well, I mean we're talking about sharing passwords
I'll just say my my root password out right now. Yeah, okay
Yeah, so you can
You can then use this function and it's it's good
So basically what you do to use source is you just say source and then the file name
So here source example dot xsh and then
You'll see that that those variables that we had like
Dollar sign email are available as well as the combined function has been brought into your local exit or your current
Sessions execution context and you can you can run it
You can also import at dot xsh files as well
so if you want to write python modules as
As conch files, you're totally welcome to do that and you can import them even in other normal python projects
Not going to show that here, but if you're interested that's something you can do
Okay, any questions on source?
Pretty simple alright
The thing that you can't do in a lot of other languages that you can do in conch is that we have a notion of sourcing
Files from other shell languages that we call source foreign
so imagine you have
Some bash script somewhere and you want to bring that in and execute that in conch and bring all the things into your local
Execution context you're able to do that just by saying source bash and then the bash script
So if you've got a you know a hundred thousand lines of Z shell well one. I'm sorry and two
You can still use that so this is a way to integrate to slowly integrate
with other languages
Which is pretty cool actually so
It's pretty nice any and and by default sorry
We have a so source foreign is a generic infrastructure for doing this
But we have shortcuts for doing source bash source Z shell and also source command or cmd
So if you're on Windows using the Windows batch processing language you can source that stuff too
which is
madness, but I
Mean we've got a core Windows developer for the past four years who's like it works pretty well
I mean there's I imagine there's folks here using it on Windows right so are there any Windows users in the room
Okay, let it I mean who are on Windows right now
I
Think the biggest problems are usually just that our examples are very like Unixy
And so we say like run this command and it's like what command is that that's that's often the problem
Okay
Well, so we found with that like if you're on a base Windows install and you just install get bash
Then you get all the Unix commands and everything works normally and supposedly works really well on Windows subsystem for Linux
But I have not tested that
I
Mean you can we would be very happy for you to do
We may not be able to help if it goes wrong, but we'll try I
Saw another question over here. All right. Okay, so source foreign
Really nice capability really helpful, especially if you're just getting started
The other thing like most like most shell languages. We've got a configuration file that lives in home.contra rc
And this is just a particular
Special xsh file and that's loaded before basically everything else is loaded. So this is where you can stick all of your
Customizations
Mostly a lot of people just stick
environment variables in there
If you're a condi user conda as
Activate or whatever and it will throw some stuff in there as well
and
yeah, so
But basically if you want to read about all of the customizations, they're on there in the doc
So every every environment variable that we touch has documentation associated with it
And there's a lot of like tweaks that you can do a few if you need to
all right
So here's some more exercises
So let's go ahead and take a few minutes to do these
So the first one is to just set a random integer to the environment variable dollar sign secret
The next is to print the secret value
and
then
The third is to put a
Generating just some generating code for that secret value into your contrast see
When conch starts up if a dollar sign safe variable does not exist
So we'll give you guys a couple. We'll give you all a couple moments to
to try this out
And if anyone's having problems just raise your hands right now and and Gil and I will will walk around and help
The next thing that are for problem for part two. There's actually a couple different ways to do this
The first is that you could either echo that
So if you're thinking more in a shell language, you could echo that
You know my secret value is dollar sign secret as a string and that will all
All push out normally or if you're in more of a Python mode, you can just print it like you would print anything else
Okay
Both of those are totally valid
and then the last one is
If you wanted to this is getting cut off I guess but
This is why you have it on your own machines, too
You can say
In your contrast see you because it's Python you can import random because it's conch you can set the environment variable
To whatever random value and then oh we actually didn't cover this in text in this exercise, but
Because we've moved around some slides, but
We'll get back to that last one soon enough. So, okay, so very briefly
So remember how we said dollar sign?
Curly brace is an expression
You can you do look up by expression so
this
This dot dot dot in Python is the special is the syntax for the ellipsis object
So we use that numpy uses it, too
So we use that to be a reference to the environment itself
So if you do dollar sign curly brace dot dot dot you get back the environment object
Because dot dot dot is obviously not or an ellipsis is obviously not any environment variable
And it's a big mess
Which is why we didn't want to cover it this soon, but there it is and
Well, we will get back to it in a bit
Okay
So, yeah, the goal here is like because it's just a mapping you can test if if things are in the environment
Through through this self-lookup. Okay
Wow a break already that can't be right. No, probably not. Okay, so we're not gonna break. Yeah, because it's too early. I
Built up your hopes and then I'm just crushing them right now
crushing it. Yeah
Okay, so Gil's gonna take over for this next part
And maybe
I'm not gonna move this one. Yeah. Yeah, it's impossible
Okay, so
We've sort of looked at you can still run
Sort of a sub process command like a regular term a regular terminal command shell command and you can also run
Python, you know models and functions and you can sort of you know
set them to environment variables and then use that but
Where this really starts to come into play is when you want to be able to start mixing those two things together to sort of get
the best of both worlds
So the idea here is that in a lot of ways conscious makes up using sub process really really simple
Instead of trying to remember like we do set this like sub process type thing somewhere
And how are you gonna like parse the output and all that we just all that's being handled for you in sort of a more intuitive way
And we have a number of operators we've added to sort of help with this interaction between sort of sub process mode and Python mode
so the first of these is
dollar curly brace
Parentheses. Yes. Sorry. I do remember what keys are sort of
And what it does actually similar to bash is it captures the output of a command, but then it returns as it returns it as a string
And it really does return the whole string, right?
So, you know the output of LS has a bunch of line breaks in it
So there are a bunch of line breaks in the output what that means that if you print it you actually get what the output of that was
similarly it is a
It's a string right like a Python string
so if you type you know x dot and then hit tab or something or just
Like you have all of the Python string methods available to you
So if you wanted to split that say on new lines, which might be a useful thing to do with LS
Or you really like uppercase letters and you want to do that or however you want to
Mutate and parse and change that captured output all of
Python's built-in
Helpers are already there for you. You don't need to sit there and like try to write these things yourself
Okay, so the second is bang parenz
and
This does the same thing and then also other stuff
So what it actually is returning if you run a command with this is a command pipeline object
Which is a sort of a conch thing
And it includes the output of the command as well
But also a bunch of information about like like the PID of the process what the return code was
What the actual argument you ran was if it was an alias, what did it expand out to what are the starting stopping time stamps of that command?
and also
This object itself is truthy. So if the return code is a success then you can actually say like you know if
Bang this command, you know like print this command and if it if it's successful then that you can use that for control flow
So there's sort of a way to easily
Figure out like I tried to do this thing was successful. Yes, or no
What was the output if it was successful?
How long did it take like all of this is just available to you and sort of the the the command pipeline object that's returned I?
Think this is what I just said. Yeah, I
Didn't do it command, but that's okay. That's all right. Does anybody have any questions about those?
Yes, and some although in Python. It's a
Tilde yeah, yeah, yeah, that's right
So in in Python if you wanted to negate something you use not or tilde or till does it the invert operator, but yeah
Yeah
Okay
Okay, also so you can iterate over the output of these commands line by line in bang exclamation point. Yes
I
In enumerate LS and then print what does it have string?
And then just I and look
Probably should have stripped look, but that's that's okay. That's okay. We can do it next time. Yeah
For example, right, so the new lines are still in that look in that object that look object that ends up there
And this is streaming by the way
So that if you wanted to stream through your command, right if you've got output that's larger than memory
This is how you you'd use
Bang parentheses for for that. So
Also in the list of things that we may have not mentioned
There is this
Multi-line prompt thing that keeps happening that we've just sort of been using without mentioning
But yeah, so it's like in the same way that I Python functions. This is a
Full you can just keep you know as long as your you can either shift return to maintain like to force a new line
But you as long as the command isn't complete
It'll just keep adding a new line for you to type on two entries at the end will run the thing and then when you arrow up through
Your history it will load up the full command like the full command block for you
You don't need to like go and hit arrow up for each of those individual lines. You were doing right
So I just hit arrow up there once and I returned the whole input
So we just went over those are captured sub processes and then there are uncaptured sub processes
so here again, we're using a dollar sign and bang but this time using square braces and
They function the same way as the captured ones except they they don't capture and so the output of the command
Still goes through to the screen to standard out or standard error depending, but you can still capture that
metadata along with it
So in the case of
dollar sign square braces
It always returns none actually and so this is
More for
Forcing sub process mode where the context may be a little ambiguous
You want to say like don't try to interpret this as python just run this as a command instead
The bang
Bracket there
So the output gets streamed to standard out still so you see it and it would run as if you just ran the command regularly
But at the same time
Similar to the information from the capture sub process about the you know
Starting and stopping times the arguments that were passed in if it was successful or not all of that is returned
As a result of that
Operator so you can have the output still kind of like showing in front of you
But still be operating on sort of you know, what were the conditions of that command did it execute successfully?
Should I stop should I continue?
Right, so you get this rich command pipeline object back out that you can manipulate and this particular bit of syntax is
The thing that really underlies a lot of conch
So the what's actually happening. So if you just run LS here
What conch is doing is it's secretly adding in a bang square bracket around that LS?
That's it
Okay, right column type good. Oh, yeah
So now that we there I would suggest we just take a few moments and just to play with each of these a little bit to get a
Handle on them
This is basically the end of like new syntax that we're gonna introduce largely wait except for one big one coming up
But just to kind of get a sense like of how they work make sure that they match your expectations like you know
Which what should be captured what shouldn't be captured?
How do you interact with the attributes of these returned command pipeline objects? What is in there?
Is there something you would like to be in there? That's not we can talk
You can definitely work on that and just as a general
Mnemonic for this because it's you know bunch of stuff
I've sort of come up with like curly captures and square streams
And it's a bit misleading because it's all sort of streaming in one sense
But like if you want output to not show up use the curly things if you do want it to show up use the square things
Does does anyone have any questions about this stuff, you know, we just threw a lot at you yeah back there
The last one
Almost so bang square bracket prints it but
Does save it to the variable and then bang Kurt bang parentheses
Prince it, but then doesn't save it to the variable. I
Know yeah, so
Basically what what's going on here is that?
Dollar sign
parentheses
Returns a string right it doesn't print it, but if we wanted to stream that so we use bang. What should that return?
Sorry, yeah, so what should that return?
None right because
No, it's not
Did I do something wrong? Yeah, what did I do?
No, not all it's not
No, it's still maybe it's that it's like when you do a sign
No, that's still the thing so oh no, sorry, haha I did this wrong
Yeah
So if you do dollar sign if you change these two square brackets because you want to stream the square brackets kind of look like pipes
That should return none rather than a string because there's no there's nothing to return
You're already
This this the coat the output that's coming in has already already been consumed and printed
And so it's been streamed and there's nothing left to return
the
Which is why you see like because we did this is none we actually got this we got this true printed behind us
Even because the the command actually printed right we didn't capture it
if you wanted to
capture it
Or if you wanted to do you know bang
Parentheses the bang is what gives you the object back
And whether it's streaming or not is determined based on whether it's square brackets or not
Yeah, so so the way to think about this is dollar sign return strings
and
bang will return
Something else and then square brackets or in parentheses will capture and square brackets will stream
90 yeah
There is there is functionally no difference between bang with square brackets and bang with
And and just typing the LS command
Except in ambiguous cases
so in cases where you have both a Python function and a
System command with the same name or a Python variable and a system command with the same name like say I just said
echo equals Wow or something right if I now went to run like echo
Hello world
Well that'll work because the syntax is not ambiguous, but like let's say I went to write like
echo
like
dash
What's another echo minus echo for example
Which would be torque totally?
Normal well, okay that but we would want to print minus echo right in a normal in a normal shell
But both of these are variables, and so if you need to you can always explicitly put it in bang square brackets
And then it'll run
Yeah, so there's two things going on here, so or there's one thing going on here one or two so there's
If you're observing it there are two and then yeah, it's it's complicated
Basically, what's happening is there's a formal conch language that always uses bang square bracket
Okay, and then we have
What we call?
So there's a context free grammar that we use that always uses the square brackets
Then we do this context aware
Grammar munging so we know because we know what's on your what commands are available and what your
Execution context is we can shoot we actually go back and rewrite the AST of your code
In such a way that we think it will execute
Before we try to execute it
And that's what's going on
And so if you need to you can always go to the formal grammar and you can even turn that off
In the in the exact we're definitely not doing that in this tutorial, but you can turn that off and make sure it's always formal
That's a terrible way to live because you always have to type this bang exclamation point
The whole idea behind conscious to make the things as easy as possible and match what your brain thinks it should be doing
Like your brain thinks, you know ls-l should be a command and it just because that's not a python variable
Doesn't mean it shouldn't be a it shouldn't be something that works
And so we have a lot of like heuristics that are relatively simple that get get you incredibly far
And but if those heuristics fail for some reason which they are they it's very very infrequent
You can always go back to the formal grammar
so
But
Yeah, I should maybe say curves cat mnemonics are hard
So so the curly braces are for like with the dollar curly braces for like an environment lookup or for accessing the environment
Whereas these are more just generally capturing a command that you're running and capturing the output of it
Right so this looks up a variable in the environment
Yeah, rather than yeah rather than
Running a command so yeah
Okay, so so the question so the question is what what's going on here, so you're saying ls equals
So if you say ls equals one here, okay, and then you say ls
Mot you then you were saying ls
Uh-huh
Right, so why does this happen well this happens because l is not a variable in your python context
If you just do ls, and then we dot it right this is a
LS itself is just the integer one
Right the the the the bang square brackets are capturing the whole thing
So yeah, so if I set l equal to one and I do ls minus l you'll get zero because they're both variables
Python always wins right so the Python invite the Python context always wins
Yeah, your system is whatever
Okay
Having thoroughly confused everyone I think now we can just take a few minutes for people just to play around with these a
Little more get a sense of what's capturing and what's not what comes back from these commands of what's returned and what's printed
Just to build up a little familiarity with it
And then we'll continue on and feel free to raise hands and we can either circulate and just answer from the podium
And we could fix this curly captures thing from yeah mnemonics
Is anyone having issues with their system still or installing or anything?
Yeah, or do you want me to come over?
Just really quickly we had a question about for people who have used vi mode in terminals or in shelves before and want to do that
You can do that. You just need to set vi mode equals true
Yeah, and then you can bounce around your current line using you know zero g whatever
Yep, and then we'll just load it by default
Yeah
All right, so I think gil you want to take it away. I will take it away. Are there any lingering questions from our our personal explorations?
Great you can also ask us later. That's fine. Yeah, that's totally yeah
So the I think this is really the last bit of new syntax we're going to introduce but I could be wrong
I'm wrong, but for a while it'll be fine
So this is the the Python mode operator
So we've been talking for the last bit about how you
Kind of capture
Subprocess output and then you know turned into you like a Python string of this command pipeline object
And then how you can play around with it and inspect it and do things with it
but
The
The at-paran operator lets you go the other way it lets you insert things from your Python sort of scope or environment into a
sub-process command
So what we mean is generally
Conscious like parsing is pretty clever at this stuff
So if you give it for instance this command like for
Something in range to and then just run echo high underneath that it will do the right thing right you can put your
Like echo or LS or whatever
Subprocess command you want in the body of a for loop and it will just execute as many times you tell it to do and you don't need
To do anything special that actually just works
right
What does not just work is?
If you do this
So you want to instead you know iterate over the value in the for loop and have it be printed
You just get I twice right so because it runs that command twice
And so what the at parentheses operator does it lets you
Capture that Python variable and insert it into that command
So what it does it what's actually doing is it's it's evaluating an arbitrary Python expression and then returning that value as a string
And that can be fed into the sub-process command in this case echo
And if the output is not a string in case of like lists or sets it just gets joined and returned as a string
So that's what that well, so it's a little different than that actually
Sorry to want want want
each
Element of the string is actually getting passed in as its own argument to the command
So each of these are their own command arguments
So and it's just that echo happens to join them together
So
Yeah, thanks for closing the door we're gonna close not a good idea
I
Any questions about this syntax or what it's doing
Yeah
Yeah, so like if we did LS LS would try to search for all of these
Files individually. Yeah, it's running it for for each. Yeah, cuz LS takes a
big argument list like that
If it's iterable and not a string
Right, yeah the normal way
Yes
Right
That's what LS does yeah, yeah
It's just passing each Python thing in as its own each element of the putt list is its own argument or tuple or whatever
Yes, exactly, it's a it's essentially echo zero one two or echo, you know or LS zero one two
Yeah
Okay, yeah, so if the result of the operator two is in the first position it gets treated as an alias
So you can actually have this execute commands
Probably like not something don't do this mine. I guess it's a really bad pattern, but it does that
Right, but this is the this is different because if you I've got a my
My trace back printing on but you can see
If you try to just print this
Or if you try to run it without splitting that is treated as the command the name of the command spaces included
And so then it can't find the command cuz hello
Commit hello there echo. Hello. There is not a valid command
Okay
Okay
Your promise for more syntax is already broken. You should just stop. I'm gonna stop saying it now
So with apologies
So you can wrap a regular expression in back ticks
And what it will do is return a list of every file or you know thing in that in a directory that matches that regular expression as a list
And it's a Python list which means you can
iterate over it you can you know like stick it in
List comprehension and you know like mutate all the names
And you can actually do even more stuff with these things as you kind of go along
If you're about yes
It's the Python rejects. Yeah, yeah, it's just the re module
Yeah, just a handy way to get into re.compile
Yeah
No, no, these are not globs
Dot dot star is a rejects a
Glob would just be star
Yeah, anything and so we could maybe a better example would be what's a
Okay, so we've got some pings in here right so like what if we wanted to if we wanted to like grab I
Guess we don't have a lot with anything
With I want I want png's that have the letter zero letter o and them. Yeah, so like that's right. Yeah, so do
dot star oh
Dot star dot slash dot png
But also regular expressions are hard so if you if you wanted to use globs, let's just say somebody had mentioned that
Then you can prefix the back ticks the G
And then it is glob matching so you don't need to do the dot thing that's just you know like star dot md star dot png
Star whatever and as an extra special bonus in Python, I think three six and above
this supports recursive globing the way that
Then the glob lever it does so if you do like a star star slash star dot md
That will recursively glob through the entire directory structure from where you are and find every single markdown file in that whole chunk
This can take a long time like beat like use this
You know like if you don't find it your route and it takes forever like same thing
But it's really really handy for finding all the sort of files or patterns matching something in a in a large area
Any questions on
Yeah, so um we can't we can't oh so the question is like
What are the use cases that led us to create all these things and just as a as a as a general like contra creation story?
Almost everything in here is something we were like, you know what we really need to do thing
We need to do today is this thing and then we did that so they they were all created from actual and us and other
Contributors people who are like I really need this to do thing X
And then what we discovered along the ways that a lot of it tied in together really well without it without us having to do anything extra
We'll come up on some of that stuff around the way some of the string matching and string literals work
So like one thing I just showed for the globs in particular right like being able to loop through a globb list is
With this syntax is a lot nicer. Yeah, right. Yeah
Yeah
Between
So yeah, so the the question is about trading off between Python module CLI and writing something in conch for me
It's a really about how much your hammering sub process. So if you're interacting with sub process a lot
Like do not write it in a Python CLA right write it in conch
If you want some of these extra fancy features
Like you really just want to be able to glob
Tick things like very quickly or you want to like search through whatever then like do you know do it in conch as well?
That that's my kind of
We'll see some other syntax later where there's conch specific things
But at this point it's kind of like if you're doing a ton of like
basically scripting
You know
Like then you should be using conch because it's actually meant as a scripting language unlike Python
Oh, yeah, yeah, yeah, well we can talk about those afterwards
Yeah, yeah, for sure first for people who work at a certain institution. They can also use all my internal ones just saying
Sorry, everyone else. I'll show you other things, but um, yeah
Tom I think you're next
Some
Yes, yep, so the question is can you import conch code and use some of this stuff in Python?
So we don't have an
Yes, if we haven't we have we don't have that particular use case lined out so much but
I would say there are two things there. So one we have a
Quote-unquote standard library where we have sort of
Extensions and updates to standard library things to make it easier so you can do like import conch.lib.os
And you get some like like you get a remove tree that actually works on all platforms and
You get like if you do like some process you get a version of run that uses our thing and returns the command pipeline object
And you can also just get an executor back
And then you can like like you would run conch code and you're like you would run Python code through a normal like
Exact thing and you can do that that might not be what you want exactly
But I like the way your brain is thinking so maybe we should talk more about that
afterwards, yeah, so
And there was another question back there. I think yeah
Yeah, in regex if right, so it's just a normal
You just have to do
Right, like say let me just go back to my home directory. So the question is about
How do you get your dot files with a regex? Well, you just use backslash dot, which is the regex
The regex escape character for the dot character. So the oops, let me go back up and show you
Apparently I've got a lot of configuration
So you would do
Don't tell anyone
Yeah, I'm secretly a bash user
The so you do backslash dot and then dot star
To match anything right so the the backslash dot is a literal period
So I would argue that it's more sane than a lot so the question is about history
How does conch deal with multi-terminal history so conch sort of cribs from the Jupiter playbook a bit so
By default all of your history is stored per session in a JSON file in
the standard like
Configuration location so you can go back and get each sessions history and then the terminal application itself
Will present that to you in whatever nice way it needs to you can also switch to a sequel light history back end
if you want to store a sequel light
there is
Tons of there's basically as much metadata as you want in the in the history and that's very configurable through environment variables
Not going to go through that right now
But I was like that was the thing that that sold me unconsciously was like I was trying to figure out how I'd compile the certain version of
Petsy and I couldn't remember which environment variables
I had set when I ran the thing and like you can't figure it out you look at your back history like well
It was one of these seven because it and then you know you do this in contra like oh it was this term
It was this session when I ran this thing in the tests past those are all the environment variables
I need because they're just in one self-contained file
Did you have a question over here?
Yes, if you run source bash you'll get the aliases from that with one caveat
You might have actually seen this pop up on the screen
Which is that if there are there are collisions in certain aliases and also there are things the z-shell
Especially does is they have like their own built-ins and if the alias refers to those built-ins
We don't pull them in because it'll just break when you try to run it because it's gonna look for a command that doesn't exist
There's I think there's some experimental some yeah, some people have done that
But yeah, I don't use it. So but yeah, there are people who do that. We're happy to help try to figure that out though
Well, I am anyway
Okay, move on but
So
Next up this is not new syntax for contrary way, but it's Python. So
Formatted string literals are great
And they're part of Python, which means if you are running punch on Python three six or higher, which you should be
Then they just work
And they're really fantastic if you haven't played with these
I think they're like they're my favorites like simple thing that should have always been there. I think I really enjoy them
And yeah, the way they work if you have a
Variable defined then instead of doing a dot format or doing like the you know parentheses, you know argument
You can just have a string pre-pended with an F
You wrap curly braces around the variable and it just gets evaluated at you know at that time and then prints the results
So it's very handy
There
We also have a thing that is not in play on which is called a path string literal
and this
If you prepend a string with a P and then you have a quote what it returns is a path lib path object of
The string that's there. So for instance, if you were I went the wrong way if you do like path equals
Thing
You got a you know on on Linux you got a posix path on Windows you got something else
But it's just using path live under the hood so it'll work
If you save that to a thing you can also then use tab completion on this object
Like check does that folder exist or not?
You could then create that folder or I mean path. This is just using path. The path is great
But we have this sort of shortcut syntax to get into it
Oh, and I'll get there just a little great thing about path lib is that you can do
path joining using the they out overloaded the division operator for this so you just do like
Path of object divided by thing and it does the join correctly depending on the underlying operating system
So it takes like all of that deep pain out of like trying to get stuff to work on windows and Linux at the same time
Yeah
So there are f strings from python we've added p strings the the natural question is what what does a pf string look like?
And it looks like awesome is what it looks like so you can define variables
um
and then
you can
Say pf
And then a string and then you can treat it like an f string in the sense that you can put curly braces
And it will fill in the value of those variables in the string
But it's also saying this should be a path lib path so it returns you a path lib path of the result of the f string
If you have ever done a lot of painful dev ops this just might seem appealing in some way
um
And the other really handy thing here is uh that the environment variables
They are also python objects
So you can evaluate those in f strings, which means you can evaluate those in pf strings
Which means you can start chaining together environment variables and other values and other things to sort of construct
Paths and folders and file locations
Programmatically and then once you have the path lib thing you can start saying does this exist great if not touch it like now add
It over here and now move it over here. No do this thing and all of these things will be
Cross-platform because uh, it's just using path lib under the hood
So it doesn't you know, you don't have to worry about which slash you're using or what's being escaped appropriately
Yeah, hopefully um any questions on this stuff
Not too bad, okay
okay
So, uh, we have a couple of exercises here the first one is to look up the absolute file path of every markdown file and the tutorial repo
Just you know, you can use whatever you want. You can use bash if you want to too. That's fine. Um
But pf strings and glob ticks are probably your friends here
um, and then um
A phone here is uh to load up a dictionary of every conda package you have installed in your current environment
If you're not using conda you can just skip this one. That's okay
If you have a questions, of course, just ask us and we'll come around
Yeah, so load it up as a python dictionary
Well
The hint is important. Yeah, I run that conda list json command and then I would go from there. Yeah
All right
Okay, well then I think we'll go on to the next section, which is the environment
Um, so we um, we touched on this earlier just for a moment
But this will be a little more of what's going on and what you can do with it
um, so the uh environment actually lives in
Dunder conch dot env that's the everything in in conch is living in this dunder conch thing
Like that's where all of the the various bits and pieces are if you want to explore and play around. It's all in there. Um,
but uh
The um
The dollar curly brace ellipsis is the is a shortcut to that that object
So you don't have to always just type dunder conch dot em to get there
um
As we mentioned earlier just ready you can check for membership in the environment just using, you know string in
environment
And you can also ask for help for environment variables. So there are a lot of environment a lot of different modes and
Kind of extras are enabled via environment variable
So if you know the name of the environment variable you see it they all have default values
So if you see something that is in your environment, you're like, what is auto cd and why is it false?
You can ask for help and it will tell you
That if you turn it on then you can just type the name of directory and if it exists
It'll just cd into it without you having to type cd
Um
Huh
Yeah, the help is a method. Yeah, help is method
Yeah, and also they the docs will tell you if something's configured a month. There are a few environment variables that you are not allowed to configure
So we don't let you
um, so
Also something that's very different from uh bashland here
Is that um
Contra environment variables are python objects. Um, and that also means that they're typed
You can begin of arguments about typing in python, but not now, please
But they do all have types and um, sometimes those types are actually imposed based on a variable name
Particularly and the important ones or anything that ends with path
Is going to automatically be converted into what's called an end path
And if you've ever had the scenario, let's just we can we can do a show of hands or not
But where you've like sourced your bash rc twice
And now your path is your entire path and then your entire path and then something else again
Wow, we've got four. Wow. Wow. That's just not even the
That was that that was a raised hand. Yeah, so we've we've all
Many of us have been have been in this pain place before that's terrible
So in conch that is not this is not a colon delimited string and which comes back to how do you split a non white space delimited string?
Anyway, um, you don't because that's terrible
But so path is an end path
Which just means that it's a it's a list of the items on your path
But this acts like a list which means you can do things like pop individual elements at arbitrary positions out of the path
Or you can insert directories into arbitrary positions in the path
Which is great
Really really great
Yeah
No, it's just so just in this if you're if you're mutating your path in your session here
It it will last for that session until you exit out
It won't like also it will not like translate like a separate terminal into you have open
Those are going to be totally separate if you want the question is if you start conch
When you play the path and then exit it you're backing the root bash show
Yes, yeah, yeah, but if you so if you wanted to do path manipulation for all of conch you would put that in your conch RC
No, because why are you launching conch from bash just that is your
I mean that that's the real answer, but the
the reason you can't do that is
Uh, it has to do with how processes communicate. And so if you want to push
Environment variables into a parent process
The parent process has to source
Something coming from the child
And so you have to be able to source
Like you would have to get conch to dump out the environment in a way that like bash or something could source
Again
So so we do that. Yeah, yeah, so you okay, so
Maybe there's a solution for you. It'll be ugly, but it'll work. Maybe you find out
Yeah, yeah all this all sub processes get this path
Well, sorry the question is is how are you the question is how are you supposed to start conch?
So there's there's basically two ways to do it maybe three
I'm going to say two one is you open a terminal
It's running some like 1970s piece of software doesn't work really well
And then you type conch and then you're in something better and newer
The other thing is depending on your on your operating system of choice
You can just have it start as your default shell on linux
This means adding it to etsy shells and then setting it on if using i-term
You can actually just have a profile that launch that you can say like
I want you to launch this executable when I open a terminal or this profile
Yeah, basically any terminal emulator in the unix land will let you set the the launch program
So you just set that to conch
Or you change your etsy shadow or you change your etsy shadow if you want it to be a true login shell, which conch can be
So yeah, it's in conch back there's docs there also there are docs on that on the website
So if you really there's platform specific doc, so if you want to go look up that you can see that
It's right in the at the very top
So the paths are n paths are back environment stuff other variables are booleans other ints
Whatever they are like when you grab that environment variable in conch it will be its true type, you know, it'll tell you that
That said if you need to like some some subprosk man's require
You know these things to be fed to them as strings and so conch does that for you
And by de typing it and you can also explicitly request these de typed things
So you're asking like how do you manipulate your path and then do it you could
I mean
Like de type it
overwrite your bash rc exit out and then source again
that would be
Moderately terrible, but it would work as long as it was an absolute path and you weren't like recursively sourcing it would probably work. Yeah
Yeah, you can also do de type get back
Yeah, and so that will depending on what it should look like
In the base environment will do you know give back zeros or ones not trues and
Paths get get turned into colon delimited strings
Yeah
There's a couple of other handy methods on the environment itself
In particular one that's very handy is swap
And so what swap does is what swap does with
In general actually, but so you can swap in a new value
It basically overwrite something and it's a context manager
So only for that block of the context manager
You can mutate certain elements of your environment and then they will get undone as soon as you are out of the context manager
Like
That
Then
If we try to access this down here
It doesn't work because some of our has been removed from the environment
So this is really useful for like
Temporarily modifying your path or temporarily entering like a new in
A new context that you need to run something in like say you want to switch between a million versions of CUDA for some reason
Like this is a way to no one would ever do that. No one would ever do that
Come see my tutorial tomorrow
Okay, yes
So
The answer is both yes and no so we don't have a particular syntax for doing that yet because that
Turns out to be pretty complicated in some edge cases that we'd like to work in conch that don't work in bash
But that's a whole separate thing, but you can always run commands through nv. So if you wanted to do
nv sum var
You know
Equals 10
echo
Sum var
Uh, well actually that so that doesn't work in bash either. I think is the thing
Yeah, that's one of those that this is one of the things that doesn't work in bash that we would like to
Have work in conch and so this is why this uh
This is why this like we really want that to work and and that the fact that that doesn't work is why we have
Swap and other things, but if you wanted to set other environment variables and things like that you can
Uh
In bash, I mean well, yeah, so that's a different line
Right, so export will export it to everyone and then you have to unset it
Which is annoying
Uh, if you want to remove it afterwards, right?
Yeah, so that's what swap gets you. Yeah, but
Uh, yeah
Yeah, yeah, you could you could star star keyword arcs into that. Oh, definitely
That's there
Okay, so we have a few more exercises here using this stuff
Um, these are things that I'll say like I I both do on a regular basis like these are these are true life examples
um, so one is um use get pass to
Temporarily set your password and environment variable
So this is actually so far as I can tell the only way to securely type your password into a terminal session without it ever being
Saved anywhere like including in your terminal history
um
and uh the second exercise is this also happens to me a lot which is like if you're um native like package manager
Uh, it doesn't like uh like con to curl and keeps like yelling at you because like there's some sham is match
um
You just want to run an install command and just for that one install command pop
Like the front element of your path off, but you don't want to mutate your path forever
You just want to do that this one thing. So just you know temporarily mutate your path run some command and then return it
I'll give you guys a few minutes. We can circle around answer questions
All right, so
Before we move on any questions on the previous stuff now that breaks over
Uh anything all right, so the next section we're going to be talking about what we call callable aliases
so
um
Callable aliases are basically a way for python functions or python callables and sub processes to exchange code
um
In a more integrated way than what we've seen through sort of the at operator and some of these other
uh
Curvy brace or curvy. I forget the mnemonic. This is curvy curvy captures. That's right. Um
So we're going to be building up sort of data pipelines in a more uh in a more integrated fashion
um
And basically what callable aliases allow us to do is run any python function as a sub process command
um
It's not any python function really uh because it requires a certain set of known signatures
But assuming you adhere to that
And we're going to be going through what those are uh, then you'll you'll be able to run them. So
Uh, they're callables right so that part makes sense
They're aliases because they get stuck in what's called the aliases dictionary or the alias is mapping
So this is something that gets shoved into built-ins as well
Um, and it's just a mapping between all the possible different
aliases that exist
If you're familiar with other shells, you sort of know what an aliases, right?
So and if you're not, uh, you'll see it's just another way to look up commands
It's another dictionary to look up commands in uh, does this need to be plugged in? No, okay. All right
um
so
The first function signature is just an empty function signature
So and it can return either a string
Or in an integer return code where you know zero means success and everything else means various degrees of failure
So you can do this with a lambda if you want
So go ahead and type this out. So if you say aliases, you know
set item banana
Equals lambda with no arguments and then banana for scale new line
You can then run the banana command
That is it. That's the essence of callable aliases
And that that should just work
Yes, so as tom caswell, i'm going to say his name out loud
tom caswell says this is
Lambda for your shell server server server lists for yourself shell
I'm going to misquote him shamelessly
as as well so
Okay, matplotlib matplotlib. That's right. Yeah, as long as we're mispronouncing things. I think
Okay, so you can pipe this into any other command. So the wc command counts characters and lines and words
So if you pass the dash w flag that means to count the words
Um based on white space
So you can say banana pipe wc dash w and that'll tell you that the output of the banana command has three
Three, uh, three words in it, right?
and if if you think about what what it would take to do this in
in using sub process with
streaming data in and out this is
Doing a lot behind the cover under the covers to make all of this work for you
But it feels pretty natural
Right, because it's just a command just a python function. You're running as a command in sub process mode
Um, and of course if you want to get rid of that aliases alias because you don't like bananas
Um, you can delete that alias in the same way that you would delete any other item out of the dictionary
Any questions? Yes?
So
Swap is for environments and aliases is a totally different mapping. Yeah, uh, having a swap is not a bad idea though
Please open an issue
There's a banana command on the boondoo. I did not know that there was a banana command on boss. I don't know
What are you doing?
Where do they live?
Where do where do what?
Yeah, so aliases live in their own dictionary that gets shoved or
Unfortunately aliased uh into built-ins
So we're not really in this tutorial talking about how conch does all these tying of things together under the covers
But in built-ins, there's an aliases dictionary that you can access at any time
Yeah, and that allows it to persist so you can modify aliases or add these commands in your conch RC, and then they all live
indefinitely
okay
Uh, the next is that you can take a single argument which is
Uh, the command line arguments
So like sys.rdv if you're familiar with that
Um, and it's it comes in as a list of strings. So if you provide
one argument
That's called it. It's typically called args. Then you can take command line parameters. So here's an apple function
which takes
Takes an args it'll look at it and it'll say
Is my args list of length one?
And do one thing and if and succeed return zero right because you can return the return code from these functions
And if not, um, it'll uh, and otherwise it'll return one
so
um, yep, and then
uh
And just showing off another bit of syntax if you use this with the at
Python mode operator you can you don't even need to stick this in aliases
You can just call it directly because it's a python object. So if you put the command the function
at parentheses function as the first argument
And then pass in a some command line arguments after that it'll read it in
Any questions on how this works
Any callable will work
Callable classes are are yes
Yes, go callable classes. Yeah, this is not limited to
functions and and uh, and lambdas and things
okay
Yeah, and of course there's a formatting bug, but that's whatever
Yeah
Sure
Yeah, so the question is would would you just want this to live in your
Your conch execution context the python execution context or would you want this to live in aliases specifically like you might do in bash?
um
Oftentimes you just you stick them into the aliases dictionary like you do in bash because it's easier to call them
It's simpler to call them
It's kind of that's kind of the where what that's there for and where it lives
If for some reason you don't want to have it
There and you just want it to have it have it in your execution context. That's fine. That's fine, too
Yeah
All right
Okay, so let's uh move on
so
The in the next case you can provide
In sequential order
Any of standard in standard
Out and standard error
And these are keyword arguments and they default to none right you may not have one of those streams although usually you have standard in
So those come
Immediately following the arguments parameter. So here we've got a grape function
Or an underscore grape function. This is actually the most common pattern is you have pattern. Sorry. So you have the function
Name preceded by an underscore
And then you put that into
The aliases dictionary without the underscore
And basically what these do is these give you file like handles
For standard in standard out and standard error. So if these are present you can access them and do whatever you would do normally
with those those handles so
We do some contact switching under the covers too. So like if you just
write to sys.standard in or sys.standard error, etc. That that works as well, but
it's usually better and and
To write directly to those file handles. So here
If you wanted to implement something that's streaming but not asynchronous
You would do four line in standard in you'd be reading lines from standard in and then we'd be writing them out
Write back out to standard out lowering them as we go
Okay
Yep
The underscore pattern is there because
When you source
You don't get under you don't get the underscore variables in your execution context
Those don't get brought in automatically. So
It's a way of hiding things from your execution context if you don't want to pollute the namespace that you're just working in all the time
Yeah
Okay, so usage here we go. So this takes a standard in and kind of needs it because we didn't check if it was none here
so if we spell
echo wrath
with
And then pipe that to our grape command
It will lowercase that and write it back out
This makes sense to everybody
right so the the
standard
The output of echo wrath becomes the standard in of the grape function
Which then operates and then writes back out to what is our our terminals standard out
Because that the grape is being called last in the pipeline
Okay, um, you can use any of these but if if if you want to use standard error, you have to use standard in and standard out
Yeah, that's about it
Okay, whoops. Yeah, so
Next up is you can also get a handle or a
reference to
The command specification. So this is a specific object that the command pipeline also has access to it's it's basically how conch
Thinks you should be running the command. It's how the command pipeline got set up for that particular sub command
Um, so this is a rich python object
You can go look at the api if you want to but it it effectively contains all the metadata about how you should be running that command
Um, including what goes in what goes out. So that'll come in
after the standard in standard out and standard error
um
And you can do kind of like funny things here. So one of the things you can do is you can you can use this for is you can check
whether
the
Command is meant to be in a captured sub process so that we talked about that before so you can check to see like
Am I running this in a captured sub process or not?
So this is particularly useful if you want to know if you're connected to a live terminal or not
Or if you want to like this is actually used in the witch command pretty frequently
Where you don't want to append a new line if you're capturing it
If you're just printing it out to the screen, you want the new line to be there because you want everything to look nice
but otherwise
You don't want the new line to be there. So
Um, and you can import part of conch to to do this check for you if it uh, if that makes it easier
And
Here's just our kiwi and this will have output that looks sort of like this. So if we just run the kiwi command
Yep
And then end equals end, but you didn't close the code. Yeah
And then
Yeah, so if you just run the kiwi command on its own in an uncaptured way
It will produce the new line in the extra text and if you
Capture the kiwi command then it doesn't actually have the new line in it
Okay
Any any questions on this or use cases?
Yeah
All right, so let's uh, let's move on
um, so the last form of these functions is uh
You can get back
the
stack frame of the call site of the alias
So if you need to know
the locals and global variables
Where the sub process command was being called from
You get back the the stack for that if you don't understand what this means
Like don't worry about it. You definitely don't need it, but if you do this is like a ridiculous tool
um, so please stack responsibly
But uh, it it is something that's like
You know, we don't need to necessarily dive into this
But it is occasionally useful to know what you're what the variables are
Around where you're being where the the sub process is being called
Um and conch does that tying in for you automatically
Any questions on this
I know this is this one in particular is a little wacky
Okay, so we've got some more exercises. Um, they're all related
Uh, which is nice
So the first exercise is to write a callable alias
which just pulls down the contents of frankenstein
And uh writes them out to the screen. So if you look at that link, it's basically the project Gutenberg link
Um, and so you can just copy that and and provide an alias that prints out frankenstein to the screen
grabbed from the internet
Or you can grab it and then print it out however you want
um
The next is to write an alias that calls upper on the standard input and returns that as output
Uh, the next one is to write an alias that returns all of the unique
Sorted words coming from standard in
um
The next one after that is to write an alias that counts the number of white space separated tokens read from standard in
And then finally the combine all of those into to a single command pipeline that executes
And we will definitely walk around and help or you can look at the the details
um
Each of these is can't is basically a one liner. So don't overthink it
But it's okay to overthink it if it gets the job done. I think that's fully qualified
Okay, so
um
So for the first one if you
Uh, you don't need to use python necessarily
To to do this so much you can just set set an alias to frankenstein that is a
lambda
That calls curl or w getter whatever on that url and that will grab
That url that we listed just straight away. So if you're using requests or something you you can definitely do that
That's totally fine, but you don't need to so you can use a command here
um
Yeah
So if you're getting stuck on that that's that's there
And then yep, I'm sorry. All right, I'll come over so or but we should uh, should we do the second one too?
Yeah
So for the second one
If you want an upper
All you have to do is take both args and standard in
Just read everything from standard in
And then call which is a string and then return
The upper of that string you could also do it in this streaming version
Where you have lines that you're reading from and then writing them back out to standard out
It's a little more complicated. You don't really need to do that
So for the third example
um, or the third exercise here, we do something
pretty similar where
um to the other where we want to count of words
um, so the way that you do this is you read from standard in
um, and then you
Split those split based on the white space, right? We're all pretty familiar with that
Um, if you want the unique, right? So that'll give you this big word list in order
If you want to unique that you call set around it to get the unique words
And then if you want them sorted you call sort it around that and then you join based on new lines
So that you output a string again, and that's the uh, that's the thing that you return
It's kind of a lot of parentheses, but it gets the job done in one line
You could do it in more lines if you wanted to clean it up like we did in some of the other examples
But there's no need here
Do we have the we don't have these loaded in or you do okay. Oh, yeah
Oh, nope. Okay
That's probably in that. Yeah
So for example, if you ran thus it's not perfect, right? Because this is text processing, but um
There it is
Um, then for the fourth example or fourth exercise
If you wanted to count the length of that thing coming in you'd have to basically do the same thing, right?
So here you'd you'd read it in you'd split based on white space again
And then instead of calling set or something else you call length
Uh, which returns an integer you don't want that integer to be the return code
So you have to convert it to a string add a new line
And uh, and then you go from there
So that's how you do or you can do wc dot dash out because
reasons
You could also do that that'd be a better example here
You could do that in the alias. Yeah, you could run
Yeah, that's the simplest form of the alias really
And
Then pull down frankenstein
Oh, I think we just did
We really love this frankenstein
How did you do
Maybe
Thank you mic mccarty
All right, um, let's do it though. Yeah, do it the right way. Um, what was it upper? I'll let you do this and then
We'll uh, we'll debug that later
Oops, sorry you want the yeah, it's just words and then count
The real count and then the point here is that you can
Merge all of these together in a single command pipeline, uh that executes so
Okay, any uh, any questions on this
All right, so that's uh
Let's if there's no questions on how this works or what it uses we'll move on not a break because we're doing breaks differently
Um, and our next topic will be events which uh, so switch with y'all
Okay, so um
Uh an event is um, it's hard to actually describe
An event I discovered this um, but um, it's it's uh, it's a trigger that you can fire and then um, if
You have something that's set up to listen to that firing which we would call a handler
It will then execute that thing
That is a horrible
vague description
But is uh, I think we'll be a little clearer when we actually go through an example
I'll just say the events a system in cons was written by one of our
Contributors jimmy bliss and is just an incredible piece of work and I can say that because I had nothing to do with it
It's really incredibly powerful
um, and lets you do a lot of really interesting things if you want to
Like introspect your code or have all sorts of things happen in response to all kinds of events. You can really start to um
Do some very uh interesting clever and powerful things here
Right, so I said this um
A handler is just a function that is called when an event is fired
So something says event this kind of event fires any handler that is attached to that event will then be run
And you can have as many handlers as you want on a given event
So several functions can be executed in response to something just happening somewhere
Okay, so one of the events um all of these live in just the events uh, kind of built in at the base
So you can say events um one of the common ones there's several that are built in to conch later
We can look at like defining your own, but there are many that are built in the first is um on
Changed here
Which fires if you can imagine whenever you change directory
So this event already exists
So what we want to do is just create a handler that will execute in response to that event being fired
So the way that you do that is with this decorator syntax. So you just say at events and the name of the event
And in particular this event
Hands off two
Variables to whatever function is being called as handler. We'll show you how to sort of inspect that later
They're called older and new dur
Or old deer and new deer depending on your preferred pronunciation of words that aren't words
And then in this case just for a kind of a simple example
I'm just printing out a message that says hey, we just changed from this directory to that directory
Um
So now you can just move around in your terminal like do a cd dot dot
And it'll tell you this thing and you can go back into the like directory. We're just in
Um, of course now, uh
Your terminal is is probably a little overly verbose and you don't want this to happen all the time. Um
So, um, you can always remove handlers too because maybe you've made a mistake
And it's saying way more than you meant it to say and you would just like to have your terminal back
Um, so the simplest way is just there's a set of handlers on each event and you can just pop them off
So in this case events on change deer
um
dot pop
And then you should see the thing come up and then you can just test to make sure that your terminal has recovered by
You know going somewhere else and confirming that in fact there is uh, no longer something being printed every time
Um, so that was just a quick example to show you sort of what an event will do
We can now we'll sort of just dive in a little deeper
Um into what's happening and like what all you can do and how you can hook into things
Um, so as we showed you register a handler by just using the name of the event as a decorator
um
those um input arguments uh, the keyword arguments that are there are being um
supplied by the event itself
um
There are two ways to kind of figure out what an event provides. Um
You can just um do help and then event dot name event. Um
Currently in cons that has the unfortunate side effect of also printing out a bunch of like metaclass stuff that you maybe don't care about at the moment
If you just want the simple succinct definition
The better thing is just to look at the dunder dock
Of the event you want. So in this case you can see that
It is uh specifying the types of the two arguments that will be provided
Right there. Yeah, um, and it's returning none
So you sort of have this like type hint signature that uh describes what arguments will be provided their types
And then what will come out of the event if anything
Yes, there is a there there are two ways to get a list of events that are available
Um, currently the tab completion on that events shortcut is a little bit borked
Which we're going to fix like in a couple of days, but if you go to a dunder conch dot built-ins
Built-ins dot events
And then hit dot tab
All of those
And the other way is if you go to the docs, there's like, you know x o n dot s h slash events
I think it is the html, but on the website. There's a list of all of them what they do when they fire
Yeah
Also, I should say if you want to register a handler for an event
But you don't actually I mean it's going to provide those arguments no matter what you do
Like it's that's what the event does to the handler
You can choose not to use them
But you do need to say like you need to give it like a star star quarks or something to at least capture them
Or it will throw an error because you're going to pass
Arguments to a function that doesn't know how to accept them. So it's just you know
You can make these future basically future proof just so long as you always pass at star star quarks
And then you don't have to worry about something firing
Or like passing unknown arguments to your handler
Um
So events get fired when we tell them to fire or when you tell them to fire
Is is effectively the short answer to how these things get set off
Um
But so we'll walk through an example of setting up our own event and telling it to fire just to give you a notion
Of a kind of what this all looks like and how you would put all of this together
Okay, so first um, we need to create an event
Um, and uh
The way you create an event is actually by writing a doc string for it
It's sort of like the ultimate self-documenting code like it's impossible to create an event in contra without it having documentation because that's the only way to create it
Um, it's kind of amazing
Um
So we're going to create an event that just raises an alarm if it's called that just you know that it's unhappy
Um, so the the way you do this is you say events dot doc
All right, and then the first
Argument you give it is the title is the name of the event
Uh, which in this case is never run this
Um, and then you give it a doc string, but which should be um
Uh
The uh the signatures in this case this event takes no arguments and returns none. So it's just a it's a simpler
Um
Thing so it would just be events not never run this uh parens arrow none and then you can um on the next line
You can kind of provide a description of what you know, you're expecting it to do
That's more for other users or other people
So if you were writing a plugin and you wanted to have some events
You would kind of try to put your explanations in here so people understand how they can use the events you provided
Um to full effect
Okay
Okay, so now what we're going to do is um the way you would use this event
is you would um
It's an event that you basically want to never be fired
So you you would put it in a function that for some reason you have like really should never be run
But you're you know you you want to recognize that it may exist
And so you put this event in there to kind of alert you that this thing is happening
So, uh, if you wrote a function that deleted everything on your computer
I don't know why but let's just say you did
Then what you would do in let's say the first line of that function or somewhere along is that you would just say events dot and then
Never run this which we've defined
in that
Previous doc string thing and then dot fire
And then what happens is that whenever that function is called and it gets to that line the event
Management system will basically fire that event
So we can go ahead actually and run delete my computer
And nothing happens
So in fact actually um
Something does happen right the event fired, but we have nothing listening to the event
So you don't get anything out of it, right?
So then the final step is to set up a handler to add it so we create the event
We tell the event to fire and then we have something that listens for the event firing that then reacts to it
Right, so there's these three separate these these three separate components
And given the fact that this is a uh
Like an event that's supposed to fire when somebody has done something horrible to you
You can make it a suitably chastening message
Um and as always um
Like you have access to the full
You know uh
Conspectrum here, so if you want like in this case it means like the who am I is a nice thing
You can figure out exactly which user is responsible for doing this horrible thing to you
That's a good tip. Yeah, perfect. Um, so then if you run delete my computer again
Then the event fires and now you have you know, you know that it was scope at the delete of your computer. I'm sorry
Can't take him anywhere
Okay, so, um, are there any initial questions otherwise there's some exercises here that should help kind of like cement the general
Pattern in place, but we're happy to take questions first
Okay, great
Um, so these sort of build on one another so I'll like reveal them as we go
Um, but the first is just to create a handler for the event that is called on n var change
Um, this is a built-in, uh event. You don't need to create the event. You just want a handler for the event and you want to have it print out the
Um old value and then the new value and of course the name of the environment of the var umbrella is just changed
Um, so you should probably check on the dock the dunder dock of the event to figure out what those variables are called
Otherwise, it's going to be hard to refer to them
And Anthony and I can sort of wander and help
So as gill showed up here, um
If you just write a simple if condition to check if the name which comes in as a string is
Like the dock string says is in
Is either
In uh is either pwd or old pwd and then only print if it's not
We can um
We can check to make sure that it works normally for most environment variables, but if we change directory it um
It it no longer gets called
And then
think we're
I mean a little low on time. So maybe we'll skip this, uh, this particular
Uh exercise, but you can go feel free to do it at home and and email us too
Uh, do you want to just show it or
Okay
So one of the really um handy ones for doing some control flow
We don't we don't have to take time to actually, you know, uh do it right now
But there's on post command which has a bunch of um of those items that you get in the
Command pipeline object
Including like timestamps the name of the command that was run and other stuff
So in this case, this is all it takes basically to set up like a power line style
Like the timestamps of the previous command and just throw it onto your right prompt over on the side
It's really just like this three line event handler thing that you can use and then you kind of set up this interactive thing to track
You can also get like return codes and start coloring things differently
I mean it gets really easy to build stuff up there, you know to get sort of the responsive prompt that you want
That's all I wanted to say
Okay, so now we're going to talk about macros
so
macros are syntax that replace a small amount of code with some with one of the few things
So either another expression or a syntax tree or just a string rather than being evaluated normally
So basically what happens in conch is
That the the parser gets paused
And then we skip the normal parsing
We gather up whatever macro inputs are going to be
Are handed off we'll get to what those are in a moment
We evaluate the macro with however we're told to evaluate it
And then we resume normal parsing and execution
So conch's macro system is more like rusts than
Other macro systems you might be familiar with so who here like knows rust even a little a little so
This gets used all the time in rest. So if you're from if you know that it'll look familiar. If not, hopefully it won't be
too much of a learning curve here
But basically the point of this is that
You're already familiar with macros
Normally jupiter magics are just a macro system effectively. They they pause normal execution and do something else
So in like in rust the conch macros use the special exclamation point syntax
And there are three types of macros that we have
So one are sub process macros, which we'll go over first the next are function macros
Which we'll follow after and then third is context macros
So we'll see what all of these look like in in a moment here
So let's start with sub process macros
So basically if you put an exclamation point anywhere a loan exclamation point anywhere in your command pipeline
Anything after that will just be interpreted as a single string argument to the rest of the command
Um, so if you say echo exclamation point, I'm mr.
Meeseeks for example, then that entire thing is just a single string
Uh after the exclamation point it's stripped
we'll get but
To show some counter examples if you just echo xyz right echo doesn't really care about the white space
Um, so normally you'd have to pass this in as a string
Which is two characters
But if you use a macro you only have to use one it's echo exclamation point xyz in that whole thing
It's equivalent to having put that everything in the string
Okay, now this is sort of a contrived example
Oh, but before we get into that
And it's important to remember that macros pause all syntax right?
Uh before until you escape the sub process command. So environment variables
Uh will just be listed as there as the string you typed in not anything else
Um, because we're not parsing that as an environment lookup anymore
Um, so if you can if you want a more like extended example, you can say you're gonna have
An environment lookup on both sides and you'll see the first one is uh is the value and the second one is actually just the string that you typed in
um
Okay
So this is really useful when you want to pass in a lot of
String like a very large string to a command
Um, so for example time it time. It's like a classic case for this right?
So if you do time it and then some python code
Time it is a built-in alias in conch. So you don't need to worry about implementing it. Um, it's there
Um
All of that is up is a python
The string that follows or a conch string that follows
Um
Or similarly if you wanted to do some bash code right normally you'd have to put that bash code
in a string
And then execute it but with the sub process macro you can just uh
Type in the exclamation point and it's uh, it's done
Um, or you can do this with python basically any of the things that you want to pass into dash c2
Um, it'll work
Okay
I think uh, what did you
Oh, yeah, there you go. Okay
Um
Any questions on the sub process macros?
They're pretty simple
That's why we did them first
uh
The
Okay, so let's move on to the function macro. So these get a little more fun
um
So
Macros don't require a special function definition. They only require a special function call. They modify how the function is called
um
And uh, it's just normal python callables
What you do to call something as a macro is you stick an exclamation point between the name and the first the open parentheses
um
And macro arguments are split on commas like normal functions. So here's a few simple examples
Uh, so if we had an f function if we wanted to call it as a macro with no arguments
We would say f exclamation point parentheses
Your use dross this should look pretty familiar
um
Uh, if you want to call it with a single argument, uh
You would say you would do sort of the normal python single argument
Uh methods or you can call it with multiple arguments splitting on those top-level commas
Okay
um
How the function is defined uh determines what happens
Or specifically how the function annotations what the function annotations look like
Determine what actually happens in the macro when you do a macro call
Um, and that's matched up with each individual parameter
Uh, so here's an example. So say you have an identity
Function that has its annotation for its x parameter set to string
That x that comes in
When it's a macro call will always be a string
Even if what's what's normally put into that is not a string
So here's a here's a comparison between the the two different versions
So in the top we have the identity function. We call it with a string. We get a string back
On the bottom when we call it with
um, the identity
With a string, but as a macro call we get a
This the repper string effectively right returned
um
Similarly for ints in a normal python call you'd get an int back
In the identity you always get
Uh, the or in the macro call you always get the string and same thing with the the others, right?
You you get the string form of the argument rather than the
Rather than the the actual object itself
Each argument is stripped
This is basically done for consistency
So that things like
42 and 42 don't end up being different. They're not really meant to be different. So
In this string one, they end up being the same
You feel free to like raise any questions or deep concerns or anything as we're going. Yeah, tom. Why?
Well, we're getting to why?
in
In context macros, which will see some cool things
um
But it's the same it's it's the same underlying infrastructure for functions
Okay
Yeah, wow so consistent
Okay, so here's some like funny examples, uh that are really pretty bad
Um, so if you macro call like import os obviously this is not valid python syntax
But in any way shape or form, but you can get that code back
You could embed some c++
Because I don't know why
I forget c++
Wow, if only I could forget c++
You don't have to type
No, you don't have to quote that it's not it's a way of like circumventing that quoting. Yeah
In this particular example, but there's more things that you can do than just strings. We just showed the strings here
So if you said
You wanted this to be an ast there's there's kind of flag codes for this if you want to annotate it in different ways
You can get back the ast of what you put in if it's python or conch code
So you can get that tree object back out, which is pretty pretty nice and useful if you're doing a lot of like
a tree rewriting
You can get a code object out if you want to want to put in
Exec or val or something or if you put in the c flag or sorry if you put in compile
There's six of these so here the first three
The others are a val so that would just eval the argument as normal so that means that you basically could only put in python expressions
If you wanted to put in exec you could put in
Basically anything that you wanted
Or you could say t and get the type back
um
So and in theory this could be extended if there are other things out there that people would want to see done
But this is kind of this is what's available right now
Any questions on this stuff?
Okay
Okay, so here's an example of some annotations
Uh a simple function. So we're annotating with
This the first argument by default since it's got no annotation
We'll just come back as a string
The second one will be an ast object
And the third one will be a code object because we're passing in compile the built-in compile function
um
If we do a macro call
Yep
See a lot of pensive people
head's exploding
Okay
Uh of this one. Yeah, so just call it with anything. Um, or any python anything excellent point
Yep, uh, I don't know like three plus five I guess I don't
Oh, yeah, uh, I think you have to do a new line after the three plus five right or after the os
I
Think it's after the os because you did a statement
No, no, no like a literal new line
I'll do it. It's too, uh
No, I guess not string
Interesting, uh
I thought there was an example here. All right. Well, this is not working right
Now, I don't know what the this should
Know for their code
Okay, well, it's not it's failing to
Compile one of these things so
um
Let's maybe just do this
Uh
No
Yeah, I don't know. It's uh, what the problem is I'm sorry. We'll have to figure it out afterwards. So, um
We have a parser error. All right
Um
Okay, sorry about that
uh, so
the
Next the the last bit of macros that we'll get to are context macros. So these use
The exclamation point right after the with uh word so you can use with exclamation point
um, and then everything after the colon will be
captured, uh
Like it was in a normal uh with semen. So this provides both
Named blocks and anonymous blocks
um, so if you say
This isn't going to work because there's no x to enter but you say with x equals 10 print y this would come
Uh come back as us as a string
Um, and what this can be thought of really is is doing the follow. So you can think of this as saying
Uh, whatever your context is x dot macro block equals the string of the code in the block
de-indented
And then assigning the locals and globals to to vary up to attributes of that as well and then passing for the actual block
Um, so it's a bit of code rewriting
macro block is de-indented
And uh these attributes are set before the enter method is called
But they're not cleaned up on the exit method. So you can do that if you want to uh, but they live around
They stay around and live if you if you need them
um
Like with functions by default the contents of the block are returned as a string
Um, however, they don't need to be they could be any of the other special annotations that we saw before
um
And that's just lives is the this conch block
Attribute on the context manager. So that's how it knows what to look up what type to convert it to
um
So here's an example
And and this is gets to the use case a bit. So we can write a simple
xml block
So if we say we're just going to be pretty explicit. You don't need the comments, obviously
um
So we say it's going to come back as a string
We write an enter method that takes
the contents of the block as a string
And we'll parse them into an element tree an xml element tree and return that
um as the uh as the object in the context manager
Um, then when it exits, we're just going to clean up those things the things that we we had before
Yeah, I think you need this star whatever
Macro locals. Yeah
Okay, and then you can use this. Oh, it's cutting it off a bit, but um
Uh by saying with exclamation point
xml block a new object as tree
colon and then everything
Um, you can just do a short one. So just do like you could even just do yeah you
Uh
And then just close out the note I think
um
And now if we we can inspect the tree object
tree is an instance of
So I think what is it if you do tree tag?
Um, that gets the note so it parses
That x xml. So this lets you
write documents and other languages right in conch and then do whatever you want with them
Which is somewhat insane, but actually kind of useful occasionally
And you saw like writing that context macro macro object that class was actually pretty simple
It didn't take a lot of lines of code to do that
So yeah, that's kind of the
Scenario there
And hopefully that answers at least partially the use case question. Okay. So we have a few exercises
Um
The first is to use a sub process macro. So just run time it
Um on the string and formatting a string
The second is
to
Call the import module as a macro
So you don't have to use quotes and the third is to run, uh, uh write a json block context manager
Oh, yeah, we're not gonna
Then we need to get into our example
And then we need to get into our like
Any questions on any of these or if there are questions, um
Format was 42
And you see like what this really prevents once time it completes
Is you having to run it with a extra set of quotes, right? Because time it expects just a single argument that takes
Um, so this is the same
This is fundamentally the same, but you just you don't have to type that extra set of quotes. So
Okay
All right, you want to move on to the next
And then yeah for the
standard library import lib
Um, this is just showing you can you actually you can just use existing functions, but call them using the macro syntax
And so in this case you get back the
Import lib sorry. Yeah
dot
import module
So if we do sys
Uh, right because the first argument is a string you can just get that so
It'll it'll take it'll turn whatever you type that into a string
Okay
And then
Uh, the third one is this json block. So this should be very familiar to the xml one where
um
Now we just have
Or now we have uh json. We don't need the the macro block part because that's optional. Um, but we
Uh, oops on enter
um
We'll assume that the code that comes in
is
Uh part of is valid json. So we'll return
uh json
dot loads
of
self dot
macro block
Um
And then on exit
Uh, we'll do this we'll do the same delete portion just to clean up after ourselves as well
um, and so a use case for this is just with
uh
json block
as
Let's call it x. Um, and we can write like
Hello, just some random json
mom
And now
x is a dictionary that was parsed from that json pretty
Pretty simple silly example because json and python are so similar here, but uh, you know, it's it's a one way to do things
so
Any questions on these exercises? Yeah
So
Where does this json block object end up in this case? What do you mean? So
x ended up as the return value of enter
Yes, so where did the json block instance
It's gone. Okay, so like the so the cleanup is a little
I guess you can show in the cleanup
Implying these things are leaking
Well, so the macro block and macro globals and macro locals. Yeah, so so this would leak
I get in the case where you instead returned self from the
From the from the enter method
Right
No, no, it's not it's not keeping a cache it would only leak if you
so like
So the the place where it would leak potentially where you wouldn't want it to necessarily is like if you wanted to
Have the same
Instance of json block be reentrant like that's what this makes us so you could like have one instance of json block
And then just reenter it every time
And always get the tree back
Uh, or if you return self and we're doing something else with it later
Right, so yeah
That that's where the references get added
Yeah
Does that make sense
Sort of um close enough. Yeah, I guess the the thing is like if you returned
Uh, so if you said like
self
dot
Like maybe you wanted like
Like maybe you wanted to keep the j object around so you did like json dot
Or you wanted to keep the tree
um, so you do json.loads
of
self dot macro block
And then
And then you return
self
You know, you might not want to keep the globals
You might want to keep the macro block itself around, but you might not want to keep the other locals and and
globals here
and so
Just using this
So now x is the json block and then x dot
Tree
Is the uh, is the actual
Version, but you still have access to the string of what the macro block was
Yeah
They are the uh, they they're the the name they're the local and global
Uh dictionaries like as if you had called locals and globals the python built-ins
Where the where the macro block was called or the context macro was was written
Yeah
Yeah, okay. Yeah, any other questions on this?
What are the use cases
Yeah, so the most common use case is really something like time that right, it's really those
Um, there's a couple of cases where that i've that we've used these things where like if you wanted to write some bash
And you really needed it to be bash in a local context
Then you would then you write like a little bash thing
um
There's been some other use cases where we take input or configuration files in as these macro blocks
Um, uh, but otherwise, yeah, it's that's kind of the use cases
Import sorry saying
Oh, yeah, yeah
That that was that's just a toy. Uh, that's kind of a toy example to show
Um, right this comes from the standard library and the standard library didn't
Uh, doesn't know anything about conscious
Macro system
So it didn't annotate these functions in any particular way and this is just showing that you that you can use
You can use the macros on those functions if you if those functions happen to take string arguments
Okay, so it's more just demonstrating it's it's demonstrating. Yeah, but the function macro stuff just ended up having to
It kind of had to be there for the context macro stuff
um
That infrastructure all had to be the same. So it's there and available in the language if you want it, but
Um, I wouldn't say there's like a killer feature for it unless you're coming
From rust or you or you really like doing a lot of ast syntax ast tree like rewriting and stuff
In which case this makes it easy for you to provide those rewriters or pattern matchers
Um inside of conch, but there aren't that that intersection is basically me. So
Yeah, so
Okay, cool
Good question
Uh, let's we should maybe skip this well except we don't know if we can yeah, well I can try to
Um, so this is going to be interesting as we discover if this is even possible anymore
Um, but there, uh, there is an example here
Which is that we were working in a lab that had a bunch of MRIs of mouse lemurs
That's a mouse lemur
So we had all these MRI datas, um, but uh, it was set up on our web server by a postdoc who disappeared last week
Um, and we have some other bad news
Uh, which is that he used bash to handle all the data collection
He didn't know how to make sure that different datasets were saved to separate directories
So he just added a random four-digit number to the end of all of these
Um, NII MRI image data files
Um, and he also neglected to do this with the json metadata that was included with it. So that's all been overwritten and lost
Um
And then he ran remove with an overly permissive glob
I deleted all of them
And uh, the files are kind of big in the postdoc's web servers at his house
We don't want to have to download all of them
um
That being said, uh, the web server at the house, which is on my laptop is completely inaccessible to everyone on this network
It turns out which makes this a little trickier
um
The data is now on uh github
At uh in this repo called MRI data, sorry
And uh
This may not be possible. So we'll find that it's going to be a learning adventure for all of us
Um, we do know a couple of things about the data. So this is sort of our exploratory thing
They all do follow this naming convention
Uh, so you just have like sub dash two-digit number underscore four-digit number dot NII
Um
The files are large, but the first 348 bytes of each file is a header
So you can nominally just pull down the header
Um, we're pretty sure there are 19 mouse lemur scans
Um
And the circle spine study going on the lab next door, which is mixed in with all this data only has six subjects
Um
And nominally this is how you would use curl to only pull down the first 348 bytes of a file if there were a functioning web server available
Um, we're going to discover together if you can do this from like the raw link on a github repo
But we're not sure
Um
So having said that if you would like to even try this and we welcome your support and efforts
You can install, uh, n i babel, uh, n i b a b e l on kind of forage, which is a nice package for loading in this MRI data
It's on pip, right? I don't know. Oh, you don't know. Okay. Yeah, I don't even look on pip anymore. Yeah
And then um
We are all gonna try together to see if we can
Just download the headers of each of these files to sort of determine which of them are the ones we want
So we don't just download everything which is never usually the right answer to these sorts of questions
Maybe we should see if we can curl one of them right now. Yeah, let's try it. Okay
um
All right, so what it's curl dash
R
and then
What I should have kept that and then what's the github URL?
Well, the github api should be
This feels way too much like real science right now
So it would be uh
github.com g4 site MRI data sorry blob master rifles true
That didn't work
No
I
Thought there was like a real
Okay, you know like a raw user data kind of thing. Where does that live at?
I think usually it's there unless the file is too big
Oh
Okay, this is why you don't store, you know big data on github this way. It's a really bad pattern
Let's try this one
Received
No such key or maybe that one's not up yet
It's another one of these file names that's definitely up
Uh
Okay, time to rewrite the slides
Which you'll be able to reload and copy from yeah, what's that digital ocean droplet? Uh, they're all all
Put it in this chat
Sorry about this overall
By
Yes, yeah, no the network's all kinds of fun today
Don't help me google. I don't want your help your help is terrible and poison. It's not help. It's spying. Just stop spying on everything we do
They're watching us right now
That's true, but we we ask them to
Can you curl down a file list from there? Is that work? No, I don't well, I don't know how to what was the command for doing
All right, I think
It should just be this
Okay, does it work
Yeah, that's yeah that that the information's in there. Okay, so
Yes
So you've got an xml block
all right
We are happy to answer questions along the way this should actually work though, which is kind of amazing
so we have
The post doc is better than we thought he was and has uploaded the files to this digital ocean droplet
That I've just added to this slide
If you reload the slide deck you should be oh, I haven't I haven't pushed it up. Okay. I'm sorry
I can't I can't push anything right now because I haven't set up the ssh thing and it wasn't working. I'm sorry
um
But if you curl that url you will get
This looking kind of blob
Which does have all of the file names in it
So you can see there's one
I lost it there
sub 187785.nii
And you should be able to pull out from this a list of all all of the names that match that pattern
and then you can
Pull down only the first 348 bytes of each of them load them into
Ni babel and then inspect sort of the dimensions of the thing to figure out which are sort of the correct images
Yes, I can
You probably need to well actually yeah, it should just work. Yeah. Yeah, it works. Yeah, I do that all the time
All right, kind of install something and then import it immediately
Yeah, so
Uh, yeah, and if you're having a problem or if you're running to issues like come just raise your hand let let us know
And thanks for uh dealing with our debugging
So for a quick update on our progress here is there anyone anyone doing on this if at all
Sorry to hear that
so, um
One thing you can do for some of this is you first want to get
Uh the raw kind of page
So that would be you could just curl down that base. You are all there. I actually got encoded. This is a yeah
Can you make the font? I sure can
You want to show the other command? Oh, yeah base. You're all right. Yeah, so then if you have this
Really long painful string like this, but you know
That the files look like
Somewhere there
You can try to use xml, but xml is horrible
so
um
You could also use a regular expression to scrape over that and pull out anything that matches a certain pattern
So then that's sort of the list of files that match that
So now you might want to try just like downloading one of those
Which would be to grab the first 348 bytes
Save it to the same output file it concatenate or just you know put together the base url
And then the path of a single file just to kind of test it out
Seems to work you import knee babble
You can load that file
And then if you explore
Some of the different options here you might see this header thing
Yeah back there
Yeah, so the question is about uh, why why shouldn't you use a path string here? Well, yeah
So the answer is basically that it's a url
So it's not really a path in a normal way
And the second is that you're you're just passing it back down to a command a sub process command
And so it's going to get turned back into a string anyways, so you don't really need the path object
Yeah, having said that what um
You know as you go along on this you might you would maybe curl it down using just you know
Just a string because you want to pass that to curl
But then in terms of loading the file after you have it there you could first make it a a path lib path
Load it from that and then depending on the results of like how you're inspecting it
Then use path lib of that file to move it or change it or mark it or delete it or
You know so you can work that into the
The process
I'm going to keep working on this like at lunch so people want to
On this contrived example to be created
But you want things to work
So that um, thank you everyone for coming. Uh, I know it's like a lot of information just to dump into people's heads
But we appreciate you guys kind of toughing it out with us. Um, we also um, there's a bunch of stuff we haven't covered
There's even some more new syntax probably that I've forgotten about
Um, but we're here all week and we're happy to help you answer questions
If you have a certain thing you like to do and you just want it to you think it could work a little better
You want to try see what it would look like on conch? Please like stop us anytime
We have stickers on our badges and you probably would recognize at this point. Um, we also have stickers up front
So feel free to take as many as you want of those and uh, yeah, thanks for coming and trying out conch and hopefully
You know, it improves your life in some meaningful way. So
uh, and then
Yeah, we'll be around and open bug reports find us on getter
Uh, open issues contribute. We're
Friendly community. So thank you so much everybody
