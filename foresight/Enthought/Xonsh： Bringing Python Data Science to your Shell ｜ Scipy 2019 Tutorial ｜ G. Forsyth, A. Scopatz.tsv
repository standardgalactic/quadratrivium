start	end	text
0	5840	Welcome. This is the tutorial for a conch. If you're not here for a tutorial on conch, you're really in the wrong room.
8160	13080	But we hope you're in the right room. Yeah, we think this room is the best actually. You made a good choice.
16760	22120	You can introduce yourself. Hi, I'm Anthony Scopatz. I work for Quonsite and according to the slide
22120	28280	I am both a madman and a poet, so I hope that this inspires you in some way today.
29240	31800	I'm Gil Forsythe, not Gorsythe.
33440	37840	I am also a madman and a poet according to the slide. I currently work for Capital One.
39480	44360	Yeah, that's why I got it. Yeah, and thanks for being here with us 8 a.m. on a Monday morning.
45080	48880	Not everybody wants to learn about new show languages at 8 a.m. on Monday morning, but
50400	52400	so we have a few bits of
53360	59120	bookkeeping and just want to get everyone kind of set up and ready to go. If you've been to a lot of, or any slide
59120	61120	part tutorials before, sort of the
62120	68080	the usual mode of presentation interaction is Jupyter Notebooks, and those are great. It works really badly
68440	71960	if what you're teaching is like a show language and prompt.
72760	76120	So we actually just do need you to install the stuff, and then we will
77400	81280	be sort of live coding and have slides at the same time, and we're, you know,
81280	85560	we'll be running around and help and stuff. But so if all of you can just take a few moments and we'll run around
86560	91760	to troubleshoot and install Conch, we highly recommend using Conva for this, but
92080	96960	there's other options. Yeah, and there's a new release as of last night at 10 p.m.
96960	100200	So if you haven't updated since then, please
101200	104200	there's a bug fix. Sorry, the code has bugs.
104280	114720	Like all code. So yeah, please grab the 0.9.8 release, and we'll go from there. So who has
115120	117120	Conch installed right now already?
118160	125720	Okay, most of you, and if you don't, like just grab it, it should take two seconds because it is pure Python, thankfully.
127040	129120	So you don't have to deal with like weird
130040	136160	Fortran rust extension interactions and stuff or read line read line. Oh, yeah, we don't have to deal with read line
136560	138560	Everyone's favorite library
139120	141120	Three three chairs for read line
141520	147360	No, no, no chairs. Okay. Wow. We got one tough crowd one one one one chair. Wow
148440	150440	Nice input RC. There you go
151680	153680	Thank you. I'll be here
153680	155680	What?
159120	164760	Alright, so oh, and we we should send out the link to the slides as well. So
167040	169040	Slides should be at
172440	177400	Conduct SH this is what's that repo called is it like conch?
182440	187160	While people are installing conch and for people just coming into the room, please install conch
189160	193880	I just want to sort of do a quick poll the room get a sense of who y'all are and why you're here
194680	198280	So who here uses bash on a regular basis?
198960	200960	Okay, any Z shell users?
201440	203440	Okay, fish
203560	209360	One, okay. Yeah, one cheer for fish one cheer for real on to you. Okay, fish got two chairs. All right. Has anybody used conch already?
210320	212320	All right
215400	218160	Okay, who here really likes bash?
220120	223120	That's okay. No, no, there's nothing to be ashamed about. There's an open question
223120	227840	We're not we're not here to know who here remembers the syntax for a for loop and bash that looking at stack overflow
228560	231080	Okay, no, no, some people can do that. That's totally cool
231240	236320	Who here remembers how to tokenize a non-whitespace string and bash without looking at stack overflow?
237200	241000	Both so I'll believe you. I'm not gonna I'm not gonna you know, call you out there. That's good. Okay
242880	248200	So while we get the slides everybody, I mean one of the things conscious for many things
248960	252600	Partially, it's the to suit our mad desires
253000	257960	But also it was a lot of these things which seem like they should be simple and easy to remember aren't
258400	262000	and a lot of us are dealing on our daily workflows with
263400	265800	Language decisions from the 70s which made a lot of sense
265800	272760	But maybe we don't like want there to be a difference between single and double quotes all the time or like maybe we don't want to have that many square brackets in a row
273560	278960	And so this is an effort to remove that pain because this should be a relatively
279560	284760	Seamless and sort of fun interaction and you should just be able to do the things you want to do without struggling through it
286560	290600	I think we probably can I don't have the slide link okay
291600	295520	Are people and mostly installed and ready to go have contra running
296880	300760	Cool, is anybody not have contra and that would be I guess the question to ask okay
301240	306000	We're still going to be talking for just a bit so and we can we can catch up as we go
308760	310760	Okay
311520	313520	Also just a quick tante check if you can run
315160	319960	Every time we say like the sound like co or something it's always gonna start with an X just a fair warning
320360	325920	So if you can run config, it's x o n f i g in your conch shell
326120	329360	That should probably not say what it says here
329360	334120	Maybe should say zero point nine point eight at the top just so we were sure we're on roughly speaking the right versions
335960	341840	I do have the link, but I don't know a good way to get it to you guys other than I'll just put it here
341840	345160	So if you want to follow along with the tutorial
346040	348040	You
349920	353640	Can go to this link so it's conch.github.io
354440	356440	sci-pi-2019-tutorial
357160	360800	Slash remote HTML. We're sorry about the URL. Yeah
362560	364560	Only a little sorry
366240	371040	But yeah, you can click along and follow so you can skip ahead in the slides or go back
371040	373520	There's some exercises and things like that and so
374280	376280	Bring that up now
378640	382000	Okay, I'll let you guys do that and then we'll
382000	384000	Do
402000	404520	Okay, that seems good. Yeah, great
405800	407200	Okay, so
407200	410440	Quickly just like an overview of just some things that you'll see us doing a lot
410440	413520	And you should also feel free to do while you're interacting with the shell
413920	417800	We don't have explicit slides about this because they're just sort of general overall
418040	420600	Like things you can do in a shell or in conch anyway
420960	426240	But if you see us do something like we obviously hit one key and something happens and you want to know what just happened
426240	431040	Please just ask us if it if it seemed like it came out of nowhere or we're not trying to make this opaque
432680	435480	So generally speaking there's tab completion. Oh, yes
438200	443520	Oh from the there's an there's an L right at the end. Yeah, so it wrapped a little
445680	450800	Yeah, I was getting well the directory doesn't have an index.html I can fix that in a moment, but
452600	454600	Yeah
455200	459600	Generally speaking this tab completion for almost everything so it'll save you time when you're typing
460720	462240	Beware of that
462240	465280	Does anyone not know what tab completion is? No, no shame
466200	468200	All right great
468800	470960	This will mean less for you at the beginning of the tutorial
470960	472640	There's a lot of history search functionality
472640	475040	You probably don't have much of a conch history at the moment
475040	478240	So that won't mean that much but there are several ways to search up
478680	483840	We'll kind of touch on those a little bit later control R as your friend that will kind of give you an anywhere
484200	487480	Line search back in your history if you start typing a command
487480	490360	You can press up and it will do a prefix search match
490360	494940	So like anything that's any line that started with that initial bit will show up in the results as you arrow up
495480	500600	And you'll see this sort of ghost text showing up if you're typing the same command this sort of a
501200	507880	History match autocomplete thing and you can just hit right arrow or I think control E to sort of expand out to that if you want
508320	512120	Don't worry about like taking all that in at once, but we'll come back to it
517320	519880	Yes for all the
520720	523440	Pythonic bits in conch and we'll find out what those are a little bit later
523680	529240	You can always append a question mark to a command and it will bring up a little help screen in the pager
529240	533920	Or you can do a double question mark for super help for even more if you've used ipython
534560	537840	Fair bit. This will maybe be a familiar pattern. Yes
541520	547800	I don't think there is one it's a UT guess and should just be an open wide open network
548400	550680	Yeah, is there another question over here?
555720	558240	I think we did discover that yeah
572160	574160	Okay
574800	580920	Yeah, okay, not gonna do that live we are gonna ask everyone about questions about that during the break so we can fix something
580920	583640	That wasn't working and that would be but that's good news awesome
585080	588000	Okay, are there any questions?
590080	592080	Okay
593480	594840	All right
594840	598240	So yeah, there's was that a question. No, all right
598240	603760	So everyone has conch working that can if you ran the sorry the config
604680	606680	Let me just go into the
612080	616440	Okay, so you should have been able to run the config command and see some output like this
616480	619800	So if is everyone kind of at that stage?
622600	625440	The cut oh, yeah, it's it's config with an X
628760	632080	You're gonna love that X key in the next four hours. All right
632920	635120	Okay, so we've got our agenda here
635120	640200	We'll be taking some breaks in between these things and we're gonna be building up to sort of greater and greater capability
640880	646000	Over the time. These are links. So if you have the slides up you can jump around if you want to
646960	650320	And there are exercises at the end of each little section. So
651880	654760	That's a gonna do the shuffle here
654880	656880	So
659160	666520	Conch is a superset of Python 3 so what that means is that all of the syntax that's in
666680	669320	Python is also valid conch, right?
669320	671320	So there's no so if you know Python
672000	676320	Pretty well or really well or extremely well everything should be familiar to you
677560	681440	And so you can do a bunch like basically everything that you would be able to do in Python, right?
681480	685040	Like to find classes functions modules etc
686200	692160	So we can go ahead and you know do these along with us like you know when they come up
692160	698320	So let's try some in the mount. Oh, these are our first exercises actually. So the the first one is to
698720	700720	compute the product of
700880	702640	two three and seven
702640	704640	the second one is to
704640	708320	Import numpy or import sys if you don't have happened to have numpy installed
709040	712800	And then also define a function you can do this all this right at the command line
712800	716760	You don't need to go anywhere else. You don't need to do this in a file. So
718280	721160	Try these out you can click on the details to get the answer
721560	725920	And we'll give you guys a couple of minutes to try this stuff out
726800	729640	And also be solving it very slowly in real time
739200	741200	I
742920	748240	Think you can go wow 42 what a what an auspicious number there
752160	760640	Can we import a module Gil yes wow that's that's pretty impressive
768320	770320	Oh
775240	777940	We're in real life we should be like yeah, yeah, sorry
785080	787080	No, I'll still in relay
788520	790520	Yeah
793360	797640	Sorry, I was in developer mode right there there we go
798960	802120	So you're saying yeah, you should see there's a lot of tab completions available
802120	805160	So if you import or I'll do sys actually too because that's one
805920	812760	You can just hit tab after the dot and those will be all of the attributes and modules that are available in sys. Yep
814760	816920	I forgot the last one the function
819760	822360	Does anyone have any problems or questions these
823360	828840	It's pretty simple right so this is just to prove to you that contrary is Python
834160	837880	Yes, yes you can well we will get to that question later
840280	845480	So Dhar Haas's question for those of you who are listening at home was can you define a function?
845480	848760	That's all a command on your system and the answer is yes
848800	852400	And we'll get to how all that resolves and works later so
853800	857960	Great question. Okay, and we'll get to it pretty soon. I think actually
858720	861440	So conscious of shell so conscious also a shell language
862240	865960	or more more precisely, it's really a scripting language that is
866880	874200	Mostly shlang compatible, which if you go back to like the 60s and 70s, you know, sh
874720	882880	Was this old or is a shell language that we all have inherited a la bash and and z shell and another and other languages like that
884000	888220	But unfortunately, it's actually impossible the syntax is
888640	893600	Collide and it's impossible to be both a Python and shlang compatible language
894360	899920	And so you have to kind of choose and in conch we have chosen that Python will always win
900520	902520	There's a couple reasons for this
902640	905440	but mostly it's that Python is the same language and
906560	910400	sh is not really sane in some ways like the splitting
911040	918520	Strings on non-whitespace characters and the machinery for how all that stuff works is kind of crazy if you dig into how the shlangs work
919560	924560	But Python always wins. So if you found a place where Python syntax isn't working
925000	927000	That is a bug
927640	929640	Please report that
929880	937440	Yeah, yes, sure. Just as an example of this this issues where so this is a command that you may be familiar with
942240	946840	But this is also a valid Python syntax if Alice and L are you know defined so
946960	948960	So
956400	960920	So the rule is is that if one of those things isn't defined it'll still function, right?
960920	964200	You can just delete the variables, but it is possible to overwrite those
964600	971680	Built-in names, and there's a way to escape that which will this is just a convenience, but that we'll get to in a bit here
973280	976440	So the purpose of the shell is to run commands obviously
977360	981880	And so we've got some commands here, right? So we just saw ls-l
982600	987360	Simple one. Yeah, please type you know type this out if you if you want just prove it to yourself
988400	991280	But this works you can do echo
991880	993880	You can make directories
994120	997160	And cd into those directories touch files
998040	1000040	Do all the kinds of normal things that you
1000680	1005520	You would you would want to do so and I think I actually have all that test code here still but
1006080	1009640	And the other thing that you can do is you can pipe, right? So if you're
1010680	1014160	Familiar with piping from other shell languages you can take the output
1015320	1022360	From one command and and make that the input to another and so that all works normally like you would expect in conscious well
1023120	1028560	So and basically under under the covers. This is a horrible abuse of the sub-process module
1028880	1034160	As you would expect with a lot of fancy features added to it. So
1036520	1041760	Okay, so the next bit of kind of basic syntax in the language is our environment variables
1041760	1046080	So these function a little differently than other sh lengths, but similarly
1046280	1052120	So you can refer to any environment variable by prefixing a name with the dollar sign character
1052120	1056680	So if you want to look up right if you want to look up a variable in the environment
1056680	1060440	You can say dollar sign that variable name and then you'll get back the result
1060680	1067560	So right so then the environment is this like special namespace that processes use to communicate with each other and
1068840	1070840	Conch gives you access to that
1072760	1075640	And you can set and delete environment variables
1076400	1079800	More like you would do in Python then you would do in other
1080320	1086480	Shell languages, right? So these are just normal variables that happen to live in a special dictionary mapping somewhere
1087120	1089760	and so because of that you
1090480	1095680	Would set them with an equal sign and then you would delete them with the Dell operator. So
1096240	1098240	Shouldn't be anything
1098320	1102240	To out of the ordinary there anyone have any questions about that
1105800	1111000	Is there any difference between this an OS environment OS dot environment and the answer is yes
1111000	1114160	There's a lot. We'll get to that in a section coming up
1120440	1122840	No export is not a feature of
1123600	1126080	Conch or so exporting
1126440	1129760	So, okay, this is a little this is getting into the weeds a bit
1129760	1134800	But I think export is a is a bad idea. You shouldn't need to explicitly export things, right?
1134800	1137240	You're already doing that with the dollar sign, right?
1137240	1143080	So shlings when when you export or when you define an exported variable actually don't put the dollar sign
1143080	1149400	So we've collapsed those seven characters export plus space into just the dollar sign
1150880	1157880	They're well, they're not they're they're process-wide. Yeah, they go into the environment for the process
1162280	1166320	Oh, so dollar zero for those so the question is what about dollar zero
1166960	1171680	Dollar zero is how you refer to arguments or you get your the command that you run
1172400	1177760	We use dollar args for that when you're running a script. It's an environment variable
1177760	1180520	It's in the docs, which we'll have a link for very shortly. So
1181560	1189160	Okay, I just realized this screen. We're standing in front of it. Yeah. Yeah, okay, but we'll maybe fix that during the break
1191640	1193640	Okay, yeah, these pretty normal
1195240	1200840	The other thing that you can do is you can do environment very or environment look up with Python expressions
1201280	1203160	using dollar sign curly brace
1203360	1205160	So if you want to
1205160	1207760	Compute an environment variable
1208920	1215200	Arbitrarily you can you can use dollar sign curly brace. So this is a little different than how other languages do it
1215600	1221320	But for example say you have an x variable that equals a string in your namespace or your user
1222360	1228960	You can do dollar sign curly brace x and then that'll look up the user environment variable. So that looks up the name
1229960	1231600	oops
1231600	1233160	Sorry, I skipped ahead
1233160	1238280	bit and or if you want to compute it with some other some other expression
1238840	1240840	You can just stick that right in there
1241200	1242640	in
1242640	1249600	Most SH links. These are actually dollar sign and dollar sign curly brace are the same have effectively the same meaning
1250320	1255320	But they have distinct meanings here effectively. They're they're subtle differences. I know
1256160	1258160	But they're very different here
1258240	1259480	Okay
1259480	1265840	The source command so is everyone is everyone familiar with source and other languages like bash and things
1266560	1270840	Okay, yeah, so so if you're not what source does is source takes of
1271480	1275000	File that's written in that language. So if you're in bash
1275400	1281800	And you sort you can source a bash file and it will run the commands as if you had typed them into that
1282160	1288160	Session, so it's just a shortcut for executing everything in a file in in your current
1289080	1290920	Interpreter session
1290920	1294840	So conch the source command does roughly this does basically the same thing
1294960	1296960	It reads in the contents of a file
1296960	1303360	And then it executes them and it brings all the variable all the global variables and everything in the environment, etc
1303520	1305520	Into the current execution context
1306760	1310400	But of course this doesn't work on bash this works on conch code
1311560	1313560	So if you have a very simple
1314200	1315800	example file
1315800	1317800	Yeah, sorry. This is
1318160	1320160	Yeah, you can do that
1321280	1326600	So here what we have is we're setting an environment but variable in this file
1327800	1330640	We are setting a password which is a terrible thing to do
1331200	1333640	And then we're defining a function. Oh
1334880	1338320	You can install VAM right now if you want go for it
1340040	1342040	See if I care go just
1342040	1347560	Can't do that to your laptop, but it seems me. How do I do this? Oh, well, I mean we're talking about sharing passwords
1347560	1350580	I'll just say my my root password out right now. Yeah, okay
1353840	1355840	Yeah, so you can
1356880	1359680	You can then use this function and it's it's good
1359680	1365440	So basically what you do to use source is you just say source and then the file name
1365480	1368600	So here source example dot xsh and then
1369240	1372280	You'll see that that those variables that we had like
1373080	1380480	Dollar sign email are available as well as the combined function has been brought into your local exit or your current
1380680	1383240	Sessions execution context and you can you can run it
1385160	1389720	You can also import at dot xsh files as well
1389800	1392640	so if you want to write python modules as
1393520	1400000	As conch files, you're totally welcome to do that and you can import them even in other normal python projects
1400200	1404480	Not going to show that here, but if you're interested that's something you can do
1405040	1408120	Okay, any questions on source?
1410080	1412080	Pretty simple alright
1413560	1419480	The thing that you can't do in a lot of other languages that you can do in conch is that we have a notion of sourcing
1420320	1424560	Files from other shell languages that we call source foreign
1425400	1427400	so imagine you have
1427560	1434160	Some bash script somewhere and you want to bring that in and execute that in conch and bring all the things into your local
1434760	1441040	Execution context you're able to do that just by saying source bash and then the bash script
1441200	1446080	So if you've got a you know a hundred thousand lines of Z shell well one. I'm sorry and two
1446280	1452760	You can still use that so this is a way to integrate to slowly integrate
1453280	1455280	with other languages
1455360	1458520	Which is pretty cool actually so
1459120	1462840	It's pretty nice any and and by default sorry
1463640	1467800	We have a so source foreign is a generic infrastructure for doing this
1468440	1474800	But we have shortcuts for doing source bash source Z shell and also source command or cmd
1474800	1480160	So if you're on Windows using the Windows batch processing language you can source that stuff too
1481040	1483040	which is
1483160	1485160	madness, but I
1488840	1494600	Mean we've got a core Windows developer for the past four years who's like it works pretty well
1494600	1499440	I mean there's I imagine there's folks here using it on Windows right so are there any Windows users in the room
1500320	1503000	Okay, let it I mean who are on Windows right now
1505440	1507440	I
1508600	1512760	Think the biggest problems are usually just that our examples are very like Unixy
1512760	1517600	And so we say like run this command and it's like what command is that that's that's often the problem
1519360	1521000	Okay
1521000	1526360	Well, so we found with that like if you're on a base Windows install and you just install get bash
1526360	1531880	Then you get all the Unix commands and everything works normally and supposedly works really well on Windows subsystem for Linux
1531880	1533880	But I have not tested that
1534800	1536800	I
1543760	1546240	Mean you can we would be very happy for you to do
1546800	1549280	We may not be able to help if it goes wrong, but we'll try I
1551520	1555400	Saw another question over here. All right. Okay, so source foreign
1556880	1560560	Really nice capability really helpful, especially if you're just getting started
1561560	1568840	The other thing like most like most shell languages. We've got a configuration file that lives in home.contra rc
1569560	1571560	And this is just a particular
1572120	1578720	Special xsh file and that's loaded before basically everything else is loaded. So this is where you can stick all of your
1579120	1580720	Customizations
1580720	1582720	Mostly a lot of people just stick
1583000	1585000	environment variables in there
1586040	1588240	If you're a condi user conda as
1589240	1593000	Activate or whatever and it will throw some stuff in there as well
1593760	1594960	and
1594960	1596960	yeah, so
1597040	1601840	But basically if you want to read about all of the customizations, they're on there in the doc
1601840	1606720	So every every environment variable that we touch has documentation associated with it
1606720	1609760	And there's a lot of like tweaks that you can do a few if you need to
1610520	1612280	all right
1612280	1614280	So here's some more exercises
1614480	1617120	So let's go ahead and take a few minutes to do these
1617480	1622840	So the first one is to just set a random integer to the environment variable dollar sign secret
1623880	1627040	The next is to print the secret value
1627720	1628960	and
1628960	1630480	then
1630480	1632480	The third is to put a
1633120	1637720	Generating just some generating code for that secret value into your contrast see
1638360	1642640	When conch starts up if a dollar sign safe variable does not exist
1643120	1646080	So we'll give you guys a couple. We'll give you all a couple moments to
1646880	1648880	to try this out
1651640	1656720	And if anyone's having problems just raise your hands right now and and Gil and I will will walk around and help
1659320	1664640	The next thing that are for problem for part two. There's actually a couple different ways to do this
1665360	1669640	The first is that you could either echo that
1669640	1673160	So if you're thinking more in a shell language, you could echo that
1673640	1678200	You know my secret value is dollar sign secret as a string and that will all
1679040	1685040	All push out normally or if you're in more of a Python mode, you can just print it like you would print anything else
1685440	1687040	Okay
1687040	1689040	Both of those are totally valid
1689560	1691960	and then the last one is
1693240	1697760	If you wanted to this is getting cut off I guess but
1698760	1702480	This is why you have it on your own machines, too
1704280	1706120	You can say
1706120	1713760	In your contrast see you because it's Python you can import random because it's conch you can set the environment variable
1714600	1721680	To whatever random value and then oh we actually didn't cover this in text in this exercise, but
1723720	1725880	Because we've moved around some slides, but
1726800	1733120	We'll get back to that last one soon enough. So, okay, so very briefly
1734640	1736640	So remember how we said dollar sign?
1737320	1740280	Curly brace is an expression
1741280	1744080	You can you do look up by expression so
1744720	1746040	this
1746040	1752080	This dot dot dot in Python is the special is the syntax for the ellipsis object
1752880	1755280	So we use that numpy uses it, too
1756160	1760320	So we use that to be a reference to the environment itself
1760320	1765320	So if you do dollar sign curly brace dot dot dot you get back the environment object
1766160	1771120	Because dot dot dot is obviously not or an ellipsis is obviously not any environment variable
1771720	1773280	And it's a big mess
1773280	1775960	Which is why we didn't want to cover it this soon, but there it is and
1776680	1778780	Well, we will get back to it in a bit
1779800	1781800	Okay
1781800	1787800	So, yeah, the goal here is like because it's just a mapping you can test if if things are in the environment
1788240	1791000	Through through this self-lookup. Okay
1792480	1799200	Wow a break already that can't be right. No, probably not. Okay, so we're not gonna break. Yeah, because it's too early. I
1801280	1805720	Built up your hopes and then I'm just crushing them right now
1806680	1808200	crushing it. Yeah
1808200	1810760	Okay, so Gil's gonna take over for this next part
1811800	1813800	And maybe
1814840	1817200	I'm not gonna move this one. Yeah. Yeah, it's impossible
1820480	1822480	Okay, so
1822600	1824600	We've sort of looked at you can still run
1825800	1831180	Sort of a sub process command like a regular term a regular terminal command shell command and you can also run
1832800	1836080	Python, you know models and functions and you can sort of you know
1836600	1838960	set them to environment variables and then use that but
1839520	1844680	Where this really starts to come into play is when you want to be able to start mixing those two things together to sort of get
1844680	1846680	the best of both worlds
1848560	1853320	So the idea here is that in a lot of ways conscious makes up using sub process really really simple
1853600	1858440	Instead of trying to remember like we do set this like sub process type thing somewhere
1858440	1863920	And how are you gonna like parse the output and all that we just all that's being handled for you in sort of a more intuitive way
1864920	1873520	And we have a number of operators we've added to sort of help with this interaction between sort of sub process mode and Python mode
1874320	1876320	so the first of these is
1876640	1878640	dollar curly brace
1879360	1883200	Parentheses. Yes. Sorry. I do remember what keys are sort of
1883840	1891640	And what it does actually similar to bash is it captures the output of a command, but then it returns as it returns it as a string
1892640	1895480	And it really does return the whole string, right?
1895480	1899480	So, you know the output of LS has a bunch of line breaks in it
1899480	1905600	So there are a bunch of line breaks in the output what that means that if you print it you actually get what the output of that was
1906640	1908640	similarly it is a
1909840	1911840	It's a string right like a Python string
1912040	1916040	so if you type you know x dot and then hit tab or something or just
1916840	1920680	Like you have all of the Python string methods available to you
1920680	1924640	So if you wanted to split that say on new lines, which might be a useful thing to do with LS
1924640	1929440	Or you really like uppercase letters and you want to do that or however you want to
1930560	1934600	Mutate and parse and change that captured output all of
1935160	1936560	Python's built-in
1936560	1941200	Helpers are already there for you. You don't need to sit there and like try to write these things yourself
1946440	1951520	Okay, so the second is bang parenz
1952920	1954120	and
1954120	1957040	This does the same thing and then also other stuff
1957400	1962440	So what it actually is returning if you run a command with this is a command pipeline object
1962440	1964520	Which is a sort of a conch thing
1965120	1969280	And it includes the output of the command as well
1969280	1974360	But also a bunch of information about like like the PID of the process what the return code was
1974680	1982360	What the actual argument you ran was if it was an alias, what did it expand out to what are the starting stopping time stamps of that command?
1982920	1984920	and also
1985200	1992240	This object itself is truthy. So if the return code is a success then you can actually say like you know if
1992960	1999200	Bang this command, you know like print this command and if it if it's successful then that you can use that for control flow
1999360	2001360	So there's sort of a way to easily
2002080	2004880	Figure out like I tried to do this thing was successful. Yes, or no
2004880	2006760	What was the output if it was successful?
2006760	2013560	How long did it take like all of this is just available to you and sort of the the the command pipeline object that's returned I?
2014600	2016600	Think this is what I just said. Yeah, I
2020080	2024800	Didn't do it command, but that's okay. That's all right. Does anybody have any questions about those?
2031360	2033360	Yes, and some although in Python. It's a
2034240	2036400	Tilde yeah, yeah, yeah, that's right
2036400	2044220	So in in Python if you wanted to negate something you use not or tilde or till does it the invert operator, but yeah
2044760	2046760	Yeah
2047880	2049880	Okay
2051560	2058560	Okay, also so you can iterate over the output of these commands line by line in bang exclamation point. Yes
2061360	2063360	I
2071640	2077640	In enumerate LS and then print what does it have string?
2082400	2085260	And then just I and look
2091360	2096560	Probably should have stripped look, but that's that's okay. That's okay. We can do it next time. Yeah
2101680	2108300	For example, right, so the new lines are still in that look in that object that look object that ends up there
2108960	2110960	And this is streaming by the way
2111400	2116600	So that if you wanted to stream through your command, right if you've got output that's larger than memory
2116600	2118600	This is how you you'd use
2118840	2121360	Bang parentheses for for that. So
2122280	2124800	Also in the list of things that we may have not mentioned
2125200	2126840	There is this
2126840	2130680	Multi-line prompt thing that keeps happening that we've just sort of been using without mentioning
2131360	2134920	But yeah, so it's like in the same way that I Python functions. This is a
2135640	2141520	Full you can just keep you know as long as your you can either shift return to maintain like to force a new line
2141600	2144100	But you as long as the command isn't complete
2144100	2149340	It'll just keep adding a new line for you to type on two entries at the end will run the thing and then when you arrow up through
2149340	2153260	Your history it will load up the full command like the full command block for you
2153260	2157300	You don't need to like go and hit arrow up for each of those individual lines. You were doing right
2157300	2160860	So I just hit arrow up there once and I returned the whole input
2166540	2171300	So we just went over those are captured sub processes and then there are uncaptured sub processes
2171300	2178420	so here again, we're using a dollar sign and bang but this time using square braces and
2178980	2185380	They function the same way as the captured ones except they they don't capture and so the output of the command
2185860	2191380	Still goes through to the screen to standard out or standard error depending, but you can still capture that
2192180	2194180	metadata along with it
2194700	2196700	So in the case of
2196900	2198900	dollar sign square braces
2199500	2203580	It always returns none actually and so this is
2205060	2206540	More for
2206540	2209660	Forcing sub process mode where the context may be a little ambiguous
2209660	2213980	You want to say like don't try to interpret this as python just run this as a command instead
2217020	2219020	The bang
2219860	2221860	Bracket there
2221860	2227380	So the output gets streamed to standard out still so you see it and it would run as if you just ran the command regularly
2227460	2229460	But at the same time
2230460	2234420	Similar to the information from the capture sub process about the you know
2234420	2240660	Starting and stopping times the arguments that were passed in if it was successful or not all of that is returned
2241140	2243140	As a result of that
2243260	2247500	Operator so you can have the output still kind of like showing in front of you
2247500	2252780	But still be operating on sort of you know, what were the conditions of that command did it execute successfully?
2252780	2254780	Should I stop should I continue?
2254940	2262140	Right, so you get this rich command pipeline object back out that you can manipulate and this particular bit of syntax is
2262220	2264540	The thing that really underlies a lot of conch
2265580	2270700	So the what's actually happening. So if you just run LS here
2271100	2278340	What conch is doing is it's secretly adding in a bang square bracket around that LS?
2278500	2281500	That's it
2285420	2287820	Okay, right column type good. Oh, yeah
2289500	2295660	So now that we there I would suggest we just take a few moments and just to play with each of these a little bit to get a
2295660	2297100	Handle on them
2297100	2302180	This is basically the end of like new syntax that we're gonna introduce largely wait except for one big one coming up
2303020	2308620	But just to kind of get a sense like of how they work make sure that they match your expectations like you know
2308620	2310820	Which what should be captured what shouldn't be captured?
2311060	2316420	How do you interact with the attributes of these returned command pipeline objects? What is in there?
2316940	2319260	Is there something you would like to be in there? That's not we can talk
2319940	2322780	You can definitely work on that and just as a general
2323300	2325540	Mnemonic for this because it's you know bunch of stuff
2325540	2328660	I've sort of come up with like curly captures and square streams
2328860	2331580	And it's a bit misleading because it's all sort of streaming in one sense
2331580	2336700	But like if you want output to not show up use the curly things if you do want it to show up use the square things
2339180	2344300	Does does anyone have any questions about this stuff, you know, we just threw a lot at you yeah back there
2344740	2346740	The last one
2353540	2357140	Almost so bang square bracket prints it but
2357700	2362500	Does save it to the variable and then bang Kurt bang parentheses
2363260	2366420	Prince it, but then doesn't save it to the variable. I
2368420	2370420	Know yeah, so
2371420	2374460	Basically what what's going on here is that?
2376660	2378660	Dollar sign
2379300	2380700	parentheses
2380700	2388420	Returns a string right it doesn't print it, but if we wanted to stream that so we use bang. What should that return?
2393460	2398500	Sorry, yeah, so what should that return?
2400420	2402420	None right because
2403620	2405620	No, it's not
2405860	2407940	Did I do something wrong? Yeah, what did I do?
2410820	2412820	No, not all it's not
2414300	2418580	No, it's still maybe it's that it's like when you do a sign
2421940	2426300	No, that's still the thing so oh no, sorry, haha I did this wrong
2427300	2429380	Yeah
2429380	2437140	So if you do dollar sign if you change these two square brackets because you want to stream the square brackets kind of look like pipes
2439180	2443340	That should return none rather than a string because there's no there's nothing to return
2444460	2446060	You're already
2446060	2452180	This this the coat the output that's coming in has already already been consumed and printed
2452180	2455380	And so it's been streamed and there's nothing left to return
2455740	2457740	the
2459660	2466820	Which is why you see like because we did this is none we actually got this we got this true printed behind us
2467380	2471780	Even because the the command actually printed right we didn't capture it
2472860	2474860	if you wanted to
2475300	2477300	capture it
2478020	2480020	Or if you wanted to do you know bang
2480900	2485100	Parentheses the bang is what gives you the object back
2486020	2491180	And whether it's streaming or not is determined based on whether it's square brackets or not
2495300	2500420	Yeah, so so the way to think about this is dollar sign return strings
2501780	2503780	and
2503980	2505980	bang will return
2506020	2514340	Something else and then square brackets or in parentheses will capture and square brackets will stream
2517860	2519860	90 yeah
2526100	2531340	There is there is functionally no difference between bang with square brackets and bang with
2532580	2534900	And and just typing the LS command
2535500	2537500	Except in ambiguous cases
2537900	2542420	so in cases where you have both a Python function and a
2543300	2550740	System command with the same name or a Python variable and a system command with the same name like say I just said
2551260	2556820	echo equals Wow or something right if I now went to run like echo
2559060	2561060	Hello world
2562060	2567740	Well that'll work because the syntax is not ambiguous, but like let's say I went to write like
2568860	2570220	echo
2570220	2571300	like
2571300	2573300	dash
2574820	2578020	What's another echo minus echo for example
2578620	2580620	Which would be torque totally?
2580900	2588300	Normal well, okay that but we would want to print minus echo right in a normal in a normal shell
2588380	2595780	But both of these are variables, and so if you need to you can always explicitly put it in bang square brackets
2595780	2597780	And then it'll run
2599300	2605480	Yeah, so there's two things going on here, so or there's one thing going on here one or two so there's
2609180	2612940	If you're observing it there are two and then yeah, it's it's complicated
2613940	2621140	Basically, what's happening is there's a formal conch language that always uses bang square bracket
2621980	2624740	Okay, and then we have
2625580	2627020	What we call?
2627020	2633300	So there's a context free grammar that we use that always uses the square brackets
2633740	2637380	Then we do this context aware
2638220	2645500	Grammar munging so we know because we know what's on your what commands are available and what your
2645940	2653060	Execution context is we can shoot we actually go back and rewrite the AST of your code
2653540	2655540	In such a way that we think it will execute
2656940	2658940	Before we try to execute it
2659500	2661500	And that's what's going on
2661500	2667220	And so if you need to you can always go to the formal grammar and you can even turn that off
2667900	2674220	In the in the exact we're definitely not doing that in this tutorial, but you can turn that off and make sure it's always formal
2675100	2679540	That's a terrible way to live because you always have to type this bang exclamation point
2679540	2686060	The whole idea behind conscious to make the things as easy as possible and match what your brain thinks it should be doing
2686140	2692860	Like your brain thinks, you know ls-l should be a command and it just because that's not a python variable
2692860	2695420	Doesn't mean it shouldn't be a it shouldn't be something that works
2695420	2702780	And so we have a lot of like heuristics that are relatively simple that get get you incredibly far
2703740	2710300	And but if those heuristics fail for some reason which they are they it's very very infrequent
2710300	2712300	You can always go back to the formal grammar
2712540	2714540	so
2717020	2719020	But
2722020	2725220	Yeah, I should maybe say curves cat mnemonics are hard
2734260	2740940	So so the curly braces are for like with the dollar curly braces for like an environment lookup or for accessing the environment
2741940	2747020	Whereas these are more just generally capturing a command that you're running and capturing the output of it
2749460	2753100	Right so this looks up a variable in the environment
2755620	2760100	Yeah, rather than yeah rather than
2761860	2763860	Running a command so yeah
2770940	2787180	Okay, so so the question so the question is what what's going on here, so you're saying ls equals
2791340	2796460	So if you say ls equals one here, okay, and then you say ls
2797700	2799700	Mot you then you were saying ls
2801380	2803380	Uh-huh
2803740	2810260	Right, so why does this happen well this happens because l is not a variable in your python context
2811180	2815100	If you just do ls, and then we dot it right this is a
2815940	2819020	LS itself is just the integer one
2820100	2826820	Right the the the the bang square brackets are capturing the whole thing
2827460	2839500	So yeah, so if I set l equal to one and I do ls minus l you'll get zero because they're both variables
2842060	2847220	Python always wins right so the Python invite the Python context always wins
2848940	2852660	Yeah, your system is whatever
2853060	2855060	Okay
2858540	2863940	Having thoroughly confused everyone I think now we can just take a few minutes for people just to play around with these a
2863940	2869780	Little more get a sense of what's capturing and what's not what comes back from these commands of what's returned and what's printed
2870500	2872300	Just to build up a little familiarity with it
2872300	2877220	And then we'll continue on and feel free to raise hands and we can either circulate and just answer from the podium
2878220	2884180	And we could fix this curly captures thing from yeah mnemonics
2884860	2888520	Is anyone having issues with their system still or installing or anything?
2889980	2891980	Yeah, or do you want me to come over?
2893900	2900860	Just really quickly we had a question about for people who have used vi mode in terminals or in shelves before and want to do that
2900860	2904480	You can do that. You just need to set vi mode equals true
2907220	2913360	Yeah, and then you can bounce around your current line using you know zero g whatever
2915400	2917400	Yep, and then we'll just load it by default
2917820	2919820	Yeah
2920260	2928700	All right, so I think gil you want to take it away. I will take it away. Are there any lingering questions from our our personal explorations?
2931340	2935460	Great you can also ask us later. That's fine. Yeah, that's totally yeah
2935700	2942020	So the I think this is really the last bit of new syntax we're going to introduce but I could be wrong
2942020	2944340	I'm wrong, but for a while it'll be fine
2945220	2947580	So this is the the Python mode operator
2948660	2951820	So we've been talking for the last bit about how you
2953780	2955580	Kind of capture
2955580	2960100	Subprocess output and then you know turned into you like a Python string of this command pipeline object
2960100	2964020	And then how you can play around with it and inspect it and do things with it
2964020	2966020	but
2968340	2969580	The
2969580	2977580	The at-paran operator lets you go the other way it lets you insert things from your Python sort of scope or environment into a
2978260	2980260	sub-process command
2980460	2982700	So what we mean is generally
2983540	2986540	Conscious like parsing is pretty clever at this stuff
2986540	2989100	So if you give it for instance this command like for
2989700	2996860	Something in range to and then just run echo high underneath that it will do the right thing right you can put your
2997420	2999620	Like echo or LS or whatever
3000100	3005180	Subprocess command you want in the body of a for loop and it will just execute as many times you tell it to do and you don't need
3005180	3007180	To do anything special that actually just works
3007780	3009380	right
3009380	3011380	What does not just work is?
3012220	3014220	If you do this
3015060	3020300	So you want to instead you know iterate over the value in the for loop and have it be printed
3024140	3028180	You just get I twice right so because it runs that command twice
3029460	3033740	And so what the at parentheses operator does it lets you
3034660	3038420	Capture that Python variable and insert it into that command
3039420	3046540	So what it does it what's actually doing is it's it's evaluating an arbitrary Python expression and then returning that value as a string
3046540	3050460	And that can be fed into the sub-process command in this case echo
3054780	3062300	And if the output is not a string in case of like lists or sets it just gets joined and returned as a string
3065220	3068180	So that's what that well, so it's a little different than that actually
3068860	3071540	Sorry to want want want
3072500	3073860	each
3073860	3078580	Element of the string is actually getting passed in as its own argument to the command
3079860	3083100	So each of these are their own command arguments
3084820	3088300	So and it's just that echo happens to join them together
3089620	3091620	So
3093380	3097300	Yeah, thanks for closing the door we're gonna close not a good idea
3099300	3101300	I
3104340	3108380	Any questions about this syntax or what it's doing
3109980	3111980	Yeah
3115100	3120820	Yeah, so like if we did LS LS would try to search for all of these
3121500	3128140	Files individually. Yeah, it's running it for for each. Yeah, cuz LS takes a
3128460	3130460	big argument list like that
3134260	3137100	If it's iterable and not a string
3138660	3141060	Right, yeah the normal way
3148740	3150740	Yes
3151260	3153260	Right
3157420	3160100	That's what LS does yeah, yeah
3160100	3167820	It's just passing each Python thing in as its own each element of the putt list is its own argument or tuple or whatever
3171900	3179260	Yes, exactly, it's a it's essentially echo zero one two or echo, you know or LS zero one two
3181540	3183540	Yeah
3185220	3193140	Okay, yeah, so if the result of the operator two is in the first position it gets treated as an alias
3193660	3195980	So you can actually have this execute commands
3202780	3208620	Probably like not something don't do this mine. I guess it's a really bad pattern, but it does that
3209620	3215500	Right, but this is the this is different because if you I've got a my
3216260	3219020	My trace back printing on but you can see
3220660	3223580	If you try to just print this
3224260	3230580	Or if you try to run it without splitting that is treated as the command the name of the command spaces included
3230580	3232740	And so then it can't find the command cuz hello
3233780	3236780	Commit hello there echo. Hello. There is not a valid command
3239340	3241340	Okay
3244180	3246180	Okay
3246900	3251900	Your promise for more syntax is already broken. You should just stop. I'm gonna stop saying it now
3254940	3257300	So with apologies
3260700	3263780	So you can wrap a regular expression in back ticks
3264540	3272100	And what it will do is return a list of every file or you know thing in that in a directory that matches that regular expression as a list
3276380	3278840	And it's a Python list which means you can
3280260	3283940	iterate over it you can you know like stick it in
3284900	3288100	List comprehension and you know like mutate all the names
3289340	3292660	And you can actually do even more stuff with these things as you kind of go along
3294780	3296780	If you're about yes
3301660	3305060	It's the Python rejects. Yeah, yeah, it's just the re module
3305620	3309500	Yeah, just a handy way to get into re.compile
3311380	3313380	Yeah
3315780	3317780	No, no, these are not globs
3318500	3321340	Dot dot star is a rejects a
3322180	3324180	Glob would just be star
3327860	3332220	Yeah, anything and so we could maybe a better example would be what's a
3342300	3349180	Okay, so we've got some pings in here right so like what if we wanted to if we wanted to like grab I
3350020	3352420	Guess we don't have a lot with anything
3353500	3360180	With I want I want png's that have the letter zero letter o and them. Yeah, so like that's right. Yeah, so do
3361180	3363180	dot star oh
3364500	3370940	Dot star dot slash dot png
3371420	3382620	But also regular expressions are hard so if you if you wanted to use globs, let's just say somebody had mentioned that
3384140	3387220	Then you can prefix the back ticks the G
3388220	3394500	And then it is glob matching so you don't need to do the dot thing that's just you know like star dot md star dot png
3394500	3399340	Star whatever and as an extra special bonus in Python, I think three six and above
3399780	3402620	this supports recursive globing the way that
3403940	3409580	Then the glob lever it does so if you do like a star star slash star dot md
3409620	3416740	That will recursively glob through the entire directory structure from where you are and find every single markdown file in that whole chunk
3416780	3419700	This can take a long time like beat like use this
3419700	3423240	You know like if you don't find it your route and it takes forever like same thing
3423840	3429400	But it's really really handy for finding all the sort of files or patterns matching something in a in a large area
3431920	3433920	Any questions on
3445000	3449360	Yeah, so um we can't we can't oh so the question is like
3449360	3455760	What are the use cases that led us to create all these things and just as a as a as a general like contra creation story?
3457000	3460640	Almost everything in here is something we were like, you know what we really need to do thing
3460640	3468320	We need to do today is this thing and then we did that so they they were all created from actual and us and other
3468440	3471680	Contributors people who are like I really need this to do thing X
3472680	3478680	And then what we discovered along the ways that a lot of it tied in together really well without it without us having to do anything extra
3479360	3483640	We'll come up on some of that stuff around the way some of the string matching and string literals work
3484120	3490440	So like one thing I just showed for the globs in particular right like being able to loop through a globb list is
3490920	3494880	With this syntax is a lot nicer. Yeah, right. Yeah
3496000	3498000	Yeah
3498200	3500200	Between
3506880	3514720	So yeah, so the the question is about trading off between Python module CLI and writing something in conch for me
3514760	3521680	It's a really about how much your hammering sub process. So if you're interacting with sub process a lot
3522720	3526880	Like do not write it in a Python CLA right write it in conch
3527120	3530880	If you want some of these extra fancy features
3531640	3533640	Like you really just want to be able to glob
3534000	3540320	Tick things like very quickly or you want to like search through whatever then like do you know do it in conch as well?
3540320	3542320	That that's my kind of
3542360	3546320	We'll see some other syntax later where there's conch specific things
3546480	3550000	But at this point it's kind of like if you're doing a ton of like
3550760	3552320	basically scripting
3552320	3553600	You know
3553600	3558480	Like then you should be using conch because it's actually meant as a scripting language unlike Python
3562240	3565160	Oh, yeah, yeah, yeah, well we can talk about those afterwards
3565520	3570080	Yeah, yeah, for sure first for people who work at a certain institution. They can also use all my internal ones just saying
3570840	3573560	Sorry, everyone else. I'll show you other things, but um, yeah
3575080	3577080	Tom I think you're next
3578080	3580080	Some
3580440	3586000	Yes, yep, so the question is can you import conch code and use some of this stuff in Python?
3597240	3599240	So we don't have an
3599800	3605880	Yes, if we haven't we have we don't have that particular use case lined out so much but
3607080	3611000	I would say there are two things there. So one we have a
3612000	3614600	Quote-unquote standard library where we have sort of
3615000	3620200	Extensions and updates to standard library things to make it easier so you can do like import conch.lib.os
3621320	3625680	And you get some like like you get a remove tree that actually works on all platforms and
3626200	3633000	You get like if you do like some process you get a version of run that uses our thing and returns the command pipeline object
3634000	3637200	And you can also just get an executor back
3637200	3642760	And then you can like like you would run conch code and you're like you would run Python code through a normal like
3643080	3647200	Exact thing and you can do that that might not be what you want exactly
3648320	3652040	But I like the way your brain is thinking so maybe we should talk more about that
3652720	3654720	afterwards, yeah, so
3654720	3656880	And there was another question back there. I think yeah
3663000	3674000	Yeah, in regex if right, so it's just a normal
3675400	3677360	You just have to do
3677360	3681200	Right, like say let me just go back to my home directory. So the question is about
3681960	3689760	How do you get your dot files with a regex? Well, you just use backslash dot, which is the regex
3690760	3698800	The regex escape character for the dot character. So the oops, let me go back up and show you
3699320	3701320	Apparently I've got a lot of configuration
3704560	3706560	So you would do
3707600	3709600	Don't tell anyone
3711320	3713320	Yeah, I'm secretly a bash user
3715040	3719160	The so you do backslash dot and then dot star
3720760	3725360	To match anything right so the the backslash dot is a literal period
3733400	3739040	So I would argue that it's more sane than a lot so the question is about history
3739040	3745600	How does conch deal with multi-terminal history so conch sort of cribs from the Jupiter playbook a bit so
3746160	3752880	By default all of your history is stored per session in a JSON file in
3753320	3755320	the standard like
3755720	3762320	Configuration location so you can go back and get each sessions history and then the terminal application itself
3762400	3768360	Will present that to you in whatever nice way it needs to you can also switch to a sequel light history back end
3768360	3770360	if you want to store a sequel light
3770360	3772120	there is
3772160	3780240	Tons of there's basically as much metadata as you want in the in the history and that's very configurable through environment variables
3780800	3782640	Not going to go through that right now
3782640	3788000	But I was like that was the thing that that sold me unconsciously was like I was trying to figure out how I'd compile the certain version of
3788000	3790200	Petsy and I couldn't remember which environment variables
3790200	3794180	I had set when I ran the thing and like you can't figure it out you look at your back history like well
3794180	3798760	It was one of these seven because it and then you know you do this in contra like oh it was this term
3798760	3802680	It was this session when I ran this thing in the tests past those are all the environment variables
3802680	3804680	I need because they're just in one self-contained file
3807360	3809360	Did you have a question over here?
3813000	3818840	Yes, if you run source bash you'll get the aliases from that with one caveat
3818840	3820440	You might have actually seen this pop up on the screen
3820440	3824680	Which is that if there are there are collisions in certain aliases and also there are things the z-shell
3824680	3828880	Especially does is they have like their own built-ins and if the alias refers to those built-ins
3828880	3833240	We don't pull them in because it'll just break when you try to run it because it's gonna look for a command that doesn't exist
3837040	3840440	There's I think there's some experimental some yeah, some people have done that
3840880	3846880	But yeah, I don't use it. So but yeah, there are people who do that. We're happy to help try to figure that out though
3847680	3849680	Well, I am anyway
3850040	3852040	Okay, move on but
3853000	3854400	So
3854400	3857600	Next up this is not new syntax for contrary way, but it's Python. So
3858200	3860200	Formatted string literals are great
3860320	3866000	And they're part of Python, which means if you are running punch on Python three six or higher, which you should be
3866920	3868920	Then they just work
3869440	3871480	And they're really fantastic if you haven't played with these
3871480	3876400	I think they're like they're my favorites like simple thing that should have always been there. I think I really enjoy them
3877520	3879520	And yeah, the way they work if you have a
3880400	3886320	Variable defined then instead of doing a dot format or doing like the you know parentheses, you know argument
3886320	3889400	You can just have a string pre-pended with an F
3889440	3895760	You wrap curly braces around the variable and it just gets evaluated at you know at that time and then prints the results
3895760	3897760	So it's very handy
3898520	3900520	There
3900680	3904040	We also have a thing that is not in play on which is called a path string literal
3904800	3906800	and this
3906960	3914000	If you prepend a string with a P and then you have a quote what it returns is a path lib path object of
3914240	3921000	The string that's there. So for instance, if you were I went the wrong way if you do like path equals
3923360	3925360	Thing
3927840	3931600	You got a you know on on Linux you got a posix path on Windows you got something else
3931600	3933680	But it's just using path live under the hood so it'll work
3934480	3938640	If you save that to a thing you can also then use tab completion on this object
3939280	3941200	Like check does that folder exist or not?
3941200	3945440	You could then create that folder or I mean path. This is just using path. The path is great
3945440	3948400	But we have this sort of shortcut syntax to get into it
3953040	3956800	Oh, and I'll get there just a little great thing about path lib is that you can do
3957560	3962360	path joining using the they out overloaded the division operator for this so you just do like
3963080	3968520	Path of object divided by thing and it does the join correctly depending on the underlying operating system
3968520	3973240	So it takes like all of that deep pain out of like trying to get stuff to work on windows and Linux at the same time
3975960	3977400	Yeah
3977400	3984280	So there are f strings from python we've added p strings the the natural question is what what does a pf string look like?
3986440	3991720	And it looks like awesome is what it looks like so you can define variables
3993000	3994120	um
3994120	3995720	and then
3995720	3997160	you can
3997160	3998840	Say pf
3998840	4003240	And then a string and then you can treat it like an f string in the sense that you can put curly braces
4003240	4005880	And it will fill in the value of those variables in the string
4006200	4013160	But it's also saying this should be a path lib path so it returns you a path lib path of the result of the f string
4016120	4019720	If you have ever done a lot of painful dev ops this just might seem appealing in some way
4020280	4021160	um
4021160	4025960	And the other really handy thing here is uh that the environment variables
4026360	4028360	They are also python objects
4028680	4032760	So you can evaluate those in f strings, which means you can evaluate those in pf strings
4032760	4038680	Which means you can start chaining together environment variables and other values and other things to sort of construct
4039320	4041720	Paths and folders and file locations
4042280	4047880	Programmatically and then once you have the path lib thing you can start saying does this exist great if not touch it like now add
4047880	4051240	It over here and now move it over here. No do this thing and all of these things will be
4053080	4056440	Cross-platform because uh, it's just using path lib under the hood
4056520	4060520	So it doesn't you know, you don't have to worry about which slash you're using or what's being escaped appropriately
4063880	4067160	Yeah, hopefully um any questions on this stuff
4069640	4071640	Not too bad, okay
4071640	4073000	okay
4073000	4079640	So, uh, we have a couple of exercises here the first one is to look up the absolute file path of every markdown file and the tutorial repo
4080040	4083320	Just you know, you can use whatever you want. You can use bash if you want to too. That's fine. Um
4085000	4087400	But pf strings and glob ticks are probably your friends here
4088600	4091000	um, and then um
4091400	4096120	A phone here is uh to load up a dictionary of every conda package you have installed in your current environment
4096600	4099000	If you're not using conda you can just skip this one. That's okay
4099160	4105720	If you have a questions, of course, just ask us and we'll come around
4110920	4113240	Yeah, so load it up as a python dictionary
4120200	4121400	Well
4121400	4126840	The hint is important. Yeah, I run that conda list json command and then I would go from there. Yeah
4129400	4131400	All right
4132280	4137640	Okay, well then I think we'll go on to the next section, which is the environment
4139880	4143640	Um, so we um, we touched on this earlier just for a moment
4143640	4146440	But this will be a little more of what's going on and what you can do with it
4147000	4150200	um, so the uh environment actually lives in
4150920	4155480	Dunder conch dot env that's the everything in in conch is living in this dunder conch thing
4155480	4160440	Like that's where all of the the various bits and pieces are if you want to explore and play around. It's all in there. Um,
4161160	4163000	but uh
4163000	4164120	The um
4164120	4168520	The dollar curly brace ellipsis is the is a shortcut to that that object
4168520	4171400	So you don't have to always just type dunder conch dot em to get there
4172360	4173240	um
4173240	4179560	As we mentioned earlier just ready you can check for membership in the environment just using, you know string in
4180360	4182360	environment
4183160	4190360	And you can also ask for help for environment variables. So there are a lot of environment a lot of different modes and
4191640	4194120	Kind of extras are enabled via environment variable
4194920	4199240	So if you know the name of the environment variable you see it they all have default values
4199240	4203000	So if you see something that is in your environment, you're like, what is auto cd and why is it false?
4203480	4206040	You can ask for help and it will tell you
4206760	4209800	That if you turn it on then you can just type the name of directory and if it exists
4209880	4212040	It'll just cd into it without you having to type cd
4213240	4214440	Um
4214440	4215960	Huh
4215960	4218280	Yeah, the help is a method. Yeah, help is method
4222040	4226760	Yeah, and also they the docs will tell you if something's configured a month. There are a few environment variables that you are not allowed to configure
4228600	4230360	So we don't let you
4230360	4232360	um, so
4232680	4235960	Also something that's very different from uh bashland here
4237800	4239800	Is that um
4240120	4245080	Contra environment variables are python objects. Um, and that also means that they're typed
4246440	4249080	You can begin of arguments about typing in python, but not now, please
4250040	4256200	But they do all have types and um, sometimes those types are actually imposed based on a variable name
4256920	4259960	Particularly and the important ones or anything that ends with path
4260840	4264840	Is going to automatically be converted into what's called an end path
4265800	4269560	And if you've ever had the scenario, let's just we can we can do a show of hands or not
4269560	4272120	But where you've like sourced your bash rc twice
4272600	4276680	And now your path is your entire path and then your entire path and then something else again
4277640	4280120	Wow, we've got four. Wow. Wow. That's just not even the
4280680	4282520	That was that that was a raised hand. Yeah, so we've we've all
4282760	4286040	Many of us have been have been in this pain place before that's terrible
4287080	4293400	So in conch that is not this is not a colon delimited string and which comes back to how do you split a non white space delimited string?
4293800	4296360	Anyway, um, you don't because that's terrible
4297000	4299000	But so path is an end path
4299080	4302680	Which just means that it's a it's a list of the items on your path
4302760	4309800	But this acts like a list which means you can do things like pop individual elements at arbitrary positions out of the path
4310200	4314040	Or you can insert directories into arbitrary positions in the path
4315720	4317720	Which is great
4319000	4321000	Really really great
4321560	4323560	Yeah
4329080	4332440	No, it's just so just in this if you're if you're mutating your path in your session here
4332840	4335160	It it will last for that session until you exit out
4335240	4339560	It won't like also it will not like translate like a separate terminal into you have open
4339800	4343640	Those are going to be totally separate if you want the question is if you start conch
4344120	4347400	When you play the path and then exit it you're backing the root bash show
4348360	4355160	Yes, yeah, yeah, but if you so if you wanted to do path manipulation for all of conch you would put that in your conch RC
4358360	4361400	No, because why are you launching conch from bash just that is your
4362760	4365240	I mean that that's the real answer, but the
4366200	4368200	the reason you can't do that is
4368520	4373640	Uh, it has to do with how processes communicate. And so if you want to push
4374440	4377000	Environment variables into a parent process
4377640	4379640	The parent process has to source
4380440	4382440	Something coming from the child
4383160	4385560	And so you have to be able to source
4386120	4391400	Like you would have to get conch to dump out the environment in a way that like bash or something could source
4403640	4405640	Again
4411000	4413480	So so we do that. Yeah, yeah, so you okay, so
4414280	4417720	Maybe there's a solution for you. It'll be ugly, but it'll work. Maybe you find out
4418760	4421560	Yeah, yeah all this all sub processes get this path
4424120	4428040	Well, sorry the question is is how are you the question is how are you supposed to start conch?
4428360	4431400	So there's there's basically two ways to do it maybe three
4431400	4434280	I'm going to say two one is you open a terminal
4434520	4437960	It's running some like 1970s piece of software doesn't work really well
4438200	4440520	And then you type conch and then you're in something better and newer
4441240	4445240	The other thing is depending on your on your operating system of choice
4445400	4448040	You can just have it start as your default shell on linux
4448040	4452440	This means adding it to etsy shells and then setting it on if using i-term
4452440	4455160	You can actually just have a profile that launch that you can say like
4455160	4458280	I want you to launch this executable when I open a terminal or this profile
4458360	4464040	Yeah, basically any terminal emulator in the unix land will let you set the the launch program
4464040	4466040	So you just set that to conch
4466040	4471960	Or you change your etsy shadow or you change your etsy shadow if you want it to be a true login shell, which conch can be
4477080	4480760	So yeah, it's in conch back there's docs there also there are docs on that on the website
4480760	4484840	So if you really there's platform specific doc, so if you want to go look up that you can see that
4484920	4486920	It's right in the at the very top
4488680	4493000	So the paths are n paths are back environment stuff other variables are booleans other ints
4493960	4499560	Whatever they are like when you grab that environment variable in conch it will be its true type, you know, it'll tell you that
4500600	4504600	That said if you need to like some some subprosk man's require
4505000	4508600	You know these things to be fed to them as strings and so conch does that for you
4509240	4513480	And by de typing it and you can also explicitly request these de typed things
4514520	4517560	So you're asking like how do you manipulate your path and then do it you could
4518360	4519560	I mean
4519560	4521400	Like de type it
4521400	4524360	overwrite your bash rc exit out and then source again
4525400	4526920	that would be
4526920	4532600	Moderately terrible, but it would work as long as it was an absolute path and you weren't like recursively sourcing it would probably work. Yeah
4537320	4539320	Yeah, you can also do de type get back
4540600	4543480	Yeah, and so that will depending on what it should look like
4544200	4548200	In the base environment will do you know give back zeros or ones not trues and
4550760	4553560	Paths get get turned into colon delimited strings
4556200	4558200	Yeah
4559560	4564360	There's a couple of other handy methods on the environment itself
4565320	4567640	In particular one that's very handy is swap
4568600	4570680	And so what swap does is what swap does with
4571480	4577800	In general actually, but so you can swap in a new value
4578200	4581160	It basically overwrite something and it's a context manager
4581400	4584600	So only for that block of the context manager
4584680	4590600	You can mutate certain elements of your environment and then they will get undone as soon as you are out of the context manager
4597560	4599560	Like
4599560	4601560	That
4602680	4604040	Then
4604040	4606200	If we try to access this down here
4607160	4610680	It doesn't work because some of our has been removed from the environment
4611880	4613880	So this is really useful for like
4614360	4618680	Temporarily modifying your path or temporarily entering like a new in
4619400	4624600	A new context that you need to run something in like say you want to switch between a million versions of CUDA for some reason
4624920	4627560	Like this is a way to no one would ever do that. No one would ever do that
4628280	4630280	Come see my tutorial tomorrow
4632920	4634920	Okay, yes
4650920	4652040	So
4652040	4657560	The answer is both yes and no so we don't have a particular syntax for doing that yet because that
4657880	4663560	Turns out to be pretty complicated in some edge cases that we'd like to work in conch that don't work in bash
4663640	4669240	But that's a whole separate thing, but you can always run commands through nv. So if you wanted to do
4670280	4672280	nv sum var
4672680	4674280	You know
4674280	4676280	Equals 10
4676760	4678760	echo
4679800	4681800	Sum var
4682680	4686920	Uh, well actually that so that doesn't work in bash either. I think is the thing
4687000	4691560	Yeah, that's one of those that this is one of the things that doesn't work in bash that we would like to
4692280	4695960	Have work in conch and so this is why this uh
4699160	4705240	This is why this like we really want that to work and and that the fact that that doesn't work is why we have
4706040	4709960	Swap and other things, but if you wanted to set other environment variables and things like that you can
4713000	4715000	Uh
4715720	4718600	In bash, I mean well, yeah, so that's a different line
4719480	4723160	Right, so export will export it to everyone and then you have to unset it
4723960	4725480	Which is annoying
4725480	4728120	Uh, if you want to remove it afterwards, right?
4729320	4732600	Yeah, so that's what swap gets you. Yeah, but
4735400	4737400	Uh, yeah
4742280	4745720	Yeah, yeah, you could you could star star keyword arcs into that. Oh, definitely
4749240	4750760	That's there
4750760	4753480	Okay, so we have a few more exercises here using this stuff
4754440	4760840	Um, these are things that I'll say like I I both do on a regular basis like these are these are true life examples
4761240	4765400	um, so one is um use get pass to
4765960	4767960	Temporarily set your password and environment variable
4768120	4774120	So this is actually so far as I can tell the only way to securely type your password into a terminal session without it ever being
4774200	4776280	Saved anywhere like including in your terminal history
4776760	4778040	um
4778040	4785000	and uh the second exercise is this also happens to me a lot which is like if you're um native like package manager
4785400	4790760	Uh, it doesn't like uh like con to curl and keeps like yelling at you because like there's some sham is match
4791240	4791880	um
4791880	4795560	You just want to run an install command and just for that one install command pop
4796280	4799480	Like the front element of your path off, but you don't want to mutate your path forever
4799480	4806840	You just want to do that this one thing. So just you know temporarily mutate your path run some command and then return it
4807880	4810200	I'll give you guys a few minutes. We can circle around answer questions
4812040	4814040	All right, so
4814360	4818920	Before we move on any questions on the previous stuff now that breaks over
4819640	4826120	Uh anything all right, so the next section we're going to be talking about what we call callable aliases
4826760	4827880	so
4827880	4828680	um
4828680	4837320	Callable aliases are basically a way for python functions or python callables and sub processes to exchange code
4838040	4839560	um
4839560	4844440	In a more integrated way than what we've seen through sort of the at operator and some of these other
4845080	4845800	uh
4845880	4852840	Curvy brace or curvy. I forget the mnemonic. This is curvy curvy captures. That's right. Um
4854120	4861640	So we're going to be building up sort of data pipelines in a more uh in a more integrated fashion
4862360	4863240	um
4863240	4869400	And basically what callable aliases allow us to do is run any python function as a sub process command
4869960	4871160	um
4871160	4876680	It's not any python function really uh because it requires a certain set of known signatures
4877160	4879400	But assuming you adhere to that
4880840	4886440	And we're going to be going through what those are uh, then you'll you'll be able to run them. So
4887960	4890360	Uh, they're callables right so that part makes sense
4890920	4896360	They're aliases because they get stuck in what's called the aliases dictionary or the alias is mapping
4896600	4899480	So this is something that gets shoved into built-ins as well
4899960	4902840	Um, and it's just a mapping between all the possible different
4903480	4905400	aliases that exist
4905400	4908680	If you're familiar with other shells, you sort of know what an aliases, right?
4909160	4913160	So and if you're not, uh, you'll see it's just another way to look up commands
4913160	4918520	It's another dictionary to look up commands in uh, does this need to be plugged in? No, okay. All right
4919080	4921080	um
4921080	4922520	so
4922600	4925960	The first function signature is just an empty function signature
4926520	4929880	So and it can return either a string
4930680	4937640	Or in an integer return code where you know zero means success and everything else means various degrees of failure
4938040	4940040	So you can do this with a lambda if you want
4940600	4944680	So go ahead and type this out. So if you say aliases, you know
4945400	4947400	set item banana
4947480	4952600	Equals lambda with no arguments and then banana for scale new line
4953160	4955160	You can then run the banana command
4955880	4959560	That is it. That's the essence of callable aliases
4960200	4962200	And that that should just work
4964200	4968040	Yes, so as tom caswell, i'm going to say his name out loud
4968920	4970920	tom caswell says this is
4972040	4975400	Lambda for your shell server server server lists for yourself shell
4975480	4977480	I'm going to misquote him shamelessly
4978680	4980680	as as well so
4981320	4986600	Okay, matplotlib matplotlib. That's right. Yeah, as long as we're mispronouncing things. I think
4987880	4995000	Okay, so you can pipe this into any other command. So the wc command counts characters and lines and words
4995880	5000200	So if you pass the dash w flag that means to count the words
5000920	5002920	Um based on white space
5003000	5010520	So you can say banana pipe wc dash w and that'll tell you that the output of the banana command has three
5011480	5014120	Three, uh, three words in it, right?
5014280	5017480	and if if you think about what what it would take to do this in
5018360	5020520	in using sub process with
5021320	5023320	streaming data in and out this is
5023880	5027960	Doing a lot behind the cover under the covers to make all of this work for you
5028440	5030440	But it feels pretty natural
5030840	5035720	Right, because it's just a command just a python function. You're running as a command in sub process mode
5037080	5042200	Um, and of course if you want to get rid of that aliases alias because you don't like bananas
5042680	5048200	Um, you can delete that alias in the same way that you would delete any other item out of the dictionary
5048920	5050920	Any questions? Yes?
5051640	5053640	So
5055560	5064440	Swap is for environments and aliases is a totally different mapping. Yeah, uh, having a swap is not a bad idea though
5064600	5066600	Please open an issue
5068360	5073800	There's a banana command on the boondoo. I did not know that there was a banana command on boss. I don't know
5075080	5077080	What are you doing?
5077640	5079640	Where do they live?
5080040	5082040	Where do where do what?
5083400	5087480	Yeah, so aliases live in their own dictionary that gets shoved or
5088040	5090920	Unfortunately aliased uh into built-ins
5091480	5097320	So we're not really in this tutorial talking about how conch does all these tying of things together under the covers
5097640	5101720	But in built-ins, there's an aliases dictionary that you can access at any time
5102680	5110200	Yeah, and that allows it to persist so you can modify aliases or add these commands in your conch RC, and then they all live
5110840	5112680	indefinitely
5112680	5114680	okay
5115400	5119320	Uh, the next is that you can take a single argument which is
5119960	5121960	Uh, the command line arguments
5122360	5125400	So like sys.rdv if you're familiar with that
5125960	5130040	Um, and it's it comes in as a list of strings. So if you provide
5130840	5132840	one argument
5133000	5140860	That's called it. It's typically called args. Then you can take command line parameters. So here's an apple function
5141480	5143480	which takes
5144200	5146600	Takes an args it'll look at it and it'll say
5147560	5149560	Is my args list of length one?
5151640	5159640	And do one thing and if and succeed return zero right because you can return the return code from these functions
5160040	5164200	And if not, um, it'll uh, and otherwise it'll return one
5164920	5166040	so
5166040	5168040	um, yep, and then
5168040	5169560	uh
5169560	5173560	And just showing off another bit of syntax if you use this with the at
5174040	5178280	Python mode operator you can you don't even need to stick this in aliases
5178360	5183800	You can just call it directly because it's a python object. So if you put the command the function
5184680	5187320	at parentheses function as the first argument
5188280	5192280	And then pass in a some command line arguments after that it'll read it in
5195800	5197960	Any questions on how this works
5200040	5202040	Any callable will work
5202840	5204840	Callable classes are are yes
5205720	5209080	Yes, go callable classes. Yeah, this is not limited to
5210200	5212680	functions and and uh, and lambdas and things
5213560	5215560	okay
5216040	5219320	Yeah, and of course there's a formatting bug, but that's whatever
5220360	5222360	Yeah
5222360	5224360	Sure
5239800	5243000	Yeah, so the question is would would you just want this to live in your
5243400	5250680	Your conch execution context the python execution context or would you want this to live in aliases specifically like you might do in bash?
5251000	5252120	um
5252120	5258920	Oftentimes you just you stick them into the aliases dictionary like you do in bash because it's easier to call them
5258920	5260680	It's simpler to call them
5260680	5263960	It's kind of that's kind of the where what that's there for and where it lives
5264600	5266600	If for some reason you don't want to have it
5267320	5272040	There and you just want it to have it have it in your execution context. That's fine. That's fine, too
5273000	5275000	Yeah
5276360	5278200	All right
5278200	5280200	Okay, so let's uh move on
5281320	5282840	so
5282840	5285320	The in the next case you can provide
5286280	5288280	In sequential order
5288520	5290520	Any of standard in standard
5291320	5293320	Out and standard error
5293320	5300280	And these are keyword arguments and they default to none right you may not have one of those streams although usually you have standard in
5301400	5303400	So those come
5303400	5308360	Immediately following the arguments parameter. So here we've got a grape function
5309480	5315240	Or an underscore grape function. This is actually the most common pattern is you have pattern. Sorry. So you have the function
5316440	5318680	Name preceded by an underscore
5319480	5321480	And then you put that into
5322280	5324280	The aliases dictionary without the underscore
5325880	5329400	And basically what these do is these give you file like handles
5329960	5336440	For standard in standard out and standard error. So if these are present you can access them and do whatever you would do normally
5337160	5339720	with those those handles so
5340920	5344760	We do some contact switching under the covers too. So like if you just
5345320	5350360	write to sys.standard in or sys.standard error, etc. That that works as well, but
5351160	5353160	it's usually better and and
5353960	5356280	To write directly to those file handles. So here
5357240	5360760	If you wanted to implement something that's streaming but not asynchronous
5362520	5368520	You would do four line in standard in you'd be reading lines from standard in and then we'd be writing them out
5370040	5373080	Write back out to standard out lowering them as we go
5375000	5377000	Okay
5378040	5380040	Yep
5380520	5382520	The underscore pattern is there because
5383160	5385160	When you source
5385880	5391400	You don't get under you don't get the underscore variables in your execution context
5391960	5394040	Those don't get brought in automatically. So
5394760	5400600	It's a way of hiding things from your execution context if you don't want to pollute the namespace that you're just working in all the time
5401880	5402760	Yeah
5402760	5408600	Okay, so usage here we go. So this takes a standard in and kind of needs it because we didn't check if it was none here
5409000	5410600	so if we spell
5410600	5412360	echo wrath
5412360	5413880	with
5413880	5415880	And then pipe that to our grape command
5416840	5419080	It will lowercase that and write it back out
5421880	5423560	This makes sense to everybody
5423560	5425560	right so the the
5425560	5427000	standard
5427000	5431240	The output of echo wrath becomes the standard in of the grape function
5431480	5437080	Which then operates and then writes back out to what is our our terminals standard out
5437960	5441560	Because that the grape is being called last in the pipeline
5443880	5451880	Okay, um, you can use any of these but if if if you want to use standard error, you have to use standard in and standard out
5454120	5456120	Yeah, that's about it
5457960	5460040	Okay, whoops. Yeah, so
5461960	5465960	Next up is you can also get a handle or a
5466840	5468440	reference to
5468440	5476600	The command specification. So this is a specific object that the command pipeline also has access to it's it's basically how conch
5477240	5484760	Thinks you should be running the command. It's how the command pipeline got set up for that particular sub command
5485240	5487320	Um, so this is a rich python object
5487320	5495160	You can go look at the api if you want to but it it effectively contains all the metadata about how you should be running that command
5495880	5499720	Um, including what goes in what goes out. So that'll come in
5500360	5503400	after the standard in standard out and standard error
5504040	5504840	um
5504840	5510600	And you can do kind of like funny things here. So one of the things you can do is you can you can use this for is you can check
5511240	5512360	whether
5512360	5513880	the
5513880	5519960	Command is meant to be in a captured sub process so that we talked about that before so you can check to see like
5520280	5522920	Am I running this in a captured sub process or not?
5523160	5527480	So this is particularly useful if you want to know if you're connected to a live terminal or not
5528360	5532040	Or if you want to like this is actually used in the witch command pretty frequently
5532760	5535720	Where you don't want to append a new line if you're capturing it
5535960	5539960	If you're just printing it out to the screen, you want the new line to be there because you want everything to look nice
5540280	5541960	but otherwise
5541960	5543720	You don't want the new line to be there. So
5543720	5551880	Um, and you can import part of conch to to do this check for you if it uh, if that makes it easier
5556360	5557720	And
5557720	5564520	Here's just our kiwi and this will have output that looks sort of like this. So if we just run the kiwi command
5566920	5568520	Yep
5568520	5571640	And then end equals end, but you didn't close the code. Yeah
5574680	5576680	And then
5577320	5581960	Yeah, so if you just run the kiwi command on its own in an uncaptured way
5582600	5585960	It will produce the new line in the extra text and if you
5586840	5590440	Capture the kiwi command then it doesn't actually have the new line in it
5592520	5594360	Okay
5594360	5597320	Any any questions on this or use cases?
5600520	5602520	Yeah
5602600	5604760	All right, so let's uh, let's move on
5605560	5609960	um, so the last form of these functions is uh
5610840	5612840	You can get back
5613480	5614760	the
5614760	5618600	stack frame of the call site of the alias
5619160	5621160	So if you need to know
5621960	5624440	the locals and global variables
5625320	5628280	Where the sub process command was being called from
5628760	5633080	You get back the the stack for that if you don't understand what this means
5633560	5638200	Like don't worry about it. You definitely don't need it, but if you do this is like a ridiculous tool
5638680	5641320	um, so please stack responsibly
5642760	5645320	But uh, it it is something that's like
5646120	5648760	You know, we don't need to necessarily dive into this
5648760	5653080	But it is occasionally useful to know what you're what the variables are
5653720	5657160	Around where you're being where the the sub process is being called
5658120	5661400	Um and conch does that tying in for you automatically
5663480	5665480	Any questions on this
5666760	5669880	I know this is this one in particular is a little wacky
5671720	5675400	Okay, so we've got some more exercises. Um, they're all related
5676120	5678120	Uh, which is nice
5678280	5681560	So the first exercise is to write a callable alias
5682040	5685560	which just pulls down the contents of frankenstein
5686040	5691640	And uh writes them out to the screen. So if you look at that link, it's basically the project Gutenberg link
5692040	5698120	Um, and so you can just copy that and and provide an alias that prints out frankenstein to the screen
5698600	5700600	grabbed from the internet
5700680	5703160	Or you can grab it and then print it out however you want
5703720	5705720	um
5705720	5711800	The next is to write an alias that calls upper on the standard input and returns that as output
5712200	5718200	Uh, the next one is to write an alias that returns all of the unique
5718840	5721560	Sorted words coming from standard in
5722360	5723480	um
5723480	5730520	The next one after that is to write an alias that counts the number of white space separated tokens read from standard in
5731160	5737400	And then finally the combine all of those into to a single command pipeline that executes
5742760	5747240	And we will definitely walk around and help or you can look at the the details
5748200	5750200	um
5750360	5754440	Each of these is can't is basically a one liner. So don't overthink it
5756360	5761560	But it's okay to overthink it if it gets the job done. I think that's fully qualified
5772280	5774280	Okay, so
5774280	5776040	um
5776040	5778040	So for the first one if you
5779320	5782120	Uh, you don't need to use python necessarily
5782920	5788920	To to do this so much you can just set set an alias to frankenstein that is a
5790200	5791400	lambda
5791400	5797960	That calls curl or w getter whatever on that url and that will grab
5798760	5804760	That url that we listed just straight away. So if you're using requests or something you you can definitely do that
5804760	5809080	That's totally fine, but you don't need to so you can use a command here
5809800	5811560	um
5811560	5813560	Yeah
5814120	5817080	So if you're getting stuck on that that's that's there
5819800	5825480	And then yep, I'm sorry. All right, I'll come over so or but we should uh, should we do the second one too?
5826280	5827480	Yeah
5827480	5829480	So for the second one
5829880	5831880	If you want an upper
5832360	5835800	All you have to do is take both args and standard in
5836760	5839480	Just read everything from standard in
5840200	5843240	And then call which is a string and then return
5844200	5848360	The upper of that string you could also do it in this streaming version
5848680	5853320	Where you have lines that you're reading from and then writing them back out to standard out
5853480	5855980	It's a little more complicated. You don't really need to do that
5862280	5864280	So for the third example
5864920	5868120	um, or the third exercise here, we do something
5868920	5870920	pretty similar where
5871080	5874120	um to the other where we want to count of words
5874680	5877720	um, so the way that you do this is you read from standard in
5878440	5880440	um, and then you
5880440	5884600	Split those split based on the white space, right? We're all pretty familiar with that
5885080	5889560	Um, if you want the unique, right? So that'll give you this big word list in order
5889880	5893960	If you want to unique that you call set around it to get the unique words
5894600	5899720	And then if you want them sorted you call sort it around that and then you join based on new lines
5900440	5905320	So that you output a string again, and that's the uh, that's the thing that you return
5906040	5911160	It's kind of a lot of parentheses, but it gets the job done in one line
5911240	5914840	You could do it in more lines if you wanted to clean it up like we did in some of the other examples
5914920	5916920	But there's no need here
5926200	5929240	Do we have the we don't have these loaded in or you do okay. Oh, yeah
5931000	5933000	Oh, nope. Okay
5933800	5935800	That's probably in that. Yeah
5943400	5950520	So for example, if you ran thus it's not perfect, right? Because this is text processing, but um
5952040	5954040	There it is
5954680	5957560	Um, then for the fourth example or fourth exercise
5958280	5963240	If you wanted to count the length of that thing coming in you'd have to basically do the same thing, right?
5963480	5967800	So here you'd you'd read it in you'd split based on white space again
5968680	5973400	And then instead of calling set or something else you call length
5973960	5978600	Uh, which returns an integer you don't want that integer to be the return code
5978680	5981880	So you have to convert it to a string add a new line
5982600	5985880	And uh, and then you go from there
5988520	5992680	So that's how you do or you can do wc dot dash out because
5993960	5995960	reasons
5996680	5999160	You could also do that that'd be a better example here
6001480	6003720	You could do that in the alias. Yeah, you could run
6012840	6015640	Yeah, that's the simplest form of the alias really
6017800	6019800	And
6020280	6022920	Then pull down frankenstein
6026120	6028120	Oh, I think we just did
6029960	6031960	We really love this frankenstein
6038920	6040920	How did you do
6048120	6050120	Maybe
6057000	6059000	Thank you mic mccarty
6061400	6070760	All right, um, let's do it though. Yeah, do it the right way. Um, what was it upper? I'll let you do this and then
6078520	6080520	We'll uh, we'll debug that later
6082520	6086600	Oops, sorry you want the yeah, it's just words and then count
6091960	6095480	The real count and then the point here is that you can
6096360	6101160	Merge all of these together in a single command pipeline, uh that executes so
6103880	6106360	Okay, any uh, any questions on this
6108520	6112040	All right, so that's uh
6113080	6120200	Let's if there's no questions on how this works or what it uses we'll move on not a break because we're doing breaks differently
6120840	6126040	Um, and our next topic will be events which uh, so switch with y'all
6131880	6133880	Okay, so um
6134440	6137480	Uh an event is um, it's hard to actually describe
6137560	6144840	An event I discovered this um, but um, it's it's uh, it's a trigger that you can fire and then um, if
6145720	6149160	You have something that's set up to listen to that firing which we would call a handler
6149240	6151240	It will then execute that thing
6151240	6153240	That is a horrible
6153240	6155080	vague description
6155080	6158280	But is uh, I think we'll be a little clearer when we actually go through an example
6158520	6161720	I'll just say the events a system in cons was written by one of our
6162200	6167080	Contributors jimmy bliss and is just an incredible piece of work and I can say that because I had nothing to do with it
6167880	6169880	It's really incredibly powerful
6169880	6173400	um, and lets you do a lot of really interesting things if you want to
6174120	6180120	Like introspect your code or have all sorts of things happen in response to all kinds of events. You can really start to um
6180840	6184360	Do some very uh interesting clever and powerful things here
6187640	6189160	Right, so I said this um
6189160	6192120	A handler is just a function that is called when an event is fired
6192280	6197640	So something says event this kind of event fires any handler that is attached to that event will then be run
6197640	6200120	And you can have as many handlers as you want on a given event
6200200	6204440	So several functions can be executed in response to something just happening somewhere
6207480	6213000	Okay, so one of the events um all of these live in just the events uh, kind of built in at the base
6213000	6217800	So you can say events um one of the common ones there's several that are built in to conch later
6217800	6221800	We can look at like defining your own, but there are many that are built in the first is um on
6222440	6223960	Changed here
6223960	6227160	Which fires if you can imagine whenever you change directory
6230600	6232600	So this event already exists
6232840	6238280	So what we want to do is just create a handler that will execute in response to that event being fired
6239400	6244760	So the way that you do that is with this decorator syntax. So you just say at events and the name of the event
6247160	6249240	And in particular this event
6250200	6252200	Hands off two
6252280	6256520	Variables to whatever function is being called as handler. We'll show you how to sort of inspect that later
6257160	6259160	They're called older and new dur
6259720	6263800	Or old deer and new deer depending on your preferred pronunciation of words that aren't words
6265240	6268600	And then in this case just for a kind of a simple example
6268680	6272540	I'm just printing out a message that says hey, we just changed from this directory to that directory
6279240	6281240	Um
6291720	6294680	So now you can just move around in your terminal like do a cd dot dot
6295400	6299400	And it'll tell you this thing and you can go back into the like directory. We're just in
6302920	6305400	Um, of course now, uh
6306360	6311400	Your terminal is is probably a little overly verbose and you don't want this to happen all the time. Um
6312360	6316680	So, um, you can always remove handlers too because maybe you've made a mistake
6316760	6320280	And it's saying way more than you meant it to say and you would just like to have your terminal back
6320760	6325720	Um, so the simplest way is just there's a set of handlers on each event and you can just pop them off
6326200	6328200	So in this case events on change deer
6328840	6329800	um
6329800	6331800	dot pop
6331800	6336120	And then you should see the thing come up and then you can just test to make sure that your terminal has recovered by
6336280	6342200	You know going somewhere else and confirming that in fact there is uh, no longer something being printed every time
6345160	6348440	Um, so that was just a quick example to show you sort of what an event will do
6348520	6350680	We can now we'll sort of just dive in a little deeper
6351080	6355080	Um into what's happening and like what all you can do and how you can hook into things
6355720	6361640	Um, so as we showed you register a handler by just using the name of the event as a decorator
6362600	6363800	um
6363800	6368600	those um input arguments uh, the keyword arguments that are there are being um
6369480	6371480	supplied by the event itself
6371800	6373160	um
6373160	6377480	There are two ways to kind of figure out what an event provides. Um
6378200	6382840	You can just um do help and then event dot name event. Um
6383480	6390520	Currently in cons that has the unfortunate side effect of also printing out a bunch of like metaclass stuff that you maybe don't care about at the moment
6391480	6394200	If you just want the simple succinct definition
6394440	6396760	The better thing is just to look at the dunder dock
6397320	6400680	Of the event you want. So in this case you can see that
6401880	6405880	It is uh specifying the types of the two arguments that will be provided
6408120	6411080	Right there. Yeah, um, and it's returning none
6411400	6417640	So you sort of have this like type hint signature that uh describes what arguments will be provided their types
6417720	6419720	And then what will come out of the event if anything
6423000	6426040	Yes, there is a there there are two ways to get a list of events that are available
6426360	6431400	Um, currently the tab completion on that events shortcut is a little bit borked
6431480	6437080	Which we're going to fix like in a couple of days, but if you go to a dunder conch dot built-ins
6440440	6442440	Built-ins dot events
6444680	6446680	And then hit dot tab
6447240	6448680	All of those
6448680	6453480	And the other way is if you go to the docs, there's like, you know x o n dot s h slash events
6453560	6457960	I think it is the html, but on the website. There's a list of all of them what they do when they fire
6461720	6463720	Yeah
6466040	6469880	Also, I should say if you want to register a handler for an event
6470200	6473720	But you don't actually I mean it's going to provide those arguments no matter what you do
6474680	6476840	Like it's that's what the event does to the handler
6477080	6478600	You can choose not to use them
6478600	6482920	But you do need to say like you need to give it like a star star quarks or something to at least capture them
6483000	6485160	Or it will throw an error because you're going to pass
6485720	6488520	Arguments to a function that doesn't know how to accept them. So it's just you know
6488520	6492840	You can make these future basically future proof just so long as you always pass at star star quarks
6493160	6495320	And then you don't have to worry about something firing
6496040	6498200	Or like passing unknown arguments to your handler
6499000	6501000	Um
6502600	6506600	So events get fired when we tell them to fire or when you tell them to fire
6507080	6509560	Is is effectively the short answer to how these things get set off
6512520	6513800	Um
6513800	6517800	But so we'll walk through an example of setting up our own event and telling it to fire just to give you a notion
6517800	6520600	Of a kind of what this all looks like and how you would put all of this together
6522840	6525720	Okay, so first um, we need to create an event
6525880	6527880	Um, and uh
6528440	6532040	The way you create an event is actually by writing a doc string for it
6532120	6539480	It's sort of like the ultimate self-documenting code like it's impossible to create an event in contra without it having documentation because that's the only way to create it
6540040	6542040	Um, it's kind of amazing
6543160	6544360	Um
6544360	6548920	So we're going to create an event that just raises an alarm if it's called that just you know that it's unhappy
6549400	6553160	Um, so the the way you do this is you say events dot doc
6553640	6555640	All right, and then the first
6556040	6558520	Argument you give it is the title is the name of the event
6559880	6561880	Uh, which in this case is never run this
6563720	6567720	Um, and then you give it a doc string, but which should be um
6568600	6569720	Uh
6569720	6575160	The uh the signatures in this case this event takes no arguments and returns none. So it's just a it's a simpler
6575720	6576840	Um
6576840	6584440	Thing so it would just be events not never run this uh parens arrow none and then you can um on the next line
6584440	6587560	You can kind of provide a description of what you know, you're expecting it to do
6588200	6590200	That's more for other users or other people
6590200	6593720	So if you were writing a plugin and you wanted to have some events
6593720	6598840	You would kind of try to put your explanations in here so people understand how they can use the events you provided
6599320	6601320	Um to full effect
6607800	6609800	Okay
6612120	6616360	Okay, so now what we're going to do is um the way you would use this event
6617160	6618760	is you would um
6618760	6620840	It's an event that you basically want to never be fired
6620840	6624680	So you you would put it in a function that for some reason you have like really should never be run
6624760	6627320	But you're you know you you want to recognize that it may exist
6627720	6630760	And so you put this event in there to kind of alert you that this thing is happening
6631880	6635240	So, uh, if you wrote a function that deleted everything on your computer
6635720	6637720	I don't know why but let's just say you did
6642440	6649160	Then what you would do in let's say the first line of that function or somewhere along is that you would just say events dot and then
6649720	6651720	Never run this which we've defined
6651960	6653960	in that
6654040	6656200	Previous doc string thing and then dot fire
6656920	6662040	And then what happens is that whenever that function is called and it gets to that line the event
6662760	6664920	Management system will basically fire that event
6666120	6668680	So we can go ahead actually and run delete my computer
6670680	6672680	And nothing happens
6673960	6675960	So in fact actually um
6676440	6680360	Something does happen right the event fired, but we have nothing listening to the event
6680760	6682280	So you don't get anything out of it, right?
6682600	6686840	So then the final step is to set up a handler to add it so we create the event
6687400	6692600	We tell the event to fire and then we have something that listens for the event firing that then reacts to it
6692760	6695560	Right, so there's these three separate these these three separate components
6699640	6701640	And given the fact that this is a uh
6702360	6705400	Like an event that's supposed to fire when somebody has done something horrible to you
6705800	6707960	You can make it a suitably chastening message
6717800	6719800	Um and as always um
6720920	6722680	Like you have access to the full
6722680	6723480	You know uh
6723480	6727160	Conspectrum here, so if you want like in this case it means like the who am I is a nice thing
6727160	6730200	You can figure out exactly which user is responsible for doing this horrible thing to you
6740920	6744920	That's a good tip. Yeah, perfect. Um, so then if you run delete my computer again
6747240	6753560	Then the event fires and now you have you know, you know that it was scope at the delete of your computer. I'm sorry
6755000	6757000	Can't take him anywhere
6762520	6769400	Okay, so, um, are there any initial questions otherwise there's some exercises here that should help kind of like cement the general
6770120	6772360	Pattern in place, but we're happy to take questions first
6773240	6775240	Okay, great
6775240	6778120	Um, so these sort of build on one another so I'll like reveal them as we go
6778760	6784120	Um, but the first is just to create a handler for the event that is called on n var change
6784840	6791000	Um, this is a built-in, uh event. You don't need to create the event. You just want a handler for the event and you want to have it print out the
6792200	6796840	Um old value and then the new value and of course the name of the environment of the var umbrella is just changed
6796920	6801320	Um, so you should probably check on the dock the dunder dock of the event to figure out what those variables are called
6801320	6803320	Otherwise, it's going to be hard to refer to them
6804120	6806120	And Anthony and I can sort of wander and help
6812120	6814120	So as gill showed up here, um
6814280	6819800	If you just write a simple if condition to check if the name which comes in as a string is
6820120	6822600	Like the dock string says is in
6823400	6824920	Is either
6825000	6830920	In uh is either pwd or old pwd and then only print if it's not
6831800	6833320	We can um
6833320	6840840	We can check to make sure that it works normally for most environment variables, but if we change directory it um
6841880	6843880	It it no longer gets called
6849000	6850280	And then
6850280	6851640	think we're
6851640	6856920	I mean a little low on time. So maybe we'll skip this, uh, this particular
6857640	6862040	Uh exercise, but you can go feel free to do it at home and and email us too
6863080	6865080	Uh, do you want to just show it or
6865800	6867800	Okay
6869400	6872200	So one of the really um handy ones for doing some control flow
6872200	6875000	We don't we don't have to take time to actually, you know, uh do it right now
6875000	6881880	But there's on post command which has a bunch of um of those items that you get in the
6883000	6885000	Command pipeline object
6885000	6887560	Including like timestamps the name of the command that was run and other stuff
6887640	6891880	So in this case, this is all it takes basically to set up like a power line style
6891880	6896280	Like the timestamps of the previous command and just throw it onto your right prompt over on the side
6896600	6902840	It's really just like this three line event handler thing that you can use and then you kind of set up this interactive thing to track
6903800	6906600	You can also get like return codes and start coloring things differently
6906600	6911000	I mean it gets really easy to build stuff up there, you know to get sort of the responsive prompt that you want
6911800	6913800	That's all I wanted to say
6919160	6922840	Okay, so now we're going to talk about macros
6924280	6925800	so
6925800	6932760	macros are syntax that replace a small amount of code with some with one of the few things
6932840	6940200	So either another expression or a syntax tree or just a string rather than being evaluated normally
6942120	6944680	So basically what happens in conch is
6945400	6948280	That the the parser gets paused
6949320	6951320	And then we skip the normal parsing
6952440	6955320	We gather up whatever macro inputs are going to be
6956440	6958680	Are handed off we'll get to what those are in a moment
6959560	6962760	We evaluate the macro with however we're told to evaluate it
6963480	6966040	And then we resume normal parsing and execution
6967640	6971240	So conch's macro system is more like rusts than
6971880	6978040	Other macro systems you might be familiar with so who here like knows rust even a little a little so
6978600	6984520	This gets used all the time in rest. So if you're from if you know that it'll look familiar. If not, hopefully it won't be
6985240	6987240	too much of a learning curve here
6989240	6992280	But basically the point of this is that
6993880	6995880	You're already familiar with macros
6995960	7002440	Normally jupiter magics are just a macro system effectively. They they pause normal execution and do something else
7005720	7011320	So in like in rust the conch macros use the special exclamation point syntax
7013080	7017400	And there are three types of macros that we have
7018680	7023560	So one are sub process macros, which we'll go over first the next are function macros
7024200	7027800	Which we'll follow after and then third is context macros
7027800	7031160	So we'll see what all of these look like in in a moment here
7031480	7033480	So let's start with sub process macros
7033880	7039960	So basically if you put an exclamation point anywhere a loan exclamation point anywhere in your command pipeline
7040440	7046360	Anything after that will just be interpreted as a single string argument to the rest of the command
7046680	7052200	Um, so if you say echo exclamation point, I'm mr.
7052200	7057080	Meeseeks for example, then that entire thing is just a single string
7057720	7060600	Uh after the exclamation point it's stripped
7061320	7063320	we'll get but
7063560	7069880	To show some counter examples if you just echo xyz right echo doesn't really care about the white space
7070440	7073400	Um, so normally you'd have to pass this in as a string
7074280	7076280	Which is two characters
7076440	7081640	But if you use a macro you only have to use one it's echo exclamation point xyz in that whole thing
7081960	7084760	It's equivalent to having put that everything in the string
7086600	7089560	Okay, now this is sort of a contrived example
7091720	7093720	Oh, but before we get into that
7094040	7096840	And it's important to remember that macros pause all syntax right?
7097240	7102360	Uh before until you escape the sub process command. So environment variables
7102360	7108920	Uh will just be listed as there as the string you typed in not anything else
7109880	7113320	Um, because we're not parsing that as an environment lookup anymore
7114040	7119240	Um, so if you can if you want a more like extended example, you can say you're gonna have
7119960	7127560	An environment lookup on both sides and you'll see the first one is uh is the value and the second one is actually just the string that you typed in
7128680	7130120	um
7130120	7132120	Okay
7132920	7136680	So this is really useful when you want to pass in a lot of
7137400	7139640	String like a very large string to a command
7140200	7144680	Um, so for example time it time. It's like a classic case for this right?
7144760	7148360	So if you do time it and then some python code
7149000	7153640	Time it is a built-in alias in conch. So you don't need to worry about implementing it. Um, it's there
7154120	7155400	Um
7155400	7157480	All of that is up is a python
7158360	7160520	The string that follows or a conch string that follows
7160520	7162520	Um
7162760	7168120	Or similarly if you wanted to do some bash code right normally you'd have to put that bash code
7168600	7170200	in a string
7170200	7173720	And then execute it but with the sub process macro you can just uh
7174600	7177640	Type in the exclamation point and it's uh, it's done
7178760	7182920	Um, or you can do this with python basically any of the things that you want to pass into dash c2
7183480	7185480	Um, it'll work
7186200	7188200	Okay
7192200	7194200	I think uh, what did you
7197320	7200040	Oh, yeah, there you go. Okay
7201080	7202200	Um
7202200	7204200	Any questions on the sub process macros?
7204760	7206760	They're pretty simple
7206920	7208920	That's why we did them first
7209480	7210840	uh
7210840	7212040	The
7212040	7215720	Okay, so let's move on to the function macro. So these get a little more fun
7216360	7218120	um
7218120	7219160	So
7219160	7225800	Macros don't require a special function definition. They only require a special function call. They modify how the function is called
7226440	7227800	um
7227800	7230840	And uh, it's just normal python callables
7232120	7238920	What you do to call something as a macro is you stick an exclamation point between the name and the first the open parentheses
7239640	7240920	um
7240920	7246760	And macro arguments are split on commas like normal functions. So here's a few simple examples
7247320	7251960	Uh, so if we had an f function if we wanted to call it as a macro with no arguments
7252040	7255080	We would say f exclamation point parentheses
7256120	7258520	Your use dross this should look pretty familiar
7259080	7260360	um
7260360	7263480	Uh, if you want to call it with a single argument, uh
7264200	7268040	You would say you would do sort of the normal python single argument
7268760	7273160	Uh methods or you can call it with multiple arguments splitting on those top-level commas
7275320	7277320	Okay
7277320	7279320	um
7279320	7284280	How the function is defined uh determines what happens
7284840	7289320	Or specifically how the function annotations what the function annotations look like
7289880	7293800	Determine what actually happens in the macro when you do a macro call
7294280	7297960	Um, and that's matched up with each individual parameter
7298600	7302120	Uh, so here's an example. So say you have an identity
7302680	7308040	Function that has its annotation for its x parameter set to string
7308760	7310760	That x that comes in
7311480	7314680	When it's a macro call will always be a string
7315640	7319000	Even if what's what's normally put into that is not a string
7319640	7323640	So here's a here's a comparison between the the two different versions
7323960	7328280	So in the top we have the identity function. We call it with a string. We get a string back
7329240	7331960	On the bottom when we call it with
7332600	7334600	um, the identity
7334600	7338440	With a string, but as a macro call we get a
7339240	7342440	This the repper string effectively right returned
7343480	7344760	um
7344760	7348440	Similarly for ints in a normal python call you'd get an int back
7349080	7351240	In the identity you always get
7351800	7357240	Uh, the or in the macro call you always get the string and same thing with the the others, right?
7357320	7361320	You you get the string form of the argument rather than the
7363800	7366280	Rather than the the actual object itself
7369400	7371400	Each argument is stripped
7371560	7373560	This is basically done for consistency
7374440	7376440	So that things like
7376920	7381800	42 and 42 don't end up being different. They're not really meant to be different. So
7383720	7386840	In this string one, they end up being the same
7388760	7395240	You feel free to like raise any questions or deep concerns or anything as we're going. Yeah, tom. Why?
7396200	7398200	Well, we're getting to why?
7398600	7399560	in
7399560	7402760	In context macros, which will see some cool things
7403560	7405000	um
7405000	7408040	But it's the same it's it's the same underlying infrastructure for functions
7409160	7410760	Okay
7410760	7412760	Yeah, wow so consistent
7415160	7419160	Okay, so here's some like funny examples, uh that are really pretty bad
7419800	7424760	Um, so if you macro call like import os obviously this is not valid python syntax
7425240	7429240	But in any way shape or form, but you can get that code back
7430200	7432200	You could embed some c++
7433160	7435160	Because I don't know why
7436600	7438600	I forget c++
7438920	7440920	Wow, if only I could forget c++
7445000	7447000	You don't have to type
7447560	7452920	No, you don't have to quote that it's not it's a way of like circumventing that quoting. Yeah
7453800	7458840	In this particular example, but there's more things that you can do than just strings. We just showed the strings here
7460040	7462040	So if you said
7462120	7467160	You wanted this to be an ast there's there's kind of flag codes for this if you want to annotate it in different ways
7467640	7472760	You can get back the ast of what you put in if it's python or conch code
7473080	7478920	So you can get that tree object back out, which is pretty pretty nice and useful if you're doing a lot of like
7480200	7482040	a tree rewriting
7482120	7485960	You can get a code object out if you want to want to put in
7487320	7492440	Exec or val or something or if you put in the c flag or sorry if you put in compile
7493480	7495480	There's six of these so here the first three
7495640	7502760	The others are a val so that would just eval the argument as normal so that means that you basically could only put in python expressions
7504040	7506440	If you wanted to put in exec you could put in
7507080	7509080	Basically anything that you wanted
7509080	7511560	Or you could say t and get the type back
7512120	7513240	um
7513240	7518520	So and in theory this could be extended if there are other things out there that people would want to see done
7519400	7522520	But this is kind of this is what's available right now
7524840	7526840	Any questions on this stuff?
7528680	7530680	Okay
7532280	7534920	Okay, so here's an example of some annotations
7535640	7538440	Uh a simple function. So we're annotating with
7539400	7542600	This the first argument by default since it's got no annotation
7542680	7544680	We'll just come back as a string
7544680	7547320	The second one will be an ast object
7547720	7552600	And the third one will be a code object because we're passing in compile the built-in compile function
7553320	7554360	um
7554360	7556360	If we do a macro call
7561160	7562680	Yep
7562680	7564680	See a lot of pensive people
7565320	7567320	head's exploding
7567400	7569400	Okay
7571080	7576840	Uh of this one. Yeah, so just call it with anything. Um, or any python anything excellent point
7581960	7586920	Yep, uh, I don't know like three plus five I guess I don't
7590040	7596280	Oh, yeah, uh, I think you have to do a new line after the three plus five right or after the os
7597800	7599800	I
7601480	7603480	Think it's after the os because you did a statement
7607720	7612040	No, no, no like a literal new line
7615560	7617560	I'll do it. It's too, uh
7628120	7630120	No, I guess not string
7632760	7634760	Interesting, uh
7636200	7640760	I thought there was an example here. All right. Well, this is not working right
7641720	7644040	Now, I don't know what the this should
7644920	7646760	Know for their code
7646760	7648760	Okay, well, it's not it's failing to
7649960	7651960	Compile one of these things so
7652600	7654600	um
7655160	7657160	Let's maybe just do this
7657320	7659320	Uh
7662440	7664440	No
7667000	7673800	Yeah, I don't know. It's uh, what the problem is I'm sorry. We'll have to figure it out afterwards. So, um
7674920	7676920	We have a parser error. All right
7678760	7680680	Um
7680680	7682680	Okay, sorry about that
7683080	7685080	uh, so
7685080	7687080	the
7687080	7691800	Next the the last bit of macros that we'll get to are context macros. So these use
7692360	7698360	The exclamation point right after the with uh word so you can use with exclamation point
7698840	7701640	um, and then everything after the colon will be
7702360	7704360	captured, uh
7704760	7708440	Like it was in a normal uh with semen. So this provides both
7709160	7711320	Named blocks and anonymous blocks
7711960	7713960	um, so if you say
7713960	7720680	This isn't going to work because there's no x to enter but you say with x equals 10 print y this would come
7721400	7724760	Uh come back as us as a string
7725720	7731080	Um, and what this can be thought of really is is doing the follow. So you can think of this as saying
7731720	7738920	Uh, whatever your context is x dot macro block equals the string of the code in the block
7739480	7740680	de-indented
7741400	7748040	And then assigning the locals and globals to to vary up to attributes of that as well and then passing for the actual block
7749000	7751000	Um, so it's a bit of code rewriting
7751800	7753800	macro block is de-indented
7754840	7760040	And uh these attributes are set before the enter method is called
7761480	7765720	But they're not cleaned up on the exit method. So you can do that if you want to uh, but they live around
7765800	7767800	They stay around and live if you if you need them
7768600	7769800	um
7769800	7773400	Like with functions by default the contents of the block are returned as a string
7774040	7779960	Um, however, they don't need to be they could be any of the other special annotations that we saw before
7780520	7781800	um
7781800	7785640	And that's just lives is the this conch block
7786360	7791080	Attribute on the context manager. So that's how it knows what to look up what type to convert it to
7791880	7793480	um
7793480	7795160	So here's an example
7795720	7800200	And and this is gets to the use case a bit. So we can write a simple
7800840	7802360	xml block
7802360	7806120	So if we say we're just going to be pretty explicit. You don't need the comments, obviously
7806680	7808040	um
7808040	7810200	So we say it's going to come back as a string
7810760	7814280	We write an enter method that takes
7815080	7818040	the contents of the block as a string
7818680	7824040	And we'll parse them into an element tree an xml element tree and return that
7824520	7828040	um as the uh as the object in the context manager
7828760	7834200	Um, then when it exits, we're just going to clean up those things the things that we we had before
7841480	7843480	Yeah, I think you need this star whatever
7854920	7857160	Macro locals. Yeah
7859400	7864280	Okay, and then you can use this. Oh, it's cutting it off a bit, but um
7865400	7867640	Uh by saying with exclamation point
7868520	7871160	xml block a new object as tree
7872120	7874280	colon and then everything
7875560	7880680	Um, you can just do a short one. So just do like you could even just do yeah you
7881240	7883240	Uh
7883640	7885640	And then just close out the note I think
7886440	7888440	um
7889480	7892280	And now if we we can inspect the tree object
7893000	7895000	tree is an instance of
7895640	7897960	So I think what is it if you do tree tag?
7899240	7901640	Um, that gets the note so it parses
7902440	7904680	That x xml. So this lets you
7905400	7910280	write documents and other languages right in conch and then do whatever you want with them
7911640	7916280	Which is somewhat insane, but actually kind of useful occasionally
7917720	7924120	And you saw like writing that context macro macro object that class was actually pretty simple
7925160	7927240	It didn't take a lot of lines of code to do that
7929880	7932200	So yeah, that's kind of the
7933480	7935480	Scenario there
7935480	7940600	And hopefully that answers at least partially the use case question. Okay. So we have a few exercises
7941640	7943640	Um
7944040	7948440	The first is to use a sub process macro. So just run time it
7949000	7952680	Um on the string and formatting a string
7954200	7956040	The second is
7956040	7957080	to
7957080	7959640	Call the import module as a macro
7961080	7967320	So you don't have to use quotes and the third is to run, uh, uh write a json block context manager
7971560	7973560	Oh, yeah, we're not gonna
7974120	7976120	Then we need to get into our example
7976520	7978520	And then we need to get into our like
7980520	7983000	Any questions on any of these or if there are questions, um
7986680	7988680	Format was 42
7990600	7995880	And you see like what this really prevents once time it completes
7996600	8004440	Is you having to run it with a extra set of quotes, right? Because time it expects just a single argument that takes
8005080	8007080	Um, so this is the same
8007400	8011880	This is fundamentally the same, but you just you don't have to type that extra set of quotes. So
8013880	8015880	Okay
8017560	8019560	All right, you want to move on to the next
8020680	8022680	And then yeah for the
8022840	8024840	standard library import lib
8025400	8031080	Um, this is just showing you can you actually you can just use existing functions, but call them using the macro syntax
8031960	8033960	And so in this case you get back the
8036600	8038600	Import lib sorry. Yeah
8039000	8040440	dot
8040440	8042440	import module
8043080	8045080	So if we do sys
8046200	8050360	Uh, right because the first argument is a string you can just get that so
8051160	8054120	It'll it'll take it'll turn whatever you type that into a string
8055800	8057800	Okay
8060120	8062120	And then
8062360	8069480	Uh, the third one is this json block. So this should be very familiar to the xml one where
8070440	8072440	um
8073000	8074840	Now we just have
8074840	8083160	Or now we have uh json. We don't need the the macro block part because that's optional. Um, but we
8084120	8086120	Uh, oops on enter
8087000	8088520	um
8088520	8091000	We'll assume that the code that comes in
8091800	8093320	is
8093320	8097720	Uh part of is valid json. So we'll return
8099320	8101320	uh json
8101400	8103400	dot loads
8103400	8104760	of
8104760	8106440	self dot
8106440	8108440	macro block
8108760	8110760	Um
8111400	8113400	And then on exit
8113560	8118280	Uh, we'll do this we'll do the same delete portion just to clean up after ourselves as well
8118840	8122840	um, and so a use case for this is just with
8123960	8125080	uh
8125080	8127080	json block
8127160	8128360	as
8128360	8131560	Let's call it x. Um, and we can write like
8133640	8136360	Hello, just some random json
8137720	8139480	mom
8139480	8140760	And now
8140760	8143560	x is a dictionary that was parsed from that json pretty
8144280	8151880	Pretty simple silly example because json and python are so similar here, but uh, you know, it's it's a one way to do things
8152120	8153480	so
8153480	8155480	Any questions on these exercises? Yeah
8156120	8156920	So
8156920	8162600	Where does this json block object end up in this case? What do you mean? So
8163560	8165560	x ended up as the return value of enter
8166120	8168120	Yes, so where did the json block instance
8169080	8171560	It's gone. Okay, so like the so the cleanup is a little
8173000	8175000	I guess you can show in the cleanup
8175000	8177000	Implying these things are leaking
8177240	8183320	Well, so the macro block and macro globals and macro locals. Yeah, so so this would leak
8183560	8187400	I get in the case where you instead returned self from the
8188600	8191080	From the from the enter method
8192280	8194280	Right
8195240	8198440	No, no, it's not it's not keeping a cache it would only leak if you
8199480	8200760	so like
8200760	8205640	So the the place where it would leak potentially where you wouldn't want it to necessarily is like if you wanted to
8206200	8207400	Have the same
8207400	8213480	Instance of json block be reentrant like that's what this makes us so you could like have one instance of json block
8213640	8215640	And then just reenter it every time
8216040	8218040	And always get the tree back
8218440	8221640	Uh, or if you return self and we're doing something else with it later
8222360	8224360	Right, so yeah
8225640	8227880	That that's where the references get added
8229880	8231640	Yeah
8231640	8233640	Does that make sense
8233640	8238840	Sort of um close enough. Yeah, I guess the the thing is like if you returned
8240120	8242120	Uh, so if you said like
8243640	8245080	self
8245080	8247080	dot
8247320	8249320	Like maybe you wanted like
8250040	8256760	Like maybe you wanted to keep the j object around so you did like json dot
8257480	8259480	Or you wanted to keep the tree
8260200	8262200	um, so you do json.loads
8263560	8265560	of
8266200	8268200	self dot macro block
8269640	8271640	And then
8272440	8274440	And then you return
8274840	8276840	self
8276920	8279000	You know, you might not want to keep the globals
8279720	8284280	You might want to keep the macro block itself around, but you might not want to keep the other locals and and
8284920	8286520	globals here
8286520	8288200	and so
8288200	8289800	Just using this
8289800	8294120	So now x is the json block and then x dot
8295400	8297000	Tree
8297000	8299000	Is the uh, is the actual
8299320	8303480	Version, but you still have access to the string of what the macro block was
8304520	8306520	Yeah
8307800	8313160	They are the uh, they they're the the name they're the local and global
8313880	8317880	Uh dictionaries like as if you had called locals and globals the python built-ins
8318440	8325000	Where the where the macro block was called or the context macro was was written
8326200	8328200	Yeah
8328680	8331480	Yeah, okay. Yeah, any other questions on this?
8337320	8339320	What are the use cases
8342200	8346360	Yeah, so the most common use case is really something like time that right, it's really those
8346520	8353000	Um, there's a couple of cases where that i've that we've used these things where like if you wanted to write some bash
8353240	8356120	And you really needed it to be bash in a local context
8356600	8359240	Then you would then you write like a little bash thing
8359720	8360680	um
8360680	8366680	There's been some other use cases where we take input or configuration files in as these macro blocks
8367720	8371880	Um, uh, but otherwise, yeah, it's that's kind of the use cases
8383720	8385720	Import sorry saying
8387240	8389240	Oh, yeah, yeah
8389560	8393880	That that was that's just a toy. Uh, that's kind of a toy example to show
8394760	8399240	Um, right this comes from the standard library and the standard library didn't
8399880	8402280	Uh, doesn't know anything about conscious
8403080	8404120	Macro system
8404120	8409640	So it didn't annotate these functions in any particular way and this is just showing that you that you can use
8410520	8415720	You can use the macros on those functions if you if those functions happen to take string arguments
8416440	8423960	Okay, so it's more just demonstrating it's it's demonstrating. Yeah, but the function macro stuff just ended up having to
8424360	8427080	It kind of had to be there for the context macro stuff
8427720	8428760	um
8428760	8433880	That infrastructure all had to be the same. So it's there and available in the language if you want it, but
8434520	8437800	Um, I wouldn't say there's like a killer feature for it unless you're coming
8438360	8444680	From rust or you or you really like doing a lot of ast syntax ast tree like rewriting and stuff
8445480	8450440	In which case this makes it easy for you to provide those rewriters or pattern matchers
8451320	8456680	Um inside of conch, but there aren't that that intersection is basically me. So
8459400	8461400	Yeah, so
8462040	8464040	Okay, cool
8465320	8467320	Good question
8468600	8474520	Uh, let's we should maybe skip this well except we don't know if we can yeah, well I can try to
8475400	8480520	Um, so this is going to be interesting as we discover if this is even possible anymore
8481000	8483880	Um, but there, uh, there is an example here
8484360	8489160	Which is that we were working in a lab that had a bunch of MRIs of mouse lemurs
8490600	8492600	That's a mouse lemur
8496600	8502200	So we had all these MRI datas, um, but uh, it was set up on our web server by a postdoc who disappeared last week
8502760	8505000	Um, and we have some other bad news
8505800	8509000	Uh, which is that he used bash to handle all the data collection
8509320	8512680	He didn't know how to make sure that different datasets were saved to separate directories
8512680	8515960	So he just added a random four-digit number to the end of all of these
8516600	8519720	Um, NII MRI image data files
8520280	8525640	Um, and he also neglected to do this with the json metadata that was included with it. So that's all been overwritten and lost
8526360	8528120	Um
8528120	8530680	And then he ran remove with an overly permissive glob
8530920	8532920	I deleted all of them
8533320	8536520	And uh, the files are kind of big in the postdoc's web servers at his house
8537160	8539160	We don't want to have to download all of them
8539640	8541480	um
8541480	8546920	That being said, uh, the web server at the house, which is on my laptop is completely inaccessible to everyone on this network
8546920	8549160	It turns out which makes this a little trickier
8550200	8552200	um
8554600	8557400	The data is now on uh github
8557640	8561960	At uh in this repo called MRI data, sorry
8567800	8569800	And uh
8569960	8573160	This may not be possible. So we'll find that it's going to be a learning adventure for all of us
8573880	8578120	Um, we do know a couple of things about the data. So this is sort of our exploratory thing
8578200	8580840	They all do follow this naming convention
8581400	8586200	Uh, so you just have like sub dash two-digit number underscore four-digit number dot NII
8587160	8588280	Um
8588280	8593640	The files are large, but the first 348 bytes of each file is a header
8594440	8597000	So you can nominally just pull down the header
8598520	8601480	Um, we're pretty sure there are 19 mouse lemur scans
8603240	8604520	Um
8604520	8609800	And the circle spine study going on the lab next door, which is mixed in with all this data only has six subjects
8611720	8613080	Um
8613080	8621000	And nominally this is how you would use curl to only pull down the first 348 bytes of a file if there were a functioning web server available
8621560	8627240	Um, we're going to discover together if you can do this from like the raw link on a github repo
8628280	8630280	But we're not sure
8631080	8633080	Um
8633320	8638760	So having said that if you would like to even try this and we welcome your support and efforts
8639640	8646920	You can install, uh, n i babel, uh, n i b a b e l on kind of forage, which is a nice package for loading in this MRI data
8648120	8652840	It's on pip, right? I don't know. Oh, you don't know. Okay. Yeah, I don't even look on pip anymore. Yeah
8656280	8658280	And then um
8658600	8661320	We are all gonna try together to see if we can
8662040	8665800	Just download the headers of each of these files to sort of determine which of them are the ones we want
8665800	8670520	So we don't just download everything which is never usually the right answer to these sorts of questions
8672600	8676680	Maybe we should see if we can curl one of them right now. Yeah, let's try it. Okay
8677640	8679640	um
8681160	8683480	All right, so what it's curl dash
8686600	8688200	R
8688200	8690200	and then
8690840	8694520	What I should have kept that and then what's the github URL?
8695800	8698040	Well, the github api should be
8701240	8703400	This feels way too much like real science right now
8706920	8708920	So it would be uh
8711880	8717240	github.com g4 site MRI data sorry blob master rifles true
8719640	8721640	That didn't work
8723400	8725400	No
8726680	8727800	I
8727800	8729800	Thought there was like a real
8730600	8735240	Okay, you know like a raw user data kind of thing. Where does that live at?
8736360	8738360	I think usually it's there unless the file is too big
8739800	8741400	Oh
8741400	8745720	Okay, this is why you don't store, you know big data on github this way. It's a really bad pattern
8750840	8752840	Let's try this one
8756760	8758760	Received
8767160	8769480	No such key or maybe that one's not up yet
8775240	8777560	It's another one of these file names that's definitely up
8786280	8788280	Uh
8792440	8794440	Okay, time to rewrite the slides
8796600	8803880	Which you'll be able to reload and copy from yeah, what's that digital ocean droplet? Uh, they're all all
8806040	8808040	Put it in this chat
8812440	8814440	Sorry about this overall
8816520	8818520	By
8821400	8825800	Yes, yeah, no the network's all kinds of fun today
8837080	8843800	Don't help me google. I don't want your help your help is terrible and poison. It's not help. It's spying. Just stop spying on everything we do
8844040	8846040	They're watching us right now
8847480	8850040	That's true, but we we ask them to
8858280	8863560	Can you curl down a file list from there? Is that work? No, I don't well, I don't know how to what was the command for doing
8865240	8867240	All right, I think
8867560	8873480	It should just be this
8877640	8879640	Okay, does it work
8880120	8884120	Yeah, that's yeah that that the information's in there. Okay, so
8886040	8888040	Yes
8888040	8890040	So you've got an xml block
8890360	8892360	all right
8892760	8896920	We are happy to answer questions along the way this should actually work though, which is kind of amazing
8898120	8899800	so we have
8899800	8905560	The post doc is better than we thought he was and has uploaded the files to this digital ocean droplet
8906120	8908120	That I've just added to this slide
8909000	8913400	If you reload the slide deck you should be oh, I haven't I haven't pushed it up. Okay. I'm sorry
8913720	8918360	I can't I can't push anything right now because I haven't set up the ssh thing and it wasn't working. I'm sorry
8919320	8920520	um
8920520	8924040	But if you curl that url you will get
8925160	8927160	This looking kind of blob
8927720	8929720	Which does have all of the file names in it
8930200	8932200	So you can see there's one
8932360	8933960	I lost it there
8933960	8935960	sub 187785.nii
8937560	8942040	And you should be able to pull out from this a list of all all of the names that match that pattern
8942760	8944760	and then you can
8944760	8948920	Pull down only the first 348 bytes of each of them load them into
8950040	8955560	Ni babel and then inspect sort of the dimensions of the thing to figure out which are sort of the correct images
8958040	8960040	Yes, I can
8968280	8975080	You probably need to well actually yeah, it should just work. Yeah. Yeah, it works. Yeah, I do that all the time
8976440	8979000	All right, kind of install something and then import it immediately
8979240	8981240	Yeah, so
8982760	8988120	Uh, yeah, and if you're having a problem or if you're running to issues like come just raise your hand let let us know
8992520	8995320	And thanks for uh dealing with our debugging
8999960	9005240	So for a quick update on our progress here is there anyone anyone doing on this if at all
9009000	9010520	Sorry to hear that
9010520	9011720	so, um
9011720	9015400	One thing you can do for some of this is you first want to get
9017320	9019320	Uh the raw kind of page
9019960	9025000	So that would be you could just curl down that base. You are all there. I actually got encoded. This is a yeah
9025000	9027000	Can you make the font? I sure can
9029720	9034520	You want to show the other command? Oh, yeah base. You're all right. Yeah, so then if you have this
9035320	9037400	Really long painful string like this, but you know
9038280	9040280	That the files look like
9043320	9045320	Somewhere there
9046840	9050040	You can try to use xml, but xml is horrible
9050920	9051960	so
9051960	9053160	um
9053160	9059320	You could also use a regular expression to scrape over that and pull out anything that matches a certain pattern
9062200	9065000	So then that's sort of the list of files that match that
9065400	9070200	So now you might want to try just like downloading one of those
9072280	9076200	Which would be to grab the first 348 bytes
9080680	9084760	Save it to the same output file it concatenate or just you know put together the base url
9084760	9087320	And then the path of a single file just to kind of test it out
9089880	9092440	Seems to work you import knee babble
9095400	9097400	You can load that file
9098200	9100200	And then if you explore
9101080	9104760	Some of the different options here you might see this header thing
9112840	9114840	Yeah back there
9125960	9134360	Yeah, so the question is about uh, why why shouldn't you use a path string here? Well, yeah
9134360	9136760	So the answer is basically that it's a url
9137320	9139320	So it's not really a path in a normal way
9139560	9144840	And the second is that you're you're just passing it back down to a command a sub process command
9145160	9149720	And so it's going to get turned back into a string anyways, so you don't really need the path object
9150200	9152200	Yeah, having said that what um
9153080	9156760	You know as you go along on this you might you would maybe curl it down using just you know
9156920	9158920	Just a string because you want to pass that to curl
9159240	9164440	But then in terms of loading the file after you have it there you could first make it a a path lib path
9165080	9169480	Load it from that and then depending on the results of like how you're inspecting it
9169560	9174120	Then use path lib of that file to move it or change it or mark it or delete it or
9174840	9176840	You know so you can work that into the
9177240	9179240	The process
9182440	9184920	I'm going to keep working on this like at lunch so people want to
9185960	9187960	On this contrived example to be created
9188440	9190440	But you want things to work
9191240	9196440	So that um, thank you everyone for coming. Uh, I know it's like a lot of information just to dump into people's heads
9196840	9202760	But we appreciate you guys kind of toughing it out with us. Um, we also um, there's a bunch of stuff we haven't covered
9204760	9207560	There's even some more new syntax probably that I've forgotten about
9207640	9211640	Um, but we're here all week and we're happy to help you answer questions
9211640	9215480	If you have a certain thing you like to do and you just want it to you think it could work a little better
9215480	9218360	You want to try see what it would look like on conch? Please like stop us anytime
9218440	9224440	We have stickers on our badges and you probably would recognize at this point. Um, we also have stickers up front
9224520	9230440	So feel free to take as many as you want of those and uh, yeah, thanks for coming and trying out conch and hopefully
9231080	9234840	You know, it improves your life in some meaningful way. So
9235480	9237240	uh, and then
9237240	9241000	Yeah, we'll be around and open bug reports find us on getter
9241640	9244440	Uh, open issues contribute. We're
9245400	9248360	Friendly community. So thank you so much everybody
