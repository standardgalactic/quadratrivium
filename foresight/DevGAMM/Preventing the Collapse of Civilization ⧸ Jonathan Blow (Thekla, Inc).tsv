start	end	text
0	8440	Then when it came to giving a talk, it made me think about some things that transpired
8440	13440	between both of our societies some decades ago.
13440	19640	For example, in 1957, when the Soviet Union launched Sputnik, the world's first man-made
19640	22840	satellite that orbited the Earth successfully.
22840	26560	Back in the USA, everybody freaked out about this.
26560	31480	They didn't like being behind in space and said, oh my God, we got to catch up.
31480	36520	We have to get a satellite into orbit in 90 days, which seemed crazy.
36520	37520	And it was.
37520	40400	Our first attempt blew up on the launch pad.
40400	42600	But the second attempt succeeded.
42600	44840	That was January 31, 1958.
44840	48360	It was almost 120 days after that initial launch.
48360	52240	It's pretty fast by modern standards.
52240	58120	Then in April 1961, Yuri Gagarin became the first human being to orbit the Earth.
58120	61640	And again, that made news all over the world.
61640	63600	Everybody was very impressed by that.
63600	68200	And back in the United States, people were upset because, again, we were behind.
68200	72680	We were behind in what was becoming clear was the space race.
72680	76640	And we didn't like that and what were we going to do about it.
76640	83440	So in May 1961, one month after that flight, our president at the time, Kennedy, made a
83440	87760	speech to Congress saying, look, if we're going to catch up and not be behind forever,
87760	89000	we have to do something big.
89000	91800	We have to commit a lot of money, a lot of resources.
91800	93720	We're going to go to the moon, right?
93720	95960	And that was kind of a crazy idea.
95960	100440	And in 1962, he reiterated this in a famous public speech.
100440	104560	And he said, look, we're going to go to the moon before the decade is over.
104560	106400	And that was crazy.
106400	110880	He was really crazy because we hadn't done anything remotely like that.
110880	113400	But lo and behold, eventually we did.
113400	120920	So Apollo 11 launched on July 16, 1969, before the decade was over.
120920	126840	And just this year, there's a very good documentary that came out about this whole mission.
126840	134160	What it is is it's made of all original footage that NASA took during the mission that's been
134200	138280	sitting away in cupboards and closets, and they restored the footage, and they sort of
138280	142800	made a recreation of what it was like to live through this mission.
142800	149760	And I'm going to play a short excerpt from that documentary just to give you a sense
149760	151920	of what the scale of this whole thing was like.
194160	203760	It's a lot.
203760	204760	And it's crazy.
204760	208800	We went from nothing to all that stuff in something like 12 years.
208800	212440	Before Sputnik flew, we didn't have much of a space program in the United States.
212440	215280	And in the end, we had all that stuff.
215280	218200	And then, of course, after that, we continued to do space things, right?
218200	219920	We made the space shuttle.
219920	221360	It seemed like a really cool thing.
221360	222960	It's like a ship out of science fiction.
222960	224800	It could take off and then land again.
224800	226680	That's so great, right?
226680	231000	Problem is, actually, most of it couldn't land, like those tanks in the background there.
231000	235720	And therefore, it was very expensive to fly, and it was very unreliable.
235720	239680	People died on this on a couple of different missions, and we decided to stop using it
239680	241360	for all these reasons.
241360	248000	So after that, if we wanted to put people in orbit, we had to get a ride on the Soyuz.
248000	254120	And then, from there, the trajectory of our space program kept going downwards.
254120	260640	And so if you talk to somebody like me, sometime around the year 2002 or 2005, we all had this
260640	262240	attitude like, isn't it a shame?
262240	267280	Like the USA used to do all this cool stuff in space, and now we don't really do anything
267280	272360	in the science fiction future that we visualized isn't really going to happen.
272360	276560	And we don't ever see that changing, but what can you do about it?
276560	278560	Well, shrug, right?
278560	283120	That was just everybody's attitude, but not quite everybody, right?
283120	290880	At some point, somebody came along who made a bunch of money on a website and said, hey,
290880	292400	I want to do something about this.
292400	297560	Despite having no rocket experience, I'm going to start a company to launch rockets and to
297560	299840	do bigger stuff than we've ever done before.
299840	304520	And so here's an excerpt of a video about why he did that stuff.
305400	311760	Then there's becoming a multi-panel species in space-frame civilization.
311760	313680	This is not inevitable.
313680	316080	It's very important to appreciate this is not inevitable.
316080	321040	The sustainable energy future, I think, is largely inevitable, but being space-frame
321040	324320	civilization is definitely not inevitable.
324320	331960	If you look at the progress in space, in 1969, we were able to send 70 to the moon.
331960	337840	In 1969, then we had the space shuttle.
337840	340480	The space shuttle could only take people to low-Earth orbit.
340480	346400	Then the space shuttle retired, and the United States could take no one to orbit.
346400	347400	So that's the trend.
347400	349600	The trend is down to nothing.
349600	350600	This is not...
350600	356000	If you are mistaken when they think that technology just automatically improves, it
356000	358160	does not automatically improve.
358160	362640	It only improves if a lot of people work very hard to make it better.
362640	368720	And actually, it will, I think, by itself degrade, actually.
368720	372760	You look at great civilizations like ancient Egypt, and they were able to make the permits,
372760	374960	and they forgot how to do that.
374960	377480	And in the Romans, they built these incredible aqueducts.
377480	379640	They forgot how to do it.
383440	386520	So his idea was pretty successful.
386520	391080	And today we're like landing rockets, and we're seriously talking about doing another
391080	393920	moon mission as soon as the year 2024.
393920	397880	We'll see if that actually happens, but we're at least talking about it seriously, and that's
397880	402480	a pretty good thing, given where we were not long ago.
402480	406200	So Elon talked about a few things from the past that were great achievements that have
406200	408840	been lost, and I wanted to go through a few more of those.
408840	413000	To reiterate his point, that technology automatically degrades.
413000	416720	This thing here that you see is the Lycurgus Cup.
416720	425040	This was a relic found and dated back to the Roman Empire, 380, and it's made of glass,
425040	430000	and this glass that it's made of is the world's earliest known nanomaterial.
430000	434480	The color of the glass changes based on how you look at it, like where the light source
434480	435480	is.
435480	438560	So if you're looking at it standing in front of the glass, and the light source is over
438560	443360	here with you so that you're seeing it with reflected light, then the goblet is green.
443360	447720	But if light is passing through it, the goblet is red.
447720	454680	They had this in 300 AD, and then the Roman Empire fell, and that knowledge was lost until
454680	457720	basically forever.
457720	462760	The way this worked was actually, it got figured out around 1990.
462760	466840	The glass is suffused with very small particles of silver and gold.
466880	471800	By very small, I mean 50 to 70 nanometers, which is so small you would not be able to
471800	474080	see them with a physical microscope.
474080	478400	You would require an electron microscope to see these particles, right?
478400	483240	But at some point the Roman Empire fell, and they forgot how to do it.
483240	485280	A lot of craftsmanship went into this.
485280	489800	You could see how it's hollowed out on the inside where the little guy's body is, to
489800	494560	give him more of a purple sheen as opposed to a red in the background.
494600	500080	If you hear people talk about this today, or you read up on this, they tend to have a
500080	504600	dismissive attitude toward it, like, oh, the stupid Romans didn't understand technology.
504600	508280	They probably didn't even know it was silver and gold that made this happen.
508280	511280	It was probably just an accident, and they made like five of these, right?
511280	513240	Which is complete nonsense.
513240	518440	Anybody who actually builds things as opposed to just writing about them knows you do not
518440	523840	get a result this good without a constant process of iteration and refinement.
523840	526520	You can imagine there was some initial accident.
526520	530800	Maybe somebody wanted to make glass sparkly, and they tried to put silver and gold in it,
530800	534280	and then they noticed a little bit of discoloration, and they said, why is that there?
534280	535760	Maybe they pursued that.
535760	538400	What happens when I change the proportions?
538400	541280	How thick should the glass be?
541280	544040	Engineering results this good takes a long time.
544040	548960	What that means is that in Rome, people were doing something that we would recognize today
548960	554840	as material science, and then that was lost.
554840	555840	Other stuff happened.
555840	560280	Like, in the Byzantine Empire, they had flamethrowers, and not like little dinky things.
560280	565640	They had giant pressurized vessels in the bellies of ships that shot out a napalm-like
565640	571800	substance out of metal tubes that they would use to incinerate neighboring vessels.
571800	576400	It was napalm-like in the sense that, like, water would not put this fire out, right?
576400	577920	It was a very serious weapon.
577920	580440	It was a state secret of the Byzantine Empire.
580440	584840	They used it to defend Constantinople over and over again for hundreds of years until
584840	590200	one day they couldn't really do that anymore, for whatever reason, and this military secret
590200	592840	just faded from knowledge.
592840	595600	Nobody knows how to do it now, right?
595600	600760	Obviously, we've reinvented flamethrowers, but they're different.
600760	606400	This is the Antikythera mechanism, which is named after an island in Greece where this
606400	608520	was found on a sunken ship.
608520	612240	It was just a corroded hunk of metal, or a number of corroded hunks of metal, but it
612240	617080	was very clear when they originally discovered that gears were involved, and over time people
617080	623120	analyzed this, they realized it's a mechanical calendar that was used to say things like,
623120	627240	you know, what year is it, what are the phases of the moon, where are the planets going to
627240	630960	be right now, when is the next Olympic Games, right?
630960	637800	And people have run scans on what is left of this and managed to deduce what all the
637800	641320	gears were in this mechanism, and it's very different from what I thought.
641320	644960	When I first heard news about this, I thought like, oh, they must have had some cute little
644960	646360	gear things in Greece.
646360	652840	That's surprising, but let me just show you the scale of the generally agreed upon reconstruction
652840	680280	of what this device actually was.
680280	684240	That seems like a lot of gears, right?
684240	710920	But wait, there's more.
710920	725440	So, ancient Greece had that, but that is not the picture that we have today of ancient
725440	727400	Greece, right?
727400	730240	And the thing to realize is, you don't just get here from nothing.
730240	734320	It's not like one day there weren't any gears, and then the next day some guy makes this,
734320	735320	right?
735320	740360	You need a whole process of science to create something that's sophisticated, and we don't
740360	742040	know anything about that today, right?
742040	745920	All of that was lost.
745920	747520	And I could go on and on with examples.
747520	751200	There's a whole bunch of things from history that are like this, but we don't have time.
751200	760160	I just want to restate that right now we live in a very privileged time where technology
760160	762640	has been in a good shape for a long time.
762640	767080	We see it getting better, and so we imagine that the natural course of history is that
767080	771520	technology always improves, and that these moments in history are just like little blips
771520	774000	or something that we heard about, but they're not just little blips.
774000	780160	It's actually sort of the regular course of world history that great achievements in technology
780160	786560	just get completely lost because the civilizations that made those achievements fell or had a
786560	791040	sort of a soft fall where they failed to propagate the knowledge into the future, right?
791040	794800	Technology goes backward all the time, and not just in ancient history, also in the modern
794800	795880	day, right?
795880	797320	We lose knowledge all the time.
797320	802000	So I'm going to read an excerpt from an interview with Bob Colwell, who was the chief microprocessor
802000	805880	architect at Intel for a while, but this interview is from before that.
805880	810880	It was from the booming days of Silicon Valley when he worked at a startup called MultiFlow.
810880	815240	They were trying to make a very large instruction word processor when that was a new experimental
815240	820280	idea, and they were having a lot of problems like when you try to design the chip, you're
820280	824760	using components from other manufacturers, and he just couldn't get anything to work
824760	828480	reliably, and he was like, what the hell, right?
828480	834760	So he says, Rich Lethen and I made a pilgrimage down to Texas Instruments in Richardson, Texas,
834760	839000	and we said, as best as we can tell, many of your chips don't work properly, and does
839000	841280	this come as a surprise to you?
841280	842960	I half expected them to say, what?
842960	843960	You're out of your mind.
843960	845680	You've done something wrong.
845680	846680	Come on.
846680	847680	You don't know what you're doing.
847680	849680	Go use somebody else's chips.
849680	851720	But no, they said, yeah, we know.
851720	852720	Let me see your list.
853000	857800	And they looked at the list and said, well, here's some more that you don't know about.
857800	859860	And by the way, it wasn't just TI.
859860	863120	Their parts were no worse than anybody else's.
863120	864280	Motorolas were no good.
864280	865720	Fairchilds were no good.
865720	866960	They all had this problem.
866960	872200	And so I asked TI, how did the entire industry fall on its face at the same time?
872200	876800	We are killing ourselves trying to work around the shortcomings in your Silicon.
876800	881560	And the guy said, the first generation of transistor logic was done by the old graybeard
881560	883960	guys who really knew what they were doing.
883960	887720	The new generation was done by kids who are straight out of school who didn't know to
887720	891680	ask what the change in packaging would do to inductive spikes.
891680	895640	So when you change the voltage in places on a chip, it generates a magnetic field, because
895640	896920	that's just what happens.
896920	901120	And when those fields interact across a chip, it's bad.
901120	908200	And the new people designing these chips didn't know to take that seriously.
908200	911800	And that's why technology degrades, or it's at least one reason.
911800	917840	It takes a lot of energy and effort to communicate from generation to generation these important
917840	922760	things that you need to know in order to do a competent job making the technology.
922760	929280	And there are losses in that communication process almost inevitably.
929280	934320	And without this generational transfer of knowledge, civilizations can die because of technology
934320	939480	that those civilizations depend on degrades and fails.
939480	944920	So let's talk about a civilization that fell, actually a whole group of civilizations.
944920	949720	The diagrams I'm going to show here are from a lecture you can find on YouTube called 1177
949720	953920	BC, the year civilization collapsed by Eric Klein.
953920	958600	And we're talking about the late Bronze Age, which was the time of a number of civilizations
958600	964160	you've heard of probably like the Egyptians, or the Mycenaean Greeks, right, or the Hittites,
964160	966640	the Babylonians.
966640	971720	And so this civilization, or this network of civilizations was sort of spanning Mesopotamia
971720	977780	and the Mediterranean Sea, and they had developed quite a sophisticated network of trade.
977780	982920	So in this graph here, each of these points is one of the civilizations, and the lines
982920	988200	are established communication and trade routes between those civilizations.
988200	992920	And whereas not all of them were connected to all of the other ones, they were interconnected
992920	998080	enough that you could relatively efficiently route things from one place to another if
998080	1003000	you needed to, and that was very important.
1003000	1008760	Because Bronze, which the civilization depended on for things like defense, was hard to make
1008760	1009920	back then.
1009920	1015120	You had to do it by combining copper and tin, and copper was relatively hard to find and
1015120	1020280	was found in places like the island of Cyprus, and tin was also really hard to find and was
1020280	1024880	found very far away from those copper places like in Afghanistan.
1024880	1030400	You somehow had to persistently ship these things around in order to make your bronze,
1030400	1032960	and the other things that your society depended on.
1032960	1039160	And nobody's sure exactly what happened in this collapse, but people believe there was
1039160	1044240	some kind of environmental stressor to kick it off, like there was a huge drought, possibly
1044240	1049560	also some floods are theorized, and this led to some people attacking some other people,
1049560	1054640	and maybe you need to start using your ships for defense instead of trading.
1054640	1060880	And basically you went from all these flourishing civilizations to 100 years later, none of
1060880	1061880	them were left.
1061880	1066200	And by none of them were left, I don't even mean that the nation states were gone, like
1066200	1072160	many of the cities were burned to the ground, and the languages and cultures don't survive.
1072160	1078440	Even though they wrote by pressing things into stone, like nobody was able to translate
1078440	1082440	those languages, even today we still can't translate a lot of them.
1082440	1092960	So like so much knowledge was lost here in this collapse, we'll get back to it later.
1092960	1096200	But so I want to bridge this to the modern day in some way, and my thesis for the rest
1096200	1100000	of this talk is that software is actually in decline right now.
1100000	1104240	It's in maybe a soft decline that just makes things really inconvenient for us, but it could
1104240	1109400	lead to a hard decline later on, because our civilization depends on software.
1109400	1110400	We put it everywhere.
1110400	1115120	All our communication systems are software, our vehicles are software, so we now have
1115120	1119640	airplanes that kill hundreds of people due to bad software, and bad software only, right?
1119640	1123840	There was no other problem with those airplanes.
1123840	1128500	Now I don't think most people would believe me if I say software is in decline, it sure
1128500	1133160	seems like it's flourishing, so I have to convince you at least that this is a plausible
1133160	1136320	perspective, and that's my goal for the rest of this talk.
1136320	1140640	And what I will say about that is, these collapses like we're talking about, that Bronze Age
1140640	1146200	collapse was massive, like all these civilizations were destroyed, but it took a hundred years.
1146200	1149760	So if you're at the beginning of that collapse in the first twenty years, you might think,
1149760	1153960	well, things aren't as good as they were twenty years ago, but it's fine, we're basically
1153960	1154960	the same, right?
1154960	1159120	But then you keep thinking that, you keep thinking that, every twenty years another
1159120	1163920	couple cities get burned to the ground, and then eventually there's like nothing, right?
1163920	1166840	Fall of the Roman Empire was about three hundred years.
1166840	1170800	So if you're in the middle of a very slow collapse like that, would you recognize it?
1170800	1174800	Would you know what it looked like from the inside?
1174800	1179200	So of course I expect the reply to what I'm saying to be, you're crazy, software is doing
1179200	1182640	great, look at all these internet companies that are making all this money and changing
1182640	1187840	the way that we live, you know, and I would say, yes, that is all happening, but what
1187840	1194380	is really happening is that software has been free riding on hardware.
1194380	1199920	For the past many decades, we've had amazing advances in hardware technology, computers
1199920	1204840	keep getting faster and faster, it's really one of the greatest accomplishments in human
1204840	1212280	history that we've somehow managed to do that, and software gets better in air quotes, because
1212280	1214320	it has better hardware to run on.
1214320	1216080	That's the main reason.
1216080	1221760	Software technology itself has not improved in quite a while, I claim, right?
1221760	1225600	And you can say, but look at all these examples of cool stuff we can do, even in the past
1225600	1227000	couple of years.
1227000	1232800	So like AlphaGo was an AI that'll beat human players at Go, and you can go on like Instagram
1232800	1236960	or whatever app and like make your face look like somebody else's face, that's crazy, we
1236960	1241080	didn't used to be able to do that, and that's true.
1241080	1245560	But one, most of these again are products of hardware being fast.
1245600	1251120	Most of these cool things that we do now are due to machine learning algorithms, and those
1251120	1256080	really are relying on quantity of computation right now to produce impressive results.
1256080	1260960	It's hard to imagine being able to train AlphaGo 20 years ago on the computers we had at that
1260960	1262160	time.
1262160	1268760	So there are software technology improvements here, machine learning algorithms have legitimately
1268760	1272440	gotten better, but there's two things to say about that.
1276160	1281000	Well, the main thing to say about it, I will say, is just that it's a minority of actual
1281000	1282800	software technology, right?
1282800	1287560	So of the volume of things that we run, the thing that runs the machine learning algorithm
1287560	1292440	that produces the actual impressive result is a very small piece of the program.
1292440	1296600	It's actually really simple once you understand the math, and especially if you don't have
1296640	1300040	to train it, if you just have to use it, right?
1300040	1303160	And so when you take an app on your phone like that, that does something funny with
1303160	1308360	your picture, the part of it that does the thing that we think is cool and really value,
1308360	1314040	that piece of software is tremendously simple compared to all the stuff about like loading
1314040	1319160	the bitmap for your face, or responding to user input events, right?
1319160	1324160	That part of the software is huge and complicated and is the part that's kind of falling apart.
1324160	1329200	So I would characterize software as having small, local, technological improvements like
1329200	1334720	machine learning with overall inertia or degradation in the rest of the field.
1334720	1338400	And we're very impressed by the improvements, though, right?
1338400	1343520	And let me illustrate the degradation part as best I can.
1343520	1347040	And it's to say that we simply don't expect software to work anymore.
1347040	1349520	And I'm not sure when this happened.
1349600	1355600	So I always had a reputation for being a little bit funny, but if you go back many decades ago,
1355600	1361600	it was generally due to not being user-friendly or hard to understand how to use it.
1361600	1365520	But today, if you're using a program and it does something wrong, you're just like, yeah,
1365520	1367520	it's software, restart it, whatever.
1370320	1371520	And that didn't used to be.
1373360	1379040	And if our standards are shrinking over time, how low can they shrink before it becomes unsustainable?
1379040	1385280	So I decided to say, you know, I want to quantify or illustrate how much I put up with this from
1385280	1389520	day to day. So from now on, I'm just going to take a screenshot every time any piece of software
1389520	1395760	that I use has an obvious bug or, you know, unintuitive or incorrect piece of behavior.
1395760	1403200	And, well, right when I decided that, I was working on my compiler in the command line and
1403200	1408080	the console that I use after a while just starts saying attempt to index a nil value in the prompt
1408080	1413280	because it's written in Lua for some reason. Then I go to Emacs and I'm working on my code
1413280	1418640	and Emacs is set to reload files that have been modified. And that used to work fine,
1418640	1423360	but at some point they broke it so that it reloads the file too early and doesn't get the whole
1423360	1427600	thing and half of it is cut off. And I have to like manually reset that every time it happens.
1429200	1433920	Then I go to Gmail and I'm going to send an email to the rest of the team about some graphics
1433920	1439520	stuff, making decisions about what to do and I copy a line of a previous email and paste it into
1439520	1444960	the reply box and then I start typing my reply and it goes into like a three-character wide column
1444960	1449760	over here because somehow they've managed to reproduce all the kinds of stupid Microsoft Word
1449760	1455120	formatting bugs that everyone was frustrated with in the 90s and 2000s. Now those are in Gmail
1455120	1459200	and I don't know how to fix it. Like you fight with it for a while to get it to stop happening.
1459200	1464400	You have to like delete something invisible. I don't know. Very annoying. So then I say okay,
1464400	1469200	I'm going to get some real programming done. I go to Visual Studio and I say I'm going to type in
1469200	1475040	my command line arguments up there and as soon as I do that we get this box that says, hey,
1475840	1480400	collection was modified, enumeration option may not, your operation may not execute.
1481280	1487040	Why? I don't exactly know. Why that's a problem? Like I'm just telling it a string,
1487040	1490720	we're not even trying to do anything with the string. It's just like save this for later for
1490720	1495840	when we want to run the program. But apparently that's too hard, right? And this is far from the
1495840	1501360	only problem with Visual Studio. Visual Studio has many, many bugs, but this is the funniest one
1501360	1507280	because it's so simple what I'm trying to do and it can't do it all the time. I don't know what
1507280	1512800	percentage of the time this happens. It's probably like 5%. I don't know, 4%. So then I decide to
1512800	1517280	break off, blow off some steam and play some games. So let me download a game on the Epic store,
1518080	1522720	but we're unable to start the download for some reason. So maybe I'll go to steam because that's
1522720	1528000	a more reliable, longer lasting store and I'm able to actually download a game. But then when I go
1528000	1532400	to the install window, it's just like a black window and I have to restart steam to play the game.
1532400	1536880	Then I manage to play the game and then I all tab out for a second to check something and then
1536880	1542080	now full screen is all messed up and the game's like up in a corner of a window, right? And then
1542080	1546000	I have to restart the game to get full screen again. And then I'm watching some Counter Strike.
1546000	1551920	There was a really good match between Cloud9 and Luminosity Gaming about a month ago. But for
1551920	1557200	the entire match, there was a mysterious six player on the Cloud9 side called Undefined up in
1557200	1561600	the corner there. Let me zoom in on that map for you Counter Strike fans. It's undefined as on the
1561600	1568400	left. 100,000 people were watching this match and it was there the whole time. I was thinking about
1568400	1572480	a game I like called Ultima 4. So I went to this website that had the map and the map was like
1573200	1577600	screwed up because it was like wrapping into extra lines. So I opened a different browser to see it
1577600	1583840	correctly. I needed to get a visa to come to the Russian Federation. So I go to the visa site and
1583840	1588240	I start typing my information and maybe I type out my phone number or I put the plus one and it
1588240	1593440	didn't like it or something. So it says phone number is invalid over here. But I couldn't fix
1593440	1597040	the phone number. No matter what I put in, it wouldn't accept it because whatever the variable was
1597040	1603280	for phone number is invalid would never get reset. So I had to like stop the application,
1603280	1608960	close the website, like clear my cookies, go back and reapply in order to be able to be very
1608960	1615600	careful when I was typing my phone number. There's just so many of these. All of this was within a
1615600	1621280	couple of days. I didn't have to try hard to find these. I just had to stop collecting them. But
1621280	1628000	then I come here and as if to give me more examples in this talk. So here in this hotel where I've
1628000	1632720	been writing this talk for a couple of days, they have this software controlled heating and lighting
1632720	1638640	system where it's like you kind of push the non button buttons and things happen. And some percentage
1638640	1644960	of the time, not all the time, when I turn the air conditioning on or off, the phone rings.
1646720	1650080	It's not a full ring even. It's just like a little bloop and then it stops.
1650720	1655280	But I know it's not intentional because it doesn't happen every time. And I am not making this up.
1655280	1662320	This actually happens in my room right now. Okay. And then for this talk two hours ago,
1662320	1668240	I was working at the last minute to make a diagram and I downloaded fully legitimate licensed,
1668240	1673280	creative cloud Photoshop to my machine. The first thing I do is go file new document,
1673280	1676960	bam, the new document extension could not be loaded because of a program error, right.
1677760	1681920	And so my whole point though is we are not surprised by any of this.
1683120	1687120	My other point is that it's getting worse over time. So try this every day yourself
1688560	1692880	because we've gotten used to it. I didn't even think it would be as much when I had the idea
1692880	1697680	to record this. I didn't think it would be as much as it was. Try counting for yourself just every
1697680	1701760	day, just make a little list of all these things. And I think you'll be surprised how many there are.
1702720	1708160	I don't know if anyone knows what this phrase means five nines. I'm sure a lot of people don't.
1708160	1714000	This used to be a very common phrase in the 1990s and 2000s when people wanted to sell you
1714000	1720880	software or a hardware system. What it means is this system is up and working and available
1721440	1728800	99.999% of the time, right. Four nines would be 99.99, whatever. And we don't use this anymore.
1729760	1735280	I think in part because the number of nines would be going down and we can't make it go up again.
1737040	1741440	And nobody, well certain parties don't seem to care. So I was working on this speech
1742160	1748320	for about the past week and twice, once when I was asleep on the airplane and once the other
1748320	1754160	night in the room, my laptop just rebooted while it was in sleep mode and just killed all my programs
1754160	1758160	and stuff. I guess because it was an update. Maybe it wasn't an update. Maybe it was just
1758160	1762960	the operating system failing, but I think it was an update. So that automatically takes my laptop
1762960	1768320	down to like three nines or less, less than three nines. And if the laptop is less than three nines,
1768320	1775520	nothing running on it could be three or four or five nines, right. So we've even lost the rhetoric
1775520	1781280	of quality that we used to have, right. And so if you say this kind of thing that software is buggy,
1781280	1786240	then people like web programmers or hacker news people or whatever will say, yeah, we know, but
1786320	1793840	the market won't pay for it, right. Like we could make software better, but that takes time and
1793840	1800960	money to fix the bugs and all that stuff. And our client won't pay for it or the market punishes
1800960	1806160	that because you take longer to get to market. And that's true to some extent. I could definitely
1806160	1812240	argue with some parts of it. But here's the thing that I'm thinking today. If you haven't seen an
1812240	1818800	entire industry produce robust software for decades, what makes you think they actually can,
1818800	1823520	right? They're saying we could do it if we wanted to, but we're just totally not. But why would I
1823520	1828400	believe that they actually can do it, right? Because like we've said, there's this generational
1828400	1834320	transmission of knowledge factor that I don't think is being passed along, right. So I think the
1834320	1842880	knowledge of how to make things less buggy is lost. And even the knowledge of a technology
1842880	1847200	company has changed. And again, this illustrates the difference between software and hardware.
1847200	1854320	A hardware technology company used to be a place that makes advanced materials or designs new
1854320	1860400	radar or like does something that you didn't used to be able to do before, right. So now in Silicon
1860400	1867600	Valley and as nearly as I could tell around the world, a software quote tech company is just a
1867600	1873440	company that does stuff with computers and is then hoping to stumble into a market niche that it can
1873440	1879680	exploit. And the point is the market niche, the point isn't the software. And the point is especially
1879680	1886080	not designing higher tech software that pushes the threshold of technology forward, which is what
1886080	1892400	hardware companies always used to do. And so we've even corrupted the words tech company, right.
1894400	1897200	Okay, so now I want to bring it a little closer to what we do.
1899120	1903920	There's been this sequence of abstraction that we've gone through as programmers over the decades,
1903920	1906800	right. Originally you had to program your computer and machine language.
1909200	1914400	Then there was assembly language. Then we had this sequence of higher level languages like Fortran
1914400	1920720	and C or C++. Nowadays we have stuff like C sharp or Haskell or JavaScript that are even further
1920720	1928240	away from the machine. And the justification for this is like, look, we're working at a higher
1928240	1932720	level of abstraction. The higher your level of abstraction, the more work you get done because
1932720	1937120	you don't have to worry about scheduling machine instructions and stuff. So we're really being
1937120	1941840	smart and we're saving effort. And I think that's actually true. I don't think we want to program
1941920	1947440	things in assembly language. That's a waste of time. But somewhere through this chain it becomes
1947440	1952480	wrong. And that's how people are wrong a lot of the times, right. Like you start out by being right
1952480	1959680	and then you extrapolate it too far into wrong territory. But the important thing to all of
1959680	1965360	this is that we only see one side of it. We see that we're being smart and saving effort and we
1965360	1969680	don't see the flip side of all of these things, which is that there's a corresponding loss of
1969680	1975840	capability, right. Because I don't program in assembly anymore, I no longer am able to program
1975840	1985120	in assembly, right. If I don't, you know, if I use languages that are too high level and I'm a
1985120	1989840	little bit lazy as people often are, I don't know where my variables live in memory or what they
1989840	1994880	look like or even how remotely how big they are, right. I certainly don't know what the CPU is doing
1994880	2000320	in response to the code that I've written. I may be scared to use non-managed languages because
2000320	2005680	the very idea of memory allocation just seems too hard and scary. Or even if I'm a person who
2005680	2010720	programs in a non-managed language, maybe I'm afraid of pointers and start generating this
2010720	2016720	cult of being afraid of pointers and what to do about that like the modern C++ people do, right.
2016720	2022080	And so the rhetoric that we have is I'm being smart, I shouldn't have to do the low level stuff,
2022080	2028560	right. But part of the reality is the loss of capability that corresponds to those choices.
2028560	2032800	And both of those things can be true at the same time. I'm not saying that we're not being
2032800	2038160	smart by going up some level a little bit. I mean, there's a problem which is at the point of going
2038160	2043440	up all these levels is supposed to be to make everybody more productive. But programmers are
2043440	2048960	not more productive now than they used to be. In fact, it looks to me like productivity per
2048960	2054000	programmer is approaching zero. And if that's true, then where's the proof that going up this
2054000	2059360	ladder of abstraction further and further is really helping. So the way to at least, you know,
2059360	2064640	get a feel for this is you look at a company like, you know, Twitter or Facebook, it's the
2064640	2069280	employees a lot of people. And you look at their product and you say how much does that product
2069280	2075600	change from year to year, right. How much functionality is added to Twitter year after year.
2075600	2080960	How much functionality is added to Facebook. It's not that much, right. And then just divide
2080960	2085920	by the number of engineers at the company, right, which is thousands or tens of thousands sometimes.
2087600	2091840	That's a very small number when you do that division, right. It's it's going to be pretty close
2091840	2099200	to zero. So what's going on, right. And to illustrate again the difference in productivity
2099200	2104480	and that it's not just me that thinks this, I'm going to show an excerpt from an interview
2104480	2108880	with Ken Thompson, who is the original author of the UNIX operating system.
2108880	2114080	And he's talking about the time at Bell Laboratories when he first started making
2114800	2119680	UNIX on a computer that by modern standards had like no software at all, right.
2122320	2131280	At some point, I realized without knowing it up until that point that I was three weeks from an
2131280	2138800	operating system with three programs, one a week. An editor, I needed an editor to write code.
2140240	2146880	I needed an assembler to turn the code into language I could run. And I needed a little
2146880	2155600	kernel kind of overlay, call it an operating system. And luckily right at that moment, my wife
2155600	2168720	went on a three week vacation to take my one year old roughly to visit my in-laws who were in
2168720	2175600	California. Disappeared all alone and one week, one week, one week and we had UNIX.
2175600	2187840	Yeah, I think programmers aren't quite as productive these days as they used to be.
2190720	2194560	Yeah, he says programmers aren't productive these days like that and everybody laughs,
2195200	2199200	but it's funny, but it's not funny, right. It's really not funny when you consider
2200720	2205200	like how much waste there must be in the difference between how productive people are and how
2205200	2211920	productive they could be if everything wasn't so messed up, right. So I've made a case that
2211920	2217280	robustness of software is declining, productivity of programmers is declining. So if you're going
2217280	2222560	to say that actual technology of software is somehow advancing, it seems contrary to those
2222560	2228640	two facts, right. So I think the argument that software is advancing is clearly false, except
2228640	2235360	again maybe in tiny local bubble like areas. So now why is it so bad? Why is it so hard to write
2235360	2242240	programs? Why are we so miserable when we try to write programs today? It's because we're adding
2242240	2247920	too much complication to everything, right. And I have a way that I think about this called
2247920	2252960	you can't just, right, where there's all kinds of things that you used to be able to do on a
2253040	2259120	computer that you can't do today, right. So today you can't just copy a program from one
2259120	2264480	computer to another and have it work, right. You need to have an installer or like a flat pack
2264480	2271200	on Linux or like containers if you're a server hacker news guy, right. And so people think this
2271200	2275760	is a cool, oh, now we have containers. That's an advantage or it's an advancement of software
2275760	2281520	technology. All containers are doing is get us back to the 1960s when we didn't have to do any of
2281520	2285280	this stuff, except it's actually not because it's adding all these steps that you have to do,
2285280	2292160	right. And things you have to maintain. So now think about for a second, like why do you need
2292160	2298720	an installer to install software? Is it because of the CPU? Not really. Like imagine you have,
2298720	2304640	well, you know, imagine you have some x64 machine code and don't worry about how you got it into a
2304640	2309120	computer's memory, but you just got it there and you just jumped to it. You set the program counter
2309120	2315520	to that code. That code is going to do the same thing on a Windows PC as it does on a Mac, as it
2315520	2321360	does on a Linux machine, as it does on an Xbox, as it does on a PlayStation 4, all right. Because
2321360	2328720	all of those systems use compatible CPUs. So what's the installer for? The installer is to get
2328720	2334800	around the incompatibilities that we added at the OS layer, which is this immensely complex thing
2334800	2341760	that we mostly don't want, actually. And so we tend to think about operating systems as adding
2341760	2347360	capabilities to a system, to the system of the hardware and the software, but they also remove
2347360	2354400	capabilities like compatibility, right. And it's often very arbitrary and it doesn't get any worse
2354400	2359760	than I think it does for us today when it comes to shading languages. Anyone who shifts 3D engines
2359760	2365040	is going to know what I'm talking about. So it used to be that if you wanted to compile a program
2365040	2370800	for many platforms, you could write it in some portable language like C or C++, and you might
2370800	2375440	have to do some little if-defs to modify it for the different platforms, but you could do that,
2375440	2380320	and it's mostly the same program. Today, you can't do that because we've decided if you're running a
2380320	2385440	shader, it needs to be in a different programming language on every single platform, even if the
2385440	2393200	hardware is the same, right. So if you have an x86 CPU and an NVIDIA GPU, then on one OS, you need
2393200	2397680	to write your shader in metal shading language, and on another OS, you need to write it in HLSL,
2398320	2403520	right. And they're different even though they're the same. And so you either have to rewrite
2403520	2409280	everything n times where n is large, or you have to start using auto translation systems
2410000	2415200	to rewrite your shaders, and those come with a lot of complexity and annoyance and bugs.
2416240	2422240	And why, though, a shader is a simpler program than the old programs that we used to write,
2422240	2428000	but why have we made it harder to build a simpler program? It doesn't make any sense. We don't care,
2428000	2433440	right. So the list of things you can't just do. You can't just copy a program. You can't just statically
2433440	2437760	link. You can't just draw pixels to the screen. Oh my God, the number of steps you have to do to
2438000	2444480	draw a pixel today is crazy. You can't just write a shader. You can't just compile a program on
2444480	2449280	Windows without a manifest and stuff. And on these new closed platforms, you can't just run an
2449280	2454480	executable unless it's signed through this whole process, right. And all of these things, and many
2454480	2461600	more that are not on this list, add friction, bugs, time, engineering time, and headspace
2461600	2468000	that keeps us from thinking about interesting things to actually do. There are a couple of
2468000	2473360	examples of this that illustrate this isn't going to end anytime soon, have entered my own life. So
2473360	2479200	one of my side projects is a compiler, and to compile programs, you need to link them against
2479200	2484960	libraries on people's machine, like, for example, the Windows SDK and the C runtime library.
2487040	2490880	And now different versions of things install those in different places on the machine,
2490880	2493680	and so you have to, like, be able to find them to do the linking.
2495280	2500480	And rather than make this easy, today, Microsoft gives you a program called VSware,
2500480	2505120	which you can find on GitHub. And the job of VSware is just to tell you where these libraries
2505120	2513280	are installed. It is more than 7,000 lines of source code in 70 files. And they didn't even try
2513280	2517920	to bundle it as a library. It's a standalone program. So what they're thinking now is,
2517920	2523680	you can't just make a compiler that's a standalone program. It's obviously going to be a suite of
2523680	2527680	applications. And once you have a suite of applications, what's one more? What's, like,
2527680	2532000	a little VSware hanging out in there, right? They're not even thinking that this would be bad.
2533120	2538000	It's crazy. I made my own version of this based on some other people's work and got it down to,
2538000	2544000	like, 500 lines of code, which is still way too many to basically ask two questions that
2544000	2551440	should be two lines of code, right? It's a multiplier of 250. And then, also in the programming
2551440	2557120	language world, there's this thing called language server protocol that is pretty much the worst
2557120	2560800	thing that I've ever heard of. And there are just proponents of this all over. They're building
2560800	2564480	systems for this right now that are going to be living on your computer tomorrow or today.
2565360	2571600	Already, maybe. And as far as I can tell, it's basically a more complicated, slower way to do
2571680	2577200	libraries. So say you've got an editor for some programming language and you want to be able
2577200	2582080	to do stuff that we've been doing for decades already, like, look up the declaration of an
2582080	2587440	identifier by clicking on it or have tooltips that say, like, what type is this value, right?
2588080	2594240	Well, they say the way you should do that is, you know, you have your editor and then it's a hassle
2594240	2599440	to make plugins. This is the made up problem. It's a hassle to make plugins for all these different
2599440	2604080	things. So in order to standardize, you're going to run a server on your machine, and then your
2604080	2608640	editor talks over a socket to the server, and the server talks back and gives you the answer,
2608640	2617440	right? Which has now turned your single program into a distributed system. But the flaw in this
2617440	2621520	whole line of thinking that none of these people seems to actually, like, think about at all,
2621520	2626000	is that there's nothing special about, like, looking up the location of an identifier in your
2626080	2634640	that's just an API like we have all the time for everything. So the obvious next step, if you're
2634640	2640720	saying that we should architect our APIs like this, is to do this for other tasks, right? So now your
2640720	2645440	editor or whatever program is going to be talking to multiple of these things. And now if you ever
2645440	2651280	want to author anything for this, you now have to author and debug components of a distributed
2651360	2657520	system where state is not located in any central place, and we all know how fun that is, right?
2657520	2661840	But of course, libraries are not that simple, right? Libraries use other libraries. So what
2661840	2666400	happens at that point is you're running all these servers on your system, and who knows,
2666400	2670960	some of them are going to, like, go down and, like, have to restart, and people are synchronizing
2670960	2676160	with each other. No, this is a disaster, right? And people are actively building this right now.
2676240	2682640	And meanwhile, while we're spending all this time over-complicating stuff that we used to be
2682640	2688240	able to do in 1960, in the games industry, we're not even able to do the things that we've needed
2688240	2693840	to do forever. So, like, today, games can't run consistently in full screen, as you see from
2693840	2698480	the screenshot. And I don't wish to bag on that particular game, because we all put a lot of
2698480	2702560	engineering work into trying to make our game run in full screen. It's kind of embarrassing, like,
2702560	2708160	why, right? Also, it's actually impossible on a PC right now to render at a smooth frame rate.
2708160	2714960	It is simply not possible no matter what you do. Alan Ladovac of Croteam has a talk at GDC and a
2714960	2719600	paper about what you actually would need to do this. We just don't even have that capability,
2721120	2726640	which is insane, right? And yet we're spending all this effort on other things. And so this
2726640	2732160	complication that's introduced into all of our systems not only makes our lives difficult in
2732160	2737120	the present when we're trying to build something, it accelerates the loss of knowledge over time,
2737120	2744400	right? So, first of all, there's more to know when things are more complicated. And so if you
2744400	2750320	talk about a job spread among many people, each individual person knows a smaller percent of
2750320	2754560	what they need to do. They have a less global view, which makes it harder to do good work,
2754560	2759680	right? And harder to transmit their knowledge onto people in the future. Another thing that
2759680	2764320	happens is that deep knowledge becomes replaced by trivia. So, deep knowledge might be a general
2764320	2769120	concept. Like, here's how cache coherency works, and that enables software to run fast on, like,
2769120	2775440	different processors and stuff. And trivia is something like, well, this sprite in Unity doesn't
2775440	2779520	display properly for some reason, but we know we can fix it if you open this panel and toggle
2779520	2784080	this Boolean, and that fixes it for a while, but then some weeks later, for random reasons,
2784080	2787840	the Boolean mysteriously untoggles. So, just make sure to check that before you ship,
2787840	2792400	and it'll be fine, right? And the reason that's trivial is not only because it doesn't apply to
2792400	2797440	anything else in the world, but it's also going to be outdated in six months when the next Unity
2797440	2802480	comes out. And it's just offensive that we're spending our brain power on these things, okay?
2802480	2806880	And the third thing that happens is good information is drowned by noise. So, if something is really
2806880	2812400	hard to understand, the percentage of people who put the effort into understanding it is going to
2812400	2818560	be small. And the harder it is, the smaller that percentage. And so, if you ask people or you learn
2818560	2824800	at a school or you search on the web, your probability of getting a bad answer to the problem
2824800	2829280	is much higher for more complicated things than it is for less complicated things. And so, the
2829280	2836640	complication propagates and magnifies. So, let's get back to this collapse of civilization stuff,
2836640	2842000	right? The more complexity we put in our system, the less likely we are to survive a disaster,
2842000	2845600	right? Because we have to maintain all that complexity. We're acting right now
2846880	2851920	like we believe that the upper limit of what we can handle is infinity amount of complexity,
2851920	2857440	right? But I don't think that makes any sense. So, what's the upper limit? How would we decide
2857440	2864400	how much complexity we can handle? And that's different from what people today actually can
2864400	2869680	handle. So, if you have an engineer who can hold a whole system in his head that's really complicated
2869680	2874800	and work on it, when that guy quits and needs to pass on his job to somebody new, he's not
2874800	2879040	necessarily going to be able to communicate all that, right? So, the amount of complexity we can
2879040	2884400	sustain over time is less than the amount of complexity that individuals can do today, right?
2884400	2888400	So, why am I talking about this at a games conference, right? Like, everybody knows that
2888400	2895600	games aren't serious and whatever, right? But video games at least used to be about maximizing
2895680	2900240	what the machine could do and like really impressing the people playing the game. And
2900240	2904880	maximizing the machine means you have to understand the machine very well and that correlates
2904880	2909280	with robust software because if you understand the machine well, you're less likely to
2910560	2915520	make the kind of bugs that come from misunderstanding. There's anti-correlations with robust software
2915520	2923120	too. But anyway, now we're not really about that so much, especially talking about
2923120	2929200	independent developers. People are shifting to Unity and Unreal and Mass, right? Not very
2929200	2934400	many people write their own engines anymore. So, we have entire generations of programmers
2934400	2940400	who have grown up learning to program by, you know, making little C-sharp snippets that just
2940400	2944640	plug into other parts of Unity or something and they've never written something systemic and
2944640	2950000	they've never written something low-level. Which on the one hand is fine. Like, I'm not
2950000	2954480	saying we shouldn't do that because there's a degree to which it's smart. It reduces development
2954480	2964480	time, right? It helps you ship your game sooner. But like I said before, there's a flip side.
2964480	2969920	That flip side is giving up the capability of doing the other thing, giving up the knowledge
2969920	2975920	of how to do the other thing. So, I don't think it's bad in isolation if a lot of people make
2975920	2981600	games where they just put snippets into Unity, right? But if everybody does that, then nobody
2981600	2988080	knows how to do anything but that. And then after a while, what's going to happen? Because
2988080	2993040	we're assuming that we'll just be able to use these engines forever. But Unity and Unreal were
2993040	2998800	created in an environment where there were lots of people at games companies making engines all
2998800	3005360	the time, right? And that's where they hired people from. And when there's no longer a natural way
3005360	3009840	to learn how to make engines because nobody does it, where are Unity and Unreal going to hire
3009840	3015520	employees from to maintain those engines that everybody's using, right? And to the extent
3015520	3019600	that they can hire people is the quality of people going to go down because they have less
3019600	3025920	experience. It just takes a long time to ramp up, right? So then maybe at some point, well,
3025920	3030800	certainly at some point, there's not enough people to make a new competing engine. But maybe even at
3030800	3035200	some point, you can't really maintain the old ones and they just keep decaying over time.
3035200	3040880	That can happen. And so the way I used to think about game developers is kind of like the foundation
3040880	3046560	in the Asimov books where we kind of knew how to really program computers. And also some other
3046560	3051520	kinds of programmers like embedded systems people and high performance computing people all sort of
3051520	3057520	knew what was going on with computers. And after the rest of software just kind of decays and falls
3057520	3061840	apart, we still have the knowledge and we could bring it back and give it to people. But I'm not
3061840	3068320	really sure that that's going to happen now because I just don't know. I mean, I don't know if there
3068320	3074080	will be enough of us doing low level work or even people doing high level work who understand what's
3074080	3080000	happening at the low level while they do the high level, right? So maybe there needs to be a second
3080000	3087920	foundation spoiler alert for anyone who hasn't read the book. So back in the Bronze Age, one of
3087920	3092560	the reasons those civilizations disappeared is that the way things were set up was that reading and
3092560	3099040	writing was only done by a small elite class who went to school for years and this was protected.
3099040	3102640	The public couldn't know how to do this. They probably mostly didn't want to know.
3104480	3109040	And because those skills weren't widespread, they were fragile. So when the society was disrupted,
3109040	3114880	they weren't continued because not enough people could carry it forward. Today almost nobody knows
3114880	3121120	what's happening on a CPU, right? That skill is not widespread, so it's fragile. And so do we think
3121120	3126800	that this immensely complicated thing that we've built today is somehow more robust than what they
3126800	3132080	had in the Bronze Age with just making bronze because that didn't survive. If that didn't survive,
3132080	3137280	why do we think what we're doing now is going to survive, right? And we might have some similar
3137280	3142240	stressors. We might have some climate change issues, right? Or we might have some new stuff.
3142240	3146000	Like what happens if there are so many cyber attacks that countries just start cutting each
3146000	3151040	other off the internet, right? Now, lots of people in lots of countries can't get to stack overflow
3151040	3155600	to figure out how to copy and paste their code. So their code production is impacted, right?
3155600	3160080	Or what happens if China just says, you know what, we're just going to keep all the CPUs now.
3160080	3166000	We don't want to sell you any. What's going to happen, right? None of these things in isolation,
3166080	3171680	I don't think will bring down civilization. But it can certainly hit the system with a big
3171680	3175840	shock. And if the system is too complex, it may not survive that shock very well.
3178160	3184560	And so I'm just trying to say, like Elon Musk was saying, the technology by itself will degrade.
3184560	3189920	And we need to, as soon as we can, start working against this, right? At every level that we have
3189920	3194880	access to. We have to simplify the hardware we're running on. We have to simplify the operating
3194880	3199520	systems we use, the libraries we use, the application code we write, the communication
3199520	3204160	systems we do this over, like the internet. We have to simplify how we compile, debug,
3204160	3207760	and distribute software. And we have to simplify how people interface with software.
3208640	3213360	And that sounds like really a lot of stuff to do. But the good news is that all of these things
3213360	3219440	are so ridiculously complicated right now that it's very easy to find things to improve. Simplifying
3219520	3226000	any of these systems only requires the will to do it. And at taste, you have to have a taste
3226560	3231520	to recognize how complicated things are and how they would be better if they weren't so complicated.
3232560	3237200	Okay, now a lot of people are probably like, okay, whatever, software is complicated, but I don't
3237200	3243280	believe civilization is going to collapse or anything. And so, you know, maybe, maybe, but
3243600	3249360	uh, I would say if you're a programmer, you should care about this anyway, because even
3249360	3255680	just your own personal future, like programmers are not that happy today. We're often very grumpy.
3255680	3259600	And the reason we're grumpy is because we're doing stupid things all the time instead of
3259600	3264480	interesting things. And that's not going to get better if we keep doing things the way that we
3264480	3271840	do them, right? So you personally will be happier if we change the way we do things. And if we do
3271920	3276480	things the way they are now, maybe the future is deeply mediocre in the way that America's space
3276480	3284240	future was going to be deeply mediocre. Now, even if you just want to survive as just an individual
3284240	3289520	game developer, like you're thinking, look, I just want to get my game done. I want to ship it.
3291360	3297760	I want it to succeed financially. Even if you just want to have a very limited scope of concern
3297760	3304160	like that, removing complexity is still the right short term play. Even if it doesn't seem
3304160	3310560	like it, I'm sure we all are very familiar with cases like, well, we're going to ship in five months
3310560	3314880	and we're having a lot of problems with this particular system. It's really buggy, you know,
3314880	3320480	it loses people's work all the time, whatever, but we just have to stick with it for five months
3320480	3325600	and it'll be passed. It'll be history. And that's good because rewriting it would be a lot of
3325600	3329840	effort. It might delay shipping. And so we're going to stick with it. We're going to stick out the
3329840	3334480	five months. And that's always wrong because always what happens is it takes two years to ship
3334480	3339280	instead of five months. And so the amount that you suffered from the system is way worse than it
3339280	3344240	otherwise would have been. And maybe in fact that system was a large ingredient in why it took so
3344240	3354400	long to ship. So simplify. And in simplifying your own code to solve your own local problems,
3355360	3360960	you're also building institutional knowledge about how to simplify, which sounds really basic,
3360960	3367760	but I would claim we don't even really have that anymore. Here's some references of videos you
3367760	3372720	can watch. If you're interested in this kind of topic, Casey Meritori's video, the 30 million line
3372720	3378640	problem, Samo Beria's video, civilizations, institutions, knowledge in the future. And then
3378640	3385200	Eric Klein's video, which I showed snapshots of earlier, 1177 BC, the year civilization collapsed.
3385760	3388640	And that's all I have to say for now. Thank you for your time.
3394080	3402320	Wow. Very impressive. Don't you think that the collapse will happen when we reach the point
3402320	3408160	of technological singularity? Because simplifying is, I think, some kind of way to prevent it.
3409360	3417440	You know, once you start saying singularity, it's too hard. The point of singularity is you
3417440	3421680	can't predict what's going to happen. Sure. Yeah. Maybe it'll be bad. Maybe good. Yeah. I don't
3421680	3427440	believe in singularity the way a lot of people do. It doesn't seem realistic to me. But
3431360	3436560	as you get close to that kind of situation, things move faster. And if things are moving fast,
3436640	3442720	they break easily. Okay. Yeah. It's what about foundation, by the way, right? Yeah. Well,
3442720	3446720	and one of the objections, because I'm always criticizing my own, like, what is the counterpoint
3446720	3451840	to this? And what if we just let software get really complicated and then just make an AI that
3451840	3456640	understands it? And that's fine. And it's like, okay, maybe, but you really want human beings to
3456640	3464240	not be able to understand software. It doesn't seem good. Okay, we have about five, 10 minutes
3464240	3470000	for questions. So if you have one, you can ask. Yeah, come here and ask.
3474080	3479840	Thank you very much for this beautiful speech and beautiful mind. Welcome to Russia, by the way.
3479840	3485360	Thank you. And I've been doing games in Game Maker for 17 years, and we spent one year on
3485360	3490560	doing 3D in Game Maker. And I was asking myself a question why we did this. And actually now I
3490560	3496400	know the answer. And I have another thought about it. Friedrich Nietzsche, when he was already an
3496400	3503520	old man, he started to lose his sight and he couldn't write anymore, couldn't think actually,
3503520	3508880	because he would think while writing. And so he started using Hansen's writing ball. And this
3508880	3515040	was the first type writer to use. But his style changed. And when I switched from Game Maker to
3515120	3525360	Unreal, as a game designer, saw that my style, my way of thinking changed. Don't you think that
3525360	3531520	tools, they somehow force us to think in a certain type of way, and for you making a new language
3531520	3540320	as somehow to break through this and start thinking wider, broader? I think I would agree with that.
3540320	3546720	And I would also say, though, because we think with tools often, unnecessary complications or
3546720	3551360	bugs in the tools interfere with the thought process. Like you're in flow, you're doing stuff,
3552160	3556560	and then something bad happens, and you're like, now I have to go fix this thing, and you can't
3556560	3562640	do what you were doing. So I definitely think that's important. When I'm making my new language,
3564560	3569920	I'm trying as best I can to get rid of all these complications that don't make sense.
3569920	3574320	But there's so many of them. And some of them are baked into our assumptions, because I learned
3574320	3580320	a program by using these complicated systems. So what I see as simpler may be very far from
3580320	3584400	the actual simplicity that we could achieve, because my thinking has been trained on those tools.
3585280	3589040	So we'll see. We'll see how it comes out. Thank you. Thank you.
3589200	3600320	Hi. So let's say I'm an indie developer, and I'm sold on your ideas. I don't like
3600320	3608160	Unity either. And I want to put pixels on screen with great ease, but I'm not yet ready to write
3608160	3612560	my own engine as you do. Well, you would have to write your own operating system to put pixels on
3612560	3625200	the screen. So what is the set of currently existing tools I can use? Well, I don't know,
3625200	3630640	because part of the problem is everything is this way. So really what needs to happen is not
3630640	3639600	about specific tools that you use. It's about developing the aesthetics for things that are
3639600	3646000	not a giant horrible mess. And whatever tool looks like that to you, just use that instead of
3646000	3650720	whatever you're using, and then maybe we could migrate everybody slowly over time. Yeah, the
3650720	3658800	problem is when I look for ways to get to the lower level things I find is like Visual Studio and
3658800	3667040	C++, and it doesn't help very much. It's super complex, and it breaks every time, and whatever.
3668000	3669120	Yeah, I don't know, man.
3674160	3681440	Thank you very much for your talk. My question is, in 1968, 30 years after the concept of the
3681440	3691520	computer was invented, Edgar Dijkstra said that where the mainframes were having two megabytes
3691520	3699040	of memory, even then, Edgar Dijkstra said that the programming is just too hard by its concept
3699040	3706880	to be done by human beings. Are you sure that simplification will help to any extent?
3706880	3712720	Well, it'll help, whether it makes them completely understandable by us. I don't know. I mean,
3712720	3716400	I think you could, I haven't read the Dijkstra piece that you're talking about.
3716480	3723040	It's called Humble Programmer. Okay. I think you could rate it by what problem are you trying
3723040	3728720	to solve, right, and how complicated, like there's an inherent complexity to a problem,
3728720	3733200	first of all, and so there may be problems that are so complicated it may be hard to understand
3733200	3737600	what the software looks like to solve that, but then there's also added complication because
3737600	3743600	we're solving this with existing systems, and those systems already prevent us from doing certain
3743680	3749920	things. And so there's a difference between ideal complexity and actual complexity, and I just
3749920	3755040	want to get closer to ideal complexity. Whether that's good enough, I don't know.
