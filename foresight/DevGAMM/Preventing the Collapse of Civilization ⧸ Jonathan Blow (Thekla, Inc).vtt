WEBVTT

00:00.000 --> 00:08.440
Then when it came to giving a talk, it made me think about some things that transpired

00:08.440 --> 00:13.440
between both of our societies some decades ago.

00:13.440 --> 00:19.640
For example, in 1957, when the Soviet Union launched Sputnik, the world's first man-made

00:19.640 --> 00:22.840
satellite that orbited the Earth successfully.

00:22.840 --> 00:26.560
Back in the USA, everybody freaked out about this.

00:26.560 --> 00:31.480
They didn't like being behind in space and said, oh my God, we got to catch up.

00:31.480 --> 00:36.520
We have to get a satellite into orbit in 90 days, which seemed crazy.

00:36.520 --> 00:37.520
And it was.

00:37.520 --> 00:40.400
Our first attempt blew up on the launch pad.

00:40.400 --> 00:42.600
But the second attempt succeeded.

00:42.600 --> 00:44.840
That was January 31, 1958.

00:44.840 --> 00:48.360
It was almost 120 days after that initial launch.

00:48.360 --> 00:52.240
It's pretty fast by modern standards.

00:52.240 --> 00:58.120
Then in April 1961, Yuri Gagarin became the first human being to orbit the Earth.

00:58.120 --> 01:01.640
And again, that made news all over the world.

01:01.640 --> 01:03.600
Everybody was very impressed by that.

01:03.600 --> 01:08.200
And back in the United States, people were upset because, again, we were behind.

01:08.200 --> 01:12.680
We were behind in what was becoming clear was the space race.

01:12.680 --> 01:16.640
And we didn't like that and what were we going to do about it.

01:16.640 --> 01:23.440
So in May 1961, one month after that flight, our president at the time, Kennedy, made a

01:23.440 --> 01:27.760
speech to Congress saying, look, if we're going to catch up and not be behind forever,

01:27.760 --> 01:29.000
we have to do something big.

01:29.000 --> 01:31.800
We have to commit a lot of money, a lot of resources.

01:31.800 --> 01:33.720
We're going to go to the moon, right?

01:33.720 --> 01:35.960
And that was kind of a crazy idea.

01:35.960 --> 01:40.440
And in 1962, he reiterated this in a famous public speech.

01:40.440 --> 01:44.560
And he said, look, we're going to go to the moon before the decade is over.

01:44.560 --> 01:46.400
And that was crazy.

01:46.400 --> 01:50.880
He was really crazy because we hadn't done anything remotely like that.

01:50.880 --> 01:53.400
But lo and behold, eventually we did.

01:53.400 --> 02:00.920
So Apollo 11 launched on July 16, 1969, before the decade was over.

02:00.920 --> 02:06.840
And just this year, there's a very good documentary that came out about this whole mission.

02:06.840 --> 02:14.160
What it is is it's made of all original footage that NASA took during the mission that's been

02:14.200 --> 02:18.280
sitting away in cupboards and closets, and they restored the footage, and they sort of

02:18.280 --> 02:22.800
made a recreation of what it was like to live through this mission.

02:22.800 --> 02:29.760
And I'm going to play a short excerpt from that documentary just to give you a sense

02:29.760 --> 02:31.920
of what the scale of this whole thing was like.

03:14.160 --> 03:23.760
It's a lot.

03:23.760 --> 03:24.760
And it's crazy.

03:24.760 --> 03:28.800
We went from nothing to all that stuff in something like 12 years.

03:28.800 --> 03:32.440
Before Sputnik flew, we didn't have much of a space program in the United States.

03:32.440 --> 03:35.280
And in the end, we had all that stuff.

03:35.280 --> 03:38.200
And then, of course, after that, we continued to do space things, right?

03:38.200 --> 03:39.920
We made the space shuttle.

03:39.920 --> 03:41.360
It seemed like a really cool thing.

03:41.360 --> 03:42.960
It's like a ship out of science fiction.

03:42.960 --> 03:44.800
It could take off and then land again.

03:44.800 --> 03:46.680
That's so great, right?

03:46.680 --> 03:51.000
Problem is, actually, most of it couldn't land, like those tanks in the background there.

03:51.000 --> 03:55.720
And therefore, it was very expensive to fly, and it was very unreliable.

03:55.720 --> 03:59.680
People died on this on a couple of different missions, and we decided to stop using it

03:59.680 --> 04:01.360
for all these reasons.

04:01.360 --> 04:08.000
So after that, if we wanted to put people in orbit, we had to get a ride on the Soyuz.

04:08.000 --> 04:14.120
And then, from there, the trajectory of our space program kept going downwards.

04:14.120 --> 04:20.640
And so if you talk to somebody like me, sometime around the year 2002 or 2005, we all had this

04:20.640 --> 04:22.240
attitude like, isn't it a shame?

04:22.240 --> 04:27.280
Like the USA used to do all this cool stuff in space, and now we don't really do anything

04:27.280 --> 04:32.360
in the science fiction future that we visualized isn't really going to happen.

04:32.360 --> 04:36.560
And we don't ever see that changing, but what can you do about it?

04:36.560 --> 04:38.560
Well, shrug, right?

04:38.560 --> 04:43.120
That was just everybody's attitude, but not quite everybody, right?

04:43.120 --> 04:50.880
At some point, somebody came along who made a bunch of money on a website and said, hey,

04:50.880 --> 04:52.400
I want to do something about this.

04:52.400 --> 04:57.560
Despite having no rocket experience, I'm going to start a company to launch rockets and to

04:57.560 --> 04:59.840
do bigger stuff than we've ever done before.

04:59.840 --> 05:04.520
And so here's an excerpt of a video about why he did that stuff.

05:05.400 --> 05:11.760
Then there's becoming a multi-panel species in space-frame civilization.

05:11.760 --> 05:13.680
This is not inevitable.

05:13.680 --> 05:16.080
It's very important to appreciate this is not inevitable.

05:16.080 --> 05:21.040
The sustainable energy future, I think, is largely inevitable, but being space-frame

05:21.040 --> 05:24.320
civilization is definitely not inevitable.

05:24.320 --> 05:31.960
If you look at the progress in space, in 1969, we were able to send 70 to the moon.

05:31.960 --> 05:37.840
In 1969, then we had the space shuttle.

05:37.840 --> 05:40.480
The space shuttle could only take people to low-Earth orbit.

05:40.480 --> 05:46.400
Then the space shuttle retired, and the United States could take no one to orbit.

05:46.400 --> 05:47.400
So that's the trend.

05:47.400 --> 05:49.600
The trend is down to nothing.

05:49.600 --> 05:50.600
This is not...

05:50.600 --> 05:56.000
If you are mistaken when they think that technology just automatically improves, it

05:56.000 --> 05:58.160
does not automatically improve.

05:58.160 --> 06:02.640
It only improves if a lot of people work very hard to make it better.

06:02.640 --> 06:08.720
And actually, it will, I think, by itself degrade, actually.

06:08.720 --> 06:12.760
You look at great civilizations like ancient Egypt, and they were able to make the permits,

06:12.760 --> 06:14.960
and they forgot how to do that.

06:14.960 --> 06:17.480
And in the Romans, they built these incredible aqueducts.

06:17.480 --> 06:19.640
They forgot how to do it.

06:23.440 --> 06:26.520
So his idea was pretty successful.

06:26.520 --> 06:31.080
And today we're like landing rockets, and we're seriously talking about doing another

06:31.080 --> 06:33.920
moon mission as soon as the year 2024.

06:33.920 --> 06:37.880
We'll see if that actually happens, but we're at least talking about it seriously, and that's

06:37.880 --> 06:42.480
a pretty good thing, given where we were not long ago.

06:42.480 --> 06:46.200
So Elon talked about a few things from the past that were great achievements that have

06:46.200 --> 06:48.840
been lost, and I wanted to go through a few more of those.

06:48.840 --> 06:53.000
To reiterate his point, that technology automatically degrades.

06:53.000 --> 06:56.720
This thing here that you see is the Lycurgus Cup.

06:56.720 --> 07:05.040
This was a relic found and dated back to the Roman Empire, 380, and it's made of glass,

07:05.040 --> 07:10.000
and this glass that it's made of is the world's earliest known nanomaterial.

07:10.000 --> 07:14.480
The color of the glass changes based on how you look at it, like where the light source

07:14.480 --> 07:15.480
is.

07:15.480 --> 07:18.560
So if you're looking at it standing in front of the glass, and the light source is over

07:18.560 --> 07:23.360
here with you so that you're seeing it with reflected light, then the goblet is green.

07:23.360 --> 07:27.720
But if light is passing through it, the goblet is red.

07:27.720 --> 07:34.680
They had this in 300 AD, and then the Roman Empire fell, and that knowledge was lost until

07:34.680 --> 07:37.720
basically forever.

07:37.720 --> 07:42.760
The way this worked was actually, it got figured out around 1990.

07:42.760 --> 07:46.840
The glass is suffused with very small particles of silver and gold.

07:46.880 --> 07:51.800
By very small, I mean 50 to 70 nanometers, which is so small you would not be able to

07:51.800 --> 07:54.080
see them with a physical microscope.

07:54.080 --> 07:58.400
You would require an electron microscope to see these particles, right?

07:58.400 --> 08:03.240
But at some point the Roman Empire fell, and they forgot how to do it.

08:03.240 --> 08:05.280
A lot of craftsmanship went into this.

08:05.280 --> 08:09.800
You could see how it's hollowed out on the inside where the little guy's body is, to

08:09.800 --> 08:14.560
give him more of a purple sheen as opposed to a red in the background.

08:14.600 --> 08:20.080
If you hear people talk about this today, or you read up on this, they tend to have a

08:20.080 --> 08:24.600
dismissive attitude toward it, like, oh, the stupid Romans didn't understand technology.

08:24.600 --> 08:28.280
They probably didn't even know it was silver and gold that made this happen.

08:28.280 --> 08:31.280
It was probably just an accident, and they made like five of these, right?

08:31.280 --> 08:33.240
Which is complete nonsense.

08:33.240 --> 08:38.440
Anybody who actually builds things as opposed to just writing about them knows you do not

08:38.440 --> 08:43.840
get a result this good without a constant process of iteration and refinement.

08:43.840 --> 08:46.520
You can imagine there was some initial accident.

08:46.520 --> 08:50.800
Maybe somebody wanted to make glass sparkly, and they tried to put silver and gold in it,

08:50.800 --> 08:54.280
and then they noticed a little bit of discoloration, and they said, why is that there?

08:54.280 --> 08:55.760
Maybe they pursued that.

08:55.760 --> 08:58.400
What happens when I change the proportions?

08:58.400 --> 09:01.280
How thick should the glass be?

09:01.280 --> 09:04.040
Engineering results this good takes a long time.

09:04.040 --> 09:08.960
What that means is that in Rome, people were doing something that we would recognize today

09:08.960 --> 09:14.840
as material science, and then that was lost.

09:14.840 --> 09:15.840
Other stuff happened.

09:15.840 --> 09:20.280
Like, in the Byzantine Empire, they had flamethrowers, and not like little dinky things.

09:20.280 --> 09:25.640
They had giant pressurized vessels in the bellies of ships that shot out a napalm-like

09:25.640 --> 09:31.800
substance out of metal tubes that they would use to incinerate neighboring vessels.

09:31.800 --> 09:36.400
It was napalm-like in the sense that, like, water would not put this fire out, right?

09:36.400 --> 09:37.920
It was a very serious weapon.

09:37.920 --> 09:40.440
It was a state secret of the Byzantine Empire.

09:40.440 --> 09:44.840
They used it to defend Constantinople over and over again for hundreds of years until

09:44.840 --> 09:50.200
one day they couldn't really do that anymore, for whatever reason, and this military secret

09:50.200 --> 09:52.840
just faded from knowledge.

09:52.840 --> 09:55.600
Nobody knows how to do it now, right?

09:55.600 --> 10:00.760
Obviously, we've reinvented flamethrowers, but they're different.

10:00.760 --> 10:06.400
This is the Antikythera mechanism, which is named after an island in Greece where this

10:06.400 --> 10:08.520
was found on a sunken ship.

10:08.520 --> 10:12.240
It was just a corroded hunk of metal, or a number of corroded hunks of metal, but it

10:12.240 --> 10:17.080
was very clear when they originally discovered that gears were involved, and over time people

10:17.080 --> 10:23.120
analyzed this, they realized it's a mechanical calendar that was used to say things like,

10:23.120 --> 10:27.240
you know, what year is it, what are the phases of the moon, where are the planets going to

10:27.240 --> 10:30.960
be right now, when is the next Olympic Games, right?

10:30.960 --> 10:37.800
And people have run scans on what is left of this and managed to deduce what all the

10:37.800 --> 10:41.320
gears were in this mechanism, and it's very different from what I thought.

10:41.320 --> 10:44.960
When I first heard news about this, I thought like, oh, they must have had some cute little

10:44.960 --> 10:46.360
gear things in Greece.

10:46.360 --> 10:52.840
That's surprising, but let me just show you the scale of the generally agreed upon reconstruction

10:52.840 --> 11:20.280
of what this device actually was.

11:20.280 --> 11:24.240
That seems like a lot of gears, right?

11:24.240 --> 11:50.920
But wait, there's more.

11:50.920 --> 12:05.440
So, ancient Greece had that, but that is not the picture that we have today of ancient

12:05.440 --> 12:07.400
Greece, right?

12:07.400 --> 12:10.240
And the thing to realize is, you don't just get here from nothing.

12:10.240 --> 12:14.320
It's not like one day there weren't any gears, and then the next day some guy makes this,

12:14.320 --> 12:15.320
right?

12:15.320 --> 12:20.360
You need a whole process of science to create something that's sophisticated, and we don't

12:20.360 --> 12:22.040
know anything about that today, right?

12:22.040 --> 12:25.920
All of that was lost.

12:25.920 --> 12:27.520
And I could go on and on with examples.

12:27.520 --> 12:31.200
There's a whole bunch of things from history that are like this, but we don't have time.

12:31.200 --> 12:40.160
I just want to restate that right now we live in a very privileged time where technology

12:40.160 --> 12:42.640
has been in a good shape for a long time.

12:42.640 --> 12:47.080
We see it getting better, and so we imagine that the natural course of history is that

12:47.080 --> 12:51.520
technology always improves, and that these moments in history are just like little blips

12:51.520 --> 12:54.000
or something that we heard about, but they're not just little blips.

12:54.000 --> 13:00.160
It's actually sort of the regular course of world history that great achievements in technology

13:00.160 --> 13:06.560
just get completely lost because the civilizations that made those achievements fell or had a

13:06.560 --> 13:11.040
sort of a soft fall where they failed to propagate the knowledge into the future, right?

13:11.040 --> 13:14.800
Technology goes backward all the time, and not just in ancient history, also in the modern

13:14.800 --> 13:15.880
day, right?

13:15.880 --> 13:17.320
We lose knowledge all the time.

13:17.320 --> 13:22.000
So I'm going to read an excerpt from an interview with Bob Colwell, who was the chief microprocessor

13:22.000 --> 13:25.880
architect at Intel for a while, but this interview is from before that.

13:25.880 --> 13:30.880
It was from the booming days of Silicon Valley when he worked at a startup called MultiFlow.

13:30.880 --> 13:35.240
They were trying to make a very large instruction word processor when that was a new experimental

13:35.240 --> 13:40.280
idea, and they were having a lot of problems like when you try to design the chip, you're

13:40.280 --> 13:44.760
using components from other manufacturers, and he just couldn't get anything to work

13:44.760 --> 13:48.480
reliably, and he was like, what the hell, right?

13:48.480 --> 13:54.760
So he says, Rich Lethen and I made a pilgrimage down to Texas Instruments in Richardson, Texas,

13:54.760 --> 13:59.000
and we said, as best as we can tell, many of your chips don't work properly, and does

13:59.000 --> 14:01.280
this come as a surprise to you?

14:01.280 --> 14:02.960
I half expected them to say, what?

14:02.960 --> 14:03.960
You're out of your mind.

14:03.960 --> 14:05.680
You've done something wrong.

14:05.680 --> 14:06.680
Come on.

14:06.680 --> 14:07.680
You don't know what you're doing.

14:07.680 --> 14:09.680
Go use somebody else's chips.

14:09.680 --> 14:11.720
But no, they said, yeah, we know.

14:11.720 --> 14:12.720
Let me see your list.

14:13.000 --> 14:17.800
And they looked at the list and said, well, here's some more that you don't know about.

14:17.800 --> 14:19.860
And by the way, it wasn't just TI.

14:19.860 --> 14:23.120
Their parts were no worse than anybody else's.

14:23.120 --> 14:24.280
Motorolas were no good.

14:24.280 --> 14:25.720
Fairchilds were no good.

14:25.720 --> 14:26.960
They all had this problem.

14:26.960 --> 14:32.200
And so I asked TI, how did the entire industry fall on its face at the same time?

14:32.200 --> 14:36.800
We are killing ourselves trying to work around the shortcomings in your Silicon.

14:36.800 --> 14:41.560
And the guy said, the first generation of transistor logic was done by the old graybeard

14:41.560 --> 14:43.960
guys who really knew what they were doing.

14:43.960 --> 14:47.720
The new generation was done by kids who are straight out of school who didn't know to

14:47.720 --> 14:51.680
ask what the change in packaging would do to inductive spikes.

14:51.680 --> 14:55.640
So when you change the voltage in places on a chip, it generates a magnetic field, because

14:55.640 --> 14:56.920
that's just what happens.

14:56.920 --> 15:01.120
And when those fields interact across a chip, it's bad.

15:01.120 --> 15:08.200
And the new people designing these chips didn't know to take that seriously.

15:08.200 --> 15:11.800
And that's why technology degrades, or it's at least one reason.

15:11.800 --> 15:17.840
It takes a lot of energy and effort to communicate from generation to generation these important

15:17.840 --> 15:22.760
things that you need to know in order to do a competent job making the technology.

15:22.760 --> 15:29.280
And there are losses in that communication process almost inevitably.

15:29.280 --> 15:34.320
And without this generational transfer of knowledge, civilizations can die because of technology

15:34.320 --> 15:39.480
that those civilizations depend on degrades and fails.

15:39.480 --> 15:44.920
So let's talk about a civilization that fell, actually a whole group of civilizations.

15:44.920 --> 15:49.720
The diagrams I'm going to show here are from a lecture you can find on YouTube called 1177

15:49.720 --> 15:53.920
BC, the year civilization collapsed by Eric Klein.

15:53.920 --> 15:58.600
And we're talking about the late Bronze Age, which was the time of a number of civilizations

15:58.600 --> 16:04.160
you've heard of probably like the Egyptians, or the Mycenaean Greeks, right, or the Hittites,

16:04.160 --> 16:06.640
the Babylonians.

16:06.640 --> 16:11.720
And so this civilization, or this network of civilizations was sort of spanning Mesopotamia

16:11.720 --> 16:17.780
and the Mediterranean Sea, and they had developed quite a sophisticated network of trade.

16:17.780 --> 16:22.920
So in this graph here, each of these points is one of the civilizations, and the lines

16:22.920 --> 16:28.200
are established communication and trade routes between those civilizations.

16:28.200 --> 16:32.920
And whereas not all of them were connected to all of the other ones, they were interconnected

16:32.920 --> 16:38.080
enough that you could relatively efficiently route things from one place to another if

16:38.080 --> 16:43.000
you needed to, and that was very important.

16:43.000 --> 16:48.760
Because Bronze, which the civilization depended on for things like defense, was hard to make

16:48.760 --> 16:49.920
back then.

16:49.920 --> 16:55.120
You had to do it by combining copper and tin, and copper was relatively hard to find and

16:55.120 --> 17:00.280
was found in places like the island of Cyprus, and tin was also really hard to find and was

17:00.280 --> 17:04.880
found very far away from those copper places like in Afghanistan.

17:04.880 --> 17:10.400
You somehow had to persistently ship these things around in order to make your bronze,

17:10.400 --> 17:12.960
and the other things that your society depended on.

17:12.960 --> 17:19.160
And nobody's sure exactly what happened in this collapse, but people believe there was

17:19.160 --> 17:24.240
some kind of environmental stressor to kick it off, like there was a huge drought, possibly

17:24.240 --> 17:29.560
also some floods are theorized, and this led to some people attacking some other people,

17:29.560 --> 17:34.640
and maybe you need to start using your ships for defense instead of trading.

17:34.640 --> 17:40.880
And basically you went from all these flourishing civilizations to 100 years later, none of

17:40.880 --> 17:41.880
them were left.

17:41.880 --> 17:46.200
And by none of them were left, I don't even mean that the nation states were gone, like

17:46.200 --> 17:52.160
many of the cities were burned to the ground, and the languages and cultures don't survive.

17:52.160 --> 17:58.440
Even though they wrote by pressing things into stone, like nobody was able to translate

17:58.440 --> 18:02.440
those languages, even today we still can't translate a lot of them.

18:02.440 --> 18:12.960
So like so much knowledge was lost here in this collapse, we'll get back to it later.

18:12.960 --> 18:16.200
But so I want to bridge this to the modern day in some way, and my thesis for the rest

18:16.200 --> 18:20.000
of this talk is that software is actually in decline right now.

18:20.000 --> 18:24.240
It's in maybe a soft decline that just makes things really inconvenient for us, but it could

18:24.240 --> 18:29.400
lead to a hard decline later on, because our civilization depends on software.

18:29.400 --> 18:30.400
We put it everywhere.

18:30.400 --> 18:35.120
All our communication systems are software, our vehicles are software, so we now have

18:35.120 --> 18:39.640
airplanes that kill hundreds of people due to bad software, and bad software only, right?

18:39.640 --> 18:43.840
There was no other problem with those airplanes.

18:43.840 --> 18:48.500
Now I don't think most people would believe me if I say software is in decline, it sure

18:48.500 --> 18:53.160
seems like it's flourishing, so I have to convince you at least that this is a plausible

18:53.160 --> 18:56.320
perspective, and that's my goal for the rest of this talk.

18:56.320 --> 19:00.640
And what I will say about that is, these collapses like we're talking about, that Bronze Age

19:00.640 --> 19:06.200
collapse was massive, like all these civilizations were destroyed, but it took a hundred years.

19:06.200 --> 19:09.760
So if you're at the beginning of that collapse in the first twenty years, you might think,

19:09.760 --> 19:13.960
well, things aren't as good as they were twenty years ago, but it's fine, we're basically

19:13.960 --> 19:14.960
the same, right?

19:14.960 --> 19:19.120
But then you keep thinking that, you keep thinking that, every twenty years another

19:19.120 --> 19:23.920
couple cities get burned to the ground, and then eventually there's like nothing, right?

19:23.920 --> 19:26.840
Fall of the Roman Empire was about three hundred years.

19:26.840 --> 19:30.800
So if you're in the middle of a very slow collapse like that, would you recognize it?

19:30.800 --> 19:34.800
Would you know what it looked like from the inside?

19:34.800 --> 19:39.200
So of course I expect the reply to what I'm saying to be, you're crazy, software is doing

19:39.200 --> 19:42.640
great, look at all these internet companies that are making all this money and changing

19:42.640 --> 19:47.840
the way that we live, you know, and I would say, yes, that is all happening, but what

19:47.840 --> 19:54.380
is really happening is that software has been free riding on hardware.

19:54.380 --> 19:59.920
For the past many decades, we've had amazing advances in hardware technology, computers

19:59.920 --> 20:04.840
keep getting faster and faster, it's really one of the greatest accomplishments in human

20:04.840 --> 20:12.280
history that we've somehow managed to do that, and software gets better in air quotes, because

20:12.280 --> 20:14.320
it has better hardware to run on.

20:14.320 --> 20:16.080
That's the main reason.

20:16.080 --> 20:21.760
Software technology itself has not improved in quite a while, I claim, right?

20:21.760 --> 20:25.600
And you can say, but look at all these examples of cool stuff we can do, even in the past

20:25.600 --> 20:27.000
couple of years.

20:27.000 --> 20:32.800
So like AlphaGo was an AI that'll beat human players at Go, and you can go on like Instagram

20:32.800 --> 20:36.960
or whatever app and like make your face look like somebody else's face, that's crazy, we

20:36.960 --> 20:41.080
didn't used to be able to do that, and that's true.

20:41.080 --> 20:45.560
But one, most of these again are products of hardware being fast.

20:45.600 --> 20:51.120
Most of these cool things that we do now are due to machine learning algorithms, and those

20:51.120 --> 20:56.080
really are relying on quantity of computation right now to produce impressive results.

20:56.080 --> 21:00.960
It's hard to imagine being able to train AlphaGo 20 years ago on the computers we had at that

21:00.960 --> 21:02.160
time.

21:02.160 --> 21:08.760
So there are software technology improvements here, machine learning algorithms have legitimately

21:08.760 --> 21:12.440
gotten better, but there's two things to say about that.

21:16.160 --> 21:21.000
Well, the main thing to say about it, I will say, is just that it's a minority of actual

21:21.000 --> 21:22.800
software technology, right?

21:22.800 --> 21:27.560
So of the volume of things that we run, the thing that runs the machine learning algorithm

21:27.560 --> 21:32.440
that produces the actual impressive result is a very small piece of the program.

21:32.440 --> 21:36.600
It's actually really simple once you understand the math, and especially if you don't have

21:36.640 --> 21:40.040
to train it, if you just have to use it, right?

21:40.040 --> 21:43.160
And so when you take an app on your phone like that, that does something funny with

21:43.160 --> 21:48.360
your picture, the part of it that does the thing that we think is cool and really value,

21:48.360 --> 21:54.040
that piece of software is tremendously simple compared to all the stuff about like loading

21:54.040 --> 21:59.160
the bitmap for your face, or responding to user input events, right?

21:59.160 --> 22:04.160
That part of the software is huge and complicated and is the part that's kind of falling apart.

22:04.160 --> 22:09.200
So I would characterize software as having small, local, technological improvements like

22:09.200 --> 22:14.720
machine learning with overall inertia or degradation in the rest of the field.

22:14.720 --> 22:18.400
And we're very impressed by the improvements, though, right?

22:18.400 --> 22:23.520
And let me illustrate the degradation part as best I can.

22:23.520 --> 22:27.040
And it's to say that we simply don't expect software to work anymore.

22:27.040 --> 22:29.520
And I'm not sure when this happened.

22:29.600 --> 22:35.600
So I always had a reputation for being a little bit funny, but if you go back many decades ago,

22:35.600 --> 22:41.600
it was generally due to not being user-friendly or hard to understand how to use it.

22:41.600 --> 22:45.520
But today, if you're using a program and it does something wrong, you're just like, yeah,

22:45.520 --> 22:47.520
it's software, restart it, whatever.

22:50.320 --> 22:51.520
And that didn't used to be.

22:53.360 --> 22:59.040
And if our standards are shrinking over time, how low can they shrink before it becomes unsustainable?

22:59.040 --> 23:05.280
So I decided to say, you know, I want to quantify or illustrate how much I put up with this from

23:05.280 --> 23:09.520
day to day. So from now on, I'm just going to take a screenshot every time any piece of software

23:09.520 --> 23:15.760
that I use has an obvious bug or, you know, unintuitive or incorrect piece of behavior.

23:15.760 --> 23:23.200
And, well, right when I decided that, I was working on my compiler in the command line and

23:23.200 --> 23:28.080
the console that I use after a while just starts saying attempt to index a nil value in the prompt

23:28.080 --> 23:33.280
because it's written in Lua for some reason. Then I go to Emacs and I'm working on my code

23:33.280 --> 23:38.640
and Emacs is set to reload files that have been modified. And that used to work fine,

23:38.640 --> 23:43.360
but at some point they broke it so that it reloads the file too early and doesn't get the whole

23:43.360 --> 23:47.600
thing and half of it is cut off. And I have to like manually reset that every time it happens.

23:49.200 --> 23:53.920
Then I go to Gmail and I'm going to send an email to the rest of the team about some graphics

23:53.920 --> 23:59.520
stuff, making decisions about what to do and I copy a line of a previous email and paste it into

23:59.520 --> 24:04.960
the reply box and then I start typing my reply and it goes into like a three-character wide column

24:04.960 --> 24:09.760
over here because somehow they've managed to reproduce all the kinds of stupid Microsoft Word

24:09.760 --> 24:15.120
formatting bugs that everyone was frustrated with in the 90s and 2000s. Now those are in Gmail

24:15.120 --> 24:19.200
and I don't know how to fix it. Like you fight with it for a while to get it to stop happening.

24:19.200 --> 24:24.400
You have to like delete something invisible. I don't know. Very annoying. So then I say okay,

24:24.400 --> 24:29.200
I'm going to get some real programming done. I go to Visual Studio and I say I'm going to type in

24:29.200 --> 24:35.040
my command line arguments up there and as soon as I do that we get this box that says, hey,

24:35.840 --> 24:40.400
collection was modified, enumeration option may not, your operation may not execute.

24:41.280 --> 24:47.040
Why? I don't exactly know. Why that's a problem? Like I'm just telling it a string,

24:47.040 --> 24:50.720
we're not even trying to do anything with the string. It's just like save this for later for

24:50.720 --> 24:55.840
when we want to run the program. But apparently that's too hard, right? And this is far from the

24:55.840 --> 25:01.360
only problem with Visual Studio. Visual Studio has many, many bugs, but this is the funniest one

25:01.360 --> 25:07.280
because it's so simple what I'm trying to do and it can't do it all the time. I don't know what

25:07.280 --> 25:12.800
percentage of the time this happens. It's probably like 5%. I don't know, 4%. So then I decide to

25:12.800 --> 25:17.280
break off, blow off some steam and play some games. So let me download a game on the Epic store,

25:18.080 --> 25:22.720
but we're unable to start the download for some reason. So maybe I'll go to steam because that's

25:22.720 --> 25:28.000
a more reliable, longer lasting store and I'm able to actually download a game. But then when I go

25:28.000 --> 25:32.400
to the install window, it's just like a black window and I have to restart steam to play the game.

25:32.400 --> 25:36.880
Then I manage to play the game and then I all tab out for a second to check something and then

25:36.880 --> 25:42.080
now full screen is all messed up and the game's like up in a corner of a window, right? And then

25:42.080 --> 25:46.000
I have to restart the game to get full screen again. And then I'm watching some Counter Strike.

25:46.000 --> 25:51.920
There was a really good match between Cloud9 and Luminosity Gaming about a month ago. But for

25:51.920 --> 25:57.200
the entire match, there was a mysterious six player on the Cloud9 side called Undefined up in

25:57.200 --> 26:01.600
the corner there. Let me zoom in on that map for you Counter Strike fans. It's undefined as on the

26:01.600 --> 26:08.400
left. 100,000 people were watching this match and it was there the whole time. I was thinking about

26:08.400 --> 26:12.480
a game I like called Ultima 4. So I went to this website that had the map and the map was like

26:13.200 --> 26:17.600
screwed up because it was like wrapping into extra lines. So I opened a different browser to see it

26:17.600 --> 26:23.840
correctly. I needed to get a visa to come to the Russian Federation. So I go to the visa site and

26:23.840 --> 26:28.240
I start typing my information and maybe I type out my phone number or I put the plus one and it

26:28.240 --> 26:33.440
didn't like it or something. So it says phone number is invalid over here. But I couldn't fix

26:33.440 --> 26:37.040
the phone number. No matter what I put in, it wouldn't accept it because whatever the variable was

26:37.040 --> 26:43.280
for phone number is invalid would never get reset. So I had to like stop the application,

26:43.280 --> 26:48.960
close the website, like clear my cookies, go back and reapply in order to be able to be very

26:48.960 --> 26:55.600
careful when I was typing my phone number. There's just so many of these. All of this was within a

26:55.600 --> 27:01.280
couple of days. I didn't have to try hard to find these. I just had to stop collecting them. But

27:01.280 --> 27:08.000
then I come here and as if to give me more examples in this talk. So here in this hotel where I've

27:08.000 --> 27:12.720
been writing this talk for a couple of days, they have this software controlled heating and lighting

27:12.720 --> 27:18.640
system where it's like you kind of push the non button buttons and things happen. And some percentage

27:18.640 --> 27:24.960
of the time, not all the time, when I turn the air conditioning on or off, the phone rings.

27:26.720 --> 27:30.080
It's not a full ring even. It's just like a little bloop and then it stops.

27:30.720 --> 27:35.280
But I know it's not intentional because it doesn't happen every time. And I am not making this up.

27:35.280 --> 27:42.320
This actually happens in my room right now. Okay. And then for this talk two hours ago,

27:42.320 --> 27:48.240
I was working at the last minute to make a diagram and I downloaded fully legitimate licensed,

27:48.240 --> 27:53.280
creative cloud Photoshop to my machine. The first thing I do is go file new document,

27:53.280 --> 27:56.960
bam, the new document extension could not be loaded because of a program error, right.

27:57.760 --> 28:01.920
And so my whole point though is we are not surprised by any of this.

28:03.120 --> 28:07.120
My other point is that it's getting worse over time. So try this every day yourself

28:08.560 --> 28:12.880
because we've gotten used to it. I didn't even think it would be as much when I had the idea

28:12.880 --> 28:17.680
to record this. I didn't think it would be as much as it was. Try counting for yourself just every

28:17.680 --> 28:21.760
day, just make a little list of all these things. And I think you'll be surprised how many there are.

28:22.720 --> 28:28.160
I don't know if anyone knows what this phrase means five nines. I'm sure a lot of people don't.

28:28.160 --> 28:34.000
This used to be a very common phrase in the 1990s and 2000s when people wanted to sell you

28:34.000 --> 28:40.880
software or a hardware system. What it means is this system is up and working and available

28:41.440 --> 28:48.800
99.999% of the time, right. Four nines would be 99.99, whatever. And we don't use this anymore.

28:49.760 --> 28:55.280
I think in part because the number of nines would be going down and we can't make it go up again.

28:57.040 --> 29:01.440
And nobody, well certain parties don't seem to care. So I was working on this speech

29:02.160 --> 29:08.320
for about the past week and twice, once when I was asleep on the airplane and once the other

29:08.320 --> 29:14.160
night in the room, my laptop just rebooted while it was in sleep mode and just killed all my programs

29:14.160 --> 29:18.160
and stuff. I guess because it was an update. Maybe it wasn't an update. Maybe it was just

29:18.160 --> 29:22.960
the operating system failing, but I think it was an update. So that automatically takes my laptop

29:22.960 --> 29:28.320
down to like three nines or less, less than three nines. And if the laptop is less than three nines,

29:28.320 --> 29:35.520
nothing running on it could be three or four or five nines, right. So we've even lost the rhetoric

29:35.520 --> 29:41.280
of quality that we used to have, right. And so if you say this kind of thing that software is buggy,

29:41.280 --> 29:46.240
then people like web programmers or hacker news people or whatever will say, yeah, we know, but

29:46.320 --> 29:53.840
the market won't pay for it, right. Like we could make software better, but that takes time and

29:53.840 --> 30:00.960
money to fix the bugs and all that stuff. And our client won't pay for it or the market punishes

30:00.960 --> 30:06.160
that because you take longer to get to market. And that's true to some extent. I could definitely

30:06.160 --> 30:12.240
argue with some parts of it. But here's the thing that I'm thinking today. If you haven't seen an

30:12.240 --> 30:18.800
entire industry produce robust software for decades, what makes you think they actually can,

30:18.800 --> 30:23.520
right? They're saying we could do it if we wanted to, but we're just totally not. But why would I

30:23.520 --> 30:28.400
believe that they actually can do it, right? Because like we've said, there's this generational

30:28.400 --> 30:34.320
transmission of knowledge factor that I don't think is being passed along, right. So I think the

30:34.320 --> 30:42.880
knowledge of how to make things less buggy is lost. And even the knowledge of a technology

30:42.880 --> 30:47.200
company has changed. And again, this illustrates the difference between software and hardware.

30:47.200 --> 30:54.320
A hardware technology company used to be a place that makes advanced materials or designs new

30:54.320 --> 31:00.400
radar or like does something that you didn't used to be able to do before, right. So now in Silicon

31:00.400 --> 31:07.600
Valley and as nearly as I could tell around the world, a software quote tech company is just a

31:07.600 --> 31:13.440
company that does stuff with computers and is then hoping to stumble into a market niche that it can

31:13.440 --> 31:19.680
exploit. And the point is the market niche, the point isn't the software. And the point is especially

31:19.680 --> 31:26.080
not designing higher tech software that pushes the threshold of technology forward, which is what

31:26.080 --> 31:32.400
hardware companies always used to do. And so we've even corrupted the words tech company, right.

31:34.400 --> 31:37.200
Okay, so now I want to bring it a little closer to what we do.

31:39.120 --> 31:43.920
There's been this sequence of abstraction that we've gone through as programmers over the decades,

31:43.920 --> 31:46.800
right. Originally you had to program your computer and machine language.

31:49.200 --> 31:54.400
Then there was assembly language. Then we had this sequence of higher level languages like Fortran

31:54.400 --> 32:00.720
and C or C++. Nowadays we have stuff like C sharp or Haskell or JavaScript that are even further

32:00.720 --> 32:08.240
away from the machine. And the justification for this is like, look, we're working at a higher

32:08.240 --> 32:12.720
level of abstraction. The higher your level of abstraction, the more work you get done because

32:12.720 --> 32:17.120
you don't have to worry about scheduling machine instructions and stuff. So we're really being

32:17.120 --> 32:21.840
smart and we're saving effort. And I think that's actually true. I don't think we want to program

32:21.920 --> 32:27.440
things in assembly language. That's a waste of time. But somewhere through this chain it becomes

32:27.440 --> 32:32.480
wrong. And that's how people are wrong a lot of the times, right. Like you start out by being right

32:32.480 --> 32:39.680
and then you extrapolate it too far into wrong territory. But the important thing to all of

32:39.680 --> 32:45.360
this is that we only see one side of it. We see that we're being smart and saving effort and we

32:45.360 --> 32:49.680
don't see the flip side of all of these things, which is that there's a corresponding loss of

32:49.680 --> 32:55.840
capability, right. Because I don't program in assembly anymore, I no longer am able to program

32:55.840 --> 33:05.120
in assembly, right. If I don't, you know, if I use languages that are too high level and I'm a

33:05.120 --> 33:09.840
little bit lazy as people often are, I don't know where my variables live in memory or what they

33:09.840 --> 33:14.880
look like or even how remotely how big they are, right. I certainly don't know what the CPU is doing

33:14.880 --> 33:20.320
in response to the code that I've written. I may be scared to use non-managed languages because

33:20.320 --> 33:25.680
the very idea of memory allocation just seems too hard and scary. Or even if I'm a person who

33:25.680 --> 33:30.720
programs in a non-managed language, maybe I'm afraid of pointers and start generating this

33:30.720 --> 33:36.720
cult of being afraid of pointers and what to do about that like the modern C++ people do, right.

33:36.720 --> 33:42.080
And so the rhetoric that we have is I'm being smart, I shouldn't have to do the low level stuff,

33:42.080 --> 33:48.560
right. But part of the reality is the loss of capability that corresponds to those choices.

33:48.560 --> 33:52.800
And both of those things can be true at the same time. I'm not saying that we're not being

33:52.800 --> 33:58.160
smart by going up some level a little bit. I mean, there's a problem which is at the point of going

33:58.160 --> 34:03.440
up all these levels is supposed to be to make everybody more productive. But programmers are

34:03.440 --> 34:08.960
not more productive now than they used to be. In fact, it looks to me like productivity per

34:08.960 --> 34:14.000
programmer is approaching zero. And if that's true, then where's the proof that going up this

34:14.000 --> 34:19.360
ladder of abstraction further and further is really helping. So the way to at least, you know,

34:19.360 --> 34:24.640
get a feel for this is you look at a company like, you know, Twitter or Facebook, it's the

34:24.640 --> 34:29.280
employees a lot of people. And you look at their product and you say how much does that product

34:29.280 --> 34:35.600
change from year to year, right. How much functionality is added to Twitter year after year.

34:35.600 --> 34:40.960
How much functionality is added to Facebook. It's not that much, right. And then just divide

34:40.960 --> 34:45.920
by the number of engineers at the company, right, which is thousands or tens of thousands sometimes.

34:47.600 --> 34:51.840
That's a very small number when you do that division, right. It's it's going to be pretty close

34:51.840 --> 34:59.200
to zero. So what's going on, right. And to illustrate again the difference in productivity

34:59.200 --> 35:04.480
and that it's not just me that thinks this, I'm going to show an excerpt from an interview

35:04.480 --> 35:08.880
with Ken Thompson, who is the original author of the UNIX operating system.

35:08.880 --> 35:14.080
And he's talking about the time at Bell Laboratories when he first started making

35:14.800 --> 35:19.680
UNIX on a computer that by modern standards had like no software at all, right.

35:22.320 --> 35:31.280
At some point, I realized without knowing it up until that point that I was three weeks from an

35:31.280 --> 35:38.800
operating system with three programs, one a week. An editor, I needed an editor to write code.

35:40.240 --> 35:46.880
I needed an assembler to turn the code into language I could run. And I needed a little

35:46.880 --> 35:55.600
kernel kind of overlay, call it an operating system. And luckily right at that moment, my wife

35:55.600 --> 36:08.720
went on a three week vacation to take my one year old roughly to visit my in-laws who were in

36:08.720 --> 36:15.600
California. Disappeared all alone and one week, one week, one week and we had UNIX.

36:15.600 --> 36:27.840
Yeah, I think programmers aren't quite as productive these days as they used to be.

36:30.720 --> 36:34.560
Yeah, he says programmers aren't productive these days like that and everybody laughs,

36:35.200 --> 36:39.200
but it's funny, but it's not funny, right. It's really not funny when you consider

36:40.720 --> 36:45.200
like how much waste there must be in the difference between how productive people are and how

36:45.200 --> 36:51.920
productive they could be if everything wasn't so messed up, right. So I've made a case that

36:51.920 --> 36:57.280
robustness of software is declining, productivity of programmers is declining. So if you're going

36:57.280 --> 37:02.560
to say that actual technology of software is somehow advancing, it seems contrary to those

37:02.560 --> 37:08.640
two facts, right. So I think the argument that software is advancing is clearly false, except

37:08.640 --> 37:15.360
again maybe in tiny local bubble like areas. So now why is it so bad? Why is it so hard to write

37:15.360 --> 37:22.240
programs? Why are we so miserable when we try to write programs today? It's because we're adding

37:22.240 --> 37:27.920
too much complication to everything, right. And I have a way that I think about this called

37:27.920 --> 37:32.960
you can't just, right, where there's all kinds of things that you used to be able to do on a

37:33.040 --> 37:39.120
computer that you can't do today, right. So today you can't just copy a program from one

37:39.120 --> 37:44.480
computer to another and have it work, right. You need to have an installer or like a flat pack

37:44.480 --> 37:51.200
on Linux or like containers if you're a server hacker news guy, right. And so people think this

37:51.200 --> 37:55.760
is a cool, oh, now we have containers. That's an advantage or it's an advancement of software

37:55.760 --> 38:01.520
technology. All containers are doing is get us back to the 1960s when we didn't have to do any of

38:01.520 --> 38:05.280
this stuff, except it's actually not because it's adding all these steps that you have to do,

38:05.280 --> 38:12.160
right. And things you have to maintain. So now think about for a second, like why do you need

38:12.160 --> 38:18.720
an installer to install software? Is it because of the CPU? Not really. Like imagine you have,

38:18.720 --> 38:24.640
well, you know, imagine you have some x64 machine code and don't worry about how you got it into a

38:24.640 --> 38:29.120
computer's memory, but you just got it there and you just jumped to it. You set the program counter

38:29.120 --> 38:35.520
to that code. That code is going to do the same thing on a Windows PC as it does on a Mac, as it

38:35.520 --> 38:41.360
does on a Linux machine, as it does on an Xbox, as it does on a PlayStation 4, all right. Because

38:41.360 --> 38:48.720
all of those systems use compatible CPUs. So what's the installer for? The installer is to get

38:48.720 --> 38:54.800
around the incompatibilities that we added at the OS layer, which is this immensely complex thing

38:54.800 --> 39:01.760
that we mostly don't want, actually. And so we tend to think about operating systems as adding

39:01.760 --> 39:07.360
capabilities to a system, to the system of the hardware and the software, but they also remove

39:07.360 --> 39:14.400
capabilities like compatibility, right. And it's often very arbitrary and it doesn't get any worse

39:14.400 --> 39:19.760
than I think it does for us today when it comes to shading languages. Anyone who shifts 3D engines

39:19.760 --> 39:25.040
is going to know what I'm talking about. So it used to be that if you wanted to compile a program

39:25.040 --> 39:30.800
for many platforms, you could write it in some portable language like C or C++, and you might

39:30.800 --> 39:35.440
have to do some little if-defs to modify it for the different platforms, but you could do that,

39:35.440 --> 39:40.320
and it's mostly the same program. Today, you can't do that because we've decided if you're running a

39:40.320 --> 39:45.440
shader, it needs to be in a different programming language on every single platform, even if the

39:45.440 --> 39:53.200
hardware is the same, right. So if you have an x86 CPU and an NVIDIA GPU, then on one OS, you need

39:53.200 --> 39:57.680
to write your shader in metal shading language, and on another OS, you need to write it in HLSL,

39:58.320 --> 40:03.520
right. And they're different even though they're the same. And so you either have to rewrite

40:03.520 --> 40:09.280
everything n times where n is large, or you have to start using auto translation systems

40:10.000 --> 40:15.200
to rewrite your shaders, and those come with a lot of complexity and annoyance and bugs.

40:16.240 --> 40:22.240
And why, though, a shader is a simpler program than the old programs that we used to write,

40:22.240 --> 40:28.000
but why have we made it harder to build a simpler program? It doesn't make any sense. We don't care,

40:28.000 --> 40:33.440
right. So the list of things you can't just do. You can't just copy a program. You can't just statically

40:33.440 --> 40:37.760
link. You can't just draw pixels to the screen. Oh my God, the number of steps you have to do to

40:38.000 --> 40:44.480
draw a pixel today is crazy. You can't just write a shader. You can't just compile a program on

40:44.480 --> 40:49.280
Windows without a manifest and stuff. And on these new closed platforms, you can't just run an

40:49.280 --> 40:54.480
executable unless it's signed through this whole process, right. And all of these things, and many

40:54.480 --> 41:01.600
more that are not on this list, add friction, bugs, time, engineering time, and headspace

41:01.600 --> 41:08.000
that keeps us from thinking about interesting things to actually do. There are a couple of

41:08.000 --> 41:13.360
examples of this that illustrate this isn't going to end anytime soon, have entered my own life. So

41:13.360 --> 41:19.200
one of my side projects is a compiler, and to compile programs, you need to link them against

41:19.200 --> 41:24.960
libraries on people's machine, like, for example, the Windows SDK and the C runtime library.

41:27.040 --> 41:30.880
And now different versions of things install those in different places on the machine,

41:30.880 --> 41:33.680
and so you have to, like, be able to find them to do the linking.

41:35.280 --> 41:40.480
And rather than make this easy, today, Microsoft gives you a program called VSware,

41:40.480 --> 41:45.120
which you can find on GitHub. And the job of VSware is just to tell you where these libraries

41:45.120 --> 41:53.280
are installed. It is more than 7,000 lines of source code in 70 files. And they didn't even try

41:53.280 --> 41:57.920
to bundle it as a library. It's a standalone program. So what they're thinking now is,

41:57.920 --> 42:03.680
you can't just make a compiler that's a standalone program. It's obviously going to be a suite of

42:03.680 --> 42:07.680
applications. And once you have a suite of applications, what's one more? What's, like,

42:07.680 --> 42:12.000
a little VSware hanging out in there, right? They're not even thinking that this would be bad.

42:13.120 --> 42:18.000
It's crazy. I made my own version of this based on some other people's work and got it down to,

42:18.000 --> 42:24.000
like, 500 lines of code, which is still way too many to basically ask two questions that

42:24.000 --> 42:31.440
should be two lines of code, right? It's a multiplier of 250. And then, also in the programming

42:31.440 --> 42:37.120
language world, there's this thing called language server protocol that is pretty much the worst

42:37.120 --> 42:40.800
thing that I've ever heard of. And there are just proponents of this all over. They're building

42:40.800 --> 42:44.480
systems for this right now that are going to be living on your computer tomorrow or today.

42:45.360 --> 42:51.600
Already, maybe. And as far as I can tell, it's basically a more complicated, slower way to do

42:51.680 --> 42:57.200
libraries. So say you've got an editor for some programming language and you want to be able

42:57.200 --> 43:02.080
to do stuff that we've been doing for decades already, like, look up the declaration of an

43:02.080 --> 43:07.440
identifier by clicking on it or have tooltips that say, like, what type is this value, right?

43:08.080 --> 43:14.240
Well, they say the way you should do that is, you know, you have your editor and then it's a hassle

43:14.240 --> 43:19.440
to make plugins. This is the made up problem. It's a hassle to make plugins for all these different

43:19.440 --> 43:24.080
things. So in order to standardize, you're going to run a server on your machine, and then your

43:24.080 --> 43:28.640
editor talks over a socket to the server, and the server talks back and gives you the answer,

43:28.640 --> 43:37.440
right? Which has now turned your single program into a distributed system. But the flaw in this

43:37.440 --> 43:41.520
whole line of thinking that none of these people seems to actually, like, think about at all,

43:41.520 --> 43:46.000
is that there's nothing special about, like, looking up the location of an identifier in your

43:46.080 --> 43:54.640
that's just an API like we have all the time for everything. So the obvious next step, if you're

43:54.640 --> 44:00.720
saying that we should architect our APIs like this, is to do this for other tasks, right? So now your

44:00.720 --> 44:05.440
editor or whatever program is going to be talking to multiple of these things. And now if you ever

44:05.440 --> 44:11.280
want to author anything for this, you now have to author and debug components of a distributed

44:11.360 --> 44:17.520
system where state is not located in any central place, and we all know how fun that is, right?

44:17.520 --> 44:21.840
But of course, libraries are not that simple, right? Libraries use other libraries. So what

44:21.840 --> 44:26.400
happens at that point is you're running all these servers on your system, and who knows,

44:26.400 --> 44:30.960
some of them are going to, like, go down and, like, have to restart, and people are synchronizing

44:30.960 --> 44:36.160
with each other. No, this is a disaster, right? And people are actively building this right now.

44:36.240 --> 44:42.640
And meanwhile, while we're spending all this time over-complicating stuff that we used to be

44:42.640 --> 44:48.240
able to do in 1960, in the games industry, we're not even able to do the things that we've needed

44:48.240 --> 44:53.840
to do forever. So, like, today, games can't run consistently in full screen, as you see from

44:53.840 --> 44:58.480
the screenshot. And I don't wish to bag on that particular game, because we all put a lot of

44:58.480 --> 45:02.560
engineering work into trying to make our game run in full screen. It's kind of embarrassing, like,

45:02.560 --> 45:08.160
why, right? Also, it's actually impossible on a PC right now to render at a smooth frame rate.

45:08.160 --> 45:14.960
It is simply not possible no matter what you do. Alan Ladovac of Croteam has a talk at GDC and a

45:14.960 --> 45:19.600
paper about what you actually would need to do this. We just don't even have that capability,

45:21.120 --> 45:26.640
which is insane, right? And yet we're spending all this effort on other things. And so this

45:26.640 --> 45:32.160
complication that's introduced into all of our systems not only makes our lives difficult in

45:32.160 --> 45:37.120
the present when we're trying to build something, it accelerates the loss of knowledge over time,

45:37.120 --> 45:44.400
right? So, first of all, there's more to know when things are more complicated. And so if you

45:44.400 --> 45:50.320
talk about a job spread among many people, each individual person knows a smaller percent of

45:50.320 --> 45:54.560
what they need to do. They have a less global view, which makes it harder to do good work,

45:54.560 --> 45:59.680
right? And harder to transmit their knowledge onto people in the future. Another thing that

45:59.680 --> 46:04.320
happens is that deep knowledge becomes replaced by trivia. So, deep knowledge might be a general

46:04.320 --> 46:09.120
concept. Like, here's how cache coherency works, and that enables software to run fast on, like,

46:09.120 --> 46:15.440
different processors and stuff. And trivia is something like, well, this sprite in Unity doesn't

46:15.440 --> 46:19.520
display properly for some reason, but we know we can fix it if you open this panel and toggle

46:19.520 --> 46:24.080
this Boolean, and that fixes it for a while, but then some weeks later, for random reasons,

46:24.080 --> 46:27.840
the Boolean mysteriously untoggles. So, just make sure to check that before you ship,

46:27.840 --> 46:32.400
and it'll be fine, right? And the reason that's trivial is not only because it doesn't apply to

46:32.400 --> 46:37.440
anything else in the world, but it's also going to be outdated in six months when the next Unity

46:37.440 --> 46:42.480
comes out. And it's just offensive that we're spending our brain power on these things, okay?

46:42.480 --> 46:46.880
And the third thing that happens is good information is drowned by noise. So, if something is really

46:46.880 --> 46:52.400
hard to understand, the percentage of people who put the effort into understanding it is going to

46:52.400 --> 46:58.560
be small. And the harder it is, the smaller that percentage. And so, if you ask people or you learn

46:58.560 --> 47:04.800
at a school or you search on the web, your probability of getting a bad answer to the problem

47:04.800 --> 47:09.280
is much higher for more complicated things than it is for less complicated things. And so, the

47:09.280 --> 47:16.640
complication propagates and magnifies. So, let's get back to this collapse of civilization stuff,

47:16.640 --> 47:22.000
right? The more complexity we put in our system, the less likely we are to survive a disaster,

47:22.000 --> 47:25.600
right? Because we have to maintain all that complexity. We're acting right now

47:26.880 --> 47:31.920
like we believe that the upper limit of what we can handle is infinity amount of complexity,

47:31.920 --> 47:37.440
right? But I don't think that makes any sense. So, what's the upper limit? How would we decide

47:37.440 --> 47:44.400
how much complexity we can handle? And that's different from what people today actually can

47:44.400 --> 47:49.680
handle. So, if you have an engineer who can hold a whole system in his head that's really complicated

47:49.680 --> 47:54.800
and work on it, when that guy quits and needs to pass on his job to somebody new, he's not

47:54.800 --> 47:59.040
necessarily going to be able to communicate all that, right? So, the amount of complexity we can

47:59.040 --> 48:04.400
sustain over time is less than the amount of complexity that individuals can do today, right?

48:04.400 --> 48:08.400
So, why am I talking about this at a games conference, right? Like, everybody knows that

48:08.400 --> 48:15.600
games aren't serious and whatever, right? But video games at least used to be about maximizing

48:15.680 --> 48:20.240
what the machine could do and like really impressing the people playing the game. And

48:20.240 --> 48:24.880
maximizing the machine means you have to understand the machine very well and that correlates

48:24.880 --> 48:29.280
with robust software because if you understand the machine well, you're less likely to

48:30.560 --> 48:35.520
make the kind of bugs that come from misunderstanding. There's anti-correlations with robust software

48:35.520 --> 48:43.120
too. But anyway, now we're not really about that so much, especially talking about

48:43.120 --> 48:49.200
independent developers. People are shifting to Unity and Unreal and Mass, right? Not very

48:49.200 --> 48:54.400
many people write their own engines anymore. So, we have entire generations of programmers

48:54.400 --> 49:00.400
who have grown up learning to program by, you know, making little C-sharp snippets that just

49:00.400 --> 49:04.640
plug into other parts of Unity or something and they've never written something systemic and

49:04.640 --> 49:10.000
they've never written something low-level. Which on the one hand is fine. Like, I'm not

49:10.000 --> 49:14.480
saying we shouldn't do that because there's a degree to which it's smart. It reduces development

49:14.480 --> 49:24.480
time, right? It helps you ship your game sooner. But like I said before, there's a flip side.

49:24.480 --> 49:29.920
That flip side is giving up the capability of doing the other thing, giving up the knowledge

49:29.920 --> 49:35.920
of how to do the other thing. So, I don't think it's bad in isolation if a lot of people make

49:35.920 --> 49:41.600
games where they just put snippets into Unity, right? But if everybody does that, then nobody

49:41.600 --> 49:48.080
knows how to do anything but that. And then after a while, what's going to happen? Because

49:48.080 --> 49:53.040
we're assuming that we'll just be able to use these engines forever. But Unity and Unreal were

49:53.040 --> 49:58.800
created in an environment where there were lots of people at games companies making engines all

49:58.800 --> 50:05.360
the time, right? And that's where they hired people from. And when there's no longer a natural way

50:05.360 --> 50:09.840
to learn how to make engines because nobody does it, where are Unity and Unreal going to hire

50:09.840 --> 50:15.520
employees from to maintain those engines that everybody's using, right? And to the extent

50:15.520 --> 50:19.600
that they can hire people is the quality of people going to go down because they have less

50:19.600 --> 50:25.920
experience. It just takes a long time to ramp up, right? So then maybe at some point, well,

50:25.920 --> 50:30.800
certainly at some point, there's not enough people to make a new competing engine. But maybe even at

50:30.800 --> 50:35.200
some point, you can't really maintain the old ones and they just keep decaying over time.

50:35.200 --> 50:40.880
That can happen. And so the way I used to think about game developers is kind of like the foundation

50:40.880 --> 50:46.560
in the Asimov books where we kind of knew how to really program computers. And also some other

50:46.560 --> 50:51.520
kinds of programmers like embedded systems people and high performance computing people all sort of

50:51.520 --> 50:57.520
knew what was going on with computers. And after the rest of software just kind of decays and falls

50:57.520 --> 51:01.840
apart, we still have the knowledge and we could bring it back and give it to people. But I'm not

51:01.840 --> 51:08.320
really sure that that's going to happen now because I just don't know. I mean, I don't know if there

51:08.320 --> 51:14.080
will be enough of us doing low level work or even people doing high level work who understand what's

51:14.080 --> 51:20.000
happening at the low level while they do the high level, right? So maybe there needs to be a second

51:20.000 --> 51:27.920
foundation spoiler alert for anyone who hasn't read the book. So back in the Bronze Age, one of

51:27.920 --> 51:32.560
the reasons those civilizations disappeared is that the way things were set up was that reading and

51:32.560 --> 51:39.040
writing was only done by a small elite class who went to school for years and this was protected.

51:39.040 --> 51:42.640
The public couldn't know how to do this. They probably mostly didn't want to know.

51:44.480 --> 51:49.040
And because those skills weren't widespread, they were fragile. So when the society was disrupted,

51:49.040 --> 51:54.880
they weren't continued because not enough people could carry it forward. Today almost nobody knows

51:54.880 --> 52:01.120
what's happening on a CPU, right? That skill is not widespread, so it's fragile. And so do we think

52:01.120 --> 52:06.800
that this immensely complicated thing that we've built today is somehow more robust than what they

52:06.800 --> 52:12.080
had in the Bronze Age with just making bronze because that didn't survive. If that didn't survive,

52:12.080 --> 52:17.280
why do we think what we're doing now is going to survive, right? And we might have some similar

52:17.280 --> 52:22.240
stressors. We might have some climate change issues, right? Or we might have some new stuff.

52:22.240 --> 52:26.000
Like what happens if there are so many cyber attacks that countries just start cutting each

52:26.000 --> 52:31.040
other off the internet, right? Now, lots of people in lots of countries can't get to stack overflow

52:31.040 --> 52:35.600
to figure out how to copy and paste their code. So their code production is impacted, right?

52:35.600 --> 52:40.080
Or what happens if China just says, you know what, we're just going to keep all the CPUs now.

52:40.080 --> 52:46.000
We don't want to sell you any. What's going to happen, right? None of these things in isolation,

52:46.080 --> 52:51.680
I don't think will bring down civilization. But it can certainly hit the system with a big

52:51.680 --> 52:55.840
shock. And if the system is too complex, it may not survive that shock very well.

52:58.160 --> 53:04.560
And so I'm just trying to say, like Elon Musk was saying, the technology by itself will degrade.

53:04.560 --> 53:09.920
And we need to, as soon as we can, start working against this, right? At every level that we have

53:09.920 --> 53:14.880
access to. We have to simplify the hardware we're running on. We have to simplify the operating

53:14.880 --> 53:19.520
systems we use, the libraries we use, the application code we write, the communication

53:19.520 --> 53:24.160
systems we do this over, like the internet. We have to simplify how we compile, debug,

53:24.160 --> 53:27.760
and distribute software. And we have to simplify how people interface with software.

53:28.640 --> 53:33.360
And that sounds like really a lot of stuff to do. But the good news is that all of these things

53:33.360 --> 53:39.440
are so ridiculously complicated right now that it's very easy to find things to improve. Simplifying

53:39.520 --> 53:46.000
any of these systems only requires the will to do it. And at taste, you have to have a taste

53:46.560 --> 53:51.520
to recognize how complicated things are and how they would be better if they weren't so complicated.

53:52.560 --> 53:57.200
Okay, now a lot of people are probably like, okay, whatever, software is complicated, but I don't

53:57.200 --> 54:03.280
believe civilization is going to collapse or anything. And so, you know, maybe, maybe, but

54:03.600 --> 54:09.360
uh, I would say if you're a programmer, you should care about this anyway, because even

54:09.360 --> 54:15.680
just your own personal future, like programmers are not that happy today. We're often very grumpy.

54:15.680 --> 54:19.600
And the reason we're grumpy is because we're doing stupid things all the time instead of

54:19.600 --> 54:24.480
interesting things. And that's not going to get better if we keep doing things the way that we

54:24.480 --> 54:31.840
do them, right? So you personally will be happier if we change the way we do things. And if we do

54:31.920 --> 54:36.480
things the way they are now, maybe the future is deeply mediocre in the way that America's space

54:36.480 --> 54:44.240
future was going to be deeply mediocre. Now, even if you just want to survive as just an individual

54:44.240 --> 54:49.520
game developer, like you're thinking, look, I just want to get my game done. I want to ship it.

54:51.360 --> 54:57.760
I want it to succeed financially. Even if you just want to have a very limited scope of concern

54:57.760 --> 55:04.160
like that, removing complexity is still the right short term play. Even if it doesn't seem

55:04.160 --> 55:10.560
like it, I'm sure we all are very familiar with cases like, well, we're going to ship in five months

55:10.560 --> 55:14.880
and we're having a lot of problems with this particular system. It's really buggy, you know,

55:14.880 --> 55:20.480
it loses people's work all the time, whatever, but we just have to stick with it for five months

55:20.480 --> 55:25.600
and it'll be passed. It'll be history. And that's good because rewriting it would be a lot of

55:25.600 --> 55:29.840
effort. It might delay shipping. And so we're going to stick with it. We're going to stick out the

55:29.840 --> 55:34.480
five months. And that's always wrong because always what happens is it takes two years to ship

55:34.480 --> 55:39.280
instead of five months. And so the amount that you suffered from the system is way worse than it

55:39.280 --> 55:44.240
otherwise would have been. And maybe in fact that system was a large ingredient in why it took so

55:44.240 --> 55:54.400
long to ship. So simplify. And in simplifying your own code to solve your own local problems,

55:55.360 --> 56:00.960
you're also building institutional knowledge about how to simplify, which sounds really basic,

56:00.960 --> 56:07.760
but I would claim we don't even really have that anymore. Here's some references of videos you

56:07.760 --> 56:12.720
can watch. If you're interested in this kind of topic, Casey Meritori's video, the 30 million line

56:12.720 --> 56:18.640
problem, Samo Beria's video, civilizations, institutions, knowledge in the future. And then

56:18.640 --> 56:25.200
Eric Klein's video, which I showed snapshots of earlier, 1177 BC, the year civilization collapsed.

56:25.760 --> 56:28.640
And that's all I have to say for now. Thank you for your time.

56:34.080 --> 56:42.320
Wow. Very impressive. Don't you think that the collapse will happen when we reach the point

56:42.320 --> 56:48.160
of technological singularity? Because simplifying is, I think, some kind of way to prevent it.

56:49.360 --> 56:57.440
You know, once you start saying singularity, it's too hard. The point of singularity is you

56:57.440 --> 57:01.680
can't predict what's going to happen. Sure. Yeah. Maybe it'll be bad. Maybe good. Yeah. I don't

57:01.680 --> 57:07.440
believe in singularity the way a lot of people do. It doesn't seem realistic to me. But

57:11.360 --> 57:16.560
as you get close to that kind of situation, things move faster. And if things are moving fast,

57:16.640 --> 57:22.720
they break easily. Okay. Yeah. It's what about foundation, by the way, right? Yeah. Well,

57:22.720 --> 57:26.720
and one of the objections, because I'm always criticizing my own, like, what is the counterpoint

57:26.720 --> 57:31.840
to this? And what if we just let software get really complicated and then just make an AI that

57:31.840 --> 57:36.640
understands it? And that's fine. And it's like, okay, maybe, but you really want human beings to

57:36.640 --> 57:44.240
not be able to understand software. It doesn't seem good. Okay, we have about five, 10 minutes

57:44.240 --> 57:50.000
for questions. So if you have one, you can ask. Yeah, come here and ask.

57:54.080 --> 57:59.840
Thank you very much for this beautiful speech and beautiful mind. Welcome to Russia, by the way.

57:59.840 --> 58:05.360
Thank you. And I've been doing games in Game Maker for 17 years, and we spent one year on

58:05.360 --> 58:10.560
doing 3D in Game Maker. And I was asking myself a question why we did this. And actually now I

58:10.560 --> 58:16.400
know the answer. And I have another thought about it. Friedrich Nietzsche, when he was already an

58:16.400 --> 58:23.520
old man, he started to lose his sight and he couldn't write anymore, couldn't think actually,

58:23.520 --> 58:28.880
because he would think while writing. And so he started using Hansen's writing ball. And this

58:28.880 --> 58:35.040
was the first type writer to use. But his style changed. And when I switched from Game Maker to

58:35.120 --> 58:45.360
Unreal, as a game designer, saw that my style, my way of thinking changed. Don't you think that

58:45.360 --> 58:51.520
tools, they somehow force us to think in a certain type of way, and for you making a new language

58:51.520 --> 59:00.320
as somehow to break through this and start thinking wider, broader? I think I would agree with that.

59:00.320 --> 59:06.720
And I would also say, though, because we think with tools often, unnecessary complications or

59:06.720 --> 59:11.360
bugs in the tools interfere with the thought process. Like you're in flow, you're doing stuff,

59:12.160 --> 59:16.560
and then something bad happens, and you're like, now I have to go fix this thing, and you can't

59:16.560 --> 59:22.640
do what you were doing. So I definitely think that's important. When I'm making my new language,

59:24.560 --> 59:29.920
I'm trying as best I can to get rid of all these complications that don't make sense.

59:29.920 --> 59:34.320
But there's so many of them. And some of them are baked into our assumptions, because I learned

59:34.320 --> 59:40.320
a program by using these complicated systems. So what I see as simpler may be very far from

59:40.320 --> 59:44.400
the actual simplicity that we could achieve, because my thinking has been trained on those tools.

59:45.280 --> 59:49.040
So we'll see. We'll see how it comes out. Thank you. Thank you.

59:49.200 --> 01:00:00.320
Hi. So let's say I'm an indie developer, and I'm sold on your ideas. I don't like

01:00:00.320 --> 01:00:08.160
Unity either. And I want to put pixels on screen with great ease, but I'm not yet ready to write

01:00:08.160 --> 01:00:12.560
my own engine as you do. Well, you would have to write your own operating system to put pixels on

01:00:12.560 --> 01:00:25.200
the screen. So what is the set of currently existing tools I can use? Well, I don't know,

01:00:25.200 --> 01:00:30.640
because part of the problem is everything is this way. So really what needs to happen is not

01:00:30.640 --> 01:00:39.600
about specific tools that you use. It's about developing the aesthetics for things that are

01:00:39.600 --> 01:00:46.000
not a giant horrible mess. And whatever tool looks like that to you, just use that instead of

01:00:46.000 --> 01:00:50.720
whatever you're using, and then maybe we could migrate everybody slowly over time. Yeah, the

01:00:50.720 --> 01:00:58.800
problem is when I look for ways to get to the lower level things I find is like Visual Studio and

01:00:58.800 --> 01:01:07.040
C++, and it doesn't help very much. It's super complex, and it breaks every time, and whatever.

01:01:08.000 --> 01:01:09.120
Yeah, I don't know, man.

01:01:14.160 --> 01:01:21.440
Thank you very much for your talk. My question is, in 1968, 30 years after the concept of the

01:01:21.440 --> 01:01:31.520
computer was invented, Edgar Dijkstra said that where the mainframes were having two megabytes

01:01:31.520 --> 01:01:39.040
of memory, even then, Edgar Dijkstra said that the programming is just too hard by its concept

01:01:39.040 --> 01:01:46.880
to be done by human beings. Are you sure that simplification will help to any extent?

01:01:46.880 --> 01:01:52.720
Well, it'll help, whether it makes them completely understandable by us. I don't know. I mean,

01:01:52.720 --> 01:01:56.400
I think you could, I haven't read the Dijkstra piece that you're talking about.

01:01:56.480 --> 01:02:03.040
It's called Humble Programmer. Okay. I think you could rate it by what problem are you trying

01:02:03.040 --> 01:02:08.720
to solve, right, and how complicated, like there's an inherent complexity to a problem,

01:02:08.720 --> 01:02:13.200
first of all, and so there may be problems that are so complicated it may be hard to understand

01:02:13.200 --> 01:02:17.600
what the software looks like to solve that, but then there's also added complication because

01:02:17.600 --> 01:02:23.600
we're solving this with existing systems, and those systems already prevent us from doing certain

01:02:23.680 --> 01:02:29.920
things. And so there's a difference between ideal complexity and actual complexity, and I just

01:02:29.920 --> 01:02:35.040
want to get closer to ideal complexity. Whether that's good enough, I don't know.

