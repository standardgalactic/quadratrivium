start	end	text
0	6000	Hey, how's it going? This is Helbent and welcome to tutorial number 4 from my AutoHotKey tutorial series.
6000	11000	In this one, we're going to be looking at functions and how we use them.
11000	15000	First, we'll start off by saying that what a function is.
15000	22000	So basically, a function is going to be a mini program within our program.
22000	30000	The way this becomes useful is, let's say we have a block of 10 commands.
30000	40000	And we're going to be using these same 10 commands or the same bit of code over and over again throughout the course of our program.
40000	47000	Now, we could write in our program those 10 lines every time we need it.
47000	51000	And if it's 100 times, we can write it into our program 100 times.
51000	58000	But what we're going to end up with is a script or a program that's going to be 10 miles long.
58000	63000	And it's going to be impossible for us to actually read our program.
63000	70000	So instead, what we can do is we can create a function that's going to contain those 10 bits of code.
70000	77000	And every time we actually need to use those, instead of writing the 10 lines out,
77000	84000	we can just call to that function and have it execute and then go back into our main program again.
84000	89000	So that's the main use for our functions.
89000	94000	Another way that functions are useful is with conserving memory.
94000	105000	So your computer, even if it has terabytes of RAM, it is a finite amount.
105000	112000	And eventually, there'll come a point where you don't have any memory available anymore.
112000	118000	So by using functions, what we can do is we'll end up using local variables,
118000	123000	which take up a address of memory or take up some of the memory of your computer.
123000	127000	We can use local variables that once they're done being used,
127000	133000	it'll actually free up that memory so something else can use it.
133000	139000	So let's say if we have one variable that we know that we have to have.
139000	145000	We have to use this variable throughout the whole run of our program
145000	151000	or a series of variables that we know that we have to use throughout the running of our program.
151000	157000	They're automatically, we know that they need, permanently, they need that memory.
157000	164000	But we might need to manipulate those variables in ways that the manipulations that we do to it,
164000	167000	so let's say we can multiply it with other things.
167000	169000	So let's say pi, for example.
169000	175000	So in a function, we can assign a variable, a local variable, the value of pi,
175000	182000	pass in our variable to that, multiply our variable with pi,
182000	192000	and then leave the function and the value, the space and memory that the variable that's holding the value of pi,
192000	199000	it can be freed up for something else to take its place until it's time for us to use that pi variable again.
199000	204000	It'll get re-initialized, it'll take up that memory again until it's done being used,
204000	207000	and then it'll free it up again, right?
207000	213000	So that's one of the main reasons also why we need functions.
213000	216000	So let's jump into it.
216000	221000	In order to do this tutorial, I suggest you have a fair knowledge of variables,
221000	225000	or at least, you know, some working knowledge of variables.
225000	228000	So the first thing we're going to do is we're going to create a function.
228000	234000	Now creating a function is very much like creating a label or creating a variable.
234000	240000	So when we name it, we want it to be something that makes sense and can't have any spaces in its name.
240000	246000	So we can use tons and tons of words in its name, and in fact, that's what I'm going to do.
246000	255000	I'm just going to call my function myfirstfunction.
255000	261000	Now this is a case where it's not a very good name for a function.
261000	266000	For our purposes, it works okay, but for the most part, you don't want to name it something like this,
266000	271000	unless this really is, it makes sense for some reason.
271000	273000	So you want to name it something that makes sense.
273000	276000	So that way, when you're going through your program, or when you have to make calls to it,
276000	282000	and I'll show you that in a minute, how to call it up, you don't have to go searching for the name.
282000	288000	So if you have a name that really makes sense and that you're able to remember it every single time you have to make a call to it,
288000	295000	you don't have to go digging around looking it up because making calls to functions, it does get a little bit repetitive
295000	299000	and it gets a little bit tricky if you don't know what the name of it is.
299000	305000	So you'll have to go a hundred lines down in your code, find out what the name of the function is, and then call it up.
305000	311000	But like I said, for our purposes, this is fine, and when I'm doing these tutorials,
311000	316000	I don't want to spend the time trying to come up, think about these kind of things.
316000	322000	So it's kind of a case of do as I'm saying that what you should do rather than do what I'm doing.
322000	325000	So do what I say, not what I do.
325000	329000	Okay, so now that we have a name of our function, we have an open and close parentheses,
329000	336000	and then we're going to drop down and create an open and close French brace.
336000	342000	Now, so this is our function and anything that we want it to do, we'll put inside of here.
342000	348000	And it can be literally hundreds of lines of code, it could be thousands of lines of code, or it could be two lines of code,
348000	352000	it could be one line of code, it could be no code at all.
352000	359000	Now, because it's easy, the easiest way for me to show you what is going on with these kind of programs,
359000	362000	all I'm going to do is I'm going to use a message box.
362000	368000	So what those are, when you're creating your functions, obviously a message box isn't going to do.
368000	373000	But for the teaching of this, it's easiest for me to show you with a message box,
373000	380000	so you can actually see where in our program it, what's going on in our program.
380000	390000	So I'm just going to create a message box, and it's going to say,
391000	398000	Okay, so we have our function, and if we were to actually run our program right now, it's not actually going to do anything.
398000	406000	And order for this function to actually work, in our main program, or our main script, what we need to actually do is call it.
406000	410000	And the way we call it is we just use its name with the open and close parentheses,
410000	413000	and there's more to it, but we'll get into that in a few minutes.
413000	427000	But just basically we're going to use its name, and open and close, and then that's it.
427000	435000	So let's say we have a whole bunch of code up here, we have a bunch of lines that are doing different things,
435000	442000	and then we need our function, we call our function, and then below that we can go back to doing our normal program.
442000	448000	Now how this works is as soon as it encounters this, it's going to jump inside of the properties,
448000	453000	or inside of our function, and start executing the lines of code that is in it.
453000	459000	Once it gets to a return, or an exit, or this close print, French brace,
459000	466000	then it's going to go back into our main program, and continue on, until it encounters an exit or a return.
467000	473000	Okay, so here we go, we have our first function, we've created it, we've made a call to it,
473000	476000	we save our program, and we run it.
476000	481000	And there we go, we have executed our first function.
481000	490000	Now, let's look at, I'm going to expand on this just a little bit, I'm going to create a message box here.
491000	494000	Message box.
503000	510000	Okay, so as soon as our script starts, it's going to pop up a message box that says that we're in the main program.
510000	514000	Then I'm going to pass it to the function, it's going to execute that,
514000	519000	and then I'm going to create another message box that says...
535000	543000	And, you know, I'm going to do one more function, so to save time, I'm just going to copy this, paste it in,
543000	554000	and I'm going to alter a few things.
561000	568000	And in this case, what I'm going to do is I'm actually going to, rather than putting my second function,
568000	574000	rather than calling it up here, rather than doing that, what I'm actually going to do is show you
574000	579000	that you can make calls to other functions within functions.
579000	585000	So, once it goes into the first function, it's going to pop up the message box,
585000	589000	and then it's going to go make a call to the second function.
589000	592000	It's going to go and execute the properties of the second function,
592000	596000	and then finally it's going to go back into our main program.
596000	600000	Alright, I'm going to go ahead and save it.
600000	605000	Okay, so here we go, it says it is in the main program.
605000	611000	Next, it's going to jump into our first function and give us our message box.
611000	618000	So, it's now in the first function, and now it's in the second function,
618000	621000	and now it's back in the main program.
621000	627000	So, as you can see, you can make calls to other functions within functions.
627000	632000	Okay, I hope that's clear, and we will move on.
632000	635000	So, I'm just going to comment out.
635000	645000	Actually, you know what, I haven't been saving my tutorial, so I'm going to get rid of this.
645000	649000	Okay, next what we have is passing variables into a function.
649000	653000	So, like I said, one of the main reasons why you're going to be using a function
653000	656000	is to actually do operations in it on variables.
656000	659000	So, in this case, we're going to create a variable,
659000	663000	and like I said, I'm not very good at naming things while I'm doing these tutorials,
663000	668000	so I just usually pick the first thing that pops to my head and I run with it,
668000	672000	rather than sitting here for a minute or two trying to think of something.
672000	675000	Because I end up, instead of thinking of what I should be thinking about,
675000	679000	I think about other things.
679000	683000	Now, I need to create a function,
683000	694000	and in this case, I'm just going to call it function one, just to save a little bit of time.
694000	699000	Okay, now, when I had gone over the variable tutorial,
699000	708000	I had told you about scope and how things are local or global.
708000	713000	This is a case where we're going to have two local variables here, basically,
713000	721000	and so, if I was to use this name inside of this function,
721000	727000	it would actually be two different variables, even though they share the same name.
727000	731000	What they're doing is they're pointing to a place in the memory.
731000	735000	So, let's say that this computer screen is my computer's memory.
735000	743000	This variable name might point to this spot up here for those, okay, actually here.
743000	746000	So, it might point to this location in my memory,
746000	753000	and say that the value that's stored there is hell-bent.
753000	758000	So, at this location in memory, it says that name points to this location,
758000	760000	and it says it equals hell-bent.
760000	764000	If I was to use name in here, though, it might point to another location
764000	767000	and say that it means something else.
767000	773000	So, even though I'm using the same variable, I can use name in here and here,
773000	777000	they point to different places that hold different values.
777000	782000	Even if they held the same value, even if this location held hell-bent as well,
782000	785000	they're still pointing to two different locations,
785000	791000	because even though they have the same name, they're not the same variable.
791000	794000	Now, usually it's a good idea not to name them the same thing,
794000	797000	but you could if you needed to.
797000	801000	So, the first thing we're going to do is we're going to say that this function
801000	804000	requires a variable to be passed into it,
804000	807000	and we're just going to call that variable x.
807000	811000	And then what we're going to do inside of our function
811000	813000	is we're just going to pop up a message box,
813000	820000	because, once again, it's the easiest way for you to see what's going on.
820000	823000	But, like I said before, it could be hundreds of lines of code,
823000	825000	it could have passes to other functions,
825000	828000	and those functions could pass to other functions,
828000	832000	and so on and so forth.
832000	837000	Okay, next, what we need is we need to have a call to that function.
837000	839000	So,
844000	847000	and then we're going to pass the value,
847000	853000	we're going to pass our variable name into it.
853000	859000	Okay, let me see.
859000	861000	Okay, I think we're good.
861000	865000	So, here's how we pass a value into a function.
865000	868000	When we create our function, we say that we were expecting
868000	870000	a variable to be passed into it,
870000	872000	and then when we make our call to it,
872000	876000	we place the variable that we are going to be passing to it.
881000	884000	Okay, so here we go.
884000	886000	We've displayed the value of x,
886000	890000	and to go back a bit to show you what I was talking about,
891000	897000	let's assume that we weren't passing any variables into it.
897000	902000	If I was to go and try to print out the value of name,
902000	905000	because this function,
905000	911000	everything in this function can't actually see the contents of that variable,
911000	914000	this is not going to have any value,
914000	918000	because this is actually a different variable that doesn't have any value,
918000	921000	and we can demonstrate that right there.
921000	925000	So, as we can see, name has no value,
925000	927000	because it doesn't know what that is.
927000	930000	These are two different variables.
930000	932000	Okay, so like I said,
932000	940000	that is how we pass a value into a function.
940000	944000	So, okay, and we can pass as many values as we want.
944000	946000	So, we have name right now,
946000	951000	and what I will do quickly is I'll create a couple of new variables.
963000	968000	Okay, and all we have to do is put a comma,
968000	971000	and then the next variable we're going to be passing.
975000	978000	Until we get to our last variable.
980000	982000	And likewise, we have to do with this.
982000	984000	So, let's do...
990000	993000	Okay, so it doesn't matter what these names are,
993000	996000	because they're not really related to that,
996000	998000	and we'll just pop up.
999000	1004000	There are values.
1004000	1012000	So, X, Y, Z, and S.
1012000	1017000	Okay, so this is how we pass multiple values into a function,
1017000	1020000	and there we go.
1020000	1023000	A 1, 2, 3.
1023000	1025000	Okay.
1026000	1028000	Easy stuff, moving on.
1036000	1040000	Next is returning a value from a function.
1044000	1046000	Yeah, I got enough time for this.
1046000	1048000	I'm right at that border point
1048000	1050000	where this video is going to get a little bit long,
1050000	1053000	but if I put this off to the next video,
1053000	1056000	then the next video is going to be really long.
1056000	1058000	Okay, returning a value.
1058000	1061000	So, it's basically the same way that we do the passing.
1061000	1064000	So, let's just create some variables.
1073000	1076000	And then we'll create our function,
1076000	1078000	and we're going to be passing two variables to it,
1078000	1080000	so we know that.
1084000	1092000	And we will use X and Y,
1095000	1097000	and we'll do a mathematical operation.
1097000	1101000	But first, let's look at how we get our return.
1101000	1105000	So, now that we know that we want something back,
1105000	1108000	what we're going to do is we're going to say
1108000	1112000	that the variable that we want to store,
1112000	1113000	the return value.
1113000	1116000	So, we're going to do a mathematical operation in here,
1116000	1117000	and we're going to say up here,
1117000	1120000	we're going to say that the value that we get from that
1120000	1122000	is going to get stored into a variable.
1122000	1125000	So, just like how we do this here,
1125000	1127000	or we declare our variables like that,
1127000	1132000	we're going to declare that C equals
1132000	1136000	whatever we get back the return value from our function.
1138000	1141000	And we're going to pass it A and B.
1143000	1147000	So, C is going to equal whatever we get returned back
1147000	1150000	from when we pass these values into our function.
1150000	1152000	Now, what we're going to do is we're going to say
1152000	1155000	in our function, now we can do a lot of different things in here.
1155000	1159000	It doesn't have to be only what we're going to be doing right now.
1159000	1162000	There's different ways that we could do it.
1162000	1165000	We could have our math done in a whole different way,
1165000	1167000	a whole different way.
1167000	1171000	But because we only have one line that we need in here,
1171000	1173000	that's all we're going to do.
1173000	1176000	But in your program, it might not be so easy
1176000	1181000	as just returning an X plus a Y, or so on and so forth.
1183000	1185000	But we're going right to the punch.
1185000	1189000	This is what we were expecting it to do.
1189000	1192000	So, we're going to say return, and then what do we want?
1192000	1196000	We want X, do we want X times Y?
1197000	1200000	Do we want X minus Y?
1201000	1204000	Do we want X plus Y?
1204000	1210000	Do we want X plus Y times Pi to the square root of whatever?
1211000	1214000	Okay, so there's multiple things that we can do in here.
1214000	1216000	This is just a very simple example,
1216000	1221000	and you can play around with this to see what you can do with it.
1221000	1223000	Okay, so here we go.
1223000	1225000	We've passed, we've made the call to our function,
1225000	1227000	and we're going to get a return value,
1227000	1231000	and we're going to assign that to the variable C.
1231000	1235000	We'll run our, oh, and I guess we need a message box
1235000	1237000	to actually display that.
1240000	1243000	Message box, and we're just going to print out our C.
1248000	1253000	Okay, so there we go.
1254000	1257000	We've passed one and two into our function,
1257000	1260000	and then we've added them together, and we output three.
1260000	1264000	Likewise, we can change that to multiply,
1264000	1269000	and, oh, I guess we're going to get two this time.
1273000	1277000	We can also do, like I said, we can also do other things.
1278000	1285000	Let me get some bed mass in here.
1297000	1302000	Okay, and there we go.
1307000	1310000	Okay, so that's it for this part.
1310000	1312000	Come back and we'll finish.
1312000	1314000	We'll go to passing by reference,
1314000	1319000	and test how you can use this for testing,
1319000	1321000	and a bunch of other little tricks
1321000	1324000	that'll make your programming experience much easier,
1324000	1326000	much less troublesome.
