1
00:00:00,000 --> 00:00:06,000
Hey, how's it going? This is Helbent and welcome to tutorial number 4 from my AutoHotKey tutorial series.

2
00:00:06,000 --> 00:00:11,000
In this one, we're going to be looking at functions and how we use them.

3
00:00:11,000 --> 00:00:15,000
First, we'll start off by saying that what a function is.

4
00:00:15,000 --> 00:00:22,000
So basically, a function is going to be a mini program within our program.

5
00:00:22,000 --> 00:00:30,000
The way this becomes useful is, let's say we have a block of 10 commands.

6
00:00:30,000 --> 00:00:40,000
And we're going to be using these same 10 commands or the same bit of code over and over again throughout the course of our program.

7
00:00:40,000 --> 00:00:47,000
Now, we could write in our program those 10 lines every time we need it.

8
00:00:47,000 --> 00:00:51,000
And if it's 100 times, we can write it into our program 100 times.

9
00:00:51,000 --> 00:00:58,000
But what we're going to end up with is a script or a program that's going to be 10 miles long.

10
00:00:58,000 --> 00:01:03,000
And it's going to be impossible for us to actually read our program.

11
00:01:03,000 --> 00:01:10,000
So instead, what we can do is we can create a function that's going to contain those 10 bits of code.

12
00:01:10,000 --> 00:01:17,000
And every time we actually need to use those, instead of writing the 10 lines out,

13
00:01:17,000 --> 00:01:24,000
we can just call to that function and have it execute and then go back into our main program again.

14
00:01:24,000 --> 00:01:29,000
So that's the main use for our functions.

15
00:01:29,000 --> 00:01:34,000
Another way that functions are useful is with conserving memory.

16
00:01:34,000 --> 00:01:45,000
So your computer, even if it has terabytes of RAM, it is a finite amount.

17
00:01:45,000 --> 00:01:52,000
And eventually, there'll come a point where you don't have any memory available anymore.

18
00:01:52,000 --> 00:01:58,000
So by using functions, what we can do is we'll end up using local variables,

19
00:01:58,000 --> 00:02:03,000
which take up a address of memory or take up some of the memory of your computer.

20
00:02:03,000 --> 00:02:07,000
We can use local variables that once they're done being used,

21
00:02:07,000 --> 00:02:13,000
it'll actually free up that memory so something else can use it.

22
00:02:13,000 --> 00:02:19,000
So let's say if we have one variable that we know that we have to have.

23
00:02:19,000 --> 00:02:25,000
We have to use this variable throughout the whole run of our program

24
00:02:25,000 --> 00:02:31,000
or a series of variables that we know that we have to use throughout the running of our program.

25
00:02:31,000 --> 00:02:37,000
They're automatically, we know that they need, permanently, they need that memory.

26
00:02:37,000 --> 00:02:44,000
But we might need to manipulate those variables in ways that the manipulations that we do to it,

27
00:02:44,000 --> 00:02:47,000
so let's say we can multiply it with other things.

28
00:02:47,000 --> 00:02:49,000
So let's say pi, for example.

29
00:02:49,000 --> 00:02:55,000
So in a function, we can assign a variable, a local variable, the value of pi,

30
00:02:55,000 --> 00:03:02,000
pass in our variable to that, multiply our variable with pi,

31
00:03:02,000 --> 00:03:12,000
and then leave the function and the value, the space and memory that the variable that's holding the value of pi,

32
00:03:12,000 --> 00:03:19,000
it can be freed up for something else to take its place until it's time for us to use that pi variable again.

33
00:03:19,000 --> 00:03:24,000
It'll get re-initialized, it'll take up that memory again until it's done being used,

34
00:03:24,000 --> 00:03:27,000
and then it'll free it up again, right?

35
00:03:27,000 --> 00:03:33,000
So that's one of the main reasons also why we need functions.

36
00:03:33,000 --> 00:03:36,000
So let's jump into it.

37
00:03:36,000 --> 00:03:41,000
In order to do this tutorial, I suggest you have a fair knowledge of variables,

38
00:03:41,000 --> 00:03:45,000
or at least, you know, some working knowledge of variables.

39
00:03:45,000 --> 00:03:48,000
So the first thing we're going to do is we're going to create a function.

40
00:03:48,000 --> 00:03:54,000
Now creating a function is very much like creating a label or creating a variable.

41
00:03:54,000 --> 00:04:00,000
So when we name it, we want it to be something that makes sense and can't have any spaces in its name.

42
00:04:00,000 --> 00:04:06,000
So we can use tons and tons of words in its name, and in fact, that's what I'm going to do.

43
00:04:06,000 --> 00:04:15,000
I'm just going to call my function myfirstfunction.

44
00:04:15,000 --> 00:04:21,000
Now this is a case where it's not a very good name for a function.

45
00:04:21,000 --> 00:04:26,000
For our purposes, it works okay, but for the most part, you don't want to name it something like this,

46
00:04:26,000 --> 00:04:31,000
unless this really is, it makes sense for some reason.

47
00:04:31,000 --> 00:04:33,000
So you want to name it something that makes sense.

48
00:04:33,000 --> 00:04:36,000
So that way, when you're going through your program, or when you have to make calls to it,

49
00:04:36,000 --> 00:04:42,000
and I'll show you that in a minute, how to call it up, you don't have to go searching for the name.

50
00:04:42,000 --> 00:04:48,000
So if you have a name that really makes sense and that you're able to remember it every single time you have to make a call to it,

51
00:04:48,000 --> 00:04:55,000
you don't have to go digging around looking it up because making calls to functions, it does get a little bit repetitive

52
00:04:55,000 --> 00:04:59,000
and it gets a little bit tricky if you don't know what the name of it is.

53
00:04:59,000 --> 00:05:05,000
So you'll have to go a hundred lines down in your code, find out what the name of the function is, and then call it up.

54
00:05:05,000 --> 00:05:11,000
But like I said, for our purposes, this is fine, and when I'm doing these tutorials,

55
00:05:11,000 --> 00:05:16,000
I don't want to spend the time trying to come up, think about these kind of things.

56
00:05:16,000 --> 00:05:22,000
So it's kind of a case of do as I'm saying that what you should do rather than do what I'm doing.

57
00:05:22,000 --> 00:05:25,000
So do what I say, not what I do.

58
00:05:25,000 --> 00:05:29,000
Okay, so now that we have a name of our function, we have an open and close parentheses,

59
00:05:29,000 --> 00:05:36,000
and then we're going to drop down and create an open and close French brace.

60
00:05:36,000 --> 00:05:42,000
Now, so this is our function and anything that we want it to do, we'll put inside of here.

61
00:05:42,000 --> 00:05:48,000
And it can be literally hundreds of lines of code, it could be thousands of lines of code, or it could be two lines of code,

62
00:05:48,000 --> 00:05:52,000
it could be one line of code, it could be no code at all.

63
00:05:52,000 --> 00:05:59,000
Now, because it's easy, the easiest way for me to show you what is going on with these kind of programs,

64
00:05:59,000 --> 00:06:02,000
all I'm going to do is I'm going to use a message box.

65
00:06:02,000 --> 00:06:08,000
So what those are, when you're creating your functions, obviously a message box isn't going to do.

66
00:06:08,000 --> 00:06:13,000
But for the teaching of this, it's easiest for me to show you with a message box,

67
00:06:13,000 --> 00:06:20,000
so you can actually see where in our program it, what's going on in our program.

68
00:06:20,000 --> 00:06:30,000
So I'm just going to create a message box, and it's going to say,

69
00:06:31,000 --> 00:06:38,000
Okay, so we have our function, and if we were to actually run our program right now, it's not actually going to do anything.

70
00:06:38,000 --> 00:06:46,000
And order for this function to actually work, in our main program, or our main script, what we need to actually do is call it.

71
00:06:46,000 --> 00:06:50,000
And the way we call it is we just use its name with the open and close parentheses,

72
00:06:50,000 --> 00:06:53,000
and there's more to it, but we'll get into that in a few minutes.

73
00:06:53,000 --> 00:07:07,000
But just basically we're going to use its name, and open and close, and then that's it.

74
00:07:07,000 --> 00:07:15,000
So let's say we have a whole bunch of code up here, we have a bunch of lines that are doing different things,

75
00:07:15,000 --> 00:07:22,000
and then we need our function, we call our function, and then below that we can go back to doing our normal program.

76
00:07:22,000 --> 00:07:28,000
Now how this works is as soon as it encounters this, it's going to jump inside of the properties,

77
00:07:28,000 --> 00:07:33,000
or inside of our function, and start executing the lines of code that is in it.

78
00:07:33,000 --> 00:07:39,000
Once it gets to a return, or an exit, or this close print, French brace,

79
00:07:39,000 --> 00:07:46,000
then it's going to go back into our main program, and continue on, until it encounters an exit or a return.

80
00:07:47,000 --> 00:07:53,000
Okay, so here we go, we have our first function, we've created it, we've made a call to it,

81
00:07:53,000 --> 00:07:56,000
we save our program, and we run it.

82
00:07:56,000 --> 00:08:01,000
And there we go, we have executed our first function.

83
00:08:01,000 --> 00:08:10,000
Now, let's look at, I'm going to expand on this just a little bit, I'm going to create a message box here.

84
00:08:11,000 --> 00:08:14,000
Message box.

85
00:08:23,000 --> 00:08:30,000
Okay, so as soon as our script starts, it's going to pop up a message box that says that we're in the main program.

86
00:08:30,000 --> 00:08:34,000
Then I'm going to pass it to the function, it's going to execute that,

87
00:08:34,000 --> 00:08:39,000
and then I'm going to create another message box that says...

88
00:08:55,000 --> 00:09:03,000
And, you know, I'm going to do one more function, so to save time, I'm just going to copy this, paste it in,

89
00:09:03,000 --> 00:09:14,000
and I'm going to alter a few things.

90
00:09:21,000 --> 00:09:28,000
And in this case, what I'm going to do is I'm actually going to, rather than putting my second function,

91
00:09:28,000 --> 00:09:34,000
rather than calling it up here, rather than doing that, what I'm actually going to do is show you

92
00:09:34,000 --> 00:09:39,000
that you can make calls to other functions within functions.

93
00:09:39,000 --> 00:09:45,000
So, once it goes into the first function, it's going to pop up the message box,

94
00:09:45,000 --> 00:09:49,000
and then it's going to go make a call to the second function.

95
00:09:49,000 --> 00:09:52,000
It's going to go and execute the properties of the second function,

96
00:09:52,000 --> 00:09:56,000
and then finally it's going to go back into our main program.

97
00:09:56,000 --> 00:10:00,000
Alright, I'm going to go ahead and save it.

98
00:10:00,000 --> 00:10:05,000
Okay, so here we go, it says it is in the main program.

99
00:10:05,000 --> 00:10:11,000
Next, it's going to jump into our first function and give us our message box.

100
00:10:11,000 --> 00:10:18,000
So, it's now in the first function, and now it's in the second function,

101
00:10:18,000 --> 00:10:21,000
and now it's back in the main program.

102
00:10:21,000 --> 00:10:27,000
So, as you can see, you can make calls to other functions within functions.

103
00:10:27,000 --> 00:10:32,000
Okay, I hope that's clear, and we will move on.

104
00:10:32,000 --> 00:10:35,000
So, I'm just going to comment out.

105
00:10:35,000 --> 00:10:45,000
Actually, you know what, I haven't been saving my tutorial, so I'm going to get rid of this.

106
00:10:45,000 --> 00:10:49,000
Okay, next what we have is passing variables into a function.

107
00:10:49,000 --> 00:10:53,000
So, like I said, one of the main reasons why you're going to be using a function

108
00:10:53,000 --> 00:10:56,000
is to actually do operations in it on variables.

109
00:10:56,000 --> 00:10:59,000
So, in this case, we're going to create a variable,

110
00:10:59,000 --> 00:11:03,000
and like I said, I'm not very good at naming things while I'm doing these tutorials,

111
00:11:03,000 --> 00:11:08,000
so I just usually pick the first thing that pops to my head and I run with it,

112
00:11:08,000 --> 00:11:12,000
rather than sitting here for a minute or two trying to think of something.

113
00:11:12,000 --> 00:11:15,000
Because I end up, instead of thinking of what I should be thinking about,

114
00:11:15,000 --> 00:11:19,000
I think about other things.

115
00:11:19,000 --> 00:11:23,000
Now, I need to create a function,

116
00:11:23,000 --> 00:11:34,000
and in this case, I'm just going to call it function one, just to save a little bit of time.

117
00:11:34,000 --> 00:11:39,000
Okay, now, when I had gone over the variable tutorial,

118
00:11:39,000 --> 00:11:48,000
I had told you about scope and how things are local or global.

119
00:11:48,000 --> 00:11:53,000
This is a case where we're going to have two local variables here, basically,

120
00:11:53,000 --> 00:12:01,000
and so, if I was to use this name inside of this function,

121
00:12:01,000 --> 00:12:07,000
it would actually be two different variables, even though they share the same name.

122
00:12:07,000 --> 00:12:11,000
What they're doing is they're pointing to a place in the memory.

123
00:12:11,000 --> 00:12:15,000
So, let's say that this computer screen is my computer's memory.

124
00:12:15,000 --> 00:12:23,000
This variable name might point to this spot up here for those, okay, actually here.

125
00:12:23,000 --> 00:12:26,000
So, it might point to this location in my memory,

126
00:12:26,000 --> 00:12:33,000
and say that the value that's stored there is hell-bent.

127
00:12:33,000 --> 00:12:38,000
So, at this location in memory, it says that name points to this location,

128
00:12:38,000 --> 00:12:40,000
and it says it equals hell-bent.

129
00:12:40,000 --> 00:12:44,000
If I was to use name in here, though, it might point to another location

130
00:12:44,000 --> 00:12:47,000
and say that it means something else.

131
00:12:47,000 --> 00:12:53,000
So, even though I'm using the same variable, I can use name in here and here,

132
00:12:53,000 --> 00:12:57,000
they point to different places that hold different values.

133
00:12:57,000 --> 00:13:02,000
Even if they held the same value, even if this location held hell-bent as well,

134
00:13:02,000 --> 00:13:05,000
they're still pointing to two different locations,

135
00:13:05,000 --> 00:13:11,000
because even though they have the same name, they're not the same variable.

136
00:13:11,000 --> 00:13:14,000
Now, usually it's a good idea not to name them the same thing,

137
00:13:14,000 --> 00:13:17,000
but you could if you needed to.

138
00:13:17,000 --> 00:13:21,000
So, the first thing we're going to do is we're going to say that this function

139
00:13:21,000 --> 00:13:24,000
requires a variable to be passed into it,

140
00:13:24,000 --> 00:13:27,000
and we're just going to call that variable x.

141
00:13:27,000 --> 00:13:31,000
And then what we're going to do inside of our function

142
00:13:31,000 --> 00:13:33,000
is we're just going to pop up a message box,

143
00:13:33,000 --> 00:13:40,000
because, once again, it's the easiest way for you to see what's going on.

144
00:13:40,000 --> 00:13:43,000
But, like I said before, it could be hundreds of lines of code,

145
00:13:43,000 --> 00:13:45,000
it could have passes to other functions,

146
00:13:45,000 --> 00:13:48,000
and those functions could pass to other functions,

147
00:13:48,000 --> 00:13:52,000
and so on and so forth.

148
00:13:52,000 --> 00:13:57,000
Okay, next, what we need is we need to have a call to that function.

149
00:13:57,000 --> 00:13:59,000
So,

150
00:14:04,000 --> 00:14:07,000
and then we're going to pass the value,

151
00:14:07,000 --> 00:14:13,000
we're going to pass our variable name into it.

152
00:14:13,000 --> 00:14:19,000
Okay, let me see.

153
00:14:19,000 --> 00:14:21,000
Okay, I think we're good.

154
00:14:21,000 --> 00:14:25,000
So, here's how we pass a value into a function.

155
00:14:25,000 --> 00:14:28,000
When we create our function, we say that we were expecting

156
00:14:28,000 --> 00:14:30,000
a variable to be passed into it,

157
00:14:30,000 --> 00:14:32,000
and then when we make our call to it,

158
00:14:32,000 --> 00:14:36,000
we place the variable that we are going to be passing to it.

159
00:14:41,000 --> 00:14:44,000
Okay, so here we go.

160
00:14:44,000 --> 00:14:46,000
We've displayed the value of x,

161
00:14:46,000 --> 00:14:50,000
and to go back a bit to show you what I was talking about,

162
00:14:51,000 --> 00:14:57,000
let's assume that we weren't passing any variables into it.

163
00:14:57,000 --> 00:15:02,000
If I was to go and try to print out the value of name,

164
00:15:02,000 --> 00:15:05,000
because this function,

165
00:15:05,000 --> 00:15:11,000
everything in this function can't actually see the contents of that variable,

166
00:15:11,000 --> 00:15:14,000
this is not going to have any value,

167
00:15:14,000 --> 00:15:18,000
because this is actually a different variable that doesn't have any value,

168
00:15:18,000 --> 00:15:21,000
and we can demonstrate that right there.

169
00:15:21,000 --> 00:15:25,000
So, as we can see, name has no value,

170
00:15:25,000 --> 00:15:27,000
because it doesn't know what that is.

171
00:15:27,000 --> 00:15:30,000
These are two different variables.

172
00:15:30,000 --> 00:15:32,000
Okay, so like I said,

173
00:15:32,000 --> 00:15:40,000
that is how we pass a value into a function.

174
00:15:40,000 --> 00:15:44,000
So, okay, and we can pass as many values as we want.

175
00:15:44,000 --> 00:15:46,000
So, we have name right now,

176
00:15:46,000 --> 00:15:51,000
and what I will do quickly is I'll create a couple of new variables.

177
00:16:03,000 --> 00:16:08,000
Okay, and all we have to do is put a comma,

178
00:16:08,000 --> 00:16:11,000
and then the next variable we're going to be passing.

179
00:16:15,000 --> 00:16:18,000
Until we get to our last variable.

180
00:16:20,000 --> 00:16:22,000
And likewise, we have to do with this.

181
00:16:22,000 --> 00:16:24,000
So, let's do...

182
00:16:30,000 --> 00:16:33,000
Okay, so it doesn't matter what these names are,

183
00:16:33,000 --> 00:16:36,000
because they're not really related to that,

184
00:16:36,000 --> 00:16:38,000
and we'll just pop up.

185
00:16:39,000 --> 00:16:44,000
There are values.

186
00:16:44,000 --> 00:16:52,000
So, X, Y, Z, and S.

187
00:16:52,000 --> 00:16:57,000
Okay, so this is how we pass multiple values into a function,

188
00:16:57,000 --> 00:17:00,000
and there we go.

189
00:17:00,000 --> 00:17:03,000
A 1, 2, 3.

190
00:17:03,000 --> 00:17:05,000
Okay.

191
00:17:06,000 --> 00:17:08,000
Easy stuff, moving on.

192
00:17:16,000 --> 00:17:20,000
Next is returning a value from a function.

193
00:17:24,000 --> 00:17:26,000
Yeah, I got enough time for this.

194
00:17:26,000 --> 00:17:28,000
I'm right at that border point

195
00:17:28,000 --> 00:17:30,000
where this video is going to get a little bit long,

196
00:17:30,000 --> 00:17:33,000
but if I put this off to the next video,

197
00:17:33,000 --> 00:17:36,000
then the next video is going to be really long.

198
00:17:36,000 --> 00:17:38,000
Okay, returning a value.

199
00:17:38,000 --> 00:17:41,000
So, it's basically the same way that we do the passing.

200
00:17:41,000 --> 00:17:44,000
So, let's just create some variables.

201
00:17:53,000 --> 00:17:56,000
And then we'll create our function,

202
00:17:56,000 --> 00:17:58,000
and we're going to be passing two variables to it,

203
00:17:58,000 --> 00:18:00,000
so we know that.

204
00:18:04,000 --> 00:18:12,000
And we will use X and Y,

205
00:18:15,000 --> 00:18:17,000
and we'll do a mathematical operation.

206
00:18:17,000 --> 00:18:21,000
But first, let's look at how we get our return.

207
00:18:21,000 --> 00:18:25,000
So, now that we know that we want something back,

208
00:18:25,000 --> 00:18:28,000
what we're going to do is we're going to say

209
00:18:28,000 --> 00:18:32,000
that the variable that we want to store,

210
00:18:32,000 --> 00:18:33,000
the return value.

211
00:18:33,000 --> 00:18:36,000
So, we're going to do a mathematical operation in here,

212
00:18:36,000 --> 00:18:37,000
and we're going to say up here,

213
00:18:37,000 --> 00:18:40,000
we're going to say that the value that we get from that

214
00:18:40,000 --> 00:18:42,000
is going to get stored into a variable.

215
00:18:42,000 --> 00:18:45,000
So, just like how we do this here,

216
00:18:45,000 --> 00:18:47,000
or we declare our variables like that,

217
00:18:47,000 --> 00:18:52,000
we're going to declare that C equals

218
00:18:52,000 --> 00:18:56,000
whatever we get back the return value from our function.

219
00:18:58,000 --> 00:19:01,000
And we're going to pass it A and B.

220
00:19:03,000 --> 00:19:07,000
So, C is going to equal whatever we get returned back

221
00:19:07,000 --> 00:19:10,000
from when we pass these values into our function.

222
00:19:10,000 --> 00:19:12,000
Now, what we're going to do is we're going to say

223
00:19:12,000 --> 00:19:15,000
in our function, now we can do a lot of different things in here.

224
00:19:15,000 --> 00:19:19,000
It doesn't have to be only what we're going to be doing right now.

225
00:19:19,000 --> 00:19:22,000
There's different ways that we could do it.

226
00:19:22,000 --> 00:19:25,000
We could have our math done in a whole different way,

227
00:19:25,000 --> 00:19:27,000
a whole different way.

228
00:19:27,000 --> 00:19:31,000
But because we only have one line that we need in here,

229
00:19:31,000 --> 00:19:33,000
that's all we're going to do.

230
00:19:33,000 --> 00:19:36,000
But in your program, it might not be so easy

231
00:19:36,000 --> 00:19:41,000
as just returning an X plus a Y, or so on and so forth.

232
00:19:43,000 --> 00:19:45,000
But we're going right to the punch.

233
00:19:45,000 --> 00:19:49,000
This is what we were expecting it to do.

234
00:19:49,000 --> 00:19:52,000
So, we're going to say return, and then what do we want?

235
00:19:52,000 --> 00:19:56,000
We want X, do we want X times Y?

236
00:19:57,000 --> 00:20:00,000
Do we want X minus Y?

237
00:20:01,000 --> 00:20:04,000
Do we want X plus Y?

238
00:20:04,000 --> 00:20:10,000
Do we want X plus Y times Pi to the square root of whatever?

239
00:20:11,000 --> 00:20:14,000
Okay, so there's multiple things that we can do in here.

240
00:20:14,000 --> 00:20:16,000
This is just a very simple example,

241
00:20:16,000 --> 00:20:21,000
and you can play around with this to see what you can do with it.

242
00:20:21,000 --> 00:20:23,000
Okay, so here we go.

243
00:20:23,000 --> 00:20:25,000
We've passed, we've made the call to our function,

244
00:20:25,000 --> 00:20:27,000
and we're going to get a return value,

245
00:20:27,000 --> 00:20:31,000
and we're going to assign that to the variable C.

246
00:20:31,000 --> 00:20:35,000
We'll run our, oh, and I guess we need a message box

247
00:20:35,000 --> 00:20:37,000
to actually display that.

248
00:20:40,000 --> 00:20:43,000
Message box, and we're just going to print out our C.

249
00:20:48,000 --> 00:20:53,000
Okay, so there we go.

250
00:20:54,000 --> 00:20:57,000
We've passed one and two into our function,

251
00:20:57,000 --> 00:21:00,000
and then we've added them together, and we output three.

252
00:21:00,000 --> 00:21:04,000
Likewise, we can change that to multiply,

253
00:21:04,000 --> 00:21:09,000
and, oh, I guess we're going to get two this time.

254
00:21:13,000 --> 00:21:17,000
We can also do, like I said, we can also do other things.

255
00:21:18,000 --> 00:21:25,000
Let me get some bed mass in here.

256
00:21:37,000 --> 00:21:42,000
Okay, and there we go.

257
00:21:47,000 --> 00:21:50,000
Okay, so that's it for this part.

258
00:21:50,000 --> 00:21:52,000
Come back and we'll finish.

259
00:21:52,000 --> 00:21:54,000
We'll go to passing by reference,

260
00:21:54,000 --> 00:21:59,000
and test how you can use this for testing,

261
00:21:59,000 --> 00:22:01,000
and a bunch of other little tricks

262
00:22:01,000 --> 00:22:04,000
that'll make your programming experience much easier,

263
00:22:04,000 --> 00:22:06,000
much less troublesome.

