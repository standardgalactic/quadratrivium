WEBVTT

00:00.000 --> 00:06.000
Hey, how's it going? This is Helbent and welcome to tutorial number 4 from my AutoHotKey tutorial series.

00:06.000 --> 00:11.000
In this one, we're going to be looking at functions and how we use them.

00:11.000 --> 00:15.000
First, we'll start off by saying that what a function is.

00:15.000 --> 00:22.000
So basically, a function is going to be a mini program within our program.

00:22.000 --> 00:30.000
The way this becomes useful is, let's say we have a block of 10 commands.

00:30.000 --> 00:40.000
And we're going to be using these same 10 commands or the same bit of code over and over again throughout the course of our program.

00:40.000 --> 00:47.000
Now, we could write in our program those 10 lines every time we need it.

00:47.000 --> 00:51.000
And if it's 100 times, we can write it into our program 100 times.

00:51.000 --> 00:58.000
But what we're going to end up with is a script or a program that's going to be 10 miles long.

00:58.000 --> 01:03.000
And it's going to be impossible for us to actually read our program.

01:03.000 --> 01:10.000
So instead, what we can do is we can create a function that's going to contain those 10 bits of code.

01:10.000 --> 01:17.000
And every time we actually need to use those, instead of writing the 10 lines out,

01:17.000 --> 01:24.000
we can just call to that function and have it execute and then go back into our main program again.

01:24.000 --> 01:29.000
So that's the main use for our functions.

01:29.000 --> 01:34.000
Another way that functions are useful is with conserving memory.

01:34.000 --> 01:45.000
So your computer, even if it has terabytes of RAM, it is a finite amount.

01:45.000 --> 01:52.000
And eventually, there'll come a point where you don't have any memory available anymore.

01:52.000 --> 01:58.000
So by using functions, what we can do is we'll end up using local variables,

01:58.000 --> 02:03.000
which take up a address of memory or take up some of the memory of your computer.

02:03.000 --> 02:07.000
We can use local variables that once they're done being used,

02:07.000 --> 02:13.000
it'll actually free up that memory so something else can use it.

02:13.000 --> 02:19.000
So let's say if we have one variable that we know that we have to have.

02:19.000 --> 02:25.000
We have to use this variable throughout the whole run of our program

02:25.000 --> 02:31.000
or a series of variables that we know that we have to use throughout the running of our program.

02:31.000 --> 02:37.000
They're automatically, we know that they need, permanently, they need that memory.

02:37.000 --> 02:44.000
But we might need to manipulate those variables in ways that the manipulations that we do to it,

02:44.000 --> 02:47.000
so let's say we can multiply it with other things.

02:47.000 --> 02:49.000
So let's say pi, for example.

02:49.000 --> 02:55.000
So in a function, we can assign a variable, a local variable, the value of pi,

02:55.000 --> 03:02.000
pass in our variable to that, multiply our variable with pi,

03:02.000 --> 03:12.000
and then leave the function and the value, the space and memory that the variable that's holding the value of pi,

03:12.000 --> 03:19.000
it can be freed up for something else to take its place until it's time for us to use that pi variable again.

03:19.000 --> 03:24.000
It'll get re-initialized, it'll take up that memory again until it's done being used,

03:24.000 --> 03:27.000
and then it'll free it up again, right?

03:27.000 --> 03:33.000
So that's one of the main reasons also why we need functions.

03:33.000 --> 03:36.000
So let's jump into it.

03:36.000 --> 03:41.000
In order to do this tutorial, I suggest you have a fair knowledge of variables,

03:41.000 --> 03:45.000
or at least, you know, some working knowledge of variables.

03:45.000 --> 03:48.000
So the first thing we're going to do is we're going to create a function.

03:48.000 --> 03:54.000
Now creating a function is very much like creating a label or creating a variable.

03:54.000 --> 04:00.000
So when we name it, we want it to be something that makes sense and can't have any spaces in its name.

04:00.000 --> 04:06.000
So we can use tons and tons of words in its name, and in fact, that's what I'm going to do.

04:06.000 --> 04:15.000
I'm just going to call my function myfirstfunction.

04:15.000 --> 04:21.000
Now this is a case where it's not a very good name for a function.

04:21.000 --> 04:26.000
For our purposes, it works okay, but for the most part, you don't want to name it something like this,

04:26.000 --> 04:31.000
unless this really is, it makes sense for some reason.

04:31.000 --> 04:33.000
So you want to name it something that makes sense.

04:33.000 --> 04:36.000
So that way, when you're going through your program, or when you have to make calls to it,

04:36.000 --> 04:42.000
and I'll show you that in a minute, how to call it up, you don't have to go searching for the name.

04:42.000 --> 04:48.000
So if you have a name that really makes sense and that you're able to remember it every single time you have to make a call to it,

04:48.000 --> 04:55.000
you don't have to go digging around looking it up because making calls to functions, it does get a little bit repetitive

04:55.000 --> 04:59.000
and it gets a little bit tricky if you don't know what the name of it is.

04:59.000 --> 05:05.000
So you'll have to go a hundred lines down in your code, find out what the name of the function is, and then call it up.

05:05.000 --> 05:11.000
But like I said, for our purposes, this is fine, and when I'm doing these tutorials,

05:11.000 --> 05:16.000
I don't want to spend the time trying to come up, think about these kind of things.

05:16.000 --> 05:22.000
So it's kind of a case of do as I'm saying that what you should do rather than do what I'm doing.

05:22.000 --> 05:25.000
So do what I say, not what I do.

05:25.000 --> 05:29.000
Okay, so now that we have a name of our function, we have an open and close parentheses,

05:29.000 --> 05:36.000
and then we're going to drop down and create an open and close French brace.

05:36.000 --> 05:42.000
Now, so this is our function and anything that we want it to do, we'll put inside of here.

05:42.000 --> 05:48.000
And it can be literally hundreds of lines of code, it could be thousands of lines of code, or it could be two lines of code,

05:48.000 --> 05:52.000
it could be one line of code, it could be no code at all.

05:52.000 --> 05:59.000
Now, because it's easy, the easiest way for me to show you what is going on with these kind of programs,

05:59.000 --> 06:02.000
all I'm going to do is I'm going to use a message box.

06:02.000 --> 06:08.000
So what those are, when you're creating your functions, obviously a message box isn't going to do.

06:08.000 --> 06:13.000
But for the teaching of this, it's easiest for me to show you with a message box,

06:13.000 --> 06:20.000
so you can actually see where in our program it, what's going on in our program.

06:20.000 --> 06:30.000
So I'm just going to create a message box, and it's going to say,

06:31.000 --> 06:38.000
Okay, so we have our function, and if we were to actually run our program right now, it's not actually going to do anything.

06:38.000 --> 06:46.000
And order for this function to actually work, in our main program, or our main script, what we need to actually do is call it.

06:46.000 --> 06:50.000
And the way we call it is we just use its name with the open and close parentheses,

06:50.000 --> 06:53.000
and there's more to it, but we'll get into that in a few minutes.

06:53.000 --> 07:07.000
But just basically we're going to use its name, and open and close, and then that's it.

07:07.000 --> 07:15.000
So let's say we have a whole bunch of code up here, we have a bunch of lines that are doing different things,

07:15.000 --> 07:22.000
and then we need our function, we call our function, and then below that we can go back to doing our normal program.

07:22.000 --> 07:28.000
Now how this works is as soon as it encounters this, it's going to jump inside of the properties,

07:28.000 --> 07:33.000
or inside of our function, and start executing the lines of code that is in it.

07:33.000 --> 07:39.000
Once it gets to a return, or an exit, or this close print, French brace,

07:39.000 --> 07:46.000
then it's going to go back into our main program, and continue on, until it encounters an exit or a return.

07:47.000 --> 07:53.000
Okay, so here we go, we have our first function, we've created it, we've made a call to it,

07:53.000 --> 07:56.000
we save our program, and we run it.

07:56.000 --> 08:01.000
And there we go, we have executed our first function.

08:01.000 --> 08:10.000
Now, let's look at, I'm going to expand on this just a little bit, I'm going to create a message box here.

08:11.000 --> 08:14.000
Message box.

08:23.000 --> 08:30.000
Okay, so as soon as our script starts, it's going to pop up a message box that says that we're in the main program.

08:30.000 --> 08:34.000
Then I'm going to pass it to the function, it's going to execute that,

08:34.000 --> 08:39.000
and then I'm going to create another message box that says...

08:55.000 --> 09:03.000
And, you know, I'm going to do one more function, so to save time, I'm just going to copy this, paste it in,

09:03.000 --> 09:14.000
and I'm going to alter a few things.

09:21.000 --> 09:28.000
And in this case, what I'm going to do is I'm actually going to, rather than putting my second function,

09:28.000 --> 09:34.000
rather than calling it up here, rather than doing that, what I'm actually going to do is show you

09:34.000 --> 09:39.000
that you can make calls to other functions within functions.

09:39.000 --> 09:45.000
So, once it goes into the first function, it's going to pop up the message box,

09:45.000 --> 09:49.000
and then it's going to go make a call to the second function.

09:49.000 --> 09:52.000
It's going to go and execute the properties of the second function,

09:52.000 --> 09:56.000
and then finally it's going to go back into our main program.

09:56.000 --> 10:00.000
Alright, I'm going to go ahead and save it.

10:00.000 --> 10:05.000
Okay, so here we go, it says it is in the main program.

10:05.000 --> 10:11.000
Next, it's going to jump into our first function and give us our message box.

10:11.000 --> 10:18.000
So, it's now in the first function, and now it's in the second function,

10:18.000 --> 10:21.000
and now it's back in the main program.

10:21.000 --> 10:27.000
So, as you can see, you can make calls to other functions within functions.

10:27.000 --> 10:32.000
Okay, I hope that's clear, and we will move on.

10:32.000 --> 10:35.000
So, I'm just going to comment out.

10:35.000 --> 10:45.000
Actually, you know what, I haven't been saving my tutorial, so I'm going to get rid of this.

10:45.000 --> 10:49.000
Okay, next what we have is passing variables into a function.

10:49.000 --> 10:53.000
So, like I said, one of the main reasons why you're going to be using a function

10:53.000 --> 10:56.000
is to actually do operations in it on variables.

10:56.000 --> 10:59.000
So, in this case, we're going to create a variable,

10:59.000 --> 11:03.000
and like I said, I'm not very good at naming things while I'm doing these tutorials,

11:03.000 --> 11:08.000
so I just usually pick the first thing that pops to my head and I run with it,

11:08.000 --> 11:12.000
rather than sitting here for a minute or two trying to think of something.

11:12.000 --> 11:15.000
Because I end up, instead of thinking of what I should be thinking about,

11:15.000 --> 11:19.000
I think about other things.

11:19.000 --> 11:23.000
Now, I need to create a function,

11:23.000 --> 11:34.000
and in this case, I'm just going to call it function one, just to save a little bit of time.

11:34.000 --> 11:39.000
Okay, now, when I had gone over the variable tutorial,

11:39.000 --> 11:48.000
I had told you about scope and how things are local or global.

11:48.000 --> 11:53.000
This is a case where we're going to have two local variables here, basically,

11:53.000 --> 12:01.000
and so, if I was to use this name inside of this function,

12:01.000 --> 12:07.000
it would actually be two different variables, even though they share the same name.

12:07.000 --> 12:11.000
What they're doing is they're pointing to a place in the memory.

12:11.000 --> 12:15.000
So, let's say that this computer screen is my computer's memory.

12:15.000 --> 12:23.000
This variable name might point to this spot up here for those, okay, actually here.

12:23.000 --> 12:26.000
So, it might point to this location in my memory,

12:26.000 --> 12:33.000
and say that the value that's stored there is hell-bent.

12:33.000 --> 12:38.000
So, at this location in memory, it says that name points to this location,

12:38.000 --> 12:40.000
and it says it equals hell-bent.

12:40.000 --> 12:44.000
If I was to use name in here, though, it might point to another location

12:44.000 --> 12:47.000
and say that it means something else.

12:47.000 --> 12:53.000
So, even though I'm using the same variable, I can use name in here and here,

12:53.000 --> 12:57.000
they point to different places that hold different values.

12:57.000 --> 13:02.000
Even if they held the same value, even if this location held hell-bent as well,

13:02.000 --> 13:05.000
they're still pointing to two different locations,

13:05.000 --> 13:11.000
because even though they have the same name, they're not the same variable.

13:11.000 --> 13:14.000
Now, usually it's a good idea not to name them the same thing,

13:14.000 --> 13:17.000
but you could if you needed to.

13:17.000 --> 13:21.000
So, the first thing we're going to do is we're going to say that this function

13:21.000 --> 13:24.000
requires a variable to be passed into it,

13:24.000 --> 13:27.000
and we're just going to call that variable x.

13:27.000 --> 13:31.000
And then what we're going to do inside of our function

13:31.000 --> 13:33.000
is we're just going to pop up a message box,

13:33.000 --> 13:40.000
because, once again, it's the easiest way for you to see what's going on.

13:40.000 --> 13:43.000
But, like I said before, it could be hundreds of lines of code,

13:43.000 --> 13:45.000
it could have passes to other functions,

13:45.000 --> 13:48.000
and those functions could pass to other functions,

13:48.000 --> 13:52.000
and so on and so forth.

13:52.000 --> 13:57.000
Okay, next, what we need is we need to have a call to that function.

13:57.000 --> 13:59.000
So,

14:04.000 --> 14:07.000
and then we're going to pass the value,

14:07.000 --> 14:13.000
we're going to pass our variable name into it.

14:13.000 --> 14:19.000
Okay, let me see.

14:19.000 --> 14:21.000
Okay, I think we're good.

14:21.000 --> 14:25.000
So, here's how we pass a value into a function.

14:25.000 --> 14:28.000
When we create our function, we say that we were expecting

14:28.000 --> 14:30.000
a variable to be passed into it,

14:30.000 --> 14:32.000
and then when we make our call to it,

14:32.000 --> 14:36.000
we place the variable that we are going to be passing to it.

14:41.000 --> 14:44.000
Okay, so here we go.

14:44.000 --> 14:46.000
We've displayed the value of x,

14:46.000 --> 14:50.000
and to go back a bit to show you what I was talking about,

14:51.000 --> 14:57.000
let's assume that we weren't passing any variables into it.

14:57.000 --> 15:02.000
If I was to go and try to print out the value of name,

15:02.000 --> 15:05.000
because this function,

15:05.000 --> 15:11.000
everything in this function can't actually see the contents of that variable,

15:11.000 --> 15:14.000
this is not going to have any value,

15:14.000 --> 15:18.000
because this is actually a different variable that doesn't have any value,

15:18.000 --> 15:21.000
and we can demonstrate that right there.

15:21.000 --> 15:25.000
So, as we can see, name has no value,

15:25.000 --> 15:27.000
because it doesn't know what that is.

15:27.000 --> 15:30.000
These are two different variables.

15:30.000 --> 15:32.000
Okay, so like I said,

15:32.000 --> 15:40.000
that is how we pass a value into a function.

15:40.000 --> 15:44.000
So, okay, and we can pass as many values as we want.

15:44.000 --> 15:46.000
So, we have name right now,

15:46.000 --> 15:51.000
and what I will do quickly is I'll create a couple of new variables.

16:03.000 --> 16:08.000
Okay, and all we have to do is put a comma,

16:08.000 --> 16:11.000
and then the next variable we're going to be passing.

16:15.000 --> 16:18.000
Until we get to our last variable.

16:20.000 --> 16:22.000
And likewise, we have to do with this.

16:22.000 --> 16:24.000
So, let's do...

16:30.000 --> 16:33.000
Okay, so it doesn't matter what these names are,

16:33.000 --> 16:36.000
because they're not really related to that,

16:36.000 --> 16:38.000
and we'll just pop up.

16:39.000 --> 16:44.000
There are values.

16:44.000 --> 16:52.000
So, X, Y, Z, and S.

16:52.000 --> 16:57.000
Okay, so this is how we pass multiple values into a function,

16:57.000 --> 17:00.000
and there we go.

17:00.000 --> 17:03.000
A 1, 2, 3.

17:03.000 --> 17:05.000
Okay.

17:06.000 --> 17:08.000
Easy stuff, moving on.

17:16.000 --> 17:20.000
Next is returning a value from a function.

17:24.000 --> 17:26.000
Yeah, I got enough time for this.

17:26.000 --> 17:28.000
I'm right at that border point

17:28.000 --> 17:30.000
where this video is going to get a little bit long,

17:30.000 --> 17:33.000
but if I put this off to the next video,

17:33.000 --> 17:36.000
then the next video is going to be really long.

17:36.000 --> 17:38.000
Okay, returning a value.

17:38.000 --> 17:41.000
So, it's basically the same way that we do the passing.

17:41.000 --> 17:44.000
So, let's just create some variables.

17:53.000 --> 17:56.000
And then we'll create our function,

17:56.000 --> 17:58.000
and we're going to be passing two variables to it,

17:58.000 --> 18:00.000
so we know that.

18:04.000 --> 18:12.000
And we will use X and Y,

18:15.000 --> 18:17.000
and we'll do a mathematical operation.

18:17.000 --> 18:21.000
But first, let's look at how we get our return.

18:21.000 --> 18:25.000
So, now that we know that we want something back,

18:25.000 --> 18:28.000
what we're going to do is we're going to say

18:28.000 --> 18:32.000
that the variable that we want to store,

18:32.000 --> 18:33.000
the return value.

18:33.000 --> 18:36.000
So, we're going to do a mathematical operation in here,

18:36.000 --> 18:37.000
and we're going to say up here,

18:37.000 --> 18:40.000
we're going to say that the value that we get from that

18:40.000 --> 18:42.000
is going to get stored into a variable.

18:42.000 --> 18:45.000
So, just like how we do this here,

18:45.000 --> 18:47.000
or we declare our variables like that,

18:47.000 --> 18:52.000
we're going to declare that C equals

18:52.000 --> 18:56.000
whatever we get back the return value from our function.

18:58.000 --> 19:01.000
And we're going to pass it A and B.

19:03.000 --> 19:07.000
So, C is going to equal whatever we get returned back

19:07.000 --> 19:10.000
from when we pass these values into our function.

19:10.000 --> 19:12.000
Now, what we're going to do is we're going to say

19:12.000 --> 19:15.000
in our function, now we can do a lot of different things in here.

19:15.000 --> 19:19.000
It doesn't have to be only what we're going to be doing right now.

19:19.000 --> 19:22.000
There's different ways that we could do it.

19:22.000 --> 19:25.000
We could have our math done in a whole different way,

19:25.000 --> 19:27.000
a whole different way.

19:27.000 --> 19:31.000
But because we only have one line that we need in here,

19:31.000 --> 19:33.000
that's all we're going to do.

19:33.000 --> 19:36.000
But in your program, it might not be so easy

19:36.000 --> 19:41.000
as just returning an X plus a Y, or so on and so forth.

19:43.000 --> 19:45.000
But we're going right to the punch.

19:45.000 --> 19:49.000
This is what we were expecting it to do.

19:49.000 --> 19:52.000
So, we're going to say return, and then what do we want?

19:52.000 --> 19:56.000
We want X, do we want X times Y?

19:57.000 --> 20:00.000
Do we want X minus Y?

20:01.000 --> 20:04.000
Do we want X plus Y?

20:04.000 --> 20:10.000
Do we want X plus Y times Pi to the square root of whatever?

20:11.000 --> 20:14.000
Okay, so there's multiple things that we can do in here.

20:14.000 --> 20:16.000
This is just a very simple example,

20:16.000 --> 20:21.000
and you can play around with this to see what you can do with it.

20:21.000 --> 20:23.000
Okay, so here we go.

20:23.000 --> 20:25.000
We've passed, we've made the call to our function,

20:25.000 --> 20:27.000
and we're going to get a return value,

20:27.000 --> 20:31.000
and we're going to assign that to the variable C.

20:31.000 --> 20:35.000
We'll run our, oh, and I guess we need a message box

20:35.000 --> 20:37.000
to actually display that.

20:40.000 --> 20:43.000
Message box, and we're just going to print out our C.

20:48.000 --> 20:53.000
Okay, so there we go.

20:54.000 --> 20:57.000
We've passed one and two into our function,

20:57.000 --> 21:00.000
and then we've added them together, and we output three.

21:00.000 --> 21:04.000
Likewise, we can change that to multiply,

21:04.000 --> 21:09.000
and, oh, I guess we're going to get two this time.

21:13.000 --> 21:17.000
We can also do, like I said, we can also do other things.

21:18.000 --> 21:25.000
Let me get some bed mass in here.

21:37.000 --> 21:42.000
Okay, and there we go.

21:47.000 --> 21:50.000
Okay, so that's it for this part.

21:50.000 --> 21:52.000
Come back and we'll finish.

21:52.000 --> 21:54.000
We'll go to passing by reference,

21:54.000 --> 21:59.000
and test how you can use this for testing,

21:59.000 --> 22:01.000
and a bunch of other little tricks

22:01.000 --> 22:04.000
that'll make your programming experience much easier,

22:04.000 --> 22:06.000
much less troublesome.

