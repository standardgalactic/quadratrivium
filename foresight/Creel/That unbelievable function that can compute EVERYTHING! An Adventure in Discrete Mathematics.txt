Okay, G'day all and welcome to another video.
Today we're going to be talking about computing things.
But not just anything, today we are talking about computing everything.
The topic of today is going to be an adventure through the amazing world of discrete maths.
We're going to time travel through the Victorian era and talk about some crazy ideas that a
follicle George had once.
And we're going to travel through the 1940s and meet a brilliant little follicle Alan.
And we're going to look at how to compute every single thing ever along the way.
It's going to be fun.
Okay, I have written a little e-book for this video and I'll be putting that up for the
Patreons as a big thank you for supporting the channel.
It really, really does mean a lot to me.
If you, humble viewer, would like to become a Patreon of this very channel, there will
be a link down below and another one up above.
Okay, that's good, but computing things.
Let's imagine that we've got a very, very tiny computer.
It's extremely tiny, so small that a lot of people wouldn't even regard this as a computer
but I tell you what it is, it's just our tiny computer and it's brilliant.
Anyway, our tiny computer is very excellent and it reads only two inputs and it produces
one output.
For its inputs, they're both going to be binary and its output is also going to be binary.
So you could think of this like a computer and it just has two buttons, A and B, they're
either pushed or they're not.
And it's also got a monitor but the monitor is kind of a rubbish resolution and this monitor
is either on or off.
The monitor just shows a one or a zero.
So if we've got our little computer here and the inputs are labeled A and B, then these
are all four possible inputs that we could give to our computer.
These are the questions that we could ask this little computer.
Now there is no more.
We're either pushing button A or we're not.
We're pushing button B or we're not.
It's either off, off, off, on, on, off, or on, on.
That's all there is.
Now for each of those questions or input patterns, the computer can answer either zero or one.
It just puts it up on its monitor, zero or one.
We could add another little column just here for our little computer specification, the
output.
And this is going to list the answers to each of the questions.
So let's define what the answers to each of the questions is.
We can just make this up as we go.
Well I happen to like one zero zero zero.
So let's define that as the output, shall we?
Now some of you, possibly a lot of you, might recognize exactly what this little bad boy
is, but keep stumbling, keep stumbling.
Okay, but that is our inputs and our outputs.
So when we input zero zero to our computer, it returns zero.
And if we input zero one or one zero, our little computer will also return zero and
zero.
But and the exciting bit, I use the word exciting quite loosely, but the exciting bit is when
we input one one to our tiny computer, it returns one.
Good stuff.
Now a lot of you are probably thinking, well that's the dumbest computer I've ever seen.
Who would ever use a computer like this?
But what if I was to tell you that this little operation just here is computed literally
billions of times per second by basically every single computer on Earth.
For this, humble little operation is none other than Boolean and, well there you go.
Mr George Boole was a mathematician from Victorian era England.
Largely self-taught, he defined a logical algebra which bears his name to this very
day.
It would be quite amazing what this man thought of.
Like we're talking, you know, a good hundred years or so before computers really existed.
We're talking like Sherlock Holmes days, you know, this is Jack the Ripper era.
People were still getting around with horses and carts.
I mean there was barely any electric lighting.
He sat down one morning with his cup of tea and just thought, you know what, I'm tired
of doing algebra with numbers.
I'm going to do it with some logic instead.
How's about that?
Everybody around here must have just looked at him and thought, what on earth are you,
George?
What are you talking about?
What are you doing?
Well it turns out, it turns out that Mr Boole was onto something, I tell you what, the dude
was onto something, holy mackerel.
Another fella, Charles Babbage, was gone absolutely ballistic making crazy machines to do just
incredible things.
He had a machine called the Difference Engine, was performing calculus with a bunch of valves
and tubes and craziness.
But anyway, a lot of the ideas that these Victorian era mathematicians, your Booles
and your Babbage's, a lot of their ideas actually went on to be extremely useful.
And form the foundation of modern computing.
What a history we have here on earth, eh?
What an amazing place, amazing time, Victorian era, good stuff, well done the lot he is.
So this is Boolean and it takes two bits of input A and B and it returns a single output
O and the output is zero for all of the combinations of inputs except where A and B are one.
And the way that we've drawn this out in columns like this actually has a name, this is called
a truth table.
Truth tables are a common way to specify logical operations such as Boolean and anyway for
George Boole and was not enough for his algebra so he defined a couple more operations.
We've also got Boolean or and we've got Boolean not as well.
And here's Boolean or takes two bits just like Boolean and it returns one bit, the output
column just here and the pattern of zeros and ones that it returns is different.
So that's really what defines these different operations, it's the output.
At any rate Boolean or returns a one for all of the input patterns except for the first
one.
Whenever the inputs are zero zero, Boolean or returns zero, otherwise it returns one.
We can think about this in a whole bunch of different ways, really the operation is asking
is A or B one and if either of them is one or both of them are one then the answer is
one or yes or true and if both of the inputs are zero or false then the answer is false.
And the final operation that Mr. Boole defined is Boolean not not actually only takes one
input and it just returns whatever the opposite is.
So if we've got a as our input if a is zero then not a is one a is one then not a is zero.
So Boolean not is sometimes called the complement or the bit wise complement sometimes also
called the ones complement it just depends on the circumstance but Boolean not just flips
the bit.
I've also mentioned that sometimes along with calling these things operations or functions
or whatever you'll often see them called gates especially when they're implemented
in hardware using transistors and elect trickery yeah logic gate logic operation Boolean operation
whatever you want to call it it's all the same thing.
But we've got our three Boolean operations here Boolean and Boolean or and Boolean not
might be tempted to ask something like why those three operations why those three and
or and not I mean they seem interesting enough but why those three you might also be tempted
to ask well if those three exist how many other operations are there and what we can
do here to figure out the answer to this we can say well the output column has four bits
in it and if each of these operations is defined by a different output pattern then that means
that there must be two to the power of four different patterns 16 different operations
and here they all are in all their glory all 16 binary operations would you look at that
now it looks a little bit messy I mean there's just a bunch of ones and zeros everywhere but
there should be some familiar faces in there so right here that's Boolean and and here's
Boolean or you'll also notice that some of these operations have redundant information
in them for instance the operation not a just here which produces the opposite of the input
well not a actually only reads a doesn't read the b variable at all and not b is the
sort of reverse of that not b returns the opposite of the b variable and it doesn't
read the a variable at all the first operation just here doesn't even read the input so just
writes zero to the output and the final operation just writes one regardless of the input anyway
let's have a look at the first operation shall we so the first operation returns zero no matter
what we input but if we just remember back to what Boolean and does Boolean and returns
a one only if both of the inputs a and b are one otherwise it returns a zero so what we
might do is something a little bit interesting we might say a and not a we're performing
a Boolean and with the complement of the same variable and what's going to happen if we
do that well if the variable a is set to zero then not a will be one and we'll end up with
zero and one the and operation will return zero likewise if the a variable is one to
begin with then one and its complement zero is also zero so regardless of what the value
of the input is if we perform a and not a we're going to get zero as the output no matter
what we've got a sequence of these little Boolean operations that we can perform and
we can emulate the zero gate let's have a look at the final gate so the final gate writes
one no matter what the inputs are let's have a go at creating that using the Boolean operations
what we can do is we can say a or not a if we remember back to the or gate it returns
one for all situations except for the input zero zero if we all a with the complement
of itself it's either going to be zero or one or if a was one it's going to be one
or zero but either way we're going to get one as a result a or not a returns one no
matter what it emulates this final gate this one gate and so you might have a bit of an
inkling of where we're going just here those three Boolean operations believe it or not
can emulate all 16 of this complete set of operations and it looks a little bit messy
but here is an example of how we might emulate each of the 16 gates you don't need to implement
all 16 of the original complete set of gates you can just implement the Boolean operations
and or and not and you know that you can generate all 16 of the other gates okay but let's be
a little bit serious here for a moment so our computer has two bits of RAM and a monitor
that's either on or off that's not very useful let's move up to a computer with three inputs
a b and c we've got eight rows now in our truth table and we can define our little three input
operation once again if we're talking about binary just here the output values just here
can each be zero or one just make up a gate while we go we got all right the output column
might be for zero zero zero the output might be zero for the input zero zero one the output
might be zero then it might output a one and a one and a one and a zero and a zero and
a one whatever we've got some gate just here and now using this truth table here we could
figure out what our little computer is going to return given any input pattern anyway let's
make another gate shall we that first one was so much fun one zero zero zero one one one zero
there's another gate good stuff just by changing the pattern of bits in the output column we get
a new gate every time what fun but you might be tempted to ask how many of these three input
gates are there well you can see from the output column that there's eight bits and if there's
eight different bits then two to the power eight gives you 256 pretty crazy we went from the two
input set of operations there's only 16 of them we added one more input we've suddenly got 256 now
it would seem that these three input gates are far too numerous for something so simple as Boolean
operations to emulate but let's have a look at an interesting technique if we look at this gate
just here we could actually split it into two halves the upper half and the lower half if we
look at the upper half just by itself and we take away the a variable we just imagine it doesn't
exist for a moment if we look at this upper half what we can see is that we've actually got one
of the original 16 gates I mean this is a two input gate with one output the inputs here happen to
be B and C but it doesn't really matter to a Boolean operation I mean it doesn't care what the
variables are called and we could do the same with the lower half if we just ignore the a variable
for a moment what we've got here is a little two input single output gate we've got these two halves
and we know that the Boolean operations can emulate both of these halves separately so what we
really want to do is say something like if the a variable is zero in other words if it's the
upper half then you want to use this first expression as the answer then you want to say if
the a variable is one then we want to use this second lower half as the answer we need an if
statement but we're in Boolean algebra we don't have an if statement what we've got what we've got
is Boolean and to the rescue and what we do is this for the upper half we and that upper
half with not a we only want that upper half to apply when the a variable is zero in other words
when not a is one likewise for the lower half we only want that half to apply when the a variable
is one so we can and that lower half with a and what we end up with is two expressions we've got
not a and the upper half and we've got a and the lower half and if we all of those two expressions
together wouldn't you know it we've actually emulated a three input gate using nothing but
Boolean operations and what's interesting about that technique is that it wouldn't matter what the
bit pattern is in the three input gate it doesn't matter any of the 256 different three input gates
we know for certain that we could split them in halves we could and the upper half with not a
the lower half with a and we could all those two together and we would have the three input gate
this is really where we start to see just how powerful this algebra is just how good Mr.
Boole's operations were I mean you can start to read these as little numbers I mean zero one zero
that's binary for the number two zero one one is binary for the number three could read those as
numbers and we've got gates here like this one just here this actually tells you if a number
is prime or not it's an interesting gate this gate just here tells you if a number is divisible
by three there's all sorts of questions that these gates answer but no matter what the question is
any input that can be mapped to the range zero to seven we can emulate it with Boolean operations
now of course the interesting part is that we could actually take this further let's say that we
had four inputs now if we've got four inputs a b c and d and a single output column or even if we've
got more than one output column it doesn't really matter you write as many outputs as you want if
we've got four inputs there's a total of 16 different rows in the truth table and if we want to ask a
question like well how many different gates are there like that that take four inputs and return
a single output well the the answer is two to the power of 16 i mean six five five three six i think
65536 gates of this size and it might seem a little bit absurd to try and emulate that with
Boolean algebra but we know that we can emulate all of the three input gates just by splitting the
output column into upper and lower halves and we could actually apply exactly the same logic here
we could split the upper and lower halves we know that we can generate each of these halves and we
can actually mask then with the b variable this time just as we did with the a variable previously
and then we could mask again with the a variable and what we'd have is rather a long and very messy
and complicated looking expression but we know that no matter what the output column is doesn't
matter how complicated those bit patterns are we know that we can emulate that four input gate
using nothing but Boolean operations and then we could move up to five inputs and ten inputs and
a thousand inputs a million inputs it wouldn't matter it doesn't matter how complicated the input
is or how long the output column is we know for 100 certainty that we could emulate that using
nothing but Boolean operations and that's quite profound really that's absolutely extraordinary
because it means that no matter what questions we ask no matter how complicated the questions are
or how many outputs we need we know for 100 certainty that we could at least in theory
compute the result using and or and not now it might not seem that strange to to a programmer
but if you think about it that is quite odd we've got uh we've got no if statements we've got no
functions no objects i mean there's no branching or loops of any kind required we just read the
input perform exactly the same set of steps that exists some Boolean algebra that will give us the
right answer it means that Boolean algebra is universal it's complete there's not a single
finite question that we couldn't answer using Boolean algebra not one that really is something
i'd tell you what things are about to get even crazier i mean they're going to get crazier
let's have a look at another little operation way way back when we were looking at the original
operations there's a gate just here a funny little gate a strange gate it returns the
opposite of and it returns not and in other words nand for short just like an and and then
you're not the result and it's a strange gate because let's have a bit of a look at something
if we go a nand a if we input the same variable for both parameters then it's either going to be
zero zero as the input or one one as the input for nand if we input zero zero it returns one
and if we input one one nand returns zero if we nand a variable with itself performs a Boolean
not but that's just to start my friends because have a look at this nand is not and right it's not
and it's nand it's great if we nand a and b together and then we nand that result with itself what we'll
get is the not of the not and we'll get Boolean and we can perform Boolean not and Boolean and
using a single weird little gate here's an interesting fact if you take a truth table
that's output from some Boolean expression if you complement each of the inputs so wherever
the variables are clean you put a not beside them like a becomes not a and wherever there's a not
you get rid of it if you complement each of the variables to this Boolean expression then the
truth table of this function will actually be the reverse of the original truth table it will
be the same thing flipped upside down if we look at the nand gates output we've got one one one zero
this is what the all gate returns but it's upside down
so if you wanted to emulate Boolean or using nothing but nand all you would have to do is
complement the two inputs a and b and we know already that we can complement the inputs using
nothing but nand if we go a nand a nand b nand b wouldn't you know it we've got Boolean or
now that's a little bit strange the original Boolean set is universal you can compute literally
anything at all be it an operating system a video game or weather forecaster doesn't matter
anything at all but you can compute the original Boolean set of operations using nothing but nand
and what does that mean well it means that nand itself is universal can compute absolutely anything
you don't need any loops you don't need any objects no if statements all you need is a long
string of nand this is often implemented in transistors in cpu's and various other hardware
themselves i mean this is how computers work this is how they work absolutely astonishing stuff
shout out to nor as well the nor gate is also universal different expressions of course to
produce the various Boolean operations but nor is also universal i should mention at some point
that it's not even remotely practical to use nand to write something like an operating system for
example if you wanted to write a video game the number of nands in your code if you write code
like this i mean it would be absolutely astronomically large i mean we're not even talking millions or
billions here um it would be like a google plex or like graham's number or something you know these
are completely and utterly impractical but it is interesting to see that uh at least in theory
no matter what the input bit patterns are and no matter what output you need you need nothing
other than nand to uh to generate that output okay and so we can't talk about a lot of this
stuff without mentioning the incredible mr allen turing really one of the most uh magnificent
people ever to walk the earth just an astonishing astonishingly intelligent man of course his life
was was really cut cut quite short with uh you know terrible tragedy but uh his work and influence
survives today in a very very big way so allen turing really wrote the book on what it means to
compute things and he envisaged these machines i think he called them automatons at the time
but they came to be known as uh turing machines and uh what he said was uh if you had a tape and
there was a head that was reading and writing to the tape zeros and ones or using some alphabet
he pointed out that you could in theory write code for this machine to solve any problem out there
and so turing complete means that any set of inputs can be used to produce any outputs
allen turing what a guy uh there's been movies made about him books made about him
yeah so we can uh we can never meet mr allen turing you know we can never say thank you to him
but uh for what it's worth just want to say here on a little youtube video mr allen turing
thanks mate you are amazing
