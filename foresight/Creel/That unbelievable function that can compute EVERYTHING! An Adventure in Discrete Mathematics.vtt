WEBVTT

00:00.000 --> 00:04.360
Okay, G'day all and welcome to another video.

00:04.360 --> 00:06.920
Today we're going to be talking about computing things.

00:06.920 --> 00:10.960
But not just anything, today we are talking about computing everything.

00:10.960 --> 00:15.360
The topic of today is going to be an adventure through the amazing world of discrete maths.

00:15.360 --> 00:19.560
We're going to time travel through the Victorian era and talk about some crazy ideas that a

00:19.560 --> 00:21.280
follicle George had once.

00:21.280 --> 00:25.000
And we're going to travel through the 1940s and meet a brilliant little follicle Alan.

00:25.000 --> 00:29.720
And we're going to look at how to compute every single thing ever along the way.

00:29.720 --> 00:30.720
It's going to be fun.

00:30.720 --> 00:34.920
Okay, I have written a little e-book for this video and I'll be putting that up for the

00:34.920 --> 00:37.480
Patreons as a big thank you for supporting the channel.

00:37.480 --> 00:39.480
It really, really does mean a lot to me.

00:39.480 --> 00:44.360
If you, humble viewer, would like to become a Patreon of this very channel, there will

00:44.360 --> 00:47.320
be a link down below and another one up above.

00:47.320 --> 00:50.680
Okay, that's good, but computing things.

00:50.680 --> 00:54.520
Let's imagine that we've got a very, very tiny computer.

00:54.520 --> 00:59.640
It's extremely tiny, so small that a lot of people wouldn't even regard this as a computer

00:59.640 --> 01:03.600
but I tell you what it is, it's just our tiny computer and it's brilliant.

01:03.600 --> 01:10.920
Anyway, our tiny computer is very excellent and it reads only two inputs and it produces

01:10.920 --> 01:11.920
one output.

01:11.920 --> 01:15.800
For its inputs, they're both going to be binary and its output is also going to be binary.

01:15.800 --> 01:19.720
So you could think of this like a computer and it just has two buttons, A and B, they're

01:19.720 --> 01:21.200
either pushed or they're not.

01:21.200 --> 01:25.440
And it's also got a monitor but the monitor is kind of a rubbish resolution and this monitor

01:25.440 --> 01:27.120
is either on or off.

01:27.120 --> 01:29.600
The monitor just shows a one or a zero.

01:29.600 --> 01:34.080
So if we've got our little computer here and the inputs are labeled A and B, then these

01:34.080 --> 01:37.640
are all four possible inputs that we could give to our computer.

01:37.640 --> 01:40.680
These are the questions that we could ask this little computer.

01:40.680 --> 01:41.920
Now there is no more.

01:41.920 --> 01:44.360
We're either pushing button A or we're not.

01:44.360 --> 01:46.840
We're pushing button B or we're not.

01:46.840 --> 01:51.280
It's either off, off, off, on, on, off, or on, on.

01:51.280 --> 01:52.280
That's all there is.

01:52.280 --> 01:58.240
Now for each of those questions or input patterns, the computer can answer either zero or one.

01:58.240 --> 02:00.600
It just puts it up on its monitor, zero or one.

02:00.600 --> 02:04.640
We could add another little column just here for our little computer specification, the

02:04.640 --> 02:05.640
output.

02:05.640 --> 02:08.640
And this is going to list the answers to each of the questions.

02:08.640 --> 02:12.000
So let's define what the answers to each of the questions is.

02:12.000 --> 02:13.680
We can just make this up as we go.

02:13.680 --> 02:16.220
Well I happen to like one zero zero zero.

02:16.220 --> 02:19.120
So let's define that as the output, shall we?

02:19.120 --> 02:23.960
Now some of you, possibly a lot of you, might recognize exactly what this little bad boy

02:23.960 --> 02:26.240
is, but keep stumbling, keep stumbling.

02:26.240 --> 02:29.400
Okay, but that is our inputs and our outputs.

02:29.400 --> 02:33.740
So when we input zero zero to our computer, it returns zero.

02:33.740 --> 02:38.320
And if we input zero one or one zero, our little computer will also return zero and

02:38.320 --> 02:39.320
zero.

02:39.320 --> 02:43.640
But and the exciting bit, I use the word exciting quite loosely, but the exciting bit is when

02:43.640 --> 02:48.240
we input one one to our tiny computer, it returns one.

02:48.240 --> 02:49.240
Good stuff.

02:49.240 --> 02:52.920
Now a lot of you are probably thinking, well that's the dumbest computer I've ever seen.

02:52.920 --> 02:55.240
Who would ever use a computer like this?

02:55.240 --> 02:59.440
But what if I was to tell you that this little operation just here is computed literally

02:59.440 --> 03:04.680
billions of times per second by basically every single computer on Earth.

03:04.680 --> 03:12.600
For this, humble little operation is none other than Boolean and, well there you go.

03:12.600 --> 03:17.880
Mr George Boole was a mathematician from Victorian era England.

03:17.880 --> 03:22.000
Largely self-taught, he defined a logical algebra which bears his name to this very

03:22.000 --> 03:23.000
day.

03:23.000 --> 03:25.480
It would be quite amazing what this man thought of.

03:25.480 --> 03:31.040
Like we're talking, you know, a good hundred years or so before computers really existed.

03:31.040 --> 03:35.080
We're talking like Sherlock Holmes days, you know, this is Jack the Ripper era.

03:35.080 --> 03:36.920
People were still getting around with horses and carts.

03:36.920 --> 03:39.120
I mean there was barely any electric lighting.

03:39.120 --> 03:42.520
He sat down one morning with his cup of tea and just thought, you know what, I'm tired

03:42.520 --> 03:43.720
of doing algebra with numbers.

03:43.720 --> 03:45.920
I'm going to do it with some logic instead.

03:45.920 --> 03:46.920
How's about that?

03:46.920 --> 03:49.960
Everybody around here must have just looked at him and thought, what on earth are you,

03:49.960 --> 03:50.960
George?

03:50.960 --> 03:51.960
What are you talking about?

03:51.960 --> 03:52.960
What are you doing?

03:52.960 --> 03:58.240
Well it turns out, it turns out that Mr Boole was onto something, I tell you what, the dude

03:58.240 --> 04:01.520
was onto something, holy mackerel.

04:01.520 --> 04:06.720
Another fella, Charles Babbage, was gone absolutely ballistic making crazy machines to do just

04:06.720 --> 04:07.720
incredible things.

04:07.720 --> 04:11.960
He had a machine called the Difference Engine, was performing calculus with a bunch of valves

04:11.960 --> 04:13.720
and tubes and craziness.

04:13.720 --> 04:17.600
But anyway, a lot of the ideas that these Victorian era mathematicians, your Booles

04:17.600 --> 04:21.840
and your Babbage's, a lot of their ideas actually went on to be extremely useful.

04:21.840 --> 04:24.400
And form the foundation of modern computing.

04:24.400 --> 04:26.440
What a history we have here on earth, eh?

04:26.440 --> 04:32.080
What an amazing place, amazing time, Victorian era, good stuff, well done the lot he is.

04:32.080 --> 04:37.360
So this is Boolean and it takes two bits of input A and B and it returns a single output

04:37.360 --> 04:44.080
O and the output is zero for all of the combinations of inputs except where A and B are one.

04:44.080 --> 04:47.720
And the way that we've drawn this out in columns like this actually has a name, this is called

04:47.720 --> 04:48.720
a truth table.

04:49.000 --> 04:54.880
Truth tables are a common way to specify logical operations such as Boolean and anyway for

04:54.880 --> 05:00.840
George Boole and was not enough for his algebra so he defined a couple more operations.

05:00.840 --> 05:05.560
We've also got Boolean or and we've got Boolean not as well.

05:05.560 --> 05:11.200
And here's Boolean or takes two bits just like Boolean and it returns one bit, the output

05:11.200 --> 05:15.240
column just here and the pattern of zeros and ones that it returns is different.

05:15.240 --> 05:19.040
So that's really what defines these different operations, it's the output.

05:19.040 --> 05:24.040
At any rate Boolean or returns a one for all of the input patterns except for the first

05:24.040 --> 05:25.040
one.

05:25.040 --> 05:29.200
Whenever the inputs are zero zero, Boolean or returns zero, otherwise it returns one.

05:29.200 --> 05:32.320
We can think about this in a whole bunch of different ways, really the operation is asking

05:32.320 --> 05:37.840
is A or B one and if either of them is one or both of them are one then the answer is

05:37.840 --> 05:44.200
one or yes or true and if both of the inputs are zero or false then the answer is false.

05:45.160 --> 05:50.320
And the final operation that Mr. Boole defined is Boolean not not actually only takes one

05:50.320 --> 05:53.560
input and it just returns whatever the opposite is.

05:53.560 --> 06:01.400
So if we've got a as our input if a is zero then not a is one a is one then not a is zero.

06:01.400 --> 06:05.880
So Boolean not is sometimes called the complement or the bit wise complement sometimes also

06:05.880 --> 06:10.400
called the ones complement it just depends on the circumstance but Boolean not just flips

06:10.400 --> 06:11.400
the bit.

06:11.400 --> 06:14.920
I've also mentioned that sometimes along with calling these things operations or functions

06:14.920 --> 06:18.560
or whatever you'll often see them called gates especially when they're implemented

06:18.560 --> 06:24.840
in hardware using transistors and elect trickery yeah logic gate logic operation Boolean operation

06:24.840 --> 06:27.320
whatever you want to call it it's all the same thing.

06:27.320 --> 06:33.440
But we've got our three Boolean operations here Boolean and Boolean or and Boolean not

06:33.440 --> 06:39.120
might be tempted to ask something like why those three operations why those three and

06:39.160 --> 06:43.960
or and not I mean they seem interesting enough but why those three you might also be tempted

06:43.960 --> 06:49.360
to ask well if those three exist how many other operations are there and what we can

06:49.360 --> 06:54.840
do here to figure out the answer to this we can say well the output column has four bits

06:54.840 --> 07:00.880
in it and if each of these operations is defined by a different output pattern then that means

07:00.880 --> 07:06.520
that there must be two to the power of four different patterns 16 different operations

07:06.520 --> 07:13.480
and here they all are in all their glory all 16 binary operations would you look at that

07:13.480 --> 07:17.840
now it looks a little bit messy I mean there's just a bunch of ones and zeros everywhere but

07:17.840 --> 07:22.520
there should be some familiar faces in there so right here that's Boolean and and here's

07:22.520 --> 07:27.040
Boolean or you'll also notice that some of these operations have redundant information

07:27.040 --> 07:33.160
in them for instance the operation not a just here which produces the opposite of the input

07:33.160 --> 07:38.120
well not a actually only reads a doesn't read the b variable at all and not b is the

07:38.120 --> 07:42.160
sort of reverse of that not b returns the opposite of the b variable and it doesn't

07:42.160 --> 07:46.200
read the a variable at all the first operation just here doesn't even read the input so just

07:46.200 --> 07:52.440
writes zero to the output and the final operation just writes one regardless of the input anyway

07:52.440 --> 07:57.560
let's have a look at the first operation shall we so the first operation returns zero no matter

07:57.560 --> 08:02.640
what we input but if we just remember back to what Boolean and does Boolean and returns

08:02.640 --> 08:09.200
a one only if both of the inputs a and b are one otherwise it returns a zero so what we

08:09.200 --> 08:14.960
might do is something a little bit interesting we might say a and not a we're performing

08:14.960 --> 08:20.200
a Boolean and with the complement of the same variable and what's going to happen if we

08:20.200 --> 08:26.080
do that well if the variable a is set to zero then not a will be one and we'll end up with

08:26.080 --> 08:32.120
zero and one the and operation will return zero likewise if the a variable is one to

08:32.120 --> 08:38.400
begin with then one and its complement zero is also zero so regardless of what the value

08:38.400 --> 08:45.000
of the input is if we perform a and not a we're going to get zero as the output no matter

08:45.000 --> 08:49.520
what we've got a sequence of these little Boolean operations that we can perform and

08:49.520 --> 08:54.560
we can emulate the zero gate let's have a look at the final gate so the final gate writes

08:54.560 --> 09:00.400
one no matter what the inputs are let's have a go at creating that using the Boolean operations

09:00.480 --> 09:07.000
what we can do is we can say a or not a if we remember back to the or gate it returns

09:07.000 --> 09:13.160
one for all situations except for the input zero zero if we all a with the complement

09:13.160 --> 09:18.480
of itself it's either going to be zero or one or if a was one it's going to be one

09:18.480 --> 09:25.720
or zero but either way we're going to get one as a result a or not a returns one no

09:25.720 --> 09:31.080
matter what it emulates this final gate this one gate and so you might have a bit of an

09:31.080 --> 09:36.560
inkling of where we're going just here those three Boolean operations believe it or not

09:36.560 --> 09:41.680
can emulate all 16 of this complete set of operations and it looks a little bit messy

09:41.680 --> 09:47.200
but here is an example of how we might emulate each of the 16 gates you don't need to implement

09:47.200 --> 09:52.800
all 16 of the original complete set of gates you can just implement the Boolean operations

09:52.800 --> 09:58.680
and or and not and you know that you can generate all 16 of the other gates okay but let's be

09:58.680 --> 10:03.040
a little bit serious here for a moment so our computer has two bits of RAM and a monitor

10:03.040 --> 10:09.760
that's either on or off that's not very useful let's move up to a computer with three inputs

10:09.760 --> 10:16.440
a b and c we've got eight rows now in our truth table and we can define our little three input

10:16.440 --> 10:21.000
operation once again if we're talking about binary just here the output values just here

10:21.000 --> 10:26.680
can each be zero or one just make up a gate while we go we got all right the output column

10:26.680 --> 10:32.320
might be for zero zero zero the output might be zero for the input zero zero one the output

10:32.320 --> 10:36.920
might be zero then it might output a one and a one and a one and a zero and a zero and

10:36.920 --> 10:41.560
a one whatever we've got some gate just here and now using this truth table here we could

10:41.560 --> 10:46.600
figure out what our little computer is going to return given any input pattern anyway let's

10:46.600 --> 10:52.080
make another gate shall we that first one was so much fun one zero zero zero one one one zero

10:52.080 --> 10:56.960
there's another gate good stuff just by changing the pattern of bits in the output column we get

10:56.960 --> 11:01.360
a new gate every time what fun but you might be tempted to ask how many of these three input

11:01.360 --> 11:06.400
gates are there well you can see from the output column that there's eight bits and if there's

11:06.400 --> 11:12.840
eight different bits then two to the power eight gives you 256 pretty crazy we went from the two

11:12.840 --> 11:19.440
input set of operations there's only 16 of them we added one more input we've suddenly got 256 now

11:19.440 --> 11:24.680
it would seem that these three input gates are far too numerous for something so simple as Boolean

11:24.680 --> 11:28.680
operations to emulate but let's have a look at an interesting technique if we look at this gate

11:28.680 --> 11:33.800
just here we could actually split it into two halves the upper half and the lower half if we

11:33.800 --> 11:38.880
look at the upper half just by itself and we take away the a variable we just imagine it doesn't

11:38.880 --> 11:43.400
exist for a moment if we look at this upper half what we can see is that we've actually got one

11:43.400 --> 11:49.000
of the original 16 gates I mean this is a two input gate with one output the inputs here happen to

11:49.000 --> 11:52.360
be B and C but it doesn't really matter to a Boolean operation I mean it doesn't care what the

11:52.360 --> 11:57.560
variables are called and we could do the same with the lower half if we just ignore the a variable

11:57.560 --> 12:03.240
for a moment what we've got here is a little two input single output gate we've got these two halves

12:03.560 --> 12:09.120
and we know that the Boolean operations can emulate both of these halves separately so what we

12:09.120 --> 12:13.920
really want to do is say something like if the a variable is zero in other words if it's the

12:13.920 --> 12:18.600
upper half then you want to use this first expression as the answer then you want to say if

12:18.600 --> 12:24.640
the a variable is one then we want to use this second lower half as the answer we need an if

12:24.640 --> 12:30.720
statement but we're in Boolean algebra we don't have an if statement what we've got what we've got

12:30.880 --> 12:40.200
is Boolean and to the rescue and what we do is this for the upper half we and that upper

12:40.200 --> 12:45.880
half with not a we only want that upper half to apply when the a variable is zero in other words

12:45.880 --> 12:51.760
when not a is one likewise for the lower half we only want that half to apply when the a variable

12:51.760 --> 12:57.320
is one so we can and that lower half with a and what we end up with is two expressions we've got

12:57.320 --> 13:03.800
not a and the upper half and we've got a and the lower half and if we all of those two expressions

13:03.800 --> 13:09.720
together wouldn't you know it we've actually emulated a three input gate using nothing but

13:09.720 --> 13:14.760
Boolean operations and what's interesting about that technique is that it wouldn't matter what the

13:14.760 --> 13:21.560
bit pattern is in the three input gate it doesn't matter any of the 256 different three input gates

13:21.960 --> 13:27.160
we know for certain that we could split them in halves we could and the upper half with not a

13:27.160 --> 13:32.360
the lower half with a and we could all those two together and we would have the three input gate

13:32.360 --> 13:37.160
this is really where we start to see just how powerful this algebra is just how good Mr.

13:37.160 --> 13:42.840
Boole's operations were I mean you can start to read these as little numbers I mean zero one zero

13:42.840 --> 13:48.120
that's binary for the number two zero one one is binary for the number three could read those as

13:48.120 --> 13:52.280
numbers and we've got gates here like this one just here this actually tells you if a number

13:52.280 --> 13:57.240
is prime or not it's an interesting gate this gate just here tells you if a number is divisible

13:57.240 --> 14:03.160
by three there's all sorts of questions that these gates answer but no matter what the question is

14:03.160 --> 14:09.320
any input that can be mapped to the range zero to seven we can emulate it with Boolean operations

14:09.320 --> 14:14.200
now of course the interesting part is that we could actually take this further let's say that we

14:14.200 --> 14:21.720
had four inputs now if we've got four inputs a b c and d and a single output column or even if we've

14:21.720 --> 14:25.480
got more than one output column it doesn't really matter you write as many outputs as you want if

14:25.480 --> 14:31.000
we've got four inputs there's a total of 16 different rows in the truth table and if we want to ask a

14:31.000 --> 14:35.720
question like well how many different gates are there like that that take four inputs and return

14:35.720 --> 14:42.120
a single output well the the answer is two to the power of 16 i mean six five five three six i think

14:42.120 --> 14:49.720
65536 gates of this size and it might seem a little bit absurd to try and emulate that with

14:49.720 --> 14:56.520
Boolean algebra but we know that we can emulate all of the three input gates just by splitting the

14:56.520 --> 15:01.480
output column into upper and lower halves and we could actually apply exactly the same logic here

15:01.480 --> 15:06.520
we could split the upper and lower halves we know that we can generate each of these halves and we

15:06.520 --> 15:12.280
can actually mask then with the b variable this time just as we did with the a variable previously

15:12.280 --> 15:18.440
and then we could mask again with the a variable and what we'd have is rather a long and very messy

15:18.440 --> 15:24.200
and complicated looking expression but we know that no matter what the output column is doesn't

15:24.200 --> 15:30.520
matter how complicated those bit patterns are we know that we can emulate that four input gate

15:30.520 --> 15:35.480
using nothing but Boolean operations and then we could move up to five inputs and ten inputs and

15:35.480 --> 15:41.160
a thousand inputs a million inputs it wouldn't matter it doesn't matter how complicated the input

15:41.160 --> 15:48.360
is or how long the output column is we know for 100 certainty that we could emulate that using

15:48.360 --> 15:53.960
nothing but Boolean operations and that's quite profound really that's absolutely extraordinary

15:53.960 --> 15:59.880
because it means that no matter what questions we ask no matter how complicated the questions are

15:59.880 --> 16:06.600
or how many outputs we need we know for 100 certainty that we could at least in theory

16:06.600 --> 16:12.200
compute the result using and or and not now it might not seem that strange to to a programmer

16:12.200 --> 16:17.080
but if you think about it that is quite odd we've got uh we've got no if statements we've got no

16:17.080 --> 16:23.000
functions no objects i mean there's no branching or loops of any kind required we just read the

16:23.000 --> 16:29.240
input perform exactly the same set of steps that exists some Boolean algebra that will give us the

16:29.240 --> 16:36.040
right answer it means that Boolean algebra is universal it's complete there's not a single

16:36.040 --> 16:42.040
finite question that we couldn't answer using Boolean algebra not one that really is something

16:42.040 --> 16:46.360
i'd tell you what things are about to get even crazier i mean they're going to get crazier

16:46.360 --> 16:52.280
let's have a look at another little operation way way back when we were looking at the original

16:52.280 --> 16:57.880
operations there's a gate just here a funny little gate a strange gate it returns the

16:57.880 --> 17:04.440
opposite of and it returns not and in other words nand for short just like an and and then

17:04.440 --> 17:08.600
you're not the result and it's a strange gate because let's have a bit of a look at something

17:08.600 --> 17:15.560
if we go a nand a if we input the same variable for both parameters then it's either going to be

17:15.560 --> 17:22.920
zero zero as the input or one one as the input for nand if we input zero zero it returns one

17:22.920 --> 17:29.800
and if we input one one nand returns zero if we nand a variable with itself performs a Boolean

17:29.800 --> 17:35.880
not but that's just to start my friends because have a look at this nand is not and right it's not

17:35.880 --> 17:43.640
and it's nand it's great if we nand a and b together and then we nand that result with itself what we'll

17:43.640 --> 17:51.240
get is the not of the not and we'll get Boolean and we can perform Boolean not and Boolean and

17:51.240 --> 17:56.280
using a single weird little gate here's an interesting fact if you take a truth table

17:56.280 --> 18:01.800
that's output from some Boolean expression if you complement each of the inputs so wherever

18:01.800 --> 18:06.520
the variables are clean you put a not beside them like a becomes not a and wherever there's a not

18:06.520 --> 18:12.040
you get rid of it if you complement each of the variables to this Boolean expression then the

18:12.040 --> 18:17.800
truth table of this function will actually be the reverse of the original truth table it will

18:17.800 --> 18:29.640
be the same thing flipped upside down if we look at the nand gates output we've got one one one zero

18:29.640 --> 18:31.960
this is what the all gate returns but it's upside down

18:39.480 --> 18:46.120
so if you wanted to emulate Boolean or using nothing but nand all you would have to do is

18:46.120 --> 18:52.600
complement the two inputs a and b and we know already that we can complement the inputs using

18:52.600 --> 19:01.160
nothing but nand if we go a nand a nand b nand b wouldn't you know it we've got Boolean or

19:01.800 --> 19:08.920
now that's a little bit strange the original Boolean set is universal you can compute literally

19:08.920 --> 19:14.280
anything at all be it an operating system a video game or weather forecaster doesn't matter

19:14.280 --> 19:20.680
anything at all but you can compute the original Boolean set of operations using nothing but nand

19:20.680 --> 19:28.280
and what does that mean well it means that nand itself is universal can compute absolutely anything

19:28.280 --> 19:34.440
you don't need any loops you don't need any objects no if statements all you need is a long

19:34.440 --> 19:40.680
string of nand this is often implemented in transistors in cpu's and various other hardware

19:40.680 --> 19:46.120
themselves i mean this is how computers work this is how they work absolutely astonishing stuff

19:46.120 --> 19:51.640
shout out to nor as well the nor gate is also universal different expressions of course to

19:51.640 --> 19:57.480
produce the various Boolean operations but nor is also universal i should mention at some point

19:57.480 --> 20:03.320
that it's not even remotely practical to use nand to write something like an operating system for

20:03.320 --> 20:09.400
example if you wanted to write a video game the number of nands in your code if you write code

20:09.400 --> 20:14.200
like this i mean it would be absolutely astronomically large i mean we're not even talking millions or

20:14.200 --> 20:19.000
billions here um it would be like a google plex or like graham's number or something you know these

20:19.000 --> 20:25.800
are completely and utterly impractical but it is interesting to see that uh at least in theory

20:25.800 --> 20:31.080
no matter what the input bit patterns are and no matter what output you need you need nothing

20:31.080 --> 20:38.440
other than nand to uh to generate that output okay and so we can't talk about a lot of this

20:38.440 --> 20:45.480
stuff without mentioning the incredible mr allen turing really one of the most uh magnificent

20:45.480 --> 20:51.560
people ever to walk the earth just an astonishing astonishingly intelligent man of course his life

20:51.560 --> 20:57.800
was was really cut cut quite short with uh you know terrible tragedy but uh his work and influence

20:57.800 --> 21:03.240
survives today in a very very big way so allen turing really wrote the book on what it means to

21:03.240 --> 21:08.440
compute things and he envisaged these machines i think he called them automatons at the time

21:08.440 --> 21:13.480
but they came to be known as uh turing machines and uh what he said was uh if you had a tape and

21:13.480 --> 21:18.920
there was a head that was reading and writing to the tape zeros and ones or using some alphabet

21:18.920 --> 21:24.200
he pointed out that you could in theory write code for this machine to solve any problem out there

21:24.200 --> 21:30.120
and so turing complete means that any set of inputs can be used to produce any outputs

21:30.200 --> 21:34.280
allen turing what a guy uh there's been movies made about him books made about him

21:34.280 --> 21:40.440
yeah so we can uh we can never meet mr allen turing you know we can never say thank you to him

21:41.720 --> 21:48.120
but uh for what it's worth just want to say here on a little youtube video mr allen turing

21:49.160 --> 21:51.960
thanks mate you are amazing

