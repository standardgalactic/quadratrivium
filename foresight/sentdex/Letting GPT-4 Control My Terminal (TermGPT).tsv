start	end	text
0	3440	Giving GPT-4 full access to my terminal.
3440	7040	For some of you, you're way too excited about the prospects of such a thing,
7040	9680	and this probably scares the heck out of many others of you.
10240	12880	The idea is actually pretty simple and safe.
12880	20560	We're really just trying to make prototyping and R&D with GPT-4 and models like it much more fluid.
20560	25120	As it stands right now, you might go to the chat GPT UI or some other chat UI
25680	29520	and ask it for something like a matplotlib graphing example.
30000	33520	You'll wait for the generation, then you'll copy and paste it into an editor,
33520	36160	and then run it, and then maybe then you'll ask for some changes,
36160	39600	more weight, more copy and pasta, and so on.
39600	43840	What I want to do instead is eliminate a lot of the sort of waiting
43840	49600	and going from prompt to result, and I really want to just make this as quickly
50320	55920	happen as quickly as possible, as well as require as little effort as possible.
55920	59280	While still reviewing, what the model actually wishes to do
59280	61600	before allowing it to do that.
61600	65120	We can even do the edit to dark theme too in this way.
65120	68400	For something so simple as just a matplotlib example,
68400	74160	these are fairly minimal time savings, although I think the effort is still pretty low comparatively.
74160	78960	But you can also quickly see that we issued one prompt and then we waited for GPT-4
78960	83520	to generate all the commands at once, each of which would have been a separate kind of
83520	86880	manual back and forth for us, especially if we hit some sort of error,
86880	89120	or we're just waiting for something to happen.
89120	94400	But instead we can review and run all of the commands in one go.
94400	99280	As we continue to ask for more complicated things or even projects that might require
99280	103760	multiple files or even installations of packages in setting up an environment,
103760	108000	or even as we want maybe to modify those files,
108000	112480	this sort of structure can wind up saving us a dawn of time and energy.
112480	115280	So let's see some more fancy examples.
115280	118240	Imagine that you found some sort of model on HuggingFace,
118240	121840	like this code completion language model from Replit.
121840	126080	That's very lightweight, and you'd like to make a demo with it by implementing
126080	129680	the model into some sort of locally hosted web page
129680	135680	with a text form input for the prompt and then some logic to display the output,
135680	136880	you know, the continued text.
136880	141440	Some very common use case for this particular model.
142240	147840	So probably GPT-4 really first needs to know what model do we want to use,
147840	152640	and then maybe do some light reading on the model's page to understand a bit about,
152640	155280	you know, how to actually work with this model.
155920	160560	Temp GPT doesn't have any web parsing ability built in,
160560	165040	but it can program for us, and we can certainly parse with a program.
165040	169600	So we can start off by asking Temp GPT to do just that for us.
169600	172800	And it does this first by installing beautiful soup for Python,
173440	178720	making the directory we asked for, and then writing some web scraping code to get the text
178720	182720	from that page, and then saving it to the text file that we requested.
182720	188640	We can then use Temp GPT to read that content.text file and create a web app for us that demos
188640	190000	its abilities.
190000	195040	We did hit an error along the way, which I just copy and paste to Temp GPT both times,
195040	196400	and it is fixed.
196880	201040	This is one thing I'm considering fully automating, and I'm trying to do that
201600	208560	by allowing Temp GPT to read the terminal outputs to determine if more commands or changes
208560	211280	need to be made, if an error is at least detected.
211840	217120	The error and suggestion in the error text here could have been ingested by Temp GPT
217120	222400	to easily implement and fix not really much different than us copying and pasting the error
222400	222960	ourselves.
223600	229440	Anyway, after reading the error, Temp GPT finds a way to remedy the problem and our program
229440	230000	works.
230000	235120	This has been extremely minimal with effort compared to what I would have done,
235120	240320	even if I was either traditionally doing this by hand or even via the chat UI for chat GPT.
240880	245440	And we can definitely do this in an even more like less clunky way.
245440	247760	Speaking of which, how about a web parser idea?
247760	252800	Can we use Temp GPT to modify a pre-existing project?
252800	253760	Absolutely.
253760	259520	Might we actually use Temp GPT to modify itself to add something like a web parser?
260160	266080	Here, I ask Temp GPT to implement a web parsing feature similar to my file reading feature,
266080	271440	and it modifies multiple areas of the Temp GPT script to do this.
272000	276000	Testing this feature, we can ask Temp GPT to parse some web page and then save a summary
276000	277120	of that text to file.
277120	282000	For example, let's parse the readme page from GitHub for TensorFlow and see if GPT-4
282000	285600	can summarize it for us into one sentence about what TensorFlow is.
286320	292000	In this case, though, it is plausible that GPT-4 could also just have used its own underlying
292000	293440	knowledge of TensorFlow.
293440	299280	For example, we could just outright ask GPT-4 about TensorFlow without any other context,
299280	302240	and it could summarize into one sentence.
302240	308000	Instead, let's ask about something newer, so we could ask about stable studio from Stability AI.
308000	313600	Asking GPT-4 via the chat UI, and it looks like this time GPT-4 doesn't actually know,
313600	314320	which makes sense.
314320	320320	This is relatively new, and GPT-4's knowledge stops in late March or something like that.
320320	323840	So then we can go back to our example, parse that readme, and get a good summary of it.
323840	328720	Okay, so those are just some really quick examples of what's possible, and to be honest,
328720	334000	this has all just been kind of my first attempts as I'm trying to kind of make this happen, as
334000	338720	this is a common, at least personally workflow for me, and I really just wanted to stop,
338720	344080	you know, highlighting or clicking copy code, paste, run, copy some error, go back, like all
344080	348960	this like back and forth was getting very old, and I really just wanted to come up with a solution
348960	353040	that would just automatically kind of do these things for me, execute the commands for me,
353040	353600	all of that.
354320	359680	So this is really my first run through, and there are for sure going to be better ways to do
360400	365120	the things that I'm doing here, and I definitely there's lots of things that we could build on,
365120	366720	and I'm going to be hosting this code.
366720	370960	So if you have ideas or things you want to try, feel free to fork or submit a poll request or
370960	371680	anything like that.
371680	375280	So with that, let's go ahead and dive into the code and see how everything is working under
375280	375760	the hood.
375760	379360	All right, so here with the code, let's go ahead and run through how everything works.
379360	381680	So first, we've just got a bunch of imports.
381680	386480	Open AI for the API, of course, Colorama to make things pretty, time for a sleep
387120	387760	context.
387760	390160	This is how I'm setting the pre prompt.
390160	394240	We will come to that in a moment, but for now, that's just that's it's the pre prompt
395200	396160	sub process.
396160	400240	This is for attempting to execute commands and get their output.
400240	401520	I'm still struggling with this.
401520	404720	Maybe someone can help me figure out what the heck why this doesn't work.
404720	407360	I'm sure it's probably some super simple logic problem.
407360	413920	But anyway, read for regular expressions, requests and beautiful soup for the web parsing
413920	416960	capability that term GPT actually added for itself.
418320	425520	Again, and this actually isn't really all that required since we term GPT can already
425520	426800	write a web parser.
426800	431120	But the real kicker here is, you know, it could also write code to open up a file.
431120	435600	But what you want to be able to do is read that information into context.
435600	440480	So doing that, I think still kind of requires these features, but I want to kind of clean
440480	444480	this up and quite possibly make it a little more dynamic.
444480	450400	So for example, like pulling from a website, do you really just want the paragraph text?
450400	454880	Do we want to also handle for JavaScript that happens to populate things?
454880	458640	You know, so like this is a really basic example, but this won't get you very far.
458640	461840	So anyway, I'm still kind of thinking about how I really want to do that.
461840	464480	But anyway, moving along, the open AI key,
465280	467600	really all the open AI stuff, I've got a video on that.
467600	470720	I'll try to remember to put a link in the description for the basics of working with
470720	471440	that API.
472400	474800	But anyway, that's where our key is debug.
474800	482160	This is just for a few extra print statements, just to mostly for outputting the full context
482160	486960	every time I query GPT for just because that'll tell you for sure what exactly you're sending
486960	488000	and getting back.
488000	491680	I find that to be the biggest amount of information that you don't always want to see.
491680	494080	But if you're having a problem, you probably want to see that whole thing.
494080	497520	So anyway, moving along, message history is that terminal commands.
497520	500560	That's just like the from the context that initial stuff that comes in.
502400	507760	Then we have the regular expression pattern for the sort of functionality of reading a file
507760	509200	or reading a website.
509200	510480	So this is just read a file.
510480	511920	This is W for website.
513200	514320	It's just going to follow that.
514320	520480	Again, we really could use large language models to also parse this out and it wouldn't
520480	522800	even need to be like super structured in any way.
522800	527760	It could just read some text and then determine is there a file that should be read?
527760	529920	If yes, read that file, add that in.
529920	532400	So you don't necessarily have to do it this way.
532400	537440	Again, more on that and the context and all that stuff in a little bit because eventually
537440	539600	I would like to do this without using open AI.
539600	540960	I'd like to use an open source model.
540960	547200	So I just don't want to get too deep into prompt engineering with GPT for when I'd like to
547200	553520	I'm kind of like holding out for a really solid open source model with a solid license.
553520	554240	So no llama.
555360	556960	Anyway, moving on GPT query.
556960	562880	So this is pretty much nothing new since the GPT for tutorial.
562880	566560	So again, if any of this is confusing to you other than maybe the color Rama stuff,
566560	572560	this just sets a color sets a styling basically does the text whatever and then resets it back
572560	572960	to normal.
572960	575680	So that's just that's just typical color Rama stuff.
576400	581360	But anyway, if the debug is true, we are sending the entire message history,
581360	584800	which is the full context that we're sending off to GPT for.
584800	588160	So if anything's not working the way we're expecting, that's the first thing that we're
588160	588560	going to do.
588560	594400	So for example, reading the console outputs like trying to get the return on in the console.
595840	599920	It doesn't give the most recent command no matter how hard I try.
599920	601520	So I don't know.
601520	605360	At first I thought it was while I'm hitting errors and I was thinking the error is causing
605440	606320	my problem.
606320	609760	But I'm pretty sure I'm handling it such that you would still you should still capture the
609760	610000	error.
610000	611360	But for some reason I'm just not.
611360	614400	So anyway, moving along.
614400	618880	So this is just a query GPT for API extract paragraphs.
618880	624240	This is the code that GPT for slash term GPT wrote and modified into our script for us.
625120	627760	Just simply reads a website grabs all the paragraph text.
627760	628960	So really, really basic.
628960	631600	Again, I think this should be a little better.
633040	634240	But moving along.
634240	636160	So then we've just got some pretty colorama stuff.
636160	637440	Welcome to term GPT.
638240	643200	It just tells you kind of the point of term GPT is just to make prototyping faster.
643200	644720	Not a whole bunch of other fancy stuff.
644720	647200	It's just make prototyping and R&D really quick.
647200	651040	But don't run commands without still being able to review them.
651040	653840	So continuing along.
653840	655760	So there's just some more color color stuff.
655760	657120	You've seen what it outputs already.
658080	662160	So then we get the input whatever the user wants to, you know, put in the command.
662160	664480	And then we have these very simple ones like clear.
664480	669520	This just clears out that whole contextual history and just resets us back to terminal commands.
669520	673440	We'll talk about we'll show those momentarily output.
673440	677680	This reads theoretically the output from the system basically in the terminal.
677680	680080	What, you know, what was the response back to that terminal?
680080	682000	What was printed out in that terminal?
682000	685840	So if you did hit an error, it would be nice to be able to say output or, you know,
685840	686880	call this command.
686880	690000	And then it would read that rather than you needing to copy and paste in the error.
690000	691680	But again, it's not really working.
691680	693680	So I'm going to copy and paste the error still.
694800	699840	Otherwise, what it's going to do is it's going to look for any matches for do we want to read
699840	702160	any files and it can do any number of files.
702160	707440	And then essentially what it's going to do is either for files or websites that text that it
707440	711040	parses, it's just going to shove it in and just it's going to build that context.
711040	715280	And so it's just going to populate that context with the actual text.
715280	716960	So it just adds it in.
716960	720640	So you'll say I have this file here and then you'll say you'll have like the read command
720640	724400	and it will quite literally say the file name and then the content of the file.
724400	726880	So again, no different than what you would say.
726880	728080	Hey, I've got this Python file.
728080	730640	Here's the code copy, paste you paste in the code.
730640	732000	This is the same exact thing.
732000	734320	It just builds that context for me.
734320	737680	So once we have that user input, which is going to be, you know,
737680	742000	please help me make a flash website or please help me do, you know, whatever it is,
742000	745040	we have that user input, we're going to send that off to GPT.
745600	748720	And we're essentially going to wait until GPT is done.
748720	750160	So what does that mean?
750160	752240	So now it's time to go to our context.
752240	759360	So this is the pre-prompt that I'm using to force GPT-4 to behave in the way that I want.
759920	766160	So essentially, this is all sent off and this is how the program begins.
766160	769920	So we're starting off by just telling GPT-4.
769920	772800	Let me add word wrap real quick, make this a little easier on us.
773360	776000	We're saying, as if I had told it, you know,
776000	778480	give in text input from a user looking to do programming,
778480	782720	help me build a series of console commands that will achieve the goals of the prompt.
782720	789040	Your responses will come one command at a time where each response is just the command
789040	790000	and nothing else.
790000	794080	When ready for the next command, the user will say next, all camps next.
795040	797360	And you will respond with the next command.
797360	801360	When we have reached the end of console commands, respond with done.
801920	805840	And then you will do it again with some new input from the user.
805840	807840	If you understand, say okay.
807840	811120	And again, we're just forcing the assistant here, you know,
811120	813280	to think in historically it said, okay.
813920	816720	And then what I'm doing is a one shot kind of example.
817440	822080	I did find GPT-4 to be pretty good at following this command,
822080	825680	but very often it's still added commentary to the commands and all that.
825680	829680	And yes, we could use literally a large language model to parse out the command still.
830320	831120	I don't like that.
831120	833040	So I wanted to do at least a one shot.
833040	836080	I thought maybe it might take more, but a one shot gives us an opportunity
836880	838960	to show it even more basic stuff.
838960	842640	So like for example, in this case, we're using cat to write to these files.
842640	845200	But there's lots of ways that this could have been done.
845200	851200	But given all of the huge variability of stuff that can happen inside of a script,
851200	856960	it would likely break many of the methods that might be used to populate a file.
856960	858800	So this one is just the one that works.
858800	863200	So it allows us to kind of still kind of show really what we're looking for.
863200	869120	So for example, with such a basic thing as show me a basic flask web dev example with templates,
869120	874880	right? And the first command, in this case, we're making this up.
874880	878480	We're showing GPT-4 how we want it to behave.
878480	884000	So we're saying if someone asked this, here's an example of the sequence of events that should occur.
884000	885840	First, you're going to need to pip install flask.
886480	888640	And then the user is going to say, next.
888640	893440	And then GPT-4 is going to respond with, you're going to want to make a directory basic flask app.
894080	902720	Next, so already we're trying to get it to kind of put this into specific project folders.
903440	908720	Then what it's going to do is actually write and then into that directory and then app.py.
909680	914640	It's going to add just a very basic app.py with some template examples.
914640	918720	Thank you. And then, okay, that's what it says.
918720	920160	And then the user, next.
920160	924480	And then it wants to make a template stir, add that index.html.
924480	925280	Next, blah, blah, blah.
925280	930160	You get the idea all the way down to actually running that app.py.
930160	931120	The user says, next.
931120	933360	And actually we're done because we've run the app.
933360	937440	So it's just a really simple example that we're showing GPT-4.
938000	940160	This is how I want you to respond every time.
940160	944880	And then if that way, if the user did happen to say clear or whatever,
944880	947920	we just reset right back to this context and continue on.
947920	952800	But I found that you can generally keep going pretty far and be totally fine.
952800	955840	But if you are experiencing weird things, you would just clear it and start over.
956400	960960	But anyway, coming over here, while not GPT-done.
961520	966080	So GPT-done starts as, where the heck are you here?
966080	967600	Because we haven't started a new input.
967600	969920	So we're going to start as GPT-done equals false.
970560	972880	So then what's going to happen is, as long as that's true,
972880	976080	what we're going to do is we're going to wait for the next command from the user.
977040	979840	And essentially, it's going to just inject that.
980560	983120	So we don't need to say next.
983120	988080	We're just going to automatically tell GPT-4 next in the script.
988080	993120	And we're just waiting until we literally see reply-content.lower.
993120	996320	The only reason I'm doing this, GPT-4 always did an all caps done.
996320	997120	It was good.
998240	1002640	But chat GPT, for example, I was just trying between the two of them to see if we save some money.
1004320	1006560	It would sometimes lowercase, sometimes add a period.
1006560	1007840	So I was trying to handle for that.
1007840	1012000	But again, GPT-4 really follows this very well.
1012000	1020080	I'm sure I could come up with ways to structure things such that chat GPT or GPT-3.5 works.
1020080	1023680	There's no reason in my head that this couldn't be done with chat GPT.
1023680	1026400	But GPT-4 is just way better than chat GPT.
1026400	1028480	So anyway, moving on.
1030400	1033200	So if it has reached a done, then we set done to true.
1033200	1034880	Cool. And we break out.
1034880	1039040	And then essentially, all the way up to this point, we've been, every time we get a command,
1039040	1043360	we've been adding that command to a list of commands right here.
1044080	1047760	Once we have that list of commands, you could have been theoretically running them,
1047760	1054080	getting the return, and plausibly adding this to the context or something just to see,
1054080	1055360	did you hit an arrow along the way?
1056080	1059360	I think that's a mistake because either you're going to have to sit there and keep clicking
1059360	1061200	like next or saying next or whatever.
1061920	1064160	Or you're going to be blindly running commands.
1064160	1067280	And you're probably more likely to just kind of blindly just hit go, go, go.
1068080	1069280	And I don't think that's a good idea.
1069280	1071600	So we're going to build that whole list.
1071600	1076800	And then we're essentially going to iterate through that whole list, printing it out in bold red,
1077520	1080640	making it clear what the commands are that are going to be run.
1081520	1087360	And then if we want to actually run those commands, then we are going to go ahead and
1087360	1088800	iterate through all of them and run them.
1088800	1091920	And this is where I'm attempting to get the actual output.
1091920	1094960	This does work all the way up to, I believe, the last output.
1094960	1100000	I need to look a little deeper into that and see if there's got to be something wrong with
1100000	1100720	my logic or something.
1100720	1104160	Like I feel like this should work, but for whatever reason, it's just not working.
1104880	1111600	Anyway, if the user puts in anything other than Y here, it just doesn't run the commands.
1111600	1112080	And that's fine.
1112960	1118560	Sometimes still, it does suggest to you, it might still give you some text,
1118560	1121600	especially I found that to be true with the console output.
1121600	1124240	It'll just say, oh, I didn't find any errors or something like that.
1124240	1126080	So it doesn't say done, like it should.
1126080	1129200	But anyway, that's all there is to it.
1129200	1133280	All of the power of this, this is all just a bunch of stupid logic,
1134000	1136400	really around what is the pre-prompt.
1136400	1142320	And what we can do with a pre-prompt is, I mean, there's essentially infinite pre-prompts
1142320	1143840	that we could theoretically use.
1144720	1148240	There are better examples plausibly that we could show it.
1148800	1155280	And there's more capabilities that we could show it or teach it or even just kind of that might
1155280	1156160	show up.
1156160	1162880	So even given this really basic example, I have found term GPT using GPT-4 to be
1164560	1165360	really impressive.
1165360	1168480	It really hasn't let me down on any task yet.
1169440	1174960	Certainly, there's really nothing that GPT-4 could do for me via the chat UI that I haven't
1174960	1177200	been able to just do via term GPT.
1178000	1180080	And it's just been so much easier.
1180080	1183360	And again, I made this really for myself and I'm just sharing it with people.
1184320	1186480	And it's for sure a work in progress.
1187200	1193280	There are some relatively new open source large language models that I'd really like to see
1193280	1194960	can they fill in this gap.
1194960	1199440	Because like I said, even chat GPT is weak-ish at this.
1199440	1206160	Again, I think I could come up with prompts that chat GPT or GPT-3.5 rather could be successful with.
1207120	1210720	So I just, I don't want to put in a bunch of time making chat GPT work.
1210800	1215280	I'd rather it be some sort of open source model with a permissive license.
1215280	1217600	So anyway, stay tuned for that.
1217600	1219680	And again, I will put everything up on GitHub.
1220400	1226000	Feel free to make a fork or whatever or make pull requests and just kind of tinker with this.
1226000	1227120	I think this is kind of cool.
1227120	1229440	I like the idea of going back and forth like this.
1229440	1236160	And just doing the R&D with GPT-4 but just removing all of that extra effort.
1236160	1238080	It's been, it's been really fun using it.
1238080	1240560	So anyway, hopefully you guys will enjoy it.
1240560	1244880	If you've got questions, comments, concerns, whatever suggestions, feel free to leave them below.
1244880	1248080	Otherwise, I will see you all in another video.
1248080	1252640	If you've ever wondered and wanted to know more about how neural networks actually work,
1252640	1257600	including the optimization and fitment, rather than just simply calling some method,
1257600	1261440	then you might be interested in checking out the neural networks from scratch book
1261440	1263280	by myself and Daniel Kukiawa.
1263280	1267680	The book can be had in the form of an ebook PDF, softcover or hardcover.
1267680	1270000	And we ship for free worldwide.
1270560	1273840	Also, the physical books just come with an ebook copy.
1273840	1278560	All copies are in full color, which helps because there's a lot of code syntax highlighting
1278560	1281520	and lots of charts and diagrams to help convey the principles.
1282080	1286640	Also, almost all of those charts and diagrams have QR codes and links that take you to
1286640	1289200	animations to help further illustrate the concepts.
1290080	1294400	This is truly a real neural networks from scratch,
1294400	1299120	teaching everything from the forward pass calculation of laws, back propagation and
1299120	1299840	optimization.
1299840	1303680	The only math that you're expected to know coming in is basic algebra.
1303680	1306880	The rest is taught by us in the book, step by step.
1306880	1310800	Everything is shown and explained in the book first logically, then mathematically,
1310800	1314400	then via raw Python code, no third party libraries.
1314400	1316880	And then finally optimized via NumPy.
1316880	1320960	And this is for every step of the way, building and training actual neural networks
1320960	1326400	for a fully fundamental understanding of neural networks and how they work from scratch.
1326400	1331360	If at any point you're lost or confused, all copies of the book also grant access to a Google
1331360	1337600	Docs version of the book, where you can ask your questions in line with the actual text itself.
1337600	1341200	This is an incredible project that I'm extremely proud of to share with you all.
1341200	1345120	We've sold over 13,000 copies to students all over the world.
1345120	1347680	If you're looking to take your knowledge of deep learning to the next level,
1347680	1352400	or if you're just looking to start that journey, I can't imagine a better way.
1352400	1358720	So to learn more and buy yourself a copy, you can head to nnfs.io.
