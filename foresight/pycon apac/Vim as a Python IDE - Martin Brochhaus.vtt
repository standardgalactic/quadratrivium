WEBVTT

00:00.000 --> 00:11.840
Okay. Thanks. Starting my clock. I'm going to talk about Vim today, so I already changed

00:11.840 --> 00:17.680
my clothes, as you can see. Just a quick, quick, raise your hands. Who's using Vim for

00:17.680 --> 00:26.000
development? Okay, that's almost the majority. Who's using traditional graphical IDEs for

00:26.000 --> 00:31.080
development? All right. Okay, so there are at least five people in the room that might

00:31.080 --> 00:36.920
be able to learn something here. All the rest, you will probably know what I'm talking about.

00:36.920 --> 00:42.080
Where do I come from? So to put this into perspective somehow, I guess when I was 12

00:42.080 --> 00:47.160
or so, I started writing my first program in basic, I think, on an Amiga or C64, I can't

00:47.160 --> 00:52.480
remember. Later, when the internet arrived at our home, I started doing PHP and using

00:52.480 --> 00:58.480
Dreamweaver. At university, they taught us Java and we used Eclipse. My first job, I was

00:58.480 --> 01:03.840
using C-Sharp in Visual Studio for a couple of years, and my second job, I used Python

01:03.840 --> 01:10.880
and Wing IDE, which I enjoyed much more, by the way. Last year, when I came here to PyCon,

01:10.880 --> 01:16.400
I figured that lots and lots of very smart people were actually using Vim. I already

01:16.400 --> 01:20.680
knew about Vim, obviously, all the time, but I always thought that it's much too complicated

01:21.160 --> 01:26.320
and I will never have the time to learn this and it will kill all my productivity for months

01:26.320 --> 01:32.160
or so. But when I saw that, I don't know, guys like Jacob Kaplan, most of what, are using

01:32.160 --> 01:36.400
Vim all the time and are being obviously very productive with it, I thought maybe I should

01:36.400 --> 01:46.000
give it a try. It was actually PyCon's fault that I started using Vim last year. Thanks

01:46.000 --> 01:50.560
to you all. Why should you care? I mean, most of you care anyway, so I probably can

01:50.560 --> 01:56.360
skip the slide, but obviously, Vim is cross-platform, so if you're using Ubuntu, you can use Vim.

01:56.360 --> 02:01.120
If you're using macOS, you can use Vim. At home, I've got several laptops and whatever

02:01.120 --> 02:06.000
I feel like. Every day, I can just open my laptop and my Vim with my Vim config is there

02:06.000 --> 02:09.520
and it just works and it looks the same and feels the same everywhere. It's standard on

02:09.520 --> 02:13.840
most systems, so for example, when I'm doing web development, I SSH into my web servers

02:13.840 --> 02:18.840
and you can be sure that Vim is installed there, so it's quite good when, I don't know,

02:18.840 --> 02:26.240
there's an emergency and you have to SSH into the machine. You want to know that you have

02:26.240 --> 02:30.760
a good editor on that server that you can use and that you can use in a fast and efficient

02:30.760 --> 02:34.240
way and you don't want to screw up your files because there's an editor that you usually

02:34.240 --> 02:39.000
never use because you are used to a graphical IDE. It's very fast. I mean, when I remember

02:39.000 --> 02:44.280
back the times when I was using Eclipse, the startup time, I was usually leaving my desk

02:44.280 --> 02:50.560
and getting a cup of tea or so. Vim is almost instantaneous, obviously. It's good for your

02:50.560 --> 02:56.360
health, sounds funny, but I can testify it's true. When I was programming for like 10 hours

02:56.360 --> 03:03.640
a day with a classical IDE and moving back and forth to the arrow keys to navigate in

03:03.640 --> 03:10.120
the text file, it actually hurts. When I started using Vim six or seven months ago and I got

03:10.160 --> 03:17.080
this idea of using HJKL for the movement only, I was really unbinding the arrow keys so that

03:17.080 --> 03:24.520
I must force myself and hammer it into my muscle memory as fast as possible. It actually helps

03:24.520 --> 03:29.360
but because you have your fingers on the central row when you are typing with 10 fingers, they

03:29.360 --> 03:34.600
are naturally resting there and you can just switch to movement mode and use HJKL to move

03:34.600 --> 03:38.200
and switch back to insert mode and you don't have to move your hand at all and it makes

03:38.240 --> 03:43.800
a big fat difference when you work a whole day and when you code a whole day. It's highly

03:43.800 --> 03:47.720
customizable, of course. It's great for pair programming which is something that I want to

03:47.720 --> 03:53.960
demonstrate if we have enough time at the end. Yeah, you can work anywhere, anytime. It's interesting

03:53.960 --> 04:02.360
when at my last job we basically had the opportunity to get any hardware that we wanted so I got

04:02.520 --> 04:09.800
myself a big fat 30 inch screen and at that time I thought that dual screen setup is the most

04:10.440 --> 04:14.600
awesome thing in the world and it makes you so much more productive but I realized that since

04:14.600 --> 04:20.920
I'm using Vim, I use screen or T-Markz as a screen multiplexer so I can switch between tabs

04:20.920 --> 04:25.960
quickly so suddenly I have lots and lots of windows and desktops at my hand, just a fingertip

04:26.040 --> 04:33.000
away and I have actually not used my second screen for six months or what? I don't use it anymore

04:33.720 --> 04:38.920
so I can just go, I can code on an airplane, I can code on a beach, I can code anywhere

04:39.560 --> 04:43.400
and I don't need to have an office environment or something, I just need my laptop and internet

04:43.400 --> 04:49.000
connection. Another cool thing that I came up with when I thought about this slide yesterday is

04:49.000 --> 04:53.720
you can change jobs and keep your tools, like maybe today we are coding in Python,

04:53.720 --> 05:00.040
maybe tomorrow we are coding in Haskell or C++ or whatever and probably Vim will have a plug-in

05:00.040 --> 05:04.040
that suits that new programming language that we will use in the future as well so

05:05.320 --> 05:09.640
we will probably, I mean if you use Vim, you will probably never have to change your editor

05:09.640 --> 05:17.800
ever again. By the way, all this is probably also true for Emacs, I guess they are quite similar

05:17.880 --> 05:21.480
but I've never tried that one. So what am I?

05:23.400 --> 05:34.040
Pardon? Okay, so to me what do I need in order to say that yes this thing is a workable IDE,

05:34.040 --> 05:38.760
I want to have fast access to all files, I mean those files that are currently open maybe in

05:38.760 --> 05:43.720
several tabs or splits and files that I know that are in the project, I want to have a nice color

05:43.720 --> 05:48.120
scheme and I want to be able to change it quickly, I mean some editors give you a good way to change

05:48.120 --> 05:52.760
the color scheme but maybe there's no standard file format or what so you cannot really exchange

05:52.760 --> 05:58.040
the color scheme easily, it's pretty easy with Vim. I want to have syntax highlighting for all

05:58.040 --> 06:03.720
common files that I will use which are in my case Python, HTML and CSS files and JavaScript files.

06:05.480 --> 06:10.440
I want to have static code analysis, I mean with Python everybody knows we have this great

06:10.440 --> 06:17.800
PEP8 document which tells us how to code beautifully and there are tools for checking

06:17.800 --> 06:24.040
like Flake8 or Pylint or PEP8, there are tools that can check your code against the PEP8

06:24.040 --> 06:28.280
specifications and they will highlight if there are like I don't know unused imports or

06:28.280 --> 06:33.800
unused variables and stuff like that or there's a space too much or too many empty lines at the

06:33.800 --> 06:37.800
end of the file or something like that. Code completion obviously is the main thing why

06:37.800 --> 06:42.600
people use IDEs and I will show you how to get that with Vim. Go to definition is another cool

06:42.600 --> 06:47.240
thing like when I'm using Django the framework is so big it has so many classes and modules and I

06:47.240 --> 06:52.840
usually although I know it by heart almost I usually cannot remember what parameters the function

06:53.800 --> 06:58.360
accepts for example and I don't want to go to Google or to the Django docs all the time and

06:58.360 --> 07:03.080
look it up so just jump to the definition and look at the actual implementation of the method

07:03.080 --> 07:08.520
and see what kinds of parameters the function allows and then you will also see the doc string

07:08.520 --> 07:14.120
and yeah it's quite useful. Refactoring is something that this setup that I'm going to show is able

07:14.120 --> 07:19.560
to do but I have actually never used it so I cannot demonstrate it. I somehow feel that using

07:19.560 --> 07:26.200
refactoring with a dynamically typed language like Python is I don't know a bit it feels dangerous

07:26.200 --> 07:33.320
to me I wouldn't trust the system. Debugging I think it can be done from within Vim but I usually

07:33.320 --> 07:39.160
don't do it I use iPython and IPDB and just open another terminal window and I will insert break

07:39.160 --> 07:45.800
points using Vim with a short key and then open another terminal window and start my program and

07:45.800 --> 07:52.440
just wait until the breakpoint is hit and inspect the scope which I will demonstrate here as well.

07:52.680 --> 07:59.800
Okay so we have four topics here. I will show you how to install Vim. I will show you how to

07:59.800 --> 08:05.000
configure it for the first time starting from scratch. I will show you how you can manage

08:05.000 --> 08:10.360
your plug-ins because the standard way of downloading it, unsipping it and putting the

08:10.360 --> 08:14.520
correct files into the correct folders is quite messy there's a better way to do it and if time

08:14.520 --> 08:23.320
is left I will show how you can use Vim for pair programming with Tmax. Okay installing Vim is

08:23.320 --> 08:30.920
pretty simple. This is a script that I always execute whenever I set up a new server for my

08:30.920 --> 08:38.200
web project or when I reinstall my own system just clone the source and the important bit is here

08:38.280 --> 08:46.360
this enablepython interpreter part which you will need because the the Python mode plug-in is written

08:46.360 --> 08:52.680
in Python and so Vim has to be compiled with with Python being enabled and you know I used to install

08:52.680 --> 08:57.400
it into my home opt Vim folder so I don't disturb any other users on the system and that's it basically

08:57.400 --> 09:04.120
and when you've done that you can check if everything has worked by by just typing Vim minus minus

09:04.120 --> 09:10.600
version and you will get a lot a lot of stuff and you should search for the plus Python flag it will

09:10.600 --> 09:15.080
tell you that it has actually been compiled with Python support sometimes it goes wrong and when

09:15.080 --> 09:21.000
there's minus Python you know that you did something wrong and you should try again um yeah so that's

09:21.000 --> 09:28.600
installing Vim should take around five to eight minutes or so um your first .vimrc file so when

09:28.600 --> 09:35.480
when you start using Vim people usually recommend or advise you to um to start from scratch don't

09:35.480 --> 09:40.920
take a fully brown Vim file from from from some hardcore hacker or so there's so much stuff inside

09:40.920 --> 09:46.760
you will get lost better start from scratch and and whenever you feel that oh I want to do this

09:46.760 --> 09:51.560
how can I do this just google for it go to the Vim IRC channel there are super many super smart

09:51.560 --> 09:55.000
people inside and they are extremely helpful whenever I ask a question I get an answer within

09:55.000 --> 10:00.840
two minutes um vimbits.com is a pretty cool website where it's like hacker news people can post their

10:00.840 --> 10:06.120
their snippets and people can upvote and downvote it so it's like every month or so I just go there

10:06.120 --> 10:11.160
and see what's what's hot and and what's bubbling on top and you usually can find lots of crazy ideas

10:11.160 --> 10:18.360
you wouldn't you would never think of yourself um and I can only advise you to save your .vimrc

10:18.360 --> 10:24.520
file on on your own .files repository on github many many programmers do that and it's a great way

10:24.520 --> 10:30.680
to get inspiration just like for example I was talking to him right now and and and and he was

10:30.680 --> 10:34.680
showing me some great tricks that I didn't know about and I immediately asked him is your .vimrc

10:34.680 --> 10:40.040
file on github he's like yes of course so I know what I'm going to do when I'm home today um yeah

10:40.040 --> 10:47.240
so let's do it I I just deleted my own .vimrc file and and created a new one um

10:49.400 --> 10:53.880
so when you start Vim for the first time it will look like crap it looks just like the terminal

10:53.880 --> 11:00.280
doesn't really look like an editor um so let's try to make this thing beautiful and look like an IDE

11:00.280 --> 11:07.800
the first thing I usually do is um I put this buff write post thing here so I don't have to

11:08.280 --> 11:13.400
close and reopen the file all the time when I do changes from now on when I when I save the file

11:13.400 --> 11:18.440
will be uh reload it's like doing source on the terminal for when when you change some your bash

11:18.440 --> 11:23.320
rc file you do source bash rc and then the changes will happen so now we will do the same when we

11:23.320 --> 11:30.680
save um the standard behavior of the clipboard is something that I never really understand

11:31.880 --> 11:38.280
so when you do clipboard equals unnamed it's basically the way you would expect it to be

11:38.280 --> 11:41.720
with any other editor so when you copy something from a website you can just paste it into Vim

11:41.720 --> 11:46.680
and when you select and copy something inside of Vim you can just paste it somewhere else

11:46.680 --> 11:54.920
which wouldn't work right away then you can enable the mouse so now when I press the option key I can

11:54.920 --> 12:02.120
use the mouse cursor to yeah to do what the mouse cursor is supposed to do and this backspace equals

12:02.120 --> 12:07.000
to um it's quite useful because the standard behavior of the backspace key is a bit weird I

12:07.000 --> 12:12.920
don't actually know what it what it does normally maybe somebody here can explain it to me uh so

12:12.920 --> 12:28.280
when I oh shit sorry um I will comment this out and save again so now let's say I'm typing something

12:29.000 --> 12:32.200
and then I'm typing something more and I want to press the backspace key

12:33.000 --> 12:39.800
oh no it works okay usually um maybe some other settings have fixed this behavior as well but

12:39.800 --> 12:44.440
usually when I try to use the backspace key it just stops there is some text in the line I'm

12:44.440 --> 12:48.440
in insert mode and I'm pressing backspace but it just stops I don't know why this happens and this

12:48.440 --> 12:57.240
setting this BS bullshit equals to will make will turn the backspace key into a real backspace key

12:57.880 --> 13:01.800
I like to remap my map leader key the map leader key is the special keys because the

13:01.800 --> 13:06.120
the keyboard is so full with shortcuts already that they ran out of keys so the map leader

13:06.120 --> 13:12.200
key gives you the possibility to bind another full set of keyboard keys um because when you

13:12.200 --> 13:17.080
press the map leader key them will wait for one second and see if you press any other keys so

13:17.080 --> 13:23.160
suddenly we can press comma and something else to have even more um places to bind stuff to

13:27.080 --> 13:32.520
then okay this is something that I cannot demonstrate right now because the color scheme is not installed

13:33.400 --> 13:40.280
um saving as you have seen I usually have to you have to type call on w to save

13:40.840 --> 13:46.360
I don't like that I it's like I was using ides for so long I I just have the habit of typing

13:46.360 --> 13:52.360
and pressing ctrl s for save okay I can't press ctrl s here in vim but I remap it to ctrl z and

13:52.360 --> 13:58.840
now it's already in my muscle memory again so from now on with these settings in whatever mode I am

13:58.840 --> 14:05.640
I can just press um ctrl z and it will save very convenient the same thing is true for quit usually

14:05.640 --> 14:13.560
you would have to type call on q for quitting I don't like that so I like leader e for quitting

14:13.560 --> 14:18.280
it's much faster to me but this is like this is the reason why you should start from scratch because

14:18.280 --> 14:23.880
you will probably have different ideas of where all these bindings should be for you for yourself

14:24.840 --> 14:33.800
um okay you can have tabs and splits in vim and you want to be able to easily navigate between

14:33.800 --> 14:40.920
them so let me demonstrate that uh when you when you create new tabs it's like this it's just tabs

14:40.920 --> 14:47.960
very normal um but the standard way to navigate is like pressing ctrl w and then um one of the

14:47.960 --> 14:54.120
movement keys for tabs I prefer to press the leader key and then n for going left and m for

14:54.120 --> 15:00.120
going right so the leader key I put it on on comma and m and n is just all next to each other so

15:00.120 --> 15:07.400
it makes it allows me to fast to to to switch between tabs very fast the same is true for splits

15:07.400 --> 15:14.120
so when I have a horizontal split here you would have to press ctrl w j for going downwards into

15:14.120 --> 15:21.240
the uh uh bottom split I I don't see why I should press two keys so I I know I remap that so that I

15:21.240 --> 15:27.720
can just press ctrl j for going down ctrl k for going up or if you have a vertical split you can

15:27.720 --> 15:32.520
press ctrl h and l to go left and right so it's it's basically just like moving around the cursor

15:32.520 --> 15:36.520
just to press the ctrl key then you will be moving around the splits so very convenient

15:36.920 --> 15:45.160
okay um yeah here's a very useful thing that you will probably use when you develop with

15:45.160 --> 15:53.000
python because it's encouraged to have all the imports sorted alphabetically and

15:54.360 --> 16:00.440
vim users will always do this because it's so easy I just bound it to con to to leader s and I can

16:00.440 --> 16:06.280
just select a block of code press leader s and it will it will be sorted alphabetically very nice

16:07.400 --> 16:14.680
um oh yes this one is cool I found this on vimbits.com I can select a block of code and

16:14.680 --> 16:20.600
and then and use the um greater than and less than signs to move the whole block of code usually

16:20.600 --> 16:26.200
you can easily do this this with vim anyways but it will lose its selection so um with this snippet

16:26.200 --> 16:30.600
it will remain its selection so you can press it multiple times yeah

16:31.320 --> 16:40.440
uh okay um this one I cannot demonstrate it right now but it will show trailing white space

16:40.440 --> 16:43.880
usually you don't want to have trailing white space in your code because I don't know when you

16:43.880 --> 16:50.120
submit a a patch to an open source project and most people will have a script that deletes all

16:50.120 --> 16:54.760
white space when they save and when you inserted some stupid white space and the next person is

16:54.760 --> 17:00.040
editing the same file you will end up with lots of diffs where you didn't actually do anything

17:00.040 --> 17:04.040
it's just because the other person automatically deleted your stupid white space so just make

17:04.040 --> 17:08.840
sure you never insert any unwanted white space and this this line here will make sure that

17:08.840 --> 17:16.440
its big fat red block showing you here's white space delete this um color schemes can be installed

17:16.440 --> 17:22.120
easily in I have um all this file is on github so if you want to start from scratch you can clone

17:22.120 --> 17:29.000
this repository um and um do the same that same thing as well sometimes you will find

17:29.000 --> 17:33.400
comments here like this one this will explain how you do actually install a color scheme so it's

17:33.400 --> 17:39.320
just create a dot vim slash colors folder go inside that folder and then download this one

17:39.320 --> 17:49.400
bad color scheme and there you go um syntax highlighting this is something that will not

17:49.400 --> 17:57.640
work when I save so I have to restart this file and now we have syntax highlighting so vim knows

17:57.640 --> 18:06.760
its own syntax for its own configuration file and here are a bunch of settings for now we are

18:06.760 --> 18:12.680
getting into the area of making this more look like an IDE so now we have column numbers and

18:12.680 --> 18:18.840
the 80 characters line usually you don't want to write your Python scripts longer than 80 characters

18:18.840 --> 18:23.320
so there's a very subtle line here I don't know if you can see it it's just a little bit darker

18:27.880 --> 18:35.160
huh thanks and um this one is pretty cool when you when you write a doc string for example

18:35.160 --> 18:41.400
and maybe you don't want to care about um I'm wrapping it correctly and you are writing over

18:41.400 --> 18:46.200
the 80 characters line after that just point the cursor somewhere into that block and press Q

18:48.120 --> 18:51.320
huh why does it not work I'm confused

18:52.280 --> 19:01.720
okay I I entered awesome okay but why does this happen

19:03.400 --> 19:11.880
hmm because I didn't save ah yeah okay okay let's try that again press Q and it

19:11.880 --> 19:18.120
wraps the block of text accordingly so that nothing goes over that line it's not always useful

19:18.120 --> 19:21.800
because like when you have when you're using markdown or restart check text and you have for

19:21.800 --> 19:29.480
example you have bullet lists it doesn't really know that the bullet lists belong under each like

19:30.680 --> 19:37.400
how to explain sorry so it's like when you have bullet lists like this and then this

19:37.400 --> 19:42.360
and you press Q it will destroy your bullet list and put everything into one line so don't use it

19:42.360 --> 19:48.040
all the time but sometimes it can be quite useful um under history of 700 yeah something that I like

19:48.360 --> 19:55.960
um for pison you don't want to use tabs you want to use spaces and you want to use you want to indent

19:55.960 --> 20:03.640
by four um this one is for when you do regular use you use regular expressions for search that

20:03.640 --> 20:13.560
they are case insensitive ah come on this one um it's a bit tricky I don't know if everybody

20:13.560 --> 20:19.720
needs this um vim creates a lot of swap files and and backup files when when you save and I like

20:19.720 --> 20:24.840
to use file system watches so that whenever I save all my tests get executed immediately in another

20:24.840 --> 20:29.000
in another terminal window and the standard behavior seems to be that it creates three or

20:29.000 --> 20:33.720
four file system events and my tests get executed three or four times in a row which sucks so and

20:33.720 --> 20:38.360
with these three settings I got to fix this and when you save it's actually just one file system

20:38.360 --> 20:44.840
event okay so that is about the vim rc now we'll talk about some plugins that will

20:45.640 --> 20:51.320
introduce all this id stuff that I want to have it's it's four plugins I won't I won't say much

20:51.320 --> 20:57.160
say much about them right now I will just show you how they look like um oh yeah when you when you

20:57.160 --> 21:02.360
want to work with plugins within the the standard way is you have to download a zip file or a tar ball

21:02.360 --> 21:06.840
and you have to unpack it and you have to install it into the dot vim folder and then there can be

21:06.840 --> 21:11.320
several different subfolders there can be an ft plugin folder there can be a syntax folder

21:11.320 --> 21:17.080
and each plugin more complex plugins will have so many files that you have to you have to read the

21:17.080 --> 21:20.760
readme and it will tell you like copy this file into that folder and this file into that folder

21:20.760 --> 21:25.640
and it's a big huge mess and for you and especially when you want to get rid of that plugin later on

21:25.640 --> 21:29.960
you can't remember which files did belong to that plugin and in which folders are they so

21:30.600 --> 21:35.960
it's a mess use pathogen instead it's very easy to install you have to create this autoload folder

21:36.680 --> 21:42.280
uh and a bundle folder then download the the pathogen file and that's it and and

21:42.280 --> 21:47.640
insert this call pathogen infect setting here and you are good to go from now on you can install

21:47.640 --> 21:53.640
plugins by just unpacking them into the bundle folder so for example if we want to install

21:53.640 --> 21:59.400
vim power line we will go into the bundle folder and we will just clone the whole power line

21:59.400 --> 22:06.120
repository and usually vim repositories repositories of vim plugins on github are

22:06.120 --> 22:11.320
created in a way that the root folder has the files all in the current in the correct folder so

22:11.320 --> 22:18.200
you can just clone the thing into the bundle folder and it will work okay um so here's a setting for

22:18.200 --> 22:26.840
vim power line you will see when i demonstrate it just a second control p is a plugin for quickly

22:26.840 --> 22:32.760
navigating through files and opening files and python mode is is a very very great project

22:33.480 --> 22:41.240
i think it's a wrapper around uh several other plug vim plugins that deal with python and and

22:41.240 --> 22:49.480
and make vim more like a python IDE so it's it's much easier to just install this one plugin

22:49.960 --> 23:02.920
then several others okay this one is some stuff okay and python folding allows you to collapse and

23:02.920 --> 23:11.240
expand your your whole code so now that i have installed these four plugins let's go to some

23:11.240 --> 23:19.000
test repository so i've created a stupid little demo project here python project um so the first

23:19.240 --> 23:23.720
thing we can see we have code we have syntax highlighting it looks like python code python

23:23.720 --> 23:33.960
code it's it's it looks nice um yeah the folding plugin now i can use f to fold and unfold blocks

23:33.960 --> 23:42.360
of code or i can use uh capital f to fold everything which is quite handy if the file is a bit long so

23:42.360 --> 23:47.960
i don't want to scroll down and then press control d control d control d to go down um i just fold

23:48.040 --> 23:52.360
everything and maybe do a search for the for the function name and i will be i will reach the

23:52.360 --> 24:08.600
code that i want to work on quickly um yeah yeah then you should use my version i don't know it just

24:08.600 --> 24:15.880
works i never have problems with the doc strings yeah when i when i point the cursor here and press

24:15.880 --> 24:19.960
f it will only okay i don't have a class in the syntax but if you would point the cursor at the

24:19.960 --> 24:32.440
class definition and press f it will collapse the whole class uh yeah um functions are too long

24:34.680 --> 24:42.760
okay yeah um there is the i think py lint or or py flag or so has a feature of telling you that the

24:42.760 --> 24:48.040
function is too complex where if you have too many nested if and else things it will say this

24:48.040 --> 24:55.320
function is too complex and usually those functions are also too long okay um one thing about rope

24:56.360 --> 25:00.600
rope deals with all this go to definition stuff and code completion stuff uh when you when you use

25:00.600 --> 25:10.680
it for the first time you should execute rope open project and this will create a dot rope project

25:10.680 --> 25:19.240
folder which contains a config file and in that config file you will find a line about python pass

25:19.240 --> 25:23.800
and here i would insert my the parts to my virtual environment for example when i'm using

25:23.800 --> 25:27.960
when i'm working on jango project i would insert the pass to the virtual environment of that jango

25:27.960 --> 25:34.200
project so that python rope actually knows where jango is otherwise it like code completion wouldn't

25:34.200 --> 25:45.800
work right um yeah so let's try this um no we will try this later so um static code analysis

25:46.600 --> 25:52.600
when i'm when i'm doing stuff like this it will open a quick fix window down here and it will tell me

25:52.600 --> 26:00.360
that i have just inserted invalid syntax very useful uh or for example here it will tell me

26:00.360 --> 26:06.520
there is a variable that is never used or for example if i import something that i never use it

26:06.520 --> 26:11.720
will tell me there's an import that is never used and uh when i go down to this quick fix window

26:11.720 --> 26:17.960
i can navigate through these items and when i press enter it will jump to the actual line that has

26:17.960 --> 26:23.880
the error and so i can quickly fix this error go down to the to the quick fix window jump up here

26:23.880 --> 26:31.640
fix this error as well and and then i'm good to go um yeah code completion very obvious so let's

26:31.640 --> 26:37.320
say i i know there's a method that starts with l and i press control space it will give me all options

26:38.600 --> 26:45.240
that it guesses it it is usually also assumes some python build in functions it assumes variables

26:45.240 --> 26:52.440
that i have defined in this module before or it assumes functions that i have imported by using

26:52.440 --> 26:59.240
the star import for example um okay now control p is the other plugin that deals with opening files

26:59.240 --> 27:04.840
so when i press control p it gives me a list of all files in the project and it has some fuzzy file

27:06.440 --> 27:11.800
file pattern pattern matching logic or whatever so when i know okay i want to open this file that

27:11.800 --> 27:16.840
is called something with u utils or something i just press u it narrows down the results to everything

27:16.840 --> 27:24.920
that has a u inside or maybe everything that has an r o rope okay config rope config there i am right

27:26.040 --> 27:32.360
so you can even um just type down parts of the passes like maybe you know some folder names and

27:32.360 --> 27:36.120
you know some parts of the file name so you just type down some parts of the folder name or some

27:36.120 --> 27:42.920
parts of the file name and you will get the file so let's open utils in a in a new tab for example

27:42.920 --> 27:50.200
when you press control t it will open a new tab whereas when you press control v it will open a

27:50.200 --> 27:58.840
new vertical split um what else do we have oh yeah jump to definition so let's let's assume

27:58.840 --> 28:04.040
i want to use the url join methods and i forgot the possible parameters to this method so i can

28:04.040 --> 28:11.160
just press control g and it would jump to to my uh python installation and and look up the url join

28:11.160 --> 28:16.360
methods so i can just have a look at the method declaration and implementation and i can see

28:16.360 --> 28:20.440
ah a low fragments that was the name and i can read the doc string and find out what it does

28:24.120 --> 28:31.240
yeah last but not least debugging by pressing con leader b i can insert breakpoints

28:31.960 --> 28:37.000
and i think it will also also automatically save the file not sure maybe it doesn't and

28:37.560 --> 28:47.160
now i will open another terminal window and execute this demo project and it will stop at the

28:47.160 --> 28:52.680
breakpoint and you can get you can get this by just doing pip install or easy install ipython

28:52.680 --> 29:00.280
and easy install ipdb it's extremely useful um ipython ipdb will give you um color some syntax

29:00.280 --> 29:06.200
highlighting here it will give you tap completion um so to get started you should just type question

29:06.200 --> 29:10.920
mark there are the few commands that are available it looks like a huge list but most of them are

29:10.920 --> 29:17.800
duplicates like a and alias is the same and so you can just press question mark a or you will get

29:17.800 --> 29:23.400
an example what a does so some useful commands are l to give you a little bit more context

29:24.280 --> 29:28.120
around the line we are currently on when you press it several times it will go down

29:28.120 --> 29:34.440
you can say show me line 10 to 40 for example if you want to go more up um n stands for next

29:36.600 --> 29:41.080
well that's going to be bt backtrace very cool it will show us that we are actually

29:41.080 --> 29:48.040
here in this line in this file in this function and we came from here from this file this function

29:48.040 --> 29:53.000
from this line so maybe you will realize that okay the bug isn't actually here it's it's up here

29:53.000 --> 29:58.120
by when you when you use bt for backtrace maybe you will realize that ah something is is fishy up

29:58.120 --> 30:04.040
here so you can just use you and you will go up the backtrace so now we will you can see that now

30:04.040 --> 30:09.960
we are in the demo file so it jumped up here and we are now in the one frame above the

30:11.160 --> 30:16.200
in the backtrace and you can use arcs to inspect the currently available variables and the current

30:16.200 --> 30:27.880
scope so um oh what did i do that was not good sorry so arcs to inspect the variables and i mean

30:27.880 --> 30:31.800
this is just a python interpreter you can you can type anything that there's a valid python command

30:31.800 --> 30:37.560
for example type data what type was data oh it's a dictionary so cool then i can press dot

30:37.560 --> 30:42.280
and press tap twice and it will give me all options that the dictionary has so um i remember

30:42.280 --> 30:48.440
there was something about keys to get the keys so oh yes keys there it is and yeah so this i mean if

30:48.440 --> 30:52.760
you are a python beginner this is the best way to to learn actually to actually learn python put

30:52.760 --> 30:57.080
breakpoints into your code inspect all the stuff and then play around and see what what the

30:57.080 --> 31:05.800
python built-ins and all the data types have to offer all right um that's how i use them as a

31:05.800 --> 31:12.920
python ide i think that's pretty good already um last thing i think a few minutes i left um i will

31:12.920 --> 31:19.800
talk about how you can if you are still not convinced why you should use a terminal editor oh come on

31:20.280 --> 31:29.320
um this will take just two minutes um if you're still not convinced i'm in a situation that my

31:29.320 --> 31:35.000
team has um spread all over the world so the person that i work with the most is is sitting in

31:35.000 --> 31:40.280
germany i'm sitting in singapore and um usually we want to do pair programming right he has a

31:40.280 --> 31:44.200
question i have a question he has a bug and he doesn't he doesn't know how to solve it and

31:44.200 --> 31:48.840
then i usually want to look at his code and what we did all the time until recently is

31:48.840 --> 31:53.960
we start skype and we do skype screen sharing and then it crashes so we switch over to team viewer

31:53.960 --> 31:59.080
and try that and it's super slow and laggy whatever i'd say i'm like saying and talking quickly and

31:59.080 --> 32:03.320
jumping through the code and whatever i'd say he will see it 10 seconds later or five seconds later

32:03.320 --> 32:09.560
and it's it's just big brain fuck it does it's not fun right so there's a tool called vmax it's

32:09.560 --> 32:18.200
some wrapper around tmax and um i can start a vmax session by just typing vmax as i did just now

32:18.200 --> 32:24.920
and the other person i will i will do um i will set a port forwarding in my router at home

32:24.920 --> 32:31.560
to port 22 and i will give the other person my ip and so the other person will be able to do ssh

32:31.560 --> 32:39.320
pair pair proger at my ip so i i created a new user with lots of restrictions so this person

32:39.320 --> 32:43.560
is not able to delete my home folder or something oh why does this not work now

32:43.800 --> 32:50.360
j i think oh yes you are correct thanks pair proger

32:52.680 --> 32:53.080
okay

32:55.800 --> 33:03.000
okay and then the person can type vmax attach and now he will see what i see and i will see

33:03.000 --> 33:08.600
how big his screen is or how small so i will i will scold him and say hey please resize your terminal

33:09.400 --> 33:10.360
um

33:13.000 --> 33:18.840
yeah and now we can basically whatever i type here will be uh will be done on the other side

33:18.840 --> 33:23.560
as well so we can do we can start using vim and we can start implementing our python code together

33:23.560 --> 33:29.320
so i can type and he can take over and he can type again he can type as well pretty cool and since

33:29.320 --> 33:36.600
this is only some bytes of of of text being sent over the wire this is absolutely fast and instantaneous

33:37.560 --> 33:42.200
all right um where's my keynote thing

33:46.200 --> 33:48.200
thank you so much questions

33:53.720 --> 33:58.600
yeah yeah it's on my system he's he's doing ssh into my machine and then he's attaching to the

33:58.600 --> 34:02.280
vmax session and we are working on exactly the same file

34:05.960 --> 34:09.720
questions so what was power line oh yes sorry

34:13.640 --> 34:19.800
i assume it's that no no this this is tmax this is uh something that i have configured my tmax to do

34:21.800 --> 34:28.440
power line is this thing below here so um yeah it shows you it gives you a graphical feedback

34:28.440 --> 34:35.240
if i'm in insert mode it's blue if i'm in select mode it's orange yeah it's it's it's just helpful

34:35.240 --> 34:40.440
usually it's like when i come back from from from lunch break i can't remember oh where did i left it

34:40.440 --> 34:46.120
was it was i in insert mode or was i in select mode so i always press control c to go or press escape

34:46.120 --> 34:50.120
to to go back into the other mode but maybe i just want to be in insert mode and i come back

34:50.120 --> 34:55.560
oh i'm in insert mode i i can go i can go on typing i have some of the things that you've got

34:55.560 --> 35:01.240
in store but i don't have some of the other cool things you've got um uh where are you going to

35:01.240 --> 35:07.480
share all this information yeah um i have it on on my github repository very long url

35:11.960 --> 35:15.480
github that's github slash mbroch and then you will find my

35:16.280 --> 35:19.160
vim as a python ide talk and yeah

35:23.080 --> 35:28.040
no my dot files is a different repository but yeah of course

35:30.280 --> 35:35.080
yeah i will um i will export them as pdf and upload what is the best what is the best service

35:35.080 --> 35:43.080
to upload and share slides slide share speaker deck no okay speaker deck

35:46.360 --> 35:48.520
uh fun github

35:51.960 --> 35:56.360
the pdf you mean yeah just check out github okay yeah i will do that as well

35:57.480 --> 36:06.040
pardon hey i i i just started using vim last year i i i still have to get deeper you know

36:06.680 --> 36:12.520
maybe next year i will give a talk about uh creating slides with la la la leitec okay

36:16.440 --> 36:17.160
um

36:33.480 --> 36:37.000
uh thank you very much

