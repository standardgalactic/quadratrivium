start	end	text
0	11840	Okay. Thanks. Starting my clock. I'm going to talk about Vim today, so I already changed
11840	17680	my clothes, as you can see. Just a quick, quick, raise your hands. Who's using Vim for
17680	26000	development? Okay, that's almost the majority. Who's using traditional graphical IDEs for
26000	31080	development? All right. Okay, so there are at least five people in the room that might
31080	36920	be able to learn something here. All the rest, you will probably know what I'm talking about.
36920	42080	Where do I come from? So to put this into perspective somehow, I guess when I was 12
42080	47160	or so, I started writing my first program in basic, I think, on an Amiga or C64, I can't
47160	52480	remember. Later, when the internet arrived at our home, I started doing PHP and using
52480	58480	Dreamweaver. At university, they taught us Java and we used Eclipse. My first job, I was
58480	63840	using C-Sharp in Visual Studio for a couple of years, and my second job, I used Python
63840	70880	and Wing IDE, which I enjoyed much more, by the way. Last year, when I came here to PyCon,
70880	76400	I figured that lots and lots of very smart people were actually using Vim. I already
76400	80680	knew about Vim, obviously, all the time, but I always thought that it's much too complicated
81160	86320	and I will never have the time to learn this and it will kill all my productivity for months
86320	92160	or so. But when I saw that, I don't know, guys like Jacob Kaplan, most of what, are using
92160	96400	Vim all the time and are being obviously very productive with it, I thought maybe I should
96400	106000	give it a try. It was actually PyCon's fault that I started using Vim last year. Thanks
106000	110560	to you all. Why should you care? I mean, most of you care anyway, so I probably can
110560	116360	skip the slide, but obviously, Vim is cross-platform, so if you're using Ubuntu, you can use Vim.
116360	121120	If you're using macOS, you can use Vim. At home, I've got several laptops and whatever
121120	126000	I feel like. Every day, I can just open my laptop and my Vim with my Vim config is there
126000	129520	and it just works and it looks the same and feels the same everywhere. It's standard on
129520	133840	most systems, so for example, when I'm doing web development, I SSH into my web servers
133840	138840	and you can be sure that Vim is installed there, so it's quite good when, I don't know,
138840	146240	there's an emergency and you have to SSH into the machine. You want to know that you have
146240	150760	a good editor on that server that you can use and that you can use in a fast and efficient
150760	154240	way and you don't want to screw up your files because there's an editor that you usually
154240	159000	never use because you are used to a graphical IDE. It's very fast. I mean, when I remember
159000	164280	back the times when I was using Eclipse, the startup time, I was usually leaving my desk
164280	170560	and getting a cup of tea or so. Vim is almost instantaneous, obviously. It's good for your
170560	176360	health, sounds funny, but I can testify it's true. When I was programming for like 10 hours
176360	183640	a day with a classical IDE and moving back and forth to the arrow keys to navigate in
183640	190120	the text file, it actually hurts. When I started using Vim six or seven months ago and I got
190160	197080	this idea of using HJKL for the movement only, I was really unbinding the arrow keys so that
197080	204520	I must force myself and hammer it into my muscle memory as fast as possible. It actually helps
204520	209360	but because you have your fingers on the central row when you are typing with 10 fingers, they
209360	214600	are naturally resting there and you can just switch to movement mode and use HJKL to move
214600	218200	and switch back to insert mode and you don't have to move your hand at all and it makes
218240	223800	a big fat difference when you work a whole day and when you code a whole day. It's highly
223800	227720	customizable, of course. It's great for pair programming which is something that I want to
227720	233960	demonstrate if we have enough time at the end. Yeah, you can work anywhere, anytime. It's interesting
233960	242360	when at my last job we basically had the opportunity to get any hardware that we wanted so I got
242520	249800	myself a big fat 30 inch screen and at that time I thought that dual screen setup is the most
250440	254600	awesome thing in the world and it makes you so much more productive but I realized that since
254600	260920	I'm using Vim, I use screen or T-Markz as a screen multiplexer so I can switch between tabs
260920	265960	quickly so suddenly I have lots and lots of windows and desktops at my hand, just a fingertip
266040	273000	away and I have actually not used my second screen for six months or what? I don't use it anymore
273720	278920	so I can just go, I can code on an airplane, I can code on a beach, I can code anywhere
279560	283400	and I don't need to have an office environment or something, I just need my laptop and internet
283400	289000	connection. Another cool thing that I came up with when I thought about this slide yesterday is
289000	293720	you can change jobs and keep your tools, like maybe today we are coding in Python,
293720	300040	maybe tomorrow we are coding in Haskell or C++ or whatever and probably Vim will have a plug-in
300040	304040	that suits that new programming language that we will use in the future as well so
305320	309640	we will probably, I mean if you use Vim, you will probably never have to change your editor
309640	317800	ever again. By the way, all this is probably also true for Emacs, I guess they are quite similar
317880	321480	but I've never tried that one. So what am I?
323400	334040	Pardon? Okay, so to me what do I need in order to say that yes this thing is a workable IDE,
334040	338760	I want to have fast access to all files, I mean those files that are currently open maybe in
338760	343720	several tabs or splits and files that I know that are in the project, I want to have a nice color
343720	348120	scheme and I want to be able to change it quickly, I mean some editors give you a good way to change
348120	352760	the color scheme but maybe there's no standard file format or what so you cannot really exchange
352760	358040	the color scheme easily, it's pretty easy with Vim. I want to have syntax highlighting for all
358040	363720	common files that I will use which are in my case Python, HTML and CSS files and JavaScript files.
365480	370440	I want to have static code analysis, I mean with Python everybody knows we have this great
370440	377800	PEP8 document which tells us how to code beautifully and there are tools for checking
377800	384040	like Flake8 or Pylint or PEP8, there are tools that can check your code against the PEP8
384040	388280	specifications and they will highlight if there are like I don't know unused imports or
388280	393800	unused variables and stuff like that or there's a space too much or too many empty lines at the
393800	397800	end of the file or something like that. Code completion obviously is the main thing why
397800	402600	people use IDEs and I will show you how to get that with Vim. Go to definition is another cool
402600	407240	thing like when I'm using Django the framework is so big it has so many classes and modules and I
407240	412840	usually although I know it by heart almost I usually cannot remember what parameters the function
413800	418360	accepts for example and I don't want to go to Google or to the Django docs all the time and
418360	423080	look it up so just jump to the definition and look at the actual implementation of the method
423080	428520	and see what kinds of parameters the function allows and then you will also see the doc string
428520	434120	and yeah it's quite useful. Refactoring is something that this setup that I'm going to show is able
434120	439560	to do but I have actually never used it so I cannot demonstrate it. I somehow feel that using
439560	446200	refactoring with a dynamically typed language like Python is I don't know a bit it feels dangerous
446200	453320	to me I wouldn't trust the system. Debugging I think it can be done from within Vim but I usually
453320	459160	don't do it I use iPython and IPDB and just open another terminal window and I will insert break
459160	465800	points using Vim with a short key and then open another terminal window and start my program and
465800	472440	just wait until the breakpoint is hit and inspect the scope which I will demonstrate here as well.
472680	479800	Okay so we have four topics here. I will show you how to install Vim. I will show you how to
479800	485000	configure it for the first time starting from scratch. I will show you how you can manage
485000	490360	your plug-ins because the standard way of downloading it, unsipping it and putting the
490360	494520	correct files into the correct folders is quite messy there's a better way to do it and if time
494520	503320	is left I will show how you can use Vim for pair programming with Tmax. Okay installing Vim is
503320	510920	pretty simple. This is a script that I always execute whenever I set up a new server for my
510920	518200	web project or when I reinstall my own system just clone the source and the important bit is here
518280	526360	this enablepython interpreter part which you will need because the the Python mode plug-in is written
526360	532680	in Python and so Vim has to be compiled with with Python being enabled and you know I used to install
532680	537400	it into my home opt Vim folder so I don't disturb any other users on the system and that's it basically
537400	544120	and when you've done that you can check if everything has worked by by just typing Vim minus minus
544120	550600	version and you will get a lot a lot of stuff and you should search for the plus Python flag it will
550600	555080	tell you that it has actually been compiled with Python support sometimes it goes wrong and when
555080	561000	there's minus Python you know that you did something wrong and you should try again um yeah so that's
561000	568600	installing Vim should take around five to eight minutes or so um your first .vimrc file so when
568600	575480	when you start using Vim people usually recommend or advise you to um to start from scratch don't
575480	580920	take a fully brown Vim file from from from some hardcore hacker or so there's so much stuff inside
580920	586760	you will get lost better start from scratch and and whenever you feel that oh I want to do this
586760	591560	how can I do this just google for it go to the Vim IRC channel there are super many super smart
591560	595000	people inside and they are extremely helpful whenever I ask a question I get an answer within
595000	600840	two minutes um vimbits.com is a pretty cool website where it's like hacker news people can post their
600840	606120	their snippets and people can upvote and downvote it so it's like every month or so I just go there
606120	611160	and see what's what's hot and and what's bubbling on top and you usually can find lots of crazy ideas
611160	618360	you wouldn't you would never think of yourself um and I can only advise you to save your .vimrc
618360	624520	file on on your own .files repository on github many many programmers do that and it's a great way
624520	630680	to get inspiration just like for example I was talking to him right now and and and and he was
630680	634680	showing me some great tricks that I didn't know about and I immediately asked him is your .vimrc
634680	640040	file on github he's like yes of course so I know what I'm going to do when I'm home today um yeah
640040	647240	so let's do it I I just deleted my own .vimrc file and and created a new one um
649400	653880	so when you start Vim for the first time it will look like crap it looks just like the terminal
653880	660280	doesn't really look like an editor um so let's try to make this thing beautiful and look like an IDE
660280	667800	the first thing I usually do is um I put this buff write post thing here so I don't have to
668280	673400	close and reopen the file all the time when I do changes from now on when I when I save the file
673400	678440	will be uh reload it's like doing source on the terminal for when when you change some your bash
678440	683320	rc file you do source bash rc and then the changes will happen so now we will do the same when we
683320	690680	save um the standard behavior of the clipboard is something that I never really understand
691880	698280	so when you do clipboard equals unnamed it's basically the way you would expect it to be
698280	701720	with any other editor so when you copy something from a website you can just paste it into Vim
701720	706680	and when you select and copy something inside of Vim you can just paste it somewhere else
706680	714920	which wouldn't work right away then you can enable the mouse so now when I press the option key I can
714920	722120	use the mouse cursor to yeah to do what the mouse cursor is supposed to do and this backspace equals
722120	727000	to um it's quite useful because the standard behavior of the backspace key is a bit weird I
727000	732920	don't actually know what it what it does normally maybe somebody here can explain it to me uh so
732920	748280	when I oh shit sorry um I will comment this out and save again so now let's say I'm typing something
749000	752200	and then I'm typing something more and I want to press the backspace key
753000	759800	oh no it works okay usually um maybe some other settings have fixed this behavior as well but
759800	764440	usually when I try to use the backspace key it just stops there is some text in the line I'm
764440	768440	in insert mode and I'm pressing backspace but it just stops I don't know why this happens and this
768440	777240	setting this BS bullshit equals to will make will turn the backspace key into a real backspace key
777880	781800	I like to remap my map leader key the map leader key is the special keys because the
781800	786120	the keyboard is so full with shortcuts already that they ran out of keys so the map leader
786120	792200	key gives you the possibility to bind another full set of keyboard keys um because when you
792200	797080	press the map leader key them will wait for one second and see if you press any other keys so
797080	803160	suddenly we can press comma and something else to have even more um places to bind stuff to
807080	812520	then okay this is something that I cannot demonstrate right now because the color scheme is not installed
813400	820280	um saving as you have seen I usually have to you have to type call on w to save
820840	826360	I don't like that I it's like I was using ides for so long I I just have the habit of typing
826360	832360	and pressing ctrl s for save okay I can't press ctrl s here in vim but I remap it to ctrl z and
832360	838840	now it's already in my muscle memory again so from now on with these settings in whatever mode I am
838840	845640	I can just press um ctrl z and it will save very convenient the same thing is true for quit usually
845640	853560	you would have to type call on q for quitting I don't like that so I like leader e for quitting
853560	858280	it's much faster to me but this is like this is the reason why you should start from scratch because
858280	863880	you will probably have different ideas of where all these bindings should be for you for yourself
864840	873800	um okay you can have tabs and splits in vim and you want to be able to easily navigate between
873800	880920	them so let me demonstrate that uh when you when you create new tabs it's like this it's just tabs
880920	887960	very normal um but the standard way to navigate is like pressing ctrl w and then um one of the
887960	894120	movement keys for tabs I prefer to press the leader key and then n for going left and m for
894120	900120	going right so the leader key I put it on on comma and m and n is just all next to each other so
900120	907400	it makes it allows me to fast to to to switch between tabs very fast the same is true for splits
907400	914120	so when I have a horizontal split here you would have to press ctrl w j for going downwards into
914120	921240	the uh uh bottom split I I don't see why I should press two keys so I I know I remap that so that I
921240	927720	can just press ctrl j for going down ctrl k for going up or if you have a vertical split you can
927720	932520	press ctrl h and l to go left and right so it's it's basically just like moving around the cursor
932520	936520	just to press the ctrl key then you will be moving around the splits so very convenient
936920	945160	okay um yeah here's a very useful thing that you will probably use when you develop with
945160	953000	python because it's encouraged to have all the imports sorted alphabetically and
954360	960440	vim users will always do this because it's so easy I just bound it to con to to leader s and I can
960440	966280	just select a block of code press leader s and it will it will be sorted alphabetically very nice
967400	974680	um oh yes this one is cool I found this on vimbits.com I can select a block of code and
974680	980600	and then and use the um greater than and less than signs to move the whole block of code usually
980600	986200	you can easily do this this with vim anyways but it will lose its selection so um with this snippet
986200	990600	it will remain its selection so you can press it multiple times yeah
991320	1000440	uh okay um this one I cannot demonstrate it right now but it will show trailing white space
1000440	1003880	usually you don't want to have trailing white space in your code because I don't know when you
1003880	1010120	submit a a patch to an open source project and most people will have a script that deletes all
1010120	1014760	white space when they save and when you inserted some stupid white space and the next person is
1014760	1020040	editing the same file you will end up with lots of diffs where you didn't actually do anything
1020040	1024040	it's just because the other person automatically deleted your stupid white space so just make
1024040	1028840	sure you never insert any unwanted white space and this this line here will make sure that
1028840	1036440	its big fat red block showing you here's white space delete this um color schemes can be installed
1036440	1042120	easily in I have um all this file is on github so if you want to start from scratch you can clone
1042120	1049000	this repository um and um do the same that same thing as well sometimes you will find
1049000	1053400	comments here like this one this will explain how you do actually install a color scheme so it's
1053400	1059320	just create a dot vim slash colors folder go inside that folder and then download this one
1059320	1069400	bad color scheme and there you go um syntax highlighting this is something that will not
1069400	1077640	work when I save so I have to restart this file and now we have syntax highlighting so vim knows
1077640	1086760	its own syntax for its own configuration file and here are a bunch of settings for now we are
1086760	1092680	getting into the area of making this more look like an IDE so now we have column numbers and
1092680	1098840	the 80 characters line usually you don't want to write your Python scripts longer than 80 characters
1098840	1103320	so there's a very subtle line here I don't know if you can see it it's just a little bit darker
1107880	1115160	huh thanks and um this one is pretty cool when you when you write a doc string for example
1115160	1121400	and maybe you don't want to care about um I'm wrapping it correctly and you are writing over
1121400	1126200	the 80 characters line after that just point the cursor somewhere into that block and press Q
1128120	1131320	huh why does it not work I'm confused
1132280	1141720	okay I I entered awesome okay but why does this happen
1143400	1151880	hmm because I didn't save ah yeah okay okay let's try that again press Q and it
1151880	1158120	wraps the block of text accordingly so that nothing goes over that line it's not always useful
1158120	1161800	because like when you have when you're using markdown or restart check text and you have for
1161800	1169480	example you have bullet lists it doesn't really know that the bullet lists belong under each like
1170680	1177400	how to explain sorry so it's like when you have bullet lists like this and then this
1177400	1182360	and you press Q it will destroy your bullet list and put everything into one line so don't use it
1182360	1188040	all the time but sometimes it can be quite useful um under history of 700 yeah something that I like
1188360	1195960	um for pison you don't want to use tabs you want to use spaces and you want to use you want to indent
1195960	1203640	by four um this one is for when you do regular use you use regular expressions for search that
1203640	1213560	they are case insensitive ah come on this one um it's a bit tricky I don't know if everybody
1213560	1219720	needs this um vim creates a lot of swap files and and backup files when when you save and I like
1219720	1224840	to use file system watches so that whenever I save all my tests get executed immediately in another
1224840	1229000	in another terminal window and the standard behavior seems to be that it creates three or
1229000	1233720	four file system events and my tests get executed three or four times in a row which sucks so and
1233720	1238360	with these three settings I got to fix this and when you save it's actually just one file system
1238360	1244840	event okay so that is about the vim rc now we'll talk about some plugins that will
1245640	1251320	introduce all this id stuff that I want to have it's it's four plugins I won't I won't say much
1251320	1257160	say much about them right now I will just show you how they look like um oh yeah when you when you
1257160	1262360	want to work with plugins within the the standard way is you have to download a zip file or a tar ball
1262360	1266840	and you have to unpack it and you have to install it into the dot vim folder and then there can be
1266840	1271320	several different subfolders there can be an ft plugin folder there can be a syntax folder
1271320	1277080	and each plugin more complex plugins will have so many files that you have to you have to read the
1277080	1280760	readme and it will tell you like copy this file into that folder and this file into that folder
1280760	1285640	and it's a big huge mess and for you and especially when you want to get rid of that plugin later on
1285640	1289960	you can't remember which files did belong to that plugin and in which folders are they so
1290600	1295960	it's a mess use pathogen instead it's very easy to install you have to create this autoload folder
1296680	1302280	uh and a bundle folder then download the the pathogen file and that's it and and
1302280	1307640	insert this call pathogen infect setting here and you are good to go from now on you can install
1307640	1313640	plugins by just unpacking them into the bundle folder so for example if we want to install
1313640	1319400	vim power line we will go into the bundle folder and we will just clone the whole power line
1319400	1326120	repository and usually vim repositories repositories of vim plugins on github are
1326120	1331320	created in a way that the root folder has the files all in the current in the correct folder so
1331320	1338200	you can just clone the thing into the bundle folder and it will work okay um so here's a setting for
1338200	1346840	vim power line you will see when i demonstrate it just a second control p is a plugin for quickly
1346840	1352760	navigating through files and opening files and python mode is is a very very great project
1353480	1361240	i think it's a wrapper around uh several other plug vim plugins that deal with python and and
1361240	1369480	and make vim more like a python IDE so it's it's much easier to just install this one plugin
1369960	1382920	then several others okay this one is some stuff okay and python folding allows you to collapse and
1382920	1391240	expand your your whole code so now that i have installed these four plugins let's go to some
1391240	1399000	test repository so i've created a stupid little demo project here python project um so the first
1399240	1403720	thing we can see we have code we have syntax highlighting it looks like python code python
1403720	1413960	code it's it's it looks nice um yeah the folding plugin now i can use f to fold and unfold blocks
1413960	1422360	of code or i can use uh capital f to fold everything which is quite handy if the file is a bit long so
1422360	1427960	i don't want to scroll down and then press control d control d control d to go down um i just fold
1428040	1432360	everything and maybe do a search for the for the function name and i will be i will reach the
1432360	1448600	code that i want to work on quickly um yeah yeah then you should use my version i don't know it just
1448600	1455880	works i never have problems with the doc strings yeah when i when i point the cursor here and press
1455880	1459960	f it will only okay i don't have a class in the syntax but if you would point the cursor at the
1459960	1472440	class definition and press f it will collapse the whole class uh yeah um functions are too long
1474680	1482760	okay yeah um there is the i think py lint or or py flag or so has a feature of telling you that the
1482760	1488040	function is too complex where if you have too many nested if and else things it will say this
1488040	1495320	function is too complex and usually those functions are also too long okay um one thing about rope
1496360	1500600	rope deals with all this go to definition stuff and code completion stuff uh when you when you use
1500600	1510680	it for the first time you should execute rope open project and this will create a dot rope project
1510680	1519240	folder which contains a config file and in that config file you will find a line about python pass
1519240	1523800	and here i would insert my the parts to my virtual environment for example when i'm using
1523800	1527960	when i'm working on jango project i would insert the pass to the virtual environment of that jango
1527960	1534200	project so that python rope actually knows where jango is otherwise it like code completion wouldn't
1534200	1545800	work right um yeah so let's try this um no we will try this later so um static code analysis
1546600	1552600	when i'm when i'm doing stuff like this it will open a quick fix window down here and it will tell me
1552600	1560360	that i have just inserted invalid syntax very useful uh or for example here it will tell me
1560360	1566520	there is a variable that is never used or for example if i import something that i never use it
1566520	1571720	will tell me there's an import that is never used and uh when i go down to this quick fix window
1571720	1577960	i can navigate through these items and when i press enter it will jump to the actual line that has
1577960	1583880	the error and so i can quickly fix this error go down to the to the quick fix window jump up here
1583880	1591640	fix this error as well and and then i'm good to go um yeah code completion very obvious so let's
1591640	1597320	say i i know there's a method that starts with l and i press control space it will give me all options
1598600	1605240	that it guesses it it is usually also assumes some python build in functions it assumes variables
1605240	1612440	that i have defined in this module before or it assumes functions that i have imported by using
1612440	1619240	the star import for example um okay now control p is the other plugin that deals with opening files
1619240	1624840	so when i press control p it gives me a list of all files in the project and it has some fuzzy file
1626440	1631800	file pattern pattern matching logic or whatever so when i know okay i want to open this file that
1631800	1636840	is called something with u utils or something i just press u it narrows down the results to everything
1636840	1644920	that has a u inside or maybe everything that has an r o rope okay config rope config there i am right
1646040	1652360	so you can even um just type down parts of the passes like maybe you know some folder names and
1652360	1656120	you know some parts of the file name so you just type down some parts of the folder name or some
1656120	1662920	parts of the file name and you will get the file so let's open utils in a in a new tab for example
1662920	1670200	when you press control t it will open a new tab whereas when you press control v it will open a
1670200	1678840	new vertical split um what else do we have oh yeah jump to definition so let's let's assume
1678840	1684040	i want to use the url join methods and i forgot the possible parameters to this method so i can
1684040	1691160	just press control g and it would jump to to my uh python installation and and look up the url join
1691160	1696360	methods so i can just have a look at the method declaration and implementation and i can see
1696360	1700440	ah a low fragments that was the name and i can read the doc string and find out what it does
1704120	1711240	yeah last but not least debugging by pressing con leader b i can insert breakpoints
1711960	1717000	and i think it will also also automatically save the file not sure maybe it doesn't and
1717560	1727160	now i will open another terminal window and execute this demo project and it will stop at the
1727160	1732680	breakpoint and you can get you can get this by just doing pip install or easy install ipython
1732680	1740280	and easy install ipdb it's extremely useful um ipython ipdb will give you um color some syntax
1740280	1746200	highlighting here it will give you tap completion um so to get started you should just type question
1746200	1750920	mark there are the few commands that are available it looks like a huge list but most of them are
1750920	1757800	duplicates like a and alias is the same and so you can just press question mark a or you will get
1757800	1763400	an example what a does so some useful commands are l to give you a little bit more context
1764280	1768120	around the line we are currently on when you press it several times it will go down
1768120	1774440	you can say show me line 10 to 40 for example if you want to go more up um n stands for next
1776600	1781080	well that's going to be bt backtrace very cool it will show us that we are actually
1781080	1788040	here in this line in this file in this function and we came from here from this file this function
1788040	1793000	from this line so maybe you will realize that okay the bug isn't actually here it's it's up here
1793000	1798120	by when you when you use bt for backtrace maybe you will realize that ah something is is fishy up
1798120	1804040	here so you can just use you and you will go up the backtrace so now we will you can see that now
1804040	1809960	we are in the demo file so it jumped up here and we are now in the one frame above the
1811160	1816200	in the backtrace and you can use arcs to inspect the currently available variables and the current
1816200	1827880	scope so um oh what did i do that was not good sorry so arcs to inspect the variables and i mean
1827880	1831800	this is just a python interpreter you can you can type anything that there's a valid python command
1831800	1837560	for example type data what type was data oh it's a dictionary so cool then i can press dot
1837560	1842280	and press tap twice and it will give me all options that the dictionary has so um i remember
1842280	1848440	there was something about keys to get the keys so oh yes keys there it is and yeah so this i mean if
1848440	1852760	you are a python beginner this is the best way to to learn actually to actually learn python put
1852760	1857080	breakpoints into your code inspect all the stuff and then play around and see what what the
1857080	1865800	python built-ins and all the data types have to offer all right um that's how i use them as a
1865800	1872920	python ide i think that's pretty good already um last thing i think a few minutes i left um i will
1872920	1879800	talk about how you can if you are still not convinced why you should use a terminal editor oh come on
1880280	1889320	um this will take just two minutes um if you're still not convinced i'm in a situation that my
1889320	1895000	team has um spread all over the world so the person that i work with the most is is sitting in
1895000	1900280	germany i'm sitting in singapore and um usually we want to do pair programming right he has a
1900280	1904200	question i have a question he has a bug and he doesn't he doesn't know how to solve it and
1904200	1908840	then i usually want to look at his code and what we did all the time until recently is
1908840	1913960	we start skype and we do skype screen sharing and then it crashes so we switch over to team viewer
1913960	1919080	and try that and it's super slow and laggy whatever i'd say i'm like saying and talking quickly and
1919080	1923320	jumping through the code and whatever i'd say he will see it 10 seconds later or five seconds later
1923320	1929560	and it's it's just big brain fuck it does it's not fun right so there's a tool called vmax it's
1929560	1938200	some wrapper around tmax and um i can start a vmax session by just typing vmax as i did just now
1938200	1944920	and the other person i will i will do um i will set a port forwarding in my router at home
1944920	1951560	to port 22 and i will give the other person my ip and so the other person will be able to do ssh
1951560	1959320	pair pair proger at my ip so i i created a new user with lots of restrictions so this person
1959320	1963560	is not able to delete my home folder or something oh why does this not work now
1963800	1970360	j i think oh yes you are correct thanks pair proger
1972680	1973080	okay
1975800	1983000	okay and then the person can type vmax attach and now he will see what i see and i will see
1983000	1988600	how big his screen is or how small so i will i will scold him and say hey please resize your terminal
1989400	1990360	um
1993000	1998840	yeah and now we can basically whatever i type here will be uh will be done on the other side
1998840	2003560	as well so we can do we can start using vim and we can start implementing our python code together
2003560	2009320	so i can type and he can take over and he can type again he can type as well pretty cool and since
2009320	2016600	this is only some bytes of of of text being sent over the wire this is absolutely fast and instantaneous
2017560	2022200	all right um where's my keynote thing
2026200	2028200	thank you so much questions
2033720	2038600	yeah yeah it's on my system he's he's doing ssh into my machine and then he's attaching to the
2038600	2042280	vmax session and we are working on exactly the same file
2045960	2049720	questions so what was power line oh yes sorry
2053640	2059800	i assume it's that no no this this is tmax this is uh something that i have configured my tmax to do
2061800	2068440	power line is this thing below here so um yeah it shows you it gives you a graphical feedback
2068440	2075240	if i'm in insert mode it's blue if i'm in select mode it's orange yeah it's it's it's just helpful
2075240	2080440	usually it's like when i come back from from from lunch break i can't remember oh where did i left it
2080440	2086120	was it was i in insert mode or was i in select mode so i always press control c to go or press escape
2086120	2090120	to to go back into the other mode but maybe i just want to be in insert mode and i come back
2090120	2095560	oh i'm in insert mode i i can go i can go on typing i have some of the things that you've got
2095560	2101240	in store but i don't have some of the other cool things you've got um uh where are you going to
2101240	2107480	share all this information yeah um i have it on on my github repository very long url
2111960	2115480	github that's github slash mbroch and then you will find my
2116280	2119160	vim as a python ide talk and yeah
2123080	2128040	no my dot files is a different repository but yeah of course
2130280	2135080	yeah i will um i will export them as pdf and upload what is the best what is the best service
2135080	2143080	to upload and share slides slide share speaker deck no okay speaker deck
2146360	2148520	uh fun github
2151960	2156360	the pdf you mean yeah just check out github okay yeah i will do that as well
2157480	2166040	pardon hey i i i just started using vim last year i i i still have to get deeper you know
2166680	2172520	maybe next year i will give a talk about uh creating slides with la la la leitec okay
2176440	2177160	um
2193480	2197000	uh thank you very much
