start	end	text
0	12120	Hello, and welcome to the MIT System Design and Management
12120	13120	Program.
13120	14120	Oh, shoot.
14120	15120	I didn't even meet myself.
15120	16120	Hi.
16120	17120	Hi.
17120	18120	Hi again.
18120	25160	Good morning, afternoon, or evening, whatever the case may be.
25160	28840	Welcome to the MIT System Design and Management Program.
29720	33240	System Thinking Webinar Series, my name is Lois Slavin.
33240	37640	I'm the communications director and the host for this session.
37640	46400	It gives us great pleasure to host Doug Dory today, and with that, I will turn it over
46400	48600	to him with just one note.
48600	52640	There will be time for Q&A within this hour.
52640	57440	If you have any questions, please enter them directly into the chat window and address
57440	59160	them to everyone.
59160	66120	I will read them aloud, and Professor Dory will then answer them.
66120	73840	Also, you will be sent a link to the recording of the webinar and to the presentation slides,
73840	77920	and with that, Professor Doug Dory.
77920	78920	Hello, everybody.
79920	86680	I'm going to talk about the maturation of model-based systems engineering and the focus
86680	88680	on OPM and C-SML.
88680	96280	OPM is going to be the ESO Conceptual Modeling Language Standard, and the C-SML is already
96280	97280	a standard.
97280	107440	As engineers, we know that any engineering discipline has their own language which they
107440	108440	express themselves.
108440	115800	For example, mechanical engineers have machine drawings, civil engineers have floor maps,
115800	124640	electronics engineers have their own set of drawings, and software engineers have models
124640	128400	such as UML.
128400	131480	How about and what about systems engineers?
131480	135120	What language do they speak?
135120	144360	It turns out that what is required is a graphical, maybe also textual, formal language for conveying
144360	151680	systems, architectures, and designs in a conceptual, straightforward, and clear, and unambiguous
151680	152680	way.
152680	160920	It turns out that systems engineers, as of a few years back, do have a couple of languages.
160920	168600	One of them is C-SML, Systems Modeling Language, which has been the standard of OMG Object Management
168600	171800	Group since 2007.
171800	178960	There is also Object Process Methodology, OPM, which is in the process of becoming ISO standard
178960	181240	since 2009.
181240	189000	There is also a book that was published in 2002, previous publications date back to 1995.
189440	194920	Why do we need conceptual modeling to begin with?
194920	198080	There are several good reasons.
198080	205880	One is that we want to construct a mental picture of the system we are aiming to build,
205880	207640	design, architect.
207640	215800	We want to anchor one's understanding in formalisms that can be visual and or textual.
215800	219720	There are two things that are required for dual channel processing, that is, the brain
219720	227600	processes information both visually and verbally, and if we can do it in parallel, that is even
227600	228600	better.
228600	236280	We want to design systems using nonverbal means, graphical, visual, convert acid knowledge
236280	242480	to explicit one, because many people have their knowledge, but they don't express it
242480	243480	explicitly.
244160	250160	Of course, we want to communicate the concepts that we have in mind to others very clearly
250160	253280	and unambiguously.
253280	259760	One key concept or term for our discussion is ontology.
259760	267560	So ontology, for our purpose, let's define it as a set of concepts for describing a domain.
267560	274680	Domain can be industry, banking, military, healthcare, and systems within this domain.
274680	279760	This has been in use for quite a long time.
279760	285080	We define a universal ontology as a set of concepts for describing the universal systems
285080	287880	within it, which is domain-independent.
287880	291840	It is not geared towards any specific domain.
291840	296440	Therefore, it is called universal.
296440	302440	What we want to really do is have ontological grounding of model-based systems engineering.
302440	310440	That is, we want to have a justification of what building blocks we are going to use in
310440	316760	our modeling language, not just start using anything.
316760	323680	To this end, we will try to determine the minimal set of concepts, which is required
323680	326440	to model the universe and systems in it.
326440	332880	This will be our ontology, a minimal ontology that is required and sufficient to describe
332880	335360	the universe and systems in it.
335360	342920	In order to do it in an appealing and engaging way, what I'm going to do is start with a series
342920	353000	of questions as Socrates used to do 2,500 years ago, but since it's a webinar and unfortunately
353000	360800	I can't get your immediate answers, I will just wait a while and then give the answer
360800	361800	myself.
361800	364480	Of course, you will be able to ask questions later on.
364480	373280	The first fundamental question is, what are the things that exist in the universe?
373280	377040	What do we call them?
377040	381880	The answer is objects are the things that exist or might exist.
381880	390520	We can think of them as things that might exist or exist in fact.
390520	398240	The next one is, what are the things that happen in the universe?
398240	404520	The answer is that processes happen or might happen, but we have to also remember that
404520	411520	processes cannot happen in vacuum, they happen to something.
411520	419320	The follow-up question is, what are the things to which processes happen?
419320	423160	The answer is that processes happen to objects.
423160	426480	The things that happen happen to the things that exist.
426480	435480	If this is so, what do processes do to objects?
435480	441480	The answer is that they transform, processes transform objects.
441480	443880	Next we can ask, what does it mean to transform?
443880	449360	What does it mean for a process to transform an object?
449360	455440	Transforming of an object by a process means one of three possible things.
455440	461160	The process can create an object, the process can destroy or consume an object, and the
461160	464720	process can affect an object.
464720	470080	Creating, which is equivalent to generating and destroying, are quite straightforward,
470080	472040	but what does affecting mean?
472040	476400	What does it mean for a process to affect an object?
476400	483040	A process affects an object by changing its state.
483040	490240	Here we introduce, in addition to objects and processes, a third term, which is state,
490240	492880	and objects therefore must be stateful.
492880	494960	In other words, they must have states.
494960	502240	We are talking about not just objects, but stateful objects and processes that transform
502240	503240	them.
503240	511280	Let's shift gears for a while and ask another key question that we will need to use later
511280	512280	on.
512280	519160	What are the two complementary aspects from which any system can be viewed?
519160	524400	Two important, two key aspects.
524400	527320	The two key aspects are structure and behavior.
527320	529080	Structure is a static aspect.
529080	532280	It answers the question, what is the system made of?
532280	533280	What are the parts?
533280	535680	How are they related?
535680	539800	The second aspect, the complementary aspect, is the behavior.
539800	541560	It's the dynamic aspect.
541560	546720	It answers the question, how does the system change over time?
546720	554520	What happens to the system and to the objects in it?
554520	561920	In addition, there is a third aspect that is only relevant to a man-made system.
561920	563440	What is it?
563440	571560	Well, the function, or the utilitarian, the subjective aspect, answers the question, why
571560	573000	is the system built?
573000	574000	For whom?
574000	575000	Who is the beneficiary?
575000	578840	Who benefits from operating the system?
578840	586720	This question has meaning only in the context of man-made systems, but much less so in natural
586720	588400	occurring systems.
588400	593600	What is the basic idea behind conceptual modeling?
593600	597240	We have the conceived reality as we sense it.
597240	606200	We engage with the world through our senses, and we conceive some view of the reality.
606200	609400	We see things, we hear things.
609400	617840	Here is an aircraft, airplane, a bus, here is a person feeling gas.
617840	625760	The airplane is modeled by a symbol, a rectangle in which aircraft is written, a bus similarly
625760	630480	is modeled by a symbol for the bus, an object.
630480	632680	These are two objects.
632680	634840	The third one, however, is different.
634840	643160	We see something happening, not just an object existing, but we see a process.
643160	647720	Before this, let us see what the common between aircraft and buses.
647720	655680	Aircraft is a vehicle and bus is also a vehicle, so we see that we can start, see how we can
655680	663600	generalize things which is part of the conceptual modeling, generalization, specialization is
663600	672120	an important relation, structural relation between things, be they objects or processes.
672120	680560	Now looking at this process, this thing, this process is modeled by an ellipse because
680560	682960	it's a process and not an object.
682960	692480	We call it gas feeling, and it's a process, and it affects, as you should recall, an object.
692480	696560	Any process must transform an object.
696560	702440	In our case, the transformation is effect, and the gas feeling affects the car.
702440	704200	How does it affect the car?
704200	714280	It changes its state from being empty of gasoline to being full with gasoline.
714280	722120	And just as we did with the objects, we can generalize gas feeling as being a special
722120	725640	case of energy replenishing process.
725640	733400	If this was an electric car, we would charge it with electricity rather than feeling gas,
733400	739040	and that would be another kind or type of energy replenishing.
739040	743040	So we see that there is quite an analogy between objects and processes.
743040	750880	So just as objects can be generalized, so can processes be generalized.
750880	757040	So using graphical symbols, the model expresses relations between things that are objects and
757040	758040	processes.
758040	761960	These are things in our model, and the relations among them.
761960	767880	Currently, the relations are simply written along the arrows, but they have, as we will
767880	772800	see, certain better symbols.
772800	780600	So I'm now going to introduce something new, which I call the object process theorem.
780600	784320	This theorem states the following.
784320	790920	Stateful objects, processes, and relations among them constitute a necessary and sufficient
790920	793560	universal ontology.
793560	798520	In other words, or a corollary to this, is that using stateful objects, processes, and
798520	805160	relations among them, it is possible to model systems in various domains and at any level
805160	806160	of complexity.
806840	815800	So it's a pretty ambitious statement or theorem, and I want to try to prove it now with you.
815800	818000	So there are two parts.
818000	820240	We say that it's necessary and sufficient.
820240	826600	So we have to show that stateful objects and processes, first, are necessary to specify
826600	833040	the two system aspects, because as we said, these are the two aspects, the structural
833040	837480	and the procedural aspect, we need to be able to specify them.
837480	843680	So specifying the structural static system aspect requires stateful objects and relations
843680	849480	among them, because we want to show what is out there, what the system is made of.
849480	855880	In order to specify the procedural or dynamic system aspect, we need processes and relations
855880	859720	between them and the objects that they transform.
859720	866800	So it's necessary to have both stateful objects and processes as well as relations among them.
866800	869880	So we have the proof of the necessity.
869880	872200	Now we want to prove that they are sufficient.
872200	877760	So stateful objects and processes are sufficient to specify anything in any system.
877760	879880	Why is that correct?
879880	888320	Anything that exists can be specified in terms of stateful objects and relations among them.
888320	894080	Anything that happens to an object can be specified in terms of processes and relations
894080	898440	between these processes and the objects that they transform.
898440	906080	So sufficiency is also proven and this is actually the end of the proof.
906080	915080	So what we take of this is that it is enough to model any system at any level of complexity
915080	922440	and in any domain using stateful objects and processes that transform them along with relations
922440	925400	among them.
925400	928320	So what are the keys to good conceptual modeling?
928320	933360	First of all, because objects and processes are key to modeling, we have to be able to
933360	934880	tell them apart.
934880	943720	Telling processes and objects apart is the first key to good conceptual modeling.
943720	950880	Then we want to model the objects and processes concurrently because the world is really such
950880	956440	that or systems are such that structure and behavior are tightly intertwined and trying
956440	962960	to separate that does not make a lot of sense, at least not in the beginning.
962960	970240	We want to see how the structure and behavior are connected to each other.
970240	973280	Then we want to be able to manage the complexity of systems.
973280	980200	Systems are inherently complex and we do this through abstraction and refinement mechanisms.
980200	991240	Finally, if possible, we want to utilize dual channel processing in order to take advantage
991240	997480	of our brain processing capabilities of both graphics and text concurrently.
998480	1008760	Several years ago, Jeff Estefan, in 2008, published as part of the INCOSSE task force,
1008760	1015320	a survey of the leading model-based systems engineering methodologies and there were six
1015320	1016320	of them.
1016320	1022320	You can see the list here, two of them are from IBM, telelogic, rational, there is INCOSSE
1022320	1030040	object-oriented systems engineering method, Vitec, JPL state analysis and OPM was also
1030040	1031040	one of them.
1031040	1037680	Some of you might wonder why system L was not surveyed and the answer is that system
1037680	1047800	L is a language but it is not a methodology so it is not included in this survey.
1047800	1053960	In OPM, in object process methodology, we talk about things which are categorized into
1053960	1058280	objects, stateful objects and processes that transform the objects.
1058280	1061440	These are the symbols as we have seen them.
1061440	1068280	An object is defined as a thing that exists or might exist physically or informatically
1068280	1072640	and the process is a thing that transforms one or more objects.
1072640	1079120	Processes transform means either generates or consumes or affects, changes the state
1079120	1082360	of an object.
1082360	1089120	Here is how this is expressed both graphically and textually.
1089120	1093120	Processes transform objects by one option is consuming them.
1093120	1100520	Here is an example of a process manufacturing which consumes raw material as it operates
1100520	1105880	and the sentence that we see at the bottom is automatically generated by software called
1105880	1109400	OPCAT which anyone can download for free.
1109400	1111360	I am going to give you the link soon.
1111360	1120040	Sure, they call it VR out, it's clear in items, that type of thing, what floor do they use your
1120040	1121040	want?
1121040	1122040	Okay.
1122040	1123040	The second way.
1123040	1124040	Yes, VR out items.
1124040	1134040	If I look at the rack, yes, we don't have this kind of work theory, what's good?
1134040	1142040	Every floor has it, because they told me when I was a kid, we had some VR out items that
1142040	1144040	were interlocking.
1144040	1150040	Excuse me, please make sure you're muting yourselves, we hear a woman say hello.
1150040	1153040	Okay, so that's what we know.
1153040	1163040	I remember when the back of the window was like, I wouldn't say between a two-year-old
1163040	1164040	lady, whatever.
1164040	1165040	Sorry about that.
1165040	1170040	They were near the window, with the back of the door, with windows.
1170040	1181040	And I remember, so what's on the 8th floor then, what are the labels in 8th floor?
1181040	1182040	Power?
1182040	1183040	What does that mean?
1183040	1184040	What does that mean?
1184040	1185040	Okay, I'll try to continue.
1185040	1186040	Okay, thank you, honey.
1186040	1187040	Right here.
1187040	1198040	Okay, hopefully this will not happen again.
1198040	1209040	So second way of transforming processes by objects is creating them.
1209040	1214040	So here we see manufacturing creating the product.
1214040	1220040	So you see another sentence was added here, manufacturing yields product, and that's the
1220040	1227040	same error except it goes from the process to the object, whereas the previous one went
1227040	1237040	from the object to the process.
1237040	1243040	And the third option for processes to transform objects is by changing the state.
1243040	1252040	So in this example, we have a process testing which changes products from a state of being
1252040	1260040	pre-tested to a state of being tested, and that translates to a couple of sentences.
1260040	1266040	Product can be pre-tested or tested, and testing the process changes products.
1266040	1269040	The object from pre-tested to tested.
1269040	1275040	Again, all of these sentences are generated automatically on the fly in response to the
1275040	1285040	input by the modeler, by the system architect or designer.
1285040	1294040	So again, the two things that OPM has or deals or uses for modeling are objects and processes
1294040	1297040	and all the rest are relations between things.
1297040	1304040	For example, these pair of arrows are called input output link pair from the input state
1304040	1309040	pre-tested in this case to the output state testing.
1309040	1315040	So I want to show you a more realistic system.
1315040	1321040	We all have experience with baggage handling and sometimes it also gets lost.
1321040	1332040	So here is a model of baggage handling, which is the main process that you see in this diagram.
1332040	1339040	And we see the objects revolving around it, which are the passenger, the baggage, the baggage
1339040	1343040	location, which is an attribute of the baggage, the airport, and the airline.
1343040	1349040	These are the major objects that are involved in this process.
1349040	1354040	So the system's function is really this main process in the system diagram, the top level
1354040	1357040	diagram, which is this one.
1357040	1362040	This, by the way, is the graphic user interface of OPCA, the software that I mentioned.
1362040	1374040	And one of the guidelines in the OPM methodology is to start the modeling with depicting the
1374040	1382040	function of the system, what the system does to benefit one or more users, beneficiaries.
1382040	1384040	So in this case, it's baggage handling.
1384040	1391040	Processes should end with ING to give the feeling of something happening.
1391040	1397040	The beneficiary in this case is the passenger and the operand, the thing that the baggage
1397040	1400040	handling operates on is the baggage.
1400040	1408040	The attribute of the baggage is the location, which needs to be changed from origin, the
1408040	1413040	original, the initial state, to the destination, the final state.
1413040	1420040	All this is expressed textually here at the bottom with what we call object process language,
1420040	1422040	or OPL for short.
1422040	1425040	These are the attribute values, origin and destination.
1425040	1430040	This whole thing is called the object process diagram, or OPD for short.
1430040	1437040	And the text at the bottom is object process language, or OPL, which, as I said, is generated
1437040	1445040	automatically on the fly to interpret textually what is expressed by the model graphically
1445040	1446040	at the top.
1446040	1454040	On the left, you can see a hierarchy of object process diagrams because now that we have
1454040	1460040	modeled the top level and we see what the system is all about and what its main function
1460040	1472040	is, we can elaborate by zooming into the baggage handling and show that it is comprised of lower
1472040	1473040	level processes.
1473040	1479040	I can show it to you later on as we go if we have time.
1480040	1488040	One thing that OPN does is to unify the three aspects that we mentioned, the functional
1488040	1495040	aspect, why the system is built, what is the utility who benefits from it, the structure
1495040	1500040	of the system, what is the system made of, and the behavior of the system, the dynamic
1500040	1506040	aspect talking about how the system changes over time.
1506040	1512040	These three aspects are expressed b-modally, that is, both in graphics and equivalent text,
1512040	1516040	that is generated automatically, all in a single model.
1516040	1520040	We don't need to have several types of diagrams.
1520040	1527040	It's always object process diagrams at different levels of depth.
1528040	1537040	We zoom into the baggage handling which was only a single ellipse in the previous top
1537040	1538040	level diagram.
1538040	1544040	Here we see sub-processes of these baggage handling processes which are origin, baggage
1544040	1549040	handling, destination, baggage handling, baggage claiming, and lost and found baggage handling.
1549040	1556040	They are arranged from top to bottom vertically in the order that they happen.
1556040	1566040	This is the timeline which goes from the top of the in-zoom process ellipse to its bottom.
1566040	1575040	This is how time can be managed in an OPN model.
1575040	1578040	Again, around we see the objects that are involved.
1578040	1582040	Airports specializes into origin airport and destination airport.
1583040	1589040	The airline is comprised, among other things, of lost and found desk which is engaged in
1589040	1592040	the lost and found baggage handling.
1592040	1599040	The baggage has a location which, in addition to having the states of origin and destination,
1599040	1606040	now we can see that it also can be aboard the aircraft or someplace else which we don't
1606040	1608040	want to have, but this happened.
1608040	1615040	This is, for example, a condition for having the lost and found baggage handling sub-process
1615040	1618040	execute.
1624040	1630040	We've talked about the universality of the object process ontology or, in other words,
1630040	1640040	the claim which I hope proved that stateful objects and processes are sufficient for
1640040	1647040	modeling complex systems in any domain and at any level of complexity.
1647040	1653040	In order to support this empirically, I want to show you something from a totally different
1653040	1656040	domain which is molecular biology.
1656040	1662040	Baggage handling and molecular biology have in common the fact that they can both be
1662040	1665040	modeled using stateful objects and processes.
1668040	1675040	A little digression to molecular biology, we all know that biological systems, organisms
1675040	1677040	are highly complex.
1677040	1684040	They have organs that are made of cells and each cell has many, many thousands of biological
1684040	1690040	pathways, each comprised of many hundreds or thousands of biological reactions and all
1690040	1697040	this is happening in a tiny cell which is a whole world in its own.
1697040	1707040	In order to, and many, many thousands of researchers in biology are trying to unravel these
1707040	1713040	mechanisms and this is what molecular biology is all about.
1714040	1721040	We have, a couple of years ago, actually more than that, some five years ago we started with
1721040	1728040	the idea that OPM can be very effective in modeling biological systems and collaborating
1728040	1737040	with Professor Mordechai Hoder from the Faculty of Medicine and Judith Somek who just finished
1737040	1741040	graduating and has a PhD around this subject.
1742040	1748040	We have developed conceptual model-based systems biology approach in which we use OPM to model
1748040	1755040	complex biological systems and what we did in this particular work is to look at a set
1755040	1763040	of about 40 papers related to the messenger RNA transcription cycle and we modeled it
1763040	1768040	in a very detailed level.
1794040	1797040	Excuse me.
1798040	1801040	Okay.
1814040	1821040	Oh, maybe I think I, by mistake I clicked, I clicked and I got to,
1822040	1827040	yeah, this is the link that I get.
1827040	1830040	Okay, I think I'm okay now.
1833040	1837040	Actually, click, okay, I know what I need to do.
1837040	1850040	OK, so in conceptual model-based systems biology, we start with research papers and
1850040	1857040	papers, and experimental findings that we can find in the literature, which most of all
1857040	1866120	of it is actually currently online, and we construct a conceptual model which looks something
1866120	1867120	like this.
1867120	1876320	This is one of many, could be tens or hundreds of object process diagrams that are interrelated
1876320	1883240	and have the object which are molecules of various types and sizes and molecular complexes
1883240	1892960	such as genes and all kinds of hormones, and anything that is involved in these processes.
1892960	1900120	And because the in silico computational model which represents the experimental knowledge
1900120	1908640	which is gathered from natural language papers that are available online.
1908640	1913600	We have the ability, which I haven't mentioned yet, to execute to stimulate the model, so
1913600	1919760	we don't only look at a static model of objects and processes and relations among them.
1919760	1926520	We have the ability, and this is a screenshot of the simulation of this particular object
1926520	1927880	process diagram.
1927880	1934000	What we see here is that the process called via denulation, the one at the top, is currently
1934000	1942360	executing and is changing the states, which are the brown ones, of particular objects
1942360	1944360	from one state to another.
1944360	1950000	The next process to be executed will be this one and then this one, and then we will move
1950000	1951000	to another.
1951000	1955960	On the left you can see some small part of the hierarchy of the object process diagrams
1955960	1958880	that are part of this system.
1958880	1966800	And then, having done the simulation, executing the simulation, we can compare the outcomes
1966800	1971960	of this simulation with the experimental findings that we can find in the literature.
1971960	1978560	Obviously, there will be knowledge gaps because not everything is known, at least in the system
1978560	1981040	that we have been working on.
1981040	1987920	And so by modeling, we stumble upon knowledge gaps that we can at least determine what they
1987920	1988920	are.
1988920	1996920	And so we verify that the in-silical computer simulations are compatible with the experimental
1996920	2004160	results, and when they are not, we define knowledge gaps and what needs to be done in
2004160	2005960	order to close these gaps.
2006560	2009480	So this is a research cycle that goes on.
2009480	2017040	And the next stage is that we add new biological conjecture, one or more.
2017040	2019600	Maybe one at a time is a better approach.
2019600	2030840	And so we do some perturbation of the model according to what we think might be the case.
2030840	2043200	And again, execute the model and check the results experimentally in vivo, in vitro,
2043200	2044200	wet lab experiments.
2044200	2052440	This is the part of the biologists in order to verify that the results, according to the
2052440	2058520	conjecture, really is in line with the findings in the lab.
2058520	2065360	And so that is a very good indication that our conjecture is indeed true.
2065360	2071400	In reality, what our experience has been that it is not enough to have just one, it's a
2071400	2077320	very long iterative process of refining the model further and further in order for it
2077320	2082440	to meet when executed the biological findings.
2082520	2090240	So it's an interplay between the in-cylical and the in-vivo, in-vitro experimentation
2090240	2093680	in order to get them all in sync.
2093680	2100040	So we evaluate the conjecture, we find knowledge gaps, we design and do new wet lab experiments
2100040	2109440	and we iterate this until we have all of the facts in line.
2109440	2116240	And that's what there is another paper that has been accepted, will be published soon,
2116240	2119640	which is a follow-up on the paper that I showed you.
2119640	2132320	So as I mentioned already, OPM has since 2009 been in the process of becoming an ISO standard.
2132320	2144280	So Paris, France in 2009 was the first meeting of the ISO group that in which the study group
2144280	2148400	was established to explore OPM for modeling standards.
2148400	2157720	And then there was a meeting in Tokyo and in Florida in 2012 and in Israel in 2012 in
2157720	2165120	Haifa, Frankfurt, Germany last year and this year, just last month, in Beijing, China,
2165120	2177080	the resolution was to submit the draft as a PIS, publicly available specification.
2177080	2184400	And this is a major step toward becoming an ISO standard.
2184400	2190000	So it's now being voted.
2190000	2203640	Okay, I have mentioned C-SML as the current standard of OMG and indeed the comparison of
2203640	2208240	the key features of C-SML and OPM is in order.
2208240	2211560	So one prominent difference is the number of diagram times.
2211800	2218000	I already mentioned that OPM has just one kind of diagram, which is object process diagram.
2218000	2221200	C-SML has nine types of diagrams.
2221200	2226640	About half of them are structural and the other half is procedural.
2226640	2230560	C-SML is graphical, so the modality is graphics.
2230560	2237200	OPM, as I have shown, has graphics and text modalities, so it's bimodal.
2237200	2240400	The theoretical foundation of C-SML is UML.
2240400	2249760	In fact, C-SML is defined as a profile of UML with some extensions and OPM is built on
2249760	2255480	the foundations that I discussed earlier, which is a minimal universal ontology of stateful
2255480	2259520	objects and processes that transform them.
2259520	2269160	However, we have felt that it might be valuable to look for synergies and value of combining
2269160	2272760	OPM and C-SML.
2272760	2283120	So in a work done and published in 2011 in Systems Engineering Journal, we developed an
2283120	2291120	algorithm in supporting software to implement conversion or generation of C-SML views of
2291120	2295920	the different diagram types from the single OPM model.
2295920	2302720	And we evaluated the results through an experiment with students, 78 students, to test the quality
2302720	2309640	of the automatically generated diagrams, the C-SML diagrams, and how they impact the comprehension
2309640	2313720	of the systems that are modeled with them.
2313720	2320480	So the result, which I will elaborate soon, is that the addition of certain auto-generated
2320480	2328320	C-SML views to the OPM system model increased the compilation of the system by the students.
2328320	2334320	There is a challenge of mapping OPM to C-SML because the mapping is one to many.
2334480	2341160	So as a prominent example, a process in OPM can be mapped in C-SML to a use case, in a
2341160	2346240	use case diagram to an operation of a block, in a block definition diagram to action in
2346240	2352400	an activity diagram to state transition trigger or activity inside the state in state machine
2352400	2355840	diagram or as a message in a sequence diagram.
2355840	2365120	So all these concepts are actually some variation of a process with nuances and indeed the challenge
2365120	2371640	is to make this transition to make sense as much as possible.
2371640	2375240	So we did this and here is a couple of examples.
2375240	2383400	This is an object process diagram of some level at the ABS braking system, which is in zoomed
2383400	2387360	and we want to show a use case example.
2387360	2392240	So this is what we get from the conversion.
2392240	2400200	Here is the driver, which is here too, and there is an ABS braking use case, which includes
2400200	2404400	the braking, which you can see here.
2404400	2412800	Here is an example of converting another object process diagram from the same system
2412800	2415000	to an activity diagram.
2415000	2416920	This is the resulting activity diagram.
2416920	2422960	Again, you can see signal converting is the sub-process here, it is here and signal processing
2422960	2425080	is here and so on.
2425080	2431480	Here you have a decision point, which is equivalent to what is happening here.
2431480	2437360	Next finally, an example of a state machine from another OPD.
2437360	2442720	We have states of an order, which is ordered, paid and supplied, and you can see here the
2442720	2446320	order is ordered, paid and supplied.
2446320	2453600	So this is the focus on states, so obviously it has only states and some processes on the
2453600	2456320	transitions.
2456320	2462680	So the evaluation of our experiment with the 78 students, what we examined is the comprehension
2462680	2468720	of the system modeled in OPM, with and without the addition of the automatically generated
2468720	2474440	system and diagrams, and we also wanted to find whether there were any errors and inconsistency,
2474440	2481160	because this was the first time that we used this conversion system.
2481160	2485880	So we used two systems, divided the students into two groups.
2485880	2492720	There was a dishwasher system and a city scanner, and you can see how the layout of the experiment
2492720	2493720	was.
2493720	2503880	One group got OPM only of the dishwasher and OPM plus system of the city scanner and vice-versa,
2503880	2512480	and this cancelled any possible biases and learning that might interfere with the results.
2512480	2517280	We asked them eight comprehension questions, and we also asked them to find errors and
2517280	2521440	inconsistencies among the different diagrams.
2521440	2527600	And here you can see the results, which clearly and unambiguously in a significant way show
2527600	2535320	that there is an improvement between the scores for those who use the OPM only model and those
2535320	2543400	who got the enhancement with the C-SML model, the C-SML views that were automatically generated
2543400	2545200	from the OPM.
2545200	2549480	So no human added information to the C-SML models.
2550480	2559320	Still you see that there is a very significant improvement in the scores of the students
2559320	2570800	who had the opportunity or were provided with the C-SML interpretation of the OPM model.
2570800	2579160	The conversion was good because we didn't find true positive errors or inconsistencies
2579160	2583680	between the OPM model and the C-SML models.
2583680	2591480	Moreover, we asked the students to say whether the C-SML diagrams helped them, and indeed
2591480	2599400	the 74%, 58 of those 78, indicated that it did help them, and we even have a breakdown
2599400	2601080	by the types of diagrams.
2601080	2608000	So block definition diagram was the most helpful, 46, 47% and state machine and activity almost
2608000	2613400	the same because it makes sense because they're really pretty similar and the news case was
2613400	2615120	the least helpful.
2615120	2624480	So to summarize the comparison, in this study we have seen that OPM and C-SML take different
2624480	2629880	approaches in realizing the goal of general purpose system conceptual modeling.
2629880	2637320	OPM was especially good for idea generation and rapid prototyping at the early architecting
2637320	2643440	and design stages whereas C-SML is more appropriate when detailed views are required and this
2643440	2648600	happens usually during later stages of the detailed design.
2648600	2654000	So we see that each language has benefits and drawbacks and neither is by all means better
2654000	2655000	than the other.
2655000	2663240	So there is a large potential for synergy in using both a language in some combination
2663240	2671680	and this study can give hints or directions as to how this should be done.
2671680	2681920	Okay, so I'd like to go to the more general summary before we have the Q&A session and
2681920	2689080	so the takeouts that I would really be happy if you could take with you, first of all,
2689080	2696480	the stateful objects, processes that transform them and relations among them.
2696480	2703640	These three things constitute the universal ontology and that means that we can use them
2703640	2711560	to model systems in a variety of domains, maybe even in any domain.
2711560	2718080	And OPM uses exactly this ontology and therefore it is fit for modeling complex systems in
2718080	2725440	a large variety of domains and at any level of complexity.
2725440	2732000	Also using both graphics and text, the B model presentation appeals to what we call quote
2732000	2734320	unquote both sides of the brain.
2734320	2743240	The visual channel and the verbal auditory channel, they complement each other.
2743240	2748840	Some people are better than others in one and others are better in the other.
2748840	2756480	So each one can find whatever is best for him and complement with the other modality.
2756480	2763440	OPM is in the process of becoming ISO standard, it's got a number, 19-450.
2763440	2772040	CML has been the OMG standard for systems engineering since 2007 and what we saw an indication
2772040	2778160	of in the experiment is that using OPM in the early system architecting stages and system
2778160	2785640	L at later stages can in a synergistic manner improve modeling quality and the comprehension
2785640	2795600	of systems and therefore this is something that should really be looked in very seriously.
2795600	2802360	Some resources, there is this book with a link to it and there is also a website of
2802360	2810280	our enterprise systems modeling laboratory where you can find papers, software to download,
2810280	2817120	presentations, projects and many other things that are related to OPM.
2817120	2818120	Okay.
2818120	2821440	Thank you very much.
2821440	2823720	We have a number of questions here.
2823720	2835440	The first is two part and it is by Sebastian Herzig and the first part is you mentioned
2835440	2843120	that stateful objects, processes and relations are sufficient and necessary to describe systems.
2843120	2851280	Is there a base set of relationships such as some sort of a base vocabulary or are these
2851280	2853440	very much domain specific?
2853440	2854440	Okay.
2854440	2855440	Thank you.
2855440	2856920	This is an excellent question.
2856920	2864120	So yes, there is a basic set of what we call fundamental structural relations and procedural
2864120	2865120	relations.
2865120	2870520	The structural relations that are deemed fundamental and this is also part of the standard and
2870520	2878560	is found in the book, aggregation participation or in simpler words, whole part relation.
2878560	2885400	Then there is a generalization specialization or the either relation as it is perhaps more
2885400	2892400	known for which is a relation between a general thing and a specific thing that inherits from
2892400	2901240	it and then there is a classification instantiation relation, the relation between a class of things
2901240	2908160	which can be an object or a process and instances of that thing and exhibition characterization
2908160	2914920	relation which is a relation between a thing and its features and features are attributes
2914920	2920280	and operations that characterize that thing.
2920280	2922960	So these are structural relations.
2922960	2926440	We also have a general relation which can be user defined.
2926440	2932680	As far as procedural relations go, we have as you saw already, we have seen generation
2932680	2941160	or result link which is the graphical expression of the result relation, the consumption relation
2941160	2945840	between an object and a process and there is a state transition relation.
2945840	2947520	These are the main ones.
2947520	2952640	We have also conditional and event relations but these are more advanced concepts that
2952640	2958360	I didn't have time to even mention here.
2958360	2966480	The next question from Sebastian is, can and if so, how are constraints or generally requirements
2966480	2967880	captured in OPM?
2967880	2968880	Yes.
2968880	2969880	Okay.
2969880	2972040	Again, a very good question.
2972040	2980720	One of the really nice features about OPM is that using this approach in methodology,
2980720	2988400	you can start with a requirements model that is not just a bunch of textual requirements
2988400	2996360	that have number and title and text but you can using either the requirement, textual
2996360	3003560	requirement document or starting right away by modeling hand with hand or shoulder to
3003560	3012640	shoulder width between the customer and the provider to have a solution neutral requirements
3012640	3020120	model of what the system is supposed to be doing and then that will be the basis for
3020120	3028600	elaborating it by one or more options which will be solution specific and then you can
3028600	3037200	also compare the alternatives by various means and select the best alternative and continue
3037200	3043360	with detailed modeling with that alternative.
3043360	3047960	The next questions are from John Clark.
3047960	3053480	First is a statement, function and behavior are the same thing.
3053480	3059720	Second is the Baptist would enter the originating airport and arrive at the destination airport
3059720	3065960	correct and third, a human body is a non-man-made system.
3065960	3066960	Right?
3066960	3067960	Right.
3067960	3068960	Okay.
3068960	3075600	So even though the first statement is declared as a statement, I want to argue with it.
3075600	3081680	I know that many people confuse or mix behavior with function.
3081680	3085200	Function is and behavior are not exactly the same.
3085200	3092080	They are similar because most of the time function is associated with behavior but function at
3092080	3099080	least the way I view it and I define it is something that brings value to some user to
3099080	3105760	some beneficiary whereas behavior is just a neutral concept of something changes being
3105760	3111520	generated or consumed and this is how we define the difference between function and behavior.
3112280	3118920	Indeed, most of the functions entail some behavior of the system but not any behavior
3118920	3120520	as a functional objective.
3120520	3124640	So what was the second one?
3124640	3129240	Okay, there was, sorry, I move on to the next question.
3129240	3135400	The baggage would enter the originating airport and arrive at the destination airport correct
3135400	3143920	and then the- Yeah, well, the origin, the objective is to change the state of the location
3143920	3148520	of the baggage from the origin airport to the destination airport but what we really
3148520	3154520	are interested here is not just the sunny day scenario but mostly what happens when
3154520	3159960	things go wrong for some reason and we have a very detailed model of what happens to the
3159960	3165080	baggage when it is not routed the way it should be.
3165080	3166080	Sir?
3166080	3170160	A human body is a non-man-made system, correct?
3170160	3171160	Correct.
3171160	3172160	Yeah.
3172160	3173160	Okay.
3173160	3174160	The argument about it.
3174160	3175160	Is that a question or?
3175160	3176680	Okay, what is the next one?
3176680	3185080	Okay, from Mark Houllier, how would you handle the time aspect in description of concurrent,
3185080	3188120	i.e. non-sequential processes?
3188120	3194640	So as I mentioned, the timeline in an OPM diagram goes from the top of the diagram to
3194640	3201600	the bottom when you look inside an in-zoom process and so if you want to express two
3201600	3209760	or more processes or sub-processes that have to start concurrently, you simply draw them
3209760	3215720	more or less at the same height and the system, the software understands even with some leeway
3215720	3219160	that they should start concurrently.
3219160	3220160	Okay.
3220160	3230320	Next question from John Clark again, OPM is an abstraction of CIS ML, correct?
3230320	3233800	Not quite.
3233800	3240320	What I've shown is that OPM has been, first of all, the origins of OPM as I mentioned
3240320	3248120	in 1993 and the first paper was published in 1995, that is at least a decade or more
3248120	3260480	before CIS ML or even UML were conceived and an OPM is founded on ontological notions
3260480	3264920	of stateful objects and processes that transform them.
3264920	3270720	It comes from a different angle or a train of thought than CIS ML.
3270720	3279000	CIS ML is the way that CIS ML was conceived is to build upon the achievement of UML as
3279000	3286320	a software modeling language and tweaking it and converting it into a language that would
3286320	3291920	be applicable and usable for general systems rather than software systems.
3291920	3296920	So it's a totally different approach.
3296920	3297920	Okay.
3297920	3306480	From Daniel Yao, did you also test the students on CIS ML diagrams with no OPM model?
3306480	3309840	Oh, that's exactly what my wife told me yesterday.
3309840	3312840	What they should have done in this experiment.
3312840	3313840	We didn't do this.
3313840	3317840	This is something left to be done.
3317840	3319840	Okay.
3319840	3328000	From John Clark again, is this ML, is CIS ML helps the understanding of OPM?
3328000	3329640	Why do we need OPM?
3329640	3331640	What does OPM add?
3331640	3332640	Okay.
3332640	3340680	So OPM, like I said, is very easy to learn, is very easy to understand.
3340680	3346680	You can start modeling within 30 minutes of being exposed to it.
3346680	3352720	Whereas in CIS ML and UML, for that matter, you have to really spend a lot of time and
3352720	3361080	the learning curve is long and much more tedious in order to start being able to produce a
3361080	3362080	meaningful model.
3362080	3372520	Moreover, there are very little, if any, guidelines with CIS ML and UML of what diagram to start
3372520	3376600	with when to move to another type of diagram, when to return to this.
3376600	3380960	What types of diagram to use for what purposes and how they are interconnected.
3380960	3390720	It's a much more heavy overload on the modeler's mind to be able to keep, to juggle with the
3390720	3403240	different types of diagrams and get a clear and intact, complete picture, coherent picture
3403240	3406560	of the system with these many types of diagrams.
3406560	3410360	With OPM, it is much easier.
3410360	3418320	From Lars Olaf Kilstrom, having spent a significant amount of time both using CIS ML as well as
3418320	3424960	ontology development, I feel that this approach has benefits based on works with ontology.
3424960	3434480	I was wondering if you have looked at the Ideas Foundation ontology.
3434480	3440040	The reason for the Ideas question is that several concepts discussed in this presentation
3440040	3442840	also appear as part of the Ideas Foundation.
3442840	3446640	I'm not familiar with the Ideas Foundation.
3446640	3450560	I'll be happy to look at it.
3450560	3457120	As you indicated, there are synergies or commonalities, and I guess that would be beneficial.
3457120	3461880	From Jose Luis Fernandez, what about constraints?
3461880	3468000	How do you deal with something similar to CIS ML parametric diagram?
3468000	3475240	I didn't have time to mention it, but you can specify quantities and constraints again
3475240	3483480	by using objects with values, objects which are attributes of other objects or processes
3483480	3492120	with values, and constrain the behavior such that only if some parameter is within certain
3492120	3495520	values, a process will happen.
3495520	3503520	That is all done using objects and stateful objects and processes and links between them.
3503520	3515040	Is the converter from OPM to CIS ML available in OpCat?
3515040	3519280	It's a separate module, but we can try to make it available.
3519280	3522920	Yes, it was part of a research project.
3522920	3526440	This would be the last question.
3526440	3532080	There are several more, and I'd like to inform the audience that there will be a follow-up
3532160	3538640	email with links to the webinar recording and the slides, as well as to Professor Dorey's
3538640	3545720	email, so you can feel free to contact him directly if you'd like to discuss anything
3545720	3547800	you've heard here.
3547800	3551520	The last question is from Oswaldo Arias.
3551520	3556920	Is the OPM book available in digital format, if so, on which websites?
3556920	3559360	Thanks for the question.
3559360	3564360	This particular book, although I asked for it, at that time, a decade ago, it wasn't
3564360	3569360	very customary, but there is hopefully the next book.
3569360	3570360	Well, not hopefully.
3570360	3575360	I know that the next book includes a digital form.
3575360	3578360	When will that be coming out?
3578360	3580360	Hopefully in six months.
3580360	3581360	Excellent.
3581360	3588360	We'll be happy to send you a link to the website where you can get a digital version after
3588360	3590360	the book is available.
3590360	3593360	I'd like to thank everyone for attending.
3593360	3597360	I'd like to thank Professor Dorey as well.
3597360	3604360	I have to say this has been one of the more popular webinars in terms of questions from
3604360	3605360	the audience.
3605360	3608360	It's wonderful to see people so engaged.
3608360	3611360	Our next webinar will be two weeks from today.
3612360	3618360	We have Mona Vernon, an SDM alum who works at Thompson Reuters, who will be speaking.
3618360	3622360	The topic will be announced later this week.
3622360	3627360	With that, thank you again for attending and thank you again, Professor Dorey.
3627360	3631360	Thank you very much for your attention and interest.
3631360	3634360	I look forward to interacting with you.
3634360	3635360	Bye-bye.
3635360	3636360	Thank you.
3641360	3646360	I can't get it to stop.
