WEBVTT

00:00.000 --> 00:04.960
My father was a chip designer. I remember barging into his office as a kid and seeing

00:04.960 --> 00:09.400
the tables and walls covered in intricate diagrams and drawings. I watched him work

00:09.400 --> 00:15.620
in fascination as he painstakingly drew lines I did not understand. These days nobody draws

00:15.620 --> 00:20.160
circuits anymore by hand. In this video we are going to dive into a critical software

00:20.160 --> 00:26.320
tool for chip designers. Electronic Design Automation or EDA. Without this unheralded

00:26.320 --> 00:31.040
software, many of today's most advanced chips cannot be made.

00:31.040 --> 00:35.560
But first, I want to ask you to subscribe to the Asianometry newsletter. The newsletter

00:35.560 --> 00:39.880
is a good companion to the videos. I know that there's a lot of videos, so that's

00:39.880 --> 00:43.840
why I'll write the newsletters. Check them out for the full scripts as well as additional

00:43.840 --> 00:48.480
commentary after the fact. I might also have some additional newsletters in the future

00:48.480 --> 00:53.080
with thoughts and ideas on things in the wider tech world. You can find the link to the newsletter

00:53.080 --> 00:58.280
in the video description below or you can just go to Asianometry.com. As of right now,

00:58.280 --> 01:05.440
you can expect a new newsletter every Thursday at 1am Taiwan time. Much thanks.

01:05.440 --> 01:09.360
Before we can understand how EDA software helps the chip designer, we need to know the

01:09.360 --> 01:14.760
chip design process flow. How does a company like Apple or NVIDIA design their custom

01:14.760 --> 01:20.320
chips? The process and the names might differ from company to company, but a generic flow

01:20.440 --> 01:25.480
might look something like this. First, the product designers and system engineers at

01:25.480 --> 01:30.080
a high level envision a product. They might not know too much about circuit design, but

01:30.080 --> 01:34.560
they do know what their customers want, and so they come up with a set of integrated circuit

01:34.560 --> 01:40.840
requirements based on the customer's needs. Next, the chip's requirements enter logic

01:40.840 --> 01:45.760
design, also called circuit design. These people translate abstract requirements into

01:45.800 --> 01:50.400
circuits with the logic capable of meeting those requirements. Think of it like a UX

01:50.400 --> 01:55.000
designer who crafts how a software feature might look, act, and feel together with a

01:55.000 --> 01:59.920
product manager. A chip has many circuits on it and those circuits do different things.

01:59.920 --> 02:06.000
I'll briefly touch on two such circuits. Logic circuits or gates act sort of like a

02:06.000 --> 02:11.280
decision box. It receives inputs, puts them together, and comes out with an output. Is A

02:11.360 --> 02:17.600
equal to B? D is true only if E and F are also true. Stuff like that. Just one logic

02:17.600 --> 02:22.880
circuit by itself can seem pretty simple, but in groups they can do amazing things, like zombies.

02:24.080 --> 02:28.560
The second type circuit is called a memory circuit. It is capable of remembering whether a

02:28.560 --> 02:34.720
value was true or false, kind of like a light switch that is on or off. Once the logic designer

02:34.720 --> 02:39.280
has completed their work, they end up with groupings of logic and memory circuits connected

02:39.280 --> 02:45.600
together with wires. This grouping is referred to as a net list. After the logic design process,

02:45.600 --> 02:50.560
the design gets handed over to the physical designers. The work they do involves the literal

02:50.560 --> 02:55.600
physical layout of the logic circuits, memory circuits, and the wiring between them on the chip.

02:56.160 --> 02:59.840
When you have thousands or even millions of such circuits, this can get difficult.

03:01.040 --> 03:05.520
Once it goes through all of that, the chip design is verified and tested for errors before being

03:05.600 --> 03:12.560
sent to a foundry like TSMC or Samsung Foundry. EDA software is heavily involved in every one

03:12.560 --> 03:19.040
of these stages. Even a company like TSMC or Samsung uses EDA software to check a newly

03:19.040 --> 03:25.120
arrived design to make sure it is compatible with all of their design rules. Such testing or design

03:25.120 --> 03:31.120
rule checking is an especially big deal. An error here can cost millions of dollars if it slips

03:31.120 --> 03:37.520
into the fabrication stage. At the early stages of chip design, basically into the 1970s,

03:37.520 --> 03:43.040
chip designs were done by hand. The designer would draw a design on paper. This paper design would

03:43.040 --> 03:48.720
then be transferred to a photo mask made of a material called rubylyth. The photo mask can then

03:48.720 --> 03:54.240
be used to produce the chip design's patterns on the substrate. This is done by projecting light

03:54.240 --> 03:59.840
through the mask onto the material, and so on. But as chips got increasingly more complex with

03:59.840 --> 04:05.120
more transistors and connections, simple software tools were developed in-house by the big companies

04:05.120 --> 04:10.640
to aid in the design process. These tools would become the EDA software tools used today.

04:11.760 --> 04:16.640
The first software programs automated the placement of a very small number of blocks and wires on a

04:16.640 --> 04:22.000
circuit board. Not a chip, but a circuit board. Routing makes sense for these early programs

04:22.000 --> 04:27.360
because the task gets tedious. It also needed to be constantly done over and over again as

04:27.360 --> 04:32.880
board components moved around. At the beginning, these big mainframe programs ran simple breath

04:32.880 --> 04:38.880
first search algorithms across the grid. Breath first meaning that they explore all the possibilities

04:38.880 --> 04:45.200
at a single level first before diving deeper to the next level. This was rather slow, so these

04:45.200 --> 04:51.600
programs quickly moved on to other algorithms in later versions of the software. As a number of

04:51.600 --> 04:57.200
components within an integrated circuit started to exceed that on a circuit board, EDA software usage

04:57.200 --> 05:03.840
moved to the silicon realm. Bringing EDA to silicon helped solve daunting challenges in chip making.

05:03.840 --> 05:09.600
A chip is built in layers. Now you have to wire connections in 3D, taking into consideration

05:09.600 --> 05:15.200
layer-to-layer connections called vias. It adds astounding amounts of complexity and presents

05:15.200 --> 05:22.000
huge opportunities for errors, and would lead to a chip design problem. Moore's Law, an observation

05:22.000 --> 05:27.280
not a real law, set the pace for the semiconductor industry to produce chips with ever increasing

05:27.280 --> 05:33.200
numbers of transistors. Assuming the industry follows Moore, that translates to roughly a

05:33.200 --> 05:38.880
historical 58% annual rise in the number of transistors that fabs are capable of fabbing.

05:39.920 --> 05:44.800
Being capable of fabbing that many transistors is one thing, but designing the actual transistors to

05:44.800 --> 05:50.560
be fabbed is another matter. Design can only go along so fast because human knowledge and skills

05:50.640 --> 05:56.640
cannot scale up as fast as tools in capital. And if you disagree with that statement, then I recommend

05:56.640 --> 06:00.960
you check out the Mythical Man Month or other works on project and software management.

06:02.160 --> 06:06.320
At the same time, consumers want that next hot chip in their hands right now.

06:07.520 --> 06:12.640
What results is a gap in productivity between design and manufacturing capabilities.

06:12.640 --> 06:18.800
A company like AMD might need a few years to come out with a 5nm chip, even if TSMC had the

06:18.800 --> 06:24.560
capacity for them to use. Imagine if mega customers Apple and Huawei weren't around,

06:24.560 --> 06:28.720
would TSMC even bother to put out a 5nm process node so quickly?

06:29.600 --> 06:35.120
Better EDA tools are the only practical way that chip design teams can keep up and close the

06:35.120 --> 06:42.720
productivity gap. Commercial automatic physical design systems began emerging in the 1980s.

06:43.360 --> 06:48.240
They came as a result of not just improved computing power, but also powerful new display

06:48.240 --> 06:54.480
technologies. The first EDA software literally just drew things on paper like a printer. The advent

06:54.480 --> 07:00.480
of reasonably priced storage tube class CRT screens made the industry much more accessible to industry

07:00.480 --> 07:06.880
designers. The industry also pioneered and adopted new approaches to chip design that unlocked more

07:06.880 --> 07:12.640
of the EDA industry's automation powers. Engineers and universities advocated for a more

07:12.640 --> 07:17.760
space efficient design style on pencil and paper called Programmable Logic Arrays.

07:18.480 --> 07:23.120
But EDA software for this style did not scale very well. You had to do a lottery drawing

07:23.120 --> 07:29.040
whenever components changed. And conceptually, people had to handle the design at both a high

07:29.040 --> 07:34.800
and low level of abstraction. This made design difficult. It is kind of like having to architect

07:34.800 --> 07:40.720
a house while crafting the bricks at the same time. The semiconductor industry on the other hand

07:40.720 --> 07:46.080
developed a standard cell style. Here, designers choose from a library of standardized groups of

07:46.080 --> 07:52.400
gates called cells and decide how they are wired together. This allowed the design process to

07:52.400 --> 07:57.360
split into the separate logical and layout functions I mentioned earlier. It abstracted

07:57.360 --> 08:02.640
away the bottom level stuff and let people focus on their own areas. And because the cells are

08:02.640 --> 08:08.480
standardized, EDA software can consistently create electrically and physically correct designs all

08:08.480 --> 08:14.480
the time. Several people criticized the style for being less area efficient. Some early standard

08:14.480 --> 08:20.160
cells had half of their area being taken up by routing. But because its EDA works so much better

08:20.160 --> 08:26.080
for designers workflow, it became the industry standard. Think of it like with programming.

08:26.080 --> 08:30.640
You can write, test, and debug a program much faster if you did not have to sit and wait several

08:30.640 --> 08:35.840
minutes for your code to compile every time you made a change to it. Such a programming language

08:35.840 --> 08:42.400
is likely to gain traction even if it isn't as efficient as other alternatives. An EDA industry

08:42.400 --> 08:47.440
sprouted to service various parts of the chip design process. Over time, those software firms

08:47.440 --> 08:52.960
consolidated has task got harder and required integration across various stages of the design

08:52.960 --> 08:58.400
cycle. Their proprietary libraries would end up being the de facto standard across the entire

08:58.400 --> 09:04.720
industry. The two leading companies in this space are Cadence and Synopsys. Both are based in the

09:04.720 --> 09:10.960
United States and are publicly traded. Cadence has a 34 billion dollar market capitalization

09:10.960 --> 09:17.520
and Synopsys 36 billion. The two companies are the creation of a long series of acquisitions.

09:17.520 --> 09:21.600
They have been involved in the industry for a long time and have struck alliances with large

09:21.600 --> 09:27.360
players like TSMC and Samsung Foundry to help solve problems in transitioning a chip from the

09:27.360 --> 09:33.920
design to the real world. They just make things so much easier. For fabulous entrants looking to

09:33.920 --> 09:39.200
enter into the semiconductor world, they likely have to go through these EDA vendors and get their

09:39.200 --> 09:44.400
software to get started. Your company might have to pay millions of dollars to acquire a whole bundle

09:44.400 --> 09:50.560
of software tools, a common trick in the SAS world. Beyond just the EDA tools, the companies own a

09:50.560 --> 09:56.720
lot of IP as well. They make money licensing out useful IP blocks for standard functions in a chip

09:56.720 --> 10:02.800
like IO. Kind of like how in Canva, the online graphics design tool that I use to make my videos,

10:02.800 --> 10:07.920
you have to pay one dollar for this little emoji or flower of clip art that you want to use in your

10:07.920 --> 10:13.200
design. Sure, I can go find something else or even make my own, but why bother? This works the best

10:13.200 --> 10:18.320
and is the most convenient. As a result, both companies have very good gross margins and strong

10:18.320 --> 10:23.760
cash flows. Software subscriptions and IP license businesses are like that. And so they can spend

10:23.760 --> 10:28.320
a whole lot on R&D to further extend their current advantages. So I would say that their

10:28.320 --> 10:33.680
positions are pretty rock solid. Their stock valuations already reflect all of this in case

10:33.680 --> 10:38.240
you're wondering, this stuff ain't cheap. I would not go out and start buying these company

10:38.240 --> 10:43.520
stocks anytime soon. There are a few companies out there challenging the two major incumbents.

10:43.520 --> 10:47.840
Google apparently made their own EDA tool to design a recent YouTube chip. That's really

10:47.840 --> 10:52.880
interesting. There are a few Chinese alternatives like Empyrion and Sellecksoft that recently

10:52.880 --> 10:58.880
have gotten increased attention due to the US-China trade war and not to mention open source EDA

10:58.880 --> 11:05.520
tools for things like risk five. Such efforts as of now remain undeveloped and lag the market leaders.

11:06.960 --> 11:11.280
For EDA enabled chip design, exciting new developments remain on the horizon.

11:11.280 --> 11:16.000
Programmers are applying machine learning to EDA software and that is showing some promising new

11:16.000 --> 11:21.920
results. For example, machine learning can help EDA tools find an optimal route for the wires

11:21.920 --> 11:27.280
between the chip circuits. It can help simulate what sorts of patterns a photo mask design will

11:27.280 --> 11:32.080
project during the lithography phase. And outside of the machine learning, vendors are still

11:32.080 --> 11:37.760
experimenting with new techniques to best adapt to this new industry trend of systems on chip or

11:37.760 --> 11:44.480
SOC designs. Without EDA software, the cost of creating new chip designs would soar even faster

11:44.480 --> 11:49.200
than they already are. They are a critical part in the industry and today's amazing chips would

11:49.200 --> 11:54.640
not exist without them. Alright everyone, thanks for watching, that's it for tonight. If you want

11:54.640 --> 11:58.000
more content you can like and subscribe to the channel, I would appreciate it if you did.

11:58.640 --> 12:01.120
And remember to hit up the email newsletter and sign up.

12:01.760 --> 12:06.720
Want to send me an email? Drop me a line at john at asianometry.com. I love getting letters from

12:06.720 --> 12:10.240
viewers. Until next time, I'll see you guys later.

