start	end	text
0	14080	Let's go back to 1984 in the UK.
14080	19880	In a few short years, home computers have gone from practically non-existent to commonplace.
19880	24760	Almost every child in the country has access to a BBC microcomputer at school, and the
24760	28160	ZX Spectrum is topping out Christmas wish lists.
28160	33240	And despite a crash in the video games market in the USA, games are still flying off the
33240	34240	shelves here.
34240	39840	While there's plenty choice, almost every game available to play at home is some variation
39840	40840	of the same thing.
40840	46240	A 10 minute tops arcade style run at a high score.
46240	52240	Longer form strategy and adventure games do exist, largely in the form of text adventures,
52240	57560	sometimes with accompanying imagery, but not with real time graphics, and certainly not
57560	59920	in an open world.
59920	65120	Home computers are more popular than consoles in the UK, and let's be honest, many of the
65120	70920	games on these look, well, take a look for yourself.
70920	75440	As for 3D graphics, the choices are even more limited.
75440	82120	Every 3D game on the market is either not actually 3D, or is not really a game.
82120	89720	There are a few flight simulators, technically impressive for the day, but not exactly immersive.
89720	97040	Sublogix FS1 Flight Simulator was arguably the first full 3D game created for the home,
97040	98680	and it looks like this.
98680	102760	Doesn't this gameplay look fun?
102760	108720	And the frame rate, let's just say, it has a frame rate.
108720	114960	Microsoft Flight Simulator 2 has just released, but that requires a $5,000 IBM PC to play,
114960	119480	and no one had one of those outside the office.
119480	124480	Arcade cabinets with more specialized hardware have taken a step into 3D gaming, but I can't
124480	132160	find a single example of a true 3D game that isn't a flight simulator prior to 1984.
132160	137800	Battle zones are competitor, but movement and object tracking is restricted to two axes,
137800	141520	a sort of pseudo 3D game.
141520	147400	And there are a few other on-rails shooters, limited in scope, and always a slave to the
147400	150120	high score.
150120	154720	The best-selling games at the moment are Pac-Man and Space Invaders.
154720	158280	You probably remember them looking like this.
158280	161360	Problem is, those are the arcade versions.
161360	168880	If you wanted to play them at home on your Atari 2600, this is what they looked like.
168880	171640	Then Elite was released.
171640	188960	Elite looked like this.
188960	192680	It changed gaming in Europe overnight.
192680	195080	It was an open universe game.
195080	200320	No high score, no restrictions, and full, true 3D graphics.
200320	207760	A procedurally generated universe, a backstory in the form of a novella, pirates, trading,
207760	214240	asteroid mining, an economy, and you could play it at home or at school.
214240	218920	Non-European viewers are unlikely to be familiar with the impact Elite had on gaming and computing.
218920	226640	But here in the UK, the 20th of September 1984, was the day computer games became a
226640	243920	serious business.
243920	248160	This is a story I've been obsessed with since I was a teenager.
248160	252880	It shaped my life personally, and there is a direct path between some of the innovations
252880	257480	made by Elite's creators and my professional work today.
257480	262320	This may come as a surprise to some subscribers, but I previously worked in the computer games
262320	263720	industry.
263720	268760	Not for very long, but my first role as a data scientist after quitting engineering
268760	272280	was for a UK-based games developer in Dundee.
272280	277040	I even learned Unity and coded up a couple of games myself during this period.
277040	282520	Of course, I wouldn't use Unity now after recent events.
282520	285840	The story of Elite's creation is already told on YouTube.
285840	290800	However, I'm not going to focus too much on the history and the individuals.
290800	295240	Instead, I'd like to dive into some of the technical details on how the game was even
295240	299320	possible and how some of its major challenges were tackled.
299320	303960	And I promise, absolutely zero programming knowledge is necessary to understand what
303960	306640	I'll be discussing.
306640	313440	Before we get into the full story, I'd like to make a quick political disclaimer.
313440	316740	Elite is very much a British success story.
316740	322040	It was a rare case of government, industry, the academic sector, and even state-funded
322040	327040	media inadvertently working together to produce something amazing.
327040	332160	The government at the time, however, was one of the most contentious in UK history.
332160	333520	The Thatcher government.
334080	339000	Now, I try to adopt a policy on this channel of not getting bogged down in politics, but
339000	341800	also not skirting around them.
341800	345480	I don't see it as my role to tell viewers what to think politically.
345480	351120	So, let's just say that sometimes bad governments do good things, and sometimes good governments
351120	353000	do bad things.
353000	356520	And it's up to you to decide if that applies here.
356520	367960	Let's take a look at the machine Elite was originally coded on and created for.
367960	371440	This is the BBC Micro.
371440	375520	This video was a good excuse for me to finally get one.
375520	379720	Of course, I got hold of a broken one to bring back to life.
379720	384640	When dealing with technology that's older than me, I always feel to be worthy.
384640	387280	I have to fix it first.
387280	390800	I'll overlay some footage of the restoration here.
390800	396200	In fact, mine came with a cassette recorder, with a copy of Elite ready to go.
396200	401960	Yes, I could have just bought an SD card reader, but loading a game from a cassette tape was
401960	407280	one of those little things I just had to experience.
407280	412800	In the late 1970s, the UK was staring a disaster in the face.
412800	417440	Over in the US, the development of cheap microcontrollers had, in the space of a couple
417440	423240	of years, transformed computers from cabinet-sized mainframes that cost tens or even hundreds
423240	431520	of thousands of dollars to the likes of the Apple II, the TRS-80 and the Commodore PET.
431520	436360	Government and businesses in the US, and in Japan, and even other Western European countries
436360	438920	were quickly embracing the change.
438920	444640	In a small but dedicated portion of their population were becoming proficient in computing,
444640	448920	be it at home or in the workplace.
448920	453120	The UK was emerging from a financial crisis.
453120	456480	When isn't the UK in a financial crisis?
456480	461080	Traditional manufacturing industries such as mining, steelworking and shipbuilding were
461080	463600	either dying or dead.
463600	466120	No one was thinking about computers.
466480	471520	Likewise, the government was preoccupied with all of the above.
471520	475800	An unlikely contender resolved to address the issue before it was too late.
475800	482840	The UK's state-funded, but not state-controlled, broadcaster, the BBC.
482840	487120	The BBC acted fast and they acted decisively.
487120	491720	The Compute Alliteracy Project was to be a collection of TV and radio series intended
491720	499000	to teach the nation that computers weren't scary, obscure or just for nerds.
499000	504520	A tender was put out for a computer model to be adopted by the BBC for these broadcasts
504520	510760	and crucially it was to be adopted by schools too, with the government subsidising half
510760	515320	of the cost of every computer purchased by a school.
515320	519960	By this point, Clive Sinclair had released the ZX81.
519960	527040	This was an absolute bare-bones computer, but it was cheap, incredibly cheap.
527040	531680	And for that reason, I'll never knock it as many others do these days.
531680	538360	For less than Â£200 in 2023 money, a family could have a fully functioning 8-bit computer
538360	540360	at home.
540360	544880	Sinclair put it forward to the BBC for consideration, but was rejected.
544880	548280	It didn't come close to their specifications.
548280	555000	In what seems like a rare case of due consideration, the BBC required a surprisingly capable system
555000	560840	with network capability, full colour graphics and expansion capability.
560840	567880	Acorn Compute has rushed out a prototype for the BBC in four days.
567880	569960	This resistor here?
569960	573120	That simulates an engineer's finger on the board.
573120	575440	The system wouldn't boot without it.
575440	579680	And no one really knows what purpose it serves to this day.
579680	584320	Despite its whirlwind conception, Acorn's prototype was the only system that met the
584320	586280	BBC's specifications.
586280	592680	It exceeded some, with blisteringly fast RAM for the day, and a frankly wonderful potential
592680	594800	for expansion.
594800	603200	The BBC Micro Model B used a MOS 6502 CPU clocked at 2GHz, and it pushed it to its limits given
603200	605560	the Micro's IO capability.
605560	611680	32KB of RAM was available, along with an operating system that included a modified version of
611680	615640	BASIC, known as BBC BASIC.
615640	618760	BASIC was the programming language of the time.
618760	622120	In fact, the Micro boots straight into it.
622120	627640	Uniquely, assembly code can be inserted in line with BASIC commands.
627640	632880	If you're not familiar with assembly, don't worry, we'll get there soon.
633560	638160	The BASIC capability was provided via Acorn's proprietary Econet, and the capability for
638160	643680	a second co-processor was even provided via the tube interface.
643680	649360	This can even be used today to connect a Raspberry Pi, something I will definitely be doing in
649360	651880	the future.
651880	657960	The BBC Micro isn't a looker, but that large form factor makes it easy to add expansion
657960	662160	boards, just four screws to undo it and you're in.
662160	666480	There are plenty of empty ROM sockets for you to add more functionality.
666480	668520	And I have to mention the keyboard.
668520	673040	The Micro has a really nice mechanical keyboard.
673040	675480	Apparently that contributed significantly to the cost.
675480	679680	Right, okay, this is me back again three weeks after saying that.
679680	684160	Totally unscripted here by the way, and I've just spent an hour tapping away on that keyboard.
684160	689920	Yeah, it's very well built in that like a school child isn't going to destroy it.
689920	691920	It's a very slow keyboard though.
691920	694600	I don't know if I'd say it's a fantastic keyboard now.
694600	697840	Right, okay, back to three weeks ago Alex.
697840	700880	And indeed the Micro was not cheap.
700880	705360	About Â£1,600 in 2023 money.
705360	710280	Though I will note that was about the same cost as a Commodore 64, which is probably
710280	713680	the closest equivalent machine on the US market.
713680	719720	Yet, and this seems unbelievable today, the government still agreed to subsidise this
719720	722240	cost to schools.
722240	728040	By the end of the computer literacy project, 85% of UK primary and almost every secondary
728040	731880	school had at least one BBC Micro.
731880	737120	Almost every child in the country had free access to a good computer and free tuition
737120	742680	via the BBC, a project that seems almost too good to be true today, and probably the reason
742680	748920	why anyone born between about 1970 and 2000 in the UK seems to be perfectly proficient
748920	755720	with a computer.
755720	757880	Now let's look at the game itself.
757880	761920	Elite is an open world space exploration game.
761920	768080	We begin docked at Lavais station with 100 credits, 3 missiles, a pulse laser and a Cobra
768080	770680	Mark 3 spacecraft.
770680	775720	Leaving the station, we make a hyperspace jump to another system of our choice.
775720	779760	Every system has a summary screen denoting the government type and system wealth and
779760	782360	major industry.
782360	786960	Until we can afford to better equip our ship, novice players must now make a mad dash to
786960	791640	the system planet, where they'll find it's respective space station.
791640	793300	Time to dock.
793300	799640	This is notoriously difficult, though I'm not really sure why, here's how to do it.
799640	804760	Just ignore the manual and go in at half speed.
804760	808980	Every system has different commodity prices, and we're able to make a profit by trading
808980	811560	between appropriate systems.
811560	815880	This is a surprisingly involved process, so keep a notebook handy.
815880	819360	And probably don't trade anything illegal for now unless you want the galactic police
819360	822200	on your case.
822200	824600	Of course it's rarely this simple.
824600	830840	If you've warped into an anarchic system, get ready to be constantly harassed by pirates.
830840	835960	Even in the safest systems, it's rare to make a clean run to the home planet.
835960	839600	Later in the game, when we're better equipped, we can make a profit by bounty hunting these
839600	841200	pirates.
841200	844000	But for now, better get saving for that beam laser.
844000	846760	Oh and there are Tharguides too.
846760	851040	Those are aliens with tough flying saucers that spawn drones, and they're equipped with
851040	855200	electronic countermeasures so they'll render your missiles useless.
855200	857560	And that's the essence of it really.
857560	862680	It was a complete step change in computer games in 1984.
862680	867200	Short of the flight simulators I mentioned earlier, which as I said I would only loosely
867200	874200	define as games, there was nothing else with true 3D graphics available on an arcade machine,
874200	876960	let alone a home computer.
876960	882720	The universe of 8 galaxies, each consisting of 256 stars, along with their descriptions,
882720	887160	market prices and system characteristics, was procedurally generated.
888160	893680	The closest the game has to a high score is the player ranking, starting at harmless
893680	898320	and eventually reaching elite for only the most dedicated players.
898320	903000	You can be a trader, a bounty hunter, a pirate, an asteroid miner, or some combination of
903000	905000	all of these.
905000	909280	Truly an open world game with infinite choice and potential.
909280	913960	Sophie Wilson called it the program that couldn't have been written, and Steve Furber said it
913960	917480	had the BBC design team staggered.
917480	919920	Who are Sophie Wilson and Steve Furber?
919920	927600	Oh, they're just the pair that built the BBC Micro prototype in four days.
927600	932440	In what's now regarded as one of the greatest programming feats of all time, Elite was created
932440	937320	over the course of two years by Ian Bell and David Braben.
937320	942720	Both met while studying at Cambridge, though it seemed almost unfathomable for such a complex
942760	945760	game to be created by just two individuals.
945760	949920	This was actually unusual in UK development at the time.
949920	955280	Almost every game published in the UK prior to Elite had been coded by sole developers.
955280	960840	The UK games industry consisted almost exclusively of bedroom coders, sending in cassettes to
960840	965440	various small publishers, hopefully in exchange for a few hundred pounds and some bragging
965440	967560	rights.
967560	972680	When Bell approached Acornsoft, the software wing of Acorn computers, it was clear they'd
972680	976320	created something that had never been seen before.
976320	981400	Acornsoft therefore not only agreed to publish, but also decided to stage the first major
981400	985000	and highly publicised release of a game in the UK.
985000	989720	They ran TV adverts and hired out a theme park for the launch.
989720	996720	This seems trivial now, but this was completely unheard of in 1984.
996720	1002280	As I showed in the intro, Elite completely eclipsed any competition.
1002280	1007640	Just immediately it became a national sensation, eventually selling over 100,000 copies for
1007640	1013000	the BBC Micro and 600,000 across all platforms.
1013000	1022000	Braben and Bell became celebrities who effectively jumpstarted the UK gaming industry.
1023240	1028360	To build a universe in a 1980s computer, we must first do a deep dive into the hardware
1028360	1030720	available at the time.
1031560	1036440	To understand the code, it's necessary to understand the hardware first.
1036440	1040640	There are far more comprehensive sources available in the description, so I'll keep it as brief
1040640	1042360	as possible.
1042360	1048200	By the end of this chapter, you'll understand how a CPU works.
1048200	1052880	The BBC Micro was similar in architecture to rival machines of the time, using the same
1052880	1058040	processor as the Apple II, Commodore 64 and the Atari 2600.
1058040	1064920	That processor was the Moss 6502, a chip ubiquitous with the 1980s, and the driving force between
1064920	1067920	the home computing revolution.
1067920	1074080	The 6502 is able to receive and transmit 8 bits of data in a single cycle.
1074080	1079960	Data in this case may refer to actual data moving to or from the CPU, or it may refer
1079960	1081760	to commands.
1081760	1087160	Each command the CPU is capable of carrying out is encodable as an 8-bit string.
1087160	1090560	We'll see some examples later.
1090560	1099000	This 8-bit or 1-byte data bus is why we refer to the 6502 as an 8-bit processor.
1099000	1103680	In addition to the data bus is a 16-bit address bus.
1103680	1109480	This is used to address individual locations, or addresses, in memory.
1109480	1114520	Let's simplify the layout and see how this is achieved.
1114520	1119720	To write a byte of data to memory, the CPU sends the chosen 16-bit address to the memory
1119720	1121760	on the address bus.
1121760	1126320	The byte of data to be stored is then sent down the data bus, and the memory ICs are
1126320	1129760	configured to store that byte at the given location.
1129760	1134320	Likewise, sending an address down the bus results in the byte stored at that address
1134320	1137160	being returned to the CPU.
1137160	1141960	Now let's have a look at the memory in the BBC Micro specifically.
1141960	1149120	If we imagine zooming in on it, we can imagine every addressable byte being stored in sequence.
1149120	1152040	Each address holds a single byte.
1152040	1158280	As addresses are 16 bits in length, the maximum possible address is 2 to the power of 16,
1158280	1164960	which equals 65,536 bytes in total, or 64 kilobytes.
1164960	1169280	And indeed, the Micro had 64 kilobytes of memory available.
1169640	1173840	However, 32 kilobytes of this is read-only.
1173840	1179320	It contained the operating system itself, and is therefore not writable.
1179320	1185640	The other 32 kilobytes is the RAM, and is the sum total space available to hold programs
1185640	1188080	and any stored variables.
1188080	1192200	However, not all of this is usable as such.
1192200	1197240	When I began studying the architecture, one of the first questions I asked was,
1197240	1199520	but where is the video memory?
1199520	1203520	Which sort of shows how clueless I was.
1203520	1209320	Every time we send a frame to display on the screen, that frame must be stored somewhere.
1209320	1216720	I hadn't anticipated that back in the 1980s, this somewhere, or frame buffer, as we call it,
1216720	1219440	also lived in main memory.
1219440	1224160	Every location on the screen maps to a location in memory.
1224160	1229280	Change the value of a byte in the frame buffer, and the corresponding pixel, or set of pixels,
1229280	1232160	on the screen will also change.
1232160	1234520	We'll go into more detail later.
1234520	1241080	But in the case of Elite, 7,936 bytes were reserved as the frame buffer,
1241080	1246360	used solely for storing the values for physical pixels to be drawn on screen.
1246360	1252600	This area of memory is read by a collection of chips referred to as the Vidproc, or video processor,
1252600	1260320	responsible for translating the byte value at each memory location to a physical pixel on screen.
1260320	1262120	We're still not done.
1262120	1267800	The first 3,584 bytes of memory are allocated to workspaces,
1267800	1273760	which are, loosely speaking, areas that may be used to store variables, but not code.
1273760	1276960	Let's take a closer look.
1276960	1281800	Memory is actually split into 256 byte pages.
1281840	1289240	The first is the zero page, and may be used to store variables that require fast access by the CPU.
1289240	1295600	As zero page addresses can be defined in just 8 bits, the CPU is able to access them more quickly,
1295600	1299560	and they were used extensively in Elite's source code.
1299560	1301600	Next is the stack.
1301600	1304960	This is another temporary storage area for variables.
1304960	1308120	The stack operates on a first in, first out basis.
1308120	1315800	Pushing a byte to the stack means that byte will be the first retrieved when subsequently calling from the stack.
1315800	1322680	Most of the remaining space here is allocated to other workspaces that can be used to store temporary variables.
1322680	1327560	However, one kilobyte is available as the language workspace.
1327560	1333320	This isn't usable for code storage, but it could be used to store text expressions.
1333320	1336800	And this was most certainly used by Bell and Braben.
1336800	1344560	These expressions are persistent and defined in the source code, so they very much form part of it.
1344560	1351280	The remaining 21,248 bytes of memory are available to store our program.
1351280	1360000	So this gives a total of 21,248 bytes of program memory and 1,024 bytes in the language workspace.
1360000	1366880	By my reckoning, that's a total of 22,272 bytes available.
1366880	1373640	Reading around some other sources, the actual memory available was actually 21,952.
1373640	1376200	Perhaps I missed a page somewhere.
1376200	1384280	Either way, that's less than 22 kilobytes to fit an entire Open World 3D universe.
1384280	1387680	And Elite fit within that 22 kilobytes.
1387680	1389840	It's not very much.
1389880	1396120	To add some context, if I go to PC Partpicker and look at a Â£1,600 PC,
1396120	1399720	which is about the cost of a BBC Micro in today's money,
1399720	1405000	we come up with something with an AMD Ryzen 7 CPU.
1405000	1409080	Obviously, Elite would fit into the main memory millions of times over.
1409080	1412400	But modern systems don't just use standard RAM.
1412400	1418560	CPUs incorporate relatively tiny amounts of extremely high-speed memory on the chip itself.
1418560	1420480	This is called the cache.
1420480	1424480	Would 22 kilobytes fit on a modern CPU cache?
1424480	1428160	The question is barely worth asking.
1428160	1431240	We have to zoom in to the individual compute cores.
1431240	1433640	The Ryzen 7 has eight of them.
1433640	1436880	Each has its own dedicated Level 2 cache.
1436880	1440040	It's still not even worth asking the question at that point.
1440040	1444280	We have to go inside each core to the Level 1 cache,
1444280	1447240	the fastest memory available in the system.
1447280	1449760	The 64 kilobytes per core.
1449760	1454760	So Elite would fit inside each core of a modern processor twice.
1454760	1461200	In fact, it had also sit inside the Level 1 cache of every compute module of the GPU.
1461200	1465520	And it had fit inside the controller chip for the SSD as well.
1465520	1469760	It's genuinely difficult to find a place Elite wouldn't fit.
1469760	1471760	So we get the point.
1471760	1475760	Braben and Bell were severely constrained when it came to memory.
1475760	1480360	And that's probably the most discussed limitation they were able to overcome.
1480360	1485280	But I'd argue they were similarly, if not more limited, when it came to compute.
1485280	1489280	Just recall the frame rate on those early flight simulators.
1489280	1494280	Let's take a look at how the 6502 worked.
1494280	1497360	We see our data and address buses.
1497360	1499360	I'm going to include the memory here.
1499360	1501360	Obviously it wasn't inside the chip,
1501360	1506360	but showing it connected to the buses makes this section much easier to understand.
1506360	1509360	CPUs contain registers.
1509360	1512360	These are simply storage cells,
1512360	1515360	able to hold a single piece of data.
1515360	1521360	The 6502 has a one 16-bit register, the program counter.
1521360	1526360	This holds the address of the current byte in memory that's currently being read.
1526360	1532360	This may be thought of as the current position within the program being executed.
1532360	1538360	Next to the index registers, there are two of them, referred to X and Y.
1538360	1541360	They're both 8 bits in size.
1541360	1549360	In addition to holding a single byte value, they can be incremented or decremented by one throughout the use of appropriate commands.
1549360	1553360	This makes these registers useful as loop counters.
1553360	1557360	The accumulator is another 8-bit register.
1557360	1563360	Any arithmetic operations must be carried out using the value stored in the accumulator.
1563360	1568360	For this reason, the accumulator is connected directly to the arithmetic logic unit.
1568360	1574360	This is a collection of logic gates able to perform basic arithmetic operations.
1574360	1579360	The value from the accumulator is fed in, along with a second value from the data bus,
1579360	1582360	and the ALU performs the required operation.
1582360	1588360	In the case of the 6502, the ALU is able to add and subtract 2 8-bit numbers,
1588360	1595360	along with a few bitwise operations, specifically OR and bit shifts and bit rotations.
1595360	1603360	That's it. The 6502 is only able to perform very simple arithmetic and logical operations.
1603360	1609360	And remember, we can only operate on 8 bits. It can only count up to 255.
1610360	1616360	The result from these operations is stored back in the accumulator.
1616360	1624360	The status register is an 8-bit register, where each bit signifies a result from the last executed operation.
1624360	1633360	For example, if an addition is performed and the resulting value is above 255, i.e. not storable in the accumulator,
1633360	1641360	the 8 least significant bits will still be stored in the accumulator, and the carry flag will be set to high.
1641360	1651360	In addition to the carry flag, the other bits flag 0 value, interrupt disable, decimal mode, break, overflow, and negative value.
1651360	1658360	We won't worry too much about these for now, but know that they can be used to trigger branches in a program.
1658360	1664360	Remember that second page of memory that formed the stack? It's represented here.
1664360	1671360	The final register is the stack pointer, which stores the address of the highest populated location in the stack.
1671360	1677360	We won't be directly referring to it again, I've just included it to be complete.
1677360	1689360	And that's all we have to work with. By today's standards incredibly simple, but still a fully functioning CPU, with less than 4,000 transistors.
1689360	1694360	There are three main families of commands that the 6502 is able to execute.
1694360	1702360	Commands, or instructions as they're referred to more correctly, are represented by three-letter operation codes.
1702360	1707360	Physically, each is just a byte sent down the address bus.
1707360	1713360	The first family is instructions that move data to or from the registers and memory.
1713360	1718360	Let's see what happens when we run the store accumulator instruction.
1718360	1723360	This simply stores the value currently in the accumulator to memory.
1723360	1728360	First, the desired address to store the value at is sent to memory via the address bus.
1728360	1733360	Then the 8-bit value in the accumulator is sent to memory via the data bus.
1733360	1740360	I'll leave it visible for now so we can imagine a byte of memory at a given address.
1740360	1748360	We could then load this value into the X register using the LDX instruction, or loadX.
1748360	1753360	The address is sent via the address bus, and the value is copied to the X register.
1754360	1760360	With similar commands, we can send data between all available registers and memory.
1760360	1764360	The next family are the arithmetic commands.
1764360	1769360	AddWithCarrie adds a value from memory to the current accumulator value.
1769360	1776360	Here the memory address is sent via the address bus, and the byte in memory is sent to the ALU.
1776360	1782360	The value currently in the accumulator is also sent to the ALU, where the two are added.
1782360	1786360	The result is stored in the accumulator.
1786360	1788360	Remember the carry flag.
1788360	1794360	If the resulting value is greater than 255, the carry flag is set to 1.
1794360	1800360	But for now, let's assume there's no carry so the flag remains at 0.
1800360	1806360	And that leads us to the final family of instructions, branches and jumps.
1806360	1813360	The branch on carry clear causes a jump to a different location of our program if the carry flag is 0.
1813360	1815360	Here's how it works.
1815360	1824360	The carry flag is checked, and if it's 0, the address to which we want to jump is passed into the program counter.
1824360	1831360	Remember addresses are 16 bits, so two separate bytes must be passed down the data bus to achieve this.
1831360	1835360	This means the next address will be that of the jump location.
1835360	1839360	This is how we implement if statements.
1839360	1841360	And finally a jump itself.
1841360	1849360	The JSR, or jump to subroutine instruction, is a direct instruction to jump somewhere else in the program.
1849360	1854360	When we execute it, the current program address is pushed to the stack.
1854360	1860360	This allows us to subsequently return to the current location by pulling from the stack.
1860360	1866360	The new program location is then passed into the program counter via the data bus.
1866360	1868360	And that's everything.
1868360	1875360	We can move 8 bit values, do simple arithmetic on them and jump to different places in our code.
1875360	1877360	That is it.
1877360	1889360	Let's have a look at my attempt to turn these simple instructions into something on screen.
1890360	1896360	The three families of operation codes discussed collectively form the 6502 assembly language.
1896360	1903360	Almost all programming today is done with higher level languages, where we don't need to worry about physical hardware so much.
1903360	1909360	Even in the 1980s, most coding was done using the likes of BASIC, C and FORTRAN.
1909360	1914360	However, high level languages require considerably higher memory usage.
1914360	1921360	And they must be compiled to assembly, resulting in less efficient use of the CPU and therefore slower running.
1921360	1925360	Elite, therefore, was programmed in assembly.
1925360	1934360	I decided the only way I could possibly do Elite justice and make an actually informative video was to learn 6502 assembly.
1934360	1941360	And, well, let's just say my 10 years of programming experience were almost useless.
1941360	1948360	I set myself the challenge of creating anything in 3D on the micro, but using assembly only.
1948360	1955360	I'm happy to say I managed to achieve this, but it took longer than producing any other part of this video.
1955360	1959360	So, enough tiptoeing around, let's see the final result.
1959360	1962360	Prepare to be underwhelmed.
1962360	1966360	So, yeah, that took me 5 days.
1966360	1972360	It uses lookup tables to plot the positions of the vertices in 3D space.
1972360	1976360	The tables are called from a subroutine which draws a single line.
1976360	1984360	The appropriate value from each table is retrieved by using the values in the Y register, which increments every time a line is drawn.
1984360	1991360	It's tiny because I cheated and used an inbuilt line drawing routine from the operating system.
1991360	1997360	But that divides the screen into 1200 by 1200 points.
1997360	2001360	But we can only count to 256 with this 8-bit system.
2001360	2010360	And I definitely wasn't going to go and get my head around dealing with that, so I just made the whole thing 250 by 250 units in size.
2010360	2018360	It flickers like mad too, but that's true of Elite as well, so I don't feel too bad about that part.
2018360	2028360	Okay, now let's go and see how to code in 6502 assembly properly.
2028360	2032360	Elite was initially released on both tape and disc versions.
2032360	2038360	The tape version is the 22 kilobytes one, as it had to fit entirely within memory.
2038360	2041360	Loading from a tape during gameplay is not really possible.
2041360	2047360	The disc version has a few more features, like additional ships, and you can only do asteroid mining in that version.
2047360	2051360	As these could be loaded in from the disc while the player was docked.
2051360	2055360	The code itself for the two versions is essentially the same.
2055360	2059360	The disc version just contains some more stored variables.
2059360	2067360	And in case you're wondering, a tape version was absolutely necessary if ACONsoft wanted to actually sell any copies to the home market.
2067360	2074360	Back in 1984, a disc drive in the UK cost as much as the BBC Micro itself.
2074360	2083360	Although the memory constraints not as tight when loading from disc, the limited compute capability of the 6502 was still a huge challenge.
2083360	2087360	Just recall the one frame per second flight simulator I showed earlier.
2087360	2091360	For every frame in flight, every vertex on screen needs calculating.
2091360	2094360	Every line between them must be calculated.
2094360	2097360	An individual pixel is inserted into screen memory.
2098360	2104360	The 6502 in the BBC Micro operated at 2 MHz, or 2 million cycles per second.
2104360	2114360	This sounds like a lot at first, but as we go through some examples, we'll get a taste of how many individual operations need to be carried out to draw a single frame.
2114360	2121360	Bear in mind, every assembly instruction requires two CPU cycles at absolute minimum.
2121360	2126360	The subroutine for just drawing a single pixel requires 20 operations.
2126360	2132360	And that's after all the necessary calculations have been performed to decide where to even draw that pixel.
2132360	2137360	So for a full screen, it's easy to see how cycles are eaten up quickly.
2137360	2142360	The code for Elite is essentially one large script of 6502 instructions.
2142360	2151360	Trying to understand any of this is daunting at first, but it becomes much more manageable when we understand that it consists of a main gameplay loop.
2151360	2158360	Depending on the current state of play, this loop calls upon individual subroutines as and when necessary.
2158360	2164360	Each subroutine performs a simple task, such as drawing a line or updating the player's kill count.
2164360	2172360	So the code is very much modular, and understanding individual modules allows us to build up to something bigger.
2172360	2175360	The full source code for Elite is available on GitHub.
2176360	2183360	When I set out to make this video, I was going to go through the main flow of the code and broadly explain how the main features are implemented.
2183360	2187360	However, it turns out someone's already done all the work for me.
2187360	2195360	Mark Mokson annotated every line of the original code and has a frankly incredible website which breaks down every element of it.
2195360	2201360	It also includes many deep dive articles on some of the technical details of the code.
2201360	2203360	This left me with a problem, however.
2203360	2209360	I wasn't going to just regurgitate Mark's Herculean work here and try and take credit.
2209360	2218360	So instead, this section of the video will walk through some choice examples and show how the code maps back to the 6502 itself.
2218360	2222360	And I'll show some of my own visuals to make everything easier to understand.
2222360	2235360	Remember how just under a quarter of the available memory was dedicated to storing pixel values to draw on the screen?
2235360	2237360	Let's talk more about that.
2237360	2246360	Drawing graphics on the BBC Micro is typically done at a resolution of 320 by 256, and eight colors are available.
2246360	2251360	So every pixel would require three bits of memory to store its color value.
2251360	2256360	That's because there are eight possible three-bit numbers, one for each color.
2256360	2263360	So to store a frame at this resolution, we require 320 by 256 by three bits.
2263360	2270360	That comes to 30 kilobytes just for the frame buffer, essentially leaving no room for our program.
2270360	2272360	Oh dear.
2272360	2276360	Okay, so we have two options to reduce the frame buffer.
2276360	2280360	The first is to reduce the number of bits per pixel.
2280360	2285360	Let's just represent each pixel with a single bit, one or zero.
2285360	2289360	That reduces our frame buffer to 10 kilobytes, not bad.
2289360	2296360	But with only a binary option for each pixel, that means we're limited to just black and white.
2296360	2301360	The second option is to reduce the number of pixels to plot in the first place.
2301360	2308360	By reducing our resolution to 160 by 256 and using say four colors only,
2308360	2312360	we'd also reduce the frame buffer to about 10 kilobytes.
2312360	2317360	So it looks like we'd have to choose between either high resolution or color.
2317360	2320360	We can't have both.
2320360	2322360	Or can we?
2322360	2324360	Look closer.
2324360	2328360	The combat viewing elite has high resolution but no color.
2328360	2332360	The dashboard is in color but at low resolution.
2332360	2335360	This was elite's first unique innovation.
2335360	2340360	Before any pixels are plotted on an individual frame, a timer's started.
2340360	2343360	We know the number of pixels to plot in high resolution.
2343360	2347360	And we know the rate at which these pixels are plotted to the screen.
2347360	2351360	It's one megahertz for the BBC Micro.
2351360	2356360	So a timer is set to trigger after all the high res pixels have been plotted.
2356360	2361360	The top half of the screen is drawn in the aforementioned high resolution.
2361360	2368360	The timer then triggers an interrupt, which calls a subroutine, to switch to the lower resolution mode.
2368360	2376360	This is achieved by switching registers in the video processing chip to convert it to low resolution for drawing the dashboard.
2376360	2380360	And that's achievable through some assembly commands.
2380360	2386360	As far as I can tell, this was the first game ever to use this split screen configuration.
2386360	2390360	And it was definitely the first to do so on a BBC Micro.
2391360	2396360	The end result is 7,936 bytes reserved for the frame buffer,
2396360	2400360	leaving just enough room for the actual program.
2400360	2404360	And a game that looks both sharp, yet colorful.
2404360	2407360	Something not seen on a home computer before.
2411360	2416360	Now let's take a look at a more obvious feature, the 3D graphics themselves.
2416360	2423360	One reason they looked so good was that Elite was the first game playable at home to feature hidden line removal.
2423360	2429360	Unlike earlier wireframe graphics, which themselves were barely existent in games at the time.
2429360	2433360	If an edge on an object is obscured, it's not shown.
2433360	2436360	This was a tricky problem to solve at the time.
2436360	2442360	It still caused John Carmack a headache nearly 10 years later when optimizing Doom.
2442360	2446360	In the case of Elite, the solution implemented was quite simple in concept,
2446360	2451360	but required some clever design to be executed in acceptable speed.
2451360	2455360	We start by looking at how objects are stored.
2455360	2459360	The final few pages of memory are used to store the ship's blueprints.
2459360	2462360	These are a series of lookup tables.
2462360	2468360	The first table is a number of basic attributes, such as max speed and laser power.
2468360	2472360	The second table for each ship is the vertices.
2472360	2477360	This defines the position of each vertex relative to the center of the ship.
2477360	2483360	I've seen it written before that blueprints contained only half a ship, with the other half generated on the fly.
2483360	2485360	However, this is not true.
2485360	2490360	We see the full vertex count for every ship when we look at the source code.
2490360	2492360	Next is a table of edges.
2492360	2495360	This is a list of plotable edges for the ship.
2495360	2500360	Each defined by its starting and ending vertices and adjoining faces.
2500360	2506360	The edge and vertex tables contain all the necessary data to plot a wireframe ship.
2506360	2513360	However, in order to perform hidden line removal, the positions of the faces need to somehow be characterized.
2513360	2517360	So, the final table for each ship is a list of faces.
2517360	2521360	But how are these faces defined?
2521360	2525360	Each one is characterized by what's called its normal vector.
2525360	2528360	Let me explain what this looks like.
2528360	2533360	Imagine drawing a line from the ship's center to the facing question.
2533360	2540360	Now, the aim here is to draw this line so that it intersects the face at a 90-degree angle.
2540360	2546360	Looking at a Tharguide ship as an example, this is easy enough to do for this face.
2546360	2548360	But how about this one?
2548360	2553360	We can imagine extending the face until a solution is found.
2553360	2563360	These vectors are defined by three values, the x, y and z distance from the origin to the point of intersection on this extended face.
2563360	2572360	Bell and Braben pre-computed these x, y, z distances and saved them in the face lookup table for every object in the game.
2572360	2576360	Now, let's put the player's ship in our scene.
2576360	2580360	This face here should be visible to the player.
2580360	2587360	We know the position of the enemy ship relative to the player, so let's add the vector in for that too.
2587360	2593360	Finally, the main flight loop calculates the rotation of every object in the scene.
2593360	2600360	This is defined by three more vectors, one for each axis. Let's add those too.
2600360	2607360	And with that, we have everything we need to remove the hidden lines, or I should say hidden faces.
2607360	2613360	Rather than considering lines individually, faces as a whole are checked.
2613360	2616360	First, we need to know the line of sight to the face.
2616360	2622360	We can do that by summing the object's position vector and the face normal vector.
2622360	2629360	Visually, vector addition works like this, so we now have a line of sight vector to our face.
2630360	2634360	Every object in Elite was designed to be exclusively convex,
2634360	2641360	so if a face's normal vector is pointing away from us, we know that face must be obscured.
2641360	2647360	Or more formally, the angle between the normal vector and line of sight vector
2647360	2654360	must be greater than 90 degrees for a face to be hidden, so we can perform this simple calculation.
2654360	2658360	This is known as the dot product between the two vectors.
2658360	2663360	Dot products are used all the time in 3D computation because they're very simple to calculate.
2663360	2667360	Indeed, here's the subroutine Bell and Braben wrote,
2667360	2673360	Crucially, a negative dot product denotes two vectors that are less than 90 degrees apart,
2673360	2678360	and a positive one denotes two that are greater than 90 degrees apart.
2678360	2681360	So, we calculate this dot product for our faces,
2681360	2689360	and only plot edges associated with faces where the line of sight to the face normal dot product is less than one.
2689360	2692360	Now, there is one minor step I missed out.
2692360	2698360	In reality, face normal vectors are relative to the orientation of the ship to be plotted,
2698360	2704360	so the player's x, y, z coordinates need to be translated to the ship's local coordinate system.
2704360	2708360	This is done by modifying our line of sight vector as shown here,
2708360	2710360	but the end result's the same.
2710360	2714360	Faces are only plotted when the dot product is negative.
2714360	2720360	See Mark Moxon's Deep Dive article for more details on this step if you need convincing why this is necessary.
2727360	2733360	These three numbers and this simple formula define elite's entire universe.
2733360	2740360	It's sometimes stated that the universe is randomly generated, but it's a little bit more elegant than that.
2740360	2743360	It is in fact procedurally generated.
2743360	2746360	That means the same universe is created every time.
2746360	2753360	Elite wasn't the first game to feature procedural generation, but it was the first to apply it on such a scale.
2753360	2756360	Let's see how those three numbers define a system.
2756360	2759360	These numbers are referred to as seeds.
2759360	2763360	Each is expressed as a 16-bit binary value.
2763360	2767360	Now, different bits within each form parameters for the system.
2767360	2772360	Two entire bytes define the coordinates of the system in the galaxy.
2772360	2778360	These two bits define the system tech level, and these two define the prosperity level.
2778360	2785360	They're used to bias a pseudo randomly generated number to decide the prices of commodities at the system.
2785360	2788360	These three define the system's government type.
2788360	2798360	In a similar manner to the economic variables, the value stored here increases or decreases the likelihood of encountering pirates at the system.
2798360	2801360	And these three define the distance to the planet.
2801360	2806360	All other system attributes are similarly defined with the remaining bits.
2806360	2810360	The three numbers on screen define the first system plotted.
2810360	2814360	Then, that deceptively simple formula is applied.
2814360	2820360	We add the three values, append the result to our list, and discard the first value.
2820360	2824360	And that gives us the three seed values for the next galaxy.
2824360	2831360	The process is repeated 255 times to give a galaxy of 256 stars.
2831360	2837360	If the result is greater than 16 bits in length, we just take the carry value and continue on.
2837360	2843360	And the process itself is repeated a further 7 times to give a total of 8 galaxies.
2843360	2845360	And that's all there is to it.
2852360	2855360	The final feature I'd like to go through is the radar.
2855360	2858360	This has an almost legendary status.
2858360	2862360	It was the final few lines of code written before Elite was released.
2862360	2866360	Braben had to convince Aconsoft to add it in last minute.
2866360	2870360	But it completely changes the nature of the combat sequences.
2870360	2876360	It's quite funny watching videos of novices playing and not even realising the radar's there.
2876360	2880360	They hear the sound of being shot at but don't know where it's coming from
2880360	2884360	and kind of flail around pitching and rolling randomly.
2884360	2891360	But once they realise the radar's there and how it works, it completely changes how they handle combat.
2891360	2893360	It's simple to use.
2893360	2898360	Objects within range of the player are shown as sticks with a little flag at the end.
2898360	2902360	A stick behind the player represents an object behind them.
2902360	2905360	And one in front is an object in front of them.
2905360	2909360	Likewise a stick extending upwards mean the object is above the player
2909360	2912360	and downwards means it's below them.
2912360	2917360	So the radar provides a full representation of the 3D space around the player
2917360	2920360	and can be understood at a glance.
2920360	2922360	Genius!
2922360	2924360	I'll go into full depth for this one.
2924360	2929360	We've made it this far so let's go crazy and get my 6502 model on screen.
2929360	2933360	The scan subroutine performs this task.
2933360	2940360	Let's figure out how it draws a single dot representing another ship in the correct position on screen.
2940360	2945360	Every object within range of the player's ship has a ship type variable.
2945360	2952360	For the current ship, this variable along with the ship data is moved into the 0 page workspace for fast access.
2952360	2956360	Therefore saving clock cycles.
2956360	2961360	We load that object's ID from the workspace and into the accumulator.
2961360	2967360	Objects such as planets and suns are designed to have their most significant bits set to 1 in the ID.
2967360	2970360	And this sets the minus flag to 1.
2970360	2977360	So a break if minus command causes us to return from the subroutine and not plot that object.
2977360	2986360	For plot of the objects, the hex representation of the plot color, which is green for ships, is loaded into the x register.
2986360	2991360	The color green is represented by ff in hex.
2991360	2996360	This color variable is then stored in the workspace.
2996360	3002360	The ship data in the workspace contains x, y and z coordinate values.
3002360	3007360	Each is two bytes and represents the ship's position relative to the player.
3007360	3018360	We load the most significant byte of the x coordinate into the accumulator and perform a logical or on the respective bytes from the y and z coordinates.
3018360	3027360	One more logical and is performed on the result using the binary value 11000000.
3027360	3036360	If the result is zero, the two most significant bits of all coordinate values are zero and the ship is in plotting range.
3036360	3039360	So branch on not zero.
3039360	3044360	A positive result here would return from the subroutine.
3044360	3049360	Let's assume the ship is within plotting range.
3049360	3060360	To convert a ship's world x position to an x coordinate on screen, i.e. on the scanner, we add 123 to the most significant byte of the x position.
3060360	3066360	We don't need to go through why that is here, but let's just take it at face value.
3067360	3075360	Assuming x is positive, we simply load the ship's high x byte into the accumulator and add 123.
3075360	3082360	The resulting value is stored in location x1 in the zero page workspace.
3082360	3090360	A similar process is carried out for the y coordinate, saving it in location y1 in the zero page workspace.
3091360	3099360	Finally, an existing subroutine is called to draw a double length dot at the coordinates x1, y1.
3099360	3108360	I definitely won't go into details of how this works, but in summary, it loads x1 and y1 into the accumulator and x register,
3108360	3113360	converts the coordinate values into the correct locations in screen memory,
3113360	3118360	and performs an exclusive OR operation on these locations.
3118360	3127360	If nothing was plotted there before, the exclusive OR operation populates the pixel at the correct memory location with the color value we previously stored.
3127360	3131360	Actually, let's take a second to think about that.
3131360	3140360	When writing pixel values to the frame buffer, Elite's source code always uses an exclusive OR instead of just writing the value directly.
3140360	3147360	Let's consider writing a single pixel and see what would happen if we just wrote the new value directly.
3147360	3151360	The bottom row of this truth table is the important one here.
3151360	3153360	Imagine us building up our frame.
3153360	3156360	We may first add in the object for the star,
3156360	3164360	but then adding all the lines for the spacecraft would just draw white lines in front of a white star, rendering the spacecraft invisible.
3164360	3168360	Here's the truth table for the exclusive OR pixel right.
3168360	3172360	Now a white on white pixel flips to black.
3172360	3175360	So spacecraft are visible in front of white objects.
3175360	3177360	They look like this.
3177360	3181360	It doesn't even matter what order the objects are written to the frame buffering.
3181360	3187360	Or if only part of the object occludes the star, this will always work.
3187360	3191360	At the expense of a single instruction when writing pixel values,
3191360	3195360	Braben and Bell never needed to worry about objects disappearing in front of stars.
3195360	3198360	It was all handled automatically.
3198360	3201360	Even with me skipping over how Y coordinates are calculated,
3201360	3204360	how screen memory locations are determined,
3204360	3208360	and how the stick from the object on the scanner is drawn,
3208360	3213360	that was still a lot to go through just to get a single dot on screen.
3213360	3216360	But that's how the source code was built up in general,
3216360	3219360	by taking individual tasks,
3219360	3221360	breaking them down into simple problems,
3221360	3226360	and figuring out how to implement the solutions in assembly.
3226360	3229360	Each solution was translated into a subroutine,
3229360	3233360	and meticulously optimised to save memory and compute.
3233360	3239360	No single subroutine is particularly complex or difficult to understand,
3239360	3248360	but they combine to create an entire universe.
3248360	3253360	It's difficult to quantify the effect Elite had on the computing sector as a whole.
3253360	3257360	Every British software developer I've spoke to that went to school in the 1980s
3257360	3260360	cites Elite as a reason they got into computing.
3260360	3263360	Being able to code the game on the same machine you could play it on
3263360	3266360	probably had something to do with that.
3266360	3268360	Though I was born too late for Elite's release,
3268360	3271360	we had a copy on our Acorn Archimedes at home.
3271360	3273360	I liked it.
3273360	3277360	I was told it was a big deal, but I didn't really understand why, because I was 8.
3277360	3281360	A couple of years later, I realised the game was nearly 15 years old,
3281360	3285360	which completely blew me away at the time.
3285360	3287360	In the years following Elite's success,
3287360	3291360	Bell gradually distanced himself from the gaming industry.
3291360	3295360	I've heard he grew to dislike the proliferation of violent video games,
3295360	3297360	something I can't really relate to,
3297360	3301360	since I grew up with the likes of Doom, Half-Life and BioShock.
3301360	3307360	His personal website is a quirky record of what the World Wide Web looked like in the 1990s.
3307360	3310360	It also contains the source code for Elite,
3311360	3315360	that did cause a bit of a legal kerfuffle between himself and Braben,
3315360	3318360	but I understand the two have been back on speaking terms for years now,
3318360	3320360	so that's nice.
3320360	3322360	Braben on the other hand,
3322360	3325360	he used the success of Elite to found Frontier Games,
3325360	3328360	which remains a major UK developer to this day.
3328360	3332360	In fact, he only stepped down as CEO in 2022.
3332360	3337360	In 2014, Frontier released a modern day adaptation of Elite.
3337360	3339360	Elite Dangerous.
3339360	3341360	Backed by what was, at the time,
3341360	3344360	the largest ever crowdfunding campaign in the UK.
3344360	3346360	And it's amazing.
3346360	3349360	A one-to-one scale map of the Milky Way,
3349360	3352360	with 400 billion star systems to explore.
3354360	3356360	Prior to that, in 2008,
3356360	3359360	he became one of the co-founders of the Raspberry Pi Foundation,
3359360	3363360	who went on to completely revolutionise access to cheap compute hardware,
3363360	3366360	and spawned a new generation of hobbyists.
3366360	3368360	I'm one of them.
3368360	3372360	I pre-ordered my first Pi on the day they were announced.
3372360	3374360	I was on an oil rig at the time,
3374360	3377360	and though I'd been employed for less than a year,
3377360	3380360	I was already looking for a way out of that industry.
3380360	3382360	I learned how to navigate a Linux system,
3382360	3384360	run distributed compute,
3384360	3388360	and even how to containerise applications thanks to the Raspberry Pi.
3392360	3396360	Elite was ported to every major platform it could viably run on.
3396360	3399360	Of course, making it accessible to cheaper systems,
3399360	3401360	such as the ZX Spectrum and Acorn Electron,
3401360	3404360	played a huge part in the game's record sales.
3404360	3408360	Perhaps most astonishing is the NES port.
3408360	3411360	That's right, you could play Elite on the NES,
3411360	3415360	a machine designed entirely not for 3D vector graphics.
3415360	3418360	In fact, I've done just that.
3418360	3420360	Back when I was at university,
3420360	3422360	I owned an NES for retro gaming,
3422360	3424360	and I had a copy of Elite.
3424360	3428360	To be honest, it was the only game I used to play on the thing.
3428360	3432360	An upgraded version was also released for MS-DOS,
3432360	3434360	known as Elite Plus,
3434360	3438360	coded entirely by another legendary UK gaming figure,
3438360	3439360	Chris Sawyer.
3439360	3441360	If you don't know that name,
3441360	3444360	just keep an eye out on the outro sequence.
3444360	3448360	Elite marked the end of the dominance of the arcade shooter.
3448360	3450360	Less than one year after its release,
3450360	3453360	the NES was debuted in the US and Europe,
3453360	3455360	though most games for this platform
3455360	3457360	didn't match Elite's level of complexity.
3457360	3459360	Even relatively accessible titles,
3459360	3461360	such as Super Mario Brothers and Zelda,
3461360	3463360	provided a much richer experience
3463360	3466360	than had been previously available.
3466360	3468360	In retrospect, it really feels like
3468360	3470360	Bell and Braben opened the floodgates
3470360	3474360	by demonstrating what was possible with 8-bit hardware.
3474360	3477360	Though they had pushed that hardware to its limits,
3477360	3480360	and we'd have to wait until the 1990s
3480360	3482360	and the rise of 32-bit systems
3482360	3486360	to see an explosion in 3D rendering technology.
3486360	3489360	By then, most major games were no longer produced
3489360	3491360	by solitary bedroom coders,
3491360	3493360	but by large studios,
3493360	3496360	with large design and advertising budgets to match.
3496360	3498360	By the end of the 1990s,
3498360	3500360	another hardware wall was hit.
3500360	3502360	Back in 1984,
3502360	3504360	Elite required real-time calculation
3504360	3507360	and plotting of several to dozens of polygons
3507360	3509360	on screen at a given time.
3509360	3511360	But by now, the polygon count
3511360	3513360	that was demanded by designers
3513360	3516360	was outpacing improvements in CPU speed.
3516360	3518360	A new approach was needed.
3518360	3520360	Wouldn't it be nice to calculate the positions
3520360	3522360	of all these polygons in parallel?
3522360	3525360	Thus, the GPU was born.
3525360	3527360	Why use one very fast processor
3527360	3530360	when you can use many slow ones at once?
3530360	3532360	About 10 years later,
3532360	3535360	something very unusual happened.
3535360	3538360	Typically, new technologies start out relatively expensive
3538360	3541360	and are only used experimentally,
3541360	3544360	and then by commercial or government organizations,
3544360	3547360	before becoming cheap enough to sell to consumers.
3547360	3550360	But the opposite happened with GPUs.
3550360	3554360	A new field was rapidly growing in the late 2000s,
3554360	3556360	data science.
3556360	3558360	It was realised that the computations
3558360	3560360	necessary to train neural networks
3560360	3562360	are similar in principle to those used
3562360	3565360	to calculate polygons for 3D rendering.
3565360	3567360	Data scientists realised that in some cases,
3567360	3569360	cheap off-the-shelf gaming GPUs
3569360	3572360	outperformed supercomputers.
3572360	3576360	I first used a GPU to train up an algorithm in 2015,
3576360	3579360	and now it's something I do on a daily basis.
3579360	3581360	The algorithm that recommended this video to you
3581360	3584360	was trained in a cluster of GPUs.
3584360	3587360	The implications of large-scale deployment
3587360	3589360	of advanced machine learning algorithms
3589360	3591360	are not yet fully understood,
3591360	3593360	and we would have got there without Elite,
3593360	3596360	but I think it's fair to say we'd have got there slower.
3597360	3599360	But back to gaming.
3599360	3602360	UK gaming specifically.
3602360	3605360	Elite was our breakout game, if you will.
3605360	3607360	In the four decades that have followed,
3607360	3610360	the UK gaming industry has birthed some of the most influential
3610360	3613360	and best-selling games of all time,
3613360	3616360	and they continue to do so.
3616360	3618360	And not just huge developers, either.
3618360	3621360	With the rise of accessible gaming engines,
3621360	3624360	such as Unity, Unreal, and now Godot,
3624360	3626360	it's again possible for small teams,
3626360	3629360	and even individuals, to design, write,
3629360	3632360	and publish great games.
3632360	3635360	Bell and Braben set out to make a great game,
3635360	3638360	but they also fostered an entire industry.
3714360	3717360	Thank you.
