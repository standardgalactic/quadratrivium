WEBVTT

00:00.000 --> 00:14.360
In Sundarst, in 1853, a boy named Vincent van Gogh was born.

00:14.360 --> 00:23.920
In 1880, at the age of 27, he decides to become an artist.

00:23.920 --> 00:30.520
In his early years, he taught himself to draw and paint, but his style changed significantly

00:30.520 --> 00:34.920
under the influence of Impressionism.

00:34.920 --> 00:42.520
His career was very short, lasting between 1880 and 1890.

00:42.520 --> 00:48.920
Quoting the Britannica biography on Vincent van Gogh, his palette at last became colorful,

00:48.920 --> 00:55.280
his vision less traditional, and his tonality lighter, as may be seen, is one of his first

00:55.280 --> 00:59.440
paintings of Montemarte.

00:59.440 --> 01:07.000
By the summer of 1887, he was painting in pure colors, using broken brushwork, and at

01:07.000 --> 01:10.120
times what's called pointillistic.

01:11.120 --> 01:20.120
Finally, by the beginning of 1888, van Gogh's post-impressionist style had crystallized.

01:20.120 --> 01:26.720
The main painting technique associated with van Gogh is something called Impasto, where

01:26.720 --> 01:32.760
the paint is applied directly onto the canvas and then spread around.

01:32.760 --> 01:39.160
It can even be mixed together, using other paints and sometimes your very own fingers.

01:39.160 --> 01:43.200
Very pretty.

01:43.200 --> 01:50.880
This gives the painting a thick, three-dimensional texture, and the paint itself is undiluted.

01:50.880 --> 01:55.280
A common practice is to work the paint as little as possible, because the more you

01:55.280 --> 02:02.560
touch it and move with it, the duller and flatter it becomes with each stroke.

02:02.560 --> 02:08.160
The most famous example of this is Starry Night, 1889.

02:08.160 --> 02:13.120
Coding again the van Gogh experience, had the painting been done with flat paint, it

02:13.120 --> 02:16.680
would not have been the memorable piece that it is.

02:16.680 --> 02:21.640
Okay, now I have taught you something.

02:21.640 --> 02:22.640
It's time for a quiz.

02:22.640 --> 02:23.640
Who's ready?

02:23.640 --> 02:27.080
Lock the doors.

02:27.080 --> 02:29.760
Is this a painting by van Gogh?

02:30.240 --> 02:33.040
Give me hands for those who think it's a painting by van Gogh.

02:33.040 --> 02:34.040
Nobody.

02:34.040 --> 02:35.560
I have taught you well.

02:35.560 --> 02:38.760
This is Adamon Breen skating on the Frossel, I'm still a rival.

02:38.760 --> 02:41.320
Even not even the same centuries.

02:41.320 --> 02:42.320
Still dots though.

02:42.320 --> 02:44.280
Still dots.

02:44.280 --> 02:46.120
Is this a painting by van Gogh?

02:46.120 --> 02:47.120
Give me some hands.

02:47.120 --> 02:50.320
Oh, again, I have taught you very well.

02:50.320 --> 02:56.400
This is Vincent van Gogh, the farmhouse in Provence, 1888.

02:56.400 --> 03:00.160
Is this a painting by van Gogh?

03:00.160 --> 03:04.400
Huh, any hands?

03:04.400 --> 03:05.400
Scattered hands.

03:05.400 --> 03:06.400
All right.

03:06.400 --> 03:11.480
I mean, yeah, could be early work, could be like inspired by other painters.

03:11.480 --> 03:12.480
That's fine.

03:12.480 --> 03:13.480
No, no, though.

03:13.480 --> 03:14.880
Still touch.

03:14.880 --> 03:23.240
But in the area, so Jonathan Bartholth, town path, all right, is this a van Gogh?

03:23.240 --> 03:27.040
Oh, again, scattered, okay?

03:27.040 --> 03:29.640
Yes, this is van Gogh.

03:29.640 --> 03:36.400
You can see the brushwork on the head of the crab is disjointed, if you think of it that

03:36.400 --> 03:37.400
way.

03:37.400 --> 03:38.400
Crab on its back.

03:38.400 --> 03:39.400
Poor crab.

03:39.400 --> 03:40.400
1888.

03:40.400 --> 03:43.480
Okay, good work.

03:43.480 --> 03:44.480
So hi.

03:44.480 --> 03:50.000
My name is Ola Favogh, I'm a senior software developer at TotalSec AS.

03:50.000 --> 03:52.280
If you don't like this talk you can yell at me on Twitter.

03:52.280 --> 03:56.640
People seem to enjoy doing that.

03:56.640 --> 03:59.440
So I work for a company called TotalSec here in Norway.

03:59.440 --> 04:03.800
We are a consultancy and teaching training company.

04:03.800 --> 04:06.840
So again, if you like our work, please hire us.

04:06.840 --> 04:10.080
We do training as we did here at this conference.

04:10.080 --> 04:11.080
Good stuff.

04:11.080 --> 04:15.200
So this talk is titled learning rust the wrong way.

04:15.200 --> 04:22.000
So the reason why I named the talk that way is, yeah, it is in part about rust.

04:22.000 --> 04:23.960
But it's also about learning.

04:23.960 --> 04:26.840
So I hope you will enjoy.

04:26.840 --> 04:32.840
So what's wrong with knowing what you know now and not knowing what you don't know until

04:32.840 --> 04:35.000
later, right?

04:35.000 --> 04:39.000
I love coding philosophers, which is Winnie the Pooh.

04:39.000 --> 04:42.920
Good, good stuff.

04:42.920 --> 04:45.400
So what's going on here?

04:45.400 --> 04:49.680
So yeah, as you get my guest by the title of the talk and the introduction, this, yeah,

04:49.680 --> 04:52.320
this isn't one of my normal talks.

04:52.320 --> 04:55.720
The structure itself is a bit of an experiment on my end.

04:55.720 --> 04:58.560
So let me know how you think about it.

04:58.560 --> 05:01.160
Yes, you will learn some rust.

05:01.160 --> 05:03.640
It's kind of enough for me to make a point.

05:03.640 --> 05:06.880
But you will also learn about learning the wrong way.

05:06.880 --> 05:13.640
And yeah, the talk might have a point, but we will go places before we get there.

05:13.640 --> 05:15.120
Everybody ready?

05:15.120 --> 05:16.120
Accepting?

05:16.120 --> 05:17.120
Wonderful.

05:17.120 --> 05:18.120
Wonderful.

05:19.040 --> 05:25.180
So since the title was Wrong Ways to Learn Rust, let's do actual wrong ways to learn

05:25.180 --> 05:26.680
rust, right?

05:26.680 --> 05:29.000
Because let's be literal here.

05:29.000 --> 05:32.040
So at least we will have that covered.

05:32.040 --> 05:33.720
While skydiving.

05:33.720 --> 05:38.160
No.

05:38.160 --> 05:40.840
You will not learn rust while skydiving.

05:40.840 --> 05:43.840
Even though this person might be having fun.

05:43.840 --> 05:44.840
No.

05:44.840 --> 05:48.400
I do not recommend learning rust while skydiving.

05:48.400 --> 05:52.600
Next example, as an 18th century aristocrat, since we'll be talking about the paintings

05:52.600 --> 05:55.920
from the 18th century, no, not with this.

05:55.920 --> 06:00.520
But for some reason, they have Windows 11 on that laptop.

06:00.520 --> 06:05.160
So not recommended, all right?

06:05.160 --> 06:08.240
Just to give a talk at a technical conference.

06:08.240 --> 06:10.240
We can skip this one.

06:10.240 --> 06:13.160
All right.

06:13.160 --> 06:14.160
So what is rust?

06:14.360 --> 06:15.520
Let's begin with that.

06:15.520 --> 06:21.520
So it's a programming language that focuses on performance, safety, and productivity.

06:21.520 --> 06:23.600
That's kind of their guiding light.

06:23.600 --> 06:25.640
It looks kind of like this.

06:25.640 --> 06:27.160
So here I'm defining a function.

06:27.160 --> 06:29.520
Here's the main function.

06:29.520 --> 06:30.840
Here I'm defining a variable.

06:30.840 --> 06:33.280
How is the visibility for those in the back?

06:33.280 --> 06:34.280
Okayish.

06:34.280 --> 06:35.280
Good.

06:35.280 --> 06:36.280
All right.

06:36.280 --> 06:37.960
So I'm creating a variable called float.

06:37.960 --> 06:42.760
It is of F64, which is the double from us in other languages.

06:42.760 --> 06:47.480
The value of 42, you don't have to put an F score.

06:47.480 --> 06:48.920
Here I'm creating a variable.

06:48.920 --> 06:52.880
So I'm saying let the mood, so it's a value.

06:52.880 --> 06:54.880
Because in rust, it's cons by default.

06:54.880 --> 06:59.360
So you have to say that the value is movable, so you have to say let mood.

06:59.360 --> 07:01.440
I can ask a question about the float.

07:01.440 --> 07:02.840
No parentheses needed.

07:02.840 --> 07:03.960
Very good.

07:03.960 --> 07:11.600
I can then mutate the value, and then I can call print line exclamation point and similar

07:11.600 --> 07:12.600
formatting style.

07:12.600 --> 07:16.920
So the print line with the exclamation point is from something called a macro in the language.

07:16.920 --> 07:19.160
So if you see these, they are macros.

07:19.160 --> 07:21.600
They are defined in a little bit different way.

07:21.600 --> 07:27.160
A way of thinking of them is, like, what if C macros had types and also looked more

07:27.160 --> 07:28.160
like functions?

07:28.160 --> 07:30.160
But in a way.

07:30.160 --> 07:31.160
Yes.

07:31.160 --> 07:32.160
Good.

07:32.160 --> 07:41.240
So 2006 personal project by a Mozilla employee called Graydon Horpe, 2009 turned into a Mozilla

07:41.240 --> 07:42.960
sponsored project.

07:42.960 --> 07:49.480
2011, we have the first bootstrap version, which is rust compiling rust.

07:49.480 --> 07:52.600
And then version 0.1 in 2012.

07:52.600 --> 07:55.360
So it is a new language, but it's, again, not that new.

07:55.360 --> 07:59.200
Like, when you think of new languages, that's like stuff coming out yesterday.

07:59.200 --> 08:03.000
So at least the idea has been around since, like, 2006, seven, eight, nine, that kind of

08:03.000 --> 08:04.000
thing.

08:04.000 --> 08:05.000
Right?

08:05.000 --> 08:06.000
Good.

08:06.000 --> 08:08.240
So more code examples here.

08:08.240 --> 08:09.400
I have main.

08:09.400 --> 08:10.400
I'm creating a value.

08:10.520 --> 08:11.520
Here's an integer.

08:11.520 --> 08:12.520
I32.

08:12.520 --> 08:19.240
So the language talks a lot about borrowing and what is alive and what is not alive and

08:19.240 --> 08:22.480
what can you mess with while you are programming.

08:22.480 --> 08:28.320
So here I'm going to borrow my value into the function borrow value.

08:28.320 --> 08:29.320
All right?

08:29.320 --> 08:30.800
So I have the little reference value there.

08:30.800 --> 08:32.480
I can borrow it again.

08:32.480 --> 08:33.600
That's fine.

08:33.600 --> 08:37.280
And I can print out those two, those two values.

08:37.280 --> 08:41.760
So notice that I'm borrowing into the function, but I'm getting a value out of the function.

08:41.760 --> 08:43.680
So the function looks something like this.

08:43.680 --> 08:45.840
So here we define a function borrow value.

08:45.840 --> 08:47.160
Again the type is on the end.

08:47.160 --> 08:51.400
It is the reference of I32 and I'm returning an I32.

08:51.400 --> 08:52.400
Good.

08:52.400 --> 08:56.880
I can create a mutable value within it, which is a copy of the borrowed value.

08:56.880 --> 08:59.320
I can change it in some fun ways.

08:59.320 --> 09:03.880
And then returning a value from a function usually looks like this, which is like the

09:03.880 --> 09:08.600
last expression, the last statement within the line and with no semicolon.

09:08.600 --> 09:10.520
You can do the return.

09:10.520 --> 09:14.240
So for things like early exits, like if you do an if something, something you want to

09:14.240 --> 09:16.040
return out, you can do that.

09:16.040 --> 09:18.040
That's fine.

09:18.040 --> 09:19.040
Good.

09:19.040 --> 09:22.280
Well, what happens if I do this?

09:22.280 --> 09:26.560
So here I am borrowing the value mutably.

09:26.560 --> 09:32.160
So I want the mutable reference to the value or as in C++, just a reference.

09:32.160 --> 09:35.160
Because the thing we had before is a const reference.

09:35.160 --> 09:37.160
All right.

09:37.160 --> 09:38.160
What happens then?

09:38.160 --> 09:39.160
Any hands now?

09:39.160 --> 09:42.160
Since I've been training you on the hands.

09:42.160 --> 09:45.520
It doesn't work.

09:45.520 --> 09:47.080
Does not work.

09:47.080 --> 09:49.440
So here's the main thing.

09:49.440 --> 09:51.440
We're looking at line 11 there.

09:51.440 --> 09:54.120
New value, borrow value, and we're sending in reference.

09:54.120 --> 09:56.040
Types differ in mutability.

09:56.040 --> 09:57.280
The blue line might not be visible.

09:57.280 --> 09:58.280
I can read it out.

09:58.280 --> 10:00.480
Arguments to this function are incorrect.

10:00.480 --> 10:06.720
We expected a mutable reference, so ref mutify32, but we found the regular reference.

10:06.720 --> 10:13.480
So this has to match, which is like one of the early walls you will hit with the language.

10:13.480 --> 10:14.480
Good.

10:14.480 --> 10:18.080
So if I have another main, I have my value and how much.

10:18.080 --> 10:19.280
So my value is mutable.

10:19.280 --> 10:21.320
How much is not mutable?

10:21.320 --> 10:26.960
So here I am sending in my value into the function as a mutable reference.

10:26.960 --> 10:33.200
You can now, the mutate value is allowed to change the value and how much I'm just sending

10:33.200 --> 10:34.200
it by reference.

10:34.200 --> 10:36.640
By the way, I don't have to send it in as reference.

10:36.640 --> 10:41.760
I can send it in a copy, but I'm just showing you the referencing part of it.

10:41.760 --> 10:44.960
And then I can print out my value, and it will have changed.

10:44.960 --> 10:51.200
So I take value in as mutable, I32, I take in how much as a reference to I32, I change

10:51.200 --> 10:52.200
the value.

10:52.200 --> 10:53.480
We are happy.

10:53.480 --> 10:54.480
This is fine.

10:54.480 --> 10:56.640
I mean, fine, not fine.

10:57.640 --> 11:01.480
The language is happy with you, basically, the sentences.

11:01.480 --> 11:04.640
So what if I change this to this?

11:04.640 --> 11:11.560
So this is a thing in C++, which is the, like, this is a problem people have.

11:11.560 --> 11:16.120
And we have to learn, like, in what order things are evaluated, like, oh, it's from

11:16.120 --> 11:20.320
the left, from the right to the left for the arguments and all these kinds of things.

11:20.320 --> 11:27.200
So here, I'm sending in a mutable reference of my value, and then I'm also sending a reference

11:27.200 --> 11:29.080
to my value.

11:29.080 --> 11:32.480
But within the function, they are a different variable, but they're referencing the same

11:32.480 --> 11:33.480
value from the outside.

11:33.480 --> 11:36.440
So again, hence, what's going to happen?

11:36.440 --> 11:37.440
Yes.

11:37.440 --> 11:41.600
Compiler error, that's right.

11:41.600 --> 11:48.600
So you are asking for mutability from one variable, you're asking for a non-mutability

11:48.600 --> 11:52.200
from another variable, but it happens to be the same variable.

11:52.200 --> 11:59.920
So think of the single writer, multi-reader locks that we have, where you can, like,

11:59.920 --> 12:03.760
when you can only have one writer to a variable, but you can have many readers.

12:03.760 --> 12:11.560
So imagine a programming language where every single variable is an MSRV lock, not the

12:11.560 --> 12:13.480
actual lock, but the language feature.

12:13.480 --> 12:14.480
So yeah.

12:14.480 --> 12:20.200
Any mutable borrow occurs here while we have a mutable borrow for the first argument.

12:20.200 --> 12:22.200
This won't work.

12:22.200 --> 12:23.200
Cool.

12:23.200 --> 12:26.200
Let's talk about baseball.

12:26.200 --> 12:28.680
Who likes baseball?

12:28.680 --> 12:29.680
Yeah?

12:29.680 --> 12:31.680
More for American sport, maybe?

12:31.680 --> 12:36.280
So hitting a baseball is a relatively complicated skill.

12:36.280 --> 12:40.000
You need speed to recognize what kind of ball is being thrown at you, you need precision

12:40.000 --> 12:45.240
to hit the ball, and strength to make sure it goes as far as possible.

12:45.240 --> 12:53.520
In 2018, the batting average was .248, which means that the average baseball player had

12:53.520 --> 12:59.180
a 24.8% chance to hit the ball, okay?

12:59.180 --> 13:03.280
This is not per ball thrown, but for the entire attempt.

13:03.280 --> 13:05.360
How many balls are being thrown at the person?

13:05.360 --> 13:09.440
Some of them can be strikes, some of them can be what's called balls.

13:09.440 --> 13:16.880
So there is a bit more to it, but that's the general idea of ball on the way.

13:16.880 --> 13:22.120
So Cal Poly Mustangs, or a baseball team that represents the California Polytechnic State

13:22.120 --> 13:23.120
University.

13:23.120 --> 13:30.840
The team was founded in 1948 and have competed in what's called the Big West Conference since

13:30.840 --> 13:35.720
1997, and they even won it in 2014.

13:35.720 --> 13:44.000
In 1994, the university published a paper by Hall Dominiques and Caravazos called Contextual

13:44.000 --> 13:51.120
Inference Effects with Skilled Baseball Players, and the reference is also down there if you're

13:51.120 --> 13:53.680
looking at this later on.

13:53.680 --> 13:58.800
The study took a group of baseball players and measured their batting averages.

13:58.800 --> 14:05.160
The idea was then to give them extra batting practices for six weeks.

14:05.600 --> 14:07.680
The baseball study.

14:07.680 --> 14:10.920
They were split into three groups.

14:10.920 --> 14:14.800
One of the groups got thrown balls in a structured order.

14:14.800 --> 14:18.320
15, first of them, were fast balls.

14:18.320 --> 14:23.840
The next 15 balls in the practice were curve balls, the next 15 were change-ups.

14:23.840 --> 14:29.120
A change-up is a ball that starts out looking like a fast ball, but becomes a curve ball

14:29.120 --> 14:30.120
the other way around.

14:30.120 --> 14:34.320
The idea is that it changes halfway.

14:34.320 --> 14:39.240
They were always thrown in this order, and the players always knew what type of ball

14:39.240 --> 14:41.800
was being thrown next.

14:41.800 --> 14:46.600
This is sometimes called blocked practice, where you split the exercise into similarly

14:46.600 --> 14:50.200
structured blocks.

14:50.200 --> 15:02.760
The second group got the same number of baseballs, but the order was still 45, but the order

15:02.760 --> 15:03.760
was random.

15:03.760 --> 15:05.440
They had no idea what ball was next.

15:05.440 --> 15:10.320
Maybe they knew the last one, if they were counting, but anyway.

15:10.320 --> 15:17.960
Then there was a control group who did not get any extra practice.

15:17.960 --> 15:20.320
Let's look at the results.

15:20.320 --> 15:22.520
What do you think happened?

15:22.520 --> 15:25.520
Think about what kind of practice this was.

15:25.520 --> 15:28.160
One group got, they knew what they were getting.

15:28.160 --> 15:31.760
I can know I can practice for one of the balls.

15:31.760 --> 15:32.880
I will then practice for that.

15:32.880 --> 15:34.880
The other group had no idea.

15:34.880 --> 15:36.880
There's a ball happening.

15:36.880 --> 15:42.160
Then the third group got nothing, so we have a control group.

15:42.160 --> 15:46.600
After the six weeks, there was another test, so we had a test at the beginning, six weeks

15:46.600 --> 15:51.360
and then another test, where they got 45 random balls.

15:51.360 --> 15:54.640
The control group improved by 6.2%.

15:54.640 --> 15:58.720
People are getting better, or there's some random variation in how you're testing, so

15:58.720 --> 16:05.440
you can ignore the 6%, or you can reduce the results by 6%.

16:05.440 --> 16:09.800
The blocked group, which is they know what they're getting, they improved by 24.8%.

16:09.800 --> 16:13.320
It's pretty nice.

16:13.320 --> 16:16.320
What do you think the random group hit?

16:16.320 --> 16:19.480
Any guessers around the blocked?

16:19.480 --> 16:20.480
The same?

16:20.480 --> 16:21.480
56.7%.

16:21.480 --> 16:22.480
What?

16:22.480 --> 16:35.080
They don't know what they're practicing for, they get some stuff, and it's like they practiced

16:35.080 --> 16:38.240
for twice the amount of time than the blocked group.

16:38.240 --> 16:39.240
What's going on?

16:39.240 --> 16:42.480
This is weird.

16:42.480 --> 16:46.360
Some might say, shouldn't the blocked practice have helped more?

16:46.360 --> 16:49.800
Because in the random practice, you don't know what you're practicing for.

16:49.800 --> 16:55.640
You have no way to prepare any sort of mental model or muscle memory for the throws that

16:55.640 --> 16:58.400
are coming.

16:58.400 --> 17:01.400
We'll get into this a bit later.

17:01.400 --> 17:03.280
What's going on here?

17:03.280 --> 17:09.080
I wanted to learn Rust, the programming language, not the chemical process.

17:09.080 --> 17:13.320
I had the idea that I am a programmer, right?

17:13.320 --> 17:16.080
I have certain skills.

17:16.080 --> 17:19.480
I had some experience with programming, I think.

17:19.480 --> 17:22.680
Those skills should transfer.

17:22.680 --> 17:28.960
Learning another language, like really learning it, should be easy, because I have no C++,

17:28.960 --> 17:33.880
I know JavaScript for crying out loud.

17:33.880 --> 17:40.320
Doing the next one should be easy, right?

17:40.320 --> 17:46.240
This is not a jab at the idea that Rust is difficult, because I don't think that matters.

17:46.240 --> 17:48.400
That's not the point here.

17:48.400 --> 17:54.120
Rust is a jab at my hubris, so if you want to do a jab at my hubris, you can do that.

17:54.120 --> 17:55.120
Enjoy it.

17:55.120 --> 18:01.960
What I found that, I actually didn't learn that much of Rust until I really sat down

18:01.960 --> 18:07.560
and I really sunk my teeth into it.

18:07.560 --> 18:14.440
Doing a tutorial here or there, doing a video lecture, no, didn't help at all.

18:14.440 --> 18:15.440
Why?

18:16.040 --> 18:18.760
So as a curious person, I wanted to know why.

18:18.760 --> 18:24.320
So instead of learning more Rust, I wanted to learn about why I wasn't learning more

18:24.320 --> 18:25.320
Rust.

18:25.320 --> 18:30.600
I think this is called yak shaving for some people, but at least you will enjoy the fruits

18:30.600 --> 18:32.040
of that labor.

18:32.040 --> 18:37.040
So I sat down and I read books and I studied papers like these ones.

18:37.040 --> 18:44.760
I wanted to know why when you have a skill beforehand, it doesn't transfer that well.

18:45.120 --> 18:51.080
It's not until you actually sit down and work on it, only then it actually works.

18:51.080 --> 18:54.280
So let's talk about Pokemon.

18:54.280 --> 18:57.880
Okay, okay, and Rust, and Rust.

18:57.880 --> 19:04.320
So after going through these exercises that cover the basics of Rust, I used that exercise

19:04.320 --> 19:08.160
called Rustlings to begin with, very good to recommend them.

19:08.160 --> 19:13.320
I started to look at my older projects that I had made in C++, so with the idea that I

19:13.360 --> 19:15.400
would just convert them over.

19:15.400 --> 19:16.680
I have a skill here.

19:16.680 --> 19:19.000
I want to see how this looks in the other language.

19:19.000 --> 19:23.360
I can compare and contrast very scientist.

19:23.360 --> 19:25.640
So and yeah, this is a great technique.

19:25.640 --> 19:29.240
If you're doing this, if you have an older project, if you know another language, you

19:29.240 --> 19:31.040
should convert stuff over.

19:31.040 --> 19:34.600
So now you have to take a Pokemon quiz.

19:34.600 --> 19:35.600
No.

19:35.600 --> 19:39.240
So the general idea, the only thing you have to know about Pokemon is that they are of

19:39.240 --> 19:41.240
a certain type.

19:42.160 --> 19:45.920
There are probably thousands, hundreds, whatever.

19:45.920 --> 19:46.920
But they are of a certain type.

19:46.920 --> 19:49.840
There could be a fire Pokemon, a water Pokemon, yada, yada.

19:49.840 --> 19:56.360
And if a fire Pokemon attacks a grass Pokemon, they do twice the amount of damage.

19:56.360 --> 20:02.360
If an electric Pokemon attacks, let's say, a dark Pokemon, which is one of the types,

20:02.360 --> 20:03.880
they do half damage.

20:03.880 --> 20:07.080
And for the black squares, they do no damage.

20:07.080 --> 20:08.080
That's the only thing you have to know.

20:08.120 --> 20:09.400
Now you are a Pokemon expert.

20:09.400 --> 20:10.400
Enjoy.

20:11.880 --> 20:20.800
So what this means is, so I made a project, I think now 10 years ago, that takes where

20:20.800 --> 20:26.080
every pixel on the grid, I will show you a grid in a bit, is a Pokemon of a certain

20:26.080 --> 20:27.080
type.

20:27.080 --> 20:32.600
It will look around the grid, look for other Pokemons, and then do an attack, do some

20:32.600 --> 20:33.600
damage.

20:33.640 --> 20:38.800
If the Pokemon you attacked dies, and let's say you are an electric Pokemon, they will

20:38.800 --> 20:40.480
then turn into an electric Pokemon.

20:42.480 --> 20:43.480
It's kind of like this.

20:44.480 --> 20:46.280
Happy how well the GIF looks in this.

20:47.280 --> 20:48.560
So this is the C++ version.

20:50.080 --> 20:53.640
And this is also, I'm going to show you the Rust version later on, but it will look quite

20:53.640 --> 20:54.640
a bit different.

20:54.640 --> 20:58.600
But I had a different parameter for the GIF that I had, but yeah, it looks pretty, right?

20:59.720 --> 21:00.960
They're growing, they're shrinking.

21:01.600 --> 21:03.000
Yeah, Pokemon attacking.

21:03.640 --> 21:05.440
So let's look at the C++ code.

21:06.040 --> 21:08.400
And yeah, this is from 10 years ago, so you can totally make fun of me.

21:08.480 --> 21:09.480
That's fine.

21:10.200 --> 21:15.840
So you have an X coordinate, which is the where you are on the X grid, on the Y

21:15.840 --> 21:19.280
coordinate, same grid size, because it's a one by one grid.

21:20.440 --> 21:25.400
The idea is that you have an array of a ray of Pokemon.

21:26.240 --> 21:30.560
You will then get the attacker, which is the first Pokemon, you get a reference to

21:30.560 --> 21:34.480
it, and then you find out who your weakest neighbor is.

21:35.040 --> 21:38.000
So you take, you create a position out of your position.

21:38.640 --> 21:43.680
You have an out variable, yes, out variable, 10 years ago, off the enemy

21:43.680 --> 21:45.840
position, you have a function called weakest neighbor.

21:46.520 --> 21:52.200
You take in your position, the enemy position, and the list of the Pokemon, then

21:52.200 --> 21:55.160
you will get out the weakest Pokemon around you.

21:56.240 --> 21:58.200
Let's, you get the position for that Pokemon.

21:58.640 --> 22:01.080
Let's then get that Pokemon itself, and then you fight.

22:02.080 --> 22:02.800
Simple enough, right?

22:03.360 --> 22:06.760
Where you are, who is the weakest, get a reference to it, fight.

22:07.400 --> 22:07.720
Cool.

22:09.440 --> 22:10.360
This is the Rust version.

22:12.480 --> 22:14.280
So in the Rust version, the colors are correct.

22:15.080 --> 22:16.520
So yellow is lightning.

22:16.880 --> 22:19.200
The purple one is dark, I think.

22:19.760 --> 22:20.440
I don't know the other.

22:21.000 --> 22:21.960
Green is grass, maybe.

22:22.520 --> 22:23.080
It's very pretty.

22:23.920 --> 22:24.360
I like it.

22:25.080 --> 22:26.240
Yeah, it has other parameters.

22:26.240 --> 22:27.200
I think it's running faster.

22:27.320 --> 22:29.520
So these are more generations than the other one.

22:30.280 --> 22:33.440
Okay, so let's implement that in Rust.

22:34.640 --> 22:39.000
So a Pokemon is, you have certain health and you can do a certain amount of damage.

22:39.200 --> 22:41.960
I think in the tests I had, they all had the same damage, but then you had the

22:41.960 --> 22:44.800
multiplier, but it's nice to have like a variable for it.

22:45.360 --> 22:49.880
So when you want to implement functions onto a class in Rust or struct in Rust,

22:51.080 --> 22:52.160
they are separated out.

22:52.160 --> 22:55.560
You have the struct, and then you have the implementation for the struct.

22:56.480 --> 23:00.400
So this is a, what we might think of as a static function.

23:00.920 --> 23:03.400
So this is to create a new Pokemon.

23:03.760 --> 23:05.640
It returns a type of itself.

23:06.280 --> 23:08.280
So here we just create a Pokemon.

23:09.040 --> 23:11.760
You might think of this as an R value that I return.

23:12.000 --> 23:14.760
So remember that I'm returning, it doesn't have a semicolon.

23:14.760 --> 23:17.160
So I'm actually returning the Pokemon out from the function.

23:17.240 --> 23:18.920
So I'm just creating a Pokemon and returning it.

23:19.480 --> 23:21.200
It has 10 health and it does five damage.

23:22.560 --> 23:23.440
Then I have a function.

23:23.720 --> 23:25.640
So you can say it's a function, take damage.

23:25.680 --> 23:27.200
It has a mutable self.

23:27.520 --> 23:31.920
So this is a non-const function and the amount of damage that I want to take.

23:31.920 --> 23:34.520
And you look here, I'm not taking in reference of anything, just a value.

23:35.280 --> 23:36.480
And yeah, simple as that.

23:37.200 --> 23:37.840
Simple as that.

23:38.040 --> 23:38.840
I reduce the health.

23:40.080 --> 23:43.960
So a battle is then a container of Pokemons.

23:44.400 --> 23:45.840
So Rust has container stuff.

23:46.560 --> 23:47.440
We have here vector.

23:47.840 --> 23:51.080
They work generally similar as the vector that we have.

23:51.920 --> 23:55.920
So I want to implement the battle in the same way I have a static function to

23:55.920 --> 23:56.640
new the battle.

23:57.240 --> 24:00.800
For this example, I'm only going to have two Pokemons.

24:01.360 --> 24:04.200
So I'm not going to have the full grid just to simplify the code.

24:04.920 --> 24:09.360
So I just say Pokemon new, Pokemon new, and I have a vector from two Pokemons.

24:10.000 --> 24:10.280
Okay.

24:11.240 --> 24:13.320
And again, I have a battle and I'm returning the battle.

24:13.320 --> 24:15.400
So now I have a battle of two Pokemons.

24:15.960 --> 24:17.360
So let's fight.

24:17.880 --> 24:18.240
Cool.

24:18.920 --> 24:23.520
So because we, when we're fighting, one of the health of one of the Pokemons goes

24:23.520 --> 24:27.520
down, so I want to mutate, mutate whatever's in the Pokemon.

24:28.360 --> 24:30.400
So this is a way of doing a loop.

24:30.440 --> 24:35.120
If I want the index for N and I dot, dot, dot, self, I can have some length.

24:35.320 --> 24:36.600
So self Pokemon length.

24:37.560 --> 24:41.920
So again, same way I'm doing a super plus, since I was converting stuff over, I

24:41.920 --> 24:43.240
get a reference to the attacker.

24:44.320 --> 24:46.280
I get a mutable reference to the defender.

24:47.280 --> 24:48.240
And I say fight.

24:49.240 --> 24:49.760
Okay.

24:50.520 --> 24:51.080
Sounds good.

24:52.080 --> 24:54.280
I have the rust teacher shaking his head.

24:56.800 --> 24:58.520
No, this doesn't work.

24:59.960 --> 25:00.560
Okay.

25:00.760 --> 25:01.760
So this is another thing.

25:03.120 --> 25:07.800
So here we have cannot borrow self Pokemons as mutable because it's also

25:07.800 --> 25:09.920
borrowed as immutable there.

25:11.800 --> 25:12.240
What?

25:12.280 --> 25:12.680
What?

25:14.040 --> 25:19.080
So the, the, the idea that I had in the C++ version actually has a problem

25:19.720 --> 25:25.920
because in one sense I'm having a, a non mutable borrow to a value and I'm

25:25.920 --> 25:29.560
having a mutable borrow to another value, which is something that C++ doesn't care

25:29.560 --> 25:29.880
about.

25:30.760 --> 25:33.600
But here they're like, no, this is scary.

25:33.720 --> 25:34.520
This is dangerous.

25:34.600 --> 25:35.200
Don't do this.

25:36.760 --> 25:37.680
So how would you fix this?

25:38.160 --> 25:38.440
Right.

25:39.440 --> 25:42.360
Well, what do I actually need from the attacker?

25:43.200 --> 25:45.000
I don't need the actual attacker.

25:45.560 --> 25:46.720
I only need the damage.

25:47.160 --> 25:52.000
So the solution in this case is we just get the damage and then we do the attack.

25:52.040 --> 25:58.520
We don't need the actual, we don't need the entire structure to do a combat when

25:58.520 --> 26:00.800
only one parameter of the Pokemon actually matters.

26:02.080 --> 26:04.800
So here's the language and telling you, you're being silly.

26:05.080 --> 26:06.080
You should rethink this.

26:06.400 --> 26:08.240
This is not, uh, you're not playing.

26:08.440 --> 26:09.520
You're programming in the wrong way.

26:09.760 --> 26:11.440
The language is saying, please rethink this.

26:12.200 --> 26:12.440
All right.

26:12.760 --> 26:14.080
So in the actual version, that's what we do.

26:14.080 --> 26:16.400
We just take the values we need out to use them.

26:17.680 --> 26:18.040
Cool.

26:19.040 --> 26:20.320
Let's go back to paintings.

26:21.960 --> 26:22.240
Right.

26:23.680 --> 26:24.440
Beautiful paintings.

26:25.800 --> 26:30.600
So in 2008, an experiment was conducted at the University of California.

26:32.400 --> 26:36.080
The goal of the research was to detect the difference between two teaching methods,

26:36.880 --> 26:38.320
masked versus spaced.

26:41.680 --> 26:47.440
They were asked to study paintings grouped by the artist, which is called masked.

26:47.600 --> 26:50.480
You get a bunch of paintings by one artist.

26:51.400 --> 26:53.920
And then you have to have a quiz after that.

26:55.000 --> 26:58.240
Uh, or they were interleaved by other artists.

26:58.240 --> 27:02.480
So you'd have artist A, artist B, artist C, and then mixed together.

27:03.480 --> 27:10.720
So each masked participant would get a set of paintings by the same artist and you

27:10.720 --> 27:15.160
would spend time looking at the style, the next painting, since it's by the same

27:15.160 --> 27:17.240
artist and look for similarities.

27:17.800 --> 27:22.760
Like you look at painting A by artist A, looking paint, next painting by artist A,

27:22.800 --> 27:24.560
like, okay, what is this similar thing here?

27:24.560 --> 27:29.560
Like we did with Van Gogh in the beginning, but the space participants would get a

27:29.640 --> 27:31.240
mix of artists all over the place.

27:31.720 --> 27:32.240
Okay.

27:34.040 --> 27:39.680
So what they would then have to ask the quiz was basically like we did in the

27:39.680 --> 27:42.600
beginning, is this a painting by artist A?

27:42.640 --> 27:43.920
Is this by Van Gogh?

27:44.800 --> 27:49.960
In the actual test, they used like non famous artists or like, like they wouldn't

27:49.960 --> 27:51.280
have starry night, right?

27:51.560 --> 27:53.680
They would have just some, some artists.

27:54.520 --> 27:57.760
Uh, so the results were counterintuitive because they were not

27:57.760 --> 28:01.440
counterintuitive because the spaced version did better.

28:03.640 --> 28:04.400
Always better.

28:05.480 --> 28:07.200
Never like there isn't a variance here.

28:08.200 --> 28:12.920
So the people who did not get to focus on art, one artist, the next one, the next

28:12.920 --> 28:15.240
one, they did worse.

28:16.360 --> 28:16.640
Oh, sorry.

28:16.640 --> 28:19.880
The, yeah, the people who, who did not get to do that, they did better.

28:19.880 --> 28:20.160
Sorry.

28:20.520 --> 28:21.920
Other way around my brain.

28:23.240 --> 28:27.120
But not only that, yeah, the space version where the participants are not able

28:27.120 --> 28:31.080
to study a single painter at a time and focus on their styles, got a better

28:31.080 --> 28:31.520
result.

28:32.080 --> 28:40.160
So, and even if the masked version did worse, they liked that way.

28:41.520 --> 28:46.400
They were asked afterwards, even after they've known the results, which one

28:46.440 --> 28:47.360
do you like?

28:47.760 --> 28:52.120
Do you like to learn one painter at a time to focus on the thing?

28:53.120 --> 28:57.440
Or do you want it spread out and randomly selected?

28:58.120 --> 29:02.440
Even if they knew the results, no, they still like learning one at a time.

29:04.760 --> 29:05.560
They did worse.

29:05.720 --> 29:06.360
They didn't care.

29:08.360 --> 29:16.040
So from quoting from the, the test in experiments, one A and two combined, 85% of

29:16.040 --> 29:19.920
the participants did at least well in the space condition, as well as the mask,

29:20.400 --> 29:26.760
mask condition, but 83 of the participants rated the mask condition as equally

29:26.760 --> 29:29.160
effective or more effective than the space condition.

29:32.160 --> 29:33.840
It's not even slight difference.

29:33.920 --> 29:38.480
Like, no, most people wanted the one same artist.

29:41.760 --> 29:48.200
Looking back at our own inability to foresee the benefits of spacing, perhaps we

29:48.200 --> 29:51.960
felt victim to the same illusion that we have railed against.

29:52.400 --> 29:56.480
So these are the, the study, the testers, Bjork and Cornell.

29:58.400 --> 29:59.840
And this has been done over many years.

30:00.080 --> 30:06.240
So 94, 99 and 2007, different types of studies, namely the illusion that a sense

30:06.240 --> 30:12.240
of ease and fluency accompanies effective learning, whereas a sense of

30:12.280 --> 30:15.160
difficulty signifies ineffective learning.

30:18.800 --> 30:22.680
In the case of the induction, the case of induction, as many as other types of

30:22.680 --> 30:27.680
learning spacing appears to be sometimes, if not always, at the desirable

30:27.680 --> 30:28.320
difficulty.

30:28.720 --> 30:31.720
So this is the word, the desirable difficulties.

30:32.680 --> 30:33.680
This is 94.

30:35.200 --> 30:38.680
And this is the concept that's used, the concept that you see here is the

30:38.680 --> 30:41.120
important point, the desirable difficulty.

30:42.520 --> 30:45.800
We don't want things to be hard just for the sake of being hard.

30:46.800 --> 30:50.720
The next slide is not a better version of this one.

30:52.400 --> 30:55.520
I can tell you that this is a, a, a Caesar cipher of two.

30:56.400 --> 30:57.280
Now go read the slide.

30:59.560 --> 31:00.400
It's not better.

31:01.360 --> 31:04.400
So these, this is, this slide is more difficult than this slide.

31:05.160 --> 31:06.680
That's not, does not mean it's better.

31:07.040 --> 31:10.000
So the key concept is the desirable difficulty.

31:10.800 --> 31:12.320
So, sorry, man.

31:12.880 --> 31:16.080
So quoting Elizabeth Bjork and Robert Bjork again about the desirable

31:16.080 --> 31:21.560
difficulties, they trigger encoding and retrieval processes that support

31:21.560 --> 31:23.640
learning, comprehension, and remembering.

31:25.320 --> 31:27.800
So this is, this is kind of my summary for this.

31:28.160 --> 31:32.600
Practicing easy things is fooling your brain and thinking that you're doing well.

31:35.240 --> 31:35.760
Okay.

31:36.600 --> 31:37.080
Good.

31:37.480 --> 31:37.760
Good.

31:39.600 --> 31:42.840
So empirical studies have looked at the different learning methods and

31:42.840 --> 31:45.120
strategies that have a positive impact on your learning.

31:46.120 --> 31:50.800
So spacing that we talked about before, also interleaving.

31:51.040 --> 31:54.600
So spacing is like spacing out the different types you have.

31:54.640 --> 31:59.080
Interleaving is different kinds of learning, doing different methods of like,

31:59.480 --> 32:02.440
I want to learn in one style and then I learn another style.

32:02.440 --> 32:07.640
And yeah, variation, like learn different things as well.

32:08.200 --> 32:09.800
And also this thing, generation.

32:10.760 --> 32:16.280
So what generation is, at least what they were thinking is you will be taught

32:16.280 --> 32:20.920
something and now you have to create questions about the thing that you learned.

32:21.800 --> 32:23.000
You will not be given questions.

32:23.000 --> 32:24.240
You will not be given material.

32:24.720 --> 32:28.000
You have to form your own thoughts about this thing.

32:28.320 --> 32:31.120
Which sounds difficult, which it is, and that's good.

32:31.880 --> 32:33.000
That's what generation is.

32:39.160 --> 32:44.240
So there was even a study done, Karen Poth, 1978.

32:45.080 --> 32:47.680
So kids were supposed to throw bean bags at a target.

32:49.560 --> 32:53.880
Group A, practice by throwing at a single target, like these things here.

32:54.880 --> 32:59.200
Group B, practice by throwing at many targets, either close or further away,

32:59.440 --> 33:02.160
but never the same distance as group A.

33:04.560 --> 33:08.360
Then a test was conducted to throw at the same target that group A used

33:08.880 --> 33:10.120
and group B did better.

33:11.080 --> 33:14.480
So here we have variation, practice different things.

33:17.160 --> 33:19.720
So let's go back to Rust or any language.

33:20.440 --> 33:23.320
So what does it actually take to learn a new programming language?

33:24.240 --> 33:26.040
So is it enough to watch a YouTube video?

33:29.440 --> 33:29.760
Good.

33:31.240 --> 33:33.120
To read a blog post-tutorial?

33:35.920 --> 33:37.720
To watch an hour-long conference talk?

33:42.920 --> 33:43.920
To sit down in the program?

33:44.840 --> 33:45.920
More hands, more nods?

33:46.440 --> 33:46.920
No.

33:48.160 --> 33:54.960
But you need all of these and more because mixed together over a long period of time.

33:55.960 --> 34:00.480
So this is kind of the key that I've been seeing through obsessing about learning,

34:00.880 --> 34:04.160
is watching a YouTube video is one style of learning.

34:06.040 --> 34:10.400
And then reading a blog post-tutorial, watching a talk, doing a programming,

34:10.560 --> 34:16.000
like you are interweaving everything that is happening here, different learning styles.

34:16.520 --> 34:18.520
And this also adds time.

34:19.560 --> 34:20.400
So this is the...

34:21.400 --> 34:24.720
What I've been seeing through all of the studies is it takes time,

34:24.960 --> 34:29.880
and different things that you do, and then at some point, yeah, you will learn something.

34:30.160 --> 34:32.160
But it is difficult, and that is good.

34:33.640 --> 34:34.880
Not the first is difficult.

34:35.480 --> 34:37.000
Maybe it is, but that's another point.

34:38.440 --> 34:41.080
So let's learn programming in 10 days, right?

34:41.840 --> 34:42.960
Or 10 hours or 30 days.

34:42.960 --> 34:44.840
So who has seen the books?

34:45.480 --> 34:46.920
Have they become less common, right?

34:47.240 --> 34:50.400
Yeah, learning Java in 30 days or whatever they're called.

34:51.400 --> 34:56.800
There's a blog post by Peter Norwick, which he's very angry at these books, and rightly so.

34:58.560 --> 35:00.520
So, yeah, I don't think you learn programming in 10 days.

35:02.320 --> 35:03.600
So, remembering.

35:04.480 --> 35:07.840
So what I can see from the literature, yeah, mixing up practice styles,

35:08.880 --> 35:10.640
waiting between study sessions.

35:10.960 --> 35:12.360
So now you have an excuse, right?

35:13.440 --> 35:14.880
I'm not procrastinating.

35:15.440 --> 35:16.480
This is the waiting period.

35:16.560 --> 35:20.120
This is the incubation period between the study sessions.

35:21.200 --> 35:21.720
Don't cram.

35:21.800 --> 35:23.520
That's another thing they've shown.

35:24.000 --> 35:24.920
Cramming has no point.

35:25.240 --> 35:31.400
They've been doing tests on students that, and I don't have the example of,

35:32.720 --> 35:35.200
some of them had to really cram before a test.

35:35.720 --> 35:39.640
The others were not allowed to study before the test, and there was no

35:39.640 --> 35:41.040
significant difference between them.

35:42.400 --> 35:45.920
There's even like the, what's it called, the cue cards, that they would like really

35:45.920 --> 35:47.880
learn through the cue cards, and yeah, there's no difference.

35:48.480 --> 35:48.920
Don't cram.

35:50.440 --> 35:54.760
So, and this is a re-wording of one of the quotes.

35:55.200 --> 35:58.960
Difficult to remember in things, and then finding the right results

35:59.280 --> 36:00.360
strengthens the memory.

36:01.640 --> 36:05.320
I told you something, and then you had to recall it again.

36:06.840 --> 36:11.160
An anecdotal evidence, or anecdotal story that I heard about something

36:11.160 --> 36:18.040
like this is, the memories you have of when you were a kid exist as pictures

36:18.200 --> 36:19.400
in your parents' house.

36:20.520 --> 36:22.640
Because you go back and you look at the pictures.

36:22.880 --> 36:25.720
So you remember the time you went to the theme park, or you remember the time

36:25.720 --> 36:30.040
you climbed that hill, because you see it again and again over time.

36:30.680 --> 36:33.840
There are other memories, but the ones that are pictures in your parents'

36:33.840 --> 36:35.560
house, those are the ones you remember.

36:37.320 --> 36:44.600
So, in 1950s and 60s, the concept of errorless learning was advocated by

36:44.640 --> 36:45.240
B.F. Skinner.

36:45.760 --> 36:48.640
Yes, that's Skinner, that's you, might be thinking about.

36:49.640 --> 36:54.800
So, the idea was to give you the information, and then immediately a quiz.

36:55.320 --> 36:57.240
So, who remembers what I was doing in the beginning of the talk?

37:01.440 --> 37:05.320
So, we are fetching information straight from the short-term memory.

37:06.120 --> 37:09.360
That was the big thing, like, if I tell you something, and immediately quiz you

37:09.360 --> 37:12.800
on it, you won't fail the quiz, and then you are an expert.

37:13.760 --> 37:14.120
Right?

37:14.720 --> 37:15.000
No.

37:16.840 --> 37:19.400
Yeah, the opposite has actually been shown to be true.

37:20.720 --> 37:22.200
To quiz people later.

37:23.360 --> 37:28.200
So, there was a case of, and I think, yeah, there's another thing I'm going to show you.

37:29.040 --> 37:35.640
There's a case of the, like, a class has been taught in multiple ways, where there

37:35.640 --> 37:40.800
was a bunch of quizzes during the poll session.

37:41.320 --> 37:41.680
Wow.

37:42.880 --> 37:48.800
Not the seminar, during the whole year, half a year, where they were giving a

37:48.800 --> 37:51.960
bunch of quizzes along the way, and there was no final exam, and then just a

37:51.960 --> 37:56.560
grade from that, or there was no quiz and one big final exam at the end with

37:56.560 --> 38:02.680
everything, but then they tested the people again, I think a year later, and the

38:02.680 --> 38:07.400
people who had the one quiz at the end still remembered more than the people who

38:07.400 --> 38:09.240
just, because that's what you're doing.

38:09.360 --> 38:12.200
You're, I learned A, have a test on A.

38:12.280 --> 38:15.880
I learned B, I have a test on B, then I don't have to think about it, but those

38:15.880 --> 38:18.920
who have to learn everything and take a test on everything, they had to really

38:18.920 --> 38:22.120
sit and, yeah, remember everything that was happening.

38:23.240 --> 38:28.040
So, they were giving kids a set of hard puzzles, like the anagram puzzles.

38:29.720 --> 38:33.120
Half of them were just said, yeah, it's going to be hard.

38:34.000 --> 38:35.760
Difficulty is just a part of it, and that's okay.

38:36.000 --> 38:36.600
Don't worry about it.

38:37.600 --> 38:43.280
Uh, the other halves were asked to, like, explain how they would solve a puzzle.

38:44.160 --> 38:45.520
Like, yeah, you have to solve this.

38:45.760 --> 38:47.320
Tell me how you're thinking about the problem.

38:48.480 --> 38:49.360
The first group did better.

38:52.000 --> 38:52.200
Yeah.

38:53.600 --> 38:54.840
Just saying, like, it's going to be hard.

38:54.920 --> 38:55.280
That's okay.

38:55.880 --> 38:56.720
You're going to fail something.

38:56.720 --> 38:57.200
That's fine.

38:57.280 --> 38:58.760
Just let's, let's go through this.

38:58.760 --> 39:02.120
The other one, we talk about, like, how are you doing things?

39:02.120 --> 39:04.720
Or I'll give you a little tip on how to solve these puzzles.

39:04.720 --> 39:05.040
No, no.

39:05.680 --> 39:07.000
It's, it's, it's fine to be hard.

39:07.680 --> 39:14.640
Um, there's, there is a festival of errors in, I think, Paris from the 90s,

39:15.520 --> 39:17.200
where they're just celebrating that we're going to fail.

39:18.160 --> 39:21.200
And then it's like a festival for school kids and it's going to be okay.

39:21.200 --> 39:23.560
And then we're going to fail things and it's going to be hard.

39:23.560 --> 39:24.680
And yeah, it's kind of fun.

39:26.320 --> 39:32.520
So a question on my throughout there is, isn't this how we learn as programming

39:32.520 --> 39:33.920
also over time?

39:35.200 --> 39:36.560
So blocking versus spacing.

39:36.880 --> 39:40.240
So we might think about a specific feature or we might learn about a specific

39:40.240 --> 39:44.920
feature, but then, like, we don't learn about the vector and then only use vector

39:44.920 --> 39:45.440
for a long time.

39:45.920 --> 39:49.360
No, we learn about vector and then we learn about algorithms or then you learn

39:49.360 --> 39:52.160
about, um, I don't know, something else, right?

39:53.200 --> 39:55.080
So we do this blocking versus spacing.

39:55.560 --> 39:57.880
Like we don't teach, there's not a class on vectors.

39:58.320 --> 40:01.040
I don't think, uh, variation.

40:01.280 --> 40:04.000
We learn about different programming languages, programming language styles,

40:04.000 --> 40:06.560
different libraries, we're reading other people's code.

40:06.600 --> 40:06.880
Yeah.

40:07.440 --> 40:08.280
All these kinds of things.

40:09.040 --> 40:09.840
Uh, generation.

40:09.960 --> 40:11.280
I mean, we write our own code.

40:11.560 --> 40:12.720
We read code by others.

40:13.000 --> 40:15.240
We form questions about the code that needs to be answered.

40:16.000 --> 40:20.440
So we are not doing this, but over time and quizzing.

40:21.400 --> 40:24.600
I mean, I'd argue that code reviews are quizzes that we take every day.

40:24.840 --> 40:25.520
That is the question.

40:25.520 --> 40:26.880
Is this block of code okay?

40:28.600 --> 40:29.960
So we take a bunch of quizzes.

40:31.320 --> 40:31.640
All right.

40:33.240 --> 40:33.880
How are we on time?

40:35.480 --> 40:35.800
Good.

40:36.560 --> 40:39.520
So how are we learning rushed the wrong way?

40:41.240 --> 40:45.800
Uh, in the same way, we're learning everything the wrong way, basically, by

40:45.800 --> 40:49.000
looking for the easy way out, like I did my hubris.

40:50.240 --> 40:57.320
Uh, and we also fall into the curse of knowledge while teaching because I find

40:57.320 --> 41:01.440
this easy to explain, so it must be easy for others as well.

41:02.680 --> 41:04.160
I know what subsumption is.

41:05.160 --> 41:07.440
So I can explain to you what subsumption is, right?

41:08.000 --> 41:09.080
No, that doesn't work.

41:10.560 --> 41:13.400
So what is the rusty key to all this?

41:13.640 --> 41:14.280
I like this one.

41:14.320 --> 41:16.000
Oh, I was so happy when I found this image.

41:16.880 --> 41:19.200
Get up, get a basket in this image, right?

41:19.880 --> 41:20.160
All right.

41:20.320 --> 41:20.520
Good.

41:20.560 --> 41:20.880
Thank you.

41:21.960 --> 41:22.760
It's going to take time.

41:23.240 --> 41:23.800
That's the key.

41:24.360 --> 41:25.720
It's going to require practice.

41:26.240 --> 41:32.320
It's going to feel difficult and that's good because not because rushed

41:32.320 --> 41:35.720
itself with difficult, because that's how you get the best results.

41:36.920 --> 41:39.320
I mean, we as programmers are min maxers.

41:39.360 --> 41:41.440
We think about like, what's the best way optimal way?

41:42.000 --> 41:47.920
And I'm sorry, but the study show that the best way is the hard way in a way.

41:50.240 --> 41:52.160
I mean, it's not like learning C++ was easy, right?

41:56.400 --> 41:56.880
Yes.

41:57.040 --> 42:00.400
So now I'm going to be mean to myself as well.

42:00.920 --> 42:05.200
Unfortunately, in this case, there is considerable evidence that in many

42:05.200 --> 42:10.480
situations, this strategy, which is the one hour lecture is rather poor.

42:11.480 --> 42:12.320
From 71.

42:13.200 --> 42:15.200
What have we, what are we doing?

42:15.240 --> 42:16.000
What are we doing here?

42:16.560 --> 42:17.240
Just go home.

42:19.200 --> 42:25.480
A lecture may inspire, motivate, and inform, but I'm not going to tell you

42:25.480 --> 42:28.720
but rarely fulfills the principles for effective learning.

42:29.440 --> 42:32.880
It's certainly inadequate for developing high, the high level skills.

42:33.520 --> 42:34.040
71.

42:35.640 --> 42:36.000
Oops.

42:40.000 --> 42:40.240
Yeah.

42:40.320 --> 42:44.400
Students who study the topic and then generate their own questions scored an average

42:44.400 --> 42:49.080
of 14% higher than on a test than students that use passive strategies like

42:49.080 --> 42:51.280
studying the notes or rereading classroom materials.

42:52.280 --> 42:56.600
Creating questions, researchers found, not only encourage students to think more

42:56.600 --> 43:01.240
deeply about the topic, but also strengthen their ability to remember what

43:01.240 --> 43:02.080
they were studying.

43:04.120 --> 43:04.680
Yes.

43:07.680 --> 43:12.760
When Pablo Casals, the cellist, was asked why he continued to practice that

43:12.760 --> 43:15.920
cello three hours a day at the age of 93.

43:16.760 --> 43:19.400
He answered and beginning to notice some improvements.

43:20.400 --> 43:25.120
And because, like I talked about the one hour lecture is not good enough, it's, it's

43:25.120 --> 43:27.680
15 minutes until I think it should be safe, right?

43:27.720 --> 43:28.280
So thank you.

43:39.800 --> 43:41.600
So form your own questions, please.

43:43.720 --> 43:44.440
Yes.

43:44.560 --> 43:45.200
Yeah.

44:01.240 --> 44:06.680
What if we need, so it needs to be restructed, reconstructed that the thing that

44:06.680 --> 44:12.160
is going to do the, the mutation, the value is not the same thing as the

44:12.240 --> 44:16.520
class because the, the, the key of the issue, which I think is correct is because

44:16.520 --> 44:21.440
the self is mutable, that means that the, the, the vector is mutable and I'm

44:21.440 --> 44:25.400
asking for a mutable value of the vector that means that the, I'm asking for the

44:25.400 --> 44:28.520
whole vector to be in a, I don't know, mutable state.

44:29.240 --> 44:37.000
So take it out of the class because we are, we're asking, we're asking the

44:37.440 --> 44:40.480
class to be mutable when we actually don't need it to be mutable.

44:40.480 --> 44:42.880
And that's that we don't need that one value to be mutable.

44:44.080 --> 44:48.040
So I can, I can show you the actual worst code.

44:48.040 --> 44:49.080
It's, it's on GitHub.

44:49.320 --> 44:52.360
I can show you the actual Pokemon code and it's a bit, it's a, it's

44:52.360 --> 44:55.520
oddly structured, but yeah, we, we don't do the compact there.

44:56.000 --> 44:56.800
That's basically the case.

45:00.720 --> 45:03.280
And the other form questions, I know it's hard.

45:03.280 --> 45:05.160
Yeah, that was before here.

45:12.120 --> 45:17.720
Have I found the thing I feel I still haven't mastered is the, the lifetime

45:17.720 --> 45:20.680
part where you do the lifetime annotation.

45:22.000 --> 45:26.760
I'm still in the, in the, in the area where like, I will just put the

45:26.760 --> 45:31.400
lifetime annotations until it works, which I don't, I don't, I don't, I don't

45:31.520 --> 45:39.240
know if it works, which I don't, like, yeah, exactly, which is, which is the,

45:39.240 --> 45:44.080
if you do the rustling exercises, that is what that is, is you have a compiler

45:44.080 --> 45:48.120
error and it will tell you, like, fix, fix the error in file number one.

45:48.240 --> 45:50.240
And then you fix the error in file number one, it will read through the

45:50.240 --> 45:53.480
tests and then it will say, fix the error in file number two, and it will go

45:53.480 --> 45:54.600
into file number two and read about it.

45:55.040 --> 45:57.560
And the first errors are like, said, we call it missing or the if statements

45:57.560 --> 46:00.040
is wrong, but then it's like, I think it's like 40, 50 exercises.

46:00.520 --> 46:04.200
But the, and what I found from the rustlings when I was doing those, there

46:04.200 --> 46:07.400
are no exercises about the lifetime, because you can do so much with the

46:07.400 --> 46:08.760
language without even thinking about that.

46:09.280 --> 46:12.120
Because a lot of the times if there is, I think it's, if it's one

46:12.120 --> 46:16.200
argument into the function, the compiler will do the lifetime thing for you

46:16.200 --> 46:19.440
correctly, because there's only one way to do it, I think.

46:20.440 --> 46:22.760
So yeah, the whole lifetime thing is, is weird.

46:23.160 --> 46:27.640
It actually, I, I found, again, the language kind of guided me in the

46:27.640 --> 46:33.400
right direction, which was I had, I was doing some web stuff where you can

46:33.720 --> 46:36.280
write rust and compile to web assembly and then run that.

46:36.920 --> 46:42.320
And I wanted a, a callback to the JavaScript code.

46:42.840 --> 46:46.720
And I wanted the callback to be a, a lambda within rust.

46:47.760 --> 46:52.880
But the thing is that the lifetime of a lambda that is capturing variables

46:53.200 --> 46:57.480
cannot be static or cannot be like globally alive, which is

46:57.560 --> 47:02.320
kind of what is necessary if you want to be callable from outside, because you

47:02.320 --> 47:05.400
always need to exist because you never know when you're going to be called.

47:06.360 --> 47:09.320
So in other languages, I might just get a function pointer and just hope

47:09.320 --> 47:09.800
that works.

47:10.160 --> 47:12.880
And probably 99% of the cases, yeah, that works.

47:13.320 --> 47:17.600
But, but actually, like that doesn't work.

47:17.720 --> 47:18.880
And the language will say no to you.

47:19.480 --> 47:19.680
Yeah.

47:20.560 --> 47:20.920
Yeah, one.

47:27.480 --> 47:33.560
I think the entire rust language is lava and it's a hello from me to, I'm

47:33.560 --> 47:37.560
going to be at Rust Fest next year and I'm sorry, everyone, this is my laughing

47:37.560 --> 47:38.040
question.

47:40.040 --> 47:40.840
Where are you on that?

47:42.360 --> 47:44.320
70% towards the second one.

47:47.040 --> 47:47.600
I like rust.

47:47.720 --> 47:48.080
It's fun.

47:49.600 --> 47:49.800
Yeah.

47:57.480 --> 48:10.800
So, so here's the thing about learning that I, because I learned this way.

48:11.280 --> 48:12.680
So this is the path that I've learned.

48:13.080 --> 48:19.760
So I recommend learning wrong and then doing a conference talk about it in the

48:19.760 --> 48:22.400
same way that people sometimes ask me, like, how did you learn C++?

48:22.400 --> 48:26.240
I'm like, yeah, I went to university for four years and studied there for four

48:26.240 --> 48:26.400
years.

48:26.400 --> 48:28.120
So you should also go to university for four years.

48:28.720 --> 48:30.160
They're like, do you recommend this book?

48:30.160 --> 48:31.680
Like, I've never read it, so I don't know.

48:33.400 --> 48:36.080
I do recommend the rustling exercises that I've mentioned.

48:37.240 --> 48:42.280
I do recommend doing things in smaller incremental steps.

48:42.600 --> 48:46.120
I do recommend moving projects you have, like smaller hobby projects over,

48:46.640 --> 48:49.000
because there's a lot of like walls you will hit along the way.

48:50.040 --> 48:50.720
And it will be hard.

48:52.240 --> 48:55.440
Also find like a good, like rust community to chat with.

48:55.520 --> 48:59.880
A bunch of them on Twitter, probably because a lot of them migrated from C++.

49:01.080 --> 49:04.760
But yeah, at least start there and then, yeah, time.

49:05.760 --> 49:06.040
Yeah.

49:08.280 --> 49:09.520
Any more well-formed questions?

49:09.520 --> 49:09.680
Yeah.

49:26.440 --> 49:27.640
Yes, yes.

49:33.000 --> 49:37.800
Yeah, because like an example I had with the Pokemon code, like I was doing

49:37.800 --> 49:38.720
in-out variables.

49:38.720 --> 49:43.880
I was like taking references to like arrays and stuff like, yeah, I have done

49:43.880 --> 49:49.840
smaller projects where I, so there's another teaching idea that I've had is,

49:50.240 --> 49:52.120
is to create limitations for yourselves.

49:52.480 --> 49:56.520
And like an example is you can, you can write a small hobby project or do

49:56.520 --> 50:00.480
like a small thing, but every single variable you have has to be a unique

50:00.480 --> 50:05.280
pointer, like all of them have to be unique pointers and that creates a

50:05.280 --> 50:08.440
bunch of problems, but that also teaches you a lot about unique pointer.

50:09.120 --> 50:10.280
So I've done that kind of thing.

50:10.280 --> 50:14.600
I haven't taken my own older project and like, that a modern version of them.

50:15.240 --> 50:15.880
Maybe I should.

50:15.880 --> 50:16.200
Yeah.

50:18.280 --> 50:18.760
Yes.

50:22.120 --> 50:22.680
Yeah.

50:35.600 --> 50:40.000
I, I think I've done that with TypeScript.

50:40.560 --> 50:43.400
I think that would describe my TypeScript like initially when I learned it

50:43.440 --> 50:49.240
because it was a, a, like a, and what's it called?

50:49.240 --> 50:54.400
A serverless AWS, AWS project with all sorts of like everything was async in

50:54.400 --> 50:54.880
the code.

50:54.880 --> 50:58.560
And like it was very, like it took me a long while to get like used to how

50:58.560 --> 51:02.240
things worked and how things looked and also had to learn AWS at the same time.

51:02.240 --> 51:06.040
And then how this whole, you have to like upload the lambdas up to the cloud and

51:06.040 --> 51:06.240
stuff.

51:06.240 --> 51:07.720
So, so I've done that.

51:08.920 --> 51:12.840
The main issue is, I guess it's hard, which I think is why, like, like last

51:12.840 --> 51:15.720
year I did a talk on TypeScript because yeah, I think I knew it pretty well.

51:16.440 --> 51:19.280
Maybe that was the, the reason why I knew it that well.

51:20.960 --> 51:26.160
But yeah, I think that's, that's how I learned that.

51:26.440 --> 51:30.640
So if you can use it, try it because it is difficult.

51:30.680 --> 51:31.760
It is very, very difficult.

51:32.280 --> 51:37.440
And I think it's, it will take a while for you to be, to feel productive.

51:37.560 --> 51:40.000
And, and for some people that might feel uncomfortable.

51:40.760 --> 51:41.000
So.

51:45.040 --> 51:45.600
Then thank you.

