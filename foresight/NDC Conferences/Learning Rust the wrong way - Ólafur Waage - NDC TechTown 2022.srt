1
00:00:00,000 --> 00:00:14,360
In Sundarst, in 1853, a boy named Vincent van Gogh was born.

2
00:00:14,360 --> 00:00:23,920
In 1880, at the age of 27, he decides to become an artist.

3
00:00:23,920 --> 00:00:30,520
In his early years, he taught himself to draw and paint, but his style changed significantly

4
00:00:30,520 --> 00:00:34,920
under the influence of Impressionism.

5
00:00:34,920 --> 00:00:42,520
His career was very short, lasting between 1880 and 1890.

6
00:00:42,520 --> 00:00:48,920
Quoting the Britannica biography on Vincent van Gogh, his palette at last became colorful,

7
00:00:48,920 --> 00:00:55,280
his vision less traditional, and his tonality lighter, as may be seen, is one of his first

8
00:00:55,280 --> 00:00:59,440
paintings of Montemarte.

9
00:00:59,440 --> 00:01:07,000
By the summer of 1887, he was painting in pure colors, using broken brushwork, and at

10
00:01:07,000 --> 00:01:10,120
times what's called pointillistic.

11
00:01:11,120 --> 00:01:20,120
Finally, by the beginning of 1888, van Gogh's post-impressionist style had crystallized.

12
00:01:20,120 --> 00:01:26,720
The main painting technique associated with van Gogh is something called Impasto, where

13
00:01:26,720 --> 00:01:32,760
the paint is applied directly onto the canvas and then spread around.

14
00:01:32,760 --> 00:01:39,160
It can even be mixed together, using other paints and sometimes your very own fingers.

15
00:01:39,160 --> 00:01:43,200
Very pretty.

16
00:01:43,200 --> 00:01:50,880
This gives the painting a thick, three-dimensional texture, and the paint itself is undiluted.

17
00:01:50,880 --> 00:01:55,280
A common practice is to work the paint as little as possible, because the more you

18
00:01:55,280 --> 00:02:02,560
touch it and move with it, the duller and flatter it becomes with each stroke.

19
00:02:02,560 --> 00:02:08,160
The most famous example of this is Starry Night, 1889.

20
00:02:08,160 --> 00:02:13,120
Coding again the van Gogh experience, had the painting been done with flat paint, it

21
00:02:13,120 --> 00:02:16,680
would not have been the memorable piece that it is.

22
00:02:16,680 --> 00:02:21,640
Okay, now I have taught you something.

23
00:02:21,640 --> 00:02:22,640
It's time for a quiz.

24
00:02:22,640 --> 00:02:23,640
Who's ready?

25
00:02:23,640 --> 00:02:27,080
Lock the doors.

26
00:02:27,080 --> 00:02:29,760
Is this a painting by van Gogh?

27
00:02:30,240 --> 00:02:33,040
Give me hands for those who think it's a painting by van Gogh.

28
00:02:33,040 --> 00:02:34,040
Nobody.

29
00:02:34,040 --> 00:02:35,560
I have taught you well.

30
00:02:35,560 --> 00:02:38,760
This is Adamon Breen skating on the Frossel, I'm still a rival.

31
00:02:38,760 --> 00:02:41,320
Even not even the same centuries.

32
00:02:41,320 --> 00:02:42,320
Still dots though.

33
00:02:42,320 --> 00:02:44,280
Still dots.

34
00:02:44,280 --> 00:02:46,120
Is this a painting by van Gogh?

35
00:02:46,120 --> 00:02:47,120
Give me some hands.

36
00:02:47,120 --> 00:02:50,320
Oh, again, I have taught you very well.

37
00:02:50,320 --> 00:02:56,400
This is Vincent van Gogh, the farmhouse in Provence, 1888.

38
00:02:56,400 --> 00:03:00,160
Is this a painting by van Gogh?

39
00:03:00,160 --> 00:03:04,400
Huh, any hands?

40
00:03:04,400 --> 00:03:05,400
Scattered hands.

41
00:03:05,400 --> 00:03:06,400
All right.

42
00:03:06,400 --> 00:03:11,480
I mean, yeah, could be early work, could be like inspired by other painters.

43
00:03:11,480 --> 00:03:12,480
That's fine.

44
00:03:12,480 --> 00:03:13,480
No, no, though.

45
00:03:13,480 --> 00:03:14,880
Still touch.

46
00:03:14,880 --> 00:03:23,240
But in the area, so Jonathan Bartholth, town path, all right, is this a van Gogh?

47
00:03:23,240 --> 00:03:27,040
Oh, again, scattered, okay?

48
00:03:27,040 --> 00:03:29,640
Yes, this is van Gogh.

49
00:03:29,640 --> 00:03:36,400
You can see the brushwork on the head of the crab is disjointed, if you think of it that

50
00:03:36,400 --> 00:03:37,400
way.

51
00:03:37,400 --> 00:03:38,400
Crab on its back.

52
00:03:38,400 --> 00:03:39,400
Poor crab.

53
00:03:39,400 --> 00:03:40,400
1888.

54
00:03:40,400 --> 00:03:43,480
Okay, good work.

55
00:03:43,480 --> 00:03:44,480
So hi.

56
00:03:44,480 --> 00:03:50,000
My name is Ola Favogh, I'm a senior software developer at TotalSec AS.

57
00:03:50,000 --> 00:03:52,280
If you don't like this talk you can yell at me on Twitter.

58
00:03:52,280 --> 00:03:56,640
People seem to enjoy doing that.

59
00:03:56,640 --> 00:03:59,440
So I work for a company called TotalSec here in Norway.

60
00:03:59,440 --> 00:04:03,800
We are a consultancy and teaching training company.

61
00:04:03,800 --> 00:04:06,840
So again, if you like our work, please hire us.

62
00:04:06,840 --> 00:04:10,080
We do training as we did here at this conference.

63
00:04:10,080 --> 00:04:11,080
Good stuff.

64
00:04:11,080 --> 00:04:15,200
So this talk is titled learning rust the wrong way.

65
00:04:15,200 --> 00:04:22,000
So the reason why I named the talk that way is, yeah, it is in part about rust.

66
00:04:22,000 --> 00:04:23,960
But it's also about learning.

67
00:04:23,960 --> 00:04:26,840
So I hope you will enjoy.

68
00:04:26,840 --> 00:04:32,840
So what's wrong with knowing what you know now and not knowing what you don't know until

69
00:04:32,840 --> 00:04:35,000
later, right?

70
00:04:35,000 --> 00:04:39,000
I love coding philosophers, which is Winnie the Pooh.

71
00:04:39,000 --> 00:04:42,920
Good, good stuff.

72
00:04:42,920 --> 00:04:45,400
So what's going on here?

73
00:04:45,400 --> 00:04:49,680
So yeah, as you get my guest by the title of the talk and the introduction, this, yeah,

74
00:04:49,680 --> 00:04:52,320
this isn't one of my normal talks.

75
00:04:52,320 --> 00:04:55,720
The structure itself is a bit of an experiment on my end.

76
00:04:55,720 --> 00:04:58,560
So let me know how you think about it.

77
00:04:58,560 --> 00:05:01,160
Yes, you will learn some rust.

78
00:05:01,160 --> 00:05:03,640
It's kind of enough for me to make a point.

79
00:05:03,640 --> 00:05:06,880
But you will also learn about learning the wrong way.

80
00:05:06,880 --> 00:05:13,640
And yeah, the talk might have a point, but we will go places before we get there.

81
00:05:13,640 --> 00:05:15,120
Everybody ready?

82
00:05:15,120 --> 00:05:16,120
Accepting?

83
00:05:16,120 --> 00:05:17,120
Wonderful.

84
00:05:17,120 --> 00:05:18,120
Wonderful.

85
00:05:19,040 --> 00:05:25,180
So since the title was Wrong Ways to Learn Rust, let's do actual wrong ways to learn

86
00:05:25,180 --> 00:05:26,680
rust, right?

87
00:05:26,680 --> 00:05:29,000
Because let's be literal here.

88
00:05:29,000 --> 00:05:32,040
So at least we will have that covered.

89
00:05:32,040 --> 00:05:33,720
While skydiving.

90
00:05:33,720 --> 00:05:38,160
No.

91
00:05:38,160 --> 00:05:40,840
You will not learn rust while skydiving.

92
00:05:40,840 --> 00:05:43,840
Even though this person might be having fun.

93
00:05:43,840 --> 00:05:44,840
No.

94
00:05:44,840 --> 00:05:48,400
I do not recommend learning rust while skydiving.

95
00:05:48,400 --> 00:05:52,600
Next example, as an 18th century aristocrat, since we'll be talking about the paintings

96
00:05:52,600 --> 00:05:55,920
from the 18th century, no, not with this.

97
00:05:55,920 --> 00:06:00,520
But for some reason, they have Windows 11 on that laptop.

98
00:06:00,520 --> 00:06:05,160
So not recommended, all right?

99
00:06:05,160 --> 00:06:08,240
Just to give a talk at a technical conference.

100
00:06:08,240 --> 00:06:10,240
We can skip this one.

101
00:06:10,240 --> 00:06:13,160
All right.

102
00:06:13,160 --> 00:06:14,160
So what is rust?

103
00:06:14,360 --> 00:06:15,520
Let's begin with that.

104
00:06:15,520 --> 00:06:21,520
So it's a programming language that focuses on performance, safety, and productivity.

105
00:06:21,520 --> 00:06:23,600
That's kind of their guiding light.

106
00:06:23,600 --> 00:06:25,640
It looks kind of like this.

107
00:06:25,640 --> 00:06:27,160
So here I'm defining a function.

108
00:06:27,160 --> 00:06:29,520
Here's the main function.

109
00:06:29,520 --> 00:06:30,840
Here I'm defining a variable.

110
00:06:30,840 --> 00:06:33,280
How is the visibility for those in the back?

111
00:06:33,280 --> 00:06:34,280
Okayish.

112
00:06:34,280 --> 00:06:35,280
Good.

113
00:06:35,280 --> 00:06:36,280
All right.

114
00:06:36,280 --> 00:06:37,960
So I'm creating a variable called float.

115
00:06:37,960 --> 00:06:42,760
It is of F64, which is the double from us in other languages.

116
00:06:42,760 --> 00:06:47,480
The value of 42, you don't have to put an F score.

117
00:06:47,480 --> 00:06:48,920
Here I'm creating a variable.

118
00:06:48,920 --> 00:06:52,880
So I'm saying let the mood, so it's a value.

119
00:06:52,880 --> 00:06:54,880
Because in rust, it's cons by default.

120
00:06:54,880 --> 00:06:59,360
So you have to say that the value is movable, so you have to say let mood.

121
00:06:59,360 --> 00:07:01,440
I can ask a question about the float.

122
00:07:01,440 --> 00:07:02,840
No parentheses needed.

123
00:07:02,840 --> 00:07:03,960
Very good.

124
00:07:03,960 --> 00:07:11,600
I can then mutate the value, and then I can call print line exclamation point and similar

125
00:07:11,600 --> 00:07:12,600
formatting style.

126
00:07:12,600 --> 00:07:16,920
So the print line with the exclamation point is from something called a macro in the language.

127
00:07:16,920 --> 00:07:19,160
So if you see these, they are macros.

128
00:07:19,160 --> 00:07:21,600
They are defined in a little bit different way.

129
00:07:21,600 --> 00:07:27,160
A way of thinking of them is, like, what if C macros had types and also looked more

130
00:07:27,160 --> 00:07:28,160
like functions?

131
00:07:28,160 --> 00:07:30,160
But in a way.

132
00:07:30,160 --> 00:07:31,160
Yes.

133
00:07:31,160 --> 00:07:32,160
Good.

134
00:07:32,160 --> 00:07:41,240
So 2006 personal project by a Mozilla employee called Graydon Horpe, 2009 turned into a Mozilla

135
00:07:41,240 --> 00:07:42,960
sponsored project.

136
00:07:42,960 --> 00:07:49,480
2011, we have the first bootstrap version, which is rust compiling rust.

137
00:07:49,480 --> 00:07:52,600
And then version 0.1 in 2012.

138
00:07:52,600 --> 00:07:55,360
So it is a new language, but it's, again, not that new.

139
00:07:55,360 --> 00:07:59,200
Like, when you think of new languages, that's like stuff coming out yesterday.

140
00:07:59,200 --> 00:08:03,000
So at least the idea has been around since, like, 2006, seven, eight, nine, that kind of

141
00:08:03,000 --> 00:08:04,000
thing.

142
00:08:04,000 --> 00:08:05,000
Right?

143
00:08:05,000 --> 00:08:06,000
Good.

144
00:08:06,000 --> 00:08:08,240
So more code examples here.

145
00:08:08,240 --> 00:08:09,400
I have main.

146
00:08:09,400 --> 00:08:10,400
I'm creating a value.

147
00:08:10,520 --> 00:08:11,520
Here's an integer.

148
00:08:11,520 --> 00:08:12,520
I32.

149
00:08:12,520 --> 00:08:19,240
So the language talks a lot about borrowing and what is alive and what is not alive and

150
00:08:19,240 --> 00:08:22,480
what can you mess with while you are programming.

151
00:08:22,480 --> 00:08:28,320
So here I'm going to borrow my value into the function borrow value.

152
00:08:28,320 --> 00:08:29,320
All right?

153
00:08:29,320 --> 00:08:30,800
So I have the little reference value there.

154
00:08:30,800 --> 00:08:32,480
I can borrow it again.

155
00:08:32,480 --> 00:08:33,600
That's fine.

156
00:08:33,600 --> 00:08:37,280
And I can print out those two, those two values.

157
00:08:37,280 --> 00:08:41,760
So notice that I'm borrowing into the function, but I'm getting a value out of the function.

158
00:08:41,760 --> 00:08:43,680
So the function looks something like this.

159
00:08:43,680 --> 00:08:45,840
So here we define a function borrow value.

160
00:08:45,840 --> 00:08:47,160
Again the type is on the end.

161
00:08:47,160 --> 00:08:51,400
It is the reference of I32 and I'm returning an I32.

162
00:08:51,400 --> 00:08:52,400
Good.

163
00:08:52,400 --> 00:08:56,880
I can create a mutable value within it, which is a copy of the borrowed value.

164
00:08:56,880 --> 00:08:59,320
I can change it in some fun ways.

165
00:08:59,320 --> 00:09:03,880
And then returning a value from a function usually looks like this, which is like the

166
00:09:03,880 --> 00:09:08,600
last expression, the last statement within the line and with no semicolon.

167
00:09:08,600 --> 00:09:10,520
You can do the return.

168
00:09:10,520 --> 00:09:14,240
So for things like early exits, like if you do an if something, something you want to

169
00:09:14,240 --> 00:09:16,040
return out, you can do that.

170
00:09:16,040 --> 00:09:18,040
That's fine.

171
00:09:18,040 --> 00:09:19,040
Good.

172
00:09:19,040 --> 00:09:22,280
Well, what happens if I do this?

173
00:09:22,280 --> 00:09:26,560
So here I am borrowing the value mutably.

174
00:09:26,560 --> 00:09:32,160
So I want the mutable reference to the value or as in C++, just a reference.

175
00:09:32,160 --> 00:09:35,160
Because the thing we had before is a const reference.

176
00:09:35,160 --> 00:09:37,160
All right.

177
00:09:37,160 --> 00:09:38,160
What happens then?

178
00:09:38,160 --> 00:09:39,160
Any hands now?

179
00:09:39,160 --> 00:09:42,160
Since I've been training you on the hands.

180
00:09:42,160 --> 00:09:45,520
It doesn't work.

181
00:09:45,520 --> 00:09:47,080
Does not work.

182
00:09:47,080 --> 00:09:49,440
So here's the main thing.

183
00:09:49,440 --> 00:09:51,440
We're looking at line 11 there.

184
00:09:51,440 --> 00:09:54,120
New value, borrow value, and we're sending in reference.

185
00:09:54,120 --> 00:09:56,040
Types differ in mutability.

186
00:09:56,040 --> 00:09:57,280
The blue line might not be visible.

187
00:09:57,280 --> 00:09:58,280
I can read it out.

188
00:09:58,280 --> 00:10:00,480
Arguments to this function are incorrect.

189
00:10:00,480 --> 00:10:06,720
We expected a mutable reference, so ref mutify32, but we found the regular reference.

190
00:10:06,720 --> 00:10:13,480
So this has to match, which is like one of the early walls you will hit with the language.

191
00:10:13,480 --> 00:10:14,480
Good.

192
00:10:14,480 --> 00:10:18,080
So if I have another main, I have my value and how much.

193
00:10:18,080 --> 00:10:19,280
So my value is mutable.

194
00:10:19,280 --> 00:10:21,320
How much is not mutable?

195
00:10:21,320 --> 00:10:26,960
So here I am sending in my value into the function as a mutable reference.

196
00:10:26,960 --> 00:10:33,200
You can now, the mutate value is allowed to change the value and how much I'm just sending

197
00:10:33,200 --> 00:10:34,200
it by reference.

198
00:10:34,200 --> 00:10:36,640
By the way, I don't have to send it in as reference.

199
00:10:36,640 --> 00:10:41,760
I can send it in a copy, but I'm just showing you the referencing part of it.

200
00:10:41,760 --> 00:10:44,960
And then I can print out my value, and it will have changed.

201
00:10:44,960 --> 00:10:51,200
So I take value in as mutable, I32, I take in how much as a reference to I32, I change

202
00:10:51,200 --> 00:10:52,200
the value.

203
00:10:52,200 --> 00:10:53,480
We are happy.

204
00:10:53,480 --> 00:10:54,480
This is fine.

205
00:10:54,480 --> 00:10:56,640
I mean, fine, not fine.

206
00:10:57,640 --> 00:11:01,480
The language is happy with you, basically, the sentences.

207
00:11:01,480 --> 00:11:04,640
So what if I change this to this?

208
00:11:04,640 --> 00:11:11,560
So this is a thing in C++, which is the, like, this is a problem people have.

209
00:11:11,560 --> 00:11:16,120
And we have to learn, like, in what order things are evaluated, like, oh, it's from

210
00:11:16,120 --> 00:11:20,320
the left, from the right to the left for the arguments and all these kinds of things.

211
00:11:20,320 --> 00:11:27,200
So here, I'm sending in a mutable reference of my value, and then I'm also sending a reference

212
00:11:27,200 --> 00:11:29,080
to my value.

213
00:11:29,080 --> 00:11:32,480
But within the function, they are a different variable, but they're referencing the same

214
00:11:32,480 --> 00:11:33,480
value from the outside.

215
00:11:33,480 --> 00:11:36,440
So again, hence, what's going to happen?

216
00:11:36,440 --> 00:11:37,440
Yes.

217
00:11:37,440 --> 00:11:41,600
Compiler error, that's right.

218
00:11:41,600 --> 00:11:48,600
So you are asking for mutability from one variable, you're asking for a non-mutability

219
00:11:48,600 --> 00:11:52,200
from another variable, but it happens to be the same variable.

220
00:11:52,200 --> 00:11:59,920
So think of the single writer, multi-reader locks that we have, where you can, like,

221
00:11:59,920 --> 00:12:03,760
when you can only have one writer to a variable, but you can have many readers.

222
00:12:03,760 --> 00:12:11,560
So imagine a programming language where every single variable is an MSRV lock, not the

223
00:12:11,560 --> 00:12:13,480
actual lock, but the language feature.

224
00:12:13,480 --> 00:12:14,480
So yeah.

225
00:12:14,480 --> 00:12:20,200
Any mutable borrow occurs here while we have a mutable borrow for the first argument.

226
00:12:20,200 --> 00:12:22,200
This won't work.

227
00:12:22,200 --> 00:12:23,200
Cool.

228
00:12:23,200 --> 00:12:26,200
Let's talk about baseball.

229
00:12:26,200 --> 00:12:28,680
Who likes baseball?

230
00:12:28,680 --> 00:12:29,680
Yeah?

231
00:12:29,680 --> 00:12:31,680
More for American sport, maybe?

232
00:12:31,680 --> 00:12:36,280
So hitting a baseball is a relatively complicated skill.

233
00:12:36,280 --> 00:12:40,000
You need speed to recognize what kind of ball is being thrown at you, you need precision

234
00:12:40,000 --> 00:12:45,240
to hit the ball, and strength to make sure it goes as far as possible.

235
00:12:45,240 --> 00:12:53,520
In 2018, the batting average was .248, which means that the average baseball player had

236
00:12:53,520 --> 00:12:59,180
a 24.8% chance to hit the ball, okay?

237
00:12:59,180 --> 00:13:03,280
This is not per ball thrown, but for the entire attempt.

238
00:13:03,280 --> 00:13:05,360
How many balls are being thrown at the person?

239
00:13:05,360 --> 00:13:09,440
Some of them can be strikes, some of them can be what's called balls.

240
00:13:09,440 --> 00:13:16,880
So there is a bit more to it, but that's the general idea of ball on the way.

241
00:13:16,880 --> 00:13:22,120
So Cal Poly Mustangs, or a baseball team that represents the California Polytechnic State

242
00:13:22,120 --> 00:13:23,120
University.

243
00:13:23,120 --> 00:13:30,840
The team was founded in 1948 and have competed in what's called the Big West Conference since

244
00:13:30,840 --> 00:13:35,720
1997, and they even won it in 2014.

245
00:13:35,720 --> 00:13:44,000
In 1994, the university published a paper by Hall Dominiques and Caravazos called Contextual

246
00:13:44,000 --> 00:13:51,120
Inference Effects with Skilled Baseball Players, and the reference is also down there if you're

247
00:13:51,120 --> 00:13:53,680
looking at this later on.

248
00:13:53,680 --> 00:13:58,800
The study took a group of baseball players and measured their batting averages.

249
00:13:58,800 --> 00:14:05,160
The idea was then to give them extra batting practices for six weeks.

250
00:14:05,600 --> 00:14:07,680
The baseball study.

251
00:14:07,680 --> 00:14:10,920
They were split into three groups.

252
00:14:10,920 --> 00:14:14,800
One of the groups got thrown balls in a structured order.

253
00:14:14,800 --> 00:14:18,320
15, first of them, were fast balls.

254
00:14:18,320 --> 00:14:23,840
The next 15 balls in the practice were curve balls, the next 15 were change-ups.

255
00:14:23,840 --> 00:14:29,120
A change-up is a ball that starts out looking like a fast ball, but becomes a curve ball

256
00:14:29,120 --> 00:14:30,120
the other way around.

257
00:14:30,120 --> 00:14:34,320
The idea is that it changes halfway.

258
00:14:34,320 --> 00:14:39,240
They were always thrown in this order, and the players always knew what type of ball

259
00:14:39,240 --> 00:14:41,800
was being thrown next.

260
00:14:41,800 --> 00:14:46,600
This is sometimes called blocked practice, where you split the exercise into similarly

261
00:14:46,600 --> 00:14:50,200
structured blocks.

262
00:14:50,200 --> 00:15:02,760
The second group got the same number of baseballs, but the order was still 45, but the order

263
00:15:02,760 --> 00:15:03,760
was random.

264
00:15:03,760 --> 00:15:05,440
They had no idea what ball was next.

265
00:15:05,440 --> 00:15:10,320
Maybe they knew the last one, if they were counting, but anyway.

266
00:15:10,320 --> 00:15:17,960
Then there was a control group who did not get any extra practice.

267
00:15:17,960 --> 00:15:20,320
Let's look at the results.

268
00:15:20,320 --> 00:15:22,520
What do you think happened?

269
00:15:22,520 --> 00:15:25,520
Think about what kind of practice this was.

270
00:15:25,520 --> 00:15:28,160
One group got, they knew what they were getting.

271
00:15:28,160 --> 00:15:31,760
I can know I can practice for one of the balls.

272
00:15:31,760 --> 00:15:32,880
I will then practice for that.

273
00:15:32,880 --> 00:15:34,880
The other group had no idea.

274
00:15:34,880 --> 00:15:36,880
There's a ball happening.

275
00:15:36,880 --> 00:15:42,160
Then the third group got nothing, so we have a control group.

276
00:15:42,160 --> 00:15:46,600
After the six weeks, there was another test, so we had a test at the beginning, six weeks

277
00:15:46,600 --> 00:15:51,360
and then another test, where they got 45 random balls.

278
00:15:51,360 --> 00:15:54,640
The control group improved by 6.2%.

279
00:15:54,640 --> 00:15:58,720
People are getting better, or there's some random variation in how you're testing, so

280
00:15:58,720 --> 00:16:05,440
you can ignore the 6%, or you can reduce the results by 6%.

281
00:16:05,440 --> 00:16:09,800
The blocked group, which is they know what they're getting, they improved by 24.8%.

282
00:16:09,800 --> 00:16:13,320
It's pretty nice.

283
00:16:13,320 --> 00:16:16,320
What do you think the random group hit?

284
00:16:16,320 --> 00:16:19,480
Any guessers around the blocked?

285
00:16:19,480 --> 00:16:20,480
The same?

286
00:16:20,480 --> 00:16:21,480
56.7%.

287
00:16:21,480 --> 00:16:22,480
What?

288
00:16:22,480 --> 00:16:35,080
They don't know what they're practicing for, they get some stuff, and it's like they practiced

289
00:16:35,080 --> 00:16:38,240
for twice the amount of time than the blocked group.

290
00:16:38,240 --> 00:16:39,240
What's going on?

291
00:16:39,240 --> 00:16:42,480
This is weird.

292
00:16:42,480 --> 00:16:46,360
Some might say, shouldn't the blocked practice have helped more?

293
00:16:46,360 --> 00:16:49,800
Because in the random practice, you don't know what you're practicing for.

294
00:16:49,800 --> 00:16:55,640
You have no way to prepare any sort of mental model or muscle memory for the throws that

295
00:16:55,640 --> 00:16:58,400
are coming.

296
00:16:58,400 --> 00:17:01,400
We'll get into this a bit later.

297
00:17:01,400 --> 00:17:03,280
What's going on here?

298
00:17:03,280 --> 00:17:09,080
I wanted to learn Rust, the programming language, not the chemical process.

299
00:17:09,080 --> 00:17:13,320
I had the idea that I am a programmer, right?

300
00:17:13,320 --> 00:17:16,080
I have certain skills.

301
00:17:16,080 --> 00:17:19,480
I had some experience with programming, I think.

302
00:17:19,480 --> 00:17:22,680
Those skills should transfer.

303
00:17:22,680 --> 00:17:28,960
Learning another language, like really learning it, should be easy, because I have no C++,

304
00:17:28,960 --> 00:17:33,880
I know JavaScript for crying out loud.

305
00:17:33,880 --> 00:17:40,320
Doing the next one should be easy, right?

306
00:17:40,320 --> 00:17:46,240
This is not a jab at the idea that Rust is difficult, because I don't think that matters.

307
00:17:46,240 --> 00:17:48,400
That's not the point here.

308
00:17:48,400 --> 00:17:54,120
Rust is a jab at my hubris, so if you want to do a jab at my hubris, you can do that.

309
00:17:54,120 --> 00:17:55,120
Enjoy it.

310
00:17:55,120 --> 00:18:01,960
What I found that, I actually didn't learn that much of Rust until I really sat down

311
00:18:01,960 --> 00:18:07,560
and I really sunk my teeth into it.

312
00:18:07,560 --> 00:18:14,440
Doing a tutorial here or there, doing a video lecture, no, didn't help at all.

313
00:18:14,440 --> 00:18:15,440
Why?

314
00:18:16,040 --> 00:18:18,760
So as a curious person, I wanted to know why.

315
00:18:18,760 --> 00:18:24,320
So instead of learning more Rust, I wanted to learn about why I wasn't learning more

316
00:18:24,320 --> 00:18:25,320
Rust.

317
00:18:25,320 --> 00:18:30,600
I think this is called yak shaving for some people, but at least you will enjoy the fruits

318
00:18:30,600 --> 00:18:32,040
of that labor.

319
00:18:32,040 --> 00:18:37,040
So I sat down and I read books and I studied papers like these ones.

320
00:18:37,040 --> 00:18:44,760
I wanted to know why when you have a skill beforehand, it doesn't transfer that well.

321
00:18:45,120 --> 00:18:51,080
It's not until you actually sit down and work on it, only then it actually works.

322
00:18:51,080 --> 00:18:54,280
So let's talk about Pokemon.

323
00:18:54,280 --> 00:18:57,880
Okay, okay, and Rust, and Rust.

324
00:18:57,880 --> 00:19:04,320
So after going through these exercises that cover the basics of Rust, I used that exercise

325
00:19:04,320 --> 00:19:08,160
called Rustlings to begin with, very good to recommend them.

326
00:19:08,160 --> 00:19:13,320
I started to look at my older projects that I had made in C++, so with the idea that I

327
00:19:13,360 --> 00:19:15,400
would just convert them over.

328
00:19:15,400 --> 00:19:16,680
I have a skill here.

329
00:19:16,680 --> 00:19:19,000
I want to see how this looks in the other language.

330
00:19:19,000 --> 00:19:23,360
I can compare and contrast very scientist.

331
00:19:23,360 --> 00:19:25,640
So and yeah, this is a great technique.

332
00:19:25,640 --> 00:19:29,240
If you're doing this, if you have an older project, if you know another language, you

333
00:19:29,240 --> 00:19:31,040
should convert stuff over.

334
00:19:31,040 --> 00:19:34,600
So now you have to take a Pokemon quiz.

335
00:19:34,600 --> 00:19:35,600
No.

336
00:19:35,600 --> 00:19:39,240
So the general idea, the only thing you have to know about Pokemon is that they are of

337
00:19:39,240 --> 00:19:41,240
a certain type.

338
00:19:42,160 --> 00:19:45,920
There are probably thousands, hundreds, whatever.

339
00:19:45,920 --> 00:19:46,920
But they are of a certain type.

340
00:19:46,920 --> 00:19:49,840
There could be a fire Pokemon, a water Pokemon, yada, yada.

341
00:19:49,840 --> 00:19:56,360
And if a fire Pokemon attacks a grass Pokemon, they do twice the amount of damage.

342
00:19:56,360 --> 00:20:02,360
If an electric Pokemon attacks, let's say, a dark Pokemon, which is one of the types,

343
00:20:02,360 --> 00:20:03,880
they do half damage.

344
00:20:03,880 --> 00:20:07,080
And for the black squares, they do no damage.

345
00:20:07,080 --> 00:20:08,080
That's the only thing you have to know.

346
00:20:08,120 --> 00:20:09,400
Now you are a Pokemon expert.

347
00:20:09,400 --> 00:20:10,400
Enjoy.

348
00:20:11,880 --> 00:20:20,800
So what this means is, so I made a project, I think now 10 years ago, that takes where

349
00:20:20,800 --> 00:20:26,080
every pixel on the grid, I will show you a grid in a bit, is a Pokemon of a certain

350
00:20:26,080 --> 00:20:27,080
type.

351
00:20:27,080 --> 00:20:32,600
It will look around the grid, look for other Pokemons, and then do an attack, do some

352
00:20:32,600 --> 00:20:33,600
damage.

353
00:20:33,640 --> 00:20:38,800
If the Pokemon you attacked dies, and let's say you are an electric Pokemon, they will

354
00:20:38,800 --> 00:20:40,480
then turn into an electric Pokemon.

355
00:20:42,480 --> 00:20:43,480
It's kind of like this.

356
00:20:44,480 --> 00:20:46,280
Happy how well the GIF looks in this.

357
00:20:47,280 --> 00:20:48,560
So this is the C++ version.

358
00:20:50,080 --> 00:20:53,640
And this is also, I'm going to show you the Rust version later on, but it will look quite

359
00:20:53,640 --> 00:20:54,640
a bit different.

360
00:20:54,640 --> 00:20:58,600
But I had a different parameter for the GIF that I had, but yeah, it looks pretty, right?

361
00:20:59,720 --> 00:21:00,960
They're growing, they're shrinking.

362
00:21:01,600 --> 00:21:03,000
Yeah, Pokemon attacking.

363
00:21:03,640 --> 00:21:05,440
So let's look at the C++ code.

364
00:21:06,040 --> 00:21:08,400
And yeah, this is from 10 years ago, so you can totally make fun of me.

365
00:21:08,480 --> 00:21:09,480
That's fine.

366
00:21:10,200 --> 00:21:15,840
So you have an X coordinate, which is the where you are on the X grid, on the Y

367
00:21:15,840 --> 00:21:19,280
coordinate, same grid size, because it's a one by one grid.

368
00:21:20,440 --> 00:21:25,400
The idea is that you have an array of a ray of Pokemon.

369
00:21:26,240 --> 00:21:30,560
You will then get the attacker, which is the first Pokemon, you get a reference to

370
00:21:30,560 --> 00:21:34,480
it, and then you find out who your weakest neighbor is.

371
00:21:35,040 --> 00:21:38,000
So you take, you create a position out of your position.

372
00:21:38,640 --> 00:21:43,680
You have an out variable, yes, out variable, 10 years ago, off the enemy

373
00:21:43,680 --> 00:21:45,840
position, you have a function called weakest neighbor.

374
00:21:46,520 --> 00:21:52,200
You take in your position, the enemy position, and the list of the Pokemon, then

375
00:21:52,200 --> 00:21:55,160
you will get out the weakest Pokemon around you.

376
00:21:56,240 --> 00:21:58,200
Let's, you get the position for that Pokemon.

377
00:21:58,640 --> 00:22:01,080
Let's then get that Pokemon itself, and then you fight.

378
00:22:02,080 --> 00:22:02,800
Simple enough, right?

379
00:22:03,360 --> 00:22:06,760
Where you are, who is the weakest, get a reference to it, fight.

380
00:22:07,400 --> 00:22:07,720
Cool.

381
00:22:09,440 --> 00:22:10,360
This is the Rust version.

382
00:22:12,480 --> 00:22:14,280
So in the Rust version, the colors are correct.

383
00:22:15,080 --> 00:22:16,520
So yellow is lightning.

384
00:22:16,880 --> 00:22:19,200
The purple one is dark, I think.

385
00:22:19,760 --> 00:22:20,440
I don't know the other.

386
00:22:21,000 --> 00:22:21,960
Green is grass, maybe.

387
00:22:22,520 --> 00:22:23,080
It's very pretty.

388
00:22:23,920 --> 00:22:24,360
I like it.

389
00:22:25,080 --> 00:22:26,240
Yeah, it has other parameters.

390
00:22:26,240 --> 00:22:27,200
I think it's running faster.

391
00:22:27,320 --> 00:22:29,520
So these are more generations than the other one.

392
00:22:30,280 --> 00:22:33,440
Okay, so let's implement that in Rust.

393
00:22:34,640 --> 00:22:39,000
So a Pokemon is, you have certain health and you can do a certain amount of damage.

394
00:22:39,200 --> 00:22:41,960
I think in the tests I had, they all had the same damage, but then you had the

395
00:22:41,960 --> 00:22:44,800
multiplier, but it's nice to have like a variable for it.

396
00:22:45,360 --> 00:22:49,880
So when you want to implement functions onto a class in Rust or struct in Rust,

397
00:22:51,080 --> 00:22:52,160
they are separated out.

398
00:22:52,160 --> 00:22:55,560
You have the struct, and then you have the implementation for the struct.

399
00:22:56,480 --> 00:23:00,400
So this is a, what we might think of as a static function.

400
00:23:00,920 --> 00:23:03,400
So this is to create a new Pokemon.

401
00:23:03,760 --> 00:23:05,640
It returns a type of itself.

402
00:23:06,280 --> 00:23:08,280
So here we just create a Pokemon.

403
00:23:09,040 --> 00:23:11,760
You might think of this as an R value that I return.

404
00:23:12,000 --> 00:23:14,760
So remember that I'm returning, it doesn't have a semicolon.

405
00:23:14,760 --> 00:23:17,160
So I'm actually returning the Pokemon out from the function.

406
00:23:17,240 --> 00:23:18,920
So I'm just creating a Pokemon and returning it.

407
00:23:19,480 --> 00:23:21,200
It has 10 health and it does five damage.

408
00:23:22,560 --> 00:23:23,440
Then I have a function.

409
00:23:23,720 --> 00:23:25,640
So you can say it's a function, take damage.

410
00:23:25,680 --> 00:23:27,200
It has a mutable self.

411
00:23:27,520 --> 00:23:31,920
So this is a non-const function and the amount of damage that I want to take.

412
00:23:31,920 --> 00:23:34,520
And you look here, I'm not taking in reference of anything, just a value.

413
00:23:35,280 --> 00:23:36,480
And yeah, simple as that.

414
00:23:37,200 --> 00:23:37,840
Simple as that.

415
00:23:38,040 --> 00:23:38,840
I reduce the health.

416
00:23:40,080 --> 00:23:43,960
So a battle is then a container of Pokemons.

417
00:23:44,400 --> 00:23:45,840
So Rust has container stuff.

418
00:23:46,560 --> 00:23:47,440
We have here vector.

419
00:23:47,840 --> 00:23:51,080
They work generally similar as the vector that we have.

420
00:23:51,920 --> 00:23:55,920
So I want to implement the battle in the same way I have a static function to

421
00:23:55,920 --> 00:23:56,640
new the battle.

422
00:23:57,240 --> 00:24:00,800
For this example, I'm only going to have two Pokemons.

423
00:24:01,360 --> 00:24:04,200
So I'm not going to have the full grid just to simplify the code.

424
00:24:04,920 --> 00:24:09,360
So I just say Pokemon new, Pokemon new, and I have a vector from two Pokemons.

425
00:24:10,000 --> 00:24:10,280
Okay.

426
00:24:11,240 --> 00:24:13,320
And again, I have a battle and I'm returning the battle.

427
00:24:13,320 --> 00:24:15,400
So now I have a battle of two Pokemons.

428
00:24:15,960 --> 00:24:17,360
So let's fight.

429
00:24:17,880 --> 00:24:18,240
Cool.

430
00:24:18,920 --> 00:24:23,520
So because we, when we're fighting, one of the health of one of the Pokemons goes

431
00:24:23,520 --> 00:24:27,520
down, so I want to mutate, mutate whatever's in the Pokemon.

432
00:24:28,360 --> 00:24:30,400
So this is a way of doing a loop.

433
00:24:30,440 --> 00:24:35,120
If I want the index for N and I dot, dot, dot, self, I can have some length.

434
00:24:35,320 --> 00:24:36,600
So self Pokemon length.

435
00:24:37,560 --> 00:24:41,920
So again, same way I'm doing a super plus, since I was converting stuff over, I

436
00:24:41,920 --> 00:24:43,240
get a reference to the attacker.

437
00:24:44,320 --> 00:24:46,280
I get a mutable reference to the defender.

438
00:24:47,280 --> 00:24:48,240
And I say fight.

439
00:24:49,240 --> 00:24:49,760
Okay.

440
00:24:50,520 --> 00:24:51,080
Sounds good.

441
00:24:52,080 --> 00:24:54,280
I have the rust teacher shaking his head.

442
00:24:56,800 --> 00:24:58,520
No, this doesn't work.

443
00:24:59,960 --> 00:25:00,560
Okay.

444
00:25:00,760 --> 00:25:01,760
So this is another thing.

445
00:25:03,120 --> 00:25:07,800
So here we have cannot borrow self Pokemons as mutable because it's also

446
00:25:07,800 --> 00:25:09,920
borrowed as immutable there.

447
00:25:11,800 --> 00:25:12,240
What?

448
00:25:12,280 --> 00:25:12,680
What?

449
00:25:14,040 --> 00:25:19,080
So the, the, the idea that I had in the C++ version actually has a problem

450
00:25:19,720 --> 00:25:25,920
because in one sense I'm having a, a non mutable borrow to a value and I'm

451
00:25:25,920 --> 00:25:29,560
having a mutable borrow to another value, which is something that C++ doesn't care

452
00:25:29,560 --> 00:25:29,880
about.

453
00:25:30,760 --> 00:25:33,600
But here they're like, no, this is scary.

454
00:25:33,720 --> 00:25:34,520
This is dangerous.

455
00:25:34,600 --> 00:25:35,200
Don't do this.

456
00:25:36,760 --> 00:25:37,680
So how would you fix this?

457
00:25:38,160 --> 00:25:38,440
Right.

458
00:25:39,440 --> 00:25:42,360
Well, what do I actually need from the attacker?

459
00:25:43,200 --> 00:25:45,000
I don't need the actual attacker.

460
00:25:45,560 --> 00:25:46,720
I only need the damage.

461
00:25:47,160 --> 00:25:52,000
So the solution in this case is we just get the damage and then we do the attack.

462
00:25:52,040 --> 00:25:58,520
We don't need the actual, we don't need the entire structure to do a combat when

463
00:25:58,520 --> 00:26:00,800
only one parameter of the Pokemon actually matters.

464
00:26:02,080 --> 00:26:04,800
So here's the language and telling you, you're being silly.

465
00:26:05,080 --> 00:26:06,080
You should rethink this.

466
00:26:06,400 --> 00:26:08,240
This is not, uh, you're not playing.

467
00:26:08,440 --> 00:26:09,520
You're programming in the wrong way.

468
00:26:09,760 --> 00:26:11,440
The language is saying, please rethink this.

469
00:26:12,200 --> 00:26:12,440
All right.

470
00:26:12,760 --> 00:26:14,080
So in the actual version, that's what we do.

471
00:26:14,080 --> 00:26:16,400
We just take the values we need out to use them.

472
00:26:17,680 --> 00:26:18,040
Cool.

473
00:26:19,040 --> 00:26:20,320
Let's go back to paintings.

474
00:26:21,960 --> 00:26:22,240
Right.

475
00:26:23,680 --> 00:26:24,440
Beautiful paintings.

476
00:26:25,800 --> 00:26:30,600
So in 2008, an experiment was conducted at the University of California.

477
00:26:32,400 --> 00:26:36,080
The goal of the research was to detect the difference between two teaching methods,

478
00:26:36,880 --> 00:26:38,320
masked versus spaced.

479
00:26:41,680 --> 00:26:47,440
They were asked to study paintings grouped by the artist, which is called masked.

480
00:26:47,600 --> 00:26:50,480
You get a bunch of paintings by one artist.

481
00:26:51,400 --> 00:26:53,920
And then you have to have a quiz after that.

482
00:26:55,000 --> 00:26:58,240
Uh, or they were interleaved by other artists.

483
00:26:58,240 --> 00:27:02,480
So you'd have artist A, artist B, artist C, and then mixed together.

484
00:27:03,480 --> 00:27:10,720
So each masked participant would get a set of paintings by the same artist and you

485
00:27:10,720 --> 00:27:15,160
would spend time looking at the style, the next painting, since it's by the same

486
00:27:15,160 --> 00:27:17,240
artist and look for similarities.

487
00:27:17,800 --> 00:27:22,760
Like you look at painting A by artist A, looking paint, next painting by artist A,

488
00:27:22,800 --> 00:27:24,560
like, okay, what is this similar thing here?

489
00:27:24,560 --> 00:27:29,560
Like we did with Van Gogh in the beginning, but the space participants would get a

490
00:27:29,640 --> 00:27:31,240
mix of artists all over the place.

491
00:27:31,720 --> 00:27:32,240
Okay.

492
00:27:34,040 --> 00:27:39,680
So what they would then have to ask the quiz was basically like we did in the

493
00:27:39,680 --> 00:27:42,600
beginning, is this a painting by artist A?

494
00:27:42,640 --> 00:27:43,920
Is this by Van Gogh?

495
00:27:44,800 --> 00:27:49,960
In the actual test, they used like non famous artists or like, like they wouldn't

496
00:27:49,960 --> 00:27:51,280
have starry night, right?

497
00:27:51,560 --> 00:27:53,680
They would have just some, some artists.

498
00:27:54,520 --> 00:27:57,760
Uh, so the results were counterintuitive because they were not

499
00:27:57,760 --> 00:28:01,440
counterintuitive because the spaced version did better.

500
00:28:03,640 --> 00:28:04,400
Always better.

501
00:28:05,480 --> 00:28:07,200
Never like there isn't a variance here.

502
00:28:08,200 --> 00:28:12,920
So the people who did not get to focus on art, one artist, the next one, the next

503
00:28:12,920 --> 00:28:15,240
one, they did worse.

504
00:28:16,360 --> 00:28:16,640
Oh, sorry.

505
00:28:16,640 --> 00:28:19,880
The, yeah, the people who, who did not get to do that, they did better.

506
00:28:19,880 --> 00:28:20,160
Sorry.

507
00:28:20,520 --> 00:28:21,920
Other way around my brain.

508
00:28:23,240 --> 00:28:27,120
But not only that, yeah, the space version where the participants are not able

509
00:28:27,120 --> 00:28:31,080
to study a single painter at a time and focus on their styles, got a better

510
00:28:31,080 --> 00:28:31,520
result.

511
00:28:32,080 --> 00:28:40,160
So, and even if the masked version did worse, they liked that way.

512
00:28:41,520 --> 00:28:46,400
They were asked afterwards, even after they've known the results, which one

513
00:28:46,440 --> 00:28:47,360
do you like?

514
00:28:47,760 --> 00:28:52,120
Do you like to learn one painter at a time to focus on the thing?

515
00:28:53,120 --> 00:28:57,440
Or do you want it spread out and randomly selected?

516
00:28:58,120 --> 00:29:02,440
Even if they knew the results, no, they still like learning one at a time.

517
00:29:04,760 --> 00:29:05,560
They did worse.

518
00:29:05,720 --> 00:29:06,360
They didn't care.

519
00:29:08,360 --> 00:29:16,040
So from quoting from the, the test in experiments, one A and two combined, 85% of

520
00:29:16,040 --> 00:29:19,920
the participants did at least well in the space condition, as well as the mask,

521
00:29:20,400 --> 00:29:26,760
mask condition, but 83 of the participants rated the mask condition as equally

522
00:29:26,760 --> 00:29:29,160
effective or more effective than the space condition.

523
00:29:32,160 --> 00:29:33,840
It's not even slight difference.

524
00:29:33,920 --> 00:29:38,480
Like, no, most people wanted the one same artist.

525
00:29:41,760 --> 00:29:48,200
Looking back at our own inability to foresee the benefits of spacing, perhaps we

526
00:29:48,200 --> 00:29:51,960
felt victim to the same illusion that we have railed against.

527
00:29:52,400 --> 00:29:56,480
So these are the, the study, the testers, Bjork and Cornell.

528
00:29:58,400 --> 00:29:59,840
And this has been done over many years.

529
00:30:00,080 --> 00:30:06,240
So 94, 99 and 2007, different types of studies, namely the illusion that a sense

530
00:30:06,240 --> 00:30:12,240
of ease and fluency accompanies effective learning, whereas a sense of

531
00:30:12,280 --> 00:30:15,160
difficulty signifies ineffective learning.

532
00:30:18,800 --> 00:30:22,680
In the case of the induction, the case of induction, as many as other types of

533
00:30:22,680 --> 00:30:27,680
learning spacing appears to be sometimes, if not always, at the desirable

534
00:30:27,680 --> 00:30:28,320
difficulty.

535
00:30:28,720 --> 00:30:31,720
So this is the word, the desirable difficulties.

536
00:30:32,680 --> 00:30:33,680
This is 94.

537
00:30:35,200 --> 00:30:38,680
And this is the concept that's used, the concept that you see here is the

538
00:30:38,680 --> 00:30:41,120
important point, the desirable difficulty.

539
00:30:42,520 --> 00:30:45,800
We don't want things to be hard just for the sake of being hard.

540
00:30:46,800 --> 00:30:50,720
The next slide is not a better version of this one.

541
00:30:52,400 --> 00:30:55,520
I can tell you that this is a, a, a Caesar cipher of two.

542
00:30:56,400 --> 00:30:57,280
Now go read the slide.

543
00:30:59,560 --> 00:31:00,400
It's not better.

544
00:31:01,360 --> 00:31:04,400
So these, this is, this slide is more difficult than this slide.

545
00:31:05,160 --> 00:31:06,680
That's not, does not mean it's better.

546
00:31:07,040 --> 00:31:10,000
So the key concept is the desirable difficulty.

547
00:31:10,800 --> 00:31:12,320
So, sorry, man.

548
00:31:12,880 --> 00:31:16,080
So quoting Elizabeth Bjork and Robert Bjork again about the desirable

549
00:31:16,080 --> 00:31:21,560
difficulties, they trigger encoding and retrieval processes that support

550
00:31:21,560 --> 00:31:23,640
learning, comprehension, and remembering.

551
00:31:25,320 --> 00:31:27,800
So this is, this is kind of my summary for this.

552
00:31:28,160 --> 00:31:32,600
Practicing easy things is fooling your brain and thinking that you're doing well.

553
00:31:35,240 --> 00:31:35,760
Okay.

554
00:31:36,600 --> 00:31:37,080
Good.

555
00:31:37,480 --> 00:31:37,760
Good.

556
00:31:39,600 --> 00:31:42,840
So empirical studies have looked at the different learning methods and

557
00:31:42,840 --> 00:31:45,120
strategies that have a positive impact on your learning.

558
00:31:46,120 --> 00:31:50,800
So spacing that we talked about before, also interleaving.

559
00:31:51,040 --> 00:31:54,600
So spacing is like spacing out the different types you have.

560
00:31:54,640 --> 00:31:59,080
Interleaving is different kinds of learning, doing different methods of like,

561
00:31:59,480 --> 00:32:02,440
I want to learn in one style and then I learn another style.

562
00:32:02,440 --> 00:32:07,640
And yeah, variation, like learn different things as well.

563
00:32:08,200 --> 00:32:09,800
And also this thing, generation.

564
00:32:10,760 --> 00:32:16,280
So what generation is, at least what they were thinking is you will be taught

565
00:32:16,280 --> 00:32:20,920
something and now you have to create questions about the thing that you learned.

566
00:32:21,800 --> 00:32:23,000
You will not be given questions.

567
00:32:23,000 --> 00:32:24,240
You will not be given material.

568
00:32:24,720 --> 00:32:28,000
You have to form your own thoughts about this thing.

569
00:32:28,320 --> 00:32:31,120
Which sounds difficult, which it is, and that's good.

570
00:32:31,880 --> 00:32:33,000
That's what generation is.

571
00:32:39,160 --> 00:32:44,240
So there was even a study done, Karen Poth, 1978.

572
00:32:45,080 --> 00:32:47,680
So kids were supposed to throw bean bags at a target.

573
00:32:49,560 --> 00:32:53,880
Group A, practice by throwing at a single target, like these things here.

574
00:32:54,880 --> 00:32:59,200
Group B, practice by throwing at many targets, either close or further away,

575
00:32:59,440 --> 00:33:02,160
but never the same distance as group A.

576
00:33:04,560 --> 00:33:08,360
Then a test was conducted to throw at the same target that group A used

577
00:33:08,880 --> 00:33:10,120
and group B did better.

578
00:33:11,080 --> 00:33:14,480
So here we have variation, practice different things.

579
00:33:17,160 --> 00:33:19,720
So let's go back to Rust or any language.

580
00:33:20,440 --> 00:33:23,320
So what does it actually take to learn a new programming language?

581
00:33:24,240 --> 00:33:26,040
So is it enough to watch a YouTube video?

582
00:33:29,440 --> 00:33:29,760
Good.

583
00:33:31,240 --> 00:33:33,120
To read a blog post-tutorial?

584
00:33:35,920 --> 00:33:37,720
To watch an hour-long conference talk?

585
00:33:42,920 --> 00:33:43,920
To sit down in the program?

586
00:33:44,840 --> 00:33:45,920
More hands, more nods?

587
00:33:46,440 --> 00:33:46,920
No.

588
00:33:48,160 --> 00:33:54,960
But you need all of these and more because mixed together over a long period of time.

589
00:33:55,960 --> 00:34:00,480
So this is kind of the key that I've been seeing through obsessing about learning,

590
00:34:00,880 --> 00:34:04,160
is watching a YouTube video is one style of learning.

591
00:34:06,040 --> 00:34:10,400
And then reading a blog post-tutorial, watching a talk, doing a programming,

592
00:34:10,560 --> 00:34:16,000
like you are interweaving everything that is happening here, different learning styles.

593
00:34:16,520 --> 00:34:18,520
And this also adds time.

594
00:34:19,560 --> 00:34:20,400
So this is the...

595
00:34:21,400 --> 00:34:24,720
What I've been seeing through all of the studies is it takes time,

596
00:34:24,960 --> 00:34:29,880
and different things that you do, and then at some point, yeah, you will learn something.

597
00:34:30,160 --> 00:34:32,160
But it is difficult, and that is good.

598
00:34:33,640 --> 00:34:34,880
Not the first is difficult.

599
00:34:35,480 --> 00:34:37,000
Maybe it is, but that's another point.

600
00:34:38,440 --> 00:34:41,080
So let's learn programming in 10 days, right?

601
00:34:41,840 --> 00:34:42,960
Or 10 hours or 30 days.

602
00:34:42,960 --> 00:34:44,840
So who has seen the books?

603
00:34:45,480 --> 00:34:46,920
Have they become less common, right?

604
00:34:47,240 --> 00:34:50,400
Yeah, learning Java in 30 days or whatever they're called.

605
00:34:51,400 --> 00:34:56,800
There's a blog post by Peter Norwick, which he's very angry at these books, and rightly so.

606
00:34:58,560 --> 00:35:00,520
So, yeah, I don't think you learn programming in 10 days.

607
00:35:02,320 --> 00:35:03,600
So, remembering.

608
00:35:04,480 --> 00:35:07,840
So what I can see from the literature, yeah, mixing up practice styles,

609
00:35:08,880 --> 00:35:10,640
waiting between study sessions.

610
00:35:10,960 --> 00:35:12,360
So now you have an excuse, right?

611
00:35:13,440 --> 00:35:14,880
I'm not procrastinating.

612
00:35:15,440 --> 00:35:16,480
This is the waiting period.

613
00:35:16,560 --> 00:35:20,120
This is the incubation period between the study sessions.

614
00:35:21,200 --> 00:35:21,720
Don't cram.

615
00:35:21,800 --> 00:35:23,520
That's another thing they've shown.

616
00:35:24,000 --> 00:35:24,920
Cramming has no point.

617
00:35:25,240 --> 00:35:31,400
They've been doing tests on students that, and I don't have the example of,

618
00:35:32,720 --> 00:35:35,200
some of them had to really cram before a test.

619
00:35:35,720 --> 00:35:39,640
The others were not allowed to study before the test, and there was no

620
00:35:39,640 --> 00:35:41,040
significant difference between them.

621
00:35:42,400 --> 00:35:45,920
There's even like the, what's it called, the cue cards, that they would like really

622
00:35:45,920 --> 00:35:47,880
learn through the cue cards, and yeah, there's no difference.

623
00:35:48,480 --> 00:35:48,920
Don't cram.

624
00:35:50,440 --> 00:35:54,760
So, and this is a re-wording of one of the quotes.

625
00:35:55,200 --> 00:35:58,960
Difficult to remember in things, and then finding the right results

626
00:35:59,280 --> 00:36:00,360
strengthens the memory.

627
00:36:01,640 --> 00:36:05,320
I told you something, and then you had to recall it again.

628
00:36:06,840 --> 00:36:11,160
An anecdotal evidence, or anecdotal story that I heard about something

629
00:36:11,160 --> 00:36:18,040
like this is, the memories you have of when you were a kid exist as pictures

630
00:36:18,200 --> 00:36:19,400
in your parents' house.

631
00:36:20,520 --> 00:36:22,640
Because you go back and you look at the pictures.

632
00:36:22,880 --> 00:36:25,720
So you remember the time you went to the theme park, or you remember the time

633
00:36:25,720 --> 00:36:30,040
you climbed that hill, because you see it again and again over time.

634
00:36:30,680 --> 00:36:33,840
There are other memories, but the ones that are pictures in your parents'

635
00:36:33,840 --> 00:36:35,560
house, those are the ones you remember.

636
00:36:37,320 --> 00:36:44,600
So, in 1950s and 60s, the concept of errorless learning was advocated by

637
00:36:44,640 --> 00:36:45,240
B.F. Skinner.

638
00:36:45,760 --> 00:36:48,640
Yes, that's Skinner, that's you, might be thinking about.

639
00:36:49,640 --> 00:36:54,800
So, the idea was to give you the information, and then immediately a quiz.

640
00:36:55,320 --> 00:36:57,240
So, who remembers what I was doing in the beginning of the talk?

641
00:37:01,440 --> 00:37:05,320
So, we are fetching information straight from the short-term memory.

642
00:37:06,120 --> 00:37:09,360
That was the big thing, like, if I tell you something, and immediately quiz you

643
00:37:09,360 --> 00:37:12,800
on it, you won't fail the quiz, and then you are an expert.

644
00:37:13,760 --> 00:37:14,120
Right?

645
00:37:14,720 --> 00:37:15,000
No.

646
00:37:16,840 --> 00:37:19,400
Yeah, the opposite has actually been shown to be true.

647
00:37:20,720 --> 00:37:22,200
To quiz people later.

648
00:37:23,360 --> 00:37:28,200
So, there was a case of, and I think, yeah, there's another thing I'm going to show you.

649
00:37:29,040 --> 00:37:35,640
There's a case of the, like, a class has been taught in multiple ways, where there

650
00:37:35,640 --> 00:37:40,800
was a bunch of quizzes during the poll session.

651
00:37:41,320 --> 00:37:41,680
Wow.

652
00:37:42,880 --> 00:37:48,800
Not the seminar, during the whole year, half a year, where they were giving a

653
00:37:48,800 --> 00:37:51,960
bunch of quizzes along the way, and there was no final exam, and then just a

654
00:37:51,960 --> 00:37:56,560
grade from that, or there was no quiz and one big final exam at the end with

655
00:37:56,560 --> 00:38:02,680
everything, but then they tested the people again, I think a year later, and the

656
00:38:02,680 --> 00:38:07,400
people who had the one quiz at the end still remembered more than the people who

657
00:38:07,400 --> 00:38:09,240
just, because that's what you're doing.

658
00:38:09,360 --> 00:38:12,200
You're, I learned A, have a test on A.

659
00:38:12,280 --> 00:38:15,880
I learned B, I have a test on B, then I don't have to think about it, but those

660
00:38:15,880 --> 00:38:18,920
who have to learn everything and take a test on everything, they had to really

661
00:38:18,920 --> 00:38:22,120
sit and, yeah, remember everything that was happening.

662
00:38:23,240 --> 00:38:28,040
So, they were giving kids a set of hard puzzles, like the anagram puzzles.

663
00:38:29,720 --> 00:38:33,120
Half of them were just said, yeah, it's going to be hard.

664
00:38:34,000 --> 00:38:35,760
Difficulty is just a part of it, and that's okay.

665
00:38:36,000 --> 00:38:36,600
Don't worry about it.

666
00:38:37,600 --> 00:38:43,280
Uh, the other halves were asked to, like, explain how they would solve a puzzle.

667
00:38:44,160 --> 00:38:45,520
Like, yeah, you have to solve this.

668
00:38:45,760 --> 00:38:47,320
Tell me how you're thinking about the problem.

669
00:38:48,480 --> 00:38:49,360
The first group did better.

670
00:38:52,000 --> 00:38:52,200
Yeah.

671
00:38:53,600 --> 00:38:54,840
Just saying, like, it's going to be hard.

672
00:38:54,920 --> 00:38:55,280
That's okay.

673
00:38:55,880 --> 00:38:56,720
You're going to fail something.

674
00:38:56,720 --> 00:38:57,200
That's fine.

675
00:38:57,280 --> 00:38:58,760
Just let's, let's go through this.

676
00:38:58,760 --> 00:39:02,120
The other one, we talk about, like, how are you doing things?

677
00:39:02,120 --> 00:39:04,720
Or I'll give you a little tip on how to solve these puzzles.

678
00:39:04,720 --> 00:39:05,040
No, no.

679
00:39:05,680 --> 00:39:07,000
It's, it's, it's fine to be hard.

680
00:39:07,680 --> 00:39:14,640
Um, there's, there is a festival of errors in, I think, Paris from the 90s,

681
00:39:15,520 --> 00:39:17,200
where they're just celebrating that we're going to fail.

682
00:39:18,160 --> 00:39:21,200
And then it's like a festival for school kids and it's going to be okay.

683
00:39:21,200 --> 00:39:23,560
And then we're going to fail things and it's going to be hard.

684
00:39:23,560 --> 00:39:24,680
And yeah, it's kind of fun.

685
00:39:26,320 --> 00:39:32,520
So a question on my throughout there is, isn't this how we learn as programming

686
00:39:32,520 --> 00:39:33,920
also over time?

687
00:39:35,200 --> 00:39:36,560
So blocking versus spacing.

688
00:39:36,880 --> 00:39:40,240
So we might think about a specific feature or we might learn about a specific

689
00:39:40,240 --> 00:39:44,920
feature, but then, like, we don't learn about the vector and then only use vector

690
00:39:44,920 --> 00:39:45,440
for a long time.

691
00:39:45,920 --> 00:39:49,360
No, we learn about vector and then we learn about algorithms or then you learn

692
00:39:49,360 --> 00:39:52,160
about, um, I don't know, something else, right?

693
00:39:53,200 --> 00:39:55,080
So we do this blocking versus spacing.

694
00:39:55,560 --> 00:39:57,880
Like we don't teach, there's not a class on vectors.

695
00:39:58,320 --> 00:40:01,040
I don't think, uh, variation.

696
00:40:01,280 --> 00:40:04,000
We learn about different programming languages, programming language styles,

697
00:40:04,000 --> 00:40:06,560
different libraries, we're reading other people's code.

698
00:40:06,600 --> 00:40:06,880
Yeah.

699
00:40:07,440 --> 00:40:08,280
All these kinds of things.

700
00:40:09,040 --> 00:40:09,840
Uh, generation.

701
00:40:09,960 --> 00:40:11,280
I mean, we write our own code.

702
00:40:11,560 --> 00:40:12,720
We read code by others.

703
00:40:13,000 --> 00:40:15,240
We form questions about the code that needs to be answered.

704
00:40:16,000 --> 00:40:20,440
So we are not doing this, but over time and quizzing.

705
00:40:21,400 --> 00:40:24,600
I mean, I'd argue that code reviews are quizzes that we take every day.

706
00:40:24,840 --> 00:40:25,520
That is the question.

707
00:40:25,520 --> 00:40:26,880
Is this block of code okay?

708
00:40:28,600 --> 00:40:29,960
So we take a bunch of quizzes.

709
00:40:31,320 --> 00:40:31,640
All right.

710
00:40:33,240 --> 00:40:33,880
How are we on time?

711
00:40:35,480 --> 00:40:35,800
Good.

712
00:40:36,560 --> 00:40:39,520
So how are we learning rushed the wrong way?

713
00:40:41,240 --> 00:40:45,800
Uh, in the same way, we're learning everything the wrong way, basically, by

714
00:40:45,800 --> 00:40:49,000
looking for the easy way out, like I did my hubris.

715
00:40:50,240 --> 00:40:57,320
Uh, and we also fall into the curse of knowledge while teaching because I find

716
00:40:57,320 --> 00:41:01,440
this easy to explain, so it must be easy for others as well.

717
00:41:02,680 --> 00:41:04,160
I know what subsumption is.

718
00:41:05,160 --> 00:41:07,440
So I can explain to you what subsumption is, right?

719
00:41:08,000 --> 00:41:09,080
No, that doesn't work.

720
00:41:10,560 --> 00:41:13,400
So what is the rusty key to all this?

721
00:41:13,640 --> 00:41:14,280
I like this one.

722
00:41:14,320 --> 00:41:16,000
Oh, I was so happy when I found this image.

723
00:41:16,880 --> 00:41:19,200
Get up, get a basket in this image, right?

724
00:41:19,880 --> 00:41:20,160
All right.

725
00:41:20,320 --> 00:41:20,520
Good.

726
00:41:20,560 --> 00:41:20,880
Thank you.

727
00:41:21,960 --> 00:41:22,760
It's going to take time.

728
00:41:23,240 --> 00:41:23,800
That's the key.

729
00:41:24,360 --> 00:41:25,720
It's going to require practice.

730
00:41:26,240 --> 00:41:32,320
It's going to feel difficult and that's good because not because rushed

731
00:41:32,320 --> 00:41:35,720
itself with difficult, because that's how you get the best results.

732
00:41:36,920 --> 00:41:39,320
I mean, we as programmers are min maxers.

733
00:41:39,360 --> 00:41:41,440
We think about like, what's the best way optimal way?

734
00:41:42,000 --> 00:41:47,920
And I'm sorry, but the study show that the best way is the hard way in a way.

735
00:41:50,240 --> 00:41:52,160
I mean, it's not like learning C++ was easy, right?

736
00:41:56,400 --> 00:41:56,880
Yes.

737
00:41:57,040 --> 00:42:00,400
So now I'm going to be mean to myself as well.

738
00:42:00,920 --> 00:42:05,200
Unfortunately, in this case, there is considerable evidence that in many

739
00:42:05,200 --> 00:42:10,480
situations, this strategy, which is the one hour lecture is rather poor.

740
00:42:11,480 --> 00:42:12,320
From 71.

741
00:42:13,200 --> 00:42:15,200
What have we, what are we doing?

742
00:42:15,240 --> 00:42:16,000
What are we doing here?

743
00:42:16,560 --> 00:42:17,240
Just go home.

744
00:42:19,200 --> 00:42:25,480
A lecture may inspire, motivate, and inform, but I'm not going to tell you

745
00:42:25,480 --> 00:42:28,720
but rarely fulfills the principles for effective learning.

746
00:42:29,440 --> 00:42:32,880
It's certainly inadequate for developing high, the high level skills.

747
00:42:33,520 --> 00:42:34,040
71.

748
00:42:35,640 --> 00:42:36,000
Oops.

749
00:42:40,000 --> 00:42:40,240
Yeah.

750
00:42:40,320 --> 00:42:44,400
Students who study the topic and then generate their own questions scored an average

751
00:42:44,400 --> 00:42:49,080
of 14% higher than on a test than students that use passive strategies like

752
00:42:49,080 --> 00:42:51,280
studying the notes or rereading classroom materials.

753
00:42:52,280 --> 00:42:56,600
Creating questions, researchers found, not only encourage students to think more

754
00:42:56,600 --> 00:43:01,240
deeply about the topic, but also strengthen their ability to remember what

755
00:43:01,240 --> 00:43:02,080
they were studying.

756
00:43:04,120 --> 00:43:04,680
Yes.

757
00:43:07,680 --> 00:43:12,760
When Pablo Casals, the cellist, was asked why he continued to practice that

758
00:43:12,760 --> 00:43:15,920
cello three hours a day at the age of 93.

759
00:43:16,760 --> 00:43:19,400
He answered and beginning to notice some improvements.

760
00:43:20,400 --> 00:43:25,120
And because, like I talked about the one hour lecture is not good enough, it's, it's

761
00:43:25,120 --> 00:43:27,680
15 minutes until I think it should be safe, right?

762
00:43:27,720 --> 00:43:28,280
So thank you.

763
00:43:39,800 --> 00:43:41,600
So form your own questions, please.

764
00:43:43,720 --> 00:43:44,440
Yes.

765
00:43:44,560 --> 00:43:45,200
Yeah.

766
00:44:01,240 --> 00:44:06,680
What if we need, so it needs to be restructed, reconstructed that the thing that

767
00:44:06,680 --> 00:44:12,160
is going to do the, the mutation, the value is not the same thing as the

768
00:44:12,240 --> 00:44:16,520
class because the, the, the key of the issue, which I think is correct is because

769
00:44:16,520 --> 00:44:21,440
the self is mutable, that means that the, the, the vector is mutable and I'm

770
00:44:21,440 --> 00:44:25,400
asking for a mutable value of the vector that means that the, I'm asking for the

771
00:44:25,400 --> 00:44:28,520
whole vector to be in a, I don't know, mutable state.

772
00:44:29,240 --> 00:44:37,000
So take it out of the class because we are, we're asking, we're asking the

773
00:44:37,440 --> 00:44:40,480
class to be mutable when we actually don't need it to be mutable.

774
00:44:40,480 --> 00:44:42,880
And that's that we don't need that one value to be mutable.

775
00:44:44,080 --> 00:44:48,040
So I can, I can show you the actual worst code.

776
00:44:48,040 --> 00:44:49,080
It's, it's on GitHub.

777
00:44:49,320 --> 00:44:52,360
I can show you the actual Pokemon code and it's a bit, it's a, it's

778
00:44:52,360 --> 00:44:55,520
oddly structured, but yeah, we, we don't do the compact there.

779
00:44:56,000 --> 00:44:56,800
That's basically the case.

780
00:45:00,720 --> 00:45:03,280
And the other form questions, I know it's hard.

781
00:45:03,280 --> 00:45:05,160
Yeah, that was before here.

782
00:45:12,120 --> 00:45:17,720
Have I found the thing I feel I still haven't mastered is the, the lifetime

783
00:45:17,720 --> 00:45:20,680
part where you do the lifetime annotation.

784
00:45:22,000 --> 00:45:26,760
I'm still in the, in the, in the area where like, I will just put the

785
00:45:26,760 --> 00:45:31,400
lifetime annotations until it works, which I don't, I don't, I don't, I don't

786
00:45:31,520 --> 00:45:39,240
know if it works, which I don't, like, yeah, exactly, which is, which is the,

787
00:45:39,240 --> 00:45:44,080
if you do the rustling exercises, that is what that is, is you have a compiler

788
00:45:44,080 --> 00:45:48,120
error and it will tell you, like, fix, fix the error in file number one.

789
00:45:48,240 --> 00:45:50,240
And then you fix the error in file number one, it will read through the

790
00:45:50,240 --> 00:45:53,480
tests and then it will say, fix the error in file number two, and it will go

791
00:45:53,480 --> 00:45:54,600
into file number two and read about it.

792
00:45:55,040 --> 00:45:57,560
And the first errors are like, said, we call it missing or the if statements

793
00:45:57,560 --> 00:46:00,040
is wrong, but then it's like, I think it's like 40, 50 exercises.

794
00:46:00,520 --> 00:46:04,200
But the, and what I found from the rustlings when I was doing those, there

795
00:46:04,200 --> 00:46:07,400
are no exercises about the lifetime, because you can do so much with the

796
00:46:07,400 --> 00:46:08,760
language without even thinking about that.

797
00:46:09,280 --> 00:46:12,120
Because a lot of the times if there is, I think it's, if it's one

798
00:46:12,120 --> 00:46:16,200
argument into the function, the compiler will do the lifetime thing for you

799
00:46:16,200 --> 00:46:19,440
correctly, because there's only one way to do it, I think.

800
00:46:20,440 --> 00:46:22,760
So yeah, the whole lifetime thing is, is weird.

801
00:46:23,160 --> 00:46:27,640
It actually, I, I found, again, the language kind of guided me in the

802
00:46:27,640 --> 00:46:33,400
right direction, which was I had, I was doing some web stuff where you can

803
00:46:33,720 --> 00:46:36,280
write rust and compile to web assembly and then run that.

804
00:46:36,920 --> 00:46:42,320
And I wanted a, a callback to the JavaScript code.

805
00:46:42,840 --> 00:46:46,720
And I wanted the callback to be a, a lambda within rust.

806
00:46:47,760 --> 00:46:52,880
But the thing is that the lifetime of a lambda that is capturing variables

807
00:46:53,200 --> 00:46:57,480
cannot be static or cannot be like globally alive, which is

808
00:46:57,560 --> 00:47:02,320
kind of what is necessary if you want to be callable from outside, because you

809
00:47:02,320 --> 00:47:05,400
always need to exist because you never know when you're going to be called.

810
00:47:06,360 --> 00:47:09,320
So in other languages, I might just get a function pointer and just hope

811
00:47:09,320 --> 00:47:09,800
that works.

812
00:47:10,160 --> 00:47:12,880
And probably 99% of the cases, yeah, that works.

813
00:47:13,320 --> 00:47:17,600
But, but actually, like that doesn't work.

814
00:47:17,720 --> 00:47:18,880
And the language will say no to you.

815
00:47:19,480 --> 00:47:19,680
Yeah.

816
00:47:20,560 --> 00:47:20,920
Yeah, one.

817
00:47:27,480 --> 00:47:33,560
I think the entire rust language is lava and it's a hello from me to, I'm

818
00:47:33,560 --> 00:47:37,560
going to be at Rust Fest next year and I'm sorry, everyone, this is my laughing

819
00:47:37,560 --> 00:47:38,040
question.

820
00:47:40,040 --> 00:47:40,840
Where are you on that?

821
00:47:42,360 --> 00:47:44,320
70% towards the second one.

822
00:47:47,040 --> 00:47:47,600
I like rust.

823
00:47:47,720 --> 00:47:48,080
It's fun.

824
00:47:49,600 --> 00:47:49,800
Yeah.

825
00:47:57,480 --> 00:48:10,800
So, so here's the thing about learning that I, because I learned this way.

826
00:48:11,280 --> 00:48:12,680
So this is the path that I've learned.

827
00:48:13,080 --> 00:48:19,760
So I recommend learning wrong and then doing a conference talk about it in the

828
00:48:19,760 --> 00:48:22,400
same way that people sometimes ask me, like, how did you learn C++?

829
00:48:22,400 --> 00:48:26,240
I'm like, yeah, I went to university for four years and studied there for four

830
00:48:26,240 --> 00:48:26,400
years.

831
00:48:26,400 --> 00:48:28,120
So you should also go to university for four years.

832
00:48:28,720 --> 00:48:30,160
They're like, do you recommend this book?

833
00:48:30,160 --> 00:48:31,680
Like, I've never read it, so I don't know.

834
00:48:33,400 --> 00:48:36,080
I do recommend the rustling exercises that I've mentioned.

835
00:48:37,240 --> 00:48:42,280
I do recommend doing things in smaller incremental steps.

836
00:48:42,600 --> 00:48:46,120
I do recommend moving projects you have, like smaller hobby projects over,

837
00:48:46,640 --> 00:48:49,000
because there's a lot of like walls you will hit along the way.

838
00:48:50,040 --> 00:48:50,720
And it will be hard.

839
00:48:52,240 --> 00:48:55,440
Also find like a good, like rust community to chat with.

840
00:48:55,520 --> 00:48:59,880
A bunch of them on Twitter, probably because a lot of them migrated from C++.

841
00:49:01,080 --> 00:49:04,760
But yeah, at least start there and then, yeah, time.

842
00:49:05,760 --> 00:49:06,040
Yeah.

843
00:49:08,280 --> 00:49:09,520
Any more well-formed questions?

844
00:49:09,520 --> 00:49:09,680
Yeah.

845
00:49:26,440 --> 00:49:27,640
Yes, yes.

846
00:49:33,000 --> 00:49:37,800
Yeah, because like an example I had with the Pokemon code, like I was doing

847
00:49:37,800 --> 00:49:38,720
in-out variables.

848
00:49:38,720 --> 00:49:43,880
I was like taking references to like arrays and stuff like, yeah, I have done

849
00:49:43,880 --> 00:49:49,840
smaller projects where I, so there's another teaching idea that I've had is,

850
00:49:50,240 --> 00:49:52,120
is to create limitations for yourselves.

851
00:49:52,480 --> 00:49:56,520
And like an example is you can, you can write a small hobby project or do

852
00:49:56,520 --> 00:50:00,480
like a small thing, but every single variable you have has to be a unique

853
00:50:00,480 --> 00:50:05,280
pointer, like all of them have to be unique pointers and that creates a

854
00:50:05,280 --> 00:50:08,440
bunch of problems, but that also teaches you a lot about unique pointer.

855
00:50:09,120 --> 00:50:10,280
So I've done that kind of thing.

856
00:50:10,280 --> 00:50:14,600
I haven't taken my own older project and like, that a modern version of them.

857
00:50:15,240 --> 00:50:15,880
Maybe I should.

858
00:50:15,880 --> 00:50:16,200
Yeah.

859
00:50:18,280 --> 00:50:18,760
Yes.

860
00:50:22,120 --> 00:50:22,680
Yeah.

861
00:50:35,600 --> 00:50:40,000
I, I think I've done that with TypeScript.

862
00:50:40,560 --> 00:50:43,400
I think that would describe my TypeScript like initially when I learned it

863
00:50:43,440 --> 00:50:49,240
because it was a, a, like a, and what's it called?

864
00:50:49,240 --> 00:50:54,400
A serverless AWS, AWS project with all sorts of like everything was async in

865
00:50:54,400 --> 00:50:54,880
the code.

866
00:50:54,880 --> 00:50:58,560
And like it was very, like it took me a long while to get like used to how

867
00:50:58,560 --> 00:51:02,240
things worked and how things looked and also had to learn AWS at the same time.

868
00:51:02,240 --> 00:51:06,040
And then how this whole, you have to like upload the lambdas up to the cloud and

869
00:51:06,040 --> 00:51:06,240
stuff.

870
00:51:06,240 --> 00:51:07,720
So, so I've done that.

871
00:51:08,920 --> 00:51:12,840
The main issue is, I guess it's hard, which I think is why, like, like last

872
00:51:12,840 --> 00:51:15,720
year I did a talk on TypeScript because yeah, I think I knew it pretty well.

873
00:51:16,440 --> 00:51:19,280
Maybe that was the, the reason why I knew it that well.

874
00:51:20,960 --> 00:51:26,160
But yeah, I think that's, that's how I learned that.

875
00:51:26,440 --> 00:51:30,640
So if you can use it, try it because it is difficult.

876
00:51:30,680 --> 00:51:31,760
It is very, very difficult.

877
00:51:32,280 --> 00:51:37,440
And I think it's, it will take a while for you to be, to feel productive.

878
00:51:37,560 --> 00:51:40,000
And, and for some people that might feel uncomfortable.

879
00:51:40,760 --> 00:51:41,000
So.

880
00:51:45,040 --> 00:51:45,600
Then thank you.

