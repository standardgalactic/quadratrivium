1
00:00:00,000 --> 00:00:16,720
It's wonderful to be here. Has everyone had a fantastic week? Yes. Excellent. Glad to

2
00:00:16,720 --> 00:00:23,840
hear it. I would just like before I start to say thank you to Jacob and Kirstie and Steiner

3
00:00:23,840 --> 00:00:29,760
and Henriette and all the volunteers, the people in the green t-shirts who've been

4
00:00:29,760 --> 00:00:34,640
sort of marshalling the rooms and gathering the feedback and everything. There's a lot of work

5
00:00:34,640 --> 00:00:38,800
that goes into these conferences. So can we have a round of applause for all the people who make

6
00:00:38,800 --> 00:00:51,360
this happen? So I'm going to finish things off. You're all tired. It's been a long week. You've

7
00:00:51,360 --> 00:00:57,600
got loads of information to process. And so I'm just going to basically share some very silly

8
00:00:57,600 --> 00:01:02,880
stuff. There may accidentally be some lessons in there that you can learn. I apologize.

9
00:01:04,960 --> 00:01:12,800
But this is all about some mistakes and the kind of mistakes that are made by software

10
00:01:12,800 --> 00:01:21,120
developers and engineers. Before I start content warning, there is going to be swearing. I am going

11
00:01:21,120 --> 00:01:29,280
to say, fuck, quite a lot just in the next segment, but it is relevant to the plot. So that

12
00:01:29,280 --> 00:01:34,720
is justified. What I am not going to be talking about in this talk, because it's light hearted,

13
00:01:34,720 --> 00:01:40,400
it's designed to make you laugh, I'm not going to be talking about any situations where software

14
00:01:40,400 --> 00:01:47,440
errors have actually killed people. But software errors have killed people. So yeah, but there's

15
00:01:47,440 --> 00:01:53,600
none of that in here. This is all just, it basically cost a lot of money for the most part

16
00:01:53,600 --> 00:02:06,960
or cost me my job in what some cases. So yeah. And this is me. This was one of my biggest mistakes.

17
00:02:06,960 --> 00:02:12,720
I worked for a software company and this was when I was in my 20s. I was young. I was arrogant. I

18
00:02:12,800 --> 00:02:17,760
thought I was like a 10x developer and hot shit and all that sort of stuff. And I worked at this

19
00:02:17,760 --> 00:02:24,320
company and also in my defense before we get into this, I was already spiraling into what would

20
00:02:24,320 --> 00:02:29,520
eventually become a full on nervous breakdown. So I wasn't necessarily thinking straight.

21
00:02:30,720 --> 00:02:37,760
Our company, we sold event management software and membership software and it was very complicated

22
00:02:37,760 --> 00:02:42,880
and you could build these huge complicated queries across the database and you could save

23
00:02:42,880 --> 00:02:49,040
those queries into a file so you could load them again the next day. And those files had a med

24
00:02:49,040 --> 00:02:55,040
extension. I can't even remember what it stood for. But we called them med files. And we released

25
00:02:55,040 --> 00:03:01,840
an update to the software and it corrupted. When you saved the med file, it corrupted it. And so

26
00:03:01,840 --> 00:03:09,360
the support people came to me and they said, and I quote, Mark, the med files are fucked.

27
00:03:11,120 --> 00:03:19,680
Can you write something to unfuck the med files? And so I went into Visual Studio and I did file

28
00:03:19,680 --> 00:03:26,880
new project. And it said, what's the project name? And I went, oh, unfuck. And so I created this

29
00:03:27,520 --> 00:03:34,400
little Windows application, Windows forms application and it displayed a dialog box

30
00:03:35,040 --> 00:03:43,520
and it said, choose file to unfuck. And you clicked a button and it went off and you

31
00:03:43,520 --> 00:03:47,120
browsed and you chose your file and then it had a button that said unfuck now.

32
00:03:49,280 --> 00:03:53,840
And then it ran it through its thing. It did its thing. And then it displayed a message box

33
00:03:53,840 --> 00:04:02,240
that said, med file successfully unfucked. Close. And it worked. Well, I thought it worked. But

34
00:04:02,240 --> 00:04:06,400
you know, support had a bunch of support or also QA. It was that kind of company.

35
00:04:06,400 --> 00:04:14,640
And so I gave the application which was called unfuck.exe to the support person who had reported

36
00:04:14,640 --> 00:04:18,720
this to me and I went, can you test this out and make sure it works and then we can clean it up

37
00:04:18,720 --> 00:04:24,240
and send it to the customer. I don't know if he tested it. I can't imagine that he did

38
00:04:25,040 --> 00:04:28,560
because then without coming back to me, he shipped it to the customer.

39
00:04:34,480 --> 00:04:40,560
And they ran it. And yeah, it doesn't look particularly. These are the kinds of customers

40
00:04:40,560 --> 00:04:45,680
who are paying you half a million pounds a year on a sort of support subscription basis.

41
00:04:45,680 --> 00:04:50,160
And we send them a file called unfuck.exe that says your file has been unfucked.

42
00:04:51,040 --> 00:04:58,640
And at the time, I was in such a bad place mentally. I blamed the support guy for this

43
00:04:58,640 --> 00:05:04,640
because I obviously got hauled across the coals for this. And I blamed the support guy for shipping

44
00:05:04,640 --> 00:05:10,880
the thing. Whereas obviously it was actually my fault. I should never have created a program called

45
00:05:10,880 --> 00:05:18,160
unfuck.exe. That was just not a good idea. It's okay to swear in comments as long as you're never

46
00:05:18,160 --> 00:05:25,040
going to open source things, but don't actually put unfuck. On a slightly related note, by the way,

47
00:05:26,160 --> 00:05:35,360
when I, very early in my career, did anyone, any Windows 3.1 veterans in the room? So Windows 3.1,

48
00:05:35,440 --> 00:05:41,920
it was a file called win.com. And every message and every piece of text that could be displayed in

49
00:05:41,920 --> 00:05:47,440
Windows was embedded in win.com just as text. And if you used a hex editor, you could open it up.

50
00:05:48,400 --> 00:05:56,880
Interesting trivia. The phrase general protection fault has one more character than the phrase

51
00:05:56,880 --> 00:06:04,160
Mongolian clusterfuck. And so if you put two spaces in the middle, you can edit someone's

52
00:06:04,560 --> 00:06:09,280
win.com file and then you can run away. And then the next time that happens, they will get a message

53
00:06:09,280 --> 00:06:13,520
box that says a Mongolian clusterfuck has occurred, which has caused your application to terminate.

54
00:06:18,320 --> 00:06:21,760
One of the worst things about Windows 11 is you can't do that anymore.

55
00:06:23,440 --> 00:06:29,200
Okay, let's talk about Y2K. Everyone knows about Y2K. That was probably one of the

56
00:06:29,200 --> 00:06:34,800
biggest mistakes in software. But it wasn't that we let that happen in the first place. It was

57
00:06:34,800 --> 00:06:40,240
really to do with how slow we were in fixing it. Because what you have to understand about the people

58
00:06:40,240 --> 00:06:46,800
who wrote the code that then caused the Y2K problem was that this is what data was stored on

59
00:06:46,800 --> 00:06:54,000
at the time, punch cards. So every column on there is basically a byte of information. And so those

60
00:06:54,080 --> 00:06:59,760
extra two digits on the year would have been an extra two columns on there. Multiply that by

61
00:06:59,760 --> 00:07:06,480
a million bank customers and a hundred million transactions a day. And those extra two columns

62
00:07:06,480 --> 00:07:12,160
add up to a lot of extra punch cards and memory in those days. This was what memory looked like

63
00:07:12,160 --> 00:07:18,000
in those days. This isn't under a microscope. This is just a photograph. That is core memory.

64
00:07:18,080 --> 00:07:25,840
And it's lots of magnetic poles. And through each pole, two pieces of wire have been passed.

65
00:07:25,840 --> 00:07:34,080
These were made by usually women with microscopes and needles. Memory in the 1950s was knitted.

66
00:07:35,040 --> 00:07:44,800
And core memory cost about a dollar a bit. So a byte of memory would cost you eight dollars.

67
00:07:44,800 --> 00:07:50,960
You think that means a kilobyte of memory would cost you eight thousand dollars.

68
00:07:50,960 --> 00:07:58,720
So memory was really at a premium. And this is also incidentally why Unix still says core dump

69
00:07:58,720 --> 00:08:03,520
to this day. It's because it was the core memory that was being dumped. And of course in those days

70
00:08:03,520 --> 00:08:09,120
it was just a kilobyte. And it was quite easy to read through. So early programming languages like

71
00:08:09,120 --> 00:08:16,320
COBOL, they didn't think in bytes. They thought in bits. And so this is the definition for a date

72
00:08:16,320 --> 00:08:26,960
variable. And we say this is a string type variable. But the nine means it's a number character. And

73
00:08:26,960 --> 00:08:33,120
so it can only be naught to nine or some of the other like hyphen and comma and dot and things

74
00:08:33,120 --> 00:08:39,360
like that. So that would fit in six bits instead of eight bits, which meant you saved a couple of

75
00:08:39,360 --> 00:08:44,240
dollars every time you were putting one of these things into memory. So it was quite reasonable

76
00:08:44,240 --> 00:08:54,640
to shorten the date and only use the sort of decade and the year. This is, I've forgotten his name,

77
00:08:55,600 --> 00:09:04,800
Bob Beamer. And Bob Beamer in 1954 was the guy going, I realize we have to do this, but as soon

78
00:09:04,800 --> 00:09:10,720
as memory becomes cheaper, we really should change that to a pick eight, pick nine eight, because

79
00:09:10,720 --> 00:09:18,240
this is going to cause a problem. 1954, he said that. In 1964, he started saying it with a little

80
00:09:18,320 --> 00:09:27,680
bit more emphasis. In 1974, he started shouting about it. In 1984, he was giving talks at conferences

81
00:09:27,680 --> 00:09:36,960
going, guys, we really, really need to fix this. In 1994, after Bob Beamer had retired, we actually

82
00:09:36,960 --> 00:09:44,160
started work on fixing it. And by that time, all this software had carried on you. So you wrote

83
00:09:44,240 --> 00:09:49,760
new bits of this software and you carried on using that. And so the effort to stop the Y2K bug

84
00:09:49,760 --> 00:09:55,360
from happening was ridiculous. And it took an awful lot of people, an awful lot of time. But

85
00:09:55,360 --> 00:10:03,520
we did it. And then the year 2000 came. And there were very few big computer crashes and no aeroplanes

86
00:10:03,520 --> 00:10:08,640
fell out of the sky and all this other stuff. And the whole of the rest of the world went, well,

87
00:10:08,720 --> 00:10:15,040
that Y2K thing was a lot of nonsense, wasn't it? What a fuss. And people like me who'd rewritten

88
00:10:15,040 --> 00:10:21,120
COBOL systems in Informix 4GL to fix this went, no, you're welcome. Yeah, it's like, yeah, no,

89
00:10:21,120 --> 00:10:28,960
it's thanks to me, your hospital still works. But no, Bob Beamer died in 2004. So we did actually

90
00:10:28,960 --> 00:10:35,600
get to see the problem being fixed. But the estimated cost of fixing the Y2K bug goes from

91
00:10:35,600 --> 00:10:43,760
some people say $300 million, some people say $800, no, $300 billion. Some people say $800

92
00:10:43,760 --> 00:10:49,360
billion. So let's put it somewhere in the middle, we'll say it cost half a trillion dollars to fix

93
00:10:49,360 --> 00:10:55,600
the Y2K bug. And you'd think we'd learn from that and we wouldn't set ourselves up for any other

94
00:10:55,600 --> 00:11:00,880
Y2K bugs, particularly if you're like one of the biggest software engineering companies in the

95
00:11:00,880 --> 00:11:08,640
world, you wouldn't put something into, say, your flagship email server that was going to break at a

96
00:11:08,640 --> 00:11:14,960
no, no, no, no, Microsoft, this happened this year. A thing that Microsoft was storing in an

97
00:11:14,960 --> 00:11:20,720
integer ticked over. I don't know what exactly what the number was. But suddenly we couldn't

98
00:11:20,720 --> 00:11:26,880
convert this number to a long, because it was too big, and exchange servers all over the world,

99
00:11:26,880 --> 00:11:33,600
including Office 365 just choked and died. And Microsoft had to hurriedly roll out a fix for

100
00:11:33,600 --> 00:11:43,760
that. In the year 2038, there's the apocalypse is coming. Unix still stores the system date and

101
00:11:43,760 --> 00:11:51,600
time as the number of seconds since January the 1st, 1970, in a signed 32-bit integer.

102
00:11:51,680 --> 00:11:58,480
And that's going to crash in 2038. And you'd think, well, that's an easy fix. Change it to a 64-bit

103
00:11:58,480 --> 00:12:04,480
integer. But no, they've patched it with an extra bit. So now they've got a 33-bit integer, which

104
00:12:04,480 --> 00:12:15,280
kicks the can down the road until like the year 42 something. But you know, Linux going to Linux.

105
00:12:15,280 --> 00:12:22,720
My favorite one of these, though, is the dog 38 bug that the Kennel Club of the United States of

106
00:12:22,720 --> 00:12:30,480
America have. So the Kennel Club, your dogs are categorized by their pedigree breed. And then your

107
00:12:30,480 --> 00:12:36,320
dog has a name. And it's one of those big, long show names. Like I have a pedigree dog and her,

108
00:12:36,320 --> 00:12:39,760
I can't remember her show name. It's got something, sugar, cookie, something, something.

109
00:12:40,720 --> 00:12:47,520
And so if they already have a dog with that name, which is obviously, you know, big country,

110
00:12:47,520 --> 00:12:53,440
300 million people, lots of dogs, it happens. And so they number them. And so, yeah, one,

111
00:12:53,440 --> 00:12:59,440
two, three, four, five, six, blah, blah, 37. And if you go to had a dog and there are already 37

112
00:12:59,440 --> 00:13:05,760
dogs of that breed with that name, and so this is dog number 38, it crashes because it can't

113
00:13:05,760 --> 00:13:12,240
write the number into the database. See if you can anyone guess how they're writing the number

114
00:13:12,240 --> 00:13:19,760
into the database that would cause 37 and all the numbers up to 37 to be okay. And 38 suddenly

115
00:13:19,760 --> 00:13:30,000
crashes. Roman numerals, they store the Roman numerals in a char six field. And every number up

116
00:13:30,080 --> 00:13:44,240
to 38. So 38 is XXXV37, sorry, is XXXVII. All the numbers before that fit in fine,

117
00:13:44,240 --> 00:13:51,760
but 38 is XXXVII. And this one, I really don't understand, it's going to the database,

118
00:13:51,760 --> 00:14:00,400
change it to a char eight, or God forbid, an integer. And just format. Someone just went,

119
00:14:00,400 --> 00:14:06,080
I can't write the algorithm to format a number as Roman numerals. Let's just store it as Roman

120
00:14:06,080 --> 00:14:11,600
numerals. So yeah, that's fun. I would like to thank Stand Up Maths on YouTube, great channel,

121
00:14:11,600 --> 00:14:16,240
and I found that one on there as I was writing this talk. So that was interesting.

122
00:14:17,200 --> 00:14:22,960
A lot of this actually comes down to one of our biggest mistakes in programming, which is just

123
00:14:22,960 --> 00:14:29,600
enterprise programming generally, enterprise software. It's just, you know, the processes and

124
00:14:29,600 --> 00:14:34,880
the procedures and the waterfall and the project planning five years in advance and all this sort

125
00:14:34,880 --> 00:14:40,320
of stuff. And it causes problems. And you can see the kinds of problems that it causes. So yes,

126
00:14:40,320 --> 00:14:48,080
enterprise, a business plan or project, especially one that is difficult or may fail or lose money.

127
00:14:48,080 --> 00:14:53,200
And everything in enterprise development is based around this. It's nothing to do with building

128
00:14:53,200 --> 00:14:57,920
good software. It's nothing to do with working efficiently. It's all to do with covering your

129
00:14:57,920 --> 00:15:04,080
ass so that when the thing goes wrong at the end of the day, you still get paid because you can

130
00:15:04,080 --> 00:15:12,640
prove it was somebody else's fault, which is why you get agile development posters that look like

131
00:15:12,640 --> 00:15:19,440
this. This is the scaled agile framework for enterprise. This is the simplified version.

132
00:15:20,880 --> 00:15:26,880
There are worse versions than this. And you get things like this, autoscrum 1.1,

133
00:15:26,880 --> 00:15:33,280
which is Accentures. This is still claiming to be agile. This is Accentures agile framework

134
00:15:33,280 --> 00:15:43,440
that they use. And somewhere in there, we have a program backlog. We have a sprint right down

135
00:15:43,440 --> 00:15:50,480
there. There's a daily scrum. And I think they've allocated some time for people to write code.

136
00:15:53,920 --> 00:15:54,960
But I'm not sure.

137
00:15:55,760 --> 00:16:05,520
People have probably seen this. This is Deloitte's agile landscape, version 3. The terrifying thing

138
00:16:05,520 --> 00:16:20,400
with this is that this and this are just single dots on this. And we wonder why so many enterprise

139
00:16:20,400 --> 00:16:29,760
projects fail. Quick story about enterprise. I was hired by one of the national agencies,

140
00:16:29,760 --> 00:16:37,200
the Quangos, as we call them, quasi-autonomous non-governmental agency organization in the UK.

141
00:16:37,200 --> 00:16:44,560
They had an API endpoint, only had one thing, and it just returned a list of the amount of

142
00:16:44,640 --> 00:16:50,400
energy that was being used in the UK right at that second. And that is very useful information.

143
00:16:50,400 --> 00:16:55,680
If you're investing in energy futures, you want to watch those patterns. And so people just kept

144
00:16:55,680 --> 00:17:01,120
hitting it and hitting it and hitting it. It didn't have IP throttling. It didn't have any

145
00:17:01,120 --> 00:17:06,080
accounts or anything like that. It was an anonymous endpoint and you hit it. And it did a

146
00:17:06,080 --> 00:17:12,000
quite complicated database query against an Oracle database. And did people put a thread

147
00:17:12,000 --> 00:17:18,720
dot sleep 10 or a task dot delay 10 in between? No, no, no, no. No, they just get it, hit it again,

148
00:17:18,720 --> 00:17:26,960
hit it again. They had this running on one 32-bit server. It was written in .NET 2.0. I had been

149
00:17:26,960 --> 00:17:34,880
brought in to look at this in 2014. And yeah, it was 32-bit .NET, so it didn't have much memory.

150
00:17:34,880 --> 00:17:40,080
The Oracle database was also 32-bit running on an old server. The servers had been there since

151
00:17:40,080 --> 00:17:48,240
like 2005, so they were well past their death time. And yeah, they said, can you take a look at this

152
00:17:48,240 --> 00:17:54,080
code and tell me what's wrong with it and tell us how to fix it? And I went, I could just fix it.

153
00:17:54,080 --> 00:18:00,160
And they went, no, no, no, no. Don't fix it. We give you two weeks to write a 20-page document

154
00:18:00,160 --> 00:18:06,400
telling us how to fix it. And so I took it back to the office and I loaded it into Visual Studio

155
00:18:06,480 --> 00:18:15,920
and Resharper actually started crying and then uninstalled itself and went, no, you're on your own.

156
00:18:16,880 --> 00:18:23,120
Just don't. And basically, I don't do planning. I don't do documentation. I don't do that sort

157
00:18:23,120 --> 00:18:27,680
of thing. I'm getting better at it now as I get older and more responsible. But back in those days,

158
00:18:27,680 --> 00:18:32,800
I was kind of like, I'll fix it and then I'll just write down what I did to fix it. And actually,

159
00:18:32,800 --> 00:18:41,840
the main thing I did to fix it was where they said var connection equals Oracle database connection,

160
00:18:41,840 --> 00:18:47,440
new Oracle DB connection, I just added using because they weren't disposing their database

161
00:18:47,440 --> 00:18:53,600
connections. So it crashed every 20 minutes because they exhausted memory and the app pool had to

162
00:18:53,600 --> 00:19:02,320
recycle. And so I managed to write 20 pages on why using statements are important,

163
00:19:04,560 --> 00:19:09,040
sent it back to them, didn't hear anything from them for nine months, and then they came back to me

164
00:19:09,040 --> 00:19:12,960
and they said, can you come in for a meeting to discuss your findings? And I'm kind of like,

165
00:19:12,960 --> 00:19:21,680
you haven't done it yet? So I go up and my boss goes up and he's charging them £2,000 from me

166
00:19:21,680 --> 00:19:25,120
to be there for the day. Lord knows what he charged for him to be there for the day. I'm

167
00:19:25,120 --> 00:19:31,360
guessing about £5,000. We get there. There's 10 IBM consultants sitting around this table. And I

168
00:19:31,360 --> 00:19:38,800
know that IBM consultants are about £10,000 a day. So this is a £100,000 meeting that's happening

169
00:19:38,800 --> 00:19:45,920
right here. And I go, look, I can give you the code. I've brought it on a USB. If you want the

170
00:19:45,920 --> 00:19:53,440
fixed version of the code, it's here. And I would recommend running it on in 64-bit on a server

171
00:19:53,440 --> 00:19:58,320
that isn't 10 years old, but this will probably still work even if you don't do that. And they

172
00:19:58,320 --> 00:20:04,160
went, yes, we can't just go in willy-nilly and fix it and put it on new servers. This is a critical

173
00:20:04,160 --> 00:20:13,040
system. Yes, it's a critical system that crashes every 20 minutes and is costing you an absolute

174
00:20:13,040 --> 00:20:20,640
fortune. Just buy a new server. Just put it on a new server and it will be better. Give it 64 bits

175
00:20:20,640 --> 00:20:25,920
and give it like 16 gigs of RAM and it will run smoother. Well, we can't just, you know, that has

176
00:20:25,920 --> 00:20:33,200
to go through a whole process. And I'm like, this meeting is costing £100,000. And for £100,000,

177
00:20:33,200 --> 00:20:38,400
you could buy a data center and run this thing on a server farm and it would be fine. And my boss

178
00:20:38,400 --> 00:20:47,600
went, no, why don't you go outside and get some fresh air? And so I go out and I wait by his car

179
00:20:47,600 --> 00:20:54,480
and he's kind of like, oh, I'm in so much trouble. I'm going to get sacked again. And I'm smoking a

180
00:20:54,480 --> 00:21:00,000
cigarette because I smoked at the time. And he comes out and I'm like, I'm really, really, really

181
00:21:00,240 --> 00:21:06,960
and he went, no, don't worry about it. I don't want to fuck off. We don't need that shit. He said,

182
00:21:07,920 --> 00:21:16,160
okay, this was a fun one. So problems in software, they're easy to fix. So you ship some software

183
00:21:16,160 --> 00:21:20,240
that doesn't work and they are, it doesn't work. And you go, here's a new version of the software.

184
00:21:20,240 --> 00:21:26,000
Intel managed to get a software bug into their processor. So the Pentium chip was the first

185
00:21:26,000 --> 00:21:32,080
Intel processor that actually had a floating point unit built into it. Before that, we had the 486

186
00:21:32,080 --> 00:21:38,560
and there was a 487 co-processor that did floating point, but Intel had combined it into the actual

187
00:21:38,560 --> 00:21:45,280
chip itself. And the Pentium floating point unit accelerated floating point operations. There you

188
00:21:45,280 --> 00:21:55,920
go. That's what it looked like. So what is 4,195,835 divided by 3,145,727? It's one

189
00:21:56,000 --> 00:22:04,320
.33382. Except according to the Intel Pentium's floating point accelerator, it's 1.33374.

190
00:22:05,280 --> 00:22:13,200
And there were a few instances where this would go wrong and people noticed and Intel went, okay,

191
00:22:13,200 --> 00:22:19,680
if you can prove that you are actually affected by this bug, we will just send you a new Intel

192
00:22:19,680 --> 00:22:26,000
Pentium processor where it is fixed. And then so many people came up with these torturous,

193
00:22:26,000 --> 00:22:30,640
this is why it's not working for me, which were largely to do with Microsoft Excel.

194
00:22:31,200 --> 00:22:37,680
And so Intel ended up going, fine, just if you've bought a Pentium, we'll send you another Pentium.

195
00:22:37,680 --> 00:22:45,600
And that ended up costing Intel $475 million to fix. I'm not sure anything like it's happened

196
00:22:45,600 --> 00:22:50,480
since I would imagine they probably run every possible floating point calculation

197
00:22:50,480 --> 00:23:00,160
as part of their unit tests. Null. This is quite famous. Null. And we actually have a fairly easy

198
00:23:00,160 --> 00:23:06,960
value to assign to Null because Tony Haw, who was the guy who invented Null, has called it his

199
00:23:06,960 --> 00:23:12,560
billion dollar mistake. So Tony Haw, he's a British computer scientist, hugely respected,

200
00:23:12,560 --> 00:23:20,800
he's like a knight or a KBE or something of the British Empire. And he was working on Algold W.

201
00:23:20,800 --> 00:23:27,760
And Algold W was the first programming language that introduced the concept of records, what we

202
00:23:27,760 --> 00:23:34,320
think of as like classes or structs or whatever. And so you had a record that was a person which

203
00:23:34,320 --> 00:23:39,120
had these things in here. And so when you've got records, you need references to where that

204
00:23:39,120 --> 00:23:43,840
record is held because now it's a collection of data stored on a heap. And so you can see here,

205
00:23:43,840 --> 00:23:49,440
person has a reference to another person, which is their father, mother, youngest offspring or

206
00:23:49,440 --> 00:23:55,120
elder sibling. And so where you've got references, what do you do if there is no father, mother,

207
00:23:55,120 --> 00:24:00,080
youngest offspring or elder sibling? And so Tony Haw went, well, we'll just call that Null.

208
00:24:01,280 --> 00:24:05,760
And so we say if P equals Null, then M. Otherwise, if M equals Null, then P. Otherwise,

209
00:24:05,760 --> 00:24:12,160
do something with P and M and we'll return that back. And at the time, that probably seemed

210
00:24:12,160 --> 00:24:20,320
perfectly reasonable. But ever since then, hands up who has not ever had a Null reference exception

211
00:24:20,320 --> 00:24:28,480
in .NET or Java or any language they've ever programmed in or JavaScript undefined does not

212
00:24:28,480 --> 00:24:35,200
have a method index of or whatever it is JavaScript says. So yes, and Tony Haw calls that is

213
00:24:35,200 --> 00:24:40,640
billion dollar mistake and will quite happily tell you all about it. There's a video on YouTube

214
00:24:40,640 --> 00:24:46,480
of him doing a one hour talk at a conference about how Null happened and why it was a bad idea.

215
00:24:48,400 --> 00:24:56,320
Hartford Center. Sometimes software problems actually cause other problems in the real world.

216
00:24:56,320 --> 00:25:03,360
So the Hartford Center was built in the 1970s. It was one of the first buildings that was designed

217
00:25:03,360 --> 00:25:08,480
using a software CAD package, a computer aided design package. And back in those days, there

218
00:25:08,480 --> 00:25:14,800
was no auto CAD. There weren't these high level things. A CAD package, the engineer and architect

219
00:25:14,800 --> 00:25:20,720
using it would actually program in the algorithms, the formulas for the stresses on various beams

220
00:25:20,720 --> 00:25:26,240
and all this sort of thing. And they built the Hartford Center and it was fine. But the Hartford

221
00:25:26,240 --> 00:25:33,120
Center, I think it's in Connecticut or somewhere in the United States, it snows. It snows a lot

222
00:25:33,120 --> 00:25:39,200
and the Hartford Center was fine until one night it snowed a lot and this happened.

223
00:25:40,080 --> 00:25:45,200
Fortunately, no one was in the building at the time. There had been a concert and everybody

224
00:25:45,200 --> 00:25:51,600
had left the building about four hours before this actually happened. And the problem was that

225
00:25:51,600 --> 00:25:57,920
they put in the calculations for the beams on how much the stresses on them were going to be.

226
00:25:57,920 --> 00:26:04,000
But what they didn't account for is that the roof is slanted like this and you people in Scandinavia

227
00:26:04,000 --> 00:26:09,280
you'll know what happens to snow when it lands on a roof. It kind of evenly distributes itself

228
00:26:09,280 --> 00:26:17,440
like this and then it warms up a bit and it goes boom. And they hadn't accounted for the horizontal

229
00:26:17,440 --> 00:26:23,600
tolerances on these beams. And so it did that and a beam sheared sideways and then that beam

230
00:26:23,600 --> 00:26:30,800
sheared sideways and then the entire roof collapsed just because of one error in programming a CAD

231
00:26:30,800 --> 00:26:37,520
package. That cost them 90 million dollars to put a new roof on the Hartford Center. That's not too

232
00:26:37,520 --> 00:26:45,680
bad. This one's fun. Night capital. I like this one because night capital are a hedge fund and

233
00:26:45,680 --> 00:26:51,120
they don't like hedge funds. Although if you work for a hedge fund and you need some consultancy,

234
00:26:51,120 --> 00:26:57,840
I will happily come and consult for you and my rates are very reasonable by hedge fund standards.

235
00:26:59,440 --> 00:27:04,720
Certainly compared to night capital. What you have to understand about hedge funds is the stock

236
00:27:04,720 --> 00:27:10,320
market, the first stock market was created by the Dutch East India Company. They needed to raise money

237
00:27:10,320 --> 00:27:15,840
to build ships to go to India to steal stuff and bring it back to Europe to sell it. And so the way

238
00:27:15,840 --> 00:27:21,120
they did this was they said we'll sell shares in the expedition and then we go and we steal the

239
00:27:21,120 --> 00:27:27,360
stuff and we bring it back here and then we sell it and then how you get your percentage of our

240
00:27:27,360 --> 00:27:31,200
profits that we make from doing that. And then other people went that's a brilliant way to raise

241
00:27:31,200 --> 00:27:38,000
money to start a company. I'm going to do that as well. And then 400 years later somehow that had

242
00:27:38,000 --> 00:27:45,120
turned into highly optimized programs running in dark pools trading with each other at microsecond

243
00:27:45,120 --> 00:27:52,000
levels skimming fractions of a fraction of a cent off the top of the transaction to try and

244
00:27:52,000 --> 00:27:57,920
make rich people richer while the rest of us got poorer. And this is what night capital were doing.

245
00:27:58,480 --> 00:28:05,520
And in 1996, this was all happening in these things called dark pools. So the hedge funds

246
00:28:05,520 --> 00:28:11,680
and the investment banks and everything created their own sort of shadowy stock markets where

247
00:28:11,680 --> 00:28:15,920
they could do this. And the New York stock exchange went we are missing out on so much

248
00:28:15,920 --> 00:28:20,800
commission. We're going to create our own light pool. And so they did and they called it the

249
00:28:20,800 --> 00:28:26,720
retail liquidity program. And so everybody had to scramble to get their algorithms and their

250
00:28:26,720 --> 00:28:31,520
programs that were running in the dark pools to run on the New York stock exchanges retail

251
00:28:31,520 --> 00:28:37,440
liquidity program. And so night capital basically copied and pasted a bunch of code around the

252
00:28:37,440 --> 00:28:42,800
place and dragged in some modules and all this sort of stuff and threw it into this new retail

253
00:28:42,800 --> 00:28:49,840
liquidity program with about two weeks notice. And it went in there and it started running.

254
00:28:49,840 --> 00:28:58,960
And within four minutes, it had spent a billion dollars. And when they deployed it, it was running

255
00:28:58,960 --> 00:29:05,280
on eight servers and the deployment rolled out, but it only worked on seven of the servers.

256
00:29:05,280 --> 00:29:14,160
And the eighth server continued running this old code that was the buggy code. And so they went,

257
00:29:14,160 --> 00:29:19,280
oh, no, it's spending too much money. A failsafe that was supposed to trigger wasn't working because

258
00:29:19,280 --> 00:29:23,360
it came from a different system and the flag wasn't getting set and whatever was going on.

259
00:29:23,360 --> 00:29:28,800
And they went, well, it must be that this new code has got a bug in it. So we'll roll it back.

260
00:29:28,800 --> 00:29:35,600
And they said, copy the code from the eighth server onto the other seven servers, that'll fix it.

261
00:29:36,480 --> 00:29:43,840
By 28 minutes past nine on the morning that this thing went live, their algorithm had spent seven

262
00:29:43,840 --> 00:29:50,480
billion dollars. And night capital didn't have seven billion dollars. And the rule is you have to

263
00:29:50,480 --> 00:29:57,840
settle within 48 hours. And so they had to essentially bail themselves out. So they sold

264
00:29:57,840 --> 00:30:04,240
all their positions, this entire seven billion dollars worth of positions to Goldman Sachs

265
00:30:04,240 --> 00:30:16,400
for $450 million. $440 million. So, yeah. And then the following year, they were acquired in a

266
00:30:16,400 --> 00:30:23,120
hostile takeover by Goldman Sachs, who kind of went, yeah, you really shouldn't be allowed to do things.

267
00:30:23,600 --> 00:30:29,120
That's fun. I like it when hedge funds lose money. How are we doing? Halfway through, good stuff.

268
00:30:30,000 --> 00:30:38,000
So, bugs in space. Like it pigs in space from the Muppets, but bugs in space.

269
00:30:40,000 --> 00:30:44,960
There have been lots of bugs in space and bugs in space are difficult because you can't sort of

270
00:30:44,960 --> 00:30:51,120
attach, you can't go, how is this going to work in space? I know I'll go into space with my laptop

271
00:30:52,080 --> 00:30:58,160
and set a break. You can't do that. Laptops don't do well in space for a start. So, yeah.

272
00:30:59,120 --> 00:31:06,720
So just a few of these. Mariner 1. This was one of NASA's very first missions. And the computers

273
00:31:06,720 --> 00:31:12,640
in those very, very basic. And so programming was taking mathematical formula and turning them

274
00:31:12,640 --> 00:31:19,040
into machine code. I don't think there was even assembly language, really, for these guys. And

275
00:31:20,000 --> 00:31:25,040
they would take the mathematical formula and literally go, okay, so that would be this and

276
00:31:25,040 --> 00:31:31,200
this and this. And this is what Mariner 1 would have looked like if it had ever made it to space.

277
00:31:31,840 --> 00:31:37,760
But it didn't. And it wasn't the programmer's fault. It was the mathematician's fault. He gave

278
00:31:37,760 --> 00:31:45,600
the programmer a formula that had an R in it. And it should have been the R on the left with a hyphen

279
00:31:45,600 --> 00:31:53,040
over the top of it. And what the hyphen means is smoothed over a period of time. So it's going to

280
00:31:53,040 --> 00:31:58,000
spike up here and down here and down here. But what you want is kind of the average over the

281
00:31:58,000 --> 00:32:04,880
previous 20 samples of whatever this is. But he just left out the hyphen. And so they used R.

282
00:32:04,880 --> 00:32:11,920
And so if you've got a value where it's supposed to be zero and kind of plus one or minus one is

283
00:32:11,920 --> 00:32:18,240
probably okay. Plus two minus two is probably okay. But plus eight is a very bad idea indeed.

284
00:32:18,880 --> 00:32:24,080
And you're not smooth. So eight and then back down to zero and then minus eight and back up to zero.

285
00:32:24,080 --> 00:32:29,360
It's probably okay. That's probably normal. But they thought what they were getting was the average

286
00:32:29,360 --> 00:32:34,640
smoothing. And so when it came through as eight, the guy in mission control went bang and hit the

287
00:32:34,640 --> 00:32:42,480
button that blew up the rocket on purpose. So yeah. If anyone was in Martin Thwaites'

288
00:32:43,040 --> 00:32:47,920
talk on open telemetry or any talks about tracing or metrics or anything like that,

289
00:32:47,920 --> 00:32:52,880
it's really important to make sure that the data, your telemetry data is accurate.

290
00:32:53,760 --> 00:32:57,920
And that you're getting out the number that you think you're getting out. Because otherwise you

291
00:32:57,920 --> 00:33:04,400
blow up your spaceship. And then you have to build another one for $18 million in 1960s money,

292
00:33:04,480 --> 00:33:12,960
which is closer to $80 million today. You think actually the Mariner 1 mission

293
00:33:13,840 --> 00:33:20,720
is credited, that missing hyphen, is credited with the creation, the inspiration of software

294
00:33:20,720 --> 00:33:25,840
engineering as a discipline. That was the point at which people went, hey, maybe we should do

295
00:33:25,840 --> 00:33:30,160
like what those engineers do when they build bridges. And you know, bridges have collapsed and

296
00:33:30,160 --> 00:33:34,160
stuff. But that was when we kind of started applying engineering principles to building

297
00:33:34,160 --> 00:33:41,520
software, which did not save the Mars climate orbiter, which had a similar experience. Although

298
00:33:41,520 --> 00:33:47,280
it did get most of the way to Mars, to be fair, the rocket took off, it got it into orbit, it set

299
00:33:47,280 --> 00:33:54,080
its engines going, and it got to Mars. And then it crashed into Mars, crashed into the surface of

300
00:33:54,080 --> 00:34:00,080
Mars at a very, very high velocity. And there's still a scar that you can see from one of the

301
00:34:00,080 --> 00:34:05,920
other orbiters that went up there. And the reason for this is incredibly simple. It's because Americans

302
00:34:05,920 --> 00:34:18,080
are stupid. And Americans insist on using inches instead of centimeters. Now, NASA are not stupid.

303
00:34:18,080 --> 00:34:24,160
NASA use centimeters for everything. Actually, they use millimeters for everything. So NASA is

304
00:34:24,160 --> 00:34:30,400
like millimeter scale stuff. So they don't say a centimeter, they say 10 millimeters, because

305
00:34:30,400 --> 00:34:35,440
they work with the European Space Agency, they work with Roscosmos, they work with the Chinese,

306
00:34:35,440 --> 00:34:40,240
they work with space agencies all over the world. They work with suppliers all over the world.

307
00:34:40,240 --> 00:34:46,400
You have to be using the same units. And everyone on the Mars orbiter mission was using the same

308
00:34:46,400 --> 00:34:52,400
units. Everyone was using millimeters and centimeters, except Lockheed Martin. Lockheed

309
00:34:52,480 --> 00:35:00,160
Martin were using inches. So to give you a visual idea, if this is me at five centimeters tall,

310
00:35:00,800 --> 00:35:06,880
then this is me at five inches tall. It's quite a big difference. Inches are not centimeters.

311
00:35:06,880 --> 00:35:12,480
And so when the Mars climate orbiter arrived at Mars, its planned trajectory was that it

312
00:35:12,480 --> 00:35:18,880
should have gone into orbit at 226 kilometers above the surface of Mars. And what it actually did

313
00:35:18,880 --> 00:35:25,040
was go into orbit 57 kilometers above the surface of Mars, which meant it got caught in Mars' gravity

314
00:35:25,040 --> 00:35:32,400
and smashed into it. So yes, units are important. So one of the good things about F-Sharp is the

315
00:35:32,400 --> 00:35:39,200
whole units of measure thing. Can we get that in C-Sharp 12 or something, Mads? You're copying

316
00:35:39,280 --> 00:35:46,320
everything else from F-Sharp. So awesome having in the room to say that.

317
00:35:50,320 --> 00:35:58,240
It's not just NASA though. So yes, 327 million pounds, dollars for the Mars climate orbiter,

318
00:35:58,240 --> 00:36:03,120
plus the 18 months that it takes the thing to get to Mars. And then kind of going,

319
00:36:03,120 --> 00:36:05,360
that didn't work. Should we build another one? Yeah.

320
00:36:11,200 --> 00:36:18,400
But the French, the European Space Agency has problems with their own. This is the Ariane 5 launch.

321
00:36:20,400 --> 00:36:25,440
And this is the first ever launch of Ariane 5, and it was a mission called Cluster. It had four

322
00:36:25,440 --> 00:36:31,440
European Space Agency satellites on it. And the tests had all gone perfectly. The

323
00:36:32,000 --> 00:36:37,920
the pressure testing and everything. And then it took off and it soared majestically

324
00:36:37,920 --> 00:36:46,000
into the sky. And then some code that they had copied and pasted from the Ariane 4 control

325
00:36:46,000 --> 00:36:56,000
software, tried to write a 64-bit floating point number into a 16-bit integer variable.

326
00:36:56,960 --> 00:37:04,880
And this caused the boosters on one side to adjust their vertical, their horizontal thrust

327
00:37:05,760 --> 00:37:15,840
a lot. And so the boosters split off the rocket and that happened. And yeah, this was

328
00:37:15,840 --> 00:37:20,240
spectacular. There's actually, there's a talk kind of similar to this one by Kevlin Henney,

329
00:37:20,240 --> 00:37:24,480
where he goes into a lot more detail and he has the code and it's on YouTube. So you can track

330
00:37:24,480 --> 00:37:30,240
that down if you want to know exactly what happened there. But basically they had seven

331
00:37:30,240 --> 00:37:36,880
variables that controlled the flight path to get into orbit. And four of them were guarded.

332
00:37:36,880 --> 00:37:42,160
So if you try to write the wrong type of data into them, you wouldn't be able to.

333
00:37:42,880 --> 00:37:48,880
The one there that caused that, that wasn't guarded because guarding a variable

334
00:37:49,520 --> 00:37:54,400
uses quite a lot of something and they didn't think they could spare it. And so yes,

335
00:37:55,280 --> 00:38:01,040
spectacular. Ariane 5 though, I mean, you know, since then Ariane 5 has been an absolute work

336
00:38:01,040 --> 00:38:05,920
course and it's put so much stuff into orbit. And it's going to have to keep doing it for quite

337
00:38:05,920 --> 00:38:14,320
a while because Ariane 6 has just been delayed again. Enterprise. Half a billion dollars,

338
00:38:14,320 --> 00:38:22,480
the Ariane 5 disaster. That's kind of probably exaggerated. But yeah, it's sort of including

339
00:38:22,480 --> 00:38:26,720
missed missions and people saying, oh no, you're not launching our satellites. We're going to take

340
00:38:26,720 --> 00:38:36,720
these to NASA. You can sort off. So yes. The big rewrite. This was me. This is another one of

341
00:38:36,720 --> 00:38:43,600
my mistakes. Same company with the MedFile Unfucka actually. We had a product that was written in a

342
00:38:43,600 --> 00:38:50,080
language called Gupta SQL Windows and it was dying. And I was, can we rewrite it in .NET?

343
00:38:50,080 --> 00:38:54,400
Please. I've just, I've got this new .NET thing. It's brilliant. Can we rewrite? And they said,

344
00:38:54,400 --> 00:39:00,240
yeah, all right. And so I started rewriting the entire application as a Windows Forms application.

345
00:39:01,200 --> 00:39:06,400
And they had four people working on the old application and me working on the new one.

346
00:39:07,200 --> 00:39:11,440
And so they were adding features and doing all that. And I was trying to catch up to them.

347
00:39:11,520 --> 00:39:18,240
But I was, I was getting there and it was okay. And then 2005, 2006 came along and Microsoft

348
00:39:18,240 --> 00:39:25,920
released WPF. And it was new and improved. And I was, oh no, it's a new thing. Windows Forms is

349
00:39:25,920 --> 00:39:30,800
dead. WPF is so much better and the binding works better and the design is lovely and all this sort

350
00:39:30,800 --> 00:39:36,640
of stuff. It's a shiny thing. I want the shiny thing. And so I decided that I was going to throw

351
00:39:36,800 --> 00:39:44,160
out all the Windows Forms code and, and replace it with WPF. And that did actually cause me to

352
00:39:44,160 --> 00:39:50,000
have a nervous breakdown and take six months off work. And then when I got back to work,

353
00:39:50,560 --> 00:39:55,920
they did a performance review and they gave me a five, which was the worst you could get.

354
00:39:55,920 --> 00:39:58,720
And I went, why? And they said, well, you just took six months off.

355
00:39:59,200 --> 00:40:08,240
So yes, new and improved. Do not just go, ah, shiny thing and rewrite everything

356
00:40:08,240 --> 00:40:13,600
because you think it looks cool. Probably it only cost them a hundred thousand pounds in terms of

357
00:40:13,600 --> 00:40:19,120
what they'd paid me to achieve, precisely nothing. But it did also cost me my sanity.

358
00:40:20,320 --> 00:40:24,960
And the main sort of thing I got out of it is I know not to do that again.

359
00:40:25,920 --> 00:40:33,440
Recursion. This is just a little bugbearer of mine. I happen to read something about

360
00:40:34,000 --> 00:40:40,640
recursion and how recursion is a better pattern than loops. And I just, it's a lie, effectively.

361
00:40:40,640 --> 00:40:46,560
Recursion is loops. It's just a different way of doing it. So if you recurse in a normal application,

362
00:40:46,560 --> 00:40:51,120
you will end up getting a stack overflow error because things go round and round in circles.

363
00:40:51,200 --> 00:40:55,120
And every time it pushes something onto the stack until there's no room left on the stack.

364
00:40:55,120 --> 00:41:02,480
And so to avoid this, there is a thing called tail call elimination where the compiler recognizes

365
00:41:02,480 --> 00:41:08,000
that that's what you're doing and eliminates that tail call and makes something happen in a different

366
00:41:08,000 --> 00:41:16,080
way. So to avoid this stack overflow exception, so if you look at this, this will eventually

367
00:41:16,080 --> 00:41:23,040
cause a stack overflow because this is 32-bit.net. x86.net framework doesn't do tail call

368
00:41:23,040 --> 00:41:30,720
elimination. And so the jit just produces this code here, which calls countdown and calls countdown.

369
00:41:30,720 --> 00:41:37,440
So if you call this with a big enough number, like in 32.max value, you will get a stack overflow

370
00:41:37,440 --> 00:41:45,280
exception. With the 64-bit jit, they introduce tail call elimination. And so that produces this

371
00:41:45,280 --> 00:41:58,320
code. And you can see that L0014 jump L0007. So every time someone goes, all recursion is a

372
00:41:58,320 --> 00:42:05,920
far superior and computer science-y and functionally way of doing loops, point out to them that that's

373
00:42:05,920 --> 00:42:15,040
a go-to. And I can prove it's a go-to because there's the same code written with a go-to

374
00:42:16,080 --> 00:42:22,000
and yeah, look, there you go. We've got jump short L double. It's a little bit different,

375
00:42:23,040 --> 00:42:30,000
but it's one less instruction than the recursion version. And we do our jump short L07

376
00:42:30,720 --> 00:42:37,040
at the end there. And yeah, so recursion can go jump in a leak as far as I'm concerned.

377
00:42:37,600 --> 00:42:45,680
I would like to thank Andrei Shekin, AshMind on Twitter for sharplab.io. If you've never seen

378
00:42:45,680 --> 00:42:52,320
sharplab.io and you do C-sharp development, it's brilliant. You paste some C-sharp code into it.

379
00:42:52,320 --> 00:43:00,320
It'll show you the C-sharp compilers sort of the C-sharp that it generates for your properties

380
00:43:00,320 --> 00:43:05,200
and async methods and the state machine and all this sort of stuff. It'll show you the IL that's

381
00:43:05,200 --> 00:43:10,080
generated and then it'll show you the actual machine code that's generated by the JIT. It's

382
00:43:10,080 --> 00:43:18,000
fantastic. JavaScript. Any JavaScript fans in the room? I'm about to upset anybody because this

383
00:43:18,000 --> 00:43:29,040
really was. It was a mistake. That was one of the biggest ones. And the thing is it was Netscape

384
00:43:29,040 --> 00:43:35,920
version 2. And somebody stuck their head around Brendan Eich's door and went, Brendan,

385
00:43:35,920 --> 00:43:40,080
can you knock up a quick language that we can stick in the next version of our browser

386
00:43:40,080 --> 00:43:44,560
so that when you put the mouse over an image, we can change it to a different image?

387
00:43:44,560 --> 00:43:51,600
All right, cheers. How long? A week. Cool. And so a week later, Brendan goes back with scheme,

388
00:43:51,600 --> 00:43:55,760
basically, because if you need to implement a programming language in a week, then you write

389
00:43:55,760 --> 00:44:00,400
a Lisp because they're the easiest programming language to implement. So we went, hey, we've

390
00:44:00,400 --> 00:44:06,080
got scheme to run in the browser. And they went, oh, no, no, nobody does Lisp anymore. No, we don't

391
00:44:06,080 --> 00:44:11,200
like all those parentheses. You know what's really hot at the moment is that Java thing. Why don't

392
00:44:11,200 --> 00:44:16,480
you make it look more like Java? And so rather than sort of patch the holes and the problems

393
00:44:16,480 --> 00:44:22,080
and everything else, Brendan made his scheme look like Java, which involves changing prefix

394
00:44:22,080 --> 00:44:29,440
operators to infix operators and that sort of stuff. And the other thing was they wanted it to

395
00:44:29,440 --> 00:44:35,120
be possible so that the kind of people who were just hand coding HTML and creating personal home

396
00:44:35,120 --> 00:44:41,200
pages could hand code some JavaScript to achieve these effects. And so they put all sorts of things

397
00:44:41,200 --> 00:44:48,800
in there to try and help these developers. Like if you said if this thing is equal, equal to this

398
00:44:48,800 --> 00:44:53,840
thing, and there were two different types, then JavaScript would go, well, what if I made them

399
00:44:53,840 --> 00:45:01,760
the same type and then that would work, wouldn't it? Yeah, yeah, that would work. And we ended up

400
00:45:01,760 --> 00:45:08,080
with this absolute abomination of language. But the biggest problem of all is that it's shipped

401
00:45:08,720 --> 00:45:16,320
and then people started using it. And they can't, you can't fix it. You can't fix double equals

402
00:45:16,320 --> 00:45:22,320
in JavaScript. So we have triple equals and bang double equals. And apart from anything else,

403
00:45:22,320 --> 00:45:29,200
that's wrong. So it's just, it should be bang triple equals. Or I don't know. But anyway,

404
00:45:29,200 --> 00:45:34,000
I just think if someone poked their head around Brendan Eich's door and said, hey, Brendan, can

405
00:45:34,000 --> 00:45:40,800
you create the language that will be used for 90% of all programming over the next 50 years and run

406
00:45:40,800 --> 00:45:50,160
on everything from SpaceX shuttles to the internet, to watches, to smartphones, to everything else,

407
00:45:50,160 --> 00:45:58,240
how long? Brendan would probably have said, oh, two weeks. What's a smartphone?

408
00:46:00,000 --> 00:46:06,240
So yes, here are some JavaScripty things. An empty array equals not an empty array.

409
00:46:07,040 --> 00:46:13,360
According to type coercion, no idea why that is, but those two things are the same.

410
00:46:14,480 --> 00:46:21,840
I think it's that empty array becomes object, which is not null, therefore, it's true. And not

411
00:46:21,840 --> 00:46:28,000
empty array, it coerces the array to zero, which is the size of the array, and then knots it so it

412
00:46:28,000 --> 00:46:34,480
becomes true. So that's true equals true equals true. Who can spot what's wrong with this line of

413
00:46:34,480 --> 00:46:48,240
code or why it does what it does? So in the middle here, plus, plus. So because JavaScript does

414
00:46:48,240 --> 00:46:54,080
type coercion, what it's actually trying to do here is B plus A plus, and then we've got this

415
00:46:54,080 --> 00:47:00,080
plus floating here, and it goes, well, I'm already here. So this must mean plus A. So we're doing

416
00:47:00,080 --> 00:47:06,960
the positive value of A. I'll try and coerce A to a number so that I can, oh, no, it's not a number,

417
00:47:06,960 --> 00:47:12,960
so it becomes nan. Type of nan, incidentally, is number. So not a number is a number.

418
00:47:14,240 --> 00:47:19,200
And then we add the other ray onto it, and so B plus A plus plus A plus A is banana,

419
00:47:20,400 --> 00:47:28,640
because, of course, it is. And Douglas Cropford wrote a book called JavaScript, The Good Parts.

420
00:47:29,440 --> 00:47:34,400
Have you ever seen the photograph of JavaScript, The Good Parts next to JavaScript, The Definitive

421
00:47:34,400 --> 00:47:41,280
Guide? That's quite a pot. I took that photograph, and I put that on Twitter, and this was like back

422
00:47:41,280 --> 00:47:53,200
in 2012 or something, and it got 45,000 likes, and I was, yeah, I'm famous. But yes, the difference

423
00:47:53,200 --> 00:47:57,440
between JavaScript, The Good Parts and JavaScript, The Definitive Guide is basically the DOM.

424
00:47:57,520 --> 00:48:03,120
It's the document object model that is the bad parts of JavaScript, according to Douglas Cropford.

425
00:48:03,120 --> 00:48:09,680
And he's kind of got a point, because document.all, which is all the elements in the document,

426
00:48:09,680 --> 00:48:14,480
is an instance of object. But if you do type of document.all, it tells you it's undefined. So

427
00:48:14,480 --> 00:48:18,480
you go, all right, does document.all equal, equal, equal undefined? And it says, no, it doesn't.

428
00:48:18,480 --> 00:48:22,320
And you go, does document.all equal, equal, equal null? And you go, no, it doesn't equal that,

429
00:48:22,800 --> 00:48:26,480
either. You go, well, if you type coercive, does it equal, equal null? And the DOM goes, yeah,

430
00:48:26,480 --> 00:48:35,440
yeah, it does. And they can't fix it. There is code in the world that relies on that behavior.

431
00:48:36,480 --> 00:48:42,400
And so Java, I mean, I don't know what the cost of JavaScript is, but the fun we have with it is

432
00:48:42,400 --> 00:48:51,520
priceless. And yeah, I'm just quite down with that. So I would like to have some honorable

433
00:48:51,600 --> 00:49:00,400
mentions here. Heartbleed, that popped up a few years ago. This was a serious bug in OpenSSL,

434
00:49:01,280 --> 00:49:06,240
which essentially rendered the whole thing completely vulnerable to attack. And of course,

435
00:49:06,240 --> 00:49:15,600
OpenSSL is used by everybody, Google, Microsoft, Amazon, Facebook, Apple, everybody uses OpenSSL.

436
00:49:16,400 --> 00:49:23,360
How could this be allowed to happen? And the XKCD cartoon of the entire modern infrastructure of

437
00:49:23,360 --> 00:49:29,920
the world, and a random open source project somebody in Nebraska has been factlessly maintaining

438
00:49:29,920 --> 00:49:36,240
since 1996. That was OpenSSL. It was just like this one guy who was maintaining this thing,

439
00:49:36,240 --> 00:49:41,840
that multi-trillion dollar companies were relying on, and there was a bug in it. And none of them

440
00:49:41,840 --> 00:49:46,960
had thought to kind of give this guy's code a read or check it out or anything like that.

441
00:49:46,960 --> 00:49:51,680
And then this year, we had Log4j. Because it turns out that one of the things you can put into

442
00:49:51,680 --> 00:50:00,000
Log4j is, hey, log this. Log this call to another service. And while you're logging this call to

443
00:50:00,000 --> 00:50:06,320
another service, pass it some information. Again, Martin's thing earlier on about baggage. And Log4j

444
00:50:06,800 --> 00:50:13,200
so you could put something into a text field, and then Log4j would log what you'd put into

445
00:50:13,200 --> 00:50:18,800
that text field, except it was a URI that said execute a Java enterprise bean. There's that

446
00:50:18,800 --> 00:50:23,680
word enterprise again, on this other server. And just pass it all the data that we've got

447
00:50:23,680 --> 00:50:31,440
attached to this log while we're at it. And there is not a single Java application in the world

448
00:50:31,440 --> 00:50:38,400
that is not using Log4j. So that was fun. And then they fixed that one. I mean, that wasn't in

449
00:50:38,400 --> 00:50:44,400
Java. It was in a library that every Java application uses, but it wasn't in Java itself.

450
00:50:44,400 --> 00:50:52,480
So Java looked okay for literally two weeks. And then somebody looked at Java's actual in the box

451
00:50:53,120 --> 00:50:59,920
ECDSA implementation. So ECDSA is a very complicated algorithm, and it involves three numbers.

452
00:51:00,880 --> 00:51:11,040
And one number is the result of a sum. And the other two numbers, if you multiply the first

453
00:51:11,040 --> 00:51:17,840
number by the second number, then it should equal the third number. And so that was fine.

454
00:51:18,720 --> 00:51:24,160
But it turns out that you pass these three numbers along with your ECDSA token. This might be

455
00:51:24,240 --> 00:51:31,840
a JSON web token or a SAML token, something that you've encrypted using the ECDSA algorithm.

456
00:51:31,840 --> 00:51:41,120
And if you pass it in, and so you've got the numbers, I think they were P, R, and Q, P, and R.

457
00:51:41,120 --> 00:51:49,120
And so it's like P times R equals Q. And so if you set Q to zero and R to zero, then it did P times

458
00:51:49,120 --> 00:51:55,520
Q. And does that equal zero? Yes, it does. And so literally, just by sending a malformed ECDSA

459
00:51:55,520 --> 00:51:59,920
signature with these two values set to zero, you could get Java to go, yeah, that's fine.

460
00:52:00,720 --> 00:52:05,600
That was in the actual, that's like the base class library. That was in the JDK,

461
00:52:05,600 --> 00:52:13,600
but that one came along. That was fun. So we've seen some fun examples. We've seen some very,

462
00:52:13,680 --> 00:52:23,680
very expensive examples. I would like to finish off with one example where we basically got lucky

463
00:52:23,680 --> 00:52:30,800
that, yeah, programmers make all these mistakes. We're fallible, and we're sort of hubristic,

464
00:52:30,800 --> 00:52:37,840
and we're arrogant, and we do stupid things. Fortunately, the rest of the world knows that,

465
00:52:37,840 --> 00:52:46,320
and they don't trust us as far as they could spit a rat. And so the Soviet early warning system

466
00:52:47,920 --> 00:52:55,680
in 1985 was switched on and almost immediately reported that America had launched

467
00:52:55,680 --> 00:53:05,360
five missiles against the USSR. It hadn't. What the image recognition software running on,

468
00:53:05,360 --> 00:53:11,680
I don't even know what kind of computers the Soviet Union had in 1985. I'm guessing they

469
00:53:11,680 --> 00:53:19,840
probably involved rocks and bits of elastic, but you know, it wasn't great. But when they've

470
00:53:19,840 --> 00:53:24,880
launched five, it was actually the sunlight glinting off clouds, but that was incorrectly

471
00:53:24,880 --> 00:53:33,200
identified as the rocket trail from intercontinental ballistic missiles. And this man, Stanislav Petrov,

472
00:53:33,200 --> 00:53:40,720
Lieutenant Colonel Stanislav Petrov, on the 26th of September, sorry, 1983, not 1985,

473
00:53:40,720 --> 00:53:46,080
was told that five missiles were inbound to the Soviet Union from the United States,

474
00:53:46,080 --> 00:53:51,360
and he should immediately launch the Soviet Union's response. He should immediately launch

475
00:53:51,360 --> 00:53:56,480
what turned out to be all four of their intercontinental ballistic missiles. And if he had

476
00:53:56,480 --> 00:54:01,360
done that, then the American early warning system would have seen those, and America

477
00:54:01,360 --> 00:54:06,000
would have launched all the Minutemen missiles that Eisenhower had built, because he thought that

478
00:54:06,000 --> 00:54:12,400
the Russians had 4,000 ICBMs, they didn't, they had four, but he thought they had 4,000. So America

479
00:54:12,400 --> 00:54:19,200
had 5,000, and they would have launched all of them. And that would have been game over humanity,

480
00:54:19,200 --> 00:54:25,440
most life on this planet. And then in another 50,000 years, maybe there'd be a building here

481
00:54:25,440 --> 00:54:32,160
with a software conference with highly evolved cockroaches talking about programming's greatest

482
00:54:32,160 --> 00:54:40,480
mistakes. But Stanislav Petrov said, nah, don't believe that. I'm not launching missiles based

483
00:54:40,480 --> 00:54:47,920
on what a computer says, it can go stuff itself. And so we did not get World War Three on September

484
00:54:48,480 --> 00:54:55,360
26, 1983, because there was a human between the computer and the missile launch system.

485
00:54:55,360 --> 00:55:02,640
And thank God for that, because that very nearly cost all known life in the universe.

486
00:55:02,640 --> 00:55:08,160
And that's how serious some of this stuff is. So yeah, think about that as you go back to work

487
00:55:08,160 --> 00:55:14,240
tomorrow or next week, and maybe just be a little bit more careful. Thank you very much for listening

488
00:55:14,240 --> 00:55:23,760
to me. And I will see you next time.

