start	end	text
0	14360	In Sundarst, in 1853, a boy named Vincent van Gogh was born.
14360	23920	In 1880, at the age of 27, he decides to become an artist.
23920	30520	In his early years, he taught himself to draw and paint, but his style changed significantly
30520	34920	under the influence of Impressionism.
34920	42520	His career was very short, lasting between 1880 and 1890.
42520	48920	Quoting the Britannica biography on Vincent van Gogh, his palette at last became colorful,
48920	55280	his vision less traditional, and his tonality lighter, as may be seen, is one of his first
55280	59440	paintings of Montemarte.
59440	67000	By the summer of 1887, he was painting in pure colors, using broken brushwork, and at
67000	70120	times what's called pointillistic.
71120	80120	Finally, by the beginning of 1888, van Gogh's post-impressionist style had crystallized.
80120	86720	The main painting technique associated with van Gogh is something called Impasto, where
86720	92760	the paint is applied directly onto the canvas and then spread around.
92760	99160	It can even be mixed together, using other paints and sometimes your very own fingers.
99160	103200	Very pretty.
103200	110880	This gives the painting a thick, three-dimensional texture, and the paint itself is undiluted.
110880	115280	A common practice is to work the paint as little as possible, because the more you
115280	122560	touch it and move with it, the duller and flatter it becomes with each stroke.
122560	128160	The most famous example of this is Starry Night, 1889.
128160	133120	Coding again the van Gogh experience, had the painting been done with flat paint, it
133120	136680	would not have been the memorable piece that it is.
136680	141640	Okay, now I have taught you something.
141640	142640	It's time for a quiz.
142640	143640	Who's ready?
143640	147080	Lock the doors.
147080	149760	Is this a painting by van Gogh?
150240	153040	Give me hands for those who think it's a painting by van Gogh.
153040	154040	Nobody.
154040	155560	I have taught you well.
155560	158760	This is Adamon Breen skating on the Frossel, I'm still a rival.
158760	161320	Even not even the same centuries.
161320	162320	Still dots though.
162320	164280	Still dots.
164280	166120	Is this a painting by van Gogh?
166120	167120	Give me some hands.
167120	170320	Oh, again, I have taught you very well.
170320	176400	This is Vincent van Gogh, the farmhouse in Provence, 1888.
176400	180160	Is this a painting by van Gogh?
180160	184400	Huh, any hands?
184400	185400	Scattered hands.
185400	186400	All right.
186400	191480	I mean, yeah, could be early work, could be like inspired by other painters.
191480	192480	That's fine.
192480	193480	No, no, though.
193480	194880	Still touch.
194880	203240	But in the area, so Jonathan Bartholth, town path, all right, is this a van Gogh?
203240	207040	Oh, again, scattered, okay?
207040	209640	Yes, this is van Gogh.
209640	216400	You can see the brushwork on the head of the crab is disjointed, if you think of it that
216400	217400	way.
217400	218400	Crab on its back.
218400	219400	Poor crab.
219400	220400	1888.
220400	223480	Okay, good work.
223480	224480	So hi.
224480	230000	My name is Ola Favogh, I'm a senior software developer at TotalSec AS.
230000	232280	If you don't like this talk you can yell at me on Twitter.
232280	236640	People seem to enjoy doing that.
236640	239440	So I work for a company called TotalSec here in Norway.
239440	243800	We are a consultancy and teaching training company.
243800	246840	So again, if you like our work, please hire us.
246840	250080	We do training as we did here at this conference.
250080	251080	Good stuff.
251080	255200	So this talk is titled learning rust the wrong way.
255200	262000	So the reason why I named the talk that way is, yeah, it is in part about rust.
262000	263960	But it's also about learning.
263960	266840	So I hope you will enjoy.
266840	272840	So what's wrong with knowing what you know now and not knowing what you don't know until
272840	275000	later, right?
275000	279000	I love coding philosophers, which is Winnie the Pooh.
279000	282920	Good, good stuff.
282920	285400	So what's going on here?
285400	289680	So yeah, as you get my guest by the title of the talk and the introduction, this, yeah,
289680	292320	this isn't one of my normal talks.
292320	295720	The structure itself is a bit of an experiment on my end.
295720	298560	So let me know how you think about it.
298560	301160	Yes, you will learn some rust.
301160	303640	It's kind of enough for me to make a point.
303640	306880	But you will also learn about learning the wrong way.
306880	313640	And yeah, the talk might have a point, but we will go places before we get there.
313640	315120	Everybody ready?
315120	316120	Accepting?
316120	317120	Wonderful.
317120	318120	Wonderful.
319040	325180	So since the title was Wrong Ways to Learn Rust, let's do actual wrong ways to learn
325180	326680	rust, right?
326680	329000	Because let's be literal here.
329000	332040	So at least we will have that covered.
332040	333720	While skydiving.
333720	338160	No.
338160	340840	You will not learn rust while skydiving.
340840	343840	Even though this person might be having fun.
343840	344840	No.
344840	348400	I do not recommend learning rust while skydiving.
348400	352600	Next example, as an 18th century aristocrat, since we'll be talking about the paintings
352600	355920	from the 18th century, no, not with this.
355920	360520	But for some reason, they have Windows 11 on that laptop.
360520	365160	So not recommended, all right?
365160	368240	Just to give a talk at a technical conference.
368240	370240	We can skip this one.
370240	373160	All right.
373160	374160	So what is rust?
374360	375520	Let's begin with that.
375520	381520	So it's a programming language that focuses on performance, safety, and productivity.
381520	383600	That's kind of their guiding light.
383600	385640	It looks kind of like this.
385640	387160	So here I'm defining a function.
387160	389520	Here's the main function.
389520	390840	Here I'm defining a variable.
390840	393280	How is the visibility for those in the back?
393280	394280	Okayish.
394280	395280	Good.
395280	396280	All right.
396280	397960	So I'm creating a variable called float.
397960	402760	It is of F64, which is the double from us in other languages.
402760	407480	The value of 42, you don't have to put an F score.
407480	408920	Here I'm creating a variable.
408920	412880	So I'm saying let the mood, so it's a value.
412880	414880	Because in rust, it's cons by default.
414880	419360	So you have to say that the value is movable, so you have to say let mood.
419360	421440	I can ask a question about the float.
421440	422840	No parentheses needed.
422840	423960	Very good.
423960	431600	I can then mutate the value, and then I can call print line exclamation point and similar
431600	432600	formatting style.
432600	436920	So the print line with the exclamation point is from something called a macro in the language.
436920	439160	So if you see these, they are macros.
439160	441600	They are defined in a little bit different way.
441600	447160	A way of thinking of them is, like, what if C macros had types and also looked more
447160	448160	like functions?
448160	450160	But in a way.
450160	451160	Yes.
451160	452160	Good.
452160	461240	So 2006 personal project by a Mozilla employee called Graydon Horpe, 2009 turned into a Mozilla
461240	462960	sponsored project.
462960	469480	2011, we have the first bootstrap version, which is rust compiling rust.
469480	472600	And then version 0.1 in 2012.
472600	475360	So it is a new language, but it's, again, not that new.
475360	479200	Like, when you think of new languages, that's like stuff coming out yesterday.
479200	483000	So at least the idea has been around since, like, 2006, seven, eight, nine, that kind of
483000	484000	thing.
484000	485000	Right?
485000	486000	Good.
486000	488240	So more code examples here.
488240	489400	I have main.
489400	490400	I'm creating a value.
490520	491520	Here's an integer.
491520	492520	I32.
492520	499240	So the language talks a lot about borrowing and what is alive and what is not alive and
499240	502480	what can you mess with while you are programming.
502480	508320	So here I'm going to borrow my value into the function borrow value.
508320	509320	All right?
509320	510800	So I have the little reference value there.
510800	512480	I can borrow it again.
512480	513600	That's fine.
513600	517280	And I can print out those two, those two values.
517280	521760	So notice that I'm borrowing into the function, but I'm getting a value out of the function.
521760	523680	So the function looks something like this.
523680	525840	So here we define a function borrow value.
525840	527160	Again the type is on the end.
527160	531400	It is the reference of I32 and I'm returning an I32.
531400	532400	Good.
532400	536880	I can create a mutable value within it, which is a copy of the borrowed value.
536880	539320	I can change it in some fun ways.
539320	543880	And then returning a value from a function usually looks like this, which is like the
543880	548600	last expression, the last statement within the line and with no semicolon.
548600	550520	You can do the return.
550520	554240	So for things like early exits, like if you do an if something, something you want to
554240	556040	return out, you can do that.
556040	558040	That's fine.
558040	559040	Good.
559040	562280	Well, what happens if I do this?
562280	566560	So here I am borrowing the value mutably.
566560	572160	So I want the mutable reference to the value or as in C++, just a reference.
572160	575160	Because the thing we had before is a const reference.
575160	577160	All right.
577160	578160	What happens then?
578160	579160	Any hands now?
579160	582160	Since I've been training you on the hands.
582160	585520	It doesn't work.
585520	587080	Does not work.
587080	589440	So here's the main thing.
589440	591440	We're looking at line 11 there.
591440	594120	New value, borrow value, and we're sending in reference.
594120	596040	Types differ in mutability.
596040	597280	The blue line might not be visible.
597280	598280	I can read it out.
598280	600480	Arguments to this function are incorrect.
600480	606720	We expected a mutable reference, so ref mutify32, but we found the regular reference.
606720	613480	So this has to match, which is like one of the early walls you will hit with the language.
613480	614480	Good.
614480	618080	So if I have another main, I have my value and how much.
618080	619280	So my value is mutable.
619280	621320	How much is not mutable?
621320	626960	So here I am sending in my value into the function as a mutable reference.
626960	633200	You can now, the mutate value is allowed to change the value and how much I'm just sending
633200	634200	it by reference.
634200	636640	By the way, I don't have to send it in as reference.
636640	641760	I can send it in a copy, but I'm just showing you the referencing part of it.
641760	644960	And then I can print out my value, and it will have changed.
644960	651200	So I take value in as mutable, I32, I take in how much as a reference to I32, I change
651200	652200	the value.
652200	653480	We are happy.
653480	654480	This is fine.
654480	656640	I mean, fine, not fine.
657640	661480	The language is happy with you, basically, the sentences.
661480	664640	So what if I change this to this?
664640	671560	So this is a thing in C++, which is the, like, this is a problem people have.
671560	676120	And we have to learn, like, in what order things are evaluated, like, oh, it's from
676120	680320	the left, from the right to the left for the arguments and all these kinds of things.
680320	687200	So here, I'm sending in a mutable reference of my value, and then I'm also sending a reference
687200	689080	to my value.
689080	692480	But within the function, they are a different variable, but they're referencing the same
692480	693480	value from the outside.
693480	696440	So again, hence, what's going to happen?
696440	697440	Yes.
697440	701600	Compiler error, that's right.
701600	708600	So you are asking for mutability from one variable, you're asking for a non-mutability
708600	712200	from another variable, but it happens to be the same variable.
712200	719920	So think of the single writer, multi-reader locks that we have, where you can, like,
719920	723760	when you can only have one writer to a variable, but you can have many readers.
723760	731560	So imagine a programming language where every single variable is an MSRV lock, not the
731560	733480	actual lock, but the language feature.
733480	734480	So yeah.
734480	740200	Any mutable borrow occurs here while we have a mutable borrow for the first argument.
740200	742200	This won't work.
742200	743200	Cool.
743200	746200	Let's talk about baseball.
746200	748680	Who likes baseball?
748680	749680	Yeah?
749680	751680	More for American sport, maybe?
751680	756280	So hitting a baseball is a relatively complicated skill.
756280	760000	You need speed to recognize what kind of ball is being thrown at you, you need precision
760000	765240	to hit the ball, and strength to make sure it goes as far as possible.
765240	773520	In 2018, the batting average was .248, which means that the average baseball player had
773520	779180	a 24.8% chance to hit the ball, okay?
779180	783280	This is not per ball thrown, but for the entire attempt.
783280	785360	How many balls are being thrown at the person?
785360	789440	Some of them can be strikes, some of them can be what's called balls.
789440	796880	So there is a bit more to it, but that's the general idea of ball on the way.
796880	802120	So Cal Poly Mustangs, or a baseball team that represents the California Polytechnic State
802120	803120	University.
803120	810840	The team was founded in 1948 and have competed in what's called the Big West Conference since
810840	815720	1997, and they even won it in 2014.
815720	824000	In 1994, the university published a paper by Hall Dominiques and Caravazos called Contextual
824000	831120	Inference Effects with Skilled Baseball Players, and the reference is also down there if you're
831120	833680	looking at this later on.
833680	838800	The study took a group of baseball players and measured their batting averages.
838800	845160	The idea was then to give them extra batting practices for six weeks.
845600	847680	The baseball study.
847680	850920	They were split into three groups.
850920	854800	One of the groups got thrown balls in a structured order.
854800	858320	15, first of them, were fast balls.
858320	863840	The next 15 balls in the practice were curve balls, the next 15 were change-ups.
863840	869120	A change-up is a ball that starts out looking like a fast ball, but becomes a curve ball
869120	870120	the other way around.
870120	874320	The idea is that it changes halfway.
874320	879240	They were always thrown in this order, and the players always knew what type of ball
879240	881800	was being thrown next.
881800	886600	This is sometimes called blocked practice, where you split the exercise into similarly
886600	890200	structured blocks.
890200	902760	The second group got the same number of baseballs, but the order was still 45, but the order
902760	903760	was random.
903760	905440	They had no idea what ball was next.
905440	910320	Maybe they knew the last one, if they were counting, but anyway.
910320	917960	Then there was a control group who did not get any extra practice.
917960	920320	Let's look at the results.
920320	922520	What do you think happened?
922520	925520	Think about what kind of practice this was.
925520	928160	One group got, they knew what they were getting.
928160	931760	I can know I can practice for one of the balls.
931760	932880	I will then practice for that.
932880	934880	The other group had no idea.
934880	936880	There's a ball happening.
936880	942160	Then the third group got nothing, so we have a control group.
942160	946600	After the six weeks, there was another test, so we had a test at the beginning, six weeks
946600	951360	and then another test, where they got 45 random balls.
951360	954640	The control group improved by 6.2%.
954640	958720	People are getting better, or there's some random variation in how you're testing, so
958720	965440	you can ignore the 6%, or you can reduce the results by 6%.
965440	969800	The blocked group, which is they know what they're getting, they improved by 24.8%.
969800	973320	It's pretty nice.
973320	976320	What do you think the random group hit?
976320	979480	Any guessers around the blocked?
979480	980480	The same?
980480	981480	56.7%.
981480	982480	What?
982480	995080	They don't know what they're practicing for, they get some stuff, and it's like they practiced
995080	998240	for twice the amount of time than the blocked group.
998240	999240	What's going on?
999240	1002480	This is weird.
1002480	1006360	Some might say, shouldn't the blocked practice have helped more?
1006360	1009800	Because in the random practice, you don't know what you're practicing for.
1009800	1015640	You have no way to prepare any sort of mental model or muscle memory for the throws that
1015640	1018400	are coming.
1018400	1021400	We'll get into this a bit later.
1021400	1023280	What's going on here?
1023280	1029080	I wanted to learn Rust, the programming language, not the chemical process.
1029080	1033320	I had the idea that I am a programmer, right?
1033320	1036080	I have certain skills.
1036080	1039480	I had some experience with programming, I think.
1039480	1042680	Those skills should transfer.
1042680	1048960	Learning another language, like really learning it, should be easy, because I have no C++,
1048960	1053880	I know JavaScript for crying out loud.
1053880	1060320	Doing the next one should be easy, right?
1060320	1066240	This is not a jab at the idea that Rust is difficult, because I don't think that matters.
1066240	1068400	That's not the point here.
1068400	1074120	Rust is a jab at my hubris, so if you want to do a jab at my hubris, you can do that.
1074120	1075120	Enjoy it.
1075120	1081960	What I found that, I actually didn't learn that much of Rust until I really sat down
1081960	1087560	and I really sunk my teeth into it.
1087560	1094440	Doing a tutorial here or there, doing a video lecture, no, didn't help at all.
1094440	1095440	Why?
1096040	1098760	So as a curious person, I wanted to know why.
1098760	1104320	So instead of learning more Rust, I wanted to learn about why I wasn't learning more
1104320	1105320	Rust.
1105320	1110600	I think this is called yak shaving for some people, but at least you will enjoy the fruits
1110600	1112040	of that labor.
1112040	1117040	So I sat down and I read books and I studied papers like these ones.
1117040	1124760	I wanted to know why when you have a skill beforehand, it doesn't transfer that well.
1125120	1131080	It's not until you actually sit down and work on it, only then it actually works.
1131080	1134280	So let's talk about Pokemon.
1134280	1137880	Okay, okay, and Rust, and Rust.
1137880	1144320	So after going through these exercises that cover the basics of Rust, I used that exercise
1144320	1148160	called Rustlings to begin with, very good to recommend them.
1148160	1153320	I started to look at my older projects that I had made in C++, so with the idea that I
1153360	1155400	would just convert them over.
1155400	1156680	I have a skill here.
1156680	1159000	I want to see how this looks in the other language.
1159000	1163360	I can compare and contrast very scientist.
1163360	1165640	So and yeah, this is a great technique.
1165640	1169240	If you're doing this, if you have an older project, if you know another language, you
1169240	1171040	should convert stuff over.
1171040	1174600	So now you have to take a Pokemon quiz.
1174600	1175600	No.
1175600	1179240	So the general idea, the only thing you have to know about Pokemon is that they are of
1179240	1181240	a certain type.
1182160	1185920	There are probably thousands, hundreds, whatever.
1185920	1186920	But they are of a certain type.
1186920	1189840	There could be a fire Pokemon, a water Pokemon, yada, yada.
1189840	1196360	And if a fire Pokemon attacks a grass Pokemon, they do twice the amount of damage.
1196360	1202360	If an electric Pokemon attacks, let's say, a dark Pokemon, which is one of the types,
1202360	1203880	they do half damage.
1203880	1207080	And for the black squares, they do no damage.
1207080	1208080	That's the only thing you have to know.
1208120	1209400	Now you are a Pokemon expert.
1209400	1210400	Enjoy.
1211880	1220800	So what this means is, so I made a project, I think now 10 years ago, that takes where
1220800	1226080	every pixel on the grid, I will show you a grid in a bit, is a Pokemon of a certain
1226080	1227080	type.
1227080	1232600	It will look around the grid, look for other Pokemons, and then do an attack, do some
1232600	1233600	damage.
1233640	1238800	If the Pokemon you attacked dies, and let's say you are an electric Pokemon, they will
1238800	1240480	then turn into an electric Pokemon.
1242480	1243480	It's kind of like this.
1244480	1246280	Happy how well the GIF looks in this.
1247280	1248560	So this is the C++ version.
1250080	1253640	And this is also, I'm going to show you the Rust version later on, but it will look quite
1253640	1254640	a bit different.
1254640	1258600	But I had a different parameter for the GIF that I had, but yeah, it looks pretty, right?
1259720	1260960	They're growing, they're shrinking.
1261600	1263000	Yeah, Pokemon attacking.
1263640	1265440	So let's look at the C++ code.
1266040	1268400	And yeah, this is from 10 years ago, so you can totally make fun of me.
1268480	1269480	That's fine.
1270200	1275840	So you have an X coordinate, which is the where you are on the X grid, on the Y
1275840	1279280	coordinate, same grid size, because it's a one by one grid.
1280440	1285400	The idea is that you have an array of a ray of Pokemon.
1286240	1290560	You will then get the attacker, which is the first Pokemon, you get a reference to
1290560	1294480	it, and then you find out who your weakest neighbor is.
1295040	1298000	So you take, you create a position out of your position.
1298640	1303680	You have an out variable, yes, out variable, 10 years ago, off the enemy
1303680	1305840	position, you have a function called weakest neighbor.
1306520	1312200	You take in your position, the enemy position, and the list of the Pokemon, then
1312200	1315160	you will get out the weakest Pokemon around you.
1316240	1318200	Let's, you get the position for that Pokemon.
1318640	1321080	Let's then get that Pokemon itself, and then you fight.
1322080	1322800	Simple enough, right?
1323360	1326760	Where you are, who is the weakest, get a reference to it, fight.
1327400	1327720	Cool.
1329440	1330360	This is the Rust version.
1332480	1334280	So in the Rust version, the colors are correct.
1335080	1336520	So yellow is lightning.
1336880	1339200	The purple one is dark, I think.
1339760	1340440	I don't know the other.
1341000	1341960	Green is grass, maybe.
1342520	1343080	It's very pretty.
1343920	1344360	I like it.
1345080	1346240	Yeah, it has other parameters.
1346240	1347200	I think it's running faster.
1347320	1349520	So these are more generations than the other one.
1350280	1353440	Okay, so let's implement that in Rust.
1354640	1359000	So a Pokemon is, you have certain health and you can do a certain amount of damage.
1359200	1361960	I think in the tests I had, they all had the same damage, but then you had the
1361960	1364800	multiplier, but it's nice to have like a variable for it.
1365360	1369880	So when you want to implement functions onto a class in Rust or struct in Rust,
1371080	1372160	they are separated out.
1372160	1375560	You have the struct, and then you have the implementation for the struct.
1376480	1380400	So this is a, what we might think of as a static function.
1380920	1383400	So this is to create a new Pokemon.
1383760	1385640	It returns a type of itself.
1386280	1388280	So here we just create a Pokemon.
1389040	1391760	You might think of this as an R value that I return.
1392000	1394760	So remember that I'm returning, it doesn't have a semicolon.
1394760	1397160	So I'm actually returning the Pokemon out from the function.
1397240	1398920	So I'm just creating a Pokemon and returning it.
1399480	1401200	It has 10 health and it does five damage.
1402560	1403440	Then I have a function.
1403720	1405640	So you can say it's a function, take damage.
1405680	1407200	It has a mutable self.
1407520	1411920	So this is a non-const function and the amount of damage that I want to take.
1411920	1414520	And you look here, I'm not taking in reference of anything, just a value.
1415280	1416480	And yeah, simple as that.
1417200	1417840	Simple as that.
1418040	1418840	I reduce the health.
1420080	1423960	So a battle is then a container of Pokemons.
1424400	1425840	So Rust has container stuff.
1426560	1427440	We have here vector.
1427840	1431080	They work generally similar as the vector that we have.
1431920	1435920	So I want to implement the battle in the same way I have a static function to
1435920	1436640	new the battle.
1437240	1440800	For this example, I'm only going to have two Pokemons.
1441360	1444200	So I'm not going to have the full grid just to simplify the code.
1444920	1449360	So I just say Pokemon new, Pokemon new, and I have a vector from two Pokemons.
1450000	1450280	Okay.
1451240	1453320	And again, I have a battle and I'm returning the battle.
1453320	1455400	So now I have a battle of two Pokemons.
1455960	1457360	So let's fight.
1457880	1458240	Cool.
1458920	1463520	So because we, when we're fighting, one of the health of one of the Pokemons goes
1463520	1467520	down, so I want to mutate, mutate whatever's in the Pokemon.
1468360	1470400	So this is a way of doing a loop.
1470440	1475120	If I want the index for N and I dot, dot, dot, self, I can have some length.
1475320	1476600	So self Pokemon length.
1477560	1481920	So again, same way I'm doing a super plus, since I was converting stuff over, I
1481920	1483240	get a reference to the attacker.
1484320	1486280	I get a mutable reference to the defender.
1487280	1488240	And I say fight.
1489240	1489760	Okay.
1490520	1491080	Sounds good.
1492080	1494280	I have the rust teacher shaking his head.
1496800	1498520	No, this doesn't work.
1499960	1500560	Okay.
1500760	1501760	So this is another thing.
1503120	1507800	So here we have cannot borrow self Pokemons as mutable because it's also
1507800	1509920	borrowed as immutable there.
1511800	1512240	What?
1512280	1512680	What?
1514040	1519080	So the, the, the idea that I had in the C++ version actually has a problem
1519720	1525920	because in one sense I'm having a, a non mutable borrow to a value and I'm
1525920	1529560	having a mutable borrow to another value, which is something that C++ doesn't care
1529560	1529880	about.
1530760	1533600	But here they're like, no, this is scary.
1533720	1534520	This is dangerous.
1534600	1535200	Don't do this.
1536760	1537680	So how would you fix this?
1538160	1538440	Right.
1539440	1542360	Well, what do I actually need from the attacker?
1543200	1545000	I don't need the actual attacker.
1545560	1546720	I only need the damage.
1547160	1552000	So the solution in this case is we just get the damage and then we do the attack.
1552040	1558520	We don't need the actual, we don't need the entire structure to do a combat when
1558520	1560800	only one parameter of the Pokemon actually matters.
1562080	1564800	So here's the language and telling you, you're being silly.
1565080	1566080	You should rethink this.
1566400	1568240	This is not, uh, you're not playing.
1568440	1569520	You're programming in the wrong way.
1569760	1571440	The language is saying, please rethink this.
1572200	1572440	All right.
1572760	1574080	So in the actual version, that's what we do.
1574080	1576400	We just take the values we need out to use them.
1577680	1578040	Cool.
1579040	1580320	Let's go back to paintings.
1581960	1582240	Right.
1583680	1584440	Beautiful paintings.
1585800	1590600	So in 2008, an experiment was conducted at the University of California.
1592400	1596080	The goal of the research was to detect the difference between two teaching methods,
1596880	1598320	masked versus spaced.
1601680	1607440	They were asked to study paintings grouped by the artist, which is called masked.
1607600	1610480	You get a bunch of paintings by one artist.
1611400	1613920	And then you have to have a quiz after that.
1615000	1618240	Uh, or they were interleaved by other artists.
1618240	1622480	So you'd have artist A, artist B, artist C, and then mixed together.
1623480	1630720	So each masked participant would get a set of paintings by the same artist and you
1630720	1635160	would spend time looking at the style, the next painting, since it's by the same
1635160	1637240	artist and look for similarities.
1637800	1642760	Like you look at painting A by artist A, looking paint, next painting by artist A,
1642800	1644560	like, okay, what is this similar thing here?
1644560	1649560	Like we did with Van Gogh in the beginning, but the space participants would get a
1649640	1651240	mix of artists all over the place.
1651720	1652240	Okay.
1654040	1659680	So what they would then have to ask the quiz was basically like we did in the
1659680	1662600	beginning, is this a painting by artist A?
1662640	1663920	Is this by Van Gogh?
1664800	1669960	In the actual test, they used like non famous artists or like, like they wouldn't
1669960	1671280	have starry night, right?
1671560	1673680	They would have just some, some artists.
1674520	1677760	Uh, so the results were counterintuitive because they were not
1677760	1681440	counterintuitive because the spaced version did better.
1683640	1684400	Always better.
1685480	1687200	Never like there isn't a variance here.
1688200	1692920	So the people who did not get to focus on art, one artist, the next one, the next
1692920	1695240	one, they did worse.
1696360	1696640	Oh, sorry.
1696640	1699880	The, yeah, the people who, who did not get to do that, they did better.
1699880	1700160	Sorry.
1700520	1701920	Other way around my brain.
1703240	1707120	But not only that, yeah, the space version where the participants are not able
1707120	1711080	to study a single painter at a time and focus on their styles, got a better
1711080	1711520	result.
1712080	1720160	So, and even if the masked version did worse, they liked that way.
1721520	1726400	They were asked afterwards, even after they've known the results, which one
1726440	1727360	do you like?
1727760	1732120	Do you like to learn one painter at a time to focus on the thing?
1733120	1737440	Or do you want it spread out and randomly selected?
1738120	1742440	Even if they knew the results, no, they still like learning one at a time.
1744760	1745560	They did worse.
1745720	1746360	They didn't care.
1748360	1756040	So from quoting from the, the test in experiments, one A and two combined, 85% of
1756040	1759920	the participants did at least well in the space condition, as well as the mask,
1760400	1766760	mask condition, but 83 of the participants rated the mask condition as equally
1766760	1769160	effective or more effective than the space condition.
1772160	1773840	It's not even slight difference.
1773920	1778480	Like, no, most people wanted the one same artist.
1781760	1788200	Looking back at our own inability to foresee the benefits of spacing, perhaps we
1788200	1791960	felt victim to the same illusion that we have railed against.
1792400	1796480	So these are the, the study, the testers, Bjork and Cornell.
1798400	1799840	And this has been done over many years.
1800080	1806240	So 94, 99 and 2007, different types of studies, namely the illusion that a sense
1806240	1812240	of ease and fluency accompanies effective learning, whereas a sense of
1812280	1815160	difficulty signifies ineffective learning.
1818800	1822680	In the case of the induction, the case of induction, as many as other types of
1822680	1827680	learning spacing appears to be sometimes, if not always, at the desirable
1827680	1828320	difficulty.
1828720	1831720	So this is the word, the desirable difficulties.
1832680	1833680	This is 94.
1835200	1838680	And this is the concept that's used, the concept that you see here is the
1838680	1841120	important point, the desirable difficulty.
1842520	1845800	We don't want things to be hard just for the sake of being hard.
1846800	1850720	The next slide is not a better version of this one.
1852400	1855520	I can tell you that this is a, a, a Caesar cipher of two.
1856400	1857280	Now go read the slide.
1859560	1860400	It's not better.
1861360	1864400	So these, this is, this slide is more difficult than this slide.
1865160	1866680	That's not, does not mean it's better.
1867040	1870000	So the key concept is the desirable difficulty.
1870800	1872320	So, sorry, man.
1872880	1876080	So quoting Elizabeth Bjork and Robert Bjork again about the desirable
1876080	1881560	difficulties, they trigger encoding and retrieval processes that support
1881560	1883640	learning, comprehension, and remembering.
1885320	1887800	So this is, this is kind of my summary for this.
1888160	1892600	Practicing easy things is fooling your brain and thinking that you're doing well.
1895240	1895760	Okay.
1896600	1897080	Good.
1897480	1897760	Good.
1899600	1902840	So empirical studies have looked at the different learning methods and
1902840	1905120	strategies that have a positive impact on your learning.
1906120	1910800	So spacing that we talked about before, also interleaving.
1911040	1914600	So spacing is like spacing out the different types you have.
1914640	1919080	Interleaving is different kinds of learning, doing different methods of like,
1919480	1922440	I want to learn in one style and then I learn another style.
1922440	1927640	And yeah, variation, like learn different things as well.
1928200	1929800	And also this thing, generation.
1930760	1936280	So what generation is, at least what they were thinking is you will be taught
1936280	1940920	something and now you have to create questions about the thing that you learned.
1941800	1943000	You will not be given questions.
1943000	1944240	You will not be given material.
1944720	1948000	You have to form your own thoughts about this thing.
1948320	1951120	Which sounds difficult, which it is, and that's good.
1951880	1953000	That's what generation is.
1959160	1964240	So there was even a study done, Karen Poth, 1978.
1965080	1967680	So kids were supposed to throw bean bags at a target.
1969560	1973880	Group A, practice by throwing at a single target, like these things here.
1974880	1979200	Group B, practice by throwing at many targets, either close or further away,
1979440	1982160	but never the same distance as group A.
1984560	1988360	Then a test was conducted to throw at the same target that group A used
1988880	1990120	and group B did better.
1991080	1994480	So here we have variation, practice different things.
1997160	1999720	So let's go back to Rust or any language.
2000440	2003320	So what does it actually take to learn a new programming language?
2004240	2006040	So is it enough to watch a YouTube video?
2009440	2009760	Good.
2011240	2013120	To read a blog post-tutorial?
2015920	2017720	To watch an hour-long conference talk?
2022920	2023920	To sit down in the program?
2024840	2025920	More hands, more nods?
2026440	2026920	No.
2028160	2034960	But you need all of these and more because mixed together over a long period of time.
2035960	2040480	So this is kind of the key that I've been seeing through obsessing about learning,
2040880	2044160	is watching a YouTube video is one style of learning.
2046040	2050400	And then reading a blog post-tutorial, watching a talk, doing a programming,
2050560	2056000	like you are interweaving everything that is happening here, different learning styles.
2056520	2058520	And this also adds time.
2059560	2060400	So this is the...
2061400	2064720	What I've been seeing through all of the studies is it takes time,
2064960	2069880	and different things that you do, and then at some point, yeah, you will learn something.
2070160	2072160	But it is difficult, and that is good.
2073640	2074880	Not the first is difficult.
2075480	2077000	Maybe it is, but that's another point.
2078440	2081080	So let's learn programming in 10 days, right?
2081840	2082960	Or 10 hours or 30 days.
2082960	2084840	So who has seen the books?
2085480	2086920	Have they become less common, right?
2087240	2090400	Yeah, learning Java in 30 days or whatever they're called.
2091400	2096800	There's a blog post by Peter Norwick, which he's very angry at these books, and rightly so.
2098560	2100520	So, yeah, I don't think you learn programming in 10 days.
2102320	2103600	So, remembering.
2104480	2107840	So what I can see from the literature, yeah, mixing up practice styles,
2108880	2110640	waiting between study sessions.
2110960	2112360	So now you have an excuse, right?
2113440	2114880	I'm not procrastinating.
2115440	2116480	This is the waiting period.
2116560	2120120	This is the incubation period between the study sessions.
2121200	2121720	Don't cram.
2121800	2123520	That's another thing they've shown.
2124000	2124920	Cramming has no point.
2125240	2131400	They've been doing tests on students that, and I don't have the example of,
2132720	2135200	some of them had to really cram before a test.
2135720	2139640	The others were not allowed to study before the test, and there was no
2139640	2141040	significant difference between them.
2142400	2145920	There's even like the, what's it called, the cue cards, that they would like really
2145920	2147880	learn through the cue cards, and yeah, there's no difference.
2148480	2148920	Don't cram.
2150440	2154760	So, and this is a re-wording of one of the quotes.
2155200	2158960	Difficult to remember in things, and then finding the right results
2159280	2160360	strengthens the memory.
2161640	2165320	I told you something, and then you had to recall it again.
2166840	2171160	An anecdotal evidence, or anecdotal story that I heard about something
2171160	2178040	like this is, the memories you have of when you were a kid exist as pictures
2178200	2179400	in your parents' house.
2180520	2182640	Because you go back and you look at the pictures.
2182880	2185720	So you remember the time you went to the theme park, or you remember the time
2185720	2190040	you climbed that hill, because you see it again and again over time.
2190680	2193840	There are other memories, but the ones that are pictures in your parents'
2193840	2195560	house, those are the ones you remember.
2197320	2204600	So, in 1950s and 60s, the concept of errorless learning was advocated by
2204640	2205240	B.F. Skinner.
2205760	2208640	Yes, that's Skinner, that's you, might be thinking about.
2209640	2214800	So, the idea was to give you the information, and then immediately a quiz.
2215320	2217240	So, who remembers what I was doing in the beginning of the talk?
2221440	2225320	So, we are fetching information straight from the short-term memory.
2226120	2229360	That was the big thing, like, if I tell you something, and immediately quiz you
2229360	2232800	on it, you won't fail the quiz, and then you are an expert.
2233760	2234120	Right?
2234720	2235000	No.
2236840	2239400	Yeah, the opposite has actually been shown to be true.
2240720	2242200	To quiz people later.
2243360	2248200	So, there was a case of, and I think, yeah, there's another thing I'm going to show you.
2249040	2255640	There's a case of the, like, a class has been taught in multiple ways, where there
2255640	2260800	was a bunch of quizzes during the poll session.
2261320	2261680	Wow.
2262880	2268800	Not the seminar, during the whole year, half a year, where they were giving a
2268800	2271960	bunch of quizzes along the way, and there was no final exam, and then just a
2271960	2276560	grade from that, or there was no quiz and one big final exam at the end with
2276560	2282680	everything, but then they tested the people again, I think a year later, and the
2282680	2287400	people who had the one quiz at the end still remembered more than the people who
2287400	2289240	just, because that's what you're doing.
2289360	2292200	You're, I learned A, have a test on A.
2292280	2295880	I learned B, I have a test on B, then I don't have to think about it, but those
2295880	2298920	who have to learn everything and take a test on everything, they had to really
2298920	2302120	sit and, yeah, remember everything that was happening.
2303240	2308040	So, they were giving kids a set of hard puzzles, like the anagram puzzles.
2309720	2313120	Half of them were just said, yeah, it's going to be hard.
2314000	2315760	Difficulty is just a part of it, and that's okay.
2316000	2316600	Don't worry about it.
2317600	2323280	Uh, the other halves were asked to, like, explain how they would solve a puzzle.
2324160	2325520	Like, yeah, you have to solve this.
2325760	2327320	Tell me how you're thinking about the problem.
2328480	2329360	The first group did better.
2332000	2332200	Yeah.
2333600	2334840	Just saying, like, it's going to be hard.
2334920	2335280	That's okay.
2335880	2336720	You're going to fail something.
2336720	2337200	That's fine.
2337280	2338760	Just let's, let's go through this.
2338760	2342120	The other one, we talk about, like, how are you doing things?
2342120	2344720	Or I'll give you a little tip on how to solve these puzzles.
2344720	2345040	No, no.
2345680	2347000	It's, it's, it's fine to be hard.
2347680	2354640	Um, there's, there is a festival of errors in, I think, Paris from the 90s,
2355520	2357200	where they're just celebrating that we're going to fail.
2358160	2361200	And then it's like a festival for school kids and it's going to be okay.
2361200	2363560	And then we're going to fail things and it's going to be hard.
2363560	2364680	And yeah, it's kind of fun.
2366320	2372520	So a question on my throughout there is, isn't this how we learn as programming
2372520	2373920	also over time?
2375200	2376560	So blocking versus spacing.
2376880	2380240	So we might think about a specific feature or we might learn about a specific
2380240	2384920	feature, but then, like, we don't learn about the vector and then only use vector
2384920	2385440	for a long time.
2385920	2389360	No, we learn about vector and then we learn about algorithms or then you learn
2389360	2392160	about, um, I don't know, something else, right?
2393200	2395080	So we do this blocking versus spacing.
2395560	2397880	Like we don't teach, there's not a class on vectors.
2398320	2401040	I don't think, uh, variation.
2401280	2404000	We learn about different programming languages, programming language styles,
2404000	2406560	different libraries, we're reading other people's code.
2406600	2406880	Yeah.
2407440	2408280	All these kinds of things.
2409040	2409840	Uh, generation.
2409960	2411280	I mean, we write our own code.
2411560	2412720	We read code by others.
2413000	2415240	We form questions about the code that needs to be answered.
2416000	2420440	So we are not doing this, but over time and quizzing.
2421400	2424600	I mean, I'd argue that code reviews are quizzes that we take every day.
2424840	2425520	That is the question.
2425520	2426880	Is this block of code okay?
2428600	2429960	So we take a bunch of quizzes.
2431320	2431640	All right.
2433240	2433880	How are we on time?
2435480	2435800	Good.
2436560	2439520	So how are we learning rushed the wrong way?
2441240	2445800	Uh, in the same way, we're learning everything the wrong way, basically, by
2445800	2449000	looking for the easy way out, like I did my hubris.
2450240	2457320	Uh, and we also fall into the curse of knowledge while teaching because I find
2457320	2461440	this easy to explain, so it must be easy for others as well.
2462680	2464160	I know what subsumption is.
2465160	2467440	So I can explain to you what subsumption is, right?
2468000	2469080	No, that doesn't work.
2470560	2473400	So what is the rusty key to all this?
2473640	2474280	I like this one.
2474320	2476000	Oh, I was so happy when I found this image.
2476880	2479200	Get up, get a basket in this image, right?
2479880	2480160	All right.
2480320	2480520	Good.
2480560	2480880	Thank you.
2481960	2482760	It's going to take time.
2483240	2483800	That's the key.
2484360	2485720	It's going to require practice.
2486240	2492320	It's going to feel difficult and that's good because not because rushed
2492320	2495720	itself with difficult, because that's how you get the best results.
2496920	2499320	I mean, we as programmers are min maxers.
2499360	2501440	We think about like, what's the best way optimal way?
2502000	2507920	And I'm sorry, but the study show that the best way is the hard way in a way.
2510240	2512160	I mean, it's not like learning C++ was easy, right?
2516400	2516880	Yes.
2517040	2520400	So now I'm going to be mean to myself as well.
2520920	2525200	Unfortunately, in this case, there is considerable evidence that in many
2525200	2530480	situations, this strategy, which is the one hour lecture is rather poor.
2531480	2532320	From 71.
2533200	2535200	What have we, what are we doing?
2535240	2536000	What are we doing here?
2536560	2537240	Just go home.
2539200	2545480	A lecture may inspire, motivate, and inform, but I'm not going to tell you
2545480	2548720	but rarely fulfills the principles for effective learning.
2549440	2552880	It's certainly inadequate for developing high, the high level skills.
2553520	2554040	71.
2555640	2556000	Oops.
2560000	2560240	Yeah.
2560320	2564400	Students who study the topic and then generate their own questions scored an average
2564400	2569080	of 14% higher than on a test than students that use passive strategies like
2569080	2571280	studying the notes or rereading classroom materials.
2572280	2576600	Creating questions, researchers found, not only encourage students to think more
2576600	2581240	deeply about the topic, but also strengthen their ability to remember what
2581240	2582080	they were studying.
2584120	2584680	Yes.
2587680	2592760	When Pablo Casals, the cellist, was asked why he continued to practice that
2592760	2595920	cello three hours a day at the age of 93.
2596760	2599400	He answered and beginning to notice some improvements.
2600400	2605120	And because, like I talked about the one hour lecture is not good enough, it's, it's
2605120	2607680	15 minutes until I think it should be safe, right?
2607720	2608280	So thank you.
2619800	2621600	So form your own questions, please.
2623720	2624440	Yes.
2624560	2625200	Yeah.
2641240	2646680	What if we need, so it needs to be restructed, reconstructed that the thing that
2646680	2652160	is going to do the, the mutation, the value is not the same thing as the
2652240	2656520	class because the, the, the key of the issue, which I think is correct is because
2656520	2661440	the self is mutable, that means that the, the, the vector is mutable and I'm
2661440	2665400	asking for a mutable value of the vector that means that the, I'm asking for the
2665400	2668520	whole vector to be in a, I don't know, mutable state.
2669240	2677000	So take it out of the class because we are, we're asking, we're asking the
2677440	2680480	class to be mutable when we actually don't need it to be mutable.
2680480	2682880	And that's that we don't need that one value to be mutable.
2684080	2688040	So I can, I can show you the actual worst code.
2688040	2689080	It's, it's on GitHub.
2689320	2692360	I can show you the actual Pokemon code and it's a bit, it's a, it's
2692360	2695520	oddly structured, but yeah, we, we don't do the compact there.
2696000	2696800	That's basically the case.
2700720	2703280	And the other form questions, I know it's hard.
2703280	2705160	Yeah, that was before here.
2712120	2717720	Have I found the thing I feel I still haven't mastered is the, the lifetime
2717720	2720680	part where you do the lifetime annotation.
2722000	2726760	I'm still in the, in the, in the area where like, I will just put the
2726760	2731400	lifetime annotations until it works, which I don't, I don't, I don't, I don't
2731520	2739240	know if it works, which I don't, like, yeah, exactly, which is, which is the,
2739240	2744080	if you do the rustling exercises, that is what that is, is you have a compiler
2744080	2748120	error and it will tell you, like, fix, fix the error in file number one.
2748240	2750240	And then you fix the error in file number one, it will read through the
2750240	2753480	tests and then it will say, fix the error in file number two, and it will go
2753480	2754600	into file number two and read about it.
2755040	2757560	And the first errors are like, said, we call it missing or the if statements
2757560	2760040	is wrong, but then it's like, I think it's like 40, 50 exercises.
2760520	2764200	But the, and what I found from the rustlings when I was doing those, there
2764200	2767400	are no exercises about the lifetime, because you can do so much with the
2767400	2768760	language without even thinking about that.
2769280	2772120	Because a lot of the times if there is, I think it's, if it's one
2772120	2776200	argument into the function, the compiler will do the lifetime thing for you
2776200	2779440	correctly, because there's only one way to do it, I think.
2780440	2782760	So yeah, the whole lifetime thing is, is weird.
2783160	2787640	It actually, I, I found, again, the language kind of guided me in the
2787640	2793400	right direction, which was I had, I was doing some web stuff where you can
2793720	2796280	write rust and compile to web assembly and then run that.
2796920	2802320	And I wanted a, a callback to the JavaScript code.
2802840	2806720	And I wanted the callback to be a, a lambda within rust.
2807760	2812880	But the thing is that the lifetime of a lambda that is capturing variables
2813200	2817480	cannot be static or cannot be like globally alive, which is
2817560	2822320	kind of what is necessary if you want to be callable from outside, because you
2822320	2825400	always need to exist because you never know when you're going to be called.
2826360	2829320	So in other languages, I might just get a function pointer and just hope
2829320	2829800	that works.
2830160	2832880	And probably 99% of the cases, yeah, that works.
2833320	2837600	But, but actually, like that doesn't work.
2837720	2838880	And the language will say no to you.
2839480	2839680	Yeah.
2840560	2840920	Yeah, one.
2847480	2853560	I think the entire rust language is lava and it's a hello from me to, I'm
2853560	2857560	going to be at Rust Fest next year and I'm sorry, everyone, this is my laughing
2857560	2858040	question.
2860040	2860840	Where are you on that?
2862360	2864320	70% towards the second one.
2867040	2867600	I like rust.
2867720	2868080	It's fun.
2869600	2869800	Yeah.
2877480	2890800	So, so here's the thing about learning that I, because I learned this way.
2891280	2892680	So this is the path that I've learned.
2893080	2899760	So I recommend learning wrong and then doing a conference talk about it in the
2899760	2902400	same way that people sometimes ask me, like, how did you learn C++?
2902400	2906240	I'm like, yeah, I went to university for four years and studied there for four
2906240	2906400	years.
2906400	2908120	So you should also go to university for four years.
2908720	2910160	They're like, do you recommend this book?
2910160	2911680	Like, I've never read it, so I don't know.
2913400	2916080	I do recommend the rustling exercises that I've mentioned.
2917240	2922280	I do recommend doing things in smaller incremental steps.
2922600	2926120	I do recommend moving projects you have, like smaller hobby projects over,
2926640	2929000	because there's a lot of like walls you will hit along the way.
2930040	2930720	And it will be hard.
2932240	2935440	Also find like a good, like rust community to chat with.
2935520	2939880	A bunch of them on Twitter, probably because a lot of them migrated from C++.
2941080	2944760	But yeah, at least start there and then, yeah, time.
2945760	2946040	Yeah.
2948280	2949520	Any more well-formed questions?
2949520	2949680	Yeah.
2966440	2967640	Yes, yes.
2973000	2977800	Yeah, because like an example I had with the Pokemon code, like I was doing
2977800	2978720	in-out variables.
2978720	2983880	I was like taking references to like arrays and stuff like, yeah, I have done
2983880	2989840	smaller projects where I, so there's another teaching idea that I've had is,
2990240	2992120	is to create limitations for yourselves.
2992480	2996520	And like an example is you can, you can write a small hobby project or do
2996520	3000480	like a small thing, but every single variable you have has to be a unique
3000480	3005280	pointer, like all of them have to be unique pointers and that creates a
3005280	3008440	bunch of problems, but that also teaches you a lot about unique pointer.
3009120	3010280	So I've done that kind of thing.
3010280	3014600	I haven't taken my own older project and like, that a modern version of them.
3015240	3015880	Maybe I should.
3015880	3016200	Yeah.
3018280	3018760	Yes.
3022120	3022680	Yeah.
3035600	3040000	I, I think I've done that with TypeScript.
3040560	3043400	I think that would describe my TypeScript like initially when I learned it
3043440	3049240	because it was a, a, like a, and what's it called?
3049240	3054400	A serverless AWS, AWS project with all sorts of like everything was async in
3054400	3054880	the code.
3054880	3058560	And like it was very, like it took me a long while to get like used to how
3058560	3062240	things worked and how things looked and also had to learn AWS at the same time.
3062240	3066040	And then how this whole, you have to like upload the lambdas up to the cloud and
3066040	3066240	stuff.
3066240	3067720	So, so I've done that.
3068920	3072840	The main issue is, I guess it's hard, which I think is why, like, like last
3072840	3075720	year I did a talk on TypeScript because yeah, I think I knew it pretty well.
3076440	3079280	Maybe that was the, the reason why I knew it that well.
3080960	3086160	But yeah, I think that's, that's how I learned that.
3086440	3090640	So if you can use it, try it because it is difficult.
3090680	3091760	It is very, very difficult.
3092280	3097440	And I think it's, it will take a while for you to be, to feel productive.
3097560	3100000	And, and for some people that might feel uncomfortable.
3100760	3101000	So.
3105040	3105600	Then thank you.
