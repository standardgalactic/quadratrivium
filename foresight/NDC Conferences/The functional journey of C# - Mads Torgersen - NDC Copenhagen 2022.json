{"text": " Wow, let's see. It recognizes me even with this fancy mic on. So, Windows Hello, yay. Doesn't it? Or did it just, like, turn off? It wants, no, it didn't. It wants a pin. At least it's not showing you my pin. There we go. Okay. This is my intro slide. My name is Mess Torgerson, or Mess Torwassen, or Mutz Torgerson, or something like that. I know we didn't friends out there are going to kill me. They're going to take a blue sharpie to that one after. So, I work on the C-sharp language every day for Microsoft. It's a great job. I wish you could all have it, but it's mine. So, and I've done that for a very long time. So, that means I remember things that nobody else remembers, almost. Except for Anders, as we call him, who was there from the beginning. I was not. I was a latecomer. I've only been there for 17 years. But it is an old language. We are now working on C-sharp 11, and there's a whole other talk about C-sharp 11 a little later today. So, I decided I want to talk about C-sharp 1 through 10 today. It's from the angle of how has functional programming influenced C-sharp over the years. I'm hoping that's interesting to you. Otherwise, that's a lot of people I'll be disappointing today, because it's a very full room. I don't know how many are out there, but you can still run without me noticing unlike these people in here. So, I think it's interesting, because C-sharp started out as a fairly typical of its age, fairly straightforward object going into imperative programming language. That was how it started. They didn't kind of just pull that out of the blue, of course. There were other languages around at the time that were similar. That C-sharp might happen to look a little like, by accident. But that was sort of like the game of the day. So, C-sharp was typical of the day, and kind of pretty much took almost all the functional things in along the way as they became relevant to how we do programming. So, I'm going to go through that same evolution essentially today and point out some of the different ways. I'll try to make some general points about programming language paradigms and so on along the way. But it's all going to be a little bit, I'm going to do it all in Visual Studio. I'm just going to code along. And so, and I forgot to print out my demo notes. So, may I go astray? It'll be a little bit of a one-off. We do have an hour, which means that there's time for a few questions along the way, not like a million. But I don't want you to say, oh, I want to ask a question about that when he's done talking. Because by then, the code will look different. Nobody will remember what I was talking about. So, if you have a question, raise your hand and ask it. And I'll try to keep us on track. And hopefully I'll succeed. And that might mean that I will have to be a little rude and say, sorry, no more questions. Come back after. So, just don't be offended when I get to there. But until then, please just raise a question and ask. So, with that, without much further ado, let's start out with C-Sharp 1. And just kind of, for those of us who were around, remind ourselves of the state of the art of programming, at least in the industrial space in the year 2000. And for those of you who weren't around, you can just go, thank God I wasn't around. I mean, you were probably around most of you, but maybe you were still doing Legos. Aren't we all really? So, what I have here is a fairly simple. It's a C-Sharp 1 program. I'm cheating a little bit because when it comes to features that aren't part of this talk, that aren't functional, I'm just going to use them a little bit anyway. For instance, my code is not in a main method. You don't need to do that anymore in C-Sharp. And it fits better on a screen if I don't. So, I'm not going to stick religiously to only C-Sharp 1 features. But in terms of functionality, I am. So, one thing to, talking about functional, C-Sharp started out with just a tiny little hint of, a tiny little concession to functional programming languages compared to other languages at the time. And with something that they, we call delegates, which is sort of kind of like a function type. They were actually part of some of the, the need for delegates was part of the reason why we couldn't do some other programming languages and got dragged into court and stuff. So, C-Sharp back then already had like a notion of a function type called delegate. And those are still the ones that we use for function types. They're flawed in various ways, but you know, once you've got something throughout the whole core libraries and so on, you don't go on and change it. So, delegate types were function types. It's like, you know, this is the type of a function that takes an int and returns a bool. And it's a name type, like a class. It is in fact a class. And we call it predicate. And now we can use it as a function type. So, I can have a method here, a function that takes a predicate. And it can call the predicate as the, you know, according to the function type. But, and when I want to pass an argument to it, well, we don't have anything like lambdas yet that we're going to get to that. We don't have like anonymous functions of any kind. But we do have, we, but you can sort of just mention a function that happens to have the right signature, like great than five. Hang on a second. Is it going to be like this all the way? How many typos are we going to have in here? There we go. I did get the wordle this morning. So, I'm not like totally, there we go. So, so you kind of have to declare a function, then pass it. You have to declare the function type, then use it. Like it's all very nominal and declarative at this point. But it gets the job done. Like pass the predicate in. Of course, there's no such thing as generics yet. They're the first thing we're going to learn from functional programming languages in a minute. So, you know, this was the name of the game. I do, you, in order to filter this, I need to gather up the results. The only, like I really wanted to return an array because that's the only generic type I have. It's the only type that actually has an element type. So, that's, so you kind of, you kind of encourage to trade in arrays, horrible as that is, because otherwise you have no type safety. But we do have other collections. They're just all over object. So, and, and I need to create one of those to gather up my elements because I don't know how many are going to succeed yet. I don't know the size of the array to allocate. So, first I gather them up, then, you know, I know how many I have, then I can allocate an array that's strongly typed to int, then I have to stick all the elements that I found into the array. And as I'm doing so, I have to cast them to int because I know they're all ints, but the compiler has no idea. It's like you stuck, you give me a bunch of stuff, you're taking them out, all I can see is object. So, you know, you die a little inside every time you have to cast things coming out of collections. How many people in here remember that from like either C'sharp or some other, like Java or, yeah, out, yeah. So, what, I think what we very quickly felt all of us was, and with C'sharp, it was already like coming to version two, which we're coming to version two now. We felt like, okay, this is not, this is not like a satisfactory state of affairs. It's not the abstraction capabilities aren't good enough here. Some other languages that had been around for longer, it took them a little longer to get to that point. So, it ended up that, for instance, Java and C'sharp got generics, which is where we coming to now at around the same time. And I was actually back then, I was on the other side of the fence helping out with generics and Java. So, I saw it from the other side. Still think Microsoft and C'sharp did it better. So, this really comes down to sort of one of the fundamental differences between functional and object-oriented programming. You know, in classic imperative programming, there really is no polymorphism. There's no way that you can write code that applies to more than one type. Object-oriented programming and functional programming, to a large degree, are two different answers. At least when they're typed, they're two different answers to, how do you get polymorphism? How do you write code that works for more than one kind of thing? In object-oriented programming, we went with what's often called subtype polymorphism, which means everything is a subtype of something that's a subtype of something that all goes back up to object. So, that's what we're seeing here. Now, you can write a collection like ArrayList here that can contain anything. So, there's polymorphism in that sense. And the great thing about subtype polymorphism is it's very easy to have heterogeneous collections, for instance. You can put all kinds of things in the same collection. As opposed to functional programming, they went with what's called parametric polymorphism, where you have an extra type parameter on things that, you know, sort of like a placeholder for one type. So, you don't get to mix and match the types inside. You get to say that there's this one type that I'm going to give you later, and then it'll work for that type only. But it's still polymorphic, because you can give different type arguments in different places. And that has the benefit that you can, because that type parameter has a name, you can have things sync up so that the same type name, the same type parameter appears in multiple places, and you can sort of say, well, whatever it is, the same kind of thing that comes in is the kind of thing that comes out, for instance, which is exactly what we need here, right? We need a collection, for instance, that has the same stuff coming in that's coming out. Enter generics, which is parametric polymorphism. Most object-oriented programming languages with types at this point say, okay, let's embrace that too, so we have both kinds in the language. So, that's sort of one of the first big imports from the functional space. So, let's do that. Now, let's see, where do we start? Now, we can have, well, instead of a RayList here, we could now use the new fancy generic collections that we have, and I'm cheating and having the imports in another file, so either using, so you don't have to bother with that. So, we can say list of int here instead is a new list of int, and now, as I'm gathering things up, it should be graying out this. I know that my destination here is actually a list of int and not just a list of whatever, and so I can now get rid of this cast of death. Back in business. Somebody wrote a generic collection for us, we can use it. But, of course, now, there are other, I can write generic things too. Maybe I want my predicate type to be more general. Maybe I don't actually want to write new delegate types for everything all the time, so maybe we could say predicate of t and have it work for all t's and not just for ints. It still returns bool, but I can, I now have a generic predicate type, and I can then here say, well, it's actually here, it's a predicate of int that I want, and boom, things don't work, or we can, we could actually go a step further and say, well, filtering isn't really particularly about ints, is it? And now we can write our own generic function, a method that is a filter of t, and now we get to, say, t in all the places, it's actually a predicate of t coming in and an array of t, and I'm returning an array of t, and in all the other places where it says int, except one, so you have to be a little careful, here, here, here, where else? The int result, of course, and, you know, so now I've completely generified the thing, and this is the int I shouldn't replace, because that's the counter for the, you know, filling out the array, so that's why I didn't just do a search replace here. So there we go, now we, all of a sudden, we've generified a thing, it's fully strongly typed, as if it was for a specific type, but now you can apply it everywhere, and the full, like, generic, generification is a strong, strong tool, and it, the, there were some, like, choices made in the different languages at the time that, that actually were imbued with destiny, even much more than we realized at the time. In Java, we, on the, I was over here, in the Java side, sorry, camera person, we, we were, we decided we couldn't change the JVM, the runtime under Java, because it was, you know, too entrenched, and how you couldn't control, like, what, but Java runtime they had out there, so, so all the generics in Java was done in the compiler by erasure, which means, you know, there wasn't any generics at runtime, it was just there in the code for as much type checking as you could get, but that meant that there were some things, like reflection and so on, that didn't embrace it, and there were certain, certain holes in the experience, essentially. And whereas in, in .NET, and, and C Sharp, we went all out and said, yes, generics goes into the runtime, and is shared across all the languages at target.net, and it's a real runtime thing. Question. So, to repeat the question for the, for the mic, when did we know that we wanted generics in C Sharp? So, I wasn't there, but I kind of was, because in 99, I was an intern, I was doing my PhD, I was an intern at Microsoft Research, Cambridge, which is where Don Simon is, if anybody has heard of him, the father of F Sharp, and there were a bunch of language people there, so I got actually to be privy to decisions that were secret for a number of years, and I was under NDA until, until things came out, and they were already talking about .NET, they weren't calling it that at the time, and they were already talking about generics for it, and decisions were made that it would take too long to make it work right, and we should have a version without it first. So, yeah, that, that, I think that answers your question precisely, so it was always felt that that we're gonna, we're gonna need to do this, and indeed, generics was, was the, pretty much the almost the only and, and last thing that language feature that was added to the runtime for a very long time, because after that .NET became popular, it was Windows component, and so we had the same problem as Java, as the one causing Java to not do it in the runtime, which was too many people have it installed, we don't know which version of Windows they have, we have no way of, you know, making sure that they have the right runtime features that we are compiling for, so we stopped doing language features in the runtime after that for a very, very long time, now we're doing it again, and we might get to one at the end, so that's generics, and let's see if I can get back on track here, so it's, well, that's not generics, that's not all there is to say about generics, because once you get these, like, very lovely generic collections, for instance, they can have smarter, they can have smarter types, smarter methods as well, they can have generic methods, so instead of, instead of like doing this, building this result array myself, I could just actually take that dst thing and just call to array on it, because now it knows its element type and you can build an array of the right, of the right type, namely t, you also notice, so which means I can, I can delete these two lines of code, I don't need that anymore, so many more utilities now, strongly typed utilities become available, and one last thing to notice is that when I'm calling the generic method here, I'm not passing a type argument, you need to pass a type argument to, to the, to generic types, but not to generic methods, and that again is a thing that type inference is something that we start stealing from functional programming languages, we can't do as much type inference in object-oriented programming languages as you can in a functional language because of the subtype polymorphism, it means that you can't actually, there are many places where you can't know the exact type, where you could if you didn't have subtype polymorphism, so we can't go all out on, on type inference, which is probably all the same because it's confusing to a lot of people, it's a quiet taste, so, so we kind of, we have to strike a balance there, but it certainly makes sense here, so with that lovely generics, we, we can also get out of this addiction to, to arrays as the, as kind of like the, the, the currency of collections being passed around, because arrays are, you know, they're very low-level, fixed size, they expose too much, they're unsafe in various ways because you pass your array to someone and they, they're messing with it while you're watching it somewhere else, and you know, that's just, you know, nasty, so we can start having other interfaces, for instance, that are, that are more suitable, so, Ionumable of T is a good one, I can return Ionumable of T as well here, and, and I don't even have to say to array, I can, but I don't have to say to array because, of course, a list of T is also an Ionumable, so, you know, things get simpler. We could do one better, actually, we, we also, well, oh, but, well, it's because I'm saying, in the array here, yeah, yeah, I have to, I have to just make all the changes, okay, so, oh, Eint, thank you. Say, are you developers or something? It's like, it's like you, it's like you understand what I'm saying. Hey, I also debugged something once, you know, it's fun, so, so, so far so good, we, one thing we actually decided was, now we have Ionumable of T, it's like a very, in abstraction over just sequences of data, we're going to meet this a lot more in C-sharp 3, but already in C-sharp 2, we were like, actually, the compiler could help a lot with this kind of work here, of producing Ionumables, because they don't have to be produced eagerly, they don't have to have all the elements pre-computed, they can actually sort of be lazy and compute things along the way, and we can build a language feature to help with that, and that's what we call iterators in C-sharp, they're called generators in some other languages, which is essentially write a function, and then once in a while you say, oh, here's another element for the result, and then you compute some more, and then, or here's another element for the result, and it actually gets executed lazily, up to every one of those points, you just pause and, and give the result back, and then the next time the consumer asks for a result, they come, you know, execute some more, so that's iterators in C-sharp, that means we don't even need like an accumulator, we can just say, if that thing, you know, just yield return the value, I'm not super excited about the syntax we chose there, I will just say I was not around, we liked keywords a lot still back then, we kind of do still a little bit, and now I'm, you know, that's it, that's the filter method, you know, you cycle through, you yield return something, if you decide that, hey, let me do that, and that's it, right, so boom, very nice. Also in C-sharp too, we're like, hey, we've heard about lambda expressions, let's do not that, something similar, let's have anonymous functions, why do you have to declare all the functions that you want to pass, that's just like a pain, let's get rid of all these declarations and stuff, so instead of saying greater than five here, what if I could just write the function with the body and everything in place here, so we come up with an elegant syntax saying delegate, delegate all the crap, there we go, beautiful, right, it's, well, we can laugh now, but you know, it's certainly an improvement, now, you know, I'm free to just come up with functionality and pass it along, and of course the compiler generates something under the hood that's similar to before, but hey, all languages do it like that, pretty much, so great, our first take on anonymous functions, now C-sharp three, now we have big ambitions, this functional thing has really gotten into our blood, and this is where I'm starting to be around, so I've witnessed more of this firsthand, so in C-sharp three, we want to, we want to solve querying once and for all, the functional languages can do it, we can do it too, so we want to mainstream functional approaches to solving querying, let's do that, and we have, filter is a great example, like it's a function that does querying, a one aspect of querying, we kind of have the generics in place to do this, why don't we, why don't we actually declare an even more general library of function types, and then we also declare a library of, of querying methods, and get all that stuff working, so we, so instead of just having predicate of t, we create a family, families of functions called, funk and action, funk for the ones that return stuff, so funk of t1, t result, or something like that, that take a t and return a t result, so that's what the funks look like, take a t1 here, and we just declare them in the core library, so I don't even have to do it here, they're available to everyone who wants to be a little bit functional, and we can just here, actually it doesn't predicate itself actually in the core libraries from back way, way back when, so it doesn't give me a red squiggle here, but let's say funk of t, instead to describe the function we're passing in here, and then instead of me writing the filter method as kind of a, one thing that you quickly find out when you want to, you want to query things is, hey I want to, I want to filter some more, for instance, I want to call query methods on top of query methods, so I could call filter twice, you know, I could say filter on the result of the first filter, comma, you know, some other delegate thing, and you know, it quickly becomes long, I should probably have done lambdas first, shouldn't I? I'm going to be doing more typing, okay, hold that thought, let me do, let me switch to lambdas quickly, we get better syntax, that's actual lambdas, you can do this, it's a little shorter, or we have, so this is still like a statement body there, or we can actually do just a single expression, and now it starts, it starts being a little expression oriented, like the functional languages, that's kind of exciting, but we still have the problem now, if I want to filter that one some more, I can say int, why, arrow, something, stuff, oh it needs to be in parentheses here, actually does it, you know, lambdas, you don't actually have to say the type, if it's given from context, you don't have to say it, that's kind of cool, but so why, I want to get the ones that are even, stupid example, but just, you know, equals zero, you know, I can compose my query methods, but it sucks, right, I'm composing sort of inside out, like this first stuff is in the middle, and then I'm slapping stuff on both sides of it, and it's completely unreadable, well what do the functional people do when they, I mean, they're doing this stuff, how do they do it, well they have pipelining operators, you can call functions like this, but you can also pipeline, so in a functional language, what you would do is, you would start out with the array on the left side, and then you would, so let me, let me do some horrendous doctoring here, you know, start out with the array, you would have some kind of pipeline operator, which we don't have in C sharp, and you pass it into filter, filtering the first thing, and that's just the implicit first argument for it there, and then you'd pipe that into filtering the second thing, and now you have things in the right order, they're sort of cascading beautifully in the order that you're doing them, it's kind of fluent, man, as we said, so, so that's, can we do something like that in C sharp, and that's where extension, we come up with extension methods, which is essentially just to solve this little problem in the beginning, where they turn out to be like extremely useful in extremely many scenarios, we're still being inspired by them, and we want to do more with them, where what you're saying is, we're just, what if you just pretend that the static method or this function is actually like a, and it's, I can't do it with a, I can't do it with just this method here, because it's not actually, it's not declared in a proper space, but we can do, the syntax is like this, we just pretend it's an instance method on the first argument, and now I can go and add method, what looks like instance methods to other people's types, and that kind of gives you that flow, so luckily, I don't have to like go in and do it properly here, because it turns out that method just like filter is being added to the libraries at the same time, and now we can just do the where stuff, so we can get rid of our own filter method and use the one that's part of the query library that we are now providing, okay, so we can break it up a little here, and now it starts to kind of look decent, right, now we have a select for projecting, because why would we call it project, we have various methods, I'll tell you why we call it select, that's because another place where you do querying is in, you know, SQL, which is also kind of functional, right, it's also just, there are aspects of SQL where it can mutate stuff and actually get things into the database, but the actual querying is functional too, and so we want to provide syntactic sugar for querying on top of methods like this, where you can say from value in, I should call them x, I like x, from x in array, where the keyword, where x is greater than five, and where something else, where y, let's call it x again then, because we are now using the same variable name all the way down, select something, so we now have query syntax, select, you know, maybe just x, and the point here is it looks like SQL, it's a little different, because in SQL they start with a select clause, which means we don't like that in programming languages, because they start out by describing the result, and what you want is to start out by describing the source, like where do things come from, so you can get types going and have your tooling kind of help you out as you type the code from one end to another, so we want to start with the array, figure out what its type is, get completion in our classes, and so on, so that's a programming, proper programming language way of doing it, sorry SQL folks, but you got it wrong, and you didn't think about ID, you didn't think about IDEs back in 1970, I went out, IDE focused language design, that's the way, that's why we have TypeScript, so great, but now that actually just queries my in-memory data, wouldn't it be cool if I could actually use the same syntax, both the syntactic sugar and actually also the method called syntax, to query actual SQL databases, and with no difference in syntax, and that's where we get to yet another functional loan, which is code quotations, so in Lisp for instance, it's all based around the fact that code and data are no different, and you can always easily take code and represent it as a data structure, well that's kind of cool because then you can do metaprogramming, you can take that data structure and do stuff with it, and one of the things you can do with a data structure representing a query is you can translate it to SQL and send it to a SQL database, and have it run a SQL, and have the result come back, and then you do a little translating back, and now you have an object-oriented, an object relational model, so if we take that, let's just say var here, more type inference, if we take that array and say, is it too queryable or ask queryable, isn't it ask queryable, there you go, and say ask queryable, I'm sort of cheating a little, and I'm representing it as now a queryable is like a representative of some other data source that uses quote quotation in order to do the querying, so when I do that, what changes as well, not much, you know, I get a queryable back instead, whoop-de-doo, but if we go and look at that query, query dot, you can see that it has something inside called an expression, and that expression, in fact, represents the data structure of all this query, okay, so we're building up, instead of having the code just code that we can run, instead we build up a data structure with exactly the same syntax, and now querying of in-memory data and querying of SQL databases look the same just like you can do in many functional languages that have code quotation, so yet another loan there, and I just cheated a little bit and showed you var as well, which is like the last one more concession to type inference, like very simple one, it's like, why do I have to say the types all the time, it's really bothersome to have to say int, can you let me say a three-letter keyword instead? Obviously, that's not the best example, this is the best example, right, I don't want to have to write, I want to just say, hey, the thing, you know, give me the thing, if it's clear from context that it's what kind of thing it roughly is, you know, who cares, so that's functional up until C3, it's a good time to ask for questions, we're about halfway through the story and about halfway through the hour, so it's still on track. Anything, any thoughts coming up here, questions, meta questions, programming questions, meta programming questions, yes? What made me decide? Anders Heilsberg made me decide. Okay, short version of the story, I was a professor, I wasn't liking it too much, I was collaborating with the Java team at Sun Microsystems then, had a great time doing real world, you know, real world language design for real customers, they got to do it all day, I got to do it like whenever I could get away from teaching and stuff and I just like, well, I have great time when I'm working with them and they make twice as much money as me at least, I think, just like maybe I'm not in the right career here and as I was thinking that, there was a conference in Ohos, Anders was there talking about how they were going to do generics in C sharp, I was there talking about how we were going to do generics in Java, you know, the rest is history, he had money, I didn't, so he hired, he hired me, not the other way around. Actually also, I liked how he talked about language design, when I was involved in Java language design, there was always a lot of stop energy, it's like we can't do this because, and we can't do this because, and he had a bunch of can-do attitude, you know, a small example, the generic method is gone from the screen here, but in Java they said, oh, we can't put the type parameter for generic methods after the parameters, because that might be a syntactic ambiguity in rare cases. And in C sharp, when he showed examples, that would also be a syntactic ambiguity in rare cases in C sharp, because syntaxes are a little bit alike, but they just put it there anyway, and I asked him after, how do you do that? He's like, we just do some tricks in the compiler, it's not like LR1 or whatever, it's fine, we figure it out, and who cares about those rare cases, you know, we come up with a rule that works 97% at the time, if you can run into it, and does the right thing mostly, and we're good. It was always like, we can probably solve that problem attitude, and that spoke to me in a way, and that's still the case, and that's still why I love being there, so, oh. Thanks for that question, now I'm going to have a tear in my eye for the rest of the day. Anything else? I want to hear about my childhood. Yeah. Why, oh, great question, so why are the delegate types that have the same shape, like the same signature, why aren't they interchangeable? So, they used to be predicate of T, and then it turned into, we started using funk of T, and they're not actually interchangeable, you can pass the same lambdas to them, but you can't assign one to the other, they're not structurally equivalent, so, and that comes back to, you know, I kind of hinted that I'm not a super fan of delegates, and one of the problems with them is that they're a nominal type, they have a declaration, and just like classes that look the same, you can't take an object of a class and duck type it to another class that happens to be the same, it's all based on the declarations, it's very, very nominal, as we say, and the same is true for the delegate types, they are actually classes, and they are nominally tight. Now, in Visual Basic, for instance, vb.net, they paper over this by inserting implicit, like, wrapper functions to translate from one to another, so there you get the great experience of it all just assigns to each other, it looks extremely structural, but the problem is it isn't, like it comes with a cost, like you're wrapping more and more, if you keep passing back and forth, you get like layers and layers of, oh, here's a predicate of a fung of a predicate of, you know, all the way, so we don't let you go down that rabbit hole in C sharp, we think about it sometimes, and we also think about, well, could we just do better function types, but then you have a library that is gigantic, and that is using delegates everywhere, and you look at that and you go, hmm, I wonder how we could do this and not mess up a million customers, you know, or, you know, we choose not to roll it out in our big library and just make it, you know, an option for new code, and then doesn't really, there's no bang there, right, you know, you don't get enough value, so that's a tough problem, that's, you know, the problem of legacy code and the problem of compatibility shoots down a lot of good feature ideas, and we haven't found a way around this one. It's one of several, interestingly, functionally inspired topics that we'll be discussing this summer, we're having sort of a series of summer camps on the team where we'll discuss topics that are normally out of bounds, because we don't know how to deal with them, and this is one of them, so maybe one day we'll figure out a way to make that good. Yeah? Yeah, so the question is, is the, is the sequel style syntax still in broad use, and it's true, it does feel very different from the rest of the language, it's, yeah, it's just, it's like you enter another world. Yeah, we have to maintain compatibility with it, but also, furthermore, I think it is still, it is still used a bit, like a bunch, not more than a bit, actually, a bunch of people actually do prefer the method called syntax, even when they're using the query methods. I find that if I have to do more than one from, from x in blah, from y in x dot, or something like that, then writing the corresponding query with method calls becomes, becomes mind-blowingly hard, and you have to use select many, and select many is mind-blowing, and so I always, if I have to, if I have to, like, do more than one from, if I have to, like, dig into data with froms, I switch to query syntax and let the compiler figure it out for me, because I, my brain can't handle it. It's all, actually, it's all down to monads, so how many people here know about monads? Yes, that's more than I would have expected, actually. It's this concept that is super central to a bunch of functional, a typed functional programming, and nobody understands it. A bunch of people claim that they do, but they're actually just, you know, it's a collective kind of like, it's a hoax. They don't, not for long anyway. I've understood it many times, and then, you know, the next day I was like, what was it again? Maybe I was just dreaming it. It made, it totally makes sense at the time, but query, query expressions, they are a monad. They're a language support for a monad, and when you use more than one from, that is where you get into monadic territory, where the select many is the thing that makes them, makes them a monad, and that's, that's exactly why it gets mind blowing to do it directly. It's because it's monad, and you want syntax for that. But other than that, people have different styles. There are also people who work on low level code that would be like, this is way too inefficient. It does you, there's all this laziness, right? The, the iterators are generating things along the way, which means you have all this like, you have a bunch of structure, you have all these calls through interfaces and so on. So if you're doing performance intensive code, one of the things that people look for in code reviews is, oh, oh, you have a query there. Well, fix that, you know, go back to ugly array based stuff, because then it's going to be faster. So I will say that entity framework, live and kicking offers up, you know, a query provider implementation, and people do use that, and they do use the query syntax when they're interacting with that, because it is a database technology outside of that, maybe not so much. Okay. All right. One more. That's true. Yes. So that's a great question because, and we might touch on it a little bit later. So let me repeat again. The one thing you can do in the query syntax is you can use let to actually introduce more temporary variables inside of the query. I haven't done it in many years, actually. Let's see if we can do that. Let y equal x times two or something like that. Yeah, it worked, at least it compiles. So now the rest of the query has access to x and y, and that's really useful because you have sort of like variable declaration inside of an expression rather than as a separate statement. And that has continued to doggers. That statement-based approach to variable declarations has continued to doggers. And in later versions of C-sharp, there are more and more places where you can now declare variables inside of an expression. We haven't done it completely generally. We had a proposal for it where we never went that far, but there are many situations now where you can declare an inline variable, particularly in pattern matching, which we're going to get to soon. So that even provides a good segue for that. Another big difference is functional languages tend to be very expression-based. Typically, a function doesn't have side effects in a pure functional sense, so you don't really need statements. You just need an expression saying what the whole thing is, and then you stick it together, you put sub-expressions inside, and it's all expression-based, and so you need things like variable declaration to be expression-based. And the more expression-based, the more we get inspired by that in C-sharp, the more of a shortcoming it becomes that variable declaration isn't one of them. So great, great point. And this is a way to sneak it in. You can't do that with method call syntax, because it does sneaky things under the hood. It builds little, like, tuple-like things to keep track of all the variables under the hood. Okay. Yep. Okay. Let's fast forward a little bit. Then we did dynamic. That was certainly not very functional. C-sharp 4. C-sharp 5, we did async, which was potentially very functional. F-sharp already had a solution to async, which was also sort of monadic, and which is beautiful, but is very ill-suited for a predominantly imperative language. So we went in a different direction with async, and the general functional approach to async is quite different from the imperative approach that we use in C-sharp. Essentially, they use an approach where they built up the whole control flow of the async ahead of time, and then you kind of pull a handle in, and it runs. It's like you built all the pipes, and then you turn on the water. And in our async, we sort of more like laying out the pipes as the water is coming. It's sometimes called a cold and hot async. Like we work with tasks, which are things that are already happening, things that are already concurrently operating, and then you can take a task, and then you can say, well, I'm ready for you. Are you ready for me and get a result out of them? So that's all much more imperative fits better with imperative workflow. So there, we didn't go the functional way. We don't always do it. In C-sharp 6, we started getting interested in the expression-based stuff again, though. So I'm going to switch to a different file here. So one thing that we really like, the expression bodies of lambdas, we're like, why should only lambdas be allowed to have expression bodies? Why can't all our functions, all our function members have expression bodies, and we're like, okay, C-sharp 6, we did kind of half of them, and then C-sharp 7, we did the rest. So now all function members in C-sharp can have expression bodies where you just put that lambda arrow there, the fat arrow, as we shouldn't call it, and you get it. You don't have to say return. If your only statement is return something, cut the boilerplate. But it's just in tactic sugar, right? So, but coming to C-sharp 7, we're starting to think about more fundamental things again. So not so much in the syntax, syntactic sugar, you know, as feel kind of layer, but really like, uh-oh, object-oriented program is kind of screwed in these new scenarios that are becoming very predominant and widespread. Essentially, when it comes to cloud programming, history is on the side of functional programming. I'm sorry, object-oriented programming is not good for that. If you think about, and that comes down to how you describe aberrations over types of data. In both object-oriented and functional programming, there are ways that you can write functions so that they have appropriate behavior for each shape of data, for each type. But those ways are very different. They're like actually, I think probably if Eric Meyer was here, he would say that there's a duality, like they're completely like the opposite of each other. What we do in classic object-oriented programming, we love encapsulation. We love saying the data is actually secret. I'm not even, I'm not exposing it because then I can change it whenever I like, and then I just offer up some functions, and I can have a class hierarchy with virtual functions that I can then describe for each type of data what it does. So the super like, idiotically simple example here is the two-string virtual method, right, where I am I am describing the string representation of the object by overriding the virtual method two-string. Great, you know, that means that whenever I write a new derived class from person here or from object actually in this case, you know, I can just overwrite that behavior to suit whatever my shape is, and somebody else can call it on the base class and not even know I exist, but still get the right behavior. Excellent, except when you have a world where data is long lived in the cloud, maybe, or in databases and whatnot, and different people are writing different functionality over the same data models, well, oops, now it's not so good to encapsulate those behaviors with the data model, right? You want to independently be able to express behaviors over the data model that still depend on, like, still type specific, but that the original type knows nothing about, and that the different domains of behavior have no idea about each other. So encapsulation is dead, right? You need, for those scenarios, you need the data to be public, and luckily we have, you know, auto properties to make that easy, and you need the functions to work from the outside. But in a C-sharp 6 setting, so let's say we're still in 6, doing something, let's say I want to write the two-string method from the outside, that's actually fairly hard, that's annoyingly clunky, and that you get back to that dying inside feeling. So let's try to do it, I'm making you all die a little bit inside, I'm sorry, we'll revive that part, and there'll be flowers, and it'll be good in a minute, but you know. So let's say two-string, let's call it something else, render, and you take a person, it's not even generics involved here, you take a person, P, and then you want to render it according to which kind of, you know, which person derived class it is. So we could do that, we can say, you know, we have type testing in C-sharp, we can say if P is a student, and that's the only derived class that I actually put in here, but you know, imagine there are dozens. For each of those, you say if P is student, then do, at least we have expression-bodied members here, no I can't do that here, return whatever the student does, okay, I'm cheating a little using interpolated strings here, return that, except of course I have to dot my way into that public data, no problem, but as I get to the student-specific property here, oh, you know, I already, I just asked, but I already forgot that it was a student, so I don't get to. If only we were type script, you know, type script, it has flow-based typing, you know, a variable, you know, if you figured out it wasn't something on this branch, then, you know, it'll know you're something else, and it's beautiful, but we can't, that's, oh, we're super-breaking in C-sharp, and also their compiler is, you know, just thank God that they don't promise type safety, let me just put it like that, so that is kind of annoying, what to do, well, you know, in C-sharp 6, your best option is to, you know, cast P to student, knowing it will succeed, because you're smarter than the compiler, until you maintain your code a little bit, and I know somebody else takes over, and they do a refactoring manually, and stuff blows up, but that, we can do that, and then there's an else, you know, else return that other stuff, let's just get it in there, so we can, so we can mutate the code a little bit, return that stuff, and of course there would be else ifs for every other, like, derived class here, so here we get to do p.this and p.that, so far so good, but functional languages, they do this all the time, and it's interesting to note that there's a fundamental difference in how the, you know, what kind of contract you have here, when you use opti-growing programming, as I said, you can add a new class whenever you want, and you can just overwrite that virtual method, and everyone's happy, right, because the code and the class are together, if you add a new type, like, in this functional setting, you are explicitly in the function, you are mentioning all the different shapes that you care about, and if somebody adds another shape of data, and you know, your code is no longer handling that, so there's a different, you can't add new data with impunity, but you can add new functions with impunity, which you can't do in the opti-growing world, you can't go without going back and editing the original, right, you can't independently add new functions in opti-growing programming, but you can add new types, in functional programming, you can't independently add new types, but you can add new functions, this really is a duality, but they do the other things so well, and what is it they do, well, they do pattern matching, so the first step there is, let's actually let you declare a variable inside of this expression, you know, after this expression, that's actually let you put a variable name, and say, okay, I just checked, can I just get a name for that, can I get a receipt, and you use that throughout here, and that is your P typed a student with its own name, and now we can, we can, you know, we're not dying inside anymore, if I can, at least if I can, what, oh no, what's that, yes, it was the wrong province, no, yes, thank you, thank you, I'm code blind, thank god I only have six minutes left, oh my god, I only have six minutes left, so what we're getting into is pattern matching, and pattern matching is this whole new concept that we're adding to C-sharp at this point, but it's not new in the global sense, it's a well-trodden path in functional programming, we just have to adapt it to an object-oriented context, and this is a pattern, a pattern is something that can either succeed or not when you apply it to a value, and if it succeeds, it can extract some extra information and put it in variables for you, that's what a pattern is, and we have a few patterns from the beginning in C-sharp 7, and then we start adding some more along the way, and we keep, we're still adding patterns to this date, like C-sharp 11 has list patterns, which you will, if you go to the other talk, you'll get to see those, but it's still like the shape of the code, like we solved the micro problem, but the larger problem of if, you know, having a very imperative way of checking, that's also very like a kind of fraud with danger in terms of maintenance and so on, what we want along with pattern matching is we want what functional programming often calls matching, pattern matching, we have a keyword already called switch, so we're using that one, so let me go and just, you know, do this again, so I'm gonna do it in a functional way, let's just, we can comment this out, so we're gonna do just an expression body, we're gonna take the person, and we're gonna switch on them, but not with an old-fashioned clunky switch statement from C in the early 60s that we have in C-sharp, but with a switch expression, you know, like the cool kids, so this is an expression body, that's a switch expression, it's empty right now, that's actually okay, but you get a warning saying you're not handling all the different kinds of input, yeah, okay, thank you, so and now we can write patterns directly here, student S, arrow, and now we can just put an expression for the result that you want in case it is a student, right, so I can, I now have like a clean structure within which I can just list comma separated patterns and results, and I, right now I only need the two, so we're gonna take, we're gonna just do this for now, and then just quickly touch on the fact that patterns can be, pattern matching is smarter, right, we saw that it said that you were not handling all the cases, it still did that when we only had the, when we only had the student, but when I do a catch-all, which I can do with a fancy modern discard, then it says, hey, you're handling everything, you're good, no more warning, well, what if I go the other way, like let's just, let's just swap the order of these two, they are in order, then I actually get an error saying, hey, you handled, you handled this case already, so, so you can see how maintenance of these things becomes much, not only is it clear to read, but the compiler is helping you much more, keep your logic straight, so it's beautiful, and it's safe, that sounds like functional to me, so, so you can do that, but you know, you're noticing, I'm actually writing out just the first letter of the first name, and in this case here, actually, what if the, what if the first name is empty, I'm not going to talk about null right now, that's a whole nother talk, but what if it's empty, that's kind of, you know, I should probably do something else if it's empty, so let's, let's use, just to show an example of a recursive pattern, I know now that it's just a person, but what if the first name of that person actually is an empty string, I want to do something else, and I just want to write out the last name, I don't want to, like, do the whole abbreviation thing, p dot last name, or, you know, I could actually, so this is a property pattern, I can dig out specific properties inside of the pattern and recursively apply a pattern, here I'm just applying the pattern, I use this constant, but I could also say last name, colon, and then apply a var pattern, which always succeeds, but which will give you a name, so that's your let, that's your pattern let, it's the var pattern, and then instead of saying p dot last name here, I already dug out the last name and I gave it a name, so I can just say l here, so, and these things compose, you know, if I wanted the actual, if I wanted a new name for the the person object itself, I could put it here, let's call it p2 or whatever, so, so patterns kind of compose, and over time we've added more and more kinds of them, that essentially make them more and more expressive, and allow you to put more and more of your logic into patterns, so that your shape dependent code is now as beautiful, or some would say even more, I don't, but, you know, it's a great beautiful first-class alternative to virtual methods, when you, when describing the functionality on the outside is what you want to do, you do pay something, you pay the fact that you can't willy-nilly add new types, you pay the fact that your data has to be public, so that it can be operated on from the outside, so encapsulation is at the window, but you get this other beauty, so, you know, pick your poison, depending on the scenario, now you have both obstinacy sharp, and I also wanted to mention immutability, but I just did, we did work for immutability, first we let you have auto properties without setters, but that wasn't so good for the, for the object initializers, now there's a more, now you have a new kind of setter, it's called an initter, which is the setter that can only be called from object initializers, and now, so that means we made immutable objects more first-class, you don't need to initialize them with constructors, you can use object initializers for those as well, immutability is another functional concept that we're starting to support more, so I'm going to stop here in the C-sharp 7s, and if you want to see some C-sharp 11 functional influence, you know, there's another talk, and just an hour and a half or whatever, and for now, thank you very much. you", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.76, "text": " Wow, let's see. It recognizes me even with this fancy mic on. So, Windows Hello, yay.", "tokens": [50364, 3153, 11, 718, 311, 536, 13, 467, 26564, 385, 754, 365, 341, 10247, 3123, 322, 13, 407, 11, 8591, 2425, 11, 23986, 13, 50802], "temperature": 0.0, "avg_logprob": -0.2702346480036356, "compression_ratio": 1.356020942408377, "no_speech_prob": 0.3182359039783478}, {"id": 1, "seek": 0, "start": 8.76, "end": 16.56, "text": " Doesn't it? Or did it just, like, turn off? It wants, no, it didn't. It wants a pin. At", "tokens": [50802, 12955, 380, 309, 30, 1610, 630, 309, 445, 11, 411, 11, 1261, 766, 30, 467, 2738, 11, 572, 11, 309, 994, 380, 13, 467, 2738, 257, 5447, 13, 1711, 51192], "temperature": 0.0, "avg_logprob": -0.2702346480036356, "compression_ratio": 1.356020942408377, "no_speech_prob": 0.3182359039783478}, {"id": 2, "seek": 0, "start": 16.56, "end": 24.6, "text": " least it's not showing you my pin. There we go. Okay. This is my intro slide. My name", "tokens": [51192, 1935, 309, 311, 406, 4099, 291, 452, 5447, 13, 821, 321, 352, 13, 1033, 13, 639, 307, 452, 12897, 4137, 13, 1222, 1315, 51594], "temperature": 0.0, "avg_logprob": -0.2702346480036356, "compression_ratio": 1.356020942408377, "no_speech_prob": 0.3182359039783478}, {"id": 3, "seek": 2460, "start": 24.6, "end": 34.28, "text": " is Mess Torgerson, or Mess Torwassen, or Mutz Torgerson, or something like that. I", "tokens": [50364, 307, 376, 442, 314, 4646, 3953, 11, 420, 376, 442, 7160, 86, 8356, 11, 420, 376, 12950, 314, 4646, 3953, 11, 420, 746, 411, 300, 13, 286, 50848], "temperature": 0.0, "avg_logprob": -0.2883578246494509, "compression_ratio": 1.5622119815668203, "no_speech_prob": 0.02834315039217472}, {"id": 4, "seek": 2460, "start": 34.28, "end": 38.68, "text": " know we didn't friends out there are going to kill me. They're going to take a blue", "tokens": [50848, 458, 321, 994, 380, 1855, 484, 456, 366, 516, 281, 1961, 385, 13, 814, 434, 516, 281, 747, 257, 3344, 51068], "temperature": 0.0, "avg_logprob": -0.2883578246494509, "compression_ratio": 1.5622119815668203, "no_speech_prob": 0.02834315039217472}, {"id": 5, "seek": 2460, "start": 38.68, "end": 47.24, "text": " sharpie to that one after. So, I work on the C-sharp language every day for Microsoft.", "tokens": [51068, 8199, 414, 281, 300, 472, 934, 13, 407, 11, 286, 589, 322, 264, 383, 12, 2716, 6529, 2856, 633, 786, 337, 8116, 13, 51496], "temperature": 0.0, "avg_logprob": -0.2883578246494509, "compression_ratio": 1.5622119815668203, "no_speech_prob": 0.02834315039217472}, {"id": 6, "seek": 2460, "start": 47.24, "end": 53.480000000000004, "text": " It's a great job. I wish you could all have it, but it's mine. So, and I've done that", "tokens": [51496, 467, 311, 257, 869, 1691, 13, 286, 3172, 291, 727, 439, 362, 309, 11, 457, 309, 311, 3892, 13, 407, 11, 293, 286, 600, 1096, 300, 51808], "temperature": 0.0, "avg_logprob": -0.2883578246494509, "compression_ratio": 1.5622119815668203, "no_speech_prob": 0.02834315039217472}, {"id": 7, "seek": 5348, "start": 53.48, "end": 59.44, "text": " for a very long time. So, that means I remember things that nobody else remembers, almost.", "tokens": [50364, 337, 257, 588, 938, 565, 13, 407, 11, 300, 1355, 286, 1604, 721, 300, 5079, 1646, 26228, 11, 1920, 13, 50662], "temperature": 0.0, "avg_logprob": -0.20841528819157526, "compression_ratio": 1.5474137931034482, "no_speech_prob": 0.03144485503435135}, {"id": 8, "seek": 5348, "start": 59.44, "end": 66.16, "text": " Except for Anders, as we call him, who was there from the beginning. I was not. I was", "tokens": [50662, 16192, 337, 33988, 11, 382, 321, 818, 796, 11, 567, 390, 456, 490, 264, 2863, 13, 286, 390, 406, 13, 286, 390, 50998], "temperature": 0.0, "avg_logprob": -0.20841528819157526, "compression_ratio": 1.5474137931034482, "no_speech_prob": 0.03144485503435135}, {"id": 9, "seek": 5348, "start": 66.16, "end": 72.24, "text": " a latecomer. I've only been there for 17 years. But it is an old language. We are now working", "tokens": [50998, 257, 3469, 1112, 260, 13, 286, 600, 787, 668, 456, 337, 3282, 924, 13, 583, 309, 307, 364, 1331, 2856, 13, 492, 366, 586, 1364, 51302], "temperature": 0.0, "avg_logprob": -0.20841528819157526, "compression_ratio": 1.5474137931034482, "no_speech_prob": 0.03144485503435135}, {"id": 10, "seek": 5348, "start": 72.24, "end": 80.52, "text": " on C-sharp 11, and there's a whole other talk about C-sharp 11 a little later today. So,", "tokens": [51302, 322, 383, 12, 2716, 6529, 2975, 11, 293, 456, 311, 257, 1379, 661, 751, 466, 383, 12, 2716, 6529, 2975, 257, 707, 1780, 965, 13, 407, 11, 51716], "temperature": 0.0, "avg_logprob": -0.20841528819157526, "compression_ratio": 1.5474137931034482, "no_speech_prob": 0.03144485503435135}, {"id": 11, "seek": 8052, "start": 80.52, "end": 88.6, "text": " I decided I want to talk about C-sharp 1 through 10 today. It's from the angle of how", "tokens": [50364, 286, 3047, 286, 528, 281, 751, 466, 383, 12, 2716, 6529, 502, 807, 1266, 965, 13, 467, 311, 490, 264, 5802, 295, 577, 50768], "temperature": 0.0, "avg_logprob": -0.15100947741804452, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.005706758238375187}, {"id": 12, "seek": 8052, "start": 88.6, "end": 94.11999999999999, "text": " has functional programming influenced C-sharp over the years. I'm hoping that's interesting", "tokens": [50768, 575, 11745, 9410, 15269, 383, 12, 2716, 6529, 670, 264, 924, 13, 286, 478, 7159, 300, 311, 1880, 51044], "temperature": 0.0, "avg_logprob": -0.15100947741804452, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.005706758238375187}, {"id": 13, "seek": 8052, "start": 94.11999999999999, "end": 97.16, "text": " to you. Otherwise, that's a lot of people I'll be disappointing today, because it's", "tokens": [51044, 281, 291, 13, 10328, 11, 300, 311, 257, 688, 295, 561, 286, 603, 312, 25054, 965, 11, 570, 309, 311, 51196], "temperature": 0.0, "avg_logprob": -0.15100947741804452, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.005706758238375187}, {"id": 14, "seek": 8052, "start": 97.16, "end": 102.36, "text": " a very full room. I don't know how many are out there, but you can still run without me", "tokens": [51196, 257, 588, 1577, 1808, 13, 286, 500, 380, 458, 577, 867, 366, 484, 456, 11, 457, 291, 393, 920, 1190, 1553, 385, 51456], "temperature": 0.0, "avg_logprob": -0.15100947741804452, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.005706758238375187}, {"id": 15, "seek": 8052, "start": 102.36, "end": 109.64, "text": " noticing unlike these people in here. So, I think it's interesting, because C-sharp started", "tokens": [51456, 21814, 8343, 613, 561, 294, 510, 13, 407, 11, 286, 519, 309, 311, 1880, 11, 570, 383, 12, 2716, 6529, 1409, 51820], "temperature": 0.0, "avg_logprob": -0.15100947741804452, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.005706758238375187}, {"id": 16, "seek": 10964, "start": 109.64, "end": 118.0, "text": " out as a fairly typical of its age, fairly straightforward object going into imperative", "tokens": [50364, 484, 382, 257, 6457, 7476, 295, 1080, 3205, 11, 6457, 15325, 2657, 516, 666, 32490, 50782], "temperature": 0.0, "avg_logprob": -0.17335161321303424, "compression_ratio": 1.5733333333333333, "no_speech_prob": 0.008610105141997337}, {"id": 17, "seek": 10964, "start": 118.0, "end": 122.56, "text": " programming language. That was how it started. They didn't kind of just pull that out of", "tokens": [50782, 9410, 2856, 13, 663, 390, 577, 309, 1409, 13, 814, 994, 380, 733, 295, 445, 2235, 300, 484, 295, 51010], "temperature": 0.0, "avg_logprob": -0.17335161321303424, "compression_ratio": 1.5733333333333333, "no_speech_prob": 0.008610105141997337}, {"id": 18, "seek": 10964, "start": 122.56, "end": 128.24, "text": " the blue, of course. There were other languages around at the time that were similar. That", "tokens": [51010, 264, 3344, 11, 295, 1164, 13, 821, 645, 661, 8650, 926, 412, 264, 565, 300, 645, 2531, 13, 663, 51294], "temperature": 0.0, "avg_logprob": -0.17335161321303424, "compression_ratio": 1.5733333333333333, "no_speech_prob": 0.008610105141997337}, {"id": 19, "seek": 10964, "start": 128.24, "end": 135.36, "text": " C-sharp might happen to look a little like, by accident. But that was sort of like the", "tokens": [51294, 383, 12, 2716, 6529, 1062, 1051, 281, 574, 257, 707, 411, 11, 538, 6398, 13, 583, 300, 390, 1333, 295, 411, 264, 51650], "temperature": 0.0, "avg_logprob": -0.17335161321303424, "compression_ratio": 1.5733333333333333, "no_speech_prob": 0.008610105141997337}, {"id": 20, "seek": 13536, "start": 135.36, "end": 140.60000000000002, "text": " game of the day. So, C-sharp was typical of the day, and kind of pretty much took almost", "tokens": [50364, 1216, 295, 264, 786, 13, 407, 11, 383, 12, 2716, 6529, 390, 7476, 295, 264, 786, 11, 293, 733, 295, 1238, 709, 1890, 1920, 50626], "temperature": 0.0, "avg_logprob": -0.14251874840777853, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.5007122159004211}, {"id": 21, "seek": 13536, "start": 140.60000000000002, "end": 146.60000000000002, "text": " all the functional things in along the way as they became relevant to how we do programming.", "tokens": [50626, 439, 264, 11745, 721, 294, 2051, 264, 636, 382, 436, 3062, 7340, 281, 577, 321, 360, 9410, 13, 50926], "temperature": 0.0, "avg_logprob": -0.14251874840777853, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.5007122159004211}, {"id": 22, "seek": 13536, "start": 146.60000000000002, "end": 150.92000000000002, "text": " So, I'm going to go through that same evolution essentially today and point out some of the", "tokens": [50926, 407, 11, 286, 478, 516, 281, 352, 807, 300, 912, 9303, 4476, 965, 293, 935, 484, 512, 295, 264, 51142], "temperature": 0.0, "avg_logprob": -0.14251874840777853, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.5007122159004211}, {"id": 23, "seek": 13536, "start": 150.92000000000002, "end": 155.16000000000003, "text": " different ways. I'll try to make some general points about programming language paradigms", "tokens": [51142, 819, 2098, 13, 286, 603, 853, 281, 652, 512, 2674, 2793, 466, 9410, 2856, 13480, 328, 2592, 51354], "temperature": 0.0, "avg_logprob": -0.14251874840777853, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.5007122159004211}, {"id": 24, "seek": 13536, "start": 155.16000000000003, "end": 159.76000000000002, "text": " and so on along the way. But it's all going to be a little bit, I'm going to do it all", "tokens": [51354, 293, 370, 322, 2051, 264, 636, 13, 583, 309, 311, 439, 516, 281, 312, 257, 707, 857, 11, 286, 478, 516, 281, 360, 309, 439, 51584], "temperature": 0.0, "avg_logprob": -0.14251874840777853, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.5007122159004211}, {"id": 25, "seek": 15976, "start": 159.76, "end": 166.28, "text": " in Visual Studio. I'm just going to code along. And so, and I forgot to print out my demo", "tokens": [50364, 294, 23187, 13500, 13, 286, 478, 445, 516, 281, 3089, 2051, 13, 400, 370, 11, 293, 286, 5298, 281, 4482, 484, 452, 10723, 50690], "temperature": 0.0, "avg_logprob": -0.18255460487221772, "compression_ratio": 1.502092050209205, "no_speech_prob": 0.6599294543266296}, {"id": 26, "seek": 15976, "start": 166.28, "end": 174.23999999999998, "text": " notes. So, may I go astray? It'll be a little bit of a one-off. We do have an hour, which", "tokens": [50690, 5570, 13, 407, 11, 815, 286, 352, 5357, 3458, 30, 467, 603, 312, 257, 707, 857, 295, 257, 472, 12, 4506, 13, 492, 360, 362, 364, 1773, 11, 597, 51088], "temperature": 0.0, "avg_logprob": -0.18255460487221772, "compression_ratio": 1.502092050209205, "no_speech_prob": 0.6599294543266296}, {"id": 27, "seek": 15976, "start": 174.23999999999998, "end": 180.64, "text": " means that there's time for a few questions along the way, not like a million. But I don't", "tokens": [51088, 1355, 300, 456, 311, 565, 337, 257, 1326, 1651, 2051, 264, 636, 11, 406, 411, 257, 2459, 13, 583, 286, 500, 380, 51408], "temperature": 0.0, "avg_logprob": -0.18255460487221772, "compression_ratio": 1.502092050209205, "no_speech_prob": 0.6599294543266296}, {"id": 28, "seek": 15976, "start": 180.64, "end": 185.88, "text": " want you to say, oh, I want to ask a question about that when he's done talking. Because", "tokens": [51408, 528, 291, 281, 584, 11, 1954, 11, 286, 528, 281, 1029, 257, 1168, 466, 300, 562, 415, 311, 1096, 1417, 13, 1436, 51670], "temperature": 0.0, "avg_logprob": -0.18255460487221772, "compression_ratio": 1.502092050209205, "no_speech_prob": 0.6599294543266296}, {"id": 29, "seek": 18588, "start": 185.96, "end": 189.92, "text": " by then, the code will look different. Nobody will remember what I was talking about. So,", "tokens": [50368, 538, 550, 11, 264, 3089, 486, 574, 819, 13, 9297, 486, 1604, 437, 286, 390, 1417, 466, 13, 407, 11, 50566], "temperature": 0.0, "avg_logprob": -0.1687032381693522, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.29632747173309326}, {"id": 30, "seek": 18588, "start": 189.92, "end": 194.84, "text": " if you have a question, raise your hand and ask it. And I'll try to keep us on track. And", "tokens": [50566, 498, 291, 362, 257, 1168, 11, 5300, 428, 1011, 293, 1029, 309, 13, 400, 286, 603, 853, 281, 1066, 505, 322, 2837, 13, 400, 50812], "temperature": 0.0, "avg_logprob": -0.1687032381693522, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.29632747173309326}, {"id": 31, "seek": 18588, "start": 194.84, "end": 199.07999999999998, "text": " hopefully I'll succeed. And that might mean that I will have to be a little rude and say,", "tokens": [50812, 4696, 286, 603, 7754, 13, 400, 300, 1062, 914, 300, 286, 486, 362, 281, 312, 257, 707, 18895, 293, 584, 11, 51024], "temperature": 0.0, "avg_logprob": -0.1687032381693522, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.29632747173309326}, {"id": 32, "seek": 18588, "start": 199.07999999999998, "end": 203.6, "text": " sorry, no more questions. Come back after. So, just don't be offended when I get to there.", "tokens": [51024, 2597, 11, 572, 544, 1651, 13, 2492, 646, 934, 13, 407, 11, 445, 500, 380, 312, 26776, 562, 286, 483, 281, 456, 13, 51250], "temperature": 0.0, "avg_logprob": -0.1687032381693522, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.29632747173309326}, {"id": 33, "seek": 18588, "start": 203.6, "end": 212.35999999999999, "text": " But until then, please just raise a question and ask. So, with that, without much further", "tokens": [51250, 583, 1826, 550, 11, 1767, 445, 5300, 257, 1168, 293, 1029, 13, 407, 11, 365, 300, 11, 1553, 709, 3052, 51688], "temperature": 0.0, "avg_logprob": -0.1687032381693522, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.29632747173309326}, {"id": 34, "seek": 21236, "start": 212.36, "end": 220.52, "text": " ado, let's start out with C-Sharp 1. And just kind of, for those of us who were around, remind", "tokens": [50364, 22450, 11, 718, 311, 722, 484, 365, 383, 12, 50, 5854, 79, 502, 13, 400, 445, 733, 295, 11, 337, 729, 295, 505, 567, 645, 926, 11, 4160, 50772], "temperature": 0.0, "avg_logprob": -0.23767075029391688, "compression_ratio": 1.65625, "no_speech_prob": 0.5478057265281677}, {"id": 35, "seek": 21236, "start": 220.52, "end": 228.68, "text": " ourselves of the state of the art of programming, at least in the industrial space in the year", "tokens": [50772, 4175, 295, 264, 1785, 295, 264, 1523, 295, 9410, 11, 412, 1935, 294, 264, 9987, 1901, 294, 264, 1064, 51180], "temperature": 0.0, "avg_logprob": -0.23767075029391688, "compression_ratio": 1.65625, "no_speech_prob": 0.5478057265281677}, {"id": 36, "seek": 21236, "start": 228.68, "end": 234.88000000000002, "text": " 2000. And for those of you who weren't around, you can just go, thank God I wasn't around.", "tokens": [51180, 8132, 13, 400, 337, 729, 295, 291, 567, 4999, 380, 926, 11, 291, 393, 445, 352, 11, 1309, 1265, 286, 2067, 380, 926, 13, 51490], "temperature": 0.0, "avg_logprob": -0.23767075029391688, "compression_ratio": 1.65625, "no_speech_prob": 0.5478057265281677}, {"id": 37, "seek": 21236, "start": 234.88000000000002, "end": 241.72000000000003, "text": " I mean, you were probably around most of you, but maybe you were still doing Legos. Aren't", "tokens": [51490, 286, 914, 11, 291, 645, 1391, 926, 881, 295, 291, 11, 457, 1310, 291, 645, 920, 884, 7470, 329, 13, 15464, 380, 51832], "temperature": 0.0, "avg_logprob": -0.23767075029391688, "compression_ratio": 1.65625, "no_speech_prob": 0.5478057265281677}, {"id": 38, "seek": 24172, "start": 241.72, "end": 249.96, "text": " we all really? So, what I have here is a fairly simple. It's a C-Sharp 1 program. I'm cheating", "tokens": [50364, 321, 439, 534, 30, 407, 11, 437, 286, 362, 510, 307, 257, 6457, 2199, 13, 467, 311, 257, 383, 12, 50, 5854, 79, 502, 1461, 13, 286, 478, 18309, 50776], "temperature": 0.0, "avg_logprob": -0.1452042715890067, "compression_ratio": 1.6655052264808363, "no_speech_prob": 0.008962093852460384}, {"id": 39, "seek": 24172, "start": 249.96, "end": 256.32, "text": " a little bit because when it comes to features that aren't part of this talk, that aren't functional,", "tokens": [50776, 257, 707, 857, 570, 562, 309, 1487, 281, 4122, 300, 3212, 380, 644, 295, 341, 751, 11, 300, 3212, 380, 11745, 11, 51094], "temperature": 0.0, "avg_logprob": -0.1452042715890067, "compression_ratio": 1.6655052264808363, "no_speech_prob": 0.008962093852460384}, {"id": 40, "seek": 24172, "start": 256.32, "end": 260.16, "text": " I'm just going to use them a little bit anyway. For instance, my code is not in a main method.", "tokens": [51094, 286, 478, 445, 516, 281, 764, 552, 257, 707, 857, 4033, 13, 1171, 5197, 11, 452, 3089, 307, 406, 294, 257, 2135, 3170, 13, 51286], "temperature": 0.0, "avg_logprob": -0.1452042715890067, "compression_ratio": 1.6655052264808363, "no_speech_prob": 0.008962093852460384}, {"id": 41, "seek": 24172, "start": 260.16, "end": 264.68, "text": " You don't need to do that anymore in C-Sharp. And it fits better on a screen if I don't. So,", "tokens": [51286, 509, 500, 380, 643, 281, 360, 300, 3602, 294, 383, 12, 50, 5854, 79, 13, 400, 309, 9001, 1101, 322, 257, 2568, 498, 286, 500, 380, 13, 407, 11, 51512], "temperature": 0.0, "avg_logprob": -0.1452042715890067, "compression_ratio": 1.6655052264808363, "no_speech_prob": 0.008962093852460384}, {"id": 42, "seek": 24172, "start": 264.68, "end": 270.8, "text": " I'm not going to stick religiously to only C-Sharp 1 features. But in terms of functionality,", "tokens": [51512, 286, 478, 406, 516, 281, 2897, 7185, 356, 281, 787, 383, 12, 50, 5854, 79, 502, 4122, 13, 583, 294, 2115, 295, 14980, 11, 51818], "temperature": 0.0, "avg_logprob": -0.1452042715890067, "compression_ratio": 1.6655052264808363, "no_speech_prob": 0.008962093852460384}, {"id": 43, "seek": 27080, "start": 270.88, "end": 279.8, "text": " I am. So, one thing to, talking about functional, C-Sharp started out with just a tiny little hint", "tokens": [50368, 286, 669, 13, 407, 11, 472, 551, 281, 11, 1417, 466, 11745, 11, 383, 12, 50, 5854, 79, 1409, 484, 365, 445, 257, 5870, 707, 12075, 50814], "temperature": 0.0, "avg_logprob": -0.21888724850936675, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.007194794248789549}, {"id": 44, "seek": 27080, "start": 279.8, "end": 286.44, "text": " of, a tiny little concession to functional programming languages compared to other languages", "tokens": [50814, 295, 11, 257, 5870, 707, 416, 29881, 281, 11745, 9410, 8650, 5347, 281, 661, 8650, 51146], "temperature": 0.0, "avg_logprob": -0.21888724850936675, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.007194794248789549}, {"id": 45, "seek": 27080, "start": 286.44, "end": 293.76, "text": " at the time. And with something that they, we call delegates, which is sort of kind of like a", "tokens": [51146, 412, 264, 565, 13, 400, 365, 746, 300, 436, 11, 321, 818, 45756, 11, 597, 307, 1333, 295, 733, 295, 411, 257, 51512], "temperature": 0.0, "avg_logprob": -0.21888724850936675, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.007194794248789549}, {"id": 46, "seek": 29376, "start": 293.8, "end": 301.44, "text": " function type. They were actually part of some of the, the need for delegates was part of the", "tokens": [50366, 2445, 2010, 13, 814, 645, 767, 644, 295, 512, 295, 264, 11, 264, 643, 337, 45756, 390, 644, 295, 264, 50748], "temperature": 0.0, "avg_logprob": -0.14542706807454428, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.040771715342998505}, {"id": 47, "seek": 29376, "start": 301.44, "end": 305.52, "text": " reason why we couldn't do some other programming languages and got dragged into court and stuff.", "tokens": [50748, 1778, 983, 321, 2809, 380, 360, 512, 661, 9410, 8650, 293, 658, 25717, 666, 4753, 293, 1507, 13, 50952], "temperature": 0.0, "avg_logprob": -0.14542706807454428, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.040771715342998505}, {"id": 48, "seek": 29376, "start": 305.52, "end": 312.52, "text": " So, C-Sharp back then already had like a notion of a function type called delegate. And those are", "tokens": [50952, 407, 11, 383, 12, 50, 5854, 79, 646, 550, 1217, 632, 411, 257, 10710, 295, 257, 2445, 2010, 1219, 40999, 13, 400, 729, 366, 51302], "temperature": 0.0, "avg_logprob": -0.14542706807454428, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.040771715342998505}, {"id": 49, "seek": 29376, "start": 312.52, "end": 318.12, "text": " still the ones that we use for function types. They're flawed in various ways, but you know,", "tokens": [51302, 920, 264, 2306, 300, 321, 764, 337, 2445, 3467, 13, 814, 434, 38823, 294, 3683, 2098, 11, 457, 291, 458, 11, 51582], "temperature": 0.0, "avg_logprob": -0.14542706807454428, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.040771715342998505}, {"id": 50, "seek": 31812, "start": 318.28000000000003, "end": 323.64, "text": " once you've got something throughout the whole core libraries and so on, you don't go on and", "tokens": [50372, 1564, 291, 600, 658, 746, 3710, 264, 1379, 4965, 15148, 293, 370, 322, 11, 291, 500, 380, 352, 322, 293, 50640], "temperature": 0.0, "avg_logprob": -0.1198919967368797, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.01565576158463955}, {"id": 51, "seek": 31812, "start": 323.64, "end": 327.8, "text": " change it. So, delegate types were function types. It's like, you know, this is the type of a", "tokens": [50640, 1319, 309, 13, 407, 11, 40999, 3467, 645, 2445, 3467, 13, 467, 311, 411, 11, 291, 458, 11, 341, 307, 264, 2010, 295, 257, 50848], "temperature": 0.0, "avg_logprob": -0.1198919967368797, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.01565576158463955}, {"id": 52, "seek": 31812, "start": 327.8, "end": 333.16, "text": " function that takes an int and returns a bool. And it's a name type, like a class. It is in fact a", "tokens": [50848, 2445, 300, 2516, 364, 560, 293, 11247, 257, 748, 401, 13, 400, 309, 311, 257, 1315, 2010, 11, 411, 257, 1508, 13, 467, 307, 294, 1186, 257, 51116], "temperature": 0.0, "avg_logprob": -0.1198919967368797, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.01565576158463955}, {"id": 53, "seek": 31812, "start": 333.16, "end": 340.2, "text": " class. And we call it predicate. And now we can use it as a function type. So, I can have a method", "tokens": [51116, 1508, 13, 400, 321, 818, 309, 3852, 8700, 13, 400, 586, 321, 393, 764, 309, 382, 257, 2445, 2010, 13, 407, 11, 286, 393, 362, 257, 3170, 51468], "temperature": 0.0, "avg_logprob": -0.1198919967368797, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.01565576158463955}, {"id": 54, "seek": 34020, "start": 340.2, "end": 348.44, "text": " here, a function that takes a predicate. And it can call the predicate as the, you know, according", "tokens": [50364, 510, 11, 257, 2445, 300, 2516, 257, 3852, 8700, 13, 400, 309, 393, 818, 264, 3852, 8700, 382, 264, 11, 291, 458, 11, 4650, 50776], "temperature": 0.0, "avg_logprob": -0.13031338282993862, "compression_ratio": 1.7280701754385965, "no_speech_prob": 0.04530399292707443}, {"id": 55, "seek": 34020, "start": 348.44, "end": 354.12, "text": " to the function type. But, and when I want to pass an argument to it, well, we don't have anything", "tokens": [50776, 281, 264, 2445, 2010, 13, 583, 11, 293, 562, 286, 528, 281, 1320, 364, 6770, 281, 309, 11, 731, 11, 321, 500, 380, 362, 1340, 51060], "temperature": 0.0, "avg_logprob": -0.13031338282993862, "compression_ratio": 1.7280701754385965, "no_speech_prob": 0.04530399292707443}, {"id": 56, "seek": 34020, "start": 354.12, "end": 358.28, "text": " like lambdas yet that we're going to get to that. We don't have like anonymous functions of any kind.", "tokens": [51060, 411, 10097, 27476, 1939, 300, 321, 434, 516, 281, 483, 281, 300, 13, 492, 500, 380, 362, 411, 24932, 6828, 295, 604, 733, 13, 51268], "temperature": 0.0, "avg_logprob": -0.13031338282993862, "compression_ratio": 1.7280701754385965, "no_speech_prob": 0.04530399292707443}, {"id": 57, "seek": 34020, "start": 358.28, "end": 363.32, "text": " But we do have, we, but you can sort of just mention a function that happens to have the right", "tokens": [51268, 583, 321, 360, 362, 11, 321, 11, 457, 291, 393, 1333, 295, 445, 2152, 257, 2445, 300, 2314, 281, 362, 264, 558, 51520], "temperature": 0.0, "avg_logprob": -0.13031338282993862, "compression_ratio": 1.7280701754385965, "no_speech_prob": 0.04530399292707443}, {"id": 58, "seek": 36332, "start": 364.04, "end": 368.59999999999997, "text": " signature, like great than five. Hang on a second.", "tokens": [50400, 13397, 11, 411, 869, 813, 1732, 13, 14070, 322, 257, 1150, 13, 50628], "temperature": 0.0, "avg_logprob": -0.16043662010355197, "compression_ratio": 1.6479591836734695, "no_speech_prob": 0.015420392155647278}, {"id": 59, "seek": 36332, "start": 371.48, "end": 376.28, "text": " Is it going to be like this all the way? How many typos are we going to have in here? There we go.", "tokens": [50772, 1119, 309, 516, 281, 312, 411, 341, 439, 264, 636, 30, 1012, 867, 2125, 329, 366, 321, 516, 281, 362, 294, 510, 30, 821, 321, 352, 13, 51012], "temperature": 0.0, "avg_logprob": -0.16043662010355197, "compression_ratio": 1.6479591836734695, "no_speech_prob": 0.015420392155647278}, {"id": 60, "seek": 36332, "start": 377.08, "end": 384.36, "text": " I did get the wordle this morning. So, I'm not like totally, there we go. So,", "tokens": [51052, 286, 630, 483, 264, 1349, 306, 341, 2446, 13, 407, 11, 286, 478, 406, 411, 3879, 11, 456, 321, 352, 13, 407, 11, 51416], "temperature": 0.0, "avg_logprob": -0.16043662010355197, "compression_ratio": 1.6479591836734695, "no_speech_prob": 0.015420392155647278}, {"id": 61, "seek": 36332, "start": 385.96, "end": 391.0, "text": " so you kind of have to declare a function, then pass it. You have to declare the function type,", "tokens": [51496, 370, 291, 733, 295, 362, 281, 19710, 257, 2445, 11, 550, 1320, 309, 13, 509, 362, 281, 19710, 264, 2445, 2010, 11, 51748], "temperature": 0.0, "avg_logprob": -0.16043662010355197, "compression_ratio": 1.6479591836734695, "no_speech_prob": 0.015420392155647278}, {"id": 62, "seek": 39100, "start": 391.0, "end": 394.6, "text": " then use it. Like it's all very nominal and declarative at this point.", "tokens": [50364, 550, 764, 309, 13, 1743, 309, 311, 439, 588, 41641, 293, 16694, 1166, 412, 341, 935, 13, 50544], "temperature": 0.0, "avg_logprob": -0.1263110676749808, "compression_ratio": 1.6357142857142857, "no_speech_prob": 0.011320134624838829}, {"id": 63, "seek": 39100, "start": 395.16, "end": 401.56, "text": " But it gets the job done. Like pass the predicate in. Of course, there's no such thing as generics", "tokens": [50572, 583, 309, 2170, 264, 1691, 1096, 13, 1743, 1320, 264, 3852, 8700, 294, 13, 2720, 1164, 11, 456, 311, 572, 1270, 551, 382, 1337, 1167, 50892], "temperature": 0.0, "avg_logprob": -0.1263110676749808, "compression_ratio": 1.6357142857142857, "no_speech_prob": 0.011320134624838829}, {"id": 64, "seek": 39100, "start": 401.56, "end": 405.8, "text": " yet. They're the first thing we're going to learn from functional programming languages in a minute.", "tokens": [50892, 1939, 13, 814, 434, 264, 700, 551, 321, 434, 516, 281, 1466, 490, 11745, 9410, 8650, 294, 257, 3456, 13, 51104], "temperature": 0.0, "avg_logprob": -0.1263110676749808, "compression_ratio": 1.6357142857142857, "no_speech_prob": 0.011320134624838829}, {"id": 65, "seek": 39100, "start": 405.8, "end": 413.16, "text": " So, you know, this was the name of the game. I do, you, in order to filter this, I need to", "tokens": [51104, 407, 11, 291, 458, 11, 341, 390, 264, 1315, 295, 264, 1216, 13, 286, 360, 11, 291, 11, 294, 1668, 281, 6608, 341, 11, 286, 643, 281, 51472], "temperature": 0.0, "avg_logprob": -0.1263110676749808, "compression_ratio": 1.6357142857142857, "no_speech_prob": 0.011320134624838829}, {"id": 66, "seek": 39100, "start": 413.16, "end": 418.76, "text": " gather up the results. The only, like I really wanted to return an array because that's the only", "tokens": [51472, 5448, 493, 264, 3542, 13, 440, 787, 11, 411, 286, 534, 1415, 281, 2736, 364, 10225, 570, 300, 311, 264, 787, 51752], "temperature": 0.0, "avg_logprob": -0.1263110676749808, "compression_ratio": 1.6357142857142857, "no_speech_prob": 0.011320134624838829}, {"id": 67, "seek": 41876, "start": 418.76, "end": 422.92, "text": " generic type I have. It's the only type that actually has an element type. So, that's, so you", "tokens": [50364, 19577, 2010, 286, 362, 13, 467, 311, 264, 787, 2010, 300, 767, 575, 364, 4478, 2010, 13, 407, 11, 300, 311, 11, 370, 291, 50572], "temperature": 0.0, "avg_logprob": -0.13097966344732986, "compression_ratio": 1.8242811501597445, "no_speech_prob": 0.012222284451127052}, {"id": 68, "seek": 41876, "start": 422.92, "end": 428.03999999999996, "text": " kind of, you kind of encourage to trade in arrays, horrible as that is, because otherwise you have", "tokens": [50572, 733, 295, 11, 291, 733, 295, 5373, 281, 4923, 294, 41011, 11, 9263, 382, 300, 307, 11, 570, 5911, 291, 362, 50828], "temperature": 0.0, "avg_logprob": -0.13097966344732986, "compression_ratio": 1.8242811501597445, "no_speech_prob": 0.012222284451127052}, {"id": 69, "seek": 41876, "start": 428.03999999999996, "end": 434.28, "text": " no type safety. But we do have other collections. They're just all over object. So, and, and I need", "tokens": [50828, 572, 2010, 4514, 13, 583, 321, 360, 362, 661, 16641, 13, 814, 434, 445, 439, 670, 2657, 13, 407, 11, 293, 11, 293, 286, 643, 51140], "temperature": 0.0, "avg_logprob": -0.13097966344732986, "compression_ratio": 1.8242811501597445, "no_speech_prob": 0.012222284451127052}, {"id": 70, "seek": 41876, "start": 434.28, "end": 437.56, "text": " to create one of those to gather up my elements because I don't know how many are going to", "tokens": [51140, 281, 1884, 472, 295, 729, 281, 5448, 493, 452, 4959, 570, 286, 500, 380, 458, 577, 867, 366, 516, 281, 51304], "temperature": 0.0, "avg_logprob": -0.13097966344732986, "compression_ratio": 1.8242811501597445, "no_speech_prob": 0.012222284451127052}, {"id": 71, "seek": 41876, "start": 437.56, "end": 441.8, "text": " succeed yet. I don't know the size of the array to allocate. So, first I gather them up, then,", "tokens": [51304, 7754, 1939, 13, 286, 500, 380, 458, 264, 2744, 295, 264, 10225, 281, 35713, 13, 407, 11, 700, 286, 5448, 552, 493, 11, 550, 11, 51516], "temperature": 0.0, "avg_logprob": -0.13097966344732986, "compression_ratio": 1.8242811501597445, "no_speech_prob": 0.012222284451127052}, {"id": 72, "seek": 41876, "start": 441.8, "end": 446.36, "text": " you know, I know how many I have, then I can allocate an array that's strongly typed to int,", "tokens": [51516, 291, 458, 11, 286, 458, 577, 867, 286, 362, 11, 550, 286, 393, 35713, 364, 10225, 300, 311, 10613, 33941, 281, 560, 11, 51744], "temperature": 0.0, "avg_logprob": -0.13097966344732986, "compression_ratio": 1.8242811501597445, "no_speech_prob": 0.012222284451127052}, {"id": 73, "seek": 44636, "start": 447.08000000000004, "end": 453.48, "text": " then I have to stick all the elements that I found into the array. And as I'm doing so,", "tokens": [50400, 550, 286, 362, 281, 2897, 439, 264, 4959, 300, 286, 1352, 666, 264, 10225, 13, 400, 382, 286, 478, 884, 370, 11, 50720], "temperature": 0.0, "avg_logprob": -0.15511406621625345, "compression_ratio": 1.691449814126394, "no_speech_prob": 0.001987041672691703}, {"id": 74, "seek": 44636, "start": 453.48, "end": 457.72, "text": " I have to cast them to int because I know they're all ints, but the compiler has no idea. It's like", "tokens": [50720, 286, 362, 281, 4193, 552, 281, 560, 570, 286, 458, 436, 434, 439, 560, 82, 11, 457, 264, 31958, 575, 572, 1558, 13, 467, 311, 411, 50932], "temperature": 0.0, "avg_logprob": -0.15511406621625345, "compression_ratio": 1.691449814126394, "no_speech_prob": 0.001987041672691703}, {"id": 75, "seek": 44636, "start": 457.72, "end": 462.04, "text": " you stuck, you give me a bunch of stuff, you're taking them out, all I can see is object.", "tokens": [50932, 291, 5541, 11, 291, 976, 385, 257, 3840, 295, 1507, 11, 291, 434, 1940, 552, 484, 11, 439, 286, 393, 536, 307, 2657, 13, 51148], "temperature": 0.0, "avg_logprob": -0.15511406621625345, "compression_ratio": 1.691449814126394, "no_speech_prob": 0.001987041672691703}, {"id": 76, "seek": 44636, "start": 463.8, "end": 467.72, "text": " So, you know, you die a little inside every time you have to cast things coming out of", "tokens": [51236, 407, 11, 291, 458, 11, 291, 978, 257, 707, 1854, 633, 565, 291, 362, 281, 4193, 721, 1348, 484, 295, 51432], "temperature": 0.0, "avg_logprob": -0.15511406621625345, "compression_ratio": 1.691449814126394, "no_speech_prob": 0.001987041672691703}, {"id": 77, "seek": 44636, "start": 467.72, "end": 471.32, "text": " collections. How many people in here remember that from like either C'sharp or some other,", "tokens": [51432, 16641, 13, 1012, 867, 561, 294, 510, 1604, 300, 490, 411, 2139, 383, 311, 5854, 79, 420, 512, 661, 11, 51612], "temperature": 0.0, "avg_logprob": -0.15511406621625345, "compression_ratio": 1.691449814126394, "no_speech_prob": 0.001987041672691703}, {"id": 78, "seek": 47132, "start": 471.32, "end": 480.28, "text": " like Java or, yeah, out, yeah. So, what, I think what we very quickly felt all of us was,", "tokens": [50364, 411, 10745, 420, 11, 1338, 11, 484, 11, 1338, 13, 407, 11, 437, 11, 286, 519, 437, 321, 588, 2661, 2762, 439, 295, 505, 390, 11, 50812], "temperature": 0.0, "avg_logprob": -0.14875237983569764, "compression_ratio": 1.6653696498054475, "no_speech_prob": 0.0024703526869416237}, {"id": 79, "seek": 47132, "start": 482.12, "end": 486.04, "text": " and with C'sharp, it was already like coming to version two, which we're coming to version two now.", "tokens": [50904, 293, 365, 383, 311, 5854, 79, 11, 309, 390, 1217, 411, 1348, 281, 3037, 732, 11, 597, 321, 434, 1348, 281, 3037, 732, 586, 13, 51100], "temperature": 0.0, "avg_logprob": -0.14875237983569764, "compression_ratio": 1.6653696498054475, "no_speech_prob": 0.0024703526869416237}, {"id": 80, "seek": 47132, "start": 487.0, "end": 491.88, "text": " We felt like, okay, this is not, this is not like a satisfactory state of affairs.", "tokens": [51148, 492, 2762, 411, 11, 1392, 11, 341, 307, 406, 11, 341, 307, 406, 411, 257, 48614, 1785, 295, 17478, 13, 51392], "temperature": 0.0, "avg_logprob": -0.14875237983569764, "compression_ratio": 1.6653696498054475, "no_speech_prob": 0.0024703526869416237}, {"id": 81, "seek": 47132, "start": 493.0, "end": 495.56, "text": " It's not the abstraction capabilities aren't good enough here.", "tokens": [51448, 467, 311, 406, 264, 37765, 10862, 3212, 380, 665, 1547, 510, 13, 51576], "temperature": 0.0, "avg_logprob": -0.14875237983569764, "compression_ratio": 1.6653696498054475, "no_speech_prob": 0.0024703526869416237}, {"id": 82, "seek": 47132, "start": 496.92, "end": 500.6, "text": " Some other languages that had been around for longer, it took them a little longer to get to", "tokens": [51644, 2188, 661, 8650, 300, 632, 668, 926, 337, 2854, 11, 309, 1890, 552, 257, 707, 2854, 281, 483, 281, 51828], "temperature": 0.0, "avg_logprob": -0.14875237983569764, "compression_ratio": 1.6653696498054475, "no_speech_prob": 0.0024703526869416237}, {"id": 83, "seek": 50060, "start": 500.6, "end": 504.84000000000003, "text": " that point. So, it ended up that, for instance, Java and C'sharp got generics, which is where we", "tokens": [50364, 300, 935, 13, 407, 11, 309, 4590, 493, 300, 11, 337, 5197, 11, 10745, 293, 383, 311, 5854, 79, 658, 1337, 1167, 11, 597, 307, 689, 321, 50576], "temperature": 0.0, "avg_logprob": -0.11839402955153892, "compression_ratio": 1.664179104477612, "no_speech_prob": 0.001543128164485097}, {"id": 84, "seek": 50060, "start": 504.84000000000003, "end": 508.76000000000005, "text": " coming to now at around the same time. And I was actually back then, I was on the other side of", "tokens": [50576, 1348, 281, 586, 412, 926, 264, 912, 565, 13, 400, 286, 390, 767, 646, 550, 11, 286, 390, 322, 264, 661, 1252, 295, 50772], "temperature": 0.0, "avg_logprob": -0.11839402955153892, "compression_ratio": 1.664179104477612, "no_speech_prob": 0.001543128164485097}, {"id": 85, "seek": 50060, "start": 508.76000000000005, "end": 514.9200000000001, "text": " the fence helping out with generics and Java. So, I saw it from the other side. Still think", "tokens": [50772, 264, 15422, 4315, 484, 365, 1337, 1167, 293, 10745, 13, 407, 11, 286, 1866, 309, 490, 264, 661, 1252, 13, 8291, 519, 51080], "temperature": 0.0, "avg_logprob": -0.11839402955153892, "compression_ratio": 1.664179104477612, "no_speech_prob": 0.001543128164485097}, {"id": 86, "seek": 50060, "start": 514.9200000000001, "end": 523.0, "text": " Microsoft and C'sharp did it better. So, this really comes down to sort of one of the fundamental", "tokens": [51080, 8116, 293, 383, 311, 5854, 79, 630, 309, 1101, 13, 407, 11, 341, 534, 1487, 760, 281, 1333, 295, 472, 295, 264, 8088, 51484], "temperature": 0.0, "avg_logprob": -0.11839402955153892, "compression_ratio": 1.664179104477612, "no_speech_prob": 0.001543128164485097}, {"id": 87, "seek": 50060, "start": 523.5600000000001, "end": 527.0, "text": " differences between functional and object-oriented programming.", "tokens": [51512, 7300, 1296, 11745, 293, 2657, 12, 27414, 9410, 13, 51684], "temperature": 0.0, "avg_logprob": -0.11839402955153892, "compression_ratio": 1.664179104477612, "no_speech_prob": 0.001543128164485097}, {"id": 88, "seek": 52700, "start": 527.96, "end": 533.72, "text": " You know, in classic imperative programming, there really is no polymorphism. There's no", "tokens": [50412, 509, 458, 11, 294, 7230, 32490, 9410, 11, 456, 534, 307, 572, 6754, 76, 18191, 1434, 13, 821, 311, 572, 50700], "temperature": 0.0, "avg_logprob": -0.08954079383242447, "compression_ratio": 1.848605577689243, "no_speech_prob": 0.0019546179100871086}, {"id": 89, "seek": 52700, "start": 533.72, "end": 541.08, "text": " way that you can write code that applies to more than one type. Object-oriented programming and", "tokens": [50700, 636, 300, 291, 393, 2464, 3089, 300, 13165, 281, 544, 813, 472, 2010, 13, 24753, 12, 27414, 9410, 293, 51068], "temperature": 0.0, "avg_logprob": -0.08954079383242447, "compression_ratio": 1.848605577689243, "no_speech_prob": 0.0019546179100871086}, {"id": 90, "seek": 52700, "start": 541.08, "end": 545.16, "text": " functional programming, to a large degree, are two different answers. At least when they're typed,", "tokens": [51068, 11745, 9410, 11, 281, 257, 2416, 4314, 11, 366, 732, 819, 6338, 13, 1711, 1935, 562, 436, 434, 33941, 11, 51272], "temperature": 0.0, "avg_logprob": -0.08954079383242447, "compression_ratio": 1.848605577689243, "no_speech_prob": 0.0019546179100871086}, {"id": 91, "seek": 52700, "start": 545.16, "end": 549.72, "text": " they're two different answers to, how do you get polymorphism? How do you write code that", "tokens": [51272, 436, 434, 732, 819, 6338, 281, 11, 577, 360, 291, 483, 6754, 76, 18191, 1434, 30, 1012, 360, 291, 2464, 3089, 300, 51500], "temperature": 0.0, "avg_logprob": -0.08954079383242447, "compression_ratio": 1.848605577689243, "no_speech_prob": 0.0019546179100871086}, {"id": 92, "seek": 52700, "start": 549.72, "end": 554.12, "text": " works for more than one kind of thing? In object-oriented programming, we went with what's", "tokens": [51500, 1985, 337, 544, 813, 472, 733, 295, 551, 30, 682, 2657, 12, 27414, 9410, 11, 321, 1437, 365, 437, 311, 51720], "temperature": 0.0, "avg_logprob": -0.08954079383242447, "compression_ratio": 1.848605577689243, "no_speech_prob": 0.0019546179100871086}, {"id": 93, "seek": 55412, "start": 554.12, "end": 559.08, "text": " often called subtype polymorphism, which means everything is a subtype of something that's a", "tokens": [50364, 2049, 1219, 1422, 20467, 6754, 76, 18191, 1434, 11, 597, 1355, 1203, 307, 257, 1422, 20467, 295, 746, 300, 311, 257, 50612], "temperature": 0.0, "avg_logprob": -0.10666333770751953, "compression_ratio": 1.8544061302681993, "no_speech_prob": 0.004189284518361092}, {"id": 94, "seek": 55412, "start": 559.08, "end": 563.96, "text": " subtype of something that all goes back up to object. So, that's what we're seeing here. Now,", "tokens": [50612, 1422, 20467, 295, 746, 300, 439, 1709, 646, 493, 281, 2657, 13, 407, 11, 300, 311, 437, 321, 434, 2577, 510, 13, 823, 11, 50856], "temperature": 0.0, "avg_logprob": -0.10666333770751953, "compression_ratio": 1.8544061302681993, "no_speech_prob": 0.004189284518361092}, {"id": 95, "seek": 55412, "start": 563.96, "end": 569.72, "text": " you can write a collection like ArrayList here that can contain anything. So, there's polymorphism", "tokens": [50856, 291, 393, 2464, 257, 5765, 411, 1587, 3458, 43, 468, 510, 300, 393, 5304, 1340, 13, 407, 11, 456, 311, 6754, 76, 18191, 1434, 51144], "temperature": 0.0, "avg_logprob": -0.10666333770751953, "compression_ratio": 1.8544061302681993, "no_speech_prob": 0.004189284518361092}, {"id": 96, "seek": 55412, "start": 569.72, "end": 576.52, "text": " in that sense. And the great thing about subtype polymorphism is it's very easy to have heterogeneous", "tokens": [51144, 294, 300, 2020, 13, 400, 264, 869, 551, 466, 1422, 20467, 6754, 76, 18191, 1434, 307, 309, 311, 588, 1858, 281, 362, 20789, 31112, 51484], "temperature": 0.0, "avg_logprob": -0.10666333770751953, "compression_ratio": 1.8544061302681993, "no_speech_prob": 0.004189284518361092}, {"id": 97, "seek": 55412, "start": 576.52, "end": 582.84, "text": " collections, for instance. You can put all kinds of things in the same collection. As opposed to", "tokens": [51484, 16641, 11, 337, 5197, 13, 509, 393, 829, 439, 3685, 295, 721, 294, 264, 912, 5765, 13, 1018, 8851, 281, 51800], "temperature": 0.0, "avg_logprob": -0.10666333770751953, "compression_ratio": 1.8544061302681993, "no_speech_prob": 0.004189284518361092}, {"id": 98, "seek": 58284, "start": 582.84, "end": 590.44, "text": " functional programming, they went with what's called parametric polymorphism, where you have an", "tokens": [50364, 11745, 9410, 11, 436, 1437, 365, 437, 311, 1219, 6220, 17475, 6754, 76, 18191, 1434, 11, 689, 291, 362, 364, 50744], "temperature": 0.0, "avg_logprob": -0.08836945365456973, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0013872698182240129}, {"id": 99, "seek": 58284, "start": 590.44, "end": 598.9200000000001, "text": " extra type parameter on things that, you know, sort of like a placeholder for one type. So,", "tokens": [50744, 2857, 2010, 13075, 322, 721, 300, 11, 291, 458, 11, 1333, 295, 411, 257, 1081, 20480, 337, 472, 2010, 13, 407, 11, 51168], "temperature": 0.0, "avg_logprob": -0.08836945365456973, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0013872698182240129}, {"id": 100, "seek": 58284, "start": 598.9200000000001, "end": 603.72, "text": " you don't get to mix and match the types inside. You get to say that there's this one type that", "tokens": [51168, 291, 500, 380, 483, 281, 2890, 293, 2995, 264, 3467, 1854, 13, 509, 483, 281, 584, 300, 456, 311, 341, 472, 2010, 300, 51408], "temperature": 0.0, "avg_logprob": -0.08836945365456973, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0013872698182240129}, {"id": 101, "seek": 58284, "start": 603.72, "end": 608.76, "text": " I'm going to give you later, and then it'll work for that type only. But it's still polymorphic,", "tokens": [51408, 286, 478, 516, 281, 976, 291, 1780, 11, 293, 550, 309, 603, 589, 337, 300, 2010, 787, 13, 583, 309, 311, 920, 6754, 76, 18191, 299, 11, 51660], "temperature": 0.0, "avg_logprob": -0.08836945365456973, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0013872698182240129}, {"id": 102, "seek": 60876, "start": 608.76, "end": 613.72, "text": " because you can give different type arguments in different places. And that has the benefit that", "tokens": [50364, 570, 291, 393, 976, 819, 2010, 12869, 294, 819, 3190, 13, 400, 300, 575, 264, 5121, 300, 50612], "temperature": 0.0, "avg_logprob": -0.07660995151685632, "compression_ratio": 1.9669421487603307, "no_speech_prob": 0.00733577087521553}, {"id": 103, "seek": 60876, "start": 613.72, "end": 621.0, "text": " you can, because that type parameter has a name, you can have things sync up so that the same type", "tokens": [50612, 291, 393, 11, 570, 300, 2010, 13075, 575, 257, 1315, 11, 291, 393, 362, 721, 20271, 493, 370, 300, 264, 912, 2010, 50976], "temperature": 0.0, "avg_logprob": -0.07660995151685632, "compression_ratio": 1.9669421487603307, "no_speech_prob": 0.00733577087521553}, {"id": 104, "seek": 60876, "start": 621.0, "end": 625.8, "text": " name, the same type parameter appears in multiple places, and you can sort of say, well, whatever", "tokens": [50976, 1315, 11, 264, 912, 2010, 13075, 7038, 294, 3866, 3190, 11, 293, 291, 393, 1333, 295, 584, 11, 731, 11, 2035, 51216], "temperature": 0.0, "avg_logprob": -0.07660995151685632, "compression_ratio": 1.9669421487603307, "no_speech_prob": 0.00733577087521553}, {"id": 105, "seek": 60876, "start": 625.8, "end": 629.8, "text": " it is, the same kind of thing that comes in is the kind of thing that comes out, for instance,", "tokens": [51216, 309, 307, 11, 264, 912, 733, 295, 551, 300, 1487, 294, 307, 264, 733, 295, 551, 300, 1487, 484, 11, 337, 5197, 11, 51416], "temperature": 0.0, "avg_logprob": -0.07660995151685632, "compression_ratio": 1.9669421487603307, "no_speech_prob": 0.00733577087521553}, {"id": 106, "seek": 60876, "start": 629.8, "end": 634.28, "text": " which is exactly what we need here, right? We need a collection, for instance, that has", "tokens": [51416, 597, 307, 2293, 437, 321, 643, 510, 11, 558, 30, 492, 643, 257, 5765, 11, 337, 5197, 11, 300, 575, 51640], "temperature": 0.0, "avg_logprob": -0.07660995151685632, "compression_ratio": 1.9669421487603307, "no_speech_prob": 0.00733577087521553}, {"id": 107, "seek": 63428, "start": 635.24, "end": 642.12, "text": " the same stuff coming in that's coming out. Enter generics, which is parametric polymorphism.", "tokens": [50412, 264, 912, 1507, 1348, 294, 300, 311, 1348, 484, 13, 10399, 1337, 1167, 11, 597, 307, 6220, 17475, 6754, 76, 18191, 1434, 13, 50756], "temperature": 0.0, "avg_logprob": -0.11533289539570711, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.0007904124213382602}, {"id": 108, "seek": 63428, "start": 642.76, "end": 646.6, "text": " Most object-oriented programming languages with types at this point say, okay, let's embrace", "tokens": [50788, 4534, 2657, 12, 27414, 9410, 8650, 365, 3467, 412, 341, 935, 584, 11, 1392, 11, 718, 311, 14038, 50980], "temperature": 0.0, "avg_logprob": -0.11533289539570711, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.0007904124213382602}, {"id": 109, "seek": 63428, "start": 646.6, "end": 653.24, "text": " that too, so we have both kinds in the language. So, that's sort of one of the first big imports", "tokens": [50980, 300, 886, 11, 370, 321, 362, 1293, 3685, 294, 264, 2856, 13, 407, 11, 300, 311, 1333, 295, 472, 295, 264, 700, 955, 41596, 51312], "temperature": 0.0, "avg_logprob": -0.11533289539570711, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.0007904124213382602}, {"id": 110, "seek": 63428, "start": 653.24, "end": 659.8, "text": " from the functional space. So, let's do that. Now, let's see, where do we start?", "tokens": [51312, 490, 264, 11745, 1901, 13, 407, 11, 718, 311, 360, 300, 13, 823, 11, 718, 311, 536, 11, 689, 360, 321, 722, 30, 51640], "temperature": 0.0, "avg_logprob": -0.11533289539570711, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.0007904124213382602}, {"id": 111, "seek": 65980, "start": 659.88, "end": 668.3599999999999, "text": " Now, we can have, well, instead of a RayList here, we could now use the new fancy generic", "tokens": [50368, 823, 11, 321, 393, 362, 11, 731, 11, 2602, 295, 257, 10883, 43, 468, 510, 11, 321, 727, 586, 764, 264, 777, 10247, 19577, 50792], "temperature": 0.0, "avg_logprob": -0.18354775069595933, "compression_ratio": 1.5842696629213484, "no_speech_prob": 0.0036453078500926495}, {"id": 112, "seek": 65980, "start": 668.3599999999999, "end": 673.7199999999999, "text": " collections that we have, and I'm cheating and having the imports in another file, so either", "tokens": [50792, 16641, 300, 321, 362, 11, 293, 286, 478, 18309, 293, 1419, 264, 41596, 294, 1071, 3991, 11, 370, 2139, 51060], "temperature": 0.0, "avg_logprob": -0.18354775069595933, "compression_ratio": 1.5842696629213484, "no_speech_prob": 0.0036453078500926495}, {"id": 113, "seek": 65980, "start": 673.7199999999999, "end": 680.3599999999999, "text": " using, so you don't have to bother with that. So, we can say list of int here instead is a new list", "tokens": [51060, 1228, 11, 370, 291, 500, 380, 362, 281, 8677, 365, 300, 13, 407, 11, 321, 393, 584, 1329, 295, 560, 510, 2602, 307, 257, 777, 1329, 51392], "temperature": 0.0, "avg_logprob": -0.18354775069595933, "compression_ratio": 1.5842696629213484, "no_speech_prob": 0.0036453078500926495}, {"id": 114, "seek": 68036, "start": 680.44, "end": 690.28, "text": " of int, and now, as I'm gathering things up, it should be graying out this. I know that my", "tokens": [50368, 295, 560, 11, 293, 586, 11, 382, 286, 478, 13519, 721, 493, 11, 309, 820, 312, 10855, 278, 484, 341, 13, 286, 458, 300, 452, 50860], "temperature": 0.0, "avg_logprob": -0.12412010656820761, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.03453699126839638}, {"id": 115, "seek": 68036, "start": 692.6800000000001, "end": 699.48, "text": " destination here is actually a list of int and not just a list of whatever, and so I can now get", "tokens": [50980, 12236, 510, 307, 767, 257, 1329, 295, 560, 293, 406, 445, 257, 1329, 295, 2035, 11, 293, 370, 286, 393, 586, 483, 51320], "temperature": 0.0, "avg_logprob": -0.12412010656820761, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.03453699126839638}, {"id": 116, "seek": 68036, "start": 699.48, "end": 707.24, "text": " rid of this cast of death. Back in business. Somebody wrote a generic collection for us,", "tokens": [51320, 3973, 295, 341, 4193, 295, 2966, 13, 5833, 294, 1606, 13, 13463, 4114, 257, 19577, 5765, 337, 505, 11, 51708], "temperature": 0.0, "avg_logprob": -0.12412010656820761, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.03453699126839638}, {"id": 117, "seek": 70724, "start": 707.24, "end": 715.64, "text": " we can use it. But, of course, now, there are other, I can write generic things too. Maybe I", "tokens": [50364, 321, 393, 764, 309, 13, 583, 11, 295, 1164, 11, 586, 11, 456, 366, 661, 11, 286, 393, 2464, 19577, 721, 886, 13, 2704, 286, 50784], "temperature": 0.0, "avg_logprob": -0.13537345159621467, "compression_ratio": 1.7194570135746607, "no_speech_prob": 0.002114696428179741}, {"id": 118, "seek": 70724, "start": 715.64, "end": 721.8, "text": " want my predicate type to be more general. Maybe I don't actually want to write new delegate types", "tokens": [50784, 528, 452, 3852, 8700, 2010, 281, 312, 544, 2674, 13, 2704, 286, 500, 380, 767, 528, 281, 2464, 777, 40999, 3467, 51092], "temperature": 0.0, "avg_logprob": -0.13537345159621467, "compression_ratio": 1.7194570135746607, "no_speech_prob": 0.002114696428179741}, {"id": 119, "seek": 70724, "start": 721.8, "end": 728.84, "text": " for everything all the time, so maybe we could say predicate of t and have it work for all t's", "tokens": [51092, 337, 1203, 439, 264, 565, 11, 370, 1310, 321, 727, 584, 3852, 8700, 295, 256, 293, 362, 309, 589, 337, 439, 256, 311, 51444], "temperature": 0.0, "avg_logprob": -0.13537345159621467, "compression_ratio": 1.7194570135746607, "no_speech_prob": 0.002114696428179741}, {"id": 120, "seek": 70724, "start": 728.84, "end": 734.92, "text": " and not just for ints. It still returns bool, but I can, I now have a generic predicate type,", "tokens": [51444, 293, 406, 445, 337, 560, 82, 13, 467, 920, 11247, 748, 401, 11, 457, 286, 393, 11, 286, 586, 362, 257, 19577, 3852, 8700, 2010, 11, 51748], "temperature": 0.0, "avg_logprob": -0.13537345159621467, "compression_ratio": 1.7194570135746607, "no_speech_prob": 0.002114696428179741}, {"id": 121, "seek": 73492, "start": 735.0, "end": 738.8399999999999, "text": " and I can then here say, well, it's actually here, it's a predicate of int that I want,", "tokens": [50368, 293, 286, 393, 550, 510, 584, 11, 731, 11, 309, 311, 767, 510, 11, 309, 311, 257, 3852, 8700, 295, 560, 300, 286, 528, 11, 50560], "temperature": 0.0, "avg_logprob": -0.14741581632890774, "compression_ratio": 1.859504132231405, "no_speech_prob": 0.0013876947341486812}, {"id": 122, "seek": 73492, "start": 738.8399999999999, "end": 743.4799999999999, "text": " and boom, things don't work, or we can, we could actually go a step further and say,", "tokens": [50560, 293, 9351, 11, 721, 500, 380, 589, 11, 420, 321, 393, 11, 321, 727, 767, 352, 257, 1823, 3052, 293, 584, 11, 50792], "temperature": 0.0, "avg_logprob": -0.14741581632890774, "compression_ratio": 1.859504132231405, "no_speech_prob": 0.0013876947341486812}, {"id": 123, "seek": 73492, "start": 743.4799999999999, "end": 749.0, "text": " well, filtering isn't really particularly about ints, is it? And now we can write our own generic", "tokens": [50792, 731, 11, 30822, 1943, 380, 534, 4098, 466, 560, 82, 11, 307, 309, 30, 400, 586, 321, 393, 2464, 527, 1065, 19577, 51068], "temperature": 0.0, "avg_logprob": -0.14741581632890774, "compression_ratio": 1.859504132231405, "no_speech_prob": 0.0013876947341486812}, {"id": 124, "seek": 73492, "start": 750.1999999999999, "end": 757.64, "text": " function, a method that is a filter of t, and now we get to, say, t in all the places,", "tokens": [51128, 2445, 11, 257, 3170, 300, 307, 257, 6608, 295, 256, 11, 293, 586, 321, 483, 281, 11, 584, 11, 256, 294, 439, 264, 3190, 11, 51500], "temperature": 0.0, "avg_logprob": -0.14741581632890774, "compression_ratio": 1.859504132231405, "no_speech_prob": 0.0013876947341486812}, {"id": 125, "seek": 73492, "start": 757.64, "end": 764.12, "text": " it's actually a predicate of t coming in and an array of t, and I'm returning an array of t,", "tokens": [51500, 309, 311, 767, 257, 3852, 8700, 295, 256, 1348, 294, 293, 364, 10225, 295, 256, 11, 293, 286, 478, 12678, 364, 10225, 295, 256, 11, 51824], "temperature": 0.0, "avg_logprob": -0.14741581632890774, "compression_ratio": 1.859504132231405, "no_speech_prob": 0.0013876947341486812}, {"id": 126, "seek": 76412, "start": 764.2, "end": 768.84, "text": " and in all the other places where it says int, except one, so you have to be a little careful,", "tokens": [50368, 293, 294, 439, 264, 661, 3190, 689, 309, 1619, 560, 11, 3993, 472, 11, 370, 291, 362, 281, 312, 257, 707, 5026, 11, 50600], "temperature": 0.0, "avg_logprob": -0.16718699381901667, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.00035647794720716774}, {"id": 127, "seek": 76412, "start": 769.5600000000001, "end": 783.48, "text": " here, here, here, where else? The int result, of course, and, you know, so now I've completely", "tokens": [50636, 510, 11, 510, 11, 510, 11, 689, 1646, 30, 440, 560, 1874, 11, 295, 1164, 11, 293, 11, 291, 458, 11, 370, 586, 286, 600, 2584, 51332], "temperature": 0.0, "avg_logprob": -0.16718699381901667, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.00035647794720716774}, {"id": 128, "seek": 76412, "start": 783.48, "end": 787.24, "text": " generified the thing, and this is the int I shouldn't replace, because that's the counter for the,", "tokens": [51332, 1337, 2587, 264, 551, 11, 293, 341, 307, 264, 560, 286, 4659, 380, 7406, 11, 570, 300, 311, 264, 5682, 337, 264, 11, 51520], "temperature": 0.0, "avg_logprob": -0.16718699381901667, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.00035647794720716774}, {"id": 129, "seek": 76412, "start": 787.24, "end": 791.88, "text": " you know, filling out the array, so that's why I didn't just do a search replace here.", "tokens": [51520, 291, 458, 11, 10623, 484, 264, 10225, 11, 370, 300, 311, 983, 286, 994, 380, 445, 360, 257, 3164, 7406, 510, 13, 51752], "temperature": 0.0, "avg_logprob": -0.16718699381901667, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.00035647794720716774}, {"id": 130, "seek": 79188, "start": 792.84, "end": 797.32, "text": " So there we go, now we, all of a sudden, we've generified a thing, it's fully strongly typed,", "tokens": [50412, 407, 456, 321, 352, 11, 586, 321, 11, 439, 295, 257, 3990, 11, 321, 600, 1337, 2587, 257, 551, 11, 309, 311, 4498, 10613, 33941, 11, 50636], "temperature": 0.0, "avg_logprob": -0.1537925890176603, "compression_ratio": 1.665158371040724, "no_speech_prob": 0.0019228102173656225}, {"id": 131, "seek": 79188, "start": 797.96, "end": 802.6, "text": " as if it was for a specific type, but now you can apply it everywhere, and the full,", "tokens": [50668, 382, 498, 309, 390, 337, 257, 2685, 2010, 11, 457, 586, 291, 393, 3079, 309, 5315, 11, 293, 264, 1577, 11, 50900], "temperature": 0.0, "avg_logprob": -0.1537925890176603, "compression_ratio": 1.665158371040724, "no_speech_prob": 0.0019228102173656225}, {"id": 132, "seek": 79188, "start": 802.6, "end": 810.76, "text": " like, generic, generification is a strong, strong tool, and it, the, there were some, like,", "tokens": [50900, 411, 11, 19577, 11, 1337, 3774, 307, 257, 2068, 11, 2068, 2290, 11, 293, 309, 11, 264, 11, 456, 645, 512, 11, 411, 11, 51308], "temperature": 0.0, "avg_logprob": -0.1537925890176603, "compression_ratio": 1.665158371040724, "no_speech_prob": 0.0019228102173656225}, {"id": 133, "seek": 79188, "start": 811.72, "end": 817.4, "text": " choices made in the different languages at the time that, that actually were imbued with destiny,", "tokens": [51356, 7994, 1027, 294, 264, 819, 8650, 412, 264, 565, 300, 11, 300, 767, 645, 566, 65, 5827, 365, 17893, 11, 51640], "temperature": 0.0, "avg_logprob": -0.1537925890176603, "compression_ratio": 1.665158371040724, "no_speech_prob": 0.0019228102173656225}, {"id": 134, "seek": 81740, "start": 817.4, "end": 823.24, "text": " even much more than we realized at the time. In Java, we, on the, I was over here, in the", "tokens": [50364, 754, 709, 544, 813, 321, 5334, 412, 264, 565, 13, 682, 10745, 11, 321, 11, 322, 264, 11, 286, 390, 670, 510, 11, 294, 264, 50656], "temperature": 0.0, "avg_logprob": -0.11838037158371112, "compression_ratio": 1.662280701754386, "no_speech_prob": 0.012756511569023132}, {"id": 135, "seek": 81740, "start": 823.24, "end": 833.56, "text": " Java side, sorry, camera person, we, we were, we decided we couldn't change the JVM, the runtime", "tokens": [50656, 10745, 1252, 11, 2597, 11, 2799, 954, 11, 321, 11, 321, 645, 11, 321, 3047, 321, 2809, 380, 1319, 264, 508, 53, 44, 11, 264, 34474, 51172], "temperature": 0.0, "avg_logprob": -0.11838037158371112, "compression_ratio": 1.662280701754386, "no_speech_prob": 0.012756511569023132}, {"id": 136, "seek": 81740, "start": 833.56, "end": 838.76, "text": " under Java, because it was, you know, too entrenched, and how you couldn't control, like, what,", "tokens": [51172, 833, 10745, 11, 570, 309, 390, 11, 291, 458, 11, 886, 948, 42388, 11, 293, 577, 291, 2809, 380, 1969, 11, 411, 11, 437, 11, 51432], "temperature": 0.0, "avg_logprob": -0.11838037158371112, "compression_ratio": 1.662280701754386, "no_speech_prob": 0.012756511569023132}, {"id": 137, "seek": 81740, "start": 838.76, "end": 844.1999999999999, "text": " but Java runtime they had out there, so, so all the generics in Java was done in the compiler by", "tokens": [51432, 457, 10745, 34474, 436, 632, 484, 456, 11, 370, 11, 370, 439, 264, 1337, 1167, 294, 10745, 390, 1096, 294, 264, 31958, 538, 51704], "temperature": 0.0, "avg_logprob": -0.11838037158371112, "compression_ratio": 1.662280701754386, "no_speech_prob": 0.012756511569023132}, {"id": 138, "seek": 84420, "start": 844.2, "end": 849.8000000000001, "text": " erasure, which means, you know, there wasn't any generics at runtime, it was just there", "tokens": [50364, 1189, 2508, 11, 597, 1355, 11, 291, 458, 11, 456, 2067, 380, 604, 1337, 1167, 412, 34474, 11, 309, 390, 445, 456, 50644], "temperature": 0.0, "avg_logprob": -0.12245323212166143, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.003478736849501729}, {"id": 139, "seek": 84420, "start": 849.8000000000001, "end": 854.6, "text": " in the code for as much type checking as you could get, but that meant that there were some", "tokens": [50644, 294, 264, 3089, 337, 382, 709, 2010, 8568, 382, 291, 727, 483, 11, 457, 300, 4140, 300, 456, 645, 512, 50884], "temperature": 0.0, "avg_logprob": -0.12245323212166143, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.003478736849501729}, {"id": 140, "seek": 84420, "start": 854.6, "end": 859.1600000000001, "text": " things, like reflection and so on, that didn't embrace it, and there were certain, certain", "tokens": [50884, 721, 11, 411, 12914, 293, 370, 322, 11, 300, 994, 380, 14038, 309, 11, 293, 456, 645, 1629, 11, 1629, 51112], "temperature": 0.0, "avg_logprob": -0.12245323212166143, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.003478736849501729}, {"id": 141, "seek": 84420, "start": 859.1600000000001, "end": 865.48, "text": " holes in the experience, essentially. And whereas in, in .NET, and, and C Sharp, we went all out", "tokens": [51112, 8118, 294, 264, 1752, 11, 4476, 13, 400, 9735, 294, 11, 294, 2411, 35554, 11, 293, 11, 293, 383, 31654, 11, 321, 1437, 439, 484, 51428], "temperature": 0.0, "avg_logprob": -0.12245323212166143, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.003478736849501729}, {"id": 142, "seek": 84420, "start": 865.48, "end": 872.6800000000001, "text": " and said, yes, generics goes into the runtime, and is shared across all the languages at target.net,", "tokens": [51428, 293, 848, 11, 2086, 11, 1337, 1167, 1709, 666, 264, 34474, 11, 293, 307, 5507, 2108, 439, 264, 8650, 412, 3779, 13, 7129, 11, 51788], "temperature": 0.0, "avg_logprob": -0.12245323212166143, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.003478736849501729}, {"id": 143, "seek": 87268, "start": 872.68, "end": 874.92, "text": " and it's a real runtime thing. Question.", "tokens": [50364, 293, 309, 311, 257, 957, 34474, 551, 13, 14464, 13, 50476], "temperature": 0.0, "avg_logprob": -0.13132737023489816, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.0023557853419333696}, {"id": 144, "seek": 87268, "start": 884.92, "end": 890.28, "text": " So, to repeat the question for the, for the mic, when did we know that we wanted generics in C", "tokens": [50976, 407, 11, 281, 7149, 264, 1168, 337, 264, 11, 337, 264, 3123, 11, 562, 630, 321, 458, 300, 321, 1415, 1337, 1167, 294, 383, 51244], "temperature": 0.0, "avg_logprob": -0.13132737023489816, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.0023557853419333696}, {"id": 145, "seek": 87268, "start": 890.28, "end": 899.16, "text": " Sharp? So, I wasn't there, but I kind of was, because in 99, I was an intern, I was doing my", "tokens": [51244, 31654, 30, 407, 11, 286, 2067, 380, 456, 11, 457, 286, 733, 295, 390, 11, 570, 294, 11803, 11, 286, 390, 364, 2154, 11, 286, 390, 884, 452, 51688], "temperature": 0.0, "avg_logprob": -0.13132737023489816, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.0023557853419333696}, {"id": 146, "seek": 89916, "start": 899.16, "end": 904.1999999999999, "text": " PhD, I was an intern at Microsoft Research, Cambridge, which is where Don Simon is, if anybody", "tokens": [50364, 14476, 11, 286, 390, 364, 2154, 412, 8116, 10303, 11, 24876, 11, 597, 307, 689, 1468, 13193, 307, 11, 498, 4472, 50616], "temperature": 0.0, "avg_logprob": -0.11011783281962077, "compression_ratio": 1.7445255474452555, "no_speech_prob": 0.028375690802931786}, {"id": 147, "seek": 89916, "start": 904.1999999999999, "end": 908.92, "text": " has heard of him, the father of F Sharp, and there were a bunch of language people there,", "tokens": [50616, 575, 2198, 295, 796, 11, 264, 3086, 295, 479, 31654, 11, 293, 456, 645, 257, 3840, 295, 2856, 561, 456, 11, 50852], "temperature": 0.0, "avg_logprob": -0.11011783281962077, "compression_ratio": 1.7445255474452555, "no_speech_prob": 0.028375690802931786}, {"id": 148, "seek": 89916, "start": 908.92, "end": 914.8399999999999, "text": " so I got actually to be privy to decisions that were secret for a number of years, and I was under", "tokens": [50852, 370, 286, 658, 767, 281, 312, 2915, 88, 281, 5327, 300, 645, 4054, 337, 257, 1230, 295, 924, 11, 293, 286, 390, 833, 51148], "temperature": 0.0, "avg_logprob": -0.11011783281962077, "compression_ratio": 1.7445255474452555, "no_speech_prob": 0.028375690802931786}, {"id": 149, "seek": 89916, "start": 914.8399999999999, "end": 920.36, "text": " NDA until, until things came out, and they were already talking about .NET, they weren't calling", "tokens": [51148, 426, 7509, 1826, 11, 1826, 721, 1361, 484, 11, 293, 436, 645, 1217, 1417, 466, 2411, 35554, 11, 436, 4999, 380, 5141, 51424], "temperature": 0.0, "avg_logprob": -0.11011783281962077, "compression_ratio": 1.7445255474452555, "no_speech_prob": 0.028375690802931786}, {"id": 150, "seek": 89916, "start": 920.36, "end": 924.8399999999999, "text": " it that at the time, and they were already talking about generics for it, and decisions were made", "tokens": [51424, 309, 300, 412, 264, 565, 11, 293, 436, 645, 1217, 1417, 466, 1337, 1167, 337, 309, 11, 293, 5327, 645, 1027, 51648], "temperature": 0.0, "avg_logprob": -0.11011783281962077, "compression_ratio": 1.7445255474452555, "no_speech_prob": 0.028375690802931786}, {"id": 151, "seek": 92484, "start": 924.9200000000001, "end": 931.08, "text": " that it would take too long to make it work right, and we should have a version without it first.", "tokens": [50368, 300, 309, 576, 747, 886, 938, 281, 652, 309, 589, 558, 11, 293, 321, 820, 362, 257, 3037, 1553, 309, 700, 13, 50676], "temperature": 0.0, "avg_logprob": -0.15499281883239746, "compression_ratio": 1.7136563876651982, "no_speech_prob": 0.03952009975910187}, {"id": 152, "seek": 92484, "start": 931.08, "end": 937.08, "text": " So, yeah, that, that, I think that answers your question precisely, so it was always felt that", "tokens": [50676, 407, 11, 1338, 11, 300, 11, 300, 11, 286, 519, 300, 6338, 428, 1168, 13402, 11, 370, 309, 390, 1009, 2762, 300, 50976], "temperature": 0.0, "avg_logprob": -0.15499281883239746, "compression_ratio": 1.7136563876651982, "no_speech_prob": 0.03952009975910187}, {"id": 153, "seek": 92484, "start": 938.12, "end": 945.0, "text": " that we're gonna, we're gonna need to do this, and indeed, generics was, was the, pretty much the", "tokens": [51028, 300, 321, 434, 799, 11, 321, 434, 799, 643, 281, 360, 341, 11, 293, 6451, 11, 1337, 1167, 390, 11, 390, 264, 11, 1238, 709, 264, 51372], "temperature": 0.0, "avg_logprob": -0.15499281883239746, "compression_ratio": 1.7136563876651982, "no_speech_prob": 0.03952009975910187}, {"id": 154, "seek": 92484, "start": 945.0, "end": 952.2, "text": " almost the only and, and last thing that language feature that was added to the runtime for a very", "tokens": [51372, 1920, 264, 787, 293, 11, 293, 1036, 551, 300, 2856, 4111, 300, 390, 3869, 281, 264, 34474, 337, 257, 588, 51732], "temperature": 0.0, "avg_logprob": -0.15499281883239746, "compression_ratio": 1.7136563876651982, "no_speech_prob": 0.03952009975910187}, {"id": 155, "seek": 95220, "start": 952.2, "end": 957.4000000000001, "text": " long time, because after that .NET became popular, it was Windows component, and so we had the same", "tokens": [50364, 938, 565, 11, 570, 934, 300, 2411, 35554, 3062, 3743, 11, 309, 390, 8591, 6542, 11, 293, 370, 321, 632, 264, 912, 50624], "temperature": 0.0, "avg_logprob": -0.08484488627949699, "compression_ratio": 1.8088235294117647, "no_speech_prob": 0.04138922318816185}, {"id": 156, "seek": 95220, "start": 957.4000000000001, "end": 962.9200000000001, "text": " problem as Java, as the one causing Java to not do it in the runtime, which was too many people", "tokens": [50624, 1154, 382, 10745, 11, 382, 264, 472, 9853, 10745, 281, 406, 360, 309, 294, 264, 34474, 11, 597, 390, 886, 867, 561, 50900], "temperature": 0.0, "avg_logprob": -0.08484488627949699, "compression_ratio": 1.8088235294117647, "no_speech_prob": 0.04138922318816185}, {"id": 157, "seek": 95220, "start": 962.9200000000001, "end": 967.32, "text": " have it installed, we don't know which version of Windows they have, we have no way of, you know,", "tokens": [50900, 362, 309, 8899, 11, 321, 500, 380, 458, 597, 3037, 295, 8591, 436, 362, 11, 321, 362, 572, 636, 295, 11, 291, 458, 11, 51120], "temperature": 0.0, "avg_logprob": -0.08484488627949699, "compression_ratio": 1.8088235294117647, "no_speech_prob": 0.04138922318816185}, {"id": 158, "seek": 95220, "start": 967.96, "end": 973.1600000000001, "text": " making sure that they have the right runtime features that we are compiling for, so we stopped", "tokens": [51152, 1455, 988, 300, 436, 362, 264, 558, 34474, 4122, 300, 321, 366, 715, 4883, 337, 11, 370, 321, 5936, 51412], "temperature": 0.0, "avg_logprob": -0.08484488627949699, "compression_ratio": 1.8088235294117647, "no_speech_prob": 0.04138922318816185}, {"id": 159, "seek": 95220, "start": 973.1600000000001, "end": 977.32, "text": " doing language features in the runtime after that for a very, very long time, now we're doing it again,", "tokens": [51412, 884, 2856, 4122, 294, 264, 34474, 934, 300, 337, 257, 588, 11, 588, 938, 565, 11, 586, 321, 434, 884, 309, 797, 11, 51620], "temperature": 0.0, "avg_logprob": -0.08484488627949699, "compression_ratio": 1.8088235294117647, "no_speech_prob": 0.04138922318816185}, {"id": 160, "seek": 97732, "start": 978.2800000000001, "end": 987.5600000000001, "text": " and we might get to one at the end, so that's generics, and let's see if I can get back on", "tokens": [50412, 293, 321, 1062, 483, 281, 472, 412, 264, 917, 11, 370, 300, 311, 1337, 1167, 11, 293, 718, 311, 536, 498, 286, 393, 483, 646, 322, 50876], "temperature": 0.0, "avg_logprob": -0.11885333061218262, "compression_ratio": 1.6766467065868262, "no_speech_prob": 0.013010568916797638}, {"id": 161, "seek": 97732, "start": 987.5600000000001, "end": 994.5200000000001, "text": " track here, so it's, well, that's not generics, that's not all there is to say about generics,", "tokens": [50876, 2837, 510, 11, 370, 309, 311, 11, 731, 11, 300, 311, 406, 1337, 1167, 11, 300, 311, 406, 439, 456, 307, 281, 584, 466, 1337, 1167, 11, 51224], "temperature": 0.0, "avg_logprob": -0.11885333061218262, "compression_ratio": 1.6766467065868262, "no_speech_prob": 0.013010568916797638}, {"id": 162, "seek": 97732, "start": 994.5200000000001, "end": 1002.9200000000001, "text": " because once you get these, like, very lovely generic collections, for instance, they can have", "tokens": [51224, 570, 1564, 291, 483, 613, 11, 411, 11, 588, 7496, 19577, 16641, 11, 337, 5197, 11, 436, 393, 362, 51644], "temperature": 0.0, "avg_logprob": -0.11885333061218262, "compression_ratio": 1.6766467065868262, "no_speech_prob": 0.013010568916797638}, {"id": 163, "seek": 100292, "start": 1003.0, "end": 1008.04, "text": " smarter, they can have smarter types, smarter methods as well, they can have generic methods,", "tokens": [50368, 20294, 11, 436, 393, 362, 20294, 3467, 11, 20294, 7150, 382, 731, 11, 436, 393, 362, 19577, 7150, 11, 50620], "temperature": 0.0, "avg_logprob": -0.13706633970909513, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.015650298446416855}, {"id": 164, "seek": 100292, "start": 1008.04, "end": 1013.9599999999999, "text": " so instead of, instead of like doing this, building this result array myself, I could just actually", "tokens": [50620, 370, 2602, 295, 11, 2602, 295, 411, 884, 341, 11, 2390, 341, 1874, 10225, 2059, 11, 286, 727, 445, 767, 50916], "temperature": 0.0, "avg_logprob": -0.13706633970909513, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.015650298446416855}, {"id": 165, "seek": 100292, "start": 1013.9599999999999, "end": 1021.24, "text": " take that dst thing and just call to array on it, because now it knows its element type and you", "tokens": [50916, 747, 300, 274, 372, 551, 293, 445, 818, 281, 10225, 322, 309, 11, 570, 586, 309, 3255, 1080, 4478, 2010, 293, 291, 51280], "temperature": 0.0, "avg_logprob": -0.13706633970909513, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.015650298446416855}, {"id": 166, "seek": 100292, "start": 1021.24, "end": 1029.8, "text": " can build an array of the right, of the right type, namely t, you also notice, so which means I can,", "tokens": [51280, 393, 1322, 364, 10225, 295, 264, 558, 11, 295, 264, 558, 2010, 11, 20926, 256, 11, 291, 611, 3449, 11, 370, 597, 1355, 286, 393, 11, 51708], "temperature": 0.0, "avg_logprob": -0.13706633970909513, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.015650298446416855}, {"id": 167, "seek": 102980, "start": 1029.8, "end": 1035.6399999999999, "text": " I can delete these two lines of code, I don't need that anymore, so many more utilities now,", "tokens": [50364, 286, 393, 12097, 613, 732, 3876, 295, 3089, 11, 286, 500, 380, 643, 300, 3602, 11, 370, 867, 544, 30482, 586, 11, 50656], "temperature": 0.0, "avg_logprob": -0.0915766377602854, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.00657579256221652}, {"id": 168, "seek": 102980, "start": 1035.6399999999999, "end": 1045.08, "text": " strongly typed utilities become available, and one last thing to notice is that when I'm calling", "tokens": [50656, 10613, 33941, 30482, 1813, 2435, 11, 293, 472, 1036, 551, 281, 3449, 307, 300, 562, 286, 478, 5141, 51128], "temperature": 0.0, "avg_logprob": -0.0915766377602854, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.00657579256221652}, {"id": 169, "seek": 102980, "start": 1045.08, "end": 1050.44, "text": " the generic method here, I'm not passing a type argument, you need to pass a type argument to,", "tokens": [51128, 264, 19577, 3170, 510, 11, 286, 478, 406, 8437, 257, 2010, 6770, 11, 291, 643, 281, 1320, 257, 2010, 6770, 281, 11, 51396], "temperature": 0.0, "avg_logprob": -0.0915766377602854, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.00657579256221652}, {"id": 170, "seek": 102980, "start": 1050.44, "end": 1055.3999999999999, "text": " to the, to generic types, but not to generic methods, and that again is a thing that type", "tokens": [51396, 281, 264, 11, 281, 19577, 3467, 11, 457, 406, 281, 19577, 7150, 11, 293, 300, 797, 307, 257, 551, 300, 2010, 51644], "temperature": 0.0, "avg_logprob": -0.0915766377602854, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.00657579256221652}, {"id": 171, "seek": 105540, "start": 1055.4, "end": 1060.6000000000001, "text": " inference is something that we start stealing from functional programming languages, we can't do", "tokens": [50364, 38253, 307, 746, 300, 321, 722, 19757, 490, 11745, 9410, 8650, 11, 321, 393, 380, 360, 50624], "temperature": 0.0, "avg_logprob": -0.10198159589835093, "compression_ratio": 1.972318339100346, "no_speech_prob": 0.13028809428215027}, {"id": 172, "seek": 105540, "start": 1060.6000000000001, "end": 1064.44, "text": " as much type inference in object-oriented programming languages as you can in a functional", "tokens": [50624, 382, 709, 2010, 38253, 294, 2657, 12, 27414, 9410, 8650, 382, 291, 393, 294, 257, 11745, 50816], "temperature": 0.0, "avg_logprob": -0.10198159589835093, "compression_ratio": 1.972318339100346, "no_speech_prob": 0.13028809428215027}, {"id": 173, "seek": 105540, "start": 1064.44, "end": 1070.2800000000002, "text": " language because of the subtype polymorphism, it means that you can't actually, there are many", "tokens": [50816, 2856, 570, 295, 264, 1422, 20467, 6754, 76, 18191, 1434, 11, 309, 1355, 300, 291, 393, 380, 767, 11, 456, 366, 867, 51108], "temperature": 0.0, "avg_logprob": -0.10198159589835093, "compression_ratio": 1.972318339100346, "no_speech_prob": 0.13028809428215027}, {"id": 174, "seek": 105540, "start": 1070.2800000000002, "end": 1074.44, "text": " places where you can't know the exact type, where you could if you didn't have subtype polymorphism,", "tokens": [51108, 3190, 689, 291, 393, 380, 458, 264, 1900, 2010, 11, 689, 291, 727, 498, 291, 994, 380, 362, 1422, 20467, 6754, 76, 18191, 1434, 11, 51316], "temperature": 0.0, "avg_logprob": -0.10198159589835093, "compression_ratio": 1.972318339100346, "no_speech_prob": 0.13028809428215027}, {"id": 175, "seek": 105540, "start": 1074.44, "end": 1078.3600000000001, "text": " so we can't go all out on, on type inference, which is probably all the same because it's", "tokens": [51316, 370, 321, 393, 380, 352, 439, 484, 322, 11, 322, 2010, 38253, 11, 597, 307, 1391, 439, 264, 912, 570, 309, 311, 51512], "temperature": 0.0, "avg_logprob": -0.10198159589835093, "compression_ratio": 1.972318339100346, "no_speech_prob": 0.13028809428215027}, {"id": 176, "seek": 105540, "start": 1078.3600000000001, "end": 1083.3200000000002, "text": " confusing to a lot of people, it's a quiet taste, so, so we kind of, we have to strike a balance", "tokens": [51512, 13181, 281, 257, 688, 295, 561, 11, 309, 311, 257, 5677, 3939, 11, 370, 11, 370, 321, 733, 295, 11, 321, 362, 281, 9302, 257, 4772, 51760], "temperature": 0.0, "avg_logprob": -0.10198159589835093, "compression_ratio": 1.972318339100346, "no_speech_prob": 0.13028809428215027}, {"id": 177, "seek": 108332, "start": 1083.32, "end": 1094.04, "text": " there, but it certainly makes sense here, so with that lovely generics, we, we can also get out of", "tokens": [50364, 456, 11, 457, 309, 3297, 1669, 2020, 510, 11, 370, 365, 300, 7496, 1337, 1167, 11, 321, 11, 321, 393, 611, 483, 484, 295, 50900], "temperature": 0.0, "avg_logprob": -0.12243014266810466, "compression_ratio": 1.6875, "no_speech_prob": 0.006991962902247906}, {"id": 178, "seek": 108332, "start": 1094.04, "end": 1101.6399999999999, "text": " this addiction to, to arrays as the, as kind of like the, the, the currency of collections", "tokens": [50900, 341, 16835, 281, 11, 281, 41011, 382, 264, 11, 382, 733, 295, 411, 264, 11, 264, 11, 264, 13346, 295, 16641, 51280], "temperature": 0.0, "avg_logprob": -0.12243014266810466, "compression_ratio": 1.6875, "no_speech_prob": 0.006991962902247906}, {"id": 179, "seek": 108332, "start": 1101.6399999999999, "end": 1106.9199999999998, "text": " being passed around, because arrays are, you know, they're very low-level, fixed size, they", "tokens": [51280, 885, 4678, 926, 11, 570, 41011, 366, 11, 291, 458, 11, 436, 434, 588, 2295, 12, 12418, 11, 6806, 2744, 11, 436, 51544], "temperature": 0.0, "avg_logprob": -0.12243014266810466, "compression_ratio": 1.6875, "no_speech_prob": 0.006991962902247906}, {"id": 180, "seek": 108332, "start": 1106.9199999999998, "end": 1112.04, "text": " expose too much, they're unsafe in various ways because you pass your array to someone and they,", "tokens": [51544, 19219, 886, 709, 11, 436, 434, 35948, 294, 3683, 2098, 570, 291, 1320, 428, 10225, 281, 1580, 293, 436, 11, 51800], "temperature": 0.0, "avg_logprob": -0.12243014266810466, "compression_ratio": 1.6875, "no_speech_prob": 0.006991962902247906}, {"id": 181, "seek": 111204, "start": 1112.04, "end": 1115.48, "text": " they're messing with it while you're watching it somewhere else, and you know, that's just, you", "tokens": [50364, 436, 434, 23258, 365, 309, 1339, 291, 434, 1976, 309, 4079, 1646, 11, 293, 291, 458, 11, 300, 311, 445, 11, 291, 50536], "temperature": 0.0, "avg_logprob": -0.16405968193535334, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.01907408982515335}, {"id": 182, "seek": 111204, "start": 1115.48, "end": 1121.8799999999999, "text": " know, nasty, so we can start having other interfaces, for instance, that are, that are more", "tokens": [50536, 458, 11, 17923, 11, 370, 321, 393, 722, 1419, 661, 28416, 11, 337, 5197, 11, 300, 366, 11, 300, 366, 544, 50856], "temperature": 0.0, "avg_logprob": -0.16405968193535334, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.01907408982515335}, {"id": 183, "seek": 111204, "start": 1121.8799999999999, "end": 1131.56, "text": " suitable, so, Ionumable of T is a good one, I can return Ionumable of T as well here, and,", "tokens": [50856, 12873, 11, 370, 11, 286, 266, 449, 712, 295, 314, 307, 257, 665, 472, 11, 286, 393, 2736, 286, 266, 449, 712, 295, 314, 382, 731, 510, 11, 293, 11, 51340], "temperature": 0.0, "avg_logprob": -0.16405968193535334, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.01907408982515335}, {"id": 184, "seek": 111204, "start": 1133.96, "end": 1138.76, "text": " and I don't even have to say to array, I can, but I don't have to say to array because, of course,", "tokens": [51460, 293, 286, 500, 380, 754, 362, 281, 584, 281, 10225, 11, 286, 393, 11, 457, 286, 500, 380, 362, 281, 584, 281, 10225, 570, 11, 295, 1164, 11, 51700], "temperature": 0.0, "avg_logprob": -0.16405968193535334, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.01907408982515335}, {"id": 185, "seek": 113876, "start": 1138.84, "end": 1142.12, "text": " a list of T is also an Ionumable, so, you know, things get simpler.", "tokens": [50368, 257, 1329, 295, 314, 307, 611, 364, 286, 266, 449, 712, 11, 370, 11, 291, 458, 11, 721, 483, 18587, 13, 50532], "temperature": 0.0, "avg_logprob": -0.21655944375430836, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.004104526713490486}, {"id": 186, "seek": 113876, "start": 1144.6, "end": 1149.96, "text": " We could do one better, actually, we, we also, well,", "tokens": [50656, 492, 727, 360, 472, 1101, 11, 767, 11, 321, 11, 321, 611, 11, 731, 11, 50924], "temperature": 0.0, "avg_logprob": -0.21655944375430836, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.004104526713490486}, {"id": 187, "seek": 113876, "start": 1151.4, "end": 1154.92, "text": " oh, but, well, it's because I'm saying, in the array here, yeah, yeah, I have to,", "tokens": [50996, 1954, 11, 457, 11, 731, 11, 309, 311, 570, 286, 478, 1566, 11, 294, 264, 10225, 510, 11, 1338, 11, 1338, 11, 286, 362, 281, 11, 51172], "temperature": 0.0, "avg_logprob": -0.21655944375430836, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.004104526713490486}, {"id": 188, "seek": 113876, "start": 1155.72, "end": 1158.6, "text": " I have to just make all the changes, okay, so,", "tokens": [51212, 286, 362, 281, 445, 652, 439, 264, 2962, 11, 1392, 11, 370, 11, 51356], "temperature": 0.0, "avg_logprob": -0.21655944375430836, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.004104526713490486}, {"id": 189, "seek": 115860, "start": 1159.1599999999999, "end": 1163.8, "text": " oh, Eint, thank you.", "tokens": [50392, 1954, 11, 462, 686, 11, 1309, 291, 13, 50624], "temperature": 0.0, "avg_logprob": -0.18126891286749588, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.0038813180290162563}, {"id": 190, "seek": 115860, "start": 1166.36, "end": 1170.52, "text": " Say, are you developers or something? It's like, it's like you, it's like you understand what I'm", "tokens": [50752, 6463, 11, 366, 291, 8849, 420, 746, 30, 467, 311, 411, 11, 309, 311, 411, 291, 11, 309, 311, 411, 291, 1223, 437, 286, 478, 50960], "temperature": 0.0, "avg_logprob": -0.18126891286749588, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.0038813180290162563}, {"id": 191, "seek": 115860, "start": 1170.52, "end": 1180.76, "text": " saying. Hey, I also debugged something once, you know, it's fun, so, so, so far so good, we,", "tokens": [50960, 1566, 13, 1911, 11, 286, 611, 24083, 3004, 746, 1564, 11, 291, 458, 11, 309, 311, 1019, 11, 370, 11, 370, 11, 370, 1400, 370, 665, 11, 321, 11, 51472], "temperature": 0.0, "avg_logprob": -0.18126891286749588, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.0038813180290162563}, {"id": 192, "seek": 115860, "start": 1181.48, "end": 1185.56, "text": " one thing we actually decided was, now we have Ionumable of T, it's like a very,", "tokens": [51508, 472, 551, 321, 767, 3047, 390, 11, 586, 321, 362, 286, 266, 449, 712, 295, 314, 11, 309, 311, 411, 257, 588, 11, 51712], "temperature": 0.0, "avg_logprob": -0.18126891286749588, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.0038813180290162563}, {"id": 193, "seek": 118556, "start": 1185.56, "end": 1191.08, "text": " in abstraction over just sequences of data, we're going to meet this a lot more in C-sharp 3,", "tokens": [50364, 294, 37765, 670, 445, 22978, 295, 1412, 11, 321, 434, 516, 281, 1677, 341, 257, 688, 544, 294, 383, 12, 2716, 6529, 805, 11, 50640], "temperature": 0.0, "avg_logprob": -0.09763773711952003, "compression_ratio": 1.8092105263157894, "no_speech_prob": 0.040773991495370865}, {"id": 194, "seek": 118556, "start": 1191.08, "end": 1195.96, "text": " but already in C-sharp 2, we were like, actually, the compiler could help a lot with this kind of", "tokens": [50640, 457, 1217, 294, 383, 12, 2716, 6529, 568, 11, 321, 645, 411, 11, 767, 11, 264, 31958, 727, 854, 257, 688, 365, 341, 733, 295, 50884], "temperature": 0.0, "avg_logprob": -0.09763773711952003, "compression_ratio": 1.8092105263157894, "no_speech_prob": 0.040773991495370865}, {"id": 195, "seek": 118556, "start": 1195.96, "end": 1200.6, "text": " work here, of producing Ionumables, because they don't have to be produced eagerly,", "tokens": [50884, 589, 510, 11, 295, 10501, 286, 266, 449, 2965, 11, 570, 436, 500, 380, 362, 281, 312, 7126, 18259, 356, 11, 51116], "temperature": 0.0, "avg_logprob": -0.09763773711952003, "compression_ratio": 1.8092105263157894, "no_speech_prob": 0.040773991495370865}, {"id": 196, "seek": 118556, "start": 1200.6, "end": 1204.04, "text": " they don't have to have all the elements pre-computed, they can actually sort of", "tokens": [51116, 436, 500, 380, 362, 281, 362, 439, 264, 4959, 659, 12, 1112, 2582, 292, 11, 436, 393, 767, 1333, 295, 51288], "temperature": 0.0, "avg_logprob": -0.09763773711952003, "compression_ratio": 1.8092105263157894, "no_speech_prob": 0.040773991495370865}, {"id": 197, "seek": 118556, "start": 1204.04, "end": 1208.28, "text": " be lazy and compute things along the way, and we can build a language feature to help with that,", "tokens": [51288, 312, 14847, 293, 14722, 721, 2051, 264, 636, 11, 293, 321, 393, 1322, 257, 2856, 4111, 281, 854, 365, 300, 11, 51500], "temperature": 0.0, "avg_logprob": -0.09763773711952003, "compression_ratio": 1.8092105263157894, "no_speech_prob": 0.040773991495370865}, {"id": 198, "seek": 118556, "start": 1208.28, "end": 1212.9199999999998, "text": " and that's what we call iterators in C-sharp, they're called generators in some other languages,", "tokens": [51500, 293, 300, 311, 437, 321, 818, 17138, 3391, 294, 383, 12, 2716, 6529, 11, 436, 434, 1219, 38662, 294, 512, 661, 8650, 11, 51732], "temperature": 0.0, "avg_logprob": -0.09763773711952003, "compression_ratio": 1.8092105263157894, "no_speech_prob": 0.040773991495370865}, {"id": 199, "seek": 121292, "start": 1212.92, "end": 1218.1200000000001, "text": " which is essentially write a function, and then once in a while you say, oh, here's another element", "tokens": [50364, 597, 307, 4476, 2464, 257, 2445, 11, 293, 550, 1564, 294, 257, 1339, 291, 584, 11, 1954, 11, 510, 311, 1071, 4478, 50624], "temperature": 0.0, "avg_logprob": -0.12039751476711696, "compression_ratio": 1.901185770750988, "no_speech_prob": 0.0030198453459888697}, {"id": 200, "seek": 121292, "start": 1218.1200000000001, "end": 1221.88, "text": " for the result, and then you compute some more, and then, or here's another element for the result,", "tokens": [50624, 337, 264, 1874, 11, 293, 550, 291, 14722, 512, 544, 11, 293, 550, 11, 420, 510, 311, 1071, 4478, 337, 264, 1874, 11, 50812], "temperature": 0.0, "avg_logprob": -0.12039751476711696, "compression_ratio": 1.901185770750988, "no_speech_prob": 0.0030198453459888697}, {"id": 201, "seek": 121292, "start": 1221.88, "end": 1227.3200000000002, "text": " and it actually gets executed lazily, up to every one of those points, you just pause and,", "tokens": [50812, 293, 309, 767, 2170, 17577, 19320, 953, 11, 493, 281, 633, 472, 295, 729, 2793, 11, 291, 445, 10465, 293, 11, 51084], "temperature": 0.0, "avg_logprob": -0.12039751476711696, "compression_ratio": 1.901185770750988, "no_speech_prob": 0.0030198453459888697}, {"id": 202, "seek": 121292, "start": 1227.3200000000002, "end": 1232.04, "text": " and give the result back, and then the next time the consumer asks for a result, they come, you", "tokens": [51084, 293, 976, 264, 1874, 646, 11, 293, 550, 264, 958, 565, 264, 9711, 8962, 337, 257, 1874, 11, 436, 808, 11, 291, 51320], "temperature": 0.0, "avg_logprob": -0.12039751476711696, "compression_ratio": 1.901185770750988, "no_speech_prob": 0.0030198453459888697}, {"id": 203, "seek": 121292, "start": 1232.04, "end": 1236.92, "text": " know, execute some more, so that's iterators in C-sharp, that means we don't even need like an", "tokens": [51320, 458, 11, 14483, 512, 544, 11, 370, 300, 311, 17138, 3391, 294, 383, 12, 2716, 6529, 11, 300, 1355, 321, 500, 380, 754, 643, 411, 364, 51564], "temperature": 0.0, "avg_logprob": -0.12039751476711696, "compression_ratio": 1.901185770750988, "no_speech_prob": 0.0030198453459888697}, {"id": 204, "seek": 123692, "start": 1236.92, "end": 1245.8000000000002, "text": " accumulator, we can just say, if that thing, you know, just yield return the value, I'm not", "tokens": [50364, 12989, 16381, 11, 321, 393, 445, 584, 11, 498, 300, 551, 11, 291, 458, 11, 445, 11257, 2736, 264, 2158, 11, 286, 478, 406, 50808], "temperature": 0.0, "avg_logprob": -0.10951822180497019, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.04205143079161644}, {"id": 205, "seek": 123692, "start": 1246.6000000000001, "end": 1251.64, "text": " super excited about the syntax we chose there, I will just say I was not around,", "tokens": [50848, 1687, 2919, 466, 264, 28431, 321, 5111, 456, 11, 286, 486, 445, 584, 286, 390, 406, 926, 11, 51100], "temperature": 0.0, "avg_logprob": -0.10951822180497019, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.04205143079161644}, {"id": 206, "seek": 123692, "start": 1253.72, "end": 1258.3600000000001, "text": " we liked keywords a lot still back then, we kind of do still a little bit, and now I'm,", "tokens": [51204, 321, 4501, 21009, 257, 688, 920, 646, 550, 11, 321, 733, 295, 360, 920, 257, 707, 857, 11, 293, 586, 286, 478, 11, 51436], "temperature": 0.0, "avg_logprob": -0.10951822180497019, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.04205143079161644}, {"id": 207, "seek": 123692, "start": 1259.0, "end": 1266.04, "text": " you know, that's it, that's the filter method, you know, you cycle through,", "tokens": [51468, 291, 458, 11, 300, 311, 309, 11, 300, 311, 264, 6608, 3170, 11, 291, 458, 11, 291, 6586, 807, 11, 51820], "temperature": 0.0, "avg_logprob": -0.10951822180497019, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.04205143079161644}, {"id": 208, "seek": 126604, "start": 1266.12, "end": 1271.3999999999999, "text": " you yield return something, if you decide that, hey, let me do that, and that's it, right, so boom,", "tokens": [50368, 291, 11257, 2736, 746, 11, 498, 291, 4536, 300, 11, 4177, 11, 718, 385, 360, 300, 11, 293, 300, 311, 309, 11, 558, 11, 370, 9351, 11, 50632], "temperature": 0.0, "avg_logprob": -0.10541297367640905, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.0024720034562051296}, {"id": 209, "seek": 126604, "start": 1271.3999999999999, "end": 1278.68, "text": " very nice. Also in C-sharp too, we're like, hey, we've heard about lambda expressions,", "tokens": [50632, 588, 1481, 13, 2743, 294, 383, 12, 2716, 6529, 886, 11, 321, 434, 411, 11, 4177, 11, 321, 600, 2198, 466, 13607, 15277, 11, 50996], "temperature": 0.0, "avg_logprob": -0.10541297367640905, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.0024720034562051296}, {"id": 210, "seek": 126604, "start": 1279.3999999999999, "end": 1286.76, "text": " let's do not that, something similar, let's have anonymous functions, why do you have to declare", "tokens": [51032, 718, 311, 360, 406, 300, 11, 746, 2531, 11, 718, 311, 362, 24932, 6828, 11, 983, 360, 291, 362, 281, 19710, 51400], "temperature": 0.0, "avg_logprob": -0.10541297367640905, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.0024720034562051296}, {"id": 211, "seek": 126604, "start": 1286.76, "end": 1291.56, "text": " all the functions that you want to pass, that's just like a pain, let's get rid of all these", "tokens": [51400, 439, 264, 6828, 300, 291, 528, 281, 1320, 11, 300, 311, 445, 411, 257, 1822, 11, 718, 311, 483, 3973, 295, 439, 613, 51640], "temperature": 0.0, "avg_logprob": -0.10541297367640905, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.0024720034562051296}, {"id": 212, "seek": 129156, "start": 1291.56, "end": 1296.76, "text": " declarations and stuff, so instead of saying greater than five here, what if I could just", "tokens": [50364, 16694, 763, 293, 1507, 11, 370, 2602, 295, 1566, 5044, 813, 1732, 510, 11, 437, 498, 286, 727, 445, 50624], "temperature": 0.0, "avg_logprob": -0.10806345688669305, "compression_ratio": 1.6457399103139014, "no_speech_prob": 0.010984217748045921}, {"id": 213, "seek": 129156, "start": 1296.76, "end": 1301.96, "text": " write the function with the body and everything in place here, so we come up with an elegant", "tokens": [50624, 2464, 264, 2445, 365, 264, 1772, 293, 1203, 294, 1081, 510, 11, 370, 321, 808, 493, 365, 364, 21117, 50884], "temperature": 0.0, "avg_logprob": -0.10806345688669305, "compression_ratio": 1.6457399103139014, "no_speech_prob": 0.010984217748045921}, {"id": 214, "seek": 129156, "start": 1301.96, "end": 1313.72, "text": " syntax saying delegate, delegate all the crap, there we go, beautiful, right, it's, well,", "tokens": [50884, 28431, 1566, 40999, 11, 40999, 439, 264, 12426, 11, 456, 321, 352, 11, 2238, 11, 558, 11, 309, 311, 11, 731, 11, 51472], "temperature": 0.0, "avg_logprob": -0.10806345688669305, "compression_ratio": 1.6457399103139014, "no_speech_prob": 0.010984217748045921}, {"id": 215, "seek": 129156, "start": 1313.72, "end": 1319.8, "text": " we can laugh now, but you know, it's certainly an improvement, now, you know, I'm free to just", "tokens": [51472, 321, 393, 5801, 586, 11, 457, 291, 458, 11, 309, 311, 3297, 364, 10444, 11, 586, 11, 291, 458, 11, 286, 478, 1737, 281, 445, 51776], "temperature": 0.0, "avg_logprob": -0.10806345688669305, "compression_ratio": 1.6457399103139014, "no_speech_prob": 0.010984217748045921}, {"id": 216, "seek": 131980, "start": 1319.8, "end": 1323.48, "text": " come up with functionality and pass it along, and of course the compiler generates", "tokens": [50364, 808, 493, 365, 14980, 293, 1320, 309, 2051, 11, 293, 295, 1164, 264, 31958, 23815, 50548], "temperature": 0.0, "avg_logprob": -0.1183804176949166, "compression_ratio": 1.6984732824427482, "no_speech_prob": 0.003942985087633133}, {"id": 217, "seek": 131980, "start": 1323.48, "end": 1327.1599999999999, "text": " something under the hood that's similar to before, but hey, all languages do it like that,", "tokens": [50548, 746, 833, 264, 13376, 300, 311, 2531, 281, 949, 11, 457, 4177, 11, 439, 8650, 360, 309, 411, 300, 11, 50732], "temperature": 0.0, "avg_logprob": -0.1183804176949166, "compression_ratio": 1.6984732824427482, "no_speech_prob": 0.003942985087633133}, {"id": 218, "seek": 131980, "start": 1327.1599999999999, "end": 1334.84, "text": " pretty much, so great, our first take on anonymous functions, now C-sharp three,", "tokens": [50732, 1238, 709, 11, 370, 869, 11, 527, 700, 747, 322, 24932, 6828, 11, 586, 383, 12, 2716, 6529, 1045, 11, 51116], "temperature": 0.0, "avg_logprob": -0.1183804176949166, "compression_ratio": 1.6984732824427482, "no_speech_prob": 0.003942985087633133}, {"id": 219, "seek": 131980, "start": 1335.48, "end": 1339.8799999999999, "text": " now we have big ambitions, this functional thing has really gotten into our blood, and this is", "tokens": [51148, 586, 321, 362, 955, 34475, 11, 341, 11745, 551, 575, 534, 5768, 666, 527, 3390, 11, 293, 341, 307, 51368], "temperature": 0.0, "avg_logprob": -0.1183804176949166, "compression_ratio": 1.6984732824427482, "no_speech_prob": 0.003942985087633133}, {"id": 220, "seek": 131980, "start": 1339.8799999999999, "end": 1344.28, "text": " where I'm starting to be around, so I've witnessed more of this firsthand, so in C-sharp three,", "tokens": [51368, 689, 286, 478, 2891, 281, 312, 926, 11, 370, 286, 600, 21519, 544, 295, 341, 38599, 11, 370, 294, 383, 12, 2716, 6529, 1045, 11, 51588], "temperature": 0.0, "avg_logprob": -0.1183804176949166, "compression_ratio": 1.6984732824427482, "no_speech_prob": 0.003942985087633133}, {"id": 221, "seek": 134428, "start": 1344.6, "end": 1352.52, "text": " we want to, we want to solve querying once and for all, the functional languages can do it,", "tokens": [50380, 321, 528, 281, 11, 321, 528, 281, 5039, 7083, 1840, 1564, 293, 337, 439, 11, 264, 11745, 8650, 393, 360, 309, 11, 50776], "temperature": 0.0, "avg_logprob": -0.12045592257851048, "compression_ratio": 1.7989690721649485, "no_speech_prob": 0.014270828105509281}, {"id": 222, "seek": 134428, "start": 1352.52, "end": 1357.72, "text": " we can do it too, so we want to mainstream functional approaches to solving querying,", "tokens": [50776, 321, 393, 360, 309, 886, 11, 370, 321, 528, 281, 15960, 11745, 11587, 281, 12606, 7083, 1840, 11, 51036], "temperature": 0.0, "avg_logprob": -0.12045592257851048, "compression_ratio": 1.7989690721649485, "no_speech_prob": 0.014270828105509281}, {"id": 223, "seek": 134428, "start": 1358.28, "end": 1364.6, "text": " let's do that, and we have, filter is a great example, like it's a function that does querying,", "tokens": [51064, 718, 311, 360, 300, 11, 293, 321, 362, 11, 6608, 307, 257, 869, 1365, 11, 411, 309, 311, 257, 2445, 300, 775, 7083, 1840, 11, 51380], "temperature": 0.0, "avg_logprob": -0.12045592257851048, "compression_ratio": 1.7989690721649485, "no_speech_prob": 0.014270828105509281}, {"id": 224, "seek": 134428, "start": 1365.72, "end": 1369.72, "text": " a one aspect of querying, we kind of have the generics in place to do this,", "tokens": [51436, 257, 472, 4171, 295, 7083, 1840, 11, 321, 733, 295, 362, 264, 1337, 1167, 294, 1081, 281, 360, 341, 11, 51636], "temperature": 0.0, "avg_logprob": -0.12045592257851048, "compression_ratio": 1.7989690721649485, "no_speech_prob": 0.014270828105509281}, {"id": 225, "seek": 136972, "start": 1369.72, "end": 1378.68, "text": " why don't we, why don't we actually declare an even more general library of function types,", "tokens": [50364, 983, 500, 380, 321, 11, 983, 500, 380, 321, 767, 19710, 364, 754, 544, 2674, 6405, 295, 2445, 3467, 11, 50812], "temperature": 0.0, "avg_logprob": -0.1438896788491143, "compression_ratio": 1.668639053254438, "no_speech_prob": 0.0027538887225091457}, {"id": 226, "seek": 136972, "start": 1378.68, "end": 1386.68, "text": " and then we also declare a library of, of querying methods, and get all that stuff working,", "tokens": [50812, 293, 550, 321, 611, 19710, 257, 6405, 295, 11, 295, 7083, 1840, 7150, 11, 293, 483, 439, 300, 1507, 1364, 11, 51212], "temperature": 0.0, "avg_logprob": -0.1438896788491143, "compression_ratio": 1.668639053254438, "no_speech_prob": 0.0027538887225091457}, {"id": 227, "seek": 136972, "start": 1390.04, "end": 1398.2, "text": " so we, so instead of just having predicate of t, we create a family, families of functions called,", "tokens": [51380, 370, 321, 11, 370, 2602, 295, 445, 1419, 3852, 8700, 295, 256, 11, 321, 1884, 257, 1605, 11, 4466, 295, 6828, 1219, 11, 51788], "temperature": 0.0, "avg_logprob": -0.1438896788491143, "compression_ratio": 1.668639053254438, "no_speech_prob": 0.0027538887225091457}, {"id": 228, "seek": 139820, "start": 1398.52, "end": 1407.4, "text": " funk and action, funk for the ones that return stuff, so funk of t1, t result, or something like", "tokens": [50380, 26476, 293, 3069, 11, 26476, 337, 264, 2306, 300, 2736, 1507, 11, 370, 26476, 295, 256, 16, 11, 256, 1874, 11, 420, 746, 411, 50824], "temperature": 0.0, "avg_logprob": -0.13050533900751132, "compression_ratio": 1.7309417040358743, "no_speech_prob": 0.0008153099333867431}, {"id": 229, "seek": 139820, "start": 1407.4, "end": 1415.24, "text": " that, that take a t and return a t result, so that's what the funks look like, take a t1 here,", "tokens": [50824, 300, 11, 300, 747, 257, 256, 293, 2736, 257, 256, 1874, 11, 370, 300, 311, 437, 264, 1019, 1694, 574, 411, 11, 747, 257, 256, 16, 510, 11, 51216], "temperature": 0.0, "avg_logprob": -0.13050533900751132, "compression_ratio": 1.7309417040358743, "no_speech_prob": 0.0008153099333867431}, {"id": 230, "seek": 139820, "start": 1416.3600000000001, "end": 1420.52, "text": " and we just declare them in the core library, so I don't even have to do it here, they're available", "tokens": [51272, 293, 321, 445, 19710, 552, 294, 264, 4965, 6405, 11, 370, 286, 500, 380, 754, 362, 281, 360, 309, 510, 11, 436, 434, 2435, 51480], "temperature": 0.0, "avg_logprob": -0.13050533900751132, "compression_ratio": 1.7309417040358743, "no_speech_prob": 0.0008153099333867431}, {"id": 231, "seek": 139820, "start": 1420.52, "end": 1427.4, "text": " to everyone who wants to be a little bit functional, and we can just here, actually it doesn't", "tokens": [51480, 281, 1518, 567, 2738, 281, 312, 257, 707, 857, 11745, 11, 293, 321, 393, 445, 510, 11, 767, 309, 1177, 380, 51824], "temperature": 0.0, "avg_logprob": -0.13050533900751132, "compression_ratio": 1.7309417040358743, "no_speech_prob": 0.0008153099333867431}, {"id": 232, "seek": 142740, "start": 1427.4, "end": 1432.6000000000001, "text": " predicate itself actually in the core libraries from back way, way back when, so it doesn't give", "tokens": [50364, 3852, 8700, 2564, 767, 294, 264, 4965, 15148, 490, 646, 636, 11, 636, 646, 562, 11, 370, 309, 1177, 380, 976, 50624], "temperature": 0.0, "avg_logprob": -0.1491231918334961, "compression_ratio": 1.7180616740088106, "no_speech_prob": 0.001521575846709311}, {"id": 233, "seek": 142740, "start": 1432.6000000000001, "end": 1440.1200000000001, "text": " me a red squiggle here, but let's say funk of t, instead to describe the function we're passing in", "tokens": [50624, 385, 257, 2182, 2339, 19694, 510, 11, 457, 718, 311, 584, 26476, 295, 256, 11, 2602, 281, 6786, 264, 2445, 321, 434, 8437, 294, 51000], "temperature": 0.0, "avg_logprob": -0.1491231918334961, "compression_ratio": 1.7180616740088106, "no_speech_prob": 0.001521575846709311}, {"id": 234, "seek": 142740, "start": 1440.1200000000001, "end": 1450.68, "text": " here, and then instead of me writing the filter method as kind of a, one thing that you quickly", "tokens": [51000, 510, 11, 293, 550, 2602, 295, 385, 3579, 264, 6608, 3170, 382, 733, 295, 257, 11, 472, 551, 300, 291, 2661, 51528], "temperature": 0.0, "avg_logprob": -0.1491231918334961, "compression_ratio": 1.7180616740088106, "no_speech_prob": 0.001521575846709311}, {"id": 235, "seek": 142740, "start": 1450.68, "end": 1454.92, "text": " find out when you want to, you want to query things is, hey I want to, I want to filter some more,", "tokens": [51528, 915, 484, 562, 291, 528, 281, 11, 291, 528, 281, 14581, 721, 307, 11, 4177, 286, 528, 281, 11, 286, 528, 281, 6608, 512, 544, 11, 51740], "temperature": 0.0, "avg_logprob": -0.1491231918334961, "compression_ratio": 1.7180616740088106, "no_speech_prob": 0.001521575846709311}, {"id": 236, "seek": 145492, "start": 1454.92, "end": 1459.16, "text": " for instance, I want to call query methods on top of query methods, so I could call filter twice,", "tokens": [50364, 337, 5197, 11, 286, 528, 281, 818, 14581, 7150, 322, 1192, 295, 14581, 7150, 11, 370, 286, 727, 818, 6608, 6091, 11, 50576], "temperature": 0.0, "avg_logprob": -0.12974842940226639, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.002144757192581892}, {"id": 237, "seek": 145492, "start": 1459.16, "end": 1466.68, "text": " you know, I could say filter on the result of the first filter, comma, you know, some other", "tokens": [50576, 291, 458, 11, 286, 727, 584, 6608, 322, 264, 1874, 295, 264, 700, 6608, 11, 22117, 11, 291, 458, 11, 512, 661, 50952], "temperature": 0.0, "avg_logprob": -0.12974842940226639, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.002144757192581892}, {"id": 238, "seek": 145492, "start": 1467.5600000000002, "end": 1475.0800000000002, "text": " delegate thing, and you know, it quickly becomes long, I should probably have done lambdas first,", "tokens": [50996, 40999, 551, 11, 293, 291, 458, 11, 309, 2661, 3643, 938, 11, 286, 820, 1391, 362, 1096, 10097, 27476, 700, 11, 51372], "temperature": 0.0, "avg_logprob": -0.12974842940226639, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.002144757192581892}, {"id": 239, "seek": 145492, "start": 1475.0800000000002, "end": 1481.48, "text": " shouldn't I? I'm going to be doing more typing, okay, hold that thought, let me do, let me switch", "tokens": [51372, 4659, 380, 286, 30, 286, 478, 516, 281, 312, 884, 544, 18444, 11, 1392, 11, 1797, 300, 1194, 11, 718, 385, 360, 11, 718, 385, 3679, 51692], "temperature": 0.0, "avg_logprob": -0.12974842940226639, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.002144757192581892}, {"id": 240, "seek": 148148, "start": 1481.48, "end": 1488.84, "text": " to lambdas quickly, we get better syntax, that's actual lambdas, you can do this, it's a little", "tokens": [50364, 281, 10097, 27476, 2661, 11, 321, 483, 1101, 28431, 11, 300, 311, 3539, 10097, 27476, 11, 291, 393, 360, 341, 11, 309, 311, 257, 707, 50732], "temperature": 0.0, "avg_logprob": -0.1269732444517074, "compression_ratio": 1.7183098591549295, "no_speech_prob": 0.0031662697438150644}, {"id": 241, "seek": 148148, "start": 1488.84, "end": 1495.0, "text": " shorter, or we have, so this is still like a statement body there, or we can actually do", "tokens": [50732, 11639, 11, 420, 321, 362, 11, 370, 341, 307, 920, 411, 257, 5629, 1772, 456, 11, 420, 321, 393, 767, 360, 51040], "temperature": 0.0, "avg_logprob": -0.1269732444517074, "compression_ratio": 1.7183098591549295, "no_speech_prob": 0.0031662697438150644}, {"id": 242, "seek": 148148, "start": 1497.32, "end": 1502.2, "text": " just a single expression, and now it starts, it starts being a little expression oriented,", "tokens": [51156, 445, 257, 2167, 6114, 11, 293, 586, 309, 3719, 11, 309, 3719, 885, 257, 707, 6114, 21841, 11, 51400], "temperature": 0.0, "avg_logprob": -0.1269732444517074, "compression_ratio": 1.7183098591549295, "no_speech_prob": 0.0031662697438150644}, {"id": 243, "seek": 148148, "start": 1502.2, "end": 1507.88, "text": " like the functional languages, that's kind of exciting, but we still have the problem now,", "tokens": [51400, 411, 264, 11745, 8650, 11, 300, 311, 733, 295, 4670, 11, 457, 321, 920, 362, 264, 1154, 586, 11, 51684], "temperature": 0.0, "avg_logprob": -0.1269732444517074, "compression_ratio": 1.7183098591549295, "no_speech_prob": 0.0031662697438150644}, {"id": 244, "seek": 150788, "start": 1507.88, "end": 1514.8400000000001, "text": " if I want to filter that one some more, I can say int, why, arrow, something, stuff,", "tokens": [50364, 498, 286, 528, 281, 6608, 300, 472, 512, 544, 11, 286, 393, 584, 560, 11, 983, 11, 11610, 11, 746, 11, 1507, 11, 50712], "temperature": 0.0, "avg_logprob": -0.1753999782058428, "compression_ratio": 1.723809523809524, "no_speech_prob": 0.0010308017954230309}, {"id": 245, "seek": 150788, "start": 1515.88, "end": 1521.96, "text": " oh it needs to be in parentheses here, actually does it, you know, lambdas, you don't actually", "tokens": [50764, 1954, 309, 2203, 281, 312, 294, 34153, 510, 11, 767, 775, 309, 11, 291, 458, 11, 10097, 27476, 11, 291, 500, 380, 767, 51068], "temperature": 0.0, "avg_logprob": -0.1753999782058428, "compression_ratio": 1.723809523809524, "no_speech_prob": 0.0010308017954230309}, {"id": 246, "seek": 150788, "start": 1521.96, "end": 1526.0400000000002, "text": " have to say the type, if it's given from context, you don't have to say it, that's kind of cool,", "tokens": [51068, 362, 281, 584, 264, 2010, 11, 498, 309, 311, 2212, 490, 4319, 11, 291, 500, 380, 362, 281, 584, 309, 11, 300, 311, 733, 295, 1627, 11, 51272], "temperature": 0.0, "avg_logprob": -0.1753999782058428, "compression_ratio": 1.723809523809524, "no_speech_prob": 0.0010308017954230309}, {"id": 247, "seek": 150788, "start": 1527.72, "end": 1533.8000000000002, "text": " but so why, I want to get the ones that are even, stupid example, but just, you know,", "tokens": [51356, 457, 370, 983, 11, 286, 528, 281, 483, 264, 2306, 300, 366, 754, 11, 6631, 1365, 11, 457, 445, 11, 291, 458, 11, 51660], "temperature": 0.0, "avg_logprob": -0.1753999782058428, "compression_ratio": 1.723809523809524, "no_speech_prob": 0.0010308017954230309}, {"id": 248, "seek": 153380, "start": 1534.76, "end": 1545.1599999999999, "text": " equals zero, you know, I can compose my query methods, but it sucks, right, I'm composing sort", "tokens": [50412, 6915, 4018, 11, 291, 458, 11, 286, 393, 35925, 452, 14581, 7150, 11, 457, 309, 15846, 11, 558, 11, 286, 478, 715, 6110, 1333, 50932], "temperature": 0.0, "avg_logprob": -0.12126718461513519, "compression_ratio": 1.794776119402985, "no_speech_prob": 0.0033758243080228567}, {"id": 249, "seek": 153380, "start": 1545.1599999999999, "end": 1551.08, "text": " of inside out, like this first stuff is in the middle, and then I'm slapping stuff on both sides", "tokens": [50932, 295, 1854, 484, 11, 411, 341, 700, 1507, 307, 294, 264, 2808, 11, 293, 550, 286, 478, 8039, 3759, 1507, 322, 1293, 4881, 51228], "temperature": 0.0, "avg_logprob": -0.12126718461513519, "compression_ratio": 1.794776119402985, "no_speech_prob": 0.0033758243080228567}, {"id": 250, "seek": 153380, "start": 1551.08, "end": 1555.3999999999999, "text": " of it, and it's completely unreadable, well what do the functional people do when they, I mean,", "tokens": [51228, 295, 309, 11, 293, 309, 311, 2584, 517, 2538, 712, 11, 731, 437, 360, 264, 11745, 561, 360, 562, 436, 11, 286, 914, 11, 51444], "temperature": 0.0, "avg_logprob": -0.12126718461513519, "compression_ratio": 1.794776119402985, "no_speech_prob": 0.0033758243080228567}, {"id": 251, "seek": 153380, "start": 1555.3999999999999, "end": 1559.32, "text": " they're doing this stuff, how do they do it, well they have pipelining operators, you can call", "tokens": [51444, 436, 434, 884, 341, 1507, 11, 577, 360, 436, 360, 309, 11, 731, 436, 362, 8489, 338, 1760, 19077, 11, 291, 393, 818, 51640], "temperature": 0.0, "avg_logprob": -0.12126718461513519, "compression_ratio": 1.794776119402985, "no_speech_prob": 0.0033758243080228567}, {"id": 252, "seek": 153380, "start": 1559.32, "end": 1563.32, "text": " functions like this, but you can also pipeline, so in a functional language, what you would do is,", "tokens": [51640, 6828, 411, 341, 11, 457, 291, 393, 611, 15517, 11, 370, 294, 257, 11745, 2856, 11, 437, 291, 576, 360, 307, 11, 51840], "temperature": 0.0, "avg_logprob": -0.12126718461513519, "compression_ratio": 1.794776119402985, "no_speech_prob": 0.0033758243080228567}, {"id": 253, "seek": 156332, "start": 1563.32, "end": 1569.8, "text": " you would start out with the array on the left side, and then you would, so let me, let me do some", "tokens": [50364, 291, 576, 722, 484, 365, 264, 10225, 322, 264, 1411, 1252, 11, 293, 550, 291, 576, 11, 370, 718, 385, 11, 718, 385, 360, 512, 50688], "temperature": 0.0, "avg_logprob": -0.09541089607007576, "compression_ratio": 1.8373205741626795, "no_speech_prob": 0.005136832594871521}, {"id": 254, "seek": 156332, "start": 1569.8, "end": 1574.9199999999998, "text": " horrendous doctoring here, you know, start out with the array, you would have some kind of pipeline", "tokens": [50688, 49520, 563, 4631, 278, 510, 11, 291, 458, 11, 722, 484, 365, 264, 10225, 11, 291, 576, 362, 512, 733, 295, 15517, 50944], "temperature": 0.0, "avg_logprob": -0.09541089607007576, "compression_ratio": 1.8373205741626795, "no_speech_prob": 0.005136832594871521}, {"id": 255, "seek": 156332, "start": 1574.9199999999998, "end": 1579.8, "text": " operator, which we don't have in C sharp, and you pass it into filter, filtering the first thing,", "tokens": [50944, 12973, 11, 597, 321, 500, 380, 362, 294, 383, 8199, 11, 293, 291, 1320, 309, 666, 6608, 11, 30822, 264, 700, 551, 11, 51188], "temperature": 0.0, "avg_logprob": -0.09541089607007576, "compression_ratio": 1.8373205741626795, "no_speech_prob": 0.005136832594871521}, {"id": 256, "seek": 156332, "start": 1581.24, "end": 1586.28, "text": " and that's just the implicit first argument for it there, and then you'd pipe that into", "tokens": [51260, 293, 300, 311, 445, 264, 26947, 700, 6770, 337, 309, 456, 11, 293, 550, 291, 1116, 11240, 300, 666, 51512], "temperature": 0.0, "avg_logprob": -0.09541089607007576, "compression_ratio": 1.8373205741626795, "no_speech_prob": 0.005136832594871521}, {"id": 257, "seek": 158628, "start": 1587.08, "end": 1593.56, "text": " filtering the second thing, and now you have things in the right order, they're sort of cascading", "tokens": [50404, 30822, 264, 1150, 551, 11, 293, 586, 291, 362, 721, 294, 264, 558, 1668, 11, 436, 434, 1333, 295, 3058, 66, 8166, 50728], "temperature": 0.0, "avg_logprob": -0.11759472715443578, "compression_ratio": 1.7811320754716982, "no_speech_prob": 0.16425278782844543}, {"id": 258, "seek": 158628, "start": 1593.56, "end": 1599.24, "text": " beautifully in the order that you're doing them, it's kind of fluent, man, as we said, so,", "tokens": [50728, 16525, 294, 264, 1668, 300, 291, 434, 884, 552, 11, 309, 311, 733, 295, 40799, 11, 587, 11, 382, 321, 848, 11, 370, 11, 51012], "temperature": 0.0, "avg_logprob": -0.11759472715443578, "compression_ratio": 1.7811320754716982, "no_speech_prob": 0.16425278782844543}, {"id": 259, "seek": 158628, "start": 1600.92, "end": 1604.84, "text": " so that's, can we do something like that in C sharp, and that's where extension, we come up", "tokens": [51096, 370, 300, 311, 11, 393, 321, 360, 746, 411, 300, 294, 383, 8199, 11, 293, 300, 311, 689, 10320, 11, 321, 808, 493, 51292], "temperature": 0.0, "avg_logprob": -0.11759472715443578, "compression_ratio": 1.7811320754716982, "no_speech_prob": 0.16425278782844543}, {"id": 260, "seek": 158628, "start": 1604.84, "end": 1609.48, "text": " with extension methods, which is essentially just to solve this little problem in the beginning,", "tokens": [51292, 365, 10320, 7150, 11, 597, 307, 4476, 445, 281, 5039, 341, 707, 1154, 294, 264, 2863, 11, 51524], "temperature": 0.0, "avg_logprob": -0.11759472715443578, "compression_ratio": 1.7811320754716982, "no_speech_prob": 0.16425278782844543}, {"id": 261, "seek": 158628, "start": 1609.48, "end": 1614.2, "text": " where they turn out to be like extremely useful in extremely many scenarios, we're still being", "tokens": [51524, 689, 436, 1261, 484, 281, 312, 411, 4664, 4420, 294, 4664, 867, 15077, 11, 321, 434, 920, 885, 51760], "temperature": 0.0, "avg_logprob": -0.11759472715443578, "compression_ratio": 1.7811320754716982, "no_speech_prob": 0.16425278782844543}, {"id": 262, "seek": 161420, "start": 1614.2, "end": 1618.6000000000001, "text": " inspired by them, and we want to do more with them, where what you're saying is, we're just,", "tokens": [50364, 7547, 538, 552, 11, 293, 321, 528, 281, 360, 544, 365, 552, 11, 689, 437, 291, 434, 1566, 307, 11, 321, 434, 445, 11, 50584], "temperature": 0.0, "avg_logprob": -0.10811163902282715, "compression_ratio": 1.7661691542288558, "no_speech_prob": 0.006476724985986948}, {"id": 263, "seek": 161420, "start": 1619.32, "end": 1626.3600000000001, "text": " what if you just pretend that the static method or this function is actually like a, and it's,", "tokens": [50620, 437, 498, 291, 445, 11865, 300, 264, 13437, 3170, 420, 341, 2445, 307, 767, 411, 257, 11, 293, 309, 311, 11, 50972], "temperature": 0.0, "avg_logprob": -0.10811163902282715, "compression_ratio": 1.7661691542288558, "no_speech_prob": 0.006476724985986948}, {"id": 264, "seek": 161420, "start": 1626.3600000000001, "end": 1634.2, "text": " I can't do it with a, I can't do it with just this method here, because it's not actually,", "tokens": [50972, 286, 393, 380, 360, 309, 365, 257, 11, 286, 393, 380, 360, 309, 365, 445, 341, 3170, 510, 11, 570, 309, 311, 406, 767, 11, 51364], "temperature": 0.0, "avg_logprob": -0.10811163902282715, "compression_ratio": 1.7661691542288558, "no_speech_prob": 0.006476724985986948}, {"id": 265, "seek": 161420, "start": 1635.72, "end": 1639.16, "text": " it's not declared in a proper space, but we can do, the syntax is like this,", "tokens": [51440, 309, 311, 406, 15489, 294, 257, 2296, 1901, 11, 457, 321, 393, 360, 11, 264, 28431, 307, 411, 341, 11, 51612], "temperature": 0.0, "avg_logprob": -0.10811163902282715, "compression_ratio": 1.7661691542288558, "no_speech_prob": 0.006476724985986948}, {"id": 266, "seek": 163916, "start": 1640.1200000000001, "end": 1645.5600000000002, "text": " we just pretend it's an instance method on the first argument, and now I can go and add", "tokens": [50412, 321, 445, 11865, 309, 311, 364, 5197, 3170, 322, 264, 700, 6770, 11, 293, 586, 286, 393, 352, 293, 909, 50684], "temperature": 0.0, "avg_logprob": -0.10163490651017529, "compression_ratio": 1.7923076923076924, "no_speech_prob": 0.005057286471128464}, {"id": 267, "seek": 163916, "start": 1646.1200000000001, "end": 1651.88, "text": " method, what looks like instance methods to other people's types, and that kind of gives you that", "tokens": [50712, 3170, 11, 437, 1542, 411, 5197, 7150, 281, 661, 561, 311, 3467, 11, 293, 300, 733, 295, 2709, 291, 300, 51000], "temperature": 0.0, "avg_logprob": -0.10163490651017529, "compression_ratio": 1.7923076923076924, "no_speech_prob": 0.005057286471128464}, {"id": 268, "seek": 163916, "start": 1651.88, "end": 1657.72, "text": " flow, so luckily, I don't have to like go in and do it properly here, because it turns out that", "tokens": [51000, 3095, 11, 370, 22880, 11, 286, 500, 380, 362, 281, 411, 352, 294, 293, 360, 309, 6108, 510, 11, 570, 309, 4523, 484, 300, 51292], "temperature": 0.0, "avg_logprob": -0.10163490651017529, "compression_ratio": 1.7923076923076924, "no_speech_prob": 0.005057286471128464}, {"id": 269, "seek": 163916, "start": 1657.72, "end": 1662.92, "text": " method just like filter is being added to the libraries at the same time, and now we can just", "tokens": [51292, 3170, 445, 411, 6608, 307, 885, 3869, 281, 264, 15148, 412, 264, 912, 565, 11, 293, 586, 321, 393, 445, 51552], "temperature": 0.0, "avg_logprob": -0.10163490651017529, "compression_ratio": 1.7923076923076924, "no_speech_prob": 0.005057286471128464}, {"id": 270, "seek": 163916, "start": 1662.92, "end": 1668.3600000000001, "text": " do the where stuff, so we can get rid of our own filter method and use the one that's part", "tokens": [51552, 360, 264, 689, 1507, 11, 370, 321, 393, 483, 3973, 295, 527, 1065, 6608, 3170, 293, 764, 264, 472, 300, 311, 644, 51824], "temperature": 0.0, "avg_logprob": -0.10163490651017529, "compression_ratio": 1.7923076923076924, "no_speech_prob": 0.005057286471128464}, {"id": 271, "seek": 166836, "start": 1668.36, "end": 1675.08, "text": " of the query library that we are now providing, okay, so we can break it up a little here, and now", "tokens": [50364, 295, 264, 14581, 6405, 300, 321, 366, 586, 6530, 11, 1392, 11, 370, 321, 393, 1821, 309, 493, 257, 707, 510, 11, 293, 586, 50700], "temperature": 0.0, "avg_logprob": -0.10552855491638184, "compression_ratio": 1.6652173913043478, "no_speech_prob": 0.0037039159797132015}, {"id": 272, "seek": 166836, "start": 1675.08, "end": 1679.8, "text": " it starts to kind of look decent, right, now we have a select for projecting, because why would we", "tokens": [50700, 309, 3719, 281, 733, 295, 574, 8681, 11, 558, 11, 586, 321, 362, 257, 3048, 337, 43001, 11, 570, 983, 576, 321, 50936], "temperature": 0.0, "avg_logprob": -0.10552855491638184, "compression_ratio": 1.6652173913043478, "no_speech_prob": 0.0037039159797132015}, {"id": 273, "seek": 166836, "start": 1679.8, "end": 1686.84, "text": " call it project, we have various methods, I'll tell you why we call it select, that's because", "tokens": [50936, 818, 309, 1716, 11, 321, 362, 3683, 7150, 11, 286, 603, 980, 291, 983, 321, 818, 309, 3048, 11, 300, 311, 570, 51288], "temperature": 0.0, "avg_logprob": -0.10552855491638184, "compression_ratio": 1.6652173913043478, "no_speech_prob": 0.0037039159797132015}, {"id": 274, "seek": 166836, "start": 1686.84, "end": 1692.6799999999998, "text": " another place where you do querying is in, you know, SQL, which is also kind of functional,", "tokens": [51288, 1071, 1081, 689, 291, 360, 7083, 1840, 307, 294, 11, 291, 458, 11, 19200, 11, 597, 307, 611, 733, 295, 11745, 11, 51580], "temperature": 0.0, "avg_logprob": -0.10552855491638184, "compression_ratio": 1.6652173913043478, "no_speech_prob": 0.0037039159797132015}, {"id": 275, "seek": 169268, "start": 1692.68, "end": 1699.4, "text": " right, it's also just, there are aspects of SQL where it can mutate stuff and actually get", "tokens": [50364, 558, 11, 309, 311, 611, 445, 11, 456, 366, 7270, 295, 19200, 689, 309, 393, 5839, 473, 1507, 293, 767, 483, 50700], "temperature": 0.0, "avg_logprob": -0.12572157723563057, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.004398139659315348}, {"id": 276, "seek": 169268, "start": 1699.4, "end": 1703.96, "text": " things into the database, but the actual querying is functional too, and so we want to provide", "tokens": [50700, 721, 666, 264, 8149, 11, 457, 264, 3539, 7083, 1840, 307, 11745, 886, 11, 293, 370, 321, 528, 281, 2893, 50928], "temperature": 0.0, "avg_logprob": -0.12572157723563057, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.004398139659315348}, {"id": 277, "seek": 169268, "start": 1703.96, "end": 1716.6000000000001, "text": " syntactic sugar for querying on top of methods like this, where you can say from value in,", "tokens": [50928, 23980, 19892, 5076, 337, 7083, 1840, 322, 1192, 295, 7150, 411, 341, 11, 689, 291, 393, 584, 490, 2158, 294, 11, 51560], "temperature": 0.0, "avg_logprob": -0.12572157723563057, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.004398139659315348}, {"id": 278, "seek": 171660, "start": 1716.6, "end": 1726.6, "text": " I should call them x, I like x, from x in array, where the keyword, where x is greater than five,", "tokens": [50364, 286, 820, 818, 552, 2031, 11, 286, 411, 2031, 11, 490, 2031, 294, 10225, 11, 689, 264, 20428, 11, 689, 2031, 307, 5044, 813, 1732, 11, 50864], "temperature": 0.0, "avg_logprob": -0.13997858449032433, "compression_ratio": 1.6149425287356323, "no_speech_prob": 0.025172706693410873}, {"id": 279, "seek": 171660, "start": 1729.32, "end": 1737.1599999999999, "text": " and where something else, where y, let's call it x again then, because we are now using the", "tokens": [51000, 293, 689, 746, 1646, 11, 689, 288, 11, 718, 311, 818, 309, 2031, 797, 550, 11, 570, 321, 366, 586, 1228, 264, 51392], "temperature": 0.0, "avg_logprob": -0.13997858449032433, "compression_ratio": 1.6149425287356323, "no_speech_prob": 0.025172706693410873}, {"id": 280, "seek": 171660, "start": 1737.1599999999999, "end": 1744.04, "text": " same variable name all the way down, select something, so we now have query syntax, select,", "tokens": [51392, 912, 7006, 1315, 439, 264, 636, 760, 11, 3048, 746, 11, 370, 321, 586, 362, 14581, 28431, 11, 3048, 11, 51736], "temperature": 0.0, "avg_logprob": -0.13997858449032433, "compression_ratio": 1.6149425287356323, "no_speech_prob": 0.025172706693410873}, {"id": 281, "seek": 174404, "start": 1744.92, "end": 1750.6, "text": " you know, maybe just x, and the point here is it looks like SQL, it's a little different,", "tokens": [50408, 291, 458, 11, 1310, 445, 2031, 11, 293, 264, 935, 510, 307, 309, 1542, 411, 19200, 11, 309, 311, 257, 707, 819, 11, 50692], "temperature": 0.0, "avg_logprob": -0.10398136041103265, "compression_ratio": 1.7761194029850746, "no_speech_prob": 0.005046973470598459}, {"id": 282, "seek": 174404, "start": 1750.6, "end": 1755.6399999999999, "text": " because in SQL they start with a select clause, which means we don't like that in programming", "tokens": [50692, 570, 294, 19200, 436, 722, 365, 257, 3048, 25925, 11, 597, 1355, 321, 500, 380, 411, 300, 294, 9410, 50944], "temperature": 0.0, "avg_logprob": -0.10398136041103265, "compression_ratio": 1.7761194029850746, "no_speech_prob": 0.005046973470598459}, {"id": 283, "seek": 174404, "start": 1755.6399999999999, "end": 1761.0, "text": " languages, because they start out by describing the result, and what you want is to start out by", "tokens": [50944, 8650, 11, 570, 436, 722, 484, 538, 16141, 264, 1874, 11, 293, 437, 291, 528, 307, 281, 722, 484, 538, 51212], "temperature": 0.0, "avg_logprob": -0.10398136041103265, "compression_ratio": 1.7761194029850746, "no_speech_prob": 0.005046973470598459}, {"id": 284, "seek": 174404, "start": 1761.6399999999999, "end": 1767.72, "text": " describing the source, like where do things come from, so you can get types going and have your", "tokens": [51244, 16141, 264, 4009, 11, 411, 689, 360, 721, 808, 490, 11, 370, 291, 393, 483, 3467, 516, 293, 362, 428, 51548], "temperature": 0.0, "avg_logprob": -0.10398136041103265, "compression_ratio": 1.7761194029850746, "no_speech_prob": 0.005046973470598459}, {"id": 285, "seek": 174404, "start": 1767.72, "end": 1771.8799999999999, "text": " tooling kind of help you out as you type the code from one end to another, so we want to start with", "tokens": [51548, 46593, 733, 295, 854, 291, 484, 382, 291, 2010, 264, 3089, 490, 472, 917, 281, 1071, 11, 370, 321, 528, 281, 722, 365, 51756], "temperature": 0.0, "avg_logprob": -0.10398136041103265, "compression_ratio": 1.7761194029850746, "no_speech_prob": 0.005046973470598459}, {"id": 286, "seek": 177188, "start": 1771.88, "end": 1778.7600000000002, "text": " the array, figure out what its type is, get completion in our classes, and so on, so that's", "tokens": [50364, 264, 10225, 11, 2573, 484, 437, 1080, 2010, 307, 11, 483, 19372, 294, 527, 5359, 11, 293, 370, 322, 11, 370, 300, 311, 50708], "temperature": 0.0, "avg_logprob": -0.17675062753621815, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.010305626317858696}, {"id": 287, "seek": 177188, "start": 1778.7600000000002, "end": 1783.96, "text": " a programming, proper programming language way of doing it, sorry SQL folks, but you got it wrong,", "tokens": [50708, 257, 9410, 11, 2296, 9410, 2856, 636, 295, 884, 309, 11, 2597, 19200, 4024, 11, 457, 291, 658, 309, 2085, 11, 50968], "temperature": 0.0, "avg_logprob": -0.17675062753621815, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.010305626317858696}, {"id": 288, "seek": 177188, "start": 1783.96, "end": 1791.64, "text": " and you didn't think about ID, you didn't think about IDEs back in 1970, I went out, IDE focused", "tokens": [50968, 293, 291, 994, 380, 519, 466, 7348, 11, 291, 994, 380, 519, 466, 7348, 20442, 646, 294, 14577, 11, 286, 1437, 484, 11, 7348, 36, 5178, 51352], "temperature": 0.0, "avg_logprob": -0.17675062753621815, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.010305626317858696}, {"id": 289, "seek": 177188, "start": 1791.64, "end": 1800.44, "text": " language design, that's the way, that's why we have TypeScript, so great, but now that actually", "tokens": [51352, 2856, 1715, 11, 300, 311, 264, 636, 11, 300, 311, 983, 321, 362, 15576, 14237, 11, 370, 869, 11, 457, 586, 300, 767, 51792], "temperature": 0.0, "avg_logprob": -0.17675062753621815, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.010305626317858696}, {"id": 290, "seek": 180044, "start": 1800.44, "end": 1805.8, "text": " just queries my in-memory data, wouldn't it be cool if I could actually use the same syntax,", "tokens": [50364, 445, 24109, 452, 294, 12, 17886, 827, 1412, 11, 2759, 380, 309, 312, 1627, 498, 286, 727, 767, 764, 264, 912, 28431, 11, 50632], "temperature": 0.0, "avg_logprob": -0.14465814051420792, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.031077207997441292}, {"id": 291, "seek": 180044, "start": 1807.0, "end": 1811.0, "text": " both the syntactic sugar and actually also the method called syntax, to query actual", "tokens": [50692, 1293, 264, 23980, 19892, 5076, 293, 767, 611, 264, 3170, 1219, 28431, 11, 281, 14581, 3539, 50892], "temperature": 0.0, "avg_logprob": -0.14465814051420792, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.031077207997441292}, {"id": 292, "seek": 180044, "start": 1811.0, "end": 1818.44, "text": " SQL databases, and with no difference in syntax, and that's where we get to yet another functional", "tokens": [50892, 19200, 22380, 11, 293, 365, 572, 2649, 294, 28431, 11, 293, 300, 311, 689, 321, 483, 281, 1939, 1071, 11745, 51264], "temperature": 0.0, "avg_logprob": -0.14465814051420792, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.031077207997441292}, {"id": 293, "seek": 180044, "start": 1819.0, "end": 1828.52, "text": " loan, which is code quotations, so in Lisp for instance, it's all based around the fact that", "tokens": [51292, 10529, 11, 597, 307, 3089, 9641, 763, 11, 370, 294, 441, 7631, 337, 5197, 11, 309, 311, 439, 2361, 926, 264, 1186, 300, 51768], "temperature": 0.0, "avg_logprob": -0.14465814051420792, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.031077207997441292}, {"id": 294, "seek": 182852, "start": 1829.48, "end": 1834.28, "text": " code and data are no different, and you can always easily take code and represent it as a data", "tokens": [50412, 3089, 293, 1412, 366, 572, 819, 11, 293, 291, 393, 1009, 3612, 747, 3089, 293, 2906, 309, 382, 257, 1412, 50652], "temperature": 0.0, "avg_logprob": -0.09939972559611003, "compression_ratio": 2.008403361344538, "no_speech_prob": 0.010645502246916294}, {"id": 295, "seek": 182852, "start": 1834.28, "end": 1837.96, "text": " structure, well that's kind of cool because then you can do metaprogramming, you can take that", "tokens": [50652, 3877, 11, 731, 300, 311, 733, 295, 1627, 570, 550, 291, 393, 360, 1131, 569, 340, 1342, 2810, 11, 291, 393, 747, 300, 50836], "temperature": 0.0, "avg_logprob": -0.09939972559611003, "compression_ratio": 2.008403361344538, "no_speech_prob": 0.010645502246916294}, {"id": 296, "seek": 182852, "start": 1837.96, "end": 1841.4, "text": " data structure and do stuff with it, and one of the things you can do with a data structure", "tokens": [50836, 1412, 3877, 293, 360, 1507, 365, 309, 11, 293, 472, 295, 264, 721, 291, 393, 360, 365, 257, 1412, 3877, 51008], "temperature": 0.0, "avg_logprob": -0.09939972559611003, "compression_ratio": 2.008403361344538, "no_speech_prob": 0.010645502246916294}, {"id": 297, "seek": 182852, "start": 1841.4, "end": 1846.6, "text": " representing a query is you can translate it to SQL and send it to a SQL database, and have it run", "tokens": [51008, 13460, 257, 14581, 307, 291, 393, 13799, 309, 281, 19200, 293, 2845, 309, 281, 257, 19200, 8149, 11, 293, 362, 309, 1190, 51268], "temperature": 0.0, "avg_logprob": -0.09939972559611003, "compression_ratio": 2.008403361344538, "no_speech_prob": 0.010645502246916294}, {"id": 298, "seek": 182852, "start": 1846.6, "end": 1851.4, "text": " a SQL, and have the result come back, and then you do a little translating back, and now you have", "tokens": [51268, 257, 19200, 11, 293, 362, 264, 1874, 808, 646, 11, 293, 550, 291, 360, 257, 707, 35030, 646, 11, 293, 586, 291, 362, 51508], "temperature": 0.0, "avg_logprob": -0.09939972559611003, "compression_ratio": 2.008403361344538, "no_speech_prob": 0.010645502246916294}, {"id": 299, "seek": 185140, "start": 1851.4, "end": 1861.96, "text": " an object-oriented, an object relational model, so if we take that, let's just say var here,", "tokens": [50364, 364, 2657, 12, 27414, 11, 364, 2657, 38444, 2316, 11, 370, 498, 321, 747, 300, 11, 718, 311, 445, 584, 1374, 510, 11, 50892], "temperature": 0.0, "avg_logprob": -0.16079040674062875, "compression_ratio": 1.7232704402515724, "no_speech_prob": 0.07048635184764862}, {"id": 300, "seek": 185140, "start": 1861.96, "end": 1868.92, "text": " more type inference, if we take that array and say, is it too queryable or ask queryable,", "tokens": [50892, 544, 2010, 38253, 11, 498, 321, 747, 300, 10225, 293, 584, 11, 307, 309, 886, 14581, 712, 420, 1029, 14581, 712, 11, 51240], "temperature": 0.0, "avg_logprob": -0.16079040674062875, "compression_ratio": 1.7232704402515724, "no_speech_prob": 0.07048635184764862}, {"id": 301, "seek": 185140, "start": 1868.92, "end": 1874.6000000000001, "text": " isn't it ask queryable, there you go, and say ask queryable, I'm sort of cheating a little,", "tokens": [51240, 1943, 380, 309, 1029, 14581, 712, 11, 456, 291, 352, 11, 293, 584, 1029, 14581, 712, 11, 286, 478, 1333, 295, 18309, 257, 707, 11, 51524], "temperature": 0.0, "avg_logprob": -0.16079040674062875, "compression_ratio": 1.7232704402515724, "no_speech_prob": 0.07048635184764862}, {"id": 302, "seek": 187460, "start": 1874.6, "end": 1881.8, "text": " and I'm representing it as now a queryable is like a representative of some other data source", "tokens": [50364, 293, 286, 478, 13460, 309, 382, 586, 257, 14581, 712, 307, 411, 257, 12424, 295, 512, 661, 1412, 4009, 50724], "temperature": 0.0, "avg_logprob": -0.20544518364800346, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.04332074522972107}, {"id": 303, "seek": 187460, "start": 1881.8, "end": 1891.48, "text": " that uses quote quotation in order to do the querying, so when I do that, what changes as well,", "tokens": [50724, 300, 4960, 6513, 47312, 294, 1668, 281, 360, 264, 7083, 1840, 11, 370, 562, 286, 360, 300, 11, 437, 2962, 382, 731, 11, 51208], "temperature": 0.0, "avg_logprob": -0.20544518364800346, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.04332074522972107}, {"id": 304, "seek": 187460, "start": 1891.48, "end": 1899.1599999999999, "text": " not much, you know, I get a queryable back instead, whoop-de-doo, but if we go and look at that query,", "tokens": [51208, 406, 709, 11, 291, 458, 11, 286, 483, 257, 14581, 712, 646, 2602, 11, 567, 404, 12, 1479, 12, 48302, 11, 457, 498, 321, 352, 293, 574, 412, 300, 14581, 11, 51592], "temperature": 0.0, "avg_logprob": -0.20544518364800346, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.04332074522972107}, {"id": 305, "seek": 189916, "start": 1899.3200000000002, "end": 1906.2, "text": " query dot, you can see that it has something inside called an expression, and that expression,", "tokens": [50372, 14581, 5893, 11, 291, 393, 536, 300, 309, 575, 746, 1854, 1219, 364, 6114, 11, 293, 300, 6114, 11, 50716], "temperature": 0.0, "avg_logprob": -0.13145569237795743, "compression_ratio": 1.76, "no_speech_prob": 0.00817125290632248}, {"id": 306, "seek": 189916, "start": 1906.2, "end": 1914.6000000000001, "text": " in fact, represents the data structure of all this query, okay, so we're building up,", "tokens": [50716, 294, 1186, 11, 8855, 264, 1412, 3877, 295, 439, 341, 14581, 11, 1392, 11, 370, 321, 434, 2390, 493, 11, 51136], "temperature": 0.0, "avg_logprob": -0.13145569237795743, "compression_ratio": 1.76, "no_speech_prob": 0.00817125290632248}, {"id": 307, "seek": 189916, "start": 1914.6000000000001, "end": 1920.2, "text": " instead of having the code just code that we can run, instead we build up a data structure", "tokens": [51136, 2602, 295, 1419, 264, 3089, 445, 3089, 300, 321, 393, 1190, 11, 2602, 321, 1322, 493, 257, 1412, 3877, 51416], "temperature": 0.0, "avg_logprob": -0.13145569237795743, "compression_ratio": 1.76, "no_speech_prob": 0.00817125290632248}, {"id": 308, "seek": 189916, "start": 1920.2, "end": 1925.8000000000002, "text": " with exactly the same syntax, and now querying of in-memory data and querying of", "tokens": [51416, 365, 2293, 264, 912, 28431, 11, 293, 586, 7083, 1840, 295, 294, 12, 17886, 827, 1412, 293, 7083, 1840, 295, 51696], "temperature": 0.0, "avg_logprob": -0.13145569237795743, "compression_ratio": 1.76, "no_speech_prob": 0.00817125290632248}, {"id": 309, "seek": 192580, "start": 1926.36, "end": 1933.48, "text": " SQL databases look the same just like you can do in many functional languages that have code", "tokens": [50392, 19200, 22380, 574, 264, 912, 445, 411, 291, 393, 360, 294, 867, 11745, 8650, 300, 362, 3089, 50748], "temperature": 0.0, "avg_logprob": -0.16688717172500936, "compression_ratio": 1.6431718061674008, "no_speech_prob": 0.0009541806066408753}, {"id": 310, "seek": 192580, "start": 1933.48, "end": 1940.44, "text": " quotation, so yet another loan there, and I just cheated a little bit and showed you var as well,", "tokens": [50748, 47312, 11, 370, 1939, 1071, 10529, 456, 11, 293, 286, 445, 28079, 257, 707, 857, 293, 4712, 291, 1374, 382, 731, 11, 51096], "temperature": 0.0, "avg_logprob": -0.16688717172500936, "compression_ratio": 1.6431718061674008, "no_speech_prob": 0.0009541806066408753}, {"id": 311, "seek": 192580, "start": 1941.0, "end": 1947.8799999999999, "text": " which is like the last one more concession to type inference, like very simple one, it's like,", "tokens": [51124, 597, 307, 411, 264, 1036, 472, 544, 416, 29881, 281, 2010, 38253, 11, 411, 588, 2199, 472, 11, 309, 311, 411, 11, 51468], "temperature": 0.0, "avg_logprob": -0.16688717172500936, "compression_ratio": 1.6431718061674008, "no_speech_prob": 0.0009541806066408753}, {"id": 312, "seek": 192580, "start": 1947.8799999999999, "end": 1951.08, "text": " why do I have to say the types all the time, it's really bothersome to have to say int,", "tokens": [51468, 983, 360, 286, 362, 281, 584, 264, 3467, 439, 264, 565, 11, 309, 311, 534, 33980, 423, 281, 362, 281, 584, 560, 11, 51628], "temperature": 0.0, "avg_logprob": -0.16688717172500936, "compression_ratio": 1.6431718061674008, "no_speech_prob": 0.0009541806066408753}, {"id": 313, "seek": 195108, "start": 1951.1599999999999, "end": 1957.1599999999999, "text": " can you let me say a three-letter keyword instead? Obviously, that's not the best example,", "tokens": [50368, 393, 291, 718, 385, 584, 257, 1045, 12, 21248, 20428, 2602, 30, 7580, 11, 300, 311, 406, 264, 1151, 1365, 11, 50668], "temperature": 0.0, "avg_logprob": -0.14148439025878906, "compression_ratio": 1.741444866920152, "no_speech_prob": 0.004066509660333395}, {"id": 314, "seek": 195108, "start": 1957.1599999999999, "end": 1964.04, "text": " this is the best example, right, I don't want to have to write, I want to just say, hey,", "tokens": [50668, 341, 307, 264, 1151, 1365, 11, 558, 11, 286, 500, 380, 528, 281, 362, 281, 2464, 11, 286, 528, 281, 445, 584, 11, 4177, 11, 51012], "temperature": 0.0, "avg_logprob": -0.14148439025878906, "compression_ratio": 1.741444866920152, "no_speech_prob": 0.004066509660333395}, {"id": 315, "seek": 195108, "start": 1964.04, "end": 1969.8, "text": " the thing, you know, give me the thing, if it's clear from context that it's what kind of thing", "tokens": [51012, 264, 551, 11, 291, 458, 11, 976, 385, 264, 551, 11, 498, 309, 311, 1850, 490, 4319, 300, 309, 311, 437, 733, 295, 551, 51300], "temperature": 0.0, "avg_logprob": -0.14148439025878906, "compression_ratio": 1.741444866920152, "no_speech_prob": 0.004066509660333395}, {"id": 316, "seek": 195108, "start": 1969.8, "end": 1976.76, "text": " it roughly is, you know, who cares, so that's functional up until C3, it's a good time to", "tokens": [51300, 309, 9810, 307, 11, 291, 458, 11, 567, 12310, 11, 370, 300, 311, 11745, 493, 1826, 383, 18, 11, 309, 311, 257, 665, 565, 281, 51648], "temperature": 0.0, "avg_logprob": -0.14148439025878906, "compression_ratio": 1.741444866920152, "no_speech_prob": 0.004066509660333395}, {"id": 317, "seek": 195108, "start": 1976.76, "end": 1980.1999999999998, "text": " ask for questions, we're about halfway through the story and about halfway through the hour,", "tokens": [51648, 1029, 337, 1651, 11, 321, 434, 466, 15461, 807, 264, 1657, 293, 466, 15461, 807, 264, 1773, 11, 51820], "temperature": 0.0, "avg_logprob": -0.14148439025878906, "compression_ratio": 1.741444866920152, "no_speech_prob": 0.004066509660333395}, {"id": 318, "seek": 198020, "start": 1980.2, "end": 1985.8, "text": " so it's still on track. Anything, any thoughts coming up here, questions, meta questions,", "tokens": [50364, 370, 309, 311, 920, 322, 2837, 13, 11998, 11, 604, 4598, 1348, 493, 510, 11, 1651, 11, 19616, 1651, 11, 50644], "temperature": 0.0, "avg_logprob": -0.25262339665339545, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0011309016263112426}, {"id": 319, "seek": 198020, "start": 1986.6000000000001, "end": 1988.76, "text": " programming questions, meta programming questions, yes?", "tokens": [50684, 9410, 1651, 11, 19616, 9410, 1651, 11, 2086, 30, 50792], "temperature": 0.0, "avg_logprob": -0.25262339665339545, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0011309016263112426}, {"id": 320, "seek": 198020, "start": 1995.0, "end": 1996.04, "text": " What made me decide?", "tokens": [51104, 708, 1027, 385, 4536, 30, 51156], "temperature": 0.0, "avg_logprob": -0.25262339665339545, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0011309016263112426}, {"id": 321, "seek": 198020, "start": 1998.44, "end": 2008.52, "text": " Anders Heilsberg made me decide. Okay, short version of the story, I was a professor,", "tokens": [51276, 33988, 634, 4174, 6873, 1027, 385, 4536, 13, 1033, 11, 2099, 3037, 295, 264, 1657, 11, 286, 390, 257, 8304, 11, 51780], "temperature": 0.0, "avg_logprob": -0.25262339665339545, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0011309016263112426}, {"id": 322, "seek": 200852, "start": 2009.08, "end": 2015.56, "text": " I wasn't liking it too much, I was collaborating with the Java team at Sun Microsystems then,", "tokens": [50392, 286, 2067, 380, 16933, 309, 886, 709, 11, 286, 390, 30188, 365, 264, 10745, 1469, 412, 6163, 5818, 2635, 9321, 82, 550, 11, 50716], "temperature": 0.0, "avg_logprob": -0.09706450000251692, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.014594482257962227}, {"id": 323, "seek": 200852, "start": 2015.56, "end": 2023.24, "text": " had a great time doing real world, you know, real world language design for real customers,", "tokens": [50716, 632, 257, 869, 565, 884, 957, 1002, 11, 291, 458, 11, 957, 1002, 2856, 1715, 337, 957, 4581, 11, 51100], "temperature": 0.0, "avg_logprob": -0.09706450000251692, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.014594482257962227}, {"id": 324, "seek": 200852, "start": 2024.68, "end": 2028.76, "text": " they got to do it all day, I got to do it like whenever I could get away from teaching and", "tokens": [51172, 436, 658, 281, 360, 309, 439, 786, 11, 286, 658, 281, 360, 309, 411, 5699, 286, 727, 483, 1314, 490, 4571, 293, 51376], "temperature": 0.0, "avg_logprob": -0.09706450000251692, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.014594482257962227}, {"id": 325, "seek": 200852, "start": 2028.76, "end": 2034.92, "text": " stuff and I just like, well, I have great time when I'm working with them and they make twice as", "tokens": [51376, 1507, 293, 286, 445, 411, 11, 731, 11, 286, 362, 869, 565, 562, 286, 478, 1364, 365, 552, 293, 436, 652, 6091, 382, 51684], "temperature": 0.0, "avg_logprob": -0.09706450000251692, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.014594482257962227}, {"id": 326, "seek": 203492, "start": 2034.92, "end": 2040.28, "text": " much money as me at least, I think, just like maybe I'm not in the right career here and as I", "tokens": [50364, 709, 1460, 382, 385, 412, 1935, 11, 286, 519, 11, 445, 411, 1310, 286, 478, 406, 294, 264, 558, 3988, 510, 293, 382, 286, 50632], "temperature": 0.0, "avg_logprob": -0.138175066234996, "compression_ratio": 1.7582938388625593, "no_speech_prob": 0.00969063863158226}, {"id": 327, "seek": 203492, "start": 2040.28, "end": 2046.52, "text": " was thinking that, there was a conference in Ohos, Anders was there talking about how they", "tokens": [50632, 390, 1953, 300, 11, 456, 390, 257, 7586, 294, 876, 329, 11, 33988, 390, 456, 1417, 466, 577, 436, 50944], "temperature": 0.0, "avg_logprob": -0.138175066234996, "compression_ratio": 1.7582938388625593, "no_speech_prob": 0.00969063863158226}, {"id": 328, "seek": 203492, "start": 2046.52, "end": 2049.8, "text": " were going to do generics in C sharp, I was there talking about how we were going to do", "tokens": [50944, 645, 516, 281, 360, 1337, 1167, 294, 383, 8199, 11, 286, 390, 456, 1417, 466, 577, 321, 645, 516, 281, 360, 51108], "temperature": 0.0, "avg_logprob": -0.138175066234996, "compression_ratio": 1.7582938388625593, "no_speech_prob": 0.00969063863158226}, {"id": 329, "seek": 203492, "start": 2049.8, "end": 2060.44, "text": " generics in Java, you know, the rest is history, he had money, I didn't, so he hired, he hired me,", "tokens": [51108, 1337, 1167, 294, 10745, 11, 291, 458, 11, 264, 1472, 307, 2503, 11, 415, 632, 1460, 11, 286, 994, 380, 11, 370, 415, 13144, 11, 415, 13144, 385, 11, 51640], "temperature": 0.0, "avg_logprob": -0.138175066234996, "compression_ratio": 1.7582938388625593, "no_speech_prob": 0.00969063863158226}, {"id": 330, "seek": 206044, "start": 2060.44, "end": 2067.16, "text": " not the other way around. Actually also, I liked how he talked about language design,", "tokens": [50364, 406, 264, 661, 636, 926, 13, 5135, 611, 11, 286, 4501, 577, 415, 2825, 466, 2856, 1715, 11, 50700], "temperature": 0.0, "avg_logprob": -0.16042193344661168, "compression_ratio": 1.7510204081632652, "no_speech_prob": 0.004818434827029705}, {"id": 331, "seek": 206044, "start": 2067.16, "end": 2071.96, "text": " when I was involved in Java language design, there was always a lot of stop energy,", "tokens": [50700, 562, 286, 390, 3288, 294, 10745, 2856, 1715, 11, 456, 390, 1009, 257, 688, 295, 1590, 2281, 11, 50940], "temperature": 0.0, "avg_logprob": -0.16042193344661168, "compression_ratio": 1.7510204081632652, "no_speech_prob": 0.004818434827029705}, {"id": 332, "seek": 206044, "start": 2071.96, "end": 2076.44, "text": " it's like we can't do this because, and we can't do this because, and he had a bunch of can-do", "tokens": [50940, 309, 311, 411, 321, 393, 380, 360, 341, 570, 11, 293, 321, 393, 380, 360, 341, 570, 11, 293, 415, 632, 257, 3840, 295, 393, 12, 2595, 51164], "temperature": 0.0, "avg_logprob": -0.16042193344661168, "compression_ratio": 1.7510204081632652, "no_speech_prob": 0.004818434827029705}, {"id": 333, "seek": 206044, "start": 2076.44, "end": 2082.6, "text": " attitude, you know, a small example, the generic method is gone from the screen here,", "tokens": [51164, 10157, 11, 291, 458, 11, 257, 1359, 1365, 11, 264, 19577, 3170, 307, 2780, 490, 264, 2568, 510, 11, 51472], "temperature": 0.0, "avg_logprob": -0.16042193344661168, "compression_ratio": 1.7510204081632652, "no_speech_prob": 0.004818434827029705}, {"id": 334, "seek": 206044, "start": 2083.16, "end": 2087.48, "text": " but in Java they said, oh, we can't put the type parameter for generic methods", "tokens": [51500, 457, 294, 10745, 436, 848, 11, 1954, 11, 321, 393, 380, 829, 264, 2010, 13075, 337, 19577, 7150, 51716], "temperature": 0.0, "avg_logprob": -0.16042193344661168, "compression_ratio": 1.7510204081632652, "no_speech_prob": 0.004818434827029705}, {"id": 335, "seek": 208748, "start": 2087.56, "end": 2091.96, "text": " after the parameters, because that might be a syntactic ambiguity in rare cases.", "tokens": [50368, 934, 264, 9834, 11, 570, 300, 1062, 312, 257, 23980, 19892, 46519, 294, 5892, 3331, 13, 50588], "temperature": 0.0, "avg_logprob": -0.1278224476313187, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.002748005324974656}, {"id": 336, "seek": 208748, "start": 2092.68, "end": 2098.76, "text": " And in C sharp, when he showed examples, that would also be a syntactic ambiguity in rare", "tokens": [50624, 400, 294, 383, 8199, 11, 562, 415, 4712, 5110, 11, 300, 576, 611, 312, 257, 23980, 19892, 46519, 294, 5892, 50928], "temperature": 0.0, "avg_logprob": -0.1278224476313187, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.002748005324974656}, {"id": 337, "seek": 208748, "start": 2098.76, "end": 2103.56, "text": " cases in C sharp, because syntaxes are a little bit alike, but they just put it there anyway,", "tokens": [50928, 3331, 294, 383, 8199, 11, 570, 28431, 279, 366, 257, 707, 857, 20025, 11, 457, 436, 445, 829, 309, 456, 4033, 11, 51168], "temperature": 0.0, "avg_logprob": -0.1278224476313187, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.002748005324974656}, {"id": 338, "seek": 208748, "start": 2103.56, "end": 2109.16, "text": " and I asked him after, how do you do that? He's like, we just do some tricks in the", "tokens": [51168, 293, 286, 2351, 796, 934, 11, 577, 360, 291, 360, 300, 30, 634, 311, 411, 11, 321, 445, 360, 512, 11733, 294, 264, 51448], "temperature": 0.0, "avg_logprob": -0.1278224476313187, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.002748005324974656}, {"id": 339, "seek": 208748, "start": 2109.16, "end": 2115.16, "text": " compiler, it's not like LR1 or whatever, it's fine, we figure it out, and who cares about", "tokens": [51448, 31958, 11, 309, 311, 406, 411, 441, 49, 16, 420, 2035, 11, 309, 311, 2489, 11, 321, 2573, 309, 484, 11, 293, 567, 12310, 466, 51748], "temperature": 0.0, "avg_logprob": -0.1278224476313187, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.002748005324974656}, {"id": 340, "seek": 211516, "start": 2115.16, "end": 2120.44, "text": " those rare cases, you know, we come up with a rule that works 97% at the time, if you", "tokens": [50364, 729, 5892, 3331, 11, 291, 458, 11, 321, 808, 493, 365, 257, 4978, 300, 1985, 23399, 4, 412, 264, 565, 11, 498, 291, 50628], "temperature": 0.0, "avg_logprob": -0.14853597091416182, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.0004876626480836421}, {"id": 341, "seek": 211516, "start": 2120.44, "end": 2125.24, "text": " can run into it, and does the right thing mostly, and we're good. It was always like,", "tokens": [50628, 393, 1190, 666, 309, 11, 293, 775, 264, 558, 551, 5240, 11, 293, 321, 434, 665, 13, 467, 390, 1009, 411, 11, 50868], "temperature": 0.0, "avg_logprob": -0.14853597091416182, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.0004876626480836421}, {"id": 342, "seek": 211516, "start": 2125.24, "end": 2128.68, "text": " we can probably solve that problem attitude, and that spoke to me in a way, and that's", "tokens": [50868, 321, 393, 1391, 5039, 300, 1154, 10157, 11, 293, 300, 7179, 281, 385, 294, 257, 636, 11, 293, 300, 311, 51040], "temperature": 0.0, "avg_logprob": -0.14853597091416182, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.0004876626480836421}, {"id": 343, "seek": 211516, "start": 2129.72, "end": 2133.3199999999997, "text": " still the case, and that's still why I love being there, so, oh.", "tokens": [51092, 920, 264, 1389, 11, 293, 300, 311, 920, 983, 286, 959, 885, 456, 11, 370, 11, 1954, 13, 51272], "temperature": 0.0, "avg_logprob": -0.14853597091416182, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.0004876626480836421}, {"id": 344, "seek": 211516, "start": 2135.7999999999997, "end": 2138.7599999999998, "text": " Thanks for that question, now I'm going to have a tear in my eye for the rest of the day.", "tokens": [51396, 2561, 337, 300, 1168, 11, 586, 286, 478, 516, 281, 362, 257, 12556, 294, 452, 3313, 337, 264, 1472, 295, 264, 786, 13, 51544], "temperature": 0.0, "avg_logprob": -0.14853597091416182, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.0004876626480836421}, {"id": 345, "seek": 213876, "start": 2139.7200000000003, "end": 2145.0, "text": " Anything else? I want to hear about my childhood. Yeah.", "tokens": [50412, 11998, 1646, 30, 286, 528, 281, 1568, 466, 452, 9278, 13, 865, 13, 50676], "temperature": 0.0, "avg_logprob": -0.23973360428443322, "compression_ratio": 1.3566433566433567, "no_speech_prob": 0.004129535518586636}, {"id": 346, "seek": 213876, "start": 2152.6800000000003, "end": 2160.2000000000003, "text": " Why, oh, great question, so why are the delegate types that have the same shape,", "tokens": [51060, 1545, 11, 1954, 11, 869, 1168, 11, 370, 983, 366, 264, 40999, 3467, 300, 362, 264, 912, 3909, 11, 51436], "temperature": 0.0, "avg_logprob": -0.23973360428443322, "compression_ratio": 1.3566433566433567, "no_speech_prob": 0.004129535518586636}, {"id": 347, "seek": 213876, "start": 2160.2000000000003, "end": 2162.6800000000003, "text": " like the same signature, why aren't they interchangeable?", "tokens": [51436, 411, 264, 912, 13397, 11, 983, 3212, 380, 436, 30358, 712, 30, 51560], "temperature": 0.0, "avg_logprob": -0.23973360428443322, "compression_ratio": 1.3566433566433567, "no_speech_prob": 0.004129535518586636}, {"id": 348, "seek": 216268, "start": 2163.64, "end": 2169.96, "text": " So, they used to be predicate of T, and then it turned into, we started using", "tokens": [50412, 407, 11, 436, 1143, 281, 312, 3852, 8700, 295, 314, 11, 293, 550, 309, 3574, 666, 11, 321, 1409, 1228, 50728], "temperature": 0.0, "avg_logprob": -0.17343141575052282, "compression_ratio": 1.6619718309859155, "no_speech_prob": 0.03552261367440224}, {"id": 349, "seek": 216268, "start": 2169.96, "end": 2177.24, "text": " funk of T, and they're not actually interchangeable, you can pass the same lambdas to them,", "tokens": [50728, 26476, 295, 314, 11, 293, 436, 434, 406, 767, 30358, 712, 11, 291, 393, 1320, 264, 912, 10097, 27476, 281, 552, 11, 51092], "temperature": 0.0, "avg_logprob": -0.17343141575052282, "compression_ratio": 1.6619718309859155, "no_speech_prob": 0.03552261367440224}, {"id": 350, "seek": 216268, "start": 2178.3599999999997, "end": 2184.68, "text": " but you can't assign one to the other, they're not structurally equivalent, so, and that comes", "tokens": [51148, 457, 291, 393, 380, 6269, 472, 281, 264, 661, 11, 436, 434, 406, 6594, 6512, 10344, 11, 370, 11, 293, 300, 1487, 51464], "temperature": 0.0, "avg_logprob": -0.17343141575052282, "compression_ratio": 1.6619718309859155, "no_speech_prob": 0.03552261367440224}, {"id": 351, "seek": 216268, "start": 2184.68, "end": 2191.8799999999997, "text": " back to, you know, I kind of hinted that I'm not a super fan of delegates, and one of the", "tokens": [51464, 646, 281, 11, 291, 458, 11, 286, 733, 295, 12075, 292, 300, 286, 478, 406, 257, 1687, 3429, 295, 45756, 11, 293, 472, 295, 264, 51824], "temperature": 0.0, "avg_logprob": -0.17343141575052282, "compression_ratio": 1.6619718309859155, "no_speech_prob": 0.03552261367440224}, {"id": 352, "seek": 219188, "start": 2191.88, "end": 2195.8, "text": " problems with them is that they're a nominal type, they have a declaration, and just like classes", "tokens": [50364, 2740, 365, 552, 307, 300, 436, 434, 257, 41641, 2010, 11, 436, 362, 257, 27606, 11, 293, 445, 411, 5359, 50560], "temperature": 0.0, "avg_logprob": -0.08474251747131348, "compression_ratio": 1.8396226415094339, "no_speech_prob": 0.005453841760754585}, {"id": 353, "seek": 219188, "start": 2195.8, "end": 2201.4, "text": " that look the same, you can't take an object of a class and duck type it to another class that", "tokens": [50560, 300, 574, 264, 912, 11, 291, 393, 380, 747, 364, 2657, 295, 257, 1508, 293, 12482, 2010, 309, 281, 1071, 1508, 300, 50840], "temperature": 0.0, "avg_logprob": -0.08474251747131348, "compression_ratio": 1.8396226415094339, "no_speech_prob": 0.005453841760754585}, {"id": 354, "seek": 219188, "start": 2201.4, "end": 2207.56, "text": " happens to be the same, it's all based on the declarations, it's very, very nominal, as we say,", "tokens": [50840, 2314, 281, 312, 264, 912, 11, 309, 311, 439, 2361, 322, 264, 16694, 763, 11, 309, 311, 588, 11, 588, 41641, 11, 382, 321, 584, 11, 51148], "temperature": 0.0, "avg_logprob": -0.08474251747131348, "compression_ratio": 1.8396226415094339, "no_speech_prob": 0.005453841760754585}, {"id": 355, "seek": 219188, "start": 2207.56, "end": 2214.28, "text": " and the same is true for the delegate types, they are actually classes, and they are nominally tight.", "tokens": [51148, 293, 264, 912, 307, 2074, 337, 264, 40999, 3467, 11, 436, 366, 767, 5359, 11, 293, 436, 366, 5369, 19801, 4524, 13, 51484], "temperature": 0.0, "avg_logprob": -0.08474251747131348, "compression_ratio": 1.8396226415094339, "no_speech_prob": 0.005453841760754585}, {"id": 356, "seek": 221428, "start": 2214.92, "end": 2225.4, "text": " Now, in Visual Basic, for instance, vb.net, they paper over this by inserting implicit,", "tokens": [50396, 823, 11, 294, 23187, 31598, 11, 337, 5197, 11, 371, 65, 13, 7129, 11, 436, 3035, 670, 341, 538, 46567, 26947, 11, 50920], "temperature": 0.0, "avg_logprob": -0.10695051110309103, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.03350670263171196}, {"id": 357, "seek": 221428, "start": 2225.4, "end": 2232.2000000000003, "text": " like, wrapper functions to translate from one to another, so there you get the great experience of", "tokens": [50920, 411, 11, 46906, 6828, 281, 13799, 490, 472, 281, 1071, 11, 370, 456, 291, 483, 264, 869, 1752, 295, 51260], "temperature": 0.0, "avg_logprob": -0.10695051110309103, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.03350670263171196}, {"id": 358, "seek": 221428, "start": 2232.2000000000003, "end": 2236.6800000000003, "text": " it all just assigns to each other, it looks extremely structural, but the problem is it", "tokens": [51260, 309, 439, 445, 6269, 82, 281, 1184, 661, 11, 309, 1542, 4664, 15067, 11, 457, 264, 1154, 307, 309, 51484], "temperature": 0.0, "avg_logprob": -0.10695051110309103, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.03350670263171196}, {"id": 359, "seek": 221428, "start": 2236.6800000000003, "end": 2241.6400000000003, "text": " isn't, like it comes with a cost, like you're wrapping more and more, if you keep passing", "tokens": [51484, 1943, 380, 11, 411, 309, 1487, 365, 257, 2063, 11, 411, 291, 434, 21993, 544, 293, 544, 11, 498, 291, 1066, 8437, 51732], "temperature": 0.0, "avg_logprob": -0.10695051110309103, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.03350670263171196}, {"id": 360, "seek": 224164, "start": 2241.64, "end": 2246.2799999999997, "text": " back and forth, you get like layers and layers of, oh, here's a predicate of a fung of a predicate of,", "tokens": [50364, 646, 293, 5220, 11, 291, 483, 411, 7914, 293, 7914, 295, 11, 1954, 11, 510, 311, 257, 3852, 8700, 295, 257, 1019, 70, 295, 257, 3852, 8700, 295, 11, 50596], "temperature": 0.0, "avg_logprob": -0.12653967642015027, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.04329604282975197}, {"id": 361, "seek": 224164, "start": 2246.2799999999997, "end": 2253.8799999999997, "text": " you know, all the way, so we don't let you go down that rabbit hole in C sharp,", "tokens": [50596, 291, 458, 11, 439, 264, 636, 11, 370, 321, 500, 380, 718, 291, 352, 760, 300, 19509, 5458, 294, 383, 8199, 11, 50976], "temperature": 0.0, "avg_logprob": -0.12653967642015027, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.04329604282975197}, {"id": 362, "seek": 224164, "start": 2254.68, "end": 2259.0, "text": " we think about it sometimes, and we also think about, well, could we just do better", "tokens": [51016, 321, 519, 466, 309, 2171, 11, 293, 321, 611, 519, 466, 11, 731, 11, 727, 321, 445, 360, 1101, 51232], "temperature": 0.0, "avg_logprob": -0.12653967642015027, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.04329604282975197}, {"id": 363, "seek": 224164, "start": 2259.0, "end": 2265.72, "text": " function types, but then you have a library that is gigantic, and that is using delegates", "tokens": [51232, 2445, 3467, 11, 457, 550, 291, 362, 257, 6405, 300, 307, 26800, 11, 293, 300, 307, 1228, 45756, 51568], "temperature": 0.0, "avg_logprob": -0.12653967642015027, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.04329604282975197}, {"id": 364, "seek": 224164, "start": 2265.72, "end": 2270.8399999999997, "text": " everywhere, and you look at that and you go, hmm, I wonder how we could do this and not mess up", "tokens": [51568, 5315, 11, 293, 291, 574, 412, 300, 293, 291, 352, 11, 16478, 11, 286, 2441, 577, 321, 727, 360, 341, 293, 406, 2082, 493, 51824], "temperature": 0.0, "avg_logprob": -0.12653967642015027, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.04329604282975197}, {"id": 365, "seek": 227084, "start": 2270.84, "end": 2277.6400000000003, "text": " a million customers, you know, or, you know, we choose not to roll it out in our big library", "tokens": [50364, 257, 2459, 4581, 11, 291, 458, 11, 420, 11, 291, 458, 11, 321, 2826, 406, 281, 3373, 309, 484, 294, 527, 955, 6405, 50704], "temperature": 0.0, "avg_logprob": -0.12112239799877204, "compression_ratio": 1.799043062200957, "no_speech_prob": 0.006184309720993042}, {"id": 366, "seek": 227084, "start": 2277.6400000000003, "end": 2282.76, "text": " and just make it, you know, an option for new code, and then doesn't really, there's no bang there,", "tokens": [50704, 293, 445, 652, 309, 11, 291, 458, 11, 364, 3614, 337, 777, 3089, 11, 293, 550, 1177, 380, 534, 11, 456, 311, 572, 8550, 456, 11, 50960], "temperature": 0.0, "avg_logprob": -0.12112239799877204, "compression_ratio": 1.799043062200957, "no_speech_prob": 0.006184309720993042}, {"id": 367, "seek": 227084, "start": 2282.76, "end": 2287.4, "text": " right, you know, you don't get enough value, so that's a tough problem, that's, you know,", "tokens": [50960, 558, 11, 291, 458, 11, 291, 500, 380, 483, 1547, 2158, 11, 370, 300, 311, 257, 4930, 1154, 11, 300, 311, 11, 291, 458, 11, 51192], "temperature": 0.0, "avg_logprob": -0.12112239799877204, "compression_ratio": 1.799043062200957, "no_speech_prob": 0.006184309720993042}, {"id": 368, "seek": 227084, "start": 2287.4, "end": 2293.1600000000003, "text": " the problem of legacy code and the problem of compatibility shoots down a lot of good feature", "tokens": [51192, 264, 1154, 295, 11711, 3089, 293, 264, 1154, 295, 34237, 20704, 760, 257, 688, 295, 665, 4111, 51480], "temperature": 0.0, "avg_logprob": -0.12112239799877204, "compression_ratio": 1.799043062200957, "no_speech_prob": 0.006184309720993042}, {"id": 369, "seek": 229316, "start": 2293.16, "end": 2301.08, "text": " ideas, and we haven't found a way around this one. It's one of several, interestingly,", "tokens": [50364, 3487, 11, 293, 321, 2378, 380, 1352, 257, 636, 926, 341, 472, 13, 467, 311, 472, 295, 2940, 11, 25873, 11, 50760], "temperature": 0.0, "avg_logprob": -0.1213723151914535, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.43208596110343933}, {"id": 370, "seek": 229316, "start": 2302.44, "end": 2306.6, "text": " functionally inspired topics that we'll be discussing this summer, we're having sort of a", "tokens": [50828, 2445, 379, 7547, 8378, 300, 321, 603, 312, 10850, 341, 4266, 11, 321, 434, 1419, 1333, 295, 257, 51036], "temperature": 0.0, "avg_logprob": -0.1213723151914535, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.43208596110343933}, {"id": 371, "seek": 229316, "start": 2306.6, "end": 2310.6, "text": " series of summer camps on the team where we'll discuss topics that are normally out of bounds,", "tokens": [51036, 2638, 295, 4266, 16573, 322, 264, 1469, 689, 321, 603, 2248, 8378, 300, 366, 5646, 484, 295, 29905, 11, 51236], "temperature": 0.0, "avg_logprob": -0.1213723151914535, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.43208596110343933}, {"id": 372, "seek": 229316, "start": 2310.6, "end": 2316.6, "text": " because we don't know how to deal with them, and this is one of them, so maybe one day we'll figure", "tokens": [51236, 570, 321, 500, 380, 458, 577, 281, 2028, 365, 552, 11, 293, 341, 307, 472, 295, 552, 11, 370, 1310, 472, 786, 321, 603, 2573, 51536], "temperature": 0.0, "avg_logprob": -0.1213723151914535, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.43208596110343933}, {"id": 373, "seek": 231660, "start": 2316.68, "end": 2320.44, "text": " out a way to make that good. Yeah?", "tokens": [50368, 484, 257, 636, 281, 652, 300, 665, 13, 865, 30, 50556], "temperature": 0.0, "avg_logprob": -0.26934101846483016, "compression_ratio": 1.2365591397849462, "no_speech_prob": 0.024199919775128365}, {"id": 374, "seek": 231660, "start": 2334.44, "end": 2343.56, "text": " Yeah, so the question is, is the, is the sequel style syntax still in broad use,", "tokens": [51256, 865, 11, 370, 264, 1168, 307, 11, 307, 264, 11, 307, 264, 20622, 3758, 28431, 920, 294, 4152, 764, 11, 51712], "temperature": 0.0, "avg_logprob": -0.26934101846483016, "compression_ratio": 1.2365591397849462, "no_speech_prob": 0.024199919775128365}, {"id": 375, "seek": 234356, "start": 2344.04, "end": 2349.64, "text": " and it's true, it does feel very different from the rest of the language, it's, yeah, it's just,", "tokens": [50388, 293, 309, 311, 2074, 11, 309, 775, 841, 588, 819, 490, 264, 1472, 295, 264, 2856, 11, 309, 311, 11, 1338, 11, 309, 311, 445, 11, 50668], "temperature": 0.0, "avg_logprob": -0.15051665960573682, "compression_ratio": 1.6309012875536482, "no_speech_prob": 0.008972910232841969}, {"id": 376, "seek": 234356, "start": 2349.64, "end": 2359.7999999999997, "text": " it's like you enter another world. Yeah, we have to maintain compatibility with it, but also,", "tokens": [50668, 309, 311, 411, 291, 3242, 1071, 1002, 13, 865, 11, 321, 362, 281, 6909, 34237, 365, 309, 11, 457, 611, 11, 51176], "temperature": 0.0, "avg_logprob": -0.15051665960573682, "compression_ratio": 1.6309012875536482, "no_speech_prob": 0.008972910232841969}, {"id": 377, "seek": 234356, "start": 2359.7999999999997, "end": 2365.0, "text": " furthermore, I think it is still, it is still used a bit, like a bunch, not more than a bit,", "tokens": [51176, 3052, 3138, 11, 286, 519, 309, 307, 920, 11, 309, 307, 920, 1143, 257, 857, 11, 411, 257, 3840, 11, 406, 544, 813, 257, 857, 11, 51436], "temperature": 0.0, "avg_logprob": -0.15051665960573682, "compression_ratio": 1.6309012875536482, "no_speech_prob": 0.008972910232841969}, {"id": 378, "seek": 234356, "start": 2365.0, "end": 2368.92, "text": " actually, a bunch of people actually do prefer the method called syntax, even when they're using", "tokens": [51436, 767, 11, 257, 3840, 295, 561, 767, 360, 4382, 264, 3170, 1219, 28431, 11, 754, 562, 436, 434, 1228, 51632], "temperature": 0.0, "avg_logprob": -0.15051665960573682, "compression_ratio": 1.6309012875536482, "no_speech_prob": 0.008972910232841969}, {"id": 379, "seek": 236892, "start": 2368.92, "end": 2380.52, "text": " the query methods. I find that if I have to do more than one from, from x in blah, from y in", "tokens": [50364, 264, 14581, 7150, 13, 286, 915, 300, 498, 286, 362, 281, 360, 544, 813, 472, 490, 11, 490, 2031, 294, 12288, 11, 490, 288, 294, 50944], "temperature": 0.0, "avg_logprob": -0.10535869727263579, "compression_ratio": 1.668639053254438, "no_speech_prob": 0.05098844692111015}, {"id": 380, "seek": 236892, "start": 2381.48, "end": 2387.64, "text": " x dot, or something like that, then writing the corresponding query with method calls becomes,", "tokens": [50992, 2031, 5893, 11, 420, 746, 411, 300, 11, 550, 3579, 264, 11760, 14581, 365, 3170, 5498, 3643, 11, 51300], "temperature": 0.0, "avg_logprob": -0.10535869727263579, "compression_ratio": 1.668639053254438, "no_speech_prob": 0.05098844692111015}, {"id": 381, "seek": 236892, "start": 2390.44, "end": 2395.96, "text": " becomes mind-blowingly hard, and you have to use select many, and select many is mind-blowing,", "tokens": [51440, 3643, 1575, 12, 43788, 356, 1152, 11, 293, 291, 362, 281, 764, 3048, 867, 11, 293, 3048, 867, 307, 1575, 12, 43788, 11, 51716], "temperature": 0.0, "avg_logprob": -0.10535869727263579, "compression_ratio": 1.668639053254438, "no_speech_prob": 0.05098844692111015}, {"id": 382, "seek": 239596, "start": 2395.96, "end": 2401.56, "text": " and so I always, if I have to, if I have to, like, do more than one from, if I have to, like,", "tokens": [50364, 293, 370, 286, 1009, 11, 498, 286, 362, 281, 11, 498, 286, 362, 281, 11, 411, 11, 360, 544, 813, 472, 490, 11, 498, 286, 362, 281, 11, 411, 11, 50644], "temperature": 0.0, "avg_logprob": -0.09410183131694794, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.0023221648298203945}, {"id": 383, "seek": 239596, "start": 2401.56, "end": 2405.88, "text": " dig into data with froms, I switch to query syntax and let the compiler figure it out for me,", "tokens": [50644, 2528, 666, 1412, 365, 490, 82, 11, 286, 3679, 281, 14581, 28431, 293, 718, 264, 31958, 2573, 309, 484, 337, 385, 11, 50860], "temperature": 0.0, "avg_logprob": -0.09410183131694794, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.0023221648298203945}, {"id": 384, "seek": 239596, "start": 2405.88, "end": 2411.16, "text": " because I, my brain can't handle it. It's all, actually, it's all down to monads,", "tokens": [50860, 570, 286, 11, 452, 3567, 393, 380, 4813, 309, 13, 467, 311, 439, 11, 767, 11, 309, 311, 439, 760, 281, 1108, 5834, 11, 51124], "temperature": 0.0, "avg_logprob": -0.09410183131694794, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.0023221648298203945}, {"id": 385, "seek": 239596, "start": 2411.16, "end": 2416.76, "text": " so how many people here know about monads? Yes, that's more than I would have expected,", "tokens": [51124, 370, 577, 867, 561, 510, 458, 466, 1108, 5834, 30, 1079, 11, 300, 311, 544, 813, 286, 576, 362, 5176, 11, 51404], "temperature": 0.0, "avg_logprob": -0.09410183131694794, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.0023221648298203945}, {"id": 386, "seek": 239596, "start": 2416.76, "end": 2421.64, "text": " actually. It's this concept that is super central to a bunch of functional, a typed functional", "tokens": [51404, 767, 13, 467, 311, 341, 3410, 300, 307, 1687, 5777, 281, 257, 3840, 295, 11745, 11, 257, 33941, 11745, 51648], "temperature": 0.0, "avg_logprob": -0.09410183131694794, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.0023221648298203945}, {"id": 387, "seek": 242164, "start": 2421.64, "end": 2426.12, "text": " programming, and nobody understands it. A bunch of people claim that they do, but they're actually", "tokens": [50364, 9410, 11, 293, 5079, 15146, 309, 13, 316, 3840, 295, 561, 3932, 300, 436, 360, 11, 457, 436, 434, 767, 50588], "temperature": 0.0, "avg_logprob": -0.14006502825514713, "compression_ratio": 1.6909722222222223, "no_speech_prob": 0.019694676622748375}, {"id": 388, "seek": 242164, "start": 2426.12, "end": 2433.72, "text": " just, you know, it's a collective kind of like, it's a hoax. They don't, not for long anyway. I've", "tokens": [50588, 445, 11, 291, 458, 11, 309, 311, 257, 12590, 733, 295, 411, 11, 309, 311, 257, 1106, 2797, 13, 814, 500, 380, 11, 406, 337, 938, 4033, 13, 286, 600, 50968], "temperature": 0.0, "avg_logprob": -0.14006502825514713, "compression_ratio": 1.6909722222222223, "no_speech_prob": 0.019694676622748375}, {"id": 389, "seek": 242164, "start": 2433.72, "end": 2437.8799999999997, "text": " understood it many times, and then, you know, the next day I was like, what was it again? Maybe I", "tokens": [50968, 7320, 309, 867, 1413, 11, 293, 550, 11, 291, 458, 11, 264, 958, 786, 286, 390, 411, 11, 437, 390, 309, 797, 30, 2704, 286, 51176], "temperature": 0.0, "avg_logprob": -0.14006502825514713, "compression_ratio": 1.6909722222222223, "no_speech_prob": 0.019694676622748375}, {"id": 390, "seek": 242164, "start": 2437.8799999999997, "end": 2443.96, "text": " was just dreaming it. It made, it totally makes sense at the time, but query, query expressions,", "tokens": [51176, 390, 445, 21475, 309, 13, 467, 1027, 11, 309, 3879, 1669, 2020, 412, 264, 565, 11, 457, 14581, 11, 14581, 15277, 11, 51480], "temperature": 0.0, "avg_logprob": -0.14006502825514713, "compression_ratio": 1.6909722222222223, "no_speech_prob": 0.019694676622748375}, {"id": 391, "seek": 242164, "start": 2444.7599999999998, "end": 2451.4, "text": " they are a monad. They're a language support for a monad, and when you use more than one from,", "tokens": [51520, 436, 366, 257, 1108, 345, 13, 814, 434, 257, 2856, 1406, 337, 257, 1108, 345, 11, 293, 562, 291, 764, 544, 813, 472, 490, 11, 51852], "temperature": 0.0, "avg_logprob": -0.14006502825514713, "compression_ratio": 1.6909722222222223, "no_speech_prob": 0.019694676622748375}, {"id": 392, "seek": 245164, "start": 2451.96, "end": 2457.3199999999997, "text": " that is where you get into monadic territory, where the select many is the thing that makes them,", "tokens": [50380, 300, 307, 689, 291, 483, 666, 1108, 43341, 11360, 11, 689, 264, 3048, 867, 307, 264, 551, 300, 1669, 552, 11, 50648], "temperature": 0.0, "avg_logprob": -0.11003871154785157, "compression_ratio": 1.7314487632508835, "no_speech_prob": 0.0012057271087542176}, {"id": 393, "seek": 245164, "start": 2457.3199999999997, "end": 2462.44, "text": " makes them a monad, and that's, that's exactly why it gets mind blowing to do it directly. It's", "tokens": [50648, 1669, 552, 257, 1108, 345, 11, 293, 300, 311, 11, 300, 311, 2293, 983, 309, 2170, 1575, 15068, 281, 360, 309, 3838, 13, 467, 311, 50904], "temperature": 0.0, "avg_logprob": -0.11003871154785157, "compression_ratio": 1.7314487632508835, "no_speech_prob": 0.0012057271087542176}, {"id": 394, "seek": 245164, "start": 2462.44, "end": 2467.48, "text": " because it's monad, and you want syntax for that. But other than that, people have different styles.", "tokens": [50904, 570, 309, 311, 1108, 345, 11, 293, 291, 528, 28431, 337, 300, 13, 583, 661, 813, 300, 11, 561, 362, 819, 13273, 13, 51156], "temperature": 0.0, "avg_logprob": -0.11003871154785157, "compression_ratio": 1.7314487632508835, "no_speech_prob": 0.0012057271087542176}, {"id": 395, "seek": 245164, "start": 2467.48, "end": 2471.96, "text": " There are also people who work on low level code that would be like, this is way too inefficient.", "tokens": [51156, 821, 366, 611, 561, 567, 589, 322, 2295, 1496, 3089, 300, 576, 312, 411, 11, 341, 307, 636, 886, 43495, 13, 51380], "temperature": 0.0, "avg_logprob": -0.11003871154785157, "compression_ratio": 1.7314487632508835, "no_speech_prob": 0.0012057271087542176}, {"id": 396, "seek": 245164, "start": 2472.8399999999997, "end": 2478.2, "text": " It does you, there's all this laziness, right? The, the iterators are generating things along the", "tokens": [51424, 467, 775, 291, 11, 456, 311, 439, 341, 19320, 1324, 11, 558, 30, 440, 11, 264, 17138, 3391, 366, 17746, 721, 2051, 264, 51692], "temperature": 0.0, "avg_logprob": -0.11003871154785157, "compression_ratio": 1.7314487632508835, "no_speech_prob": 0.0012057271087542176}, {"id": 397, "seek": 247820, "start": 2478.2, "end": 2483.8799999999997, "text": " way, which means you have all this like, you have a bunch of structure, you have all these calls", "tokens": [50364, 636, 11, 597, 1355, 291, 362, 439, 341, 411, 11, 291, 362, 257, 3840, 295, 3877, 11, 291, 362, 439, 613, 5498, 50648], "temperature": 0.0, "avg_logprob": -0.13006088521220896, "compression_ratio": 1.641350210970464, "no_speech_prob": 0.0017269760137423873}, {"id": 398, "seek": 247820, "start": 2483.8799999999997, "end": 2488.8399999999997, "text": " through interfaces and so on. So if you're doing performance intensive code, one of the things", "tokens": [50648, 807, 28416, 293, 370, 322, 13, 407, 498, 291, 434, 884, 3389, 18957, 3089, 11, 472, 295, 264, 721, 50896], "temperature": 0.0, "avg_logprob": -0.13006088521220896, "compression_ratio": 1.641350210970464, "no_speech_prob": 0.0017269760137423873}, {"id": 399, "seek": 247820, "start": 2488.8399999999997, "end": 2494.9199999999996, "text": " that people look for in code reviews is, oh, oh, you have a query there. Well, fix that, you know,", "tokens": [50896, 300, 561, 574, 337, 294, 3089, 10229, 307, 11, 1954, 11, 1954, 11, 291, 362, 257, 14581, 456, 13, 1042, 11, 3191, 300, 11, 291, 458, 11, 51200], "temperature": 0.0, "avg_logprob": -0.13006088521220896, "compression_ratio": 1.641350210970464, "no_speech_prob": 0.0017269760137423873}, {"id": 400, "seek": 247820, "start": 2494.9199999999996, "end": 2504.4399999999996, "text": " go back to ugly array based stuff, because then it's going to be faster. So I will say that entity", "tokens": [51200, 352, 646, 281, 12246, 10225, 2361, 1507, 11, 570, 550, 309, 311, 516, 281, 312, 4663, 13, 407, 286, 486, 584, 300, 13977, 51676], "temperature": 0.0, "avg_logprob": -0.13006088521220896, "compression_ratio": 1.641350210970464, "no_speech_prob": 0.0017269760137423873}, {"id": 401, "seek": 250444, "start": 2504.52, "end": 2511.64, "text": " framework, live and kicking offers up, you know, a query provider implementation,", "tokens": [50368, 8388, 11, 1621, 293, 19137, 7736, 493, 11, 291, 458, 11, 257, 14581, 12398, 11420, 11, 50724], "temperature": 0.0, "avg_logprob": -0.1386786952163234, "compression_ratio": 1.5, "no_speech_prob": 0.005809268914163113}, {"id": 402, "seek": 250444, "start": 2511.64, "end": 2515.8, "text": " and people do use that, and they do use the query syntax when they're interacting with that,", "tokens": [50724, 293, 561, 360, 764, 300, 11, 293, 436, 360, 764, 264, 14581, 28431, 562, 436, 434, 18017, 365, 300, 11, 50932], "temperature": 0.0, "avg_logprob": -0.1386786952163234, "compression_ratio": 1.5, "no_speech_prob": 0.005809268914163113}, {"id": 403, "seek": 250444, "start": 2515.8, "end": 2524.44, "text": " because it is a database technology outside of that, maybe not so much. Okay. All right. One more.", "tokens": [50932, 570, 309, 307, 257, 8149, 2899, 2380, 295, 300, 11, 1310, 406, 370, 709, 13, 1033, 13, 1057, 558, 13, 1485, 544, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1386786952163234, "compression_ratio": 1.5, "no_speech_prob": 0.005809268914163113}, {"id": 404, "seek": 253444, "start": 2534.68, "end": 2539.4, "text": " That's true. Yes.", "tokens": [50376, 663, 311, 2074, 13, 1079, 13, 50612], "temperature": 0.0, "avg_logprob": -0.19274280689380788, "compression_ratio": 1.3777777777777778, "no_speech_prob": 0.002794017316773534}, {"id": 405, "seek": 253444, "start": 2550.76, "end": 2555.32, "text": " So that's a great question because, and we might touch on it a little bit later.", "tokens": [51180, 407, 300, 311, 257, 869, 1168, 570, 11, 293, 321, 1062, 2557, 322, 309, 257, 707, 857, 1780, 13, 51408], "temperature": 0.0, "avg_logprob": -0.19274280689380788, "compression_ratio": 1.3777777777777778, "no_speech_prob": 0.002794017316773534}, {"id": 406, "seek": 253444, "start": 2557.16, "end": 2563.2400000000002, "text": " So let me repeat again. The one thing you can do in the query syntax is you can use let", "tokens": [51500, 407, 718, 385, 7149, 797, 13, 440, 472, 551, 291, 393, 360, 294, 264, 14581, 28431, 307, 291, 393, 764, 718, 51804], "temperature": 0.0, "avg_logprob": -0.19274280689380788, "compression_ratio": 1.3777777777777778, "no_speech_prob": 0.002794017316773534}, {"id": 407, "seek": 256324, "start": 2563.3199999999997, "end": 2568.68, "text": " to actually introduce more temporary variables inside of the query. I haven't done it in many", "tokens": [50368, 281, 767, 5366, 544, 13413, 9102, 1854, 295, 264, 14581, 13, 286, 2378, 380, 1096, 309, 294, 867, 50636], "temperature": 0.0, "avg_logprob": -0.12064301713984063, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.004606293514370918}, {"id": 408, "seek": 256324, "start": 2568.68, "end": 2574.2799999999997, "text": " years, actually. Let's see if we can do that. Let y equal x times two or something like that.", "tokens": [50636, 924, 11, 767, 13, 961, 311, 536, 498, 321, 393, 360, 300, 13, 961, 288, 2681, 2031, 1413, 732, 420, 746, 411, 300, 13, 50916], "temperature": 0.0, "avg_logprob": -0.12064301713984063, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.004606293514370918}, {"id": 409, "seek": 256324, "start": 2575.3199999999997, "end": 2581.0, "text": " Yeah, it worked, at least it compiles. So now the rest of the query has access to x and y,", "tokens": [50968, 865, 11, 309, 2732, 11, 412, 1935, 309, 715, 4680, 13, 407, 586, 264, 1472, 295, 264, 14581, 575, 2105, 281, 2031, 293, 288, 11, 51252], "temperature": 0.0, "avg_logprob": -0.12064301713984063, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.004606293514370918}, {"id": 410, "seek": 256324, "start": 2583.0, "end": 2589.7999999999997, "text": " and that's really useful because you have sort of like variable declaration inside of an expression", "tokens": [51352, 293, 300, 311, 534, 4420, 570, 291, 362, 1333, 295, 411, 7006, 27606, 1854, 295, 364, 6114, 51692], "temperature": 0.0, "avg_logprob": -0.12064301713984063, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.004606293514370918}, {"id": 411, "seek": 258980, "start": 2589.8, "end": 2595.7200000000003, "text": " rather than as a separate statement. And that has continued to doggers. That statement-based", "tokens": [50364, 2831, 813, 382, 257, 4994, 5629, 13, 400, 300, 575, 7014, 281, 360, 1615, 433, 13, 663, 5629, 12, 6032, 50660], "temperature": 0.0, "avg_logprob": -0.1525781135859452, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.0057219830341637135}, {"id": 412, "seek": 258980, "start": 2597.32, "end": 2601.6400000000003, "text": " approach to variable declarations has continued to doggers. And in later versions of C-sharp,", "tokens": [50740, 3109, 281, 7006, 16694, 763, 575, 7014, 281, 360, 1615, 433, 13, 400, 294, 1780, 9606, 295, 383, 12, 2716, 6529, 11, 50956], "temperature": 0.0, "avg_logprob": -0.1525781135859452, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.0057219830341637135}, {"id": 413, "seek": 258980, "start": 2601.6400000000003, "end": 2606.2000000000003, "text": " there are more and more places where you can now declare variables inside of an", "tokens": [50956, 456, 366, 544, 293, 544, 3190, 689, 291, 393, 586, 19710, 9102, 1854, 295, 364, 51184], "temperature": 0.0, "avg_logprob": -0.1525781135859452, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.0057219830341637135}, {"id": 414, "seek": 258980, "start": 2607.32, "end": 2611.0, "text": " expression. We haven't done it completely generally. We had a proposal for it where we never", "tokens": [51240, 6114, 13, 492, 2378, 380, 1096, 309, 2584, 5101, 13, 492, 632, 257, 11494, 337, 309, 689, 321, 1128, 51424], "temperature": 0.0, "avg_logprob": -0.1525781135859452, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.0057219830341637135}, {"id": 415, "seek": 258980, "start": 2611.0, "end": 2615.48, "text": " went that far, but there are many situations now where you can declare an inline variable,", "tokens": [51424, 1437, 300, 1400, 11, 457, 456, 366, 867, 6851, 586, 689, 291, 393, 19710, 364, 294, 1889, 7006, 11, 51648], "temperature": 0.0, "avg_logprob": -0.1525781135859452, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.0057219830341637135}, {"id": 416, "seek": 258980, "start": 2615.48, "end": 2619.0800000000004, "text": " particularly in pattern matching, which we're going to get to soon. So that even provides", "tokens": [51648, 4098, 294, 5102, 14324, 11, 597, 321, 434, 516, 281, 483, 281, 2321, 13, 407, 300, 754, 6417, 51828], "temperature": 0.0, "avg_logprob": -0.1525781135859452, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.0057219830341637135}, {"id": 417, "seek": 261908, "start": 2619.7999999999997, "end": 2630.2, "text": " a good segue for that. Another big difference is functional languages tend to be very expression-based.", "tokens": [50400, 257, 665, 33850, 337, 300, 13, 3996, 955, 2649, 307, 11745, 8650, 3928, 281, 312, 588, 6114, 12, 6032, 13, 50920], "temperature": 0.0, "avg_logprob": -0.15549381657650596, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0009976490400731564}, {"id": 418, "seek": 261908, "start": 2630.2, "end": 2638.52, "text": " Typically, a function doesn't have side effects in a pure functional sense, so you don't really", "tokens": [50920, 23129, 11, 257, 2445, 1177, 380, 362, 1252, 5065, 294, 257, 6075, 11745, 2020, 11, 370, 291, 500, 380, 534, 51336], "temperature": 0.0, "avg_logprob": -0.15549381657650596, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0009976490400731564}, {"id": 419, "seek": 261908, "start": 2638.52, "end": 2643.7999999999997, "text": " need statements. You just need an expression saying what the whole thing is, and then you stick it", "tokens": [51336, 643, 12363, 13, 509, 445, 643, 364, 6114, 1566, 437, 264, 1379, 551, 307, 11, 293, 550, 291, 2897, 309, 51600], "temperature": 0.0, "avg_logprob": -0.15549381657650596, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0009976490400731564}, {"id": 420, "seek": 261908, "start": 2643.7999999999997, "end": 2648.04, "text": " together, you put sub-expressions inside, and it's all expression-based, and so you need things like", "tokens": [51600, 1214, 11, 291, 829, 1422, 12, 3121, 11637, 626, 1854, 11, 293, 309, 311, 439, 6114, 12, 6032, 11, 293, 370, 291, 643, 721, 411, 51812], "temperature": 0.0, "avg_logprob": -0.15549381657650596, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0009976490400731564}, {"id": 421, "seek": 264804, "start": 2648.04, "end": 2652.2, "text": " variable declaration to be expression-based. And the more expression-based, the more we get", "tokens": [50364, 7006, 27606, 281, 312, 6114, 12, 6032, 13, 400, 264, 544, 6114, 12, 6032, 11, 264, 544, 321, 483, 50572], "temperature": 0.0, "avg_logprob": -0.12472453587491747, "compression_ratio": 1.7922077922077921, "no_speech_prob": 0.001324041630141437}, {"id": 422, "seek": 264804, "start": 2652.2, "end": 2656.7599999999998, "text": " inspired by that in C-sharp, the more of a shortcoming it becomes that variable declaration", "tokens": [50572, 7547, 538, 300, 294, 383, 12, 2716, 6529, 11, 264, 544, 295, 257, 2099, 6590, 309, 3643, 300, 7006, 27606, 50800], "temperature": 0.0, "avg_logprob": -0.12472453587491747, "compression_ratio": 1.7922077922077921, "no_speech_prob": 0.001324041630141437}, {"id": 423, "seek": 264804, "start": 2656.7599999999998, "end": 2661.56, "text": " isn't one of them. So great, great point. And this is a way to sneak it in. You can't do that with", "tokens": [50800, 1943, 380, 472, 295, 552, 13, 407, 869, 11, 869, 935, 13, 400, 341, 307, 257, 636, 281, 13164, 309, 294, 13, 509, 393, 380, 360, 300, 365, 51040], "temperature": 0.0, "avg_logprob": -0.12472453587491747, "compression_ratio": 1.7922077922077921, "no_speech_prob": 0.001324041630141437}, {"id": 424, "seek": 264804, "start": 2661.56, "end": 2665.8, "text": " method call syntax, because it does sneaky things under the hood. It builds little, like,", "tokens": [51040, 3170, 818, 28431, 11, 570, 309, 775, 39518, 721, 833, 264, 13376, 13, 467, 15182, 707, 11, 411, 11, 51252], "temperature": 0.0, "avg_logprob": -0.12472453587491747, "compression_ratio": 1.7922077922077921, "no_speech_prob": 0.001324041630141437}, {"id": 425, "seek": 264804, "start": 2665.8, "end": 2672.92, "text": " tuple-like things to keep track of all the variables under the hood. Okay. Yep. Okay.", "tokens": [51252, 2604, 781, 12, 4092, 721, 281, 1066, 2837, 295, 439, 264, 9102, 833, 264, 13376, 13, 1033, 13, 7010, 13, 1033, 13, 51608], "temperature": 0.0, "avg_logprob": -0.12472453587491747, "compression_ratio": 1.7922077922077921, "no_speech_prob": 0.001324041630141437}, {"id": 426, "seek": 264804, "start": 2672.92, "end": 2677.8, "text": " Let's fast forward a little bit. Then we did dynamic. That was certainly not very functional.", "tokens": [51608, 961, 311, 2370, 2128, 257, 707, 857, 13, 1396, 321, 630, 8546, 13, 663, 390, 3297, 406, 588, 11745, 13, 51852], "temperature": 0.0, "avg_logprob": -0.12472453587491747, "compression_ratio": 1.7922077922077921, "no_speech_prob": 0.001324041630141437}, {"id": 427, "seek": 267780, "start": 2677.8, "end": 2684.04, "text": " C-sharp 4. C-sharp 5, we did async, which was potentially very functional. F-sharp already", "tokens": [50364, 383, 12, 2716, 6529, 1017, 13, 383, 12, 2716, 6529, 1025, 11, 321, 630, 382, 34015, 11, 597, 390, 7263, 588, 11745, 13, 479, 12, 2716, 6529, 1217, 50676], "temperature": 0.0, "avg_logprob": -0.13053771146793955, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.0033619473688304424}, {"id": 428, "seek": 267780, "start": 2684.04, "end": 2690.6000000000004, "text": " had a solution to async, which was also sort of monadic, and which is beautiful, but is very", "tokens": [50676, 632, 257, 3827, 281, 382, 34015, 11, 597, 390, 611, 1333, 295, 1108, 43341, 11, 293, 597, 307, 2238, 11, 457, 307, 588, 51004], "temperature": 0.0, "avg_logprob": -0.13053771146793955, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.0033619473688304424}, {"id": 429, "seek": 267780, "start": 2690.6000000000004, "end": 2697.4, "text": " ill-suited for a predominantly imperative language. So we went in a different direction with async,", "tokens": [51004, 3171, 12, 15091, 1226, 337, 257, 29893, 32490, 2856, 13, 407, 321, 1437, 294, 257, 819, 3513, 365, 382, 34015, 11, 51344], "temperature": 0.0, "avg_logprob": -0.13053771146793955, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.0033619473688304424}, {"id": 430, "seek": 267780, "start": 2697.4, "end": 2705.7200000000003, "text": " and the general functional approach to async is quite different from the imperative approach", "tokens": [51344, 293, 264, 2674, 11745, 3109, 281, 382, 34015, 307, 1596, 819, 490, 264, 32490, 3109, 51760], "temperature": 0.0, "avg_logprob": -0.13053771146793955, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.0033619473688304424}, {"id": 431, "seek": 270572, "start": 2705.7999999999997, "end": 2712.12, "text": " that we use in C-sharp. Essentially, they use an approach where they built up the whole control", "tokens": [50368, 300, 321, 764, 294, 383, 12, 2716, 6529, 13, 23596, 11, 436, 764, 364, 3109, 689, 436, 3094, 493, 264, 1379, 1969, 50684], "temperature": 0.0, "avg_logprob": -0.09350496072035569, "compression_ratio": 1.7201834862385321, "no_speech_prob": 0.00881465058773756}, {"id": 432, "seek": 270572, "start": 2712.12, "end": 2717.3999999999996, "text": " flow of the async ahead of time, and then you kind of pull a handle in, and it runs. It's like", "tokens": [50684, 3095, 295, 264, 382, 34015, 2286, 295, 565, 11, 293, 550, 291, 733, 295, 2235, 257, 4813, 294, 11, 293, 309, 6676, 13, 467, 311, 411, 50948], "temperature": 0.0, "avg_logprob": -0.09350496072035569, "compression_ratio": 1.7201834862385321, "no_speech_prob": 0.00881465058773756}, {"id": 433, "seek": 270572, "start": 2717.3999999999996, "end": 2725.08, "text": " you built all the pipes, and then you turn on the water. And in our async, we sort of more like", "tokens": [50948, 291, 3094, 439, 264, 21882, 11, 293, 550, 291, 1261, 322, 264, 1281, 13, 400, 294, 527, 382, 34015, 11, 321, 1333, 295, 544, 411, 51332], "temperature": 0.0, "avg_logprob": -0.09350496072035569, "compression_ratio": 1.7201834862385321, "no_speech_prob": 0.00881465058773756}, {"id": 434, "seek": 270572, "start": 2726.52, "end": 2731.64, "text": " laying out the pipes as the water is coming. It's sometimes called a cold and hot async.", "tokens": [51404, 14903, 484, 264, 21882, 382, 264, 1281, 307, 1348, 13, 467, 311, 2171, 1219, 257, 3554, 293, 2368, 382, 34015, 13, 51660], "temperature": 0.0, "avg_logprob": -0.09350496072035569, "compression_ratio": 1.7201834862385321, "no_speech_prob": 0.00881465058773756}, {"id": 435, "seek": 273164, "start": 2731.64, "end": 2740.6, "text": " Like we work with tasks, which are things that are already happening, things that are already", "tokens": [50364, 1743, 321, 589, 365, 9608, 11, 597, 366, 721, 300, 366, 1217, 2737, 11, 721, 300, 366, 1217, 50812], "temperature": 0.0, "avg_logprob": -0.11523113445359834, "compression_ratio": 1.7219730941704037, "no_speech_prob": 0.0032697548158466816}, {"id": 436, "seek": 273164, "start": 2740.6, "end": 2746.2799999999997, "text": " concurrently operating, and then you can take a task, and then you can say, well, I'm ready for", "tokens": [50812, 37702, 356, 7447, 11, 293, 550, 291, 393, 747, 257, 5633, 11, 293, 550, 291, 393, 584, 11, 731, 11, 286, 478, 1919, 337, 51096], "temperature": 0.0, "avg_logprob": -0.11523113445359834, "compression_ratio": 1.7219730941704037, "no_speech_prob": 0.0032697548158466816}, {"id": 437, "seek": 273164, "start": 2746.2799999999997, "end": 2750.44, "text": " you. Are you ready for me and get a result out of them? So that's all much more imperative", "tokens": [51096, 291, 13, 2014, 291, 1919, 337, 385, 293, 483, 257, 1874, 484, 295, 552, 30, 407, 300, 311, 439, 709, 544, 32490, 51304], "temperature": 0.0, "avg_logprob": -0.11523113445359834, "compression_ratio": 1.7219730941704037, "no_speech_prob": 0.0032697548158466816}, {"id": 438, "seek": 273164, "start": 2750.44, "end": 2754.92, "text": " fits better with imperative workflow. So there, we didn't go the functional way. We don't always do it.", "tokens": [51304, 9001, 1101, 365, 32490, 20993, 13, 407, 456, 11, 321, 994, 380, 352, 264, 11745, 636, 13, 492, 500, 380, 1009, 360, 309, 13, 51528], "temperature": 0.0, "avg_logprob": -0.11523113445359834, "compression_ratio": 1.7219730941704037, "no_speech_prob": 0.0032697548158466816}, {"id": 439, "seek": 275492, "start": 2755.48, "end": 2762.28, "text": " In C-sharp 6, we started getting interested in the expression-based stuff again, though. So I'm", "tokens": [50392, 682, 383, 12, 2716, 6529, 1386, 11, 321, 1409, 1242, 3102, 294, 264, 6114, 12, 6032, 1507, 797, 11, 1673, 13, 407, 286, 478, 50732], "temperature": 0.0, "avg_logprob": -0.17442095279693604, "compression_ratio": 1.7627906976744185, "no_speech_prob": 0.007339425850659609}, {"id": 440, "seek": 275492, "start": 2762.28, "end": 2770.12, "text": " going to switch to a different file here. So one thing that we really like, the expression bodies", "tokens": [50732, 516, 281, 3679, 281, 257, 819, 3991, 510, 13, 407, 472, 551, 300, 321, 534, 411, 11, 264, 6114, 7510, 51124], "temperature": 0.0, "avg_logprob": -0.17442095279693604, "compression_ratio": 1.7627906976744185, "no_speech_prob": 0.007339425850659609}, {"id": 441, "seek": 275492, "start": 2770.12, "end": 2774.36, "text": " of lambdas, we're like, why should only lambdas be allowed to have expression bodies? Why can't", "tokens": [51124, 295, 10097, 27476, 11, 321, 434, 411, 11, 983, 820, 787, 10097, 27476, 312, 4350, 281, 362, 6114, 7510, 30, 1545, 393, 380, 51336], "temperature": 0.0, "avg_logprob": -0.17442095279693604, "compression_ratio": 1.7627906976744185, "no_speech_prob": 0.007339425850659609}, {"id": 442, "seek": 275492, "start": 2774.36, "end": 2778.84, "text": " all our functions, all our function members have expression bodies, and we're like, okay,", "tokens": [51336, 439, 527, 6828, 11, 439, 527, 2445, 2679, 362, 6114, 7510, 11, 293, 321, 434, 411, 11, 1392, 11, 51560], "temperature": 0.0, "avg_logprob": -0.17442095279693604, "compression_ratio": 1.7627906976744185, "no_speech_prob": 0.007339425850659609}, {"id": 443, "seek": 277884, "start": 2778.84, "end": 2784.36, "text": " C-sharp 6, we did kind of half of them, and then C-sharp 7, we did the rest. So now", "tokens": [50364, 383, 12, 2716, 6529, 1386, 11, 321, 630, 733, 295, 1922, 295, 552, 11, 293, 550, 383, 12, 2716, 6529, 1614, 11, 321, 630, 264, 1472, 13, 407, 586, 50640], "temperature": 0.0, "avg_logprob": -0.1175389880225772, "compression_ratio": 1.5726495726495726, "no_speech_prob": 0.0008816009503789246}, {"id": 444, "seek": 277884, "start": 2785.4, "end": 2789.8, "text": " all function members in C-sharp can have expression bodies where you just put that lambda", "tokens": [50692, 439, 2445, 2679, 294, 383, 12, 2716, 6529, 393, 362, 6114, 7510, 689, 291, 445, 829, 300, 13607, 50912], "temperature": 0.0, "avg_logprob": -0.1175389880225772, "compression_ratio": 1.5726495726495726, "no_speech_prob": 0.0008816009503789246}, {"id": 445, "seek": 277884, "start": 2789.8, "end": 2798.04, "text": " arrow there, the fat arrow, as we shouldn't call it, and you get it. You don't have to say return.", "tokens": [50912, 11610, 456, 11, 264, 4046, 11610, 11, 382, 321, 4659, 380, 818, 309, 11, 293, 291, 483, 309, 13, 509, 500, 380, 362, 281, 584, 2736, 13, 51324], "temperature": 0.0, "avg_logprob": -0.1175389880225772, "compression_ratio": 1.5726495726495726, "no_speech_prob": 0.0008816009503789246}, {"id": 446, "seek": 277884, "start": 2798.04, "end": 2805.08, "text": " If your only statement is return something, cut the boilerplate. But it's just in tactic sugar,", "tokens": [51324, 759, 428, 787, 5629, 307, 2736, 746, 11, 1723, 264, 39228, 37008, 13, 583, 309, 311, 445, 294, 31012, 5076, 11, 51676], "temperature": 0.0, "avg_logprob": -0.1175389880225772, "compression_ratio": 1.5726495726495726, "no_speech_prob": 0.0008816009503789246}, {"id": 447, "seek": 280508, "start": 2805.08, "end": 2813.56, "text": " right? So, but coming to C-sharp 7, we're starting to think about more fundamental", "tokens": [50364, 558, 30, 407, 11, 457, 1348, 281, 383, 12, 2716, 6529, 1614, 11, 321, 434, 2891, 281, 519, 466, 544, 8088, 50788], "temperature": 0.0, "avg_logprob": -0.16394308725992837, "compression_ratio": 1.4627659574468086, "no_speech_prob": 0.0008019465603865683}, {"id": 448, "seek": 280508, "start": 2813.56, "end": 2821.7999999999997, "text": " things again. So not so much in the syntax, syntactic sugar, you know, as feel kind of layer,", "tokens": [50788, 721, 797, 13, 407, 406, 370, 709, 294, 264, 28431, 11, 23980, 19892, 5076, 11, 291, 458, 11, 382, 841, 733, 295, 4583, 11, 51200], "temperature": 0.0, "avg_logprob": -0.16394308725992837, "compression_ratio": 1.4627659574468086, "no_speech_prob": 0.0008019465603865683}, {"id": 449, "seek": 280508, "start": 2821.7999999999997, "end": 2829.4, "text": " but really like, uh-oh, object-oriented program is kind of screwed in these new scenarios that are", "tokens": [51200, 457, 534, 411, 11, 2232, 12, 1445, 11, 2657, 12, 27414, 1461, 307, 733, 295, 20331, 294, 613, 777, 15077, 300, 366, 51580], "temperature": 0.0, "avg_logprob": -0.16394308725992837, "compression_ratio": 1.4627659574468086, "no_speech_prob": 0.0008019465603865683}, {"id": 450, "seek": 282940, "start": 2829.4, "end": 2838.36, "text": " becoming very predominant and widespread. Essentially, when it comes to cloud programming,", "tokens": [50364, 5617, 588, 21456, 394, 293, 22679, 13, 23596, 11, 562, 309, 1487, 281, 4588, 9410, 11, 50812], "temperature": 0.0, "avg_logprob": -0.13253037631511688, "compression_ratio": 1.5351351351351352, "no_speech_prob": 0.001476311357691884}, {"id": 451, "seek": 282940, "start": 2840.52, "end": 2844.28, "text": " history is on the side of functional programming. I'm sorry, object-oriented programming is not", "tokens": [50920, 2503, 307, 322, 264, 1252, 295, 11745, 9410, 13, 286, 478, 2597, 11, 2657, 12, 27414, 9410, 307, 406, 51108], "temperature": 0.0, "avg_logprob": -0.13253037631511688, "compression_ratio": 1.5351351351351352, "no_speech_prob": 0.001476311357691884}, {"id": 452, "seek": 282940, "start": 2844.28, "end": 2851.8, "text": " good for that. If you think about, and that comes down to how you describe aberrations over types", "tokens": [51108, 665, 337, 300, 13, 759, 291, 519, 466, 11, 293, 300, 1487, 760, 281, 577, 291, 6786, 4340, 12154, 670, 3467, 51484], "temperature": 0.0, "avg_logprob": -0.13253037631511688, "compression_ratio": 1.5351351351351352, "no_speech_prob": 0.001476311357691884}, {"id": 453, "seek": 285180, "start": 2851.88, "end": 2859.7200000000003, "text": " of data. In both object-oriented and functional programming, there are ways that you can write", "tokens": [50368, 295, 1412, 13, 682, 1293, 2657, 12, 27414, 293, 11745, 9410, 11, 456, 366, 2098, 300, 291, 393, 2464, 50760], "temperature": 0.0, "avg_logprob": -0.10166011073372581, "compression_ratio": 1.5889830508474576, "no_speech_prob": 0.03107406757771969}, {"id": 454, "seek": 285180, "start": 2859.7200000000003, "end": 2865.8, "text": " functions so that they have appropriate behavior for each shape of data, for each type. But those", "tokens": [50760, 6828, 370, 300, 436, 362, 6854, 5223, 337, 1184, 3909, 295, 1412, 11, 337, 1184, 2010, 13, 583, 729, 51064], "temperature": 0.0, "avg_logprob": -0.10166011073372581, "compression_ratio": 1.5889830508474576, "no_speech_prob": 0.03107406757771969}, {"id": 455, "seek": 285180, "start": 2865.8, "end": 2871.6400000000003, "text": " ways are very different. They're like actually, I think probably if Eric Meyer was here, he would", "tokens": [51064, 2098, 366, 588, 819, 13, 814, 434, 411, 767, 11, 286, 519, 1391, 498, 9336, 47207, 390, 510, 11, 415, 576, 51356], "temperature": 0.0, "avg_logprob": -0.10166011073372581, "compression_ratio": 1.5889830508474576, "no_speech_prob": 0.03107406757771969}, {"id": 456, "seek": 285180, "start": 2871.6400000000003, "end": 2876.92, "text": " say that there's a duality, like they're completely like the opposite of each other.", "tokens": [51356, 584, 300, 456, 311, 257, 11848, 507, 11, 411, 436, 434, 2584, 411, 264, 6182, 295, 1184, 661, 13, 51620], "temperature": 0.0, "avg_logprob": -0.10166011073372581, "compression_ratio": 1.5889830508474576, "no_speech_prob": 0.03107406757771969}, {"id": 457, "seek": 287692, "start": 2877.88, "end": 2883.56, "text": " What we do in classic object-oriented programming, we love encapsulation. We love saying the data", "tokens": [50412, 708, 321, 360, 294, 7230, 2657, 12, 27414, 9410, 11, 321, 959, 38745, 2776, 13, 492, 959, 1566, 264, 1412, 50696], "temperature": 0.0, "avg_logprob": -0.1421076740537371, "compression_ratio": 1.6776556776556777, "no_speech_prob": 0.0027559446170926094}, {"id": 458, "seek": 287692, "start": 2883.56, "end": 2888.44, "text": " is actually secret. I'm not even, I'm not exposing it because then I can change it whenever I like,", "tokens": [50696, 307, 767, 4054, 13, 286, 478, 406, 754, 11, 286, 478, 406, 33178, 309, 570, 550, 286, 393, 1319, 309, 5699, 286, 411, 11, 50940], "temperature": 0.0, "avg_logprob": -0.1421076740537371, "compression_ratio": 1.6776556776556777, "no_speech_prob": 0.0027559446170926094}, {"id": 459, "seek": 287692, "start": 2888.44, "end": 2893.2400000000002, "text": " and then I just offer up some functions, and I can have a class hierarchy with virtual functions", "tokens": [50940, 293, 550, 286, 445, 2626, 493, 512, 6828, 11, 293, 286, 393, 362, 257, 1508, 22333, 365, 6374, 6828, 51180], "temperature": 0.0, "avg_logprob": -0.1421076740537371, "compression_ratio": 1.6776556776556777, "no_speech_prob": 0.0027559446170926094}, {"id": 460, "seek": 287692, "start": 2893.8, "end": 2898.52, "text": " that I can then describe for each type of data what it does. So the super like,", "tokens": [51208, 300, 286, 393, 550, 6786, 337, 1184, 2010, 295, 1412, 437, 309, 775, 13, 407, 264, 1687, 411, 11, 51444], "temperature": 0.0, "avg_logprob": -0.1421076740537371, "compression_ratio": 1.6776556776556777, "no_speech_prob": 0.0027559446170926094}, {"id": 461, "seek": 287692, "start": 2899.48, "end": 2903.7200000000003, "text": " idiotically simple example here is the two-string virtual method, right, where I am", "tokens": [51492, 14270, 984, 2199, 1365, 510, 307, 264, 732, 12, 37045, 6374, 3170, 11, 558, 11, 689, 286, 669, 51704], "temperature": 0.0, "avg_logprob": -0.1421076740537371, "compression_ratio": 1.6776556776556777, "no_speech_prob": 0.0027559446170926094}, {"id": 462, "seek": 290372, "start": 2904.4399999999996, "end": 2912.8399999999997, "text": " I am describing the string representation of the object by overriding the virtual method", "tokens": [50400, 286, 669, 16141, 264, 6798, 10290, 295, 264, 2657, 538, 670, 81, 2819, 264, 6374, 3170, 50820], "temperature": 0.0, "avg_logprob": -0.11616826587253147, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.0009542671614326537}, {"id": 463, "seek": 290372, "start": 2912.8399999999997, "end": 2921.56, "text": " two-string. Great, you know, that means that whenever I write a new derived class from person", "tokens": [50820, 732, 12, 37045, 13, 3769, 11, 291, 458, 11, 300, 1355, 300, 5699, 286, 2464, 257, 777, 18949, 1508, 490, 954, 51256], "temperature": 0.0, "avg_logprob": -0.11616826587253147, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.0009542671614326537}, {"id": 464, "seek": 290372, "start": 2921.56, "end": 2927.08, "text": " here or from object actually in this case, you know, I can just overwrite that behavior to suit", "tokens": [51256, 510, 420, 490, 2657, 767, 294, 341, 1389, 11, 291, 458, 11, 286, 393, 445, 670, 21561, 300, 5223, 281, 5722, 51532], "temperature": 0.0, "avg_logprob": -0.11616826587253147, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.0009542671614326537}, {"id": 465, "seek": 290372, "start": 2927.08, "end": 2933.08, "text": " whatever my shape is, and somebody else can call it on the base class and not even know I exist,", "tokens": [51532, 2035, 452, 3909, 307, 11, 293, 2618, 1646, 393, 818, 309, 322, 264, 3096, 1508, 293, 406, 754, 458, 286, 2514, 11, 51832], "temperature": 0.0, "avg_logprob": -0.11616826587253147, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.0009542671614326537}, {"id": 466, "seek": 293308, "start": 2933.08, "end": 2941.72, "text": " but still get the right behavior. Excellent, except when you have a world where data is long", "tokens": [50364, 457, 920, 483, 264, 558, 5223, 13, 16723, 11, 3993, 562, 291, 362, 257, 1002, 689, 1412, 307, 938, 50796], "temperature": 0.0, "avg_logprob": -0.11442744594880905, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.00037982506910339}, {"id": 467, "seek": 293308, "start": 2941.72, "end": 2947.08, "text": " lived in the cloud, maybe, or in databases and whatnot, and different people are writing different", "tokens": [50796, 5152, 294, 264, 4588, 11, 1310, 11, 420, 294, 22380, 293, 25882, 11, 293, 819, 561, 366, 3579, 819, 51064], "temperature": 0.0, "avg_logprob": -0.11442744594880905, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.00037982506910339}, {"id": 468, "seek": 293308, "start": 2947.08, "end": 2952.52, "text": " functionality over the same data models, well, oops, now it's not so good to encapsulate those", "tokens": [51064, 14980, 670, 264, 912, 1412, 5245, 11, 731, 11, 34166, 11, 586, 309, 311, 406, 370, 665, 281, 38745, 5256, 729, 51336], "temperature": 0.0, "avg_logprob": -0.11442744594880905, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.00037982506910339}, {"id": 469, "seek": 293308, "start": 2953.48, "end": 2960.2799999999997, "text": " behaviors with the data model, right? You want to independently be able to express behaviors over", "tokens": [51384, 15501, 365, 264, 1412, 2316, 11, 558, 30, 509, 528, 281, 21761, 312, 1075, 281, 5109, 15501, 670, 51724], "temperature": 0.0, "avg_logprob": -0.11442744594880905, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.00037982506910339}, {"id": 470, "seek": 296028, "start": 2960.28, "end": 2971.1600000000003, "text": " the data model that still depend on, like, still type specific, but that the original type knows", "tokens": [50364, 264, 1412, 2316, 300, 920, 5672, 322, 11, 411, 11, 920, 2010, 2685, 11, 457, 300, 264, 3380, 2010, 3255, 50908], "temperature": 0.0, "avg_logprob": -0.12926934747134938, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.0023956787772476673}, {"id": 471, "seek": 296028, "start": 2971.1600000000003, "end": 2978.6000000000004, "text": " nothing about, and that the different domains of behavior have no idea about each other. So", "tokens": [50908, 1825, 466, 11, 293, 300, 264, 819, 25514, 295, 5223, 362, 572, 1558, 466, 1184, 661, 13, 407, 51280], "temperature": 0.0, "avg_logprob": -0.12926934747134938, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.0023956787772476673}, {"id": 472, "seek": 296028, "start": 2978.6000000000004, "end": 2983.4, "text": " encapsulation is dead, right? You need, for those scenarios, you need the data to be public,", "tokens": [51280, 38745, 2776, 307, 3116, 11, 558, 30, 509, 643, 11, 337, 729, 15077, 11, 291, 643, 264, 1412, 281, 312, 1908, 11, 51520], "temperature": 0.0, "avg_logprob": -0.12926934747134938, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.0023956787772476673}, {"id": 473, "seek": 298340, "start": 2983.88, "end": 2992.76, "text": " and luckily we have, you know, auto properties to make that easy, and you need the functions to", "tokens": [50388, 293, 22880, 321, 362, 11, 291, 458, 11, 8399, 7221, 281, 652, 300, 1858, 11, 293, 291, 643, 264, 6828, 281, 50832], "temperature": 0.0, "avg_logprob": -0.1850262533260297, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.0780118927359581}, {"id": 474, "seek": 298340, "start": 2992.76, "end": 3001.0, "text": " work from the outside. But in a C-sharp 6 setting, so let's say we're still in 6, doing something,", "tokens": [50832, 589, 490, 264, 2380, 13, 583, 294, 257, 383, 12, 2716, 6529, 1386, 3287, 11, 370, 718, 311, 584, 321, 434, 920, 294, 1386, 11, 884, 746, 11, 51244], "temperature": 0.0, "avg_logprob": -0.1850262533260297, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.0780118927359581}, {"id": 475, "seek": 298340, "start": 3002.12, "end": 3007.88, "text": " let's say I want to write the two-string method from the outside, that's actually fairly hard,", "tokens": [51300, 718, 311, 584, 286, 528, 281, 2464, 264, 732, 12, 37045, 3170, 490, 264, 2380, 11, 300, 311, 767, 6457, 1152, 11, 51588], "temperature": 0.0, "avg_logprob": -0.1850262533260297, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.0780118927359581}, {"id": 476, "seek": 300788, "start": 3007.88, "end": 3015.0, "text": " that's annoyingly clunky, and that you get back to that dying inside feeling. So let's try to do", "tokens": [50364, 300, 311, 11304, 356, 596, 25837, 11, 293, 300, 291, 483, 646, 281, 300, 8639, 1854, 2633, 13, 407, 718, 311, 853, 281, 360, 50720], "temperature": 0.0, "avg_logprob": -0.14032312881114872, "compression_ratio": 1.6179775280898876, "no_speech_prob": 0.017166679725050926}, {"id": 477, "seek": 300788, "start": 3015.0, "end": 3019.6400000000003, "text": " it, I'm making you all die a little bit inside, I'm sorry, we'll revive that part, and there'll", "tokens": [50720, 309, 11, 286, 478, 1455, 291, 439, 978, 257, 707, 857, 1854, 11, 286, 478, 2597, 11, 321, 603, 36292, 300, 644, 11, 293, 456, 603, 50952], "temperature": 0.0, "avg_logprob": -0.14032312881114872, "compression_ratio": 1.6179775280898876, "no_speech_prob": 0.017166679725050926}, {"id": 478, "seek": 300788, "start": 3019.6400000000003, "end": 3026.52, "text": " be flowers, and it'll be good in a minute, but you know. So let's say two-string, let's call it", "tokens": [50952, 312, 8085, 11, 293, 309, 603, 312, 665, 294, 257, 3456, 11, 457, 291, 458, 13, 407, 718, 311, 584, 732, 12, 37045, 11, 718, 311, 818, 309, 51296], "temperature": 0.0, "avg_logprob": -0.14032312881114872, "compression_ratio": 1.6179775280898876, "no_speech_prob": 0.017166679725050926}, {"id": 479, "seek": 302652, "start": 3027.08, "end": 3039.64, "text": " something else, render, and you take a person, it's not even generics involved here, you take", "tokens": [50392, 746, 1646, 11, 15529, 11, 293, 291, 747, 257, 954, 11, 309, 311, 406, 754, 1337, 1167, 3288, 510, 11, 291, 747, 51020], "temperature": 0.0, "avg_logprob": -0.13264864462393303, "compression_ratio": 1.6101694915254237, "no_speech_prob": 0.0655883401632309}, {"id": 480, "seek": 302652, "start": 3039.64, "end": 3044.2, "text": " a person, P, and then you want to render it according to which kind of, you know, which person", "tokens": [51020, 257, 954, 11, 430, 11, 293, 550, 291, 528, 281, 15529, 309, 4650, 281, 597, 733, 295, 11, 291, 458, 11, 597, 954, 51248], "temperature": 0.0, "avg_logprob": -0.13264864462393303, "compression_ratio": 1.6101694915254237, "no_speech_prob": 0.0655883401632309}, {"id": 481, "seek": 302652, "start": 3044.92, "end": 3050.84, "text": " derived class it is. So we could do that, we can say, you know, we have type testing in C-sharp,", "tokens": [51284, 18949, 1508, 309, 307, 13, 407, 321, 727, 360, 300, 11, 321, 393, 584, 11, 291, 458, 11, 321, 362, 2010, 4997, 294, 383, 12, 2716, 6529, 11, 51580], "temperature": 0.0, "avg_logprob": -0.13264864462393303, "compression_ratio": 1.6101694915254237, "no_speech_prob": 0.0655883401632309}, {"id": 482, "seek": 305084, "start": 3050.84, "end": 3057.2400000000002, "text": " we can say if P is a student, and that's the only derived class that I actually put in here,", "tokens": [50364, 321, 393, 584, 498, 430, 307, 257, 3107, 11, 293, 300, 311, 264, 787, 18949, 1508, 300, 286, 767, 829, 294, 510, 11, 50684], "temperature": 0.0, "avg_logprob": -0.1388288698698345, "compression_ratio": 1.5874439461883407, "no_speech_prob": 0.01115274615585804}, {"id": 483, "seek": 305084, "start": 3057.2400000000002, "end": 3063.1600000000003, "text": " but you know, imagine there are dozens. For each of those, you say if P is student,", "tokens": [50684, 457, 291, 458, 11, 3811, 456, 366, 18431, 13, 1171, 1184, 295, 729, 11, 291, 584, 498, 430, 307, 3107, 11, 50980], "temperature": 0.0, "avg_logprob": -0.1388288698698345, "compression_ratio": 1.5874439461883407, "no_speech_prob": 0.01115274615585804}, {"id": 484, "seek": 305084, "start": 3063.1600000000003, "end": 3069.0, "text": " then do, at least we have expression-bodied members here, no I can't do that here, return", "tokens": [50980, 550, 360, 11, 412, 1935, 321, 362, 6114, 12, 47466, 1091, 2679, 510, 11, 572, 286, 393, 380, 360, 300, 510, 11, 2736, 51272], "temperature": 0.0, "avg_logprob": -0.1388288698698345, "compression_ratio": 1.5874439461883407, "no_speech_prob": 0.01115274615585804}, {"id": 485, "seek": 305084, "start": 3071.32, "end": 3076.76, "text": " whatever the student does, okay, I'm cheating a little using interpolated strings here,", "tokens": [51388, 2035, 264, 3107, 775, 11, 1392, 11, 286, 478, 18309, 257, 707, 1228, 44902, 770, 13985, 510, 11, 51660], "temperature": 0.0, "avg_logprob": -0.1388288698698345, "compression_ratio": 1.5874439461883407, "no_speech_prob": 0.01115274615585804}, {"id": 486, "seek": 307676, "start": 3077.7200000000003, "end": 3086.1200000000003, "text": " return that, except of course I have to dot my way into that public data, no problem,", "tokens": [50412, 2736, 300, 11, 3993, 295, 1164, 286, 362, 281, 5893, 452, 636, 666, 300, 1908, 1412, 11, 572, 1154, 11, 50832], "temperature": 0.0, "avg_logprob": -0.12306839285544979, "compression_ratio": 1.7009345794392523, "no_speech_prob": 0.003591705346480012}, {"id": 487, "seek": 307676, "start": 3086.76, "end": 3094.1200000000003, "text": " but as I get to the student-specific property here, oh, you know, I already, I just asked,", "tokens": [50864, 457, 382, 286, 483, 281, 264, 3107, 12, 29258, 4707, 510, 11, 1954, 11, 291, 458, 11, 286, 1217, 11, 286, 445, 2351, 11, 51232], "temperature": 0.0, "avg_logprob": -0.12306839285544979, "compression_ratio": 1.7009345794392523, "no_speech_prob": 0.003591705346480012}, {"id": 488, "seek": 307676, "start": 3094.1200000000003, "end": 3100.44, "text": " but I already forgot that it was a student, so I don't get to. If only we were type script,", "tokens": [51232, 457, 286, 1217, 5298, 300, 309, 390, 257, 3107, 11, 370, 286, 500, 380, 483, 281, 13, 759, 787, 321, 645, 2010, 5755, 11, 51548], "temperature": 0.0, "avg_logprob": -0.12306839285544979, "compression_ratio": 1.7009345794392523, "no_speech_prob": 0.003591705346480012}, {"id": 489, "seek": 307676, "start": 3100.44, "end": 3105.5600000000004, "text": " you know, type script, it has flow-based typing, you know, a variable, you know, if you figured", "tokens": [51548, 291, 458, 11, 2010, 5755, 11, 309, 575, 3095, 12, 6032, 18444, 11, 291, 458, 11, 257, 7006, 11, 291, 458, 11, 498, 291, 8932, 51804], "temperature": 0.0, "avg_logprob": -0.12306839285544979, "compression_ratio": 1.7009345794392523, "no_speech_prob": 0.003591705346480012}, {"id": 490, "seek": 310556, "start": 3105.56, "end": 3109.96, "text": " out it wasn't something on this branch, then, you know, it'll know you're something else,", "tokens": [50364, 484, 309, 2067, 380, 746, 322, 341, 9819, 11, 550, 11, 291, 458, 11, 309, 603, 458, 291, 434, 746, 1646, 11, 50584], "temperature": 0.0, "avg_logprob": -0.1505992723547894, "compression_ratio": 1.7740740740740741, "no_speech_prob": 0.011850083246827126}, {"id": 491, "seek": 310556, "start": 3109.96, "end": 3113.88, "text": " and it's beautiful, but we can't, that's, oh, we're super-breaking in C-sharp, and also their", "tokens": [50584, 293, 309, 311, 2238, 11, 457, 321, 393, 380, 11, 300, 311, 11, 1954, 11, 321, 434, 1687, 12, 20602, 294, 383, 12, 2716, 6529, 11, 293, 611, 641, 50780], "temperature": 0.0, "avg_logprob": -0.1505992723547894, "compression_ratio": 1.7740740740740741, "no_speech_prob": 0.011850083246827126}, {"id": 492, "seek": 310556, "start": 3113.88, "end": 3120.44, "text": " compiler is, you know, just thank God that they don't promise type safety, let me just put it like", "tokens": [50780, 31958, 307, 11, 291, 458, 11, 445, 1309, 1265, 300, 436, 500, 380, 6228, 2010, 4514, 11, 718, 385, 445, 829, 309, 411, 51108], "temperature": 0.0, "avg_logprob": -0.1505992723547894, "compression_ratio": 1.7740740740740741, "no_speech_prob": 0.011850083246827126}, {"id": 493, "seek": 310556, "start": 3120.44, "end": 3128.2, "text": " that, so that is kind of annoying, what to do, well, you know, in C-sharp 6, your best option is to,", "tokens": [51108, 300, 11, 370, 300, 307, 733, 295, 11304, 11, 437, 281, 360, 11, 731, 11, 291, 458, 11, 294, 383, 12, 2716, 6529, 1386, 11, 428, 1151, 3614, 307, 281, 11, 51496], "temperature": 0.0, "avg_logprob": -0.1505992723547894, "compression_ratio": 1.7740740740740741, "no_speech_prob": 0.011850083246827126}, {"id": 494, "seek": 310556, "start": 3128.2, "end": 3133.32, "text": " you know, cast P to student, knowing it will succeed, because you're smarter than the compiler,", "tokens": [51496, 291, 458, 11, 4193, 430, 281, 3107, 11, 5276, 309, 486, 7754, 11, 570, 291, 434, 20294, 813, 264, 31958, 11, 51752], "temperature": 0.0, "avg_logprob": -0.1505992723547894, "compression_ratio": 1.7740740740740741, "no_speech_prob": 0.011850083246827126}, {"id": 495, "seek": 313332, "start": 3133.8, "end": 3138.2000000000003, "text": " until you maintain your code a little bit, and I know somebody else takes over,", "tokens": [50388, 1826, 291, 6909, 428, 3089, 257, 707, 857, 11, 293, 286, 458, 2618, 1646, 2516, 670, 11, 50608], "temperature": 0.0, "avg_logprob": -0.13868766901444415, "compression_ratio": 1.8061224489795917, "no_speech_prob": 0.005467560607939959}, {"id": 496, "seek": 313332, "start": 3138.2000000000003, "end": 3145.32, "text": " and they do a refactoring manually, and stuff blows up, but that, we can do that,", "tokens": [50608, 293, 436, 360, 257, 1895, 578, 3662, 16945, 11, 293, 1507, 18458, 493, 11, 457, 300, 11, 321, 393, 360, 300, 11, 50964], "temperature": 0.0, "avg_logprob": -0.13868766901444415, "compression_ratio": 1.8061224489795917, "no_speech_prob": 0.005467560607939959}, {"id": 497, "seek": 313332, "start": 3145.32, "end": 3150.1200000000003, "text": " and then there's an else, you know, else return that other stuff, let's just get it in there,", "tokens": [50964, 293, 550, 456, 311, 364, 1646, 11, 291, 458, 11, 1646, 2736, 300, 661, 1507, 11, 718, 311, 445, 483, 309, 294, 456, 11, 51204], "temperature": 0.0, "avg_logprob": -0.13868766901444415, "compression_ratio": 1.8061224489795917, "no_speech_prob": 0.005467560607939959}, {"id": 498, "seek": 313332, "start": 3150.1200000000003, "end": 3158.44, "text": " so we can, so we can mutate the code a little bit, return that stuff, and of course there would be", "tokens": [51204, 370, 321, 393, 11, 370, 321, 393, 5839, 473, 264, 3089, 257, 707, 857, 11, 2736, 300, 1507, 11, 293, 295, 1164, 456, 576, 312, 51620], "temperature": 0.0, "avg_logprob": -0.13868766901444415, "compression_ratio": 1.8061224489795917, "no_speech_prob": 0.005467560607939959}, {"id": 499, "seek": 315844, "start": 3158.44, "end": 3165.64, "text": " else ifs for every other, like, derived class here, so here we get to do p.this and p.that,", "tokens": [50364, 1646, 498, 82, 337, 633, 661, 11, 411, 11, 18949, 1508, 510, 11, 370, 510, 321, 483, 281, 360, 280, 13, 11176, 293, 280, 13, 6780, 11, 50724], "temperature": 0.0, "avg_logprob": -0.12162645046527569, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.03787931427359581}, {"id": 500, "seek": 315844, "start": 3165.64, "end": 3173.48, "text": " so far so good, but functional languages, they do this all the time, and it's interesting to note", "tokens": [50724, 370, 1400, 370, 665, 11, 457, 11745, 8650, 11, 436, 360, 341, 439, 264, 565, 11, 293, 309, 311, 1880, 281, 3637, 51116], "temperature": 0.0, "avg_logprob": -0.12162645046527569, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.03787931427359581}, {"id": 501, "seek": 315844, "start": 3173.48, "end": 3184.44, "text": " that there's a fundamental difference in how the, you know, what kind of contract you have here,", "tokens": [51116, 300, 456, 311, 257, 8088, 2649, 294, 577, 264, 11, 291, 458, 11, 437, 733, 295, 4364, 291, 362, 510, 11, 51664], "temperature": 0.0, "avg_logprob": -0.12162645046527569, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.03787931427359581}, {"id": 502, "seek": 318444, "start": 3184.44, "end": 3188.28, "text": " when you use opti-growing programming, as I said, you can add a new class whenever you want,", "tokens": [50364, 562, 291, 764, 2427, 72, 12, 861, 9637, 9410, 11, 382, 286, 848, 11, 291, 393, 909, 257, 777, 1508, 5699, 291, 528, 11, 50556], "temperature": 0.0, "avg_logprob": -0.1061146338780721, "compression_ratio": 1.7814814814814814, "no_speech_prob": 0.0655318945646286}, {"id": 503, "seek": 318444, "start": 3188.28, "end": 3192.2000000000003, "text": " and you can just overwrite that virtual method, and everyone's happy, right, because the code and", "tokens": [50556, 293, 291, 393, 445, 670, 21561, 300, 6374, 3170, 11, 293, 1518, 311, 2055, 11, 558, 11, 570, 264, 3089, 293, 50752], "temperature": 0.0, "avg_logprob": -0.1061146338780721, "compression_ratio": 1.7814814814814814, "no_speech_prob": 0.0655318945646286}, {"id": 504, "seek": 318444, "start": 3192.2000000000003, "end": 3199.2400000000002, "text": " the class are together, if you add a new type, like, in this functional setting, you are explicitly", "tokens": [50752, 264, 1508, 366, 1214, 11, 498, 291, 909, 257, 777, 2010, 11, 411, 11, 294, 341, 11745, 3287, 11, 291, 366, 20803, 51104], "temperature": 0.0, "avg_logprob": -0.1061146338780721, "compression_ratio": 1.7814814814814814, "no_speech_prob": 0.0655318945646286}, {"id": 505, "seek": 318444, "start": 3199.2400000000002, "end": 3204.12, "text": " in the function, you are mentioning all the different shapes that you care about, and if somebody", "tokens": [51104, 294, 264, 2445, 11, 291, 366, 18315, 439, 264, 819, 10854, 300, 291, 1127, 466, 11, 293, 498, 2618, 51348], "temperature": 0.0, "avg_logprob": -0.1061146338780721, "compression_ratio": 1.7814814814814814, "no_speech_prob": 0.0655318945646286}, {"id": 506, "seek": 318444, "start": 3204.12, "end": 3209.32, "text": " adds another shape of data, and you know, your code is no longer handling that, so there's a", "tokens": [51348, 10860, 1071, 3909, 295, 1412, 11, 293, 291, 458, 11, 428, 3089, 307, 572, 2854, 13175, 300, 11, 370, 456, 311, 257, 51608], "temperature": 0.0, "avg_logprob": -0.1061146338780721, "compression_ratio": 1.7814814814814814, "no_speech_prob": 0.0655318945646286}, {"id": 507, "seek": 320932, "start": 3209.32, "end": 3215.56, "text": " different, you can't add new data with impunity, but you can add new functions with impunity,", "tokens": [50364, 819, 11, 291, 393, 380, 909, 777, 1412, 365, 704, 45105, 11, 457, 291, 393, 909, 777, 6828, 365, 704, 45105, 11, 50676], "temperature": 0.0, "avg_logprob": -0.08896011319653742, "compression_ratio": 2.3045685279187818, "no_speech_prob": 0.04460769519209862}, {"id": 508, "seek": 320932, "start": 3215.56, "end": 3221.56, "text": " which you can't do in the opti-growing world, you can't go without going back and editing the", "tokens": [50676, 597, 291, 393, 380, 360, 294, 264, 2427, 72, 12, 861, 9637, 1002, 11, 291, 393, 380, 352, 1553, 516, 646, 293, 10000, 264, 50976], "temperature": 0.0, "avg_logprob": -0.08896011319653742, "compression_ratio": 2.3045685279187818, "no_speech_prob": 0.04460769519209862}, {"id": 509, "seek": 320932, "start": 3221.56, "end": 3225.32, "text": " original, right, you can't independently add new functions in opti-growing programming,", "tokens": [50976, 3380, 11, 558, 11, 291, 393, 380, 21761, 909, 777, 6828, 294, 2427, 72, 12, 861, 9637, 9410, 11, 51164], "temperature": 0.0, "avg_logprob": -0.08896011319653742, "compression_ratio": 2.3045685279187818, "no_speech_prob": 0.04460769519209862}, {"id": 510, "seek": 320932, "start": 3225.32, "end": 3232.6000000000004, "text": " but you can add new types, in functional programming, you can't independently add", "tokens": [51164, 457, 291, 393, 909, 777, 3467, 11, 294, 11745, 9410, 11, 291, 393, 380, 21761, 909, 51528], "temperature": 0.0, "avg_logprob": -0.08896011319653742, "compression_ratio": 2.3045685279187818, "no_speech_prob": 0.04460769519209862}, {"id": 511, "seek": 320932, "start": 3232.6000000000004, "end": 3237.88, "text": " new types, but you can add new functions, this really is a duality, but they do the other things", "tokens": [51528, 777, 3467, 11, 457, 291, 393, 909, 777, 6828, 11, 341, 534, 307, 257, 11848, 507, 11, 457, 436, 360, 264, 661, 721, 51792], "temperature": 0.0, "avg_logprob": -0.08896011319653742, "compression_ratio": 2.3045685279187818, "no_speech_prob": 0.04460769519209862}, {"id": 512, "seek": 323788, "start": 3237.88, "end": 3242.36, "text": " so well, and what is it they do, well, they do pattern matching, so the first step there is,", "tokens": [50364, 370, 731, 11, 293, 437, 307, 309, 436, 360, 11, 731, 11, 436, 360, 5102, 14324, 11, 370, 264, 700, 1823, 456, 307, 11, 50588], "temperature": 0.0, "avg_logprob": -0.1499434977161641, "compression_ratio": 1.8177339901477831, "no_speech_prob": 0.024338776245713234}, {"id": 513, "seek": 323788, "start": 3242.36, "end": 3248.92, "text": " let's actually let you declare a variable inside of this expression, you know,", "tokens": [50588, 718, 311, 767, 718, 291, 19710, 257, 7006, 1854, 295, 341, 6114, 11, 291, 458, 11, 50916], "temperature": 0.0, "avg_logprob": -0.1499434977161641, "compression_ratio": 1.8177339901477831, "no_speech_prob": 0.024338776245713234}, {"id": 514, "seek": 323788, "start": 3249.48, "end": 3254.76, "text": " after this expression, that's actually let you put a variable name, and say, okay, I just checked,", "tokens": [50944, 934, 341, 6114, 11, 300, 311, 767, 718, 291, 829, 257, 7006, 1315, 11, 293, 584, 11, 1392, 11, 286, 445, 10033, 11, 51208], "temperature": 0.0, "avg_logprob": -0.1499434977161641, "compression_ratio": 1.8177339901477831, "no_speech_prob": 0.024338776245713234}, {"id": 515, "seek": 323788, "start": 3254.76, "end": 3260.76, "text": " can I just get a name for that, can I get a receipt, and you use that throughout here, and that is", "tokens": [51208, 393, 286, 445, 483, 257, 1315, 337, 300, 11, 393, 286, 483, 257, 33882, 11, 293, 291, 764, 300, 3710, 510, 11, 293, 300, 307, 51508], "temperature": 0.0, "avg_logprob": -0.1499434977161641, "compression_ratio": 1.8177339901477831, "no_speech_prob": 0.024338776245713234}, {"id": 516, "seek": 326076, "start": 3260.76, "end": 3267.48, "text": " your P typed a student with its own name, and now we can, we can, you know, we're not dying", "tokens": [50364, 428, 430, 33941, 257, 3107, 365, 1080, 1065, 1315, 11, 293, 586, 321, 393, 11, 321, 393, 11, 291, 458, 11, 321, 434, 406, 8639, 50700], "temperature": 0.0, "avg_logprob": -0.20252425095130658, "compression_ratio": 1.6057142857142856, "no_speech_prob": 0.07553256303071976}, {"id": 517, "seek": 326076, "start": 3267.48, "end": 3277.5600000000004, "text": " inside anymore, if I can, at least if I can, what, oh no, what's that, yes, it was the wrong", "tokens": [50700, 1854, 3602, 11, 498, 286, 393, 11, 412, 1935, 498, 286, 393, 11, 437, 11, 1954, 572, 11, 437, 311, 300, 11, 2086, 11, 309, 390, 264, 2085, 51204], "temperature": 0.0, "avg_logprob": -0.20252425095130658, "compression_ratio": 1.6057142857142856, "no_speech_prob": 0.07553256303071976}, {"id": 518, "seek": 326076, "start": 3277.5600000000004, "end": 3289.4, "text": " province, no, yes, thank you, thank you, I'm code blind, thank god I only have six minutes left,", "tokens": [51204, 16705, 11, 572, 11, 2086, 11, 1309, 291, 11, 1309, 291, 11, 286, 478, 3089, 6865, 11, 1309, 3044, 286, 787, 362, 2309, 2077, 1411, 11, 51796], "temperature": 0.0, "avg_logprob": -0.20252425095130658, "compression_ratio": 1.6057142857142856, "no_speech_prob": 0.07553256303071976}, {"id": 519, "seek": 328940, "start": 3289.48, "end": 3295.2400000000002, "text": " oh my god, I only have six minutes left, so what we're getting into is pattern matching,", "tokens": [50368, 1954, 452, 3044, 11, 286, 787, 362, 2309, 2077, 1411, 11, 370, 437, 321, 434, 1242, 666, 307, 5102, 14324, 11, 50656], "temperature": 0.0, "avg_logprob": -0.09670498791862936, "compression_ratio": 1.7318007662835249, "no_speech_prob": 0.0037049418315291405}, {"id": 520, "seek": 328940, "start": 3295.2400000000002, "end": 3299.56, "text": " and pattern matching is this whole new concept that we're adding to C-sharp at this point,", "tokens": [50656, 293, 5102, 14324, 307, 341, 1379, 777, 3410, 300, 321, 434, 5127, 281, 383, 12, 2716, 6529, 412, 341, 935, 11, 50872], "temperature": 0.0, "avg_logprob": -0.09670498791862936, "compression_ratio": 1.7318007662835249, "no_speech_prob": 0.0037049418315291405}, {"id": 521, "seek": 328940, "start": 3299.56, "end": 3305.96, "text": " but it's not new in the global sense, it's a well-trodden path in functional programming,", "tokens": [50872, 457, 309, 311, 406, 777, 294, 264, 4338, 2020, 11, 309, 311, 257, 731, 12, 83, 11452, 1556, 3100, 294, 11745, 9410, 11, 51192], "temperature": 0.0, "avg_logprob": -0.09670498791862936, "compression_ratio": 1.7318007662835249, "no_speech_prob": 0.0037049418315291405}, {"id": 522, "seek": 328940, "start": 3305.96, "end": 3311.32, "text": " we just have to adapt it to an object-oriented context, and this is a pattern, a pattern is", "tokens": [51192, 321, 445, 362, 281, 6231, 309, 281, 364, 2657, 12, 27414, 4319, 11, 293, 341, 307, 257, 5102, 11, 257, 5102, 307, 51460], "temperature": 0.0, "avg_logprob": -0.09670498791862936, "compression_ratio": 1.7318007662835249, "no_speech_prob": 0.0037049418315291405}, {"id": 523, "seek": 328940, "start": 3311.32, "end": 3317.7200000000003, "text": " something that can either succeed or not when you apply it to a value, and if it succeeds,", "tokens": [51460, 746, 300, 393, 2139, 7754, 420, 406, 562, 291, 3079, 309, 281, 257, 2158, 11, 293, 498, 309, 49263, 11, 51780], "temperature": 0.0, "avg_logprob": -0.09670498791862936, "compression_ratio": 1.7318007662835249, "no_speech_prob": 0.0037049418315291405}, {"id": 524, "seek": 331772, "start": 3317.72, "end": 3322.12, "text": " it can extract some extra information and put it in variables for you, that's what a pattern is,", "tokens": [50364, 309, 393, 8947, 512, 2857, 1589, 293, 829, 309, 294, 9102, 337, 291, 11, 300, 311, 437, 257, 5102, 307, 11, 50584], "temperature": 0.0, "avg_logprob": -0.08075177422885237, "compression_ratio": 1.8355704697986577, "no_speech_prob": 0.0010966997360810637}, {"id": 525, "seek": 331772, "start": 3322.12, "end": 3326.4399999999996, "text": " and we have a few patterns from the beginning in C-sharp 7, and then we start adding some more", "tokens": [50584, 293, 321, 362, 257, 1326, 8294, 490, 264, 2863, 294, 383, 12, 2716, 6529, 1614, 11, 293, 550, 321, 722, 5127, 512, 544, 50800], "temperature": 0.0, "avg_logprob": -0.08075177422885237, "compression_ratio": 1.8355704697986577, "no_speech_prob": 0.0010966997360810637}, {"id": 526, "seek": 331772, "start": 3326.4399999999996, "end": 3330.8399999999997, "text": " along the way, and we keep, we're still adding patterns to this date, like C-sharp 11 has", "tokens": [50800, 2051, 264, 636, 11, 293, 321, 1066, 11, 321, 434, 920, 5127, 8294, 281, 341, 4002, 11, 411, 383, 12, 2716, 6529, 2975, 575, 51020], "temperature": 0.0, "avg_logprob": -0.08075177422885237, "compression_ratio": 1.8355704697986577, "no_speech_prob": 0.0010966997360810637}, {"id": 527, "seek": 331772, "start": 3330.8399999999997, "end": 3333.8799999999997, "text": " list patterns, which you will, if you go to the other talk, you'll get to see those,", "tokens": [51020, 1329, 8294, 11, 597, 291, 486, 11, 498, 291, 352, 281, 264, 661, 751, 11, 291, 603, 483, 281, 536, 729, 11, 51172], "temperature": 0.0, "avg_logprob": -0.08075177422885237, "compression_ratio": 1.8355704697986577, "no_speech_prob": 0.0010966997360810637}, {"id": 528, "seek": 331772, "start": 3335.16, "end": 3340.52, "text": " but it's still like the shape of the code, like we solved the micro problem, but the larger problem", "tokens": [51236, 457, 309, 311, 920, 411, 264, 3909, 295, 264, 3089, 11, 411, 321, 13041, 264, 4532, 1154, 11, 457, 264, 4833, 1154, 51504], "temperature": 0.0, "avg_logprob": -0.08075177422885237, "compression_ratio": 1.8355704697986577, "no_speech_prob": 0.0010966997360810637}, {"id": 529, "seek": 331772, "start": 3340.52, "end": 3343.7999999999997, "text": " of if, you know, having a very imperative way of checking, that's also very like", "tokens": [51504, 295, 498, 11, 291, 458, 11, 1419, 257, 588, 32490, 636, 295, 8568, 11, 300, 311, 611, 588, 411, 51668], "temperature": 0.0, "avg_logprob": -0.08075177422885237, "compression_ratio": 1.8355704697986577, "no_speech_prob": 0.0010966997360810637}, {"id": 530, "seek": 334380, "start": 3344.6800000000003, "end": 3351.4, "text": " a kind of fraud with danger in terms of maintenance and so on, what we want along with pattern", "tokens": [50408, 257, 733, 295, 14560, 365, 4330, 294, 2115, 295, 11258, 293, 370, 322, 11, 437, 321, 528, 2051, 365, 5102, 50744], "temperature": 0.0, "avg_logprob": -0.14287473800334524, "compression_ratio": 1.7188940092165899, "no_speech_prob": 0.0013039932819083333}, {"id": 531, "seek": 334380, "start": 3351.4, "end": 3357.32, "text": " matching is we want what functional programming often calls matching, pattern matching,", "tokens": [50744, 14324, 307, 321, 528, 437, 11745, 9410, 2049, 5498, 14324, 11, 5102, 14324, 11, 51040], "temperature": 0.0, "avg_logprob": -0.14287473800334524, "compression_ratio": 1.7188940092165899, "no_speech_prob": 0.0013039932819083333}, {"id": 532, "seek": 334380, "start": 3358.44, "end": 3363.96, "text": " we have a keyword already called switch, so we're using that one, so let me go and just, you know,", "tokens": [51096, 321, 362, 257, 20428, 1217, 1219, 3679, 11, 370, 321, 434, 1228, 300, 472, 11, 370, 718, 385, 352, 293, 445, 11, 291, 458, 11, 51372], "temperature": 0.0, "avg_logprob": -0.14287473800334524, "compression_ratio": 1.7188940092165899, "no_speech_prob": 0.0013039932819083333}, {"id": 533, "seek": 334380, "start": 3363.96, "end": 3372.04, "text": " do this again, so I'm gonna do it in a functional way, let's just, we can comment this out,", "tokens": [51372, 360, 341, 797, 11, 370, 286, 478, 799, 360, 309, 294, 257, 11745, 636, 11, 718, 311, 445, 11, 321, 393, 2871, 341, 484, 11, 51776], "temperature": 0.0, "avg_logprob": -0.14287473800334524, "compression_ratio": 1.7188940092165899, "no_speech_prob": 0.0013039932819083333}, {"id": 534, "seek": 337204, "start": 3373.0, "end": 3378.6, "text": " so we're gonna do just an expression body, we're gonna take the person, and we're gonna switch", "tokens": [50412, 370, 321, 434, 799, 360, 445, 364, 6114, 1772, 11, 321, 434, 799, 747, 264, 954, 11, 293, 321, 434, 799, 3679, 50692], "temperature": 0.0, "avg_logprob": -0.08484626585437406, "compression_ratio": 1.8503937007874016, "no_speech_prob": 0.002470615552738309}, {"id": 535, "seek": 337204, "start": 3378.6, "end": 3385.48, "text": " on them, but not with an old-fashioned clunky switch statement from C in the early 60s that", "tokens": [50692, 322, 552, 11, 457, 406, 365, 364, 1331, 12, 37998, 596, 25837, 3679, 5629, 490, 383, 294, 264, 2440, 4060, 82, 300, 51036], "temperature": 0.0, "avg_logprob": -0.08484626585437406, "compression_ratio": 1.8503937007874016, "no_speech_prob": 0.002470615552738309}, {"id": 536, "seek": 337204, "start": 3385.48, "end": 3389.72, "text": " we have in C-sharp, but with a switch expression, you know, like the cool kids, so this is an", "tokens": [51036, 321, 362, 294, 383, 12, 2716, 6529, 11, 457, 365, 257, 3679, 6114, 11, 291, 458, 11, 411, 264, 1627, 2301, 11, 370, 341, 307, 364, 51248], "temperature": 0.0, "avg_logprob": -0.08484626585437406, "compression_ratio": 1.8503937007874016, "no_speech_prob": 0.002470615552738309}, {"id": 537, "seek": 337204, "start": 3389.72, "end": 3394.92, "text": " expression body, that's a switch expression, it's empty right now, that's actually okay,", "tokens": [51248, 6114, 1772, 11, 300, 311, 257, 3679, 6114, 11, 309, 311, 6707, 558, 586, 11, 300, 311, 767, 1392, 11, 51508], "temperature": 0.0, "avg_logprob": -0.08484626585437406, "compression_ratio": 1.8503937007874016, "no_speech_prob": 0.002470615552738309}, {"id": 538, "seek": 337204, "start": 3394.92, "end": 3398.6, "text": " but you get a warning saying you're not handling all the different kinds of input, yeah, okay, thank", "tokens": [51508, 457, 291, 483, 257, 9164, 1566, 291, 434, 406, 13175, 439, 264, 819, 3685, 295, 4846, 11, 1338, 11, 1392, 11, 1309, 51692], "temperature": 0.0, "avg_logprob": -0.08484626585437406, "compression_ratio": 1.8503937007874016, "no_speech_prob": 0.002470615552738309}, {"id": 539, "seek": 339860, "start": 3398.6, "end": 3406.2, "text": " you, so and now we can write patterns directly here, student S, arrow, and now we can just", "tokens": [50364, 291, 11, 370, 293, 586, 321, 393, 2464, 8294, 3838, 510, 11, 3107, 318, 11, 11610, 11, 293, 586, 321, 393, 445, 50744], "temperature": 0.0, "avg_logprob": -0.12976589798927307, "compression_ratio": 1.7089201877934272, "no_speech_prob": 0.0002164315665140748}, {"id": 540, "seek": 339860, "start": 3406.2, "end": 3413.16, "text": " put an expression for the result that you want in case it is a student, right, so I can, I now", "tokens": [50744, 829, 364, 6114, 337, 264, 1874, 300, 291, 528, 294, 1389, 309, 307, 257, 3107, 11, 558, 11, 370, 286, 393, 11, 286, 586, 51092], "temperature": 0.0, "avg_logprob": -0.12976589798927307, "compression_ratio": 1.7089201877934272, "no_speech_prob": 0.0002164315665140748}, {"id": 541, "seek": 339860, "start": 3413.16, "end": 3418.7599999999998, "text": " have like a clean structure within which I can just list comma separated patterns and results,", "tokens": [51092, 362, 411, 257, 2541, 3877, 1951, 597, 286, 393, 445, 1329, 22117, 12005, 8294, 293, 3542, 11, 51372], "temperature": 0.0, "avg_logprob": -0.12976589798927307, "compression_ratio": 1.7089201877934272, "no_speech_prob": 0.0002164315665140748}, {"id": 542, "seek": 339860, "start": 3420.36, "end": 3426.44, "text": " and I, right now I only need the two, so we're gonna take, we're gonna just do this", "tokens": [51452, 293, 286, 11, 558, 586, 286, 787, 643, 264, 732, 11, 370, 321, 434, 799, 747, 11, 321, 434, 799, 445, 360, 341, 51756], "temperature": 0.0, "avg_logprob": -0.12976589798927307, "compression_ratio": 1.7089201877934272, "no_speech_prob": 0.0002164315665140748}, {"id": 543, "seek": 342644, "start": 3427.08, "end": 3434.92, "text": " for now, and then just quickly touch on the fact that patterns can be, pattern matching", "tokens": [50396, 337, 586, 11, 293, 550, 445, 2661, 2557, 322, 264, 1186, 300, 8294, 393, 312, 11, 5102, 14324, 50788], "temperature": 0.0, "avg_logprob": -0.11747780968161191, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.0006770284962840378}, {"id": 544, "seek": 342644, "start": 3434.92, "end": 3439.4, "text": " is smarter, right, we saw that it said that you were not handling all the cases, it still did that", "tokens": [50788, 307, 20294, 11, 558, 11, 321, 1866, 300, 309, 848, 300, 291, 645, 406, 13175, 439, 264, 3331, 11, 309, 920, 630, 300, 51012], "temperature": 0.0, "avg_logprob": -0.11747780968161191, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.0006770284962840378}, {"id": 545, "seek": 342644, "start": 3439.4, "end": 3444.6, "text": " when we only had the, when we only had the student, but when I do a catch-all, which I can do with a", "tokens": [51012, 562, 321, 787, 632, 264, 11, 562, 321, 787, 632, 264, 3107, 11, 457, 562, 286, 360, 257, 3745, 12, 336, 11, 597, 286, 393, 360, 365, 257, 51272], "temperature": 0.0, "avg_logprob": -0.11747780968161191, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.0006770284962840378}, {"id": 546, "seek": 342644, "start": 3445.4, "end": 3451.48, "text": " fancy modern discard, then it says, hey, you're handling everything, you're good, no more warning,", "tokens": [51312, 10247, 4363, 31597, 11, 550, 309, 1619, 11, 4177, 11, 291, 434, 13175, 1203, 11, 291, 434, 665, 11, 572, 544, 9164, 11, 51616], "temperature": 0.0, "avg_logprob": -0.11747780968161191, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.0006770284962840378}, {"id": 547, "seek": 345148, "start": 3452.28, "end": 3456.2, "text": " well, what if I go the other way, like let's just, let's just swap the order of these two,", "tokens": [50404, 731, 11, 437, 498, 286, 352, 264, 661, 636, 11, 411, 718, 311, 445, 11, 718, 311, 445, 18135, 264, 1668, 295, 613, 732, 11, 50600], "temperature": 0.0, "avg_logprob": -0.10805145142570374, "compression_ratio": 1.7786259541984732, "no_speech_prob": 0.005299276206642389}, {"id": 548, "seek": 345148, "start": 3456.2, "end": 3460.52, "text": " they are in order, then I actually get an error saying, hey, you handled, you handled this case", "tokens": [50600, 436, 366, 294, 1668, 11, 550, 286, 767, 483, 364, 6713, 1566, 11, 4177, 11, 291, 18033, 11, 291, 18033, 341, 1389, 50816], "temperature": 0.0, "avg_logprob": -0.10805145142570374, "compression_ratio": 1.7786259541984732, "no_speech_prob": 0.005299276206642389}, {"id": 549, "seek": 345148, "start": 3460.52, "end": 3466.6, "text": " already, so, so you can see how maintenance of these things becomes much, not only is it clear", "tokens": [50816, 1217, 11, 370, 11, 370, 291, 393, 536, 577, 11258, 295, 613, 721, 3643, 709, 11, 406, 787, 307, 309, 1850, 51120], "temperature": 0.0, "avg_logprob": -0.10805145142570374, "compression_ratio": 1.7786259541984732, "no_speech_prob": 0.005299276206642389}, {"id": 550, "seek": 345148, "start": 3466.6, "end": 3471.96, "text": " to read, but the compiler is helping you much more, keep your logic straight, so it's beautiful,", "tokens": [51120, 281, 1401, 11, 457, 264, 31958, 307, 4315, 291, 709, 544, 11, 1066, 428, 9952, 2997, 11, 370, 309, 311, 2238, 11, 51388], "temperature": 0.0, "avg_logprob": -0.10805145142570374, "compression_ratio": 1.7786259541984732, "no_speech_prob": 0.005299276206642389}, {"id": 551, "seek": 345148, "start": 3471.96, "end": 3479.0, "text": " and it's safe, that sounds like functional to me, so, so you can do that, but you know,", "tokens": [51388, 293, 309, 311, 3273, 11, 300, 3263, 411, 11745, 281, 385, 11, 370, 11, 370, 291, 393, 360, 300, 11, 457, 291, 458, 11, 51740], "temperature": 0.0, "avg_logprob": -0.10805145142570374, "compression_ratio": 1.7786259541984732, "no_speech_prob": 0.005299276206642389}, {"id": 552, "seek": 347900, "start": 3479.88, "end": 3483.4, "text": " you're noticing, I'm actually writing out just the first letter of the first name,", "tokens": [50408, 291, 434, 21814, 11, 286, 478, 767, 3579, 484, 445, 264, 700, 5063, 295, 264, 700, 1315, 11, 50584], "temperature": 0.0, "avg_logprob": -0.08647912098811222, "compression_ratio": 1.8943089430894309, "no_speech_prob": 0.002047012560069561}, {"id": 553, "seek": 347900, "start": 3483.4, "end": 3490.6, "text": " and in this case here, actually, what if the, what if the first name is empty, I'm not going to", "tokens": [50584, 293, 294, 341, 1389, 510, 11, 767, 11, 437, 498, 264, 11, 437, 498, 264, 700, 1315, 307, 6707, 11, 286, 478, 406, 516, 281, 50944], "temperature": 0.0, "avg_logprob": -0.08647912098811222, "compression_ratio": 1.8943089430894309, "no_speech_prob": 0.002047012560069561}, {"id": 554, "seek": 347900, "start": 3490.6, "end": 3494.6, "text": " talk about null right now, that's a whole nother talk, but what if it's empty, that's kind of,", "tokens": [50944, 751, 466, 18184, 558, 586, 11, 300, 311, 257, 1379, 406, 511, 751, 11, 457, 437, 498, 309, 311, 6707, 11, 300, 311, 733, 295, 11, 51144], "temperature": 0.0, "avg_logprob": -0.08647912098811222, "compression_ratio": 1.8943089430894309, "no_speech_prob": 0.002047012560069561}, {"id": 555, "seek": 347900, "start": 3494.6, "end": 3499.56, "text": " you know, I should probably do something else if it's empty, so let's, let's use, just to show", "tokens": [51144, 291, 458, 11, 286, 820, 1391, 360, 746, 1646, 498, 309, 311, 6707, 11, 370, 718, 311, 11, 718, 311, 764, 11, 445, 281, 855, 51392], "temperature": 0.0, "avg_logprob": -0.08647912098811222, "compression_ratio": 1.8943089430894309, "no_speech_prob": 0.002047012560069561}, {"id": 556, "seek": 347900, "start": 3499.56, "end": 3504.36, "text": " an example of a recursive pattern, I know now that it's just a person, but what if the first name", "tokens": [51392, 364, 1365, 295, 257, 20560, 488, 5102, 11, 286, 458, 586, 300, 309, 311, 445, 257, 954, 11, 457, 437, 498, 264, 700, 1315, 51632], "temperature": 0.0, "avg_logprob": -0.08647912098811222, "compression_ratio": 1.8943089430894309, "no_speech_prob": 0.002047012560069561}, {"id": 557, "seek": 350436, "start": 3505.32, "end": 3511.7200000000003, "text": " of that person actually is an empty string, I want to do something else, and I just want", "tokens": [50412, 295, 300, 954, 767, 307, 364, 6707, 6798, 11, 286, 528, 281, 360, 746, 1646, 11, 293, 286, 445, 528, 50732], "temperature": 0.0, "avg_logprob": -0.11964791950426604, "compression_ratio": 1.7089201877934272, "no_speech_prob": 0.0043962993659079075}, {"id": 558, "seek": 350436, "start": 3511.7200000000003, "end": 3515.56, "text": " to write out the last name, I don't want to, like, do the whole abbreviation thing,", "tokens": [50732, 281, 2464, 484, 264, 1036, 1315, 11, 286, 500, 380, 528, 281, 11, 411, 11, 360, 264, 1379, 35839, 399, 551, 11, 50924], "temperature": 0.0, "avg_logprob": -0.11964791950426604, "compression_ratio": 1.7089201877934272, "no_speech_prob": 0.0043962993659079075}, {"id": 559, "seek": 350436, "start": 3517.88, "end": 3527.6400000000003, "text": " p dot last name, or, you know, I could actually, so this is a property pattern, I can dig out", "tokens": [51040, 280, 5893, 1036, 1315, 11, 420, 11, 291, 458, 11, 286, 727, 767, 11, 370, 341, 307, 257, 4707, 5102, 11, 286, 393, 2528, 484, 51528], "temperature": 0.0, "avg_logprob": -0.11964791950426604, "compression_ratio": 1.7089201877934272, "no_speech_prob": 0.0043962993659079075}, {"id": 560, "seek": 350436, "start": 3527.6400000000003, "end": 3531.7200000000003, "text": " specific properties inside of the pattern and recursively apply a pattern, here I'm just applying", "tokens": [51528, 2685, 7221, 1854, 295, 264, 5102, 293, 20560, 3413, 3079, 257, 5102, 11, 510, 286, 478, 445, 9275, 51732], "temperature": 0.0, "avg_logprob": -0.11964791950426604, "compression_ratio": 1.7089201877934272, "no_speech_prob": 0.0043962993659079075}, {"id": 561, "seek": 353172, "start": 3531.72, "end": 3538.3599999999997, "text": " the pattern, I use this constant, but I could also say last name, colon, and then apply a var", "tokens": [50364, 264, 5102, 11, 286, 764, 341, 5754, 11, 457, 286, 727, 611, 584, 1036, 1315, 11, 8255, 11, 293, 550, 3079, 257, 1374, 50696], "temperature": 0.0, "avg_logprob": -0.08751373291015625, "compression_ratio": 1.8682926829268294, "no_speech_prob": 0.006793871987611055}, {"id": 562, "seek": 353172, "start": 3538.3599999999997, "end": 3544.12, "text": " pattern, which always succeeds, but which will give you a name, so that's your let, that's your", "tokens": [50696, 5102, 11, 597, 1009, 49263, 11, 457, 597, 486, 976, 291, 257, 1315, 11, 370, 300, 311, 428, 718, 11, 300, 311, 428, 50984], "temperature": 0.0, "avg_logprob": -0.08751373291015625, "compression_ratio": 1.8682926829268294, "no_speech_prob": 0.006793871987611055}, {"id": 563, "seek": 353172, "start": 3544.12, "end": 3552.2799999999997, "text": " pattern let, it's the var pattern, and then instead of saying p dot last name here, I already dug", "tokens": [50984, 5102, 718, 11, 309, 311, 264, 1374, 5102, 11, 293, 550, 2602, 295, 1566, 280, 5893, 1036, 1315, 510, 11, 286, 1217, 22954, 51392], "temperature": 0.0, "avg_logprob": -0.08751373291015625, "compression_ratio": 1.8682926829268294, "no_speech_prob": 0.006793871987611055}, {"id": 564, "seek": 353172, "start": 3552.2799999999997, "end": 3558.3599999999997, "text": " out the last name and I gave it a name, so I can just say l here, so, and these things compose,", "tokens": [51392, 484, 264, 1036, 1315, 293, 286, 2729, 309, 257, 1315, 11, 370, 286, 393, 445, 584, 287, 510, 11, 370, 11, 293, 613, 721, 35925, 11, 51696], "temperature": 0.0, "avg_logprob": -0.08751373291015625, "compression_ratio": 1.8682926829268294, "no_speech_prob": 0.006793871987611055}, {"id": 565, "seek": 355836, "start": 3558.36, "end": 3564.1200000000003, "text": " you know, if I wanted the actual, if I wanted a new name for the the person object itself,", "tokens": [50364, 291, 458, 11, 498, 286, 1415, 264, 3539, 11, 498, 286, 1415, 257, 777, 1315, 337, 264, 264, 954, 2657, 2564, 11, 50652], "temperature": 0.0, "avg_logprob": -0.09545148412386577, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.005294059403240681}, {"id": 566, "seek": 355836, "start": 3564.1200000000003, "end": 3570.52, "text": " I could put it here, let's call it p2 or whatever, so, so patterns kind of compose, and over time", "tokens": [50652, 286, 727, 829, 309, 510, 11, 718, 311, 818, 309, 280, 17, 420, 2035, 11, 370, 11, 370, 8294, 733, 295, 35925, 11, 293, 670, 565, 50972], "temperature": 0.0, "avg_logprob": -0.09545148412386577, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.005294059403240681}, {"id": 567, "seek": 355836, "start": 3570.52, "end": 3576.84, "text": " we've added more and more kinds of them, that essentially make them more and more expressive,", "tokens": [50972, 321, 600, 3869, 544, 293, 544, 3685, 295, 552, 11, 300, 4476, 652, 552, 544, 293, 544, 40189, 11, 51288], "temperature": 0.0, "avg_logprob": -0.09545148412386577, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.005294059403240681}, {"id": 568, "seek": 355836, "start": 3576.84, "end": 3583.1600000000003, "text": " and allow you to put more and more of your logic into patterns, so that your shape dependent", "tokens": [51288, 293, 2089, 291, 281, 829, 544, 293, 544, 295, 428, 9952, 666, 8294, 11, 370, 300, 428, 3909, 12334, 51604], "temperature": 0.0, "avg_logprob": -0.09545148412386577, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.005294059403240681}, {"id": 569, "seek": 358316, "start": 3584.04, "end": 3593.3199999999997, "text": " code is now as beautiful, or some would say even more, I don't, but, you know, it's a great", "tokens": [50408, 3089, 307, 586, 382, 2238, 11, 420, 512, 576, 584, 754, 544, 11, 286, 500, 380, 11, 457, 11, 291, 458, 11, 309, 311, 257, 869, 50872], "temperature": 0.0, "avg_logprob": -0.10332181194041035, "compression_ratio": 1.6981981981981982, "no_speech_prob": 0.006175234913825989}, {"id": 570, "seek": 358316, "start": 3593.3199999999997, "end": 3598.2, "text": " beautiful first-class alternative to virtual methods, when you, when describing the functionality", "tokens": [50872, 2238, 700, 12, 11665, 8535, 281, 6374, 7150, 11, 562, 291, 11, 562, 16141, 264, 14980, 51116], "temperature": 0.0, "avg_logprob": -0.10332181194041035, "compression_ratio": 1.6981981981981982, "no_speech_prob": 0.006175234913825989}, {"id": 571, "seek": 358316, "start": 3598.2, "end": 3604.68, "text": " on the outside is what you want to do, you do pay something, you pay the fact that you can't", "tokens": [51116, 322, 264, 2380, 307, 437, 291, 528, 281, 360, 11, 291, 360, 1689, 746, 11, 291, 1689, 264, 1186, 300, 291, 393, 380, 51440], "temperature": 0.0, "avg_logprob": -0.10332181194041035, "compression_ratio": 1.6981981981981982, "no_speech_prob": 0.006175234913825989}, {"id": 572, "seek": 358316, "start": 3604.68, "end": 3609.3199999999997, "text": " willy-nilly add new types, you pay the fact that your data has to be public, so that it can be", "tokens": [51440, 486, 88, 12, 77, 6917, 909, 777, 3467, 11, 291, 1689, 264, 1186, 300, 428, 1412, 575, 281, 312, 1908, 11, 370, 300, 309, 393, 312, 51672], "temperature": 0.0, "avg_logprob": -0.10332181194041035, "compression_ratio": 1.6981981981981982, "no_speech_prob": 0.006175234913825989}, {"id": 573, "seek": 360932, "start": 3609.32, "end": 3614.04, "text": " operated on from the outside, so encapsulation is at the window, but you get this other beauty,", "tokens": [50364, 20826, 322, 490, 264, 2380, 11, 370, 38745, 2776, 307, 412, 264, 4910, 11, 457, 291, 483, 341, 661, 6643, 11, 50600], "temperature": 0.0, "avg_logprob": -0.14905726432800293, "compression_ratio": 1.6565217391304348, "no_speech_prob": 0.0036430321633815765}, {"id": 574, "seek": 360932, "start": 3614.04, "end": 3618.52, "text": " so, you know, pick your poison, depending on the scenario, now you have both obstinacy sharp,", "tokens": [50600, 370, 11, 291, 458, 11, 1888, 428, 10836, 11, 5413, 322, 264, 9005, 11, 586, 291, 362, 1293, 9579, 259, 2551, 8199, 11, 50824], "temperature": 0.0, "avg_logprob": -0.14905726432800293, "compression_ratio": 1.6565217391304348, "no_speech_prob": 0.0036430321633815765}, {"id": 575, "seek": 360932, "start": 3619.8, "end": 3629.4, "text": " and I also wanted to mention immutability, but I just did, we did work for immutability, first", "tokens": [50888, 293, 286, 611, 1415, 281, 2152, 3397, 325, 2310, 11, 457, 286, 445, 630, 11, 321, 630, 589, 337, 3397, 325, 2310, 11, 700, 51368], "temperature": 0.0, "avg_logprob": -0.14905726432800293, "compression_ratio": 1.6565217391304348, "no_speech_prob": 0.0036430321633815765}, {"id": 576, "seek": 360932, "start": 3629.4, "end": 3635.48, "text": " we let you have auto properties without setters, but that wasn't so good for the, for the object", "tokens": [51368, 321, 718, 291, 362, 8399, 7221, 1553, 992, 1559, 11, 457, 300, 2067, 380, 370, 665, 337, 264, 11, 337, 264, 2657, 51672], "temperature": 0.0, "avg_logprob": -0.14905726432800293, "compression_ratio": 1.6565217391304348, "no_speech_prob": 0.0036430321633815765}, {"id": 577, "seek": 363548, "start": 3635.48, "end": 3642.2, "text": " initializers, now there's a more, now you have a new kind of setter, it's called an initter,", "tokens": [50364, 5883, 22525, 11, 586, 456, 311, 257, 544, 11, 586, 291, 362, 257, 777, 733, 295, 992, 391, 11, 309, 311, 1219, 364, 3157, 391, 11, 50700], "temperature": 0.0, "avg_logprob": -0.11069072022729991, "compression_ratio": 1.780373831775701, "no_speech_prob": 0.012406098656356335}, {"id": 578, "seek": 363548, "start": 3642.2, "end": 3646.36, "text": " which is the setter that can only be called from object initializers, and now, so that means we", "tokens": [50700, 597, 307, 264, 992, 391, 300, 393, 787, 312, 1219, 490, 2657, 5883, 22525, 11, 293, 586, 11, 370, 300, 1355, 321, 50908], "temperature": 0.0, "avg_logprob": -0.11069072022729991, "compression_ratio": 1.780373831775701, "no_speech_prob": 0.012406098656356335}, {"id": 579, "seek": 363548, "start": 3646.36, "end": 3651.08, "text": " made immutable objects more first-class, you don't need to initialize them with constructors, you", "tokens": [50908, 1027, 3397, 32148, 6565, 544, 700, 12, 11665, 11, 291, 500, 380, 643, 281, 5883, 1125, 552, 365, 7690, 830, 11, 291, 51144], "temperature": 0.0, "avg_logprob": -0.11069072022729991, "compression_ratio": 1.780373831775701, "no_speech_prob": 0.012406098656356335}, {"id": 580, "seek": 363548, "start": 3651.08, "end": 3655.2400000000002, "text": " can use object initializers for those as well, immutability is another functional concept that", "tokens": [51144, 393, 764, 2657, 5883, 22525, 337, 729, 382, 731, 11, 3397, 325, 2310, 307, 1071, 11745, 3410, 300, 51352], "temperature": 0.0, "avg_logprob": -0.11069072022729991, "compression_ratio": 1.780373831775701, "no_speech_prob": 0.012406098656356335}, {"id": 581, "seek": 365524, "start": 3656.12, "end": 3664.2799999999997, "text": " we're starting to support more, so I'm going to stop here in the C-sharp 7s,", "tokens": [50408, 321, 434, 2891, 281, 1406, 544, 11, 370, 286, 478, 516, 281, 1590, 510, 294, 264, 383, 12, 2716, 6529, 1614, 82, 11, 50816], "temperature": 0.0, "avg_logprob": -0.20146720939212376, "compression_ratio": 1.4878048780487805, "no_speech_prob": 0.14355793595314026}, {"id": 582, "seek": 365524, "start": 3665.9599999999996, "end": 3670.2799999999997, "text": " and if you want to see some C-sharp 11 functional influence, you know, there's another talk,", "tokens": [50900, 293, 498, 291, 528, 281, 536, 512, 383, 12, 2716, 6529, 2975, 11745, 6503, 11, 291, 458, 11, 456, 311, 1071, 751, 11, 51116], "temperature": 0.0, "avg_logprob": -0.20146720939212376, "compression_ratio": 1.4878048780487805, "no_speech_prob": 0.14355793595314026}, {"id": 583, "seek": 365524, "start": 3670.2799999999997, "end": 3679.3199999999997, "text": " and just an hour and a half or whatever, and for now, thank you very much.", "tokens": [51116, 293, 445, 364, 1773, 293, 257, 1922, 420, 2035, 11, 293, 337, 586, 11, 1309, 291, 588, 709, 13, 51568], "temperature": 0.0, "avg_logprob": -0.20146720939212376, "compression_ratio": 1.4878048780487805, "no_speech_prob": 0.14355793595314026}, {"id": 584, "seek": 368524, "start": 3685.24, "end": 3686.52, "text": " you", "tokens": [50400, 291, 50428], "temperature": 0.0, "avg_logprob": -0.9490106105804443, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.8588672280311584}], "language": "en"}