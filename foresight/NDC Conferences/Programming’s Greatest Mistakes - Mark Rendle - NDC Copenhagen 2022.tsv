start	end	text
0	16720	It's wonderful to be here. Has everyone had a fantastic week? Yes. Excellent. Glad to
16720	23840	hear it. I would just like before I start to say thank you to Jacob and Kirstie and Steiner
23840	29760	and Henriette and all the volunteers, the people in the green t-shirts who've been
29760	34640	sort of marshalling the rooms and gathering the feedback and everything. There's a lot of work
34640	38800	that goes into these conferences. So can we have a round of applause for all the people who make
38800	51360	this happen? So I'm going to finish things off. You're all tired. It's been a long week. You've
51360	57600	got loads of information to process. And so I'm just going to basically share some very silly
57600	62880	stuff. There may accidentally be some lessons in there that you can learn. I apologize.
64960	72800	But this is all about some mistakes and the kind of mistakes that are made by software
72800	81120	developers and engineers. Before I start content warning, there is going to be swearing. I am going
81120	89280	to say, fuck, quite a lot just in the next segment, but it is relevant to the plot. So that
89280	94720	is justified. What I am not going to be talking about in this talk, because it's light hearted,
94720	100400	it's designed to make you laugh, I'm not going to be talking about any situations where software
100400	107440	errors have actually killed people. But software errors have killed people. So yeah, but there's
107440	113600	none of that in here. This is all just, it basically cost a lot of money for the most part
113600	126960	or cost me my job in what some cases. So yeah. And this is me. This was one of my biggest mistakes.
126960	132720	I worked for a software company and this was when I was in my 20s. I was young. I was arrogant. I
132800	137760	thought I was like a 10x developer and hot shit and all that sort of stuff. And I worked at this
137760	144320	company and also in my defense before we get into this, I was already spiraling into what would
144320	149520	eventually become a full on nervous breakdown. So I wasn't necessarily thinking straight.
150720	157760	Our company, we sold event management software and membership software and it was very complicated
157760	162880	and you could build these huge complicated queries across the database and you could save
162880	169040	those queries into a file so you could load them again the next day. And those files had a med
169040	175040	extension. I can't even remember what it stood for. But we called them med files. And we released
175040	181840	an update to the software and it corrupted. When you saved the med file, it corrupted it. And so
181840	189360	the support people came to me and they said, and I quote, Mark, the med files are fucked.
191120	199680	Can you write something to unfuck the med files? And so I went into Visual Studio and I did file
199680	206880	new project. And it said, what's the project name? And I went, oh, unfuck. And so I created this
207520	214400	little Windows application, Windows forms application and it displayed a dialog box
215040	223520	and it said, choose file to unfuck. And you clicked a button and it went off and you
223520	227120	browsed and you chose your file and then it had a button that said unfuck now.
229280	233840	And then it ran it through its thing. It did its thing. And then it displayed a message box
233840	242240	that said, med file successfully unfucked. Close. And it worked. Well, I thought it worked. But
242240	246400	you know, support had a bunch of support or also QA. It was that kind of company.
246400	254640	And so I gave the application which was called unfuck.exe to the support person who had reported
254640	258720	this to me and I went, can you test this out and make sure it works and then we can clean it up
258720	264240	and send it to the customer. I don't know if he tested it. I can't imagine that he did
265040	268560	because then without coming back to me, he shipped it to the customer.
274480	280560	And they ran it. And yeah, it doesn't look particularly. These are the kinds of customers
280560	285680	who are paying you half a million pounds a year on a sort of support subscription basis.
285680	290160	And we send them a file called unfuck.exe that says your file has been unfucked.
291040	298640	And at the time, I was in such a bad place mentally. I blamed the support guy for this
298640	304640	because I obviously got hauled across the coals for this. And I blamed the support guy for shipping
304640	310880	the thing. Whereas obviously it was actually my fault. I should never have created a program called
310880	318160	unfuck.exe. That was just not a good idea. It's okay to swear in comments as long as you're never
318160	325040	going to open source things, but don't actually put unfuck. On a slightly related note, by the way,
326160	335360	when I, very early in my career, did anyone, any Windows 3.1 veterans in the room? So Windows 3.1,
335440	341920	it was a file called win.com. And every message and every piece of text that could be displayed in
341920	347440	Windows was embedded in win.com just as text. And if you used a hex editor, you could open it up.
348400	356880	Interesting trivia. The phrase general protection fault has one more character than the phrase
356880	364160	Mongolian clusterfuck. And so if you put two spaces in the middle, you can edit someone's
364560	369280	win.com file and then you can run away. And then the next time that happens, they will get a message
369280	373520	box that says a Mongolian clusterfuck has occurred, which has caused your application to terminate.
378320	381760	One of the worst things about Windows 11 is you can't do that anymore.
383440	389200	Okay, let's talk about Y2K. Everyone knows about Y2K. That was probably one of the
389200	394800	biggest mistakes in software. But it wasn't that we let that happen in the first place. It was
394800	400240	really to do with how slow we were in fixing it. Because what you have to understand about the people
400240	406800	who wrote the code that then caused the Y2K problem was that this is what data was stored on
406800	414000	at the time, punch cards. So every column on there is basically a byte of information. And so those
414080	419760	extra two digits on the year would have been an extra two columns on there. Multiply that by
419760	426480	a million bank customers and a hundred million transactions a day. And those extra two columns
426480	432160	add up to a lot of extra punch cards and memory in those days. This was what memory looked like
432160	438000	in those days. This isn't under a microscope. This is just a photograph. That is core memory.
438080	445840	And it's lots of magnetic poles. And through each pole, two pieces of wire have been passed.
445840	454080	These were made by usually women with microscopes and needles. Memory in the 1950s was knitted.
455040	464800	And core memory cost about a dollar a bit. So a byte of memory would cost you eight dollars.
464800	470960	You think that means a kilobyte of memory would cost you eight thousand dollars.
470960	478720	So memory was really at a premium. And this is also incidentally why Unix still says core dump
478720	483520	to this day. It's because it was the core memory that was being dumped. And of course in those days
483520	489120	it was just a kilobyte. And it was quite easy to read through. So early programming languages like
489120	496320	COBOL, they didn't think in bytes. They thought in bits. And so this is the definition for a date
496320	506960	variable. And we say this is a string type variable. But the nine means it's a number character. And
506960	513120	so it can only be naught to nine or some of the other like hyphen and comma and dot and things
513120	519360	like that. So that would fit in six bits instead of eight bits, which meant you saved a couple of
519360	524240	dollars every time you were putting one of these things into memory. So it was quite reasonable
524240	534640	to shorten the date and only use the sort of decade and the year. This is, I've forgotten his name,
535600	544800	Bob Beamer. And Bob Beamer in 1954 was the guy going, I realize we have to do this, but as soon
544800	550720	as memory becomes cheaper, we really should change that to a pick eight, pick nine eight, because
550720	558240	this is going to cause a problem. 1954, he said that. In 1964, he started saying it with a little
558320	567680	bit more emphasis. In 1974, he started shouting about it. In 1984, he was giving talks at conferences
567680	576960	going, guys, we really, really need to fix this. In 1994, after Bob Beamer had retired, we actually
576960	584160	started work on fixing it. And by that time, all this software had carried on you. So you wrote
584240	589760	new bits of this software and you carried on using that. And so the effort to stop the Y2K bug
589760	595360	from happening was ridiculous. And it took an awful lot of people, an awful lot of time. But
595360	603520	we did it. And then the year 2000 came. And there were very few big computer crashes and no aeroplanes
603520	608640	fell out of the sky and all this other stuff. And the whole of the rest of the world went, well,
608720	615040	that Y2K thing was a lot of nonsense, wasn't it? What a fuss. And people like me who'd rewritten
615040	621120	COBOL systems in Informix 4GL to fix this went, no, you're welcome. Yeah, it's like, yeah, no,
621120	628960	it's thanks to me, your hospital still works. But no, Bob Beamer died in 2004. So we did actually
628960	635600	get to see the problem being fixed. But the estimated cost of fixing the Y2K bug goes from
635600	643760	some people say $300 million, some people say $800, no, $300 billion. Some people say $800
643760	649360	billion. So let's put it somewhere in the middle, we'll say it cost half a trillion dollars to fix
649360	655600	the Y2K bug. And you'd think we'd learn from that and we wouldn't set ourselves up for any other
655600	660880	Y2K bugs, particularly if you're like one of the biggest software engineering companies in the
660880	668640	world, you wouldn't put something into, say, your flagship email server that was going to break at a
668640	674960	no, no, no, no, Microsoft, this happened this year. A thing that Microsoft was storing in an
674960	680720	integer ticked over. I don't know what exactly what the number was. But suddenly we couldn't
680720	686880	convert this number to a long, because it was too big, and exchange servers all over the world,
686880	693600	including Office 365 just choked and died. And Microsoft had to hurriedly roll out a fix for
693600	703760	that. In the year 2038, there's the apocalypse is coming. Unix still stores the system date and
703760	711600	time as the number of seconds since January the 1st, 1970, in a signed 32-bit integer.
711680	718480	And that's going to crash in 2038. And you'd think, well, that's an easy fix. Change it to a 64-bit
718480	724480	integer. But no, they've patched it with an extra bit. So now they've got a 33-bit integer, which
724480	735280	kicks the can down the road until like the year 42 something. But you know, Linux going to Linux.
735280	742720	My favorite one of these, though, is the dog 38 bug that the Kennel Club of the United States of
742720	750480	America have. So the Kennel Club, your dogs are categorized by their pedigree breed. And then your
750480	756320	dog has a name. And it's one of those big, long show names. Like I have a pedigree dog and her,
756320	759760	I can't remember her show name. It's got something, sugar, cookie, something, something.
760720	767520	And so if they already have a dog with that name, which is obviously, you know, big country,
767520	773440	300 million people, lots of dogs, it happens. And so they number them. And so, yeah, one,
773440	779440	two, three, four, five, six, blah, blah, 37. And if you go to had a dog and there are already 37
779440	785760	dogs of that breed with that name, and so this is dog number 38, it crashes because it can't
785760	792240	write the number into the database. See if you can anyone guess how they're writing the number
792240	799760	into the database that would cause 37 and all the numbers up to 37 to be okay. And 38 suddenly
799760	810000	crashes. Roman numerals, they store the Roman numerals in a char six field. And every number up
810080	824240	to 38. So 38 is XXXV37, sorry, is XXXVII. All the numbers before that fit in fine,
824240	831760	but 38 is XXXVII. And this one, I really don't understand, it's going to the database,
831760	840400	change it to a char eight, or God forbid, an integer. And just format. Someone just went,
840400	846080	I can't write the algorithm to format a number as Roman numerals. Let's just store it as Roman
846080	851600	numerals. So yeah, that's fun. I would like to thank Stand Up Maths on YouTube, great channel,
851600	856240	and I found that one on there as I was writing this talk. So that was interesting.
857200	862960	A lot of this actually comes down to one of our biggest mistakes in programming, which is just
862960	869600	enterprise programming generally, enterprise software. It's just, you know, the processes and
869600	874880	the procedures and the waterfall and the project planning five years in advance and all this sort
874880	880320	of stuff. And it causes problems. And you can see the kinds of problems that it causes. So yes,
880320	888080	enterprise, a business plan or project, especially one that is difficult or may fail or lose money.
888080	893200	And everything in enterprise development is based around this. It's nothing to do with building
893200	897920	good software. It's nothing to do with working efficiently. It's all to do with covering your
897920	904080	ass so that when the thing goes wrong at the end of the day, you still get paid because you can
904080	912640	prove it was somebody else's fault, which is why you get agile development posters that look like
912640	919440	this. This is the scaled agile framework for enterprise. This is the simplified version.
920880	926880	There are worse versions than this. And you get things like this, autoscrum 1.1,
926880	933280	which is Accentures. This is still claiming to be agile. This is Accentures agile framework
933280	943440	that they use. And somewhere in there, we have a program backlog. We have a sprint right down
943440	950480	there. There's a daily scrum. And I think they've allocated some time for people to write code.
953920	954960	But I'm not sure.
955760	965520	People have probably seen this. This is Deloitte's agile landscape, version 3. The terrifying thing
965520	980400	with this is that this and this are just single dots on this. And we wonder why so many enterprise
980400	989760	projects fail. Quick story about enterprise. I was hired by one of the national agencies,
989760	997200	the Quangos, as we call them, quasi-autonomous non-governmental agency organization in the UK.
997200	1004560	They had an API endpoint, only had one thing, and it just returned a list of the amount of
1004640	1010400	energy that was being used in the UK right at that second. And that is very useful information.
1010400	1015680	If you're investing in energy futures, you want to watch those patterns. And so people just kept
1015680	1021120	hitting it and hitting it and hitting it. It didn't have IP throttling. It didn't have any
1021120	1026080	accounts or anything like that. It was an anonymous endpoint and you hit it. And it did a
1026080	1032000	quite complicated database query against an Oracle database. And did people put a thread
1032000	1038720	dot sleep 10 or a task dot delay 10 in between? No, no, no, no. No, they just get it, hit it again,
1038720	1046960	hit it again. They had this running on one 32-bit server. It was written in .NET 2.0. I had been
1046960	1054880	brought in to look at this in 2014. And yeah, it was 32-bit .NET, so it didn't have much memory.
1054880	1060080	The Oracle database was also 32-bit running on an old server. The servers had been there since
1060080	1068240	like 2005, so they were well past their death time. And yeah, they said, can you take a look at this
1068240	1074080	code and tell me what's wrong with it and tell us how to fix it? And I went, I could just fix it.
1074080	1080160	And they went, no, no, no, no. Don't fix it. We give you two weeks to write a 20-page document
1080160	1086400	telling us how to fix it. And so I took it back to the office and I loaded it into Visual Studio
1086480	1095920	and Resharper actually started crying and then uninstalled itself and went, no, you're on your own.
1096880	1103120	Just don't. And basically, I don't do planning. I don't do documentation. I don't do that sort
1103120	1107680	of thing. I'm getting better at it now as I get older and more responsible. But back in those days,
1107680	1112800	I was kind of like, I'll fix it and then I'll just write down what I did to fix it. And actually,
1112800	1121840	the main thing I did to fix it was where they said var connection equals Oracle database connection,
1121840	1127440	new Oracle DB connection, I just added using because they weren't disposing their database
1127440	1133600	connections. So it crashed every 20 minutes because they exhausted memory and the app pool had to
1133600	1142320	recycle. And so I managed to write 20 pages on why using statements are important,
1144560	1149040	sent it back to them, didn't hear anything from them for nine months, and then they came back to me
1149040	1152960	and they said, can you come in for a meeting to discuss your findings? And I'm kind of like,
1152960	1161680	you haven't done it yet? So I go up and my boss goes up and he's charging them £2,000 from me
1161680	1165120	to be there for the day. Lord knows what he charged for him to be there for the day. I'm
1165120	1171360	guessing about £5,000. We get there. There's 10 IBM consultants sitting around this table. And I
1171360	1178800	know that IBM consultants are about £10,000 a day. So this is a £100,000 meeting that's happening
1178800	1185920	right here. And I go, look, I can give you the code. I've brought it on a USB. If you want the
1185920	1193440	fixed version of the code, it's here. And I would recommend running it on in 64-bit on a server
1193440	1198320	that isn't 10 years old, but this will probably still work even if you don't do that. And they
1198320	1204160	went, yes, we can't just go in willy-nilly and fix it and put it on new servers. This is a critical
1204160	1213040	system. Yes, it's a critical system that crashes every 20 minutes and is costing you an absolute
1213040	1220640	fortune. Just buy a new server. Just put it on a new server and it will be better. Give it 64 bits
1220640	1225920	and give it like 16 gigs of RAM and it will run smoother. Well, we can't just, you know, that has
1225920	1233200	to go through a whole process. And I'm like, this meeting is costing £100,000. And for £100,000,
1233200	1238400	you could buy a data center and run this thing on a server farm and it would be fine. And my boss
1238400	1247600	went, no, why don't you go outside and get some fresh air? And so I go out and I wait by his car
1247600	1254480	and he's kind of like, oh, I'm in so much trouble. I'm going to get sacked again. And I'm smoking a
1254480	1260000	cigarette because I smoked at the time. And he comes out and I'm like, I'm really, really, really
1260240	1266960	and he went, no, don't worry about it. I don't want to fuck off. We don't need that shit. He said,
1267920	1276160	okay, this was a fun one. So problems in software, they're easy to fix. So you ship some software
1276160	1280240	that doesn't work and they are, it doesn't work. And you go, here's a new version of the software.
1280240	1286000	Intel managed to get a software bug into their processor. So the Pentium chip was the first
1286000	1292080	Intel processor that actually had a floating point unit built into it. Before that, we had the 486
1292080	1298560	and there was a 487 co-processor that did floating point, but Intel had combined it into the actual
1298560	1305280	chip itself. And the Pentium floating point unit accelerated floating point operations. There you
1305280	1315920	go. That's what it looked like. So what is 4,195,835 divided by 3,145,727? It's one
1316000	1324320	.33382. Except according to the Intel Pentium's floating point accelerator, it's 1.33374.
1325280	1333200	And there were a few instances where this would go wrong and people noticed and Intel went, okay,
1333200	1339680	if you can prove that you are actually affected by this bug, we will just send you a new Intel
1339680	1346000	Pentium processor where it is fixed. And then so many people came up with these torturous,
1346000	1350640	this is why it's not working for me, which were largely to do with Microsoft Excel.
1351200	1357680	And so Intel ended up going, fine, just if you've bought a Pentium, we'll send you another Pentium.
1357680	1365600	And that ended up costing Intel $475 million to fix. I'm not sure anything like it's happened
1365600	1370480	since I would imagine they probably run every possible floating point calculation
1370480	1380160	as part of their unit tests. Null. This is quite famous. Null. And we actually have a fairly easy
1380160	1386960	value to assign to Null because Tony Haw, who was the guy who invented Null, has called it his
1386960	1392560	billion dollar mistake. So Tony Haw, he's a British computer scientist, hugely respected,
1392560	1400800	he's like a knight or a KBE or something of the British Empire. And he was working on Algold W.
1400800	1407760	And Algold W was the first programming language that introduced the concept of records, what we
1407760	1414320	think of as like classes or structs or whatever. And so you had a record that was a person which
1414320	1419120	had these things in here. And so when you've got records, you need references to where that
1419120	1423840	record is held because now it's a collection of data stored on a heap. And so you can see here,
1423840	1429440	person has a reference to another person, which is their father, mother, youngest offspring or
1429440	1435120	elder sibling. And so where you've got references, what do you do if there is no father, mother,
1435120	1440080	youngest offspring or elder sibling? And so Tony Haw went, well, we'll just call that Null.
1441280	1445760	And so we say if P equals Null, then M. Otherwise, if M equals Null, then P. Otherwise,
1445760	1452160	do something with P and M and we'll return that back. And at the time, that probably seemed
1452160	1460320	perfectly reasonable. But ever since then, hands up who has not ever had a Null reference exception
1460320	1468480	in .NET or Java or any language they've ever programmed in or JavaScript undefined does not
1468480	1475200	have a method index of or whatever it is JavaScript says. So yes, and Tony Haw calls that is
1475200	1480640	billion dollar mistake and will quite happily tell you all about it. There's a video on YouTube
1480640	1486480	of him doing a one hour talk at a conference about how Null happened and why it was a bad idea.
1488400	1496320	Hartford Center. Sometimes software problems actually cause other problems in the real world.
1496320	1503360	So the Hartford Center was built in the 1970s. It was one of the first buildings that was designed
1503360	1508480	using a software CAD package, a computer aided design package. And back in those days, there
1508480	1514800	was no auto CAD. There weren't these high level things. A CAD package, the engineer and architect
1514800	1520720	using it would actually program in the algorithms, the formulas for the stresses on various beams
1520720	1526240	and all this sort of thing. And they built the Hartford Center and it was fine. But the Hartford
1526240	1533120	Center, I think it's in Connecticut or somewhere in the United States, it snows. It snows a lot
1533120	1539200	and the Hartford Center was fine until one night it snowed a lot and this happened.
1540080	1545200	Fortunately, no one was in the building at the time. There had been a concert and everybody
1545200	1551600	had left the building about four hours before this actually happened. And the problem was that
1551600	1557920	they put in the calculations for the beams on how much the stresses on them were going to be.
1557920	1564000	But what they didn't account for is that the roof is slanted like this and you people in Scandinavia
1564000	1569280	you'll know what happens to snow when it lands on a roof. It kind of evenly distributes itself
1569280	1577440	like this and then it warms up a bit and it goes boom. And they hadn't accounted for the horizontal
1577440	1583600	tolerances on these beams. And so it did that and a beam sheared sideways and then that beam
1583600	1590800	sheared sideways and then the entire roof collapsed just because of one error in programming a CAD
1590800	1597520	package. That cost them 90 million dollars to put a new roof on the Hartford Center. That's not too
1597520	1605680	bad. This one's fun. Night capital. I like this one because night capital are a hedge fund and
1605680	1611120	they don't like hedge funds. Although if you work for a hedge fund and you need some consultancy,
1611120	1617840	I will happily come and consult for you and my rates are very reasonable by hedge fund standards.
1619440	1624720	Certainly compared to night capital. What you have to understand about hedge funds is the stock
1624720	1630320	market, the first stock market was created by the Dutch East India Company. They needed to raise money
1630320	1635840	to build ships to go to India to steal stuff and bring it back to Europe to sell it. And so the way
1635840	1641120	they did this was they said we'll sell shares in the expedition and then we go and we steal the
1641120	1647360	stuff and we bring it back here and then we sell it and then how you get your percentage of our
1647360	1651200	profits that we make from doing that. And then other people went that's a brilliant way to raise
1651200	1658000	money to start a company. I'm going to do that as well. And then 400 years later somehow that had
1658000	1665120	turned into highly optimized programs running in dark pools trading with each other at microsecond
1665120	1672000	levels skimming fractions of a fraction of a cent off the top of the transaction to try and
1672000	1677920	make rich people richer while the rest of us got poorer. And this is what night capital were doing.
1678480	1685520	And in 1996, this was all happening in these things called dark pools. So the hedge funds
1685520	1691680	and the investment banks and everything created their own sort of shadowy stock markets where
1691680	1695920	they could do this. And the New York stock exchange went we are missing out on so much
1695920	1700800	commission. We're going to create our own light pool. And so they did and they called it the
1700800	1706720	retail liquidity program. And so everybody had to scramble to get their algorithms and their
1706720	1711520	programs that were running in the dark pools to run on the New York stock exchanges retail
1711520	1717440	liquidity program. And so night capital basically copied and pasted a bunch of code around the
1717440	1722800	place and dragged in some modules and all this sort of stuff and threw it into this new retail
1722800	1729840	liquidity program with about two weeks notice. And it went in there and it started running.
1729840	1738960	And within four minutes, it had spent a billion dollars. And when they deployed it, it was running
1738960	1745280	on eight servers and the deployment rolled out, but it only worked on seven of the servers.
1745280	1754160	And the eighth server continued running this old code that was the buggy code. And so they went,
1754160	1759280	oh, no, it's spending too much money. A failsafe that was supposed to trigger wasn't working because
1759280	1763360	it came from a different system and the flag wasn't getting set and whatever was going on.
1763360	1768800	And they went, well, it must be that this new code has got a bug in it. So we'll roll it back.
1768800	1775600	And they said, copy the code from the eighth server onto the other seven servers, that'll fix it.
1776480	1783840	By 28 minutes past nine on the morning that this thing went live, their algorithm had spent seven
1783840	1790480	billion dollars. And night capital didn't have seven billion dollars. And the rule is you have to
1790480	1797840	settle within 48 hours. And so they had to essentially bail themselves out. So they sold
1797840	1804240	all their positions, this entire seven billion dollars worth of positions to Goldman Sachs
1804240	1816400	for $450 million. $440 million. So, yeah. And then the following year, they were acquired in a
1816400	1823120	hostile takeover by Goldman Sachs, who kind of went, yeah, you really shouldn't be allowed to do things.
1823600	1829120	That's fun. I like it when hedge funds lose money. How are we doing? Halfway through, good stuff.
1830000	1838000	So, bugs in space. Like it pigs in space from the Muppets, but bugs in space.
1840000	1844960	There have been lots of bugs in space and bugs in space are difficult because you can't sort of
1844960	1851120	attach, you can't go, how is this going to work in space? I know I'll go into space with my laptop
1852080	1858160	and set a break. You can't do that. Laptops don't do well in space for a start. So, yeah.
1859120	1866720	So just a few of these. Mariner 1. This was one of NASA's very first missions. And the computers
1866720	1872640	in those very, very basic. And so programming was taking mathematical formula and turning them
1872640	1879040	into machine code. I don't think there was even assembly language, really, for these guys. And
1880000	1885040	they would take the mathematical formula and literally go, okay, so that would be this and
1885040	1891200	this and this. And this is what Mariner 1 would have looked like if it had ever made it to space.
1891840	1897760	But it didn't. And it wasn't the programmer's fault. It was the mathematician's fault. He gave
1897760	1905600	the programmer a formula that had an R in it. And it should have been the R on the left with a hyphen
1905600	1913040	over the top of it. And what the hyphen means is smoothed over a period of time. So it's going to
1913040	1918000	spike up here and down here and down here. But what you want is kind of the average over the
1918000	1924880	previous 20 samples of whatever this is. But he just left out the hyphen. And so they used R.
1924880	1931920	And so if you've got a value where it's supposed to be zero and kind of plus one or minus one is
1931920	1938240	probably okay. Plus two minus two is probably okay. But plus eight is a very bad idea indeed.
1938880	1944080	And you're not smooth. So eight and then back down to zero and then minus eight and back up to zero.
1944080	1949360	It's probably okay. That's probably normal. But they thought what they were getting was the average
1949360	1954640	smoothing. And so when it came through as eight, the guy in mission control went bang and hit the
1954640	1962480	button that blew up the rocket on purpose. So yeah. If anyone was in Martin Thwaites'
1963040	1967920	talk on open telemetry or any talks about tracing or metrics or anything like that,
1967920	1972880	it's really important to make sure that the data, your telemetry data is accurate.
1973760	1977920	And that you're getting out the number that you think you're getting out. Because otherwise you
1977920	1984400	blow up your spaceship. And then you have to build another one for $18 million in 1960s money,
1984480	1992960	which is closer to $80 million today. You think actually the Mariner 1 mission
1993840	2000720	is credited, that missing hyphen, is credited with the creation, the inspiration of software
2000720	2005840	engineering as a discipline. That was the point at which people went, hey, maybe we should do
2005840	2010160	like what those engineers do when they build bridges. And you know, bridges have collapsed and
2010160	2014160	stuff. But that was when we kind of started applying engineering principles to building
2014160	2021520	software, which did not save the Mars climate orbiter, which had a similar experience. Although
2021520	2027280	it did get most of the way to Mars, to be fair, the rocket took off, it got it into orbit, it set
2027280	2034080	its engines going, and it got to Mars. And then it crashed into Mars, crashed into the surface of
2034080	2040080	Mars at a very, very high velocity. And there's still a scar that you can see from one of the
2040080	2045920	other orbiters that went up there. And the reason for this is incredibly simple. It's because Americans
2045920	2058080	are stupid. And Americans insist on using inches instead of centimeters. Now, NASA are not stupid.
2058080	2064160	NASA use centimeters for everything. Actually, they use millimeters for everything. So NASA is
2064160	2070400	like millimeter scale stuff. So they don't say a centimeter, they say 10 millimeters, because
2070400	2075440	they work with the European Space Agency, they work with Roscosmos, they work with the Chinese,
2075440	2080240	they work with space agencies all over the world. They work with suppliers all over the world.
2080240	2086400	You have to be using the same units. And everyone on the Mars orbiter mission was using the same
2086400	2092400	units. Everyone was using millimeters and centimeters, except Lockheed Martin. Lockheed
2092480	2100160	Martin were using inches. So to give you a visual idea, if this is me at five centimeters tall,
2100800	2106880	then this is me at five inches tall. It's quite a big difference. Inches are not centimeters.
2106880	2112480	And so when the Mars climate orbiter arrived at Mars, its planned trajectory was that it
2112480	2118880	should have gone into orbit at 226 kilometers above the surface of Mars. And what it actually did
2118880	2125040	was go into orbit 57 kilometers above the surface of Mars, which meant it got caught in Mars' gravity
2125040	2132400	and smashed into it. So yes, units are important. So one of the good things about F-Sharp is the
2132400	2139200	whole units of measure thing. Can we get that in C-Sharp 12 or something, Mads? You're copying
2139280	2146320	everything else from F-Sharp. So awesome having in the room to say that.
2150320	2158240	It's not just NASA though. So yes, 327 million pounds, dollars for the Mars climate orbiter,
2158240	2163120	plus the 18 months that it takes the thing to get to Mars. And then kind of going,
2163120	2165360	that didn't work. Should we build another one? Yeah.
2171200	2178400	But the French, the European Space Agency has problems with their own. This is the Ariane 5 launch.
2180400	2185440	And this is the first ever launch of Ariane 5, and it was a mission called Cluster. It had four
2185440	2191440	European Space Agency satellites on it. And the tests had all gone perfectly. The
2192000	2197920	the pressure testing and everything. And then it took off and it soared majestically
2197920	2206000	into the sky. And then some code that they had copied and pasted from the Ariane 4 control
2206000	2216000	software, tried to write a 64-bit floating point number into a 16-bit integer variable.
2216960	2224880	And this caused the boosters on one side to adjust their vertical, their horizontal thrust
2225760	2235840	a lot. And so the boosters split off the rocket and that happened. And yeah, this was
2235840	2240240	spectacular. There's actually, there's a talk kind of similar to this one by Kevlin Henney,
2240240	2244480	where he goes into a lot more detail and he has the code and it's on YouTube. So you can track
2244480	2250240	that down if you want to know exactly what happened there. But basically they had seven
2250240	2256880	variables that controlled the flight path to get into orbit. And four of them were guarded.
2256880	2262160	So if you try to write the wrong type of data into them, you wouldn't be able to.
2262880	2268880	The one there that caused that, that wasn't guarded because guarding a variable
2269520	2274400	uses quite a lot of something and they didn't think they could spare it. And so yes,
2275280	2281040	spectacular. Ariane 5 though, I mean, you know, since then Ariane 5 has been an absolute work
2281040	2285920	course and it's put so much stuff into orbit. And it's going to have to keep doing it for quite
2285920	2294320	a while because Ariane 6 has just been delayed again. Enterprise. Half a billion dollars,
2294320	2302480	the Ariane 5 disaster. That's kind of probably exaggerated. But yeah, it's sort of including
2302480	2306720	missed missions and people saying, oh no, you're not launching our satellites. We're going to take
2306720	2316720	these to NASA. You can sort off. So yes. The big rewrite. This was me. This is another one of
2316720	2323600	my mistakes. Same company with the MedFile Unfucka actually. We had a product that was written in a
2323600	2330080	language called Gupta SQL Windows and it was dying. And I was, can we rewrite it in .NET?
2330080	2334400	Please. I've just, I've got this new .NET thing. It's brilliant. Can we rewrite? And they said,
2334400	2340240	yeah, all right. And so I started rewriting the entire application as a Windows Forms application.
2341200	2346400	And they had four people working on the old application and me working on the new one.
2347200	2351440	And so they were adding features and doing all that. And I was trying to catch up to them.
2351520	2358240	But I was, I was getting there and it was okay. And then 2005, 2006 came along and Microsoft
2358240	2365920	released WPF. And it was new and improved. And I was, oh no, it's a new thing. Windows Forms is
2365920	2370800	dead. WPF is so much better and the binding works better and the design is lovely and all this sort
2370800	2376640	of stuff. It's a shiny thing. I want the shiny thing. And so I decided that I was going to throw
2376800	2384160	out all the Windows Forms code and, and replace it with WPF. And that did actually cause me to
2384160	2390000	have a nervous breakdown and take six months off work. And then when I got back to work,
2390560	2395920	they did a performance review and they gave me a five, which was the worst you could get.
2395920	2398720	And I went, why? And they said, well, you just took six months off.
2399200	2408240	So yes, new and improved. Do not just go, ah, shiny thing and rewrite everything
2408240	2413600	because you think it looks cool. Probably it only cost them a hundred thousand pounds in terms of
2413600	2419120	what they'd paid me to achieve, precisely nothing. But it did also cost me my sanity.
2420320	2424960	And the main sort of thing I got out of it is I know not to do that again.
2425920	2433440	Recursion. This is just a little bugbearer of mine. I happen to read something about
2434000	2440640	recursion and how recursion is a better pattern than loops. And I just, it's a lie, effectively.
2440640	2446560	Recursion is loops. It's just a different way of doing it. So if you recurse in a normal application,
2446560	2451120	you will end up getting a stack overflow error because things go round and round in circles.
2451200	2455120	And every time it pushes something onto the stack until there's no room left on the stack.
2455120	2462480	And so to avoid this, there is a thing called tail call elimination where the compiler recognizes
2462480	2468000	that that's what you're doing and eliminates that tail call and makes something happen in a different
2468000	2476080	way. So to avoid this stack overflow exception, so if you look at this, this will eventually
2476080	2483040	cause a stack overflow because this is 32-bit.net. x86.net framework doesn't do tail call
2483040	2490720	elimination. And so the jit just produces this code here, which calls countdown and calls countdown.
2490720	2497440	So if you call this with a big enough number, like in 32.max value, you will get a stack overflow
2497440	2505280	exception. With the 64-bit jit, they introduce tail call elimination. And so that produces this
2505280	2518320	code. And you can see that L0014 jump L0007. So every time someone goes, all recursion is a
2518320	2525920	far superior and computer science-y and functionally way of doing loops, point out to them that that's
2525920	2535040	a go-to. And I can prove it's a go-to because there's the same code written with a go-to
2536080	2542000	and yeah, look, there you go. We've got jump short L double. It's a little bit different,
2543040	2550000	but it's one less instruction than the recursion version. And we do our jump short L07
2550720	2557040	at the end there. And yeah, so recursion can go jump in a leak as far as I'm concerned.
2557600	2565680	I would like to thank Andrei Shekin, AshMind on Twitter for sharplab.io. If you've never seen
2565680	2572320	sharplab.io and you do C-sharp development, it's brilliant. You paste some C-sharp code into it.
2572320	2580320	It'll show you the C-sharp compilers sort of the C-sharp that it generates for your properties
2580320	2585200	and async methods and the state machine and all this sort of stuff. It'll show you the IL that's
2585200	2590080	generated and then it'll show you the actual machine code that's generated by the JIT. It's
2590080	2598000	fantastic. JavaScript. Any JavaScript fans in the room? I'm about to upset anybody because this
2598000	2609040	really was. It was a mistake. That was one of the biggest ones. And the thing is it was Netscape
2609040	2615920	version 2. And somebody stuck their head around Brendan Eich's door and went, Brendan,
2615920	2620080	can you knock up a quick language that we can stick in the next version of our browser
2620080	2624560	so that when you put the mouse over an image, we can change it to a different image?
2624560	2631600	All right, cheers. How long? A week. Cool. And so a week later, Brendan goes back with scheme,
2631600	2635760	basically, because if you need to implement a programming language in a week, then you write
2635760	2640400	a Lisp because they're the easiest programming language to implement. So we went, hey, we've
2640400	2646080	got scheme to run in the browser. And they went, oh, no, no, nobody does Lisp anymore. No, we don't
2646080	2651200	like all those parentheses. You know what's really hot at the moment is that Java thing. Why don't
2651200	2656480	you make it look more like Java? And so rather than sort of patch the holes and the problems
2656480	2662080	and everything else, Brendan made his scheme look like Java, which involves changing prefix
2662080	2669440	operators to infix operators and that sort of stuff. And the other thing was they wanted it to
2669440	2675120	be possible so that the kind of people who were just hand coding HTML and creating personal home
2675120	2681200	pages could hand code some JavaScript to achieve these effects. And so they put all sorts of things
2681200	2688800	in there to try and help these developers. Like if you said if this thing is equal, equal to this
2688800	2693840	thing, and there were two different types, then JavaScript would go, well, what if I made them
2693840	2701760	the same type and then that would work, wouldn't it? Yeah, yeah, that would work. And we ended up
2701760	2708080	with this absolute abomination of language. But the biggest problem of all is that it's shipped
2708720	2716320	and then people started using it. And they can't, you can't fix it. You can't fix double equals
2716320	2722320	in JavaScript. So we have triple equals and bang double equals. And apart from anything else,
2722320	2729200	that's wrong. So it's just, it should be bang triple equals. Or I don't know. But anyway,
2729200	2734000	I just think if someone poked their head around Brendan Eich's door and said, hey, Brendan, can
2734000	2740800	you create the language that will be used for 90% of all programming over the next 50 years and run
2740800	2750160	on everything from SpaceX shuttles to the internet, to watches, to smartphones, to everything else,
2750160	2758240	how long? Brendan would probably have said, oh, two weeks. What's a smartphone?
2760000	2766240	So yes, here are some JavaScripty things. An empty array equals not an empty array.
2767040	2773360	According to type coercion, no idea why that is, but those two things are the same.
2774480	2781840	I think it's that empty array becomes object, which is not null, therefore, it's true. And not
2781840	2788000	empty array, it coerces the array to zero, which is the size of the array, and then knots it so it
2788000	2794480	becomes true. So that's true equals true equals true. Who can spot what's wrong with this line of
2794480	2808240	code or why it does what it does? So in the middle here, plus, plus. So because JavaScript does
2808240	2814080	type coercion, what it's actually trying to do here is B plus A plus, and then we've got this
2814080	2820080	plus floating here, and it goes, well, I'm already here. So this must mean plus A. So we're doing
2820080	2826960	the positive value of A. I'll try and coerce A to a number so that I can, oh, no, it's not a number,
2826960	2832960	so it becomes nan. Type of nan, incidentally, is number. So not a number is a number.
2834240	2839200	And then we add the other ray onto it, and so B plus A plus plus A plus A is banana,
2840400	2848640	because, of course, it is. And Douglas Cropford wrote a book called JavaScript, The Good Parts.
2849440	2854400	Have you ever seen the photograph of JavaScript, The Good Parts next to JavaScript, The Definitive
2854400	2861280	Guide? That's quite a pot. I took that photograph, and I put that on Twitter, and this was like back
2861280	2873200	in 2012 or something, and it got 45,000 likes, and I was, yeah, I'm famous. But yes, the difference
2873200	2877440	between JavaScript, The Good Parts and JavaScript, The Definitive Guide is basically the DOM.
2877520	2883120	It's the document object model that is the bad parts of JavaScript, according to Douglas Cropford.
2883120	2889680	And he's kind of got a point, because document.all, which is all the elements in the document,
2889680	2894480	is an instance of object. But if you do type of document.all, it tells you it's undefined. So
2894480	2898480	you go, all right, does document.all equal, equal, equal undefined? And it says, no, it doesn't.
2898480	2902320	And you go, does document.all equal, equal, equal null? And you go, no, it doesn't equal that,
2902800	2906480	either. You go, well, if you type coercive, does it equal, equal null? And the DOM goes, yeah,
2906480	2915440	yeah, it does. And they can't fix it. There is code in the world that relies on that behavior.
2916480	2922400	And so Java, I mean, I don't know what the cost of JavaScript is, but the fun we have with it is
2922400	2931520	priceless. And yeah, I'm just quite down with that. So I would like to have some honorable
2931600	2940400	mentions here. Heartbleed, that popped up a few years ago. This was a serious bug in OpenSSL,
2941280	2946240	which essentially rendered the whole thing completely vulnerable to attack. And of course,
2946240	2955600	OpenSSL is used by everybody, Google, Microsoft, Amazon, Facebook, Apple, everybody uses OpenSSL.
2956400	2963360	How could this be allowed to happen? And the XKCD cartoon of the entire modern infrastructure of
2963360	2969920	the world, and a random open source project somebody in Nebraska has been factlessly maintaining
2969920	2976240	since 1996. That was OpenSSL. It was just like this one guy who was maintaining this thing,
2976240	2981840	that multi-trillion dollar companies were relying on, and there was a bug in it. And none of them
2981840	2986960	had thought to kind of give this guy's code a read or check it out or anything like that.
2986960	2991680	And then this year, we had Log4j. Because it turns out that one of the things you can put into
2991680	3000000	Log4j is, hey, log this. Log this call to another service. And while you're logging this call to
3000000	3006320	another service, pass it some information. Again, Martin's thing earlier on about baggage. And Log4j
3006800	3013200	so you could put something into a text field, and then Log4j would log what you'd put into
3013200	3018800	that text field, except it was a URI that said execute a Java enterprise bean. There's that
3018800	3023680	word enterprise again, on this other server. And just pass it all the data that we've got
3023680	3031440	attached to this log while we're at it. And there is not a single Java application in the world
3031440	3038400	that is not using Log4j. So that was fun. And then they fixed that one. I mean, that wasn't in
3038400	3044400	Java. It was in a library that every Java application uses, but it wasn't in Java itself.
3044400	3052480	So Java looked okay for literally two weeks. And then somebody looked at Java's actual in the box
3053120	3059920	ECDSA implementation. So ECDSA is a very complicated algorithm, and it involves three numbers.
3060880	3071040	And one number is the result of a sum. And the other two numbers, if you multiply the first
3071040	3077840	number by the second number, then it should equal the third number. And so that was fine.
3078720	3084160	But it turns out that you pass these three numbers along with your ECDSA token. This might be
3084240	3091840	a JSON web token or a SAML token, something that you've encrypted using the ECDSA algorithm.
3091840	3101120	And if you pass it in, and so you've got the numbers, I think they were P, R, and Q, P, and R.
3101120	3109120	And so it's like P times R equals Q. And so if you set Q to zero and R to zero, then it did P times
3109120	3115520	Q. And does that equal zero? Yes, it does. And so literally, just by sending a malformed ECDSA
3115520	3119920	signature with these two values set to zero, you could get Java to go, yeah, that's fine.
3120720	3125600	That was in the actual, that's like the base class library. That was in the JDK,
3125600	3133600	but that one came along. That was fun. So we've seen some fun examples. We've seen some very,
3133680	3143680	very expensive examples. I would like to finish off with one example where we basically got lucky
3143680	3150800	that, yeah, programmers make all these mistakes. We're fallible, and we're sort of hubristic,
3150800	3157840	and we're arrogant, and we do stupid things. Fortunately, the rest of the world knows that,
3157840	3166320	and they don't trust us as far as they could spit a rat. And so the Soviet early warning system
3167920	3175680	in 1985 was switched on and almost immediately reported that America had launched
3175680	3185360	five missiles against the USSR. It hadn't. What the image recognition software running on,
3185360	3191680	I don't even know what kind of computers the Soviet Union had in 1985. I'm guessing they
3191680	3199840	probably involved rocks and bits of elastic, but you know, it wasn't great. But when they've
3199840	3204880	launched five, it was actually the sunlight glinting off clouds, but that was incorrectly
3204880	3213200	identified as the rocket trail from intercontinental ballistic missiles. And this man, Stanislav Petrov,
3213200	3220720	Lieutenant Colonel Stanislav Petrov, on the 26th of September, sorry, 1983, not 1985,
3220720	3226080	was told that five missiles were inbound to the Soviet Union from the United States,
3226080	3231360	and he should immediately launch the Soviet Union's response. He should immediately launch
3231360	3236480	what turned out to be all four of their intercontinental ballistic missiles. And if he had
3236480	3241360	done that, then the American early warning system would have seen those, and America
3241360	3246000	would have launched all the Minutemen missiles that Eisenhower had built, because he thought that
3246000	3252400	the Russians had 4,000 ICBMs, they didn't, they had four, but he thought they had 4,000. So America
3252400	3259200	had 5,000, and they would have launched all of them. And that would have been game over humanity,
3259200	3265440	most life on this planet. And then in another 50,000 years, maybe there'd be a building here
3265440	3272160	with a software conference with highly evolved cockroaches talking about programming's greatest
3272160	3280480	mistakes. But Stanislav Petrov said, nah, don't believe that. I'm not launching missiles based
3280480	3287920	on what a computer says, it can go stuff itself. And so we did not get World War Three on September
3288480	3295360	26, 1983, because there was a human between the computer and the missile launch system.
3295360	3302640	And thank God for that, because that very nearly cost all known life in the universe.
3302640	3308160	And that's how serious some of this stuff is. So yeah, think about that as you go back to work
3308160	3314240	tomorrow or next week, and maybe just be a little bit more careful. Thank you very much for listening
3314240	3323760	to me. And I will see you next time.
