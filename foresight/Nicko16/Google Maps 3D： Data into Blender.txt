Okay, so in this video I'm going to show you how you can import Google Maps 3D data into
Blender.
And just a word of warning, this process only works on Windows at the moment.
This process was devised by a guy called Ellie Michelle, and if you find the process useful
I'd encourage you to go over here and donate.
He came up with an add-on called Maps Model Importer, which lets you import this special
3D file.
And the 3D file is created using a program called RenderDoc, which is an open source
project for capturing 3D buffer, and we're going to import a 3D buffer from Google Maps
on Google Chrome, so you can need Google Chrome as well.
So first of all, you can download the add-on by going down to the releases page, downloading
this file here.
So save that to your add-ons folder, and once your download is finished, you want to head
over to Blender, go to edit preferences, go to the add-ons tab, press install, choose
the place where you saved Maps Model Importer, press install, and you'll just need to check
this little box here to enable the add-on.
Then next you need to install RenderDoc, and if you did it correctly, it should look something
like this when it starts.
Okay, so now for the tricky bit, you need to go over to your Chrome application folder.
For me, it was Cprogramfiles x86 Google Chrome application.
Find your chrome.exe launcher file, right-click on it, go to create a shortcut, and it'll
ask you if you want to put it on your desktop, so if you say yes, then go over to your desktop.
You should find chrome.exe, and if you right-click on it and go to properties, you should see
this section here called target.
We need to change the target, and there's a special bit of text that you need to paste
into here.
I'll put it in the description.
Basically, it's going to add a couple of flags onto the execution of this file so that
it runs in a kind of debug mode.
You can see here there's a few little dashes, and press apply, and you should see that your
icon changes to this command prompt icon.
Then we want to double-click on our shortcut, and you can see that Chrome has launched with
two windows, and one of them has this message that says GPU starting with PID 11256, and
you're going to want to write that number down, and then head over to render.go to file,
inject into process, and then here, I'm going to search for that number that we just wrote
down.
We can see that there is a process with that PID.
I'm going to select it, and then I'm going to press inject, and if you've done it correctly,
you should see connection status established.
Then we can go back to that message, press OK, and Chrome will launch, but it will launch
with this debug mode, and then what you can do is you can go over to Google Maps, satellite
view, go to an interesting location, position your camera so that it can see the thing that
you want to capture.
This is a bit like taking a screenshot.
Go over to render doc, and then if you press capture frames immediately, and then just
wiggle the viewport inside of Chrome, you should see that this little thumbnail pops up, and
this is our captured 3D data.
If it's got these sections here, color pass 2, color pass 3, you've probably done it right,
and so with this selected, we can go to file, save capture as, and then we can save an RDC
file to a location that's convenient for us.
Then we go back to blender, and I'm going to go to file, import, Google Maps capture
RDC, and then we're going to go to the place where I saved my file, press import, and then
if I just delete the default cube, we should see that the geometry has been imported, and
if I go to this button here, the texture mode, we should see that it has an image texture
on it as well.
And that's how you import Google Maps 3D data into blender.
It's a bit of a hack though, but it works.
So one thing you may have noticed is that the models don't import at real world scale,
so what I've done here is I've just imported a base map using blender GIS, and I worked
out that it imports the 3D models 50 times smaller, so 2% of their original size.
So here I'm just going to select my 3D data, press S to scale, and then scale it by a factor
of 50, and then you should see that it matches the real world scale of your blender scene.
