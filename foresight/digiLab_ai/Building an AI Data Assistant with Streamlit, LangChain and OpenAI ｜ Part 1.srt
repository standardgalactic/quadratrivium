1
00:00:00,000 --> 00:00:05,600
Imagine accelerating your machine learning projects with an AI assistant that will save you hours and hours of work.

2
00:00:09,700 --> 00:00:11,200
Welcome to Digilab Academy.

3
00:00:11,200 --> 00:00:16,900
You go to destination for in-depth courses and resources to help you master the world of data science and AI.

4
00:00:16,900 --> 00:00:23,100
I'm Anna and in this series I'm going to show you how to build your own AI assistant using StreamLid and LangChain.

5
00:00:23,100 --> 00:00:29,000
I'll walk you through the entire process from selling the required libraries to solve a machine learning project using AI.

6
00:00:29,000 --> 00:00:33,700
Make sure that you take the full reading tutorial that accompanies this video in the Digilab Academy website.

7
00:00:33,700 --> 00:00:39,800
You'll find the link in the video description below, plus you can download the final project and also the dataset that we will be using.

8
00:00:39,800 --> 00:00:42,500
Now let's break down what to expect in this video.

9
00:00:42,500 --> 00:00:50,000
In this project, StreamLid is the foundation for the user interface, allowing you to upload CSV files, visualize data and interact with the AI assistant.

10
00:00:50,000 --> 00:00:51,800
The beauty of StreamLid is its simplicity.

11
00:00:51,800 --> 00:00:57,200
Even if you have limited web development experience, you can create dynamic and interactive data applications.

12
00:00:57,200 --> 00:01:03,400
While StreamLid is beginner-friendly, it also offers customization options for those who want to create more sophisticated applications.

13
00:01:03,400 --> 00:01:11,500
Finally, StreamLid makes it easy to deploy your web apps to the cloud or share them with others, further enhancing its utility for collaborative data projects.

14
00:01:11,500 --> 00:01:16,900
We'll start by structuring their StreamLid app with titles, headings, subheadings, captions and text formatting.

15
00:01:16,900 --> 00:01:23,000
Next, we'll implement dividers to segment your content, making it easier for users to navigate through your AI assistant.

16
00:01:23,000 --> 00:01:26,400
Uploading CSV files is essential for this data-driven app.

17
00:01:26,400 --> 00:01:28,100
We'll cover how to implement this.

18
00:01:28,100 --> 00:01:35,500
To enhance user interaction, we'll create a dynamic sidebar and expanders, and we will discuss how to display graphs for data visualization.

19
00:01:35,500 --> 00:01:40,500
We'll also explore text input, which allow users to interact with your AI assistant through text.

20
00:01:40,500 --> 00:01:43,100
Caching is a powerful technique for optimizing performance.

21
00:01:43,100 --> 00:01:46,000
We'll explore this topic and show how you implement it effectively.

22
00:01:46,000 --> 00:01:51,500
Understanding session state and implementing non-statefold buttons are a key to creating responsive applications.

23
00:01:51,500 --> 00:01:52,900
We'll cover this in detail.

24
00:01:52,900 --> 00:01:55,000
Now, let's shift our focus to LangChain.

25
00:01:55,000 --> 00:02:01,800
LangChain is a framework that can be used to build conversational AI systems that can understand and respond to user queries.

26
00:02:01,800 --> 00:02:07,700
Its main components are models, agents, tools, prompt templates, chains, memory and indexes.

27
00:02:07,700 --> 00:02:12,700
The project integrates OpenAI's GPT-3 3.5 Turbo Large Language Model.

28
00:02:12,700 --> 00:02:19,700
LLMs are integrated into the StreamLid application, allowing you to have a dynamic real-time interactions with the AI assistant.

29
00:02:19,700 --> 00:02:24,100
You can ask questions, seek explanations and receive immediate responses.

30
00:02:24,100 --> 00:02:26,300
We'll start by setting the OpenAI key.

31
00:02:26,300 --> 00:02:35,200
Then we will explore how to load and use OpenAI large language models to generate information, open up a world of possibilities for your AI assistant.

32
00:02:35,200 --> 00:02:41,500
With the Pandas Agent, you can answer specific predefined questions about your data frame or any variable of your choice.

33
00:02:41,500 --> 00:02:43,000
I'll show you how to set this up.

34
00:02:43,000 --> 00:02:47,700
You can also enable your AI assistant to answer specific questions chosen by the user.

35
00:02:47,700 --> 00:02:51,600
What you learn here can be applied to your own data analysis problems.

36
00:02:51,600 --> 00:02:57,000
For example, you might want to create an assistant to help you explore sales data or customer reviews.

37
00:02:57,000 --> 00:03:02,500
Why we'll focus on one specific use case, you can easily adapt these techniques to your unique needs.

38
00:03:02,500 --> 00:03:05,600
So without further ado, let's start building our AI assistant.

39
00:03:05,600 --> 00:03:09,500
Hit that like button and don't forget to subscribe for more data science adventures.

40
00:03:09,500 --> 00:03:10,400
Let's get started.

41
00:03:11,000 --> 00:03:19,800
Okay, so before we start building our AI assistant, there are two things that we need to do.

42
00:03:19,800 --> 00:03:23,300
First is to set the API key and the second is to run Streamlet.

43
00:03:23,300 --> 00:03:33,100
To set the API key, you need an API key from OpenAI and you need to boot VAL into a different script in your same directory.

44
00:03:33,200 --> 00:03:42,500
What I've done is I created this API key file and there what we need to do is store our key.

45
00:03:42,500 --> 00:03:48,800
So here you would put your key as a string, but in this file called API key.

46
00:03:48,800 --> 00:03:55,500
The reason that I'm not sharing is because this key is a secret key and it shouldn't be shared.

47
00:03:55,500 --> 00:04:01,400
So let's remove that and just remember that that goes to your API key script.

48
00:04:01,400 --> 00:04:03,200
The second is to run Streamlet.

49
00:04:03,200 --> 00:04:09,400
For that, what I want you to do is to open the terminal, go to your directory and what I want you to do is to run Streamlet using this command.

50
00:04:09,400 --> 00:04:18,200
So that is Streamlet run and then the name of your API script where you're going to write the code for the AI assistant and just press enter.

51
00:04:18,200 --> 00:04:24,900
And what's going to happen is that a new window is going to pop up in your browser and there's where we're going to see your app.

52
00:04:25,900 --> 00:04:33,900
Now we're going to import the packages that are going to provide the necessary functionality for our project.

53
00:04:33,900 --> 00:04:42,600
The packages that we're going to import are OS, API key, long chain, dot M, Streamlet and pandas.

54
00:04:42,600 --> 00:04:45,000
So let's write that down.

55
00:04:45,000 --> 00:04:55,600
Okay, I'm going to close this player so we can see the code better.

56
00:04:55,600 --> 00:04:59,100
So as you can see, we have imported the recurrent libraries.

57
00:04:59,100 --> 00:05:03,600
So the OS library provides a way of using operating system dependent functionality.

58
00:05:03,600 --> 00:05:08,100
Then we have API key in order to load or API key correctly.

59
00:05:08,200 --> 00:05:16,100
Then Streamlet that is the heart of our project really then behind this library fundamental for data manipulation and visualization.

60
00:05:16,100 --> 00:05:25,500
This we have the package long chain, which is specific to our project and that incorporates open AI language models that is going to allow us to interact with the assistant.

61
00:05:25,500 --> 00:05:35,500
And then we have dot M, very important package to make sure that sensitive information such as the API key is securely stored.

62
00:05:39,100 --> 00:05:51,100
Okay, so now we're going to start building the user interface a little and I'm going to show you how to add titles, subtitles, headings and other stuff that is going to make the user experience a little bit more engaging.

63
00:05:51,100 --> 00:05:57,800
So first of all, we want our assistant to have a title and also we want to have a welcoming message.

64
00:05:57,800 --> 00:05:59,900
Okay, so let's write that.

65
00:05:59,900 --> 00:06:10,700
So in extremely in order to write a title, we do sd.title and then inside of the brackets, we write the title that we want to add to our app.

66
00:06:10,700 --> 00:06:20,700
So I'm going to call a assistant for data science and I'm actually going to capitalize that and let's add a header now.

67
00:06:20,700 --> 00:06:26,200
So in order to add headers and striplet is just sd.hether.

68
00:06:26,200 --> 00:06:32,800
And we're going to add, for example, exploratory data analysis part.

69
00:06:32,800 --> 00:06:37,300
If you want to write a subheader is just sd.subheader.

70
00:06:37,300 --> 00:06:41,200
So let's say, for example, solution.

71
00:06:41,200 --> 00:06:49,300
Okay, as you can see, nothing appears on the app and in order to see what we're reading, then we need to click rerun.

72
00:06:49,300 --> 00:06:51,700
So let's do that and let's see what happens.

73
00:06:51,700 --> 00:06:53,800
So this is running.

74
00:06:53,800 --> 00:07:04,700
And you can see now the title appears and we have here the header and this header as well.

75
00:07:04,700 --> 00:07:07,000
As I said, we want to write a welcoming message.

76
00:07:07,000 --> 00:07:13,700
So for that, we're going to just use plain text in order to do that in striplet, we use sd.write.

77
00:07:13,700 --> 00:07:22,000
So let's write for now just welcoming message and see what happens when we rerun.

78
00:07:22,000 --> 00:07:25,300
So we rerun and it appears here.

79
00:07:25,300 --> 00:07:34,800
So I'm going to write something along the lines of, hello, I'm your assistant and I'm here to assist you with your machine learning projects.

80
00:07:34,800 --> 00:07:37,900
So let's write something like that.

81
00:07:37,900 --> 00:07:47,000
So, okay, so let's see what happens when we run.

82
00:07:47,000 --> 00:08:02,700
Okay, so now our placeholder for the welcoming message has been populated and now we have hello, I'm your assistant and I'm here to help you with your data science projects.

83
00:08:02,700 --> 00:08:08,100
I'm going to move the header and this header after the welcoming message to enhance user experience.

84
00:08:08,100 --> 00:08:16,200
Something that we can do is add a sidebar on the side of the application and to do that we can use with sd sidebar.

85
00:08:16,200 --> 00:08:23,100
So I think something interesting that we can put in the sidebar is an explanation of what the user can expect from the app.

86
00:08:23,100 --> 00:08:25,800
For that, what I'm going to do is to write a text.

87
00:08:25,800 --> 00:08:29,900
So using sd.write that will appeal in the sidebar.

88
00:08:29,900 --> 00:08:33,500
So it needs to be within the with statement.

89
00:08:33,500 --> 00:08:40,000
So let's write that.

90
00:08:40,000 --> 00:08:44,100
So your data science adventure begins with the CSV file.

91
00:08:44,100 --> 00:08:51,700
And now I'm going to add some extra text.

92
00:08:51,700 --> 00:08:57,400
Okay, and I'm going to add that to make sure that this is actually a string.

93
00:08:57,400 --> 00:09:00,200
Okay, let's rerun.

94
00:09:00,200 --> 00:09:02,700
Okay, so as you can see, this has appeared here.

95
00:09:02,700 --> 00:09:13,000
Let's click and this is our sidebar with our text in the sidebar giving a little bit of explanation of what the user can expect from the app.

96
00:09:13,000 --> 00:09:16,800
We have your data science adventure begins with the CSV file.

97
00:09:16,800 --> 00:09:21,300
You may already know that every exciting data science journey starts with a data set.

98
00:09:21,300 --> 00:09:23,700
That's why I would love for you to upload a CSV file.

99
00:09:23,700 --> 00:09:29,100
Once we have your data in hand, we'll dive into understanding it and have some fun exploring it.

100
00:09:29,100 --> 00:09:33,200
Then we'll work together to shape your business challenge into a data science framework.

101
00:09:33,200 --> 00:09:37,900
And I'll introduce you to the coolest machine learning modules and we'll use them to tackle your problem.

102
00:09:37,900 --> 00:09:44,300
Sounds fun, right?

103
00:09:44,300 --> 00:09:49,800
This looks alright like this, but we can make it a little bit better and a little bit more visually appealing.

104
00:09:49,800 --> 00:09:58,100
So what we're going to do is use some text formatting to make this look a little bit more organized.

105
00:09:58,100 --> 00:10:06,900
So first of all, let's put the first sentence into a title and then the rest is going to be the text.

106
00:10:06,900 --> 00:10:12,600
But instead of using titles and write, we're going to use write and caption.

107
00:10:12,600 --> 00:10:17,800
So caption is used more footnotes to add the text to images and things like that.

108
00:10:17,800 --> 00:10:25,700
But just because I like the formatting of this particular way of writing text, I'm just going to use it for this.

109
00:10:25,700 --> 00:10:27,300
So let's do that.

110
00:10:27,300 --> 00:10:30,900
I'm going to leave that in write.

111
00:10:30,900 --> 00:10:42,800
And then what I'm going to do is I'm going to write st.caption and then add this in brackets.

112
00:10:42,800 --> 00:10:47,100
So let's run and see what is happening.

113
00:10:47,100 --> 00:10:53,100
Brilliant. So now we have a small title at the beginning and then text.

114
00:10:53,100 --> 00:10:58,500
I'm going to write this here.

115
00:10:58,500 --> 00:11:02,400
That is better.

116
00:11:02,400 --> 00:11:08,300
Perfect.

117
00:11:08,300 --> 00:11:11,600
Something that we can do is add bold text and italics.

118
00:11:11,600 --> 00:11:13,600
So I'm going to show you how to do that.

119
00:11:13,600 --> 00:11:25,700
So if we write here an asterisk and here another asterisk at the end over string and here we add double asterisk.

120
00:11:25,700 --> 00:11:34,000
When we run, we're going to see that the first sentence is now going to be italics and the rest is going to be bold.

121
00:11:34,000 --> 00:11:43,000
So that means that as you can see, if we want to write text in bold, we use double asterisk and then we want to write text in italics.

122
00:11:43,000 --> 00:11:50,500
We write just one asterisk.

123
00:11:50,500 --> 00:11:54,300
Okay, let's continue talking about formatting and the appearance of our app.

124
00:11:54,300 --> 00:12:00,400
I think it would be cool if we could add a little line here and we can achieve that by using dividers.

125
00:12:00,400 --> 00:12:06,400
So in StripLid, in order to add dividers, we can use manst.divider.

126
00:12:06,400 --> 00:12:17,300
So just as this, if we run, we will see that this line has appeared here.

127
00:12:17,300 --> 00:12:24,300
And finally, something that I would like to add is just to say that I made this app.

128
00:12:24,300 --> 00:12:32,800
So I'm going to use caption.

129
00:12:32,800 --> 00:12:42,200
Okay, and if we run, we're going to see that that appears here.

130
00:12:42,200 --> 00:12:45,400
I think it would look better if we could make that centered.

131
00:12:45,400 --> 00:12:50,900
Luckily in StripLid, we can use HTML in order to further format our text.

132
00:12:50,900 --> 00:12:55,900
And that is what I'm going to do now in order to make this text move to the center.

133
00:13:03,800 --> 00:13:09,800
And we need to add another parameter, which is this one.

134
00:13:09,800 --> 00:13:14,800
The default is set to false, but in order to make the HTML work, we need to set that to true.

135
00:13:14,800 --> 00:13:15,800
So let's do that.

136
00:13:15,800 --> 00:13:22,800
Okay, and when that is done, we cannot rerun this.

137
00:13:22,800 --> 00:13:30,800
And there you can see that it has been centered.

138
00:13:30,800 --> 00:13:32,800
There are other things that we can add to our application.

139
00:13:32,800 --> 00:13:35,800
Something that is quite interesting is expanders.

140
00:13:35,800 --> 00:13:44,800
So let's see how to do that with st.expander.

141
00:13:44,800 --> 00:13:49,800
So inside of the expander, we're just going to write some placeholder text.

142
00:13:49,800 --> 00:13:52,800
And let's run and see what happens.

143
00:13:52,800 --> 00:13:55,800
So as you can see, this has appeared here.

144
00:13:55,800 --> 00:14:01,800
So the user can click and then it can decide, you know, they want to look at that information or not.

145
00:14:01,800 --> 00:14:05,800
So then that we can also add our emojis just to make it a little bit more fun.

146
00:14:05,800 --> 00:14:18,800
So I'm just going to add a couple there.

147
00:14:18,800 --> 00:14:21,800
Okay, let's rerun and see what happens.

148
00:14:21,800 --> 00:14:28,800
So now the emojis have appeared on the screen.

149
00:14:28,800 --> 00:14:33,800
Okay, so now I'm going to show you how to add a button and how to manage what is called session state.

150
00:14:33,800 --> 00:14:42,800
So in order to add a button in striplet, I'm going to add it just before the header is as easy as this.

151
00:14:42,800 --> 00:14:50,800
So, well, it's with st.button, but because we want to trigger an action, we're going to add an if statement.

152
00:14:50,800 --> 00:14:58,800
So if st.button, let's get started.

153
00:14:58,800 --> 00:15:04,800
So when the user clicks the button, then this is going to happen.

154
00:15:04,800 --> 00:15:07,800
I'm going to move that there.

155
00:15:07,800 --> 00:15:15,800
And in fact, let me just move all of this after the sidebar.

156
00:15:15,800 --> 00:15:20,800
Okay, okay, so let's rerun.

157
00:15:20,800 --> 00:15:26,800
And we can see that now this button appears here when we click.

158
00:15:26,800 --> 00:15:29,800
Then we have the header and the subheader.

159
00:15:29,800 --> 00:15:40,800
So let's continue building our app and I'll show you in a second why session state is so important.

160
00:15:40,800 --> 00:15:45,800
As we said in the explanation, your data science adventure begins with a CSV file.

161
00:15:45,800 --> 00:15:50,800
So now I'm going to show you how to integrate a CSV uploader into your application.

162
00:15:50,800 --> 00:15:57,800
Streamlin provides a convenient function called st.fileuploader for adding file uploads in your application.

163
00:15:57,800 --> 00:16:00,800
So it's as simple as adding the following.

164
00:16:00,800 --> 00:16:08,800
So after the button, we are going to add the following.

165
00:16:08,800 --> 00:16:13,800
And then we need to specify the type of file that we want the user to upload.

166
00:16:13,800 --> 00:16:19,800
So in this case, it's going to be a CSV file.

167
00:16:19,800 --> 00:16:21,800
Sorry, this isn't equal.

168
00:16:21,800 --> 00:16:24,800
Right, let's rerun.

169
00:16:24,800 --> 00:16:29,800
Okay, so now you can see that that appears there.

170
00:16:29,800 --> 00:16:31,800
Let's try it out.

171
00:16:31,800 --> 00:16:36,800
Okay, so this is the data set that I'm going to use is a Twitter stock market data.

172
00:16:36,800 --> 00:16:42,800
I'm going to upload this and this appears here.

173
00:16:42,800 --> 00:16:43,800
Great.

174
00:16:43,800 --> 00:16:49,800
But we will like this to appear after we click the let's get started button.

175
00:16:49,800 --> 00:16:55,800
So we're just going to move this and let's rerun.

176
00:16:55,800 --> 00:17:00,800
So now we click this, how there's appear here.

177
00:17:00,800 --> 00:17:02,800
And then we have the file uploader.

178
00:17:02,800 --> 00:17:08,800
We click, we select our file, but boom, it disappeared.

179
00:17:08,800 --> 00:17:13,800
Okay, so it turns out that patterns are an unstable and that means that buttons return

180
00:17:13,800 --> 00:17:17,800
only momentarily during the page load immediately after their click.

181
00:17:17,800 --> 00:17:20,800
And then they refer to false.

182
00:17:20,800 --> 00:17:24,800
So in order to work around this is streaming allowed you to use session state,

183
00:17:24,800 --> 00:17:30,800
which is essential for maintaining information and interactions between different sections of your application.

184
00:17:30,800 --> 00:17:35,800
So I'm going to show you how to implement this with the button that we have in our application.

185
00:17:35,800 --> 00:17:50,800
So first of all, what we need to do is to initialize the key in the session state.

186
00:17:50,800 --> 00:18:05,800
So following the notation that we've used for the statement, I'm going to create this function called collect.

187
00:18:05,800 --> 00:18:23,800
And finally, what we need to do is to modify your button.

188
00:18:23,800 --> 00:18:29,800
And then under this if statement, then we can add the CSB uploader.

189
00:18:29,800 --> 00:18:32,800
So let's rerun, see what happens.

190
00:18:32,800 --> 00:18:42,800
Okay, so now we click, disappears, browse file, choose our file, we upload and nothing disappears.

191
00:18:42,800 --> 00:18:49,800
So we have fixed this problem using session state.

192
00:18:49,800 --> 00:18:56,800
Okay, so now that the users can upload their CSB files, it's time to convert the uploaded file into a pandas data frame,

193
00:18:56,800 --> 00:19:01,800
which is the standard data structure for data manipulation and analysis in Python.

194
00:19:01,800 --> 00:19:13,800
So for that, what we're going to do is after the user uploads the file, what we're going to say is if the user CSB file actually exists,

195
00:19:13,800 --> 00:19:17,800
we're going to transform that into a data frame.

196
00:19:17,800 --> 00:19:27,800
Also, what we're going to do is to say the low memory to false, just because the default is to actually optimize memory,

197
00:19:27,800 --> 00:19:30,800
but just in case the file is really large, we're just going to set that to false.

198
00:19:30,800 --> 00:19:36,800
Also, what we're going to do is to ensure that the file pointer is at the start of the file just in case.

199
00:19:36,800 --> 00:19:46,800
So let's write all that down.

200
00:19:46,800 --> 00:19:50,800
So that ensures that the file pointer is at the start of the file.

201
00:19:50,800 --> 00:19:59,800
And then we're going to transform this into a data frame.

202
00:19:59,800 --> 00:20:09,800
Okay, and now the data frame is now ready for analysis and exploration.

203
00:20:09,800 --> 00:20:17,800
Our AI assistant relies on large language models to provide natural language understanding and generate responses.

204
00:20:17,800 --> 00:20:24,800
In this section, what we're going to cover is how to load and initialize the LN model for your string like application.

205
00:20:24,800 --> 00:20:33,800
So first of all, what we're going to do is we're going to create an instance of the LN model and also we're going to set the temperature parameter to zero.

206
00:20:33,800 --> 00:20:35,800
What does that mean?

207
00:20:35,800 --> 00:20:40,800
Well, the temperature, what it does in controls the randomness of the model.

208
00:20:40,800 --> 00:20:44,800
So the higher the temperature, the more creative your model is going to be.

209
00:20:44,800 --> 00:20:52,800
So for this particular project, we're going to let the temperature be low in order to make the responses a little bit more deterministic.

210
00:20:52,800 --> 00:20:54,800
So let's write that down.

211
00:20:54,800 --> 00:20:57,800
So we create an instance of the model.

212
00:20:57,800 --> 00:21:00,800
We're going to call it LLM.

213
00:21:00,800 --> 00:21:14,800
And then we're going to set the temperature to zero.

214
00:21:14,800 --> 00:21:21,800
So first thing we're going to use our model for is to generate some information and we're going to add that to the sidebar.

215
00:21:21,800 --> 00:21:28,800
So I think it will be interesting if we could add some information about what is the steps of the EDR and we add that into the sidebar.

216
00:21:28,800 --> 00:21:35,800
And if the user wants to look at it because it finds it useful, just need to click and the information will expand.

217
00:21:35,800 --> 00:21:37,800
So let's do that.

218
00:21:37,800 --> 00:21:48,800
So I'm going to move our LLM model first here.

219
00:21:48,800 --> 00:21:58,800
And then what we're going to do is in the expander, what are the steps of EDA?

220
00:21:58,800 --> 00:22:05,800
And what is going to right now is the steps of the EDA, but we're not going to manually type it down.

221
00:22:05,800 --> 00:22:08,800
The LLM is going to give us this information.

222
00:22:08,800 --> 00:22:14,800
So in order to do that, what we're going to do is we're going to say, OK, LLM.

223
00:22:14,800 --> 00:22:27,800
And then we're going to ask the same, what are the steps of EDA?

224
00:22:27,800 --> 00:22:30,800
So let's rerun.

225
00:22:30,800 --> 00:22:33,800
OK, so very important.

226
00:22:33,800 --> 00:22:36,800
We need to add the open AI key.

227
00:22:36,800 --> 00:22:39,800
So let's do that very quickly.

228
00:22:39,800 --> 00:22:45,800
So we're going to add it here after we have imported the required packages.

229
00:22:45,800 --> 00:22:52,800
And also something that we need to do is to load the dot environment just to make sure that the variables are correctly read.

230
00:22:52,800 --> 00:23:03,800
Let's do that.

231
00:23:03,800 --> 00:23:16,800
OK, so what we're going to do, and you'll see why later, is we're going to move this at the very end.

232
00:23:16,800 --> 00:23:23,800
And we're going to add another with SD dot site bar.

233
00:23:23,800 --> 00:23:26,800
Oh, and I saw another error.

234
00:23:26,800 --> 00:23:28,800
So that should be like that.

235
00:23:28,800 --> 00:23:29,800
Right, let's rerun.

236
00:23:29,800 --> 00:23:34,800
We're going to browse the file, upload.

237
00:23:34,800 --> 00:23:37,800
It's running.

238
00:23:37,800 --> 00:23:39,800
And let's check the sidebar.

239
00:23:39,800 --> 00:23:41,800
So we have the expander here.

240
00:23:41,800 --> 00:23:50,800
And if we click, we can see that the LLM has generated the steps of the EDA.

241
00:23:50,800 --> 00:23:59,800
In this section, what we're going to do is we're going to cover how to create a pandas agent and enable it to analyze and provide insights about the data.

242
00:23:59,800 --> 00:24:08,800
So first of all, what we need to do is to create an instance of the pandas agent bypassing our LLM model and the data frame that we want to analyze.

243
00:24:08,800 --> 00:24:15,800
So in order to do that, what we're going to do is.

244
00:24:15,800 --> 00:24:25,800
So here we have pandas agent.

245
00:24:25,800 --> 00:24:30,800
And then we use the create pandas data frame agent, and we're going to pass the LLM.

246
00:24:30,800 --> 00:24:37,800
And we are also going to pass the data frame, and we're going to set the reverse to true.

247
00:24:37,800 --> 00:24:48,800
So the default is false, and that's just to see the train of thought of the agent.

248
00:24:48,800 --> 00:24:54,800
So first thing we're going to use our pandas agent for is to answer specific questions about the data.

249
00:24:54,800 --> 00:25:02,800
So for example, let's create a question that is, what is the meaning of the colons?

250
00:25:02,800 --> 00:25:13,800
What we're going to do is to create a variable that is going to be called colons meaning, for example, that is going to be the response over pandas agent.

251
00:25:13,800 --> 00:25:21,800
So for that, we need to say, okay, pandas agent dot run, and then we're going to pass the question.

252
00:25:21,800 --> 00:25:26,800
Okay, so now we want to see the output in our application.

253
00:25:26,800 --> 00:25:35,800
So we write ST dot write, and we're going to write their colons meaning.

254
00:25:35,800 --> 00:25:40,800
Let's run.

255
00:25:40,800 --> 00:25:41,800
Cool.

256
00:25:41,800 --> 00:25:51,800
So the columns represent the date, opening price, highest price, lowest price, closing price, adjust, and adjust closing price and volume of the stock.

257
00:25:51,800 --> 00:25:59,800
So our pandas agent is able to answer this predefined question that we have passed through it.

258
00:25:59,800 --> 00:26:03,800
So what we're going to do now is to create a function with certain predefined questions.

259
00:26:03,800 --> 00:26:09,800
So when we run these functions, all these questions will be answered by the pandas agent.

260
00:26:09,800 --> 00:26:15,800
So the type of questions that we're going to ask are very general EDA questions.

261
00:26:15,800 --> 00:26:23,800
For example, how do the rows of the data set look like?

262
00:26:23,800 --> 00:26:25,800
As I said, what are the meaning of the columns?

263
00:26:25,800 --> 00:26:28,800
How many missing values do we have?

264
00:26:28,800 --> 00:26:38,800
Are any duplicate values a little bit about data summarization and even a little bit of feature engineering?

265
00:26:38,800 --> 00:26:48,800
We're going to ask the pandas agent if there are any new features that it would be interesting to create.

266
00:26:48,800 --> 00:26:52,800
So let's write down this function.

267
00:26:52,800 --> 00:26:58,800
So we're going to leave the pandas agent outside, and then I'll just remove this for now.

268
00:26:58,800 --> 00:27:06,800
And we'll just create a function that's going to be function agent.

269
00:27:06,800 --> 00:27:17,800
So we're going to use the pandas agent to generate all the answers of these questions.

270
00:27:17,800 --> 00:27:30,800
Okay, so having written a function down, let's call the function and then let's run the app and let's see what happens.

271
00:27:30,800 --> 00:27:35,800
Okay, we rerun.

272
00:27:35,800 --> 00:27:37,800
Okay, so this has appeared here.

273
00:27:37,800 --> 00:27:42,800
So we can see how the first rows of our data set look like.

274
00:27:42,800 --> 00:27:45,800
Then we have the meaning of the columns.

275
00:27:45,800 --> 00:27:49,800
We have the missing values saying that there are no duplicates.

276
00:27:49,800 --> 00:27:59,800
Information about the data summarization, a correlation between variables and also what are the features that we could maybe create.

277
00:27:59,800 --> 00:28:04,800
And also it's talking about potential layers.

278
00:28:05,800 --> 00:28:13,800
Okay, now imagine that the user is interested in a very specific variable.

279
00:28:13,800 --> 00:28:17,800
And we want the user to select the variable for further study.

280
00:28:17,800 --> 00:28:21,800
Well, we can do this using text input.

281
00:28:21,800 --> 00:28:27,800
This is a feature that Streamlick has in where the user can actually write text in the application.

282
00:28:27,800 --> 00:28:35,800
Okay, so user question is going to be a text input.

283
00:28:35,800 --> 00:28:42,800
And we're going to ask what variable are you interested in?

284
00:28:42,800 --> 00:28:46,800
We're going to run and see what happens.

285
00:28:46,800 --> 00:28:56,800
And as you can see, this is running again and you would agree with me that it would be better if the information stays and it doesn't run again.

286
00:28:57,800 --> 00:29:00,800
Okay, so now what variable are you interested in?

287
00:29:00,800 --> 00:29:10,800
Well, we haven't done anything with this, but let's say volume, enter, and again, everything runs again.

288
00:29:10,800 --> 00:29:13,800
So how do we fix this?

289
00:29:13,800 --> 00:29:25,800
So every single time we are entering something, it doesn't run again.

290
00:29:25,800 --> 00:29:28,800
So we can sort this issue using caching in Streamlick.

291
00:29:28,800 --> 00:29:35,800
So caching is an important feature that allows you to store and reuse the results of computationally expensive functions,

292
00:29:35,800 --> 00:29:40,800
which improves the performance and responsiveness of our AI assistant.

293
00:29:40,800 --> 00:29:47,800
So we're going to use the cache decorator to make sure that the functions are not run and run again.

294
00:29:47,800 --> 00:29:50,800
And we avoid the app to run everything again.

295
00:29:50,800 --> 00:29:53,800
So one thing appears after another.

296
00:29:53,800 --> 00:29:56,800
So let me show you how to do this.

297
00:29:56,800 --> 00:30:03,800
And we're going to create a couple more functions and organize our script a little bit more.

298
00:30:03,800 --> 00:30:19,800
So first of all, what we're going to do is we are going to move our function agent and our pandas agent earlier in the script.

299
00:30:23,800 --> 00:30:34,800
So there after the element model, so what we're going to do is to add functions of the main script.

300
00:30:34,800 --> 00:30:44,800
So here we're going to add this function agent and then I'm going to move the pandas agent early on as well.

301
00:30:44,800 --> 00:30:50,800
So we are importing the libraries.

302
00:30:50,800 --> 00:30:54,800
We are setting the open AI key.

303
00:30:54,800 --> 00:31:05,800
And then what we're going to do is we're going to put there after the open AI key,

304
00:31:05,800 --> 00:31:11,800
we are going to set the title and welcoming message.

305
00:31:11,800 --> 00:31:20,800
And so let's write here title and then welcoming message.

306
00:31:20,800 --> 00:31:30,800
Okay. And after we've done that, we are going to put here the explanation site bar.

307
00:31:30,800 --> 00:31:34,800
So let's grab that.

308
00:31:34,800 --> 00:31:37,800
So this is this part here.

309
00:31:37,800 --> 00:31:47,800
So we're just going to move that just necessary so things work fine and what we cash the functions.

310
00:31:47,800 --> 00:31:57,800
So yes, as I said, here is where the explanation site bar is going to be.

311
00:31:57,800 --> 00:32:05,800
And then we are going to move the button after this.

312
00:32:05,800 --> 00:32:14,800
So this is all about the button that we really don't want.

313
00:32:14,800 --> 00:32:18,800
So we don't want the header and this header there.

314
00:32:18,800 --> 00:32:22,800
We will use it later for the sections that we are created.

315
00:32:22,800 --> 00:32:27,800
So we are going to move all this.

316
00:32:28,800 --> 00:32:35,800
Yes, after the sidebar.

317
00:32:35,800 --> 00:32:42,800
So yes, we have the explanation sidebar and then we are initializing the key in the session state.

318
00:32:42,800 --> 00:32:46,800
Adding the button, we are uploading the file.

319
00:32:46,800 --> 00:32:53,800
And when we upload the file and we convert it into a data frame,

320
00:32:53,800 --> 00:32:55,800
then is when the game starts, right?

321
00:32:55,800 --> 00:33:01,800
Then is when everything is built and generated.

322
00:33:01,800 --> 00:33:14,800
So that means that we are actually going to move this in to this F statement.

323
00:33:14,800 --> 00:33:27,800
And then or pandas agent is going to go here and the same for the functions.

324
00:33:27,800 --> 00:33:32,800
And then we'll move this as well.

325
00:33:32,800 --> 00:33:34,800
So we have the pandas agent there.

326
00:33:34,800 --> 00:33:38,800
This is something that we already have so we can remove this.

327
00:33:39,800 --> 00:33:47,800
And first function that I'm going to create is after initializing the LLM model,

328
00:33:47,800 --> 00:33:53,800
we are going to create a function for creating the steps of the EDA.

329
00:33:53,800 --> 00:34:05,800
So that is going to be steps A and then here is just going to be this bit, right?

330
00:34:06,800 --> 00:34:11,800
So the LLM is going to generate that and that is not going to run again

331
00:34:11,800 --> 00:34:15,800
because we're going to decorate that with the cache data decorator.

332
00:34:15,800 --> 00:34:17,800
So let me show you how to do that.

333
00:34:17,800 --> 00:34:26,800
So here we are going to add this and this is going to be called steps EDA.

334
00:34:26,800 --> 00:34:30,800
And then that is what we are going to return.

335
00:34:30,800 --> 00:34:31,800
Excellent.

336
00:34:31,800 --> 00:34:36,800
So this will be computed and that's it and will be computed again.

337
00:34:36,800 --> 00:34:37,800
Amazing.

338
00:34:37,800 --> 00:34:44,800
Then we have the pandas agent and then the function that is involving the pandas agent.

339
00:34:44,800 --> 00:34:54,800
So let's put here function sidebar and then this is a function main.

340
00:34:54,800 --> 00:34:55,800
Excellent.

341
00:34:56,800 --> 00:35:05,800
So all this is running and then it's time to add a header.

342
00:35:10,800 --> 00:35:15,800
So first thing that we're doing is exploratory data analysis, right?

343
00:35:15,800 --> 00:35:17,800
So that will be a really good header.

344
00:35:18,800 --> 00:35:29,800
And then we're going to move this sidebar that involves the LLMs there.

345
00:35:29,800 --> 00:35:34,800
But now we're just going to write steps EDA.

346
00:35:34,800 --> 00:35:38,800
So what this function returns.

347
00:35:38,800 --> 00:35:39,800
Great.

348
00:35:39,800 --> 00:35:44,800
And then we are running the function agent.

349
00:35:44,800 --> 00:35:51,800
And then we have the user question.

350
00:35:51,800 --> 00:35:57,800
And let's add a subheader here.

351
00:35:57,800 --> 00:36:06,800
So let's say general information about the dataset.

352
00:36:07,800 --> 00:36:16,800
And then here, let's say variable of study.

353
00:36:16,800 --> 00:36:17,800
Okay.

354
00:36:17,800 --> 00:36:20,800
And finally, we're going to hash the function agent.

355
00:36:20,800 --> 00:36:24,800
So let's do that.

356
00:36:24,800 --> 00:36:25,800
Cool.

357
00:36:25,800 --> 00:36:30,800
So let's rerun and see what happens.

358
00:36:30,800 --> 00:36:31,800
Okay.

359
00:36:31,800 --> 00:36:42,800
So running function agent, this header and the subheader, the function agent is running.

360
00:36:42,800 --> 00:36:43,800
Okay.

361
00:36:43,800 --> 00:36:50,800
So now hopefully when we write volume here and we press enter, nothing will runs again.

362
00:36:50,800 --> 00:36:51,800
Brilliant.

363
00:36:51,800 --> 00:37:04,800
So we have sort out this issue of things running again and again by using caching in streamlight.

364
00:37:04,800 --> 00:37:05,800
Okay.

365
00:37:05,800 --> 00:37:09,800
So coming back to this variable of study, what we're going to do is to create a function

366
00:37:09,800 --> 00:37:14,800
that does some exploratory data analysis, but is specific to this variable.

367
00:37:14,800 --> 00:37:22,800
And I think the first thing that will be interesting to show is a graph of this variable.

368
00:37:22,800 --> 00:37:24,800
Streamlight has a really good visualization properties.

369
00:37:24,800 --> 00:37:28,800
So we're going to make use of that to create a line chart.

370
00:37:28,800 --> 00:37:32,800
So we are going to add a function there.

371
00:37:32,800 --> 00:37:40,800
So first we hash the function and then we're going to call this a function.

372
00:37:40,800 --> 00:37:41,800
Okay.

373
00:37:41,800 --> 00:37:46,800
So first of all, we're going to use the line chart from streamlight.

374
00:37:46,800 --> 00:37:50,800
And that is ST dot line chart.

375
00:37:50,800 --> 00:37:55,800
What we're going to pass is our data frame and then the user question variables.

376
00:37:55,800 --> 00:38:02,800
So did I call it a user question?

377
00:38:02,800 --> 00:38:03,800
Okay.

378
00:38:03,800 --> 00:38:04,800
So user question.

379
00:38:04,800 --> 00:38:05,800
And variable.

380
00:38:05,800 --> 00:38:10,800
We're going to call it.

381
00:38:10,800 --> 00:38:18,800
So if we actually let's do this, if we actually run this, let's see what happens.

382
00:38:18,800 --> 00:38:29,800
Okay.

383
00:38:29,800 --> 00:38:34,800
I forgot that.

384
00:38:34,800 --> 00:38:35,800
Okay.

385
00:38:35,800 --> 00:38:36,800
Excellent.

386
00:38:36,800 --> 00:38:41,800
So you can see now I line chart of the variable volume.

387
00:38:41,800 --> 00:38:47,800
So now I'm going to use the pandas agent in the same way I did before to ask a specific

388
00:38:47,800 --> 00:38:49,800
questions about this variable.

389
00:38:49,800 --> 00:38:56,800
But now instead of just writing questions, I write questions and I'll pass the user question

390
00:38:56,800 --> 00:38:57,800
variable.

391
00:38:57,800 --> 00:39:02,800
So we can answer specific questions about this specific variable.

392
00:39:02,800 --> 00:39:12,800
So for example, imagine that what we want is to know the summary of the statistics, right,

393
00:39:12,800 --> 00:39:14,800
of the user question variables.

394
00:39:14,800 --> 00:39:22,800
So we're going to ask a summary, summary statistics.

395
00:39:22,800 --> 00:39:37,800
So, so for example, pandas agent dot run, and it's going to be gave me a summary of the

396
00:39:38,800 --> 00:39:40,800
statistics off.

397
00:39:40,800 --> 00:39:47,800
And then we have the user question variable.

398
00:39:47,800 --> 00:39:55,800
And then we're going to use ST dot write to write this summary statistics.

399
00:39:55,800 --> 00:40:02,800
And we're going to add older things, like for example, checking for normality, checking

400
00:40:02,800 --> 00:40:15,800
for liars, checking for trends and add all this to our function.

401
00:40:15,800 --> 00:40:16,800
Okay.

402
00:40:16,800 --> 00:40:23,800
So let's rerun and let's see what happens.

403
00:40:23,800 --> 00:40:24,800
Okay.

404
00:40:24,800 --> 00:40:25,800
So this has changed.

405
00:40:25,800 --> 00:40:26,800
So it's running again.

406
00:40:26,800 --> 00:40:31,800
And great is given a summary of statistics of this variable is saying that the variable

407
00:40:31,800 --> 00:40:34,800
is not normal, but is skew to the right.

408
00:40:34,800 --> 00:40:37,800
And there is an outlier present.

409
00:40:37,800 --> 00:40:38,800
Great.

410
00:40:38,800 --> 00:40:41,800
And there is a cyclic pattern of increasing volume in the summer months.

411
00:40:41,800 --> 00:40:47,800
And there are five missing values of volume in order to avoid issues in case that user

412
00:40:47,800 --> 00:40:53,800
enters an empty string, and all there is no response.

413
00:40:53,800 --> 00:40:57,800
And then we continue writing things because that would definitely create a problem.

414
00:40:57,800 --> 00:41:03,800
What we're going to do is to write a couple of lines of code to sort that issue.

415
00:41:03,800 --> 00:41:11,800
So we're going to say that the user question variable is not non and also if it's different

416
00:41:11,800 --> 00:41:17,800
that an empty string, then in that case is when we're going to run or function.

417
00:41:18,800 --> 00:41:23,800
And then we will continue right in a or code after that.

418
00:41:23,800 --> 00:41:34,800
So it's not non.

419
00:41:34,800 --> 00:41:35,800
All right.

420
00:41:35,800 --> 00:41:42,800
And then for the next section, we're going to add a header that is going to be further

421
00:41:42,800 --> 00:41:45,800
study.

422
00:41:45,800 --> 00:41:52,800
So imagine now that the user wants to add specific questions that are not pretty fine

423
00:41:52,800 --> 00:41:58,800
in our app.

424
00:41:58,800 --> 00:42:04,800
So what we can do now is to create another text input in where the user can enter whatever

425
00:42:04,800 --> 00:42:05,800
question they want.

426
00:42:05,800 --> 00:42:10,800
And we're going to use this pandas agent to answer this specific question.

427
00:42:10,800 --> 00:42:18,800
So so first of all, if the question variable exists, then we're going to say user question

428
00:42:18,800 --> 00:42:23,800
data frame.

429
00:42:23,800 --> 00:42:26,800
So we're going to say here, is there anything else that you would like to know about the

430
00:42:26,800 --> 00:42:30,800
data frame?

431
00:42:30,800 --> 00:42:34,800
Okay, so that was our user question data frame.

432
00:42:34,800 --> 00:42:39,800
And now again, if I'm just going to copy and paste this.

433
00:42:39,800 --> 00:42:53,800
So if the question is not known, and also if it's not empty, and also actually not in

434
00:42:53,800 --> 00:43:01,800
empty string, or if they say, okay, I actually don't want to know anything else, I'm very

435
00:43:01,800 --> 00:43:04,800
happy with the information I've had so far.

436
00:43:05,800 --> 00:43:08,800
Imagine that that happens.

437
00:43:08,800 --> 00:43:15,800
Then what we're going to do is we're going to run a function that we're going to create

438
00:43:15,800 --> 00:43:16,800
in a second.

439
00:43:16,800 --> 00:43:23,800
So this function is going to be called a function question and data frame.

440
00:43:23,800 --> 00:43:32,800
And in this function, what we're going to do is to ask the pandas agent to answer this

441
00:43:32,800 --> 00:43:33,800
specific question.

442
00:43:33,800 --> 00:43:46,800
So again, and then we're going to create this function called function question.

443
00:43:46,800 --> 00:43:59,800
Okay, so what is going to happen here is this extra information is going to be stored in

444
00:43:59,800 --> 00:44:00,800
this variable.

445
00:44:00,800 --> 00:44:10,800
And we're going to use the pandas agent.run to answer specifically this user question

446
00:44:10,800 --> 00:44:11,800
data frame.

447
00:44:11,800 --> 00:44:19,800
And then we're going to add a return and I'm going to add a st.write in order to actually

448
00:44:19,800 --> 00:44:23,800
write the answer to this question.

449
00:44:23,800 --> 00:44:24,800
Cool.

450
00:44:24,800 --> 00:44:32,800
And then we have called this here.

451
00:44:32,800 --> 00:44:46,800
If the user is actually in the user question data frame is actually no and or no, then

452
00:44:46,800 --> 00:44:55,800
we're just going to add an empty string.

453
00:44:55,800 --> 00:44:58,800
Let's rerun.

454
00:44:58,800 --> 00:45:03,800
Okay, again, the colon.

455
00:45:03,800 --> 00:45:06,800
Let's rerun.

456
00:45:07,800 --> 00:45:17,800
Okay, so is there any strong core relation between some of the variables?

457
00:45:17,800 --> 00:45:21,800
Let's see what happens.

458
00:45:21,800 --> 00:45:28,800
Okay, so there is a stronger relation between open, high, low, close and add close but not

459
00:45:28,800 --> 00:45:38,800
between volume in the other variables.

460
00:45:38,800 --> 00:45:45,800
Does the variable close have many peaks?

461
00:45:45,800 --> 00:45:48,800
And let's see what it says.

462
00:45:48,800 --> 00:45:52,800
Yes, the variable close has a peak of 77 point something.

463
00:45:52,800 --> 00:45:53,800
Cool.

464
00:45:53,800 --> 00:45:54,800
Amazing.

465
00:45:54,800 --> 00:45:59,800
Okay, so that is all for this first video of the series, but what is next?

466
00:45:59,800 --> 00:46:04,800
You can continue your data exploration by asking more questions, selecting different variables

467
00:46:04,800 --> 00:46:07,800
and seeking additional insights from our AI assistant.

468
00:46:07,800 --> 00:46:10,800
In the next video of this series, we will continue building our assistant.

469
00:46:10,800 --> 00:46:15,800
It will be able to help you in converting your business challenge into a data science framework,

470
00:46:15,800 --> 00:46:18,800
over in guidance on model selection, providing predictions and more.

471
00:46:18,800 --> 00:46:23,800
We will introduce the concepts of chains and tools and we will be exploring other agents.

472
00:46:23,800 --> 00:46:27,800
Be sure to download the completed project and sample data on the Digilab Academy website,

473
00:46:27,800 --> 00:46:31,800
where you can also find more resources and courses on data science and AI.

474
00:46:31,800 --> 00:46:34,800
You can also find the written tutorial linked in the description.

475
00:46:34,800 --> 00:46:38,800
Don't forget to like and subscribe to be updated with the latest tutorials and upcoming content.

476
00:46:38,800 --> 00:46:42,800
Thank you for joining me in this journey and I can't wait to see you in the next part.

477
00:46:42,800 --> 00:46:43,800
Bye.

