start	end	text
0	5600	Imagine accelerating your machine learning projects with an AI assistant that will save you hours and hours of work.
9700	11200	Welcome to Digilab Academy.
11200	16900	You go to destination for in-depth courses and resources to help you master the world of data science and AI.
16900	23100	I'm Anna and in this series I'm going to show you how to build your own AI assistant using StreamLid and LangChain.
23100	29000	I'll walk you through the entire process from selling the required libraries to solve a machine learning project using AI.
29000	33700	Make sure that you take the full reading tutorial that accompanies this video in the Digilab Academy website.
33700	39800	You'll find the link in the video description below, plus you can download the final project and also the dataset that we will be using.
39800	42500	Now let's break down what to expect in this video.
42500	50000	In this project, StreamLid is the foundation for the user interface, allowing you to upload CSV files, visualize data and interact with the AI assistant.
50000	51800	The beauty of StreamLid is its simplicity.
51800	57200	Even if you have limited web development experience, you can create dynamic and interactive data applications.
57200	63400	While StreamLid is beginner-friendly, it also offers customization options for those who want to create more sophisticated applications.
63400	71500	Finally, StreamLid makes it easy to deploy your web apps to the cloud or share them with others, further enhancing its utility for collaborative data projects.
71500	76900	We'll start by structuring their StreamLid app with titles, headings, subheadings, captions and text formatting.
76900	83000	Next, we'll implement dividers to segment your content, making it easier for users to navigate through your AI assistant.
83000	86400	Uploading CSV files is essential for this data-driven app.
86400	88100	We'll cover how to implement this.
88100	95500	To enhance user interaction, we'll create a dynamic sidebar and expanders, and we will discuss how to display graphs for data visualization.
95500	100500	We'll also explore text input, which allow users to interact with your AI assistant through text.
100500	103100	Caching is a powerful technique for optimizing performance.
103100	106000	We'll explore this topic and show how you implement it effectively.
106000	111500	Understanding session state and implementing non-statefold buttons are a key to creating responsive applications.
111500	112900	We'll cover this in detail.
112900	115000	Now, let's shift our focus to LangChain.
115000	121800	LangChain is a framework that can be used to build conversational AI systems that can understand and respond to user queries.
121800	127700	Its main components are models, agents, tools, prompt templates, chains, memory and indexes.
127700	132700	The project integrates OpenAI's GPT-3 3.5 Turbo Large Language Model.
132700	139700	LLMs are integrated into the StreamLid application, allowing you to have a dynamic real-time interactions with the AI assistant.
139700	144100	You can ask questions, seek explanations and receive immediate responses.
144100	146300	We'll start by setting the OpenAI key.
146300	155200	Then we will explore how to load and use OpenAI large language models to generate information, open up a world of possibilities for your AI assistant.
155200	161500	With the Pandas Agent, you can answer specific predefined questions about your data frame or any variable of your choice.
161500	163000	I'll show you how to set this up.
163000	167700	You can also enable your AI assistant to answer specific questions chosen by the user.
167700	171600	What you learn here can be applied to your own data analysis problems.
171600	177000	For example, you might want to create an assistant to help you explore sales data or customer reviews.
177000	182500	Why we'll focus on one specific use case, you can easily adapt these techniques to your unique needs.
182500	185600	So without further ado, let's start building our AI assistant.
185600	189500	Hit that like button and don't forget to subscribe for more data science adventures.
189500	190400	Let's get started.
191000	199800	Okay, so before we start building our AI assistant, there are two things that we need to do.
199800	203300	First is to set the API key and the second is to run Streamlet.
203300	213100	To set the API key, you need an API key from OpenAI and you need to boot VAL into a different script in your same directory.
213200	222500	What I've done is I created this API key file and there what we need to do is store our key.
222500	228800	So here you would put your key as a string, but in this file called API key.
228800	235500	The reason that I'm not sharing is because this key is a secret key and it shouldn't be shared.
235500	241400	So let's remove that and just remember that that goes to your API key script.
241400	243200	The second is to run Streamlet.
243200	249400	For that, what I want you to do is to open the terminal, go to your directory and what I want you to do is to run Streamlet using this command.
249400	258200	So that is Streamlet run and then the name of your API script where you're going to write the code for the AI assistant and just press enter.
258200	264900	And what's going to happen is that a new window is going to pop up in your browser and there's where we're going to see your app.
265900	273900	Now we're going to import the packages that are going to provide the necessary functionality for our project.
273900	282600	The packages that we're going to import are OS, API key, long chain, dot M, Streamlet and pandas.
282600	285000	So let's write that down.
285000	295600	Okay, I'm going to close this player so we can see the code better.
295600	299100	So as you can see, we have imported the recurrent libraries.
299100	303600	So the OS library provides a way of using operating system dependent functionality.
303600	308100	Then we have API key in order to load or API key correctly.
308200	316100	Then Streamlet that is the heart of our project really then behind this library fundamental for data manipulation and visualization.
316100	325500	This we have the package long chain, which is specific to our project and that incorporates open AI language models that is going to allow us to interact with the assistant.
325500	335500	And then we have dot M, very important package to make sure that sensitive information such as the API key is securely stored.
339100	351100	Okay, so now we're going to start building the user interface a little and I'm going to show you how to add titles, subtitles, headings and other stuff that is going to make the user experience a little bit more engaging.
351100	357800	So first of all, we want our assistant to have a title and also we want to have a welcoming message.
357800	359900	Okay, so let's write that.
359900	370700	So in extremely in order to write a title, we do sd.title and then inside of the brackets, we write the title that we want to add to our app.
370700	380700	So I'm going to call a assistant for data science and I'm actually going to capitalize that and let's add a header now.
380700	386200	So in order to add headers and striplet is just sd.hether.
386200	392800	And we're going to add, for example, exploratory data analysis part.
392800	397300	If you want to write a subheader is just sd.subheader.
397300	401200	So let's say, for example, solution.
401200	409300	Okay, as you can see, nothing appears on the app and in order to see what we're reading, then we need to click rerun.
409300	411700	So let's do that and let's see what happens.
411700	413800	So this is running.
413800	424700	And you can see now the title appears and we have here the header and this header as well.
424700	427000	As I said, we want to write a welcoming message.
427000	433700	So for that, we're going to just use plain text in order to do that in striplet, we use sd.write.
433700	442000	So let's write for now just welcoming message and see what happens when we rerun.
442000	445300	So we rerun and it appears here.
445300	454800	So I'm going to write something along the lines of, hello, I'm your assistant and I'm here to assist you with your machine learning projects.
454800	457900	So let's write something like that.
457900	467000	So, okay, so let's see what happens when we run.
467000	482700	Okay, so now our placeholder for the welcoming message has been populated and now we have hello, I'm your assistant and I'm here to help you with your data science projects.
482700	488100	I'm going to move the header and this header after the welcoming message to enhance user experience.
488100	496200	Something that we can do is add a sidebar on the side of the application and to do that we can use with sd sidebar.
496200	503100	So I think something interesting that we can put in the sidebar is an explanation of what the user can expect from the app.
503100	505800	For that, what I'm going to do is to write a text.
505800	509900	So using sd.write that will appeal in the sidebar.
509900	513500	So it needs to be within the with statement.
513500	520000	So let's write that.
520000	524100	So your data science adventure begins with the CSV file.
524100	531700	And now I'm going to add some extra text.
531700	537400	Okay, and I'm going to add that to make sure that this is actually a string.
537400	540200	Okay, let's rerun.
540200	542700	Okay, so as you can see, this has appeared here.
542700	553000	Let's click and this is our sidebar with our text in the sidebar giving a little bit of explanation of what the user can expect from the app.
553000	556800	We have your data science adventure begins with the CSV file.
556800	561300	You may already know that every exciting data science journey starts with a data set.
561300	563700	That's why I would love for you to upload a CSV file.
563700	569100	Once we have your data in hand, we'll dive into understanding it and have some fun exploring it.
569100	573200	Then we'll work together to shape your business challenge into a data science framework.
573200	577900	And I'll introduce you to the coolest machine learning modules and we'll use them to tackle your problem.
577900	584300	Sounds fun, right?
584300	589800	This looks alright like this, but we can make it a little bit better and a little bit more visually appealing.
589800	598100	So what we're going to do is use some text formatting to make this look a little bit more organized.
598100	606900	So first of all, let's put the first sentence into a title and then the rest is going to be the text.
606900	612600	But instead of using titles and write, we're going to use write and caption.
612600	617800	So caption is used more footnotes to add the text to images and things like that.
617800	625700	But just because I like the formatting of this particular way of writing text, I'm just going to use it for this.
625700	627300	So let's do that.
627300	630900	I'm going to leave that in write.
630900	642800	And then what I'm going to do is I'm going to write st.caption and then add this in brackets.
642800	647100	So let's run and see what is happening.
647100	653100	Brilliant. So now we have a small title at the beginning and then text.
653100	658500	I'm going to write this here.
658500	662400	That is better.
662400	668300	Perfect.
668300	671600	Something that we can do is add bold text and italics.
671600	673600	So I'm going to show you how to do that.
673600	685700	So if we write here an asterisk and here another asterisk at the end over string and here we add double asterisk.
685700	694000	When we run, we're going to see that the first sentence is now going to be italics and the rest is going to be bold.
694000	703000	So that means that as you can see, if we want to write text in bold, we use double asterisk and then we want to write text in italics.
703000	710500	We write just one asterisk.
710500	714300	Okay, let's continue talking about formatting and the appearance of our app.
714300	720400	I think it would be cool if we could add a little line here and we can achieve that by using dividers.
720400	726400	So in StripLid, in order to add dividers, we can use manst.divider.
726400	737300	So just as this, if we run, we will see that this line has appeared here.
737300	744300	And finally, something that I would like to add is just to say that I made this app.
744300	752800	So I'm going to use caption.
752800	762200	Okay, and if we run, we're going to see that that appears here.
762200	765400	I think it would look better if we could make that centered.
765400	770900	Luckily in StripLid, we can use HTML in order to further format our text.
770900	775900	And that is what I'm going to do now in order to make this text move to the center.
783800	789800	And we need to add another parameter, which is this one.
789800	794800	The default is set to false, but in order to make the HTML work, we need to set that to true.
794800	795800	So let's do that.
795800	802800	Okay, and when that is done, we cannot rerun this.
802800	810800	And there you can see that it has been centered.
810800	812800	There are other things that we can add to our application.
812800	815800	Something that is quite interesting is expanders.
815800	824800	So let's see how to do that with st.expander.
824800	829800	So inside of the expander, we're just going to write some placeholder text.
829800	832800	And let's run and see what happens.
832800	835800	So as you can see, this has appeared here.
835800	841800	So the user can click and then it can decide, you know, they want to look at that information or not.
841800	845800	So then that we can also add our emojis just to make it a little bit more fun.
845800	858800	So I'm just going to add a couple there.
858800	861800	Okay, let's rerun and see what happens.
861800	868800	So now the emojis have appeared on the screen.
868800	873800	Okay, so now I'm going to show you how to add a button and how to manage what is called session state.
873800	882800	So in order to add a button in striplet, I'm going to add it just before the header is as easy as this.
882800	890800	So, well, it's with st.button, but because we want to trigger an action, we're going to add an if statement.
890800	898800	So if st.button, let's get started.
898800	904800	So when the user clicks the button, then this is going to happen.
904800	907800	I'm going to move that there.
907800	915800	And in fact, let me just move all of this after the sidebar.
915800	920800	Okay, okay, so let's rerun.
920800	926800	And we can see that now this button appears here when we click.
926800	929800	Then we have the header and the subheader.
929800	940800	So let's continue building our app and I'll show you in a second why session state is so important.
940800	945800	As we said in the explanation, your data science adventure begins with a CSV file.
945800	950800	So now I'm going to show you how to integrate a CSV uploader into your application.
950800	957800	Streamlin provides a convenient function called st.fileuploader for adding file uploads in your application.
957800	960800	So it's as simple as adding the following.
960800	968800	So after the button, we are going to add the following.
968800	973800	And then we need to specify the type of file that we want the user to upload.
973800	979800	So in this case, it's going to be a CSV file.
979800	981800	Sorry, this isn't equal.
981800	984800	Right, let's rerun.
984800	989800	Okay, so now you can see that that appears there.
989800	991800	Let's try it out.
991800	996800	Okay, so this is the data set that I'm going to use is a Twitter stock market data.
996800	1002800	I'm going to upload this and this appears here.
1002800	1003800	Great.
1003800	1009800	But we will like this to appear after we click the let's get started button.
1009800	1015800	So we're just going to move this and let's rerun.
1015800	1020800	So now we click this, how there's appear here.
1020800	1022800	And then we have the file uploader.
1022800	1028800	We click, we select our file, but boom, it disappeared.
1028800	1033800	Okay, so it turns out that patterns are an unstable and that means that buttons return
1033800	1037800	only momentarily during the page load immediately after their click.
1037800	1040800	And then they refer to false.
1040800	1044800	So in order to work around this is streaming allowed you to use session state,
1044800	1050800	which is essential for maintaining information and interactions between different sections of your application.
1050800	1055800	So I'm going to show you how to implement this with the button that we have in our application.
1055800	1070800	So first of all, what we need to do is to initialize the key in the session state.
1070800	1085800	So following the notation that we've used for the statement, I'm going to create this function called collect.
1085800	1103800	And finally, what we need to do is to modify your button.
1103800	1109800	And then under this if statement, then we can add the CSB uploader.
1109800	1112800	So let's rerun, see what happens.
1112800	1122800	Okay, so now we click, disappears, browse file, choose our file, we upload and nothing disappears.
1122800	1129800	So we have fixed this problem using session state.
1129800	1136800	Okay, so now that the users can upload their CSB files, it's time to convert the uploaded file into a pandas data frame,
1136800	1141800	which is the standard data structure for data manipulation and analysis in Python.
1141800	1153800	So for that, what we're going to do is after the user uploads the file, what we're going to say is if the user CSB file actually exists,
1153800	1157800	we're going to transform that into a data frame.
1157800	1167800	Also, what we're going to do is to say the low memory to false, just because the default is to actually optimize memory,
1167800	1170800	but just in case the file is really large, we're just going to set that to false.
1170800	1176800	Also, what we're going to do is to ensure that the file pointer is at the start of the file just in case.
1176800	1186800	So let's write all that down.
1186800	1190800	So that ensures that the file pointer is at the start of the file.
1190800	1199800	And then we're going to transform this into a data frame.
1199800	1209800	Okay, and now the data frame is now ready for analysis and exploration.
1209800	1217800	Our AI assistant relies on large language models to provide natural language understanding and generate responses.
1217800	1224800	In this section, what we're going to cover is how to load and initialize the LN model for your string like application.
1224800	1233800	So first of all, what we're going to do is we're going to create an instance of the LN model and also we're going to set the temperature parameter to zero.
1233800	1235800	What does that mean?
1235800	1240800	Well, the temperature, what it does in controls the randomness of the model.
1240800	1244800	So the higher the temperature, the more creative your model is going to be.
1244800	1252800	So for this particular project, we're going to let the temperature be low in order to make the responses a little bit more deterministic.
1252800	1254800	So let's write that down.
1254800	1257800	So we create an instance of the model.
1257800	1260800	We're going to call it LLM.
1260800	1274800	And then we're going to set the temperature to zero.
1274800	1281800	So first thing we're going to use our model for is to generate some information and we're going to add that to the sidebar.
1281800	1288800	So I think it will be interesting if we could add some information about what is the steps of the EDR and we add that into the sidebar.
1288800	1295800	And if the user wants to look at it because it finds it useful, just need to click and the information will expand.
1295800	1297800	So let's do that.
1297800	1308800	So I'm going to move our LLM model first here.
1308800	1318800	And then what we're going to do is in the expander, what are the steps of EDA?
1318800	1325800	And what is going to right now is the steps of the EDA, but we're not going to manually type it down.
1325800	1328800	The LLM is going to give us this information.
1328800	1334800	So in order to do that, what we're going to do is we're going to say, OK, LLM.
1334800	1347800	And then we're going to ask the same, what are the steps of EDA?
1347800	1350800	So let's rerun.
1350800	1353800	OK, so very important.
1353800	1356800	We need to add the open AI key.
1356800	1359800	So let's do that very quickly.
1359800	1365800	So we're going to add it here after we have imported the required packages.
1365800	1372800	And also something that we need to do is to load the dot environment just to make sure that the variables are correctly read.
1372800	1383800	Let's do that.
1383800	1396800	OK, so what we're going to do, and you'll see why later, is we're going to move this at the very end.
1396800	1403800	And we're going to add another with SD dot site bar.
1403800	1406800	Oh, and I saw another error.
1406800	1408800	So that should be like that.
1408800	1409800	Right, let's rerun.
1409800	1414800	We're going to browse the file, upload.
1414800	1417800	It's running.
1417800	1419800	And let's check the sidebar.
1419800	1421800	So we have the expander here.
1421800	1430800	And if we click, we can see that the LLM has generated the steps of the EDA.
1430800	1439800	In this section, what we're going to do is we're going to cover how to create a pandas agent and enable it to analyze and provide insights about the data.
1439800	1448800	So first of all, what we need to do is to create an instance of the pandas agent bypassing our LLM model and the data frame that we want to analyze.
1448800	1455800	So in order to do that, what we're going to do is.
1455800	1465800	So here we have pandas agent.
1465800	1470800	And then we use the create pandas data frame agent, and we're going to pass the LLM.
1470800	1477800	And we are also going to pass the data frame, and we're going to set the reverse to true.
1477800	1488800	So the default is false, and that's just to see the train of thought of the agent.
1488800	1494800	So first thing we're going to use our pandas agent for is to answer specific questions about the data.
1494800	1502800	So for example, let's create a question that is, what is the meaning of the colons?
1502800	1513800	What we're going to do is to create a variable that is going to be called colons meaning, for example, that is going to be the response over pandas agent.
1513800	1521800	So for that, we need to say, okay, pandas agent dot run, and then we're going to pass the question.
1521800	1526800	Okay, so now we want to see the output in our application.
1526800	1535800	So we write ST dot write, and we're going to write their colons meaning.
1535800	1540800	Let's run.
1540800	1541800	Cool.
1541800	1551800	So the columns represent the date, opening price, highest price, lowest price, closing price, adjust, and adjust closing price and volume of the stock.
1551800	1559800	So our pandas agent is able to answer this predefined question that we have passed through it.
1559800	1563800	So what we're going to do now is to create a function with certain predefined questions.
1563800	1569800	So when we run these functions, all these questions will be answered by the pandas agent.
1569800	1575800	So the type of questions that we're going to ask are very general EDA questions.
1575800	1583800	For example, how do the rows of the data set look like?
1583800	1585800	As I said, what are the meaning of the columns?
1585800	1588800	How many missing values do we have?
1588800	1598800	Are any duplicate values a little bit about data summarization and even a little bit of feature engineering?
1598800	1608800	We're going to ask the pandas agent if there are any new features that it would be interesting to create.
1608800	1612800	So let's write down this function.
1612800	1618800	So we're going to leave the pandas agent outside, and then I'll just remove this for now.
1618800	1626800	And we'll just create a function that's going to be function agent.
1626800	1637800	So we're going to use the pandas agent to generate all the answers of these questions.
1637800	1650800	Okay, so having written a function down, let's call the function and then let's run the app and let's see what happens.
1650800	1655800	Okay, we rerun.
1655800	1657800	Okay, so this has appeared here.
1657800	1662800	So we can see how the first rows of our data set look like.
1662800	1665800	Then we have the meaning of the columns.
1665800	1669800	We have the missing values saying that there are no duplicates.
1669800	1679800	Information about the data summarization, a correlation between variables and also what are the features that we could maybe create.
1679800	1684800	And also it's talking about potential layers.
1685800	1693800	Okay, now imagine that the user is interested in a very specific variable.
1693800	1697800	And we want the user to select the variable for further study.
1697800	1701800	Well, we can do this using text input.
1701800	1707800	This is a feature that Streamlick has in where the user can actually write text in the application.
1707800	1715800	Okay, so user question is going to be a text input.
1715800	1722800	And we're going to ask what variable are you interested in?
1722800	1726800	We're going to run and see what happens.
1726800	1736800	And as you can see, this is running again and you would agree with me that it would be better if the information stays and it doesn't run again.
1737800	1740800	Okay, so now what variable are you interested in?
1740800	1750800	Well, we haven't done anything with this, but let's say volume, enter, and again, everything runs again.
1750800	1753800	So how do we fix this?
1753800	1765800	So every single time we are entering something, it doesn't run again.
1765800	1768800	So we can sort this issue using caching in Streamlick.
1768800	1775800	So caching is an important feature that allows you to store and reuse the results of computationally expensive functions,
1775800	1780800	which improves the performance and responsiveness of our AI assistant.
1780800	1787800	So we're going to use the cache decorator to make sure that the functions are not run and run again.
1787800	1790800	And we avoid the app to run everything again.
1790800	1793800	So one thing appears after another.
1793800	1796800	So let me show you how to do this.
1796800	1803800	And we're going to create a couple more functions and organize our script a little bit more.
1803800	1819800	So first of all, what we're going to do is we are going to move our function agent and our pandas agent earlier in the script.
1823800	1834800	So there after the element model, so what we're going to do is to add functions of the main script.
1834800	1844800	So here we're going to add this function agent and then I'm going to move the pandas agent early on as well.
1844800	1850800	So we are importing the libraries.
1850800	1854800	We are setting the open AI key.
1854800	1865800	And then what we're going to do is we're going to put there after the open AI key,
1865800	1871800	we are going to set the title and welcoming message.
1871800	1880800	And so let's write here title and then welcoming message.
1880800	1890800	Okay. And after we've done that, we are going to put here the explanation site bar.
1890800	1894800	So let's grab that.
1894800	1897800	So this is this part here.
1897800	1907800	So we're just going to move that just necessary so things work fine and what we cash the functions.
1907800	1917800	So yes, as I said, here is where the explanation site bar is going to be.
1917800	1925800	And then we are going to move the button after this.
1925800	1934800	So this is all about the button that we really don't want.
1934800	1938800	So we don't want the header and this header there.
1938800	1942800	We will use it later for the sections that we are created.
1942800	1947800	So we are going to move all this.
1948800	1955800	Yes, after the sidebar.
1955800	1962800	So yes, we have the explanation sidebar and then we are initializing the key in the session state.
1962800	1966800	Adding the button, we are uploading the file.
1966800	1973800	And when we upload the file and we convert it into a data frame,
1973800	1975800	then is when the game starts, right?
1975800	1981800	Then is when everything is built and generated.
1981800	1994800	So that means that we are actually going to move this in to this F statement.
1994800	2007800	And then or pandas agent is going to go here and the same for the functions.
2007800	2012800	And then we'll move this as well.
2012800	2014800	So we have the pandas agent there.
2014800	2018800	This is something that we already have so we can remove this.
2019800	2027800	And first function that I'm going to create is after initializing the LLM model,
2027800	2033800	we are going to create a function for creating the steps of the EDA.
2033800	2045800	So that is going to be steps A and then here is just going to be this bit, right?
2046800	2051800	So the LLM is going to generate that and that is not going to run again
2051800	2055800	because we're going to decorate that with the cache data decorator.
2055800	2057800	So let me show you how to do that.
2057800	2066800	So here we are going to add this and this is going to be called steps EDA.
2066800	2070800	And then that is what we are going to return.
2070800	2071800	Excellent.
2071800	2076800	So this will be computed and that's it and will be computed again.
2076800	2077800	Amazing.
2077800	2084800	Then we have the pandas agent and then the function that is involving the pandas agent.
2084800	2094800	So let's put here function sidebar and then this is a function main.
2094800	2095800	Excellent.
2096800	2105800	So all this is running and then it's time to add a header.
2110800	2115800	So first thing that we're doing is exploratory data analysis, right?
2115800	2117800	So that will be a really good header.
2118800	2129800	And then we're going to move this sidebar that involves the LLMs there.
2129800	2134800	But now we're just going to write steps EDA.
2134800	2138800	So what this function returns.
2138800	2139800	Great.
2139800	2144800	And then we are running the function agent.
2144800	2151800	And then we have the user question.
2151800	2157800	And let's add a subheader here.
2157800	2166800	So let's say general information about the dataset.
2167800	2176800	And then here, let's say variable of study.
2176800	2177800	Okay.
2177800	2180800	And finally, we're going to hash the function agent.
2180800	2184800	So let's do that.
2184800	2185800	Cool.
2185800	2190800	So let's rerun and see what happens.
2190800	2191800	Okay.
2191800	2202800	So running function agent, this header and the subheader, the function agent is running.
2202800	2203800	Okay.
2203800	2210800	So now hopefully when we write volume here and we press enter, nothing will runs again.
2210800	2211800	Brilliant.
2211800	2224800	So we have sort out this issue of things running again and again by using caching in streamlight.
2224800	2225800	Okay.
2225800	2229800	So coming back to this variable of study, what we're going to do is to create a function
2229800	2234800	that does some exploratory data analysis, but is specific to this variable.
2234800	2242800	And I think the first thing that will be interesting to show is a graph of this variable.
2242800	2244800	Streamlight has a really good visualization properties.
2244800	2248800	So we're going to make use of that to create a line chart.
2248800	2252800	So we are going to add a function there.
2252800	2260800	So first we hash the function and then we're going to call this a function.
2260800	2261800	Okay.
2261800	2266800	So first of all, we're going to use the line chart from streamlight.
2266800	2270800	And that is ST dot line chart.
2270800	2275800	What we're going to pass is our data frame and then the user question variables.
2275800	2282800	So did I call it a user question?
2282800	2283800	Okay.
2283800	2284800	So user question.
2284800	2285800	And variable.
2285800	2290800	We're going to call it.
2290800	2298800	So if we actually let's do this, if we actually run this, let's see what happens.
2298800	2309800	Okay.
2309800	2314800	I forgot that.
2314800	2315800	Okay.
2315800	2316800	Excellent.
2316800	2321800	So you can see now I line chart of the variable volume.
2321800	2327800	So now I'm going to use the pandas agent in the same way I did before to ask a specific
2327800	2329800	questions about this variable.
2329800	2336800	But now instead of just writing questions, I write questions and I'll pass the user question
2336800	2337800	variable.
2337800	2342800	So we can answer specific questions about this specific variable.
2342800	2352800	So for example, imagine that what we want is to know the summary of the statistics, right,
2352800	2354800	of the user question variables.
2354800	2362800	So we're going to ask a summary, summary statistics.
2362800	2377800	So, so for example, pandas agent dot run, and it's going to be gave me a summary of the
2378800	2380800	statistics off.
2380800	2387800	And then we have the user question variable.
2387800	2395800	And then we're going to use ST dot write to write this summary statistics.
2395800	2402800	And we're going to add older things, like for example, checking for normality, checking
2402800	2415800	for liars, checking for trends and add all this to our function.
2415800	2416800	Okay.
2416800	2423800	So let's rerun and let's see what happens.
2423800	2424800	Okay.
2424800	2425800	So this has changed.
2425800	2426800	So it's running again.
2426800	2431800	And great is given a summary of statistics of this variable is saying that the variable
2431800	2434800	is not normal, but is skew to the right.
2434800	2437800	And there is an outlier present.
2437800	2438800	Great.
2438800	2441800	And there is a cyclic pattern of increasing volume in the summer months.
2441800	2447800	And there are five missing values of volume in order to avoid issues in case that user
2447800	2453800	enters an empty string, and all there is no response.
2453800	2457800	And then we continue writing things because that would definitely create a problem.
2457800	2463800	What we're going to do is to write a couple of lines of code to sort that issue.
2463800	2471800	So we're going to say that the user question variable is not non and also if it's different
2471800	2477800	that an empty string, then in that case is when we're going to run or function.
2478800	2483800	And then we will continue right in a or code after that.
2483800	2494800	So it's not non.
2494800	2495800	All right.
2495800	2502800	And then for the next section, we're going to add a header that is going to be further
2502800	2505800	study.
2505800	2512800	So imagine now that the user wants to add specific questions that are not pretty fine
2512800	2518800	in our app.
2518800	2524800	So what we can do now is to create another text input in where the user can enter whatever
2524800	2525800	question they want.
2525800	2530800	And we're going to use this pandas agent to answer this specific question.
2530800	2538800	So so first of all, if the question variable exists, then we're going to say user question
2538800	2543800	data frame.
2543800	2546800	So we're going to say here, is there anything else that you would like to know about the
2546800	2550800	data frame?
2550800	2554800	Okay, so that was our user question data frame.
2554800	2559800	And now again, if I'm just going to copy and paste this.
2559800	2573800	So if the question is not known, and also if it's not empty, and also actually not in
2573800	2581800	empty string, or if they say, okay, I actually don't want to know anything else, I'm very
2581800	2584800	happy with the information I've had so far.
2585800	2588800	Imagine that that happens.
2588800	2595800	Then what we're going to do is we're going to run a function that we're going to create
2595800	2596800	in a second.
2596800	2603800	So this function is going to be called a function question and data frame.
2603800	2612800	And in this function, what we're going to do is to ask the pandas agent to answer this
2612800	2613800	specific question.
2613800	2626800	So again, and then we're going to create this function called function question.
2626800	2639800	Okay, so what is going to happen here is this extra information is going to be stored in
2639800	2640800	this variable.
2640800	2650800	And we're going to use the pandas agent.run to answer specifically this user question
2650800	2651800	data frame.
2651800	2659800	And then we're going to add a return and I'm going to add a st.write in order to actually
2659800	2663800	write the answer to this question.
2663800	2664800	Cool.
2664800	2672800	And then we have called this here.
2672800	2686800	If the user is actually in the user question data frame is actually no and or no, then
2686800	2695800	we're just going to add an empty string.
2695800	2698800	Let's rerun.
2698800	2703800	Okay, again, the colon.
2703800	2706800	Let's rerun.
2707800	2717800	Okay, so is there any strong core relation between some of the variables?
2717800	2721800	Let's see what happens.
2721800	2728800	Okay, so there is a stronger relation between open, high, low, close and add close but not
2728800	2738800	between volume in the other variables.
2738800	2745800	Does the variable close have many peaks?
2745800	2748800	And let's see what it says.
2748800	2752800	Yes, the variable close has a peak of 77 point something.
2752800	2753800	Cool.
2753800	2754800	Amazing.
2754800	2759800	Okay, so that is all for this first video of the series, but what is next?
2759800	2764800	You can continue your data exploration by asking more questions, selecting different variables
2764800	2767800	and seeking additional insights from our AI assistant.
2767800	2770800	In the next video of this series, we will continue building our assistant.
2770800	2775800	It will be able to help you in converting your business challenge into a data science framework,
2775800	2778800	over in guidance on model selection, providing predictions and more.
2778800	2783800	We will introduce the concepts of chains and tools and we will be exploring other agents.
2783800	2787800	Be sure to download the completed project and sample data on the Digilab Academy website,
2787800	2791800	where you can also find more resources and courses on data science and AI.
2791800	2794800	You can also find the written tutorial linked in the description.
2794800	2798800	Don't forget to like and subscribe to be updated with the latest tutorials and upcoming content.
2798800	2802800	Thank you for joining me in this journey and I can't wait to see you in the next part.
2802800	2803800	Bye.
