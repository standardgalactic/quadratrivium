{"text": " Okay, so what we're going to do this time is to talk about the most powerful concepts in category theory. So to introduce this, I'd like to talk about planets. You see, planets are very complicated. I don't think anyone truly understands planets fully. Nobody's walked all around a planet, nobody's drilled into the center of a planet. However, it's very interesting that through astronomy, basically by observing the interactions of many planets and many celestial bodies, we can gain a tremendous amount of understanding about the nature of planets. And I think it's very similar with some of these highly abstract structures in category theory. So there are certain kinds of structures. I'm talking about things like can extensions, weighted co-limits, co-ends. There are these kind of structures which are so general that every other concept in category theory can be explained in terms of these things. And this leads to quotes like all concepts are can extensions, which is a famous quote by Saunders MacLean. And so it's really remarkable that these kind of highly abstract, super general concepts do exist. And in a sense, if we can understand them, it gives us a way to understand everything else in our theory. Now the issue, a bit like with a planet, is that when one focuses directly on something like the notion of can extensions, they can look rather complicated and difficult to understand in isolation. And so the approach we're going to take today is to investigate the sort of interactions between these different concepts. How can these different ideas be related to each other? And it's really remarkable how this is going to end up. It's as if what we have here is some kind of like a family of fractal structures, each of which is so kind of rich that that fractal contains all of the other fractals in the family. So we could, for example, explain what weighted co-limits and co-ends are in terms of can extensions, or we could decide that we want to explain what things are in terms of weighted co-limits and weighted limits and so on. So basically we want to explore how these super powerful concepts are interrelated. And this is going to be a very, very profitable thing to do. I mean, in a sense, I view this video as a kind of celebration of how far we've come because now we can define and explore these super general concepts. It's kind of as if we've got above the clouds of category theory and we can see these great peaks, these super powerful structures and how they're related to each other. And so what we're going to do today, we're going to start by recapping the idea of can extensions. And then we're going to get to these fascinating ideas of your need or extension and freco completion. And we're going to see how all of these other fascinating concepts kind of spring from there like a fountain. Okay, so this is one of the most informative videos I think I've put on YouTube. And I wanted to give some recommendations about how to watch it. So my main one would be 2x. So for the first hour or so of this video, I would recommend watching it on double speed. The reason is because I like to try and define everything I'm talking about, but when we get into can extensions and so on, the kind of level of abstraction is going to go up. So this is sort of the first hour. And you know, with most people, it gets to a point when it's kind of difficult to understand on a first viewing. So I would recommend watching the thing on double speed. And then once we kind of get through the definition of can extensions and onto freco completions, like the level of abstraction decreases and we start looking at lots of examples. And these examples are seriously beautiful. Especially this idea of a density theorem. It's basically like the idea that, for example, you can take a graph and you can make it out of vertices and edges by kind of gluing them together, but there's a sort of recipe that works for any graph for doing that. And it just comes directly out of the maths that we've been looking at for free. And the same idea applies for all sorts of other structures like dynamical systems and plus your sets and all sorts of things. It's it's pretty crazy. It's it's almost like a universal recipe for making structures that we're going to kind of get to. And that's just one of the things that we're going to get to. We're going to get to understand about profunctals and co-ends and loads of really interesting things. And so I'd say that the kind of level of insights which can be derived from this video is going to sort of go up like this. And so the the thing really is to get past this kind of hump where we're setting up the initial structures, and it seems like it's kind of abstract. And that's why I'd recommend watching this thing on double speed, because, you know, we can kind of zoom through this on a first viewing and then look at these fascinating applications, and then that's going to hopefully give you the motivation to go back and watch the thing again, slowly get the pen and paper, try and follow all the diagrams. And a lot of this stuff is in Emily Reels book, Category Theory in Context, which I highly recommend, particularly in one of the last chapters, she talks about can extensions and it's a very nice clear description of can extensions where you can look at all of the kind of formulas, details, proofs of things that I've been talking about and dig into those in more detail. So, yeah, I hope you enjoy. OK, so let me start with the idea of can extensions. I have talked about them before, but they're a pretty abstract concept. And I think they're worth introducing again, especially because I think I might have found a slightly kind of easier way to introduce them. So let's start with this question. What comes next in this sequence? OK, you can pause the video and think about it. Now, most people would say the next number in this sequence zero to four would be six. However, it's important to realize that there are mathematical sequences that don't go like this. There are some mathematical sequences that go zero to four, five, for example. And so really this question of what comes next in a sequence is not really usually very well defined, but it is an instance of something called an extension problem, which very roughly speaking is kind of like a problem of extending a pattern to a larger structure. So let's have a look at that. Here's how we can view that as an extension problem. Let's take this set here, one, two, three, as C, and this set here of numbers on a right. Let's call that E. Now, the sequence that I talked about initially can be represented by a function. The first number was zero, the second number was two, the third number was four. And then I asked what should be the next thing in this sequence. And so a way we can visualize what's going on is to say that what we want to do is we want to extend the domain of this function or the source set of this function. And so what we could say is instead of having a function that goes from the set one, two, three, we want to think about a function that goes from the set one, two, three, four. But the crucial thing is that that function ought to act similarly on the values one, two, and three. So a way we can formalize this is as follows. We know that let's consider this slightly larger source set here, D. Now, we know that there is a inclusion function like this from C to D. Let's call this inclusion function K and let's call this thing that we started with F. And so now our problem is to find a function from D to E, which acts like F does on the values that came from C. So just like in this case down here, this function that we want to cook up ought to send one to zero, and it ought to send two to two, and it ought to send three to four. Now the question we basically want to know is where should we send four? And like I was saying, there isn't really a well-defined answer, but we could send four to six, just to finish the pattern. And so what we're really doing here is we're trying to find an extension of the function F to this set D here that has a larger domain. And the key property that we want this extension to have is that this diagram commutes. So if we call this new purple function G, then the key property that we are sort of trying to get here is that G after K equals F. And you can see that, right? If you pick anything in C and then you do K upon it, and then you do G upon it, you get to the same answer as if you do F upon it. So this is the extension problem, but what I've sort of been trying to illustrate with my what number comes next problem is that extension problems involving sets and functions don't usually have unique solutions. So let's think about this situation I've just described a bit more abstractly. OK, we could say that what we've just drawn here is something that's happening in the category set. All right, so in other words, we could say, well, we have sets C D and E and we are given an arrow F from C to E in the category set and an arrow K from C to D. And then this extension problem is defined an arrow G such that G after K equals F. That's the idea of an extension problem. And you can think about extension problems in any category. Now, for can extensions, we're sort of going to think about extension problems in cat in the category of categories, but there's a bit of a twist. You see, you've probably got a bit of a flavor now. You see, you've probably got a bit of intuition now that's telling you, well, extension problems don't normally have unique solutions. And this is true. It's true in set. It's true in cat. If you want to get just a diagram that commutes like this on the nose, it's not easy. Usually there won't be a unique way to extend a particular arrow to make a triangle commute on the nose. And so the idea with can extensions is that we sort of relax what we're asking for a little bit. We're not really asking for a G, which is exactly going to make. We're not really asking for a G that's exactly going to make a diagram like this commute. Instead, we're going to use some kind of two cells or natural transformations to make it so that this kind of problem basically does have a unique solution, at least up to isomorphism. So basically, we want to sort of warp this extension problem into something that can be described through universal properties. And so for the problem of can extensions, well, firstly, it's taking place in cats. So our objects are going to be categories and our arrows are going to be functals. But the crucial thing is that we're not just looking for a functal G to close this triangle. What we're looking for is a pair of a functal G and a natural transformation, which we call eta. And G here is going to have a special name. It's called the left can extension of F along K. And so this is the data that defines a can extension. I'm just going to talk about left can extensions today. Right can extensions are very, very similar. Again, they're talked about in my other video. They're basically just the dual concept. But basically what I'm going to do today is look at some really nice structures. But everything I talk about can be dualized so you can have a lot of fun understanding all the duals of these concepts. But basically the idea of can extensions is like this. You're given a functal F from C to E and a functal K from C to D. And what the can extension consists of is a functal from D to E, which is called the left can extension of F along K, together with a natural transformation, eta from F to land KF after K. And that kind of data has to satisfy a certain sort of universal property. What is that universal property? Well, it's the normal kind of idea that if we make any kind of similar structure. So a functal H from D to E and a natural transformation alpha from F to H after K. Well, then there's going to exist a unique way to convert the real deal into this sort of phony candidate. What do I mean by that? I mean that there's going to exist a unique natural transformation. Let's call it gamma. Which is such that if we compose these two cells here, we get this one. Now here's a place I think some people get confused, right? Because they would say, well, I don't understand what it means to compose gamma with eta here. Because this is some kind of peculiar notation and notion of composing two cells. In this case, natural transformations, which is not fully explained in many places. So what's it mean to compose this with this? Well, it's illustrated down here. So basically the meaning of this is this is the composition of this natural transformation here, shown in green, after the natural transformation eta. What's this natural transformation here shown in green? This is gamma horizontally composed with the identity natural transformation of K. So this is the so-called whiskering of gamma with K. And it really is just this horizontal composition, which is indicated here. And you can look back at my video on natural transformations to remind yourself about how horizontal composition works, if you like. But the basic idea then with can extensions is it's one of these kind of universal constructions. And what we say is we say, well, I have this function F and this function K. I wish to find the left can extension of F along K. That consists of a function like this from D to E together with this natural transformation eta, which has this kind of form. And this has to and is defined by having the universal property that for any similar such thing, basically for any alpha and H, such that alpha is natural transformation from H after K to F. We have that there's going to exist a unique gamma such that if we compose gamma with eta, which basically ends up giving this kind of result. Well, that result ought to equal alpha. So basically, the pattern is that we want one K F and eta such that for anything similar. So for H and alpha, there's going to exist a unique gamma that makes this a quality hold. OK, then. So this video isn't really focused on can extensions particularly. And I don't think it's necessary to have a really in depth understanding of them, but I can't resist just going over the basic sort of formulas for them and things. So we're concerned with thinking about the left can extension of a functor F along K. Now, the meaning of that, at least the way I think of it is think that we're trying to extend the domain of this functor F. And we're trying to extend it to this larger domain D. So for these purposes, you could think of K as a sort of inclusion functor. And so sort of F is defined on C, but we want to sort of extend it to a larger domain. So we're sort of extending it along this inclusion functor. Although in truth, K doesn't have to be an inclusion functor. It doesn't have to be a monomorphism or anything like that. However, we are going to make some assumptions to make it easier for us to think about these can extensions. So recall that we say that a collection is small when it's a set. Recall that to set up category theory to speak about things like the category set. We really have to go sort of beyond set theory, otherwise we run into Russell's paradoxes and things like this. So we should really say that a category has a class of objects if we want to. I mean, it depends how which sort of method we want to use to overcome these kind of problems of collections which are too large. But anyway, so a category small when it has a set of objects or maybe just like a finite set of objects or it could be an infinite set or whatever. So the category set is not small because there isn't a set of sets. Otherwise, we'd be in paradox country. So set is not small. It has too many objects. So we're going to suppose now that C here is small. And we're going to suppose that D is locally small, which means that if we pick any pair of objects, the collections of arrows from A to B is forming a set. And we're also going to suppose that E is co-complete. That means that there's going to be a co-limit of every small diagram in E. So in other words, if we take any small category like C and we do a functor, there's always going to be a co-limit of that functor. So for example, it could be that E is set or E could be any category of pre-sheaves. It could be a category of vector spaces. There's loads and loads of co-complete categories. And we're going to suppose that E is one of those. And so with these assumptions, we can really understand the structure of these can extensions. So in particular, whenever we have these assumptions holding, this left-can extension here is always going to exist. And I'll tell you the formula for it. So here's the formula for it. So Lang K of F is going to be a functor from D to E. And so we need to really describe how this functor works on objects of D and arrows of D. So what about objects? So what about if we have an object, little D of D? What does Lang K F do to it? Well, it sends it to this thing here. And you see that this is a co-limit of a diagram in E. And in particular, it's given by this composition here. So what we have here is the comma category. So we have this functor K from C to D. And we're sort of slicing or comering that with this functor little D from a trivial category into big D. And so this thing here is a comma category. In some previous videos, I wrote it with this notation instead with the downwards arrow, but I prefer to slice now. But anyway, you can see my video on universal properties or the video on Khan extensions for more details about comma categories. Here's the very, very brief recap. The objects of K slice D look like this. The arrows of K slice D look like this arrow H from C to C dash that should make these kind of diagrams commute. OK, so let's write this thing that we get when we do our left Khan extension on D as LD. So you see that this is given by a co-limit. And so this thing here is going to be an object of category E. But it's also going to come with this sort of universal cone, which we'll call lambda D. So that should, of course, be a natural transformation from this functor here to a constant functor. So that will be delta LD. That sends everything in this category here to this object LD of E. So we could pretty much define this as to say it's this composition here. And that's why I'm writing this equals sign here to say that this little triangle at the bottom here to say that this triangle at the bottom here commutes. So this is telling us how this functor here is defined on objects. How is it defined on arrows? Well, basically, if we have an arrow G from D to D dash, then this kind of... So I mean, basically, if we have an arrow G, then it's going to get sent by our left Khan extension of K along F to this arrow Q here, which is going to be unique such that this kind of triangle commutes. So I don't really want to go into the minutiae of this. Basically, this is a diagram in a functor category. And we know that there's going to be a unique arrow that makes this thing commute because this is like a universal cone. And what we have here is a horizontal composition. And this functor here works on objects like this and works on arrows like the identity. I'm not going to dwell on this. If you watch my video on Khan extensions, I go through all this in much more detail. But I just wanted to quickly show you how you can calculate all the parts of these Khan extensions. And so the final bit is how do we actually calculate this natural transformation here, this eta? And basically the formulas over here. So this is the key formula here. Where this lambda here is our sort of universal cone, which comes from calculating that co-limit I was talking about before. So the point really is that when these conditions hold, we have all these nice formulas to be able to compute this left-can extension. Actually, I should just say quickly that something else really, really nice happens in this case. In fact, we can think of this LAN-K thing here as a functor, which goes from this functor category here to this functor category here. And it's actually just going to be the left adjoint of K star. So let's remember our setup. We have this functor K, which goes from C to D. And that means that we can form this functor K star. And basically this just works by pre-composition. So it works according to this formula here or this expression here. If we have an object of D comma E as in a functor G from D to E, then K star just sends that to G after K, which is going to be a functor from C to E. And you can see that it sends this arrow beta here of this category to this arrow here of this category. So it's very cool because basically we can also think of these can extensions in terms of adjoint functors. Basically, we're just computing the left adjoint of K star. And this is LAN-K. And then if we take an object of this category here like F, well, if we operate LAN-K on F, then we get the thing that comes from this triangle here. Which is the way that we originally defined this left can extension. And so it's very cool that when we have all these conditions holding these ones here, like it's not just that we can compute the left can extension of F or on K. We can compute the left can extension of any functor from C to E or on K. And actually that gives us those all sort of fit together to give us this sort of bigger functor, which allows us to go between these two functor categories. Just to finish, you know, to complete the picture. For this adjunction, there should be a unit, of course, which should go from this identity functor here to K star after LAN-K. If we look at a general component of this natural transformation E to dash, well, let's say we look at the F component, it should have this kind of form. And can you guess what it is? Well, it's just exactly Eta. It's exactly the natural transformation that fills in the triangle from the definition of the left can extension in the first place. So there we are, a sort of very quick recap of can extensions. And now let's get on to a really fascinating application of these things where we're going to think about all sorts of things to do with free co-completions and density, and how we can make lots of objects by sticking other objects together and co-ends and all sorts of really fascinating connections with lots of things in maths. So let's go. Okay, and here's one final result, which is going to be really useful for us to simplify things. And it basically says that in a special case, which is going to occur for us frequently, there's some details of these can extensions that becomes simpler. So we're going to keep with this assumption here. And in that case, we have this result holding. And it says that if this K here is a fully faithful functor, which basically means that it acts like a kind of bijection on Homsets. In other words, this is going to, for example, send the arrows from C to C dash to the arrows from K C to K C dash. And it should always do that kind of thing like a bijection if it's fully faithful functor. Well, in that case, we have that this ether here, this kind of natural transformation that fills in the triangle is always going to be a natural isomorphism. So the particular case where this is going to occur for us is basically when C is just a full subcategory of D. In other words, when we get C just by picking a load of objects of D and looking at all the arrows between those objects and that basically gives us C. So in that special case where C is a full subcategory of D and K is just this inclusion functor. Basically, this result says that essentially, we don't have to worry about this natural transformation, right? This diagram commutes in that case, at least up to a sort of natural isomorphism here. So this is really nice. Like, remember, the way I introduced Can extensions, I basically said, well, we're talking about this extension problem, but then, oh, we have to add in these high dimensional cells to make things so that we have unique solutions yada yada yada. Well, in this special case here, basically where K is a fully faithful functor, and we have these nice conditions which give us this kind of co-limity way of describing this left can extension. Well, in this case, basically, up to isomorphism, we pretty much do have that this triangle commutes and we don't really have to worry about the form of eta in this case. Okay, then. So now we've got our can extension ideas ready. Let's get on with the central idea I want to talk about today, which is something called the free co-completion of a category. So the easiest way to explain it is just directly. There's various ways of looking at this notion, but the simplest one is just to say, well, we have a category C. We want to determine the so-called free co-completion of that category. And basically that is just the category of pre-sheaves of C. So that's the category of functors from the opposite of C into set. And this is something we've seen a lot before. We've seen a lot of these pre-sheaves. We've seen that things like the category of graphs and the category of dynamical systems can be thought of as categories of pre-sheaves. And we're pretty familiar with these ideas. And you may know that these categories of pre-sheaves are always co-complete. So in a sense, you can see this free co-completion operation as a way to take a category C and sort of freely add co-limits to it so that we end up with a co-complete category. Now, there's a bit more to this idea. Another piece of information which comes along when we make this free co-completion is this functor here, which is called the yonida embedding. And what this does is it takes an object C to this honfunctor, C of blank comma C. So this is your contravariant honfunctor. So when I write this thing here, this is a functor from C op to set. If we have an arrow in C, let's say from C dash to C dash dash, let's say it's this arrow G. So there we are. That's an arrow of C. It's going to correspond with this arrow G op in C op. And when we do this honfunctor on it, that's going to give us an arrow like this. And the way that you can think of this working is that if we have an arrow of C, let's say R from C dash dash to C, then this is going to send it to this arrow R after G, which is going to go from C dash to R. So that's basically the nature of this functor here. However, there's a bit more to this, of course, because this you need a embedding. Yes, OK, it sends an object C to a honfunctor like this. But what about if we have an arrow H from C to D? Well, that's going to give us an arrow in the target category, which will be called C of, well, let's call it C of blank comma H. And it's going to go like this. And how does this work? Well, if we look at the eighth component of this, that's just going to be a function like this. And it's going to be sending an arrow R to the arrow like this. And there we have it. So that's basically the nature of this Yonita embedding. And it's very interesting is this Yonita embedding. It comes up all over the place and it is a fully faithful functor. OK, so it's sort of, I mean, it's actually, it's pretty fascinating. If you consider, for example, C equals this category here. If you, it turns out that in this case, this category of pre-sheaves. Well, it turns out that in this case, this category of pre-sheaves is the category of graphs. And so that's kind of interesting for several reasons. One of them is that you can kind of think of this C as something like a graph. OK, we've kind of injecting this vertex and as a source or a target of this edge. But then when we do its Freco completion, we get all of the graphs. And in a way, you can kind of think of that as making all graphs by starting with something basic and sticking things together. Less hand wavy. Well, we can see that this Yonita embedding is basically injecting this sort of basic structure that kind of lies behind all graphs into the category of graphs as a sort of full subcategory of the category of graphs. Actually, the full subcategory, which is on these kind of home functors. So I sometimes wonder if our universe is similarly constructed. If there's some kind of a category C that represents the way that all of the elementary particles in our universe interact and somehow that's embedded into our universe. All of the other structures that we have in our universe are sort of, you know, made out of those elementary bits in some kind of a free way. But that aside, the point here is that we're looking at some kind of a universal construction which gives us this kind of Yonita embedding. And this is called the free co completion. So again, just to say it briefly, the hand wavy idea between a free co completion is that we take a category C and then we sort of freely add all co limits to it in some sense. We sort of take the bits of C and we glue them together and sort of freely produce and make a structure in a kind of free way that has all co limits. Another example we can look at for free co completion is the trivial category one, the category that just has one object and the only arrow is the identity arrow. In that case, again, we can consider the free co completion of that. And you see that that's just going to be isomorphic to the category set itself. Now, what this reminds me of is the idea that we can make all sets by starting with a kind of singleton and then doing things like co products and repeatedly adding this singleton. And if we have our ability to do injections and whatnot, then we can get all of the structure of set. Okay, so I think that's enough hand waving. Let's actually look at the kind of universal property that this free co completion has. So recall that we have this category cat, which has objects as categories and arrows as functors. Now there is a Now what we can do is we can think just about the co complete categories. Okay, so they're going to be the categories that are co complete that have all of these small co limits. And we can just restrict our attention to the objects of cat, which correspond to these co complete categories. And then we can also restrict our attention to the arrows of cats, which preserve co limits. Okay, so then we can think of this sub category of cats that we'll call cat co comp. So basically cat co comp here is it's going to be a sub category of cats. The objects it has are going to be the categories which are co complete. So the ones which have all small co limits or the co limits of each small diagram, if you like. And then the arrows of this thing here are going to be the functors which preserve those small co limits. So to say it more briefly cat co comp is the foot. So to say it more briefly cat co comp is the sub category of cat on the objects which are the co complete categories and the arrows which are the co continuous functors that the functors that preserve the small co limits. So basically this is the stuff that plays nicely with co limits. Now there's clearly going to be an inclusion functor I from cat co comp into cat. And it's this that we're going to use to find our kind of universal property, this kind of universal property behind free co completion. So okay, what's the big idea? Well, the big idea is that in cats, let's pick any category C. And let's ask, is there an initial morphism from C to I, or you know, we could also say there are universal morphism from C to I, it means the same thing. And what it means is that we're looking for some kind of a universal construction. And it turns out that there is such a thing. And what it is is the free co completion of C. And what it consists of is this category of pre sheaves, the category of functors from C up to set. And also, there's going to be this arrow in this right hand side category. I mean, technically it's going to go from I of this category of pre sheaves. I mean, technically it's going to go to I of this category of pre sheaves. And that's going to be our, you know, need a embedding. Now, often I might just rub out that I because I is just an inclusion functor doesn't really affect the nature of the objects. Sometimes there's sort of no point writing it, but I'll write it for now. So the point is that this together with this is going to be forming an initial morphism from C to I. Now, let me remind you what that means. What it means is that for any object E over here on the left. So he's just going to be any old co complete category. Well, if we have some arrow, which sort of looks like why over here. So this is just a kind of candidate arrow. It's going to be an arrow F from C to I of E. Well, there's going to be this sort of corresponding intermediary arrow, which we're going to call F hat. And that has the feature that when we do I on it, it's going to make this triangle commute. All of this just comes from the definition of an initial or universal morphism. Now, like, there's a lot of things going on here, a lot of structures just appeared at once. Let me just point out a couple of things that I'll come back to later. Firstly, I is just an inclusion functor. So in a sense, we could just kind of rub out these eyes here and it wouldn't really change the meaning too much. And now does this structure remind you of anything that we've been looking at? What about if I wrote this as Lan Y of F? Do you see that this is the same pattern as we've been looking at with our can extensions? In particular, this thing's fully faithful. So this thing which has to fill out the triangle, this natural transformation eater can effectively be ignored. And so basically, you can see that this kind of idea of can extensions is appearing here. In particular, just this notion of these universal morphisms is basically forcing us to find a unique way to close this triangle here. And this is exactly what can extensions do for us. So it turns out that not only is this category of pre-sheaves together with the yonida embedding giving us an initial morphism from C to I. But moreover, the left can extension of any functor F from C to some co-complete category E. Well, the left can extension of such an F along the yonida embedding Y is exactly giving us this kind of intermediary arrow, which allows us to emulate our kind of candidate arrow F for being an initial morphism with respect to the real deal, which is of course the yonida embedding. So you can see that there are lots of ideas, lots of very cool ideas kind of interacting here. I mean, I'm probably going a bit too fast, right? There's a lot of things coming out at once, but we're going to get more kind of familiarity with this idea. But just to sort of finish explaining the gist of this, basically the point here is that when we have this category of pre-sheaves together with this yonida embedding, that's giving us an initial morphism from C to I. Now, if you have a look at my video on representable functors, I talk about how this kind of phenomenon appears over and over again in category theory and how there's several different perspectives to look at the same idea. So another way to look at the same kind of happening is to say that this category of pre-sheaves together with this yonida embedding is going to be an initial object of this comma category here, C slice I. We could also write it like this and then it looks like a category of elements. Another way to look at this is that this thing here is a functor into set, okay? It's really a functor from this cat co-comp into set. And what the yonida embedding really is, is it's just going to be like an object or an element of this kind of set-valued functor applied to this input. Okay, so when we do this functor on this object here of this category, we get this set and y is just going to be an object of this set. And so we can apply the yonida lemma, which is telling us that the elements of this set correspond to natural transformations into this functor here from the corresponding hon functor. And so this thing here is going to correspond to a natural transformation like this. Turns out it's actually going to be a natural isomorphism. And so we get this, which is like a really cool idea. And just to sort of fill in this dummy variable here, what this is telling us is that if we pick a co-complete category E, then the co-continuous functors from this category of pre-sheves into E are going to be in one-to-one correspondence with the ordinary functors from C to E. So this is a pretty cool idea. And it's especially cool because we kind of already know how this works. Okay, so if we have a category C and then we have something in this set here, so we can really just think of this as a functor F from C to this co-complete category E. Well, how do we get the corresponding kind of co-continuous functor over here? All we do is we go, okay, we've got a yonita embedding here from this into this category of pre-sheves. And now let's just do the can extension of F on Y. The left can extension, lan y F. And there we have it. We have F over here and we have lan y F over here. And so that's how this kind of isomorphism of Homsets works. We basically just get it using our can extensions and also provided that C is small, we have a formula for this lan y F. We've already seen a formula for it in terms of co-limits, so we can compute all this stuff. And that's very nice. So now we can kind of come back down from the heavens for a moment and just think about a particular case to get some intuition. So we can say, well, what happens when C is one? So let's just have a look what we've got here. We can rub out these eyes, as I say, they don't really change much. We can put one in here. This is just our trivial category. And so what we've got going on on the right here is going to be a functor F from one to E. So this is just going to basically be picking out an object of E. And we can see that this is going to correspond to a co-continuous functor of this kind of form. Well, the functors from one to set basically just look like sets. So this is telling us something pretty interesting. It's telling us that the objects E of this category, script E ought to be corresponding with these co-continuous functors from set into E. And I think that this is actually kind of intuitive, really, because think about it. E is a co-complete category, and we want to do a co-continuous functor from set into E. So what's the first thing that we might ask ourselves? Well, where are we going to send the terminal object? Well, this yoneda embedding is going to be sending our one here into the singleton set. So we better send the singleton set to this object E here, where F sends the object over here. So the question we're asking here is how do we cook up this functor H, which corresponds to this object E? And the answer is, well, we better send the singleton set to E. But then what about the set with two elements? Well, that's going to be the co-product of one and one. And the fact that we're forcing H to be continuous means that this better look like H of one co-producted with H of one in E. And so you can see that the way that we're acting on all of the other sets, all of the other kind of objects over here is fixed by the way that we're dealing with the terminal objects. So you can see that just picking any objective E is really going to give us a sort of co-continuous functor H from set to E, because any such functors essentially having all its form fixed by the way that it operates upon the singleton set. And you can kind of think of this intuitively as well, like co-completion is all about taking some initial structure and sticking the bits together in a kind of freeway. So you're doing co-products where you're sort of doing disjoint unions and you're doing co-equalizers where you're sticking stuff together. And if you just start with one dot and you start doing that kind of stuff, you're going to get lots of different sets. So it kind of seems to make sense to me that the free co-completion of a singleton set. So it seems to kind of make sense to me that the free co-completion of a trivial category is set itself. But you know, this intuition goes much further. Like if you think about your category of graphs, you can think of graphs as things that you get by sticking together. Your basic graphs, you know, like your single vertex and single edge. Again, with the category of simple as your sets, you know, you can make simplices or be simple as your complexes by sticking together these basic simplexes. And again, you know, it's described by a category of pre-sheaves. There's co-completions of foot. And yeah, this is like a really kind of important idea, which touches lots of things in mathematics. OK, then. So basically, most of the rest of the video is just looking at some very interesting applications of the kind of things we've already talked about. Now, I know it's a pretty high level of abstraction that we're dealing with. But I just want to sort of urge you to just hold on a little bit longer and soon all the applications we're going to look at are really going to help you to kind of cement these things in memory and so on. So basically, just before we start looking at the applications, like the first one I want to look at, I think, is basically the idea that we have a sort of universal recipe for making any graph by looking at the vertices and edges inside it and sticking them together. And we can see that one of the applications of the ideas we've already looked at, so it tells us how to do that instantly. And of course, it doesn't just work for the category of graphs, it works for simplices and dynamical systems and innumerable other cases. So soon we'll be there. But to make this more efficient, we're going to do some kind of a little bit of calculation now, which is really going to help us later. So you can see that most of this stuff to do with free co-completion boils down to this diagram here, which is really representing the left-can extension of this functor F into this co-complete category E along the yonida embedding. Now, since y is a fully faithful functor, we basically know that this can extension after y is naturally isomorphic to F, so we don't have to worry about this eta natural transformation. And really, we're mostly just interested in calculating this land y F thing that we're going to abbreviate to be F hat. And in particular, let's just suppose that we have an object in this category at the top here. So we have a pre-sheaf w. Well, how do we calculate F hat of w? Well, we've already seen a formula for this. And here it is. So we can calculate this functor F hat operating on w to be equal to this co-limit here. But the thing is with this co-limit, it starts with y slice w or y slice or y comma w, this category here. And it turns out that I don't think that's such an easy thing to understand directly, but it has a sort of equivalent form that's much easier to think about. Let's think about what this is, y slice w. I mean, it's actually just a comma category of these two functors here. We can see that y is a functor into this category of pre-sheaves, and so is w. I mean, w is really just a functor from the trivial category. It's just picking out a single pre-sheaf. Now, this category, y slice w, more concretely, its objects are going to look like this, that they're going to consist of an object of c and an arrow from y of that object into w. And the arrows are just going to be these arrows in this slice category. And the arrows in this comma category here are just going to be like this arrow h from c to c dash that makes this kind of diagram commute. But basically, we can transform this slice category into this one here. And the key to this is the go needle Emma, because what's an object in y slice w? Well, it's basically going to be a natural transformation e from this home functor here into w. And whenever you see a natural transformation coming out of a home functor, you should get a Japanese voice in your head that says you need to transform this into a form of elements. So that's what we'll do. We apply the yonidilema and we see that this kind of natural transformation is equivalent to this element e hat of w of c, where this is given by e c of w c. Now, basically applying this gives us this kind of isomorphism between this category here and this category here. What is this category here? Well, what I've written at the top here is the singleton sets. The singleton sets can be considered to be a functor into sets. W can also be considered to be a functor into set from C op. And so star slice w is this comma category here. But it turns out that we want to take the opposite of that. So really this is, well, some people would call this a category of elements for a contra variant functor. Yes. But the point of this really is that what we have here is just a category that has objects like this and arrows like this H. And I'll sort of leave it to you to work out the details of this correspondence here, but just to give a very sort of brief five minute outline. The idea is that we have an arrow H in this category down here. So it's going to go for an object like this to an object like this. But remember that what we have here is really the opposite of star slice W. So this H here corresponds to this arrow H op that goes from C dash E dash hat to C E hat in star W. And that just corresponds with this arrow H op of C op, which makes this kind of triangle commute. And then if you apply for your needle Emma, you can see that this basically just corresponds with an arrow of this kind of form in Y slice W. So I know that's a lot to take in. Maybe don't worry about the details of this on the first viewing, but the point basically is that we can rewrite this expression here. In this kind of form here. So here this projection functor here. That's going to take an arrow C comma Y C E W. And it's just going to project it to become C. And this kind of projection functor here is going to work in a sort of analogous way. So what we're going to have here are objects of the form C comma E hat. And the projection functor is just going to send those to C. And then the arrows in each of these categories just look like arrows of C and we can think of those at least symbolically is just sort of unaltered by these projection functors. So this is very nice because the final form of this basically involves a sort of category of elements here. And then we're just sort of projecting those elements down into C so we can almost think of this as a sort of vibration. We can think of these as sort of fibers above these objects of C in a way which is as described by this kind of pre-sheaf W. And then we're just sort of functoring these into F. We're just sort of functoring these into E and then asking for a co-limit of the resulting functor. I know still this is pretty abstract. But now we're going to start looking at some examples and hopefully we'll end up happy that we made this simplification step here because it's going to save us some work later on. So OK, we've done the hard part. Now we can start to look at some applications of this free co-completion concept. So the first one I want to look at is the so-called density theorem. And so for this, all we're going to do is pick a particular functor F here to focus on. And we're going to focus on the case where F itself is also the yonida embedding. So what we're essentially looking at here is the left can extension of the yonida embedding along the yonida embedding. And if you recall, the idea behind these can extensions usually is that we're to find a two-cell eta that fills in this triangle in a sort of universal way. However, in the special case where this functor here is fully faithful, as is the case with the yonida embedding, essentially we're just looking for the unique kind of arrow here, which just makes this triangle commute. And it's easy to see in this case that there's an arrow that makes this triangle commute, which is just the identity functor, right? Because identity after y equals y. And so we already know the form of this left can extension. We know that it's the identity, but we also have a formula for it from before. Okay, you remember this formula we were just looking at? Okay, you remember this formula that we were just looking at in the general case? Well, we can just look at this in the case where this f here is the yonida embedding, and this y here is our category of pre-sheaves. And so what we get, and so if we do that, we see that we have this formula here, which is for this. But we also know that this is equal to the identity functor operating on w, which is just w. And so we have this equation here, and this is our density theorem. Maybe I should write isomorphic here. And this is quite remarkable because it basically gives us a way to think about this functor w. So think about w as a sort of structured set. Okay, a lot of these pre-sheaves, you can think of them as structured sets, things like graphs and dynamical systems and things like that. Well, what this results basically telling us is how we can build this structured set here by sticking together humfunctores. And think of the humfunctores as sort of like elementary particles or elementary structured sets. So think about, for example, a single vertex or a single edge in the category of graphs. Those will correspond to the humfunctores. And what this result is telling us is how we can glue those things together to make w. And the reason is basically because this is some category. Basically, this is going to turn out to have sort of all the bits and pieces that make w. And then when we do this functor composition here, it's going to replace these bits and pieces with the corresponding humfunctores. So we're going to have all these kind of, we're going to have this sort of diagram. For example, in the category of graphs, it's going to consist of a load of lone vertices and lone edges with some maps telling you where to go. And then when we form this co-limit, we're essentially gluing all of those vertices and edges together to actually give the graph w that we want. So it's pretty amazing that we basically get this blueprint for building any kind of structured set at all out of its sort of elementary parts. And the whole thing just is given to us automatically as a fairly special case of this idea of free co-completion. So, you know, it's stuff like this that like really, you know, it really makes me glad to know category theory because it's kind of like, to me, it seems pretty obvious that this is like the right way to think about. Like how structures are assembled from elementary pieces because it's not like something that people have to figure out. This is given towards automatically as a small piece of a large, elegant structure. Okay, so let's apply this density theorem and we're going to apply it to the category of graphs and it's going to tell us how graphs are assembled. Okay, so for our category C here, we're going to pick this category here. So it's got two objects, E and V, and these two arrows S dash and T dash from V to E. And so now C op is going to look like this. And as we've seen before many times, functors from this category into sets are going to correspond to graphs. So let's have a look at an example. Here's a functor W from C op to set and it's going to send E to this set here and V to this set here and S is going to get sent to this function here and T is going to get sent to this green function here. So we can visualize this in this manner shown below here. And what we're doing here is visualizing each of these elements of W E as an edge that goes from the place it gets sent by W S to the place it gets sent by W T. So this is a sort of visualization of the graph W. Now all we have to do is apply this formula here. And so we want to be calculating a co-limit of this functor here. So to calculate this category of elements here, we just look at this picture and then we sort of rub out these bubbles and reverse the arrows and we get this category here. This is our category of elements. This is star slice W op. Now this projection functor here is just going to forget the second entries. And so it's going to send these two onto E and these two onto V. And then after that we want to do this yonida embedding, which is going to send this object E to the graph that just holds a single edge between two distinct vertices and nothing else. And also the yonida embedding is going to send V here to the graph that just has a single vertex. And so when we compose these, we get a diagram in the category of graphs and that diagram is going to look like this. And then we just want to calculate the co-limit of this diagram. And basically all that corresponds to is sort of imagine each of these lines here that showing how things getting mapped as a sort of thread. And we just sort of pull those threads tight and glue the structure together. And you can see that if you do that, you recover the graph that we had originally because this directed edge here has its source and its target as this vertex here. And this directed edge here is going to be going from one to two. And so yes, when we do the co-limits, we get this structure. And it's interesting to see how this theorem basically tells us how we can recover our graph from these kind of elementary pieces. Okay, so now if we return to the fountain, we return to this expression here for our free co-completion. Well, this F hat here, this one YF, this is sometimes called the yonida extension of this functor F. And it turns out that this is related to another of the super powerful categorical concepts. And that's the idea of a weighted co-limit. So the connection is pretty simple. If we have a functor W in this category up here, this category of pre-sheaves, if W is a pre-sheave basically. Well, when we do F hat on W, we can call that result the W-weighted co-limit of F. And so this is this idea of weighted co-limits. And they're normally characterized in a somewhat different way. Normally one would characterize a weighted co-limit by an expression like this. And we'd say that the W-weighted co-limit of F, where F is a functor from C to E and W is a functor from C up to set. The W-weighted co-limit of F is defined such that we have these kind of isomorphisms natural in E. But I think it's easier to think of them directly as just being produced by doing this F hat on these pre-sheaves W. So we can see that there are a couple of interesting special cases of these weighted co-limits. One of them is where we take W to be this diagonal functor here, this functor which is constantly equal to the singleton set. And if we use that as our weight, then it turns out that our weighted co-limit is just going to look like an ordinary co-limit. And you can check that by unpacking the actual formulas that we've got for F hat as we've described above. Now, another thing that you could do with this formula is you could instead set C to be a singleton set. Is you could instead set C to be the trivial category of a single object. In that case, F is just going to be an object of E essentially. And if you look at the meaning of this formula in this case, well, it reduces to this kind of form. And you see where we wrote a co-lim W of F, we're now writing W dot of F. And that's because this thing over here is what's known as the co-powering of F by W. And you can really think of it like if this category E has co-products, then you can think of this expression here as the co-product of this object F with itself W times. So if we think of W now as a set, let's say it's a set of three elements, well, this would just be F plus F plus F. So this is basically F co-product with itself once for every element in W. And you can see that this kind of expression here ought to hold, right, because like let's say W was a two element set, well, this would be like an arrow from F plus F to E. And that's going to correspond with two arrows from F to E, or if you like a function from a two element set, two to set of arrows from F to E. So this is the idea of so-called co-powering, which is also known as tensoring. And it turns out that we can get something else out of this kind of idea as well. So if we then think of another special case, let's suppose we have a category A. And what we're going to do is we're going to set C to equal A op times A, and we're going to set E to equal set. And so what we're going to have as F here is a functor from A op times A to set. So things that have that kind of form are sometimes called bifunctores. And we'll call this functor H just because it's a bit weird, so we'll give it a different name. So just write it down. We're supposing that C is A op times A, we're calling this FH, and we're supposing it's going to set. And now if we look at this particular case, of course, the same kind of resort holds. But what we can do is consider a special case where this W here, so here W is going to be going from C op to set, or if you like, it's going from A times A op to set, so that's the form that W is going to have. Well, we're going to consider the case where W is the humfunctor of A op. Because the humfunctor of A is going to be a functor from A op times A to set. So the humfunctor of A op is going to have this kind of form here. And so we'll take that as our W. And now if we just work out what this kind of thing is, well, what we end up with is this sort of formula here. So we're doing this arrow here, which we should probably put H here now instead of a W. We're doing H hat on this hum A op. So what we have here is that this is H hat operating on hum of A op. And we can write it directly like this. Here's the same thing written as a weighted co-limit. But now what I'm telling you is that there's this other idea in category theory called a co-end. And it turns out that we can really define a co-end to be this. So the co-end of this bifunctor H can be defined to be the hum A op weighted co-limit of H. And we usually write these co-ends with this kind of integral form like this with the kind of thing that we're integrating upstairs. So there we are. We've just got this notion of co-ends totally free out of this theory. Okay, so now we're ready for the final application of these big ideas. And that is understanding profunctals. So a profunctor from A to B is the same thing as a functor P from A op times B to set. And a good way to think of it is that, well, you can think of it as a generalization of a humfunctor. That's quite a good way of looking at it. So, you know, if A equals B and this is a humfunctor, well, that's a kind of profunctor. Or you can think, well, I'm sending a pair of an object of A and an object of B to this set. And you can kind of maybe think about something like the set of proofs that A implies B or something like this. Or maybe you can think about something like the set of proofs that the first proposition, the object in A, implies the second proposition, the object in B. There's various different types of intuition that you can have. Now, it turns out that there's a category of profunctals. And with this kind of machinery we've been talking about today, we can understand it. So, as I say, a profunctor P corresponds to a functor of this kind of form. We're free to apply a kind of swap of the order on the left and some currying. And then we can change it into a functor of this kind of form. So, we'll call that P dash. That's clearly an equivalent form. But the sort of maths that we've been talking about today tells us that a functor from B to this category of pre-sheaves here corresponds to a co-continuous functor of this kind of form. A co-continuous functor between these two categories of pre-sheaves. So, this is another equivalent form for this profunctor P. Now, there's a nice analogy in what's going on here with linear algebra. I haven't covered linear algebra in this course if this doesn't mean much to you, don't worry. This is the basic sort of analogy. It's that if you think about A and B as finite sets, then we could have an A times B matrix. And that corresponds to a linear map from B dimensional space to A dimensional space. We could also think of it as just a function sending the elements of B to A dimensional space. And if you look at this pattern, it's pretty much analogous with this pattern here. It's just here we have profunctores instead of functions. And we have co-continuous functores instead of linear functions. But basically, the idea is that once we start with a profunctor of this form, we can convert it into this form trivially. And then this idea of free co-completeness, and in particular this type of diagram here, gives us this equivalent co-continuous functor, which sort of corresponds with this functor P-dash. And this turns out to be the key towards defining profunctor composition. You see, there's actually a category called prof, and it has objects as categories, and it has arrows as profunctores. Now, the identity arrow of an object A is just going to be this profunctor, which is just the hom functor of A. That's, of course, a functor from... We can, of course, think of that as a functor from A op times A to set. So it is a profunctor. It turns out that it really acts like the identity in this category of profunctores. A more interesting question is, how can we compose general profunctores? So what about if we have a profunctor P from A to B, and a profunctor Q from B to C, and we want to compose them? Well, then we want to end up with some kind of thing that we could call a composition, which ends up being a functor from A op times C to set. And it turns out that, basically, we can just define it to be this kind of composition here. So this LANYP dash is, as shown in this diagram, we know how to compute it. We've looked at a formula for it earlier and so on. And if we just compose this after this, you can see that we have something that goes from C to this category of pre-sheaves. And if we just sort of untangle this, we can put it into this kind of form and consider it to be the composition Q after P. So basically, that's how profunctor... So basically, that's how profunctores work. Now, it turns out that the normal way of thinking about this is that one writes profunctor composition with a co-end formula like this. But, you know, we don't need to do that because we have this way of thinking about it in terms of can extensions and co-completeness. By the way, the stuff I just talked about to do with composing profunctores is basically remark 5.1.7 of Fosco's book, Co-end Calculus, if one wants to dig deeper into this. So if you want to understand about profunctores, definitely the best advice I can think of is that you should consider what happens when the categories of profunctores are discrete. Okay? Because if you think about it, what's a profunctor from A to B when A and B are discrete categories? Well, in that case, these things don't have any arrows. It doesn't matter about taking the opposite of the categories because there's no arrows to reverse. You know, we only have identity arrows. And basically for every object of A and object of B, we just have a set and that's all the data which goes into defining the profunctor. And if we think about finite sets, then essentially we can just think of a profunctor as something like a matrix of non-negative integers. And in that case, if one looks at the way that profunctor composition works, it looks exactly like matrix multiplication. And this is really beautiful because you'll see that basically if you look at the full subcategory of this category of profunctores on the discrete categories, well, it just looks like linear algebra basically. It just looks like the profunctores or like matrices and composing them is matrix multiplication. That's all there is to it. And so that's kind of beautiful. The final thing I want to say just to come full circle is that co-ends are another one of these super powerful ideas. And it turns out that we can express can extensions in terms of co-ends. So when E here has co-powers, we can express this formula for the left can extension here in terms of co-ends like this. So now we've kind of come full circle. And remember, everything I've talked about today can be dualized. So if we go back, back, back way back in time to our original diagram. Yeah, you can dualize all this. So you've got right can extension here. There's a sort of analog of the yoneder extension. There's the idea of free completion. We have weighted limits. There's an idea of powering, which is also called co-tensoring and so on. So, you know, there's a very rich web of ideas here. And in particular, the main sort of point I want to get across and, you know, you can dig into further resources like nlabs to understand more about this. But the big idea is that like can extensions, weighted co-limits and co-ends are also general that you can talk about the other concepts from inside them. So we kind of have this idea of these concepts, which is so general that any other concept can be expressed in terms of them.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.72, "text": " Okay, so what we're going to do this time is to talk about the most powerful concepts", "tokens": [50364, 1033, 11, 370, 437, 321, 434, 516, 281, 360, 341, 565, 307, 281, 751, 466, 264, 881, 4005, 10392, 50800], "temperature": 0.0, "avg_logprob": -0.15686663714322177, "compression_ratio": 1.4823529411764707, "no_speech_prob": 0.08614100515842438}, {"id": 1, "seek": 0, "start": 8.72, "end": 10.92, "text": " in category theory.", "tokens": [50800, 294, 7719, 5261, 13, 50910], "temperature": 0.0, "avg_logprob": -0.15686663714322177, "compression_ratio": 1.4823529411764707, "no_speech_prob": 0.08614100515842438}, {"id": 2, "seek": 0, "start": 10.92, "end": 16.48, "text": " So to introduce this, I'd like to talk about planets.", "tokens": [50910, 407, 281, 5366, 341, 11, 286, 1116, 411, 281, 751, 466, 15126, 13, 51188], "temperature": 0.0, "avg_logprob": -0.15686663714322177, "compression_ratio": 1.4823529411764707, "no_speech_prob": 0.08614100515842438}, {"id": 3, "seek": 0, "start": 16.48, "end": 20.240000000000002, "text": " You see, planets are very complicated.", "tokens": [51188, 509, 536, 11, 15126, 366, 588, 6179, 13, 51376], "temperature": 0.0, "avg_logprob": -0.15686663714322177, "compression_ratio": 1.4823529411764707, "no_speech_prob": 0.08614100515842438}, {"id": 4, "seek": 0, "start": 20.240000000000002, "end": 25.44, "text": " I don't think anyone truly understands planets fully.", "tokens": [51376, 286, 500, 380, 519, 2878, 4908, 15146, 15126, 4498, 13, 51636], "temperature": 0.0, "avg_logprob": -0.15686663714322177, "compression_ratio": 1.4823529411764707, "no_speech_prob": 0.08614100515842438}, {"id": 5, "seek": 2544, "start": 25.44, "end": 31.32, "text": " Nobody's walked all around a planet, nobody's drilled into the center of a planet.", "tokens": [50364, 9297, 311, 7628, 439, 926, 257, 5054, 11, 5079, 311, 38210, 666, 264, 3056, 295, 257, 5054, 13, 50658], "temperature": 0.0, "avg_logprob": -0.22223799778864933, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.11101482808589935}, {"id": 6, "seek": 2544, "start": 31.32, "end": 39.120000000000005, "text": " However, it's very interesting that through astronomy, basically by observing the interactions", "tokens": [50658, 2908, 11, 309, 311, 588, 1880, 300, 807, 37844, 11, 1936, 538, 22107, 264, 13280, 51048], "temperature": 0.0, "avg_logprob": -0.22223799778864933, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.11101482808589935}, {"id": 7, "seek": 2544, "start": 39.120000000000005, "end": 45.84, "text": " of many planets and many celestial bodies, we can gain a tremendous amount of understanding", "tokens": [51048, 295, 867, 15126, 293, 867, 41003, 7510, 11, 321, 393, 6052, 257, 10048, 2372, 295, 3701, 51384], "temperature": 0.0, "avg_logprob": -0.22223799778864933, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.11101482808589935}, {"id": 8, "seek": 2544, "start": 45.84, "end": 48.92, "text": " about the nature of planets.", "tokens": [51384, 466, 264, 3687, 295, 15126, 13, 51538], "temperature": 0.0, "avg_logprob": -0.22223799778864933, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.11101482808589935}, {"id": 9, "seek": 4892, "start": 48.92, "end": 54.64, "text": " And I think it's very similar with some of these highly abstract structures in category", "tokens": [50364, 400, 286, 519, 309, 311, 588, 2531, 365, 512, 295, 613, 5405, 12649, 9227, 294, 7719, 50650], "temperature": 0.0, "avg_logprob": -0.15254935096291936, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.01989337056875229}, {"id": 10, "seek": 4892, "start": 54.64, "end": 56.2, "text": " theory.", "tokens": [50650, 5261, 13, 50728], "temperature": 0.0, "avg_logprob": -0.15254935096291936, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.01989337056875229}, {"id": 11, "seek": 4892, "start": 56.2, "end": 58.6, "text": " So there are certain kinds of structures.", "tokens": [50728, 407, 456, 366, 1629, 3685, 295, 9227, 13, 50848], "temperature": 0.0, "avg_logprob": -0.15254935096291936, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.01989337056875229}, {"id": 12, "seek": 4892, "start": 58.6, "end": 65.44, "text": " I'm talking about things like can extensions, weighted co-limits, co-ends.", "tokens": [50848, 286, 478, 1417, 466, 721, 411, 393, 25129, 11, 32807, 598, 12, 4197, 1208, 11, 598, 12, 2581, 13, 51190], "temperature": 0.0, "avg_logprob": -0.15254935096291936, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.01989337056875229}, {"id": 13, "seek": 4892, "start": 65.44, "end": 71.24000000000001, "text": " There are these kind of structures which are so general that every other concept in category", "tokens": [51190, 821, 366, 613, 733, 295, 9227, 597, 366, 370, 2674, 300, 633, 661, 3410, 294, 7719, 51480], "temperature": 0.0, "avg_logprob": -0.15254935096291936, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.01989337056875229}, {"id": 14, "seek": 4892, "start": 71.24000000000001, "end": 76.68, "text": " theory can be explained in terms of these things.", "tokens": [51480, 5261, 393, 312, 8825, 294, 2115, 295, 613, 721, 13, 51752], "temperature": 0.0, "avg_logprob": -0.15254935096291936, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.01989337056875229}, {"id": 15, "seek": 7668, "start": 76.68, "end": 83.4, "text": " And this leads to quotes like all concepts are can extensions, which is a famous quote", "tokens": [50364, 400, 341, 6689, 281, 19963, 411, 439, 10392, 366, 393, 25129, 11, 597, 307, 257, 4618, 6513, 50700], "temperature": 0.0, "avg_logprob": -0.1537834842030595, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0003244592808187008}, {"id": 16, "seek": 7668, "start": 83.4, "end": 85.84, "text": " by Saunders MacLean.", "tokens": [50700, 538, 6299, 997, 433, 5707, 11020, 282, 13, 50822], "temperature": 0.0, "avg_logprob": -0.1537834842030595, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0003244592808187008}, {"id": 17, "seek": 7668, "start": 85.84, "end": 92.88000000000001, "text": " And so it's really remarkable that these kind of highly abstract, super general concepts", "tokens": [50822, 400, 370, 309, 311, 534, 12802, 300, 613, 733, 295, 5405, 12649, 11, 1687, 2674, 10392, 51174], "temperature": 0.0, "avg_logprob": -0.1537834842030595, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0003244592808187008}, {"id": 18, "seek": 7668, "start": 92.88000000000001, "end": 94.60000000000001, "text": " do exist.", "tokens": [51174, 360, 2514, 13, 51260], "temperature": 0.0, "avg_logprob": -0.1537834842030595, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0003244592808187008}, {"id": 19, "seek": 7668, "start": 94.60000000000001, "end": 100.80000000000001, "text": " And in a sense, if we can understand them, it gives us a way to understand everything", "tokens": [51260, 400, 294, 257, 2020, 11, 498, 321, 393, 1223, 552, 11, 309, 2709, 505, 257, 636, 281, 1223, 1203, 51570], "temperature": 0.0, "avg_logprob": -0.1537834842030595, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0003244592808187008}, {"id": 20, "seek": 7668, "start": 100.80000000000001, "end": 103.80000000000001, "text": " else in our theory.", "tokens": [51570, 1646, 294, 527, 5261, 13, 51720], "temperature": 0.0, "avg_logprob": -0.1537834842030595, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0003244592808187008}, {"id": 21, "seek": 10380, "start": 103.8, "end": 110.6, "text": " Now the issue, a bit like with a planet, is that when one focuses directly on something", "tokens": [50364, 823, 264, 2734, 11, 257, 857, 411, 365, 257, 5054, 11, 307, 300, 562, 472, 16109, 3838, 322, 746, 50704], "temperature": 0.0, "avg_logprob": -0.11456497416776769, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0038157885428518057}, {"id": 22, "seek": 10380, "start": 110.6, "end": 117.28, "text": " like the notion of can extensions, they can look rather complicated and difficult to understand", "tokens": [50704, 411, 264, 10710, 295, 393, 25129, 11, 436, 393, 574, 2831, 6179, 293, 2252, 281, 1223, 51038], "temperature": 0.0, "avg_logprob": -0.11456497416776769, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0038157885428518057}, {"id": 23, "seek": 10380, "start": 117.28, "end": 119.24, "text": " in isolation.", "tokens": [51038, 294, 16001, 13, 51136], "temperature": 0.0, "avg_logprob": -0.11456497416776769, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0038157885428518057}, {"id": 24, "seek": 10380, "start": 119.24, "end": 124.88, "text": " And so the approach we're going to take today is to investigate the sort of interactions", "tokens": [51136, 400, 370, 264, 3109, 321, 434, 516, 281, 747, 965, 307, 281, 15013, 264, 1333, 295, 13280, 51418], "temperature": 0.0, "avg_logprob": -0.11456497416776769, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0038157885428518057}, {"id": 25, "seek": 10380, "start": 124.88, "end": 127.36, "text": " between these different concepts.", "tokens": [51418, 1296, 613, 819, 10392, 13, 51542], "temperature": 0.0, "avg_logprob": -0.11456497416776769, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0038157885428518057}, {"id": 26, "seek": 10380, "start": 127.36, "end": 131.84, "text": " How can these different ideas be related to each other?", "tokens": [51542, 1012, 393, 613, 819, 3487, 312, 4077, 281, 1184, 661, 30, 51766], "temperature": 0.0, "avg_logprob": -0.11456497416776769, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0038157885428518057}, {"id": 27, "seek": 13184, "start": 131.84, "end": 135.84, "text": " And it's really remarkable how this is going to end up.", "tokens": [50364, 400, 309, 311, 534, 12802, 577, 341, 307, 516, 281, 917, 493, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11591525654216389, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.009407556615769863}, {"id": 28, "seek": 13184, "start": 135.84, "end": 142.08, "text": " It's as if what we have here is some kind of like a family of fractal structures, each", "tokens": [50564, 467, 311, 382, 498, 437, 321, 362, 510, 307, 512, 733, 295, 411, 257, 1605, 295, 17948, 304, 9227, 11, 1184, 50876], "temperature": 0.0, "avg_logprob": -0.11591525654216389, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.009407556615769863}, {"id": 29, "seek": 13184, "start": 142.08, "end": 148.96, "text": " of which is so kind of rich that that fractal contains all of the other fractals in the", "tokens": [50876, 295, 597, 307, 370, 733, 295, 4593, 300, 300, 17948, 304, 8306, 439, 295, 264, 661, 17948, 1124, 294, 264, 51220], "temperature": 0.0, "avg_logprob": -0.11591525654216389, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.009407556615769863}, {"id": 30, "seek": 13184, "start": 148.96, "end": 149.96, "text": " family.", "tokens": [51220, 1605, 13, 51270], "temperature": 0.0, "avg_logprob": -0.11591525654216389, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.009407556615769863}, {"id": 31, "seek": 13184, "start": 149.96, "end": 156.4, "text": " So we could, for example, explain what weighted co-limits and co-ends are in terms of can", "tokens": [51270, 407, 321, 727, 11, 337, 1365, 11, 2903, 437, 32807, 598, 12, 4197, 1208, 293, 598, 12, 2581, 366, 294, 2115, 295, 393, 51592], "temperature": 0.0, "avg_logprob": -0.11591525654216389, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.009407556615769863}, {"id": 32, "seek": 15640, "start": 156.4, "end": 163.12, "text": " extensions, or we could decide that we want to explain what things are in terms of weighted", "tokens": [50364, 25129, 11, 420, 321, 727, 4536, 300, 321, 528, 281, 2903, 437, 721, 366, 294, 2115, 295, 32807, 50700], "temperature": 0.0, "avg_logprob": -0.10129587111934539, "compression_ratio": 1.6233183856502242, "no_speech_prob": 0.03502423316240311}, {"id": 33, "seek": 15640, "start": 163.12, "end": 166.36, "text": " co-limits and weighted limits and so on.", "tokens": [50700, 598, 12, 4197, 1208, 293, 32807, 10406, 293, 370, 322, 13, 50862], "temperature": 0.0, "avg_logprob": -0.10129587111934539, "compression_ratio": 1.6233183856502242, "no_speech_prob": 0.03502423316240311}, {"id": 34, "seek": 15640, "start": 166.36, "end": 172.36, "text": " So basically we want to explore how these super powerful concepts are interrelated.", "tokens": [50862, 407, 1936, 321, 528, 281, 6839, 577, 613, 1687, 4005, 10392, 366, 728, 12004, 13, 51162], "temperature": 0.0, "avg_logprob": -0.10129587111934539, "compression_ratio": 1.6233183856502242, "no_speech_prob": 0.03502423316240311}, {"id": 35, "seek": 15640, "start": 172.36, "end": 175.92000000000002, "text": " And this is going to be a very, very profitable thing to do.", "tokens": [51162, 400, 341, 307, 516, 281, 312, 257, 588, 11, 588, 21608, 551, 281, 360, 13, 51340], "temperature": 0.0, "avg_logprob": -0.10129587111934539, "compression_ratio": 1.6233183856502242, "no_speech_prob": 0.03502423316240311}, {"id": 36, "seek": 15640, "start": 175.92000000000002, "end": 180.92000000000002, "text": " I mean, in a sense, I view this video as a kind of celebration of how far we've come", "tokens": [51340, 286, 914, 11, 294, 257, 2020, 11, 286, 1910, 341, 960, 382, 257, 733, 295, 14184, 295, 577, 1400, 321, 600, 808, 51590], "temperature": 0.0, "avg_logprob": -0.10129587111934539, "compression_ratio": 1.6233183856502242, "no_speech_prob": 0.03502423316240311}, {"id": 37, "seek": 18092, "start": 180.92, "end": 187.2, "text": " because now we can define and explore these super general concepts.", "tokens": [50364, 570, 586, 321, 393, 6964, 293, 6839, 613, 1687, 2674, 10392, 13, 50678], "temperature": 0.0, "avg_logprob": -0.12287997064136323, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.009080926887691021}, {"id": 38, "seek": 18092, "start": 187.2, "end": 192.88, "text": " It's kind of as if we've got above the clouds of category theory and we can see these great", "tokens": [50678, 467, 311, 733, 295, 382, 498, 321, 600, 658, 3673, 264, 12193, 295, 7719, 5261, 293, 321, 393, 536, 613, 869, 50962], "temperature": 0.0, "avg_logprob": -0.12287997064136323, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.009080926887691021}, {"id": 39, "seek": 18092, "start": 192.88, "end": 198.35999999999999, "text": " peaks, these super powerful structures and how they're related to each other.", "tokens": [50962, 26897, 11, 613, 1687, 4005, 9227, 293, 577, 436, 434, 4077, 281, 1184, 661, 13, 51236], "temperature": 0.0, "avg_logprob": -0.12287997064136323, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.009080926887691021}, {"id": 40, "seek": 18092, "start": 198.35999999999999, "end": 203.64, "text": " And so what we're going to do today, we're going to start by recapping the idea of can", "tokens": [51236, 400, 370, 437, 321, 434, 516, 281, 360, 965, 11, 321, 434, 516, 281, 722, 538, 43086, 3759, 264, 1558, 295, 393, 51500], "temperature": 0.0, "avg_logprob": -0.12287997064136323, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.009080926887691021}, {"id": 41, "seek": 18092, "start": 203.64, "end": 205.6, "text": " extensions.", "tokens": [51500, 25129, 13, 51598], "temperature": 0.0, "avg_logprob": -0.12287997064136323, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.009080926887691021}, {"id": 42, "seek": 20560, "start": 205.6, "end": 210.79999999999998, "text": " And then we're going to get to these fascinating ideas of your need or extension and freco", "tokens": [50364, 400, 550, 321, 434, 516, 281, 483, 281, 613, 10343, 3487, 295, 428, 643, 420, 10320, 293, 2130, 1291, 50624], "temperature": 0.0, "avg_logprob": -0.17242097854614258, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.23258544504642487}, {"id": 43, "seek": 20560, "start": 210.79999999999998, "end": 211.79999999999998, "text": " completion.", "tokens": [50624, 19372, 13, 50674], "temperature": 0.0, "avg_logprob": -0.17242097854614258, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.23258544504642487}, {"id": 44, "seek": 20560, "start": 211.79999999999998, "end": 216.68, "text": " And we're going to see how all of these other fascinating concepts kind of spring from there", "tokens": [50674, 400, 321, 434, 516, 281, 536, 577, 439, 295, 613, 661, 10343, 10392, 733, 295, 5587, 490, 456, 50918], "temperature": 0.0, "avg_logprob": -0.17242097854614258, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.23258544504642487}, {"id": 45, "seek": 20560, "start": 216.68, "end": 217.68, "text": " like a fountain.", "tokens": [50918, 411, 257, 29451, 13, 50968], "temperature": 0.0, "avg_logprob": -0.17242097854614258, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.23258544504642487}, {"id": 46, "seek": 20560, "start": 217.68, "end": 223.12, "text": " Okay, so this is one of the most informative videos I think I've put on YouTube.", "tokens": [50968, 1033, 11, 370, 341, 307, 472, 295, 264, 881, 27759, 2145, 286, 519, 286, 600, 829, 322, 3088, 13, 51240], "temperature": 0.0, "avg_logprob": -0.17242097854614258, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.23258544504642487}, {"id": 47, "seek": 20560, "start": 223.12, "end": 226.72, "text": " And I wanted to give some recommendations about how to watch it.", "tokens": [51240, 400, 286, 1415, 281, 976, 512, 10434, 466, 577, 281, 1159, 309, 13, 51420], "temperature": 0.0, "avg_logprob": -0.17242097854614258, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.23258544504642487}, {"id": 48, "seek": 20560, "start": 226.72, "end": 230.51999999999998, "text": " So my main one would be 2x.", "tokens": [51420, 407, 452, 2135, 472, 576, 312, 568, 87, 13, 51610], "temperature": 0.0, "avg_logprob": -0.17242097854614258, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.23258544504642487}, {"id": 49, "seek": 23052, "start": 230.52, "end": 237.56, "text": " So for the first hour or so of this video, I would recommend watching it on double speed.", "tokens": [50364, 407, 337, 264, 700, 1773, 420, 370, 295, 341, 960, 11, 286, 576, 2748, 1976, 309, 322, 3834, 3073, 13, 50716], "temperature": 0.0, "avg_logprob": -0.0866101582845052, "compression_ratio": 1.5228426395939085, "no_speech_prob": 0.1289951503276825}, {"id": 50, "seek": 23052, "start": 237.56, "end": 244.92000000000002, "text": " The reason is because I like to try and define everything I'm talking about, but when we", "tokens": [50716, 440, 1778, 307, 570, 286, 411, 281, 853, 293, 6964, 1203, 286, 478, 1417, 466, 11, 457, 562, 321, 51084], "temperature": 0.0, "avg_logprob": -0.0866101582845052, "compression_ratio": 1.5228426395939085, "no_speech_prob": 0.1289951503276825}, {"id": 51, "seek": 23052, "start": 244.92000000000002, "end": 252.60000000000002, "text": " get into can extensions and so on, the kind of level of abstraction is going to go up.", "tokens": [51084, 483, 666, 393, 25129, 293, 370, 322, 11, 264, 733, 295, 1496, 295, 37765, 307, 516, 281, 352, 493, 13, 51468], "temperature": 0.0, "avg_logprob": -0.0866101582845052, "compression_ratio": 1.5228426395939085, "no_speech_prob": 0.1289951503276825}, {"id": 52, "seek": 23052, "start": 252.60000000000002, "end": 256.76, "text": " So this is sort of the first hour.", "tokens": [51468, 407, 341, 307, 1333, 295, 264, 700, 1773, 13, 51676], "temperature": 0.0, "avg_logprob": -0.0866101582845052, "compression_ratio": 1.5228426395939085, "no_speech_prob": 0.1289951503276825}, {"id": 53, "seek": 25676, "start": 256.76, "end": 261.88, "text": " And you know, with most people, it gets to a point when it's kind of difficult to understand", "tokens": [50364, 400, 291, 458, 11, 365, 881, 561, 11, 309, 2170, 281, 257, 935, 562, 309, 311, 733, 295, 2252, 281, 1223, 50620], "temperature": 0.0, "avg_logprob": -0.12394933803107148, "compression_ratio": 1.6375, "no_speech_prob": 0.025074468925595284}, {"id": 54, "seek": 25676, "start": 261.88, "end": 264.08, "text": " on a first viewing.", "tokens": [50620, 322, 257, 700, 17480, 13, 50730], "temperature": 0.0, "avg_logprob": -0.12394933803107148, "compression_ratio": 1.6375, "no_speech_prob": 0.025074468925595284}, {"id": 55, "seek": 25676, "start": 264.08, "end": 267.48, "text": " So I would recommend watching the thing on double speed.", "tokens": [50730, 407, 286, 576, 2748, 1976, 264, 551, 322, 3834, 3073, 13, 50900], "temperature": 0.0, "avg_logprob": -0.12394933803107148, "compression_ratio": 1.6375, "no_speech_prob": 0.025074468925595284}, {"id": 56, "seek": 25676, "start": 267.48, "end": 273.76, "text": " And then once we kind of get through the definition of can extensions and onto freco completions,", "tokens": [50900, 400, 550, 1564, 321, 733, 295, 483, 807, 264, 7123, 295, 393, 25129, 293, 3911, 2130, 1291, 1557, 626, 11, 51214], "temperature": 0.0, "avg_logprob": -0.12394933803107148, "compression_ratio": 1.6375, "no_speech_prob": 0.025074468925595284}, {"id": 57, "seek": 25676, "start": 273.76, "end": 281.92, "text": " like the level of abstraction decreases and we start looking at lots of examples.", "tokens": [51214, 411, 264, 1496, 295, 37765, 24108, 293, 321, 722, 1237, 412, 3195, 295, 5110, 13, 51622], "temperature": 0.0, "avg_logprob": -0.12394933803107148, "compression_ratio": 1.6375, "no_speech_prob": 0.025074468925595284}, {"id": 58, "seek": 25676, "start": 281.92, "end": 284.28, "text": " And these examples are seriously beautiful.", "tokens": [51622, 400, 613, 5110, 366, 6638, 2238, 13, 51740], "temperature": 0.0, "avg_logprob": -0.12394933803107148, "compression_ratio": 1.6375, "no_speech_prob": 0.025074468925595284}, {"id": 59, "seek": 28428, "start": 284.84, "end": 288.0, "text": " Especially this idea of a density theorem.", "tokens": [50392, 8545, 341, 1558, 295, 257, 10305, 20904, 13, 50550], "temperature": 0.0, "avg_logprob": -0.1490561287358122, "compression_ratio": 1.705179282868526, "no_speech_prob": 0.06706522405147552}, {"id": 60, "seek": 28428, "start": 288.0, "end": 294.2, "text": " It's basically like the idea that, for example, you can take a graph and you can make it out", "tokens": [50550, 467, 311, 1936, 411, 264, 1558, 300, 11, 337, 1365, 11, 291, 393, 747, 257, 4295, 293, 291, 393, 652, 309, 484, 50860], "temperature": 0.0, "avg_logprob": -0.1490561287358122, "compression_ratio": 1.705179282868526, "no_speech_prob": 0.06706522405147552}, {"id": 61, "seek": 28428, "start": 294.2, "end": 299.52, "text": " of vertices and edges by kind of gluing them together, but there's a sort of recipe that", "tokens": [50860, 295, 32053, 293, 8819, 538, 733, 295, 1563, 9635, 552, 1214, 11, 457, 456, 311, 257, 1333, 295, 6782, 300, 51126], "temperature": 0.0, "avg_logprob": -0.1490561287358122, "compression_ratio": 1.705179282868526, "no_speech_prob": 0.06706522405147552}, {"id": 62, "seek": 28428, "start": 299.52, "end": 302.28, "text": " works for any graph for doing that.", "tokens": [51126, 1985, 337, 604, 4295, 337, 884, 300, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1490561287358122, "compression_ratio": 1.705179282868526, "no_speech_prob": 0.06706522405147552}, {"id": 63, "seek": 28428, "start": 302.28, "end": 308.2, "text": " And it just comes directly out of the maths that we've been looking at for free.", "tokens": [51264, 400, 309, 445, 1487, 3838, 484, 295, 264, 36287, 300, 321, 600, 668, 1237, 412, 337, 1737, 13, 51560], "temperature": 0.0, "avg_logprob": -0.1490561287358122, "compression_ratio": 1.705179282868526, "no_speech_prob": 0.06706522405147552}, {"id": 64, "seek": 28428, "start": 308.2, "end": 312.59999999999997, "text": " And the same idea applies for all sorts of other structures like dynamical systems and", "tokens": [51560, 400, 264, 912, 1558, 13165, 337, 439, 7527, 295, 661, 9227, 411, 5999, 804, 3652, 293, 51780], "temperature": 0.0, "avg_logprob": -0.1490561287358122, "compression_ratio": 1.705179282868526, "no_speech_prob": 0.06706522405147552}, {"id": 65, "seek": 31260, "start": 312.72, "end": 315.12, "text": " plus your sets and all sorts of things.", "tokens": [50370, 1804, 428, 6352, 293, 439, 7527, 295, 721, 13, 50490], "temperature": 0.0, "avg_logprob": -0.15942066594174034, "compression_ratio": 1.7617021276595746, "no_speech_prob": 0.0036412144545465708}, {"id": 66, "seek": 31260, "start": 315.12, "end": 316.48, "text": " It's it's pretty crazy.", "tokens": [50490, 467, 311, 309, 311, 1238, 3219, 13, 50558], "temperature": 0.0, "avg_logprob": -0.15942066594174034, "compression_ratio": 1.7617021276595746, "no_speech_prob": 0.0036412144545465708}, {"id": 67, "seek": 31260, "start": 316.48, "end": 321.36, "text": " It's it's almost like a universal recipe for making structures that we're going to kind", "tokens": [50558, 467, 311, 309, 311, 1920, 411, 257, 11455, 6782, 337, 1455, 9227, 300, 321, 434, 516, 281, 733, 50802], "temperature": 0.0, "avg_logprob": -0.15942066594174034, "compression_ratio": 1.7617021276595746, "no_speech_prob": 0.0036412144545465708}, {"id": 68, "seek": 31260, "start": 321.36, "end": 322.52000000000004, "text": " of get to.", "tokens": [50802, 295, 483, 281, 13, 50860], "temperature": 0.0, "avg_logprob": -0.15942066594174034, "compression_ratio": 1.7617021276595746, "no_speech_prob": 0.0036412144545465708}, {"id": 69, "seek": 31260, "start": 322.52000000000004, "end": 325.32000000000005, "text": " And that's just one of the things that we're going to get to.", "tokens": [50860, 400, 300, 311, 445, 472, 295, 264, 721, 300, 321, 434, 516, 281, 483, 281, 13, 51000], "temperature": 0.0, "avg_logprob": -0.15942066594174034, "compression_ratio": 1.7617021276595746, "no_speech_prob": 0.0036412144545465708}, {"id": 70, "seek": 31260, "start": 325.32000000000005, "end": 332.88, "text": " We're going to get to understand about profunctals and co-ends and loads of really interesting", "tokens": [51000, 492, 434, 516, 281, 483, 281, 1223, 466, 1740, 409, 349, 1124, 293, 598, 12, 2581, 293, 12668, 295, 534, 1880, 51378], "temperature": 0.0, "avg_logprob": -0.15942066594174034, "compression_ratio": 1.7617021276595746, "no_speech_prob": 0.0036412144545465708}, {"id": 71, "seek": 31260, "start": 332.88, "end": 333.88, "text": " things.", "tokens": [51378, 721, 13, 51428], "temperature": 0.0, "avg_logprob": -0.15942066594174034, "compression_ratio": 1.7617021276595746, "no_speech_prob": 0.0036412144545465708}, {"id": 72, "seek": 31260, "start": 333.88, "end": 340.20000000000005, "text": " And so I'd say that the kind of level of insights which can be derived from this video", "tokens": [51428, 400, 370, 286, 1116, 584, 300, 264, 733, 295, 1496, 295, 14310, 597, 393, 312, 18949, 490, 341, 960, 51744], "temperature": 0.0, "avg_logprob": -0.15942066594174034, "compression_ratio": 1.7617021276595746, "no_speech_prob": 0.0036412144545465708}, {"id": 73, "seek": 34020, "start": 340.24, "end": 343.36, "text": " is going to sort of go up like this.", "tokens": [50366, 307, 516, 281, 1333, 295, 352, 493, 411, 341, 13, 50522], "temperature": 0.0, "avg_logprob": -0.14692843091356886, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.011756849475204945}, {"id": 74, "seek": 34020, "start": 343.36, "end": 352.15999999999997, "text": " And so the the thing really is to get past this kind of hump where we're setting up the", "tokens": [50522, 400, 370, 264, 264, 551, 534, 307, 281, 483, 1791, 341, 733, 295, 47093, 689, 321, 434, 3287, 493, 264, 50962], "temperature": 0.0, "avg_logprob": -0.14692843091356886, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.011756849475204945}, {"id": 75, "seek": 34020, "start": 352.15999999999997, "end": 356.0, "text": " initial structures, and it seems like it's kind of abstract.", "tokens": [50962, 5883, 9227, 11, 293, 309, 2544, 411, 309, 311, 733, 295, 12649, 13, 51154], "temperature": 0.0, "avg_logprob": -0.14692843091356886, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.011756849475204945}, {"id": 76, "seek": 34020, "start": 356.0, "end": 360.84, "text": " And that's why I'd recommend watching this thing on double speed, because, you know,", "tokens": [51154, 400, 300, 311, 983, 286, 1116, 2748, 1976, 341, 551, 322, 3834, 3073, 11, 570, 11, 291, 458, 11, 51396], "temperature": 0.0, "avg_logprob": -0.14692843091356886, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.011756849475204945}, {"id": 77, "seek": 34020, "start": 360.84, "end": 367.08, "text": " we can kind of zoom through this on a first viewing and then look at these fascinating", "tokens": [51396, 321, 393, 733, 295, 8863, 807, 341, 322, 257, 700, 17480, 293, 550, 574, 412, 613, 10343, 51708], "temperature": 0.0, "avg_logprob": -0.14692843091356886, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.011756849475204945}, {"id": 78, "seek": 36708, "start": 367.08, "end": 372.64, "text": " applications, and then that's going to hopefully give you the motivation to go back and watch", "tokens": [50364, 5821, 11, 293, 550, 300, 311, 516, 281, 4696, 976, 291, 264, 12335, 281, 352, 646, 293, 1159, 50642], "temperature": 0.0, "avg_logprob": -0.19963085083734422, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.014936593361198902}, {"id": 79, "seek": 36708, "start": 372.64, "end": 378.24, "text": " the thing again, slowly get the pen and paper, try and follow all the diagrams.", "tokens": [50642, 264, 551, 797, 11, 5692, 483, 264, 3435, 293, 3035, 11, 853, 293, 1524, 439, 264, 36709, 13, 50922], "temperature": 0.0, "avg_logprob": -0.19963085083734422, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.014936593361198902}, {"id": 80, "seek": 36708, "start": 378.84, "end": 386.47999999999996, "text": " And a lot of this stuff is in Emily Reels book, Category Theory in Context, which I", "tokens": [50952, 400, 257, 688, 295, 341, 1507, 307, 294, 15034, 1300, 1625, 1446, 11, 383, 48701, 29009, 294, 4839, 3828, 11, 597, 286, 51334], "temperature": 0.0, "avg_logprob": -0.19963085083734422, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.014936593361198902}, {"id": 81, "seek": 36708, "start": 386.47999999999996, "end": 394.28, "text": " highly recommend, particularly in one of the last chapters, she talks about can extensions", "tokens": [51334, 5405, 2748, 11, 4098, 294, 472, 295, 264, 1036, 20013, 11, 750, 6686, 466, 393, 25129, 51724], "temperature": 0.0, "avg_logprob": -0.19963085083734422, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.014936593361198902}, {"id": 82, "seek": 39428, "start": 394.52, "end": 399.15999999999997, "text": " and it's a very nice clear description of can extensions where you can look at all of", "tokens": [50376, 293, 309, 311, 257, 588, 1481, 1850, 3855, 295, 393, 25129, 689, 291, 393, 574, 412, 439, 295, 50608], "temperature": 0.0, "avg_logprob": -0.1533426731190783, "compression_ratio": 1.583710407239819, "no_speech_prob": 0.005981600843369961}, {"id": 83, "seek": 39428, "start": 399.15999999999997, "end": 406.15999999999997, "text": " the kind of formulas, details, proofs of things that I've been talking about and dig", "tokens": [50608, 264, 733, 295, 30546, 11, 4365, 11, 8177, 82, 295, 721, 300, 286, 600, 668, 1417, 466, 293, 2528, 50958], "temperature": 0.0, "avg_logprob": -0.1533426731190783, "compression_ratio": 1.583710407239819, "no_speech_prob": 0.005981600843369961}, {"id": 84, "seek": 39428, "start": 406.15999999999997, "end": 408.15999999999997, "text": " into those in more detail.", "tokens": [50958, 666, 729, 294, 544, 2607, 13, 51058], "temperature": 0.0, "avg_logprob": -0.1533426731190783, "compression_ratio": 1.583710407239819, "no_speech_prob": 0.005981600843369961}, {"id": 85, "seek": 39428, "start": 408.88, "end": 410.67999999999995, "text": " So, yeah, I hope you enjoy.", "tokens": [51094, 407, 11, 1338, 11, 286, 1454, 291, 2103, 13, 51184], "temperature": 0.0, "avg_logprob": -0.1533426731190783, "compression_ratio": 1.583710407239819, "no_speech_prob": 0.005981600843369961}, {"id": 86, "seek": 39428, "start": 411.88, "end": 414.84, "text": " OK, so let me start with the idea of can extensions.", "tokens": [51244, 2264, 11, 370, 718, 385, 722, 365, 264, 1558, 295, 393, 25129, 13, 51392], "temperature": 0.0, "avg_logprob": -0.1533426731190783, "compression_ratio": 1.583710407239819, "no_speech_prob": 0.005981600843369961}, {"id": 87, "seek": 39428, "start": 415.32, "end": 420.15999999999997, "text": " I have talked about them before, but they're a pretty abstract concept.", "tokens": [51416, 286, 362, 2825, 466, 552, 949, 11, 457, 436, 434, 257, 1238, 12649, 3410, 13, 51658], "temperature": 0.0, "avg_logprob": -0.1533426731190783, "compression_ratio": 1.583710407239819, "no_speech_prob": 0.005981600843369961}, {"id": 88, "seek": 42016, "start": 420.16, "end": 424.64000000000004, "text": " And I think they're worth introducing again, especially because I think I might", "tokens": [50364, 400, 286, 519, 436, 434, 3163, 15424, 797, 11, 2318, 570, 286, 519, 286, 1062, 50588], "temperature": 0.0, "avg_logprob": -0.14943434178144083, "compression_ratio": 1.53125, "no_speech_prob": 0.0016885878285393119}, {"id": 89, "seek": 42016, "start": 424.64000000000004, "end": 428.52000000000004, "text": " have found a slightly kind of easier way to introduce them.", "tokens": [50588, 362, 1352, 257, 4748, 733, 295, 3571, 636, 281, 5366, 552, 13, 50782], "temperature": 0.0, "avg_logprob": -0.14943434178144083, "compression_ratio": 1.53125, "no_speech_prob": 0.0016885878285393119}, {"id": 90, "seek": 42016, "start": 428.88000000000005, "end": 430.56, "text": " So let's start with this question.", "tokens": [50800, 407, 718, 311, 722, 365, 341, 1168, 13, 50884], "temperature": 0.0, "avg_logprob": -0.14943434178144083, "compression_ratio": 1.53125, "no_speech_prob": 0.0016885878285393119}, {"id": 91, "seek": 42016, "start": 430.96000000000004, "end": 432.92, "text": " What comes next in this sequence?", "tokens": [50904, 708, 1487, 958, 294, 341, 8310, 30, 51002], "temperature": 0.0, "avg_logprob": -0.14943434178144083, "compression_ratio": 1.53125, "no_speech_prob": 0.0016885878285393119}, {"id": 92, "seek": 42016, "start": 435.48, "end": 438.24, "text": " OK, you can pause the video and think about it.", "tokens": [51130, 2264, 11, 291, 393, 10465, 264, 960, 293, 519, 466, 309, 13, 51268], "temperature": 0.0, "avg_logprob": -0.14943434178144083, "compression_ratio": 1.53125, "no_speech_prob": 0.0016885878285393119}, {"id": 93, "seek": 42016, "start": 439.08000000000004, "end": 447.44000000000005, "text": " Now, most people would say the next number in this sequence zero to four would be six.", "tokens": [51310, 823, 11, 881, 561, 576, 584, 264, 958, 1230, 294, 341, 8310, 4018, 281, 1451, 576, 312, 2309, 13, 51728], "temperature": 0.0, "avg_logprob": -0.14943434178144083, "compression_ratio": 1.53125, "no_speech_prob": 0.0016885878285393119}, {"id": 94, "seek": 44744, "start": 448.44, "end": 455.52, "text": " However, it's important to realize that there are mathematical sequences that don't go like this.", "tokens": [50414, 2908, 11, 309, 311, 1021, 281, 4325, 300, 456, 366, 18894, 22978, 300, 500, 380, 352, 411, 341, 13, 50768], "temperature": 0.0, "avg_logprob": -0.23461554845174154, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.001381630077958107}, {"id": 95, "seek": 44744, "start": 456.6, "end": 462.32, "text": " There are some mathematical sequences that go zero to four, five, for example.", "tokens": [50822, 821, 366, 512, 18894, 22978, 300, 352, 4018, 281, 1451, 11, 1732, 11, 337, 1365, 13, 51108], "temperature": 0.0, "avg_logprob": -0.23461554845174154, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.001381630077958107}, {"id": 96, "seek": 44744, "start": 463.72, "end": 475.2, "text": " And so really this question of what comes next in a sequence is not really usually very", "tokens": [51178, 400, 370, 534, 341, 1168, 295, 437, 1487, 958, 294, 257, 8310, 307, 406, 534, 2673, 588, 51752], "temperature": 0.0, "avg_logprob": -0.23461554845174154, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.001381630077958107}, {"id": 97, "seek": 47520, "start": 475.52, "end": 482.47999999999996, "text": " well defined, but it is an instance of something called an extension problem, which very roughly", "tokens": [50380, 731, 7642, 11, 457, 309, 307, 364, 5197, 295, 746, 1219, 364, 10320, 1154, 11, 597, 588, 9810, 50728], "temperature": 0.0, "avg_logprob": -0.15944818349984977, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.011659709736704826}, {"id": 98, "seek": 47520, "start": 482.47999999999996, "end": 489.48, "text": " speaking is kind of like a problem of extending a pattern to a larger structure.", "tokens": [50728, 4124, 307, 733, 295, 411, 257, 1154, 295, 24360, 257, 5102, 281, 257, 4833, 3877, 13, 51078], "temperature": 0.0, "avg_logprob": -0.15944818349984977, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.011659709736704826}, {"id": 99, "seek": 47520, "start": 490.8, "end": 492.2, "text": " So let's have a look at that.", "tokens": [51144, 407, 718, 311, 362, 257, 574, 412, 300, 13, 51214], "temperature": 0.0, "avg_logprob": -0.15944818349984977, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.011659709736704826}, {"id": 100, "seek": 47520, "start": 494.12, "end": 497.08, "text": " Here's how we can view that as an extension problem.", "tokens": [51310, 1692, 311, 577, 321, 393, 1910, 300, 382, 364, 10320, 1154, 13, 51458], "temperature": 0.0, "avg_logprob": -0.15944818349984977, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.011659709736704826}, {"id": 101, "seek": 49708, "start": 498.08, "end": 510.4, "text": " Let's take this set here, one, two, three, as C, and this set here of numbers on a right.", "tokens": [50414, 961, 311, 747, 341, 992, 510, 11, 472, 11, 732, 11, 1045, 11, 382, 383, 11, 293, 341, 992, 510, 295, 3547, 322, 257, 558, 13, 51030], "temperature": 0.0, "avg_logprob": -0.3115617207118443, "compression_ratio": 1.3669064748201438, "no_speech_prob": 0.01511456910520792}, {"id": 102, "seek": 49708, "start": 510.4, "end": 512.12, "text": " Let's call that E.", "tokens": [51030, 961, 311, 818, 300, 462, 13, 51116], "temperature": 0.0, "avg_logprob": -0.3115617207118443, "compression_ratio": 1.3669064748201438, "no_speech_prob": 0.01511456910520792}, {"id": 103, "seek": 49708, "start": 514.72, "end": 524.48, "text": " Now, the sequence that I talked about initially can be represented by a function.", "tokens": [51246, 823, 11, 264, 8310, 300, 286, 2825, 466, 9105, 393, 312, 10379, 538, 257, 2445, 13, 51734], "temperature": 0.0, "avg_logprob": -0.3115617207118443, "compression_ratio": 1.3669064748201438, "no_speech_prob": 0.01511456910520792}, {"id": 104, "seek": 52448, "start": 525.48, "end": 533.48, "text": " The first number was zero, the second number was two, the third number was four.", "tokens": [50414, 440, 700, 1230, 390, 4018, 11, 264, 1150, 1230, 390, 732, 11, 264, 2636, 1230, 390, 1451, 13, 50814], "temperature": 0.0, "avg_logprob": -0.21432514432110364, "compression_ratio": 1.7318435754189945, "no_speech_prob": 0.004820871166884899}, {"id": 105, "seek": 52448, "start": 534.48, "end": 538.48, "text": " And then I asked what should be the next thing in this sequence.", "tokens": [50864, 400, 550, 286, 2351, 437, 820, 312, 264, 958, 551, 294, 341, 8310, 13, 51064], "temperature": 0.0, "avg_logprob": -0.21432514432110364, "compression_ratio": 1.7318435754189945, "no_speech_prob": 0.004820871166884899}, {"id": 106, "seek": 52448, "start": 539.48, "end": 549.48, "text": " And so a way we can visualize what's going on is to say that what we want to do is we want to extend the domain", "tokens": [51114, 400, 370, 257, 636, 321, 393, 23273, 437, 311, 516, 322, 307, 281, 584, 300, 437, 321, 528, 281, 360, 307, 321, 528, 281, 10101, 264, 9274, 51614], "temperature": 0.0, "avg_logprob": -0.21432514432110364, "compression_ratio": 1.7318435754189945, "no_speech_prob": 0.004820871166884899}, {"id": 107, "seek": 52448, "start": 550.48, "end": 553.48, "text": " of this function or the source set of this function.", "tokens": [51664, 295, 341, 2445, 420, 264, 4009, 992, 295, 341, 2445, 13, 51814], "temperature": 0.0, "avg_logprob": -0.21432514432110364, "compression_ratio": 1.7318435754189945, "no_speech_prob": 0.004820871166884899}, {"id": 108, "seek": 55448, "start": 555.48, "end": 560.48, "text": " And so what we could say is instead of having a function that goes from the set one, two, three,", "tokens": [50414, 400, 370, 437, 321, 727, 584, 307, 2602, 295, 1419, 257, 2445, 300, 1709, 490, 264, 992, 472, 11, 732, 11, 1045, 11, 50664], "temperature": 0.0, "avg_logprob": -0.08479181707721867, "compression_ratio": 1.8289473684210527, "no_speech_prob": 0.0003147961397189647}, {"id": 109, "seek": 55448, "start": 561.48, "end": 564.48, "text": " we want to think about a function that goes from the set one, two, three, four.", "tokens": [50714, 321, 528, 281, 519, 466, 257, 2445, 300, 1709, 490, 264, 992, 472, 11, 732, 11, 1045, 11, 1451, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08479181707721867, "compression_ratio": 1.8289473684210527, "no_speech_prob": 0.0003147961397189647}, {"id": 110, "seek": 55448, "start": 565.48, "end": 574.48, "text": " But the crucial thing is that that function ought to act similarly on the values one, two, and three.", "tokens": [50914, 583, 264, 11462, 551, 307, 300, 300, 2445, 13416, 281, 605, 14138, 322, 264, 4190, 472, 11, 732, 11, 293, 1045, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08479181707721867, "compression_ratio": 1.8289473684210527, "no_speech_prob": 0.0003147961397189647}, {"id": 111, "seek": 57448, "start": 574.48, "end": 578.48, "text": " So a way we can formalize this is as follows.", "tokens": [50364, 407, 257, 636, 321, 393, 9860, 1125, 341, 307, 382, 10002, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11583540072807899, "compression_ratio": 1.3602941176470589, "no_speech_prob": 0.009406664408743382}, {"id": 112, "seek": 57448, "start": 579.48, "end": 587.48, "text": " We know that let's consider this slightly larger source set here, D.", "tokens": [50614, 492, 458, 300, 718, 311, 1949, 341, 4748, 4833, 4009, 992, 510, 11, 413, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11583540072807899, "compression_ratio": 1.3602941176470589, "no_speech_prob": 0.009406664408743382}, {"id": 113, "seek": 57448, "start": 588.48, "end": 602.48, "text": " Now, we know that there is a inclusion function like this from C to D.", "tokens": [51064, 823, 11, 321, 458, 300, 456, 307, 257, 15874, 2445, 411, 341, 490, 383, 281, 413, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11583540072807899, "compression_ratio": 1.3602941176470589, "no_speech_prob": 0.009406664408743382}, {"id": 114, "seek": 60248, "start": 602.48, "end": 609.48, "text": " Let's call this inclusion function K and let's call this thing that we started with F.", "tokens": [50364, 961, 311, 818, 341, 15874, 2445, 591, 293, 718, 311, 818, 341, 551, 300, 321, 1409, 365, 479, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08326033826144237, "compression_ratio": 1.4316546762589928, "no_speech_prob": 0.004132335539907217}, {"id": 115, "seek": 60248, "start": 610.48, "end": 624.48, "text": " And so now our problem is to find a function from D to E, which acts like F does on the values that came from C.", "tokens": [50764, 400, 370, 586, 527, 1154, 307, 281, 915, 257, 2445, 490, 413, 281, 462, 11, 597, 10672, 411, 479, 775, 322, 264, 4190, 300, 1361, 490, 383, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08326033826144237, "compression_ratio": 1.4316546762589928, "no_speech_prob": 0.004132335539907217}, {"id": 116, "seek": 62448, "start": 624.48, "end": 634.48, "text": " So just like in this case down here, this function that we want to cook up ought to send one to zero,", "tokens": [50364, 407, 445, 411, 294, 341, 1389, 760, 510, 11, 341, 2445, 300, 321, 528, 281, 2543, 493, 13416, 281, 2845, 472, 281, 4018, 11, 50864], "temperature": 0.0, "avg_logprob": -0.0868198981651893, "compression_ratio": 1.6418918918918919, "no_speech_prob": 0.07661446928977966}, {"id": 117, "seek": 62448, "start": 635.48, "end": 641.48, "text": " and it ought to send two to two, and it ought to send three to four.", "tokens": [50914, 293, 309, 13416, 281, 2845, 732, 281, 732, 11, 293, 309, 13416, 281, 2845, 1045, 281, 1451, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0868198981651893, "compression_ratio": 1.6418918918918919, "no_speech_prob": 0.07661446928977966}, {"id": 118, "seek": 62448, "start": 642.48, "end": 646.48, "text": " Now the question we basically want to know is where should we send four?", "tokens": [51264, 823, 264, 1168, 321, 1936, 528, 281, 458, 307, 689, 820, 321, 2845, 1451, 30, 51464], "temperature": 0.0, "avg_logprob": -0.0868198981651893, "compression_ratio": 1.6418918918918919, "no_speech_prob": 0.07661446928977966}, {"id": 119, "seek": 64648, "start": 646.48, "end": 655.48, "text": " And like I was saying, there isn't really a well-defined answer, but we could send four to six, just to finish the pattern.", "tokens": [50364, 400, 411, 286, 390, 1566, 11, 456, 1943, 380, 534, 257, 731, 12, 37716, 1867, 11, 457, 321, 727, 2845, 1451, 281, 2309, 11, 445, 281, 2413, 264, 5102, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08186307593957702, "compression_ratio": 1.5146198830409356, "no_speech_prob": 0.015376050025224686}, {"id": 120, "seek": 64648, "start": 656.48, "end": 668.48, "text": " And so what we're really doing here is we're trying to find an extension of the function F to this set D here that has a larger domain.", "tokens": [50864, 400, 370, 437, 321, 434, 534, 884, 510, 307, 321, 434, 1382, 281, 915, 364, 10320, 295, 264, 2445, 479, 281, 341, 992, 413, 510, 300, 575, 257, 4833, 9274, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08186307593957702, "compression_ratio": 1.5146198830409356, "no_speech_prob": 0.015376050025224686}, {"id": 121, "seek": 66848, "start": 669.48, "end": 677.48, "text": " And the key property that we want this extension to have is that this diagram commutes.", "tokens": [50414, 400, 264, 2141, 4707, 300, 321, 528, 341, 10320, 281, 362, 307, 300, 341, 10686, 800, 1819, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06566782864657315, "compression_ratio": 1.5138888888888888, "no_speech_prob": 0.017629796639084816}, {"id": 122, "seek": 66848, "start": 678.48, "end": 692.48, "text": " So if we call this new purple function G, then the key property that we are sort of trying to get here is that G after K equals F.", "tokens": [50864, 407, 498, 321, 818, 341, 777, 9656, 2445, 460, 11, 550, 264, 2141, 4707, 300, 321, 366, 1333, 295, 1382, 281, 483, 510, 307, 300, 460, 934, 591, 6915, 479, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06566782864657315, "compression_ratio": 1.5138888888888888, "no_speech_prob": 0.017629796639084816}, {"id": 123, "seek": 69248, "start": 692.48, "end": 707.48, "text": " And you can see that, right? If you pick anything in C and then you do K upon it, and then you do G upon it, you get to the same answer as if you do F upon it.", "tokens": [50364, 400, 291, 393, 536, 300, 11, 558, 30, 759, 291, 1888, 1340, 294, 383, 293, 550, 291, 360, 591, 3564, 309, 11, 293, 550, 291, 360, 460, 3564, 309, 11, 291, 483, 281, 264, 912, 1867, 382, 498, 291, 360, 479, 3564, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09204151233037312, "compression_ratio": 1.485981308411215, "no_speech_prob": 0.008550737053155899}, {"id": 124, "seek": 70748, "start": 708.48, "end": 725.48, "text": " So this is the extension problem, but what I've sort of been trying to illustrate with my what number comes next problem is that extension problems involving sets and functions don't usually have unique solutions.", "tokens": [50414, 407, 341, 307, 264, 10320, 1154, 11, 457, 437, 286, 600, 1333, 295, 668, 1382, 281, 23221, 365, 452, 437, 1230, 1487, 958, 1154, 307, 300, 10320, 2740, 17030, 6352, 293, 6828, 500, 380, 2673, 362, 3845, 6547, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10336348067882449, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.026736943051218987}, {"id": 125, "seek": 72548, "start": 725.48, "end": 734.48, "text": " So let's think about this situation I've just described a bit more abstractly.", "tokens": [50364, 407, 718, 311, 519, 466, 341, 2590, 286, 600, 445, 7619, 257, 857, 544, 12649, 356, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1234840710957845, "compression_ratio": 1.3185185185185184, "no_speech_prob": 0.08994926512241364}, {"id": 126, "seek": 72548, "start": 735.48, "end": 741.48, "text": " OK, we could say that what we've just drawn here is something that's happening in the category set.", "tokens": [50864, 2264, 11, 321, 727, 584, 300, 437, 321, 600, 445, 10117, 510, 307, 746, 300, 311, 2737, 294, 264, 7719, 992, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1234840710957845, "compression_ratio": 1.3185185185185184, "no_speech_prob": 0.08994926512241364}, {"id": 127, "seek": 74148, "start": 742.48, "end": 763.48, "text": " All right, so in other words, we could say, well, we have sets C D and E and we are given an arrow F from C to E in the category set and an arrow K from C to D.", "tokens": [50414, 1057, 558, 11, 370, 294, 661, 2283, 11, 321, 727, 584, 11, 731, 11, 321, 362, 6352, 383, 413, 293, 462, 293, 321, 366, 2212, 364, 11610, 479, 490, 383, 281, 462, 294, 264, 7719, 992, 293, 364, 11610, 591, 490, 383, 281, 413, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14174089626390107, "compression_ratio": 1.3559322033898304, "no_speech_prob": 0.16629596054553986}, {"id": 128, "seek": 76348, "start": 764.48, "end": 775.48, "text": " And then this extension problem is defined an arrow G such that G after K equals F.", "tokens": [50414, 400, 550, 341, 10320, 1154, 307, 7642, 364, 11610, 460, 1270, 300, 460, 934, 591, 6915, 479, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1010229898535687, "compression_ratio": 1.4488188976377954, "no_speech_prob": 0.05020803213119507}, {"id": 129, "seek": 76348, "start": 776.48, "end": 779.48, "text": " That's the idea of an extension problem.", "tokens": [51014, 663, 311, 264, 1558, 295, 364, 10320, 1154, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1010229898535687, "compression_ratio": 1.4488188976377954, "no_speech_prob": 0.05020803213119507}, {"id": 130, "seek": 76348, "start": 780.48, "end": 783.48, "text": " And you can think about extension problems in any category.", "tokens": [51214, 400, 291, 393, 519, 466, 10320, 2740, 294, 604, 7719, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1010229898535687, "compression_ratio": 1.4488188976377954, "no_speech_prob": 0.05020803213119507}, {"id": 131, "seek": 78348, "start": 784.48, "end": 801.48, "text": " Now, for can extensions, we're sort of going to think about extension problems in cat in the category of categories, but there's a bit of a twist.", "tokens": [50414, 823, 11, 337, 393, 25129, 11, 321, 434, 1333, 295, 516, 281, 519, 466, 10320, 2740, 294, 3857, 294, 264, 7719, 295, 10479, 11, 457, 456, 311, 257, 857, 295, 257, 8203, 13, 51264], "temperature": 0.0, "avg_logprob": -0.16235065460205078, "compression_ratio": 1.4452554744525548, "no_speech_prob": 0.10856416821479797}, {"id": 132, "seek": 78348, "start": 802.48, "end": 805.48, "text": " You see, you've probably got a bit of a flavor now.", "tokens": [51314, 509, 536, 11, 291, 600, 1391, 658, 257, 857, 295, 257, 6813, 586, 13, 51464], "temperature": 0.0, "avg_logprob": -0.16235065460205078, "compression_ratio": 1.4452554744525548, "no_speech_prob": 0.10856416821479797}, {"id": 133, "seek": 80548, "start": 805.48, "end": 814.48, "text": " You see, you've probably got a bit of intuition now that's telling you, well, extension problems don't normally have unique solutions.", "tokens": [50364, 509, 536, 11, 291, 600, 1391, 658, 257, 857, 295, 24002, 586, 300, 311, 3585, 291, 11, 731, 11, 10320, 2740, 500, 380, 5646, 362, 3845, 6547, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09386704843255538, "compression_ratio": 1.4891304347826086, "no_speech_prob": 0.2065572440624237}, {"id": 134, "seek": 80548, "start": 814.48, "end": 815.48, "text": " And this is true.", "tokens": [50814, 400, 341, 307, 2074, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09386704843255538, "compression_ratio": 1.4891304347826086, "no_speech_prob": 0.2065572440624237}, {"id": 135, "seek": 80548, "start": 816.48, "end": 817.48, "text": " It's true in set.", "tokens": [50914, 467, 311, 2074, 294, 992, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09386704843255538, "compression_ratio": 1.4891304347826086, "no_speech_prob": 0.2065572440624237}, {"id": 136, "seek": 80548, "start": 817.48, "end": 818.48, "text": " It's true in cat.", "tokens": [50964, 467, 311, 2074, 294, 3857, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09386704843255538, "compression_ratio": 1.4891304347826086, "no_speech_prob": 0.2065572440624237}, {"id": 137, "seek": 80548, "start": 819.48, "end": 826.48, "text": " If you want to get just a diagram that commutes like this on the nose, it's not easy.", "tokens": [51064, 759, 291, 528, 281, 483, 445, 257, 10686, 300, 800, 1819, 411, 341, 322, 264, 6690, 11, 309, 311, 406, 1858, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09386704843255538, "compression_ratio": 1.4891304347826086, "no_speech_prob": 0.2065572440624237}, {"id": 138, "seek": 82648, "start": 826.48, "end": 836.48, "text": " Usually there won't be a unique way to extend a particular arrow to make a triangle commute on the nose.", "tokens": [50364, 11419, 456, 1582, 380, 312, 257, 3845, 636, 281, 10101, 257, 1729, 11610, 281, 652, 257, 13369, 36750, 322, 264, 6690, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12079231262207031, "compression_ratio": 1.4154929577464788, "no_speech_prob": 0.005210436414927244}, {"id": 139, "seek": 82648, "start": 837.48, "end": 846.48, "text": " And so the idea with can extensions is that we sort of relax what we're asking for a little bit.", "tokens": [50914, 400, 370, 264, 1558, 365, 393, 25129, 307, 300, 321, 1333, 295, 5789, 437, 321, 434, 3365, 337, 257, 707, 857, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12079231262207031, "compression_ratio": 1.4154929577464788, "no_speech_prob": 0.005210436414927244}, {"id": 140, "seek": 84648, "start": 846.48, "end": 857.48, "text": " We're not really asking for a G, which is exactly going to make.", "tokens": [50364, 492, 434, 406, 534, 3365, 337, 257, 460, 11, 597, 307, 2293, 516, 281, 652, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1267988681793213, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.0801049992442131}, {"id": 141, "seek": 84648, "start": 859.48, "end": 865.48, "text": " We're not really asking for a G that's exactly going to make a diagram like this commute.", "tokens": [51014, 492, 434, 406, 534, 3365, 337, 257, 460, 300, 311, 2293, 516, 281, 652, 257, 10686, 411, 341, 36750, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1267988681793213, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.0801049992442131}, {"id": 142, "seek": 86548, "start": 866.48, "end": 882.48, "text": " Instead, we're going to use some kind of two cells or natural transformations to make it so that this kind of problem basically does have a unique solution, at least up to isomorphism.", "tokens": [50414, 7156, 11, 321, 434, 516, 281, 764, 512, 733, 295, 732, 5438, 420, 3303, 34852, 281, 652, 309, 370, 300, 341, 733, 295, 1154, 1936, 775, 362, 257, 3845, 3827, 11, 412, 1935, 493, 281, 307, 32702, 1434, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05453953814150682, "compression_ratio": 1.56, "no_speech_prob": 0.07972297817468643}, {"id": 143, "seek": 86548, "start": 883.48, "end": 893.48, "text": " So basically, we want to sort of warp this extension problem into something that can be described through universal properties.", "tokens": [51264, 407, 1936, 11, 321, 528, 281, 1333, 295, 36030, 341, 10320, 1154, 666, 746, 300, 393, 312, 7619, 807, 11455, 7221, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05453953814150682, "compression_ratio": 1.56, "no_speech_prob": 0.07972297817468643}, {"id": 144, "seek": 89348, "start": 894.48, "end": 900.48, "text": " And so for the problem of can extensions, well, firstly, it's taking place in cats.", "tokens": [50414, 400, 370, 337, 264, 1154, 295, 393, 25129, 11, 731, 11, 27376, 11, 309, 311, 1940, 1081, 294, 11111, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14694687940072323, "compression_ratio": 1.4971098265895955, "no_speech_prob": 0.005461730994284153}, {"id": 145, "seek": 89348, "start": 900.48, "end": 906.48, "text": " So our objects are going to be categories and our arrows are going to be functals.", "tokens": [50714, 407, 527, 6565, 366, 516, 281, 312, 10479, 293, 527, 19669, 366, 516, 281, 312, 1019, 349, 1124, 13, 51014], "temperature": 0.0, "avg_logprob": -0.14694687940072323, "compression_ratio": 1.4971098265895955, "no_speech_prob": 0.005461730994284153}, {"id": 146, "seek": 89348, "start": 906.48, "end": 913.48, "text": " But the crucial thing is that we're not just looking for a functal G to close this triangle.", "tokens": [51014, 583, 264, 11462, 551, 307, 300, 321, 434, 406, 445, 1237, 337, 257, 1019, 349, 304, 460, 281, 1998, 341, 13369, 13, 51364], "temperature": 0.0, "avg_logprob": -0.14694687940072323, "compression_ratio": 1.4971098265895955, "no_speech_prob": 0.005461730994284153}, {"id": 147, "seek": 91348, "start": 913.48, "end": 925.48, "text": " What we're looking for is a pair of a functal G and a natural transformation, which we call eta.", "tokens": [50364, 708, 321, 434, 1237, 337, 307, 257, 6119, 295, 257, 1019, 349, 304, 460, 293, 257, 3303, 9887, 11, 597, 321, 818, 32415, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12248648730191318, "compression_ratio": 1.3125, "no_speech_prob": 0.05656187981367111}, {"id": 148, "seek": 91348, "start": 927.48, "end": 932.48, "text": " And G here is going to have a special name.", "tokens": [51064, 400, 460, 510, 307, 516, 281, 362, 257, 2121, 1315, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12248648730191318, "compression_ratio": 1.3125, "no_speech_prob": 0.05656187981367111}, {"id": 149, "seek": 91348, "start": 933.48, "end": 939.48, "text": " It's called the left can extension of F along K.", "tokens": [51364, 467, 311, 1219, 264, 1411, 393, 10320, 295, 479, 2051, 591, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12248648730191318, "compression_ratio": 1.3125, "no_speech_prob": 0.05656187981367111}, {"id": 150, "seek": 93948, "start": 940.48, "end": 948.48, "text": " And so this is the data that defines a can extension.", "tokens": [50414, 400, 370, 341, 307, 264, 1412, 300, 23122, 257, 393, 10320, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08369598537683487, "compression_ratio": 1.5125, "no_speech_prob": 0.005999820306897163}, {"id": 151, "seek": 93948, "start": 951.48, "end": 954.48, "text": " I'm just going to talk about left can extensions today.", "tokens": [50964, 286, 478, 445, 516, 281, 751, 466, 1411, 393, 25129, 965, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08369598537683487, "compression_ratio": 1.5125, "no_speech_prob": 0.005999820306897163}, {"id": 152, "seek": 93948, "start": 955.48, "end": 958.48, "text": " Right can extensions are very, very similar.", "tokens": [51164, 1779, 393, 25129, 366, 588, 11, 588, 2531, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08369598537683487, "compression_ratio": 1.5125, "no_speech_prob": 0.005999820306897163}, {"id": 153, "seek": 93948, "start": 958.48, "end": 962.48, "text": " Again, they're talked about in my other video.", "tokens": [51314, 3764, 11, 436, 434, 2825, 466, 294, 452, 661, 960, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08369598537683487, "compression_ratio": 1.5125, "no_speech_prob": 0.005999820306897163}, {"id": 154, "seek": 93948, "start": 962.48, "end": 965.48, "text": " They're basically just the dual concept.", "tokens": [51514, 814, 434, 1936, 445, 264, 11848, 3410, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08369598537683487, "compression_ratio": 1.5125, "no_speech_prob": 0.005999820306897163}, {"id": 155, "seek": 96548, "start": 965.48, "end": 970.48, "text": " But basically what I'm going to do today is look at some really nice structures.", "tokens": [50364, 583, 1936, 437, 286, 478, 516, 281, 360, 965, 307, 574, 412, 512, 534, 1481, 9227, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1067003280885758, "compression_ratio": 1.5, "no_speech_prob": 0.0037586591206490993}, {"id": 156, "seek": 96548, "start": 971.48, "end": 982.48, "text": " But everything I talk about can be dualized so you can have a lot of fun understanding all the duals of these concepts.", "tokens": [50664, 583, 1203, 286, 751, 466, 393, 312, 11848, 1602, 370, 291, 393, 362, 257, 688, 295, 1019, 3701, 439, 264, 11848, 82, 295, 613, 10392, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1067003280885758, "compression_ratio": 1.5, "no_speech_prob": 0.0037586591206490993}, {"id": 157, "seek": 96548, "start": 982.48, "end": 986.48, "text": " But basically the idea of can extensions is like this.", "tokens": [51214, 583, 1936, 264, 1558, 295, 393, 25129, 307, 411, 341, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1067003280885758, "compression_ratio": 1.5, "no_speech_prob": 0.0037586591206490993}, {"id": 158, "seek": 98648, "start": 987.48, "end": 996.48, "text": " You're given a functal F from C to E and a functal K from C to D.", "tokens": [50414, 509, 434, 2212, 257, 1019, 349, 304, 479, 490, 383, 281, 462, 293, 257, 1019, 349, 304, 591, 490, 383, 281, 413, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10237467700037463, "compression_ratio": 1.5, "no_speech_prob": 0.027867307886481285}, {"id": 159, "seek": 98648, "start": 997.48, "end": 1007.48, "text": " And what the can extension consists of is a functal from D to E, which is called the left can extension of F along K,", "tokens": [50914, 400, 437, 264, 393, 10320, 14689, 295, 307, 257, 1019, 349, 304, 490, 413, 281, 462, 11, 597, 307, 1219, 264, 1411, 393, 10320, 295, 479, 2051, 591, 11, 51414], "temperature": 0.0, "avg_logprob": -0.10237467700037463, "compression_ratio": 1.5, "no_speech_prob": 0.027867307886481285}, {"id": 160, "seek": 100748, "start": 1007.48, "end": 1016.48, "text": " together with a natural transformation, eta from F to land KF after K.", "tokens": [50364, 1214, 365, 257, 3303, 9887, 11, 32415, 490, 479, 281, 2117, 591, 37, 934, 591, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15450639724731446, "compression_ratio": 1.37984496124031, "no_speech_prob": 0.013771379366517067}, {"id": 161, "seek": 100748, "start": 1017.48, "end": 1026.48, "text": " And that kind of data has to satisfy a certain sort of universal property.", "tokens": [50864, 400, 300, 733, 295, 1412, 575, 281, 19319, 257, 1629, 1333, 295, 11455, 4707, 13, 51314], "temperature": 0.0, "avg_logprob": -0.15450639724731446, "compression_ratio": 1.37984496124031, "no_speech_prob": 0.013771379366517067}, {"id": 162, "seek": 100748, "start": 1027.48, "end": 1029.48, "text": " What is that universal property?", "tokens": [51364, 708, 307, 300, 11455, 4707, 30, 51464], "temperature": 0.0, "avg_logprob": -0.15450639724731446, "compression_ratio": 1.37984496124031, "no_speech_prob": 0.013771379366517067}, {"id": 163, "seek": 102948, "start": 1029.48, "end": 1037.48, "text": " Well, it's the normal kind of idea that if we make any kind of similar structure.", "tokens": [50364, 1042, 11, 309, 311, 264, 2710, 733, 295, 1558, 300, 498, 321, 652, 604, 733, 295, 2531, 3877, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11824762060287151, "compression_ratio": 1.2913385826771653, "no_speech_prob": 0.02511977218091488}, {"id": 164, "seek": 102948, "start": 1037.48, "end": 1051.48, "text": " So a functal H from D to E and a natural transformation alpha from F to H after K.", "tokens": [50764, 407, 257, 1019, 349, 304, 389, 490, 413, 281, 462, 293, 257, 3303, 9887, 8961, 490, 479, 281, 389, 934, 591, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11824762060287151, "compression_ratio": 1.2913385826771653, "no_speech_prob": 0.02511977218091488}, {"id": 165, "seek": 105148, "start": 1052.48, "end": 1062.48, "text": " Well, then there's going to exist a unique way to convert the real deal into this sort of phony candidate.", "tokens": [50414, 1042, 11, 550, 456, 311, 516, 281, 2514, 257, 3845, 636, 281, 7620, 264, 957, 2028, 666, 341, 1333, 295, 903, 2526, 11532, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13071027852721134, "compression_ratio": 1.5422535211267605, "no_speech_prob": 0.08026552945375443}, {"id": 166, "seek": 105148, "start": 1062.48, "end": 1064.48, "text": " What do I mean by that?", "tokens": [50914, 708, 360, 286, 914, 538, 300, 30, 51014], "temperature": 0.0, "avg_logprob": -0.13071027852721134, "compression_ratio": 1.5422535211267605, "no_speech_prob": 0.08026552945375443}, {"id": 167, "seek": 105148, "start": 1064.48, "end": 1071.48, "text": " I mean that there's going to exist a unique natural transformation.", "tokens": [51014, 286, 914, 300, 456, 311, 516, 281, 2514, 257, 3845, 3303, 9887, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13071027852721134, "compression_ratio": 1.5422535211267605, "no_speech_prob": 0.08026552945375443}, {"id": 168, "seek": 105148, "start": 1073.48, "end": 1080.48, "text": " Let's call it gamma.", "tokens": [51464, 961, 311, 818, 309, 15546, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13071027852721134, "compression_ratio": 1.5422535211267605, "no_speech_prob": 0.08026552945375443}, {"id": 169, "seek": 108148, "start": 1082.48, "end": 1089.48, "text": " Which is such that if we compose these two cells here, we get this one.", "tokens": [50414, 3013, 307, 1270, 300, 498, 321, 35925, 613, 732, 5438, 510, 11, 321, 483, 341, 472, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08636247316996257, "compression_ratio": 1.4125, "no_speech_prob": 0.0011857216013595462}, {"id": 170, "seek": 108148, "start": 1090.48, "end": 1094.48, "text": " Now here's a place I think some people get confused, right?", "tokens": [50814, 823, 510, 311, 257, 1081, 286, 519, 512, 561, 483, 9019, 11, 558, 30, 51014], "temperature": 0.0, "avg_logprob": -0.08636247316996257, "compression_ratio": 1.4125, "no_speech_prob": 0.0011857216013595462}, {"id": 171, "seek": 108148, "start": 1094.48, "end": 1102.48, "text": " Because they would say, well, I don't understand what it means to compose gamma with eta here.", "tokens": [51014, 1436, 436, 576, 584, 11, 731, 11, 286, 500, 380, 1223, 437, 309, 1355, 281, 35925, 15546, 365, 32415, 510, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08636247316996257, "compression_ratio": 1.4125, "no_speech_prob": 0.0011857216013595462}, {"id": 172, "seek": 110248, "start": 1103.48, "end": 1111.48, "text": " Because this is some kind of peculiar notation and notion of composing two cells.", "tokens": [50414, 1436, 341, 307, 512, 733, 295, 27149, 24657, 293, 10710, 295, 715, 6110, 732, 5438, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1128985764550381, "compression_ratio": 1.4269005847953216, "no_speech_prob": 0.06844872981309891}, {"id": 173, "seek": 110248, "start": 1111.48, "end": 1118.48, "text": " In this case, natural transformations, which is not fully explained in many places.", "tokens": [50814, 682, 341, 1389, 11, 3303, 34852, 11, 597, 307, 406, 4498, 8825, 294, 867, 3190, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1128985764550381, "compression_ratio": 1.4269005847953216, "no_speech_prob": 0.06844872981309891}, {"id": 174, "seek": 110248, "start": 1118.48, "end": 1123.48, "text": " So what's it mean to compose this with this?", "tokens": [51164, 407, 437, 311, 309, 914, 281, 35925, 341, 365, 341, 30, 51414], "temperature": 0.0, "avg_logprob": -0.1128985764550381, "compression_ratio": 1.4269005847953216, "no_speech_prob": 0.06844872981309891}, {"id": 175, "seek": 110248, "start": 1123.48, "end": 1125.48, "text": " Well, it's illustrated down here.", "tokens": [51414, 1042, 11, 309, 311, 33875, 760, 510, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1128985764550381, "compression_ratio": 1.4269005847953216, "no_speech_prob": 0.06844872981309891}, {"id": 176, "seek": 112548, "start": 1125.48, "end": 1143.48, "text": " So basically the meaning of this is this is the composition of this natural transformation here, shown in green, after the natural transformation eta.", "tokens": [50364, 407, 1936, 264, 3620, 295, 341, 307, 341, 307, 264, 12686, 295, 341, 3303, 9887, 510, 11, 4898, 294, 3092, 11, 934, 264, 3303, 9887, 32415, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1879669012025345, "compression_ratio": 1.8070175438596492, "no_speech_prob": 0.032422494143247604}, {"id": 177, "seek": 112548, "start": 1143.48, "end": 1146.48, "text": " What's this natural transformation here shown in green?", "tokens": [51264, 708, 311, 341, 3303, 9887, 510, 4898, 294, 3092, 30, 51414], "temperature": 0.0, "avg_logprob": -0.1879669012025345, "compression_ratio": 1.8070175438596492, "no_speech_prob": 0.032422494143247604}, {"id": 178, "seek": 114648, "start": 1146.48, "end": 1155.48, "text": " This is gamma horizontally composed with the identity natural transformation of K.", "tokens": [50364, 639, 307, 15546, 33796, 18204, 365, 264, 6575, 3303, 9887, 295, 591, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09848204930623372, "compression_ratio": 1.72, "no_speech_prob": 0.24116824567317963}, {"id": 179, "seek": 114648, "start": 1155.48, "end": 1160.48, "text": " So this is the so-called whiskering of gamma with K.", "tokens": [50814, 407, 341, 307, 264, 370, 12, 11880, 24485, 1794, 295, 15546, 365, 591, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09848204930623372, "compression_ratio": 1.72, "no_speech_prob": 0.24116824567317963}, {"id": 180, "seek": 114648, "start": 1160.48, "end": 1165.48, "text": " And it really is just this horizontal composition, which is indicated here.", "tokens": [51064, 400, 309, 534, 307, 445, 341, 12750, 12686, 11, 597, 307, 16176, 510, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09848204930623372, "compression_ratio": 1.72, "no_speech_prob": 0.24116824567317963}, {"id": 181, "seek": 114648, "start": 1165.48, "end": 1175.48, "text": " And you can look back at my video on natural transformations to remind yourself about how horizontal composition works, if you like.", "tokens": [51314, 400, 291, 393, 574, 646, 412, 452, 960, 322, 3303, 34852, 281, 4160, 1803, 466, 577, 12750, 12686, 1985, 11, 498, 291, 411, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09848204930623372, "compression_ratio": 1.72, "no_speech_prob": 0.24116824567317963}, {"id": 182, "seek": 117548, "start": 1175.48, "end": 1184.48, "text": " But the basic idea then with can extensions is it's one of these kind of universal constructions.", "tokens": [50364, 583, 264, 3875, 1558, 550, 365, 393, 25129, 307, 309, 311, 472, 295, 613, 733, 295, 11455, 7690, 626, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13024159728503618, "compression_ratio": 1.527027027027027, "no_speech_prob": 0.007796929683536291}, {"id": 183, "seek": 117548, "start": 1184.48, "end": 1192.48, "text": " And what we say is we say, well, I have this function F and this function K.", "tokens": [50814, 400, 437, 321, 584, 307, 321, 584, 11, 731, 11, 286, 362, 341, 2445, 479, 293, 341, 2445, 591, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13024159728503618, "compression_ratio": 1.527027027027027, "no_speech_prob": 0.007796929683536291}, {"id": 184, "seek": 117548, "start": 1192.48, "end": 1198.48, "text": " I wish to find the left can extension of F along K.", "tokens": [51214, 286, 3172, 281, 915, 264, 1411, 393, 10320, 295, 479, 2051, 591, 13, 51514], "temperature": 0.0, "avg_logprob": -0.13024159728503618, "compression_ratio": 1.527027027027027, "no_speech_prob": 0.007796929683536291}, {"id": 185, "seek": 119848, "start": 1198.48, "end": 1210.48, "text": " That consists of a function like this from D to E together with this natural transformation eta, which has this kind of form.", "tokens": [50364, 663, 14689, 295, 257, 2445, 411, 341, 490, 413, 281, 462, 1214, 365, 341, 3303, 9887, 32415, 11, 597, 575, 341, 733, 295, 1254, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13227677763554088, "compression_ratio": 1.4709302325581395, "no_speech_prob": 0.2014436423778534}, {"id": 186, "seek": 119848, "start": 1210.48, "end": 1225.48, "text": " And this has to and is defined by having the universal property that for any similar such thing, basically for any alpha and H,", "tokens": [50964, 400, 341, 575, 281, 293, 307, 7642, 538, 1419, 264, 11455, 4707, 300, 337, 604, 2531, 1270, 551, 11, 1936, 337, 604, 8961, 293, 389, 11, 51714], "temperature": 0.0, "avg_logprob": -0.13227677763554088, "compression_ratio": 1.4709302325581395, "no_speech_prob": 0.2014436423778534}, {"id": 187, "seek": 122548, "start": 1225.48, "end": 1229.48, "text": " such that alpha is natural transformation from H after K to F.", "tokens": [50364, 1270, 300, 8961, 307, 3303, 9887, 490, 389, 934, 591, 281, 479, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09422567582899524, "compression_ratio": 1.4497041420118344, "no_speech_prob": 0.024403076618909836}, {"id": 188, "seek": 122548, "start": 1229.48, "end": 1239.48, "text": " We have that there's going to exist a unique gamma such that if we compose gamma with eta,", "tokens": [50564, 492, 362, 300, 456, 311, 516, 281, 2514, 257, 3845, 15546, 1270, 300, 498, 321, 35925, 15546, 365, 32415, 11, 51064], "temperature": 0.0, "avg_logprob": -0.09422567582899524, "compression_ratio": 1.4497041420118344, "no_speech_prob": 0.024403076618909836}, {"id": 189, "seek": 122548, "start": 1239.48, "end": 1244.48, "text": " which basically ends up giving this kind of result.", "tokens": [51064, 597, 1936, 5314, 493, 2902, 341, 733, 295, 1874, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09422567582899524, "compression_ratio": 1.4497041420118344, "no_speech_prob": 0.024403076618909836}, {"id": 190, "seek": 122548, "start": 1244.48, "end": 1249.48, "text": " Well, that result ought to equal alpha.", "tokens": [51314, 1042, 11, 300, 1874, 13416, 281, 2681, 8961, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09422567582899524, "compression_ratio": 1.4497041420118344, "no_speech_prob": 0.024403076618909836}, {"id": 191, "seek": 124948, "start": 1249.48, "end": 1272.48, "text": " So basically, the pattern is that we want one K F and eta such that for anything similar.", "tokens": [50364, 407, 1936, 11, 264, 5102, 307, 300, 321, 528, 472, 591, 479, 293, 32415, 1270, 300, 337, 1340, 2531, 13, 51514], "temperature": 0.0, "avg_logprob": -0.3058178822199504, "compression_ratio": 1.0595238095238095, "no_speech_prob": 0.023215429857373238}, {"id": 192, "seek": 127248, "start": 1272.48, "end": 1284.48, "text": " So for H and alpha, there's going to exist a unique gamma that makes this a quality hold.", "tokens": [50364, 407, 337, 389, 293, 8961, 11, 456, 311, 516, 281, 2514, 257, 3845, 15546, 300, 1669, 341, 257, 3125, 1797, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1393215326162485, "compression_ratio": 1.3777777777777778, "no_speech_prob": 0.443998783826828}, {"id": 193, "seek": 127248, "start": 1284.48, "end": 1285.48, "text": " OK, then.", "tokens": [50964, 2264, 11, 550, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1393215326162485, "compression_ratio": 1.3777777777777778, "no_speech_prob": 0.443998783826828}, {"id": 194, "seek": 127248, "start": 1285.48, "end": 1290.48, "text": " So this video isn't really focused on can extensions particularly.", "tokens": [51014, 407, 341, 960, 1943, 380, 534, 5178, 322, 393, 25129, 4098, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1393215326162485, "compression_ratio": 1.3777777777777778, "no_speech_prob": 0.443998783826828}, {"id": 195, "seek": 127248, "start": 1290.48, "end": 1297.48, "text": " And I don't think it's necessary to have a really in depth understanding of them,", "tokens": [51264, 400, 286, 500, 380, 519, 309, 311, 4818, 281, 362, 257, 534, 294, 7161, 3701, 295, 552, 11, 51614], "temperature": 0.0, "avg_logprob": -0.1393215326162485, "compression_ratio": 1.3777777777777778, "no_speech_prob": 0.443998783826828}, {"id": 196, "seek": 129748, "start": 1297.48, "end": 1305.48, "text": " but I can't resist just going over the basic sort of formulas for them and things.", "tokens": [50364, 457, 286, 393, 380, 4597, 445, 516, 670, 264, 3875, 1333, 295, 30546, 337, 552, 293, 721, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1355265351228936, "compression_ratio": 1.3125, "no_speech_prob": 0.05815892294049263}, {"id": 197, "seek": 129748, "start": 1305.48, "end": 1315.48, "text": " So we're concerned with thinking about the left can extension of a functor F along K.", "tokens": [50764, 407, 321, 434, 5922, 365, 1953, 466, 264, 1411, 393, 10320, 295, 257, 1019, 1672, 479, 2051, 591, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1355265351228936, "compression_ratio": 1.3125, "no_speech_prob": 0.05815892294049263}, {"id": 198, "seek": 131548, "start": 1315.48, "end": 1328.48, "text": " Now, the meaning of that, at least the way I think of it is think that we're trying to extend the domain of this functor F.", "tokens": [50364, 823, 11, 264, 3620, 295, 300, 11, 412, 1935, 264, 636, 286, 519, 295, 309, 307, 519, 300, 321, 434, 1382, 281, 10101, 264, 9274, 295, 341, 1019, 1672, 479, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12209251948765346, "compression_ratio": 1.5875, "no_speech_prob": 0.17761875689029694}, {"id": 199, "seek": 131548, "start": 1328.48, "end": 1333.48, "text": " And we're trying to extend it to this larger domain D.", "tokens": [51014, 400, 321, 434, 1382, 281, 10101, 309, 281, 341, 4833, 9274, 413, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12209251948765346, "compression_ratio": 1.5875, "no_speech_prob": 0.17761875689029694}, {"id": 200, "seek": 131548, "start": 1333.48, "end": 1338.48, "text": " So for these purposes, you could think of K as a sort of inclusion functor.", "tokens": [51264, 407, 337, 613, 9932, 11, 291, 727, 519, 295, 591, 382, 257, 1333, 295, 15874, 1019, 1672, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12209251948765346, "compression_ratio": 1.5875, "no_speech_prob": 0.17761875689029694}, {"id": 201, "seek": 133848, "start": 1338.48, "end": 1346.48, "text": " And so sort of F is defined on C, but we want to sort of extend it to a larger domain.", "tokens": [50364, 400, 370, 1333, 295, 479, 307, 7642, 322, 383, 11, 457, 321, 528, 281, 1333, 295, 10101, 309, 281, 257, 4833, 9274, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08522512410816394, "compression_ratio": 1.6144578313253013, "no_speech_prob": 0.10448074340820312}, {"id": 202, "seek": 133848, "start": 1346.48, "end": 1351.48, "text": " So we're sort of extending it along this inclusion functor.", "tokens": [50764, 407, 321, 434, 1333, 295, 24360, 309, 2051, 341, 15874, 1019, 1672, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08522512410816394, "compression_ratio": 1.6144578313253013, "no_speech_prob": 0.10448074340820312}, {"id": 203, "seek": 133848, "start": 1351.48, "end": 1357.48, "text": " Although in truth, K doesn't have to be an inclusion functor.", "tokens": [51014, 5780, 294, 3494, 11, 591, 1177, 380, 362, 281, 312, 364, 15874, 1019, 1672, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08522512410816394, "compression_ratio": 1.6144578313253013, "no_speech_prob": 0.10448074340820312}, {"id": 204, "seek": 133848, "start": 1357.48, "end": 1362.48, "text": " It doesn't have to be a monomorphism or anything like that.", "tokens": [51314, 467, 1177, 380, 362, 281, 312, 257, 1108, 32702, 1434, 420, 1340, 411, 300, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08522512410816394, "compression_ratio": 1.6144578313253013, "no_speech_prob": 0.10448074340820312}, {"id": 205, "seek": 136248, "start": 1362.48, "end": 1371.48, "text": " However, we are going to make some assumptions to make it easier for us to think about these can extensions.", "tokens": [50364, 2908, 11, 321, 366, 516, 281, 652, 512, 17695, 281, 652, 309, 3571, 337, 505, 281, 519, 466, 613, 393, 25129, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05211929291013687, "compression_ratio": 1.60625, "no_speech_prob": 0.04834306985139847}, {"id": 206, "seek": 136248, "start": 1371.48, "end": 1380.48, "text": " So recall that we say that a collection is small when it's a set.", "tokens": [50814, 407, 9901, 300, 321, 584, 300, 257, 5765, 307, 1359, 562, 309, 311, 257, 992, 13, 51264], "temperature": 0.0, "avg_logprob": -0.05211929291013687, "compression_ratio": 1.60625, "no_speech_prob": 0.04834306985139847}, {"id": 207, "seek": 136248, "start": 1380.48, "end": 1387.48, "text": " Recall that to set up category theory to speak about things like the category set.", "tokens": [51264, 9647, 336, 300, 281, 992, 493, 7719, 5261, 281, 1710, 466, 721, 411, 264, 7719, 992, 13, 51614], "temperature": 0.0, "avg_logprob": -0.05211929291013687, "compression_ratio": 1.60625, "no_speech_prob": 0.04834306985139847}, {"id": 208, "seek": 138748, "start": 1387.48, "end": 1394.48, "text": " We really have to go sort of beyond set theory, otherwise we run into Russell's paradoxes and things like this.", "tokens": [50364, 492, 534, 362, 281, 352, 1333, 295, 4399, 992, 5261, 11, 5911, 321, 1190, 666, 20937, 311, 26221, 279, 293, 721, 411, 341, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08108290139730874, "compression_ratio": 1.5485436893203883, "no_speech_prob": 0.005662761628627777}, {"id": 209, "seek": 138748, "start": 1394.48, "end": 1402.48, "text": " So we should really say that a category has a class of objects if we want to.", "tokens": [50714, 407, 321, 820, 534, 584, 300, 257, 7719, 575, 257, 1508, 295, 6565, 498, 321, 528, 281, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08108290139730874, "compression_ratio": 1.5485436893203883, "no_speech_prob": 0.005662761628627777}, {"id": 210, "seek": 138748, "start": 1402.48, "end": 1415.48, "text": " I mean, it depends how which sort of method we want to use to overcome these kind of problems of collections which are too large.", "tokens": [51114, 286, 914, 11, 309, 5946, 577, 597, 1333, 295, 3170, 321, 528, 281, 764, 281, 10473, 613, 733, 295, 2740, 295, 16641, 597, 366, 886, 2416, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08108290139730874, "compression_ratio": 1.5485436893203883, "no_speech_prob": 0.005662761628627777}, {"id": 211, "seek": 141548, "start": 1415.48, "end": 1429.48, "text": " But anyway, so a category small when it has a set of objects or maybe just like a finite set of objects or it could be an infinite set or whatever.", "tokens": [50364, 583, 4033, 11, 370, 257, 7719, 1359, 562, 309, 575, 257, 992, 295, 6565, 420, 1310, 445, 411, 257, 19362, 992, 295, 6565, 420, 309, 727, 312, 364, 13785, 992, 420, 2035, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11437199755412776, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0021598581224679947}, {"id": 212, "seek": 141548, "start": 1429.48, "end": 1435.48, "text": " So the category set is not small because there isn't a set of sets.", "tokens": [51064, 407, 264, 7719, 992, 307, 406, 1359, 570, 456, 1943, 380, 257, 992, 295, 6352, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11437199755412776, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0021598581224679947}, {"id": 213, "seek": 141548, "start": 1435.48, "end": 1438.48, "text": " Otherwise, we'd be in paradox country.", "tokens": [51364, 10328, 11, 321, 1116, 312, 294, 26221, 1941, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11437199755412776, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0021598581224679947}, {"id": 214, "seek": 141548, "start": 1438.48, "end": 1440.48, "text": " So set is not small.", "tokens": [51514, 407, 992, 307, 406, 1359, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11437199755412776, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0021598581224679947}, {"id": 215, "seek": 141548, "start": 1440.48, "end": 1442.48, "text": " It has too many objects.", "tokens": [51614, 467, 575, 886, 867, 6565, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11437199755412776, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0021598581224679947}, {"id": 216, "seek": 144248, "start": 1442.48, "end": 1446.48, "text": " So we're going to suppose now that C here is small.", "tokens": [50364, 407, 321, 434, 516, 281, 7297, 586, 300, 383, 510, 307, 1359, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09613635804918078, "compression_ratio": 1.6645569620253164, "no_speech_prob": 0.024688739329576492}, {"id": 217, "seek": 144248, "start": 1446.48, "end": 1457.48, "text": " And we're going to suppose that D is locally small, which means that if we pick any pair of objects, the collections of arrows from A to B is forming a set.", "tokens": [50564, 400, 321, 434, 516, 281, 7297, 300, 413, 307, 16143, 1359, 11, 597, 1355, 300, 498, 321, 1888, 604, 6119, 295, 6565, 11, 264, 16641, 295, 19669, 490, 316, 281, 363, 307, 15745, 257, 992, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09613635804918078, "compression_ratio": 1.6645569620253164, "no_speech_prob": 0.024688739329576492}, {"id": 218, "seek": 144248, "start": 1457.48, "end": 1461.48, "text": " And we're also going to suppose that E is co-complete.", "tokens": [51114, 400, 321, 434, 611, 516, 281, 7297, 300, 462, 307, 598, 12, 1112, 17220, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09613635804918078, "compression_ratio": 1.6645569620253164, "no_speech_prob": 0.024688739329576492}, {"id": 219, "seek": 146148, "start": 1461.48, "end": 1467.48, "text": " That means that there's going to be a co-limit of every small diagram in E.", "tokens": [50364, 663, 1355, 300, 456, 311, 516, 281, 312, 257, 598, 12, 4197, 270, 295, 633, 1359, 10686, 294, 462, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09158814337945753, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.6379325985908508}, {"id": 220, "seek": 146148, "start": 1467.48, "end": 1481.48, "text": " So in other words, if we take any small category like C and we do a functor, there's always going to be a co-limit of that functor.", "tokens": [50664, 407, 294, 661, 2283, 11, 498, 321, 747, 604, 1359, 7719, 411, 383, 293, 321, 360, 257, 1019, 1672, 11, 456, 311, 1009, 516, 281, 312, 257, 598, 12, 4197, 270, 295, 300, 1019, 1672, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09158814337945753, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.6379325985908508}, {"id": 221, "seek": 148148, "start": 1481.48, "end": 1492.48, "text": " So for example, it could be that E is set or E could be any category of pre-sheaves.", "tokens": [50364, 407, 337, 1365, 11, 309, 727, 312, 300, 462, 307, 992, 420, 462, 727, 312, 604, 7719, 295, 659, 12, 9611, 5423, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08104890446330226, "compression_ratio": 1.6512820512820512, "no_speech_prob": 0.02261647768318653}, {"id": 222, "seek": 148148, "start": 1492.48, "end": 1494.48, "text": " It could be a category of vector spaces.", "tokens": [50914, 467, 727, 312, 257, 7719, 295, 8062, 7673, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08104890446330226, "compression_ratio": 1.6512820512820512, "no_speech_prob": 0.02261647768318653}, {"id": 223, "seek": 148148, "start": 1494.48, "end": 1497.48, "text": " There's loads and loads of co-complete categories.", "tokens": [51014, 821, 311, 12668, 293, 12668, 295, 598, 12, 1112, 17220, 10479, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08104890446330226, "compression_ratio": 1.6512820512820512, "no_speech_prob": 0.02261647768318653}, {"id": 224, "seek": 148148, "start": 1497.48, "end": 1500.48, "text": " And we're going to suppose that E is one of those.", "tokens": [51164, 400, 321, 434, 516, 281, 7297, 300, 462, 307, 472, 295, 729, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08104890446330226, "compression_ratio": 1.6512820512820512, "no_speech_prob": 0.02261647768318653}, {"id": 225, "seek": 148148, "start": 1500.48, "end": 1508.48, "text": " And so with these assumptions, we can really understand the structure of these can extensions.", "tokens": [51314, 400, 370, 365, 613, 17695, 11, 321, 393, 534, 1223, 264, 3877, 295, 613, 393, 25129, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08104890446330226, "compression_ratio": 1.6512820512820512, "no_speech_prob": 0.02261647768318653}, {"id": 226, "seek": 150848, "start": 1508.48, "end": 1517.48, "text": " So in particular, whenever we have these assumptions holding, this left-can extension here is always going to exist.", "tokens": [50364, 407, 294, 1729, 11, 5699, 321, 362, 613, 17695, 5061, 11, 341, 1411, 12, 7035, 10320, 510, 307, 1009, 516, 281, 2514, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11557278212379007, "compression_ratio": 1.4539877300613497, "no_speech_prob": 0.003699430963024497}, {"id": 227, "seek": 150848, "start": 1517.48, "end": 1520.48, "text": " And I'll tell you the formula for it.", "tokens": [50814, 400, 286, 603, 980, 291, 264, 8513, 337, 309, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11557278212379007, "compression_ratio": 1.4539877300613497, "no_speech_prob": 0.003699430963024497}, {"id": 228, "seek": 150848, "start": 1520.48, "end": 1523.48, "text": " So here's the formula for it.", "tokens": [50964, 407, 510, 311, 264, 8513, 337, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11557278212379007, "compression_ratio": 1.4539877300613497, "no_speech_prob": 0.003699430963024497}, {"id": 229, "seek": 150848, "start": 1523.48, "end": 1533.48, "text": " So Lang K of F is going to be a functor from D to E.", "tokens": [51114, 407, 13313, 591, 295, 479, 307, 516, 281, 312, 257, 1019, 1672, 490, 413, 281, 462, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11557278212379007, "compression_ratio": 1.4539877300613497, "no_speech_prob": 0.003699430963024497}, {"id": 230, "seek": 153348, "start": 1533.48, "end": 1540.48, "text": " And so we need to really describe how this functor works on objects of D and arrows of D.", "tokens": [50364, 400, 370, 321, 643, 281, 534, 6786, 577, 341, 1019, 1672, 1985, 322, 6565, 295, 413, 293, 19669, 295, 413, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06663382970369779, "compression_ratio": 1.55, "no_speech_prob": 0.02963903173804283}, {"id": 231, "seek": 153348, "start": 1540.48, "end": 1542.48, "text": " So what about objects?", "tokens": [50714, 407, 437, 466, 6565, 30, 50814], "temperature": 0.0, "avg_logprob": -0.06663382970369779, "compression_ratio": 1.55, "no_speech_prob": 0.02963903173804283}, {"id": 232, "seek": 153348, "start": 1542.48, "end": 1547.48, "text": " So what about if we have an object, little D of D?", "tokens": [50814, 407, 437, 466, 498, 321, 362, 364, 2657, 11, 707, 413, 295, 413, 30, 51064], "temperature": 0.0, "avg_logprob": -0.06663382970369779, "compression_ratio": 1.55, "no_speech_prob": 0.02963903173804283}, {"id": 233, "seek": 153348, "start": 1547.48, "end": 1549.48, "text": " What does Lang K F do to it?", "tokens": [51064, 708, 775, 13313, 591, 479, 360, 281, 309, 30, 51164], "temperature": 0.0, "avg_logprob": -0.06663382970369779, "compression_ratio": 1.55, "no_speech_prob": 0.02963903173804283}, {"id": 234, "seek": 153348, "start": 1549.48, "end": 1552.48, "text": " Well, it sends it to this thing here.", "tokens": [51164, 1042, 11, 309, 14790, 309, 281, 341, 551, 510, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06663382970369779, "compression_ratio": 1.55, "no_speech_prob": 0.02963903173804283}, {"id": 235, "seek": 153348, "start": 1552.48, "end": 1557.48, "text": " And you see that this is a co-limit of a diagram in E.", "tokens": [51314, 400, 291, 536, 300, 341, 307, 257, 598, 12, 4197, 270, 295, 257, 10686, 294, 462, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06663382970369779, "compression_ratio": 1.55, "no_speech_prob": 0.02963903173804283}, {"id": 236, "seek": 153348, "start": 1557.48, "end": 1562.48, "text": " And in particular, it's given by this composition here.", "tokens": [51564, 400, 294, 1729, 11, 309, 311, 2212, 538, 341, 12686, 510, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06663382970369779, "compression_ratio": 1.55, "no_speech_prob": 0.02963903173804283}, {"id": 237, "seek": 156248, "start": 1562.48, "end": 1568.48, "text": " So what we have here is the comma category.", "tokens": [50364, 407, 437, 321, 362, 510, 307, 264, 22117, 7719, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10855412483215332, "compression_ratio": 1.0649350649350648, "no_speech_prob": 0.0023014163598418236}, {"id": 238, "seek": 156248, "start": 1568.48, "end": 1580.48, "text": " So we have this functor K from C to D.", "tokens": [50664, 407, 321, 362, 341, 1019, 1672, 591, 490, 383, 281, 413, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10855412483215332, "compression_ratio": 1.0649350649350648, "no_speech_prob": 0.0023014163598418236}, {"id": 239, "seek": 158048, "start": 1580.48, "end": 1592.48, "text": " And we're sort of slicing or comering that with this functor little D from a trivial category into big D.", "tokens": [50364, 400, 321, 434, 1333, 295, 46586, 420, 395, 1794, 300, 365, 341, 1019, 1672, 707, 413, 490, 257, 26703, 7719, 666, 955, 413, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10706174012386438, "compression_ratio": 1.5142857142857142, "no_speech_prob": 0.1141216978430748}, {"id": 240, "seek": 158048, "start": 1592.48, "end": 1598.48, "text": " And so this thing here is a comma category.", "tokens": [50964, 400, 370, 341, 551, 510, 307, 257, 22117, 7719, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10706174012386438, "compression_ratio": 1.5142857142857142, "no_speech_prob": 0.1141216978430748}, {"id": 241, "seek": 158048, "start": 1598.48, "end": 1604.48, "text": " In some previous videos, I wrote it with this notation instead with the downwards arrow, but I prefer to slice now.", "tokens": [51264, 682, 512, 3894, 2145, 11, 286, 4114, 309, 365, 341, 24657, 2602, 365, 264, 39880, 11610, 11, 457, 286, 4382, 281, 13153, 586, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10706174012386438, "compression_ratio": 1.5142857142857142, "no_speech_prob": 0.1141216978430748}, {"id": 242, "seek": 160448, "start": 1604.48, "end": 1617.48, "text": " But anyway, you can see my video on universal properties or the video on Khan extensions for more details about comma categories.", "tokens": [50364, 583, 4033, 11, 291, 393, 536, 452, 960, 322, 11455, 7221, 420, 264, 960, 322, 18136, 25129, 337, 544, 4365, 466, 22117, 10479, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11769270429424211, "compression_ratio": 1.3486842105263157, "no_speech_prob": 0.04869573563337326}, {"id": 243, "seek": 160448, "start": 1617.48, "end": 1621.48, "text": " Here's the very, very brief recap.", "tokens": [51014, 1692, 311, 264, 588, 11, 588, 5353, 20928, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11769270429424211, "compression_ratio": 1.3486842105263157, "no_speech_prob": 0.04869573563337326}, {"id": 244, "seek": 160448, "start": 1621.48, "end": 1626.48, "text": " The objects of K slice D look like this.", "tokens": [51214, 440, 6565, 295, 591, 13153, 413, 574, 411, 341, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11769270429424211, "compression_ratio": 1.3486842105263157, "no_speech_prob": 0.04869573563337326}, {"id": 245, "seek": 162648, "start": 1626.48, "end": 1634.48, "text": " The arrows of K slice D look like this arrow H from C to C dash that should make these kind of diagrams commute.", "tokens": [50364, 440, 19669, 295, 591, 13153, 413, 574, 411, 341, 11610, 389, 490, 383, 281, 383, 8240, 300, 820, 652, 613, 733, 295, 36709, 36750, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09092909267970493, "compression_ratio": 1.4057142857142857, "no_speech_prob": 0.02226690948009491}, {"id": 246, "seek": 162648, "start": 1634.48, "end": 1645.48, "text": " OK, so let's write this thing that we get when we do our left Khan extension on D as LD.", "tokens": [50764, 2264, 11, 370, 718, 311, 2464, 341, 551, 300, 321, 483, 562, 321, 360, 527, 1411, 18136, 10320, 322, 413, 382, 33936, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09092909267970493, "compression_ratio": 1.4057142857142857, "no_speech_prob": 0.02226690948009491}, {"id": 247, "seek": 162648, "start": 1645.48, "end": 1650.48, "text": " So you see that this is given by a co-limit.", "tokens": [51314, 407, 291, 536, 300, 341, 307, 2212, 538, 257, 598, 12, 4197, 270, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09092909267970493, "compression_ratio": 1.4057142857142857, "no_speech_prob": 0.02226690948009491}, {"id": 248, "seek": 165048, "start": 1650.48, "end": 1655.48, "text": " And so this thing here is going to be an object of category E.", "tokens": [50364, 400, 370, 341, 551, 510, 307, 516, 281, 312, 364, 2657, 295, 7719, 462, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10248862584431966, "compression_ratio": 1.5027027027027027, "no_speech_prob": 0.007917514070868492}, {"id": 249, "seek": 165048, "start": 1655.48, "end": 1662.48, "text": " But it's also going to come with this sort of universal cone, which we'll call lambda D.", "tokens": [50614, 583, 309, 311, 611, 516, 281, 808, 365, 341, 1333, 295, 11455, 19749, 11, 597, 321, 603, 818, 13607, 413, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10248862584431966, "compression_ratio": 1.5027027027027027, "no_speech_prob": 0.007917514070868492}, {"id": 250, "seek": 165048, "start": 1662.48, "end": 1672.48, "text": " So that should, of course, be a natural transformation from this functor here to a constant functor.", "tokens": [50964, 407, 300, 820, 11, 295, 1164, 11, 312, 257, 3303, 9887, 490, 341, 1019, 1672, 510, 281, 257, 5754, 1019, 1672, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10248862584431966, "compression_ratio": 1.5027027027027027, "no_speech_prob": 0.007917514070868492}, {"id": 251, "seek": 165048, "start": 1672.48, "end": 1675.48, "text": " So that will be delta LD.", "tokens": [51464, 407, 300, 486, 312, 8289, 33936, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10248862584431966, "compression_ratio": 1.5027027027027027, "no_speech_prob": 0.007917514070868492}, {"id": 252, "seek": 167548, "start": 1675.48, "end": 1681.48, "text": " That sends everything in this category here to this object LD of E.", "tokens": [50364, 663, 14790, 1203, 294, 341, 7719, 510, 281, 341, 2657, 33936, 295, 462, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06723628917210539, "compression_ratio": 1.706896551724138, "no_speech_prob": 0.02322983741760254}, {"id": 253, "seek": 167548, "start": 1681.48, "end": 1687.48, "text": " So we could pretty much define this as to say it's this composition here.", "tokens": [50664, 407, 321, 727, 1238, 709, 6964, 341, 382, 281, 584, 309, 311, 341, 12686, 510, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06723628917210539, "compression_ratio": 1.706896551724138, "no_speech_prob": 0.02322983741760254}, {"id": 254, "seek": 167548, "start": 1687.48, "end": 1699.48, "text": " And that's why I'm writing this equals sign here to say that this little triangle at the bottom here to say that this triangle at the bottom here commutes.", "tokens": [50964, 400, 300, 311, 983, 286, 478, 3579, 341, 6915, 1465, 510, 281, 584, 300, 341, 707, 13369, 412, 264, 2767, 510, 281, 584, 300, 341, 13369, 412, 264, 2767, 510, 800, 1819, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06723628917210539, "compression_ratio": 1.706896551724138, "no_speech_prob": 0.02322983741760254}, {"id": 255, "seek": 169948, "start": 1699.48, "end": 1708.48, "text": " So this is telling us how this functor here is defined on objects.", "tokens": [50364, 407, 341, 307, 3585, 505, 577, 341, 1019, 1672, 510, 307, 7642, 322, 6565, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15085037081849342, "compression_ratio": 1.3206106870229009, "no_speech_prob": 0.012044701725244522}, {"id": 256, "seek": 169948, "start": 1708.48, "end": 1711.48, "text": " How is it defined on arrows?", "tokens": [50814, 1012, 307, 309, 7642, 322, 19669, 30, 50964], "temperature": 0.0, "avg_logprob": -0.15085037081849342, "compression_ratio": 1.3206106870229009, "no_speech_prob": 0.012044701725244522}, {"id": 257, "seek": 169948, "start": 1711.48, "end": 1728.48, "text": " Well, basically, if we have an arrow G from D to D dash, then this kind of...", "tokens": [50964, 1042, 11, 1936, 11, 498, 321, 362, 364, 11610, 460, 490, 413, 281, 413, 8240, 11, 550, 341, 733, 295, 485, 51814], "temperature": 0.0, "avg_logprob": -0.15085037081849342, "compression_ratio": 1.3206106870229009, "no_speech_prob": 0.012044701725244522}, {"id": 258, "seek": 172848, "start": 1728.48, "end": 1738.48, "text": " So I mean, basically, if we have an arrow G, then it's going to get sent by our left Khan extension of K along F to this arrow Q here,", "tokens": [50364, 407, 286, 914, 11, 1936, 11, 498, 321, 362, 364, 11610, 460, 11, 550, 309, 311, 516, 281, 483, 2279, 538, 527, 1411, 18136, 10320, 295, 591, 2051, 479, 281, 341, 11610, 1249, 510, 11, 50864], "temperature": 0.0, "avg_logprob": -0.0817594744942405, "compression_ratio": 1.5219512195121951, "no_speech_prob": 0.010278639383614063}, {"id": 259, "seek": 172848, "start": 1738.48, "end": 1745.48, "text": " which is going to be unique such that this kind of triangle commutes.", "tokens": [50864, 597, 307, 516, 281, 312, 3845, 1270, 300, 341, 733, 295, 13369, 800, 1819, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0817594744942405, "compression_ratio": 1.5219512195121951, "no_speech_prob": 0.010278639383614063}, {"id": 260, "seek": 172848, "start": 1745.48, "end": 1749.48, "text": " So I don't really want to go into the minutiae of this.", "tokens": [51214, 407, 286, 500, 380, 534, 528, 281, 352, 666, 264, 13951, 654, 68, 295, 341, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0817594744942405, "compression_ratio": 1.5219512195121951, "no_speech_prob": 0.010278639383614063}, {"id": 261, "seek": 172848, "start": 1749.48, "end": 1754.48, "text": " Basically, this is a diagram in a functor category.", "tokens": [51414, 8537, 11, 341, 307, 257, 10686, 294, 257, 1019, 1672, 7719, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0817594744942405, "compression_ratio": 1.5219512195121951, "no_speech_prob": 0.010278639383614063}, {"id": 262, "seek": 175448, "start": 1754.48, "end": 1766.48, "text": " And we know that there's going to be a unique arrow that makes this thing commute because this is like a universal cone.", "tokens": [50364, 400, 321, 458, 300, 456, 311, 516, 281, 312, 257, 3845, 11610, 300, 1669, 341, 551, 36750, 570, 341, 307, 411, 257, 11455, 19749, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07373364245305296, "compression_ratio": 1.639240506329114, "no_speech_prob": 0.031522516161203384}, {"id": 263, "seek": 175448, "start": 1766.48, "end": 1769.48, "text": " And what we have here is a horizontal composition.", "tokens": [50964, 400, 437, 321, 362, 510, 307, 257, 12750, 12686, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07373364245305296, "compression_ratio": 1.639240506329114, "no_speech_prob": 0.031522516161203384}, {"id": 264, "seek": 175448, "start": 1769.48, "end": 1776.48, "text": " And this functor here works on objects like this and works on arrows like the identity.", "tokens": [51114, 400, 341, 1019, 1672, 510, 1985, 322, 6565, 411, 341, 293, 1985, 322, 19669, 411, 264, 6575, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07373364245305296, "compression_ratio": 1.639240506329114, "no_speech_prob": 0.031522516161203384}, {"id": 265, "seek": 177648, "start": 1776.48, "end": 1778.48, "text": " I'm not going to dwell on this.", "tokens": [50364, 286, 478, 406, 516, 281, 24355, 322, 341, 13, 50464], "temperature": 0.0, "avg_logprob": -0.0778250384640384, "compression_ratio": 1.565, "no_speech_prob": 0.7239552736282349}, {"id": 266, "seek": 177648, "start": 1778.48, "end": 1786.48, "text": " If you watch my video on Khan extensions, I go through all this in much more detail.", "tokens": [50464, 759, 291, 1159, 452, 960, 322, 18136, 25129, 11, 286, 352, 807, 439, 341, 294, 709, 544, 2607, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0778250384640384, "compression_ratio": 1.565, "no_speech_prob": 0.7239552736282349}, {"id": 267, "seek": 177648, "start": 1786.48, "end": 1795.48, "text": " But I just wanted to quickly show you how you can calculate all the parts of these Khan extensions.", "tokens": [50864, 583, 286, 445, 1415, 281, 2661, 855, 291, 577, 291, 393, 8873, 439, 264, 3166, 295, 613, 18136, 25129, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0778250384640384, "compression_ratio": 1.565, "no_speech_prob": 0.7239552736282349}, {"id": 268, "seek": 177648, "start": 1795.48, "end": 1805.48, "text": " And so the final bit is how do we actually calculate this natural transformation here, this eta?", "tokens": [51314, 400, 370, 264, 2572, 857, 307, 577, 360, 321, 767, 8873, 341, 3303, 9887, 510, 11, 341, 32415, 30, 51814], "temperature": 0.0, "avg_logprob": -0.0778250384640384, "compression_ratio": 1.565, "no_speech_prob": 0.7239552736282349}, {"id": 269, "seek": 180548, "start": 1805.48, "end": 1809.48, "text": " And basically the formulas over here.", "tokens": [50364, 400, 1936, 264, 30546, 670, 510, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1470898608772122, "compression_ratio": 1.3928571428571428, "no_speech_prob": 0.0009976680157706141}, {"id": 270, "seek": 180548, "start": 1809.48, "end": 1817.48, "text": " So this is the key formula here.", "tokens": [50564, 407, 341, 307, 264, 2141, 8513, 510, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1470898608772122, "compression_ratio": 1.3928571428571428, "no_speech_prob": 0.0009976680157706141}, {"id": 271, "seek": 180548, "start": 1817.48, "end": 1825.48, "text": " Where this lambda here is our sort of universal cone, which comes from calculating that co-limit I was talking about before.", "tokens": [50964, 2305, 341, 13607, 510, 307, 527, 1333, 295, 11455, 19749, 11, 597, 1487, 490, 28258, 300, 598, 12, 4197, 270, 286, 390, 1417, 466, 949, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1470898608772122, "compression_ratio": 1.3928571428571428, "no_speech_prob": 0.0009976680157706141}, {"id": 272, "seek": 182548, "start": 1825.48, "end": 1835.48, "text": " So the point really is that when these conditions hold, we have all these nice formulas to be able to compute this left-can extension.", "tokens": [50364, 407, 264, 935, 534, 307, 300, 562, 613, 4487, 1797, 11, 321, 362, 439, 613, 1481, 30546, 281, 312, 1075, 281, 14722, 341, 1411, 12, 7035, 10320, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09248275106603449, "compression_ratio": 1.6757990867579908, "no_speech_prob": 0.0188122671097517}, {"id": 273, "seek": 182548, "start": 1835.48, "end": 1841.48, "text": " Actually, I should just say quickly that something else really, really nice happens in this case.", "tokens": [50864, 5135, 11, 286, 820, 445, 584, 2661, 300, 746, 1646, 534, 11, 534, 1481, 2314, 294, 341, 1389, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09248275106603449, "compression_ratio": 1.6757990867579908, "no_speech_prob": 0.0188122671097517}, {"id": 274, "seek": 182548, "start": 1841.48, "end": 1852.48, "text": " In fact, we can think of this LAN-K thing here as a functor, which goes from this functor category here to this functor category here.", "tokens": [51164, 682, 1186, 11, 321, 393, 519, 295, 341, 37387, 12, 42, 551, 510, 382, 257, 1019, 1672, 11, 597, 1709, 490, 341, 1019, 1672, 7719, 510, 281, 341, 1019, 1672, 7719, 510, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09248275106603449, "compression_ratio": 1.6757990867579908, "no_speech_prob": 0.0188122671097517}, {"id": 275, "seek": 185248, "start": 1852.48, "end": 1857.48, "text": " And it's actually just going to be the left adjoint of K star.", "tokens": [50364, 400, 309, 311, 767, 445, 516, 281, 312, 264, 1411, 614, 48613, 295, 591, 3543, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07510273564945567, "compression_ratio": 1.5736040609137056, "no_speech_prob": 0.0046037365682423115}, {"id": 276, "seek": 185248, "start": 1857.48, "end": 1860.48, "text": " So let's remember our setup.", "tokens": [50614, 407, 718, 311, 1604, 527, 8657, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07510273564945567, "compression_ratio": 1.5736040609137056, "no_speech_prob": 0.0046037365682423115}, {"id": 277, "seek": 185248, "start": 1860.48, "end": 1866.48, "text": " We have this functor K, which goes from C to D.", "tokens": [50764, 492, 362, 341, 1019, 1672, 591, 11, 597, 1709, 490, 383, 281, 413, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07510273564945567, "compression_ratio": 1.5736040609137056, "no_speech_prob": 0.0046037365682423115}, {"id": 278, "seek": 185248, "start": 1866.48, "end": 1870.48, "text": " And that means that we can form this functor K star.", "tokens": [51064, 400, 300, 1355, 300, 321, 393, 1254, 341, 1019, 1672, 591, 3543, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07510273564945567, "compression_ratio": 1.5736040609137056, "no_speech_prob": 0.0046037365682423115}, {"id": 279, "seek": 185248, "start": 1870.48, "end": 1875.48, "text": " And basically this just works by pre-composition.", "tokens": [51264, 400, 1936, 341, 445, 1985, 538, 659, 12, 21541, 5830, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07510273564945567, "compression_ratio": 1.5736040609137056, "no_speech_prob": 0.0046037365682423115}, {"id": 280, "seek": 185248, "start": 1875.48, "end": 1880.48, "text": " So it works according to this formula here or this expression here.", "tokens": [51514, 407, 309, 1985, 4650, 281, 341, 8513, 510, 420, 341, 6114, 510, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07510273564945567, "compression_ratio": 1.5736040609137056, "no_speech_prob": 0.0046037365682423115}, {"id": 281, "seek": 188048, "start": 1880.48, "end": 1894.48, "text": " If we have an object of D comma E as in a functor G from D to E, then K star just sends that to G after K, which is going to be a functor from C to E.", "tokens": [50364, 759, 321, 362, 364, 2657, 295, 413, 22117, 462, 382, 294, 257, 1019, 1672, 460, 490, 413, 281, 462, 11, 550, 591, 3543, 445, 14790, 300, 281, 460, 934, 591, 11, 597, 307, 516, 281, 312, 257, 1019, 1672, 490, 383, 281, 462, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0572238564491272, "compression_ratio": 1.6346153846153846, "no_speech_prob": 0.013550265692174435}, {"id": 282, "seek": 188048, "start": 1894.48, "end": 1905.48, "text": " And you can see that it sends this arrow beta here of this category to this arrow here of this category.", "tokens": [51064, 400, 291, 393, 536, 300, 309, 14790, 341, 11610, 9861, 510, 295, 341, 7719, 281, 341, 11610, 510, 295, 341, 7719, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0572238564491272, "compression_ratio": 1.6346153846153846, "no_speech_prob": 0.013550265692174435}, {"id": 283, "seek": 190548, "start": 1905.48, "end": 1914.48, "text": " So it's very cool because basically we can also think of these can extensions in terms of adjoint functors.", "tokens": [50364, 407, 309, 311, 588, 1627, 570, 1936, 321, 393, 611, 519, 295, 613, 393, 25129, 294, 2115, 295, 614, 48613, 1019, 5547, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07262833563836066, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.012029419653117657}, {"id": 284, "seek": 190548, "start": 1914.48, "end": 1921.48, "text": " Basically, we're just computing the left adjoint of K star.", "tokens": [50814, 8537, 11, 321, 434, 445, 15866, 264, 1411, 614, 48613, 295, 591, 3543, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07262833563836066, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.012029419653117657}, {"id": 285, "seek": 190548, "start": 1921.48, "end": 1923.48, "text": " And this is LAN-K.", "tokens": [51164, 400, 341, 307, 37387, 12, 42, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07262833563836066, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.012029419653117657}, {"id": 286, "seek": 190548, "start": 1923.48, "end": 1934.48, "text": " And then if we take an object of this category here like F, well, if we operate LAN-K on F, then we get the thing that comes from this triangle here.", "tokens": [51264, 400, 550, 498, 321, 747, 364, 2657, 295, 341, 7719, 510, 411, 479, 11, 731, 11, 498, 321, 9651, 37387, 12, 42, 322, 479, 11, 550, 321, 483, 264, 551, 300, 1487, 490, 341, 13369, 510, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07262833563836066, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.012029419653117657}, {"id": 287, "seek": 193448, "start": 1934.48, "end": 1940.48, "text": " Which is the way that we originally defined this left can extension.", "tokens": [50364, 3013, 307, 264, 636, 300, 321, 7993, 7642, 341, 1411, 393, 10320, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10562348056149173, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.005638566333800554}, {"id": 288, "seek": 193448, "start": 1940.48, "end": 1955.48, "text": " And so it's very cool that when we have all these conditions holding these ones here, like it's not just that we can compute the left can extension of F or on K.", "tokens": [50664, 400, 370, 309, 311, 588, 1627, 300, 562, 321, 362, 439, 613, 4487, 5061, 613, 2306, 510, 11, 411, 309, 311, 406, 445, 300, 321, 393, 14722, 264, 1411, 393, 10320, 295, 479, 420, 322, 591, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10562348056149173, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.005638566333800554}, {"id": 289, "seek": 193448, "start": 1955.48, "end": 1962.48, "text": " We can compute the left can extension of any functor from C to E or on K.", "tokens": [51414, 492, 393, 14722, 264, 1411, 393, 10320, 295, 604, 1019, 1672, 490, 383, 281, 462, 420, 322, 591, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10562348056149173, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.005638566333800554}, {"id": 290, "seek": 196248, "start": 1962.48, "end": 1975.48, "text": " And actually that gives us those all sort of fit together to give us this sort of bigger functor, which allows us to go between these two functor categories.", "tokens": [50364, 400, 767, 300, 2709, 505, 729, 439, 1333, 295, 3318, 1214, 281, 976, 505, 341, 1333, 295, 3801, 1019, 1672, 11, 597, 4045, 505, 281, 352, 1296, 613, 732, 1019, 1672, 10479, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12729334363750383, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.02473258785903454}, {"id": 291, "seek": 196248, "start": 1975.48, "end": 1980.48, "text": " Just to finish, you know, to complete the picture.", "tokens": [51014, 1449, 281, 2413, 11, 291, 458, 11, 281, 3566, 264, 3036, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12729334363750383, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.02473258785903454}, {"id": 292, "seek": 198048, "start": 1981.48, "end": 1995.48, "text": " For this adjunction, there should be a unit, of course, which should go from this identity functor here to K star after LAN-K.", "tokens": [50414, 1171, 341, 614, 10010, 882, 11, 456, 820, 312, 257, 4985, 11, 295, 1164, 11, 597, 820, 352, 490, 341, 6575, 1019, 1672, 510, 281, 591, 3543, 934, 37387, 12, 42, 13, 51114], "temperature": 0.0, "avg_logprob": -0.095294958924594, "compression_ratio": 1.530054644808743, "no_speech_prob": 0.17700254917144775}, {"id": 293, "seek": 198048, "start": 1995.48, "end": 2007.48, "text": " If we look at a general component of this natural transformation E to dash, well, let's say we look at the F component, it should have this kind of form.", "tokens": [51114, 759, 321, 574, 412, 257, 2674, 6542, 295, 341, 3303, 9887, 462, 281, 8240, 11, 731, 11, 718, 311, 584, 321, 574, 412, 264, 479, 6542, 11, 309, 820, 362, 341, 733, 295, 1254, 13, 51714], "temperature": 0.0, "avg_logprob": -0.095294958924594, "compression_ratio": 1.530054644808743, "no_speech_prob": 0.17700254917144775}, {"id": 294, "seek": 200748, "start": 2007.48, "end": 2012.48, "text": " And can you guess what it is? Well, it's just exactly Eta.", "tokens": [50364, 400, 393, 291, 2041, 437, 309, 307, 30, 1042, 11, 309, 311, 445, 2293, 462, 1328, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06487701088190079, "compression_ratio": 1.4853801169590644, "no_speech_prob": 0.04593408852815628}, {"id": 295, "seek": 200748, "start": 2012.48, "end": 2021.48, "text": " It's exactly the natural transformation that fills in the triangle from the definition of the left can extension in the first place.", "tokens": [50614, 467, 311, 2293, 264, 3303, 9887, 300, 22498, 294, 264, 13369, 490, 264, 7123, 295, 264, 1411, 393, 10320, 294, 264, 700, 1081, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06487701088190079, "compression_ratio": 1.4853801169590644, "no_speech_prob": 0.04593408852815628}, {"id": 296, "seek": 200748, "start": 2021.48, "end": 2027.48, "text": " So there we are, a sort of very quick recap of can extensions.", "tokens": [51064, 407, 456, 321, 366, 11, 257, 1333, 295, 588, 1702, 20928, 295, 393, 25129, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06487701088190079, "compression_ratio": 1.4853801169590644, "no_speech_prob": 0.04593408852815628}, {"id": 297, "seek": 202748, "start": 2027.48, "end": 2041.48, "text": " And now let's get on to a really fascinating application of these things where we're going to think about all sorts of things to do with free co-completions and density,", "tokens": [50364, 400, 586, 718, 311, 483, 322, 281, 257, 534, 10343, 3861, 295, 613, 721, 689, 321, 434, 516, 281, 519, 466, 439, 7527, 295, 721, 281, 360, 365, 1737, 598, 12, 1112, 14657, 626, 293, 10305, 11, 51064], "temperature": 0.0, "avg_logprob": -0.098386252367938, "compression_ratio": 1.7064676616915422, "no_speech_prob": 0.5330783724784851}, {"id": 298, "seek": 202748, "start": 2041.48, "end": 2052.48, "text": " and how we can make lots of objects by sticking other objects together and co-ends and all sorts of really fascinating connections with lots of things in maths.", "tokens": [51064, 293, 577, 321, 393, 652, 3195, 295, 6565, 538, 13465, 661, 6565, 1214, 293, 598, 12, 2581, 293, 439, 7527, 295, 534, 10343, 9271, 365, 3195, 295, 721, 294, 36287, 13, 51614], "temperature": 0.0, "avg_logprob": -0.098386252367938, "compression_ratio": 1.7064676616915422, "no_speech_prob": 0.5330783724784851}, {"id": 299, "seek": 202748, "start": 2052.48, "end": 2054.48, "text": " So let's go.", "tokens": [51614, 407, 718, 311, 352, 13, 51714], "temperature": 0.0, "avg_logprob": -0.098386252367938, "compression_ratio": 1.7064676616915422, "no_speech_prob": 0.5330783724784851}, {"id": 300, "seek": 205448, "start": 2054.48, "end": 2061.48, "text": " Okay, and here's one final result, which is going to be really useful for us to simplify things.", "tokens": [50364, 1033, 11, 293, 510, 311, 472, 2572, 1874, 11, 597, 307, 516, 281, 312, 534, 4420, 337, 505, 281, 20460, 721, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08021303758782855, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.004901203326880932}, {"id": 301, "seek": 205448, "start": 2061.48, "end": 2074.48, "text": " And it basically says that in a special case, which is going to occur for us frequently, there's some details of these can extensions that becomes simpler.", "tokens": [50714, 400, 309, 1936, 1619, 300, 294, 257, 2121, 1389, 11, 597, 307, 516, 281, 5160, 337, 505, 10374, 11, 456, 311, 512, 4365, 295, 613, 393, 25129, 300, 3643, 18587, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08021303758782855, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.004901203326880932}, {"id": 302, "seek": 207448, "start": 2074.48, "end": 2078.48, "text": " So we're going to keep with this assumption here.", "tokens": [50364, 407, 321, 434, 516, 281, 1066, 365, 341, 15302, 510, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09908053231617761, "compression_ratio": 1.440251572327044, "no_speech_prob": 0.42128244042396545}, {"id": 303, "seek": 207448, "start": 2078.48, "end": 2083.48, "text": " And in that case, we have this result holding.", "tokens": [50564, 400, 294, 300, 1389, 11, 321, 362, 341, 1874, 5061, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09908053231617761, "compression_ratio": 1.440251572327044, "no_speech_prob": 0.42128244042396545}, {"id": 304, "seek": 207448, "start": 2083.48, "end": 2097.48, "text": " And it says that if this K here is a fully faithful functor, which basically means that it acts like a kind of bijection on Homsets.", "tokens": [50814, 400, 309, 1619, 300, 498, 341, 591, 510, 307, 257, 4498, 17808, 1019, 1672, 11, 597, 1936, 1355, 300, 309, 10672, 411, 257, 733, 295, 3228, 1020, 313, 322, 389, 4785, 1385, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09908053231617761, "compression_ratio": 1.440251572327044, "no_speech_prob": 0.42128244042396545}, {"id": 305, "seek": 209748, "start": 2097.48, "end": 2116.48, "text": " In other words, this is going to, for example, send the arrows from C to C dash to the arrows from K C to K C dash.", "tokens": [50364, 682, 661, 2283, 11, 341, 307, 516, 281, 11, 337, 1365, 11, 2845, 264, 19669, 490, 383, 281, 383, 8240, 281, 264, 19669, 490, 591, 383, 281, 591, 383, 8240, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09524930533716235, "compression_ratio": 1.4081632653061225, "no_speech_prob": 0.3443441092967987}, {"id": 306, "seek": 209748, "start": 2116.48, "end": 2122.48, "text": " And it should always do that kind of thing like a bijection if it's fully faithful functor.", "tokens": [51314, 400, 309, 820, 1009, 360, 300, 733, 295, 551, 411, 257, 3228, 1020, 313, 498, 309, 311, 4498, 17808, 1019, 1672, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09524930533716235, "compression_ratio": 1.4081632653061225, "no_speech_prob": 0.3443441092967987}, {"id": 307, "seek": 212248, "start": 2122.48, "end": 2135.48, "text": " Well, in that case, we have that this ether here, this kind of natural transformation that fills in the triangle is always going to be a natural isomorphism.", "tokens": [50364, 1042, 11, 294, 300, 1389, 11, 321, 362, 300, 341, 37096, 510, 11, 341, 733, 295, 3303, 9887, 300, 22498, 294, 264, 13369, 307, 1009, 516, 281, 312, 257, 3303, 307, 32702, 1434, 13, 51014], "temperature": 0.0, "avg_logprob": -0.057715625473947235, "compression_ratio": 1.5284090909090908, "no_speech_prob": 0.017673002555966377}, {"id": 308, "seek": 212248, "start": 2135.48, "end": 2145.48, "text": " So the particular case where this is going to occur for us is basically when C is just a full subcategory of D.", "tokens": [51014, 407, 264, 1729, 1389, 689, 341, 307, 516, 281, 5160, 337, 505, 307, 1936, 562, 383, 307, 445, 257, 1577, 1422, 66, 48701, 295, 413, 13, 51514], "temperature": 0.0, "avg_logprob": -0.057715625473947235, "compression_ratio": 1.5284090909090908, "no_speech_prob": 0.017673002555966377}, {"id": 309, "seek": 214548, "start": 2145.48, "end": 2156.48, "text": " In other words, when we get C just by picking a load of objects of D and looking at all the arrows between those objects and that basically gives us C.", "tokens": [50364, 682, 661, 2283, 11, 562, 321, 483, 383, 445, 538, 8867, 257, 3677, 295, 6565, 295, 413, 293, 1237, 412, 439, 264, 19669, 1296, 729, 6565, 293, 300, 1936, 2709, 505, 383, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08506315807963527, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.3770519495010376}, {"id": 310, "seek": 214548, "start": 2156.48, "end": 2164.48, "text": " So in that special case where C is a full subcategory of D and K is just this inclusion functor.", "tokens": [50914, 407, 294, 300, 2121, 1389, 689, 383, 307, 257, 1577, 1422, 66, 48701, 295, 413, 293, 591, 307, 445, 341, 15874, 1019, 1672, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08506315807963527, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.3770519495010376}, {"id": 311, "seek": 214548, "start": 2164.48, "end": 2172.48, "text": " Basically, this result says that essentially, we don't have to worry about this natural transformation, right?", "tokens": [51314, 8537, 11, 341, 1874, 1619, 300, 4476, 11, 321, 500, 380, 362, 281, 3292, 466, 341, 3303, 9887, 11, 558, 30, 51714], "temperature": 0.0, "avg_logprob": -0.08506315807963527, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.3770519495010376}, {"id": 312, "seek": 217248, "start": 2172.48, "end": 2183.48, "text": " This diagram commutes in that case, at least up to a sort of natural isomorphism here.", "tokens": [50364, 639, 10686, 800, 1819, 294, 300, 1389, 11, 412, 1935, 493, 281, 257, 1333, 295, 3303, 307, 32702, 1434, 510, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14903090373579278, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.060855682939291}, {"id": 313, "seek": 217248, "start": 2183.48, "end": 2184.48, "text": " So this is really nice.", "tokens": [50914, 407, 341, 307, 534, 1481, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14903090373579278, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.060855682939291}, {"id": 314, "seek": 217248, "start": 2184.48, "end": 2201.48, "text": " Like, remember, the way I introduced Can extensions, I basically said, well, we're talking about this extension problem, but then, oh, we have to add in these high dimensional cells to make things so that we have unique solutions", "tokens": [50964, 1743, 11, 1604, 11, 264, 636, 286, 7268, 1664, 25129, 11, 286, 1936, 848, 11, 731, 11, 321, 434, 1417, 466, 341, 10320, 1154, 11, 457, 550, 11, 1954, 11, 321, 362, 281, 909, 294, 613, 1090, 18795, 5438, 281, 652, 721, 370, 300, 321, 362, 3845, 6547, 51814], "temperature": 0.0, "avg_logprob": -0.14903090373579278, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.060855682939291}, {"id": 315, "seek": 220148, "start": 2201.48, "end": 2202.48, "text": " yada yada yada.", "tokens": [50364, 288, 1538, 288, 1538, 288, 1538, 13, 50414], "temperature": 0.0, "avg_logprob": -0.1721152912486683, "compression_ratio": 1.4217687074829932, "no_speech_prob": 0.0314752459526062}, {"id": 316, "seek": 220148, "start": 2202.48, "end": 2220.48, "text": " Well, in this special case here, basically where K is a fully faithful functor, and we have these nice conditions which give us this kind of co-limity way of describing this left can extension.", "tokens": [50414, 1042, 11, 294, 341, 2121, 1389, 510, 11, 1936, 689, 591, 307, 257, 4498, 17808, 1019, 1672, 11, 293, 321, 362, 613, 1481, 4487, 597, 976, 505, 341, 733, 295, 598, 12, 4197, 507, 636, 295, 16141, 341, 1411, 393, 10320, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1721152912486683, "compression_ratio": 1.4217687074829932, "no_speech_prob": 0.0314752459526062}, {"id": 317, "seek": 222048, "start": 2220.48, "end": 2234.48, "text": " Well, in this case, basically, up to isomorphism, we pretty much do have that this triangle commutes and we don't really have to worry about the form of eta in this case.", "tokens": [50364, 1042, 11, 294, 341, 1389, 11, 1936, 11, 493, 281, 307, 32702, 1434, 11, 321, 1238, 709, 360, 362, 300, 341, 13369, 800, 1819, 293, 321, 500, 380, 534, 362, 281, 3292, 466, 264, 1254, 295, 32415, 294, 341, 1389, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1446881741285324, "compression_ratio": 1.4556962025316456, "no_speech_prob": 0.402983695268631}, {"id": 318, "seek": 222048, "start": 2234.48, "end": 2235.48, "text": " Okay, then.", "tokens": [51064, 1033, 11, 550, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1446881741285324, "compression_ratio": 1.4556962025316456, "no_speech_prob": 0.402983695268631}, {"id": 319, "seek": 222048, "start": 2235.48, "end": 2241.48, "text": " So now we've got our can extension ideas ready.", "tokens": [51114, 407, 586, 321, 600, 658, 527, 393, 10320, 3487, 1919, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1446881741285324, "compression_ratio": 1.4556962025316456, "no_speech_prob": 0.402983695268631}, {"id": 320, "seek": 224148, "start": 2241.48, "end": 2252.48, "text": " Let's get on with the central idea I want to talk about today, which is something called the free co-completion of a category.", "tokens": [50364, 961, 311, 483, 322, 365, 264, 5777, 1558, 286, 528, 281, 751, 466, 965, 11, 597, 307, 746, 1219, 264, 1737, 598, 12, 1112, 14657, 313, 295, 257, 7719, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05821980300702547, "compression_ratio": 1.5025906735751295, "no_speech_prob": 0.1843656599521637}, {"id": 321, "seek": 224148, "start": 2252.48, "end": 2258.48, "text": " So the easiest way to explain it is just directly.", "tokens": [50914, 407, 264, 12889, 636, 281, 2903, 309, 307, 445, 3838, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05821980300702547, "compression_ratio": 1.5025906735751295, "no_speech_prob": 0.1843656599521637}, {"id": 322, "seek": 224148, "start": 2258.48, "end": 2266.48, "text": " There's various ways of looking at this notion, but the simplest one is just to say, well, we have a category C.", "tokens": [51214, 821, 311, 3683, 2098, 295, 1237, 412, 341, 10710, 11, 457, 264, 22811, 472, 307, 445, 281, 584, 11, 731, 11, 321, 362, 257, 7719, 383, 13, 51614], "temperature": 0.0, "avg_logprob": -0.05821980300702547, "compression_ratio": 1.5025906735751295, "no_speech_prob": 0.1843656599521637}, {"id": 323, "seek": 226648, "start": 2266.48, "end": 2271.48, "text": " We want to determine the so-called free co-completion of that category.", "tokens": [50364, 492, 528, 281, 6997, 264, 370, 12, 11880, 1737, 598, 12, 1112, 14657, 313, 295, 300, 7719, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08368160043443952, "compression_ratio": 1.6627906976744187, "no_speech_prob": 0.05668744817376137}, {"id": 324, "seek": 226648, "start": 2271.48, "end": 2280.48, "text": " And basically that is just the category of pre-sheaves of C.", "tokens": [50614, 400, 1936, 300, 307, 445, 264, 7719, 295, 659, 12, 9611, 5423, 295, 383, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08368160043443952, "compression_ratio": 1.6627906976744187, "no_speech_prob": 0.05668744817376137}, {"id": 325, "seek": 226648, "start": 2280.48, "end": 2287.48, "text": " So that's the category of functors from the opposite of C into set.", "tokens": [51064, 407, 300, 311, 264, 7719, 295, 1019, 5547, 490, 264, 6182, 295, 383, 666, 992, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08368160043443952, "compression_ratio": 1.6627906976744187, "no_speech_prob": 0.05668744817376137}, {"id": 326, "seek": 226648, "start": 2287.48, "end": 2290.48, "text": " And this is something we've seen a lot before.", "tokens": [51414, 400, 341, 307, 746, 321, 600, 1612, 257, 688, 949, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08368160043443952, "compression_ratio": 1.6627906976744187, "no_speech_prob": 0.05668744817376137}, {"id": 327, "seek": 226648, "start": 2290.48, "end": 2294.48, "text": " We've seen a lot of these pre-sheaves.", "tokens": [51564, 492, 600, 1612, 257, 688, 295, 613, 659, 12, 9611, 5423, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08368160043443952, "compression_ratio": 1.6627906976744187, "no_speech_prob": 0.05668744817376137}, {"id": 328, "seek": 229448, "start": 2294.48, "end": 2303.48, "text": " We've seen that things like the category of graphs and the category of dynamical systems can be thought of as categories of pre-sheaves.", "tokens": [50364, 492, 600, 1612, 300, 721, 411, 264, 7719, 295, 24877, 293, 264, 7719, 295, 5999, 804, 3652, 393, 312, 1194, 295, 382, 10479, 295, 659, 12, 9611, 5423, 13, 50814], "temperature": 0.0, "avg_logprob": -0.04630886591397799, "compression_ratio": 1.643312101910828, "no_speech_prob": 0.003138905391097069}, {"id": 329, "seek": 229448, "start": 2303.48, "end": 2306.48, "text": " And we're pretty familiar with these ideas.", "tokens": [50814, 400, 321, 434, 1238, 4963, 365, 613, 3487, 13, 50964], "temperature": 0.0, "avg_logprob": -0.04630886591397799, "compression_ratio": 1.643312101910828, "no_speech_prob": 0.003138905391097069}, {"id": 330, "seek": 229448, "start": 2306.48, "end": 2314.48, "text": " And you may know that these categories of pre-sheaves are always co-complete.", "tokens": [50964, 400, 291, 815, 458, 300, 613, 10479, 295, 659, 12, 9611, 5423, 366, 1009, 598, 12, 1112, 17220, 13, 51364], "temperature": 0.0, "avg_logprob": -0.04630886591397799, "compression_ratio": 1.643312101910828, "no_speech_prob": 0.003138905391097069}, {"id": 331, "seek": 231448, "start": 2314.48, "end": 2334.48, "text": " So in a sense, you can see this free co-completion operation as a way to take a category C and sort of freely add co-limits to it so that we end up with a co-complete category.", "tokens": [50364, 407, 294, 257, 2020, 11, 291, 393, 536, 341, 1737, 598, 12, 1112, 14657, 313, 6916, 382, 257, 636, 281, 747, 257, 7719, 383, 293, 1333, 295, 16433, 909, 598, 12, 4197, 1208, 281, 309, 370, 300, 321, 917, 493, 365, 257, 598, 12, 1112, 17220, 7719, 13, 51364], "temperature": 0.0, "avg_logprob": -0.050147272990300105, "compression_ratio": 1.4557823129251701, "no_speech_prob": 0.03861823305487633}, {"id": 332, "seek": 231448, "start": 2334.48, "end": 2338.48, "text": " Now, there's a bit more to this idea.", "tokens": [51364, 823, 11, 456, 311, 257, 857, 544, 281, 341, 1558, 13, 51564], "temperature": 0.0, "avg_logprob": -0.050147272990300105, "compression_ratio": 1.4557823129251701, "no_speech_prob": 0.03861823305487633}, {"id": 333, "seek": 233848, "start": 2338.48, "end": 2352.48, "text": " Another piece of information which comes along when we make this free co-completion is this functor here, which is called the yonida embedding.", "tokens": [50364, 3996, 2522, 295, 1589, 597, 1487, 2051, 562, 321, 652, 341, 1737, 598, 12, 1112, 14657, 313, 307, 341, 1019, 1672, 510, 11, 597, 307, 1219, 264, 288, 266, 2887, 12240, 3584, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13878277185800914, "compression_ratio": 1.3240740740740742, "no_speech_prob": 0.04201032966375351}, {"id": 334, "seek": 235248, "start": 2352.48, "end": 2372.48, "text": " And what this does is it takes an object C to this honfunctor, C of blank comma C.", "tokens": [50364, 400, 437, 341, 775, 307, 309, 2516, 364, 2657, 383, 281, 341, 2157, 15930, 1672, 11, 383, 295, 8247, 22117, 383, 13, 51364], "temperature": 0.0, "avg_logprob": -0.17442946556286934, "compression_ratio": 1.2916666666666667, "no_speech_prob": 0.12401881068944931}, {"id": 335, "seek": 235248, "start": 2372.48, "end": 2376.48, "text": " So this is your contravariant honfunctor.", "tokens": [51364, 407, 341, 307, 428, 10742, 34033, 394, 2157, 15930, 1672, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17442946556286934, "compression_ratio": 1.2916666666666667, "no_speech_prob": 0.12401881068944931}, {"id": 336, "seek": 237648, "start": 2376.48, "end": 2383.48, "text": " So when I write this thing here, this is a functor from C op to set.", "tokens": [50364, 407, 562, 286, 2464, 341, 551, 510, 11, 341, 307, 257, 1019, 1672, 490, 383, 999, 281, 992, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07827188657677692, "compression_ratio": 1.5151515151515151, "no_speech_prob": 0.13441897928714752}, {"id": 337, "seek": 237648, "start": 2383.48, "end": 2398.48, "text": " If we have an arrow in C, let's say from C dash to C dash dash, let's say it's this arrow G.", "tokens": [50714, 759, 321, 362, 364, 11610, 294, 383, 11, 718, 311, 584, 490, 383, 8240, 281, 383, 8240, 8240, 11, 718, 311, 584, 309, 311, 341, 11610, 460, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07827188657677692, "compression_ratio": 1.5151515151515151, "no_speech_prob": 0.13441897928714752}, {"id": 338, "seek": 237648, "start": 2398.48, "end": 2399.48, "text": " So there we are.", "tokens": [51464, 407, 456, 321, 366, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07827188657677692, "compression_ratio": 1.5151515151515151, "no_speech_prob": 0.13441897928714752}, {"id": 339, "seek": 237648, "start": 2399.48, "end": 2402.48, "text": " That's an arrow of C.", "tokens": [51514, 663, 311, 364, 11610, 295, 383, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07827188657677692, "compression_ratio": 1.5151515151515151, "no_speech_prob": 0.13441897928714752}, {"id": 340, "seek": 240248, "start": 2402.48, "end": 2414.48, "text": " It's going to correspond with this arrow G op in C op.", "tokens": [50364, 467, 311, 516, 281, 6805, 365, 341, 11610, 460, 999, 294, 383, 999, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08645168940226237, "compression_ratio": 0.9, "no_speech_prob": 0.022581050172448158}, {"id": 341, "seek": 241448, "start": 2414.48, "end": 2437.48, "text": " And when we do this honfunctor on it, that's going to give us an arrow like this.", "tokens": [50364, 400, 562, 321, 360, 341, 2157, 15930, 1672, 322, 309, 11, 300, 311, 516, 281, 976, 505, 364, 11610, 411, 341, 13, 51514], "temperature": 0.0, "avg_logprob": -0.04707013643704928, "compression_ratio": 1.051948051948052, "no_speech_prob": 0.1545986384153366}, {"id": 342, "seek": 243748, "start": 2438.48, "end": 2466.48, "text": " And the way that you can think of this working is that if we have an arrow of C, let's say R from C dash dash to C,", "tokens": [50414, 400, 264, 636, 300, 291, 393, 519, 295, 341, 1364, 307, 300, 498, 321, 362, 364, 11610, 295, 383, 11, 718, 311, 584, 497, 490, 383, 8240, 8240, 281, 383, 11, 51814], "temperature": 0.0, "avg_logprob": -0.13150648389543806, "compression_ratio": 1.1979166666666667, "no_speech_prob": 0.11713005602359772}, {"id": 343, "seek": 246648, "start": 2467.48, "end": 2483.48, "text": " then this is going to send it to this arrow R after G, which is going to go from C dash to R.", "tokens": [50414, 550, 341, 307, 516, 281, 2845, 309, 281, 341, 11610, 497, 934, 460, 11, 597, 307, 516, 281, 352, 490, 383, 8240, 281, 497, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07872450074484182, "compression_ratio": 1.2920353982300885, "no_speech_prob": 0.0361337885260582}, {"id": 344, "seek": 246648, "start": 2483.48, "end": 2487.48, "text": " So that's basically the nature of this functor here.", "tokens": [51214, 407, 300, 311, 1936, 264, 3687, 295, 341, 1019, 1672, 510, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07872450074484182, "compression_ratio": 1.2920353982300885, "no_speech_prob": 0.0361337885260582}, {"id": 345, "seek": 248748, "start": 2488.48, "end": 2496.48, "text": " However, there's a bit more to this, of course, because this you need a embedding.", "tokens": [50414, 2908, 11, 456, 311, 257, 857, 544, 281, 341, 11, 295, 1164, 11, 570, 341, 291, 643, 257, 12240, 3584, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15047256151835123, "compression_ratio": 1.3125, "no_speech_prob": 0.2358899563550949}, {"id": 346, "seek": 248748, "start": 2496.48, "end": 2502.48, "text": " Yes, OK, it sends an object C to a honfunctor like this.", "tokens": [50814, 1079, 11, 2264, 11, 309, 14790, 364, 2657, 383, 281, 257, 2157, 15930, 1672, 411, 341, 13, 51114], "temperature": 0.0, "avg_logprob": -0.15047256151835123, "compression_ratio": 1.3125, "no_speech_prob": 0.2358899563550949}, {"id": 347, "seek": 248748, "start": 2502.48, "end": 2511.48, "text": " But what about if we have an arrow H from C to D?", "tokens": [51114, 583, 437, 466, 498, 321, 362, 364, 11610, 389, 490, 383, 281, 413, 30, 51564], "temperature": 0.0, "avg_logprob": -0.15047256151835123, "compression_ratio": 1.3125, "no_speech_prob": 0.2358899563550949}, {"id": 348, "seek": 251148, "start": 2512.48, "end": 2524.48, "text": " Well, that's going to give us an arrow in the target category, which will be called C of,", "tokens": [50414, 1042, 11, 300, 311, 516, 281, 976, 505, 364, 11610, 294, 264, 3779, 7719, 11, 597, 486, 312, 1219, 383, 295, 11, 51014], "temperature": 0.0, "avg_logprob": -0.12852545107825328, "compression_ratio": 1.3805970149253732, "no_speech_prob": 0.005374029278755188}, {"id": 349, "seek": 251148, "start": 2524.48, "end": 2530.48, "text": " well, let's call it C of blank comma H.", "tokens": [51014, 731, 11, 718, 311, 818, 309, 383, 295, 8247, 22117, 389, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12852545107825328, "compression_ratio": 1.3805970149253732, "no_speech_prob": 0.005374029278755188}, {"id": 350, "seek": 251148, "start": 2530.48, "end": 2534.48, "text": " And it's going to go like this.", "tokens": [51314, 400, 309, 311, 516, 281, 352, 411, 341, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12852545107825328, "compression_ratio": 1.3805970149253732, "no_speech_prob": 0.005374029278755188}, {"id": 351, "seek": 251148, "start": 2534.48, "end": 2536.48, "text": " And how does this work?", "tokens": [51514, 400, 577, 775, 341, 589, 30, 51614], "temperature": 0.0, "avg_logprob": -0.12852545107825328, "compression_ratio": 1.3805970149253732, "no_speech_prob": 0.005374029278755188}, {"id": 352, "seek": 253648, "start": 2536.48, "end": 2556.48, "text": " Well, if we look at the eighth component of this, that's just going to be a function like this.", "tokens": [50364, 1042, 11, 498, 321, 574, 412, 264, 19495, 6542, 295, 341, 11, 300, 311, 445, 516, 281, 312, 257, 2445, 411, 341, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09996100708290383, "compression_ratio": 1.1176470588235294, "no_speech_prob": 0.01659936085343361}, {"id": 353, "seek": 255648, "start": 2556.48, "end": 2572.48, "text": " And it's going to be sending an arrow R to the arrow like this.", "tokens": [50364, 400, 309, 311, 516, 281, 312, 7750, 364, 11610, 497, 281, 264, 11610, 411, 341, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11203892756316622, "compression_ratio": 1.515625, "no_speech_prob": 0.010143090039491653}, {"id": 354, "seek": 255648, "start": 2572.48, "end": 2574.48, "text": " And there we have it.", "tokens": [51164, 400, 456, 321, 362, 309, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11203892756316622, "compression_ratio": 1.515625, "no_speech_prob": 0.010143090039491653}, {"id": 355, "seek": 255648, "start": 2574.48, "end": 2578.48, "text": " So that's basically the nature of this Yonita embedding.", "tokens": [51264, 407, 300, 311, 1936, 264, 3687, 295, 341, 398, 266, 2786, 12240, 3584, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11203892756316622, "compression_ratio": 1.515625, "no_speech_prob": 0.010143090039491653}, {"id": 356, "seek": 255648, "start": 2578.48, "end": 2581.48, "text": " And it's very interesting is this Yonita embedding.", "tokens": [51464, 400, 309, 311, 588, 1880, 307, 341, 398, 266, 2786, 12240, 3584, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11203892756316622, "compression_ratio": 1.515625, "no_speech_prob": 0.010143090039491653}, {"id": 357, "seek": 258148, "start": 2581.48, "end": 2590.48, "text": " It comes up all over the place and it is a fully faithful functor.", "tokens": [50364, 467, 1487, 493, 439, 670, 264, 1081, 293, 309, 307, 257, 4498, 17808, 1019, 1672, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12893980427792198, "compression_ratio": 1.3287671232876712, "no_speech_prob": 0.04508105665445328}, {"id": 358, "seek": 258148, "start": 2590.48, "end": 2596.48, "text": " OK, so it's sort of, I mean, it's actually, it's pretty fascinating.", "tokens": [50814, 2264, 11, 370, 309, 311, 1333, 295, 11, 286, 914, 11, 309, 311, 767, 11, 309, 311, 1238, 10343, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12893980427792198, "compression_ratio": 1.3287671232876712, "no_speech_prob": 0.04508105665445328}, {"id": 359, "seek": 258148, "start": 2596.48, "end": 2608.48, "text": " If you consider, for example, C equals this category here.", "tokens": [51114, 759, 291, 1949, 11, 337, 1365, 11, 383, 6915, 341, 7719, 510, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12893980427792198, "compression_ratio": 1.3287671232876712, "no_speech_prob": 0.04508105665445328}, {"id": 360, "seek": 260848, "start": 2608.48, "end": 2614.48, "text": " If you, it turns out that in this case, this category of pre-sheaves.", "tokens": [50364, 759, 291, 11, 309, 4523, 484, 300, 294, 341, 1389, 11, 341, 7719, 295, 659, 12, 9611, 5423, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08935687655494326, "compression_ratio": 1.9045226130653266, "no_speech_prob": 0.006957701873034239}, {"id": 361, "seek": 260848, "start": 2614.48, "end": 2620.48, "text": " Well, it turns out that in this case, this category of pre-sheaves is the category of graphs.", "tokens": [50664, 1042, 11, 309, 4523, 484, 300, 294, 341, 1389, 11, 341, 7719, 295, 659, 12, 9611, 5423, 307, 264, 7719, 295, 24877, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08935687655494326, "compression_ratio": 1.9045226130653266, "no_speech_prob": 0.006957701873034239}, {"id": 362, "seek": 260848, "start": 2620.48, "end": 2625.48, "text": " And so that's kind of interesting for several reasons.", "tokens": [50964, 400, 370, 300, 311, 733, 295, 1880, 337, 2940, 4112, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08935687655494326, "compression_ratio": 1.9045226130653266, "no_speech_prob": 0.006957701873034239}, {"id": 363, "seek": 260848, "start": 2625.48, "end": 2630.48, "text": " One of them is that you can kind of think of this C as something like a graph.", "tokens": [51214, 1485, 295, 552, 307, 300, 291, 393, 733, 295, 519, 295, 341, 383, 382, 746, 411, 257, 4295, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08935687655494326, "compression_ratio": 1.9045226130653266, "no_speech_prob": 0.006957701873034239}, {"id": 364, "seek": 260848, "start": 2630.48, "end": 2637.48, "text": " OK, we've kind of injecting this vertex and as a source or a target of this edge.", "tokens": [51464, 2264, 11, 321, 600, 733, 295, 10711, 278, 341, 28162, 293, 382, 257, 4009, 420, 257, 3779, 295, 341, 4691, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08935687655494326, "compression_ratio": 1.9045226130653266, "no_speech_prob": 0.006957701873034239}, {"id": 365, "seek": 263748, "start": 2637.48, "end": 2641.48, "text": " But then when we do its Freco completion, we get all of the graphs.", "tokens": [50364, 583, 550, 562, 321, 360, 1080, 6142, 1291, 19372, 11, 321, 483, 439, 295, 264, 24877, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09822162362032158, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.0014477221993729472}, {"id": 366, "seek": 263748, "start": 2641.48, "end": 2651.48, "text": " And in a way, you can kind of think of that as making all graphs by starting with something basic and sticking things together.", "tokens": [50564, 400, 294, 257, 636, 11, 291, 393, 733, 295, 519, 295, 300, 382, 1455, 439, 24877, 538, 2891, 365, 746, 3875, 293, 13465, 721, 1214, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09822162362032158, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.0014477221993729472}, {"id": 367, "seek": 263748, "start": 2651.48, "end": 2653.48, "text": " Less hand wavy.", "tokens": [51064, 18649, 1011, 261, 15498, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09822162362032158, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.0014477221993729472}, {"id": 368, "seek": 263748, "start": 2653.48, "end": 2665.48, "text": " Well, we can see that this Yonita embedding is basically injecting this sort of basic structure that kind of lies behind all graphs", "tokens": [51164, 1042, 11, 321, 393, 536, 300, 341, 398, 266, 2786, 12240, 3584, 307, 1936, 10711, 278, 341, 1333, 295, 3875, 3877, 300, 733, 295, 9134, 2261, 439, 24877, 51764], "temperature": 0.0, "avg_logprob": -0.09822162362032158, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.0014477221993729472}, {"id": 369, "seek": 266548, "start": 2665.48, "end": 2672.48, "text": " into the category of graphs as a sort of full subcategory of the category of graphs.", "tokens": [50364, 666, 264, 7719, 295, 24877, 382, 257, 1333, 295, 1577, 1422, 66, 48701, 295, 264, 7719, 295, 24877, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13211322360568575, "compression_ratio": 1.8271028037383177, "no_speech_prob": 0.010545083321630955}, {"id": 370, "seek": 266548, "start": 2672.48, "end": 2677.48, "text": " Actually, the full subcategory, which is on these kind of home functors.", "tokens": [50714, 5135, 11, 264, 1577, 1422, 66, 48701, 11, 597, 307, 322, 613, 733, 295, 1280, 1019, 5547, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13211322360568575, "compression_ratio": 1.8271028037383177, "no_speech_prob": 0.010545083321630955}, {"id": 371, "seek": 266548, "start": 2677.48, "end": 2682.48, "text": " So I sometimes wonder if our universe is similarly constructed.", "tokens": [50964, 407, 286, 2171, 2441, 498, 527, 6445, 307, 14138, 17083, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13211322360568575, "compression_ratio": 1.8271028037383177, "no_speech_prob": 0.010545083321630955}, {"id": 372, "seek": 266548, "start": 2682.48, "end": 2694.48, "text": " If there's some kind of a category C that represents the way that all of the elementary particles in our universe interact and somehow that's embedded into our universe.", "tokens": [51214, 759, 456, 311, 512, 733, 295, 257, 7719, 383, 300, 8855, 264, 636, 300, 439, 295, 264, 16429, 10007, 294, 527, 6445, 4648, 293, 6063, 300, 311, 16741, 666, 527, 6445, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13211322360568575, "compression_ratio": 1.8271028037383177, "no_speech_prob": 0.010545083321630955}, {"id": 373, "seek": 269448, "start": 2694.48, "end": 2705.48, "text": " All of the other structures that we have in our universe are sort of, you know, made out of those elementary bits in some kind of a free way.", "tokens": [50364, 1057, 295, 264, 661, 9227, 300, 321, 362, 294, 527, 6445, 366, 1333, 295, 11, 291, 458, 11, 1027, 484, 295, 729, 16429, 9239, 294, 512, 733, 295, 257, 1737, 636, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09454029202461242, "compression_ratio": 1.62, "no_speech_prob": 0.0024278154596686363}, {"id": 374, "seek": 269448, "start": 2705.48, "end": 2718.48, "text": " But that aside, the point here is that we're looking at some kind of a universal construction which gives us this kind of Yonita embedding.", "tokens": [50914, 583, 300, 7359, 11, 264, 935, 510, 307, 300, 321, 434, 1237, 412, 512, 733, 295, 257, 11455, 6435, 597, 2709, 505, 341, 733, 295, 398, 266, 2786, 12240, 3584, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09454029202461242, "compression_ratio": 1.62, "no_speech_prob": 0.0024278154596686363}, {"id": 375, "seek": 269448, "start": 2718.48, "end": 2721.48, "text": " And this is called the free co completion.", "tokens": [51564, 400, 341, 307, 1219, 264, 1737, 598, 19372, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09454029202461242, "compression_ratio": 1.62, "no_speech_prob": 0.0024278154596686363}, {"id": 376, "seek": 272148, "start": 2722.48, "end": 2738.48, "text": " So again, just to say it briefly, the hand wavy idea between a free co completion is that we take a category C and then we sort of freely add all co limits to it in some sense.", "tokens": [50414, 407, 797, 11, 445, 281, 584, 309, 10515, 11, 264, 1011, 261, 15498, 1558, 1296, 257, 1737, 598, 19372, 307, 300, 321, 747, 257, 7719, 383, 293, 550, 321, 1333, 295, 16433, 909, 439, 598, 10406, 281, 309, 294, 512, 2020, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08892878090463034, "compression_ratio": 1.6804123711340206, "no_speech_prob": 0.005618087016046047}, {"id": 377, "seek": 272148, "start": 2738.48, "end": 2750.48, "text": " We sort of take the bits of C and we glue them together and sort of freely produce and make a structure in a kind of free way that has all co limits.", "tokens": [51214, 492, 1333, 295, 747, 264, 9239, 295, 383, 293, 321, 8998, 552, 1214, 293, 1333, 295, 16433, 5258, 293, 652, 257, 3877, 294, 257, 733, 295, 1737, 636, 300, 575, 439, 598, 10406, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08892878090463034, "compression_ratio": 1.6804123711340206, "no_speech_prob": 0.005618087016046047}, {"id": 378, "seek": 275048, "start": 2751.48, "end": 2764.48, "text": " Another example we can look at for free co completion is the trivial category one, the category that just has one object and the only arrow is the identity arrow.", "tokens": [50414, 3996, 1365, 321, 393, 574, 412, 337, 1737, 598, 19372, 307, 264, 26703, 7719, 472, 11, 264, 7719, 300, 445, 575, 472, 2657, 293, 264, 787, 11610, 307, 264, 6575, 11610, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06063193003336589, "compression_ratio": 1.681081081081081, "no_speech_prob": 0.0016212902264669538}, {"id": 379, "seek": 275048, "start": 2764.48, "end": 2771.48, "text": " In that case, again, we can consider the free co completion of that.", "tokens": [51064, 682, 300, 1389, 11, 797, 11, 321, 393, 1949, 264, 1737, 598, 19372, 295, 300, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06063193003336589, "compression_ratio": 1.681081081081081, "no_speech_prob": 0.0016212902264669538}, {"id": 380, "seek": 275048, "start": 2771.48, "end": 2777.48, "text": " And you see that that's just going to be isomorphic to the category set itself.", "tokens": [51414, 400, 291, 536, 300, 300, 311, 445, 516, 281, 312, 307, 32702, 299, 281, 264, 7719, 992, 2564, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06063193003336589, "compression_ratio": 1.681081081081081, "no_speech_prob": 0.0016212902264669538}, {"id": 381, "seek": 277748, "start": 2777.48, "end": 2794.48, "text": " Now, what this reminds me of is the idea that we can make all sets by starting with a kind of singleton and then doing things like co products and repeatedly adding this singleton.", "tokens": [50364, 823, 11, 437, 341, 12025, 385, 295, 307, 264, 1558, 300, 321, 393, 652, 439, 6352, 538, 2891, 365, 257, 733, 295, 1522, 14806, 293, 550, 884, 721, 411, 598, 3383, 293, 18227, 5127, 341, 1522, 14806, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07778554176216695, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.006682829465717077}, {"id": 382, "seek": 277748, "start": 2794.48, "end": 2801.48, "text": " And if we have our ability to do injections and whatnot, then we can get all of the structure of set.", "tokens": [51214, 400, 498, 321, 362, 527, 3485, 281, 360, 47178, 293, 25882, 11, 550, 321, 393, 483, 439, 295, 264, 3877, 295, 992, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07778554176216695, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.006682829465717077}, {"id": 383, "seek": 280148, "start": 2801.48, "end": 2804.48, "text": " Okay, so I think that's enough hand waving.", "tokens": [50364, 1033, 11, 370, 286, 519, 300, 311, 1547, 1011, 35347, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09473347663879395, "compression_ratio": 1.4049079754601228, "no_speech_prob": 0.0046071819961071014}, {"id": 384, "seek": 280148, "start": 2804.48, "end": 2812.48, "text": " Let's actually look at the kind of universal property that this free co completion has.", "tokens": [50514, 961, 311, 767, 574, 412, 264, 733, 295, 11455, 4707, 300, 341, 1737, 598, 19372, 575, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09473347663879395, "compression_ratio": 1.4049079754601228, "no_speech_prob": 0.0046071819961071014}, {"id": 385, "seek": 280148, "start": 2812.48, "end": 2824.48, "text": " So recall that we have this category cat, which has objects as categories and arrows as functors.", "tokens": [50914, 407, 9901, 300, 321, 362, 341, 7719, 3857, 11, 597, 575, 6565, 382, 10479, 293, 19669, 382, 1019, 5547, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09473347663879395, "compression_ratio": 1.4049079754601228, "no_speech_prob": 0.0046071819961071014}, {"id": 386, "seek": 282448, "start": 2825.48, "end": 2827.48, "text": " Now there is a", "tokens": [50414, 823, 456, 307, 257, 50514], "temperature": 0.0, "avg_logprob": -0.11845935559740253, "compression_ratio": 1.496124031007752, "no_speech_prob": 0.0064829690381884575}, {"id": 387, "seek": 282448, "start": 2830.48, "end": 2837.48, "text": " Now what we can do is we can think just about the co complete categories.", "tokens": [50664, 823, 437, 321, 393, 360, 307, 321, 393, 519, 445, 466, 264, 598, 3566, 10479, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11845935559740253, "compression_ratio": 1.496124031007752, "no_speech_prob": 0.0064829690381884575}, {"id": 388, "seek": 282448, "start": 2844.48, "end": 2852.48, "text": " Okay, so they're going to be the categories that are co complete that have all of these small co limits.", "tokens": [51364, 1033, 11, 370, 436, 434, 516, 281, 312, 264, 10479, 300, 366, 598, 3566, 300, 362, 439, 295, 613, 1359, 598, 10406, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11845935559740253, "compression_ratio": 1.496124031007752, "no_speech_prob": 0.0064829690381884575}, {"id": 389, "seek": 285248, "start": 2852.48, "end": 2861.48, "text": " And we can just restrict our attention to the objects of cat, which correspond to these co complete categories.", "tokens": [50364, 400, 321, 393, 445, 7694, 527, 3202, 281, 264, 6565, 295, 3857, 11, 597, 6805, 281, 613, 598, 3566, 10479, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08054910880931909, "compression_ratio": 1.7730061349693251, "no_speech_prob": 0.001071614446118474}, {"id": 390, "seek": 285248, "start": 2861.48, "end": 2869.48, "text": " And then we can also restrict our attention to the arrows of cats, which preserve co limits.", "tokens": [50814, 400, 550, 321, 393, 611, 7694, 527, 3202, 281, 264, 19669, 295, 11111, 11, 597, 15665, 598, 10406, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08054910880931909, "compression_ratio": 1.7730061349693251, "no_speech_prob": 0.001071614446118474}, {"id": 391, "seek": 285248, "start": 2869.48, "end": 2877.48, "text": " Okay, so then we can think of this sub category of cats that we'll call cat co comp.", "tokens": [51214, 1033, 11, 370, 550, 321, 393, 519, 295, 341, 1422, 7719, 295, 11111, 300, 321, 603, 818, 3857, 598, 715, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08054910880931909, "compression_ratio": 1.7730061349693251, "no_speech_prob": 0.001071614446118474}, {"id": 392, "seek": 287748, "start": 2877.48, "end": 2884.48, "text": " So basically cat co comp here is it's going to be a sub category of cats.", "tokens": [50364, 407, 1936, 3857, 598, 715, 510, 307, 309, 311, 516, 281, 312, 257, 1422, 7719, 295, 11111, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13210678100585938, "compression_ratio": 1.3644859813084111, "no_speech_prob": 0.0013392759719863534}, {"id": 393, "seek": 287748, "start": 2884.48, "end": 2894.48, "text": " The objects it has are going to be the categories which are co complete.", "tokens": [50714, 440, 6565, 309, 575, 366, 516, 281, 312, 264, 10479, 597, 366, 598, 3566, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13210678100585938, "compression_ratio": 1.3644859813084111, "no_speech_prob": 0.0013392759719863534}, {"id": 394, "seek": 289448, "start": 2894.48, "end": 2907.48, "text": " So the ones which have all small co limits or the co limits of each small diagram, if you like.", "tokens": [50364, 407, 264, 2306, 597, 362, 439, 1359, 598, 10406, 420, 264, 598, 10406, 295, 1184, 1359, 10686, 11, 498, 291, 411, 13, 51014], "temperature": 0.0, "avg_logprob": -0.20939881461007254, "compression_ratio": 1.5461538461538462, "no_speech_prob": 0.1613347977399826}, {"id": 395, "seek": 289448, "start": 2907.48, "end": 2923.48, "text": " And then the arrows of this thing here are going to be the functors which preserve those small co limits.", "tokens": [51014, 400, 550, 264, 19669, 295, 341, 551, 510, 366, 516, 281, 312, 264, 1019, 5547, 597, 15665, 729, 1359, 598, 10406, 13, 51814], "temperature": 0.0, "avg_logprob": -0.20939881461007254, "compression_ratio": 1.5461538461538462, "no_speech_prob": 0.1613347977399826}, {"id": 396, "seek": 292448, "start": 2925.48, "end": 2930.48, "text": " So to say it more briefly cat co comp is the foot.", "tokens": [50414, 407, 281, 584, 309, 544, 10515, 3857, 598, 715, 307, 264, 2671, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14535216987133026, "compression_ratio": 1.9154929577464788, "no_speech_prob": 0.0006063969922251999}, {"id": 397, "seek": 292448, "start": 2930.48, "end": 2949.48, "text": " So to say it more briefly cat co comp is the sub category of cat on the objects which are the co complete categories and the arrows which are the co continuous functors that the functors that preserve the small co limits.", "tokens": [50664, 407, 281, 584, 309, 544, 10515, 3857, 598, 715, 307, 264, 1422, 7719, 295, 3857, 322, 264, 6565, 597, 366, 264, 598, 3566, 10479, 293, 264, 19669, 597, 366, 264, 598, 10957, 1019, 5547, 300, 264, 1019, 5547, 300, 15665, 264, 1359, 598, 10406, 13, 51614], "temperature": 0.0, "avg_logprob": -0.14535216987133026, "compression_ratio": 1.9154929577464788, "no_speech_prob": 0.0006063969922251999}, {"id": 398, "seek": 294948, "start": 2950.48, "end": 2955.48, "text": " So basically this is the stuff that plays nicely with co limits.", "tokens": [50414, 407, 1936, 341, 307, 264, 1507, 300, 5749, 9594, 365, 598, 10406, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1892542839050293, "compression_ratio": 1.2478632478632479, "no_speech_prob": 0.003702430287376046}, {"id": 399, "seek": 294948, "start": 2955.48, "end": 2969.48, "text": " Now there's clearly going to be an inclusion functor I from cat co comp into cat.", "tokens": [50664, 823, 456, 311, 4448, 516, 281, 312, 364, 15874, 1019, 1672, 286, 490, 3857, 598, 715, 666, 3857, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1892542839050293, "compression_ratio": 1.2478632478632479, "no_speech_prob": 0.003702430287376046}, {"id": 400, "seek": 296948, "start": 2969.48, "end": 2981.48, "text": " And it's this that we're going to use to find our kind of universal property, this kind of universal property behind free co completion.", "tokens": [50364, 400, 309, 311, 341, 300, 321, 434, 516, 281, 764, 281, 915, 527, 733, 295, 11455, 4707, 11, 341, 733, 295, 11455, 4707, 2261, 1737, 598, 19372, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12795211422827937, "compression_ratio": 1.5266666666666666, "no_speech_prob": 0.0635337084531784}, {"id": 401, "seek": 296948, "start": 2981.48, "end": 2984.48, "text": " So okay, what's the big idea?", "tokens": [50964, 407, 1392, 11, 437, 311, 264, 955, 1558, 30, 51114], "temperature": 0.0, "avg_logprob": -0.12795211422827937, "compression_ratio": 1.5266666666666666, "no_speech_prob": 0.0635337084531784}, {"id": 402, "seek": 296948, "start": 2984.48, "end": 2991.48, "text": " Well, the big idea is that in cats, let's pick any category C.", "tokens": [51114, 1042, 11, 264, 955, 1558, 307, 300, 294, 11111, 11, 718, 311, 1888, 604, 7719, 383, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12795211422827937, "compression_ratio": 1.5266666666666666, "no_speech_prob": 0.0635337084531784}, {"id": 403, "seek": 299148, "start": 2991.48, "end": 3004.48, "text": " And let's ask, is there an initial morphism from C to I, or you know, we could also say there are universal morphism from C to I, it means the same thing.", "tokens": [50364, 400, 718, 311, 1029, 11, 307, 456, 364, 5883, 25778, 1434, 490, 383, 281, 286, 11, 420, 291, 458, 11, 321, 727, 611, 584, 456, 366, 11455, 25778, 1434, 490, 383, 281, 286, 11, 309, 1355, 264, 912, 551, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12492693795098199, "compression_ratio": 1.5592105263157894, "no_speech_prob": 0.03340688347816467}, {"id": 404, "seek": 299148, "start": 3004.48, "end": 3011.48, "text": " And what it means is that we're looking for some kind of a universal construction.", "tokens": [51014, 400, 437, 309, 1355, 307, 300, 321, 434, 1237, 337, 512, 733, 295, 257, 11455, 6435, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12492693795098199, "compression_ratio": 1.5592105263157894, "no_speech_prob": 0.03340688347816467}, {"id": 405, "seek": 301148, "start": 3012.48, "end": 3015.48, "text": " And it turns out that there is such a thing.", "tokens": [50414, 400, 309, 4523, 484, 300, 456, 307, 1270, 257, 551, 13, 50564], "temperature": 0.0, "avg_logprob": -0.14086385206742721, "compression_ratio": 1.5158730158730158, "no_speech_prob": 0.02100411430001259}, {"id": 406, "seek": 301148, "start": 3015.48, "end": 3020.48, "text": " And what it is is the free co completion of C.", "tokens": [50564, 400, 437, 309, 307, 307, 264, 1737, 598, 19372, 295, 383, 13, 50814], "temperature": 0.0, "avg_logprob": -0.14086385206742721, "compression_ratio": 1.5158730158730158, "no_speech_prob": 0.02100411430001259}, {"id": 407, "seek": 301148, "start": 3020.48, "end": 3035.48, "text": " And what it consists of is this category of pre sheaves, the category of functors from C up to set.", "tokens": [50814, 400, 437, 309, 14689, 295, 307, 341, 7719, 295, 659, 750, 5423, 11, 264, 7719, 295, 1019, 5547, 490, 383, 493, 281, 992, 13, 51564], "temperature": 0.0, "avg_logprob": -0.14086385206742721, "compression_ratio": 1.5158730158730158, "no_speech_prob": 0.02100411430001259}, {"id": 408, "seek": 303548, "start": 3035.48, "end": 3043.48, "text": " And also, there's going to be this arrow in this right hand side category.", "tokens": [50364, 400, 611, 11, 456, 311, 516, 281, 312, 341, 11610, 294, 341, 558, 1011, 1252, 7719, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12859132554796007, "compression_ratio": 1.9054054054054055, "no_speech_prob": 0.03344394266605377}, {"id": 409, "seek": 303548, "start": 3043.48, "end": 3051.48, "text": " I mean, technically it's going to go from I of this category of pre sheaves.", "tokens": [50764, 286, 914, 11, 12120, 309, 311, 516, 281, 352, 490, 286, 295, 341, 7719, 295, 659, 750, 5423, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12859132554796007, "compression_ratio": 1.9054054054054055, "no_speech_prob": 0.03344394266605377}, {"id": 410, "seek": 303548, "start": 3051.48, "end": 3055.48, "text": " I mean, technically it's going to go to I of this category of pre sheaves.", "tokens": [51164, 286, 914, 11, 12120, 309, 311, 516, 281, 352, 281, 286, 295, 341, 7719, 295, 659, 750, 5423, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12859132554796007, "compression_ratio": 1.9054054054054055, "no_speech_prob": 0.03344394266605377}, {"id": 411, "seek": 303548, "start": 3055.48, "end": 3059.48, "text": " And that's going to be our, you know, need a embedding.", "tokens": [51364, 400, 300, 311, 516, 281, 312, 527, 11, 291, 458, 11, 643, 257, 12240, 3584, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12859132554796007, "compression_ratio": 1.9054054054054055, "no_speech_prob": 0.03344394266605377}, {"id": 412, "seek": 305948, "start": 3059.48, "end": 3067.48, "text": " Now, often I might just rub out that I because I is just an inclusion functor doesn't really affect the nature of the objects.", "tokens": [50364, 823, 11, 2049, 286, 1062, 445, 5915, 484, 300, 286, 570, 286, 307, 445, 364, 15874, 1019, 1672, 1177, 380, 534, 3345, 264, 3687, 295, 264, 6565, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11046787361045937, "compression_ratio": 1.5435897435897437, "no_speech_prob": 0.03669831156730652}, {"id": 413, "seek": 305948, "start": 3067.48, "end": 3073.48, "text": " Sometimes there's sort of no point writing it, but I'll write it for now.", "tokens": [50764, 4803, 456, 311, 1333, 295, 572, 935, 3579, 309, 11, 457, 286, 603, 2464, 309, 337, 586, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11046787361045937, "compression_ratio": 1.5435897435897437, "no_speech_prob": 0.03669831156730652}, {"id": 414, "seek": 305948, "start": 3073.48, "end": 3087.48, "text": " So the point is that this together with this is going to be forming an initial morphism from C to I.", "tokens": [51064, 407, 264, 935, 307, 300, 341, 1214, 365, 341, 307, 516, 281, 312, 15745, 364, 5883, 25778, 1434, 490, 383, 281, 286, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11046787361045937, "compression_ratio": 1.5435897435897437, "no_speech_prob": 0.03669831156730652}, {"id": 415, "seek": 308748, "start": 3087.48, "end": 3090.48, "text": " Now, let me remind you what that means.", "tokens": [50364, 823, 11, 718, 385, 4160, 291, 437, 300, 1355, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11957214795626127, "compression_ratio": 1.4150943396226414, "no_speech_prob": 0.0011330064153298736}, {"id": 416, "seek": 308748, "start": 3090.48, "end": 3096.48, "text": " What it means is that for any object E over here on the left.", "tokens": [50514, 708, 309, 1355, 307, 300, 337, 604, 2657, 462, 670, 510, 322, 264, 1411, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11957214795626127, "compression_ratio": 1.4150943396226414, "no_speech_prob": 0.0011330064153298736}, {"id": 417, "seek": 308748, "start": 3096.48, "end": 3101.48, "text": " So he's just going to be any old co complete category.", "tokens": [50814, 407, 415, 311, 445, 516, 281, 312, 604, 1331, 598, 3566, 7719, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11957214795626127, "compression_ratio": 1.4150943396226414, "no_speech_prob": 0.0011330064153298736}, {"id": 418, "seek": 308748, "start": 3101.48, "end": 3110.48, "text": " Well, if we have some arrow, which sort of looks like why over here.", "tokens": [51064, 1042, 11, 498, 321, 362, 512, 11610, 11, 597, 1333, 295, 1542, 411, 983, 670, 510, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11957214795626127, "compression_ratio": 1.4150943396226414, "no_speech_prob": 0.0011330064153298736}, {"id": 419, "seek": 311048, "start": 3110.48, "end": 3112.48, "text": " So this is just a kind of candidate arrow.", "tokens": [50364, 407, 341, 307, 445, 257, 733, 295, 11532, 11610, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09643316268920898, "compression_ratio": 1.5543478260869565, "no_speech_prob": 0.02432815358042717}, {"id": 420, "seek": 311048, "start": 3112.48, "end": 3117.48, "text": " It's going to be an arrow F from C to I of E.", "tokens": [50464, 467, 311, 516, 281, 312, 364, 11610, 479, 490, 383, 281, 286, 295, 462, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09643316268920898, "compression_ratio": 1.5543478260869565, "no_speech_prob": 0.02432815358042717}, {"id": 421, "seek": 311048, "start": 3117.48, "end": 3126.48, "text": " Well, there's going to be this sort of corresponding intermediary arrow, which we're going to call F hat.", "tokens": [50714, 1042, 11, 456, 311, 516, 281, 312, 341, 1333, 295, 11760, 15184, 822, 11610, 11, 597, 321, 434, 516, 281, 818, 479, 2385, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09643316268920898, "compression_ratio": 1.5543478260869565, "no_speech_prob": 0.02432815358042717}, {"id": 422, "seek": 311048, "start": 3126.48, "end": 3136.48, "text": " And that has the feature that when we do I on it, it's going to make this triangle commute.", "tokens": [51164, 400, 300, 575, 264, 4111, 300, 562, 321, 360, 286, 322, 309, 11, 309, 311, 516, 281, 652, 341, 13369, 36750, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09643316268920898, "compression_ratio": 1.5543478260869565, "no_speech_prob": 0.02432815358042717}, {"id": 423, "seek": 313648, "start": 3136.48, "end": 3142.48, "text": " All of this just comes from the definition of an initial or universal morphism.", "tokens": [50364, 1057, 295, 341, 445, 1487, 490, 264, 7123, 295, 364, 5883, 420, 11455, 25778, 1434, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06544494001488936, "compression_ratio": 1.5434782608695652, "no_speech_prob": 0.01796303316950798}, {"id": 424, "seek": 313648, "start": 3142.48, "end": 3150.48, "text": " Now, like, there's a lot of things going on here, a lot of structures just appeared at once.", "tokens": [50664, 823, 11, 411, 11, 456, 311, 257, 688, 295, 721, 516, 322, 510, 11, 257, 688, 295, 9227, 445, 8516, 412, 1564, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06544494001488936, "compression_ratio": 1.5434782608695652, "no_speech_prob": 0.01796303316950798}, {"id": 425, "seek": 313648, "start": 3150.48, "end": 3154.48, "text": " Let me just point out a couple of things that I'll come back to later.", "tokens": [51064, 961, 385, 445, 935, 484, 257, 1916, 295, 721, 300, 286, 603, 808, 646, 281, 1780, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06544494001488936, "compression_ratio": 1.5434782608695652, "no_speech_prob": 0.01796303316950798}, {"id": 426, "seek": 313648, "start": 3154.48, "end": 3158.48, "text": " Firstly, I is just an inclusion functor.", "tokens": [51264, 20042, 11, 286, 307, 445, 364, 15874, 1019, 1672, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06544494001488936, "compression_ratio": 1.5434782608695652, "no_speech_prob": 0.01796303316950798}, {"id": 427, "seek": 315848, "start": 3158.48, "end": 3166.48, "text": " So in a sense, we could just kind of rub out these eyes here and it wouldn't really change the meaning too much.", "tokens": [50364, 407, 294, 257, 2020, 11, 321, 727, 445, 733, 295, 5915, 484, 613, 2575, 510, 293, 309, 2759, 380, 534, 1319, 264, 3620, 886, 709, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09392366101664881, "compression_ratio": 1.3952095808383234, "no_speech_prob": 0.0158943273127079}, {"id": 428, "seek": 315848, "start": 3166.48, "end": 3173.48, "text": " And now does this structure remind you of anything that we've been looking at?", "tokens": [50764, 400, 586, 775, 341, 3877, 4160, 291, 295, 1340, 300, 321, 600, 668, 1237, 412, 30, 51114], "temperature": 0.0, "avg_logprob": -0.09392366101664881, "compression_ratio": 1.3952095808383234, "no_speech_prob": 0.0158943273127079}, {"id": 429, "seek": 315848, "start": 3173.48, "end": 3181.48, "text": " What about if I wrote this as Lan Y of F?", "tokens": [51114, 708, 466, 498, 286, 4114, 341, 382, 17482, 398, 295, 479, 30, 51514], "temperature": 0.0, "avg_logprob": -0.09392366101664881, "compression_ratio": 1.3952095808383234, "no_speech_prob": 0.0158943273127079}, {"id": 430, "seek": 318148, "start": 3181.48, "end": 3189.48, "text": " Do you see that this is the same pattern as we've been looking at with our can extensions?", "tokens": [50364, 1144, 291, 536, 300, 341, 307, 264, 912, 5102, 382, 321, 600, 668, 1237, 412, 365, 527, 393, 25129, 30, 50764], "temperature": 0.0, "avg_logprob": -0.11897070366039611, "compression_ratio": 1.430232558139535, "no_speech_prob": 0.06356989592313766}, {"id": 431, "seek": 318148, "start": 3189.48, "end": 3192.48, "text": " In particular, this thing's fully faithful.", "tokens": [50764, 682, 1729, 11, 341, 551, 311, 4498, 17808, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11897070366039611, "compression_ratio": 1.430232558139535, "no_speech_prob": 0.06356989592313766}, {"id": 432, "seek": 318148, "start": 3192.48, "end": 3203.48, "text": " So this thing which has to fill out the triangle, this natural transformation eater can effectively be ignored.", "tokens": [50914, 407, 341, 551, 597, 575, 281, 2836, 484, 264, 13369, 11, 341, 3303, 9887, 40362, 393, 8659, 312, 19735, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11897070366039611, "compression_ratio": 1.430232558139535, "no_speech_prob": 0.06356989592313766}, {"id": 433, "seek": 320348, "start": 3203.48, "end": 3211.48, "text": " And so basically, you can see that this kind of idea of can extensions is appearing here.", "tokens": [50364, 400, 370, 1936, 11, 291, 393, 536, 300, 341, 733, 295, 1558, 295, 393, 25129, 307, 19870, 510, 13, 50764], "temperature": 0.0, "avg_logprob": -0.04585036262869835, "compression_ratio": 1.5625, "no_speech_prob": 0.026679594069719315}, {"id": 434, "seek": 320348, "start": 3211.48, "end": 3223.48, "text": " In particular, just this notion of these universal morphisms is basically forcing us to find a unique way to close this triangle here.", "tokens": [50764, 682, 1729, 11, 445, 341, 10710, 295, 613, 11455, 25778, 13539, 307, 1936, 19030, 505, 281, 915, 257, 3845, 636, 281, 1998, 341, 13369, 510, 13, 51364], "temperature": 0.0, "avg_logprob": -0.04585036262869835, "compression_ratio": 1.5625, "no_speech_prob": 0.026679594069719315}, {"id": 435, "seek": 320348, "start": 3223.48, "end": 3227.48, "text": " And this is exactly what can extensions do for us.", "tokens": [51364, 400, 341, 307, 2293, 437, 393, 25129, 360, 337, 505, 13, 51564], "temperature": 0.0, "avg_logprob": -0.04585036262869835, "compression_ratio": 1.5625, "no_speech_prob": 0.026679594069719315}, {"id": 436, "seek": 322748, "start": 3227.48, "end": 3240.48, "text": " So it turns out that not only is this category of pre-sheaves together with the yonida embedding giving us an initial morphism from C to I.", "tokens": [50364, 407, 309, 4523, 484, 300, 406, 787, 307, 341, 7719, 295, 659, 12, 9611, 5423, 1214, 365, 264, 288, 266, 2887, 12240, 3584, 2902, 505, 364, 5883, 25778, 1434, 490, 383, 281, 286, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13909214735031128, "compression_ratio": 1.4233128834355828, "no_speech_prob": 0.02793770469725132}, {"id": 437, "seek": 322748, "start": 3240.48, "end": 3251.48, "text": " But moreover, the left can extension of any functor F from C to some co-complete category E.", "tokens": [51014, 583, 544, 3570, 11, 264, 1411, 393, 10320, 295, 604, 1019, 1672, 479, 490, 383, 281, 512, 598, 12, 1112, 17220, 7719, 462, 13, 51564], "temperature": 0.0, "avg_logprob": -0.13909214735031128, "compression_ratio": 1.4233128834355828, "no_speech_prob": 0.02793770469725132}, {"id": 438, "seek": 325148, "start": 3251.48, "end": 3264.48, "text": " Well, the left can extension of such an F along the yonida embedding Y is exactly giving us this kind of intermediary arrow,", "tokens": [50364, 1042, 11, 264, 1411, 393, 10320, 295, 1270, 364, 479, 2051, 264, 288, 266, 2887, 12240, 3584, 398, 307, 2293, 2902, 505, 341, 733, 295, 15184, 822, 11610, 11, 51014], "temperature": 0.0, "avg_logprob": -0.09589195913738674, "compression_ratio": 1.5988700564971752, "no_speech_prob": 0.022911708801984787}, {"id": 439, "seek": 325148, "start": 3264.48, "end": 3273.48, "text": " which allows us to emulate our kind of candidate arrow F for being an initial morphism with respect to the real deal,", "tokens": [51014, 597, 4045, 505, 281, 45497, 527, 733, 295, 11532, 11610, 479, 337, 885, 364, 5883, 25778, 1434, 365, 3104, 281, 264, 957, 2028, 11, 51464], "temperature": 0.0, "avg_logprob": -0.09589195913738674, "compression_ratio": 1.5988700564971752, "no_speech_prob": 0.022911708801984787}, {"id": 440, "seek": 325148, "start": 3273.48, "end": 3276.48, "text": " which is of course the yonida embedding.", "tokens": [51464, 597, 307, 295, 1164, 264, 288, 266, 2887, 12240, 3584, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09589195913738674, "compression_ratio": 1.5988700564971752, "no_speech_prob": 0.022911708801984787}, {"id": 441, "seek": 327648, "start": 3276.48, "end": 3283.48, "text": " So you can see that there are lots of ideas, lots of very cool ideas kind of interacting here.", "tokens": [50364, 407, 291, 393, 536, 300, 456, 366, 3195, 295, 3487, 11, 3195, 295, 588, 1627, 3487, 733, 295, 18017, 510, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06390288998098935, "compression_ratio": 1.5089820359281436, "no_speech_prob": 0.04389738291501999}, {"id": 442, "seek": 327648, "start": 3283.48, "end": 3286.48, "text": " I mean, I'm probably going a bit too fast, right?", "tokens": [50714, 286, 914, 11, 286, 478, 1391, 516, 257, 857, 886, 2370, 11, 558, 30, 50864], "temperature": 0.0, "avg_logprob": -0.06390288998098935, "compression_ratio": 1.5089820359281436, "no_speech_prob": 0.04389738291501999}, {"id": 443, "seek": 327648, "start": 3286.48, "end": 3295.48, "text": " There's a lot of things coming out at once, but we're going to get more kind of familiarity with this idea.", "tokens": [50864, 821, 311, 257, 688, 295, 721, 1348, 484, 412, 1564, 11, 457, 321, 434, 516, 281, 483, 544, 733, 295, 49828, 365, 341, 1558, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06390288998098935, "compression_ratio": 1.5089820359281436, "no_speech_prob": 0.04389738291501999}, {"id": 444, "seek": 329548, "start": 3295.48, "end": 3314.48, "text": " But just to sort of finish explaining the gist of this, basically the point here is that when we have this category of pre-sheaves together with this yonida embedding,", "tokens": [50364, 583, 445, 281, 1333, 295, 2413, 13468, 264, 290, 468, 295, 341, 11, 1936, 264, 935, 510, 307, 300, 562, 321, 362, 341, 7719, 295, 659, 12, 9611, 5423, 1214, 365, 341, 288, 266, 2887, 12240, 3584, 11, 51314], "temperature": 0.0, "avg_logprob": -0.06955560466699433, "compression_ratio": 1.4, "no_speech_prob": 0.05404767021536827}, {"id": 445, "seek": 329548, "start": 3314.48, "end": 3318.48, "text": " that's giving us an initial morphism from C to I.", "tokens": [51314, 300, 311, 2902, 505, 364, 5883, 25778, 1434, 490, 383, 281, 286, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06955560466699433, "compression_ratio": 1.4, "no_speech_prob": 0.05404767021536827}, {"id": 446, "seek": 331848, "start": 3318.48, "end": 3330.48, "text": " Now, if you have a look at my video on representable functors, I talk about how this kind of phenomenon appears over and over again in category theory", "tokens": [50364, 823, 11, 498, 291, 362, 257, 574, 412, 452, 960, 322, 2906, 712, 1019, 5547, 11, 286, 751, 466, 577, 341, 733, 295, 14029, 7038, 670, 293, 670, 797, 294, 7719, 5261, 50964], "temperature": 0.0, "avg_logprob": -0.045072274548666816, "compression_ratio": 1.679245283018868, "no_speech_prob": 0.12237387150526047}, {"id": 447, "seek": 331848, "start": 3330.48, "end": 3335.48, "text": " and how there's several different perspectives to look at the same idea.", "tokens": [50964, 293, 577, 456, 311, 2940, 819, 16766, 281, 574, 412, 264, 912, 1558, 13, 51214], "temperature": 0.0, "avg_logprob": -0.045072274548666816, "compression_ratio": 1.679245283018868, "no_speech_prob": 0.12237387150526047}, {"id": 448, "seek": 331848, "start": 3335.48, "end": 3344.48, "text": " So another way to look at the same kind of happening is to say that this category of pre-sheaves together with this yonida embedding", "tokens": [51214, 407, 1071, 636, 281, 574, 412, 264, 912, 733, 295, 2737, 307, 281, 584, 300, 341, 7719, 295, 659, 12, 9611, 5423, 1214, 365, 341, 288, 266, 2887, 12240, 3584, 51664], "temperature": 0.0, "avg_logprob": -0.045072274548666816, "compression_ratio": 1.679245283018868, "no_speech_prob": 0.12237387150526047}, {"id": 449, "seek": 334448, "start": 3344.48, "end": 3352.48, "text": " is going to be an initial object of this comma category here, C slice I.", "tokens": [50364, 307, 516, 281, 312, 364, 5883, 2657, 295, 341, 22117, 7719, 510, 11, 383, 13153, 286, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09512989751754268, "compression_ratio": 1.484076433121019, "no_speech_prob": 0.02362457476556301}, {"id": 450, "seek": 334448, "start": 3352.48, "end": 3356.48, "text": " We could also write it like this and then it looks like a category of elements.", "tokens": [50764, 492, 727, 611, 2464, 309, 411, 341, 293, 550, 309, 1542, 411, 257, 7719, 295, 4959, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09512989751754268, "compression_ratio": 1.484076433121019, "no_speech_prob": 0.02362457476556301}, {"id": 451, "seek": 334448, "start": 3356.48, "end": 3364.48, "text": " Another way to look at this is that this thing here is a functor into set, okay?", "tokens": [50964, 3996, 636, 281, 574, 412, 341, 307, 300, 341, 551, 510, 307, 257, 1019, 1672, 666, 992, 11, 1392, 30, 51364], "temperature": 0.0, "avg_logprob": -0.09512989751754268, "compression_ratio": 1.484076433121019, "no_speech_prob": 0.02362457476556301}, {"id": 452, "seek": 336448, "start": 3364.48, "end": 3372.48, "text": " It's really a functor from this cat co-comp into set.", "tokens": [50364, 467, 311, 534, 257, 1019, 1672, 490, 341, 3857, 598, 12, 21541, 666, 992, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09865978558858236, "compression_ratio": 1.401360544217687, "no_speech_prob": 0.07680059969425201}, {"id": 453, "seek": 336448, "start": 3372.48, "end": 3389.48, "text": " And what the yonida embedding really is, is it's just going to be like an object or an element of this kind of set-valued functor applied to this input.", "tokens": [50764, 400, 437, 264, 288, 266, 2887, 12240, 3584, 534, 307, 11, 307, 309, 311, 445, 516, 281, 312, 411, 364, 2657, 420, 364, 4478, 295, 341, 733, 295, 992, 12, 3337, 5827, 1019, 1672, 6456, 281, 341, 4846, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09865978558858236, "compression_ratio": 1.401360544217687, "no_speech_prob": 0.07680059969425201}, {"id": 454, "seek": 338948, "start": 3389.48, "end": 3403.48, "text": " Okay, so when we do this functor on this object here of this category, we get this set and y is just going to be an object of this set.", "tokens": [50364, 1033, 11, 370, 562, 321, 360, 341, 1019, 1672, 322, 341, 2657, 510, 295, 341, 7719, 11, 321, 483, 341, 992, 293, 288, 307, 445, 516, 281, 312, 364, 2657, 295, 341, 992, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07450053186127634, "compression_ratio": 1.572289156626506, "no_speech_prob": 0.10207317769527435}, {"id": 455, "seek": 338948, "start": 3403.48, "end": 3414.48, "text": " And so we can apply the yonida lemma, which is telling us that the elements of this set correspond to natural transformations", "tokens": [51064, 400, 370, 321, 393, 3079, 264, 288, 266, 2887, 7495, 1696, 11, 597, 307, 3585, 505, 300, 264, 4959, 295, 341, 992, 6805, 281, 3303, 34852, 51614], "temperature": 0.0, "avg_logprob": -0.07450053186127634, "compression_ratio": 1.572289156626506, "no_speech_prob": 0.10207317769527435}, {"id": 456, "seek": 341448, "start": 3414.48, "end": 3420.48, "text": " into this functor here from the corresponding hon functor.", "tokens": [50364, 666, 341, 1019, 1672, 510, 490, 264, 11760, 2157, 1019, 1672, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09712545799486565, "compression_ratio": 1.6305732484076434, "no_speech_prob": 0.13824564218521118}, {"id": 457, "seek": 341448, "start": 3420.48, "end": 3425.48, "text": " And so this thing here is going to correspond to a natural transformation like this.", "tokens": [50664, 400, 370, 341, 551, 510, 307, 516, 281, 6805, 281, 257, 3303, 9887, 411, 341, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09712545799486565, "compression_ratio": 1.6305732484076434, "no_speech_prob": 0.13824564218521118}, {"id": 458, "seek": 341448, "start": 3425.48, "end": 3429.48, "text": " Turns out it's actually going to be a natural isomorphism.", "tokens": [50914, 29524, 484, 309, 311, 767, 516, 281, 312, 257, 3303, 307, 32702, 1434, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09712545799486565, "compression_ratio": 1.6305732484076434, "no_speech_prob": 0.13824564218521118}, {"id": 459, "seek": 341448, "start": 3429.48, "end": 3434.48, "text": " And so we get this, which is like a really cool idea.", "tokens": [51114, 400, 370, 321, 483, 341, 11, 597, 307, 411, 257, 534, 1627, 1558, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09712545799486565, "compression_ratio": 1.6305732484076434, "no_speech_prob": 0.13824564218521118}, {"id": 460, "seek": 343448, "start": 3434.48, "end": 3445.48, "text": " And just to sort of fill in this dummy variable here, what this is telling us is that if we pick a co-complete category E,", "tokens": [50364, 400, 445, 281, 1333, 295, 2836, 294, 341, 35064, 7006, 510, 11, 437, 341, 307, 3585, 505, 307, 300, 498, 321, 1888, 257, 598, 12, 1112, 17220, 7719, 462, 11, 50914], "temperature": 0.0, "avg_logprob": -0.07546349458916243, "compression_ratio": 1.5656565656565657, "no_speech_prob": 0.3841148316860199}, {"id": 461, "seek": 343448, "start": 3445.48, "end": 3460.48, "text": " then the co-continuous functors from this category of pre-sheves into E are going to be in one-to-one correspondence with the ordinary functors from C to E.", "tokens": [50914, 550, 264, 598, 12, 9000, 259, 12549, 1019, 5547, 490, 341, 7719, 295, 659, 12, 9611, 977, 666, 462, 366, 516, 281, 312, 294, 472, 12, 1353, 12, 546, 38135, 365, 264, 10547, 1019, 5547, 490, 383, 281, 462, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07546349458916243, "compression_ratio": 1.5656565656565657, "no_speech_prob": 0.3841148316860199}, {"id": 462, "seek": 343448, "start": 3460.48, "end": 3463.48, "text": " So this is a pretty cool idea.", "tokens": [51664, 407, 341, 307, 257, 1238, 1627, 1558, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07546349458916243, "compression_ratio": 1.5656565656565657, "no_speech_prob": 0.3841148316860199}, {"id": 463, "seek": 346348, "start": 3463.48, "end": 3468.48, "text": " And it's especially cool because we kind of already know how this works.", "tokens": [50364, 400, 309, 311, 2318, 1627, 570, 321, 733, 295, 1217, 458, 577, 341, 1985, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08046442812139337, "compression_ratio": 1.5637254901960784, "no_speech_prob": 0.00768710533156991}, {"id": 464, "seek": 346348, "start": 3468.48, "end": 3476.48, "text": " Okay, so if we have a category C and then we have something in this set here,", "tokens": [50614, 1033, 11, 370, 498, 321, 362, 257, 7719, 383, 293, 550, 321, 362, 746, 294, 341, 992, 510, 11, 51014], "temperature": 0.0, "avg_logprob": -0.08046442812139337, "compression_ratio": 1.5637254901960784, "no_speech_prob": 0.00768710533156991}, {"id": 465, "seek": 346348, "start": 3476.48, "end": 3482.48, "text": " so we can really just think of this as a functor F from C to this co-complete category E.", "tokens": [51014, 370, 321, 393, 534, 445, 519, 295, 341, 382, 257, 1019, 1672, 479, 490, 383, 281, 341, 598, 12, 1112, 17220, 7719, 462, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08046442812139337, "compression_ratio": 1.5637254901960784, "no_speech_prob": 0.00768710533156991}, {"id": 466, "seek": 346348, "start": 3482.48, "end": 3488.48, "text": " Well, how do we get the corresponding kind of co-continuous functor over here?", "tokens": [51314, 1042, 11, 577, 360, 321, 483, 264, 11760, 733, 295, 598, 12, 9000, 259, 12549, 1019, 1672, 670, 510, 30, 51614], "temperature": 0.0, "avg_logprob": -0.08046442812139337, "compression_ratio": 1.5637254901960784, "no_speech_prob": 0.00768710533156991}, {"id": 467, "seek": 348848, "start": 3488.48, "end": 3497.48, "text": " All we do is we go, okay, we've got a yonita embedding here from this into this category of pre-sheves.", "tokens": [50364, 1057, 321, 360, 307, 321, 352, 11, 1392, 11, 321, 600, 658, 257, 288, 266, 2786, 12240, 3584, 510, 490, 341, 666, 341, 7719, 295, 659, 12, 9611, 977, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2097501201906066, "compression_ratio": 1.412162162162162, "no_speech_prob": 0.04206623136997223}, {"id": 468, "seek": 348848, "start": 3497.48, "end": 3503.48, "text": " And now let's just do the can extension of F on Y.", "tokens": [50814, 400, 586, 718, 311, 445, 360, 264, 393, 10320, 295, 479, 322, 398, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2097501201906066, "compression_ratio": 1.412162162162162, "no_speech_prob": 0.04206623136997223}, {"id": 469, "seek": 348848, "start": 3503.48, "end": 3509.48, "text": " The left can extension, lan y F.", "tokens": [51114, 440, 1411, 393, 10320, 11, 9326, 288, 479, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2097501201906066, "compression_ratio": 1.412162162162162, "no_speech_prob": 0.04206623136997223}, {"id": 470, "seek": 348848, "start": 3509.48, "end": 3511.48, "text": " And there we have it.", "tokens": [51414, 400, 456, 321, 362, 309, 13, 51514], "temperature": 0.0, "avg_logprob": -0.2097501201906066, "compression_ratio": 1.412162162162162, "no_speech_prob": 0.04206623136997223}, {"id": 471, "seek": 351148, "start": 3511.48, "end": 3518.48, "text": " We have F over here and we have lan y F over here.", "tokens": [50364, 492, 362, 479, 670, 510, 293, 321, 362, 9326, 288, 479, 670, 510, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07653862057310162, "compression_ratio": 1.4683544303797469, "no_speech_prob": 0.013011450879275799}, {"id": 472, "seek": 351148, "start": 3518.48, "end": 3524.48, "text": " And so that's how this kind of isomorphism of Homsets works.", "tokens": [50714, 400, 370, 300, 311, 577, 341, 733, 295, 307, 32702, 1434, 295, 389, 4785, 1385, 1985, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07653862057310162, "compression_ratio": 1.4683544303797469, "no_speech_prob": 0.013011450879275799}, {"id": 473, "seek": 351148, "start": 3524.48, "end": 3537.48, "text": " We basically just get it using our can extensions and also provided that C is small, we have a formula for this lan y F.", "tokens": [51014, 492, 1936, 445, 483, 309, 1228, 527, 393, 25129, 293, 611, 5649, 300, 383, 307, 1359, 11, 321, 362, 257, 8513, 337, 341, 9326, 288, 479, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07653862057310162, "compression_ratio": 1.4683544303797469, "no_speech_prob": 0.013011450879275799}, {"id": 474, "seek": 353748, "start": 3537.48, "end": 3543.48, "text": " We've already seen a formula for it in terms of co-limits, so we can compute all this stuff.", "tokens": [50364, 492, 600, 1217, 1612, 257, 8513, 337, 309, 294, 2115, 295, 598, 12, 4197, 1208, 11, 370, 321, 393, 14722, 439, 341, 1507, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06622804204622905, "compression_ratio": 1.5339366515837105, "no_speech_prob": 0.0163528211414814}, {"id": 475, "seek": 353748, "start": 3543.48, "end": 3545.48, "text": " And that's very nice.", "tokens": [50664, 400, 300, 311, 588, 1481, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06622804204622905, "compression_ratio": 1.5339366515837105, "no_speech_prob": 0.0163528211414814}, {"id": 476, "seek": 353748, "start": 3545.48, "end": 3555.48, "text": " So now we can kind of come back down from the heavens for a moment and just think about a particular case to get some intuition.", "tokens": [50764, 407, 586, 321, 393, 733, 295, 808, 646, 760, 490, 264, 26011, 337, 257, 1623, 293, 445, 519, 466, 257, 1729, 1389, 281, 483, 512, 24002, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06622804204622905, "compression_ratio": 1.5339366515837105, "no_speech_prob": 0.0163528211414814}, {"id": 477, "seek": 353748, "start": 3555.48, "end": 3562.48, "text": " So we can say, well, what happens when C is one?", "tokens": [51264, 407, 321, 393, 584, 11, 731, 11, 437, 2314, 562, 383, 307, 472, 30, 51614], "temperature": 0.0, "avg_logprob": -0.06622804204622905, "compression_ratio": 1.5339366515837105, "no_speech_prob": 0.0163528211414814}, {"id": 478, "seek": 353748, "start": 3562.48, "end": 3565.48, "text": " So let's just have a look what we've got here.", "tokens": [51614, 407, 718, 311, 445, 362, 257, 574, 437, 321, 600, 658, 510, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06622804204622905, "compression_ratio": 1.5339366515837105, "no_speech_prob": 0.0163528211414814}, {"id": 479, "seek": 356548, "start": 3565.48, "end": 3571.48, "text": " We can rub out these eyes, as I say, they don't really change much.", "tokens": [50364, 492, 393, 5915, 484, 613, 2575, 11, 382, 286, 584, 11, 436, 500, 380, 534, 1319, 709, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08064482325599306, "compression_ratio": 1.5053191489361701, "no_speech_prob": 0.007675755303353071}, {"id": 480, "seek": 356548, "start": 3571.48, "end": 3573.48, "text": " We can put one in here.", "tokens": [50664, 492, 393, 829, 472, 294, 510, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08064482325599306, "compression_ratio": 1.5053191489361701, "no_speech_prob": 0.007675755303353071}, {"id": 481, "seek": 356548, "start": 3573.48, "end": 3579.48, "text": " This is just our trivial category.", "tokens": [50764, 639, 307, 445, 527, 26703, 7719, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08064482325599306, "compression_ratio": 1.5053191489361701, "no_speech_prob": 0.007675755303353071}, {"id": 482, "seek": 356548, "start": 3579.48, "end": 3586.48, "text": " And so what we've got going on on the right here is going to be a functor F from one to E.", "tokens": [51064, 400, 370, 437, 321, 600, 658, 516, 322, 322, 264, 558, 510, 307, 516, 281, 312, 257, 1019, 1672, 479, 490, 472, 281, 462, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08064482325599306, "compression_ratio": 1.5053191489361701, "no_speech_prob": 0.007675755303353071}, {"id": 483, "seek": 356548, "start": 3586.48, "end": 3591.48, "text": " So this is just going to basically be picking out an object of E.", "tokens": [51414, 407, 341, 307, 445, 516, 281, 1936, 312, 8867, 484, 364, 2657, 295, 462, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08064482325599306, "compression_ratio": 1.5053191489361701, "no_speech_prob": 0.007675755303353071}, {"id": 484, "seek": 359148, "start": 3591.48, "end": 3599.48, "text": " And we can see that this is going to correspond to a co-continuous functor of this kind of form.", "tokens": [50364, 400, 321, 393, 536, 300, 341, 307, 516, 281, 6805, 281, 257, 598, 12, 9000, 259, 12549, 1019, 1672, 295, 341, 733, 295, 1254, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08509694484242222, "compression_ratio": 1.445945945945946, "no_speech_prob": 0.009703622199594975}, {"id": 485, "seek": 359148, "start": 3599.48, "end": 3605.48, "text": " Well, the functors from one to set basically just look like sets.", "tokens": [50764, 1042, 11, 264, 1019, 5547, 490, 472, 281, 992, 1936, 445, 574, 411, 6352, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08509694484242222, "compression_ratio": 1.445945945945946, "no_speech_prob": 0.009703622199594975}, {"id": 486, "seek": 359148, "start": 3605.48, "end": 3608.48, "text": " So this is telling us something pretty interesting.", "tokens": [51064, 407, 341, 307, 3585, 505, 746, 1238, 1880, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08509694484242222, "compression_ratio": 1.445945945945946, "no_speech_prob": 0.009703622199594975}, {"id": 487, "seek": 360848, "start": 3608.48, "end": 3637.48, "text": " It's telling us that the objects E of this category, script E ought to be corresponding with these co-continuous functors", "tokens": [50364, 467, 311, 3585, 505, 300, 264, 6565, 462, 295, 341, 7719, 11, 5755, 462, 13416, 281, 312, 11760, 365, 613, 598, 12, 9000, 259, 12549, 1019, 5547, 51814], "temperature": 0.0, "avg_logprob": -0.14844509863084362, "compression_ratio": 1.174757281553398, "no_speech_prob": 0.45221054553985596}, {"id": 488, "seek": 363748, "start": 3637.48, "end": 3641.48, "text": " from set into E.", "tokens": [50364, 490, 992, 666, 462, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08223385589067327, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.044599730521440506}, {"id": 489, "seek": 363748, "start": 3641.48, "end": 3649.48, "text": " And I think that this is actually kind of intuitive, really, because think about it.", "tokens": [50564, 400, 286, 519, 300, 341, 307, 767, 733, 295, 21769, 11, 534, 11, 570, 519, 466, 309, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08223385589067327, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.044599730521440506}, {"id": 490, "seek": 363748, "start": 3649.48, "end": 3658.48, "text": " E is a co-complete category, and we want to do a co-continuous functor from set into E.", "tokens": [50964, 462, 307, 257, 598, 12, 1112, 17220, 7719, 11, 293, 321, 528, 281, 360, 257, 598, 12, 9000, 259, 12549, 1019, 1672, 490, 992, 666, 462, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08223385589067327, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.044599730521440506}, {"id": 491, "seek": 363748, "start": 3658.48, "end": 3661.48, "text": " So what's the first thing that we might ask ourselves?", "tokens": [51414, 407, 437, 311, 264, 700, 551, 300, 321, 1062, 1029, 4175, 30, 51564], "temperature": 0.0, "avg_logprob": -0.08223385589067327, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.044599730521440506}, {"id": 492, "seek": 363748, "start": 3661.48, "end": 3666.48, "text": " Well, where are we going to send the terminal object?", "tokens": [51564, 1042, 11, 689, 366, 321, 516, 281, 2845, 264, 14709, 2657, 30, 51814], "temperature": 0.0, "avg_logprob": -0.08223385589067327, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.044599730521440506}, {"id": 493, "seek": 366648, "start": 3666.48, "end": 3681.48, "text": " Well, this yoneda embedding is going to be sending our one here into the singleton set.", "tokens": [50364, 1042, 11, 341, 288, 266, 8801, 12240, 3584, 307, 516, 281, 312, 7750, 527, 472, 510, 666, 264, 1522, 14806, 992, 13, 51114], "temperature": 0.0, "avg_logprob": -0.16646991729736327, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.012043826282024384}, {"id": 494, "seek": 366648, "start": 3681.48, "end": 3691.48, "text": " So we better send the singleton set to this object E here, where F sends the object over here.", "tokens": [51114, 407, 321, 1101, 2845, 264, 1522, 14806, 992, 281, 341, 2657, 462, 510, 11, 689, 479, 14790, 264, 2657, 670, 510, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16646991729736327, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.012043826282024384}, {"id": 495, "seek": 369148, "start": 3692.48, "end": 3706.48, "text": " So the question we're asking here is how do we cook up this functor H, which corresponds to this object E?", "tokens": [50414, 407, 264, 1168, 321, 434, 3365, 510, 307, 577, 360, 321, 2543, 493, 341, 1019, 1672, 389, 11, 597, 23249, 281, 341, 2657, 462, 30, 51114], "temperature": 0.0, "avg_logprob": -0.10392642815907796, "compression_ratio": 1.4183006535947713, "no_speech_prob": 0.012223022989928722}, {"id": 496, "seek": 369148, "start": 3706.48, "end": 3716.48, "text": " And the answer is, well, we better send the singleton set to E.", "tokens": [51114, 400, 264, 1867, 307, 11, 731, 11, 321, 1101, 2845, 264, 1522, 14806, 992, 281, 462, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10392642815907796, "compression_ratio": 1.4183006535947713, "no_speech_prob": 0.012223022989928722}, {"id": 497, "seek": 369148, "start": 3716.48, "end": 3720.48, "text": " But then what about the set with two elements?", "tokens": [51614, 583, 550, 437, 466, 264, 992, 365, 732, 4959, 30, 51814], "temperature": 0.0, "avg_logprob": -0.10392642815907796, "compression_ratio": 1.4183006535947713, "no_speech_prob": 0.012223022989928722}, {"id": 498, "seek": 372048, "start": 3720.48, "end": 3723.48, "text": " Well, that's going to be the co-product of one and one.", "tokens": [50364, 1042, 11, 300, 311, 516, 281, 312, 264, 598, 12, 33244, 295, 472, 293, 472, 13, 50514], "temperature": 0.0, "avg_logprob": -0.055285522618244605, "compression_ratio": 1.7853658536585366, "no_speech_prob": 0.00609284033998847}, {"id": 499, "seek": 372048, "start": 3723.48, "end": 3735.48, "text": " And the fact that we're forcing H to be continuous means that this better look like H of one co-producted with H of one in E.", "tokens": [50514, 400, 264, 1186, 300, 321, 434, 19030, 389, 281, 312, 10957, 1355, 300, 341, 1101, 574, 411, 389, 295, 472, 598, 12, 33244, 292, 365, 389, 295, 472, 294, 462, 13, 51114], "temperature": 0.0, "avg_logprob": -0.055285522618244605, "compression_ratio": 1.7853658536585366, "no_speech_prob": 0.00609284033998847}, {"id": 500, "seek": 372048, "start": 3735.48, "end": 3749.48, "text": " And so you can see that the way that we're acting on all of the other sets, all of the other kind of objects over here is fixed by the way that we're dealing with the terminal objects.", "tokens": [51114, 400, 370, 291, 393, 536, 300, 264, 636, 300, 321, 434, 6577, 322, 439, 295, 264, 661, 6352, 11, 439, 295, 264, 661, 733, 295, 6565, 670, 510, 307, 6806, 538, 264, 636, 300, 321, 434, 6260, 365, 264, 14709, 6565, 13, 51814], "temperature": 0.0, "avg_logprob": -0.055285522618244605, "compression_ratio": 1.7853658536585366, "no_speech_prob": 0.00609284033998847}, {"id": 501, "seek": 374948, "start": 3749.48, "end": 3760.48, "text": " So you can see that just picking any objective E is really going to give us a sort of co-continuous functor H from set to E,", "tokens": [50364, 407, 291, 393, 536, 300, 445, 8867, 604, 10024, 462, 307, 534, 516, 281, 976, 505, 257, 1333, 295, 598, 12, 9000, 259, 12549, 1019, 1672, 389, 490, 992, 281, 462, 11, 50914], "temperature": 0.0, "avg_logprob": -0.07852440974751457, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.00721886707469821}, {"id": 502, "seek": 374948, "start": 3760.48, "end": 3769.48, "text": " because any such functors essentially having all its form fixed by the way that it operates upon the singleton set.", "tokens": [50914, 570, 604, 1270, 1019, 5547, 4476, 1419, 439, 1080, 1254, 6806, 538, 264, 636, 300, 309, 22577, 3564, 264, 1522, 14806, 992, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07852440974751457, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.00721886707469821}, {"id": 503, "seek": 376948, "start": 3770.48, "end": 3781.48, "text": " And you can kind of think of this intuitively as well, like co-completion is all about taking some initial structure and sticking the bits together in a kind of freeway.", "tokens": [50414, 400, 291, 393, 733, 295, 519, 295, 341, 46506, 382, 731, 11, 411, 598, 12, 1112, 14657, 313, 307, 439, 466, 1940, 512, 5883, 3877, 293, 13465, 264, 9239, 1214, 294, 257, 733, 295, 1737, 676, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06198428471883138, "compression_ratio": 1.8212765957446808, "no_speech_prob": 0.1341216117143631}, {"id": 504, "seek": 376948, "start": 3781.48, "end": 3789.48, "text": " So you're doing co-products where you're sort of doing disjoint unions and you're doing co-equalizers where you're sticking stuff together.", "tokens": [50964, 407, 291, 434, 884, 598, 12, 33244, 82, 689, 291, 434, 1333, 295, 884, 717, 48613, 24914, 293, 291, 434, 884, 598, 12, 12816, 304, 22525, 689, 291, 434, 13465, 1507, 1214, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06198428471883138, "compression_ratio": 1.8212765957446808, "no_speech_prob": 0.1341216117143631}, {"id": 505, "seek": 376948, "start": 3789.48, "end": 3797.48, "text": " And if you just start with one dot and you start doing that kind of stuff, you're going to get lots of different sets.", "tokens": [51364, 400, 498, 291, 445, 722, 365, 472, 5893, 293, 291, 722, 884, 300, 733, 295, 1507, 11, 291, 434, 516, 281, 483, 3195, 295, 819, 6352, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06198428471883138, "compression_ratio": 1.8212765957446808, "no_speech_prob": 0.1341216117143631}, {"id": 506, "seek": 379748, "start": 3797.48, "end": 3805.48, "text": " So it kind of seems to make sense to me that the free co-completion of a singleton set.", "tokens": [50364, 407, 309, 733, 295, 2544, 281, 652, 2020, 281, 385, 300, 264, 1737, 598, 12, 1112, 14657, 313, 295, 257, 1522, 14806, 992, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08064210668523261, "compression_ratio": 1.8645833333333333, "no_speech_prob": 0.03138820081949234}, {"id": 507, "seek": 379748, "start": 3805.48, "end": 3813.48, "text": " So it seems to kind of make sense to me that the free co-completion of a trivial category is set itself.", "tokens": [50764, 407, 309, 2544, 281, 733, 295, 652, 2020, 281, 385, 300, 264, 1737, 598, 12, 1112, 14657, 313, 295, 257, 26703, 7719, 307, 992, 2564, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08064210668523261, "compression_ratio": 1.8645833333333333, "no_speech_prob": 0.03138820081949234}, {"id": 508, "seek": 379748, "start": 3813.48, "end": 3816.48, "text": " But you know, this intuition goes much further.", "tokens": [51164, 583, 291, 458, 11, 341, 24002, 1709, 709, 3052, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08064210668523261, "compression_ratio": 1.8645833333333333, "no_speech_prob": 0.03138820081949234}, {"id": 509, "seek": 379748, "start": 3816.48, "end": 3824.48, "text": " Like if you think about your category of graphs, you can think of graphs as things that you get by sticking together.", "tokens": [51314, 1743, 498, 291, 519, 466, 428, 7719, 295, 24877, 11, 291, 393, 519, 295, 24877, 382, 721, 300, 291, 483, 538, 13465, 1214, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08064210668523261, "compression_ratio": 1.8645833333333333, "no_speech_prob": 0.03138820081949234}, {"id": 510, "seek": 382448, "start": 3824.48, "end": 3830.48, "text": " Your basic graphs, you know, like your single vertex and single edge.", "tokens": [50364, 2260, 3875, 24877, 11, 291, 458, 11, 411, 428, 2167, 28162, 293, 2167, 4691, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2003437086593273, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.011230099014937878}, {"id": 511, "seek": 382448, "start": 3830.48, "end": 3841.48, "text": " Again, with the category of simple as your sets, you know, you can make simplices or be simple as your complexes by sticking together these basic simplexes.", "tokens": [50664, 3764, 11, 365, 264, 7719, 295, 2199, 382, 428, 6352, 11, 291, 458, 11, 291, 393, 652, 6883, 1473, 420, 312, 2199, 382, 428, 43676, 538, 13465, 1214, 613, 3875, 2199, 47047, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2003437086593273, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.011230099014937878}, {"id": 512, "seek": 382448, "start": 3841.48, "end": 3847.48, "text": " And again, you know, it's described by a category of pre-sheaves.", "tokens": [51214, 400, 797, 11, 291, 458, 11, 309, 311, 7619, 538, 257, 7719, 295, 659, 12, 9611, 5423, 13, 51514], "temperature": 0.0, "avg_logprob": -0.2003437086593273, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.011230099014937878}, {"id": 513, "seek": 382448, "start": 3847.48, "end": 3850.48, "text": " There's co-completions of foot.", "tokens": [51514, 821, 311, 598, 12, 1112, 14657, 626, 295, 2671, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2003437086593273, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.011230099014937878}, {"id": 514, "seek": 385048, "start": 3850.48, "end": 3860.48, "text": " And yeah, this is like a really kind of important idea, which touches lots of things in mathematics.", "tokens": [50364, 400, 1338, 11, 341, 307, 411, 257, 534, 733, 295, 1021, 1558, 11, 597, 17431, 3195, 295, 721, 294, 18666, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07674492277750154, "compression_ratio": 1.5158371040723981, "no_speech_prob": 0.028835618868470192}, {"id": 515, "seek": 385048, "start": 3860.48, "end": 3861.48, "text": " OK, then.", "tokens": [50864, 2264, 11, 550, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07674492277750154, "compression_ratio": 1.5158371040723981, "no_speech_prob": 0.028835618868470192}, {"id": 516, "seek": 385048, "start": 3861.48, "end": 3872.48, "text": " So basically, most of the rest of the video is just looking at some very interesting applications of the kind of things we've already talked about.", "tokens": [50914, 407, 1936, 11, 881, 295, 264, 1472, 295, 264, 960, 307, 445, 1237, 412, 512, 588, 1880, 5821, 295, 264, 733, 295, 721, 321, 600, 1217, 2825, 466, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07674492277750154, "compression_ratio": 1.5158371040723981, "no_speech_prob": 0.028835618868470192}, {"id": 517, "seek": 385048, "start": 3872.48, "end": 3877.48, "text": " Now, I know it's a pretty high level of abstraction that we're dealing with.", "tokens": [51464, 823, 11, 286, 458, 309, 311, 257, 1238, 1090, 1496, 295, 37765, 300, 321, 434, 6260, 365, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07674492277750154, "compression_ratio": 1.5158371040723981, "no_speech_prob": 0.028835618868470192}, {"id": 518, "seek": 387748, "start": 3877.48, "end": 3898.48, "text": " But I just want to sort of urge you to just hold on a little bit longer and soon all the applications we're going to look at are really going to help you to kind of cement these things in memory and so on.", "tokens": [50364, 583, 286, 445, 528, 281, 1333, 295, 19029, 291, 281, 445, 1797, 322, 257, 707, 857, 2854, 293, 2321, 439, 264, 5821, 321, 434, 516, 281, 574, 412, 366, 534, 516, 281, 854, 291, 281, 733, 295, 19729, 613, 721, 294, 4675, 293, 370, 322, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0652673864364624, "compression_ratio": 1.474820143884892, "no_speech_prob": 0.031484272330999374}, {"id": 519, "seek": 389848, "start": 3898.48, "end": 3919.48, "text": " So basically, just before we start looking at the applications, like the first one I want to look at, I think, is basically the idea that we have a sort of universal recipe for making any graph by looking at the vertices and edges inside it and sticking them together.", "tokens": [50364, 407, 1936, 11, 445, 949, 321, 722, 1237, 412, 264, 5821, 11, 411, 264, 700, 472, 286, 528, 281, 574, 412, 11, 286, 519, 11, 307, 1936, 264, 1558, 300, 321, 362, 257, 1333, 295, 11455, 6782, 337, 1455, 604, 4295, 538, 1237, 412, 264, 32053, 293, 8819, 1854, 309, 293, 13465, 552, 1214, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08263656648538881, "compression_ratio": 1.5857988165680474, "no_speech_prob": 0.3535853326320648}, {"id": 520, "seek": 391948, "start": 3919.48, "end": 3927.48, "text": " And we can see that one of the applications of the ideas we've already looked at, so it tells us how to do that instantly.", "tokens": [50364, 400, 321, 393, 536, 300, 472, 295, 264, 5821, 295, 264, 3487, 321, 600, 1217, 2956, 412, 11, 370, 309, 5112, 505, 577, 281, 360, 300, 13518, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07935132712961357, "compression_ratio": 1.6317829457364341, "no_speech_prob": 0.6562058329582214}, {"id": 521, "seek": 391948, "start": 3927.48, "end": 3934.48, "text": " And of course, it doesn't just work for the category of graphs, it works for simplices and dynamical systems and innumerable other cases.", "tokens": [50764, 400, 295, 1164, 11, 309, 1177, 380, 445, 589, 337, 264, 7719, 295, 24877, 11, 309, 1985, 337, 6883, 1473, 293, 5999, 804, 3652, 293, 7714, 15583, 712, 661, 3331, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07935132712961357, "compression_ratio": 1.6317829457364341, "no_speech_prob": 0.6562058329582214}, {"id": 522, "seek": 391948, "start": 3934.48, "end": 3936.48, "text": " So soon we'll be there.", "tokens": [51114, 407, 2321, 321, 603, 312, 456, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07935132712961357, "compression_ratio": 1.6317829457364341, "no_speech_prob": 0.6562058329582214}, {"id": 523, "seek": 391948, "start": 3936.48, "end": 3947.48, "text": " But to make this more efficient, we're going to do some kind of a little bit of calculation now, which is really going to help us later.", "tokens": [51214, 583, 281, 652, 341, 544, 7148, 11, 321, 434, 516, 281, 360, 512, 733, 295, 257, 707, 857, 295, 17108, 586, 11, 597, 307, 534, 516, 281, 854, 505, 1780, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07935132712961357, "compression_ratio": 1.6317829457364341, "no_speech_prob": 0.6562058329582214}, {"id": 524, "seek": 394748, "start": 3947.48, "end": 3974.48, "text": " So you can see that most of this stuff to do with free co-completion boils down to this diagram here, which is really representing the left-can extension of this functor F into this co-complete category E along the yonida embedding.", "tokens": [50364, 407, 291, 393, 536, 300, 881, 295, 341, 1507, 281, 360, 365, 1737, 598, 12, 1112, 14657, 313, 35049, 760, 281, 341, 10686, 510, 11, 597, 307, 534, 13460, 264, 1411, 12, 7035, 10320, 295, 341, 1019, 1672, 479, 666, 341, 598, 12, 1112, 17220, 7719, 462, 2051, 264, 288, 266, 2887, 12240, 3584, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14582420607744637, "compression_ratio": 1.4777070063694266, "no_speech_prob": 0.14942197501659393}, {"id": 525, "seek": 397448, "start": 3974.48, "end": 3992.48, "text": " Now, since y is a fully faithful functor, we basically know that this can extension after y is naturally isomorphic to F, so we don't have to worry about this eta natural transformation.", "tokens": [50364, 823, 11, 1670, 288, 307, 257, 4498, 17808, 1019, 1672, 11, 321, 1936, 458, 300, 341, 393, 10320, 934, 288, 307, 8195, 307, 32702, 299, 281, 479, 11, 370, 321, 500, 380, 362, 281, 3292, 466, 341, 32415, 3303, 9887, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11113175830325565, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.0989115759730339}, {"id": 526, "seek": 397448, "start": 3992.48, "end": 4002.48, "text": " And really, we're mostly just interested in calculating this land y F thing that we're going to abbreviate to be F hat.", "tokens": [51264, 400, 534, 11, 321, 434, 5240, 445, 3102, 294, 28258, 341, 2117, 288, 479, 551, 300, 321, 434, 516, 281, 35839, 473, 281, 312, 479, 2385, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11113175830325565, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.0989115759730339}, {"id": 527, "seek": 400248, "start": 4002.48, "end": 4007.48, "text": " And in particular, let's just suppose that we have an object in this category at the top here.", "tokens": [50364, 400, 294, 1729, 11, 718, 311, 445, 7297, 300, 321, 362, 364, 2657, 294, 341, 7719, 412, 264, 1192, 510, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09091781816984477, "compression_ratio": 1.5634517766497462, "no_speech_prob": 0.0419049933552742}, {"id": 528, "seek": 400248, "start": 4007.48, "end": 4009.48, "text": " So we have a pre-sheaf w.", "tokens": [50614, 407, 321, 362, 257, 659, 12, 9611, 2792, 261, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09091781816984477, "compression_ratio": 1.5634517766497462, "no_speech_prob": 0.0419049933552742}, {"id": 529, "seek": 400248, "start": 4009.48, "end": 4013.48, "text": " Well, how do we calculate F hat of w?", "tokens": [50714, 1042, 11, 577, 360, 321, 8873, 479, 2385, 295, 261, 30, 50914], "temperature": 0.0, "avg_logprob": -0.09091781816984477, "compression_ratio": 1.5634517766497462, "no_speech_prob": 0.0419049933552742}, {"id": 530, "seek": 400248, "start": 4013.48, "end": 4016.48, "text": " Well, we've already seen a formula for this.", "tokens": [50914, 1042, 11, 321, 600, 1217, 1612, 257, 8513, 337, 341, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09091781816984477, "compression_ratio": 1.5634517766497462, "no_speech_prob": 0.0419049933552742}, {"id": 531, "seek": 400248, "start": 4016.48, "end": 4020.48, "text": " And here it is.", "tokens": [51064, 400, 510, 309, 307, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09091781816984477, "compression_ratio": 1.5634517766497462, "no_speech_prob": 0.0419049933552742}, {"id": 532, "seek": 400248, "start": 4020.48, "end": 4029.48, "text": " So we can calculate this functor F hat operating on w to be equal to this co-limit here.", "tokens": [51264, 407, 321, 393, 8873, 341, 1019, 1672, 479, 2385, 7447, 322, 261, 281, 312, 2681, 281, 341, 598, 12, 4197, 270, 510, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09091781816984477, "compression_ratio": 1.5634517766497462, "no_speech_prob": 0.0419049933552742}, {"id": 533, "seek": 402948, "start": 4029.48, "end": 4042.48, "text": " But the thing is with this co-limit, it starts with y slice w or y slice or y comma w, this category here.", "tokens": [50364, 583, 264, 551, 307, 365, 341, 598, 12, 4197, 270, 11, 309, 3719, 365, 288, 13153, 261, 420, 288, 13153, 420, 288, 22117, 261, 11, 341, 7719, 510, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06374367305210658, "compression_ratio": 1.5621301775147929, "no_speech_prob": 0.03944556042551994}, {"id": 534, "seek": 402948, "start": 4042.48, "end": 4052.48, "text": " And it turns out that I don't think that's such an easy thing to understand directly, but it has a sort of equivalent form that's much easier to think about.", "tokens": [51014, 400, 309, 4523, 484, 300, 286, 500, 380, 519, 300, 311, 1270, 364, 1858, 551, 281, 1223, 3838, 11, 457, 309, 575, 257, 1333, 295, 10344, 1254, 300, 311, 709, 3571, 281, 519, 466, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06374367305210658, "compression_ratio": 1.5621301775147929, "no_speech_prob": 0.03944556042551994}, {"id": 535, "seek": 405248, "start": 4053.48, "end": 4059.48, "text": " Let's think about what this is, y slice w.", "tokens": [50414, 961, 311, 519, 466, 437, 341, 307, 11, 288, 13153, 261, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10486712822547326, "compression_ratio": 1.65, "no_speech_prob": 0.012753608636558056}, {"id": 536, "seek": 405248, "start": 4059.48, "end": 4063.48, "text": " I mean, it's actually just a comma category of these two functors here.", "tokens": [50714, 286, 914, 11, 309, 311, 767, 445, 257, 22117, 7719, 295, 613, 732, 1019, 5547, 510, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10486712822547326, "compression_ratio": 1.65, "no_speech_prob": 0.012753608636558056}, {"id": 537, "seek": 405248, "start": 4063.48, "end": 4069.48, "text": " We can see that y is a functor into this category of pre-sheaves, and so is w.", "tokens": [50914, 492, 393, 536, 300, 288, 307, 257, 1019, 1672, 666, 341, 7719, 295, 659, 12, 9611, 5423, 11, 293, 370, 307, 261, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10486712822547326, "compression_ratio": 1.65, "no_speech_prob": 0.012753608636558056}, {"id": 538, "seek": 405248, "start": 4069.48, "end": 4073.48, "text": " I mean, w is really just a functor from the trivial category.", "tokens": [51214, 286, 914, 11, 261, 307, 534, 445, 257, 1019, 1672, 490, 264, 26703, 7719, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10486712822547326, "compression_ratio": 1.65, "no_speech_prob": 0.012753608636558056}, {"id": 539, "seek": 405248, "start": 4073.48, "end": 4076.48, "text": " It's just picking out a single pre-sheaf.", "tokens": [51414, 467, 311, 445, 8867, 484, 257, 2167, 659, 12, 9611, 2792, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10486712822547326, "compression_ratio": 1.65, "no_speech_prob": 0.012753608636558056}, {"id": 540, "seek": 407648, "start": 4076.48, "end": 4088.48, "text": " Now, this category, y slice w, more concretely, its objects are going to look like this,", "tokens": [50364, 823, 11, 341, 7719, 11, 288, 13153, 261, 11, 544, 39481, 736, 11, 1080, 6565, 366, 516, 281, 574, 411, 341, 11, 50964], "temperature": 0.0, "avg_logprob": -0.15148476600646973, "compression_ratio": 1.4435483870967742, "no_speech_prob": 0.022873375564813614}, {"id": 541, "seek": 407648, "start": 4088.48, "end": 4097.48, "text": " that they're going to consist of an object of c and an arrow from y of that object into w.", "tokens": [50964, 300, 436, 434, 516, 281, 4603, 295, 364, 2657, 295, 269, 293, 364, 11610, 490, 288, 295, 300, 2657, 666, 261, 13, 51414], "temperature": 0.0, "avg_logprob": -0.15148476600646973, "compression_ratio": 1.4435483870967742, "no_speech_prob": 0.022873375564813614}, {"id": 542, "seek": 409748, "start": 4098.48, "end": 4108.48, "text": " And the arrows are just going to be these arrows in this slice category.", "tokens": [50414, 400, 264, 19669, 366, 445, 516, 281, 312, 613, 19669, 294, 341, 13153, 7719, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0892078271552698, "compression_ratio": 1.8089171974522293, "no_speech_prob": 0.0599360354244709}, {"id": 543, "seek": 409748, "start": 4108.48, "end": 4119.48, "text": " And the arrows in this comma category here are just going to be like this arrow h from c to c dash that makes this kind of diagram commute.", "tokens": [50914, 400, 264, 19669, 294, 341, 22117, 7719, 510, 366, 445, 516, 281, 312, 411, 341, 11610, 276, 490, 269, 281, 269, 8240, 300, 1669, 341, 733, 295, 10686, 36750, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0892078271552698, "compression_ratio": 1.8089171974522293, "no_speech_prob": 0.0599360354244709}, {"id": 544, "seek": 409748, "start": 4119.48, "end": 4126.48, "text": " But basically, we can transform this slice category into this one here.", "tokens": [51464, 583, 1936, 11, 321, 393, 4088, 341, 13153, 7719, 666, 341, 472, 510, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0892078271552698, "compression_ratio": 1.8089171974522293, "no_speech_prob": 0.0599360354244709}, {"id": 545, "seek": 412648, "start": 4126.48, "end": 4132.48, "text": " And the key to this is the go needle Emma, because what's an object in y slice w?", "tokens": [50364, 400, 264, 2141, 281, 341, 307, 264, 352, 11037, 17124, 11, 570, 437, 311, 364, 2657, 294, 288, 13153, 261, 30, 50664], "temperature": 0.0, "avg_logprob": -0.14848836752084585, "compression_ratio": 1.5240963855421688, "no_speech_prob": 0.014662091620266438}, {"id": 546, "seek": 412648, "start": 4132.48, "end": 4141.48, "text": " Well, it's basically going to be a natural transformation e from this home functor here into w.", "tokens": [50664, 1042, 11, 309, 311, 1936, 516, 281, 312, 257, 3303, 9887, 308, 490, 341, 1280, 1019, 1672, 510, 666, 261, 13, 51114], "temperature": 0.0, "avg_logprob": -0.14848836752084585, "compression_ratio": 1.5240963855421688, "no_speech_prob": 0.014662091620266438}, {"id": 547, "seek": 412648, "start": 4141.48, "end": 4146.48, "text": " And whenever you see a natural transformation coming out of a home functor,", "tokens": [51114, 400, 5699, 291, 536, 257, 3303, 9887, 1348, 484, 295, 257, 1280, 1019, 1672, 11, 51364], "temperature": 0.0, "avg_logprob": -0.14848836752084585, "compression_ratio": 1.5240963855421688, "no_speech_prob": 0.014662091620266438}, {"id": 548, "seek": 414648, "start": 4146.48, "end": 4155.48, "text": " you should get a Japanese voice in your head that says you need to transform this into a form of elements.", "tokens": [50364, 291, 820, 483, 257, 5433, 3177, 294, 428, 1378, 300, 1619, 291, 643, 281, 4088, 341, 666, 257, 1254, 295, 4959, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1688246655820021, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.4087238013744354}, {"id": 549, "seek": 414648, "start": 4155.48, "end": 4157.48, "text": " So that's what we'll do.", "tokens": [50814, 407, 300, 311, 437, 321, 603, 360, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1688246655820021, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.4087238013744354}, {"id": 550, "seek": 414648, "start": 4157.48, "end": 4167.48, "text": " We apply the yonidilema and we see that this kind of natural transformation is equivalent to this element e hat of w of c,", "tokens": [50914, 492, 3079, 264, 288, 266, 327, 794, 1696, 293, 321, 536, 300, 341, 733, 295, 3303, 9887, 307, 10344, 281, 341, 4478, 308, 2385, 295, 261, 295, 269, 11, 51414], "temperature": 0.0, "avg_logprob": -0.1688246655820021, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.4087238013744354}, {"id": 551, "seek": 416748, "start": 4167.48, "end": 4184.48, "text": " where this is given by e c of w c.", "tokens": [50364, 689, 341, 307, 2212, 538, 308, 269, 295, 261, 269, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12425524149185573, "compression_ratio": 1.3962264150943395, "no_speech_prob": 0.193758025765419}, {"id": 552, "seek": 416748, "start": 4184.48, "end": 4196.48, "text": " Now, basically applying this gives us this kind of isomorphism between this category here and this category here.", "tokens": [51214, 823, 11, 1936, 9275, 341, 2709, 505, 341, 733, 295, 307, 32702, 1434, 1296, 341, 7719, 510, 293, 341, 7719, 510, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12425524149185573, "compression_ratio": 1.3962264150943395, "no_speech_prob": 0.193758025765419}, {"id": 553, "seek": 419648, "start": 4196.48, "end": 4198.48, "text": " What is this category here?", "tokens": [50364, 708, 307, 341, 7719, 510, 30, 50464], "temperature": 0.0, "avg_logprob": -0.1052560391633407, "compression_ratio": 1.7608695652173914, "no_speech_prob": 0.10479786992073059}, {"id": 554, "seek": 419648, "start": 4198.48, "end": 4202.48, "text": " Well, what I've written at the top here is the singleton sets.", "tokens": [50464, 1042, 11, 437, 286, 600, 3720, 412, 264, 1192, 510, 307, 264, 1522, 14806, 6352, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1052560391633407, "compression_ratio": 1.7608695652173914, "no_speech_prob": 0.10479786992073059}, {"id": 555, "seek": 419648, "start": 4202.48, "end": 4207.48, "text": " The singleton sets can be considered to be a functor into sets.", "tokens": [50664, 440, 1522, 14806, 6352, 393, 312, 4888, 281, 312, 257, 1019, 1672, 666, 6352, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1052560391633407, "compression_ratio": 1.7608695652173914, "no_speech_prob": 0.10479786992073059}, {"id": 556, "seek": 419648, "start": 4207.48, "end": 4212.48, "text": " W can also be considered to be a functor into set from C op.", "tokens": [50914, 343, 393, 611, 312, 4888, 281, 312, 257, 1019, 1672, 666, 992, 490, 383, 999, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1052560391633407, "compression_ratio": 1.7608695652173914, "no_speech_prob": 0.10479786992073059}, {"id": 557, "seek": 419648, "start": 4212.48, "end": 4217.48, "text": " And so star slice w is this comma category here.", "tokens": [51164, 400, 370, 3543, 13153, 261, 307, 341, 22117, 7719, 510, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1052560391633407, "compression_ratio": 1.7608695652173914, "no_speech_prob": 0.10479786992073059}, {"id": 558, "seek": 419648, "start": 4217.48, "end": 4222.48, "text": " But it turns out that we want to take the opposite of that.", "tokens": [51414, 583, 309, 4523, 484, 300, 321, 528, 281, 747, 264, 6182, 295, 300, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1052560391633407, "compression_ratio": 1.7608695652173914, "no_speech_prob": 0.10479786992073059}, {"id": 559, "seek": 422248, "start": 4222.48, "end": 4231.48, "text": " So really this is, well, some people would call this a category of elements for a contra variant functor.", "tokens": [50364, 407, 534, 341, 307, 11, 731, 11, 512, 561, 576, 818, 341, 257, 7719, 295, 4959, 337, 257, 10742, 17501, 1019, 1672, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1250095287958781, "compression_ratio": 1.5359477124183007, "no_speech_prob": 0.03146206587553024}, {"id": 560, "seek": 422248, "start": 4231.48, "end": 4234.48, "text": " Yes.", "tokens": [50814, 1079, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1250095287958781, "compression_ratio": 1.5359477124183007, "no_speech_prob": 0.03146206587553024}, {"id": 561, "seek": 422248, "start": 4234.48, "end": 4247.48, "text": " But the point of this really is that what we have here is just a category that has objects like this and arrows like this H.", "tokens": [50964, 583, 264, 935, 295, 341, 534, 307, 300, 437, 321, 362, 510, 307, 445, 257, 7719, 300, 575, 6565, 411, 341, 293, 19669, 411, 341, 389, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1250095287958781, "compression_ratio": 1.5359477124183007, "no_speech_prob": 0.03146206587553024}, {"id": 562, "seek": 424748, "start": 4247.48, "end": 4257.48, "text": " And I'll sort of leave it to you to work out the details of this correspondence here, but just to give a very sort of brief five minute outline.", "tokens": [50364, 400, 286, 603, 1333, 295, 1856, 309, 281, 291, 281, 589, 484, 264, 4365, 295, 341, 38135, 510, 11, 457, 445, 281, 976, 257, 588, 1333, 295, 5353, 1732, 3456, 16387, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07054624292585585, "compression_ratio": 1.5593220338983051, "no_speech_prob": 0.0768442451953888}, {"id": 563, "seek": 424748, "start": 4257.48, "end": 4268.48, "text": " The idea is that we have an arrow H in this category down here.", "tokens": [50864, 440, 1558, 307, 300, 321, 362, 364, 11610, 389, 294, 341, 7719, 760, 510, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07054624292585585, "compression_ratio": 1.5593220338983051, "no_speech_prob": 0.0768442451953888}, {"id": 564, "seek": 424748, "start": 4268.48, "end": 4271.48, "text": " So it's going to go for an object like this to an object like this.", "tokens": [51414, 407, 309, 311, 516, 281, 352, 337, 364, 2657, 411, 341, 281, 364, 2657, 411, 341, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07054624292585585, "compression_ratio": 1.5593220338983051, "no_speech_prob": 0.0768442451953888}, {"id": 565, "seek": 427148, "start": 4271.48, "end": 4277.48, "text": " But remember that what we have here is really the opposite of star slice W.", "tokens": [50364, 583, 1604, 300, 437, 321, 362, 510, 307, 534, 264, 6182, 295, 3543, 13153, 343, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09357052118005887, "compression_ratio": 1.5988372093023255, "no_speech_prob": 0.48349565267562866}, {"id": 566, "seek": 427148, "start": 4277.48, "end": 4289.48, "text": " So this H here corresponds to this arrow H op that goes from C dash E dash hat to C E hat in star W.", "tokens": [50664, 407, 341, 389, 510, 23249, 281, 341, 11610, 389, 999, 300, 1709, 490, 383, 8240, 462, 8240, 2385, 281, 383, 462, 2385, 294, 3543, 343, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09357052118005887, "compression_ratio": 1.5988372093023255, "no_speech_prob": 0.48349565267562866}, {"id": 567, "seek": 427148, "start": 4289.48, "end": 4299.48, "text": " And that just corresponds with this arrow H op of C op, which makes this kind of triangle commute.", "tokens": [51264, 400, 300, 445, 23249, 365, 341, 11610, 389, 999, 295, 383, 999, 11, 597, 1669, 341, 733, 295, 13369, 36750, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09357052118005887, "compression_ratio": 1.5988372093023255, "no_speech_prob": 0.48349565267562866}, {"id": 568, "seek": 429948, "start": 4299.48, "end": 4314.48, "text": " And then if you apply for your needle Emma, you can see that this basically just corresponds with an arrow of this kind of form in Y slice W.", "tokens": [50364, 400, 550, 498, 291, 3079, 337, 428, 11037, 17124, 11, 291, 393, 536, 300, 341, 1936, 445, 23249, 365, 364, 11610, 295, 341, 733, 295, 1254, 294, 398, 13153, 343, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12644497759930498, "compression_ratio": 1.5170731707317073, "no_speech_prob": 0.014944428578019142}, {"id": 569, "seek": 429948, "start": 4314.48, "end": 4317.48, "text": " So I know that's a lot to take in.", "tokens": [51114, 407, 286, 458, 300, 311, 257, 688, 281, 747, 294, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12644497759930498, "compression_ratio": 1.5170731707317073, "no_speech_prob": 0.014944428578019142}, {"id": 570, "seek": 429948, "start": 4317.48, "end": 4328.48, "text": " Maybe don't worry about the details of this on the first viewing, but the point basically is that we can rewrite this expression here.", "tokens": [51264, 2704, 500, 380, 3292, 466, 264, 4365, 295, 341, 322, 264, 700, 17480, 11, 457, 264, 935, 1936, 307, 300, 321, 393, 28132, 341, 6114, 510, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12644497759930498, "compression_ratio": 1.5170731707317073, "no_speech_prob": 0.014944428578019142}, {"id": 571, "seek": 432848, "start": 4328.48, "end": 4331.48, "text": " In this kind of form here.", "tokens": [50364, 682, 341, 733, 295, 1254, 510, 13, 50514], "temperature": 0.0, "avg_logprob": -0.23708523021024816, "compression_ratio": 1.3166666666666667, "no_speech_prob": 0.059877797961235046}, {"id": 572, "seek": 432848, "start": 4331.48, "end": 4336.48, "text": " So here this projection functor here.", "tokens": [50514, 407, 510, 341, 22743, 1019, 1672, 510, 13, 50764], "temperature": 0.0, "avg_logprob": -0.23708523021024816, "compression_ratio": 1.3166666666666667, "no_speech_prob": 0.059877797961235046}, {"id": 573, "seek": 432848, "start": 4336.48, "end": 4348.48, "text": " That's going to take an arrow C comma Y C E W.", "tokens": [50764, 663, 311, 516, 281, 747, 364, 11610, 383, 22117, 398, 383, 462, 343, 13, 51364], "temperature": 0.0, "avg_logprob": -0.23708523021024816, "compression_ratio": 1.3166666666666667, "no_speech_prob": 0.059877797961235046}, {"id": 574, "seek": 432848, "start": 4348.48, "end": 4353.48, "text": " And it's just going to project it to become C.", "tokens": [51364, 400, 309, 311, 445, 516, 281, 1716, 309, 281, 1813, 383, 13, 51614], "temperature": 0.0, "avg_logprob": -0.23708523021024816, "compression_ratio": 1.3166666666666667, "no_speech_prob": 0.059877797961235046}, {"id": 575, "seek": 435348, "start": 4353.48, "end": 4358.48, "text": " And this kind of projection functor here is going to work in a sort of analogous way.", "tokens": [50364, 400, 341, 733, 295, 22743, 1019, 1672, 510, 307, 516, 281, 589, 294, 257, 1333, 295, 16660, 563, 636, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09445910453796387, "compression_ratio": 1.812785388127854, "no_speech_prob": 0.033531270921230316}, {"id": 576, "seek": 435348, "start": 4358.48, "end": 4363.48, "text": " So what we're going to have here are objects of the form C comma E hat.", "tokens": [50614, 407, 437, 321, 434, 516, 281, 362, 510, 366, 6565, 295, 264, 1254, 383, 22117, 462, 2385, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09445910453796387, "compression_ratio": 1.812785388127854, "no_speech_prob": 0.033531270921230316}, {"id": 577, "seek": 435348, "start": 4363.48, "end": 4367.48, "text": " And the projection functor is just going to send those to C.", "tokens": [50864, 400, 264, 22743, 1019, 1672, 307, 445, 516, 281, 2845, 729, 281, 383, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09445910453796387, "compression_ratio": 1.812785388127854, "no_speech_prob": 0.033531270921230316}, {"id": 578, "seek": 435348, "start": 4367.48, "end": 4377.48, "text": " And then the arrows in each of these categories just look like arrows of C and we can think of those at least symbolically is just sort of unaltered by these projection functors.", "tokens": [51064, 400, 550, 264, 19669, 294, 1184, 295, 613, 10479, 445, 574, 411, 19669, 295, 383, 293, 321, 393, 519, 295, 729, 412, 1935, 5986, 984, 307, 445, 1333, 295, 517, 304, 40665, 538, 613, 22743, 1019, 5547, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09445910453796387, "compression_ratio": 1.812785388127854, "no_speech_prob": 0.033531270921230316}, {"id": 579, "seek": 437748, "start": 4377.48, "end": 4386.48, "text": " So this is very nice because the final form of this basically involves a sort of category of elements here.", "tokens": [50364, 407, 341, 307, 588, 1481, 570, 264, 2572, 1254, 295, 341, 1936, 11626, 257, 1333, 295, 7719, 295, 4959, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07236223400763746, "compression_ratio": 1.5, "no_speech_prob": 0.02881728485226631}, {"id": 580, "seek": 437748, "start": 4386.48, "end": 4396.48, "text": " And then we're just sort of projecting those elements down into C so we can almost think of this as a sort of vibration.", "tokens": [50814, 400, 550, 321, 434, 445, 1333, 295, 43001, 729, 4959, 760, 666, 383, 370, 321, 393, 1920, 519, 295, 341, 382, 257, 1333, 295, 20006, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07236223400763746, "compression_ratio": 1.5, "no_speech_prob": 0.02881728485226631}, {"id": 581, "seek": 439648, "start": 4396.48, "end": 4407.48, "text": " We can think of these as sort of fibers above these objects of C in a way which is as described by this kind of pre-sheaf W.", "tokens": [50364, 492, 393, 519, 295, 613, 382, 1333, 295, 25252, 3673, 613, 6565, 295, 383, 294, 257, 636, 597, 307, 382, 7619, 538, 341, 733, 295, 659, 12, 9611, 2792, 343, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14096449734119887, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.3622090518474579}, {"id": 582, "seek": 439648, "start": 4407.48, "end": 4412.48, "text": " And then we're just sort of functoring these into F.", "tokens": [50914, 400, 550, 321, 434, 445, 1333, 295, 1019, 1672, 278, 613, 666, 479, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14096449734119887, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.3622090518474579}, {"id": 583, "seek": 439648, "start": 4412.48, "end": 4418.48, "text": " We're just sort of functoring these into E and then asking for a co-limit of the resulting functor.", "tokens": [51164, 492, 434, 445, 1333, 295, 1019, 1672, 278, 613, 666, 462, 293, 550, 3365, 337, 257, 598, 12, 4197, 270, 295, 264, 16505, 1019, 1672, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14096449734119887, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.3622090518474579}, {"id": 584, "seek": 439648, "start": 4418.48, "end": 4422.48, "text": " I know still this is pretty abstract.", "tokens": [51464, 286, 458, 920, 341, 307, 1238, 12649, 13, 51664], "temperature": 0.0, "avg_logprob": -0.14096449734119887, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.3622090518474579}, {"id": 585, "seek": 442248, "start": 4422.48, "end": 4433.48, "text": " But now we're going to start looking at some examples and hopefully we'll end up happy that we made this simplification step here because it's going to save us some work later on.", "tokens": [50364, 583, 586, 321, 434, 516, 281, 722, 1237, 412, 512, 5110, 293, 4696, 321, 603, 917, 493, 2055, 300, 321, 1027, 341, 6883, 3774, 1823, 510, 570, 309, 311, 516, 281, 3155, 505, 512, 589, 1780, 322, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06926214853922526, "compression_ratio": 1.5233160621761659, "no_speech_prob": 0.014701000414788723}, {"id": 586, "seek": 442248, "start": 4433.48, "end": 4436.48, "text": " So OK, we've done the hard part.", "tokens": [50914, 407, 2264, 11, 321, 600, 1096, 264, 1152, 644, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06926214853922526, "compression_ratio": 1.5233160621761659, "no_speech_prob": 0.014701000414788723}, {"id": 587, "seek": 442248, "start": 4436.48, "end": 4445.48, "text": " Now we can start to look at some applications of this free co-completion concept.", "tokens": [51064, 823, 321, 393, 722, 281, 574, 412, 512, 5821, 295, 341, 1737, 598, 12, 1112, 14657, 313, 3410, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06926214853922526, "compression_ratio": 1.5233160621761659, "no_speech_prob": 0.014701000414788723}, {"id": 588, "seek": 444548, "start": 4445.48, "end": 4452.48, "text": " So the first one I want to look at is the so-called density theorem.", "tokens": [50364, 407, 264, 700, 472, 286, 528, 281, 574, 412, 307, 264, 370, 12, 11880, 10305, 20904, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08373814043791397, "compression_ratio": 1.5063291139240507, "no_speech_prob": 0.35876142978668213}, {"id": 589, "seek": 444548, "start": 4452.48, "end": 4462.48, "text": " And so for this, all we're going to do is pick a particular functor F here to focus on.", "tokens": [50714, 400, 370, 337, 341, 11, 439, 321, 434, 516, 281, 360, 307, 1888, 257, 1729, 1019, 1672, 479, 510, 281, 1879, 322, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08373814043791397, "compression_ratio": 1.5063291139240507, "no_speech_prob": 0.35876142978668213}, {"id": 590, "seek": 444548, "start": 4462.48, "end": 4468.48, "text": " And we're going to focus on the case where F itself is also the yonida embedding.", "tokens": [51214, 400, 321, 434, 516, 281, 1879, 322, 264, 1389, 689, 479, 2564, 307, 611, 264, 288, 266, 2887, 12240, 3584, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08373814043791397, "compression_ratio": 1.5063291139240507, "no_speech_prob": 0.35876142978668213}, {"id": 591, "seek": 446848, "start": 4468.48, "end": 4480.48, "text": " So what we're essentially looking at here is the left can extension of the yonida embedding along the yonida embedding.", "tokens": [50364, 407, 437, 321, 434, 4476, 1237, 412, 510, 307, 264, 1411, 393, 10320, 295, 264, 288, 266, 2887, 12240, 3584, 2051, 264, 288, 266, 2887, 12240, 3584, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07296791629514833, "compression_ratio": 1.6235294117647059, "no_speech_prob": 0.1730164885520935}, {"id": 592, "seek": 446848, "start": 4480.48, "end": 4497.48, "text": " And if you recall, the idea behind these can extensions usually is that we're to find a two-cell eta that fills in this triangle in a sort of universal way.", "tokens": [50964, 400, 498, 291, 9901, 11, 264, 1558, 2261, 613, 393, 25129, 2673, 307, 300, 321, 434, 281, 915, 257, 732, 12, 4164, 32415, 300, 22498, 294, 341, 13369, 294, 257, 1333, 295, 11455, 636, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07296791629514833, "compression_ratio": 1.6235294117647059, "no_speech_prob": 0.1730164885520935}, {"id": 593, "seek": 449748, "start": 4497.48, "end": 4506.48, "text": " However, in the special case where this functor here is fully faithful, as is the case with the yonida embedding,", "tokens": [50364, 2908, 11, 294, 264, 2121, 1389, 689, 341, 1019, 1672, 510, 307, 4498, 17808, 11, 382, 307, 264, 1389, 365, 264, 288, 266, 2887, 12240, 3584, 11, 50814], "temperature": 0.0, "avg_logprob": -0.05698743272334971, "compression_ratio": 1.7354260089686098, "no_speech_prob": 0.008266870863735676}, {"id": 594, "seek": 449748, "start": 4506.48, "end": 4515.48, "text": " essentially we're just looking for the unique kind of arrow here, which just makes this triangle commute.", "tokens": [50814, 4476, 321, 434, 445, 1237, 337, 264, 3845, 733, 295, 11610, 510, 11, 597, 445, 1669, 341, 13369, 36750, 13, 51264], "temperature": 0.0, "avg_logprob": -0.05698743272334971, "compression_ratio": 1.7354260089686098, "no_speech_prob": 0.008266870863735676}, {"id": 595, "seek": 449748, "start": 4515.48, "end": 4522.48, "text": " And it's easy to see in this case that there's an arrow that makes this triangle commute, which is just the identity functor, right?", "tokens": [51264, 400, 309, 311, 1858, 281, 536, 294, 341, 1389, 300, 456, 311, 364, 11610, 300, 1669, 341, 13369, 36750, 11, 597, 307, 445, 264, 6575, 1019, 1672, 11, 558, 30, 51614], "temperature": 0.0, "avg_logprob": -0.05698743272334971, "compression_ratio": 1.7354260089686098, "no_speech_prob": 0.008266870863735676}, {"id": 596, "seek": 449748, "start": 4522.48, "end": 4526.48, "text": " Because identity after y equals y.", "tokens": [51614, 1436, 6575, 934, 288, 6915, 288, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05698743272334971, "compression_ratio": 1.7354260089686098, "no_speech_prob": 0.008266870863735676}, {"id": 597, "seek": 452648, "start": 4526.48, "end": 4532.48, "text": " And so we already know the form of this left can extension.", "tokens": [50364, 400, 370, 321, 1217, 458, 264, 1254, 295, 341, 1411, 393, 10320, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06246804519438408, "compression_ratio": 1.7421383647798743, "no_speech_prob": 0.003371704835444689}, {"id": 598, "seek": 452648, "start": 4532.48, "end": 4539.48, "text": " We know that it's the identity, but we also have a formula for it from before.", "tokens": [50664, 492, 458, 300, 309, 311, 264, 6575, 11, 457, 321, 611, 362, 257, 8513, 337, 309, 490, 949, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06246804519438408, "compression_ratio": 1.7421383647798743, "no_speech_prob": 0.003371704835444689}, {"id": 599, "seek": 452648, "start": 4539.48, "end": 4543.48, "text": " Okay, you remember this formula we were just looking at?", "tokens": [51014, 1033, 11, 291, 1604, 341, 8513, 321, 645, 445, 1237, 412, 30, 51214], "temperature": 0.0, "avg_logprob": -0.06246804519438408, "compression_ratio": 1.7421383647798743, "no_speech_prob": 0.003371704835444689}, {"id": 600, "seek": 452648, "start": 4543.48, "end": 4547.48, "text": " Okay, you remember this formula that we were just looking at in the general case?", "tokens": [51214, 1033, 11, 291, 1604, 341, 8513, 300, 321, 645, 445, 1237, 412, 294, 264, 2674, 1389, 30, 51414], "temperature": 0.0, "avg_logprob": -0.06246804519438408, "compression_ratio": 1.7421383647798743, "no_speech_prob": 0.003371704835444689}, {"id": 601, "seek": 454748, "start": 4547.48, "end": 4562.48, "text": " Well, we can just look at this in the case where this f here is the yonida embedding, and this y here is our category of pre-sheaves.", "tokens": [50364, 1042, 11, 321, 393, 445, 574, 412, 341, 294, 264, 1389, 689, 341, 283, 510, 307, 264, 288, 266, 2887, 12240, 3584, 11, 293, 341, 288, 510, 307, 527, 7719, 295, 659, 12, 9611, 5423, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0954362620478091, "compression_ratio": 1.5743243243243243, "no_speech_prob": 0.03665086627006531}, {"id": 602, "seek": 454748, "start": 4562.48, "end": 4573.48, "text": " And so what we get, and so if we do that, we see that we have this formula here, which is for this.", "tokens": [51114, 400, 370, 437, 321, 483, 11, 293, 370, 498, 321, 360, 300, 11, 321, 536, 300, 321, 362, 341, 8513, 510, 11, 597, 307, 337, 341, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0954362620478091, "compression_ratio": 1.5743243243243243, "no_speech_prob": 0.03665086627006531}, {"id": 603, "seek": 457348, "start": 4573.48, "end": 4585.48, "text": " But we also know that this is equal to the identity functor operating on w, which is just w.", "tokens": [50364, 583, 321, 611, 458, 300, 341, 307, 2681, 281, 264, 6575, 1019, 1672, 7447, 322, 261, 11, 597, 307, 445, 261, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05551745273448803, "compression_ratio": 1.3655172413793104, "no_speech_prob": 0.0063740964978933334}, {"id": 604, "seek": 457348, "start": 4585.48, "end": 4594.48, "text": " And so we have this equation here, and this is our density theorem.", "tokens": [50964, 400, 370, 321, 362, 341, 5367, 510, 11, 293, 341, 307, 527, 10305, 20904, 13, 51414], "temperature": 0.0, "avg_logprob": -0.05551745273448803, "compression_ratio": 1.3655172413793104, "no_speech_prob": 0.0063740964978933334}, {"id": 605, "seek": 457348, "start": 4594.48, "end": 4599.48, "text": " Maybe I should write isomorphic here.", "tokens": [51414, 2704, 286, 820, 2464, 307, 32702, 299, 510, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05551745273448803, "compression_ratio": 1.3655172413793104, "no_speech_prob": 0.0063740964978933334}, {"id": 606, "seek": 459948, "start": 4599.48, "end": 4608.48, "text": " And this is quite remarkable because it basically gives us a way to think about this functor w.", "tokens": [50364, 400, 341, 307, 1596, 12802, 570, 309, 1936, 2709, 505, 257, 636, 281, 519, 466, 341, 1019, 1672, 261, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07676790129970497, "compression_ratio": 1.6091954022988506, "no_speech_prob": 0.014704756438732147}, {"id": 607, "seek": 459948, "start": 4608.48, "end": 4613.48, "text": " So think about w as a sort of structured set.", "tokens": [50814, 407, 519, 466, 261, 382, 257, 1333, 295, 18519, 992, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07676790129970497, "compression_ratio": 1.6091954022988506, "no_speech_prob": 0.014704756438732147}, {"id": 608, "seek": 459948, "start": 4613.48, "end": 4622.48, "text": " Okay, a lot of these pre-sheaves, you can think of them as structured sets, things like graphs and dynamical systems and things like that.", "tokens": [51064, 1033, 11, 257, 688, 295, 613, 659, 12, 9611, 5423, 11, 291, 393, 519, 295, 552, 382, 18519, 6352, 11, 721, 411, 24877, 293, 5999, 804, 3652, 293, 721, 411, 300, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07676790129970497, "compression_ratio": 1.6091954022988506, "no_speech_prob": 0.014704756438732147}, {"id": 609, "seek": 462248, "start": 4622.48, "end": 4634.48, "text": " Well, what this results basically telling us is how we can build this structured set here by sticking together humfunctores.", "tokens": [50364, 1042, 11, 437, 341, 3542, 1936, 3585, 505, 307, 577, 321, 393, 1322, 341, 18519, 992, 510, 538, 13465, 1214, 1484, 15930, 349, 2706, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09390341667901903, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.02883753925561905}, {"id": 610, "seek": 462248, "start": 4634.48, "end": 4640.48, "text": " And think of the humfunctores as sort of like elementary particles or elementary structured sets.", "tokens": [50964, 400, 519, 295, 264, 1484, 15930, 349, 2706, 382, 1333, 295, 411, 16429, 10007, 420, 16429, 18519, 6352, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09390341667901903, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.02883753925561905}, {"id": 611, "seek": 462248, "start": 4640.48, "end": 4647.48, "text": " So think about, for example, a single vertex or a single edge in the category of graphs.", "tokens": [51264, 407, 519, 466, 11, 337, 1365, 11, 257, 2167, 28162, 420, 257, 2167, 4691, 294, 264, 7719, 295, 24877, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09390341667901903, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.02883753925561905}, {"id": 612, "seek": 462248, "start": 4647.48, "end": 4650.48, "text": " Those will correspond to the humfunctores.", "tokens": [51614, 3950, 486, 6805, 281, 264, 1484, 15930, 349, 2706, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09390341667901903, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.02883753925561905}, {"id": 613, "seek": 465048, "start": 4650.48, "end": 4657.48, "text": " And what this result is telling us is how we can glue those things together to make w.", "tokens": [50364, 400, 437, 341, 1874, 307, 3585, 505, 307, 577, 321, 393, 8998, 729, 721, 1214, 281, 652, 261, 13, 50714], "temperature": 0.0, "avg_logprob": -0.04783636836682336, "compression_ratio": 1.5359477124183007, "no_speech_prob": 0.010472995229065418}, {"id": 614, "seek": 465048, "start": 4657.48, "end": 4663.48, "text": " And the reason is basically because this is some category.", "tokens": [50714, 400, 264, 1778, 307, 1936, 570, 341, 307, 512, 7719, 13, 51014], "temperature": 0.0, "avg_logprob": -0.04783636836682336, "compression_ratio": 1.5359477124183007, "no_speech_prob": 0.010472995229065418}, {"id": 615, "seek": 465048, "start": 4663.48, "end": 4671.48, "text": " Basically, this is going to turn out to have sort of all the bits and pieces that make w.", "tokens": [51014, 8537, 11, 341, 307, 516, 281, 1261, 484, 281, 362, 1333, 295, 439, 264, 9239, 293, 3755, 300, 652, 261, 13, 51414], "temperature": 0.0, "avg_logprob": -0.04783636836682336, "compression_ratio": 1.5359477124183007, "no_speech_prob": 0.010472995229065418}, {"id": 616, "seek": 467148, "start": 4671.48, "end": 4680.48, "text": " And then when we do this functor composition here, it's going to replace these bits and pieces with the corresponding humfunctores.", "tokens": [50364, 400, 550, 562, 321, 360, 341, 1019, 1672, 12686, 510, 11, 309, 311, 516, 281, 7406, 613, 9239, 293, 3755, 365, 264, 11760, 1484, 15930, 349, 2706, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06814358743389001, "compression_ratio": 1.6933962264150944, "no_speech_prob": 0.1477689892053604}, {"id": 617, "seek": 467148, "start": 4680.48, "end": 4685.48, "text": " So we're going to have all these kind of, we're going to have this sort of diagram.", "tokens": [50814, 407, 321, 434, 516, 281, 362, 439, 613, 733, 295, 11, 321, 434, 516, 281, 362, 341, 1333, 295, 10686, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06814358743389001, "compression_ratio": 1.6933962264150944, "no_speech_prob": 0.1477689892053604}, {"id": 618, "seek": 467148, "start": 4685.48, "end": 4695.48, "text": " For example, in the category of graphs, it's going to consist of a load of lone vertices and lone edges with some maps telling you where to go.", "tokens": [51064, 1171, 1365, 11, 294, 264, 7719, 295, 24877, 11, 309, 311, 516, 281, 4603, 295, 257, 3677, 295, 35314, 32053, 293, 35314, 8819, 365, 512, 11317, 3585, 291, 689, 281, 352, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06814358743389001, "compression_ratio": 1.6933962264150944, "no_speech_prob": 0.1477689892053604}, {"id": 619, "seek": 469548, "start": 4695.48, "end": 4709.48, "text": " And then when we form this co-limit, we're essentially gluing all of those vertices and edges together to actually give the graph w that we want.", "tokens": [50364, 400, 550, 562, 321, 1254, 341, 598, 12, 4197, 270, 11, 321, 434, 4476, 1563, 9635, 439, 295, 729, 32053, 293, 8819, 1214, 281, 767, 976, 264, 4295, 261, 300, 321, 528, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0705027936109856, "compression_ratio": 1.5372340425531914, "no_speech_prob": 0.001837152405641973}, {"id": 620, "seek": 469548, "start": 4709.48, "end": 4723.48, "text": " So it's pretty amazing that we basically get this blueprint for building any kind of structured set at all out of its sort of elementary parts.", "tokens": [51064, 407, 309, 311, 1238, 2243, 300, 321, 1936, 483, 341, 35868, 337, 2390, 604, 733, 295, 18519, 992, 412, 439, 484, 295, 1080, 1333, 295, 16429, 3166, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0705027936109856, "compression_ratio": 1.5372340425531914, "no_speech_prob": 0.001837152405641973}, {"id": 621, "seek": 472348, "start": 4723.48, "end": 4734.48, "text": " And the whole thing just is given to us automatically as a fairly special case of this idea of free co-completion.", "tokens": [50364, 400, 264, 1379, 551, 445, 307, 2212, 281, 505, 6772, 382, 257, 6457, 2121, 1389, 295, 341, 1558, 295, 1737, 598, 12, 1112, 14657, 313, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09882806295371917, "compression_ratio": 1.6146341463414635, "no_speech_prob": 0.019076799973845482}, {"id": 622, "seek": 472348, "start": 4734.48, "end": 4752.48, "text": " So, you know, it's stuff like this that like really, you know, it really makes me glad to know category theory because it's kind of like, to me, it seems pretty obvious that this is like the right way to think about.", "tokens": [50914, 407, 11, 291, 458, 11, 309, 311, 1507, 411, 341, 300, 411, 534, 11, 291, 458, 11, 309, 534, 1669, 385, 5404, 281, 458, 7719, 5261, 570, 309, 311, 733, 295, 411, 11, 281, 385, 11, 309, 2544, 1238, 6322, 300, 341, 307, 411, 264, 558, 636, 281, 519, 466, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09882806295371917, "compression_ratio": 1.6146341463414635, "no_speech_prob": 0.019076799973845482}, {"id": 623, "seek": 475248, "start": 4753.48, "end": 4762.48, "text": " Like how structures are assembled from elementary pieces because it's not like something that people have to figure out.", "tokens": [50414, 1743, 577, 9227, 366, 24204, 490, 16429, 3755, 570, 309, 311, 406, 411, 746, 300, 561, 362, 281, 2573, 484, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09760921429365109, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.006896271836012602}, {"id": 624, "seek": 475248, "start": 4762.48, "end": 4770.48, "text": " This is given towards automatically as a small piece of a large, elegant structure.", "tokens": [50864, 639, 307, 2212, 3030, 6772, 382, 257, 1359, 2522, 295, 257, 2416, 11, 21117, 3877, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09760921429365109, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.006896271836012602}, {"id": 625, "seek": 475248, "start": 4770.48, "end": 4781.48, "text": " Okay, so let's apply this density theorem and we're going to apply it to the category of graphs and it's going to tell us how graphs are assembled.", "tokens": [51264, 1033, 11, 370, 718, 311, 3079, 341, 10305, 20904, 293, 321, 434, 516, 281, 3079, 309, 281, 264, 7719, 295, 24877, 293, 309, 311, 516, 281, 980, 505, 577, 24877, 366, 24204, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09760921429365109, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.006896271836012602}, {"id": 626, "seek": 478148, "start": 4781.48, "end": 4787.48, "text": " Okay, so for our category C here, we're going to pick this category here.", "tokens": [50364, 1033, 11, 370, 337, 527, 7719, 383, 510, 11, 321, 434, 516, 281, 1888, 341, 7719, 510, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11326323856006969, "compression_ratio": 1.596938775510204, "no_speech_prob": 0.011250200681388378}, {"id": 627, "seek": 478148, "start": 4787.48, "end": 4794.48, "text": " So it's got two objects, E and V, and these two arrows S dash and T dash from V to E.", "tokens": [50664, 407, 309, 311, 658, 732, 6565, 11, 462, 293, 691, 11, 293, 613, 732, 19669, 318, 8240, 293, 314, 8240, 490, 691, 281, 462, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11326323856006969, "compression_ratio": 1.596938775510204, "no_speech_prob": 0.011250200681388378}, {"id": 628, "seek": 478148, "start": 4794.48, "end": 4800.48, "text": " And so now C op is going to look like this.", "tokens": [51014, 400, 370, 586, 383, 999, 307, 516, 281, 574, 411, 341, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11326323856006969, "compression_ratio": 1.596938775510204, "no_speech_prob": 0.011250200681388378}, {"id": 629, "seek": 478148, "start": 4800.48, "end": 4808.48, "text": " And as we've seen before many times, functors from this category into sets are going to correspond to graphs.", "tokens": [51314, 400, 382, 321, 600, 1612, 949, 867, 1413, 11, 1019, 5547, 490, 341, 7719, 666, 6352, 366, 516, 281, 6805, 281, 24877, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11326323856006969, "compression_ratio": 1.596938775510204, "no_speech_prob": 0.011250200681388378}, {"id": 630, "seek": 480848, "start": 4808.48, "end": 4811.48, "text": " So let's have a look at an example.", "tokens": [50364, 407, 718, 311, 362, 257, 574, 412, 364, 1365, 13, 50514], "temperature": 0.0, "avg_logprob": -0.13599603316363165, "compression_ratio": 1.853846153846154, "no_speech_prob": 0.02552841231226921}, {"id": 631, "seek": 480848, "start": 4811.48, "end": 4828.48, "text": " Here's a functor W from C op to set and it's going to send E to this set here and V to this set here and S is going to get sent to this function here and T is going to get sent to this green function here.", "tokens": [50514, 1692, 311, 257, 1019, 1672, 343, 490, 383, 999, 281, 992, 293, 309, 311, 516, 281, 2845, 462, 281, 341, 992, 510, 293, 691, 281, 341, 992, 510, 293, 318, 307, 516, 281, 483, 2279, 281, 341, 2445, 510, 293, 314, 307, 516, 281, 483, 2279, 281, 341, 3092, 2445, 510, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13599603316363165, "compression_ratio": 1.853846153846154, "no_speech_prob": 0.02552841231226921}, {"id": 632, "seek": 482848, "start": 4828.48, "end": 4835.48, "text": " So we can visualize this in this manner shown below here.", "tokens": [50364, 407, 321, 393, 23273, 341, 294, 341, 9060, 4898, 2507, 510, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0980691909790039, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.2442389726638794}, {"id": 633, "seek": 482848, "start": 4835.48, "end": 4849.48, "text": " And what we're doing here is visualizing each of these elements of W E as an edge that goes from the place it gets sent by W S to the place it gets sent by W T.", "tokens": [50714, 400, 437, 321, 434, 884, 510, 307, 5056, 3319, 1184, 295, 613, 4959, 295, 343, 462, 382, 364, 4691, 300, 1709, 490, 264, 1081, 309, 2170, 2279, 538, 343, 318, 281, 264, 1081, 309, 2170, 2279, 538, 343, 314, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0980691909790039, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.2442389726638794}, {"id": 634, "seek": 482848, "start": 4849.48, "end": 4853.48, "text": " So this is a sort of visualization of the graph W.", "tokens": [51414, 407, 341, 307, 257, 1333, 295, 25801, 295, 264, 4295, 343, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0980691909790039, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.2442389726638794}, {"id": 635, "seek": 485348, "start": 4853.48, "end": 4859.48, "text": " Now all we have to do is apply this formula here.", "tokens": [50364, 823, 439, 321, 362, 281, 360, 307, 3079, 341, 8513, 510, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06656045783055972, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.03157782927155495}, {"id": 636, "seek": 485348, "start": 4859.48, "end": 4865.48, "text": " And so we want to be calculating a co-limit of this functor here.", "tokens": [50664, 400, 370, 321, 528, 281, 312, 28258, 257, 598, 12, 4197, 270, 295, 341, 1019, 1672, 510, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06656045783055972, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.03157782927155495}, {"id": 637, "seek": 485348, "start": 4865.48, "end": 4879.48, "text": " So to calculate this category of elements here, we just look at this picture and then we sort of rub out these bubbles and reverse the arrows and we get this category here.", "tokens": [50964, 407, 281, 8873, 341, 7719, 295, 4959, 510, 11, 321, 445, 574, 412, 341, 3036, 293, 550, 321, 1333, 295, 5915, 484, 613, 16295, 293, 9943, 264, 19669, 293, 321, 483, 341, 7719, 510, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06656045783055972, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.03157782927155495}, {"id": 638, "seek": 487948, "start": 4879.48, "end": 4883.48, "text": " This is our category of elements. This is star slice W op.", "tokens": [50364, 639, 307, 527, 7719, 295, 4959, 13, 639, 307, 3543, 13153, 343, 999, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13049936294555664, "compression_ratio": 1.4598540145985401, "no_speech_prob": 0.05101718381047249}, {"id": 639, "seek": 487948, "start": 4883.48, "end": 4890.48, "text": " Now this projection functor here is just going to forget the second entries.", "tokens": [50564, 823, 341, 22743, 1019, 1672, 510, 307, 445, 516, 281, 2870, 264, 1150, 23041, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13049936294555664, "compression_ratio": 1.4598540145985401, "no_speech_prob": 0.05101718381047249}, {"id": 640, "seek": 487948, "start": 4890.48, "end": 4899.48, "text": " And so it's going to send these two onto E and these two onto V.", "tokens": [50914, 400, 370, 309, 311, 516, 281, 2845, 613, 732, 3911, 462, 293, 613, 732, 3911, 691, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13049936294555664, "compression_ratio": 1.4598540145985401, "no_speech_prob": 0.05101718381047249}, {"id": 641, "seek": 489948, "start": 4899.48, "end": 4911.48, "text": " And then after that we want to do this yonida embedding, which is going to send this object E to the graph that just holds a single edge between two distinct vertices and nothing else.", "tokens": [50364, 400, 550, 934, 300, 321, 528, 281, 360, 341, 288, 266, 2887, 12240, 3584, 11, 597, 307, 516, 281, 2845, 341, 2657, 462, 281, 264, 4295, 300, 445, 9190, 257, 2167, 4691, 1296, 732, 10644, 32053, 293, 1825, 1646, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0694734660946593, "compression_ratio": 1.8604651162790697, "no_speech_prob": 0.059881508350372314}, {"id": 642, "seek": 489948, "start": 4911.48, "end": 4917.48, "text": " And also the yonida embedding is going to send V here to the graph that just has a single vertex.", "tokens": [50964, 400, 611, 264, 288, 266, 2887, 12240, 3584, 307, 516, 281, 2845, 691, 510, 281, 264, 4295, 300, 445, 575, 257, 2167, 28162, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0694734660946593, "compression_ratio": 1.8604651162790697, "no_speech_prob": 0.059881508350372314}, {"id": 643, "seek": 489948, "start": 4917.48, "end": 4925.48, "text": " And so when we compose these, we get a diagram in the category of graphs and that diagram is going to look like this.", "tokens": [51264, 400, 370, 562, 321, 35925, 613, 11, 321, 483, 257, 10686, 294, 264, 7719, 295, 24877, 293, 300, 10686, 307, 516, 281, 574, 411, 341, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0694734660946593, "compression_ratio": 1.8604651162790697, "no_speech_prob": 0.059881508350372314}, {"id": 644, "seek": 492548, "start": 4925.48, "end": 4930.48, "text": " And then we just want to calculate the co-limit of this diagram.", "tokens": [50364, 400, 550, 321, 445, 528, 281, 8873, 264, 598, 12, 4197, 270, 295, 341, 10686, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0715017318725586, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.03940947726368904}, {"id": 645, "seek": 492548, "start": 4930.48, "end": 4940.48, "text": " And basically all that corresponds to is sort of imagine each of these lines here that showing how things getting mapped as a sort of thread.", "tokens": [50614, 400, 1936, 439, 300, 23249, 281, 307, 1333, 295, 3811, 1184, 295, 613, 3876, 510, 300, 4099, 577, 721, 1242, 33318, 382, 257, 1333, 295, 7207, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0715017318725586, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.03940947726368904}, {"id": 646, "seek": 492548, "start": 4940.48, "end": 4945.48, "text": " And we just sort of pull those threads tight and glue the structure together.", "tokens": [51114, 400, 321, 445, 1333, 295, 2235, 729, 19314, 4524, 293, 8998, 264, 3877, 1214, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0715017318725586, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.03940947726368904}, {"id": 647, "seek": 494548, "start": 4945.48, "end": 4960.48, "text": " And you can see that if you do that, you recover the graph that we had originally because this directed edge here has its source and its target as this vertex here.", "tokens": [50364, 400, 291, 393, 536, 300, 498, 291, 360, 300, 11, 291, 8114, 264, 4295, 300, 321, 632, 7993, 570, 341, 12898, 4691, 510, 575, 1080, 4009, 293, 1080, 3779, 382, 341, 28162, 510, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07993877410888672, "compression_ratio": 1.7017543859649122, "no_speech_prob": 0.09234024584293365}, {"id": 648, "seek": 494548, "start": 4960.48, "end": 4968.48, "text": " And this directed edge here is going to be going from one to two.", "tokens": [51114, 400, 341, 12898, 4691, 510, 307, 516, 281, 312, 516, 490, 472, 281, 732, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07993877410888672, "compression_ratio": 1.7017543859649122, "no_speech_prob": 0.09234024584293365}, {"id": 649, "seek": 494548, "start": 4968.48, "end": 4972.48, "text": " And so yes, when we do the co-limits, we get this structure.", "tokens": [51514, 400, 370, 2086, 11, 562, 321, 360, 264, 598, 12, 4197, 1208, 11, 321, 483, 341, 3877, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07993877410888672, "compression_ratio": 1.7017543859649122, "no_speech_prob": 0.09234024584293365}, {"id": 650, "seek": 497248, "start": 4972.48, "end": 4984.48, "text": " And it's interesting to see how this theorem basically tells us how we can recover our graph from these kind of elementary pieces.", "tokens": [50364, 400, 309, 311, 1880, 281, 536, 577, 341, 20904, 1936, 5112, 505, 577, 321, 393, 8114, 527, 4295, 490, 613, 733, 295, 16429, 3755, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07397657528258207, "compression_ratio": 1.4506172839506173, "no_speech_prob": 0.014020531438291073}, {"id": 651, "seek": 497248, "start": 4984.48, "end": 4995.48, "text": " Okay, so now if we return to the fountain, we return to this expression here for our free co-completion.", "tokens": [50964, 1033, 11, 370, 586, 498, 321, 2736, 281, 264, 29451, 11, 321, 2736, 281, 341, 6114, 510, 337, 527, 1737, 598, 12, 1112, 14657, 313, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07397657528258207, "compression_ratio": 1.4506172839506173, "no_speech_prob": 0.014020531438291073}, {"id": 652, "seek": 499548, "start": 4995.48, "end": 5004.48, "text": " Well, this F hat here, this one YF, this is sometimes called the yonida extension of this functor F.", "tokens": [50364, 1042, 11, 341, 479, 2385, 510, 11, 341, 472, 398, 37, 11, 341, 307, 2171, 1219, 264, 288, 266, 2887, 10320, 295, 341, 1019, 1672, 479, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1759524056405732, "compression_ratio": 1.490566037735849, "no_speech_prob": 0.034432489424943924}, {"id": 653, "seek": 499548, "start": 5004.48, "end": 5011.48, "text": " And it turns out that this is related to another of the super powerful categorical concepts.", "tokens": [50814, 400, 309, 4523, 484, 300, 341, 307, 4077, 281, 1071, 295, 264, 1687, 4005, 19250, 804, 10392, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1759524056405732, "compression_ratio": 1.490566037735849, "no_speech_prob": 0.034432489424943924}, {"id": 654, "seek": 499548, "start": 5011.48, "end": 5015.48, "text": " And that's the idea of a weighted co-limit.", "tokens": [51164, 400, 300, 311, 264, 1558, 295, 257, 32807, 598, 12, 4197, 270, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1759524056405732, "compression_ratio": 1.490566037735849, "no_speech_prob": 0.034432489424943924}, {"id": 655, "seek": 501548, "start": 5015.48, "end": 5019.48, "text": " So the connection is pretty simple.", "tokens": [50364, 407, 264, 4984, 307, 1238, 2199, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11484503746032715, "compression_ratio": 1.5649717514124293, "no_speech_prob": 0.2839615046977997}, {"id": 656, "seek": 501548, "start": 5019.48, "end": 5029.48, "text": " If we have a functor W in this category up here, this category of pre-sheaves, if W is a pre-sheave basically.", "tokens": [50564, 759, 321, 362, 257, 1019, 1672, 343, 294, 341, 7719, 493, 510, 11, 341, 7719, 295, 659, 12, 9611, 5423, 11, 498, 343, 307, 257, 659, 12, 9611, 946, 1936, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11484503746032715, "compression_ratio": 1.5649717514124293, "no_speech_prob": 0.2839615046977997}, {"id": 657, "seek": 501548, "start": 5029.48, "end": 5038.48, "text": " Well, when we do F hat on W, we can call that result the W-weighted co-limit of F.", "tokens": [51064, 1042, 11, 562, 321, 360, 479, 2385, 322, 343, 11, 321, 393, 818, 300, 1874, 264, 343, 12, 12329, 292, 598, 12, 4197, 270, 295, 479, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11484503746032715, "compression_ratio": 1.5649717514124293, "no_speech_prob": 0.2839615046977997}, {"id": 658, "seek": 501548, "start": 5038.48, "end": 5043.48, "text": " And so this is this idea of weighted co-limits.", "tokens": [51514, 400, 370, 341, 307, 341, 1558, 295, 32807, 598, 12, 4197, 1208, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11484503746032715, "compression_ratio": 1.5649717514124293, "no_speech_prob": 0.2839615046977997}, {"id": 659, "seek": 504348, "start": 5043.48, "end": 5048.48, "text": " And they're normally characterized in a somewhat different way.", "tokens": [50364, 400, 436, 434, 5646, 29361, 294, 257, 8344, 819, 636, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10562675708049052, "compression_ratio": 1.562874251497006, "no_speech_prob": 0.0014087776653468609}, {"id": 660, "seek": 504348, "start": 5048.48, "end": 5053.48, "text": " Normally one would characterize a weighted co-limit by an expression like this.", "tokens": [50614, 17424, 472, 576, 38463, 257, 32807, 598, 12, 4197, 270, 538, 364, 6114, 411, 341, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10562675708049052, "compression_ratio": 1.562874251497006, "no_speech_prob": 0.0014087776653468609}, {"id": 661, "seek": 504348, "start": 5053.48, "end": 5065.48, "text": " And we'd say that the W-weighted co-limit of F, where F is a functor from C to E and W is a functor from C up to set.", "tokens": [50864, 400, 321, 1116, 584, 300, 264, 343, 12, 12329, 292, 598, 12, 4197, 270, 295, 479, 11, 689, 479, 307, 257, 1019, 1672, 490, 383, 281, 462, 293, 343, 307, 257, 1019, 1672, 490, 383, 493, 281, 992, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10562675708049052, "compression_ratio": 1.562874251497006, "no_speech_prob": 0.0014087776653468609}, {"id": 662, "seek": 506548, "start": 5065.48, "end": 5078.48, "text": " The W-weighted co-limit of F is defined such that we have these kind of isomorphisms natural in E.", "tokens": [50364, 440, 343, 12, 12329, 292, 598, 12, 4197, 270, 295, 479, 307, 7642, 1270, 300, 321, 362, 613, 733, 295, 307, 32702, 13539, 3303, 294, 462, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06189930243570296, "compression_ratio": 1.3782051282051282, "no_speech_prob": 0.023259997367858887}, {"id": 663, "seek": 506548, "start": 5078.48, "end": 5090.48, "text": " But I think it's easier to think of them directly as just being produced by doing this F hat on these pre-sheaves W.", "tokens": [51014, 583, 286, 519, 309, 311, 3571, 281, 519, 295, 552, 3838, 382, 445, 885, 7126, 538, 884, 341, 479, 2385, 322, 613, 659, 12, 9611, 5423, 343, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06189930243570296, "compression_ratio": 1.3782051282051282, "no_speech_prob": 0.023259997367858887}, {"id": 664, "seek": 509048, "start": 5090.48, "end": 5097.48, "text": " So we can see that there are a couple of interesting special cases of these weighted co-limits.", "tokens": [50364, 407, 321, 393, 536, 300, 456, 366, 257, 1916, 295, 1880, 2121, 3331, 295, 613, 32807, 598, 12, 4197, 1208, 13, 50714], "temperature": 0.0, "avg_logprob": -0.04213816255003541, "compression_ratio": 1.6778846153846154, "no_speech_prob": 0.010439787060022354}, {"id": 665, "seek": 509048, "start": 5097.48, "end": 5110.48, "text": " One of them is where we take W to be this diagonal functor here, this functor which is constantly equal to the singleton set.", "tokens": [50714, 1485, 295, 552, 307, 689, 321, 747, 343, 281, 312, 341, 21539, 1019, 1672, 510, 11, 341, 1019, 1672, 597, 307, 6460, 2681, 281, 264, 1522, 14806, 992, 13, 51364], "temperature": 0.0, "avg_logprob": -0.04213816255003541, "compression_ratio": 1.6778846153846154, "no_speech_prob": 0.010439787060022354}, {"id": 666, "seek": 509048, "start": 5110.48, "end": 5118.48, "text": " And if we use that as our weight, then it turns out that our weighted co-limit is just going to look like an ordinary co-limit.", "tokens": [51364, 400, 498, 321, 764, 300, 382, 527, 3364, 11, 550, 309, 4523, 484, 300, 527, 32807, 598, 12, 4197, 270, 307, 445, 516, 281, 574, 411, 364, 10547, 598, 12, 4197, 270, 13, 51764], "temperature": 0.0, "avg_logprob": -0.04213816255003541, "compression_ratio": 1.6778846153846154, "no_speech_prob": 0.010439787060022354}, {"id": 667, "seek": 511848, "start": 5118.48, "end": 5126.48, "text": " And you can check that by unpacking the actual formulas that we've got for F hat as we've described above.", "tokens": [50364, 400, 291, 393, 1520, 300, 538, 26699, 278, 264, 3539, 30546, 300, 321, 600, 658, 337, 479, 2385, 382, 321, 600, 7619, 3673, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07470718489752876, "compression_ratio": 1.7107843137254901, "no_speech_prob": 0.018943633884191513}, {"id": 668, "seek": 511848, "start": 5126.48, "end": 5135.48, "text": " Now, another thing that you could do with this formula is you could instead set C to be a singleton set.", "tokens": [50764, 823, 11, 1071, 551, 300, 291, 727, 360, 365, 341, 8513, 307, 291, 727, 2602, 992, 383, 281, 312, 257, 1522, 14806, 992, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07470718489752876, "compression_ratio": 1.7107843137254901, "no_speech_prob": 0.018943633884191513}, {"id": 669, "seek": 511848, "start": 5135.48, "end": 5141.48, "text": " Is you could instead set C to be the trivial category of a single object.", "tokens": [51214, 1119, 291, 727, 2602, 992, 383, 281, 312, 264, 26703, 7719, 295, 257, 2167, 2657, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07470718489752876, "compression_ratio": 1.7107843137254901, "no_speech_prob": 0.018943633884191513}, {"id": 670, "seek": 511848, "start": 5141.48, "end": 5146.48, "text": " In that case, F is just going to be an object of E essentially.", "tokens": [51514, 682, 300, 1389, 11, 479, 307, 445, 516, 281, 312, 364, 2657, 295, 462, 4476, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07470718489752876, "compression_ratio": 1.7107843137254901, "no_speech_prob": 0.018943633884191513}, {"id": 671, "seek": 514648, "start": 5146.48, "end": 5160.48, "text": " And if you look at the meaning of this formula in this case, well, it reduces to this kind of form.", "tokens": [50364, 400, 498, 291, 574, 412, 264, 3620, 295, 341, 8513, 294, 341, 1389, 11, 731, 11, 309, 18081, 281, 341, 733, 295, 1254, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10644555541704286, "compression_ratio": 1.3410852713178294, "no_speech_prob": 0.012599158100783825}, {"id": 672, "seek": 514648, "start": 5160.48, "end": 5169.48, "text": " And you see where we wrote a co-lim W of F, we're now writing W dot of F.", "tokens": [51064, 400, 291, 536, 689, 321, 4114, 257, 598, 12, 4197, 343, 295, 479, 11, 321, 434, 586, 3579, 343, 5893, 295, 479, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10644555541704286, "compression_ratio": 1.3410852713178294, "no_speech_prob": 0.012599158100783825}, {"id": 673, "seek": 516948, "start": 5169.48, "end": 5180.48, "text": " And that's because this thing over here is what's known as the co-powering of F by W.", "tokens": [50364, 400, 300, 311, 570, 341, 551, 670, 510, 307, 437, 311, 2570, 382, 264, 598, 12, 9513, 278, 295, 479, 538, 343, 13, 50914], "temperature": 0.0, "avg_logprob": -0.056503254434336785, "compression_ratio": 1.5705521472392638, "no_speech_prob": 0.04527300223708153}, {"id": 674, "seek": 516948, "start": 5180.48, "end": 5196.48, "text": " And you can really think of it like if this category E has co-products, then you can think of this expression here as the co-product of this object F with itself W times.", "tokens": [50914, 400, 291, 393, 534, 519, 295, 309, 411, 498, 341, 7719, 462, 575, 598, 12, 33244, 82, 11, 550, 291, 393, 519, 295, 341, 6114, 510, 382, 264, 598, 12, 33244, 295, 341, 2657, 479, 365, 2564, 343, 1413, 13, 51714], "temperature": 0.0, "avg_logprob": -0.056503254434336785, "compression_ratio": 1.5705521472392638, "no_speech_prob": 0.04527300223708153}, {"id": 675, "seek": 519648, "start": 5196.48, "end": 5209.48, "text": " So if we think of W now as a set, let's say it's a set of three elements, well, this would just be F plus F plus F.", "tokens": [50364, 407, 498, 321, 519, 295, 343, 586, 382, 257, 992, 11, 718, 311, 584, 309, 311, 257, 992, 295, 1045, 4959, 11, 731, 11, 341, 576, 445, 312, 479, 1804, 479, 1804, 479, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06981839213454932, "compression_ratio": 1.3868613138686132, "no_speech_prob": 0.015900013968348503}, {"id": 676, "seek": 519648, "start": 5209.48, "end": 5217.48, "text": " So this is basically F co-product with itself once for every element in W.", "tokens": [51014, 407, 341, 307, 1936, 479, 598, 12, 33244, 365, 2564, 1564, 337, 633, 4478, 294, 343, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06981839213454932, "compression_ratio": 1.3868613138686132, "no_speech_prob": 0.015900013968348503}, {"id": 677, "seek": 521748, "start": 5217.48, "end": 5231.48, "text": " And you can see that this kind of expression here ought to hold, right, because like let's say W was a two element set, well, this would be like an arrow from F plus F to E.", "tokens": [50364, 400, 291, 393, 536, 300, 341, 733, 295, 6114, 510, 13416, 281, 1797, 11, 558, 11, 570, 411, 718, 311, 584, 343, 390, 257, 732, 4478, 992, 11, 731, 11, 341, 576, 312, 411, 364, 11610, 490, 479, 1804, 479, 281, 462, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09329264584709616, "compression_ratio": 1.6772486772486772, "no_speech_prob": 0.074668750166893}, {"id": 678, "seek": 521748, "start": 5231.48, "end": 5243.48, "text": " And that's going to correspond with two arrows from F to E, or if you like a function from a two element set, two to set of arrows from F to E.", "tokens": [51064, 400, 300, 311, 516, 281, 6805, 365, 732, 19669, 490, 479, 281, 462, 11, 420, 498, 291, 411, 257, 2445, 490, 257, 732, 4478, 992, 11, 732, 281, 992, 295, 19669, 490, 479, 281, 462, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09329264584709616, "compression_ratio": 1.6772486772486772, "no_speech_prob": 0.074668750166893}, {"id": 679, "seek": 524348, "start": 5243.48, "end": 5250.48, "text": " So this is the idea of so-called co-powering, which is also known as tensoring.", "tokens": [50364, 407, 341, 307, 264, 1558, 295, 370, 12, 11880, 598, 12, 9513, 278, 11, 597, 307, 611, 2570, 382, 10688, 3662, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05072161730598001, "compression_ratio": 1.4491017964071857, "no_speech_prob": 0.032050784677267075}, {"id": 680, "seek": 524348, "start": 5250.48, "end": 5255.48, "text": " And it turns out that we can get something else out of this kind of idea as well.", "tokens": [50714, 400, 309, 4523, 484, 300, 321, 393, 483, 746, 1646, 484, 295, 341, 733, 295, 1558, 382, 731, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05072161730598001, "compression_ratio": 1.4491017964071857, "no_speech_prob": 0.032050784677267075}, {"id": 681, "seek": 524348, "start": 5255.48, "end": 5263.48, "text": " So if we then think of another special case, let's suppose we have a category A.", "tokens": [50964, 407, 498, 321, 550, 519, 295, 1071, 2121, 1389, 11, 718, 311, 7297, 321, 362, 257, 7719, 316, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05072161730598001, "compression_ratio": 1.4491017964071857, "no_speech_prob": 0.032050784677267075}, {"id": 682, "seek": 526348, "start": 5263.48, "end": 5273.48, "text": " And what we're going to do is we're going to set C to equal A op times A, and we're going to set E to equal set.", "tokens": [50364, 400, 437, 321, 434, 516, 281, 360, 307, 321, 434, 516, 281, 992, 383, 281, 2681, 316, 999, 1413, 316, 11, 293, 321, 434, 516, 281, 992, 462, 281, 2681, 992, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09696326851844787, "compression_ratio": 1.7905405405405406, "no_speech_prob": 0.6711928844451904}, {"id": 683, "seek": 526348, "start": 5273.48, "end": 5281.48, "text": " And so what we're going to have as F here is a functor from A op times A to set.", "tokens": [50864, 400, 370, 437, 321, 434, 516, 281, 362, 382, 479, 510, 307, 257, 1019, 1672, 490, 316, 999, 1413, 316, 281, 992, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09696326851844787, "compression_ratio": 1.7905405405405406, "no_speech_prob": 0.6711928844451904}, {"id": 684, "seek": 526348, "start": 5281.48, "end": 5286.48, "text": " So things that have that kind of form are sometimes called bifunctores.", "tokens": [51264, 407, 721, 300, 362, 300, 733, 295, 1254, 366, 2171, 1219, 272, 351, 409, 349, 2706, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09696326851844787, "compression_ratio": 1.7905405405405406, "no_speech_prob": 0.6711928844451904}, {"id": 685, "seek": 528648, "start": 5286.48, "end": 5293.48, "text": " And we'll call this functor H just because it's a bit weird, so we'll give it a different name.", "tokens": [50364, 400, 321, 603, 818, 341, 1019, 1672, 389, 445, 570, 309, 311, 257, 857, 3657, 11, 370, 321, 603, 976, 309, 257, 819, 1315, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09925019222757091, "compression_ratio": 1.4569536423841059, "no_speech_prob": 0.013831742107868195}, {"id": 686, "seek": 528648, "start": 5293.48, "end": 5296.48, "text": " So just write it down.", "tokens": [50714, 407, 445, 2464, 309, 760, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09925019222757091, "compression_ratio": 1.4569536423841059, "no_speech_prob": 0.013831742107868195}, {"id": 687, "seek": 528648, "start": 5296.48, "end": 5308.48, "text": " We're supposing that C is A op times A, we're calling this FH, and we're supposing it's going to set.", "tokens": [50864, 492, 434, 1003, 6110, 300, 383, 307, 316, 999, 1413, 316, 11, 321, 434, 5141, 341, 479, 39, 11, 293, 321, 434, 1003, 6110, 309, 311, 516, 281, 992, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09925019222757091, "compression_ratio": 1.4569536423841059, "no_speech_prob": 0.013831742107868195}, {"id": 688, "seek": 530848, "start": 5308.48, "end": 5316.48, "text": " And now if we look at this particular case, of course, the same kind of resort holds.", "tokens": [50364, 400, 586, 498, 321, 574, 412, 341, 1729, 1389, 11, 295, 1164, 11, 264, 912, 733, 295, 19606, 9190, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09088139253504136, "compression_ratio": 1.6174863387978142, "no_speech_prob": 0.017368508502840996}, {"id": 689, "seek": 530848, "start": 5316.48, "end": 5328.48, "text": " But what we can do is consider a special case where this W here, so here W is going to be going from C op to set,", "tokens": [50764, 583, 437, 321, 393, 360, 307, 1949, 257, 2121, 1389, 689, 341, 343, 510, 11, 370, 510, 343, 307, 516, 281, 312, 516, 490, 383, 999, 281, 992, 11, 51364], "temperature": 0.0, "avg_logprob": -0.09088139253504136, "compression_ratio": 1.6174863387978142, "no_speech_prob": 0.017368508502840996}, {"id": 690, "seek": 530848, "start": 5328.48, "end": 5337.48, "text": " or if you like, it's going from A times A op to set, so that's the form that W is going to have.", "tokens": [51364, 420, 498, 291, 411, 11, 309, 311, 516, 490, 316, 1413, 316, 999, 281, 992, 11, 370, 300, 311, 264, 1254, 300, 343, 307, 516, 281, 362, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09088139253504136, "compression_ratio": 1.6174863387978142, "no_speech_prob": 0.017368508502840996}, {"id": 691, "seek": 533748, "start": 5337.48, "end": 5347.48, "text": " Well, we're going to consider the case where W is the humfunctor of A op.", "tokens": [50364, 1042, 11, 321, 434, 516, 281, 1949, 264, 1389, 689, 343, 307, 264, 1484, 15930, 1672, 295, 316, 999, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1003456950187683, "compression_ratio": 1.68, "no_speech_prob": 0.0019805917982012033}, {"id": 692, "seek": 533748, "start": 5347.48, "end": 5353.48, "text": " Because the humfunctor of A is going to be a functor from A op times A to set.", "tokens": [50864, 1436, 264, 1484, 15930, 1672, 295, 316, 307, 516, 281, 312, 257, 1019, 1672, 490, 316, 999, 1413, 316, 281, 992, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1003456950187683, "compression_ratio": 1.68, "no_speech_prob": 0.0019805917982012033}, {"id": 693, "seek": 533748, "start": 5353.48, "end": 5359.48, "text": " So the humfunctor of A op is going to have this kind of form here.", "tokens": [51164, 407, 264, 1484, 15930, 1672, 295, 316, 999, 307, 516, 281, 362, 341, 733, 295, 1254, 510, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1003456950187683, "compression_ratio": 1.68, "no_speech_prob": 0.0019805917982012033}, {"id": 694, "seek": 533748, "start": 5359.48, "end": 5361.48, "text": " And so we'll take that as our W.", "tokens": [51464, 400, 370, 321, 603, 747, 300, 382, 527, 343, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1003456950187683, "compression_ratio": 1.68, "no_speech_prob": 0.0019805917982012033}, {"id": 695, "seek": 536148, "start": 5361.48, "end": 5371.48, "text": " And now if we just work out what this kind of thing is,", "tokens": [50364, 400, 586, 498, 321, 445, 589, 484, 437, 341, 733, 295, 551, 307, 11, 50864], "temperature": 0.0, "avg_logprob": -0.12624629806069768, "compression_ratio": 1.247191011235955, "no_speech_prob": 0.07455649226903915}, {"id": 696, "seek": 536148, "start": 5371.48, "end": 5377.48, "text": " well, what we end up with is this sort of formula here.", "tokens": [50864, 731, 11, 437, 321, 917, 493, 365, 307, 341, 1333, 295, 8513, 510, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12624629806069768, "compression_ratio": 1.247191011235955, "no_speech_prob": 0.07455649226903915}, {"id": 697, "seek": 537748, "start": 5377.48, "end": 5393.48, "text": " So we're doing this arrow here, which we should probably put H here now instead of a W.", "tokens": [50364, 407, 321, 434, 884, 341, 11610, 510, 11, 597, 321, 820, 1391, 829, 389, 510, 586, 2602, 295, 257, 343, 13, 51164], "temperature": 0.0, "avg_logprob": -0.13724807689064428, "compression_ratio": 1.2178217821782178, "no_speech_prob": 0.09905455261468887}, {"id": 698, "seek": 537748, "start": 5393.48, "end": 5400.48, "text": " We're doing H hat on this hum A op.", "tokens": [51164, 492, 434, 884, 389, 2385, 322, 341, 1484, 316, 999, 13, 51514], "temperature": 0.0, "avg_logprob": -0.13724807689064428, "compression_ratio": 1.2178217821782178, "no_speech_prob": 0.09905455261468887}, {"id": 699, "seek": 540048, "start": 5400.48, "end": 5411.48, "text": " So what we have here is that this is H hat operating on hum of A op.", "tokens": [50364, 407, 437, 321, 362, 510, 307, 300, 341, 307, 389, 2385, 7447, 322, 1484, 295, 316, 999, 13, 50914], "temperature": 0.0, "avg_logprob": -0.056867425506179396, "compression_ratio": 1.5235294117647058, "no_speech_prob": 0.048036638647317886}, {"id": 700, "seek": 540048, "start": 5411.48, "end": 5414.48, "text": " And we can write it directly like this.", "tokens": [50914, 400, 321, 393, 2464, 309, 3838, 411, 341, 13, 51064], "temperature": 0.0, "avg_logprob": -0.056867425506179396, "compression_ratio": 1.5235294117647058, "no_speech_prob": 0.048036638647317886}, {"id": 701, "seek": 540048, "start": 5414.48, "end": 5419.48, "text": " Here's the same thing written as a weighted co-limit.", "tokens": [51064, 1692, 311, 264, 912, 551, 3720, 382, 257, 32807, 598, 12, 4197, 270, 13, 51314], "temperature": 0.0, "avg_logprob": -0.056867425506179396, "compression_ratio": 1.5235294117647058, "no_speech_prob": 0.048036638647317886}, {"id": 702, "seek": 540048, "start": 5419.48, "end": 5426.48, "text": " But now what I'm telling you is that there's this other idea in category theory called a co-end.", "tokens": [51314, 583, 586, 437, 286, 478, 3585, 291, 307, 300, 456, 311, 341, 661, 1558, 294, 7719, 5261, 1219, 257, 598, 12, 521, 13, 51664], "temperature": 0.0, "avg_logprob": -0.056867425506179396, "compression_ratio": 1.5235294117647058, "no_speech_prob": 0.048036638647317886}, {"id": 703, "seek": 542648, "start": 5426.48, "end": 5431.48, "text": " And it turns out that we can really define a co-end to be this.", "tokens": [50364, 400, 309, 4523, 484, 300, 321, 393, 534, 6964, 257, 598, 12, 521, 281, 312, 341, 13, 50614], "temperature": 0.0, "avg_logprob": -0.030820918370442218, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.003371621249243617}, {"id": 704, "seek": 542648, "start": 5431.48, "end": 5442.48, "text": " So the co-end of this bifunctor H can be defined to be the hum A op weighted co-limit of H.", "tokens": [50614, 407, 264, 598, 12, 521, 295, 341, 272, 351, 409, 1672, 389, 393, 312, 7642, 281, 312, 264, 1484, 316, 999, 32807, 598, 12, 4197, 270, 295, 389, 13, 51164], "temperature": 0.0, "avg_logprob": -0.030820918370442218, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.003371621249243617}, {"id": 705, "seek": 542648, "start": 5442.48, "end": 5447.48, "text": " And we usually write these co-ends with this kind of integral form like this", "tokens": [51164, 400, 321, 2673, 2464, 613, 598, 12, 2581, 365, 341, 733, 295, 11573, 1254, 411, 341, 51414], "temperature": 0.0, "avg_logprob": -0.030820918370442218, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.003371621249243617}, {"id": 706, "seek": 542648, "start": 5447.48, "end": 5451.48, "text": " with the kind of thing that we're integrating upstairs.", "tokens": [51414, 365, 264, 733, 295, 551, 300, 321, 434, 26889, 16462, 13, 51614], "temperature": 0.0, "avg_logprob": -0.030820918370442218, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.003371621249243617}, {"id": 707, "seek": 545148, "start": 5451.48, "end": 5460.48, "text": " So there we are. We've just got this notion of co-ends totally free out of this theory.", "tokens": [50364, 407, 456, 321, 366, 13, 492, 600, 445, 658, 341, 10710, 295, 598, 12, 2581, 3879, 1737, 484, 295, 341, 5261, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10264550989324396, "compression_ratio": 1.3493150684931507, "no_speech_prob": 0.010643362998962402}, {"id": 708, "seek": 545148, "start": 5460.48, "end": 5466.48, "text": " Okay, so now we're ready for the final application of these big ideas.", "tokens": [50814, 1033, 11, 370, 586, 321, 434, 1919, 337, 264, 2572, 3861, 295, 613, 955, 3487, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10264550989324396, "compression_ratio": 1.3493150684931507, "no_speech_prob": 0.010643362998962402}, {"id": 709, "seek": 545148, "start": 5466.48, "end": 5470.48, "text": " And that is understanding profunctals.", "tokens": [51114, 400, 300, 307, 3701, 1740, 409, 349, 1124, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10264550989324396, "compression_ratio": 1.3493150684931507, "no_speech_prob": 0.010643362998962402}, {"id": 710, "seek": 547048, "start": 5470.48, "end": 5480.48, "text": " So a profunctor from A to B is the same thing as a functor P from A op times B to set.", "tokens": [50364, 407, 257, 1740, 409, 1672, 490, 316, 281, 363, 307, 264, 912, 551, 382, 257, 1019, 1672, 430, 490, 316, 999, 1413, 363, 281, 992, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08417860049645877, "compression_ratio": 1.7150537634408602, "no_speech_prob": 0.09243354946374893}, {"id": 711, "seek": 547048, "start": 5480.48, "end": 5489.48, "text": " And a good way to think of it is that, well, you can think of it as a generalization of a humfunctor.", "tokens": [50864, 400, 257, 665, 636, 281, 519, 295, 309, 307, 300, 11, 731, 11, 291, 393, 519, 295, 309, 382, 257, 2674, 2144, 295, 257, 1484, 15930, 1672, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08417860049645877, "compression_ratio": 1.7150537634408602, "no_speech_prob": 0.09243354946374893}, {"id": 712, "seek": 547048, "start": 5489.48, "end": 5492.48, "text": " That's quite a good way of looking at it.", "tokens": [51314, 663, 311, 1596, 257, 665, 636, 295, 1237, 412, 309, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08417860049645877, "compression_ratio": 1.7150537634408602, "no_speech_prob": 0.09243354946374893}, {"id": 713, "seek": 547048, "start": 5492.48, "end": 5498.48, "text": " So, you know, if A equals B and this is a humfunctor, well, that's a kind of profunctor.", "tokens": [51464, 407, 11, 291, 458, 11, 498, 316, 6915, 363, 293, 341, 307, 257, 1484, 15930, 1672, 11, 731, 11, 300, 311, 257, 733, 295, 1740, 409, 1672, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08417860049645877, "compression_ratio": 1.7150537634408602, "no_speech_prob": 0.09243354946374893}, {"id": 714, "seek": 549848, "start": 5498.48, "end": 5506.48, "text": " Or you can think, well, I'm sending a pair of an object of A and an object of B to this set.", "tokens": [50364, 1610, 291, 393, 519, 11, 731, 11, 286, 478, 7750, 257, 6119, 295, 364, 2657, 295, 316, 293, 364, 2657, 295, 363, 281, 341, 992, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07999319158574586, "compression_ratio": 2.0689655172413794, "no_speech_prob": 0.02092595212161541}, {"id": 715, "seek": 549848, "start": 5506.48, "end": 5514.48, "text": " And you can kind of maybe think about something like the set of proofs that A implies B or something like this.", "tokens": [50764, 400, 291, 393, 733, 295, 1310, 519, 466, 746, 411, 264, 992, 295, 8177, 82, 300, 316, 18779, 363, 420, 746, 411, 341, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07999319158574586, "compression_ratio": 2.0689655172413794, "no_speech_prob": 0.02092595212161541}, {"id": 716, "seek": 549848, "start": 5514.48, "end": 5523.48, "text": " Or maybe you can think about something like the set of proofs that the first proposition, the object in A,", "tokens": [51164, 1610, 1310, 291, 393, 519, 466, 746, 411, 264, 992, 295, 8177, 82, 300, 264, 700, 24830, 11, 264, 2657, 294, 316, 11, 51614], "temperature": 0.0, "avg_logprob": -0.07999319158574586, "compression_ratio": 2.0689655172413794, "no_speech_prob": 0.02092595212161541}, {"id": 717, "seek": 549848, "start": 5523.48, "end": 5526.48, "text": " implies the second proposition, the object in B.", "tokens": [51614, 18779, 264, 1150, 24830, 11, 264, 2657, 294, 363, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07999319158574586, "compression_ratio": 2.0689655172413794, "no_speech_prob": 0.02092595212161541}, {"id": 718, "seek": 552648, "start": 5526.48, "end": 5530.48, "text": " There's various different types of intuition that you can have.", "tokens": [50364, 821, 311, 3683, 819, 3467, 295, 24002, 300, 291, 393, 362, 13, 50564], "temperature": 0.0, "avg_logprob": -0.04481255396818503, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.014258385635912418}, {"id": 719, "seek": 552648, "start": 5530.48, "end": 5535.48, "text": " Now, it turns out that there's a category of profunctals.", "tokens": [50564, 823, 11, 309, 4523, 484, 300, 456, 311, 257, 7719, 295, 1740, 409, 349, 1124, 13, 50814], "temperature": 0.0, "avg_logprob": -0.04481255396818503, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.014258385635912418}, {"id": 720, "seek": 552648, "start": 5535.48, "end": 5541.48, "text": " And with this kind of machinery we've been talking about today, we can understand it.", "tokens": [50814, 400, 365, 341, 733, 295, 27302, 321, 600, 668, 1417, 466, 965, 11, 321, 393, 1223, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.04481255396818503, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.014258385635912418}, {"id": 721, "seek": 552648, "start": 5541.48, "end": 5548.48, "text": " So, as I say, a profunctor P corresponds to a functor of this kind of form.", "tokens": [51114, 407, 11, 382, 286, 584, 11, 257, 1740, 409, 1672, 430, 23249, 281, 257, 1019, 1672, 295, 341, 733, 295, 1254, 13, 51464], "temperature": 0.0, "avg_logprob": -0.04481255396818503, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.014258385635912418}, {"id": 722, "seek": 554848, "start": 5548.48, "end": 5557.48, "text": " We're free to apply a kind of swap of the order on the left and some currying.", "tokens": [50364, 492, 434, 1737, 281, 3079, 257, 733, 295, 18135, 295, 264, 1668, 322, 264, 1411, 293, 512, 18123, 278, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09608492287256384, "compression_ratio": 1.5420560747663552, "no_speech_prob": 0.039492543786764145}, {"id": 723, "seek": 554848, "start": 5557.48, "end": 5560.48, "text": " And then we can change it into a functor of this kind of form.", "tokens": [50814, 400, 550, 321, 393, 1319, 309, 666, 257, 1019, 1672, 295, 341, 733, 295, 1254, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09608492287256384, "compression_ratio": 1.5420560747663552, "no_speech_prob": 0.039492543786764145}, {"id": 724, "seek": 554848, "start": 5560.48, "end": 5562.48, "text": " So, we'll call that P dash.", "tokens": [50964, 407, 11, 321, 603, 818, 300, 430, 8240, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09608492287256384, "compression_ratio": 1.5420560747663552, "no_speech_prob": 0.039492543786764145}, {"id": 725, "seek": 554848, "start": 5562.48, "end": 5565.48, "text": " That's clearly an equivalent form.", "tokens": [51064, 663, 311, 4448, 364, 10344, 1254, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09608492287256384, "compression_ratio": 1.5420560747663552, "no_speech_prob": 0.039492543786764145}, {"id": 726, "seek": 554848, "start": 5565.48, "end": 5576.48, "text": " But the sort of maths that we've been talking about today tells us that a functor from B to this category of pre-sheaves here", "tokens": [51214, 583, 264, 1333, 295, 36287, 300, 321, 600, 668, 1417, 466, 965, 5112, 505, 300, 257, 1019, 1672, 490, 363, 281, 341, 7719, 295, 659, 12, 9611, 5423, 510, 51764], "temperature": 0.0, "avg_logprob": -0.09608492287256384, "compression_ratio": 1.5420560747663552, "no_speech_prob": 0.039492543786764145}, {"id": 727, "seek": 557648, "start": 5576.48, "end": 5581.48, "text": " corresponds to a co-continuous functor of this kind of form.", "tokens": [50364, 23249, 281, 257, 598, 12, 9000, 259, 12549, 1019, 1672, 295, 341, 733, 295, 1254, 13, 50614], "temperature": 0.0, "avg_logprob": -0.05037021155309195, "compression_ratio": 1.6108597285067874, "no_speech_prob": 0.008049250580370426}, {"id": 728, "seek": 557648, "start": 5581.48, "end": 5587.48, "text": " A co-continuous functor between these two categories of pre-sheaves.", "tokens": [50614, 316, 598, 12, 9000, 259, 12549, 1019, 1672, 1296, 613, 732, 10479, 295, 659, 12, 9611, 5423, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05037021155309195, "compression_ratio": 1.6108597285067874, "no_speech_prob": 0.008049250580370426}, {"id": 729, "seek": 557648, "start": 5587.48, "end": 5592.48, "text": " So, this is another equivalent form for this profunctor P.", "tokens": [50914, 407, 11, 341, 307, 1071, 10344, 1254, 337, 341, 1740, 409, 1672, 430, 13, 51164], "temperature": 0.0, "avg_logprob": -0.05037021155309195, "compression_ratio": 1.6108597285067874, "no_speech_prob": 0.008049250580370426}, {"id": 730, "seek": 557648, "start": 5592.48, "end": 5600.48, "text": " Now, there's a nice analogy in what's going on here with linear algebra.", "tokens": [51164, 823, 11, 456, 311, 257, 1481, 21663, 294, 437, 311, 516, 322, 510, 365, 8213, 21989, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05037021155309195, "compression_ratio": 1.6108597285067874, "no_speech_prob": 0.008049250580370426}, {"id": 731, "seek": 557648, "start": 5600.48, "end": 5605.48, "text": " I haven't covered linear algebra in this course if this doesn't mean much to you, don't worry.", "tokens": [51564, 286, 2378, 380, 5343, 8213, 21989, 294, 341, 1164, 498, 341, 1177, 380, 914, 709, 281, 291, 11, 500, 380, 3292, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05037021155309195, "compression_ratio": 1.6108597285067874, "no_speech_prob": 0.008049250580370426}, {"id": 732, "seek": 560548, "start": 5605.48, "end": 5608.48, "text": " This is the basic sort of analogy.", "tokens": [50364, 639, 307, 264, 3875, 1333, 295, 21663, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06779744074894832, "compression_ratio": 1.6041666666666667, "no_speech_prob": 0.0683395266532898}, {"id": 733, "seek": 560548, "start": 5608.48, "end": 5619.48, "text": " It's that if you think about A and B as finite sets, then we could have an A times B matrix.", "tokens": [50514, 467, 311, 300, 498, 291, 519, 466, 316, 293, 363, 382, 19362, 6352, 11, 550, 321, 727, 362, 364, 316, 1413, 363, 8141, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06779744074894832, "compression_ratio": 1.6041666666666667, "no_speech_prob": 0.0683395266532898}, {"id": 734, "seek": 560548, "start": 5619.48, "end": 5627.48, "text": " And that corresponds to a linear map from B dimensional space to A dimensional space.", "tokens": [51064, 400, 300, 23249, 281, 257, 8213, 4471, 490, 363, 18795, 1901, 281, 316, 18795, 1901, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06779744074894832, "compression_ratio": 1.6041666666666667, "no_speech_prob": 0.0683395266532898}, {"id": 735, "seek": 560548, "start": 5627.48, "end": 5634.48, "text": " We could also think of it as just a function sending the elements of B to A dimensional space.", "tokens": [51464, 492, 727, 611, 519, 295, 309, 382, 445, 257, 2445, 7750, 264, 4959, 295, 363, 281, 316, 18795, 1901, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06779744074894832, "compression_ratio": 1.6041666666666667, "no_speech_prob": 0.0683395266532898}, {"id": 736, "seek": 563448, "start": 5634.48, "end": 5640.48, "text": " And if you look at this pattern, it's pretty much analogous with this pattern here.", "tokens": [50364, 400, 498, 291, 574, 412, 341, 5102, 11, 309, 311, 1238, 709, 16660, 563, 365, 341, 5102, 510, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1049192300003566, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.007566504180431366}, {"id": 737, "seek": 563448, "start": 5640.48, "end": 5645.48, "text": " It's just here we have profunctores instead of functions.", "tokens": [50664, 467, 311, 445, 510, 321, 362, 1740, 409, 349, 2706, 2602, 295, 6828, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1049192300003566, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.007566504180431366}, {"id": 738, "seek": 563448, "start": 5645.48, "end": 5651.48, "text": " And we have co-continuous functores instead of linear functions.", "tokens": [50914, 400, 321, 362, 598, 12, 9000, 259, 12549, 1019, 349, 2706, 2602, 295, 8213, 6828, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1049192300003566, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.007566504180431366}, {"id": 739, "seek": 563448, "start": 5651.48, "end": 5660.48, "text": " But basically, the idea is that once we start with a profunctor of this form, we can convert it into this form trivially.", "tokens": [51214, 583, 1936, 11, 264, 1558, 307, 300, 1564, 321, 722, 365, 257, 1740, 409, 1672, 295, 341, 1254, 11, 321, 393, 7620, 309, 666, 341, 1254, 1376, 85, 2270, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1049192300003566, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.007566504180431366}, {"id": 740, "seek": 566048, "start": 5660.48, "end": 5668.48, "text": " And then this idea of free co-completeness, and in particular this type of diagram here,", "tokens": [50364, 400, 550, 341, 1558, 295, 1737, 598, 12, 1112, 14657, 15264, 11, 293, 294, 1729, 341, 2010, 295, 10686, 510, 11, 50764], "temperature": 0.0, "avg_logprob": -0.08612251281738281, "compression_ratio": 1.497142857142857, "no_speech_prob": 0.007221700623631477}, {"id": 741, "seek": 566048, "start": 5668.48, "end": 5678.48, "text": " gives us this equivalent co-continuous functor, which sort of corresponds with this functor P-dash.", "tokens": [50764, 2709, 505, 341, 10344, 598, 12, 9000, 259, 12549, 1019, 1672, 11, 597, 1333, 295, 23249, 365, 341, 1019, 1672, 430, 12, 67, 1299, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08612251281738281, "compression_ratio": 1.497142857142857, "no_speech_prob": 0.007221700623631477}, {"id": 742, "seek": 566048, "start": 5678.48, "end": 5684.48, "text": " And this turns out to be the key towards defining profunctor composition.", "tokens": [51264, 400, 341, 4523, 484, 281, 312, 264, 2141, 3030, 17827, 1740, 409, 1672, 12686, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08612251281738281, "compression_ratio": 1.497142857142857, "no_speech_prob": 0.007221700623631477}, {"id": 743, "seek": 568448, "start": 5684.48, "end": 5695.48, "text": " You see, there's actually a category called prof, and it has objects as categories, and it has arrows as profunctores.", "tokens": [50364, 509, 536, 11, 456, 311, 767, 257, 7719, 1219, 1740, 11, 293, 309, 575, 6565, 382, 10479, 11, 293, 309, 575, 19669, 382, 1740, 409, 349, 2706, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10084218827504961, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.10496320575475693}, {"id": 744, "seek": 568448, "start": 5695.48, "end": 5708.48, "text": " Now, the identity arrow of an object A is just going to be this profunctor, which is just the hom functor of A.", "tokens": [50914, 823, 11, 264, 6575, 11610, 295, 364, 2657, 316, 307, 445, 516, 281, 312, 341, 1740, 409, 1672, 11, 597, 307, 445, 264, 3655, 1019, 1672, 295, 316, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10084218827504961, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.10496320575475693}, {"id": 745, "seek": 570848, "start": 5708.48, "end": 5717.48, "text": " That's, of course, a functor from... We can, of course, think of that as a functor from A op times A to set.", "tokens": [50364, 663, 311, 11, 295, 1164, 11, 257, 1019, 1672, 490, 485, 492, 393, 11, 295, 1164, 11, 519, 295, 300, 382, 257, 1019, 1672, 490, 316, 999, 1413, 316, 281, 992, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11523875270981386, "compression_ratio": 1.6055555555555556, "no_speech_prob": 0.01881234534084797}, {"id": 746, "seek": 570848, "start": 5717.48, "end": 5726.48, "text": " So it is a profunctor. It turns out that it really acts like the identity in this category of profunctores.", "tokens": [50814, 407, 309, 307, 257, 1740, 409, 1672, 13, 467, 4523, 484, 300, 309, 534, 10672, 411, 264, 6575, 294, 341, 7719, 295, 1740, 409, 349, 2706, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11523875270981386, "compression_ratio": 1.6055555555555556, "no_speech_prob": 0.01881234534084797}, {"id": 747, "seek": 570848, "start": 5726.48, "end": 5733.48, "text": " A more interesting question is, how can we compose general profunctores?", "tokens": [51264, 316, 544, 1880, 1168, 307, 11, 577, 393, 321, 35925, 2674, 1740, 409, 349, 2706, 30, 51614], "temperature": 0.0, "avg_logprob": -0.11523875270981386, "compression_ratio": 1.6055555555555556, "no_speech_prob": 0.01881234534084797}, {"id": 748, "seek": 573348, "start": 5733.48, "end": 5742.48, "text": " So what about if we have a profunctor P from A to B, and a profunctor Q from B to C, and we want to compose them?", "tokens": [50364, 407, 437, 466, 498, 321, 362, 257, 1740, 409, 1672, 430, 490, 316, 281, 363, 11, 293, 257, 1740, 409, 1672, 1249, 490, 363, 281, 383, 11, 293, 321, 528, 281, 35925, 552, 30, 50814], "temperature": 0.0, "avg_logprob": -0.07247414271036784, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.02440439909696579}, {"id": 749, "seek": 573348, "start": 5742.48, "end": 5753.48, "text": " Well, then we want to end up with some kind of thing that we could call a composition, which ends up being a functor from A op times C to set.", "tokens": [50814, 1042, 11, 550, 321, 528, 281, 917, 493, 365, 512, 733, 295, 551, 300, 321, 727, 818, 257, 12686, 11, 597, 5314, 493, 885, 257, 1019, 1672, 490, 316, 999, 1413, 383, 281, 992, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07247414271036784, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.02440439909696579}, {"id": 750, "seek": 575348, "start": 5754.48, "end": 5760.48, "text": " And it turns out that, basically, we can just define it to be this kind of composition here.", "tokens": [50414, 400, 309, 4523, 484, 300, 11, 1936, 11, 321, 393, 445, 6964, 309, 281, 312, 341, 733, 295, 12686, 510, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09903318323987595, "compression_ratio": 1.554054054054054, "no_speech_prob": 0.14004123210906982}, {"id": 751, "seek": 575348, "start": 5760.48, "end": 5767.48, "text": " So this LANYP dash is, as shown in this diagram, we know how to compute it.", "tokens": [50714, 407, 341, 37387, 56, 47, 8240, 307, 11, 382, 4898, 294, 341, 10686, 11, 321, 458, 577, 281, 14722, 309, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09903318323987595, "compression_ratio": 1.554054054054054, "no_speech_prob": 0.14004123210906982}, {"id": 752, "seek": 575348, "start": 5767.48, "end": 5770.48, "text": " We've looked at a formula for it earlier and so on.", "tokens": [51064, 492, 600, 2956, 412, 257, 8513, 337, 309, 3071, 293, 370, 322, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09903318323987595, "compression_ratio": 1.554054054054054, "no_speech_prob": 0.14004123210906982}, {"id": 753, "seek": 575348, "start": 5770.48, "end": 5779.48, "text": " And if we just compose this after this, you can see that we have something that goes from C to this category of pre-sheaves.", "tokens": [51214, 400, 498, 321, 445, 35925, 341, 934, 341, 11, 291, 393, 536, 300, 321, 362, 746, 300, 1709, 490, 383, 281, 341, 7719, 295, 659, 12, 9611, 5423, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09903318323987595, "compression_ratio": 1.554054054054054, "no_speech_prob": 0.14004123210906982}, {"id": 754, "seek": 577948, "start": 5779.48, "end": 5789.48, "text": " And if we just sort of untangle this, we can put it into this kind of form and consider it to be the composition Q after P.", "tokens": [50364, 400, 498, 321, 445, 1333, 295, 1701, 7846, 341, 11, 321, 393, 829, 309, 666, 341, 733, 295, 1254, 293, 1949, 309, 281, 312, 264, 12686, 1249, 934, 430, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11744298140207926, "compression_ratio": 1.525925925925926, "no_speech_prob": 0.0036458142567425966}, {"id": 755, "seek": 577948, "start": 5789.48, "end": 5796.48, "text": " So basically, that's how profunctor...", "tokens": [50864, 407, 1936, 11, 300, 311, 577, 1740, 409, 1672, 485, 51214], "temperature": 0.0, "avg_logprob": -0.11744298140207926, "compression_ratio": 1.525925925925926, "no_speech_prob": 0.0036458142567425966}, {"id": 756, "seek": 577948, "start": 5804.48, "end": 5807.48, "text": " So basically, that's how profunctores work.", "tokens": [51614, 407, 1936, 11, 300, 311, 577, 1740, 409, 349, 2706, 589, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11744298140207926, "compression_ratio": 1.525925925925926, "no_speech_prob": 0.0036458142567425966}, {"id": 757, "seek": 580748, "start": 5807.48, "end": 5816.48, "text": " Now, it turns out that the normal way of thinking about this is that one writes profunctor composition with a co-end formula like this.", "tokens": [50364, 823, 11, 309, 4523, 484, 300, 264, 2710, 636, 295, 1953, 466, 341, 307, 300, 472, 13657, 1740, 409, 1672, 12686, 365, 257, 598, 12, 521, 8513, 411, 341, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07874567612357762, "compression_ratio": 1.5730994152046784, "no_speech_prob": 0.045929040759801865}, {"id": 758, "seek": 580748, "start": 5816.48, "end": 5826.48, "text": " But, you know, we don't need to do that because we have this way of thinking about it in terms of can extensions and co-completeness.", "tokens": [50814, 583, 11, 291, 458, 11, 321, 500, 380, 643, 281, 360, 300, 570, 321, 362, 341, 636, 295, 1953, 466, 309, 294, 2115, 295, 393, 25129, 293, 598, 12, 1112, 14657, 15264, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07874567612357762, "compression_ratio": 1.5730994152046784, "no_speech_prob": 0.045929040759801865}, {"id": 759, "seek": 582648, "start": 5826.48, "end": 5843.48, "text": " By the way, the stuff I just talked about to do with composing profunctores is basically remark 5.1.7 of Fosco's book, Co-end Calculus, if one wants to dig deeper into this.", "tokens": [50364, 3146, 264, 636, 11, 264, 1507, 286, 445, 2825, 466, 281, 360, 365, 715, 6110, 1740, 409, 349, 2706, 307, 1936, 7942, 1025, 13, 16, 13, 22, 295, 479, 329, 1291, 311, 1446, 11, 3066, 12, 521, 3511, 36002, 11, 498, 472, 2738, 281, 2528, 7731, 666, 341, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12997024324205186, "compression_ratio": 1.5291479820627802, "no_speech_prob": 0.4162282347679138}, {"id": 760, "seek": 582648, "start": 5843.48, "end": 5855.48, "text": " So if you want to understand about profunctores, definitely the best advice I can think of is that you should consider what happens when the categories of profunctores", "tokens": [51214, 407, 498, 291, 528, 281, 1223, 466, 1740, 409, 349, 2706, 11, 2138, 264, 1151, 5192, 286, 393, 519, 295, 307, 300, 291, 820, 1949, 437, 2314, 562, 264, 10479, 295, 1740, 409, 349, 2706, 51814], "temperature": 0.0, "avg_logprob": -0.12997024324205186, "compression_ratio": 1.5291479820627802, "no_speech_prob": 0.4162282347679138}, {"id": 761, "seek": 585548, "start": 5855.48, "end": 5868.48, "text": " are discrete. Okay? Because if you think about it, what's a profunctor from A to B when A and B are discrete categories?", "tokens": [50364, 366, 27706, 13, 1033, 30, 1436, 498, 291, 519, 466, 309, 11, 437, 311, 257, 1740, 409, 1672, 490, 316, 281, 363, 562, 316, 293, 363, 366, 27706, 10479, 30, 51014], "temperature": 0.0, "avg_logprob": -0.12990840967150702, "compression_ratio": 1.5164835164835164, "no_speech_prob": 0.0389980785548687}, {"id": 762, "seek": 585548, "start": 5868.48, "end": 5877.48, "text": " Well, in that case, these things don't have any arrows. It doesn't matter about taking the opposite of the categories because there's no arrows to reverse.", "tokens": [51014, 1042, 11, 294, 300, 1389, 11, 613, 721, 500, 380, 362, 604, 19669, 13, 467, 1177, 380, 1871, 466, 1940, 264, 6182, 295, 264, 10479, 570, 456, 311, 572, 19669, 281, 9943, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12990840967150702, "compression_ratio": 1.5164835164835164, "no_speech_prob": 0.0389980785548687}, {"id": 763, "seek": 587748, "start": 5877.48, "end": 5890.48, "text": " You know, we only have identity arrows. And basically for every object of A and object of B, we just have a set and that's all the data which goes into defining the profunctor.", "tokens": [50364, 509, 458, 11, 321, 787, 362, 6575, 19669, 13, 400, 1936, 337, 633, 2657, 295, 316, 293, 2657, 295, 363, 11, 321, 445, 362, 257, 992, 293, 300, 311, 439, 264, 1412, 597, 1709, 666, 17827, 264, 1740, 409, 1672, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07085496340042506, "compression_ratio": 1.598984771573604, "no_speech_prob": 0.6885365843772888}, {"id": 764, "seek": 587748, "start": 5890.48, "end": 5902.48, "text": " And if we think about finite sets, then essentially we can just think of a profunctor as something like a matrix of non-negative integers.", "tokens": [51014, 400, 498, 321, 519, 466, 19362, 6352, 11, 550, 4476, 321, 393, 445, 519, 295, 257, 1740, 409, 1672, 382, 746, 411, 257, 8141, 295, 2107, 12, 28561, 1166, 41674, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07085496340042506, "compression_ratio": 1.598984771573604, "no_speech_prob": 0.6885365843772888}, {"id": 765, "seek": 590248, "start": 5902.48, "end": 5912.48, "text": " And in that case, if one looks at the way that profunctor composition works, it looks exactly like matrix multiplication.", "tokens": [50364, 400, 294, 300, 1389, 11, 498, 472, 1542, 412, 264, 636, 300, 1740, 409, 1672, 12686, 1985, 11, 309, 1542, 2293, 411, 8141, 27290, 13, 50864], "temperature": 0.0, "avg_logprob": -0.041911400854587555, "compression_ratio": 1.6149425287356323, "no_speech_prob": 0.12753517925739288}, {"id": 766, "seek": 590248, "start": 5912.48, "end": 5923.48, "text": " And this is really beautiful because you'll see that basically if you look at the full subcategory of this category of profunctores on the discrete categories,", "tokens": [50864, 400, 341, 307, 534, 2238, 570, 291, 603, 536, 300, 1936, 498, 291, 574, 412, 264, 1577, 1422, 66, 48701, 295, 341, 7719, 295, 1740, 409, 349, 2706, 322, 264, 27706, 10479, 11, 51414], "temperature": 0.0, "avg_logprob": -0.041911400854587555, "compression_ratio": 1.6149425287356323, "no_speech_prob": 0.12753517925739288}, {"id": 767, "seek": 592348, "start": 5923.48, "end": 5934.48, "text": " well, it just looks like linear algebra basically. It just looks like the profunctores or like matrices and composing them is matrix multiplication.", "tokens": [50364, 731, 11, 309, 445, 1542, 411, 8213, 21989, 1936, 13, 467, 445, 1542, 411, 264, 1740, 409, 349, 2706, 420, 411, 32284, 293, 715, 6110, 552, 307, 8141, 27290, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0886613864165086, "compression_ratio": 1.4344827586206896, "no_speech_prob": 0.2843076288700104}, {"id": 768, "seek": 592348, "start": 5934.48, "end": 5939.48, "text": " That's all there is to it. And so that's kind of beautiful.", "tokens": [50914, 663, 311, 439, 456, 307, 281, 309, 13, 400, 370, 300, 311, 733, 295, 2238, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0886613864165086, "compression_ratio": 1.4344827586206896, "no_speech_prob": 0.2843076288700104}, {"id": 769, "seek": 593948, "start": 5940.48, "end": 5949.48, "text": " The final thing I want to say just to come full circle is that co-ends are another one of these super powerful ideas.", "tokens": [50414, 440, 2572, 551, 286, 528, 281, 584, 445, 281, 808, 1577, 6329, 307, 300, 598, 12, 2581, 366, 1071, 472, 295, 613, 1687, 4005, 3487, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11966141875909299, "compression_ratio": 1.4179104477611941, "no_speech_prob": 0.34455081820487976}, {"id": 770, "seek": 593948, "start": 5949.48, "end": 5958.48, "text": " And it turns out that we can express can extensions in terms of co-ends.", "tokens": [50864, 400, 309, 4523, 484, 300, 321, 393, 5109, 393, 25129, 294, 2115, 295, 598, 12, 2581, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11966141875909299, "compression_ratio": 1.4179104477611941, "no_speech_prob": 0.34455081820487976}, {"id": 771, "seek": 595848, "start": 5958.48, "end": 5972.48, "text": " So when E here has co-powers, we can express this formula for the left can extension here in terms of co-ends like this.", "tokens": [50364, 407, 562, 462, 510, 575, 598, 12, 47953, 11, 321, 393, 5109, 341, 8513, 337, 264, 1411, 393, 10320, 510, 294, 2115, 295, 598, 12, 2581, 411, 341, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09571839942306769, "compression_ratio": 1.3888888888888888, "no_speech_prob": 0.1796247512102127}, {"id": 772, "seek": 595848, "start": 5972.48, "end": 5976.48, "text": " So now we've kind of come full circle.", "tokens": [51064, 407, 586, 321, 600, 733, 295, 808, 1577, 6329, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09571839942306769, "compression_ratio": 1.3888888888888888, "no_speech_prob": 0.1796247512102127}, {"id": 773, "seek": 595848, "start": 5976.48, "end": 5982.48, "text": " And remember, everything I've talked about today can be dualized.", "tokens": [51264, 400, 1604, 11, 1203, 286, 600, 2825, 466, 965, 393, 312, 11848, 1602, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09571839942306769, "compression_ratio": 1.3888888888888888, "no_speech_prob": 0.1796247512102127}, {"id": 774, "seek": 598248, "start": 5982.48, "end": 5993.48, "text": " So if we go back, back, back way back in time to our original diagram.", "tokens": [50364, 407, 498, 321, 352, 646, 11, 646, 11, 646, 636, 646, 294, 565, 281, 527, 3380, 10686, 13, 50914], "temperature": 0.0, "avg_logprob": -0.17543621063232423, "compression_ratio": 1.5231788079470199, "no_speech_prob": 0.059061579406261444}, {"id": 775, "seek": 598248, "start": 5993.48, "end": 5999.48, "text": " Yeah, you can dualize all this. So you've got right can extension here.", "tokens": [50914, 865, 11, 291, 393, 11848, 1125, 439, 341, 13, 407, 291, 600, 658, 558, 393, 10320, 510, 13, 51214], "temperature": 0.0, "avg_logprob": -0.17543621063232423, "compression_ratio": 1.5231788079470199, "no_speech_prob": 0.059061579406261444}, {"id": 776, "seek": 598248, "start": 5999.48, "end": 6006.48, "text": " There's a sort of analog of the yoneder extension. There's the idea of free completion.", "tokens": [51214, 821, 311, 257, 1333, 295, 16660, 295, 264, 288, 266, 10020, 10320, 13, 821, 311, 264, 1558, 295, 1737, 19372, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17543621063232423, "compression_ratio": 1.5231788079470199, "no_speech_prob": 0.059061579406261444}, {"id": 777, "seek": 600648, "start": 6006.48, "end": 6013.48, "text": " We have weighted limits. There's an idea of powering, which is also called co-tensoring and so on.", "tokens": [50364, 492, 362, 32807, 10406, 13, 821, 311, 364, 1558, 295, 1347, 278, 11, 597, 307, 611, 1219, 598, 12, 83, 694, 3662, 293, 370, 322, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11750271206810362, "compression_ratio": 1.5223880597014925, "no_speech_prob": 0.13446955382823944}, {"id": 778, "seek": 600648, "start": 6013.48, "end": 6019.48, "text": " So, you know, there's a very rich web of ideas here.", "tokens": [50714, 407, 11, 291, 458, 11, 456, 311, 257, 588, 4593, 3670, 295, 3487, 510, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11750271206810362, "compression_ratio": 1.5223880597014925, "no_speech_prob": 0.13446955382823944}, {"id": 779, "seek": 600648, "start": 6019.48, "end": 6028.48, "text": " And in particular, the main sort of point I want to get across and, you know, you can dig into further resources like nlabs to understand more about this.", "tokens": [51014, 400, 294, 1729, 11, 264, 2135, 1333, 295, 935, 286, 528, 281, 483, 2108, 293, 11, 291, 458, 11, 291, 393, 2528, 666, 3052, 3593, 411, 297, 75, 17243, 281, 1223, 544, 466, 341, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11750271206810362, "compression_ratio": 1.5223880597014925, "no_speech_prob": 0.13446955382823944}, {"id": 780, "seek": 602848, "start": 6028.48, "end": 6040.48, "text": " But the big idea is that like can extensions, weighted co-limits and co-ends are also general that you can talk about the other concepts from inside them.", "tokens": [50364, 583, 264, 955, 1558, 307, 300, 411, 393, 25129, 11, 32807, 598, 12, 4197, 1208, 293, 598, 12, 2581, 366, 611, 2674, 300, 291, 393, 751, 466, 264, 661, 10392, 490, 1854, 552, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09536922339237097, "compression_ratio": 1.6374269005847952, "no_speech_prob": 0.34400808811187744}, {"id": 781, "seek": 602848, "start": 6040.48, "end": 6049.48, "text": " So we kind of have this idea of these concepts, which is so general that any other concept can be expressed in terms of them.", "tokens": [50964, 407, 321, 733, 295, 362, 341, 1558, 295, 613, 10392, 11, 597, 307, 370, 2674, 300, 604, 661, 3410, 393, 312, 12675, 294, 2115, 295, 552, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09536922339237097, "compression_ratio": 1.6374269005847952, "no_speech_prob": 0.34400808811187744}], "language": "en"}