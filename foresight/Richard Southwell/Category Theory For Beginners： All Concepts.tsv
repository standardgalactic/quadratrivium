start	end	text
0	8720	Okay, so what we're going to do this time is to talk about the most powerful concepts
8720	10920	in category theory.
10920	16480	So to introduce this, I'd like to talk about planets.
16480	20240	You see, planets are very complicated.
20240	25440	I don't think anyone truly understands planets fully.
25440	31320	Nobody's walked all around a planet, nobody's drilled into the center of a planet.
31320	39120	However, it's very interesting that through astronomy, basically by observing the interactions
39120	45840	of many planets and many celestial bodies, we can gain a tremendous amount of understanding
45840	48920	about the nature of planets.
48920	54640	And I think it's very similar with some of these highly abstract structures in category
54640	56200	theory.
56200	58600	So there are certain kinds of structures.
58600	65440	I'm talking about things like can extensions, weighted co-limits, co-ends.
65440	71240	There are these kind of structures which are so general that every other concept in category
71240	76680	theory can be explained in terms of these things.
76680	83400	And this leads to quotes like all concepts are can extensions, which is a famous quote
83400	85840	by Saunders MacLean.
85840	92880	And so it's really remarkable that these kind of highly abstract, super general concepts
92880	94600	do exist.
94600	100800	And in a sense, if we can understand them, it gives us a way to understand everything
100800	103800	else in our theory.
103800	110600	Now the issue, a bit like with a planet, is that when one focuses directly on something
110600	117280	like the notion of can extensions, they can look rather complicated and difficult to understand
117280	119240	in isolation.
119240	124880	And so the approach we're going to take today is to investigate the sort of interactions
124880	127360	between these different concepts.
127360	131840	How can these different ideas be related to each other?
131840	135840	And it's really remarkable how this is going to end up.
135840	142080	It's as if what we have here is some kind of like a family of fractal structures, each
142080	148960	of which is so kind of rich that that fractal contains all of the other fractals in the
148960	149960	family.
149960	156400	So we could, for example, explain what weighted co-limits and co-ends are in terms of can
156400	163120	extensions, or we could decide that we want to explain what things are in terms of weighted
163120	166360	co-limits and weighted limits and so on.
166360	172360	So basically we want to explore how these super powerful concepts are interrelated.
172360	175920	And this is going to be a very, very profitable thing to do.
175920	180920	I mean, in a sense, I view this video as a kind of celebration of how far we've come
180920	187200	because now we can define and explore these super general concepts.
187200	192880	It's kind of as if we've got above the clouds of category theory and we can see these great
192880	198360	peaks, these super powerful structures and how they're related to each other.
198360	203640	And so what we're going to do today, we're going to start by recapping the idea of can
203640	205600	extensions.
205600	210800	And then we're going to get to these fascinating ideas of your need or extension and freco
210800	211800	completion.
211800	216680	And we're going to see how all of these other fascinating concepts kind of spring from there
216680	217680	like a fountain.
217680	223120	Okay, so this is one of the most informative videos I think I've put on YouTube.
223120	226720	And I wanted to give some recommendations about how to watch it.
226720	230520	So my main one would be 2x.
230520	237560	So for the first hour or so of this video, I would recommend watching it on double speed.
237560	244920	The reason is because I like to try and define everything I'm talking about, but when we
244920	252600	get into can extensions and so on, the kind of level of abstraction is going to go up.
252600	256760	So this is sort of the first hour.
256760	261880	And you know, with most people, it gets to a point when it's kind of difficult to understand
261880	264080	on a first viewing.
264080	267480	So I would recommend watching the thing on double speed.
267480	273760	And then once we kind of get through the definition of can extensions and onto freco completions,
273760	281920	like the level of abstraction decreases and we start looking at lots of examples.
281920	284280	And these examples are seriously beautiful.
284840	288000	Especially this idea of a density theorem.
288000	294200	It's basically like the idea that, for example, you can take a graph and you can make it out
294200	299520	of vertices and edges by kind of gluing them together, but there's a sort of recipe that
299520	302280	works for any graph for doing that.
302280	308200	And it just comes directly out of the maths that we've been looking at for free.
308200	312600	And the same idea applies for all sorts of other structures like dynamical systems and
312720	315120	plus your sets and all sorts of things.
315120	316480	It's it's pretty crazy.
316480	321360	It's it's almost like a universal recipe for making structures that we're going to kind
321360	322520	of get to.
322520	325320	And that's just one of the things that we're going to get to.
325320	332880	We're going to get to understand about profunctals and co-ends and loads of really interesting
332880	333880	things.
333880	340200	And so I'd say that the kind of level of insights which can be derived from this video
340240	343360	is going to sort of go up like this.
343360	352160	And so the the thing really is to get past this kind of hump where we're setting up the
352160	356000	initial structures, and it seems like it's kind of abstract.
356000	360840	And that's why I'd recommend watching this thing on double speed, because, you know,
360840	367080	we can kind of zoom through this on a first viewing and then look at these fascinating
367080	372640	applications, and then that's going to hopefully give you the motivation to go back and watch
372640	378240	the thing again, slowly get the pen and paper, try and follow all the diagrams.
378840	386480	And a lot of this stuff is in Emily Reels book, Category Theory in Context, which I
386480	394280	highly recommend, particularly in one of the last chapters, she talks about can extensions
394520	399160	and it's a very nice clear description of can extensions where you can look at all of
399160	406160	the kind of formulas, details, proofs of things that I've been talking about and dig
406160	408160	into those in more detail.
408880	410680	So, yeah, I hope you enjoy.
411880	414840	OK, so let me start with the idea of can extensions.
415320	420160	I have talked about them before, but they're a pretty abstract concept.
420160	424640	And I think they're worth introducing again, especially because I think I might
424640	428520	have found a slightly kind of easier way to introduce them.
428880	430560	So let's start with this question.
430960	432920	What comes next in this sequence?
435480	438240	OK, you can pause the video and think about it.
439080	447440	Now, most people would say the next number in this sequence zero to four would be six.
448440	455520	However, it's important to realize that there are mathematical sequences that don't go like this.
456600	462320	There are some mathematical sequences that go zero to four, five, for example.
463720	475200	And so really this question of what comes next in a sequence is not really usually very
475520	482480	well defined, but it is an instance of something called an extension problem, which very roughly
482480	489480	speaking is kind of like a problem of extending a pattern to a larger structure.
490800	492200	So let's have a look at that.
494120	497080	Here's how we can view that as an extension problem.
498080	510400	Let's take this set here, one, two, three, as C, and this set here of numbers on a right.
510400	512120	Let's call that E.
514720	524480	Now, the sequence that I talked about initially can be represented by a function.
525480	533480	The first number was zero, the second number was two, the third number was four.
534480	538480	And then I asked what should be the next thing in this sequence.
539480	549480	And so a way we can visualize what's going on is to say that what we want to do is we want to extend the domain
550480	553480	of this function or the source set of this function.
555480	560480	And so what we could say is instead of having a function that goes from the set one, two, three,
561480	564480	we want to think about a function that goes from the set one, two, three, four.
565480	574480	But the crucial thing is that that function ought to act similarly on the values one, two, and three.
574480	578480	So a way we can formalize this is as follows.
579480	587480	We know that let's consider this slightly larger source set here, D.
588480	602480	Now, we know that there is a inclusion function like this from C to D.
602480	609480	Let's call this inclusion function K and let's call this thing that we started with F.
610480	624480	And so now our problem is to find a function from D to E, which acts like F does on the values that came from C.
624480	634480	So just like in this case down here, this function that we want to cook up ought to send one to zero,
635480	641480	and it ought to send two to two, and it ought to send three to four.
642480	646480	Now the question we basically want to know is where should we send four?
646480	655480	And like I was saying, there isn't really a well-defined answer, but we could send four to six, just to finish the pattern.
656480	668480	And so what we're really doing here is we're trying to find an extension of the function F to this set D here that has a larger domain.
669480	677480	And the key property that we want this extension to have is that this diagram commutes.
678480	692480	So if we call this new purple function G, then the key property that we are sort of trying to get here is that G after K equals F.
692480	707480	And you can see that, right? If you pick anything in C and then you do K upon it, and then you do G upon it, you get to the same answer as if you do F upon it.
708480	725480	So this is the extension problem, but what I've sort of been trying to illustrate with my what number comes next problem is that extension problems involving sets and functions don't usually have unique solutions.
725480	734480	So let's think about this situation I've just described a bit more abstractly.
735480	741480	OK, we could say that what we've just drawn here is something that's happening in the category set.
742480	763480	All right, so in other words, we could say, well, we have sets C D and E and we are given an arrow F from C to E in the category set and an arrow K from C to D.
764480	775480	And then this extension problem is defined an arrow G such that G after K equals F.
776480	779480	That's the idea of an extension problem.
780480	783480	And you can think about extension problems in any category.
784480	801480	Now, for can extensions, we're sort of going to think about extension problems in cat in the category of categories, but there's a bit of a twist.
802480	805480	You see, you've probably got a bit of a flavor now.
805480	814480	You see, you've probably got a bit of intuition now that's telling you, well, extension problems don't normally have unique solutions.
814480	815480	And this is true.
816480	817480	It's true in set.
817480	818480	It's true in cat.
819480	826480	If you want to get just a diagram that commutes like this on the nose, it's not easy.
826480	836480	Usually there won't be a unique way to extend a particular arrow to make a triangle commute on the nose.
837480	846480	And so the idea with can extensions is that we sort of relax what we're asking for a little bit.
846480	857480	We're not really asking for a G, which is exactly going to make.
859480	865480	We're not really asking for a G that's exactly going to make a diagram like this commute.
866480	882480	Instead, we're going to use some kind of two cells or natural transformations to make it so that this kind of problem basically does have a unique solution, at least up to isomorphism.
883480	893480	So basically, we want to sort of warp this extension problem into something that can be described through universal properties.
894480	900480	And so for the problem of can extensions, well, firstly, it's taking place in cats.
900480	906480	So our objects are going to be categories and our arrows are going to be functals.
906480	913480	But the crucial thing is that we're not just looking for a functal G to close this triangle.
913480	925480	What we're looking for is a pair of a functal G and a natural transformation, which we call eta.
927480	932480	And G here is going to have a special name.
933480	939480	It's called the left can extension of F along K.
940480	948480	And so this is the data that defines a can extension.
951480	954480	I'm just going to talk about left can extensions today.
955480	958480	Right can extensions are very, very similar.
958480	962480	Again, they're talked about in my other video.
962480	965480	They're basically just the dual concept.
965480	970480	But basically what I'm going to do today is look at some really nice structures.
971480	982480	But everything I talk about can be dualized so you can have a lot of fun understanding all the duals of these concepts.
982480	986480	But basically the idea of can extensions is like this.
987480	996480	You're given a functal F from C to E and a functal K from C to D.
997480	1007480	And what the can extension consists of is a functal from D to E, which is called the left can extension of F along K,
1007480	1016480	together with a natural transformation, eta from F to land KF after K.
1017480	1026480	And that kind of data has to satisfy a certain sort of universal property.
1027480	1029480	What is that universal property?
1029480	1037480	Well, it's the normal kind of idea that if we make any kind of similar structure.
1037480	1051480	So a functal H from D to E and a natural transformation alpha from F to H after K.
1052480	1062480	Well, then there's going to exist a unique way to convert the real deal into this sort of phony candidate.
1062480	1064480	What do I mean by that?
1064480	1071480	I mean that there's going to exist a unique natural transformation.
1073480	1080480	Let's call it gamma.
1082480	1089480	Which is such that if we compose these two cells here, we get this one.
1090480	1094480	Now here's a place I think some people get confused, right?
1094480	1102480	Because they would say, well, I don't understand what it means to compose gamma with eta here.
1103480	1111480	Because this is some kind of peculiar notation and notion of composing two cells.
1111480	1118480	In this case, natural transformations, which is not fully explained in many places.
1118480	1123480	So what's it mean to compose this with this?
1123480	1125480	Well, it's illustrated down here.
1125480	1143480	So basically the meaning of this is this is the composition of this natural transformation here, shown in green, after the natural transformation eta.
1143480	1146480	What's this natural transformation here shown in green?
1146480	1155480	This is gamma horizontally composed with the identity natural transformation of K.
1155480	1160480	So this is the so-called whiskering of gamma with K.
1160480	1165480	And it really is just this horizontal composition, which is indicated here.
1165480	1175480	And you can look back at my video on natural transformations to remind yourself about how horizontal composition works, if you like.
1175480	1184480	But the basic idea then with can extensions is it's one of these kind of universal constructions.
1184480	1192480	And what we say is we say, well, I have this function F and this function K.
1192480	1198480	I wish to find the left can extension of F along K.
1198480	1210480	That consists of a function like this from D to E together with this natural transformation eta, which has this kind of form.
1210480	1225480	And this has to and is defined by having the universal property that for any similar such thing, basically for any alpha and H,
1225480	1229480	such that alpha is natural transformation from H after K to F.
1229480	1239480	We have that there's going to exist a unique gamma such that if we compose gamma with eta,
1239480	1244480	which basically ends up giving this kind of result.
1244480	1249480	Well, that result ought to equal alpha.
1249480	1272480	So basically, the pattern is that we want one K F and eta such that for anything similar.
1272480	1284480	So for H and alpha, there's going to exist a unique gamma that makes this a quality hold.
1284480	1285480	OK, then.
1285480	1290480	So this video isn't really focused on can extensions particularly.
1290480	1297480	And I don't think it's necessary to have a really in depth understanding of them,
1297480	1305480	but I can't resist just going over the basic sort of formulas for them and things.
1305480	1315480	So we're concerned with thinking about the left can extension of a functor F along K.
1315480	1328480	Now, the meaning of that, at least the way I think of it is think that we're trying to extend the domain of this functor F.
1328480	1333480	And we're trying to extend it to this larger domain D.
1333480	1338480	So for these purposes, you could think of K as a sort of inclusion functor.
1338480	1346480	And so sort of F is defined on C, but we want to sort of extend it to a larger domain.
1346480	1351480	So we're sort of extending it along this inclusion functor.
1351480	1357480	Although in truth, K doesn't have to be an inclusion functor.
1357480	1362480	It doesn't have to be a monomorphism or anything like that.
1362480	1371480	However, we are going to make some assumptions to make it easier for us to think about these can extensions.
1371480	1380480	So recall that we say that a collection is small when it's a set.
1380480	1387480	Recall that to set up category theory to speak about things like the category set.
1387480	1394480	We really have to go sort of beyond set theory, otherwise we run into Russell's paradoxes and things like this.
1394480	1402480	So we should really say that a category has a class of objects if we want to.
1402480	1415480	I mean, it depends how which sort of method we want to use to overcome these kind of problems of collections which are too large.
1415480	1429480	But anyway, so a category small when it has a set of objects or maybe just like a finite set of objects or it could be an infinite set or whatever.
1429480	1435480	So the category set is not small because there isn't a set of sets.
1435480	1438480	Otherwise, we'd be in paradox country.
1438480	1440480	So set is not small.
1440480	1442480	It has too many objects.
1442480	1446480	So we're going to suppose now that C here is small.
1446480	1457480	And we're going to suppose that D is locally small, which means that if we pick any pair of objects, the collections of arrows from A to B is forming a set.
1457480	1461480	And we're also going to suppose that E is co-complete.
1461480	1467480	That means that there's going to be a co-limit of every small diagram in E.
1467480	1481480	So in other words, if we take any small category like C and we do a functor, there's always going to be a co-limit of that functor.
1481480	1492480	So for example, it could be that E is set or E could be any category of pre-sheaves.
1492480	1494480	It could be a category of vector spaces.
1494480	1497480	There's loads and loads of co-complete categories.
1497480	1500480	And we're going to suppose that E is one of those.
1500480	1508480	And so with these assumptions, we can really understand the structure of these can extensions.
1508480	1517480	So in particular, whenever we have these assumptions holding, this left-can extension here is always going to exist.
1517480	1520480	And I'll tell you the formula for it.
1520480	1523480	So here's the formula for it.
1523480	1533480	So Lang K of F is going to be a functor from D to E.
1533480	1540480	And so we need to really describe how this functor works on objects of D and arrows of D.
1540480	1542480	So what about objects?
1542480	1547480	So what about if we have an object, little D of D?
1547480	1549480	What does Lang K F do to it?
1549480	1552480	Well, it sends it to this thing here.
1552480	1557480	And you see that this is a co-limit of a diagram in E.
1557480	1562480	And in particular, it's given by this composition here.
1562480	1568480	So what we have here is the comma category.
1568480	1580480	So we have this functor K from C to D.
1580480	1592480	And we're sort of slicing or comering that with this functor little D from a trivial category into big D.
1592480	1598480	And so this thing here is a comma category.
1598480	1604480	In some previous videos, I wrote it with this notation instead with the downwards arrow, but I prefer to slice now.
1604480	1617480	But anyway, you can see my video on universal properties or the video on Khan extensions for more details about comma categories.
1617480	1621480	Here's the very, very brief recap.
1621480	1626480	The objects of K slice D look like this.
1626480	1634480	The arrows of K slice D look like this arrow H from C to C dash that should make these kind of diagrams commute.
1634480	1645480	OK, so let's write this thing that we get when we do our left Khan extension on D as LD.
1645480	1650480	So you see that this is given by a co-limit.
1650480	1655480	And so this thing here is going to be an object of category E.
1655480	1662480	But it's also going to come with this sort of universal cone, which we'll call lambda D.
1662480	1672480	So that should, of course, be a natural transformation from this functor here to a constant functor.
1672480	1675480	So that will be delta LD.
1675480	1681480	That sends everything in this category here to this object LD of E.
1681480	1687480	So we could pretty much define this as to say it's this composition here.
1687480	1699480	And that's why I'm writing this equals sign here to say that this little triangle at the bottom here to say that this triangle at the bottom here commutes.
1699480	1708480	So this is telling us how this functor here is defined on objects.
1708480	1711480	How is it defined on arrows?
1711480	1728480	Well, basically, if we have an arrow G from D to D dash, then this kind of...
1728480	1738480	So I mean, basically, if we have an arrow G, then it's going to get sent by our left Khan extension of K along F to this arrow Q here,
1738480	1745480	which is going to be unique such that this kind of triangle commutes.
1745480	1749480	So I don't really want to go into the minutiae of this.
1749480	1754480	Basically, this is a diagram in a functor category.
1754480	1766480	And we know that there's going to be a unique arrow that makes this thing commute because this is like a universal cone.
1766480	1769480	And what we have here is a horizontal composition.
1769480	1776480	And this functor here works on objects like this and works on arrows like the identity.
1776480	1778480	I'm not going to dwell on this.
1778480	1786480	If you watch my video on Khan extensions, I go through all this in much more detail.
1786480	1795480	But I just wanted to quickly show you how you can calculate all the parts of these Khan extensions.
1795480	1805480	And so the final bit is how do we actually calculate this natural transformation here, this eta?
1805480	1809480	And basically the formulas over here.
1809480	1817480	So this is the key formula here.
1817480	1825480	Where this lambda here is our sort of universal cone, which comes from calculating that co-limit I was talking about before.
1825480	1835480	So the point really is that when these conditions hold, we have all these nice formulas to be able to compute this left-can extension.
1835480	1841480	Actually, I should just say quickly that something else really, really nice happens in this case.
1841480	1852480	In fact, we can think of this LAN-K thing here as a functor, which goes from this functor category here to this functor category here.
1852480	1857480	And it's actually just going to be the left adjoint of K star.
1857480	1860480	So let's remember our setup.
1860480	1866480	We have this functor K, which goes from C to D.
1866480	1870480	And that means that we can form this functor K star.
1870480	1875480	And basically this just works by pre-composition.
1875480	1880480	So it works according to this formula here or this expression here.
1880480	1894480	If we have an object of D comma E as in a functor G from D to E, then K star just sends that to G after K, which is going to be a functor from C to E.
1894480	1905480	And you can see that it sends this arrow beta here of this category to this arrow here of this category.
1905480	1914480	So it's very cool because basically we can also think of these can extensions in terms of adjoint functors.
1914480	1921480	Basically, we're just computing the left adjoint of K star.
1921480	1923480	And this is LAN-K.
1923480	1934480	And then if we take an object of this category here like F, well, if we operate LAN-K on F, then we get the thing that comes from this triangle here.
1934480	1940480	Which is the way that we originally defined this left can extension.
1940480	1955480	And so it's very cool that when we have all these conditions holding these ones here, like it's not just that we can compute the left can extension of F or on K.
1955480	1962480	We can compute the left can extension of any functor from C to E or on K.
1962480	1975480	And actually that gives us those all sort of fit together to give us this sort of bigger functor, which allows us to go between these two functor categories.
1975480	1980480	Just to finish, you know, to complete the picture.
1981480	1995480	For this adjunction, there should be a unit, of course, which should go from this identity functor here to K star after LAN-K.
1995480	2007480	If we look at a general component of this natural transformation E to dash, well, let's say we look at the F component, it should have this kind of form.
2007480	2012480	And can you guess what it is? Well, it's just exactly Eta.
2012480	2021480	It's exactly the natural transformation that fills in the triangle from the definition of the left can extension in the first place.
2021480	2027480	So there we are, a sort of very quick recap of can extensions.
2027480	2041480	And now let's get on to a really fascinating application of these things where we're going to think about all sorts of things to do with free co-completions and density,
2041480	2052480	and how we can make lots of objects by sticking other objects together and co-ends and all sorts of really fascinating connections with lots of things in maths.
2052480	2054480	So let's go.
2054480	2061480	Okay, and here's one final result, which is going to be really useful for us to simplify things.
2061480	2074480	And it basically says that in a special case, which is going to occur for us frequently, there's some details of these can extensions that becomes simpler.
2074480	2078480	So we're going to keep with this assumption here.
2078480	2083480	And in that case, we have this result holding.
2083480	2097480	And it says that if this K here is a fully faithful functor, which basically means that it acts like a kind of bijection on Homsets.
2097480	2116480	In other words, this is going to, for example, send the arrows from C to C dash to the arrows from K C to K C dash.
2116480	2122480	And it should always do that kind of thing like a bijection if it's fully faithful functor.
2122480	2135480	Well, in that case, we have that this ether here, this kind of natural transformation that fills in the triangle is always going to be a natural isomorphism.
2135480	2145480	So the particular case where this is going to occur for us is basically when C is just a full subcategory of D.
2145480	2156480	In other words, when we get C just by picking a load of objects of D and looking at all the arrows between those objects and that basically gives us C.
2156480	2164480	So in that special case where C is a full subcategory of D and K is just this inclusion functor.
2164480	2172480	Basically, this result says that essentially, we don't have to worry about this natural transformation, right?
2172480	2183480	This diagram commutes in that case, at least up to a sort of natural isomorphism here.
2183480	2184480	So this is really nice.
2184480	2201480	Like, remember, the way I introduced Can extensions, I basically said, well, we're talking about this extension problem, but then, oh, we have to add in these high dimensional cells to make things so that we have unique solutions
2201480	2202480	yada yada yada.
2202480	2220480	Well, in this special case here, basically where K is a fully faithful functor, and we have these nice conditions which give us this kind of co-limity way of describing this left can extension.
2220480	2234480	Well, in this case, basically, up to isomorphism, we pretty much do have that this triangle commutes and we don't really have to worry about the form of eta in this case.
2234480	2235480	Okay, then.
2235480	2241480	So now we've got our can extension ideas ready.
2241480	2252480	Let's get on with the central idea I want to talk about today, which is something called the free co-completion of a category.
2252480	2258480	So the easiest way to explain it is just directly.
2258480	2266480	There's various ways of looking at this notion, but the simplest one is just to say, well, we have a category C.
2266480	2271480	We want to determine the so-called free co-completion of that category.
2271480	2280480	And basically that is just the category of pre-sheaves of C.
2280480	2287480	So that's the category of functors from the opposite of C into set.
2287480	2290480	And this is something we've seen a lot before.
2290480	2294480	We've seen a lot of these pre-sheaves.
2294480	2303480	We've seen that things like the category of graphs and the category of dynamical systems can be thought of as categories of pre-sheaves.
2303480	2306480	And we're pretty familiar with these ideas.
2306480	2314480	And you may know that these categories of pre-sheaves are always co-complete.
2314480	2334480	So in a sense, you can see this free co-completion operation as a way to take a category C and sort of freely add co-limits to it so that we end up with a co-complete category.
2334480	2338480	Now, there's a bit more to this idea.
2338480	2352480	Another piece of information which comes along when we make this free co-completion is this functor here, which is called the yonida embedding.
2352480	2372480	And what this does is it takes an object C to this honfunctor, C of blank comma C.
2372480	2376480	So this is your contravariant honfunctor.
2376480	2383480	So when I write this thing here, this is a functor from C op to set.
2383480	2398480	If we have an arrow in C, let's say from C dash to C dash dash, let's say it's this arrow G.
2398480	2399480	So there we are.
2399480	2402480	That's an arrow of C.
2402480	2414480	It's going to correspond with this arrow G op in C op.
2414480	2437480	And when we do this honfunctor on it, that's going to give us an arrow like this.
2438480	2466480	And the way that you can think of this working is that if we have an arrow of C, let's say R from C dash dash to C,
2467480	2483480	then this is going to send it to this arrow R after G, which is going to go from C dash to R.
2483480	2487480	So that's basically the nature of this functor here.
2488480	2496480	However, there's a bit more to this, of course, because this you need a embedding.
2496480	2502480	Yes, OK, it sends an object C to a honfunctor like this.
2502480	2511480	But what about if we have an arrow H from C to D?
2512480	2524480	Well, that's going to give us an arrow in the target category, which will be called C of,
2524480	2530480	well, let's call it C of blank comma H.
2530480	2534480	And it's going to go like this.
2534480	2536480	And how does this work?
2536480	2556480	Well, if we look at the eighth component of this, that's just going to be a function like this.
2556480	2572480	And it's going to be sending an arrow R to the arrow like this.
2572480	2574480	And there we have it.
2574480	2578480	So that's basically the nature of this Yonita embedding.
2578480	2581480	And it's very interesting is this Yonita embedding.
2581480	2590480	It comes up all over the place and it is a fully faithful functor.
2590480	2596480	OK, so it's sort of, I mean, it's actually, it's pretty fascinating.
2596480	2608480	If you consider, for example, C equals this category here.
2608480	2614480	If you, it turns out that in this case, this category of pre-sheaves.
2614480	2620480	Well, it turns out that in this case, this category of pre-sheaves is the category of graphs.
2620480	2625480	And so that's kind of interesting for several reasons.
2625480	2630480	One of them is that you can kind of think of this C as something like a graph.
2630480	2637480	OK, we've kind of injecting this vertex and as a source or a target of this edge.
2637480	2641480	But then when we do its Freco completion, we get all of the graphs.
2641480	2651480	And in a way, you can kind of think of that as making all graphs by starting with something basic and sticking things together.
2651480	2653480	Less hand wavy.
2653480	2665480	Well, we can see that this Yonita embedding is basically injecting this sort of basic structure that kind of lies behind all graphs
2665480	2672480	into the category of graphs as a sort of full subcategory of the category of graphs.
2672480	2677480	Actually, the full subcategory, which is on these kind of home functors.
2677480	2682480	So I sometimes wonder if our universe is similarly constructed.
2682480	2694480	If there's some kind of a category C that represents the way that all of the elementary particles in our universe interact and somehow that's embedded into our universe.
2694480	2705480	All of the other structures that we have in our universe are sort of, you know, made out of those elementary bits in some kind of a free way.
2705480	2718480	But that aside, the point here is that we're looking at some kind of a universal construction which gives us this kind of Yonita embedding.
2718480	2721480	And this is called the free co completion.
2722480	2738480	So again, just to say it briefly, the hand wavy idea between a free co completion is that we take a category C and then we sort of freely add all co limits to it in some sense.
2738480	2750480	We sort of take the bits of C and we glue them together and sort of freely produce and make a structure in a kind of free way that has all co limits.
2751480	2764480	Another example we can look at for free co completion is the trivial category one, the category that just has one object and the only arrow is the identity arrow.
2764480	2771480	In that case, again, we can consider the free co completion of that.
2771480	2777480	And you see that that's just going to be isomorphic to the category set itself.
2777480	2794480	Now, what this reminds me of is the idea that we can make all sets by starting with a kind of singleton and then doing things like co products and repeatedly adding this singleton.
2794480	2801480	And if we have our ability to do injections and whatnot, then we can get all of the structure of set.
2801480	2804480	Okay, so I think that's enough hand waving.
2804480	2812480	Let's actually look at the kind of universal property that this free co completion has.
2812480	2824480	So recall that we have this category cat, which has objects as categories and arrows as functors.
2825480	2827480	Now there is a
2830480	2837480	Now what we can do is we can think just about the co complete categories.
2844480	2852480	Okay, so they're going to be the categories that are co complete that have all of these small co limits.
2852480	2861480	And we can just restrict our attention to the objects of cat, which correspond to these co complete categories.
2861480	2869480	And then we can also restrict our attention to the arrows of cats, which preserve co limits.
2869480	2877480	Okay, so then we can think of this sub category of cats that we'll call cat co comp.
2877480	2884480	So basically cat co comp here is it's going to be a sub category of cats.
2884480	2894480	The objects it has are going to be the categories which are co complete.
2894480	2907480	So the ones which have all small co limits or the co limits of each small diagram, if you like.
2907480	2923480	And then the arrows of this thing here are going to be the functors which preserve those small co limits.
2925480	2930480	So to say it more briefly cat co comp is the foot.
2930480	2949480	So to say it more briefly cat co comp is the sub category of cat on the objects which are the co complete categories and the arrows which are the co continuous functors that the functors that preserve the small co limits.
2950480	2955480	So basically this is the stuff that plays nicely with co limits.
2955480	2969480	Now there's clearly going to be an inclusion functor I from cat co comp into cat.
2969480	2981480	And it's this that we're going to use to find our kind of universal property, this kind of universal property behind free co completion.
2981480	2984480	So okay, what's the big idea?
2984480	2991480	Well, the big idea is that in cats, let's pick any category C.
2991480	3004480	And let's ask, is there an initial morphism from C to I, or you know, we could also say there are universal morphism from C to I, it means the same thing.
3004480	3011480	And what it means is that we're looking for some kind of a universal construction.
3012480	3015480	And it turns out that there is such a thing.
3015480	3020480	And what it is is the free co completion of C.
3020480	3035480	And what it consists of is this category of pre sheaves, the category of functors from C up to set.
3035480	3043480	And also, there's going to be this arrow in this right hand side category.
3043480	3051480	I mean, technically it's going to go from I of this category of pre sheaves.
3051480	3055480	I mean, technically it's going to go to I of this category of pre sheaves.
3055480	3059480	And that's going to be our, you know, need a embedding.
3059480	3067480	Now, often I might just rub out that I because I is just an inclusion functor doesn't really affect the nature of the objects.
3067480	3073480	Sometimes there's sort of no point writing it, but I'll write it for now.
3073480	3087480	So the point is that this together with this is going to be forming an initial morphism from C to I.
3087480	3090480	Now, let me remind you what that means.
3090480	3096480	What it means is that for any object E over here on the left.
3096480	3101480	So he's just going to be any old co complete category.
3101480	3110480	Well, if we have some arrow, which sort of looks like why over here.
3110480	3112480	So this is just a kind of candidate arrow.
3112480	3117480	It's going to be an arrow F from C to I of E.
3117480	3126480	Well, there's going to be this sort of corresponding intermediary arrow, which we're going to call F hat.
3126480	3136480	And that has the feature that when we do I on it, it's going to make this triangle commute.
3136480	3142480	All of this just comes from the definition of an initial or universal morphism.
3142480	3150480	Now, like, there's a lot of things going on here, a lot of structures just appeared at once.
3150480	3154480	Let me just point out a couple of things that I'll come back to later.
3154480	3158480	Firstly, I is just an inclusion functor.
3158480	3166480	So in a sense, we could just kind of rub out these eyes here and it wouldn't really change the meaning too much.
3166480	3173480	And now does this structure remind you of anything that we've been looking at?
3173480	3181480	What about if I wrote this as Lan Y of F?
3181480	3189480	Do you see that this is the same pattern as we've been looking at with our can extensions?
3189480	3192480	In particular, this thing's fully faithful.
3192480	3203480	So this thing which has to fill out the triangle, this natural transformation eater can effectively be ignored.
3203480	3211480	And so basically, you can see that this kind of idea of can extensions is appearing here.
3211480	3223480	In particular, just this notion of these universal morphisms is basically forcing us to find a unique way to close this triangle here.
3223480	3227480	And this is exactly what can extensions do for us.
3227480	3240480	So it turns out that not only is this category of pre-sheaves together with the yonida embedding giving us an initial morphism from C to I.
3240480	3251480	But moreover, the left can extension of any functor F from C to some co-complete category E.
3251480	3264480	Well, the left can extension of such an F along the yonida embedding Y is exactly giving us this kind of intermediary arrow,
3264480	3273480	which allows us to emulate our kind of candidate arrow F for being an initial morphism with respect to the real deal,
3273480	3276480	which is of course the yonida embedding.
3276480	3283480	So you can see that there are lots of ideas, lots of very cool ideas kind of interacting here.
3283480	3286480	I mean, I'm probably going a bit too fast, right?
3286480	3295480	There's a lot of things coming out at once, but we're going to get more kind of familiarity with this idea.
3295480	3314480	But just to sort of finish explaining the gist of this, basically the point here is that when we have this category of pre-sheaves together with this yonida embedding,
3314480	3318480	that's giving us an initial morphism from C to I.
3318480	3330480	Now, if you have a look at my video on representable functors, I talk about how this kind of phenomenon appears over and over again in category theory
3330480	3335480	and how there's several different perspectives to look at the same idea.
3335480	3344480	So another way to look at the same kind of happening is to say that this category of pre-sheaves together with this yonida embedding
3344480	3352480	is going to be an initial object of this comma category here, C slice I.
3352480	3356480	We could also write it like this and then it looks like a category of elements.
3356480	3364480	Another way to look at this is that this thing here is a functor into set, okay?
3364480	3372480	It's really a functor from this cat co-comp into set.
3372480	3389480	And what the yonida embedding really is, is it's just going to be like an object or an element of this kind of set-valued functor applied to this input.
3389480	3403480	Okay, so when we do this functor on this object here of this category, we get this set and y is just going to be an object of this set.
3403480	3414480	And so we can apply the yonida lemma, which is telling us that the elements of this set correspond to natural transformations
3414480	3420480	into this functor here from the corresponding hon functor.
3420480	3425480	And so this thing here is going to correspond to a natural transformation like this.
3425480	3429480	Turns out it's actually going to be a natural isomorphism.
3429480	3434480	And so we get this, which is like a really cool idea.
3434480	3445480	And just to sort of fill in this dummy variable here, what this is telling us is that if we pick a co-complete category E,
3445480	3460480	then the co-continuous functors from this category of pre-sheves into E are going to be in one-to-one correspondence with the ordinary functors from C to E.
3460480	3463480	So this is a pretty cool idea.
3463480	3468480	And it's especially cool because we kind of already know how this works.
3468480	3476480	Okay, so if we have a category C and then we have something in this set here,
3476480	3482480	so we can really just think of this as a functor F from C to this co-complete category E.
3482480	3488480	Well, how do we get the corresponding kind of co-continuous functor over here?
3488480	3497480	All we do is we go, okay, we've got a yonita embedding here from this into this category of pre-sheves.
3497480	3503480	And now let's just do the can extension of F on Y.
3503480	3509480	The left can extension, lan y F.
3509480	3511480	And there we have it.
3511480	3518480	We have F over here and we have lan y F over here.
3518480	3524480	And so that's how this kind of isomorphism of Homsets works.
3524480	3537480	We basically just get it using our can extensions and also provided that C is small, we have a formula for this lan y F.
3537480	3543480	We've already seen a formula for it in terms of co-limits, so we can compute all this stuff.
3543480	3545480	And that's very nice.
3545480	3555480	So now we can kind of come back down from the heavens for a moment and just think about a particular case to get some intuition.
3555480	3562480	So we can say, well, what happens when C is one?
3562480	3565480	So let's just have a look what we've got here.
3565480	3571480	We can rub out these eyes, as I say, they don't really change much.
3571480	3573480	We can put one in here.
3573480	3579480	This is just our trivial category.
3579480	3586480	And so what we've got going on on the right here is going to be a functor F from one to E.
3586480	3591480	So this is just going to basically be picking out an object of E.
3591480	3599480	And we can see that this is going to correspond to a co-continuous functor of this kind of form.
3599480	3605480	Well, the functors from one to set basically just look like sets.
3605480	3608480	So this is telling us something pretty interesting.
3608480	3637480	It's telling us that the objects E of this category, script E ought to be corresponding with these co-continuous functors
3637480	3641480	from set into E.
3641480	3649480	And I think that this is actually kind of intuitive, really, because think about it.
3649480	3658480	E is a co-complete category, and we want to do a co-continuous functor from set into E.
3658480	3661480	So what's the first thing that we might ask ourselves?
3661480	3666480	Well, where are we going to send the terminal object?
3666480	3681480	Well, this yoneda embedding is going to be sending our one here into the singleton set.
3681480	3691480	So we better send the singleton set to this object E here, where F sends the object over here.
3692480	3706480	So the question we're asking here is how do we cook up this functor H, which corresponds to this object E?
3706480	3716480	And the answer is, well, we better send the singleton set to E.
3716480	3720480	But then what about the set with two elements?
3720480	3723480	Well, that's going to be the co-product of one and one.
3723480	3735480	And the fact that we're forcing H to be continuous means that this better look like H of one co-producted with H of one in E.
3735480	3749480	And so you can see that the way that we're acting on all of the other sets, all of the other kind of objects over here is fixed by the way that we're dealing with the terminal objects.
3749480	3760480	So you can see that just picking any objective E is really going to give us a sort of co-continuous functor H from set to E,
3760480	3769480	because any such functors essentially having all its form fixed by the way that it operates upon the singleton set.
3770480	3781480	And you can kind of think of this intuitively as well, like co-completion is all about taking some initial structure and sticking the bits together in a kind of freeway.
3781480	3789480	So you're doing co-products where you're sort of doing disjoint unions and you're doing co-equalizers where you're sticking stuff together.
3789480	3797480	And if you just start with one dot and you start doing that kind of stuff, you're going to get lots of different sets.
3797480	3805480	So it kind of seems to make sense to me that the free co-completion of a singleton set.
3805480	3813480	So it seems to kind of make sense to me that the free co-completion of a trivial category is set itself.
3813480	3816480	But you know, this intuition goes much further.
3816480	3824480	Like if you think about your category of graphs, you can think of graphs as things that you get by sticking together.
3824480	3830480	Your basic graphs, you know, like your single vertex and single edge.
3830480	3841480	Again, with the category of simple as your sets, you know, you can make simplices or be simple as your complexes by sticking together these basic simplexes.
3841480	3847480	And again, you know, it's described by a category of pre-sheaves.
3847480	3850480	There's co-completions of foot.
3850480	3860480	And yeah, this is like a really kind of important idea, which touches lots of things in mathematics.
3860480	3861480	OK, then.
3861480	3872480	So basically, most of the rest of the video is just looking at some very interesting applications of the kind of things we've already talked about.
3872480	3877480	Now, I know it's a pretty high level of abstraction that we're dealing with.
3877480	3898480	But I just want to sort of urge you to just hold on a little bit longer and soon all the applications we're going to look at are really going to help you to kind of cement these things in memory and so on.
3898480	3919480	So basically, just before we start looking at the applications, like the first one I want to look at, I think, is basically the idea that we have a sort of universal recipe for making any graph by looking at the vertices and edges inside it and sticking them together.
3919480	3927480	And we can see that one of the applications of the ideas we've already looked at, so it tells us how to do that instantly.
3927480	3934480	And of course, it doesn't just work for the category of graphs, it works for simplices and dynamical systems and innumerable other cases.
3934480	3936480	So soon we'll be there.
3936480	3947480	But to make this more efficient, we're going to do some kind of a little bit of calculation now, which is really going to help us later.
3947480	3974480	So you can see that most of this stuff to do with free co-completion boils down to this diagram here, which is really representing the left-can extension of this functor F into this co-complete category E along the yonida embedding.
3974480	3992480	Now, since y is a fully faithful functor, we basically know that this can extension after y is naturally isomorphic to F, so we don't have to worry about this eta natural transformation.
3992480	4002480	And really, we're mostly just interested in calculating this land y F thing that we're going to abbreviate to be F hat.
4002480	4007480	And in particular, let's just suppose that we have an object in this category at the top here.
4007480	4009480	So we have a pre-sheaf w.
4009480	4013480	Well, how do we calculate F hat of w?
4013480	4016480	Well, we've already seen a formula for this.
4016480	4020480	And here it is.
4020480	4029480	So we can calculate this functor F hat operating on w to be equal to this co-limit here.
4029480	4042480	But the thing is with this co-limit, it starts with y slice w or y slice or y comma w, this category here.
4042480	4052480	And it turns out that I don't think that's such an easy thing to understand directly, but it has a sort of equivalent form that's much easier to think about.
4053480	4059480	Let's think about what this is, y slice w.
4059480	4063480	I mean, it's actually just a comma category of these two functors here.
4063480	4069480	We can see that y is a functor into this category of pre-sheaves, and so is w.
4069480	4073480	I mean, w is really just a functor from the trivial category.
4073480	4076480	It's just picking out a single pre-sheaf.
4076480	4088480	Now, this category, y slice w, more concretely, its objects are going to look like this,
4088480	4097480	that they're going to consist of an object of c and an arrow from y of that object into w.
4098480	4108480	And the arrows are just going to be these arrows in this slice category.
4108480	4119480	And the arrows in this comma category here are just going to be like this arrow h from c to c dash that makes this kind of diagram commute.
4119480	4126480	But basically, we can transform this slice category into this one here.
4126480	4132480	And the key to this is the go needle Emma, because what's an object in y slice w?
4132480	4141480	Well, it's basically going to be a natural transformation e from this home functor here into w.
4141480	4146480	And whenever you see a natural transformation coming out of a home functor,
4146480	4155480	you should get a Japanese voice in your head that says you need to transform this into a form of elements.
4155480	4157480	So that's what we'll do.
4157480	4167480	We apply the yonidilema and we see that this kind of natural transformation is equivalent to this element e hat of w of c,
4167480	4184480	where this is given by e c of w c.
4184480	4196480	Now, basically applying this gives us this kind of isomorphism between this category here and this category here.
4196480	4198480	What is this category here?
4198480	4202480	Well, what I've written at the top here is the singleton sets.
4202480	4207480	The singleton sets can be considered to be a functor into sets.
4207480	4212480	W can also be considered to be a functor into set from C op.
4212480	4217480	And so star slice w is this comma category here.
4217480	4222480	But it turns out that we want to take the opposite of that.
4222480	4231480	So really this is, well, some people would call this a category of elements for a contra variant functor.
4231480	4234480	Yes.
4234480	4247480	But the point of this really is that what we have here is just a category that has objects like this and arrows like this H.
4247480	4257480	And I'll sort of leave it to you to work out the details of this correspondence here, but just to give a very sort of brief five minute outline.
4257480	4268480	The idea is that we have an arrow H in this category down here.
4268480	4271480	So it's going to go for an object like this to an object like this.
4271480	4277480	But remember that what we have here is really the opposite of star slice W.
4277480	4289480	So this H here corresponds to this arrow H op that goes from C dash E dash hat to C E hat in star W.
4289480	4299480	And that just corresponds with this arrow H op of C op, which makes this kind of triangle commute.
4299480	4314480	And then if you apply for your needle Emma, you can see that this basically just corresponds with an arrow of this kind of form in Y slice W.
4314480	4317480	So I know that's a lot to take in.
4317480	4328480	Maybe don't worry about the details of this on the first viewing, but the point basically is that we can rewrite this expression here.
4328480	4331480	In this kind of form here.
4331480	4336480	So here this projection functor here.
4336480	4348480	That's going to take an arrow C comma Y C E W.
4348480	4353480	And it's just going to project it to become C.
4353480	4358480	And this kind of projection functor here is going to work in a sort of analogous way.
4358480	4363480	So what we're going to have here are objects of the form C comma E hat.
4363480	4367480	And the projection functor is just going to send those to C.
4367480	4377480	And then the arrows in each of these categories just look like arrows of C and we can think of those at least symbolically is just sort of unaltered by these projection functors.
4377480	4386480	So this is very nice because the final form of this basically involves a sort of category of elements here.
4386480	4396480	And then we're just sort of projecting those elements down into C so we can almost think of this as a sort of vibration.
4396480	4407480	We can think of these as sort of fibers above these objects of C in a way which is as described by this kind of pre-sheaf W.
4407480	4412480	And then we're just sort of functoring these into F.
4412480	4418480	We're just sort of functoring these into E and then asking for a co-limit of the resulting functor.
4418480	4422480	I know still this is pretty abstract.
4422480	4433480	But now we're going to start looking at some examples and hopefully we'll end up happy that we made this simplification step here because it's going to save us some work later on.
4433480	4436480	So OK, we've done the hard part.
4436480	4445480	Now we can start to look at some applications of this free co-completion concept.
4445480	4452480	So the first one I want to look at is the so-called density theorem.
4452480	4462480	And so for this, all we're going to do is pick a particular functor F here to focus on.
4462480	4468480	And we're going to focus on the case where F itself is also the yonida embedding.
4468480	4480480	So what we're essentially looking at here is the left can extension of the yonida embedding along the yonida embedding.
4480480	4497480	And if you recall, the idea behind these can extensions usually is that we're to find a two-cell eta that fills in this triangle in a sort of universal way.
4497480	4506480	However, in the special case where this functor here is fully faithful, as is the case with the yonida embedding,
4506480	4515480	essentially we're just looking for the unique kind of arrow here, which just makes this triangle commute.
4515480	4522480	And it's easy to see in this case that there's an arrow that makes this triangle commute, which is just the identity functor, right?
4522480	4526480	Because identity after y equals y.
4526480	4532480	And so we already know the form of this left can extension.
4532480	4539480	We know that it's the identity, but we also have a formula for it from before.
4539480	4543480	Okay, you remember this formula we were just looking at?
4543480	4547480	Okay, you remember this formula that we were just looking at in the general case?
4547480	4562480	Well, we can just look at this in the case where this f here is the yonida embedding, and this y here is our category of pre-sheaves.
4562480	4573480	And so what we get, and so if we do that, we see that we have this formula here, which is for this.
4573480	4585480	But we also know that this is equal to the identity functor operating on w, which is just w.
4585480	4594480	And so we have this equation here, and this is our density theorem.
4594480	4599480	Maybe I should write isomorphic here.
4599480	4608480	And this is quite remarkable because it basically gives us a way to think about this functor w.
4608480	4613480	So think about w as a sort of structured set.
4613480	4622480	Okay, a lot of these pre-sheaves, you can think of them as structured sets, things like graphs and dynamical systems and things like that.
4622480	4634480	Well, what this results basically telling us is how we can build this structured set here by sticking together humfunctores.
4634480	4640480	And think of the humfunctores as sort of like elementary particles or elementary structured sets.
4640480	4647480	So think about, for example, a single vertex or a single edge in the category of graphs.
4647480	4650480	Those will correspond to the humfunctores.
4650480	4657480	And what this result is telling us is how we can glue those things together to make w.
4657480	4663480	And the reason is basically because this is some category.
4663480	4671480	Basically, this is going to turn out to have sort of all the bits and pieces that make w.
4671480	4680480	And then when we do this functor composition here, it's going to replace these bits and pieces with the corresponding humfunctores.
4680480	4685480	So we're going to have all these kind of, we're going to have this sort of diagram.
4685480	4695480	For example, in the category of graphs, it's going to consist of a load of lone vertices and lone edges with some maps telling you where to go.
4695480	4709480	And then when we form this co-limit, we're essentially gluing all of those vertices and edges together to actually give the graph w that we want.
4709480	4723480	So it's pretty amazing that we basically get this blueprint for building any kind of structured set at all out of its sort of elementary parts.
4723480	4734480	And the whole thing just is given to us automatically as a fairly special case of this idea of free co-completion.
4734480	4752480	So, you know, it's stuff like this that like really, you know, it really makes me glad to know category theory because it's kind of like, to me, it seems pretty obvious that this is like the right way to think about.
4753480	4762480	Like how structures are assembled from elementary pieces because it's not like something that people have to figure out.
4762480	4770480	This is given towards automatically as a small piece of a large, elegant structure.
4770480	4781480	Okay, so let's apply this density theorem and we're going to apply it to the category of graphs and it's going to tell us how graphs are assembled.
4781480	4787480	Okay, so for our category C here, we're going to pick this category here.
4787480	4794480	So it's got two objects, E and V, and these two arrows S dash and T dash from V to E.
4794480	4800480	And so now C op is going to look like this.
4800480	4808480	And as we've seen before many times, functors from this category into sets are going to correspond to graphs.
4808480	4811480	So let's have a look at an example.
4811480	4828480	Here's a functor W from C op to set and it's going to send E to this set here and V to this set here and S is going to get sent to this function here and T is going to get sent to this green function here.
4828480	4835480	So we can visualize this in this manner shown below here.
4835480	4849480	And what we're doing here is visualizing each of these elements of W E as an edge that goes from the place it gets sent by W S to the place it gets sent by W T.
4849480	4853480	So this is a sort of visualization of the graph W.
4853480	4859480	Now all we have to do is apply this formula here.
4859480	4865480	And so we want to be calculating a co-limit of this functor here.
4865480	4879480	So to calculate this category of elements here, we just look at this picture and then we sort of rub out these bubbles and reverse the arrows and we get this category here.
4879480	4883480	This is our category of elements. This is star slice W op.
4883480	4890480	Now this projection functor here is just going to forget the second entries.
4890480	4899480	And so it's going to send these two onto E and these two onto V.
4899480	4911480	And then after that we want to do this yonida embedding, which is going to send this object E to the graph that just holds a single edge between two distinct vertices and nothing else.
4911480	4917480	And also the yonida embedding is going to send V here to the graph that just has a single vertex.
4917480	4925480	And so when we compose these, we get a diagram in the category of graphs and that diagram is going to look like this.
4925480	4930480	And then we just want to calculate the co-limit of this diagram.
4930480	4940480	And basically all that corresponds to is sort of imagine each of these lines here that showing how things getting mapped as a sort of thread.
4940480	4945480	And we just sort of pull those threads tight and glue the structure together.
4945480	4960480	And you can see that if you do that, you recover the graph that we had originally because this directed edge here has its source and its target as this vertex here.
4960480	4968480	And this directed edge here is going to be going from one to two.
4968480	4972480	And so yes, when we do the co-limits, we get this structure.
4972480	4984480	And it's interesting to see how this theorem basically tells us how we can recover our graph from these kind of elementary pieces.
4984480	4995480	Okay, so now if we return to the fountain, we return to this expression here for our free co-completion.
4995480	5004480	Well, this F hat here, this one YF, this is sometimes called the yonida extension of this functor F.
5004480	5011480	And it turns out that this is related to another of the super powerful categorical concepts.
5011480	5015480	And that's the idea of a weighted co-limit.
5015480	5019480	So the connection is pretty simple.
5019480	5029480	If we have a functor W in this category up here, this category of pre-sheaves, if W is a pre-sheave basically.
5029480	5038480	Well, when we do F hat on W, we can call that result the W-weighted co-limit of F.
5038480	5043480	And so this is this idea of weighted co-limits.
5043480	5048480	And they're normally characterized in a somewhat different way.
5048480	5053480	Normally one would characterize a weighted co-limit by an expression like this.
5053480	5065480	And we'd say that the W-weighted co-limit of F, where F is a functor from C to E and W is a functor from C up to set.
5065480	5078480	The W-weighted co-limit of F is defined such that we have these kind of isomorphisms natural in E.
5078480	5090480	But I think it's easier to think of them directly as just being produced by doing this F hat on these pre-sheaves W.
5090480	5097480	So we can see that there are a couple of interesting special cases of these weighted co-limits.
5097480	5110480	One of them is where we take W to be this diagonal functor here, this functor which is constantly equal to the singleton set.
5110480	5118480	And if we use that as our weight, then it turns out that our weighted co-limit is just going to look like an ordinary co-limit.
5118480	5126480	And you can check that by unpacking the actual formulas that we've got for F hat as we've described above.
5126480	5135480	Now, another thing that you could do with this formula is you could instead set C to be a singleton set.
5135480	5141480	Is you could instead set C to be the trivial category of a single object.
5141480	5146480	In that case, F is just going to be an object of E essentially.
5146480	5160480	And if you look at the meaning of this formula in this case, well, it reduces to this kind of form.
5160480	5169480	And you see where we wrote a co-lim W of F, we're now writing W dot of F.
5169480	5180480	And that's because this thing over here is what's known as the co-powering of F by W.
5180480	5196480	And you can really think of it like if this category E has co-products, then you can think of this expression here as the co-product of this object F with itself W times.
5196480	5209480	So if we think of W now as a set, let's say it's a set of three elements, well, this would just be F plus F plus F.
5209480	5217480	So this is basically F co-product with itself once for every element in W.
5217480	5231480	And you can see that this kind of expression here ought to hold, right, because like let's say W was a two element set, well, this would be like an arrow from F plus F to E.
5231480	5243480	And that's going to correspond with two arrows from F to E, or if you like a function from a two element set, two to set of arrows from F to E.
5243480	5250480	So this is the idea of so-called co-powering, which is also known as tensoring.
5250480	5255480	And it turns out that we can get something else out of this kind of idea as well.
5255480	5263480	So if we then think of another special case, let's suppose we have a category A.
5263480	5273480	And what we're going to do is we're going to set C to equal A op times A, and we're going to set E to equal set.
5273480	5281480	And so what we're going to have as F here is a functor from A op times A to set.
5281480	5286480	So things that have that kind of form are sometimes called bifunctores.
5286480	5293480	And we'll call this functor H just because it's a bit weird, so we'll give it a different name.
5293480	5296480	So just write it down.
5296480	5308480	We're supposing that C is A op times A, we're calling this FH, and we're supposing it's going to set.
5308480	5316480	And now if we look at this particular case, of course, the same kind of resort holds.
5316480	5328480	But what we can do is consider a special case where this W here, so here W is going to be going from C op to set,
5328480	5337480	or if you like, it's going from A times A op to set, so that's the form that W is going to have.
5337480	5347480	Well, we're going to consider the case where W is the humfunctor of A op.
5347480	5353480	Because the humfunctor of A is going to be a functor from A op times A to set.
5353480	5359480	So the humfunctor of A op is going to have this kind of form here.
5359480	5361480	And so we'll take that as our W.
5361480	5371480	And now if we just work out what this kind of thing is,
5371480	5377480	well, what we end up with is this sort of formula here.
5377480	5393480	So we're doing this arrow here, which we should probably put H here now instead of a W.
5393480	5400480	We're doing H hat on this hum A op.
5400480	5411480	So what we have here is that this is H hat operating on hum of A op.
5411480	5414480	And we can write it directly like this.
5414480	5419480	Here's the same thing written as a weighted co-limit.
5419480	5426480	But now what I'm telling you is that there's this other idea in category theory called a co-end.
5426480	5431480	And it turns out that we can really define a co-end to be this.
5431480	5442480	So the co-end of this bifunctor H can be defined to be the hum A op weighted co-limit of H.
5442480	5447480	And we usually write these co-ends with this kind of integral form like this
5447480	5451480	with the kind of thing that we're integrating upstairs.
5451480	5460480	So there we are. We've just got this notion of co-ends totally free out of this theory.
5460480	5466480	Okay, so now we're ready for the final application of these big ideas.
5466480	5470480	And that is understanding profunctals.
5470480	5480480	So a profunctor from A to B is the same thing as a functor P from A op times B to set.
5480480	5489480	And a good way to think of it is that, well, you can think of it as a generalization of a humfunctor.
5489480	5492480	That's quite a good way of looking at it.
5492480	5498480	So, you know, if A equals B and this is a humfunctor, well, that's a kind of profunctor.
5498480	5506480	Or you can think, well, I'm sending a pair of an object of A and an object of B to this set.
5506480	5514480	And you can kind of maybe think about something like the set of proofs that A implies B or something like this.
5514480	5523480	Or maybe you can think about something like the set of proofs that the first proposition, the object in A,
5523480	5526480	implies the second proposition, the object in B.
5526480	5530480	There's various different types of intuition that you can have.
5530480	5535480	Now, it turns out that there's a category of profunctals.
5535480	5541480	And with this kind of machinery we've been talking about today, we can understand it.
5541480	5548480	So, as I say, a profunctor P corresponds to a functor of this kind of form.
5548480	5557480	We're free to apply a kind of swap of the order on the left and some currying.
5557480	5560480	And then we can change it into a functor of this kind of form.
5560480	5562480	So, we'll call that P dash.
5562480	5565480	That's clearly an equivalent form.
5565480	5576480	But the sort of maths that we've been talking about today tells us that a functor from B to this category of pre-sheaves here
5576480	5581480	corresponds to a co-continuous functor of this kind of form.
5581480	5587480	A co-continuous functor between these two categories of pre-sheaves.
5587480	5592480	So, this is another equivalent form for this profunctor P.
5592480	5600480	Now, there's a nice analogy in what's going on here with linear algebra.
5600480	5605480	I haven't covered linear algebra in this course if this doesn't mean much to you, don't worry.
5605480	5608480	This is the basic sort of analogy.
5608480	5619480	It's that if you think about A and B as finite sets, then we could have an A times B matrix.
5619480	5627480	And that corresponds to a linear map from B dimensional space to A dimensional space.
5627480	5634480	We could also think of it as just a function sending the elements of B to A dimensional space.
5634480	5640480	And if you look at this pattern, it's pretty much analogous with this pattern here.
5640480	5645480	It's just here we have profunctores instead of functions.
5645480	5651480	And we have co-continuous functores instead of linear functions.
5651480	5660480	But basically, the idea is that once we start with a profunctor of this form, we can convert it into this form trivially.
5660480	5668480	And then this idea of free co-completeness, and in particular this type of diagram here,
5668480	5678480	gives us this equivalent co-continuous functor, which sort of corresponds with this functor P-dash.
5678480	5684480	And this turns out to be the key towards defining profunctor composition.
5684480	5695480	You see, there's actually a category called prof, and it has objects as categories, and it has arrows as profunctores.
5695480	5708480	Now, the identity arrow of an object A is just going to be this profunctor, which is just the hom functor of A.
5708480	5717480	That's, of course, a functor from... We can, of course, think of that as a functor from A op times A to set.
5717480	5726480	So it is a profunctor. It turns out that it really acts like the identity in this category of profunctores.
5726480	5733480	A more interesting question is, how can we compose general profunctores?
5733480	5742480	So what about if we have a profunctor P from A to B, and a profunctor Q from B to C, and we want to compose them?
5742480	5753480	Well, then we want to end up with some kind of thing that we could call a composition, which ends up being a functor from A op times C to set.
5754480	5760480	And it turns out that, basically, we can just define it to be this kind of composition here.
5760480	5767480	So this LANYP dash is, as shown in this diagram, we know how to compute it.
5767480	5770480	We've looked at a formula for it earlier and so on.
5770480	5779480	And if we just compose this after this, you can see that we have something that goes from C to this category of pre-sheaves.
5779480	5789480	And if we just sort of untangle this, we can put it into this kind of form and consider it to be the composition Q after P.
5789480	5796480	So basically, that's how profunctor...
5804480	5807480	So basically, that's how profunctores work.
5807480	5816480	Now, it turns out that the normal way of thinking about this is that one writes profunctor composition with a co-end formula like this.
5816480	5826480	But, you know, we don't need to do that because we have this way of thinking about it in terms of can extensions and co-completeness.
5826480	5843480	By the way, the stuff I just talked about to do with composing profunctores is basically remark 5.1.7 of Fosco's book, Co-end Calculus, if one wants to dig deeper into this.
5843480	5855480	So if you want to understand about profunctores, definitely the best advice I can think of is that you should consider what happens when the categories of profunctores
5855480	5868480	are discrete. Okay? Because if you think about it, what's a profunctor from A to B when A and B are discrete categories?
5868480	5877480	Well, in that case, these things don't have any arrows. It doesn't matter about taking the opposite of the categories because there's no arrows to reverse.
5877480	5890480	You know, we only have identity arrows. And basically for every object of A and object of B, we just have a set and that's all the data which goes into defining the profunctor.
5890480	5902480	And if we think about finite sets, then essentially we can just think of a profunctor as something like a matrix of non-negative integers.
5902480	5912480	And in that case, if one looks at the way that profunctor composition works, it looks exactly like matrix multiplication.
5912480	5923480	And this is really beautiful because you'll see that basically if you look at the full subcategory of this category of profunctores on the discrete categories,
5923480	5934480	well, it just looks like linear algebra basically. It just looks like the profunctores or like matrices and composing them is matrix multiplication.
5934480	5939480	That's all there is to it. And so that's kind of beautiful.
5940480	5949480	The final thing I want to say just to come full circle is that co-ends are another one of these super powerful ideas.
5949480	5958480	And it turns out that we can express can extensions in terms of co-ends.
5958480	5972480	So when E here has co-powers, we can express this formula for the left can extension here in terms of co-ends like this.
5972480	5976480	So now we've kind of come full circle.
5976480	5982480	And remember, everything I've talked about today can be dualized.
5982480	5993480	So if we go back, back, back way back in time to our original diagram.
5993480	5999480	Yeah, you can dualize all this. So you've got right can extension here.
5999480	6006480	There's a sort of analog of the yoneder extension. There's the idea of free completion.
6006480	6013480	We have weighted limits. There's an idea of powering, which is also called co-tensoring and so on.
6013480	6019480	So, you know, there's a very rich web of ideas here.
6019480	6028480	And in particular, the main sort of point I want to get across and, you know, you can dig into further resources like nlabs to understand more about this.
6028480	6040480	But the big idea is that like can extensions, weighted co-limits and co-ends are also general that you can talk about the other concepts from inside them.
6040480	6049480	So we kind of have this idea of these concepts, which is so general that any other concept can be expressed in terms of them.
