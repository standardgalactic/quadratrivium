start	end	text
0	3600	Hey there, how's it going everybody? In this video, we're going to learn about unit testing in
3600	8160	Python. So we'll go over how to write tests, how to set up and tear down your tests, and also
8160	12160	some best practices. So if you're not currently testing your code, then it's definitely something
12160	16080	that you're going to want to learn and start adding to your projects. So a lot of you have
16080	20960	probably heard of testing, but you might not know exactly what it is. Testing your code is the most
20960	25200	exciting thing to do. But there's a reason that most companies and teams require their code to be
25200	29520	thoroughly tested. And if you're going to get a job working on any large projects, then you're going
29520	33600	to need to know how to properly write tests. And the reason for that is that it's going to save you
33600	38400	a lot of time and headache down the road. So when you write good tests for your code, it gives you
38400	42960	more confidence that your updates and refactoring don't have any unintended consequences or break
42960	48160	your code in any way. So for example, if you update a function in your project, those changes may
48160	53200	have actually broken several sections of your code, even if that function itself is still working.
53200	58000	And good unit tests will make sure that everything is still working as it should. And if it's not,
58000	62240	then it'll show you exactly what's broken. So in this video, we're going to be going over everything
62240	66560	that you need to know to get started with the built in unit testing module. So with that said,
66560	70800	let's go ahead and get started. So right now I have a basic script pulled up here that has some
70800	75040	simple functions. And I want to start off using these really simple functions so that we can just
75040	81040	focus on what the tests look like. Now, what a lot of us start doing to test our code is just put
81040	85680	in print statements and occasionally run the code. So for example, down here at the bottom,
85760	92000	if I wanted to test that my add function was working, I could just say print add and add together
92000	97840	10 and five. And if I run that, then we can see that the output that we got looks right. But
97840	103440	testing your code this way isn't easy to automate. And it's also hard to maintain. So also if we're
103440	108640	testing a lot of different functions, then there's no way for us to see at a glance what failed and
108640	114240	what succeeded. So that's where unit testing comes in. So we're going to go ahead and just remove
114240	119440	this print statement and actually start adding some unit tests. So to do this, first we need to
119440	125280	create a test module. So I'm going to create a new file here in this current directory. And I'm going
125280	132400	to call this test underscore calc dot py. Now that's the naming convention when writing tests is to
132400	138240	start with test underscore, and then what you're testing. So in this case, it was test underscore
138240	143920	calc. And that's actually going to be required within our tests. So now we have this test
143920	148960	underscore calc module pulled up. And we're currently working with an empty file. So first
148960	154080	let's import the unit test module. Now this module was in the standard library. So there's no need
154080	159680	to install anything. You can just say import unit tests. And now we're also going to want to import
159680	165440	the module that we want to test. So I'm going to import that calc module. And we can import calc
165440	169600	from here since it's in the same directory. Now if you're testing code from a different directory
169600	174080	and can't get your imports to work, then you can watch my video on importing modules. And it
174080	179120	should help you figure out how to properly get that set up. So now we need to create some test
179120	184240	cases for the functions that we want to test. And in order to create those test cases, we first need
184240	190560	to create a test class that inherits from unit test dot test case. So to do this, we're first going
190560	197920	to create a class. And we will call this test calc. Now you can call that class whatever you like,
197920	202720	but try to keep it descriptive as to what you're testing. And we're going to want to inherit
202720	211680	from unit test dot test case. So inheriting from unit test dot test case is going to give us access
211680	218080	to a lot of different testing capabilities within that class. So let's write our first test. So
218080	225280	to do this, we'll write a method. And the method needs to start with test underscore. Now that
225280	230080	naming convention is actually required so that when we run this, it actually knows which methods
230080	235440	represent tests. So if the method doesn't start with the word test, then they won't be run. And
235440	240480	we'll see what that looks like in just a minute. So ours will be test underscore, and then what
240480	246720	we're testing. So first, we'll just test the add function of our calc module. So we'll call this
246720	253200	test underscore add. And just like any method in a class, this takes self as the first argument.
253280	259200	And now within our method, we can write our test. So since we inherited from unit test test case,
259200	264640	we have have access to all these assert methods. And I have them all pulled up in the documentation
264640	270320	here over in Chrome. So we can see that we can assert whether two values are equal with assert
270320	277040	equals, not equal with assert not equal, assert true, assert false. And the documentation shows
277040	284560	you exactly what all of these check for. So for example, assert is not none checks whether a
284560	290000	variable is not none. So the documentation has a good overview of all these asserts. And then over
290000	295280	here, what it actually checks for. And I'll also leave a link to this in the description section
295280	301440	below. So now let's switch back to writing our test. So we're going to use assert equals to test
301440	308880	our add function. So I can run our add function from here by saying something like result is
308880	315120	equal to calc dot add. And we'll just add those same values 10 and five. And we would expect this
315120	322880	to equal 15. So to test this, we can say self dot assert equals. And now we want to assert that
322880	329760	that result is equal to 15. Okay, so now how do we run this test? So we could do it from the command
329840	335760	line. So I have my command line here pulled up and I am navigated to the directory where our
335760	342000	module is currently located. Now you might think that we could just run the test by saying, you
342000	347680	know, Python test underscore calc dot pi. But if I run that you can see it doesn't actually return
347680	355040	anything. So instead, we need to run unit test as our main module and pass in test underscore calc.
355040	364480	And we can do that by saying Python dash m and then unit test. And now the test underscore calc
364480	372480	dot pi module. And we can see that when we run that it puts a dot here. And it says one ran one
372480	377680	test. And at the bottom, it says okay, so that means that everything passed. Now it would be
377680	384720	nice if we could just run our tests using this first method here by saying Python test underscore
384720	389840	calc and just running the module instead of using this longer command here and setting it up to run
389840	395680	that way would also allow us to run our tests from directly within our editor. So to do this,
395680	402880	we can just come down here to the bottom and we can say if name double underscore name is equal to
403280	409840	in quotes here, double underscore main, and then within this conditional, we can just say
410400	417520	unit test dot main and run that. Now if you don't know what this double underscore name equals
417520	423760	double underscore main is doing, this actually isn't related to unit testing at all. I do have a
423760	428560	separate video specifically what that is about. But basically, it's just saying that if we run
428560	434160	this module directly, then run the code within the conditional. And that code within our conditional
434160	440720	is this unit test dot main, and that unit test dot main will run all of our tests. So now if we go
440720	446960	back here, this is now saved, if we go back here to our terminal, and I will clear this out. So now
446960	452640	let's rerun that using that first method of just Python and our test module. And if we run that,
452640	457760	you can see that now we can run it directly. And it runs our unit tests and says that it passed.
457760	463120	And since we can run it this way within the terminal, that should mean that it can also run
463120	468640	within our editor. So if I run this, then you can see that within our editor, we can now run
468640	473520	these tests also. Okay, so that's good. So we're running our first test. So it's saying that we're
473520	478400	only running one test. Now, do you remember earlier when I said that your tests have to start with
478400	484960	the word test? Well, let me show you what it does if it doesn't. So instead of test underscore add
484960	491360	here as our test, let's call this add underscore test and save this and run it. So when we run this,
491360	495840	it might not be obvious right off the bat that anything is wrong because we didn't get any errors
495840	502160	or any warnings. But if we look at how many tests ran, it says zero. So this test was just skipped.
502160	506880	So you have to be careful that all of your tests are named properly and start with the word test.
506880	512800	So let's go ahead and change that back and rerun it. Okay, so now what happens if our test fails?
512800	518720	So let's change this value here with the assert equals, the result is equal to 15,
518720	525280	let's change this to a 14, so that our test of adding 10 and five fails. So let's save that and
525280	533200	run it. So now if I pull this up a little bit here to where we can see, we can see that instead of a
533200	539440	dot, we got an F for fail. And it also shows us that the test failed with an assertion error
539440	545200	that 15 is not equal to 14. Okay, so now let me pull this down just a little further here.
545200	552000	And now let's change this test back and also add in a few more tests. So first of all, instead of
552000	557680	setting this result variable and testing that, I'm just going to instead drop our function directly
557680	563840	into the assert statement. So I'm going to copy this and replace that result variable actually
563840	570160	with our add function. And then I can just get rid of that result variable there. So you usually
570160	576160	want to also check some edge cases. So let's copy and paste this line here a couple of times
576160	581760	and test a couple of edge cases. So one edge case might be one negative number and one positive
581760	589760	number. So let's make sure that negative one plus one is equal to zero. And two negative numbers
589760	596800	would also be another edge case. So let's make sure that negative one plus negative one is equal
596800	602800	to negative two. So now if we save this and run it, then it's saying that it passed, but it also
602800	608000	says that it ran one test. Now you may have been expecting this to say that it ran three tests.
608000	614640	But really, these three assert methods here are just within this single test called test underscore
614720	620320	add. But even though it still says that there's only one test, we still made this test better
620320	626240	by adding in these additional checks. So it's not our goal to write as many tests as possible,
626240	630320	but just make sure that we write good tests. So that's something that a lot of people get
630320	635760	tripped up on. They just shoot for, you know, full coverage without making sure their tests are
635760	640480	actually good enough to catch mistakes. So try to be mindful of that when writing tests. And in
640480	646240	order to add more tests, we just add in more test methods. So let's test the rest of our calc
646240	654400	functions. So I will just copy and paste this test add function here three more times. And I'm
654400	659520	going to get rid of our output here so we can see a little bit better. And now I'll change these to
659520	666240	test all of our calc functions. So I'll test our subtraction function by changing all of these ones
666320	673440	here to subtract. And now let's change our assert equals. So 10 minus five will be five,
673440	681280	negative one minus one will be negative two, and negative one minus negative one should be zero.
681280	687600	And now moving down the line here, let's change this next test to be multiply. So now for our
687600	695520	assert equals, we want to test that 10 multiplied by five is 50, negative one multiplied by one
695520	700720	is negative one, negative one multiplied by negative one is one. And then let's change
700720	707360	this last method here to test our divide function. So we want to test divide. So now in our assert
707360	712800	statements here, we want to make sure that 10 divided by five is equal to two, negative one
712800	719680	divided by one is negative one, and negative one divided by negative one will just be one.
719680	725120	So now if I run this code with all four of these tests, then you can see that we got four dots,
725120	730080	and it says that we ran four tests. And all of those tests pass with all of those assert
730080	735680	equal statements. So you can imagine how useful this is. So if you have a module with some complicated
735680	740480	functions, then once you put in the work to write good tests like this, then you can just come back
740480	745280	and rerun these tests to make sure that everything still works. So if you change something in your
745280	749840	program that you think will work, but it actually broke some stuff, then your test should catch
749840	756960	that. So for example, let's say that I came in here to our calc function, and we just made a typo
756960	762080	in this multiply function. And instead of one asterisk there, we put two. Now this is actually
762080	768080	going to return x to the power of y. So if we come back here to our tests and rerun this,
768080	774160	then we can see that if we look here at our output, that we have two dots, and then an f,
774160	779440	and then a dot. So that means that three of our tests pass and one test failed. And the one that
779440	786320	failed, it says that we have an assertion error that the 10 times five should actually be equal to
786320	792000	50. And it's not instead we got this value here. So that gives us an idea of exactly where the problem
792000	797040	is, and where we can make that change to get these tests to pass again. So let's go ahead and go back
797040	802080	here and change this back. Now, sometimes you might make a change that doesn't actually break
802080	808320	your test, but will actually unexpectedly break your code. So for example, let's say that we
808320	814240	came in here and changed our divide function to be floor division instead of regular division.
814240	818720	And we can do this by changing this to two division signs. Now if you don't know what floor
818720	824240	division is, basically, it just doesn't give you the remainder. Now our current test won't catch
824240	830960	this because right now all of our and let me save this here. So right now, all of our divisions
830960	835360	currently come out to whole numbers anyway. So it doesn't matter if we're using floor division
835360	840640	or regular division. So if we run our test, then we can see that currently all of these tests are
840640	845600	passing. So let's say that at some point that floor division broke our program. And after some
845600	851920	debugging, we traced it back to that and found the problem. Now in that case, it's always a good
852000	857120	practice to go update your test with a test that would have caught the problem that you just found.
857680	863040	That way, we can know that we don't revisit the same bugs over and over. So for example,
863040	869760	a test that would have caught this, I'm going to copy and assert equals statement here. Now a test
869760	876560	that would have caught this is if we would say, you know, five divided by two, we want that to
876560	882720	actually equal 2.5. But with floor division, that's actually just going to equal two. So now
882720	887600	if we run this, then we can see that we got our error because we're using that floor division.
887600	895120	And we can see that it is an assertion error that two is not equal to 2.5. So that should point us
895120	899600	in the right direction. And then we can go and see why that would be the case. And then we can find
899600	904480	out that we're using floor division there instead of regular revision and fix that go back to our
904480	910080	test and run it. And now they're all passing. Okay, so now there's one more thing within our
910080	916640	calc.py file here that we can see. We can see here that we are checking if the number that we're
916640	924160	dividing by is zero. And if so, then we're raising a value error with the message that we can't divide
924160	930480	by zero. So we'll likely want to test that our expectations are working on that as well. So,
931200	936800	but this is done a little differently than the other assertions. So let's go back to our test
936800	942720	and show how we can test that dividing by zero raises this correct error. So there's actually
942720	952320	two ways that we can do this. So first we could say self dot assert raises. And within assert raises,
952320	960000	first we want to pass in the exception that we expect and that is a value error. And now the
960000	965760	function that we want to test, and that is calc divide, now we're not putting parentheses or any
965760	971520	arguments there, we're putting the arguments as arguments to this assert raises method. So let's
971520	978240	look at this one more time. So our first argument is the exception that we expect. The second argument
978240	983760	is the function that we want to run, but we aren't passing arguments to the function. So leave off
983760	989520	the parentheses. And then we pass in each argument that we want to pass into the divide function
989520	994560	separately. So now the reason that we have to do it this way, instead of just running the function
994560	999760	normally, is because our function would actually throw that value error. And our test will think
999760	1005440	that something failed. But we'll look at a way that we can do this right after this test. So
1005440	1010560	right now, if we run this, then we can see that this is currently passing. And that's because the
1010560	1018160	10 divided by zero did throw this value error. So if I was to change this zero to a two, then it's
1018160	1023520	not going to throw that value error. So if I run that, then it failed. And we can see that the
1023520	1031200	assertion error is that value error not raised by divide. So which makes sense if we divided by two.
1031200	1036160	So if we divide by zero, that test passes. Now, I've never preferred this method of testing
1036160	1041680	exceptions, because I just like to call the function that I want to test normally, instead
1041680	1047520	of passing in all of the arguments separately, like we're doing here. And we can do this if we test
1048240	1055520	the exceptions using a context manager. Now that will allow us to handle and check the exception
1055520	1061600	properly. And also call our function normally. So to do this, I'm actually going to get rid
1061600	1069200	of everything here. And to do this, we say with self dot assert raises value error. And that's
1069200	1075440	using the context manager. And within this context manager, we can just call our function normally
1075440	1082160	like we normally would. So calc divide, and we'll divide 10 by zero and save that and run it. Then
1082160	1087280	you can see that by using this context manager, that all of those tests still pass. So you can
1087280	1092160	choose either method that you prefer. But I've always preferred to use the context manager when
1092160	1099520	testing exceptions. Okay, so now let's look at writing slightly more difficult tests. So I have
1099520	1105040	a simple employee class here. And this is the employee class from the object oriented series.
1105040	1110320	And if you don't know exactly what this class is doing, then it's not really important. We're just
1110320	1115600	going to see how this affects some testing strategies. So basically what this code is doing
1115600	1122240	is it allows us to create employee instances, where it will set the employee's first name,
1122240	1129120	last name and pay. And then we have some methods that return the employee's email address, which
1129120	1135360	is their first name and last name at email.com. Then we have a method that returns the employee's
1135360	1140720	full name, which is just their first name and last name combined. And we also have a regular
1140720	1146320	method here where we can apply a raise, and it will set their pay to the current pay times the
1146320	1153920	raise amount, which by default is 5% up here. Now the way that this code is set up, if an employee's
1153920	1159360	first name or last name changes, then that should automatically be reflected in the email and first
1159360	1163920	name. Okay, so let's say that we wanted to write some tests for this. So first, what we would do is
1163920	1171360	we would create a new file, and I'm going to call this test underscore employee dot pi. And to save
1171360	1176880	time from you watching me type all of these tests, I'm instead going to grab them out of my snippets
1176880	1183440	file here, and we'll explain exactly what we're testing. So I'm going to copy all of these down
1183440	1190240	to this point, and paste these in here. Okay, so if we scroll up to the top here, then first we're
1190320	1196800	importing unit test, and also importing our employee class from the employee module. And then we're
1196800	1204160	creating our test case that inherits from unit test test case. And then we have three different
1204160	1211040	tests here. So our first test is called test underscore email. And this creates two employees
1211040	1215760	here. And when these employees are created, we should immediately be able to access the email
1215760	1221520	property. So we test both of their emails to check if we're getting the expected values.
1221520	1228560	And then we are changing their first names, and then checking the emails again here, because
1228560	1233840	their email should change with when their name changes. So this test email is just testing to
1233840	1238720	make sure that all that functionality is working properly. And then when we test the full name,
1238720	1244000	it's basically the same thing, we're creating two employees, and then we're checking their full
1244000	1248800	names to make sure they were created correctly. Then we're changing their first names. And then
1248800	1254400	we are rechecking to make sure that the full names were changed as well. And lastly, we have a test
1254400	1260960	for testing the apply raise function here. And again, we are creating two employees. And then we
1260960	1267520	are applying arrays. And by default, that's 5%. So we just test to make sure that the pay was raised
1267520	1273840	by 5%. So this is basically just a slightly more complicated test than our simple calculator test,
1273840	1278800	but there isn't anything here that we haven't seen yet. So we just have three different tests
1278800	1285680	and have some assert equals in here to make sure that things have the values that we expect. So
1285680	1291360	if we run this, then we can see that all of those tests pass. Now, one thing that you might notice
1291360	1298320	is that at the beginning of every one of these tests, we are creating two employees. Now anytime
1298320	1302960	you see the same code over and over, that should be something that pops out to you that there might
1302960	1308320	be a better way of doing this. Because usually programmers try to make their code dry, which
1308320	1313360	stands for don't repeat yourself. Now the reason for that is because if anything ever changes with
1313360	1318880	these two setup employees here, then we'll need to make changes to every single test where we
1318880	1324320	created these employees. Now this might not be a big deal when we just have three tests like this.
1324320	1329920	But if you have hundreds, then it could be a pain to maintain. So it would be nice if we could create
1329920	1336480	these from scratch in one place and reuse them for every test. And there is a way to do that.
1336480	1343280	So that's what the setup and tear down methods are for. So at the top of our test class here,
1343280	1350480	let's create two new methods. And one of these is going to be called a setup and then self as
1350480	1355760	the first argument. And for now, we'll just put in a past statement there. And the second method
1355760	1361760	here will be tear down with self as the first argument and another past statement. Now these
1361760	1368320	are camel case with the uppercase U and the uppercase D. So be sure that you type those correctly.
1368320	1373920	Python usually doesn't do that. But I think this is carried over from some older code. So the setup
1373920	1379920	method will run its code before every single test. And the tear down method will run its code
1379920	1386480	after every single test. So for example, we wanted to create these two employees before
1386480	1392160	every single test. So we can come down here and grab where we're creating these employees. And
1392160	1397280	I'm just going to copy that and paste it here within the setup. Now in order to access these
1397280	1403840	from within our other test, we're actually going to have to set these as instance attributes by
1403920	1410880	putting self dot employee one and self dot employee two. Now if you don't understand how these
1410880	1417280	instance attributes work, then I do have a video in my object oriented series where I go over
1417280	1422800	exactly how those work. But now that we have these within our setup method, now we can delete the
1422800	1429120	creation of these employees from the beginning of every test. So I'm going to go down and remove
1429120	1437120	these from the beginning of all three of these tests. And now since those are instance attributes,
1437120	1442960	everywhere that we reference employee one and employee two, we need to add self to the beginning.
1442960	1448240	So I'm going to do this with the multi cursor functionality here within sublime text. But in
1448240	1454800	your ID or editor, you could just use a simple find and replace. So I'm going to grab all of these
1454800	1463680	employee ones here. And just add a self dot before that. And then I'll grab these employee
1463680	1471280	twos here. And add a self dot before that. So now one more time, let's go ahead and just look
1471280	1476400	at this one more time here. So within our setup, we're creating these two employees, and it's
1476400	1482000	going to create these before every single test. So now here within our test, we're saying, okay,
1482000	1487360	self dot assert equals, and make sure that this employee that we created up here in the setup
1488000	1493920	is equal to this email. And this employee twos email is equal to this email. And we can reuse
1493920	1498960	those same employees for every single one of these tests. And they get created a new for every
1498960	1503920	single one of these tests. So let's go ahead and rerun this and make sure that this is still working.
1503920	1508720	And it does look like all three of these tests are still passing. Now we're currently not using our
1509520	1514560	tear down method for anything. But I still wanted to show you that it exists just in case
1514560	1519360	you have a use case for it. So let's say, for example, that you had some functions that you
1519360	1525360	wanted to test that added files to a directory or to a database, then in your setup method,
1525360	1530320	you could create the test directory or the test database to hold those files. And in the tear
1530320	1535360	down method, you could delete all of those so that you have a clean slate for the next test.
1535360	1540560	Now, just to be more clear where all of this code is being run, let me grab some
1540560	1546480	code here from my snippets that has print statements included throughout all of our tests.
1546480	1556080	So I'm going to grab from here down and replace this employee test here. Now this code is exactly
1556080	1561840	what we just had. But now we have print statements throughout our code. So we have a print statement
1561840	1569840	in the setup and in the tear down and also within every single test case. So now if I go ahead and
1569840	1576800	run this and scroll up here to the top, then we can see that we have the setup and then the test
1576800	1582880	and then the tear down. And it does this for every single test set up the test and tear down set
1582880	1588000	up test tear down. Now another thing to notice here is that the test don't necessarily run in
1588000	1593280	order. So you should never assume that the test run straight down through the script. Now that's
1593280	1598480	why we need to keep all of our tests isolated from one another. Now sometimes it's also useful to have
1598480	1604880	some code run at the very beginning of the test file and then have some cleanup code that runs
1604880	1610640	after all of the tests has have been run. So unlike the setup and tear down that runs before
1610640	1616640	and after every single test, it would be nice if we had something that ran once before anything
1616640	1622880	and then once after everything. Now we can do this with two class methods called setup class
1622880	1629200	and tear down class. Now I have these in my snippets also. So let me grab these so we can see
1629200	1637600	what these look like. And I'll paste these here at the top of our test. And let me fix the indentation
1637600	1642800	there. Okay, so we can see that these are class methods. And if you don't know what that means,
1642800	1648400	basically it means that we're working with the class rather than the instance of the class like
1648400	1654080	we were with self. Now I have an object oriented video on this as well where I go into this concept
1654080	1658560	more in depth. And I'll leave a link to that in the description section below. But once we have
1658560	1664000	these class methods in place with these naming conventions of setup class and tear down class
1664000	1669600	with that camel case, if we run this code, then if we scroll up here to the top, then we can see
1669600	1677200	that it runs setup class first. And then the setups tests and tear downs for each test. And then at
1677200	1683040	the very end here, it runs that tear down class. Now the print buffering is a little strange with
1683040	1689760	that. So it ran after this line here. But it ran tear down class at the end of all those tests.
1689760	1695120	Now this setup class and tear down class can be useful if you just want to do something once
1695120	1701600	and is too costly to do before each test. So for example, maybe you want to populate a database
1701600	1706880	to run test against now as long as you're just reading from the database, then it might be
1706880	1712640	appropriate to just set this up once in the setup class method. And then you can tear it down in the
1712640	1717920	tear down class method. Okay, now I know that this video is getting a bit long. But there's one more
1717920	1723040	thing that I wanted to show you about unit testing that I think is important for most people to know.
1723040	1728320	So sometimes our code relies on certain things that we have no control over. So for example,
1728320	1733600	let's say that you have a function that goes to a website and pulls down some information. Now if
1733600	1739200	that website is down, then your function is going to fail, which will also make your tests fail.
1739200	1745360	But this isn't what we want, because we only want our test to fail if something is wrong with our
1745360	1750320	code. So if a website is down, then there's nothing that we can actually do about that. So
1750320	1754240	we're going to get around this with something called mocking. Now there's a lot that we could
1754240	1759600	look at in terms of mocking, and it could probably be a video all on its own. But let's take a look
1759600	1766000	at an example of some basic usage. So one more time, I'm going to go over here to my snippets and
1766000	1773280	grab a little bit of code here. And this is going to be a new method in our employee class. So I'm
1773280	1780800	going to paste this at the bottom of our employee class, and then fix these indentations. So this
1780800	1787200	is a sample method that we're going to pretend that goes to a company's website, this line here
1787200	1795040	using request dot get and pulls down an employee's schedule for a given month. And real quick, I also
1795120	1804000	have to import the request library here at the top. So import requests and back down here in our
1804000	1811040	method. So we do the request dot get for this website for this employee and for this month to
1811040	1817200	get their schedule. And if the response is okay, then we want to return the text of that response.
1817200	1823440	And if the response is not okay, then we want to return the text bad response. So the information
1823440	1828640	from that website is something that we would want to mock because we don't want the success of our
1828640	1836000	test to depend on that website being up. We only care that the get method was called with the correct
1836000	1842240	URL, and that our code behaves correctly, whether the response is okay, and whether the response
1842240	1851360	is not okay. So to do this, let's import something from mock called patch. So up here at the top of
1851360	1859840	our test employee module, I will say from unit test dot mock import patch. Now there are a couple
1859840	1865520	of different ways that we can use patch. So we can use patch either as a decorator or as a context
1865520	1872000	manager. And it will allow us to mock an object during a test. And then that object is automatically
1872000	1879680	restored after the test is run. So let's create a new test down here at the bottom for that monthly
1879680	1887120	schedule method. And we'll just call this test underscore monthly. Oops, and I wanted to call
1887120	1893440	that monthly schedule not monthly method. And then we'll pass in self. And so in this example,
1893440	1897200	we'll use patch as a context manager. So we'll just say
1897440	1911440	So what we said here was with patch, and then within patch, we pass what we want to mock,
1911440	1919200	and we want to mock request dot get of the employee module. And then we're setting that equal to
1919200	1926240	mocked get. Now you may wonder why we didn't just import requests into our test and just mock that
1926240	1932000	instead of the employee request. But we want to mock these objects where they're actually
1932000	1937760	used. So it's actually used in this employee module. So that is the request dot get that we
1937760	1944160	want to mock. Okay, so now when request dot get is run in the employee module, it's actually going
1944160	1952080	to use our mocked get variable here instead of the regular get method. And we can just assign
1952080	1958400	the return value instead of actually going out to the website. So we can test a successful call
1958400	1967120	by saying mocked get dot return value. And if we look back at our employee module,
1967120	1976320	we want that return value to have an okay of true. So I can say return value dot okay is equal to
1976320	1986480	true. And let's also set the text of that return value so we can set the text equal to, you know,
1986480	1993200	something like success. So if you look here in our employee module, if it returns okay as true,
1993200	2000640	then we should get our response text back. So now within our context manager here, let's just run
2000640	2006960	our monthly schedule method just like we're testing it. So we can say schedule is equal to
2006960	2020240	self dot employee one dot monthly schedule. And we'll just pass in a value of May to get the May
2020240	2026000	schedule. Now one more awesome thing about these mock objects is that they actually record when
2026000	2031600	they were called and with what values. So we want to make sure that the get method was called
2031600	2041120	with the correct URL. So to do this, we can say mocked get dot assert called with. And this is
2041120	2047760	just a method of that mocked object. And now we can test that it got called with the correct URL.
2047760	2057040	So since this is employee one here, the last name is Schaefer right here. So this should have been
2057040	2065920	called with the URL HTTP company dot com slash Schaefer and the month that we passed in was May.
2065920	2071680	And if you're wondering where I get that here in our employee class, this is where it creates the
2071680	2078320	URL here. So it's saying HTTP company dot com and then the employee's last name and then the
2078320	2083440	month that we passed in. So that's the URL that it should have called that get method with. Now
2083440	2088640	after we know that the method was called with the correct URL, let's make sure that it returned the
2088640	2098320	correct text, which we set to success. So let's say self dot assert equal. And we want to assert
2098320	2106240	that our schedule, which is the response is equal to success. Okay, so now if we run this code,
2106240	2110080	then we still have our print statements in here. But we can see down here at the bottom
2110080	2116800	that it ran for tests, and that they all passed. Okay, now last thing is that we want to test a
2116800	2124240	failed response. So to do this, we can just do the exact same thing. So I'll just copy all of this
2124320	2131520	here and paste it in down below. But instead of this okay value being true, I'm going to set this
2131520	2138560	to false. So that'll test a bad response from the website. And if that okay value isn't true,
2138560	2144240	then our monthly schedule function should just return the string bad response. So we actually
2144240	2149600	don't need this text value here at all. So we can just remove that. And just to switch this
2149600	2156560	second test up a bit, let's change our employee here to employee two, and we'll use the month
2156560	2162080	of June just to make these tests a little better. So now the get method should be called with the
2162080	2168480	URL of Smith, which is our employee to if I scroll up here to the top, you can see our employee two
2168480	2174560	is Smith. And then that month that we used is June. So I'll save that. And lastly, instead of our
2174560	2182000	result equaling success, it should instead return the text bad response with an exclamation point.
2182000	2187680	So now if we run this, then we can see that all of our tests are still passing. So I know that
2187680	2192240	this mocking can be a little confusing when you first see it. And like I said, it could probably
2192240	2198160	be a video all on its own. But you don't use it a whole lot unless you're, you know, accessing
2198160	2203840	things like URLs and things that are basically out of your control. So you don't use it a lot.
2203840	2209040	But whenever you do need it, it is definitely nice to know. Okay, so I think that's going to
2209040	2214880	about do it for this video. But before we finish up here, let me mention a few things about best
2214880	2220720	practices. So first of all, like we saw in this video, tests should be isolated. So if you're
2220720	2226400	still unclear what that means, basically, this just means that your test shouldn't rely on other
2226400	2233440	test or affect other tests. So you should be able to run any test by itself, independent of the other
2233440	2238720	tests. And one more thing that I wanted to mention is that you'll notice that in this video, I was
2238720	2244560	adding tests to existing code. Now you may have heard something called test driven development.
2244560	2249840	And basically what test driven development means is that you write the test before you write the
2249840	2254960	code. And I know that that might sound a little strange. But sometimes I've found it useful.
2254960	2259680	I don't strictly follow test driven development to where it's something that I always do. But
2259680	2265200	basically, the concept is that you should think about what you want your code to do, and then
2265200	2271600	write a test implementing that behavior, then watch the test fail, since it doesn't actually have any
2271600	2277040	code to run against, and then to write the code in a way that gets the test to pass. So if you
2277040	2281600	ever hear someone talking about test driven development, then that's what they're talking about.
2281600	2285840	Okay, so I think that is going to do it for this video. I hope that everyone now has a good idea
2285840	2291360	for how they can get started with unit testing. Now any testing is better than no testing. So don't
2291360	2296640	feel like you have to be an expert with mocks and things like that before you start writing any tests.
2296640	2301600	Even if you just write some basic assertions, then it's better than not having anything. Now
2301600	2306880	there is another test framework out there called Pi test that a lot of people like to use more than
2306880	2311920	this built in unit test library. And I'll be doing a video on that in the near future so that you
2311920	2316160	can compare the two and see which one you like better. Now if anyone has any questions about
2316160	2320240	what we covered in this video, then feel free to ask in the comment section below and I'll do my best
2320240	2324080	to answer those. And if you enjoy these tutorials and would like to support them, then there are
2324080	2328080	several ways you can do that. The easiest way is to simply like the video and give it a thumbs up.
2328080	2332000	And also it's a huge help to share these videos with anyone who you think would find them useful.
2332000	2335360	And if you have the means you can contribute through Patreon and there's a link to that page
2335360	2340000	in the description section below. Be sure to subscribe for future videos and thank you all for watching.
