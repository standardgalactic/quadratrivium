{"text": " So I'm Will and I was a middle school teacher and I ran a summer camp and I did all these things and then at some point I got a degree in computer science and I worked as a Java developer and all this stuff, right? And then I got fed up with the JavaScript and the Java and all that and I went to graduate school at Indiana University to work with Dan Friedman who you may have heard of. He's someone who wrote a book called The Little Lisper and a revised version called The Little Schemer and The Season Schemer. I wrote a book with him called The Reason Schemer and I took Dan's class the first semester I was there and a couple of weeks in to the class, Dan showed me a program that changed my life and basically I spent the last 12, 13 years trying to understand these five lines of code, right? And I will spend the rest of my life trying to understand the implications of these five lines of code and this is what I like, okay? So some people like writing a hundred thousand line compiler or an operating system kernel with two million lines of code or whatever and that's great. What I like is sort of going the opposite way. I like the 3 by 5 card or the 4 by 6 card and if you're not an American, I don't know what that is, it's A4 or something, I don't know, it's like a 3 by 5 card, maybe a 4 by 6 card. If you can't fit down the idea on a 4 by 6 card, then think harder. That sort of Dan's philosophy, right? And ideally you get it down to the 3 by 5 card and then you write a little book on it and so that's kind of his way of thinking and I share a lot of that sensibility. So what I would like to talk a little bit about today is this program that I saw and it just floored me. And to this day I get nerd chills every time I think about it, right, I really get nerd chills and I think, you know, I was nervous about, I am nervous about giving this talk because one of the dangers I think is that when you've been programming for a while and I know a lot of people in this audience like NoLisp or they've worked through SICP or they've written lots of interpreters and all these sorts of things, they know something about Lambda Calculus, after a while you can feel like you understand something and that's the most dangerous way of thinking is to think you understand something, right, and that there are no, you know, kind of new tricks in this and basically every time I learn something new about computer science or, you know, every couple of years or something like that, I like to go back and try to think about those things which I learned a long time ago and I'd stop thinking about, you know, because I thought at least, you know, I've got some grasp of this and almost always I'll have a new angle, right, and for the really, truly deep ideas, computer science or anywhere in the other field, you know, there are many ways of looking at these deep ideas and I'm going to show you, you know, a couple ways of looking at this program but I'm not kidding when I can say that I'm going to spend the rest of my life trying to understand it and there are many other people who've tried to spend, you know, their careers basically understanding aspects of this five line program and, you know, to give you sort of a reminder of, you know, a five line program, the amount of complexity you can fit in there. Does anyone know about the Colatz function? What's the Colatz function? Yeah, it's this little function, you know, like three in plus one and, you know, you have like a division by two or something like that and, you know, basically you're trying to figure out if you give an integer, a positive integer as an input, will this operation terminate? It's just got some multiplications, additions and divisions, right, and it's like the tiny little program and, you know, it's like a three line or two line program and the best mathematicians in the world have been trying to prove for many decades utterly without success that this program always terminates if you give a positive integer and Paul Erdisch, one of the great mathematicians of all time, at one point said, mathematics is not ready for the Colatz problem, right? So that's a three line program who's stumped some of the greatest minds in history. So I'm talking about like a five line program, okay? So that should give you pause. That should give you pause and we all have to have a healthy amount of respect for the three by five card program. So anyway, the program I'm going to talk about is an interpreter for Lisp written in Lisp. And it's one of these things where if you don't know Lisp and you first see it and you're like, oh, what are these parentheses? And then after a while you kind of start thinking, what is this lambda thing? That's something to wrap your head around. And why are there two lambdas like nested? What does that mean? And you kind of go over these different ideas at the time and eventually you kind of get some sense. You trace through a bunch of programs and you're like, all right, I kind of get some sense of what's going on. And then you start modifying the interpreter. And one of the great things about this program is that there's so many ways to change it and explore it and play with it. You can add arguments to the interpreter. You can rewrite the interpreter in a variety of correctness preserving transformation styles. One program transformation you can apply is something called continuation passing style, which I consider the gateway drug of program transformations. You know, normally you CPS that sucker and then from then on, you know, it's off to the races. So, you know, you CPS an interpreter, you CPS it twice, that gives you delimited continuations. And now you're cooking with gas. You can add a store argument to the interpreter, right? You can add boxes and you could start doing, you know, mutation and side effects in different ways. You can do call by value versus call by need versus call by name trivially, right? You can do all sorts of things that are really deep and give you deep insights into concepts of programming languages that you'll use, you know, the rest of your career or the rest of your hobby years or whatever. And so I don't know of any other artifact in all of computer science that packs so many ideas and the potential extensions to explore so many different areas as this interpreter. And in fact, you know, Alan Kaye says that when he first saw the Lisp interpreter written in Lisp at the bottom of page 13 of the Lisp 1.5 manual, right? It changed his life and he realized these are Maxwell's equations of software, right? It's very much the same right down four little equations. It helps if you like take them from the other mathematicians and physicists and call them mathmen. But you said, you know, you write down the four equations and you put that on the three by five card, right? And then you spend the rest of your life trying to understand what those four equations are, what the implications are. So that's very much what this interpreter is. And I'm, you know, I can't do justice to it. I can only show you a couple of the many aspects of this multi-aspected, you know, beautiful system and many of which, you know, I feel like I'm a complete noob too. But I can tell you that there are very interesting things out there. So, for example, there's this idea of reflective towers of interpreters. We have an interpreter interpreting an interpreter interpreting an interpreter. That part's already interesting. But when you have infinitely deep tower or infinitely tall tower, that's when it starts getting fun. And in particular, it becomes especially fun when the interpreter being interpreted by another interpreter can reach back up into the interpreter interpreting it and change the semantics of itself by changing how the interpreter interpreting it works. And this is one of the things that Dan Freedman says he refuses to work on because it melted his brain too much. It's like basically the one thing that he's like, he won't touch anymore. So that's the sort of fun you can have. You know, it's bad enough having a five or six line program, but when you have infinitely many of them interacting in these ways, then you can do very interesting things. And if you're interested in that sort of thing, I would point you to the work of Kanichi Asai. And also, my friend Nada Min gave a keynote at Strange Loop a few years ago when she talked about this. I think she called the talk Programming Should Eat Itself. And she talked about this reflective tower idea. Okay, so that's just one aspect. You can go deep. You can go deep that direction if you want. I haven't touched that yet. I want to connect that with the thing I'm going to show you. And even the people who do this type of very bizarre programming, they kind of get scared look on their face when they start thinking about the implications. So that's a good feeling when you're scaring the veterans of the Lambda Calculus. So that's something I want to accomplish. And there are many, many other directions you can go. Program transformation, directions, different evaluation orders, all sorts of things. And then you can layer a type system on it, that kind of thing. Now you have the interpreter and a type inferencer and a share structure. And you can have them interact in interesting ways and all these sorts of things. So just like CPS is the gateway drug, program transformations, Lisp in Lisp is the gateway drug of the whole world of programming languages, I think. So what we're going to do is write an interpreter. We're going to write the Lisp in Lisp in the way that Dan wrote it. And Paul Airdish, the great mathematician, had this idea that there was a book that God kept that had every beautiful proof in it. Only the beautiful ones. And every once in a while, he or someone else would come across a particularly elegant and beautiful proof and say, oh, that's a proof in the book. And so we're going to see a program in the book. This is the program in the book. I've written hundreds of interpreters and I've read lots of books on interpreters, but this to me is the one in the book. Everything else is a pale limitation. All right. So who here is familiar with S expressions, symbolic expressions or some flavor of Lisp? I can read parentheses. All right. Maybe half and half. Okay. Well, I'll teach you how to do it. I'll teach you how to do it. And some of the things I'm going to show you, like I said, this is jam packed full of deep ideas and I can only scratch the surface, but even scratching the surface may leave you dizzy. If that's the case, close your eyes, lean forward, and the room will stop spinning. And then as we go on, you'll be able to hopefully pick up on some of the concepts and ideas and I'll show you some stuff at the end that maybe will be surprising to you, even if you don't understand all the details. And the great thing is that once you have some sense of what this is about, you will be filled with a fiery passion to learn all the rest. And I can point you to some references for that or we can talk about it over a milkshake. So the first thing I'm going to do is talk about lists. Let's talk about lists. So Scheme is a Lisp and Lisp comes from List Processing. That's what Lisp stands for, List Processing. So we're going to talk about lists and symbols. That's the first thing we're going to talk about. So let me go ahead and start up trusty Shea Scheme, which is now covered under an open source license. Woohoo! All right. So Shea Scheme has this thing called the REPL and it's pronounced REPL not REPL. And this you probably are familiar with if you've used other languages that have interactivity. One of the cool things about a good scheme implementation is that even though I'm typing expressions interactively, those get compiled on the fly directly to machine code. Actually, at least some versions of, say, Shea does an analysis first to determine whether or not it's faster to evaluate it or faster to compile and evaluate it. So this is faster in general than a lot of systems. Okay. Let's write a simple scheme program like 5. 5 evaluates to 5. All right? We don't have to make it evaluate to 5, but let's pretend that we will. Now, what else can we have? We can have a list containing 5 and you could see the list is represented by these beautiful parentheses. We can have a list containing 5 and 6. Notice that I did not defile my program with commas or anything else like that. We can have a list that contains a list. What do you think is going to happen? More parentheses. Look at that. We can go deeper. We can go as deep as we want. So we have lists. We can have lists of lists. What is another name for a list of lists? A tree. Oh, have you ever heard of trees? Right? Have you heard of this thing called XML, this new thing? Do you know what language came before XML? What language? SGML. Yes, right. Have you heard of something, a beautiful thing called XSLT? Brings joy into your heart. Do you know what the SGML equivalent of XSLT was? See who knows the obscure stuff. Dissil? Has anyone heard of Dissil? DSSSL? What is that? Dynamic style and semantics language or whatever, something like that. You know what Dissil was? It was Lisp. It was R4RS Scheme. Because if you're going to work on tree structure data, what's the right way to work on it? A tree is an inductively defined data type. How do you deal with that recursion? That's how you deal with trees. So Lisp is all about recursion and dealing with trees. Programs, most programs, represented as trees. If you're going to have a programming language that can modify programs, what better way to do it? Well, the Haas scholars will say there are better ways. But anyway, don't listen to them. Okay. So we have lists and things like that. By the way, if you want to learn scheme, there's an awesome interactive fiction game by Andrew Plotkin, aka Zarf, called Lists and Lists, where a genie teaches you to program and scheme. And you can actually implement logic programming inside of that scheme, although eventually you'll run out of memory because the Z machine doesn't have that much space. But anyway, it's a good exercise. So we have lists. We have lists contained lists, which are trees. We have numbers which evaluate to themselves. There are other values like hash t is a representation of truth. There is no representation of beauty, but we have hash f, which is a representation of false. An interesting fact about scheme is that every value in scheme is considered true except for hash f. So five is considered true. Well, then that's beautiful. It is open to debate. So we have also this amazing and very deep operator called quotation. Quote. Quote. And that is the topic of a lot of stuff I won't get into. But quote itself, this is a very controversial operator, how it should behave. People have created entire versions of lists just based on different notions of quotation. But in scheme, the way quote works is quote of anything gives you back that thing. So we quoted five. We get back five. We actually don't need to quote five. Quote five is something called a self-quoting or self-evaluating literal. But we can do things like quote a list. We can quote a list of five, six. And we can back the list five, six. We can quote the empty list, which has nothing in it. Because we use quote so much, we don't necessarily want to write quote this way. We're going to have a shorthand. Scheme doesn't have a lot of shorthand, but this is one of them. So we're going to write quote somewhat like that. Five, six. Okay. This I will allow. I don't like too much, you know, messing with my symbolic expressions, but this is going to be okay. And then in addition to having things like numbers and lists and lists containing lists and true and false values or bullions, we have an amazing thing called the symbol. And if you program in Java, I'm sorry, you don't get symbols. If you program in many languages, you don't get symbols. But you do have symbols in a scheme in most lists. So we can say milkshake with a quote around. And that gives us back milkshake. Milkshake is a symbol. It's a symbol. It's not a string. Strings are different. Symbols are things that represent metaphorically objects that we might care about. Okay. This is an atomic value. We can't tear it apart. We can't do anything like that. It's a unique thing. And it turns out internally it's fast to compare symbols. So we can use symbols to represent interesting data. We don't have to say, oh, we're in C. And so a milkshake is five or whatever it is. Right? So we can do things like this, which are classier. Okay. So we have symbols, lists. We can have symbols inside of our lists and things like that. We can also make decisions. We can do things like ask if a list is empty. So I say, is the empty list null? So if I have a list, there's friends. The thing that comes inside the friends first, that is basically a function call. Unless it's something like, quote, there's something called special forms that have special evaluation rules. But in this case, we're just calling a function. And the function, you can tell, is a predicate. It has a question mark that's going to return true or false. So we're asking if the input expression evaluates to the empty list. And it does. We can ask if five is null. Five is not null. So we can make a function call. We have notions of predicates. We can also build up lists in other ways that I haven't shown you yet. So I showed you two ways of lists. So I can just quote a literal list or I can call a function called list. 3, 4, 5. I can also build up list-like structures using an operator called cons. Cons for construction. In fact, Dan Friedman, who is my advisor, wrote a very famous paper with David Wise in 1976 called cons should not evaluate its arguments, which was one of the first papers on laziness like you have in Haskell. And there was another paper by Henry Baker called cons should not cons its arguments. That must have stayed up all night coming up with that one. So the typical way to use cons is to cons some object onto an existing list. So we can cons five onto the empty list. Now we get a list containing five. And I can build up chains of things using cons. So I can cons six onto the list to get back from the cons five. Cons takes two arguments. And I can build these lists up. Okay? All right. So that's cons. And we've seen like the null test. Let me show you how to make a choice. So I can use something like if, if five is null, then return six. Otherwise return seven. So if has three sub expressions, we have a test expression, what's called the consequent expression, and then the alternative expression. So what would be the value of this expression? Seven. Okay? All right. So that's one way to make a choice. And there are other ways. Another way to make a choice is something called conned. And the reason, I'll use this notation, the reason that we have this conned operator, conditional operator, is that it may be that we want to make lots of choices. So instead of having nested ifs, which gets annoying at some point, we can do something like this. Okay? What do you think this expression will evaluate too? Eight. All right. Great. Awesome. And I'll show you a couple of the things. One is, you know, we can do things like addition or multiplication. Okay? So addition is like plus. It's actually a function bound to a procedure that knows how to do addition. We also have multiplication. So I go, blah, blah. Right? And so I can deal with big dumps, arbitrarily large precision integers. So that's multiplication. And I can also do things like define. I can define functions. I can define all sorts of things. I can give a name to something. I'll call this, I don't know. I just had a tarot milkshake. So define tarot to be, quote, good. And there's a symbol. And if I type tarot, then the variable gets looked up in something called an environment. And I get back the value of that variable, which is a symbol, good. So define just gives a name to some value. I can give other sorts of values if I want. It doesn't matter. And another concept is that of a function. And the reads are a procedure, technically. And the way I create a procedure is with this expression called lambda. You type it L-A-M-B-D-A, but I've got this fancy thing that turns it into a symbol. And what you do with lambda is you have a list of arguments. These are the formal parameters to your procedure. And then you have a body. So this is lambda xx is the way it pronounced it. And this is just going to return its argument, the value of its argument. So this is the identity function, the value of the identity function. And we've already seen that you can write parentheses. And parentheses normally mean a procedure call. We're not specifically calling it, but that's the case unless we have what's called a special form in the first position, like quote or define, something like that. So I am going to apply that, the value of that lambda expression, which we'll evaluate to a procedure, to the expression five. Five is an expression that evaluates to the value five. So we are starting to have the notion of expression versus value. And I get back five. Through a mechanism that involves a number of steps, we evaluate the argument expressions. There's something called the operator expression, the rater. And the rand, the upper rand, we evaluate the operator that evaluates to a procedure of one argument. We evaluate the rand expression that evaluates to itself in this case. And then we perform a procedure application. And we apply that procedure to the value of the argument. And we get back five in this case. Okay, so that's the mechanism that we're going to implement. And I can, of course, give a name to a function. I can only call it double. Okay, so now I have a body that's a little more interesting. And I can double my fun. That doesn't work. The Haskellers are going to give me grief. But I could double five and get two in binary. So you can double anything you want. And I can define all sorts of things. So I can do things like define, define to be five. Right? Why is that a, oh, that's a great thing. So I can do a lot more than that. I can change what lambda means and things like that. That's where the real fun begins. So I'm not going to talk about that. That's for the next talk. But I'm going to restart my scheme. Just saying, just saying, I could, I could fly solo with that one, but I know how to do it. But I'm not going to do, you're not ready yet. You're not ready yet. Okay. So, so now you know scheme. Okay, now you, well, you're joking, or you think, you think I'm joking, but that's basically all you need. Okay. There's one other thing I'm going to talk about or show you very quickly. That's not technically built into scheme, but it's easy to add because scheme houses very powerful macro system that allows you to extend the language in different ways. And so what I'm going to do is I'm going to load a macro for pattern matching, something called P match. And this is just one of many systems that allow you to do pattern matching. And so basically P match is similar in spirit to our cond, except now we are going to match against an expression. So I can say, we're going to match against list three, four. And now we can have just like with a cond, different pattern or different expression or different clauses, but now we're going to match against the pattern. So I could say I have a pattern that matches against the list of two arguments. And these commas, I'm not going to really get into the details of what the commas means syntactically, but basically you can think that this list of two elements is getting pattern matched against the list we get back, the list three, four. So the x will be associated with or bound to three, the y will be bound to four. And then on the right hand side, we can use those x's and y's. And sure enough, we get back seven. So that's what P match does. If you haven't seen pattern matching before, it's very powerful, especially in conjunction with a form of quotation in scheme called quasi quotation or back quote. That's really what's going on. If you know scheme, there's an implicit back quote here. And those commas are called unquote. All right. So now we know basically everything we need to write an interpreter. So let's do that. All right. So let me go back to my file here. So I'll load my P match. And I can put this code online if people want to see it. All right. Okay. So one thing that we need to do is, you know, decide on the name for our interpreter. That's the hard part, right? So names are hard. What would be a good name for interpreter? Fitz Roy. Okay. Define. Fitz Roy. How do you spell that? All right. So we have a name. This is our life now. And thank you. Derailed us all. So, well, what do you think I should type next? P match, almost. We're not quite right. The arguments. So we need to define a function. The procedure is going to do something. So I have to type lambda. That's a good thing. When in doubt, the answer is lambda, right? So we have a lambda expression that's going to take some arguments. Okay. So if we looked at our interpreter here when we were writing stuff like plus three, four, this is basically an interpreter. Technically, it's not an interpreter. That's a form of evaluation. But it's an evaluator. So if you look over there, we have an expression coming in. And we evaluate the expression to get a value back. So we can have an expression. That's a good name. And I'm going to call this eval expression. Okay. Fitz Roy would have been fine. But this is a val expert. It's important as a safety tip to not call that argument exp. Now, why would that be? Yeah. Because scheme has an exponential function built in called exp. And if you type, you get very interesting errors if you do it wrong. So I call it expert. All right. Yeah. If you call your function eval, hilarity, may ensue. You can always restart. Now. Now it's time for P match. And what are we going to P match against? Well, guess what? We don't have a lot of choice. How about expert? All right. So we're going to P match against. See, it writes itself. Okay. So what sort of expressions do we want to have in our language? How about numbers? Number is a good thing to be able to evaluate. We had five. That was our first scheme program. So we're going to evaluate five. So the way that you write that pattern is that comma in will match against anything. And I mean anything. So that's no good. We have to add something called a guard where we can add a predicate. And so the predicate is basically part of this matching process. So if the pattern matches against expert, then additionally, the guard has to return a true value. That is any other value, the value, anything other than the hash F in order for the entire pattern to be considered matching. And in which case, we try the right hand side. Yes. We could, we could totally use a con here. And in that case, we could just have, you know, the number question mark of N, right? So right now it's not really paying for itself. It's a lot, a lot more mechanism than we need. But when we start getting the things like lambda that have more structure, we could do, that's a very good question. We don't need P match. Okay. This should be very clear. We could do everything with car. Oh, sorry. Did I talk about car? Well, we'll talk about car in a minute, maybe. Maybe, maybe we can avoid talking about car. We'll see. There's like a historical accident that involves some of the names and scheme that have not yet been corrected intentionally. But we don't talk about that. So anyway, so we're, we're going to use P match for reasons we'll see in a minute. We don't have to. So what do you think a number should evaluate to? It's self. Okay. Sounds good. So we'll just write down N. So now we have an interpreter. So let's try it. Well, you know, I don't have that much time. Okay. So we're going to load this thing. Uh, interp.scm. Okay. And now we can test it. Eval expert. And all right. Someone give me a nice expression to evaluate. Five. You're, you will go far. But that's the wrong answer. The right answer is quote of five, because we want to make sure that whatever expression we pass in is not evaluated by scheme. A classic error. Let me show you. Well, our interpreter works so well that we already can handle addition. Wow. That's really impressive. And if you've written enough interpreters, you've run into this problem before. I was like, whoa, that's, I guess I can turn in my homework early. Okay. So that's why we put a quote in front of whatever we're passing in. So really quote of five. All right. Well, maybe we want to have more things than just numbers. How about we add, add one. Add one is a function and scheme that adds one to a numeric argument. So let's implement add one. So, let me add another clause here. And in this case, we're actually going to match against the list. Okay. So we see list structure. And now you start seeing why we're using P match. So the expression we expect is an add one expression, which has a sub expression inside of it. This could be arbitrarily complicated. This doesn't just have to be a number. This could be something that evaluates to another, such as another call to add one. Okay. All right. So what do we do now in this case? Oh, yeah. Add one. Well, where did we get add one from? Scheme. We hope it's built in. We'll see. All right. So I'm going to call val expert inside of E. All right. So I'm going to use schemes add one to implement add one in my language. Okay. That's cool. So let's try it. Okay. So now let me quote add one. Okay. And then I can always do the test like this because otherwise you might accidentally not evaluate the sub expression. All right. So now we can do add one. That's great. All right. And I have one called sub one. All right. Same thing, right? All right. I should have used copy and paste abstraction. Well, I kind of did. But okay. So you see how this goes. That's fine. We could add a few other things. So we could add something like multiplication. Now, multiplication is interesting because our version of multiplication is going to take two sub expressions. Ooh. You want to need two. So now how do we write this thing? How many recursive calls do we have to make? Do. Right? Well, this is like falling off a log. All right. Okay. So we're going to multiply what we get back when we evaluate E1 and E2 and multiply that. Okay. All right. Let's do another one. How about if? So I already told you there's a test and a consequent and an alternative. So how do we evaluate if? Any ideas? This is tricky. Using if. You're catching on. All right. How about if evalexper of t copy and paste abstraction? Yeah. All right. There's probably like a copy and paste monad in Haskell or something, right? So copy and paste abstraction. Now we have, yes. Great. Can we short circuit? Well, for things like and and or, we might want to do short circuit evaluation for if we're going to have to evaluate the test. But if semantics are that if the test is true, we will only evaluate the first sub expression. Otherwise, we'll only evaluate this sub expression. So they won't both be evaluated. Okay. Okay. Now, basically, this interpreter is pretty boring. All right. It's pretty boring. And the reason is we have not gotten to the beautiful part of the interpreter. The beautiful part of the interpreter has to do with three lines and only three lines. What are those three lines? Lambda. That's the, I told you there's always the answer, right? Told you. What's the second one? It's not lambda. What was that? Apply application. And the third one. Not a vowel. Not procedure. Was that? Not defined. Not quote. Oh, wow. All right. Stumped y'all. Haha. All right. We'll figure it out in a minute. Okay. So, let's try, you know, let's try doing, let's try doing a vowel. Okay. So, we've already seen the syntax and scheme. It's minimalist to say, not ro-co-co. And basically, we have a raider expression, an operator expression, and an operand expression. If you read a book and you see raider and ran, that's what they mean. You want to put this line last in your P match so it doesn't overlap. This pattern does not overlap with the others. This becomes fun when you start doing logic programming where the ordering isn't supposed to matter. But in this case, P match evaluates in the top down. And so we're going to put our application case last. All right. Okay. What do we do? We know the drill. We are going to evaluate via copy and paste subtraction, the raider and the ran. Perfect. Evaluate the raider and evaluate the ran. All right. Now, what do we do with those two values? The raider is supposed to evaluate to a procedure, some representation of procedure. And this is going to evaluate to some argument that we're going to call the procedure on. So what do we do now? Apply it. How do we apply it? No. Lambda doesn't apply. But you're right that I got caught up. We're going to use apply, which is through parentheses. Right? That's it. If you blink, you'll miss it. Some people have what I might call parentheses blindness. And they just can't see that that is different than without those parentheses. But they are different. There's no mistaking the difference in behavior. Okay. So that is our application. Very nice. So that's one of our three magic operators. We also have this thing called lambda. So I can match against the lambda expression. This is where the pattern matching comes in nicely. And I can give a name to the variable. And I can have a body expression. Okay. So something has got to happen with the lambda. Do you see that x? What is x? Well, there's a list containing x, but the x itself, not part of the list. What does that mean? What is that thing? It's an identifier. And if the x were to appear inside of rand, what would that be? It's a variable reference. Okay. So this is how we have a variable reference. And what's the value of the variable x? Tell me. Don't know yet. When will you know? No, at runtime when we've actually done the procedure application. That's right. We won't know until then. So if I call the resulting procedure with five as the argument, what would be the value of x? Five. So we have this idea that if a variable appears in the body, at some point, we may have to look up the value associated with that variable or bound to the variable. And in order to do that, we need some mechanism for variable lookup. And the traditional way of doing that in this sort of interpreter is called an environment. So we are going to write an environment passing interpreter. Okay. Anytime you hear passing, that means that there's going to be an argument coming in to our function for the interpreter. So you see right now, we basically have a calculator, we have an expression, but there's no context of the expression. There's no notion of variable bindings that may be in play at this point. So we're going to have to add something else to this expression, or sorry, in addition to the expression, as an argument. So I'm going to add an environment. And this changes everything. All those three magic lines are going to in some way be involved with the environment. Okay. So now we have an environment and the environment is going to contain somehow associations between variables and values. Now, what do you think the third magic line of code is based on what you've seen? Parentheses? This is the parenthesis line, the application. Cons, nope. Cons is useful, but you actually don't need it. You only need these three lines. That's turn complete, actually. It's amazing. We can delete all the other junk. The other stuff is junk. You don't need it. You don't need it. You only need the three lines. And I'm serious about that. You only need the three lines. You heard this thing called a Turing machine? This came first. Lambda calculus came first. Girdle didn't believe church that it was Turing complete, even though Turing completeness hadn't been a term yet. Okay. We need one more thing. No, we don't need to find either. Was it? Variable lookup. That's it. That's the last piece of magic. We've got to have a way to look up those variables. All right. So, I need a guard because I have my match anything pattern. And I am going to represent variables as symbols. Okay. Because we have symbols and scheme. So, if we have a pattern which is just a symbol by itself, right, we're going to say that's a variable and we're going to look it up. How do we look up a variable? In the environment. Okay. Now I have to tell you a piece of information you don't know. I am going to represent my environment as a procedure of one argument that takes a variable. So, how do I actually look up X in the environment? I'm not going to evaluate it, actually. Look up X in the environment. Like that. Procedure call. Okay. This is where it gets kind of weird. It's like kind of spartan, right? I'm just like, ah, got a procedure. There's only one useful thing a procedure can do. Call it. Takes one argument. Give it one argument. Call a day. That's it. All right. So, that's what we're doing. Okay. Great. Now, lambda. What is lambda going to do? Ah, yes. Extend the environment. It's the magic word. The environment extension is the key thing here. So, lambda expression evaluates to what in scheme? A procedure. Okay. So, we have to have a representation of a procedure which you can think of as a delayed computation where we don't have enough information to do the computation in the body yet. But we're going to wait until the procedure gets called and then some value will be bound to that variable and then we'll be able to evaluate the body at that point because we'll have the correct context. We'll know the variable binding. So, we have to somehow represent a procedure. How can we represent a procedure, do you think? Lambda. There you go. 60% of the time, it works every time. All right. Lambda arg. That's right. We're going to have an argument coming in. What is that arg thing do you think? What does that correspond to in the three magic lines of code? It doesn't correspond to X and this is something we have to be very careful about. It corresponds to the value of the RAND. Remember, the procedure application line and the lambda line are intimately connected because we're going to end up doing a procedure call on this lambda expression. The value of that lambda expression. That's going to evaluate to a scheme procedure and we're going to call the scheme procedure and pass in the value of the operand. Therefore, arg will be bound to the value of operand. If we're calling the identity function on 5, RAND will be evaluated to 5, arg will be bound to 5. Okay? Keep that in mind. Okay. So, now what I heard was we have to evaluate the body in the extended environment. So, let's do that. How do we evaluate the body? If only we had a procedure that knew how to evaluate the body. Well, that's what we're writing. Magic of recursion. Evaluate the body. Now we have to feed in an environment and we have to go back and retcon these lines because you don't have environments yet. So, we have to have an environment. So, for these lines down here is kind of boring. It's just the good old environment. Okay? But up here, we need an extended environment. What is the extension? How are we extending the environment? Lambda. That's right. You laugh. It is correct. You extend it using lambda. Yeah. It's a one-trick pony, but it's got a good trick. Lambda. Why? Whoo. All right. This is when the nerd chills start. Okay. That is an environment. Remember, we wanted to look something up. We called X on the environment. Well, that's the sort of creature we're talking about. A procedure of one argument. We're creating a procedure of one argument. That's our environment. So, extended environment. So, what are we going to do with that environment? What's going to happen inside? If. Oh, wow. Yeah. That's right. We have to make a choice. If of what? Oh, I didn't tell you this part yet. If equals. Well, there's this thing called EQ. Huh. Okay. If what is equal? What two things do we want to compare? Y and X. Okay. If they are equal, then what do we return? Not X. Arrg. This is the critical piece. And here's the other critical piece. What do we do if they don't, if they aren't equal? Inv. We're going to look up an inv. What do we look up? Y. Not X. Y. Because Y is what's coming into that lambda, the innermost lambda. That innermost lambda is an environment, extended environment. That lambda right there is a procedure. So, we have what's called a higher order representation of environments and procedures in our interpreter. Okay. So, let me go and fix up my VAL experts to give them environments. See, these lines are boring because we're not messing with the environment at all. It's not interesting at all. And you could say the application line isn't messing with the environment. And that's true with this representation of procedures and environments. But if we change our representation of procedures and environments, it actually does matter. You'll see that if we were to use data structures such as lists to represent our environment and procedures, then this application line would have a different looking structure. Basically, the work that we're doing up here in the lambda line, we get put into the application line. All right. So, in theory, this should work now. We'll see if you're all paying attention. Okay. VAL expert, let's try it out. Okay. So, add one and hopefully it still works. Oh. All right. We didn't pass it in. Oh, the call was wrong. Oh, very clever. Okay. So, you're right. We need to call a VAL expert now with an environment. What does an environment look like? Lambda. Yeah. Again. See. All you need is lambda. Y. Okay. And what is this environment going to do? What happens if we look up a variable like X in this environment? What should happen? Error. Means it's not bound. Okay. This environment starts out with nothing bound unless we want to put it in there. So, we can do a call to a scheme's error. We can call it. Look up. Something like that. You know, unbound. All right. Perfect. Okay. We get back seven. I can now look up a variable in the empty environment like X and I got my error. Okay. I can go ahead and do something like create a lambda expression. Let me try to do lambda xx. Okay. It gives me a procedure, a scheme procedure representing my procedure in my language. I can do a procedure application. Let's see if this works. I'm going to apply it to five and get back five. Proof. It works. I can do something a little more interesting. Lambda applied to lambda. So, I should get back into any function and I can apply the result of that to five. Okay. And then there's one ultimate test case. I think we've implemented everything. Oh, there's one more thing we need to add. Let me just add one more clause which is zero, huh? Okay. So, we're going to add one more clause to see if something's equal to zero. Let me just follow our usual thing. All right. And I think that may be enough now to do what I was going to show. So, there's one standard test case which tests everything and it's factorial. And it is factorial using something called, what Dan Friedman calls the poor man's y-combinator. You'll notice we don't have define in our language or in our interpreter. There's something called let rec to define mutually recursive functions. We don't have that either. What we do have lambda and the answer to everything is lambda as we know. So, this code here is factorial. You can see this got some function calls and stuff like that, but it may be you can believe the math. And then that little part up top with a bunch of lambdas, the part up top basically is what reaches what's called a fixed point. And so, you can see in scheme it works. So, let's see if it works in our interpreter. I have no idea. We'll try it out. Yeah! All right. Awesome. Well done. Okay. So, let's look at the interpreter real quick and just a couple of words about it. So, the first thing I'll say is that everything except the last three lines is an abomination. So, we are going to remove the abominable code. Bam, bam, bam, bam, bam, bam, bam, that. Okay. This is the 3 by 5 card interpreter. I may have to reformat it slightly differently for the screen, but if you have a 3 by 4 meter card, I guess you could fit at this side. But, you can actually write down at least on a 4 by 6 card and that is the magic. Okay. This is the key to the universe. You have everything here. You have lexical scope. You have higher order functions. You have all these sorts of things. Numbers, you don't need them. You can do church encoding. Okay. You don't need if. You can encode if as well. You encode all those things. They're kind of nonsense. Yes, they're useful for efficiency and expressiveness. You don't need them. This is all you need. It's Turing complete. Came before the Turing machine. This is similar related to something called the lambda calculus. This is a little bit different because we're using an environment instead of beta reduction if you're familiar with that. But similar idea. People would call this the call by value lambda calculus interpreter. Environment passing. You can play all sorts of really interesting games with this. You can change the representation of the environments and the procedures. You can use data structures. You can do lists and pattern matching. You can do all sorts of really cool things. You can add additional arguments just like we added the environment. So now we have an environment passing interpreter. You can add a store as well, which contains basically the current value of a variable. And you can change those values. So if you have an environment and a store, that allows you to do mutation like set bang and scheme. You can also add continuations. You can CPS the interpreter. Do another correctness preserving program transformation. CPS it. That gives you a representation of the rest of the program at any point potentially as a procedure. And you can just call that continuation anywhere you want. And you can implement all sorts of control structures. If you CPS your program twice, you have two continuations. That gives you limited continuations. You can do basically every control structure at that point. All sorts of very interesting games you can play. You can change. Anyway, I'm not going to get into all that. But what I recommend you do is what Dan suggested to all his students. And as far as I know, I'm the only one who did it. Maybe other people did. He said take a four by six card stack of them and spend 45 minutes writing this down over and over again until your eyes start bleeding. Sear it into your brain and your heart. And you'll never forget it. And if you really understand it and you try, you know, turning the crank and doing a bunch of evaluations, at some point you'll start to get some idea of the magic. But all of computation, all of the turing complete processes, all of, you know, the notion of computable functions are within this code. The secrets there. You can do things that run forever. You can do all sorts of things. They're very interesting. You can express colats inside of it. Okay. So that is sort of like the teaser. And, you know, you can go off to races once you really have this on the brain. You can do things like change the type of scope you have. You can go from what we have here. It's just called lexical scope or static scoping to dynamic scoping by changing how the environment variable lookup works and things like that. I'm not going to go into all those things. If you're interested in that, there's a book called Essentials of Programming Languages by Dan Friedman and Mitchell Wan that talks about a lot of these things. And there are lots of other resources you can find. What I want to show you now is what happens when you play these games in sort of a different context. So this is a paper by John McCarthy called a micromanual for Lisp, not the whole truth. And in this, he gives the rules for an interpreter. Okay. So you were asking about cons. Well, here's your cons. This is what cons does. And he gives basically the rules for a Lisp evaluator. And, you know, basically, he's calling his evaluator value as our val expert. And you can see that he has these equal signs. You're saying that expression is equal to that value. Now, equal, the notion of equality is actually one of the most subtle notions in all of mathematics and logic and computer science. Anyone who thinks they understand equality is just kind of some throwaway idea hasn't thought about it hard enough. Like homotopy type theory. All these people trying to understand different notions of equality there. So it's a very deep topic. And one of the things that's interesting is that, you know, we tend to read that equal sign if we're doing programming, programming languages, interpreters, compiler, stuff like that, basically is one directional from left to right. So we have an expression. We evaluate it. We write some function that's an evaluator. We compile it, some code that's going to run it. And we're going from that expression to that value. It's not really an equal sign. It's like a right-hand side arrow if you want to think of it that way. But what if we took the equal sign seriously? What if we seriously said, all right, well, this is like an algebra, right? And what do you do in algebra? When you were in, you know, I'm not talking about like the modern algebra. I'm talking about like, you know, when you were in high school or whatever, you took algebra in high school. What sort of things did you do in algebra? Solve equations. You put in variables like x and y and z and things like that. And you're supposed to figure out what is the value of that variable, right? That makes both sides equal. We're going to do that. So I've done some of the heavy lifting for you with a bunch of other people. We spent like the last 12 years doing it. And I'm going to show you some of the stuff that we got from it. So what we did was we wrote, and I started this at Indiana with Dan Friedman, a bunch of other talented people. I'm working right now with a whole bunch of other people, including like Michael Ballantyne at Utah and Greg Rosenblatt and all these other fine folks. We wrote an interpreter in what's called a logic programming language, okay? Or a relational programming language, that's what I normally call it. And this one doesn't fit on a 3x5 card, but it's not that long, actually. It's what? 403 lines. But you can fit the 3x5 card version on here quite nicely. And actually it looks a lot like the algebra part. In fact, you can write down the semantics. So here are the three lines we wrote for our interpreter. This is how you would write it in like an operational semantics, sort of math-y. And then this is on the right hand side is how you would express it in this language called mini-canon. And you can see it's really not much longer. It's about the same length. Okay, so anyway, we took the time and wrote this interpreter. So we wrote something equivalent to a vowel X, but in fact, you can see it's called a vowel expo, right? We even used the same name. And so now let me see if I can figure out how to load this thing. That's the, it's always the hard part. Here's the transcript. Let's see that. All right, now let's go in here. And let's see. Load MK. You know, it's all fine and good until you have to do things like load a file, right? There's no math for that. Probably the monad or something junk for that. Anyway, let's do full and term. All right, cool. So in this logic programming system called mini-canon, we have the ability to write queries. And the queries let us, you can think of it from a sort of database standpoint, you can think of it as an algebra standpoint. It allows us to write down things where we want to solve for the values. So we have you vowel expert. And I'm going to evaluate some, you know, some thing and get the value of it back. Let me just make sure that worked. Oh, expo. Yeah, you think I'd learn. Incorrect number of arguments. It probably takes the empty. Oh, I bet it's called a valo. Yeah, I think, see if I've gotten a valo. Yeah, awesome. Okay. So I've hidden the environment in this version because I'm just starting out in the empty environment. That's why we're not seeing an environment. We could type it in if we wanted to. Okay. So what's happening here is we have an interpreter written in a somewhat different style than what we just wrote. We have an evaluator, you know, and we have an expression just like the expressions we're passing into a valo expert. And correspondingly, we have the value. So this is a little bit different than before in that we are actually able to specify what the output should be. Now, in this case, we are putting in a variable, which means we don't know. We don't know what the value should be. In fact, if you want to think of it from an algebra standpoint, you know, I'll call it x. Or maybe, you know, another way to call it would be, you know, a question mark or something, right? So this is an unknown and we're trying to figure out what the value of the unknown must be. And in this case, the value of the unknown is five. The expression five evaluates to five. Great. So let's try doing something a little more interesting. Let's try having a lambda expression, let's say, about lambda xx. Okay. Oh, that's a big thing. You can see that it begins with closure. So closure is one way to represent a procedure. So some representation of a procedure, I'm not going to get into the details of it. But I can apply that function. I can apply that procedure to five, for example. So the identity function applied to five. And it gives me back five. Okay. Great. Now, this so far is just treating it like an interpreter, just like what we had before. And we have all sorts of other things, like we have the ability to create lists. You know, I could, and we have this cons operator I told you about. I think we have cons. Let's see. Cons A onto the list B. Yep. All right. So I can build up list structures. I can do all sorts of things. But what I can also do is play games where maybe I don't know the input expression and I know an output. So maybe the output is I want milkshake. Right. And now what I want is an expression in scheme that when you evaluate it produces the list I want milkshake. Okay. So let's try it. Quote, I want milkshake is one such expression. How about two? Oh, here is a procedure call. A procedure that takes any number of arguments whose body is the expression, quote, I want milkshake applied to no arguments. And we can do all sorts of games like that. Here's another one. Like, I don't need to go like 10. See if there are any good ones. Oh, yeah. Here's a call to car, which gets the first element in the list. The car of a list containing the list, I want milkshakes. And I can do things like that. All right. That's fun. So I work in the lab of Matt might at Utah. And he has this blog post called 99 ways not to die to say I love you in racket. So this was like his Valentine's Day post, right? It's like a slow Valentine's Day. You write this blog post. And it's 99 expressions in racket or scheme or whatever that actually evaluate to the list. I love you. Okay. So let's do that. So let's go back and come up with a run 99 and say I love you. And we get all these programs. So here's one. It's called a list and it has a function call inside of it and stuff like that. And every one of these I can evaluate in scheme and it works just fine. All right. Yeah. Okay. So that's kind of fun. So let's try another one. Going back to John McCarthy's paper. He has this little note. So it's a difficult mathematical type exercise. Find a list E that means a program expression E such that the value of E is equal to E. What is that called? It's a quine. So we want to find a program that evaluates to itself. So how can we write such a query? Yeah. Well, let's let's out of respect to John McCarthy, call our variable E. We want E to evaluate to E. All right. Oh, that's a representation of a number five evaluates to five. That's true. Let's see who hash T evaluates to hash T. That's true. Hash F evaluates to hash F. Let's see if there's anything. Let's run for a second. Oh, what is this thing? All right. Forget those side conditions. Here's a more interesting looking expression and that evaluates to itself. Oh, okay. So we can do things like generate quines. What else can we do? Well, Michael Valentine at this point said, well, you know, what if you had a more interesting scheme expression that you're evaluating? So let's try something a little more interesting. So let's try doing something like writing a program that concatenates to lists. And, you know, don't worry about the syntax here. It's going to look, you know, if you don't know scheme, you may not read every single thing, but we're going to append, okay, and define a function called append that takes to lists L and S and is going to have an if. Make this a little smaller. If L is empty, then we return S. Otherwise, we're going to cons on the car of L to a recursive call to append with the rest of the list. That's called the Cutter and S. Okay. So let wreck, let's me define a recursive function. And now I'm going to have a call to append. I'm going to say append ABC to DE. And let's see if that works. And sure enough, it works. So it gives me ABCDE in a list because we can actually produce more than one answer. So let me show you what that would look like. What we could do is, well, actually let me show you something else first. So what if we put in the answer first? We know the answer should be ABCDE. Okay. So we put in the answer. And now I can put in that variable thing, the question mark, anywhere I want. So I can put in the question mark inside this argument. So I'm asking what list when it appended to DE gives me ABCDE. So what list should that be? ABC. And sure enough, I get that. Okay. I could ask for two things. Maybe X and Y. So I could say I want X and I want Y. There are all sorts of games I could show you with this, but I'm just going to show you a couple. So now I can have two lists that appended together give me ABCDE. And you can see the empty list applied to ABCDE is one such pair of lists. And I can actually ask for all such pairs. So I can do a run star. And now I get all the pairs back. And so if you've seen logic programming, if you've seen languages like prologue or minicanron, they let you do this sort of query. But notice we didn't write a logic program. We just took a scheme program in our interpreter. So we're taking the equal sign seriously. We're saying that equality really does mean equal. And there's no direction to that equal sign. We should be able to solve for any side. Okay. So let's try one more example. We could do something like have ABC and DE. And now we say the answer should be ABCDE. And minicanron responds with some gibberish that means that that's consistent. Okay. So the question is, where else could we put a logic variable representing something unknown? In the code. Yes. Yeah. All right. So I don't know. Let me find a target. How about this s? Let me put something there. I think this is the one with run star is a bad idea. Run one is good. And sure enough, it inferred the s that I removed and things like that. Now, at this point, we're actually doing program synthesis. So we have the ability to specify information in the form of things like the expected input and the corresponding expected output and use the semantics of our interpreter that we wrote as a relation and logic programming system to do inference, do a search basically and do constraint solving to try to infer the missing values. And those missing values could be the input arguments, the function, the output to the function, even code or some mixture thereof. We can put variables anywhere we want. Yeah. Let's try that. That's a good question. So let's go back to what we had. This is it. Yep. Let me put it where the append was. What do you think I'll get back? Oh, sorry. I have to change this back to the question mark. Hopefully append, right? Everybody start. What? Oh, did I call it runs? Oh, hilarity will ensue. That's the answer you expected, right? A procedure that ignores this argument and returns the list, AVCDE. Many canons like prove me wrong. I defy you to prove me wrong. So this is the fun for a thing you get into. So let's try to... So many canons like the genie, right? The genie is like, tell me your wish. I'm ready to go. So what we're going to do is we're going to create a list of calls to append. Sorry. I don't remember if we have lists or not. I think we have lists. So we'll have more than one test. That's right. So let's do two tests. So one will be empty list to empty list. And then in the output, we will have a list of expected outputs. So we'll have the empty list and then the list AVC. Oops. Let me try this. See if this works. Yeah, now it came up with a pen. So I was like, all right, I've got to work for it. Okay. Now what are we asked for two? So what happens? I don't know. I have no idea. Oh, okay. It's what that is. In case you can't read that. It's a direct application of a variadic function call with zero arguments, which returns the procedure of pen. It's like, okay, well, I'm no dummy. I'll keep doing that. So this version is quite slow. And if you want to synthesize code for real, it can take quite a while. But we've been working on a new tool. Let's see if I can zoom in. Ooh, it works today. Nice. All right. There's a tool called Barlemin that I've been developing with Greg Rosenblatt and Michael Bountine and other people. And this tool is basically just an interface. I learned a little bit of Swift code and I wrote this. You can see it's beautiful. And basically, this is just an interface on what you saw with some optimizations behind. It runs about 10 million times faster than the naive version. When you're doing program sensors, that's important because you're in an exponential space. So we are going to write a pen a slightly different way. So the code in the upper left is our definition of a pen. You can see we left some parts out. So we left the name of the function out. That's this comma a. That's a mini-canron logic variable. It's a meta variable. You can think of it as a whole in the program. We don't know what that expression is. We don't know what the arguments are to lambda or how many there are or anything like that. And we don't know what the body of the lambda is. So we're going to let our tool come up with that for us. And what we're going to do is just give some examples of a pen. So I'm going to append two lists, the empty list, to the empty list. So give me the empty list. And Barlowman's going to think about it and say, I've got a solution for you. You want a function called a pen. He's like, yes, very well. That function can take any number of arguments. Well, strictly, schemes of pen can. And it's going to return to the empty list. Right? Very exciting moment. All right. Well, that's okay, I guess. How about we have a list containing two lists, list A and list B, and we want to get back A, B. Okay. Well, add another test. Oh, lucky day. You want a function called a pen, which takes two arguments and doesn't matter what the names are. And if the second argument is empty, we'll return that. Why not? Because that's the first test. Otherwise, we'll return to list A, B. All right. Well, that's getting a little annoying. So let's introduce a new concept, that of the gensim, the generated symbol. We don't actually care what's in that list. We just want to make sure that that's not going to appear in the output program. As long as it doesn't appear in the output program, we're happy. So we're going to change that. Oh, now we do have to do a little more work. Two arguments, null test on the second argument. The second argument is null. Otherwise, we have to start doing some operations, cars and cons and things like that. But we haven't, there's no recursive call. It's not going to work. So let me try one more. List of length two. Yeah, you can see where this game goes. Let's think about that. It's thinking. It's like, all right. There's some putting in some work. Oh, what? Looks like a recursive call. That looks perilously close to being correct. It's a little hard to read. So I will give it, I will use the editor part to fill in some concrete names and see what we can get. Oh, that is a pen. That's nice. It's example-based program synthesis. Furthermore, I can do some other things that are interesting, like I could add a few more tests. So I could say append of list A to the empty list. Should be empty list. I could say append. Oh, oh, yeah. Yes. Yeah, garbage in, garbage out. Good call. Oh, okay. Anyone would like a job as a QA tester for Barleman. Okay. So I wrote some more tests. And of course, Barleman could already synthesize it. So it's not really necessary. But imagine for a second that maybe this program is too hard for Barleman to synthesize. So instead of having Barleman synthesize the program from the examples, we're going to do test-driven development, right? I mean, this is real test-driven development. So we wrote our tests first, and now we're going to write our code, right? So I'm going to call it a pen. If I call it, like, you know, king cat, many kinderans are like, no, wrong. Computer says no. Fail. All right. So let's call it a pen. And let's say we're going to take two arguments, L and S, like before. Great. And we probably want an if and a null check on L. And, you know, we can start kind of filling in the structure here. And Barleman can probably synthesize that, fine. But let's pretend we're working on something a little more complicated, and Barleman can't do it. So now I'm typing. And notice I've got some holes in my program. So I don't know what those are. And those are arbitrary expressions. This could be, you know, gigantic, right? I could have a scheme compiler as A or something. It is solving it faster because I've filled in more. The current version of Barleman, sometimes you fill in more and it's like really slow. Because it gets slower. So we're working on that. But anyway, so let me put in L. That's one of my arguments. So I'm going to think, hey, L is probably the right one. Oh, Barleman's like, no. Computer says, no. That particular test is incompatible with the partially specified program you've written. So what we can do is write our tests, try to use it for synthesis. But if it's too slow for synthesis, we can just use this as an editor. And it's constantly in the background taking up all your corridors and heating your apartment. And desperately trying to prove, and this is a proof because many cameras are theorem prover, that the partially specified code you've written is actually incompatible with when you test. It doesn't mean your test is wrong. Maybe your code is wrong. Maybe they're both wrong. Maybe the semantics for the interpreter underlying Barleman is wrong. But they're certainly inconsistent, right? And I think this sort of technology is, you know, getting ready at this point to be practical for at least some use cases. And I should also point out that there are many other people working on program synthesis, I think a renaissance in that area right now. But I do think that one thing that's interesting is sort of the way we're doing synthesis, which is by taking that interpreter that I showed you in the beginning, this beautiful piece of code, and looking at the original description of it in those equal signs, and taking the equal signs seriously. We're going back and revisiting this artifact that people had an understanding of, and we're trying to actually execute, you know, another way of looking at it, this relational semantics view. And people, you know, people know relational semantics. I mean, the way that the math was written down is as relations. But the whole point is we've designed this language mini-canron to let us encode these relations in a nice way, and then did a bunch of optimizations. So when you write an interpreter as a relation, you can do this fill-in-the-blank game, right? And there are all sorts of other examples I could show you with mini-canron, and some really neat things. If you're interested in that, you might check out the closure conge talk that I gave with Greg Rosenblatt at the conge, last year's conge. And we show off a whole bunch of examples of this sort of thing. And, you know, we're trying to actively improve it and explore other ways to do things. And we can take things like a proof checker and turn it into a theorem prover by making it a relation, all sorts of fun games. So if this appeals to you, let me know. You might check out the webpage mini-canron.org that has a description of a lot of the work we've been doing. And also, I run hangouts on Saturdays and Sundays, an intro hangout series, an advanced hangout series, to talk about some of these technologies. Just send me an email, drop my line, hang out, we'll get a milkshake. And we talk about these things. If this thing you're interested in, you want to actually do some research, work on it, hacking, whatever, you could probably improve the user interface of Parliament if nothing else, right? So anyway, this is why I think the interpreter, that interpreter written in Lisp, that's higher order, is so beautiful, such a beautiful object, that not only is it very, very dense and an interesting amalgam of very important ideas, but you can look at that object from many different standpoints, like I said, that infinite tower of interpreters, or any number of other ways, from program transformation standpoint, from a relational semantic standpoint, and so forth. And each time you look at that object, that like five line core program from a different standpoint, it yields some more secrets, right? In some sense, we know everything about the interpreter, but in some other real sense, like I would not have guessed that you could do this sort of thing just by taking that program and encoding it in a logic programming language, but you can, it turns out. I think that's really amazing. So that's why I think that's a really beautiful artifact and I hope everyone will take the time to really study it and get to know it and find their own ways of looking at it and new ways to consider how that thing works, okay? Thank you. Thank you very much. Round of applause. We have time for like two very short questions and then we have to get out of here. So we have one right in front here real fast. If you treat these tests as constraints to the program that is trying to guess, can you apply like meta constraints? Can you say like, I want this to be like a constant time algorithm or I want it to be, you know, an element of memory or something like that? That's a good question. So, you know, part of the issue is how do you specify what it is you want the program to do? And so one way is with these tests, you could also use something like types because we won't write type inferences in the same style. You can also write high level properties and logic. There are a whole bunch of ways you could do it. And you could also say something about the expected running time or desired running time and so forth. We're not at the point where we can do things like talk about the desired running time, although it is something I'd like to be able to do. And so no, you can't do that yet, but one of the areas we're very interested in is trying to do more expressiveness. Probably the most recent thing that we've been playing with that's interesting is just yesterday, I started, I basically wrote a version of this technology where you can take scheme programs, look at common patterns in scheme in terms of very simple and just looking at what the parent is for an expression like what, you know, if you see a define, it turns out there's usually a lambda inside of it. If you see a lambda, there's usually an if or a cond inside of it and looking for those sorts of simple patterns and specializing the relational interpreter based on that very, very simple knowledge. So instead of just having the semantics, the system also would know a little bit about sort of standard human style or things like that. And that alone looks like it speeds up since there's many orders of magnitude and we're trying to figure out can we apply that to sort of the optimizations we've already made. So I think the bottom line is like there's a whole bunch of things that we just haven't explored yet, but I think it's definitely possible. And there are other people in this program census community who particularly work on that problem of trying to synthesize programs that have, you know, different expected, you know, running times and things like that. This is a very cool problem. More questions. There's a lot to take in I know. Short. When you gave the example of coming up with the answer append, how does it, how do you seed the search space? Like how did it know to find append, how did it append to get into the search space? Well, I mean, it didn't find append first, right? It created a function that just returns a list. Well, because we have an interpreter, the interpreter has a notion of scoping, just like we implemented variable lookup. We implemented variable lookup in that interpreter, and the semantics of let rec, the binding structure of let rec means that within that call, you know, so the call to append was inside the definition of append. So therefore in the environment append is there because we define the function. And so one of the things it's going to try to do, the interpreters going to try to do is look up the variables that are currently bound in the environment and try all of those and see if that will help lead to a solution. Anyone else? No? All right. Thank you so much.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 25.52, "text": " So I'm Will and I was a middle school teacher and I ran a summer camp and I did all these", "tokens": [50364, 407, 286, 478, 3099, 293, 286, 390, 257, 2808, 1395, 5027, 293, 286, 5872, 257, 4266, 2255, 293, 286, 630, 439, 613, 51640], "temperature": 0.0, "avg_logprob": -0.27419227820176345, "compression_ratio": 1.1265822784810127, "no_speech_prob": 0.011778850108385086}, {"id": 1, "seek": 2552, "start": 25.52, "end": 30.68, "text": " things and then at some point I got a degree in computer science and I worked as a Java", "tokens": [50364, 721, 293, 550, 412, 512, 935, 286, 658, 257, 4314, 294, 3820, 3497, 293, 286, 2732, 382, 257, 10745, 50622], "temperature": 0.0, "avg_logprob": -0.2168750944591704, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.5406399965286255}, {"id": 2, "seek": 2552, "start": 30.68, "end": 32.92, "text": " developer and all this stuff, right?", "tokens": [50622, 10754, 293, 439, 341, 1507, 11, 558, 30, 50734], "temperature": 0.0, "avg_logprob": -0.2168750944591704, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.5406399965286255}, {"id": 3, "seek": 2552, "start": 32.92, "end": 37.879999999999995, "text": " And then I got fed up with the JavaScript and the Java and all that and I went to graduate", "tokens": [50734, 400, 550, 286, 658, 4636, 493, 365, 264, 15778, 293, 264, 10745, 293, 439, 300, 293, 286, 1437, 281, 8080, 50982], "temperature": 0.0, "avg_logprob": -0.2168750944591704, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.5406399965286255}, {"id": 4, "seek": 2552, "start": 37.879999999999995, "end": 43.120000000000005, "text": " school at Indiana University to work with Dan Friedman who you may have heard of.", "tokens": [50982, 1395, 412, 21858, 3535, 281, 589, 365, 3394, 17605, 1601, 567, 291, 815, 362, 2198, 295, 13, 51244], "temperature": 0.0, "avg_logprob": -0.2168750944591704, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.5406399965286255}, {"id": 5, "seek": 2552, "start": 43.120000000000005, "end": 49.739999999999995, "text": " He's someone who wrote a book called The Little Lisper and a revised version called The Little", "tokens": [51244, 634, 311, 1580, 567, 4114, 257, 1446, 1219, 440, 8022, 30812, 610, 293, 257, 35228, 3037, 1219, 440, 8022, 51575], "temperature": 0.0, "avg_logprob": -0.2168750944591704, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.5406399965286255}, {"id": 6, "seek": 2552, "start": 49.739999999999995, "end": 52.04, "text": " Schemer and The Season Schemer.", "tokens": [51575, 2065, 29660, 293, 440, 16465, 2065, 29660, 13, 51690], "temperature": 0.0, "avg_logprob": -0.2168750944591704, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.5406399965286255}, {"id": 7, "seek": 5204, "start": 52.04, "end": 62.08, "text": " I wrote a book with him called The Reason Schemer and I took Dan's class the first semester", "tokens": [50364, 286, 4114, 257, 1446, 365, 796, 1219, 440, 39693, 2065, 29660, 293, 286, 1890, 3394, 311, 1508, 264, 700, 11894, 50866], "temperature": 0.0, "avg_logprob": -0.1612595989279551, "compression_ratio": 1.4766839378238341, "no_speech_prob": 0.0012054340913891792}, {"id": 8, "seek": 5204, "start": 62.08, "end": 69.44, "text": " I was there and a couple of weeks in to the class, Dan showed me a program that changed", "tokens": [50866, 286, 390, 456, 293, 257, 1916, 295, 3259, 294, 281, 264, 1508, 11, 3394, 4712, 385, 257, 1461, 300, 3105, 51234], "temperature": 0.0, "avg_logprob": -0.1612595989279551, "compression_ratio": 1.4766839378238341, "no_speech_prob": 0.0012054340913891792}, {"id": 9, "seek": 5204, "start": 69.44, "end": 78.08, "text": " my life and basically I spent the last 12, 13 years trying to understand these five lines", "tokens": [51234, 452, 993, 293, 1936, 286, 4418, 264, 1036, 2272, 11, 3705, 924, 1382, 281, 1223, 613, 1732, 3876, 51666], "temperature": 0.0, "avg_logprob": -0.1612595989279551, "compression_ratio": 1.4766839378238341, "no_speech_prob": 0.0012054340913891792}, {"id": 10, "seek": 5204, "start": 78.08, "end": 80.14, "text": " of code, right?", "tokens": [51666, 295, 3089, 11, 558, 30, 51769], "temperature": 0.0, "avg_logprob": -0.1612595989279551, "compression_ratio": 1.4766839378238341, "no_speech_prob": 0.0012054340913891792}, {"id": 11, "seek": 8014, "start": 80.14, "end": 85.62, "text": " And I will spend the rest of my life trying to understand the implications of these five", "tokens": [50364, 400, 286, 486, 3496, 264, 1472, 295, 452, 993, 1382, 281, 1223, 264, 16602, 295, 613, 1732, 50638], "temperature": 0.0, "avg_logprob": -0.15265928250606928, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.0013243039138615131}, {"id": 12, "seek": 8014, "start": 85.62, "end": 89.26, "text": " lines of code and this is what I like, okay?", "tokens": [50638, 3876, 295, 3089, 293, 341, 307, 437, 286, 411, 11, 1392, 30, 50820], "temperature": 0.0, "avg_logprob": -0.15265928250606928, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.0013243039138615131}, {"id": 13, "seek": 8014, "start": 89.26, "end": 93.98, "text": " So some people like writing a hundred thousand line compiler or an operating system kernel", "tokens": [50820, 407, 512, 561, 411, 3579, 257, 3262, 4714, 1622, 31958, 420, 364, 7447, 1185, 28256, 51056], "temperature": 0.0, "avg_logprob": -0.15265928250606928, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.0013243039138615131}, {"id": 14, "seek": 8014, "start": 93.98, "end": 97.46000000000001, "text": " with two million lines of code or whatever and that's great.", "tokens": [51056, 365, 732, 2459, 3876, 295, 3089, 420, 2035, 293, 300, 311, 869, 13, 51230], "temperature": 0.0, "avg_logprob": -0.15265928250606928, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.0013243039138615131}, {"id": 15, "seek": 8014, "start": 97.46000000000001, "end": 100.74000000000001, "text": " What I like is sort of going the opposite way.", "tokens": [51230, 708, 286, 411, 307, 1333, 295, 516, 264, 6182, 636, 13, 51394], "temperature": 0.0, "avg_logprob": -0.15265928250606928, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.0013243039138615131}, {"id": 16, "seek": 8014, "start": 100.74000000000001, "end": 107.1, "text": " I like the 3 by 5 card or the 4 by 6 card and if you're not an American, I don't know", "tokens": [51394, 286, 411, 264, 805, 538, 1025, 2920, 420, 264, 1017, 538, 1386, 2920, 293, 498, 291, 434, 406, 364, 2665, 11, 286, 500, 380, 458, 51712], "temperature": 0.0, "avg_logprob": -0.15265928250606928, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.0013243039138615131}, {"id": 17, "seek": 10710, "start": 107.1, "end": 115.61999999999999, "text": " what that is, it's A4 or something, I don't know, it's like a 3 by 5 card, maybe a 4 by", "tokens": [50364, 437, 300, 307, 11, 309, 311, 316, 19, 420, 746, 11, 286, 500, 380, 458, 11, 309, 311, 411, 257, 805, 538, 1025, 2920, 11, 1310, 257, 1017, 538, 50790], "temperature": 0.0, "avg_logprob": -0.19701047150985054, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0019861438777297735}, {"id": 18, "seek": 10710, "start": 115.61999999999999, "end": 116.61999999999999, "text": " 6 card.", "tokens": [50790, 1386, 2920, 13, 50840], "temperature": 0.0, "avg_logprob": -0.19701047150985054, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0019861438777297735}, {"id": 19, "seek": 10710, "start": 116.61999999999999, "end": 123.46, "text": " If you can't fit down the idea on a 4 by 6 card, then think harder.", "tokens": [50840, 759, 291, 393, 380, 3318, 760, 264, 1558, 322, 257, 1017, 538, 1386, 2920, 11, 550, 519, 6081, 13, 51182], "temperature": 0.0, "avg_logprob": -0.19701047150985054, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0019861438777297735}, {"id": 20, "seek": 10710, "start": 123.46, "end": 126.06, "text": " That sort of Dan's philosophy, right?", "tokens": [51182, 663, 1333, 295, 3394, 311, 10675, 11, 558, 30, 51312], "temperature": 0.0, "avg_logprob": -0.19701047150985054, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0019861438777297735}, {"id": 21, "seek": 10710, "start": 126.06, "end": 130.38, "text": " And ideally you get it down to the 3 by 5 card and then you write a little book on it", "tokens": [51312, 400, 22915, 291, 483, 309, 760, 281, 264, 805, 538, 1025, 2920, 293, 550, 291, 2464, 257, 707, 1446, 322, 309, 51528], "temperature": 0.0, "avg_logprob": -0.19701047150985054, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0019861438777297735}, {"id": 22, "seek": 10710, "start": 130.38, "end": 137.06, "text": " and so that's kind of his way of thinking and I share a lot of that sensibility.", "tokens": [51528, 293, 370, 300, 311, 733, 295, 702, 636, 295, 1953, 293, 286, 2073, 257, 688, 295, 300, 2923, 2841, 13, 51862], "temperature": 0.0, "avg_logprob": -0.19701047150985054, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0019861438777297735}, {"id": 23, "seek": 13706, "start": 137.06, "end": 142.58, "text": " So what I would like to talk a little bit about today is this program that I saw and", "tokens": [50364, 407, 437, 286, 576, 411, 281, 751, 257, 707, 857, 466, 965, 307, 341, 1461, 300, 286, 1866, 293, 50640], "temperature": 0.0, "avg_logprob": -0.15514121452967325, "compression_ratio": 1.6757990867579908, "no_speech_prob": 0.0007088270504027605}, {"id": 24, "seek": 13706, "start": 142.58, "end": 145.3, "text": " it just floored me.", "tokens": [50640, 309, 445, 2591, 2769, 385, 13, 50776], "temperature": 0.0, "avg_logprob": -0.15514121452967325, "compression_ratio": 1.6757990867579908, "no_speech_prob": 0.0007088270504027605}, {"id": 25, "seek": 13706, "start": 145.3, "end": 150.26, "text": " And to this day I get nerd chills every time I think about it, right, I really get nerd", "tokens": [50776, 400, 281, 341, 786, 286, 483, 23229, 48676, 633, 565, 286, 519, 466, 309, 11, 558, 11, 286, 534, 483, 23229, 51024], "temperature": 0.0, "avg_logprob": -0.15514121452967325, "compression_ratio": 1.6757990867579908, "no_speech_prob": 0.0007088270504027605}, {"id": 26, "seek": 13706, "start": 150.26, "end": 158.9, "text": " chills and I think, you know, I was nervous about, I am nervous about giving this talk", "tokens": [51024, 48676, 293, 286, 519, 11, 291, 458, 11, 286, 390, 6296, 466, 11, 286, 669, 6296, 466, 2902, 341, 751, 51456], "temperature": 0.0, "avg_logprob": -0.15514121452967325, "compression_ratio": 1.6757990867579908, "no_speech_prob": 0.0007088270504027605}, {"id": 27, "seek": 13706, "start": 158.9, "end": 163.62, "text": " because one of the dangers I think is that when you've been programming for a while and", "tokens": [51456, 570, 472, 295, 264, 27701, 286, 519, 307, 300, 562, 291, 600, 668, 9410, 337, 257, 1339, 293, 51692], "temperature": 0.0, "avg_logprob": -0.15514121452967325, "compression_ratio": 1.6757990867579908, "no_speech_prob": 0.0007088270504027605}, {"id": 28, "seek": 16362, "start": 163.62, "end": 168.38, "text": " I know a lot of people in this audience like NoLisp or they've worked through SICP or they've", "tokens": [50364, 286, 458, 257, 688, 295, 561, 294, 341, 4034, 411, 883, 43, 7631, 420, 436, 600, 2732, 807, 318, 2532, 47, 420, 436, 600, 50602], "temperature": 0.0, "avg_logprob": -0.16013235416052476, "compression_ratio": 1.7529411764705882, "no_speech_prob": 0.0012428727932274342}, {"id": 29, "seek": 16362, "start": 168.38, "end": 171.18, "text": " written lots of interpreters and all these sorts of things, they know something about", "tokens": [50602, 3720, 3195, 295, 17489, 1559, 293, 439, 613, 7527, 295, 721, 11, 436, 458, 746, 466, 50742], "temperature": 0.0, "avg_logprob": -0.16013235416052476, "compression_ratio": 1.7529411764705882, "no_speech_prob": 0.0012428727932274342}, {"id": 30, "seek": 16362, "start": 171.18, "end": 178.5, "text": " Lambda Calculus, after a while you can feel like you understand something and that's the", "tokens": [50742, 45691, 3511, 36002, 11, 934, 257, 1339, 291, 393, 841, 411, 291, 1223, 746, 293, 300, 311, 264, 51108], "temperature": 0.0, "avg_logprob": -0.16013235416052476, "compression_ratio": 1.7529411764705882, "no_speech_prob": 0.0012428727932274342}, {"id": 31, "seek": 16362, "start": 178.5, "end": 183.98000000000002, "text": " most dangerous way of thinking is to think you understand something, right, and that", "tokens": [51108, 881, 5795, 636, 295, 1953, 307, 281, 519, 291, 1223, 746, 11, 558, 11, 293, 300, 51382], "temperature": 0.0, "avg_logprob": -0.16013235416052476, "compression_ratio": 1.7529411764705882, "no_speech_prob": 0.0012428727932274342}, {"id": 32, "seek": 16362, "start": 183.98000000000002, "end": 191.42000000000002, "text": " there are no, you know, kind of new tricks in this and basically every time I learn something", "tokens": [51382, 456, 366, 572, 11, 291, 458, 11, 733, 295, 777, 11733, 294, 341, 293, 1936, 633, 565, 286, 1466, 746, 51754], "temperature": 0.0, "avg_logprob": -0.16013235416052476, "compression_ratio": 1.7529411764705882, "no_speech_prob": 0.0012428727932274342}, {"id": 33, "seek": 19142, "start": 191.42, "end": 195.98, "text": " new about computer science or, you know, every couple of years or something like that, I", "tokens": [50364, 777, 466, 3820, 3497, 420, 11, 291, 458, 11, 633, 1916, 295, 924, 420, 746, 411, 300, 11, 286, 50592], "temperature": 0.0, "avg_logprob": -0.15205333469150303, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.0516737625002861}, {"id": 34, "seek": 19142, "start": 195.98, "end": 202.14, "text": " like to go back and try to think about those things which I learned a long time ago and", "tokens": [50592, 411, 281, 352, 646, 293, 853, 281, 519, 466, 729, 721, 597, 286, 3264, 257, 938, 565, 2057, 293, 50900], "temperature": 0.0, "avg_logprob": -0.15205333469150303, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.0516737625002861}, {"id": 35, "seek": 19142, "start": 202.14, "end": 205.33999999999997, "text": " I'd stop thinking about, you know, because I thought at least, you know, I've got some", "tokens": [50900, 286, 1116, 1590, 1953, 466, 11, 291, 458, 11, 570, 286, 1194, 412, 1935, 11, 291, 458, 11, 286, 600, 658, 512, 51060], "temperature": 0.0, "avg_logprob": -0.15205333469150303, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.0516737625002861}, {"id": 36, "seek": 19142, "start": 205.33999999999997, "end": 211.73999999999998, "text": " grasp of this and almost always I'll have a new angle, right, and for the really, truly", "tokens": [51060, 21743, 295, 341, 293, 1920, 1009, 286, 603, 362, 257, 777, 5802, 11, 558, 11, 293, 337, 264, 534, 11, 4908, 51380], "temperature": 0.0, "avg_logprob": -0.15205333469150303, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.0516737625002861}, {"id": 37, "seek": 19142, "start": 211.73999999999998, "end": 218.77999999999997, "text": " deep ideas, computer science or anywhere in the other field, you know, there are many", "tokens": [51380, 2452, 3487, 11, 3820, 3497, 420, 4992, 294, 264, 661, 2519, 11, 291, 458, 11, 456, 366, 867, 51732], "temperature": 0.0, "avg_logprob": -0.15205333469150303, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.0516737625002861}, {"id": 38, "seek": 21878, "start": 218.82, "end": 225.02, "text": " ways of looking at these deep ideas and I'm going to show you, you know, a couple ways", "tokens": [50366, 2098, 295, 1237, 412, 613, 2452, 3487, 293, 286, 478, 516, 281, 855, 291, 11, 291, 458, 11, 257, 1916, 2098, 50676], "temperature": 0.0, "avg_logprob": -0.14818048055193064, "compression_ratio": 1.9615384615384615, "no_speech_prob": 0.003912932705134153}, {"id": 39, "seek": 21878, "start": 225.02, "end": 231.46, "text": " of looking at this program but I'm not kidding when I can say that I'm going to spend the", "tokens": [50676, 295, 1237, 412, 341, 1461, 457, 286, 478, 406, 9287, 562, 286, 393, 584, 300, 286, 478, 516, 281, 3496, 264, 50998], "temperature": 0.0, "avg_logprob": -0.14818048055193064, "compression_ratio": 1.9615384615384615, "no_speech_prob": 0.003912932705134153}, {"id": 40, "seek": 21878, "start": 231.46, "end": 235.5, "text": " rest of my life trying to understand it and there are many other people who've tried to", "tokens": [50998, 1472, 295, 452, 993, 1382, 281, 1223, 309, 293, 456, 366, 867, 661, 561, 567, 600, 3031, 281, 51200], "temperature": 0.0, "avg_logprob": -0.14818048055193064, "compression_ratio": 1.9615384615384615, "no_speech_prob": 0.003912932705134153}, {"id": 41, "seek": 21878, "start": 235.5, "end": 242.02, "text": " spend, you know, their careers basically understanding aspects of this five line program and, you", "tokens": [51200, 3496, 11, 291, 458, 11, 641, 16409, 1936, 3701, 7270, 295, 341, 1732, 1622, 1461, 293, 11, 291, 51526], "temperature": 0.0, "avg_logprob": -0.14818048055193064, "compression_ratio": 1.9615384615384615, "no_speech_prob": 0.003912932705134153}, {"id": 42, "seek": 21878, "start": 242.02, "end": 248.06, "text": " know, to give you sort of a reminder of, you know, a five line program, the amount of complexity", "tokens": [51526, 458, 11, 281, 976, 291, 1333, 295, 257, 13548, 295, 11, 291, 458, 11, 257, 1732, 1622, 1461, 11, 264, 2372, 295, 14024, 51828], "temperature": 0.0, "avg_logprob": -0.14818048055193064, "compression_ratio": 1.9615384615384615, "no_speech_prob": 0.003912932705134153}, {"id": 43, "seek": 24806, "start": 248.18, "end": 253.58, "text": " you can fit in there. Does anyone know about the Colatz function? What's the Colatz function?", "tokens": [50370, 291, 393, 3318, 294, 456, 13, 4402, 2878, 458, 466, 264, 4004, 10300, 2445, 30, 708, 311, 264, 4004, 10300, 2445, 30, 50640], "temperature": 0.0, "avg_logprob": -0.24583027460803725, "compression_ratio": 1.6547619047619047, "no_speech_prob": 0.0003796519886236638}, {"id": 44, "seek": 24806, "start": 259.42, "end": 265.9, "text": " Yeah, it's this little function, you know, like three in plus one and, you know, you have", "tokens": [50932, 865, 11, 309, 311, 341, 707, 2445, 11, 291, 458, 11, 411, 1045, 294, 1804, 472, 293, 11, 291, 458, 11, 291, 362, 51256], "temperature": 0.0, "avg_logprob": -0.24583027460803725, "compression_ratio": 1.6547619047619047, "no_speech_prob": 0.0003796519886236638}, {"id": 45, "seek": 24806, "start": 265.9, "end": 271.26, "text": " like a division by two or something like that and, you know, basically you're trying to figure", "tokens": [51256, 411, 257, 10044, 538, 732, 420, 746, 411, 300, 293, 11, 291, 458, 11, 1936, 291, 434, 1382, 281, 2573, 51524], "temperature": 0.0, "avg_logprob": -0.24583027460803725, "compression_ratio": 1.6547619047619047, "no_speech_prob": 0.0003796519886236638}, {"id": 46, "seek": 27126, "start": 271.26, "end": 278.06, "text": " out if you give an integer, a positive integer as an input, will this operation terminate?", "tokens": [50364, 484, 498, 291, 976, 364, 24922, 11, 257, 3353, 24922, 382, 364, 4846, 11, 486, 341, 6916, 10761, 473, 30, 50704], "temperature": 0.0, "avg_logprob": -0.20179637562144886, "compression_ratio": 1.7709923664122138, "no_speech_prob": 0.03240131214261055}, {"id": 47, "seek": 27126, "start": 278.06, "end": 281.26, "text": " It's just got some multiplications, additions and divisions, right, and it's like the tiny", "tokens": [50704, 467, 311, 445, 658, 512, 17596, 763, 11, 35113, 293, 24328, 11, 558, 11, 293, 309, 311, 411, 264, 5870, 50864], "temperature": 0.0, "avg_logprob": -0.20179637562144886, "compression_ratio": 1.7709923664122138, "no_speech_prob": 0.03240131214261055}, {"id": 48, "seek": 27126, "start": 281.26, "end": 287.34, "text": " little program and, you know, it's like a three line or two line program and the best mathematicians", "tokens": [50864, 707, 1461, 293, 11, 291, 458, 11, 309, 311, 411, 257, 1045, 1622, 420, 732, 1622, 1461, 293, 264, 1151, 32811, 2567, 51168], "temperature": 0.0, "avg_logprob": -0.20179637562144886, "compression_ratio": 1.7709923664122138, "no_speech_prob": 0.03240131214261055}, {"id": 49, "seek": 27126, "start": 287.34, "end": 293.26, "text": " in the world have been trying to prove for many decades utterly without success that this", "tokens": [51168, 294, 264, 1002, 362, 668, 1382, 281, 7081, 337, 867, 7878, 30251, 1553, 2245, 300, 341, 51464], "temperature": 0.0, "avg_logprob": -0.20179637562144886, "compression_ratio": 1.7709923664122138, "no_speech_prob": 0.03240131214261055}, {"id": 50, "seek": 27126, "start": 293.26, "end": 297.53999999999996, "text": " program always terminates if you give a positive integer and Paul Erdisch, one of the great", "tokens": [51464, 1461, 1009, 10761, 1024, 498, 291, 976, 257, 3353, 24922, 293, 4552, 3300, 67, 5494, 11, 472, 295, 264, 869, 51678], "temperature": 0.0, "avg_logprob": -0.20179637562144886, "compression_ratio": 1.7709923664122138, "no_speech_prob": 0.03240131214261055}, {"id": 51, "seek": 29754, "start": 297.54, "end": 303.94, "text": " mathematicians of all time, at one point said, mathematics is not ready for the Colatz", "tokens": [50364, 32811, 2567, 295, 439, 565, 11, 412, 472, 935, 848, 11, 18666, 307, 406, 1919, 337, 264, 4004, 10300, 50684], "temperature": 0.0, "avg_logprob": -0.18879569095114004, "compression_ratio": 1.6561085972850678, "no_speech_prob": 0.0033693877048790455}, {"id": 52, "seek": 29754, "start": 303.94, "end": 311.14000000000004, "text": " problem, right? So that's a three line program who's stumped some of the greatest minds in", "tokens": [50684, 1154, 11, 558, 30, 407, 300, 311, 257, 1045, 1622, 1461, 567, 311, 43164, 292, 512, 295, 264, 6636, 9634, 294, 51044], "temperature": 0.0, "avg_logprob": -0.18879569095114004, "compression_ratio": 1.6561085972850678, "no_speech_prob": 0.0033693877048790455}, {"id": 53, "seek": 29754, "start": 311.14000000000004, "end": 317.42, "text": " history. So I'm talking about like a five line program, okay? So that should give you pause.", "tokens": [51044, 2503, 13, 407, 286, 478, 1417, 466, 411, 257, 1732, 1622, 1461, 11, 1392, 30, 407, 300, 820, 976, 291, 10465, 13, 51358], "temperature": 0.0, "avg_logprob": -0.18879569095114004, "compression_ratio": 1.6561085972850678, "no_speech_prob": 0.0033693877048790455}, {"id": 54, "seek": 29754, "start": 318.26, "end": 324.46000000000004, "text": " That should give you pause and we all have to have a healthy amount of respect for the three by", "tokens": [51400, 663, 820, 976, 291, 10465, 293, 321, 439, 362, 281, 362, 257, 4627, 2372, 295, 3104, 337, 264, 1045, 538, 51710], "temperature": 0.0, "avg_logprob": -0.18879569095114004, "compression_ratio": 1.6561085972850678, "no_speech_prob": 0.0033693877048790455}, {"id": 55, "seek": 32446, "start": 324.46, "end": 333.9, "text": " five card program. So anyway, the program I'm going to talk about is an interpreter for Lisp", "tokens": [50364, 1732, 2920, 1461, 13, 407, 4033, 11, 264, 1461, 286, 478, 516, 281, 751, 466, 307, 364, 34132, 337, 441, 7631, 50836], "temperature": 0.0, "avg_logprob": -0.1756277180681325, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0012632979778572917}, {"id": 56, "seek": 32446, "start": 333.9, "end": 342.14, "text": " written in Lisp. And it's one of these things where if you don't know Lisp and you first see it", "tokens": [50836, 3720, 294, 441, 7631, 13, 400, 309, 311, 472, 295, 613, 721, 689, 498, 291, 500, 380, 458, 441, 7631, 293, 291, 700, 536, 309, 51248], "temperature": 0.0, "avg_logprob": -0.1756277180681325, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0012632979778572917}, {"id": 57, "seek": 32446, "start": 342.14, "end": 346.06, "text": " and you're like, oh, what are these parentheses? And then after a while you kind of start thinking,", "tokens": [51248, 293, 291, 434, 411, 11, 1954, 11, 437, 366, 613, 34153, 30, 400, 550, 934, 257, 1339, 291, 733, 295, 722, 1953, 11, 51444], "temperature": 0.0, "avg_logprob": -0.1756277180681325, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0012632979778572917}, {"id": 58, "seek": 32446, "start": 346.06, "end": 351.26, "text": " what is this lambda thing? That's something to wrap your head around. And why are there two", "tokens": [51444, 437, 307, 341, 13607, 551, 30, 663, 311, 746, 281, 7019, 428, 1378, 926, 13, 400, 983, 366, 456, 732, 51704], "temperature": 0.0, "avg_logprob": -0.1756277180681325, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0012632979778572917}, {"id": 59, "seek": 35126, "start": 351.26, "end": 356.7, "text": " lambdas like nested? What does that mean? And you kind of go over these different ideas at", "tokens": [50364, 10097, 27476, 411, 15646, 292, 30, 708, 775, 300, 914, 30, 400, 291, 733, 295, 352, 670, 613, 819, 3487, 412, 50636], "temperature": 0.0, "avg_logprob": -0.1252977012569069, "compression_ratio": 1.794007490636704, "no_speech_prob": 0.0016471794806420803}, {"id": 60, "seek": 35126, "start": 356.7, "end": 360.38, "text": " the time and eventually you kind of get some sense. You trace through a bunch of programs and", "tokens": [50636, 264, 565, 293, 4728, 291, 733, 295, 483, 512, 2020, 13, 509, 13508, 807, 257, 3840, 295, 4268, 293, 50820], "temperature": 0.0, "avg_logprob": -0.1252977012569069, "compression_ratio": 1.794007490636704, "no_speech_prob": 0.0016471794806420803}, {"id": 61, "seek": 35126, "start": 360.38, "end": 364.3, "text": " you're like, all right, I kind of get some sense of what's going on. And then you start modifying", "tokens": [50820, 291, 434, 411, 11, 439, 558, 11, 286, 733, 295, 483, 512, 2020, 295, 437, 311, 516, 322, 13, 400, 550, 291, 722, 42626, 51016], "temperature": 0.0, "avg_logprob": -0.1252977012569069, "compression_ratio": 1.794007490636704, "no_speech_prob": 0.0016471794806420803}, {"id": 62, "seek": 35126, "start": 364.3, "end": 371.09999999999997, "text": " the interpreter. And one of the great things about this program is that there's so many ways to change", "tokens": [51016, 264, 34132, 13, 400, 472, 295, 264, 869, 721, 466, 341, 1461, 307, 300, 456, 311, 370, 867, 2098, 281, 1319, 51356], "temperature": 0.0, "avg_logprob": -0.1252977012569069, "compression_ratio": 1.794007490636704, "no_speech_prob": 0.0016471794806420803}, {"id": 63, "seek": 35126, "start": 371.09999999999997, "end": 376.94, "text": " it and explore it and play with it. You can add arguments to the interpreter. You can rewrite", "tokens": [51356, 309, 293, 6839, 309, 293, 862, 365, 309, 13, 509, 393, 909, 12869, 281, 264, 34132, 13, 509, 393, 28132, 51648], "temperature": 0.0, "avg_logprob": -0.1252977012569069, "compression_ratio": 1.794007490636704, "no_speech_prob": 0.0016471794806420803}, {"id": 64, "seek": 37694, "start": 376.94, "end": 384.38, "text": " the interpreter in a variety of correctness preserving transformation styles. One program", "tokens": [50364, 264, 34132, 294, 257, 5673, 295, 3006, 1287, 33173, 9887, 13273, 13, 1485, 1461, 50736], "temperature": 0.0, "avg_logprob": -0.1427889527945683, "compression_ratio": 1.730593607305936, "no_speech_prob": 0.004193312022835016}, {"id": 65, "seek": 37694, "start": 384.38, "end": 389.26, "text": " transformation you can apply is something called continuation passing style, which I consider", "tokens": [50736, 9887, 291, 393, 3079, 307, 746, 1219, 29357, 8437, 3758, 11, 597, 286, 1949, 50980], "temperature": 0.0, "avg_logprob": -0.1427889527945683, "compression_ratio": 1.730593607305936, "no_speech_prob": 0.004193312022835016}, {"id": 66, "seek": 37694, "start": 389.26, "end": 395.02, "text": " the gateway drug of program transformations. You know, normally you CPS that sucker and then from", "tokens": [50980, 264, 28532, 4110, 295, 1461, 34852, 13, 509, 458, 11, 5646, 291, 383, 6273, 300, 43259, 293, 550, 490, 51268], "temperature": 0.0, "avg_logprob": -0.1427889527945683, "compression_ratio": 1.730593607305936, "no_speech_prob": 0.004193312022835016}, {"id": 67, "seek": 37694, "start": 395.02, "end": 402.54, "text": " then on, you know, it's off to the races. So, you know, you CPS an interpreter, you CPS it twice,", "tokens": [51268, 550, 322, 11, 291, 458, 11, 309, 311, 766, 281, 264, 15484, 13, 407, 11, 291, 458, 11, 291, 383, 6273, 364, 34132, 11, 291, 383, 6273, 309, 6091, 11, 51644], "temperature": 0.0, "avg_logprob": -0.1427889527945683, "compression_ratio": 1.730593607305936, "no_speech_prob": 0.004193312022835016}, {"id": 68, "seek": 40254, "start": 402.62, "end": 410.86, "text": " that gives you delimited continuations. And now you're cooking with gas. You can add a store", "tokens": [50368, 300, 2709, 291, 1103, 332, 1226, 2993, 763, 13, 400, 586, 291, 434, 6361, 365, 4211, 13, 509, 393, 909, 257, 3531, 50780], "temperature": 0.0, "avg_logprob": -0.12029142582670171, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.0007095097680576146}, {"id": 69, "seek": 40254, "start": 410.86, "end": 418.94, "text": " argument to the interpreter, right? You can add boxes and you could start doing, you know,", "tokens": [50780, 6770, 281, 264, 34132, 11, 558, 30, 509, 393, 909, 9002, 293, 291, 727, 722, 884, 11, 291, 458, 11, 51184], "temperature": 0.0, "avg_logprob": -0.12029142582670171, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.0007095097680576146}, {"id": 70, "seek": 40254, "start": 418.94, "end": 424.62, "text": " mutation and side effects in different ways. You can do call by value versus call by need versus", "tokens": [51184, 27960, 293, 1252, 5065, 294, 819, 2098, 13, 509, 393, 360, 818, 538, 2158, 5717, 818, 538, 643, 5717, 51468], "temperature": 0.0, "avg_logprob": -0.12029142582670171, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.0007095097680576146}, {"id": 71, "seek": 40254, "start": 424.62, "end": 431.98, "text": " call by name trivially, right? You can do all sorts of things that are really deep and give you", "tokens": [51468, 818, 538, 1315, 1376, 85, 2270, 11, 558, 30, 509, 393, 360, 439, 7527, 295, 721, 300, 366, 534, 2452, 293, 976, 291, 51836], "temperature": 0.0, "avg_logprob": -0.12029142582670171, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.0007095097680576146}, {"id": 72, "seek": 43198, "start": 431.98, "end": 436.62, "text": " deep insights into concepts of programming languages that you'll use, you know, the rest of your", "tokens": [50364, 2452, 14310, 666, 10392, 295, 9410, 8650, 300, 291, 603, 764, 11, 291, 458, 11, 264, 1472, 295, 428, 50596], "temperature": 0.0, "avg_logprob": -0.09662104712592232, "compression_ratio": 1.6652360515021458, "no_speech_prob": 0.00041538398363627493}, {"id": 73, "seek": 43198, "start": 436.62, "end": 444.22, "text": " career or the rest of your hobby years or whatever. And so I don't know of any other artifact in all", "tokens": [50596, 3988, 420, 264, 1472, 295, 428, 18240, 924, 420, 2035, 13, 400, 370, 286, 500, 380, 458, 295, 604, 661, 34806, 294, 439, 50976], "temperature": 0.0, "avg_logprob": -0.09662104712592232, "compression_ratio": 1.6652360515021458, "no_speech_prob": 0.00041538398363627493}, {"id": 74, "seek": 43198, "start": 444.22, "end": 449.82, "text": " of computer science that packs so many ideas and the potential extensions to explore so many", "tokens": [50976, 295, 3820, 3497, 300, 19403, 370, 867, 3487, 293, 264, 3995, 25129, 281, 6839, 370, 867, 51256], "temperature": 0.0, "avg_logprob": -0.09662104712592232, "compression_ratio": 1.6652360515021458, "no_speech_prob": 0.00041538398363627493}, {"id": 75, "seek": 43198, "start": 449.82, "end": 460.3, "text": " different areas as this interpreter. And in fact, you know, Alan Kaye says that when he first saw", "tokens": [51256, 819, 3179, 382, 341, 34132, 13, 400, 294, 1186, 11, 291, 458, 11, 16442, 14179, 68, 1619, 300, 562, 415, 700, 1866, 51780], "temperature": 0.0, "avg_logprob": -0.09662104712592232, "compression_ratio": 1.6652360515021458, "no_speech_prob": 0.00041538398363627493}, {"id": 76, "seek": 46030, "start": 460.3, "end": 467.02000000000004, "text": " the Lisp interpreter written in Lisp at the bottom of page 13 of the Lisp 1.5 manual, right?", "tokens": [50364, 264, 441, 7631, 34132, 3720, 294, 441, 7631, 412, 264, 2767, 295, 3028, 3705, 295, 264, 441, 7631, 502, 13, 20, 9688, 11, 558, 30, 50700], "temperature": 0.0, "avg_logprob": -0.13965919690254408, "compression_ratio": 1.7232472324723247, "no_speech_prob": 0.005552809685468674}, {"id": 77, "seek": 46030, "start": 467.66, "end": 472.94, "text": " It changed his life and he realized these are Maxwell's equations of software, right?", "tokens": [50732, 467, 3105, 702, 993, 293, 415, 5334, 613, 366, 39594, 311, 11787, 295, 4722, 11, 558, 30, 50996], "temperature": 0.0, "avg_logprob": -0.13965919690254408, "compression_ratio": 1.7232472324723247, "no_speech_prob": 0.005552809685468674}, {"id": 78, "seek": 46030, "start": 472.94, "end": 477.66, "text": " It's very much the same right down four little equations. It helps if you like take them from", "tokens": [50996, 467, 311, 588, 709, 264, 912, 558, 760, 1451, 707, 11787, 13, 467, 3665, 498, 291, 411, 747, 552, 490, 51232], "temperature": 0.0, "avg_logprob": -0.13965919690254408, "compression_ratio": 1.7232472324723247, "no_speech_prob": 0.005552809685468674}, {"id": 79, "seek": 46030, "start": 477.66, "end": 482.94, "text": " the other mathematicians and physicists and call them mathmen. But you said, you know, you write", "tokens": [51232, 264, 661, 32811, 2567, 293, 48716, 293, 818, 552, 5221, 2558, 13, 583, 291, 848, 11, 291, 458, 11, 291, 2464, 51496], "temperature": 0.0, "avg_logprob": -0.13965919690254408, "compression_ratio": 1.7232472324723247, "no_speech_prob": 0.005552809685468674}, {"id": 80, "seek": 46030, "start": 482.94, "end": 487.66, "text": " down the four equations and you put that on the three by five card, right? And then you spend the", "tokens": [51496, 760, 264, 1451, 11787, 293, 291, 829, 300, 322, 264, 1045, 538, 1732, 2920, 11, 558, 30, 400, 550, 291, 3496, 264, 51732], "temperature": 0.0, "avg_logprob": -0.13965919690254408, "compression_ratio": 1.7232472324723247, "no_speech_prob": 0.005552809685468674}, {"id": 81, "seek": 48766, "start": 487.66, "end": 492.62, "text": " rest of your life trying to understand what those four equations are, what the implications are.", "tokens": [50364, 1472, 295, 428, 993, 1382, 281, 1223, 437, 729, 1451, 11787, 366, 11, 437, 264, 16602, 366, 13, 50612], "temperature": 0.0, "avg_logprob": -0.09711640488867666, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.00035679389839060605}, {"id": 82, "seek": 48766, "start": 492.62, "end": 499.34000000000003, "text": " So that's very much what this interpreter is. And I'm, you know, I can't do justice to it.", "tokens": [50612, 407, 300, 311, 588, 709, 437, 341, 34132, 307, 13, 400, 286, 478, 11, 291, 458, 11, 286, 393, 380, 360, 6118, 281, 309, 13, 50948], "temperature": 0.0, "avg_logprob": -0.09711640488867666, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.00035679389839060605}, {"id": 83, "seek": 48766, "start": 499.34000000000003, "end": 506.06, "text": " I can only show you a couple of the many aspects of this multi-aspected, you know, beautiful system", "tokens": [50948, 286, 393, 787, 855, 291, 257, 1916, 295, 264, 867, 7270, 295, 341, 4825, 12, 296, 1043, 292, 11, 291, 458, 11, 2238, 1185, 51284], "temperature": 0.0, "avg_logprob": -0.09711640488867666, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.00035679389839060605}, {"id": 84, "seek": 48766, "start": 506.06, "end": 511.74, "text": " and many of which, you know, I feel like I'm a complete noob too. But I can tell you that", "tokens": [51284, 293, 867, 295, 597, 11, 291, 458, 11, 286, 841, 411, 286, 478, 257, 3566, 572, 996, 886, 13, 583, 286, 393, 980, 291, 300, 51568], "temperature": 0.0, "avg_logprob": -0.09711640488867666, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.00035679389839060605}, {"id": 85, "seek": 51174, "start": 511.82, "end": 517.5, "text": " there are very interesting things out there. So, for example, there's this idea of reflective", "tokens": [50368, 456, 366, 588, 1880, 721, 484, 456, 13, 407, 11, 337, 1365, 11, 456, 311, 341, 1558, 295, 28931, 50652], "temperature": 0.0, "avg_logprob": -0.1320753935929183, "compression_ratio": 1.9649122807017543, "no_speech_prob": 0.005465727765113115}, {"id": 86, "seek": 51174, "start": 517.5, "end": 521.66, "text": " towers of interpreters. We have an interpreter interpreting an interpreter interpreting an", "tokens": [50652, 25045, 295, 17489, 1559, 13, 492, 362, 364, 34132, 37395, 364, 34132, 37395, 364, 50860], "temperature": 0.0, "avg_logprob": -0.1320753935929183, "compression_ratio": 1.9649122807017543, "no_speech_prob": 0.005465727765113115}, {"id": 87, "seek": 51174, "start": 521.66, "end": 527.82, "text": " interpreter. That part's already interesting. But when you have infinitely deep tower or", "tokens": [50860, 34132, 13, 663, 644, 311, 1217, 1880, 13, 583, 562, 291, 362, 36227, 2452, 10567, 420, 51168], "temperature": 0.0, "avg_logprob": -0.1320753935929183, "compression_ratio": 1.9649122807017543, "no_speech_prob": 0.005465727765113115}, {"id": 88, "seek": 51174, "start": 527.82, "end": 532.22, "text": " infinitely tall tower, that's when it starts getting fun. And in particular, it becomes", "tokens": [51168, 36227, 6764, 10567, 11, 300, 311, 562, 309, 3719, 1242, 1019, 13, 400, 294, 1729, 11, 309, 3643, 51388], "temperature": 0.0, "avg_logprob": -0.1320753935929183, "compression_ratio": 1.9649122807017543, "no_speech_prob": 0.005465727765113115}, {"id": 89, "seek": 51174, "start": 532.22, "end": 537.34, "text": " especially fun when the interpreter being interpreted by another interpreter can reach", "tokens": [51388, 2318, 1019, 562, 264, 34132, 885, 26749, 538, 1071, 34132, 393, 2524, 51644], "temperature": 0.0, "avg_logprob": -0.1320753935929183, "compression_ratio": 1.9649122807017543, "no_speech_prob": 0.005465727765113115}, {"id": 90, "seek": 53734, "start": 537.34, "end": 544.86, "text": " back up into the interpreter interpreting it and change the semantics of itself by changing how", "tokens": [50364, 646, 493, 666, 264, 34132, 37395, 309, 293, 1319, 264, 4361, 45298, 295, 2564, 538, 4473, 577, 50740], "temperature": 0.0, "avg_logprob": -0.08338763588353207, "compression_ratio": 1.6899563318777293, "no_speech_prob": 0.0009392132051289082}, {"id": 91, "seek": 53734, "start": 544.86, "end": 551.1, "text": " the interpreter interpreting it works. And this is one of the things that Dan Freedman says he", "tokens": [50740, 264, 34132, 37395, 309, 1985, 13, 400, 341, 307, 472, 295, 264, 721, 300, 3394, 6142, 292, 1601, 1619, 415, 51052], "temperature": 0.0, "avg_logprob": -0.08338763588353207, "compression_ratio": 1.6899563318777293, "no_speech_prob": 0.0009392132051289082}, {"id": 92, "seek": 53734, "start": 551.1, "end": 557.34, "text": " refuses to work on because it melted his brain too much. It's like basically the one thing that he's", "tokens": [51052, 33222, 281, 589, 322, 570, 309, 19057, 702, 3567, 886, 709, 13, 467, 311, 411, 1936, 264, 472, 551, 300, 415, 311, 51364], "temperature": 0.0, "avg_logprob": -0.08338763588353207, "compression_ratio": 1.6899563318777293, "no_speech_prob": 0.0009392132051289082}, {"id": 93, "seek": 53734, "start": 557.34, "end": 564.3000000000001, "text": " like, he won't touch anymore. So that's the sort of fun you can have. You know, it's bad enough", "tokens": [51364, 411, 11, 415, 1582, 380, 2557, 3602, 13, 407, 300, 311, 264, 1333, 295, 1019, 291, 393, 362, 13, 509, 458, 11, 309, 311, 1578, 1547, 51712], "temperature": 0.0, "avg_logprob": -0.08338763588353207, "compression_ratio": 1.6899563318777293, "no_speech_prob": 0.0009392132051289082}, {"id": 94, "seek": 56430, "start": 564.3, "end": 568.38, "text": " having a five or six line program, but when you have infinitely many of them interacting in these", "tokens": [50364, 1419, 257, 1732, 420, 2309, 1622, 1461, 11, 457, 562, 291, 362, 36227, 867, 295, 552, 18017, 294, 613, 50568], "temperature": 0.0, "avg_logprob": -0.13394019521515946, "compression_ratio": 1.6619718309859155, "no_speech_prob": 0.0009375115041621029}, {"id": 95, "seek": 56430, "start": 568.38, "end": 573.26, "text": " ways, then you can do very interesting things. And if you're interested in that sort of thing,", "tokens": [50568, 2098, 11, 550, 291, 393, 360, 588, 1880, 721, 13, 400, 498, 291, 434, 3102, 294, 300, 1333, 295, 551, 11, 50812], "temperature": 0.0, "avg_logprob": -0.13394019521515946, "compression_ratio": 1.6619718309859155, "no_speech_prob": 0.0009375115041621029}, {"id": 96, "seek": 56430, "start": 573.26, "end": 579.5, "text": " I would point you to the work of Kanichi Asai. And also, my friend Nada Min gave a keynote", "tokens": [50812, 286, 576, 935, 291, 281, 264, 589, 295, 11120, 18543, 1018, 1301, 13, 400, 611, 11, 452, 1277, 40992, 2829, 2729, 257, 33896, 51124], "temperature": 0.0, "avg_logprob": -0.13394019521515946, "compression_ratio": 1.6619718309859155, "no_speech_prob": 0.0009375115041621029}, {"id": 97, "seek": 56430, "start": 579.5, "end": 585.18, "text": " at Strange Loop a few years ago when she talked about this. I think she called the talk Programming", "tokens": [51124, 412, 29068, 45660, 257, 1326, 924, 2057, 562, 750, 2825, 466, 341, 13, 286, 519, 750, 1219, 264, 751, 8338, 2810, 51408], "temperature": 0.0, "avg_logprob": -0.13394019521515946, "compression_ratio": 1.6619718309859155, "no_speech_prob": 0.0009375115041621029}, {"id": 98, "seek": 56430, "start": 585.18, "end": 590.3, "text": " Should Eat Itself. And she talked about this reflective tower idea. Okay, so that's just", "tokens": [51408, 6454, 14429, 467, 927, 13, 400, 750, 2825, 466, 341, 28931, 10567, 1558, 13, 1033, 11, 370, 300, 311, 445, 51664], "temperature": 0.0, "avg_logprob": -0.13394019521515946, "compression_ratio": 1.6619718309859155, "no_speech_prob": 0.0009375115041621029}, {"id": 99, "seek": 59030, "start": 590.3, "end": 597.0999999999999, "text": " one aspect. You can go deep. You can go deep that direction if you want. I haven't touched that yet.", "tokens": [50364, 472, 4171, 13, 509, 393, 352, 2452, 13, 509, 393, 352, 2452, 300, 3513, 498, 291, 528, 13, 286, 2378, 380, 9828, 300, 1939, 13, 50704], "temperature": 0.0, "avg_logprob": -0.08126309610182239, "compression_ratio": 1.632034632034632, "no_speech_prob": 0.004526563920080662}, {"id": 100, "seek": 59030, "start": 598.14, "end": 603.18, "text": " I want to connect that with the thing I'm going to show you. And even the people who do", "tokens": [50756, 286, 528, 281, 1745, 300, 365, 264, 551, 286, 478, 516, 281, 855, 291, 13, 400, 754, 264, 561, 567, 360, 51008], "temperature": 0.0, "avg_logprob": -0.08126309610182239, "compression_ratio": 1.632034632034632, "no_speech_prob": 0.004526563920080662}, {"id": 101, "seek": 59030, "start": 604.38, "end": 609.5799999999999, "text": " this type of very bizarre programming, they kind of get scared look on their face when they start", "tokens": [51068, 341, 2010, 295, 588, 18265, 9410, 11, 436, 733, 295, 483, 5338, 574, 322, 641, 1851, 562, 436, 722, 51328], "temperature": 0.0, "avg_logprob": -0.08126309610182239, "compression_ratio": 1.632034632034632, "no_speech_prob": 0.004526563920080662}, {"id": 102, "seek": 59030, "start": 609.5799999999999, "end": 615.8199999999999, "text": " thinking about the implications. So that's a good feeling when you're scaring the veterans", "tokens": [51328, 1953, 466, 264, 16602, 13, 407, 300, 311, 257, 665, 2633, 562, 291, 434, 795, 1921, 264, 14343, 51640], "temperature": 0.0, "avg_logprob": -0.08126309610182239, "compression_ratio": 1.632034632034632, "no_speech_prob": 0.004526563920080662}, {"id": 103, "seek": 61582, "start": 615.9000000000001, "end": 625.1, "text": " of the Lambda Calculus. So that's something I want to accomplish. And there are many,", "tokens": [50368, 295, 264, 45691, 3511, 36002, 13, 407, 300, 311, 746, 286, 528, 281, 9021, 13, 400, 456, 366, 867, 11, 50828], "temperature": 0.0, "avg_logprob": -0.11410905664617366, "compression_ratio": 1.7340823970037453, "no_speech_prob": 0.00047996133798733354}, {"id": 104, "seek": 61582, "start": 625.1, "end": 629.82, "text": " many other directions you can go. Program transformation, directions, different evaluation", "tokens": [50828, 867, 661, 11095, 291, 393, 352, 13, 8338, 9887, 11, 11095, 11, 819, 13344, 51064], "temperature": 0.0, "avg_logprob": -0.11410905664617366, "compression_ratio": 1.7340823970037453, "no_speech_prob": 0.00047996133798733354}, {"id": 105, "seek": 61582, "start": 629.82, "end": 634.1400000000001, "text": " orders, all sorts of things. And then you can layer a type system on it, that kind of thing.", "tokens": [51064, 9470, 11, 439, 7527, 295, 721, 13, 400, 550, 291, 393, 4583, 257, 2010, 1185, 322, 309, 11, 300, 733, 295, 551, 13, 51280], "temperature": 0.0, "avg_logprob": -0.11410905664617366, "compression_ratio": 1.7340823970037453, "no_speech_prob": 0.00047996133798733354}, {"id": 106, "seek": 61582, "start": 634.1400000000001, "end": 638.86, "text": " Now you have the interpreter and a type inferencer and a share structure. And you can have them", "tokens": [51280, 823, 291, 362, 264, 34132, 293, 257, 2010, 13596, 16542, 293, 257, 2073, 3877, 13, 400, 291, 393, 362, 552, 51516], "temperature": 0.0, "avg_logprob": -0.11410905664617366, "compression_ratio": 1.7340823970037453, "no_speech_prob": 0.00047996133798733354}, {"id": 107, "seek": 61582, "start": 638.86, "end": 645.34, "text": " interact in interesting ways and all these sorts of things. So just like CPS is the gateway drug,", "tokens": [51516, 4648, 294, 1880, 2098, 293, 439, 613, 7527, 295, 721, 13, 407, 445, 411, 383, 6273, 307, 264, 28532, 4110, 11, 51840], "temperature": 0.0, "avg_logprob": -0.11410905664617366, "compression_ratio": 1.7340823970037453, "no_speech_prob": 0.00047996133798733354}, {"id": 108, "seek": 64534, "start": 645.4200000000001, "end": 651.82, "text": " program transformations, Lisp in Lisp is the gateway drug of the whole world of programming", "tokens": [50368, 1461, 34852, 11, 441, 7631, 294, 441, 7631, 307, 264, 28532, 4110, 295, 264, 1379, 1002, 295, 9410, 50688], "temperature": 0.0, "avg_logprob": -0.11094834853191765, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.00015835311205592006}, {"id": 109, "seek": 64534, "start": 651.82, "end": 660.3000000000001, "text": " languages, I think. So what we're going to do is write an interpreter. We're going to write", "tokens": [50688, 8650, 11, 286, 519, 13, 407, 437, 321, 434, 516, 281, 360, 307, 2464, 364, 34132, 13, 492, 434, 516, 281, 2464, 51112], "temperature": 0.0, "avg_logprob": -0.11094834853191765, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.00015835311205592006}, {"id": 110, "seek": 64534, "start": 660.3000000000001, "end": 666.5400000000001, "text": " the Lisp in Lisp in the way that Dan wrote it. And Paul Airdish, the great mathematician, had this", "tokens": [51112, 264, 441, 7631, 294, 441, 7631, 294, 264, 636, 300, 3394, 4114, 309, 13, 400, 4552, 316, 1271, 742, 11, 264, 869, 48281, 11, 632, 341, 51424], "temperature": 0.0, "avg_logprob": -0.11094834853191765, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.00015835311205592006}, {"id": 111, "seek": 64534, "start": 666.5400000000001, "end": 673.1, "text": " idea that there was a book that God kept that had every beautiful proof in it. Only the beautiful ones.", "tokens": [51424, 1558, 300, 456, 390, 257, 1446, 300, 1265, 4305, 300, 632, 633, 2238, 8177, 294, 309, 13, 5686, 264, 2238, 2306, 13, 51752], "temperature": 0.0, "avg_logprob": -0.11094834853191765, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.00015835311205592006}, {"id": 112, "seek": 67310, "start": 673.66, "end": 677.9, "text": " And every once in a while, he or someone else would come across a particularly elegant", "tokens": [50392, 400, 633, 1564, 294, 257, 1339, 11, 415, 420, 1580, 1646, 576, 808, 2108, 257, 4098, 21117, 50604], "temperature": 0.0, "avg_logprob": -0.09968270087728695, "compression_ratio": 1.7534883720930232, "no_speech_prob": 0.00032495110644958913}, {"id": 113, "seek": 67310, "start": 677.9, "end": 683.02, "text": " and beautiful proof and say, oh, that's a proof in the book. And so we're going to see a program in", "tokens": [50604, 293, 2238, 8177, 293, 584, 11, 1954, 11, 300, 311, 257, 8177, 294, 264, 1446, 13, 400, 370, 321, 434, 516, 281, 536, 257, 1461, 294, 50860], "temperature": 0.0, "avg_logprob": -0.09968270087728695, "compression_ratio": 1.7534883720930232, "no_speech_prob": 0.00032495110644958913}, {"id": 114, "seek": 67310, "start": 683.02, "end": 687.5, "text": " the book. This is the program in the book. I've written hundreds of interpreters and I've read", "tokens": [50860, 264, 1446, 13, 639, 307, 264, 1461, 294, 264, 1446, 13, 286, 600, 3720, 6779, 295, 17489, 1559, 293, 286, 600, 1401, 51084], "temperature": 0.0, "avg_logprob": -0.09968270087728695, "compression_ratio": 1.7534883720930232, "no_speech_prob": 0.00032495110644958913}, {"id": 115, "seek": 67310, "start": 687.5, "end": 694.3000000000001, "text": " lots of books on interpreters, but this to me is the one in the book. Everything else is a pale", "tokens": [51084, 3195, 295, 3642, 322, 17489, 1559, 11, 457, 341, 281, 385, 307, 264, 472, 294, 264, 1446, 13, 5471, 1646, 307, 257, 19546, 51424], "temperature": 0.0, "avg_logprob": -0.09968270087728695, "compression_ratio": 1.7534883720930232, "no_speech_prob": 0.00032495110644958913}, {"id": 116, "seek": 69430, "start": 694.3, "end": 703.5799999999999, "text": " limitation. All right. So who here is familiar with S expressions, symbolic expressions or", "tokens": [50364, 27432, 13, 1057, 558, 13, 407, 567, 510, 307, 4963, 365, 318, 15277, 11, 25755, 15277, 420, 50828], "temperature": 0.0, "avg_logprob": -0.1232083797454834, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.006793331820517778}, {"id": 117, "seek": 69430, "start": 703.5799999999999, "end": 709.8199999999999, "text": " some flavor of Lisp? I can read parentheses. All right. Maybe half and half. Okay. Well,", "tokens": [50828, 512, 6813, 295, 441, 7631, 30, 286, 393, 1401, 34153, 13, 1057, 558, 13, 2704, 1922, 293, 1922, 13, 1033, 13, 1042, 11, 51140], "temperature": 0.0, "avg_logprob": -0.1232083797454834, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.006793331820517778}, {"id": 118, "seek": 69430, "start": 709.8199999999999, "end": 714.54, "text": " I'll teach you how to do it. I'll teach you how to do it. And some of the things I'm going to show", "tokens": [51140, 286, 603, 2924, 291, 577, 281, 360, 309, 13, 286, 603, 2924, 291, 577, 281, 360, 309, 13, 400, 512, 295, 264, 721, 286, 478, 516, 281, 855, 51376], "temperature": 0.0, "avg_logprob": -0.1232083797454834, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.006793331820517778}, {"id": 119, "seek": 69430, "start": 714.54, "end": 720.14, "text": " you, like I said, this is jam packed full of deep ideas and I can only scratch the surface,", "tokens": [51376, 291, 11, 411, 286, 848, 11, 341, 307, 7872, 13265, 1577, 295, 2452, 3487, 293, 286, 393, 787, 8459, 264, 3753, 11, 51656], "temperature": 0.0, "avg_logprob": -0.1232083797454834, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.006793331820517778}, {"id": 120, "seek": 72014, "start": 720.22, "end": 726.22, "text": " but even scratching the surface may leave you dizzy. If that's the case, close your eyes,", "tokens": [50368, 457, 754, 29699, 264, 3753, 815, 1856, 291, 31098, 13, 759, 300, 311, 264, 1389, 11, 1998, 428, 2575, 11, 50668], "temperature": 0.0, "avg_logprob": -0.08187357922817798, "compression_ratio": 1.6460176991150441, "no_speech_prob": 0.0007788636721670628}, {"id": 121, "seek": 72014, "start": 727.1, "end": 734.6999999999999, "text": " lean forward, and the room will stop spinning. And then as we go on, you'll be able to hopefully", "tokens": [50712, 11659, 2128, 11, 293, 264, 1808, 486, 1590, 15640, 13, 400, 550, 382, 321, 352, 322, 11, 291, 603, 312, 1075, 281, 4696, 51092], "temperature": 0.0, "avg_logprob": -0.08187357922817798, "compression_ratio": 1.6460176991150441, "no_speech_prob": 0.0007788636721670628}, {"id": 122, "seek": 72014, "start": 734.6999999999999, "end": 738.86, "text": " pick up on some of the concepts and ideas and I'll show you some stuff at the end that maybe", "tokens": [51092, 1888, 493, 322, 512, 295, 264, 10392, 293, 3487, 293, 286, 603, 855, 291, 512, 1507, 412, 264, 917, 300, 1310, 51300], "temperature": 0.0, "avg_logprob": -0.08187357922817798, "compression_ratio": 1.6460176991150441, "no_speech_prob": 0.0007788636721670628}, {"id": 123, "seek": 72014, "start": 739.58, "end": 744.46, "text": " will be surprising to you, even if you don't understand all the details. And the great thing", "tokens": [51336, 486, 312, 8830, 281, 291, 11, 754, 498, 291, 500, 380, 1223, 439, 264, 4365, 13, 400, 264, 869, 551, 51580], "temperature": 0.0, "avg_logprob": -0.08187357922817798, "compression_ratio": 1.6460176991150441, "no_speech_prob": 0.0007788636721670628}, {"id": 124, "seek": 74446, "start": 744.46, "end": 751.1800000000001, "text": " is that once you have some sense of what this is about, you will be filled with a fiery passion to", "tokens": [50364, 307, 300, 1564, 291, 362, 512, 2020, 295, 437, 341, 307, 466, 11, 291, 486, 312, 6412, 365, 257, 43897, 5418, 281, 50700], "temperature": 0.0, "avg_logprob": -0.10000826277822819, "compression_ratio": 1.7, "no_speech_prob": 0.0004726339830085635}, {"id": 125, "seek": 74446, "start": 751.1800000000001, "end": 757.02, "text": " learn all the rest. And I can point you to some references for that or we can talk about it over", "tokens": [50700, 1466, 439, 264, 1472, 13, 400, 286, 393, 935, 291, 281, 512, 15400, 337, 300, 420, 321, 393, 751, 466, 309, 670, 50992], "temperature": 0.0, "avg_logprob": -0.10000826277822819, "compression_ratio": 1.7, "no_speech_prob": 0.0004726339830085635}, {"id": 126, "seek": 74446, "start": 757.02, "end": 765.9000000000001, "text": " a milkshake. So the first thing I'm going to do is talk about lists. Let's talk about lists. So", "tokens": [50992, 257, 48773, 34593, 13, 407, 264, 700, 551, 286, 478, 516, 281, 360, 307, 751, 466, 14511, 13, 961, 311, 751, 466, 14511, 13, 407, 51436], "temperature": 0.0, "avg_logprob": -0.10000826277822819, "compression_ratio": 1.7, "no_speech_prob": 0.0004726339830085635}, {"id": 127, "seek": 74446, "start": 765.9000000000001, "end": 773.9000000000001, "text": " Scheme is a Lisp and Lisp comes from List Processing. That's what Lisp stands for, List Processing.", "tokens": [51436, 2065, 5729, 307, 257, 441, 7631, 293, 441, 7631, 1487, 490, 17668, 31093, 278, 13, 663, 311, 437, 441, 7631, 7382, 337, 11, 17668, 31093, 278, 13, 51836], "temperature": 0.0, "avg_logprob": -0.10000826277822819, "compression_ratio": 1.7, "no_speech_prob": 0.0004726339830085635}, {"id": 128, "seek": 77390, "start": 773.98, "end": 778.86, "text": " So we're going to talk about lists and symbols. That's the first thing we're going to talk about.", "tokens": [50368, 407, 321, 434, 516, 281, 751, 466, 14511, 293, 16944, 13, 663, 311, 264, 700, 551, 321, 434, 516, 281, 751, 466, 13, 50612], "temperature": 0.0, "avg_logprob": -0.16186999330426208, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.00021643734362442046}, {"id": 129, "seek": 77390, "start": 778.86, "end": 786.14, "text": " So let me go ahead and start up trusty Shea Scheme, which is now covered under an open", "tokens": [50612, 407, 718, 385, 352, 2286, 293, 722, 493, 3361, 88, 1240, 64, 2065, 5729, 11, 597, 307, 586, 5343, 833, 364, 1269, 50976], "temperature": 0.0, "avg_logprob": -0.16186999330426208, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.00021643734362442046}, {"id": 130, "seek": 77390, "start": 786.14, "end": 793.8199999999999, "text": " source license. Woohoo! All right. So Shea Scheme has this thing called the REPL and it's pronounced", "tokens": [50976, 4009, 10476, 13, 10468, 19069, 0, 1057, 558, 13, 407, 1240, 64, 2065, 5729, 575, 341, 551, 1219, 264, 31511, 43, 293, 309, 311, 23155, 51360], "temperature": 0.0, "avg_logprob": -0.16186999330426208, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.00021643734362442046}, {"id": 131, "seek": 77390, "start": 793.8199999999999, "end": 801.9, "text": " REPL not REPL. And this you probably are familiar with if you've used other languages that have", "tokens": [51360, 31511, 43, 406, 31511, 43, 13, 400, 341, 291, 1391, 366, 4963, 365, 498, 291, 600, 1143, 661, 8650, 300, 362, 51764], "temperature": 0.0, "avg_logprob": -0.16186999330426208, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.00021643734362442046}, {"id": 132, "seek": 80190, "start": 801.9, "end": 806.86, "text": " interactivity. One of the cool things about a good scheme implementation is that even though I'm", "tokens": [50364, 4648, 4253, 13, 1485, 295, 264, 1627, 721, 466, 257, 665, 12232, 11420, 307, 300, 754, 1673, 286, 478, 50612], "temperature": 0.0, "avg_logprob": -0.09469931153045304, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.0008419030345976353}, {"id": 133, "seek": 80190, "start": 806.86, "end": 812.06, "text": " typing expressions interactively, those get compiled on the fly directly to machine code.", "tokens": [50612, 18444, 15277, 4648, 3413, 11, 729, 483, 36548, 322, 264, 3603, 3838, 281, 3479, 3089, 13, 50872], "temperature": 0.0, "avg_logprob": -0.09469931153045304, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.0008419030345976353}, {"id": 134, "seek": 80190, "start": 812.86, "end": 817.9, "text": " Actually, at least some versions of, say, Shea does an analysis first to determine whether or not", "tokens": [50912, 5135, 11, 412, 1935, 512, 9606, 295, 11, 584, 11, 1240, 64, 775, 364, 5215, 700, 281, 6997, 1968, 420, 406, 51164], "temperature": 0.0, "avg_logprob": -0.09469931153045304, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.0008419030345976353}, {"id": 135, "seek": 80190, "start": 817.9, "end": 825.8199999999999, "text": " it's faster to evaluate it or faster to compile and evaluate it. So this is faster in general than", "tokens": [51164, 309, 311, 4663, 281, 13059, 309, 420, 4663, 281, 31413, 293, 13059, 309, 13, 407, 341, 307, 4663, 294, 2674, 813, 51560], "temperature": 0.0, "avg_logprob": -0.09469931153045304, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.0008419030345976353}, {"id": 136, "seek": 82582, "start": 825.82, "end": 835.2600000000001, "text": " a lot of systems. Okay. Let's write a simple scheme program like 5. 5 evaluates to 5. All right?", "tokens": [50364, 257, 688, 295, 3652, 13, 1033, 13, 961, 311, 2464, 257, 2199, 12232, 1461, 411, 1025, 13, 1025, 6133, 1024, 281, 1025, 13, 1057, 558, 30, 50836], "temperature": 0.0, "avg_logprob": -0.11990773518880209, "compression_ratio": 1.449438202247191, "no_speech_prob": 0.0010003087809309363}, {"id": 137, "seek": 82582, "start": 836.94, "end": 841.74, "text": " We don't have to make it evaluate to 5, but let's pretend that we will. Now,", "tokens": [50920, 492, 500, 380, 362, 281, 652, 309, 13059, 281, 1025, 11, 457, 718, 311, 11865, 300, 321, 486, 13, 823, 11, 51160], "temperature": 0.0, "avg_logprob": -0.11990773518880209, "compression_ratio": 1.449438202247191, "no_speech_prob": 0.0010003087809309363}, {"id": 138, "seek": 82582, "start": 843.2600000000001, "end": 851.1, "text": " what else can we have? We can have a list containing 5 and you could see the list is", "tokens": [51236, 437, 1646, 393, 321, 362, 30, 492, 393, 362, 257, 1329, 19273, 1025, 293, 291, 727, 536, 264, 1329, 307, 51628], "temperature": 0.0, "avg_logprob": -0.11990773518880209, "compression_ratio": 1.449438202247191, "no_speech_prob": 0.0010003087809309363}, {"id": 139, "seek": 85110, "start": 851.1, "end": 859.1800000000001, "text": " represented by these beautiful parentheses. We can have a list containing 5 and 6.", "tokens": [50364, 10379, 538, 613, 2238, 34153, 13, 492, 393, 362, 257, 1329, 19273, 1025, 293, 1386, 13, 50768], "temperature": 0.0, "avg_logprob": -0.09818028211593628, "compression_ratio": 1.265625, "no_speech_prob": 0.0006460973527282476}, {"id": 140, "seek": 85110, "start": 860.62, "end": 870.46, "text": " Notice that I did not defile my program with commas or anything else like that.", "tokens": [50840, 13428, 300, 286, 630, 406, 1060, 794, 452, 1461, 365, 800, 296, 420, 1340, 1646, 411, 300, 13, 51332], "temperature": 0.0, "avg_logprob": -0.09818028211593628, "compression_ratio": 1.265625, "no_speech_prob": 0.0006460973527282476}, {"id": 141, "seek": 87046, "start": 870.86, "end": 885.82, "text": " We can have a list that contains a list. What do you think is going to happen?", "tokens": [50384, 492, 393, 362, 257, 1329, 300, 8306, 257, 1329, 13, 708, 360, 291, 519, 307, 516, 281, 1051, 30, 51132], "temperature": 0.0, "avg_logprob": -0.12318269066188646, "compression_ratio": 1.373913043478261, "no_speech_prob": 0.002251683035865426}, {"id": 142, "seek": 87046, "start": 887.1800000000001, "end": 895.58, "text": " More parentheses. Look at that. We can go deeper. We can go as deep as we want.", "tokens": [51200, 5048, 34153, 13, 2053, 412, 300, 13, 492, 393, 352, 7731, 13, 492, 393, 352, 382, 2452, 382, 321, 528, 13, 51620], "temperature": 0.0, "avg_logprob": -0.12318269066188646, "compression_ratio": 1.373913043478261, "no_speech_prob": 0.002251683035865426}, {"id": 143, "seek": 89558, "start": 895.82, "end": 901.34, "text": " So we have lists. We can have lists of lists. What is another name for a list of lists?", "tokens": [50376, 407, 321, 362, 14511, 13, 492, 393, 362, 14511, 295, 14511, 13, 708, 307, 1071, 1315, 337, 257, 1329, 295, 14511, 30, 50652], "temperature": 0.0, "avg_logprob": -0.18822323066600855, "compression_ratio": 1.578616352201258, "no_speech_prob": 0.0008294224389828742}, {"id": 144, "seek": 89558, "start": 902.86, "end": 910.3000000000001, "text": " A tree. Oh, have you ever heard of trees? Right? Have you heard of this thing called XML,", "tokens": [50728, 316, 4230, 13, 876, 11, 362, 291, 1562, 2198, 295, 5852, 30, 1779, 30, 3560, 291, 2198, 295, 341, 551, 1219, 43484, 11, 51100], "temperature": 0.0, "avg_logprob": -0.18822323066600855, "compression_ratio": 1.578616352201258, "no_speech_prob": 0.0008294224389828742}, {"id": 145, "seek": 89558, "start": 910.3000000000001, "end": 917.82, "text": " this new thing? Do you know what language came before XML? What language?", "tokens": [51100, 341, 777, 551, 30, 1144, 291, 458, 437, 2856, 1361, 949, 43484, 30, 708, 2856, 30, 51476], "temperature": 0.0, "avg_logprob": -0.18822323066600855, "compression_ratio": 1.578616352201258, "no_speech_prob": 0.0008294224389828742}, {"id": 146, "seek": 91782, "start": 918.0600000000001, "end": 924.22, "text": " SGML. Yes, right. Have you heard of something, a beautiful thing called XSLT?", "tokens": [50376, 318, 25152, 43, 13, 1079, 11, 558, 13, 3560, 291, 2198, 295, 746, 11, 257, 2238, 551, 1219, 1783, 47012, 51, 30, 50684], "temperature": 0.0, "avg_logprob": -0.2733965294033873, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.004069563001394272}, {"id": 147, "seek": 91782, "start": 926.0600000000001, "end": 931.1800000000001, "text": " Brings joy into your heart. Do you know what the SGML equivalent of XSLT was?", "tokens": [50776, 1603, 1109, 6258, 666, 428, 1917, 13, 1144, 291, 458, 437, 264, 318, 25152, 43, 10344, 295, 1783, 47012, 51, 390, 30, 51032], "temperature": 0.0, "avg_logprob": -0.2733965294033873, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.004069563001394272}, {"id": 148, "seek": 91782, "start": 932.46, "end": 940.3000000000001, "text": " See who knows the obscure stuff. Dissil? Has anyone heard of Dissil? DSSSL? What is that?", "tokens": [51096, 3008, 567, 3255, 264, 34443, 1507, 13, 413, 891, 388, 30, 8646, 2878, 2198, 295, 413, 891, 388, 30, 15816, 21929, 43, 30, 708, 307, 300, 30, 51488], "temperature": 0.0, "avg_logprob": -0.2733965294033873, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.004069563001394272}, {"id": 149, "seek": 91782, "start": 940.86, "end": 946.1400000000001, "text": " Dynamic style and semantics language or whatever, something like that. You know what Dissil was?", "tokens": [51516, 45440, 3758, 293, 4361, 45298, 2856, 420, 2035, 11, 746, 411, 300, 13, 509, 458, 437, 413, 891, 388, 390, 30, 51780], "temperature": 0.0, "avg_logprob": -0.2733965294033873, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.004069563001394272}, {"id": 150, "seek": 94614, "start": 947.1, "end": 955.5, "text": " It was Lisp. It was R4RS Scheme. Because if you're going to work on tree structure data,", "tokens": [50412, 467, 390, 441, 7631, 13, 467, 390, 497, 19, 43580, 2065, 5729, 13, 1436, 498, 291, 434, 516, 281, 589, 322, 4230, 3877, 1412, 11, 50832], "temperature": 0.0, "avg_logprob": -0.15827271461486817, "compression_ratio": 1.6883720930232557, "no_speech_prob": 0.000570247124414891}, {"id": 151, "seek": 94614, "start": 956.62, "end": 960.62, "text": " what's the right way to work on it? A tree is an inductively defined data type.", "tokens": [50888, 437, 311, 264, 558, 636, 281, 589, 322, 309, 30, 316, 4230, 307, 364, 31612, 3413, 7642, 1412, 2010, 13, 51088], "temperature": 0.0, "avg_logprob": -0.15827271461486817, "compression_ratio": 1.6883720930232557, "no_speech_prob": 0.000570247124414891}, {"id": 152, "seek": 94614, "start": 961.34, "end": 969.58, "text": " How do you deal with that recursion? That's how you deal with trees. So Lisp is all about recursion", "tokens": [51124, 1012, 360, 291, 2028, 365, 300, 20560, 313, 30, 663, 311, 577, 291, 2028, 365, 5852, 13, 407, 441, 7631, 307, 439, 466, 20560, 313, 51536], "temperature": 0.0, "avg_logprob": -0.15827271461486817, "compression_ratio": 1.6883720930232557, "no_speech_prob": 0.000570247124414891}, {"id": 153, "seek": 94614, "start": 969.58, "end": 975.5, "text": " and dealing with trees. Programs, most programs, represented as trees. If you're going to have", "tokens": [51536, 293, 6260, 365, 5852, 13, 44762, 11, 881, 4268, 11, 10379, 382, 5852, 13, 759, 291, 434, 516, 281, 362, 51832], "temperature": 0.0, "avg_logprob": -0.15827271461486817, "compression_ratio": 1.6883720930232557, "no_speech_prob": 0.000570247124414891}, {"id": 154, "seek": 97550, "start": 975.58, "end": 981.9, "text": " a programming language that can modify programs, what better way to do it? Well,", "tokens": [50368, 257, 9410, 2856, 300, 393, 16927, 4268, 11, 437, 1101, 636, 281, 360, 309, 30, 1042, 11, 50684], "temperature": 0.0, "avg_logprob": -0.18143756415254325, "compression_ratio": 1.5219298245614035, "no_speech_prob": 0.0005029852036386728}, {"id": 155, "seek": 97550, "start": 983.02, "end": 987.82, "text": " the Haas scholars will say there are better ways. But anyway, don't listen to them.", "tokens": [50740, 264, 4064, 296, 8553, 486, 584, 456, 366, 1101, 2098, 13, 583, 4033, 11, 500, 380, 2140, 281, 552, 13, 50980], "temperature": 0.0, "avg_logprob": -0.18143756415254325, "compression_ratio": 1.5219298245614035, "no_speech_prob": 0.0005029852036386728}, {"id": 156, "seek": 97550, "start": 990.46, "end": 995.66, "text": " Okay. So we have lists and things like that. By the way, if you want to learn scheme,", "tokens": [51112, 1033, 13, 407, 321, 362, 14511, 293, 721, 411, 300, 13, 3146, 264, 636, 11, 498, 291, 528, 281, 1466, 12232, 11, 51372], "temperature": 0.0, "avg_logprob": -0.18143756415254325, "compression_ratio": 1.5219298245614035, "no_speech_prob": 0.0005029852036386728}, {"id": 157, "seek": 97550, "start": 995.66, "end": 1001.02, "text": " there's an awesome interactive fiction game by Andrew Plotkin, aka Zarf, called Lists and Lists,", "tokens": [51372, 456, 311, 364, 3476, 15141, 13266, 1216, 538, 10110, 2149, 310, 5843, 11, 28042, 1176, 30224, 11, 1219, 441, 1751, 293, 441, 1751, 11, 51640], "temperature": 0.0, "avg_logprob": -0.18143756415254325, "compression_ratio": 1.5219298245614035, "no_speech_prob": 0.0005029852036386728}, {"id": 158, "seek": 100102, "start": 1001.66, "end": 1007.5, "text": " where a genie teaches you to program and scheme. And you can actually implement logic programming", "tokens": [50396, 689, 257, 1049, 414, 16876, 291, 281, 1461, 293, 12232, 13, 400, 291, 393, 767, 4445, 9952, 9410, 50688], "temperature": 0.0, "avg_logprob": -0.11314113573594527, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.0007550227455794811}, {"id": 159, "seek": 100102, "start": 1007.5, "end": 1012.46, "text": " inside of that scheme, although eventually you'll run out of memory because the Z machine doesn't", "tokens": [50688, 1854, 295, 300, 12232, 11, 4878, 4728, 291, 603, 1190, 484, 295, 4675, 570, 264, 1176, 3479, 1177, 380, 50936], "temperature": 0.0, "avg_logprob": -0.11314113573594527, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.0007550227455794811}, {"id": 160, "seek": 100102, "start": 1012.46, "end": 1017.9, "text": " have that much space. But anyway, it's a good exercise. So we have lists. We have lists contained", "tokens": [50936, 362, 300, 709, 1901, 13, 583, 4033, 11, 309, 311, 257, 665, 5380, 13, 407, 321, 362, 14511, 13, 492, 362, 14511, 16212, 51208], "temperature": 0.0, "avg_logprob": -0.11314113573594527, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.0007550227455794811}, {"id": 161, "seek": 100102, "start": 1017.9, "end": 1023.18, "text": " lists, which are trees. We have numbers which evaluate to themselves. There are other values", "tokens": [51208, 14511, 11, 597, 366, 5852, 13, 492, 362, 3547, 597, 13059, 281, 2969, 13, 821, 366, 661, 4190, 51472], "temperature": 0.0, "avg_logprob": -0.11314113573594527, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.0007550227455794811}, {"id": 162, "seek": 102318, "start": 1023.18, "end": 1030.1399999999999, "text": " like hash t is a representation of truth. There is no representation of beauty, but", "tokens": [50364, 411, 22019, 256, 307, 257, 10290, 295, 3494, 13, 821, 307, 572, 10290, 295, 6643, 11, 457, 50712], "temperature": 0.0, "avg_logprob": -0.13327799172237, "compression_ratio": 1.7729468599033817, "no_speech_prob": 0.003943803254514933}, {"id": 163, "seek": 102318, "start": 1031.34, "end": 1036.46, "text": " we have hash f, which is a representation of false. An interesting fact about scheme is that", "tokens": [50772, 321, 362, 22019, 283, 11, 597, 307, 257, 10290, 295, 7908, 13, 1107, 1880, 1186, 466, 12232, 307, 300, 51028], "temperature": 0.0, "avg_logprob": -0.13327799172237, "compression_ratio": 1.7729468599033817, "no_speech_prob": 0.003943803254514933}, {"id": 164, "seek": 102318, "start": 1036.46, "end": 1042.62, "text": " every value in scheme is considered true except for hash f. So five is considered true. Well,", "tokens": [51028, 633, 2158, 294, 12232, 307, 4888, 2074, 3993, 337, 22019, 283, 13, 407, 1732, 307, 4888, 2074, 13, 1042, 11, 51336], "temperature": 0.0, "avg_logprob": -0.13327799172237, "compression_ratio": 1.7729468599033817, "no_speech_prob": 0.003943803254514933}, {"id": 165, "seek": 102318, "start": 1042.62, "end": 1051.98, "text": " then that's beautiful. It is open to debate. So we have also this amazing and very deep operator", "tokens": [51336, 550, 300, 311, 2238, 13, 467, 307, 1269, 281, 7958, 13, 407, 321, 362, 611, 341, 2243, 293, 588, 2452, 12973, 51804], "temperature": 0.0, "avg_logprob": -0.13327799172237, "compression_ratio": 1.7729468599033817, "no_speech_prob": 0.003943803254514933}, {"id": 166, "seek": 105198, "start": 1051.98, "end": 1060.46, "text": " called quotation. Quote. Quote. And that is the topic of a lot of stuff I won't get into. But", "tokens": [50364, 1219, 47312, 13, 2326, 1370, 13, 2326, 1370, 13, 400, 300, 307, 264, 4829, 295, 257, 688, 295, 1507, 286, 1582, 380, 483, 666, 13, 583, 50788], "temperature": 0.0, "avg_logprob": -0.09383170148159595, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.0006874994724057615}, {"id": 167, "seek": 105198, "start": 1060.46, "end": 1066.78, "text": " quote itself, this is a very controversial operator, how it should behave. People have created", "tokens": [50788, 6513, 2564, 11, 341, 307, 257, 588, 17323, 12973, 11, 577, 309, 820, 15158, 13, 3432, 362, 2942, 51104], "temperature": 0.0, "avg_logprob": -0.09383170148159595, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.0006874994724057615}, {"id": 168, "seek": 105198, "start": 1066.78, "end": 1072.78, "text": " entire versions of lists just based on different notions of quotation. But in scheme, the way", "tokens": [51104, 2302, 9606, 295, 14511, 445, 2361, 322, 819, 35799, 295, 47312, 13, 583, 294, 12232, 11, 264, 636, 51404], "temperature": 0.0, "avg_logprob": -0.09383170148159595, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.0006874994724057615}, {"id": 169, "seek": 105198, "start": 1072.78, "end": 1078.94, "text": " quote works is quote of anything gives you back that thing. So we quoted five. We get back five.", "tokens": [51404, 6513, 1985, 307, 6513, 295, 1340, 2709, 291, 646, 300, 551, 13, 407, 321, 30047, 1732, 13, 492, 483, 646, 1732, 13, 51712], "temperature": 0.0, "avg_logprob": -0.09383170148159595, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.0006874994724057615}, {"id": 170, "seek": 107894, "start": 1078.94, "end": 1084.14, "text": " We actually don't need to quote five. Quote five is something called a self-quoting or self-evaluating", "tokens": [50364, 492, 767, 500, 380, 643, 281, 6513, 1732, 13, 2326, 1370, 1732, 307, 746, 1219, 257, 2698, 12, 358, 17001, 420, 2698, 12, 68, 3337, 32438, 50624], "temperature": 0.0, "avg_logprob": -0.09050219900467817, "compression_ratio": 1.8527131782945736, "no_speech_prob": 0.0003249419969506562}, {"id": 171, "seek": 107894, "start": 1084.14, "end": 1090.06, "text": " literal. But we can do things like quote a list. We can quote a list of five, six. And we can", "tokens": [50624, 20411, 13, 583, 321, 393, 360, 721, 411, 6513, 257, 1329, 13, 492, 393, 6513, 257, 1329, 295, 1732, 11, 2309, 13, 400, 321, 393, 50920], "temperature": 0.0, "avg_logprob": -0.09050219900467817, "compression_ratio": 1.8527131782945736, "no_speech_prob": 0.0003249419969506562}, {"id": 172, "seek": 107894, "start": 1090.06, "end": 1097.26, "text": " back the list five, six. We can quote the empty list, which has nothing in it. Because we use", "tokens": [50920, 646, 264, 1329, 1732, 11, 2309, 13, 492, 393, 6513, 264, 6707, 1329, 11, 597, 575, 1825, 294, 309, 13, 1436, 321, 764, 51280], "temperature": 0.0, "avg_logprob": -0.09050219900467817, "compression_ratio": 1.8527131782945736, "no_speech_prob": 0.0003249419969506562}, {"id": 173, "seek": 107894, "start": 1097.26, "end": 1102.14, "text": " quote so much, we don't necessarily want to write quote this way. We're going to have a shorthand.", "tokens": [51280, 6513, 370, 709, 11, 321, 500, 380, 4725, 528, 281, 2464, 6513, 341, 636, 13, 492, 434, 516, 281, 362, 257, 402, 2652, 474, 13, 51524], "temperature": 0.0, "avg_logprob": -0.09050219900467817, "compression_ratio": 1.8527131782945736, "no_speech_prob": 0.0003249419969506562}, {"id": 174, "seek": 107894, "start": 1102.14, "end": 1105.5, "text": " Scheme doesn't have a lot of shorthand, but this is one of them. So we're going to write", "tokens": [51524, 2065, 5729, 1177, 380, 362, 257, 688, 295, 402, 2652, 474, 11, 457, 341, 307, 472, 295, 552, 13, 407, 321, 434, 516, 281, 2464, 51692], "temperature": 0.0, "avg_logprob": -0.09050219900467817, "compression_ratio": 1.8527131782945736, "no_speech_prob": 0.0003249419969506562}, {"id": 175, "seek": 110550, "start": 1106.46, "end": 1117.34, "text": " quote somewhat like that. Five, six. Okay. This I will allow. I don't like too much, you know,", "tokens": [50412, 6513, 8344, 411, 300, 13, 9436, 11, 2309, 13, 1033, 13, 639, 286, 486, 2089, 13, 286, 500, 380, 411, 886, 709, 11, 291, 458, 11, 50956], "temperature": 0.0, "avg_logprob": -0.18980549751444065, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.00043046282371506095}, {"id": 176, "seek": 110550, "start": 1117.34, "end": 1122.62, "text": " messing with my symbolic expressions, but this is going to be okay. And then in addition to", "tokens": [50956, 23258, 365, 452, 25755, 15277, 11, 457, 341, 307, 516, 281, 312, 1392, 13, 400, 550, 294, 4500, 281, 51220], "temperature": 0.0, "avg_logprob": -0.18980549751444065, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.00043046282371506095}, {"id": 177, "seek": 110550, "start": 1122.62, "end": 1126.46, "text": " having things like numbers and lists and lists containing lists and true and false values or", "tokens": [51220, 1419, 721, 411, 3547, 293, 14511, 293, 14511, 19273, 14511, 293, 2074, 293, 7908, 4190, 420, 51412], "temperature": 0.0, "avg_logprob": -0.18980549751444065, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.00043046282371506095}, {"id": 178, "seek": 110550, "start": 1126.46, "end": 1135.1, "text": " bullions, we have an amazing thing called the symbol. And if you program in Java, I'm sorry,", "tokens": [51412, 4693, 626, 11, 321, 362, 364, 2243, 551, 1219, 264, 5986, 13, 400, 498, 291, 1461, 294, 10745, 11, 286, 478, 2597, 11, 51844], "temperature": 0.0, "avg_logprob": -0.18980549751444065, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.00043046282371506095}, {"id": 179, "seek": 113510, "start": 1135.1799999999998, "end": 1138.86, "text": " you don't get symbols. If you program in many languages, you don't get symbols. But you do have", "tokens": [50368, 291, 500, 380, 483, 16944, 13, 759, 291, 1461, 294, 867, 8650, 11, 291, 500, 380, 483, 16944, 13, 583, 291, 360, 362, 50552], "temperature": 0.0, "avg_logprob": -0.11108492879034246, "compression_ratio": 1.7004405286343611, "no_speech_prob": 0.0005270695546641946}, {"id": 180, "seek": 113510, "start": 1138.86, "end": 1149.26, "text": " symbols in a scheme in most lists. So we can say milkshake with a quote around. And that gives", "tokens": [50552, 16944, 294, 257, 12232, 294, 881, 14511, 13, 407, 321, 393, 584, 48773, 34593, 365, 257, 6513, 926, 13, 400, 300, 2709, 51072], "temperature": 0.0, "avg_logprob": -0.11108492879034246, "compression_ratio": 1.7004405286343611, "no_speech_prob": 0.0005270695546641946}, {"id": 181, "seek": 113510, "start": 1149.26, "end": 1154.9399999999998, "text": " us back milkshake. Milkshake is a symbol. It's a symbol. It's not a string. Strings are different.", "tokens": [51072, 505, 646, 48773, 34593, 13, 7036, 1694, 34593, 307, 257, 5986, 13, 467, 311, 257, 5986, 13, 467, 311, 406, 257, 6798, 13, 8251, 1109, 366, 819, 13, 51356], "temperature": 0.0, "avg_logprob": -0.11108492879034246, "compression_ratio": 1.7004405286343611, "no_speech_prob": 0.0005270695546641946}, {"id": 182, "seek": 113510, "start": 1155.5, "end": 1160.3799999999999, "text": " Symbols are things that represent metaphorically objects that we might care about. Okay. This is", "tokens": [51384, 3902, 5612, 82, 366, 721, 300, 2906, 19157, 984, 6565, 300, 321, 1062, 1127, 466, 13, 1033, 13, 639, 307, 51628], "temperature": 0.0, "avg_logprob": -0.11108492879034246, "compression_ratio": 1.7004405286343611, "no_speech_prob": 0.0005270695546641946}, {"id": 183, "seek": 116038, "start": 1160.38, "end": 1166.5400000000002, "text": " an atomic value. We can't tear it apart. We can't do anything like that. It's a unique thing. And", "tokens": [50364, 364, 22275, 2158, 13, 492, 393, 380, 12556, 309, 4936, 13, 492, 393, 380, 360, 1340, 411, 300, 13, 467, 311, 257, 3845, 551, 13, 400, 50672], "temperature": 0.0, "avg_logprob": -0.12697781703268834, "compression_ratio": 1.7827715355805243, "no_speech_prob": 0.0030735183972865343}, {"id": 184, "seek": 116038, "start": 1166.5400000000002, "end": 1171.2600000000002, "text": " it turns out internally it's fast to compare symbols. So we can use symbols to represent", "tokens": [50672, 309, 4523, 484, 19501, 309, 311, 2370, 281, 6794, 16944, 13, 407, 321, 393, 764, 16944, 281, 2906, 50908], "temperature": 0.0, "avg_logprob": -0.12697781703268834, "compression_ratio": 1.7827715355805243, "no_speech_prob": 0.0030735183972865343}, {"id": 185, "seek": 116038, "start": 1171.2600000000002, "end": 1177.42, "text": " interesting data. We don't have to say, oh, we're in C. And so a milkshake is five or whatever it is.", "tokens": [50908, 1880, 1412, 13, 492, 500, 380, 362, 281, 584, 11, 1954, 11, 321, 434, 294, 383, 13, 400, 370, 257, 48773, 34593, 307, 1732, 420, 2035, 309, 307, 13, 51216], "temperature": 0.0, "avg_logprob": -0.12697781703268834, "compression_ratio": 1.7827715355805243, "no_speech_prob": 0.0030735183972865343}, {"id": 186, "seek": 116038, "start": 1177.42, "end": 1183.98, "text": " Right? So we can do things like this, which are classier. Okay. So we have symbols, lists. We", "tokens": [51216, 1779, 30, 407, 321, 393, 360, 721, 411, 341, 11, 597, 366, 1508, 811, 13, 1033, 13, 407, 321, 362, 16944, 11, 14511, 13, 492, 51544], "temperature": 0.0, "avg_logprob": -0.12697781703268834, "compression_ratio": 1.7827715355805243, "no_speech_prob": 0.0030735183972865343}, {"id": 187, "seek": 116038, "start": 1183.98, "end": 1189.9, "text": " can have symbols inside of our lists and things like that. We can also make decisions. We can", "tokens": [51544, 393, 362, 16944, 1854, 295, 527, 14511, 293, 721, 411, 300, 13, 492, 393, 611, 652, 5327, 13, 492, 393, 51840], "temperature": 0.0, "avg_logprob": -0.12697781703268834, "compression_ratio": 1.7827715355805243, "no_speech_prob": 0.0030735183972865343}, {"id": 188, "seek": 119038, "start": 1190.7800000000002, "end": 1199.42, "text": " do things like ask if a list is empty. So I say, is the empty list null? So if I have a list,", "tokens": [50384, 360, 721, 411, 1029, 498, 257, 1329, 307, 6707, 13, 407, 286, 584, 11, 307, 264, 6707, 1329, 18184, 30, 407, 498, 286, 362, 257, 1329, 11, 50816], "temperature": 0.0, "avg_logprob": -0.13522599333076066, "compression_ratio": 1.7004608294930876, "no_speech_prob": 0.0003854879178106785}, {"id": 189, "seek": 119038, "start": 1201.3400000000001, "end": 1207.74, "text": " there's friends. The thing that comes inside the friends first, that is basically a function call.", "tokens": [50912, 456, 311, 1855, 13, 440, 551, 300, 1487, 1854, 264, 1855, 700, 11, 300, 307, 1936, 257, 2445, 818, 13, 51232], "temperature": 0.0, "avg_logprob": -0.13522599333076066, "compression_ratio": 1.7004608294930876, "no_speech_prob": 0.0003854879178106785}, {"id": 190, "seek": 119038, "start": 1208.46, "end": 1212.46, "text": " Unless it's something like, quote, there's something called special forms that have special", "tokens": [51268, 16581, 309, 311, 746, 411, 11, 6513, 11, 456, 311, 746, 1219, 2121, 6422, 300, 362, 2121, 51468], "temperature": 0.0, "avg_logprob": -0.13522599333076066, "compression_ratio": 1.7004608294930876, "no_speech_prob": 0.0003854879178106785}, {"id": 191, "seek": 119038, "start": 1212.46, "end": 1217.18, "text": " evaluation rules. But in this case, we're just calling a function. And the function,", "tokens": [51468, 13344, 4474, 13, 583, 294, 341, 1389, 11, 321, 434, 445, 5141, 257, 2445, 13, 400, 264, 2445, 11, 51704], "temperature": 0.0, "avg_logprob": -0.13522599333076066, "compression_ratio": 1.7004608294930876, "no_speech_prob": 0.0003854879178106785}, {"id": 192, "seek": 121718, "start": 1217.18, "end": 1221.02, "text": " you can tell, is a predicate. It has a question mark that's going to return true or false.", "tokens": [50364, 291, 393, 980, 11, 307, 257, 3852, 8700, 13, 467, 575, 257, 1168, 1491, 300, 311, 516, 281, 2736, 2074, 420, 7908, 13, 50556], "temperature": 0.0, "avg_logprob": -0.11306942319407047, "compression_ratio": 1.6391304347826088, "no_speech_prob": 0.0002867158327717334}, {"id": 193, "seek": 121718, "start": 1222.0600000000002, "end": 1229.9, "text": " So we're asking if the input expression evaluates to the empty list. And it does. We can ask if", "tokens": [50608, 407, 321, 434, 3365, 498, 264, 4846, 6114, 6133, 1024, 281, 264, 6707, 1329, 13, 400, 309, 775, 13, 492, 393, 1029, 498, 51000], "temperature": 0.0, "avg_logprob": -0.11306942319407047, "compression_ratio": 1.6391304347826088, "no_speech_prob": 0.0002867158327717334}, {"id": 194, "seek": 121718, "start": 1229.9, "end": 1237.3400000000001, "text": " five is null. Five is not null. So we can make a function call. We have notions of predicates.", "tokens": [51000, 1732, 307, 18184, 13, 9436, 307, 406, 18184, 13, 407, 321, 393, 652, 257, 2445, 818, 13, 492, 362, 35799, 295, 47336, 1024, 13, 51372], "temperature": 0.0, "avg_logprob": -0.11306942319407047, "compression_ratio": 1.6391304347826088, "no_speech_prob": 0.0002867158327717334}, {"id": 195, "seek": 121718, "start": 1238.14, "end": 1244.7, "text": " We can also build up lists in other ways that I haven't shown you yet. So I showed you two ways", "tokens": [51412, 492, 393, 611, 1322, 493, 14511, 294, 661, 2098, 300, 286, 2378, 380, 4898, 291, 1939, 13, 407, 286, 4712, 291, 732, 2098, 51740], "temperature": 0.0, "avg_logprob": -0.11306942319407047, "compression_ratio": 1.6391304347826088, "no_speech_prob": 0.0002867158327717334}, {"id": 196, "seek": 124470, "start": 1244.7, "end": 1252.46, "text": " of lists. So I can just quote a literal list or I can call a function called list. 3, 4, 5. I can also", "tokens": [50364, 295, 14511, 13, 407, 286, 393, 445, 6513, 257, 20411, 1329, 420, 286, 393, 818, 257, 2445, 1219, 1329, 13, 805, 11, 1017, 11, 1025, 13, 286, 393, 611, 50752], "temperature": 0.0, "avg_logprob": -0.18863759438196817, "compression_ratio": 1.5473251028806585, "no_speech_prob": 0.0010317489504814148}, {"id": 197, "seek": 124470, "start": 1255.02, "end": 1262.06, "text": " build up list-like structures using an operator called cons. Cons for construction. In fact,", "tokens": [50880, 1322, 493, 1329, 12, 4092, 9227, 1228, 364, 12973, 1219, 1014, 13, 6923, 337, 6435, 13, 682, 1186, 11, 51232], "temperature": 0.0, "avg_logprob": -0.18863759438196817, "compression_ratio": 1.5473251028806585, "no_speech_prob": 0.0010317489504814148}, {"id": 198, "seek": 124470, "start": 1262.06, "end": 1267.42, "text": " Dan Friedman, who is my advisor, wrote a very famous paper with David Wise in 1976 called", "tokens": [51232, 3394, 17605, 1601, 11, 567, 307, 452, 19161, 11, 4114, 257, 588, 4618, 3035, 365, 4389, 46933, 294, 33978, 1219, 51500], "temperature": 0.0, "avg_logprob": -0.18863759438196817, "compression_ratio": 1.5473251028806585, "no_speech_prob": 0.0010317489504814148}, {"id": 199, "seek": 124470, "start": 1267.42, "end": 1271.5, "text": " cons should not evaluate its arguments, which was one of the first papers on laziness like", "tokens": [51500, 1014, 820, 406, 13059, 1080, 12869, 11, 597, 390, 472, 295, 264, 700, 10577, 322, 19320, 1324, 411, 51704], "temperature": 0.0, "avg_logprob": -0.18863759438196817, "compression_ratio": 1.5473251028806585, "no_speech_prob": 0.0010317489504814148}, {"id": 200, "seek": 127150, "start": 1271.5, "end": 1275.9, "text": " you have in Haskell. And there was another paper by Henry Baker called cons should not cons its", "tokens": [50364, 291, 362, 294, 8646, 43723, 13, 400, 456, 390, 1071, 3035, 538, 11085, 25780, 1219, 1014, 820, 406, 1014, 1080, 50584], "temperature": 0.0, "avg_logprob": -0.1143717664353391, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0005525876767933369}, {"id": 201, "seek": 127150, "start": 1275.9, "end": 1284.38, "text": " arguments. That must have stayed up all night coming up with that one. So the typical way to", "tokens": [50584, 12869, 13, 663, 1633, 362, 9181, 493, 439, 1818, 1348, 493, 365, 300, 472, 13, 407, 264, 7476, 636, 281, 51008], "temperature": 0.0, "avg_logprob": -0.1143717664353391, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0005525876767933369}, {"id": 202, "seek": 127150, "start": 1284.38, "end": 1290.62, "text": " use cons is to cons some object onto an existing list. So we can cons five onto the empty list.", "tokens": [51008, 764, 1014, 307, 281, 1014, 512, 2657, 3911, 364, 6741, 1329, 13, 407, 321, 393, 1014, 1732, 3911, 264, 6707, 1329, 13, 51320], "temperature": 0.0, "avg_logprob": -0.1143717664353391, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0005525876767933369}, {"id": 203, "seek": 127150, "start": 1290.62, "end": 1295.98, "text": " Now we get a list containing five. And I can build up chains of things using cons. So I can", "tokens": [51320, 823, 321, 483, 257, 1329, 19273, 1732, 13, 400, 286, 393, 1322, 493, 12626, 295, 721, 1228, 1014, 13, 407, 286, 393, 51588], "temperature": 0.0, "avg_logprob": -0.1143717664353391, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0005525876767933369}, {"id": 204, "seek": 129598, "start": 1295.98, "end": 1301.82, "text": " cons six onto the list to get back from the cons five. Cons takes two arguments. And I can build", "tokens": [50364, 1014, 2309, 3911, 264, 1329, 281, 483, 646, 490, 264, 1014, 1732, 13, 6923, 2516, 732, 12869, 13, 400, 286, 393, 1322, 50656], "temperature": 0.0, "avg_logprob": -0.1354140646663713, "compression_ratio": 1.4848484848484849, "no_speech_prob": 0.0007552315946668386}, {"id": 205, "seek": 129598, "start": 1301.82, "end": 1310.6200000000001, "text": " these lists up. Okay? All right. So that's cons. And we've seen like the null test. Let me show", "tokens": [50656, 613, 14511, 493, 13, 1033, 30, 1057, 558, 13, 407, 300, 311, 1014, 13, 400, 321, 600, 1612, 411, 264, 18184, 1500, 13, 961, 385, 855, 51096], "temperature": 0.0, "avg_logprob": -0.1354140646663713, "compression_ratio": 1.4848484848484849, "no_speech_prob": 0.0007552315946668386}, {"id": 206, "seek": 129598, "start": 1310.6200000000001, "end": 1321.98, "text": " you how to make a choice. So I can use something like if, if five is null, then return six. Otherwise", "tokens": [51096, 291, 577, 281, 652, 257, 3922, 13, 407, 286, 393, 764, 746, 411, 498, 11, 498, 1732, 307, 18184, 11, 550, 2736, 2309, 13, 10328, 51664], "temperature": 0.0, "avg_logprob": -0.1354140646663713, "compression_ratio": 1.4848484848484849, "no_speech_prob": 0.0007552315946668386}, {"id": 207, "seek": 132198, "start": 1321.98, "end": 1327.58, "text": " return seven. So if has three sub expressions, we have a test expression, what's called the", "tokens": [50364, 2736, 3407, 13, 407, 498, 575, 1045, 1422, 15277, 11, 321, 362, 257, 1500, 6114, 11, 437, 311, 1219, 264, 50644], "temperature": 0.0, "avg_logprob": -0.10069610194156045, "compression_ratio": 1.7887323943661972, "no_speech_prob": 0.0007786599453538656}, {"id": 208, "seek": 132198, "start": 1327.58, "end": 1333.1, "text": " consequent expression, and then the alternative expression. So what would be the value of this", "tokens": [50644, 7242, 317, 6114, 11, 293, 550, 264, 8535, 6114, 13, 407, 437, 576, 312, 264, 2158, 295, 341, 50920], "temperature": 0.0, "avg_logprob": -0.10069610194156045, "compression_ratio": 1.7887323943661972, "no_speech_prob": 0.0007786599453538656}, {"id": 209, "seek": 132198, "start": 1333.1, "end": 1342.46, "text": " expression? Seven. Okay? All right. So that's one way to make a choice. And there are other ways.", "tokens": [50920, 6114, 30, 14868, 13, 1033, 30, 1057, 558, 13, 407, 300, 311, 472, 636, 281, 652, 257, 3922, 13, 400, 456, 366, 661, 2098, 13, 51388], "temperature": 0.0, "avg_logprob": -0.10069610194156045, "compression_ratio": 1.7887323943661972, "no_speech_prob": 0.0007786599453538656}, {"id": 210, "seek": 132198, "start": 1343.1, "end": 1348.94, "text": " Another way to make a choice is something called conned. And the reason, I'll use this notation,", "tokens": [51420, 3996, 636, 281, 652, 257, 3922, 307, 746, 1219, 416, 9232, 13, 400, 264, 1778, 11, 286, 603, 764, 341, 24657, 11, 51712], "temperature": 0.0, "avg_logprob": -0.10069610194156045, "compression_ratio": 1.7887323943661972, "no_speech_prob": 0.0007786599453538656}, {"id": 211, "seek": 134894, "start": 1349.8200000000002, "end": 1356.94, "text": " the reason that we have this conned operator, conditional operator, is that it may be that", "tokens": [50408, 264, 1778, 300, 321, 362, 341, 416, 9232, 12973, 11, 27708, 12973, 11, 307, 300, 309, 815, 312, 300, 50764], "temperature": 0.0, "avg_logprob": -0.12010647909981864, "compression_ratio": 1.53551912568306, "no_speech_prob": 0.00013549836876336485}, {"id": 212, "seek": 134894, "start": 1356.94, "end": 1363.18, "text": " we want to make lots of choices. So instead of having nested ifs, which gets annoying at some", "tokens": [50764, 321, 528, 281, 652, 3195, 295, 7994, 13, 407, 2602, 295, 1419, 15646, 292, 498, 82, 11, 597, 2170, 11304, 412, 512, 51076], "temperature": 0.0, "avg_logprob": -0.12010647909981864, "compression_ratio": 1.53551912568306, "no_speech_prob": 0.00013549836876336485}, {"id": 213, "seek": 134894, "start": 1363.18, "end": 1375.18, "text": " point, we can do something like this. Okay? What do you think this expression will evaluate too?", "tokens": [51076, 935, 11, 321, 393, 360, 746, 411, 341, 13, 1033, 30, 708, 360, 291, 519, 341, 6114, 486, 13059, 886, 30, 51676], "temperature": 0.0, "avg_logprob": -0.12010647909981864, "compression_ratio": 1.53551912568306, "no_speech_prob": 0.00013549836876336485}, {"id": 214, "seek": 137518, "start": 1376.14, "end": 1385.18, "text": " Eight. All right. Great. Awesome. And I'll show you a couple of the things. One is, you know,", "tokens": [50412, 17708, 13, 1057, 558, 13, 3769, 13, 10391, 13, 400, 286, 603, 855, 291, 257, 1916, 295, 264, 721, 13, 1485, 307, 11, 291, 458, 11, 50864], "temperature": 0.0, "avg_logprob": -0.14651976133647718, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.0006769600440748036}, {"id": 215, "seek": 137518, "start": 1385.18, "end": 1392.7, "text": " we can do things like addition or multiplication. Okay? So addition is like plus. It's actually", "tokens": [50864, 321, 393, 360, 721, 411, 4500, 420, 27290, 13, 1033, 30, 407, 4500, 307, 411, 1804, 13, 467, 311, 767, 51240], "temperature": 0.0, "avg_logprob": -0.14651976133647718, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.0006769600440748036}, {"id": 216, "seek": 137518, "start": 1392.7, "end": 1398.54, "text": " a function bound to a procedure that knows how to do addition. We also have multiplication. So I go,", "tokens": [51240, 257, 2445, 5472, 281, 257, 10747, 300, 3255, 577, 281, 360, 4500, 13, 492, 611, 362, 27290, 13, 407, 286, 352, 11, 51532], "temperature": 0.0, "avg_logprob": -0.14651976133647718, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.0006769600440748036}, {"id": 217, "seek": 139854, "start": 1398.54, "end": 1406.62, "text": " blah, blah. Right? And so I can deal with big dumps, arbitrarily large precision integers. So", "tokens": [50364, 12288, 11, 12288, 13, 1779, 30, 400, 370, 286, 393, 2028, 365, 955, 11430, 82, 11, 19071, 3289, 2416, 18356, 41674, 13, 407, 50768], "temperature": 0.0, "avg_logprob": -0.1282026031870901, "compression_ratio": 1.5181347150259068, "no_speech_prob": 0.00036816977080889046}, {"id": 218, "seek": 139854, "start": 1406.62, "end": 1415.82, "text": " that's multiplication. And I can also do things like define. I can define functions. I can define", "tokens": [50768, 300, 311, 27290, 13, 400, 286, 393, 611, 360, 721, 411, 6964, 13, 286, 393, 6964, 6828, 13, 286, 393, 6964, 51228], "temperature": 0.0, "avg_logprob": -0.1282026031870901, "compression_ratio": 1.5181347150259068, "no_speech_prob": 0.00036816977080889046}, {"id": 219, "seek": 139854, "start": 1415.82, "end": 1422.46, "text": " all sorts of things. I can give a name to something. I'll call this, I don't know. I just had a tarot", "tokens": [51228, 439, 7527, 295, 721, 13, 286, 393, 976, 257, 1315, 281, 746, 13, 286, 603, 818, 341, 11, 286, 500, 380, 458, 13, 286, 445, 632, 257, 3112, 310, 51560], "temperature": 0.0, "avg_logprob": -0.1282026031870901, "compression_ratio": 1.5181347150259068, "no_speech_prob": 0.00036816977080889046}, {"id": 220, "seek": 142246, "start": 1422.46, "end": 1430.54, "text": " milkshake. So define tarot to be, quote, good. And there's a symbol. And if I type tarot,", "tokens": [50364, 48773, 34593, 13, 407, 6964, 3112, 310, 281, 312, 11, 6513, 11, 665, 13, 400, 456, 311, 257, 5986, 13, 400, 498, 286, 2010, 3112, 310, 11, 50768], "temperature": 0.0, "avg_logprob": -0.09213665688391959, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.002469853963702917}, {"id": 221, "seek": 142246, "start": 1430.54, "end": 1435.98, "text": " then the variable gets looked up in something called an environment. And I get back the value", "tokens": [50768, 550, 264, 7006, 2170, 2956, 493, 294, 746, 1219, 364, 2823, 13, 400, 286, 483, 646, 264, 2158, 51040], "temperature": 0.0, "avg_logprob": -0.09213665688391959, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.002469853963702917}, {"id": 222, "seek": 142246, "start": 1435.98, "end": 1442.78, "text": " of that variable, which is a symbol, good. So define just gives a name to some value. I can give", "tokens": [51040, 295, 300, 7006, 11, 597, 307, 257, 5986, 11, 665, 13, 407, 6964, 445, 2709, 257, 1315, 281, 512, 2158, 13, 286, 393, 976, 51380], "temperature": 0.0, "avg_logprob": -0.09213665688391959, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.002469853963702917}, {"id": 223, "seek": 142246, "start": 1442.78, "end": 1449.3400000000001, "text": " other sorts of values if I want. It doesn't matter. And another concept is that of a function.", "tokens": [51380, 661, 7527, 295, 4190, 498, 286, 528, 13, 467, 1177, 380, 1871, 13, 400, 1071, 3410, 307, 300, 295, 257, 2445, 13, 51708], "temperature": 0.0, "avg_logprob": -0.09213665688391959, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.002469853963702917}, {"id": 224, "seek": 144934, "start": 1450.3, "end": 1455.26, "text": " And the reads are a procedure, technically. And the way I create a procedure is with this", "tokens": [50412, 400, 264, 15700, 366, 257, 10747, 11, 12120, 13, 400, 264, 636, 286, 1884, 257, 10747, 307, 365, 341, 50660], "temperature": 0.0, "avg_logprob": -0.12060301911597159, "compression_ratio": 1.6244541484716157, "no_speech_prob": 0.0005191242671571672}, {"id": 225, "seek": 144934, "start": 1455.26, "end": 1460.62, "text": " expression called lambda. You type it L-A-M-B-D-A, but I've got this fancy thing that turns it into", "tokens": [50660, 6114, 1219, 13607, 13, 509, 2010, 309, 441, 12, 32, 12, 44, 12, 33, 12, 35, 12, 32, 11, 457, 286, 600, 658, 341, 10247, 551, 300, 4523, 309, 666, 50928], "temperature": 0.0, "avg_logprob": -0.12060301911597159, "compression_ratio": 1.6244541484716157, "no_speech_prob": 0.0005191242671571672}, {"id": 226, "seek": 144934, "start": 1460.62, "end": 1468.54, "text": " a symbol. And what you do with lambda is you have a list of arguments. These are the formal", "tokens": [50928, 257, 5986, 13, 400, 437, 291, 360, 365, 13607, 307, 291, 362, 257, 1329, 295, 12869, 13, 1981, 366, 264, 9860, 51324], "temperature": 0.0, "avg_logprob": -0.12060301911597159, "compression_ratio": 1.6244541484716157, "no_speech_prob": 0.0005191242671571672}, {"id": 227, "seek": 144934, "start": 1468.54, "end": 1473.74, "text": " parameters to your procedure. And then you have a body. So this is lambda xx is the way it", "tokens": [51324, 9834, 281, 428, 10747, 13, 400, 550, 291, 362, 257, 1772, 13, 407, 341, 307, 13607, 2031, 87, 307, 264, 636, 309, 51584], "temperature": 0.0, "avg_logprob": -0.12060301911597159, "compression_ratio": 1.6244541484716157, "no_speech_prob": 0.0005191242671571672}, {"id": 228, "seek": 147374, "start": 1473.74, "end": 1478.38, "text": " pronounced it. And this is just going to return its argument, the value of its argument. So this", "tokens": [50364, 23155, 309, 13, 400, 341, 307, 445, 516, 281, 2736, 1080, 6770, 11, 264, 2158, 295, 1080, 6770, 13, 407, 341, 50596], "temperature": 0.0, "avg_logprob": -0.10560968789187344, "compression_ratio": 1.7568807339449541, "no_speech_prob": 0.009401051327586174}, {"id": 229, "seek": 147374, "start": 1478.38, "end": 1484.22, "text": " is the identity function, the value of the identity function. And we've already seen that you can", "tokens": [50596, 307, 264, 6575, 2445, 11, 264, 2158, 295, 264, 6575, 2445, 13, 400, 321, 600, 1217, 1612, 300, 291, 393, 50888], "temperature": 0.0, "avg_logprob": -0.10560968789187344, "compression_ratio": 1.7568807339449541, "no_speech_prob": 0.009401051327586174}, {"id": 230, "seek": 147374, "start": 1484.22, "end": 1491.58, "text": " write parentheses. And parentheses normally mean a procedure call. We're not specifically calling", "tokens": [50888, 2464, 34153, 13, 400, 34153, 5646, 914, 257, 10747, 818, 13, 492, 434, 406, 4682, 5141, 51256], "temperature": 0.0, "avg_logprob": -0.10560968789187344, "compression_ratio": 1.7568807339449541, "no_speech_prob": 0.009401051327586174}, {"id": 231, "seek": 147374, "start": 1491.58, "end": 1496.78, "text": " it, but that's the case unless we have what's called a special form in the first position,", "tokens": [51256, 309, 11, 457, 300, 311, 264, 1389, 5969, 321, 362, 437, 311, 1219, 257, 2121, 1254, 294, 264, 700, 2535, 11, 51516], "temperature": 0.0, "avg_logprob": -0.10560968789187344, "compression_ratio": 1.7568807339449541, "no_speech_prob": 0.009401051327586174}, {"id": 232, "seek": 149678, "start": 1496.78, "end": 1505.26, "text": " like quote or define, something like that. So I am going to apply that, the value of that", "tokens": [50364, 411, 6513, 420, 6964, 11, 746, 411, 300, 13, 407, 286, 669, 516, 281, 3079, 300, 11, 264, 2158, 295, 300, 50788], "temperature": 0.0, "avg_logprob": -0.09522977742281827, "compression_ratio": 1.6743119266055047, "no_speech_prob": 0.0014315894804894924}, {"id": 233, "seek": 149678, "start": 1506.3, "end": 1511.5, "text": " lambda expression, which we'll evaluate to a procedure, to the expression five. Five is an", "tokens": [50840, 13607, 6114, 11, 597, 321, 603, 13059, 281, 257, 10747, 11, 281, 264, 6114, 1732, 13, 9436, 307, 364, 51100], "temperature": 0.0, "avg_logprob": -0.09522977742281827, "compression_ratio": 1.6743119266055047, "no_speech_prob": 0.0014315894804894924}, {"id": 234, "seek": 149678, "start": 1511.5, "end": 1516.94, "text": " expression that evaluates to the value five. So we are starting to have the notion of expression", "tokens": [51100, 6114, 300, 6133, 1024, 281, 264, 2158, 1732, 13, 407, 321, 366, 2891, 281, 362, 264, 10710, 295, 6114, 51372], "temperature": 0.0, "avg_logprob": -0.09522977742281827, "compression_ratio": 1.6743119266055047, "no_speech_prob": 0.0014315894804894924}, {"id": 235, "seek": 149678, "start": 1516.94, "end": 1522.54, "text": " versus value. And I get back five. Through a mechanism that involves a number of steps,", "tokens": [51372, 5717, 2158, 13, 400, 286, 483, 646, 1732, 13, 8927, 257, 7513, 300, 11626, 257, 1230, 295, 4439, 11, 51652], "temperature": 0.0, "avg_logprob": -0.09522977742281827, "compression_ratio": 1.6743119266055047, "no_speech_prob": 0.0014315894804894924}, {"id": 236, "seek": 152254, "start": 1523.18, "end": 1529.58, "text": " we evaluate the argument expressions. There's something called the operator expression,", "tokens": [50396, 321, 13059, 264, 6770, 15277, 13, 821, 311, 746, 1219, 264, 12973, 6114, 11, 50716], "temperature": 0.0, "avg_logprob": -0.11014772302964154, "compression_ratio": 2.022222222222222, "no_speech_prob": 0.0006875822436995804}, {"id": 237, "seek": 152254, "start": 1529.58, "end": 1536.46, "text": " the rater. And the rand, the upper rand, we evaluate the operator that evaluates to a", "tokens": [50716, 264, 367, 771, 13, 400, 264, 367, 474, 11, 264, 6597, 367, 474, 11, 321, 13059, 264, 12973, 300, 6133, 1024, 281, 257, 51060], "temperature": 0.0, "avg_logprob": -0.11014772302964154, "compression_ratio": 2.022222222222222, "no_speech_prob": 0.0006875822436995804}, {"id": 238, "seek": 152254, "start": 1536.46, "end": 1543.34, "text": " procedure of one argument. We evaluate the rand expression that evaluates to itself in this", "tokens": [51060, 10747, 295, 472, 6770, 13, 492, 13059, 264, 367, 474, 6114, 300, 6133, 1024, 281, 2564, 294, 341, 51404], "temperature": 0.0, "avg_logprob": -0.11014772302964154, "compression_ratio": 2.022222222222222, "no_speech_prob": 0.0006875822436995804}, {"id": 239, "seek": 152254, "start": 1543.34, "end": 1549.74, "text": " case. And then we perform a procedure application. And we apply that procedure to the value of the", "tokens": [51404, 1389, 13, 400, 550, 321, 2042, 257, 10747, 3861, 13, 400, 321, 3079, 300, 10747, 281, 264, 2158, 295, 264, 51724], "temperature": 0.0, "avg_logprob": -0.11014772302964154, "compression_ratio": 2.022222222222222, "no_speech_prob": 0.0006875822436995804}, {"id": 240, "seek": 154974, "start": 1549.74, "end": 1555.18, "text": " argument. And we get back five in this case. Okay, so that's the mechanism that we're going to", "tokens": [50364, 6770, 13, 400, 321, 483, 646, 1732, 294, 341, 1389, 13, 1033, 11, 370, 300, 311, 264, 7513, 300, 321, 434, 516, 281, 50636], "temperature": 0.0, "avg_logprob": -0.11378633348565352, "compression_ratio": 1.5614035087719298, "no_speech_prob": 0.00013550867151934654}, {"id": 241, "seek": 154974, "start": 1555.18, "end": 1564.6200000000001, "text": " implement. And I can, of course, give a name to a function. I can only call it double.", "tokens": [50636, 4445, 13, 400, 286, 393, 11, 295, 1164, 11, 976, 257, 1315, 281, 257, 2445, 13, 286, 393, 787, 818, 309, 3834, 13, 51108], "temperature": 0.0, "avg_logprob": -0.11378633348565352, "compression_ratio": 1.5614035087719298, "no_speech_prob": 0.00013550867151934654}, {"id": 242, "seek": 154974, "start": 1569.82, "end": 1575.98, "text": " Okay, so now I have a body that's a little more interesting. And I can double my fun.", "tokens": [51368, 1033, 11, 370, 586, 286, 362, 257, 1772, 300, 311, 257, 707, 544, 1880, 13, 400, 286, 393, 3834, 452, 1019, 13, 51676], "temperature": 0.0, "avg_logprob": -0.11378633348565352, "compression_ratio": 1.5614035087719298, "no_speech_prob": 0.00013550867151934654}, {"id": 243, "seek": 157598, "start": 1576.46, "end": 1583.98, "text": " That doesn't work. The Haskellers are going to give me grief. But I could double five and get", "tokens": [50388, 663, 1177, 380, 589, 13, 440, 8646, 43723, 433, 366, 516, 281, 976, 385, 18998, 13, 583, 286, 727, 3834, 1732, 293, 483, 50764], "temperature": 0.0, "avg_logprob": -0.16735734939575195, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.00048777725896798074}, {"id": 244, "seek": 157598, "start": 1584.8600000000001, "end": 1591.98, "text": " two in binary. So you can double anything you want. And I can define all sorts of things. So", "tokens": [50808, 732, 294, 17434, 13, 407, 291, 393, 3834, 1340, 291, 528, 13, 400, 286, 393, 6964, 439, 7527, 295, 721, 13, 407, 51164], "temperature": 0.0, "avg_logprob": -0.16735734939575195, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.00048777725896798074}, {"id": 245, "seek": 157598, "start": 1591.98, "end": 1601.02, "text": " I can do things like define, define to be five. Right? Why is that a, oh, that's a great thing.", "tokens": [51164, 286, 393, 360, 721, 411, 6964, 11, 6964, 281, 312, 1732, 13, 1779, 30, 1545, 307, 300, 257, 11, 1954, 11, 300, 311, 257, 869, 551, 13, 51616], "temperature": 0.0, "avg_logprob": -0.16735734939575195, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.00048777725896798074}, {"id": 246, "seek": 160102, "start": 1601.58, "end": 1608.78, "text": " So I can do a lot more than that. I can change what lambda means and things like that. That's", "tokens": [50392, 407, 286, 393, 360, 257, 688, 544, 813, 300, 13, 286, 393, 1319, 437, 13607, 1355, 293, 721, 411, 300, 13, 663, 311, 50752], "temperature": 0.0, "avg_logprob": -0.09337048136859859, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.000969649467151612}, {"id": 247, "seek": 160102, "start": 1608.78, "end": 1614.3, "text": " where the real fun begins. So I'm not going to talk about that. That's for the next talk. But", "tokens": [50752, 689, 264, 957, 1019, 7338, 13, 407, 286, 478, 406, 516, 281, 751, 466, 300, 13, 663, 311, 337, 264, 958, 751, 13, 583, 51028], "temperature": 0.0, "avg_logprob": -0.09337048136859859, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.000969649467151612}, {"id": 248, "seek": 160102, "start": 1614.3, "end": 1623.66, "text": " I'm going to restart my scheme. Just saying, just saying, I could, I could fly solo with that one,", "tokens": [51028, 286, 478, 516, 281, 21022, 452, 12232, 13, 1449, 1566, 11, 445, 1566, 11, 286, 727, 11, 286, 727, 3603, 6944, 365, 300, 472, 11, 51496], "temperature": 0.0, "avg_logprob": -0.09337048136859859, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.000969649467151612}, {"id": 249, "seek": 160102, "start": 1623.66, "end": 1629.5, "text": " but I know how to do it. But I'm not going to do, you're not ready yet. You're not ready yet.", "tokens": [51496, 457, 286, 458, 577, 281, 360, 309, 13, 583, 286, 478, 406, 516, 281, 360, 11, 291, 434, 406, 1919, 1939, 13, 509, 434, 406, 1919, 1939, 13, 51788], "temperature": 0.0, "avg_logprob": -0.09337048136859859, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.000969649467151612}, {"id": 250, "seek": 163102, "start": 1631.9, "end": 1639.5, "text": " Okay. So, so now you know scheme. Okay, now you, well, you're joking, or you think,", "tokens": [50408, 1033, 13, 407, 11, 370, 586, 291, 458, 12232, 13, 1033, 11, 586, 291, 11, 731, 11, 291, 434, 17396, 11, 420, 291, 519, 11, 50788], "temperature": 0.0, "avg_logprob": -0.1844420631726583, "compression_ratio": 1.6711711711711712, "no_speech_prob": 0.0001488082343712449}, {"id": 251, "seek": 163102, "start": 1640.06, "end": 1643.9, "text": " you think I'm joking, but that's basically all you need. Okay. There's one other thing I'm going", "tokens": [50816, 291, 519, 286, 478, 17396, 11, 457, 300, 311, 1936, 439, 291, 643, 13, 1033, 13, 821, 311, 472, 661, 551, 286, 478, 516, 51008], "temperature": 0.0, "avg_logprob": -0.1844420631726583, "compression_ratio": 1.6711711711711712, "no_speech_prob": 0.0001488082343712449}, {"id": 252, "seek": 163102, "start": 1643.9, "end": 1650.3799999999999, "text": " to talk about or show you very quickly. That's not technically built into scheme, but it's easy", "tokens": [51008, 281, 751, 466, 420, 855, 291, 588, 2661, 13, 663, 311, 406, 12120, 3094, 666, 12232, 11, 457, 309, 311, 1858, 51332], "temperature": 0.0, "avg_logprob": -0.1844420631726583, "compression_ratio": 1.6711711711711712, "no_speech_prob": 0.0001488082343712449}, {"id": 253, "seek": 163102, "start": 1650.3799999999999, "end": 1655.9, "text": " to add because scheme houses very powerful macro system that allows you to extend the language", "tokens": [51332, 281, 909, 570, 12232, 8078, 588, 4005, 18887, 1185, 300, 4045, 291, 281, 10101, 264, 2856, 51608], "temperature": 0.0, "avg_logprob": -0.1844420631726583, "compression_ratio": 1.6711711711711712, "no_speech_prob": 0.0001488082343712449}, {"id": 254, "seek": 165590, "start": 1655.9, "end": 1661.3400000000001, "text": " in different ways. And so what I'm going to do is I'm going to load a macro for pattern matching,", "tokens": [50364, 294, 819, 2098, 13, 400, 370, 437, 286, 478, 516, 281, 360, 307, 286, 478, 516, 281, 3677, 257, 18887, 337, 5102, 14324, 11, 50636], "temperature": 0.0, "avg_logprob": -0.09565652999202762, "compression_ratio": 1.8852459016393444, "no_speech_prob": 0.0016477714525535703}, {"id": 255, "seek": 165590, "start": 1661.3400000000001, "end": 1668.22, "text": " something called P match. And this is just one of many systems that allow you to do pattern", "tokens": [50636, 746, 1219, 430, 2995, 13, 400, 341, 307, 445, 472, 295, 867, 3652, 300, 2089, 291, 281, 360, 5102, 50980], "temperature": 0.0, "avg_logprob": -0.09565652999202762, "compression_ratio": 1.8852459016393444, "no_speech_prob": 0.0016477714525535703}, {"id": 256, "seek": 165590, "start": 1668.22, "end": 1674.7, "text": " matching. And so basically P match is similar in spirit to our cond, except now we are going", "tokens": [50980, 14324, 13, 400, 370, 1936, 430, 2995, 307, 2531, 294, 3797, 281, 527, 2224, 11, 3993, 586, 321, 366, 516, 51304], "temperature": 0.0, "avg_logprob": -0.09565652999202762, "compression_ratio": 1.8852459016393444, "no_speech_prob": 0.0016477714525535703}, {"id": 257, "seek": 165590, "start": 1674.7, "end": 1679.5800000000002, "text": " to match against an expression. So I can say, we're going to match against list three, four.", "tokens": [51304, 281, 2995, 1970, 364, 6114, 13, 407, 286, 393, 584, 11, 321, 434, 516, 281, 2995, 1970, 1329, 1045, 11, 1451, 13, 51548], "temperature": 0.0, "avg_logprob": -0.09565652999202762, "compression_ratio": 1.8852459016393444, "no_speech_prob": 0.0016477714525535703}, {"id": 258, "seek": 165590, "start": 1680.3000000000002, "end": 1684.6200000000001, "text": " And now we can have just like with a cond, different pattern or different expression", "tokens": [51584, 400, 586, 321, 393, 362, 445, 411, 365, 257, 2224, 11, 819, 5102, 420, 819, 6114, 51800], "temperature": 0.0, "avg_logprob": -0.09565652999202762, "compression_ratio": 1.8852459016393444, "no_speech_prob": 0.0016477714525535703}, {"id": 259, "seek": 168462, "start": 1684.62, "end": 1690.1399999999999, "text": " or different clauses, but now we're going to match against the pattern. So I could say", "tokens": [50364, 420, 819, 49072, 11, 457, 586, 321, 434, 516, 281, 2995, 1970, 264, 5102, 13, 407, 286, 727, 584, 50640], "temperature": 0.0, "avg_logprob": -0.11357368331357658, "compression_ratio": 1.7313432835820894, "no_speech_prob": 0.00029574078507721424}, {"id": 260, "seek": 168462, "start": 1692.3, "end": 1698.4599999999998, "text": " I have a pattern that matches against the list of two arguments. And these commas,", "tokens": [50748, 286, 362, 257, 5102, 300, 10676, 1970, 264, 1329, 295, 732, 12869, 13, 400, 613, 800, 296, 11, 51056], "temperature": 0.0, "avg_logprob": -0.11357368331357658, "compression_ratio": 1.7313432835820894, "no_speech_prob": 0.00029574078507721424}, {"id": 261, "seek": 168462, "start": 1699.1799999999998, "end": 1703.1, "text": " I'm not going to really get into the details of what the commas means syntactically,", "tokens": [51092, 286, 478, 406, 516, 281, 534, 483, 666, 264, 4365, 295, 437, 264, 800, 296, 1355, 23980, 578, 984, 11, 51288], "temperature": 0.0, "avg_logprob": -0.11357368331357658, "compression_ratio": 1.7313432835820894, "no_speech_prob": 0.00029574078507721424}, {"id": 262, "seek": 168462, "start": 1703.1, "end": 1708.62, "text": " but basically you can think that this list of two elements is getting pattern matched against", "tokens": [51288, 457, 1936, 291, 393, 519, 300, 341, 1329, 295, 732, 4959, 307, 1242, 5102, 21447, 1970, 51564], "temperature": 0.0, "avg_logprob": -0.11357368331357658, "compression_ratio": 1.7313432835820894, "no_speech_prob": 0.00029574078507721424}, {"id": 263, "seek": 170862, "start": 1708.62, "end": 1715.02, "text": " the list we get back, the list three, four. So the x will be associated with or bound to three,", "tokens": [50364, 264, 1329, 321, 483, 646, 11, 264, 1329, 1045, 11, 1451, 13, 407, 264, 2031, 486, 312, 6615, 365, 420, 5472, 281, 1045, 11, 50684], "temperature": 0.0, "avg_logprob": -0.1314244317536307, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.0025086505338549614}, {"id": 264, "seek": 170862, "start": 1715.02, "end": 1723.7399999999998, "text": " the y will be bound to four. And then on the right hand side, we can use those x's and y's.", "tokens": [50684, 264, 288, 486, 312, 5472, 281, 1451, 13, 400, 550, 322, 264, 558, 1011, 1252, 11, 321, 393, 764, 729, 2031, 311, 293, 288, 311, 13, 51120], "temperature": 0.0, "avg_logprob": -0.1314244317536307, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.0025086505338549614}, {"id": 265, "seek": 170862, "start": 1724.3799999999999, "end": 1730.78, "text": " And sure enough, we get back seven. So that's what P match does. If you haven't seen pattern", "tokens": [51152, 400, 988, 1547, 11, 321, 483, 646, 3407, 13, 407, 300, 311, 437, 430, 2995, 775, 13, 759, 291, 2378, 380, 1612, 5102, 51472], "temperature": 0.0, "avg_logprob": -0.1314244317536307, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.0025086505338549614}, {"id": 266, "seek": 170862, "start": 1730.78, "end": 1735.9799999999998, "text": " matching before, it's very powerful, especially in conjunction with a form of quotation in scheme", "tokens": [51472, 14324, 949, 11, 309, 311, 588, 4005, 11, 2318, 294, 27482, 365, 257, 1254, 295, 47312, 294, 12232, 51732], "temperature": 0.0, "avg_logprob": -0.1314244317536307, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.0025086505338549614}, {"id": 267, "seek": 173598, "start": 1736.06, "end": 1740.7, "text": " called quasi quotation or back quote. That's really what's going on. If you know scheme,", "tokens": [50368, 1219, 20954, 47312, 420, 646, 6513, 13, 663, 311, 534, 437, 311, 516, 322, 13, 759, 291, 458, 12232, 11, 50600], "temperature": 0.0, "avg_logprob": -0.10836910448576274, "compression_ratio": 1.6210045662100456, "no_speech_prob": 0.0005790544673800468}, {"id": 268, "seek": 173598, "start": 1740.7, "end": 1746.46, "text": " there's an implicit back quote here. And those commas are called unquote.", "tokens": [50600, 456, 311, 364, 26947, 646, 6513, 510, 13, 400, 729, 800, 296, 366, 1219, 37557, 13, 50888], "temperature": 0.0, "avg_logprob": -0.10836910448576274, "compression_ratio": 1.6210045662100456, "no_speech_prob": 0.0005790544673800468}, {"id": 269, "seek": 173598, "start": 1747.5, "end": 1754.38, "text": " All right. So now we know basically everything we need to write an interpreter. So let's do that.", "tokens": [50940, 1057, 558, 13, 407, 586, 321, 458, 1936, 1203, 321, 643, 281, 2464, 364, 34132, 13, 407, 718, 311, 360, 300, 13, 51284], "temperature": 0.0, "avg_logprob": -0.10836910448576274, "compression_ratio": 1.6210045662100456, "no_speech_prob": 0.0005790544673800468}, {"id": 270, "seek": 173598, "start": 1756.54, "end": 1763.74, "text": " All right. So let me go back to my file here. So I'll load my P match. And I can put this code", "tokens": [51392, 1057, 558, 13, 407, 718, 385, 352, 646, 281, 452, 3991, 510, 13, 407, 286, 603, 3677, 452, 430, 2995, 13, 400, 286, 393, 829, 341, 3089, 51752], "temperature": 0.0, "avg_logprob": -0.10836910448576274, "compression_ratio": 1.6210045662100456, "no_speech_prob": 0.0005790544673800468}, {"id": 271, "seek": 176374, "start": 1763.98, "end": 1772.06, "text": " online if people want to see it. All right. Okay. So one thing that we need to", "tokens": [50376, 2950, 498, 561, 528, 281, 536, 309, 13, 1057, 558, 13, 1033, 13, 407, 472, 551, 300, 321, 643, 281, 50780], "temperature": 0.0, "avg_logprob": -0.16163636677300752, "compression_ratio": 1.4390243902439024, "no_speech_prob": 0.0012061120942234993}, {"id": 272, "seek": 176374, "start": 1773.9, "end": 1779.42, "text": " do is, you know, decide on the name for our interpreter. That's the hard part, right?", "tokens": [50872, 360, 307, 11, 291, 458, 11, 4536, 322, 264, 1315, 337, 527, 34132, 13, 663, 311, 264, 1152, 644, 11, 558, 30, 51148], "temperature": 0.0, "avg_logprob": -0.16163636677300752, "compression_ratio": 1.4390243902439024, "no_speech_prob": 0.0012061120942234993}, {"id": 273, "seek": 176374, "start": 1780.06, "end": 1786.3, "text": " So names are hard. What would be a good name for interpreter? Fitz Roy.", "tokens": [51180, 407, 5288, 366, 1152, 13, 708, 576, 312, 257, 665, 1315, 337, 34132, 30, 37815, 8751, 13, 51492], "temperature": 0.0, "avg_logprob": -0.16163636677300752, "compression_ratio": 1.4390243902439024, "no_speech_prob": 0.0012061120942234993}, {"id": 274, "seek": 178630, "start": 1786.3, "end": 1792.78, "text": " Okay. Define. Fitz Roy. How do you spell that?", "tokens": [50364, 1033, 13, 9548, 533, 13, 37815, 8751, 13, 1012, 360, 291, 9827, 300, 30, 50688], "temperature": 0.0, "avg_logprob": -0.23078551534879005, "compression_ratio": 1.2714285714285714, "no_speech_prob": 0.0033753211610019207}, {"id": 275, "seek": 178630, "start": 1795.4199999999998, "end": 1803.4199999999998, "text": " All right. So we have a name. This is our life now. And thank you. Derailed us all.", "tokens": [50820, 1057, 558, 13, 407, 321, 362, 257, 1315, 13, 639, 307, 527, 993, 586, 13, 400, 1309, 291, 13, 5618, 24731, 505, 439, 13, 51220], "temperature": 0.0, "avg_logprob": -0.23078551534879005, "compression_ratio": 1.2714285714285714, "no_speech_prob": 0.0033753211610019207}, {"id": 276, "seek": 178630, "start": 1804.7, "end": 1808.1399999999999, "text": " So, well, what do you think I should type next?", "tokens": [51284, 407, 11, 731, 11, 437, 360, 291, 519, 286, 820, 2010, 958, 30, 51456], "temperature": 0.0, "avg_logprob": -0.23078551534879005, "compression_ratio": 1.2714285714285714, "no_speech_prob": 0.0033753211610019207}, {"id": 277, "seek": 180814, "start": 1808.46, "end": 1819.66, "text": " P match, almost. We're not quite right. The arguments. So we need to define a function.", "tokens": [50380, 430, 2995, 11, 1920, 13, 492, 434, 406, 1596, 558, 13, 440, 12869, 13, 407, 321, 643, 281, 6964, 257, 2445, 13, 50940], "temperature": 0.0, "avg_logprob": -0.12997513432656566, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.0006069824448786676}, {"id": 278, "seek": 180814, "start": 1819.66, "end": 1824.14, "text": " The procedure is going to do something. So I have to type lambda. That's a good thing.", "tokens": [50940, 440, 10747, 307, 516, 281, 360, 746, 13, 407, 286, 362, 281, 2010, 13607, 13, 663, 311, 257, 665, 551, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12997513432656566, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.0006069824448786676}, {"id": 279, "seek": 180814, "start": 1824.8600000000001, "end": 1831.5, "text": " When in doubt, the answer is lambda, right? So we have a lambda expression that's going to take", "tokens": [51200, 1133, 294, 6385, 11, 264, 1867, 307, 13607, 11, 558, 30, 407, 321, 362, 257, 13607, 6114, 300, 311, 516, 281, 747, 51532], "temperature": 0.0, "avg_logprob": -0.12997513432656566, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.0006069824448786676}, {"id": 280, "seek": 180814, "start": 1831.5, "end": 1836.7800000000002, "text": " some arguments. Okay. So if we looked at our interpreter here when we were writing stuff", "tokens": [51532, 512, 12869, 13, 1033, 13, 407, 498, 321, 2956, 412, 527, 34132, 510, 562, 321, 645, 3579, 1507, 51796], "temperature": 0.0, "avg_logprob": -0.12997513432656566, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.0006069824448786676}, {"id": 281, "seek": 183678, "start": 1836.78, "end": 1845.1, "text": " like plus three, four, this is basically an interpreter. Technically, it's not an", "tokens": [50364, 411, 1804, 1045, 11, 1451, 11, 341, 307, 1936, 364, 34132, 13, 42494, 11, 309, 311, 406, 364, 50780], "temperature": 0.0, "avg_logprob": -0.15958881378173828, "compression_ratio": 1.567251461988304, "no_speech_prob": 0.0004043311928398907}, {"id": 282, "seek": 183678, "start": 1845.1, "end": 1852.3, "text": " interpreter. That's a form of evaluation. But it's an evaluator. So if you look over there,", "tokens": [50780, 34132, 13, 663, 311, 257, 1254, 295, 13344, 13, 583, 309, 311, 364, 6133, 1639, 13, 407, 498, 291, 574, 670, 456, 11, 51140], "temperature": 0.0, "avg_logprob": -0.15958881378173828, "compression_ratio": 1.567251461988304, "no_speech_prob": 0.0004043311928398907}, {"id": 283, "seek": 183678, "start": 1852.3, "end": 1859.1, "text": " we have an expression coming in. And we evaluate the expression to get a value back. So we can", "tokens": [51140, 321, 362, 364, 6114, 1348, 294, 13, 400, 321, 13059, 264, 6114, 281, 483, 257, 2158, 646, 13, 407, 321, 393, 51480], "temperature": 0.0, "avg_logprob": -0.15958881378173828, "compression_ratio": 1.567251461988304, "no_speech_prob": 0.0004043311928398907}, {"id": 284, "seek": 185910, "start": 1859.1, "end": 1865.5, "text": " have an expression. That's a good name. And I'm going to call this eval expression. Okay.", "tokens": [50364, 362, 364, 6114, 13, 663, 311, 257, 665, 1315, 13, 400, 286, 478, 516, 281, 818, 341, 1073, 304, 6114, 13, 1033, 13, 50684], "temperature": 0.0, "avg_logprob": -0.13776733450693626, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.006189242005348206}, {"id": 285, "seek": 185910, "start": 1866.3799999999999, "end": 1873.5, "text": " Fitz Roy would have been fine. But this is a val expert. It's important as a safety tip", "tokens": [50728, 37815, 8751, 576, 362, 668, 2489, 13, 583, 341, 307, 257, 1323, 5844, 13, 467, 311, 1021, 382, 257, 4514, 4125, 51084], "temperature": 0.0, "avg_logprob": -0.13776733450693626, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.006189242005348206}, {"id": 286, "seek": 185910, "start": 1873.5, "end": 1881.58, "text": " to not call that argument exp. Now, why would that be? Yeah. Because scheme has an exponential", "tokens": [51084, 281, 406, 818, 300, 6770, 1278, 13, 823, 11, 983, 576, 300, 312, 30, 865, 13, 1436, 12232, 575, 364, 21510, 51488], "temperature": 0.0, "avg_logprob": -0.13776733450693626, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.006189242005348206}, {"id": 287, "seek": 188158, "start": 1881.6599999999999, "end": 1889.74, "text": " function built in called exp. And if you type, you get very interesting errors if you do it wrong.", "tokens": [50368, 2445, 3094, 294, 1219, 1278, 13, 400, 498, 291, 2010, 11, 291, 483, 588, 1880, 13603, 498, 291, 360, 309, 2085, 13, 50772], "temperature": 0.0, "avg_logprob": -0.18390301127492645, "compression_ratio": 1.5185185185185186, "no_speech_prob": 0.006900222972035408}, {"id": 288, "seek": 188158, "start": 1889.74, "end": 1899.34, "text": " So I call it expert. All right. Yeah. If you call your function eval, hilarity, may ensue.", "tokens": [50772, 407, 286, 818, 309, 5844, 13, 1057, 558, 13, 865, 13, 759, 291, 818, 428, 2445, 1073, 304, 11, 18661, 507, 11, 815, 3489, 622, 13, 51252], "temperature": 0.0, "avg_logprob": -0.18390301127492645, "compression_ratio": 1.5185185185185186, "no_speech_prob": 0.006900222972035408}, {"id": 289, "seek": 188158, "start": 1900.62, "end": 1909.5, "text": " You can always restart. Now. Now it's time for P match. And what are we going to P match against?", "tokens": [51316, 509, 393, 1009, 21022, 13, 823, 13, 823, 309, 311, 565, 337, 430, 2995, 13, 400, 437, 366, 321, 516, 281, 430, 2995, 1970, 30, 51760], "temperature": 0.0, "avg_logprob": -0.18390301127492645, "compression_ratio": 1.5185185185185186, "no_speech_prob": 0.006900222972035408}, {"id": 290, "seek": 190950, "start": 1910.38, "end": 1917.1, "text": " Well, guess what? We don't have a lot of choice. How about expert? All right. So we're going to", "tokens": [50408, 1042, 11, 2041, 437, 30, 492, 500, 380, 362, 257, 688, 295, 3922, 13, 1012, 466, 5844, 30, 1057, 558, 13, 407, 321, 434, 516, 281, 50744], "temperature": 0.0, "avg_logprob": -0.14452939820521085, "compression_ratio": 1.602510460251046, "no_speech_prob": 0.0005883407429791987}, {"id": 291, "seek": 190950, "start": 1917.1, "end": 1923.5, "text": " P match against. See, it writes itself. Okay. So what sort of expressions do we want to have", "tokens": [50744, 430, 2995, 1970, 13, 3008, 11, 309, 13657, 2564, 13, 1033, 13, 407, 437, 1333, 295, 15277, 360, 321, 528, 281, 362, 51064], "temperature": 0.0, "avg_logprob": -0.14452939820521085, "compression_ratio": 1.602510460251046, "no_speech_prob": 0.0005883407429791987}, {"id": 292, "seek": 190950, "start": 1923.5, "end": 1929.66, "text": " in our language? How about numbers? Number is a good thing to be able to evaluate. We had five.", "tokens": [51064, 294, 527, 2856, 30, 1012, 466, 3547, 30, 5118, 307, 257, 665, 551, 281, 312, 1075, 281, 13059, 13, 492, 632, 1732, 13, 51372], "temperature": 0.0, "avg_logprob": -0.14452939820521085, "compression_ratio": 1.602510460251046, "no_speech_prob": 0.0005883407429791987}, {"id": 293, "seek": 190950, "start": 1929.66, "end": 1937.5, "text": " That was our first scheme program. So we're going to evaluate five. So the way that you write that", "tokens": [51372, 663, 390, 527, 700, 12232, 1461, 13, 407, 321, 434, 516, 281, 13059, 1732, 13, 407, 264, 636, 300, 291, 2464, 300, 51764], "temperature": 0.0, "avg_logprob": -0.14452939820521085, "compression_ratio": 1.602510460251046, "no_speech_prob": 0.0005883407429791987}, {"id": 294, "seek": 193750, "start": 1937.5, "end": 1945.02, "text": " pattern is that comma in will match against anything. And I mean anything. So that's no good.", "tokens": [50364, 5102, 307, 300, 22117, 294, 486, 2995, 1970, 1340, 13, 400, 286, 914, 1340, 13, 407, 300, 311, 572, 665, 13, 50740], "temperature": 0.0, "avg_logprob": -0.1299742432527764, "compression_ratio": 1.6761904761904762, "no_speech_prob": 0.0008826181292533875}, {"id": 295, "seek": 193750, "start": 1945.66, "end": 1951.42, "text": " We have to add something called a guard where we can add a predicate. And so the predicate", "tokens": [50772, 492, 362, 281, 909, 746, 1219, 257, 6290, 689, 321, 393, 909, 257, 3852, 8700, 13, 400, 370, 264, 3852, 8700, 51060], "temperature": 0.0, "avg_logprob": -0.1299742432527764, "compression_ratio": 1.6761904761904762, "no_speech_prob": 0.0008826181292533875}, {"id": 296, "seek": 193750, "start": 1952.62, "end": 1959.34, "text": " is basically part of this matching process. So if the pattern matches against expert,", "tokens": [51120, 307, 1936, 644, 295, 341, 14324, 1399, 13, 407, 498, 264, 5102, 10676, 1970, 5844, 11, 51456], "temperature": 0.0, "avg_logprob": -0.1299742432527764, "compression_ratio": 1.6761904761904762, "no_speech_prob": 0.0008826181292533875}, {"id": 297, "seek": 193750, "start": 1959.34, "end": 1963.9, "text": " then additionally, the guard has to return a true value. That is any other value,", "tokens": [51456, 550, 43181, 11, 264, 6290, 575, 281, 2736, 257, 2074, 2158, 13, 663, 307, 604, 661, 2158, 11, 51684], "temperature": 0.0, "avg_logprob": -0.1299742432527764, "compression_ratio": 1.6761904761904762, "no_speech_prob": 0.0008826181292533875}, {"id": 298, "seek": 196390, "start": 1964.46, "end": 1968.8600000000001, "text": " the value, anything other than the hash F in order for the entire pattern to be", "tokens": [50392, 264, 2158, 11, 1340, 661, 813, 264, 22019, 479, 294, 1668, 337, 264, 2302, 5102, 281, 312, 50612], "temperature": 0.0, "avg_logprob": -0.17028245618266444, "compression_ratio": 1.5429864253393666, "no_speech_prob": 0.0006875214166939259}, {"id": 299, "seek": 196390, "start": 1968.8600000000001, "end": 1973.02, "text": " considered matching. And in which case, we try the right hand side. Yes.", "tokens": [50612, 4888, 14324, 13, 400, 294, 597, 1389, 11, 321, 853, 264, 558, 1011, 1252, 13, 1079, 13, 50820], "temperature": 0.0, "avg_logprob": -0.17028245618266444, "compression_ratio": 1.5429864253393666, "no_speech_prob": 0.0006875214166939259}, {"id": 300, "seek": 196390, "start": 1979.8200000000002, "end": 1986.3000000000002, "text": " We could, we could totally use a con here. And in that case, we could just have, you know,", "tokens": [51160, 492, 727, 11, 321, 727, 3879, 764, 257, 416, 510, 13, 400, 294, 300, 1389, 11, 321, 727, 445, 362, 11, 291, 458, 11, 51484], "temperature": 0.0, "avg_logprob": -0.17028245618266444, "compression_ratio": 1.5429864253393666, "no_speech_prob": 0.0006875214166939259}, {"id": 301, "seek": 196390, "start": 1986.3000000000002, "end": 1991.26, "text": " the number question mark of N, right? So right now it's not really paying for itself. It's a lot,", "tokens": [51484, 264, 1230, 1168, 1491, 295, 426, 11, 558, 30, 407, 558, 586, 309, 311, 406, 534, 6229, 337, 2564, 13, 467, 311, 257, 688, 11, 51732], "temperature": 0.0, "avg_logprob": -0.17028245618266444, "compression_ratio": 1.5429864253393666, "no_speech_prob": 0.0006875214166939259}, {"id": 302, "seek": 199126, "start": 1991.34, "end": 1995.34, "text": " a lot more mechanism than we need. But when we start getting the things like lambda", "tokens": [50368, 257, 688, 544, 7513, 813, 321, 643, 13, 583, 562, 321, 722, 1242, 264, 721, 411, 13607, 50568], "temperature": 0.0, "avg_logprob": -0.14201763096977682, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.001000182586722076}, {"id": 303, "seek": 199126, "start": 1995.34, "end": 2000.22, "text": " that have more structure, we could do, that's a very good question. We don't need P match.", "tokens": [50568, 300, 362, 544, 3877, 11, 321, 727, 360, 11, 300, 311, 257, 588, 665, 1168, 13, 492, 500, 380, 643, 430, 2995, 13, 50812], "temperature": 0.0, "avg_logprob": -0.14201763096977682, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.001000182586722076}, {"id": 304, "seek": 199126, "start": 2000.22, "end": 2004.14, "text": " Okay. This should be very clear. We could do everything with car. Oh, sorry. Did I talk about", "tokens": [50812, 1033, 13, 639, 820, 312, 588, 1850, 13, 492, 727, 360, 1203, 365, 1032, 13, 876, 11, 2597, 13, 2589, 286, 751, 466, 51008], "temperature": 0.0, "avg_logprob": -0.14201763096977682, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.001000182586722076}, {"id": 305, "seek": 199126, "start": 2004.14, "end": 2008.3, "text": " car? Well, we'll talk about car in a minute, maybe. Maybe, maybe we can avoid talking about car.", "tokens": [51008, 1032, 30, 1042, 11, 321, 603, 751, 466, 1032, 294, 257, 3456, 11, 1310, 13, 2704, 11, 1310, 321, 393, 5042, 1417, 466, 1032, 13, 51216], "temperature": 0.0, "avg_logprob": -0.14201763096977682, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.001000182586722076}, {"id": 306, "seek": 199126, "start": 2009.02, "end": 2015.02, "text": " We'll see. There's like a historical accident that involves some of the names and scheme", "tokens": [51252, 492, 603, 536, 13, 821, 311, 411, 257, 8584, 6398, 300, 11626, 512, 295, 264, 5288, 293, 12232, 51552], "temperature": 0.0, "avg_logprob": -0.14201763096977682, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.001000182586722076}, {"id": 307, "seek": 199126, "start": 2015.02, "end": 2020.3799999999999, "text": " that have not yet been corrected intentionally. But we don't talk about that. So", "tokens": [51552, 300, 362, 406, 1939, 668, 31687, 22062, 13, 583, 321, 500, 380, 751, 466, 300, 13, 407, 51820], "temperature": 0.0, "avg_logprob": -0.14201763096977682, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.001000182586722076}, {"id": 308, "seek": 202126, "start": 2021.42, "end": 2025.58, "text": " anyway, so we're, we're going to use P match for reasons we'll see in a minute.", "tokens": [50372, 4033, 11, 370, 321, 434, 11, 321, 434, 516, 281, 764, 430, 2995, 337, 4112, 321, 603, 536, 294, 257, 3456, 13, 50580], "temperature": 0.0, "avg_logprob": -0.12456293939386756, "compression_ratio": 1.599056603773585, "no_speech_prob": 0.00017950621258933097}, {"id": 309, "seek": 202126, "start": 2025.58, "end": 2029.42, "text": " We don't have to. So what do you think a number should evaluate to?", "tokens": [50580, 492, 500, 380, 362, 281, 13, 407, 437, 360, 291, 519, 257, 1230, 820, 13059, 281, 30, 50772], "temperature": 0.0, "avg_logprob": -0.12456293939386756, "compression_ratio": 1.599056603773585, "no_speech_prob": 0.00017950621258933097}, {"id": 310, "seek": 202126, "start": 2031.18, "end": 2037.5, "text": " It's self. Okay. Sounds good. So we'll just write down N. So now we have an interpreter. So let's try it.", "tokens": [50860, 467, 311, 2698, 13, 1033, 13, 14576, 665, 13, 407, 321, 603, 445, 2464, 760, 426, 13, 407, 586, 321, 362, 364, 34132, 13, 407, 718, 311, 853, 309, 13, 51176], "temperature": 0.0, "avg_logprob": -0.12456293939386756, "compression_ratio": 1.599056603773585, "no_speech_prob": 0.00017950621258933097}, {"id": 311, "seek": 202126, "start": 2040.54, "end": 2045.58, "text": " Well, you know, I don't have that much time. Okay. So we're going to load this thing.", "tokens": [51328, 1042, 11, 291, 458, 11, 286, 500, 380, 362, 300, 709, 565, 13, 1033, 13, 407, 321, 434, 516, 281, 3677, 341, 551, 13, 51580], "temperature": 0.0, "avg_logprob": -0.12456293939386756, "compression_ratio": 1.599056603773585, "no_speech_prob": 0.00017950621258933097}, {"id": 312, "seek": 204558, "start": 2046.54, "end": 2060.14, "text": " Uh, interp.scm. Okay. And now we can test it. Eval expert. And all right. Someone give me a nice", "tokens": [50412, 4019, 11, 728, 79, 13, 4417, 76, 13, 1033, 13, 400, 586, 321, 393, 1500, 309, 13, 462, 3337, 5844, 13, 400, 439, 558, 13, 8734, 976, 385, 257, 1481, 51092], "temperature": 0.0, "avg_logprob": -0.3176461235951569, "compression_ratio": 1.2837837837837838, "no_speech_prob": 0.0005883624544367194}, {"id": 313, "seek": 204558, "start": 2060.14, "end": 2068.2999999999997, "text": " expression to evaluate. Five. You're, you will go far. But that's the wrong answer. The right", "tokens": [51092, 6114, 281, 13059, 13, 9436, 13, 509, 434, 11, 291, 486, 352, 1400, 13, 583, 300, 311, 264, 2085, 1867, 13, 440, 558, 51500], "temperature": 0.0, "avg_logprob": -0.3176461235951569, "compression_ratio": 1.2837837837837838, "no_speech_prob": 0.0005883624544367194}, {"id": 314, "seek": 206830, "start": 2068.3, "end": 2074.78, "text": " answer is quote of five, because we want to make sure that whatever expression we pass in", "tokens": [50364, 1867, 307, 6513, 295, 1732, 11, 570, 321, 528, 281, 652, 988, 300, 2035, 6114, 321, 1320, 294, 50688], "temperature": 0.0, "avg_logprob": -0.12314595778783162, "compression_ratio": 1.538152610441767, "no_speech_prob": 0.007814853452146053}, {"id": 315, "seek": 206830, "start": 2075.6600000000003, "end": 2084.1400000000003, "text": " is not evaluated by scheme. A classic error. Let me show you. Well, our interpreter works so well", "tokens": [50732, 307, 406, 25509, 538, 12232, 13, 316, 7230, 6713, 13, 961, 385, 855, 291, 13, 1042, 11, 527, 34132, 1985, 370, 731, 51156], "temperature": 0.0, "avg_logprob": -0.12314595778783162, "compression_ratio": 1.538152610441767, "no_speech_prob": 0.007814853452146053}, {"id": 316, "seek": 206830, "start": 2085.5800000000004, "end": 2093.1000000000004, "text": " that we already can handle addition. Wow. That's really impressive. And if you've written enough", "tokens": [51228, 300, 321, 1217, 393, 4813, 4500, 13, 3153, 13, 663, 311, 534, 8992, 13, 400, 498, 291, 600, 3720, 1547, 51604], "temperature": 0.0, "avg_logprob": -0.12314595778783162, "compression_ratio": 1.538152610441767, "no_speech_prob": 0.007814853452146053}, {"id": 317, "seek": 206830, "start": 2093.1000000000004, "end": 2097.9, "text": " interpreters, you've run into this problem before. I was like, whoa, that's, I guess I can turn in", "tokens": [51604, 17489, 1559, 11, 291, 600, 1190, 666, 341, 1154, 949, 13, 286, 390, 411, 11, 13310, 11, 300, 311, 11, 286, 2041, 286, 393, 1261, 294, 51844], "temperature": 0.0, "avg_logprob": -0.12314595778783162, "compression_ratio": 1.538152610441767, "no_speech_prob": 0.007814853452146053}, {"id": 318, "seek": 209790, "start": 2097.9, "end": 2104.3, "text": " my homework early. Okay. So that's why we put a quote in front of whatever we're passing in. So", "tokens": [50364, 452, 14578, 2440, 13, 1033, 13, 407, 300, 311, 983, 321, 829, 257, 6513, 294, 1868, 295, 2035, 321, 434, 8437, 294, 13, 407, 50684], "temperature": 0.0, "avg_logprob": -0.11838906771176821, "compression_ratio": 1.4489795918367347, "no_speech_prob": 9.913598478306085e-05}, {"id": 319, "seek": 209790, "start": 2104.3, "end": 2109.98, "text": " really quote of five. All right. Well, maybe we want to have more things than just numbers. How", "tokens": [50684, 534, 6513, 295, 1732, 13, 1057, 558, 13, 1042, 11, 1310, 321, 528, 281, 362, 544, 721, 813, 445, 3547, 13, 1012, 50968], "temperature": 0.0, "avg_logprob": -0.11838906771176821, "compression_ratio": 1.4489795918367347, "no_speech_prob": 9.913598478306085e-05}, {"id": 320, "seek": 209790, "start": 2109.98, "end": 2120.62, "text": " about we add, add one. Add one is a function and scheme that adds one to a numeric argument.", "tokens": [50968, 466, 321, 909, 11, 909, 472, 13, 5349, 472, 307, 257, 2445, 293, 12232, 300, 10860, 472, 281, 257, 7866, 299, 6770, 13, 51500], "temperature": 0.0, "avg_logprob": -0.11838906771176821, "compression_ratio": 1.4489795918367347, "no_speech_prob": 9.913598478306085e-05}, {"id": 321, "seek": 212062, "start": 2121.2599999999998, "end": 2130.46, "text": " So let's implement add one. So, let me add another clause here. And in this case, we're", "tokens": [50396, 407, 718, 311, 4445, 909, 472, 13, 407, 11, 718, 385, 909, 1071, 25925, 510, 13, 400, 294, 341, 1389, 11, 321, 434, 50856], "temperature": 0.0, "avg_logprob": -0.10821735858917236, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0003352385829202831}, {"id": 322, "seek": 212062, "start": 2130.46, "end": 2136.8599999999997, "text": " actually going to match against the list. Okay. So we see list structure. And now you start seeing", "tokens": [50856, 767, 516, 281, 2995, 1970, 264, 1329, 13, 1033, 13, 407, 321, 536, 1329, 3877, 13, 400, 586, 291, 722, 2577, 51176], "temperature": 0.0, "avg_logprob": -0.10821735858917236, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0003352385829202831}, {"id": 323, "seek": 212062, "start": 2136.8599999999997, "end": 2142.8599999999997, "text": " why we're using P match. So the expression we expect is an add one expression, which has a", "tokens": [51176, 983, 321, 434, 1228, 430, 2995, 13, 407, 264, 6114, 321, 2066, 307, 364, 909, 472, 6114, 11, 597, 575, 257, 51476], "temperature": 0.0, "avg_logprob": -0.10821735858917236, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0003352385829202831}, {"id": 324, "seek": 212062, "start": 2142.8599999999997, "end": 2147.58, "text": " sub expression inside of it. This could be arbitrarily complicated. This doesn't just have to be a", "tokens": [51476, 1422, 6114, 1854, 295, 309, 13, 639, 727, 312, 19071, 3289, 6179, 13, 639, 1177, 380, 445, 362, 281, 312, 257, 51712], "temperature": 0.0, "avg_logprob": -0.10821735858917236, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0003352385829202831}, {"id": 325, "seek": 214758, "start": 2147.58, "end": 2152.14, "text": " number. This could be something that evaluates to another, such as another call to add one.", "tokens": [50364, 1230, 13, 639, 727, 312, 746, 300, 6133, 1024, 281, 1071, 11, 1270, 382, 1071, 818, 281, 909, 472, 13, 50592], "temperature": 0.0, "avg_logprob": -0.13672125199261834, "compression_ratio": 1.5337078651685394, "no_speech_prob": 0.00037995431921444833}, {"id": 326, "seek": 214758, "start": 2152.7, "end": 2155.42, "text": " Okay. All right. So what do we do now in this case?", "tokens": [50620, 1033, 13, 1057, 558, 13, 407, 437, 360, 321, 360, 586, 294, 341, 1389, 30, 50756], "temperature": 0.0, "avg_logprob": -0.13672125199261834, "compression_ratio": 1.5337078651685394, "no_speech_prob": 0.00037995431921444833}, {"id": 327, "seek": 214758, "start": 2160.38, "end": 2163.1, "text": " Oh, yeah. Add one. Well, where did we get add one from?", "tokens": [51004, 876, 11, 1338, 13, 5349, 472, 13, 1042, 11, 689, 630, 321, 483, 909, 472, 490, 30, 51140], "temperature": 0.0, "avg_logprob": -0.13672125199261834, "compression_ratio": 1.5337078651685394, "no_speech_prob": 0.00037995431921444833}, {"id": 328, "seek": 214758, "start": 2166.22, "end": 2170.86, "text": " Scheme. We hope it's built in. We'll see. All right. So I'm going to call", "tokens": [51296, 2065, 5729, 13, 492, 1454, 309, 311, 3094, 294, 13, 492, 603, 536, 13, 1057, 558, 13, 407, 286, 478, 516, 281, 818, 51528], "temperature": 0.0, "avg_logprob": -0.13672125199261834, "compression_ratio": 1.5337078651685394, "no_speech_prob": 0.00037995431921444833}, {"id": 329, "seek": 217086, "start": 2171.42, "end": 2182.78, "text": " val expert inside of E. All right. So I'm going to use schemes add one to implement add one in", "tokens": [50392, 1323, 5844, 1854, 295, 462, 13, 1057, 558, 13, 407, 286, 478, 516, 281, 764, 26954, 909, 472, 281, 4445, 909, 472, 294, 50960], "temperature": 0.0, "avg_logprob": -0.2312826227258753, "compression_ratio": 1.3484848484848484, "no_speech_prob": 0.00035693979589268565}, {"id": 330, "seek": 217086, "start": 2182.78, "end": 2197.98, "text": " my language. Okay. That's cool. So let's try it. Okay. So now let me quote add one.", "tokens": [50960, 452, 2856, 13, 1033, 13, 663, 311, 1627, 13, 407, 718, 311, 853, 309, 13, 1033, 13, 407, 586, 718, 385, 6513, 909, 472, 13, 51720], "temperature": 0.0, "avg_logprob": -0.2312826227258753, "compression_ratio": 1.3484848484848484, "no_speech_prob": 0.00035693979589268565}, {"id": 331, "seek": 219798, "start": 2198.22, "end": 2207.42, "text": " Okay. And then I can always do the test like this because otherwise you might accidentally", "tokens": [50376, 1033, 13, 400, 550, 286, 393, 1009, 360, 264, 1500, 411, 341, 570, 5911, 291, 1062, 15715, 50836], "temperature": 0.0, "avg_logprob": -0.12822273799351283, "compression_ratio": 1.5739644970414202, "no_speech_prob": 0.00045820444938726723}, {"id": 332, "seek": 219798, "start": 2208.14, "end": 2213.9, "text": " not evaluate the sub expression. All right. So now we can do add one. That's great.", "tokens": [50872, 406, 13059, 264, 1422, 6114, 13, 1057, 558, 13, 407, 586, 321, 393, 360, 909, 472, 13, 663, 311, 869, 13, 51160], "temperature": 0.0, "avg_logprob": -0.12822273799351283, "compression_ratio": 1.5739644970414202, "no_speech_prob": 0.00045820444938726723}, {"id": 333, "seek": 219798, "start": 2215.98, "end": 2225.82, "text": " All right. And I have one called sub one. All right. Same thing, right? All right. I should", "tokens": [51264, 1057, 558, 13, 400, 286, 362, 472, 1219, 1422, 472, 13, 1057, 558, 13, 10635, 551, 11, 558, 30, 1057, 558, 13, 286, 820, 51756], "temperature": 0.0, "avg_logprob": -0.12822273799351283, "compression_ratio": 1.5739644970414202, "no_speech_prob": 0.00045820444938726723}, {"id": 334, "seek": 222582, "start": 2225.82, "end": 2231.5, "text": " have used copy and paste abstraction. Well, I kind of did. But okay. So you see how this goes.", "tokens": [50364, 362, 1143, 5055, 293, 9163, 37765, 13, 1042, 11, 286, 733, 295, 630, 13, 583, 1392, 13, 407, 291, 536, 577, 341, 1709, 13, 50648], "temperature": 0.0, "avg_logprob": -0.09018928613235701, "compression_ratio": 1.5786516853932584, "no_speech_prob": 0.00013978779315948486}, {"id": 335, "seek": 222582, "start": 2232.94, "end": 2240.54, "text": " That's fine. We could add a few other things. So we could add something like multiplication.", "tokens": [50720, 663, 311, 2489, 13, 492, 727, 909, 257, 1326, 661, 721, 13, 407, 321, 727, 909, 746, 411, 27290, 13, 51100], "temperature": 0.0, "avg_logprob": -0.09018928613235701, "compression_ratio": 1.5786516853932584, "no_speech_prob": 0.00013978779315948486}, {"id": 336, "seek": 222582, "start": 2243.42, "end": 2247.98, "text": " Now, multiplication is interesting because our version of multiplication is going to take two", "tokens": [51244, 823, 11, 27290, 307, 1880, 570, 527, 3037, 295, 27290, 307, 516, 281, 747, 732, 51472], "temperature": 0.0, "avg_logprob": -0.09018928613235701, "compression_ratio": 1.5786516853932584, "no_speech_prob": 0.00013978779315948486}, {"id": 337, "seek": 224798, "start": 2248.06, "end": 2252.22, "text": " sub expressions. Ooh. You want to need two. So now how do we write this thing?", "tokens": [50368, 1422, 15277, 13, 7951, 13, 509, 528, 281, 643, 732, 13, 407, 586, 577, 360, 321, 2464, 341, 551, 30, 50576], "temperature": 0.0, "avg_logprob": -0.17871101279007762, "compression_ratio": 1.3541666666666667, "no_speech_prob": 0.001597559079527855}, {"id": 338, "seek": 224798, "start": 2256.62, "end": 2262.22, "text": " How many recursive calls do we have to make? Do. Right? Well, this is like falling off a log.", "tokens": [50796, 1012, 867, 20560, 488, 5498, 360, 321, 362, 281, 652, 30, 1144, 13, 1779, 30, 1042, 11, 341, 307, 411, 7440, 766, 257, 3565, 13, 51076], "temperature": 0.0, "avg_logprob": -0.17871101279007762, "compression_ratio": 1.3541666666666667, "no_speech_prob": 0.001597559079527855}, {"id": 339, "seek": 224798, "start": 2263.26, "end": 2272.94, "text": " All right. Okay. So we're going to multiply what we get back when we evaluate E1 and E2", "tokens": [51128, 1057, 558, 13, 1033, 13, 407, 321, 434, 516, 281, 12972, 437, 321, 483, 646, 562, 321, 13059, 462, 16, 293, 462, 17, 51612], "temperature": 0.0, "avg_logprob": -0.17871101279007762, "compression_ratio": 1.3541666666666667, "no_speech_prob": 0.001597559079527855}, {"id": 340, "seek": 227294, "start": 2273.5, "end": 2283.26, "text": " and multiply that. Okay. All right. Let's do another one. How about if? So I already told you", "tokens": [50392, 293, 12972, 300, 13, 1033, 13, 1057, 558, 13, 961, 311, 360, 1071, 472, 13, 1012, 466, 498, 30, 407, 286, 1217, 1907, 291, 50880], "temperature": 0.0, "avg_logprob": -0.12696927123599583, "compression_ratio": 1.4318181818181819, "no_speech_prob": 0.0006770921754650772}, {"id": 341, "seek": 227294, "start": 2283.26, "end": 2289.7400000000002, "text": " there's a test and a consequent and an alternative. So how do we evaluate if?", "tokens": [50880, 456, 311, 257, 1500, 293, 257, 7242, 317, 293, 364, 8535, 13, 407, 577, 360, 321, 13059, 498, 30, 51204], "temperature": 0.0, "avg_logprob": -0.12696927123599583, "compression_ratio": 1.4318181818181819, "no_speech_prob": 0.0006770921754650772}, {"id": 342, "seek": 227294, "start": 2291.42, "end": 2300.7000000000003, "text": " Any ideas? This is tricky. Using if. You're catching on. All right. How about if", "tokens": [51288, 2639, 3487, 30, 639, 307, 12414, 13, 11142, 498, 13, 509, 434, 16124, 322, 13, 1057, 558, 13, 1012, 466, 498, 51752], "temperature": 0.0, "avg_logprob": -0.12696927123599583, "compression_ratio": 1.4318181818181819, "no_speech_prob": 0.0006770921754650772}, {"id": 343, "seek": 230070, "start": 2301.5, "end": 2308.14, "text": " evalexper of t copy and paste abstraction?", "tokens": [50404, 1073, 304, 3121, 610, 295, 256, 5055, 293, 9163, 37765, 30, 50736], "temperature": 0.0, "avg_logprob": -0.34705800143155185, "compression_ratio": 1.4328358208955223, "no_speech_prob": 0.0011513220379129052}, {"id": 344, "seek": 230070, "start": 2312.3799999999997, "end": 2318.3799999999997, "text": " Yeah. All right. There's probably like a copy and paste monad in Haskell or something, right?", "tokens": [50948, 865, 13, 1057, 558, 13, 821, 311, 1391, 411, 257, 5055, 293, 9163, 1108, 345, 294, 8646, 43723, 420, 746, 11, 558, 30, 51248], "temperature": 0.0, "avg_logprob": -0.34705800143155185, "compression_ratio": 1.4328358208955223, "no_speech_prob": 0.0011513220379129052}, {"id": 345, "seek": 230070, "start": 2320.7, "end": 2323.8999999999996, "text": " So copy and paste abstraction. Now we have, yes. Great.", "tokens": [51364, 407, 5055, 293, 9163, 37765, 13, 823, 321, 362, 11, 2086, 13, 3769, 13, 51524], "temperature": 0.0, "avg_logprob": -0.34705800143155185, "compression_ratio": 1.4328358208955223, "no_speech_prob": 0.0011513220379129052}, {"id": 346, "seek": 233070, "start": 2331.5, "end": 2337.18, "text": " Can we short circuit? Well, for things like and and or, we might want to do short circuit", "tokens": [50404, 1664, 321, 2099, 9048, 30, 1042, 11, 337, 721, 411, 293, 293, 420, 11, 321, 1062, 528, 281, 360, 2099, 9048, 50688], "temperature": 0.0, "avg_logprob": -0.10100618652675462, "compression_ratio": 1.7572815533980584, "no_speech_prob": 0.0019557916093617678}, {"id": 347, "seek": 233070, "start": 2337.18, "end": 2342.7, "text": " evaluation for if we're going to have to evaluate the test. But if semantics are that if the test", "tokens": [50688, 13344, 337, 498, 321, 434, 516, 281, 362, 281, 13059, 264, 1500, 13, 583, 498, 4361, 45298, 366, 300, 498, 264, 1500, 50964], "temperature": 0.0, "avg_logprob": -0.10100618652675462, "compression_ratio": 1.7572815533980584, "no_speech_prob": 0.0019557916093617678}, {"id": 348, "seek": 233070, "start": 2342.7, "end": 2347.8199999999997, "text": " is true, we will only evaluate the first sub expression. Otherwise, we'll only evaluate", "tokens": [50964, 307, 2074, 11, 321, 486, 787, 13059, 264, 700, 1422, 6114, 13, 10328, 11, 321, 603, 787, 13059, 51220], "temperature": 0.0, "avg_logprob": -0.10100618652675462, "compression_ratio": 1.7572815533980584, "no_speech_prob": 0.0019557916093617678}, {"id": 349, "seek": 233070, "start": 2347.8199999999997, "end": 2358.06, "text": " this sub expression. So they won't both be evaluated. Okay. Okay. Now, basically, this", "tokens": [51220, 341, 1422, 6114, 13, 407, 436, 1582, 380, 1293, 312, 25509, 13, 1033, 13, 1033, 13, 823, 11, 1936, 11, 341, 51732], "temperature": 0.0, "avg_logprob": -0.10100618652675462, "compression_ratio": 1.7572815533980584, "no_speech_prob": 0.0019557916093617678}, {"id": 350, "seek": 235806, "start": 2358.14, "end": 2364.14, "text": " interpreter is pretty boring. All right. It's pretty boring. And the reason is we have not", "tokens": [50368, 34132, 307, 1238, 9989, 13, 1057, 558, 13, 467, 311, 1238, 9989, 13, 400, 264, 1778, 307, 321, 362, 406, 50668], "temperature": 0.0, "avg_logprob": -0.1341162022856093, "compression_ratio": 1.855072463768116, "no_speech_prob": 0.0005357314366847277}, {"id": 351, "seek": 235806, "start": 2364.14, "end": 2368.38, "text": " gotten to the beautiful part of the interpreter. The beautiful part of the interpreter has to do", "tokens": [50668, 5768, 281, 264, 2238, 644, 295, 264, 34132, 13, 440, 2238, 644, 295, 264, 34132, 575, 281, 360, 50880], "temperature": 0.0, "avg_logprob": -0.1341162022856093, "compression_ratio": 1.855072463768116, "no_speech_prob": 0.0005357314366847277}, {"id": 352, "seek": 235806, "start": 2368.38, "end": 2377.9, "text": " with three lines and only three lines. What are those three lines? Lambda. That's the, I told you", "tokens": [50880, 365, 1045, 3876, 293, 787, 1045, 3876, 13, 708, 366, 729, 1045, 3876, 30, 45691, 13, 663, 311, 264, 11, 286, 1907, 291, 51356], "temperature": 0.0, "avg_logprob": -0.1341162022856093, "compression_ratio": 1.855072463768116, "no_speech_prob": 0.0005357314366847277}, {"id": 353, "seek": 235806, "start": 2377.9, "end": 2384.46, "text": " there's always the answer, right? Told you. What's the second one? It's not lambda. What was that?", "tokens": [51356, 456, 311, 1009, 264, 1867, 11, 558, 30, 48220, 291, 13, 708, 311, 264, 1150, 472, 30, 467, 311, 406, 13607, 13, 708, 390, 300, 30, 51684], "temperature": 0.0, "avg_logprob": -0.1341162022856093, "compression_ratio": 1.855072463768116, "no_speech_prob": 0.0005357314366847277}, {"id": 354, "seek": 238446, "start": 2385.42, "end": 2397.42, "text": " Apply application. And the third one. Not a vowel. Not procedure. Was that? Not defined.", "tokens": [50412, 25264, 3861, 13, 400, 264, 2636, 472, 13, 1726, 257, 29410, 13, 1726, 10747, 13, 3027, 300, 30, 1726, 7642, 13, 51012], "temperature": 0.0, "avg_logprob": -0.21638367093842606, "compression_ratio": 1.3237410071942446, "no_speech_prob": 0.0014549728948622942}, {"id": 355, "seek": 238446, "start": 2399.34, "end": 2404.7, "text": " Not quote. Oh, wow. All right. Stumped y'all. Haha. All right. We'll figure it out in a minute.", "tokens": [51108, 1726, 6513, 13, 876, 11, 6076, 13, 1057, 558, 13, 745, 1420, 292, 288, 6, 336, 13, 19131, 13, 1057, 558, 13, 492, 603, 2573, 309, 484, 294, 257, 3456, 13, 51376], "temperature": 0.0, "avg_logprob": -0.21638367093842606, "compression_ratio": 1.3237410071942446, "no_speech_prob": 0.0014549728948622942}, {"id": 356, "seek": 240470, "start": 2405.4199999999996, "end": 2416.8599999999997, "text": " Okay. So, let's try, you know, let's try doing, let's try doing a vowel. Okay. So,", "tokens": [50400, 1033, 13, 407, 11, 718, 311, 853, 11, 291, 458, 11, 718, 311, 853, 884, 11, 718, 311, 853, 884, 257, 29410, 13, 1033, 13, 407, 11, 50972], "temperature": 0.0, "avg_logprob": -0.1672364565042349, "compression_ratio": 1.6971153846153846, "no_speech_prob": 0.002396480878815055}, {"id": 357, "seek": 240470, "start": 2416.8599999999997, "end": 2422.54, "text": " we've already seen the syntax and scheme. It's minimalist to say, not ro-co-co. And", "tokens": [50972, 321, 600, 1217, 1612, 264, 28431, 293, 12232, 13, 467, 311, 50192, 281, 584, 11, 406, 744, 12, 1291, 12, 1291, 13, 400, 51256], "temperature": 0.0, "avg_logprob": -0.1672364565042349, "compression_ratio": 1.6971153846153846, "no_speech_prob": 0.002396480878815055}, {"id": 358, "seek": 240470, "start": 2423.74, "end": 2428.9399999999996, "text": " basically, we have a raider expression, an operator expression, and an operand expression.", "tokens": [51316, 1936, 11, 321, 362, 257, 3342, 1438, 6114, 11, 364, 12973, 6114, 11, 293, 364, 2208, 474, 6114, 13, 51576], "temperature": 0.0, "avg_logprob": -0.1672364565042349, "compression_ratio": 1.6971153846153846, "no_speech_prob": 0.002396480878815055}, {"id": 359, "seek": 240470, "start": 2428.9399999999996, "end": 2433.74, "text": " If you read a book and you see raider and ran, that's what they mean. You want to put this line", "tokens": [51576, 759, 291, 1401, 257, 1446, 293, 291, 536, 3342, 1438, 293, 5872, 11, 300, 311, 437, 436, 914, 13, 509, 528, 281, 829, 341, 1622, 51816], "temperature": 0.0, "avg_logprob": -0.1672364565042349, "compression_ratio": 1.6971153846153846, "no_speech_prob": 0.002396480878815055}, {"id": 360, "seek": 243374, "start": 2433.74, "end": 2438.62, "text": " last in your P match so it doesn't overlap. This pattern does not overlap with the others.", "tokens": [50364, 1036, 294, 428, 430, 2995, 370, 309, 1177, 380, 19959, 13, 639, 5102, 775, 406, 19959, 365, 264, 2357, 13, 50608], "temperature": 0.0, "avg_logprob": -0.1083633341687791, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.000709496671333909}, {"id": 361, "seek": 243374, "start": 2438.62, "end": 2442.7799999999997, "text": " This becomes fun when you start doing logic programming where the ordering isn't supposed", "tokens": [50608, 639, 3643, 1019, 562, 291, 722, 884, 9952, 9410, 689, 264, 21739, 1943, 380, 3442, 50816], "temperature": 0.0, "avg_logprob": -0.1083633341687791, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.000709496671333909}, {"id": 362, "seek": 243374, "start": 2442.7799999999997, "end": 2447.18, "text": " to matter. But in this case, P match evaluates in the top down. And so we're going to put our", "tokens": [50816, 281, 1871, 13, 583, 294, 341, 1389, 11, 430, 2995, 6133, 1024, 294, 264, 1192, 760, 13, 400, 370, 321, 434, 516, 281, 829, 527, 51036], "temperature": 0.0, "avg_logprob": -0.1083633341687791, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.000709496671333909}, {"id": 363, "seek": 243374, "start": 2447.18, "end": 2454.9399999999996, "text": " application case last. All right. Okay. What do we do? We know the drill. We are going to evaluate", "tokens": [51036, 3861, 1389, 1036, 13, 1057, 558, 13, 1033, 13, 708, 360, 321, 360, 30, 492, 458, 264, 11392, 13, 492, 366, 516, 281, 13059, 51424], "temperature": 0.0, "avg_logprob": -0.1083633341687791, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.000709496671333909}, {"id": 364, "seek": 245494, "start": 2455.02, "end": 2461.26, "text": " via copy and paste subtraction, the raider and the ran. Perfect. Evaluate the raider", "tokens": [50368, 5766, 5055, 293, 9163, 16390, 313, 11, 264, 3342, 1438, 293, 264, 5872, 13, 10246, 13, 462, 3337, 10107, 264, 3342, 1438, 50680], "temperature": 0.0, "avg_logprob": -0.1595741428741037, "compression_ratio": 1.688622754491018, "no_speech_prob": 0.004069196991622448}, {"id": 365, "seek": 245494, "start": 2462.86, "end": 2474.38, "text": " and evaluate the ran. All right. Now, what do we do with those two values? The raider is supposed", "tokens": [50760, 293, 13059, 264, 5872, 13, 1057, 558, 13, 823, 11, 437, 360, 321, 360, 365, 729, 732, 4190, 30, 440, 3342, 1438, 307, 3442, 51336], "temperature": 0.0, "avg_logprob": -0.1595741428741037, "compression_ratio": 1.688622754491018, "no_speech_prob": 0.004069196991622448}, {"id": 366, "seek": 245494, "start": 2474.38, "end": 2479.7400000000002, "text": " to evaluate to a procedure, some representation of procedure. And this is going to evaluate to some", "tokens": [51336, 281, 13059, 281, 257, 10747, 11, 512, 10290, 295, 10747, 13, 400, 341, 307, 516, 281, 13059, 281, 512, 51604], "temperature": 0.0, "avg_logprob": -0.1595741428741037, "compression_ratio": 1.688622754491018, "no_speech_prob": 0.004069196991622448}, {"id": 367, "seek": 247974, "start": 2479.8199999999997, "end": 2483.18, "text": " argument that we're going to call the procedure on. So what do we do now?", "tokens": [50368, 6770, 300, 321, 434, 516, 281, 818, 264, 10747, 322, 13, 407, 437, 360, 321, 360, 586, 30, 50536], "temperature": 0.0, "avg_logprob": -0.1435990284398659, "compression_ratio": 1.5874439461883407, "no_speech_prob": 0.004398331046104431}, {"id": 368, "seek": 247974, "start": 2484.2999999999997, "end": 2491.3399999999997, "text": " Apply it. How do we apply it? No. Lambda doesn't apply. But you're right that I got caught up.", "tokens": [50592, 25264, 309, 13, 1012, 360, 321, 3079, 309, 30, 883, 13, 45691, 1177, 380, 3079, 13, 583, 291, 434, 558, 300, 286, 658, 5415, 493, 13, 50944], "temperature": 0.0, "avg_logprob": -0.1435990284398659, "compression_ratio": 1.5874439461883407, "no_speech_prob": 0.004398331046104431}, {"id": 369, "seek": 247974, "start": 2492.3799999999997, "end": 2498.9399999999996, "text": " We're going to use apply, which is through parentheses. Right? That's it. If you blink,", "tokens": [50996, 492, 434, 516, 281, 764, 3079, 11, 597, 307, 807, 34153, 13, 1779, 30, 663, 311, 309, 13, 759, 291, 24667, 11, 51324], "temperature": 0.0, "avg_logprob": -0.1435990284398659, "compression_ratio": 1.5874439461883407, "no_speech_prob": 0.004398331046104431}, {"id": 370, "seek": 247974, "start": 2498.9399999999996, "end": 2504.7799999999997, "text": " you'll miss it. Some people have what I might call parentheses blindness. And they just can't see", "tokens": [51324, 291, 603, 1713, 309, 13, 2188, 561, 362, 437, 286, 1062, 818, 34153, 46101, 13, 400, 436, 445, 393, 380, 536, 51616], "temperature": 0.0, "avg_logprob": -0.1435990284398659, "compression_ratio": 1.5874439461883407, "no_speech_prob": 0.004398331046104431}, {"id": 371, "seek": 250478, "start": 2504.78, "end": 2510.3, "text": " that that is different than without those parentheses. But they are different. There's no", "tokens": [50364, 300, 300, 307, 819, 813, 1553, 729, 34153, 13, 583, 436, 366, 819, 13, 821, 311, 572, 50640], "temperature": 0.0, "avg_logprob": -0.08570684628053145, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.001366818556562066}, {"id": 372, "seek": 250478, "start": 2510.3, "end": 2517.1000000000004, "text": " mistaking the difference in behavior. Okay. So that is our application. Very nice. So that's", "tokens": [50640, 3544, 2456, 264, 2649, 294, 5223, 13, 1033, 13, 407, 300, 307, 527, 3861, 13, 4372, 1481, 13, 407, 300, 311, 50980], "temperature": 0.0, "avg_logprob": -0.08570684628053145, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.001366818556562066}, {"id": 373, "seek": 250478, "start": 2517.1000000000004, "end": 2523.42, "text": " one of our three magic operators. We also have this thing called lambda. So I can match against", "tokens": [50980, 472, 295, 527, 1045, 5585, 19077, 13, 492, 611, 362, 341, 551, 1219, 13607, 13, 407, 286, 393, 2995, 1970, 51296], "temperature": 0.0, "avg_logprob": -0.08570684628053145, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.001366818556562066}, {"id": 374, "seek": 250478, "start": 2523.42, "end": 2527.7400000000002, "text": " the lambda expression. This is where the pattern matching comes in nicely. And I can give a name", "tokens": [51296, 264, 13607, 6114, 13, 639, 307, 689, 264, 5102, 14324, 1487, 294, 9594, 13, 400, 286, 393, 976, 257, 1315, 51512], "temperature": 0.0, "avg_logprob": -0.08570684628053145, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.001366818556562066}, {"id": 375, "seek": 252774, "start": 2527.74, "end": 2535.8999999999996, "text": " to the variable. And I can have a body expression. Okay. So something has got to happen with the", "tokens": [50364, 281, 264, 7006, 13, 400, 286, 393, 362, 257, 1772, 6114, 13, 1033, 13, 407, 746, 575, 658, 281, 1051, 365, 264, 50772], "temperature": 0.0, "avg_logprob": -0.14068124323715397, "compression_ratio": 1.4973544973544974, "no_speech_prob": 0.000535707687959075}, {"id": 376, "seek": 252774, "start": 2535.8999999999996, "end": 2546.06, "text": " lambda. Do you see that x? What is x? Well, there's a list containing x, but the x itself,", "tokens": [50772, 13607, 13, 1144, 291, 536, 300, 2031, 30, 708, 307, 2031, 30, 1042, 11, 456, 311, 257, 1329, 19273, 2031, 11, 457, 264, 2031, 2564, 11, 51280], "temperature": 0.0, "avg_logprob": -0.14068124323715397, "compression_ratio": 1.4973544973544974, "no_speech_prob": 0.000535707687959075}, {"id": 377, "seek": 252774, "start": 2546.06, "end": 2554.2999999999997, "text": " not part of the list. What does that mean? What is that thing? It's an identifier. And if the x", "tokens": [51280, 406, 644, 295, 264, 1329, 13, 708, 775, 300, 914, 30, 708, 307, 300, 551, 30, 467, 311, 364, 45690, 13, 400, 498, 264, 2031, 51692], "temperature": 0.0, "avg_logprob": -0.14068124323715397, "compression_ratio": 1.4973544973544974, "no_speech_prob": 0.000535707687959075}, {"id": 378, "seek": 255430, "start": 2554.3, "end": 2561.82, "text": " were to appear inside of rand, what would that be? It's a variable reference. Okay. So this is how", "tokens": [50364, 645, 281, 4204, 1854, 295, 367, 474, 11, 437, 576, 300, 312, 30, 467, 311, 257, 7006, 6408, 13, 1033, 13, 407, 341, 307, 577, 50740], "temperature": 0.0, "avg_logprob": -0.09573394473236387, "compression_ratio": 1.606694560669456, "no_speech_prob": 0.000939766934607178}, {"id": 379, "seek": 255430, "start": 2561.82, "end": 2570.3, "text": " we have a variable reference. And what's the value of the variable x? Tell me. Don't know yet. When", "tokens": [50740, 321, 362, 257, 7006, 6408, 13, 400, 437, 311, 264, 2158, 295, 264, 7006, 2031, 30, 5115, 385, 13, 1468, 380, 458, 1939, 13, 1133, 51164], "temperature": 0.0, "avg_logprob": -0.09573394473236387, "compression_ratio": 1.606694560669456, "no_speech_prob": 0.000939766934607178}, {"id": 380, "seek": 255430, "start": 2570.3, "end": 2577.1000000000004, "text": " will you know? No, at runtime when we've actually done the procedure application. That's right.", "tokens": [51164, 486, 291, 458, 30, 883, 11, 412, 34474, 562, 321, 600, 767, 1096, 264, 10747, 3861, 13, 663, 311, 558, 13, 51504], "temperature": 0.0, "avg_logprob": -0.09573394473236387, "compression_ratio": 1.606694560669456, "no_speech_prob": 0.000939766934607178}, {"id": 381, "seek": 255430, "start": 2577.1000000000004, "end": 2584.0600000000004, "text": " We won't know until then. So if I call the resulting procedure with five as the argument,", "tokens": [51504, 492, 1582, 380, 458, 1826, 550, 13, 407, 498, 286, 818, 264, 16505, 10747, 365, 1732, 382, 264, 6770, 11, 51852], "temperature": 0.0, "avg_logprob": -0.09573394473236387, "compression_ratio": 1.606694560669456, "no_speech_prob": 0.000939766934607178}, {"id": 382, "seek": 258406, "start": 2584.06, "end": 2591.02, "text": " what would be the value of x? Five. So we have this idea that if a variable appears in the body,", "tokens": [50364, 437, 576, 312, 264, 2158, 295, 2031, 30, 9436, 13, 407, 321, 362, 341, 1558, 300, 498, 257, 7006, 7038, 294, 264, 1772, 11, 50712], "temperature": 0.0, "avg_logprob": -0.06272172425922594, "compression_ratio": 1.6929824561403508, "no_speech_prob": 0.00021641452622134238}, {"id": 383, "seek": 258406, "start": 2591.74, "end": 2596.14, "text": " at some point, we may have to look up the value associated with that variable or bound to the", "tokens": [50748, 412, 512, 935, 11, 321, 815, 362, 281, 574, 493, 264, 2158, 6615, 365, 300, 7006, 420, 5472, 281, 264, 50968], "temperature": 0.0, "avg_logprob": -0.06272172425922594, "compression_ratio": 1.6929824561403508, "no_speech_prob": 0.00021641452622134238}, {"id": 384, "seek": 258406, "start": 2596.14, "end": 2601.5, "text": " variable. And in order to do that, we need some mechanism for variable lookup. And the traditional", "tokens": [50968, 7006, 13, 400, 294, 1668, 281, 360, 300, 11, 321, 643, 512, 7513, 337, 7006, 574, 1010, 13, 400, 264, 5164, 51236], "temperature": 0.0, "avg_logprob": -0.06272172425922594, "compression_ratio": 1.6929824561403508, "no_speech_prob": 0.00021641452622134238}, {"id": 385, "seek": 258406, "start": 2601.5, "end": 2607.34, "text": " way of doing that in this sort of interpreter is called an environment. So we are going to write", "tokens": [51236, 636, 295, 884, 300, 294, 341, 1333, 295, 34132, 307, 1219, 364, 2823, 13, 407, 321, 366, 516, 281, 2464, 51528], "temperature": 0.0, "avg_logprob": -0.06272172425922594, "compression_ratio": 1.6929824561403508, "no_speech_prob": 0.00021641452622134238}, {"id": 386, "seek": 260734, "start": 2607.34, "end": 2614.3, "text": " an environment passing interpreter. Okay. Anytime you hear passing, that means that there's going", "tokens": [50364, 364, 2823, 8437, 34132, 13, 1033, 13, 39401, 291, 1568, 8437, 11, 300, 1355, 300, 456, 311, 516, 50712], "temperature": 0.0, "avg_logprob": -0.0957018810769786, "compression_ratio": 1.71875, "no_speech_prob": 0.0026300230529159307}, {"id": 387, "seek": 260734, "start": 2614.3, "end": 2620.6200000000003, "text": " to be an argument coming in to our function for the interpreter. So you see right now, we basically", "tokens": [50712, 281, 312, 364, 6770, 1348, 294, 281, 527, 2445, 337, 264, 34132, 13, 407, 291, 536, 558, 586, 11, 321, 1936, 51028], "temperature": 0.0, "avg_logprob": -0.0957018810769786, "compression_ratio": 1.71875, "no_speech_prob": 0.0026300230529159307}, {"id": 388, "seek": 260734, "start": 2620.6200000000003, "end": 2626.38, "text": " have a calculator, we have an expression, but there's no context of the expression. There's no", "tokens": [51028, 362, 257, 24993, 11, 321, 362, 364, 6114, 11, 457, 456, 311, 572, 4319, 295, 264, 6114, 13, 821, 311, 572, 51316], "temperature": 0.0, "avg_logprob": -0.0957018810769786, "compression_ratio": 1.71875, "no_speech_prob": 0.0026300230529159307}, {"id": 389, "seek": 260734, "start": 2626.38, "end": 2632.3, "text": " notion of variable bindings that may be in play at this point. So we're going to have to add", "tokens": [51316, 10710, 295, 7006, 14786, 1109, 300, 815, 312, 294, 862, 412, 341, 935, 13, 407, 321, 434, 516, 281, 362, 281, 909, 51612], "temperature": 0.0, "avg_logprob": -0.0957018810769786, "compression_ratio": 1.71875, "no_speech_prob": 0.0026300230529159307}, {"id": 390, "seek": 263230, "start": 2632.3, "end": 2637.5, "text": " something else to this expression, or sorry, in addition to the expression, as an argument.", "tokens": [50364, 746, 1646, 281, 341, 6114, 11, 420, 2597, 11, 294, 4500, 281, 264, 6114, 11, 382, 364, 6770, 13, 50624], "temperature": 0.0, "avg_logprob": -0.0949350217493569, "compression_ratio": 1.7619047619047619, "no_speech_prob": 0.0005108554614707828}, {"id": 391, "seek": 263230, "start": 2637.5, "end": 2644.54, "text": " So I'm going to add an environment. And this changes everything. All those three magic lines", "tokens": [50624, 407, 286, 478, 516, 281, 909, 364, 2823, 13, 400, 341, 2962, 1203, 13, 1057, 729, 1045, 5585, 3876, 50976], "temperature": 0.0, "avg_logprob": -0.0949350217493569, "compression_ratio": 1.7619047619047619, "no_speech_prob": 0.0005108554614707828}, {"id": 392, "seek": 263230, "start": 2644.54, "end": 2652.2200000000003, "text": " are going to in some way be involved with the environment. Okay. So now we have an environment", "tokens": [50976, 366, 516, 281, 294, 512, 636, 312, 3288, 365, 264, 2823, 13, 1033, 13, 407, 586, 321, 362, 364, 2823, 51360], "temperature": 0.0, "avg_logprob": -0.0949350217493569, "compression_ratio": 1.7619047619047619, "no_speech_prob": 0.0005108554614707828}, {"id": 393, "seek": 263230, "start": 2653.5800000000004, "end": 2659.6600000000003, "text": " and the environment is going to contain somehow associations between variables and values.", "tokens": [51428, 293, 264, 2823, 307, 516, 281, 5304, 6063, 26597, 1296, 9102, 293, 4190, 13, 51732], "temperature": 0.0, "avg_logprob": -0.0949350217493569, "compression_ratio": 1.7619047619047619, "no_speech_prob": 0.0005108554614707828}, {"id": 394, "seek": 265966, "start": 2660.2999999999997, "end": 2665.5, "text": " Now, what do you think the third magic line of code is based on what you've seen?", "tokens": [50396, 823, 11, 437, 360, 291, 519, 264, 2636, 5585, 1622, 295, 3089, 307, 2361, 322, 437, 291, 600, 1612, 30, 50656], "temperature": 0.0, "avg_logprob": -0.1543424910857898, "compression_ratio": 1.7651821862348178, "no_speech_prob": 0.000969453772995621}, {"id": 395, "seek": 265966, "start": 2667.8999999999996, "end": 2675.8999999999996, "text": " Parentheses? This is the parenthesis line, the application. Cons, nope. Cons is useful, but", "tokens": [50776, 430, 20616, 23639, 30, 639, 307, 264, 23350, 9374, 1622, 11, 264, 3861, 13, 6923, 11, 23444, 13, 6923, 307, 4420, 11, 457, 51176], "temperature": 0.0, "avg_logprob": -0.1543424910857898, "compression_ratio": 1.7651821862348178, "no_speech_prob": 0.000969453772995621}, {"id": 396, "seek": 265966, "start": 2675.8999999999996, "end": 2679.5, "text": " you actually don't need it. You only need these three lines. That's turn complete, actually. It's", "tokens": [51176, 291, 767, 500, 380, 643, 309, 13, 509, 787, 643, 613, 1045, 3876, 13, 663, 311, 1261, 3566, 11, 767, 13, 467, 311, 51356], "temperature": 0.0, "avg_logprob": -0.1543424910857898, "compression_ratio": 1.7651821862348178, "no_speech_prob": 0.000969453772995621}, {"id": 397, "seek": 265966, "start": 2679.5, "end": 2684.2999999999997, "text": " amazing. We can delete all the other junk. The other stuff is junk. You don't need it.", "tokens": [51356, 2243, 13, 492, 393, 12097, 439, 264, 661, 19109, 13, 440, 661, 1507, 307, 19109, 13, 509, 500, 380, 643, 309, 13, 51596], "temperature": 0.0, "avg_logprob": -0.1543424910857898, "compression_ratio": 1.7651821862348178, "no_speech_prob": 0.000969453772995621}, {"id": 398, "seek": 265966, "start": 2685.74, "end": 2689.1, "text": " You don't need it. You only need the three lines. And I'm serious about that.", "tokens": [51668, 509, 500, 380, 643, 309, 13, 509, 787, 643, 264, 1045, 3876, 13, 400, 286, 478, 3156, 466, 300, 13, 51836], "temperature": 0.0, "avg_logprob": -0.1543424910857898, "compression_ratio": 1.7651821862348178, "no_speech_prob": 0.000969453772995621}, {"id": 399, "seek": 268966, "start": 2689.74, "end": 2693.8199999999997, "text": " You only need the three lines. You heard this thing called a Turing machine? This came first.", "tokens": [50368, 509, 787, 643, 264, 1045, 3876, 13, 509, 2198, 341, 551, 1219, 257, 314, 1345, 3479, 30, 639, 1361, 700, 13, 50572], "temperature": 0.0, "avg_logprob": -0.1502092663604434, "compression_ratio": 1.6026200873362446, "no_speech_prob": 0.00013134336040820926}, {"id": 400, "seek": 268966, "start": 2694.7, "end": 2701.8999999999996, "text": " Lambda calculus came first. Girdle didn't believe church that it was Turing complete,", "tokens": [50616, 45691, 33400, 1361, 700, 13, 460, 1271, 306, 994, 380, 1697, 4128, 300, 309, 390, 314, 1345, 3566, 11, 50976], "temperature": 0.0, "avg_logprob": -0.1502092663604434, "compression_ratio": 1.6026200873362446, "no_speech_prob": 0.00013134336040820926}, {"id": 401, "seek": 268966, "start": 2701.8999999999996, "end": 2708.2999999999997, "text": " even though Turing completeness hadn't been a term yet. Okay. We need one more thing. No,", "tokens": [50976, 754, 1673, 314, 1345, 1557, 15264, 8782, 380, 668, 257, 1433, 1939, 13, 1033, 13, 492, 643, 472, 544, 551, 13, 883, 11, 51296], "temperature": 0.0, "avg_logprob": -0.1502092663604434, "compression_ratio": 1.6026200873362446, "no_speech_prob": 0.00013134336040820926}, {"id": 402, "seek": 268966, "start": 2708.2999999999997, "end": 2715.18, "text": " we don't need to find either. Was it? Variable lookup. That's it. That's the last piece of magic.", "tokens": [51296, 321, 500, 380, 643, 281, 915, 2139, 13, 3027, 309, 30, 32511, 712, 574, 1010, 13, 663, 311, 309, 13, 663, 311, 264, 1036, 2522, 295, 5585, 13, 51640], "temperature": 0.0, "avg_logprob": -0.1502092663604434, "compression_ratio": 1.6026200873362446, "no_speech_prob": 0.00013134336040820926}, {"id": 403, "seek": 271518, "start": 2715.18, "end": 2723.3399999999997, "text": " We've got to have a way to look up those variables. All right. So, I need a guard because I have my", "tokens": [50364, 492, 600, 658, 281, 362, 257, 636, 281, 574, 493, 729, 9102, 13, 1057, 558, 13, 407, 11, 286, 643, 257, 6290, 570, 286, 362, 452, 50772], "temperature": 0.0, "avg_logprob": -0.16001773330400576, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.002115074312314391}, {"id": 404, "seek": 271518, "start": 2723.3399999999997, "end": 2731.5, "text": " match anything pattern. And I am going to represent variables as symbols. Okay. Because we have symbols", "tokens": [50772, 2995, 1340, 5102, 13, 400, 286, 669, 516, 281, 2906, 9102, 382, 16944, 13, 1033, 13, 1436, 321, 362, 16944, 51180], "temperature": 0.0, "avg_logprob": -0.16001773330400576, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.002115074312314391}, {"id": 405, "seek": 271518, "start": 2731.5, "end": 2737.8999999999996, "text": " and scheme. So, if we have a pattern which is just a symbol by itself, right, we're going to say", "tokens": [51180, 293, 12232, 13, 407, 11, 498, 321, 362, 257, 5102, 597, 307, 445, 257, 5986, 538, 2564, 11, 558, 11, 321, 434, 516, 281, 584, 51500], "temperature": 0.0, "avg_logprob": -0.16001773330400576, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.002115074312314391}, {"id": 406, "seek": 271518, "start": 2737.8999999999996, "end": 2743.98, "text": " that's a variable and we're going to look it up. How do we look up a variable? In the environment.", "tokens": [51500, 300, 311, 257, 7006, 293, 321, 434, 516, 281, 574, 309, 493, 13, 1012, 360, 321, 574, 493, 257, 7006, 30, 682, 264, 2823, 13, 51804], "temperature": 0.0, "avg_logprob": -0.16001773330400576, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.002115074312314391}, {"id": 407, "seek": 274398, "start": 2744.54, "end": 2749.1, "text": " Okay. Now I have to tell you a piece of information you don't know. I am going to represent my", "tokens": [50392, 1033, 13, 823, 286, 362, 281, 980, 291, 257, 2522, 295, 1589, 291, 500, 380, 458, 13, 286, 669, 516, 281, 2906, 452, 50620], "temperature": 0.0, "avg_logprob": -0.09880105731556717, "compression_ratio": 1.6550218340611353, "no_speech_prob": 0.0001159005259978585}, {"id": 408, "seek": 274398, "start": 2749.1, "end": 2755.82, "text": " environment as a procedure of one argument that takes a variable. So, how do I actually look up", "tokens": [50620, 2823, 382, 257, 10747, 295, 472, 6770, 300, 2516, 257, 7006, 13, 407, 11, 577, 360, 286, 767, 574, 493, 50956], "temperature": 0.0, "avg_logprob": -0.09880105731556717, "compression_ratio": 1.6550218340611353, "no_speech_prob": 0.0001159005259978585}, {"id": 409, "seek": 274398, "start": 2755.82, "end": 2762.86, "text": " X in the environment? I'm not going to evaluate it, actually. Look up X in the environment.", "tokens": [50956, 1783, 294, 264, 2823, 30, 286, 478, 406, 516, 281, 13059, 309, 11, 767, 13, 2053, 493, 1783, 294, 264, 2823, 13, 51308], "temperature": 0.0, "avg_logprob": -0.09880105731556717, "compression_ratio": 1.6550218340611353, "no_speech_prob": 0.0001159005259978585}, {"id": 410, "seek": 274398, "start": 2763.82, "end": 2770.14, "text": " Like that. Procedure call. Okay. This is where it gets kind of weird. It's like kind of spartan,", "tokens": [51356, 1743, 300, 13, 1705, 1232, 540, 818, 13, 1033, 13, 639, 307, 689, 309, 2170, 733, 295, 3657, 13, 467, 311, 411, 733, 295, 637, 446, 282, 11, 51672], "temperature": 0.0, "avg_logprob": -0.09880105731556717, "compression_ratio": 1.6550218340611353, "no_speech_prob": 0.0001159005259978585}, {"id": 411, "seek": 277014, "start": 2770.14, "end": 2775.3399999999997, "text": " right? I'm just like, ah, got a procedure. There's only one useful thing a procedure can do. Call it.", "tokens": [50364, 558, 30, 286, 478, 445, 411, 11, 3716, 11, 658, 257, 10747, 13, 821, 311, 787, 472, 4420, 551, 257, 10747, 393, 360, 13, 7807, 309, 13, 50624], "temperature": 0.0, "avg_logprob": -0.16614766554398971, "compression_ratio": 1.4948979591836735, "no_speech_prob": 0.00048782318481244147}, {"id": 412, "seek": 277014, "start": 2776.14, "end": 2781.42, "text": " Takes one argument. Give it one argument. Call a day. That's it. All right. So, that's what we're", "tokens": [50664, 44347, 472, 6770, 13, 5303, 309, 472, 6770, 13, 7807, 257, 786, 13, 663, 311, 309, 13, 1057, 558, 13, 407, 11, 300, 311, 437, 321, 434, 50928], "temperature": 0.0, "avg_logprob": -0.16614766554398971, "compression_ratio": 1.4948979591836735, "no_speech_prob": 0.00048782318481244147}, {"id": 413, "seek": 277014, "start": 2781.42, "end": 2796.7, "text": " doing. Okay. Great. Now, lambda. What is lambda going to do? Ah, yes. Extend the environment.", "tokens": [50928, 884, 13, 1033, 13, 3769, 13, 823, 11, 13607, 13, 708, 307, 13607, 516, 281, 360, 30, 2438, 11, 2086, 13, 9881, 521, 264, 2823, 13, 51692], "temperature": 0.0, "avg_logprob": -0.16614766554398971, "compression_ratio": 1.4948979591836735, "no_speech_prob": 0.00048782318481244147}, {"id": 414, "seek": 279670, "start": 2796.7799999999997, "end": 2802.7799999999997, "text": " It's the magic word. The environment extension is the key thing here. So, lambda expression", "tokens": [50368, 467, 311, 264, 5585, 1349, 13, 440, 2823, 10320, 307, 264, 2141, 551, 510, 13, 407, 11, 13607, 6114, 50668], "temperature": 0.0, "avg_logprob": -0.11472836274367113, "compression_ratio": 1.8137254901960784, "no_speech_prob": 0.0016480560880154371}, {"id": 415, "seek": 279670, "start": 2802.7799999999997, "end": 2808.06, "text": " evaluates to what in scheme? A procedure. Okay. So, we have to have a representation", "tokens": [50668, 6133, 1024, 281, 437, 294, 12232, 30, 316, 10747, 13, 1033, 13, 407, 11, 321, 362, 281, 362, 257, 10290, 50932], "temperature": 0.0, "avg_logprob": -0.11472836274367113, "compression_ratio": 1.8137254901960784, "no_speech_prob": 0.0016480560880154371}, {"id": 416, "seek": 279670, "start": 2808.06, "end": 2812.06, "text": " of a procedure which you can think of as a delayed computation where we don't have enough", "tokens": [50932, 295, 257, 10747, 597, 291, 393, 519, 295, 382, 257, 20268, 24903, 689, 321, 500, 380, 362, 1547, 51132], "temperature": 0.0, "avg_logprob": -0.11472836274367113, "compression_ratio": 1.8137254901960784, "no_speech_prob": 0.0016480560880154371}, {"id": 417, "seek": 279670, "start": 2812.06, "end": 2816.8599999999997, "text": " information to do the computation in the body yet. But we're going to wait until the procedure", "tokens": [51132, 1589, 281, 360, 264, 24903, 294, 264, 1772, 1939, 13, 583, 321, 434, 516, 281, 1699, 1826, 264, 10747, 51372], "temperature": 0.0, "avg_logprob": -0.11472836274367113, "compression_ratio": 1.8137254901960784, "no_speech_prob": 0.0016480560880154371}, {"id": 418, "seek": 279670, "start": 2816.8599999999997, "end": 2821.5, "text": " gets called and then some value will be bound to that variable and then we'll be able to evaluate", "tokens": [51372, 2170, 1219, 293, 550, 512, 2158, 486, 312, 5472, 281, 300, 7006, 293, 550, 321, 603, 312, 1075, 281, 13059, 51604], "temperature": 0.0, "avg_logprob": -0.11472836274367113, "compression_ratio": 1.8137254901960784, "no_speech_prob": 0.0016480560880154371}, {"id": 419, "seek": 279670, "start": 2821.5, "end": 2824.54, "text": " the body at that point because we'll have the correct context. We'll know the variable binding.", "tokens": [51604, 264, 1772, 412, 300, 935, 570, 321, 603, 362, 264, 3006, 4319, 13, 492, 603, 458, 264, 7006, 17359, 13, 51756], "temperature": 0.0, "avg_logprob": -0.11472836274367113, "compression_ratio": 1.8137254901960784, "no_speech_prob": 0.0016480560880154371}, {"id": 420, "seek": 282454, "start": 2825.34, "end": 2833.42, "text": " So, we have to somehow represent a procedure. How can we represent a procedure, do you think?", "tokens": [50404, 407, 11, 321, 362, 281, 6063, 2906, 257, 10747, 13, 1012, 393, 321, 2906, 257, 10747, 11, 360, 291, 519, 30, 50808], "temperature": 0.0, "avg_logprob": -0.15177674727006393, "compression_ratio": 1.4472049689440993, "no_speech_prob": 0.0005527339526452124}, {"id": 421, "seek": 282454, "start": 2834.54, "end": 2840.7799999999997, "text": " Lambda. There you go. 60% of the time, it works every time.", "tokens": [50864, 45691, 13, 821, 291, 352, 13, 4060, 4, 295, 264, 565, 11, 309, 1985, 633, 565, 13, 51176], "temperature": 0.0, "avg_logprob": -0.15177674727006393, "compression_ratio": 1.4472049689440993, "no_speech_prob": 0.0005527339526452124}, {"id": 422, "seek": 282454, "start": 2845.2599999999998, "end": 2852.7799999999997, "text": " All right. Lambda arg. That's right. We're going to have an argument coming in.", "tokens": [51400, 1057, 558, 13, 45691, 3882, 13, 663, 311, 558, 13, 492, 434, 516, 281, 362, 364, 6770, 1348, 294, 13, 51776], "temperature": 0.0, "avg_logprob": -0.15177674727006393, "compression_ratio": 1.4472049689440993, "no_speech_prob": 0.0005527339526452124}, {"id": 423, "seek": 285278, "start": 2852.78, "end": 2857.9, "text": " What is that arg thing do you think? What does that correspond to in the three magic lines of code?", "tokens": [50364, 708, 307, 300, 3882, 551, 360, 291, 519, 30, 708, 775, 300, 6805, 281, 294, 264, 1045, 5585, 3876, 295, 3089, 30, 50620], "temperature": 0.0, "avg_logprob": -0.13629109999712777, "compression_ratio": 1.6306306306306306, "no_speech_prob": 0.00012729605077765882}, {"id": 424, "seek": 285278, "start": 2860.78, "end": 2863.5, "text": " It doesn't correspond to X and this is something we have to be very careful about.", "tokens": [50764, 467, 1177, 380, 6805, 281, 1783, 293, 341, 307, 746, 321, 362, 281, 312, 588, 5026, 466, 13, 50900], "temperature": 0.0, "avg_logprob": -0.13629109999712777, "compression_ratio": 1.6306306306306306, "no_speech_prob": 0.00012729605077765882}, {"id": 425, "seek": 285278, "start": 2866.78, "end": 2872.7000000000003, "text": " It corresponds to the value of the RAND. Remember, the procedure application line", "tokens": [51064, 467, 23249, 281, 264, 2158, 295, 264, 497, 8070, 13, 5459, 11, 264, 10747, 3861, 1622, 51360], "temperature": 0.0, "avg_logprob": -0.13629109999712777, "compression_ratio": 1.6306306306306306, "no_speech_prob": 0.00012729605077765882}, {"id": 426, "seek": 285278, "start": 2872.7000000000003, "end": 2878.0600000000004, "text": " and the lambda line are intimately connected because we're going to end up doing a procedure call", "tokens": [51360, 293, 264, 13607, 1622, 366, 560, 5401, 4582, 570, 321, 434, 516, 281, 917, 493, 884, 257, 10747, 818, 51628], "temperature": 0.0, "avg_logprob": -0.13629109999712777, "compression_ratio": 1.6306306306306306, "no_speech_prob": 0.00012729605077765882}, {"id": 427, "seek": 287806, "start": 2878.7, "end": 2882.94, "text": " on this lambda expression. The value of that lambda expression. That's going to evaluate to a scheme", "tokens": [50396, 322, 341, 13607, 6114, 13, 440, 2158, 295, 300, 13607, 6114, 13, 663, 311, 516, 281, 13059, 281, 257, 12232, 50608], "temperature": 0.0, "avg_logprob": -0.13574311713210674, "compression_ratio": 1.889795918367347, "no_speech_prob": 0.001500763581134379}, {"id": 428, "seek": 287806, "start": 2882.94, "end": 2886.94, "text": " procedure and we're going to call the scheme procedure and pass in the value of the operand.", "tokens": [50608, 10747, 293, 321, 434, 516, 281, 818, 264, 12232, 10747, 293, 1320, 294, 264, 2158, 295, 264, 2208, 474, 13, 50808], "temperature": 0.0, "avg_logprob": -0.13574311713210674, "compression_ratio": 1.889795918367347, "no_speech_prob": 0.001500763581134379}, {"id": 429, "seek": 287806, "start": 2887.5, "end": 2892.46, "text": " Therefore, arg will be bound to the value of operand. If we're calling the identity function", "tokens": [50836, 7504, 11, 3882, 486, 312, 5472, 281, 264, 2158, 295, 2208, 474, 13, 759, 321, 434, 5141, 264, 6575, 2445, 51084], "temperature": 0.0, "avg_logprob": -0.13574311713210674, "compression_ratio": 1.889795918367347, "no_speech_prob": 0.001500763581134379}, {"id": 430, "seek": 287806, "start": 2892.46, "end": 2900.94, "text": " on 5, RAND will be evaluated to 5, arg will be bound to 5. Okay? Keep that in mind. Okay.", "tokens": [51084, 322, 1025, 11, 497, 8070, 486, 312, 25509, 281, 1025, 11, 3882, 486, 312, 5472, 281, 1025, 13, 1033, 30, 5527, 300, 294, 1575, 13, 1033, 13, 51508], "temperature": 0.0, "avg_logprob": -0.13574311713210674, "compression_ratio": 1.889795918367347, "no_speech_prob": 0.001500763581134379}, {"id": 431, "seek": 287806, "start": 2900.94, "end": 2907.18, "text": " So, now what I heard was we have to evaluate the body in the extended environment. So,", "tokens": [51508, 407, 11, 586, 437, 286, 2198, 390, 321, 362, 281, 13059, 264, 1772, 294, 264, 10913, 2823, 13, 407, 11, 51820], "temperature": 0.0, "avg_logprob": -0.13574311713210674, "compression_ratio": 1.889795918367347, "no_speech_prob": 0.001500763581134379}, {"id": 432, "seek": 290718, "start": 2907.18, "end": 2918.22, "text": " let's do that. How do we evaluate the body? If only we had a procedure that knew how to evaluate", "tokens": [50364, 718, 311, 360, 300, 13, 1012, 360, 321, 13059, 264, 1772, 30, 759, 787, 321, 632, 257, 10747, 300, 2586, 577, 281, 13059, 50916], "temperature": 0.0, "avg_logprob": -0.14391484627356896, "compression_ratio": 1.7962962962962963, "no_speech_prob": 0.00015115215501282364}, {"id": 433, "seek": 290718, "start": 2918.22, "end": 2923.98, "text": " the body. Well, that's what we're writing. Magic of recursion. Evaluate the body. Now we have to feed", "tokens": [50916, 264, 1772, 13, 1042, 11, 300, 311, 437, 321, 434, 3579, 13, 16154, 295, 20560, 313, 13, 462, 3337, 10107, 264, 1772, 13, 823, 321, 362, 281, 3154, 51204], "temperature": 0.0, "avg_logprob": -0.14391484627356896, "compression_ratio": 1.7962962962962963, "no_speech_prob": 0.00015115215501282364}, {"id": 434, "seek": 290718, "start": 2923.98, "end": 2930.8599999999997, "text": " in an environment and we have to go back and retcon these lines because you don't have environments", "tokens": [51204, 294, 364, 2823, 293, 321, 362, 281, 352, 646, 293, 1533, 1671, 613, 3876, 570, 291, 500, 380, 362, 12388, 51548], "temperature": 0.0, "avg_logprob": -0.14391484627356896, "compression_ratio": 1.7962962962962963, "no_speech_prob": 0.00015115215501282364}, {"id": 435, "seek": 290718, "start": 2930.8599999999997, "end": 2936.14, "text": " yet. So, we have to have an environment. So, for these lines down here is kind of boring.", "tokens": [51548, 1939, 13, 407, 11, 321, 362, 281, 362, 364, 2823, 13, 407, 11, 337, 613, 3876, 760, 510, 307, 733, 295, 9989, 13, 51812], "temperature": 0.0, "avg_logprob": -0.14391484627356896, "compression_ratio": 1.7962962962962963, "no_speech_prob": 0.00015115215501282364}, {"id": 436, "seek": 293614, "start": 2936.22, "end": 2942.62, "text": " It's just the good old environment. Okay? But up here, we need an extended environment.", "tokens": [50368, 467, 311, 445, 264, 665, 1331, 2823, 13, 1033, 30, 583, 493, 510, 11, 321, 643, 364, 10913, 2823, 13, 50688], "temperature": 0.0, "avg_logprob": -0.1307713644845145, "compression_ratio": 1.5585106382978724, "no_speech_prob": 0.00026112920022569597}, {"id": 437, "seek": 293614, "start": 2942.62, "end": 2945.74, "text": " What is the extension? How are we extending the environment?", "tokens": [50688, 708, 307, 264, 10320, 30, 1012, 366, 321, 24360, 264, 2823, 30, 50844], "temperature": 0.0, "avg_logprob": -0.1307713644845145, "compression_ratio": 1.5585106382978724, "no_speech_prob": 0.00026112920022569597}, {"id": 438, "seek": 293614, "start": 2947.98, "end": 2953.58, "text": " Lambda. That's right. You laugh. It is correct. You extend it using lambda.", "tokens": [50956, 45691, 13, 663, 311, 558, 13, 509, 5801, 13, 467, 307, 3006, 13, 509, 10101, 309, 1228, 13607, 13, 51236], "temperature": 0.0, "avg_logprob": -0.1307713644845145, "compression_ratio": 1.5585106382978724, "no_speech_prob": 0.00026112920022569597}, {"id": 439, "seek": 293614, "start": 2956.3799999999997, "end": 2963.1, "text": " Yeah. It's a one-trick pony, but it's got a good trick. Lambda. Why?", "tokens": [51376, 865, 13, 467, 311, 257, 472, 12, 6903, 618, 27342, 11, 457, 309, 311, 658, 257, 665, 4282, 13, 45691, 13, 1545, 30, 51712], "temperature": 0.0, "avg_logprob": -0.1307713644845145, "compression_ratio": 1.5585106382978724, "no_speech_prob": 0.00026112920022569597}, {"id": 440, "seek": 296310, "start": 2963.5, "end": 2972.54, "text": " Whoo. All right. This is when the nerd chills start. Okay. That is an environment. Remember,", "tokens": [50384, 23381, 13, 1057, 558, 13, 639, 307, 562, 264, 23229, 48676, 722, 13, 1033, 13, 663, 307, 364, 2823, 13, 5459, 11, 50836], "temperature": 0.0, "avg_logprob": -0.13294325272242227, "compression_ratio": 1.7579908675799087, "no_speech_prob": 0.00013134595064911991}, {"id": 441, "seek": 296310, "start": 2973.1, "end": 2978.86, "text": " we wanted to look something up. We called X on the environment. Well, that's the sort of creature", "tokens": [50864, 321, 1415, 281, 574, 746, 493, 13, 492, 1219, 1783, 322, 264, 2823, 13, 1042, 11, 300, 311, 264, 1333, 295, 12797, 51152], "temperature": 0.0, "avg_logprob": -0.13294325272242227, "compression_ratio": 1.7579908675799087, "no_speech_prob": 0.00013134595064911991}, {"id": 442, "seek": 296310, "start": 2978.86, "end": 2983.02, "text": " we're talking about. A procedure of one argument. We're creating a procedure of one argument.", "tokens": [51152, 321, 434, 1417, 466, 13, 316, 10747, 295, 472, 6770, 13, 492, 434, 4084, 257, 10747, 295, 472, 6770, 13, 51360], "temperature": 0.0, "avg_logprob": -0.13294325272242227, "compression_ratio": 1.7579908675799087, "no_speech_prob": 0.00013134595064911991}, {"id": 443, "seek": 296310, "start": 2983.02, "end": 2986.22, "text": " That's our environment. So, extended environment. So, what are we going to do with that environment?", "tokens": [51360, 663, 311, 527, 2823, 13, 407, 11, 10913, 2823, 13, 407, 11, 437, 366, 321, 516, 281, 360, 365, 300, 2823, 30, 51520], "temperature": 0.0, "avg_logprob": -0.13294325272242227, "compression_ratio": 1.7579908675799087, "no_speech_prob": 0.00013134595064911991}, {"id": 444, "seek": 298622, "start": 2986.22, "end": 2993.18, "text": " What's going to happen inside? If. Oh, wow. Yeah. That's right. We have to make a choice.", "tokens": [50364, 708, 311, 516, 281, 1051, 1854, 30, 759, 13, 876, 11, 6076, 13, 865, 13, 663, 311, 558, 13, 492, 362, 281, 652, 257, 3922, 13, 50712], "temperature": 0.0, "avg_logprob": -0.16392619700371464, "compression_ratio": 1.4134078212290502, "no_speech_prob": 0.0026726422365754843}, {"id": 445, "seek": 298622, "start": 2993.18, "end": 3000.54, "text": " If of what? Oh, I didn't tell you this part yet. If equals. Well, there's this thing called", "tokens": [50712, 759, 295, 437, 30, 876, 11, 286, 994, 380, 980, 291, 341, 644, 1939, 13, 759, 6915, 13, 1042, 11, 456, 311, 341, 551, 1219, 51080], "temperature": 0.0, "avg_logprob": -0.16392619700371464, "compression_ratio": 1.4134078212290502, "no_speech_prob": 0.0026726422365754843}, {"id": 446, "seek": 298622, "start": 3001.3399999999997, "end": 3007.18, "text": " EQ. Huh. Okay. If what is equal? What two things do we want to compare?", "tokens": [51120, 33580, 13, 8063, 13, 1033, 13, 759, 437, 307, 2681, 30, 708, 732, 721, 360, 321, 528, 281, 6794, 30, 51412], "temperature": 0.0, "avg_logprob": -0.16392619700371464, "compression_ratio": 1.4134078212290502, "no_speech_prob": 0.0026726422365754843}, {"id": 447, "seek": 300718, "start": 3007.58, "end": 3013.2599999999998, "text": " Y and X. Okay. If they are equal, then what do we return?", "tokens": [50384, 398, 293, 1783, 13, 1033, 13, 759, 436, 366, 2681, 11, 550, 437, 360, 321, 2736, 30, 50668], "temperature": 0.0, "avg_logprob": -0.1573333740234375, "compression_ratio": 1.6683168316831682, "no_speech_prob": 0.007345154415816069}, {"id": 448, "seek": 300718, "start": 3015.58, "end": 3023.02, "text": " Not X. Arrg. This is the critical piece. And here's the other critical piece. What do we do", "tokens": [50784, 1726, 1783, 13, 1587, 81, 70, 13, 639, 307, 264, 4924, 2522, 13, 400, 510, 311, 264, 661, 4924, 2522, 13, 708, 360, 321, 360, 51156], "temperature": 0.0, "avg_logprob": -0.1573333740234375, "compression_ratio": 1.6683168316831682, "no_speech_prob": 0.007345154415816069}, {"id": 449, "seek": 300718, "start": 3023.02, "end": 3029.66, "text": " if they don't, if they aren't equal? Inv. We're going to look up an inv. What do we look up?", "tokens": [51156, 498, 436, 500, 380, 11, 498, 436, 3212, 380, 2681, 30, 682, 85, 13, 492, 434, 516, 281, 574, 493, 364, 294, 85, 13, 708, 360, 321, 574, 493, 30, 51488], "temperature": 0.0, "avg_logprob": -0.1573333740234375, "compression_ratio": 1.6683168316831682, "no_speech_prob": 0.007345154415816069}, {"id": 450, "seek": 300718, "start": 3030.94, "end": 3036.54, "text": " Y. Not X. Y. Because Y is what's coming into that lambda, the innermost lambda. That innermost", "tokens": [51552, 398, 13, 1726, 1783, 13, 398, 13, 1436, 398, 307, 437, 311, 1348, 666, 300, 13607, 11, 264, 7714, 966, 555, 13607, 13, 663, 7714, 966, 555, 51832], "temperature": 0.0, "avg_logprob": -0.1573333740234375, "compression_ratio": 1.6683168316831682, "no_speech_prob": 0.007345154415816069}, {"id": 451, "seek": 303654, "start": 3036.54, "end": 3042.46, "text": " lambda is an environment, extended environment. That lambda right there is a procedure. So,", "tokens": [50364, 13607, 307, 364, 2823, 11, 10913, 2823, 13, 663, 13607, 558, 456, 307, 257, 10747, 13, 407, 11, 50660], "temperature": 0.0, "avg_logprob": -0.10824172585098832, "compression_ratio": 1.8076923076923077, "no_speech_prob": 0.00015587556117679924}, {"id": 452, "seek": 303654, "start": 3042.46, "end": 3048.7, "text": " we have what's called a higher order representation of environments and procedures in our interpreter.", "tokens": [50660, 321, 362, 437, 311, 1219, 257, 2946, 1668, 10290, 295, 12388, 293, 13846, 294, 527, 34132, 13, 50972], "temperature": 0.0, "avg_logprob": -0.10824172585098832, "compression_ratio": 1.8076923076923077, "no_speech_prob": 0.00015587556117679924}, {"id": 453, "seek": 303654, "start": 3049.58, "end": 3055.98, "text": " Okay. So, let me go and fix up my VAL experts to give them environments. See, these lines are", "tokens": [51016, 1033, 13, 407, 11, 718, 385, 352, 293, 3191, 493, 452, 691, 3427, 8572, 281, 976, 552, 12388, 13, 3008, 11, 613, 3876, 366, 51336], "temperature": 0.0, "avg_logprob": -0.10824172585098832, "compression_ratio": 1.8076923076923077, "no_speech_prob": 0.00015587556117679924}, {"id": 454, "seek": 303654, "start": 3055.98, "end": 3060.14, "text": " boring because we're not messing with the environment at all. It's not interesting at all.", "tokens": [51336, 9989, 570, 321, 434, 406, 23258, 365, 264, 2823, 412, 439, 13, 467, 311, 406, 1880, 412, 439, 13, 51544], "temperature": 0.0, "avg_logprob": -0.10824172585098832, "compression_ratio": 1.8076923076923077, "no_speech_prob": 0.00015587556117679924}, {"id": 455, "seek": 303654, "start": 3061.02, "end": 3065.58, "text": " And you could say the application line isn't messing with the environment. And that's true", "tokens": [51588, 400, 291, 727, 584, 264, 3861, 1622, 1943, 380, 23258, 365, 264, 2823, 13, 400, 300, 311, 2074, 51816], "temperature": 0.0, "avg_logprob": -0.10824172585098832, "compression_ratio": 1.8076923076923077, "no_speech_prob": 0.00015587556117679924}, {"id": 456, "seek": 306558, "start": 3065.58, "end": 3071.1, "text": " with this representation of procedures and environments. But if we change our representation", "tokens": [50364, 365, 341, 10290, 295, 13846, 293, 12388, 13, 583, 498, 321, 1319, 527, 10290, 50640], "temperature": 0.0, "avg_logprob": -0.06716754389744178, "compression_ratio": 1.892, "no_speech_prob": 0.00023020587104838341}, {"id": 457, "seek": 306558, "start": 3071.1, "end": 3075.98, "text": " of procedures and environments, it actually does matter. You'll see that if we were to use data", "tokens": [50640, 295, 13846, 293, 12388, 11, 309, 767, 775, 1871, 13, 509, 603, 536, 300, 498, 321, 645, 281, 764, 1412, 50884], "temperature": 0.0, "avg_logprob": -0.06716754389744178, "compression_ratio": 1.892, "no_speech_prob": 0.00023020587104838341}, {"id": 458, "seek": 306558, "start": 3075.98, "end": 3084.06, "text": " structures such as lists to represent our environment and procedures, then this application", "tokens": [50884, 9227, 1270, 382, 14511, 281, 2906, 527, 2823, 293, 13846, 11, 550, 341, 3861, 51288], "temperature": 0.0, "avg_logprob": -0.06716754389744178, "compression_ratio": 1.892, "no_speech_prob": 0.00023020587104838341}, {"id": 459, "seek": 306558, "start": 3084.06, "end": 3088.22, "text": " line would have a different looking structure. Basically, the work that we're doing up here", "tokens": [51288, 1622, 576, 362, 257, 819, 1237, 3877, 13, 8537, 11, 264, 589, 300, 321, 434, 884, 493, 510, 51496], "temperature": 0.0, "avg_logprob": -0.06716754389744178, "compression_ratio": 1.892, "no_speech_prob": 0.00023020587104838341}, {"id": 460, "seek": 306558, "start": 3088.22, "end": 3095.18, "text": " in the lambda line, we get put into the application line. All right. So, in theory, this should work", "tokens": [51496, 294, 264, 13607, 1622, 11, 321, 483, 829, 666, 264, 3861, 1622, 13, 1057, 558, 13, 407, 11, 294, 5261, 11, 341, 820, 589, 51844], "temperature": 0.0, "avg_logprob": -0.06716754389744178, "compression_ratio": 1.892, "no_speech_prob": 0.00023020587104838341}, {"id": 461, "seek": 309518, "start": 3095.18, "end": 3105.3399999999997, "text": " now. We'll see if you're all paying attention. Okay. VAL expert, let's try it out. Okay. So,", "tokens": [50364, 586, 13, 492, 603, 536, 498, 291, 434, 439, 6229, 3202, 13, 1033, 13, 691, 3427, 5844, 11, 718, 311, 853, 309, 484, 13, 1033, 13, 407, 11, 50872], "temperature": 0.0, "avg_logprob": -0.17544967137025982, "compression_ratio": 1.5376344086021505, "no_speech_prob": 0.00027799594681710005}, {"id": 462, "seek": 309518, "start": 3105.3399999999997, "end": 3117.66, "text": " add one and hopefully it still works. Oh. All right. We didn't pass it in. Oh, the call was wrong.", "tokens": [50872, 909, 472, 293, 4696, 309, 920, 1985, 13, 876, 13, 1057, 558, 13, 492, 994, 380, 1320, 309, 294, 13, 876, 11, 264, 818, 390, 2085, 13, 51488], "temperature": 0.0, "avg_logprob": -0.17544967137025982, "compression_ratio": 1.5376344086021505, "no_speech_prob": 0.00027799594681710005}, {"id": 463, "seek": 309518, "start": 3117.66, "end": 3124.2999999999997, "text": " Oh, very clever. Okay. So, you're right. We need to call a VAL expert now with an environment.", "tokens": [51488, 876, 11, 588, 13494, 13, 1033, 13, 407, 11, 291, 434, 558, 13, 492, 643, 281, 818, 257, 691, 3427, 5844, 586, 365, 364, 2823, 13, 51820], "temperature": 0.0, "avg_logprob": -0.17544967137025982, "compression_ratio": 1.5376344086021505, "no_speech_prob": 0.00027799594681710005}, {"id": 464, "seek": 312430, "start": 3124.3, "end": 3132.86, "text": " What does an environment look like? Lambda. Yeah. Again. See. All you need is lambda.", "tokens": [50364, 708, 775, 364, 2823, 574, 411, 30, 45691, 13, 865, 13, 3764, 13, 3008, 13, 1057, 291, 643, 307, 13607, 13, 50792], "temperature": 0.0, "avg_logprob": -0.14124676118414087, "compression_ratio": 1.619289340101523, "no_speech_prob": 0.0003352909116074443}, {"id": 465, "seek": 312430, "start": 3134.78, "end": 3138.38, "text": " Y. Okay. And what is this environment going to do?", "tokens": [50888, 398, 13, 1033, 13, 400, 437, 307, 341, 2823, 516, 281, 360, 30, 51068], "temperature": 0.0, "avg_logprob": -0.14124676118414087, "compression_ratio": 1.619289340101523, "no_speech_prob": 0.0003352909116074443}, {"id": 466, "seek": 312430, "start": 3140.6200000000003, "end": 3147.1800000000003, "text": " What happens if we look up a variable like X in this environment? What should happen? Error.", "tokens": [51180, 708, 2314, 498, 321, 574, 493, 257, 7006, 411, 1783, 294, 341, 2823, 30, 708, 820, 1051, 30, 3300, 2874, 13, 51508], "temperature": 0.0, "avg_logprob": -0.14124676118414087, "compression_ratio": 1.619289340101523, "no_speech_prob": 0.0003352909116074443}, {"id": 467, "seek": 312430, "start": 3147.9, "end": 3152.3, "text": " Means it's not bound. Okay. This environment starts out with nothing bound unless we want", "tokens": [51544, 40290, 309, 311, 406, 5472, 13, 1033, 13, 639, 2823, 3719, 484, 365, 1825, 5472, 5969, 321, 528, 51764], "temperature": 0.0, "avg_logprob": -0.14124676118414087, "compression_ratio": 1.619289340101523, "no_speech_prob": 0.0003352909116074443}, {"id": 468, "seek": 315230, "start": 3152.38, "end": 3158.46, "text": " to put it in there. So, we can do a call to a scheme's error. We can call it. Look up. Something", "tokens": [50368, 281, 829, 309, 294, 456, 13, 407, 11, 321, 393, 360, 257, 818, 281, 257, 12232, 311, 6713, 13, 492, 393, 818, 309, 13, 2053, 493, 13, 6595, 50672], "temperature": 0.0, "avg_logprob": -0.15807689319957385, "compression_ratio": 1.5916666666666666, "no_speech_prob": 0.00028680372633971274}, {"id": 469, "seek": 315230, "start": 3158.46, "end": 3166.38, "text": " like that. You know, unbound. All right. Perfect. Okay. We get back seven. I can now look up a", "tokens": [50672, 411, 300, 13, 509, 458, 11, 517, 18767, 13, 1057, 558, 13, 10246, 13, 1033, 13, 492, 483, 646, 3407, 13, 286, 393, 586, 574, 493, 257, 51068], "temperature": 0.0, "avg_logprob": -0.15807689319957385, "compression_ratio": 1.5916666666666666, "no_speech_prob": 0.00028680372633971274}, {"id": 470, "seek": 315230, "start": 3166.38, "end": 3175.5800000000004, "text": " variable in the empty environment like X and I got my error. Okay. I can go ahead and do something", "tokens": [51068, 7006, 294, 264, 6707, 2823, 411, 1783, 293, 286, 658, 452, 6713, 13, 1033, 13, 286, 393, 352, 2286, 293, 360, 746, 51528], "temperature": 0.0, "avg_logprob": -0.15807689319957385, "compression_ratio": 1.5916666666666666, "no_speech_prob": 0.00028680372633971274}, {"id": 471, "seek": 315230, "start": 3175.5800000000004, "end": 3180.54, "text": " like create a lambda expression. Let me try to do lambda xx. Okay. It gives me a procedure,", "tokens": [51528, 411, 1884, 257, 13607, 6114, 13, 961, 385, 853, 281, 360, 13607, 2031, 87, 13, 1033, 13, 467, 2709, 385, 257, 10747, 11, 51776], "temperature": 0.0, "avg_logprob": -0.15807689319957385, "compression_ratio": 1.5916666666666666, "no_speech_prob": 0.00028680372633971274}, {"id": 472, "seek": 318054, "start": 3180.86, "end": 3185.98, "text": " a scheme procedure representing my procedure in my language. I can do a procedure application.", "tokens": [50380, 257, 12232, 10747, 13460, 452, 10747, 294, 452, 2856, 13, 286, 393, 360, 257, 10747, 3861, 13, 50636], "temperature": 0.0, "avg_logprob": -0.13770099439119038, "compression_ratio": 1.668122270742358, "no_speech_prob": 7.481310603907332e-05}, {"id": 473, "seek": 318054, "start": 3185.98, "end": 3193.5, "text": " Let's see if this works. I'm going to apply it to five and get back five. Proof. It works. I can", "tokens": [50636, 961, 311, 536, 498, 341, 1985, 13, 286, 478, 516, 281, 3079, 309, 281, 1732, 293, 483, 646, 1732, 13, 1705, 2670, 13, 467, 1985, 13, 286, 393, 51012], "temperature": 0.0, "avg_logprob": -0.13770099439119038, "compression_ratio": 1.668122270742358, "no_speech_prob": 7.481310603907332e-05}, {"id": 474, "seek": 318054, "start": 3193.5, "end": 3199.1, "text": " do something a little more interesting. Lambda applied to lambda. So, I should get back into", "tokens": [51012, 360, 746, 257, 707, 544, 1880, 13, 45691, 6456, 281, 13607, 13, 407, 11, 286, 820, 483, 646, 666, 51292], "temperature": 0.0, "avg_logprob": -0.13770099439119038, "compression_ratio": 1.668122270742358, "no_speech_prob": 7.481310603907332e-05}, {"id": 475, "seek": 318054, "start": 3199.1, "end": 3208.62, "text": " any function and I can apply the result of that to five. Okay. And then there's one ultimate test", "tokens": [51292, 604, 2445, 293, 286, 393, 3079, 264, 1874, 295, 300, 281, 1732, 13, 1033, 13, 400, 550, 456, 311, 472, 9705, 1500, 51768], "temperature": 0.0, "avg_logprob": -0.13770099439119038, "compression_ratio": 1.668122270742358, "no_speech_prob": 7.481310603907332e-05}, {"id": 476, "seek": 321054, "start": 3211.18, "end": 3218.3, "text": " case. I think we've implemented everything. Oh, there's one more thing we need to add. Let me", "tokens": [50396, 1389, 13, 286, 519, 321, 600, 12270, 1203, 13, 876, 11, 456, 311, 472, 544, 551, 321, 643, 281, 909, 13, 961, 385, 50752], "temperature": 0.0, "avg_logprob": -0.15819657313359248, "compression_ratio": 1.576271186440678, "no_speech_prob": 0.00020980449335183948}, {"id": 477, "seek": 321054, "start": 3218.3, "end": 3224.54, "text": " just add one more clause which is zero, huh? Okay. So, we're going to add one more clause", "tokens": [50752, 445, 909, 472, 544, 25925, 597, 307, 4018, 11, 7020, 30, 1033, 13, 407, 11, 321, 434, 516, 281, 909, 472, 544, 25925, 51064], "temperature": 0.0, "avg_logprob": -0.15819657313359248, "compression_ratio": 1.576271186440678, "no_speech_prob": 0.00020980449335183948}, {"id": 478, "seek": 321054, "start": 3224.54, "end": 3231.98, "text": " to see if something's equal to zero. Let me just follow our usual thing. All right. And I think", "tokens": [51064, 281, 536, 498, 746, 311, 2681, 281, 4018, 13, 961, 385, 445, 1524, 527, 7713, 551, 13, 1057, 558, 13, 400, 286, 519, 51436], "temperature": 0.0, "avg_logprob": -0.15819657313359248, "compression_ratio": 1.576271186440678, "no_speech_prob": 0.00020980449335183948}, {"id": 479, "seek": 323198, "start": 3231.98, "end": 3239.18, "text": " that may be enough now to do what I was going to show. So, there's one standard test case", "tokens": [50364, 300, 815, 312, 1547, 586, 281, 360, 437, 286, 390, 516, 281, 855, 13, 407, 11, 456, 311, 472, 3832, 1500, 1389, 50724], "temperature": 0.0, "avg_logprob": -0.11356048307557037, "compression_ratio": 1.4666666666666666, "no_speech_prob": 0.0034278621897101402}, {"id": 480, "seek": 323198, "start": 3241.02, "end": 3253.66, "text": " which tests everything and it's factorial. And it is factorial using something called,", "tokens": [50816, 597, 6921, 1203, 293, 309, 311, 36916, 13, 400, 309, 307, 36916, 1228, 746, 1219, 11, 51448], "temperature": 0.0, "avg_logprob": -0.11356048307557037, "compression_ratio": 1.4666666666666666, "no_speech_prob": 0.0034278621897101402}, {"id": 481, "seek": 323198, "start": 3253.66, "end": 3259.1, "text": " what Dan Friedman calls the poor man's y-combinator. You'll notice we don't have define", "tokens": [51448, 437, 3394, 17605, 1601, 5498, 264, 4716, 587, 311, 288, 12, 1112, 13496, 1639, 13, 509, 603, 3449, 321, 500, 380, 362, 6964, 51720], "temperature": 0.0, "avg_logprob": -0.11356048307557037, "compression_ratio": 1.4666666666666666, "no_speech_prob": 0.0034278621897101402}, {"id": 482, "seek": 325910, "start": 3259.18, "end": 3262.94, "text": " in our language or in our interpreter. There's something called let rec to define", "tokens": [50368, 294, 527, 2856, 420, 294, 527, 34132, 13, 821, 311, 746, 1219, 718, 850, 281, 6964, 50556], "temperature": 0.0, "avg_logprob": -0.15507773665694502, "compression_ratio": 1.7132075471698114, "no_speech_prob": 0.0030736459884792566}, {"id": 483, "seek": 325910, "start": 3262.94, "end": 3267.18, "text": " mutually recursive functions. We don't have that either. What we do have lambda and the answer", "tokens": [50556, 39144, 20560, 488, 6828, 13, 492, 500, 380, 362, 300, 2139, 13, 708, 321, 360, 362, 13607, 293, 264, 1867, 50768], "temperature": 0.0, "avg_logprob": -0.15507773665694502, "compression_ratio": 1.7132075471698114, "no_speech_prob": 0.0030736459884792566}, {"id": 484, "seek": 325910, "start": 3267.18, "end": 3275.2599999999998, "text": " to everything is lambda as we know. So, this code here is factorial. You can see this got", "tokens": [50768, 281, 1203, 307, 13607, 382, 321, 458, 13, 407, 11, 341, 3089, 510, 307, 36916, 13, 509, 393, 536, 341, 658, 51172], "temperature": 0.0, "avg_logprob": -0.15507773665694502, "compression_ratio": 1.7132075471698114, "no_speech_prob": 0.0030736459884792566}, {"id": 485, "seek": 325910, "start": 3275.2599999999998, "end": 3279.42, "text": " some function calls and stuff like that, but it may be you can believe the math. And then that", "tokens": [51172, 512, 2445, 5498, 293, 1507, 411, 300, 11, 457, 309, 815, 312, 291, 393, 1697, 264, 5221, 13, 400, 550, 300, 51380], "temperature": 0.0, "avg_logprob": -0.15507773665694502, "compression_ratio": 1.7132075471698114, "no_speech_prob": 0.0030736459884792566}, {"id": 486, "seek": 325910, "start": 3279.42, "end": 3286.86, "text": " little part up top with a bunch of lambdas, the part up top basically is what reaches what's", "tokens": [51380, 707, 644, 493, 1192, 365, 257, 3840, 295, 10097, 27476, 11, 264, 644, 493, 1192, 1936, 307, 437, 14235, 437, 311, 51752], "temperature": 0.0, "avg_logprob": -0.15507773665694502, "compression_ratio": 1.7132075471698114, "no_speech_prob": 0.0030736459884792566}, {"id": 487, "seek": 328686, "start": 3286.86, "end": 3292.38, "text": " called a fixed point. And so, you can see in scheme it works. So, let's see if it works in", "tokens": [50364, 1219, 257, 6806, 935, 13, 400, 370, 11, 291, 393, 536, 294, 12232, 309, 1985, 13, 407, 11, 718, 311, 536, 498, 309, 1985, 294, 50640], "temperature": 0.0, "avg_logprob": -0.13402999975742438, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.00033001945121213794}, {"id": 488, "seek": 328686, "start": 3292.38, "end": 3303.6600000000003, "text": " our interpreter. I have no idea. We'll try it out. Yeah! All right. Awesome. Well done.", "tokens": [50640, 527, 34132, 13, 286, 362, 572, 1558, 13, 492, 603, 853, 309, 484, 13, 865, 0, 1057, 558, 13, 10391, 13, 1042, 1096, 13, 51204], "temperature": 0.0, "avg_logprob": -0.13402999975742438, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.00033001945121213794}, {"id": 489, "seek": 328686, "start": 3308.78, "end": 3313.7400000000002, "text": " Okay. So, let's look at the interpreter real quick and just a couple of words about it.", "tokens": [51460, 1033, 13, 407, 11, 718, 311, 574, 412, 264, 34132, 957, 1702, 293, 445, 257, 1916, 295, 2283, 466, 309, 13, 51708], "temperature": 0.0, "avg_logprob": -0.13402999975742438, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.00033001945121213794}, {"id": 490, "seek": 331374, "start": 3314.7, "end": 3321.18, "text": " So, the first thing I'll say is that everything except the last three lines is an abomination.", "tokens": [50412, 407, 11, 264, 700, 551, 286, 603, 584, 307, 300, 1203, 3993, 264, 1036, 1045, 3876, 307, 364, 410, 46970, 13, 50736], "temperature": 0.0, "avg_logprob": -0.12298834629547901, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.00026938115479424596}, {"id": 491, "seek": 331374, "start": 3322.62, "end": 3329.18, "text": " So, we are going to remove the abominable code. Bam, bam, bam, bam, bam, bam, bam,", "tokens": [50808, 407, 11, 321, 366, 516, 281, 4159, 264, 410, 6981, 712, 3089, 13, 26630, 11, 18132, 11, 18132, 11, 18132, 11, 18132, 11, 18132, 11, 18132, 11, 51136], "temperature": 0.0, "avg_logprob": -0.12298834629547901, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.00026938115479424596}, {"id": 492, "seek": 331374, "start": 3330.06, "end": 3337.3399999999997, "text": " that. Okay. This is the 3 by 5 card interpreter. I may have to reformat it slightly differently", "tokens": [51180, 300, 13, 1033, 13, 639, 307, 264, 805, 538, 1025, 2920, 34132, 13, 286, 815, 362, 281, 8290, 267, 309, 4748, 7614, 51544], "temperature": 0.0, "avg_logprob": -0.12298834629547901, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.00026938115479424596}, {"id": 493, "seek": 333734, "start": 3337.34, "end": 3344.3, "text": " for the screen, but if you have a 3 by 4 meter card, I guess you could fit at this side. But,", "tokens": [50364, 337, 264, 2568, 11, 457, 498, 291, 362, 257, 805, 538, 1017, 9255, 2920, 11, 286, 2041, 291, 727, 3318, 412, 341, 1252, 13, 583, 11, 50712], "temperature": 0.0, "avg_logprob": -0.10151744805849515, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.01150241307914257}, {"id": 494, "seek": 333734, "start": 3344.3, "end": 3349.58, "text": " you can actually write down at least on a 4 by 6 card and that is the magic. Okay. This is the", "tokens": [50712, 291, 393, 767, 2464, 760, 412, 1935, 322, 257, 1017, 538, 1386, 2920, 293, 300, 307, 264, 5585, 13, 1033, 13, 639, 307, 264, 50976], "temperature": 0.0, "avg_logprob": -0.10151744805849515, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.01150241307914257}, {"id": 495, "seek": 333734, "start": 3349.58, "end": 3355.26, "text": " key to the universe. You have everything here. You have lexical scope. You have higher order", "tokens": [50976, 2141, 281, 264, 6445, 13, 509, 362, 1203, 510, 13, 509, 362, 476, 87, 804, 11923, 13, 509, 362, 2946, 1668, 51260], "temperature": 0.0, "avg_logprob": -0.10151744805849515, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.01150241307914257}, {"id": 496, "seek": 333734, "start": 3355.26, "end": 3360.86, "text": " functions. You have all these sorts of things. Numbers, you don't need them. You can do church", "tokens": [51260, 6828, 13, 509, 362, 439, 613, 7527, 295, 721, 13, 22592, 1616, 11, 291, 500, 380, 643, 552, 13, 509, 393, 360, 4128, 51540], "temperature": 0.0, "avg_logprob": -0.10151744805849515, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.01150241307914257}, {"id": 497, "seek": 336086, "start": 3360.86, "end": 3369.42, "text": " encoding. Okay. You don't need if. You can encode if as well. You encode all those things.", "tokens": [50364, 43430, 13, 1033, 13, 509, 500, 380, 643, 498, 13, 509, 393, 2058, 1429, 498, 382, 731, 13, 509, 2058, 1429, 439, 729, 721, 13, 50792], "temperature": 0.0, "avg_logprob": -0.1315702418891751, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.004330439493060112}, {"id": 498, "seek": 336086, "start": 3369.42, "end": 3377.1, "text": " They're kind of nonsense. Yes, they're useful for efficiency and expressiveness. You don't need", "tokens": [50792, 814, 434, 733, 295, 14925, 13, 1079, 11, 436, 434, 4420, 337, 10493, 293, 5109, 8477, 13, 509, 500, 380, 643, 51176], "temperature": 0.0, "avg_logprob": -0.1315702418891751, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.004330439493060112}, {"id": 499, "seek": 336086, "start": 3377.1, "end": 3385.1, "text": " them. This is all you need. It's Turing complete. Came before the Turing machine. This is similar", "tokens": [51176, 552, 13, 639, 307, 439, 291, 643, 13, 467, 311, 314, 1345, 3566, 13, 36042, 949, 264, 314, 1345, 3479, 13, 639, 307, 2531, 51576], "temperature": 0.0, "avg_logprob": -0.1315702418891751, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.004330439493060112}, {"id": 500, "seek": 336086, "start": 3385.1, "end": 3389.9, "text": " related to something called the lambda calculus. This is a little bit different because we're using", "tokens": [51576, 4077, 281, 746, 1219, 264, 13607, 33400, 13, 639, 307, 257, 707, 857, 819, 570, 321, 434, 1228, 51816], "temperature": 0.0, "avg_logprob": -0.1315702418891751, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.004330439493060112}, {"id": 501, "seek": 338990, "start": 3389.98, "end": 3396.2200000000003, "text": " an environment instead of beta reduction if you're familiar with that. But similar idea. People", "tokens": [50368, 364, 2823, 2602, 295, 9861, 11004, 498, 291, 434, 4963, 365, 300, 13, 583, 2531, 1558, 13, 3432, 50680], "temperature": 0.0, "avg_logprob": -0.15424618089055442, "compression_ratio": 1.751111111111111, "no_speech_prob": 0.0010147824650630355}, {"id": 502, "seek": 338990, "start": 3396.2200000000003, "end": 3401.82, "text": " would call this the call by value lambda calculus interpreter. Environment passing. You can play", "tokens": [50680, 576, 818, 341, 264, 818, 538, 2158, 13607, 33400, 34132, 13, 35354, 8437, 13, 509, 393, 862, 50960], "temperature": 0.0, "avg_logprob": -0.15424618089055442, "compression_ratio": 1.751111111111111, "no_speech_prob": 0.0010147824650630355}, {"id": 503, "seek": 338990, "start": 3401.82, "end": 3408.14, "text": " all sorts of really interesting games with this. You can change the representation of the environments", "tokens": [50960, 439, 7527, 295, 534, 1880, 2813, 365, 341, 13, 509, 393, 1319, 264, 10290, 295, 264, 12388, 51276], "temperature": 0.0, "avg_logprob": -0.15424618089055442, "compression_ratio": 1.751111111111111, "no_speech_prob": 0.0010147824650630355}, {"id": 504, "seek": 338990, "start": 3408.7000000000003, "end": 3415.42, "text": " and the procedures. You can use data structures. You can do lists and pattern matching. You can do", "tokens": [51304, 293, 264, 13846, 13, 509, 393, 764, 1412, 9227, 13, 509, 393, 360, 14511, 293, 5102, 14324, 13, 509, 393, 360, 51640], "temperature": 0.0, "avg_logprob": -0.15424618089055442, "compression_ratio": 1.751111111111111, "no_speech_prob": 0.0010147824650630355}, {"id": 505, "seek": 341542, "start": 3415.42, "end": 3420.2200000000003, "text": " all sorts of really cool things. You can add additional arguments just like we added the", "tokens": [50364, 439, 7527, 295, 534, 1627, 721, 13, 509, 393, 909, 4497, 12869, 445, 411, 321, 3869, 264, 50604], "temperature": 0.0, "avg_logprob": -0.10878582535503066, "compression_ratio": 1.8129770992366412, "no_speech_prob": 0.001672376529313624}, {"id": 506, "seek": 341542, "start": 3420.2200000000003, "end": 3425.26, "text": " environment. So now we have an environment passing interpreter. You can add a store as well, which", "tokens": [50604, 2823, 13, 407, 586, 321, 362, 364, 2823, 8437, 34132, 13, 509, 393, 909, 257, 3531, 382, 731, 11, 597, 50856], "temperature": 0.0, "avg_logprob": -0.10878582535503066, "compression_ratio": 1.8129770992366412, "no_speech_prob": 0.001672376529313624}, {"id": 507, "seek": 341542, "start": 3425.26, "end": 3432.3, "text": " contains basically the current value of a variable. And you can change those values. So if you have", "tokens": [50856, 8306, 1936, 264, 2190, 2158, 295, 257, 7006, 13, 400, 291, 393, 1319, 729, 4190, 13, 407, 498, 291, 362, 51208], "temperature": 0.0, "avg_logprob": -0.10878582535503066, "compression_ratio": 1.8129770992366412, "no_speech_prob": 0.001672376529313624}, {"id": 508, "seek": 341542, "start": 3432.3, "end": 3438.54, "text": " an environment and a store, that allows you to do mutation like set bang and scheme. You can also add", "tokens": [51208, 364, 2823, 293, 257, 3531, 11, 300, 4045, 291, 281, 360, 27960, 411, 992, 8550, 293, 12232, 13, 509, 393, 611, 909, 51520], "temperature": 0.0, "avg_logprob": -0.10878582535503066, "compression_ratio": 1.8129770992366412, "no_speech_prob": 0.001672376529313624}, {"id": 509, "seek": 341542, "start": 3438.54, "end": 3443.42, "text": " continuations. You can CPS the interpreter. Do another correctness preserving program", "tokens": [51520, 2993, 763, 13, 509, 393, 383, 6273, 264, 34132, 13, 1144, 1071, 3006, 1287, 33173, 1461, 51764], "temperature": 0.0, "avg_logprob": -0.10878582535503066, "compression_ratio": 1.8129770992366412, "no_speech_prob": 0.001672376529313624}, {"id": 510, "seek": 344342, "start": 3443.42, "end": 3447.82, "text": " transformation. CPS it. That gives you a representation of the rest of the program at any", "tokens": [50364, 9887, 13, 383, 6273, 309, 13, 663, 2709, 291, 257, 10290, 295, 264, 1472, 295, 264, 1461, 412, 604, 50584], "temperature": 0.0, "avg_logprob": -0.10813618451356888, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.004749690648168325}, {"id": 511, "seek": 344342, "start": 3447.82, "end": 3453.42, "text": " point potentially as a procedure. And you can just call that continuation anywhere you want.", "tokens": [50584, 935, 7263, 382, 257, 10747, 13, 400, 291, 393, 445, 818, 300, 29357, 4992, 291, 528, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10813618451356888, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.004749690648168325}, {"id": 512, "seek": 344342, "start": 3453.42, "end": 3457.82, "text": " And you can implement all sorts of control structures. If you CPS your program twice, you", "tokens": [50864, 400, 291, 393, 4445, 439, 7527, 295, 1969, 9227, 13, 759, 291, 383, 6273, 428, 1461, 6091, 11, 291, 51084], "temperature": 0.0, "avg_logprob": -0.10813618451356888, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.004749690648168325}, {"id": 513, "seek": 344342, "start": 3457.82, "end": 3461.82, "text": " have two continuations. That gives you limited continuations. You can do basically every control", "tokens": [51084, 362, 732, 2993, 763, 13, 663, 2709, 291, 5567, 2993, 763, 13, 509, 393, 360, 1936, 633, 1969, 51284], "temperature": 0.0, "avg_logprob": -0.10813618451356888, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.004749690648168325}, {"id": 514, "seek": 344342, "start": 3461.82, "end": 3465.82, "text": " structure at that point. All sorts of very interesting games you can play. You can change.", "tokens": [51284, 3877, 412, 300, 935, 13, 1057, 7527, 295, 588, 1880, 2813, 291, 393, 862, 13, 509, 393, 1319, 13, 51484], "temperature": 0.0, "avg_logprob": -0.10813618451356888, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.004749690648168325}, {"id": 515, "seek": 344342, "start": 3465.82, "end": 3472.78, "text": " Anyway, I'm not going to get into all that. But what I recommend you do is what Dan suggested", "tokens": [51484, 5684, 11, 286, 478, 406, 516, 281, 483, 666, 439, 300, 13, 583, 437, 286, 2748, 291, 360, 307, 437, 3394, 10945, 51832], "temperature": 0.0, "avg_logprob": -0.10813618451356888, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.004749690648168325}, {"id": 516, "seek": 347278, "start": 3472.86, "end": 3477.26, "text": " to all his students. And as far as I know, I'm the only one who did it. Maybe other people did.", "tokens": [50368, 281, 439, 702, 1731, 13, 400, 382, 1400, 382, 286, 458, 11, 286, 478, 264, 787, 472, 567, 630, 309, 13, 2704, 661, 561, 630, 13, 50588], "temperature": 0.0, "avg_logprob": -0.12483041654757368, "compression_ratio": 1.6643356643356644, "no_speech_prob": 0.0013662631390616298}, {"id": 517, "seek": 347278, "start": 3477.26, "end": 3483.7400000000002, "text": " He said take a four by six card stack of them and spend 45 minutes writing this down over and over", "tokens": [50588, 634, 848, 747, 257, 1451, 538, 2309, 2920, 8630, 295, 552, 293, 3496, 6905, 2077, 3579, 341, 760, 670, 293, 670, 50912], "temperature": 0.0, "avg_logprob": -0.12483041654757368, "compression_ratio": 1.6643356643356644, "no_speech_prob": 0.0013662631390616298}, {"id": 518, "seek": 347278, "start": 3483.7400000000002, "end": 3489.82, "text": " again until your eyes start bleeding. Sear it into your brain and your heart. And you'll never", "tokens": [50912, 797, 1826, 428, 2575, 722, 19312, 13, 1100, 289, 309, 666, 428, 3567, 293, 428, 1917, 13, 400, 291, 603, 1128, 51216], "temperature": 0.0, "avg_logprob": -0.12483041654757368, "compression_ratio": 1.6643356643356644, "no_speech_prob": 0.0013662631390616298}, {"id": 519, "seek": 347278, "start": 3489.82, "end": 3496.78, "text": " forget it. And if you really understand it and you try, you know, turning the crank and doing a", "tokens": [51216, 2870, 309, 13, 400, 498, 291, 534, 1223, 309, 293, 291, 853, 11, 291, 458, 11, 6246, 264, 21263, 293, 884, 257, 51564], "temperature": 0.0, "avg_logprob": -0.12483041654757368, "compression_ratio": 1.6643356643356644, "no_speech_prob": 0.0013662631390616298}, {"id": 520, "seek": 347278, "start": 3496.78, "end": 3502.38, "text": " bunch of evaluations, at some point you'll start to get some idea of the magic. But all of", "tokens": [51564, 3840, 295, 43085, 11, 412, 512, 935, 291, 603, 722, 281, 483, 512, 1558, 295, 264, 5585, 13, 583, 439, 295, 51844], "temperature": 0.0, "avg_logprob": -0.12483041654757368, "compression_ratio": 1.6643356643356644, "no_speech_prob": 0.0013662631390616298}, {"id": 521, "seek": 350238, "start": 3502.46, "end": 3509.34, "text": " computation, all of the turing complete processes, all of, you know, the notion of computable", "tokens": [50368, 24903, 11, 439, 295, 264, 256, 1345, 3566, 7555, 11, 439, 295, 11, 291, 458, 11, 264, 10710, 295, 2807, 712, 50712], "temperature": 0.0, "avg_logprob": -0.17846657832463583, "compression_ratio": 1.7064220183486238, "no_speech_prob": 0.00014421023661270738}, {"id": 522, "seek": 350238, "start": 3509.34, "end": 3515.9, "text": " functions are within this code. The secrets there. You can do things that run forever. You", "tokens": [50712, 6828, 366, 1951, 341, 3089, 13, 440, 14093, 456, 13, 509, 393, 360, 721, 300, 1190, 5680, 13, 509, 51040], "temperature": 0.0, "avg_logprob": -0.17846657832463583, "compression_ratio": 1.7064220183486238, "no_speech_prob": 0.00014421023661270738}, {"id": 523, "seek": 350238, "start": 3515.9, "end": 3520.46, "text": " can do all sorts of things. They're very interesting. You can express colats inside of it. Okay.", "tokens": [51040, 393, 360, 439, 7527, 295, 721, 13, 814, 434, 588, 1880, 13, 509, 393, 5109, 1173, 1720, 1854, 295, 309, 13, 1033, 13, 51268], "temperature": 0.0, "avg_logprob": -0.17846657832463583, "compression_ratio": 1.7064220183486238, "no_speech_prob": 0.00014421023661270738}, {"id": 524, "seek": 350238, "start": 3521.34, "end": 3529.02, "text": " So that is sort of like the teaser. And, you know, you can go off to races once you really", "tokens": [51312, 407, 300, 307, 1333, 295, 411, 264, 35326, 13, 400, 11, 291, 458, 11, 291, 393, 352, 766, 281, 15484, 1564, 291, 534, 51696], "temperature": 0.0, "avg_logprob": -0.17846657832463583, "compression_ratio": 1.7064220183486238, "no_speech_prob": 0.00014421023661270738}, {"id": 525, "seek": 352902, "start": 3529.02, "end": 3534.94, "text": " have this on the brain. You can do things like change the type of scope you have. You can go", "tokens": [50364, 362, 341, 322, 264, 3567, 13, 509, 393, 360, 721, 411, 1319, 264, 2010, 295, 11923, 291, 362, 13, 509, 393, 352, 50660], "temperature": 0.0, "avg_logprob": -0.10777154564857483, "compression_ratio": 1.6784140969162995, "no_speech_prob": 0.0013027904788032174}, {"id": 526, "seek": 352902, "start": 3534.94, "end": 3541.42, "text": " from what we have here. It's just called lexical scope or static scoping to dynamic scoping by", "tokens": [50660, 490, 437, 321, 362, 510, 13, 467, 311, 445, 1219, 476, 87, 804, 11923, 420, 13437, 795, 26125, 281, 8546, 795, 26125, 538, 50984], "temperature": 0.0, "avg_logprob": -0.10777154564857483, "compression_ratio": 1.6784140969162995, "no_speech_prob": 0.0013027904788032174}, {"id": 527, "seek": 352902, "start": 3541.42, "end": 3547.18, "text": " changing how the environment variable lookup works and things like that. I'm not going to go", "tokens": [50984, 4473, 577, 264, 2823, 7006, 574, 1010, 1985, 293, 721, 411, 300, 13, 286, 478, 406, 516, 281, 352, 51272], "temperature": 0.0, "avg_logprob": -0.10777154564857483, "compression_ratio": 1.6784140969162995, "no_speech_prob": 0.0013027904788032174}, {"id": 528, "seek": 352902, "start": 3547.18, "end": 3550.94, "text": " into all those things. If you're interested in that, there's a book called Essentials of Programming", "tokens": [51272, 666, 439, 729, 721, 13, 759, 291, 434, 3102, 294, 300, 11, 456, 311, 257, 1446, 1219, 49736, 82, 295, 8338, 2810, 51460], "temperature": 0.0, "avg_logprob": -0.10777154564857483, "compression_ratio": 1.6784140969162995, "no_speech_prob": 0.0013027904788032174}, {"id": 529, "seek": 355094, "start": 3550.94, "end": 3557.7400000000002, "text": " Languages by Dan Friedman and Mitchell Wan that talks about a lot of these things. And", "tokens": [50364, 13313, 84, 1660, 538, 3394, 17605, 1601, 293, 27582, 28932, 300, 6686, 466, 257, 688, 295, 613, 721, 13, 400, 50704], "temperature": 0.0, "avg_logprob": -0.1621056874593099, "compression_ratio": 1.4142011834319526, "no_speech_prob": 0.04733124002814293}, {"id": 530, "seek": 355094, "start": 3558.86, "end": 3566.3, "text": " there are lots of other resources you can find. What I want to show you now is what happens when", "tokens": [50760, 456, 366, 3195, 295, 661, 3593, 291, 393, 915, 13, 708, 286, 528, 281, 855, 291, 586, 307, 437, 2314, 562, 51132], "temperature": 0.0, "avg_logprob": -0.1621056874593099, "compression_ratio": 1.4142011834319526, "no_speech_prob": 0.04733124002814293}, {"id": 531, "seek": 355094, "start": 3567.18, "end": 3573.82, "text": " you play these games in sort of a different context. So", "tokens": [51176, 291, 862, 613, 2813, 294, 1333, 295, 257, 819, 4319, 13, 407, 51508], "temperature": 0.0, "avg_logprob": -0.1621056874593099, "compression_ratio": 1.4142011834319526, "no_speech_prob": 0.04733124002814293}, {"id": 532, "seek": 358094, "start": 3581.7400000000002, "end": 3587.58, "text": " this is a paper by John McCarthy called a micromanual for Lisp, not the whole truth.", "tokens": [50404, 341, 307, 257, 3035, 538, 2619, 44085, 1219, 257, 3123, 81, 4277, 901, 337, 441, 7631, 11, 406, 264, 1379, 3494, 13, 50696], "temperature": 0.0, "avg_logprob": -0.18023778246594713, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.001866987207904458}, {"id": 533, "seek": 358094, "start": 3588.86, "end": 3595.66, "text": " And in this, he gives the rules for an interpreter. Okay. So you were asking about cons. Well,", "tokens": [50760, 400, 294, 341, 11, 415, 2709, 264, 4474, 337, 364, 34132, 13, 1033, 13, 407, 291, 645, 3365, 466, 1014, 13, 1042, 11, 51100], "temperature": 0.0, "avg_logprob": -0.18023778246594713, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.001866987207904458}, {"id": 534, "seek": 358094, "start": 3595.66, "end": 3603.82, "text": " here's your cons. This is what cons does. And he gives basically the rules for a Lisp evaluator.", "tokens": [51100, 510, 311, 428, 1014, 13, 639, 307, 437, 1014, 775, 13, 400, 415, 2709, 1936, 264, 4474, 337, 257, 441, 7631, 6133, 1639, 13, 51508], "temperature": 0.0, "avg_logprob": -0.18023778246594713, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.001866987207904458}, {"id": 535, "seek": 360382, "start": 3604.78, "end": 3611.9, "text": " And, you know, basically, he's calling his evaluator value as our val expert. And you can see", "tokens": [50412, 400, 11, 291, 458, 11, 1936, 11, 415, 311, 5141, 702, 6133, 1639, 2158, 382, 527, 1323, 5844, 13, 400, 291, 393, 536, 50768], "temperature": 0.0, "avg_logprob": -0.19319484450600363, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.007117022294551134}, {"id": 536, "seek": 360382, "start": 3611.9, "end": 3619.1000000000004, "text": " that he has these equal signs. You're saying that expression is equal to that value. Now,", "tokens": [50768, 300, 415, 575, 613, 2681, 7880, 13, 509, 434, 1566, 300, 6114, 307, 2681, 281, 300, 2158, 13, 823, 11, 51128], "temperature": 0.0, "avg_logprob": -0.19319484450600363, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.007117022294551134}, {"id": 537, "seek": 360382, "start": 3619.1000000000004, "end": 3624.3, "text": " equal, the notion of equality is actually one of the most subtle notions in all of mathematics and", "tokens": [51128, 2681, 11, 264, 10710, 295, 14949, 307, 767, 472, 295, 264, 881, 13743, 35799, 294, 439, 295, 18666, 293, 51388], "temperature": 0.0, "avg_logprob": -0.19319484450600363, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.007117022294551134}, {"id": 538, "seek": 360382, "start": 3624.3, "end": 3628.78, "text": " logic and computer science. Anyone who thinks they understand equality is just kind of some", "tokens": [51388, 9952, 293, 3820, 3497, 13, 14643, 567, 7309, 436, 1223, 14949, 307, 445, 733, 295, 512, 51612], "temperature": 0.0, "avg_logprob": -0.19319484450600363, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.007117022294551134}, {"id": 539, "seek": 362878, "start": 3628.78, "end": 3634.46, "text": " throwaway idea hasn't thought about it hard enough. Like homotopy type theory. All these people", "tokens": [50364, 3507, 10318, 1558, 6132, 380, 1194, 466, 309, 1152, 1547, 13, 1743, 3655, 310, 19680, 2010, 5261, 13, 1057, 613, 561, 50648], "temperature": 0.0, "avg_logprob": -0.12464630603790283, "compression_ratio": 1.6369863013698631, "no_speech_prob": 0.00400465726852417}, {"id": 540, "seek": 362878, "start": 3635.1800000000003, "end": 3640.94, "text": " trying to understand different notions of equality there. So it's a very deep topic. And one of", "tokens": [50684, 1382, 281, 1223, 819, 35799, 295, 14949, 456, 13, 407, 309, 311, 257, 588, 2452, 4829, 13, 400, 472, 295, 50972], "temperature": 0.0, "avg_logprob": -0.12464630603790283, "compression_ratio": 1.6369863013698631, "no_speech_prob": 0.00400465726852417}, {"id": 541, "seek": 362878, "start": 3640.94, "end": 3646.46, "text": " the things that's interesting is that, you know, we tend to read that equal sign if we're doing", "tokens": [50972, 264, 721, 300, 311, 1880, 307, 300, 11, 291, 458, 11, 321, 3928, 281, 1401, 300, 2681, 1465, 498, 321, 434, 884, 51248], "temperature": 0.0, "avg_logprob": -0.12464630603790283, "compression_ratio": 1.6369863013698631, "no_speech_prob": 0.00400465726852417}, {"id": 542, "seek": 362878, "start": 3646.46, "end": 3651.1800000000003, "text": " programming, programming languages, interpreters, compiler, stuff like that, basically is one", "tokens": [51248, 9410, 11, 9410, 8650, 11, 17489, 1559, 11, 31958, 11, 1507, 411, 300, 11, 1936, 307, 472, 51484], "temperature": 0.0, "avg_logprob": -0.12464630603790283, "compression_ratio": 1.6369863013698631, "no_speech_prob": 0.00400465726852417}, {"id": 543, "seek": 362878, "start": 3651.1800000000003, "end": 3657.5800000000004, "text": " directional from left to right. So we have an expression. We evaluate it. We write some function", "tokens": [51484, 42242, 490, 1411, 281, 558, 13, 407, 321, 362, 364, 6114, 13, 492, 13059, 309, 13, 492, 2464, 512, 2445, 51804], "temperature": 0.0, "avg_logprob": -0.12464630603790283, "compression_ratio": 1.6369863013698631, "no_speech_prob": 0.00400465726852417}, {"id": 544, "seek": 365758, "start": 3657.58, "end": 3661.66, "text": " that's an evaluator. We compile it, some code that's going to run it. And we're going from that", "tokens": [50364, 300, 311, 364, 6133, 1639, 13, 492, 31413, 309, 11, 512, 3089, 300, 311, 516, 281, 1190, 309, 13, 400, 321, 434, 516, 490, 300, 50568], "temperature": 0.0, "avg_logprob": -0.09936913447593575, "compression_ratio": 1.8421052631578947, "no_speech_prob": 0.0004305047623347491}, {"id": 545, "seek": 365758, "start": 3661.66, "end": 3666.54, "text": " expression to that value. It's not really an equal sign. It's like a right-hand side arrow if you", "tokens": [50568, 6114, 281, 300, 2158, 13, 467, 311, 406, 534, 364, 2681, 1465, 13, 467, 311, 411, 257, 558, 12, 5543, 1252, 11610, 498, 291, 50812], "temperature": 0.0, "avg_logprob": -0.09936913447593575, "compression_ratio": 1.8421052631578947, "no_speech_prob": 0.0004305047623347491}, {"id": 546, "seek": 365758, "start": 3666.54, "end": 3672.7, "text": " want to think of it that way. But what if we took the equal sign seriously? What if we seriously", "tokens": [50812, 528, 281, 519, 295, 309, 300, 636, 13, 583, 437, 498, 321, 1890, 264, 2681, 1465, 6638, 30, 708, 498, 321, 6638, 51120], "temperature": 0.0, "avg_logprob": -0.09936913447593575, "compression_ratio": 1.8421052631578947, "no_speech_prob": 0.0004305047623347491}, {"id": 547, "seek": 365758, "start": 3672.7, "end": 3678.86, "text": " said, all right, well, this is like an algebra, right? And what do you do in algebra? When you were", "tokens": [51120, 848, 11, 439, 558, 11, 731, 11, 341, 307, 411, 364, 21989, 11, 558, 30, 400, 437, 360, 291, 360, 294, 21989, 30, 1133, 291, 645, 51428], "temperature": 0.0, "avg_logprob": -0.09936913447593575, "compression_ratio": 1.8421052631578947, "no_speech_prob": 0.0004305047623347491}, {"id": 548, "seek": 365758, "start": 3678.86, "end": 3684.46, "text": " in, you know, I'm not talking about like the modern algebra. I'm talking about like, you know, when", "tokens": [51428, 294, 11, 291, 458, 11, 286, 478, 406, 1417, 466, 411, 264, 4363, 21989, 13, 286, 478, 1417, 466, 411, 11, 291, 458, 11, 562, 51708], "temperature": 0.0, "avg_logprob": -0.09936913447593575, "compression_ratio": 1.8421052631578947, "no_speech_prob": 0.0004305047623347491}, {"id": 549, "seek": 368446, "start": 3684.46, "end": 3688.06, "text": " you were in high school or whatever, you took algebra in high school. What sort of things did", "tokens": [50364, 291, 645, 294, 1090, 1395, 420, 2035, 11, 291, 1890, 21989, 294, 1090, 1395, 13, 708, 1333, 295, 721, 630, 50544], "temperature": 0.0, "avg_logprob": -0.07369072475130596, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.0007320365402847528}, {"id": 550, "seek": 368446, "start": 3688.06, "end": 3694.78, "text": " you do in algebra? Solve equations. You put in variables like x and y and z and things like that.", "tokens": [50544, 291, 360, 294, 21989, 30, 7026, 303, 11787, 13, 509, 829, 294, 9102, 411, 2031, 293, 288, 293, 710, 293, 721, 411, 300, 13, 50880], "temperature": 0.0, "avg_logprob": -0.07369072475130596, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.0007320365402847528}, {"id": 551, "seek": 368446, "start": 3694.78, "end": 3699.66, "text": " And you're supposed to figure out what is the value of that variable, right? That makes both sides", "tokens": [50880, 400, 291, 434, 3442, 281, 2573, 484, 437, 307, 264, 2158, 295, 300, 7006, 11, 558, 30, 663, 1669, 1293, 4881, 51124], "temperature": 0.0, "avg_logprob": -0.07369072475130596, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.0007320365402847528}, {"id": 552, "seek": 368446, "start": 3699.66, "end": 3705.9, "text": " equal. We're going to do that. So I've done some of the heavy lifting for you with a bunch of other", "tokens": [51124, 2681, 13, 492, 434, 516, 281, 360, 300, 13, 407, 286, 600, 1096, 512, 295, 264, 4676, 15798, 337, 291, 365, 257, 3840, 295, 661, 51436], "temperature": 0.0, "avg_logprob": -0.07369072475130596, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.0007320365402847528}, {"id": 553, "seek": 368446, "start": 3705.9, "end": 3711.18, "text": " people. We spent like the last 12 years doing it. And I'm going to show you some of the stuff that", "tokens": [51436, 561, 13, 492, 4418, 411, 264, 1036, 2272, 924, 884, 309, 13, 400, 286, 478, 516, 281, 855, 291, 512, 295, 264, 1507, 300, 51700], "temperature": 0.0, "avg_logprob": -0.07369072475130596, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.0007320365402847528}, {"id": 554, "seek": 371118, "start": 3711.18, "end": 3718.7799999999997, "text": " we got from it. So what we did was we wrote, and I started this at Indiana with Dan Friedman,", "tokens": [50364, 321, 658, 490, 309, 13, 407, 437, 321, 630, 390, 321, 4114, 11, 293, 286, 1409, 341, 412, 21858, 365, 3394, 17605, 1601, 11, 50744], "temperature": 0.0, "avg_logprob": -0.13830498726137222, "compression_ratio": 1.5308641975308641, "no_speech_prob": 0.0008556020329706371}, {"id": 555, "seek": 371118, "start": 3718.7799999999997, "end": 3721.8199999999997, "text": " a bunch of other talented people. I'm working right now with a whole bunch of other people,", "tokens": [50744, 257, 3840, 295, 661, 13467, 561, 13, 286, 478, 1364, 558, 586, 365, 257, 1379, 3840, 295, 661, 561, 11, 50896], "temperature": 0.0, "avg_logprob": -0.13830498726137222, "compression_ratio": 1.5308641975308641, "no_speech_prob": 0.0008556020329706371}, {"id": 556, "seek": 371118, "start": 3721.8199999999997, "end": 3727.1, "text": " including like Michael Ballantyne at Utah and Greg Rosenblatt and all these other fine folks.", "tokens": [50896, 3009, 411, 5116, 10744, 394, 88, 716, 412, 20226, 293, 11490, 33630, 5199, 1591, 293, 439, 613, 661, 2489, 4024, 13, 51160], "temperature": 0.0, "avg_logprob": -0.13830498726137222, "compression_ratio": 1.5308641975308641, "no_speech_prob": 0.0008556020329706371}, {"id": 557, "seek": 371118, "start": 3727.74, "end": 3735.58, "text": " We wrote an interpreter in what's called a logic programming language, okay? Or a relational", "tokens": [51192, 492, 4114, 364, 34132, 294, 437, 311, 1219, 257, 9952, 9410, 2856, 11, 1392, 30, 1610, 257, 38444, 51584], "temperature": 0.0, "avg_logprob": -0.13830498726137222, "compression_ratio": 1.5308641975308641, "no_speech_prob": 0.0008556020329706371}, {"id": 558, "seek": 373558, "start": 3735.58, "end": 3743.18, "text": " programming language, that's what I normally call it. And this one doesn't fit on a 3x5 card,", "tokens": [50364, 9410, 2856, 11, 300, 311, 437, 286, 5646, 818, 309, 13, 400, 341, 472, 1177, 380, 3318, 322, 257, 805, 87, 20, 2920, 11, 50744], "temperature": 0.0, "avg_logprob": -0.11862968263171968, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.005380716640502214}, {"id": 559, "seek": 373558, "start": 3743.18, "end": 3751.1, "text": " but it's not that long, actually. It's what? 403 lines. But you can fit the 3x5 card version", "tokens": [50744, 457, 309, 311, 406, 300, 938, 11, 767, 13, 467, 311, 437, 30, 3356, 18, 3876, 13, 583, 291, 393, 3318, 264, 805, 87, 20, 2920, 3037, 51140], "temperature": 0.0, "avg_logprob": -0.11862968263171968, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.005380716640502214}, {"id": 560, "seek": 373558, "start": 3751.1, "end": 3755.8199999999997, "text": " on here quite nicely. And actually it looks a lot like the algebra part. In fact, you can write", "tokens": [51140, 322, 510, 1596, 9594, 13, 400, 767, 309, 1542, 257, 688, 411, 264, 21989, 644, 13, 682, 1186, 11, 291, 393, 2464, 51376], "temperature": 0.0, "avg_logprob": -0.11862968263171968, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.005380716640502214}, {"id": 561, "seek": 373558, "start": 3755.8199999999997, "end": 3763.98, "text": " down the semantics. So here are the three lines we wrote for our interpreter. This is how you would", "tokens": [51376, 760, 264, 4361, 45298, 13, 407, 510, 366, 264, 1045, 3876, 321, 4114, 337, 527, 34132, 13, 639, 307, 577, 291, 576, 51784], "temperature": 0.0, "avg_logprob": -0.11862968263171968, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.005380716640502214}, {"id": 562, "seek": 376398, "start": 3763.98, "end": 3769.98, "text": " write it in like an operational semantics, sort of math-y. And then this is on the right hand side", "tokens": [50364, 2464, 309, 294, 411, 364, 16607, 4361, 45298, 11, 1333, 295, 5221, 12, 88, 13, 400, 550, 341, 307, 322, 264, 558, 1011, 1252, 50664], "temperature": 0.0, "avg_logprob": -0.14157969351033217, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.0005700334440916777}, {"id": 563, "seek": 376398, "start": 3769.98, "end": 3774.38, "text": " is how you would express it in this language called mini-canon. And you can see it's really not much", "tokens": [50664, 307, 577, 291, 576, 5109, 309, 294, 341, 2856, 1219, 8382, 12, 7035, 266, 13, 400, 291, 393, 536, 309, 311, 534, 406, 709, 50884], "temperature": 0.0, "avg_logprob": -0.14157969351033217, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.0005700334440916777}, {"id": 564, "seek": 376398, "start": 3774.38, "end": 3781.1, "text": " longer. It's about the same length. Okay, so anyway, we took the time and wrote this interpreter.", "tokens": [50884, 2854, 13, 467, 311, 466, 264, 912, 4641, 13, 1033, 11, 370, 4033, 11, 321, 1890, 264, 565, 293, 4114, 341, 34132, 13, 51220], "temperature": 0.0, "avg_logprob": -0.14157969351033217, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.0005700334440916777}, {"id": 565, "seek": 376398, "start": 3781.1, "end": 3784.3, "text": " So we wrote something equivalent to a vowel X, but in fact, you can see it's called a vowel", "tokens": [51220, 407, 321, 4114, 746, 10344, 281, 257, 29410, 1783, 11, 457, 294, 1186, 11, 291, 393, 536, 309, 311, 1219, 257, 29410, 51380], "temperature": 0.0, "avg_logprob": -0.14157969351033217, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.0005700334440916777}, {"id": 566, "seek": 376398, "start": 3784.3, "end": 3791.18, "text": " expo, right? We even used the same name. And so now let me see if I can figure out how to load", "tokens": [51380, 1278, 78, 11, 558, 30, 492, 754, 1143, 264, 912, 1315, 13, 400, 370, 586, 718, 385, 536, 498, 286, 393, 2573, 484, 577, 281, 3677, 51724], "temperature": 0.0, "avg_logprob": -0.14157969351033217, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.0005700334440916777}, {"id": 567, "seek": 379118, "start": 3791.18, "end": 3799.1, "text": " this thing. That's the, it's always the hard part. Here's the transcript. Let's see that. All right,", "tokens": [50364, 341, 551, 13, 663, 311, 264, 11, 309, 311, 1009, 264, 1152, 644, 13, 1692, 311, 264, 24444, 13, 961, 311, 536, 300, 13, 1057, 558, 11, 50760], "temperature": 0.0, "avg_logprob": -0.16828275568345014, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.00035691598895937204}, {"id": 568, "seek": 379118, "start": 3799.1, "end": 3809.74, "text": " now let's go in here. And let's see. Load MK. You know, it's all fine and good until you have to", "tokens": [50760, 586, 718, 311, 352, 294, 510, 13, 400, 718, 311, 536, 13, 48408, 30770, 13, 509, 458, 11, 309, 311, 439, 2489, 293, 665, 1826, 291, 362, 281, 51292], "temperature": 0.0, "avg_logprob": -0.16828275568345014, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.00035691598895937204}, {"id": 569, "seek": 379118, "start": 3809.74, "end": 3815.66, "text": " do things like load a file, right? There's no math for that. Probably the monad or something", "tokens": [51292, 360, 721, 411, 3677, 257, 3991, 11, 558, 30, 821, 311, 572, 5221, 337, 300, 13, 9210, 264, 1108, 345, 420, 746, 51588], "temperature": 0.0, "avg_logprob": -0.16828275568345014, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.00035691598895937204}, {"id": 570, "seek": 381566, "start": 3815.66, "end": 3825.74, "text": " junk for that. Anyway, let's do full and term. All right, cool. So in this logic programming", "tokens": [50364, 19109, 337, 300, 13, 5684, 11, 718, 311, 360, 1577, 293, 1433, 13, 1057, 558, 11, 1627, 13, 407, 294, 341, 9952, 9410, 50868], "temperature": 0.0, "avg_logprob": -0.14264053545500102, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.0003681945090647787}, {"id": 571, "seek": 381566, "start": 3825.74, "end": 3831.2599999999998, "text": " system called mini-canon, we have the ability to write queries. And the queries let us,", "tokens": [50868, 1185, 1219, 8382, 12, 7035, 266, 11, 321, 362, 264, 3485, 281, 2464, 24109, 13, 400, 264, 24109, 718, 505, 11, 51144], "temperature": 0.0, "avg_logprob": -0.14264053545500102, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.0003681945090647787}, {"id": 572, "seek": 381566, "start": 3831.2599999999998, "end": 3834.2999999999997, "text": " you can think of it from a sort of database standpoint, you can think of it as an algebra", "tokens": [51144, 291, 393, 519, 295, 309, 490, 257, 1333, 295, 8149, 15827, 11, 291, 393, 519, 295, 309, 382, 364, 21989, 51296], "temperature": 0.0, "avg_logprob": -0.14264053545500102, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.0003681945090647787}, {"id": 573, "seek": 381566, "start": 3834.2999999999997, "end": 3840.7, "text": " standpoint. It allows us to write down things where we want to solve for the values. So we have", "tokens": [51296, 15827, 13, 467, 4045, 505, 281, 2464, 760, 721, 689, 321, 528, 281, 5039, 337, 264, 4190, 13, 407, 321, 362, 51616], "temperature": 0.0, "avg_logprob": -0.14264053545500102, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.0003681945090647787}, {"id": 574, "seek": 384070, "start": 3841.2599999999998, "end": 3853.18, "text": " you vowel expert. And I'm going to evaluate some, you know, some thing and get the value of it back.", "tokens": [50392, 291, 29410, 5844, 13, 400, 286, 478, 516, 281, 13059, 512, 11, 291, 458, 11, 512, 551, 293, 483, 264, 2158, 295, 309, 646, 13, 50988], "temperature": 0.0, "avg_logprob": -0.17860226971762522, "compression_ratio": 1.5877551020408163, "no_speech_prob": 0.0006984455394558609}, {"id": 575, "seek": 384070, "start": 3853.18, "end": 3859.5, "text": " Let me just make sure that worked. Oh, expo. Yeah, you think I'd learn. Incorrect number of", "tokens": [50988, 961, 385, 445, 652, 988, 300, 2732, 13, 876, 11, 1278, 78, 13, 865, 11, 291, 519, 286, 1116, 1466, 13, 39120, 2554, 1230, 295, 51304], "temperature": 0.0, "avg_logprob": -0.17860226971762522, "compression_ratio": 1.5877551020408163, "no_speech_prob": 0.0006984455394558609}, {"id": 576, "seek": 384070, "start": 3859.5, "end": 3864.9399999999996, "text": " arguments. It probably takes the empty. Oh, I bet it's called a valo. Yeah, I think, see if I've", "tokens": [51304, 12869, 13, 467, 1391, 2516, 264, 6707, 13, 876, 11, 286, 778, 309, 311, 1219, 257, 1323, 78, 13, 865, 11, 286, 519, 11, 536, 498, 286, 600, 51576], "temperature": 0.0, "avg_logprob": -0.17860226971762522, "compression_ratio": 1.5877551020408163, "no_speech_prob": 0.0006984455394558609}, {"id": 577, "seek": 384070, "start": 3864.9399999999996, "end": 3870.14, "text": " gotten a valo. Yeah, awesome. Okay. So I've hidden the environment in this version because I'm just", "tokens": [51576, 5768, 257, 1323, 78, 13, 865, 11, 3476, 13, 1033, 13, 407, 286, 600, 7633, 264, 2823, 294, 341, 3037, 570, 286, 478, 445, 51836], "temperature": 0.0, "avg_logprob": -0.17860226971762522, "compression_ratio": 1.5877551020408163, "no_speech_prob": 0.0006984455394558609}, {"id": 578, "seek": 387014, "start": 3870.14, "end": 3873.5, "text": " starting out in the empty environment. That's why we're not seeing an environment. We could", "tokens": [50364, 2891, 484, 294, 264, 6707, 2823, 13, 663, 311, 983, 321, 434, 406, 2577, 364, 2823, 13, 492, 727, 50532], "temperature": 0.0, "avg_logprob": -0.12029450156471946, "compression_ratio": 1.7213740458015268, "no_speech_prob": 0.0006352736381813884}, {"id": 579, "seek": 387014, "start": 3873.5, "end": 3879.5, "text": " type it in if we wanted to. Okay. So what's happening here is we have an interpreter", "tokens": [50532, 2010, 309, 294, 498, 321, 1415, 281, 13, 1033, 13, 407, 437, 311, 2737, 510, 307, 321, 362, 364, 34132, 50832], "temperature": 0.0, "avg_logprob": -0.12029450156471946, "compression_ratio": 1.7213740458015268, "no_speech_prob": 0.0006352736381813884}, {"id": 580, "seek": 387014, "start": 3880.14, "end": 3884.22, "text": " written in a somewhat different style than what we just wrote. We have an evaluator,", "tokens": [50864, 3720, 294, 257, 8344, 819, 3758, 813, 437, 321, 445, 4114, 13, 492, 362, 364, 6133, 1639, 11, 51068], "temperature": 0.0, "avg_logprob": -0.12029450156471946, "compression_ratio": 1.7213740458015268, "no_speech_prob": 0.0006352736381813884}, {"id": 581, "seek": 387014, "start": 3884.8599999999997, "end": 3891.3399999999997, "text": " you know, and we have an expression just like the expressions we're passing into a valo expert.", "tokens": [51100, 291, 458, 11, 293, 321, 362, 364, 6114, 445, 411, 264, 15277, 321, 434, 8437, 666, 257, 1323, 78, 5844, 13, 51424], "temperature": 0.0, "avg_logprob": -0.12029450156471946, "compression_ratio": 1.7213740458015268, "no_speech_prob": 0.0006352736381813884}, {"id": 582, "seek": 387014, "start": 3891.9, "end": 3897.8199999999997, "text": " And correspondingly, we have the value. So this is a little bit different than before in that", "tokens": [51452, 400, 11760, 356, 11, 321, 362, 264, 2158, 13, 407, 341, 307, 257, 707, 857, 819, 813, 949, 294, 300, 51748], "temperature": 0.0, "avg_logprob": -0.12029450156471946, "compression_ratio": 1.7213740458015268, "no_speech_prob": 0.0006352736381813884}, {"id": 583, "seek": 389782, "start": 3898.46, "end": 3905.98, "text": " we are actually able to specify what the output should be. Now, in this case, we are putting", "tokens": [50396, 321, 366, 767, 1075, 281, 16500, 437, 264, 5598, 820, 312, 13, 823, 11, 294, 341, 1389, 11, 321, 366, 3372, 50772], "temperature": 0.0, "avg_logprob": -0.11350100248762705, "compression_ratio": 1.6607142857142858, "no_speech_prob": 0.00022683222778141499}, {"id": 584, "seek": 389782, "start": 3905.98, "end": 3910.86, "text": " in a variable, which means we don't know. We don't know what the value should be. In fact,", "tokens": [50772, 294, 257, 7006, 11, 597, 1355, 321, 500, 380, 458, 13, 492, 500, 380, 458, 437, 264, 2158, 820, 312, 13, 682, 1186, 11, 51016], "temperature": 0.0, "avg_logprob": -0.11350100248762705, "compression_ratio": 1.6607142857142858, "no_speech_prob": 0.00022683222778141499}, {"id": 585, "seek": 389782, "start": 3910.86, "end": 3917.42, "text": " if you want to think of it from an algebra standpoint, you know, I'll call it x. Or maybe,", "tokens": [51016, 498, 291, 528, 281, 519, 295, 309, 490, 364, 21989, 15827, 11, 291, 458, 11, 286, 603, 818, 309, 2031, 13, 1610, 1310, 11, 51344], "temperature": 0.0, "avg_logprob": -0.11350100248762705, "compression_ratio": 1.6607142857142858, "no_speech_prob": 0.00022683222778141499}, {"id": 586, "seek": 389782, "start": 3917.98, "end": 3923.1800000000003, "text": " you know, another way to call it would be, you know, a question mark or something, right? So this", "tokens": [51372, 291, 458, 11, 1071, 636, 281, 818, 309, 576, 312, 11, 291, 458, 11, 257, 1168, 1491, 420, 746, 11, 558, 30, 407, 341, 51632], "temperature": 0.0, "avg_logprob": -0.11350100248762705, "compression_ratio": 1.6607142857142858, "no_speech_prob": 0.00022683222778141499}, {"id": 587, "seek": 392318, "start": 3923.74, "end": 3928.06, "text": " is an unknown and we're trying to figure out what the value of the unknown must be.", "tokens": [50392, 307, 364, 9841, 293, 321, 434, 1382, 281, 2573, 484, 437, 264, 2158, 295, 264, 9841, 1633, 312, 13, 50608], "temperature": 0.0, "avg_logprob": -0.12945642374982738, "compression_ratio": 1.6846846846846846, "no_speech_prob": 0.00012531479296740144}, {"id": 588, "seek": 392318, "start": 3928.7, "end": 3933.02, "text": " And in this case, the value of the unknown is five. The expression five evaluates to five. Great.", "tokens": [50640, 400, 294, 341, 1389, 11, 264, 2158, 295, 264, 9841, 307, 1732, 13, 440, 6114, 1732, 6133, 1024, 281, 1732, 13, 3769, 13, 50856], "temperature": 0.0, "avg_logprob": -0.12945642374982738, "compression_ratio": 1.6846846846846846, "no_speech_prob": 0.00012531479296740144}, {"id": 589, "seek": 392318, "start": 3933.8199999999997, "end": 3940.06, "text": " So let's try doing something a little more interesting. Let's try having a lambda expression,", "tokens": [50896, 407, 718, 311, 853, 884, 746, 257, 707, 544, 1880, 13, 961, 311, 853, 1419, 257, 13607, 6114, 11, 51208], "temperature": 0.0, "avg_logprob": -0.12945642374982738, "compression_ratio": 1.6846846846846846, "no_speech_prob": 0.00012531479296740144}, {"id": 590, "seek": 392318, "start": 3940.06, "end": 3948.22, "text": " let's say, about lambda xx. Okay. Oh, that's a big thing. You can see that it begins with closure.", "tokens": [51208, 718, 311, 584, 11, 466, 13607, 2031, 87, 13, 1033, 13, 876, 11, 300, 311, 257, 955, 551, 13, 509, 393, 536, 300, 309, 7338, 365, 24653, 13, 51616], "temperature": 0.0, "avg_logprob": -0.12945642374982738, "compression_ratio": 1.6846846846846846, "no_speech_prob": 0.00012531479296740144}, {"id": 591, "seek": 394822, "start": 3948.22, "end": 3954.3799999999997, "text": " So closure is one way to represent a procedure. So some representation of a procedure, I'm not", "tokens": [50364, 407, 24653, 307, 472, 636, 281, 2906, 257, 10747, 13, 407, 512, 10290, 295, 257, 10747, 11, 286, 478, 406, 50672], "temperature": 0.0, "avg_logprob": -0.1513651279692954, "compression_ratio": 1.512, "no_speech_prob": 0.0007319492870010436}, {"id": 592, "seek": 394822, "start": 3954.3799999999997, "end": 3971.4199999999996, "text": " going to get into the details of it. But I can apply that function. I can apply that procedure", "tokens": [50672, 516, 281, 483, 666, 264, 4365, 295, 309, 13, 583, 286, 393, 3079, 300, 2445, 13, 286, 393, 3079, 300, 10747, 51524], "temperature": 0.0, "avg_logprob": -0.1513651279692954, "compression_ratio": 1.512, "no_speech_prob": 0.0007319492870010436}, {"id": 593, "seek": 397142, "start": 3972.38, "end": 3983.5, "text": " to five, for example. So the identity function applied to five. And it gives me back five. Okay.", "tokens": [50412, 281, 1732, 11, 337, 1365, 13, 407, 264, 6575, 2445, 6456, 281, 1732, 13, 400, 309, 2709, 385, 646, 1732, 13, 1033, 13, 50968], "temperature": 0.0, "avg_logprob": -0.1723260073594644, "compression_ratio": 1.5280898876404494, "no_speech_prob": 0.0012838821858167648}, {"id": 594, "seek": 397142, "start": 3984.14, "end": 3992.3, "text": " Great. Now, this so far is just treating it like an interpreter, just like what we had before.", "tokens": [51000, 3769, 13, 823, 11, 341, 370, 1400, 307, 445, 15083, 309, 411, 364, 34132, 11, 445, 411, 437, 321, 632, 949, 13, 51408], "temperature": 0.0, "avg_logprob": -0.1723260073594644, "compression_ratio": 1.5280898876404494, "no_speech_prob": 0.0012838821858167648}, {"id": 595, "seek": 397142, "start": 3992.94, "end": 3997.34, "text": " And we have all sorts of other things, like we have the ability to create lists.", "tokens": [51440, 400, 321, 362, 439, 7527, 295, 661, 721, 11, 411, 321, 362, 264, 3485, 281, 1884, 14511, 13, 51660], "temperature": 0.0, "avg_logprob": -0.1723260073594644, "compression_ratio": 1.5280898876404494, "no_speech_prob": 0.0012838821858167648}, {"id": 596, "seek": 399734, "start": 3998.06, "end": 4003.82, "text": " You know, I could, and we have this cons operator I told you about. I think we have cons. Let's see.", "tokens": [50400, 509, 458, 11, 286, 727, 11, 293, 321, 362, 341, 1014, 12973, 286, 1907, 291, 466, 13, 286, 519, 321, 362, 1014, 13, 961, 311, 536, 13, 50688], "temperature": 0.0, "avg_logprob": -0.1288986912480107, "compression_ratio": 1.476923076923077, "no_speech_prob": 0.001781088882125914}, {"id": 597, "seek": 399734, "start": 4004.6200000000003, "end": 4013.6600000000003, "text": " Cons A onto the list B. Yep. All right. So I can build up list structures. I can do all sorts of", "tokens": [50728, 6923, 316, 3911, 264, 1329, 363, 13, 7010, 13, 1057, 558, 13, 407, 286, 393, 1322, 493, 1329, 9227, 13, 286, 393, 360, 439, 7527, 295, 51180], "temperature": 0.0, "avg_logprob": -0.1288986912480107, "compression_ratio": 1.476923076923077, "no_speech_prob": 0.001781088882125914}, {"id": 598, "seek": 399734, "start": 4013.6600000000003, "end": 4021.6600000000003, "text": " things. But what I can also do is play games where maybe I don't know the input expression", "tokens": [51180, 721, 13, 583, 437, 286, 393, 611, 360, 307, 862, 2813, 689, 1310, 286, 500, 380, 458, 264, 4846, 6114, 51580], "temperature": 0.0, "avg_logprob": -0.1288986912480107, "compression_ratio": 1.476923076923077, "no_speech_prob": 0.001781088882125914}, {"id": 599, "seek": 402166, "start": 4022.3799999999997, "end": 4032.46, "text": " and I know an output. So maybe the output is I want milkshake. Right. And now what I want", "tokens": [50400, 293, 286, 458, 364, 5598, 13, 407, 1310, 264, 5598, 307, 286, 528, 48773, 34593, 13, 1779, 13, 400, 586, 437, 286, 528, 50904], "temperature": 0.0, "avg_logprob": -0.14688753470396385, "compression_ratio": 1.5885714285714285, "no_speech_prob": 0.0020501925610005856}, {"id": 600, "seek": 402166, "start": 4032.46, "end": 4039.2599999999998, "text": " is an expression in scheme that when you evaluate it produces the list I want milkshake. Okay.", "tokens": [50904, 307, 364, 6114, 294, 12232, 300, 562, 291, 13059, 309, 14725, 264, 1329, 286, 528, 48773, 34593, 13, 1033, 13, 51244], "temperature": 0.0, "avg_logprob": -0.14688753470396385, "compression_ratio": 1.5885714285714285, "no_speech_prob": 0.0020501925610005856}, {"id": 601, "seek": 402166, "start": 4040.14, "end": 4050.3799999999997, "text": " So let's try it. Quote, I want milkshake is one such expression. How about two? Oh, here is a", "tokens": [51288, 407, 718, 311, 853, 309, 13, 2326, 1370, 11, 286, 528, 48773, 34593, 307, 472, 1270, 6114, 13, 1012, 466, 732, 30, 876, 11, 510, 307, 257, 51800], "temperature": 0.0, "avg_logprob": -0.14688753470396385, "compression_ratio": 1.5885714285714285, "no_speech_prob": 0.0020501925610005856}, {"id": 602, "seek": 405038, "start": 4050.38, "end": 4057.1, "text": " procedure call. A procedure that takes any number of arguments whose body is the expression, quote,", "tokens": [50364, 10747, 818, 13, 316, 10747, 300, 2516, 604, 1230, 295, 12869, 6104, 1772, 307, 264, 6114, 11, 6513, 11, 50700], "temperature": 0.0, "avg_logprob": -0.16010054420022404, "compression_ratio": 1.6, "no_speech_prob": 0.0004105987318325788}, {"id": 603, "seek": 405038, "start": 4057.1, "end": 4062.7000000000003, "text": " I want milkshake applied to no arguments. And we can do all sorts of games like that. Here's", "tokens": [50700, 286, 528, 48773, 34593, 6456, 281, 572, 12869, 13, 400, 321, 393, 360, 439, 7527, 295, 2813, 411, 300, 13, 1692, 311, 50980], "temperature": 0.0, "avg_logprob": -0.16010054420022404, "compression_ratio": 1.6, "no_speech_prob": 0.0004105987318325788}, {"id": 604, "seek": 405038, "start": 4062.7000000000003, "end": 4067.34, "text": " another one. Like, I don't need to go like 10. See if there are any good ones. Oh, yeah. Here's a", "tokens": [50980, 1071, 472, 13, 1743, 11, 286, 500, 380, 643, 281, 352, 411, 1266, 13, 3008, 498, 456, 366, 604, 665, 2306, 13, 876, 11, 1338, 13, 1692, 311, 257, 51212], "temperature": 0.0, "avg_logprob": -0.16010054420022404, "compression_ratio": 1.6, "no_speech_prob": 0.0004105987318325788}, {"id": 605, "seek": 405038, "start": 4067.34, "end": 4072.38, "text": " call to car, which gets the first element in the list. The car of a list containing the list,", "tokens": [51212, 818, 281, 1032, 11, 597, 2170, 264, 700, 4478, 294, 264, 1329, 13, 440, 1032, 295, 257, 1329, 19273, 264, 1329, 11, 51464], "temperature": 0.0, "avg_logprob": -0.16010054420022404, "compression_ratio": 1.6, "no_speech_prob": 0.0004105987318325788}, {"id": 606, "seek": 407238, "start": 4072.38, "end": 4080.78, "text": " I want milkshakes. And I can do things like that. All right. That's fun. So I work in the lab of", "tokens": [50364, 286, 528, 48773, 71, 3419, 13, 400, 286, 393, 360, 721, 411, 300, 13, 1057, 558, 13, 663, 311, 1019, 13, 407, 286, 589, 294, 264, 2715, 295, 50784], "temperature": 0.0, "avg_logprob": -0.1644768312752965, "compression_ratio": 1.484375, "no_speech_prob": 0.07577523589134216}, {"id": 607, "seek": 407238, "start": 4080.78, "end": 4093.5, "text": " Matt might at Utah. And he has this blog post called 99 ways not to die to say I love you in", "tokens": [50784, 7397, 1062, 412, 20226, 13, 400, 415, 575, 341, 6968, 2183, 1219, 11803, 2098, 406, 281, 978, 281, 584, 286, 959, 291, 294, 51420], "temperature": 0.0, "avg_logprob": -0.1644768312752965, "compression_ratio": 1.484375, "no_speech_prob": 0.07577523589134216}, {"id": 608, "seek": 407238, "start": 4093.5, "end": 4098.3, "text": " racket. So this was like his Valentine's Day post, right? It's like a slow Valentine's Day. You", "tokens": [51420, 41130, 13, 407, 341, 390, 411, 702, 24359, 311, 5226, 2183, 11, 558, 30, 467, 311, 411, 257, 2964, 24359, 311, 5226, 13, 509, 51660], "temperature": 0.0, "avg_logprob": -0.1644768312752965, "compression_ratio": 1.484375, "no_speech_prob": 0.07577523589134216}, {"id": 609, "seek": 409830, "start": 4098.3, "end": 4106.78, "text": " write this blog post. And it's 99 expressions in racket or scheme or whatever that actually", "tokens": [50364, 2464, 341, 6968, 2183, 13, 400, 309, 311, 11803, 15277, 294, 41130, 420, 12232, 420, 2035, 300, 767, 50788], "temperature": 0.0, "avg_logprob": -0.16958029453571027, "compression_ratio": 1.3404255319148937, "no_speech_prob": 0.00044410559348762035}, {"id": 610, "seek": 409830, "start": 4106.78, "end": 4120.38, "text": " evaluate to the list. I love you. Okay. So let's do that. So let's go back and come up with a run", "tokens": [50788, 13059, 281, 264, 1329, 13, 286, 959, 291, 13, 1033, 13, 407, 718, 311, 360, 300, 13, 407, 718, 311, 352, 646, 293, 808, 493, 365, 257, 1190, 51468], "temperature": 0.0, "avg_logprob": -0.16958029453571027, "compression_ratio": 1.3404255319148937, "no_speech_prob": 0.00044410559348762035}, {"id": 611, "seek": 412038, "start": 4120.46, "end": 4130.7, "text": " 99 and say I love you. And we get all these programs. So here's one. It's called a list and", "tokens": [50368, 11803, 293, 584, 286, 959, 291, 13, 400, 321, 483, 439, 613, 4268, 13, 407, 510, 311, 472, 13, 467, 311, 1219, 257, 1329, 293, 50880], "temperature": 0.0, "avg_logprob": -0.13120282726523316, "compression_ratio": 1.5105263157894737, "no_speech_prob": 0.0049042166210711}, {"id": 612, "seek": 412038, "start": 4130.7, "end": 4134.46, "text": " it has a function call inside of it and stuff like that. And every one of these I can evaluate in", "tokens": [50880, 309, 575, 257, 2445, 818, 1854, 295, 309, 293, 1507, 411, 300, 13, 400, 633, 472, 295, 613, 286, 393, 13059, 294, 51068], "temperature": 0.0, "avg_logprob": -0.13120282726523316, "compression_ratio": 1.5105263157894737, "no_speech_prob": 0.0049042166210711}, {"id": 613, "seek": 412038, "start": 4134.46, "end": 4144.3, "text": " scheme and it works just fine. All right. Yeah. Okay. So that's kind of fun. So let's try another", "tokens": [51068, 12232, 293, 309, 1985, 445, 2489, 13, 1057, 558, 13, 865, 13, 1033, 13, 407, 300, 311, 733, 295, 1019, 13, 407, 718, 311, 853, 1071, 51560], "temperature": 0.0, "avg_logprob": -0.13120282726523316, "compression_ratio": 1.5105263157894737, "no_speech_prob": 0.0049042166210711}, {"id": 614, "seek": 414430, "start": 4144.3, "end": 4155.9800000000005, "text": " one. Going back to John McCarthy's paper. He has this little note. So it's a difficult mathematical", "tokens": [50364, 472, 13, 10963, 646, 281, 2619, 44085, 311, 3035, 13, 634, 575, 341, 707, 3637, 13, 407, 309, 311, 257, 2252, 18894, 50948], "temperature": 0.0, "avg_logprob": -0.15954023599624634, "compression_ratio": 1.495, "no_speech_prob": 0.0024714739993214607}, {"id": 615, "seek": 414430, "start": 4155.9800000000005, "end": 4163.66, "text": " type exercise. Find a list E that means a program expression E such that the value of E is equal to", "tokens": [50948, 2010, 5380, 13, 11809, 257, 1329, 462, 300, 1355, 257, 1461, 6114, 462, 1270, 300, 264, 2158, 295, 462, 307, 2681, 281, 51332], "temperature": 0.0, "avg_logprob": -0.15954023599624634, "compression_ratio": 1.495, "no_speech_prob": 0.0024714739993214607}, {"id": 616, "seek": 414430, "start": 4163.66, "end": 4169.900000000001, "text": " E. What is that called? It's a quine. So we want to find a program that evaluates to itself. So how", "tokens": [51332, 462, 13, 708, 307, 300, 1219, 30, 467, 311, 257, 421, 533, 13, 407, 321, 528, 281, 915, 257, 1461, 300, 6133, 1024, 281, 2564, 13, 407, 577, 51644], "temperature": 0.0, "avg_logprob": -0.15954023599624634, "compression_ratio": 1.495, "no_speech_prob": 0.0024714739993214607}, {"id": 617, "seek": 416990, "start": 4169.9, "end": 4180.7, "text": " can we write such a query? Yeah. Well, let's let's out of respect to John McCarthy, call our variable", "tokens": [50364, 393, 321, 2464, 1270, 257, 14581, 30, 865, 13, 1042, 11, 718, 311, 718, 311, 484, 295, 3104, 281, 2619, 44085, 11, 818, 527, 7006, 50904], "temperature": 0.0, "avg_logprob": -0.2082892450793036, "compression_ratio": 1.5873015873015872, "no_speech_prob": 0.0009696235065348446}, {"id": 618, "seek": 416990, "start": 4180.7, "end": 4188.78, "text": " E. We want E to evaluate to E. All right. Oh, that's a representation of a number five evaluates to", "tokens": [50904, 462, 13, 492, 528, 462, 281, 13059, 281, 462, 13, 1057, 558, 13, 876, 11, 300, 311, 257, 10290, 295, 257, 1230, 1732, 6133, 1024, 281, 51308], "temperature": 0.0, "avg_logprob": -0.2082892450793036, "compression_ratio": 1.5873015873015872, "no_speech_prob": 0.0009696235065348446}, {"id": 619, "seek": 416990, "start": 4189.339999999999, "end": 4197.5, "text": " five. That's true. Let's see who hash T evaluates to hash T. That's true. Hash F evaluates to hash", "tokens": [51336, 1732, 13, 663, 311, 2074, 13, 961, 311, 536, 567, 22019, 314, 6133, 1024, 281, 22019, 314, 13, 663, 311, 2074, 13, 30775, 479, 6133, 1024, 281, 22019, 51744], "temperature": 0.0, "avg_logprob": -0.2082892450793036, "compression_ratio": 1.5873015873015872, "no_speech_prob": 0.0009696235065348446}, {"id": 620, "seek": 419750, "start": 4197.58, "end": 4203.02, "text": " F. Let's see if there's anything. Let's run for a second. Oh, what is this thing?", "tokens": [50368, 479, 13, 961, 311, 536, 498, 456, 311, 1340, 13, 961, 311, 1190, 337, 257, 1150, 13, 876, 11, 437, 307, 341, 551, 30, 50640], "temperature": 0.0, "avg_logprob": -0.1491760147942437, "compression_ratio": 1.5, "no_speech_prob": 0.0009106718352995813}, {"id": 621, "seek": 419750, "start": 4206.38, "end": 4210.78, "text": " All right. Forget those side conditions. Here's a more interesting looking expression", "tokens": [50808, 1057, 558, 13, 18675, 729, 1252, 4487, 13, 1692, 311, 257, 544, 1880, 1237, 6114, 51028], "temperature": 0.0, "avg_logprob": -0.1491760147942437, "compression_ratio": 1.5, "no_speech_prob": 0.0009106718352995813}, {"id": 622, "seek": 419750, "start": 4211.5, "end": 4216.7, "text": " and that evaluates to itself. Oh, okay. So we can do things like generate quines.", "tokens": [51064, 293, 300, 6133, 1024, 281, 2564, 13, 876, 11, 1392, 13, 407, 321, 393, 360, 721, 411, 8460, 421, 1652, 13, 51324], "temperature": 0.0, "avg_logprob": -0.1491760147942437, "compression_ratio": 1.5, "no_speech_prob": 0.0009106718352995813}, {"id": 623, "seek": 419750, "start": 4217.34, "end": 4223.1, "text": " What else can we do? Well, Michael Valentine at this point said, well, you know,", "tokens": [51356, 708, 1646, 393, 321, 360, 30, 1042, 11, 5116, 24359, 412, 341, 935, 848, 11, 731, 11, 291, 458, 11, 51644], "temperature": 0.0, "avg_logprob": -0.1491760147942437, "compression_ratio": 1.5, "no_speech_prob": 0.0009106718352995813}, {"id": 624, "seek": 422310, "start": 4223.660000000001, "end": 4230.14, "text": " what if you had a more interesting scheme expression that you're evaluating? So let's try", "tokens": [50392, 437, 498, 291, 632, 257, 544, 1880, 12232, 6114, 300, 291, 434, 27479, 30, 407, 718, 311, 853, 50716], "temperature": 0.0, "avg_logprob": -0.2215600162744522, "compression_ratio": 1.5535714285714286, "no_speech_prob": 4.1979663365054876e-05}, {"id": 625, "seek": 422310, "start": 4230.14, "end": 4234.780000000001, "text": " something a little more interesting. So let's try doing something like", "tokens": [50716, 746, 257, 707, 544, 1880, 13, 407, 718, 311, 853, 884, 746, 411, 50948], "temperature": 0.0, "avg_logprob": -0.2215600162744522, "compression_ratio": 1.5535714285714286, "no_speech_prob": 4.1979663365054876e-05}, {"id": 626, "seek": 422310, "start": 4240.38, "end": 4246.38, "text": " writing a program that concatenates to lists. And, you know, don't worry about the syntax here. It's", "tokens": [51228, 3579, 257, 1461, 300, 1588, 7186, 1024, 281, 14511, 13, 400, 11, 291, 458, 11, 500, 380, 3292, 466, 264, 28431, 510, 13, 467, 311, 51528], "temperature": 0.0, "avg_logprob": -0.2215600162744522, "compression_ratio": 1.5535714285714286, "no_speech_prob": 4.1979663365054876e-05}, {"id": 627, "seek": 424638, "start": 4247.02, "end": 4254.7, "text": " going to look, you know, if you don't know scheme, you may not read every single thing, but we're", "tokens": [50396, 516, 281, 574, 11, 291, 458, 11, 498, 291, 500, 380, 458, 12232, 11, 291, 815, 406, 1401, 633, 2167, 551, 11, 457, 321, 434, 50780], "temperature": 0.0, "avg_logprob": -0.1694908332824707, "compression_ratio": 1.4153846153846155, "no_speech_prob": 0.0010984292021021247}, {"id": 628, "seek": 424638, "start": 4254.7, "end": 4262.38, "text": " going to append, okay, and define a function called append that takes to lists L and S", "tokens": [50780, 516, 281, 34116, 11, 1392, 11, 293, 6964, 257, 2445, 1219, 34116, 300, 2516, 281, 14511, 441, 293, 318, 51164], "temperature": 0.0, "avg_logprob": -0.1694908332824707, "compression_ratio": 1.4153846153846155, "no_speech_prob": 0.0010984292021021247}, {"id": 629, "seek": 426238, "start": 4262.46, "end": 4277.74, "text": " and is going to have an if. Make this a little smaller. If L is empty, then we return S. Otherwise,", "tokens": [50368, 293, 307, 516, 281, 362, 364, 498, 13, 4387, 341, 257, 707, 4356, 13, 759, 441, 307, 6707, 11, 550, 321, 2736, 318, 13, 10328, 11, 51132], "temperature": 0.0, "avg_logprob": -0.2569421570876549, "compression_ratio": 1.3819444444444444, "no_speech_prob": 0.014727015048265457}, {"id": 630, "seek": 426238, "start": 4277.74, "end": 4287.02, "text": " we're going to cons on the car of L to a recursive call to append with the rest of the list. That's", "tokens": [51132, 321, 434, 516, 281, 1014, 322, 264, 1032, 295, 441, 281, 257, 20560, 488, 818, 281, 34116, 365, 264, 1472, 295, 264, 1329, 13, 663, 311, 51596], "temperature": 0.0, "avg_logprob": -0.2569421570876549, "compression_ratio": 1.3819444444444444, "no_speech_prob": 0.014727015048265457}, {"id": 631, "seek": 428702, "start": 4287.740000000001, "end": 4295.5, "text": " called the Cutter and S. Okay. So let wreck, let's me define a recursive function. And now I'm", "tokens": [50400, 1219, 264, 383, 9947, 293, 318, 13, 1033, 13, 407, 718, 21478, 11, 718, 311, 385, 6964, 257, 20560, 488, 2445, 13, 400, 586, 286, 478, 50788], "temperature": 0.0, "avg_logprob": -0.17270011131209556, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.0014100329717621207}, {"id": 632, "seek": 428702, "start": 4295.5, "end": 4303.9800000000005, "text": " going to have a call to append. I'm going to say append ABC to DE. And let's see if that works.", "tokens": [50788, 516, 281, 362, 257, 818, 281, 34116, 13, 286, 478, 516, 281, 584, 34116, 22342, 281, 10113, 13, 400, 718, 311, 536, 498, 300, 1985, 13, 51212], "temperature": 0.0, "avg_logprob": -0.17270011131209556, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.0014100329717621207}, {"id": 633, "seek": 428702, "start": 4303.9800000000005, "end": 4310.700000000001, "text": " And sure enough, it works. So it gives me ABCDE in a list because we can actually", "tokens": [51212, 400, 988, 1547, 11, 309, 1985, 13, 407, 309, 2709, 385, 22342, 22296, 294, 257, 1329, 570, 321, 393, 767, 51548], "temperature": 0.0, "avg_logprob": -0.17270011131209556, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.0014100329717621207}, {"id": 634, "seek": 428702, "start": 4310.700000000001, "end": 4313.34, "text": " produce more than one answer. So let me show you what that would look like.", "tokens": [51548, 5258, 544, 813, 472, 1867, 13, 407, 718, 385, 855, 291, 437, 300, 576, 574, 411, 13, 51680], "temperature": 0.0, "avg_logprob": -0.17270011131209556, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.0014100329717621207}, {"id": 635, "seek": 431334, "start": 4313.66, "end": 4322.46, "text": " What we could do is, well, actually let me show you something else first. So what if we put in the", "tokens": [50380, 708, 321, 727, 360, 307, 11, 731, 11, 767, 718, 385, 855, 291, 746, 1646, 700, 13, 407, 437, 498, 321, 829, 294, 264, 50820], "temperature": 0.0, "avg_logprob": -0.12986836252333242, "compression_ratio": 1.6440677966101696, "no_speech_prob": 0.0007310180808417499}, {"id": 636, "seek": 431334, "start": 4322.46, "end": 4329.18, "text": " answer first? We know the answer should be ABCDE. Okay. So we put in the answer. And now I can put", "tokens": [50820, 1867, 700, 30, 492, 458, 264, 1867, 820, 312, 22342, 22296, 13, 1033, 13, 407, 321, 829, 294, 264, 1867, 13, 400, 586, 286, 393, 829, 51156], "temperature": 0.0, "avg_logprob": -0.12986836252333242, "compression_ratio": 1.6440677966101696, "no_speech_prob": 0.0007310180808417499}, {"id": 637, "seek": 431334, "start": 4329.18, "end": 4336.46, "text": " in that variable thing, the question mark, anywhere I want. So I can put in the question mark", "tokens": [51156, 294, 300, 7006, 551, 11, 264, 1168, 1491, 11, 4992, 286, 528, 13, 407, 286, 393, 829, 294, 264, 1168, 1491, 51520], "temperature": 0.0, "avg_logprob": -0.12986836252333242, "compression_ratio": 1.6440677966101696, "no_speech_prob": 0.0007310180808417499}, {"id": 638, "seek": 433646, "start": 4336.78, "end": 4345.58, "text": " inside this argument. So I'm asking what list when it appended to DE gives me ABCDE. So what list", "tokens": [50380, 1854, 341, 6770, 13, 407, 286, 478, 3365, 437, 1329, 562, 309, 724, 3502, 281, 10113, 2709, 385, 22342, 22296, 13, 407, 437, 1329, 50820], "temperature": 0.0, "avg_logprob": -0.15706111683565027, "compression_ratio": 1.4623115577889447, "no_speech_prob": 0.007809608243405819}, {"id": 639, "seek": 433646, "start": 4345.58, "end": 4355.42, "text": " should that be? ABC. And sure enough, I get that. Okay. I could ask for two things. Maybe X and Y.", "tokens": [50820, 820, 300, 312, 30, 22342, 13, 400, 988, 1547, 11, 286, 483, 300, 13, 1033, 13, 286, 727, 1029, 337, 732, 721, 13, 2704, 1783, 293, 398, 13, 51312], "temperature": 0.0, "avg_logprob": -0.15706111683565027, "compression_ratio": 1.4623115577889447, "no_speech_prob": 0.007809608243405819}, {"id": 640, "seek": 433646, "start": 4356.38, "end": 4363.9800000000005, "text": " So I could say I want X and I want Y. There are all sorts of games I could show you with this,", "tokens": [51360, 407, 286, 727, 584, 286, 528, 1783, 293, 286, 528, 398, 13, 821, 366, 439, 7527, 295, 2813, 286, 727, 855, 291, 365, 341, 11, 51740], "temperature": 0.0, "avg_logprob": -0.15706111683565027, "compression_ratio": 1.4623115577889447, "no_speech_prob": 0.007809608243405819}, {"id": 641, "seek": 436398, "start": 4363.98, "end": 4371.5, "text": " but I'm just going to show you a couple. So now I can have two lists that appended together", "tokens": [50364, 457, 286, 478, 445, 516, 281, 855, 291, 257, 1916, 13, 407, 586, 286, 393, 362, 732, 14511, 300, 724, 3502, 1214, 50740], "temperature": 0.0, "avg_logprob": -0.06637086366352282, "compression_ratio": 1.6328502415458936, "no_speech_prob": 0.0008679432794451714}, {"id": 642, "seek": 436398, "start": 4371.5, "end": 4377.339999999999, "text": " give me ABCDE. And you can see the empty list applied to ABCDE is one such pair of lists.", "tokens": [50740, 976, 385, 22342, 22296, 13, 400, 291, 393, 536, 264, 6707, 1329, 6456, 281, 22342, 22296, 307, 472, 1270, 6119, 295, 14511, 13, 51032], "temperature": 0.0, "avg_logprob": -0.06637086366352282, "compression_ratio": 1.6328502415458936, "no_speech_prob": 0.0008679432794451714}, {"id": 643, "seek": 436398, "start": 4377.339999999999, "end": 4381.5, "text": " And I can actually ask for all such pairs. So I can do a run star.", "tokens": [51032, 400, 286, 393, 767, 1029, 337, 439, 1270, 15494, 13, 407, 286, 393, 360, 257, 1190, 3543, 13, 51240], "temperature": 0.0, "avg_logprob": -0.06637086366352282, "compression_ratio": 1.6328502415458936, "no_speech_prob": 0.0008679432794451714}, {"id": 644, "seek": 436398, "start": 4384.379999999999, "end": 4389.5, "text": " And now I get all the pairs back. And so if you've seen logic programming, if you've seen", "tokens": [51384, 400, 586, 286, 483, 439, 264, 15494, 646, 13, 400, 370, 498, 291, 600, 1612, 9952, 9410, 11, 498, 291, 600, 1612, 51640], "temperature": 0.0, "avg_logprob": -0.06637086366352282, "compression_ratio": 1.6328502415458936, "no_speech_prob": 0.0008679432794451714}, {"id": 645, "seek": 438950, "start": 4389.5, "end": 4396.94, "text": " languages like prologue or minicanron, they let you do this sort of query. But notice we didn't", "tokens": [50364, 8650, 411, 447, 4987, 622, 420, 923, 299, 282, 2044, 11, 436, 718, 291, 360, 341, 1333, 295, 14581, 13, 583, 3449, 321, 994, 380, 50736], "temperature": 0.0, "avg_logprob": -0.11040500679401437, "compression_ratio": 1.5546558704453441, "no_speech_prob": 0.004977808799594641}, {"id": 646, "seek": 438950, "start": 4396.94, "end": 4403.1, "text": " write a logic program. We just took a scheme program in our interpreter. So we're taking the", "tokens": [50736, 2464, 257, 9952, 1461, 13, 492, 445, 1890, 257, 12232, 1461, 294, 527, 34132, 13, 407, 321, 434, 1940, 264, 51044], "temperature": 0.0, "avg_logprob": -0.11040500679401437, "compression_ratio": 1.5546558704453441, "no_speech_prob": 0.004977808799594641}, {"id": 647, "seek": 438950, "start": 4403.1, "end": 4409.74, "text": " equal sign seriously. We're saying that equality really does mean equal. And there's no direction", "tokens": [51044, 2681, 1465, 6638, 13, 492, 434, 1566, 300, 14949, 534, 775, 914, 2681, 13, 400, 456, 311, 572, 3513, 51376], "temperature": 0.0, "avg_logprob": -0.11040500679401437, "compression_ratio": 1.5546558704453441, "no_speech_prob": 0.004977808799594641}, {"id": 648, "seek": 438950, "start": 4409.74, "end": 4417.26, "text": " to that equal sign. We should be able to solve for any side. Okay. So let's try one more example.", "tokens": [51376, 281, 300, 2681, 1465, 13, 492, 820, 312, 1075, 281, 5039, 337, 604, 1252, 13, 1033, 13, 407, 718, 311, 853, 472, 544, 1365, 13, 51752], "temperature": 0.0, "avg_logprob": -0.11040500679401437, "compression_ratio": 1.5546558704453441, "no_speech_prob": 0.004977808799594641}, {"id": 649, "seek": 441726, "start": 4417.74, "end": 4427.9800000000005, "text": " We could do something like have ABC and DE. And now we say the answer should be ABCDE.", "tokens": [50388, 492, 727, 360, 746, 411, 362, 22342, 293, 10113, 13, 400, 586, 321, 584, 264, 1867, 820, 312, 22342, 22296, 13, 50900], "temperature": 0.0, "avg_logprob": -0.22405748781950577, "compression_ratio": 1.4427083333333333, "no_speech_prob": 0.0008683563210070133}, {"id": 650, "seek": 441726, "start": 4427.9800000000005, "end": 4437.1, "text": " And minicanron responds with some gibberish that means that that's consistent. Okay. So the question", "tokens": [50900, 400, 923, 299, 282, 2044, 27331, 365, 512, 4553, 43189, 300, 1355, 300, 300, 311, 8398, 13, 1033, 13, 407, 264, 1168, 51356], "temperature": 0.0, "avg_logprob": -0.22405748781950577, "compression_ratio": 1.4427083333333333, "no_speech_prob": 0.0008683563210070133}, {"id": 651, "seek": 441726, "start": 4437.1, "end": 4445.02, "text": " is, where else could we put a logic variable representing something unknown? In the code.", "tokens": [51356, 307, 11, 689, 1646, 727, 321, 829, 257, 9952, 7006, 13460, 746, 9841, 30, 682, 264, 3089, 13, 51752], "temperature": 0.0, "avg_logprob": -0.22405748781950577, "compression_ratio": 1.4427083333333333, "no_speech_prob": 0.0008683563210070133}, {"id": 652, "seek": 444502, "start": 4445.740000000001, "end": 4455.1, "text": " Yes. Yeah. All right. So I don't know. Let me find a target. How about this s? Let me put something", "tokens": [50400, 1079, 13, 865, 13, 1057, 558, 13, 407, 286, 500, 380, 458, 13, 961, 385, 915, 257, 3779, 13, 1012, 466, 341, 262, 30, 961, 385, 829, 746, 50868], "temperature": 0.0, "avg_logprob": -0.14583395776294528, "compression_ratio": 1.4522613065326633, "no_speech_prob": 0.0003405177849344909}, {"id": 653, "seek": 444502, "start": 4455.1, "end": 4465.5, "text": " there. I think this is the one with run star is a bad idea. Run one is good. And sure enough,", "tokens": [50868, 456, 13, 286, 519, 341, 307, 264, 472, 365, 1190, 3543, 307, 257, 1578, 1558, 13, 8950, 472, 307, 665, 13, 400, 988, 1547, 11, 51388], "temperature": 0.0, "avg_logprob": -0.14583395776294528, "compression_ratio": 1.4522613065326633, "no_speech_prob": 0.0003405177849344909}, {"id": 654, "seek": 444502, "start": 4465.5, "end": 4471.900000000001, "text": " it inferred the s that I removed and things like that. Now, at this point, we're actually doing", "tokens": [51388, 309, 13596, 986, 264, 262, 300, 286, 7261, 293, 721, 411, 300, 13, 823, 11, 412, 341, 935, 11, 321, 434, 767, 884, 51708], "temperature": 0.0, "avg_logprob": -0.14583395776294528, "compression_ratio": 1.4522613065326633, "no_speech_prob": 0.0003405177849344909}, {"id": 655, "seek": 447190, "start": 4471.9, "end": 4479.98, "text": " program synthesis. So we have the ability to specify information in the form of things like", "tokens": [50364, 1461, 30252, 13, 407, 321, 362, 264, 3485, 281, 16500, 1589, 294, 264, 1254, 295, 721, 411, 50768], "temperature": 0.0, "avg_logprob": -0.08981177094694856, "compression_ratio": 1.7064220183486238, "no_speech_prob": 0.002356158336624503}, {"id": 656, "seek": 447190, "start": 4480.62, "end": 4487.0199999999995, "text": " the expected input and the corresponding expected output and use the semantics of our", "tokens": [50800, 264, 5176, 4846, 293, 264, 11760, 5176, 5598, 293, 764, 264, 4361, 45298, 295, 527, 51120], "temperature": 0.0, "avg_logprob": -0.08981177094694856, "compression_ratio": 1.7064220183486238, "no_speech_prob": 0.002356158336624503}, {"id": 657, "seek": 447190, "start": 4487.0199999999995, "end": 4494.299999999999, "text": " interpreter that we wrote as a relation and logic programming system to do inference, do a search", "tokens": [51120, 34132, 300, 321, 4114, 382, 257, 9721, 293, 9952, 9410, 1185, 281, 360, 38253, 11, 360, 257, 3164, 51484], "temperature": 0.0, "avg_logprob": -0.08981177094694856, "compression_ratio": 1.7064220183486238, "no_speech_prob": 0.002356158336624503}, {"id": 658, "seek": 447190, "start": 4494.299999999999, "end": 4499.339999999999, "text": " basically and do constraint solving to try to infer the missing values. And those missing values", "tokens": [51484, 1936, 293, 360, 25534, 12606, 281, 853, 281, 13596, 264, 5361, 4190, 13, 400, 729, 5361, 4190, 51736], "temperature": 0.0, "avg_logprob": -0.08981177094694856, "compression_ratio": 1.7064220183486238, "no_speech_prob": 0.002356158336624503}, {"id": 659, "seek": 449934, "start": 4499.34, "end": 4504.860000000001, "text": " could be the input arguments, the function, the output to the function, even code or some mixture", "tokens": [50364, 727, 312, 264, 4846, 12869, 11, 264, 2445, 11, 264, 5598, 281, 264, 2445, 11, 754, 3089, 420, 512, 9925, 50640], "temperature": 0.0, "avg_logprob": -0.12449160814285279, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.001344572170637548}, {"id": 660, "seek": 449934, "start": 4504.860000000001, "end": 4512.06, "text": " thereof. We can put variables anywhere we want. Yeah. Let's try that. That's a good question.", "tokens": [50640, 456, 2670, 13, 492, 393, 829, 9102, 4992, 321, 528, 13, 865, 13, 961, 311, 853, 300, 13, 663, 311, 257, 665, 1168, 13, 51000], "temperature": 0.0, "avg_logprob": -0.12449160814285279, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.001344572170637548}, {"id": 661, "seek": 449934, "start": 4512.9400000000005, "end": 4523.18, "text": " So let's go back to what we had. This is it. Yep. Let me put it where the append was. What do you", "tokens": [51044, 407, 718, 311, 352, 646, 281, 437, 321, 632, 13, 639, 307, 309, 13, 7010, 13, 961, 385, 829, 309, 689, 264, 34116, 390, 13, 708, 360, 291, 51556], "temperature": 0.0, "avg_logprob": -0.12449160814285279, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.001344572170637548}, {"id": 662, "seek": 452318, "start": 4523.18, "end": 4531.58, "text": " think I'll get back? Oh, sorry. I have to change this back to the question mark.", "tokens": [50364, 519, 286, 603, 483, 646, 30, 876, 11, 2597, 13, 286, 362, 281, 1319, 341, 646, 281, 264, 1168, 1491, 13, 50784], "temperature": 0.0, "avg_logprob": -0.2705880105495453, "compression_ratio": 1.3416149068322982, "no_speech_prob": 0.003761179279536009}, {"id": 663, "seek": 452318, "start": 4532.62, "end": 4534.22, "text": " Hopefully append, right? Everybody start.", "tokens": [50836, 10429, 34116, 11, 558, 30, 7646, 722, 13, 50916], "temperature": 0.0, "avg_logprob": -0.2705880105495453, "compression_ratio": 1.3416149068322982, "no_speech_prob": 0.003761179279536009}, {"id": 664, "seek": 452318, "start": 4539.18, "end": 4549.5, "text": " What? Oh, did I call it runs? Oh, hilarity will ensue. That's the answer you expected, right?", "tokens": [51164, 708, 30, 876, 11, 630, 286, 818, 309, 6676, 30, 876, 11, 18661, 507, 486, 3489, 622, 13, 663, 311, 264, 1867, 291, 5176, 11, 558, 30, 51680], "temperature": 0.0, "avg_logprob": -0.2705880105495453, "compression_ratio": 1.3416149068322982, "no_speech_prob": 0.003761179279536009}, {"id": 665, "seek": 454950, "start": 4549.74, "end": 4556.22, "text": " A procedure that ignores this argument and returns the list, AVCDE.", "tokens": [50376, 316, 10747, 300, 5335, 2706, 341, 6770, 293, 11247, 264, 1329, 11, 30198, 16508, 36, 13, 50700], "temperature": 0.0, "avg_logprob": -0.2756209653966567, "compression_ratio": 1.5100671140939597, "no_speech_prob": 0.00037994797457940876}, {"id": 666, "seek": 454950, "start": 4558.3, "end": 4565.1, "text": " Many canons like prove me wrong. I defy you to prove me wrong.", "tokens": [50804, 5126, 393, 892, 411, 7081, 385, 2085, 13, 286, 1060, 88, 291, 281, 7081, 385, 2085, 13, 51144], "temperature": 0.0, "avg_logprob": -0.2756209653966567, "compression_ratio": 1.5100671140939597, "no_speech_prob": 0.00037994797457940876}, {"id": 667, "seek": 454950, "start": 4567.02, "end": 4573.5, "text": " So this is the fun for a thing you get into. So let's try to... So many canons like the genie,", "tokens": [51240, 407, 341, 307, 264, 1019, 337, 257, 551, 291, 483, 666, 13, 407, 718, 311, 853, 281, 485, 407, 867, 393, 892, 411, 264, 1049, 414, 11, 51564], "temperature": 0.0, "avg_logprob": -0.2756209653966567, "compression_ratio": 1.5100671140939597, "no_speech_prob": 0.00037994797457940876}, {"id": 668, "seek": 457350, "start": 4573.5, "end": 4582.78, "text": " right? The genie is like, tell me your wish. I'm ready to go. So what we're going to do is we're", "tokens": [50364, 558, 30, 440, 1049, 414, 307, 411, 11, 980, 385, 428, 3172, 13, 286, 478, 1919, 281, 352, 13, 407, 437, 321, 434, 516, 281, 360, 307, 321, 434, 50828], "temperature": 0.0, "avg_logprob": -0.0812681069534816, "compression_ratio": 1.6065573770491803, "no_speech_prob": 0.002713213674724102}, {"id": 669, "seek": 457350, "start": 4582.78, "end": 4591.26, "text": " going to create a list of calls to append. Sorry. I don't remember if we have lists or not. I think", "tokens": [50828, 516, 281, 1884, 257, 1329, 295, 5498, 281, 34116, 13, 4919, 13, 286, 500, 380, 1604, 498, 321, 362, 14511, 420, 406, 13, 286, 519, 51252], "temperature": 0.0, "avg_logprob": -0.0812681069534816, "compression_ratio": 1.6065573770491803, "no_speech_prob": 0.002713213674724102}, {"id": 670, "seek": 457350, "start": 4591.26, "end": 4596.38, "text": " we have lists. So we'll have more than one test. That's right. So let's do two tests. So one will", "tokens": [51252, 321, 362, 14511, 13, 407, 321, 603, 362, 544, 813, 472, 1500, 13, 663, 311, 558, 13, 407, 718, 311, 360, 732, 6921, 13, 407, 472, 486, 51508], "temperature": 0.0, "avg_logprob": -0.0812681069534816, "compression_ratio": 1.6065573770491803, "no_speech_prob": 0.002713213674724102}, {"id": 671, "seek": 459638, "start": 4596.38, "end": 4603.5, "text": " be empty list to empty list. And then in the output, we will have a list of expected outputs.", "tokens": [50364, 312, 6707, 1329, 281, 6707, 1329, 13, 400, 550, 294, 264, 5598, 11, 321, 486, 362, 257, 1329, 295, 5176, 23930, 13, 50720], "temperature": 0.0, "avg_logprob": -0.19686403507139624, "compression_ratio": 1.5310734463276836, "no_speech_prob": 0.009120856411755085}, {"id": 672, "seek": 459638, "start": 4603.5, "end": 4612.22, "text": " So we'll have the empty list and then the list AVC. Oops. Let me try this. See if this works.", "tokens": [50720, 407, 321, 603, 362, 264, 6707, 1329, 293, 550, 264, 1329, 30198, 34, 13, 21726, 13, 961, 385, 853, 341, 13, 3008, 498, 341, 1985, 13, 51156], "temperature": 0.0, "avg_logprob": -0.19686403507139624, "compression_ratio": 1.5310734463276836, "no_speech_prob": 0.009120856411755085}, {"id": 673, "seek": 459638, "start": 4612.9400000000005, "end": 4616.7, "text": " Yeah, now it came up with a pen. So I was like, all right, I've got to work for it.", "tokens": [51192, 865, 11, 586, 309, 1361, 493, 365, 257, 3435, 13, 407, 286, 390, 411, 11, 439, 558, 11, 286, 600, 658, 281, 589, 337, 309, 13, 51380], "temperature": 0.0, "avg_logprob": -0.19686403507139624, "compression_ratio": 1.5310734463276836, "no_speech_prob": 0.009120856411755085}, {"id": 674, "seek": 461670, "start": 4617.42, "end": 4624.38, "text": " Okay. Now what are we asked for two? So what happens? I don't know. I have no idea. Oh, okay.", "tokens": [50400, 1033, 13, 823, 437, 366, 321, 2351, 337, 732, 30, 407, 437, 2314, 30, 286, 500, 380, 458, 13, 286, 362, 572, 1558, 13, 876, 11, 1392, 13, 50748], "temperature": 0.0, "avg_logprob": -0.19248529580923227, "compression_ratio": 1.5299145299145298, "no_speech_prob": 0.012425858527421951}, {"id": 675, "seek": 461670, "start": 4624.94, "end": 4630.46, "text": " It's what that is. In case you can't read that. It's a direct application of a", "tokens": [50776, 467, 311, 437, 300, 307, 13, 682, 1389, 291, 393, 380, 1401, 300, 13, 467, 311, 257, 2047, 3861, 295, 257, 51052], "temperature": 0.0, "avg_logprob": -0.19248529580923227, "compression_ratio": 1.5299145299145298, "no_speech_prob": 0.012425858527421951}, {"id": 676, "seek": 461670, "start": 4630.46, "end": 4636.22, "text": " variadic function call with zero arguments, which returns the procedure of pen. It's like,", "tokens": [51052, 3034, 43341, 2445, 818, 365, 4018, 12869, 11, 597, 11247, 264, 10747, 295, 3435, 13, 467, 311, 411, 11, 51340], "temperature": 0.0, "avg_logprob": -0.19248529580923227, "compression_ratio": 1.5299145299145298, "no_speech_prob": 0.012425858527421951}, {"id": 677, "seek": 461670, "start": 4636.22, "end": 4643.0199999999995, "text": " okay, well, I'm no dummy. I'll keep doing that. So this version is quite slow. And if you want", "tokens": [51340, 1392, 11, 731, 11, 286, 478, 572, 35064, 13, 286, 603, 1066, 884, 300, 13, 407, 341, 3037, 307, 1596, 2964, 13, 400, 498, 291, 528, 51680], "temperature": 0.0, "avg_logprob": -0.19248529580923227, "compression_ratio": 1.5299145299145298, "no_speech_prob": 0.012425858527421951}, {"id": 678, "seek": 464302, "start": 4643.02, "end": 4651.5, "text": " to synthesize code for real, it can take quite a while. But we've been working on a new tool.", "tokens": [50364, 281, 26617, 1125, 3089, 337, 957, 11, 309, 393, 747, 1596, 257, 1339, 13, 583, 321, 600, 668, 1364, 322, 257, 777, 2290, 13, 50788], "temperature": 0.0, "avg_logprob": -0.1228850294904011, "compression_ratio": 1.4215686274509804, "no_speech_prob": 0.0009999674512073398}, {"id": 679, "seek": 464302, "start": 4652.22, "end": 4659.580000000001, "text": " Let's see if I can zoom in. Ooh, it works today. Nice. All right. There's a tool called Barlemin", "tokens": [50824, 961, 311, 536, 498, 286, 393, 8863, 294, 13, 7951, 11, 309, 1985, 965, 13, 5490, 13, 1057, 558, 13, 821, 311, 257, 2290, 1219, 4156, 306, 2367, 51192], "temperature": 0.0, "avg_logprob": -0.1228850294904011, "compression_ratio": 1.4215686274509804, "no_speech_prob": 0.0009999674512073398}, {"id": 680, "seek": 464302, "start": 4659.580000000001, "end": 4668.3, "text": " that I've been developing with Greg Rosenblatt and Michael Bountine and other people. And this tool", "tokens": [51192, 300, 286, 600, 668, 6416, 365, 11490, 33630, 5199, 1591, 293, 5116, 363, 792, 533, 293, 661, 561, 13, 400, 341, 2290, 51628], "temperature": 0.0, "avg_logprob": -0.1228850294904011, "compression_ratio": 1.4215686274509804, "no_speech_prob": 0.0009999674512073398}, {"id": 681, "seek": 466830, "start": 4669.1, "end": 4673.820000000001, "text": " is basically just an interface. I learned a little bit of Swift code and I wrote this.", "tokens": [50404, 307, 1936, 445, 364, 9226, 13, 286, 3264, 257, 707, 857, 295, 25539, 3089, 293, 286, 4114, 341, 13, 50640], "temperature": 0.0, "avg_logprob": -0.11859347399543313, "compression_ratio": 1.5450643776824033, "no_speech_prob": 0.0038224277086555958}, {"id": 682, "seek": 466830, "start": 4675.1, "end": 4680.3, "text": " You can see it's beautiful. And basically, this is just an interface on what you saw", "tokens": [50704, 509, 393, 536, 309, 311, 2238, 13, 400, 1936, 11, 341, 307, 445, 364, 9226, 322, 437, 291, 1866, 50964], "temperature": 0.0, "avg_logprob": -0.11859347399543313, "compression_ratio": 1.5450643776824033, "no_speech_prob": 0.0038224277086555958}, {"id": 683, "seek": 466830, "start": 4680.3, "end": 4686.9400000000005, "text": " with some optimizations behind. It runs about 10 million times faster than the naive version.", "tokens": [50964, 365, 512, 5028, 14455, 2261, 13, 467, 6676, 466, 1266, 2459, 1413, 4663, 813, 264, 29052, 3037, 13, 51296], "temperature": 0.0, "avg_logprob": -0.11859347399543313, "compression_ratio": 1.5450643776824033, "no_speech_prob": 0.0038224277086555958}, {"id": 684, "seek": 466830, "start": 4687.900000000001, "end": 4692.3, "text": " When you're doing program sensors, that's important because you're in an exponential space. So", "tokens": [51344, 1133, 291, 434, 884, 1461, 14840, 11, 300, 311, 1021, 570, 291, 434, 294, 364, 21510, 1901, 13, 407, 51564], "temperature": 0.0, "avg_logprob": -0.11859347399543313, "compression_ratio": 1.5450643776824033, "no_speech_prob": 0.0038224277086555958}, {"id": 685, "seek": 469230, "start": 4692.9400000000005, "end": 4699.66, "text": " we are going to write a pen a slightly different way. So the code in the upper left", "tokens": [50396, 321, 366, 516, 281, 2464, 257, 3435, 257, 4748, 819, 636, 13, 407, 264, 3089, 294, 264, 6597, 1411, 50732], "temperature": 0.0, "avg_logprob": -0.1384947769285187, "compression_ratio": 1.7984790874524714, "no_speech_prob": 0.00016861782933119684}, {"id": 686, "seek": 469230, "start": 4700.3, "end": 4707.1, "text": " is our definition of a pen. You can see we left some parts out. So we left the name of the function", "tokens": [50764, 307, 527, 7123, 295, 257, 3435, 13, 509, 393, 536, 321, 1411, 512, 3166, 484, 13, 407, 321, 1411, 264, 1315, 295, 264, 2445, 51104], "temperature": 0.0, "avg_logprob": -0.1384947769285187, "compression_ratio": 1.7984790874524714, "no_speech_prob": 0.00016861782933119684}, {"id": 687, "seek": 469230, "start": 4707.1, "end": 4711.58, "text": " out. That's this comma a. That's a mini-canron logic variable. It's a meta variable. You can", "tokens": [51104, 484, 13, 663, 311, 341, 22117, 257, 13, 663, 311, 257, 8382, 12, 7035, 2044, 9952, 7006, 13, 467, 311, 257, 19616, 7006, 13, 509, 393, 51328], "temperature": 0.0, "avg_logprob": -0.1384947769285187, "compression_ratio": 1.7984790874524714, "no_speech_prob": 0.00016861782933119684}, {"id": 688, "seek": 469230, "start": 4711.58, "end": 4715.42, "text": " think of it as a whole in the program. We don't know what that expression is. We don't know what", "tokens": [51328, 519, 295, 309, 382, 257, 1379, 294, 264, 1461, 13, 492, 500, 380, 458, 437, 300, 6114, 307, 13, 492, 500, 380, 458, 437, 51520], "temperature": 0.0, "avg_logprob": -0.1384947769285187, "compression_ratio": 1.7984790874524714, "no_speech_prob": 0.00016861782933119684}, {"id": 689, "seek": 469230, "start": 4715.42, "end": 4719.1, "text": " the arguments are to lambda or how many there are or anything like that. And we don't know what the", "tokens": [51520, 264, 12869, 366, 281, 13607, 420, 577, 867, 456, 366, 420, 1340, 411, 300, 13, 400, 321, 500, 380, 458, 437, 264, 51704], "temperature": 0.0, "avg_logprob": -0.1384947769285187, "compression_ratio": 1.7984790874524714, "no_speech_prob": 0.00016861782933119684}, {"id": 690, "seek": 471910, "start": 4719.1, "end": 4725.26, "text": " body of the lambda is. So we're going to let our tool come up with that for us. And what we're", "tokens": [50364, 1772, 295, 264, 13607, 307, 13, 407, 321, 434, 516, 281, 718, 527, 2290, 808, 493, 365, 300, 337, 505, 13, 400, 437, 321, 434, 50672], "temperature": 0.0, "avg_logprob": -0.15145338552969473, "compression_ratio": 1.7843866171003717, "no_speech_prob": 0.0018670402932912111}, {"id": 691, "seek": 471910, "start": 4725.26, "end": 4730.14, "text": " going to do is just give some examples of a pen. So I'm going to append two lists, the empty list,", "tokens": [50672, 516, 281, 360, 307, 445, 976, 512, 5110, 295, 257, 3435, 13, 407, 286, 478, 516, 281, 34116, 732, 14511, 11, 264, 6707, 1329, 11, 50916], "temperature": 0.0, "avg_logprob": -0.15145338552969473, "compression_ratio": 1.7843866171003717, "no_speech_prob": 0.0018670402932912111}, {"id": 692, "seek": 471910, "start": 4730.14, "end": 4734.860000000001, "text": " to the empty list. So give me the empty list. And Barlowman's going to think about it and say,", "tokens": [50916, 281, 264, 6707, 1329, 13, 407, 976, 385, 264, 6707, 1329, 13, 400, 4156, 14107, 1601, 311, 516, 281, 519, 466, 309, 293, 584, 11, 51152], "temperature": 0.0, "avg_logprob": -0.15145338552969473, "compression_ratio": 1.7843866171003717, "no_speech_prob": 0.0018670402932912111}, {"id": 693, "seek": 471910, "start": 4734.860000000001, "end": 4742.3, "text": " I've got a solution for you. You want a function called a pen. He's like, yes, very well. That", "tokens": [51152, 286, 600, 658, 257, 3827, 337, 291, 13, 509, 528, 257, 2445, 1219, 257, 3435, 13, 634, 311, 411, 11, 2086, 11, 588, 731, 13, 663, 51524], "temperature": 0.0, "avg_logprob": -0.15145338552969473, "compression_ratio": 1.7843866171003717, "no_speech_prob": 0.0018670402932912111}, {"id": 694, "seek": 471910, "start": 4742.3, "end": 4748.860000000001, "text": " function can take any number of arguments. Well, strictly, schemes of pen can. And it's going to", "tokens": [51524, 2445, 393, 747, 604, 1230, 295, 12869, 13, 1042, 11, 20792, 11, 26954, 295, 3435, 393, 13, 400, 309, 311, 516, 281, 51852], "temperature": 0.0, "avg_logprob": -0.15145338552969473, "compression_ratio": 1.7843866171003717, "no_speech_prob": 0.0018670402932912111}, {"id": 695, "seek": 474886, "start": 4748.86, "end": 4756.62, "text": " return to the empty list. Right? Very exciting moment. All right. Well, that's okay, I guess.", "tokens": [50364, 2736, 281, 264, 6707, 1329, 13, 1779, 30, 4372, 4670, 1623, 13, 1057, 558, 13, 1042, 11, 300, 311, 1392, 11, 286, 2041, 13, 50752], "temperature": 0.0, "avg_logprob": -0.1845841231169524, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.0001686428440734744}, {"id": 696, "seek": 474886, "start": 4757.339999999999, "end": 4766.0599999999995, "text": " How about we have a list containing two lists, list A and list B, and we want to get back A, B.", "tokens": [50788, 1012, 466, 321, 362, 257, 1329, 19273, 732, 14511, 11, 1329, 316, 293, 1329, 363, 11, 293, 321, 528, 281, 483, 646, 316, 11, 363, 13, 51224], "temperature": 0.0, "avg_logprob": -0.1845841231169524, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.0001686428440734744}, {"id": 697, "seek": 474886, "start": 4767.099999999999, "end": 4775.74, "text": " Okay. Well, add another test. Oh, lucky day. You want a function called a pen, which takes", "tokens": [51276, 1033, 13, 1042, 11, 909, 1071, 1500, 13, 876, 11, 6356, 786, 13, 509, 528, 257, 2445, 1219, 257, 3435, 11, 597, 2516, 51708], "temperature": 0.0, "avg_logprob": -0.1845841231169524, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.0001686428440734744}, {"id": 698, "seek": 477574, "start": 4775.74, "end": 4781.82, "text": " two arguments and doesn't matter what the names are. And if the second argument is empty, we'll", "tokens": [50364, 732, 12869, 293, 1177, 380, 1871, 437, 264, 5288, 366, 13, 400, 498, 264, 1150, 6770, 307, 6707, 11, 321, 603, 50668], "temperature": 0.0, "avg_logprob": -0.09308193524678549, "compression_ratio": 1.692883895131086, "no_speech_prob": 0.00040443087345920503}, {"id": 699, "seek": 477574, "start": 4781.82, "end": 4786.54, "text": " return that. Why not? Because that's the first test. Otherwise, we'll return to list A, B.", "tokens": [50668, 2736, 300, 13, 1545, 406, 30, 1436, 300, 311, 264, 700, 1500, 13, 10328, 11, 321, 603, 2736, 281, 1329, 316, 11, 363, 13, 50904], "temperature": 0.0, "avg_logprob": -0.09308193524678549, "compression_ratio": 1.692883895131086, "no_speech_prob": 0.00040443087345920503}, {"id": 700, "seek": 477574, "start": 4788.46, "end": 4792.54, "text": " All right. Well, that's getting a little annoying. So let's introduce a new concept,", "tokens": [51000, 1057, 558, 13, 1042, 11, 300, 311, 1242, 257, 707, 11304, 13, 407, 718, 311, 5366, 257, 777, 3410, 11, 51204], "temperature": 0.0, "avg_logprob": -0.09308193524678549, "compression_ratio": 1.692883895131086, "no_speech_prob": 0.00040443087345920503}, {"id": 701, "seek": 477574, "start": 4792.54, "end": 4797.5, "text": " that of the gensim, the generated symbol. We don't actually care what's in that list.", "tokens": [51204, 300, 295, 264, 10668, 332, 11, 264, 10833, 5986, 13, 492, 500, 380, 767, 1127, 437, 311, 294, 300, 1329, 13, 51452], "temperature": 0.0, "avg_logprob": -0.09308193524678549, "compression_ratio": 1.692883895131086, "no_speech_prob": 0.00040443087345920503}, {"id": 702, "seek": 477574, "start": 4798.139999999999, "end": 4802.86, "text": " We just want to make sure that that's not going to appear in the output program. As long as it", "tokens": [51484, 492, 445, 528, 281, 652, 988, 300, 300, 311, 406, 516, 281, 4204, 294, 264, 5598, 1461, 13, 1018, 938, 382, 309, 51720], "temperature": 0.0, "avg_logprob": -0.09308193524678549, "compression_ratio": 1.692883895131086, "no_speech_prob": 0.00040443087345920503}, {"id": 703, "seek": 480286, "start": 4802.86, "end": 4808.62, "text": " doesn't appear in the output program, we're happy. So we're going to change that. Oh, now we do have", "tokens": [50364, 1177, 380, 4204, 294, 264, 5598, 1461, 11, 321, 434, 2055, 13, 407, 321, 434, 516, 281, 1319, 300, 13, 876, 11, 586, 321, 360, 362, 50652], "temperature": 0.0, "avg_logprob": -0.14629868627751916, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.0006877842242829502}, {"id": 704, "seek": 480286, "start": 4808.62, "end": 4815.179999999999, "text": " to do a little more work. Two arguments, null test on the second argument. The second argument is", "tokens": [50652, 281, 360, 257, 707, 544, 589, 13, 4453, 12869, 11, 18184, 1500, 322, 264, 1150, 6770, 13, 440, 1150, 6770, 307, 50980], "temperature": 0.0, "avg_logprob": -0.14629868627751916, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.0006877842242829502}, {"id": 705, "seek": 480286, "start": 4815.179999999999, "end": 4821.42, "text": " null. Otherwise, we have to start doing some operations, cars and cons and things like that.", "tokens": [50980, 18184, 13, 10328, 11, 321, 362, 281, 722, 884, 512, 7705, 11, 5163, 293, 1014, 293, 721, 411, 300, 13, 51292], "temperature": 0.0, "avg_logprob": -0.14629868627751916, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.0006877842242829502}, {"id": 706, "seek": 480286, "start": 4821.42, "end": 4825.98, "text": " But we haven't, there's no recursive call. It's not going to work. So let me try one more.", "tokens": [51292, 583, 321, 2378, 380, 11, 456, 311, 572, 20560, 488, 818, 13, 467, 311, 406, 516, 281, 589, 13, 407, 718, 385, 853, 472, 544, 13, 51520], "temperature": 0.0, "avg_logprob": -0.14629868627751916, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.0006877842242829502}, {"id": 707, "seek": 482598, "start": 4826.54, "end": 4832.0599999999995, "text": " List of length two. Yeah, you can see where this game goes.", "tokens": [50392, 17668, 295, 4641, 732, 13, 865, 11, 291, 393, 536, 689, 341, 1216, 1709, 13, 50668], "temperature": 0.0, "avg_logprob": -0.31661875742786333, "compression_ratio": 1.3153846153846154, "no_speech_prob": 0.002511229133233428}, {"id": 708, "seek": 482598, "start": 4841.419999999999, "end": 4842.459999999999, "text": " Let's think about that.", "tokens": [51136, 961, 311, 519, 466, 300, 13, 51188], "temperature": 0.0, "avg_logprob": -0.31661875742786333, "compression_ratio": 1.3153846153846154, "no_speech_prob": 0.002511229133233428}, {"id": 709, "seek": 482598, "start": 4847.74, "end": 4853.74, "text": " It's thinking. It's like, all right. There's some putting in some work. Oh, what? Looks", "tokens": [51452, 467, 311, 1953, 13, 467, 311, 411, 11, 439, 558, 13, 821, 311, 512, 3372, 294, 512, 589, 13, 876, 11, 437, 30, 10027, 51752], "temperature": 0.0, "avg_logprob": -0.31661875742786333, "compression_ratio": 1.3153846153846154, "no_speech_prob": 0.002511229133233428}, {"id": 710, "seek": 485374, "start": 4853.74, "end": 4858.7, "text": " like a recursive call. That looks perilously close to being correct. It's a little hard to read.", "tokens": [50364, 411, 257, 20560, 488, 818, 13, 663, 1542, 46118, 5098, 1998, 281, 885, 3006, 13, 467, 311, 257, 707, 1152, 281, 1401, 13, 50612], "temperature": 0.0, "avg_logprob": -0.1481815260283801, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.0010003349743783474}, {"id": 711, "seek": 485374, "start": 4858.7, "end": 4866.219999999999, "text": " So I will give it, I will use the editor part to fill in some concrete names and see what we can get.", "tokens": [50612, 407, 286, 486, 976, 309, 11, 286, 486, 764, 264, 9839, 644, 281, 2836, 294, 512, 9859, 5288, 293, 536, 437, 321, 393, 483, 13, 50988], "temperature": 0.0, "avg_logprob": -0.1481815260283801, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.0010003349743783474}, {"id": 712, "seek": 485374, "start": 4866.86, "end": 4873.9, "text": " Oh, that is a pen. That's nice. It's example-based program synthesis. Furthermore,", "tokens": [51020, 876, 11, 300, 307, 257, 3435, 13, 663, 311, 1481, 13, 467, 311, 1365, 12, 6032, 1461, 30252, 13, 23999, 11, 51372], "temperature": 0.0, "avg_logprob": -0.1481815260283801, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.0010003349743783474}, {"id": 713, "seek": 485374, "start": 4874.54, "end": 4878.46, "text": " I can do some other things that are interesting, like I could add a few more tests.", "tokens": [51404, 286, 393, 360, 512, 661, 721, 300, 366, 1880, 11, 411, 286, 727, 909, 257, 1326, 544, 6921, 13, 51600], "temperature": 0.0, "avg_logprob": -0.1481815260283801, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.0010003349743783474}, {"id": 714, "seek": 487846, "start": 4878.94, "end": 4887.18, "text": " So I could say append of list A to the empty list. Should be empty list. I could say append.", "tokens": [50388, 407, 286, 727, 584, 34116, 295, 1329, 316, 281, 264, 6707, 1329, 13, 6454, 312, 6707, 1329, 13, 286, 727, 584, 34116, 13, 50800], "temperature": 0.0, "avg_logprob": -0.3003557125727336, "compression_ratio": 1.4299065420560748, "no_speech_prob": 0.0020182470325380564}, {"id": 715, "seek": 487846, "start": 4890.3, "end": 4896.78, "text": " Oh, oh, yeah. Yes. Yeah, garbage in, garbage out. Good call.", "tokens": [50956, 876, 11, 1954, 11, 1338, 13, 1079, 13, 865, 11, 14150, 294, 11, 14150, 484, 13, 2205, 818, 13, 51280], "temperature": 0.0, "avg_logprob": -0.3003557125727336, "compression_ratio": 1.4299065420560748, "no_speech_prob": 0.0020182470325380564}, {"id": 716, "seek": 489678, "start": 4896.86, "end": 4907.82, "text": " Oh, okay. Anyone would like a job as a QA tester for Barleman.", "tokens": [50368, 876, 11, 1392, 13, 14643, 576, 411, 257, 1691, 382, 257, 1249, 32, 36101, 337, 4156, 306, 1601, 13, 50916], "temperature": 0.0, "avg_logprob": -0.1756848366029801, "compression_ratio": 1.6267942583732058, "no_speech_prob": 0.0013449303805828094}, {"id": 717, "seek": 489678, "start": 4908.86, "end": 4913.5, "text": " Okay. So I wrote some more tests. And of course, Barleman could already synthesize it. So it's", "tokens": [50968, 1033, 13, 407, 286, 4114, 512, 544, 6921, 13, 400, 295, 1164, 11, 4156, 306, 1601, 727, 1217, 26617, 1125, 309, 13, 407, 309, 311, 51200], "temperature": 0.0, "avg_logprob": -0.1756848366029801, "compression_ratio": 1.6267942583732058, "no_speech_prob": 0.0013449303805828094}, {"id": 718, "seek": 489678, "start": 4913.5, "end": 4920.46, "text": " not really necessary. But imagine for a second that maybe this program is too hard for Barleman", "tokens": [51200, 406, 534, 4818, 13, 583, 3811, 337, 257, 1150, 300, 1310, 341, 1461, 307, 886, 1152, 337, 4156, 306, 1601, 51548], "temperature": 0.0, "avg_logprob": -0.1756848366029801, "compression_ratio": 1.6267942583732058, "no_speech_prob": 0.0013449303805828094}, {"id": 719, "seek": 489678, "start": 4920.46, "end": 4925.34, "text": " to synthesize. So instead of having Barleman synthesize the program from the examples,", "tokens": [51548, 281, 26617, 1125, 13, 407, 2602, 295, 1419, 4156, 306, 1601, 26617, 1125, 264, 1461, 490, 264, 5110, 11, 51792], "temperature": 0.0, "avg_logprob": -0.1756848366029801, "compression_ratio": 1.6267942583732058, "no_speech_prob": 0.0013449303805828094}, {"id": 720, "seek": 492534, "start": 4925.34, "end": 4930.54, "text": " we're going to do test-driven development, right? I mean, this is real test-driven development.", "tokens": [50364, 321, 434, 516, 281, 360, 1500, 12, 25456, 3250, 11, 558, 30, 286, 914, 11, 341, 307, 957, 1500, 12, 25456, 3250, 13, 50624], "temperature": 0.0, "avg_logprob": -0.21334676327912705, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.0008424270781688392}, {"id": 721, "seek": 492534, "start": 4932.46, "end": 4937.5, "text": " So we wrote our tests first, and now we're going to write our code, right? So I'm going to call it", "tokens": [50720, 407, 321, 4114, 527, 6921, 700, 11, 293, 586, 321, 434, 516, 281, 2464, 527, 3089, 11, 558, 30, 407, 286, 478, 516, 281, 818, 309, 50972], "temperature": 0.0, "avg_logprob": -0.21334676327912705, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.0008424270781688392}, {"id": 722, "seek": 492534, "start": 4937.5, "end": 4945.9800000000005, "text": " a pen. If I call it, like, you know, king cat, many kinderans are like, no, wrong. Computer says no.", "tokens": [50972, 257, 3435, 13, 759, 286, 818, 309, 11, 411, 11, 291, 458, 11, 4867, 3857, 11, 867, 733, 260, 599, 366, 411, 11, 572, 11, 2085, 13, 22289, 1619, 572, 13, 51396], "temperature": 0.0, "avg_logprob": -0.21334676327912705, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.0008424270781688392}, {"id": 723, "seek": 492534, "start": 4947.26, "end": 4952.860000000001, "text": " Fail. All right. So let's call it a pen. And let's say we're going to take two arguments,", "tokens": [51460, 39094, 13, 1057, 558, 13, 407, 718, 311, 818, 309, 257, 3435, 13, 400, 718, 311, 584, 321, 434, 516, 281, 747, 732, 12869, 11, 51740], "temperature": 0.0, "avg_logprob": -0.21334676327912705, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.0008424270781688392}, {"id": 724, "seek": 495286, "start": 4952.86, "end": 4962.46, "text": " L and S, like before. Great. And we probably want an if and a null check on L. And, you know,", "tokens": [50364, 441, 293, 318, 11, 411, 949, 13, 3769, 13, 400, 321, 1391, 528, 364, 498, 293, 257, 18184, 1520, 322, 441, 13, 400, 11, 291, 458, 11, 50844], "temperature": 0.0, "avg_logprob": -0.10078804515232549, "compression_ratio": 1.5802469135802468, "no_speech_prob": 0.0005032907356508076}, {"id": 725, "seek": 495286, "start": 4962.46, "end": 4969.339999999999, "text": " we can start kind of filling in the structure here. And Barleman can probably synthesize that,", "tokens": [50844, 321, 393, 722, 733, 295, 10623, 294, 264, 3877, 510, 13, 400, 4156, 306, 1601, 393, 1391, 26617, 1125, 300, 11, 51188], "temperature": 0.0, "avg_logprob": -0.10078804515232549, "compression_ratio": 1.5802469135802468, "no_speech_prob": 0.0005032907356508076}, {"id": 726, "seek": 495286, "start": 4969.339999999999, "end": 4974.46, "text": " fine. But let's pretend we're working on something a little more complicated, and Barleman can't do", "tokens": [51188, 2489, 13, 583, 718, 311, 11865, 321, 434, 1364, 322, 746, 257, 707, 544, 6179, 11, 293, 4156, 306, 1601, 393, 380, 360, 51444], "temperature": 0.0, "avg_logprob": -0.10078804515232549, "compression_ratio": 1.5802469135802468, "no_speech_prob": 0.0005032907356508076}, {"id": 727, "seek": 495286, "start": 4974.46, "end": 4979.9, "text": " it. So now I'm typing. And notice I've got some holes in my program. So I don't know what those", "tokens": [51444, 309, 13, 407, 586, 286, 478, 18444, 13, 400, 3449, 286, 600, 658, 512, 8118, 294, 452, 1461, 13, 407, 286, 500, 380, 458, 437, 729, 51716], "temperature": 0.0, "avg_logprob": -0.10078804515232549, "compression_ratio": 1.5802469135802468, "no_speech_prob": 0.0005032907356508076}, {"id": 728, "seek": 497990, "start": 4979.9, "end": 4983.5, "text": " are. And those are arbitrary expressions. This could be, you know, gigantic, right? I could have", "tokens": [50364, 366, 13, 400, 729, 366, 23211, 15277, 13, 639, 727, 312, 11, 291, 458, 11, 26800, 11, 558, 30, 286, 727, 362, 50544], "temperature": 0.0, "avg_logprob": -0.14981586249299753, "compression_ratio": 1.5816326530612246, "no_speech_prob": 0.0010648051975294948}, {"id": 729, "seek": 497990, "start": 4983.5, "end": 4989.42, "text": " a scheme compiler as A or something. It is solving it faster because I've filled in more.", "tokens": [50544, 257, 12232, 31958, 382, 316, 420, 746, 13, 467, 307, 12606, 309, 4663, 570, 286, 600, 6412, 294, 544, 13, 50840], "temperature": 0.0, "avg_logprob": -0.14981586249299753, "compression_ratio": 1.5816326530612246, "no_speech_prob": 0.0010648051975294948}, {"id": 730, "seek": 497990, "start": 4990.299999999999, "end": 4993.66, "text": " The current version of Barleman, sometimes you fill in more and it's like really slow.", "tokens": [50884, 440, 2190, 3037, 295, 4156, 306, 1601, 11, 2171, 291, 2836, 294, 544, 293, 309, 311, 411, 534, 2964, 13, 51052], "temperature": 0.0, "avg_logprob": -0.14981586249299753, "compression_ratio": 1.5816326530612246, "no_speech_prob": 0.0010648051975294948}, {"id": 731, "seek": 497990, "start": 4993.66, "end": 5000.299999999999, "text": " Because it gets slower. So we're working on that. But anyway, so let me put in L. That's one of my", "tokens": [51052, 1436, 309, 2170, 14009, 13, 407, 321, 434, 1364, 322, 300, 13, 583, 4033, 11, 370, 718, 385, 829, 294, 441, 13, 663, 311, 472, 295, 452, 51384], "temperature": 0.0, "avg_logprob": -0.14981586249299753, "compression_ratio": 1.5816326530612246, "no_speech_prob": 0.0010648051975294948}, {"id": 732, "seek": 497990, "start": 5000.299999999999, "end": 5005.5, "text": " arguments. So I'm going to think, hey, L is probably the right one. Oh, Barleman's like, no.", "tokens": [51384, 12869, 13, 407, 286, 478, 516, 281, 519, 11, 4177, 11, 441, 307, 1391, 264, 558, 472, 13, 876, 11, 4156, 306, 1601, 311, 411, 11, 572, 13, 51644], "temperature": 0.0, "avg_logprob": -0.14981586249299753, "compression_ratio": 1.5816326530612246, "no_speech_prob": 0.0010648051975294948}, {"id": 733, "seek": 500550, "start": 5005.58, "end": 5011.42, "text": " Computer says, no. That particular test is incompatible with the partially specified program", "tokens": [50368, 22289, 1619, 11, 572, 13, 663, 1729, 1500, 307, 40393, 267, 964, 365, 264, 18886, 22206, 1461, 50660], "temperature": 0.0, "avg_logprob": -0.1405917351398993, "compression_ratio": 1.7116788321167884, "no_speech_prob": 0.004330235067754984}, {"id": 734, "seek": 500550, "start": 5011.42, "end": 5016.78, "text": " you've written. So what we can do is write our tests, try to use it for synthesis. But if it's too", "tokens": [50660, 291, 600, 3720, 13, 407, 437, 321, 393, 360, 307, 2464, 527, 6921, 11, 853, 281, 764, 309, 337, 30252, 13, 583, 498, 309, 311, 886, 50928], "temperature": 0.0, "avg_logprob": -0.1405917351398993, "compression_ratio": 1.7116788321167884, "no_speech_prob": 0.004330235067754984}, {"id": 735, "seek": 500550, "start": 5016.78, "end": 5022.38, "text": " slow for synthesis, we can just use this as an editor. And it's constantly in the background", "tokens": [50928, 2964, 337, 30252, 11, 321, 393, 445, 764, 341, 382, 364, 9839, 13, 400, 309, 311, 6460, 294, 264, 3678, 51208], "temperature": 0.0, "avg_logprob": -0.1405917351398993, "compression_ratio": 1.7116788321167884, "no_speech_prob": 0.004330235067754984}, {"id": 736, "seek": 500550, "start": 5022.38, "end": 5027.9, "text": " taking up all your corridors and heating your apartment. And desperately trying to prove,", "tokens": [51208, 1940, 493, 439, 428, 46920, 293, 15082, 428, 9587, 13, 400, 23726, 1382, 281, 7081, 11, 51484], "temperature": 0.0, "avg_logprob": -0.1405917351398993, "compression_ratio": 1.7116788321167884, "no_speech_prob": 0.004330235067754984}, {"id": 737, "seek": 500550, "start": 5028.54, "end": 5033.66, "text": " and this is a proof because many cameras are theorem prover, that the partially specified code", "tokens": [51516, 293, 341, 307, 257, 8177, 570, 867, 8622, 366, 20904, 447, 331, 11, 300, 264, 18886, 22206, 3089, 51772], "temperature": 0.0, "avg_logprob": -0.1405917351398993, "compression_ratio": 1.7116788321167884, "no_speech_prob": 0.004330235067754984}, {"id": 738, "seek": 503366, "start": 5033.66, "end": 5037.82, "text": " you've written is actually incompatible with when you test. It doesn't mean your test is wrong.", "tokens": [50364, 291, 600, 3720, 307, 767, 40393, 267, 964, 365, 562, 291, 1500, 13, 467, 1177, 380, 914, 428, 1500, 307, 2085, 13, 50572], "temperature": 0.0, "avg_logprob": -0.10086488723754883, "compression_ratio": 1.7236363636363636, "no_speech_prob": 0.0005698880413547158}, {"id": 739, "seek": 503366, "start": 5037.82, "end": 5041.66, "text": " Maybe your code is wrong. Maybe they're both wrong. Maybe the semantics for the interpreter", "tokens": [50572, 2704, 428, 3089, 307, 2085, 13, 2704, 436, 434, 1293, 2085, 13, 2704, 264, 4361, 45298, 337, 264, 34132, 50764], "temperature": 0.0, "avg_logprob": -0.10086488723754883, "compression_ratio": 1.7236363636363636, "no_speech_prob": 0.0005698880413547158}, {"id": 740, "seek": 503366, "start": 5041.66, "end": 5049.099999999999, "text": " underlying Barleman is wrong. But they're certainly inconsistent, right? And I think this sort of", "tokens": [50764, 14217, 4156, 306, 1601, 307, 2085, 13, 583, 436, 434, 3297, 36891, 11, 558, 30, 400, 286, 519, 341, 1333, 295, 51136], "temperature": 0.0, "avg_logprob": -0.10086488723754883, "compression_ratio": 1.7236363636363636, "no_speech_prob": 0.0005698880413547158}, {"id": 741, "seek": 503366, "start": 5049.099999999999, "end": 5057.42, "text": " technology is, you know, getting ready at this point to be practical for at least some use cases.", "tokens": [51136, 2899, 307, 11, 291, 458, 11, 1242, 1919, 412, 341, 935, 281, 312, 8496, 337, 412, 1935, 512, 764, 3331, 13, 51552], "temperature": 0.0, "avg_logprob": -0.10086488723754883, "compression_ratio": 1.7236363636363636, "no_speech_prob": 0.0005698880413547158}, {"id": 742, "seek": 503366, "start": 5057.42, "end": 5061.0199999999995, "text": " And I should also point out that there are many other people working on program synthesis,", "tokens": [51552, 400, 286, 820, 611, 935, 484, 300, 456, 366, 867, 661, 561, 1364, 322, 1461, 30252, 11, 51732], "temperature": 0.0, "avg_logprob": -0.10086488723754883, "compression_ratio": 1.7236363636363636, "no_speech_prob": 0.0005698880413547158}, {"id": 743, "seek": 506102, "start": 5061.580000000001, "end": 5067.1, "text": " I think a renaissance in that area right now. But I do think that one thing that's interesting", "tokens": [50392, 286, 519, 257, 319, 629, 14431, 294, 300, 1859, 558, 586, 13, 583, 286, 360, 519, 300, 472, 551, 300, 311, 1880, 50668], "temperature": 0.0, "avg_logprob": -0.08496298789978027, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.0011480082757771015}, {"id": 744, "seek": 506102, "start": 5067.1, "end": 5074.06, "text": " is sort of the way we're doing synthesis, which is by taking that interpreter that I showed you", "tokens": [50668, 307, 1333, 295, 264, 636, 321, 434, 884, 30252, 11, 597, 307, 538, 1940, 300, 34132, 300, 286, 4712, 291, 51016], "temperature": 0.0, "avg_logprob": -0.08496298789978027, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.0011480082757771015}, {"id": 745, "seek": 506102, "start": 5074.06, "end": 5078.46, "text": " in the beginning, this beautiful piece of code, and looking at the original description of it", "tokens": [51016, 294, 264, 2863, 11, 341, 2238, 2522, 295, 3089, 11, 293, 1237, 412, 264, 3380, 3855, 295, 309, 51236], "temperature": 0.0, "avg_logprob": -0.08496298789978027, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.0011480082757771015}, {"id": 746, "seek": 506102, "start": 5078.46, "end": 5083.580000000001, "text": " in those equal signs, and taking the equal signs seriously. We're going back and revisiting this", "tokens": [51236, 294, 729, 2681, 7880, 11, 293, 1940, 264, 2681, 7880, 6638, 13, 492, 434, 516, 646, 293, 20767, 1748, 341, 51492], "temperature": 0.0, "avg_logprob": -0.08496298789978027, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.0011480082757771015}, {"id": 747, "seek": 508358, "start": 5083.58, "end": 5091.34, "text": " artifact that people had an understanding of, and we're trying to actually execute, you know,", "tokens": [50364, 34806, 300, 561, 632, 364, 3701, 295, 11, 293, 321, 434, 1382, 281, 767, 14483, 11, 291, 458, 11, 50752], "temperature": 0.0, "avg_logprob": -0.11079423768179757, "compression_ratio": 1.7320754716981133, "no_speech_prob": 0.030557045713067055}, {"id": 748, "seek": 508358, "start": 5091.34, "end": 5096.14, "text": " another way of looking at it, this relational semantics view. And people, you know, people", "tokens": [50752, 1071, 636, 295, 1237, 412, 309, 11, 341, 38444, 4361, 45298, 1910, 13, 400, 561, 11, 291, 458, 11, 561, 50992], "temperature": 0.0, "avg_logprob": -0.11079423768179757, "compression_ratio": 1.7320754716981133, "no_speech_prob": 0.030557045713067055}, {"id": 749, "seek": 508358, "start": 5096.14, "end": 5100.46, "text": " know relational semantics. I mean, the way that the math was written down is as relations.", "tokens": [50992, 458, 38444, 4361, 45298, 13, 286, 914, 11, 264, 636, 300, 264, 5221, 390, 3720, 760, 307, 382, 2299, 13, 51208], "temperature": 0.0, "avg_logprob": -0.11079423768179757, "compression_ratio": 1.7320754716981133, "no_speech_prob": 0.030557045713067055}, {"id": 750, "seek": 508358, "start": 5101.58, "end": 5106.62, "text": " But the whole point is we've designed this language mini-canron to let us encode these", "tokens": [51264, 583, 264, 1379, 935, 307, 321, 600, 4761, 341, 2856, 8382, 12, 7035, 2044, 281, 718, 505, 2058, 1429, 613, 51516], "temperature": 0.0, "avg_logprob": -0.11079423768179757, "compression_ratio": 1.7320754716981133, "no_speech_prob": 0.030557045713067055}, {"id": 751, "seek": 508358, "start": 5106.62, "end": 5111.18, "text": " relations in a nice way, and then did a bunch of optimizations. So when you write an interpreter", "tokens": [51516, 2299, 294, 257, 1481, 636, 11, 293, 550, 630, 257, 3840, 295, 5028, 14455, 13, 407, 562, 291, 2464, 364, 34132, 51744], "temperature": 0.0, "avg_logprob": -0.11079423768179757, "compression_ratio": 1.7320754716981133, "no_speech_prob": 0.030557045713067055}, {"id": 752, "seek": 511118, "start": 5111.18, "end": 5116.14, "text": " as a relation, you can do this fill-in-the-blank game, right? And there are all sorts of other", "tokens": [50364, 382, 257, 9721, 11, 291, 393, 360, 341, 2836, 12, 259, 12, 3322, 12, 5199, 657, 1216, 11, 558, 30, 400, 456, 366, 439, 7527, 295, 661, 50612], "temperature": 0.0, "avg_logprob": -0.10524089463794505, "compression_ratio": 1.6794425087108014, "no_speech_prob": 0.0026685341726988554}, {"id": 753, "seek": 511118, "start": 5116.14, "end": 5121.26, "text": " examples I could show you with mini-canron, and some really neat things. If you're interested in", "tokens": [50612, 5110, 286, 727, 855, 291, 365, 8382, 12, 7035, 2044, 11, 293, 512, 534, 10654, 721, 13, 759, 291, 434, 3102, 294, 50868], "temperature": 0.0, "avg_logprob": -0.10524089463794505, "compression_ratio": 1.6794425087108014, "no_speech_prob": 0.0026685341726988554}, {"id": 754, "seek": 511118, "start": 5121.26, "end": 5127.820000000001, "text": " that, you might check out the closure conge talk that I gave with Greg Rosenblatt at the conge,", "tokens": [50868, 300, 11, 291, 1062, 1520, 484, 264, 24653, 416, 432, 751, 300, 286, 2729, 365, 11490, 33630, 5199, 1591, 412, 264, 416, 432, 11, 51196], "temperature": 0.0, "avg_logprob": -0.10524089463794505, "compression_ratio": 1.6794425087108014, "no_speech_prob": 0.0026685341726988554}, {"id": 755, "seek": 511118, "start": 5127.820000000001, "end": 5133.02, "text": " last year's conge. And we show off a whole bunch of examples of this sort of thing. And, you know,", "tokens": [51196, 1036, 1064, 311, 416, 432, 13, 400, 321, 855, 766, 257, 1379, 3840, 295, 5110, 295, 341, 1333, 295, 551, 13, 400, 11, 291, 458, 11, 51456], "temperature": 0.0, "avg_logprob": -0.10524089463794505, "compression_ratio": 1.6794425087108014, "no_speech_prob": 0.0026685341726988554}, {"id": 756, "seek": 511118, "start": 5133.02, "end": 5138.14, "text": " we're trying to actively improve it and explore other ways to do things. And we can take things", "tokens": [51456, 321, 434, 1382, 281, 13022, 3470, 309, 293, 6839, 661, 2098, 281, 360, 721, 13, 400, 321, 393, 747, 721, 51712], "temperature": 0.0, "avg_logprob": -0.10524089463794505, "compression_ratio": 1.6794425087108014, "no_speech_prob": 0.0026685341726988554}, {"id": 757, "seek": 513814, "start": 5138.14, "end": 5142.860000000001, "text": " like a proof checker and turn it into a theorem prover by making it a relation, all sorts of fun", "tokens": [50364, 411, 257, 8177, 1520, 260, 293, 1261, 309, 666, 257, 20904, 447, 331, 538, 1455, 309, 257, 9721, 11, 439, 7527, 295, 1019, 50600], "temperature": 0.0, "avg_logprob": -0.12658116658528645, "compression_ratio": 1.7051671732522797, "no_speech_prob": 0.0019252015044912696}, {"id": 758, "seek": 513814, "start": 5142.860000000001, "end": 5148.780000000001, "text": " games. So if this appeals to you, let me know. You might check out the webpage mini-canron.org", "tokens": [50600, 2813, 13, 407, 498, 341, 32603, 281, 291, 11, 718, 385, 458, 13, 509, 1062, 1520, 484, 264, 37852, 8382, 12, 7035, 2044, 13, 4646, 50896], "temperature": 0.0, "avg_logprob": -0.12658116658528645, "compression_ratio": 1.7051671732522797, "no_speech_prob": 0.0019252015044912696}, {"id": 759, "seek": 513814, "start": 5148.780000000001, "end": 5154.22, "text": " that has a description of a lot of the work we've been doing. And also, I run hangouts on", "tokens": [50896, 300, 575, 257, 3855, 295, 257, 688, 295, 264, 589, 321, 600, 668, 884, 13, 400, 611, 11, 286, 1190, 3967, 7711, 322, 51168], "temperature": 0.0, "avg_logprob": -0.12658116658528645, "compression_ratio": 1.7051671732522797, "no_speech_prob": 0.0019252015044912696}, {"id": 760, "seek": 513814, "start": 5154.22, "end": 5159.820000000001, "text": " Saturdays and Sundays, an intro hangout series, an advanced hangout series, to talk about some", "tokens": [51168, 8803, 82, 293, 44857, 11, 364, 12897, 3967, 346, 2638, 11, 364, 7339, 3967, 346, 2638, 11, 281, 751, 466, 512, 51448], "temperature": 0.0, "avg_logprob": -0.12658116658528645, "compression_ratio": 1.7051671732522797, "no_speech_prob": 0.0019252015044912696}, {"id": 761, "seek": 513814, "start": 5159.820000000001, "end": 5164.22, "text": " of these technologies. Just send me an email, drop my line, hang out, we'll get a milkshake.", "tokens": [51448, 295, 613, 7943, 13, 1449, 2845, 385, 364, 3796, 11, 3270, 452, 1622, 11, 3967, 484, 11, 321, 603, 483, 257, 48773, 34593, 13, 51668], "temperature": 0.0, "avg_logprob": -0.12658116658528645, "compression_ratio": 1.7051671732522797, "no_speech_prob": 0.0019252015044912696}, {"id": 762, "seek": 513814, "start": 5164.22, "end": 5167.02, "text": " And we talk about these things. If this thing you're interested in, you want to actually do", "tokens": [51668, 400, 321, 751, 466, 613, 721, 13, 759, 341, 551, 291, 434, 3102, 294, 11, 291, 528, 281, 767, 360, 51808], "temperature": 0.0, "avg_logprob": -0.12658116658528645, "compression_ratio": 1.7051671732522797, "no_speech_prob": 0.0019252015044912696}, {"id": 763, "seek": 516702, "start": 5167.02, "end": 5172.06, "text": " some research, work on it, hacking, whatever, you could probably improve the user interface", "tokens": [50364, 512, 2132, 11, 589, 322, 309, 11, 31422, 11, 2035, 11, 291, 727, 1391, 3470, 264, 4195, 9226, 50616], "temperature": 0.0, "avg_logprob": -0.12477384914051402, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.0017506055301055312}, {"id": 764, "seek": 516702, "start": 5172.06, "end": 5178.700000000001, "text": " of Parliament if nothing else, right? So anyway, this is why I think the interpreter,", "tokens": [50616, 295, 15538, 498, 1825, 1646, 11, 558, 30, 407, 4033, 11, 341, 307, 983, 286, 519, 264, 34132, 11, 50948], "temperature": 0.0, "avg_logprob": -0.12477384914051402, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.0017506055301055312}, {"id": 765, "seek": 516702, "start": 5179.34, "end": 5185.5, "text": " that interpreter written in Lisp, that's higher order, is so beautiful, such a beautiful object,", "tokens": [50980, 300, 34132, 3720, 294, 441, 7631, 11, 300, 311, 2946, 1668, 11, 307, 370, 2238, 11, 1270, 257, 2238, 2657, 11, 51288], "temperature": 0.0, "avg_logprob": -0.12477384914051402, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.0017506055301055312}, {"id": 766, "seek": 516702, "start": 5185.5, "end": 5191.740000000001, "text": " that not only is it very, very dense and an interesting amalgam of very important ideas,", "tokens": [51288, 300, 406, 787, 307, 309, 588, 11, 588, 18011, 293, 364, 1880, 669, 20422, 335, 295, 588, 1021, 3487, 11, 51600], "temperature": 0.0, "avg_logprob": -0.12477384914051402, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.0017506055301055312}, {"id": 767, "seek": 519174, "start": 5192.62, "end": 5198.86, "text": " but you can look at that object from many different standpoints, like I said, that infinite tower", "tokens": [50408, 457, 291, 393, 574, 412, 300, 2657, 490, 867, 819, 15827, 82, 11, 411, 286, 848, 11, 300, 13785, 10567, 50720], "temperature": 0.0, "avg_logprob": -0.16154873080369903, "compression_ratio": 1.811881188118812, "no_speech_prob": 0.043283551931381226}, {"id": 768, "seek": 519174, "start": 5198.86, "end": 5204.94, "text": " of interpreters, or any number of other ways, from program transformation standpoint,", "tokens": [50720, 295, 17489, 1559, 11, 420, 604, 1230, 295, 661, 2098, 11, 490, 1461, 9887, 15827, 11, 51024], "temperature": 0.0, "avg_logprob": -0.16154873080369903, "compression_ratio": 1.811881188118812, "no_speech_prob": 0.043283551931381226}, {"id": 769, "seek": 519174, "start": 5204.94, "end": 5210.3, "text": " from a relational semantic standpoint, and so forth. And each time you look at that object,", "tokens": [51024, 490, 257, 38444, 47982, 15827, 11, 293, 370, 5220, 13, 400, 1184, 565, 291, 574, 412, 300, 2657, 11, 51292], "temperature": 0.0, "avg_logprob": -0.16154873080369903, "compression_ratio": 1.811881188118812, "no_speech_prob": 0.043283551931381226}, {"id": 770, "seek": 519174, "start": 5210.3, "end": 5217.179999999999, "text": " that like five line core program from a different standpoint, it yields some more secrets,", "tokens": [51292, 300, 411, 1732, 1622, 4965, 1461, 490, 257, 819, 15827, 11, 309, 32168, 512, 544, 14093, 11, 51636], "temperature": 0.0, "avg_logprob": -0.16154873080369903, "compression_ratio": 1.811881188118812, "no_speech_prob": 0.043283551931381226}, {"id": 771, "seek": 521718, "start": 5217.900000000001, "end": 5222.38, "text": " right? In some sense, we know everything about the interpreter, but in some other real sense,", "tokens": [50400, 558, 30, 682, 512, 2020, 11, 321, 458, 1203, 466, 264, 34132, 11, 457, 294, 512, 661, 957, 2020, 11, 50624], "temperature": 0.0, "avg_logprob": -0.09234365116466176, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.0020805769599974155}, {"id": 772, "seek": 521718, "start": 5222.38, "end": 5225.900000000001, "text": " like I would not have guessed that you could do this sort of thing just by taking that", "tokens": [50624, 411, 286, 576, 406, 362, 21852, 300, 291, 727, 360, 341, 1333, 295, 551, 445, 538, 1940, 300, 50800], "temperature": 0.0, "avg_logprob": -0.09234365116466176, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.0020805769599974155}, {"id": 773, "seek": 521718, "start": 5226.46, "end": 5231.58, "text": " program and encoding it in a logic programming language, but you can, it turns out. I think", "tokens": [50828, 1461, 293, 43430, 309, 294, 257, 9952, 9410, 2856, 11, 457, 291, 393, 11, 309, 4523, 484, 13, 286, 519, 51084], "temperature": 0.0, "avg_logprob": -0.09234365116466176, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.0020805769599974155}, {"id": 774, "seek": 521718, "start": 5231.58, "end": 5237.820000000001, "text": " that's really amazing. So that's why I think that's a really beautiful artifact and I hope", "tokens": [51084, 300, 311, 534, 2243, 13, 407, 300, 311, 983, 286, 519, 300, 311, 257, 534, 2238, 34806, 293, 286, 1454, 51396], "temperature": 0.0, "avg_logprob": -0.09234365116466176, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.0020805769599974155}, {"id": 775, "seek": 521718, "start": 5237.820000000001, "end": 5243.740000000001, "text": " everyone will take the time to really study it and get to know it and find their own ways of", "tokens": [51396, 1518, 486, 747, 264, 565, 281, 534, 2979, 309, 293, 483, 281, 458, 309, 293, 915, 641, 1065, 2098, 295, 51692], "temperature": 0.0, "avg_logprob": -0.09234365116466176, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.0020805769599974155}, {"id": 776, "seek": 524374, "start": 5243.74, "end": 5250.62, "text": " looking at it and new ways to consider how that thing works, okay? Thank you. Thank you very much.", "tokens": [50364, 1237, 412, 309, 293, 777, 2098, 281, 1949, 577, 300, 551, 1985, 11, 1392, 30, 1044, 291, 13, 1044, 291, 588, 709, 13, 50708], "temperature": 0.0, "avg_logprob": -0.21005840790577424, "compression_ratio": 1.5505050505050506, "no_speech_prob": 0.0013407478109002113}, {"id": 777, "seek": 524374, "start": 5251.9, "end": 5252.62, "text": " Round of applause.", "tokens": [50772, 18525, 295, 9969, 13, 50808], "temperature": 0.0, "avg_logprob": -0.21005840790577424, "compression_ratio": 1.5505050505050506, "no_speech_prob": 0.0013407478109002113}, {"id": 778, "seek": 524374, "start": 5257.099999999999, "end": 5262.86, "text": " We have time for like two very short questions and then we have to get out of here. So we have one", "tokens": [51032, 492, 362, 565, 337, 411, 732, 588, 2099, 1651, 293, 550, 321, 362, 281, 483, 484, 295, 510, 13, 407, 321, 362, 472, 51320], "temperature": 0.0, "avg_logprob": -0.21005840790577424, "compression_ratio": 1.5505050505050506, "no_speech_prob": 0.0013407478109002113}, {"id": 779, "seek": 524374, "start": 5262.86, "end": 5269.0199999999995, "text": " right in front here real fast. If you treat these tests as constraints to the program that", "tokens": [51320, 558, 294, 1868, 510, 957, 2370, 13, 759, 291, 2387, 613, 6921, 382, 18491, 281, 264, 1461, 300, 51628], "temperature": 0.0, "avg_logprob": -0.21005840790577424, "compression_ratio": 1.5505050505050506, "no_speech_prob": 0.0013407478109002113}, {"id": 780, "seek": 526902, "start": 5269.02, "end": 5273.02, "text": " is trying to guess, can you apply like meta constraints? Can you say like, I want this to be", "tokens": [50364, 307, 1382, 281, 2041, 11, 393, 291, 3079, 411, 19616, 18491, 30, 1664, 291, 584, 411, 11, 286, 528, 341, 281, 312, 50564], "temperature": 0.0, "avg_logprob": -0.13215537920390089, "compression_ratio": 1.7962382445141065, "no_speech_prob": 0.004065631423145533}, {"id": 781, "seek": 526902, "start": 5273.02, "end": 5278.22, "text": " like a constant time algorithm or I want it to be, you know, an element of memory or something like", "tokens": [50564, 411, 257, 5754, 565, 9284, 420, 286, 528, 309, 281, 312, 11, 291, 458, 11, 364, 4478, 295, 4675, 420, 746, 411, 50824], "temperature": 0.0, "avg_logprob": -0.13215537920390089, "compression_ratio": 1.7962382445141065, "no_speech_prob": 0.004065631423145533}, {"id": 782, "seek": 526902, "start": 5278.22, "end": 5284.780000000001, "text": " that? That's a good question. So, you know, part of the issue is how do you specify what it is you", "tokens": [50824, 300, 30, 663, 311, 257, 665, 1168, 13, 407, 11, 291, 458, 11, 644, 295, 264, 2734, 307, 577, 360, 291, 16500, 437, 309, 307, 291, 51152], "temperature": 0.0, "avg_logprob": -0.13215537920390089, "compression_ratio": 1.7962382445141065, "no_speech_prob": 0.004065631423145533}, {"id": 783, "seek": 526902, "start": 5284.780000000001, "end": 5289.580000000001, "text": " want the program to do? And so one way is with these tests, you could also use something like", "tokens": [51152, 528, 264, 1461, 281, 360, 30, 400, 370, 472, 636, 307, 365, 613, 6921, 11, 291, 727, 611, 764, 746, 411, 51392], "temperature": 0.0, "avg_logprob": -0.13215537920390089, "compression_ratio": 1.7962382445141065, "no_speech_prob": 0.004065631423145533}, {"id": 784, "seek": 526902, "start": 5289.580000000001, "end": 5293.9800000000005, "text": " types because we won't write type inferences in the same style. You can also write high level", "tokens": [51392, 3467, 570, 321, 1582, 380, 2464, 2010, 13596, 2667, 294, 264, 912, 3758, 13, 509, 393, 611, 2464, 1090, 1496, 51612], "temperature": 0.0, "avg_logprob": -0.13215537920390089, "compression_ratio": 1.7962382445141065, "no_speech_prob": 0.004065631423145533}, {"id": 785, "seek": 526902, "start": 5293.9800000000005, "end": 5297.580000000001, "text": " properties and logic. There are a whole bunch of ways you could do it. And you could also say", "tokens": [51612, 7221, 293, 9952, 13, 821, 366, 257, 1379, 3840, 295, 2098, 291, 727, 360, 309, 13, 400, 291, 727, 611, 584, 51792], "temperature": 0.0, "avg_logprob": -0.13215537920390089, "compression_ratio": 1.7962382445141065, "no_speech_prob": 0.004065631423145533}, {"id": 786, "seek": 529758, "start": 5297.66, "end": 5302.78, "text": " something about the expected running time or desired running time and so forth. We're not at", "tokens": [50368, 746, 466, 264, 5176, 2614, 565, 420, 14721, 2614, 565, 293, 370, 5220, 13, 492, 434, 406, 412, 50624], "temperature": 0.0, "avg_logprob": -0.09738296270370483, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.0026274973060935736}, {"id": 787, "seek": 529758, "start": 5302.78, "end": 5306.3, "text": " the point where we can do things like talk about the desired running time, although it is something", "tokens": [50624, 264, 935, 689, 321, 393, 360, 721, 411, 751, 466, 264, 14721, 2614, 565, 11, 4878, 309, 307, 746, 50800], "temperature": 0.0, "avg_logprob": -0.09738296270370483, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.0026274973060935736}, {"id": 788, "seek": 529758, "start": 5306.3, "end": 5314.38, "text": " I'd like to be able to do. And so no, you can't do that yet, but one of the areas we're very interested", "tokens": [50800, 286, 1116, 411, 281, 312, 1075, 281, 360, 13, 400, 370, 572, 11, 291, 393, 380, 360, 300, 1939, 11, 457, 472, 295, 264, 3179, 321, 434, 588, 3102, 51204], "temperature": 0.0, "avg_logprob": -0.09738296270370483, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.0026274973060935736}, {"id": 789, "seek": 529758, "start": 5314.38, "end": 5318.86, "text": " in is trying to do more expressiveness. Probably the most recent thing that we've been playing with", "tokens": [51204, 294, 307, 1382, 281, 360, 544, 5109, 8477, 13, 9210, 264, 881, 5162, 551, 300, 321, 600, 668, 2433, 365, 51428], "temperature": 0.0, "avg_logprob": -0.09738296270370483, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.0026274973060935736}, {"id": 790, "seek": 531886, "start": 5318.94, "end": 5327.74, "text": " that's interesting is just yesterday, I started, I basically wrote a version of this technology", "tokens": [50368, 300, 311, 1880, 307, 445, 5186, 11, 286, 1409, 11, 286, 1936, 4114, 257, 3037, 295, 341, 2899, 50808], "temperature": 0.0, "avg_logprob": -0.1252481277952803, "compression_ratio": 1.6796536796536796, "no_speech_prob": 0.18909509479999542}, {"id": 791, "seek": 531886, "start": 5328.38, "end": 5334.139999999999, "text": " where you can take scheme programs, look at common patterns in scheme in terms of very simple and", "tokens": [50840, 689, 291, 393, 747, 12232, 4268, 11, 574, 412, 2689, 8294, 294, 12232, 294, 2115, 295, 588, 2199, 293, 51128], "temperature": 0.0, "avg_logprob": -0.1252481277952803, "compression_ratio": 1.6796536796536796, "no_speech_prob": 0.18909509479999542}, {"id": 792, "seek": 531886, "start": 5334.139999999999, "end": 5341.179999999999, "text": " just looking at what the parent is for an expression like what, you know, if you see a define, it", "tokens": [51128, 445, 1237, 412, 437, 264, 2596, 307, 337, 364, 6114, 411, 437, 11, 291, 458, 11, 498, 291, 536, 257, 6964, 11, 309, 51480], "temperature": 0.0, "avg_logprob": -0.1252481277952803, "compression_ratio": 1.6796536796536796, "no_speech_prob": 0.18909509479999542}, {"id": 793, "seek": 531886, "start": 5341.179999999999, "end": 5345.58, "text": " turns out there's usually a lambda inside of it. If you see a lambda, there's usually an if or a", "tokens": [51480, 4523, 484, 456, 311, 2673, 257, 13607, 1854, 295, 309, 13, 759, 291, 536, 257, 13607, 11, 456, 311, 2673, 364, 498, 420, 257, 51700], "temperature": 0.0, "avg_logprob": -0.1252481277952803, "compression_ratio": 1.6796536796536796, "no_speech_prob": 0.18909509479999542}, {"id": 794, "seek": 534558, "start": 5345.58, "end": 5351.18, "text": " cond inside of it and looking for those sorts of simple patterns and specializing the relational", "tokens": [50364, 2224, 1854, 295, 309, 293, 1237, 337, 729, 7527, 295, 2199, 8294, 293, 2121, 3319, 264, 38444, 50644], "temperature": 0.0, "avg_logprob": -0.12153976654337946, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.003806918626651168}, {"id": 795, "seek": 534558, "start": 5351.18, "end": 5356.62, "text": " interpreter based on that very, very simple knowledge. So instead of just having the semantics,", "tokens": [50644, 34132, 2361, 322, 300, 588, 11, 588, 2199, 3601, 13, 407, 2602, 295, 445, 1419, 264, 4361, 45298, 11, 50916], "temperature": 0.0, "avg_logprob": -0.12153976654337946, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.003806918626651168}, {"id": 796, "seek": 534558, "start": 5357.18, "end": 5362.22, "text": " the system also would know a little bit about sort of standard human style or things like that.", "tokens": [50944, 264, 1185, 611, 576, 458, 257, 707, 857, 466, 1333, 295, 3832, 1952, 3758, 420, 721, 411, 300, 13, 51196], "temperature": 0.0, "avg_logprob": -0.12153976654337946, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.003806918626651168}, {"id": 797, "seek": 534558, "start": 5362.86, "end": 5367.1, "text": " And that alone looks like it speeds up since there's many orders of magnitude and we're", "tokens": [51228, 400, 300, 3312, 1542, 411, 309, 16411, 493, 1670, 456, 311, 867, 9470, 295, 15668, 293, 321, 434, 51440], "temperature": 0.0, "avg_logprob": -0.12153976654337946, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.003806918626651168}, {"id": 798, "seek": 534558, "start": 5367.1, "end": 5372.3, "text": " trying to figure out can we apply that to sort of the optimizations we've already made. So I think", "tokens": [51440, 1382, 281, 2573, 484, 393, 321, 3079, 300, 281, 1333, 295, 264, 5028, 14455, 321, 600, 1217, 1027, 13, 407, 286, 519, 51700], "temperature": 0.0, "avg_logprob": -0.12153976654337946, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.003806918626651168}, {"id": 799, "seek": 537230, "start": 5372.46, "end": 5376.9400000000005, "text": " the bottom line is like there's a whole bunch of things that we just haven't explored yet, but", "tokens": [50372, 264, 2767, 1622, 307, 411, 456, 311, 257, 1379, 3840, 295, 721, 300, 321, 445, 2378, 380, 24016, 1939, 11, 457, 50596], "temperature": 0.0, "avg_logprob": -0.1441277513409605, "compression_ratio": 1.6370656370656371, "no_speech_prob": 0.0006523101474158466}, {"id": 800, "seek": 537230, "start": 5376.9400000000005, "end": 5380.9400000000005, "text": " I think it's definitely possible. And there are other people in this program census community", "tokens": [50596, 286, 519, 309, 311, 2138, 1944, 13, 400, 456, 366, 661, 561, 294, 341, 1461, 23725, 1768, 50796], "temperature": 0.0, "avg_logprob": -0.1441277513409605, "compression_ratio": 1.6370656370656371, "no_speech_prob": 0.0006523101474158466}, {"id": 801, "seek": 537230, "start": 5380.9400000000005, "end": 5387.18, "text": " who particularly work on that problem of trying to synthesize programs that have, you know,", "tokens": [50796, 567, 4098, 589, 322, 300, 1154, 295, 1382, 281, 26617, 1125, 4268, 300, 362, 11, 291, 458, 11, 51108], "temperature": 0.0, "avg_logprob": -0.1441277513409605, "compression_ratio": 1.6370656370656371, "no_speech_prob": 0.0006523101474158466}, {"id": 802, "seek": 537230, "start": 5387.18, "end": 5391.34, "text": " different expected, you know, running times and things like that. This is a very cool problem.", "tokens": [51108, 819, 5176, 11, 291, 458, 11, 2614, 1413, 293, 721, 411, 300, 13, 639, 307, 257, 588, 1627, 1154, 13, 51316], "temperature": 0.0, "avg_logprob": -0.1441277513409605, "compression_ratio": 1.6370656370656371, "no_speech_prob": 0.0006523101474158466}, {"id": 803, "seek": 537230, "start": 5393.26, "end": 5396.14, "text": " More questions. There's a lot to take in I know.", "tokens": [51412, 5048, 1651, 13, 821, 311, 257, 688, 281, 747, 294, 286, 458, 13, 51556], "temperature": 0.0, "avg_logprob": -0.1441277513409605, "compression_ratio": 1.6370656370656371, "no_speech_prob": 0.0006523101474158466}, {"id": 804, "seek": 539614, "start": 5397.1, "end": 5397.58, "text": " Short.", "tokens": [50412, 16881, 13, 50436], "temperature": 0.0, "avg_logprob": -0.19141472087186925, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.003581338096410036}, {"id": 805, "seek": 539614, "start": 5400.22, "end": 5405.660000000001, "text": " When you gave the example of coming up with the answer append, how does it,", "tokens": [50568, 1133, 291, 2729, 264, 1365, 295, 1348, 493, 365, 264, 1867, 34116, 11, 577, 775, 309, 11, 50840], "temperature": 0.0, "avg_logprob": -0.19141472087186925, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.003581338096410036}, {"id": 806, "seek": 539614, "start": 5405.660000000001, "end": 5408.780000000001, "text": " how do you seed the search space? Like how did it know to find append,", "tokens": [50840, 577, 360, 291, 8871, 264, 3164, 1901, 30, 1743, 577, 630, 309, 458, 281, 915, 34116, 11, 50996], "temperature": 0.0, "avg_logprob": -0.19141472087186925, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.003581338096410036}, {"id": 807, "seek": 539614, "start": 5408.780000000001, "end": 5410.54, "text": " how did it append to get into the search space?", "tokens": [50996, 577, 630, 309, 34116, 281, 483, 666, 264, 3164, 1901, 30, 51084], "temperature": 0.0, "avg_logprob": -0.19141472087186925, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.003581338096410036}, {"id": 808, "seek": 539614, "start": 5410.54, "end": 5414.700000000001, "text": " Well, I mean, it didn't find append first, right? It created a function that just returns a list.", "tokens": [51084, 1042, 11, 286, 914, 11, 309, 994, 380, 915, 34116, 700, 11, 558, 30, 467, 2942, 257, 2445, 300, 445, 11247, 257, 1329, 13, 51292], "temperature": 0.0, "avg_logprob": -0.19141472087186925, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.003581338096410036}, {"id": 809, "seek": 539614, "start": 5416.06, "end": 5421.1, "text": " Well, because we have an interpreter, the interpreter has a notion of scoping,", "tokens": [51360, 1042, 11, 570, 321, 362, 364, 34132, 11, 264, 34132, 575, 257, 10710, 295, 795, 26125, 11, 51612], "temperature": 0.0, "avg_logprob": -0.19141472087186925, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.003581338096410036}, {"id": 810, "seek": 542110, "start": 5421.1, "end": 5426.9400000000005, "text": " just like we implemented variable lookup. We implemented variable lookup in that interpreter,", "tokens": [50364, 445, 411, 321, 12270, 7006, 574, 1010, 13, 492, 12270, 7006, 574, 1010, 294, 300, 34132, 11, 50656], "temperature": 0.0, "avg_logprob": -0.12175800264343735, "compression_ratio": 1.9646643109540636, "no_speech_prob": 0.003589598461985588}, {"id": 811, "seek": 542110, "start": 5426.9400000000005, "end": 5433.02, "text": " and the semantics of let rec, the binding structure of let rec means that within that call, you know,", "tokens": [50656, 293, 264, 4361, 45298, 295, 718, 850, 11, 264, 17359, 3877, 295, 718, 850, 1355, 300, 1951, 300, 818, 11, 291, 458, 11, 50960], "temperature": 0.0, "avg_logprob": -0.12175800264343735, "compression_ratio": 1.9646643109540636, "no_speech_prob": 0.003589598461985588}, {"id": 812, "seek": 542110, "start": 5433.02, "end": 5438.06, "text": " so the call to append was inside the definition of append. So therefore in the environment append", "tokens": [50960, 370, 264, 818, 281, 34116, 390, 1854, 264, 7123, 295, 34116, 13, 407, 4412, 294, 264, 2823, 34116, 51212], "temperature": 0.0, "avg_logprob": -0.12175800264343735, "compression_ratio": 1.9646643109540636, "no_speech_prob": 0.003589598461985588}, {"id": 813, "seek": 542110, "start": 5438.06, "end": 5442.9400000000005, "text": " is there because we define the function. And so one of the things it's going to try to do,", "tokens": [51212, 307, 456, 570, 321, 6964, 264, 2445, 13, 400, 370, 472, 295, 264, 721, 309, 311, 516, 281, 853, 281, 360, 11, 51456], "temperature": 0.0, "avg_logprob": -0.12175800264343735, "compression_ratio": 1.9646643109540636, "no_speech_prob": 0.003589598461985588}, {"id": 814, "seek": 542110, "start": 5442.9400000000005, "end": 5446.780000000001, "text": " the interpreters going to try to do is look up the variables that are currently bound in the", "tokens": [51456, 264, 17489, 1559, 516, 281, 853, 281, 360, 307, 574, 493, 264, 9102, 300, 366, 4362, 5472, 294, 264, 51648], "temperature": 0.0, "avg_logprob": -0.12175800264343735, "compression_ratio": 1.9646643109540636, "no_speech_prob": 0.003589598461985588}, {"id": 815, "seek": 542110, "start": 5446.780000000001, "end": 5450.3, "text": " environment and try all of those and see if that will help lead to a solution.", "tokens": [51648, 2823, 293, 853, 439, 295, 729, 293, 536, 498, 300, 486, 854, 1477, 281, 257, 3827, 13, 51824], "temperature": 0.0, "avg_logprob": -0.12175800264343735, "compression_ratio": 1.9646643109540636, "no_speech_prob": 0.003589598461985588}, {"id": 816, "seek": 545110, "start": 5451.740000000001, "end": 5454.620000000001, "text": " Anyone else?", "tokens": [50396, 14643, 1646, 30, 50540], "temperature": 0.0, "avg_logprob": -0.5274636480543349, "compression_ratio": 0.8518518518518519, "no_speech_prob": 0.0016132757300511003}, {"id": 817, "seek": 545110, "start": 5457.5, "end": 5461.18, "text": " No? All right. Thank you so much.", "tokens": [50684, 883, 30, 1057, 558, 13, 1044, 291, 370, 709, 13, 50868], "temperature": 0.0, "avg_logprob": -0.5274636480543349, "compression_ratio": 0.8518518518518519, "no_speech_prob": 0.0016132757300511003}], "language": "en"}