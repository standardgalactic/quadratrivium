WEBVTT

00:00.000 --> 00:05.240
All right, so welcome to the first episode of Killing the Caveman.

00:05.240 --> 00:11.880
So in this episode, I'm going to be talking about why COBOL is needed now and why it should

00:11.880 --> 00:17.580
have died 20 years ago, it's 2020 right now, and why governments suddenly need programmers

00:17.580 --> 00:18.580
for it.

00:18.580 --> 00:25.520
All right, recently due to the pandemic, there has been a really big need for some governments

00:25.520 --> 00:32.440
and businesses to have an old software be worked on that was built in COBOL, because

00:32.440 --> 00:36.600
I think there's like millions of lines of code that are currently still written in

00:36.600 --> 00:37.960
COBOL.

00:37.960 --> 00:41.880
So if you don't know what COBOL is, it is an old language used for business.

00:41.880 --> 00:50.000
In fact, the acronym is Common Business Oriented Language, or that's a, yeah that's common

00:50.000 --> 00:57.120
is the C-O and then business is the B of course, and then oriented O and language.

00:57.120 --> 01:01.800
Common Oriented Business Language, ah, you know what I mean.

01:01.800 --> 01:05.760
This is probably the most boring acronym I have ever heard by the way, like business

01:05.760 --> 01:07.800
has the word business and common in it.

01:07.800 --> 01:10.560
Those are like very boring words, never mind.

01:10.560 --> 01:13.920
Let me know in the comments if you think there's a more boring acronym that you can

01:13.920 --> 01:15.360
think of.

01:15.360 --> 01:20.220
So the language should have been gotten rid of like many, many years ago, but governments

01:20.220 --> 01:24.960
refuse to get rid of it in favor of new modern languages and technologies, because these

01:24.960 --> 01:28.040
new modern languages and technologies cost money.

01:28.040 --> 01:38.120
And now these governments are faced with the consequences of not replacing them.

01:38.120 --> 01:43.720
So because most of these people who know COBOL are of course retired now, and because nobody

01:43.720 --> 01:48.800
wants to learn it of course, and we'll get to reasons why, and so no one can fix it or

01:48.800 --> 01:52.000
maintain it if there's an issue.

01:52.000 --> 01:56.880
So let's get to the history of what COBOL is and why was it used.

01:56.880 --> 02:00.200
So COBOL was made in 1960.

02:00.200 --> 02:06.080
So if you started to learn or started to use COBOL like right out of college when you like

02:06.080 --> 02:12.960
turned 20 or something like that, you would be 80 years old because that's 60 years ago,

02:13.320 --> 02:14.320
1960.

02:14.320 --> 02:15.320
Ridiculous.

02:15.320 --> 02:22.680
So you can kind of guess why people who developed with this language are retired now, because

02:22.680 --> 02:25.160
of course most people retire around 65 years old.

02:25.160 --> 02:32.680
So if most people started using this language in like 1975, then they're probably retired

02:32.680 --> 02:34.400
by now.

02:34.400 --> 02:39.000
So you might be wondering why are these places still using this language?

02:39.000 --> 02:41.400
Why haven't they replaced it?

02:41.400 --> 02:47.840
Like what purpose does it have other than that it's too expensive to replace for the

02:47.840 --> 02:51.040
local government or businesses?

02:51.040 --> 03:00.560
And of course the main reason is three words, mainframe, processing, speed, MPS, and it's

03:00.560 --> 03:05.760
also the cost associated with replacing it with these newer technologies because then

03:05.760 --> 03:10.040
you would have to hire developers and developers don't cost a lot nowadays, or they do cost

03:10.040 --> 03:11.040
a lot.

03:11.040 --> 03:17.120
So it's more expensive compared to other engineers or software engineers are more expensive generally

03:17.120 --> 03:19.600
than other kinds of engineers.

03:19.600 --> 03:23.600
And oftentimes people don't want to spend all their money just developing like software

03:23.600 --> 03:26.320
that not many people are going to use.

03:26.320 --> 03:34.040
Alright so I want to show you an article on ours Technica about how or why IBM is scrambling

03:34.040 --> 03:37.720
to find or train more COBOL programmers to help states.

03:37.720 --> 03:44.360
So this is kind of look at these old computers here they so I don't even know what to like

03:44.360 --> 03:48.440
think about them they look like washing machines or like something to do my laundry with or

03:48.440 --> 03:49.440
something like that.

03:49.440 --> 03:53.040
It looks like a kitchen countertop too.

03:53.040 --> 03:56.560
And I don't know what these things on the side are but it seems interesting.

03:56.560 --> 04:04.120
But anyways New Jersey is one of the states that needs COBOL programmers to help with

04:04.120 --> 04:07.200
the state's unemployment insurance system.

04:07.200 --> 04:14.720
So this is kind of one of the uses of COBOL because this unemployment system probably hasn't

04:14.720 --> 04:20.200
seen much use for a long long time because if you didn't know the unemployment rate prior

04:20.200 --> 04:30.480
to recent happenings has been very low it's been record lows for the last couple of years

04:30.480 --> 04:31.480
I think.

04:31.480 --> 04:34.320
I mean of course since like 2008 it's been low.

04:34.320 --> 04:40.880
So since that time though they probably had a lot of people to work on or not like a lot

04:40.880 --> 04:44.440
of people but some people to work on COBOL back during that time.

04:44.440 --> 04:51.080
But now that everything is modernized and the unemployment rate is like skyrocketed recently.

04:51.080 --> 04:58.520
They need more people or more people are going through file for unemployment of course.

04:58.520 --> 05:05.120
So IBM is trying to like train people to work in COBOL.

05:05.120 --> 05:11.200
But like I said most COBOL most experienced COBOL programmers aren't getting any younger

05:11.200 --> 05:14.120
so I mean no one's getting any younger.

05:14.120 --> 05:22.000
But they're not going to have time to train people with to meet all their demands and

05:22.000 --> 05:26.000
the amount of time because COBOL is not an easy language and I'll show you some examples.

05:26.000 --> 05:31.040
So I do want to show you another example of how COBOL was used and why people needed COBOL

05:31.040 --> 05:32.040
developers.

05:32.040 --> 05:35.960
So in Kansas government Laura Kelly said the State Department of Labor was in the process

05:35.960 --> 05:44.680
of modernizing COBOL but the virus came in and they couldn't do it of course or at least

05:44.680 --> 05:48.480
they're not able to do it in time for this pandemic.

05:48.480 --> 05:54.000
So the operating on really old stuff currently and of course that's going to slow down things.

05:54.000 --> 05:58.240
So I mentioned that it was made in like 1960-1959.

05:58.240 --> 06:03.920
Well is programming language used or very significant percentage of business systems

06:03.920 --> 06:06.840
over the period of 60s 70s and even the 80s.

06:06.840 --> 06:12.880
So what about the 90s the zeros and the teens why haven't people replaced it since then

06:12.880 --> 06:19.560
that's 30 years even during like high usage maybe 20 years.

06:19.560 --> 06:23.000
So that's kind of ridiculous how they haven't replaced this.

06:23.000 --> 06:28.920
I see now that the 220 billion lines of COBOL code and use today I don't know about you

06:28.920 --> 06:36.640
but that's a lot of lines of code and the lines of code for COBOL are very verbose but

06:36.640 --> 06:43.240
even still that's kind of crazy 43 percent of banking systems 90 percent of ATMs what

06:43.240 --> 06:48.880
that's ridiculous 95 percent of ATMs like I might be thinking what can you replace that

06:48.880 --> 06:50.960
with and that's a good question.

06:50.960 --> 06:58.240
Alright so COBOL was kind of like the enterprise programming language for this old time era.

06:58.240 --> 07:03.280
So it of course can be replaced with anything enterprise nowadays which can be a variety

07:03.280 --> 07:09.720
of languages Python Java JavaScript C++ really it can even do be done on assembly it doesn't

07:09.720 --> 07:16.840
really matter what you replace it with as long as it is at least efficient.

07:16.840 --> 07:18.960
So let me show you some cool things about COBOL.

07:18.960 --> 07:24.520
So it's the first high level very widely used high level programming language and it's

07:24.520 --> 07:29.180
English like in structure that's probably the unique thing about COBOL.

07:29.180 --> 07:33.440
So it has self-documentating so what that means is you don't have to like make your

07:33.440 --> 07:39.600
own documents elsewhere because it's so verbose and it can handle huge data processing which

07:39.600 --> 07:45.520
of course isn't huge enough at this during times of need like this.

07:45.520 --> 07:49.080
And of course mirror messaging is useful.

07:49.080 --> 07:54.040
So I want to show you now a Hello World program in COBOL and see what it's like.

07:54.040 --> 07:59.160
Alright of course I'm not an expert in COBOL because I'm not from the dinosaur area but

07:59.160 --> 08:01.440
I can probably see the basics of it.

08:01.440 --> 08:08.000
So display it's kind of like real world real words to display things.

08:08.000 --> 08:14.720
So display you can say hello world you can move tutorial point I don't know where is

08:14.720 --> 08:20.760
that defined to WS name I guess and then you okay this is another display so hello my

08:20.760 --> 08:24.520
name is then my ID is.

08:24.520 --> 08:33.040
So you can execute it and then it will say hello world my name is oh okay.

08:33.040 --> 08:43.560
So they kind of declared tutorial point to be their name and then their ID was um that's

08:43.600 --> 08:44.600
really cool.

08:44.600 --> 08:50.280
I mean it's really like interesting how they did it but this seems like this could be done

08:50.280 --> 08:55.320
in like a line of code in like almost any other language or maybe like three lines of

08:55.320 --> 09:03.080
code so it's kind of crazy so this is just like how many lines three six like at least

09:03.080 --> 09:08.840
ten fifteen lines of code just for something simple as this that's kind of ridiculous.

09:08.840 --> 09:15.760
Alright so what makes COBOL so bad and as you can see a little bit there is it is verbose

09:15.760 --> 09:21.960
it requires a lot of words to do very simple things and I didn't show you much COBOL code

09:21.960 --> 09:28.880
but it is difficult to read COBOL code like that was pretty difficult to read because

09:28.880 --> 09:33.840
there was so many lines of code and you had to figure out what was going on and the verbose

09:33.840 --> 09:41.040
part was wasn't too useful in the self-documentating part because usually good code doesn't need

09:41.040 --> 09:43.080
documentation.

09:43.080 --> 09:48.960
So programs written in COBOL were also difficult to read and hard to modularize into different

09:48.960 --> 09:55.560
little pieces which made them have kind of a lack of structure which is not good for

09:55.560 --> 09:57.560
a programming language.

09:57.560 --> 10:07.760
So if you have ever heard of the famous computer scientist Edsger Dijkstra like he made Dijkstra's

10:07.760 --> 10:13.040
algorithm so if you don't know what that is it is an algorithm that almost everyone who

10:13.040 --> 10:18.920
takes a computer science class called like data structure and algorithm needs to know

10:18.920 --> 10:26.480
Dijkstra's algorithms to be somewhat good at data structure and algorithms so he Dijkstra

10:26.480 --> 10:35.520
criticized COBOL because this is back in the day when he was algorithming that's a word.

10:35.520 --> 10:42.200
So he said the use of COBOL cripples the mind and I can kind of understand why.

10:42.200 --> 10:44.920
So that's the end of this COBOL video thanks for watching.

