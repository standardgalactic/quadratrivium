All right, so welcome to the first episode of Killing the Caveman.
So in this episode, I'm going to be talking about why COBOL is needed now and why it should
have died 20 years ago, it's 2020 right now, and why governments suddenly need programmers
for it.
All right, recently due to the pandemic, there has been a really big need for some governments
and businesses to have an old software be worked on that was built in COBOL, because
I think there's like millions of lines of code that are currently still written in
COBOL.
So if you don't know what COBOL is, it is an old language used for business.
In fact, the acronym is Common Business Oriented Language, or that's a, yeah that's common
is the C-O and then business is the B of course, and then oriented O and language.
Common Oriented Business Language, ah, you know what I mean.
This is probably the most boring acronym I have ever heard by the way, like business
has the word business and common in it.
Those are like very boring words, never mind.
Let me know in the comments if you think there's a more boring acronym that you can
think of.
So the language should have been gotten rid of like many, many years ago, but governments
refuse to get rid of it in favor of new modern languages and technologies, because these
new modern languages and technologies cost money.
And now these governments are faced with the consequences of not replacing them.
So because most of these people who know COBOL are of course retired now, and because nobody
wants to learn it of course, and we'll get to reasons why, and so no one can fix it or
maintain it if there's an issue.
So let's get to the history of what COBOL is and why was it used.
So COBOL was made in 1960.
So if you started to learn or started to use COBOL like right out of college when you like
turned 20 or something like that, you would be 80 years old because that's 60 years ago,
1960.
Ridiculous.
So you can kind of guess why people who developed with this language are retired now, because
of course most people retire around 65 years old.
So if most people started using this language in like 1975, then they're probably retired
by now.
So you might be wondering why are these places still using this language?
Why haven't they replaced it?
Like what purpose does it have other than that it's too expensive to replace for the
local government or businesses?
And of course the main reason is three words, mainframe, processing, speed, MPS, and it's
also the cost associated with replacing it with these newer technologies because then
you would have to hire developers and developers don't cost a lot nowadays, or they do cost
a lot.
So it's more expensive compared to other engineers or software engineers are more expensive generally
than other kinds of engineers.
And oftentimes people don't want to spend all their money just developing like software
that not many people are going to use.
Alright so I want to show you an article on ours Technica about how or why IBM is scrambling
to find or train more COBOL programmers to help states.
So this is kind of look at these old computers here they so I don't even know what to like
think about them they look like washing machines or like something to do my laundry with or
something like that.
It looks like a kitchen countertop too.
And I don't know what these things on the side are but it seems interesting.
But anyways New Jersey is one of the states that needs COBOL programmers to help with
the state's unemployment insurance system.
So this is kind of one of the uses of COBOL because this unemployment system probably hasn't
seen much use for a long long time because if you didn't know the unemployment rate prior
to recent happenings has been very low it's been record lows for the last couple of years
I think.
I mean of course since like 2008 it's been low.
So since that time though they probably had a lot of people to work on or not like a lot
of people but some people to work on COBOL back during that time.
But now that everything is modernized and the unemployment rate is like skyrocketed recently.
They need more people or more people are going through file for unemployment of course.
So IBM is trying to like train people to work in COBOL.
But like I said most COBOL most experienced COBOL programmers aren't getting any younger
so I mean no one's getting any younger.
But they're not going to have time to train people with to meet all their demands and
the amount of time because COBOL is not an easy language and I'll show you some examples.
So I do want to show you another example of how COBOL was used and why people needed COBOL
developers.
So in Kansas government Laura Kelly said the State Department of Labor was in the process
of modernizing COBOL but the virus came in and they couldn't do it of course or at least
they're not able to do it in time for this pandemic.
So the operating on really old stuff currently and of course that's going to slow down things.
So I mentioned that it was made in like 1960-1959.
Well is programming language used or very significant percentage of business systems
over the period of 60s 70s and even the 80s.
So what about the 90s the zeros and the teens why haven't people replaced it since then
that's 30 years even during like high usage maybe 20 years.
So that's kind of ridiculous how they haven't replaced this.
I see now that the 220 billion lines of COBOL code and use today I don't know about you
but that's a lot of lines of code and the lines of code for COBOL are very verbose but
even still that's kind of crazy 43 percent of banking systems 90 percent of ATMs what
that's ridiculous 95 percent of ATMs like I might be thinking what can you replace that
with and that's a good question.
Alright so COBOL was kind of like the enterprise programming language for this old time era.
So it of course can be replaced with anything enterprise nowadays which can be a variety
of languages Python Java JavaScript C++ really it can even do be done on assembly it doesn't
really matter what you replace it with as long as it is at least efficient.
So let me show you some cool things about COBOL.
So it's the first high level very widely used high level programming language and it's
English like in structure that's probably the unique thing about COBOL.
So it has self-documentating so what that means is you don't have to like make your
own documents elsewhere because it's so verbose and it can handle huge data processing which
of course isn't huge enough at this during times of need like this.
And of course mirror messaging is useful.
So I want to show you now a Hello World program in COBOL and see what it's like.
Alright of course I'm not an expert in COBOL because I'm not from the dinosaur area but
I can probably see the basics of it.
So display it's kind of like real world real words to display things.
So display you can say hello world you can move tutorial point I don't know where is
that defined to WS name I guess and then you okay this is another display so hello my
name is then my ID is.
So you can execute it and then it will say hello world my name is oh okay.
So they kind of declared tutorial point to be their name and then their ID was um that's
really cool.
I mean it's really like interesting how they did it but this seems like this could be done
in like a line of code in like almost any other language or maybe like three lines of
code so it's kind of crazy so this is just like how many lines three six like at least
ten fifteen lines of code just for something simple as this that's kind of ridiculous.
Alright so what makes COBOL so bad and as you can see a little bit there is it is verbose
it requires a lot of words to do very simple things and I didn't show you much COBOL code
but it is difficult to read COBOL code like that was pretty difficult to read because
there was so many lines of code and you had to figure out what was going on and the verbose
part was wasn't too useful in the self-documentating part because usually good code doesn't need
documentation.
So programs written in COBOL were also difficult to read and hard to modularize into different
little pieces which made them have kind of a lack of structure which is not good for
a programming language.
So if you have ever heard of the famous computer scientist Edsger Dijkstra like he made Dijkstra's
algorithm so if you don't know what that is it is an algorithm that almost everyone who
takes a computer science class called like data structure and algorithm needs to know
Dijkstra's algorithms to be somewhat good at data structure and algorithms so he Dijkstra
criticized COBOL because this is back in the day when he was algorithming that's a word.
So he said the use of COBOL cripples the mind and I can kind of understand why.
So that's the end of this COBOL video thanks for watching.
