{"text": " You are currently watching a neural network learn about a year ago I made a video about how neural networks can learn almost anything and this is because they are universal function approximators Why is that so important? Well, you might as well ask why functions are important. They are important because functions describe the world Everything is described by functions That's right functions describe the sound of my voice on your eardrum Function the light that's kind of hitting your eyeballs right now Function different classes and mathematics different areas and mathematics study different kinds of function high school math studies second-degree One variable polynomials calculus studies smooth one variable functions and it goes on and on functions describe the world Yes, correct. Thanks Thomas. He gets a little excited, but he's right The world can fundamentally be described with numbers and relationships between numbers We call those relationships functions and with functions we can understand model and predict the world around us The goal of artificial intelligence is to write programs that can also Understand model and predict the world or rather have them write themselves So they must be able to build their own functions That is the point of function approximation and that is what neural networks do. They are function building machines In this video I want to expand on the ideas of my previous video by watching actual neural networks learn strange shapes and strange spaces Here we will encounter some very difficult challenges Discover the limitations of neural networks and explore other methods for machine learning and mathematics to approach this open problem Now I am a programmer not a mathematician and to be honest. I kind of hate math I've always found it difficult and intimidating But that's a bad attitude because math is unavoidably useful and occasionally beautiful I'll do my best to keep things simple and accurate for an audience like me But know that I'm gonna have to brush over a lot of things and I'm gonna be pretty informal I recommend you watch my previous video, but to summarize functions are input output machines They take an input set of numbers and output a corresponding set of numbers and the function defines the relationship between those numbers The particular problem that neural network solve is when we don't know the definition of the function that we're trying to approximate Instead we have a sample of data points from that function inputs and outputs. This is our data set We must approximate a function that fits these data points and allows us to accurately predict outputs given inputs that are not in our Data set this process is also called curve fitting and you can see why now this is not some handcrafted Animation it is an actual neural network attempting to fit the curve to the data And it does so by sort of bending the line into shape This process is generalizable such that it can fit the curve to any data set and thus construct any function This makes it a universal function approximator The network itself is also a function and should approximate some unknown target function The particular neural architecture we're dealing with in this video is called a fully connected feed forward network Its inputs and outputs are sometimes called features and predictions and they take the form of vectors arrays of numbers The overall function is made up of lots of simple functions called neurons that take many inputs But only produce one output each input is multiplied by its own weight and added up along with one extra weight called a bias Let's rewrite this weighted sum with some linear algebra We can put our inputs into a vector with an extra one for the bias and our weights into another vector and then take what is called The dot product. Let's just make up some example values To take the dot product we multiply each input by each weight and then add them all up Finally this dot product is then passed to a very simple activation function in this case a relu which here returns zero We could use a different activation function, but a relu looks like this The activation function defines the neurons mathematical shape while the weights shift and squeeze and stretch that shape We feed the original inputs of our network to a layer of neurons each with their own learned weights and each with their own Output value we stack these outputs together into a vector and then feed the output vector as Inputs to the next layer and the next and the next until we get the final output of the network Each neuron is responsible for learning its own little piece or feature of the overall function and by combining many neurons We can build an ever more intricate function with an infinite number of neurons. We can provably build any function The values of the weights or parameters are discovered through the training process We give the network inputs from our data set and ask it to predict the correct outputs over and over and over The goal is to minimize the network's error or loss which is some measurement of difference between the predicted outputs and the true outputs Over time the network should do better and better as loss goes down The algorithm for this is called back propagation, and I am again not going to explain it in this video I'll make a video on it. Eventually. I promise. It's a pretty magical algorithm However, this is a baby problem. What about functions with more than just one input or output that is to say higher dimensional problems The dimensionality of a vector is defined by the number of numbers in that vector For a higher dimensional problem. Let's try to learn an image The input vector is the row column coordinates of a pixel and the output vector is the value of the pixel itself In math speak we would say that this function maps from R2 to R1 Our data set is all of the pixels in an image. Let's use this unhappy man as an example a Pixel value of zero is black and one is white although. I'm going to use different color schemes because it's pretty as As we train we take snapshots of the learned function as the approximation improves That's what you're saying now, and that's what you saw at the beginning of this video But to clarify this image is not a single output from the network rather every individual pixel is a single output We are looking at the entire function all at once and we can do this because it is very low dimensional You'll also notice that the learning seems to slow down. It's not changing as abruptly as it was at the beginning This is because we periodically reduce the learning rate a parameter that controls how much our training algorithm Alters the current function this allows it to progressively refine details Now just because our neural network should theoretically be able to learn any function There are things we can do to practically improve the approximation and optimize the learning process For instance one thing I'm doing here is normalizing the row column inputs Which means I'm moving the values from a range of zero 1400 to the range of negative one one I do this with a simple linear transformation that shifts and scales the values The negative one one range is easier for the network to deal with because it's smaller and centered at zero Another trick is that I'm not using a relu as my activation function But rather something called a leaky relu a leaky relu can output negative values while still being non-linear and has been shown to Generally improve performance. So I'm using a leaky relu in all of my layers except for the last one Because the final output is a pixel value. It needs to be between zero and one To enforce this in the final layer We can use a sigmoid activation function which squishes its inputs between zero and one Except there is a different squishing function called tan H that squishes its inputs between negative one and one I can then normalize those outputs into the final range of zero one. Why go through the trouble? Well, tan H just tends to work better than sigmoid Intuitively, this is because tan H is centered at zero and plays much nicer with back propagation But ultimately the reasoning doesn't matter as much as the results both networks here are theoretically Universal function approximators, but practically one works much better than the other This can be measured empirically by calculating and comparing the error rates of both networks I think of this as the science of math where we must test our ideas and validate them with evidence Rather than providing formal proofs It'd be great if we could do both but that is not always possible And it is often much easier to just try and see what happens and that's my kind of math Let's make it harder. Here. We have a function that takes two inputs u v and produces three outputs x y z It's a parametric surface function and we'll use the equation for a sphere We can learn it the same way as before take a random sample of points across the surface of the sphere and ask our network to approximate it Now this is clearly a very silly way to make a sphere But the network is trying its best to sort of wrap the surface around the sphere to fit the data points I hope this also gives you a better view of what a parametric surface is It takes a flat 2d sheet and contorts it in 3d space according to some function Now this does okay though it never quite closes up around the poles For a real challenge, let's try this beautiful spiral shell surface I got the equation for this from this wonderful little website that lets you play with all kinds of shell surfaces See what I mean when I say that functions describe the world Anyway, let's sample some points across the spiral surface and start learning Well, it's working, but clearly we're having some trouble here. I'm using a fairly big neural network But this is a complicated shape and it seems to be getting a little bit confused. We'll come back to this one We can also make the problem harder not by increasing dimensionality, but by increasing the complexity of the function itself Let's use the Mandelbrot set an infinitely complex fractal But we can simply define a Mandelbrot function as taking two real valued inputs and producing one output The same dimensionality as the images we learned earlier Now I've defined my Mandelbrot function to output a value between zero and one Where one is in the Mandelbrot set and anything less than one is not Under the hood, it's iteratively operating on complex numbers And I added some stuff to output smooth values between zero and one But I'm not going to explain it much more than that After all a neural network doesn't know the function definition either and it shouldn't matter It should be able to approximate it all the same The data set here is randomized points drawn uniformly from this range Now this has actually been a pet project of mine for some time and I've made several videos trying this exact experiment over the years I hope you can see why it's interesting Despite being so low dimensional the Mandelbrot function is infinitely complex literally made with complex numbers and is uniquely difficult to approximate You can just keep fitting and fitting and fitting the function and you will always come up short You could do this with any fractal. I just use the Mandelbrot set because it's so well known So after training for a while we've made some progress, but clearly we're still missing an infinite amount of detail I've gotten this to look better in the past, but I'm not going to waste any more time training this network There are better ways of doing this Are there different methods for approximating functions besides neural networks? Yes, many actually. There are always many ways to solve the same problem though some ways are better than others Another mathematical tool we can use is called the Taylor series This is an infinite sum of a sequence of polynomial functions x plus x squared plus x cubed plus x to the fourth up to x to the n n is the order of the series Each of these terms are multiplied by their own value called a coefficient Each coefficient controls how much that individual term affects the overall function Given some target function by choosing the right coefficients We can approximate that target function around a specific point in this case zero The approximation gets better the more terms we add where an infinite sum of terms is exactly equivalent to the target function If we know the target function We can actually derive the exact coefficients using a general formula to calculate each coefficient for each term But of course in our particular problem. We don't know the function. We only have a sample of data points So how do we find the coefficients? Well, do you see anything familiar in this weighted sum of terms? We can put all of the x to the n terms into an inputs vector and put all of the coefficients into a weights vector and then take the dot product a weighted sum The Taylor series is effectively a single layer neural network But one where we compute a bunch of additional inputs x squared x cubed and so on we'll call these additional inputs Taylor features We can then learn the coefficients or weights with back propagation Of course We can only compute a finite number of these the partial Taylor series up to some order But the higher the order the better it should do Let's use this simple Taylor network to learn this function using eight orders of the Taylor series Here's our data set and here's the approximation That's not great Polynomials are pretty touchy as their values can explode very quickly So I think back propagation has a tough time finding the right coefficients, but we can do better Rather than using a single layer network, let's just give these Taylor features to a full multi-layered network Let's give it a shot It's a bit wonky, but this performs much better This trick of computing additional features to feed to the network is a well-known and commonly used one Intuitively, it's like giving the network different kinds of mathematical building blocks to build a more diverse complex function Let's try this on an image data set Well, that's pretty good it's learning, but it doesn't seem to work any better than just using a good old-fashioned neural network The Taylor series is made to approximate a function around a single given point While we want to approximate within a given range of points a better tool for this is the Fourier series The Fourier series acts very much like the Taylor series But is an infinite sum of sines and cosines Each order n of the series is made up of sine nx plus cosine nx Each sine and cosine is multiplied by its own coefficient again controlling how much that term affects the overall function N, these inner multiplier values, control the frequency of each wave function. The higher the frequency, the more hills the curve has By combining weighted waves of different frequencies, we can approximate a function within the range of two pi, one full period Again, if we know the function, we can compute the weights and even if we don't we could use something called the discrete Fourier Transform, which is really cool, but we're not dealing with it in this video. I Hope you see where I'm going with this. Let's just jump ahead and do what we did before Compute a bunch of terms of the Fourier series and feed them to a multi-layer network as additional inputs Fourier features Note that we have twice as many Fourier features as Taylor features since we have a sine and cosine Let's try it on this data set This works pretty well. It's a little wavy, but not too shabby Note that for this to work we need to normalize our inputs between negative pi and positive pi one full period Let's try this on an image That looks strange at first almost like static coming into focus, but it works and it works really well If we compare it to networks of the same size trained for the same amount of time We can see the Fourier network learns much better and faster than the network without Fourier features or the one with Taylor features Just look at the level of detail in those curly locks. You can hardly tell the difference from the real image Now I've glossed over a very important detail the example Fourier series I gave had one input this function has two inputs to handle this properly We have to use the two-dimensional Fourier series one that takes an input of X and Y What do we do with that extra Y? Here are the terms for the 2d Fourier series up to two orders We are now multiplying the X and Y terms together and end up with sine X cosine Y sine X sine Y cosine X cosine Y and cosine X sine Y every combination of sine and cosine and Y and X Not only that we also have every combination of frequencies that inner multiplier So sine 2x times cosine 1y and so on and so forth Here's up to three orders now four That is a lot of terms we have to calculate this many terms per order and This number grows very quickly as we increase the order much faster than it would for the 1d series and This is just for a baby 2d input for a 3d 4d 5d input forget it The number of computations needed for higher dimensional Fourier series Explodes as we increase the dimensionality of our inputs We have encountered the curse of dimensionality Lots of methods of function approximation and machine learning break down as dimensionality grows These methods might work well on low dimensional problems, but they become computationally impractical or impossible for higher dimensional problems Neural networks by contrast handle the dimensionality problem very well Comparatively it is trivial to add additional dimensions But we don't need to use the 2d Fourier series We can just treat each input as its own independent variable and compute 1d Fourier features for each input This is less theoretically sound but much more practical to compute It's still a lot of additional features, but it's manageable and it's worth it. It drastically improves performance That's what I've been using to get these image approximations It really shouldn't be surprising that Fourier features help so much here since the Fourier series and transform is used to compress Images, it's how the JPEG compression algorithm works turns out lots of things can be represented as combinations of waves So let's apply it to our Mandelbrot data set Again, it looks a little weird, but it is definitely capturing more detail than the previous attempt Well, that's fun to watch, but let's evaluate for comparison here is the real Mandelbrot set Actually, no, this is not the real Mandelbrot set. It is an approximation from our Fourier network You might be able to tell if you're on a 4k monitor, especially when I zoom in This network was given 56 orders of the Fourier series, which means a 1024 extra Fourier features being fed to the network and the network itself is pretty damn big When we really zoom in it becomes very obvious that this is not the real deal. It is still missing an infinite amount of detail Nonetheless, I am blown away by the quality of the Fourier networks approximation Fourier features are of course not my idea. They come from this paper that was suggested by a reddit commenter Who I think actually may have been a co-author? I'm still missing details from this Adding Fourier features was one of if not the most effective improvements to the approximation I've applied and it was really surprising To return to the tricky spiral shell surface We can see that our Fourier network does way better than our previous attempt Although the target function is literally defined with sines and cosines, so of course it will do well So if Fourier features help so much why don't we use them more often they hardly ever show up in real-world neural networks To state the obvious all of the approximations in this video so far are completely useless We know the functions and the images. We don't need a massive neural network to approximate them But I hope that you can see that we're not studying the functions. We're studying the methods of approximation Because these toy problems are so low dimensional We can visualize them and hopefully gain insights that will carry over into higher dimensional problems So let's bring it back to earth with a real problem that uses real data This is the MNIST dataset images of hand-drawn numbers and their labels Our input is an entire image flattened out into a vector and our output is a vector of 10 values Representing a label as to which number 0 through 9 is in the image There is some unknown function that describes the relationship between an image and its label and that's what we're trying to discover Even for tiny 28 by 28 black and white images that is a 784 dimensional input that is a lot and this is still a very simple problem for real-world problems We must address the curse of dimensionality our method must be able to handle huge dimensional inputs and outputs We also can't visualize the entire approximation all at once as before any idea what a 700 dimensional space looks like But a normal neural network can handle this problem. Just fine. It's pretty trivial We can evaluate it by measuring the accuracy of its predictions on images from the dataset that it did not see during training We'll call this evaluation accuracy and a small network does pretty well What if we use Fourier features on this problem say up to eight orders? Well, it does do a little better, but we're adding a lot of additional features for only eight orders We're computing a total of thirteen 2328 input features which is a lot more than 784 and it's only 2% more accurate when we use 32 orders of the Fourier series It actually seems to harm performance up to 64 orders and its downright ruiness This may be due to something called overfitting where our approximation learns the data really well too well But fails to learn the underlying function Usually this is a product of not having enough data, but our Fourier network seems to be especially prone to this This seems consistent with the conclusions of the paper. I mentioned earlier and ultimately our Fourier network seems to be very good for low Dimensional problems, but not very good for high dimensional problems No single architecture model or method is the best fit for all tasks Indeed, there are all kinds of problems that require different approaches than the ones discussed here Now I'd be surprised if the Fourier series didn't have more to teach us about machine learning, but this is where I'll leave it I hope this video has helped you appreciate what function approximation is and why it's useful and maybe sparked your imagination with some alternative perspectives Neural networks are a kind of mathematical clay that can be molded into arbitrary shapes for arbitrary purposes I want to finish by opening up the Mandelbrot approximation problem as a fun challenge for anyone who's interested How precisely and deeply can you approximate the Mandelbrot set given only a random sample of points? There are probably a million things that could be done to improve on my approximation and the internet is much smarter than I am The only rule is that your solution must still be a universal function approximator Meaning it could still learn any other data set of any dimensionality This is just for fun, but potentially solutions to this toy problem could have uses in the real world There is no reason to think that we found the best way of doing this and there may be far better solutions waiting to be discovered Thanks for watching", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 4.4, "text": " You are currently watching a neural network learn about a year ago", "tokens": [50364, 509, 366, 4362, 1976, 257, 18161, 3209, 1466, 466, 257, 1064, 2057, 50584], "temperature": 0.0, "avg_logprob": -0.2538410908467061, "compression_ratio": 1.678391959798995, "no_speech_prob": 0.056552134454250336}, {"id": 1, "seek": 0, "start": 4.4, "end": 10.92, "text": " I made a video about how neural networks can learn almost anything and this is because they are universal function approximators", "tokens": [50584, 286, 1027, 257, 960, 466, 577, 18161, 9590, 393, 1466, 1920, 1340, 293, 341, 307, 570, 436, 366, 11455, 2445, 8542, 3391, 50910], "temperature": 0.0, "avg_logprob": -0.2538410908467061, "compression_ratio": 1.678391959798995, "no_speech_prob": 0.056552134454250336}, {"id": 2, "seek": 0, "start": 11.200000000000001, "end": 17.54, "text": " Why is that so important? Well, you might as well ask why functions are important. They are important because", "tokens": [50924, 1545, 307, 300, 370, 1021, 30, 1042, 11, 291, 1062, 382, 731, 1029, 983, 6828, 366, 1021, 13, 814, 366, 1021, 570, 51241], "temperature": 0.0, "avg_logprob": -0.2538410908467061, "compression_ratio": 1.678391959798995, "no_speech_prob": 0.056552134454250336}, {"id": 3, "seek": 0, "start": 18.56, "end": 20.400000000000002, "text": " functions", "tokens": [51292, 6828, 51384], "temperature": 0.0, "avg_logprob": -0.2538410908467061, "compression_ratio": 1.678391959798995, "no_speech_prob": 0.056552134454250336}, {"id": 4, "seek": 0, "start": 20.400000000000002, "end": 22.240000000000002, "text": " describe", "tokens": [51384, 6786, 51476], "temperature": 0.0, "avg_logprob": -0.2538410908467061, "compression_ratio": 1.678391959798995, "no_speech_prob": 0.056552134454250336}, {"id": 5, "seek": 0, "start": 22.240000000000002, "end": 24.240000000000002, "text": " the world", "tokens": [51476, 264, 1002, 51576], "temperature": 0.0, "avg_logprob": -0.2538410908467061, "compression_ratio": 1.678391959798995, "no_speech_prob": 0.056552134454250336}, {"id": 6, "seek": 2424, "start": 25.2, "end": 28.279999999999998, "text": " Everything is described by functions", "tokens": [50412, 5471, 307, 7619, 538, 6828, 50566], "temperature": 0.0, "avg_logprob": -0.32011840560219507, "compression_ratio": 1.9429824561403508, "no_speech_prob": 0.05100572481751442}, {"id": 7, "seek": 2424, "start": 28.64, "end": 33.26, "text": " That's right functions describe the sound of my voice on your eardrum", "tokens": [50584, 663, 311, 558, 6828, 6786, 264, 1626, 295, 452, 3177, 322, 428, 308, 515, 6247, 50815], "temperature": 0.0, "avg_logprob": -0.32011840560219507, "compression_ratio": 1.9429824561403508, "no_speech_prob": 0.05100572481751442}, {"id": 8, "seek": 2424, "start": 33.72, "end": 37.2, "text": " Function the light that's kind of hitting your eyeballs right now", "tokens": [50838, 11166, 882, 264, 1442, 300, 311, 733, 295, 8850, 428, 43758, 558, 586, 51012], "temperature": 0.0, "avg_logprob": -0.32011840560219507, "compression_ratio": 1.9429824561403508, "no_speech_prob": 0.05100572481751442}, {"id": 9, "seek": 2424, "start": 38.04, "end": 44.519999999999996, "text": " Function different classes and mathematics different areas and mathematics study different kinds of function high school math studies second-degree", "tokens": [51054, 11166, 882, 819, 5359, 293, 18666, 819, 3179, 293, 18666, 2979, 819, 3685, 295, 2445, 1090, 1395, 5221, 5313, 1150, 12, 34368, 51378], "temperature": 0.0, "avg_logprob": -0.32011840560219507, "compression_ratio": 1.9429824561403508, "no_speech_prob": 0.05100572481751442}, {"id": 10, "seek": 2424, "start": 44.519999999999996, "end": 50.22, "text": " One variable polynomials calculus studies smooth one variable functions and it goes on and on", "tokens": [51378, 1485, 7006, 22560, 12356, 33400, 5313, 5508, 472, 7006, 6828, 293, 309, 1709, 322, 293, 322, 51663], "temperature": 0.0, "avg_logprob": -0.32011840560219507, "compression_ratio": 1.9429824561403508, "no_speech_prob": 0.05100572481751442}, {"id": 11, "seek": 2424, "start": 50.84, "end": 53.480000000000004, "text": " functions describe the world", "tokens": [51694, 6828, 6786, 264, 1002, 51826], "temperature": 0.0, "avg_logprob": -0.32011840560219507, "compression_ratio": 1.9429824561403508, "no_speech_prob": 0.05100572481751442}, {"id": 12, "seek": 5424, "start": 55.24, "end": 60.24, "text": " Yes, correct. Thanks Thomas. He gets a little excited, but he's right", "tokens": [50414, 1079, 11, 3006, 13, 2561, 8500, 13, 634, 2170, 257, 707, 2919, 11, 457, 415, 311, 558, 50664], "temperature": 0.0, "avg_logprob": -0.20904032389322916, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.00221555819734931}, {"id": 13, "seek": 5424, "start": 60.24, "end": 65.6, "text": " The world can fundamentally be described with numbers and relationships between numbers", "tokens": [50664, 440, 1002, 393, 17879, 312, 7619, 365, 3547, 293, 6159, 1296, 3547, 50932], "temperature": 0.0, "avg_logprob": -0.20904032389322916, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.00221555819734931}, {"id": 14, "seek": 5424, "start": 65.72, "end": 73.4, "text": " We call those relationships functions and with functions we can understand model and predict the world around us", "tokens": [50938, 492, 818, 729, 6159, 6828, 293, 365, 6828, 321, 393, 1223, 2316, 293, 6069, 264, 1002, 926, 505, 51322], "temperature": 0.0, "avg_logprob": -0.20904032389322916, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.00221555819734931}, {"id": 15, "seek": 5424, "start": 74.04, "end": 78.24000000000001, "text": " The goal of artificial intelligence is to write programs that can also", "tokens": [51354, 440, 3387, 295, 11677, 7599, 307, 281, 2464, 4268, 300, 393, 611, 51564], "temperature": 0.0, "avg_logprob": -0.20904032389322916, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.00221555819734931}, {"id": 16, "seek": 7824, "start": 78.67999999999999, "end": 82.8, "text": " Understand model and predict the world or rather have them write themselves", "tokens": [50386, 26093, 2316, 293, 6069, 264, 1002, 420, 2831, 362, 552, 2464, 2969, 50592], "temperature": 0.0, "avg_logprob": -0.2223253785894158, "compression_ratio": 1.703125, "no_speech_prob": 0.03961974009871483}, {"id": 17, "seek": 7824, "start": 82.8, "end": 85.52, "text": " So they must be able to build their own functions", "tokens": [50592, 407, 436, 1633, 312, 1075, 281, 1322, 641, 1065, 6828, 50728], "temperature": 0.0, "avg_logprob": -0.2223253785894158, "compression_ratio": 1.703125, "no_speech_prob": 0.03961974009871483}, {"id": 18, "seek": 7824, "start": 85.88, "end": 92.19999999999999, "text": " That is the point of function approximation and that is what neural networks do. They are function building machines", "tokens": [50746, 663, 307, 264, 935, 295, 2445, 28023, 293, 300, 307, 437, 18161, 9590, 360, 13, 814, 366, 2445, 2390, 8379, 51062], "temperature": 0.0, "avg_logprob": -0.2223253785894158, "compression_ratio": 1.703125, "no_speech_prob": 0.03961974009871483}, {"id": 19, "seek": 7824, "start": 92.64, "end": 93.6, "text": " In this video", "tokens": [51084, 682, 341, 960, 51132], "temperature": 0.0, "avg_logprob": -0.2223253785894158, "compression_ratio": 1.703125, "no_speech_prob": 0.03961974009871483}, {"id": 20, "seek": 7824, "start": 93.6, "end": 100.64, "text": " I want to expand on the ideas of my previous video by watching actual neural networks learn strange shapes and strange spaces", "tokens": [51132, 286, 528, 281, 5268, 322, 264, 3487, 295, 452, 3894, 960, 538, 1976, 3539, 18161, 9590, 1466, 5861, 10854, 293, 5861, 7673, 51484], "temperature": 0.0, "avg_logprob": -0.2223253785894158, "compression_ratio": 1.703125, "no_speech_prob": 0.03961974009871483}, {"id": 21, "seek": 7824, "start": 101.08, "end": 103.88, "text": " Here we will encounter some very difficult challenges", "tokens": [51506, 1692, 321, 486, 8593, 512, 588, 2252, 4759, 51646], "temperature": 0.0, "avg_logprob": -0.2223253785894158, "compression_ratio": 1.703125, "no_speech_prob": 0.03961974009871483}, {"id": 22, "seek": 10388, "start": 104.19999999999999, "end": 111.0, "text": " Discover the limitations of neural networks and explore other methods for machine learning and mathematics to approach this open problem", "tokens": [50380, 40386, 264, 15705, 295, 18161, 9590, 293, 6839, 661, 7150, 337, 3479, 2539, 293, 18666, 281, 3109, 341, 1269, 1154, 50720], "temperature": 0.0, "avg_logprob": -0.149209839957101, "compression_ratio": 1.6850649350649352, "no_speech_prob": 0.03513018786907196}, {"id": 23, "seek": 10388, "start": 111.39999999999999, "end": 117.11999999999999, "text": " Now I am a programmer not a mathematician and to be honest. I kind of hate math", "tokens": [50740, 823, 286, 669, 257, 32116, 406, 257, 48281, 293, 281, 312, 3245, 13, 286, 733, 295, 4700, 5221, 51026], "temperature": 0.0, "avg_logprob": -0.149209839957101, "compression_ratio": 1.6850649350649352, "no_speech_prob": 0.03513018786907196}, {"id": 24, "seek": 10388, "start": 117.24, "end": 119.8, "text": " I've always found it difficult and intimidating", "tokens": [51032, 286, 600, 1009, 1352, 309, 2252, 293, 29714, 51160], "temperature": 0.0, "avg_logprob": -0.149209839957101, "compression_ratio": 1.6850649350649352, "no_speech_prob": 0.03513018786907196}, {"id": 25, "seek": 10388, "start": 119.8, "end": 125.24, "text": " But that's a bad attitude because math is unavoidably useful and occasionally beautiful", "tokens": [51160, 583, 300, 311, 257, 1578, 10157, 570, 5221, 307, 36541, 17079, 1188, 4420, 293, 16895, 2238, 51432], "temperature": 0.0, "avg_logprob": -0.149209839957101, "compression_ratio": 1.6850649350649352, "no_speech_prob": 0.03513018786907196}, {"id": 26, "seek": 10388, "start": 125.24, "end": 128.92, "text": " I'll do my best to keep things simple and accurate for an audience like me", "tokens": [51432, 286, 603, 360, 452, 1151, 281, 1066, 721, 2199, 293, 8559, 337, 364, 4034, 411, 385, 51616], "temperature": 0.0, "avg_logprob": -0.149209839957101, "compression_ratio": 1.6850649350649352, "no_speech_prob": 0.03513018786907196}, {"id": 27, "seek": 10388, "start": 128.92, "end": 133.0, "text": " But know that I'm gonna have to brush over a lot of things and I'm gonna be pretty informal", "tokens": [51616, 583, 458, 300, 286, 478, 799, 362, 281, 5287, 670, 257, 688, 295, 721, 293, 286, 478, 799, 312, 1238, 24342, 51820], "temperature": 0.0, "avg_logprob": -0.149209839957101, "compression_ratio": 1.6850649350649352, "no_speech_prob": 0.03513018786907196}, {"id": 28, "seek": 13388, "start": 134.12, "end": 138.96, "text": " I recommend you watch my previous video, but to summarize functions are input output machines", "tokens": [50376, 286, 2748, 291, 1159, 452, 3894, 960, 11, 457, 281, 20858, 6828, 366, 4846, 5598, 8379, 50618], "temperature": 0.0, "avg_logprob": -0.1785237302062332, "compression_ratio": 1.779467680608365, "no_speech_prob": 0.0014777476899325848}, {"id": 29, "seek": 13388, "start": 139.12, "end": 147.0, "text": " They take an input set of numbers and output a corresponding set of numbers and the function defines the relationship between those numbers", "tokens": [50626, 814, 747, 364, 4846, 992, 295, 3547, 293, 5598, 257, 11760, 992, 295, 3547, 293, 264, 2445, 23122, 264, 2480, 1296, 729, 3547, 51020], "temperature": 0.0, "avg_logprob": -0.1785237302062332, "compression_ratio": 1.779467680608365, "no_speech_prob": 0.0014777476899325848}, {"id": 30, "seek": 13388, "start": 147.28, "end": 154.4, "text": " The particular problem that neural network solve is when we don't know the definition of the function that we're trying to approximate", "tokens": [51034, 440, 1729, 1154, 300, 18161, 3209, 5039, 307, 562, 321, 500, 380, 458, 264, 7123, 295, 264, 2445, 300, 321, 434, 1382, 281, 30874, 51390], "temperature": 0.0, "avg_logprob": -0.1785237302062332, "compression_ratio": 1.779467680608365, "no_speech_prob": 0.0014777476899325848}, {"id": 31, "seek": 13388, "start": 154.88, "end": 161.07999999999998, "text": " Instead we have a sample of data points from that function inputs and outputs. This is our data set", "tokens": [51414, 7156, 321, 362, 257, 6889, 295, 1412, 2793, 490, 300, 2445, 15743, 293, 23930, 13, 639, 307, 527, 1412, 992, 51724], "temperature": 0.0, "avg_logprob": -0.1785237302062332, "compression_ratio": 1.779467680608365, "no_speech_prob": 0.0014777476899325848}, {"id": 32, "seek": 16108, "start": 161.28, "end": 168.96, "text": " We must approximate a function that fits these data points and allows us to accurately predict outputs given inputs that are not in our", "tokens": [50374, 492, 1633, 30874, 257, 2445, 300, 9001, 613, 1412, 2793, 293, 4045, 505, 281, 20095, 6069, 23930, 2212, 15743, 300, 366, 406, 294, 527, 50758], "temperature": 0.0, "avg_logprob": -0.17501965477353051, "compression_ratio": 1.7563636363636363, "no_speech_prob": 0.009123671799898148}, {"id": 33, "seek": 16108, "start": 169.0, "end": 175.48000000000002, "text": " Data set this process is also called curve fitting and you can see why now this is not some handcrafted", "tokens": [50760, 11888, 992, 341, 1399, 307, 611, 1219, 7605, 15669, 293, 291, 393, 536, 983, 586, 341, 307, 406, 512, 1011, 5611, 292, 51084], "temperature": 0.0, "avg_logprob": -0.17501965477353051, "compression_ratio": 1.7563636363636363, "no_speech_prob": 0.009123671799898148}, {"id": 34, "seek": 16108, "start": 175.92000000000002, "end": 180.36, "text": " Animation it is an actual neural network attempting to fit the curve to the data", "tokens": [51106, 44635, 309, 307, 364, 3539, 18161, 3209, 22001, 281, 3318, 264, 7605, 281, 264, 1412, 51328], "temperature": 0.0, "avg_logprob": -0.17501965477353051, "compression_ratio": 1.7563636363636363, "no_speech_prob": 0.009123671799898148}, {"id": 35, "seek": 16108, "start": 180.36, "end": 183.64000000000001, "text": " And it does so by sort of bending the line into shape", "tokens": [51328, 400, 309, 775, 370, 538, 1333, 295, 22487, 264, 1622, 666, 3909, 51492], "temperature": 0.0, "avg_logprob": -0.17501965477353051, "compression_ratio": 1.7563636363636363, "no_speech_prob": 0.009123671799898148}, {"id": 36, "seek": 16108, "start": 184.08, "end": 190.84, "text": " This process is generalizable such that it can fit the curve to any data set and thus construct any function", "tokens": [51514, 639, 1399, 307, 2674, 22395, 1270, 300, 309, 393, 3318, 264, 7605, 281, 604, 1412, 992, 293, 8807, 7690, 604, 2445, 51852], "temperature": 0.0, "avg_logprob": -0.17501965477353051, "compression_ratio": 1.7563636363636363, "no_speech_prob": 0.009123671799898148}, {"id": 37, "seek": 19108, "start": 191.16000000000003, "end": 194.28, "text": " This makes it a universal function approximator", "tokens": [50368, 639, 1669, 309, 257, 11455, 2445, 8542, 1639, 50524], "temperature": 0.0, "avg_logprob": -0.12738336643702547, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0005357186892069876}, {"id": 38, "seek": 19108, "start": 197.0, "end": 201.64000000000001, "text": " The network itself is also a function and should approximate some unknown target function", "tokens": [50660, 440, 3209, 2564, 307, 611, 257, 2445, 293, 820, 30874, 512, 9841, 3779, 2445, 50892], "temperature": 0.0, "avg_logprob": -0.12738336643702547, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0005357186892069876}, {"id": 39, "seek": 19108, "start": 202.20000000000002, "end": 208.12, "text": " The particular neural architecture we're dealing with in this video is called a fully connected feed forward network", "tokens": [50920, 440, 1729, 18161, 9482, 321, 434, 6260, 365, 294, 341, 960, 307, 1219, 257, 4498, 4582, 3154, 2128, 3209, 51216], "temperature": 0.0, "avg_logprob": -0.12738336643702547, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0005357186892069876}, {"id": 40, "seek": 19108, "start": 208.44, "end": 215.16000000000003, "text": " Its inputs and outputs are sometimes called features and predictions and they take the form of vectors arrays of numbers", "tokens": [51232, 6953, 15743, 293, 23930, 366, 2171, 1219, 4122, 293, 21264, 293, 436, 747, 264, 1254, 295, 18875, 41011, 295, 3547, 51568], "temperature": 0.0, "avg_logprob": -0.12738336643702547, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0005357186892069876}, {"id": 41, "seek": 21516, "start": 215.6, "end": 221.12, "text": " The overall function is made up of lots of simple functions called neurons that take many inputs", "tokens": [50386, 440, 4787, 2445, 307, 1027, 493, 295, 3195, 295, 2199, 6828, 1219, 22027, 300, 747, 867, 15743, 50662], "temperature": 0.0, "avg_logprob": -0.13664963666130514, "compression_ratio": 1.782442748091603, "no_speech_prob": 0.005468712653964758}, {"id": 42, "seek": 21516, "start": 221.12, "end": 228.88, "text": " But only produce one output each input is multiplied by its own weight and added up along with one extra weight called a bias", "tokens": [50662, 583, 787, 5258, 472, 5598, 1184, 4846, 307, 17207, 538, 1080, 1065, 3364, 293, 3869, 493, 2051, 365, 472, 2857, 3364, 1219, 257, 12577, 51050], "temperature": 0.0, "avg_logprob": -0.13664963666130514, "compression_ratio": 1.782442748091603, "no_speech_prob": 0.005468712653964758}, {"id": 43, "seek": 21516, "start": 229.84, "end": 232.88, "text": " Let's rewrite this weighted sum with some linear algebra", "tokens": [51098, 961, 311, 28132, 341, 32807, 2408, 365, 512, 8213, 21989, 51250], "temperature": 0.0, "avg_logprob": -0.13664963666130514, "compression_ratio": 1.782442748091603, "no_speech_prob": 0.005468712653964758}, {"id": 44, "seek": 21516, "start": 233.04, "end": 240.07999999999998, "text": " We can put our inputs into a vector with an extra one for the bias and our weights into another vector and then take what is called", "tokens": [51258, 492, 393, 829, 527, 15743, 666, 257, 8062, 365, 364, 2857, 472, 337, 264, 12577, 293, 527, 17443, 666, 1071, 8062, 293, 550, 747, 437, 307, 1219, 51610], "temperature": 0.0, "avg_logprob": -0.13664963666130514, "compression_ratio": 1.782442748091603, "no_speech_prob": 0.005468712653964758}, {"id": 45, "seek": 21516, "start": 240.07999999999998, "end": 243.35999999999999, "text": " The dot product. Let's just make up some example values", "tokens": [51610, 440, 5893, 1674, 13, 961, 311, 445, 652, 493, 512, 1365, 4190, 51774], "temperature": 0.0, "avg_logprob": -0.13664963666130514, "compression_ratio": 1.782442748091603, "no_speech_prob": 0.005468712653964758}, {"id": 46, "seek": 24336, "start": 243.84, "end": 249.12, "text": " To take the dot product we multiply each input by each weight and then add them all up", "tokens": [50388, 1407, 747, 264, 5893, 1674, 321, 12972, 1184, 4846, 538, 1184, 3364, 293, 550, 909, 552, 439, 493, 50652], "temperature": 0.0, "avg_logprob": -0.1760392189025879, "compression_ratio": 1.8108108108108107, "no_speech_prob": 0.0010321360314264894}, {"id": 47, "seek": 24336, "start": 249.92000000000002, "end": 256.56, "text": " Finally this dot product is then passed to a very simple activation function in this case a relu which here returns zero", "tokens": [50692, 6288, 341, 5893, 1674, 307, 550, 4678, 281, 257, 588, 2199, 24433, 2445, 294, 341, 1389, 257, 1039, 84, 597, 510, 11247, 4018, 51024], "temperature": 0.0, "avg_logprob": -0.1760392189025879, "compression_ratio": 1.8108108108108107, "no_speech_prob": 0.0010321360314264894}, {"id": 48, "seek": 24336, "start": 257.28000000000003, "end": 260.72, "text": " We could use a different activation function, but a relu looks like this", "tokens": [51060, 492, 727, 764, 257, 819, 24433, 2445, 11, 457, 257, 1039, 84, 1542, 411, 341, 51232], "temperature": 0.0, "avg_logprob": -0.1760392189025879, "compression_ratio": 1.8108108108108107, "no_speech_prob": 0.0010321360314264894}, {"id": 49, "seek": 24336, "start": 261.2, "end": 267.8, "text": " The activation function defines the neurons mathematical shape while the weights shift and squeeze and stretch that shape", "tokens": [51256, 440, 24433, 2445, 23122, 264, 22027, 18894, 3909, 1339, 264, 17443, 5513, 293, 13578, 293, 5985, 300, 3909, 51586], "temperature": 0.0, "avg_logprob": -0.1760392189025879, "compression_ratio": 1.8108108108108107, "no_speech_prob": 0.0010321360314264894}, {"id": 50, "seek": 26780, "start": 268.40000000000003, "end": 274.98, "text": " We feed the original inputs of our network to a layer of neurons each with their own learned weights and each with their own", "tokens": [50394, 492, 3154, 264, 3380, 15743, 295, 527, 3209, 281, 257, 4583, 295, 22027, 1184, 365, 641, 1065, 3264, 17443, 293, 1184, 365, 641, 1065, 50723], "temperature": 0.0, "avg_logprob": -0.14946455704538444, "compression_ratio": 1.888412017167382, "no_speech_prob": 0.01770542934536934}, {"id": 51, "seek": 26780, "start": 275.04, "end": 280.56, "text": " Output value we stack these outputs together into a vector and then feed the output vector as", "tokens": [50726, 5925, 2582, 2158, 321, 8630, 613, 23930, 1214, 666, 257, 8062, 293, 550, 3154, 264, 5598, 8062, 382, 51002], "temperature": 0.0, "avg_logprob": -0.14946455704538444, "compression_ratio": 1.888412017167382, "no_speech_prob": 0.01770542934536934}, {"id": 52, "seek": 26780, "start": 280.68, "end": 286.08000000000004, "text": " Inputs to the next layer and the next and the next until we get the final output of the network", "tokens": [51008, 682, 2582, 82, 281, 264, 958, 4583, 293, 264, 958, 293, 264, 958, 1826, 321, 483, 264, 2572, 5598, 295, 264, 3209, 51278], "temperature": 0.0, "avg_logprob": -0.14946455704538444, "compression_ratio": 1.888412017167382, "no_speech_prob": 0.01770542934536934}, {"id": 53, "seek": 26780, "start": 286.56, "end": 294.16, "text": " Each neuron is responsible for learning its own little piece or feature of the overall function and by combining many neurons", "tokens": [51302, 6947, 34090, 307, 6250, 337, 2539, 1080, 1065, 707, 2522, 420, 4111, 295, 264, 4787, 2445, 293, 538, 21928, 867, 22027, 51682], "temperature": 0.0, "avg_logprob": -0.14946455704538444, "compression_ratio": 1.888412017167382, "no_speech_prob": 0.01770542934536934}, {"id": 54, "seek": 29416, "start": 294.16, "end": 301.08000000000004, "text": " We can build an ever more intricate function with an infinite number of neurons. We can provably build any function", "tokens": [50364, 492, 393, 1322, 364, 1562, 544, 38015, 2445, 365, 364, 13785, 1230, 295, 22027, 13, 492, 393, 1439, 1188, 1322, 604, 2445, 50710], "temperature": 0.0, "avg_logprob": -0.1562806627024775, "compression_ratio": 1.7587548638132295, "no_speech_prob": 0.0029342537745833397}, {"id": 55, "seek": 29416, "start": 302.36, "end": 306.84000000000003, "text": " The values of the weights or parameters are discovered through the training process", "tokens": [50774, 440, 4190, 295, 264, 17443, 420, 9834, 366, 6941, 807, 264, 3097, 1399, 50998], "temperature": 0.0, "avg_logprob": -0.1562806627024775, "compression_ratio": 1.7587548638132295, "no_speech_prob": 0.0029342537745833397}, {"id": 56, "seek": 29416, "start": 306.84000000000003, "end": 312.52000000000004, "text": " We give the network inputs from our data set and ask it to predict the correct outputs over and over and over", "tokens": [50998, 492, 976, 264, 3209, 15743, 490, 527, 1412, 992, 293, 1029, 309, 281, 6069, 264, 3006, 23930, 670, 293, 670, 293, 670, 51282], "temperature": 0.0, "avg_logprob": -0.1562806627024775, "compression_ratio": 1.7587548638132295, "no_speech_prob": 0.0029342537745833397}, {"id": 57, "seek": 29416, "start": 313.0, "end": 321.08000000000004, "text": " The goal is to minimize the network's error or loss which is some measurement of difference between the predicted outputs and the true outputs", "tokens": [51306, 440, 3387, 307, 281, 17522, 264, 3209, 311, 6713, 420, 4470, 597, 307, 512, 13160, 295, 2649, 1296, 264, 19147, 23930, 293, 264, 2074, 23930, 51710], "temperature": 0.0, "avg_logprob": -0.1562806627024775, "compression_ratio": 1.7587548638132295, "no_speech_prob": 0.0029342537745833397}, {"id": 58, "seek": 32108, "start": 322.0, "end": 325.47999999999996, "text": " Over time the network should do better and better as loss goes down", "tokens": [50410, 4886, 565, 264, 3209, 820, 360, 1101, 293, 1101, 382, 4470, 1709, 760, 50584], "temperature": 0.0, "avg_logprob": -0.18642594881146868, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.0013249386101961136}, {"id": 59, "seek": 32108, "start": 325.71999999999997, "end": 330.96, "text": " The algorithm for this is called back propagation, and I am again not going to explain it in this video", "tokens": [50596, 440, 9284, 337, 341, 307, 1219, 646, 38377, 11, 293, 286, 669, 797, 406, 516, 281, 2903, 309, 294, 341, 960, 50858], "temperature": 0.0, "avg_logprob": -0.18642594881146868, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.0013249386101961136}, {"id": 60, "seek": 32108, "start": 330.96, "end": 334.44, "text": " I'll make a video on it. Eventually. I promise. It's a pretty magical algorithm", "tokens": [50858, 286, 603, 652, 257, 960, 322, 309, 13, 17586, 13, 286, 6228, 13, 467, 311, 257, 1238, 12066, 9284, 51032], "temperature": 0.0, "avg_logprob": -0.18642594881146868, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.0013249386101961136}, {"id": 61, "seek": 32108, "start": 336.08, "end": 344.29999999999995, "text": " However, this is a baby problem. What about functions with more than just one input or output that is to say higher dimensional problems", "tokens": [51114, 2908, 11, 341, 307, 257, 3186, 1154, 13, 708, 466, 6828, 365, 544, 813, 445, 472, 4846, 420, 5598, 300, 307, 281, 584, 2946, 18795, 2740, 51525], "temperature": 0.0, "avg_logprob": -0.18642594881146868, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.0013249386101961136}, {"id": 62, "seek": 32108, "start": 344.76, "end": 350.4, "text": " The dimensionality of a vector is defined by the number of numbers in that vector", "tokens": [51548, 440, 10139, 1860, 295, 257, 8062, 307, 7642, 538, 264, 1230, 295, 3547, 294, 300, 8062, 51830], "temperature": 0.0, "avg_logprob": -0.18642594881146868, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.0013249386101961136}, {"id": 63, "seek": 35040, "start": 350.64, "end": 354.28, "text": " For a higher dimensional problem. Let's try to learn an image", "tokens": [50376, 1171, 257, 2946, 18795, 1154, 13, 961, 311, 853, 281, 1466, 364, 3256, 50558], "temperature": 0.0, "avg_logprob": -0.17571584528142756, "compression_ratio": 1.6446886446886446, "no_speech_prob": 0.002590407384559512}, {"id": 64, "seek": 35040, "start": 354.67999999999995, "end": 361.56, "text": " The input vector is the row column coordinates of a pixel and the output vector is the value of the pixel itself", "tokens": [50578, 440, 4846, 8062, 307, 264, 5386, 7738, 21056, 295, 257, 19261, 293, 264, 5598, 8062, 307, 264, 2158, 295, 264, 19261, 2564, 50922], "temperature": 0.0, "avg_logprob": -0.17571584528142756, "compression_ratio": 1.6446886446886446, "no_speech_prob": 0.002590407384559512}, {"id": 65, "seek": 35040, "start": 361.56, "end": 365.52, "text": " In math speak we would say that this function maps from R2 to R1", "tokens": [50922, 682, 5221, 1710, 321, 576, 584, 300, 341, 2445, 11317, 490, 497, 17, 281, 497, 16, 51120], "temperature": 0.0, "avg_logprob": -0.17571584528142756, "compression_ratio": 1.6446886446886446, "no_speech_prob": 0.002590407384559512}, {"id": 66, "seek": 35040, "start": 365.88, "end": 371.52, "text": " Our data set is all of the pixels in an image. Let's use this unhappy man as an example a", "tokens": [51138, 2621, 1412, 992, 307, 439, 295, 264, 18668, 294, 364, 3256, 13, 961, 311, 764, 341, 22172, 587, 382, 364, 1365, 257, 51420], "temperature": 0.0, "avg_logprob": -0.17571584528142756, "compression_ratio": 1.6446886446886446, "no_speech_prob": 0.002590407384559512}, {"id": 67, "seek": 35040, "start": 371.96, "end": 378.0, "text": " Pixel value of zero is black and one is white although. I'm going to use different color schemes because it's pretty as", "tokens": [51442, 28323, 2158, 295, 4018, 307, 2211, 293, 472, 307, 2418, 4878, 13, 286, 478, 516, 281, 764, 819, 2017, 26954, 570, 309, 311, 1238, 382, 51744], "temperature": 0.0, "avg_logprob": -0.17571584528142756, "compression_ratio": 1.6446886446886446, "no_speech_prob": 0.002590407384559512}, {"id": 68, "seek": 37800, "start": 378.28, "end": 382.96, "text": " As we train we take snapshots of the learned function as the approximation improves", "tokens": [50378, 1018, 321, 3847, 321, 747, 19206, 27495, 295, 264, 3264, 2445, 382, 264, 28023, 24771, 50612], "temperature": 0.0, "avg_logprob": -0.1872888919526497, "compression_ratio": 1.7864768683274022, "no_speech_prob": 0.0008039982058107853}, {"id": 69, "seek": 37800, "start": 383.36, "end": 386.6, "text": " That's what you're saying now, and that's what you saw at the beginning of this video", "tokens": [50632, 663, 311, 437, 291, 434, 1566, 586, 11, 293, 300, 311, 437, 291, 1866, 412, 264, 2863, 295, 341, 960, 50794], "temperature": 0.0, "avg_logprob": -0.1872888919526497, "compression_ratio": 1.7864768683274022, "no_speech_prob": 0.0008039982058107853}, {"id": 70, "seek": 37800, "start": 387.16, "end": 395.08, "text": " But to clarify this image is not a single output from the network rather every individual pixel is a single output", "tokens": [50822, 583, 281, 17594, 341, 3256, 307, 406, 257, 2167, 5598, 490, 264, 3209, 2831, 633, 2609, 19261, 307, 257, 2167, 5598, 51218], "temperature": 0.0, "avg_logprob": -0.1872888919526497, "compression_ratio": 1.7864768683274022, "no_speech_prob": 0.0008039982058107853}, {"id": 71, "seek": 37800, "start": 395.32, "end": 401.04, "text": " We are looking at the entire function all at once and we can do this because it is very low dimensional", "tokens": [51230, 492, 366, 1237, 412, 264, 2302, 2445, 439, 412, 1564, 293, 321, 393, 360, 341, 570, 309, 307, 588, 2295, 18795, 51516], "temperature": 0.0, "avg_logprob": -0.1872888919526497, "compression_ratio": 1.7864768683274022, "no_speech_prob": 0.0008039982058107853}, {"id": 72, "seek": 37800, "start": 401.72, "end": 407.48, "text": " You'll also notice that the learning seems to slow down. It's not changing as abruptly as it was at the beginning", "tokens": [51550, 509, 603, 611, 3449, 300, 264, 2539, 2544, 281, 2964, 760, 13, 467, 311, 406, 4473, 382, 49642, 382, 309, 390, 412, 264, 2863, 51838], "temperature": 0.0, "avg_logprob": -0.1872888919526497, "compression_ratio": 1.7864768683274022, "no_speech_prob": 0.0008039982058107853}, {"id": 73, "seek": 40748, "start": 407.84000000000003, "end": 414.36, "text": " This is because we periodically reduce the learning rate a parameter that controls how much our training algorithm", "tokens": [50382, 639, 307, 570, 321, 38916, 5407, 264, 2539, 3314, 257, 13075, 300, 9003, 577, 709, 527, 3097, 9284, 50708], "temperature": 0.0, "avg_logprob": -0.16912841796875, "compression_ratio": 1.6777777777777778, "no_speech_prob": 0.000779269146732986}, {"id": 74, "seek": 40748, "start": 414.56, "end": 419.0, "text": " Alters the current function this allows it to progressively refine details", "tokens": [50718, 967, 1559, 264, 2190, 2445, 341, 4045, 309, 281, 46667, 33906, 4365, 50940], "temperature": 0.0, "avg_logprob": -0.16912841796875, "compression_ratio": 1.6777777777777778, "no_speech_prob": 0.000779269146732986}, {"id": 75, "seek": 40748, "start": 420.12, "end": 424.8, "text": " Now just because our neural network should theoretically be able to learn any function", "tokens": [50996, 823, 445, 570, 527, 18161, 3209, 820, 29400, 312, 1075, 281, 1466, 604, 2445, 51230], "temperature": 0.0, "avg_logprob": -0.16912841796875, "compression_ratio": 1.6777777777777778, "no_speech_prob": 0.000779269146732986}, {"id": 76, "seek": 40748, "start": 424.8, "end": 430.12, "text": " There are things we can do to practically improve the approximation and optimize the learning process", "tokens": [51230, 821, 366, 721, 321, 393, 360, 281, 15667, 3470, 264, 28023, 293, 19719, 264, 2539, 1399, 51496], "temperature": 0.0, "avg_logprob": -0.16912841796875, "compression_ratio": 1.6777777777777778, "no_speech_prob": 0.000779269146732986}, {"id": 77, "seek": 40748, "start": 430.84000000000003, "end": 435.16, "text": " For instance one thing I'm doing here is normalizing the row column inputs", "tokens": [51532, 1171, 5197, 472, 551, 286, 478, 884, 510, 307, 2710, 3319, 264, 5386, 7738, 15743, 51748], "temperature": 0.0, "avg_logprob": -0.16912841796875, "compression_ratio": 1.6777777777777778, "no_speech_prob": 0.000779269146732986}, {"id": 78, "seek": 43516, "start": 435.16, "end": 437.68, "text": " Which means I'm moving the values from a range of zero", "tokens": [50364, 3013, 1355, 286, 478, 2684, 264, 4190, 490, 257, 3613, 295, 4018, 50490], "temperature": 0.0, "avg_logprob": -0.1701381270949905, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.0015977071598172188}, {"id": 79, "seek": 43516, "start": 438.20000000000005, "end": 445.08000000000004, "text": " 1400 to the range of negative one one I do this with a simple linear transformation that shifts and scales the values", "tokens": [50516, 46795, 281, 264, 3613, 295, 3671, 472, 472, 286, 360, 341, 365, 257, 2199, 8213, 9887, 300, 19201, 293, 17408, 264, 4190, 50860], "temperature": 0.0, "avg_logprob": -0.1701381270949905, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.0015977071598172188}, {"id": 80, "seek": 43516, "start": 445.28000000000003, "end": 450.96000000000004, "text": " The negative one one range is easier for the network to deal with because it's smaller and centered at zero", "tokens": [50870, 440, 3671, 472, 472, 3613, 307, 3571, 337, 264, 3209, 281, 2028, 365, 570, 309, 311, 4356, 293, 18988, 412, 4018, 51154], "temperature": 0.0, "avg_logprob": -0.1701381270949905, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.0015977071598172188}, {"id": 81, "seek": 43516, "start": 452.20000000000005, "end": 455.92, "text": " Another trick is that I'm not using a relu as my activation function", "tokens": [51216, 3996, 4282, 307, 300, 286, 478, 406, 1228, 257, 1039, 84, 382, 452, 24433, 2445, 51402], "temperature": 0.0, "avg_logprob": -0.1701381270949905, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.0015977071598172188}, {"id": 82, "seek": 43516, "start": 455.92, "end": 463.08000000000004, "text": " But rather something called a leaky relu a leaky relu can output negative values while still being non-linear and has been shown to", "tokens": [51402, 583, 2831, 746, 1219, 257, 476, 15681, 1039, 84, 257, 476, 15681, 1039, 84, 393, 5598, 3671, 4190, 1339, 920, 885, 2107, 12, 28263, 293, 575, 668, 4898, 281, 51760], "temperature": 0.0, "avg_logprob": -0.1701381270949905, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.0015977071598172188}, {"id": 83, "seek": 46308, "start": 463.08, "end": 468.8, "text": " Generally improve performance. So I'm using a leaky relu in all of my layers except for the last one", "tokens": [50364, 21082, 3470, 3389, 13, 407, 286, 478, 1228, 257, 476, 15681, 1039, 84, 294, 439, 295, 452, 7914, 3993, 337, 264, 1036, 472, 50650], "temperature": 0.0, "avg_logprob": -0.15478662568695692, "compression_ratio": 1.7405857740585775, "no_speech_prob": 0.0023229175712913275}, {"id": 84, "seek": 46308, "start": 469.47999999999996, "end": 473.96, "text": " Because the final output is a pixel value. It needs to be between zero and one", "tokens": [50684, 1436, 264, 2572, 5598, 307, 257, 19261, 2158, 13, 467, 2203, 281, 312, 1296, 4018, 293, 472, 50908], "temperature": 0.0, "avg_logprob": -0.15478662568695692, "compression_ratio": 1.7405857740585775, "no_speech_prob": 0.0023229175712913275}, {"id": 85, "seek": 46308, "start": 474.32, "end": 476.44, "text": " To enforce this in the final layer", "tokens": [50926, 1407, 24825, 341, 294, 264, 2572, 4583, 51032], "temperature": 0.0, "avg_logprob": -0.15478662568695692, "compression_ratio": 1.7405857740585775, "no_speech_prob": 0.0023229175712913275}, {"id": 86, "seek": 46308, "start": 476.44, "end": 481.91999999999996, "text": " We can use a sigmoid activation function which squishes its inputs between zero and one", "tokens": [51032, 492, 393, 764, 257, 4556, 3280, 327, 24433, 2445, 597, 2339, 16423, 1080, 15743, 1296, 4018, 293, 472, 51306], "temperature": 0.0, "avg_logprob": -0.15478662568695692, "compression_ratio": 1.7405857740585775, "no_speech_prob": 0.0023229175712913275}, {"id": 87, "seek": 46308, "start": 483.03999999999996, "end": 489.28, "text": " Except there is a different squishing function called tan H that squishes its inputs between negative one and one", "tokens": [51362, 16192, 456, 307, 257, 819, 2339, 3807, 2445, 1219, 7603, 389, 300, 2339, 16423, 1080, 15743, 1296, 3671, 472, 293, 472, 51674], "temperature": 0.0, "avg_logprob": -0.15478662568695692, "compression_ratio": 1.7405857740585775, "no_speech_prob": 0.0023229175712913275}, {"id": 88, "seek": 48928, "start": 489.28, "end": 495.15999999999997, "text": " I can then normalize those outputs into the final range of zero one. Why go through the trouble?", "tokens": [50364, 286, 393, 550, 2710, 1125, 729, 23930, 666, 264, 2572, 3613, 295, 4018, 472, 13, 1545, 352, 807, 264, 5253, 30, 50658], "temperature": 0.0, "avg_logprob": -0.20633111540804205, "compression_ratio": 1.614814814814815, "no_speech_prob": 0.002396507654339075}, {"id": 89, "seek": 48928, "start": 495.15999999999997, "end": 498.44, "text": " Well, tan H just tends to work better than sigmoid", "tokens": [50658, 1042, 11, 7603, 389, 445, 12258, 281, 589, 1101, 813, 4556, 3280, 327, 50822], "temperature": 0.0, "avg_logprob": -0.20633111540804205, "compression_ratio": 1.614814814814815, "no_speech_prob": 0.002396507654339075}, {"id": 90, "seek": 48928, "start": 499.47999999999996, "end": 504.32, "text": " Intuitively, this is because tan H is centered at zero and plays much nicer with back propagation", "tokens": [50874, 5681, 1983, 3413, 11, 341, 307, 570, 7603, 389, 307, 18988, 412, 4018, 293, 5749, 709, 22842, 365, 646, 38377, 51116], "temperature": 0.0, "avg_logprob": -0.20633111540804205, "compression_ratio": 1.614814814814815, "no_speech_prob": 0.002396507654339075}, {"id": 91, "seek": 48928, "start": 504.32, "end": 510.23999999999995, "text": " But ultimately the reasoning doesn't matter as much as the results both networks here are theoretically", "tokens": [51116, 583, 6284, 264, 21577, 1177, 380, 1871, 382, 709, 382, 264, 3542, 1293, 9590, 510, 366, 29400, 51412], "temperature": 0.0, "avg_logprob": -0.20633111540804205, "compression_ratio": 1.614814814814815, "no_speech_prob": 0.002396507654339075}, {"id": 92, "seek": 48928, "start": 510.4, "end": 514.8399999999999, "text": " Universal function approximators, but practically one works much better than the other", "tokens": [51420, 22617, 2445, 8542, 3391, 11, 457, 15667, 472, 1985, 709, 1101, 813, 264, 661, 51642], "temperature": 0.0, "avg_logprob": -0.20633111540804205, "compression_ratio": 1.614814814814815, "no_speech_prob": 0.002396507654339075}, {"id": 93, "seek": 51484, "start": 515.2, "end": 520.0400000000001, "text": " This can be measured empirically by calculating and comparing the error rates of both networks", "tokens": [50382, 639, 393, 312, 12690, 25790, 984, 538, 28258, 293, 15763, 264, 6713, 6846, 295, 1293, 9590, 50624], "temperature": 0.0, "avg_logprob": -0.19280895693548794, "compression_ratio": 1.6442953020134228, "no_speech_prob": 0.0080607570707798}, {"id": 94, "seek": 51484, "start": 520.0400000000001, "end": 525.88, "text": " I think of this as the science of math where we must test our ideas and validate them with evidence", "tokens": [50624, 286, 519, 295, 341, 382, 264, 3497, 295, 5221, 689, 321, 1633, 1500, 527, 3487, 293, 29562, 552, 365, 4467, 50916], "temperature": 0.0, "avg_logprob": -0.19280895693548794, "compression_ratio": 1.6442953020134228, "no_speech_prob": 0.0080607570707798}, {"id": 95, "seek": 51484, "start": 526.0, "end": 528.0400000000001, "text": " Rather than providing formal proofs", "tokens": [50922, 16571, 813, 6530, 9860, 8177, 82, 51024], "temperature": 0.0, "avg_logprob": -0.19280895693548794, "compression_ratio": 1.6442953020134228, "no_speech_prob": 0.0080607570707798}, {"id": 96, "seek": 51484, "start": 528.24, "end": 531.64, "text": " It'd be great if we could do both but that is not always possible", "tokens": [51034, 467, 1116, 312, 869, 498, 321, 727, 360, 1293, 457, 300, 307, 406, 1009, 1944, 51204], "temperature": 0.0, "avg_logprob": -0.19280895693548794, "compression_ratio": 1.6442953020134228, "no_speech_prob": 0.0080607570707798}, {"id": 97, "seek": 51484, "start": 531.64, "end": 536.24, "text": " And it is often much easier to just try and see what happens and that's my kind of math", "tokens": [51204, 400, 309, 307, 2049, 709, 3571, 281, 445, 853, 293, 536, 437, 2314, 293, 300, 311, 452, 733, 295, 5221, 51434], "temperature": 0.0, "avg_logprob": -0.19280895693548794, "compression_ratio": 1.6442953020134228, "no_speech_prob": 0.0080607570707798}, {"id": 98, "seek": 51484, "start": 537.4, "end": 544.24, "text": " Let's make it harder. Here. We have a function that takes two inputs u v and produces three outputs x y z", "tokens": [51492, 961, 311, 652, 309, 6081, 13, 1692, 13, 492, 362, 257, 2445, 300, 2516, 732, 15743, 344, 371, 293, 14725, 1045, 23930, 2031, 288, 710, 51834], "temperature": 0.0, "avg_logprob": -0.19280895693548794, "compression_ratio": 1.6442953020134228, "no_speech_prob": 0.0080607570707798}, {"id": 99, "seek": 54424, "start": 544.44, "end": 548.4, "text": " It's a parametric surface function and we'll use the equation for a sphere", "tokens": [50374, 467, 311, 257, 6220, 17475, 3753, 2445, 293, 321, 603, 764, 264, 5367, 337, 257, 16687, 50572], "temperature": 0.0, "avg_logprob": -0.1317903289794922, "compression_ratio": 1.820069204152249, "no_speech_prob": 0.0032724689226597548}, {"id": 100, "seek": 54424, "start": 548.64, "end": 556.08, "text": " We can learn it the same way as before take a random sample of points across the surface of the sphere and ask our network to approximate it", "tokens": [50584, 492, 393, 1466, 309, 264, 912, 636, 382, 949, 747, 257, 4974, 6889, 295, 2793, 2108, 264, 3753, 295, 264, 16687, 293, 1029, 527, 3209, 281, 30874, 309, 50956], "temperature": 0.0, "avg_logprob": -0.1317903289794922, "compression_ratio": 1.820069204152249, "no_speech_prob": 0.0032724689226597548}, {"id": 101, "seek": 54424, "start": 556.4, "end": 558.92, "text": " Now this is clearly a very silly way to make a sphere", "tokens": [50972, 823, 341, 307, 4448, 257, 588, 11774, 636, 281, 652, 257, 16687, 51098], "temperature": 0.0, "avg_logprob": -0.1317903289794922, "compression_ratio": 1.820069204152249, "no_speech_prob": 0.0032724689226597548}, {"id": 102, "seek": 54424, "start": 558.92, "end": 564.4, "text": " But the network is trying its best to sort of wrap the surface around the sphere to fit the data points", "tokens": [51098, 583, 264, 3209, 307, 1382, 1080, 1151, 281, 1333, 295, 7019, 264, 3753, 926, 264, 16687, 281, 3318, 264, 1412, 2793, 51372], "temperature": 0.0, "avg_logprob": -0.1317903289794922, "compression_ratio": 1.820069204152249, "no_speech_prob": 0.0032724689226597548}, {"id": 103, "seek": 54424, "start": 564.4, "end": 568.52, "text": " I hope this also gives you a better view of what a parametric surface is", "tokens": [51372, 286, 1454, 341, 611, 2709, 291, 257, 1101, 1910, 295, 437, 257, 6220, 17475, 3753, 307, 51578], "temperature": 0.0, "avg_logprob": -0.1317903289794922, "compression_ratio": 1.820069204152249, "no_speech_prob": 0.0032724689226597548}, {"id": 104, "seek": 54424, "start": 568.52, "end": 573.92, "text": " It takes a flat 2d sheet and contorts it in 3d space according to some function", "tokens": [51578, 467, 2516, 257, 4962, 568, 67, 8193, 293, 660, 3299, 309, 294, 805, 67, 1901, 4650, 281, 512, 2445, 51848], "temperature": 0.0, "avg_logprob": -0.1317903289794922, "compression_ratio": 1.820069204152249, "no_speech_prob": 0.0032724689226597548}, {"id": 105, "seek": 57424, "start": 575.24, "end": 579.32, "text": " Now this does okay though it never quite closes up around the poles", "tokens": [50414, 823, 341, 775, 1392, 1673, 309, 1128, 1596, 24157, 493, 926, 264, 24760, 50618], "temperature": 0.0, "avg_logprob": -0.16169889767964682, "compression_ratio": 1.6074380165289257, "no_speech_prob": 0.00039810952148400247}, {"id": 106, "seek": 57424, "start": 580.6800000000001, "end": 584.32, "text": " For a real challenge, let's try this beautiful spiral shell surface", "tokens": [50686, 1171, 257, 957, 3430, 11, 718, 311, 853, 341, 2238, 25165, 8720, 3753, 50868], "temperature": 0.0, "avg_logprob": -0.16169889767964682, "compression_ratio": 1.6074380165289257, "no_speech_prob": 0.00039810952148400247}, {"id": 107, "seek": 57424, "start": 584.32, "end": 589.64, "text": " I got the equation for this from this wonderful little website that lets you play with all kinds of shell surfaces", "tokens": [50868, 286, 658, 264, 5367, 337, 341, 490, 341, 3715, 707, 3144, 300, 6653, 291, 862, 365, 439, 3685, 295, 8720, 16130, 51134], "temperature": 0.0, "avg_logprob": -0.16169889767964682, "compression_ratio": 1.6074380165289257, "no_speech_prob": 0.00039810952148400247}, {"id": 108, "seek": 57424, "start": 589.8, "end": 592.6, "text": " See what I mean when I say that functions describe the world", "tokens": [51142, 3008, 437, 286, 914, 562, 286, 584, 300, 6828, 6786, 264, 1002, 51282], "temperature": 0.0, "avg_logprob": -0.16169889767964682, "compression_ratio": 1.6074380165289257, "no_speech_prob": 0.00039810952148400247}, {"id": 109, "seek": 57424, "start": 593.32, "end": 597.2, "text": " Anyway, let's sample some points across the spiral surface and start learning", "tokens": [51318, 5684, 11, 718, 311, 6889, 512, 2793, 2108, 264, 25165, 3753, 293, 722, 2539, 51512], "temperature": 0.0, "avg_logprob": -0.16169889767964682, "compression_ratio": 1.6074380165289257, "no_speech_prob": 0.00039810952148400247}, {"id": 110, "seek": 60424, "start": 605.2, "end": 613.64, "text": " Well, it's working, but clearly we're having some trouble here. I'm using a fairly big neural network", "tokens": [50412, 1042, 11, 309, 311, 1364, 11, 457, 4448, 321, 434, 1419, 512, 5253, 510, 13, 286, 478, 1228, 257, 6457, 955, 18161, 3209, 50834], "temperature": 0.0, "avg_logprob": -0.14863845866213563, "compression_ratio": 1.584, "no_speech_prob": 0.0011692569823935628}, {"id": 111, "seek": 60424, "start": 613.64, "end": 619.52, "text": " But this is a complicated shape and it seems to be getting a little bit confused. We'll come back to this one", "tokens": [50834, 583, 341, 307, 257, 6179, 3909, 293, 309, 2544, 281, 312, 1242, 257, 707, 857, 9019, 13, 492, 603, 808, 646, 281, 341, 472, 51128], "temperature": 0.0, "avg_logprob": -0.14863845866213563, "compression_ratio": 1.584, "no_speech_prob": 0.0011692569823935628}, {"id": 112, "seek": 60424, "start": 621.32, "end": 627.88, "text": " We can also make the problem harder not by increasing dimensionality, but by increasing the complexity of the function itself", "tokens": [51218, 492, 393, 611, 652, 264, 1154, 6081, 406, 538, 5662, 10139, 1860, 11, 457, 538, 5662, 264, 14024, 295, 264, 2445, 2564, 51546], "temperature": 0.0, "avg_logprob": -0.14863845866213563, "compression_ratio": 1.584, "no_speech_prob": 0.0011692569823935628}, {"id": 113, "seek": 60424, "start": 628.4, "end": 632.8, "text": " Let's use the Mandelbrot set an infinitely complex fractal", "tokens": [51572, 961, 311, 764, 264, 15458, 338, 1443, 310, 992, 364, 36227, 3997, 17948, 304, 51792], "temperature": 0.0, "avg_logprob": -0.14863845866213563, "compression_ratio": 1.584, "no_speech_prob": 0.0011692569823935628}, {"id": 114, "seek": 63280, "start": 633.28, "end": 639.24, "text": " But we can simply define a Mandelbrot function as taking two real valued inputs and producing one output", "tokens": [50388, 583, 321, 393, 2935, 6964, 257, 15458, 338, 1443, 310, 2445, 382, 1940, 732, 957, 22608, 15743, 293, 10501, 472, 5598, 50686], "temperature": 0.0, "avg_logprob": -0.16215838905142135, "compression_ratio": 1.7598566308243728, "no_speech_prob": 0.0025503316428512335}, {"id": 115, "seek": 63280, "start": 639.24, "end": 641.88, "text": " The same dimensionality as the images we learned earlier", "tokens": [50686, 440, 912, 10139, 1860, 382, 264, 5267, 321, 3264, 3071, 50818], "temperature": 0.0, "avg_logprob": -0.16215838905142135, "compression_ratio": 1.7598566308243728, "no_speech_prob": 0.0025503316428512335}, {"id": 116, "seek": 63280, "start": 642.28, "end": 646.56, "text": " Now I've defined my Mandelbrot function to output a value between zero and one", "tokens": [50838, 823, 286, 600, 7642, 452, 15458, 338, 1443, 310, 2445, 281, 5598, 257, 2158, 1296, 4018, 293, 472, 51052], "temperature": 0.0, "avg_logprob": -0.16215838905142135, "compression_ratio": 1.7598566308243728, "no_speech_prob": 0.0025503316428512335}, {"id": 117, "seek": 63280, "start": 646.68, "end": 650.68, "text": " Where one is in the Mandelbrot set and anything less than one is not", "tokens": [51058, 2305, 472, 307, 294, 264, 15458, 338, 1443, 310, 992, 293, 1340, 1570, 813, 472, 307, 406, 51258], "temperature": 0.0, "avg_logprob": -0.16215838905142135, "compression_ratio": 1.7598566308243728, "no_speech_prob": 0.0025503316428512335}, {"id": 118, "seek": 63280, "start": 651.16, "end": 654.68, "text": " Under the hood, it's iteratively operating on complex numbers", "tokens": [51282, 6974, 264, 13376, 11, 309, 311, 17138, 19020, 7447, 322, 3997, 3547, 51458], "temperature": 0.0, "avg_logprob": -0.16215838905142135, "compression_ratio": 1.7598566308243728, "no_speech_prob": 0.0025503316428512335}, {"id": 119, "seek": 63280, "start": 654.68, "end": 658.1999999999999, "text": " And I added some stuff to output smooth values between zero and one", "tokens": [51458, 400, 286, 3869, 512, 1507, 281, 5598, 5508, 4190, 1296, 4018, 293, 472, 51634], "temperature": 0.0, "avg_logprob": -0.16215838905142135, "compression_ratio": 1.7598566308243728, "no_speech_prob": 0.0025503316428512335}, {"id": 120, "seek": 63280, "start": 658.1999999999999, "end": 660.4, "text": " But I'm not going to explain it much more than that", "tokens": [51634, 583, 286, 478, 406, 516, 281, 2903, 309, 709, 544, 813, 300, 51744], "temperature": 0.0, "avg_logprob": -0.16215838905142135, "compression_ratio": 1.7598566308243728, "no_speech_prob": 0.0025503316428512335}, {"id": 121, "seek": 66040, "start": 660.6, "end": 664.92, "text": " After all a neural network doesn't know the function definition either and it shouldn't matter", "tokens": [50374, 2381, 439, 257, 18161, 3209, 1177, 380, 458, 264, 2445, 7123, 2139, 293, 309, 4659, 380, 1871, 50590], "temperature": 0.0, "avg_logprob": -0.15498418467385427, "compression_ratio": 1.6851851851851851, "no_speech_prob": 0.008059701882302761}, {"id": 122, "seek": 66040, "start": 664.92, "end": 667.36, "text": " It should be able to approximate it all the same", "tokens": [50590, 467, 820, 312, 1075, 281, 30874, 309, 439, 264, 912, 50712], "temperature": 0.0, "avg_logprob": -0.15498418467385427, "compression_ratio": 1.6851851851851851, "no_speech_prob": 0.008059701882302761}, {"id": 123, "seek": 66040, "start": 667.72, "end": 672.24, "text": " The data set here is randomized points drawn uniformly from this range", "tokens": [50730, 440, 1412, 992, 510, 307, 38513, 2793, 10117, 48806, 490, 341, 3613, 50956], "temperature": 0.0, "avg_logprob": -0.15498418467385427, "compression_ratio": 1.6851851851851851, "no_speech_prob": 0.008059701882302761}, {"id": 124, "seek": 66040, "start": 672.76, "end": 679.04, "text": " Now this has actually been a pet project of mine for some time and I've made several videos trying this exact experiment over the years", "tokens": [50982, 823, 341, 575, 767, 668, 257, 3817, 1716, 295, 3892, 337, 512, 565, 293, 286, 600, 1027, 2940, 2145, 1382, 341, 1900, 5120, 670, 264, 924, 51296], "temperature": 0.0, "avg_logprob": -0.15498418467385427, "compression_ratio": 1.6851851851851851, "no_speech_prob": 0.008059701882302761}, {"id": 125, "seek": 66040, "start": 679.04, "end": 681.04, "text": " I hope you can see why it's interesting", "tokens": [51296, 286, 1454, 291, 393, 536, 983, 309, 311, 1880, 51396], "temperature": 0.0, "avg_logprob": -0.15498418467385427, "compression_ratio": 1.6851851851851851, "no_speech_prob": 0.008059701882302761}, {"id": 126, "seek": 66040, "start": 681.92, "end": 689.84, "text": " Despite being so low dimensional the Mandelbrot function is infinitely complex literally made with complex numbers and is uniquely difficult to approximate", "tokens": [51440, 11334, 885, 370, 2295, 18795, 264, 15458, 338, 1443, 310, 2445, 307, 36227, 3997, 3736, 1027, 365, 3997, 3547, 293, 307, 31474, 2252, 281, 30874, 51836], "temperature": 0.0, "avg_logprob": -0.15498418467385427, "compression_ratio": 1.6851851851851851, "no_speech_prob": 0.008059701882302761}, {"id": 127, "seek": 69040, "start": 690.4, "end": 695.64, "text": " You can just keep fitting and fitting and fitting the function and you will always come up short", "tokens": [50364, 509, 393, 445, 1066, 15669, 293, 15669, 293, 15669, 264, 2445, 293, 291, 486, 1009, 808, 493, 2099, 50626], "temperature": 0.0, "avg_logprob": -0.1454353067609999, "compression_ratio": 1.6917293233082706, "no_speech_prob": 0.0015244847163558006}, {"id": 128, "seek": 69040, "start": 696.16, "end": 700.12, "text": " You could do this with any fractal. I just use the Mandelbrot set because it's so well known", "tokens": [50652, 509, 727, 360, 341, 365, 604, 17948, 304, 13, 286, 445, 764, 264, 15458, 338, 1443, 310, 992, 570, 309, 311, 370, 731, 2570, 50850], "temperature": 0.0, "avg_logprob": -0.1454353067609999, "compression_ratio": 1.6917293233082706, "no_speech_prob": 0.0015244847163558006}, {"id": 129, "seek": 69040, "start": 702.28, "end": 708.3199999999999, "text": " So after training for a while we've made some progress, but clearly we're still missing an infinite amount of detail", "tokens": [50958, 407, 934, 3097, 337, 257, 1339, 321, 600, 1027, 512, 4205, 11, 457, 4448, 321, 434, 920, 5361, 364, 13785, 2372, 295, 2607, 51260], "temperature": 0.0, "avg_logprob": -0.1454353067609999, "compression_ratio": 1.6917293233082706, "no_speech_prob": 0.0015244847163558006}, {"id": 130, "seek": 69040, "start": 708.56, "end": 712.84, "text": " I've gotten this to look better in the past, but I'm not going to waste any more time training this network", "tokens": [51272, 286, 600, 5768, 341, 281, 574, 1101, 294, 264, 1791, 11, 457, 286, 478, 406, 516, 281, 5964, 604, 544, 565, 3097, 341, 3209, 51486], "temperature": 0.0, "avg_logprob": -0.1454353067609999, "compression_ratio": 1.6917293233082706, "no_speech_prob": 0.0015244847163558006}, {"id": 131, "seek": 69040, "start": 712.9599999999999, "end": 714.96, "text": " There are better ways of doing this", "tokens": [51492, 821, 366, 1101, 2098, 295, 884, 341, 51592], "temperature": 0.0, "avg_logprob": -0.1454353067609999, "compression_ratio": 1.6917293233082706, "no_speech_prob": 0.0015244847163558006}, {"id": 132, "seek": 71496, "start": 715.64, "end": 720.9200000000001, "text": " Are there different methods for approximating functions besides neural networks?", "tokens": [50398, 2014, 456, 819, 7150, 337, 8542, 990, 6828, 11868, 18161, 9590, 30, 50662], "temperature": 0.0, "avg_logprob": -0.27549040944952713, "compression_ratio": 1.6814516129032258, "no_speech_prob": 0.014723271131515503}, {"id": 133, "seek": 71496, "start": 721.36, "end": 727.72, "text": " Yes, many actually. There are always many ways to solve the same problem though some ways are better than others", "tokens": [50684, 1079, 11, 867, 767, 13, 821, 366, 1009, 867, 2098, 281, 5039, 264, 912, 1154, 1673, 512, 2098, 366, 1101, 813, 2357, 51002], "temperature": 0.0, "avg_logprob": -0.27549040944952713, "compression_ratio": 1.6814516129032258, "no_speech_prob": 0.014723271131515503}, {"id": 134, "seek": 71496, "start": 728.2, "end": 731.76, "text": " Another mathematical tool we can use is called the Taylor series", "tokens": [51026, 3996, 18894, 2290, 321, 393, 764, 307, 1219, 264, 12060, 2638, 51204], "temperature": 0.0, "avg_logprob": -0.27549040944952713, "compression_ratio": 1.6814516129032258, "no_speech_prob": 0.014723271131515503}, {"id": 135, "seek": 71496, "start": 732.4000000000001, "end": 736.2800000000001, "text": " This is an infinite sum of a sequence of polynomial functions", "tokens": [51236, 639, 307, 364, 13785, 2408, 295, 257, 8310, 295, 26110, 6828, 51430], "temperature": 0.0, "avg_logprob": -0.27549040944952713, "compression_ratio": 1.6814516129032258, "no_speech_prob": 0.014723271131515503}, {"id": 136, "seek": 71496, "start": 736.2800000000001, "end": 741.6800000000001, "text": " x plus x squared plus x cubed plus x to the fourth up to x to the n", "tokens": [51430, 2031, 1804, 2031, 8889, 1804, 2031, 36510, 1804, 2031, 281, 264, 6409, 493, 281, 2031, 281, 264, 297, 51700], "temperature": 0.0, "avg_logprob": -0.27549040944952713, "compression_ratio": 1.6814516129032258, "no_speech_prob": 0.014723271131515503}, {"id": 137, "seek": 71496, "start": 741.6800000000001, "end": 744.2, "text": " n is the order of the series", "tokens": [51700, 297, 307, 264, 1668, 295, 264, 2638, 51826], "temperature": 0.0, "avg_logprob": -0.27549040944952713, "compression_ratio": 1.6814516129032258, "no_speech_prob": 0.014723271131515503}, {"id": 138, "seek": 74420, "start": 744.48, "end": 749.12, "text": " Each of these terms are multiplied by their own value called a coefficient", "tokens": [50378, 6947, 295, 613, 2115, 366, 17207, 538, 641, 1065, 2158, 1219, 257, 17619, 50610], "temperature": 0.0, "avg_logprob": -0.16936555722864663, "compression_ratio": 1.7883817427385893, "no_speech_prob": 0.0021820643451064825}, {"id": 139, "seek": 74420, "start": 749.5600000000001, "end": 754.88, "text": " Each coefficient controls how much that individual term affects the overall function", "tokens": [50632, 6947, 17619, 9003, 577, 709, 300, 2609, 1433, 11807, 264, 4787, 2445, 50898], "temperature": 0.0, "avg_logprob": -0.16936555722864663, "compression_ratio": 1.7883817427385893, "no_speech_prob": 0.0021820643451064825}, {"id": 140, "seek": 74420, "start": 756.12, "end": 759.36, "text": " Given some target function by choosing the right coefficients", "tokens": [50960, 18600, 512, 3779, 2445, 538, 10875, 264, 558, 31994, 51122], "temperature": 0.0, "avg_logprob": -0.16936555722864663, "compression_ratio": 1.7883817427385893, "no_speech_prob": 0.0021820643451064825}, {"id": 141, "seek": 74420, "start": 759.36, "end": 764.1600000000001, "text": " We can approximate that target function around a specific point in this case zero", "tokens": [51122, 492, 393, 30874, 300, 3779, 2445, 926, 257, 2685, 935, 294, 341, 1389, 4018, 51362], "temperature": 0.0, "avg_logprob": -0.16936555722864663, "compression_ratio": 1.7883817427385893, "no_speech_prob": 0.0021820643451064825}, {"id": 142, "seek": 74420, "start": 764.6400000000001, "end": 772.48, "text": " The approximation gets better the more terms we add where an infinite sum of terms is exactly equivalent to the target function", "tokens": [51386, 440, 28023, 2170, 1101, 264, 544, 2115, 321, 909, 689, 364, 13785, 2408, 295, 2115, 307, 2293, 10344, 281, 264, 3779, 2445, 51778], "temperature": 0.0, "avg_logprob": -0.16936555722864663, "compression_ratio": 1.7883817427385893, "no_speech_prob": 0.0021820643451064825}, {"id": 143, "seek": 77248, "start": 773.44, "end": 775.44, "text": " If we know the target function", "tokens": [50412, 759, 321, 458, 264, 3779, 2445, 50512], "temperature": 0.0, "avg_logprob": -0.15397108518160307, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.0008425309206359088}, {"id": 144, "seek": 77248, "start": 775.44, "end": 781.84, "text": " We can actually derive the exact coefficients using a general formula to calculate each coefficient for each term", "tokens": [50512, 492, 393, 767, 28446, 264, 1900, 31994, 1228, 257, 2674, 8513, 281, 8873, 1184, 17619, 337, 1184, 1433, 50832], "temperature": 0.0, "avg_logprob": -0.15397108518160307, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.0008425309206359088}, {"id": 145, "seek": 77248, "start": 782.36, "end": 787.9200000000001, "text": " But of course in our particular problem. We don't know the function. We only have a sample of data points", "tokens": [50858, 583, 295, 1164, 294, 527, 1729, 1154, 13, 492, 500, 380, 458, 264, 2445, 13, 492, 787, 362, 257, 6889, 295, 1412, 2793, 51136], "temperature": 0.0, "avg_logprob": -0.15397108518160307, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.0008425309206359088}, {"id": 146, "seek": 77248, "start": 787.9200000000001, "end": 789.9200000000001, "text": " So how do we find the coefficients?", "tokens": [51136, 407, 577, 360, 321, 915, 264, 31994, 30, 51236], "temperature": 0.0, "avg_logprob": -0.15397108518160307, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.0008425309206359088}, {"id": 147, "seek": 77248, "start": 790.6, "end": 794.16, "text": " Well, do you see anything familiar in this weighted sum of terms?", "tokens": [51270, 1042, 11, 360, 291, 536, 1340, 4963, 294, 341, 32807, 2408, 295, 2115, 30, 51448], "temperature": 0.0, "avg_logprob": -0.15397108518160307, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.0008425309206359088}, {"id": 148, "seek": 77248, "start": 794.6800000000001, "end": 800.08, "text": " We can put all of the x to the n terms into an inputs vector and put all of the coefficients", "tokens": [51474, 492, 393, 829, 439, 295, 264, 2031, 281, 264, 297, 2115, 666, 364, 15743, 8062, 293, 829, 439, 295, 264, 31994, 51744], "temperature": 0.0, "avg_logprob": -0.15397108518160307, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.0008425309206359088}, {"id": 149, "seek": 80008, "start": 800.12, "end": 804.8000000000001, "text": " into a weights vector and then take the dot product a weighted sum", "tokens": [50366, 666, 257, 17443, 8062, 293, 550, 747, 264, 5893, 1674, 257, 32807, 2408, 50600], "temperature": 0.0, "avg_logprob": -0.18917991804039996, "compression_ratio": 1.705179282868526, "no_speech_prob": 0.0019265810260549188}, {"id": 150, "seek": 80008, "start": 805.12, "end": 809.4000000000001, "text": " The Taylor series is effectively a single layer neural network", "tokens": [50616, 440, 12060, 2638, 307, 8659, 257, 2167, 4583, 18161, 3209, 50830], "temperature": 0.0, "avg_logprob": -0.18917991804039996, "compression_ratio": 1.705179282868526, "no_speech_prob": 0.0019265810260549188}, {"id": 151, "seek": 80008, "start": 809.44, "end": 817.84, "text": " But one where we compute a bunch of additional inputs x squared x cubed and so on we'll call these additional inputs Taylor features", "tokens": [50832, 583, 472, 689, 321, 14722, 257, 3840, 295, 4497, 15743, 2031, 8889, 2031, 36510, 293, 370, 322, 321, 603, 818, 613, 4497, 15743, 12060, 4122, 51252], "temperature": 0.0, "avg_logprob": -0.18917991804039996, "compression_ratio": 1.705179282868526, "no_speech_prob": 0.0019265810260549188}, {"id": 152, "seek": 80008, "start": 818.2, "end": 822.4000000000001, "text": " We can then learn the coefficients or weights with back propagation", "tokens": [51270, 492, 393, 550, 1466, 264, 31994, 420, 17443, 365, 646, 38377, 51480], "temperature": 0.0, "avg_logprob": -0.18917991804039996, "compression_ratio": 1.705179282868526, "no_speech_prob": 0.0019265810260549188}, {"id": 153, "seek": 80008, "start": 822.4000000000001, "end": 823.32, "text": " Of course", "tokens": [51480, 2720, 1164, 51526], "temperature": 0.0, "avg_logprob": -0.18917991804039996, "compression_ratio": 1.705179282868526, "no_speech_prob": 0.0019265810260549188}, {"id": 154, "seek": 80008, "start": 823.32, "end": 828.12, "text": " We can only compute a finite number of these the partial Taylor series up to some order", "tokens": [51526, 492, 393, 787, 14722, 257, 19362, 1230, 295, 613, 264, 14641, 12060, 2638, 493, 281, 512, 1668, 51766], "temperature": 0.0, "avg_logprob": -0.18917991804039996, "compression_ratio": 1.705179282868526, "no_speech_prob": 0.0019265810260549188}, {"id": 155, "seek": 82812, "start": 828.2, "end": 830.48, "text": " But the higher the order the better it should do", "tokens": [50368, 583, 264, 2946, 264, 1668, 264, 1101, 309, 820, 360, 50482], "temperature": 0.0, "avg_logprob": -0.18691719902886283, "compression_ratio": 1.5761316872427984, "no_speech_prob": 0.002115441020578146}, {"id": 156, "seek": 82812, "start": 831.0, "end": 836.36, "text": " Let's use this simple Taylor network to learn this function using eight orders of the Taylor series", "tokens": [50508, 961, 311, 764, 341, 2199, 12060, 3209, 281, 1466, 341, 2445, 1228, 3180, 9470, 295, 264, 12060, 2638, 50776], "temperature": 0.0, "avg_logprob": -0.18691719902886283, "compression_ratio": 1.5761316872427984, "no_speech_prob": 0.002115441020578146}, {"id": 157, "seek": 82812, "start": 836.8, "end": 839.48, "text": " Here's our data set and here's the approximation", "tokens": [50798, 1692, 311, 527, 1412, 992, 293, 510, 311, 264, 28023, 50932], "temperature": 0.0, "avg_logprob": -0.18691719902886283, "compression_ratio": 1.5761316872427984, "no_speech_prob": 0.002115441020578146}, {"id": 158, "seek": 82812, "start": 845.08, "end": 847.08, "text": " That's not great", "tokens": [51212, 663, 311, 406, 869, 51312], "temperature": 0.0, "avg_logprob": -0.18691719902886283, "compression_ratio": 1.5761316872427984, "no_speech_prob": 0.002115441020578146}, {"id": 159, "seek": 82812, "start": 847.08, "end": 850.4, "text": " Polynomials are pretty touchy as their values can explode very quickly", "tokens": [51312, 6165, 9896, 298, 12356, 366, 1238, 2557, 88, 382, 641, 4190, 393, 21411, 588, 2661, 51478], "temperature": 0.0, "avg_logprob": -0.18691719902886283, "compression_ratio": 1.5761316872427984, "no_speech_prob": 0.002115441020578146}, {"id": 160, "seek": 82812, "start": 850.4, "end": 855.6800000000001, "text": " So I think back propagation has a tough time finding the right coefficients, but we can do better", "tokens": [51478, 407, 286, 519, 646, 38377, 575, 257, 4930, 565, 5006, 264, 558, 31994, 11, 457, 321, 393, 360, 1101, 51742], "temperature": 0.0, "avg_logprob": -0.18691719902886283, "compression_ratio": 1.5761316872427984, "no_speech_prob": 0.002115441020578146}, {"id": 161, "seek": 85568, "start": 856.12, "end": 862.3599999999999, "text": " Rather than using a single layer network, let's just give these Taylor features to a full multi-layered network", "tokens": [50386, 16571, 813, 1228, 257, 2167, 4583, 3209, 11, 718, 311, 445, 976, 613, 12060, 4122, 281, 257, 1577, 4825, 12, 8376, 4073, 3209, 50698], "temperature": 0.0, "avg_logprob": -0.16603354333152234, "compression_ratio": 1.5159574468085106, "no_speech_prob": 0.003593041794374585}, {"id": 162, "seek": 85568, "start": 862.56, "end": 864.56, "text": " Let's give it a shot", "tokens": [50708, 961, 311, 976, 309, 257, 3347, 50808], "temperature": 0.0, "avg_logprob": -0.16603354333152234, "compression_ratio": 1.5159574468085106, "no_speech_prob": 0.003593041794374585}, {"id": 163, "seek": 85568, "start": 875.12, "end": 877.76, "text": " It's a bit wonky, but this performs much better", "tokens": [51336, 467, 311, 257, 857, 1582, 4133, 11, 457, 341, 26213, 709, 1101, 51468], "temperature": 0.0, "avg_logprob": -0.16603354333152234, "compression_ratio": 1.5159574468085106, "no_speech_prob": 0.003593041794374585}, {"id": 164, "seek": 85568, "start": 878.04, "end": 884.4399999999999, "text": " This trick of computing additional features to feed to the network is a well-known and commonly used one", "tokens": [51482, 639, 4282, 295, 15866, 4497, 4122, 281, 3154, 281, 264, 3209, 307, 257, 731, 12, 6861, 293, 12719, 1143, 472, 51802], "temperature": 0.0, "avg_logprob": -0.16603354333152234, "compression_ratio": 1.5159574468085106, "no_speech_prob": 0.003593041794374585}, {"id": 165, "seek": 88444, "start": 885.12, "end": 891.2800000000001, "text": " Intuitively, it's like giving the network different kinds of mathematical building blocks to build a more diverse complex function", "tokens": [50398, 5681, 1983, 3413, 11, 309, 311, 411, 2902, 264, 3209, 819, 3685, 295, 18894, 2390, 8474, 281, 1322, 257, 544, 9521, 3997, 2445, 50706], "temperature": 0.0, "avg_logprob": -0.12819174061650815, "compression_ratio": 1.5076142131979695, "no_speech_prob": 0.00039202015614137053}, {"id": 166, "seek": 88444, "start": 892.96, "end": 894.96, "text": " Let's try this on an image data set", "tokens": [50790, 961, 311, 853, 341, 322, 364, 3256, 1412, 992, 50890], "temperature": 0.0, "avg_logprob": -0.12819174061650815, "compression_ratio": 1.5076142131979695, "no_speech_prob": 0.00039202015614137053}, {"id": 167, "seek": 88444, "start": 905.0400000000001, "end": 911.4000000000001, "text": " Well, that's pretty good it's learning, but it doesn't seem to work any better than just using a good old-fashioned neural network", "tokens": [51394, 1042, 11, 300, 311, 1238, 665, 309, 311, 2539, 11, 457, 309, 1177, 380, 1643, 281, 589, 604, 1101, 813, 445, 1228, 257, 665, 1331, 12, 37998, 18161, 3209, 51712], "temperature": 0.0, "avg_logprob": -0.12819174061650815, "compression_ratio": 1.5076142131979695, "no_speech_prob": 0.00039202015614137053}, {"id": 168, "seek": 91140, "start": 911.84, "end": 916.52, "text": " The Taylor series is made to approximate a function around a single given point", "tokens": [50386, 440, 12060, 2638, 307, 1027, 281, 30874, 257, 2445, 926, 257, 2167, 2212, 935, 50620], "temperature": 0.0, "avg_logprob": -0.1886837709517706, "compression_ratio": 1.780612244897959, "no_speech_prob": 0.002182219410315156}, {"id": 169, "seek": 91140, "start": 916.68, "end": 923.4399999999999, "text": " While we want to approximate within a given range of points a better tool for this is the Fourier series", "tokens": [50628, 3987, 321, 528, 281, 30874, 1951, 257, 2212, 3613, 295, 2793, 257, 1101, 2290, 337, 341, 307, 264, 36810, 2638, 50966], "temperature": 0.0, "avg_logprob": -0.1886837709517706, "compression_ratio": 1.780612244897959, "no_speech_prob": 0.002182219410315156}, {"id": 170, "seek": 91140, "start": 924.52, "end": 927.9599999999999, "text": " The Fourier series acts very much like the Taylor series", "tokens": [51020, 440, 36810, 2638, 10672, 588, 709, 411, 264, 12060, 2638, 51192], "temperature": 0.0, "avg_logprob": -0.1886837709517706, "compression_ratio": 1.780612244897959, "no_speech_prob": 0.002182219410315156}, {"id": 171, "seek": 91140, "start": 927.9599999999999, "end": 930.72, "text": " But is an infinite sum of sines and cosines", "tokens": [51192, 583, 307, 364, 13785, 2408, 295, 262, 1652, 293, 3792, 1652, 51330], "temperature": 0.0, "avg_logprob": -0.1886837709517706, "compression_ratio": 1.780612244897959, "no_speech_prob": 0.002182219410315156}, {"id": 172, "seek": 91140, "start": 931.1999999999999, "end": 936.68, "text": " Each order n of the series is made up of sine nx plus cosine nx", "tokens": [51354, 6947, 1668, 297, 295, 264, 2638, 307, 1027, 493, 295, 18609, 297, 87, 1804, 23565, 297, 87, 51628], "temperature": 0.0, "avg_logprob": -0.1886837709517706, "compression_ratio": 1.780612244897959, "no_speech_prob": 0.002182219410315156}, {"id": 173, "seek": 93668, "start": 937.1999999999999, "end": 944.64, "text": " Each sine and cosine is multiplied by its own coefficient again controlling how much that term affects the overall function", "tokens": [50390, 6947, 18609, 293, 23565, 307, 17207, 538, 1080, 1065, 17619, 797, 14905, 577, 709, 300, 1433, 11807, 264, 4787, 2445, 50762], "temperature": 0.0, "avg_logprob": -0.2725929904293704, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.007812649011611938}, {"id": 174, "seek": 93668, "start": 944.88, "end": 953.56, "text": " N, these inner multiplier values, control the frequency of each wave function. The higher the frequency, the more hills the curve has", "tokens": [50774, 426, 11, 613, 7284, 44106, 4190, 11, 1969, 264, 7893, 295, 1184, 5772, 2445, 13, 440, 2946, 264, 7893, 11, 264, 544, 21379, 264, 7605, 575, 51208], "temperature": 0.0, "avg_logprob": -0.2725929904293704, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.007812649011611938}, {"id": 175, "seek": 93668, "start": 954.4399999999999, "end": 962.64, "text": " By combining weighted waves of different frequencies, we can approximate a function within the range of two pi, one full period", "tokens": [51252, 3146, 21928, 32807, 9417, 295, 819, 20250, 11, 321, 393, 30874, 257, 2445, 1951, 264, 3613, 295, 732, 3895, 11, 472, 1577, 2896, 51662], "temperature": 0.0, "avg_logprob": -0.2725929904293704, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.007812649011611938}, {"id": 176, "seek": 96264, "start": 963.24, "end": 970.12, "text": " Again, if we know the function, we can compute the weights and even if we don't we could use something called the discrete Fourier", "tokens": [50394, 3764, 11, 498, 321, 458, 264, 2445, 11, 321, 393, 14722, 264, 17443, 293, 754, 498, 321, 500, 380, 321, 727, 764, 746, 1219, 264, 27706, 36810, 50738], "temperature": 0.0, "avg_logprob": -0.18823755704439604, "compression_ratio": 1.6045627376425855, "no_speech_prob": 0.024040549993515015}, {"id": 177, "seek": 96264, "start": 970.36, "end": 973.92, "text": " Transform, which is really cool, but we're not dealing with it in this video. I", "tokens": [50750, 27938, 11, 597, 307, 534, 1627, 11, 457, 321, 434, 406, 6260, 365, 309, 294, 341, 960, 13, 286, 50928], "temperature": 0.0, "avg_logprob": -0.18823755704439604, "compression_ratio": 1.6045627376425855, "no_speech_prob": 0.024040549993515015}, {"id": 178, "seek": 96264, "start": 974.56, "end": 978.4399999999999, "text": " Hope you see where I'm going with this. Let's just jump ahead and do what we did before", "tokens": [50960, 6483, 291, 536, 689, 286, 478, 516, 365, 341, 13, 961, 311, 445, 3012, 2286, 293, 360, 437, 321, 630, 949, 51154], "temperature": 0.0, "avg_logprob": -0.18823755704439604, "compression_ratio": 1.6045627376425855, "no_speech_prob": 0.024040549993515015}, {"id": 179, "seek": 96264, "start": 979.04, "end": 985.4399999999999, "text": " Compute a bunch of terms of the Fourier series and feed them to a multi-layer network as additional inputs", "tokens": [51184, 6620, 1169, 257, 3840, 295, 2115, 295, 264, 36810, 2638, 293, 3154, 552, 281, 257, 4825, 12, 8376, 260, 3209, 382, 4497, 15743, 51504], "temperature": 0.0, "avg_logprob": -0.18823755704439604, "compression_ratio": 1.6045627376425855, "no_speech_prob": 0.024040549993515015}, {"id": 180, "seek": 96264, "start": 985.8, "end": 987.8, "text": " Fourier features", "tokens": [51522, 36810, 4122, 51622], "temperature": 0.0, "avg_logprob": -0.18823755704439604, "compression_ratio": 1.6045627376425855, "no_speech_prob": 0.024040549993515015}, {"id": 181, "seek": 98780, "start": 987.8, "end": 993.64, "text": " Note that we have twice as many Fourier features as Taylor features since we have a sine and cosine", "tokens": [50364, 11633, 300, 321, 362, 6091, 382, 867, 36810, 4122, 382, 12060, 4122, 1670, 321, 362, 257, 18609, 293, 23565, 50656], "temperature": 0.0, "avg_logprob": -0.18083179828732512, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.0037644486874341965}, {"id": 182, "seek": 98780, "start": 994.28, "end": 996.28, "text": " Let's try it on this data set", "tokens": [50688, 961, 311, 853, 309, 322, 341, 1412, 992, 50788], "temperature": 0.0, "avg_logprob": -0.18083179828732512, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.0037644486874341965}, {"id": 183, "seek": 98780, "start": 998.68, "end": 1001.9599999999999, "text": " This works pretty well. It's a little wavy, but not too shabby", "tokens": [50908, 639, 1985, 1238, 731, 13, 467, 311, 257, 707, 261, 15498, 11, 457, 406, 886, 402, 455, 2322, 51072], "temperature": 0.0, "avg_logprob": -0.18083179828732512, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.0037644486874341965}, {"id": 184, "seek": 98780, "start": 1002.3599999999999, "end": 1008.52, "text": " Note that for this to work we need to normalize our inputs between negative pi and positive pi one full period", "tokens": [51092, 11633, 300, 337, 341, 281, 589, 321, 643, 281, 2710, 1125, 527, 15743, 1296, 3671, 3895, 293, 3353, 3895, 472, 1577, 2896, 51400], "temperature": 0.0, "avg_logprob": -0.18083179828732512, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.0037644486874341965}, {"id": 185, "seek": 98780, "start": 1009.12, "end": 1011.12, "text": " Let's try this on an image", "tokens": [51430, 961, 311, 853, 341, 322, 364, 3256, 51530], "temperature": 0.0, "avg_logprob": -0.18083179828732512, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.0037644486874341965}, {"id": 186, "seek": 101112, "start": 1011.28, "end": 1017.76, "text": " That looks strange at first almost like static coming into focus, but it works and it works really well", "tokens": [50372, 663, 1542, 5861, 412, 700, 1920, 411, 13437, 1348, 666, 1879, 11, 457, 309, 1985, 293, 309, 1985, 534, 731, 50696], "temperature": 0.0, "avg_logprob": -0.15898655808490256, "compression_ratio": 1.7131474103585658, "no_speech_prob": 0.0015976126305758953}, {"id": 187, "seek": 101112, "start": 1018.28, "end": 1022.24, "text": " If we compare it to networks of the same size trained for the same amount of time", "tokens": [50722, 759, 321, 6794, 309, 281, 9590, 295, 264, 912, 2744, 8895, 337, 264, 912, 2372, 295, 565, 50920], "temperature": 0.0, "avg_logprob": -0.15898655808490256, "compression_ratio": 1.7131474103585658, "no_speech_prob": 0.0015976126305758953}, {"id": 188, "seek": 101112, "start": 1022.24, "end": 1029.48, "text": " We can see the Fourier network learns much better and faster than the network without Fourier features or the one with Taylor features", "tokens": [50920, 492, 393, 536, 264, 36810, 3209, 27152, 709, 1101, 293, 4663, 813, 264, 3209, 1553, 36810, 4122, 420, 264, 472, 365, 12060, 4122, 51282], "temperature": 0.0, "avg_logprob": -0.15898655808490256, "compression_ratio": 1.7131474103585658, "no_speech_prob": 0.0015976126305758953}, {"id": 189, "seek": 101112, "start": 1029.64, "end": 1034.6, "text": " Just look at the level of detail in those curly locks. You can hardly tell the difference from the real image", "tokens": [51290, 1449, 574, 412, 264, 1496, 295, 2607, 294, 729, 32066, 20703, 13, 509, 393, 13572, 980, 264, 2649, 490, 264, 957, 3256, 51538], "temperature": 0.0, "avg_logprob": -0.15898655808490256, "compression_ratio": 1.7131474103585658, "no_speech_prob": 0.0015976126305758953}, {"id": 190, "seek": 103460, "start": 1035.04, "end": 1042.8799999999999, "text": " Now I've glossed over a very important detail the example Fourier series", "tokens": [50386, 823, 286, 600, 19574, 292, 670, 257, 588, 1021, 2607, 264, 1365, 36810, 2638, 50778], "temperature": 0.0, "avg_logprob": -0.19801328240371333, "compression_ratio": 1.63, "no_speech_prob": 0.0032725625205785036}, {"id": 191, "seek": 103460, "start": 1042.8799999999999, "end": 1048.9199999999998, "text": " I gave had one input this function has two inputs to handle this properly", "tokens": [50778, 286, 2729, 632, 472, 4846, 341, 2445, 575, 732, 15743, 281, 4813, 341, 6108, 51080], "temperature": 0.0, "avg_logprob": -0.19801328240371333, "compression_ratio": 1.63, "no_speech_prob": 0.0032725625205785036}, {"id": 192, "seek": 103460, "start": 1048.9599999999998, "end": 1054.9599999999998, "text": " We have to use the two-dimensional Fourier series one that takes an input of X and Y", "tokens": [51082, 492, 362, 281, 764, 264, 732, 12, 18759, 36810, 2638, 472, 300, 2516, 364, 4846, 295, 1783, 293, 398, 51382], "temperature": 0.0, "avg_logprob": -0.19801328240371333, "compression_ratio": 1.63, "no_speech_prob": 0.0032725625205785036}, {"id": 193, "seek": 103460, "start": 1055.28, "end": 1057.28, "text": " What do we do with that extra Y?", "tokens": [51398, 708, 360, 321, 360, 365, 300, 2857, 398, 30, 51498], "temperature": 0.0, "avg_logprob": -0.19801328240371333, "compression_ratio": 1.63, "no_speech_prob": 0.0032725625205785036}, {"id": 194, "seek": 103460, "start": 1058.0, "end": 1062.1999999999998, "text": " Here are the terms for the 2d Fourier series up to two orders", "tokens": [51534, 1692, 366, 264, 2115, 337, 264, 568, 67, 36810, 2638, 493, 281, 732, 9470, 51744], "temperature": 0.0, "avg_logprob": -0.19801328240371333, "compression_ratio": 1.63, "no_speech_prob": 0.0032725625205785036}, {"id": 195, "seek": 106220, "start": 1062.56, "end": 1069.6000000000001, "text": " We are now multiplying the X and Y terms together and end up with sine X cosine Y sine X sine Y", "tokens": [50382, 492, 366, 586, 30955, 264, 1783, 293, 398, 2115, 1214, 293, 917, 493, 365, 18609, 1783, 23565, 398, 18609, 1783, 18609, 398, 50734], "temperature": 0.0, "avg_logprob": -0.1789749969135631, "compression_ratio": 1.8082901554404145, "no_speech_prob": 0.018256008625030518}, {"id": 196, "seek": 106220, "start": 1069.76, "end": 1076.52, "text": " cosine X cosine Y and cosine X sine Y every combination of sine and cosine and Y and X", "tokens": [50742, 23565, 1783, 23565, 398, 293, 23565, 1783, 18609, 398, 633, 6562, 295, 18609, 293, 23565, 293, 398, 293, 1783, 51080], "temperature": 0.0, "avg_logprob": -0.1789749969135631, "compression_ratio": 1.8082901554404145, "no_speech_prob": 0.018256008625030518}, {"id": 197, "seek": 106220, "start": 1077.3600000000001, "end": 1082.52, "text": " Not only that we also have every combination of frequencies that inner multiplier", "tokens": [51122, 1726, 787, 300, 321, 611, 362, 633, 6562, 295, 20250, 300, 7284, 44106, 51380], "temperature": 0.0, "avg_logprob": -0.1789749969135631, "compression_ratio": 1.8082901554404145, "no_speech_prob": 0.018256008625030518}, {"id": 198, "seek": 106220, "start": 1082.88, "end": 1087.32, "text": " So sine 2x times cosine 1y and so on and so forth", "tokens": [51398, 407, 18609, 568, 87, 1413, 23565, 502, 88, 293, 370, 322, 293, 370, 5220, 51620], "temperature": 0.0, "avg_logprob": -0.1789749969135631, "compression_ratio": 1.8082901554404145, "no_speech_prob": 0.018256008625030518}, {"id": 199, "seek": 106220, "start": 1087.88, "end": 1090.52, "text": " Here's up to three orders now four", "tokens": [51648, 1692, 311, 493, 281, 1045, 9470, 586, 1451, 51780], "temperature": 0.0, "avg_logprob": -0.1789749969135631, "compression_ratio": 1.8082901554404145, "no_speech_prob": 0.018256008625030518}, {"id": 200, "seek": 109052, "start": 1091.16, "end": 1093.16, "text": " That is a lot of terms", "tokens": [50396, 663, 307, 257, 688, 295, 2115, 50496], "temperature": 0.0, "avg_logprob": -0.18692330391176284, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.002672117669135332}, {"id": 201, "seek": 109052, "start": 1093.48, "end": 1096.68, "text": " we have to calculate this many terms per order and", "tokens": [50512, 321, 362, 281, 8873, 341, 867, 2115, 680, 1668, 293, 50672], "temperature": 0.0, "avg_logprob": -0.18692330391176284, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.002672117669135332}, {"id": 202, "seek": 109052, "start": 1096.84, "end": 1102.8, "text": " This number grows very quickly as we increase the order much faster than it would for the 1d series and", "tokens": [50680, 639, 1230, 13156, 588, 2661, 382, 321, 3488, 264, 1668, 709, 4663, 813, 309, 576, 337, 264, 502, 67, 2638, 293, 50978], "temperature": 0.0, "avg_logprob": -0.18692330391176284, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.002672117669135332}, {"id": 203, "seek": 109052, "start": 1103.08, "end": 1109.16, "text": " This is just for a baby 2d input for a 3d 4d 5d input forget it", "tokens": [50992, 639, 307, 445, 337, 257, 3186, 568, 67, 4846, 337, 257, 805, 67, 1017, 67, 1025, 67, 4846, 2870, 309, 51296], "temperature": 0.0, "avg_logprob": -0.18692330391176284, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.002672117669135332}, {"id": 204, "seek": 109052, "start": 1109.16, "end": 1113.04, "text": " The number of computations needed for higher dimensional Fourier series", "tokens": [51296, 440, 1230, 295, 2807, 763, 2978, 337, 2946, 18795, 36810, 2638, 51490], "temperature": 0.0, "avg_logprob": -0.18692330391176284, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.002672117669135332}, {"id": 205, "seek": 109052, "start": 1113.44, "end": 1116.8799999999999, "text": " Explodes as we increase the dimensionality of our inputs", "tokens": [51510, 12514, 4789, 382, 321, 3488, 264, 10139, 1860, 295, 527, 15743, 51682], "temperature": 0.0, "avg_logprob": -0.18692330391176284, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.002672117669135332}, {"id": 206, "seek": 111688, "start": 1117.3600000000001, "end": 1120.64, "text": " We have encountered the curse of dimensionality", "tokens": [50388, 492, 362, 20381, 264, 17139, 295, 10139, 1860, 50552], "temperature": 0.0, "avg_logprob": -0.22543213166386247, "compression_ratio": 1.7698744769874477, "no_speech_prob": 0.005729039199650288}, {"id": 207, "seek": 111688, "start": 1121.0400000000002, "end": 1126.92, "text": " Lots of methods of function approximation and machine learning break down as dimensionality grows", "tokens": [50572, 15908, 295, 7150, 295, 2445, 28023, 293, 3479, 2539, 1821, 760, 382, 10139, 1860, 13156, 50866], "temperature": 0.0, "avg_logprob": -0.22543213166386247, "compression_ratio": 1.7698744769874477, "no_speech_prob": 0.005729039199650288}, {"id": 208, "seek": 111688, "start": 1127.44, "end": 1131.0, "text": " These methods might work well on low dimensional problems, but they become", "tokens": [50892, 1981, 7150, 1062, 589, 731, 322, 2295, 18795, 2740, 11, 457, 436, 1813, 51070], "temperature": 0.0, "avg_logprob": -0.22543213166386247, "compression_ratio": 1.7698744769874477, "no_speech_prob": 0.005729039199650288}, {"id": 209, "seek": 111688, "start": 1131.5600000000002, "end": 1135.8400000000001, "text": " computationally impractical or impossible for higher dimensional problems", "tokens": [51098, 24903, 379, 704, 1897, 804, 420, 6243, 337, 2946, 18795, 2740, 51312], "temperature": 0.0, "avg_logprob": -0.22543213166386247, "compression_ratio": 1.7698744769874477, "no_speech_prob": 0.005729039199650288}, {"id": 210, "seek": 111688, "start": 1136.5200000000002, "end": 1140.44, "text": " Neural networks by contrast handle the dimensionality problem very well", "tokens": [51346, 1734, 1807, 9590, 538, 8712, 4813, 264, 10139, 1860, 1154, 588, 731, 51542], "temperature": 0.0, "avg_logprob": -0.22543213166386247, "compression_ratio": 1.7698744769874477, "no_speech_prob": 0.005729039199650288}, {"id": 211, "seek": 111688, "start": 1141.0800000000002, "end": 1144.0400000000002, "text": " Comparatively it is trivial to add additional dimensions", "tokens": [51574, 2432, 2181, 19020, 309, 307, 26703, 281, 909, 4497, 12819, 51722], "temperature": 0.0, "avg_logprob": -0.22543213166386247, "compression_ratio": 1.7698744769874477, "no_speech_prob": 0.005729039199650288}, {"id": 212, "seek": 114404, "start": 1144.96, "end": 1148.1599999999999, "text": " But we don't need to use the 2d Fourier series", "tokens": [50410, 583, 321, 500, 380, 643, 281, 764, 264, 568, 67, 36810, 2638, 50570], "temperature": 0.0, "avg_logprob": -0.13565457522214114, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.0023963518906384706}, {"id": 213, "seek": 114404, "start": 1148.24, "end": 1155.1599999999999, "text": " We can just treat each input as its own independent variable and compute 1d Fourier features for each input", "tokens": [50574, 492, 393, 445, 2387, 1184, 4846, 382, 1080, 1065, 6695, 7006, 293, 14722, 502, 67, 36810, 4122, 337, 1184, 4846, 50920], "temperature": 0.0, "avg_logprob": -0.13565457522214114, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.0023963518906384706}, {"id": 214, "seek": 114404, "start": 1155.56, "end": 1159.36, "text": " This is less theoretically sound but much more practical to compute", "tokens": [50940, 639, 307, 1570, 29400, 1626, 457, 709, 544, 8496, 281, 14722, 51130], "temperature": 0.0, "avg_logprob": -0.13565457522214114, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.0023963518906384706}, {"id": 215, "seek": 114404, "start": 1159.44, "end": 1165.72, "text": " It's still a lot of additional features, but it's manageable and it's worth it. It drastically improves performance", "tokens": [51134, 467, 311, 920, 257, 688, 295, 4497, 4122, 11, 457, 309, 311, 38798, 293, 309, 311, 3163, 309, 13, 467, 29673, 24771, 3389, 51448], "temperature": 0.0, "avg_logprob": -0.13565457522214114, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.0023963518906384706}, {"id": 216, "seek": 114404, "start": 1165.8, "end": 1168.56, "text": " That's what I've been using to get these image approximations", "tokens": [51452, 663, 311, 437, 286, 600, 668, 1228, 281, 483, 613, 3256, 8542, 763, 51590], "temperature": 0.0, "avg_logprob": -0.13565457522214114, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.0023963518906384706}, {"id": 217, "seek": 116856, "start": 1169.1599999999999, "end": 1176.2, "text": " It really shouldn't be surprising that Fourier features help so much here since the Fourier series and transform is used to compress", "tokens": [50394, 467, 534, 4659, 380, 312, 8830, 300, 36810, 4122, 854, 370, 709, 510, 1670, 264, 36810, 2638, 293, 4088, 307, 1143, 281, 14778, 50746], "temperature": 0.0, "avg_logprob": -0.15916695064968533, "compression_ratio": 1.5482625482625483, "no_speech_prob": 0.0065882462076842785}, {"id": 218, "seek": 116856, "start": 1176.24, "end": 1183.08, "text": " Images, it's how the JPEG compression algorithm works turns out lots of things can be represented as combinations of waves", "tokens": [50748, 4331, 1660, 11, 309, 311, 577, 264, 508, 5208, 38, 19355, 9284, 1985, 4523, 484, 3195, 295, 721, 393, 312, 10379, 382, 21267, 295, 9417, 51090], "temperature": 0.0, "avg_logprob": -0.15916695064968533, "compression_ratio": 1.5482625482625483, "no_speech_prob": 0.0065882462076842785}, {"id": 219, "seek": 116856, "start": 1183.8, "end": 1186.48, "text": " So let's apply it to our Mandelbrot data set", "tokens": [51126, 407, 718, 311, 3079, 309, 281, 527, 15458, 338, 1443, 310, 1412, 992, 51260], "temperature": 0.0, "avg_logprob": -0.15916695064968533, "compression_ratio": 1.5482625482625483, "no_speech_prob": 0.0065882462076842785}, {"id": 220, "seek": 116856, "start": 1187.08, "end": 1192.04, "text": " Again, it looks a little weird, but it is definitely capturing more detail than the previous attempt", "tokens": [51290, 3764, 11, 309, 1542, 257, 707, 3657, 11, 457, 309, 307, 2138, 23384, 544, 2607, 813, 264, 3894, 5217, 51538], "temperature": 0.0, "avg_logprob": -0.15916695064968533, "compression_ratio": 1.5482625482625483, "no_speech_prob": 0.0065882462076842785}, {"id": 221, "seek": 119204, "start": 1192.32, "end": 1200.0, "text": " Well, that's fun to watch, but let's evaluate for comparison here is the real Mandelbrot set", "tokens": [50378, 1042, 11, 300, 311, 1019, 281, 1159, 11, 457, 718, 311, 13059, 337, 9660, 510, 307, 264, 957, 15458, 338, 1443, 310, 992, 50762], "temperature": 0.0, "avg_logprob": -0.1835862636566162, "compression_ratio": 1.4873096446700507, "no_speech_prob": 0.010984758846461773}, {"id": 222, "seek": 119204, "start": 1201.68, "end": 1208.32, "text": " Actually, no, this is not the real Mandelbrot set. It is an approximation from our Fourier network", "tokens": [50846, 5135, 11, 572, 11, 341, 307, 406, 264, 957, 15458, 338, 1443, 310, 992, 13, 467, 307, 364, 28023, 490, 527, 36810, 3209, 51178], "temperature": 0.0, "avg_logprob": -0.1835862636566162, "compression_ratio": 1.4873096446700507, "no_speech_prob": 0.010984758846461773}, {"id": 223, "seek": 119204, "start": 1209.52, "end": 1213.32, "text": " You might be able to tell if you're on a 4k monitor, especially when I zoom in", "tokens": [51238, 509, 1062, 312, 1075, 281, 980, 498, 291, 434, 322, 257, 1017, 74, 6002, 11, 2318, 562, 286, 8863, 294, 51428], "temperature": 0.0, "avg_logprob": -0.1835862636566162, "compression_ratio": 1.4873096446700507, "no_speech_prob": 0.010984758846461773}, {"id": 224, "seek": 119204, "start": 1213.72, "end": 1215.72, "text": " This network was given", "tokens": [51448, 639, 3209, 390, 2212, 51548], "temperature": 0.0, "avg_logprob": -0.1835862636566162, "compression_ratio": 1.4873096446700507, "no_speech_prob": 0.010984758846461773}, {"id": 225, "seek": 121572, "start": 1215.84, "end": 1218.56, "text": " 56 orders of the Fourier series, which means a", "tokens": [50370, 19687, 9470, 295, 264, 36810, 2638, 11, 597, 1355, 257, 50506], "temperature": 0.0, "avg_logprob": -0.20579122885679588, "compression_ratio": 1.5462555066079295, "no_speech_prob": 0.009553834795951843}, {"id": 226, "seek": 121572, "start": 1219.28, "end": 1224.28, "text": " 1024 extra Fourier features being fed to the network and the network itself is pretty damn big", "tokens": [50542, 1266, 7911, 2857, 36810, 4122, 885, 4636, 281, 264, 3209, 293, 264, 3209, 2564, 307, 1238, 8151, 955, 50792], "temperature": 0.0, "avg_logprob": -0.20579122885679588, "compression_ratio": 1.5462555066079295, "no_speech_prob": 0.009553834795951843}, {"id": 227, "seek": 121572, "start": 1225.48, "end": 1232.76, "text": " When we really zoom in it becomes very obvious that this is not the real deal. It is still missing an infinite amount of detail", "tokens": [50852, 1133, 321, 534, 8863, 294, 309, 3643, 588, 6322, 300, 341, 307, 406, 264, 957, 2028, 13, 467, 307, 920, 5361, 364, 13785, 2372, 295, 2607, 51216], "temperature": 0.0, "avg_logprob": -0.20579122885679588, "compression_ratio": 1.5462555066079295, "no_speech_prob": 0.009553834795951843}, {"id": 228, "seek": 121572, "start": 1240.44, "end": 1244.76, "text": " Nonetheless, I am blown away by the quality of the Fourier networks approximation", "tokens": [51600, 45437, 11, 286, 669, 16479, 1314, 538, 264, 3125, 295, 264, 36810, 9590, 28023, 51816], "temperature": 0.0, "avg_logprob": -0.20579122885679588, "compression_ratio": 1.5462555066079295, "no_speech_prob": 0.009553834795951843}, {"id": 229, "seek": 124476, "start": 1245.16, "end": 1251.0, "text": " Fourier features are of course not my idea. They come from this paper that was suggested by a reddit commenter", "tokens": [50384, 36810, 4122, 366, 295, 1164, 406, 452, 1558, 13, 814, 808, 490, 341, 3035, 300, 390, 10945, 538, 257, 2182, 17975, 2871, 260, 50676], "temperature": 0.0, "avg_logprob": -0.18147706513357634, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.002980299759656191}, {"id": 230, "seek": 124476, "start": 1251.0, "end": 1253.0, "text": " Who I think actually may have been a co-author?", "tokens": [50676, 2102, 286, 519, 767, 815, 362, 668, 257, 598, 12, 34224, 30, 50776], "temperature": 0.0, "avg_logprob": -0.18147706513357634, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.002980299759656191}, {"id": 231, "seek": 124476, "start": 1253.36, "end": 1255.36, "text": " I'm still missing details from this", "tokens": [50794, 286, 478, 920, 5361, 4365, 490, 341, 50894], "temperature": 0.0, "avg_logprob": -0.18147706513357634, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.002980299759656191}, {"id": 232, "seek": 124476, "start": 1255.8, "end": 1263.04, "text": " Adding Fourier features was one of if not the most effective improvements to the approximation I've applied and it was really surprising", "tokens": [50916, 31204, 36810, 4122, 390, 472, 295, 498, 406, 264, 881, 4942, 13797, 281, 264, 28023, 286, 600, 6456, 293, 309, 390, 534, 8830, 51278], "temperature": 0.0, "avg_logprob": -0.18147706513357634, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.002980299759656191}, {"id": 233, "seek": 124476, "start": 1263.6, "end": 1266.48, "text": " To return to the tricky spiral shell surface", "tokens": [51306, 1407, 2736, 281, 264, 12414, 25165, 8720, 3753, 51450], "temperature": 0.0, "avg_logprob": -0.18147706513357634, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.002980299759656191}, {"id": 234, "seek": 124476, "start": 1266.52, "end": 1270.44, "text": " We can see that our Fourier network does way better than our previous attempt", "tokens": [51452, 492, 393, 536, 300, 527, 36810, 3209, 775, 636, 1101, 813, 527, 3894, 5217, 51648], "temperature": 0.0, "avg_logprob": -0.18147706513357634, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.002980299759656191}, {"id": 235, "seek": 127044, "start": 1270.6000000000001, "end": 1275.6000000000001, "text": " Although the target function is literally defined with sines and cosines, so of course it will do well", "tokens": [50372, 5780, 264, 3779, 2445, 307, 3736, 7642, 365, 262, 1652, 293, 3792, 1652, 11, 370, 295, 1164, 309, 486, 360, 731, 50622], "temperature": 0.0, "avg_logprob": -0.1649672395439558, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.002714467002078891}, {"id": 236, "seek": 127044, "start": 1277.8400000000001, "end": 1285.56, "text": " So if Fourier features help so much why don't we use them more often they hardly ever show up in real-world neural networks", "tokens": [50734, 407, 498, 36810, 4122, 854, 370, 709, 983, 500, 380, 321, 764, 552, 544, 2049, 436, 13572, 1562, 855, 493, 294, 957, 12, 13217, 18161, 9590, 51120], "temperature": 0.0, "avg_logprob": -0.1649672395439558, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.002714467002078891}, {"id": 237, "seek": 127044, "start": 1286.0, "end": 1290.92, "text": " To state the obvious all of the approximations in this video so far are completely useless", "tokens": [51142, 1407, 1785, 264, 6322, 439, 295, 264, 8542, 763, 294, 341, 960, 370, 1400, 366, 2584, 14115, 51388], "temperature": 0.0, "avg_logprob": -0.1649672395439558, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.002714467002078891}, {"id": 238, "seek": 127044, "start": 1291.28, "end": 1296.24, "text": " We know the functions and the images. We don't need a massive neural network to approximate them", "tokens": [51406, 492, 458, 264, 6828, 293, 264, 5267, 13, 492, 500, 380, 643, 257, 5994, 18161, 3209, 281, 30874, 552, 51654], "temperature": 0.0, "avg_logprob": -0.1649672395439558, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.002714467002078891}, {"id": 239, "seek": 129624, "start": 1296.92, "end": 1302.68, "text": " But I hope that you can see that we're not studying the functions. We're studying the methods of approximation", "tokens": [50398, 583, 286, 1454, 300, 291, 393, 536, 300, 321, 434, 406, 7601, 264, 6828, 13, 492, 434, 7601, 264, 7150, 295, 28023, 50686], "temperature": 0.0, "avg_logprob": -0.15829567332844158, "compression_ratio": 1.6653061224489796, "no_speech_prob": 0.008983367122709751}, {"id": 240, "seek": 129624, "start": 1303.52, "end": 1306.1200000000001, "text": " Because these toy problems are so low dimensional", "tokens": [50728, 1436, 613, 12058, 2740, 366, 370, 2295, 18795, 50858], "temperature": 0.0, "avg_logprob": -0.15829567332844158, "compression_ratio": 1.6653061224489796, "no_speech_prob": 0.008983367122709751}, {"id": 241, "seek": 129624, "start": 1306.1200000000001, "end": 1311.92, "text": " We can visualize them and hopefully gain insights that will carry over into higher dimensional problems", "tokens": [50858, 492, 393, 23273, 552, 293, 4696, 6052, 14310, 300, 486, 3985, 670, 666, 2946, 18795, 2740, 51148], "temperature": 0.0, "avg_logprob": -0.15829567332844158, "compression_ratio": 1.6653061224489796, "no_speech_prob": 0.008983367122709751}, {"id": 242, "seek": 129624, "start": 1312.28, "end": 1316.24, "text": " So let's bring it back to earth with a real problem that uses real data", "tokens": [51166, 407, 718, 311, 1565, 309, 646, 281, 4120, 365, 257, 957, 1154, 300, 4960, 957, 1412, 51364], "temperature": 0.0, "avg_logprob": -0.15829567332844158, "compression_ratio": 1.6653061224489796, "no_speech_prob": 0.008983367122709751}, {"id": 243, "seek": 129624, "start": 1317.56, "end": 1322.76, "text": " This is the MNIST dataset images of hand-drawn numbers and their labels", "tokens": [51430, 639, 307, 264, 376, 45, 19756, 28872, 5267, 295, 1011, 12, 67, 29603, 3547, 293, 641, 16949, 51690], "temperature": 0.0, "avg_logprob": -0.15829567332844158, "compression_ratio": 1.6653061224489796, "no_speech_prob": 0.008983367122709751}, {"id": 244, "seek": 132276, "start": 1323.32, "end": 1329.64, "text": " Our input is an entire image flattened out into a vector and our output is a vector of 10 values", "tokens": [50392, 2621, 4846, 307, 364, 2302, 3256, 24183, 292, 484, 666, 257, 8062, 293, 527, 5598, 307, 257, 8062, 295, 1266, 4190, 50708], "temperature": 0.0, "avg_logprob": -0.18995834258665523, "compression_ratio": 1.5990990990990992, "no_speech_prob": 0.0060020736418664455}, {"id": 245, "seek": 132276, "start": 1329.84, "end": 1333.76, "text": " Representing a label as to which number 0 through 9 is in the image", "tokens": [50718, 19945, 278, 257, 7645, 382, 281, 597, 1230, 1958, 807, 1722, 307, 294, 264, 3256, 50914], "temperature": 0.0, "avg_logprob": -0.18995834258665523, "compression_ratio": 1.5990990990990992, "no_speech_prob": 0.0060020736418664455}, {"id": 246, "seek": 132276, "start": 1334.36, "end": 1341.56, "text": " There is some unknown function that describes the relationship between an image and its label and that's what we're trying to discover", "tokens": [50944, 821, 307, 512, 9841, 2445, 300, 15626, 264, 2480, 1296, 364, 3256, 293, 1080, 7645, 293, 300, 311, 437, 321, 434, 1382, 281, 4411, 51304], "temperature": 0.0, "avg_logprob": -0.18995834258665523, "compression_ratio": 1.5990990990990992, "no_speech_prob": 0.0060020736418664455}, {"id": 247, "seek": 132276, "start": 1342.56, "end": 1346.48, "text": " Even for tiny 28 by 28 black and white images that is a", "tokens": [51354, 2754, 337, 5870, 7562, 538, 7562, 2211, 293, 2418, 5267, 300, 307, 257, 51550], "temperature": 0.0, "avg_logprob": -0.18995834258665523, "compression_ratio": 1.5990990990990992, "no_speech_prob": 0.0060020736418664455}, {"id": 248, "seek": 134648, "start": 1347.48, "end": 1353.72, "text": " 784 dimensional input that is a lot and this is still a very simple problem for real-world problems", "tokens": [50414, 1614, 25494, 18795, 4846, 300, 307, 257, 688, 293, 341, 307, 920, 257, 588, 2199, 1154, 337, 957, 12, 13217, 2740, 50726], "temperature": 0.0, "avg_logprob": -0.15384207831488717, "compression_ratio": 1.6613545816733069, "no_speech_prob": 0.04602273181080818}, {"id": 249, "seek": 134648, "start": 1353.72, "end": 1360.64, "text": " We must address the curse of dimensionality our method must be able to handle huge dimensional inputs and outputs", "tokens": [50726, 492, 1633, 2985, 264, 17139, 295, 10139, 1860, 527, 3170, 1633, 312, 1075, 281, 4813, 2603, 18795, 15743, 293, 23930, 51072], "temperature": 0.0, "avg_logprob": -0.15384207831488717, "compression_ratio": 1.6613545816733069, "no_speech_prob": 0.04602273181080818}, {"id": 250, "seek": 134648, "start": 1360.84, "end": 1368.2, "text": " We also can't visualize the entire approximation all at once as before any idea what a 700 dimensional space looks like", "tokens": [51082, 492, 611, 393, 380, 23273, 264, 2302, 28023, 439, 412, 1564, 382, 949, 604, 1558, 437, 257, 15204, 18795, 1901, 1542, 411, 51450], "temperature": 0.0, "avg_logprob": -0.15384207831488717, "compression_ratio": 1.6613545816733069, "no_speech_prob": 0.04602273181080818}, {"id": 251, "seek": 134648, "start": 1368.8, "end": 1373.0, "text": " But a normal neural network can handle this problem. Just fine. It's pretty trivial", "tokens": [51480, 583, 257, 2710, 18161, 3209, 393, 4813, 341, 1154, 13, 1449, 2489, 13, 467, 311, 1238, 26703, 51690], "temperature": 0.0, "avg_logprob": -0.15384207831488717, "compression_ratio": 1.6613545816733069, "no_speech_prob": 0.04602273181080818}, {"id": 252, "seek": 137300, "start": 1373.32, "end": 1380.28, "text": " We can evaluate it by measuring the accuracy of its predictions on images from the dataset that it did not see during training", "tokens": [50380, 492, 393, 13059, 309, 538, 13389, 264, 14170, 295, 1080, 21264, 322, 5267, 490, 264, 28872, 300, 309, 630, 406, 536, 1830, 3097, 50728], "temperature": 0.0, "avg_logprob": -0.16746726243392282, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.01150488667190075}, {"id": 253, "seek": 137300, "start": 1380.36, "end": 1384.56, "text": " We'll call this evaluation accuracy and a small network does pretty well", "tokens": [50732, 492, 603, 818, 341, 13344, 14170, 293, 257, 1359, 3209, 775, 1238, 731, 50942], "temperature": 0.0, "avg_logprob": -0.16746726243392282, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.01150488667190075}, {"id": 254, "seek": 137300, "start": 1384.8, "end": 1388.76, "text": " What if we use Fourier features on this problem say up to eight orders?", "tokens": [50954, 708, 498, 321, 764, 36810, 4122, 322, 341, 1154, 584, 493, 281, 3180, 9470, 30, 51152], "temperature": 0.0, "avg_logprob": -0.16746726243392282, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.01150488667190075}, {"id": 255, "seek": 137300, "start": 1389.4, "end": 1395.28, "text": " Well, it does do a little better, but we're adding a lot of additional features for only eight orders", "tokens": [51184, 1042, 11, 309, 775, 360, 257, 707, 1101, 11, 457, 321, 434, 5127, 257, 688, 295, 4497, 4122, 337, 787, 3180, 9470, 51478], "temperature": 0.0, "avg_logprob": -0.16746726243392282, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.01150488667190075}, {"id": 256, "seek": 137300, "start": 1395.28, "end": 1397.28, "text": " We're computing a total of thirteen", "tokens": [51478, 492, 434, 15866, 257, 3217, 295, 31534, 51578], "temperature": 0.0, "avg_logprob": -0.16746726243392282, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.01150488667190075}, {"id": 257, "seek": 139728, "start": 1398.16, "end": 1401.36, "text": " 2328 input features which is a lot more than", "tokens": [50408, 6673, 11205, 4846, 4122, 597, 307, 257, 688, 544, 813, 50568], "temperature": 0.0, "avg_logprob": -0.22615986778622582, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.012238201685249805}, {"id": 258, "seek": 139728, "start": 1401.84, "end": 1407.8799999999999, "text": " 784 and it's only 2% more accurate when we use 32 orders of the Fourier series", "tokens": [50592, 1614, 25494, 293, 309, 311, 787, 568, 4, 544, 8559, 562, 321, 764, 8858, 9470, 295, 264, 36810, 2638, 50894], "temperature": 0.0, "avg_logprob": -0.22615986778622582, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.012238201685249805}, {"id": 259, "seek": 139728, "start": 1407.8799999999999, "end": 1413.04, "text": " It actually seems to harm performance up to 64 orders and its downright ruiness", "tokens": [50894, 467, 767, 2544, 281, 6491, 3389, 493, 281, 12145, 9470, 293, 1080, 760, 1938, 15514, 442, 51152], "temperature": 0.0, "avg_logprob": -0.22615986778622582, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.012238201685249805}, {"id": 260, "seek": 139728, "start": 1413.52, "end": 1419.8, "text": " This may be due to something called overfitting where our approximation learns the data really well too well", "tokens": [51176, 639, 815, 312, 3462, 281, 746, 1219, 670, 69, 2414, 689, 527, 28023, 27152, 264, 1412, 534, 731, 886, 731, 51490], "temperature": 0.0, "avg_logprob": -0.22615986778622582, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.012238201685249805}, {"id": 261, "seek": 139728, "start": 1419.8799999999999, "end": 1422.48, "text": " But fails to learn the underlying function", "tokens": [51494, 583, 18199, 281, 1466, 264, 14217, 2445, 51624], "temperature": 0.0, "avg_logprob": -0.22615986778622582, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.012238201685249805}, {"id": 262, "seek": 142248, "start": 1422.96, "end": 1428.92, "text": " Usually this is a product of not having enough data, but our Fourier network seems to be especially prone to this", "tokens": [50388, 11419, 341, 307, 257, 1674, 295, 406, 1419, 1547, 1412, 11, 457, 527, 36810, 3209, 2544, 281, 312, 2318, 25806, 281, 341, 50686], "temperature": 0.0, "avg_logprob": -0.1910267442759901, "compression_ratio": 1.8007246376811594, "no_speech_prob": 0.0034825410693883896}, {"id": 263, "seek": 142248, "start": 1429.24, "end": 1436.16, "text": " This seems consistent with the conclusions of the paper. I mentioned earlier and ultimately our Fourier network seems to be very good for low", "tokens": [50702, 639, 2544, 8398, 365, 264, 22865, 295, 264, 3035, 13, 286, 2835, 3071, 293, 6284, 527, 36810, 3209, 2544, 281, 312, 588, 665, 337, 2295, 51048], "temperature": 0.0, "avg_logprob": -0.1910267442759901, "compression_ratio": 1.8007246376811594, "no_speech_prob": 0.0034825410693883896}, {"id": 264, "seek": 142248, "start": 1436.16, "end": 1439.8, "text": " Dimensional problems, but not very good for high dimensional problems", "tokens": [51048, 20975, 11075, 2740, 11, 457, 406, 588, 665, 337, 1090, 18795, 2740, 51230], "temperature": 0.0, "avg_logprob": -0.1910267442759901, "compression_ratio": 1.8007246376811594, "no_speech_prob": 0.0034825410693883896}, {"id": 265, "seek": 142248, "start": 1440.16, "end": 1444.48, "text": " No single architecture model or method is the best fit for all tasks", "tokens": [51248, 883, 2167, 9482, 2316, 420, 3170, 307, 264, 1151, 3318, 337, 439, 9608, 51464], "temperature": 0.0, "avg_logprob": -0.1910267442759901, "compression_ratio": 1.8007246376811594, "no_speech_prob": 0.0034825410693883896}, {"id": 266, "seek": 142248, "start": 1444.68, "end": 1449.4, "text": " Indeed, there are all kinds of problems that require different approaches than the ones discussed here", "tokens": [51474, 15061, 11, 456, 366, 439, 3685, 295, 2740, 300, 3651, 819, 11587, 813, 264, 2306, 7152, 510, 51710], "temperature": 0.0, "avg_logprob": -0.1910267442759901, "compression_ratio": 1.8007246376811594, "no_speech_prob": 0.0034825410693883896}, {"id": 267, "seek": 144940, "start": 1450.2800000000002, "end": 1455.96, "text": " Now I'd be surprised if the Fourier series didn't have more to teach us about machine learning, but this is where I'll leave it", "tokens": [50408, 823, 286, 1116, 312, 6100, 498, 264, 36810, 2638, 994, 380, 362, 544, 281, 2924, 505, 466, 3479, 2539, 11, 457, 341, 307, 689, 286, 603, 1856, 309, 50692], "temperature": 0.0, "avg_logprob": -0.1319517331702687, "compression_ratio": 1.6476190476190475, "no_speech_prob": 0.005728098098188639}, {"id": 268, "seek": 144940, "start": 1455.96, "end": 1464.0, "text": " I hope this video has helped you appreciate what function approximation is and why it's useful and maybe sparked your imagination with some alternative perspectives", "tokens": [50692, 286, 1454, 341, 960, 575, 4254, 291, 4449, 437, 2445, 28023, 307, 293, 983, 309, 311, 4420, 293, 1310, 39653, 428, 12938, 365, 512, 8535, 16766, 51094], "temperature": 0.0, "avg_logprob": -0.1319517331702687, "compression_ratio": 1.6476190476190475, "no_speech_prob": 0.005728098098188639}, {"id": 269, "seek": 144940, "start": 1464.5600000000002, "end": 1470.68, "text": " Neural networks are a kind of mathematical clay that can be molded into arbitrary shapes for arbitrary purposes", "tokens": [51122, 1734, 1807, 9590, 366, 257, 733, 295, 18894, 13517, 300, 393, 312, 11102, 292, 666, 23211, 10854, 337, 23211, 9932, 51428], "temperature": 0.0, "avg_logprob": -0.1319517331702687, "compression_ratio": 1.6476190476190475, "no_speech_prob": 0.005728098098188639}, {"id": 270, "seek": 144940, "start": 1471.8400000000001, "end": 1478.4, "text": " I want to finish by opening up the Mandelbrot approximation problem as a fun challenge for anyone who's interested", "tokens": [51486, 286, 528, 281, 2413, 538, 5193, 493, 264, 15458, 338, 1443, 310, 28023, 1154, 382, 257, 1019, 3430, 337, 2878, 567, 311, 3102, 51814], "temperature": 0.0, "avg_logprob": -0.1319517331702687, "compression_ratio": 1.6476190476190475, "no_speech_prob": 0.005728098098188639}, {"id": 271, "seek": 147840, "start": 1478.68, "end": 1484.92, "text": " How precisely and deeply can you approximate the Mandelbrot set given only a random sample of points?", "tokens": [50378, 1012, 13402, 293, 8760, 393, 291, 30874, 264, 15458, 338, 1443, 310, 992, 2212, 787, 257, 4974, 6889, 295, 2793, 30, 50690], "temperature": 0.0, "avg_logprob": -0.16056502205984932, "compression_ratio": 1.7112676056338028, "no_speech_prob": 0.010009228251874447}, {"id": 272, "seek": 147840, "start": 1485.44, "end": 1491.3600000000001, "text": " There are probably a million things that could be done to improve on my approximation and the internet is much smarter than I am", "tokens": [50716, 821, 366, 1391, 257, 2459, 721, 300, 727, 312, 1096, 281, 3470, 322, 452, 28023, 293, 264, 4705, 307, 709, 20294, 813, 286, 669, 51012], "temperature": 0.0, "avg_logprob": -0.16056502205984932, "compression_ratio": 1.7112676056338028, "no_speech_prob": 0.010009228251874447}, {"id": 273, "seek": 147840, "start": 1491.72, "end": 1496.68, "text": " The only rule is that your solution must still be a universal function approximator", "tokens": [51030, 440, 787, 4978, 307, 300, 428, 3827, 1633, 920, 312, 257, 11455, 2445, 8542, 1639, 51278], "temperature": 0.0, "avg_logprob": -0.16056502205984932, "compression_ratio": 1.7112676056338028, "no_speech_prob": 0.010009228251874447}, {"id": 274, "seek": 147840, "start": 1496.88, "end": 1500.8000000000002, "text": " Meaning it could still learn any other data set of any dimensionality", "tokens": [51288, 19948, 309, 727, 920, 1466, 604, 661, 1412, 992, 295, 604, 10139, 1860, 51484], "temperature": 0.0, "avg_logprob": -0.16056502205984932, "compression_ratio": 1.7112676056338028, "no_speech_prob": 0.010009228251874447}, {"id": 275, "seek": 147840, "start": 1501.52, "end": 1506.92, "text": " This is just for fun, but potentially solutions to this toy problem could have uses in the real world", "tokens": [51520, 639, 307, 445, 337, 1019, 11, 457, 7263, 6547, 281, 341, 12058, 1154, 727, 362, 4960, 294, 264, 957, 1002, 51790], "temperature": 0.0, "avg_logprob": -0.16056502205984932, "compression_ratio": 1.7112676056338028, "no_speech_prob": 0.010009228251874447}, {"id": 276, "seek": 150692, "start": 1507.3200000000002, "end": 1514.0800000000002, "text": " There is no reason to think that we found the best way of doing this and there may be far better solutions waiting to be discovered", "tokens": [50384, 821, 307, 572, 1778, 281, 519, 300, 321, 1352, 264, 1151, 636, 295, 884, 341, 293, 456, 815, 312, 1400, 1101, 6547, 3806, 281, 312, 6941, 50722], "temperature": 0.0, "avg_logprob": -0.12293887138366699, "compression_ratio": 1.3727272727272728, "no_speech_prob": 0.02755006216466427}, {"id": 277, "seek": 150692, "start": 1514.96, "end": 1516.96, "text": " Thanks for watching", "tokens": [50766, 2561, 337, 1976, 50866], "temperature": 0.0, "avg_logprob": -0.12293887138366699, "compression_ratio": 1.3727272727272728, "no_speech_prob": 0.02755006216466427}], "language": "en"}