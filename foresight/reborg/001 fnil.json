{"text": " Hello and welcome to this first episode of The Closure Pills. I'm planning to make this a weekly thing where we go through the functions in the standard library, in the closure standard library. There are many of them, this is like worth a few years of screencasts. I'm not sure if we are gonna go that far and do the entire thing, but certainly I'm going to enjoy this and I hope you're going to enjoy this too. The functions and the examples that we're going to see in these screencasts are mostly coming from a book I'm working on by Manning. It's available here on the Manning website. So if you enjoy the content of the screencast you are interested in knowing more about the function in the standard library. There's a good chance you're also gonna like this book. I hope you enjoy the screencast and also enjoy the book if you buy it. For this very first episode we are going to see something that is hopefully not too complicated. It's a nice little function called f0. It's not very common. You're not gonna hear this very often, but it's there and it's got a few interesting use cases that you might be interested in the next time you're working on some nil input. You might remember about f0 and remember what it can do for you. There are alternatives. There are different ways of doing things and that's a good thing. You can also quickly check the sources by doing source or f of f nil and you can see it's got three arities. It's taking a function as the first argument is taking then three arguments of any type. So what is the goal of this function? This is a higher-order function. It takes your function, which is the thing, your target that you want to patch, so to speak, and it takes up to three arguments and those arguments are going to be used for the generated function as defaults if any nil is passed in as an argument. Probably better showing an example about how this can be used, but basically let's say you have a pattern matching string of some sort. You want to verify if you can say hello you in some string that is coming to you and you can use refined for that and refined is going to return the matching part of the string. If any, if not, it's going to return nil. If you use refined and you are matching on maybe external input that is coming from the input, the user input, or third-party services, and so on, you might receive a nil instead. If you receive a nil you get this nasty null point or exception. So depending on the application you might need to take care of that. There are many ways you can take care of that. You can do a try-catch, you can use a condition, but maybe this is a very good use case for functional programming. By using higher-order function you can remove a condition essentially or removing a try-catch. Both of them are not absolutely bad things to have, but they increase the complexity of the program. So if you can remove this complexity and remove a condition you don't need to think about the two branches of a condition. That is a decrease in the complexity of the program. So fnil can be helpful in this. How would you use fnil? We said a function generator, so you produce a different function. So we can call it refined plus just to differentiate the name, but knowing that we are talking about the good old refined where we are dealing with nil arguments, with defaults for nil arguments, and you use fnil. fnil is taking the original function, the one you want to wrap around, and up to three arguments are the default if you pass nil to that function. Let's say we pass a nil rejects, so we can use for example the empty rejects as a default, and we can use the empty string as a target string, as a default if you pass nil. Once you define this you refined, you can use it in place of your old refined occurrences, and you just use it as usual. So you would pass any rejects, and say you pass nil, this time we are getting back a nil, we are now going null pointer exception, because we are replacing that nil with an empty string, and we can do the same with rejects. If that is the case for your application you can do that with all arguments, not just the last or not just the first. How would it be without fnil? Why do you want to use it? Then you might have something like this, where you check, let's say string s, and then you go through your rugged rejects to see if s is matching or not. Of course we don't have any s, so we define hello, and we try again, and as you can see it's going as expected, it's matching on a low, but with the when you can of course also pass in a nil, and that will go through. So essentially with fnil we are able to replace a condition, this condition specifically, with a non condition, with something that is not a condition. There is a condition inside fnil, but you don't see it, that's the important part. So you can use refined plus, and everything goes without any exception. So you would use fnil if this kind of rule needs to be applied in multiple places in nana in space, or in multiple namespaces. So if you need to reuse this, you define the actual function, and you can reuse it across the application. So we talked about the arities of fnil, it's got only three, meaning that if you try something more than three, let's see what happens. So let's say you want to generate an fnil for plus, where if you pass in any nil arguments, you're going to replace them with some like neutral number like zero for addition. So you want five of them, but if you try you'll see that you're passing the wrong number of arguments of fnil, because fnil only supports three of them, unfortunately. I would say unfortunately up to certain points. So if you have a function with four, five, six arguments, you're probably looking at something that needs refactoring in some other ways, and probably some obstruction is missing, and you need to extract that obstruction out, and remove or reduce the number of arguments. But let's say you really need that, we can easily extend fnil to support more arguments. To do that, we'll define our own fnil, we'll call it fnil plus, and instead of taking like three arguments, we'll just take a variable number of arguments. Then as a contract, we'll definitely have to return the generated function, and this would be a function of any number of arguments, because this is what the problem we are trying to solve, so to wrap with fnil a function as more than three arguments, potentially any number. What we need to do then is apply the target function to these arguments, but when we do apply to the arguments we need to take care of the potential nil arguments, and replace them with something that is coming from the options that we are passing to fnil. You need to take care also of the fact that the number of arguments you're going to apply f to might be less of the number of arguments that you have defaults for. So what I'm going to do is to create a sequence that contains nil defaults for all those defaults that are not given as options. Better showing you what I'm talking about, so I'm going to map over the sequence, and if I'm in front of a nil argument, then I'm going to return the default. This is the logic. If not, then I can just return the argument. I don't need to do anything, and what I'm mapping on are the arguments, what would be actually passed in during the invocation, and a sequence that is the concatenation of opts, which are my options, my defaults, with any number of nils to pad at the end. This makes sure that I have enough defaults, I have always enough defaults to cover any possible cases, even if they are not. The right number of arguments is not passed in. So if we do this, I'm going to show you what this new fnil plus can do, and for example in the case of plus that we were looking at before, we'll define a new plus plus function that is using fnil plus instead of the normal fnil, over plus, which is our target function, and then we say I want like five potential defaults for nils that are passed in to my plus function, or double plus function. So what I can do now that I was unable to do before, and I show you what I'm able to do now, if I do this with the normal plus I'm getting null pointer exception, but if I use the double plus, that is going through, and is summing up all the numbers that are available, is basically removing the nil from the list of arguments, and summing up the rest, and it's replacing nil with the default I gave, which is a zero. As potential alternatives, we saw that you can use when, you can use a condition, you can use a try-catch. There's also another interesting function in the standard library you could use. If you don't need this behavior to be reused, and the entire application, and this is the threaded thread first and thread last sum option, and if I do, for example, if I do pass hello to my refined, where I'm checking a you hello thing, this is perfectly fine, and this got also the nice, oh, why is returning nil? Interesting, and let me just check why this is it, this is the case, I wasn't expecting that. Oh yeah, I inverted the rejects, sorry for that. So, well anyway, let's say I'm searching hello, and I'm finding hello, the good thing about some threaded last is that I can also pass in nil, so let's say my s is still defined as nil, if I have this input coming through, and I pass it through, this will have the same effect as f nil, and this is a nice alternative, as I said, this is not something you would assign to a var in a namespace to reuse, this is something you use once, and if that is the case for you, this is a good alternative. Last thing I want to talk about in this first screencast is the performance profile of nil, so f nil as it is, like in the standard library, let's have a look again, and the sources is a very simple function, it's not doing anything particularly bad, it's just basically using nested if statement to obtain the effect of replacing the nil with the default you give, the performance profile of this with the limitation that you cannot pass more than three arguments is a constant time generation of the function, and a constant time application as well, big O of three basically, with the f nil plus that we showed before, instead the generation is still remaining a constant time, so f nil will generate just fine in constant time, but the application of course will be linear, because we'll have to iterate through the number of arguments you're passing through, and check if they're nil, and apply the rule to replace the nil argument with the default. We can see that quite easily if we, for example, if we take f nil plus, and we create, well, so let's redefine our plus function with nil plus, where instead of just using like five arguments as we did before, we give defaults for like a big range of arguments, let's say one billion or so of arguments, so this generation is just instant, it's a constant time, we don't need to go, we don't need to iterate through the range at the moment, everything is lazy, it's going to be iterated as you use it, if you then use the plus plus function, as usual, yes, oops, I did, I did apply f nil without specifying the plus, if we do this, this is still, it's not going to, it's not going through the entire sequence of the range to apply the defaults, because we are not passing enough arguments, and soon as we go up with that, so let's put a time on this, as soon, of course, as soon as we go up with this, so we apply double plus to more arguments, say, 10, 10 millions, and we see that the time to do this computation go up, and it's roughly linear computation, and it's coming back now in eight, eight, about eight seconds, so this is it for this first episode, I hope you enjoyed, if you like this content, have a look at the book, a few sample chapters are available, and also if you enjoyed this screencast, I hope you'll enjoy the next one, roughly one week, I hope to keep up with the weekly thing, the weekly screencast plan, I might miss one or two, but we'll see how it goes, so thank you for listening, goodbye.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.92, "text": " Hello and welcome to this first episode of The Closure Pills. I'm planning to", "tokens": [50364, 2425, 293, 2928, 281, 341, 700, 3500, 295, 440, 2033, 7641, 430, 2565, 13, 286, 478, 5038, 281, 50760], "temperature": 0.0, "avg_logprob": -0.1658147253641268, "compression_ratio": 1.585, "no_speech_prob": 0.17194676399230957}, {"id": 1, "seek": 0, "start": 7.92, "end": 14.0, "text": " make this a weekly thing where we go through the functions in the standard", "tokens": [50760, 652, 341, 257, 12460, 551, 689, 321, 352, 807, 264, 6828, 294, 264, 3832, 51064], "temperature": 0.0, "avg_logprob": -0.1658147253641268, "compression_ratio": 1.585, "no_speech_prob": 0.17194676399230957}, {"id": 2, "seek": 0, "start": 14.0, "end": 18.8, "text": " library, in the closure standard library. There are many of them, this is like worth", "tokens": [51064, 6405, 11, 294, 264, 24653, 3832, 6405, 13, 821, 366, 867, 295, 552, 11, 341, 307, 411, 3163, 51304], "temperature": 0.0, "avg_logprob": -0.1658147253641268, "compression_ratio": 1.585, "no_speech_prob": 0.17194676399230957}, {"id": 3, "seek": 0, "start": 18.8, "end": 24.88, "text": " a few years of screencasts. I'm not sure if we are gonna go that far and do the", "tokens": [51304, 257, 1326, 924, 295, 2568, 3734, 82, 13, 286, 478, 406, 988, 498, 321, 366, 799, 352, 300, 1400, 293, 360, 264, 51608], "temperature": 0.0, "avg_logprob": -0.1658147253641268, "compression_ratio": 1.585, "no_speech_prob": 0.17194676399230957}, {"id": 4, "seek": 2488, "start": 24.88, "end": 30.24, "text": " entire thing, but certainly I'm going to enjoy this and I hope you're going to", "tokens": [50364, 2302, 551, 11, 457, 3297, 286, 478, 516, 281, 2103, 341, 293, 286, 1454, 291, 434, 516, 281, 50632], "temperature": 0.0, "avg_logprob": -0.2369424602653407, "compression_ratio": 1.597883597883598, "no_speech_prob": 0.054298918694257736}, {"id": 5, "seek": 2488, "start": 30.24, "end": 38.16, "text": " enjoy this too. The functions and the examples that we're going to see", "tokens": [50632, 2103, 341, 886, 13, 440, 6828, 293, 264, 5110, 300, 321, 434, 516, 281, 536, 51028], "temperature": 0.0, "avg_logprob": -0.2369424602653407, "compression_ratio": 1.597883597883598, "no_speech_prob": 0.054298918694257736}, {"id": 6, "seek": 2488, "start": 38.16, "end": 44.68, "text": " in these screencasts are mostly coming from a book I'm working on by Manning.", "tokens": [51028, 294, 613, 2568, 3734, 82, 366, 5240, 1348, 490, 257, 1446, 286, 478, 1364, 322, 538, 2458, 773, 13, 51354], "temperature": 0.0, "avg_logprob": -0.2369424602653407, "compression_ratio": 1.597883597883598, "no_speech_prob": 0.054298918694257736}, {"id": 7, "seek": 2488, "start": 44.68, "end": 52.08, "text": " It's available here on the Manning website. So if you enjoy the content of", "tokens": [51354, 467, 311, 2435, 510, 322, 264, 2458, 773, 3144, 13, 407, 498, 291, 2103, 264, 2701, 295, 51724], "temperature": 0.0, "avg_logprob": -0.2369424602653407, "compression_ratio": 1.597883597883598, "no_speech_prob": 0.054298918694257736}, {"id": 8, "seek": 5208, "start": 52.08, "end": 56.199999999999996, "text": " the screencast you are interested in knowing more about the function in the", "tokens": [50364, 264, 2568, 3734, 291, 366, 3102, 294, 5276, 544, 466, 264, 2445, 294, 264, 50570], "temperature": 0.0, "avg_logprob": -0.1426854329566433, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0057218014262616634}, {"id": 9, "seek": 5208, "start": 56.199999999999996, "end": 61.92, "text": " standard library. There's a good chance you're also gonna like this book. I hope", "tokens": [50570, 3832, 6405, 13, 821, 311, 257, 665, 2931, 291, 434, 611, 799, 411, 341, 1446, 13, 286, 1454, 50856], "temperature": 0.0, "avg_logprob": -0.1426854329566433, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0057218014262616634}, {"id": 10, "seek": 5208, "start": 61.92, "end": 69.28, "text": " you enjoy the screencast and also enjoy the book if you buy it. For this very", "tokens": [50856, 291, 2103, 264, 2568, 3734, 293, 611, 2103, 264, 1446, 498, 291, 2256, 309, 13, 1171, 341, 588, 51224], "temperature": 0.0, "avg_logprob": -0.1426854329566433, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0057218014262616634}, {"id": 11, "seek": 5208, "start": 69.28, "end": 74.36, "text": " first episode we are going to see something that is hopefully not too", "tokens": [51224, 700, 3500, 321, 366, 516, 281, 536, 746, 300, 307, 4696, 406, 886, 51478], "temperature": 0.0, "avg_logprob": -0.1426854329566433, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0057218014262616634}, {"id": 12, "seek": 7436, "start": 74.4, "end": 82.68, "text": " complicated. It's a nice little function called f0. It's not very common. You're", "tokens": [50366, 6179, 13, 467, 311, 257, 1481, 707, 2445, 1219, 283, 15, 13, 467, 311, 406, 588, 2689, 13, 509, 434, 50780], "temperature": 0.0, "avg_logprob": -0.17855453491210938, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.08520835638046265}, {"id": 13, "seek": 7436, "start": 82.68, "end": 88.64, "text": " not gonna hear this very often, but it's there and it's got a few interesting", "tokens": [50780, 406, 799, 1568, 341, 588, 2049, 11, 457, 309, 311, 456, 293, 309, 311, 658, 257, 1326, 1880, 51078], "temperature": 0.0, "avg_logprob": -0.17855453491210938, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.08520835638046265}, {"id": 14, "seek": 7436, "start": 88.64, "end": 95.28, "text": " use cases that you might be interested in the next time you're working on some", "tokens": [51078, 764, 3331, 300, 291, 1062, 312, 3102, 294, 264, 958, 565, 291, 434, 1364, 322, 512, 51410], "temperature": 0.0, "avg_logprob": -0.17855453491210938, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.08520835638046265}, {"id": 15, "seek": 7436, "start": 95.28, "end": 101.2, "text": " nil input. You might remember about f0 and remember what it can do for you. There", "tokens": [51410, 297, 388, 4846, 13, 509, 1062, 1604, 466, 283, 15, 293, 1604, 437, 309, 393, 360, 337, 291, 13, 821, 51706], "temperature": 0.0, "avg_logprob": -0.17855453491210938, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.08520835638046265}, {"id": 16, "seek": 10120, "start": 101.2, "end": 106.56, "text": " are alternatives. There are different ways of doing things and that's a good", "tokens": [50364, 366, 20478, 13, 821, 366, 819, 2098, 295, 884, 721, 293, 300, 311, 257, 665, 50632], "temperature": 0.0, "avg_logprob": -0.1540629471404643, "compression_ratio": 1.617801047120419, "no_speech_prob": 0.0004886036622337997}, {"id": 17, "seek": 10120, "start": 106.56, "end": 114.52000000000001, "text": " thing. You can also quickly check the sources by doing source or f of f nil", "tokens": [50632, 551, 13, 509, 393, 611, 2661, 1520, 264, 7139, 538, 884, 4009, 420, 283, 295, 283, 297, 388, 51030], "temperature": 0.0, "avg_logprob": -0.1540629471404643, "compression_ratio": 1.617801047120419, "no_speech_prob": 0.0004886036622337997}, {"id": 18, "seek": 10120, "start": 114.52000000000001, "end": 121.80000000000001, "text": " and you can see it's got three arities. It's taking a function as the first", "tokens": [51030, 293, 291, 393, 536, 309, 311, 658, 1045, 594, 1088, 13, 467, 311, 1940, 257, 2445, 382, 264, 700, 51394], "temperature": 0.0, "avg_logprob": -0.1540629471404643, "compression_ratio": 1.617801047120419, "no_speech_prob": 0.0004886036622337997}, {"id": 19, "seek": 10120, "start": 121.80000000000001, "end": 129.24, "text": " argument is taking then three arguments of any type. So what is the goal of this", "tokens": [51394, 6770, 307, 1940, 550, 1045, 12869, 295, 604, 2010, 13, 407, 437, 307, 264, 3387, 295, 341, 51766], "temperature": 0.0, "avg_logprob": -0.1540629471404643, "compression_ratio": 1.617801047120419, "no_speech_prob": 0.0004886036622337997}, {"id": 20, "seek": 12924, "start": 129.24, "end": 135.88, "text": " function? This is a higher-order function. It takes your function, which is the", "tokens": [50364, 2445, 30, 639, 307, 257, 2946, 12, 4687, 2445, 13, 467, 2516, 428, 2445, 11, 597, 307, 264, 50696], "temperature": 0.0, "avg_logprob": -0.21791648864746094, "compression_ratio": 1.596026490066225, "no_speech_prob": 0.003806276014074683}, {"id": 21, "seek": 12924, "start": 135.88, "end": 143.56, "text": " thing, your target that you want to patch, so to speak, and it takes up to three", "tokens": [50696, 551, 11, 428, 3779, 300, 291, 528, 281, 9972, 11, 370, 281, 1710, 11, 293, 309, 2516, 493, 281, 1045, 51080], "temperature": 0.0, "avg_logprob": -0.21791648864746094, "compression_ratio": 1.596026490066225, "no_speech_prob": 0.003806276014074683}, {"id": 22, "seek": 12924, "start": 143.56, "end": 150.68, "text": " arguments and those arguments are going to be used for the generated function as", "tokens": [51080, 12869, 293, 729, 12869, 366, 516, 281, 312, 1143, 337, 264, 10833, 2445, 382, 51436], "temperature": 0.0, "avg_logprob": -0.21791648864746094, "compression_ratio": 1.596026490066225, "no_speech_prob": 0.003806276014074683}, {"id": 23, "seek": 15068, "start": 151.0, "end": 159.44, "text": " defaults if any nil is passed in as an argument. Probably better showing an", "tokens": [50380, 7576, 82, 498, 604, 297, 388, 307, 4678, 294, 382, 364, 6770, 13, 9210, 1101, 4099, 364, 50802], "temperature": 0.0, "avg_logprob": -0.23904882158551896, "compression_ratio": 1.4155844155844155, "no_speech_prob": 0.003371503669768572}, {"id": 24, "seek": 15068, "start": 159.44, "end": 166.72, "text": " example about how this can be used, but basically let's say you have a", "tokens": [50802, 1365, 466, 577, 341, 393, 312, 1143, 11, 457, 1936, 718, 311, 584, 291, 362, 257, 51166], "temperature": 0.0, "avg_logprob": -0.23904882158551896, "compression_ratio": 1.4155844155844155, "no_speech_prob": 0.003371503669768572}, {"id": 25, "seek": 15068, "start": 166.72, "end": 174.96, "text": " pattern matching string of some sort. You want to verify if you can say", "tokens": [51166, 5102, 14324, 6798, 295, 512, 1333, 13, 509, 528, 281, 16888, 498, 291, 393, 584, 51578], "temperature": 0.0, "avg_logprob": -0.23904882158551896, "compression_ratio": 1.4155844155844155, "no_speech_prob": 0.003371503669768572}, {"id": 26, "seek": 17496, "start": 175.68, "end": 183.24, "text": " hello you in some string that is coming to you and you can use refined for that", "tokens": [50400, 7751, 291, 294, 512, 6798, 300, 307, 1348, 281, 291, 293, 291, 393, 764, 26201, 337, 300, 50778], "temperature": 0.0, "avg_logprob": -0.23337519610369648, "compression_ratio": 1.896341463414634, "no_speech_prob": 0.005332968197762966}, {"id": 27, "seek": 17496, "start": 183.24, "end": 189.08, "text": " and refined is going to return the matching part of the string. If any, if", "tokens": [50778, 293, 26201, 307, 516, 281, 2736, 264, 14324, 644, 295, 264, 6798, 13, 759, 604, 11, 498, 51070], "temperature": 0.0, "avg_logprob": -0.23337519610369648, "compression_ratio": 1.896341463414634, "no_speech_prob": 0.005332968197762966}, {"id": 28, "seek": 17496, "start": 189.08, "end": 196.20000000000002, "text": " not, it's going to return nil. If you use refined and you are matching on maybe", "tokens": [51070, 406, 11, 309, 311, 516, 281, 2736, 297, 388, 13, 759, 291, 764, 26201, 293, 291, 366, 14324, 322, 1310, 51426], "temperature": 0.0, "avg_logprob": -0.23337519610369648, "compression_ratio": 1.896341463414634, "no_speech_prob": 0.005332968197762966}, {"id": 29, "seek": 17496, "start": 196.20000000000002, "end": 202.92000000000002, "text": " external input that is coming from the input, the user input, or third-party", "tokens": [51426, 8320, 4846, 300, 307, 1348, 490, 264, 4846, 11, 264, 4195, 4846, 11, 420, 2636, 12, 23409, 51762], "temperature": 0.0, "avg_logprob": -0.23337519610369648, "compression_ratio": 1.896341463414634, "no_speech_prob": 0.005332968197762966}, {"id": 30, "seek": 20292, "start": 202.92, "end": 208.0, "text": " services, and so on, you might receive a nil instead. If you receive a nil you get", "tokens": [50364, 3328, 11, 293, 370, 322, 11, 291, 1062, 4774, 257, 297, 388, 2602, 13, 759, 291, 4774, 257, 297, 388, 291, 483, 50618], "temperature": 0.0, "avg_logprob": -0.16959224027745864, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.0023903106339275837}, {"id": 31, "seek": 20292, "start": 208.0, "end": 214.2, "text": " this nasty null point or exception. So depending on the application you might", "tokens": [50618, 341, 17923, 18184, 935, 420, 11183, 13, 407, 5413, 322, 264, 3861, 291, 1062, 50928], "temperature": 0.0, "avg_logprob": -0.16959224027745864, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.0023903106339275837}, {"id": 32, "seek": 20292, "start": 214.2, "end": 219.07999999999998, "text": " need to take care of that. There are many ways you can take care of that. You can", "tokens": [50928, 643, 281, 747, 1127, 295, 300, 13, 821, 366, 867, 2098, 291, 393, 747, 1127, 295, 300, 13, 509, 393, 51172], "temperature": 0.0, "avg_logprob": -0.16959224027745864, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.0023903106339275837}, {"id": 33, "seek": 20292, "start": 219.07999999999998, "end": 227.56, "text": " do a try-catch, you can use a condition, but maybe this is a very", "tokens": [51172, 360, 257, 853, 12, 66, 852, 11, 291, 393, 764, 257, 4188, 11, 457, 1310, 341, 307, 257, 588, 51596], "temperature": 0.0, "avg_logprob": -0.16959224027745864, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.0023903106339275837}, {"id": 34, "seek": 20292, "start": 227.56, "end": 231.72, "text": " good use case for functional programming. By using higher-order function you can", "tokens": [51596, 665, 764, 1389, 337, 11745, 9410, 13, 3146, 1228, 2946, 12, 4687, 2445, 291, 393, 51804], "temperature": 0.0, "avg_logprob": -0.16959224027745864, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.0023903106339275837}, {"id": 35, "seek": 23172, "start": 231.76, "end": 237.72, "text": " remove a condition essentially or removing a try-catch. Both of them", "tokens": [50366, 4159, 257, 4188, 4476, 420, 12720, 257, 853, 12, 66, 852, 13, 6767, 295, 552, 50664], "temperature": 0.0, "avg_logprob": -0.18033699459499783, "compression_ratio": 1.8109452736318408, "no_speech_prob": 0.003699009772390127}, {"id": 36, "seek": 23172, "start": 237.72, "end": 243.68, "text": " are not absolutely bad things to have, but they increase the complexity of the", "tokens": [50664, 366, 406, 3122, 1578, 721, 281, 362, 11, 457, 436, 3488, 264, 14024, 295, 264, 50962], "temperature": 0.0, "avg_logprob": -0.18033699459499783, "compression_ratio": 1.8109452736318408, "no_speech_prob": 0.003699009772390127}, {"id": 37, "seek": 23172, "start": 243.68, "end": 248.28, "text": " program. So if you can remove this complexity and remove a condition you", "tokens": [50962, 1461, 13, 407, 498, 291, 393, 4159, 341, 14024, 293, 4159, 257, 4188, 291, 51192], "temperature": 0.0, "avg_logprob": -0.18033699459499783, "compression_ratio": 1.8109452736318408, "no_speech_prob": 0.003699009772390127}, {"id": 38, "seek": 23172, "start": 248.28, "end": 251.64, "text": " don't need to think about the two branches of a condition. That is a", "tokens": [51192, 500, 380, 643, 281, 519, 466, 264, 732, 14770, 295, 257, 4188, 13, 663, 307, 257, 51360], "temperature": 0.0, "avg_logprob": -0.18033699459499783, "compression_ratio": 1.8109452736318408, "no_speech_prob": 0.003699009772390127}, {"id": 39, "seek": 23172, "start": 251.64, "end": 257.56, "text": " decrease in the complexity of the program. So fnil can be helpful in this.", "tokens": [51360, 11514, 294, 264, 14024, 295, 264, 1461, 13, 407, 283, 77, 388, 393, 312, 4961, 294, 341, 13, 51656], "temperature": 0.0, "avg_logprob": -0.18033699459499783, "compression_ratio": 1.8109452736318408, "no_speech_prob": 0.003699009772390127}, {"id": 40, "seek": 25756, "start": 258.28000000000003, "end": 265.04, "text": " How would you use fnil? We said a function generator, so you produce a", "tokens": [50400, 1012, 576, 291, 764, 283, 77, 388, 30, 492, 848, 257, 2445, 19265, 11, 370, 291, 5258, 257, 50738], "temperature": 0.0, "avg_logprob": -0.28891756693522136, "compression_ratio": 1.6195652173913044, "no_speech_prob": 0.004683557897806168}, {"id": 41, "seek": 25756, "start": 265.04, "end": 271.68, "text": " different function. So we can call it refined plus just to differentiate the", "tokens": [50738, 819, 2445, 13, 407, 321, 393, 818, 309, 26201, 1804, 445, 281, 23203, 264, 51070], "temperature": 0.0, "avg_logprob": -0.28891756693522136, "compression_ratio": 1.6195652173913044, "no_speech_prob": 0.004683557897806168}, {"id": 42, "seek": 25756, "start": 271.68, "end": 277.0, "text": " name, but knowing that we are talking about the good old refined where we are", "tokens": [51070, 1315, 11, 457, 5276, 300, 321, 366, 1417, 466, 264, 665, 1331, 26201, 689, 321, 366, 51336], "temperature": 0.0, "avg_logprob": -0.28891756693522136, "compression_ratio": 1.6195652173913044, "no_speech_prob": 0.004683557897806168}, {"id": 43, "seek": 25756, "start": 277.0, "end": 282.72, "text": " dealing with nil arguments, with defaults for nil arguments, and you use", "tokens": [51336, 6260, 365, 297, 388, 12869, 11, 365, 7576, 82, 337, 297, 388, 12869, 11, 293, 291, 764, 51622], "temperature": 0.0, "avg_logprob": -0.28891756693522136, "compression_ratio": 1.6195652173913044, "no_speech_prob": 0.004683557897806168}, {"id": 44, "seek": 28272, "start": 282.84000000000003, "end": 290.28000000000003, "text": " fnil. fnil is taking the original function, the one you want to wrap around,", "tokens": [50370, 283, 77, 388, 13, 283, 77, 388, 307, 1940, 264, 3380, 2445, 11, 264, 472, 291, 528, 281, 7019, 926, 11, 50742], "temperature": 0.0, "avg_logprob": -0.2004371854994032, "compression_ratio": 1.7796610169491525, "no_speech_prob": 0.002589258598163724}, {"id": 45, "seek": 28272, "start": 290.28000000000003, "end": 298.40000000000003, "text": " and up to three arguments are the default if you pass nil to that function. Let's", "tokens": [50742, 293, 493, 281, 1045, 12869, 366, 264, 7576, 498, 291, 1320, 297, 388, 281, 300, 2445, 13, 961, 311, 51148], "temperature": 0.0, "avg_logprob": -0.2004371854994032, "compression_ratio": 1.7796610169491525, "no_speech_prob": 0.002589258598163724}, {"id": 46, "seek": 28272, "start": 298.40000000000003, "end": 304.92, "text": " say we pass a nil rejects, so we can use for example the empty rejects as a", "tokens": [51148, 584, 321, 1320, 257, 297, 388, 8248, 82, 11, 370, 321, 393, 764, 337, 1365, 264, 6707, 8248, 82, 382, 257, 51474], "temperature": 0.0, "avg_logprob": -0.2004371854994032, "compression_ratio": 1.7796610169491525, "no_speech_prob": 0.002589258598163724}, {"id": 47, "seek": 28272, "start": 304.92, "end": 309.72, "text": " default, and we can use the empty string as a target string, as a default if you", "tokens": [51474, 7576, 11, 293, 321, 393, 764, 264, 6707, 6798, 382, 257, 3779, 6798, 11, 382, 257, 7576, 498, 291, 51714], "temperature": 0.0, "avg_logprob": -0.2004371854994032, "compression_ratio": 1.7796610169491525, "no_speech_prob": 0.002589258598163724}, {"id": 48, "seek": 30972, "start": 309.72, "end": 316.48, "text": " pass nil. Once you define this you refined, you can use it in place of your", "tokens": [50364, 1320, 297, 388, 13, 3443, 291, 6964, 341, 291, 26201, 11, 291, 393, 764, 309, 294, 1081, 295, 428, 50702], "temperature": 0.0, "avg_logprob": -0.16374227860394647, "compression_ratio": 1.6793478260869565, "no_speech_prob": 0.004976579919457436}, {"id": 49, "seek": 30972, "start": 316.48, "end": 325.68, "text": " old refined occurrences, and you just use it as usual. So you would pass any", "tokens": [50702, 1331, 26201, 5160, 38983, 11, 293, 291, 445, 764, 309, 382, 7713, 13, 407, 291, 576, 1320, 604, 51162], "temperature": 0.0, "avg_logprob": -0.16374227860394647, "compression_ratio": 1.6793478260869565, "no_speech_prob": 0.004976579919457436}, {"id": 50, "seek": 30972, "start": 325.68, "end": 330.48, "text": " rejects, and say you pass nil, this time we are getting back a nil, we are now", "tokens": [51162, 8248, 82, 11, 293, 584, 291, 1320, 297, 388, 11, 341, 565, 321, 366, 1242, 646, 257, 297, 388, 11, 321, 366, 586, 51402], "temperature": 0.0, "avg_logprob": -0.16374227860394647, "compression_ratio": 1.6793478260869565, "no_speech_prob": 0.004976579919457436}, {"id": 51, "seek": 30972, "start": 330.48, "end": 334.12, "text": " going null pointer exception, because we are replacing that nil with an empty", "tokens": [51402, 516, 18184, 23918, 11183, 11, 570, 321, 366, 19139, 300, 297, 388, 365, 364, 6707, 51584], "temperature": 0.0, "avg_logprob": -0.16374227860394647, "compression_ratio": 1.6793478260869565, "no_speech_prob": 0.004976579919457436}, {"id": 52, "seek": 33412, "start": 334.12, "end": 340.88, "text": " string, and we can do the same with rejects. If that is the case for", "tokens": [50364, 6798, 11, 293, 321, 393, 360, 264, 912, 365, 8248, 82, 13, 759, 300, 307, 264, 1389, 337, 50702], "temperature": 0.0, "avg_logprob": -0.1611523408156175, "compression_ratio": 1.4709677419354839, "no_speech_prob": 0.012963580898940563}, {"id": 53, "seek": 33412, "start": 340.88, "end": 345.08, "text": " your application you can do that with all arguments, not just the last or not", "tokens": [50702, 428, 3861, 291, 393, 360, 300, 365, 439, 12869, 11, 406, 445, 264, 1036, 420, 406, 50912], "temperature": 0.0, "avg_logprob": -0.1611523408156175, "compression_ratio": 1.4709677419354839, "no_speech_prob": 0.012963580898940563}, {"id": 54, "seek": 33412, "start": 345.08, "end": 353.04, "text": " just the first. How would it be without fnil? Why do you want to use it? Then you", "tokens": [50912, 445, 264, 700, 13, 1012, 576, 309, 312, 1553, 283, 77, 388, 30, 1545, 360, 291, 528, 281, 764, 309, 30, 1396, 291, 51310], "temperature": 0.0, "avg_logprob": -0.1611523408156175, "compression_ratio": 1.4709677419354839, "no_speech_prob": 0.012963580898940563}, {"id": 55, "seek": 35304, "start": 353.04, "end": 364.96000000000004, "text": " might have something like this, where you check, let's say string s, and then you", "tokens": [50364, 1062, 362, 746, 411, 341, 11, 689, 291, 1520, 11, 718, 311, 584, 6798, 262, 11, 293, 550, 291, 50960], "temperature": 0.0, "avg_logprob": -0.1913749189937816, "compression_ratio": 1.5389610389610389, "no_speech_prob": 0.027560345828533173}, {"id": 56, "seek": 35304, "start": 364.96000000000004, "end": 372.8, "text": " go through your rugged rejects to see if s is matching or not. Of course we", "tokens": [50960, 352, 807, 428, 42662, 8248, 82, 281, 536, 498, 262, 307, 14324, 420, 406, 13, 2720, 1164, 321, 51352], "temperature": 0.0, "avg_logprob": -0.1913749189937816, "compression_ratio": 1.5389610389610389, "no_speech_prob": 0.027560345828533173}, {"id": 57, "seek": 35304, "start": 372.8, "end": 381.64000000000004, "text": " don't have any s, so we define hello, and we try again, and as you can see it's", "tokens": [51352, 500, 380, 362, 604, 262, 11, 370, 321, 6964, 7751, 11, 293, 321, 853, 797, 11, 293, 382, 291, 393, 536, 309, 311, 51794], "temperature": 0.0, "avg_logprob": -0.1913749189937816, "compression_ratio": 1.5389610389610389, "no_speech_prob": 0.027560345828533173}, {"id": 58, "seek": 38164, "start": 381.64, "end": 386.8, "text": " going as expected, it's matching on a low, but with the when you can of course", "tokens": [50364, 516, 382, 5176, 11, 309, 311, 14324, 322, 257, 2295, 11, 457, 365, 264, 562, 291, 393, 295, 1164, 50622], "temperature": 0.0, "avg_logprob": -0.14626057007733514, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.00323641044087708}, {"id": 59, "seek": 38164, "start": 386.8, "end": 394.96, "text": " also pass in a nil, and that will go through. So essentially with fnil we", "tokens": [50622, 611, 1320, 294, 257, 297, 388, 11, 293, 300, 486, 352, 807, 13, 407, 4476, 365, 283, 77, 388, 321, 51030], "temperature": 0.0, "avg_logprob": -0.14626057007733514, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.00323641044087708}, {"id": 60, "seek": 38164, "start": 394.96, "end": 399.59999999999997, "text": " are able to replace a condition, this condition specifically, with a non", "tokens": [51030, 366, 1075, 281, 7406, 257, 4188, 11, 341, 4188, 4682, 11, 365, 257, 2107, 51262], "temperature": 0.0, "avg_logprob": -0.14626057007733514, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.00323641044087708}, {"id": 61, "seek": 38164, "start": 399.59999999999997, "end": 403.59999999999997, "text": " condition, with something that is not a condition. There is a condition inside", "tokens": [51262, 4188, 11, 365, 746, 300, 307, 406, 257, 4188, 13, 821, 307, 257, 4188, 1854, 51462], "temperature": 0.0, "avg_logprob": -0.14626057007733514, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.00323641044087708}, {"id": 62, "seek": 38164, "start": 403.59999999999997, "end": 409.2, "text": " fnil, but you don't see it, that's the important part. So you can use refined", "tokens": [51462, 283, 77, 388, 11, 457, 291, 500, 380, 536, 309, 11, 300, 311, 264, 1021, 644, 13, 407, 291, 393, 764, 26201, 51742], "temperature": 0.0, "avg_logprob": -0.14626057007733514, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.00323641044087708}, {"id": 63, "seek": 40920, "start": 409.32, "end": 416.68, "text": " plus, and everything goes without any exception. So you would use fnil if this", "tokens": [50370, 1804, 11, 293, 1203, 1709, 1553, 604, 11183, 13, 407, 291, 576, 764, 283, 77, 388, 498, 341, 50738], "temperature": 0.0, "avg_logprob": -0.18408870697021484, "compression_ratio": 1.6397849462365592, "no_speech_prob": 0.004932058043777943}, {"id": 64, "seek": 40920, "start": 416.68, "end": 422.08, "text": " kind of rule needs to be applied in multiple places in nana in space, or in", "tokens": [50738, 733, 295, 4978, 2203, 281, 312, 6456, 294, 3866, 3190, 294, 297, 2095, 294, 1901, 11, 420, 294, 51008], "temperature": 0.0, "avg_logprob": -0.18408870697021484, "compression_ratio": 1.6397849462365592, "no_speech_prob": 0.004932058043777943}, {"id": 65, "seek": 40920, "start": 422.08, "end": 427.08, "text": " multiple namespaces. So if you need to reuse this, you define the actual", "tokens": [51008, 3866, 5288, 79, 2116, 13, 407, 498, 291, 643, 281, 26225, 341, 11, 291, 6964, 264, 3539, 51258], "temperature": 0.0, "avg_logprob": -0.18408870697021484, "compression_ratio": 1.6397849462365592, "no_speech_prob": 0.004932058043777943}, {"id": 66, "seek": 40920, "start": 427.08, "end": 435.59999999999997, "text": " function, and you can reuse it across the application. So we talked about the", "tokens": [51258, 2445, 11, 293, 291, 393, 26225, 309, 2108, 264, 3861, 13, 407, 321, 2825, 466, 264, 51684], "temperature": 0.0, "avg_logprob": -0.18408870697021484, "compression_ratio": 1.6397849462365592, "no_speech_prob": 0.004932058043777943}, {"id": 67, "seek": 43560, "start": 435.6, "end": 441.32000000000005, "text": " arities of fnil, it's got only three, meaning that if you try something more", "tokens": [50364, 594, 1088, 295, 283, 77, 388, 11, 309, 311, 658, 787, 1045, 11, 3620, 300, 498, 291, 853, 746, 544, 50650], "temperature": 0.0, "avg_logprob": -0.14421881721133278, "compression_ratio": 1.7522522522522523, "no_speech_prob": 0.005493723321706057}, {"id": 68, "seek": 43560, "start": 441.32000000000005, "end": 447.56, "text": " than three, let's see what happens. So let's say you want to generate an fnil", "tokens": [50650, 813, 1045, 11, 718, 311, 536, 437, 2314, 13, 407, 718, 311, 584, 291, 528, 281, 8460, 364, 283, 77, 388, 50962], "temperature": 0.0, "avg_logprob": -0.14421881721133278, "compression_ratio": 1.7522522522522523, "no_speech_prob": 0.005493723321706057}, {"id": 69, "seek": 43560, "start": 447.56, "end": 452.20000000000005, "text": " for plus, where if you pass in any nil arguments, you're going to replace them", "tokens": [50962, 337, 1804, 11, 689, 498, 291, 1320, 294, 604, 297, 388, 12869, 11, 291, 434, 516, 281, 7406, 552, 51194], "temperature": 0.0, "avg_logprob": -0.14421881721133278, "compression_ratio": 1.7522522522522523, "no_speech_prob": 0.005493723321706057}, {"id": 70, "seek": 43560, "start": 452.20000000000005, "end": 460.0, "text": " with some like neutral number like zero for addition. So you want five of them,", "tokens": [51194, 365, 512, 411, 10598, 1230, 411, 4018, 337, 4500, 13, 407, 291, 528, 1732, 295, 552, 11, 51584], "temperature": 0.0, "avg_logprob": -0.14421881721133278, "compression_ratio": 1.7522522522522523, "no_speech_prob": 0.005493723321706057}, {"id": 71, "seek": 43560, "start": 460.0, "end": 464.32000000000005, "text": " but if you try you'll see that you're passing the wrong number of arguments", "tokens": [51584, 457, 498, 291, 853, 291, 603, 536, 300, 291, 434, 8437, 264, 2085, 1230, 295, 12869, 51800], "temperature": 0.0, "avg_logprob": -0.14421881721133278, "compression_ratio": 1.7522522522522523, "no_speech_prob": 0.005493723321706057}, {"id": 72, "seek": 46432, "start": 464.32, "end": 471.04, "text": " of fnil, because fnil only supports three of them, unfortunately. I would say", "tokens": [50364, 295, 283, 77, 388, 11, 570, 283, 77, 388, 787, 9346, 1045, 295, 552, 11, 7015, 13, 286, 576, 584, 50700], "temperature": 0.0, "avg_logprob": -0.15664587215501435, "compression_ratio": 1.6791666666666667, "no_speech_prob": 0.0010596021311357617}, {"id": 73, "seek": 46432, "start": 471.04, "end": 475.32, "text": " unfortunately up to certain points. So if you have a function with four, five, six", "tokens": [50700, 7015, 493, 281, 1629, 2793, 13, 407, 498, 291, 362, 257, 2445, 365, 1451, 11, 1732, 11, 2309, 50914], "temperature": 0.0, "avg_logprob": -0.15664587215501435, "compression_ratio": 1.6791666666666667, "no_speech_prob": 0.0010596021311357617}, {"id": 74, "seek": 46432, "start": 475.32, "end": 479.48, "text": " arguments, you're probably looking at something that needs refactoring in some", "tokens": [50914, 12869, 11, 291, 434, 1391, 1237, 412, 746, 300, 2203, 1895, 578, 3662, 294, 512, 51122], "temperature": 0.0, "avg_logprob": -0.15664587215501435, "compression_ratio": 1.6791666666666667, "no_speech_prob": 0.0010596021311357617}, {"id": 75, "seek": 46432, "start": 479.48, "end": 485.15999999999997, "text": " other ways, and probably some obstruction is missing, and you need to extract that", "tokens": [51122, 661, 2098, 11, 293, 1391, 512, 49711, 307, 5361, 11, 293, 291, 643, 281, 8947, 300, 51406], "temperature": 0.0, "avg_logprob": -0.15664587215501435, "compression_ratio": 1.6791666666666667, "no_speech_prob": 0.0010596021311357617}, {"id": 76, "seek": 46432, "start": 485.15999999999997, "end": 491.44, "text": " obstruction out, and remove or reduce the number of arguments. But let's say you", "tokens": [51406, 49711, 484, 11, 293, 4159, 420, 5407, 264, 1230, 295, 12869, 13, 583, 718, 311, 584, 291, 51720], "temperature": 0.0, "avg_logprob": -0.15664587215501435, "compression_ratio": 1.6791666666666667, "no_speech_prob": 0.0010596021311357617}, {"id": 77, "seek": 49144, "start": 491.44, "end": 500.71999999999997, "text": " really need that, we can easily extend fnil to support more arguments. To do that,", "tokens": [50364, 534, 643, 300, 11, 321, 393, 3612, 10101, 283, 77, 388, 281, 1406, 544, 12869, 13, 1407, 360, 300, 11, 50828], "temperature": 0.0, "avg_logprob": -0.1237226968788239, "compression_ratio": 1.6720430107526882, "no_speech_prob": 0.0018546950304880738}, {"id": 78, "seek": 49144, "start": 500.71999999999997, "end": 507.64, "text": " we'll define our own fnil, we'll call it fnil plus, and instead of taking like", "tokens": [50828, 321, 603, 6964, 527, 1065, 283, 77, 388, 11, 321, 603, 818, 309, 283, 77, 388, 1804, 11, 293, 2602, 295, 1940, 411, 51174], "temperature": 0.0, "avg_logprob": -0.1237226968788239, "compression_ratio": 1.6720430107526882, "no_speech_prob": 0.0018546950304880738}, {"id": 79, "seek": 49144, "start": 507.64, "end": 514.24, "text": " three arguments, we'll just take a variable number of arguments. Then as a", "tokens": [51174, 1045, 12869, 11, 321, 603, 445, 747, 257, 7006, 1230, 295, 12869, 13, 1396, 382, 257, 51504], "temperature": 0.0, "avg_logprob": -0.1237226968788239, "compression_ratio": 1.6720430107526882, "no_speech_prob": 0.0018546950304880738}, {"id": 80, "seek": 49144, "start": 514.24, "end": 520.88, "text": " contract, we'll definitely have to return the generated function, and this", "tokens": [51504, 4364, 11, 321, 603, 2138, 362, 281, 2736, 264, 10833, 2445, 11, 293, 341, 51836], "temperature": 0.0, "avg_logprob": -0.1237226968788239, "compression_ratio": 1.6720430107526882, "no_speech_prob": 0.0018546950304880738}, {"id": 81, "seek": 52088, "start": 520.88, "end": 526.64, "text": " would be a function of any number of arguments, because this is what the", "tokens": [50364, 576, 312, 257, 2445, 295, 604, 1230, 295, 12869, 11, 570, 341, 307, 437, 264, 50652], "temperature": 0.0, "avg_logprob": -0.13358235677083333, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0007179281674325466}, {"id": 82, "seek": 52088, "start": 526.64, "end": 531.96, "text": " problem we are trying to solve, so to wrap with fnil a function as more than", "tokens": [50652, 1154, 321, 366, 1382, 281, 5039, 11, 370, 281, 7019, 365, 283, 77, 388, 257, 2445, 382, 544, 813, 50918], "temperature": 0.0, "avg_logprob": -0.13358235677083333, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0007179281674325466}, {"id": 83, "seek": 52088, "start": 531.96, "end": 539.6, "text": " three arguments, potentially any number. What we need to do then is apply the", "tokens": [50918, 1045, 12869, 11, 7263, 604, 1230, 13, 708, 321, 643, 281, 360, 550, 307, 3079, 264, 51300], "temperature": 0.0, "avg_logprob": -0.13358235677083333, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0007179281674325466}, {"id": 84, "seek": 52088, "start": 539.6, "end": 546.68, "text": " target function to these arguments, but when we do apply to the arguments we", "tokens": [51300, 3779, 2445, 281, 613, 12869, 11, 457, 562, 321, 360, 3079, 281, 264, 12869, 321, 51654], "temperature": 0.0, "avg_logprob": -0.13358235677083333, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0007179281674325466}, {"id": 85, "seek": 54668, "start": 546.68, "end": 551.8399999999999, "text": " need to take care of the potential nil arguments, and replace them with something", "tokens": [50364, 643, 281, 747, 1127, 295, 264, 3995, 297, 388, 12869, 11, 293, 7406, 552, 365, 746, 50622], "temperature": 0.0, "avg_logprob": -0.17736238088363257, "compression_ratio": 1.7457627118644068, "no_speech_prob": 0.006274751387536526}, {"id": 86, "seek": 54668, "start": 551.8399999999999, "end": 558.5, "text": " that is coming from the options that we are passing to fnil. You need to", "tokens": [50622, 300, 307, 1348, 490, 264, 3956, 300, 321, 366, 8437, 281, 283, 77, 388, 13, 509, 643, 281, 50955], "temperature": 0.0, "avg_logprob": -0.17736238088363257, "compression_ratio": 1.7457627118644068, "no_speech_prob": 0.006274751387536526}, {"id": 87, "seek": 54668, "start": 558.5, "end": 563.76, "text": " take care also of the fact that the number of arguments you're going to apply", "tokens": [50955, 747, 1127, 611, 295, 264, 1186, 300, 264, 1230, 295, 12869, 291, 434, 516, 281, 3079, 51218], "temperature": 0.0, "avg_logprob": -0.17736238088363257, "compression_ratio": 1.7457627118644068, "no_speech_prob": 0.006274751387536526}, {"id": 88, "seek": 54668, "start": 563.76, "end": 572.7199999999999, "text": " f to might be less of the number of arguments that you have defaults for. So", "tokens": [51218, 283, 281, 1062, 312, 1570, 295, 264, 1230, 295, 12869, 300, 291, 362, 7576, 82, 337, 13, 407, 51666], "temperature": 0.0, "avg_logprob": -0.17736238088363257, "compression_ratio": 1.7457627118644068, "no_speech_prob": 0.006274751387536526}, {"id": 89, "seek": 57272, "start": 572.76, "end": 583.8000000000001, "text": " what I'm going to do is to create a sequence that contains nil defaults for", "tokens": [50366, 437, 286, 478, 516, 281, 360, 307, 281, 1884, 257, 8310, 300, 8306, 297, 388, 7576, 82, 337, 50918], "temperature": 0.0, "avg_logprob": -0.16042533753410218, "compression_ratio": 1.5436241610738255, "no_speech_prob": 0.0008542895666323602}, {"id": 90, "seek": 57272, "start": 583.8000000000001, "end": 591.24, "text": " all those defaults that are not given as options. Better showing you what I'm", "tokens": [50918, 439, 729, 7576, 82, 300, 366, 406, 2212, 382, 3956, 13, 15753, 4099, 291, 437, 286, 478, 51290], "temperature": 0.0, "avg_logprob": -0.16042533753410218, "compression_ratio": 1.5436241610738255, "no_speech_prob": 0.0008542895666323602}, {"id": 91, "seek": 57272, "start": 591.24, "end": 602.6800000000001, "text": " talking about, so I'm going to map over the sequence, and if I'm in front of", "tokens": [51290, 1417, 466, 11, 370, 286, 478, 516, 281, 4471, 670, 264, 8310, 11, 293, 498, 286, 478, 294, 1868, 295, 51862], "temperature": 0.0, "avg_logprob": -0.16042533753410218, "compression_ratio": 1.5436241610738255, "no_speech_prob": 0.0008542895666323602}, {"id": 92, "seek": 60268, "start": 602.68, "end": 608.28, "text": " a nil argument, then I'm going to return the default. This is the logic. If not,", "tokens": [50364, 257, 297, 388, 6770, 11, 550, 286, 478, 516, 281, 2736, 264, 7576, 13, 639, 307, 264, 9952, 13, 759, 406, 11, 50644], "temperature": 0.0, "avg_logprob": -0.18667292875402114, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.0019480339251458645}, {"id": 93, "seek": 60268, "start": 608.28, "end": 612.5999999999999, "text": " then I can just return the argument. I don't need to do anything, and what I'm", "tokens": [50644, 550, 286, 393, 445, 2736, 264, 6770, 13, 286, 500, 380, 643, 281, 360, 1340, 11, 293, 437, 286, 478, 50860], "temperature": 0.0, "avg_logprob": -0.18667292875402114, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.0019480339251458645}, {"id": 94, "seek": 60268, "start": 612.5999999999999, "end": 618.3199999999999, "text": " mapping on are the arguments, what would be actually passed in during the", "tokens": [50860, 18350, 322, 366, 264, 12869, 11, 437, 576, 312, 767, 4678, 294, 1830, 264, 51146], "temperature": 0.0, "avg_logprob": -0.18667292875402114, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.0019480339251458645}, {"id": 95, "seek": 60268, "start": 618.3199999999999, "end": 629.04, "text": " invocation, and a sequence that is the concatenation of opts, which are my", "tokens": [51146, 1048, 27943, 11, 293, 257, 8310, 300, 307, 264, 1588, 7186, 399, 295, 2427, 82, 11, 597, 366, 452, 51682], "temperature": 0.0, "avg_logprob": -0.18667292875402114, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.0019480339251458645}, {"id": 96, "seek": 62904, "start": 629.0799999999999, "end": 634.4, "text": " options, my defaults, with any number of nils to pad at the end. This makes sure", "tokens": [50366, 3956, 11, 452, 7576, 82, 11, 365, 604, 1230, 295, 297, 4174, 281, 6887, 412, 264, 917, 13, 639, 1669, 988, 50632], "temperature": 0.0, "avg_logprob": -0.1687466821005178, "compression_ratio": 1.6020942408376964, "no_speech_prob": 0.004255334381014109}, {"id": 97, "seek": 62904, "start": 634.4, "end": 642.9599999999999, "text": " that I have enough defaults, I have always enough defaults to cover any", "tokens": [50632, 300, 286, 362, 1547, 7576, 82, 11, 286, 362, 1009, 1547, 7576, 82, 281, 2060, 604, 51060], "temperature": 0.0, "avg_logprob": -0.1687466821005178, "compression_ratio": 1.6020942408376964, "no_speech_prob": 0.004255334381014109}, {"id": 98, "seek": 62904, "start": 642.9599999999999, "end": 648.88, "text": " possible cases, even if they are not. The right number of arguments is not", "tokens": [51060, 1944, 3331, 11, 754, 498, 436, 366, 406, 13, 440, 558, 1230, 295, 12869, 307, 406, 51356], "temperature": 0.0, "avg_logprob": -0.1687466821005178, "compression_ratio": 1.6020942408376964, "no_speech_prob": 0.004255334381014109}, {"id": 99, "seek": 62904, "start": 648.88, "end": 657.8399999999999, "text": " passed in. So if we do this, I'm going to show you what this new fnil plus can", "tokens": [51356, 4678, 294, 13, 407, 498, 321, 360, 341, 11, 286, 478, 516, 281, 855, 291, 437, 341, 777, 283, 77, 388, 1804, 393, 51804], "temperature": 0.0, "avg_logprob": -0.1687466821005178, "compression_ratio": 1.6020942408376964, "no_speech_prob": 0.004255334381014109}, {"id": 100, "seek": 65784, "start": 657.84, "end": 663.32, "text": " do, and for example in the case of plus that we were looking at before, we'll", "tokens": [50364, 360, 11, 293, 337, 1365, 294, 264, 1389, 295, 1804, 300, 321, 645, 1237, 412, 949, 11, 321, 603, 50638], "temperature": 0.0, "avg_logprob": -0.16736611975244728, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.0022851929534226656}, {"id": 101, "seek": 65784, "start": 663.32, "end": 669.2, "text": " define a new plus plus function that is using fnil plus instead of the normal", "tokens": [50638, 6964, 257, 777, 1804, 1804, 2445, 300, 307, 1228, 283, 77, 388, 1804, 2602, 295, 264, 2710, 50932], "temperature": 0.0, "avg_logprob": -0.16736611975244728, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.0022851929534226656}, {"id": 102, "seek": 65784, "start": 669.2, "end": 675.96, "text": " fnil, over plus, which is our target function, and then we say I want like", "tokens": [50932, 283, 77, 388, 11, 670, 1804, 11, 597, 307, 527, 3779, 2445, 11, 293, 550, 321, 584, 286, 528, 411, 51270], "temperature": 0.0, "avg_logprob": -0.16736611975244728, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.0022851929534226656}, {"id": 103, "seek": 65784, "start": 675.96, "end": 684.24, "text": " five potential defaults for nils that are passed in to my plus function, or", "tokens": [51270, 1732, 3995, 7576, 82, 337, 297, 4174, 300, 366, 4678, 294, 281, 452, 1804, 2445, 11, 420, 51684], "temperature": 0.0, "avg_logprob": -0.16736611975244728, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.0022851929534226656}, {"id": 104, "seek": 68424, "start": 684.28, "end": 689.52, "text": " double plus function. So what I can do now that I was unable to do", "tokens": [50366, 3834, 1804, 2445, 13, 407, 437, 286, 393, 360, 586, 300, 286, 390, 11299, 281, 360, 50628], "temperature": 0.0, "avg_logprob": -0.18583669566144848, "compression_ratio": 1.719626168224299, "no_speech_prob": 0.00617167167365551}, {"id": 105, "seek": 68424, "start": 689.52, "end": 696.04, "text": " before, and I show you what I'm able to do now, if I do this with the normal plus", "tokens": [50628, 949, 11, 293, 286, 855, 291, 437, 286, 478, 1075, 281, 360, 586, 11, 498, 286, 360, 341, 365, 264, 2710, 1804, 50954], "temperature": 0.0, "avg_logprob": -0.18583669566144848, "compression_ratio": 1.719626168224299, "no_speech_prob": 0.00617167167365551}, {"id": 106, "seek": 68424, "start": 696.04, "end": 703.12, "text": " I'm getting null pointer exception, but if I use the double plus, that is going", "tokens": [50954, 286, 478, 1242, 18184, 23918, 11183, 11, 457, 498, 286, 764, 264, 3834, 1804, 11, 300, 307, 516, 51308], "temperature": 0.0, "avg_logprob": -0.18583669566144848, "compression_ratio": 1.719626168224299, "no_speech_prob": 0.00617167167365551}, {"id": 107, "seek": 68424, "start": 703.12, "end": 708.4, "text": " through, and is summing up all the numbers that are available, is", "tokens": [51308, 807, 11, 293, 307, 2408, 2810, 493, 439, 264, 3547, 300, 366, 2435, 11, 307, 51572], "temperature": 0.0, "avg_logprob": -0.18583669566144848, "compression_ratio": 1.719626168224299, "no_speech_prob": 0.00617167167365551}, {"id": 108, "seek": 68424, "start": 708.4, "end": 712.96, "text": " basically removing the nil from the list of arguments, and summing up the", "tokens": [51572, 1936, 12720, 264, 297, 388, 490, 264, 1329, 295, 12869, 11, 293, 2408, 2810, 493, 264, 51800], "temperature": 0.0, "avg_logprob": -0.18583669566144848, "compression_ratio": 1.719626168224299, "no_speech_prob": 0.00617167167365551}, {"id": 109, "seek": 71296, "start": 712.96, "end": 722.84, "text": " rest, and it's replacing nil with the default I gave, which is a zero. As", "tokens": [50364, 1472, 11, 293, 309, 311, 19139, 297, 388, 365, 264, 7576, 286, 2729, 11, 597, 307, 257, 4018, 13, 1018, 50858], "temperature": 0.0, "avg_logprob": -0.25830778290953815, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0022011033724993467}, {"id": 110, "seek": 71296, "start": 722.84, "end": 728.08, "text": " potential alternatives, we saw that you can use when, you can use a", "tokens": [50858, 3995, 20478, 11, 321, 1866, 300, 291, 393, 764, 562, 11, 291, 393, 764, 257, 51120], "temperature": 0.0, "avg_logprob": -0.25830778290953815, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0022011033724993467}, {"id": 111, "seek": 71296, "start": 728.08, "end": 731.72, "text": " condition, you can use a try-catch. There's also another interesting function", "tokens": [51120, 4188, 11, 291, 393, 764, 257, 853, 12, 66, 852, 13, 821, 311, 611, 1071, 1880, 2445, 51302], "temperature": 0.0, "avg_logprob": -0.25830778290953815, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0022011033724993467}, {"id": 112, "seek": 71296, "start": 731.72, "end": 737.48, "text": " in the standard library you could use. If you don't need this behavior to be", "tokens": [51302, 294, 264, 3832, 6405, 291, 727, 764, 13, 759, 291, 500, 380, 643, 341, 5223, 281, 312, 51590], "temperature": 0.0, "avg_logprob": -0.25830778290953815, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0022011033724993467}, {"id": 113, "seek": 73748, "start": 737.76, "end": 743.6, "text": " reused, and the entire application, and this is the threaded thread first and", "tokens": [50378, 319, 4717, 11, 293, 264, 2302, 3861, 11, 293, 341, 307, 264, 47493, 7207, 700, 293, 50670], "temperature": 0.0, "avg_logprob": -0.2912010992726972, "compression_ratio": 1.6223776223776223, "no_speech_prob": 0.0355474129319191}, {"id": 114, "seek": 73748, "start": 743.6, "end": 752.6800000000001, "text": " thread last sum option, and if I do, for example, if I do pass hello to my", "tokens": [50670, 7207, 1036, 2408, 3614, 11, 293, 498, 286, 360, 11, 337, 1365, 11, 498, 286, 360, 1320, 7751, 281, 452, 51124], "temperature": 0.0, "avg_logprob": -0.2912010992726972, "compression_ratio": 1.6223776223776223, "no_speech_prob": 0.0355474129319191}, {"id": 115, "seek": 73748, "start": 752.6800000000001, "end": 763.24, "text": " refined, where I'm checking a you hello thing, this is perfectly fine, and this", "tokens": [51124, 26201, 11, 689, 286, 478, 8568, 257, 291, 7751, 551, 11, 341, 307, 6239, 2489, 11, 293, 341, 51652], "temperature": 0.0, "avg_logprob": -0.2912010992726972, "compression_ratio": 1.6223776223776223, "no_speech_prob": 0.0355474129319191}, {"id": 116, "seek": 76324, "start": 763.24, "end": 772.0, "text": " got also the nice, oh, why is returning nil?", "tokens": [50364, 658, 611, 264, 1481, 11, 1954, 11, 983, 307, 12678, 297, 388, 30, 50802], "temperature": 0.0, "avg_logprob": -0.4220506227933444, "compression_ratio": 1.2323232323232323, "no_speech_prob": 0.003477263730019331}, {"id": 117, "seek": 76324, "start": 779.32, "end": 787.88, "text": " Interesting, and let me just check why this is it, this is the case, I wasn't", "tokens": [51168, 14711, 11, 293, 718, 385, 445, 1520, 983, 341, 307, 309, 11, 341, 307, 264, 1389, 11, 286, 2067, 380, 51596], "temperature": 0.0, "avg_logprob": -0.4220506227933444, "compression_ratio": 1.2323232323232323, "no_speech_prob": 0.003477263730019331}, {"id": 118, "seek": 78788, "start": 787.88, "end": 799.16, "text": " expecting that. Oh yeah, I inverted the rejects, sorry for that. So, well anyway,", "tokens": [50364, 9650, 300, 13, 876, 1338, 11, 286, 38969, 264, 8248, 82, 11, 2597, 337, 300, 13, 407, 11, 731, 4033, 11, 50928], "temperature": 0.0, "avg_logprob": -0.1946053159409675, "compression_ratio": 1.5031055900621118, "no_speech_prob": 0.004325671587139368}, {"id": 119, "seek": 78788, "start": 799.16, "end": 808.96, "text": " let's say I'm searching hello, and I'm finding hello, the good thing about some", "tokens": [50928, 718, 311, 584, 286, 478, 10808, 7751, 11, 293, 286, 478, 5006, 7751, 11, 264, 665, 551, 466, 512, 51418], "temperature": 0.0, "avg_logprob": -0.1946053159409675, "compression_ratio": 1.5031055900621118, "no_speech_prob": 0.004325671587139368}, {"id": 120, "seek": 78788, "start": 808.96, "end": 817.08, "text": " threaded last is that I can also pass in nil, so let's say my s is still defined", "tokens": [51418, 47493, 1036, 307, 300, 286, 393, 611, 1320, 294, 297, 388, 11, 370, 718, 311, 584, 452, 262, 307, 920, 7642, 51824], "temperature": 0.0, "avg_logprob": -0.1946053159409675, "compression_ratio": 1.5031055900621118, "no_speech_prob": 0.004325671587139368}, {"id": 121, "seek": 81708, "start": 817.08, "end": 821.84, "text": " as nil, if I have this input coming through, and I pass it through, this will", "tokens": [50364, 382, 297, 388, 11, 498, 286, 362, 341, 4846, 1348, 807, 11, 293, 286, 1320, 309, 807, 11, 341, 486, 50602], "temperature": 0.0, "avg_logprob": -0.12728351286087913, "compression_ratio": 1.7572254335260116, "no_speech_prob": 0.001833761460147798}, {"id": 122, "seek": 81708, "start": 821.84, "end": 829.0, "text": " have the same effect as f nil, and this is a nice alternative, as I said, this is", "tokens": [50602, 362, 264, 912, 1802, 382, 283, 297, 388, 11, 293, 341, 307, 257, 1481, 8535, 11, 382, 286, 848, 11, 341, 307, 50960], "temperature": 0.0, "avg_logprob": -0.12728351286087913, "compression_ratio": 1.7572254335260116, "no_speech_prob": 0.001833761460147798}, {"id": 123, "seek": 81708, "start": 829.0, "end": 836.0, "text": " not something you would assign to a var in a namespace to reuse, this is", "tokens": [50960, 406, 746, 291, 576, 6269, 281, 257, 1374, 294, 257, 5288, 17940, 281, 26225, 11, 341, 307, 51310], "temperature": 0.0, "avg_logprob": -0.12728351286087913, "compression_ratio": 1.7572254335260116, "no_speech_prob": 0.001833761460147798}, {"id": 124, "seek": 81708, "start": 836.0, "end": 842.0, "text": " something you use once, and if that is the case for you, this is a good", "tokens": [51310, 746, 291, 764, 1564, 11, 293, 498, 300, 307, 264, 1389, 337, 291, 11, 341, 307, 257, 665, 51610], "temperature": 0.0, "avg_logprob": -0.12728351286087913, "compression_ratio": 1.7572254335260116, "no_speech_prob": 0.001833761460147798}, {"id": 125, "seek": 84200, "start": 842.0, "end": 849.52, "text": " alternative. Last thing I want to talk about in this first screencast is the", "tokens": [50364, 8535, 13, 5264, 551, 286, 528, 281, 751, 466, 294, 341, 700, 2568, 3734, 307, 264, 50740], "temperature": 0.0, "avg_logprob": -0.2000446319580078, "compression_ratio": 1.4842767295597483, "no_speech_prob": 0.002879615407437086}, {"id": 126, "seek": 84200, "start": 849.52, "end": 857.52, "text": " performance profile of nil, so f nil as it is, like in the standard library, let's", "tokens": [50740, 3389, 7964, 295, 297, 388, 11, 370, 283, 297, 388, 382, 309, 307, 11, 411, 294, 264, 3832, 6405, 11, 718, 311, 51140], "temperature": 0.0, "avg_logprob": -0.2000446319580078, "compression_ratio": 1.4842767295597483, "no_speech_prob": 0.002879615407437086}, {"id": 127, "seek": 84200, "start": 857.52, "end": 864.08, "text": " have a look again, and the sources is a very simple function, it's not doing", "tokens": [51140, 362, 257, 574, 797, 11, 293, 264, 7139, 307, 257, 588, 2199, 2445, 11, 309, 311, 406, 884, 51468], "temperature": 0.0, "avg_logprob": -0.2000446319580078, "compression_ratio": 1.4842767295597483, "no_speech_prob": 0.002879615407437086}, {"id": 128, "seek": 86408, "start": 864.84, "end": 886.2800000000001, "text": " anything particularly bad, it's just basically using nested if statement to obtain the", "tokens": [50402, 1340, 4098, 1578, 11, 309, 311, 445, 1936, 1228, 15646, 292, 498, 5629, 281, 12701, 264, 51474], "temperature": 0.0, "avg_logprob": -0.4070298671722412, "compression_ratio": 1.1025641025641026, "no_speech_prob": 0.010629852302372456}, {"id": 129, "seek": 88628, "start": 886.28, "end": 894.24, "text": " effect of replacing the nil with the default you give, the performance", "tokens": [50364, 1802, 295, 19139, 264, 297, 388, 365, 264, 7576, 291, 976, 11, 264, 3389, 50762], "temperature": 0.0, "avg_logprob": -0.18796257350755774, "compression_ratio": 1.7151162790697674, "no_speech_prob": 0.05438537523150444}, {"id": 130, "seek": 88628, "start": 894.24, "end": 898.6, "text": " profile of this with the limitation that you cannot pass more than three", "tokens": [50762, 7964, 295, 341, 365, 264, 27432, 300, 291, 2644, 1320, 544, 813, 1045, 50980], "temperature": 0.0, "avg_logprob": -0.18796257350755774, "compression_ratio": 1.7151162790697674, "no_speech_prob": 0.05438537523150444}, {"id": 131, "seek": 88628, "start": 898.6, "end": 904.76, "text": " arguments is a constant time generation of the function, and a constant time", "tokens": [50980, 12869, 307, 257, 5754, 565, 5125, 295, 264, 2445, 11, 293, 257, 5754, 565, 51288], "temperature": 0.0, "avg_logprob": -0.18796257350755774, "compression_ratio": 1.7151162790697674, "no_speech_prob": 0.05438537523150444}, {"id": 132, "seek": 88628, "start": 904.76, "end": 911.3199999999999, "text": " application as well, big O of three basically, with the f nil plus that we", "tokens": [51288, 3861, 382, 731, 11, 955, 422, 295, 1045, 1936, 11, 365, 264, 283, 297, 388, 1804, 300, 321, 51616], "temperature": 0.0, "avg_logprob": -0.18796257350755774, "compression_ratio": 1.7151162790697674, "no_speech_prob": 0.05438537523150444}, {"id": 133, "seek": 91132, "start": 911.32, "end": 918.24, "text": " showed before, instead the generation is still remaining a constant time, so", "tokens": [50364, 4712, 949, 11, 2602, 264, 5125, 307, 920, 8877, 257, 5754, 565, 11, 370, 50710], "temperature": 0.0, "avg_logprob": -0.16211927753605254, "compression_ratio": 1.6795580110497237, "no_speech_prob": 0.009868109598755836}, {"id": 134, "seek": 91132, "start": 918.24, "end": 922.2, "text": " f nil will generate just fine in constant time, but the application of course", "tokens": [50710, 283, 297, 388, 486, 8460, 445, 2489, 294, 5754, 565, 11, 457, 264, 3861, 295, 1164, 50908], "temperature": 0.0, "avg_logprob": -0.16211927753605254, "compression_ratio": 1.6795580110497237, "no_speech_prob": 0.009868109598755836}, {"id": 135, "seek": 91132, "start": 922.2, "end": 926.72, "text": " will be linear, because we'll have to iterate through the number of arguments", "tokens": [50908, 486, 312, 8213, 11, 570, 321, 603, 362, 281, 44497, 807, 264, 1230, 295, 12869, 51134], "temperature": 0.0, "avg_logprob": -0.16211927753605254, "compression_ratio": 1.6795580110497237, "no_speech_prob": 0.009868109598755836}, {"id": 136, "seek": 91132, "start": 926.72, "end": 933.0400000000001, "text": " you're passing through, and check if they're nil, and apply the rule to", "tokens": [51134, 291, 434, 8437, 807, 11, 293, 1520, 498, 436, 434, 297, 388, 11, 293, 3079, 264, 4978, 281, 51450], "temperature": 0.0, "avg_logprob": -0.16211927753605254, "compression_ratio": 1.6795580110497237, "no_speech_prob": 0.009868109598755836}, {"id": 137, "seek": 93304, "start": 933.04, "end": 941.7199999999999, "text": " replace the nil argument with the default. We can see that quite easily if we, for", "tokens": [50364, 7406, 264, 297, 388, 6770, 365, 264, 7576, 13, 492, 393, 536, 300, 1596, 3612, 498, 321, 11, 337, 50798], "temperature": 0.0, "avg_logprob": -0.2304355502128601, "compression_ratio": 1.361344537815126, "no_speech_prob": 0.008027661591768265}, {"id": 138, "seek": 93304, "start": 941.7199999999999, "end": 956.1999999999999, "text": " example, if we take f nil plus, and we create, well, so let's redefine our plus", "tokens": [50798, 1365, 11, 498, 321, 747, 283, 297, 388, 1804, 11, 293, 321, 1884, 11, 731, 11, 370, 718, 311, 38818, 533, 527, 1804, 51522], "temperature": 0.0, "avg_logprob": -0.2304355502128601, "compression_ratio": 1.361344537815126, "no_speech_prob": 0.008027661591768265}, {"id": 139, "seek": 95620, "start": 956.4000000000001, "end": 963.44, "text": " function with nil plus, where instead of just using like five arguments as we did", "tokens": [50374, 2445, 365, 297, 388, 1804, 11, 689, 2602, 295, 445, 1228, 411, 1732, 12869, 382, 321, 630, 50726], "temperature": 0.0, "avg_logprob": -0.19676393175882007, "compression_ratio": 1.5947712418300655, "no_speech_prob": 0.023722492158412933}, {"id": 140, "seek": 95620, "start": 963.44, "end": 973.1600000000001, "text": " before, we give defaults for like a big range of arguments, let's say one billion", "tokens": [50726, 949, 11, 321, 976, 7576, 82, 337, 411, 257, 955, 3613, 295, 12869, 11, 718, 311, 584, 472, 5218, 51212], "temperature": 0.0, "avg_logprob": -0.19676393175882007, "compression_ratio": 1.5947712418300655, "no_speech_prob": 0.023722492158412933}, {"id": 141, "seek": 95620, "start": 973.1600000000001, "end": 981.1600000000001, "text": " or so of arguments, so this generation is just instant, it's a constant time, we", "tokens": [51212, 420, 370, 295, 12869, 11, 370, 341, 5125, 307, 445, 9836, 11, 309, 311, 257, 5754, 565, 11, 321, 51612], "temperature": 0.0, "avg_logprob": -0.19676393175882007, "compression_ratio": 1.5947712418300655, "no_speech_prob": 0.023722492158412933}, {"id": 142, "seek": 98116, "start": 981.16, "end": 986.3199999999999, "text": " don't need to go, we don't need to iterate through the range at the moment,", "tokens": [50364, 500, 380, 643, 281, 352, 11, 321, 500, 380, 643, 281, 44497, 807, 264, 3613, 412, 264, 1623, 11, 50622], "temperature": 0.0, "avg_logprob": -0.1861332326695539, "compression_ratio": 1.554054054054054, "no_speech_prob": 0.0026285327039659023}, {"id": 143, "seek": 98116, "start": 986.3199999999999, "end": 992.7199999999999, "text": " everything is lazy, it's going to be iterated as you use it, if you then use", "tokens": [50622, 1203, 307, 14847, 11, 309, 311, 516, 281, 312, 17138, 770, 382, 291, 764, 309, 11, 498, 291, 550, 764, 50942], "temperature": 0.0, "avg_logprob": -0.1861332326695539, "compression_ratio": 1.554054054054054, "no_speech_prob": 0.0026285327039659023}, {"id": 144, "seek": 98116, "start": 992.7199999999999, "end": 1005.28, "text": " the plus plus function, as usual, yes, oops, I did, I did apply f nil without", "tokens": [50942, 264, 1804, 1804, 2445, 11, 382, 7713, 11, 2086, 11, 34166, 11, 286, 630, 11, 286, 630, 3079, 283, 297, 388, 1553, 51570], "temperature": 0.0, "avg_logprob": -0.1861332326695539, "compression_ratio": 1.554054054054054, "no_speech_prob": 0.0026285327039659023}, {"id": 145, "seek": 100528, "start": 1005.3199999999999, "end": 1014.24, "text": " specifying the plus, if we do this, this is still, it's not going to, it's not", "tokens": [50366, 1608, 5489, 264, 1804, 11, 498, 321, 360, 341, 11, 341, 307, 920, 11, 309, 311, 406, 516, 281, 11, 309, 311, 406, 50812], "temperature": 0.0, "avg_logprob": -0.13618889483776722, "compression_ratio": 1.770949720670391, "no_speech_prob": 0.020907098427414894}, {"id": 146, "seek": 100528, "start": 1014.24, "end": 1020.04, "text": " going through the entire sequence of the range to apply the defaults, because we", "tokens": [50812, 516, 807, 264, 2302, 8310, 295, 264, 3613, 281, 3079, 264, 7576, 82, 11, 570, 321, 51102], "temperature": 0.0, "avg_logprob": -0.13618889483776722, "compression_ratio": 1.770949720670391, "no_speech_prob": 0.020907098427414894}, {"id": 147, "seek": 100528, "start": 1020.04, "end": 1024.36, "text": " are not passing enough arguments, and soon as we go up with that, so let's put a", "tokens": [51102, 366, 406, 8437, 1547, 12869, 11, 293, 2321, 382, 321, 352, 493, 365, 300, 11, 370, 718, 311, 829, 257, 51318], "temperature": 0.0, "avg_logprob": -0.13618889483776722, "compression_ratio": 1.770949720670391, "no_speech_prob": 0.020907098427414894}, {"id": 148, "seek": 100528, "start": 1024.36, "end": 1031.04, "text": " time on this, as soon, of course, as soon as we go up with this, so we apply", "tokens": [51318, 565, 322, 341, 11, 382, 2321, 11, 295, 1164, 11, 382, 2321, 382, 321, 352, 493, 365, 341, 11, 370, 321, 3079, 51652], "temperature": 0.0, "avg_logprob": -0.13618889483776722, "compression_ratio": 1.770949720670391, "no_speech_prob": 0.020907098427414894}, {"id": 149, "seek": 103104, "start": 1031.56, "end": 1043.6, "text": " double plus to more arguments, say, 10, 10 millions, and we see that the time to", "tokens": [50390, 3834, 1804, 281, 544, 12869, 11, 584, 11, 1266, 11, 1266, 6803, 11, 293, 321, 536, 300, 264, 565, 281, 50992], "temperature": 0.0, "avg_logprob": -0.2194145417982532, "compression_ratio": 1.5753424657534247, "no_speech_prob": 0.010418642312288284}, {"id": 150, "seek": 103104, "start": 1043.6, "end": 1050.8, "text": " do this computation go up, and it's roughly linear computation, and it's", "tokens": [50992, 360, 341, 24903, 352, 493, 11, 293, 309, 311, 9810, 8213, 24903, 11, 293, 309, 311, 51352], "temperature": 0.0, "avg_logprob": -0.2194145417982532, "compression_ratio": 1.5753424657534247, "no_speech_prob": 0.010418642312288284}, {"id": 151, "seek": 103104, "start": 1050.8, "end": 1056.52, "text": " coming back now in eight, eight, about eight seconds, so this is it for this", "tokens": [51352, 1348, 646, 586, 294, 3180, 11, 3180, 11, 466, 3180, 3949, 11, 370, 341, 307, 309, 337, 341, 51638], "temperature": 0.0, "avg_logprob": -0.2194145417982532, "compression_ratio": 1.5753424657534247, "no_speech_prob": 0.010418642312288284}, {"id": 152, "seek": 105652, "start": 1056.52, "end": 1064.04, "text": " first episode, I hope you enjoyed, if you like this content, have a look at the", "tokens": [50364, 700, 3500, 11, 286, 1454, 291, 4626, 11, 498, 291, 411, 341, 2701, 11, 362, 257, 574, 412, 264, 50740], "temperature": 0.0, "avg_logprob": -0.13298847014645496, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.0909462496638298}, {"id": 153, "seek": 105652, "start": 1064.04, "end": 1069.96, "text": " book, a few sample chapters are available, and also if you enjoyed this", "tokens": [50740, 1446, 11, 257, 1326, 6889, 20013, 366, 2435, 11, 293, 611, 498, 291, 4626, 341, 51036], "temperature": 0.0, "avg_logprob": -0.13298847014645496, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.0909462496638298}, {"id": 154, "seek": 105652, "start": 1069.96, "end": 1074.44, "text": " screencast, I hope you'll enjoy the next one, roughly one week, I hope to keep up", "tokens": [51036, 2568, 3734, 11, 286, 1454, 291, 603, 2103, 264, 958, 472, 11, 9810, 472, 1243, 11, 286, 1454, 281, 1066, 493, 51260], "temperature": 0.0, "avg_logprob": -0.13298847014645496, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.0909462496638298}, {"id": 155, "seek": 105652, "start": 1074.44, "end": 1081.52, "text": " with the weekly thing, the weekly screencast plan, I might miss one or two,", "tokens": [51260, 365, 264, 12460, 551, 11, 264, 12460, 2568, 3734, 1393, 11, 286, 1062, 1713, 472, 420, 732, 11, 51614], "temperature": 0.0, "avg_logprob": -0.13298847014645496, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.0909462496638298}, {"id": 156, "seek": 108152, "start": 1081.52, "end": 1089.24, "text": " but we'll see how it goes, so thank you for listening, goodbye.", "tokens": [50364, 457, 321, 603, 536, 577, 309, 1709, 11, 370, 1309, 291, 337, 4764, 11, 12084, 13, 50750], "temperature": 0.0, "avg_logprob": -0.3348728230125026, "compression_ratio": 0.9402985074626866, "no_speech_prob": 0.023561840876936913}], "language": "en"}