start	end	text
0	7920	Hello and welcome to this first episode of The Closure Pills. I'm planning to
7920	14000	make this a weekly thing where we go through the functions in the standard
14000	18800	library, in the closure standard library. There are many of them, this is like worth
18800	24880	a few years of screencasts. I'm not sure if we are gonna go that far and do the
24880	30240	entire thing, but certainly I'm going to enjoy this and I hope you're going to
30240	38160	enjoy this too. The functions and the examples that we're going to see
38160	44680	in these screencasts are mostly coming from a book I'm working on by Manning.
44680	52080	It's available here on the Manning website. So if you enjoy the content of
52080	56200	the screencast you are interested in knowing more about the function in the
56200	61920	standard library. There's a good chance you're also gonna like this book. I hope
61920	69280	you enjoy the screencast and also enjoy the book if you buy it. For this very
69280	74360	first episode we are going to see something that is hopefully not too
74400	82680	complicated. It's a nice little function called f0. It's not very common. You're
82680	88640	not gonna hear this very often, but it's there and it's got a few interesting
88640	95280	use cases that you might be interested in the next time you're working on some
95280	101200	nil input. You might remember about f0 and remember what it can do for you. There
101200	106560	are alternatives. There are different ways of doing things and that's a good
106560	114520	thing. You can also quickly check the sources by doing source or f of f nil
114520	121800	and you can see it's got three arities. It's taking a function as the first
121800	129240	argument is taking then three arguments of any type. So what is the goal of this
129240	135880	function? This is a higher-order function. It takes your function, which is the
135880	143560	thing, your target that you want to patch, so to speak, and it takes up to three
143560	150680	arguments and those arguments are going to be used for the generated function as
151000	159440	defaults if any nil is passed in as an argument. Probably better showing an
159440	166720	example about how this can be used, but basically let's say you have a
166720	174960	pattern matching string of some sort. You want to verify if you can say
175680	183240	hello you in some string that is coming to you and you can use refined for that
183240	189080	and refined is going to return the matching part of the string. If any, if
189080	196200	not, it's going to return nil. If you use refined and you are matching on maybe
196200	202920	external input that is coming from the input, the user input, or third-party
202920	208000	services, and so on, you might receive a nil instead. If you receive a nil you get
208000	214200	this nasty null point or exception. So depending on the application you might
214200	219080	need to take care of that. There are many ways you can take care of that. You can
219080	227560	do a try-catch, you can use a condition, but maybe this is a very
227560	231720	good use case for functional programming. By using higher-order function you can
231760	237720	remove a condition essentially or removing a try-catch. Both of them
237720	243680	are not absolutely bad things to have, but they increase the complexity of the
243680	248280	program. So if you can remove this complexity and remove a condition you
248280	251640	don't need to think about the two branches of a condition. That is a
251640	257560	decrease in the complexity of the program. So fnil can be helpful in this.
258280	265040	How would you use fnil? We said a function generator, so you produce a
265040	271680	different function. So we can call it refined plus just to differentiate the
271680	277000	name, but knowing that we are talking about the good old refined where we are
277000	282720	dealing with nil arguments, with defaults for nil arguments, and you use
282840	290280	fnil. fnil is taking the original function, the one you want to wrap around,
290280	298400	and up to three arguments are the default if you pass nil to that function. Let's
298400	304920	say we pass a nil rejects, so we can use for example the empty rejects as a
304920	309720	default, and we can use the empty string as a target string, as a default if you
309720	316480	pass nil. Once you define this you refined, you can use it in place of your
316480	325680	old refined occurrences, and you just use it as usual. So you would pass any
325680	330480	rejects, and say you pass nil, this time we are getting back a nil, we are now
330480	334120	going null pointer exception, because we are replacing that nil with an empty
334120	340880	string, and we can do the same with rejects. If that is the case for
340880	345080	your application you can do that with all arguments, not just the last or not
345080	353040	just the first. How would it be without fnil? Why do you want to use it? Then you
353040	364960	might have something like this, where you check, let's say string s, and then you
364960	372800	go through your rugged rejects to see if s is matching or not. Of course we
372800	381640	don't have any s, so we define hello, and we try again, and as you can see it's
381640	386800	going as expected, it's matching on a low, but with the when you can of course
386800	394960	also pass in a nil, and that will go through. So essentially with fnil we
394960	399600	are able to replace a condition, this condition specifically, with a non
399600	403600	condition, with something that is not a condition. There is a condition inside
403600	409200	fnil, but you don't see it, that's the important part. So you can use refined
409320	416680	plus, and everything goes without any exception. So you would use fnil if this
416680	422080	kind of rule needs to be applied in multiple places in nana in space, or in
422080	427080	multiple namespaces. So if you need to reuse this, you define the actual
427080	435600	function, and you can reuse it across the application. So we talked about the
435600	441320	arities of fnil, it's got only three, meaning that if you try something more
441320	447560	than three, let's see what happens. So let's say you want to generate an fnil
447560	452200	for plus, where if you pass in any nil arguments, you're going to replace them
452200	460000	with some like neutral number like zero for addition. So you want five of them,
460000	464320	but if you try you'll see that you're passing the wrong number of arguments
464320	471040	of fnil, because fnil only supports three of them, unfortunately. I would say
471040	475320	unfortunately up to certain points. So if you have a function with four, five, six
475320	479480	arguments, you're probably looking at something that needs refactoring in some
479480	485160	other ways, and probably some obstruction is missing, and you need to extract that
485160	491440	obstruction out, and remove or reduce the number of arguments. But let's say you
491440	500720	really need that, we can easily extend fnil to support more arguments. To do that,
500720	507640	we'll define our own fnil, we'll call it fnil plus, and instead of taking like
507640	514240	three arguments, we'll just take a variable number of arguments. Then as a
514240	520880	contract, we'll definitely have to return the generated function, and this
520880	526640	would be a function of any number of arguments, because this is what the
526640	531960	problem we are trying to solve, so to wrap with fnil a function as more than
531960	539600	three arguments, potentially any number. What we need to do then is apply the
539600	546680	target function to these arguments, but when we do apply to the arguments we
546680	551840	need to take care of the potential nil arguments, and replace them with something
551840	558500	that is coming from the options that we are passing to fnil. You need to
558500	563760	take care also of the fact that the number of arguments you're going to apply
563760	572720	f to might be less of the number of arguments that you have defaults for. So
572760	583800	what I'm going to do is to create a sequence that contains nil defaults for
583800	591240	all those defaults that are not given as options. Better showing you what I'm
591240	602680	talking about, so I'm going to map over the sequence, and if I'm in front of
602680	608280	a nil argument, then I'm going to return the default. This is the logic. If not,
608280	612600	then I can just return the argument. I don't need to do anything, and what I'm
612600	618320	mapping on are the arguments, what would be actually passed in during the
618320	629040	invocation, and a sequence that is the concatenation of opts, which are my
629080	634400	options, my defaults, with any number of nils to pad at the end. This makes sure
634400	642960	that I have enough defaults, I have always enough defaults to cover any
642960	648880	possible cases, even if they are not. The right number of arguments is not
648880	657840	passed in. So if we do this, I'm going to show you what this new fnil plus can
657840	663320	do, and for example in the case of plus that we were looking at before, we'll
663320	669200	define a new plus plus function that is using fnil plus instead of the normal
669200	675960	fnil, over plus, which is our target function, and then we say I want like
675960	684240	five potential defaults for nils that are passed in to my plus function, or
684280	689520	double plus function. So what I can do now that I was unable to do
689520	696040	before, and I show you what I'm able to do now, if I do this with the normal plus
696040	703120	I'm getting null pointer exception, but if I use the double plus, that is going
703120	708400	through, and is summing up all the numbers that are available, is
708400	712960	basically removing the nil from the list of arguments, and summing up the
712960	722840	rest, and it's replacing nil with the default I gave, which is a zero. As
722840	728080	potential alternatives, we saw that you can use when, you can use a
728080	731720	condition, you can use a try-catch. There's also another interesting function
731720	737480	in the standard library you could use. If you don't need this behavior to be
737760	743600	reused, and the entire application, and this is the threaded thread first and
743600	752680	thread last sum option, and if I do, for example, if I do pass hello to my
752680	763240	refined, where I'm checking a you hello thing, this is perfectly fine, and this
763240	772000	got also the nice, oh, why is returning nil?
779320	787880	Interesting, and let me just check why this is it, this is the case, I wasn't
787880	799160	expecting that. Oh yeah, I inverted the rejects, sorry for that. So, well anyway,
799160	808960	let's say I'm searching hello, and I'm finding hello, the good thing about some
808960	817080	threaded last is that I can also pass in nil, so let's say my s is still defined
817080	821840	as nil, if I have this input coming through, and I pass it through, this will
821840	829000	have the same effect as f nil, and this is a nice alternative, as I said, this is
829000	836000	not something you would assign to a var in a namespace to reuse, this is
836000	842000	something you use once, and if that is the case for you, this is a good
842000	849520	alternative. Last thing I want to talk about in this first screencast is the
849520	857520	performance profile of nil, so f nil as it is, like in the standard library, let's
857520	864080	have a look again, and the sources is a very simple function, it's not doing
864840	886280	anything particularly bad, it's just basically using nested if statement to obtain the
886280	894240	effect of replacing the nil with the default you give, the performance
894240	898600	profile of this with the limitation that you cannot pass more than three
898600	904760	arguments is a constant time generation of the function, and a constant time
904760	911320	application as well, big O of three basically, with the f nil plus that we
911320	918240	showed before, instead the generation is still remaining a constant time, so
918240	922200	f nil will generate just fine in constant time, but the application of course
922200	926720	will be linear, because we'll have to iterate through the number of arguments
926720	933040	you're passing through, and check if they're nil, and apply the rule to
933040	941720	replace the nil argument with the default. We can see that quite easily if we, for
941720	956200	example, if we take f nil plus, and we create, well, so let's redefine our plus
956400	963440	function with nil plus, where instead of just using like five arguments as we did
963440	973160	before, we give defaults for like a big range of arguments, let's say one billion
973160	981160	or so of arguments, so this generation is just instant, it's a constant time, we
981160	986320	don't need to go, we don't need to iterate through the range at the moment,
986320	992720	everything is lazy, it's going to be iterated as you use it, if you then use
992720	1005280	the plus plus function, as usual, yes, oops, I did, I did apply f nil without
1005320	1014240	specifying the plus, if we do this, this is still, it's not going to, it's not
1014240	1020040	going through the entire sequence of the range to apply the defaults, because we
1020040	1024360	are not passing enough arguments, and soon as we go up with that, so let's put a
1024360	1031040	time on this, as soon, of course, as soon as we go up with this, so we apply
1031560	1043600	double plus to more arguments, say, 10, 10 millions, and we see that the time to
1043600	1050800	do this computation go up, and it's roughly linear computation, and it's
1050800	1056520	coming back now in eight, eight, about eight seconds, so this is it for this
1056520	1064040	first episode, I hope you enjoyed, if you like this content, have a look at the
1064040	1069960	book, a few sample chapters are available, and also if you enjoyed this
1069960	1074440	screencast, I hope you'll enjoy the next one, roughly one week, I hope to keep up
1074440	1081520	with the weekly thing, the weekly screencast plan, I might miss one or two,
1081520	1089240	but we'll see how it goes, so thank you for listening, goodbye.
