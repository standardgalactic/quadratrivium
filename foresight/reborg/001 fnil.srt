1
00:00:00,000 --> 00:00:07,920
Hello and welcome to this first episode of The Closure Pills. I'm planning to

2
00:00:07,920 --> 00:00:14,000
make this a weekly thing where we go through the functions in the standard

3
00:00:14,000 --> 00:00:18,800
library, in the closure standard library. There are many of them, this is like worth

4
00:00:18,800 --> 00:00:24,880
a few years of screencasts. I'm not sure if we are gonna go that far and do the

5
00:00:24,880 --> 00:00:30,240
entire thing, but certainly I'm going to enjoy this and I hope you're going to

6
00:00:30,240 --> 00:00:38,160
enjoy this too. The functions and the examples that we're going to see

7
00:00:38,160 --> 00:00:44,680
in these screencasts are mostly coming from a book I'm working on by Manning.

8
00:00:44,680 --> 00:00:52,080
It's available here on the Manning website. So if you enjoy the content of

9
00:00:52,080 --> 00:00:56,200
the screencast you are interested in knowing more about the function in the

10
00:00:56,200 --> 00:01:01,920
standard library. There's a good chance you're also gonna like this book. I hope

11
00:01:01,920 --> 00:01:09,280
you enjoy the screencast and also enjoy the book if you buy it. For this very

12
00:01:09,280 --> 00:01:14,360
first episode we are going to see something that is hopefully not too

13
00:01:14,400 --> 00:01:22,680
complicated. It's a nice little function called f0. It's not very common. You're

14
00:01:22,680 --> 00:01:28,640
not gonna hear this very often, but it's there and it's got a few interesting

15
00:01:28,640 --> 00:01:35,280
use cases that you might be interested in the next time you're working on some

16
00:01:35,280 --> 00:01:41,200
nil input. You might remember about f0 and remember what it can do for you. There

17
00:01:41,200 --> 00:01:46,560
are alternatives. There are different ways of doing things and that's a good

18
00:01:46,560 --> 00:01:54,520
thing. You can also quickly check the sources by doing source or f of f nil

19
00:01:54,520 --> 00:02:01,800
and you can see it's got three arities. It's taking a function as the first

20
00:02:01,800 --> 00:02:09,240
argument is taking then three arguments of any type. So what is the goal of this

21
00:02:09,240 --> 00:02:15,880
function? This is a higher-order function. It takes your function, which is the

22
00:02:15,880 --> 00:02:23,560
thing, your target that you want to patch, so to speak, and it takes up to three

23
00:02:23,560 --> 00:02:30,680
arguments and those arguments are going to be used for the generated function as

24
00:02:31,000 --> 00:02:39,440
defaults if any nil is passed in as an argument. Probably better showing an

25
00:02:39,440 --> 00:02:46,720
example about how this can be used, but basically let's say you have a

26
00:02:46,720 --> 00:02:54,960
pattern matching string of some sort. You want to verify if you can say

27
00:02:55,680 --> 00:03:03,240
hello you in some string that is coming to you and you can use refined for that

28
00:03:03,240 --> 00:03:09,080
and refined is going to return the matching part of the string. If any, if

29
00:03:09,080 --> 00:03:16,200
not, it's going to return nil. If you use refined and you are matching on maybe

30
00:03:16,200 --> 00:03:22,920
external input that is coming from the input, the user input, or third-party

31
00:03:22,920 --> 00:03:28,000
services, and so on, you might receive a nil instead. If you receive a nil you get

32
00:03:28,000 --> 00:03:34,200
this nasty null point or exception. So depending on the application you might

33
00:03:34,200 --> 00:03:39,080
need to take care of that. There are many ways you can take care of that. You can

34
00:03:39,080 --> 00:03:47,560
do a try-catch, you can use a condition, but maybe this is a very

35
00:03:47,560 --> 00:03:51,720
good use case for functional programming. By using higher-order function you can

36
00:03:51,760 --> 00:03:57,720
remove a condition essentially or removing a try-catch. Both of them

37
00:03:57,720 --> 00:04:03,680
are not absolutely bad things to have, but they increase the complexity of the

38
00:04:03,680 --> 00:04:08,280
program. So if you can remove this complexity and remove a condition you

39
00:04:08,280 --> 00:04:11,640
don't need to think about the two branches of a condition. That is a

40
00:04:11,640 --> 00:04:17,560
decrease in the complexity of the program. So fnil can be helpful in this.

41
00:04:18,280 --> 00:04:25,040
How would you use fnil? We said a function generator, so you produce a

42
00:04:25,040 --> 00:04:31,680
different function. So we can call it refined plus just to differentiate the

43
00:04:31,680 --> 00:04:37,000
name, but knowing that we are talking about the good old refined where we are

44
00:04:37,000 --> 00:04:42,720
dealing with nil arguments, with defaults for nil arguments, and you use

45
00:04:42,840 --> 00:04:50,280
fnil. fnil is taking the original function, the one you want to wrap around,

46
00:04:50,280 --> 00:04:58,400
and up to three arguments are the default if you pass nil to that function. Let's

47
00:04:58,400 --> 00:05:04,920
say we pass a nil rejects, so we can use for example the empty rejects as a

48
00:05:04,920 --> 00:05:09,720
default, and we can use the empty string as a target string, as a default if you

49
00:05:09,720 --> 00:05:16,480
pass nil. Once you define this you refined, you can use it in place of your

50
00:05:16,480 --> 00:05:25,680
old refined occurrences, and you just use it as usual. So you would pass any

51
00:05:25,680 --> 00:05:30,480
rejects, and say you pass nil, this time we are getting back a nil, we are now

52
00:05:30,480 --> 00:05:34,120
going null pointer exception, because we are replacing that nil with an empty

53
00:05:34,120 --> 00:05:40,880
string, and we can do the same with rejects. If that is the case for

54
00:05:40,880 --> 00:05:45,080
your application you can do that with all arguments, not just the last or not

55
00:05:45,080 --> 00:05:53,040
just the first. How would it be without fnil? Why do you want to use it? Then you

56
00:05:53,040 --> 00:06:04,960
might have something like this, where you check, let's say string s, and then you

57
00:06:04,960 --> 00:06:12,800
go through your rugged rejects to see if s is matching or not. Of course we

58
00:06:12,800 --> 00:06:21,640
don't have any s, so we define hello, and we try again, and as you can see it's

59
00:06:21,640 --> 00:06:26,800
going as expected, it's matching on a low, but with the when you can of course

60
00:06:26,800 --> 00:06:34,960
also pass in a nil, and that will go through. So essentially with fnil we

61
00:06:34,960 --> 00:06:39,600
are able to replace a condition, this condition specifically, with a non

62
00:06:39,600 --> 00:06:43,600
condition, with something that is not a condition. There is a condition inside

63
00:06:43,600 --> 00:06:49,200
fnil, but you don't see it, that's the important part. So you can use refined

64
00:06:49,320 --> 00:06:56,680
plus, and everything goes without any exception. So you would use fnil if this

65
00:06:56,680 --> 00:07:02,080
kind of rule needs to be applied in multiple places in nana in space, or in

66
00:07:02,080 --> 00:07:07,080
multiple namespaces. So if you need to reuse this, you define the actual

67
00:07:07,080 --> 00:07:15,600
function, and you can reuse it across the application. So we talked about the

68
00:07:15,600 --> 00:07:21,320
arities of fnil, it's got only three, meaning that if you try something more

69
00:07:21,320 --> 00:07:27,560
than three, let's see what happens. So let's say you want to generate an fnil

70
00:07:27,560 --> 00:07:32,200
for plus, where if you pass in any nil arguments, you're going to replace them

71
00:07:32,200 --> 00:07:40,000
with some like neutral number like zero for addition. So you want five of them,

72
00:07:40,000 --> 00:07:44,320
but if you try you'll see that you're passing the wrong number of arguments

73
00:07:44,320 --> 00:07:51,040
of fnil, because fnil only supports three of them, unfortunately. I would say

74
00:07:51,040 --> 00:07:55,320
unfortunately up to certain points. So if you have a function with four, five, six

75
00:07:55,320 --> 00:07:59,480
arguments, you're probably looking at something that needs refactoring in some

76
00:07:59,480 --> 00:08:05,160
other ways, and probably some obstruction is missing, and you need to extract that

77
00:08:05,160 --> 00:08:11,440
obstruction out, and remove or reduce the number of arguments. But let's say you

78
00:08:11,440 --> 00:08:20,720
really need that, we can easily extend fnil to support more arguments. To do that,

79
00:08:20,720 --> 00:08:27,640
we'll define our own fnil, we'll call it fnil plus, and instead of taking like

80
00:08:27,640 --> 00:08:34,240
three arguments, we'll just take a variable number of arguments. Then as a

81
00:08:34,240 --> 00:08:40,880
contract, we'll definitely have to return the generated function, and this

82
00:08:40,880 --> 00:08:46,640
would be a function of any number of arguments, because this is what the

83
00:08:46,640 --> 00:08:51,960
problem we are trying to solve, so to wrap with fnil a function as more than

84
00:08:51,960 --> 00:08:59,600
three arguments, potentially any number. What we need to do then is apply the

85
00:08:59,600 --> 00:09:06,680
target function to these arguments, but when we do apply to the arguments we

86
00:09:06,680 --> 00:09:11,840
need to take care of the potential nil arguments, and replace them with something

87
00:09:11,840 --> 00:09:18,500
that is coming from the options that we are passing to fnil. You need to

88
00:09:18,500 --> 00:09:23,760
take care also of the fact that the number of arguments you're going to apply

89
00:09:23,760 --> 00:09:32,720
f to might be less of the number of arguments that you have defaults for. So

90
00:09:32,760 --> 00:09:43,800
what I'm going to do is to create a sequence that contains nil defaults for

91
00:09:43,800 --> 00:09:51,240
all those defaults that are not given as options. Better showing you what I'm

92
00:09:51,240 --> 00:10:02,680
talking about, so I'm going to map over the sequence, and if I'm in front of

93
00:10:02,680 --> 00:10:08,280
a nil argument, then I'm going to return the default. This is the logic. If not,

94
00:10:08,280 --> 00:10:12,600
then I can just return the argument. I don't need to do anything, and what I'm

95
00:10:12,600 --> 00:10:18,320
mapping on are the arguments, what would be actually passed in during the

96
00:10:18,320 --> 00:10:29,040
invocation, and a sequence that is the concatenation of opts, which are my

97
00:10:29,080 --> 00:10:34,400
options, my defaults, with any number of nils to pad at the end. This makes sure

98
00:10:34,400 --> 00:10:42,960
that I have enough defaults, I have always enough defaults to cover any

99
00:10:42,960 --> 00:10:48,880
possible cases, even if they are not. The right number of arguments is not

100
00:10:48,880 --> 00:10:57,840
passed in. So if we do this, I'm going to show you what this new fnil plus can

101
00:10:57,840 --> 00:11:03,320
do, and for example in the case of plus that we were looking at before, we'll

102
00:11:03,320 --> 00:11:09,200
define a new plus plus function that is using fnil plus instead of the normal

103
00:11:09,200 --> 00:11:15,960
fnil, over plus, which is our target function, and then we say I want like

104
00:11:15,960 --> 00:11:24,240
five potential defaults for nils that are passed in to my plus function, or

105
00:11:24,280 --> 00:11:29,520
double plus function. So what I can do now that I was unable to do

106
00:11:29,520 --> 00:11:36,040
before, and I show you what I'm able to do now, if I do this with the normal plus

107
00:11:36,040 --> 00:11:43,120
I'm getting null pointer exception, but if I use the double plus, that is going

108
00:11:43,120 --> 00:11:48,400
through, and is summing up all the numbers that are available, is

109
00:11:48,400 --> 00:11:52,960
basically removing the nil from the list of arguments, and summing up the

110
00:11:52,960 --> 00:12:02,840
rest, and it's replacing nil with the default I gave, which is a zero. As

111
00:12:02,840 --> 00:12:08,080
potential alternatives, we saw that you can use when, you can use a

112
00:12:08,080 --> 00:12:11,720
condition, you can use a try-catch. There's also another interesting function

113
00:12:11,720 --> 00:12:17,480
in the standard library you could use. If you don't need this behavior to be

114
00:12:17,760 --> 00:12:23,600
reused, and the entire application, and this is the threaded thread first and

115
00:12:23,600 --> 00:12:32,680
thread last sum option, and if I do, for example, if I do pass hello to my

116
00:12:32,680 --> 00:12:43,240
refined, where I'm checking a you hello thing, this is perfectly fine, and this

117
00:12:43,240 --> 00:12:52,000
got also the nice, oh, why is returning nil?

118
00:12:59,320 --> 00:13:07,880
Interesting, and let me just check why this is it, this is the case, I wasn't

119
00:13:07,880 --> 00:13:19,160
expecting that. Oh yeah, I inverted the rejects, sorry for that. So, well anyway,

120
00:13:19,160 --> 00:13:28,960
let's say I'm searching hello, and I'm finding hello, the good thing about some

121
00:13:28,960 --> 00:13:37,080
threaded last is that I can also pass in nil, so let's say my s is still defined

122
00:13:37,080 --> 00:13:41,840
as nil, if I have this input coming through, and I pass it through, this will

123
00:13:41,840 --> 00:13:49,000
have the same effect as f nil, and this is a nice alternative, as I said, this is

124
00:13:49,000 --> 00:13:56,000
not something you would assign to a var in a namespace to reuse, this is

125
00:13:56,000 --> 00:14:02,000
something you use once, and if that is the case for you, this is a good

126
00:14:02,000 --> 00:14:09,520
alternative. Last thing I want to talk about in this first screencast is the

127
00:14:09,520 --> 00:14:17,520
performance profile of nil, so f nil as it is, like in the standard library, let's

128
00:14:17,520 --> 00:14:24,080
have a look again, and the sources is a very simple function, it's not doing

129
00:14:24,840 --> 00:14:46,280
anything particularly bad, it's just basically using nested if statement to obtain the

130
00:14:46,280 --> 00:14:54,240
effect of replacing the nil with the default you give, the performance

131
00:14:54,240 --> 00:14:58,600
profile of this with the limitation that you cannot pass more than three

132
00:14:58,600 --> 00:15:04,760
arguments is a constant time generation of the function, and a constant time

133
00:15:04,760 --> 00:15:11,320
application as well, big O of three basically, with the f nil plus that we

134
00:15:11,320 --> 00:15:18,240
showed before, instead the generation is still remaining a constant time, so

135
00:15:18,240 --> 00:15:22,200
f nil will generate just fine in constant time, but the application of course

136
00:15:22,200 --> 00:15:26,720
will be linear, because we'll have to iterate through the number of arguments

137
00:15:26,720 --> 00:15:33,040
you're passing through, and check if they're nil, and apply the rule to

138
00:15:33,040 --> 00:15:41,720
replace the nil argument with the default. We can see that quite easily if we, for

139
00:15:41,720 --> 00:15:56,200
example, if we take f nil plus, and we create, well, so let's redefine our plus

140
00:15:56,400 --> 00:16:03,440
function with nil plus, where instead of just using like five arguments as we did

141
00:16:03,440 --> 00:16:13,160
before, we give defaults for like a big range of arguments, let's say one billion

142
00:16:13,160 --> 00:16:21,160
or so of arguments, so this generation is just instant, it's a constant time, we

143
00:16:21,160 --> 00:16:26,320
don't need to go, we don't need to iterate through the range at the moment,

144
00:16:26,320 --> 00:16:32,720
everything is lazy, it's going to be iterated as you use it, if you then use

145
00:16:32,720 --> 00:16:45,280
the plus plus function, as usual, yes, oops, I did, I did apply f nil without

146
00:16:45,320 --> 00:16:54,240
specifying the plus, if we do this, this is still, it's not going to, it's not

147
00:16:54,240 --> 00:17:00,040
going through the entire sequence of the range to apply the defaults, because we

148
00:17:00,040 --> 00:17:04,360
are not passing enough arguments, and soon as we go up with that, so let's put a

149
00:17:04,360 --> 00:17:11,040
time on this, as soon, of course, as soon as we go up with this, so we apply

150
00:17:11,560 --> 00:17:23,600
double plus to more arguments, say, 10, 10 millions, and we see that the time to

151
00:17:23,600 --> 00:17:30,800
do this computation go up, and it's roughly linear computation, and it's

152
00:17:30,800 --> 00:17:36,520
coming back now in eight, eight, about eight seconds, so this is it for this

153
00:17:36,520 --> 00:17:44,040
first episode, I hope you enjoyed, if you like this content, have a look at the

154
00:17:44,040 --> 00:17:49,960
book, a few sample chapters are available, and also if you enjoyed this

155
00:17:49,960 --> 00:17:54,440
screencast, I hope you'll enjoy the next one, roughly one week, I hope to keep up

156
00:17:54,440 --> 00:18:01,520
with the weekly thing, the weekly screencast plan, I might miss one or two,

157
00:18:01,520 --> 00:18:09,240
but we'll see how it goes, so thank you for listening, goodbye.

