WEBVTT

00:00.000 --> 00:03.520
I've been working on a rendering engine for non-Euclidean worlds.

00:03.520 --> 00:07.140
It's a little tricky to explain, so I'll just show you some of the things you can

00:07.140 --> 00:10.040
do before I go into how it works.

00:10.040 --> 00:11.920
First example is this tunnel.

00:11.920 --> 00:27.480
You can see it's really long from the outside, but it's actually really short on the inside.

00:27.480 --> 00:29.500
And then this tunnel is the opposite.

00:29.500 --> 00:36.460
It appears short, but it takes a long time to travel through it.

00:36.460 --> 00:42.460
The shortest path between two points is not necessarily a straight line anymore.

00:42.460 --> 00:44.500
Here's another example of a house.

00:44.500 --> 00:57.980
See if you notice anything suspicious as I walk through it.

00:57.980 --> 00:59.480
Did you catch it?

00:59.480 --> 01:05.080
This four room house actually only has three rooms, red, green, and blue.

01:05.080 --> 01:09.080
This tunnel surprised me a lot because I originally thought it would be super jarring, but actually

01:09.080 --> 01:13.480
everyone I show this to doesn't notice it at all unless I tell them something is off.

01:13.480 --> 01:16.240
I guess our brains just aren't used to thinking this way.

01:16.240 --> 01:19.200
Here's the same house, but with the opposite twist.

01:19.200 --> 01:23.800
There's actually six rooms in this house, and in fact I could cram an infinite amount

01:23.800 --> 01:37.680
of space into any finite space.

01:37.680 --> 01:38.680
Here's another room.

01:38.680 --> 01:43.000
There's just a pillar on one side, and an object on the other.

01:43.000 --> 01:47.440
But if we walk around the pillar, we actually end up in another room.

01:47.440 --> 01:53.720
The object isn't changing, we're actually in another unique space.

01:53.720 --> 02:02.080
If I walk around again, we enter a third room, and this cycle repeats clockwise and counterclockwise.

02:02.080 --> 02:09.320
And notice how you can see both objects at once.

02:09.320 --> 02:10.320
This is a weird one.

02:10.320 --> 02:15.400
We're on a hill that sloped up, but to get up the hill, we can go down the tunnel and

02:15.400 --> 02:25.440
end up on top.

02:25.440 --> 02:29.920
It's also an example of your grandpa's stories about walking uphill both ways.

02:29.920 --> 02:38.840
Maybe he just lived in an onuclidean plane of existence.

02:38.840 --> 02:40.880
Here's where things get really interesting.

02:40.880 --> 02:48.960
We've got a tunnel that's too small to pass through, but as I walk through this tunnel,

02:48.960 --> 02:54.080
my scale also changes.

02:54.080 --> 03:10.080
Still not small enough to get through, but if I go around one more time, I can finally

03:10.200 --> 03:12.320
fit through.

03:12.320 --> 03:16.520
I can go the other way around too to keep getting bigger, but eventually I won't be

03:16.520 --> 03:19.280
able to fit into the tunnel anymore.

03:19.280 --> 03:20.880
So how does all this work?

03:20.880 --> 03:26.000
Well, it's basically the same as the game Portal, but the portals have no seams, and

03:26.000 --> 03:28.000
there's often more than two of them.

03:28.000 --> 03:31.320
There are several surfaces that are actually solid geometry.

03:31.320 --> 03:35.960
It's just that I draw a texture on top of it that's actually a virtual camera rendering

03:35.960 --> 03:38.640
what it would have seemed from that perspective.

03:38.720 --> 03:42.240
When you walk through it, it teleports you seamlessly to where you're supposed to end

03:42.240 --> 03:44.640
up and the illusion is complete.

03:44.640 --> 03:46.840
The rendering is a lot harder than it sounds, though.

03:46.840 --> 03:51.080
Each surface has to recursively render surfaces behind it, conditionally, depending on if

03:51.080 --> 03:54.360
it's occluded or not, from each perspective.

03:54.360 --> 03:58.360
I originally was trying to do this in Unity, but I'm pretty sure it's impossible without

03:58.360 --> 04:00.640
lower level access to the rendering.

04:00.640 --> 04:03.040
Even the scriptable pipeline didn't work for me.

04:03.040 --> 04:06.840
So I was forced to create my own rendering engine in OpenGL.

04:06.840 --> 04:08.600
How do I keep writing engines?

04:08.600 --> 04:13.320
Anyway, the last thing I wanted to talk about are the use cases.

04:13.320 --> 04:18.080
Other than just for puzzle games, this is actually incredibly useful for virtual reality.

04:18.080 --> 04:23.520
You see, normally for room scale VR, you're limited to a small area to walk around in.

04:23.520 --> 04:28.640
You can't really explore larger open worlds without breaking the illusion, like teleporting.

04:28.640 --> 04:32.720
But this engine can compress entire levels to fit into a single room.

04:32.720 --> 04:37.160
Here I have a single 20 foot by 20 foot room that you can walk around in and explore, but

04:37.160 --> 04:39.840
it actually contains a volume 4 times larger.

04:39.840 --> 04:44.600
And although I haven't actually tested this in VR, I'm entirely convinced that this illusion

04:44.600 --> 04:47.160
feels just as real as playing from a screen.

04:47.160 --> 04:51.280
I've uploaded the source and executable to GitHub, so if you're curious, you can try

04:51.280 --> 04:52.720
out this demo.

04:52.720 --> 04:54.880
Thanks for watching, and I'll see you all next time.

