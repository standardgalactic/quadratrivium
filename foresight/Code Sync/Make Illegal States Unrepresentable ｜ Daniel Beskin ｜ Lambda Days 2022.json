{"text": " We're here to talk about this great quote up there by Jaron Minsky, make legal states unrepresentable. And although it sounds quite simple, I find that the consequences of it are quite profound. But before we actually begin and dive in, let's start with kind of a short story as an introduction. So it's the middle of the night and you're sleeping peacefully. And suddenly you get a call and you're being informed that the production system is crashing. And after a few minutes of furious debugging, you find this exception that happens. Someone accessed an empty optional value. And how can that be? You ask yourself. And so you dig a little deeper and you find this wonderful code. So someone unwrapped an empty option value. And you read this comment. This is safe. Registered users always have email. And it's a very nice comment. And the old caps are stressing the right points. And it's a very reasonable assumption because registered users should have emails and the product manager also required that as well. So what went wrong? And basically what happened is that we entered an illegal state of our system and doesn't really matter how we got there. But these sorts of situations happened all the time. I'm sure most of you had some experience seeing some error of this kind happening to you. And those things can be avoided. And I would say they must be avoided because all would like to have a good night's sleep. But this is what we're here to talk about. How to make these illegal states unrepresentable. How to make it impossible to create software that enters those illegal states. So today we're going to discuss this quote. What it actually means. We'll break it down into smaller parts. Then I'll show some simple techniques to try to achieve this ideal of making illegal states unrepresentable. And we'll conclude with seeing what are the sort of benefits that you might expect to reap in case you actually follow this principle. So this is mostly a beginner friendly talk. So don't expect some mind blowing techniques. But I do hope that the perspective I am about to show is useful even for more experienced developers. So as far as I know this quote was created in the context of working on a financial system. So Jaron Minsky is, was working on Jane Street. And I can imagine that making illegal states unrepresentable in the financial system is very, very important because you probably don't want to lose transactions or money or whatever. So let's dive in and figure out what it means to that an illegal state is unrepresentable and how do we define it. So we start with the state. So what is the state of a program? So imagine your whole application running and take like a single, single snapshot in time with all the variables and all your variables, threads, function calls, whatever. So single snapshot of your program. So this is an example of such states. So you have some variable assignments. You have maybe registers, heap allocations, whatever. Threads are running. Functions are about to be called. So this is a single state of the system. So obviously a real system will have many, many, many states. But for the purposes of this talk, we're going to kind of zoom out and from the details of registers and threads and like, and just have like a conceptual picture of the different states of the system. So this is our program's state space. All the different states, it can find itself in. So, but some states are illegal. That means that if you enter that state, something bad will happen. The program will crash. An exception will be thrown. Maybe a business rule will be violated. But something, whatever it is, it's something that's bad for your system and something that you would like to avoid. So of course, what's considered illegal is very context dependent and it depends on what you care about at the moment and the various tradeoffs. But let's assume that we can recognize an illegal state once we see it. And so the picture I'm showing here is that we have like a huge state space and have a few legal states. But usually the reality is much worse. Usually you have a lot, a lot of states that are actually illegal. And so hitting them and usually by accident is just a matter of time. You walk around your kind of state space and, and just accidentally stumble on something illegal. And that's, that's quite likely to happen just like the registered user in the previous example. So let's zoom in a bit and enter this diagram. So a typical program will probably be moving between lots of states. Hopefully, and, and we can assume usually between legal states, which are okay for a system. But sometimes you'll probably by accident hit an illegal state and your system might crash or violate some rule or do something bad. And usually if you got one illegal state, you probably will get another illegal state. And this is not good. And this is what the sort of things that we would like to avoid in the context of this quote and probably just in general in programming. So let's zoom in a little more. So, so as high level programmers, we typically don't think about registers and threads and, and, and the heap and the like. And as functional programmers, we typically want to represent as much as possible of our application as functions. So imagine that this is this function signature here is some part of your system. You have some inputs, you have some output, and, and, and you, you would like to analyze what's possible and impossible here. So what do I mean that an illegal state is representable? It's that there is some combination of the inputs ABC that would, that would get you into an illegal state. Okay, that would mean that the state is representable. You can find such inputs and you'll, and you'll get an illegal state directly in your system. And what we want, what we strive to achieve is to make it impossible for to find such inputs that would get us into this illegal state. So imagine that it's, it's literally impossible to write down such inputs that would get you into a legal state that you cannot get there at all. And all you can do is kind of walk around the legal states and just never worry about entering the illegal, the illegal red dots here. And so this should be possible not because you checked and double-checked your inputs and not because you covered everything with tests, but because you make it strictly impossible to write down those inputs that would, would get you into an illegal state. So that's at least the ideal that we want to, want to reach. And question is whether it's a reachable idea, ideal, can you, can you actually do that? And probably the answer is generally no. You probably can't avoid all illegal states, but I would claim that every step you make in that direction is, is a good step and probably is improving your software in some, in some way or dimension. Also, question is whether it's worth it. I'm going to show you some, some techniques that you have to apply to your code and then maybe there's some, some costs and it might, might not be worth it. And that's, again, can be, can be true that's maybe too expensive, but the, the sort of techniques I'm about to show you now are quite, quite lightweight and hopefully the cost-benefit ratio is, may, would make them worth it. And although it's possible to, to avoid illegal states in pretty much every paradigm and language, but strongly, strongly typed functional programming is, is very good at it. So because types makes it easier to define, define our state, state space and, and functional techniques make, makes it, once you define and recognize an illegal state, they, they, they make it easier to avoid various illegal states. Okay, so now that we, we know what are illegal states, so slide, slide the gray, digression into something else. So I'm not sure what is or so, but empirical evidence shows that, that people really, really like coffee. I myself don't drink coffee, so I can't really relate, but apparently making coffee is very, very complicated. And here's a, a diagram that's, that's obviously has lots of different states and I'm sure some of them are illegal. And since I don't know much about coffee, I thought maybe it will be a good idea to use it as kind of an example domain to, to, for, for this talk that we can explore and try to kind of make more, more legible for, for our purposes. So, so imagine that you're tasked with programming this, this coffee making robot. So lots of things can go wrong when you program a robot, I imagine, especially one that does something as complicated as creating coffee, because coffee drinkers are, are very, very specific about what and how they are willing to drink. So there's a huge state space here and lots of things that can, can go wrong. And we'll just try to tackle like small sub-problems from this domain and see, see how we can improve what we see. So we start with, with the simplest part I, I could possibly imagine here, ordering coffee. So again, imagine that you are, you are doing this kind of proof of concept of your, of your robot. You want to show that it can actually do something useful. So you want to specify the, how to order a cappuccino, which is, so I hear a popular drink. So your users have to specify what kind of milk they want in the cappuccino. And apparently milk choice is also a complicated topic. So milk is not some trivial type, but, but in the enumeration of various, various, various options. So after successfully making cappuccino, you think, okay, let's, let's see. It kind of works. Let's, let's do something more, add something to, to a repertoire to make it more interesting. So since you already know how to do cappuccino espresso, apparently according to this picture there is, is pretty much the same thing, but minus the milk. So you make your milk an optional, optional argument in this case. So, so that you don't require it anymore. And now if you don't have milk, you make an espresso espresso. If you have milk, you, you do cappuccino. And now let's set another one, latte. So latte is basically, apparently again, by this diagram is just the same as cappuccino, but with more milk. And so we have a problem. We have an ambiguity. Both cappuccino and latte require, require milk. So we have to somehow tell them apart which, which order are we talking about. So in order to make it easier to figure out what's going on, we were going to add another enumeration, the drink type, which will actually tell us what kind of order are we dealing with here. And so we have kind of three cases for cappuccino espresso and latte. And that's a nice way to kind of future proof ourselves from future, future drinks that we might want to add, because now we could easily add them to our enumeration. So, so that's, that's a nice, nice bonus. And so now that you, you have some basic drinks and, and you know how to make them, you want to show off how your robot can actually do cause something more complicated. So you want to do two fancy drinks in this case. So want to try and do affogato and Irish coffee. Fortunately, botanary require more, more ingredients. So we need to add gelato and, for the affogato and the cream and whiskey for, for Irish coffee. And that's a good place to stop for a moment and take a look at what we have. So we support, support five different, different types of drinks, which is nice, but we have lots of various optional values. It's completely non-obvious, which, which combinations are actually legal here. So can, can I mix milk into my Irish coffee or some, some such. It's not obvious from the type sense. And it's easy to get confused. So let's, let's try to step back for a moment. So what is the issue here? So this is again kind of a simplified state diagram of what, what we want to achieve. So we have five legal states, five states that we actually want, want to support. So which one corresponding to some drink that we have in our system. But we also have various combinations that, that are illegal in some sense. So for example, espresso, espresso with gelato is just redundant because we're just rediscovered affogato, but though some drinkers might be offended. But Irish coffee without whiskey is obviously an illegal state if I ever seen one. So it makes no sense at all. And there are many other states here that, that many combinations of various inputs that we can get here that are completely illegal and make no sense. So let's, let's think more concretely why, why this is a problem. So suppose we have some low level function that actually tells the robot how to prepare the Irish coffee. And it has to take two arguments, cream and whiskey, because that's, that those are the parameters that we need to specify for, for this drink. And imagine that you were trying to actually take an order and prepare the Irish coffee. So in case you are in the Irish coffee, Irish coffee order, you access the cream and whiskey and then, and then prepare Irish coffee. Now notice that we are accessing optional values and we are very careful here. We have a comment that says this is safe. That's probably okay, right? I mean, what, what could possibly go wrong? So, because it makes no sense to have empty values on, of cream and whiskey in case someone ordered an Irish coffee. So maybe just in case, because we don't want to be too troubled with debugging late at night, we will make it even more explicit. So we will throw a nice exception that has more, more information. So it might, might be nicer to debug, but it's really, really isn't possible. I mean, you can't have Irish coffee without cream and whiskey. And, and, and this is sort of an invariant that we're assuming over our code. In this case, the invariant is quite simple. Irish coffee always has cream and whiskey, but nothing is enforcing this invariant. We're kind of writing comment and have, have suffered from a wishful thinking that may, hopefully nobody will ever break this, this thing apart. But imagine that in the future, you're supporting reading orders from JSON files and someone messed up the format and then something is missing. Who knows? Something can happen and you can't write tests, tests to cover all of your flows in your system probably. And even less so, you can't write tests for future flows that someone might define, that are not defined right now. How, how can you protect against something that you don't even know that will exist in your system? And so, so, and you might be actually thinking that, okay, I'm very bad at designing data types and that's why I have this kind of bad, bad definition of, of an order. But that may be so. But the thing I'm trying to assert here is not something that happens in a single, in a single step. Usually, it kind of creeps up on you. You start with something small and gradually it increases, grows, and then becomes this huge thing full of illegal states that you can, you're really dependent on and can't, can't really disentangle from, from your system. And, and then you again enter this, this space where you have lots of illegal states and nothing to do about it. But we can, can do better, a lot better. So, sorry. So, so our problem here is that our type is in a sense too big for a problem. We have, we define some schema for possible, possible combinations of inputs and it's too big. Our state space contains lots of things that shouldn't be there. And algebraic data types are a really good way and methodology to, to create types of, of the right size, types that can actually fit our domain in a way that, that really is exactly what we want and nothing else. So, let's rewrite our data type as, as an algebraic data type in this case and some type or in enumeration in Scala syntax now. So, we're going, instead of writing coffee order where everything is placed to kind of in the top level with all the options, everything possible, we're going to split, split it up into various cases. So, we have a first case with Cappuccino. Cappuccino requires milk, so it's no longer optional. We have a case for espresso, which doesn't have any, any requirements. So, this, so it's just espresso. We have the case of Latte, which also requires milk, but there's no ambiguity anymore because now it's a separate case and there's no way to confuse one Cappuccino with the other. So, so, and again, the argument is no longer, no, no longer optional. And Afogato requires Gelato. So, this is again a required dependency and we cannot avoid it. And Irish and coffee, which is the, which was our stumbling block now has a required dependency on cream and whiskey and there's no ambiguity anymore. So, not only that it's now much, much clearer what is going on and what, what, what sort of states are legal here and what, what is the actionable data that we have and how to access it. It's literally now impossible to express the legal state I, I, I just described previously. So, the legal states in the previous slide are, are literally unrepresentable. You can't write down the code that, that actually enters those states. So, now we can, for example, in the, when preparing the Irish coffee, we can now safely better match our, on our order. And, and if it's Irish coffee, we know and the compiler provides us with access to both cream and whiskey. And it's definitely there and can be gone and, and can be missing. So, we don't need to assume any invariant about a call or code. Don't have to lie about it in comments. And no, no exceptions can be, can be thrown here or, or any other illegal states. And if we got to this point where it better matched than we have Irish coffee, we know for a fact that all requirements were met and nothing can go wrong in this, in this respect. And this is enforced by the compiler for every possible floor of our program. So, we don't have to try to cover, cover everything with tests. And it's also there, enforced there for the future as well, because the compiler does the same thing for all future flows as well. So, we don't have to worry about it again with tests that we cannot write even. So, the illegal state that I showed before is truly unrepresentable now. You cannot write it down. It cannot exist in the system. So, algebraic data types are, are a great, a great tool you can use to reduce the state space of your, of your problem domain. So, leading to fewer legal states and making the code generally more, more comprehensible. And this is done by making every assumption about your inputs completely explicit. So, in our case, we made every case to correspond to the assumptions about coffee orders that we have at the moment. And the values are now correct by construction. So, you cannot build an illegal order anymore because, because you made it impossible in the type to represent what, what is not supposed to be there. And so, once you do that, you're basically turning your flow into data. So, notice how we no longer have any conditionals. After, after pattern matching and figuring out that we are in the Irish coffee case, that's it. We don't have to do anything else. We don't have to ask, ask and be hopeful that the cream whiskey are present. It's there. It's accessible. And, and so, and so you, you don't have to worry about defensively programming against it. And, and nice bonus in statically type of programming language is where you, for pattern matches, you also have exhaustivity checking. So, in case someone adds another case or something else is changing, changing the compiler will have your back and help you figure out what's missing and what, what you have to add there to be able to handle everything correctly. So, you can't forget anything that you need and don't, can't forget to handle everything. And what's important, the compiler is not providing you with safe access to all the data that you need. You don't have to assume that it will be present when it might be not. It will definitely be there and you can't work around it. So, now that you, and you're basically free from thinking about illegal states and you don't have to engage in defensive programming all throughout your application. It's not a magical solution. You still have to kind of get the, the, the size of your algebraic data type, right? Because my initial example, the first coffee order is also an algebraic data type, but that one was too big for our state space. So, you still have to think, nobody is, is getting away from, from thinking, but still having this perspective and having algebraic data types as, as a tool that you can use to shape your state space is, is very, very useful. And so, this is, I think that algebraic data type, data types of all the features of functional programming are, is probably the, the best cost, cost benefit ratio out there. And if you're using them consistently all over your system, I think that, that will be a great improvement to, to the possible illegal states that you can or cannot represent. And if I were to start on, start on a deserted island or something or programming Java, that probably would be the one feature that I, I would like to have from functional programming. They're that, that useful. So, now we're back to our robot. So, let's try to tackle another scenario. So, successfully defeated the issue of coffee ordering. So, again, apparently that coffee drinkers have lots and lots of neat picks. For example, you can't just pour any amount of water on any amount of coffee, apparently. I don't know why. That would be wrong. So, imagine you have some, some function that does the pouring. So, take some waters, take some grounds and, and does, and pours water over the grounds. So, this function can easily lead us to an illegal state. So, you can just choose the wrong ratio of water and grounds. And there you go. You have a wrong, a wrong state and a coffee that was, that was spoiled by too much water or too little water or whatever. And so, we can do something like this. So, we define a new type called tasty ratio. And we only want to allow tasty ratios in our, in our function. And this seems that, like, that would be kind of better, because here we're explicit about what, what we actually want to achieve. But not really, because the definition of tasty ratio is pretty much the same thing. You just moved, sorry, you just shuffled around your problem into another place. You still can create tasty ratio instances with the wrong proportion of water and grounds. And so, although we claim that tasty ratio is a valid input, we do not enforce it in any way. So, it's, again, another illegal state that's waiting to happen. And since it can be represented in our system, most likely someone at some point will create an illegal instance of tasty ratio and something will be broken. And, and so, in this case, though, we have so many illegal states, because most, most combinations of water and grounds will probably be illegal. So, our state space is just full of illegal, illegal, illegal states. And just a few small number of possible, comparatively small number of, of combinations of, of water and grounds are actually legal. And what we want to achieve is to only be able to write down the legal combinations and making, writing all other combinations completely impossible. That's, that's our goal. So, so basically what we want is some kind of invariant on tasty ratio and invariant that, that tells us that water and grounds are in the right proportion, proportion. And we don't want to be checking it all over, over the place. We don't want to do defensive programming and kind of sprinkle our code with e-falses and exceptions and the like. So, so ideally, so whenever we have an instance of tasty ratio, it has to be, has to be correct and nothing else should be impossible. But unlike the invariant of coffee, of the coffee order, which was kind of simple, is that Irish, Irish coffee must have cream and whiskey. This invariant is, is a bit trickier to get right. And just using algebraic data types, you probably won't be able to easily enforce it in the types. Correct me if I'm wrong if you have a way of doing that, but probably not likely and won't be worth it. So instead we're going to use smart constructor. So smart constructor basically limits the way we can, we can build instances of our, of our values. So this is just called a specific way, but most languages have some equivalent of this. So first of all, we, we mark our constructor as private. So we can no longer instantiate instances of tasty ratio without directly from the constructor. And then we create our own legal, our own smart constructor that, that requires that everything is legal. So the contract of the make function is that it can take any inputs, but it will only produce a tasty ratio only if the inputs are actually valid. And nothing else is possible. And this will be the only way to construct tasty ratios in our, in our program. And so the logic itself is probably not that complicated. So we just verify the, verify the right amounts. But it is crucial to get this right. So this is kind of the safe kernel that you have in your program that users will now assume is correct and can rely on in all other places. So if you got this right, people can, can rely on this invariant now for every place where they stumble upon tasty ratio. So now after, after making the smart constructor and, and forbidding the creation of tasty ratio without, without calling the smart constructor, now the, the, this function is, is safe. It actually does what, what it promises. You cannot call it with an illegal tasty ratio because there are no tasty ratios that are illegal in our system. It's just not possible anymore. So more generally, generally smart constructors are a great way of enforcing diverse invariants. So we can find many examples. So in this case, our signature is, is kind of, again, we have a wishful comment about something about age and, and, and alcohol restrictions, but, but it's not really an invariant that's enforced anywhere. Just wishful thinking. But if you apply the correct smart constructor, you can probably get it, get this, this type that will enforce it. It's not possible anymore to, to do the illegal action of, in this case, pouring whiskey into Irish coffee. And you can have more examples. So again, the first, the, the first, the top signature is always some wishful thinking and a type that doesn't really, really represent well what, what we want. And the second is, is a corrected version where we enforce something in our, on our type and, and usually we close it off with a smart constructor so that nobody can access the, the illegal states. And notice that we didn't make tasty ratio any smaller by, by creating the, the, the smart constructor. But we can, we have an illusion that tasty ratio is now a smaller value that doesn't have illegal states just because we made it impossible to create them. So we can program as if the state space really is now smaller and illegal states are unrepresentable. And again, it's very important to get the smart constructors right. So it's a one-time effort, which is probably worth it because you just cover it in one space, and then all of your flows can, can rely on the fact that the invariant, all the invariance you want are actually enforced. So smart constructors are a great way to enforce diverse invariance and with compiler assistance. So, assistance. So the moment you got it right from there on, you know that the compiler won't let anyone bypass this invariant that you're trying to enforce. And as a bonus, our type signatures are becoming, becoming kind of self-documenting because our types are now representing actual invariance that we care directly, directly in our code. And it's better than comments because they will never go out of date. The compiler is there to keep everything in check. But we do have to be careful when defining smart constructors because, as I said, you have to get that function right. And so unlike algebraic data types where you are kind of correct by construction, smart, smart constructors are usually have to do some unsafe work to make sure that everything else is safe. And so when possible, if you can represent something with an algebraic data type, that's probably the preferred way. But when, when they work, smart constructors are a great tool for excluding illegal states. So one, one last, last problem to tackle with a robot. So brewing coffee is, again, no surprise, a complicated process as well. And let's try to model a small part of brewing coffee. So here's one, one way to kind of model this, this process. So we have this, this kind of imperative interface that you might, you might expect for operating a robot with a bunch of kind of low-level commands that, that can be used for, for the brewing stage. And assuming that someone actually implemented this at the robot level, we can write the code for, for preparing for brewing, not the actual brewing, but just the preparation. And so this looks pretty informative. We just call, call the various actions in order. Anyone sees a bug here? So, disgustingly, we forgot to rinse the filter, and now our users are going to drink this paper-tasting coffee, and, and probably we'll just throw our, quit our robot and, and, and we will lose customers. So, so the reputation of the robot depends on it, and we'll, we just messed up a good cup of coffee. But, but more seriously, this, this code is very, very open to, to potential bugs, bugs that, that is illegal states. So you can, you can forget action just like, just like I did right now with the filter answering. You can mix up the order. You can, you can duplicate actions. Everything can happen here. It's, it's full of possible legal states. And if it's, if it's possible, we're most likely to hit it at some point. Maybe a refactoring gone, gone wrong or something, something else will can go wrong. And the problem is here that even if, if we do, do mix something up, the compiler won't help us. It doesn't know anything about it. So just compile fine and, and just be wrong. So again, this is our desired state space. It's quite simple. It doesn't really have many, many things that, that it has to do. But again, our actual code is open to various illegal state transitions that we can, we can make that we would like to avoid and make them compile time and possible to actually write down. So we can improve as well. So a big part of the problem here of the issue is that, is the imperative interface. It's, it's, it just tells us the actions we, we want to perform. It doesn't have any information, very little information about the intent of this action and the consequences of it. So, so if, if we have a unit return time of something, it doesn't really tell us much about what did we want to achieve or what actually happened. So, and so, since so little is reflected in the types, it's, it's not, it's not a surprise that the compiler can't really help us because the compiler works usually with types and that's, that's its way to support us. And so the solution will be to become more declarative. So we're leaving the imperative, imperative interface behind and, and trying to make it more declarative. So we start by just adding, adding expectations. So what, what, what we aim to achieve on every action. So, for example, the place filter function now, once invoked, will return a filter placed value, which will correspond to the fact that the filter was indeed placed. And so on for all the other functions. And we're not done yet. So we have another, we do have some various prerequisites. So we, there's some ordering that, that has to go on here that, that is otherwise illegal. And so we're going to define prerequisites as function arguments. So placing a filter cannot occur unless the filter was folded before. So we make the explicit in our function by requiring an argument that the filter was actually folded. And the same thing goes for rinsing the filter, which can't happen unless the filter was placed and the water was heated. And the same thing for grounds that you, if you want to add them, they must be actually ground. And the filter must be rinsed to prevent the bug from, from before. And so basically what we were doing here is we're encoding kind of business rules directly in our signatures. And once we do that, in turn, it means that code that violates those rules won't even compile. It becomes literally unrepresentable. And so we can now implement our prep flow from before. So instead of having our implementation returning unit, we now have a more informative, more informative signature that tells us what actually was achieved during that process. So after we finished the prep, water was heated and grounds were actually added. So there's no avoiding that now. Every implementation of this code has to, to do something about it. And so since our types are so, so descriptive, now again, again, this ability to kind of follow the types to implement our flow. So this is very similar to the code that we had before. But now we have to press around various outputs from our actions. So this code is still incomplete. But the nice thing here is that the compiler now helps us. It tells us, well, you forgot to make sure that you followed the filter before you placed it. And so we can fix that. And now the compiler tells us, okay, but if you want to add grounds, you have to, you have some prerequisites. So let's fix that. We have to have the coffee ground and the coffee ground and filter placed. And now we still have the same bug from before. We still, we forgot to rinse the filter. But this time, the compiler will tell us, you forgot to rinse the filter. So you have to do that before you can actually add your grounds. And so we fix that. And now the compiler is happy. And we are happy because our clients are happy. So because we shared our business rules, business knowledge with the compiler, the compiler was very helpful in actually enforcing this for us and making it impossible to stray from the right path. Also notice, so by making everything more declarative, it's now much easier to figure out what flows where and what goes in which way. And so in essence, our function dependencies are defining requirements and making the flow much more limited in what can or can't happen. And so this, for example, opens up opportunities for parallelization. So if you see that two functions are independent, you might be able to parallelize them. And the nice thing here is that the compiler will help you get it right because it knows what can or cannot be parallelized. But there is something that I didn't specify for the moment. And what are those types? The water heated and grounds added types and all the rest I just used here. So I just assumed that they are there, but I didn't actually specify them. And the answer is I don't care. I literally don't care about those types. So much so that I can actually represent it in our type signature. So brewing prep doesn't really depend on the specific values of all the types of coffee ground, water heated, and the like. Why? Because it just passes them around. It doesn't inspect them in any way. It just passes them around as kind of tokens of security, but it doesn't do anything else with them. And to make this explicit, we made our brewing prep function parametric. So now it takes six type arguments, although sounds scary. But since we don't care about the actual values, we can do that. And everything will just work the same way as before. So we explicitly declare the fact that we are invariant and don't care about how those types are specified. Now, in order for this to work out, the brewing actions interface has to be adapted as well. It has to be parametric in the same way. But because slide space is kind of limited, I'll abbreviate for a moment. And so now brewing actions is going to take the same six type parameters. And so now we are kind of consistently, the code looks exactly the same, but now we have type parameters. You might ask, why would you do that? And the answer is if you don't care about the inputs and outputs, if you make them parametric, it leaves you very little space to actually cheat. So in case I want to pass the water-heated value and have to return it for my signature, there's no way to obtain a water-heated value because from anywhere else, other than calling heat to water, because I have no idea what the type really is. It's parametric, so I have no information on how to obtain it. I don't know what it is, so it's just impossible. And so in this case, we're just forced to do the right thing because there's no way to cheat. If it was a unit or some other kind of simple value, we just could return that. But in this case, we can't because it's type parameter. And as a nice bonus, this approach actually gives us, although it limits the implementation, which is a good thing, it does give us various flexibility degrees of freedom when creating brewing actions because the type parameters can be set to whatever we actually want in brewing actions and still use unit, and maybe we can use something more informative in tests. And so this gives us actual, the limitation on this side actually gives us more flexibility in other places, which is a nice bonus, but it's not directly related to what we're doing here. But the point is that the brewing prep doesn't care about how those inputs work, and so we can limit it completely to using them correctly. And so I will point out that this code doesn't prevent every legal state possible. So for example, nothing stops us from calling fold filter twice. That might be, might be illegal. And in general, it's not always possible to limit every possible, every possible illegal state, but it's better to get something right than nothing. So I do think it's an improvement. So being declarative is a great way to encode your business rules directly in your types. That way the compiler can help you enforce those rules and making every breakage of the encoded rules impossible at compile time, and thus it's unrepresentable. And the good first step when trying to do things more declaratively is figure out where you have those redundant units that don't communicate any information about what the function does, and then try to see how you can solve it. And by making everything parametric, our code is becoming ignorant of the actual types that we use, which limits the number of possible illegal states that we can enter. So the less the code can do, the more we know about what it actually does. So ignorance is strength, like the famous quote. Okay, so we're done with the various techniques. It might not be obvious from those two examples, like why would that be useful? Because they're all small examples and kind of hard to see how they work out in a large code base that you have to maintain for a long time. My point is that all of this kind of adds up, and eventually it does make your code better in the long run, even if it's not obvious from the first small steps. But in this section we'll just kind of quickly review what sort of benefits you can expect to reap from being consistent and making illegal states as unrepresentable as you can in your code base. So the first point is that code becomes easier to comprehend. So as I just mentioned, the fewer things the code can do, the easier it is to understand what it actually does. But more concretely, for example, if you use algebraic data types consistently across your code base, the compiler can help you figure out what's happening now. You do a better match. Some editors would actually autocomplete all the cases, and you can now figure out what's going on, what information you have, what can you use and the like, and the compiler got your back. Not only that, it can also, as I mentioned, automatically do accessibility checking, so you're sure to not forget anything in case anything changes. And so this is definitely an improvement on your ability to figure out what's going on. And also a common theme throughout the examples is that our type signatures are becoming more informative. They encode more and more information about what's going on. So just by reading the signatures, it becomes easier to figure out what are the limitations, what is allowed, what is disallowed, and the like. Fewer bugs. So every legal state that you precluded and made unrepresentable is a potential bug that you avoided. So, for example, creating an Irish coffee order without whiskey is no longer possible. It's not a state that you can write. This is a compilation error. Nor this, like serving coffee and to an empty list of cups. Again, this is no longer possible because you enforced it at compile time, and this is a bug again that cannot happen anymore. And since they are unrepresentable, you don't have to test for them a lot. So this is our next point, is that you can do fewer, if you make as many legal states unrepresentable as possible, this leads to fewer tests that you actually have to write. For example, this test can't be expressed. Again, testing whether Irish coffee order has whiskey is no longer relevant because, again, even the test can't even compile. So that's a test that you don't have to write, and some tests, for example, are still possible to write but maybe more redundant because you don't really need, if your interface is sufficiently declarative, it might be kind of obvious on its own that you don't have to check whether water was heated or not when you done the brewing prep because the types are requiring that. And the last point is safer refactoring. So your code becomes much easier to refactor. For example, this code, the get calls on the optional values are only safe somewhat in the case that you're ordering Irish coffee. But imagine that you're doing refactor and now the prepare Irish coffee call moves to another place. Now it's in some other place and nothing is actually checking whether we're in the right case. So this is no longer safe. On the other hand, this code with the pattern match is safe by construction. If you try to move the call to prepare Irish coffee, the code will fail to compile because it will no longer have the references to the right information that it needs. And another refactoring is if you add something, for example, again, the compiler will verify that you matched all the various types, all the various cases that you have and will enforce again that you don't forget anything. Another example of refactoring is I mentioned in the previous section that we can paralyze some actions here. So we can, for example, heat water, grind coffee, and the rest can be paralyzed because they have no dependencies. So this is a refactoring that's easy to get wrong because if you mess something up, things will run in parallel when they shouldn't. And in the bad example, that would be just broken. But here we can write this code. And if we mess something up, the compiler will tell us you're missing some dependencies. You can't run this in parallel. So as people work and maintain large code bases, I think those benefits kind of add up and investment that you're making on making legal states unrepresentable is definitely, definitely worth the effort. So to conclude, almost done. So whenever you tackle a new domain, try to think about the state space of your problem, the various states that the system can arrive at and what can happen. Find the legal states in your system and define them to match your requirements or whatever other error conditions that you might care about. And all the other states are illegal. Now, if all you do is just think, just sit there and think about your state space in the legal and illegal state, that's already a great first step. You don't have to do anything else. That's already a good way of getting your code to be better just by knowing what's possible and impossible. But if you actually want to reap the benefits from this talk, make those states unrepresentable. And the benefits are fewer bugs, fewer tests, easier to comprehend code. And you don't have to worry anymore about states that are illegal because you made them unrepresentable. So you don't have to think about them anymore. That's a great thing to do. When you don't have to think about something, you can think about something else, which might be useful. And so we saw a number of techniques to achieve this goal. So algebraic data types help us reduce the state space into something smaller and more manageable. Smart constructors let us enforce various invariants and declarative signatures make various business rules kind of apparent in our code. And parametric polyphysm is like a nice cherry on top if you want to really kind of go at it even more limited. So there's a slide about where to go next. So I covered some very basic techniques. There are other approaches that you can take, which probably have a steeper cost-benefit ratio. So it might be not worth it. But these are some ideas of what you can think of, especially various type systems. So a lot of the things we've done are kind of bound by the type system that we're using. And so maybe trying other more advanced type systems or type system features can help you make things easier. If you're taking a photo, you can do that. I'll post the link to the slide so everything is there. And there's some inspiration for various resources that I think are kind of useful in thinking about problems. And again, I'll post the link for the presentation. All the links will be available. So it's my time to wrap up. So remember our poor little user that was trying to register and didn't have an email. So somewhere someone is trying to introduce another bug in our system. But luckily we applied all the techniques that we studied right now. And it no longer compiles. The illegal states is unrepresentable. The compiler tells us that and we can sleep quietly tonight. So hopefully I managed to convince you that making illegal states unrepresentable is actually worth the effort. And this is linked to the presentation. And if I have time for questions, I'm not sure. Yes, we can try to take one online question first, maybe. Can you please read it out for our audience? I guess you're in favor of using something like refined to express even more constraints in types instead of custom smart constructors. Yes, the one of the last slides, I used refined as there's a link to the refined library here in the end. So yes, refined is a nice library that can help you automate the process of creating smart constructors. Instead of writing them manually by hand, you can use a library that helps with that. All right. Thank you. We have also one question here on site. Hi. So thanks for the great talk. In the example about algebraic data types. It was the example of ordering different types of coffee. But what happens if the coffee shop owners have a business requirement that at any point of time, she wants to be able to add a new type of the coffee? So what happens to our algebraic data types with such a requirement? So there's often kind of people debating whether types are useful or not, or kind of this conception that you have to go all in or nothing. So either you specify everything and everything is fixed in types or not. This is not the case. If you want some flexibility, you can live that measure of flexibility as your requirements desire. So in the case of maybe having another case which is more dynamically defined, maybe have another case which is dynamic. And then you'll be extra careful around that case. But still, you now have a small island of sanity where you know what's going on and another section of the code which is not as pleasant and safe. But still, you can separate the parts. What you know, you can encode. What you don't, leave it as an unknown and handle it appropriately. Okay. Thank you. We have one more online question. If you could again, please read it out. So only recently I started learning Haskell and Idris from the perspective of making illegal states not representable. It seems to me that type-driven development advocated by Idris is more suitable. Then again, I'm a beginner. So yes, Haskell and Idris both have various advanced type-level features and things you can do that make it possible to exclude even more illegal states. And as I mentioned, using more advanced type systems is a good way to enforce more invariance. But the question is kind of the cost, whether it's worth it, especially as a beginner, because if you play something very, very kind of a heavy tool that does something very sophisticated, it might be more difficult to maintain. So I think you should kind of gradually ramp up there and eventually maybe use it, but have a good way to judge whether it's worth it or not. So start simple and then gradually improve. All the things I did mention now are available in both Haskell and Idris. So that's not actually a problem. And you can start there and move on to something more advanced. Okay. We have time for one last onsite question here. Thanks for a great talk. I'm wondering if any of the techniques that you mentioned are applicable in dynamically checked languages? And if you have an experience in doing so, maybe? So in dynamically typed languages, everything's applicable. You can write anything. The question is whether who enforces things for you. So in a statically typed language, the compiler is much more your friend than people usually think. And then in dynamically typed language, first of all, just thinking about the state space, you can do it in any language on a piece of paper. It doesn't really matter. And it's already an improvement. And then if you are explicit about what's illegal, at least you can force your invariance even in a dynamic context. For example, your smart constructor won't return an optional value, but will throw an exception. But at least you limited the scope of where things can go wrong, for example. And pattern matching is available in various languages. Although there are no, the guarantees might be somewhat looser, but still it's better than nothing. So those approaches can help you, but they won't gain you as much benefit as they are in a statically typed language, I think. All right. Thank you very much, Daniel. Please help me thank him.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 23.76, "text": " We're here to talk about this great quote up there by Jaron Minsky, make legal states", "tokens": [50364, 492, 434, 510, 281, 751, 466, 341, 869, 6513, 493, 456, 538, 508, 6372, 376, 44153, 11, 652, 5089, 4368, 51552], "temperature": 0.0, "avg_logprob": -0.439599871635437, "compression_ratio": 1.0365853658536586, "no_speech_prob": 0.11911085993051529}, {"id": 1, "seek": 2376, "start": 23.76, "end": 30.32, "text": " unrepresentable. And although it sounds quite simple, I find that the consequences of it are", "tokens": [50364, 517, 19919, 11662, 712, 13, 400, 4878, 309, 3263, 1596, 2199, 11, 286, 915, 300, 264, 10098, 295, 309, 366, 50692], "temperature": 0.0, "avg_logprob": -0.1815591680592504, "compression_ratio": 1.581896551724138, "no_speech_prob": 0.722682774066925}, {"id": 2, "seek": 2376, "start": 30.32, "end": 37.52, "text": " quite profound. But before we actually begin and dive in, let's start with kind of a short story", "tokens": [50692, 1596, 14382, 13, 583, 949, 321, 767, 1841, 293, 9192, 294, 11, 718, 311, 722, 365, 733, 295, 257, 2099, 1657, 51052], "temperature": 0.0, "avg_logprob": -0.1815591680592504, "compression_ratio": 1.581896551724138, "no_speech_prob": 0.722682774066925}, {"id": 3, "seek": 2376, "start": 37.52, "end": 42.24, "text": " as an introduction. So it's the middle of the night and you're sleeping peacefully.", "tokens": [51052, 382, 364, 9339, 13, 407, 309, 311, 264, 2808, 295, 264, 1818, 293, 291, 434, 8296, 36485, 13, 51288], "temperature": 0.0, "avg_logprob": -0.1815591680592504, "compression_ratio": 1.581896551724138, "no_speech_prob": 0.722682774066925}, {"id": 4, "seek": 2376, "start": 42.88, "end": 48.56, "text": " And suddenly you get a call and you're being informed that the production system is crashing.", "tokens": [51320, 400, 5800, 291, 483, 257, 818, 293, 291, 434, 885, 11740, 300, 264, 4265, 1185, 307, 26900, 13, 51604], "temperature": 0.0, "avg_logprob": -0.1815591680592504, "compression_ratio": 1.581896551724138, "no_speech_prob": 0.722682774066925}, {"id": 5, "seek": 4856, "start": 49.52, "end": 57.760000000000005, "text": " And after a few minutes of furious debugging, you find this exception that happens. Someone", "tokens": [50412, 400, 934, 257, 1326, 2077, 295, 33470, 45592, 11, 291, 915, 341, 11183, 300, 2314, 13, 8734, 50824], "temperature": 0.0, "avg_logprob": -0.15331282085842557, "compression_ratio": 1.6343612334801763, "no_speech_prob": 0.028652630746364594}, {"id": 6, "seek": 4856, "start": 57.760000000000005, "end": 64.4, "text": " accessed an empty optional value. And how can that be? You ask yourself. And so you dig a little", "tokens": [50824, 34211, 364, 6707, 17312, 2158, 13, 400, 577, 393, 300, 312, 30, 509, 1029, 1803, 13, 400, 370, 291, 2528, 257, 707, 51156], "temperature": 0.0, "avg_logprob": -0.15331282085842557, "compression_ratio": 1.6343612334801763, "no_speech_prob": 0.028652630746364594}, {"id": 7, "seek": 4856, "start": 64.4, "end": 71.12, "text": " deeper and you find this wonderful code. So someone unwrapped an empty option value. And", "tokens": [51156, 7731, 293, 291, 915, 341, 3715, 3089, 13, 407, 1580, 14853, 424, 3320, 364, 6707, 3614, 2158, 13, 400, 51492], "temperature": 0.0, "avg_logprob": -0.15331282085842557, "compression_ratio": 1.6343612334801763, "no_speech_prob": 0.028652630746364594}, {"id": 8, "seek": 4856, "start": 71.12, "end": 76.72, "text": " you read this comment. This is safe. Registered users always have email. And it's a very nice", "tokens": [51492, 291, 1401, 341, 2871, 13, 639, 307, 3273, 13, 43167, 292, 5022, 1009, 362, 3796, 13, 400, 309, 311, 257, 588, 1481, 51772], "temperature": 0.0, "avg_logprob": -0.15331282085842557, "compression_ratio": 1.6343612334801763, "no_speech_prob": 0.028652630746364594}, {"id": 9, "seek": 7672, "start": 76.8, "end": 83.28, "text": " comment. And the old caps are stressing the right points. And it's a very reasonable assumption", "tokens": [50368, 2871, 13, 400, 264, 1331, 13855, 366, 48233, 264, 558, 2793, 13, 400, 309, 311, 257, 588, 10585, 15302, 50692], "temperature": 0.0, "avg_logprob": -0.13759762900216238, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.005857816897332668}, {"id": 10, "seek": 7672, "start": 83.28, "end": 89.44, "text": " because registered users should have emails and the product manager also required that as well.", "tokens": [50692, 570, 13968, 5022, 820, 362, 12524, 293, 264, 1674, 6598, 611, 4739, 300, 382, 731, 13, 51000], "temperature": 0.0, "avg_logprob": -0.13759762900216238, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.005857816897332668}, {"id": 11, "seek": 7672, "start": 89.44, "end": 97.28, "text": " So what went wrong? And basically what happened is that we entered an illegal state of our system", "tokens": [51000, 407, 437, 1437, 2085, 30, 400, 1936, 437, 2011, 307, 300, 321, 9065, 364, 11905, 1785, 295, 527, 1185, 51392], "temperature": 0.0, "avg_logprob": -0.13759762900216238, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.005857816897332668}, {"id": 12, "seek": 7672, "start": 97.28, "end": 102.56, "text": " and doesn't really matter how we got there. But these sorts of situations happened all the time.", "tokens": [51392, 293, 1177, 380, 534, 1871, 577, 321, 658, 456, 13, 583, 613, 7527, 295, 6851, 2011, 439, 264, 565, 13, 51656], "temperature": 0.0, "avg_logprob": -0.13759762900216238, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.005857816897332668}, {"id": 13, "seek": 10256, "start": 102.56, "end": 108.4, "text": " I'm sure most of you had some experience seeing some error of this kind happening to you.", "tokens": [50364, 286, 478, 988, 881, 295, 291, 632, 512, 1752, 2577, 512, 6713, 295, 341, 733, 2737, 281, 291, 13, 50656], "temperature": 0.0, "avg_logprob": -0.11410816856052565, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.008201111108064651}, {"id": 14, "seek": 10256, "start": 108.88, "end": 114.64, "text": " And those things can be avoided. And I would say they must be avoided because all would like to", "tokens": [50680, 400, 729, 721, 393, 312, 24890, 13, 400, 286, 576, 584, 436, 1633, 312, 24890, 570, 439, 576, 411, 281, 50968], "temperature": 0.0, "avg_logprob": -0.11410816856052565, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.008201111108064651}, {"id": 15, "seek": 10256, "start": 114.64, "end": 121.76, "text": " have a good night's sleep. But this is what we're here to talk about. How to make these illegal", "tokens": [50968, 362, 257, 665, 1818, 311, 2817, 13, 583, 341, 307, 437, 321, 434, 510, 281, 751, 466, 13, 1012, 281, 652, 613, 11905, 51324], "temperature": 0.0, "avg_logprob": -0.11410816856052565, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.008201111108064651}, {"id": 16, "seek": 10256, "start": 121.76, "end": 127.68, "text": " states unrepresentable. How to make it impossible to create software that enters those illegal states.", "tokens": [51324, 4368, 517, 19919, 11662, 712, 13, 1012, 281, 652, 309, 6243, 281, 1884, 4722, 300, 18780, 729, 11905, 4368, 13, 51620], "temperature": 0.0, "avg_logprob": -0.11410816856052565, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.008201111108064651}, {"id": 17, "seek": 12768, "start": 128.64000000000001, "end": 136.72, "text": " So today we're going to discuss this quote. What it actually means. We'll break it down into", "tokens": [50412, 407, 965, 321, 434, 516, 281, 2248, 341, 6513, 13, 708, 309, 767, 1355, 13, 492, 603, 1821, 309, 760, 666, 50816], "temperature": 0.0, "avg_logprob": -0.1332973133433949, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.0023190025240182877}, {"id": 18, "seek": 12768, "start": 136.72, "end": 144.08, "text": " smaller parts. Then I'll show some simple techniques to try to achieve this ideal of making", "tokens": [50816, 4356, 3166, 13, 1396, 286, 603, 855, 512, 2199, 7512, 281, 853, 281, 4584, 341, 7157, 295, 1455, 51184], "temperature": 0.0, "avg_logprob": -0.1332973133433949, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.0023190025240182877}, {"id": 19, "seek": 12768, "start": 144.08, "end": 148.64000000000001, "text": " illegal states unrepresentable. And we'll conclude with seeing what are the sort of benefits that", "tokens": [51184, 11905, 4368, 517, 19919, 11662, 712, 13, 400, 321, 603, 16886, 365, 2577, 437, 366, 264, 1333, 295, 5311, 300, 51412], "temperature": 0.0, "avg_logprob": -0.1332973133433949, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.0023190025240182877}, {"id": 20, "seek": 12768, "start": 148.64000000000001, "end": 155.84, "text": " you might expect to reap in case you actually follow this principle. So this is mostly a beginner", "tokens": [51412, 291, 1062, 2066, 281, 39178, 294, 1389, 291, 767, 1524, 341, 8665, 13, 407, 341, 307, 5240, 257, 22080, 51772], "temperature": 0.0, "avg_logprob": -0.1332973133433949, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.0023190025240182877}, {"id": 21, "seek": 15584, "start": 155.84, "end": 161.12, "text": " friendly talk. So don't expect some mind blowing techniques. But I do hope that the", "tokens": [50364, 9208, 751, 13, 407, 500, 380, 2066, 512, 1575, 15068, 7512, 13, 583, 286, 360, 1454, 300, 264, 50628], "temperature": 0.0, "avg_logprob": -0.177123988967344, "compression_ratio": 1.51528384279476, "no_speech_prob": 0.0028791488148272038}, {"id": 22, "seek": 15584, "start": 161.12, "end": 165.68, "text": " perspective I am about to show is useful even for more experienced developers.", "tokens": [50628, 4585, 286, 669, 466, 281, 855, 307, 4420, 754, 337, 544, 6751, 8849, 13, 50856], "temperature": 0.0, "avg_logprob": -0.177123988967344, "compression_ratio": 1.51528384279476, "no_speech_prob": 0.0028791488148272038}, {"id": 23, "seek": 15584, "start": 167.52, "end": 173.52, "text": " So as far as I know this quote was created in the context of working on a financial system.", "tokens": [50948, 407, 382, 1400, 382, 286, 458, 341, 6513, 390, 2942, 294, 264, 4319, 295, 1364, 322, 257, 4669, 1185, 13, 51248], "temperature": 0.0, "avg_logprob": -0.177123988967344, "compression_ratio": 1.51528384279476, "no_speech_prob": 0.0028791488148272038}, {"id": 24, "seek": 15584, "start": 173.52, "end": 181.52, "text": " So Jaron Minsky is, was working on Jane Street. And I can imagine that making illegal states", "tokens": [51248, 407, 508, 6372, 376, 44153, 307, 11, 390, 1364, 322, 13048, 7638, 13, 400, 286, 393, 3811, 300, 1455, 11905, 4368, 51648], "temperature": 0.0, "avg_logprob": -0.177123988967344, "compression_ratio": 1.51528384279476, "no_speech_prob": 0.0028791488148272038}, {"id": 25, "seek": 18152, "start": 181.52, "end": 185.68, "text": " unrepresentable in the financial system is very, very important because you probably don't want", "tokens": [50364, 517, 19919, 11662, 712, 294, 264, 4669, 1185, 307, 588, 11, 588, 1021, 570, 291, 1391, 500, 380, 528, 50572], "temperature": 0.0, "avg_logprob": -0.1538608676784641, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.008047431707382202}, {"id": 26, "seek": 18152, "start": 186.72, "end": 192.96, "text": " to lose transactions or money or whatever. So let's dive in and figure out what it means to", "tokens": [50624, 281, 3624, 16856, 420, 1460, 420, 2035, 13, 407, 718, 311, 9192, 294, 293, 2573, 484, 437, 309, 1355, 281, 50936], "temperature": 0.0, "avg_logprob": -0.1538608676784641, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.008047431707382202}, {"id": 27, "seek": 18152, "start": 192.96, "end": 200.08, "text": " that an illegal state is unrepresentable and how do we define it. So we start with the state.", "tokens": [50936, 300, 364, 11905, 1785, 307, 517, 19919, 11662, 712, 293, 577, 360, 321, 6964, 309, 13, 407, 321, 722, 365, 264, 1785, 13, 51292], "temperature": 0.0, "avg_logprob": -0.1538608676784641, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.008047431707382202}, {"id": 28, "seek": 18152, "start": 200.08, "end": 206.4, "text": " So what is the state of a program? So imagine your whole application running and take like a", "tokens": [51292, 407, 437, 307, 264, 1785, 295, 257, 1461, 30, 407, 3811, 428, 1379, 3861, 2614, 293, 747, 411, 257, 51608], "temperature": 0.0, "avg_logprob": -0.1538608676784641, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.008047431707382202}, {"id": 29, "seek": 20640, "start": 206.4, "end": 211.92000000000002, "text": " single, single snapshot in time with all the variables and all your variables, threads,", "tokens": [50364, 2167, 11, 2167, 30163, 294, 565, 365, 439, 264, 9102, 293, 439, 428, 9102, 11, 19314, 11, 50640], "temperature": 0.0, "avg_logprob": -0.16167944380380575, "compression_ratio": 1.831896551724138, "no_speech_prob": 0.007316273637115955}, {"id": 30, "seek": 20640, "start": 211.92000000000002, "end": 217.28, "text": " function calls, whatever. So single snapshot of your program. So this is an example of such", "tokens": [50640, 2445, 5498, 11, 2035, 13, 407, 2167, 30163, 295, 428, 1461, 13, 407, 341, 307, 364, 1365, 295, 1270, 50908], "temperature": 0.0, "avg_logprob": -0.16167944380380575, "compression_ratio": 1.831896551724138, "no_speech_prob": 0.007316273637115955}, {"id": 31, "seek": 20640, "start": 217.84, "end": 222.0, "text": " states. So you have some variable assignments. You have maybe registers,", "tokens": [50936, 4368, 13, 407, 291, 362, 512, 7006, 22546, 13, 509, 362, 1310, 38351, 11, 51144], "temperature": 0.0, "avg_logprob": -0.16167944380380575, "compression_ratio": 1.831896551724138, "no_speech_prob": 0.007316273637115955}, {"id": 32, "seek": 20640, "start": 222.0, "end": 225.84, "text": " heap allocations, whatever. Threads are running. Functions are about to be called.", "tokens": [51144, 33591, 12660, 763, 11, 2035, 13, 334, 2538, 82, 366, 2614, 13, 11166, 3916, 366, 466, 281, 312, 1219, 13, 51336], "temperature": 0.0, "avg_logprob": -0.16167944380380575, "compression_ratio": 1.831896551724138, "no_speech_prob": 0.007316273637115955}, {"id": 33, "seek": 20640, "start": 226.96, "end": 232.08, "text": " So this is a single state of the system. So obviously a real system will have many, many,", "tokens": [51392, 407, 341, 307, 257, 2167, 1785, 295, 264, 1185, 13, 407, 2745, 257, 957, 1185, 486, 362, 867, 11, 867, 11, 51648], "temperature": 0.0, "avg_logprob": -0.16167944380380575, "compression_ratio": 1.831896551724138, "no_speech_prob": 0.007316273637115955}, {"id": 34, "seek": 23208, "start": 232.08, "end": 239.20000000000002, "text": " many states. But for the purposes of this talk, we're going to kind of zoom out and from the", "tokens": [50364, 867, 4368, 13, 583, 337, 264, 9932, 295, 341, 751, 11, 321, 434, 516, 281, 733, 295, 8863, 484, 293, 490, 264, 50720], "temperature": 0.0, "avg_logprob": -0.13248841480542256, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.008436708711087704}, {"id": 35, "seek": 23208, "start": 239.20000000000002, "end": 246.16000000000003, "text": " details of registers and threads and like, and just have like a conceptual picture of the different", "tokens": [50720, 4365, 295, 38351, 293, 19314, 293, 411, 11, 293, 445, 362, 411, 257, 24106, 3036, 295, 264, 819, 51068], "temperature": 0.0, "avg_logprob": -0.13248841480542256, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.008436708711087704}, {"id": 36, "seek": 23208, "start": 246.16000000000003, "end": 252.8, "text": " states of the system. So this is our program's state space. All the different states, it can find", "tokens": [51068, 4368, 295, 264, 1185, 13, 407, 341, 307, 527, 1461, 311, 1785, 1901, 13, 1057, 264, 819, 4368, 11, 309, 393, 915, 51400], "temperature": 0.0, "avg_logprob": -0.13248841480542256, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.008436708711087704}, {"id": 37, "seek": 23208, "start": 252.8, "end": 259.04, "text": " itself in. So, but some states are illegal. That means that if you enter that state, something", "tokens": [51400, 2564, 294, 13, 407, 11, 457, 512, 4368, 366, 11905, 13, 663, 1355, 300, 498, 291, 3242, 300, 1785, 11, 746, 51712], "temperature": 0.0, "avg_logprob": -0.13248841480542256, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.008436708711087704}, {"id": 38, "seek": 25904, "start": 259.04, "end": 263.44, "text": " bad will happen. The program will crash. An exception will be thrown. Maybe a business rule", "tokens": [50364, 1578, 486, 1051, 13, 440, 1461, 486, 8252, 13, 1107, 11183, 486, 312, 11732, 13, 2704, 257, 1606, 4978, 50584], "temperature": 0.0, "avg_logprob": -0.12762113588046184, "compression_ratio": 1.6807017543859648, "no_speech_prob": 0.0012587702367454767}, {"id": 39, "seek": 25904, "start": 263.44, "end": 268.32, "text": " will be violated. But something, whatever it is, it's something that's bad for your system and", "tokens": [50584, 486, 312, 33239, 13, 583, 746, 11, 2035, 309, 307, 11, 309, 311, 746, 300, 311, 1578, 337, 428, 1185, 293, 50828], "temperature": 0.0, "avg_logprob": -0.12762113588046184, "compression_ratio": 1.6807017543859648, "no_speech_prob": 0.0012587702367454767}, {"id": 40, "seek": 25904, "start": 268.32, "end": 274.48, "text": " something that you would like to avoid. So of course, what's considered illegal is very context", "tokens": [50828, 746, 300, 291, 576, 411, 281, 5042, 13, 407, 295, 1164, 11, 437, 311, 4888, 11905, 307, 588, 4319, 51136], "temperature": 0.0, "avg_logprob": -0.12762113588046184, "compression_ratio": 1.6807017543859648, "no_speech_prob": 0.0012587702367454767}, {"id": 41, "seek": 25904, "start": 274.48, "end": 280.08000000000004, "text": " dependent and it depends on what you care about at the moment and the various tradeoffs. But let's", "tokens": [51136, 12334, 293, 309, 5946, 322, 437, 291, 1127, 466, 412, 264, 1623, 293, 264, 3683, 4923, 19231, 13, 583, 718, 311, 51416], "temperature": 0.0, "avg_logprob": -0.12762113588046184, "compression_ratio": 1.6807017543859648, "no_speech_prob": 0.0012587702367454767}, {"id": 42, "seek": 25904, "start": 280.08000000000004, "end": 288.0, "text": " assume that we can recognize an illegal state once we see it. And so the picture I'm showing here", "tokens": [51416, 6552, 300, 321, 393, 5521, 364, 11905, 1785, 1564, 321, 536, 309, 13, 400, 370, 264, 3036, 286, 478, 4099, 510, 51812], "temperature": 0.0, "avg_logprob": -0.12762113588046184, "compression_ratio": 1.6807017543859648, "no_speech_prob": 0.0012587702367454767}, {"id": 43, "seek": 28800, "start": 288.08, "end": 292.56, "text": " is that we have like a huge state space and have a few legal states. But usually the reality is much", "tokens": [50368, 307, 300, 321, 362, 411, 257, 2603, 1785, 1901, 293, 362, 257, 1326, 5089, 4368, 13, 583, 2673, 264, 4103, 307, 709, 50592], "temperature": 0.0, "avg_logprob": -0.12436380693989416, "compression_ratio": 1.7522522522522523, "no_speech_prob": 0.004166488070040941}, {"id": 44, "seek": 28800, "start": 292.56, "end": 298.48, "text": " worse. Usually you have a lot, a lot of states that are actually illegal. And so hitting them", "tokens": [50592, 5324, 13, 11419, 291, 362, 257, 688, 11, 257, 688, 295, 4368, 300, 366, 767, 11905, 13, 400, 370, 8850, 552, 50888], "temperature": 0.0, "avg_logprob": -0.12436380693989416, "compression_ratio": 1.7522522522522523, "no_speech_prob": 0.004166488070040941}, {"id": 45, "seek": 28800, "start": 298.48, "end": 303.28, "text": " and usually by accident is just a matter of time. You walk around your kind of state space and,", "tokens": [50888, 293, 2673, 538, 6398, 307, 445, 257, 1871, 295, 565, 13, 509, 1792, 926, 428, 733, 295, 1785, 1901, 293, 11, 51128], "temperature": 0.0, "avg_logprob": -0.12436380693989416, "compression_ratio": 1.7522522522522523, "no_speech_prob": 0.004166488070040941}, {"id": 46, "seek": 28800, "start": 303.28, "end": 307.92, "text": " and just accidentally stumble on something illegal. And that's, that's quite likely to happen just", "tokens": [51128, 293, 445, 15715, 41302, 322, 746, 11905, 13, 400, 300, 311, 11, 300, 311, 1596, 3700, 281, 1051, 445, 51360], "temperature": 0.0, "avg_logprob": -0.12436380693989416, "compression_ratio": 1.7522522522522523, "no_speech_prob": 0.004166488070040941}, {"id": 47, "seek": 30792, "start": 308.0, "end": 318.72, "text": " like the registered user in the previous example. So let's zoom in a bit and enter this diagram. So", "tokens": [50368, 411, 264, 13968, 4195, 294, 264, 3894, 1365, 13, 407, 718, 311, 8863, 294, 257, 857, 293, 3242, 341, 10686, 13, 407, 50904], "temperature": 0.0, "avg_logprob": -0.13886700736151802, "compression_ratio": 1.6390041493775933, "no_speech_prob": 0.003463656874373555}, {"id": 48, "seek": 30792, "start": 319.44, "end": 324.8, "text": " a typical program will probably be moving between lots of states. Hopefully, and, and we can assume", "tokens": [50940, 257, 7476, 1461, 486, 1391, 312, 2684, 1296, 3195, 295, 4368, 13, 10429, 11, 293, 11, 293, 321, 393, 6552, 51208], "temperature": 0.0, "avg_logprob": -0.13886700736151802, "compression_ratio": 1.6390041493775933, "no_speech_prob": 0.003463656874373555}, {"id": 49, "seek": 30792, "start": 324.8, "end": 330.88, "text": " usually between legal states, which are okay for a system. But sometimes you'll probably by accident", "tokens": [51208, 2673, 1296, 5089, 4368, 11, 597, 366, 1392, 337, 257, 1185, 13, 583, 2171, 291, 603, 1391, 538, 6398, 51512], "temperature": 0.0, "avg_logprob": -0.13886700736151802, "compression_ratio": 1.6390041493775933, "no_speech_prob": 0.003463656874373555}, {"id": 50, "seek": 30792, "start": 331.52000000000004, "end": 337.20000000000005, "text": " hit an illegal state and your system might crash or violate some rule or do something bad. And", "tokens": [51544, 2045, 364, 11905, 1785, 293, 428, 1185, 1062, 8252, 420, 37478, 512, 4978, 420, 360, 746, 1578, 13, 400, 51828], "temperature": 0.0, "avg_logprob": -0.13886700736151802, "compression_ratio": 1.6390041493775933, "no_speech_prob": 0.003463656874373555}, {"id": 51, "seek": 33720, "start": 337.2, "end": 341.44, "text": " usually if you got one illegal state, you probably will get another illegal state.", "tokens": [50364, 2673, 498, 291, 658, 472, 11905, 1785, 11, 291, 1391, 486, 483, 1071, 11905, 1785, 13, 50576], "temperature": 0.0, "avg_logprob": -0.13551040996204722, "compression_ratio": 1.8300395256916997, "no_speech_prob": 0.00012116834841435775}, {"id": 52, "seek": 33720, "start": 342.88, "end": 346.64, "text": " And this is not good. And this is what the sort of things that we would like to avoid", "tokens": [50648, 400, 341, 307, 406, 665, 13, 400, 341, 307, 437, 264, 1333, 295, 721, 300, 321, 576, 411, 281, 5042, 50836], "temperature": 0.0, "avg_logprob": -0.13551040996204722, "compression_ratio": 1.8300395256916997, "no_speech_prob": 0.00012116834841435775}, {"id": 53, "seek": 33720, "start": 346.64, "end": 352.64, "text": " in the context of this quote and probably just in general in programming. So let's zoom in a little", "tokens": [50836, 294, 264, 4319, 295, 341, 6513, 293, 1391, 445, 294, 2674, 294, 9410, 13, 407, 718, 311, 8863, 294, 257, 707, 51136], "temperature": 0.0, "avg_logprob": -0.13551040996204722, "compression_ratio": 1.8300395256916997, "no_speech_prob": 0.00012116834841435775}, {"id": 54, "seek": 33720, "start": 352.64, "end": 358.71999999999997, "text": " more. So, so as high level programmers, we typically don't think about registers and threads and,", "tokens": [51136, 544, 13, 407, 11, 370, 382, 1090, 1496, 41504, 11, 321, 5850, 500, 380, 519, 466, 38351, 293, 19314, 293, 11, 51440], "temperature": 0.0, "avg_logprob": -0.13551040996204722, "compression_ratio": 1.8300395256916997, "no_speech_prob": 0.00012116834841435775}, {"id": 55, "seek": 33720, "start": 358.71999999999997, "end": 364.48, "text": " and, and the heap and the like. And as functional programmers, we typically want to represent as", "tokens": [51440, 293, 11, 293, 264, 33591, 293, 264, 411, 13, 400, 382, 11745, 41504, 11, 321, 5850, 528, 281, 2906, 382, 51728], "temperature": 0.0, "avg_logprob": -0.13551040996204722, "compression_ratio": 1.8300395256916997, "no_speech_prob": 0.00012116834841435775}, {"id": 56, "seek": 36448, "start": 364.48, "end": 370.64000000000004, "text": " much as possible of our application as functions. So imagine that this is this function signature", "tokens": [50364, 709, 382, 1944, 295, 527, 3861, 382, 6828, 13, 407, 3811, 300, 341, 307, 341, 2445, 13397, 50672], "temperature": 0.0, "avg_logprob": -0.10760716977326766, "compression_ratio": 1.9357429718875503, "no_speech_prob": 0.0008792128064669669}, {"id": 57, "seek": 36448, "start": 370.64000000000004, "end": 376.64000000000004, "text": " here is some part of your system. You have some inputs, you have some output, and, and, and you,", "tokens": [50672, 510, 307, 512, 644, 295, 428, 1185, 13, 509, 362, 512, 15743, 11, 291, 362, 512, 5598, 11, 293, 11, 293, 11, 293, 291, 11, 50972], "temperature": 0.0, "avg_logprob": -0.10760716977326766, "compression_ratio": 1.9357429718875503, "no_speech_prob": 0.0008792128064669669}, {"id": 58, "seek": 36448, "start": 376.64000000000004, "end": 381.12, "text": " you would like to analyze what's possible and impossible here. So what do I mean that an illegal", "tokens": [50972, 291, 576, 411, 281, 12477, 437, 311, 1944, 293, 6243, 510, 13, 407, 437, 360, 286, 914, 300, 364, 11905, 51196], "temperature": 0.0, "avg_logprob": -0.10760716977326766, "compression_ratio": 1.9357429718875503, "no_speech_prob": 0.0008792128064669669}, {"id": 59, "seek": 36448, "start": 381.12, "end": 387.52000000000004, "text": " state is representable? It's that there is some combination of the inputs ABC that would, that", "tokens": [51196, 1785, 307, 2906, 712, 30, 467, 311, 300, 456, 307, 512, 6562, 295, 264, 15743, 22342, 300, 576, 11, 300, 51516], "temperature": 0.0, "avg_logprob": -0.10760716977326766, "compression_ratio": 1.9357429718875503, "no_speech_prob": 0.0008792128064669669}, {"id": 60, "seek": 36448, "start": 387.52000000000004, "end": 391.6, "text": " would get you into an illegal state. Okay, that would mean that the state is representable. You", "tokens": [51516, 576, 483, 291, 666, 364, 11905, 1785, 13, 1033, 11, 300, 576, 914, 300, 264, 1785, 307, 2906, 712, 13, 509, 51720], "temperature": 0.0, "avg_logprob": -0.10760716977326766, "compression_ratio": 1.9357429718875503, "no_speech_prob": 0.0008792128064669669}, {"id": 61, "seek": 39160, "start": 391.6, "end": 397.44, "text": " can find such inputs and you'll, and you'll get an illegal state directly in your system.", "tokens": [50364, 393, 915, 1270, 15743, 293, 291, 603, 11, 293, 291, 603, 483, 364, 11905, 1785, 3838, 294, 428, 1185, 13, 50656], "temperature": 0.0, "avg_logprob": -0.10723707892678001, "compression_ratio": 1.9201680672268908, "no_speech_prob": 0.0019679151009768248}, {"id": 62, "seek": 39160, "start": 398.08000000000004, "end": 402.8, "text": " And what we want, what we strive to achieve is to make it impossible for to find such inputs", "tokens": [50688, 400, 437, 321, 528, 11, 437, 321, 23829, 281, 4584, 307, 281, 652, 309, 6243, 337, 281, 915, 1270, 15743, 50924], "temperature": 0.0, "avg_logprob": -0.10723707892678001, "compression_ratio": 1.9201680672268908, "no_speech_prob": 0.0019679151009768248}, {"id": 63, "seek": 39160, "start": 402.8, "end": 408.72, "text": " that would get us into this illegal state. So imagine that it's, it's literally impossible", "tokens": [50924, 300, 576, 483, 505, 666, 341, 11905, 1785, 13, 407, 3811, 300, 309, 311, 11, 309, 311, 3736, 6243, 51220], "temperature": 0.0, "avg_logprob": -0.10723707892678001, "compression_ratio": 1.9201680672268908, "no_speech_prob": 0.0019679151009768248}, {"id": 64, "seek": 39160, "start": 408.72, "end": 413.92, "text": " to write down such inputs that would get you into a legal state that you cannot get there at all.", "tokens": [51220, 281, 2464, 760, 1270, 15743, 300, 576, 483, 291, 666, 257, 5089, 1785, 300, 291, 2644, 483, 456, 412, 439, 13, 51480], "temperature": 0.0, "avg_logprob": -0.10723707892678001, "compression_ratio": 1.9201680672268908, "no_speech_prob": 0.0019679151009768248}, {"id": 65, "seek": 39160, "start": 415.12, "end": 419.12, "text": " And all you can do is kind of walk around the legal states and just never worry about", "tokens": [51540, 400, 439, 291, 393, 360, 307, 733, 295, 1792, 926, 264, 5089, 4368, 293, 445, 1128, 3292, 466, 51740], "temperature": 0.0, "avg_logprob": -0.10723707892678001, "compression_ratio": 1.9201680672268908, "no_speech_prob": 0.0019679151009768248}, {"id": 66, "seek": 41912, "start": 419.12, "end": 425.6, "text": " entering the illegal, the illegal red dots here. And so this should be possible not because you", "tokens": [50364, 11104, 264, 11905, 11, 264, 11905, 2182, 15026, 510, 13, 400, 370, 341, 820, 312, 1944, 406, 570, 291, 50688], "temperature": 0.0, "avg_logprob": -0.1365847714179385, "compression_ratio": 1.8423076923076922, "no_speech_prob": 0.001023428631015122}, {"id": 67, "seek": 41912, "start": 425.6, "end": 428.88, "text": " checked and double-checked your inputs and not because you covered everything with tests, but", "tokens": [50688, 10033, 293, 3834, 12, 15723, 292, 428, 15743, 293, 406, 570, 291, 5343, 1203, 365, 6921, 11, 457, 50852], "temperature": 0.0, "avg_logprob": -0.1365847714179385, "compression_ratio": 1.8423076923076922, "no_speech_prob": 0.001023428631015122}, {"id": 68, "seek": 41912, "start": 428.88, "end": 434.32, "text": " because you make it strictly impossible to write down those inputs that would, would get you into", "tokens": [50852, 570, 291, 652, 309, 20792, 6243, 281, 2464, 760, 729, 15743, 300, 576, 11, 576, 483, 291, 666, 51124], "temperature": 0.0, "avg_logprob": -0.1365847714179385, "compression_ratio": 1.8423076923076922, "no_speech_prob": 0.001023428631015122}, {"id": 69, "seek": 41912, "start": 434.32, "end": 441.84000000000003, "text": " an illegal state. So that's at least the ideal that we want to, want to reach. And question is", "tokens": [51124, 364, 11905, 1785, 13, 407, 300, 311, 412, 1935, 264, 7157, 300, 321, 528, 281, 11, 528, 281, 2524, 13, 400, 1168, 307, 51500], "temperature": 0.0, "avg_logprob": -0.1365847714179385, "compression_ratio": 1.8423076923076922, "no_speech_prob": 0.001023428631015122}, {"id": 70, "seek": 41912, "start": 441.84000000000003, "end": 446.08, "text": " whether it's a reachable idea, ideal, can you, can you actually do that? And probably the answer", "tokens": [51500, 1968, 309, 311, 257, 2524, 712, 1558, 11, 7157, 11, 393, 291, 11, 393, 291, 767, 360, 300, 30, 400, 1391, 264, 1867, 51712], "temperature": 0.0, "avg_logprob": -0.1365847714179385, "compression_ratio": 1.8423076923076922, "no_speech_prob": 0.001023428631015122}, {"id": 71, "seek": 44608, "start": 446.08, "end": 450.64, "text": " is generally no. You probably can't avoid all illegal states, but I would claim that every step", "tokens": [50364, 307, 5101, 572, 13, 509, 1391, 393, 380, 5042, 439, 11905, 4368, 11, 457, 286, 576, 3932, 300, 633, 1823, 50592], "temperature": 0.0, "avg_logprob": -0.16098441017998588, "compression_ratio": 1.8501628664495113, "no_speech_prob": 0.0022246474400162697}, {"id": 72, "seek": 44608, "start": 450.64, "end": 454.71999999999997, "text": " you make in that direction is, is a good step and probably is improving your software in some,", "tokens": [50592, 291, 652, 294, 300, 3513, 307, 11, 307, 257, 665, 1823, 293, 1391, 307, 11470, 428, 4722, 294, 512, 11, 50796], "temperature": 0.0, "avg_logprob": -0.16098441017998588, "compression_ratio": 1.8501628664495113, "no_speech_prob": 0.0022246474400162697}, {"id": 73, "seek": 44608, "start": 454.71999999999997, "end": 460.24, "text": " in some way or dimension. Also, question is whether it's worth it. I'm going to show you some,", "tokens": [50796, 294, 512, 636, 420, 10139, 13, 2743, 11, 1168, 307, 1968, 309, 311, 3163, 309, 13, 286, 478, 516, 281, 855, 291, 512, 11, 51072], "temperature": 0.0, "avg_logprob": -0.16098441017998588, "compression_ratio": 1.8501628664495113, "no_speech_prob": 0.0022246474400162697}, {"id": 74, "seek": 44608, "start": 460.24, "end": 464.71999999999997, "text": " some techniques that you have to apply to your code and then maybe there's some, some costs and", "tokens": [51072, 512, 7512, 300, 291, 362, 281, 3079, 281, 428, 3089, 293, 550, 1310, 456, 311, 512, 11, 512, 5497, 293, 51296], "temperature": 0.0, "avg_logprob": -0.16098441017998588, "compression_ratio": 1.8501628664495113, "no_speech_prob": 0.0022246474400162697}, {"id": 75, "seek": 44608, "start": 464.71999999999997, "end": 470.08, "text": " it might, might not be worth it. And that's, again, can be, can be true that's maybe too", "tokens": [51296, 309, 1062, 11, 1062, 406, 312, 3163, 309, 13, 400, 300, 311, 11, 797, 11, 393, 312, 11, 393, 312, 2074, 300, 311, 1310, 886, 51564], "temperature": 0.0, "avg_logprob": -0.16098441017998588, "compression_ratio": 1.8501628664495113, "no_speech_prob": 0.0022246474400162697}, {"id": 76, "seek": 44608, "start": 470.08, "end": 475.52, "text": " expensive, but the, the sort of techniques I'm about to show you now are quite, quite lightweight", "tokens": [51564, 5124, 11, 457, 264, 11, 264, 1333, 295, 7512, 286, 478, 466, 281, 855, 291, 586, 366, 1596, 11, 1596, 22052, 51836], "temperature": 0.0, "avg_logprob": -0.16098441017998588, "compression_ratio": 1.8501628664495113, "no_speech_prob": 0.0022246474400162697}, {"id": 77, "seek": 47552, "start": 475.59999999999997, "end": 482.32, "text": " and hopefully the cost-benefit ratio is, may, would make them worth it. And although it's", "tokens": [50368, 293, 4696, 264, 2063, 12, 41605, 6845, 8509, 307, 11, 815, 11, 576, 652, 552, 3163, 309, 13, 400, 4878, 309, 311, 50704], "temperature": 0.0, "avg_logprob": -0.14763030577241704, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.0020899733062833548}, {"id": 78, "seek": 47552, "start": 482.32, "end": 488.24, "text": " possible to, to avoid illegal states in pretty much every paradigm and language, but strongly,", "tokens": [50704, 1944, 281, 11, 281, 5042, 11905, 4368, 294, 1238, 709, 633, 24709, 293, 2856, 11, 457, 10613, 11, 51000], "temperature": 0.0, "avg_logprob": -0.14763030577241704, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.0020899733062833548}, {"id": 79, "seek": 47552, "start": 488.24, "end": 493.76, "text": " strongly typed functional programming is, is very good at it. So because types makes it easier to", "tokens": [51000, 10613, 33941, 11745, 9410, 307, 11, 307, 588, 665, 412, 309, 13, 407, 570, 3467, 1669, 309, 3571, 281, 51276], "temperature": 0.0, "avg_logprob": -0.14763030577241704, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.0020899733062833548}, {"id": 80, "seek": 47552, "start": 493.76, "end": 499.76, "text": " define, define our state, state space and, and functional techniques make, makes it, once you", "tokens": [51276, 6964, 11, 6964, 527, 1785, 11, 1785, 1901, 293, 11, 293, 11745, 7512, 652, 11, 1669, 309, 11, 1564, 291, 51576], "temperature": 0.0, "avg_logprob": -0.14763030577241704, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.0020899733062833548}, {"id": 81, "seek": 49976, "start": 499.76, "end": 505.52, "text": " define and recognize an illegal state, they, they, they make it easier to avoid various illegal", "tokens": [50364, 6964, 293, 5521, 364, 11905, 1785, 11, 436, 11, 436, 11, 436, 652, 309, 3571, 281, 5042, 3683, 11905, 50652], "temperature": 0.0, "avg_logprob": -0.20234637790256077, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.0016245755832642317}, {"id": 82, "seek": 49976, "start": 505.52, "end": 519.2, "text": " states. Okay, so now that we, we know what are illegal states, so slide, slide the gray,", "tokens": [50652, 4368, 13, 1033, 11, 370, 586, 300, 321, 11, 321, 458, 437, 366, 11905, 4368, 11, 370, 4137, 11, 4137, 264, 10855, 11, 51336], "temperature": 0.0, "avg_logprob": -0.20234637790256077, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.0016245755832642317}, {"id": 83, "seek": 49976, "start": 519.2, "end": 527.28, "text": " digression into something else. So I'm not sure what is or so, but empirical evidence shows that,", "tokens": [51336, 2528, 2775, 666, 746, 1646, 13, 407, 286, 478, 406, 988, 437, 307, 420, 370, 11, 457, 31886, 4467, 3110, 300, 11, 51740], "temperature": 0.0, "avg_logprob": -0.20234637790256077, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.0016245755832642317}, {"id": 84, "seek": 52728, "start": 527.4399999999999, "end": 533.6, "text": " that people really, really like coffee. I myself don't drink coffee, so I can't really relate,", "tokens": [50372, 300, 561, 534, 11, 534, 411, 4982, 13, 286, 2059, 500, 380, 2822, 4982, 11, 370, 286, 393, 380, 534, 10961, 11, 50680], "temperature": 0.0, "avg_logprob": -0.1178867694028874, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.006670208182185888}, {"id": 85, "seek": 52728, "start": 534.16, "end": 540.0799999999999, "text": " but apparently making coffee is very, very complicated. And here's a, a diagram that's,", "tokens": [50708, 457, 7970, 1455, 4982, 307, 588, 11, 588, 6179, 13, 400, 510, 311, 257, 11, 257, 10686, 300, 311, 11, 51004], "temperature": 0.0, "avg_logprob": -0.1178867694028874, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.006670208182185888}, {"id": 86, "seek": 52728, "start": 540.0799999999999, "end": 545.52, "text": " that's obviously has lots of different states and I'm sure some of them are illegal. And since I", "tokens": [51004, 300, 311, 2745, 575, 3195, 295, 819, 4368, 293, 286, 478, 988, 512, 295, 552, 366, 11905, 13, 400, 1670, 286, 51276], "temperature": 0.0, "avg_logprob": -0.1178867694028874, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.006670208182185888}, {"id": 87, "seek": 52728, "start": 545.52, "end": 549.6, "text": " don't know much about coffee, I thought maybe it will be a good idea to use it as kind of an example", "tokens": [51276, 500, 380, 458, 709, 466, 4982, 11, 286, 1194, 1310, 309, 486, 312, 257, 665, 1558, 281, 764, 309, 382, 733, 295, 364, 1365, 51480], "temperature": 0.0, "avg_logprob": -0.1178867694028874, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.006670208182185888}, {"id": 88, "seek": 54960, "start": 549.6, "end": 556.5600000000001, "text": " domain to, to, for, for this talk that we can explore and try to kind of make more, more legible", "tokens": [50364, 9274, 281, 11, 281, 11, 337, 11, 337, 341, 751, 300, 321, 393, 6839, 293, 853, 281, 733, 295, 652, 544, 11, 544, 1676, 964, 50712], "temperature": 0.0, "avg_logprob": -0.10168034831682841, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.005123044829815626}, {"id": 89, "seek": 54960, "start": 556.5600000000001, "end": 564.48, "text": " for, for our purposes. So, so imagine that you're tasked with programming this, this coffee making", "tokens": [50712, 337, 11, 337, 527, 9932, 13, 407, 11, 370, 3811, 300, 291, 434, 38621, 365, 9410, 341, 11, 341, 4982, 1455, 51108], "temperature": 0.0, "avg_logprob": -0.10168034831682841, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.005123044829815626}, {"id": 90, "seek": 54960, "start": 564.48, "end": 570.8000000000001, "text": " robot. So lots of things can go wrong when you program a robot, I imagine, especially one that", "tokens": [51108, 7881, 13, 407, 3195, 295, 721, 393, 352, 2085, 562, 291, 1461, 257, 7881, 11, 286, 3811, 11, 2318, 472, 300, 51424], "temperature": 0.0, "avg_logprob": -0.10168034831682841, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.005123044829815626}, {"id": 91, "seek": 54960, "start": 570.8000000000001, "end": 576.4, "text": " does something as complicated as creating coffee, because coffee drinkers are, are very, very specific", "tokens": [51424, 775, 746, 382, 6179, 382, 4084, 4982, 11, 570, 4982, 2822, 433, 366, 11, 366, 588, 11, 588, 2685, 51704], "temperature": 0.0, "avg_logprob": -0.10168034831682841, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.005123044829815626}, {"id": 92, "seek": 57640, "start": 576.4, "end": 581.52, "text": " about what and how they are willing to drink. So there's a huge state space here and lots of", "tokens": [50364, 466, 437, 293, 577, 436, 366, 4950, 281, 2822, 13, 407, 456, 311, 257, 2603, 1785, 1901, 510, 293, 3195, 295, 50620], "temperature": 0.0, "avg_logprob": -0.10701249857417873, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.001396640669554472}, {"id": 93, "seek": 57640, "start": 581.52, "end": 586.16, "text": " things that can, can go wrong. And we'll just try to tackle like small sub-problems from this", "tokens": [50620, 721, 300, 393, 11, 393, 352, 2085, 13, 400, 321, 603, 445, 853, 281, 14896, 411, 1359, 1422, 12, 47419, 82, 490, 341, 50852], "temperature": 0.0, "avg_logprob": -0.10701249857417873, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.001396640669554472}, {"id": 94, "seek": 57640, "start": 586.16, "end": 591.92, "text": " domain and see, see how we can improve what we see. So we start with, with the simplest part I,", "tokens": [50852, 9274, 293, 536, 11, 536, 577, 321, 393, 3470, 437, 321, 536, 13, 407, 321, 722, 365, 11, 365, 264, 22811, 644, 286, 11, 51140], "temperature": 0.0, "avg_logprob": -0.10701249857417873, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.001396640669554472}, {"id": 95, "seek": 57640, "start": 591.92, "end": 598.3199999999999, "text": " I could possibly imagine here, ordering coffee. So again, imagine that you are, you are doing", "tokens": [51140, 286, 727, 6264, 3811, 510, 11, 21739, 4982, 13, 407, 797, 11, 3811, 300, 291, 366, 11, 291, 366, 884, 51460], "temperature": 0.0, "avg_logprob": -0.10701249857417873, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.001396640669554472}, {"id": 96, "seek": 57640, "start": 598.3199999999999, "end": 602.16, "text": " this kind of proof of concept of your, of your robot. You want to show that it can actually do", "tokens": [51460, 341, 733, 295, 8177, 295, 3410, 295, 428, 11, 295, 428, 7881, 13, 509, 528, 281, 855, 300, 309, 393, 767, 360, 51652], "temperature": 0.0, "avg_logprob": -0.10701249857417873, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.001396640669554472}, {"id": 97, "seek": 60216, "start": 602.16, "end": 607.8399999999999, "text": " something useful. So you want to specify the, how to order a cappuccino, which is, so I hear a popular", "tokens": [50364, 746, 4420, 13, 407, 291, 528, 281, 16500, 264, 11, 577, 281, 1668, 257, 1335, 427, 39407, 2982, 11, 597, 307, 11, 370, 286, 1568, 257, 3743, 50648], "temperature": 0.0, "avg_logprob": -0.14165820369014034, "compression_ratio": 1.8051470588235294, "no_speech_prob": 0.0019682173151522875}, {"id": 98, "seek": 60216, "start": 607.8399999999999, "end": 613.6, "text": " drink. So your users have to specify what kind of milk they want in the cappuccino. And apparently", "tokens": [50648, 2822, 13, 407, 428, 5022, 362, 281, 16500, 437, 733, 295, 5392, 436, 528, 294, 264, 1335, 427, 39407, 2982, 13, 400, 7970, 50936], "temperature": 0.0, "avg_logprob": -0.14165820369014034, "compression_ratio": 1.8051470588235294, "no_speech_prob": 0.0019682173151522875}, {"id": 99, "seek": 60216, "start": 614.56, "end": 619.52, "text": " milk choice is also a complicated topic. So milk is not some trivial type, but, but in the", "tokens": [50984, 5392, 3922, 307, 611, 257, 6179, 4829, 13, 407, 5392, 307, 406, 512, 26703, 2010, 11, 457, 11, 457, 294, 264, 51232], "temperature": 0.0, "avg_logprob": -0.14165820369014034, "compression_ratio": 1.8051470588235294, "no_speech_prob": 0.0019682173151522875}, {"id": 100, "seek": 60216, "start": 619.52, "end": 625.52, "text": " enumeration of various, various, various options. So after successfully making cappuccino, you think,", "tokens": [51232, 465, 449, 5053, 295, 3683, 11, 3683, 11, 3683, 3956, 13, 407, 934, 10727, 1455, 1335, 427, 39407, 2982, 11, 291, 519, 11, 51532], "temperature": 0.0, "avg_logprob": -0.14165820369014034, "compression_ratio": 1.8051470588235294, "no_speech_prob": 0.0019682173151522875}, {"id": 101, "seek": 60216, "start": 625.52, "end": 630.8, "text": " okay, let's, let's see. It kind of works. Let's, let's do something more, add something to, to a", "tokens": [51532, 1392, 11, 718, 311, 11, 718, 311, 536, 13, 467, 733, 295, 1985, 13, 961, 311, 11, 718, 311, 360, 746, 544, 11, 909, 746, 281, 11, 281, 257, 51796], "temperature": 0.0, "avg_logprob": -0.14165820369014034, "compression_ratio": 1.8051470588235294, "no_speech_prob": 0.0019682173151522875}, {"id": 102, "seek": 63080, "start": 630.8, "end": 635.3599999999999, "text": " repertoire to make it more interesting. So since you already know how to do cappuccino espresso,", "tokens": [50364, 49604, 281, 652, 309, 544, 1880, 13, 407, 1670, 291, 1217, 458, 577, 281, 360, 1335, 427, 39407, 2982, 44140, 11, 50592], "temperature": 0.0, "avg_logprob": -0.11359173689431291, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.006010819226503372}, {"id": 103, "seek": 63080, "start": 635.3599999999999, "end": 640.4799999999999, "text": " apparently according to this picture there is, is pretty much the same thing, but minus the milk.", "tokens": [50592, 7970, 4650, 281, 341, 3036, 456, 307, 11, 307, 1238, 709, 264, 912, 551, 11, 457, 3175, 264, 5392, 13, 50848], "temperature": 0.0, "avg_logprob": -0.11359173689431291, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.006010819226503372}, {"id": 104, "seek": 63080, "start": 640.4799999999999, "end": 644.7199999999999, "text": " So you make your milk an optional, optional argument in this case. So, so that you don't", "tokens": [50848, 407, 291, 652, 428, 5392, 364, 17312, 11, 17312, 6770, 294, 341, 1389, 13, 407, 11, 370, 300, 291, 500, 380, 51060], "temperature": 0.0, "avg_logprob": -0.11359173689431291, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.006010819226503372}, {"id": 105, "seek": 63080, "start": 644.7199999999999, "end": 649.52, "text": " require it anymore. And now if you don't have milk, you make an espresso espresso. If you have milk,", "tokens": [51060, 3651, 309, 3602, 13, 400, 586, 498, 291, 500, 380, 362, 5392, 11, 291, 652, 364, 44140, 44140, 13, 759, 291, 362, 5392, 11, 51300], "temperature": 0.0, "avg_logprob": -0.11359173689431291, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.006010819226503372}, {"id": 106, "seek": 63080, "start": 649.52, "end": 656.4, "text": " you, you do cappuccino. And now let's set another one, latte. So latte is basically, apparently", "tokens": [51300, 291, 11, 291, 360, 1335, 427, 39407, 2982, 13, 400, 586, 718, 311, 992, 1071, 472, 11, 37854, 13, 407, 37854, 307, 1936, 11, 7970, 51644], "temperature": 0.0, "avg_logprob": -0.11359173689431291, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.006010819226503372}, {"id": 107, "seek": 65640, "start": 656.4, "end": 661.84, "text": " again, by this diagram is just the same as cappuccino, but with more milk. And so we have a", "tokens": [50364, 797, 11, 538, 341, 10686, 307, 445, 264, 912, 382, 1335, 427, 39407, 2982, 11, 457, 365, 544, 5392, 13, 400, 370, 321, 362, 257, 50636], "temperature": 0.0, "avg_logprob": -0.09812248043897676, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.01591179147362709}, {"id": 108, "seek": 65640, "start": 661.84, "end": 667.76, "text": " problem. We have an ambiguity. Both cappuccino and latte require, require milk. So we have to", "tokens": [50636, 1154, 13, 492, 362, 364, 46519, 13, 6767, 1335, 427, 39407, 2982, 293, 37854, 3651, 11, 3651, 5392, 13, 407, 321, 362, 281, 50932], "temperature": 0.0, "avg_logprob": -0.09812248043897676, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.01591179147362709}, {"id": 109, "seek": 65640, "start": 667.76, "end": 673.6, "text": " somehow tell them apart which, which order are we talking about. So in order to make it easier", "tokens": [50932, 6063, 980, 552, 4936, 597, 11, 597, 1668, 366, 321, 1417, 466, 13, 407, 294, 1668, 281, 652, 309, 3571, 51224], "temperature": 0.0, "avg_logprob": -0.09812248043897676, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.01591179147362709}, {"id": 110, "seek": 65640, "start": 673.6, "end": 678.16, "text": " to figure out what's going on, we were going to add another enumeration, the drink type,", "tokens": [51224, 281, 2573, 484, 437, 311, 516, 322, 11, 321, 645, 516, 281, 909, 1071, 465, 449, 5053, 11, 264, 2822, 2010, 11, 51452], "temperature": 0.0, "avg_logprob": -0.09812248043897676, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.01591179147362709}, {"id": 111, "seek": 65640, "start": 678.16, "end": 682.96, "text": " which will actually tell us what kind of order are we dealing with here. And so we have kind of", "tokens": [51452, 597, 486, 767, 980, 505, 437, 733, 295, 1668, 366, 321, 6260, 365, 510, 13, 400, 370, 321, 362, 733, 295, 51692], "temperature": 0.0, "avg_logprob": -0.09812248043897676, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.01591179147362709}, {"id": 112, "seek": 68296, "start": 683.0400000000001, "end": 688.48, "text": " three cases for cappuccino espresso and latte. And that's a nice way to kind of future proof", "tokens": [50368, 1045, 3331, 337, 1335, 427, 39407, 2982, 44140, 293, 37854, 13, 400, 300, 311, 257, 1481, 636, 281, 733, 295, 2027, 8177, 50640], "temperature": 0.0, "avg_logprob": -0.1021316165015811, "compression_ratio": 1.7962962962962963, "no_speech_prob": 0.00693171750754118}, {"id": 113, "seek": 68296, "start": 688.48, "end": 693.2800000000001, "text": " ourselves from future, future drinks that we might want to add, because now we could easily add them", "tokens": [50640, 4175, 490, 2027, 11, 2027, 12142, 300, 321, 1062, 528, 281, 909, 11, 570, 586, 321, 727, 3612, 909, 552, 50880], "temperature": 0.0, "avg_logprob": -0.1021316165015811, "compression_ratio": 1.7962962962962963, "no_speech_prob": 0.00693171750754118}, {"id": 114, "seek": 68296, "start": 693.2800000000001, "end": 699.84, "text": " to our enumeration. So, so that's, that's a nice, nice bonus. And so now that you, you have some", "tokens": [50880, 281, 527, 465, 449, 5053, 13, 407, 11, 370, 300, 311, 11, 300, 311, 257, 1481, 11, 1481, 10882, 13, 400, 370, 586, 300, 291, 11, 291, 362, 512, 51208], "temperature": 0.0, "avg_logprob": -0.1021316165015811, "compression_ratio": 1.7962962962962963, "no_speech_prob": 0.00693171750754118}, {"id": 115, "seek": 68296, "start": 699.84, "end": 704.1600000000001, "text": " basic drinks and, and you know how to make them, you want to show off how your robot can actually do", "tokens": [51208, 3875, 12142, 293, 11, 293, 291, 458, 577, 281, 652, 552, 11, 291, 528, 281, 855, 766, 577, 428, 7881, 393, 767, 360, 51424], "temperature": 0.0, "avg_logprob": -0.1021316165015811, "compression_ratio": 1.7962962962962963, "no_speech_prob": 0.00693171750754118}, {"id": 116, "seek": 68296, "start": 704.1600000000001, "end": 708.5600000000001, "text": " cause something more complicated. So you want to do two fancy drinks in this case. So want to", "tokens": [51424, 3082, 746, 544, 6179, 13, 407, 291, 528, 281, 360, 732, 10247, 12142, 294, 341, 1389, 13, 407, 528, 281, 51644], "temperature": 0.0, "avg_logprob": -0.1021316165015811, "compression_ratio": 1.7962962962962963, "no_speech_prob": 0.00693171750754118}, {"id": 117, "seek": 70856, "start": 708.56, "end": 713.92, "text": " try and do affogato and Irish coffee. Fortunately, botanary require more, more ingredients. So we", "tokens": [50364, 853, 293, 360, 2096, 664, 2513, 293, 16801, 4982, 13, 20652, 11, 10592, 282, 822, 3651, 544, 11, 544, 6952, 13, 407, 321, 50632], "temperature": 0.0, "avg_logprob": -0.13871438801288605, "compression_ratio": 1.75177304964539, "no_speech_prob": 0.004731297492980957}, {"id": 118, "seek": 70856, "start": 713.92, "end": 720.2399999999999, "text": " need to add gelato and, for the affogato and the cream and whiskey for, for Irish coffee. And that's", "tokens": [50632, 643, 281, 909, 4087, 2513, 293, 11, 337, 264, 2096, 664, 2513, 293, 264, 4689, 293, 34648, 337, 11, 337, 16801, 4982, 13, 400, 300, 311, 50948], "temperature": 0.0, "avg_logprob": -0.13871438801288605, "compression_ratio": 1.75177304964539, "no_speech_prob": 0.004731297492980957}, {"id": 119, "seek": 70856, "start": 720.2399999999999, "end": 726.0, "text": " a good place to stop for a moment and take a look at what we have. So we support, support five different,", "tokens": [50948, 257, 665, 1081, 281, 1590, 337, 257, 1623, 293, 747, 257, 574, 412, 437, 321, 362, 13, 407, 321, 1406, 11, 1406, 1732, 819, 11, 51236], "temperature": 0.0, "avg_logprob": -0.13871438801288605, "compression_ratio": 1.75177304964539, "no_speech_prob": 0.004731297492980957}, {"id": 120, "seek": 70856, "start": 726.0, "end": 731.1199999999999, "text": " different types of drinks, which is nice, but we have lots of various optional values. It's", "tokens": [51236, 819, 3467, 295, 12142, 11, 597, 307, 1481, 11, 457, 321, 362, 3195, 295, 3683, 17312, 4190, 13, 467, 311, 51492], "temperature": 0.0, "avg_logprob": -0.13871438801288605, "compression_ratio": 1.75177304964539, "no_speech_prob": 0.004731297492980957}, {"id": 121, "seek": 70856, "start": 731.1199999999999, "end": 736.9599999999999, "text": " completely non-obvious, which, which combinations are actually legal here. So can, can I mix milk", "tokens": [51492, 2584, 2107, 12, 996, 1502, 11, 597, 11, 597, 21267, 366, 767, 5089, 510, 13, 407, 393, 11, 393, 286, 2890, 5392, 51784], "temperature": 0.0, "avg_logprob": -0.13871438801288605, "compression_ratio": 1.75177304964539, "no_speech_prob": 0.004731297492980957}, {"id": 122, "seek": 73696, "start": 737.0400000000001, "end": 740.96, "text": " into my Irish coffee or some, some such. It's not obvious from the type sense.", "tokens": [50368, 666, 452, 16801, 4982, 420, 512, 11, 512, 1270, 13, 467, 311, 406, 6322, 490, 264, 2010, 2020, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10730830624572232, "compression_ratio": 1.6900369003690037, "no_speech_prob": 0.0027715626638382673}, {"id": 123, "seek": 73696, "start": 743.6, "end": 748.1600000000001, "text": " And it's easy to get confused. So let's, let's try to step back for a moment. So what is the", "tokens": [50696, 400, 309, 311, 1858, 281, 483, 9019, 13, 407, 718, 311, 11, 718, 311, 853, 281, 1823, 646, 337, 257, 1623, 13, 407, 437, 307, 264, 50924], "temperature": 0.0, "avg_logprob": -0.10730830624572232, "compression_ratio": 1.6900369003690037, "no_speech_prob": 0.0027715626638382673}, {"id": 124, "seek": 73696, "start": 748.1600000000001, "end": 752.96, "text": " issue here? So this is again kind of a simplified state diagram of what, what we want to achieve. So", "tokens": [50924, 2734, 510, 30, 407, 341, 307, 797, 733, 295, 257, 26335, 1785, 10686, 295, 437, 11, 437, 321, 528, 281, 4584, 13, 407, 51164], "temperature": 0.0, "avg_logprob": -0.10730830624572232, "compression_ratio": 1.6900369003690037, "no_speech_prob": 0.0027715626638382673}, {"id": 125, "seek": 73696, "start": 753.6, "end": 758.8000000000001, "text": " we have five legal states, five states that we actually want, want to support. So which one", "tokens": [51196, 321, 362, 1732, 5089, 4368, 11, 1732, 4368, 300, 321, 767, 528, 11, 528, 281, 1406, 13, 407, 597, 472, 51456], "temperature": 0.0, "avg_logprob": -0.10730830624572232, "compression_ratio": 1.6900369003690037, "no_speech_prob": 0.0027715626638382673}, {"id": 126, "seek": 73696, "start": 758.8000000000001, "end": 763.6800000000001, "text": " corresponding to some drink that we have in our system. But we also have various combinations", "tokens": [51456, 11760, 281, 512, 2822, 300, 321, 362, 294, 527, 1185, 13, 583, 321, 611, 362, 3683, 21267, 51700], "temperature": 0.0, "avg_logprob": -0.10730830624572232, "compression_ratio": 1.6900369003690037, "no_speech_prob": 0.0027715626638382673}, {"id": 127, "seek": 76368, "start": 763.76, "end": 768.64, "text": " that, that are illegal in some sense. So for example, espresso, espresso with gelato is just", "tokens": [50368, 300, 11, 300, 366, 11905, 294, 512, 2020, 13, 407, 337, 1365, 11, 44140, 11, 44140, 365, 4087, 2513, 307, 445, 50612], "temperature": 0.0, "avg_logprob": -0.11822172633388586, "compression_ratio": 1.7426470588235294, "no_speech_prob": 0.008769961073994637}, {"id": 128, "seek": 76368, "start": 768.64, "end": 773.8399999999999, "text": " redundant because we're just rediscovered affogato, but though some drinkers might be offended.", "tokens": [50612, 40997, 570, 321, 434, 445, 2182, 40080, 292, 2096, 664, 2513, 11, 457, 1673, 512, 2822, 433, 1062, 312, 26776, 13, 50872], "temperature": 0.0, "avg_logprob": -0.11822172633388586, "compression_ratio": 1.7426470588235294, "no_speech_prob": 0.008769961073994637}, {"id": 129, "seek": 76368, "start": 775.1999999999999, "end": 780.88, "text": " But Irish coffee without whiskey is obviously an illegal state if I ever seen one. So it makes no", "tokens": [50940, 583, 16801, 4982, 1553, 34648, 307, 2745, 364, 11905, 1785, 498, 286, 1562, 1612, 472, 13, 407, 309, 1669, 572, 51224], "temperature": 0.0, "avg_logprob": -0.11822172633388586, "compression_ratio": 1.7426470588235294, "no_speech_prob": 0.008769961073994637}, {"id": 130, "seek": 76368, "start": 780.88, "end": 786.56, "text": " sense at all. And there are many other states here that, that many combinations of various", "tokens": [51224, 2020, 412, 439, 13, 400, 456, 366, 867, 661, 4368, 510, 300, 11, 300, 867, 21267, 295, 3683, 51508], "temperature": 0.0, "avg_logprob": -0.11822172633388586, "compression_ratio": 1.7426470588235294, "no_speech_prob": 0.008769961073994637}, {"id": 131, "seek": 76368, "start": 786.56, "end": 792.24, "text": " inputs that we can get here that are completely illegal and make no sense. So let's, let's think", "tokens": [51508, 15743, 300, 321, 393, 483, 510, 300, 366, 2584, 11905, 293, 652, 572, 2020, 13, 407, 718, 311, 11, 718, 311, 519, 51792], "temperature": 0.0, "avg_logprob": -0.11822172633388586, "compression_ratio": 1.7426470588235294, "no_speech_prob": 0.008769961073994637}, {"id": 132, "seek": 79224, "start": 792.24, "end": 796.88, "text": " more concretely why, why this is a problem. So suppose we have some low level function that", "tokens": [50364, 544, 39481, 736, 983, 11, 983, 341, 307, 257, 1154, 13, 407, 7297, 321, 362, 512, 2295, 1496, 2445, 300, 50596], "temperature": 0.0, "avg_logprob": -0.0893166150365557, "compression_ratio": 1.8482490272373542, "no_speech_prob": 0.0030105195473879576}, {"id": 133, "seek": 79224, "start": 796.88, "end": 801.6, "text": " actually tells the robot how to prepare the Irish coffee. And it has to take two arguments,", "tokens": [50596, 767, 5112, 264, 7881, 577, 281, 5940, 264, 16801, 4982, 13, 400, 309, 575, 281, 747, 732, 12869, 11, 50832], "temperature": 0.0, "avg_logprob": -0.0893166150365557, "compression_ratio": 1.8482490272373542, "no_speech_prob": 0.0030105195473879576}, {"id": 134, "seek": 79224, "start": 801.6, "end": 806.08, "text": " cream and whiskey, because that's, that those are the parameters that we need to specify for,", "tokens": [50832, 4689, 293, 34648, 11, 570, 300, 311, 11, 300, 729, 366, 264, 9834, 300, 321, 643, 281, 16500, 337, 11, 51056], "temperature": 0.0, "avg_logprob": -0.0893166150365557, "compression_ratio": 1.8482490272373542, "no_speech_prob": 0.0030105195473879576}, {"id": 135, "seek": 79224, "start": 806.08, "end": 810.16, "text": " for this drink. And imagine that you were trying to actually take an order and prepare the Irish", "tokens": [51056, 337, 341, 2822, 13, 400, 3811, 300, 291, 645, 1382, 281, 767, 747, 364, 1668, 293, 5940, 264, 16801, 51260], "temperature": 0.0, "avg_logprob": -0.0893166150365557, "compression_ratio": 1.8482490272373542, "no_speech_prob": 0.0030105195473879576}, {"id": 136, "seek": 79224, "start": 810.16, "end": 818.32, "text": " coffee. So in case you are in the Irish coffee, Irish coffee order, you access the cream and whiskey", "tokens": [51260, 4982, 13, 407, 294, 1389, 291, 366, 294, 264, 16801, 4982, 11, 16801, 4982, 1668, 11, 291, 2105, 264, 4689, 293, 34648, 51668], "temperature": 0.0, "avg_logprob": -0.0893166150365557, "compression_ratio": 1.8482490272373542, "no_speech_prob": 0.0030105195473879576}, {"id": 137, "seek": 81832, "start": 818.32, "end": 824.08, "text": " and then, and then prepare Irish coffee. Now notice that we are accessing optional values", "tokens": [50364, 293, 550, 11, 293, 550, 5940, 16801, 4982, 13, 823, 3449, 300, 321, 366, 26440, 17312, 4190, 50652], "temperature": 0.0, "avg_logprob": -0.11759257109268852, "compression_ratio": 1.646643109540636, "no_speech_prob": 0.0008273883140645921}, {"id": 138, "seek": 81832, "start": 824.08, "end": 830.24, "text": " and we are very careful here. We have a comment that says this is safe. That's probably okay,", "tokens": [50652, 293, 321, 366, 588, 5026, 510, 13, 492, 362, 257, 2871, 300, 1619, 341, 307, 3273, 13, 663, 311, 1391, 1392, 11, 50960], "temperature": 0.0, "avg_logprob": -0.11759257109268852, "compression_ratio": 1.646643109540636, "no_speech_prob": 0.0008273883140645921}, {"id": 139, "seek": 81832, "start": 830.24, "end": 836.0, "text": " right? I mean, what, what could possibly go wrong? So, because it makes no sense to have empty", "tokens": [50960, 558, 30, 286, 914, 11, 437, 11, 437, 727, 6264, 352, 2085, 30, 407, 11, 570, 309, 1669, 572, 2020, 281, 362, 6707, 51248], "temperature": 0.0, "avg_logprob": -0.11759257109268852, "compression_ratio": 1.646643109540636, "no_speech_prob": 0.0008273883140645921}, {"id": 140, "seek": 81832, "start": 836.0, "end": 841.84, "text": " values on, of cream and whiskey in case someone ordered an Irish coffee. So maybe just in case,", "tokens": [51248, 4190, 322, 11, 295, 4689, 293, 34648, 294, 1389, 1580, 8866, 364, 16801, 4982, 13, 407, 1310, 445, 294, 1389, 11, 51540], "temperature": 0.0, "avg_logprob": -0.11759257109268852, "compression_ratio": 1.646643109540636, "no_speech_prob": 0.0008273883140645921}, {"id": 141, "seek": 81832, "start": 841.84, "end": 845.7600000000001, "text": " because we don't want to be too troubled with debugging late at night, we will make it even", "tokens": [51540, 570, 321, 500, 380, 528, 281, 312, 886, 29402, 365, 45592, 3469, 412, 1818, 11, 321, 486, 652, 309, 754, 51736], "temperature": 0.0, "avg_logprob": -0.11759257109268852, "compression_ratio": 1.646643109540636, "no_speech_prob": 0.0008273883140645921}, {"id": 142, "seek": 84576, "start": 845.76, "end": 850.24, "text": " more explicit. So we will throw a nice exception that has more, more information. So it might,", "tokens": [50364, 544, 13691, 13, 407, 321, 486, 3507, 257, 1481, 11183, 300, 575, 544, 11, 544, 1589, 13, 407, 309, 1062, 11, 50588], "temperature": 0.0, "avg_logprob": -0.13820692698160808, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0017407173290848732}, {"id": 143, "seek": 84576, "start": 850.24, "end": 854.72, "text": " might be nicer to debug, but it's really, really isn't possible. I mean, you can't have Irish coffee", "tokens": [50588, 1062, 312, 22842, 281, 24083, 11, 457, 309, 311, 534, 11, 534, 1943, 380, 1944, 13, 286, 914, 11, 291, 393, 380, 362, 16801, 4982, 50812], "temperature": 0.0, "avg_logprob": -0.13820692698160808, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0017407173290848732}, {"id": 144, "seek": 84576, "start": 854.72, "end": 863.68, "text": " without cream and whiskey. And, and, and this is sort of an invariant that we're assuming over", "tokens": [50812, 1553, 4689, 293, 34648, 13, 400, 11, 293, 11, 293, 341, 307, 1333, 295, 364, 33270, 394, 300, 321, 434, 11926, 670, 51260], "temperature": 0.0, "avg_logprob": -0.13820692698160808, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0017407173290848732}, {"id": 145, "seek": 84576, "start": 863.68, "end": 868.3199999999999, "text": " our code. In this case, the invariant is quite simple. Irish coffee always has cream and whiskey,", "tokens": [51260, 527, 3089, 13, 682, 341, 1389, 11, 264, 33270, 394, 307, 1596, 2199, 13, 16801, 4982, 1009, 575, 4689, 293, 34648, 11, 51492], "temperature": 0.0, "avg_logprob": -0.13820692698160808, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0017407173290848732}, {"id": 146, "seek": 84576, "start": 868.3199999999999, "end": 872.72, "text": " but nothing is enforcing this invariant. We're kind of writing comment and have,", "tokens": [51492, 457, 1825, 307, 25495, 2175, 341, 33270, 394, 13, 492, 434, 733, 295, 3579, 2871, 293, 362, 11, 51712], "temperature": 0.0, "avg_logprob": -0.13820692698160808, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0017407173290848732}, {"id": 147, "seek": 87272, "start": 873.28, "end": 877.52, "text": " have suffered from a wishful thinking that may, hopefully nobody will ever break this,", "tokens": [50392, 362, 12770, 490, 257, 3172, 906, 1953, 300, 815, 11, 4696, 5079, 486, 1562, 1821, 341, 11, 50604], "temperature": 0.0, "avg_logprob": -0.11920055001974106, "compression_ratio": 1.7721518987341771, "no_speech_prob": 0.011304681189358234}, {"id": 148, "seek": 87272, "start": 877.52, "end": 882.5600000000001, "text": " this thing apart. But imagine that in the future, you're supporting reading orders from JSON files", "tokens": [50604, 341, 551, 4936, 13, 583, 3811, 300, 294, 264, 2027, 11, 291, 434, 7231, 3760, 9470, 490, 31828, 7098, 50856], "temperature": 0.0, "avg_logprob": -0.11920055001974106, "compression_ratio": 1.7721518987341771, "no_speech_prob": 0.011304681189358234}, {"id": 149, "seek": 87272, "start": 882.5600000000001, "end": 887.12, "text": " and someone messed up the format and then something is missing. Who knows? Something can", "tokens": [50856, 293, 1580, 16507, 493, 264, 7877, 293, 550, 746, 307, 5361, 13, 2102, 3255, 30, 6595, 393, 51084], "temperature": 0.0, "avg_logprob": -0.11920055001974106, "compression_ratio": 1.7721518987341771, "no_speech_prob": 0.011304681189358234}, {"id": 150, "seek": 87272, "start": 887.12, "end": 892.0, "text": " happen and you can't write tests, tests to cover all of your flows in your system probably. And", "tokens": [51084, 1051, 293, 291, 393, 380, 2464, 6921, 11, 6921, 281, 2060, 439, 295, 428, 12867, 294, 428, 1185, 1391, 13, 400, 51328], "temperature": 0.0, "avg_logprob": -0.11920055001974106, "compression_ratio": 1.7721518987341771, "no_speech_prob": 0.011304681189358234}, {"id": 151, "seek": 87272, "start": 892.0, "end": 896.4, "text": " even less so, you can't write tests for future flows that someone might define, that are not", "tokens": [51328, 754, 1570, 370, 11, 291, 393, 380, 2464, 6921, 337, 2027, 12867, 300, 1580, 1062, 6964, 11, 300, 366, 406, 51548], "temperature": 0.0, "avg_logprob": -0.11920055001974106, "compression_ratio": 1.7721518987341771, "no_speech_prob": 0.011304681189358234}, {"id": 152, "seek": 87272, "start": 896.4, "end": 900.24, "text": " defined right now. How, how can you protect against something that you don't even know that will", "tokens": [51548, 7642, 558, 586, 13, 1012, 11, 577, 393, 291, 2371, 1970, 746, 300, 291, 500, 380, 754, 458, 300, 486, 51740], "temperature": 0.0, "avg_logprob": -0.11920055001974106, "compression_ratio": 1.7721518987341771, "no_speech_prob": 0.011304681189358234}, {"id": 153, "seek": 90024, "start": 900.24, "end": 906.48, "text": " exist in your system? And so, so, and you might be actually thinking that, okay, I'm very bad at", "tokens": [50364, 2514, 294, 428, 1185, 30, 400, 370, 11, 370, 11, 293, 291, 1062, 312, 767, 1953, 300, 11, 1392, 11, 286, 478, 588, 1578, 412, 50676], "temperature": 0.0, "avg_logprob": -0.1361397533881955, "compression_ratio": 1.7168458781362008, "no_speech_prob": 0.002174090128391981}, {"id": 154, "seek": 90024, "start": 906.48, "end": 913.92, "text": " designing data types and that's why I have this kind of bad, bad definition of, of an order. But", "tokens": [50676, 14685, 1412, 3467, 293, 300, 311, 983, 286, 362, 341, 733, 295, 1578, 11, 1578, 7123, 295, 11, 295, 364, 1668, 13, 583, 51048], "temperature": 0.0, "avg_logprob": -0.1361397533881955, "compression_ratio": 1.7168458781362008, "no_speech_prob": 0.002174090128391981}, {"id": 155, "seek": 90024, "start": 913.92, "end": 918.72, "text": " that may be so. But the thing I'm trying to assert here is not something that happens in a single,", "tokens": [51048, 300, 815, 312, 370, 13, 583, 264, 551, 286, 478, 1382, 281, 19810, 510, 307, 406, 746, 300, 2314, 294, 257, 2167, 11, 51288], "temperature": 0.0, "avg_logprob": -0.1361397533881955, "compression_ratio": 1.7168458781362008, "no_speech_prob": 0.002174090128391981}, {"id": 156, "seek": 90024, "start": 919.44, "end": 923.04, "text": " in a single step. Usually, it kind of creeps up on you. You start with something small and", "tokens": [51324, 294, 257, 2167, 1823, 13, 11419, 11, 309, 733, 295, 9626, 82, 493, 322, 291, 13, 509, 722, 365, 746, 1359, 293, 51504], "temperature": 0.0, "avg_logprob": -0.1361397533881955, "compression_ratio": 1.7168458781362008, "no_speech_prob": 0.002174090128391981}, {"id": 157, "seek": 90024, "start": 923.04, "end": 927.92, "text": " gradually it increases, grows, and then becomes this huge thing full of illegal states that you", "tokens": [51504, 13145, 309, 8637, 11, 13156, 11, 293, 550, 3643, 341, 2603, 551, 1577, 295, 11905, 4368, 300, 291, 51748], "temperature": 0.0, "avg_logprob": -0.1361397533881955, "compression_ratio": 1.7168458781362008, "no_speech_prob": 0.002174090128391981}, {"id": 158, "seek": 92792, "start": 927.92, "end": 933.04, "text": " can, you're really dependent on and can't, can't really disentangle from, from your system. And,", "tokens": [50364, 393, 11, 291, 434, 534, 12334, 322, 293, 393, 380, 11, 393, 380, 534, 37313, 7846, 490, 11, 490, 428, 1185, 13, 400, 11, 50620], "temperature": 0.0, "avg_logprob": -0.12861540684333214, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.0007576831849291921}, {"id": 159, "seek": 92792, "start": 933.04, "end": 937.52, "text": " and then you again enter this, this space where you have lots of illegal states and nothing to do", "tokens": [50620, 293, 550, 291, 797, 3242, 341, 11, 341, 1901, 689, 291, 362, 3195, 295, 11905, 4368, 293, 1825, 281, 360, 50844], "temperature": 0.0, "avg_logprob": -0.12861540684333214, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.0007576831849291921}, {"id": 160, "seek": 92792, "start": 937.52, "end": 950.64, "text": " about it. But we can, can do better, a lot better. So, sorry. So, so our problem here is that our", "tokens": [50844, 466, 309, 13, 583, 321, 393, 11, 393, 360, 1101, 11, 257, 688, 1101, 13, 407, 11, 2597, 13, 407, 11, 370, 527, 1154, 510, 307, 300, 527, 51500], "temperature": 0.0, "avg_logprob": -0.12861540684333214, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.0007576831849291921}, {"id": 161, "seek": 92792, "start": 950.64, "end": 956.56, "text": " type is in a sense too big for a problem. We have, we define some schema for possible, possible", "tokens": [51500, 2010, 307, 294, 257, 2020, 886, 955, 337, 257, 1154, 13, 492, 362, 11, 321, 6964, 512, 34078, 337, 1944, 11, 1944, 51796], "temperature": 0.0, "avg_logprob": -0.12861540684333214, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.0007576831849291921}, {"id": 162, "seek": 95656, "start": 956.56, "end": 960.8, "text": " combinations of inputs and it's too big. Our state space contains lots of things that shouldn't", "tokens": [50364, 21267, 295, 15743, 293, 309, 311, 886, 955, 13, 2621, 1785, 1901, 8306, 3195, 295, 721, 300, 4659, 380, 50576], "temperature": 0.0, "avg_logprob": -0.142599751551946, "compression_ratio": 1.6551724137931034, "no_speech_prob": 0.0010156395146623254}, {"id": 163, "seek": 95656, "start": 960.8, "end": 968.3199999999999, "text": " be there. And algebraic data types are a really good way and methodology to, to create types of,", "tokens": [50576, 312, 456, 13, 400, 21989, 299, 1412, 3467, 366, 257, 534, 665, 636, 293, 24850, 281, 11, 281, 1884, 3467, 295, 11, 50952], "temperature": 0.0, "avg_logprob": -0.142599751551946, "compression_ratio": 1.6551724137931034, "no_speech_prob": 0.0010156395146623254}, {"id": 164, "seek": 95656, "start": 968.3199999999999, "end": 973.8399999999999, "text": " of the right size, types that can actually fit our domain in a way that, that really is exactly", "tokens": [50952, 295, 264, 558, 2744, 11, 3467, 300, 393, 767, 3318, 527, 9274, 294, 257, 636, 300, 11, 300, 534, 307, 2293, 51228], "temperature": 0.0, "avg_logprob": -0.142599751551946, "compression_ratio": 1.6551724137931034, "no_speech_prob": 0.0010156395146623254}, {"id": 165, "seek": 95656, "start": 973.8399999999999, "end": 980.0799999999999, "text": " what we want and nothing else. So, let's rewrite our data type as, as an algebraic data type in", "tokens": [51228, 437, 321, 528, 293, 1825, 1646, 13, 407, 11, 718, 311, 28132, 527, 1412, 2010, 382, 11, 382, 364, 21989, 299, 1412, 2010, 294, 51540], "temperature": 0.0, "avg_logprob": -0.142599751551946, "compression_ratio": 1.6551724137931034, "no_speech_prob": 0.0010156395146623254}, {"id": 166, "seek": 98008, "start": 980.1600000000001, "end": 988.72, "text": " this case and some type or in enumeration in Scala syntax now. So, we're going, instead of writing", "tokens": [50368, 341, 1389, 293, 512, 2010, 420, 294, 465, 449, 5053, 294, 2747, 5159, 28431, 586, 13, 407, 11, 321, 434, 516, 11, 2602, 295, 3579, 50796], "temperature": 0.0, "avg_logprob": -0.16451689254405888, "compression_ratio": 1.7822878228782288, "no_speech_prob": 0.010165859013795853}, {"id": 167, "seek": 98008, "start": 988.72, "end": 992.72, "text": " coffee order where everything is placed to kind of in the top level with all the options, everything", "tokens": [50796, 4982, 1668, 689, 1203, 307, 7074, 281, 733, 295, 294, 264, 1192, 1496, 365, 439, 264, 3956, 11, 1203, 50996], "temperature": 0.0, "avg_logprob": -0.16451689254405888, "compression_ratio": 1.7822878228782288, "no_speech_prob": 0.010165859013795853}, {"id": 168, "seek": 98008, "start": 992.72, "end": 997.2800000000001, "text": " possible, we're going to split, split it up into various cases. So, we have a first case with", "tokens": [50996, 1944, 11, 321, 434, 516, 281, 7472, 11, 7472, 309, 493, 666, 3683, 3331, 13, 407, 11, 321, 362, 257, 700, 1389, 365, 51224], "temperature": 0.0, "avg_logprob": -0.16451689254405888, "compression_ratio": 1.7822878228782288, "no_speech_prob": 0.010165859013795853}, {"id": 169, "seek": 98008, "start": 997.2800000000001, "end": 1002.5600000000001, "text": " Cappuccino. Cappuccino requires milk, so it's no longer optional. We have a case for espresso,", "tokens": [51224, 383, 1746, 39407, 2982, 13, 383, 1746, 39407, 2982, 7029, 5392, 11, 370, 309, 311, 572, 2854, 17312, 13, 492, 362, 257, 1389, 337, 44140, 11, 51488], "temperature": 0.0, "avg_logprob": -0.16451689254405888, "compression_ratio": 1.7822878228782288, "no_speech_prob": 0.010165859013795853}, {"id": 170, "seek": 98008, "start": 1002.5600000000001, "end": 1007.5200000000001, "text": " which doesn't have any, any requirements. So, this, so it's just espresso. We have the case of", "tokens": [51488, 597, 1177, 380, 362, 604, 11, 604, 7728, 13, 407, 11, 341, 11, 370, 309, 311, 445, 44140, 13, 492, 362, 264, 1389, 295, 51736], "temperature": 0.0, "avg_logprob": -0.16451689254405888, "compression_ratio": 1.7822878228782288, "no_speech_prob": 0.010165859013795853}, {"id": 171, "seek": 100752, "start": 1007.52, "end": 1011.4399999999999, "text": " Latte, which also requires milk, but there's no ambiguity anymore because now it's a separate", "tokens": [50364, 7354, 975, 11, 597, 611, 7029, 5392, 11, 457, 456, 311, 572, 46519, 3602, 570, 586, 309, 311, 257, 4994, 50560], "temperature": 0.0, "avg_logprob": -0.16539540566688726, "compression_ratio": 1.7984790874524714, "no_speech_prob": 0.0029152072966098785}, {"id": 172, "seek": 100752, "start": 1011.4399999999999, "end": 1016.56, "text": " case and there's no way to confuse one Cappuccino with the other. So, so, and again, the argument is", "tokens": [50560, 1389, 293, 456, 311, 572, 636, 281, 28584, 472, 383, 1746, 39407, 2982, 365, 264, 661, 13, 407, 11, 370, 11, 293, 797, 11, 264, 6770, 307, 50816], "temperature": 0.0, "avg_logprob": -0.16539540566688726, "compression_ratio": 1.7984790874524714, "no_speech_prob": 0.0029152072966098785}, {"id": 173, "seek": 100752, "start": 1016.56, "end": 1021.84, "text": " no longer, no, no longer optional. And Afogato requires Gelato. So, this is again a required", "tokens": [50816, 572, 2854, 11, 572, 11, 572, 2854, 17312, 13, 400, 3325, 664, 2513, 7029, 16142, 2513, 13, 407, 11, 341, 307, 797, 257, 4739, 51080], "temperature": 0.0, "avg_logprob": -0.16539540566688726, "compression_ratio": 1.7984790874524714, "no_speech_prob": 0.0029152072966098785}, {"id": 174, "seek": 100752, "start": 1021.84, "end": 1027.76, "text": " dependency and we cannot avoid it. And Irish and coffee, which is the, which was our stumbling block", "tokens": [51080, 33621, 293, 321, 2644, 5042, 309, 13, 400, 16801, 293, 4982, 11, 597, 307, 264, 11, 597, 390, 527, 342, 14188, 3461, 51376], "temperature": 0.0, "avg_logprob": -0.16539540566688726, "compression_ratio": 1.7984790874524714, "no_speech_prob": 0.0029152072966098785}, {"id": 175, "seek": 100752, "start": 1027.76, "end": 1031.44, "text": " now has a required dependency on cream and whiskey and there's no ambiguity anymore.", "tokens": [51376, 586, 575, 257, 4739, 33621, 322, 4689, 293, 34648, 293, 456, 311, 572, 46519, 3602, 13, 51560], "temperature": 0.0, "avg_logprob": -0.16539540566688726, "compression_ratio": 1.7984790874524714, "no_speech_prob": 0.0029152072966098785}, {"id": 176, "seek": 103144, "start": 1032.3200000000002, "end": 1038.3200000000002, "text": " So, not only that it's now much, much clearer what is going on and what, what, what sort of states", "tokens": [50408, 407, 11, 406, 787, 300, 309, 311, 586, 709, 11, 709, 26131, 437, 307, 516, 322, 293, 437, 11, 437, 11, 437, 1333, 295, 4368, 50708], "temperature": 0.0, "avg_logprob": -0.15407866485847915, "compression_ratio": 1.8093385214007782, "no_speech_prob": 0.0031159038189798594}, {"id": 177, "seek": 103144, "start": 1038.3200000000002, "end": 1043.68, "text": " are legal here and what, what is the actionable data that we have and how to access it. It's", "tokens": [50708, 366, 5089, 510, 293, 437, 11, 437, 307, 264, 45098, 1412, 300, 321, 362, 293, 577, 281, 2105, 309, 13, 467, 311, 50976], "temperature": 0.0, "avg_logprob": -0.15407866485847915, "compression_ratio": 1.8093385214007782, "no_speech_prob": 0.0031159038189798594}, {"id": 178, "seek": 103144, "start": 1043.68, "end": 1048.48, "text": " literally now impossible to express the legal state I, I, I just described previously. So,", "tokens": [50976, 3736, 586, 6243, 281, 5109, 264, 5089, 1785, 286, 11, 286, 11, 286, 445, 7619, 8046, 13, 407, 11, 51216], "temperature": 0.0, "avg_logprob": -0.15407866485847915, "compression_ratio": 1.8093385214007782, "no_speech_prob": 0.0031159038189798594}, {"id": 179, "seek": 103144, "start": 1048.48, "end": 1052.48, "text": " the legal states in the previous slide are, are literally unrepresentable. You can't write down", "tokens": [51216, 264, 5089, 4368, 294, 264, 3894, 4137, 366, 11, 366, 3736, 517, 19919, 11662, 712, 13, 509, 393, 380, 2464, 760, 51416], "temperature": 0.0, "avg_logprob": -0.15407866485847915, "compression_ratio": 1.8093385214007782, "no_speech_prob": 0.0031159038189798594}, {"id": 180, "seek": 103144, "start": 1052.48, "end": 1059.04, "text": " the code that, that actually enters those states. So, now we can, for example, in the,", "tokens": [51416, 264, 3089, 300, 11, 300, 767, 18780, 729, 4368, 13, 407, 11, 586, 321, 393, 11, 337, 1365, 11, 294, 264, 11, 51744], "temperature": 0.0, "avg_logprob": -0.15407866485847915, "compression_ratio": 1.8093385214007782, "no_speech_prob": 0.0031159038189798594}, {"id": 181, "seek": 105904, "start": 1059.12, "end": 1063.28, "text": " when preparing the Irish coffee, we can now safely better match our, on our order. And, and if it's", "tokens": [50368, 562, 10075, 264, 16801, 4982, 11, 321, 393, 586, 11750, 1101, 2995, 527, 11, 322, 527, 1668, 13, 400, 11, 293, 498, 309, 311, 50576], "temperature": 0.0, "avg_logprob": -0.14043685368129186, "compression_ratio": 1.7168458781362008, "no_speech_prob": 0.005264813080430031}, {"id": 182, "seek": 105904, "start": 1063.28, "end": 1068.1599999999999, "text": " Irish coffee, we know and the compiler provides us with access to both cream and whiskey. And", "tokens": [50576, 16801, 4982, 11, 321, 458, 293, 264, 31958, 6417, 505, 365, 2105, 281, 1293, 4689, 293, 34648, 13, 400, 50820], "temperature": 0.0, "avg_logprob": -0.14043685368129186, "compression_ratio": 1.7168458781362008, "no_speech_prob": 0.005264813080430031}, {"id": 183, "seek": 105904, "start": 1068.1599999999999, "end": 1073.68, "text": " it's definitely there and can be gone and, and can be missing. So, we don't need to assume any", "tokens": [50820, 309, 311, 2138, 456, 293, 393, 312, 2780, 293, 11, 293, 393, 312, 5361, 13, 407, 11, 321, 500, 380, 643, 281, 6552, 604, 51096], "temperature": 0.0, "avg_logprob": -0.14043685368129186, "compression_ratio": 1.7168458781362008, "no_speech_prob": 0.005264813080430031}, {"id": 184, "seek": 105904, "start": 1073.68, "end": 1079.12, "text": " invariant about a call or code. Don't have to lie about it in comments. And no, no exceptions can", "tokens": [51096, 33270, 394, 466, 257, 818, 420, 3089, 13, 1468, 380, 362, 281, 4544, 466, 309, 294, 3053, 13, 400, 572, 11, 572, 22847, 393, 51368], "temperature": 0.0, "avg_logprob": -0.14043685368129186, "compression_ratio": 1.7168458781362008, "no_speech_prob": 0.005264813080430031}, {"id": 185, "seek": 105904, "start": 1079.12, "end": 1084.96, "text": " be, can be thrown here or, or any other illegal states. And if we got to this point where it", "tokens": [51368, 312, 11, 393, 312, 11732, 510, 420, 11, 420, 604, 661, 11905, 4368, 13, 400, 498, 321, 658, 281, 341, 935, 689, 309, 51660], "temperature": 0.0, "avg_logprob": -0.14043685368129186, "compression_ratio": 1.7168458781362008, "no_speech_prob": 0.005264813080430031}, {"id": 186, "seek": 108496, "start": 1085.04, "end": 1089.2, "text": " better matched than we have Irish coffee, we know for a fact that all requirements were met", "tokens": [50368, 1101, 21447, 813, 321, 362, 16801, 4982, 11, 321, 458, 337, 257, 1186, 300, 439, 7728, 645, 1131, 50576], "temperature": 0.0, "avg_logprob": -0.10789140065511067, "compression_ratio": 1.779467680608365, "no_speech_prob": 0.012179473415017128}, {"id": 187, "seek": 108496, "start": 1089.2, "end": 1093.76, "text": " and nothing can go wrong in this, in this respect. And this is enforced by the compiler", "tokens": [50576, 293, 1825, 393, 352, 2085, 294, 341, 11, 294, 341, 3104, 13, 400, 341, 307, 40953, 538, 264, 31958, 50804], "temperature": 0.0, "avg_logprob": -0.10789140065511067, "compression_ratio": 1.779467680608365, "no_speech_prob": 0.012179473415017128}, {"id": 188, "seek": 108496, "start": 1095.04, "end": 1100.56, "text": " for every possible floor of our program. So, we don't have to try to cover, cover everything", "tokens": [50868, 337, 633, 1944, 4123, 295, 527, 1461, 13, 407, 11, 321, 500, 380, 362, 281, 853, 281, 2060, 11, 2060, 1203, 51144], "temperature": 0.0, "avg_logprob": -0.10789140065511067, "compression_ratio": 1.779467680608365, "no_speech_prob": 0.012179473415017128}, {"id": 189, "seek": 108496, "start": 1100.56, "end": 1106.16, "text": " with tests. And it's also there, enforced there for the future as well, because the compiler does", "tokens": [51144, 365, 6921, 13, 400, 309, 311, 611, 456, 11, 40953, 456, 337, 264, 2027, 382, 731, 11, 570, 264, 31958, 775, 51424], "temperature": 0.0, "avg_logprob": -0.10789140065511067, "compression_ratio": 1.779467680608365, "no_speech_prob": 0.012179473415017128}, {"id": 190, "seek": 108496, "start": 1106.16, "end": 1110.0, "text": " the same thing for all future flows as well. So, we don't have to worry about it again with tests", "tokens": [51424, 264, 912, 551, 337, 439, 2027, 12867, 382, 731, 13, 407, 11, 321, 500, 380, 362, 281, 3292, 466, 309, 797, 365, 6921, 51616], "temperature": 0.0, "avg_logprob": -0.10789140065511067, "compression_ratio": 1.779467680608365, "no_speech_prob": 0.012179473415017128}, {"id": 191, "seek": 111000, "start": 1110.0, "end": 1117.6, "text": " that we cannot write even. So, the illegal state that I showed before is truly unrepresentable", "tokens": [50364, 300, 321, 2644, 2464, 754, 13, 407, 11, 264, 11905, 1785, 300, 286, 4712, 949, 307, 4908, 517, 19919, 11662, 712, 50744], "temperature": 0.0, "avg_logprob": -0.12065909833324198, "compression_ratio": 1.670995670995671, "no_speech_prob": 0.0046544927172362804}, {"id": 192, "seek": 111000, "start": 1117.6, "end": 1124.24, "text": " now. You cannot write it down. It cannot exist in the system. So, algebraic data types are, are a", "tokens": [50744, 586, 13, 509, 2644, 2464, 309, 760, 13, 467, 2644, 2514, 294, 264, 1185, 13, 407, 11, 21989, 299, 1412, 3467, 366, 11, 366, 257, 51076], "temperature": 0.0, "avg_logprob": -0.12065909833324198, "compression_ratio": 1.670995670995671, "no_speech_prob": 0.0046544927172362804}, {"id": 193, "seek": 111000, "start": 1124.24, "end": 1130.72, "text": " great, a great tool you can use to reduce the state space of your, of your problem domain. So,", "tokens": [51076, 869, 11, 257, 869, 2290, 291, 393, 764, 281, 5407, 264, 1785, 1901, 295, 428, 11, 295, 428, 1154, 9274, 13, 407, 11, 51400], "temperature": 0.0, "avg_logprob": -0.12065909833324198, "compression_ratio": 1.670995670995671, "no_speech_prob": 0.0046544927172362804}, {"id": 194, "seek": 111000, "start": 1130.72, "end": 1136.64, "text": " leading to fewer legal states and making the code generally more, more comprehensible. And this is", "tokens": [51400, 5775, 281, 13366, 5089, 4368, 293, 1455, 264, 3089, 5101, 544, 11, 544, 10753, 30633, 13, 400, 341, 307, 51696], "temperature": 0.0, "avg_logprob": -0.12065909833324198, "compression_ratio": 1.670995670995671, "no_speech_prob": 0.0046544927172362804}, {"id": 195, "seek": 113664, "start": 1136.72, "end": 1141.92, "text": " done by making every assumption about your inputs completely explicit. So, in our case, we made", "tokens": [50368, 1096, 538, 1455, 633, 15302, 466, 428, 15743, 2584, 13691, 13, 407, 11, 294, 527, 1389, 11, 321, 1027, 50628], "temperature": 0.0, "avg_logprob": -0.07942181825637817, "compression_ratio": 1.7357142857142858, "no_speech_prob": 0.0028297300450503826}, {"id": 196, "seek": 113664, "start": 1141.92, "end": 1147.76, "text": " every case to correspond to the assumptions about coffee orders that we have at the moment. And", "tokens": [50628, 633, 1389, 281, 6805, 281, 264, 17695, 466, 4982, 9470, 300, 321, 362, 412, 264, 1623, 13, 400, 50920], "temperature": 0.0, "avg_logprob": -0.07942181825637817, "compression_ratio": 1.7357142857142858, "no_speech_prob": 0.0028297300450503826}, {"id": 197, "seek": 113664, "start": 1147.76, "end": 1152.5600000000002, "text": " the values are now correct by construction. So, you cannot build an illegal order anymore because,", "tokens": [50920, 264, 4190, 366, 586, 3006, 538, 6435, 13, 407, 11, 291, 2644, 1322, 364, 11905, 1668, 3602, 570, 11, 51160], "temperature": 0.0, "avg_logprob": -0.07942181825637817, "compression_ratio": 1.7357142857142858, "no_speech_prob": 0.0028297300450503826}, {"id": 198, "seek": 113664, "start": 1152.5600000000002, "end": 1157.5200000000002, "text": " because you made it impossible in the type to represent what, what is not supposed to be there.", "tokens": [51160, 570, 291, 1027, 309, 6243, 294, 264, 2010, 281, 2906, 437, 11, 437, 307, 406, 3442, 281, 312, 456, 13, 51408], "temperature": 0.0, "avg_logprob": -0.07942181825637817, "compression_ratio": 1.7357142857142858, "no_speech_prob": 0.0028297300450503826}, {"id": 199, "seek": 113664, "start": 1159.1200000000001, "end": 1164.88, "text": " And so, once you do that, you're basically turning your flow into data. So, notice how we no longer", "tokens": [51488, 400, 370, 11, 1564, 291, 360, 300, 11, 291, 434, 1936, 6246, 428, 3095, 666, 1412, 13, 407, 11, 3449, 577, 321, 572, 2854, 51776], "temperature": 0.0, "avg_logprob": -0.07942181825637817, "compression_ratio": 1.7357142857142858, "no_speech_prob": 0.0028297300450503826}, {"id": 200, "seek": 116488, "start": 1164.96, "end": 1170.0, "text": " have any conditionals. After, after pattern matching and figuring out that we are in the Irish", "tokens": [50368, 362, 604, 4188, 1124, 13, 2381, 11, 934, 5102, 14324, 293, 15213, 484, 300, 321, 366, 294, 264, 16801, 50620], "temperature": 0.0, "avg_logprob": -0.14439644476380012, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.004087779205292463}, {"id": 201, "seek": 116488, "start": 1170.0, "end": 1174.3200000000002, "text": " coffee case, that's it. We don't have to do anything else. We don't have to ask, ask and be", "tokens": [50620, 4982, 1389, 11, 300, 311, 309, 13, 492, 500, 380, 362, 281, 360, 1340, 1646, 13, 492, 500, 380, 362, 281, 1029, 11, 1029, 293, 312, 50836], "temperature": 0.0, "avg_logprob": -0.14439644476380012, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.004087779205292463}, {"id": 202, "seek": 116488, "start": 1174.3200000000002, "end": 1182.4, "text": " hopeful that the cream whiskey are present. It's there. It's accessible. And, and so, and so you,", "tokens": [50836, 20531, 300, 264, 4689, 34648, 366, 1974, 13, 467, 311, 456, 13, 467, 311, 9515, 13, 400, 11, 293, 370, 11, 293, 370, 291, 11, 51240], "temperature": 0.0, "avg_logprob": -0.14439644476380012, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.004087779205292463}, {"id": 203, "seek": 116488, "start": 1182.4, "end": 1188.8000000000002, "text": " you don't have to worry about defensively programming against it. And, and nice bonus in", "tokens": [51240, 291, 500, 380, 362, 281, 3292, 466, 16468, 356, 9410, 1970, 309, 13, 400, 11, 293, 1481, 10882, 294, 51560], "temperature": 0.0, "avg_logprob": -0.14439644476380012, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.004087779205292463}, {"id": 204, "seek": 118880, "start": 1188.8799999999999, "end": 1193.6, "text": " statically type of programming language is where you, for pattern matches, you also have", "tokens": [50368, 2219, 984, 2010, 295, 9410, 2856, 307, 689, 291, 11, 337, 5102, 10676, 11, 291, 611, 362, 50604], "temperature": 0.0, "avg_logprob": -0.1612443630511944, "compression_ratio": 1.8481848184818481, "no_speech_prob": 0.005807654932141304}, {"id": 205, "seek": 118880, "start": 1193.6, "end": 1198.1599999999999, "text": " exhaustivity checking. So, in case someone adds another case or something else is changing,", "tokens": [50604, 14687, 4253, 8568, 13, 407, 11, 294, 1389, 1580, 10860, 1071, 1389, 420, 746, 1646, 307, 4473, 11, 50832], "temperature": 0.0, "avg_logprob": -0.1612443630511944, "compression_ratio": 1.8481848184818481, "no_speech_prob": 0.005807654932141304}, {"id": 206, "seek": 118880, "start": 1198.1599999999999, "end": 1203.36, "text": " changing the compiler will have your back and help you figure out what's missing and what,", "tokens": [50832, 4473, 264, 31958, 486, 362, 428, 646, 293, 854, 291, 2573, 484, 437, 311, 5361, 293, 437, 11, 51092], "temperature": 0.0, "avg_logprob": -0.1612443630511944, "compression_ratio": 1.8481848184818481, "no_speech_prob": 0.005807654932141304}, {"id": 207, "seek": 118880, "start": 1203.36, "end": 1208.32, "text": " what you have to add there to be able to handle everything correctly. So, you can't forget anything", "tokens": [51092, 437, 291, 362, 281, 909, 456, 281, 312, 1075, 281, 4813, 1203, 8944, 13, 407, 11, 291, 393, 380, 2870, 1340, 51340], "temperature": 0.0, "avg_logprob": -0.1612443630511944, "compression_ratio": 1.8481848184818481, "no_speech_prob": 0.005807654932141304}, {"id": 208, "seek": 118880, "start": 1208.32, "end": 1212.96, "text": " that you need and don't, can't forget to handle everything. And what's important, the compiler", "tokens": [51340, 300, 291, 643, 293, 500, 380, 11, 393, 380, 2870, 281, 4813, 1203, 13, 400, 437, 311, 1021, 11, 264, 31958, 51572], "temperature": 0.0, "avg_logprob": -0.1612443630511944, "compression_ratio": 1.8481848184818481, "no_speech_prob": 0.005807654932141304}, {"id": 209, "seek": 118880, "start": 1212.96, "end": 1216.8799999999999, "text": " is not providing you with safe access to all the data that you need. You don't have to assume", "tokens": [51572, 307, 406, 6530, 291, 365, 3273, 2105, 281, 439, 264, 1412, 300, 291, 643, 13, 509, 500, 380, 362, 281, 6552, 51768], "temperature": 0.0, "avg_logprob": -0.1612443630511944, "compression_ratio": 1.8481848184818481, "no_speech_prob": 0.005807654932141304}, {"id": 210, "seek": 121688, "start": 1216.96, "end": 1221.5200000000002, "text": " that it will be present when it might be not. It will definitely be there and you can't work", "tokens": [50368, 300, 309, 486, 312, 1974, 562, 309, 1062, 312, 406, 13, 467, 486, 2138, 312, 456, 293, 291, 393, 380, 589, 50596], "temperature": 0.0, "avg_logprob": -0.10214424977260353, "compression_ratio": 1.706959706959707, "no_speech_prob": 0.0019471142441034317}, {"id": 211, "seek": 121688, "start": 1221.5200000000002, "end": 1228.5600000000002, "text": " around it. So, now that you, and you're basically free from thinking about illegal states and you", "tokens": [50596, 926, 309, 13, 407, 11, 586, 300, 291, 11, 293, 291, 434, 1936, 1737, 490, 1953, 466, 11905, 4368, 293, 291, 50948], "temperature": 0.0, "avg_logprob": -0.10214424977260353, "compression_ratio": 1.706959706959707, "no_speech_prob": 0.0019471142441034317}, {"id": 212, "seek": 121688, "start": 1228.5600000000002, "end": 1233.6000000000001, "text": " don't have to engage in defensive programming all throughout your application. It's not a", "tokens": [50948, 500, 380, 362, 281, 4683, 294, 16468, 9410, 439, 3710, 428, 3861, 13, 467, 311, 406, 257, 51200], "temperature": 0.0, "avg_logprob": -0.10214424977260353, "compression_ratio": 1.706959706959707, "no_speech_prob": 0.0019471142441034317}, {"id": 213, "seek": 121688, "start": 1233.6000000000001, "end": 1237.92, "text": " magical solution. You still have to kind of get the, the, the size of your algebraic data type,", "tokens": [51200, 12066, 3827, 13, 509, 920, 362, 281, 733, 295, 483, 264, 11, 264, 11, 264, 2744, 295, 428, 21989, 299, 1412, 2010, 11, 51416], "temperature": 0.0, "avg_logprob": -0.10214424977260353, "compression_ratio": 1.706959706959707, "no_speech_prob": 0.0019471142441034317}, {"id": 214, "seek": 121688, "start": 1237.92, "end": 1241.6000000000001, "text": " right? Because my initial example, the first coffee order is also an algebraic data type,", "tokens": [51416, 558, 30, 1436, 452, 5883, 1365, 11, 264, 700, 4982, 1668, 307, 611, 364, 21989, 299, 1412, 2010, 11, 51600], "temperature": 0.0, "avg_logprob": -0.10214424977260353, "compression_ratio": 1.706959706959707, "no_speech_prob": 0.0019471142441034317}, {"id": 215, "seek": 124160, "start": 1241.6, "end": 1247.52, "text": " but that one was too big for our state space. So, you still have to think, nobody is, is", "tokens": [50364, 457, 300, 472, 390, 886, 955, 337, 527, 1785, 1901, 13, 407, 11, 291, 920, 362, 281, 519, 11, 5079, 307, 11, 307, 50660], "temperature": 0.0, "avg_logprob": -0.14598389633563386, "compression_ratio": 1.7992277992277992, "no_speech_prob": 0.002349437214434147}, {"id": 216, "seek": 124160, "start": 1247.52, "end": 1252.0, "text": " getting away from, from thinking, but still having this perspective and having algebraic", "tokens": [50660, 1242, 1314, 490, 11, 490, 1953, 11, 457, 920, 1419, 341, 4585, 293, 1419, 21989, 299, 50884], "temperature": 0.0, "avg_logprob": -0.14598389633563386, "compression_ratio": 1.7992277992277992, "no_speech_prob": 0.002349437214434147}, {"id": 217, "seek": 124160, "start": 1252.0, "end": 1257.28, "text": " data types as, as a tool that you can use to shape your state space is, is very, very useful.", "tokens": [50884, 1412, 3467, 382, 11, 382, 257, 2290, 300, 291, 393, 764, 281, 3909, 428, 1785, 1901, 307, 11, 307, 588, 11, 588, 4420, 13, 51148], "temperature": 0.0, "avg_logprob": -0.14598389633563386, "compression_ratio": 1.7992277992277992, "no_speech_prob": 0.002349437214434147}, {"id": 218, "seek": 124160, "start": 1258.8799999999999, "end": 1263.6, "text": " And so, this is, I think that algebraic data type, data types of all the features of functional", "tokens": [51228, 400, 370, 11, 341, 307, 11, 286, 519, 300, 21989, 299, 1412, 2010, 11, 1412, 3467, 295, 439, 264, 4122, 295, 11745, 51464], "temperature": 0.0, "avg_logprob": -0.14598389633563386, "compression_ratio": 1.7992277992277992, "no_speech_prob": 0.002349437214434147}, {"id": 219, "seek": 124160, "start": 1263.6, "end": 1270.24, "text": " programming are, is probably the, the best cost, cost benefit ratio out there. And if you're using", "tokens": [51464, 9410, 366, 11, 307, 1391, 264, 11, 264, 1151, 2063, 11, 2063, 5121, 8509, 484, 456, 13, 400, 498, 291, 434, 1228, 51796], "temperature": 0.0, "avg_logprob": -0.14598389633563386, "compression_ratio": 1.7992277992277992, "no_speech_prob": 0.002349437214434147}, {"id": 220, "seek": 127024, "start": 1270.32, "end": 1275.44, "text": " them consistently all over your system, I think that, that will be a great improvement to, to the", "tokens": [50368, 552, 14961, 439, 670, 428, 1185, 11, 286, 519, 300, 11, 300, 486, 312, 257, 869, 10444, 281, 11, 281, 264, 50624], "temperature": 0.0, "avg_logprob": -0.14694495533787927, "compression_ratio": 1.6311111111111112, "no_speech_prob": 0.0012350009055808187}, {"id": 221, "seek": 127024, "start": 1275.44, "end": 1280.64, "text": " possible illegal states that you can or cannot represent. And if I were to start on, start on", "tokens": [50624, 1944, 11905, 4368, 300, 291, 393, 420, 2644, 2906, 13, 400, 498, 286, 645, 281, 722, 322, 11, 722, 322, 50884], "temperature": 0.0, "avg_logprob": -0.14694495533787927, "compression_ratio": 1.6311111111111112, "no_speech_prob": 0.0012350009055808187}, {"id": 222, "seek": 127024, "start": 1280.64, "end": 1285.28, "text": " a deserted island or something or programming Java, that probably would be the one feature that I,", "tokens": [50884, 257, 47983, 6077, 420, 746, 420, 9410, 10745, 11, 300, 1391, 576, 312, 264, 472, 4111, 300, 286, 11, 51116], "temperature": 0.0, "avg_logprob": -0.14694495533787927, "compression_ratio": 1.6311111111111112, "no_speech_prob": 0.0012350009055808187}, {"id": 223, "seek": 127024, "start": 1285.28, "end": 1289.44, "text": " I would like to have from functional programming. They're that, that useful.", "tokens": [51116, 286, 576, 411, 281, 362, 490, 11745, 9410, 13, 814, 434, 300, 11, 300, 4420, 13, 51324], "temperature": 0.0, "avg_logprob": -0.14694495533787927, "compression_ratio": 1.6311111111111112, "no_speech_prob": 0.0012350009055808187}, {"id": 224, "seek": 128944, "start": 1290.0800000000002, "end": 1300.56, "text": " So, now we're back to our robot. So, let's try to tackle another scenario. So, successfully", "tokens": [50396, 407, 11, 586, 321, 434, 646, 281, 527, 7881, 13, 407, 11, 718, 311, 853, 281, 14896, 1071, 9005, 13, 407, 11, 10727, 50920], "temperature": 0.0, "avg_logprob": -0.13899844033377512, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0011104008881375194}, {"id": 225, "seek": 128944, "start": 1300.56, "end": 1306.96, "text": " defeated the issue of coffee ordering. So, again, apparently that coffee drinkers have lots and", "tokens": [50920, 15563, 264, 2734, 295, 4982, 21739, 13, 407, 11, 797, 11, 7970, 300, 4982, 2822, 433, 362, 3195, 293, 51240], "temperature": 0.0, "avg_logprob": -0.13899844033377512, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0011104008881375194}, {"id": 226, "seek": 128944, "start": 1306.96, "end": 1311.68, "text": " lots of neat picks. For example, you can't just pour any amount of water on any amount of coffee,", "tokens": [51240, 3195, 295, 10654, 16137, 13, 1171, 1365, 11, 291, 393, 380, 445, 2016, 604, 2372, 295, 1281, 322, 604, 2372, 295, 4982, 11, 51476], "temperature": 0.0, "avg_logprob": -0.13899844033377512, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0011104008881375194}, {"id": 227, "seek": 128944, "start": 1312.48, "end": 1317.2, "text": " apparently. I don't know why. That would be wrong. So, imagine you have some, some function that", "tokens": [51516, 7970, 13, 286, 500, 380, 458, 983, 13, 663, 576, 312, 2085, 13, 407, 11, 3811, 291, 362, 512, 11, 512, 2445, 300, 51752], "temperature": 0.0, "avg_logprob": -0.13899844033377512, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0011104008881375194}, {"id": 228, "seek": 131720, "start": 1317.2, "end": 1321.68, "text": " does the pouring. So, take some waters, take some grounds and, and does, and pours water over the", "tokens": [50364, 775, 264, 20450, 13, 407, 11, 747, 512, 12975, 11, 747, 512, 19196, 293, 11, 293, 775, 11, 293, 2016, 82, 1281, 670, 264, 50588], "temperature": 0.0, "avg_logprob": -0.1076120541790339, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.001383124035783112}, {"id": 229, "seek": 131720, "start": 1321.68, "end": 1326.32, "text": " grounds. So, this function can easily lead us to an illegal state. So, you can just choose the wrong", "tokens": [50588, 19196, 13, 407, 11, 341, 2445, 393, 3612, 1477, 505, 281, 364, 11905, 1785, 13, 407, 11, 291, 393, 445, 2826, 264, 2085, 50820], "temperature": 0.0, "avg_logprob": -0.1076120541790339, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.001383124035783112}, {"id": 230, "seek": 131720, "start": 1326.32, "end": 1331.04, "text": " ratio of water and grounds. And there you go. You have a wrong, a wrong state and a coffee that was,", "tokens": [50820, 8509, 295, 1281, 293, 19196, 13, 400, 456, 291, 352, 13, 509, 362, 257, 2085, 11, 257, 2085, 1785, 293, 257, 4982, 300, 390, 11, 51056], "temperature": 0.0, "avg_logprob": -0.1076120541790339, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.001383124035783112}, {"id": 231, "seek": 131720, "start": 1331.04, "end": 1336.4, "text": " that was spoiled by too much water or too little water or whatever. And so, we can do something", "tokens": [51056, 300, 390, 32439, 538, 886, 709, 1281, 420, 886, 707, 1281, 420, 2035, 13, 400, 370, 11, 321, 393, 360, 746, 51324], "temperature": 0.0, "avg_logprob": -0.1076120541790339, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.001383124035783112}, {"id": 232, "seek": 131720, "start": 1336.4, "end": 1343.6000000000001, "text": " like this. So, we define a new type called tasty ratio. And we only want to allow tasty ratios", "tokens": [51324, 411, 341, 13, 407, 11, 321, 6964, 257, 777, 2010, 1219, 11535, 8509, 13, 400, 321, 787, 528, 281, 2089, 11535, 32435, 51684], "temperature": 0.0, "avg_logprob": -0.1076120541790339, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.001383124035783112}, {"id": 233, "seek": 134360, "start": 1343.6, "end": 1348.6399999999999, "text": " in our, in our function. And this seems that, like, that would be kind of better, because", "tokens": [50364, 294, 527, 11, 294, 527, 2445, 13, 400, 341, 2544, 300, 11, 411, 11, 300, 576, 312, 733, 295, 1101, 11, 570, 50616], "temperature": 0.0, "avg_logprob": -0.1075114267213004, "compression_ratio": 1.7014388489208634, "no_speech_prob": 0.004037117585539818}, {"id": 234, "seek": 134360, "start": 1348.6399999999999, "end": 1352.8, "text": " here we're explicit about what, what we actually want to achieve. But not really, because the", "tokens": [50616, 510, 321, 434, 13691, 466, 437, 11, 437, 321, 767, 528, 281, 4584, 13, 583, 406, 534, 11, 570, 264, 50824], "temperature": 0.0, "avg_logprob": -0.1075114267213004, "compression_ratio": 1.7014388489208634, "no_speech_prob": 0.004037117585539818}, {"id": 235, "seek": 134360, "start": 1352.8, "end": 1357.36, "text": " definition of tasty ratio is pretty much the same thing. You just moved, sorry, you just shuffled", "tokens": [50824, 7123, 295, 11535, 8509, 307, 1238, 709, 264, 912, 551, 13, 509, 445, 4259, 11, 2597, 11, 291, 445, 402, 33974, 51052], "temperature": 0.0, "avg_logprob": -0.1075114267213004, "compression_ratio": 1.7014388489208634, "no_speech_prob": 0.004037117585539818}, {"id": 236, "seek": 134360, "start": 1357.36, "end": 1363.84, "text": " around your problem into another place. You still can create tasty ratio instances with the wrong", "tokens": [51052, 926, 428, 1154, 666, 1071, 1081, 13, 509, 920, 393, 1884, 11535, 8509, 14519, 365, 264, 2085, 51376], "temperature": 0.0, "avg_logprob": -0.1075114267213004, "compression_ratio": 1.7014388489208634, "no_speech_prob": 0.004037117585539818}, {"id": 237, "seek": 134360, "start": 1363.84, "end": 1370.32, "text": " proportion of water and grounds. And so, although we claim that tasty ratio is a valid input,", "tokens": [51376, 16068, 295, 1281, 293, 19196, 13, 400, 370, 11, 4878, 321, 3932, 300, 11535, 8509, 307, 257, 7363, 4846, 11, 51700], "temperature": 0.0, "avg_logprob": -0.1075114267213004, "compression_ratio": 1.7014388489208634, "no_speech_prob": 0.004037117585539818}, {"id": 238, "seek": 137032, "start": 1370.32, "end": 1375.4399999999998, "text": " we do not enforce it in any way. So, it's, again, another illegal state that's waiting to happen.", "tokens": [50364, 321, 360, 406, 24825, 309, 294, 604, 636, 13, 407, 11, 309, 311, 11, 797, 11, 1071, 11905, 1785, 300, 311, 3806, 281, 1051, 13, 50620], "temperature": 0.0, "avg_logprob": -0.0979031491023238, "compression_ratio": 1.6593886462882097, "no_speech_prob": 0.010169770568609238}, {"id": 239, "seek": 137032, "start": 1376.32, "end": 1381.28, "text": " And since it can be represented in our system, most likely someone at some point will create an", "tokens": [50664, 400, 1670, 309, 393, 312, 10379, 294, 527, 1185, 11, 881, 3700, 1580, 412, 512, 935, 486, 1884, 364, 50912], "temperature": 0.0, "avg_logprob": -0.0979031491023238, "compression_ratio": 1.6593886462882097, "no_speech_prob": 0.010169770568609238}, {"id": 240, "seek": 137032, "start": 1381.28, "end": 1388.8, "text": " illegal instance of tasty ratio and something will be broken. And, and so, in this case, though,", "tokens": [50912, 11905, 5197, 295, 11535, 8509, 293, 746, 486, 312, 5463, 13, 400, 11, 293, 370, 11, 294, 341, 1389, 11, 1673, 11, 51288], "temperature": 0.0, "avg_logprob": -0.0979031491023238, "compression_ratio": 1.6593886462882097, "no_speech_prob": 0.010169770568609238}, {"id": 241, "seek": 137032, "start": 1388.8, "end": 1393.4399999999998, "text": " we have so many illegal states, because most, most combinations of water and grounds will", "tokens": [51288, 321, 362, 370, 867, 11905, 4368, 11, 570, 881, 11, 881, 21267, 295, 1281, 293, 19196, 486, 51520], "temperature": 0.0, "avg_logprob": -0.0979031491023238, "compression_ratio": 1.6593886462882097, "no_speech_prob": 0.010169770568609238}, {"id": 242, "seek": 139344, "start": 1393.44, "end": 1400.0, "text": " probably be illegal. So, our state space is just full of illegal, illegal, illegal states. And just", "tokens": [50364, 1391, 312, 11905, 13, 407, 11, 527, 1785, 1901, 307, 445, 1577, 295, 11905, 11, 11905, 11, 11905, 4368, 13, 400, 445, 50692], "temperature": 0.0, "avg_logprob": -0.09907006795427441, "compression_ratio": 1.9090909090909092, "no_speech_prob": 0.009551717899739742}, {"id": 243, "seek": 139344, "start": 1400.0, "end": 1406.0, "text": " a few small number of possible, comparatively small number of, of combinations of, of water and", "tokens": [50692, 257, 1326, 1359, 1230, 295, 1944, 11, 6311, 19020, 1359, 1230, 295, 11, 295, 21267, 295, 11, 295, 1281, 293, 50992], "temperature": 0.0, "avg_logprob": -0.09907006795427441, "compression_ratio": 1.9090909090909092, "no_speech_prob": 0.009551717899739742}, {"id": 244, "seek": 139344, "start": 1406.0, "end": 1410.96, "text": " grounds are actually legal. And what we want to achieve is to only be able to write down the", "tokens": [50992, 19196, 366, 767, 5089, 13, 400, 437, 321, 528, 281, 4584, 307, 281, 787, 312, 1075, 281, 2464, 760, 264, 51240], "temperature": 0.0, "avg_logprob": -0.09907006795427441, "compression_ratio": 1.9090909090909092, "no_speech_prob": 0.009551717899739742}, {"id": 245, "seek": 139344, "start": 1410.96, "end": 1415.8400000000001, "text": " legal combinations and making, writing all other combinations completely impossible. That's, that's", "tokens": [51240, 5089, 21267, 293, 1455, 11, 3579, 439, 661, 21267, 2584, 6243, 13, 663, 311, 11, 300, 311, 51484], "temperature": 0.0, "avg_logprob": -0.09907006795427441, "compression_ratio": 1.9090909090909092, "no_speech_prob": 0.009551717899739742}, {"id": 246, "seek": 139344, "start": 1415.8400000000001, "end": 1423.04, "text": " our goal. So, so basically what we want is some kind of invariant on tasty ratio and invariant", "tokens": [51484, 527, 3387, 13, 407, 11, 370, 1936, 437, 321, 528, 307, 512, 733, 295, 33270, 394, 322, 11535, 8509, 293, 33270, 394, 51844], "temperature": 0.0, "avg_logprob": -0.09907006795427441, "compression_ratio": 1.9090909090909092, "no_speech_prob": 0.009551717899739742}, {"id": 247, "seek": 142304, "start": 1423.04, "end": 1427.84, "text": " that, that tells us that water and grounds are in the right proportion, proportion. And we don't", "tokens": [50364, 300, 11, 300, 5112, 505, 300, 1281, 293, 19196, 366, 294, 264, 558, 16068, 11, 16068, 13, 400, 321, 500, 380, 50604], "temperature": 0.0, "avg_logprob": -0.1085691852169437, "compression_ratio": 1.77602523659306, "no_speech_prob": 0.0024829285684973}, {"id": 248, "seek": 142304, "start": 1427.84, "end": 1432.1599999999999, "text": " want to be checking it all over, over the place. We don't want to do defensive programming and", "tokens": [50604, 528, 281, 312, 8568, 309, 439, 670, 11, 670, 264, 1081, 13, 492, 500, 380, 528, 281, 360, 16468, 9410, 293, 50820], "temperature": 0.0, "avg_logprob": -0.1085691852169437, "compression_ratio": 1.77602523659306, "no_speech_prob": 0.0024829285684973}, {"id": 249, "seek": 142304, "start": 1432.1599999999999, "end": 1437.76, "text": " kind of sprinkle our code with e-falses and exceptions and the like. So, so ideally, so", "tokens": [50820, 733, 295, 24745, 527, 3089, 365, 308, 12, 69, 1124, 279, 293, 22847, 293, 264, 411, 13, 407, 11, 370, 22915, 11, 370, 51100], "temperature": 0.0, "avg_logprob": -0.1085691852169437, "compression_ratio": 1.77602523659306, "no_speech_prob": 0.0024829285684973}, {"id": 250, "seek": 142304, "start": 1437.76, "end": 1442.72, "text": " whenever we have an instance of tasty ratio, it has to be, has to be correct and nothing else", "tokens": [51100, 5699, 321, 362, 364, 5197, 295, 11535, 8509, 11, 309, 575, 281, 312, 11, 575, 281, 312, 3006, 293, 1825, 1646, 51348], "temperature": 0.0, "avg_logprob": -0.1085691852169437, "compression_ratio": 1.77602523659306, "no_speech_prob": 0.0024829285684973}, {"id": 251, "seek": 142304, "start": 1442.72, "end": 1447.2, "text": " should be impossible. But unlike the invariant of coffee, of the coffee order, which was kind of", "tokens": [51348, 820, 312, 6243, 13, 583, 8343, 264, 33270, 394, 295, 4982, 11, 295, 264, 4982, 1668, 11, 597, 390, 733, 295, 51572], "temperature": 0.0, "avg_logprob": -0.1085691852169437, "compression_ratio": 1.77602523659306, "no_speech_prob": 0.0024829285684973}, {"id": 252, "seek": 142304, "start": 1447.2, "end": 1451.6, "text": " simple, is that Irish, Irish coffee must have cream and whiskey. This invariant is, is a bit", "tokens": [51572, 2199, 11, 307, 300, 16801, 11, 16801, 4982, 1633, 362, 4689, 293, 34648, 13, 639, 33270, 394, 307, 11, 307, 257, 857, 51792], "temperature": 0.0, "avg_logprob": -0.1085691852169437, "compression_ratio": 1.77602523659306, "no_speech_prob": 0.0024829285684973}, {"id": 253, "seek": 145160, "start": 1451.6, "end": 1456.9599999999998, "text": " trickier to get right. And just using algebraic data types, you probably won't be able to easily", "tokens": [50364, 4282, 811, 281, 483, 558, 13, 400, 445, 1228, 21989, 299, 1412, 3467, 11, 291, 1391, 1582, 380, 312, 1075, 281, 3612, 50632], "temperature": 0.0, "avg_logprob": -0.14518855412801107, "compression_ratio": 1.6925795053003534, "no_speech_prob": 0.009607448242604733}, {"id": 254, "seek": 145160, "start": 1457.52, "end": 1462.0, "text": " enforce it in the types. Correct me if I'm wrong if you have a way of doing that, but probably", "tokens": [50660, 24825, 309, 294, 264, 3467, 13, 12753, 385, 498, 286, 478, 2085, 498, 291, 362, 257, 636, 295, 884, 300, 11, 457, 1391, 50884], "temperature": 0.0, "avg_logprob": -0.14518855412801107, "compression_ratio": 1.6925795053003534, "no_speech_prob": 0.009607448242604733}, {"id": 255, "seek": 145160, "start": 1462.0, "end": 1466.6399999999999, "text": " not likely and won't be worth it. So instead we're going to use smart constructor. So smart", "tokens": [50884, 406, 3700, 293, 1582, 380, 312, 3163, 309, 13, 407, 2602, 321, 434, 516, 281, 764, 4069, 47479, 13, 407, 4069, 51116], "temperature": 0.0, "avg_logprob": -0.14518855412801107, "compression_ratio": 1.6925795053003534, "no_speech_prob": 0.009607448242604733}, {"id": 256, "seek": 145160, "start": 1466.6399999999999, "end": 1472.7199999999998, "text": " constructor basically limits the way we can, we can build instances of our, of our values. So this", "tokens": [51116, 47479, 1936, 10406, 264, 636, 321, 393, 11, 321, 393, 1322, 14519, 295, 527, 11, 295, 527, 4190, 13, 407, 341, 51420], "temperature": 0.0, "avg_logprob": -0.14518855412801107, "compression_ratio": 1.6925795053003534, "no_speech_prob": 0.009607448242604733}, {"id": 257, "seek": 145160, "start": 1472.7199999999998, "end": 1477.1999999999998, "text": " is just called a specific way, but most languages have some equivalent of this. So first of all,", "tokens": [51420, 307, 445, 1219, 257, 2685, 636, 11, 457, 881, 8650, 362, 512, 10344, 295, 341, 13, 407, 700, 295, 439, 11, 51644], "temperature": 0.0, "avg_logprob": -0.14518855412801107, "compression_ratio": 1.6925795053003534, "no_speech_prob": 0.009607448242604733}, {"id": 258, "seek": 147720, "start": 1477.28, "end": 1482.96, "text": " we, we mark our constructor as private. So we can no longer instantiate instances of tasty", "tokens": [50368, 321, 11, 321, 1491, 527, 47479, 382, 4551, 13, 407, 321, 393, 572, 2854, 9836, 13024, 14519, 295, 11535, 50652], "temperature": 0.0, "avg_logprob": -0.0939545361500866, "compression_ratio": 1.868, "no_speech_prob": 0.004438483156263828}, {"id": 259, "seek": 147720, "start": 1482.96, "end": 1490.0, "text": " ratio without directly from the constructor. And then we create our own legal, our own smart", "tokens": [50652, 8509, 1553, 3838, 490, 264, 47479, 13, 400, 550, 321, 1884, 527, 1065, 5089, 11, 527, 1065, 4069, 51004], "temperature": 0.0, "avg_logprob": -0.0939545361500866, "compression_ratio": 1.868, "no_speech_prob": 0.004438483156263828}, {"id": 260, "seek": 147720, "start": 1490.0, "end": 1495.52, "text": " constructor that, that requires that everything is legal. So the contract of the make function is", "tokens": [51004, 47479, 300, 11, 300, 7029, 300, 1203, 307, 5089, 13, 407, 264, 4364, 295, 264, 652, 2445, 307, 51280], "temperature": 0.0, "avg_logprob": -0.0939545361500866, "compression_ratio": 1.868, "no_speech_prob": 0.004438483156263828}, {"id": 261, "seek": 147720, "start": 1495.52, "end": 1500.64, "text": " that it can take any inputs, but it will only produce a tasty ratio only if the inputs are", "tokens": [51280, 300, 309, 393, 747, 604, 15743, 11, 457, 309, 486, 787, 5258, 257, 11535, 8509, 787, 498, 264, 15743, 366, 51536], "temperature": 0.0, "avg_logprob": -0.0939545361500866, "compression_ratio": 1.868, "no_speech_prob": 0.004438483156263828}, {"id": 262, "seek": 147720, "start": 1500.64, "end": 1504.8, "text": " actually valid. And nothing else is possible. And this will be the only way to construct tasty", "tokens": [51536, 767, 7363, 13, 400, 1825, 1646, 307, 1944, 13, 400, 341, 486, 312, 264, 787, 636, 281, 7690, 11535, 51744], "temperature": 0.0, "avg_logprob": -0.0939545361500866, "compression_ratio": 1.868, "no_speech_prob": 0.004438483156263828}, {"id": 263, "seek": 150480, "start": 1504.8, "end": 1512.3999999999999, "text": " ratios in our, in our program. And so the logic itself is probably not that complicated. So we", "tokens": [50364, 32435, 294, 527, 11, 294, 527, 1461, 13, 400, 370, 264, 9952, 2564, 307, 1391, 406, 300, 6179, 13, 407, 321, 50744], "temperature": 0.0, "avg_logprob": -0.10904984725149054, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.0012211831053718925}, {"id": 264, "seek": 150480, "start": 1512.3999999999999, "end": 1517.84, "text": " just verify the, verify the right amounts. But it is crucial to get this right. So this is kind of", "tokens": [50744, 445, 16888, 264, 11, 16888, 264, 558, 11663, 13, 583, 309, 307, 11462, 281, 483, 341, 558, 13, 407, 341, 307, 733, 295, 51016], "temperature": 0.0, "avg_logprob": -0.10904984725149054, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.0012211831053718925}, {"id": 265, "seek": 150480, "start": 1517.84, "end": 1523.04, "text": " the safe kernel that you have in your program that users will now assume is correct and can", "tokens": [51016, 264, 3273, 28256, 300, 291, 362, 294, 428, 1461, 300, 5022, 486, 586, 6552, 307, 3006, 293, 393, 51276], "temperature": 0.0, "avg_logprob": -0.10904984725149054, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.0012211831053718925}, {"id": 266, "seek": 150480, "start": 1523.04, "end": 1531.04, "text": " rely on in all other places. So if you got this right, people can, can rely on this invariant", "tokens": [51276, 10687, 322, 294, 439, 661, 3190, 13, 407, 498, 291, 658, 341, 558, 11, 561, 393, 11, 393, 10687, 322, 341, 33270, 394, 51676], "temperature": 0.0, "avg_logprob": -0.10904984725149054, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.0012211831053718925}, {"id": 267, "seek": 153104, "start": 1531.04, "end": 1536.1599999999999, "text": " now for every place where they stumble upon tasty ratio. So now after, after making the smart", "tokens": [50364, 586, 337, 633, 1081, 689, 436, 41302, 3564, 11535, 8509, 13, 407, 586, 934, 11, 934, 1455, 264, 4069, 50620], "temperature": 0.0, "avg_logprob": -0.11104929222250884, "compression_ratio": 1.859437751004016, "no_speech_prob": 0.002111688256263733}, {"id": 268, "seek": 153104, "start": 1536.1599999999999, "end": 1541.36, "text": " constructor and, and forbidding the creation of tasty ratio without, without calling the smart", "tokens": [50620, 47479, 293, 11, 293, 34117, 3584, 264, 8016, 295, 11535, 8509, 1553, 11, 1553, 5141, 264, 4069, 50880], "temperature": 0.0, "avg_logprob": -0.11104929222250884, "compression_ratio": 1.859437751004016, "no_speech_prob": 0.002111688256263733}, {"id": 269, "seek": 153104, "start": 1541.36, "end": 1546.3999999999999, "text": " constructor, now the, the, this function is, is safe. It actually does what, what it promises.", "tokens": [50880, 47479, 11, 586, 264, 11, 264, 11, 341, 2445, 307, 11, 307, 3273, 13, 467, 767, 775, 437, 11, 437, 309, 16403, 13, 51132], "temperature": 0.0, "avg_logprob": -0.11104929222250884, "compression_ratio": 1.859437751004016, "no_speech_prob": 0.002111688256263733}, {"id": 270, "seek": 153104, "start": 1546.3999999999999, "end": 1550.6399999999999, "text": " You cannot call it with an illegal tasty ratio because there are no tasty ratios that are", "tokens": [51132, 509, 2644, 818, 309, 365, 364, 11905, 11535, 8509, 570, 456, 366, 572, 11535, 32435, 300, 366, 51344], "temperature": 0.0, "avg_logprob": -0.11104929222250884, "compression_ratio": 1.859437751004016, "no_speech_prob": 0.002111688256263733}, {"id": 271, "seek": 153104, "start": 1550.6399999999999, "end": 1557.76, "text": " illegal in our system. It's just not possible anymore. So more generally, generally smart", "tokens": [51344, 11905, 294, 527, 1185, 13, 467, 311, 445, 406, 1944, 3602, 13, 407, 544, 5101, 11, 5101, 4069, 51700], "temperature": 0.0, "avg_logprob": -0.11104929222250884, "compression_ratio": 1.859437751004016, "no_speech_prob": 0.002111688256263733}, {"id": 272, "seek": 155776, "start": 1557.76, "end": 1563.92, "text": " constructors are a great way of enforcing diverse invariants. So we can find many examples. So in", "tokens": [50364, 7690, 830, 366, 257, 869, 636, 295, 25495, 2175, 9521, 33270, 1719, 13, 407, 321, 393, 915, 867, 5110, 13, 407, 294, 50672], "temperature": 0.0, "avg_logprob": -0.13699135898558562, "compression_ratio": 1.6888111888111887, "no_speech_prob": 0.009661037474870682}, {"id": 273, "seek": 155776, "start": 1563.92, "end": 1568.48, "text": " this case, our signature is, is kind of, again, we have a wishful comment about something about age", "tokens": [50672, 341, 1389, 11, 527, 13397, 307, 11, 307, 733, 295, 11, 797, 11, 321, 362, 257, 3172, 906, 2871, 466, 746, 466, 3205, 50900], "temperature": 0.0, "avg_logprob": -0.13699135898558562, "compression_ratio": 1.6888111888111887, "no_speech_prob": 0.009661037474870682}, {"id": 274, "seek": 155776, "start": 1568.48, "end": 1572.8799999999999, "text": " and, and, and alcohol restrictions, but, but it's not really an invariant that's enforced", "tokens": [50900, 293, 11, 293, 11, 293, 7658, 14191, 11, 457, 11, 457, 309, 311, 406, 534, 364, 33270, 394, 300, 311, 40953, 51120], "temperature": 0.0, "avg_logprob": -0.13699135898558562, "compression_ratio": 1.6888111888111887, "no_speech_prob": 0.009661037474870682}, {"id": 275, "seek": 155776, "start": 1572.8799999999999, "end": 1577.92, "text": " anywhere. Just wishful thinking. But if you apply the correct smart constructor, you can probably", "tokens": [51120, 4992, 13, 1449, 3172, 906, 1953, 13, 583, 498, 291, 3079, 264, 3006, 4069, 47479, 11, 291, 393, 1391, 51372], "temperature": 0.0, "avg_logprob": -0.13699135898558562, "compression_ratio": 1.6888111888111887, "no_speech_prob": 0.009661037474870682}, {"id": 276, "seek": 155776, "start": 1577.92, "end": 1582.8, "text": " get it, get this, this type that will enforce it. It's not possible anymore to, to do the illegal", "tokens": [51372, 483, 309, 11, 483, 341, 11, 341, 2010, 300, 486, 24825, 309, 13, 467, 311, 406, 1944, 3602, 281, 11, 281, 360, 264, 11905, 51616], "temperature": 0.0, "avg_logprob": -0.13699135898558562, "compression_ratio": 1.6888111888111887, "no_speech_prob": 0.009661037474870682}, {"id": 277, "seek": 158280, "start": 1582.8, "end": 1587.9199999999998, "text": " action of, in this case, pouring whiskey into Irish coffee. And you can have more examples. So again,", "tokens": [50364, 3069, 295, 11, 294, 341, 1389, 11, 20450, 34648, 666, 16801, 4982, 13, 400, 291, 393, 362, 544, 5110, 13, 407, 797, 11, 50620], "temperature": 0.0, "avg_logprob": -0.13190752772961634, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.01094583049416542}, {"id": 278, "seek": 158280, "start": 1587.9199999999998, "end": 1592.72, "text": " the first, the, the first, the top signature is always some wishful thinking and a type that", "tokens": [50620, 264, 700, 11, 264, 11, 264, 700, 11, 264, 1192, 13397, 307, 1009, 512, 3172, 906, 1953, 293, 257, 2010, 300, 50860], "temperature": 0.0, "avg_logprob": -0.13190752772961634, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.01094583049416542}, {"id": 279, "seek": 158280, "start": 1592.72, "end": 1597.6, "text": " doesn't really, really represent well what, what we want. And the second is, is a corrected version", "tokens": [50860, 1177, 380, 534, 11, 534, 2906, 731, 437, 11, 437, 321, 528, 13, 400, 264, 1150, 307, 11, 307, 257, 31687, 3037, 51104], "temperature": 0.0, "avg_logprob": -0.13190752772961634, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.01094583049416542}, {"id": 280, "seek": 158280, "start": 1597.6, "end": 1603.12, "text": " where we enforce something in our, on our type and, and usually we close it off with a smart", "tokens": [51104, 689, 321, 24825, 746, 294, 527, 11, 322, 527, 2010, 293, 11, 293, 2673, 321, 1998, 309, 766, 365, 257, 4069, 51380], "temperature": 0.0, "avg_logprob": -0.13190752772961634, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.01094583049416542}, {"id": 281, "seek": 158280, "start": 1603.12, "end": 1608.0, "text": " constructor so that nobody can access the, the illegal states. And notice that we didn't make", "tokens": [51380, 47479, 370, 300, 5079, 393, 2105, 264, 11, 264, 11905, 4368, 13, 400, 3449, 300, 321, 994, 380, 652, 51624], "temperature": 0.0, "avg_logprob": -0.13190752772961634, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.01094583049416542}, {"id": 282, "seek": 160800, "start": 1608.08, "end": 1615.04, "text": " tasty ratio any smaller by, by creating the, the, the smart constructor. But we can, we have an", "tokens": [50368, 11535, 8509, 604, 4356, 538, 11, 538, 4084, 264, 11, 264, 11, 264, 4069, 47479, 13, 583, 321, 393, 11, 321, 362, 364, 50716], "temperature": 0.0, "avg_logprob": -0.10998007456461588, "compression_ratio": 1.8154981549815499, "no_speech_prob": 0.014179889112710953}, {"id": 283, "seek": 160800, "start": 1615.04, "end": 1619.28, "text": " illusion that tasty ratio is now a smaller value that doesn't have illegal states just because we", "tokens": [50716, 18854, 300, 11535, 8509, 307, 586, 257, 4356, 2158, 300, 1177, 380, 362, 11905, 4368, 445, 570, 321, 50928], "temperature": 0.0, "avg_logprob": -0.10998007456461588, "compression_ratio": 1.8154981549815499, "no_speech_prob": 0.014179889112710953}, {"id": 284, "seek": 160800, "start": 1619.28, "end": 1624.4, "text": " made it impossible to create them. So we can program as if the state space really is now smaller and", "tokens": [50928, 1027, 309, 6243, 281, 1884, 552, 13, 407, 321, 393, 1461, 382, 498, 264, 1785, 1901, 534, 307, 586, 4356, 293, 51184], "temperature": 0.0, "avg_logprob": -0.10998007456461588, "compression_ratio": 1.8154981549815499, "no_speech_prob": 0.014179889112710953}, {"id": 285, "seek": 160800, "start": 1624.4, "end": 1629.2, "text": " illegal states are unrepresentable. And again, it's very important to get the smart constructors", "tokens": [51184, 11905, 4368, 366, 517, 19919, 11662, 712, 13, 400, 797, 11, 309, 311, 588, 1021, 281, 483, 264, 4069, 7690, 830, 51424], "temperature": 0.0, "avg_logprob": -0.10998007456461588, "compression_ratio": 1.8154981549815499, "no_speech_prob": 0.014179889112710953}, {"id": 286, "seek": 160800, "start": 1629.2, "end": 1634.4, "text": " right. So it's a one-time effort, which is probably worth it because you just cover it in one space,", "tokens": [51424, 558, 13, 407, 309, 311, 257, 472, 12, 3766, 4630, 11, 597, 307, 1391, 3163, 309, 570, 291, 445, 2060, 309, 294, 472, 1901, 11, 51684], "temperature": 0.0, "avg_logprob": -0.10998007456461588, "compression_ratio": 1.8154981549815499, "no_speech_prob": 0.014179889112710953}, {"id": 287, "seek": 163440, "start": 1635.0400000000002, "end": 1640.96, "text": " and then all of your flows can, can rely on the fact that the invariant, all the invariance you", "tokens": [50396, 293, 550, 439, 295, 428, 12867, 393, 11, 393, 10687, 322, 264, 1186, 300, 264, 33270, 394, 11, 439, 264, 33270, 719, 291, 50692], "temperature": 0.0, "avg_logprob": -0.13230236789636446, "compression_ratio": 1.816793893129771, "no_speech_prob": 0.0020398057531565428}, {"id": 288, "seek": 163440, "start": 1640.96, "end": 1647.76, "text": " want are actually enforced. So smart constructors are a great way to enforce diverse invariance", "tokens": [50692, 528, 366, 767, 40953, 13, 407, 4069, 7690, 830, 366, 257, 869, 636, 281, 24825, 9521, 33270, 719, 51032], "temperature": 0.0, "avg_logprob": -0.13230236789636446, "compression_ratio": 1.816793893129771, "no_speech_prob": 0.0020398057531565428}, {"id": 289, "seek": 163440, "start": 1647.76, "end": 1652.8000000000002, "text": " and with compiler assistance. So, assistance. So the moment you got it right from there on,", "tokens": [51032, 293, 365, 31958, 9683, 13, 407, 11, 9683, 13, 407, 264, 1623, 291, 658, 309, 558, 490, 456, 322, 11, 51284], "temperature": 0.0, "avg_logprob": -0.13230236789636446, "compression_ratio": 1.816793893129771, "no_speech_prob": 0.0020398057531565428}, {"id": 290, "seek": 163440, "start": 1652.8000000000002, "end": 1657.8400000000001, "text": " you know that the compiler won't let anyone bypass this invariant that you're trying to enforce.", "tokens": [51284, 291, 458, 300, 264, 31958, 1582, 380, 718, 2878, 24996, 341, 33270, 394, 300, 291, 434, 1382, 281, 24825, 13, 51536], "temperature": 0.0, "avg_logprob": -0.13230236789636446, "compression_ratio": 1.816793893129771, "no_speech_prob": 0.0020398057531565428}, {"id": 291, "seek": 163440, "start": 1658.88, "end": 1663.0400000000002, "text": " And as a bonus, our type signatures are becoming, becoming kind of self-documenting because our", "tokens": [51588, 400, 382, 257, 10882, 11, 527, 2010, 32322, 366, 5617, 11, 5617, 733, 295, 2698, 12, 67, 30439, 278, 570, 527, 51796], "temperature": 0.0, "avg_logprob": -0.13230236789636446, "compression_ratio": 1.816793893129771, "no_speech_prob": 0.0020398057531565428}, {"id": 292, "seek": 166304, "start": 1663.04, "end": 1667.28, "text": " types are now representing actual invariance that we care directly, directly in our code. And it's", "tokens": [50364, 3467, 366, 586, 13460, 3539, 33270, 719, 300, 321, 1127, 3838, 11, 3838, 294, 527, 3089, 13, 400, 309, 311, 50576], "temperature": 0.0, "avg_logprob": -0.10266533413448849, "compression_ratio": 1.7321428571428572, "no_speech_prob": 0.0006342190899886191}, {"id": 293, "seek": 166304, "start": 1667.28, "end": 1671.68, "text": " better than comments because they will never go out of date. The compiler is there to keep everything", "tokens": [50576, 1101, 813, 3053, 570, 436, 486, 1128, 352, 484, 295, 4002, 13, 440, 31958, 307, 456, 281, 1066, 1203, 50796], "temperature": 0.0, "avg_logprob": -0.10266533413448849, "compression_ratio": 1.7321428571428572, "no_speech_prob": 0.0006342190899886191}, {"id": 294, "seek": 166304, "start": 1671.68, "end": 1677.44, "text": " in check. But we do have to be careful when defining smart constructors because, as I said,", "tokens": [50796, 294, 1520, 13, 583, 321, 360, 362, 281, 312, 5026, 562, 17827, 4069, 7690, 830, 570, 11, 382, 286, 848, 11, 51084], "temperature": 0.0, "avg_logprob": -0.10266533413448849, "compression_ratio": 1.7321428571428572, "no_speech_prob": 0.0006342190899886191}, {"id": 295, "seek": 166304, "start": 1677.44, "end": 1682.48, "text": " you have to get that function right. And so unlike algebraic data types where you are kind of correct", "tokens": [51084, 291, 362, 281, 483, 300, 2445, 558, 13, 400, 370, 8343, 21989, 299, 1412, 3467, 689, 291, 366, 733, 295, 3006, 51336], "temperature": 0.0, "avg_logprob": -0.10266533413448849, "compression_ratio": 1.7321428571428572, "no_speech_prob": 0.0006342190899886191}, {"id": 296, "seek": 166304, "start": 1682.48, "end": 1688.24, "text": " by construction, smart, smart constructors are usually have to do some unsafe work to make", "tokens": [51336, 538, 6435, 11, 4069, 11, 4069, 7690, 830, 366, 2673, 362, 281, 360, 512, 35948, 589, 281, 652, 51624], "temperature": 0.0, "avg_logprob": -0.10266533413448849, "compression_ratio": 1.7321428571428572, "no_speech_prob": 0.0006342190899886191}, {"id": 297, "seek": 168824, "start": 1688.24, "end": 1693.1200000000001, "text": " sure that everything else is safe. And so when possible, if you can represent something with", "tokens": [50364, 988, 300, 1203, 1646, 307, 3273, 13, 400, 370, 562, 1944, 11, 498, 291, 393, 2906, 746, 365, 50608], "temperature": 0.0, "avg_logprob": -0.1076809565226237, "compression_ratio": 1.5654008438818565, "no_speech_prob": 0.0008926304872147739}, {"id": 298, "seek": 168824, "start": 1693.1200000000001, "end": 1698.56, "text": " an algebraic data type, that's probably the preferred way. But when, when they work, smart", "tokens": [50608, 364, 21989, 299, 1412, 2010, 11, 300, 311, 1391, 264, 16494, 636, 13, 583, 562, 11, 562, 436, 589, 11, 4069, 50880], "temperature": 0.0, "avg_logprob": -0.1076809565226237, "compression_ratio": 1.5654008438818565, "no_speech_prob": 0.0008926304872147739}, {"id": 299, "seek": 168824, "start": 1698.56, "end": 1708.08, "text": " constructors are a great tool for excluding illegal states. So one, one last, last problem to", "tokens": [50880, 7690, 830, 366, 257, 869, 2290, 337, 49999, 11905, 4368, 13, 407, 472, 11, 472, 1036, 11, 1036, 1154, 281, 51356], "temperature": 0.0, "avg_logprob": -0.1076809565226237, "compression_ratio": 1.5654008438818565, "no_speech_prob": 0.0008926304872147739}, {"id": 300, "seek": 168824, "start": 1708.08, "end": 1715.92, "text": " tackle with a robot. So brewing coffee is, again, no surprise, a complicated process as well.", "tokens": [51356, 14896, 365, 257, 7881, 13, 407, 39019, 4982, 307, 11, 797, 11, 572, 6365, 11, 257, 6179, 1399, 382, 731, 13, 51748], "temperature": 0.0, "avg_logprob": -0.1076809565226237, "compression_ratio": 1.5654008438818565, "no_speech_prob": 0.0008926304872147739}, {"id": 301, "seek": 171592, "start": 1716.48, "end": 1722.0800000000002, "text": " And let's try to model a small part of brewing coffee. So here's one, one way to kind of", "tokens": [50392, 400, 718, 311, 853, 281, 2316, 257, 1359, 644, 295, 39019, 4982, 13, 407, 510, 311, 472, 11, 472, 636, 281, 733, 295, 50672], "temperature": 0.0, "avg_logprob": -0.10134497710636683, "compression_ratio": 1.7913385826771653, "no_speech_prob": 0.000634875672403723}, {"id": 302, "seek": 171592, "start": 1722.0800000000002, "end": 1726.96, "text": " model this, this process. So we have this, this kind of imperative interface that you might,", "tokens": [50672, 2316, 341, 11, 341, 1399, 13, 407, 321, 362, 341, 11, 341, 733, 295, 32490, 9226, 300, 291, 1062, 11, 50916], "temperature": 0.0, "avg_logprob": -0.10134497710636683, "compression_ratio": 1.7913385826771653, "no_speech_prob": 0.000634875672403723}, {"id": 303, "seek": 171592, "start": 1726.96, "end": 1733.52, "text": " you might expect for operating a robot with a bunch of kind of low-level commands that,", "tokens": [50916, 291, 1062, 2066, 337, 7447, 257, 7881, 365, 257, 3840, 295, 733, 295, 2295, 12, 12418, 16901, 300, 11, 51244], "temperature": 0.0, "avg_logprob": -0.10134497710636683, "compression_ratio": 1.7913385826771653, "no_speech_prob": 0.000634875672403723}, {"id": 304, "seek": 171592, "start": 1733.52, "end": 1737.76, "text": " that can be used for, for the brewing stage. And assuming that someone actually implemented", "tokens": [51244, 300, 393, 312, 1143, 337, 11, 337, 264, 39019, 3233, 13, 400, 11926, 300, 1580, 767, 12270, 51456], "temperature": 0.0, "avg_logprob": -0.10134497710636683, "compression_ratio": 1.7913385826771653, "no_speech_prob": 0.000634875672403723}, {"id": 305, "seek": 171592, "start": 1737.76, "end": 1742.8000000000002, "text": " this at the robot level, we can write the code for, for preparing for brewing, not the actual", "tokens": [51456, 341, 412, 264, 7881, 1496, 11, 321, 393, 2464, 264, 3089, 337, 11, 337, 10075, 337, 39019, 11, 406, 264, 3539, 51708], "temperature": 0.0, "avg_logprob": -0.10134497710636683, "compression_ratio": 1.7913385826771653, "no_speech_prob": 0.000634875672403723}, {"id": 306, "seek": 174280, "start": 1742.8799999999999, "end": 1746.96, "text": " brewing, but just the preparation. And so this looks pretty informative. We just call, call the", "tokens": [50368, 39019, 11, 457, 445, 264, 13081, 13, 400, 370, 341, 1542, 1238, 27759, 13, 492, 445, 818, 11, 818, 264, 50572], "temperature": 0.0, "avg_logprob": -0.16037296762271802, "compression_ratio": 1.6309012875536482, "no_speech_prob": 0.0018182307248935103}, {"id": 307, "seek": 174280, "start": 1746.96, "end": 1755.6, "text": " various actions in order. Anyone sees a bug here? So, disgustingly, we forgot to rinse the filter,", "tokens": [50572, 3683, 5909, 294, 1668, 13, 14643, 8194, 257, 7426, 510, 30, 407, 11, 17552, 356, 11, 321, 5298, 281, 27026, 264, 6608, 11, 51004], "temperature": 0.0, "avg_logprob": -0.16037296762271802, "compression_ratio": 1.6309012875536482, "no_speech_prob": 0.0018182307248935103}, {"id": 308, "seek": 174280, "start": 1755.6, "end": 1760.3999999999999, "text": " and now our users are going to drink this paper-tasting coffee, and, and probably we'll just", "tokens": [51004, 293, 586, 527, 5022, 366, 516, 281, 2822, 341, 3035, 12, 83, 30587, 4982, 11, 293, 11, 293, 1391, 321, 603, 445, 51244], "temperature": 0.0, "avg_logprob": -0.16037296762271802, "compression_ratio": 1.6309012875536482, "no_speech_prob": 0.0018182307248935103}, {"id": 309, "seek": 174280, "start": 1760.3999999999999, "end": 1766.72, "text": " throw our, quit our robot and, and, and we will lose customers. So, so the reputation of the", "tokens": [51244, 3507, 527, 11, 10366, 527, 7881, 293, 11, 293, 11, 293, 321, 486, 3624, 4581, 13, 407, 11, 370, 264, 13061, 295, 264, 51560], "temperature": 0.0, "avg_logprob": -0.16037296762271802, "compression_ratio": 1.6309012875536482, "no_speech_prob": 0.0018182307248935103}, {"id": 310, "seek": 176672, "start": 1766.8, "end": 1772.4, "text": " robot depends on it, and we'll, we just messed up a good cup of coffee. But, but more seriously,", "tokens": [50368, 7881, 5946, 322, 309, 11, 293, 321, 603, 11, 321, 445, 16507, 493, 257, 665, 4414, 295, 4982, 13, 583, 11, 457, 544, 6638, 11, 50648], "temperature": 0.0, "avg_logprob": -0.1320240078991606, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.0036338171921670437}, {"id": 311, "seek": 176672, "start": 1773.1200000000001, "end": 1778.4, "text": " this, this code is very, very open to, to potential bugs, bugs that, that is illegal states.", "tokens": [50684, 341, 11, 341, 3089, 307, 588, 11, 588, 1269, 281, 11, 281, 3995, 15120, 11, 15120, 300, 11, 300, 307, 11905, 4368, 13, 50948], "temperature": 0.0, "avg_logprob": -0.1320240078991606, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.0036338171921670437}, {"id": 312, "seek": 176672, "start": 1779.3600000000001, "end": 1784.24, "text": " So you can, you can forget action just like, just like I did right now with the filter answering.", "tokens": [50996, 407, 291, 393, 11, 291, 393, 2870, 3069, 445, 411, 11, 445, 411, 286, 630, 558, 586, 365, 264, 6608, 13430, 13, 51240], "temperature": 0.0, "avg_logprob": -0.1320240078991606, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.0036338171921670437}, {"id": 313, "seek": 176672, "start": 1784.24, "end": 1788.32, "text": " You can mix up the order. You can, you can duplicate actions. Everything can happen here. It's,", "tokens": [51240, 509, 393, 2890, 493, 264, 1668, 13, 509, 393, 11, 291, 393, 23976, 5909, 13, 5471, 393, 1051, 510, 13, 467, 311, 11, 51444], "temperature": 0.0, "avg_logprob": -0.1320240078991606, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.0036338171921670437}, {"id": 314, "seek": 176672, "start": 1788.32, "end": 1793.6000000000001, "text": " it's full of possible legal states. And if it's, if it's possible, we're most likely to hit it at", "tokens": [51444, 309, 311, 1577, 295, 1944, 5089, 4368, 13, 400, 498, 309, 311, 11, 498, 309, 311, 1944, 11, 321, 434, 881, 3700, 281, 2045, 309, 412, 51708], "temperature": 0.0, "avg_logprob": -0.1320240078991606, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.0036338171921670437}, {"id": 315, "seek": 179360, "start": 1793.6, "end": 1800.6399999999999, "text": " some point. Maybe a refactoring gone, gone wrong or something, something else will can go wrong.", "tokens": [50364, 512, 935, 13, 2704, 257, 1895, 578, 3662, 2780, 11, 2780, 2085, 420, 746, 11, 746, 1646, 486, 393, 352, 2085, 13, 50716], "temperature": 0.0, "avg_logprob": -0.10063119857541976, "compression_ratio": 1.7132616487455197, "no_speech_prob": 0.004399683326482773}, {"id": 316, "seek": 179360, "start": 1800.6399999999999, "end": 1806.48, "text": " And the problem is here that even if, if we do, do mix something up, the compiler won't help us.", "tokens": [50716, 400, 264, 1154, 307, 510, 300, 754, 498, 11, 498, 321, 360, 11, 360, 2890, 746, 493, 11, 264, 31958, 1582, 380, 854, 505, 13, 51008], "temperature": 0.0, "avg_logprob": -0.10063119857541976, "compression_ratio": 1.7132616487455197, "no_speech_prob": 0.004399683326482773}, {"id": 317, "seek": 179360, "start": 1806.48, "end": 1811.6799999999998, "text": " It doesn't know anything about it. So just compile fine and, and just be wrong. So again,", "tokens": [51008, 467, 1177, 380, 458, 1340, 466, 309, 13, 407, 445, 31413, 2489, 293, 11, 293, 445, 312, 2085, 13, 407, 797, 11, 51268], "temperature": 0.0, "avg_logprob": -0.10063119857541976, "compression_ratio": 1.7132616487455197, "no_speech_prob": 0.004399683326482773}, {"id": 318, "seek": 179360, "start": 1811.6799999999998, "end": 1815.6799999999998, "text": " this is our desired state space. It's quite simple. It doesn't really have many, many things that,", "tokens": [51268, 341, 307, 527, 14721, 1785, 1901, 13, 467, 311, 1596, 2199, 13, 467, 1177, 380, 534, 362, 867, 11, 867, 721, 300, 11, 51468], "temperature": 0.0, "avg_logprob": -0.10063119857541976, "compression_ratio": 1.7132616487455197, "no_speech_prob": 0.004399683326482773}, {"id": 319, "seek": 179360, "start": 1815.6799999999998, "end": 1822.3999999999999, "text": " that it has to do. But again, our actual code is open to various illegal state transitions that", "tokens": [51468, 300, 309, 575, 281, 360, 13, 583, 797, 11, 527, 3539, 3089, 307, 1269, 281, 3683, 11905, 1785, 23767, 300, 51804], "temperature": 0.0, "avg_logprob": -0.10063119857541976, "compression_ratio": 1.7132616487455197, "no_speech_prob": 0.004399683326482773}, {"id": 320, "seek": 182240, "start": 1822.4, "end": 1827.92, "text": " we can, we can make that we would like to avoid and make them compile time and possible to actually", "tokens": [50364, 321, 393, 11, 321, 393, 652, 300, 321, 576, 411, 281, 5042, 293, 652, 552, 31413, 565, 293, 1944, 281, 767, 50640], "temperature": 0.0, "avg_logprob": -0.13152009790593927, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.0009143755305558443}, {"id": 321, "seek": 182240, "start": 1827.92, "end": 1835.8400000000001, "text": " write down. So we can improve as well. So a big part of the problem here of the issue is that,", "tokens": [50640, 2464, 760, 13, 407, 321, 393, 3470, 382, 731, 13, 407, 257, 955, 644, 295, 264, 1154, 510, 295, 264, 2734, 307, 300, 11, 51036], "temperature": 0.0, "avg_logprob": -0.13152009790593927, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.0009143755305558443}, {"id": 322, "seek": 182240, "start": 1835.8400000000001, "end": 1840.5600000000002, "text": " is the imperative interface. It's, it's, it just tells us the actions we, we want to perform.", "tokens": [51036, 307, 264, 32490, 9226, 13, 467, 311, 11, 309, 311, 11, 309, 445, 5112, 505, 264, 5909, 321, 11, 321, 528, 281, 2042, 13, 51272], "temperature": 0.0, "avg_logprob": -0.13152009790593927, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.0009143755305558443}, {"id": 323, "seek": 182240, "start": 1840.5600000000002, "end": 1844.64, "text": " It doesn't have any information, very little information about the intent of this action", "tokens": [51272, 467, 1177, 380, 362, 604, 1589, 11, 588, 707, 1589, 466, 264, 8446, 295, 341, 3069, 51476], "temperature": 0.0, "avg_logprob": -0.13152009790593927, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.0009143755305558443}, {"id": 324, "seek": 182240, "start": 1844.64, "end": 1849.92, "text": " and the consequences of it. So, so if, if we have a unit return time of something, it doesn't", "tokens": [51476, 293, 264, 10098, 295, 309, 13, 407, 11, 370, 498, 11, 498, 321, 362, 257, 4985, 2736, 565, 295, 746, 11, 309, 1177, 380, 51740], "temperature": 0.0, "avg_logprob": -0.13152009790593927, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.0009143755305558443}, {"id": 325, "seek": 184992, "start": 1849.92, "end": 1854.48, "text": " really tell us much about what did we want to achieve or what actually happened. So, and so,", "tokens": [50364, 534, 980, 505, 709, 466, 437, 630, 321, 528, 281, 4584, 420, 437, 767, 2011, 13, 407, 11, 293, 370, 11, 50592], "temperature": 0.0, "avg_logprob": -0.1254620887863804, "compression_ratio": 1.8745874587458746, "no_speech_prob": 0.0008633228717371821}, {"id": 326, "seek": 184992, "start": 1854.48, "end": 1859.8400000000001, "text": " since so little is reflected in the types, it's, it's not, it's not a surprise that the compiler", "tokens": [50592, 1670, 370, 707, 307, 15502, 294, 264, 3467, 11, 309, 311, 11, 309, 311, 406, 11, 309, 311, 406, 257, 6365, 300, 264, 31958, 50860], "temperature": 0.0, "avg_logprob": -0.1254620887863804, "compression_ratio": 1.8745874587458746, "no_speech_prob": 0.0008633228717371821}, {"id": 327, "seek": 184992, "start": 1859.8400000000001, "end": 1864.0800000000002, "text": " can't really help us because the compiler works usually with types and that's, that's its way to", "tokens": [50860, 393, 380, 534, 854, 505, 570, 264, 31958, 1985, 2673, 365, 3467, 293, 300, 311, 11, 300, 311, 1080, 636, 281, 51072], "temperature": 0.0, "avg_logprob": -0.1254620887863804, "compression_ratio": 1.8745874587458746, "no_speech_prob": 0.0008633228717371821}, {"id": 328, "seek": 184992, "start": 1864.0800000000002, "end": 1868.5600000000002, "text": " support us. And so the solution will be to become more declarative. So we're leaving the", "tokens": [51072, 1406, 505, 13, 400, 370, 264, 3827, 486, 312, 281, 1813, 544, 16694, 1166, 13, 407, 321, 434, 5012, 264, 51296], "temperature": 0.0, "avg_logprob": -0.1254620887863804, "compression_ratio": 1.8745874587458746, "no_speech_prob": 0.0008633228717371821}, {"id": 329, "seek": 184992, "start": 1868.5600000000002, "end": 1872.88, "text": " imperative, imperative interface behind and, and trying to make it more declarative. So we start", "tokens": [51296, 32490, 11, 32490, 9226, 2261, 293, 11, 293, 1382, 281, 652, 309, 544, 16694, 1166, 13, 407, 321, 722, 51512], "temperature": 0.0, "avg_logprob": -0.1254620887863804, "compression_ratio": 1.8745874587458746, "no_speech_prob": 0.0008633228717371821}, {"id": 330, "seek": 184992, "start": 1872.88, "end": 1878.0, "text": " by just adding, adding expectations. So what, what, what we aim to achieve on every action. So,", "tokens": [51512, 538, 445, 5127, 11, 5127, 9843, 13, 407, 437, 11, 437, 11, 437, 321, 5939, 281, 4584, 322, 633, 3069, 13, 407, 11, 51768], "temperature": 0.0, "avg_logprob": -0.1254620887863804, "compression_ratio": 1.8745874587458746, "no_speech_prob": 0.0008633228717371821}, {"id": 331, "seek": 187800, "start": 1878.0, "end": 1883.68, "text": " for example, the place filter function now, once invoked, will return a filter placed value,", "tokens": [50364, 337, 1365, 11, 264, 1081, 6608, 2445, 586, 11, 1564, 1048, 9511, 11, 486, 2736, 257, 6608, 7074, 2158, 11, 50648], "temperature": 0.0, "avg_logprob": -0.12826765500582182, "compression_ratio": 1.84765625, "no_speech_prob": 0.0011839685030281544}, {"id": 332, "seek": 187800, "start": 1883.68, "end": 1889.2, "text": " which will correspond to the fact that the filter was indeed placed. And so on for all the other", "tokens": [50648, 597, 486, 6805, 281, 264, 1186, 300, 264, 6608, 390, 6451, 7074, 13, 400, 370, 322, 337, 439, 264, 661, 50924], "temperature": 0.0, "avg_logprob": -0.12826765500582182, "compression_ratio": 1.84765625, "no_speech_prob": 0.0011839685030281544}, {"id": 333, "seek": 187800, "start": 1889.2, "end": 1894.4, "text": " functions. And we're not done yet. So we have another, we do have some various prerequisites. So", "tokens": [50924, 6828, 13, 400, 321, 434, 406, 1096, 1939, 13, 407, 321, 362, 1071, 11, 321, 360, 362, 512, 3683, 38333, 15398, 3324, 13, 407, 51184], "temperature": 0.0, "avg_logprob": -0.12826765500582182, "compression_ratio": 1.84765625, "no_speech_prob": 0.0011839685030281544}, {"id": 334, "seek": 187800, "start": 1894.4, "end": 1899.68, "text": " we, there's some ordering that, that has to go on here that, that is otherwise illegal. And so", "tokens": [51184, 321, 11, 456, 311, 512, 21739, 300, 11, 300, 575, 281, 352, 322, 510, 300, 11, 300, 307, 5911, 11905, 13, 400, 370, 51448], "temperature": 0.0, "avg_logprob": -0.12826765500582182, "compression_ratio": 1.84765625, "no_speech_prob": 0.0011839685030281544}, {"id": 335, "seek": 187800, "start": 1899.68, "end": 1904.64, "text": " we're going to define prerequisites as function arguments. So placing a filter cannot occur", "tokens": [51448, 321, 434, 516, 281, 6964, 38333, 15398, 3324, 382, 2445, 12869, 13, 407, 17221, 257, 6608, 2644, 5160, 51696], "temperature": 0.0, "avg_logprob": -0.12826765500582182, "compression_ratio": 1.84765625, "no_speech_prob": 0.0011839685030281544}, {"id": 336, "seek": 190464, "start": 1904.72, "end": 1909.76, "text": " unless the filter was folded before. So we make the explicit in our function by requiring an", "tokens": [50368, 5969, 264, 6608, 390, 23940, 949, 13, 407, 321, 652, 264, 13691, 294, 527, 2445, 538, 24165, 364, 50620], "temperature": 0.0, "avg_logprob": -0.09041778730309528, "compression_ratio": 1.9036144578313252, "no_speech_prob": 0.001220736070536077}, {"id": 337, "seek": 190464, "start": 1909.76, "end": 1914.0800000000002, "text": " argument that the filter was actually folded. And the same thing goes for rinsing the filter,", "tokens": [50620, 6770, 300, 264, 6608, 390, 767, 23940, 13, 400, 264, 912, 551, 1709, 337, 367, 1292, 278, 264, 6608, 11, 50836], "temperature": 0.0, "avg_logprob": -0.09041778730309528, "compression_ratio": 1.9036144578313252, "no_speech_prob": 0.001220736070536077}, {"id": 338, "seek": 190464, "start": 1914.0800000000002, "end": 1918.5600000000002, "text": " which can't happen unless the filter was placed and the water was heated. And the same thing for", "tokens": [50836, 597, 393, 380, 1051, 5969, 264, 6608, 390, 7074, 293, 264, 1281, 390, 18806, 13, 400, 264, 912, 551, 337, 51060], "temperature": 0.0, "avg_logprob": -0.09041778730309528, "compression_ratio": 1.9036144578313252, "no_speech_prob": 0.001220736070536077}, {"id": 339, "seek": 190464, "start": 1918.5600000000002, "end": 1923.1200000000001, "text": " grounds that you, if you want to add them, they must be actually ground. And the filter must be", "tokens": [51060, 19196, 300, 291, 11, 498, 291, 528, 281, 909, 552, 11, 436, 1633, 312, 767, 2727, 13, 400, 264, 6608, 1633, 312, 51288], "temperature": 0.0, "avg_logprob": -0.09041778730309528, "compression_ratio": 1.9036144578313252, "no_speech_prob": 0.001220736070536077}, {"id": 340, "seek": 190464, "start": 1923.1200000000001, "end": 1928.88, "text": " rinsed to prevent the bug from, from before. And so basically what we were doing here is we're", "tokens": [51288, 367, 1292, 292, 281, 4871, 264, 7426, 490, 11, 490, 949, 13, 400, 370, 1936, 437, 321, 645, 884, 510, 307, 321, 434, 51576], "temperature": 0.0, "avg_logprob": -0.09041778730309528, "compression_ratio": 1.9036144578313252, "no_speech_prob": 0.001220736070536077}, {"id": 341, "seek": 192888, "start": 1928.88, "end": 1935.3600000000001, "text": " encoding kind of business rules directly in our signatures. And once we do that, in turn, it", "tokens": [50364, 43430, 733, 295, 1606, 4474, 3838, 294, 527, 32322, 13, 400, 1564, 321, 360, 300, 11, 294, 1261, 11, 309, 50688], "temperature": 0.0, "avg_logprob": -0.12372825312059979, "compression_ratio": 1.6784140969162995, "no_speech_prob": 0.005606908816844225}, {"id": 342, "seek": 192888, "start": 1935.3600000000001, "end": 1944.0800000000002, "text": " means that code that violates those rules won't even compile. It becomes literally unrepresentable.", "tokens": [50688, 1355, 300, 3089, 300, 3448, 1024, 729, 4474, 1582, 380, 754, 31413, 13, 467, 3643, 3736, 517, 19919, 11662, 712, 13, 51124], "temperature": 0.0, "avg_logprob": -0.12372825312059979, "compression_ratio": 1.6784140969162995, "no_speech_prob": 0.005606908816844225}, {"id": 343, "seek": 192888, "start": 1944.0800000000002, "end": 1949.3600000000001, "text": " And so we can now implement our prep flow from before. So instead of having our implementation", "tokens": [51124, 400, 370, 321, 393, 586, 4445, 527, 2666, 3095, 490, 949, 13, 407, 2602, 295, 1419, 527, 11420, 51388], "temperature": 0.0, "avg_logprob": -0.12372825312059979, "compression_ratio": 1.6784140969162995, "no_speech_prob": 0.005606908816844225}, {"id": 344, "seek": 192888, "start": 1949.3600000000001, "end": 1954.24, "text": " returning unit, we now have a more informative, more informative signature that tells us what", "tokens": [51388, 12678, 4985, 11, 321, 586, 362, 257, 544, 27759, 11, 544, 27759, 13397, 300, 5112, 505, 437, 51632], "temperature": 0.0, "avg_logprob": -0.12372825312059979, "compression_ratio": 1.6784140969162995, "no_speech_prob": 0.005606908816844225}, {"id": 345, "seek": 195424, "start": 1954.24, "end": 1958.96, "text": " actually was achieved during that process. So after we finished the prep, water was heated", "tokens": [50364, 767, 390, 11042, 1830, 300, 1399, 13, 407, 934, 321, 4335, 264, 2666, 11, 1281, 390, 18806, 50600], "temperature": 0.0, "avg_logprob": -0.10317397647433811, "compression_ratio": 1.6101694915254237, "no_speech_prob": 0.0036381790414452553}, {"id": 346, "seek": 195424, "start": 1958.96, "end": 1964.24, "text": " and grounds were actually added. So there's no avoiding that now. Every implementation of this", "tokens": [50600, 293, 19196, 645, 767, 3869, 13, 407, 456, 311, 572, 20220, 300, 586, 13, 2048, 11420, 295, 341, 50864], "temperature": 0.0, "avg_logprob": -0.10317397647433811, "compression_ratio": 1.6101694915254237, "no_speech_prob": 0.0036381790414452553}, {"id": 347, "seek": 195424, "start": 1964.24, "end": 1972.56, "text": " code has to, to do something about it. And so since our types are so, so descriptive, now again,", "tokens": [50864, 3089, 575, 281, 11, 281, 360, 746, 466, 309, 13, 400, 370, 1670, 527, 3467, 366, 370, 11, 370, 42585, 11, 586, 797, 11, 51280], "temperature": 0.0, "avg_logprob": -0.10317397647433811, "compression_ratio": 1.6101694915254237, "no_speech_prob": 0.0036381790414452553}, {"id": 348, "seek": 195424, "start": 1972.56, "end": 1977.68, "text": " again, this ability to kind of follow the types to implement our flow. So this is very similar to", "tokens": [51280, 797, 11, 341, 3485, 281, 733, 295, 1524, 264, 3467, 281, 4445, 527, 3095, 13, 407, 341, 307, 588, 2531, 281, 51536], "temperature": 0.0, "avg_logprob": -0.10317397647433811, "compression_ratio": 1.6101694915254237, "no_speech_prob": 0.0036381790414452553}, {"id": 349, "seek": 197768, "start": 1977.76, "end": 1985.04, "text": " the code that we had before. But now we have to press around various outputs from our actions. So", "tokens": [50368, 264, 3089, 300, 321, 632, 949, 13, 583, 586, 321, 362, 281, 1886, 926, 3683, 23930, 490, 527, 5909, 13, 407, 50732], "temperature": 0.0, "avg_logprob": -0.09952283674670805, "compression_ratio": 1.8473282442748091, "no_speech_prob": 0.007499292027205229}, {"id": 350, "seek": 197768, "start": 1985.04, "end": 1989.3600000000001, "text": " this code is still incomplete. But the nice thing here is that the compiler now helps us. It tells", "tokens": [50732, 341, 3089, 307, 920, 31709, 13, 583, 264, 1481, 551, 510, 307, 300, 264, 31958, 586, 3665, 505, 13, 467, 5112, 50948], "temperature": 0.0, "avg_logprob": -0.09952283674670805, "compression_ratio": 1.8473282442748091, "no_speech_prob": 0.007499292027205229}, {"id": 351, "seek": 197768, "start": 1989.3600000000001, "end": 1996.0, "text": " us, well, you forgot to make sure that you followed the filter before you placed it. And so we can", "tokens": [50948, 505, 11, 731, 11, 291, 5298, 281, 652, 988, 300, 291, 6263, 264, 6608, 949, 291, 7074, 309, 13, 400, 370, 321, 393, 51280], "temperature": 0.0, "avg_logprob": -0.09952283674670805, "compression_ratio": 1.8473282442748091, "no_speech_prob": 0.007499292027205229}, {"id": 352, "seek": 197768, "start": 1996.0, "end": 1999.92, "text": " fix that. And now the compiler tells us, okay, but if you want to add grounds, you have to, you", "tokens": [51280, 3191, 300, 13, 400, 586, 264, 31958, 5112, 505, 11, 1392, 11, 457, 498, 291, 528, 281, 909, 19196, 11, 291, 362, 281, 11, 291, 51476], "temperature": 0.0, "avg_logprob": -0.09952283674670805, "compression_ratio": 1.8473282442748091, "no_speech_prob": 0.007499292027205229}, {"id": 353, "seek": 197768, "start": 1999.92, "end": 2004.3200000000002, "text": " have some prerequisites. So let's fix that. We have to have the coffee ground and the coffee", "tokens": [51476, 362, 512, 38333, 15398, 3324, 13, 407, 718, 311, 3191, 300, 13, 492, 362, 281, 362, 264, 4982, 2727, 293, 264, 4982, 51696], "temperature": 0.0, "avg_logprob": -0.09952283674670805, "compression_ratio": 1.8473282442748091, "no_speech_prob": 0.007499292027205229}, {"id": 354, "seek": 200432, "start": 2004.32, "end": 2009.6799999999998, "text": " ground and filter placed. And now we still have the same bug from before. We still, we forgot to", "tokens": [50364, 2727, 293, 6608, 7074, 13, 400, 586, 321, 920, 362, 264, 912, 7426, 490, 949, 13, 492, 920, 11, 321, 5298, 281, 50632], "temperature": 0.0, "avg_logprob": -0.1124890288528131, "compression_ratio": 1.8450704225352113, "no_speech_prob": 0.0012787512969225645}, {"id": 355, "seek": 200432, "start": 2009.6799999999998, "end": 2014.48, "text": " rinse the filter. But this time, the compiler will tell us, you forgot to rinse the filter. So you", "tokens": [50632, 27026, 264, 6608, 13, 583, 341, 565, 11, 264, 31958, 486, 980, 505, 11, 291, 5298, 281, 27026, 264, 6608, 13, 407, 291, 50872], "temperature": 0.0, "avg_logprob": -0.1124890288528131, "compression_ratio": 1.8450704225352113, "no_speech_prob": 0.0012787512969225645}, {"id": 356, "seek": 200432, "start": 2014.48, "end": 2020.72, "text": " have to do that before you can actually add your grounds. And so we fix that. And now the compiler", "tokens": [50872, 362, 281, 360, 300, 949, 291, 393, 767, 909, 428, 19196, 13, 400, 370, 321, 3191, 300, 13, 400, 586, 264, 31958, 51184], "temperature": 0.0, "avg_logprob": -0.1124890288528131, "compression_ratio": 1.8450704225352113, "no_speech_prob": 0.0012787512969225645}, {"id": 357, "seek": 200432, "start": 2020.72, "end": 2028.08, "text": " is happy. And we are happy because our clients are happy. So because we shared our business rules,", "tokens": [51184, 307, 2055, 13, 400, 321, 366, 2055, 570, 527, 6982, 366, 2055, 13, 407, 570, 321, 5507, 527, 1606, 4474, 11, 51552], "temperature": 0.0, "avg_logprob": -0.1124890288528131, "compression_ratio": 1.8450704225352113, "no_speech_prob": 0.0012787512969225645}, {"id": 358, "seek": 202808, "start": 2028.1599999999999, "end": 2035.6799999999998, "text": " business knowledge with the compiler, the compiler was very helpful in actually enforcing this", "tokens": [50368, 1606, 3601, 365, 264, 31958, 11, 264, 31958, 390, 588, 4961, 294, 767, 25495, 2175, 341, 50744], "temperature": 0.0, "avg_logprob": -0.13052264126864346, "compression_ratio": 1.5315789473684212, "no_speech_prob": 0.0032928490545600653}, {"id": 359, "seek": 202808, "start": 2035.6799999999998, "end": 2045.6799999999998, "text": " for us and making it impossible to stray from the right path. Also notice, so by making everything", "tokens": [50744, 337, 505, 293, 1455, 309, 6243, 281, 36219, 490, 264, 558, 3100, 13, 2743, 3449, 11, 370, 538, 1455, 1203, 51244], "temperature": 0.0, "avg_logprob": -0.13052264126864346, "compression_ratio": 1.5315789473684212, "no_speech_prob": 0.0032928490545600653}, {"id": 360, "seek": 202808, "start": 2045.6799999999998, "end": 2051.04, "text": " more declarative, it's now much easier to figure out what flows where and what goes in which way.", "tokens": [51244, 544, 16694, 1166, 11, 309, 311, 586, 709, 3571, 281, 2573, 484, 437, 12867, 689, 293, 437, 1709, 294, 597, 636, 13, 51512], "temperature": 0.0, "avg_logprob": -0.13052264126864346, "compression_ratio": 1.5315789473684212, "no_speech_prob": 0.0032928490545600653}, {"id": 361, "seek": 205104, "start": 2051.04, "end": 2058.64, "text": " And so in essence, our function dependencies are defining requirements and making the flow much", "tokens": [50364, 400, 370, 294, 12801, 11, 527, 2445, 36606, 366, 17827, 7728, 293, 1455, 264, 3095, 709, 50744], "temperature": 0.0, "avg_logprob": -0.09380116333832612, "compression_ratio": 1.7672727272727273, "no_speech_prob": 0.0012425511376932263}, {"id": 362, "seek": 205104, "start": 2058.64, "end": 2063.52, "text": " more limited in what can or can't happen. And so this, for example, opens up opportunities for", "tokens": [50744, 544, 5567, 294, 437, 393, 420, 393, 380, 1051, 13, 400, 370, 341, 11, 337, 1365, 11, 9870, 493, 4786, 337, 50988], "temperature": 0.0, "avg_logprob": -0.09380116333832612, "compression_ratio": 1.7672727272727273, "no_speech_prob": 0.0012425511376932263}, {"id": 363, "seek": 205104, "start": 2063.52, "end": 2067.68, "text": " parallelization. So if you see that two functions are independent, you might be able to parallelize", "tokens": [50988, 8952, 2144, 13, 407, 498, 291, 536, 300, 732, 6828, 366, 6695, 11, 291, 1062, 312, 1075, 281, 8952, 1125, 51196], "temperature": 0.0, "avg_logprob": -0.09380116333832612, "compression_ratio": 1.7672727272727273, "no_speech_prob": 0.0012425511376932263}, {"id": 364, "seek": 205104, "start": 2067.68, "end": 2072.56, "text": " them. And the nice thing here is that the compiler will help you get it right because it knows what", "tokens": [51196, 552, 13, 400, 264, 1481, 551, 510, 307, 300, 264, 31958, 486, 854, 291, 483, 309, 558, 570, 309, 3255, 437, 51440], "temperature": 0.0, "avg_logprob": -0.09380116333832612, "compression_ratio": 1.7672727272727273, "no_speech_prob": 0.0012425511376932263}, {"id": 365, "seek": 205104, "start": 2072.56, "end": 2079.52, "text": " can or cannot be parallelized. But there is something that I didn't specify for the moment. And", "tokens": [51440, 393, 420, 2644, 312, 8952, 1602, 13, 583, 456, 307, 746, 300, 286, 994, 380, 16500, 337, 264, 1623, 13, 400, 51788], "temperature": 0.0, "avg_logprob": -0.09380116333832612, "compression_ratio": 1.7672727272727273, "no_speech_prob": 0.0012425511376932263}, {"id": 366, "seek": 207952, "start": 2079.52, "end": 2085.2, "text": " what are those types? The water heated and grounds added types and all the rest I just used here.", "tokens": [50364, 437, 366, 729, 3467, 30, 440, 1281, 18806, 293, 19196, 3869, 3467, 293, 439, 264, 1472, 286, 445, 1143, 510, 13, 50648], "temperature": 0.0, "avg_logprob": -0.12820587158203126, "compression_ratio": 1.7912087912087913, "no_speech_prob": 0.0032981133554130793}, {"id": 367, "seek": 207952, "start": 2085.92, "end": 2090.56, "text": " So I just assumed that they are there, but I didn't actually specify them. And the answer is I don't", "tokens": [50684, 407, 286, 445, 15895, 300, 436, 366, 456, 11, 457, 286, 994, 380, 767, 16500, 552, 13, 400, 264, 1867, 307, 286, 500, 380, 50916], "temperature": 0.0, "avg_logprob": -0.12820587158203126, "compression_ratio": 1.7912087912087913, "no_speech_prob": 0.0032981133554130793}, {"id": 368, "seek": 207952, "start": 2090.56, "end": 2096.64, "text": " care. I literally don't care about those types. So much so that I can actually represent it in our", "tokens": [50916, 1127, 13, 286, 3736, 500, 380, 1127, 466, 729, 3467, 13, 407, 709, 370, 300, 286, 393, 767, 2906, 309, 294, 527, 51220], "temperature": 0.0, "avg_logprob": -0.12820587158203126, "compression_ratio": 1.7912087912087913, "no_speech_prob": 0.0032981133554130793}, {"id": 369, "seek": 207952, "start": 2096.64, "end": 2102.16, "text": " type signature. So brewing prep doesn't really depend on the specific values of all the types of", "tokens": [51220, 2010, 13397, 13, 407, 39019, 2666, 1177, 380, 534, 5672, 322, 264, 2685, 4190, 295, 439, 264, 3467, 295, 51496], "temperature": 0.0, "avg_logprob": -0.12820587158203126, "compression_ratio": 1.7912087912087913, "no_speech_prob": 0.0032981133554130793}, {"id": 370, "seek": 207952, "start": 2102.16, "end": 2106.0, "text": " coffee ground, water heated, and the like. Why? Because it just passes them around. It doesn't", "tokens": [51496, 4982, 2727, 11, 1281, 18806, 11, 293, 264, 411, 13, 1545, 30, 1436, 309, 445, 11335, 552, 926, 13, 467, 1177, 380, 51688], "temperature": 0.0, "avg_logprob": -0.12820587158203126, "compression_ratio": 1.7912087912087913, "no_speech_prob": 0.0032981133554130793}, {"id": 371, "seek": 210600, "start": 2106.0, "end": 2110.56, "text": " inspect them in any way. It just passes them around as kind of tokens of security, but it", "tokens": [50364, 15018, 552, 294, 604, 636, 13, 467, 445, 11335, 552, 926, 382, 733, 295, 22667, 295, 3825, 11, 457, 309, 50592], "temperature": 0.0, "avg_logprob": -0.09023141438982128, "compression_ratio": 1.6631205673758864, "no_speech_prob": 0.0028377962298691273}, {"id": 372, "seek": 210600, "start": 2110.56, "end": 2115.68, "text": " doesn't do anything else with them. And to make this explicit, we made our brewing prep function", "tokens": [50592, 1177, 380, 360, 1340, 1646, 365, 552, 13, 400, 281, 652, 341, 13691, 11, 321, 1027, 527, 39019, 2666, 2445, 50848], "temperature": 0.0, "avg_logprob": -0.09023141438982128, "compression_ratio": 1.6631205673758864, "no_speech_prob": 0.0028377962298691273}, {"id": 373, "seek": 210600, "start": 2115.68, "end": 2122.64, "text": " parametric. So now it takes six type arguments, although sounds scary. But since we don't care", "tokens": [50848, 6220, 17475, 13, 407, 586, 309, 2516, 2309, 2010, 12869, 11, 4878, 3263, 6958, 13, 583, 1670, 321, 500, 380, 1127, 51196], "temperature": 0.0, "avg_logprob": -0.09023141438982128, "compression_ratio": 1.6631205673758864, "no_speech_prob": 0.0028377962298691273}, {"id": 374, "seek": 210600, "start": 2122.64, "end": 2127.68, "text": " about the actual values, we can do that. And everything will just work the same way as before.", "tokens": [51196, 466, 264, 3539, 4190, 11, 321, 393, 360, 300, 13, 400, 1203, 486, 445, 589, 264, 912, 636, 382, 949, 13, 51448], "temperature": 0.0, "avg_logprob": -0.09023141438982128, "compression_ratio": 1.6631205673758864, "no_speech_prob": 0.0028377962298691273}, {"id": 375, "seek": 210600, "start": 2127.68, "end": 2135.28, "text": " So we explicitly declare the fact that we are invariant and don't care about how those types", "tokens": [51448, 407, 321, 20803, 19710, 264, 1186, 300, 321, 366, 33270, 394, 293, 500, 380, 1127, 466, 577, 729, 3467, 51828], "temperature": 0.0, "avg_logprob": -0.09023141438982128, "compression_ratio": 1.6631205673758864, "no_speech_prob": 0.0028377962298691273}, {"id": 376, "seek": 213528, "start": 2135.28, "end": 2142.32, "text": " are specified. Now, in order for this to work out, the brewing actions interface has to be", "tokens": [50364, 366, 22206, 13, 823, 11, 294, 1668, 337, 341, 281, 589, 484, 11, 264, 39019, 5909, 9226, 575, 281, 312, 50716], "temperature": 0.0, "avg_logprob": -0.12213907403461004, "compression_ratio": 1.7415730337078652, "no_speech_prob": 0.0007070084102451801}, {"id": 377, "seek": 213528, "start": 2142.32, "end": 2147.6000000000004, "text": " adapted as well. It has to be parametric in the same way. But because slide space is kind of", "tokens": [50716, 20871, 382, 731, 13, 467, 575, 281, 312, 6220, 17475, 294, 264, 912, 636, 13, 583, 570, 4137, 1901, 307, 733, 295, 50980], "temperature": 0.0, "avg_logprob": -0.12213907403461004, "compression_ratio": 1.7415730337078652, "no_speech_prob": 0.0007070084102451801}, {"id": 378, "seek": 213528, "start": 2147.6000000000004, "end": 2152.5600000000004, "text": " limited, I'll abbreviate for a moment. And so now brewing actions is going to take the same", "tokens": [50980, 5567, 11, 286, 603, 35839, 473, 337, 257, 1623, 13, 400, 370, 586, 39019, 5909, 307, 516, 281, 747, 264, 912, 51228], "temperature": 0.0, "avg_logprob": -0.12213907403461004, "compression_ratio": 1.7415730337078652, "no_speech_prob": 0.0007070084102451801}, {"id": 379, "seek": 213528, "start": 2152.5600000000004, "end": 2158.88, "text": " six type parameters. And so now we are kind of consistently, the code looks exactly the same,", "tokens": [51228, 2309, 2010, 9834, 13, 400, 370, 586, 321, 366, 733, 295, 14961, 11, 264, 3089, 1542, 2293, 264, 912, 11, 51544], "temperature": 0.0, "avg_logprob": -0.12213907403461004, "compression_ratio": 1.7415730337078652, "no_speech_prob": 0.0007070084102451801}, {"id": 380, "seek": 213528, "start": 2158.88, "end": 2164.48, "text": " but now we have type parameters. You might ask, why would you do that? And the answer is if you", "tokens": [51544, 457, 586, 321, 362, 2010, 9834, 13, 509, 1062, 1029, 11, 983, 576, 291, 360, 300, 30, 400, 264, 1867, 307, 498, 291, 51824], "temperature": 0.0, "avg_logprob": -0.12213907403461004, "compression_ratio": 1.7415730337078652, "no_speech_prob": 0.0007070084102451801}, {"id": 381, "seek": 216448, "start": 2164.48, "end": 2168.8, "text": " don't care about the inputs and outputs, if you make them parametric, it leaves you very little", "tokens": [50364, 500, 380, 1127, 466, 264, 15743, 293, 23930, 11, 498, 291, 652, 552, 6220, 17475, 11, 309, 5510, 291, 588, 707, 50580], "temperature": 0.0, "avg_logprob": -0.126445068359375, "compression_ratio": 1.7573529411764706, "no_speech_prob": 0.001136837643571198}, {"id": 382, "seek": 216448, "start": 2168.8, "end": 2174.0, "text": " space to actually cheat. So in case I want to pass the water-heated value and have to return it", "tokens": [50580, 1901, 281, 767, 17470, 13, 407, 294, 1389, 286, 528, 281, 1320, 264, 1281, 12, 675, 770, 2158, 293, 362, 281, 2736, 309, 50840], "temperature": 0.0, "avg_logprob": -0.126445068359375, "compression_ratio": 1.7573529411764706, "no_speech_prob": 0.001136837643571198}, {"id": 383, "seek": 216448, "start": 2174.0, "end": 2178.96, "text": " for my signature, there's no way to obtain a water-heated value because from anywhere else,", "tokens": [50840, 337, 452, 13397, 11, 456, 311, 572, 636, 281, 12701, 257, 1281, 12, 675, 770, 2158, 570, 490, 4992, 1646, 11, 51088], "temperature": 0.0, "avg_logprob": -0.126445068359375, "compression_ratio": 1.7573529411764706, "no_speech_prob": 0.001136837643571198}, {"id": 384, "seek": 216448, "start": 2178.96, "end": 2183.44, "text": " other than calling heat to water, because I have no idea what the type really is. It's parametric,", "tokens": [51088, 661, 813, 5141, 3738, 281, 1281, 11, 570, 286, 362, 572, 1558, 437, 264, 2010, 534, 307, 13, 467, 311, 6220, 17475, 11, 51312], "temperature": 0.0, "avg_logprob": -0.126445068359375, "compression_ratio": 1.7573529411764706, "no_speech_prob": 0.001136837643571198}, {"id": 385, "seek": 216448, "start": 2183.44, "end": 2188.88, "text": " so I have no information on how to obtain it. I don't know what it is, so it's just impossible.", "tokens": [51312, 370, 286, 362, 572, 1589, 322, 577, 281, 12701, 309, 13, 286, 500, 380, 458, 437, 309, 307, 11, 370, 309, 311, 445, 6243, 13, 51584], "temperature": 0.0, "avg_logprob": -0.126445068359375, "compression_ratio": 1.7573529411764706, "no_speech_prob": 0.001136837643571198}, {"id": 386, "seek": 218888, "start": 2189.44, "end": 2195.44, "text": " And so in this case, we're just forced to do the right thing because there's no way to cheat. If", "tokens": [50392, 400, 370, 294, 341, 1389, 11, 321, 434, 445, 7579, 281, 360, 264, 558, 551, 570, 456, 311, 572, 636, 281, 17470, 13, 759, 50692], "temperature": 0.0, "avg_logprob": -0.13788013988071018, "compression_ratio": 1.6804511278195489, "no_speech_prob": 0.0023076552897691727}, {"id": 387, "seek": 218888, "start": 2195.44, "end": 2200.08, "text": " it was a unit or some other kind of simple value, we just could return that. But in this case,", "tokens": [50692, 309, 390, 257, 4985, 420, 512, 661, 733, 295, 2199, 2158, 11, 321, 445, 727, 2736, 300, 13, 583, 294, 341, 1389, 11, 50924], "temperature": 0.0, "avg_logprob": -0.13788013988071018, "compression_ratio": 1.6804511278195489, "no_speech_prob": 0.0023076552897691727}, {"id": 388, "seek": 218888, "start": 2200.08, "end": 2206.32, "text": " we can't because it's type parameter. And as a nice bonus, this approach actually gives us,", "tokens": [50924, 321, 393, 380, 570, 309, 311, 2010, 13075, 13, 400, 382, 257, 1481, 10882, 11, 341, 3109, 767, 2709, 505, 11, 51236], "temperature": 0.0, "avg_logprob": -0.13788013988071018, "compression_ratio": 1.6804511278195489, "no_speech_prob": 0.0023076552897691727}, {"id": 389, "seek": 218888, "start": 2206.32, "end": 2209.12, "text": " although it limits the implementation, which is a good thing, it does give us", "tokens": [51236, 4878, 309, 10406, 264, 11420, 11, 597, 307, 257, 665, 551, 11, 309, 775, 976, 505, 51376], "temperature": 0.0, "avg_logprob": -0.13788013988071018, "compression_ratio": 1.6804511278195489, "no_speech_prob": 0.0023076552897691727}, {"id": 390, "seek": 218888, "start": 2209.84, "end": 2215.04, "text": " various flexibility degrees of freedom when creating brewing actions because the type", "tokens": [51412, 3683, 12635, 5310, 295, 5645, 562, 4084, 39019, 5909, 570, 264, 2010, 51672], "temperature": 0.0, "avg_logprob": -0.13788013988071018, "compression_ratio": 1.6804511278195489, "no_speech_prob": 0.0023076552897691727}, {"id": 391, "seek": 221504, "start": 2215.04, "end": 2219.52, "text": " parameters can be set to whatever we actually want in brewing actions and still use unit, and", "tokens": [50364, 9834, 393, 312, 992, 281, 2035, 321, 767, 528, 294, 39019, 5909, 293, 920, 764, 4985, 11, 293, 50588], "temperature": 0.0, "avg_logprob": -0.11116291186131469, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.0011315614683553576}, {"id": 392, "seek": 221504, "start": 2219.52, "end": 2224.4, "text": " maybe we can use something more informative in tests. And so this gives us actual, the limitation", "tokens": [50588, 1310, 321, 393, 764, 746, 544, 27759, 294, 6921, 13, 400, 370, 341, 2709, 505, 3539, 11, 264, 27432, 50832], "temperature": 0.0, "avg_logprob": -0.11116291186131469, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.0011315614683553576}, {"id": 393, "seek": 221504, "start": 2224.4, "end": 2229.2799999999997, "text": " on this side actually gives us more flexibility in other places, which is a nice bonus, but", "tokens": [50832, 322, 341, 1252, 767, 2709, 505, 544, 12635, 294, 661, 3190, 11, 597, 307, 257, 1481, 10882, 11, 457, 51076], "temperature": 0.0, "avg_logprob": -0.11116291186131469, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.0011315614683553576}, {"id": 394, "seek": 221504, "start": 2229.92, "end": 2236.8, "text": " it's not directly related to what we're doing here. But the point is that the brewing prep", "tokens": [51108, 309, 311, 406, 3838, 4077, 281, 437, 321, 434, 884, 510, 13, 583, 264, 935, 307, 300, 264, 39019, 2666, 51452], "temperature": 0.0, "avg_logprob": -0.11116291186131469, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.0011315614683553576}, {"id": 395, "seek": 221504, "start": 2236.8, "end": 2242.32, "text": " doesn't care about how those inputs work, and so we can limit it completely to using them correctly.", "tokens": [51452, 1177, 380, 1127, 466, 577, 729, 15743, 589, 11, 293, 370, 321, 393, 4948, 309, 2584, 281, 1228, 552, 8944, 13, 51728], "temperature": 0.0, "avg_logprob": -0.11116291186131469, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.0011315614683553576}, {"id": 396, "seek": 224232, "start": 2243.1200000000003, "end": 2248.96, "text": " And so I will point out that this code doesn't prevent every legal state possible. So for example,", "tokens": [50404, 400, 370, 286, 486, 935, 484, 300, 341, 3089, 1177, 380, 4871, 633, 5089, 1785, 1944, 13, 407, 337, 1365, 11, 50696], "temperature": 0.0, "avg_logprob": -0.1566816863193307, "compression_ratio": 1.703056768558952, "no_speech_prob": 0.0003836505056824535}, {"id": 397, "seek": 224232, "start": 2248.96, "end": 2254.56, "text": " nothing stops us from calling fold filter twice. That might be, might be illegal. And in general,", "tokens": [50696, 1825, 10094, 505, 490, 5141, 4860, 6608, 6091, 13, 663, 1062, 312, 11, 1062, 312, 11905, 13, 400, 294, 2674, 11, 50976], "temperature": 0.0, "avg_logprob": -0.1566816863193307, "compression_ratio": 1.703056768558952, "no_speech_prob": 0.0003836505056824535}, {"id": 398, "seek": 224232, "start": 2254.56, "end": 2259.44, "text": " it's not always possible to limit every possible, every possible illegal state, but it's better to", "tokens": [50976, 309, 311, 406, 1009, 1944, 281, 4948, 633, 1944, 11, 633, 1944, 11905, 1785, 11, 457, 309, 311, 1101, 281, 51220], "temperature": 0.0, "avg_logprob": -0.1566816863193307, "compression_ratio": 1.703056768558952, "no_speech_prob": 0.0003836505056824535}, {"id": 399, "seek": 224232, "start": 2259.44, "end": 2268.2400000000002, "text": " get something right than nothing. So I do think it's an improvement. So being declarative is a", "tokens": [51220, 483, 746, 558, 813, 1825, 13, 407, 286, 360, 519, 309, 311, 364, 10444, 13, 407, 885, 16694, 1166, 307, 257, 51660], "temperature": 0.0, "avg_logprob": -0.1566816863193307, "compression_ratio": 1.703056768558952, "no_speech_prob": 0.0003836505056824535}, {"id": 400, "seek": 226824, "start": 2268.24, "end": 2273.04, "text": " great way to encode your business rules directly in your types. That way the compiler can help you", "tokens": [50364, 869, 636, 281, 2058, 1429, 428, 1606, 4474, 3838, 294, 428, 3467, 13, 663, 636, 264, 31958, 393, 854, 291, 50604], "temperature": 0.0, "avg_logprob": -0.12078561606230559, "compression_ratio": 1.7418181818181817, "no_speech_prob": 0.009554403834044933}, {"id": 401, "seek": 226824, "start": 2273.8399999999997, "end": 2279.9199999999996, "text": " enforce those rules and making every breakage of the encoded rules impossible at compile time,", "tokens": [50644, 24825, 729, 4474, 293, 1455, 633, 1821, 609, 295, 264, 2058, 12340, 4474, 6243, 412, 31413, 565, 11, 50948], "temperature": 0.0, "avg_logprob": -0.12078561606230559, "compression_ratio": 1.7418181818181817, "no_speech_prob": 0.009554403834044933}, {"id": 402, "seek": 226824, "start": 2279.9199999999996, "end": 2284.7999999999997, "text": " and thus it's unrepresentable. And the good first step when trying to do things more declaratively", "tokens": [50948, 293, 8807, 309, 311, 517, 19919, 11662, 712, 13, 400, 264, 665, 700, 1823, 562, 1382, 281, 360, 721, 544, 16694, 19020, 51192], "temperature": 0.0, "avg_logprob": -0.12078561606230559, "compression_ratio": 1.7418181818181817, "no_speech_prob": 0.009554403834044933}, {"id": 403, "seek": 226824, "start": 2284.7999999999997, "end": 2289.2799999999997, "text": " is figure out where you have those redundant units that don't communicate any information", "tokens": [51192, 307, 2573, 484, 689, 291, 362, 729, 40997, 6815, 300, 500, 380, 7890, 604, 1589, 51416], "temperature": 0.0, "avg_logprob": -0.12078561606230559, "compression_ratio": 1.7418181818181817, "no_speech_prob": 0.009554403834044933}, {"id": 404, "seek": 226824, "start": 2289.9199999999996, "end": 2295.7599999999998, "text": " about what the function does, and then try to see how you can solve it. And by making everything", "tokens": [51448, 466, 437, 264, 2445, 775, 11, 293, 550, 853, 281, 536, 577, 291, 393, 5039, 309, 13, 400, 538, 1455, 1203, 51740], "temperature": 0.0, "avg_logprob": -0.12078561606230559, "compression_ratio": 1.7418181818181817, "no_speech_prob": 0.009554403834044933}, {"id": 405, "seek": 229576, "start": 2295.76, "end": 2301.6800000000003, "text": " parametric, our code is becoming ignorant of the actual types that we use, which limits the", "tokens": [50364, 6220, 17475, 11, 527, 3089, 307, 5617, 29374, 295, 264, 3539, 3467, 300, 321, 764, 11, 597, 10406, 264, 50660], "temperature": 0.0, "avg_logprob": -0.11467812401907784, "compression_ratio": 1.554945054945055, "no_speech_prob": 0.002449106890708208}, {"id": 406, "seek": 229576, "start": 2301.6800000000003, "end": 2306.96, "text": " number of possible illegal states that we can enter. So the less the code can do, the more we", "tokens": [50660, 1230, 295, 1944, 11905, 4368, 300, 321, 393, 3242, 13, 407, 264, 1570, 264, 3089, 393, 360, 11, 264, 544, 321, 50924], "temperature": 0.0, "avg_logprob": -0.11467812401907784, "compression_ratio": 1.554945054945055, "no_speech_prob": 0.002449106890708208}, {"id": 407, "seek": 229576, "start": 2306.96, "end": 2320.96, "text": " know about what it actually does. So ignorance is strength, like the famous quote. Okay, so we're", "tokens": [50924, 458, 466, 437, 309, 767, 775, 13, 407, 25390, 307, 3800, 11, 411, 264, 4618, 6513, 13, 1033, 11, 370, 321, 434, 51624], "temperature": 0.0, "avg_logprob": -0.11467812401907784, "compression_ratio": 1.554945054945055, "no_speech_prob": 0.002449106890708208}, {"id": 408, "seek": 232096, "start": 2320.96, "end": 2326.7200000000003, "text": " done with the various techniques. It might not be obvious from those two examples, like why would", "tokens": [50364, 1096, 365, 264, 3683, 7512, 13, 467, 1062, 406, 312, 6322, 490, 729, 732, 5110, 11, 411, 983, 576, 50652], "temperature": 0.0, "avg_logprob": -0.1125934500443308, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.008989225141704082}, {"id": 409, "seek": 232096, "start": 2326.7200000000003, "end": 2332.56, "text": " that be useful? Because they're all small examples and kind of hard to see how they work out in a", "tokens": [50652, 300, 312, 4420, 30, 1436, 436, 434, 439, 1359, 5110, 293, 733, 295, 1152, 281, 536, 577, 436, 589, 484, 294, 257, 50944], "temperature": 0.0, "avg_logprob": -0.1125934500443308, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.008989225141704082}, {"id": 410, "seek": 232096, "start": 2332.56, "end": 2339.52, "text": " large code base that you have to maintain for a long time. My point is that all of this kind of", "tokens": [50944, 2416, 3089, 3096, 300, 291, 362, 281, 6909, 337, 257, 938, 565, 13, 1222, 935, 307, 300, 439, 295, 341, 733, 295, 51292], "temperature": 0.0, "avg_logprob": -0.1125934500443308, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.008989225141704082}, {"id": 411, "seek": 232096, "start": 2339.52, "end": 2347.04, "text": " adds up, and eventually it does make your code better in the long run, even if it's not obvious", "tokens": [51292, 10860, 493, 11, 293, 4728, 309, 775, 652, 428, 3089, 1101, 294, 264, 938, 1190, 11, 754, 498, 309, 311, 406, 6322, 51668], "temperature": 0.0, "avg_logprob": -0.1125934500443308, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.008989225141704082}, {"id": 412, "seek": 234704, "start": 2347.12, "end": 2352.56, "text": " from the first small steps. But in this section we'll just kind of quickly review what sort of", "tokens": [50368, 490, 264, 700, 1359, 4439, 13, 583, 294, 341, 3541, 321, 603, 445, 733, 295, 2661, 3131, 437, 1333, 295, 50640], "temperature": 0.0, "avg_logprob": -0.08150650440961466, "compression_ratio": 1.6278026905829597, "no_speech_prob": 0.0024503793101757765}, {"id": 413, "seek": 234704, "start": 2352.56, "end": 2358.4, "text": " benefits you can expect to reap from being consistent and making illegal states as", "tokens": [50640, 5311, 291, 393, 2066, 281, 39178, 490, 885, 8398, 293, 1455, 11905, 4368, 382, 50932], "temperature": 0.0, "avg_logprob": -0.08150650440961466, "compression_ratio": 1.6278026905829597, "no_speech_prob": 0.0024503793101757765}, {"id": 414, "seek": 234704, "start": 2358.4, "end": 2363.68, "text": " unrepresentable as you can in your code base. So the first point is that code becomes easier to", "tokens": [50932, 517, 19919, 11662, 712, 382, 291, 393, 294, 428, 3089, 3096, 13, 407, 264, 700, 935, 307, 300, 3089, 3643, 3571, 281, 51196], "temperature": 0.0, "avg_logprob": -0.08150650440961466, "compression_ratio": 1.6278026905829597, "no_speech_prob": 0.0024503793101757765}, {"id": 415, "seek": 234704, "start": 2363.68, "end": 2372.48, "text": " comprehend. So as I just mentioned, the fewer things the code can do, the easier it is to", "tokens": [51196, 38183, 13, 407, 382, 286, 445, 2835, 11, 264, 13366, 721, 264, 3089, 393, 360, 11, 264, 3571, 309, 307, 281, 51636], "temperature": 0.0, "avg_logprob": -0.08150650440961466, "compression_ratio": 1.6278026905829597, "no_speech_prob": 0.0024503793101757765}, {"id": 416, "seek": 237248, "start": 2372.48, "end": 2377.2, "text": " understand what it actually does. But more concretely, for example, if you use algebraic", "tokens": [50364, 1223, 437, 309, 767, 775, 13, 583, 544, 39481, 736, 11, 337, 1365, 11, 498, 291, 764, 21989, 299, 50600], "temperature": 0.0, "avg_logprob": -0.12372861466966234, "compression_ratio": 1.6954887218045114, "no_speech_prob": 0.00547030521556735}, {"id": 417, "seek": 237248, "start": 2377.2, "end": 2382.16, "text": " data types consistently across your code base, the compiler can help you figure out what's", "tokens": [50600, 1412, 3467, 14961, 2108, 428, 3089, 3096, 11, 264, 31958, 393, 854, 291, 2573, 484, 437, 311, 50848], "temperature": 0.0, "avg_logprob": -0.12372861466966234, "compression_ratio": 1.6954887218045114, "no_speech_prob": 0.00547030521556735}, {"id": 418, "seek": 237248, "start": 2382.16, "end": 2386.96, "text": " happening now. You do a better match. Some editors would actually autocomplete all the cases, and", "tokens": [50848, 2737, 586, 13, 509, 360, 257, 1101, 2995, 13, 2188, 31446, 576, 767, 45833, 298, 17220, 439, 264, 3331, 11, 293, 51088], "temperature": 0.0, "avg_logprob": -0.12372861466966234, "compression_ratio": 1.6954887218045114, "no_speech_prob": 0.00547030521556735}, {"id": 419, "seek": 237248, "start": 2386.96, "end": 2391.12, "text": " you can now figure out what's going on, what information you have, what can you use and", "tokens": [51088, 291, 393, 586, 2573, 484, 437, 311, 516, 322, 11, 437, 1589, 291, 362, 11, 437, 393, 291, 764, 293, 51296], "temperature": 0.0, "avg_logprob": -0.12372861466966234, "compression_ratio": 1.6954887218045114, "no_speech_prob": 0.00547030521556735}, {"id": 420, "seek": 237248, "start": 2391.12, "end": 2396.56, "text": " the like, and the compiler got your back. Not only that, it can also, as I mentioned,", "tokens": [51296, 264, 411, 11, 293, 264, 31958, 658, 428, 646, 13, 1726, 787, 300, 11, 309, 393, 611, 11, 382, 286, 2835, 11, 51568], "temperature": 0.0, "avg_logprob": -0.12372861466966234, "compression_ratio": 1.6954887218045114, "no_speech_prob": 0.00547030521556735}, {"id": 421, "seek": 239656, "start": 2396.64, "end": 2402.08, "text": " automatically do accessibility checking, so you're sure to not forget anything in case anything", "tokens": [50368, 6772, 360, 15002, 8568, 11, 370, 291, 434, 988, 281, 406, 2870, 1340, 294, 1389, 1340, 50640], "temperature": 0.0, "avg_logprob": -0.11384805660803342, "compression_ratio": 1.8106060606060606, "no_speech_prob": 0.0022971276193857193}, {"id": 422, "seek": 239656, "start": 2402.08, "end": 2410.16, "text": " changes. And so this is definitely an improvement on your ability to figure out what's going on.", "tokens": [50640, 2962, 13, 400, 370, 341, 307, 2138, 364, 10444, 322, 428, 3485, 281, 2573, 484, 437, 311, 516, 322, 13, 51044], "temperature": 0.0, "avg_logprob": -0.11384805660803342, "compression_ratio": 1.8106060606060606, "no_speech_prob": 0.0022971276193857193}, {"id": 423, "seek": 239656, "start": 2410.16, "end": 2414.64, "text": " And also a common theme throughout the examples is that our type signatures are becoming more", "tokens": [51044, 400, 611, 257, 2689, 6314, 3710, 264, 5110, 307, 300, 527, 2010, 32322, 366, 5617, 544, 51268], "temperature": 0.0, "avg_logprob": -0.11384805660803342, "compression_ratio": 1.8106060606060606, "no_speech_prob": 0.0022971276193857193}, {"id": 424, "seek": 239656, "start": 2414.64, "end": 2418.96, "text": " informative. They encode more and more information about what's going on. So just by reading the", "tokens": [51268, 27759, 13, 814, 2058, 1429, 544, 293, 544, 1589, 466, 437, 311, 516, 322, 13, 407, 445, 538, 3760, 264, 51484], "temperature": 0.0, "avg_logprob": -0.11384805660803342, "compression_ratio": 1.8106060606060606, "no_speech_prob": 0.0022971276193857193}, {"id": 425, "seek": 239656, "start": 2418.96, "end": 2425.6, "text": " signatures, it becomes easier to figure out what are the limitations, what is allowed, what is", "tokens": [51484, 32322, 11, 309, 3643, 3571, 281, 2573, 484, 437, 366, 264, 15705, 11, 437, 307, 4350, 11, 437, 307, 51816], "temperature": 0.0, "avg_logprob": -0.11384805660803342, "compression_ratio": 1.8106060606060606, "no_speech_prob": 0.0022971276193857193}, {"id": 426, "seek": 242560, "start": 2425.6, "end": 2434.0, "text": " disallowed, and the like. Fewer bugs. So every legal state that you precluded and made unrepresentable", "tokens": [50364, 717, 13253, 292, 11, 293, 264, 411, 13, 33468, 260, 15120, 13, 407, 633, 5089, 1785, 300, 291, 4346, 44412, 293, 1027, 517, 19919, 11662, 712, 50784], "temperature": 0.0, "avg_logprob": -0.13397809838046545, "compression_ratio": 1.6925795053003534, "no_speech_prob": 0.0016208867309615016}, {"id": 427, "seek": 242560, "start": 2434.0, "end": 2438.64, "text": " is a potential bug that you avoided. So, for example, creating an Irish coffee order without", "tokens": [50784, 307, 257, 3995, 7426, 300, 291, 24890, 13, 407, 11, 337, 1365, 11, 4084, 364, 16801, 4982, 1668, 1553, 51016], "temperature": 0.0, "avg_logprob": -0.13397809838046545, "compression_ratio": 1.6925795053003534, "no_speech_prob": 0.0016208867309615016}, {"id": 428, "seek": 242560, "start": 2438.64, "end": 2443.04, "text": " whiskey is no longer possible. It's not a state that you can write. This is a compilation error.", "tokens": [51016, 34648, 307, 572, 2854, 1944, 13, 467, 311, 406, 257, 1785, 300, 291, 393, 2464, 13, 639, 307, 257, 40261, 6713, 13, 51236], "temperature": 0.0, "avg_logprob": -0.13397809838046545, "compression_ratio": 1.6925795053003534, "no_speech_prob": 0.0016208867309615016}, {"id": 429, "seek": 242560, "start": 2444.24, "end": 2448.72, "text": " Nor this, like serving coffee and to an empty list of cups. Again, this is no longer possible", "tokens": [51296, 6966, 341, 11, 411, 8148, 4982, 293, 281, 364, 6707, 1329, 295, 13381, 13, 3764, 11, 341, 307, 572, 2854, 1944, 51520], "temperature": 0.0, "avg_logprob": -0.13397809838046545, "compression_ratio": 1.6925795053003534, "no_speech_prob": 0.0016208867309615016}, {"id": 430, "seek": 242560, "start": 2448.72, "end": 2453.44, "text": " because you enforced it at compile time, and this is a bug again that cannot happen anymore.", "tokens": [51520, 570, 291, 40953, 309, 412, 31413, 565, 11, 293, 341, 307, 257, 7426, 797, 300, 2644, 1051, 3602, 13, 51756], "temperature": 0.0, "avg_logprob": -0.13397809838046545, "compression_ratio": 1.6925795053003534, "no_speech_prob": 0.0016208867309615016}, {"id": 431, "seek": 245344, "start": 2454.4, "end": 2459.04, "text": " And since they are unrepresentable, you don't have to test for them a lot. So this is our next", "tokens": [50412, 400, 1670, 436, 366, 517, 19919, 11662, 712, 11, 291, 500, 380, 362, 281, 1500, 337, 552, 257, 688, 13, 407, 341, 307, 527, 958, 50644], "temperature": 0.0, "avg_logprob": -0.11704012552897135, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0014621567679569125}, {"id": 432, "seek": 245344, "start": 2459.04, "end": 2464.8, "text": " point, is that you can do fewer, if you make as many legal states unrepresentable as possible,", "tokens": [50644, 935, 11, 307, 300, 291, 393, 360, 13366, 11, 498, 291, 652, 382, 867, 5089, 4368, 517, 19919, 11662, 712, 382, 1944, 11, 50932], "temperature": 0.0, "avg_logprob": -0.11704012552897135, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0014621567679569125}, {"id": 433, "seek": 245344, "start": 2464.8, "end": 2470.32, "text": " this leads to fewer tests that you actually have to write. For example, this test can't be", "tokens": [50932, 341, 6689, 281, 13366, 6921, 300, 291, 767, 362, 281, 2464, 13, 1171, 1365, 11, 341, 1500, 393, 380, 312, 51208], "temperature": 0.0, "avg_logprob": -0.11704012552897135, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0014621567679569125}, {"id": 434, "seek": 245344, "start": 2470.32, "end": 2477.28, "text": " expressed. Again, testing whether Irish coffee order has whiskey is no longer relevant because,", "tokens": [51208, 12675, 13, 3764, 11, 4997, 1968, 16801, 4982, 1668, 575, 34648, 307, 572, 2854, 7340, 570, 11, 51556], "temperature": 0.0, "avg_logprob": -0.11704012552897135, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0014621567679569125}, {"id": 435, "seek": 245344, "start": 2477.28, "end": 2482.8, "text": " again, even the test can't even compile. So that's a test that you don't have to write,", "tokens": [51556, 797, 11, 754, 264, 1500, 393, 380, 754, 31413, 13, 407, 300, 311, 257, 1500, 300, 291, 500, 380, 362, 281, 2464, 11, 51832], "temperature": 0.0, "avg_logprob": -0.11704012552897135, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0014621567679569125}, {"id": 436, "seek": 248280, "start": 2482.8, "end": 2486.96, "text": " and some tests, for example, are still possible to write but maybe more redundant because you", "tokens": [50364, 293, 512, 6921, 11, 337, 1365, 11, 366, 920, 1944, 281, 2464, 457, 1310, 544, 40997, 570, 291, 50572], "temperature": 0.0, "avg_logprob": -0.10214124284349047, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.001111321384087205}, {"id": 437, "seek": 248280, "start": 2486.96, "end": 2492.5600000000004, "text": " don't really need, if your interface is sufficiently declarative, it might be kind of obvious on", "tokens": [50572, 500, 380, 534, 643, 11, 498, 428, 9226, 307, 31868, 16694, 1166, 11, 309, 1062, 312, 733, 295, 6322, 322, 50852], "temperature": 0.0, "avg_logprob": -0.10214124284349047, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.001111321384087205}, {"id": 438, "seek": 248280, "start": 2492.5600000000004, "end": 2497.6800000000003, "text": " its own that you don't have to check whether water was heated or not when you done the brewing", "tokens": [50852, 1080, 1065, 300, 291, 500, 380, 362, 281, 1520, 1968, 1281, 390, 18806, 420, 406, 562, 291, 1096, 264, 39019, 51108], "temperature": 0.0, "avg_logprob": -0.10214124284349047, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.001111321384087205}, {"id": 439, "seek": 248280, "start": 2497.6800000000003, "end": 2504.32, "text": " prep because the types are requiring that. And the last point is safer refactoring. So your", "tokens": [51108, 2666, 570, 264, 3467, 366, 24165, 300, 13, 400, 264, 1036, 935, 307, 15856, 1895, 578, 3662, 13, 407, 428, 51440], "temperature": 0.0, "avg_logprob": -0.10214124284349047, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.001111321384087205}, {"id": 440, "seek": 248280, "start": 2504.32, "end": 2509.04, "text": " code becomes much easier to refactor. For example, this code, the get calls on the optional values", "tokens": [51440, 3089, 3643, 709, 3571, 281, 1895, 15104, 13, 1171, 1365, 11, 341, 3089, 11, 264, 483, 5498, 322, 264, 17312, 4190, 51676], "temperature": 0.0, "avg_logprob": -0.10214124284349047, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.001111321384087205}, {"id": 441, "seek": 250904, "start": 2509.04, "end": 2515.2799999999997, "text": " are only safe somewhat in the case that you're ordering Irish coffee. But imagine that you're", "tokens": [50364, 366, 787, 3273, 8344, 294, 264, 1389, 300, 291, 434, 21739, 16801, 4982, 13, 583, 3811, 300, 291, 434, 50676], "temperature": 0.0, "avg_logprob": -0.11424372217676661, "compression_ratio": 1.797709923664122, "no_speech_prob": 0.005525230895727873}, {"id": 442, "seek": 250904, "start": 2515.2799999999997, "end": 2519.68, "text": " doing refactor and now the prepare Irish coffee call moves to another place. Now it's in some", "tokens": [50676, 884, 1895, 15104, 293, 586, 264, 5940, 16801, 4982, 818, 6067, 281, 1071, 1081, 13, 823, 309, 311, 294, 512, 50896], "temperature": 0.0, "avg_logprob": -0.11424372217676661, "compression_ratio": 1.797709923664122, "no_speech_prob": 0.005525230895727873}, {"id": 443, "seek": 250904, "start": 2519.68, "end": 2524.24, "text": " other place and nothing is actually checking whether we're in the right case. So this is no", "tokens": [50896, 661, 1081, 293, 1825, 307, 767, 8568, 1968, 321, 434, 294, 264, 558, 1389, 13, 407, 341, 307, 572, 51124], "temperature": 0.0, "avg_logprob": -0.11424372217676661, "compression_ratio": 1.797709923664122, "no_speech_prob": 0.005525230895727873}, {"id": 444, "seek": 250904, "start": 2524.24, "end": 2530.32, "text": " longer safe. On the other hand, this code with the pattern match is safe by construction. If you", "tokens": [51124, 2854, 3273, 13, 1282, 264, 661, 1011, 11, 341, 3089, 365, 264, 5102, 2995, 307, 3273, 538, 6435, 13, 759, 291, 51428], "temperature": 0.0, "avg_logprob": -0.11424372217676661, "compression_ratio": 1.797709923664122, "no_speech_prob": 0.005525230895727873}, {"id": 445, "seek": 250904, "start": 2530.32, "end": 2534.64, "text": " try to move the call to prepare Irish coffee, the code will fail to compile because it will no", "tokens": [51428, 853, 281, 1286, 264, 818, 281, 5940, 16801, 4982, 11, 264, 3089, 486, 3061, 281, 31413, 570, 309, 486, 572, 51644], "temperature": 0.0, "avg_logprob": -0.11424372217676661, "compression_ratio": 1.797709923664122, "no_speech_prob": 0.005525230895727873}, {"id": 446, "seek": 253464, "start": 2534.64, "end": 2542.8799999999997, "text": " longer have the references to the right information that it needs. And another refactoring is if you", "tokens": [50364, 2854, 362, 264, 15400, 281, 264, 558, 1589, 300, 309, 2203, 13, 400, 1071, 1895, 578, 3662, 307, 498, 291, 50776], "temperature": 0.0, "avg_logprob": -0.12346886479577353, "compression_ratio": 1.7685185185185186, "no_speech_prob": 0.002071936847642064}, {"id": 447, "seek": 253464, "start": 2542.8799999999997, "end": 2547.8399999999997, "text": " add something, for example, again, the compiler will verify that you matched all the various", "tokens": [50776, 909, 746, 11, 337, 1365, 11, 797, 11, 264, 31958, 486, 16888, 300, 291, 21447, 439, 264, 3683, 51024], "temperature": 0.0, "avg_logprob": -0.12346886479577353, "compression_ratio": 1.7685185185185186, "no_speech_prob": 0.002071936847642064}, {"id": 448, "seek": 253464, "start": 2547.8399999999997, "end": 2553.44, "text": " types, all the various cases that you have and will enforce again that you don't forget anything.", "tokens": [51024, 3467, 11, 439, 264, 3683, 3331, 300, 291, 362, 293, 486, 24825, 797, 300, 291, 500, 380, 2870, 1340, 13, 51304], "temperature": 0.0, "avg_logprob": -0.12346886479577353, "compression_ratio": 1.7685185185185186, "no_speech_prob": 0.002071936847642064}, {"id": 449, "seek": 253464, "start": 2553.44, "end": 2559.68, "text": " Another example of refactoring is I mentioned in the previous section that we can paralyze", "tokens": [51304, 3996, 1365, 295, 1895, 578, 3662, 307, 286, 2835, 294, 264, 3894, 3541, 300, 321, 393, 32645, 1381, 51616], "temperature": 0.0, "avg_logprob": -0.12346886479577353, "compression_ratio": 1.7685185185185186, "no_speech_prob": 0.002071936847642064}, {"id": 450, "seek": 255968, "start": 2559.7599999999998, "end": 2566.16, "text": " some actions here. So we can, for example, heat water, grind coffee, and the rest can be", "tokens": [50368, 512, 5909, 510, 13, 407, 321, 393, 11, 337, 1365, 11, 3738, 1281, 11, 16700, 4982, 11, 293, 264, 1472, 393, 312, 50688], "temperature": 0.0, "avg_logprob": -0.13732178190834501, "compression_ratio": 1.757462686567164, "no_speech_prob": 0.0049621304497122765}, {"id": 451, "seek": 255968, "start": 2566.16, "end": 2570.16, "text": " paralyzed because they have no dependencies. So this is a refactoring that's easy to get wrong", "tokens": [50688, 41919, 570, 436, 362, 572, 36606, 13, 407, 341, 307, 257, 1895, 578, 3662, 300, 311, 1858, 281, 483, 2085, 50888], "temperature": 0.0, "avg_logprob": -0.13732178190834501, "compression_ratio": 1.757462686567164, "no_speech_prob": 0.0049621304497122765}, {"id": 452, "seek": 255968, "start": 2570.16, "end": 2575.68, "text": " because if you mess something up, things will run in parallel when they shouldn't. And in the", "tokens": [50888, 570, 498, 291, 2082, 746, 493, 11, 721, 486, 1190, 294, 8952, 562, 436, 4659, 380, 13, 400, 294, 264, 51164], "temperature": 0.0, "avg_logprob": -0.13732178190834501, "compression_ratio": 1.757462686567164, "no_speech_prob": 0.0049621304497122765}, {"id": 453, "seek": 255968, "start": 2575.68, "end": 2580.08, "text": " bad example, that would be just broken. But here we can write this code. And if we mess something", "tokens": [51164, 1578, 1365, 11, 300, 576, 312, 445, 5463, 13, 583, 510, 321, 393, 2464, 341, 3089, 13, 400, 498, 321, 2082, 746, 51384], "temperature": 0.0, "avg_logprob": -0.13732178190834501, "compression_ratio": 1.757462686567164, "no_speech_prob": 0.0049621304497122765}, {"id": 454, "seek": 255968, "start": 2580.08, "end": 2584.7999999999997, "text": " up, the compiler will tell us you're missing some dependencies. You can't run this in parallel.", "tokens": [51384, 493, 11, 264, 31958, 486, 980, 505, 291, 434, 5361, 512, 36606, 13, 509, 393, 380, 1190, 341, 294, 8952, 13, 51620], "temperature": 0.0, "avg_logprob": -0.13732178190834501, "compression_ratio": 1.757462686567164, "no_speech_prob": 0.0049621304497122765}, {"id": 455, "seek": 258480, "start": 2585.1200000000003, "end": 2595.6000000000004, "text": " So as people work and maintain large code bases, I think those benefits kind of add up and investment", "tokens": [50380, 407, 382, 561, 589, 293, 6909, 2416, 3089, 17949, 11, 286, 519, 729, 5311, 733, 295, 909, 493, 293, 6078, 50904], "temperature": 0.0, "avg_logprob": -0.1937132893186627, "compression_ratio": 1.5080213903743316, "no_speech_prob": 0.0032668705098330975}, {"id": 456, "seek": 258480, "start": 2595.6000000000004, "end": 2599.6000000000004, "text": " that you're making on making legal states unrepresentable is definitely, definitely worth", "tokens": [50904, 300, 291, 434, 1455, 322, 1455, 5089, 4368, 517, 19919, 11662, 712, 307, 2138, 11, 2138, 3163, 51104], "temperature": 0.0, "avg_logprob": -0.1937132893186627, "compression_ratio": 1.5080213903743316, "no_speech_prob": 0.0032668705098330975}, {"id": 457, "seek": 258480, "start": 2600.48, "end": 2611.1200000000003, "text": " the effort. So to conclude, almost done. So whenever you tackle a new domain, try to think", "tokens": [51148, 264, 4630, 13, 407, 281, 16886, 11, 1920, 1096, 13, 407, 5699, 291, 14896, 257, 777, 9274, 11, 853, 281, 519, 51680], "temperature": 0.0, "avg_logprob": -0.1937132893186627, "compression_ratio": 1.5080213903743316, "no_speech_prob": 0.0032668705098330975}, {"id": 458, "seek": 261112, "start": 2611.12, "end": 2617.04, "text": " about the state space of your problem, the various states that the system can arrive at and what", "tokens": [50364, 466, 264, 1785, 1901, 295, 428, 1154, 11, 264, 3683, 4368, 300, 264, 1185, 393, 8881, 412, 293, 437, 50660], "temperature": 0.0, "avg_logprob": -0.08206955302845348, "compression_ratio": 1.8122605363984674, "no_speech_prob": 0.03909584879875183}, {"id": 459, "seek": 261112, "start": 2617.04, "end": 2625.2799999999997, "text": " can happen. Find the legal states in your system and define them to match your requirements or", "tokens": [50660, 393, 1051, 13, 11809, 264, 5089, 4368, 294, 428, 1185, 293, 6964, 552, 281, 2995, 428, 7728, 420, 51072], "temperature": 0.0, "avg_logprob": -0.08206955302845348, "compression_ratio": 1.8122605363984674, "no_speech_prob": 0.03909584879875183}, {"id": 460, "seek": 261112, "start": 2625.2799999999997, "end": 2630.4, "text": " whatever other error conditions that you might care about. And all the other states are illegal.", "tokens": [51072, 2035, 661, 6713, 4487, 300, 291, 1062, 1127, 466, 13, 400, 439, 264, 661, 4368, 366, 11905, 13, 51328], "temperature": 0.0, "avg_logprob": -0.08206955302845348, "compression_ratio": 1.8122605363984674, "no_speech_prob": 0.03909584879875183}, {"id": 461, "seek": 261112, "start": 2630.4, "end": 2636.08, "text": " Now, if all you do is just think, just sit there and think about your state space in the legal", "tokens": [51328, 823, 11, 498, 439, 291, 360, 307, 445, 519, 11, 445, 1394, 456, 293, 519, 466, 428, 1785, 1901, 294, 264, 5089, 51612], "temperature": 0.0, "avg_logprob": -0.08206955302845348, "compression_ratio": 1.8122605363984674, "no_speech_prob": 0.03909584879875183}, {"id": 462, "seek": 261112, "start": 2636.08, "end": 2639.3599999999997, "text": " and illegal state, that's already a great first step. You don't have to do anything else.", "tokens": [51612, 293, 11905, 1785, 11, 300, 311, 1217, 257, 869, 700, 1823, 13, 509, 500, 380, 362, 281, 360, 1340, 1646, 13, 51776], "temperature": 0.0, "avg_logprob": -0.08206955302845348, "compression_ratio": 1.8122605363984674, "no_speech_prob": 0.03909584879875183}, {"id": 463, "seek": 263936, "start": 2639.36, "end": 2642.96, "text": " That's already a good way of getting your code to be better just by knowing", "tokens": [50364, 663, 311, 1217, 257, 665, 636, 295, 1242, 428, 3089, 281, 312, 1101, 445, 538, 5276, 50544], "temperature": 0.0, "avg_logprob": -0.08676114678382874, "compression_ratio": 1.924187725631769, "no_speech_prob": 0.0021977208089083433}, {"id": 464, "seek": 263936, "start": 2642.96, "end": 2647.44, "text": " what's possible and impossible. But if you actually want to reap the benefits from this", "tokens": [50544, 437, 311, 1944, 293, 6243, 13, 583, 498, 291, 767, 528, 281, 39178, 264, 5311, 490, 341, 50768], "temperature": 0.0, "avg_logprob": -0.08676114678382874, "compression_ratio": 1.924187725631769, "no_speech_prob": 0.0021977208089083433}, {"id": 465, "seek": 263936, "start": 2647.44, "end": 2653.2000000000003, "text": " talk, make those states unrepresentable. And the benefits are fewer bugs, fewer tests,", "tokens": [50768, 751, 11, 652, 729, 4368, 517, 19919, 11662, 712, 13, 400, 264, 5311, 366, 13366, 15120, 11, 13366, 6921, 11, 51056], "temperature": 0.0, "avg_logprob": -0.08676114678382874, "compression_ratio": 1.924187725631769, "no_speech_prob": 0.0021977208089083433}, {"id": 466, "seek": 263936, "start": 2653.2000000000003, "end": 2659.44, "text": " easier to comprehend code. And you don't have to worry anymore about states that are illegal", "tokens": [51056, 3571, 281, 38183, 3089, 13, 400, 291, 500, 380, 362, 281, 3292, 3602, 466, 4368, 300, 366, 11905, 51368], "temperature": 0.0, "avg_logprob": -0.08676114678382874, "compression_ratio": 1.924187725631769, "no_speech_prob": 0.0021977208089083433}, {"id": 467, "seek": 263936, "start": 2659.44, "end": 2663.04, "text": " because you made them unrepresentable. So you don't have to think about them anymore. That's", "tokens": [51368, 570, 291, 1027, 552, 517, 19919, 11662, 712, 13, 407, 291, 500, 380, 362, 281, 519, 466, 552, 3602, 13, 663, 311, 51548], "temperature": 0.0, "avg_logprob": -0.08676114678382874, "compression_ratio": 1.924187725631769, "no_speech_prob": 0.0021977208089083433}, {"id": 468, "seek": 263936, "start": 2663.04, "end": 2667.36, "text": " a great thing to do. When you don't have to think about something, you can think about something", "tokens": [51548, 257, 869, 551, 281, 360, 13, 1133, 291, 500, 380, 362, 281, 519, 466, 746, 11, 291, 393, 519, 466, 746, 51764], "temperature": 0.0, "avg_logprob": -0.08676114678382874, "compression_ratio": 1.924187725631769, "no_speech_prob": 0.0021977208089083433}, {"id": 469, "seek": 266736, "start": 2667.36, "end": 2674.56, "text": " else, which might be useful. And so we saw a number of techniques to achieve this goal.", "tokens": [50364, 1646, 11, 597, 1062, 312, 4420, 13, 400, 370, 321, 1866, 257, 1230, 295, 7512, 281, 4584, 341, 3387, 13, 50724], "temperature": 0.0, "avg_logprob": -0.1998207304212782, "compression_ratio": 1.6118881118881119, "no_speech_prob": 0.0018144847126677632}, {"id": 470, "seek": 266736, "start": 2674.56, "end": 2679.28, "text": " So algebraic data types help us reduce the state space into something smaller and more", "tokens": [50724, 407, 21989, 299, 1412, 3467, 854, 505, 5407, 264, 1785, 1901, 666, 746, 4356, 293, 544, 50960], "temperature": 0.0, "avg_logprob": -0.1998207304212782, "compression_ratio": 1.6118881118881119, "no_speech_prob": 0.0018144847126677632}, {"id": 471, "seek": 266736, "start": 2679.28, "end": 2684.88, "text": " manageable. Smart constructors let us enforce various invariants and declarative signatures", "tokens": [50960, 38798, 13, 12923, 7690, 830, 718, 505, 24825, 3683, 33270, 1719, 293, 16694, 1166, 32322, 51240], "temperature": 0.0, "avg_logprob": -0.1998207304212782, "compression_ratio": 1.6118881118881119, "no_speech_prob": 0.0018144847126677632}, {"id": 472, "seek": 266736, "start": 2684.88, "end": 2690.1600000000003, "text": " make various business rules kind of apparent in our code. And parametric polyphysm is like a nice", "tokens": [51240, 652, 3683, 1606, 4474, 733, 295, 18335, 294, 527, 3089, 13, 400, 6220, 17475, 6754, 950, 749, 76, 307, 411, 257, 1481, 51504], "temperature": 0.0, "avg_logprob": -0.1998207304212782, "compression_ratio": 1.6118881118881119, "no_speech_prob": 0.0018144847126677632}, {"id": 473, "seek": 266736, "start": 2690.1600000000003, "end": 2696.48, "text": " cherry on top if you want to really kind of go at it even more limited. So there's a slide about", "tokens": [51504, 20164, 322, 1192, 498, 291, 528, 281, 534, 733, 295, 352, 412, 309, 754, 544, 5567, 13, 407, 456, 311, 257, 4137, 466, 51820], "temperature": 0.0, "avg_logprob": -0.1998207304212782, "compression_ratio": 1.6118881118881119, "no_speech_prob": 0.0018144847126677632}, {"id": 474, "seek": 269648, "start": 2696.48, "end": 2701.44, "text": " where to go next. So I covered some very basic techniques. There are other approaches that", "tokens": [50364, 689, 281, 352, 958, 13, 407, 286, 5343, 512, 588, 3875, 7512, 13, 821, 366, 661, 11587, 300, 50612], "temperature": 0.0, "avg_logprob": -0.08925801515579224, "compression_ratio": 1.713235294117647, "no_speech_prob": 0.004447119776159525}, {"id": 475, "seek": 269648, "start": 2701.44, "end": 2708.0, "text": " you can take, which probably have a steeper cost-benefit ratio. So it might be not worth it.", "tokens": [50612, 291, 393, 747, 11, 597, 1391, 362, 257, 16841, 260, 2063, 12, 41605, 6845, 8509, 13, 407, 309, 1062, 312, 406, 3163, 309, 13, 50940], "temperature": 0.0, "avg_logprob": -0.08925801515579224, "compression_ratio": 1.713235294117647, "no_speech_prob": 0.004447119776159525}, {"id": 476, "seek": 269648, "start": 2708.0, "end": 2713.36, "text": " But these are some ideas of what you can think of, especially various type systems. So a lot of the", "tokens": [50940, 583, 613, 366, 512, 3487, 295, 437, 291, 393, 519, 295, 11, 2318, 3683, 2010, 3652, 13, 407, 257, 688, 295, 264, 51208], "temperature": 0.0, "avg_logprob": -0.08925801515579224, "compression_ratio": 1.713235294117647, "no_speech_prob": 0.004447119776159525}, {"id": 477, "seek": 269648, "start": 2713.36, "end": 2718.8, "text": " things we've done are kind of bound by the type system that we're using. And so maybe trying", "tokens": [51208, 721, 321, 600, 1096, 366, 733, 295, 5472, 538, 264, 2010, 1185, 300, 321, 434, 1228, 13, 400, 370, 1310, 1382, 51480], "temperature": 0.0, "avg_logprob": -0.08925801515579224, "compression_ratio": 1.713235294117647, "no_speech_prob": 0.004447119776159525}, {"id": 478, "seek": 269648, "start": 2718.8, "end": 2726.08, "text": " other more advanced type systems or type system features can help you make things easier.", "tokens": [51480, 661, 544, 7339, 2010, 3652, 420, 2010, 1185, 4122, 393, 854, 291, 652, 721, 3571, 13, 51844], "temperature": 0.0, "avg_logprob": -0.08925801515579224, "compression_ratio": 1.713235294117647, "no_speech_prob": 0.004447119776159525}, {"id": 479, "seek": 272648, "start": 2726.48, "end": 2731.28, "text": " If you're taking a photo, you can do that. I'll post the link to the slide so everything is there.", "tokens": [50364, 759, 291, 434, 1940, 257, 5052, 11, 291, 393, 360, 300, 13, 286, 603, 2183, 264, 2113, 281, 264, 4137, 370, 1203, 307, 456, 13, 50604], "temperature": 0.0, "avg_logprob": -0.1612649406354452, "compression_ratio": 1.6624472573839661, "no_speech_prob": 0.003191353753209114}, {"id": 480, "seek": 272648, "start": 2731.28, "end": 2737.12, "text": " And there's some inspiration for various resources that I think are kind of useful in thinking about", "tokens": [50604, 400, 456, 311, 512, 10249, 337, 3683, 3593, 300, 286, 519, 366, 733, 295, 4420, 294, 1953, 466, 50896], "temperature": 0.0, "avg_logprob": -0.1612649406354452, "compression_ratio": 1.6624472573839661, "no_speech_prob": 0.003191353753209114}, {"id": 481, "seek": 272648, "start": 2737.12, "end": 2744.0, "text": " problems. And again, I'll post the link for the presentation. All the links will be available.", "tokens": [50896, 2740, 13, 400, 797, 11, 286, 603, 2183, 264, 2113, 337, 264, 5860, 13, 1057, 264, 6123, 486, 312, 2435, 13, 51240], "temperature": 0.0, "avg_logprob": -0.1612649406354452, "compression_ratio": 1.6624472573839661, "no_speech_prob": 0.003191353753209114}, {"id": 482, "seek": 272648, "start": 2744.0, "end": 2750.4, "text": " So it's my time to wrap up. So remember our poor little user that was trying to register and didn't", "tokens": [51240, 407, 309, 311, 452, 565, 281, 7019, 493, 13, 407, 1604, 527, 4716, 707, 4195, 300, 390, 1382, 281, 7280, 293, 994, 380, 51560], "temperature": 0.0, "avg_logprob": -0.1612649406354452, "compression_ratio": 1.6624472573839661, "no_speech_prob": 0.003191353753209114}, {"id": 483, "seek": 275040, "start": 2750.48, "end": 2757.2000000000003, "text": " have an email. So somewhere someone is trying to introduce another bug in our system. But luckily", "tokens": [50368, 362, 364, 3796, 13, 407, 4079, 1580, 307, 1382, 281, 5366, 1071, 7426, 294, 527, 1185, 13, 583, 22880, 50704], "temperature": 0.0, "avg_logprob": -0.1310468309381035, "compression_ratio": 1.6512605042016806, "no_speech_prob": 0.013216884806752205}, {"id": 484, "seek": 275040, "start": 2757.2000000000003, "end": 2764.2400000000002, "text": " we applied all the techniques that we studied right now. And it no longer compiles. The illegal", "tokens": [50704, 321, 6456, 439, 264, 7512, 300, 321, 9454, 558, 586, 13, 400, 309, 572, 2854, 715, 4680, 13, 440, 11905, 51056], "temperature": 0.0, "avg_logprob": -0.1310468309381035, "compression_ratio": 1.6512605042016806, "no_speech_prob": 0.013216884806752205}, {"id": 485, "seek": 275040, "start": 2764.2400000000002, "end": 2771.6800000000003, "text": " states is unrepresentable. The compiler tells us that and we can sleep quietly tonight. So hopefully", "tokens": [51056, 4368, 307, 517, 19919, 11662, 712, 13, 440, 31958, 5112, 505, 300, 293, 321, 393, 2817, 19141, 4440, 13, 407, 4696, 51428], "temperature": 0.0, "avg_logprob": -0.1310468309381035, "compression_ratio": 1.6512605042016806, "no_speech_prob": 0.013216884806752205}, {"id": 486, "seek": 275040, "start": 2771.6800000000003, "end": 2778.4, "text": " I managed to convince you that making illegal states unrepresentable is actually worth the effort.", "tokens": [51428, 286, 6453, 281, 13447, 291, 300, 1455, 11905, 4368, 517, 19919, 11662, 712, 307, 767, 3163, 264, 4630, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1310468309381035, "compression_ratio": 1.6512605042016806, "no_speech_prob": 0.013216884806752205}, {"id": 487, "seek": 277840, "start": 2778.4, "end": 2783.52, "text": " And this is linked to the presentation. And if I have time for questions, I'm not sure.", "tokens": [50364, 400, 341, 307, 9408, 281, 264, 5860, 13, 400, 498, 286, 362, 565, 337, 1651, 11, 286, 478, 406, 988, 13, 50620], "temperature": 0.0, "avg_logprob": -0.15654492959743593, "compression_ratio": 1.5324074074074074, "no_speech_prob": 0.017951693385839462}, {"id": 488, "seek": 277840, "start": 2784.2400000000002, "end": 2787.84, "text": " Yes, we can try to take one online question first, maybe.", "tokens": [50656, 1079, 11, 321, 393, 853, 281, 747, 472, 2950, 1168, 700, 11, 1310, 13, 50836], "temperature": 0.0, "avg_logprob": -0.15654492959743593, "compression_ratio": 1.5324074074074074, "no_speech_prob": 0.017951693385839462}, {"id": 489, "seek": 277840, "start": 2792.8, "end": 2797.28, "text": " Can you please read it out for our audience? I guess you're in favor of using something like", "tokens": [51084, 1664, 291, 1767, 1401, 309, 484, 337, 527, 4034, 30, 286, 2041, 291, 434, 294, 2294, 295, 1228, 746, 411, 51308], "temperature": 0.0, "avg_logprob": -0.15654492959743593, "compression_ratio": 1.5324074074074074, "no_speech_prob": 0.017951693385839462}, {"id": 490, "seek": 277840, "start": 2797.28, "end": 2802.08, "text": " refined to express even more constraints in types instead of custom smart constructors. Yes,", "tokens": [51308, 26201, 281, 5109, 754, 544, 18491, 294, 3467, 2602, 295, 2375, 4069, 7690, 830, 13, 1079, 11, 51548], "temperature": 0.0, "avg_logprob": -0.15654492959743593, "compression_ratio": 1.5324074074074074, "no_speech_prob": 0.017951693385839462}, {"id": 491, "seek": 280208, "start": 2802.48, "end": 2811.7599999999998, "text": " the one of the last slides, I used refined as there's a link to the refined library here in", "tokens": [50384, 264, 472, 295, 264, 1036, 9788, 11, 286, 1143, 26201, 382, 456, 311, 257, 2113, 281, 264, 26201, 6405, 510, 294, 50848], "temperature": 0.0, "avg_logprob": -0.13425432551990857, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.017922163009643555}, {"id": 492, "seek": 280208, "start": 2811.7599999999998, "end": 2817.36, "text": " the end. So yes, refined is a nice library that can help you automate the process of creating", "tokens": [50848, 264, 917, 13, 407, 2086, 11, 26201, 307, 257, 1481, 6405, 300, 393, 854, 291, 31605, 264, 1399, 295, 4084, 51128], "temperature": 0.0, "avg_logprob": -0.13425432551990857, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.017922163009643555}, {"id": 493, "seek": 280208, "start": 2817.36, "end": 2822.24, "text": " smart constructors. Instead of writing them manually by hand, you can use a library that", "tokens": [51128, 4069, 7690, 830, 13, 7156, 295, 3579, 552, 16945, 538, 1011, 11, 291, 393, 764, 257, 6405, 300, 51372], "temperature": 0.0, "avg_logprob": -0.13425432551990857, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.017922163009643555}, {"id": 494, "seek": 280208, "start": 2822.24, "end": 2827.6, "text": " helps with that. All right. Thank you. We have also one question here on site.", "tokens": [51372, 3665, 365, 300, 13, 1057, 558, 13, 1044, 291, 13, 492, 362, 611, 472, 1168, 510, 322, 3621, 13, 51640], "temperature": 0.0, "avg_logprob": -0.13425432551990857, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.017922163009643555}, {"id": 495, "seek": 282760, "start": 2828.3199999999997, "end": 2835.68, "text": " Hi. So thanks for the great talk. In the example about algebraic data types.", "tokens": [50400, 2421, 13, 407, 3231, 337, 264, 869, 751, 13, 682, 264, 1365, 466, 21989, 299, 1412, 3467, 13, 50768], "temperature": 0.0, "avg_logprob": -0.2370477318763733, "compression_ratio": 1.4802259887005649, "no_speech_prob": 0.04472607001662254}, {"id": 496, "seek": 282760, "start": 2841.52, "end": 2848.0, "text": " It was the example of ordering different types of coffee. But what happens if the coffee shop", "tokens": [51060, 467, 390, 264, 1365, 295, 21739, 819, 3467, 295, 4982, 13, 583, 437, 2314, 498, 264, 4982, 3945, 51384], "temperature": 0.0, "avg_logprob": -0.2370477318763733, "compression_ratio": 1.4802259887005649, "no_speech_prob": 0.04472607001662254}, {"id": 497, "seek": 282760, "start": 2848.0, "end": 2854.4, "text": " owners have a business requirement that at any point of time, she wants to be able to add a", "tokens": [51384, 7710, 362, 257, 1606, 11695, 300, 412, 604, 935, 295, 565, 11, 750, 2738, 281, 312, 1075, 281, 909, 257, 51704], "temperature": 0.0, "avg_logprob": -0.2370477318763733, "compression_ratio": 1.4802259887005649, "no_speech_prob": 0.04472607001662254}, {"id": 498, "seek": 285440, "start": 2854.4, "end": 2859.28, "text": " new type of the coffee? So what happens to our algebraic data types with such a requirement?", "tokens": [50364, 777, 2010, 295, 264, 4982, 30, 407, 437, 2314, 281, 527, 21989, 299, 1412, 3467, 365, 1270, 257, 11695, 30, 50608], "temperature": 0.0, "avg_logprob": -0.128940453400483, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.007486903574317694}, {"id": 499, "seek": 285440, "start": 2859.28, "end": 2865.36, "text": " So there's often kind of people debating whether types are useful or not, or kind of this conception", "tokens": [50608, 407, 456, 311, 2049, 733, 295, 561, 40647, 1968, 3467, 366, 4420, 420, 406, 11, 420, 733, 295, 341, 30698, 50912], "temperature": 0.0, "avg_logprob": -0.128940453400483, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.007486903574317694}, {"id": 500, "seek": 285440, "start": 2865.36, "end": 2870.32, "text": " that you have to go all in or nothing. So either you specify everything and everything is fixed", "tokens": [50912, 300, 291, 362, 281, 352, 439, 294, 420, 1825, 13, 407, 2139, 291, 16500, 1203, 293, 1203, 307, 6806, 51160], "temperature": 0.0, "avg_logprob": -0.128940453400483, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.007486903574317694}, {"id": 501, "seek": 285440, "start": 2870.32, "end": 2875.76, "text": " in types or not. This is not the case. If you want some flexibility, you can live that measure", "tokens": [51160, 294, 3467, 420, 406, 13, 639, 307, 406, 264, 1389, 13, 759, 291, 528, 512, 12635, 11, 291, 393, 1621, 300, 3481, 51432], "temperature": 0.0, "avg_logprob": -0.128940453400483, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.007486903574317694}, {"id": 502, "seek": 285440, "start": 2875.76, "end": 2880.96, "text": " of flexibility as your requirements desire. So in the case of maybe having another case which is", "tokens": [51432, 295, 12635, 382, 428, 7728, 7516, 13, 407, 294, 264, 1389, 295, 1310, 1419, 1071, 1389, 597, 307, 51692], "temperature": 0.0, "avg_logprob": -0.128940453400483, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.007486903574317694}, {"id": 503, "seek": 288096, "start": 2881.04, "end": 2885.2, "text": " more dynamically defined, maybe have another case which is dynamic. And then you'll be extra", "tokens": [50368, 544, 43492, 7642, 11, 1310, 362, 1071, 1389, 597, 307, 8546, 13, 400, 550, 291, 603, 312, 2857, 50576], "temperature": 0.0, "avg_logprob": -0.09611338927966206, "compression_ratio": 1.7737226277372262, "no_speech_prob": 0.010170463472604752}, {"id": 504, "seek": 288096, "start": 2885.2, "end": 2890.48, "text": " careful around that case. But still, you now have a small island of sanity where you know what's", "tokens": [50576, 5026, 926, 300, 1389, 13, 583, 920, 11, 291, 586, 362, 257, 1359, 6077, 295, 47892, 689, 291, 458, 437, 311, 50840], "temperature": 0.0, "avg_logprob": -0.09611338927966206, "compression_ratio": 1.7737226277372262, "no_speech_prob": 0.010170463472604752}, {"id": 505, "seek": 288096, "start": 2890.48, "end": 2895.36, "text": " going on and another section of the code which is not as pleasant and safe. But still, you can", "tokens": [50840, 516, 322, 293, 1071, 3541, 295, 264, 3089, 597, 307, 406, 382, 16232, 293, 3273, 13, 583, 920, 11, 291, 393, 51084], "temperature": 0.0, "avg_logprob": -0.09611338927966206, "compression_ratio": 1.7737226277372262, "no_speech_prob": 0.010170463472604752}, {"id": 506, "seek": 288096, "start": 2895.36, "end": 2900.08, "text": " separate the parts. What you know, you can encode. What you don't, leave it as an unknown and handle", "tokens": [51084, 4994, 264, 3166, 13, 708, 291, 458, 11, 291, 393, 2058, 1429, 13, 708, 291, 500, 380, 11, 1856, 309, 382, 364, 9841, 293, 4813, 51320], "temperature": 0.0, "avg_logprob": -0.09611338927966206, "compression_ratio": 1.7737226277372262, "no_speech_prob": 0.010170463472604752}, {"id": 507, "seek": 288096, "start": 2900.08, "end": 2905.84, "text": " it appropriately. Okay. Thank you. We have one more online question. If you could again, please read", "tokens": [51320, 309, 23505, 13, 1033, 13, 1044, 291, 13, 492, 362, 472, 544, 2950, 1168, 13, 759, 291, 727, 797, 11, 1767, 1401, 51608], "temperature": 0.0, "avg_logprob": -0.09611338927966206, "compression_ratio": 1.7737226277372262, "no_speech_prob": 0.010170463472604752}, {"id": 508, "seek": 290584, "start": 2905.92, "end": 2913.6800000000003, "text": " it out. So only recently I started learning Haskell and Idris from the perspective of making", "tokens": [50368, 309, 484, 13, 407, 787, 3938, 286, 1409, 2539, 8646, 43723, 293, 11506, 5714, 490, 264, 4585, 295, 1455, 50756], "temperature": 0.0, "avg_logprob": -0.14145554195750842, "compression_ratio": 1.5921052631578947, "no_speech_prob": 0.016810188069939613}, {"id": 509, "seek": 290584, "start": 2913.6800000000003, "end": 2917.6000000000004, "text": " illegal states not representable. It seems to me that type-driven development", "tokens": [50756, 11905, 4368, 406, 2906, 712, 13, 467, 2544, 281, 385, 300, 2010, 12, 25456, 3250, 50952], "temperature": 0.0, "avg_logprob": -0.14145554195750842, "compression_ratio": 1.5921052631578947, "no_speech_prob": 0.016810188069939613}, {"id": 510, "seek": 290584, "start": 2917.6000000000004, "end": 2924.32, "text": " advocated by Idris is more suitable. Then again, I'm a beginner. So yes, Haskell and Idris both", "tokens": [50952, 7915, 770, 538, 11506, 5714, 307, 544, 12873, 13, 1396, 797, 11, 286, 478, 257, 22080, 13, 407, 2086, 11, 8646, 43723, 293, 11506, 5714, 1293, 51288], "temperature": 0.0, "avg_logprob": -0.14145554195750842, "compression_ratio": 1.5921052631578947, "no_speech_prob": 0.016810188069939613}, {"id": 511, "seek": 290584, "start": 2924.32, "end": 2931.6000000000004, "text": " have various advanced type-level features and things you can do that make it possible to exclude", "tokens": [51288, 362, 3683, 7339, 2010, 12, 12418, 4122, 293, 721, 291, 393, 360, 300, 652, 309, 1944, 281, 33536, 51652], "temperature": 0.0, "avg_logprob": -0.14145554195750842, "compression_ratio": 1.5921052631578947, "no_speech_prob": 0.016810188069939613}, {"id": 512, "seek": 293160, "start": 2931.68, "end": 2937.7599999999998, "text": " even more illegal states. And as I mentioned, using more advanced type systems is a good way", "tokens": [50368, 754, 544, 11905, 4368, 13, 400, 382, 286, 2835, 11, 1228, 544, 7339, 2010, 3652, 307, 257, 665, 636, 50672], "temperature": 0.0, "avg_logprob": -0.0859553948888239, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.01526597235351801}, {"id": 513, "seek": 293160, "start": 2938.64, "end": 2944.96, "text": " to enforce more invariance. But the question is kind of the cost, whether it's worth it,", "tokens": [50716, 281, 24825, 544, 33270, 719, 13, 583, 264, 1168, 307, 733, 295, 264, 2063, 11, 1968, 309, 311, 3163, 309, 11, 51032], "temperature": 0.0, "avg_logprob": -0.0859553948888239, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.01526597235351801}, {"id": 514, "seek": 293160, "start": 2944.96, "end": 2949.8399999999997, "text": " especially as a beginner, because if you play something very, very kind of a heavy tool that", "tokens": [51032, 2318, 382, 257, 22080, 11, 570, 498, 291, 862, 746, 588, 11, 588, 733, 295, 257, 4676, 2290, 300, 51276], "temperature": 0.0, "avg_logprob": -0.0859553948888239, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.01526597235351801}, {"id": 515, "seek": 293160, "start": 2949.8399999999997, "end": 2954.72, "text": " does something very sophisticated, it might be more difficult to maintain. So I think you", "tokens": [51276, 775, 746, 588, 16950, 11, 309, 1062, 312, 544, 2252, 281, 6909, 13, 407, 286, 519, 291, 51520], "temperature": 0.0, "avg_logprob": -0.0859553948888239, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.01526597235351801}, {"id": 516, "seek": 293160, "start": 2954.72, "end": 2959.44, "text": " should kind of gradually ramp up there and eventually maybe use it, but have a good way", "tokens": [51520, 820, 733, 295, 13145, 12428, 493, 456, 293, 4728, 1310, 764, 309, 11, 457, 362, 257, 665, 636, 51756], "temperature": 0.0, "avg_logprob": -0.0859553948888239, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.01526597235351801}, {"id": 517, "seek": 295944, "start": 2959.44, "end": 2963.36, "text": " to judge whether it's worth it or not. So start simple and then gradually improve.", "tokens": [50364, 281, 6995, 1968, 309, 311, 3163, 309, 420, 406, 13, 407, 722, 2199, 293, 550, 13145, 3470, 13, 50560], "temperature": 0.0, "avg_logprob": -0.10783573332287016, "compression_ratio": 1.6, "no_speech_prob": 0.010576631873846054}, {"id": 518, "seek": 295944, "start": 2964.16, "end": 2968.16, "text": " All the things I did mention now are available in both Haskell and Idris. So that's not", "tokens": [50600, 1057, 264, 721, 286, 630, 2152, 586, 366, 2435, 294, 1293, 8646, 43723, 293, 11506, 5714, 13, 407, 300, 311, 406, 50800], "temperature": 0.0, "avg_logprob": -0.10783573332287016, "compression_ratio": 1.6, "no_speech_prob": 0.010576631873846054}, {"id": 519, "seek": 295944, "start": 2968.16, "end": 2973.2000000000003, "text": " actually a problem. And you can start there and move on to something more advanced. Okay. We", "tokens": [50800, 767, 257, 1154, 13, 400, 291, 393, 722, 456, 293, 1286, 322, 281, 746, 544, 7339, 13, 1033, 13, 492, 51052], "temperature": 0.0, "avg_logprob": -0.10783573332287016, "compression_ratio": 1.6, "no_speech_prob": 0.010576631873846054}, {"id": 520, "seek": 295944, "start": 2973.2000000000003, "end": 2980.88, "text": " have time for one last onsite question here. Thanks for a great talk. I'm wondering if any", "tokens": [51052, 362, 565, 337, 472, 1036, 18818, 642, 1168, 510, 13, 2561, 337, 257, 869, 751, 13, 286, 478, 6359, 498, 604, 51436], "temperature": 0.0, "avg_logprob": -0.10783573332287016, "compression_ratio": 1.6, "no_speech_prob": 0.010576631873846054}, {"id": 521, "seek": 295944, "start": 2980.88, "end": 2985.36, "text": " of the techniques that you mentioned are applicable in dynamically checked languages?", "tokens": [51436, 295, 264, 7512, 300, 291, 2835, 366, 21142, 294, 43492, 10033, 8650, 30, 51660], "temperature": 0.0, "avg_logprob": -0.10783573332287016, "compression_ratio": 1.6, "no_speech_prob": 0.010576631873846054}, {"id": 522, "seek": 298536, "start": 2985.36, "end": 2992.7200000000003, "text": " And if you have an experience in doing so, maybe? So in dynamically typed languages, everything's", "tokens": [50364, 400, 498, 291, 362, 364, 1752, 294, 884, 370, 11, 1310, 30, 407, 294, 43492, 33941, 8650, 11, 1203, 311, 50732], "temperature": 0.0, "avg_logprob": -0.13513542073113577, "compression_ratio": 1.7426470588235294, "no_speech_prob": 0.0037357090041041374}, {"id": 523, "seek": 298536, "start": 2992.7200000000003, "end": 2997.36, "text": " applicable. You can write anything. The question is whether who enforces things for you. So in", "tokens": [50732, 21142, 13, 509, 393, 2464, 1340, 13, 440, 1168, 307, 1968, 567, 25495, 887, 721, 337, 291, 13, 407, 294, 50964], "temperature": 0.0, "avg_logprob": -0.13513542073113577, "compression_ratio": 1.7426470588235294, "no_speech_prob": 0.0037357090041041374}, {"id": 524, "seek": 298536, "start": 2997.36, "end": 3002.48, "text": " a statically typed language, the compiler is much more your friend than people usually think.", "tokens": [50964, 257, 2219, 984, 33941, 2856, 11, 264, 31958, 307, 709, 544, 428, 1277, 813, 561, 2673, 519, 13, 51220], "temperature": 0.0, "avg_logprob": -0.13513542073113577, "compression_ratio": 1.7426470588235294, "no_speech_prob": 0.0037357090041041374}, {"id": 525, "seek": 298536, "start": 3003.6, "end": 3007.36, "text": " And then in dynamically typed language, first of all, just thinking about the state space,", "tokens": [51276, 400, 550, 294, 43492, 33941, 2856, 11, 700, 295, 439, 11, 445, 1953, 466, 264, 1785, 1901, 11, 51464], "temperature": 0.0, "avg_logprob": -0.13513542073113577, "compression_ratio": 1.7426470588235294, "no_speech_prob": 0.0037357090041041374}, {"id": 526, "seek": 298536, "start": 3007.36, "end": 3010.7200000000003, "text": " you can do it in any language on a piece of paper. It doesn't really matter. And it's already an", "tokens": [51464, 291, 393, 360, 309, 294, 604, 2856, 322, 257, 2522, 295, 3035, 13, 467, 1177, 380, 534, 1871, 13, 400, 309, 311, 1217, 364, 51632], "temperature": 0.0, "avg_logprob": -0.13513542073113577, "compression_ratio": 1.7426470588235294, "no_speech_prob": 0.0037357090041041374}, {"id": 527, "seek": 301072, "start": 3010.72, "end": 3016.64, "text": " improvement. And then if you are explicit about what's illegal, at least you can force your", "tokens": [50364, 10444, 13, 400, 550, 498, 291, 366, 13691, 466, 437, 311, 11905, 11, 412, 1935, 291, 393, 3464, 428, 50660], "temperature": 0.0, "avg_logprob": -0.12768738358109086, "compression_ratio": 1.6494845360824741, "no_speech_prob": 0.005778288934379816}, {"id": 528, "seek": 301072, "start": 3016.64, "end": 3022.16, "text": " invariance even in a dynamic context. For example, your smart constructor won't return an optional", "tokens": [50660, 33270, 719, 754, 294, 257, 8546, 4319, 13, 1171, 1365, 11, 428, 4069, 47479, 1582, 380, 2736, 364, 17312, 50936], "temperature": 0.0, "avg_logprob": -0.12768738358109086, "compression_ratio": 1.6494845360824741, "no_speech_prob": 0.005778288934379816}, {"id": 529, "seek": 301072, "start": 3022.16, "end": 3027.68, "text": " value, but will throw an exception. But at least you limited the scope of where things can go", "tokens": [50936, 2158, 11, 457, 486, 3507, 364, 11183, 13, 583, 412, 1935, 291, 5567, 264, 11923, 295, 689, 721, 393, 352, 51212], "temperature": 0.0, "avg_logprob": -0.12768738358109086, "compression_ratio": 1.6494845360824741, "no_speech_prob": 0.005778288934379816}, {"id": 530, "seek": 301072, "start": 3027.68, "end": 3032.56, "text": " wrong, for example. And pattern matching is available in various languages. Although there are no,", "tokens": [51212, 2085, 11, 337, 1365, 13, 400, 5102, 14324, 307, 2435, 294, 3683, 8650, 13, 5780, 456, 366, 572, 11, 51456], "temperature": 0.0, "avg_logprob": -0.12768738358109086, "compression_ratio": 1.6494845360824741, "no_speech_prob": 0.005778288934379816}, {"id": 531, "seek": 301072, "start": 3032.56, "end": 3037.7599999999998, "text": " the guarantees might be somewhat looser, but still it's better than nothing. So those approaches", "tokens": [51456, 264, 32567, 1062, 312, 8344, 450, 22150, 11, 457, 920, 309, 311, 1101, 813, 1825, 13, 407, 729, 11587, 51716], "temperature": 0.0, "avg_logprob": -0.12768738358109086, "compression_ratio": 1.6494845360824741, "no_speech_prob": 0.005778288934379816}, {"id": 532, "seek": 303776, "start": 3037.76, "end": 3043.44, "text": " can help you, but they won't gain you as much benefit as they are in a statically typed language,", "tokens": [50364, 393, 854, 291, 11, 457, 436, 1582, 380, 6052, 291, 382, 709, 5121, 382, 436, 366, 294, 257, 2219, 984, 33941, 2856, 11, 50648], "temperature": 0.0, "avg_logprob": -0.17677635842181266, "compression_ratio": 1.2835820895522387, "no_speech_prob": 0.025114230811595917}, {"id": 533, "seek": 303776, "start": 3043.44, "end": 3053.6800000000003, "text": " I think. All right. Thank you very much, Daniel. Please help me thank him.", "tokens": [50648, 286, 519, 13, 1057, 558, 13, 1044, 291, 588, 709, 11, 8033, 13, 2555, 854, 385, 1309, 796, 13, 51160], "temperature": 0.0, "avg_logprob": -0.17677635842181266, "compression_ratio": 1.2835820895522387, "no_speech_prob": 0.025114230811595917}], "language": "en"}