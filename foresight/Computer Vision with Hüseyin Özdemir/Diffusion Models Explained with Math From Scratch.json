{"text": " Hi, in this video I will talk about diffusion models. First, the references for this video. Denoising diffusion probabilistic models. Improved denoising diffusion probabilistic models. Understanding diffusion models a unified perspective. Let's begin with standard Gaussian distribution. In order to generate the sample from standard Gaussian distribution, one method is to use cumulative distribution function. A value is sampled uniformly on y-axis between 0 and 1. Y value is mapped to x-axis. And x-value is a sample from standard Gaussian distribution. What if we want a new BERT image from distribution of BERT images? Problem is that we don't know the probability distribution of BERT images. In generator AI, the aim is to estimate and sample from high-dimensional complex data distribution. A deep neural network can be used to learn or model an approximate distribution using large amount of data. A diffusion model is a type of generator model. Training requires two types of processes. In forward process, training image is distracted with noise. In reverse process, it is learned how to recover training image. After training, reverse process is used to generate new samples. Let's inspect them in full detail. Forward process. X0 is a training image sampled from a real image distribution. In forward process, noise is added to training image iteratively. Noise addition is performed according to this equation. Xt is noisy image at time step t. Xt-1 is noisy image at time step t-1. Epsilon t-1 is noise sampled from standard Gaussian distribution. Beta t is variance parameter for time step t. At the beginning of forward process, X0 is mapped to minus 1, 1 interval. Xt-1 is scaled down, that is pixel values approach 0 to keep them at a certain range after noise addition. Standard Gaussian noise is scaled to adjust the variance of added noise. X capital t approaches standard Gaussian noise for large capital t, for example 1000. Set of beta t values is called variance schedule. Xt depends on Xt-1 and does not depend on other time steps. So forward process is a Markov process. Using reparameterization Q of Xt given Xt-1, the transition step of forward process can be expressed as a Gaussian distribution. So forward process can be written as a joint probability distribution conditioned on X0. It is possible to obtain Xt directly from X0. Define alpha t as 1 minus beta t. Write the equation for Xt. Then inside the equation expand Xt-1. Epsilons are independent and identically distributed noise samples. On the right hand side of the equation there are two noise components epsilon t-1 and epsilon t-2. Since these noise samples are Gaussian, their sum is also Gaussian with variance as the sum of their variances. If we continue the same way a pattern shows up. Xt can be written in terms of X0 and noise using alpha bar, cumulative multiplication of alpha values. Variance schedule. Variance of edit noise is controlled with beta t. If beta t increases linearly from beta 1 to beta capital T, then it is linear variance schedule. Another alternative is cosine variance schedule. And these are the related equations. These are the samples created with linear variance schedule. And cosine variance schedule. It is obvious that structures in the image are lost too early with linear schedule. And lots of samples resemble pure noise. By looking at beta t versus time step graph, with cosine schedule less noise is added until later time steps. And alpha bar t versus time step graph shows that with linear schedule alpha bar t value decreases faster. Reverse process. Transitions in forward process are known and controlled with hyperparameter beta t. In reverse process the aim is to construct X0 iteratively. Starting with noise image X capital T. Reverse process is also a Markov chain. Reverse process can be expressed as a joint probability distribution. X capital T is sampled from standard Gaussian distribution. P theta of XT minus 1 given XT is a transition in reverse process. X0 is observed or known variable. X1 to X capital T are hidden or latent variables. We need to find parameters such that the likelihood of sampling or observing X0 is maximum. Integrating joint distribution over latent variables to obtain marginal distribution of X0 is intractable. Because different Markov chains starting at different X capital T can lead to same X0. Another option is to weave the problem from variational Bayesian perspective. Maximizing log likelihood is equivalent to maximizing likelihood. Because logarithm is a monotonically increasing function. Inside the integral reverse joint distribution is multiplied and divided by forward joint distribution. To incorporate forward process into the equation. Expected value of a random variable is a weighted average. X is the value of random variable. And weight function is probability distribution. In our case the weight function is the joint distribution of forward process. So we can replace integral with an expectation operator. Note that log is a concave function. Let's take two points X1 and X2 on X axis. And their linear combination. Log of linear combination is greater than or equal to the linear combination of log values. This is Jensen's inequality. Interchanging the places of expectation and logarithm. The equation is converted to an inequality. Log likelihood is the evidence. And right hand side is evidence lower bound. It is also called variational lower bound. Maximizing VLB means maximizing evidence. Joint distributions can be written as multiplications of Gaussian transitions. Take t equals one terms out of product operators. By adding x0 it is explicitly shown that forward process is conditioned on x0. It is added because the beginning of forward Markov chain is a target for the reverse Markov chain. Apply Bayes rule in denominator. The direction of reverse Markov chain is fixed thanks to conditioning on x0. Xt minus one is in somewhere between Xt and X0. Let's expand the expression inside product operator in denominator. Some terms cancel each other out. Rearranging denominator we get this equation. One more cancellation in denominator. Right hand side can be written as a sum of expected values. As a side note the expected value of x over joint distribution of x and y is equal to expected value of x over its marginal distribution. If a latent variable is not present inside expectation then it has no effect on expected value. Unrelated latent variables are removed from waiting distribution. Distributions inside colored rectangles are different. We can find a relation between those two using Bayes rule. Now there is one more expectation for the right most term. Two of the expectations can be written as KL divergences. Now we have VLB expression. Minus VLB is minimized with gradient descent instead of maximizing VLB. There are three terms L0, LT minus one and L-capitality. L-capitality is constant with respect to data and can be ignored. Computing L0 Less step of reverse process can be designed as an independent discrete decoder. Here is the related distribution. And bounds of integrals. Image data is comprised of integers between 0 and 255. Mu theta i is the predicted value for x0i. For the height coordinate a Gaussian with mean mu theta i and variance sigma 1 square is used. X0i is the ground root. And bounds of integral. Consider this example case. Then these are the related numbers. Same operation is performed for all decoordinates and integration results are multiplied. If predicted image is close to ground root training image x0, then p theta of x0 given x1 is high. Deriving simple loss by minimizing LT minus one term. Let's begin with reverse transition conditioned on x0. Apply Bayes rule to find the relation between forward and backward transitions. Forward Markov chain is already conditioned on x0. These three distributions are Gaussian. Let's write their functional expressions. And combine the exponential terms. Expand square terms. And rearrange the equation. Start equalizing denominators inside parentheses. Inside exponential factor out the common term. Now notice the quadratic expression starting with xt minus one square. That quadratic expression can be written as square of difference of two terms. And resulting expression is a Gaussian distribution. Note that x0 is available only in training. So approximation should be performed without x0. Using noise addition equation from forward process. Mean of reverse transition can be written in terms of xt and epsilon. For reverse process ground route is approximated with learn transition. Since reference is Gaussian, its approximation is also modeled as Gaussian. In the DPM paper covariance is fixed and only mean is learned. Noise addition in forward process. Reverse transition. KL divergence is a measure of dissimilarity. We need to find parameters minimizing the expression inside arc mean. Expression inside rectangle is KL divergence between two Gaussians. Let's use the equations for covariance and means. Simplifying we get this equation. This is the resulting expression. In practice time step dependent multiplier can be set to one. In VLB expression xt minus one terms are summed for t is greater than one. So there is one more expectation. Here is the loss equation. It is called simple loss. And expectation is over time step x0 and epsilon. Note that simple loss is obtained minimizing xt minus one term. And xt minus one is defined for t is greater than one. So what happens when t is equal to one? Remember discrete decoder from previous section. Using simple loss when t is equal to one means approximating discrete decoder. Integral is replaced by multiplication of Gaussian density and bandwidth. Here is the illustration for the height coordinate. Area of the rectangle is computed instead of integral. Let's write functional expression of Gaussian. X0 is the original training image. Mu theta is the predicted image. Take log of both sides. C is constant with respect to theta. Use forward and reverse transition equations. Note that alpha bar one is equal to alpha one. Ignoring variance and constant term the resultant expression is equal to simple loss. Training. Unit is used to model transitions in reverse process. And it has three parts. Encoder decreases spatial resolution. Increases number of channels. Button neck. Decoder increases spatial resolution. Decreases number of channels. Skip connections transfer features from encoder to decoder. For diffusion models unit has two inputs. Noise image and time step. Predicted noise is the output. Theta is model parameters. Self-attention blocks and group normalization layers are added to improve performance. Time step signal is fed to all residual blocks inside unit after sinusoidal position embedding. Time step signal is needed because noise added in forward process and predicted in reverse process depends on time step. For each training image in the minibatch. A time step is sampled uniformly between one and capital T. Noisy image is created. Noisy image and time step are fed to unit. Noise is predicted. Loss and gradient are computed. Sampling. After finishing training any sample X0 can be generated as a result of an iterative process starting at time step capital T with a noise image. Markov transitions are computed for all time steps until X0 is obtained. Transition equation is obtained using reparameterization. This expression implies a probability distribution. As X0, any image is needed, not a distribution. So Z is 0 when T is equal to 1. Also remember that during training with simple loss, discrete decoder for L0 term focuses on the distance between mu theta and X0. Approximated discrete decoder even ignores variance completely. Learning covariance. We have seen the method with learned mean and fixed covariance. In practice setting variance to beta T or beta tilde T provides similar sample quality. It is possible to design reverse process transitions with learned mean and learned covariance. These are two extreme values for variance. Instead of predicting variance directly, network learns to make linear interpolation between two extremes in log domain. Network predicts V and V controls interpolation. Simple loss doesn't depend on covariance so loss expression is modified. Creating descent is designed such that VLV loss guides covariance and has no effect on mean. That's all for this video. See you next time.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.0, "text": " Hi, in this video I will talk about diffusion models.", "tokens": [50364, 2421, 11, 294, 341, 960, 286, 486, 751, 466, 25242, 5245, 13, 50664], "temperature": 0.0, "avg_logprob": -0.3201014730665419, "compression_ratio": 1.33, "no_speech_prob": 0.02471187524497509}, {"id": 1, "seek": 0, "start": 6.0, "end": 13.0, "text": " First, the references for this video.", "tokens": [50664, 2386, 11, 264, 15400, 337, 341, 960, 13, 51014], "temperature": 0.0, "avg_logprob": -0.3201014730665419, "compression_ratio": 1.33, "no_speech_prob": 0.02471187524497509}, {"id": 2, "seek": 0, "start": 13.0, "end": 21.0, "text": " Denoising diffusion probabilistic models.", "tokens": [51014, 413, 5808, 3436, 25242, 31959, 3142, 5245, 13, 51414], "temperature": 0.0, "avg_logprob": -0.3201014730665419, "compression_ratio": 1.33, "no_speech_prob": 0.02471187524497509}, {"id": 3, "seek": 2100, "start": 21.0, "end": 30.0, "text": " Improved denoising diffusion probabilistic models.", "tokens": [50364, 8270, 340, 937, 1441, 78, 3436, 25242, 31959, 3142, 5245, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09679664583767161, "compression_ratio": 1.3189655172413792, "no_speech_prob": 0.003782161045819521}, {"id": 4, "seek": 2100, "start": 30.0, "end": 39.0, "text": " Understanding diffusion models a unified perspective.", "tokens": [50814, 36858, 25242, 5245, 257, 26787, 4585, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09679664583767161, "compression_ratio": 1.3189655172413792, "no_speech_prob": 0.003782161045819521}, {"id": 5, "seek": 2100, "start": 39.0, "end": 45.0, "text": " Let's begin with standard Gaussian distribution.", "tokens": [51264, 961, 311, 1841, 365, 3832, 39148, 7316, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09679664583767161, "compression_ratio": 1.3189655172413792, "no_speech_prob": 0.003782161045819521}, {"id": 6, "seek": 4500, "start": 45.0, "end": 55.0, "text": " In order to generate the sample from standard Gaussian distribution, one method is to use cumulative distribution function.", "tokens": [50364, 682, 1668, 281, 8460, 264, 6889, 490, 3832, 39148, 7316, 11, 472, 3170, 307, 281, 764, 38379, 7316, 2445, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08106206013606145, "compression_ratio": 1.395973154362416, "no_speech_prob": 0.02051634155213833}, {"id": 7, "seek": 4500, "start": 55.0, "end": 62.0, "text": " A value is sampled uniformly on y-axis between 0 and 1.", "tokens": [50864, 316, 2158, 307, 3247, 15551, 48806, 322, 288, 12, 24633, 1296, 1958, 293, 502, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08106206013606145, "compression_ratio": 1.395973154362416, "no_speech_prob": 0.02051634155213833}, {"id": 8, "seek": 4500, "start": 62.0, "end": 68.0, "text": " Y value is mapped to x-axis.", "tokens": [51214, 398, 2158, 307, 33318, 281, 2031, 12, 24633, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08106206013606145, "compression_ratio": 1.395973154362416, "no_speech_prob": 0.02051634155213833}, {"id": 9, "seek": 6800, "start": 68.0, "end": 78.0, "text": " And x-value is a sample from standard Gaussian distribution.", "tokens": [50364, 400, 2031, 12, 29155, 307, 257, 6889, 490, 3832, 39148, 7316, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09443906709259632, "compression_ratio": 1.507462686567164, "no_speech_prob": 0.014019087888300419}, {"id": 10, "seek": 6800, "start": 78.0, "end": 85.0, "text": " What if we want a new BERT image from distribution of BERT images?", "tokens": [50864, 708, 498, 321, 528, 257, 777, 363, 31479, 3256, 490, 7316, 295, 363, 31479, 5267, 30, 51214], "temperature": 0.0, "avg_logprob": -0.09443906709259632, "compression_ratio": 1.507462686567164, "no_speech_prob": 0.014019087888300419}, {"id": 11, "seek": 6800, "start": 85.0, "end": 92.0, "text": " Problem is that we don't know the probability distribution of BERT images.", "tokens": [51214, 11676, 307, 300, 321, 500, 380, 458, 264, 8482, 7316, 295, 363, 31479, 5267, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09443906709259632, "compression_ratio": 1.507462686567164, "no_speech_prob": 0.014019087888300419}, {"id": 12, "seek": 9200, "start": 92.0, "end": 101.0, "text": " In generator AI, the aim is to estimate and sample from high-dimensional complex data distribution.", "tokens": [50364, 682, 19265, 7318, 11, 264, 5939, 307, 281, 12539, 293, 6889, 490, 1090, 12, 18759, 3997, 1412, 7316, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1036232312520345, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.0029256860725581646}, {"id": 13, "seek": 9200, "start": 101.0, "end": 113.0, "text": " A deep neural network can be used to learn or model an approximate distribution using large amount of data.", "tokens": [50814, 316, 2452, 18161, 3209, 393, 312, 1143, 281, 1466, 420, 2316, 364, 30874, 7316, 1228, 2416, 2372, 295, 1412, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1036232312520345, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.0029256860725581646}, {"id": 14, "seek": 9200, "start": 113.0, "end": 117.0, "text": " A diffusion model is a type of generator model.", "tokens": [51414, 316, 25242, 2316, 307, 257, 2010, 295, 19265, 2316, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1036232312520345, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.0029256860725581646}, {"id": 15, "seek": 11700, "start": 117.0, "end": 125.0, "text": " Training requires two types of processes.", "tokens": [50364, 20620, 7029, 732, 3467, 295, 7555, 13, 50764], "temperature": 0.0, "avg_logprob": -0.04619698704413648, "compression_ratio": 1.6453900709219857, "no_speech_prob": 0.03633372113108635}, {"id": 16, "seek": 11700, "start": 125.0, "end": 132.0, "text": " In forward process, training image is distracted with noise.", "tokens": [50764, 682, 2128, 1399, 11, 3097, 3256, 307, 21658, 365, 5658, 13, 51114], "temperature": 0.0, "avg_logprob": -0.04619698704413648, "compression_ratio": 1.6453900709219857, "no_speech_prob": 0.03633372113108635}, {"id": 17, "seek": 11700, "start": 132.0, "end": 139.0, "text": " In reverse process, it is learned how to recover training image.", "tokens": [51114, 682, 9943, 1399, 11, 309, 307, 3264, 577, 281, 8114, 3097, 3256, 13, 51464], "temperature": 0.0, "avg_logprob": -0.04619698704413648, "compression_ratio": 1.6453900709219857, "no_speech_prob": 0.03633372113108635}, {"id": 18, "seek": 11700, "start": 139.0, "end": 146.0, "text": " After training, reverse process is used to generate new samples.", "tokens": [51464, 2381, 3097, 11, 9943, 1399, 307, 1143, 281, 8460, 777, 10938, 13, 51814], "temperature": 0.0, "avg_logprob": -0.04619698704413648, "compression_ratio": 1.6453900709219857, "no_speech_prob": 0.03633372113108635}, {"id": 19, "seek": 14600, "start": 146.0, "end": 152.0, "text": " Let's inspect them in full detail.", "tokens": [50364, 961, 311, 15018, 552, 294, 1577, 2607, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0995986100399133, "compression_ratio": 1.1515151515151516, "no_speech_prob": 0.003908454440534115}, {"id": 20, "seek": 14600, "start": 152.0, "end": 160.0, "text": " Forward process.", "tokens": [50664, 35524, 1399, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0995986100399133, "compression_ratio": 1.1515151515151516, "no_speech_prob": 0.003908454440534115}, {"id": 21, "seek": 14600, "start": 160.0, "end": 167.0, "text": " X0 is a training image sampled from a real image distribution.", "tokens": [51064, 1783, 15, 307, 257, 3097, 3256, 3247, 15551, 490, 257, 957, 3256, 7316, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0995986100399133, "compression_ratio": 1.1515151515151516, "no_speech_prob": 0.003908454440534115}, {"id": 22, "seek": 16700, "start": 167.0, "end": 180.0, "text": " In forward process, noise is added to training image iteratively.", "tokens": [50364, 682, 2128, 1399, 11, 5658, 307, 3869, 281, 3097, 3256, 17138, 19020, 13, 51014], "temperature": 0.0, "avg_logprob": -0.05789316552025931, "compression_ratio": 1.544, "no_speech_prob": 0.06694264709949493}, {"id": 23, "seek": 16700, "start": 180.0, "end": 187.0, "text": " Noise addition is performed according to this equation.", "tokens": [51014, 44821, 4500, 307, 10332, 4650, 281, 341, 5367, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05789316552025931, "compression_ratio": 1.544, "no_speech_prob": 0.06694264709949493}, {"id": 24, "seek": 16700, "start": 187.0, "end": 191.0, "text": " Xt is noisy image at time step t.", "tokens": [51364, 1783, 83, 307, 24518, 3256, 412, 565, 1823, 256, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05789316552025931, "compression_ratio": 1.544, "no_speech_prob": 0.06694264709949493}, {"id": 25, "seek": 16700, "start": 191.0, "end": 196.0, "text": " Xt-1 is noisy image at time step t-1.", "tokens": [51564, 1783, 83, 12, 16, 307, 24518, 3256, 412, 565, 1823, 256, 12, 16, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05789316552025931, "compression_ratio": 1.544, "no_speech_prob": 0.06694264709949493}, {"id": 26, "seek": 19600, "start": 196.0, "end": 202.0, "text": " Epsilon t-1 is noise sampled from standard Gaussian distribution.", "tokens": [50364, 462, 16592, 256, 12, 16, 307, 5658, 3247, 15551, 490, 3832, 39148, 7316, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09729437828063965, "compression_ratio": 1.3120567375886525, "no_speech_prob": 0.007126760669052601}, {"id": 27, "seek": 19600, "start": 202.0, "end": 209.0, "text": " Beta t is variance parameter for time step t.", "tokens": [50664, 33286, 256, 307, 21977, 13075, 337, 565, 1823, 256, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09729437828063965, "compression_ratio": 1.3120567375886525, "no_speech_prob": 0.007126760669052601}, {"id": 28, "seek": 19600, "start": 209.0, "end": 219.0, "text": " At the beginning of forward process, X0 is mapped to minus 1, 1 interval.", "tokens": [51014, 1711, 264, 2863, 295, 2128, 1399, 11, 1783, 15, 307, 33318, 281, 3175, 502, 11, 502, 15035, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09729437828063965, "compression_ratio": 1.3120567375886525, "no_speech_prob": 0.007126760669052601}, {"id": 29, "seek": 21900, "start": 219.0, "end": 232.0, "text": " Xt-1 is scaled down, that is pixel values approach 0 to keep them at a certain range after noise addition.", "tokens": [50364, 1783, 83, 12, 16, 307, 36039, 760, 11, 300, 307, 19261, 4190, 3109, 1958, 281, 1066, 552, 412, 257, 1629, 3613, 934, 5658, 4500, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10552957924929532, "compression_ratio": 1.356060606060606, "no_speech_prob": 0.02080690488219261}, {"id": 30, "seek": 21900, "start": 232.0, "end": 241.0, "text": " Standard Gaussian noise is scaled to adjust the variance of added noise.", "tokens": [51014, 21298, 39148, 5658, 307, 36039, 281, 4369, 264, 21977, 295, 3869, 5658, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10552957924929532, "compression_ratio": 1.356060606060606, "no_speech_prob": 0.02080690488219261}, {"id": 31, "seek": 24100, "start": 241.0, "end": 252.0, "text": " X capital t approaches standard Gaussian noise for large capital t, for example 1000.", "tokens": [50364, 1783, 4238, 256, 11587, 3832, 39148, 5658, 337, 2416, 4238, 256, 11, 337, 1365, 9714, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07942430645811792, "compression_ratio": 1.3829787234042554, "no_speech_prob": 0.0028298397082835436}, {"id": 32, "seek": 24100, "start": 252.0, "end": 260.0, "text": " Set of beta t values is called variance schedule.", "tokens": [50914, 8928, 295, 9861, 256, 4190, 307, 1219, 21977, 7567, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07942430645811792, "compression_ratio": 1.3829787234042554, "no_speech_prob": 0.0028298397082835436}, {"id": 33, "seek": 24100, "start": 260.0, "end": 266.0, "text": " Xt depends on Xt-1 and does not depend on other time steps.", "tokens": [51314, 1783, 83, 5946, 322, 1783, 83, 12, 16, 293, 775, 406, 5672, 322, 661, 565, 4439, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07942430645811792, "compression_ratio": 1.3829787234042554, "no_speech_prob": 0.0028298397082835436}, {"id": 34, "seek": 26600, "start": 266.0, "end": 274.0, "text": " So forward process is a Markov process.", "tokens": [50364, 407, 2128, 1399, 307, 257, 3934, 5179, 1399, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09831187941811302, "compression_ratio": 1.3228346456692914, "no_speech_prob": 0.025815343484282494}, {"id": 35, "seek": 26600, "start": 274.0, "end": 287.0, "text": " Using reparameterization Q of Xt given Xt-1, the transition step of forward process can be expressed as a Gaussian distribution.", "tokens": [50764, 11142, 1085, 12835, 2398, 2144, 1249, 295, 1783, 83, 2212, 1783, 83, 12, 16, 11, 264, 6034, 1823, 295, 2128, 1399, 393, 312, 12675, 382, 257, 39148, 7316, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09831187941811302, "compression_ratio": 1.3228346456692914, "no_speech_prob": 0.025815343484282494}, {"id": 36, "seek": 28700, "start": 287.0, "end": 299.0, "text": " So forward process can be written as a joint probability distribution conditioned on X0.", "tokens": [50364, 407, 2128, 1399, 393, 312, 3720, 382, 257, 7225, 8482, 7316, 35833, 322, 1783, 15, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07001559112382971, "compression_ratio": 1.3125, "no_speech_prob": 0.008784608915448189}, {"id": 37, "seek": 28700, "start": 299.0, "end": 305.0, "text": " It is possible to obtain Xt directly from X0.", "tokens": [50964, 467, 307, 1944, 281, 12701, 1783, 83, 3838, 490, 1783, 15, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07001559112382971, "compression_ratio": 1.3125, "no_speech_prob": 0.008784608915448189}, {"id": 38, "seek": 28700, "start": 305.0, "end": 311.0, "text": " Define alpha t as 1 minus beta t.", "tokens": [51264, 9548, 533, 8961, 256, 382, 502, 3175, 9861, 256, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07001559112382971, "compression_ratio": 1.3125, "no_speech_prob": 0.008784608915448189}, {"id": 39, "seek": 31100, "start": 311.0, "end": 317.0, "text": " Write the equation for Xt.", "tokens": [50364, 23499, 264, 5367, 337, 1783, 83, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08805600592964574, "compression_ratio": 1.2452830188679245, "no_speech_prob": 0.009146974422037601}, {"id": 40, "seek": 31100, "start": 317.0, "end": 324.0, "text": " Then inside the equation expand Xt-1.", "tokens": [50664, 1396, 1854, 264, 5367, 5268, 1783, 83, 12, 16, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08805600592964574, "compression_ratio": 1.2452830188679245, "no_speech_prob": 0.009146974422037601}, {"id": 41, "seek": 31100, "start": 324.0, "end": 332.0, "text": " Epsilons are independent and identically distributed noise samples.", "tokens": [51014, 462, 1878, 388, 892, 366, 6695, 293, 2473, 984, 12631, 5658, 10938, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08805600592964574, "compression_ratio": 1.2452830188679245, "no_speech_prob": 0.009146974422037601}, {"id": 42, "seek": 33200, "start": 332.0, "end": 342.0, "text": " On the right hand side of the equation there are two noise components epsilon t-1 and epsilon t-2.", "tokens": [50364, 1282, 264, 558, 1011, 1252, 295, 264, 5367, 456, 366, 732, 5658, 6677, 17889, 256, 12, 16, 293, 17889, 256, 12, 17, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07258427143096924, "compression_ratio": 1.5636363636363637, "no_speech_prob": 0.008008143864572048}, {"id": 43, "seek": 33200, "start": 342.0, "end": 353.0, "text": " Since these noise samples are Gaussian, their sum is also Gaussian with variance as the sum of their variances.", "tokens": [50864, 4162, 613, 5658, 10938, 366, 39148, 11, 641, 2408, 307, 611, 39148, 365, 21977, 382, 264, 2408, 295, 641, 1374, 21518, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07258427143096924, "compression_ratio": 1.5636363636363637, "no_speech_prob": 0.008008143864572048}, {"id": 44, "seek": 33200, "start": 353.0, "end": 359.0, "text": " If we continue the same way a pattern shows up.", "tokens": [51414, 759, 321, 2354, 264, 912, 636, 257, 5102, 3110, 493, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07258427143096924, "compression_ratio": 1.5636363636363637, "no_speech_prob": 0.008008143864572048}, {"id": 45, "seek": 35900, "start": 359.0, "end": 372.0, "text": " Xt can be written in terms of X0 and noise using alpha bar, cumulative multiplication of alpha values.", "tokens": [50364, 1783, 83, 393, 312, 3720, 294, 2115, 295, 1783, 15, 293, 5658, 1228, 8961, 2159, 11, 38379, 27290, 295, 8961, 4190, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08802054193284777, "compression_ratio": 1.368, "no_speech_prob": 0.007975352928042412}, {"id": 46, "seek": 35900, "start": 372.0, "end": 379.0, "text": " Variance schedule.", "tokens": [51014, 32511, 719, 7567, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08802054193284777, "compression_ratio": 1.368, "no_speech_prob": 0.007975352928042412}, {"id": 47, "seek": 35900, "start": 379.0, "end": 385.0, "text": " Variance of edit noise is controlled with beta t.", "tokens": [51364, 32511, 719, 295, 8129, 5658, 307, 10164, 365, 9861, 256, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08802054193284777, "compression_ratio": 1.368, "no_speech_prob": 0.007975352928042412}, {"id": 48, "seek": 38500, "start": 385.0, "end": 395.0, "text": " If beta t increases linearly from beta 1 to beta capital T, then it is linear variance schedule.", "tokens": [50364, 759, 9861, 256, 8637, 43586, 490, 9861, 502, 281, 9861, 4238, 314, 11, 550, 309, 307, 8213, 21977, 7567, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0805276802607945, "compression_ratio": 1.4796747967479675, "no_speech_prob": 0.05016098544001579}, {"id": 49, "seek": 38500, "start": 395.0, "end": 401.0, "text": " Another alternative is cosine variance schedule.", "tokens": [50864, 3996, 8535, 307, 23565, 21977, 7567, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0805276802607945, "compression_ratio": 1.4796747967479675, "no_speech_prob": 0.05016098544001579}, {"id": 50, "seek": 38500, "start": 401.0, "end": 409.0, "text": " And these are the related equations.", "tokens": [51164, 400, 613, 366, 264, 4077, 11787, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0805276802607945, "compression_ratio": 1.4796747967479675, "no_speech_prob": 0.05016098544001579}, {"id": 51, "seek": 40900, "start": 409.0, "end": 416.0, "text": " These are the samples created with linear variance schedule.", "tokens": [50364, 1981, 366, 264, 10938, 2942, 365, 8213, 21977, 7567, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06131848510430784, "compression_ratio": 1.6165413533834587, "no_speech_prob": 0.005805789027363062}, {"id": 52, "seek": 40900, "start": 416.0, "end": 420.0, "text": " And cosine variance schedule.", "tokens": [50714, 400, 23565, 21977, 7567, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06131848510430784, "compression_ratio": 1.6165413533834587, "no_speech_prob": 0.005805789027363062}, {"id": 53, "seek": 40900, "start": 420.0, "end": 426.0, "text": " It is obvious that structures in the image are lost too early with linear schedule.", "tokens": [50914, 467, 307, 6322, 300, 9227, 294, 264, 3256, 366, 2731, 886, 2440, 365, 8213, 7567, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06131848510430784, "compression_ratio": 1.6165413533834587, "no_speech_prob": 0.005805789027363062}, {"id": 54, "seek": 40900, "start": 426.0, "end": 432.0, "text": " And lots of samples resemble pure noise.", "tokens": [51214, 400, 3195, 295, 10938, 36870, 6075, 5658, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06131848510430784, "compression_ratio": 1.6165413533834587, "no_speech_prob": 0.005805789027363062}, {"id": 55, "seek": 43200, "start": 432.0, "end": 444.0, "text": " By looking at beta t versus time step graph, with cosine schedule less noise is added until later time steps.", "tokens": [50364, 3146, 1237, 412, 9861, 256, 5717, 565, 1823, 4295, 11, 365, 23565, 7567, 1570, 5658, 307, 3869, 1826, 1780, 565, 4439, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08618202805519104, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.014908497221767902}, {"id": 56, "seek": 43200, "start": 444.0, "end": 457.0, "text": " And alpha bar t versus time step graph shows that with linear schedule alpha bar t value decreases faster.", "tokens": [50964, 400, 8961, 2159, 256, 5717, 565, 1823, 4295, 3110, 300, 365, 8213, 7567, 8961, 2159, 256, 2158, 24108, 4663, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08618202805519104, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.014908497221767902}, {"id": 57, "seek": 45700, "start": 457.0, "end": 467.0, "text": " Reverse process.", "tokens": [50364, 26314, 405, 1399, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09658263279841496, "compression_ratio": 1.3943661971830985, "no_speech_prob": 0.04227496683597565}, {"id": 58, "seek": 45700, "start": 467.0, "end": 476.0, "text": " Transitions in forward process are known and controlled with hyperparameter beta t.", "tokens": [50864, 6531, 2451, 294, 2128, 1399, 366, 2570, 293, 10164, 365, 9848, 2181, 335, 2398, 9861, 256, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09658263279841496, "compression_ratio": 1.3943661971830985, "no_speech_prob": 0.04227496683597565}, {"id": 59, "seek": 45700, "start": 476.0, "end": 481.0, "text": " In reverse process the aim is to construct X0 iteratively.", "tokens": [51314, 682, 9943, 1399, 264, 5939, 307, 281, 7690, 1783, 15, 17138, 19020, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09658263279841496, "compression_ratio": 1.3943661971830985, "no_speech_prob": 0.04227496683597565}, {"id": 60, "seek": 45700, "start": 481.0, "end": 484.0, "text": " Starting with noise image X capital T.", "tokens": [51564, 16217, 365, 5658, 3256, 1783, 4238, 314, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09658263279841496, "compression_ratio": 1.3943661971830985, "no_speech_prob": 0.04227496683597565}, {"id": 61, "seek": 48400, "start": 484.0, "end": 490.0, "text": " Reverse process is also a Markov chain.", "tokens": [50364, 26314, 405, 1399, 307, 611, 257, 3934, 5179, 5021, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05091468880816204, "compression_ratio": 1.396694214876033, "no_speech_prob": 0.0175446979701519}, {"id": 62, "seek": 48400, "start": 490.0, "end": 496.0, "text": " Reverse process can be expressed as a joint probability distribution.", "tokens": [50664, 26314, 405, 1399, 393, 312, 12675, 382, 257, 7225, 8482, 7316, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05091468880816204, "compression_ratio": 1.396694214876033, "no_speech_prob": 0.0175446979701519}, {"id": 63, "seek": 48400, "start": 496.0, "end": 503.0, "text": " X capital T is sampled from standard Gaussian distribution.", "tokens": [50964, 1783, 4238, 314, 307, 3247, 15551, 490, 3832, 39148, 7316, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05091468880816204, "compression_ratio": 1.396694214876033, "no_speech_prob": 0.0175446979701519}, {"id": 64, "seek": 50300, "start": 503.0, "end": 515.0, "text": " P theta of XT minus 1 given XT is a transition in reverse process.", "tokens": [50364, 430, 9725, 295, 1783, 51, 3175, 502, 2212, 1783, 51, 307, 257, 6034, 294, 9943, 1399, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07772034009297689, "compression_ratio": 1.2820512820512822, "no_speech_prob": 0.005904473830014467}, {"id": 65, "seek": 50300, "start": 515.0, "end": 521.0, "text": " X0 is observed or known variable.", "tokens": [50964, 1783, 15, 307, 13095, 420, 2570, 7006, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07772034009297689, "compression_ratio": 1.2820512820512822, "no_speech_prob": 0.005904473830014467}, {"id": 66, "seek": 50300, "start": 521.0, "end": 528.0, "text": " X1 to X capital T are hidden or latent variables.", "tokens": [51264, 1783, 16, 281, 1783, 4238, 314, 366, 7633, 420, 48994, 9102, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07772034009297689, "compression_ratio": 1.2820512820512822, "no_speech_prob": 0.005904473830014467}, {"id": 67, "seek": 52800, "start": 528.0, "end": 537.0, "text": " We need to find parameters such that the likelihood of sampling or observing X0 is maximum.", "tokens": [50364, 492, 643, 281, 915, 9834, 1270, 300, 264, 22119, 295, 21179, 420, 22107, 1783, 15, 307, 6674, 13, 50814], "temperature": 0.0, "avg_logprob": -0.032257322281125995, "compression_ratio": 1.5, "no_speech_prob": 0.009974803775548935}, {"id": 68, "seek": 52800, "start": 537.0, "end": 547.0, "text": " Integrating joint distribution over latent variables to obtain marginal distribution of X0 is intractable.", "tokens": [50814, 23894, 990, 7225, 7316, 670, 48994, 9102, 281, 12701, 16885, 7316, 295, 1783, 15, 307, 560, 1897, 712, 13, 51314], "temperature": 0.0, "avg_logprob": -0.032257322281125995, "compression_ratio": 1.5, "no_speech_prob": 0.009974803775548935}, {"id": 69, "seek": 52800, "start": 547.0, "end": 555.0, "text": " Because different Markov chains starting at different X capital T can lead to same X0.", "tokens": [51314, 1436, 819, 3934, 5179, 12626, 2891, 412, 819, 1783, 4238, 314, 393, 1477, 281, 912, 1783, 15, 13, 51714], "temperature": 0.0, "avg_logprob": -0.032257322281125995, "compression_ratio": 1.5, "no_speech_prob": 0.009974803775548935}, {"id": 70, "seek": 55500, "start": 555.0, "end": 565.0, "text": " Another option is to weave the problem from variational Bayesian perspective.", "tokens": [50364, 3996, 3614, 307, 281, 29145, 264, 1154, 490, 3034, 1478, 7840, 42434, 4585, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06382149555644051, "compression_ratio": 1.5721649484536082, "no_speech_prob": 0.006009564734995365}, {"id": 71, "seek": 55500, "start": 565.0, "end": 569.0, "text": " Maximizing log likelihood is equivalent to maximizing likelihood.", "tokens": [50864, 29076, 3319, 3565, 22119, 307, 10344, 281, 5138, 3319, 22119, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06382149555644051, "compression_ratio": 1.5721649484536082, "no_speech_prob": 0.006009564734995365}, {"id": 72, "seek": 55500, "start": 569.0, "end": 576.0, "text": " Because logarithm is a monotonically increasing function.", "tokens": [51064, 1436, 41473, 32674, 307, 257, 1108, 27794, 984, 5662, 2445, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06382149555644051, "compression_ratio": 1.5721649484536082, "no_speech_prob": 0.006009564734995365}, {"id": 73, "seek": 55500, "start": 576.0, "end": 582.0, "text": " Inside the integral reverse joint distribution is multiplied and divided by forward joint distribution.", "tokens": [51414, 15123, 264, 11573, 9943, 7225, 7316, 307, 17207, 293, 6666, 538, 2128, 7225, 7316, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06382149555644051, "compression_ratio": 1.5721649484536082, "no_speech_prob": 0.006009564734995365}, {"id": 74, "seek": 58200, "start": 582.0, "end": 593.0, "text": " To incorporate forward process into the equation.", "tokens": [50364, 1407, 16091, 2128, 1399, 666, 264, 5367, 13, 50914], "temperature": 0.0, "avg_logprob": -0.098829362127516, "compression_ratio": 1.3364485981308412, "no_speech_prob": 0.10601504892110825}, {"id": 75, "seek": 58200, "start": 593.0, "end": 600.0, "text": " Expected value of a random variable is a weighted average.", "tokens": [50914, 2111, 10729, 2158, 295, 257, 4974, 7006, 307, 257, 32807, 4274, 13, 51264], "temperature": 0.0, "avg_logprob": -0.098829362127516, "compression_ratio": 1.3364485981308412, "no_speech_prob": 0.10601504892110825}, {"id": 76, "seek": 58200, "start": 600.0, "end": 606.0, "text": " X is the value of random variable.", "tokens": [51264, 1783, 307, 264, 2158, 295, 4974, 7006, 13, 51564], "temperature": 0.0, "avg_logprob": -0.098829362127516, "compression_ratio": 1.3364485981308412, "no_speech_prob": 0.10601504892110825}, {"id": 77, "seek": 60600, "start": 606.0, "end": 612.0, "text": " And weight function is probability distribution.", "tokens": [50364, 400, 3364, 2445, 307, 8482, 7316, 13, 50664], "temperature": 0.0, "avg_logprob": -0.04031827926635742, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.06678176671266556}, {"id": 78, "seek": 60600, "start": 612.0, "end": 619.0, "text": " In our case the weight function is the joint distribution of forward process.", "tokens": [50664, 682, 527, 1389, 264, 3364, 2445, 307, 264, 7225, 7316, 295, 2128, 1399, 13, 51014], "temperature": 0.0, "avg_logprob": -0.04031827926635742, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.06678176671266556}, {"id": 79, "seek": 60600, "start": 619.0, "end": 629.0, "text": " So we can replace integral with an expectation operator.", "tokens": [51014, 407, 321, 393, 7406, 11573, 365, 364, 14334, 12973, 13, 51514], "temperature": 0.0, "avg_logprob": -0.04031827926635742, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.06678176671266556}, {"id": 80, "seek": 60600, "start": 629.0, "end": 634.0, "text": " Note that log is a concave function.", "tokens": [51514, 11633, 300, 3565, 307, 257, 416, 50126, 2445, 13, 51764], "temperature": 0.0, "avg_logprob": -0.04031827926635742, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.06678176671266556}, {"id": 81, "seek": 63400, "start": 634.0, "end": 640.0, "text": " Let's take two points X1 and X2 on X axis.", "tokens": [50364, 961, 311, 747, 732, 2793, 1783, 16, 293, 1783, 17, 322, 1783, 10298, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07955461198633368, "compression_ratio": 1.4642857142857142, "no_speech_prob": 0.021670641377568245}, {"id": 82, "seek": 63400, "start": 640.0, "end": 649.0, "text": " And their linear combination.", "tokens": [50664, 400, 641, 8213, 6562, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07955461198633368, "compression_ratio": 1.4642857142857142, "no_speech_prob": 0.021670641377568245}, {"id": 83, "seek": 63400, "start": 649.0, "end": 658.0, "text": " Log of linear combination is greater than or equal to the linear combination of log values.", "tokens": [51114, 10824, 295, 8213, 6562, 307, 5044, 813, 420, 2681, 281, 264, 8213, 6562, 295, 3565, 4190, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07955461198633368, "compression_ratio": 1.4642857142857142, "no_speech_prob": 0.021670641377568245}, {"id": 84, "seek": 65800, "start": 658.0, "end": 665.0, "text": " This is Jensen's inequality.", "tokens": [50364, 639, 307, 508, 32934, 311, 16970, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08497613209944505, "compression_ratio": 1.4068965517241379, "no_speech_prob": 0.14431017637252808}, {"id": 85, "seek": 65800, "start": 665.0, "end": 669.0, "text": " Interchanging the places of expectation and logarithm.", "tokens": [50714, 5751, 27123, 264, 3190, 295, 14334, 293, 41473, 32674, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08497613209944505, "compression_ratio": 1.4068965517241379, "no_speech_prob": 0.14431017637252808}, {"id": 86, "seek": 65800, "start": 669.0, "end": 675.0, "text": " The equation is converted to an inequality.", "tokens": [50914, 440, 5367, 307, 16424, 281, 364, 16970, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08497613209944505, "compression_ratio": 1.4068965517241379, "no_speech_prob": 0.14431017637252808}, {"id": 87, "seek": 65800, "start": 675.0, "end": 681.0, "text": " Log likelihood is the evidence.", "tokens": [51214, 10824, 22119, 307, 264, 4467, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08497613209944505, "compression_ratio": 1.4068965517241379, "no_speech_prob": 0.14431017637252808}, {"id": 88, "seek": 65800, "start": 681.0, "end": 687.0, "text": " And right hand side is evidence lower bound.", "tokens": [51514, 400, 558, 1011, 1252, 307, 4467, 3126, 5472, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08497613209944505, "compression_ratio": 1.4068965517241379, "no_speech_prob": 0.14431017637252808}, {"id": 89, "seek": 68700, "start": 687.0, "end": 695.0, "text": " It is also called variational lower bound.", "tokens": [50364, 467, 307, 611, 1219, 3034, 1478, 3126, 5472, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08505972837790465, "compression_ratio": 1.314516129032258, "no_speech_prob": 0.006973939016461372}, {"id": 90, "seek": 68700, "start": 695.0, "end": 704.0, "text": " Maximizing VLB means maximizing evidence.", "tokens": [50764, 29076, 3319, 691, 43, 33, 1355, 5138, 3319, 4467, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08505972837790465, "compression_ratio": 1.314516129032258, "no_speech_prob": 0.006973939016461372}, {"id": 91, "seek": 68700, "start": 704.0, "end": 713.0, "text": " Joint distributions can be written as multiplications of Gaussian transitions.", "tokens": [51214, 37866, 37870, 393, 312, 3720, 382, 17596, 763, 295, 39148, 23767, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08505972837790465, "compression_ratio": 1.314516129032258, "no_speech_prob": 0.006973939016461372}, {"id": 92, "seek": 71300, "start": 713.0, "end": 730.0, "text": " Take t equals one terms out of product operators.", "tokens": [50364, 3664, 256, 6915, 472, 2115, 484, 295, 1674, 19077, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09352420315597997, "compression_ratio": 1.1851851851851851, "no_speech_prob": 0.010806854814291}, {"id": 93, "seek": 71300, "start": 730.0, "end": 737.0, "text": " By adding x0 it is explicitly shown that forward process is conditioned on x0.", "tokens": [51214, 3146, 5127, 2031, 15, 309, 307, 20803, 4898, 300, 2128, 1399, 307, 35833, 322, 2031, 15, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09352420315597997, "compression_ratio": 1.1851851851851851, "no_speech_prob": 0.010806854814291}, {"id": 94, "seek": 73700, "start": 737.0, "end": 746.0, "text": " It is added because the beginning of forward Markov chain is a target for the reverse Markov chain.", "tokens": [50364, 467, 307, 3869, 570, 264, 2863, 295, 2128, 3934, 5179, 5021, 307, 257, 3779, 337, 264, 9943, 3934, 5179, 5021, 13, 50814], "temperature": 0.0, "avg_logprob": -0.04916346073150635, "compression_ratio": 1.471830985915493, "no_speech_prob": 0.05521319806575775}, {"id": 95, "seek": 73700, "start": 746.0, "end": 752.0, "text": " Apply Bayes rule in denominator.", "tokens": [50814, 25264, 7840, 279, 4978, 294, 20687, 13, 51114], "temperature": 0.0, "avg_logprob": -0.04916346073150635, "compression_ratio": 1.471830985915493, "no_speech_prob": 0.05521319806575775}, {"id": 96, "seek": 73700, "start": 752.0, "end": 758.0, "text": " The direction of reverse Markov chain is fixed thanks to conditioning on x0.", "tokens": [51114, 440, 3513, 295, 9943, 3934, 5179, 5021, 307, 6806, 3231, 281, 21901, 322, 2031, 15, 13, 51414], "temperature": 0.0, "avg_logprob": -0.04916346073150635, "compression_ratio": 1.471830985915493, "no_speech_prob": 0.05521319806575775}, {"id": 97, "seek": 75800, "start": 758.0, "end": 767.0, "text": " Xt minus one is in somewhere between Xt and X0.", "tokens": [50364, 1783, 83, 3175, 472, 307, 294, 4079, 1296, 1783, 83, 293, 1783, 15, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08282943367958069, "compression_ratio": 1.2956521739130435, "no_speech_prob": 0.09833130985498428}, {"id": 98, "seek": 75800, "start": 767.0, "end": 774.0, "text": " Let's expand the expression inside product operator in denominator.", "tokens": [50814, 961, 311, 5268, 264, 6114, 1854, 1674, 12973, 294, 20687, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08282943367958069, "compression_ratio": 1.2956521739130435, "no_speech_prob": 0.09833130985498428}, {"id": 99, "seek": 75800, "start": 774.0, "end": 782.0, "text": " Some terms cancel each other out.", "tokens": [51164, 2188, 2115, 10373, 1184, 661, 484, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08282943367958069, "compression_ratio": 1.2956521739130435, "no_speech_prob": 0.09833130985498428}, {"id": 100, "seek": 78200, "start": 782.0, "end": 791.0, "text": " Rearranging denominator we get this equation.", "tokens": [50364, 1300, 2284, 9741, 20687, 321, 483, 341, 5367, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09284910701570057, "compression_ratio": 1.1369863013698631, "no_speech_prob": 0.013893553987145424}, {"id": 101, "seek": 78200, "start": 791.0, "end": 800.0, "text": " One more cancellation in denominator.", "tokens": [50814, 1485, 544, 45867, 294, 20687, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09284910701570057, "compression_ratio": 1.1369863013698631, "no_speech_prob": 0.013893553987145424}, {"id": 102, "seek": 80000, "start": 800.0, "end": 813.0, "text": " Right hand side can be written as a sum of expected values.", "tokens": [50364, 1779, 1011, 1252, 393, 312, 3720, 382, 257, 2408, 295, 5176, 4190, 13, 51014], "temperature": 0.0, "avg_logprob": -0.04605360592112822, "compression_ratio": 0.9516129032258065, "no_speech_prob": 0.08946803957223892}, {"id": 103, "seek": 81300, "start": 813.0, "end": 829.0, "text": " As a side note the expected value of x over joint distribution of x and y is equal to expected value of x over its marginal distribution.", "tokens": [50364, 1018, 257, 1252, 3637, 264, 5176, 2158, 295, 2031, 670, 7225, 7316, 295, 2031, 293, 288, 307, 2681, 281, 5176, 2158, 295, 2031, 670, 1080, 16885, 7316, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07714023956885704, "compression_ratio": 1.6884057971014492, "no_speech_prob": 0.10212022066116333}, {"id": 104, "seek": 81300, "start": 829.0, "end": 839.0, "text": " If a latent variable is not present inside expectation then it has no effect on expected value.", "tokens": [51164, 759, 257, 48994, 7006, 307, 406, 1974, 1854, 14334, 550, 309, 575, 572, 1802, 322, 5176, 2158, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07714023956885704, "compression_ratio": 1.6884057971014492, "no_speech_prob": 0.10212022066116333}, {"id": 105, "seek": 83900, "start": 839.0, "end": 862.0, "text": " Unrelated latent variables are removed from waiting distribution.", "tokens": [50364, 1156, 12004, 48994, 9102, 366, 7261, 490, 3806, 7316, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11189304079328265, "compression_ratio": 0.9701492537313433, "no_speech_prob": 0.07540026307106018}, {"id": 106, "seek": 86200, "start": 862.0, "end": 869.0, "text": " Distributions inside colored rectangles are different.", "tokens": [50364, 9840, 2024, 3666, 1854, 14332, 24077, 904, 366, 819, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07566636107688726, "compression_ratio": 1.34375, "no_speech_prob": 0.01881781406700611}, {"id": 107, "seek": 86200, "start": 869.0, "end": 878.0, "text": " We can find a relation between those two using Bayes rule.", "tokens": [50714, 492, 393, 915, 257, 9721, 1296, 729, 732, 1228, 7840, 279, 4978, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07566636107688726, "compression_ratio": 1.34375, "no_speech_prob": 0.01881781406700611}, {"id": 108, "seek": 86200, "start": 878.0, "end": 887.0, "text": " Now there is one more expectation for the right most term.", "tokens": [51164, 823, 456, 307, 472, 544, 14334, 337, 264, 558, 881, 1433, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07566636107688726, "compression_ratio": 1.34375, "no_speech_prob": 0.01881781406700611}, {"id": 109, "seek": 88700, "start": 887.0, "end": 904.0, "text": " Two of the expectations can be written as KL divergences.", "tokens": [50364, 4453, 295, 264, 9843, 393, 312, 3720, 382, 47991, 18558, 1766, 887, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10987264138680918, "compression_ratio": 1.0493827160493827, "no_speech_prob": 0.018016766756772995}, {"id": 110, "seek": 88700, "start": 904.0, "end": 910.0, "text": " Now we have VLB expression.", "tokens": [51214, 823, 321, 362, 691, 43, 33, 6114, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10987264138680918, "compression_ratio": 1.0493827160493827, "no_speech_prob": 0.018016766756772995}, {"id": 111, "seek": 91000, "start": 910.0, "end": 922.0, "text": " Minus VLB is minimized with gradient descent instead of maximizing VLB.", "tokens": [50364, 2829, 301, 691, 43, 33, 307, 4464, 1602, 365, 16235, 23475, 2602, 295, 5138, 3319, 691, 43, 33, 13, 50964], "temperature": 0.0, "avg_logprob": -0.16960719574329464, "compression_ratio": 1.1636363636363636, "no_speech_prob": 0.010890515521168709}, {"id": 112, "seek": 91000, "start": 922.0, "end": 930.0, "text": " There are three terms L0, LT minus one and L-capitality.", "tokens": [50964, 821, 366, 1045, 2115, 441, 15, 11, 441, 51, 3175, 472, 293, 441, 12, 9485, 270, 1860, 13, 51364], "temperature": 0.0, "avg_logprob": -0.16960719574329464, "compression_ratio": 1.1636363636363636, "no_speech_prob": 0.010890515521168709}, {"id": 113, "seek": 93000, "start": 930.0, "end": 941.0, "text": " L-capitality is constant with respect to data and can be ignored.", "tokens": [50364, 441, 12, 9485, 270, 1860, 307, 5754, 365, 3104, 281, 1412, 293, 393, 312, 19735, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07655381601910259, "compression_ratio": 1.3140495867768596, "no_speech_prob": 0.008352278731763363}, {"id": 114, "seek": 93000, "start": 941.0, "end": 948.0, "text": " Computing L0", "tokens": [50914, 37804, 278, 441, 15, 51264], "temperature": 0.0, "avg_logprob": -0.07655381601910259, "compression_ratio": 1.3140495867768596, "no_speech_prob": 0.008352278731763363}, {"id": 115, "seek": 93000, "start": 948.0, "end": 956.0, "text": " Less step of reverse process can be designed as an independent discrete decoder.", "tokens": [51264, 18649, 1823, 295, 9943, 1399, 393, 312, 4761, 382, 364, 6695, 27706, 979, 19866, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07655381601910259, "compression_ratio": 1.3140495867768596, "no_speech_prob": 0.008352278731763363}, {"id": 116, "seek": 95600, "start": 956.0, "end": 962.0, "text": " Here is the related distribution.", "tokens": [50364, 1692, 307, 264, 4077, 7316, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08341426402330399, "compression_ratio": 1.1414141414141414, "no_speech_prob": 0.13304011523723602}, {"id": 117, "seek": 95600, "start": 962.0, "end": 968.0, "text": " And bounds of integrals.", "tokens": [50664, 400, 29905, 295, 3572, 1124, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08341426402330399, "compression_ratio": 1.1414141414141414, "no_speech_prob": 0.13304011523723602}, {"id": 118, "seek": 95600, "start": 968.0, "end": 980.0, "text": " Image data is comprised of integers between 0 and 255.", "tokens": [50964, 29903, 1412, 307, 38062, 295, 41674, 1296, 1958, 293, 3552, 20, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08341426402330399, "compression_ratio": 1.1414141414141414, "no_speech_prob": 0.13304011523723602}, {"id": 119, "seek": 98000, "start": 980.0, "end": 990.0, "text": " Mu theta i is the predicted value for x0i.", "tokens": [50364, 15601, 9725, 741, 307, 264, 19147, 2158, 337, 2031, 15, 72, 13, 50864], "temperature": 0.0, "avg_logprob": -0.17295492456314412, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.18895761668682098}, {"id": 120, "seek": 98000, "start": 990.0, "end": 998.0, "text": " For the height coordinate a Gaussian with mean mu theta i and variance sigma 1 square is used.", "tokens": [50864, 1171, 264, 6681, 15670, 257, 39148, 365, 914, 2992, 9725, 741, 293, 21977, 12771, 502, 3732, 307, 1143, 13, 51264], "temperature": 0.0, "avg_logprob": -0.17295492456314412, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.18895761668682098}, {"id": 121, "seek": 98000, "start": 998.0, "end": 1006.0, "text": " X0i is the ground root.", "tokens": [51264, 1783, 15, 72, 307, 264, 2727, 5593, 13, 51664], "temperature": 0.0, "avg_logprob": -0.17295492456314412, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.18895761668682098}, {"id": 122, "seek": 100600, "start": 1006.0, "end": 1015.0, "text": " And bounds of integral.", "tokens": [50364, 400, 29905, 295, 11573, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08086628913879394, "compression_ratio": 1.0740740740740742, "no_speech_prob": 0.033669620752334595}, {"id": 123, "seek": 100600, "start": 1015.0, "end": 1021.0, "text": " Consider this example case.", "tokens": [50814, 17416, 341, 1365, 1389, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08086628913879394, "compression_ratio": 1.0740740740740742, "no_speech_prob": 0.033669620752334595}, {"id": 124, "seek": 100600, "start": 1021.0, "end": 1029.0, "text": " Then these are the related numbers.", "tokens": [51114, 1396, 613, 366, 264, 4077, 3547, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08086628913879394, "compression_ratio": 1.0740740740740742, "no_speech_prob": 0.033669620752334595}, {"id": 125, "seek": 102900, "start": 1029.0, "end": 1038.0, "text": " Same operation is performed for all decoordinates and integration results are multiplied.", "tokens": [50364, 10635, 6916, 307, 10332, 337, 439, 979, 78, 6241, 1024, 293, 10980, 3542, 366, 17207, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09735006981707633, "compression_ratio": 1.4029850746268657, "no_speech_prob": 0.026388106867671013}, {"id": 126, "seek": 102900, "start": 1038.0, "end": 1052.0, "text": " If predicted image is close to ground root training image x0, then p theta of x0 given x1 is high.", "tokens": [50814, 759, 19147, 3256, 307, 1998, 281, 2727, 5593, 3097, 3256, 2031, 15, 11, 550, 280, 9725, 295, 2031, 15, 2212, 2031, 16, 307, 1090, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09735006981707633, "compression_ratio": 1.4029850746268657, "no_speech_prob": 0.026388106867671013}, {"id": 127, "seek": 105200, "start": 1052.0, "end": 1061.0, "text": " Deriving simple loss by minimizing LT minus one term.", "tokens": [50364, 5618, 2123, 2199, 4470, 538, 46608, 441, 51, 3175, 472, 1433, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07432752715216742, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.10993208736181259}, {"id": 128, "seek": 105200, "start": 1061.0, "end": 1068.0, "text": " Let's begin with reverse transition conditioned on x0.", "tokens": [50814, 961, 311, 1841, 365, 9943, 6034, 35833, 322, 2031, 15, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07432752715216742, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.10993208736181259}, {"id": 129, "seek": 105200, "start": 1068.0, "end": 1080.0, "text": " Apply Bayes rule to find the relation between forward and backward transitions.", "tokens": [51164, 25264, 7840, 279, 4978, 281, 915, 264, 9721, 1296, 2128, 293, 23897, 23767, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07432752715216742, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.10993208736181259}, {"id": 130, "seek": 108000, "start": 1080.0, "end": 1096.0, "text": " Forward Markov chain is already conditioned on x0.", "tokens": [50364, 35524, 3934, 5179, 5021, 307, 1217, 35833, 322, 2031, 15, 13, 51164], "temperature": 0.0, "avg_logprob": -0.043236856875212296, "compression_ratio": 1.0588235294117647, "no_speech_prob": 0.024812299758195877}, {"id": 131, "seek": 108000, "start": 1096.0, "end": 1104.0, "text": " These three distributions are Gaussian.", "tokens": [51164, 1981, 1045, 37870, 366, 39148, 13, 51564], "temperature": 0.0, "avg_logprob": -0.043236856875212296, "compression_ratio": 1.0588235294117647, "no_speech_prob": 0.024812299758195877}, {"id": 132, "seek": 110400, "start": 1104.0, "end": 1113.0, "text": " Let's write their functional expressions.", "tokens": [50364, 961, 311, 2464, 641, 11745, 15277, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08949084030954461, "compression_ratio": 1.0133333333333334, "no_speech_prob": 0.040448471903800964}, {"id": 133, "seek": 110400, "start": 1113.0, "end": 1127.0, "text": " And combine the exponential terms.", "tokens": [50814, 400, 10432, 264, 21510, 2115, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08949084030954461, "compression_ratio": 1.0133333333333334, "no_speech_prob": 0.040448471903800964}, {"id": 134, "seek": 112700, "start": 1127.0, "end": 1135.0, "text": " Expand square terms.", "tokens": [50364, 21391, 474, 3732, 2115, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07259231805801392, "compression_ratio": 0.9230769230769231, "no_speech_prob": 0.05419345945119858}, {"id": 135, "seek": 112700, "start": 1135.0, "end": 1149.0, "text": " And rearrange the equation.", "tokens": [50764, 400, 39568, 264, 5367, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07259231805801392, "compression_ratio": 0.9230769230769231, "no_speech_prob": 0.05419345945119858}, {"id": 136, "seek": 114900, "start": 1149.0, "end": 1165.0, "text": " Start equalizing denominators inside parentheses.", "tokens": [50364, 6481, 2681, 3319, 16244, 3391, 1854, 34153, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04675884544849396, "compression_ratio": 0.8596491228070176, "no_speech_prob": 0.03852146118879318}, {"id": 137, "seek": 116500, "start": 1165.0, "end": 1181.0, "text": " Inside exponential factor out the common term.", "tokens": [50364, 15123, 21510, 5952, 484, 264, 2689, 1433, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11080788683008265, "compression_ratio": 1.1938775510204083, "no_speech_prob": 0.015545208007097244}, {"id": 138, "seek": 116500, "start": 1181.0, "end": 1191.0, "text": " Now notice the quadratic expression starting with xt minus one square.", "tokens": [51164, 823, 3449, 264, 37262, 6114, 2891, 365, 220, 734, 3175, 472, 3732, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11080788683008265, "compression_ratio": 1.1938775510204083, "no_speech_prob": 0.015545208007097244}, {"id": 139, "seek": 119100, "start": 1191.0, "end": 1201.0, "text": " That quadratic expression can be written as square of difference of two terms.", "tokens": [50364, 663, 37262, 6114, 393, 312, 3720, 382, 3732, 295, 2649, 295, 732, 2115, 13, 50864], "temperature": 0.0, "avg_logprob": -0.03927024900913238, "compression_ratio": 1.3358778625954197, "no_speech_prob": 0.0537228137254715}, {"id": 140, "seek": 119100, "start": 1201.0, "end": 1214.0, "text": " And resulting expression is a Gaussian distribution.", "tokens": [50864, 400, 16505, 6114, 307, 257, 39148, 7316, 13, 51514], "temperature": 0.0, "avg_logprob": -0.03927024900913238, "compression_ratio": 1.3358778625954197, "no_speech_prob": 0.0537228137254715}, {"id": 141, "seek": 119100, "start": 1214.0, "end": 1218.0, "text": " Note that x0 is available only in training.", "tokens": [51514, 11633, 300, 2031, 15, 307, 2435, 787, 294, 3097, 13, 51714], "temperature": 0.0, "avg_logprob": -0.03927024900913238, "compression_ratio": 1.3358778625954197, "no_speech_prob": 0.0537228137254715}, {"id": 142, "seek": 121800, "start": 1218.0, "end": 1226.0, "text": " So approximation should be performed without x0.", "tokens": [50364, 407, 28023, 820, 312, 10332, 1553, 2031, 15, 13, 50764], "temperature": 0.0, "avg_logprob": -0.049252071976661684, "compression_ratio": 1.3385826771653544, "no_speech_prob": 0.18421925604343414}, {"id": 143, "seek": 121800, "start": 1226.0, "end": 1231.0, "text": " Using noise addition equation from forward process.", "tokens": [50764, 11142, 5658, 4500, 5367, 490, 2128, 1399, 13, 51014], "temperature": 0.0, "avg_logprob": -0.049252071976661684, "compression_ratio": 1.3385826771653544, "no_speech_prob": 0.18421925604343414}, {"id": 144, "seek": 121800, "start": 1231.0, "end": 1243.0, "text": " Mean of reverse transition can be written in terms of xt and epsilon.", "tokens": [51014, 12302, 295, 9943, 6034, 393, 312, 3720, 294, 2115, 295, 220, 734, 293, 17889, 13, 51614], "temperature": 0.0, "avg_logprob": -0.049252071976661684, "compression_ratio": 1.3385826771653544, "no_speech_prob": 0.18421925604343414}, {"id": 145, "seek": 124300, "start": 1243.0, "end": 1257.0, "text": " For reverse process ground route is approximated with learn transition.", "tokens": [50364, 1171, 9943, 1399, 2727, 7955, 307, 8542, 770, 365, 1466, 6034, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14825679409888484, "compression_ratio": 1.348623853211009, "no_speech_prob": 0.235336035490036}, {"id": 146, "seek": 124300, "start": 1257.0, "end": 1268.0, "text": " Since reference is Gaussian, its approximation is also modeled as Gaussian.", "tokens": [51064, 4162, 6408, 307, 39148, 11, 1080, 28023, 307, 611, 37140, 382, 39148, 13, 51614], "temperature": 0.0, "avg_logprob": -0.14825679409888484, "compression_ratio": 1.348623853211009, "no_speech_prob": 0.235336035490036}, {"id": 147, "seek": 126800, "start": 1268.0, "end": 1284.0, "text": " In the DPM paper covariance is fixed and only mean is learned.", "tokens": [50364, 682, 264, 413, 18819, 3035, 49851, 719, 307, 6806, 293, 787, 914, 307, 3264, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1112301614549425, "compression_ratio": 1.1022727272727273, "no_speech_prob": 0.09178472310304642}, {"id": 148, "seek": 126800, "start": 1284.0, "end": 1291.0, "text": " Noise addition in forward process.", "tokens": [51164, 44821, 4500, 294, 2128, 1399, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1112301614549425, "compression_ratio": 1.1022727272727273, "no_speech_prob": 0.09178472310304642}, {"id": 149, "seek": 129100, "start": 1291.0, "end": 1304.0, "text": " Reverse transition.", "tokens": [50364, 26314, 405, 6034, 13, 51014], "temperature": 0.0, "avg_logprob": -0.14530151230948313, "compression_ratio": 0.9411764705882353, "no_speech_prob": 0.13381479680538177}, {"id": 150, "seek": 129100, "start": 1304.0, "end": 1311.0, "text": " KL divergence is a measure of dissimilarity.", "tokens": [51014, 47991, 47387, 307, 257, 3481, 295, 7802, 332, 2202, 507, 13, 51364], "temperature": 0.0, "avg_logprob": -0.14530151230948313, "compression_ratio": 0.9411764705882353, "no_speech_prob": 0.13381479680538177}, {"id": 151, "seek": 131100, "start": 1311.0, "end": 1324.0, "text": " We need to find parameters minimizing the expression inside arc mean.", "tokens": [50364, 492, 643, 281, 915, 9834, 46608, 264, 6114, 1854, 10346, 914, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09278414398431778, "compression_ratio": 1.0454545454545454, "no_speech_prob": 0.24710462987422943}, {"id": 152, "seek": 132400, "start": 1324.0, "end": 1343.0, "text": " Expression inside rectangle is KL divergence between two Gaussians.", "tokens": [50364, 21391, 2775, 1854, 21930, 307, 47991, 47387, 1296, 732, 10384, 2023, 2567, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08443746847264907, "compression_ratio": 0.9436619718309859, "no_speech_prob": 0.1655009686946869}, {"id": 153, "seek": 134300, "start": 1343.0, "end": 1361.0, "text": " Let's use the equations for covariance and means.", "tokens": [50364, 961, 311, 764, 264, 11787, 337, 49851, 719, 293, 1355, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06138646205266317, "compression_ratio": 0.8596491228070176, "no_speech_prob": 0.4384438097476959}, {"id": 154, "seek": 136100, "start": 1361.0, "end": 1377.0, "text": " Simplifying we get this equation.", "tokens": [50364, 3998, 564, 5489, 321, 483, 341, 5367, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08570236563682557, "compression_ratio": 1.0151515151515151, "no_speech_prob": 0.06075233966112137}, {"id": 155, "seek": 136100, "start": 1377.0, "end": 1383.0, "text": " This is the resulting expression.", "tokens": [51164, 639, 307, 264, 16505, 6114, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08570236563682557, "compression_ratio": 1.0151515151515151, "no_speech_prob": 0.06075233966112137}, {"id": 156, "seek": 138300, "start": 1383.0, "end": 1397.0, "text": " In practice time step dependent multiplier can be set to one.", "tokens": [50364, 682, 3124, 565, 1823, 12334, 44106, 393, 312, 992, 281, 472, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12454659060428017, "compression_ratio": 1.2710280373831775, "no_speech_prob": 0.017991095781326294}, {"id": 157, "seek": 138300, "start": 1397.0, "end": 1406.0, "text": " In VLB expression xt minus one terms are summed for t is greater than one.", "tokens": [51064, 682, 691, 43, 33, 6114, 220, 734, 3175, 472, 2115, 366, 2408, 1912, 337, 256, 307, 5044, 813, 472, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12454659060428017, "compression_ratio": 1.2710280373831775, "no_speech_prob": 0.017991095781326294}, {"id": 158, "seek": 140600, "start": 1406.0, "end": 1413.0, "text": " So there is one more expectation.", "tokens": [50364, 407, 456, 307, 472, 544, 14334, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06837003827095031, "compression_ratio": 1.3465346534653466, "no_speech_prob": 0.24115870893001556}, {"id": 159, "seek": 140600, "start": 1413.0, "end": 1417.0, "text": " Here is the loss equation.", "tokens": [50714, 1692, 307, 264, 4470, 5367, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06837003827095031, "compression_ratio": 1.3465346534653466, "no_speech_prob": 0.24115870893001556}, {"id": 160, "seek": 140600, "start": 1417.0, "end": 1422.0, "text": " It is called simple loss.", "tokens": [50914, 467, 307, 1219, 2199, 4470, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06837003827095031, "compression_ratio": 1.3465346534653466, "no_speech_prob": 0.24115870893001556}, {"id": 161, "seek": 140600, "start": 1422.0, "end": 1432.0, "text": " And expectation is over time step x0 and epsilon.", "tokens": [51164, 400, 14334, 307, 670, 565, 1823, 2031, 15, 293, 17889, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06837003827095031, "compression_ratio": 1.3465346534653466, "no_speech_prob": 0.24115870893001556}, {"id": 162, "seek": 143200, "start": 1432.0, "end": 1437.0, "text": " Note that simple loss is obtained minimizing xt minus one term.", "tokens": [50364, 11633, 300, 2199, 4470, 307, 14879, 46608, 220, 734, 3175, 472, 1433, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09030994935469194, "compression_ratio": 1.4375, "no_speech_prob": 0.12834350764751434}, {"id": 163, "seek": 143200, "start": 1437.0, "end": 1442.0, "text": " And xt minus one is defined for t is greater than one.", "tokens": [50614, 400, 220, 734, 3175, 472, 307, 7642, 337, 256, 307, 5044, 813, 472, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09030994935469194, "compression_ratio": 1.4375, "no_speech_prob": 0.12834350764751434}, {"id": 164, "seek": 143200, "start": 1442.0, "end": 1450.0, "text": " So what happens when t is equal to one?", "tokens": [50864, 407, 437, 2314, 562, 256, 307, 2681, 281, 472, 30, 51264], "temperature": 0.0, "avg_logprob": -0.09030994935469194, "compression_ratio": 1.4375, "no_speech_prob": 0.12834350764751434}, {"id": 165, "seek": 143200, "start": 1450.0, "end": 1458.0, "text": " Remember discrete decoder from previous section.", "tokens": [51264, 5459, 27706, 979, 19866, 490, 3894, 3541, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09030994935469194, "compression_ratio": 1.4375, "no_speech_prob": 0.12834350764751434}, {"id": 166, "seek": 145800, "start": 1458.0, "end": 1467.0, "text": " Using simple loss when t is equal to one means approximating discrete decoder.", "tokens": [50364, 11142, 2199, 4470, 562, 256, 307, 2681, 281, 472, 1355, 8542, 990, 27706, 979, 19866, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10545376469107236, "compression_ratio": 1.2666666666666666, "no_speech_prob": 0.020822467282414436}, {"id": 167, "seek": 145800, "start": 1467.0, "end": 1478.0, "text": " Integral is replaced by multiplication of Gaussian density and bandwidth.", "tokens": [50814, 23894, 304, 307, 10772, 538, 27290, 295, 39148, 10305, 293, 23647, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10545376469107236, "compression_ratio": 1.2666666666666666, "no_speech_prob": 0.020822467282414436}, {"id": 168, "seek": 147800, "start": 1478.0, "end": 1481.0, "text": " Here is the illustration for the height coordinate.", "tokens": [50364, 1692, 307, 264, 22645, 337, 264, 6681, 15670, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11416463498716001, "compression_ratio": 1.4539473684210527, "no_speech_prob": 0.12702041864395142}, {"id": 169, "seek": 147800, "start": 1481.0, "end": 1489.0, "text": " Area of the rectangle is computed instead of integral.", "tokens": [50514, 19405, 295, 264, 21930, 307, 40610, 2602, 295, 11573, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11416463498716001, "compression_ratio": 1.4539473684210527, "no_speech_prob": 0.12702041864395142}, {"id": 170, "seek": 147800, "start": 1489.0, "end": 1498.0, "text": " Let's write functional expression of Gaussian.", "tokens": [50914, 961, 311, 2464, 11745, 6114, 295, 39148, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11416463498716001, "compression_ratio": 1.4539473684210527, "no_speech_prob": 0.12702041864395142}, {"id": 171, "seek": 147800, "start": 1498.0, "end": 1502.0, "text": " X0 is the original training image.", "tokens": [51364, 1783, 15, 307, 264, 3380, 3097, 3256, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11416463498716001, "compression_ratio": 1.4539473684210527, "no_speech_prob": 0.12702041864395142}, {"id": 172, "seek": 147800, "start": 1502.0, "end": 1507.0, "text": " Mu theta is the predicted image.", "tokens": [51564, 15601, 9725, 307, 264, 19147, 3256, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11416463498716001, "compression_ratio": 1.4539473684210527, "no_speech_prob": 0.12702041864395142}, {"id": 173, "seek": 150700, "start": 1507.0, "end": 1516.0, "text": " Take log of both sides.", "tokens": [50364, 3664, 3565, 295, 1293, 4881, 13, 50814], "temperature": 0.0, "avg_logprob": -0.044715038661299084, "compression_ratio": 1.1521739130434783, "no_speech_prob": 0.07804933190345764}, {"id": 174, "seek": 150700, "start": 1516.0, "end": 1522.0, "text": " C is constant with respect to theta.", "tokens": [50814, 383, 307, 5754, 365, 3104, 281, 9725, 13, 51114], "temperature": 0.0, "avg_logprob": -0.044715038661299084, "compression_ratio": 1.1521739130434783, "no_speech_prob": 0.07804933190345764}, {"id": 175, "seek": 150700, "start": 1522.0, "end": 1529.0, "text": " Use forward and reverse transition equations.", "tokens": [51114, 8278, 2128, 293, 9943, 6034, 11787, 13, 51464], "temperature": 0.0, "avg_logprob": -0.044715038661299084, "compression_ratio": 1.1521739130434783, "no_speech_prob": 0.07804933190345764}, {"id": 176, "seek": 152900, "start": 1529.0, "end": 1546.0, "text": " Note that alpha bar one is equal to alpha one.", "tokens": [50364, 11633, 300, 8961, 2159, 472, 307, 2681, 281, 8961, 472, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05142957152742328, "compression_ratio": 1.32, "no_speech_prob": 0.10441701114177704}, {"id": 177, "seek": 152900, "start": 1546.0, "end": 1557.0, "text": " Ignoring variance and constant term the resultant expression is equal to simple loss.", "tokens": [51214, 24754, 3662, 21977, 293, 5754, 1433, 264, 1874, 394, 6114, 307, 2681, 281, 2199, 4470, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05142957152742328, "compression_ratio": 1.32, "no_speech_prob": 0.10441701114177704}, {"id": 178, "seek": 155700, "start": 1557.0, "end": 1564.0, "text": " Training.", "tokens": [50364, 20620, 13, 50714], "temperature": 0.0, "avg_logprob": -0.125368909632906, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.22209498286247253}, {"id": 179, "seek": 155700, "start": 1564.0, "end": 1568.0, "text": " Unit is used to model transitions in reverse process.", "tokens": [50714, 27894, 307, 1143, 281, 2316, 23767, 294, 9943, 1399, 13, 50914], "temperature": 0.0, "avg_logprob": -0.125368909632906, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.22209498286247253}, {"id": 180, "seek": 155700, "start": 1568.0, "end": 1573.0, "text": " And it has three parts.", "tokens": [50914, 400, 309, 575, 1045, 3166, 13, 51164], "temperature": 0.0, "avg_logprob": -0.125368909632906, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.22209498286247253}, {"id": 181, "seek": 155700, "start": 1573.0, "end": 1576.0, "text": " Encoder decreases spatial resolution.", "tokens": [51164, 29584, 19866, 24108, 23598, 8669, 13, 51314], "temperature": 0.0, "avg_logprob": -0.125368909632906, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.22209498286247253}, {"id": 182, "seek": 155700, "start": 1576.0, "end": 1580.0, "text": " Increases number of channels.", "tokens": [51314, 30367, 1957, 1230, 295, 9235, 13, 51514], "temperature": 0.0, "avg_logprob": -0.125368909632906, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.22209498286247253}, {"id": 183, "seek": 155700, "start": 1580.0, "end": 1584.0, "text": " Button neck.", "tokens": [51514, 38435, 6189, 13, 51714], "temperature": 0.0, "avg_logprob": -0.125368909632906, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.22209498286247253}, {"id": 184, "seek": 158400, "start": 1584.0, "end": 1587.0, "text": " Decoder increases spatial resolution.", "tokens": [50364, 12427, 19866, 8637, 23598, 8669, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09682475090026856, "compression_ratio": 1.4, "no_speech_prob": 0.021302014589309692}, {"id": 185, "seek": 158400, "start": 1587.0, "end": 1592.0, "text": " Decreases number of channels.", "tokens": [50514, 12427, 265, 1957, 1230, 295, 9235, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09682475090026856, "compression_ratio": 1.4, "no_speech_prob": 0.021302014589309692}, {"id": 186, "seek": 158400, "start": 1592.0, "end": 1602.0, "text": " Skip connections transfer features from encoder to decoder.", "tokens": [50764, 46405, 9271, 5003, 4122, 490, 2058, 19866, 281, 979, 19866, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09682475090026856, "compression_ratio": 1.4, "no_speech_prob": 0.021302014589309692}, {"id": 187, "seek": 158400, "start": 1602.0, "end": 1605.0, "text": " For diffusion models unit has two inputs.", "tokens": [51264, 1171, 25242, 5245, 4985, 575, 732, 15743, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09682475090026856, "compression_ratio": 1.4, "no_speech_prob": 0.021302014589309692}, {"id": 188, "seek": 158400, "start": 1605.0, "end": 1607.0, "text": " Noise image and time step.", "tokens": [51414, 44821, 3256, 293, 565, 1823, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09682475090026856, "compression_ratio": 1.4, "no_speech_prob": 0.021302014589309692}, {"id": 189, "seek": 160700, "start": 1607.0, "end": 1614.0, "text": " Predicted noise is the output.", "tokens": [50364, 32969, 11254, 5658, 307, 264, 5598, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05748222325299237, "compression_ratio": 1.2521739130434784, "no_speech_prob": 0.00967125128954649}, {"id": 190, "seek": 160700, "start": 1614.0, "end": 1619.0, "text": " Theta is model parameters.", "tokens": [50714, 334, 7664, 307, 2316, 9834, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05748222325299237, "compression_ratio": 1.2521739130434784, "no_speech_prob": 0.00967125128954649}, {"id": 191, "seek": 160700, "start": 1619.0, "end": 1628.0, "text": " Self-attention blocks and group normalization layers are added to improve performance.", "tokens": [50964, 16348, 12, 1591, 1251, 8474, 293, 1594, 2710, 2144, 7914, 366, 3869, 281, 3470, 3389, 13, 51414], "temperature": 0.0, "avg_logprob": -0.05748222325299237, "compression_ratio": 1.2521739130434784, "no_speech_prob": 0.00967125128954649}, {"id": 192, "seek": 162800, "start": 1628.0, "end": 1637.0, "text": " Time step signal is fed to all residual blocks inside unit after sinusoidal position embedding.", "tokens": [50364, 6161, 1823, 6358, 307, 4636, 281, 439, 27980, 8474, 1854, 4985, 934, 41503, 17079, 304, 2535, 12240, 3584, 13, 50814], "temperature": 0.0, "avg_logprob": -0.057362848314745675, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.01200401782989502}, {"id": 193, "seek": 162800, "start": 1637.0, "end": 1651.0, "text": " Time step signal is needed because noise added in forward process and predicted in reverse process depends on time step.", "tokens": [50814, 6161, 1823, 6358, 307, 2978, 570, 5658, 3869, 294, 2128, 1399, 293, 19147, 294, 9943, 1399, 5946, 322, 565, 1823, 13, 51514], "temperature": 0.0, "avg_logprob": -0.057362848314745675, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.01200401782989502}, {"id": 194, "seek": 162800, "start": 1651.0, "end": 1656.0, "text": " For each training image in the minibatch.", "tokens": [51514, 1171, 1184, 3097, 3256, 294, 264, 923, 897, 852, 13, 51764], "temperature": 0.0, "avg_logprob": -0.057362848314745675, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.01200401782989502}, {"id": 195, "seek": 165600, "start": 1656.0, "end": 1664.0, "text": " A time step is sampled uniformly between one and capital T.", "tokens": [50364, 316, 565, 1823, 307, 3247, 15551, 48806, 1296, 472, 293, 4238, 314, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08665861324830489, "compression_ratio": 1.4038461538461537, "no_speech_prob": 0.04471893608570099}, {"id": 196, "seek": 165600, "start": 1664.0, "end": 1669.0, "text": " Noisy image is created.", "tokens": [50764, 883, 14169, 3256, 307, 2942, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08665861324830489, "compression_ratio": 1.4038461538461537, "no_speech_prob": 0.04471893608570099}, {"id": 197, "seek": 165600, "start": 1669.0, "end": 1675.0, "text": " Noisy image and time step are fed to unit.", "tokens": [51014, 883, 14169, 3256, 293, 565, 1823, 366, 4636, 281, 4985, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08665861324830489, "compression_ratio": 1.4038461538461537, "no_speech_prob": 0.04471893608570099}, {"id": 198, "seek": 165600, "start": 1675.0, "end": 1679.0, "text": " Noise is predicted.", "tokens": [51314, 44821, 307, 19147, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08665861324830489, "compression_ratio": 1.4038461538461537, "no_speech_prob": 0.04471893608570099}, {"id": 199, "seek": 167900, "start": 1679.0, "end": 1686.0, "text": " Loss and gradient are computed.", "tokens": [50364, 441, 772, 293, 16235, 366, 40610, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13997576084542782, "compression_ratio": 1.330935251798561, "no_speech_prob": 0.011052984744310379}, {"id": 200, "seek": 167900, "start": 1686.0, "end": 1695.0, "text": " Sampling.", "tokens": [50714, 4832, 11970, 13, 51164], "temperature": 0.0, "avg_logprob": -0.13997576084542782, "compression_ratio": 1.330935251798561, "no_speech_prob": 0.011052984744310379}, {"id": 201, "seek": 167900, "start": 1695.0, "end": 1708.0, "text": " After finishing training any sample X0 can be generated as a result of an iterative process starting at time step capital T with a noise image.", "tokens": [51164, 2381, 12693, 3097, 604, 6889, 1783, 15, 393, 312, 10833, 382, 257, 1874, 295, 364, 17138, 1166, 1399, 2891, 412, 565, 1823, 4238, 314, 365, 257, 5658, 3256, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13997576084542782, "compression_ratio": 1.330935251798561, "no_speech_prob": 0.011052984744310379}, {"id": 202, "seek": 170800, "start": 1709.0, "end": 1721.0, "text": " Markov transitions are computed for all time steps until X0 is obtained.", "tokens": [50414, 3934, 5179, 23767, 366, 40610, 337, 439, 565, 4439, 1826, 1783, 15, 307, 14879, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08520817756652832, "compression_ratio": 1.2745098039215685, "no_speech_prob": 0.04018983244895935}, {"id": 203, "seek": 170800, "start": 1721.0, "end": 1732.0, "text": " Transition equation is obtained using reparameterization.", "tokens": [51014, 6531, 849, 5367, 307, 14879, 1228, 1085, 12835, 2398, 2144, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08520817756652832, "compression_ratio": 1.2745098039215685, "no_speech_prob": 0.04018983244895935}, {"id": 204, "seek": 173200, "start": 1732.0, "end": 1739.0, "text": " This expression implies a probability distribution.", "tokens": [50364, 639, 6114, 18779, 257, 8482, 7316, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14517968409770243, "compression_ratio": 1.201834862385321, "no_speech_prob": 0.009509757161140442}, {"id": 205, "seek": 173200, "start": 1739.0, "end": 1759.0, "text": " As X0, any image is needed, not a distribution. So Z is 0 when T is equal to 1.", "tokens": [50714, 1018, 1783, 15, 11, 604, 3256, 307, 2978, 11, 406, 257, 7316, 13, 407, 1176, 307, 1958, 562, 314, 307, 2681, 281, 502, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14517968409770243, "compression_ratio": 1.201834862385321, "no_speech_prob": 0.009509757161140442}, {"id": 206, "seek": 175900, "start": 1759.0, "end": 1771.0, "text": " Also remember that during training with simple loss, discrete decoder for L0 term focuses on the distance between mu theta and X0.", "tokens": [50364, 2743, 1604, 300, 1830, 3097, 365, 2199, 4470, 11, 27706, 979, 19866, 337, 441, 15, 1433, 16109, 322, 264, 4560, 1296, 2992, 9725, 293, 1783, 15, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09094518773696002, "compression_ratio": 1.4527027027027026, "no_speech_prob": 0.036920931190252304}, {"id": 207, "seek": 175900, "start": 1771.0, "end": 1781.0, "text": " Approximated discrete decoder even ignores variance completely.", "tokens": [50964, 29551, 3081, 770, 27706, 979, 19866, 754, 5335, 2706, 21977, 2584, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09094518773696002, "compression_ratio": 1.4527027027027026, "no_speech_prob": 0.036920931190252304}, {"id": 208, "seek": 175900, "start": 1781.0, "end": 1788.0, "text": " Learning covariance.", "tokens": [51464, 15205, 49851, 719, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09094518773696002, "compression_ratio": 1.4527027027027026, "no_speech_prob": 0.036920931190252304}, {"id": 209, "seek": 178800, "start": 1788.0, "end": 1798.0, "text": " We have seen the method with learned mean and fixed covariance.", "tokens": [50364, 492, 362, 1612, 264, 3170, 365, 3264, 914, 293, 6806, 49851, 719, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0743028027670724, "compression_ratio": 1.3017241379310345, "no_speech_prob": 0.010568996891379356}, {"id": 210, "seek": 178800, "start": 1798.0, "end": 1811.0, "text": " In practice setting variance to beta T or beta tilde T provides similar sample quality.", "tokens": [50864, 682, 3124, 3287, 21977, 281, 9861, 314, 420, 9861, 45046, 314, 6417, 2531, 6889, 3125, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0743028027670724, "compression_ratio": 1.3017241379310345, "no_speech_prob": 0.010568996891379356}, {"id": 211, "seek": 181100, "start": 1811.0, "end": 1821.0, "text": " It is possible to design reverse process transitions with learned mean and learned covariance.", "tokens": [50364, 467, 307, 1944, 281, 1715, 9943, 1399, 23767, 365, 3264, 914, 293, 3264, 49851, 719, 13, 50864], "temperature": 0.0, "avg_logprob": -0.057282479909750134, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.042577680200338364}, {"id": 212, "seek": 181100, "start": 1821.0, "end": 1827.0, "text": " These are two extreme values for variance.", "tokens": [50864, 1981, 366, 732, 8084, 4190, 337, 21977, 13, 51164], "temperature": 0.0, "avg_logprob": -0.057282479909750134, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.042577680200338364}, {"id": 213, "seek": 181100, "start": 1827.0, "end": 1839.0, "text": " Instead of predicting variance directly, network learns to make linear interpolation between two extremes in log domain.", "tokens": [51164, 7156, 295, 32884, 21977, 3838, 11, 3209, 27152, 281, 652, 8213, 44902, 399, 1296, 732, 41119, 294, 3565, 9274, 13, 51764], "temperature": 0.0, "avg_logprob": -0.057282479909750134, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.042577680200338364}, {"id": 214, "seek": 183900, "start": 1839.0, "end": 1846.0, "text": " Network predicts V and V controls interpolation.", "tokens": [50364, 12640, 6069, 82, 691, 293, 691, 9003, 44902, 399, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09210430989499951, "compression_ratio": 1.4518072289156627, "no_speech_prob": 0.03906555101275444}, {"id": 215, "seek": 183900, "start": 1846.0, "end": 1855.0, "text": " Simple loss doesn't depend on covariance so loss expression is modified.", "tokens": [50714, 21532, 4470, 1177, 380, 5672, 322, 49851, 719, 370, 4470, 6114, 307, 15873, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09210430989499951, "compression_ratio": 1.4518072289156627, "no_speech_prob": 0.03906555101275444}, {"id": 216, "seek": 183900, "start": 1855.0, "end": 1865.0, "text": " Creating descent is designed such that VLV loss guides covariance and has no effect on mean.", "tokens": [51164, 40002, 23475, 307, 4761, 1270, 300, 691, 43, 53, 4470, 17007, 49851, 719, 293, 575, 572, 1802, 322, 914, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09210430989499951, "compression_ratio": 1.4518072289156627, "no_speech_prob": 0.03906555101275444}, {"id": 217, "seek": 183900, "start": 1865.0, "end": 1868.0, "text": " That's all for this video.", "tokens": [51664, 663, 311, 439, 337, 341, 960, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09210430989499951, "compression_ratio": 1.4518072289156627, "no_speech_prob": 0.03906555101275444}, {"id": 218, "seek": 186800, "start": 1868.0, "end": 1880.0, "text": " See you next time.", "tokens": [50364, 3008, 291, 958, 565, 13, 50964], "temperature": 0.0, "avg_logprob": -0.24823813140392303, "compression_ratio": 0.6923076923076923, "no_speech_prob": 0.09888841956853867}], "language": "English"}