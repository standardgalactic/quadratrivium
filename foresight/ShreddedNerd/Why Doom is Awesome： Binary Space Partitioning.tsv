start	end	text
0	6700	I'm going to use a few terms throughout this video that not everyone might understand.
6700	10940	A plane is a mathematical term for a square or rectangle.
10940	14500	This is mostly the walls, ceiling and floor.
14500	18980	Vertices are the corners of said planes, the singular being vertex.
18980	23780	Polygons are another term for surfaces derived from computer science rather than maths.
23780	26500	It's going to be used interchangeably with plane.
26500	31180	To do something recursively means a process must repeat itself over and over until an
31180	33420	end goal is met to solve a problem.
33420	37100	A data type is a way data is classified in programming.
37100	42980	For example, a string, which are words or a series of letters, and int, which is an
42980	44980	integer, a typical number.
44980	50300	There are different kinds of numbers as well, such as float for precise decimal numbers,
50300	55820	and long for, well, long numbers.
55820	62020	Of the total size of the games industry today, around 20% are games within the shooter genre.
62020	67740	Around a fifth of games in this $300 billion industry are shooters, most of them being
67740	69460	first person shooters.
69460	74340	The amount of money generated by and riding on the success of this singular genre in this
74340	76300	industry is stupefying.
76300	81140	The first person shooter as developed early on was a huge departure from every other kind
81140	83500	of game that existed at the time.
83580	88140	Games at the time, PC games especially, were often slow or methodical.
88140	92900	The personal computer platform was known for careful and considered games.
92900	98540	Turn-based strategy, grand RPGs with a slowly unfolding world, oftentimes these games would
98540	101220	be indistinguishable from a spreadsheet.
101220	103660	Action was the realm of console gaming.
103660	107620	Platformers were the most immediate real-time action-packed games available, and besides
107620	112340	notable games like Duke Nukem and Commander Keen, people didn't really play those kind
112340	114300	of action games on PC.
114300	116940	This was until the advent of the first person shooter.
116940	121300	Suddenly, people were hit with this visceral representation of violence.
121300	123580	They represented something which films could not.
123580	126420	You inhabit a world through the lens of the character.
126420	130900	You are closer to the action hero than ever before in any medium in history.
130900	136060	What is widely agreed upon as the first first person shooter ever is Maze War.
136060	140540	Developed in 1973, that's the same year Britain joined the European Union, Dark Side of the
140540	144300	Moon was released, and the United States announced it would withdraw from Vietnam.
144300	148860	It was developed for NASA computers by Steve Colley, Greg Thompson and Howard Palmer.
148860	151620	It was constructed with simple wireframe graphics.
151620	156780	People had the idea of adding multiple players using networking and connecting over the ARPANET.
156780	157780	Then it took off.
157780	164140	We saw other first person shooter games after that point, Spasm or Space Sim in 1974, Battle
164140	167020	Zone for arcades in 1980.
167020	171860	As these few examples, for the majority of the decades following its inception, the first
171860	176540	person perspective was known mostly for its association with the role playing genre.
176540	178300	For example, games like Ultima.
178300	183460	Now, first person shooting did technically exist, but you were merely shooting projectiles
183460	184540	at your friends.
184540	186100	You weren't inhabiting a character.
186100	188460	You weren't the action hero fighting bad guys.
188460	191380	That was until Wolfenstein 3D.
191380	196300	Each software was founded in 1991 by four former soft disk employees, John and Adrian
196300	201280	Carmack, no relation, they just happened to have the same name, Tom Hall and John Romero.
201280	204260	This was the same year the Soviet Union fell.
204260	206380	Carmack is going to be more important later on.
206380	210820	They originally began with a Mario clone named Dangerous Dave before the company was officially
210820	211820	founded.
211820	215580	This was mainly to shelf the beginnings of John Carmack's technical wizardry, encoding
215580	218580	an efficient 2D side scrolling graphics renderer.
218580	223780	The early 90s, when everything was a dark and edgy statement, the satanic inversion
223780	226340	between PC and console was no exception.
226340	229420	PC graphics using software rendering were terrible.
229420	234940	John Carmack developed his adaptive tile refresh for the PC to compete with the raw computational
234940	238660	power of the Super Nintendo, a true beast.
238660	242300	Adapted tile refresh meant that slightly more of the game world could be included in the
242300	244660	screen buffer, just outside of view.
244660	247380	This meant they could render smooth 2D scrolling.
247380	251420	It also made the sprite animations independent from screen scrolling.
251420	256140	This little bit of code magic powered their games, including the Commander Keen series.
256140	260540	The Commander Keen series was spread through shareware with subsequent episodes releasing
260540	264380	over the next year or so for purchase from Apogee, their publisher.
264380	269300	This shareware model would be important because it would be used in their subsequent games.
269300	273220	Speaking of subsequent games.
273220	276860	Wolfenstein 3D began development in 1991.
276860	281660	It would use the ray casting technique, earlier employed in Id's Catacomb 3D.
281660	286500	Ray casting was a rendering technique necessitated again by the limited processing power of
286500	288300	PCs at the time.
288300	291260	PC master race just can't stop losing.
291260	295780	PCs almost all used software rendering, rather than a dedicated graphics chip.
295780	300300	The shareware model involved getting the game on as many PCs as possible.
300300	303060	Ray casting was the solution to help them do this.
303060	307460	Ray casting allowed their game to run on basically any PC.
307460	311740	Ray casting means you're able to draw only the surfaces which are in the player's field
311740	312740	of view.
312740	316140	This helped massively in saving processing power, but how does it work?
316140	321540	In effect, a ray is cast, from the player to the geometry, to the nearest object blocking
321540	322540	its path.
322540	325860	In Wolfenstein, none of the levels were truly 3D.
325860	328820	Every level was drawn out on a flat 2D plane.
328820	333700	The program scans horizontally, checking that every pixel on the horizontal axis has
333700	334940	something drawn in it.
334940	339500	If there's nothing drawn in a position, a pixel column will be drawn out.
339500	343700	This is simplified from the process of ray tracing, where this process is done for every
343700	346580	single pixel, rather than every pixel column.
346580	351060	The distance between the viewer, or the camera, or player, they all have the same meaning,
351060	353420	and the nearest piece of geometry is obtained.
353420	358420	The height of the pixel column is calculated using the distance from point of intersection
358500	360860	in the direction the player is facing.
360860	364420	It uses trigonometry to find this point of intersection.
364420	369220	This effectively allowed them to give the illusion of distance to render a 3D scene.
369220	374580	This makes the process of rendering 3D much easier, as a line, that line being distance
374580	380340	from player to geometry, directly transforms to a line, that being the height of the rendered
380340	381340	column.
381340	384460	This process is done multiple times every single second.
384460	389340	The planes in the scene had been texture mapped, where an image is applied to a 3D surface.
389340	394380	When the columns are drawn, they are really drawing slices of these wall textures at different
394380	395380	sizes.
395380	400300	The height of the column being drawn is smaller when the plane, that being the wall, is further
400300	401300	away from you.
401300	405860	The textures are scaled appropriately to the size of the wall relative to the player.
405860	409340	This gave the world of Wolfenstein so much believability for the time.
409420	412820	You were no longer just navigating wireframe mazes.
412820	417940	You were an action hero, BJ Blazkowicz, infiltrating a Nazi castle.
417940	420900	The walls were adorned with flags of the German Reich.
420900	426220	You felt closer to the world than ever before, you were interacting with a true 3D space.
426220	428460	This process was, however, flawed.
428460	433260	In Wolfenstein 3D, there was no verticality at all, no difference in elevation, only the
433260	436780	walls had texture, the ceiling and floor had to be flat colours.
437100	440700	If they wanted texture on the ceiling and floor, they would have had to add horizontal
440700	441700	scan lines.
441700	446860	You were still ultimately navigating a maze, a colourful maze with Nazis in it, but a maze
446860	447860	nonetheless.
447860	453820	Wolfenstein 3D was released in May 1992, the sequels Spear of Destiny was released later
453820	454820	in the same year.
454820	459540	While the rest of the id team was working on Spear of Destiny, John Carmack, the ascetic,
459540	464420	high priest of technology, locked himself away to study, who had brainstormed the revolutionary
464420	467220	tech that would power their next massive game.
467220	472340	The next game that the rest of the team would start working on in September 1992, it would
472340	476100	be something inspired by Evil Dead, brutal and violent.
476100	482220	The name, green and pissed, was ultimately passed up for the much snappier, Doom.
482220	488020	Doom would launch in 1993, the game would truly be able to transport you into a world.
488020	490660	The levels truly felt like places.
490660	495700	The architecture of Doom consisted of supernatural science facilities, with Geiger-esque and
495700	497740	halish environments as well.
497740	503060	The enemies were a combination of horror and sci-fi with cybernetically enhanced demons.
503060	507820	The architecture, over the top setting and violence was inspired by films such as Evil
507820	509180	Dead and Alien.
509180	514580	The floors could now be angled, they could now have multiple levels with stairs and elevators.
514580	518100	The pools of toxic fluid surrounded these risen platforms.
518100	521540	It was truly 3D, but it wasn't really.
521540	526180	They were yet to achieve the full 6 degrees of freedom that John Romero wanted.
526180	528180	This wouldn't happen until Quake.
528180	531700	Rooms couldn't be stacked on top of each other, there was no vertical aim, the game
531700	534780	was entirely played on the horizontal axis.
534780	538540	The thing is, vertical aim was actually possible at the time.
538540	543020	They could have limited the enemy's vertical hitboxes to the size of the sprite, but they
543020	544020	didn't.
544060	546900	Because they couldn't, but to save processing power.
546900	549780	You see, Doom was still using software rendering.
549780	553940	Its shareware model relied on getting their games on as many computers as possible, like
553940	554940	I said.
554940	558740	It was essentially the beginning of the free-to-play game model we have today.
558740	562980	They aimed for the IBM PC, for machines running DOS.
562980	567460	They had to sell their game to university students and wages who were bored at work
567460	569500	so they could run off as tournaments.
569500	573860	They didn't calculate the enemy's vertical hitbox so that they could save memory.
573860	577900	They didn't want to give the enemy's hitboxes a height value, just have another factor to
577900	578900	calculate.
578900	583100	All the levels were drawn on a 2D plane, like Wolfenstein.
583100	586140	Just this time, the map creator is quite different.
586140	590700	The ground is divided into sectors, this will be very important later.
590700	596060	Each sector has two associated values, ceiling height and floor height, well it has several
596060	599420	associated values, but those are two important ones.
599420	603380	This is also why one room could not be placed above another and why every surface had to
603380	606340	be made out of a flat square or rectangle.
606340	610140	Another reason that vertical aim couldn't have worked is due to how the texture mapping
610140	611140	worked.
611140	616060	One game that did have vertical aim and levels on top of each other, before Quake and not
616060	619420	that long after Doom, was Bungie's Marathon.
619420	622820	And look what happens when you look up and down in that game.
622820	629620	The textures start to distort, this is because the game, like Doom, uses affine texture mapping.
629620	634780	This, like many of the other methods, was done to save memory on the processor by taking
634780	637180	advantage of CPU caching.
637180	643660	Basically what happens is that texture coordinates are linearly interpolated, using screen space
643660	649700	distance between vertices, rather than the actual 3D in-engine distance between them.
649700	654020	The distance between points on a plane remains the same when you look up and down.
654020	658380	What this means is that perspective when looking up and down is not accounted for.
658380	662220	You know how pixels on a texture start to warp as you get closer?
662220	667620	What looks like a straight line from far away begins to turn inward as closer pixels get
667620	671380	larger while more distant pixels get smaller.
671380	677260	This doesn't happen in Doom, because accounting for perspective is taxing on 90s computers.
677260	681500	You know how the game only draws things in columns to save processing time?
681500	685780	They'd have had to do vertical scans as well as horizontal scans.
685780	691580	Several ports of Doom with newer rendering engines made for new hardware like GZDOOM
691580	693860	obviously don't have this limitation.
693860	697940	As such, they use more current texture mapping and don't have this issue.
697940	700460	But all of these concessions weren't enough.
700460	706300	John Carmack's coding brilliance met its most devious enemy yet, Stairs.
706300	711820	John Romero came out with a really way out and strange idea on his early incarnation of
711820	712820	E1M2.
713180	718740	Yes, he wanted to mix things up with the earth-shattering invention of Stairs.
718740	723620	You see, just raycasting alone wasn't enough to efficiently optimise the game.
723620	727460	Raycasting saves memory by only rendering things which are visible to the player.
727460	732900	However, surfaces on the inside of these stairs were visible to the existing algorithm, thus
732900	735340	they were drawn when they shouldn't have been.
735340	740900	You see, for 3D rendering to not waste performance, they need to draw as few surfaces as few planes
740900	741900	as possible.
741900	747460	This necessitates occlusion culling, or visible surface determination, or backface culling.
747460	753340	Basically, the renderer should only draw what is in the player's field of view.
753340	757020	They need to be absolutely no overdraw whatsoever.
757020	763060	Adding height as a variable, such as with Romero's stairs, requires a much more sophisticated
763060	768980	algorithm than was present in Wolfenstein and in Id's existing rendering engine.
768980	773260	There are many different rendering algorithms out there, it seems that we need to dip into
773260	778660	the hypothetical algorithms to start trawling the literature for some better algorithms.
778660	780460	Let's explore some of the options.
780460	784140	There's the painter's algorithm, named so because, like in a painting, the background
784140	787020	is rendered first, with detail laid on top.
787020	790980	Basically, the polygons are sorted by their distance from the viewer, and the more distant
790980	794820	polygons are rendered first, and the close polygon is rendered last.
794820	801420	It is easily the most simple solution, it was developed in 1972, the year MASH started,
801420	804140	as an easy to implement solution for CAD.
804140	809260	It also has the worst possible case for space complexity, meaning it takes up as much memory
809260	811820	as an algorithm possibly could.
811820	814620	Every single surface in the field of view is drawn.
814620	817140	Obviously, this isn't a good fit.
817140	821380	It's more of an example from the early days of exactly what not to do.
821380	825900	There's also Warnock's algorithm, John Warnock was the founder of Adobe, and this algorithm
825900	831780	originated in his doctoral thesis in 1969, the year man landed on the moon and in the
831780	833860	court of the crimson king was released.
833860	837900	Essentially, it recursively subdivides the screen into four parts.
837900	841820	What this means is it splits the screen into four windows and splits each window into four
841820	842940	smaller windows.
842940	847980	It does this again and again until each window is trivial to render, meaning it has only
847980	850700	one or zero polygons present.
850700	854940	The algorithm also checks if multiple polygons are within one window.
854940	859020	If the closest polygon covers the whole window, then it is drawn.
859020	863460	This is more efficient than painter's algorithm as it renders front to back, but it's still
863460	865140	not very well suited.
865140	870780	It will eventually keep subdividing to a ridiculous degree, to the point where a window is smaller
870780	871780	than a pixel.
871780	874380	Yet, this ain't a good fit for a game.
874380	878060	You could do a Zed buffer, for every pixel you want to draw, check if there's anything
878060	879060	in front of it.
879060	880780	Doing a check on every single pixel?
880780	882740	Yeah, there's no chance in hell.
882740	887700	The final solution does kinda use a Zed buffer, but it doesn't do that check on every single
887700	888700	pixel.
888700	890820	It finds a much more efficient way to do it.
890820	891820	No.
891820	897860	In order to truly revolutionise not just gaming, but 3D graphics forever, our protagonist,
897860	902100	John Carmack, needs to go to a much more inspired source.
902100	904940	Something that hadn't actually been implemented before.
904940	906940	Something you just read in a white paper.
906940	907940	Just a concept.
907940	912980	Yes, how common is it in gaming to see people run into optimisation issues, and seek out
912980	915340	a white paper to solve their problem?
915340	917220	Cause nobody else had done it before.
917220	919100	Yes, that's Carmack for you.
919100	923700	We needed a renderer that would draw objects closest to the player to furthest away until
923700	925780	every pixel was written to.
925780	927540	That had no overdraw.
927540	930660	The solution was in a 1980 white paper.
930660	933900	That's the same year Genesis released the reclaimed album.
933900	940460	Dook, where they really came into their own.
940460	945820	This 1980 white paper by Bruce Nailot was given the humble title, On visible surface
945820	949060	generation by a priori tree structures.
949060	955460	It described a rendering model we know as binary space partitioning, or BSP for short.
955460	958700	This was the method that would change gaming for years.
958700	962260	This wasn't the first time binary space partitioning was alluded to.
962260	968420	A 1969 study by the Air Force of the Good Old US of A, alluded to the use of partitioning
968420	972020	3D scenes to solve the visible surface problem.
972020	977340	The study was conducted to determine the viability of 3D for flight simulation.
977340	981380	We can thank the armed forces of the United States for giving us doom.
981380	984900	They explored using a matrix to track which objects are occluded.
984900	989220	This of course wouldn't do so well as the size of the matrix would need to be the square
989220	991780	of the number of objects in a scene.
991780	993660	That wouldn't scale very well.
993660	999220	It wasn't until 1980 that binary space partitioning was properly realised in the white paper that
999220	1003860	would reach John Carmack alongside its core tenet, the binary tree.
1003860	1006860	But what is binary space partitioning anyway?
1006860	1008780	Well, the name gives you a clue.
1008780	1012060	Is partitioning space in a 3D environment?
1012060	1014940	This is done using a BSP tree.
1014940	1017100	What is a BSP tree you may ask?
1017100	1022020	In computer science, a tree is a data structure used as a mathematical model for displaying
1022020	1023940	certain data types.
1023940	1028540	It's separated into nodes with parent nodes that have child nodes.
1028540	1031500	BSP uses binary trees.
1031500	1033260	Binary essentially meaning two.
1033260	1038740	A binary tree is a tree where there are two or less child nodes stemming from any given
1038740	1040260	parent, from any node.
1040260	1043340	There are never more than two child nodes.
1043340	1048140	This is as opposed to a non-binary tree, which is a tree that has dyed hair and a gender
1048140	1049300	studies degree.
1049300	1054820	The data stored in the nodes of the binary tree are the subsectors of the map.
1054820	1059620	Subsectors being smaller parts of those map sectors I spoke about earlier.
1059620	1065380	Remember, each map is designed on a flat 2D map editor, with each sector having associated
1065380	1066580	height values.
1066580	1071740	The genius is that the map is sliced up via binary space partitioning after the map is
1071740	1072740	built.
1072740	1078660	The hard work is done when the map is created, rather than by the processor at runtime, while
1078660	1080380	the player is playing the game.
1080380	1086220	The map is already split, already partitioned when the player loads it, reducing processing
1086220	1087900	needed at runtime.
1087900	1093020	To create the binary tree, a root node is established, covering the whole map.
1093020	1099620	After this, the map is recursively subdivided along every plane, until only convex subsectors
1099620	1100620	are left.
1100620	1104100	Subsectors are carved into smaller subsectors.
1104100	1108900	The entire map is essentially cut in two, along every single wall.
1108900	1113860	Every time the map is cut in half, the two halves are added as nodes at the bottom of
1113860	1114860	the tree.
1114860	1120380	By the end, you're left with a tree where each node at the bottom of the tree represents
1120380	1122380	a distinct subsector.
1122380	1127500	Remember, this tree is entirely conceptual, it doesn't actually exist.
1127500	1132940	So long as the planes don't move, vertical movement is accepted from this because vertical
1132940	1138100	movement is a separate value, the same BSP tree can be used.
1138100	1144060	Dooms BSP tree generation was done after levels were complete and would search for the best
1144060	1149020	possible tree, that being the one that generates the fewest binary tree nodes.
1149020	1153220	A binary search is performed to determine what sector the player is in.
1153220	1158660	A binary search is when an array of pre-sorted data is searched through by continually halving
1158660	1159660	said array.
1159660	1164700	A search through a binary tree is, by its nature, a binary search, because every time
1164700	1169060	you go down a node, you're removing half of the possibilities.
1169060	1174060	After the player's sector is determined using this binary search, the subsectors are then
1174060	1178220	sorted by their distance from the player, closest to furthest.
1178220	1182260	The tree is iterated through to determine which planes to draw.
1182260	1187180	The horizontal scan lines from ray casting are still used to track the parts of the screen
1187180	1188820	that have been drawn over.
1188820	1193580	This way they are able to render front to back and ensure that there is no overdraw.
1193580	1197820	When each node is passed over in the iteration, a few things are checked.
1197820	1199980	Has that area already been painted over?
1199980	1202260	If so, don't bother drawing it.
1202300	1208620	When a plane, polygon, or wall is drawn, it is akin to a curtain being drawn left to right.
1208620	1210700	To unveil an area, so to speak.
1210700	1216500	Whenever a curtain is seen by the player, it is unveiled, from closest to the furthest.
1216500	1220660	To be exact, it's the closest 256 walls that are displayed.
1220660	1226180	Remember how height of the pixel columns drawn on screen depended on distance from the player?
1226180	1231780	For Doom, this required determining the angle of both ends of every wall, relative to the
1231780	1233420	player's field of view.
1233420	1238540	In the early 90s, most processors didn't have dedicated floating point capability.
1238540	1243020	This is a float in programming, if you've ever heard of that, basically a data type
1243020	1245340	for very precise decimal numbers.
1245340	1251620	The Doom engine had to use binary angle measurements, which avoid floats, and used a lookup table
1251620	1253980	to determine the X coordinates.
1253980	1256940	A lookup table is essentially a cheat sheet.
1256940	1261660	Instead of the processor doing the maths itself, it just looks up the answer in this lookup
1262300	1263300	table.
1263300	1269140	They also use these angles for backface culling, with a simple and elegant piece of mathematics.
1269140	1274380	Backface culling basically means the renderer doesn't draw the inside of every polygon.
1274380	1278100	It only draws the part on the outside that you actually see.
1278100	1282380	The walls are rendered first as pixel columns, from front to back.
1282380	1285820	Then the ceilings and floors, using pixel rows.
1285820	1291500	The objects, such as barrels and enemies, are rendered from the furthest to the closest.
1291500	1297580	The ceilings and floors are determined using visplane underscore T, or visplanes.
1297580	1301260	Visplanes were determined using height values within each sector.
1301260	1306940	Visplanes are not constrained to single sectors, and will be continuous provided they all possess
1306940	1310580	the same height, illumination, and textures.
1310580	1313180	Pixel rows are drawn, top to bottom.
1313180	1318300	One final thing you may wonder about Doom's graphics, is why are all the enemies just
1318300	1320780	pictures facing towards you?
1320860	1324820	There's nothing to do with them being what we call front facing sprites.
1324820	1328940	They're rendered last, and like I said, furthest to closest.
1328940	1331300	That's the opposite order to the geometry.
1331300	1336300	They are just pictures, taken from the data files and projected onto screen.
1336300	1338820	Of course, there are a range of pictures.
1338820	1343980	The one that is drawn depends on the player's location relative to the enemy, and the direction
1343980	1345460	the enemy is facing.
1345460	1349020	The enemies do actually have a full 3D hitbox.
1349020	1354220	The pictures, as most fans know, are actually from real pictures taken of sculptures made
1354220	1355580	by the artists.
1355580	1361500	So, John Carmack was faced with a fierce issue in the problem of visible surface determination.
1361500	1366740	He had to find a solution that was both incredibly fast and very accurate.
1366740	1372980	BSP doesn't completely solve the visible surface determination problem, but it is one
1372980	1376940	of the most reliable and efficient methods of optimization.
1376940	1379180	It saw massive acceptance.
1379180	1384340	BSPs were evolved and made their way into Quake's dramatically improved game engine
1384340	1389820	when they took on Michael A. Brash and finally figured out the full 6 degrees of freedom.
1389820	1394660	From there, it was in every FPS, and I mean all of them.
1394660	1400660	Half-Life and Half-Life 2, every source game, Counter-Strike to Left 4 Dead, the Halo series
1400660	1401660	used it.
1401660	1404740	You know the Scarab from Halo 2 is actually a BSP object?
1404740	1407980	Yes, it's a moving piece of level geometry.
1407980	1413020	Many would say it's a sign of Carmack's genius, that he took an idea from concept to
1413020	1414820	mainstream solution.
1414820	1421300	He did all this crazy work in between supercharging Ferraris and becoming a judo master.
1421300	1424380	You know, one time he got locked inside a building.
1424380	1429740	Instead of, say, waiting for security or calling a locksmith, he devised a brilliant solution.
1429740	1434780	He'd luckily gone to Renaissance Fair earlier, where he bought a medieval battle axe.
1434780	1438780	So naturally, he smashed down the door with his mighty axe.
1438780	1441540	He was rich so he could afford to get the door fixed.
1441540	1447300	He truly is a unique figure in the gaming industry, and you can see why he's so highly
1447300	1448300	respected.
1448300	1452020	If you made it this far, comment, thank you John Carmack.
1452020	1457700	The use of BSP trees has begun to be replaced over the last few years.
1457700	1460740	These instead opt for things like static meshes.
1460740	1465620	With more powerful hardware now, they could afford some level of overdraw.
1465620	1470380	Other methods give artists more creative freedom and a much quicker workflow.
1470380	1476420	BSP often leads to the distinct blocky look that many old games had.
1476420	1481820	One could certainly argue that these technical limitations are what gave Source Maps and
1481820	1487540	early 2000's maps in general, their distinct charm, their soul.
1487540	1494500	With stark and distinct architectural choices, some magic is truly lost in busy modern day
1494500	1495500	maps.
1495500	1501140	Many new games have actually tried to go back to recreating these older, cleaner, more distinct
1501140	1502140	visuals.
1502140	1507620	BSP is still occasionally used today in prototyping levels for games, quickly blocking them out.
1507620	1511260	It's of course still used in games such as Counter-Strike Go.
1511260	1516000	This was a big video and naturally took a bit of research which I've provided links
1516000	1517500	to in the description.
1517500	1524060	If I got anything wrong, please feel free, in fact feel obligated to call me out in the
1524060	1525060	comments.
1525060	1531340	Like, join the Discord server and subscribe with notifications on to join the Nerd Army
1531340	1532980	and become a Sigma Male.
1532980	1534860	Thanks for watching, goodbye.
1541260	1543460	This video really was a lot of work for me.
1543460	1547380	If you didn't understand this video entirely, that's fine, because to be honest I didn't
1547380	1550740	understand entirely going in and I still don't fully understand it.
1550740	1555660	If you saw anything in this video that was factually incorrect, please do not hesitate
1555660	1558400	to correct me in the comments to contact me.
1558400	1561460	As well as that, there were actually some tools that I was trying to get running to
1561460	1564220	visualize some of the graphics rendering.
1564220	1568740	This includes the Doom Vism and Headless Doom, for which I've included both of the
1568740	1570420	Githubs in the comments section.
1570500	1574780	I've also included every source I used in this video, or specifically helpful during
1574780	1577780	this video was this article by Fabian Sunglad.
1577780	1581540	I definitely recommend checking it out, if this interested you at all, please check out
1581540	1583700	these sources for further reading.
1583700	1584700	Thank you and goodbye.
