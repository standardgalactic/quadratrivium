start	end	text
0	8000	When deciding how to store large amounts of data, a key question is how to organize that data so we can operate on it efficiently.
8000	12000	Let's start by looking at a popular data structure, the binary search tree.
12000	16000	A binary search tree consists of connected nodes.
16000	23000	Each node has a key, in this case a unique number, and can point to a left child node and a right child node.
23000	29000	Binary search trees obey the property that any keys to the left of a node are less than that node's key
29000	33000	and any keys to the right of a node are greater than that node's key.
33000	36000	This allows for an efficient search process.
36000	42000	If we want to search for a key, we start at the root of the tree and compare against the key there,
42000	48000	going left or right depending on if the key we want is less than or greater than the key in the node.
48000	54000	At each step, we pick only the half of the tree that might contain the key we're looking for,
54000	59000	saving time by not bothering to search parts of the tree we know won't have our key.
59000	64000	At this point, we might wonder if binary search trees work so well
64000	69000	because at each step we focus in on only the relevant half of the search space,
69000	74000	wouldn't it be better to have a tree that split into three instead of two
74000	79000	so that at each step we could reduce the search space to a third the size?
79000	83000	But depending on the circumstances, this might actually be less efficient.
83000	88000	That's because each node, instead of having one key, might have two.
88000	94000	Keys less than the first key would be to the left, keys greater than the second key would be to the right,
94000	97000	and keys between the two would be in the middle.
97000	102000	The tree is definitely shallower, meaning we have to look at fewer nodes to get to our answer.
102000	107000	But we also might need to double the number of comparisons for each node.
107000	112000	Rather than just compare against one key, we might need to compare against both keys.
112000	117000	In the end, we'll often end up performing more comparisons than in binary search.
117000	122000	But does more comparisons mean this approach is less efficient?
122000	125000	That depends on what operations take up more time.
125000	129000	If you have a lot of data, say in a database or file system,
129000	136000	it's likely that the most expensive part of any algorithm will be the time it takes to go fetch a new node of data.
136000	139000	Comparing keys, the processor can perform very quickly,
139000	146000	but when it's time to search the next node, the processor needs to wait much longer for the data to be ready.
146000	149000	It's in this context that the B tree shines.
149000	155000	The idea behind a B tree is to store a tree with nodes that can have more than one key.
155000	160000	Maybe they have up to two keys, maybe ten, maybe hundreds or more.
160000	167000	To demonstrate the idea, we'll use a B tree with nodes that have a maximum of four keys.
167000	171000	Once we have a B tree, search works just like you'd expect.
171000	176000	We start with the root node and check our key against the keys in the node.
176000	181000	Maybe one of the keys matches and we're done, but otherwise we need to search another node.
181000	188000	However many keys a node has, it has a number of children equal to one more than the number of keys.
188000	191000	This lets us know where to search.
191000	195000	If our search key is less than all the keys, we'll look to the leftmost child.
195000	199000	If our search key is greater than all of the keys, we'll look to the rightmost child.
199000	204000	Otherwise, depending on which two keys our search key falls between,
204000	207000	we'll look at the child in between those two keys.
207000	214000	This process continues, one node at a time, until we either find or don't find the key we're looking for.
214000	220000	Because each node branches in so many different directions, we cut down on the search space quickly,
220000	227000	and we can find what we're looking for by checking far fewer nodes than a binary search tree would require.
227000	230000	But how exactly do we create a B tree?
230000	236000	And how do we make sure it doesn't get imbalanced, where the tree is deeper on one side compared to another,
236000	238000	which might slow down operations?
238000	243000	Let's start with some rules of B trees that will guide how we operate on them.
243000	248000	First, the leaves of the B tree, the nodes that don't point to any other nodes,
248000	252000	those all need to be at the same level of the tree.
252000	258000	This makes sure everything stays balanced, we're not allowed to have some leaves deeper in the tree than others.
258000	263000	Next, every node has a maximum and a minimum number of keys.
263000	271000	We get to choose the maximum, and the minimum is always half of the maximum number of keys, rounding down if needed.
271000	276000	So in our case, each node can have two, three, or four keys.
276000	280000	What happens when we try to add our first number into a B tree?
280000	283000	We'll place the key into the root node.
283000	285000	But wait, you might say.
285000	289000	We just said that nodes need at least two keys.
289000	292000	For B trees, the root node is the exception to the rule.
292000	299000	The root node can have fewer keys, but all other nodes in the tree need to have at least the minimum.
299000	303000	So let's keep adding keys to the tree and see what happens.
303000	308000	Each time we add a key, the key will get added to the root node in sorted order.
308000	315000	But remember, all nodes can only store up to a maximum number of keys, in this case four.
315000	319000	So what happens when we try to add our fifth key?
319000	321000	It's not going to fit.
321000	326000	So anytime we have too many keys in a node, we need to split that node up.
326000	330000	Remember that each node requires a minimum of two keys.
330000	337000	So we'll take the smallest two keys and make one node, and take the largest two keys and make a second node.
337000	340000	What do we do with this leftover middle key?
340000	348000	Well, all the keys in the left node are less than this key, and all the keys in the right node are greater than this key.
348000	354000	So we can push this key up into a new root node that points to the left and right.
354000	357000	Now this is starting to look more like a tree.
357000	362000	When we add new elements, we're always going to add them at the bottom level of the B tree.
362000	368000	So when a new element comes along, we use the root node to decide which node to visit next,
368000	373000	and when we get to the bottom of the tree, we insert the key in the appropriate spot.
373000	378000	That process will continue, with new nodes getting added to the bottom level.
378000	382000	Notice that most of the time inserting is very straightforward.
382000	387000	Just follow the B tree nodes down to the bottom and insert the value there.
387000	394000	It's only when we completely fill up a node and then try to add a new key there that we need to perform a split.
394000	399000	We'll split the node into two nodes and push the middle key up into the parent.
399000	407000	As we add more and more data, you might start to wonder, what happens when the parent becomes full of keys too?
407000	411000	It turns out this splitting algorithm is recursive.
411000	418000	Let's look at this tree, for example, and try to insert a new key that belongs in a node that's already full.
418000	424000	We start as usual by splitting the node up into two nodes and pushing the middle key into the parent.
424000	431000	But the parent is already full, so when we push the middle key into the parent, it's overflowing.
431000	434000	If that happens, we repeat the process again.
434000	440000	We split the parent into two nodes of its own, pushing the middle key into a new root node.
440000	445000	This elegant recursive algorithm preserves all the properties of the B tree.
445000	453000	When a node gets full, we split it into new nodes, and the only time the tree gets taller is when we split the root node into two
453000	459000	and create a new root node, keeping all leaves at the same level of the tree.
459000	465000	But we don't just care about adding new data, we also want the ability to delete data.
465000	468000	So how do you delete data from a B tree?
468000	471000	Well, let's say there's a key we want to delete.
471000	476000	We start by searching through the tree as usual, starting from the root, looking for the key.
476000	479000	Once we find it, we can delete it from the tree.
479000	485000	That worked well in this case, but there are a few trickier cases we need to think about.
485000	495000	Take a moment and consider under what circumstances might this deletion algorithm run into problems with the properties we've set up around B trees.
495000	497000	Here's one case to consider.
497000	503000	What happens if we try to delete a key, but the node already has the minimum key count?
503000	508000	If we deleted the key, the node would have fewer than the minimum, which isn't allowed.
508000	511000	So how do we fix the problem?
511000	519000	Well, if a node has too few keys, we'll take a key from a node next to it, one of its sibling nodes, so to speak.
519000	522000	In this case, let's take a key from the right sibling.
522000	526000	We'll take the smallest key, since we're going to be moving it to the left.
526000	533000	If we were taking a key from the left sibling, we'd instead take the largest key, since we'd be moving it to the right.
533000	538000	But we can't just take the key from the sibling and fill in the missing spot in our node,
538000	542000	because that would make the parent key in between these two nodes wrong.
542000	546000	Remember that this parent key acts as a separator.
546000	551000	All keys to the left of it should be smaller, and all keys to the right of it should be bigger.
551000	555000	So we can't just move a key from one sibling to another like this.
555000	559000	With a slight modification, though, we can make this work.
559000	565000	Instead of taking the key from the sibling directly, we'll let the key from the sibling become the new separator,
565000	569000	and we'll use what used to be the separator in our node.
569000	572000	This preserves the properties of the B tree.
572000	575000	Values less than the separator are to the left of it.
575000	578000	Values greater than the separator are to the right of it.
578000	582000	So this works, as long as we have a sibling we can take from.
582000	587000	But what happens if when we remove a key, we fall below the minimum,
587000	590000	and our sibling nodes are also already at the minimum?
590000	593000	Now we can't take from a sibling.
593000	597000	Instead, just like when adding keys we could split nodes apart,
597000	601000	when deleting keys we might merge nodes back together.
601000	606000	We can take our node, our sibling node, and the separator between them,
606000	610000	and merge them together into a single full node.
610000	618000	In this case, this works out fine, though note that in some cases that might mean the parent node now ends up with having too few keys.
618000	622000	In that case, we can recursively apply the algorithm we've just described,
622000	628000	either taking from a sibling if possible, or merging with a sibling if that's not possible.
628000	635000	The other scenario we need to think about is what happens if we delete a key from the middle of the tree, rather than from a leaf.
635000	639000	In that case, it's not as simple as just deleting the key,
639000	644000	since that key was also acting as a separator between two subtrees.
644000	647000	In that case, we need a new separator.
647000	652000	And that separator needs to still be greater than everything in the left subtree,
652000	655000	and smaller than everything in the right subtree.
655000	659000	That means we have two options for the new separator.
659000	663000	We either need to take the largest value in the left subtree,
663000	666000	or the smallest value in the right subtree.
666000	671000	Either one works, and that becomes the new separator value.
671000	677000	Of course, after we do this, it's possible that the node we took the key from will now have fewer than the minimum.
677000	679000	But we know how to fix that already.
679000	685000	We just take a key from a sibling, or merge two nodes together if that's not possible.
685000	690000	So by taking care to always preserve these rules of B trees,
690000	695000	we've constructed a data structure that's remarkably efficient for searching lots of data.
695000	702000	Even though we have lots of nodes, we only need to access a small number of them any time we're working with data,
702000	707000	resulting in substantial savings on time waiting for data to be retrieved.
707000	713000	And the property that nodes can be anywhere between half full and completely full turns out to be especially helpful.
713000	719000	It means we can split up nodes when they get too full, and merge them together when they get too empty.
719000	725000	The fact that many nodes aren't completely full also makes inserting new data easy most of the time,
725000	733000	since often we can just fill in an empty space in a node without needing to change anything about the rest of the tree.
733000	740000	These properties make B trees and variance on B trees a popular and elegant choice for handling data,
740000	743000	especially in databases and file systems.
743000	747000	And I hope this tour of the B tree, its structure and how it operates,
747000	755000	gives you a better understanding and appreciation for what's really going on inside your computer as it stores and navigates your data.
