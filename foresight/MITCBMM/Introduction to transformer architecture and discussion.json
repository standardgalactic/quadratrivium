{"text": " If we look at history, models of the brain have always been the most fashionable technology. It was hydrodynamics in the 17th century and digital computers a few decades ago. And ten years ago was convolutional neural networks. And now, transformers of course. So in preparation for this, we have an introduction to transformers. I think this is something that Michael Fee, chairman of this department here and Ghibli Carlo asked for. Of course they are not here, but Michael actually asked me to record it. Is that possible? It's recording now as long as that's okay with you guys. Everybody agrees to be recorded. Okay, all right. So with this we have an introduction to transformers and this probably will be the first of some of the research meeting where we'll speak about transformers. Next time perhaps more in comparison in the framework of models of the brain. But this time it's more on just technical aspects of transformers. And so Philip Tinsola, C-Sale and Brian Chung, this building, will tell us how Jim is here after all. Okay, so Lupus in Fabulous. What was that? Lupus in Fabulous exactly means what happened, that I will speak about you and you came in. So Philip will start. And then we have Brian and then perhaps discussion and in the meantime, of course, very welcome to ask a lot of questions. All right. Okay, great. Thank you, Tommy. So this can be, as far as I'm concerned, very informal and happy to go back and forth. I took slides from a lecture, like hour and a half electron transformers I've given, and tried to pick a few slides. So it's going to be a quick intro, but we can go into as much detail as you want, and happy to make it also just more discussion. But I'll start by talking about, you know, what are transformers, you know, for those of you who haven't encountered them yet. Okay, so I think that there are two key ideas that are not new but are relatively popularized by transformers. And the first is called the idea of tokens. And then the second is going to be the idea of attention. There's a few other, you know, bits and pieces and transformers, but to me, those are the two kind of key ideas. Okay, so tokens are essentially a new data structure. And they're a replacement for neurons. Okay, so in artificial neural nets, neurons are just real numbers, just scalar numbers, and tokens are vectors. So that's, that is the distinction that, as far as I'm concerned. So it's just lingo for a vector of neurons, a vector of scalars. But when you start thinking of your primitive units in a network as tokens, whether they're neurons, then sometimes the math will look a little bit different. And I think it's just a powerful way of working with new kinds of neural networks made out of tokens instead of neurons. Okay, again, it's a patch in an image. It's a patch in an image can be a token. I'll give a few examples and not not any ideas vector neurons vectors of, you know, features for a unit inside a network that's an old idea, you know shows up in graph neural networks if you've seen those two. Okay, but the way I like to think of it is we used to work with arrays of neurons and now in transformers we work with arrays, tensors of various shape of tokens, but they're kind of like encapsulated, you know, vectors of information. Okay, so you can tokenize just about anything and that is like the big trend right now is just show how to turn whatever data you have into a sequence of tokens. So here's an example, like Tommy's mentioning of tokenizing an image. You could do this in a million different ways but the way that is very common is you start with an image you break it into patches, you flatten all the patches to create just take all the rows of that. Just pixels and just concatenate them into a really long row or really long colon vector. And then you get this thing called a token which is just an n dimensional vector representing that patch. And this arrow up here, if you can see my mouse, it could just be flattened or concatenate, but commonly it will actually be a linear projection to some, you know, fixed dimensionality. So project to 128 dimensional vector for example. Should I think of a token as an embedding? Is it the same or what? Same thing. Yeah, so vector embedding of a patch would be a token in this context. Yeah. So there's a lot of names for this but to me like yeah once you start thinking of things in terms of tokens like that's that's how I like to think of it. Okay, so you can tokenize anything. That's often a linear projection. We used to operate over neurons now we operate over tokens. And just a few more examples so whenever you can take your signal and chop it up into chunks and project each chunk to a fixed dimensionality vector. Then you can tokenize that data so for language, people do this as well they chop up into little chunks which are often, you know, two characters or a few characters at a time. And they project those into 120 dimensional vectors with sound you chop up into little tiny snippets of sound. So you can tokenize anything and once you've tokenized it then it's just a sequence like representation a sequence of vectors. Although really the way transformers work is they think of it as they treat it as a set not a sequence but people often talk of it as a sequence. Okay. So that's tokenization that's, I think that's the first critical idea and then everything ends up being the operators to find over tokens as opposed to over neurons. So rather than taking linear combinations of neurons which is the common, you know, linear layer in a network, we take linear combinations of tokens where you just take a weighted combination of vectors instead of weighted combination of scalars. Okay. So I'm not in this, because it's only like a little intro going to go into the math and detail, but we can always come back if you're interested. Okay, so in standard artificial neural networks, there's two key layers, there's the linear combination layer, the linear layer, and there is the point wise nonlinearity, which might be a ReLU or a sigmoid function. So in tokens, there's the same thing, there's a linear layer, which we have here, just a linear combination of vectors, and then there's a token wise nonlinearity which is completely analogous to a neuron wise nonlinearity. So this is a neural net that does a point wise nonlinearity over neurons that applies the same function ReLU to every neuron in a list, and the token net applies the same function F to every token in a list for an asset. Okay, usually F is going to be itself a multilayer perceptron, it will be some parameterized function. So equivalently think of this as a convolution over the tokens. So, transformers, CNNs, it's all the same ideas kind of rehash, we can talk about that if people are interested. But here's what it looks like, it's just a token wise operation that slides along the list of tokens. Okay, so you can see that looks like convolution sliding across the signal. Okay, it's usually one layer, right? It's usually one layer, I think that is usually linear ReLU to linear. Yeah, so it's a nonlinear function. If it, yeah, it just has to be nonlinear so you get nonlinearities into the system. I have a question. MLP. One layer of neither. Well, two linear layer MLP, but sure. Yeah, you could call it something else. I have a good question for the last slide, like, I think I have missed what is the Z here, like, in the last slide. Oh, Z is the token code vector, meaning the vector of neurons inside that token. Okay. It has this code vector that lives inside it. Yeah. Okay, thank you. You're welcome. We'll see you now with convolution here. Conquering applies the same operator independently and identically to every item in a sequence, and this is doing the same thing. So it's like, you know, slide the filter across here to slide this nonlinear filter across the sequence. But we give it as a one by one kernel because it doesn't the like the receptive field in the sequence dimension is just looking at one token at a time. Okay, so here's a neural net. And here is what I'll call a token net. So it's just like a neural net alternating linear combination point wise nonlinearity but now it's linear combination of tokens and token wise nonlinearity. And transformers are in that family. Another name for that family is graph neural networks they have the exact same structure. Okay, but the terminology is just different. But they're the same thing token nets graph nets transformers are all the same thing. You could say that token sorry transformers are special kind of graph net if you're looking at that way. So so many connections that could be made, but I'm going to zoom right ahead and we can discuss all the connections. So that idea number one is build things out of tokens vector valued units as opposed to out of neurons scalar value units. Number two to me is attention. Maybe this is the most famous idea of transformers is they have this new layer called attention. So let's look at what attention is. Okay, so in a neural net or what I'm calling a token that you'll have linear combinations of inputs to produce an output or weight of some of the inputs to produce an output, and you will parameterize that mapping with weights w. And in attention, you have a weighted combination of inputs to produce an output, but but the parameters or the values in the matrix a are not learnable. Instead, they're going to be data dependent. They're going to be a function of the some other data. So when you have data dependent linear combination where the weights are a function of some other data, then that's called attention. Okay. And so a is the weight matrix, and it's just a function of something else. It tells you what to attend to how much weight to apply to each token input sequence. And you'll take a, you know, weighted sum, which is just matrix multiply a by the tokens. Okay, notation, don't worry about it. So here's here's the intuition. So I can have attention given to me by some other branch of my neural network, maybe it's going to be a branch that passes a question. That question will tell me what patches in the input I tend to the input patches are represented by tokens. And I will say these are the patches that I'm going to place high weight on and then I'll take a weighted sum of the code vectors inside those patches pretty soon output. So I could ask, you know, question, what is the color of the birds head I'll attend to the birds head. What is the color of the vegetation I'll attend to the background. I'm just saying which tokens tokens or patches here are going to be getting a lot of weight to make my decision. Okay, and then I'll report the best green because the token code vectors will have represented some information like the color of the token. Okay. There's a little too much detail to fully understand in just a few minutes but here's the most common kind of attention layer just to show you the mechanics really quickly. The question submits a query that is matched against a key in the data that you're querying so the data you're querying is a set of tokens and each token has a key vector which gets matched against the query vector of the question. The dot product to get the similarity between the key and the query and that dot product that similarity becomes the way you apply to another transformation of your tokens which is called the value vector and you take a weighted combination of the value vector. And so, although all the fancy math here is just to say, the question will tell me which tokens to weigh heavily in a weighted sum to produce an output, but it'll be via these three transformations the token vectors, which are the key the value in the query transformations. Okay. So that's a little mechanistic detail we can go back to that if we want to discuss the nitty-gritty. The way it kind of looks like is this and this is common to most of the transformer architectures. You have a bunch of you break into patches then you have a bunch of layers which are basically these one by one convolutional layers. And then every now and then you have something that tries to mix information across space across tokens and that's called attention and that is just the tokens based on their values queries and keys will decide what should I you know which are the other tokens should I average together to produce a new representation in the output. So this head might attend. So you know I should look at the other heads to decide how I can better recognize what's going on in this patch. When you say one by one evolution you mean a patch is a pixel. A patch is so you vectorize a patch and then you do like one by one convolution across all of those tokens where the channel dimension is the token vector. OK, so here's MLPs and then transformers are to two changes. One is that rather than scalars they have tokens and other changes rather than having parameterized linear weights. They have data dependent linear weights that are given by that special attention operator and that attention operator itself has parameters that define the key the query and the value and those are the learnable parameters of the system. Philip, just a small detail, but you start with self attention and then you have a one layer. Yeah, but in the previous slide you had the opposite order is that. Well, so it will vary a lot between different architectures like you could alternate these different orders. And I did gloss over the detail of this is attention from an external question. But the more common thing is self attention where attention is coming from the image itself from the data itself. And that's. Okay, this is like attention from the question branch, but I could just have the data choose what in its own token sequence to attend to each token chooses which other tokens to attend to and that's called self attention. That's like this picture here where this patch will decide what to attend to to get a better representation of that patch essentially. Okay, so this is self attention really as opposed to you. That's why the dependency of the weights on the data is like this is attending to itself as opposed to attending f is not coming from some external source. Okay, so I think this is the last one just to connect it to one of the most common common demonstrations of transformers is to do sequence modeling. But really transformers are more about set to set operations, but you can you can represent a sequence as a set. So it's fine. But, oh, oh, no, I think I got the wrong slide here. Let me pull up the right one. Yeah, this is what I wanted to show. Okay, so, so here's how it looks for doing next word prediction, and you can do next, you know, prediction and sequence of proteins or the next sound wave prediction, you next meeting prediction. That's really common framework. So we, this is like a one layer transformer. You know, we're going to say colorless green idea sleep, put that into the transformer we want to predict the blank, the words attend to each other, then you pass to this token wise nonlinearity, and then you make a prediction at the very end. So just one example of what you have seen as transformers for sequences, but really transformers are more general and they're not just about sequence modeling. This is just one way you could use them. Okay, so that's the 10 minute overview of transformers. Let's see, should we do questions or Brian, do you want to just jump right in. Maybe you do questions. Okay, questions will Brian set up. What is the history of these terms, you know, quest, query value. So he's probably other people here know better than I do but I think it's all coming from the data retrieval database literature so you have a database where you have knowledge stored in kind of cells. And you can query that database you say I want to find things related to drafts. And then every cell will have like a label the key will be like this is a cell for mammals and this is a cell for drafts and here's a cell for plants, and you'll match the query to the key, and then the stuff inside the cell that you retrieve will be the value. So I think it's coming from that. This isn't like a fully formed question but I guess like in the framework of having question key value. If, let's say the question was like what is the color of the turkey's head and for some reason, the turkey's head is like a feature that's complex enough that it won't, it can't be like well represented within a single question. So is that like cause issues with like attending to the right thing or like waiting the right thing properly when Yeah. I suppose it could one one answer would be that you often do multi headed attention where you'll have, you'll take your sequence or your set of tokens and then you'll have K different query vectors and K different value vectors and K different value vectors and each query can be asking a different type of you can say I want to match to the same color. Another one can say I want to match to the same geometry. And, you know, when you optimize the parameters of this network it will somehow, you know, self organize that, well, it's useful to factor things into geometry and color then there'll be one attention head that cares about color and one that cares about geometry. I'm just one quick thing on the transformer architecture and the non linearity. If I recall correctly you do a normalization of each token right intuition for that why do you do that. I haven't seen that too much before transformers. Yeah, that's a great question so so normally you want your weighted sum to add up to one. So the weight should add up to one. People do that. I treat that via the softmax over the weights. Yeah, is that we're referring to. Yeah, no I'm not referring to post the residual connection you do as part of the right before that. Other layer norms. So, okay my understanding of transformers has progressed to the level of tokens and attention and all the rest layer norm and residual connections. At this point I don't rock it I don't I don't know why that feels kind of like tricks that usually help neural networks train it's good to normalize things is good to have principles. I don't see anything. I haven't noticed that anything specific to transformers about those ideas yet. They're generally useful tricks. Okay. Transformers are very hard to train especially like several later ones like 12 and up if you don't have like residual connections or layer norm. Okay, the training isn't very stable. So it's not it's not. Yeah, also this attention between multiplication. And that might not be as stable as normal non intentional layers just do addition. That's the softmax right the softmax can probably help with that. Yeah. So how do you decide what patches to use for instance the image or the text you also had like what seemed to be arbitrary. Yeah, segmentation of the data. Yeah, that's a great question. How like how do you do the tokenization like how do you design that I think it's super hacky right now so that feels like somewhere that people could do a lot of work. One thing that does seem to happen is that the smaller you make your tokens if you have tokens that are a single pixel it's just the better you get. Maybe the what will happen is we'll just stop having clever tokenizations and just go down to whatever the atomic units of the data are like a single character a single pixel and that that just makes a choice for us because you can't go below that really. I think the smaller envision transformers the thing I've seen is that the smaller the tokens are the better they tend to perform. But because the attention mechanism is every token it tends to every token it's like n squared if you make the tokens too small, there's too many tokens and then you run out of memory. So there's probably clever tokenization schemes like super pixels or segmentation or in language spaders, you know, a lot of tokenization schemes that are like bite code by parent coding is the name of one and work that that could be used that as your first tokenization layer. But yeah that feels like a kind of hacky area right now to me. I can try to usually leverage at least some degree of topology by tokenizing it that respects you know spatial coordinates for images or yeah language order for words. Because like there's also something called positioning coding, which gives you knowledge about the topology of why this element is in this position versus other position. And that tells you a lot about you know the structure of the image or at least where this token is with respect to the overall structure of the image. Yeah, and then another thing that seems missing right now is people usually envision transformers which I'm most familiar with they usually break into non overlapping tokens. But we know from continents and like single processing that you'll get a time of aliasing and like the filtering operations if you have these huge strides you're breaking it non overlapping patches you really would want to have overlapping patches or blur the signal. So all that single processing stuff I think it's been kind of thrown away and probably it's a good idea to put it back in there. Someone has tried overlapping patches. And it does help. And, and by the way everything I say like, as you probably know there's 10,000 transformer papers now so I'm sure everything that you can imagine has been tried. So the part about working with sequences versus sets confused me a little bit and this relates to position and coding so I think it is important when you send these tokens to the transformer to actually inform it where it is in the sequence so transformers operates and sequences or sets like how like I'm, Brian do you mind if I pull the slides over one more time. I do have some slides that I can clarify that. So, yeah. So the positional encoding which I think is the like third big idea of transformers but it's been used in other contexts too so maybe it's not just about transformers but if you have a component and you don't want it to be invariant to shift convolution shift invariant, you can just tell it till the filter where you are by adding this positional code to, I can just say you know at the bottom right of the image and then my mapping will end up being conditioned on the position. So transformers is the same thing I can tell you, you can tell you where the token comes from. And if you do that then you do get sequential, you are modeling the sequence because you're telling the token you know I'm the first item in the sequence or the second item. If you don't do that, then you have the property of permutation, equal variance. That's why I said it's really a set to set operation. So if you don't tell the tokens where they come from, you don't give them positional codes. Then if I take the tokens on the input layer and I permute them into any order, I will simply permute the tokens on the output layer. The mapping will be the same after permutation. It takes a little thinking to see why that's true but essentially the reason is because the attention layer is permutation invariant. The way self attention works is it looks at the color of this and the color of that and it makes a similarity comparison. And then the weight of the weighted sum that goes to here is just going to be something about the similarity between the color, the query and the key of this. So no matter where you move that edge around, as long as the input and output are orange and blue, it will get the same weight. You can kind of work it out and see that attention is permutation invariant. The token whites operator is point wise. That's permutation invariant too. And then that means that the whole transformers are permutation invariant function. And you can make it model sequences by telling it the position of every token in that set. But if you don't have positioning coding, it's more appropriate for set to set mapping. One more question or comment is you started with the idea of tokens, but just a few sentences before you said that something that to me sounds like the idea of tokens is rather weekend that the transformers work better when you have individual bits of data like pixels. So it feels to me that the idea of tokens is not really essential in the whole concept to work, but that tension is the most critical part and the idea that being able to attend dynamically anywhere in the picture if it is visual data is the idea that gives power in these algorithms, not the token percent. Yeah, I don't know. And I think that's kind of the open debate. Yeah, fun to keep discussing. So I think the field is kind of split right now between people thinking that it's the tokens and the vector encapsulated vectors that are important to this versus the attention and really look at you just have an intentional mechanism. It can still be operating over neurons. It doesn't really have to be about tokens. I feel like both probably are important to the success. But one, one counter example to that attention matters is there are these other architectures now sometimes called like MLP mixers, one architecture in this family, which uses tokens and not attention. So it's basically a component over tokens, one by one comms over tokens. They call it MLP.com and that's super confusing. But anyway, we're going to get the terminology because these things are all just like small transformations in each other. Okay, but anyway, this MLP mixer thing doesn't have attention, but it's still in my view is as a token net. And that seems competitive on some tasks with attention networks. So maybe attention is maybe it's not the thing that matters. Related to this question. So it seems like especially in this self attention mode that you're describing. Yeah, if you unrolled that it's like a series of matrices I think going on there that could just be implemented as a straight up feed forwards chain if I'm following. Is it just very deep, you know, it's going to be skips, I think, but can you on that idea makes sense to you. So you can always kind of like, you know, always take any one of these arrows and just say, Oh, that's actually just a matrix multiply. But it's a matrix with special structure. It's not like a full rank matrix. And I think that that's, that's one way of just understanding all the person I didn't mean it was any matrix but just like you could re express this as another as I was trying to understand what the model might look like and then generalize that to and then you're back in standard mode again. Maybe that was closely related to what we were saying. Yeah. Yeah, where you have the second branch with a queue that's different that's sort of active state versus this kind of deterministic processing based on kind of multiplicative there. Okay, that's where like it differs from like standard MLPs where they don't have this kind of multiplicative interaction. That means that, you know, you're dependent on the moment, you're self contesting yourself meaning that you're dependent on your own input when you process this particular input. So it's kind of like a hyper network, I guess in that case, we're like, yeah, you change the representation based on what your presentation already is. Yeah. So it's not like, yeah, you can't just rewrite it exactly as these linear combinations on like a regular feed forward network, because it does do these multiplies maybe that's the one mathematical atomic unit that's different. I think you can express these in different languages and I actually do like thinking of it as oh it's just a special kind of matrix the matrix weights come from this other source is self attention mechanism but then it's just a matrix but that matrix has special structure and understanding that low ring structure is kind of that's just a way of understanding architectures is what is the special structure you're imposing on the on the linear transformations on the matrices. This dot product here between the query and the key involves multiplication, which is not something that you would directly get in a regular network. Oh, yeah, related to this and also the permutation if you variance that's within a block. So what about across transformer blocks. Yeah, so you could have, you can kind of any set of tokens attend to any set of tokens, and they could come from one layer of the net and another layer of the net or one block another block. It could come from a text processing network and image processing network and then the text attends to the tokens of the image. And then it could come from just the text tokens attend to themselves and that's mostly what I talked about but actually sorry did that answer is that your question or on the wrong way. She said that you could commute like within a block like the operations. Yeah, pretty much like I'm just saying if you have like 12 transformer blocks is shown that some of the earlier blocks like learn more like surface form type of features where like later learn. Oh yeah, like high level things and I was wondering about like can you also commute. Yeah, I think no probably. So I don't think you can commute depth wise I think just you can commute within the sequence. Yeah. So if you move the head attention, you know how they can catnate all the heads together to go to the next layer. Don't they lose the permutation variance, or the permutation that we're going to do that nation process. Don't think so. Because your contamination has to have some sort of ordering. Oh, interesting. Yeah, maybe. Okay, so it's possible that transformers aren't. It's not always multi transformers. Individual transformer heads are accurate. Yeah, I hadn't thought about the multi headed thing. Okay. Yeah. In the multi headed you take a weighted sum of the heads and then that the feature vectors they can carry together and that's a parameterized some and if you change the order of what I think you're right. Okay, interesting. Did anybody try instead of using the Q and K matrix or the WQ and WK use a single matrix. Yeah. Okay, so one thing you can do is just get rid of queries keys and values and just have your code vectors at Z and take like the inner product of for the outer product of Z with the Z as your attention and I think that that can sometimes work just as well. Yeah, I haven't really followed the latest on that, but you can have queries keys and values that are linear functions of your code vectors Z, or they can be nonlinear functions or they could be identity. And I'm not sure that there's a consensus on when you need which. So one, one thing that's kind of interesting is that if you use the identity to create your queries and keys, you're basically creating that grant matrix between all of your token vectors with themselves. And it's going to act kind of like it's going to cluster the data and there's been some analysis of how, okay, identity attention, identity queries and keys will create this, you know, clustering like spectral clustering type matrix it'll create this similarity matrix when you hit the data with a matrix and literary matrix or group things are similar. And maybe we can understand a little bit what's going on from that perspective like linear queries and keys are just some projection of that kind of thing. And how does that work if you don't have the WQ and WK matrix but just the identity. Actually, yeah, do you know Brian or just, just anyone know. The keys are actually kind of like this more exactly like this spectral matrix because what you do is you process the input transpose it process it again. You know if you work out both operations in sequence, they end up becoming Z transpose Z like a matrix in the middle. So I think it does work, I guess. That was my, maybe not as well but it does work. It works just maybe not as well. Yeah, we sort of interleaving with these nonlinear operations and still get expressive power. And one other question that you mentioned and there is a paper I think from the mind about using a single pixel as a token. Yeah, it seems very little in terms of being able to establish similarities with other tokens because you have just color and intensity. So my feeling there is that, yes, on the first layer, that's a very bad token. You can have like, you have a one to eight dimensional vector that coats just the color of a single pixel. It's not going to do much. But then when you do this linear combination operation, you know, it's like taking a one by one patch and making a bigger patch out of it. I mean, it can learn to mix information across the whole image and say all of these similar colors. Maybe all the white stripes on the zebra will go all the black stripes in the zebras because the black keys will match the white queries. So it could create these abstracted tokens as you go deeper into the network and build up. Many years ago in computer vision, there was the idea of instead of using a patch of using at a single pixel, the value of the pixel and derivatives. Which means essentially you're having no local information because the derivatives gives you information about neighboring pixel, special derivatives. It's kind of like a little token. It was a vector of and it's very much like a token. Yeah. Yes, I don't think that these are new ideas really is just it helped me to coalesce around the idea of a token like we're gonna think all the operations in terms of tokens but we used to talk about you know, hyper columns and feature vectors and like there's a million names for the same this in concepts. Do you want to pull up just at a time for you to. Yeah, you make you made a connection earlier with graph neural networks. I don't recall which one you said is more general of the two. Well, but they also don't feel the connection because for graph neural networks it's important like the connection in the graph the structure is very important whereas in transformers you said it is less of a case. So, yeah, I think it depends on you to find these things but I like to think of graph nets as more a broader class and so transformers graph nets with the fully connected graph so every token talks to every token. And the aggregation function that decides how to do like the weighted sum of incoming messages is given by this attention operator. The similarity between node A and node B tells you how much the messages from node B will be summed up into node A. And you can have attention graph neural networks that's why you feel it's and that's, I think it was independently invented over there or maybe even first invented over there so graph net people have done attention. Before transformers made attention really popular, although of course attention is an old idea as well and it has shown up a lot of times. So I guess I can start now. Yeah, still gave a great overview which actually is going to make this a lot easier, where I think I want to go over more of the AI machine learning communities perspective of attention and kind of the developments happening in that community, and go over some kind of things about transformers that I think are surprising I guess to a lot of people now. To go over that let's kind of go over how it started so originally the transformer was a language model, and the language model paper had possibly the most arrogant title you could imagine, saying that attention is all you need. So whether they know that that actually turned out to be something that would actually have more truth to it. And I think most people realize including I think myself, which is that this now is a model that covers I still mentioned language speech vision. It's basically a universal model now for all the modalities that people apply to data actually. And attention is not a new idea. This is something that was proposed, even before this paper but this paper was something that was very very similar to the vision transformer attention, where they created essentially attendable feature maps at the last layer or the next to the CG network that was still spatial, and they're able to use this to show that when you do image captioning, it would attend to the correct parts of an object. So, the reason why I think this kind of seminar is important is because, classically, you know, whatever works well has always been something that we always ask ourselves is the brain also doing this because that's been the classical thing for a lot of the past, you know, 10 years of research actually a lot from Jim DeClos group. And I think we have to understand what's going on I think to understand why transformers are so important and potentially why we should either care about them or not care about them actually. But I think there's this all too familiar aspect where whatever is working extremely well, we need to compare that to the brain now. And I think we should kind of get ahead of it this time, because in this case we want to see where they're going. And, again, one of the things that's kind of interesting is that when people compare these attention models specifically certain versions of them like clip to human behavior, you get a substantially improved performance in terms of like explaining whether the misclassification errors are not in human visual systems. And I think the issue is like, we don't know why this is happening in the sense that like, in this paper, they mentioned that the particular vision transformer model that they tested was far better than all their other models for explaining human behavior, but they weren't sure why at the time this was from a 2021 paper so I believe that they're still not sure but they what all they found was that the results show that this particular model clip was an outlier for their comparisons to human behavior. And also there's been, like I said, you know this natural tendency to now compare convolution networks to transformer networks because the transformer networks are starting to outperform covenants, a lot of vision tasks. So the question is now, which models are more similar to neuroscience or just human vision in general whether it be cognitive science as well, our contacts more similar or transformers more similar. And intuitively you would think that there are certain properties of convolutions that make convolution convolution and transformer transformer. And what makes what we believe convolution and convolution is the fact that of equivariance, meaning as Phil mentioned, when you apply an operation to the input, the operation applied to the output should be the same type of operation. Now the issue is that this turns out not to be exactly true it turns out after training a vision transformer is more equivariant to translation than a continent, which I think is quite surprising so Phil might actually already know the issues with the convolution not being equivariant. One thing being that a lot of the pooling and other operations even the non linearity contribute to hurting or harming the covariance performance. So this plot here is showing by this paper's measure, which is a lead derivative, the equivariance error of a component. This is Resnet 50 versus a vision transformer and turns out after training. A vision transformer is translationally more equivariant than a component, which I think is quite not intuitive. And the, in the sense that we built in the equivariance specifically for a component, yet here we are and vision transformers are more for variant after training. And then this on the right shows this is not just specific to these two architectures but many different architectures here. It's also an interesting to be also measure MLP mixers, which as Phil mentioned is kind of a new architecture also that also has surprisingly high equivariance after training. And this is equivariance improves as you increase image net test accuracy. So you have any questions here. Brian, one question. Do you have physical encoding on these networks? Yeah, you do have visual. So it shouldn't be equivariant. Oh, well, this is like a measure of equivariant. No, no, I mean, it shouldn't be like. Oh, it shouldn't be. Yeah, it shouldn't be. We have to learn to be. So equivariance is very strictly by the patch. In this case, they're doing small transformations. So it's not the size of a patch. But since you asked that question, there's another paper that shows about invariance. And this is like much larger translations. And they show that actually after training a train vision transformer, which is a transformer model is as invariant to a translation shifts as a ResNet 18, which is a component. And this is kind of interesting because then the question is what's going on here, like, you know, we build in these things for our models, but apparently not building them in also gives us the thing that we want it. So this kind of goes to the issue that maybe might be controversial, but has been kind of true, which is the idea of scalability. And are people familiar with the bitter lesson here, or has anyone heard of the bitter lesson. This is like a classic controversial statement. I actually think a professor, a former professor here actually gave a retort to this thing by Rich Sutton who wrote that the lesson that we should take away. And I think in 2019 or 2018 is that we should not be working on inductive biases for models as much as we should be working on inductive biases for learning. And I think one of the kind of key directions that organizations like OpenAI are going towards is the idea that we shouldn't really try to bake in these priors that we think are really, really useful, because at some point your data might give you that prior anyway. And that could be what's happening here. And to give you a flavor for what's going on in the machine learning community, they're essentially optimizing the upper right hand corner of this curve. The x-axis here is the compute required to train these models. And the y-axis is the negative log-proplacity, which is essentially the task error, or task performance, I guess, not error. And in this case, what they're doing is they're trying to find architectures that go all the way up here in the performance curve. And they're essentially paying for that performance, not by incorporating inductive biases into their model, but by trying to absorb those inductive biases through data. So I think to give you a glimpse of what's happening in the future is that there probably will be less inductive biases in this community of machine learning, because they're willing to pay this cost of compute to not have to build in the inductive bias that they would normally have to build in for smaller data sets. And as Saul alluded to, which is the, or as actually Tommy also mentioned, it's just these architectures are getting more and more general purpose. So in this case, this is a transformer architecture, but unlike a transformer, this is an architecture that can attend not over the token level, but treats each pixel as a token. And what's interesting about this is that they actually train this on ImageNet without any image prior. So the positioning coding that Phil mentioned was actually learned by the model, and they could actually get performance on the order of, you know, normal image prior oriented models like comp nets and, you know, patch vision transformers. So the remarkable consequence of this is that there's no actual image prior or modality prior built into this model. It learned it on its own. And even in that perspective, it's still competitive on ImageNet. So this is not necessarily a very large data set either. Do you know if the perceiver of Brian also has like a texture bias, for example, or if in general robustness? I don't think we've looked into that. I think the robustness qualities are probably not too different from standard models. I think in terms of adversarial examples, like transformers are, well, I think it's controversial, but I think people say transformers are a little bit more robust adversarial examples than comp nets, but on the grand scheme of things, they're both very susceptible to adversarial examples. I mean, just to finish, I was just curious to see if, you know, I'm sure there's many models now that they can all do whatever 75% on ImageNet, but not all of them will see like a human, whether that's a goal or not, right? Right, that's a good question. And I think like we have to now be aware that this is where the field is going. Is that where we're going as well as a field? Not, yeah. What does it mean to learn position features in the case of an image? Well, you randomly initialize the position encoding to be just from like a random Gaussian or something. The position of the pixels in the image, so it's like an unordered set of pixels. Right, so you treat the pixels as, you treat each pixel as an unordered element in a set. Wait, Brian, is there the case that the top left pixel will always get the same positional encoding? It'll be a learned. Yeah, so, yeah, so it's not like you shuffle every image independently of every other image and then get. So I think it's still inserting a lot of information there. Well, the prior that they're inserting is that the topology is consistent across samples. Yeah. Which I think is reasonable about modalities mostly, like you would imagine that the position shouldn't be unique to every single sample. Because in that case, then I think the problem would be almost like really, really hard. I don't know if you can even learn anything. Like randomly shuffle all the pixels in an image. Yeah, I don't know what you're going to be able to learn. Every image has its own permutation that you give to the models. You could learn like higher like statistics, I guess, over like what fixes together. Another number is how many training example it takes to train this compared to a convolutional network. Right, so I think one of the things that we know is that it takes more data to train a vision transfer. But do you have the number for this? This is, I think, just ImageNet with augmentations, actually. This isn't like a larger data set. This is just augmentation, providing the extra information. Yeah, I don't have the numbers, but the cursor I've seen tend to be, you know, we have a whiteboard. So the connet is it starts here and goes kind of flat and the transformer starts down here and goes up. So it scales better, but for low data, it's very worse. I think that's one of the things that why the community is going towards like industry, especially going towards this direction, because they're willing to pay for the scale via compute costs, rather than having the kind of built in data points, I guess, be not, you know, for free, I guess, What happens is that convolutions after a certain level of scale will start saturating and transformers still continue to go up in terms of increasing the parameter count will give you still positive returns in performance. What's interesting in this talk is also there have been a lot of other variations of transformers as well. And it's kind of strange, actually, people have at least Google has done a meta analysis on transformers and all the zoo of their variations of them. And at least in terms of scalability, it seems like the original transformers actually scales the best, which is a little bit odd. Which one's the best. The vision transformers are also sparse mixture of extra transformers. Those apparently both scale the AT the AT well. Don't remember if they were specifically doing vision. I think it was more language tasks. I think this kind of tells you a story that maybe the machine learning community is going towards, which is not, you know, the fact that architecture matters the most, but the fact that data is actually the really important aspect and I think they're building now architectures that aren't necessarily good at working well without, you know, being trained, but furthermore work well at absorbing data a lot more efficiently than other architectures. So like we should think about the things that leads to the resulting model that we work with these days, which is the idea that it's not just the model itself with its architecture, but there are priors about, you know, the compute the capacity of the model to train that data and also more importantly now more recently. Nice thing is that like as Phil mentioned the notion that a lot of these models don't require supervision so they can absorb larger and larger data sets without much economic cost to the person training it. One also another aspect of Transformers is the way it was created was mainly as an alternative to recurrent networks. And the reason for that is because as you see in the left arrow I mentioned hardware, and one of the things about Transformers is that they're much more on GPUs than a recurrent network is and they run much more better on like, you know, stupidly parallel software and a recurrent network does and that's why they become very popular also is because the parallelization of them is much easier than other sequence models. One comment if I may make how I view this like I feel when you go to Transformers just by introducing the idea of attention dynamically handled by the data you kind of have. It's an overstatement but you know as general architecture as you can have kind of like, you know, you have really powerful architecture and now to train it you need a lot of data and this is really where we are now. And more data does better just because the architecture is extremely general, much more than conventional as you said. So I don't know if there will be any other fancy architecture. One is there are lacking one thing which is vanilla Transformers don't have memory. They don't have feedback connections. And so they're not doing complete in the same way that RNN is. Of course people are adding memory and recurrence to Transformers but the still the majority of them don't have that so that's like actually I think a big limitation they don't have memory. And then two is yeah, you know, eventually look up tables will perform best or you know nearest neighbor will perform best because the limit of infinite data those work and we don't have these work in the limit of infinite data. Yeah, I agree it's not surprising that you need less traction with more data. Brian you were saying like there's choices to be made for if we're interested in models of brain systems. So the question is like, what are we interested in in terms of if these architectures become less biased towards being structurally more relevant to neuroscience, but just being more task relevant to neuroscience. Like, are we going to be stuck at some level of understanding that's only functional. What makes them structurally that's relevant that's sort of why I was asking these kind of wait questions right. Why do you say that. Well, I don't. Yeah, so I think the tricky part is like, I think, because things work well people will find ways to say that they're more structurally relevant. I don't know if Transformers are more structurally relevant than comp nets like obviously there's Fukushima, you know neocognitron which is inspired by neuroscience but attention themselves is never inspired by transformers was never inspired by neuroscience. So I don't know if they're actually more neuroscience friendly, I guess, in the terms of similarity. But I think what the bigger picture is that they're going to be more and more generic. And they're going to take less inspiration from structural biases that we know about. Not necessarily until you know full mentioned the idea of like, you know, recurrence and you know feedback and those things become more. It's like, actually, one thing that's interesting is that like, there hasn't been much. I mean people have proposed these architectures and they do work but people aren't really using feedback versions of Transformers, mainly because there's no recurrent nature to them. So for example, all these things are still fee forward architectures that still process from the bottom up. I think the divergence is going to be like, are we going to be interested in the same models that the AI machine learning committee is going to be interested in? Are we going to be interested in specific models that work on neuroscience but don't necessarily have a functional performance equivalence to what these models have? And one question I have for the neuroscientists in the room is, what is the scale of data that the human brain is trained on when they reach adulthood? And my rough estimate or understanding is it's similar to what the biggest Transformers are currently trained on or a little bit smaller than that, but much more data than comp nets were trained on. So all this stuff about how, you know, in which data regime do you get what kinds of performance? Well, the data regime that seems most relevant to neuroscience, to me, seems more like this Transformer regime, but I don't know if that's true. Like how many images do humans see compared to these models? It's not true for text. Text, I think they're trained on much more data. Yeah. Yeah, but for you, I'm thinking images, everything on the internet. Yeah. There was a paper for a friend to rank this group recently that showed that even if you train a GPT two on a 10 year old amount of text data, it does explain fMRI responses, almost as well as even having a lot more days because fMRI is bad. So I think he's training a Transformer around 10 million tokens, which is like what a child would be exposed to at the age of 10, while most Transformers are trained in like, like, millions of different systems. And like, yeah, it could accept my data, but yeah, fMRI is its own. This is, there's an assumption under this question, which is like, are we actually interested in models of the system in the adult state, or are we interested in models of how the system gets to be in the adult state? Those are not the same question, right? So there may be a shift here between models that are like, and you sort of called it out like, hey, we can, instead of us having to hand design them in, this is the bitter lesson version, we'll just lean on the data with a general flexible thing and let the data push it as long as our compute can handle that and we have enough data. And I think the question you were asking, that's sort of interesting to us, some of us is, does that end state, which of those end states looks more like the adult and the state that's agnostic to whether, neither of them probably followed the same biology path, but just even in that assumption state, what is the state of affairs? I don't think we know what the state of affairs is, visual Transformers relative to combat sun alignments with even visual processing. I mean, somebody was asking here about like somebody who was asking about similarity, maybe that was you. You know, and then because also at the neural level also requires mapping assumptions that, and they get more complicated with the Transformers, right, like, but behaviorally, it sounds like, you know, in the Gary was papers are pointing out like there's some, maybe better alignment, but I don't have their compare against the latest, you know, at trained, you know, comments. Yeah, I don't know about, I think those stories haven't been done to my knowledge of like actual alignment with neural recordings and, of course, I'm sure people here will do that. But alignment in terms of functional capabilities does seem quite a bit better. And it don't relate to me because we're a confidence. What can they do in what's been demonstrated with confidence of 10 years ago, classify 1000 animals, cats and dogs and ancient categories. What can transfer? Well, sure, you can make confidence that grow bigger, but the current generation of the best models are these Transformers like clip, but of course there's a clip non transformers and let's just say clip. And that seems much closer to the functionality of the human visual system that you can recognize millions of categories or way more than 1000s of categories. And you can recognize compositions of categories you can type in a red ball and have you recognize the red ball and just see one example of that and, and these, these networks are getting to that point. So the kind of psychophysical level I think they're getting closer. I don't know at the neural embedding level. So something that I'd like to share is the, there was one paper that me and William McCullough that we submitted to nerves, it actually got rejected, but there was one about a we just submitted isolar about this transformer model that achieved state of the art and brain score for area before, which is kind of interesting because we went to the brainstorm competition at the beginning of this year, like just hoping to participate. And all of a sudden William trained this transformer it was a dual stream transformer with adversarial training and rotations, and we just like broke the record in v4 unexpectedly and wrote a paper about that. In any case, what I think was interesting is that the same model exact same architecture if you trained it another way just classical SGD image net no fans augmentations adversarial perturbations, the score wasn't that great. So I wonder, just in general, should we also just be thinking about transformer model or the interaction of transformer models plus any type of training regime or maybe a fancier loss function that we haven't even conceived. And suppose we do hit like the like explain variants or one correlation in brain score for it like how do we even reverse engineer from that right because the model is just so big. I'm saying playing devil's advocate on my own work really the model so big, like, how do how do we even go back and isn't open a question, you know just I don't have any ideas or I mean I think one of the things that I think we often forget is that a model isn't just its architecture like you know the slide before a model is also data. And once it's interact with data, we have to understand data now to understand what that model is doing can't just understand the architecture. I think as these models become these architectures become more generic data is going to play a larger and larger role and we're kind of back to now trying to understand data now and understanding what the architecture is. And I think that's not that's easier or harder. But also the message is, you know, for the last 10 years until transformers came like three or four years ago, I think the success stories in machine learning was convolutional networks, there was one architect. Now there are several. We have quite a few options. You know they all perform pretty well. That's right. And I think if you just compare functions input output or a while they fit the neurons you'll find they're all doing okay. You need a lot of other constraints, which means what can be implemented by neurons and synapses. And what cannot or very difficult to see how. I agree and I gave this guest lecture and Brian's class. And I was calling it the anachronism conjecture that like as systems get more and more intelligent they kind of converge on the same representations abstractions models and so forth, which other people have you know put forth. And I think it's kind of the same here I don't actually think the difference between transformers and confidence and MLP is that dramatic. I think it's more. As you get more and more data and you optimize more and more toward success at some objective. The models will converge. It's one way but the other way is that, you know what I said that the meeting a few weeks ago. It could be like flight. You know, it could be. You have, you know, a model of a bird. But that's, that's not really good for everything. The important is to understand the principles of aerodynamics, then you can understand how birds fly and how to build airplanes and other things and maybe how fly flies, which is different from birds. Those aerodynamics involved is different. So, I think principles are much more important than the specific implementations which can be quite different. The question is what are the principles here. Yeah, and I think they're similar principles, I think. All of these pictures are like just reweighting at the same few ingredients factorization is in all of them. Hierarchy is in all of them right like, I don't know, and even in transformers and confidence like transformers can be written as 90% convolution and just a few little layers that are attention like if you look at the actual operations almost every operation is is a convolution in the sense of being a one by one, you can just chop up the signal into patches and process each one independently and identically. Yeah, so I think the principles are going to turn out to be very similar. The question is, which principles should we care about now, given this kind of heterogeneity and architecture, but similarity and functional performance. One of the things that it becomes easier if the community like has something they cannot do, whether it be like, you know, to fly, I guess, for example, flight, which is like, how do we achieve something that we can't currently do right now. I think the general spirit of the machine committee is that all we're done, we can just keep making these models bigger and keep doing this and we'll be fine. I don't think that's true. But right now it seems like the spirit is in that direction and that's why we're kind of revalidating. Oh, of course this must be like the brain. Of course this is like what we care about. Of course, all these kind of back explanations are working. But once we hit a wall, I feel like then we know what's wrong and what's correct. Otherwise, I guess it becomes kind of hard to tell right now. The topic of like data efficiency. This might have an obvious answer, but like, I was wondering if when you have multimodal data, whether like learning becomes a lot more efficient if you have like experts of information from visual stuff, like texts, that like maybe our captions associated with the image or something versus like two aspects of just text data. I don't know how well those things have been estimated, but the language vision models are a lot better on certain benchmarks than the vision only models and it does seem like language must be like incredibly valuable per word. There's a lot more information than per pixel. I feel like a lot of the recent successes, just leveraging language, at least in computer vision. Same with robotics a few other areas. I think what made clip a lot more, at least from that psychophysics experiment from Garrus at all, a lot more like powerful for their results was the fact that clip was trained on classification, but on caption similarity matching to a text caption which has a lot more information than just a single label for this entire image. Like caption can tell you, you know, things about geometry tells you what things on the left, what things included, what thing is, what thing what what season it is or what time it is like it tells you a lot more information and a single word would be to ImageNet class. Another, okay, this is a little anecdotal, but what I've heard is that for training diffusion models, if you train them without language, just unconditional diffusion model generative model of imagery is really expensive and we all thought like, okay, we're not getting that game is not for us is for Google. But if you train them text conditional, they're actually much according to the students I've talked to, they train much faster because the text conditional models the text gives you so much leverage. And so they said that no, no, we can train text conditional like no dolly type models stable diffusion those things are within the budget of MIT. You do that to trade condition because you have to have text image pairs see if a lot. This is a huge source of supervision here, as opposed to just random images. And if you have that, then you're in like the hundreds of thousands of dollars of range to train one of those big models, as opposed to the tens of millions of dollars range. This is anecdotal. They might be just trying to get some GPUs. I'm not sure. By the way, address a question to both of you, but an important feature of transformers compared to previous networks is the fact that you don't have to worry about labeling, especially when you use text, right? Yeah. I think that's the issue about the supervision of supervision, which is like I never found a consistent definition of what a supervised task is versus not supervised one besides economic cost. Like how much did you spend to acquire this data seems to be the only consistent label. But if you speak about neuroscience is not only cost, right? Right, but then like I think, yeah, this is another divergence in between two communities, right, which is like. But the real problem is the brain. Come on. Everything else is More, more questions. I'm happy to keep chatting much for one more spester. I think we want to quite some time, we can adjourn and to the next iteration sometime in the next few weeks. Okay. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.0, "text": " If we look at history, models of the brain have always been the most fashionable technology.", "tokens": [50364, 759, 321, 574, 412, 2503, 11, 5245, 295, 264, 3567, 362, 1009, 668, 264, 881, 40735, 2899, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2632865558971058, "compression_ratio": 1.4099378881987579, "no_speech_prob": 0.038569096475839615}, {"id": 1, "seek": 0, "start": 10.0, "end": 22.0, "text": " It was hydrodynamics in the 17th century and digital computers a few decades ago.", "tokens": [50864, 467, 390, 5796, 11452, 5216, 1167, 294, 264, 3282, 392, 4901, 293, 4562, 10807, 257, 1326, 7878, 2057, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2632865558971058, "compression_ratio": 1.4099378881987579, "no_speech_prob": 0.038569096475839615}, {"id": 2, "seek": 0, "start": 22.0, "end": 29.0, "text": " And ten years ago was convolutional neural networks.", "tokens": [51464, 400, 2064, 924, 2057, 390, 45216, 304, 18161, 9590, 13, 51814], "temperature": 0.0, "avg_logprob": -0.2632865558971058, "compression_ratio": 1.4099378881987579, "no_speech_prob": 0.038569096475839615}, {"id": 3, "seek": 2900, "start": 29.0, "end": 33.0, "text": " And now, transformers of course.", "tokens": [50364, 400, 586, 11, 4088, 433, 295, 1164, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1621186888063109, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.11330938339233398}, {"id": 4, "seek": 2900, "start": 33.0, "end": 37.0, "text": " So in preparation for this, we have an introduction to transformers.", "tokens": [50564, 407, 294, 13081, 337, 341, 11, 321, 362, 364, 9339, 281, 4088, 433, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1621186888063109, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.11330938339233398}, {"id": 5, "seek": 2900, "start": 37.0, "end": 47.0, "text": " I think this is something that Michael Fee, chairman of this department here and Ghibli Carlo asked for.", "tokens": [50764, 286, 519, 341, 307, 746, 300, 5116, 479, 1653, 11, 22770, 295, 341, 5882, 510, 293, 460, 5455, 2081, 45112, 2351, 337, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1621186888063109, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.11330938339233398}, {"id": 6, "seek": 2900, "start": 47.0, "end": 54.0, "text": " Of course they are not here, but Michael actually asked me to record it.", "tokens": [51264, 2720, 1164, 436, 366, 406, 510, 11, 457, 5116, 767, 2351, 385, 281, 2136, 309, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1621186888063109, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.11330938339233398}, {"id": 7, "seek": 2900, "start": 54.0, "end": 57.0, "text": " Is that possible?", "tokens": [51614, 1119, 300, 1944, 30, 51764], "temperature": 0.0, "avg_logprob": -0.1621186888063109, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.11330938339233398}, {"id": 8, "seek": 5700, "start": 57.0, "end": 61.0, "text": " It's recording now as long as that's okay with you guys.", "tokens": [50364, 467, 311, 6613, 586, 382, 938, 382, 300, 311, 1392, 365, 291, 1074, 13, 50564], "temperature": 0.0, "avg_logprob": -0.17888364674132548, "compression_ratio": 1.5520361990950227, "no_speech_prob": 0.059838563203811646}, {"id": 9, "seek": 5700, "start": 61.0, "end": 65.0, "text": " Everybody agrees to be recorded. Okay, all right.", "tokens": [50564, 7646, 26383, 281, 312, 8287, 13, 1033, 11, 439, 558, 13, 50764], "temperature": 0.0, "avg_logprob": -0.17888364674132548, "compression_ratio": 1.5520361990950227, "no_speech_prob": 0.059838563203811646}, {"id": 10, "seek": 5700, "start": 65.0, "end": 75.0, "text": " So with this we have an introduction to transformers and this probably will be the first of some of the research meeting where we'll speak about transformers.", "tokens": [50764, 407, 365, 341, 321, 362, 364, 9339, 281, 4088, 433, 293, 341, 1391, 486, 312, 264, 700, 295, 512, 295, 264, 2132, 3440, 689, 321, 603, 1710, 466, 4088, 433, 13, 51264], "temperature": 0.0, "avg_logprob": -0.17888364674132548, "compression_ratio": 1.5520361990950227, "no_speech_prob": 0.059838563203811646}, {"id": 11, "seek": 5700, "start": 75.0, "end": 83.0, "text": " Next time perhaps more in comparison in the framework of models of the brain.", "tokens": [51264, 3087, 565, 4317, 544, 294, 9660, 294, 264, 8388, 295, 5245, 295, 264, 3567, 13, 51664], "temperature": 0.0, "avg_logprob": -0.17888364674132548, "compression_ratio": 1.5520361990950227, "no_speech_prob": 0.059838563203811646}, {"id": 12, "seek": 8300, "start": 83.0, "end": 89.0, "text": " But this time it's more on just technical aspects of transformers.", "tokens": [50364, 583, 341, 565, 309, 311, 544, 322, 445, 6191, 7270, 295, 4088, 433, 13, 50664], "temperature": 0.0, "avg_logprob": -0.29066783731633966, "compression_ratio": 1.4360189573459716, "no_speech_prob": 0.0803060531616211}, {"id": 13, "seek": 8300, "start": 89.0, "end": 100.0, "text": " And so Philip Tinsola, C-Sale and Brian Chung, this building, will tell us how Jim is here after all.", "tokens": [50664, 400, 370, 21144, 314, 1292, 4711, 11, 383, 12, 50, 1220, 293, 10765, 38314, 11, 341, 2390, 11, 486, 980, 505, 577, 6637, 307, 510, 934, 439, 13, 51214], "temperature": 0.0, "avg_logprob": -0.29066783731633966, "compression_ratio": 1.4360189573459716, "no_speech_prob": 0.0803060531616211}, {"id": 14, "seek": 8300, "start": 100.0, "end": 104.0, "text": " Okay, so Lupus in Fabulous.", "tokens": [51214, 1033, 11, 370, 44319, 301, 294, 17440, 6893, 13, 51414], "temperature": 0.0, "avg_logprob": -0.29066783731633966, "compression_ratio": 1.4360189573459716, "no_speech_prob": 0.0803060531616211}, {"id": 15, "seek": 8300, "start": 104.0, "end": 106.0, "text": " What was that?", "tokens": [51414, 708, 390, 300, 30, 51514], "temperature": 0.0, "avg_logprob": -0.29066783731633966, "compression_ratio": 1.4360189573459716, "no_speech_prob": 0.0803060531616211}, {"id": 16, "seek": 8300, "start": 106.0, "end": 110.0, "text": " Lupus in Fabulous exactly means what happened, that I will speak about you and you came in.", "tokens": [51514, 44319, 301, 294, 17440, 6893, 2293, 1355, 437, 2011, 11, 300, 286, 486, 1710, 466, 291, 293, 291, 1361, 294, 13, 51714], "temperature": 0.0, "avg_logprob": -0.29066783731633966, "compression_ratio": 1.4360189573459716, "no_speech_prob": 0.0803060531616211}, {"id": 17, "seek": 11000, "start": 111.0, "end": 115.0, "text": " So Philip will start.", "tokens": [50414, 407, 21144, 486, 722, 13, 50614], "temperature": 0.0, "avg_logprob": -0.23083776797888414, "compression_ratio": 1.3191489361702127, "no_speech_prob": 0.02892480604350567}, {"id": 18, "seek": 11000, "start": 115.0, "end": 126.0, "text": " And then we have Brian and then perhaps discussion and in the meantime, of course, very welcome to ask a lot of questions.", "tokens": [50614, 400, 550, 321, 362, 10765, 293, 550, 4317, 5017, 293, 294, 264, 14991, 11, 295, 1164, 11, 588, 2928, 281, 1029, 257, 688, 295, 1651, 13, 51164], "temperature": 0.0, "avg_logprob": -0.23083776797888414, "compression_ratio": 1.3191489361702127, "no_speech_prob": 0.02892480604350567}, {"id": 19, "seek": 11000, "start": 126.0, "end": 127.0, "text": " All right.", "tokens": [51164, 1057, 558, 13, 51214], "temperature": 0.0, "avg_logprob": -0.23083776797888414, "compression_ratio": 1.3191489361702127, "no_speech_prob": 0.02892480604350567}, {"id": 20, "seek": 11000, "start": 127.0, "end": 130.0, "text": " Okay, great. Thank you, Tommy.", "tokens": [51214, 1033, 11, 869, 13, 1044, 291, 11, 19448, 13, 51364], "temperature": 0.0, "avg_logprob": -0.23083776797888414, "compression_ratio": 1.3191489361702127, "no_speech_prob": 0.02892480604350567}, {"id": 21, "seek": 13000, "start": 130.0, "end": 136.0, "text": " So this can be, as far as I'm concerned, very informal and happy to go back and forth.", "tokens": [50364, 407, 341, 393, 312, 11, 382, 1400, 382, 286, 478, 5922, 11, 588, 24342, 293, 2055, 281, 352, 646, 293, 5220, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12087093481496602, "compression_ratio": 1.660649819494585, "no_speech_prob": 0.014491593465209007}, {"id": 22, "seek": 13000, "start": 136.0, "end": 149.0, "text": " I took slides from a lecture, like hour and a half electron transformers I've given, and tried to pick a few slides. So it's going to be a quick intro, but we can go into as much detail as you want, and happy to make it also just more discussion.", "tokens": [50664, 286, 1890, 9788, 490, 257, 7991, 11, 411, 1773, 293, 257, 1922, 6084, 4088, 433, 286, 600, 2212, 11, 293, 3031, 281, 1888, 257, 1326, 9788, 13, 407, 309, 311, 516, 281, 312, 257, 1702, 12897, 11, 457, 321, 393, 352, 666, 382, 709, 2607, 382, 291, 528, 11, 293, 2055, 281, 652, 309, 611, 445, 544, 5017, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12087093481496602, "compression_ratio": 1.660649819494585, "no_speech_prob": 0.014491593465209007}, {"id": 23, "seek": 13000, "start": 149.0, "end": 156.0, "text": " But I'll start by talking about, you know, what are transformers, you know, for those of you who haven't encountered them yet.", "tokens": [51314, 583, 286, 603, 722, 538, 1417, 466, 11, 291, 458, 11, 437, 366, 4088, 433, 11, 291, 458, 11, 337, 729, 295, 291, 567, 2378, 380, 20381, 552, 1939, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12087093481496602, "compression_ratio": 1.660649819494585, "no_speech_prob": 0.014491593465209007}, {"id": 24, "seek": 15600, "start": 156.0, "end": 168.0, "text": " Okay, so I think that there are two key ideas that are not new but are relatively popularized by transformers. And the first is called the idea of tokens.", "tokens": [50364, 1033, 11, 370, 286, 519, 300, 456, 366, 732, 2141, 3487, 300, 366, 406, 777, 457, 366, 7226, 3743, 1602, 538, 4088, 433, 13, 400, 264, 700, 307, 1219, 264, 1558, 295, 22667, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09710283377735886, "compression_ratio": 1.6995515695067265, "no_speech_prob": 0.0030735493637621403}, {"id": 25, "seek": 15600, "start": 168.0, "end": 171.0, "text": " And then the second is going to be the idea of attention.", "tokens": [50964, 400, 550, 264, 1150, 307, 516, 281, 312, 264, 1558, 295, 3202, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09710283377735886, "compression_ratio": 1.6995515695067265, "no_speech_prob": 0.0030735493637621403}, {"id": 26, "seek": 15600, "start": 171.0, "end": 176.0, "text": " There's a few other, you know, bits and pieces and transformers, but to me, those are the two kind of key ideas.", "tokens": [51114, 821, 311, 257, 1326, 661, 11, 291, 458, 11, 9239, 293, 3755, 293, 4088, 433, 11, 457, 281, 385, 11, 729, 366, 264, 732, 733, 295, 2141, 3487, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09710283377735886, "compression_ratio": 1.6995515695067265, "no_speech_prob": 0.0030735493637621403}, {"id": 27, "seek": 15600, "start": 176.0, "end": 183.0, "text": " Okay, so tokens are essentially a new data structure.", "tokens": [51364, 1033, 11, 370, 22667, 366, 4476, 257, 777, 1412, 3877, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09710283377735886, "compression_ratio": 1.6995515695067265, "no_speech_prob": 0.0030735493637621403}, {"id": 28, "seek": 18300, "start": 183.0, "end": 197.0, "text": " And they're a replacement for neurons. Okay, so in artificial neural nets, neurons are just real numbers, just scalar numbers, and tokens are vectors. So that's, that is the distinction that, as far as I'm concerned.", "tokens": [50364, 400, 436, 434, 257, 14419, 337, 22027, 13, 1033, 11, 370, 294, 11677, 18161, 36170, 11, 22027, 366, 445, 957, 3547, 11, 445, 39684, 3547, 11, 293, 22667, 366, 18875, 13, 407, 300, 311, 11, 300, 307, 264, 16844, 300, 11, 382, 1400, 382, 286, 478, 5922, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1163983874850803, "compression_ratio": 1.6627218934911243, "no_speech_prob": 0.004329601768404245}, {"id": 29, "seek": 18300, "start": 197.0, "end": 201.0, "text": " So it's just lingo for a vector of neurons, a vector of scalars.", "tokens": [51064, 407, 309, 311, 445, 287, 18459, 337, 257, 8062, 295, 22027, 11, 257, 8062, 295, 15664, 685, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1163983874850803, "compression_ratio": 1.6627218934911243, "no_speech_prob": 0.004329601768404245}, {"id": 30, "seek": 20100, "start": 201.0, "end": 209.0, "text": " But when you start thinking of your primitive units in a network as tokens, whether they're neurons, then sometimes the math will look a little bit different.", "tokens": [50364, 583, 562, 291, 722, 1953, 295, 428, 28540, 6815, 294, 257, 3209, 382, 22667, 11, 1968, 436, 434, 22027, 11, 550, 2171, 264, 5221, 486, 574, 257, 707, 857, 819, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16802957183436343, "compression_ratio": 1.551219512195122, "no_speech_prob": 0.13081766664981842}, {"id": 31, "seek": 20100, "start": 209.0, "end": 217.0, "text": " And I think it's just a powerful way of working with new kinds of neural networks made out of tokens instead of neurons.", "tokens": [50764, 400, 286, 519, 309, 311, 445, 257, 4005, 636, 295, 1364, 365, 777, 3685, 295, 18161, 9590, 1027, 484, 295, 22667, 2602, 295, 22027, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16802957183436343, "compression_ratio": 1.551219512195122, "no_speech_prob": 0.13081766664981842}, {"id": 32, "seek": 20100, "start": 217.0, "end": 221.0, "text": " Okay, again, it's a patch in an image.", "tokens": [51164, 1033, 11, 797, 11, 309, 311, 257, 9972, 294, 364, 3256, 13, 51364], "temperature": 0.0, "avg_logprob": -0.16802957183436343, "compression_ratio": 1.551219512195122, "no_speech_prob": 0.13081766664981842}, {"id": 33, "seek": 22100, "start": 221.0, "end": 235.0, "text": " It's a patch in an image can be a token. I'll give a few examples and not not any ideas vector neurons vectors of, you know, features for a unit inside a network that's an old idea, you know shows up in graph neural networks if you've seen those two.", "tokens": [50364, 467, 311, 257, 9972, 294, 364, 3256, 393, 312, 257, 14862, 13, 286, 603, 976, 257, 1326, 5110, 293, 406, 406, 604, 3487, 8062, 22027, 18875, 295, 11, 291, 458, 11, 4122, 337, 257, 4985, 1854, 257, 3209, 300, 311, 364, 1331, 1558, 11, 291, 458, 3110, 493, 294, 4295, 18161, 9590, 498, 291, 600, 1612, 729, 732, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11711539741323776, "compression_ratio": 1.7802197802197801, "no_speech_prob": 0.013420789502561092}, {"id": 34, "seek": 22100, "start": 235.0, "end": 250.0, "text": " Okay, but the way I like to think of it is we used to work with arrays of neurons and now in transformers we work with arrays, tensors of various shape of tokens, but they're kind of like encapsulated, you know, vectors of information.", "tokens": [51064, 1033, 11, 457, 264, 636, 286, 411, 281, 519, 295, 309, 307, 321, 1143, 281, 589, 365, 41011, 295, 22027, 293, 586, 294, 4088, 433, 321, 589, 365, 41011, 11, 10688, 830, 295, 3683, 3909, 295, 22667, 11, 457, 436, 434, 733, 295, 411, 38745, 6987, 11, 291, 458, 11, 18875, 295, 1589, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11711539741323776, "compression_ratio": 1.7802197802197801, "no_speech_prob": 0.013420789502561092}, {"id": 35, "seek": 25000, "start": 250.0, "end": 259.0, "text": " Okay, so you can tokenize just about anything and that is like the big trend right now is just show how to turn whatever data you have into a sequence of tokens.", "tokens": [50364, 1033, 11, 370, 291, 393, 14862, 1125, 445, 466, 1340, 293, 300, 307, 411, 264, 955, 6028, 558, 586, 307, 445, 855, 577, 281, 1261, 2035, 1412, 291, 362, 666, 257, 8310, 295, 22667, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08307953441844267, "compression_ratio": 1.6848249027237354, "no_speech_prob": 0.007573232054710388}, {"id": 36, "seek": 25000, "start": 259.0, "end": 264.0, "text": " So here's an example, like Tommy's mentioning of tokenizing an image.", "tokens": [50814, 407, 510, 311, 364, 1365, 11, 411, 19448, 311, 18315, 295, 14862, 3319, 364, 3256, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08307953441844267, "compression_ratio": 1.6848249027237354, "no_speech_prob": 0.007573232054710388}, {"id": 37, "seek": 25000, "start": 264.0, "end": 275.0, "text": " You could do this in a million different ways but the way that is very common is you start with an image you break it into patches, you flatten all the patches to create just take all the rows of that.", "tokens": [51064, 509, 727, 360, 341, 294, 257, 2459, 819, 2098, 457, 264, 636, 300, 307, 588, 2689, 307, 291, 722, 365, 364, 3256, 291, 1821, 309, 666, 26531, 11, 291, 24183, 439, 264, 26531, 281, 1884, 445, 747, 439, 264, 13241, 295, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08307953441844267, "compression_ratio": 1.6848249027237354, "no_speech_prob": 0.007573232054710388}, {"id": 38, "seek": 27500, "start": 275.0, "end": 281.0, "text": " Just pixels and just concatenate them into a really long row or really long colon vector.", "tokens": [50364, 1449, 18668, 293, 445, 1588, 7186, 473, 552, 666, 257, 534, 938, 5386, 420, 534, 938, 8255, 8062, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13548748091895982, "compression_ratio": 1.724, "no_speech_prob": 0.12243665009737015}, {"id": 39, "seek": 27500, "start": 281.0, "end": 287.0, "text": " And then you get this thing called a token which is just an n dimensional vector representing that patch.", "tokens": [50664, 400, 550, 291, 483, 341, 551, 1219, 257, 14862, 597, 307, 445, 364, 297, 18795, 8062, 13460, 300, 9972, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13548748091895982, "compression_ratio": 1.724, "no_speech_prob": 0.12243665009737015}, {"id": 40, "seek": 27500, "start": 287.0, "end": 298.0, "text": " And this arrow up here, if you can see my mouse, it could just be flattened or concatenate, but commonly it will actually be a linear projection to some, you know, fixed dimensionality.", "tokens": [50964, 400, 341, 11610, 493, 510, 11, 498, 291, 393, 536, 452, 9719, 11, 309, 727, 445, 312, 24183, 292, 420, 1588, 7186, 473, 11, 457, 12719, 309, 486, 767, 312, 257, 8213, 22743, 281, 512, 11, 291, 458, 11, 6806, 10139, 1860, 13, 51514], "temperature": 0.0, "avg_logprob": -0.13548748091895982, "compression_ratio": 1.724, "no_speech_prob": 0.12243665009737015}, {"id": 41, "seek": 27500, "start": 298.0, "end": 301.0, "text": " So project to 128 dimensional vector for example.", "tokens": [51514, 407, 1716, 281, 29810, 18795, 8062, 337, 1365, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13548748091895982, "compression_ratio": 1.724, "no_speech_prob": 0.12243665009737015}, {"id": 42, "seek": 30100, "start": 301.0, "end": 304.0, "text": " Should I think of a token as an embedding? Is it the same or what?", "tokens": [50364, 6454, 286, 519, 295, 257, 14862, 382, 364, 12240, 3584, 30, 1119, 309, 264, 912, 420, 437, 30, 50514], "temperature": 0.0, "avg_logprob": -0.15950454583688944, "compression_ratio": 1.7283464566929134, "no_speech_prob": 0.015418917872011662}, {"id": 43, "seek": 30100, "start": 304.0, "end": 309.0, "text": " Same thing. Yeah, so vector embedding of a patch would be a token in this context. Yeah.", "tokens": [50514, 10635, 551, 13, 865, 11, 370, 8062, 12240, 3584, 295, 257, 9972, 576, 312, 257, 14862, 294, 341, 4319, 13, 865, 13, 50764], "temperature": 0.0, "avg_logprob": -0.15950454583688944, "compression_ratio": 1.7283464566929134, "no_speech_prob": 0.015418917872011662}, {"id": 44, "seek": 30100, "start": 309.0, "end": 317.0, "text": " So there's a lot of names for this but to me like yeah once you start thinking of things in terms of tokens like that's that's how I like to think of it.", "tokens": [50764, 407, 456, 311, 257, 688, 295, 5288, 337, 341, 457, 281, 385, 411, 1338, 1564, 291, 722, 1953, 295, 721, 294, 2115, 295, 22667, 411, 300, 311, 300, 311, 577, 286, 411, 281, 519, 295, 309, 13, 51164], "temperature": 0.0, "avg_logprob": -0.15950454583688944, "compression_ratio": 1.7283464566929134, "no_speech_prob": 0.015418917872011662}, {"id": 45, "seek": 30100, "start": 317.0, "end": 320.0, "text": " Okay, so you can tokenize anything.", "tokens": [51164, 1033, 11, 370, 291, 393, 14862, 1125, 1340, 13, 51314], "temperature": 0.0, "avg_logprob": -0.15950454583688944, "compression_ratio": 1.7283464566929134, "no_speech_prob": 0.015418917872011662}, {"id": 46, "seek": 30100, "start": 320.0, "end": 323.0, "text": " That's often a linear projection.", "tokens": [51314, 663, 311, 2049, 257, 8213, 22743, 13, 51464], "temperature": 0.0, "avg_logprob": -0.15950454583688944, "compression_ratio": 1.7283464566929134, "no_speech_prob": 0.015418917872011662}, {"id": 47, "seek": 30100, "start": 323.0, "end": 327.0, "text": " We used to operate over neurons now we operate over tokens.", "tokens": [51464, 492, 1143, 281, 9651, 670, 22027, 586, 321, 9651, 670, 22667, 13, 51664], "temperature": 0.0, "avg_logprob": -0.15950454583688944, "compression_ratio": 1.7283464566929134, "no_speech_prob": 0.015418917872011662}, {"id": 48, "seek": 32700, "start": 327.0, "end": 336.0, "text": " And just a few more examples so whenever you can take your signal and chop it up into chunks and project each chunk to a fixed dimensionality vector.", "tokens": [50364, 400, 445, 257, 1326, 544, 5110, 370, 5699, 291, 393, 747, 428, 6358, 293, 7931, 309, 493, 666, 24004, 293, 1716, 1184, 16635, 281, 257, 6806, 10139, 1860, 8062, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11030576667007135, "compression_ratio": 1.748, "no_speech_prob": 0.037302955985069275}, {"id": 49, "seek": 32700, "start": 336.0, "end": 345.0, "text": " Then you can tokenize that data so for language, people do this as well they chop up into little chunks which are often, you know, two characters or a few characters at a time.", "tokens": [50814, 1396, 291, 393, 14862, 1125, 300, 1412, 370, 337, 2856, 11, 561, 360, 341, 382, 731, 436, 7931, 493, 666, 707, 24004, 597, 366, 2049, 11, 291, 458, 11, 732, 4342, 420, 257, 1326, 4342, 412, 257, 565, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11030576667007135, "compression_ratio": 1.748, "no_speech_prob": 0.037302955985069275}, {"id": 50, "seek": 32700, "start": 345.0, "end": 351.0, "text": " And they project those into 120 dimensional vectors with sound you chop up into little tiny snippets of sound.", "tokens": [51264, 400, 436, 1716, 729, 666, 10411, 18795, 18875, 365, 1626, 291, 7931, 493, 666, 707, 5870, 35623, 1385, 295, 1626, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11030576667007135, "compression_ratio": 1.748, "no_speech_prob": 0.037302955985069275}, {"id": 51, "seek": 35100, "start": 351.0, "end": 359.0, "text": " So you can tokenize anything and once you've tokenized it then it's just a sequence like representation a sequence of vectors.", "tokens": [50364, 407, 291, 393, 14862, 1125, 1340, 293, 1564, 291, 600, 14862, 1602, 309, 550, 309, 311, 445, 257, 8310, 411, 10290, 257, 8310, 295, 18875, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11475199002486008, "compression_ratio": 1.7903225806451613, "no_speech_prob": 0.0028441103640943766}, {"id": 52, "seek": 35100, "start": 359.0, "end": 366.0, "text": " Although really the way transformers work is they think of it as they treat it as a set not a sequence but people often talk of it as a sequence.", "tokens": [50764, 5780, 534, 264, 636, 4088, 433, 589, 307, 436, 519, 295, 309, 382, 436, 2387, 309, 382, 257, 992, 406, 257, 8310, 457, 561, 2049, 751, 295, 309, 382, 257, 8310, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11475199002486008, "compression_ratio": 1.7903225806451613, "no_speech_prob": 0.0028441103640943766}, {"id": 53, "seek": 35100, "start": 366.0, "end": 368.0, "text": " Okay.", "tokens": [51114, 1033, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11475199002486008, "compression_ratio": 1.7903225806451613, "no_speech_prob": 0.0028441103640943766}, {"id": 54, "seek": 35100, "start": 368.0, "end": 377.0, "text": " So that's tokenization that's, I think that's the first critical idea and then everything ends up being the operators to find over tokens as opposed to over neurons.", "tokens": [51214, 407, 300, 311, 14862, 2144, 300, 311, 11, 286, 519, 300, 311, 264, 700, 4924, 1558, 293, 550, 1203, 5314, 493, 885, 264, 19077, 281, 915, 670, 22667, 382, 8851, 281, 670, 22027, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11475199002486008, "compression_ratio": 1.7903225806451613, "no_speech_prob": 0.0028441103640943766}, {"id": 55, "seek": 37700, "start": 377.0, "end": 390.0, "text": " So rather than taking linear combinations of neurons which is the common, you know, linear layer in a network, we take linear combinations of tokens where you just take a weighted combination of vectors instead of weighted combination of scalars.", "tokens": [50364, 407, 2831, 813, 1940, 8213, 21267, 295, 22027, 597, 307, 264, 2689, 11, 291, 458, 11, 8213, 4583, 294, 257, 3209, 11, 321, 747, 8213, 21267, 295, 22667, 689, 291, 445, 747, 257, 32807, 6562, 295, 18875, 2602, 295, 32807, 6562, 295, 15664, 685, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10084174474080404, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.002251184545457363}, {"id": 56, "seek": 37700, "start": 390.0, "end": 392.0, "text": " Okay.", "tokens": [51014, 1033, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10084174474080404, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.002251184545457363}, {"id": 57, "seek": 37700, "start": 392.0, "end": 400.0, "text": " So I'm not in this, because it's only like a little intro going to go into the math and detail, but we can always come back if you're interested.", "tokens": [51114, 407, 286, 478, 406, 294, 341, 11, 570, 309, 311, 787, 411, 257, 707, 12897, 516, 281, 352, 666, 264, 5221, 293, 2607, 11, 457, 321, 393, 1009, 808, 646, 498, 291, 434, 3102, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10084174474080404, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.002251184545457363}, {"id": 58, "seek": 40000, "start": 400.0, "end": 412.0, "text": " Okay, so in standard artificial neural networks, there's two key layers, there's the linear combination layer, the linear layer, and there is the point wise nonlinearity, which might be a ReLU or a sigmoid function.", "tokens": [50364, 1033, 11, 370, 294, 3832, 11677, 18161, 9590, 11, 456, 311, 732, 2141, 7914, 11, 456, 311, 264, 8213, 6562, 4583, 11, 264, 8213, 4583, 11, 293, 456, 307, 264, 935, 10829, 2107, 1889, 17409, 11, 597, 1062, 312, 257, 1300, 43, 52, 420, 257, 4556, 3280, 327, 2445, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14381062873056003, "compression_ratio": 1.968609865470852, "no_speech_prob": 0.007456222549080849}, {"id": 59, "seek": 40000, "start": 412.0, "end": 423.0, "text": " So in tokens, there's the same thing, there's a linear layer, which we have here, just a linear combination of vectors, and then there's a token wise nonlinearity which is completely analogous to a neuron wise nonlinearity.", "tokens": [50964, 407, 294, 22667, 11, 456, 311, 264, 912, 551, 11, 456, 311, 257, 8213, 4583, 11, 597, 321, 362, 510, 11, 445, 257, 8213, 6562, 295, 18875, 11, 293, 550, 456, 311, 257, 14862, 10829, 2107, 1889, 17409, 597, 307, 2584, 16660, 563, 281, 257, 34090, 10829, 2107, 1889, 17409, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14381062873056003, "compression_ratio": 1.968609865470852, "no_speech_prob": 0.007456222549080849}, {"id": 60, "seek": 42300, "start": 423.0, "end": 437.0, "text": " So this is a neural net that does a point wise nonlinearity over neurons that applies the same function ReLU to every neuron in a list, and the token net applies the same function F to every token in a list for an asset.", "tokens": [50364, 407, 341, 307, 257, 18161, 2533, 300, 775, 257, 935, 10829, 2107, 1889, 17409, 670, 22027, 300, 13165, 264, 912, 2445, 1300, 43, 52, 281, 633, 34090, 294, 257, 1329, 11, 293, 264, 14862, 2533, 13165, 264, 912, 2445, 479, 281, 633, 14862, 294, 257, 1329, 337, 364, 11999, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12422542572021485, "compression_ratio": 1.6649484536082475, "no_speech_prob": 0.006901331711560488}, {"id": 61, "seek": 42300, "start": 437.0, "end": 444.0, "text": " Okay, usually F is going to be itself a multilayer perceptron, it will be some parameterized function.", "tokens": [51064, 1033, 11, 2673, 479, 307, 516, 281, 312, 2564, 257, 2120, 388, 11167, 43276, 2044, 11, 309, 486, 312, 512, 13075, 1602, 2445, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12422542572021485, "compression_ratio": 1.6649484536082475, "no_speech_prob": 0.006901331711560488}, {"id": 62, "seek": 44400, "start": 444.0, "end": 449.0, "text": " So equivalently think of this as a convolution over the tokens.", "tokens": [50364, 407, 9052, 2276, 519, 295, 341, 382, 257, 45216, 670, 264, 22667, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1428239154815674, "compression_ratio": 1.615702479338843, "no_speech_prob": 0.08265760540962219}, {"id": 63, "seek": 44400, "start": 449.0, "end": 455.0, "text": " So, transformers, CNNs, it's all the same ideas kind of rehash, we can talk about that if people are interested.", "tokens": [50614, 407, 11, 4088, 433, 11, 24859, 82, 11, 309, 311, 439, 264, 912, 3487, 733, 295, 22355, 1299, 11, 321, 393, 751, 466, 300, 498, 561, 366, 3102, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1428239154815674, "compression_ratio": 1.615702479338843, "no_speech_prob": 0.08265760540962219}, {"id": 64, "seek": 44400, "start": 455.0, "end": 465.0, "text": " But here's what it looks like, it's just a token wise operation that slides along the list of tokens. Okay, so you can see that looks like convolution sliding across the signal.", "tokens": [50914, 583, 510, 311, 437, 309, 1542, 411, 11, 309, 311, 445, 257, 14862, 10829, 6916, 300, 9788, 2051, 264, 1329, 295, 22667, 13, 1033, 11, 370, 291, 393, 536, 300, 1542, 411, 45216, 21169, 2108, 264, 6358, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1428239154815674, "compression_ratio": 1.615702479338843, "no_speech_prob": 0.08265760540962219}, {"id": 65, "seek": 44400, "start": 465.0, "end": 468.0, "text": " Okay, it's usually one layer, right?", "tokens": [51414, 1033, 11, 309, 311, 2673, 472, 4583, 11, 558, 30, 51564], "temperature": 0.0, "avg_logprob": -0.1428239154815674, "compression_ratio": 1.615702479338843, "no_speech_prob": 0.08265760540962219}, {"id": 66, "seek": 46800, "start": 468.0, "end": 475.0, "text": " It's usually one layer, I think that is usually linear ReLU to linear. Yeah, so it's a nonlinear function.", "tokens": [50364, 467, 311, 2673, 472, 4583, 11, 286, 519, 300, 307, 2673, 8213, 1300, 43, 52, 281, 8213, 13, 865, 11, 370, 309, 311, 257, 2107, 28263, 2445, 13, 50714], "temperature": 0.0, "avg_logprob": -0.28122567638908463, "compression_ratio": 1.5939086294416243, "no_speech_prob": 0.034050535410642624}, {"id": 67, "seek": 46800, "start": 475.0, "end": 480.0, "text": " If it, yeah, it just has to be nonlinear so you get nonlinearities into the system.", "tokens": [50714, 759, 309, 11, 1338, 11, 309, 445, 575, 281, 312, 2107, 28263, 370, 291, 483, 2107, 28263, 1088, 666, 264, 1185, 13, 50964], "temperature": 0.0, "avg_logprob": -0.28122567638908463, "compression_ratio": 1.5939086294416243, "no_speech_prob": 0.034050535410642624}, {"id": 68, "seek": 46800, "start": 480.0, "end": 482.0, "text": " I have a question.", "tokens": [50964, 286, 362, 257, 1168, 13, 51064], "temperature": 0.0, "avg_logprob": -0.28122567638908463, "compression_ratio": 1.5939086294416243, "no_speech_prob": 0.034050535410642624}, {"id": 69, "seek": 46800, "start": 482.0, "end": 483.0, "text": " MLP.", "tokens": [51064, 21601, 47, 13, 51114], "temperature": 0.0, "avg_logprob": -0.28122567638908463, "compression_ratio": 1.5939086294416243, "no_speech_prob": 0.034050535410642624}, {"id": 70, "seek": 46800, "start": 483.0, "end": 485.0, "text": " One layer of neither.", "tokens": [51114, 1485, 4583, 295, 9662, 13, 51214], "temperature": 0.0, "avg_logprob": -0.28122567638908463, "compression_ratio": 1.5939086294416243, "no_speech_prob": 0.034050535410642624}, {"id": 71, "seek": 46800, "start": 485.0, "end": 490.0, "text": " Well, two linear layer MLP, but sure. Yeah, you could call it something else.", "tokens": [51214, 1042, 11, 732, 8213, 4583, 21601, 47, 11, 457, 988, 13, 865, 11, 291, 727, 818, 309, 746, 1646, 13, 51464], "temperature": 0.0, "avg_logprob": -0.28122567638908463, "compression_ratio": 1.5939086294416243, "no_speech_prob": 0.034050535410642624}, {"id": 72, "seek": 49000, "start": 490.0, "end": 499.0, "text": " I have a good question for the last slide, like, I think I have missed what is the Z here, like, in the last slide.", "tokens": [50364, 286, 362, 257, 665, 1168, 337, 264, 1036, 4137, 11, 411, 11, 286, 519, 286, 362, 6721, 437, 307, 264, 1176, 510, 11, 411, 11, 294, 264, 1036, 4137, 13, 50814], "temperature": 0.0, "avg_logprob": -0.18060435851415, "compression_ratio": 1.6482412060301508, "no_speech_prob": 0.012618721462786198}, {"id": 73, "seek": 49000, "start": 499.0, "end": 505.0, "text": " Oh, Z is the token code vector, meaning the vector of neurons inside that token.", "tokens": [50814, 876, 11, 1176, 307, 264, 14862, 3089, 8062, 11, 3620, 264, 8062, 295, 22027, 1854, 300, 14862, 13, 51114], "temperature": 0.0, "avg_logprob": -0.18060435851415, "compression_ratio": 1.6482412060301508, "no_speech_prob": 0.012618721462786198}, {"id": 74, "seek": 49000, "start": 505.0, "end": 506.0, "text": " Okay.", "tokens": [51114, 1033, 13, 51164], "temperature": 0.0, "avg_logprob": -0.18060435851415, "compression_ratio": 1.6482412060301508, "no_speech_prob": 0.012618721462786198}, {"id": 75, "seek": 49000, "start": 506.0, "end": 509.0, "text": " It has this code vector that lives inside it. Yeah.", "tokens": [51164, 467, 575, 341, 3089, 8062, 300, 2909, 1854, 309, 13, 865, 13, 51314], "temperature": 0.0, "avg_logprob": -0.18060435851415, "compression_ratio": 1.6482412060301508, "no_speech_prob": 0.012618721462786198}, {"id": 76, "seek": 49000, "start": 509.0, "end": 511.0, "text": " Okay, thank you.", "tokens": [51314, 1033, 11, 1309, 291, 13, 51414], "temperature": 0.0, "avg_logprob": -0.18060435851415, "compression_ratio": 1.6482412060301508, "no_speech_prob": 0.012618721462786198}, {"id": 77, "seek": 49000, "start": 511.0, "end": 512.0, "text": " You're welcome.", "tokens": [51414, 509, 434, 2928, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18060435851415, "compression_ratio": 1.6482412060301508, "no_speech_prob": 0.012618721462786198}, {"id": 78, "seek": 49000, "start": 512.0, "end": 515.0, "text": " We'll see you now with convolution here.", "tokens": [51464, 492, 603, 536, 291, 586, 365, 45216, 510, 13, 51614], "temperature": 0.0, "avg_logprob": -0.18060435851415, "compression_ratio": 1.6482412060301508, "no_speech_prob": 0.012618721462786198}, {"id": 79, "seek": 51500, "start": 515.0, "end": 529.0, "text": " Conquering applies the same operator independently and identically to every item in a sequence, and this is doing the same thing. So it's like, you know, slide the filter across here to slide this nonlinear filter across the sequence.", "tokens": [50364, 2656, 358, 1794, 13165, 264, 912, 12973, 21761, 293, 2473, 984, 281, 633, 3174, 294, 257, 8310, 11, 293, 341, 307, 884, 264, 912, 551, 13, 407, 309, 311, 411, 11, 291, 458, 11, 4137, 264, 6608, 2108, 510, 281, 4137, 341, 2107, 28263, 6608, 2108, 264, 8310, 13, 51064], "temperature": 0.0, "avg_logprob": -0.15813234719363126, "compression_ratio": 1.685589519650655, "no_speech_prob": 0.04464191198348999}, {"id": 80, "seek": 51500, "start": 529.0, "end": 541.0, "text": " But we give it as a one by one kernel because it doesn't the like the receptive field in the sequence dimension is just looking at one token at a time.", "tokens": [51064, 583, 321, 976, 309, 382, 257, 472, 538, 472, 28256, 570, 309, 1177, 380, 264, 411, 264, 45838, 2519, 294, 264, 8310, 10139, 307, 445, 1237, 412, 472, 14862, 412, 257, 565, 13, 51664], "temperature": 0.0, "avg_logprob": -0.15813234719363126, "compression_ratio": 1.685589519650655, "no_speech_prob": 0.04464191198348999}, {"id": 81, "seek": 54100, "start": 541.0, "end": 554.0, "text": " Okay, so here's a neural net. And here is what I'll call a token net. So it's just like a neural net alternating linear combination point wise nonlinearity but now it's linear combination of tokens and token wise nonlinearity.", "tokens": [50364, 1033, 11, 370, 510, 311, 257, 18161, 2533, 13, 400, 510, 307, 437, 286, 603, 818, 257, 14862, 2533, 13, 407, 309, 311, 445, 411, 257, 18161, 2533, 40062, 8213, 6562, 935, 10829, 2107, 1889, 17409, 457, 586, 309, 311, 8213, 6562, 295, 22667, 293, 14862, 10829, 2107, 1889, 17409, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11257995467588126, "compression_ratio": 1.765, "no_speech_prob": 0.003944577183574438}, {"id": 82, "seek": 54100, "start": 554.0, "end": 557.0, "text": " And transformers are in that family.", "tokens": [51014, 400, 4088, 433, 366, 294, 300, 1605, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11257995467588126, "compression_ratio": 1.765, "no_speech_prob": 0.003944577183574438}, {"id": 83, "seek": 54100, "start": 557.0, "end": 563.0, "text": " Another name for that family is graph neural networks they have the exact same structure.", "tokens": [51164, 3996, 1315, 337, 300, 1605, 307, 4295, 18161, 9590, 436, 362, 264, 1900, 912, 3877, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11257995467588126, "compression_ratio": 1.765, "no_speech_prob": 0.003944577183574438}, {"id": 84, "seek": 56300, "start": 563.0, "end": 566.0, "text": " Okay, but the terminology is just different.", "tokens": [50364, 1033, 11, 457, 264, 27575, 307, 445, 819, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1538534858010032, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.005219315178692341}, {"id": 85, "seek": 56300, "start": 566.0, "end": 571.0, "text": " But they're the same thing token nets graph nets transformers are all the same thing.", "tokens": [50514, 583, 436, 434, 264, 912, 551, 14862, 36170, 4295, 36170, 4088, 433, 366, 439, 264, 912, 551, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1538534858010032, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.005219315178692341}, {"id": 86, "seek": 56300, "start": 571.0, "end": 578.0, "text": " You could say that token sorry transformers are special kind of graph net if you're looking at that way.", "tokens": [50764, 509, 727, 584, 300, 14862, 2597, 4088, 433, 366, 2121, 733, 295, 4295, 2533, 498, 291, 434, 1237, 412, 300, 636, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1538534858010032, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.005219315178692341}, {"id": 87, "seek": 56300, "start": 578.0, "end": 584.0, "text": " So so many connections that could be made, but I'm going to zoom right ahead and we can discuss all the connections.", "tokens": [51114, 407, 370, 867, 9271, 300, 727, 312, 1027, 11, 457, 286, 478, 516, 281, 8863, 558, 2286, 293, 321, 393, 2248, 439, 264, 9271, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1538534858010032, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.005219315178692341}, {"id": 88, "seek": 56300, "start": 584.0, "end": 591.0, "text": " So that idea number one is build things out of tokens vector valued units as opposed to out of neurons scalar value units.", "tokens": [51414, 407, 300, 1558, 1230, 472, 307, 1322, 721, 484, 295, 22667, 8062, 22608, 6815, 382, 8851, 281, 484, 295, 22027, 39684, 2158, 6815, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1538534858010032, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.005219315178692341}, {"id": 89, "seek": 59100, "start": 591.0, "end": 598.0, "text": " Number two to me is attention. Maybe this is the most famous idea of transformers is they have this new layer called attention.", "tokens": [50364, 5118, 732, 281, 385, 307, 3202, 13, 2704, 341, 307, 264, 881, 4618, 1558, 295, 4088, 433, 307, 436, 362, 341, 777, 4583, 1219, 3202, 13, 50714], "temperature": 0.0, "avg_logprob": -0.15581119578817618, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.009856456890702248}, {"id": 90, "seek": 59100, "start": 598.0, "end": 601.0, "text": " So let's look at what attention is.", "tokens": [50714, 407, 718, 311, 574, 412, 437, 3202, 307, 13, 50864], "temperature": 0.0, "avg_logprob": -0.15581119578817618, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.009856456890702248}, {"id": 91, "seek": 59100, "start": 601.0, "end": 614.0, "text": " Okay, so in a neural net or what I'm calling a token that you'll have linear combinations of inputs to produce an output or weight of some of the inputs to produce an output, and you will parameterize that mapping with weights w.", "tokens": [50864, 1033, 11, 370, 294, 257, 18161, 2533, 420, 437, 286, 478, 5141, 257, 14862, 300, 291, 603, 362, 8213, 21267, 295, 15743, 281, 5258, 364, 5598, 420, 3364, 295, 512, 295, 264, 15743, 281, 5258, 364, 5598, 11, 293, 291, 486, 13075, 1125, 300, 18350, 365, 17443, 261, 13, 51514], "temperature": 0.0, "avg_logprob": -0.15581119578817618, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.009856456890702248}, {"id": 92, "seek": 61400, "start": 614.0, "end": 624.0, "text": " And in attention, you have a weighted combination of inputs to produce an output, but but the parameters or the values in the matrix a are not learnable.", "tokens": [50364, 400, 294, 3202, 11, 291, 362, 257, 32807, 6562, 295, 15743, 281, 5258, 364, 5598, 11, 457, 457, 264, 9834, 420, 264, 4190, 294, 264, 8141, 257, 366, 406, 1466, 712, 13, 50864], "temperature": 0.0, "avg_logprob": -0.15005714243108575, "compression_ratio": 1.808411214953271, "no_speech_prob": 0.008575397543609142}, {"id": 93, "seek": 61400, "start": 624.0, "end": 629.0, "text": " Instead, they're going to be data dependent. They're going to be a function of the some other data.", "tokens": [50864, 7156, 11, 436, 434, 516, 281, 312, 1412, 12334, 13, 814, 434, 516, 281, 312, 257, 2445, 295, 264, 512, 661, 1412, 13, 51114], "temperature": 0.0, "avg_logprob": -0.15005714243108575, "compression_ratio": 1.808411214953271, "no_speech_prob": 0.008575397543609142}, {"id": 94, "seek": 61400, "start": 629.0, "end": 638.0, "text": " So when you have data dependent linear combination where the weights are a function of some other data, then that's called attention.", "tokens": [51114, 407, 562, 291, 362, 1412, 12334, 8213, 6562, 689, 264, 17443, 366, 257, 2445, 295, 512, 661, 1412, 11, 550, 300, 311, 1219, 3202, 13, 51564], "temperature": 0.0, "avg_logprob": -0.15005714243108575, "compression_ratio": 1.808411214953271, "no_speech_prob": 0.008575397543609142}, {"id": 95, "seek": 63800, "start": 638.0, "end": 640.0, "text": " Okay.", "tokens": [50364, 1033, 13, 50464], "temperature": 0.0, "avg_logprob": -0.13528935383942167, "compression_ratio": 1.6702898550724639, "no_speech_prob": 0.0017542355926707387}, {"id": 96, "seek": 63800, "start": 640.0, "end": 649.0, "text": " And so a is the weight matrix, and it's just a function of something else. It tells you what to attend to how much weight to apply to each token input sequence.", "tokens": [50464, 400, 370, 257, 307, 264, 3364, 8141, 11, 293, 309, 311, 445, 257, 2445, 295, 746, 1646, 13, 467, 5112, 291, 437, 281, 6888, 281, 577, 709, 3364, 281, 3079, 281, 1184, 14862, 4846, 8310, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13528935383942167, "compression_ratio": 1.6702898550724639, "no_speech_prob": 0.0017542355926707387}, {"id": 97, "seek": 63800, "start": 649.0, "end": 656.0, "text": " And you'll take a, you know, weighted sum, which is just matrix multiply a by the tokens.", "tokens": [50914, 400, 291, 603, 747, 257, 11, 291, 458, 11, 32807, 2408, 11, 597, 307, 445, 8141, 12972, 257, 538, 264, 22667, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13528935383942167, "compression_ratio": 1.6702898550724639, "no_speech_prob": 0.0017542355926707387}, {"id": 98, "seek": 63800, "start": 656.0, "end": 667.0, "text": " Okay, notation, don't worry about it. So here's here's the intuition. So I can have attention given to me by some other branch of my neural network, maybe it's going to be a branch that passes a question.", "tokens": [51264, 1033, 11, 24657, 11, 500, 380, 3292, 466, 309, 13, 407, 510, 311, 510, 311, 264, 24002, 13, 407, 286, 393, 362, 3202, 2212, 281, 385, 538, 512, 661, 9819, 295, 452, 18161, 3209, 11, 1310, 309, 311, 516, 281, 312, 257, 9819, 300, 11335, 257, 1168, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13528935383942167, "compression_ratio": 1.6702898550724639, "no_speech_prob": 0.0017542355926707387}, {"id": 99, "seek": 66700, "start": 667.0, "end": 674.0, "text": " That question will tell me what patches in the input I tend to the input patches are represented by tokens.", "tokens": [50364, 663, 1168, 486, 980, 385, 437, 26531, 294, 264, 4846, 286, 3928, 281, 264, 4846, 26531, 366, 10379, 538, 22667, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14526943933396114, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.016389595344662666}, {"id": 100, "seek": 66700, "start": 674.0, "end": 682.0, "text": " And I will say these are the patches that I'm going to place high weight on and then I'll take a weighted sum of the code vectors inside those patches pretty soon output.", "tokens": [50714, 400, 286, 486, 584, 613, 366, 264, 26531, 300, 286, 478, 516, 281, 1081, 1090, 3364, 322, 293, 550, 286, 603, 747, 257, 32807, 2408, 295, 264, 3089, 18875, 1854, 729, 26531, 1238, 2321, 5598, 13, 51114], "temperature": 0.0, "avg_logprob": -0.14526943933396114, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.016389595344662666}, {"id": 101, "seek": 66700, "start": 682.0, "end": 690.0, "text": " So I could ask, you know, question, what is the color of the birds head I'll attend to the birds head. What is the color of the vegetation I'll attend to the background.", "tokens": [51114, 407, 286, 727, 1029, 11, 291, 458, 11, 1168, 11, 437, 307, 264, 2017, 295, 264, 9009, 1378, 286, 603, 6888, 281, 264, 9009, 1378, 13, 708, 307, 264, 2017, 295, 264, 28769, 286, 603, 6888, 281, 264, 3678, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14526943933396114, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.016389595344662666}, {"id": 102, "seek": 69000, "start": 690.0, "end": 698.0, "text": " I'm just saying which tokens tokens or patches here are going to be getting a lot of weight to make my decision.", "tokens": [50364, 286, 478, 445, 1566, 597, 22667, 22667, 420, 26531, 510, 366, 516, 281, 312, 1242, 257, 688, 295, 3364, 281, 652, 452, 3537, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1437863365548556, "compression_ratio": 1.4971098265895955, "no_speech_prob": 0.04334725812077522}, {"id": 103, "seek": 69000, "start": 698.0, "end": 707.0, "text": " Okay, and then I'll report the best green because the token code vectors will have represented some information like the color of the token.", "tokens": [50764, 1033, 11, 293, 550, 286, 603, 2275, 264, 1151, 3092, 570, 264, 14862, 3089, 18875, 486, 362, 10379, 512, 1589, 411, 264, 2017, 295, 264, 14862, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1437863365548556, "compression_ratio": 1.4971098265895955, "no_speech_prob": 0.04334725812077522}, {"id": 104, "seek": 69000, "start": 707.0, "end": 709.0, "text": " Okay.", "tokens": [51214, 1033, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1437863365548556, "compression_ratio": 1.4971098265895955, "no_speech_prob": 0.04334725812077522}, {"id": 105, "seek": 70900, "start": 709.0, "end": 717.0, "text": " There's a little too much detail to fully understand in just a few minutes but here's the most common kind of attention layer just to show you the mechanics really quickly.", "tokens": [50364, 821, 311, 257, 707, 886, 709, 2607, 281, 4498, 1223, 294, 445, 257, 1326, 2077, 457, 510, 311, 264, 881, 2689, 733, 295, 3202, 4583, 445, 281, 855, 291, 264, 12939, 534, 2661, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08311349550882975, "compression_ratio": 1.8280542986425339, "no_speech_prob": 0.20918725430965424}, {"id": 106, "seek": 70900, "start": 717.0, "end": 731.0, "text": " The question submits a query that is matched against a key in the data that you're querying so the data you're querying is a set of tokens and each token has a key vector which gets matched against the query vector of the question.", "tokens": [50764, 440, 1168, 8286, 1208, 257, 14581, 300, 307, 21447, 1970, 257, 2141, 294, 264, 1412, 300, 291, 434, 7083, 1840, 370, 264, 1412, 291, 434, 7083, 1840, 307, 257, 992, 295, 22667, 293, 1184, 14862, 575, 257, 2141, 8062, 597, 2170, 21447, 1970, 264, 14581, 8062, 295, 264, 1168, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08311349550882975, "compression_ratio": 1.8280542986425339, "no_speech_prob": 0.20918725430965424}, {"id": 107, "seek": 73100, "start": 731.0, "end": 746.0, "text": " The dot product to get the similarity between the key and the query and that dot product that similarity becomes the way you apply to another transformation of your tokens which is called the value vector and you take a weighted combination of the value vector.", "tokens": [50364, 440, 5893, 1674, 281, 483, 264, 32194, 1296, 264, 2141, 293, 264, 14581, 293, 300, 5893, 1674, 300, 32194, 3643, 264, 636, 291, 3079, 281, 1071, 9887, 295, 428, 22667, 597, 307, 1219, 264, 2158, 8062, 293, 291, 747, 257, 32807, 6562, 295, 264, 2158, 8062, 13, 51114], "temperature": 0.0, "avg_logprob": -0.18042169832715801, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.19667258858680725}, {"id": 108, "seek": 74600, "start": 746.0, "end": 764.0, "text": " And so, although all the fancy math here is just to say, the question will tell me which tokens to weigh heavily in a weighted sum to produce an output, but it'll be via these three transformations the token vectors, which are the key the value in the query transformations.", "tokens": [50364, 400, 370, 11, 4878, 439, 264, 10247, 5221, 510, 307, 445, 281, 584, 11, 264, 1168, 486, 980, 385, 597, 22667, 281, 13843, 10950, 294, 257, 32807, 2408, 281, 5258, 364, 5598, 11, 457, 309, 603, 312, 5766, 613, 1045, 34852, 264, 14862, 18875, 11, 597, 366, 264, 2141, 264, 2158, 294, 264, 14581, 34852, 13, 51264], "temperature": 0.0, "avg_logprob": -0.147017240524292, "compression_ratio": 1.5642458100558658, "no_speech_prob": 0.011862821877002716}, {"id": 109, "seek": 74600, "start": 764.0, "end": 766.0, "text": " Okay.", "tokens": [51264, 1033, 13, 51364], "temperature": 0.0, "avg_logprob": -0.147017240524292, "compression_ratio": 1.5642458100558658, "no_speech_prob": 0.011862821877002716}, {"id": 110, "seek": 76600, "start": 766.0, "end": 775.0, "text": " So that's a little mechanistic detail we can go back to that if we want to discuss the nitty-gritty. The way it kind of looks like is this and this is common to most of the transformer architectures.", "tokens": [50364, 407, 300, 311, 257, 707, 4236, 3142, 2607, 321, 393, 352, 646, 281, 300, 498, 321, 528, 281, 2248, 264, 297, 10016, 12, 861, 10016, 13, 440, 636, 309, 733, 295, 1542, 411, 307, 341, 293, 341, 307, 2689, 281, 881, 295, 264, 31782, 6331, 1303, 13, 50814], "temperature": 0.0, "avg_logprob": -0.14619499444961548, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.3068663477897644}, {"id": 111, "seek": 76600, "start": 775.0, "end": 781.0, "text": " You have a bunch of you break into patches then you have a bunch of layers which are basically these one by one convolutional layers.", "tokens": [50814, 509, 362, 257, 3840, 295, 291, 1821, 666, 26531, 550, 291, 362, 257, 3840, 295, 7914, 597, 366, 1936, 613, 472, 538, 472, 45216, 304, 7914, 13, 51114], "temperature": 0.0, "avg_logprob": -0.14619499444961548, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.3068663477897644}, {"id": 112, "seek": 78100, "start": 781.0, "end": 795.0, "text": " And then every now and then you have something that tries to mix information across space across tokens and that's called attention and that is just the tokens based on their values queries and keys will decide what should I you know which are the other tokens", "tokens": [50364, 400, 550, 633, 586, 293, 550, 291, 362, 746, 300, 9898, 281, 2890, 1589, 2108, 1901, 2108, 22667, 293, 300, 311, 1219, 3202, 293, 300, 307, 445, 264, 22667, 2361, 322, 641, 4190, 24109, 293, 9317, 486, 4536, 437, 820, 286, 291, 458, 597, 366, 264, 661, 22667, 51064], "temperature": 0.0, "avg_logprob": -0.10426878442569655, "compression_ratio": 1.8122605363984674, "no_speech_prob": 0.060891635715961456}, {"id": 113, "seek": 78100, "start": 795.0, "end": 808.0, "text": " should I average together to produce a new representation in the output. So this head might attend. So you know I should look at the other heads to decide how I can better recognize what's going on in this patch.", "tokens": [51064, 820, 286, 4274, 1214, 281, 5258, 257, 777, 10290, 294, 264, 5598, 13, 407, 341, 1378, 1062, 6888, 13, 407, 291, 458, 286, 820, 574, 412, 264, 661, 8050, 281, 4536, 577, 286, 393, 1101, 5521, 437, 311, 516, 322, 294, 341, 9972, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10426878442569655, "compression_ratio": 1.8122605363984674, "no_speech_prob": 0.060891635715961456}, {"id": 114, "seek": 80800, "start": 808.0, "end": 812.0, "text": " When you say one by one evolution you mean a patch is a pixel.", "tokens": [50364, 1133, 291, 584, 472, 538, 472, 9303, 291, 914, 257, 9972, 307, 257, 19261, 13, 50564], "temperature": 0.0, "avg_logprob": -0.2164461927593879, "compression_ratio": 1.626865671641791, "no_speech_prob": 0.0036485737655311823}, {"id": 115, "seek": 80800, "start": 812.0, "end": 824.0, "text": " A patch is so you vectorize a patch and then you do like one by one convolution across all of those tokens where the channel dimension is the token vector.", "tokens": [50564, 316, 9972, 307, 370, 291, 8062, 1125, 257, 9972, 293, 550, 291, 360, 411, 472, 538, 472, 45216, 2108, 439, 295, 729, 22667, 689, 264, 2269, 10139, 307, 264, 14862, 8062, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2164461927593879, "compression_ratio": 1.626865671641791, "no_speech_prob": 0.0036485737655311823}, {"id": 116, "seek": 82400, "start": 824.0, "end": 834.0, "text": " OK, so here's MLPs and then transformers are to two changes. One is that rather than scalars they have tokens and other changes rather than having parameterized linear weights.", "tokens": [50364, 2264, 11, 370, 510, 311, 21601, 23043, 293, 550, 4088, 433, 366, 281, 732, 2962, 13, 1485, 307, 300, 2831, 813, 15664, 685, 436, 362, 22667, 293, 661, 2962, 2831, 813, 1419, 13075, 1602, 8213, 17443, 13, 50864], "temperature": 0.0, "avg_logprob": -0.19275697072347006, "compression_ratio": 1.84, "no_speech_prob": 0.024076344445347786}, {"id": 117, "seek": 82400, "start": 834.0, "end": 845.0, "text": " They have data dependent linear weights that are given by that special attention operator and that attention operator itself has parameters that define the key the query and the value and those are the learnable parameters of the system.", "tokens": [50864, 814, 362, 1412, 12334, 8213, 17443, 300, 366, 2212, 538, 300, 2121, 3202, 12973, 293, 300, 3202, 12973, 2564, 575, 9834, 300, 6964, 264, 2141, 264, 14581, 293, 264, 2158, 293, 729, 366, 264, 1466, 712, 9834, 295, 264, 1185, 13, 51414], "temperature": 0.0, "avg_logprob": -0.19275697072347006, "compression_ratio": 1.84, "no_speech_prob": 0.024076344445347786}, {"id": 118, "seek": 84500, "start": 845.0, "end": 852.0, "text": " Philip, just a small detail, but you start with self attention and then you have a one layer.", "tokens": [50364, 21144, 11, 445, 257, 1359, 2607, 11, 457, 291, 722, 365, 2698, 3202, 293, 550, 291, 362, 257, 472, 4583, 13, 50714], "temperature": 0.0, "avg_logprob": -0.26737827207983994, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.08791528642177582}, {"id": 119, "seek": 84500, "start": 852.0, "end": 857.0, "text": " Yeah, but in the previous slide you had the opposite order is that.", "tokens": [50714, 865, 11, 457, 294, 264, 3894, 4137, 291, 632, 264, 6182, 1668, 307, 300, 13, 50964], "temperature": 0.0, "avg_logprob": -0.26737827207983994, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.08791528642177582}, {"id": 120, "seek": 84500, "start": 857.0, "end": 862.0, "text": " Well, so it will vary a lot between different architectures like you could alternate these different orders.", "tokens": [50964, 1042, 11, 370, 309, 486, 10559, 257, 688, 1296, 819, 6331, 1303, 411, 291, 727, 18873, 613, 819, 9470, 13, 51214], "temperature": 0.0, "avg_logprob": -0.26737827207983994, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.08791528642177582}, {"id": 121, "seek": 84500, "start": 862.0, "end": 867.0, "text": " And I did gloss over the detail of this is attention from an external question.", "tokens": [51214, 400, 286, 630, 19574, 670, 264, 2607, 295, 341, 307, 3202, 490, 364, 8320, 1168, 13, 51464], "temperature": 0.0, "avg_logprob": -0.26737827207983994, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.08791528642177582}, {"id": 122, "seek": 86700, "start": 868.0, "end": 875.0, "text": " But the more common thing is self attention where attention is coming from the image itself from the data itself.", "tokens": [50414, 583, 264, 544, 2689, 551, 307, 2698, 3202, 689, 3202, 307, 1348, 490, 264, 3256, 2564, 490, 264, 1412, 2564, 13, 50764], "temperature": 0.0, "avg_logprob": -0.086395080272968, "compression_ratio": 1.9203187250996017, "no_speech_prob": 0.0736437439918518}, {"id": 123, "seek": 86700, "start": 875.0, "end": 877.0, "text": " And that's.", "tokens": [50764, 400, 300, 311, 13, 50864], "temperature": 0.0, "avg_logprob": -0.086395080272968, "compression_ratio": 1.9203187250996017, "no_speech_prob": 0.0736437439918518}, {"id": 124, "seek": 86700, "start": 877.0, "end": 888.0, "text": " Okay, this is like attention from the question branch, but I could just have the data choose what in its own token sequence to attend to each token chooses which other tokens to attend to and that's called self attention.", "tokens": [50864, 1033, 11, 341, 307, 411, 3202, 490, 264, 1168, 9819, 11, 457, 286, 727, 445, 362, 264, 1412, 2826, 437, 294, 1080, 1065, 14862, 8310, 281, 6888, 281, 1184, 14862, 25963, 597, 661, 22667, 281, 6888, 281, 293, 300, 311, 1219, 2698, 3202, 13, 51414], "temperature": 0.0, "avg_logprob": -0.086395080272968, "compression_ratio": 1.9203187250996017, "no_speech_prob": 0.0736437439918518}, {"id": 125, "seek": 86700, "start": 888.0, "end": 896.0, "text": " That's like this picture here where this patch will decide what to attend to to get a better representation of that patch essentially.", "tokens": [51414, 663, 311, 411, 341, 3036, 510, 689, 341, 9972, 486, 4536, 437, 281, 6888, 281, 281, 483, 257, 1101, 10290, 295, 300, 9972, 4476, 13, 51814], "temperature": 0.0, "avg_logprob": -0.086395080272968, "compression_ratio": 1.9203187250996017, "no_speech_prob": 0.0736437439918518}, {"id": 126, "seek": 89600, "start": 896.0, "end": 912.0, "text": " Okay, so this is self attention really as opposed to you. That's why the dependency of the weights on the data is like this is attending to itself as opposed to attending f is not coming from some external source.", "tokens": [50364, 1033, 11, 370, 341, 307, 2698, 3202, 534, 382, 8851, 281, 291, 13, 663, 311, 983, 264, 33621, 295, 264, 17443, 322, 264, 1412, 307, 411, 341, 307, 15862, 281, 2564, 382, 8851, 281, 15862, 283, 307, 406, 1348, 490, 512, 8320, 4009, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1025059782428506, "compression_ratio": 1.699530516431925, "no_speech_prob": 0.0007319825235754251}, {"id": 127, "seek": 89600, "start": 912.0, "end": 922.0, "text": " Okay, so I think this is the last one just to connect it to one of the most common common demonstrations of transformers is to do sequence modeling.", "tokens": [51164, 1033, 11, 370, 286, 519, 341, 307, 264, 1036, 472, 445, 281, 1745, 309, 281, 472, 295, 264, 881, 2689, 2689, 34714, 295, 4088, 433, 307, 281, 360, 8310, 15983, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1025059782428506, "compression_ratio": 1.699530516431925, "no_speech_prob": 0.0007319825235754251}, {"id": 128, "seek": 92200, "start": 922.0, "end": 929.0, "text": " But really transformers are more about set to set operations, but you can you can represent a sequence as a set. So it's fine.", "tokens": [50364, 583, 534, 4088, 433, 366, 544, 466, 992, 281, 992, 7705, 11, 457, 291, 393, 291, 393, 2906, 257, 8310, 382, 257, 992, 13, 407, 309, 311, 2489, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1072362649320352, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.0049807289615273476}, {"id": 129, "seek": 92200, "start": 929.0, "end": 933.0, "text": " But, oh, oh, no, I think I got the wrong slide here.", "tokens": [50714, 583, 11, 1954, 11, 1954, 11, 572, 11, 286, 519, 286, 658, 264, 2085, 4137, 510, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1072362649320352, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.0049807289615273476}, {"id": 130, "seek": 92200, "start": 933.0, "end": 938.0, "text": " Let me pull up the right one.", "tokens": [50914, 961, 385, 2235, 493, 264, 558, 472, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1072362649320352, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.0049807289615273476}, {"id": 131, "seek": 92200, "start": 938.0, "end": 948.0, "text": " Yeah, this is what I wanted to show. Okay, so, so here's how it looks for doing next word prediction, and you can do next, you know,", "tokens": [51164, 865, 11, 341, 307, 437, 286, 1415, 281, 855, 13, 1033, 11, 370, 11, 370, 510, 311, 577, 309, 1542, 337, 884, 958, 1349, 17630, 11, 293, 291, 393, 360, 958, 11, 291, 458, 11, 51664], "temperature": 0.0, "avg_logprob": -0.1072362649320352, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.0049807289615273476}, {"id": 132, "seek": 94800, "start": 948.0, "end": 958.0, "text": " prediction and sequence of proteins or the next sound wave prediction, you next meeting prediction. That's really common framework. So we, this is like a one layer transformer.", "tokens": [50364, 17630, 293, 8310, 295, 15577, 420, 264, 958, 1626, 5772, 17630, 11, 291, 958, 3440, 17630, 13, 663, 311, 534, 2689, 8388, 13, 407, 321, 11, 341, 307, 411, 257, 472, 4583, 31782, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2575105968274568, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.06182801350951195}, {"id": 133, "seek": 94800, "start": 958.0, "end": 970.0, "text": " You know, we're going to say colorless green idea sleep, put that into the transformer we want to predict the blank, the words attend to each other, then you pass to this token wise nonlinearity, and then you make a prediction at the very end.", "tokens": [50864, 509, 458, 11, 321, 434, 516, 281, 584, 2017, 1832, 3092, 1558, 2817, 11, 829, 300, 666, 264, 31782, 321, 528, 281, 6069, 264, 8247, 11, 264, 2283, 6888, 281, 1184, 661, 11, 550, 291, 1320, 281, 341, 14862, 10829, 2107, 1889, 17409, 11, 293, 550, 291, 652, 257, 17630, 412, 264, 588, 917, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2575105968274568, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.06182801350951195}, {"id": 134, "seek": 97000, "start": 970.0, "end": 980.0, "text": " So just one example of what you have seen as transformers for sequences, but really transformers are more general and they're not just about sequence modeling. This is just one way you could use them.", "tokens": [50364, 407, 445, 472, 1365, 295, 437, 291, 362, 1612, 382, 4088, 433, 337, 22978, 11, 457, 534, 4088, 433, 366, 544, 2674, 293, 436, 434, 406, 445, 466, 8310, 15983, 13, 639, 307, 445, 472, 636, 291, 727, 764, 552, 13, 50864], "temperature": 0.0, "avg_logprob": -0.19508755084165594, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.05312785133719444}, {"id": 135, "seek": 97000, "start": 980.0, "end": 984.0, "text": " Okay, so that's the 10 minute overview of transformers.", "tokens": [50864, 1033, 11, 370, 300, 311, 264, 1266, 3456, 12492, 295, 4088, 433, 13, 51064], "temperature": 0.0, "avg_logprob": -0.19508755084165594, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.05312785133719444}, {"id": 136, "seek": 97000, "start": 984.0, "end": 989.0, "text": " Let's see, should we do questions or Brian, do you want to just jump right in. Maybe you do questions.", "tokens": [51064, 961, 311, 536, 11, 820, 321, 360, 1651, 420, 10765, 11, 360, 291, 528, 281, 445, 3012, 558, 294, 13, 2704, 291, 360, 1651, 13, 51314], "temperature": 0.0, "avg_logprob": -0.19508755084165594, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.05312785133719444}, {"id": 137, "seek": 97000, "start": 989.0, "end": 996.0, "text": " Okay, questions will Brian set up.", "tokens": [51314, 1033, 11, 1651, 486, 10765, 992, 493, 13, 51664], "temperature": 0.0, "avg_logprob": -0.19508755084165594, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.05312785133719444}, {"id": 138, "seek": 99600, "start": 996.0, "end": 1005.0, "text": " What is the history of these terms, you know, quest, query value.", "tokens": [50364, 708, 307, 264, 2503, 295, 613, 2115, 11, 291, 458, 11, 866, 11, 14581, 2158, 13, 50814], "temperature": 0.0, "avg_logprob": -0.19492878989567833, "compression_ratio": 1.5257142857142858, "no_speech_prob": 0.07310853898525238}, {"id": 139, "seek": 99600, "start": 1005.0, "end": 1015.0, "text": " So he's probably other people here know better than I do but I think it's all coming from the data retrieval database literature so you have a database where you have knowledge stored in kind of cells.", "tokens": [50814, 407, 415, 311, 1391, 661, 561, 510, 458, 1101, 813, 286, 360, 457, 286, 519, 309, 311, 439, 1348, 490, 264, 1412, 19817, 3337, 8149, 10394, 370, 291, 362, 257, 8149, 689, 291, 362, 3601, 12187, 294, 733, 295, 5438, 13, 51314], "temperature": 0.0, "avg_logprob": -0.19492878989567833, "compression_ratio": 1.5257142857142858, "no_speech_prob": 0.07310853898525238}, {"id": 140, "seek": 101500, "start": 1015.0, "end": 1023.0, "text": " And you can query that database you say I want to find things related to drafts.", "tokens": [50364, 400, 291, 393, 14581, 300, 8149, 291, 584, 286, 528, 281, 915, 721, 4077, 281, 11206, 82, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1307844122250875, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.14209626615047455}, {"id": 141, "seek": 101500, "start": 1023.0, "end": 1036.0, "text": " And then every cell will have like a label the key will be like this is a cell for mammals and this is a cell for drafts and here's a cell for plants, and you'll match the query to the key, and then the stuff inside the cell that you retrieve will be the value.", "tokens": [50764, 400, 550, 633, 2815, 486, 362, 411, 257, 7645, 264, 2141, 486, 312, 411, 341, 307, 257, 2815, 337, 35408, 293, 341, 307, 257, 2815, 337, 11206, 82, 293, 510, 311, 257, 2815, 337, 5972, 11, 293, 291, 603, 2995, 264, 14581, 281, 264, 2141, 11, 293, 550, 264, 1507, 1854, 264, 2815, 300, 291, 30254, 486, 312, 264, 2158, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1307844122250875, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.14209626615047455}, {"id": 142, "seek": 101500, "start": 1036.0, "end": 1041.0, "text": " So I think it's coming from that.", "tokens": [51414, 407, 286, 519, 309, 311, 1348, 490, 300, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1307844122250875, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.14209626615047455}, {"id": 143, "seek": 104100, "start": 1041.0, "end": 1050.0, "text": " This isn't like a fully formed question but I guess like in the framework of having question key value.", "tokens": [50364, 639, 1943, 380, 411, 257, 4498, 8693, 1168, 457, 286, 2041, 411, 294, 264, 8388, 295, 1419, 1168, 2141, 2158, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12415279919588113, "compression_ratio": 1.6767676767676767, "no_speech_prob": 0.08369966596364975}, {"id": 144, "seek": 104100, "start": 1050.0, "end": 1065.0, "text": " If, let's say the question was like what is the color of the turkey's head and for some reason, the turkey's head is like a feature that's complex enough that it won't, it can't be like well represented within a single question.", "tokens": [50814, 759, 11, 718, 311, 584, 264, 1168, 390, 411, 437, 307, 264, 2017, 295, 264, 21551, 311, 1378, 293, 337, 512, 1778, 11, 264, 21551, 311, 1378, 307, 411, 257, 4111, 300, 311, 3997, 1547, 300, 309, 1582, 380, 11, 309, 393, 380, 312, 411, 731, 10379, 1951, 257, 2167, 1168, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12415279919588113, "compression_ratio": 1.6767676767676767, "no_speech_prob": 0.08369966596364975}, {"id": 145, "seek": 106500, "start": 1065.0, "end": 1073.0, "text": " So is that like cause issues with like attending to the right thing or like waiting the right thing properly when", "tokens": [50364, 407, 307, 300, 411, 3082, 2663, 365, 411, 15862, 281, 264, 558, 551, 420, 411, 3806, 264, 558, 551, 6108, 562, 50764], "temperature": 0.0, "avg_logprob": -0.19836325585087644, "compression_ratio": 1.7881773399014778, "no_speech_prob": 0.043996717780828476}, {"id": 146, "seek": 106500, "start": 1073.0, "end": 1076.0, "text": " Yeah.", "tokens": [50764, 865, 13, 50914], "temperature": 0.0, "avg_logprob": -0.19836325585087644, "compression_ratio": 1.7881773399014778, "no_speech_prob": 0.043996717780828476}, {"id": 147, "seek": 106500, "start": 1076.0, "end": 1091.0, "text": " I suppose it could one one answer would be that you often do multi headed attention where you'll have, you'll take your sequence or your set of tokens and then you'll have K different query vectors and K different value vectors and K different", "tokens": [50914, 286, 7297, 309, 727, 472, 472, 1867, 576, 312, 300, 291, 2049, 360, 4825, 12798, 3202, 689, 291, 603, 362, 11, 291, 603, 747, 428, 8310, 420, 428, 992, 295, 22667, 293, 550, 291, 603, 362, 591, 819, 14581, 18875, 293, 591, 819, 2158, 18875, 293, 591, 819, 51664], "temperature": 0.0, "avg_logprob": -0.19836325585087644, "compression_ratio": 1.7881773399014778, "no_speech_prob": 0.043996717780828476}, {"id": 148, "seek": 109100, "start": 1091.0, "end": 1100.0, "text": " value vectors and each query can be asking a different type of you can say I want to match to the same color. Another one can say I want to match to the same geometry.", "tokens": [50364, 2158, 18875, 293, 1184, 14581, 393, 312, 3365, 257, 819, 2010, 295, 291, 393, 584, 286, 528, 281, 2995, 281, 264, 912, 2017, 13, 3996, 472, 393, 584, 286, 528, 281, 2995, 281, 264, 912, 18426, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2067145121466253, "compression_ratio": 1.8109243697478992, "no_speech_prob": 0.03048502467572689}, {"id": 149, "seek": 109100, "start": 1100.0, "end": 1114.0, "text": " And, you know, when you optimize the parameters of this network it will somehow, you know, self organize that, well, it's useful to factor things into geometry and color then there'll be one attention head that cares about color and one that cares about geometry.", "tokens": [50814, 400, 11, 291, 458, 11, 562, 291, 19719, 264, 9834, 295, 341, 3209, 309, 486, 6063, 11, 291, 458, 11, 2698, 13859, 300, 11, 731, 11, 309, 311, 4420, 281, 5952, 721, 666, 18426, 293, 2017, 550, 456, 603, 312, 472, 3202, 1378, 300, 12310, 466, 2017, 293, 472, 300, 12310, 466, 18426, 13, 51514], "temperature": 0.0, "avg_logprob": -0.2067145121466253, "compression_ratio": 1.8109243697478992, "no_speech_prob": 0.03048502467572689}, {"id": 150, "seek": 111400, "start": 1114.0, "end": 1121.0, "text": " I'm just one quick thing on the transformer architecture and the non linearity.", "tokens": [50364, 286, 478, 445, 472, 1702, 551, 322, 264, 31782, 9482, 293, 264, 2107, 8213, 507, 13, 50714], "temperature": 0.0, "avg_logprob": -0.24501378348704134, "compression_ratio": 1.646788990825688, "no_speech_prob": 0.26765695214271545}, {"id": 151, "seek": 111400, "start": 1121.0, "end": 1129.0, "text": " If I recall correctly you do a normalization of each token right intuition for that why do you do that.", "tokens": [50714, 759, 286, 9901, 8944, 291, 360, 257, 2710, 2144, 295, 1184, 14862, 558, 24002, 337, 300, 983, 360, 291, 360, 300, 13, 51114], "temperature": 0.0, "avg_logprob": -0.24501378348704134, "compression_ratio": 1.646788990825688, "no_speech_prob": 0.26765695214271545}, {"id": 152, "seek": 111400, "start": 1129.0, "end": 1133.0, "text": " I haven't seen that too much before transformers.", "tokens": [51114, 286, 2378, 380, 1612, 300, 886, 709, 949, 4088, 433, 13, 51314], "temperature": 0.0, "avg_logprob": -0.24501378348704134, "compression_ratio": 1.646788990825688, "no_speech_prob": 0.26765695214271545}, {"id": 153, "seek": 111400, "start": 1133.0, "end": 1142.0, "text": " Yeah, that's a great question so so normally you want your weighted sum to add up to one. So the weight should add up to one.", "tokens": [51314, 865, 11, 300, 311, 257, 869, 1168, 370, 370, 5646, 291, 528, 428, 32807, 2408, 281, 909, 493, 281, 472, 13, 407, 264, 3364, 820, 909, 493, 281, 472, 13, 51764], "temperature": 0.0, "avg_logprob": -0.24501378348704134, "compression_ratio": 1.646788990825688, "no_speech_prob": 0.26765695214271545}, {"id": 154, "seek": 114200, "start": 1142.0, "end": 1154.0, "text": " People do that. I treat that via the softmax over the weights. Yeah, is that we're referring to. Yeah, no I'm not referring to post the residual connection you do as part of the right before that.", "tokens": [50364, 3432, 360, 300, 13, 286, 2387, 300, 5766, 264, 2787, 41167, 670, 264, 17443, 13, 865, 11, 307, 300, 321, 434, 13761, 281, 13, 865, 11, 572, 286, 478, 406, 13761, 281, 2183, 264, 27980, 4984, 291, 360, 382, 644, 295, 264, 558, 949, 300, 13, 50964], "temperature": 0.0, "avg_logprob": -0.2868297990546169, "compression_ratio": 1.704225352112676, "no_speech_prob": 0.027143383398652077}, {"id": 155, "seek": 114200, "start": 1154.0, "end": 1163.0, "text": " Other layer norms. So, okay my understanding of transformers has progressed to the level of tokens and attention and all the rest layer norm and residual connections.", "tokens": [50964, 5358, 4583, 24357, 13, 407, 11, 1392, 452, 3701, 295, 4088, 433, 575, 36789, 281, 264, 1496, 295, 22667, 293, 3202, 293, 439, 264, 1472, 4583, 2026, 293, 27980, 9271, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2868297990546169, "compression_ratio": 1.704225352112676, "no_speech_prob": 0.027143383398652077}, {"id": 156, "seek": 116300, "start": 1163.0, "end": 1172.0, "text": " At this point I don't rock it I don't I don't know why that feels kind of like tricks that usually help neural networks train it's good to normalize things is good to have principles.", "tokens": [50364, 1711, 341, 935, 286, 500, 380, 3727, 309, 286, 500, 380, 286, 500, 380, 458, 983, 300, 3417, 733, 295, 411, 11733, 300, 2673, 854, 18161, 9590, 3847, 309, 311, 665, 281, 2710, 1125, 721, 307, 665, 281, 362, 9156, 13, 50814], "temperature": 0.0, "avg_logprob": -0.24152849305350826, "compression_ratio": 1.7434944237918215, "no_speech_prob": 0.5730541348457336}, {"id": 157, "seek": 116300, "start": 1172.0, "end": 1179.0, "text": " I don't see anything. I haven't noticed that anything specific to transformers about those ideas yet. They're generally useful tricks. Okay.", "tokens": [50814, 286, 500, 380, 536, 1340, 13, 286, 2378, 380, 5694, 300, 1340, 2685, 281, 4088, 433, 466, 729, 3487, 1939, 13, 814, 434, 5101, 4420, 11733, 13, 1033, 13, 51164], "temperature": 0.0, "avg_logprob": -0.24152849305350826, "compression_ratio": 1.7434944237918215, "no_speech_prob": 0.5730541348457336}, {"id": 158, "seek": 116300, "start": 1179.0, "end": 1187.0, "text": " Transformers are very hard to train especially like several later ones like 12 and up if you don't have like residual connections or layer norm.", "tokens": [51164, 27938, 433, 366, 588, 1152, 281, 3847, 2318, 411, 2940, 1780, 2306, 411, 2272, 293, 493, 498, 291, 500, 380, 362, 411, 27980, 9271, 420, 4583, 2026, 13, 51564], "temperature": 0.0, "avg_logprob": -0.24152849305350826, "compression_ratio": 1.7434944237918215, "no_speech_prob": 0.5730541348457336}, {"id": 159, "seek": 118700, "start": 1188.0, "end": 1192.0, "text": " Okay, the training isn't very stable.", "tokens": [50414, 1033, 11, 264, 3097, 1943, 380, 588, 8351, 13, 50614], "temperature": 0.0, "avg_logprob": -0.264009251314051, "compression_ratio": 1.5172413793103448, "no_speech_prob": 0.01968485303223133}, {"id": 160, "seek": 118700, "start": 1192.0, "end": 1198.0, "text": " So it's not it's not. Yeah, also this attention between multiplication.", "tokens": [50614, 407, 309, 311, 406, 309, 311, 406, 13, 865, 11, 611, 341, 3202, 1296, 27290, 13, 50914], "temperature": 0.0, "avg_logprob": -0.264009251314051, "compression_ratio": 1.5172413793103448, "no_speech_prob": 0.01968485303223133}, {"id": 161, "seek": 118700, "start": 1198.0, "end": 1203.0, "text": " And that might not be as stable as normal non intentional layers just do addition.", "tokens": [50914, 400, 300, 1062, 406, 312, 382, 8351, 382, 2710, 2107, 21935, 7914, 445, 360, 4500, 13, 51164], "temperature": 0.0, "avg_logprob": -0.264009251314051, "compression_ratio": 1.5172413793103448, "no_speech_prob": 0.01968485303223133}, {"id": 162, "seek": 118700, "start": 1203.0, "end": 1210.0, "text": " That's the softmax right the softmax can probably help with that. Yeah.", "tokens": [51164, 663, 311, 264, 2787, 41167, 558, 264, 2787, 41167, 393, 1391, 854, 365, 300, 13, 865, 13, 51514], "temperature": 0.0, "avg_logprob": -0.264009251314051, "compression_ratio": 1.5172413793103448, "no_speech_prob": 0.01968485303223133}, {"id": 163, "seek": 121000, "start": 1210.0, "end": 1219.0, "text": " So how do you decide what patches to use for instance the image or the text you also had like what seemed to be arbitrary.", "tokens": [50364, 407, 577, 360, 291, 4536, 437, 26531, 281, 764, 337, 5197, 264, 3256, 420, 264, 2487, 291, 611, 632, 411, 437, 6576, 281, 312, 23211, 13, 50814], "temperature": 0.0, "avg_logprob": -0.157591350743028, "compression_ratio": 1.773851590106007, "no_speech_prob": 0.07579383254051208}, {"id": 164, "seek": 121000, "start": 1219.0, "end": 1221.0, "text": " Yeah, segmentation of the data.", "tokens": [50814, 865, 11, 9469, 399, 295, 264, 1412, 13, 50914], "temperature": 0.0, "avg_logprob": -0.157591350743028, "compression_ratio": 1.773851590106007, "no_speech_prob": 0.07579383254051208}, {"id": 165, "seek": 121000, "start": 1221.0, "end": 1230.0, "text": " Yeah, that's a great question. How like how do you do the tokenization like how do you design that I think it's super hacky right now so that feels like somewhere that people could do a lot of work.", "tokens": [50914, 865, 11, 300, 311, 257, 869, 1168, 13, 1012, 411, 577, 360, 291, 360, 264, 14862, 2144, 411, 577, 360, 291, 1715, 300, 286, 519, 309, 311, 1687, 10339, 88, 558, 586, 370, 300, 3417, 411, 4079, 300, 561, 727, 360, 257, 688, 295, 589, 13, 51364], "temperature": 0.0, "avg_logprob": -0.157591350743028, "compression_ratio": 1.773851590106007, "no_speech_prob": 0.07579383254051208}, {"id": 166, "seek": 121000, "start": 1230.0, "end": 1236.0, "text": " One thing that does seem to happen is that the smaller you make your tokens if you have tokens that are a single pixel it's just the better you get.", "tokens": [51364, 1485, 551, 300, 775, 1643, 281, 1051, 307, 300, 264, 4356, 291, 652, 428, 22667, 498, 291, 362, 22667, 300, 366, 257, 2167, 19261, 309, 311, 445, 264, 1101, 291, 483, 13, 51664], "temperature": 0.0, "avg_logprob": -0.157591350743028, "compression_ratio": 1.773851590106007, "no_speech_prob": 0.07579383254051208}, {"id": 167, "seek": 123600, "start": 1237.0, "end": 1240.0, "text": " Maybe the", "tokens": [50414, 2704, 264, 50564], "temperature": 0.0, "avg_logprob": -0.1264310540824101, "compression_ratio": 1.5548780487804879, "no_speech_prob": 0.0071198055520653725}, {"id": 168, "seek": 123600, "start": 1240.0, "end": 1253.0, "text": " what will happen is we'll just stop having clever tokenizations and just go down to whatever the atomic units of the data are like a single character a single pixel and that that just makes a choice for us because you can't go below that really.", "tokens": [50564, 437, 486, 1051, 307, 321, 603, 445, 1590, 1419, 13494, 14862, 14455, 293, 445, 352, 760, 281, 2035, 264, 22275, 6815, 295, 264, 1412, 366, 411, 257, 2167, 2517, 257, 2167, 19261, 293, 300, 300, 445, 1669, 257, 3922, 337, 505, 570, 291, 393, 380, 352, 2507, 300, 534, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1264310540824101, "compression_ratio": 1.5548780487804879, "no_speech_prob": 0.0071198055520653725}, {"id": 169, "seek": 125300, "start": 1253.0, "end": 1259.0, "text": " I think the smaller envision transformers the thing I've seen is that the smaller the tokens are the better they tend to perform.", "tokens": [50364, 286, 519, 264, 4356, 24739, 4088, 433, 264, 551, 286, 600, 1612, 307, 300, 264, 4356, 264, 22667, 366, 264, 1101, 436, 3928, 281, 2042, 13, 50664], "temperature": 0.0, "avg_logprob": -0.21933589183108906, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.13288909196853638}, {"id": 170, "seek": 125300, "start": 1259.0, "end": 1270.0, "text": " But because the attention mechanism is every token it tends to every token it's like n squared if you make the tokens too small, there's too many tokens and then you run out of memory.", "tokens": [50664, 583, 570, 264, 3202, 7513, 307, 633, 14862, 309, 12258, 281, 633, 14862, 309, 311, 411, 297, 8889, 498, 291, 652, 264, 22667, 886, 1359, 11, 456, 311, 886, 867, 22667, 293, 550, 291, 1190, 484, 295, 4675, 13, 51214], "temperature": 0.0, "avg_logprob": -0.21933589183108906, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.13288909196853638}, {"id": 171, "seek": 127000, "start": 1270.0, "end": 1291.0, "text": " So there's probably clever tokenization schemes like super pixels or segmentation or in language spaders, you know, a lot of tokenization schemes that are like bite code by parent coding is the name of one and work that that could be used that as your first tokenization layer.", "tokens": [50364, 407, 456, 311, 1391, 13494, 14862, 2144, 26954, 411, 1687, 18668, 420, 9469, 399, 420, 294, 2856, 637, 15221, 11, 291, 458, 11, 257, 688, 295, 14862, 2144, 26954, 300, 366, 411, 7988, 3089, 538, 2596, 17720, 307, 264, 1315, 295, 472, 293, 589, 300, 300, 727, 312, 1143, 300, 382, 428, 700, 14862, 2144, 4583, 13, 51414], "temperature": 0.0, "avg_logprob": -0.23272702663759642, "compression_ratio": 1.642512077294686, "no_speech_prob": 0.09528885036706924}, {"id": 172, "seek": 127000, "start": 1291.0, "end": 1294.0, "text": " But yeah that feels like a kind of hacky area right now to me.", "tokens": [51414, 583, 1338, 300, 3417, 411, 257, 733, 295, 10339, 88, 1859, 558, 586, 281, 385, 13, 51564], "temperature": 0.0, "avg_logprob": -0.23272702663759642, "compression_ratio": 1.642512077294686, "no_speech_prob": 0.09528885036706924}, {"id": 173, "seek": 129400, "start": 1294.0, "end": 1306.0, "text": " I can try to usually leverage at least some degree of topology by tokenizing it that respects you know spatial coordinates for images or yeah language order for words.", "tokens": [50364, 286, 393, 853, 281, 2673, 13982, 412, 1935, 512, 4314, 295, 1192, 1793, 538, 14862, 3319, 309, 300, 24126, 291, 458, 23598, 21056, 337, 5267, 420, 1338, 2856, 1668, 337, 2283, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13386407228979733, "compression_ratio": 1.8246268656716418, "no_speech_prob": 0.025153305381536484}, {"id": 174, "seek": 129400, "start": 1306.0, "end": 1315.0, "text": " Because like there's also something called positioning coding, which gives you knowledge about the topology of why this element is in this position versus other position.", "tokens": [50964, 1436, 411, 456, 311, 611, 746, 1219, 26381, 17720, 11, 597, 2709, 291, 3601, 466, 264, 1192, 1793, 295, 983, 341, 4478, 307, 294, 341, 2535, 5717, 661, 2535, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13386407228979733, "compression_ratio": 1.8246268656716418, "no_speech_prob": 0.025153305381536484}, {"id": 175, "seek": 129400, "start": 1315.0, "end": 1323.0, "text": " And that tells you a lot about you know the structure of the image or at least where this token is with respect to the overall structure of the image.", "tokens": [51414, 400, 300, 5112, 291, 257, 688, 466, 291, 458, 264, 3877, 295, 264, 3256, 420, 412, 1935, 689, 341, 14862, 307, 365, 3104, 281, 264, 4787, 3877, 295, 264, 3256, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13386407228979733, "compression_ratio": 1.8246268656716418, "no_speech_prob": 0.025153305381536484}, {"id": 176, "seek": 132300, "start": 1323.0, "end": 1333.0, "text": " Yeah, and then another thing that seems missing right now is people usually envision transformers which I'm most familiar with they usually break into non overlapping tokens.", "tokens": [50364, 865, 11, 293, 550, 1071, 551, 300, 2544, 5361, 558, 586, 307, 561, 2673, 24739, 4088, 433, 597, 286, 478, 881, 4963, 365, 436, 2673, 1821, 666, 2107, 33535, 22667, 13, 50864], "temperature": 0.0, "avg_logprob": -0.16990826047700028, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.01427195593714714}, {"id": 177, "seek": 132300, "start": 1333.0, "end": 1347.0, "text": " But we know from continents and like single processing that you'll get a time of aliasing and like the filtering operations if you have these huge strides you're breaking it non overlapping patches you really would want to have overlapping patches or blur the signal.", "tokens": [50864, 583, 321, 458, 490, 38598, 293, 411, 2167, 9007, 300, 291, 603, 483, 257, 565, 295, 10198, 3349, 293, 411, 264, 30822, 7705, 498, 291, 362, 613, 2603, 1056, 1875, 291, 434, 7697, 309, 2107, 33535, 26531, 291, 534, 576, 528, 281, 362, 33535, 26531, 420, 14257, 264, 6358, 13, 51564], "temperature": 0.0, "avg_logprob": -0.16990826047700028, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.01427195593714714}, {"id": 178, "seek": 134700, "start": 1347.0, "end": 1353.0, "text": " So all that single processing stuff I think it's been kind of thrown away and probably it's a good idea to put it back in there.", "tokens": [50364, 407, 439, 300, 2167, 9007, 1507, 286, 519, 309, 311, 668, 733, 295, 11732, 1314, 293, 1391, 309, 311, 257, 665, 1558, 281, 829, 309, 646, 294, 456, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13794740410738213, "compression_ratio": 1.5701357466063348, "no_speech_prob": 0.0684378445148468}, {"id": 179, "seek": 134700, "start": 1353.0, "end": 1355.0, "text": " Someone has tried overlapping patches.", "tokens": [50664, 8734, 575, 3031, 33535, 26531, 13, 50764], "temperature": 0.0, "avg_logprob": -0.13794740410738213, "compression_ratio": 1.5701357466063348, "no_speech_prob": 0.0684378445148468}, {"id": 180, "seek": 134700, "start": 1355.0, "end": 1356.0, "text": " And it does help.", "tokens": [50764, 400, 309, 775, 854, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13794740410738213, "compression_ratio": 1.5701357466063348, "no_speech_prob": 0.0684378445148468}, {"id": 181, "seek": 134700, "start": 1356.0, "end": 1364.0, "text": " And, and by the way everything I say like, as you probably know there's 10,000 transformer papers now so I'm sure everything that you can imagine has been tried.", "tokens": [50814, 400, 11, 293, 538, 264, 636, 1203, 286, 584, 411, 11, 382, 291, 1391, 458, 456, 311, 1266, 11, 1360, 31782, 10577, 586, 370, 286, 478, 988, 1203, 300, 291, 393, 3811, 575, 668, 3031, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13794740410738213, "compression_ratio": 1.5701357466063348, "no_speech_prob": 0.0684378445148468}, {"id": 182, "seek": 136400, "start": 1364.0, "end": 1381.0, "text": " So the part about working with sequences versus sets confused me a little bit and this relates to position and coding so I think it is important when you send these tokens to the transformer to actually inform it where it is in the sequence so", "tokens": [50364, 407, 264, 644, 466, 1364, 365, 22978, 5717, 6352, 9019, 385, 257, 707, 857, 293, 341, 16155, 281, 2535, 293, 17720, 370, 286, 519, 309, 307, 1021, 562, 291, 2845, 613, 22667, 281, 264, 31782, 281, 767, 1356, 309, 689, 309, 307, 294, 264, 8310, 370, 51214], "temperature": 0.0, "avg_logprob": -0.17028915405273437, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.16822342574596405}, {"id": 183, "seek": 138100, "start": 1381.0, "end": 1387.0, "text": " transformers operates and sequences or sets like how like I'm,", "tokens": [50364, 4088, 433, 22577, 293, 22978, 420, 6352, 411, 577, 411, 286, 478, 11, 50664], "temperature": 0.0, "avg_logprob": -0.31789786727340136, "compression_ratio": 1.3383458646616542, "no_speech_prob": 0.09259631484746933}, {"id": 184, "seek": 138100, "start": 1387.0, "end": 1390.0, "text": " Brian do you mind if I pull the slides over one more time.", "tokens": [50664, 10765, 360, 291, 1575, 498, 286, 2235, 264, 9788, 670, 472, 544, 565, 13, 50814], "temperature": 0.0, "avg_logprob": -0.31789786727340136, "compression_ratio": 1.3383458646616542, "no_speech_prob": 0.09259631484746933}, {"id": 185, "seek": 138100, "start": 1390.0, "end": 1395.0, "text": " I do have some slides that I can clarify that.", "tokens": [50814, 286, 360, 362, 512, 9788, 300, 286, 393, 17594, 300, 13, 51064], "temperature": 0.0, "avg_logprob": -0.31789786727340136, "compression_ratio": 1.3383458646616542, "no_speech_prob": 0.09259631484746933}, {"id": 186, "seek": 138100, "start": 1395.0, "end": 1398.0, "text": " So,", "tokens": [51064, 407, 11, 51214], "temperature": 0.0, "avg_logprob": -0.31789786727340136, "compression_ratio": 1.3383458646616542, "no_speech_prob": 0.09259631484746933}, {"id": 187, "seek": 138100, "start": 1398.0, "end": 1400.0, "text": " yeah.", "tokens": [51214, 1338, 13, 51314], "temperature": 0.0, "avg_logprob": -0.31789786727340136, "compression_ratio": 1.3383458646616542, "no_speech_prob": 0.09259631484746933}, {"id": 188, "seek": 140000, "start": 1400.0, "end": 1413.0, "text": " So the positional encoding which I think is the like third big idea of transformers but it's been used in other contexts too so maybe it's not just about transformers but if you have a component and you don't want it to be invariant to shift", "tokens": [50364, 407, 264, 2535, 304, 43430, 597, 286, 519, 307, 264, 411, 2636, 955, 1558, 295, 4088, 433, 457, 309, 311, 668, 1143, 294, 661, 30628, 886, 370, 1310, 309, 311, 406, 445, 466, 4088, 433, 457, 498, 291, 362, 257, 6542, 293, 291, 500, 380, 528, 309, 281, 312, 33270, 394, 281, 5513, 51014], "temperature": 0.0, "avg_logprob": -0.2058813462563611, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.43710970878601074}, {"id": 189, "seek": 140000, "start": 1413.0, "end": 1428.0, "text": " convolution shift invariant, you can just tell it till the filter where you are by adding this positional code to, I can just say you know at the bottom right of the image and then my mapping will end up being conditioned on the position.", "tokens": [51014, 45216, 5513, 33270, 394, 11, 291, 393, 445, 980, 309, 4288, 264, 6608, 689, 291, 366, 538, 5127, 341, 2535, 304, 3089, 281, 11, 286, 393, 445, 584, 291, 458, 412, 264, 2767, 558, 295, 264, 3256, 293, 550, 452, 18350, 486, 917, 493, 885, 35833, 322, 264, 2535, 13, 51764], "temperature": 0.0, "avg_logprob": -0.2058813462563611, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.43710970878601074}, {"id": 190, "seek": 142800, "start": 1428.0, "end": 1433.0, "text": " So transformers is the same thing I can tell you, you can tell you where the token comes from.", "tokens": [50364, 407, 4088, 433, 307, 264, 912, 551, 286, 393, 980, 291, 11, 291, 393, 980, 291, 689, 264, 14862, 1487, 490, 13, 50614], "temperature": 0.0, "avg_logprob": -0.16179002717483876, "compression_ratio": 1.736318407960199, "no_speech_prob": 0.0627218708395958}, {"id": 191, "seek": 142800, "start": 1433.0, "end": 1442.0, "text": " And if you do that then you do get sequential, you are modeling the sequence because you're telling the token you know I'm the first item in the sequence or the second item.", "tokens": [50614, 400, 498, 291, 360, 300, 550, 291, 360, 483, 42881, 11, 291, 366, 15983, 264, 8310, 570, 291, 434, 3585, 264, 14862, 291, 458, 286, 478, 264, 700, 3174, 294, 264, 8310, 420, 264, 1150, 3174, 13, 51064], "temperature": 0.0, "avg_logprob": -0.16179002717483876, "compression_ratio": 1.736318407960199, "no_speech_prob": 0.0627218708395958}, {"id": 192, "seek": 142800, "start": 1442.0, "end": 1451.0, "text": " If you don't do that, then you have the property of permutation, equal variance.", "tokens": [51064, 759, 291, 500, 380, 360, 300, 11, 550, 291, 362, 264, 4707, 295, 4784, 11380, 11, 2681, 21977, 13, 51514], "temperature": 0.0, "avg_logprob": -0.16179002717483876, "compression_ratio": 1.736318407960199, "no_speech_prob": 0.0627218708395958}, {"id": 193, "seek": 145100, "start": 1451.0, "end": 1458.0, "text": " That's why I said it's really a set to set operation. So if you don't tell the tokens where they come from, you don't give them positional codes.", "tokens": [50364, 663, 311, 983, 286, 848, 309, 311, 534, 257, 992, 281, 992, 6916, 13, 407, 498, 291, 500, 380, 980, 264, 22667, 689, 436, 808, 490, 11, 291, 500, 380, 976, 552, 2535, 304, 14211, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11567767320481022, "compression_ratio": 1.8366533864541832, "no_speech_prob": 0.4031662046909332}, {"id": 194, "seek": 145100, "start": 1458.0, "end": 1465.0, "text": " Then if I take the tokens on the input layer and I permute them into any order, I will simply permute the tokens on the output layer.", "tokens": [50714, 1396, 498, 286, 747, 264, 22667, 322, 264, 4846, 4583, 293, 286, 4784, 1169, 552, 666, 604, 1668, 11, 286, 486, 2935, 4784, 1169, 264, 22667, 322, 264, 5598, 4583, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11567767320481022, "compression_ratio": 1.8366533864541832, "no_speech_prob": 0.4031662046909332}, {"id": 195, "seek": 145100, "start": 1465.0, "end": 1468.0, "text": " The mapping will be the same after permutation.", "tokens": [51064, 440, 18350, 486, 312, 264, 912, 934, 4784, 11380, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11567767320481022, "compression_ratio": 1.8366533864541832, "no_speech_prob": 0.4031662046909332}, {"id": 196, "seek": 145100, "start": 1468.0, "end": 1475.0, "text": " It takes a little thinking to see why that's true but essentially the reason is because the attention layer is permutation invariant.", "tokens": [51214, 467, 2516, 257, 707, 1953, 281, 536, 983, 300, 311, 2074, 457, 4476, 264, 1778, 307, 570, 264, 3202, 4583, 307, 4784, 11380, 33270, 394, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11567767320481022, "compression_ratio": 1.8366533864541832, "no_speech_prob": 0.4031662046909332}, {"id": 197, "seek": 147500, "start": 1476.0, "end": 1483.0, "text": " The way self attention works is it looks at the color of this and the color of that and it makes a similarity comparison.", "tokens": [50414, 440, 636, 2698, 3202, 1985, 307, 309, 1542, 412, 264, 2017, 295, 341, 293, 264, 2017, 295, 300, 293, 309, 1669, 257, 32194, 9660, 13, 50764], "temperature": 0.0, "avg_logprob": -0.14494205274079974, "compression_ratio": 1.7816593886462881, "no_speech_prob": 0.1459442675113678}, {"id": 198, "seek": 147500, "start": 1483.0, "end": 1496.0, "text": " And then the weight of the weighted sum that goes to here is just going to be something about the similarity between the color, the query and the key of this.", "tokens": [50764, 400, 550, 264, 3364, 295, 264, 32807, 2408, 300, 1709, 281, 510, 307, 445, 516, 281, 312, 746, 466, 264, 32194, 1296, 264, 2017, 11, 264, 14581, 293, 264, 2141, 295, 341, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14494205274079974, "compression_ratio": 1.7816593886462881, "no_speech_prob": 0.1459442675113678}, {"id": 199, "seek": 147500, "start": 1496.0, "end": 1503.0, "text": " So no matter where you move that edge around, as long as the input and output are orange and blue, it will get the same weight.", "tokens": [51414, 407, 572, 1871, 689, 291, 1286, 300, 4691, 926, 11, 382, 938, 382, 264, 4846, 293, 5598, 366, 7671, 293, 3344, 11, 309, 486, 483, 264, 912, 3364, 13, 51764], "temperature": 0.0, "avg_logprob": -0.14494205274079974, "compression_ratio": 1.7816593886462881, "no_speech_prob": 0.1459442675113678}, {"id": 200, "seek": 150300, "start": 1503.0, "end": 1507.0, "text": " You can kind of work it out and see that attention is permutation invariant.", "tokens": [50364, 509, 393, 733, 295, 589, 309, 484, 293, 536, 300, 3202, 307, 4784, 11380, 33270, 394, 13, 50564], "temperature": 0.0, "avg_logprob": -0.14665770289873836, "compression_ratio": 1.7844827586206897, "no_speech_prob": 0.007715505547821522}, {"id": 201, "seek": 150300, "start": 1507.0, "end": 1511.0, "text": " The token whites operator is point wise. That's permutation invariant too.", "tokens": [50564, 440, 14862, 21909, 12973, 307, 935, 10829, 13, 663, 311, 4784, 11380, 33270, 394, 886, 13, 50764], "temperature": 0.0, "avg_logprob": -0.14665770289873836, "compression_ratio": 1.7844827586206897, "no_speech_prob": 0.007715505547821522}, {"id": 202, "seek": 150300, "start": 1511.0, "end": 1516.0, "text": " And then that means that the whole transformers are permutation invariant function.", "tokens": [50764, 400, 550, 300, 1355, 300, 264, 1379, 4088, 433, 366, 4784, 11380, 33270, 394, 2445, 13, 51014], "temperature": 0.0, "avg_logprob": -0.14665770289873836, "compression_ratio": 1.7844827586206897, "no_speech_prob": 0.007715505547821522}, {"id": 203, "seek": 150300, "start": 1516.0, "end": 1521.0, "text": " And you can make it model sequences by telling it the position of every token in that set.", "tokens": [51014, 400, 291, 393, 652, 309, 2316, 22978, 538, 3585, 309, 264, 2535, 295, 633, 14862, 294, 300, 992, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14665770289873836, "compression_ratio": 1.7844827586206897, "no_speech_prob": 0.007715505547821522}, {"id": 204, "seek": 150300, "start": 1521.0, "end": 1530.0, "text": " But if you don't have positioning coding, it's more appropriate for set to set mapping.", "tokens": [51264, 583, 498, 291, 500, 380, 362, 26381, 17720, 11, 309, 311, 544, 6854, 337, 992, 281, 992, 18350, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14665770289873836, "compression_ratio": 1.7844827586206897, "no_speech_prob": 0.007715505547821522}, {"id": 205, "seek": 153000, "start": 1530.0, "end": 1550.0, "text": " One more question or comment is you started with the idea of tokens, but just a few sentences before you said that something that to me sounds like the idea of tokens is rather weekend that the transformers work better when you have individual bits of data like pixels.", "tokens": [50364, 1485, 544, 1168, 420, 2871, 307, 291, 1409, 365, 264, 1558, 295, 22667, 11, 457, 445, 257, 1326, 16579, 949, 291, 848, 300, 746, 300, 281, 385, 3263, 411, 264, 1558, 295, 22667, 307, 2831, 6711, 300, 264, 4088, 433, 589, 1101, 562, 291, 362, 2609, 9239, 295, 1412, 411, 18668, 13, 51364], "temperature": 0.0, "avg_logprob": -0.14747757571084158, "compression_ratio": 1.6011904761904763, "no_speech_prob": 0.01283273659646511}, {"id": 206, "seek": 155000, "start": 1550.0, "end": 1573.0, "text": " So it feels to me that the idea of tokens is not really essential in the whole concept to work, but that tension is the most critical part and the idea that being able to attend dynamically anywhere in the picture if it is visual data is the idea that gives power in these algorithms, not the token percent.", "tokens": [50364, 407, 309, 3417, 281, 385, 300, 264, 1558, 295, 22667, 307, 406, 534, 7115, 294, 264, 1379, 3410, 281, 589, 11, 457, 300, 8980, 307, 264, 881, 4924, 644, 293, 264, 1558, 300, 885, 1075, 281, 6888, 43492, 4992, 294, 264, 3036, 498, 309, 307, 5056, 1412, 307, 264, 1558, 300, 2709, 1347, 294, 613, 14642, 11, 406, 264, 14862, 3043, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14867556372354196, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.07546918094158173}, {"id": 207, "seek": 155000, "start": 1573.0, "end": 1577.0, "text": " Yeah, I don't know. And I think that's kind of the open debate.", "tokens": [51514, 865, 11, 286, 500, 380, 458, 13, 400, 286, 519, 300, 311, 733, 295, 264, 1269, 7958, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14867556372354196, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.07546918094158173}, {"id": 208, "seek": 157700, "start": 1577.0, "end": 1579.0, "text": " Yeah, fun to keep discussing.", "tokens": [50364, 865, 11, 1019, 281, 1066, 10850, 13, 50464], "temperature": 0.0, "avg_logprob": -0.13307671732716747, "compression_ratio": 1.6036866359447004, "no_speech_prob": 0.06271165609359741}, {"id": 209, "seek": 157700, "start": 1579.0, "end": 1592.0, "text": " So I think the field is kind of split right now between people thinking that it's the tokens and the vector encapsulated vectors that are important to this versus the attention and really look at you just have an intentional mechanism.", "tokens": [50464, 407, 286, 519, 264, 2519, 307, 733, 295, 7472, 558, 586, 1296, 561, 1953, 300, 309, 311, 264, 22667, 293, 264, 8062, 38745, 6987, 18875, 300, 366, 1021, 281, 341, 5717, 264, 3202, 293, 534, 574, 412, 291, 445, 362, 364, 21935, 7513, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13307671732716747, "compression_ratio": 1.6036866359447004, "no_speech_prob": 0.06271165609359741}, {"id": 210, "seek": 157700, "start": 1592.0, "end": 1596.0, "text": " It can still be operating over neurons. It doesn't really have to be about tokens.", "tokens": [51114, 467, 393, 920, 312, 7447, 670, 22027, 13, 467, 1177, 380, 534, 362, 281, 312, 466, 22667, 13, 51314], "temperature": 0.0, "avg_logprob": -0.13307671732716747, "compression_ratio": 1.6036866359447004, "no_speech_prob": 0.06271165609359741}, {"id": 211, "seek": 159600, "start": 1596.0, "end": 1612.0, "text": " I feel like both probably are important to the success. But one, one counter example to that attention matters is there are these other architectures now sometimes called like MLP mixers, one architecture in this family, which uses tokens and not attention.", "tokens": [50364, 286, 841, 411, 1293, 1391, 366, 1021, 281, 264, 2245, 13, 583, 472, 11, 472, 5682, 1365, 281, 300, 3202, 7001, 307, 456, 366, 613, 661, 6331, 1303, 586, 2171, 1219, 411, 21601, 47, 2890, 433, 11, 472, 9482, 294, 341, 1605, 11, 597, 4960, 22667, 293, 406, 3202, 13, 51164], "temperature": 0.0, "avg_logprob": -0.24351421991984049, "compression_ratio": 1.5207100591715976, "no_speech_prob": 0.25651928782463074}, {"id": 212, "seek": 161200, "start": 1612.0, "end": 1625.0, "text": " So it's basically a component over tokens, one by one comms over tokens. They call it MLP.com and that's super confusing. But anyway, we're going to get the terminology because these things are all just like small transformations in each other.", "tokens": [50364, 407, 309, 311, 1936, 257, 6542, 670, 22667, 11, 472, 538, 472, 800, 82, 670, 22667, 13, 814, 818, 309, 21601, 47, 13, 1112, 293, 300, 311, 1687, 13181, 13, 583, 4033, 11, 321, 434, 516, 281, 483, 264, 27575, 570, 613, 721, 366, 439, 445, 411, 1359, 34852, 294, 1184, 661, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1953481725744299, "compression_ratio": 1.7168458781362008, "no_speech_prob": 0.05830467492341995}, {"id": 213, "seek": 161200, "start": 1625.0, "end": 1641.0, "text": " Okay, but anyway, this MLP mixer thing doesn't have attention, but it's still in my view is as a token net. And that seems competitive on some tasks with attention networks. So maybe attention is maybe it's not the thing that matters.", "tokens": [51014, 1033, 11, 457, 4033, 11, 341, 21601, 47, 24063, 551, 1177, 380, 362, 3202, 11, 457, 309, 311, 920, 294, 452, 1910, 307, 382, 257, 14862, 2533, 13, 400, 300, 2544, 10043, 322, 512, 9608, 365, 3202, 9590, 13, 407, 1310, 3202, 307, 1310, 309, 311, 406, 264, 551, 300, 7001, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1953481725744299, "compression_ratio": 1.7168458781362008, "no_speech_prob": 0.05830467492341995}, {"id": 214, "seek": 164100, "start": 1641.0, "end": 1655.0, "text": " Related to this question. So it seems like especially in this self attention mode that you're describing. Yeah, if you unrolled that it's like a series of matrices I think going on there that could just be implemented as a straight up feed forwards chain if I'm following.", "tokens": [50364, 8738, 770, 281, 341, 1168, 13, 407, 309, 2544, 411, 2318, 294, 341, 2698, 3202, 4391, 300, 291, 434, 16141, 13, 865, 11, 498, 291, 517, 28850, 300, 309, 311, 411, 257, 2638, 295, 32284, 286, 519, 516, 322, 456, 300, 727, 445, 312, 12270, 382, 257, 2997, 493, 3154, 30126, 5021, 498, 286, 478, 3480, 13, 51064], "temperature": 0.0, "avg_logprob": -0.22173204578337122, "compression_ratio": 1.4702702702702704, "no_speech_prob": 0.07152734696865082}, {"id": 215, "seek": 165500, "start": 1656.0, "end": 1669.0, "text": " Is it just very deep, you know, it's going to be skips, I think, but can you on that idea makes sense to you. So you can always kind of like, you know, always take any one of these arrows and just say, Oh, that's actually just a matrix multiply.", "tokens": [50414, 1119, 309, 445, 588, 2452, 11, 291, 458, 11, 309, 311, 516, 281, 312, 1110, 2600, 11, 286, 519, 11, 457, 393, 291, 322, 300, 1558, 1669, 2020, 281, 291, 13, 407, 291, 393, 1009, 733, 295, 411, 11, 291, 458, 11, 1009, 747, 604, 472, 295, 613, 19669, 293, 445, 584, 11, 876, 11, 300, 311, 767, 445, 257, 8141, 12972, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2485287299522987, "compression_ratio": 1.7808219178082192, "no_speech_prob": 0.6608923077583313}, {"id": 216, "seek": 165500, "start": 1669.0, "end": 1681.0, "text": " But it's a matrix with special structure. It's not like a full rank matrix. And I think that that's, that's one way of just understanding all the person I didn't mean it was any matrix but just like you could re express this as another as I was trying to understand what the", "tokens": [51064, 583, 309, 311, 257, 8141, 365, 2121, 3877, 13, 467, 311, 406, 411, 257, 1577, 6181, 8141, 13, 400, 286, 519, 300, 300, 311, 11, 300, 311, 472, 636, 295, 445, 3701, 439, 264, 954, 286, 994, 380, 914, 309, 390, 604, 8141, 457, 445, 411, 291, 727, 319, 5109, 341, 382, 1071, 382, 286, 390, 1382, 281, 1223, 437, 264, 51664], "temperature": 0.0, "avg_logprob": -0.2485287299522987, "compression_ratio": 1.7808219178082192, "no_speech_prob": 0.6608923077583313}, {"id": 217, "seek": 168100, "start": 1681.0, "end": 1696.0, "text": " model might look like and then generalize that to and then you're back in standard mode again. Maybe that was closely related to what we were saying. Yeah. Yeah, where you have the second branch with a queue that's different that's sort of active state versus this kind of deterministic processing", "tokens": [50364, 2316, 1062, 574, 411, 293, 550, 2674, 1125, 300, 281, 293, 550, 291, 434, 646, 294, 3832, 4391, 797, 13, 2704, 300, 390, 8185, 4077, 281, 437, 321, 645, 1566, 13, 865, 13, 865, 11, 689, 291, 362, 264, 1150, 9819, 365, 257, 18639, 300, 311, 819, 300, 311, 1333, 295, 4967, 1785, 5717, 341, 733, 295, 15957, 3142, 9007, 51114], "temperature": 0.0, "avg_logprob": -0.24569927155971527, "compression_ratio": 1.5309278350515463, "no_speech_prob": 0.3732272982597351}, {"id": 218, "seek": 169600, "start": 1696.0, "end": 1703.0, "text": " based on kind of multiplicative there. Okay, that's where like it differs from like standard MLPs where they don't have this kind of multiplicative interaction.", "tokens": [50364, 2361, 322, 733, 295, 17596, 1166, 456, 13, 1033, 11, 300, 311, 689, 411, 309, 37761, 490, 411, 3832, 21601, 23043, 689, 436, 500, 380, 362, 341, 733, 295, 17596, 1166, 9285, 13, 50714], "temperature": 0.0, "avg_logprob": -0.21975948574306728, "compression_ratio": 1.8320895522388059, "no_speech_prob": 0.6139112114906311}, {"id": 219, "seek": 169600, "start": 1703.0, "end": 1711.0, "text": " That means that, you know, you're dependent on the moment, you're self contesting yourself meaning that you're dependent on your own input when you process this particular input.", "tokens": [50714, 663, 1355, 300, 11, 291, 458, 11, 291, 434, 12334, 322, 264, 1623, 11, 291, 434, 2698, 660, 8714, 1803, 3620, 300, 291, 434, 12334, 322, 428, 1065, 4846, 562, 291, 1399, 341, 1729, 4846, 13, 51114], "temperature": 0.0, "avg_logprob": -0.21975948574306728, "compression_ratio": 1.8320895522388059, "no_speech_prob": 0.6139112114906311}, {"id": 220, "seek": 169600, "start": 1711.0, "end": 1721.0, "text": " So it's kind of like a hyper network, I guess in that case, we're like, yeah, you change the representation based on what your presentation already is.", "tokens": [51114, 407, 309, 311, 733, 295, 411, 257, 9848, 3209, 11, 286, 2041, 294, 300, 1389, 11, 321, 434, 411, 11, 1338, 11, 291, 1319, 264, 10290, 2361, 322, 437, 428, 5860, 1217, 307, 13, 51614], "temperature": 0.0, "avg_logprob": -0.21975948574306728, "compression_ratio": 1.8320895522388059, "no_speech_prob": 0.6139112114906311}, {"id": 221, "seek": 172100, "start": 1721.0, "end": 1738.0, "text": " Yeah. So it's not like, yeah, you can't just rewrite it exactly as these linear combinations on like a regular feed forward network, because it does do these multiplies maybe that's the one mathematical atomic unit that's different.", "tokens": [50364, 865, 13, 407, 309, 311, 406, 411, 11, 1338, 11, 291, 393, 380, 445, 28132, 309, 2293, 382, 613, 8213, 21267, 322, 411, 257, 3890, 3154, 2128, 3209, 11, 570, 309, 775, 360, 613, 12788, 530, 1310, 300, 311, 264, 472, 18894, 22275, 4985, 300, 311, 819, 13, 51214], "temperature": 0.0, "avg_logprob": -0.15721328441913313, "compression_ratio": 1.4591194968553458, "no_speech_prob": 0.011681769974529743}, {"id": 222, "seek": 173800, "start": 1738.0, "end": 1753.0, "text": " I think you can express these in different languages and I actually do like thinking of it as oh it's just a special kind of matrix the matrix weights come from this other source is self attention mechanism but then it's just a matrix but that matrix has special structure and understanding that low ring", "tokens": [50364, 286, 519, 291, 393, 5109, 613, 294, 819, 8650, 293, 286, 767, 360, 411, 1953, 295, 309, 382, 1954, 309, 311, 445, 257, 2121, 733, 295, 8141, 264, 8141, 17443, 808, 490, 341, 661, 4009, 307, 2698, 3202, 7513, 457, 550, 309, 311, 445, 257, 8141, 457, 300, 8141, 575, 2121, 3877, 293, 3701, 300, 2295, 4875, 51114], "temperature": 0.0, "avg_logprob": -0.17678098176655016, "compression_ratio": 1.908, "no_speech_prob": 0.2170555740594864}, {"id": 223, "seek": 173800, "start": 1753.0, "end": 1762.0, "text": " structure is kind of that's just a way of understanding architectures is what is the special structure you're imposing on the on the linear transformations on the matrices.", "tokens": [51114, 3877, 307, 733, 295, 300, 311, 445, 257, 636, 295, 3701, 6331, 1303, 307, 437, 307, 264, 2121, 3877, 291, 434, 40288, 322, 264, 322, 264, 8213, 34852, 322, 264, 32284, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17678098176655016, "compression_ratio": 1.908, "no_speech_prob": 0.2170555740594864}, {"id": 224, "seek": 176200, "start": 1762.0, "end": 1777.0, "text": " This dot product here between the query and the key involves multiplication, which is not something that you would directly get in a regular network.", "tokens": [50364, 639, 5893, 1674, 510, 1296, 264, 14581, 293, 264, 2141, 11626, 27290, 11, 597, 307, 406, 746, 300, 291, 576, 3838, 483, 294, 257, 3890, 3209, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2607529855543567, "compression_ratio": 1.2627118644067796, "no_speech_prob": 0.09519073367118835}, {"id": 225, "seek": 177700, "start": 1777.0, "end": 1786.0, "text": " Oh, yeah, related to this and also the permutation if you variance that's within a block. So what about across transformer blocks.", "tokens": [50364, 876, 11, 1338, 11, 4077, 281, 341, 293, 611, 264, 4784, 11380, 498, 291, 21977, 300, 311, 1951, 257, 3461, 13, 407, 437, 466, 2108, 31782, 8474, 13, 50814], "temperature": 0.0, "avg_logprob": -0.23733987563695663, "compression_ratio": 1.7165775401069518, "no_speech_prob": 0.21688079833984375}, {"id": 226, "seek": 177700, "start": 1786.0, "end": 1795.0, "text": " Yeah, so you could have, you can kind of any set of tokens attend to any set of tokens, and they could come from one layer of the net and another layer of the net or one block another block.", "tokens": [50814, 865, 11, 370, 291, 727, 362, 11, 291, 393, 733, 295, 604, 992, 295, 22667, 6888, 281, 604, 992, 295, 22667, 11, 293, 436, 727, 808, 490, 472, 4583, 295, 264, 2533, 293, 1071, 4583, 295, 264, 2533, 420, 472, 3461, 1071, 3461, 13, 51264], "temperature": 0.0, "avg_logprob": -0.23733987563695663, "compression_ratio": 1.7165775401069518, "no_speech_prob": 0.21688079833984375}, {"id": 227, "seek": 179500, "start": 1795.0, "end": 1811.0, "text": " It could come from a text processing network and image processing network and then the text attends to the tokens of the image. And then it could come from just the text tokens attend to themselves and that's mostly what I talked about but actually sorry did that answer is that your question or on the wrong way.", "tokens": [50364, 467, 727, 808, 490, 257, 2487, 9007, 3209, 293, 3256, 9007, 3209, 293, 550, 264, 2487, 49837, 281, 264, 22667, 295, 264, 3256, 13, 400, 550, 309, 727, 808, 490, 445, 264, 2487, 22667, 6888, 281, 2969, 293, 300, 311, 5240, 437, 286, 2825, 466, 457, 767, 2597, 630, 300, 1867, 307, 300, 428, 1168, 420, 322, 264, 2085, 636, 13, 51164], "temperature": 0.0, "avg_logprob": -0.271793952355018, "compression_ratio": 1.819767441860465, "no_speech_prob": 0.351481556892395}, {"id": 228, "seek": 181100, "start": 1811.0, "end": 1823.0, "text": " She said that you could commute like within a block like the operations. Yeah, pretty much like I'm just saying if you have like 12 transformer blocks is shown that some of the earlier blocks like learn more like surface form type of features where like later learn.", "tokens": [50364, 1240, 848, 300, 291, 727, 36750, 411, 1951, 257, 3461, 411, 264, 7705, 13, 865, 11, 1238, 709, 411, 286, 478, 445, 1566, 498, 291, 362, 411, 2272, 31782, 8474, 307, 4898, 300, 512, 295, 264, 3071, 8474, 411, 1466, 544, 411, 3753, 1254, 2010, 295, 4122, 689, 411, 1780, 1466, 13, 50964], "temperature": 0.0, "avg_logprob": -0.251505965486579, "compression_ratio": 1.7769516728624535, "no_speech_prob": 0.2936766743659973}, {"id": 229, "seek": 181100, "start": 1823.0, "end": 1828.0, "text": " Oh yeah, like high level things and I was wondering about like can you also commute.", "tokens": [50964, 876, 1338, 11, 411, 1090, 1496, 721, 293, 286, 390, 6359, 466, 411, 393, 291, 611, 36750, 13, 51214], "temperature": 0.0, "avg_logprob": -0.251505965486579, "compression_ratio": 1.7769516728624535, "no_speech_prob": 0.2936766743659973}, {"id": 230, "seek": 181100, "start": 1828.0, "end": 1831.0, "text": " Yeah, I think no probably.", "tokens": [51214, 865, 11, 286, 519, 572, 1391, 13, 51364], "temperature": 0.0, "avg_logprob": -0.251505965486579, "compression_ratio": 1.7769516728624535, "no_speech_prob": 0.2936766743659973}, {"id": 231, "seek": 181100, "start": 1831.0, "end": 1837.0, "text": " So I don't think you can commute depth wise I think just you can commute within the sequence. Yeah.", "tokens": [51364, 407, 286, 500, 380, 519, 291, 393, 36750, 7161, 10829, 286, 519, 445, 291, 393, 36750, 1951, 264, 8310, 13, 865, 13, 51664], "temperature": 0.0, "avg_logprob": -0.251505965486579, "compression_ratio": 1.7769516728624535, "no_speech_prob": 0.2936766743659973}, {"id": 232, "seek": 183700, "start": 1837.0, "end": 1844.0, "text": " So if you move the head attention, you know how they can catnate all the heads together to go to the next layer.", "tokens": [50364, 407, 498, 291, 1286, 264, 1378, 3202, 11, 291, 458, 577, 436, 393, 3857, 77, 473, 439, 264, 8050, 1214, 281, 352, 281, 264, 958, 4583, 13, 50714], "temperature": 0.0, "avg_logprob": -0.2889998817443848, "compression_ratio": 1.654867256637168, "no_speech_prob": 0.06748870015144348}, {"id": 233, "seek": 183700, "start": 1844.0, "end": 1853.0, "text": " Don't they lose the permutation variance, or the permutation that we're going to do that nation process.", "tokens": [50714, 1468, 380, 436, 3624, 264, 4784, 11380, 21977, 11, 420, 264, 4784, 11380, 300, 321, 434, 516, 281, 360, 300, 4790, 1399, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2889998817443848, "compression_ratio": 1.654867256637168, "no_speech_prob": 0.06748870015144348}, {"id": 234, "seek": 183700, "start": 1853.0, "end": 1855.0, "text": " Don't think so.", "tokens": [51164, 1468, 380, 519, 370, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2889998817443848, "compression_ratio": 1.654867256637168, "no_speech_prob": 0.06748870015144348}, {"id": 235, "seek": 183700, "start": 1855.0, "end": 1858.0, "text": " Because your contamination has to have some sort of ordering.", "tokens": [51264, 1436, 428, 33012, 575, 281, 362, 512, 1333, 295, 21739, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2889998817443848, "compression_ratio": 1.654867256637168, "no_speech_prob": 0.06748870015144348}, {"id": 236, "seek": 183700, "start": 1858.0, "end": 1861.0, "text": " Oh, interesting.", "tokens": [51414, 876, 11, 1880, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2889998817443848, "compression_ratio": 1.654867256637168, "no_speech_prob": 0.06748870015144348}, {"id": 237, "seek": 183700, "start": 1861.0, "end": 1865.0, "text": " Yeah, maybe. Okay, so it's possible that transformers aren't.", "tokens": [51564, 865, 11, 1310, 13, 1033, 11, 370, 309, 311, 1944, 300, 4088, 433, 3212, 380, 13, 51764], "temperature": 0.0, "avg_logprob": -0.2889998817443848, "compression_ratio": 1.654867256637168, "no_speech_prob": 0.06748870015144348}, {"id": 238, "seek": 186500, "start": 1865.0, "end": 1868.0, "text": " It's not always multi transformers.", "tokens": [50364, 467, 311, 406, 1009, 4825, 4088, 433, 13, 50514], "temperature": 0.0, "avg_logprob": -0.3050712414002151, "compression_ratio": 1.6990740740740742, "no_speech_prob": 0.008828980848193169}, {"id": 239, "seek": 186500, "start": 1868.0, "end": 1872.0, "text": " Individual transformer heads are accurate.", "tokens": [50514, 37292, 31782, 8050, 366, 8559, 13, 50714], "temperature": 0.0, "avg_logprob": -0.3050712414002151, "compression_ratio": 1.6990740740740742, "no_speech_prob": 0.008828980848193169}, {"id": 240, "seek": 186500, "start": 1872.0, "end": 1875.0, "text": " Yeah, I hadn't thought about the multi headed thing. Okay.", "tokens": [50714, 865, 11, 286, 8782, 380, 1194, 466, 264, 4825, 12798, 551, 13, 1033, 13, 50864], "temperature": 0.0, "avg_logprob": -0.3050712414002151, "compression_ratio": 1.6990740740740742, "no_speech_prob": 0.008828980848193169}, {"id": 241, "seek": 186500, "start": 1875.0, "end": 1878.0, "text": " Yeah.", "tokens": [50864, 865, 13, 51014], "temperature": 0.0, "avg_logprob": -0.3050712414002151, "compression_ratio": 1.6990740740740742, "no_speech_prob": 0.008828980848193169}, {"id": 242, "seek": 186500, "start": 1878.0, "end": 1893.0, "text": " In the multi headed you take a weighted sum of the heads and then that the feature vectors they can carry together and that's a parameterized some and if you change the order of what I think you're right. Okay, interesting.", "tokens": [51014, 682, 264, 4825, 12798, 291, 747, 257, 32807, 2408, 295, 264, 8050, 293, 550, 300, 264, 4111, 18875, 436, 393, 3985, 1214, 293, 300, 311, 257, 13075, 1602, 512, 293, 498, 291, 1319, 264, 1668, 295, 437, 286, 519, 291, 434, 558, 13, 1033, 11, 1880, 13, 51764], "temperature": 0.0, "avg_logprob": -0.3050712414002151, "compression_ratio": 1.6990740740740742, "no_speech_prob": 0.008828980848193169}, {"id": 243, "seek": 189300, "start": 1893.0, "end": 1903.0, "text": " Did anybody try instead of using the Q and K matrix or the WQ and WK use a single matrix.", "tokens": [50364, 2589, 4472, 853, 2602, 295, 1228, 264, 1249, 293, 591, 8141, 420, 264, 343, 48, 293, 343, 42, 764, 257, 2167, 8141, 13, 50864], "temperature": 0.0, "avg_logprob": -0.18720780295887213, "compression_ratio": 1.6175115207373272, "no_speech_prob": 0.018614478409290314}, {"id": 244, "seek": 189300, "start": 1903.0, "end": 1922.0, "text": " Yeah. Okay, so one thing you can do is just get rid of queries keys and values and just have your code vectors at Z and take like the inner product of for the outer product of Z with the Z as your attention and I think that that can sometimes work just as well.", "tokens": [50864, 865, 13, 1033, 11, 370, 472, 551, 291, 393, 360, 307, 445, 483, 3973, 295, 24109, 9317, 293, 4190, 293, 445, 362, 428, 3089, 18875, 412, 1176, 293, 747, 411, 264, 7284, 1674, 295, 337, 264, 10847, 1674, 295, 1176, 365, 264, 1176, 382, 428, 3202, 293, 286, 519, 300, 300, 393, 2171, 589, 445, 382, 731, 13, 51814], "temperature": 0.0, "avg_logprob": -0.18720780295887213, "compression_ratio": 1.6175115207373272, "no_speech_prob": 0.018614478409290314}, {"id": 245, "seek": 192200, "start": 1922.0, "end": 1934.0, "text": " Yeah, I haven't really followed the latest on that, but you can have queries keys and values that are linear functions of your code vectors Z, or they can be nonlinear functions or they could be identity.", "tokens": [50364, 865, 11, 286, 2378, 380, 534, 6263, 264, 6792, 322, 300, 11, 457, 291, 393, 362, 24109, 9317, 293, 4190, 300, 366, 8213, 6828, 295, 428, 3089, 18875, 1176, 11, 420, 436, 393, 312, 2107, 28263, 6828, 420, 436, 727, 312, 6575, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12460795182448167, "compression_ratio": 1.5254237288135593, "no_speech_prob": 0.004330378491431475}, {"id": 246, "seek": 192200, "start": 1934.0, "end": 1940.0, "text": " And I'm not sure that there's a consensus on when you need which.", "tokens": [50964, 400, 286, 478, 406, 988, 300, 456, 311, 257, 19115, 322, 562, 291, 643, 597, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12460795182448167, "compression_ratio": 1.5254237288135593, "no_speech_prob": 0.004330378491431475}, {"id": 247, "seek": 194000, "start": 1940.0, "end": 1952.0, "text": " So one, one thing that's kind of interesting is that if you use the identity to create your queries and keys, you're basically creating that grant matrix between all of your token vectors with themselves.", "tokens": [50364, 407, 472, 11, 472, 551, 300, 311, 733, 295, 1880, 307, 300, 498, 291, 764, 264, 6575, 281, 1884, 428, 24109, 293, 9317, 11, 291, 434, 1936, 4084, 300, 6386, 8141, 1296, 439, 295, 428, 14862, 18875, 365, 2969, 13, 50964], "temperature": 0.0, "avg_logprob": -0.129797025160356, "compression_ratio": 1.446808510638298, "no_speech_prob": 0.005218593869358301}, {"id": 248, "seek": 195200, "start": 1952.0, "end": 1967.0, "text": " And it's going to act kind of like it's going to cluster the data and there's been some analysis of how, okay, identity attention, identity queries and keys will create this, you know, clustering like spectral clustering type matrix it'll create this similarity matrix when you hit the data with a", "tokens": [50364, 400, 309, 311, 516, 281, 605, 733, 295, 411, 309, 311, 516, 281, 13630, 264, 1412, 293, 456, 311, 668, 512, 5215, 295, 577, 11, 1392, 11, 6575, 3202, 11, 6575, 24109, 293, 9317, 486, 1884, 341, 11, 291, 458, 11, 596, 48673, 411, 42761, 596, 48673, 2010, 8141, 309, 603, 1884, 341, 32194, 8141, 562, 291, 2045, 264, 1412, 365, 257, 51114], "temperature": 0.0, "avg_logprob": -0.228886113022313, "compression_ratio": 1.7470588235294118, "no_speech_prob": 0.08865867555141449}, {"id": 249, "seek": 196700, "start": 1967.0, "end": 1977.0, "text": " matrix and literary matrix or group things are similar. And maybe we can understand a little bit what's going on from that perspective like linear queries and keys are just some projection of that kind of thing.", "tokens": [50364, 8141, 293, 24194, 8141, 420, 1594, 721, 366, 2531, 13, 400, 1310, 321, 393, 1223, 257, 707, 857, 437, 311, 516, 322, 490, 300, 4585, 411, 8213, 24109, 293, 9317, 366, 445, 512, 22743, 295, 300, 733, 295, 551, 13, 50864], "temperature": 0.0, "avg_logprob": -0.219345900591682, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.25951483845710754}, {"id": 250, "seek": 196700, "start": 1977.0, "end": 1984.0, "text": " And how does that work if you don't have the WQ and WK matrix but just the identity.", "tokens": [50864, 400, 577, 775, 300, 589, 498, 291, 500, 380, 362, 264, 343, 48, 293, 343, 42, 8141, 457, 445, 264, 6575, 13, 51214], "temperature": 0.0, "avg_logprob": -0.219345900591682, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.25951483845710754}, {"id": 251, "seek": 196700, "start": 1984.0, "end": 1987.0, "text": " Actually, yeah, do you know Brian or just, just anyone know.", "tokens": [51214, 5135, 11, 1338, 11, 360, 291, 458, 10765, 420, 445, 11, 445, 2878, 458, 13, 51364], "temperature": 0.0, "avg_logprob": -0.219345900591682, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.25951483845710754}, {"id": 252, "seek": 198700, "start": 1987.0, "end": 1996.0, "text": " The keys are actually kind of like this more exactly like this spectral matrix because what you do is you process the input transpose it process it again.", "tokens": [50364, 440, 9317, 366, 767, 733, 295, 411, 341, 544, 2293, 411, 341, 42761, 8141, 570, 437, 291, 360, 307, 291, 1399, 264, 4846, 25167, 309, 1399, 309, 797, 13, 50814], "temperature": 0.0, "avg_logprob": -0.20932000258873248, "compression_ratio": 1.7275985663082438, "no_speech_prob": 0.42182743549346924}, {"id": 253, "seek": 198700, "start": 1996.0, "end": 2002.0, "text": " You know if you work out both operations in sequence, they end up becoming Z transpose Z like a matrix in the middle.", "tokens": [50814, 509, 458, 498, 291, 589, 484, 1293, 7705, 294, 8310, 11, 436, 917, 493, 5617, 1176, 25167, 1176, 411, 257, 8141, 294, 264, 2808, 13, 51114], "temperature": 0.0, "avg_logprob": -0.20932000258873248, "compression_ratio": 1.7275985663082438, "no_speech_prob": 0.42182743549346924}, {"id": 254, "seek": 198700, "start": 2002.0, "end": 2006.0, "text": " So I think it does work, I guess.", "tokens": [51114, 407, 286, 519, 309, 775, 589, 11, 286, 2041, 13, 51314], "temperature": 0.0, "avg_logprob": -0.20932000258873248, "compression_ratio": 1.7275985663082438, "no_speech_prob": 0.42182743549346924}, {"id": 255, "seek": 198700, "start": 2006.0, "end": 2009.0, "text": " That was my, maybe not as well but it does work.", "tokens": [51314, 663, 390, 452, 11, 1310, 406, 382, 731, 457, 309, 775, 589, 13, 51464], "temperature": 0.0, "avg_logprob": -0.20932000258873248, "compression_ratio": 1.7275985663082438, "no_speech_prob": 0.42182743549346924}, {"id": 256, "seek": 198700, "start": 2009.0, "end": 2016.0, "text": " It works just maybe not as well. Yeah, we sort of interleaving with these nonlinear operations and still get expressive power.", "tokens": [51464, 467, 1985, 445, 1310, 406, 382, 731, 13, 865, 11, 321, 1333, 295, 728, 306, 6152, 365, 613, 2107, 28263, 7705, 293, 920, 483, 40189, 1347, 13, 51814], "temperature": 0.0, "avg_logprob": -0.20932000258873248, "compression_ratio": 1.7275985663082438, "no_speech_prob": 0.42182743549346924}, {"id": 257, "seek": 201600, "start": 2016.0, "end": 2024.0, "text": " And one other question that you mentioned and there is a paper I think from the mind about using a single pixel as a token.", "tokens": [50364, 400, 472, 661, 1168, 300, 291, 2835, 293, 456, 307, 257, 3035, 286, 519, 490, 264, 1575, 466, 1228, 257, 2167, 19261, 382, 257, 14862, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1347214882833916, "compression_ratio": 1.4857142857142858, "no_speech_prob": 0.026907123625278473}, {"id": 258, "seek": 201600, "start": 2024.0, "end": 2035.0, "text": " Yeah, it seems very little in terms of being able to establish similarities with other tokens because you have just color and intensity.", "tokens": [50764, 865, 11, 309, 2544, 588, 707, 294, 2115, 295, 885, 1075, 281, 8327, 24197, 365, 661, 22667, 570, 291, 362, 445, 2017, 293, 13749, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1347214882833916, "compression_ratio": 1.4857142857142858, "no_speech_prob": 0.026907123625278473}, {"id": 259, "seek": 203500, "start": 2035.0, "end": 2040.0, "text": " So my feeling there is that, yes, on the first layer, that's a very bad token.", "tokens": [50364, 407, 452, 2633, 456, 307, 300, 11, 2086, 11, 322, 264, 700, 4583, 11, 300, 311, 257, 588, 1578, 14862, 13, 50614], "temperature": 0.0, "avg_logprob": -0.16247992679990572, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.02842230349779129}, {"id": 260, "seek": 203500, "start": 2040.0, "end": 2044.0, "text": " You can have like, you have a one to eight dimensional vector that coats just the color of a single pixel.", "tokens": [50614, 509, 393, 362, 411, 11, 291, 362, 257, 472, 281, 3180, 18795, 8062, 300, 30036, 445, 264, 2017, 295, 257, 2167, 19261, 13, 50814], "temperature": 0.0, "avg_logprob": -0.16247992679990572, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.02842230349779129}, {"id": 261, "seek": 203500, "start": 2044.0, "end": 2046.0, "text": " It's not going to do much.", "tokens": [50814, 467, 311, 406, 516, 281, 360, 709, 13, 50914], "temperature": 0.0, "avg_logprob": -0.16247992679990572, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.02842230349779129}, {"id": 262, "seek": 203500, "start": 2046.0, "end": 2056.0, "text": " But then when you do this linear combination operation, you know, it's like taking a one by one patch and making a bigger patch out of it.", "tokens": [50914, 583, 550, 562, 291, 360, 341, 8213, 6562, 6916, 11, 291, 458, 11, 309, 311, 411, 1940, 257, 472, 538, 472, 9972, 293, 1455, 257, 3801, 9972, 484, 295, 309, 13, 51414], "temperature": 0.0, "avg_logprob": -0.16247992679990572, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.02842230349779129}, {"id": 263, "seek": 203500, "start": 2056.0, "end": 2063.0, "text": " I mean, it can learn to mix information across the whole image and say all of these similar colors.", "tokens": [51414, 286, 914, 11, 309, 393, 1466, 281, 2890, 1589, 2108, 264, 1379, 3256, 293, 584, 439, 295, 613, 2531, 4577, 13, 51764], "temperature": 0.0, "avg_logprob": -0.16247992679990572, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.02842230349779129}, {"id": 264, "seek": 206300, "start": 2063.0, "end": 2069.0, "text": " Maybe all the white stripes on the zebra will go all the black stripes in the zebras because the black keys will match the white queries.", "tokens": [50364, 2704, 439, 264, 2418, 27308, 322, 264, 47060, 486, 352, 439, 264, 2211, 27308, 294, 264, 5277, 38182, 570, 264, 2211, 9317, 486, 2995, 264, 2418, 24109, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1715542913853437, "compression_ratio": 1.7339449541284404, "no_speech_prob": 0.011477921158075333}, {"id": 265, "seek": 206300, "start": 2069.0, "end": 2076.0, "text": " So it could create these abstracted tokens as you go deeper into the network and build up.", "tokens": [50664, 407, 309, 727, 1884, 613, 12649, 292, 22667, 382, 291, 352, 7731, 666, 264, 3209, 293, 1322, 493, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1715542913853437, "compression_ratio": 1.7339449541284404, "no_speech_prob": 0.011477921158075333}, {"id": 266, "seek": 206300, "start": 2076.0, "end": 2089.0, "text": " Many years ago in computer vision, there was the idea of instead of using a patch of using at a single pixel, the value of the pixel and derivatives.", "tokens": [51014, 5126, 924, 2057, 294, 3820, 5201, 11, 456, 390, 264, 1558, 295, 2602, 295, 1228, 257, 9972, 295, 1228, 412, 257, 2167, 19261, 11, 264, 2158, 295, 264, 19261, 293, 33733, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1715542913853437, "compression_ratio": 1.7339449541284404, "no_speech_prob": 0.011477921158075333}, {"id": 267, "seek": 208900, "start": 2090.0, "end": 2101.0, "text": " Which means essentially you're having no local information because the derivatives gives you information about neighboring pixel, special derivatives.", "tokens": [50414, 3013, 1355, 4476, 291, 434, 1419, 572, 2654, 1589, 570, 264, 33733, 2709, 291, 1589, 466, 31521, 19261, 11, 2121, 33733, 13, 50964], "temperature": 0.0, "avg_logprob": -0.28730422572085734, "compression_ratio": 1.4938271604938271, "no_speech_prob": 0.022022362798452377}, {"id": 268, "seek": 208900, "start": 2101.0, "end": 2104.0, "text": " It's kind of like a little token.", "tokens": [50964, 467, 311, 733, 295, 411, 257, 707, 14862, 13, 51114], "temperature": 0.0, "avg_logprob": -0.28730422572085734, "compression_ratio": 1.4938271604938271, "no_speech_prob": 0.022022362798452377}, {"id": 269, "seek": 208900, "start": 2104.0, "end": 2109.0, "text": " It was a vector of and it's very much like a token.", "tokens": [51114, 467, 390, 257, 8062, 295, 293, 309, 311, 588, 709, 411, 257, 14862, 13, 51364], "temperature": 0.0, "avg_logprob": -0.28730422572085734, "compression_ratio": 1.4938271604938271, "no_speech_prob": 0.022022362798452377}, {"id": 270, "seek": 208900, "start": 2109.0, "end": 2110.0, "text": " Yeah.", "tokens": [51364, 865, 13, 51414], "temperature": 0.0, "avg_logprob": -0.28730422572085734, "compression_ratio": 1.4938271604938271, "no_speech_prob": 0.022022362798452377}, {"id": 271, "seek": 211000, "start": 2111.0, "end": 2129.0, "text": " Yes, I don't think that these are new ideas really is just it helped me to coalesce around the idea of a token like we're gonna think all the operations in terms of tokens but we used to talk about you know, hyper columns and feature vectors and like there's a million names for the same this in concepts.", "tokens": [50414, 1079, 11, 286, 500, 380, 519, 300, 613, 366, 777, 3487, 534, 307, 445, 309, 4254, 385, 281, 598, 4229, 384, 926, 264, 1558, 295, 257, 14862, 411, 321, 434, 799, 519, 439, 264, 7705, 294, 2115, 295, 22667, 457, 321, 1143, 281, 751, 466, 291, 458, 11, 9848, 13766, 293, 4111, 18875, 293, 411, 456, 311, 257, 2459, 5288, 337, 264, 912, 341, 294, 10392, 13, 51314], "temperature": 0.0, "avg_logprob": -0.21490514782113088, "compression_ratio": 1.5482233502538072, "no_speech_prob": 0.008028495125472546}, {"id": 272, "seek": 212900, "start": 2130.0, "end": 2133.0, "text": " Do you want to pull up just at a time for you to.", "tokens": [50414, 1144, 291, 528, 281, 2235, 493, 445, 412, 257, 565, 337, 291, 281, 13, 50564], "temperature": 0.0, "avg_logprob": -0.22856043743830856, "compression_ratio": 1.7654867256637168, "no_speech_prob": 0.19741760194301605}, {"id": 273, "seek": 212900, "start": 2133.0, "end": 2142.0, "text": " Yeah, you make you made a connection earlier with graph neural networks. I don't recall which one you said is more general of the two.", "tokens": [50564, 865, 11, 291, 652, 291, 1027, 257, 4984, 3071, 365, 4295, 18161, 9590, 13, 286, 500, 380, 9901, 597, 472, 291, 848, 307, 544, 2674, 295, 264, 732, 13, 51014], "temperature": 0.0, "avg_logprob": -0.22856043743830856, "compression_ratio": 1.7654867256637168, "no_speech_prob": 0.19741760194301605}, {"id": 274, "seek": 212900, "start": 2142.0, "end": 2155.0, "text": " Well, but they also don't feel the connection because for graph neural networks it's important like the connection in the graph the structure is very important whereas in transformers you said it is less of a case.", "tokens": [51014, 1042, 11, 457, 436, 611, 500, 380, 841, 264, 4984, 570, 337, 4295, 18161, 9590, 309, 311, 1021, 411, 264, 4984, 294, 264, 4295, 264, 3877, 307, 588, 1021, 9735, 294, 4088, 433, 291, 848, 309, 307, 1570, 295, 257, 1389, 13, 51664], "temperature": 0.0, "avg_logprob": -0.22856043743830856, "compression_ratio": 1.7654867256637168, "no_speech_prob": 0.19741760194301605}, {"id": 275, "seek": 215500, "start": 2155.0, "end": 2168.0, "text": " So, yeah, I think it depends on you to find these things but I like to think of graph nets as more a broader class and so transformers graph nets with the fully connected graph so every token talks to every token.", "tokens": [50364, 407, 11, 1338, 11, 286, 519, 309, 5946, 322, 291, 281, 915, 613, 721, 457, 286, 411, 281, 519, 295, 4295, 36170, 382, 544, 257, 13227, 1508, 293, 370, 4088, 433, 4295, 36170, 365, 264, 4498, 4582, 4295, 370, 633, 14862, 6686, 281, 633, 14862, 13, 51014], "temperature": 0.0, "avg_logprob": -0.146442501168502, "compression_ratio": 1.619718309859155, "no_speech_prob": 0.004396460950374603}, {"id": 276, "seek": 215500, "start": 2168.0, "end": 2179.0, "text": " And the aggregation function that decides how to do like the weighted sum of incoming messages is given by this attention operator.", "tokens": [51014, 400, 264, 16743, 399, 2445, 300, 14898, 577, 281, 360, 411, 264, 32807, 2408, 295, 22341, 7897, 307, 2212, 538, 341, 3202, 12973, 13, 51564], "temperature": 0.0, "avg_logprob": -0.146442501168502, "compression_ratio": 1.619718309859155, "no_speech_prob": 0.004396460950374603}, {"id": 277, "seek": 217900, "start": 2179.0, "end": 2187.0, "text": " The similarity between node A and node B tells you how much the messages from node B will be summed up into node A.", "tokens": [50364, 440, 32194, 1296, 9984, 316, 293, 9984, 363, 5112, 291, 577, 709, 264, 7897, 490, 9984, 363, 486, 312, 2408, 1912, 493, 666, 9984, 316, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1610587352030986, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.05094267055392265}, {"id": 278, "seek": 217900, "start": 2187.0, "end": 2200.0, "text": " And you can have attention graph neural networks that's why you feel it's and that's, I think it was independently invented over there or maybe even first invented over there so graph net people have done attention.", "tokens": [50764, 400, 291, 393, 362, 3202, 4295, 18161, 9590, 300, 311, 983, 291, 841, 309, 311, 293, 300, 311, 11, 286, 519, 309, 390, 21761, 14479, 670, 456, 420, 1310, 754, 700, 14479, 670, 456, 370, 4295, 2533, 561, 362, 1096, 3202, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1610587352030986, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.05094267055392265}, {"id": 279, "seek": 220000, "start": 2200.0, "end": 2211.0, "text": " Before transformers made attention really popular, although of course attention is an old idea as well and it has shown up a lot of times.", "tokens": [50364, 4546, 4088, 433, 1027, 3202, 534, 3743, 11, 4878, 295, 1164, 3202, 307, 364, 1331, 1558, 382, 731, 293, 309, 575, 4898, 493, 257, 688, 295, 1413, 13, 50914], "temperature": 0.0, "avg_logprob": -0.21881709496180216, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.10804521292448044}, {"id": 280, "seek": 220000, "start": 2211.0, "end": 2213.0, "text": " So I guess I can start now.", "tokens": [50914, 407, 286, 2041, 286, 393, 722, 586, 13, 51014], "temperature": 0.0, "avg_logprob": -0.21881709496180216, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.10804521292448044}, {"id": 281, "seek": 220000, "start": 2213.0, "end": 2227.0, "text": " Yeah, still gave a great overview which actually is going to make this a lot easier, where I think I want to go over more of the AI machine learning communities perspective of attention and kind of the developments happening in that community, and go over some kind of", "tokens": [51014, 865, 11, 920, 2729, 257, 869, 12492, 597, 767, 307, 516, 281, 652, 341, 257, 688, 3571, 11, 689, 286, 519, 286, 528, 281, 352, 670, 544, 295, 264, 7318, 3479, 2539, 4456, 4585, 295, 3202, 293, 733, 295, 264, 20862, 2737, 294, 300, 1768, 11, 293, 352, 670, 512, 733, 295, 51714], "temperature": 0.0, "avg_logprob": -0.21881709496180216, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.10804521292448044}, {"id": 282, "seek": 222700, "start": 2227.0, "end": 2234.0, "text": " things about transformers that I think are surprising I guess to a lot of people now.", "tokens": [50364, 721, 466, 4088, 433, 300, 286, 519, 366, 8830, 286, 2041, 281, 257, 688, 295, 561, 586, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14903033989063208, "compression_ratio": 1.6020408163265305, "no_speech_prob": 0.05412014573812485}, {"id": 283, "seek": 222700, "start": 2234.0, "end": 2248.0, "text": " To go over that let's kind of go over how it started so originally the transformer was a language model, and the language model paper had possibly the most arrogant title you could imagine, saying that attention is all you need.", "tokens": [50714, 1407, 352, 670, 300, 718, 311, 733, 295, 352, 670, 577, 309, 1409, 370, 7993, 264, 31782, 390, 257, 2856, 2316, 11, 293, 264, 2856, 2316, 3035, 632, 6264, 264, 881, 30467, 4876, 291, 727, 3811, 11, 1566, 300, 3202, 307, 439, 291, 643, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14903033989063208, "compression_ratio": 1.6020408163265305, "no_speech_prob": 0.05412014573812485}, {"id": 284, "seek": 224800, "start": 2248.0, "end": 2264.0, "text": " So whether they know that that actually turned out to be something that would actually have more truth to it. And I think most people realize including I think myself, which is that this now is a model that covers I still mentioned language speech vision.", "tokens": [50364, 407, 1968, 436, 458, 300, 300, 767, 3574, 484, 281, 312, 746, 300, 576, 767, 362, 544, 3494, 281, 309, 13, 400, 286, 519, 881, 561, 4325, 3009, 286, 519, 2059, 11, 597, 307, 300, 341, 586, 307, 257, 2316, 300, 10538, 286, 920, 2835, 2856, 6218, 5201, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16792323138262774, "compression_ratio": 1.647887323943662, "no_speech_prob": 0.5150001049041748}, {"id": 285, "seek": 224800, "start": 2264.0, "end": 2273.0, "text": " It's basically a universal model now for all the modalities that people apply to data actually.", "tokens": [51164, 467, 311, 1936, 257, 11455, 2316, 586, 337, 439, 264, 1072, 16110, 300, 561, 3079, 281, 1412, 767, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16792323138262774, "compression_ratio": 1.647887323943662, "no_speech_prob": 0.5150001049041748}, {"id": 286, "seek": 227300, "start": 2273.0, "end": 2292.0, "text": " And attention is not a new idea. This is something that was proposed, even before this paper but this paper was something that was very very similar to the vision transformer attention, where they created essentially attendable feature maps at the last layer or the next to", "tokens": [50364, 400, 3202, 307, 406, 257, 777, 1558, 13, 639, 307, 746, 300, 390, 10348, 11, 754, 949, 341, 3035, 457, 341, 3035, 390, 746, 300, 390, 588, 588, 2531, 281, 264, 5201, 31782, 3202, 11, 689, 436, 2942, 4476, 6888, 712, 4111, 11317, 412, 264, 1036, 4583, 420, 264, 958, 281, 51314], "temperature": 0.0, "avg_logprob": -0.19294253262606534, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.13268862664699554}, {"id": 287, "seek": 229200, "start": 2292.0, "end": 2303.0, "text": " the CG network that was still spatial, and they're able to use this to show that when you do image captioning, it would attend to the correct parts of an object.", "tokens": [50364, 264, 38007, 3209, 300, 390, 920, 23598, 11, 293, 436, 434, 1075, 281, 764, 341, 281, 855, 300, 562, 291, 360, 3256, 31974, 278, 11, 309, 576, 6888, 281, 264, 3006, 3166, 295, 364, 2657, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1362380055547918, "compression_ratio": 1.6977611940298507, "no_speech_prob": 0.44819194078445435}, {"id": 288, "seek": 229200, "start": 2303.0, "end": 2318.0, "text": " So, the reason why I think this kind of seminar is important is because, classically, you know, whatever works well has always been something that we always ask ourselves is the brain also doing this because that's been the classical thing for a lot of the past, you know, 10 years of research", "tokens": [50914, 407, 11, 264, 1778, 983, 286, 519, 341, 733, 295, 29235, 307, 1021, 307, 570, 11, 1508, 984, 11, 291, 458, 11, 2035, 1985, 731, 575, 1009, 668, 746, 300, 321, 1009, 1029, 4175, 307, 264, 3567, 611, 884, 341, 570, 300, 311, 668, 264, 13735, 551, 337, 257, 688, 295, 264, 1791, 11, 291, 458, 11, 1266, 924, 295, 2132, 51664], "temperature": 0.0, "avg_logprob": -0.1362380055547918, "compression_ratio": 1.6977611940298507, "no_speech_prob": 0.44819194078445435}, {"id": 289, "seek": 231800, "start": 2318.0, "end": 2332.0, "text": " actually a lot from Jim DeClos group. And I think we have to understand what's going on I think to understand why transformers are so important and potentially why we should either care about them or not care about them actually.", "tokens": [50364, 767, 257, 688, 490, 6637, 1346, 34, 9389, 1594, 13, 400, 286, 519, 321, 362, 281, 1223, 437, 311, 516, 322, 286, 519, 281, 1223, 983, 4088, 433, 366, 370, 1021, 293, 7263, 983, 321, 820, 2139, 1127, 466, 552, 420, 406, 1127, 466, 552, 767, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11182805533721069, "compression_ratio": 1.7761194029850746, "no_speech_prob": 0.21412280201911926}, {"id": 290, "seek": 231800, "start": 2332.0, "end": 2345.0, "text": " But I think there's this all too familiar aspect where whatever is working extremely well, we need to compare that to the brain now. And I think we should kind of get ahead of it this time, because in this case we want to see where they're going.", "tokens": [51064, 583, 286, 519, 456, 311, 341, 439, 886, 4963, 4171, 689, 2035, 307, 1364, 4664, 731, 11, 321, 643, 281, 6794, 300, 281, 264, 3567, 586, 13, 400, 286, 519, 321, 820, 733, 295, 483, 2286, 295, 309, 341, 565, 11, 570, 294, 341, 1389, 321, 528, 281, 536, 689, 436, 434, 516, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11182805533721069, "compression_ratio": 1.7761194029850746, "no_speech_prob": 0.21412280201911926}, {"id": 291, "seek": 234500, "start": 2345.0, "end": 2362.0, "text": " And, again, one of the things that's kind of interesting is that when people compare these attention models specifically certain versions of them like clip to human behavior, you get a substantially improved performance in terms of like explaining", "tokens": [50364, 400, 11, 797, 11, 472, 295, 264, 721, 300, 311, 733, 295, 1880, 307, 300, 562, 561, 6794, 613, 3202, 5245, 4682, 1629, 9606, 295, 552, 411, 7353, 281, 1952, 5223, 11, 291, 483, 257, 30797, 9689, 3389, 294, 2115, 295, 411, 13468, 51214], "temperature": 0.0, "avg_logprob": -0.1571915809144365, "compression_ratio": 1.4702380952380953, "no_speech_prob": 0.051758863031864166}, {"id": 292, "seek": 236200, "start": 2362.0, "end": 2379.0, "text": " whether the misclassification errors are not in human visual systems. And I think the issue is like, we don't know why this is happening in the sense that like, in this paper, they mentioned that the particular vision transformer model that they tested was far better than all their", "tokens": [50364, 1968, 264, 3346, 11665, 3774, 13603, 366, 406, 294, 1952, 5056, 3652, 13, 400, 286, 519, 264, 2734, 307, 411, 11, 321, 500, 380, 458, 983, 341, 307, 2737, 294, 264, 2020, 300, 411, 11, 294, 341, 3035, 11, 436, 2835, 300, 264, 1729, 5201, 31782, 2316, 300, 436, 8246, 390, 1400, 1101, 813, 439, 641, 51214], "temperature": 0.0, "avg_logprob": -0.14272406895955403, "compression_ratio": 1.5326086956521738, "no_speech_prob": 0.7870457768440247}, {"id": 293, "seek": 237900, "start": 2379.0, "end": 2395.0, "text": " other models for explaining human behavior, but they weren't sure why at the time this was from a 2021 paper so I believe that they're still not sure but they what all they found was that the results show that this particular model clip was an outlier for their comparisons to human behavior.", "tokens": [50364, 661, 5245, 337, 13468, 1952, 5223, 11, 457, 436, 4999, 380, 988, 983, 412, 264, 565, 341, 390, 490, 257, 7201, 3035, 370, 286, 1697, 300, 436, 434, 920, 406, 988, 457, 436, 437, 439, 436, 1352, 390, 300, 264, 3542, 855, 300, 341, 1729, 2316, 7353, 390, 364, 484, 2753, 337, 641, 33157, 281, 1952, 5223, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11644033462770524, "compression_ratio": 1.6132596685082874, "no_speech_prob": 0.4682663679122925}, {"id": 294, "seek": 239500, "start": 2395.0, "end": 2407.0, "text": " And also there's been, like I said, you know this natural tendency to now compare convolution networks to transformer networks because the transformer networks are starting to outperform covenants, a lot of vision tasks.", "tokens": [50364, 400, 611, 456, 311, 668, 11, 411, 286, 848, 11, 291, 458, 341, 3303, 18187, 281, 586, 6794, 45216, 9590, 281, 31782, 9590, 570, 264, 31782, 9590, 366, 2891, 281, 484, 26765, 598, 553, 1719, 11, 257, 688, 295, 5201, 9608, 13, 50964], "temperature": 0.0, "avg_logprob": -0.15623379875631893, "compression_ratio": 1.7531380753138075, "no_speech_prob": 0.17079363763332367}, {"id": 295, "seek": 239500, "start": 2407.0, "end": 2420.0, "text": " So the question is now, which models are more similar to neuroscience or just human vision in general whether it be cognitive science as well, our contacts more similar or transformers more similar.", "tokens": [50964, 407, 264, 1168, 307, 586, 11, 597, 5245, 366, 544, 2531, 281, 42762, 420, 445, 1952, 5201, 294, 2674, 1968, 309, 312, 15605, 3497, 382, 731, 11, 527, 15836, 544, 2531, 420, 4088, 433, 544, 2531, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15623379875631893, "compression_ratio": 1.7531380753138075, "no_speech_prob": 0.17079363763332367}, {"id": 296, "seek": 242000, "start": 2420.0, "end": 2433.0, "text": " And intuitively you would think that there are certain properties of convolutions that make convolution convolution and transformer transformer. And what makes what we believe convolution and convolution is the fact that of", "tokens": [50364, 400, 46506, 291, 576, 519, 300, 456, 366, 1629, 7221, 295, 3754, 15892, 300, 652, 45216, 45216, 293, 31782, 31782, 13, 400, 437, 1669, 437, 321, 1697, 45216, 293, 45216, 307, 264, 1186, 300, 295, 51014], "temperature": 0.0, "avg_logprob": -0.17709540098141402, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.06749358028173447}, {"id": 297, "seek": 243300, "start": 2433.0, "end": 2448.0, "text": " equivariance, meaning as Phil mentioned, when you apply an operation to the input, the operation applied to the output should be the same type of operation. Now the issue is that this turns out not to be exactly true it turns out after training a vision", "tokens": [50364, 48726, 3504, 719, 11, 3620, 382, 7777, 2835, 11, 562, 291, 3079, 364, 6916, 281, 264, 4846, 11, 264, 6916, 6456, 281, 264, 5598, 820, 312, 264, 912, 2010, 295, 6916, 13, 823, 264, 2734, 307, 300, 341, 4523, 484, 406, 281, 312, 2293, 2074, 309, 4523, 484, 934, 3097, 257, 5201, 51114], "temperature": 0.0, "avg_logprob": -0.13810373121692288, "compression_ratio": 1.8081632653061224, "no_speech_prob": 0.789905309677124}, {"id": 298, "seek": 243300, "start": 2448.0, "end": 2457.0, "text": " transformer is more equivariant to translation than a continent, which I think is quite surprising so Phil might actually already know the issues with the convolution not being equivariant.", "tokens": [51114, 31782, 307, 544, 48726, 3504, 394, 281, 12853, 813, 257, 18932, 11, 597, 286, 519, 307, 1596, 8830, 370, 7777, 1062, 767, 1217, 458, 264, 2663, 365, 264, 45216, 406, 885, 48726, 3504, 394, 13, 51564], "temperature": 0.0, "avg_logprob": -0.13810373121692288, "compression_ratio": 1.8081632653061224, "no_speech_prob": 0.789905309677124}, {"id": 299, "seek": 245700, "start": 2457.0, "end": 2471.0, "text": " One thing being that a lot of the pooling and other operations even the non linearity contribute to hurting or harming the covariance performance. So this plot here is showing by this paper's measure, which is a lead derivative, the", "tokens": [50364, 1485, 551, 885, 300, 257, 688, 295, 264, 7005, 278, 293, 661, 7705, 754, 264, 2107, 8213, 507, 10586, 281, 17744, 420, 2233, 2810, 264, 49851, 719, 3389, 13, 407, 341, 7542, 510, 307, 4099, 538, 341, 3035, 311, 3481, 11, 597, 307, 257, 1477, 13760, 11, 264, 51064], "temperature": 0.0, "avg_logprob": -0.2449483871459961, "compression_ratio": 1.4871794871794872, "no_speech_prob": 0.5070027112960815}, {"id": 300, "seek": 247100, "start": 2472.0, "end": 2479.0, "text": " equivariance error of a component. This is Resnet 50 versus a vision transformer and turns out after training.", "tokens": [50414, 48726, 3504, 719, 6713, 295, 257, 6542, 13, 639, 307, 5015, 7129, 2625, 5717, 257, 5201, 31782, 293, 4523, 484, 934, 3097, 13, 50764], "temperature": 0.0, "avg_logprob": -0.3108944070750269, "compression_ratio": 1.838095238095238, "no_speech_prob": 0.34784644842147827}, {"id": 301, "seek": 247100, "start": 2479.0, "end": 2486.0, "text": " A vision transformer is translationally more equivariant than a component, which I think is quite not intuitive.", "tokens": [50764, 316, 5201, 31782, 307, 12853, 379, 544, 48726, 3504, 394, 813, 257, 6542, 11, 597, 286, 519, 307, 1596, 406, 21769, 13, 51114], "temperature": 0.0, "avg_logprob": -0.3108944070750269, "compression_ratio": 1.838095238095238, "no_speech_prob": 0.34784644842147827}, {"id": 302, "seek": 247100, "start": 2486.0, "end": 2495.0, "text": " And the, in the sense that we built in the equivariance specifically for a component, yet here we are and vision transformers are more for variant after training.", "tokens": [51114, 400, 264, 11, 294, 264, 2020, 300, 321, 3094, 294, 264, 48726, 3504, 719, 4682, 337, 257, 6542, 11, 1939, 510, 321, 366, 293, 5201, 4088, 433, 366, 544, 337, 17501, 934, 3097, 13, 51564], "temperature": 0.0, "avg_logprob": -0.3108944070750269, "compression_ratio": 1.838095238095238, "no_speech_prob": 0.34784644842147827}, {"id": 303, "seek": 249500, "start": 2495.0, "end": 2510.0, "text": " And then this on the right shows this is not just specific to these two architectures but many different architectures here. It's also an interesting to be also measure MLP mixers, which as Phil mentioned is kind of a new architecture also that also has surprisingly high", "tokens": [50364, 400, 550, 341, 322, 264, 558, 3110, 341, 307, 406, 445, 2685, 281, 613, 732, 6331, 1303, 457, 867, 819, 6331, 1303, 510, 13, 467, 311, 611, 364, 1880, 281, 312, 611, 3481, 21601, 47, 2890, 433, 11, 597, 382, 7777, 2835, 307, 733, 295, 257, 777, 9482, 611, 300, 611, 575, 17600, 1090, 51114], "temperature": 0.0, "avg_logprob": -0.20066547393798828, "compression_ratio": 1.5664739884393064, "no_speech_prob": 0.0432969406247139}, {"id": 304, "seek": 251000, "start": 2510.0, "end": 2519.0, "text": " equivariance after training. And this is equivariance improves as you increase image net test accuracy. So you have any questions here.", "tokens": [50364, 48726, 3504, 719, 934, 3097, 13, 400, 341, 307, 48726, 3504, 719, 24771, 382, 291, 3488, 3256, 2533, 1500, 14170, 13, 407, 291, 362, 604, 1651, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.26373687623039127, "compression_ratio": 1.8253275109170306, "no_speech_prob": 0.3770780861377716}, {"id": 305, "seek": 251000, "start": 2519.0, "end": 2523.0, "text": " Brian, one question. Do you have physical encoding on these networks?", "tokens": [50814, 10765, 11, 472, 1168, 13, 1144, 291, 362, 4001, 43430, 322, 613, 9590, 30, 51014], "temperature": 0.0, "avg_logprob": -0.26373687623039127, "compression_ratio": 1.8253275109170306, "no_speech_prob": 0.3770780861377716}, {"id": 306, "seek": 251000, "start": 2523.0, "end": 2524.0, "text": " Yeah, you do have visual.", "tokens": [51014, 865, 11, 291, 360, 362, 5056, 13, 51064], "temperature": 0.0, "avg_logprob": -0.26373687623039127, "compression_ratio": 1.8253275109170306, "no_speech_prob": 0.3770780861377716}, {"id": 307, "seek": 251000, "start": 2524.0, "end": 2527.0, "text": " So it shouldn't be equivariant.", "tokens": [51064, 407, 309, 4659, 380, 312, 48726, 3504, 394, 13, 51214], "temperature": 0.0, "avg_logprob": -0.26373687623039127, "compression_ratio": 1.8253275109170306, "no_speech_prob": 0.3770780861377716}, {"id": 308, "seek": 251000, "start": 2527.0, "end": 2529.0, "text": " Oh, well, this is like a measure of equivariant.", "tokens": [51214, 876, 11, 731, 11, 341, 307, 411, 257, 3481, 295, 48726, 3504, 394, 13, 51314], "temperature": 0.0, "avg_logprob": -0.26373687623039127, "compression_ratio": 1.8253275109170306, "no_speech_prob": 0.3770780861377716}, {"id": 309, "seek": 251000, "start": 2529.0, "end": 2531.0, "text": " No, no, I mean, it shouldn't be like.", "tokens": [51314, 883, 11, 572, 11, 286, 914, 11, 309, 4659, 380, 312, 411, 13, 51414], "temperature": 0.0, "avg_logprob": -0.26373687623039127, "compression_ratio": 1.8253275109170306, "no_speech_prob": 0.3770780861377716}, {"id": 310, "seek": 251000, "start": 2531.0, "end": 2532.0, "text": " Oh, it shouldn't be.", "tokens": [51414, 876, 11, 309, 4659, 380, 312, 13, 51464], "temperature": 0.0, "avg_logprob": -0.26373687623039127, "compression_ratio": 1.8253275109170306, "no_speech_prob": 0.3770780861377716}, {"id": 311, "seek": 251000, "start": 2532.0, "end": 2533.0, "text": " Yeah, it shouldn't be.", "tokens": [51464, 865, 11, 309, 4659, 380, 312, 13, 51514], "temperature": 0.0, "avg_logprob": -0.26373687623039127, "compression_ratio": 1.8253275109170306, "no_speech_prob": 0.3770780861377716}, {"id": 312, "seek": 251000, "start": 2533.0, "end": 2534.0, "text": " We have to learn to be.", "tokens": [51514, 492, 362, 281, 1466, 281, 312, 13, 51564], "temperature": 0.0, "avg_logprob": -0.26373687623039127, "compression_ratio": 1.8253275109170306, "no_speech_prob": 0.3770780861377716}, {"id": 313, "seek": 253400, "start": 2534.0, "end": 2539.0, "text": " So equivariance is very strictly by the patch. In this case, they're doing small transformations.", "tokens": [50364, 407, 48726, 3504, 719, 307, 588, 20792, 538, 264, 9972, 13, 682, 341, 1389, 11, 436, 434, 884, 1359, 34852, 13, 50614], "temperature": 0.0, "avg_logprob": -0.14437284026035044, "compression_ratio": 1.6875, "no_speech_prob": 0.10652287304401398}, {"id": 314, "seek": 253400, "start": 2539.0, "end": 2542.0, "text": " So it's not the size of a patch.", "tokens": [50614, 407, 309, 311, 406, 264, 2744, 295, 257, 9972, 13, 50764], "temperature": 0.0, "avg_logprob": -0.14437284026035044, "compression_ratio": 1.6875, "no_speech_prob": 0.10652287304401398}, {"id": 315, "seek": 253400, "start": 2542.0, "end": 2558.0, "text": " But since you asked that question, there's another paper that shows about invariance. And this is like much larger translations. And they show that actually after training a train vision transformer, which is a transformer model is as invariant to", "tokens": [50764, 583, 1670, 291, 2351, 300, 1168, 11, 456, 311, 1071, 3035, 300, 3110, 466, 33270, 719, 13, 400, 341, 307, 411, 709, 4833, 37578, 13, 400, 436, 855, 300, 767, 934, 3097, 257, 3847, 5201, 31782, 11, 597, 307, 257, 31782, 2316, 307, 382, 33270, 394, 281, 51564], "temperature": 0.0, "avg_logprob": -0.14437284026035044, "compression_ratio": 1.6875, "no_speech_prob": 0.10652287304401398}, {"id": 316, "seek": 255800, "start": 2558.0, "end": 2563.0, "text": " a translation shifts as a ResNet 18, which is a component.", "tokens": [50364, 257, 12853, 19201, 382, 257, 5015, 31890, 2443, 11, 597, 307, 257, 6542, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2705621292342001, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.1126856654882431}, {"id": 317, "seek": 255800, "start": 2563.0, "end": 2578.0, "text": " And this is kind of interesting because then the question is what's going on here, like, you know, we build in these things for our models, but apparently not building them in also gives us the thing that we want it.", "tokens": [50614, 400, 341, 307, 733, 295, 1880, 570, 550, 264, 1168, 307, 437, 311, 516, 322, 510, 11, 411, 11, 291, 458, 11, 321, 1322, 294, 613, 721, 337, 527, 5245, 11, 457, 7970, 406, 2390, 552, 294, 611, 2709, 505, 264, 551, 300, 321, 528, 309, 13, 51364], "temperature": 0.0, "avg_logprob": -0.2705621292342001, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.1126856654882431}, {"id": 318, "seek": 257800, "start": 2578.0, "end": 2590.0, "text": " So this kind of goes to the issue that maybe might be controversial, but has been kind of true, which is the idea of scalability. And are people familiar with the bitter lesson here, or has anyone heard of the bitter lesson.", "tokens": [50364, 407, 341, 733, 295, 1709, 281, 264, 2734, 300, 1310, 1062, 312, 17323, 11, 457, 575, 668, 733, 295, 2074, 11, 597, 307, 264, 1558, 295, 15664, 2310, 13, 400, 366, 561, 4963, 365, 264, 13871, 6898, 510, 11, 420, 575, 2878, 2198, 295, 264, 13871, 6898, 13, 50964], "temperature": 0.0, "avg_logprob": -0.15545705494127776, "compression_ratio": 1.7338709677419355, "no_speech_prob": 0.6681469678878784}, {"id": 319, "seek": 257800, "start": 2590.0, "end": 2601.0, "text": " This is like a classic controversial statement. I actually think a professor, a former professor here actually gave a retort to this thing by Rich Sutton who wrote that the lesson that we should take away.", "tokens": [50964, 639, 307, 411, 257, 7230, 17323, 5629, 13, 286, 767, 519, 257, 8304, 11, 257, 5819, 8304, 510, 767, 2729, 257, 1533, 477, 281, 341, 551, 538, 6781, 40492, 1756, 567, 4114, 300, 264, 6898, 300, 321, 820, 747, 1314, 13, 51514], "temperature": 0.0, "avg_logprob": -0.15545705494127776, "compression_ratio": 1.7338709677419355, "no_speech_prob": 0.6681469678878784}, {"id": 320, "seek": 260100, "start": 2601.0, "end": 2611.0, "text": " And I think in 2019 or 2018 is that we should not be working on inductive biases for models as much as we should be working on inductive biases for learning.", "tokens": [50364, 400, 286, 519, 294, 6071, 420, 6096, 307, 300, 321, 820, 406, 312, 1364, 322, 31612, 488, 32152, 337, 5245, 382, 709, 382, 321, 820, 312, 1364, 322, 31612, 488, 32152, 337, 2539, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11983549218428763, "compression_ratio": 1.7740585774058577, "no_speech_prob": 0.526760995388031}, {"id": 321, "seek": 260100, "start": 2611.0, "end": 2628.0, "text": " And I think one of the kind of key directions that organizations like OpenAI are going towards is the idea that we shouldn't really try to bake in these priors that we think are really, really useful, because at some point your data might give you that prior anyway.", "tokens": [50864, 400, 286, 519, 472, 295, 264, 733, 295, 2141, 11095, 300, 6150, 411, 7238, 48698, 366, 516, 3030, 307, 264, 1558, 300, 321, 4659, 380, 534, 853, 281, 16562, 294, 613, 1790, 830, 300, 321, 519, 366, 534, 11, 534, 4420, 11, 570, 412, 512, 935, 428, 1412, 1062, 976, 291, 300, 4059, 4033, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11983549218428763, "compression_ratio": 1.7740585774058577, "no_speech_prob": 0.526760995388031}, {"id": 322, "seek": 262800, "start": 2628.0, "end": 2632.0, "text": " And that could be what's happening here.", "tokens": [50364, 400, 300, 727, 312, 437, 311, 2737, 510, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07961363262600368, "compression_ratio": 1.3661971830985915, "no_speech_prob": 0.017432808876037598}, {"id": 323, "seek": 262800, "start": 2632.0, "end": 2642.0, "text": " And to give you a flavor for what's going on in the machine learning community, they're essentially optimizing the upper right hand corner of this curve.", "tokens": [50564, 400, 281, 976, 291, 257, 6813, 337, 437, 311, 516, 322, 294, 264, 3479, 2539, 1768, 11, 436, 434, 4476, 40425, 264, 6597, 558, 1011, 4538, 295, 341, 7605, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07961363262600368, "compression_ratio": 1.3661971830985915, "no_speech_prob": 0.017432808876037598}, {"id": 324, "seek": 264200, "start": 2642.0, "end": 2658.0, "text": " The x-axis here is the compute required to train these models. And the y-axis is the negative log-proplacity, which is essentially the task error, or task performance, I guess, not error.", "tokens": [50364, 440, 2031, 12, 24633, 510, 307, 264, 14722, 4739, 281, 3847, 613, 5245, 13, 400, 264, 288, 12, 24633, 307, 264, 3671, 3565, 12, 4318, 564, 19008, 11, 597, 307, 4476, 264, 5633, 6713, 11, 420, 5633, 3389, 11, 286, 2041, 11, 406, 6713, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16630700169777385, "compression_ratio": 1.375, "no_speech_prob": 0.21178317070007324}, {"id": 325, "seek": 265800, "start": 2658.0, "end": 2677.0, "text": " And in this case, what they're doing is they're trying to find architectures that go all the way up here in the performance curve. And they're essentially paying for that performance, not by incorporating inductive biases into their model, but by trying to absorb those inductive biases through data.", "tokens": [50364, 400, 294, 341, 1389, 11, 437, 436, 434, 884, 307, 436, 434, 1382, 281, 915, 6331, 1303, 300, 352, 439, 264, 636, 493, 510, 294, 264, 3389, 7605, 13, 400, 436, 434, 4476, 6229, 337, 300, 3389, 11, 406, 538, 33613, 31612, 488, 32152, 666, 641, 2316, 11, 457, 538, 1382, 281, 15631, 729, 31612, 488, 32152, 807, 1412, 13, 51314], "temperature": 0.0, "avg_logprob": -0.04700547456741333, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.02296478860080242}, {"id": 326, "seek": 267700, "start": 2677.0, "end": 2696.0, "text": " So I think to give you a glimpse of what's happening in the future is that there probably will be less inductive biases in this community of machine learning, because they're willing to pay this cost of compute to not have to build in the inductive bias that they would normally have to build in for smaller data sets.", "tokens": [50364, 407, 286, 519, 281, 976, 291, 257, 25838, 295, 437, 311, 2737, 294, 264, 2027, 307, 300, 456, 1391, 486, 312, 1570, 31612, 488, 32152, 294, 341, 1768, 295, 3479, 2539, 11, 570, 436, 434, 4950, 281, 1689, 341, 2063, 295, 14722, 281, 406, 362, 281, 1322, 294, 264, 31612, 488, 12577, 300, 436, 576, 5646, 362, 281, 1322, 294, 337, 4356, 1412, 6352, 13, 51314], "temperature": 0.0, "avg_logprob": -0.058784588523533035, "compression_ratio": 1.6736842105263159, "no_speech_prob": 0.0075742146000266075}, {"id": 327, "seek": 269600, "start": 2696.0, "end": 2718.0, "text": " And as Saul alluded to, which is the, or as actually Tommy also mentioned, it's just these architectures are getting more and more general purpose. So in this case, this is a transformer architecture, but unlike a transformer, this is an architecture that can attend not over the token level, but treats each pixel as a token.", "tokens": [50364, 400, 382, 35661, 33919, 281, 11, 597, 307, 264, 11, 420, 382, 767, 19448, 611, 2835, 11, 309, 311, 445, 613, 6331, 1303, 366, 1242, 544, 293, 544, 2674, 4334, 13, 407, 294, 341, 1389, 11, 341, 307, 257, 31782, 9482, 11, 457, 8343, 257, 31782, 11, 341, 307, 364, 9482, 300, 393, 6888, 406, 670, 264, 14862, 1496, 11, 457, 19566, 1184, 19261, 382, 257, 14862, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12834801938798693, "compression_ratio": 1.6464646464646464, "no_speech_prob": 0.12572939693927765}, {"id": 328, "seek": 271800, "start": 2719.0, "end": 2743.0, "text": " And what's interesting about this is that they actually train this on ImageNet without any image prior. So the positioning coding that Phil mentioned was actually learned by the model, and they could actually get performance on the order of, you know, normal image prior oriented models like comp nets and, you know, patch vision transformers.", "tokens": [50414, 400, 437, 311, 1880, 466, 341, 307, 300, 436, 767, 3847, 341, 322, 29903, 31890, 1553, 604, 3256, 4059, 13, 407, 264, 26381, 17720, 300, 7777, 2835, 390, 767, 3264, 538, 264, 2316, 11, 293, 436, 727, 767, 483, 3389, 322, 264, 1668, 295, 11, 291, 458, 11, 2710, 3256, 4059, 21841, 5245, 411, 715, 36170, 293, 11, 291, 458, 11, 9972, 5201, 4088, 433, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11585563932146345, "compression_ratio": 1.6570048309178744, "no_speech_prob": 0.09657102078199387}, {"id": 329, "seek": 274300, "start": 2743.0, "end": 2760.0, "text": " So the remarkable consequence of this is that there's no actual image prior or modality prior built into this model. It learned it on its own. And even in that perspective, it's still competitive on ImageNet. So this is not necessarily a very large data set either.", "tokens": [50364, 407, 264, 12802, 18326, 295, 341, 307, 300, 456, 311, 572, 3539, 3256, 4059, 420, 1072, 1860, 4059, 3094, 666, 341, 2316, 13, 467, 3264, 309, 322, 1080, 1065, 13, 400, 754, 294, 300, 4585, 11, 309, 311, 920, 10043, 322, 29903, 31890, 13, 407, 341, 307, 406, 4725, 257, 588, 2416, 1412, 992, 2139, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07802054087320963, "compression_ratio": 1.4804469273743017, "no_speech_prob": 0.01016273070126772}, {"id": 330, "seek": 276000, "start": 2760.0, "end": 2766.0, "text": " Do you know if the perceiver of Brian also has like a texture bias, for example, or if in general robustness?", "tokens": [50364, 1144, 291, 458, 498, 264, 9016, 1837, 295, 10765, 611, 575, 411, 257, 8091, 12577, 11, 337, 1365, 11, 420, 498, 294, 2674, 13956, 1287, 30, 50664], "temperature": 0.0, "avg_logprob": -0.16503024305033887, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.13457034528255463}, {"id": 331, "seek": 276000, "start": 2766.0, "end": 2787.0, "text": " I don't think we've looked into that. I think the robustness qualities are probably not too different from standard models. I think in terms of adversarial examples, like transformers are, well, I think it's controversial, but I think people say transformers are a little bit more robust adversarial examples than comp nets, but on the grand scheme of things, they're both very susceptible to adversarial examples.", "tokens": [50664, 286, 500, 380, 519, 321, 600, 2956, 666, 300, 13, 286, 519, 264, 13956, 1287, 16477, 366, 1391, 406, 886, 819, 490, 3832, 5245, 13, 286, 519, 294, 2115, 295, 17641, 44745, 5110, 11, 411, 4088, 433, 366, 11, 731, 11, 286, 519, 309, 311, 17323, 11, 457, 286, 519, 561, 584, 4088, 433, 366, 257, 707, 857, 544, 13956, 17641, 44745, 5110, 813, 715, 36170, 11, 457, 322, 264, 2697, 12232, 295, 721, 11, 436, 434, 1293, 588, 31249, 281, 17641, 44745, 5110, 13, 51714], "temperature": 0.0, "avg_logprob": -0.16503024305033887, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.13457034528255463}, {"id": 332, "seek": 278700, "start": 2788.0, "end": 2801.0, "text": " I mean, just to finish, I was just curious to see if, you know, I'm sure there's many models now that they can all do whatever 75% on ImageNet, but not all of them will see like a human, whether that's a goal or not, right?", "tokens": [50414, 286, 914, 11, 445, 281, 2413, 11, 286, 390, 445, 6369, 281, 536, 498, 11, 291, 458, 11, 286, 478, 988, 456, 311, 867, 5245, 586, 300, 436, 393, 439, 360, 2035, 9562, 4, 322, 29903, 31890, 11, 457, 406, 439, 295, 552, 486, 536, 411, 257, 1952, 11, 1968, 300, 311, 257, 3387, 420, 406, 11, 558, 30, 51064], "temperature": 0.0, "avg_logprob": -0.10796573638916016, "compression_ratio": 1.6347517730496455, "no_speech_prob": 0.12069544196128845}, {"id": 333, "seek": 278700, "start": 2801.0, "end": 2810.0, "text": " Right, that's a good question. And I think like we have to now be aware that this is where the field is going. Is that where we're going as well as a field? Not, yeah.", "tokens": [51064, 1779, 11, 300, 311, 257, 665, 1168, 13, 400, 286, 519, 411, 321, 362, 281, 586, 312, 3650, 300, 341, 307, 689, 264, 2519, 307, 516, 13, 1119, 300, 689, 321, 434, 516, 382, 731, 382, 257, 2519, 30, 1726, 11, 1338, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10796573638916016, "compression_ratio": 1.6347517730496455, "no_speech_prob": 0.12069544196128845}, {"id": 334, "seek": 278700, "start": 2810.0, "end": 2813.0, "text": " What does it mean to learn position features in the case of an image?", "tokens": [51514, 708, 775, 309, 914, 281, 1466, 2535, 4122, 294, 264, 1389, 295, 364, 3256, 30, 51664], "temperature": 0.0, "avg_logprob": -0.10796573638916016, "compression_ratio": 1.6347517730496455, "no_speech_prob": 0.12069544196128845}, {"id": 335, "seek": 281300, "start": 2813.0, "end": 2818.0, "text": " Well, you randomly initialize the position encoding to be just from like a random Gaussian or something.", "tokens": [50364, 1042, 11, 291, 16979, 5883, 1125, 264, 2535, 43430, 281, 312, 445, 490, 411, 257, 4974, 39148, 420, 746, 13, 50614], "temperature": 0.0, "avg_logprob": -0.21557344496250153, "compression_ratio": 1.8093525179856116, "no_speech_prob": 0.008843683637678623}, {"id": 336, "seek": 281300, "start": 2818.0, "end": 2823.0, "text": " The position of the pixels in the image, so it's like an unordered set of pixels.", "tokens": [50614, 440, 2535, 295, 264, 18668, 294, 264, 3256, 11, 370, 309, 311, 411, 364, 517, 765, 4073, 992, 295, 18668, 13, 50864], "temperature": 0.0, "avg_logprob": -0.21557344496250153, "compression_ratio": 1.8093525179856116, "no_speech_prob": 0.008843683637678623}, {"id": 337, "seek": 281300, "start": 2823.0, "end": 2829.0, "text": " Right, so you treat the pixels as, you treat each pixel as an unordered element in a set.", "tokens": [50864, 1779, 11, 370, 291, 2387, 264, 18668, 382, 11, 291, 2387, 1184, 19261, 382, 364, 517, 765, 4073, 4478, 294, 257, 992, 13, 51164], "temperature": 0.0, "avg_logprob": -0.21557344496250153, "compression_ratio": 1.8093525179856116, "no_speech_prob": 0.008843683637678623}, {"id": 338, "seek": 281300, "start": 2829.0, "end": 2836.0, "text": " Wait, Brian, is there the case that the top left pixel will always get the same positional encoding? It'll be a learned.", "tokens": [51164, 3802, 11, 10765, 11, 307, 456, 264, 1389, 300, 264, 1192, 1411, 19261, 486, 1009, 483, 264, 912, 2535, 304, 43430, 30, 467, 603, 312, 257, 3264, 13, 51514], "temperature": 0.0, "avg_logprob": -0.21557344496250153, "compression_ratio": 1.8093525179856116, "no_speech_prob": 0.008843683637678623}, {"id": 339, "seek": 281300, "start": 2836.0, "end": 2841.0, "text": " Yeah, so, yeah, so it's not like you shuffle every image independently of every other image and then get.", "tokens": [51514, 865, 11, 370, 11, 1338, 11, 370, 309, 311, 406, 411, 291, 39426, 633, 3256, 21761, 295, 633, 661, 3256, 293, 550, 483, 13, 51764], "temperature": 0.0, "avg_logprob": -0.21557344496250153, "compression_ratio": 1.8093525179856116, "no_speech_prob": 0.008843683637678623}, {"id": 340, "seek": 284100, "start": 2841.0, "end": 2844.0, "text": " So I think it's still inserting a lot of information there.", "tokens": [50364, 407, 286, 519, 309, 311, 920, 46567, 257, 688, 295, 1589, 456, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1282916022735892, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.006902396213263273}, {"id": 341, "seek": 284100, "start": 2844.0, "end": 2848.0, "text": " Well, the prior that they're inserting is that the topology is consistent across samples.", "tokens": [50514, 1042, 11, 264, 4059, 300, 436, 434, 46567, 307, 300, 264, 1192, 1793, 307, 8398, 2108, 10938, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1282916022735892, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.006902396213263273}, {"id": 342, "seek": 284100, "start": 2848.0, "end": 2849.0, "text": " Yeah.", "tokens": [50714, 865, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1282916022735892, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.006902396213263273}, {"id": 343, "seek": 284100, "start": 2849.0, "end": 2857.0, "text": " Which I think is reasonable about modalities mostly, like you would imagine that the position shouldn't be unique to every single sample.", "tokens": [50764, 3013, 286, 519, 307, 10585, 466, 1072, 16110, 5240, 11, 411, 291, 576, 3811, 300, 264, 2535, 4659, 380, 312, 3845, 281, 633, 2167, 6889, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1282916022735892, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.006902396213263273}, {"id": 344, "seek": 284100, "start": 2857.0, "end": 2864.0, "text": " Because in that case, then I think the problem would be almost like really, really hard.", "tokens": [51164, 1436, 294, 300, 1389, 11, 550, 286, 519, 264, 1154, 576, 312, 1920, 411, 534, 11, 534, 1152, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1282916022735892, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.006902396213263273}, {"id": 345, "seek": 284100, "start": 2864.0, "end": 2866.0, "text": " I don't know if you can even learn anything.", "tokens": [51514, 286, 500, 380, 458, 498, 291, 393, 754, 1466, 1340, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1282916022735892, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.006902396213263273}, {"id": 346, "seek": 286600, "start": 2866.0, "end": 2868.0, "text": " Like randomly shuffle all the pixels in an image.", "tokens": [50364, 1743, 16979, 39426, 439, 264, 18668, 294, 364, 3256, 13, 50464], "temperature": 0.0, "avg_logprob": -0.21887521576463131, "compression_ratio": 1.6548042704626333, "no_speech_prob": 0.0067648631520569324}, {"id": 347, "seek": 286600, "start": 2868.0, "end": 2870.0, "text": " Yeah, I don't know what you're going to be able to learn.", "tokens": [50464, 865, 11, 286, 500, 380, 458, 437, 291, 434, 516, 281, 312, 1075, 281, 1466, 13, 50564], "temperature": 0.0, "avg_logprob": -0.21887521576463131, "compression_ratio": 1.6548042704626333, "no_speech_prob": 0.0067648631520569324}, {"id": 348, "seek": 286600, "start": 2870.0, "end": 2873.0, "text": " Every image has its own permutation that you give to the models.", "tokens": [50564, 2048, 3256, 575, 1080, 1065, 4784, 11380, 300, 291, 976, 281, 264, 5245, 13, 50714], "temperature": 0.0, "avg_logprob": -0.21887521576463131, "compression_ratio": 1.6548042704626333, "no_speech_prob": 0.0067648631520569324}, {"id": 349, "seek": 286600, "start": 2873.0, "end": 2880.0, "text": " You could learn like higher like statistics, I guess, over like what fixes together.", "tokens": [50714, 509, 727, 1466, 411, 2946, 411, 12523, 11, 286, 2041, 11, 670, 411, 437, 32539, 1214, 13, 51064], "temperature": 0.0, "avg_logprob": -0.21887521576463131, "compression_ratio": 1.6548042704626333, "no_speech_prob": 0.0067648631520569324}, {"id": 350, "seek": 286600, "start": 2880.0, "end": 2888.0, "text": " Another number is how many training example it takes to train this compared to a convolutional network.", "tokens": [51064, 3996, 1230, 307, 577, 867, 3097, 1365, 309, 2516, 281, 3847, 341, 5347, 281, 257, 45216, 304, 3209, 13, 51464], "temperature": 0.0, "avg_logprob": -0.21887521576463131, "compression_ratio": 1.6548042704626333, "no_speech_prob": 0.0067648631520569324}, {"id": 351, "seek": 286600, "start": 2888.0, "end": 2894.0, "text": " Right, so I think one of the things that we know is that it takes more data to train a vision transfer.", "tokens": [51464, 1779, 11, 370, 286, 519, 472, 295, 264, 721, 300, 321, 458, 307, 300, 309, 2516, 544, 1412, 281, 3847, 257, 5201, 5003, 13, 51764], "temperature": 0.0, "avg_logprob": -0.21887521576463131, "compression_ratio": 1.6548042704626333, "no_speech_prob": 0.0067648631520569324}, {"id": 352, "seek": 289400, "start": 2894.0, "end": 2896.0, "text": " But do you have the number for this?", "tokens": [50364, 583, 360, 291, 362, 264, 1230, 337, 341, 30, 50464], "temperature": 0.0, "avg_logprob": -0.18651311359708272, "compression_ratio": 1.6940298507462686, "no_speech_prob": 0.006285192910581827}, {"id": 353, "seek": 289400, "start": 2896.0, "end": 2899.0, "text": " This is, I think, just ImageNet with augmentations, actually.", "tokens": [50464, 639, 307, 11, 286, 519, 11, 445, 29903, 31890, 365, 29919, 763, 11, 767, 13, 50614], "temperature": 0.0, "avg_logprob": -0.18651311359708272, "compression_ratio": 1.6940298507462686, "no_speech_prob": 0.006285192910581827}, {"id": 354, "seek": 289400, "start": 2899.0, "end": 2901.0, "text": " This isn't like a larger data set.", "tokens": [50614, 639, 1943, 380, 411, 257, 4833, 1412, 992, 13, 50714], "temperature": 0.0, "avg_logprob": -0.18651311359708272, "compression_ratio": 1.6940298507462686, "no_speech_prob": 0.006285192910581827}, {"id": 355, "seek": 289400, "start": 2901.0, "end": 2905.0, "text": " This is just augmentation, providing the extra information.", "tokens": [50714, 639, 307, 445, 14501, 19631, 11, 6530, 264, 2857, 1589, 13, 50914], "temperature": 0.0, "avg_logprob": -0.18651311359708272, "compression_ratio": 1.6940298507462686, "no_speech_prob": 0.006285192910581827}, {"id": 356, "seek": 289400, "start": 2905.0, "end": 2910.0, "text": " Yeah, I don't have the numbers, but the cursor I've seen tend to be, you know, we have a whiteboard.", "tokens": [50914, 865, 11, 286, 500, 380, 362, 264, 3547, 11, 457, 264, 28169, 286, 600, 1612, 3928, 281, 312, 11, 291, 458, 11, 321, 362, 257, 2418, 3787, 13, 51164], "temperature": 0.0, "avg_logprob": -0.18651311359708272, "compression_ratio": 1.6940298507462686, "no_speech_prob": 0.006285192910581827}, {"id": 357, "seek": 289400, "start": 2910.0, "end": 2916.0, "text": " So the connet is it starts here and goes kind of flat and the transformer starts down here and goes up.", "tokens": [51164, 407, 264, 416, 7129, 307, 309, 3719, 510, 293, 1709, 733, 295, 4962, 293, 264, 31782, 3719, 760, 510, 293, 1709, 493, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18651311359708272, "compression_ratio": 1.6940298507462686, "no_speech_prob": 0.006285192910581827}, {"id": 358, "seek": 289400, "start": 2916.0, "end": 2920.0, "text": " So it scales better, but for low data, it's very worse.", "tokens": [51464, 407, 309, 17408, 1101, 11, 457, 337, 2295, 1412, 11, 309, 311, 588, 5324, 13, 51664], "temperature": 0.0, "avg_logprob": -0.18651311359708272, "compression_ratio": 1.6940298507462686, "no_speech_prob": 0.006285192910581827}, {"id": 359, "seek": 292000, "start": 2920.0, "end": 2938.0, "text": " I think that's one of the things that why the community is going towards like industry, especially going towards this direction, because they're willing to pay for the scale via compute costs, rather than having the kind of built in data points, I guess, be not, you know, for free, I guess,", "tokens": [50364, 286, 519, 300, 311, 472, 295, 264, 721, 300, 983, 264, 1768, 307, 516, 3030, 411, 3518, 11, 2318, 516, 3030, 341, 3513, 11, 570, 436, 434, 4950, 281, 1689, 337, 264, 4373, 5766, 14722, 5497, 11, 2831, 813, 1419, 264, 733, 295, 3094, 294, 1412, 2793, 11, 286, 2041, 11, 312, 406, 11, 291, 458, 11, 337, 1737, 11, 286, 2041, 11, 51264], "temperature": 0.0, "avg_logprob": -0.20029671512432953, "compression_ratio": 1.598901098901099, "no_speech_prob": 0.016905270516872406}, {"id": 360, "seek": 293800, "start": 2938.0, "end": 2955.0, "text": " What happens is that convolutions after a certain level of scale will start saturating and transformers still continue to go up in terms of increasing the parameter count will give you still positive returns in performance.", "tokens": [50364, 708, 2314, 307, 300, 3754, 15892, 934, 257, 1629, 1496, 295, 4373, 486, 722, 21160, 990, 293, 4088, 433, 920, 2354, 281, 352, 493, 294, 2115, 295, 5662, 264, 13075, 1207, 486, 976, 291, 920, 3353, 11247, 294, 3389, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1920679049058394, "compression_ratio": 1.5170068027210883, "no_speech_prob": 0.4486716389656067}, {"id": 361, "seek": 295500, "start": 2955.0, "end": 2960.0, "text": " What's interesting in this talk is also there have been a lot of other variations of transformers as well.", "tokens": [50364, 708, 311, 1880, 294, 341, 751, 307, 611, 456, 362, 668, 257, 688, 295, 661, 17840, 295, 4088, 433, 382, 731, 13, 50614], "temperature": 0.0, "avg_logprob": -0.18952702502815091, "compression_ratio": 1.793859649122807, "no_speech_prob": 0.6456567049026489}, {"id": 362, "seek": 295500, "start": 2960.0, "end": 2969.0, "text": " And it's kind of strange, actually, people have at least Google has done a meta analysis on transformers and all the zoo of their variations of them.", "tokens": [50614, 400, 309, 311, 733, 295, 5861, 11, 767, 11, 561, 362, 412, 1935, 3329, 575, 1096, 257, 19616, 5215, 322, 4088, 433, 293, 439, 264, 25347, 295, 641, 17840, 295, 552, 13, 51064], "temperature": 0.0, "avg_logprob": -0.18952702502815091, "compression_ratio": 1.793859649122807, "no_speech_prob": 0.6456567049026489}, {"id": 363, "seek": 295500, "start": 2969.0, "end": 2976.0, "text": " And at least in terms of scalability, it seems like the original transformers actually scales the best, which is a little bit odd.", "tokens": [51064, 400, 412, 1935, 294, 2115, 295, 15664, 2310, 11, 309, 2544, 411, 264, 3380, 4088, 433, 767, 17408, 264, 1151, 11, 597, 307, 257, 707, 857, 7401, 13, 51414], "temperature": 0.0, "avg_logprob": -0.18952702502815091, "compression_ratio": 1.793859649122807, "no_speech_prob": 0.6456567049026489}, {"id": 364, "seek": 295500, "start": 2976.0, "end": 2978.0, "text": " Which one's the best.", "tokens": [51414, 3013, 472, 311, 264, 1151, 13, 51514], "temperature": 0.0, "avg_logprob": -0.18952702502815091, "compression_ratio": 1.793859649122807, "no_speech_prob": 0.6456567049026489}, {"id": 365, "seek": 297800, "start": 2978.0, "end": 2981.0, "text": " The vision transformers are also sparse mixture of extra transformers.", "tokens": [50364, 440, 5201, 4088, 433, 366, 611, 637, 11668, 9925, 295, 2857, 4088, 433, 13, 50514], "temperature": 0.0, "avg_logprob": -0.3196521186828613, "compression_ratio": 1.4026845637583893, "no_speech_prob": 0.04080919176340103}, {"id": 366, "seek": 297800, "start": 2981.0, "end": 2986.0, "text": " Those apparently both scale the AT the AT well.", "tokens": [50514, 3950, 7970, 1293, 4373, 264, 8872, 264, 8872, 731, 13, 50764], "temperature": 0.0, "avg_logprob": -0.3196521186828613, "compression_ratio": 1.4026845637583893, "no_speech_prob": 0.04080919176340103}, {"id": 367, "seek": 297800, "start": 2986.0, "end": 2994.0, "text": " Don't remember if they were specifically doing vision. I think it was more language tasks.", "tokens": [50764, 1468, 380, 1604, 498, 436, 645, 4682, 884, 5201, 13, 286, 519, 309, 390, 544, 2856, 9608, 13, 51164], "temperature": 0.0, "avg_logprob": -0.3196521186828613, "compression_ratio": 1.4026845637583893, "no_speech_prob": 0.04080919176340103}, {"id": 368, "seek": 299400, "start": 2994.0, "end": 3009.0, "text": " I think this kind of tells you a story that maybe the machine learning community is going towards, which is not, you know, the fact that architecture matters the most, but the fact that data is actually the really important aspect and I think they're", "tokens": [50364, 286, 519, 341, 733, 295, 5112, 291, 257, 1657, 300, 1310, 264, 3479, 2539, 1768, 307, 516, 3030, 11, 597, 307, 406, 11, 291, 458, 11, 264, 1186, 300, 9482, 7001, 264, 881, 11, 457, 264, 1186, 300, 1412, 307, 767, 264, 534, 1021, 4171, 293, 286, 519, 436, 434, 51114], "temperature": 0.0, "avg_logprob": -0.07521443725914083, "compression_ratio": 1.8178137651821862, "no_speech_prob": 0.42162463068962097}, {"id": 369, "seek": 299400, "start": 3009.0, "end": 3022.0, "text": " building now architectures that aren't necessarily good at working well without, you know, being trained, but furthermore work well at absorbing data a lot more efficiently than other architectures.", "tokens": [51114, 2390, 586, 6331, 1303, 300, 3212, 380, 4725, 665, 412, 1364, 731, 1553, 11, 291, 458, 11, 885, 8895, 11, 457, 3052, 3138, 589, 731, 412, 38720, 1412, 257, 688, 544, 19621, 813, 661, 6331, 1303, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07521443725914083, "compression_ratio": 1.8178137651821862, "no_speech_prob": 0.42162463068962097}, {"id": 370, "seek": 302200, "start": 3022.0, "end": 3038.0, "text": " So like we should think about the things that leads to the resulting model that we work with these days, which is the idea that it's not just the model itself with its architecture, but there are priors about, you know, the compute the capacity of the model to train", "tokens": [50364, 407, 411, 321, 820, 519, 466, 264, 721, 300, 6689, 281, 264, 16505, 2316, 300, 321, 589, 365, 613, 1708, 11, 597, 307, 264, 1558, 300, 309, 311, 406, 445, 264, 2316, 2564, 365, 1080, 9482, 11, 457, 456, 366, 1790, 830, 466, 11, 291, 458, 11, 264, 14722, 264, 6042, 295, 264, 2316, 281, 3847, 51164], "temperature": 0.0, "avg_logprob": -0.151097043355306, "compression_ratio": 1.6319018404907975, "no_speech_prob": 0.038423310965299606}, {"id": 371, "seek": 303800, "start": 3038.0, "end": 3056.0, "text": " that data and also more importantly now more recently. Nice thing is that like as Phil mentioned the notion that a lot of these models don't require supervision so they can absorb larger and larger data sets without much economic cost to the person training it.", "tokens": [50364, 300, 1412, 293, 611, 544, 8906, 586, 544, 3938, 13, 5490, 551, 307, 300, 411, 382, 7777, 2835, 264, 10710, 300, 257, 688, 295, 613, 5245, 500, 380, 3651, 32675, 370, 436, 393, 15631, 4833, 293, 4833, 1412, 6352, 1553, 709, 4836, 2063, 281, 264, 954, 3097, 309, 13, 51264], "temperature": 0.0, "avg_logprob": -0.19629966088061063, "compression_ratio": 1.5535714285714286, "no_speech_prob": 0.569227933883667}, {"id": 372, "seek": 305600, "start": 3056.0, "end": 3070.0, "text": " One also another aspect of Transformers is the way it was created was mainly as an alternative to recurrent networks. And the reason for that is because as you see in the left arrow I mentioned hardware, and one of the things about Transformers is that they're much more", "tokens": [50364, 1485, 611, 1071, 4171, 295, 27938, 433, 307, 264, 636, 309, 390, 2942, 390, 8704, 382, 364, 8535, 281, 18680, 1753, 9590, 13, 400, 264, 1778, 337, 300, 307, 570, 382, 291, 536, 294, 264, 1411, 11610, 286, 2835, 8837, 11, 293, 472, 295, 264, 721, 466, 27938, 433, 307, 300, 436, 434, 709, 544, 51064], "temperature": 0.0, "avg_logprob": -0.1271940085847499, "compression_ratio": 1.5254237288135593, "no_speech_prob": 0.11403007805347443}, {"id": 373, "seek": 307000, "start": 3070.0, "end": 3086.0, "text": " on GPUs than a recurrent network is and they run much more better on like, you know, stupidly parallel software and a recurrent network does and that's why they become very popular also is because the parallelization of them is much easier than other sequence models.", "tokens": [50364, 322, 18407, 82, 813, 257, 18680, 1753, 3209, 307, 293, 436, 1190, 709, 544, 1101, 322, 411, 11, 291, 458, 11, 6631, 356, 8952, 4722, 293, 257, 18680, 1753, 3209, 775, 293, 300, 311, 983, 436, 1813, 588, 3743, 611, 307, 570, 264, 8952, 2144, 295, 552, 307, 709, 3571, 813, 661, 8310, 5245, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2113369117348881, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.15023717284202576}, {"id": 374, "seek": 308600, "start": 3086.0, "end": 3098.0, "text": " One comment if I may make how I view this like I feel when you go to Transformers just by introducing the idea of attention dynamically handled by the data you kind of have.", "tokens": [50364, 1485, 2871, 498, 286, 815, 652, 577, 286, 1910, 341, 411, 286, 841, 562, 291, 352, 281, 27938, 433, 445, 538, 15424, 264, 1558, 295, 3202, 43492, 18033, 538, 264, 1412, 291, 733, 295, 362, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1449265718460083, "compression_ratio": 1.3106060606060606, "no_speech_prob": 0.15217173099517822}, {"id": 375, "seek": 309800, "start": 3098.0, "end": 3111.0, "text": " It's an overstatement but you know as general architecture as you can have kind of like, you know, you have really powerful architecture and now to train it you need a lot of data and this is really where we are now.", "tokens": [50364, 467, 311, 364, 670, 19435, 1712, 457, 291, 458, 382, 2674, 9482, 382, 291, 393, 362, 733, 295, 411, 11, 291, 458, 11, 291, 362, 534, 4005, 9482, 293, 586, 281, 3847, 309, 291, 643, 257, 688, 295, 1412, 293, 341, 307, 534, 689, 321, 366, 586, 13, 51014], "temperature": 0.0, "avg_logprob": -0.2129259216651488, "compression_ratio": 1.722943722943723, "no_speech_prob": 0.6147050857543945}, {"id": 376, "seek": 309800, "start": 3111.0, "end": 3127.0, "text": " And more data does better just because the architecture is extremely general, much more than conventional as you said. So I don't know if there will be any other fancy architecture.", "tokens": [51014, 400, 544, 1412, 775, 1101, 445, 570, 264, 9482, 307, 4664, 2674, 11, 709, 544, 813, 16011, 382, 291, 848, 13, 407, 286, 500, 380, 458, 498, 456, 486, 312, 604, 661, 10247, 9482, 13, 51814], "temperature": 0.0, "avg_logprob": -0.2129259216651488, "compression_ratio": 1.722943722943723, "no_speech_prob": 0.6147050857543945}, {"id": 377, "seek": 312700, "start": 3127.0, "end": 3139.0, "text": " One is there are lacking one thing which is vanilla Transformers don't have memory. They don't have feedback connections. And so they're not doing complete in the same way that RNN is.", "tokens": [50364, 1485, 307, 456, 366, 20889, 472, 551, 597, 307, 17528, 27938, 433, 500, 380, 362, 4675, 13, 814, 500, 380, 362, 5824, 9271, 13, 400, 370, 436, 434, 406, 884, 3566, 294, 264, 912, 636, 300, 45702, 45, 307, 13, 50964], "temperature": 0.0, "avg_logprob": -0.17988855698529413, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.03352634236216545}, {"id": 378, "seek": 312700, "start": 3139.0, "end": 3151.0, "text": " Of course people are adding memory and recurrence to Transformers but the still the majority of them don't have that so that's like actually I think a big limitation they don't have memory.", "tokens": [50964, 2720, 1164, 561, 366, 5127, 4675, 293, 18680, 10760, 281, 27938, 433, 457, 264, 920, 264, 6286, 295, 552, 500, 380, 362, 300, 370, 300, 311, 411, 767, 286, 519, 257, 955, 27432, 436, 500, 380, 362, 4675, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17988855698529413, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.03352634236216545}, {"id": 379, "seek": 315100, "start": 3152.0, "end": 3166.0, "text": " And then two is yeah, you know, eventually look up tables will perform best or you know nearest neighbor will perform best because the limit of infinite data those work and we don't have these work in the limit of infinite data.", "tokens": [50414, 400, 550, 732, 307, 1338, 11, 291, 458, 11, 4728, 574, 493, 8020, 486, 2042, 1151, 420, 291, 458, 23831, 5987, 486, 2042, 1151, 570, 264, 4948, 295, 13785, 1412, 729, 589, 293, 321, 500, 380, 362, 613, 589, 294, 264, 4948, 295, 13785, 1412, 13, 51114], "temperature": 0.0, "avg_logprob": -0.18944492892942566, "compression_ratio": 1.6906077348066297, "no_speech_prob": 0.05913427472114563}, {"id": 380, "seek": 315100, "start": 3166.0, "end": 3172.0, "text": " Yeah, I agree it's not surprising that you need less traction with more data.", "tokens": [51114, 865, 11, 286, 3986, 309, 311, 406, 8830, 300, 291, 643, 1570, 23558, 365, 544, 1412, 13, 51414], "temperature": 0.0, "avg_logprob": -0.18944492892942566, "compression_ratio": 1.6906077348066297, "no_speech_prob": 0.05913427472114563}, {"id": 381, "seek": 317200, "start": 3172.0, "end": 3177.0, "text": " Brian you were saying like there's choices to be made for if we're interested in models of brain systems.", "tokens": [50364, 10765, 291, 645, 1566, 411, 456, 311, 7994, 281, 312, 1027, 337, 498, 321, 434, 3102, 294, 5245, 295, 3567, 3652, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10798969107159113, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.2805539071559906}, {"id": 382, "seek": 317200, "start": 3177.0, "end": 3189.0, "text": " So the question is like, what are we interested in in terms of if these architectures become less biased towards being structurally more relevant to neuroscience, but just being more task relevant to neuroscience.", "tokens": [50614, 407, 264, 1168, 307, 411, 11, 437, 366, 321, 3102, 294, 294, 2115, 295, 498, 613, 6331, 1303, 1813, 1570, 28035, 3030, 885, 6594, 6512, 544, 7340, 281, 42762, 11, 457, 445, 885, 544, 5633, 7340, 281, 42762, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10798969107159113, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.2805539071559906}, {"id": 383, "seek": 317200, "start": 3189.0, "end": 3194.0, "text": " Like, are we going to be stuck at some level of understanding that's only functional.", "tokens": [51214, 1743, 11, 366, 321, 516, 281, 312, 5541, 412, 512, 1496, 295, 3701, 300, 311, 787, 11745, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10798969107159113, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.2805539071559906}, {"id": 384, "seek": 317200, "start": 3194.0, "end": 3201.0, "text": " What makes them structurally that's relevant that's sort of why I was asking these kind of wait questions right. Why do you say that.", "tokens": [51464, 708, 1669, 552, 6594, 6512, 300, 311, 7340, 300, 311, 1333, 295, 983, 286, 390, 3365, 613, 733, 295, 1699, 1651, 558, 13, 1545, 360, 291, 584, 300, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10798969107159113, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.2805539071559906}, {"id": 385, "seek": 320100, "start": 3201.0, "end": 3209.0, "text": " Well, I don't. Yeah, so I think the tricky part is like, I think, because things work well people will find ways to say that they're more structurally relevant.", "tokens": [50364, 1042, 11, 286, 500, 380, 13, 865, 11, 370, 286, 519, 264, 12414, 644, 307, 411, 11, 286, 519, 11, 570, 721, 589, 731, 561, 486, 915, 2098, 281, 584, 300, 436, 434, 544, 6594, 6512, 7340, 13, 50764], "temperature": 0.0, "avg_logprob": -0.17814886441794775, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.0024333312176167965}, {"id": 386, "seek": 320100, "start": 3209.0, "end": 3222.0, "text": " I don't know if Transformers are more structurally relevant than comp nets like obviously there's Fukushima, you know neocognitron which is inspired by neuroscience but attention themselves is never inspired by transformers was never inspired by neuroscience.", "tokens": [50764, 286, 500, 380, 458, 498, 27938, 433, 366, 544, 6594, 6512, 7340, 813, 715, 36170, 411, 2745, 456, 311, 33043, 49754, 11, 291, 458, 408, 905, 2912, 270, 2044, 597, 307, 7547, 538, 42762, 457, 3202, 2969, 307, 1128, 7547, 538, 4088, 433, 390, 1128, 7547, 538, 42762, 13, 51414], "temperature": 0.0, "avg_logprob": -0.17814886441794775, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.0024333312176167965}, {"id": 387, "seek": 322200, "start": 3222.0, "end": 3237.0, "text": " So I don't know if they're actually more neuroscience friendly, I guess, in the terms of similarity. But I think what the bigger picture is that they're going to be more and more generic.", "tokens": [50364, 407, 286, 500, 380, 458, 498, 436, 434, 767, 544, 42762, 9208, 11, 286, 2041, 11, 294, 264, 2115, 295, 32194, 13, 583, 286, 519, 437, 264, 3801, 3036, 307, 300, 436, 434, 516, 281, 312, 544, 293, 544, 19577, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12688429393465556, "compression_ratio": 1.5251396648044693, "no_speech_prob": 0.15584398806095123}, {"id": 388, "seek": 322200, "start": 3237.0, "end": 3241.0, "text": " And they're going to take less inspiration from structural biases that we know about.", "tokens": [51114, 400, 436, 434, 516, 281, 747, 1570, 10249, 490, 15067, 32152, 300, 321, 458, 466, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12688429393465556, "compression_ratio": 1.5251396648044693, "no_speech_prob": 0.15584398806095123}, {"id": 389, "seek": 324100, "start": 3241.0, "end": 3250.0, "text": " Not necessarily until you know full mentioned the idea of like, you know, recurrence and you know feedback and those things become more.", "tokens": [50364, 1726, 4725, 1826, 291, 458, 1577, 2835, 264, 1558, 295, 411, 11, 291, 458, 11, 18680, 10760, 293, 291, 458, 5824, 293, 729, 721, 1813, 544, 13, 50814], "temperature": 0.0, "avg_logprob": -0.230572053364345, "compression_ratio": 1.7697594501718212, "no_speech_prob": 0.5995070338249207}, {"id": 390, "seek": 324100, "start": 3250.0, "end": 3265.0, "text": " It's like, actually, one thing that's interesting is that like, there hasn't been much. I mean people have proposed these architectures and they do work but people aren't really using feedback versions of Transformers, mainly because there's no recurrent nature to them.", "tokens": [50814, 467, 311, 411, 11, 767, 11, 472, 551, 300, 311, 1880, 307, 300, 411, 11, 456, 6132, 380, 668, 709, 13, 286, 914, 561, 362, 10348, 613, 6331, 1303, 293, 436, 360, 589, 457, 561, 3212, 380, 534, 1228, 5824, 9606, 295, 27938, 433, 11, 8704, 570, 456, 311, 572, 18680, 1753, 3687, 281, 552, 13, 51564], "temperature": 0.0, "avg_logprob": -0.230572053364345, "compression_ratio": 1.7697594501718212, "no_speech_prob": 0.5995070338249207}, {"id": 391, "seek": 324100, "start": 3265.0, "end": 3270.0, "text": " So for example, all these things are still fee forward architectures that still process from the bottom up.", "tokens": [51564, 407, 337, 1365, 11, 439, 613, 721, 366, 920, 12054, 2128, 6331, 1303, 300, 920, 1399, 490, 264, 2767, 493, 13, 51814], "temperature": 0.0, "avg_logprob": -0.230572053364345, "compression_ratio": 1.7697594501718212, "no_speech_prob": 0.5995070338249207}, {"id": 392, "seek": 327000, "start": 3271.0, "end": 3286.0, "text": " I think the divergence is going to be like, are we going to be interested in the same models that the AI machine learning committee is going to be interested in? Are we going to be interested in specific models that work on neuroscience but don't necessarily have a functional performance equivalence to what these models have?", "tokens": [50414, 286, 519, 264, 47387, 307, 516, 281, 312, 411, 11, 366, 321, 516, 281, 312, 3102, 294, 264, 912, 5245, 300, 264, 7318, 3479, 2539, 7482, 307, 516, 281, 312, 3102, 294, 30, 2014, 321, 516, 281, 312, 3102, 294, 2685, 5245, 300, 589, 322, 42762, 457, 500, 380, 4725, 362, 257, 11745, 3389, 9052, 655, 281, 437, 613, 5245, 362, 30, 51164], "temperature": 0.0, "avg_logprob": -0.16077337842999082, "compression_ratio": 1.8166666666666667, "no_speech_prob": 0.020306294783949852}, {"id": 393, "seek": 328600, "start": 3286.0, "end": 3297.0, "text": " And one question I have for the neuroscientists in the room is, what is the scale of data that the human brain is trained on when they reach adulthood?", "tokens": [50364, 400, 472, 1168, 286, 362, 337, 264, 28813, 5412, 1751, 294, 264, 1808, 307, 11, 437, 307, 264, 4373, 295, 1412, 300, 264, 1952, 3567, 307, 8895, 322, 562, 436, 2524, 42328, 30, 50914], "temperature": 0.0, "avg_logprob": -0.11986226301926833, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.03613203763961792}, {"id": 394, "seek": 328600, "start": 3297.0, "end": 3308.0, "text": " And my rough estimate or understanding is it's similar to what the biggest Transformers are currently trained on or a little bit smaller than that, but much more data than comp nets were trained on.", "tokens": [50914, 400, 452, 5903, 12539, 420, 3701, 307, 309, 311, 2531, 281, 437, 264, 3880, 27938, 433, 366, 4362, 8895, 322, 420, 257, 707, 857, 4356, 813, 300, 11, 457, 709, 544, 1412, 813, 715, 36170, 645, 8895, 322, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11986226301926833, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.03613203763961792}, {"id": 395, "seek": 330800, "start": 3308.0, "end": 3321.0, "text": " So all this stuff about how, you know, in which data regime do you get what kinds of performance? Well, the data regime that seems most relevant to neuroscience, to me, seems more like this Transformer regime, but I don't know if that's true.", "tokens": [50364, 407, 439, 341, 1507, 466, 577, 11, 291, 458, 11, 294, 597, 1412, 13120, 360, 291, 483, 437, 3685, 295, 3389, 30, 1042, 11, 264, 1412, 13120, 300, 2544, 881, 7340, 281, 42762, 11, 281, 385, 11, 2544, 544, 411, 341, 27938, 260, 13120, 11, 457, 286, 500, 380, 458, 498, 300, 311, 2074, 13, 51014], "temperature": 0.0, "avg_logprob": -0.18209926449522681, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.0885099545121193}, {"id": 396, "seek": 330800, "start": 3321.0, "end": 3325.0, "text": " Like how many images do humans see compared to these models?", "tokens": [51014, 1743, 577, 867, 5267, 360, 6255, 536, 5347, 281, 613, 5245, 30, 51214], "temperature": 0.0, "avg_logprob": -0.18209926449522681, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.0885099545121193}, {"id": 397, "seek": 330800, "start": 3325.0, "end": 3327.0, "text": " It's not true for text.", "tokens": [51214, 467, 311, 406, 2074, 337, 2487, 13, 51314], "temperature": 0.0, "avg_logprob": -0.18209926449522681, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.0885099545121193}, {"id": 398, "seek": 330800, "start": 3327.0, "end": 3329.0, "text": " Text, I think they're trained on much more data. Yeah.", "tokens": [51314, 18643, 11, 286, 519, 436, 434, 8895, 322, 709, 544, 1412, 13, 865, 13, 51414], "temperature": 0.0, "avg_logprob": -0.18209926449522681, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.0885099545121193}, {"id": 399, "seek": 332900, "start": 3329.0, "end": 3333.0, "text": " Yeah, but for you, I'm thinking images, everything on the internet.", "tokens": [50364, 865, 11, 457, 337, 291, 11, 286, 478, 1953, 5267, 11, 1203, 322, 264, 4705, 13, 50564], "temperature": 0.0, "avg_logprob": -0.37574379784720285, "compression_ratio": 1.4470046082949308, "no_speech_prob": 0.08638470619916916}, {"id": 400, "seek": 332900, "start": 3333.0, "end": 3334.0, "text": " Yeah.", "tokens": [50564, 865, 13, 50614], "temperature": 0.0, "avg_logprob": -0.37574379784720285, "compression_ratio": 1.4470046082949308, "no_speech_prob": 0.08638470619916916}, {"id": 401, "seek": 332900, "start": 3334.0, "end": 3351.0, "text": " There was a paper for a friend to rank this group recently that showed that even if you train a GPT two on a 10 year old amount of text data, it does explain fMRI responses, almost as well as even having a lot more days because fMRI is bad.", "tokens": [50614, 821, 390, 257, 3035, 337, 257, 1277, 281, 6181, 341, 1594, 3938, 300, 4712, 300, 754, 498, 291, 3847, 257, 26039, 51, 732, 322, 257, 1266, 1064, 1331, 2372, 295, 2487, 1412, 11, 309, 775, 2903, 283, 44, 5577, 13019, 11, 1920, 382, 731, 382, 754, 1419, 257, 688, 544, 1708, 570, 283, 44, 5577, 307, 1578, 13, 51464], "temperature": 0.0, "avg_logprob": -0.37574379784720285, "compression_ratio": 1.4470046082949308, "no_speech_prob": 0.08638470619916916}, {"id": 402, "seek": 335100, "start": 3352.0, "end": 3364.0, "text": " So I think he's training a Transformer around 10 million tokens, which is like what a child would be exposed to at the age of 10, while most Transformers are trained in like, like, millions of different systems.", "tokens": [50414, 407, 286, 519, 415, 311, 3097, 257, 27938, 260, 926, 1266, 2459, 22667, 11, 597, 307, 411, 437, 257, 1440, 576, 312, 9495, 281, 412, 264, 3205, 295, 1266, 11, 1339, 881, 27938, 433, 366, 8895, 294, 411, 11, 411, 11, 6803, 295, 819, 3652, 13, 51014], "temperature": 0.0, "avg_logprob": -0.42217424471084386, "compression_ratio": 1.4761904761904763, "no_speech_prob": 0.0335024856030941}, {"id": 403, "seek": 335100, "start": 3364.0, "end": 3372.0, "text": " And like, yeah, it could accept my data, but yeah, fMRI is its own.", "tokens": [51014, 400, 411, 11, 1338, 11, 309, 727, 3241, 452, 1412, 11, 457, 1338, 11, 283, 44, 5577, 307, 1080, 1065, 13, 51414], "temperature": 0.0, "avg_logprob": -0.42217424471084386, "compression_ratio": 1.4761904761904763, "no_speech_prob": 0.0335024856030941}, {"id": 404, "seek": 337200, "start": 3373.0, "end": 3381.0, "text": " This is, there's an assumption under this question, which is like, are we actually interested in models of the system in the adult state, or are we interested in models of how the system gets to be in the adult state?", "tokens": [50414, 639, 307, 11, 456, 311, 364, 15302, 833, 341, 1168, 11, 597, 307, 411, 11, 366, 321, 767, 3102, 294, 5245, 295, 264, 1185, 294, 264, 5075, 1785, 11, 420, 366, 321, 3102, 294, 5245, 295, 577, 264, 1185, 2170, 281, 312, 294, 264, 5075, 1785, 30, 50814], "temperature": 0.0, "avg_logprob": -0.1338465963091169, "compression_ratio": 1.8793650793650793, "no_speech_prob": 0.034084148705005646}, {"id": 405, "seek": 337200, "start": 3381.0, "end": 3384.0, "text": " Those are not the same question, right?", "tokens": [50814, 3950, 366, 406, 264, 912, 1168, 11, 558, 30, 50964], "temperature": 0.0, "avg_logprob": -0.1338465963091169, "compression_ratio": 1.8793650793650793, "no_speech_prob": 0.034084148705005646}, {"id": 406, "seek": 337200, "start": 3384.0, "end": 3401.0, "text": " So there may be a shift here between models that are like, and you sort of called it out like, hey, we can, instead of us having to hand design them in, this is the bitter lesson version, we'll just lean on the data with a general flexible thing and let the data push it as long as our compute can handle that and we have enough data.", "tokens": [50964, 407, 456, 815, 312, 257, 5513, 510, 1296, 5245, 300, 366, 411, 11, 293, 291, 1333, 295, 1219, 309, 484, 411, 11, 4177, 11, 321, 393, 11, 2602, 295, 505, 1419, 281, 1011, 1715, 552, 294, 11, 341, 307, 264, 13871, 6898, 3037, 11, 321, 603, 445, 11659, 322, 264, 1412, 365, 257, 2674, 11358, 551, 293, 718, 264, 1412, 2944, 309, 382, 938, 382, 527, 14722, 393, 4813, 300, 293, 321, 362, 1547, 1412, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1338465963091169, "compression_ratio": 1.8793650793650793, "no_speech_prob": 0.034084148705005646}, {"id": 407, "seek": 340100, "start": 3401.0, "end": 3411.0, "text": " And I think the question you were asking, that's sort of interesting to us, some of us is, does that end state, which of those end states looks more like the adult and the state that's agnostic to whether,", "tokens": [50364, 400, 286, 519, 264, 1168, 291, 645, 3365, 11, 300, 311, 1333, 295, 1880, 281, 505, 11, 512, 295, 505, 307, 11, 775, 300, 917, 1785, 11, 597, 295, 729, 917, 4368, 1542, 544, 411, 264, 5075, 293, 264, 1785, 300, 311, 623, 77, 19634, 281, 1968, 11, 50864], "temperature": 0.0, "avg_logprob": -0.15148367705168547, "compression_ratio": 1.7296296296296296, "no_speech_prob": 0.007116877473890781}, {"id": 408, "seek": 340100, "start": 3411.0, "end": 3417.0, "text": " neither of them probably followed the same biology path, but just even in that assumption state, what is the state of affairs?", "tokens": [50864, 9662, 295, 552, 1391, 6263, 264, 912, 14956, 3100, 11, 457, 445, 754, 294, 300, 15302, 1785, 11, 437, 307, 264, 1785, 295, 17478, 30, 51164], "temperature": 0.0, "avg_logprob": -0.15148367705168547, "compression_ratio": 1.7296296296296296, "no_speech_prob": 0.007116877473890781}, {"id": 409, "seek": 340100, "start": 3417.0, "end": 3425.0, "text": " I don't think we know what the state of affairs is, visual Transformers relative to combat sun alignments with even visual processing.", "tokens": [51164, 286, 500, 380, 519, 321, 458, 437, 264, 1785, 295, 17478, 307, 11, 5056, 27938, 433, 4972, 281, 8361, 3295, 7975, 1117, 365, 754, 5056, 9007, 13, 51564], "temperature": 0.0, "avg_logprob": -0.15148367705168547, "compression_ratio": 1.7296296296296296, "no_speech_prob": 0.007116877473890781}, {"id": 410, "seek": 342500, "start": 3425.0, "end": 3431.0, "text": " I mean, somebody was asking here about like somebody who was asking about similarity, maybe that was you.", "tokens": [50364, 286, 914, 11, 2618, 390, 3365, 510, 466, 411, 2618, 567, 390, 3365, 466, 32194, 11, 1310, 300, 390, 291, 13, 50664], "temperature": 0.0, "avg_logprob": -0.24520575783469462, "compression_ratio": 1.8157894736842106, "no_speech_prob": 0.14402318000793457}, {"id": 411, "seek": 342500, "start": 3431.0, "end": 3440.0, "text": " You know, and then because also at the neural level also requires mapping assumptions that, and they get more complicated with the Transformers, right, like,", "tokens": [50664, 509, 458, 11, 293, 550, 570, 611, 412, 264, 18161, 1496, 611, 7029, 18350, 17695, 300, 11, 293, 436, 483, 544, 6179, 365, 264, 27938, 433, 11, 558, 11, 411, 11, 51114], "temperature": 0.0, "avg_logprob": -0.24520575783469462, "compression_ratio": 1.8157894736842106, "no_speech_prob": 0.14402318000793457}, {"id": 412, "seek": 342500, "start": 3440.0, "end": 3450.0, "text": " but behaviorally, it sounds like, you know, in the Gary was papers are pointing out like there's some, maybe better alignment, but I don't have their compare against the latest, you know, at trained, you know, comments.", "tokens": [51114, 457, 5223, 379, 11, 309, 3263, 411, 11, 291, 458, 11, 294, 264, 13788, 390, 10577, 366, 12166, 484, 411, 456, 311, 512, 11, 1310, 1101, 18515, 11, 457, 286, 500, 380, 362, 641, 6794, 1970, 264, 6792, 11, 291, 458, 11, 412, 8895, 11, 291, 458, 11, 3053, 13, 51614], "temperature": 0.0, "avg_logprob": -0.24520575783469462, "compression_ratio": 1.8157894736842106, "no_speech_prob": 0.14402318000793457}, {"id": 413, "seek": 345000, "start": 3451.0, "end": 3460.0, "text": " Yeah, I don't know about, I think those stories haven't been done to my knowledge of like actual alignment with neural recordings and, of course, I'm sure people here will do that.", "tokens": [50414, 865, 11, 286, 500, 380, 458, 466, 11, 286, 519, 729, 3676, 2378, 380, 668, 1096, 281, 452, 3601, 295, 411, 3539, 18515, 365, 18161, 25162, 293, 11, 295, 1164, 11, 286, 478, 988, 561, 510, 486, 360, 300, 13, 50864], "temperature": 0.0, "avg_logprob": -0.16160370508829752, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.01613345555961132}, {"id": 414, "seek": 345000, "start": 3460.0, "end": 3466.0, "text": " But alignment in terms of functional capabilities does seem quite a bit better.", "tokens": [50864, 583, 18515, 294, 2115, 295, 11745, 10862, 775, 1643, 1596, 257, 857, 1101, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16160370508829752, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.01613345555961132}, {"id": 415, "seek": 346600, "start": 3466.0, "end": 3476.0, "text": " And it don't relate to me because we're a confidence. What can they do in what's been demonstrated with confidence of 10 years ago, classify 1000 animals, cats and dogs and ancient categories.", "tokens": [50364, 400, 309, 500, 380, 10961, 281, 385, 570, 321, 434, 257, 6687, 13, 708, 393, 436, 360, 294, 437, 311, 668, 18772, 365, 6687, 295, 1266, 924, 2057, 11, 33872, 9714, 4882, 11, 11111, 293, 7197, 293, 7832, 10479, 13, 50864], "temperature": 0.0, "avg_logprob": -0.28680965748239073, "compression_ratio": 1.664, "no_speech_prob": 0.11908937990665436}, {"id": 416, "seek": 346600, "start": 3476.0, "end": 3489.0, "text": " What can transfer? Well, sure, you can make confidence that grow bigger, but the current generation of the best models are these Transformers like clip, but of course there's a clip non transformers and let's just say clip.", "tokens": [50864, 708, 393, 5003, 30, 1042, 11, 988, 11, 291, 393, 652, 6687, 300, 1852, 3801, 11, 457, 264, 2190, 5125, 295, 264, 1151, 5245, 366, 613, 27938, 433, 411, 7353, 11, 457, 295, 1164, 456, 311, 257, 7353, 2107, 4088, 433, 293, 718, 311, 445, 584, 7353, 13, 51514], "temperature": 0.0, "avg_logprob": -0.28680965748239073, "compression_ratio": 1.664, "no_speech_prob": 0.11908937990665436}, {"id": 417, "seek": 348900, "start": 3489.0, "end": 3498.0, "text": " And that seems much closer to the functionality of the human visual system that you can recognize millions of categories or way more than 1000s of categories.", "tokens": [50364, 400, 300, 2544, 709, 4966, 281, 264, 14980, 295, 264, 1952, 5056, 1185, 300, 291, 393, 5521, 6803, 295, 10479, 420, 636, 544, 813, 9714, 82, 295, 10479, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10901749134063721, "compression_ratio": 1.8053435114503817, "no_speech_prob": 0.03727123886346817}, {"id": 418, "seek": 348900, "start": 3498.0, "end": 3510.0, "text": " And you can recognize compositions of categories you can type in a red ball and have you recognize the red ball and just see one example of that and, and these, these networks are getting to that point.", "tokens": [50814, 400, 291, 393, 5521, 43401, 295, 10479, 291, 393, 2010, 294, 257, 2182, 2594, 293, 362, 291, 5521, 264, 2182, 2594, 293, 445, 536, 472, 1365, 295, 300, 293, 11, 293, 613, 11, 613, 9590, 366, 1242, 281, 300, 935, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10901749134063721, "compression_ratio": 1.8053435114503817, "no_speech_prob": 0.03727123886346817}, {"id": 419, "seek": 348900, "start": 3510.0, "end": 3516.0, "text": " So the kind of psychophysical level I think they're getting closer. I don't know at the neural embedding level.", "tokens": [51414, 407, 264, 733, 295, 4681, 5317, 36280, 1496, 286, 519, 436, 434, 1242, 4966, 13, 286, 500, 380, 458, 412, 264, 18161, 12240, 3584, 1496, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10901749134063721, "compression_ratio": 1.8053435114503817, "no_speech_prob": 0.03727123886346817}, {"id": 420, "seek": 351600, "start": 3516.0, "end": 3530.0, "text": " So something that I'd like to share is the, there was one paper that me and William McCullough that we submitted to nerves, it actually got rejected, but there was one about a we just submitted isolar about this transformer model that", "tokens": [50364, 407, 746, 300, 286, 1116, 411, 281, 2073, 307, 264, 11, 456, 390, 472, 3035, 300, 385, 293, 6740, 12061, 858, 581, 300, 321, 14405, 281, 23078, 11, 309, 767, 658, 15749, 11, 457, 456, 390, 472, 466, 257, 321, 445, 14405, 307, 15276, 466, 341, 31782, 2316, 300, 51064], "temperature": 0.0, "avg_logprob": -0.26192922177522077, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.02553555555641651}, {"id": 421, "seek": 351600, "start": 3530.0, "end": 3541.0, "text": " achieved state of the art and brain score for area before, which is kind of interesting because we went to the brainstorm competition at the beginning of this year, like just hoping to participate.", "tokens": [51064, 11042, 1785, 295, 264, 1523, 293, 3567, 6175, 337, 1859, 949, 11, 597, 307, 733, 295, 1880, 570, 321, 1437, 281, 264, 35245, 6211, 412, 264, 2863, 295, 341, 1064, 11, 411, 445, 7159, 281, 8197, 13, 51614], "temperature": 0.0, "avg_logprob": -0.26192922177522077, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.02553555555641651}, {"id": 422, "seek": 354100, "start": 3541.0, "end": 3553.0, "text": " And all of a sudden William trained this transformer it was a dual stream transformer with adversarial training and rotations, and we just like broke the record in v4 unexpectedly and wrote a paper about that.", "tokens": [50364, 400, 439, 295, 257, 3990, 6740, 8895, 341, 31782, 309, 390, 257, 11848, 4309, 31782, 365, 17641, 44745, 3097, 293, 44796, 11, 293, 321, 445, 411, 6902, 264, 2136, 294, 371, 19, 40452, 293, 4114, 257, 3035, 466, 300, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13013959192967678, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.07361595332622528}, {"id": 423, "seek": 354100, "start": 3553.0, "end": 3567.0, "text": " In any case, what I think was interesting is that the same model exact same architecture if you trained it another way just classical SGD image net no fans augmentations adversarial perturbations, the score wasn't that great.", "tokens": [50964, 682, 604, 1389, 11, 437, 286, 519, 390, 1880, 307, 300, 264, 912, 2316, 1900, 912, 9482, 498, 291, 8895, 309, 1071, 636, 445, 13735, 34520, 35, 3256, 2533, 572, 4499, 29919, 763, 17641, 44745, 40468, 763, 11, 264, 6175, 2067, 380, 300, 869, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13013959192967678, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.07361595332622528}, {"id": 424, "seek": 356700, "start": 3567.0, "end": 3580.0, "text": " So I wonder, just in general, should we also just be thinking about transformer model or the interaction of transformer models plus any type of training regime or maybe a fancier loss function that we haven't even conceived.", "tokens": [50364, 407, 286, 2441, 11, 445, 294, 2674, 11, 820, 321, 611, 445, 312, 1953, 466, 31782, 2316, 420, 264, 9285, 295, 31782, 5245, 1804, 604, 2010, 295, 3097, 13120, 420, 1310, 257, 3429, 27674, 4470, 2445, 300, 321, 2378, 380, 754, 34898, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10802336300120634, "compression_ratio": 1.6598360655737705, "no_speech_prob": 0.06747902184724808}, {"id": 425, "seek": 356700, "start": 3580.0, "end": 3593.0, "text": " And suppose we do hit like the like explain variants or one correlation in brain score for it like how do we even reverse engineer from that right because the model is just so big.", "tokens": [51014, 400, 7297, 321, 360, 2045, 411, 264, 411, 2903, 21669, 420, 472, 20009, 294, 3567, 6175, 337, 309, 411, 577, 360, 321, 754, 9943, 11403, 490, 300, 558, 570, 264, 2316, 307, 445, 370, 955, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10802336300120634, "compression_ratio": 1.6598360655737705, "no_speech_prob": 0.06747902184724808}, {"id": 426, "seek": 359300, "start": 3593.0, "end": 3604.0, "text": " I'm saying playing devil's advocate on my own work really the model so big, like, how do how do we even go back and isn't open a question, you know just I don't have any ideas or", "tokens": [50364, 286, 478, 1566, 2433, 13297, 311, 14608, 322, 452, 1065, 589, 534, 264, 2316, 370, 955, 11, 411, 11, 577, 360, 577, 360, 321, 754, 352, 646, 293, 1943, 380, 1269, 257, 1168, 11, 291, 458, 445, 286, 500, 380, 362, 604, 3487, 420, 50914], "temperature": 0.0, "avg_logprob": -0.1977964962230009, "compression_ratio": 1.6359223300970873, "no_speech_prob": 0.25352606177330017}, {"id": 427, "seek": 359300, "start": 3604.0, "end": 3614.0, "text": " I mean I think one of the things that I think we often forget is that a model isn't just its architecture like you know the slide before a model is also data.", "tokens": [50914, 286, 914, 286, 519, 472, 295, 264, 721, 300, 286, 519, 321, 2049, 2870, 307, 300, 257, 2316, 1943, 380, 445, 1080, 9482, 411, 291, 458, 264, 4137, 949, 257, 2316, 307, 611, 1412, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1977964962230009, "compression_ratio": 1.6359223300970873, "no_speech_prob": 0.25352606177330017}, {"id": 428, "seek": 361400, "start": 3614.0, "end": 3621.0, "text": " And once it's interact with data, we have to understand data now to understand what that model is doing can't just understand the architecture.", "tokens": [50364, 400, 1564, 309, 311, 4648, 365, 1412, 11, 321, 362, 281, 1223, 1412, 586, 281, 1223, 437, 300, 2316, 307, 884, 393, 380, 445, 1223, 264, 9482, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14379448639719108, "compression_ratio": 1.8814432989690721, "no_speech_prob": 0.04964859411120415}, {"id": 429, "seek": 361400, "start": 3621.0, "end": 3631.0, "text": " I think as these models become these architectures become more generic data is going to play a larger and larger role and we're kind of back to now trying to understand data now and understanding what the architecture is.", "tokens": [50714, 286, 519, 382, 613, 5245, 1813, 613, 6331, 1303, 1813, 544, 19577, 1412, 307, 516, 281, 862, 257, 4833, 293, 4833, 3090, 293, 321, 434, 733, 295, 646, 281, 586, 1382, 281, 1223, 1412, 586, 293, 3701, 437, 264, 9482, 307, 13, 51214], "temperature": 0.0, "avg_logprob": -0.14379448639719108, "compression_ratio": 1.8814432989690721, "no_speech_prob": 0.04964859411120415}, {"id": 430, "seek": 363100, "start": 3631.0, "end": 3635.0, "text": " And I think that's not that's easier or harder.", "tokens": [50364, 400, 286, 519, 300, 311, 406, 300, 311, 3571, 420, 6081, 13, 50564], "temperature": 0.0, "avg_logprob": -0.19087954128489776, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.20750358700752258}, {"id": 431, "seek": 363100, "start": 3635.0, "end": 3653.0, "text": " But also the message is, you know, for the last 10 years until transformers came like three or four years ago, I think the success stories in machine learning was convolutional networks, there was one architect.", "tokens": [50564, 583, 611, 264, 3636, 307, 11, 291, 458, 11, 337, 264, 1036, 1266, 924, 1826, 4088, 433, 1361, 411, 1045, 420, 1451, 924, 2057, 11, 286, 519, 264, 2245, 3676, 294, 3479, 2539, 390, 45216, 304, 9590, 11, 456, 390, 472, 6331, 13, 51464], "temperature": 0.0, "avg_logprob": -0.19087954128489776, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.20750358700752258}, {"id": 432, "seek": 363100, "start": 3653.0, "end": 3655.0, "text": " Now there are several.", "tokens": [51464, 823, 456, 366, 2940, 13, 51564], "temperature": 0.0, "avg_logprob": -0.19087954128489776, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.20750358700752258}, {"id": 433, "seek": 365500, "start": 3655.0, "end": 3659.0, "text": " We have quite a few options.", "tokens": [50364, 492, 362, 1596, 257, 1326, 3956, 13, 50564], "temperature": 0.0, "avg_logprob": -0.2348223772915927, "compression_ratio": 1.3509933774834437, "no_speech_prob": 0.1548362374305725}, {"id": 434, "seek": 365500, "start": 3659.0, "end": 3662.0, "text": " You know they all perform pretty well.", "tokens": [50564, 509, 458, 436, 439, 2042, 1238, 731, 13, 50714], "temperature": 0.0, "avg_logprob": -0.2348223772915927, "compression_ratio": 1.3509933774834437, "no_speech_prob": 0.1548362374305725}, {"id": 435, "seek": 365500, "start": 3662.0, "end": 3664.0, "text": " That's right.", "tokens": [50714, 663, 311, 558, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2348223772915927, "compression_ratio": 1.3509933774834437, "no_speech_prob": 0.1548362374305725}, {"id": 436, "seek": 365500, "start": 3664.0, "end": 3675.0, "text": " And I think if you just compare functions input output or a while they fit the neurons you'll find they're all doing okay.", "tokens": [50814, 400, 286, 519, 498, 291, 445, 6794, 6828, 4846, 5598, 420, 257, 1339, 436, 3318, 264, 22027, 291, 603, 915, 436, 434, 439, 884, 1392, 13, 51364], "temperature": 0.0, "avg_logprob": -0.2348223772915927, "compression_ratio": 1.3509933774834437, "no_speech_prob": 0.1548362374305725}, {"id": 437, "seek": 367500, "start": 3675.0, "end": 3685.0, "text": " You need a lot of other constraints, which means what can be implemented by neurons and synapses.", "tokens": [50364, 509, 643, 257, 688, 295, 661, 18491, 11, 597, 1355, 437, 393, 312, 12270, 538, 22027, 293, 5451, 2382, 279, 13, 50864], "temperature": 0.0, "avg_logprob": -0.27182182105811864, "compression_ratio": 1.2543859649122806, "no_speech_prob": 0.0951663926243782}, {"id": 438, "seek": 367500, "start": 3685.0, "end": 3691.0, "text": " And what cannot or very difficult to see how.", "tokens": [50864, 400, 437, 2644, 420, 588, 2252, 281, 536, 577, 13, 51164], "temperature": 0.0, "avg_logprob": -0.27182182105811864, "compression_ratio": 1.2543859649122806, "no_speech_prob": 0.0951663926243782}, {"id": 439, "seek": 369100, "start": 3692.0, "end": 3699.0, "text": " I agree and I gave this guest lecture and Brian's class.", "tokens": [50414, 286, 3986, 293, 286, 2729, 341, 8341, 7991, 293, 10765, 311, 1508, 13, 50764], "temperature": 0.0, "avg_logprob": -0.29258053119365984, "compression_ratio": 1.5380434782608696, "no_speech_prob": 0.03017791174352169}, {"id": 440, "seek": 369100, "start": 3699.0, "end": 3713.0, "text": " And I was calling it the anachronism conjecture that like as systems get more and more intelligent they kind of converge on the same representations abstractions models and so forth, which other people have you know put forth.", "tokens": [50764, 400, 286, 390, 5141, 309, 264, 364, 608, 2044, 1434, 416, 1020, 540, 300, 411, 382, 3652, 483, 544, 293, 544, 13232, 436, 733, 295, 41881, 322, 264, 912, 33358, 12649, 626, 5245, 293, 370, 5220, 11, 597, 661, 561, 362, 291, 458, 829, 5220, 13, 51464], "temperature": 0.0, "avg_logprob": -0.29258053119365984, "compression_ratio": 1.5380434782608696, "no_speech_prob": 0.03017791174352169}, {"id": 441, "seek": 371300, "start": 3713.0, "end": 3721.0, "text": " And I think it's kind of the same here I don't actually think the difference between transformers and confidence and MLP is that dramatic. I think it's more.", "tokens": [50364, 400, 286, 519, 309, 311, 733, 295, 264, 912, 510, 286, 500, 380, 767, 519, 264, 2649, 1296, 4088, 433, 293, 6687, 293, 21601, 47, 307, 300, 12023, 13, 286, 519, 309, 311, 544, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16079190951674732, "compression_ratio": 1.5274725274725274, "no_speech_prob": 0.014476366341114044}, {"id": 442, "seek": 371300, "start": 3721.0, "end": 3728.0, "text": " As you get more and more data and you optimize more and more toward success at some objective.", "tokens": [50764, 1018, 291, 483, 544, 293, 544, 1412, 293, 291, 19719, 544, 293, 544, 7361, 2245, 412, 512, 10024, 13, 51114], "temperature": 0.0, "avg_logprob": -0.16079190951674732, "compression_ratio": 1.5274725274725274, "no_speech_prob": 0.014476366341114044}, {"id": 443, "seek": 371300, "start": 3728.0, "end": 3730.0, "text": " The models will converge.", "tokens": [51114, 440, 5245, 486, 41881, 13, 51214], "temperature": 0.0, "avg_logprob": -0.16079190951674732, "compression_ratio": 1.5274725274725274, "no_speech_prob": 0.014476366341114044}, {"id": 444, "seek": 373000, "start": 3730.0, "end": 3738.0, "text": " It's one way but the other way is that, you know what I said that the meeting a few weeks ago.", "tokens": [50364, 467, 311, 472, 636, 457, 264, 661, 636, 307, 300, 11, 291, 458, 437, 286, 848, 300, 264, 3440, 257, 1326, 3259, 2057, 13, 50764], "temperature": 0.0, "avg_logprob": -0.21283369194971372, "compression_ratio": 1.5163398692810457, "no_speech_prob": 0.2486683428287506}, {"id": 445, "seek": 373000, "start": 3738.0, "end": 3741.0, "text": " It could be like flight.", "tokens": [50764, 467, 727, 312, 411, 7018, 13, 50914], "temperature": 0.0, "avg_logprob": -0.21283369194971372, "compression_ratio": 1.5163398692810457, "no_speech_prob": 0.2486683428287506}, {"id": 446, "seek": 373000, "start": 3741.0, "end": 3743.0, "text": " You know, it could be.", "tokens": [50914, 509, 458, 11, 309, 727, 312, 13, 51014], "temperature": 0.0, "avg_logprob": -0.21283369194971372, "compression_ratio": 1.5163398692810457, "no_speech_prob": 0.2486683428287506}, {"id": 447, "seek": 373000, "start": 3743.0, "end": 3749.0, "text": " You have, you know, a model of a bird.", "tokens": [51014, 509, 362, 11, 291, 458, 11, 257, 2316, 295, 257, 5255, 13, 51314], "temperature": 0.0, "avg_logprob": -0.21283369194971372, "compression_ratio": 1.5163398692810457, "no_speech_prob": 0.2486683428287506}, {"id": 448, "seek": 373000, "start": 3749.0, "end": 3754.0, "text": " But that's, that's not really good for everything.", "tokens": [51314, 583, 300, 311, 11, 300, 311, 406, 534, 665, 337, 1203, 13, 51564], "temperature": 0.0, "avg_logprob": -0.21283369194971372, "compression_ratio": 1.5163398692810457, "no_speech_prob": 0.2486683428287506}, {"id": 449, "seek": 375400, "start": 3754.0, "end": 3771.0, "text": " The important is to understand the principles of aerodynamics, then you can understand how birds fly and how to build airplanes and other things and maybe how fly flies, which is different from birds.", "tokens": [50364, 440, 1021, 307, 281, 1223, 264, 9156, 295, 11207, 35483, 11, 550, 291, 393, 1223, 577, 9009, 3603, 293, 577, 281, 1322, 32947, 293, 661, 721, 293, 1310, 577, 3603, 17414, 11, 597, 307, 819, 490, 9009, 13, 51214], "temperature": 0.0, "avg_logprob": -0.16710313161214194, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.14016082882881165}, {"id": 450, "seek": 377100, "start": 3771.0, "end": 3784.0, "text": " Those aerodynamics involved is different. So, I think principles are much more important than the specific implementations which can be quite different.", "tokens": [50364, 3950, 11207, 35483, 3288, 307, 819, 13, 407, 11, 286, 519, 9156, 366, 709, 544, 1021, 813, 264, 2685, 4445, 763, 597, 393, 312, 1596, 819, 13, 51014], "temperature": 0.0, "avg_logprob": -0.27442033667313426, "compression_ratio": 1.5617283950617284, "no_speech_prob": 0.15625911951065063}, {"id": 451, "seek": 377100, "start": 3784.0, "end": 3788.0, "text": " The question is what are the principles here.", "tokens": [51014, 440, 1168, 307, 437, 366, 264, 9156, 510, 13, 51214], "temperature": 0.0, "avg_logprob": -0.27442033667313426, "compression_ratio": 1.5617283950617284, "no_speech_prob": 0.15625911951065063}, {"id": 452, "seek": 377100, "start": 3788.0, "end": 3791.0, "text": " Yeah, and I think they're similar principles, I think.", "tokens": [51214, 865, 11, 293, 286, 519, 436, 434, 2531, 9156, 11, 286, 519, 13, 51364], "temperature": 0.0, "avg_logprob": -0.27442033667313426, "compression_ratio": 1.5617283950617284, "no_speech_prob": 0.15625911951065063}, {"id": 453, "seek": 379100, "start": 3791.0, "end": 3799.0, "text": " All of these pictures are like just reweighting at the same few ingredients factorization is in all of them.", "tokens": [50364, 1057, 295, 613, 5242, 366, 411, 445, 319, 12329, 278, 412, 264, 912, 1326, 6952, 5952, 2144, 307, 294, 439, 295, 552, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1978900909423828, "compression_ratio": 1.7407407407407407, "no_speech_prob": 0.4829755425453186}, {"id": 454, "seek": 379100, "start": 3799.0, "end": 3817.0, "text": " Hierarchy is in all of them right like, I don't know, and even in transformers and confidence like transformers can be written as 90% convolution and just a few little layers that are attention like if you look at the actual operations almost every operation is is a convolution in the sense of being a one by one,", "tokens": [50764, 10886, 13988, 307, 294, 439, 295, 552, 558, 411, 11, 286, 500, 380, 458, 11, 293, 754, 294, 4088, 433, 293, 6687, 411, 4088, 433, 393, 312, 3720, 382, 4289, 4, 45216, 293, 445, 257, 1326, 707, 7914, 300, 366, 3202, 411, 498, 291, 574, 412, 264, 3539, 7705, 1920, 633, 6916, 307, 307, 257, 45216, 294, 264, 2020, 295, 885, 257, 472, 538, 472, 11, 51664], "temperature": 0.0, "avg_logprob": -0.1978900909423828, "compression_ratio": 1.7407407407407407, "no_speech_prob": 0.4829755425453186}, {"id": 455, "seek": 381700, "start": 3817.0, "end": 3823.0, "text": " you can just chop up the signal into patches and process each one independently and identically.", "tokens": [50364, 291, 393, 445, 7931, 493, 264, 6358, 666, 26531, 293, 1399, 1184, 472, 21761, 293, 2473, 984, 13, 50664], "temperature": 0.0, "avg_logprob": -0.15275454185378384, "compression_ratio": 1.528301886792453, "no_speech_prob": 0.038414884358644485}, {"id": 456, "seek": 381700, "start": 3823.0, "end": 3827.0, "text": " Yeah, so I think the principles are going to turn out to be very similar.", "tokens": [50664, 865, 11, 370, 286, 519, 264, 9156, 366, 516, 281, 1261, 484, 281, 312, 588, 2531, 13, 50864], "temperature": 0.0, "avg_logprob": -0.15275454185378384, "compression_ratio": 1.528301886792453, "no_speech_prob": 0.038414884358644485}, {"id": 457, "seek": 381700, "start": 3827.0, "end": 3837.0, "text": " The question is, which principles should we care about now, given this kind of heterogeneity and architecture, but similarity and functional performance.", "tokens": [50864, 440, 1168, 307, 11, 597, 9156, 820, 321, 1127, 466, 586, 11, 2212, 341, 733, 295, 20789, 23360, 507, 293, 9482, 11, 457, 32194, 293, 11745, 3389, 13, 51364], "temperature": 0.0, "avg_logprob": -0.15275454185378384, "compression_ratio": 1.528301886792453, "no_speech_prob": 0.038414884358644485}, {"id": 458, "seek": 383700, "start": 3837.0, "end": 3849.0, "text": " One of the things that it becomes easier if the community like has something they cannot do, whether it be like, you know, to fly, I guess, for example, flight, which is like, how do we achieve something that we can't currently do right now.", "tokens": [50364, 1485, 295, 264, 721, 300, 309, 3643, 3571, 498, 264, 1768, 411, 575, 746, 436, 2644, 360, 11, 1968, 309, 312, 411, 11, 291, 458, 11, 281, 3603, 11, 286, 2041, 11, 337, 1365, 11, 7018, 11, 597, 307, 411, 11, 577, 360, 321, 4584, 746, 300, 321, 393, 380, 4362, 360, 558, 586, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14725530524002878, "compression_ratio": 1.6736401673640167, "no_speech_prob": 0.6398300528526306}, {"id": 459, "seek": 383700, "start": 3849.0, "end": 3858.0, "text": " I think the general spirit of the machine committee is that all we're done, we can just keep making these models bigger and keep doing this and we'll be fine.", "tokens": [50964, 286, 519, 264, 2674, 3797, 295, 264, 3479, 7482, 307, 300, 439, 321, 434, 1096, 11, 321, 393, 445, 1066, 1455, 613, 5245, 3801, 293, 1066, 884, 341, 293, 321, 603, 312, 2489, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14725530524002878, "compression_ratio": 1.6736401673640167, "no_speech_prob": 0.6398300528526306}, {"id": 460, "seek": 385800, "start": 3858.0, "end": 3868.0, "text": " I don't think that's true. But right now it seems like the spirit is in that direction and that's why we're kind of revalidating. Oh, of course this must be like the brain. Of course this is like what we care about.", "tokens": [50364, 286, 500, 380, 519, 300, 311, 2074, 13, 583, 558, 586, 309, 2544, 411, 264, 3797, 307, 294, 300, 3513, 293, 300, 311, 983, 321, 434, 733, 295, 319, 3337, 327, 990, 13, 876, 11, 295, 1164, 341, 1633, 312, 411, 264, 3567, 13, 2720, 1164, 341, 307, 411, 437, 321, 1127, 466, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1138006350316039, "compression_ratio": 1.7531380753138075, "no_speech_prob": 0.23888012766838074}, {"id": 461, "seek": 385800, "start": 3868.0, "end": 3872.0, "text": " Of course, all these kind of back explanations are working.", "tokens": [50864, 2720, 1164, 11, 439, 613, 733, 295, 646, 28708, 366, 1364, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1138006350316039, "compression_ratio": 1.7531380753138075, "no_speech_prob": 0.23888012766838074}, {"id": 462, "seek": 385800, "start": 3872.0, "end": 3883.0, "text": " But once we hit a wall, I feel like then we know what's wrong and what's correct. Otherwise, I guess it becomes kind of hard to tell right now.", "tokens": [51064, 583, 1564, 321, 2045, 257, 2929, 11, 286, 841, 411, 550, 321, 458, 437, 311, 2085, 293, 437, 311, 3006, 13, 10328, 11, 286, 2041, 309, 3643, 733, 295, 1152, 281, 980, 558, 586, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1138006350316039, "compression_ratio": 1.7531380753138075, "no_speech_prob": 0.23888012766838074}, {"id": 463, "seek": 388300, "start": 3884.0, "end": 3903.0, "text": " The topic of like data efficiency. This might have an obvious answer, but like, I was wondering if when you have multimodal data, whether like learning becomes a lot more efficient if you have like experts of information from visual stuff,", "tokens": [50414, 440, 4829, 295, 411, 1412, 10493, 13, 639, 1062, 362, 364, 6322, 1867, 11, 457, 411, 11, 286, 390, 6359, 498, 562, 291, 362, 32972, 378, 304, 1412, 11, 1968, 411, 2539, 3643, 257, 688, 544, 7148, 498, 291, 362, 411, 8572, 295, 1589, 490, 5056, 1507, 11, 51364], "temperature": 0.0, "avg_logprob": -0.31671608411348784, "compression_ratio": 1.484472049689441, "no_speech_prob": 0.4371035695075989}, {"id": 464, "seek": 390300, "start": 3904.0, "end": 3919.0, "text": " like texts, that like maybe our captions associated with the image or something versus like two aspects of just text data.", "tokens": [50414, 411, 15765, 11, 300, 411, 1310, 527, 44832, 6615, 365, 264, 3256, 420, 746, 5717, 411, 732, 7270, 295, 445, 2487, 1412, 13, 51164], "temperature": 0.0, "avg_logprob": -0.4227078049271195, "compression_ratio": 1.2323232323232323, "no_speech_prob": 0.013003763742744923}, {"id": 465, "seek": 391900, "start": 3920.0, "end": 3933.0, "text": " I don't know how well those things have been estimated, but the language vision models are a lot better on certain benchmarks than the vision only models and it does seem like language must be like incredibly valuable per word.", "tokens": [50414, 286, 500, 380, 458, 577, 731, 729, 721, 362, 668, 14109, 11, 457, 264, 2856, 5201, 5245, 366, 257, 688, 1101, 322, 1629, 43751, 813, 264, 5201, 787, 5245, 293, 309, 775, 1643, 411, 2856, 1633, 312, 411, 6252, 8263, 680, 1349, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12757621377201403, "compression_ratio": 1.5307262569832403, "no_speech_prob": 0.028847983106970787}, {"id": 466, "seek": 391900, "start": 3933.0, "end": 3937.0, "text": " There's a lot more information than per pixel.", "tokens": [51064, 821, 311, 257, 688, 544, 1589, 813, 680, 19261, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12757621377201403, "compression_ratio": 1.5307262569832403, "no_speech_prob": 0.028847983106970787}, {"id": 467, "seek": 393700, "start": 3937.0, "end": 3943.0, "text": " I feel like a lot of the recent successes, just leveraging language, at least in computer vision.", "tokens": [50364, 286, 841, 411, 257, 688, 295, 264, 5162, 26101, 11, 445, 32666, 2856, 11, 412, 1935, 294, 3820, 5201, 13, 50664], "temperature": 0.0, "avg_logprob": -0.28934516906738283, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.07688935846090317}, {"id": 468, "seek": 393700, "start": 3943.0, "end": 3961.0, "text": " Same with robotics a few other areas. I think what made clip a lot more, at least from that psychophysics experiment from Garrus at all, a lot more like powerful for their results was the fact that clip was trained on classification, but on caption similarity matching", "tokens": [50664, 10635, 365, 34145, 257, 1326, 661, 3179, 13, 286, 519, 437, 1027, 7353, 257, 688, 544, 11, 412, 1935, 490, 300, 4681, 5317, 41732, 5120, 490, 42326, 301, 412, 439, 11, 257, 688, 544, 411, 4005, 337, 641, 3542, 390, 264, 1186, 300, 7353, 390, 8895, 322, 21538, 11, 457, 322, 31974, 32194, 14324, 51564], "temperature": 0.0, "avg_logprob": -0.28934516906738283, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.07688935846090317}, {"id": 469, "seek": 396100, "start": 3961.0, "end": 3967.0, "text": " to a text caption which has a lot more information than just a single label for this entire image.", "tokens": [50364, 281, 257, 2487, 31974, 597, 575, 257, 688, 544, 1589, 813, 445, 257, 2167, 7645, 337, 341, 2302, 3256, 13, 50664], "temperature": 0.0, "avg_logprob": -0.18861957832618995, "compression_ratio": 1.877659574468085, "no_speech_prob": 0.06947694718837738}, {"id": 470, "seek": 396100, "start": 3967.0, "end": 3981.0, "text": " Like caption can tell you, you know, things about geometry tells you what things on the left, what things included, what thing is, what thing what what season it is or what time it is like it tells you a lot more information and a single word would be to", "tokens": [50664, 1743, 31974, 393, 980, 291, 11, 291, 458, 11, 721, 466, 18426, 5112, 291, 437, 721, 322, 264, 1411, 11, 437, 721, 5556, 11, 437, 551, 307, 11, 437, 551, 437, 437, 3196, 309, 307, 420, 437, 565, 309, 307, 411, 309, 5112, 291, 257, 688, 544, 1589, 293, 257, 2167, 1349, 576, 312, 281, 51364], "temperature": 0.0, "avg_logprob": -0.18861957832618995, "compression_ratio": 1.877659574468085, "no_speech_prob": 0.06947694718837738}, {"id": 471, "seek": 398100, "start": 3982.0, "end": 3984.0, "text": " ImageNet class.", "tokens": [50414, 29903, 31890, 1508, 13, 50514], "temperature": 0.0, "avg_logprob": -0.19280135840700383, "compression_ratio": 1.8131487889273357, "no_speech_prob": 0.3877900242805481}, {"id": 472, "seek": 398100, "start": 3984.0, "end": 3998.0, "text": " Another, okay, this is a little anecdotal, but what I've heard is that for training diffusion models, if you train them without language, just unconditional diffusion model generative model of imagery is really expensive and we all thought like, okay, we're not getting that game is not for us is for Google.", "tokens": [50514, 3996, 11, 1392, 11, 341, 307, 257, 707, 26652, 38180, 11, 457, 437, 286, 600, 2198, 307, 300, 337, 3097, 25242, 5245, 11, 498, 291, 3847, 552, 1553, 2856, 11, 445, 47916, 25242, 2316, 1337, 1166, 2316, 295, 24340, 307, 534, 5124, 293, 321, 439, 1194, 411, 11, 1392, 11, 321, 434, 406, 1242, 300, 1216, 307, 406, 337, 505, 307, 337, 3329, 13, 51214], "temperature": 0.0, "avg_logprob": -0.19280135840700383, "compression_ratio": 1.8131487889273357, "no_speech_prob": 0.3877900242805481}, {"id": 473, "seek": 398100, "start": 3998.0, "end": 4010.0, "text": " But if you train them text conditional, they're actually much according to the students I've talked to, they train much faster because the text conditional models the text gives you so much leverage.", "tokens": [51214, 583, 498, 291, 3847, 552, 2487, 27708, 11, 436, 434, 767, 709, 4650, 281, 264, 1731, 286, 600, 2825, 281, 11, 436, 3847, 709, 4663, 570, 264, 2487, 27708, 5245, 264, 2487, 2709, 291, 370, 709, 13982, 13, 51814], "temperature": 0.0, "avg_logprob": -0.19280135840700383, "compression_ratio": 1.8131487889273357, "no_speech_prob": 0.3877900242805481}, {"id": 474, "seek": 401000, "start": 4010.0, "end": 4018.0, "text": " And so they said that no, no, we can train text conditional like no dolly type models stable diffusion those things are within the budget of MIT.", "tokens": [50364, 400, 370, 436, 848, 300, 572, 11, 572, 11, 321, 393, 3847, 2487, 27708, 411, 572, 2722, 88, 2010, 5245, 8351, 25242, 729, 721, 366, 1951, 264, 4706, 295, 13100, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1965059212275914, "compression_ratio": 1.7410071942446044, "no_speech_prob": 0.003168476512655616}, {"id": 475, "seek": 401000, "start": 4018.0, "end": 4026.0, "text": " You do that to trade condition because you have to have text image pairs see if a lot. This is a huge source of supervision here, as opposed to just random images.", "tokens": [50764, 509, 360, 300, 281, 4923, 4188, 570, 291, 362, 281, 362, 2487, 3256, 15494, 536, 498, 257, 688, 13, 639, 307, 257, 2603, 4009, 295, 32675, 510, 11, 382, 8851, 281, 445, 4974, 5267, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1965059212275914, "compression_ratio": 1.7410071942446044, "no_speech_prob": 0.003168476512655616}, {"id": 476, "seek": 401000, "start": 4026.0, "end": 4035.0, "text": " And if you have that, then you're in like the hundreds of thousands of dollars of range to train one of those big models, as opposed to the tens of millions of dollars range.", "tokens": [51164, 400, 498, 291, 362, 300, 11, 550, 291, 434, 294, 411, 264, 6779, 295, 5383, 295, 3808, 295, 3613, 281, 3847, 472, 295, 729, 955, 5245, 11, 382, 8851, 281, 264, 10688, 295, 6803, 295, 3808, 3613, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1965059212275914, "compression_ratio": 1.7410071942446044, "no_speech_prob": 0.003168476512655616}, {"id": 477, "seek": 403500, "start": 4035.0, "end": 4038.0, "text": " This is anecdotal.", "tokens": [50364, 639, 307, 26652, 38180, 13, 50514], "temperature": 0.0, "avg_logprob": -0.24466135594751928, "compression_ratio": 1.3933649289099526, "no_speech_prob": 0.018227985128760338}, {"id": 478, "seek": 403500, "start": 4038.0, "end": 4041.0, "text": " They might be just trying to get some GPUs. I'm not sure.", "tokens": [50514, 814, 1062, 312, 445, 1382, 281, 483, 512, 18407, 82, 13, 286, 478, 406, 988, 13, 50664], "temperature": 0.0, "avg_logprob": -0.24466135594751928, "compression_ratio": 1.3933649289099526, "no_speech_prob": 0.018227985128760338}, {"id": 479, "seek": 403500, "start": 4041.0, "end": 4054.0, "text": " By the way, address a question to both of you, but an important feature of transformers compared to previous networks is the fact that you don't have to worry about labeling, especially when you use text, right?", "tokens": [50664, 3146, 264, 636, 11, 2985, 257, 1168, 281, 1293, 295, 291, 11, 457, 364, 1021, 4111, 295, 4088, 433, 5347, 281, 3894, 9590, 307, 264, 1186, 300, 291, 500, 380, 362, 281, 3292, 466, 40244, 11, 2318, 562, 291, 764, 2487, 11, 558, 30, 51314], "temperature": 0.0, "avg_logprob": -0.24466135594751928, "compression_ratio": 1.3933649289099526, "no_speech_prob": 0.018227985128760338}, {"id": 480, "seek": 403500, "start": 4054.0, "end": 4056.0, "text": " Yeah.", "tokens": [51314, 865, 13, 51414], "temperature": 0.0, "avg_logprob": -0.24466135594751928, "compression_ratio": 1.3933649289099526, "no_speech_prob": 0.018227985128760338}, {"id": 481, "seek": 405600, "start": 4056.0, "end": 4065.0, "text": " I think that's the issue about the supervision of supervision, which is like I never found a consistent definition of what a supervised task is versus not supervised one besides economic cost.", "tokens": [50364, 286, 519, 300, 311, 264, 2734, 466, 264, 32675, 295, 32675, 11, 597, 307, 411, 286, 1128, 1352, 257, 8398, 7123, 295, 437, 257, 46533, 5633, 307, 5717, 406, 46533, 472, 11868, 4836, 2063, 13, 50814], "temperature": 0.0, "avg_logprob": -0.22559024319790377, "compression_ratio": 1.7665369649805447, "no_speech_prob": 0.11152207851409912}, {"id": 482, "seek": 405600, "start": 4065.0, "end": 4069.0, "text": " Like how much did you spend to acquire this data seems to be the only consistent label.", "tokens": [50814, 1743, 577, 709, 630, 291, 3496, 281, 20001, 341, 1412, 2544, 281, 312, 264, 787, 8398, 7645, 13, 51014], "temperature": 0.0, "avg_logprob": -0.22559024319790377, "compression_ratio": 1.7665369649805447, "no_speech_prob": 0.11152207851409912}, {"id": 483, "seek": 405600, "start": 4069.0, "end": 4073.0, "text": " But if you speak about neuroscience is not only cost, right?", "tokens": [51014, 583, 498, 291, 1710, 466, 42762, 307, 406, 787, 2063, 11, 558, 30, 51214], "temperature": 0.0, "avg_logprob": -0.22559024319790377, "compression_ratio": 1.7665369649805447, "no_speech_prob": 0.11152207851409912}, {"id": 484, "seek": 405600, "start": 4073.0, "end": 4079.0, "text": " Right, but then like I think, yeah, this is another divergence in between two communities, right, which is like.", "tokens": [51214, 1779, 11, 457, 550, 411, 286, 519, 11, 1338, 11, 341, 307, 1071, 47387, 294, 1296, 732, 4456, 11, 558, 11, 597, 307, 411, 13, 51514], "temperature": 0.0, "avg_logprob": -0.22559024319790377, "compression_ratio": 1.7665369649805447, "no_speech_prob": 0.11152207851409912}, {"id": 485, "seek": 407900, "start": 4079.0, "end": 4090.0, "text": " But the real problem is the brain. Come on. Everything else is", "tokens": [50364, 583, 264, 957, 1154, 307, 264, 3567, 13, 2492, 322, 13, 5471, 1646, 307, 50914], "temperature": 0.0, "avg_logprob": -0.351708250779372, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.04704286903142929}, {"id": 486, "seek": 407900, "start": 4090.0, "end": 4096.0, "text": " More, more questions. I'm happy to keep chatting much for one more spester.", "tokens": [50914, 5048, 11, 544, 1651, 13, 286, 478, 2055, 281, 1066, 24654, 709, 337, 472, 544, 637, 3011, 13, 51214], "temperature": 0.0, "avg_logprob": -0.351708250779372, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.04704286903142929}, {"id": 487, "seek": 407900, "start": 4096.0, "end": 4105.0, "text": " I think we want to quite some time, we can adjourn and to the next iteration sometime in the next few weeks.", "tokens": [51214, 286, 519, 321, 528, 281, 1596, 512, 565, 11, 321, 393, 46236, 77, 293, 281, 264, 958, 24784, 15053, 294, 264, 958, 1326, 3259, 13, 51664], "temperature": 0.0, "avg_logprob": -0.351708250779372, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.04704286903142929}, {"id": 488, "seek": 410500, "start": 4105.0, "end": 4107.0, "text": " Okay. Thank you.", "tokens": [50364, 1033, 13, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.3254162073135376, "compression_ratio": 0.6666666666666666, "no_speech_prob": 0.5373407006263733}], "language": "en"}