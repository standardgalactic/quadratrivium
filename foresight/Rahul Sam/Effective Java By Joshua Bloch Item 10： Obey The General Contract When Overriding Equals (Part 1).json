{"text": " Hey, everyone, welcome to yet another episode of my video series on Joshua blocks effective Java where I go through the items that he has Animated in this book and expand on them and try and make sense of them And hopefully as I do that you can gain some value from it too and today and forgive me for being Self-advertising but I am quite happy because I managed to get through the first nine items which is essentially chapter two So the first part of the book and I am I'm really happy that I didn't do it through. I'm I'm glad that First of all, I'm really enjoying this. I'm learning a lot, but also Given that this is something I'm new to Expanding and elucidating on programming or just any concept in general It's something that I'm I think it's a skill that I'm developing on learning to Communicate and articulate myself when discussing programming concepts or software engineering concepts, let's say and obviously, I Still don't think I have a really deep understanding of the Java language therefore, it's a great feeling to get through the first nine items or the second chapter which Essentially is the first chapter in this book because the first chapter is the introduction And today we're gonna move on to chapter three And as per usual before I do that This is not gonna change. I've got to always do this Proviso in the introduction So if you've been following along in the series, you could skip this bit to save your time But without further ado, let's get started with the proviso Firstly as I always state This is not a tutorial and I certainly am not a teacher or an expert Which is again one reason I'm really glad that I managed to assist through the first to the first nine items as It is not something that naturally comes to me to be able to As I teach firstly because I too am learning as I go along Trying to make sense of these items and the concepts in the book. So again, sorry I'm talking too much the proviso or the caveat is this is not a tutorial. So please don't treat it like one I'm pretty sure I've in fact I've already made a few mistakes in the previous items and I've corrected them and tried to rectify them in the comment section When people have pointed them out and I'm pretty sure in the remaining what 90 odd items I'm gonna make a lot more mistakes. So firstly, please do point them out and Again, don't take what I say as let's say gospel's truth. This is an analogy that I use is Blind leading the blind, which is kind of what I feel like I'm doing here. I don't know what the hell I'm doing and I'm trying to hopefully Make things a bit more lucid for you the viewer who probably also doesn't know what the hell you're doing Probably you have a better idea than I do but still I feel equally lost in this world. Isn't that the ultimate verity? Yeah, I call this a Disquisition so it's something I'm trying to collectively make sense of using stucco flow using the community that I'm trying to build around this video series and Since recently even chat GPT. I've been asking questions for a cup 10 you do this book from chat GPT and it has been Sublime, it's it's been extremely helpful. That's great. So again, I think I already made this point I will inevitably make mistakes. So yeah, please point them out and Given that this is a Programming video series all the code that I use will be up on get have it'll be published on get have not only on my personal repository, but also just your blocks. Let's say official Repository on this book. I'll leave the links down below the description and saying all that let us get started with item number 10 which is Obey the general contract when overriding equals and this item since we are now in a new chapter is a part of chapter 3 Which is methods common to all objects so item 10 is Undoubtedly the longest item in this book. I think it's probably 15 20 pages. It's quite long. Therefore. I have no choice but to Well, I probably could cover the whole item in one really superficial video, but that's not the intent behind this video series Yeah, it's not really annoying. I live in a very very quiet neighborhood, but the moment that I've got a recorded video Some son of a bitch doesn't matter. Okay back to this Where was I say I got distracted. Okay item 10 is quite a long item and and And and the intent. Yeah, that's that's where I was the intent behind this video series was always to try and and Go as deep as possible into these ideas within what Within what I can manage There's a limit as to what my understanding is. I don't think I can go to like the compiler level then explain the JVM algorithm and whatnot I'm not that knowledgeable on Java O programming in general, but To my limits to my current limits the goal was always to go as deep as possible So therefore I'm gonna split up this item into multiple parts for now I'm thinking three parts because it kind of breaks down the item if you go through where they come has this Part where it's it's no connected, of course But then one leads to the other and I think you could break it down into three coherent parts. Let's say But also apart from its length, I really enjoy this item because it does involve some quite interesting computer science I mean basic first-year uni computer science But still it's always a good feeling at least for me to revisit some of those concepts like truth tables And and logic and all of that that we learned it in uni So again item 10 states Obey the general con obey the general contract when overriding equals I Apologize I just realized that since we are starting a new chapter I looked at the book and I didn't read out the introduction for chapter 10 Which is methods common to all objects. So before we get to the item itself. Let me read that out The chapter starts off like this Although object is a concrete class. It is designed primarily for extension That's correct. All classes are subclassed from object All of its non-final methods equals hash code to string clone and finalize have explicitly Sorry have explicit general contracts because they are designed to be overridden It is the responsibility of any class overriding these methods to obey their general contracts Failing to do so will prevent other classes that depend on the contracts Such as hash map and hash set from functioning properly in conjunction with the class So exactly as the introduction does suggest Essentially this whole chapter is gonna be about this object concrete class and it's a good segue to this diagram in fact this is this is a Let's let's just call it a skeletal diagram of what All the classes in Java look like so as you can see the object is a super. Let me zoom in a bit The object is the super class of all the other classes in Java and they inherit from that so these methods that Joshua block Joshua block in Animated equals hash code to string clone and finalize They're all methods of the object class that we'll be using across all the other classes and even the classes that we create On our own it provides a really good blueprint and in this item We're gonna really focus on the equals method and why we should obey the general contract when overriding this equals method by any of these other subclasses that do inherited from the superclass object So firstly just to get some formal definitions out of the way. I always like doing that I think it's a good way to get a very high level understanding and slowly Narrow into a to a concept the Oracle doc state Class object is the root of the class hierarchy Every class has object as a superclass all objects including areas implement the methods of this class So, which is why again the the The advice by Joshua block is to please try and obey the general contract when overriding any of these methods that we inherit And now pretending more to item 10, let's take a look at the equals method because that's what we're gonna really discuss in this item Again from the Oracle docs, I really like this definition actually it's it's a very straightforward one and kind of Puts it quite coherently The Oracle doc state where the equals method is that's how it's defined in the object class public Boolean equals So it returns a Boolean and then you can pass an object into it as a parameter. It takes an object The equals method implements. Sorry. I should say as a parameter. It takes Something of type object. Okay back back to the definition the equals method implements an equivalence relation or non-null object references The equals method for class object implements the most discriminating possible equivalence relating Sorry, I'll read that again The equals method for class object implements the most discriminating possible equivalence relation on objects That is for any non-null references reference value values X and Y This method returns true if and only if X and Y refer to the same object or in a bit more logic-based sense X double equals Y has a value true So firstly it's important to understand this this double equals operator, I forget if there's a proper word for it, but We need to firstly explore what This idea of equivalence relation means because that Pertains a lot to this item But before we get to that, let's firstly Try to understand what this double equals operator is so I got this article from GeeksforGeek and Firstly, let me read out the definition and once we are done with the definition Let's try to make a bit more sense as to what how that differs to the Equals method that's in the object class So the definition goes in GeeksforGeek geeks We can use the double equals operators for reference comparison address comparison and dot equals method for content comparison In simple words, the double equals checks if both objects point to the same memory location Whereas the equals evaluates to the comparison of values in the objects So it's a really simple concept. I mean, I could just show it right here Actually instead of showing it on my notion page. Let me just open up this article and show it here. So this is quite straightforward We have two variables S1 and S2 of type string and then S1 and S2 Will will give What will pass through because this string value? Hello, it's memory address. It's the same It's it's it's immutable And it'll it'll be the memory with the same address. So this will really do a memory address comparison But here with S1 and S3 because we had firstly this is an anti pattern one should never do this because it's a waste of memory This new object of string we are creating called. Hello. This hello for the variable S3 That gets a separate memory address So then I'm gonna be the same comparison despite the content being the same It's gonna return false because the memory address is different But that's not the case with using the dot equals method. That's in Dot equals method. That sounds weird the equals method. That's in the object class So string obviously is an object. It inherits this method from the from the object class and Here in both these lines. It's a pure content comparison. So despite S3 and Either S1 or S2 having a different memory location. The content is for the same So that's the comparison that the equals method does so You gotta remember that that's a general contract that we need to respect and we need to follow when if we are to override This equals method that it's the content that we compare. So going back to the definition from the oracle docs this term here Equivalence relation. It's actually a mathematical logic concept So we I don't think we're gonna get get to that really firstly even I myself because I'm not a logician I haven't got a good understanding of of everything that entails or everything behind the theory behind equivalence relation, but Apropos Java What equivalence relation really means is comparing the content of the of two objects Which is what we did in this example here. We're comparing the content and not really the reference in in memory And saying all that let's get to so I should have mentioned this earlier in part one in this video Which is part one of item 10 We're really gonna focus on this when not to override the equals method and then in the next part We'll get to the crux of the matter as to when exactly to override it and then how to to follow the general contract or obey the general contract so firstly When not to override the equals method So if we do inherit this method from the superclass object, when is it okay to not override it despite most times? We may have to override it In the item 10 Joshua blocks starts off like this The easiest way to avoid problems is not to override the equals method In which case each instance of the class is equal only to itself and then he states This is the right thing to do if any of the following conditions apply and he's listed down a few of the conditions So in this item will go through sorry in this part of this item Getting a bit confusing in this part will go through those reasons The first one is if an instance of the class is inherently unique now. What does that mean firstly? Let me read out the definition He states Don't override the equals method if each instance of the class is inherently unique This is true for classes such as thread that represent active entities rather than values The equals implementation provided by object has exactly the right behavior for these classes So of course the question with asking is what is threat? What is the threat class the threat class? You can go through the docs on Oracle But it's it's used to spin up a new thread a new thread of work simply put according to the Oracle docs a thread is a Thread of execution in a program The JVM allows an application to have multiple threads of execution running concurrently So obviously the threat class is used for a concurrency And much threading. So why would a instance of a thread be inherently unique? it it seems rather obvious isn't it because Whenever a new thread is spun up, even if these two threads are spun up from the same state We we were pretty sure that they're not gonna act the same way once they're spun up and they start executing in their computation They the the threads in that sense represent a dynamic computation a dynamic object where It it throughout its lifetime. It's gonna change. It's gonna it's not gonna be consistent and therefore Two threads that may again start on with the same state Will still act completely differently because they're doing completely different work. Therefore, it makes no sense to To override the equals method That that only compares the content of of two objects for the threat class because we know that they're gonna be inherently unique Therefore if you do compare two threat objects, their content is gonna be different Therefore, it's no use to override it and try and change it because What the object class has defined in the equals method that does the job And if we just suppose the threat class with something like the string class Where we know the content of the string class is gonna be the same as in not the content of the string class But if you have two objects like this, we can make this object immutable because we know the content is gonna be the same Therefore, it's no use doing something like this where we Recreate a new instance of that class and have a new object. That's again, as I said an anti-pattern So this is a static object in that sense for for all intents and purposes Whereas that that won't be the case for the threat class the next reason is to not override the equals method is if a Logically quality tests in a class is not required So a warranted question is What is a logically quality tests firstly? Let's understand what logical equivalence is and this kind of what I meant by there's a bit of basic computer science that I find always Interesting so Khan Academy defines logical equivalence as the idea that more than one expression can have the same meaning But have a different form often a form that helps make the meaning more clear so the example on Khan Academy for logical equivalence is as If you take these three statements, you cannot go to the park if your sister is awake or Your room is dirty. That's one statement. The other one is you can go to the park if your sister is not awake and Your room is not dirty or even simpler You can go to the park if your sister's asleep and your room is clean now these three statements despite having a Different structure or different let's say content They are still logically equal in terms of the meaning we derive from them. There is logical equivalence But but for Java of course, and I just wanted to read that up because I thought it was quite interesting Oh, by the way Before we get the Java idea in the context of Java. I mean, let's let's take a look at this is like a Biconditional truth table. So another way of thinking in a bit more formal sense of logical equivalence is is if we take logical equivalence if if both P and Q are true, then The biconditional value is also true if either one of them is false. It's gonna be false But also if all of both of them are false, they're still they still have this logical equivalence. Therefore, it's gonna be true so it's it's it's it's like a One one is one and then zero zero is still one if that makes sense But you know in the context of Java, it's I just thought that was interesting And I wanted to go into that and the context of Java of course logical equality compares the content The the content of the object the data of the object Instead of the values of the memory reference as we discussed earlier So let's take a look at a quick demo. Oh before I get to the demo Let me read out the definition by Joshua block on that point. So again, he says there's no need to override the equals method if they if there's no need for the class to provide a logical equality test For example The Java util reg X pattern class Could have overwritten equals to check whether two pattern instances represent represented exactly the same regular expression But the designers didn't think That clients would need or want this functionality. Correct. It's it this very much This is like the art of object-oriented design It's important to understand What what the context of a API we write will be used and and these the designers of this API thought that it's it's not necessary to override the equals method because We would never really use the Equals method to compare to instances of pattern and let's take a look at an example. So a quick demo. I have here is Let me open that up So I have this static Boolean method called run regular expression against string which takes a reg X and takes a text of type string and really what we're doing is we're creating a Compile reg X of type pattern a pattern object and Afterwards, we're using the matcher which interprets this pattern that that's so pattern dot compile returns a pattern a compile pattern and then matcher Interprets what it returns to look for equivalence. So not for equivalent Sorry to find that pattern in a given string or a given object of type string So over here if I run this You'll see it returns true false false So the reason for that is because obviously this reg X is a reg X for an email address And the first one is an email address these two don't fulfill the requirements of this reg X pattern and Attending to our point This the designers made it made a call that Uses of this API Will never never want to compare instances of the pattern class. There's just no reason for it Therefore we can leave the this as an order to put it in a bit more formal sense The designers made it made a call that the users of this API Will never require logical equality between instances of the pattern class Therefore we can leave the equals method as it is they thought and at times like that there's no requirement to override the equals method and the other reason of course not override is if the class you're writing and designing already has a superclass and inherits Methods from the superclass and if that superclass is already overridden the the equals method appropriately to the subclass Then this wouldn't be an issue. We wouldn't have to again override the overridden equals method That would be a bit absurd. In fact, we're not gonna get to this in this part, but in the next part we're gonna discuss the The List code Substitution principle that is something we should follow when in class hierarchies and inheritance Because of that principle and if we do follow that principle theoretically, there shouldn't be a reason for or subclass to override a Equals method of a superclass that's already overridden the equals method of the object class if that makes sense So for instance before I get to the demo, let's take a look at this This is the class diagram for and I I'm not sure what the accuracy of this is because the Java collections framework is huge And it's growing huge sound like trumpet. It's huge and it's growing quite a lot and and as you can see here There's a there are there are many that all the class hierarchies their implementations and extensions and inheritance taking place so the example that Joshua block has given in the item is So don't override when a superclass has already overridden equals as I did say and the superclass Behavior is appropriate for this class and if we do follow that principle theoretically It should be the list curve Substitution principle for example most set implementations inherit their equals implementation from abstract set list implementations from abstract lists and map implementations from abstract map, and that's why I wanted to have this diagram here because so if we take a look at set you can see that the the set or the hash set in this case is inheriting Sorry the set interface is implemented by the abstract set as you can see here And so yeah, sorry. I gotta be confused there The set interface is implemented by the abstract set and I've caused in the concrete class Which is the hash set that is here extends that abstract set but also implements the set interface I'm not sure why that happens, but why would it? extend the abstract set and again implement the set interface if the abstract set has already implemented the set interface I'm not sure but in any case. I'm not gonna get into the Java collections framework here, but the point being if the superclass is appropriately Done the overriding. There's no requirement for The subclass to do the overriding again. So in the example that I've used I've just created a few has sets hash sets I'm just gonna write and show it to you Whoops Now you can see here I'm comparing the first hash set to the second one and the Again the first one of the third one the first two has set so hash hash set Has set and has set two They both have equivalence a in the sense of Logical equivalence so the content of the objects are the same. They both have effective Java Where's the third one hash set three has effective type strip a typescript and we compare hash set three to hash set one It's part. It's returning a false and that's what you expect. So that means a superclass which was the abstract Set class has done the overriding correctly and it's following the general contract of the object class equals method Just on the Java collections framework as you saw even I was quite confused I mean, I really don't know if anyone except probably the designers and you know the the pantheon of the Java legends Have a tarot understanding of the collections framework. It's it's quite quite large and extensive But if you do want to read about it This is in fact not even read about it But it's just good to that bookmark this page and use use it as a reference or these days you could just ask Chagapiti That life is much easier Okay, before I go for a tangent the the other reason to not override the equals method is If you're certain that the equals method will never be invoked quite straightforward that again probably relates to the other point where as a designer what has to make that call and and and see If users of this API will ever really invoke the equals method So Joshua block states that the class so even it will not be invoked if the class is Private or packaged private and you are certain that it's equals method will never be invoked. That was a confusing way For me to put it but you get the point and then he states if you extremely risk averse You can override the equals method to ensure that it isn't invoked accidentally And I think it's good to be Risk averse in that sense and I shall show the demo as to why it's probably a good idea to override the equals method Regardless of it being private regardless of the class being private or packaged private in this demo So we have this class called demo and then in that class we have a private in a class So a private in a class now this class would only be used by the demo class because it's private No one outside can use it. It's well encapsulated and in the private in a class We have overwritten the equals method And I shall show this bit a bit later. This is how you be fully risk averse and prevent Any class from overriding the equals method or any use of this API So if you go to the this private in a class method, which I know can be a bit confusing I call it a private in a class method not because it's inside the private in a class But this method which is a public method can be used to access this private in a class via The outer demo class. So that's what we're doing here We're creating a new object of the inner class and we're calling this function call Display and then we have perhaps a malicious actor who's trying to Do the same thing access that it private in a class Via the outer demo class and try to invoke the equals method So if I do run this code, so here's a client that use that's using it We've created an object of type demo a new instance of demo class and if I run this You'll see as expected. It's it's running the private in a class method and it's first printing this log here and then it's also printing the log inside The method display which is inside. Sorry of the method display which is inside the inner class the private in a class That's fine. That's okay. We probably expect that. However, let's say This person wants to access What do I do there? I? Collapsed my function. Okay, let's say this person wants to access the equals method That's in the private in a class and we don't want it to be accessed by anyone In that case what we can do is we can throw a new assertion error saying keep away And therefore if a client now tries to access the equals method By the other class it'll throw an arrow Just like that Throw an assertion error saying keep away and that's how you be extra punctilious and careful And not allow anyone to use the equals method Especially if that someone's expected by the designer that is that is the end of item 10 part 1 I was gonna say at the end of item 10 most certainly not We've still got heaps to cover in fact part 2 of this item is gonna be quite long because we need to go through all the reasons When it is appropriate to override the equals method and that's quite interesting So and then in part 3 we'll we'll finish it off with kind of summarizing on how To respect and obey the general contract went over an equals method and again I know it's quite long, but there's a reason that I'm doing that as I said I won't the intent of these items is To go as deep as possible Within what what I can manage And I hope you find value in it because what's the reason what's the use of just superficially reading these things? If we don't really grok the concepts saying all that thank you for watching I hope you found value in this video. I shall see you in the next one. Cheers", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.96, "text": " Hey, everyone, welcome to yet another episode of my video series on Joshua blocks effective Java where I go through the items that he has", "tokens": [50364, 1911, 11, 1518, 11, 2928, 281, 1939, 1071, 3500, 295, 452, 960, 2638, 322, 24005, 8474, 4942, 10745, 689, 286, 352, 807, 264, 4754, 300, 415, 575, 50762], "temperature": 0.0, "avg_logprob": -0.24318140203302557, "compression_ratio": 1.6, "no_speech_prob": 0.25415167212486267}, {"id": 1, "seek": 0, "start": 8.8, "end": 12.74, "text": " Animated in this book and expand on them and try and make sense of them", "tokens": [50804, 21691, 770, 294, 341, 1446, 293, 5268, 322, 552, 293, 853, 293, 652, 2020, 295, 552, 51001], "temperature": 0.0, "avg_logprob": -0.24318140203302557, "compression_ratio": 1.6, "no_speech_prob": 0.25415167212486267}, {"id": 2, "seek": 0, "start": 12.74, "end": 18.740000000000002, "text": " And hopefully as I do that you can gain some value from it too and today and forgive me for being", "tokens": [51001, 400, 4696, 382, 286, 360, 300, 291, 393, 6052, 512, 2158, 490, 309, 886, 293, 965, 293, 10718, 385, 337, 885, 51301], "temperature": 0.0, "avg_logprob": -0.24318140203302557, "compression_ratio": 1.6, "no_speech_prob": 0.25415167212486267}, {"id": 3, "seek": 0, "start": 19.86, "end": 25.6, "text": " Self-advertising but I am quite happy because I managed to get through the first nine items which is essentially chapter two", "tokens": [51357, 16348, 12, 345, 3281, 3436, 457, 286, 669, 1596, 2055, 570, 286, 6453, 281, 483, 807, 264, 700, 4949, 4754, 597, 307, 4476, 7187, 732, 51644], "temperature": 0.0, "avg_logprob": -0.24318140203302557, "compression_ratio": 1.6, "no_speech_prob": 0.25415167212486267}, {"id": 4, "seek": 2560, "start": 25.6, "end": 31.86, "text": " So the first part of the book and I am I'm really happy that I didn't do it through. I'm I'm glad that", "tokens": [50364, 407, 264, 700, 644, 295, 264, 1446, 293, 286, 669, 286, 478, 534, 2055, 300, 286, 994, 380, 360, 309, 807, 13, 286, 478, 286, 478, 5404, 300, 50677], "temperature": 0.0, "avg_logprob": -0.24904144605000814, "compression_ratio": 1.7638376383763839, "no_speech_prob": 0.0163961760699749}, {"id": 5, "seek": 2560, "start": 32.68, "end": 35.400000000000006, "text": " First of all, I'm really enjoying this. I'm learning a lot, but also", "tokens": [50718, 2386, 295, 439, 11, 286, 478, 534, 9929, 341, 13, 286, 478, 2539, 257, 688, 11, 457, 611, 50854], "temperature": 0.0, "avg_logprob": -0.24904144605000814, "compression_ratio": 1.7638376383763839, "no_speech_prob": 0.0163961760699749}, {"id": 6, "seek": 2560, "start": 36.400000000000006, "end": 38.400000000000006, "text": " Given that this is something I'm new to", "tokens": [50904, 18600, 300, 341, 307, 746, 286, 478, 777, 281, 51004], "temperature": 0.0, "avg_logprob": -0.24904144605000814, "compression_ratio": 1.7638376383763839, "no_speech_prob": 0.0163961760699749}, {"id": 7, "seek": 2560, "start": 39.64, "end": 44.08, "text": " Expanding and elucidating on programming or just any concept in general", "tokens": [51066, 21391, 42389, 293, 806, 1311, 327, 990, 322, 9410, 420, 445, 604, 3410, 294, 2674, 51288], "temperature": 0.0, "avg_logprob": -0.24904144605000814, "compression_ratio": 1.7638376383763839, "no_speech_prob": 0.0163961760699749}, {"id": 8, "seek": 2560, "start": 44.64, "end": 48.8, "text": " It's something that I'm I think it's a skill that I'm developing on learning to", "tokens": [51316, 467, 311, 746, 300, 286, 478, 286, 519, 309, 311, 257, 5389, 300, 286, 478, 6416, 322, 2539, 281, 51524], "temperature": 0.0, "avg_logprob": -0.24904144605000814, "compression_ratio": 1.7638376383763839, "no_speech_prob": 0.0163961760699749}, {"id": 9, "seek": 2560, "start": 49.32, "end": 54.96, "text": " Communicate and articulate myself when discussing programming concepts or software engineering concepts, let's say", "tokens": [51550, 6800, 8700, 293, 30305, 2059, 562, 10850, 9410, 10392, 420, 4722, 7043, 10392, 11, 718, 311, 584, 51832], "temperature": 0.0, "avg_logprob": -0.24904144605000814, "compression_ratio": 1.7638376383763839, "no_speech_prob": 0.0163961760699749}, {"id": 10, "seek": 5496, "start": 55.56, "end": 57.56, "text": " and obviously, I", "tokens": [50394, 293, 2745, 11, 286, 50494], "temperature": 0.0, "avg_logprob": -0.2754642939803624, "compression_ratio": 1.6546184738955823, "no_speech_prob": 0.0037621669471263885}, {"id": 11, "seek": 5496, "start": 58.2, "end": 61.72, "text": " Still don't think I have a really deep understanding of the Java language", "tokens": [50526, 8291, 500, 380, 519, 286, 362, 257, 534, 2452, 3701, 295, 264, 10745, 2856, 50702], "temperature": 0.0, "avg_logprob": -0.2754642939803624, "compression_ratio": 1.6546184738955823, "no_speech_prob": 0.0037621669471263885}, {"id": 12, "seek": 5496, "start": 62.44, "end": 64.64, "text": " therefore, it's a great feeling to get through the", "tokens": [50738, 4412, 11, 309, 311, 257, 869, 2633, 281, 483, 807, 264, 50848], "temperature": 0.0, "avg_logprob": -0.2754642939803624, "compression_ratio": 1.6546184738955823, "no_speech_prob": 0.0037621669471263885}, {"id": 13, "seek": 5496, "start": 65.24, "end": 68.16, "text": " first nine items or the second chapter which", "tokens": [50878, 700, 4949, 4754, 420, 264, 1150, 7187, 597, 51024], "temperature": 0.0, "avg_logprob": -0.2754642939803624, "compression_ratio": 1.6546184738955823, "no_speech_prob": 0.0037621669471263885}, {"id": 14, "seek": 5496, "start": 68.72, "end": 72.08, "text": " Essentially is the first chapter in this book because the first chapter is the introduction", "tokens": [51052, 23596, 307, 264, 700, 7187, 294, 341, 1446, 570, 264, 700, 7187, 307, 264, 9339, 51220], "temperature": 0.0, "avg_logprob": -0.2754642939803624, "compression_ratio": 1.6546184738955823, "no_speech_prob": 0.0037621669471263885}, {"id": 15, "seek": 5496, "start": 72.72, "end": 75.36, "text": " And today we're gonna move on to chapter three", "tokens": [51252, 400, 965, 321, 434, 799, 1286, 322, 281, 7187, 1045, 51384], "temperature": 0.0, "avg_logprob": -0.2754642939803624, "compression_ratio": 1.6546184738955823, "no_speech_prob": 0.0037621669471263885}, {"id": 16, "seek": 5496, "start": 76.0, "end": 78.44, "text": " And as per usual before I do that", "tokens": [51416, 400, 382, 680, 7713, 949, 286, 360, 300, 51538], "temperature": 0.0, "avg_logprob": -0.2754642939803624, "compression_ratio": 1.6546184738955823, "no_speech_prob": 0.0037621669471263885}, {"id": 17, "seek": 5496, "start": 79.0, "end": 81.48, "text": " This is not gonna change. I've got to always do this", "tokens": [51566, 639, 307, 406, 799, 1319, 13, 286, 600, 658, 281, 1009, 360, 341, 51690], "temperature": 0.0, "avg_logprob": -0.2754642939803624, "compression_ratio": 1.6546184738955823, "no_speech_prob": 0.0037621669471263885}, {"id": 18, "seek": 8148, "start": 82.2, "end": 84.08, "text": " Proviso in the introduction", "tokens": [50400, 15685, 19227, 294, 264, 9339, 50494], "temperature": 0.0, "avg_logprob": -0.22517646627223237, "compression_ratio": 1.5850622406639003, "no_speech_prob": 0.01186689455062151}, {"id": 19, "seek": 8148, "start": 84.08, "end": 88.24000000000001, "text": " So if you've been following along in the series, you could skip this bit to save your time", "tokens": [50494, 407, 498, 291, 600, 668, 3480, 2051, 294, 264, 2638, 11, 291, 727, 10023, 341, 857, 281, 3155, 428, 565, 50702], "temperature": 0.0, "avg_logprob": -0.22517646627223237, "compression_ratio": 1.5850622406639003, "no_speech_prob": 0.01186689455062151}, {"id": 20, "seek": 8148, "start": 88.96000000000001, "end": 93.0, "text": " But without further ado, let's get started with the proviso", "tokens": [50738, 583, 1553, 3052, 22450, 11, 718, 311, 483, 1409, 365, 264, 1439, 19227, 50940], "temperature": 0.0, "avg_logprob": -0.22517646627223237, "compression_ratio": 1.5850622406639003, "no_speech_prob": 0.01186689455062151}, {"id": 21, "seek": 8148, "start": 94.28, "end": 96.28, "text": " Firstly as I always state", "tokens": [51004, 20042, 382, 286, 1009, 1785, 51104], "temperature": 0.0, "avg_logprob": -0.22517646627223237, "compression_ratio": 1.5850622406639003, "no_speech_prob": 0.01186689455062151}, {"id": 22, "seek": 8148, "start": 96.48, "end": 100.64, "text": " This is not a tutorial and I certainly am not a teacher or an expert", "tokens": [51114, 639, 307, 406, 257, 7073, 293, 286, 3297, 669, 406, 257, 5027, 420, 364, 5844, 51322], "temperature": 0.0, "avg_logprob": -0.22517646627223237, "compression_ratio": 1.5850622406639003, "no_speech_prob": 0.01186689455062151}, {"id": 23, "seek": 8148, "start": 100.64, "end": 106.84, "text": " Which is again one reason I'm really glad that I managed to assist through the first to the first nine items", "tokens": [51322, 3013, 307, 797, 472, 1778, 286, 478, 534, 5404, 300, 286, 6453, 281, 4255, 807, 264, 700, 281, 264, 700, 4949, 4754, 51632], "temperature": 0.0, "avg_logprob": -0.22517646627223237, "compression_ratio": 1.5850622406639003, "no_speech_prob": 0.01186689455062151}, {"id": 24, "seek": 10684, "start": 107.52000000000001, "end": 108.88000000000001, "text": " as", "tokens": [50398, 382, 50466], "temperature": 0.0, "avg_logprob": -0.21789679988738028, "compression_ratio": 1.5934579439252337, "no_speech_prob": 0.011866020038723946}, {"id": 25, "seek": 10684, "start": 108.88000000000001, "end": 112.16, "text": " It is not something that naturally comes to me to be able to", "tokens": [50466, 467, 307, 406, 746, 300, 8195, 1487, 281, 385, 281, 312, 1075, 281, 50630], "temperature": 0.0, "avg_logprob": -0.21789679988738028, "compression_ratio": 1.5934579439252337, "no_speech_prob": 0.011866020038723946}, {"id": 26, "seek": 10684, "start": 112.76, "end": 117.28, "text": " As I teach firstly because I too am learning as I go along", "tokens": [50660, 1018, 286, 2924, 27376, 570, 286, 886, 669, 2539, 382, 286, 352, 2051, 50886], "temperature": 0.0, "avg_logprob": -0.21789679988738028, "compression_ratio": 1.5934579439252337, "no_speech_prob": 0.011866020038723946}, {"id": 27, "seek": 10684, "start": 118.36, "end": 123.24000000000001, "text": " Trying to make sense of these items and the concepts in the book. So again, sorry", "tokens": [50940, 20180, 281, 652, 2020, 295, 613, 4754, 293, 264, 10392, 294, 264, 1446, 13, 407, 797, 11, 2597, 51184], "temperature": 0.0, "avg_logprob": -0.21789679988738028, "compression_ratio": 1.5934579439252337, "no_speech_prob": 0.011866020038723946}, {"id": 28, "seek": 10684, "start": 123.24000000000001, "end": 129.56, "text": " I'm talking too much the proviso or the caveat is this is not a tutorial. So please don't treat it like one", "tokens": [51184, 286, 478, 1417, 886, 709, 264, 1439, 19227, 420, 264, 43012, 307, 341, 307, 406, 257, 7073, 13, 407, 1767, 500, 380, 2387, 309, 411, 472, 51500], "temperature": 0.0, "avg_logprob": -0.21789679988738028, "compression_ratio": 1.5934579439252337, "no_speech_prob": 0.011866020038723946}, {"id": 29, "seek": 10684, "start": 129.92000000000002, "end": 132.2, "text": " I'm pretty sure I've in fact", "tokens": [51518, 286, 478, 1238, 988, 286, 600, 294, 1186, 51632], "temperature": 0.0, "avg_logprob": -0.21789679988738028, "compression_ratio": 1.5934579439252337, "no_speech_prob": 0.011866020038723946}, {"id": 30, "seek": 13220, "start": 132.2, "end": 138.04, "text": " I've already made a few mistakes in the previous items and I've corrected them and tried to rectify them in the comment section", "tokens": [50364, 286, 600, 1217, 1027, 257, 1326, 8038, 294, 264, 3894, 4754, 293, 286, 600, 31687, 552, 293, 3031, 281, 11048, 2505, 552, 294, 264, 2871, 3541, 50656], "temperature": 0.0, "avg_logprob": -0.18664054870605468, "compression_ratio": 1.6623376623376624, "no_speech_prob": 0.009705615229904652}, {"id": 31, "seek": 13220, "start": 138.35999999999999, "end": 144.07999999999998, "text": " When people have pointed them out and I'm pretty sure in the remaining what 90 odd items", "tokens": [50672, 1133, 561, 362, 10932, 552, 484, 293, 286, 478, 1238, 988, 294, 264, 8877, 437, 4289, 7401, 4754, 50958], "temperature": 0.0, "avg_logprob": -0.18664054870605468, "compression_ratio": 1.6623376623376624, "no_speech_prob": 0.009705615229904652}, {"id": 32, "seek": 13220, "start": 144.07999999999998, "end": 147.88, "text": " I'm gonna make a lot more mistakes. So firstly, please do point them out", "tokens": [50958, 286, 478, 799, 652, 257, 688, 544, 8038, 13, 407, 27376, 11, 1767, 360, 935, 552, 484, 51148], "temperature": 0.0, "avg_logprob": -0.18664054870605468, "compression_ratio": 1.6623376623376624, "no_speech_prob": 0.009705615229904652}, {"id": 33, "seek": 13220, "start": 148.64, "end": 149.95999999999998, "text": " and", "tokens": [51186, 293, 51252], "temperature": 0.0, "avg_logprob": -0.18664054870605468, "compression_ratio": 1.6623376623376624, "no_speech_prob": 0.009705615229904652}, {"id": 34, "seek": 13220, "start": 149.95999999999998, "end": 154.76, "text": " Again, don't take what I say as let's say gospel's truth. This is", "tokens": [51252, 3764, 11, 500, 380, 747, 437, 286, 584, 382, 718, 311, 584, 14943, 311, 3494, 13, 639, 307, 51492], "temperature": 0.0, "avg_logprob": -0.18664054870605468, "compression_ratio": 1.6623376623376624, "no_speech_prob": 0.009705615229904652}, {"id": 35, "seek": 13220, "start": 155.56, "end": 157.56, "text": " an analogy that I use is", "tokens": [51532, 364, 21663, 300, 286, 764, 307, 51632], "temperature": 0.0, "avg_logprob": -0.18664054870605468, "compression_ratio": 1.6623376623376624, "no_speech_prob": 0.009705615229904652}, {"id": 36, "seek": 15756, "start": 158.08, "end": 165.8, "text": " Blind leading the blind, which is kind of what I feel like I'm doing here. I don't know what the hell I'm doing and I'm trying to", "tokens": [50390, 34126, 5775, 264, 6865, 11, 597, 307, 733, 295, 437, 286, 841, 411, 286, 478, 884, 510, 13, 286, 500, 380, 458, 437, 264, 4921, 286, 478, 884, 293, 286, 478, 1382, 281, 50776], "temperature": 0.0, "avg_logprob": -0.2003932653688917, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.023683780804276466}, {"id": 37, "seek": 15756, "start": 167.04, "end": 168.88, "text": " hopefully", "tokens": [50838, 4696, 50930], "temperature": 0.0, "avg_logprob": -0.2003932653688917, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.023683780804276466}, {"id": 38, "seek": 15756, "start": 168.88, "end": 174.44, "text": " Make things a bit more lucid for you the viewer who probably also doesn't know what the hell you're doing", "tokens": [50930, 4387, 721, 257, 857, 544, 21296, 327, 337, 291, 264, 16767, 567, 1391, 611, 1177, 380, 458, 437, 264, 4921, 291, 434, 884, 51208], "temperature": 0.0, "avg_logprob": -0.2003932653688917, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.023683780804276466}, {"id": 39, "seek": 15756, "start": 174.44, "end": 180.44, "text": " Probably you have a better idea than I do but still I feel equally lost in this world. Isn't that the ultimate verity?", "tokens": [51208, 9210, 291, 362, 257, 1101, 1558, 813, 286, 360, 457, 920, 286, 841, 12309, 2731, 294, 341, 1002, 13, 6998, 380, 300, 264, 9705, 1306, 507, 30, 51508], "temperature": 0.0, "avg_logprob": -0.2003932653688917, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.023683780804276466}, {"id": 40, "seek": 15756, "start": 181.16, "end": 182.76, "text": " Yeah, I call this a", "tokens": [51544, 865, 11, 286, 818, 341, 257, 51624], "temperature": 0.0, "avg_logprob": -0.2003932653688917, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.023683780804276466}, {"id": 41, "seek": 18276, "start": 183.39999999999998, "end": 190.04, "text": " Disquisition so it's something I'm trying to collectively make sense of using stucco flow using the community that I'm trying to build around", "tokens": [50396, 4208, 15398, 849, 370, 309, 311, 746, 286, 478, 1382, 281, 24341, 652, 2020, 295, 1228, 342, 1311, 1291, 3095, 1228, 264, 1768, 300, 286, 478, 1382, 281, 1322, 926, 50728], "temperature": 0.0, "avg_logprob": -0.30935138938701257, "compression_ratio": 1.6151079136690647, "no_speech_prob": 0.18940876424312592}, {"id": 42, "seek": 18276, "start": 190.64, "end": 192.64, "text": " this video series and", "tokens": [50758, 341, 960, 2638, 293, 50858], "temperature": 0.0, "avg_logprob": -0.30935138938701257, "compression_ratio": 1.6151079136690647, "no_speech_prob": 0.18940876424312592}, {"id": 43, "seek": 18276, "start": 192.64, "end": 200.32, "text": " Since recently even chat GPT. I've been asking questions for a cup 10 you do this book from chat GPT and it has been", "tokens": [50858, 4162, 3938, 754, 5081, 26039, 51, 13, 286, 600, 668, 3365, 1651, 337, 257, 4414, 1266, 291, 360, 341, 1446, 490, 5081, 26039, 51, 293, 309, 575, 668, 51242], "temperature": 0.0, "avg_logprob": -0.30935138938701257, "compression_ratio": 1.6151079136690647, "no_speech_prob": 0.18940876424312592}, {"id": 44, "seek": 18276, "start": 201.35999999999999, "end": 206.48, "text": " Sublime, it's it's been extremely helpful. That's great. So again, I think I already made this point", "tokens": [51294, 8511, 40941, 11, 309, 311, 309, 311, 668, 4664, 4961, 13, 663, 311, 869, 13, 407, 797, 11, 286, 519, 286, 1217, 1027, 341, 935, 51550], "temperature": 0.0, "avg_logprob": -0.30935138938701257, "compression_ratio": 1.6151079136690647, "no_speech_prob": 0.18940876424312592}, {"id": 45, "seek": 18276, "start": 206.48, "end": 210.04, "text": " I will inevitably make mistakes. So yeah, please point them out and", "tokens": [51550, 286, 486, 28171, 652, 8038, 13, 407, 1338, 11, 1767, 935, 552, 484, 293, 51728], "temperature": 0.0, "avg_logprob": -0.30935138938701257, "compression_ratio": 1.6151079136690647, "no_speech_prob": 0.18940876424312592}, {"id": 46, "seek": 21004, "start": 210.76, "end": 212.76, "text": " Given that this is a", "tokens": [50400, 18600, 300, 341, 307, 257, 50500], "temperature": 0.0, "avg_logprob": -0.2938609176807189, "compression_ratio": 1.5377777777777777, "no_speech_prob": 0.021609490737318993}, {"id": 47, "seek": 21004, "start": 213.6, "end": 221.48, "text": " Programming video series all the code that I use will be up on get have it'll be published on get have not only on my personal", "tokens": [50542, 8338, 2810, 960, 2638, 439, 264, 3089, 300, 286, 764, 486, 312, 493, 322, 483, 362, 309, 603, 312, 6572, 322, 483, 362, 406, 787, 322, 452, 2973, 50936], "temperature": 0.0, "avg_logprob": -0.2938609176807189, "compression_ratio": 1.5377777777777777, "no_speech_prob": 0.021609490737318993}, {"id": 48, "seek": 21004, "start": 221.48, "end": 224.92, "text": " repository, but also just your blocks. Let's say official", "tokens": [50936, 25841, 11, 457, 611, 445, 428, 8474, 13, 961, 311, 584, 4783, 51108], "temperature": 0.0, "avg_logprob": -0.2938609176807189, "compression_ratio": 1.5377777777777777, "no_speech_prob": 0.021609490737318993}, {"id": 49, "seek": 21004, "start": 226.23999999999998, "end": 229.95999999999998, "text": " Repository on this book. I'll leave the links down below the description", "tokens": [51174, 3696, 9598, 827, 322, 341, 1446, 13, 286, 603, 1856, 264, 6123, 760, 2507, 264, 3855, 51360], "temperature": 0.0, "avg_logprob": -0.2938609176807189, "compression_ratio": 1.5377777777777777, "no_speech_prob": 0.021609490737318993}, {"id": 50, "seek": 21004, "start": 230.48, "end": 234.44, "text": " and saying all that let us get started with item number 10", "tokens": [51386, 293, 1566, 439, 300, 718, 505, 483, 1409, 365, 3174, 1230, 1266, 51584], "temperature": 0.0, "avg_logprob": -0.2938609176807189, "compression_ratio": 1.5377777777777777, "no_speech_prob": 0.021609490737318993}, {"id": 51, "seek": 21004, "start": 235.2, "end": 236.68, "text": " which is", "tokens": [51622, 597, 307, 51696], "temperature": 0.0, "avg_logprob": -0.2938609176807189, "compression_ratio": 1.5377777777777777, "no_speech_prob": 0.021609490737318993}, {"id": 52, "seek": 23668, "start": 236.68, "end": 244.28, "text": " Obey the general contract when overriding equals and this item since we are now in a new chapter is a part of chapter 3", "tokens": [50364, 422, 13502, 264, 2674, 4364, 562, 670, 81, 2819, 6915, 293, 341, 3174, 1670, 321, 366, 586, 294, 257, 777, 7187, 307, 257, 644, 295, 7187, 805, 50744], "temperature": 0.0, "avg_logprob": -0.22462479464979057, "compression_ratio": 1.473170731707317, "no_speech_prob": 0.004825530108064413}, {"id": 53, "seek": 23668, "start": 244.28, "end": 246.6, "text": " Which is methods common to all objects", "tokens": [50744, 3013, 307, 7150, 2689, 281, 439, 6565, 50860], "temperature": 0.0, "avg_logprob": -0.22462479464979057, "compression_ratio": 1.473170731707317, "no_speech_prob": 0.004825530108064413}, {"id": 54, "seek": 23668, "start": 247.96, "end": 249.96, "text": " so item 10 is", "tokens": [50928, 370, 3174, 1266, 307, 51028], "temperature": 0.0, "avg_logprob": -0.22462479464979057, "compression_ratio": 1.473170731707317, "no_speech_prob": 0.004825530108064413}, {"id": 55, "seek": 23668, "start": 251.04000000000002, "end": 254.76000000000002, "text": " Undoubtedly the longest item in this book. I think it's", "tokens": [51082, 2719, 32135, 264, 15438, 3174, 294, 341, 1446, 13, 286, 519, 309, 311, 51268], "temperature": 0.0, "avg_logprob": -0.22462479464979057, "compression_ratio": 1.473170731707317, "no_speech_prob": 0.004825530108064413}, {"id": 56, "seek": 23668, "start": 255.76000000000002, "end": 256.92, "text": " probably", "tokens": [51318, 1391, 51376], "temperature": 0.0, "avg_logprob": -0.22462479464979057, "compression_ratio": 1.473170731707317, "no_speech_prob": 0.004825530108064413}, {"id": 57, "seek": 23668, "start": 256.92, "end": 262.0, "text": " 15 20 pages. It's quite long. Therefore. I have no choice but to", "tokens": [51376, 2119, 945, 7183, 13, 467, 311, 1596, 938, 13, 7504, 13, 286, 362, 572, 3922, 457, 281, 51630], "temperature": 0.0, "avg_logprob": -0.22462479464979057, "compression_ratio": 1.473170731707317, "no_speech_prob": 0.004825530108064413}, {"id": 58, "seek": 26200, "start": 262.72, "end": 270.88, "text": " Well, I probably could cover the whole item in one really superficial video, but that's not the intent behind this video series", "tokens": [50400, 1042, 11, 286, 1391, 727, 2060, 264, 1379, 3174, 294, 472, 534, 34622, 960, 11, 457, 300, 311, 406, 264, 8446, 2261, 341, 960, 2638, 50808], "temperature": 0.0, "avg_logprob": -0.23451610233472742, "compression_ratio": 1.5738396624472575, "no_speech_prob": 0.005818135570734739}, {"id": 59, "seek": 26200, "start": 272.88, "end": 279.08, "text": " Yeah, it's not really annoying. I live in a very very quiet neighborhood, but the moment that I've got a recorded video", "tokens": [50908, 865, 11, 309, 311, 406, 534, 11304, 13, 286, 1621, 294, 257, 588, 588, 5677, 7630, 11, 457, 264, 1623, 300, 286, 600, 658, 257, 8287, 960, 51218], "temperature": 0.0, "avg_logprob": -0.23451610233472742, "compression_ratio": 1.5738396624472575, "no_speech_prob": 0.005818135570734739}, {"id": 60, "seek": 26200, "start": 280.2, "end": 284.08, "text": " Some son of a bitch doesn't matter. Okay back to this", "tokens": [51274, 2188, 1872, 295, 257, 11960, 1177, 380, 1871, 13, 1033, 646, 281, 341, 51468], "temperature": 0.0, "avg_logprob": -0.23451610233472742, "compression_ratio": 1.5738396624472575, "no_speech_prob": 0.005818135570734739}, {"id": 61, "seek": 26200, "start": 285.2, "end": 289.44, "text": " Where was I say I got distracted. Okay item 10 is quite a long item and", "tokens": [51524, 2305, 390, 286, 584, 286, 658, 21658, 13, 1033, 3174, 1266, 307, 1596, 257, 938, 3174, 293, 51736], "temperature": 0.0, "avg_logprob": -0.23451610233472742, "compression_ratio": 1.5738396624472575, "no_speech_prob": 0.005818135570734739}, {"id": 62, "seek": 28944, "start": 289.84, "end": 290.96, "text": " and", "tokens": [50384, 293, 50440], "temperature": 0.0, "avg_logprob": -0.25484272114281514, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.0013248265022411942}, {"id": 63, "seek": 28944, "start": 290.96, "end": 297.24, "text": " And and the intent. Yeah, that's that's where I was the intent behind this video series was always to try and and", "tokens": [50440, 400, 293, 264, 8446, 13, 865, 11, 300, 311, 300, 311, 689, 286, 390, 264, 8446, 2261, 341, 960, 2638, 390, 1009, 281, 853, 293, 293, 50754], "temperature": 0.0, "avg_logprob": -0.25484272114281514, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.0013248265022411942}, {"id": 64, "seek": 28944, "start": 297.4, "end": 300.36, "text": " Go as deep as possible into these ideas", "tokens": [50762, 1037, 382, 2452, 382, 1944, 666, 613, 3487, 50910], "temperature": 0.0, "avg_logprob": -0.25484272114281514, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.0013248265022411942}, {"id": 65, "seek": 28944, "start": 300.96, "end": 302.96, "text": " within what", "tokens": [50940, 1951, 437, 51040], "temperature": 0.0, "avg_logprob": -0.25484272114281514, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.0013248265022411942}, {"id": 66, "seek": 28944, "start": 303.0, "end": 305.0, "text": " Within what I can manage", "tokens": [51042, 15996, 437, 286, 393, 3067, 51142], "temperature": 0.0, "avg_logprob": -0.25484272114281514, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.0013248265022411942}, {"id": 67, "seek": 28944, "start": 305.04, "end": 312.28, "text": " There's a limit as to what my understanding is. I don't think I can go to like the compiler level then explain the JVM algorithm and whatnot", "tokens": [51144, 821, 311, 257, 4948, 382, 281, 437, 452, 3701, 307, 13, 286, 500, 380, 519, 286, 393, 352, 281, 411, 264, 31958, 1496, 550, 2903, 264, 508, 53, 44, 9284, 293, 25882, 51506], "temperature": 0.0, "avg_logprob": -0.25484272114281514, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.0013248265022411942}, {"id": 68, "seek": 28944, "start": 312.28, "end": 316.56, "text": " I'm not that knowledgeable on Java O programming in general, but", "tokens": [51506, 286, 478, 406, 300, 33800, 322, 10745, 422, 9410, 294, 2674, 11, 457, 51720], "temperature": 0.0, "avg_logprob": -0.25484272114281514, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.0013248265022411942}, {"id": 69, "seek": 31656, "start": 316.92, "end": 321.88, "text": " To my limits to my current limits the goal was always to go as deep as possible", "tokens": [50382, 1407, 452, 10406, 281, 452, 2190, 10406, 264, 3387, 390, 1009, 281, 352, 382, 2452, 382, 1944, 50630], "temperature": 0.0, "avg_logprob": -0.1960583311138731, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0035376083105802536}, {"id": 70, "seek": 31656, "start": 322.4, "end": 328.28000000000003, "text": " So therefore I'm gonna split up this item into multiple parts for now", "tokens": [50656, 407, 4412, 286, 478, 799, 7472, 493, 341, 3174, 666, 3866, 3166, 337, 586, 50950], "temperature": 0.0, "avg_logprob": -0.1960583311138731, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0035376083105802536}, {"id": 71, "seek": 31656, "start": 328.28000000000003, "end": 334.76, "text": " I'm thinking three parts because it kind of breaks down the item if you go through where they come has this", "tokens": [50950, 286, 478, 1953, 1045, 3166, 570, 309, 733, 295, 9857, 760, 264, 3174, 498, 291, 352, 807, 689, 436, 808, 575, 341, 51274], "temperature": 0.0, "avg_logprob": -0.1960583311138731, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0035376083105802536}, {"id": 72, "seek": 31656, "start": 335.44, "end": 338.52, "text": " Part where it's it's no connected, of course", "tokens": [51308, 4100, 689, 309, 311, 309, 311, 572, 4582, 11, 295, 1164, 51462], "temperature": 0.0, "avg_logprob": -0.1960583311138731, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0035376083105802536}, {"id": 73, "seek": 31656, "start": 338.52, "end": 343.2, "text": " But then one leads to the other and I think you could break it down into three coherent parts. Let's say", "tokens": [51462, 583, 550, 472, 6689, 281, 264, 661, 293, 286, 519, 291, 727, 1821, 309, 760, 666, 1045, 36239, 3166, 13, 961, 311, 584, 51696], "temperature": 0.0, "avg_logprob": -0.1960583311138731, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0035376083105802536}, {"id": 74, "seek": 34320, "start": 344.2, "end": 350.84, "text": " But also apart from its length, I really enjoy this item because it does involve some quite interesting computer science", "tokens": [50414, 583, 611, 4936, 490, 1080, 4641, 11, 286, 534, 2103, 341, 3174, 570, 309, 775, 9494, 512, 1596, 1880, 3820, 3497, 50746], "temperature": 0.0, "avg_logprob": -0.2072556342607663, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.007344725076109171}, {"id": 75, "seek": 34320, "start": 350.84, "end": 353.88, "text": " I mean basic first-year uni computer science", "tokens": [50746, 286, 914, 3875, 700, 12, 5294, 36435, 3820, 3497, 50898], "temperature": 0.0, "avg_logprob": -0.2072556342607663, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.007344725076109171}, {"id": 76, "seek": 34320, "start": 353.88, "end": 359.91999999999996, "text": " But still it's always a good feeling at least for me to revisit some of those concepts like truth tables", "tokens": [50898, 583, 920, 309, 311, 1009, 257, 665, 2633, 412, 1935, 337, 385, 281, 32676, 512, 295, 729, 10392, 411, 3494, 8020, 51200], "temperature": 0.0, "avg_logprob": -0.2072556342607663, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.007344725076109171}, {"id": 77, "seek": 34320, "start": 360.64, "end": 364.12, "text": " And and logic and all of that that we learned it in uni", "tokens": [51236, 400, 293, 9952, 293, 439, 295, 300, 300, 321, 3264, 309, 294, 36435, 51410], "temperature": 0.0, "avg_logprob": -0.2072556342607663, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.007344725076109171}, {"id": 78, "seek": 34320, "start": 365.2, "end": 368.2, "text": " So again item 10 states", "tokens": [51464, 407, 797, 3174, 1266, 4368, 51614], "temperature": 0.0, "avg_logprob": -0.2072556342607663, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.007344725076109171}, {"id": 79, "seek": 36820, "start": 369.2, "end": 374.0, "text": " Obey the general con obey the general contract when overriding equals I", "tokens": [50414, 422, 13502, 264, 2674, 416, 19297, 264, 2674, 4364, 562, 670, 81, 2819, 6915, 286, 50654], "temperature": 0.0, "avg_logprob": -0.22726085887235753, "compression_ratio": 1.5852534562211982, "no_speech_prob": 0.010483594611287117}, {"id": 80, "seek": 36820, "start": 374.64, "end": 377.71999999999997, "text": " Apologize I just realized that since we are starting a new chapter", "tokens": [50686, 8723, 1132, 1125, 286, 445, 5334, 300, 1670, 321, 366, 2891, 257, 777, 7187, 50840], "temperature": 0.0, "avg_logprob": -0.22726085887235753, "compression_ratio": 1.5852534562211982, "no_speech_prob": 0.010483594611287117}, {"id": 81, "seek": 36820, "start": 377.71999999999997, "end": 382.71999999999997, "text": " I looked at the book and I didn't read out the introduction for chapter 10", "tokens": [50840, 286, 2956, 412, 264, 1446, 293, 286, 994, 380, 1401, 484, 264, 9339, 337, 7187, 1266, 51090], "temperature": 0.0, "avg_logprob": -0.22726085887235753, "compression_ratio": 1.5852534562211982, "no_speech_prob": 0.010483594611287117}, {"id": 82, "seek": 36820, "start": 382.84, "end": 388.32, "text": " Which is methods common to all objects. So before we get to the item itself. Let me read that out", "tokens": [51096, 3013, 307, 7150, 2689, 281, 439, 6565, 13, 407, 949, 321, 483, 281, 264, 3174, 2564, 13, 961, 385, 1401, 300, 484, 51370], "temperature": 0.0, "avg_logprob": -0.22726085887235753, "compression_ratio": 1.5852534562211982, "no_speech_prob": 0.010483594611287117}, {"id": 83, "seek": 36820, "start": 389.48, "end": 391.48, "text": " The chapter starts off like this", "tokens": [51428, 440, 7187, 3719, 766, 411, 341, 51528], "temperature": 0.0, "avg_logprob": -0.22726085887235753, "compression_ratio": 1.5852534562211982, "no_speech_prob": 0.010483594611287117}, {"id": 84, "seek": 39148, "start": 391.88, "end": 399.0, "text": " Although object is a concrete class. It is designed primarily for extension", "tokens": [50384, 5780, 2657, 307, 257, 9859, 1508, 13, 467, 307, 4761, 10029, 337, 10320, 50740], "temperature": 0.0, "avg_logprob": -0.3013739320966933, "compression_ratio": 1.532994923857868, "no_speech_prob": 0.04144426807761192}, {"id": 85, "seek": 39148, "start": 399.6, "end": 401.6, "text": " That's correct. All classes are", "tokens": [50770, 663, 311, 3006, 13, 1057, 5359, 366, 50870], "temperature": 0.0, "avg_logprob": -0.3013739320966933, "compression_ratio": 1.532994923857868, "no_speech_prob": 0.04144426807761192}, {"id": 86, "seek": 39148, "start": 402.6, "end": 404.6, "text": " subclassed from object", "tokens": [50920, 1422, 11665, 292, 490, 2657, 51020], "temperature": 0.0, "avg_logprob": -0.3013739320966933, "compression_ratio": 1.532994923857868, "no_speech_prob": 0.04144426807761192}, {"id": 87, "seek": 39148, "start": 405.48, "end": 411.40000000000003, "text": " All of its non-final methods equals hash code to string clone and finalize", "tokens": [51064, 1057, 295, 1080, 2107, 12, 69, 2071, 7150, 6915, 22019, 3089, 281, 6798, 26506, 293, 2572, 1125, 51360], "temperature": 0.0, "avg_logprob": -0.3013739320966933, "compression_ratio": 1.532994923857868, "no_speech_prob": 0.04144426807761192}, {"id": 88, "seek": 39148, "start": 412.0, "end": 414.0, "text": " have explicitly", "tokens": [51390, 362, 20803, 51490], "temperature": 0.0, "avg_logprob": -0.3013739320966933, "compression_ratio": 1.532994923857868, "no_speech_prob": 0.04144426807761192}, {"id": 89, "seek": 39148, "start": 414.0, "end": 418.84000000000003, "text": " Sorry have explicit general contracts because they are designed to be overridden", "tokens": [51490, 4919, 362, 13691, 2674, 13952, 570, 436, 366, 4761, 281, 312, 670, 81, 6171, 51732], "temperature": 0.0, "avg_logprob": -0.3013739320966933, "compression_ratio": 1.532994923857868, "no_speech_prob": 0.04144426807761192}, {"id": 90, "seek": 41884, "start": 419.52, "end": 425.11999999999995, "text": " It is the responsibility of any class overriding these methods to obey their general contracts", "tokens": [50398, 467, 307, 264, 6357, 295, 604, 1508, 670, 81, 2819, 613, 7150, 281, 19297, 641, 2674, 13952, 50678], "temperature": 0.0, "avg_logprob": -0.24806516820734198, "compression_ratio": 1.6693227091633467, "no_speech_prob": 0.0015246751718223095}, {"id": 91, "seek": 41884, "start": 426.64, "end": 431.0, "text": " Failing to do so will prevent other classes that depend on the contracts", "tokens": [50754, 479, 23315, 281, 360, 370, 486, 4871, 661, 5359, 300, 5672, 322, 264, 13952, 50972], "temperature": 0.0, "avg_logprob": -0.24806516820734198, "compression_ratio": 1.6693227091633467, "no_speech_prob": 0.0015246751718223095}, {"id": 92, "seek": 41884, "start": 431.44, "end": 437.0, "text": " Such as hash map and hash set from functioning properly in conjunction with the class", "tokens": [50994, 9653, 382, 22019, 4471, 293, 22019, 992, 490, 18483, 6108, 294, 27482, 365, 264, 1508, 51272], "temperature": 0.0, "avg_logprob": -0.24806516820734198, "compression_ratio": 1.6693227091633467, "no_speech_prob": 0.0015246751718223095}, {"id": 93, "seek": 41884, "start": 438.08, "end": 440.91999999999996, "text": " So exactly as the introduction does suggest", "tokens": [51326, 407, 2293, 382, 264, 9339, 775, 3402, 51468], "temperature": 0.0, "avg_logprob": -0.24806516820734198, "compression_ratio": 1.6693227091633467, "no_speech_prob": 0.0015246751718223095}, {"id": 94, "seek": 41884, "start": 441.44, "end": 447.96, "text": " Essentially this whole chapter is gonna be about this object concrete class and it's a good segue to this diagram in fact", "tokens": [51494, 23596, 341, 1379, 7187, 307, 799, 312, 466, 341, 2657, 9859, 1508, 293, 309, 311, 257, 665, 33850, 281, 341, 10686, 294, 1186, 51820], "temperature": 0.0, "avg_logprob": -0.24806516820734198, "compression_ratio": 1.6693227091633467, "no_speech_prob": 0.0015246751718223095}, {"id": 95, "seek": 44796, "start": 448.84, "end": 450.47999999999996, "text": " this is", "tokens": [50408, 341, 307, 50490], "temperature": 0.0, "avg_logprob": -0.24770567417144776, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.0076903048902750015}, {"id": 96, "seek": 44796, "start": 450.47999999999996, "end": 452.47999999999996, "text": " this is a", "tokens": [50490, 341, 307, 257, 50590], "temperature": 0.0, "avg_logprob": -0.24770567417144776, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.0076903048902750015}, {"id": 97, "seek": 44796, "start": 453.23999999999995, "end": 456.71999999999997, "text": " Let's let's just call it a skeletal diagram of what", "tokens": [50628, 961, 311, 718, 311, 445, 818, 309, 257, 32321, 304, 10686, 295, 437, 50802], "temperature": 0.0, "avg_logprob": -0.24770567417144776, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.0076903048902750015}, {"id": 98, "seek": 44796, "start": 457.32, "end": 463.76, "text": " All the classes in Java look like so as you can see the object is a super. Let me zoom in a bit", "tokens": [50832, 1057, 264, 5359, 294, 10745, 574, 411, 370, 382, 291, 393, 536, 264, 2657, 307, 257, 1687, 13, 961, 385, 8863, 294, 257, 857, 51154], "temperature": 0.0, "avg_logprob": -0.24770567417144776, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.0076903048902750015}, {"id": 99, "seek": 44796, "start": 465.2, "end": 472.2, "text": " The object is the super class of all the other classes in Java and they inherit from that so these methods that", "tokens": [51226, 440, 2657, 307, 264, 1687, 1508, 295, 439, 264, 661, 5359, 294, 10745, 293, 436, 21389, 490, 300, 370, 613, 7150, 300, 51576], "temperature": 0.0, "avg_logprob": -0.24770567417144776, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.0076903048902750015}, {"id": 100, "seek": 44796, "start": 473.32, "end": 474.4, "text": " Joshua block", "tokens": [51632, 24005, 3461, 51686], "temperature": 0.0, "avg_logprob": -0.24770567417144776, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.0076903048902750015}, {"id": 101, "seek": 47440, "start": 474.44, "end": 475.96, "text": " Joshua block in", "tokens": [50366, 24005, 3461, 294, 50442], "temperature": 0.0, "avg_logprob": -0.24516102053084463, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.004263597074896097}, {"id": 102, "seek": 47440, "start": 475.96, "end": 479.64, "text": " Animated equals hash code to string clone and finalize", "tokens": [50442, 21691, 770, 6915, 22019, 3089, 281, 6798, 26506, 293, 2572, 1125, 50626], "temperature": 0.0, "avg_logprob": -0.24516102053084463, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.004263597074896097}, {"id": 103, "seek": 47440, "start": 479.64, "end": 485.88, "text": " They're all methods of the object class that we'll be using across all the other classes and even the classes that we create", "tokens": [50626, 814, 434, 439, 7150, 295, 264, 2657, 1508, 300, 321, 603, 312, 1228, 2108, 439, 264, 661, 5359, 293, 754, 264, 5359, 300, 321, 1884, 50938], "temperature": 0.0, "avg_logprob": -0.24516102053084463, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.004263597074896097}, {"id": 104, "seek": 47440, "start": 486.12, "end": 490.06, "text": " On our own it provides a really good blueprint and in this item", "tokens": [50950, 1282, 527, 1065, 309, 6417, 257, 534, 665, 35868, 293, 294, 341, 3174, 51147], "temperature": 0.0, "avg_logprob": -0.24516102053084463, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.004263597074896097}, {"id": 105, "seek": 47440, "start": 490.06, "end": 497.35999999999996, "text": " We're gonna really focus on the equals method and why we should obey the general contract when overriding this equals method by any of these", "tokens": [51147, 492, 434, 799, 534, 1879, 322, 264, 6915, 3170, 293, 983, 321, 820, 19297, 264, 2674, 4364, 562, 670, 81, 2819, 341, 6915, 3170, 538, 604, 295, 613, 51512], "temperature": 0.0, "avg_logprob": -0.24516102053084463, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.004263597074896097}, {"id": 106, "seek": 47440, "start": 497.35999999999996, "end": 501.52, "text": " other subclasses that do inherited from the superclass object", "tokens": [51512, 661, 1422, 11665, 279, 300, 360, 27091, 490, 264, 1687, 11665, 2657, 51720], "temperature": 0.0, "avg_logprob": -0.24516102053084463, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.004263597074896097}, {"id": 107, "seek": 50152, "start": 502.2, "end": 508.68, "text": " So firstly just to get some formal definitions out of the way. I always like doing that", "tokens": [50398, 407, 27376, 445, 281, 483, 512, 9860, 21988, 484, 295, 264, 636, 13, 286, 1009, 411, 884, 300, 50722], "temperature": 0.0, "avg_logprob": -0.2492814745221819, "compression_ratio": 1.643835616438356, "no_speech_prob": 0.001956845400854945}, {"id": 108, "seek": 50152, "start": 508.68, "end": 512.36, "text": " I think it's a good way to get a very high level understanding and slowly", "tokens": [50722, 286, 519, 309, 311, 257, 665, 636, 281, 483, 257, 588, 1090, 1496, 3701, 293, 5692, 50906], "temperature": 0.0, "avg_logprob": -0.2492814745221819, "compression_ratio": 1.643835616438356, "no_speech_prob": 0.001956845400854945}, {"id": 109, "seek": 50152, "start": 512.96, "end": 516.56, "text": " Narrow into a to a concept the Oracle doc state", "tokens": [50936, 13512, 1892, 666, 257, 281, 257, 3410, 264, 25654, 3211, 1785, 51116], "temperature": 0.0, "avg_logprob": -0.2492814745221819, "compression_ratio": 1.643835616438356, "no_speech_prob": 0.001956845400854945}, {"id": 110, "seek": 50152, "start": 518.12, "end": 521.12, "text": " Class object is the root of the class hierarchy", "tokens": [51194, 9471, 2657, 307, 264, 5593, 295, 264, 1508, 22333, 51344], "temperature": 0.0, "avg_logprob": -0.2492814745221819, "compression_ratio": 1.643835616438356, "no_speech_prob": 0.001956845400854945}, {"id": 111, "seek": 50152, "start": 521.88, "end": 528.6, "text": " Every class has object as a superclass all objects including areas implement the methods of this class", "tokens": [51382, 2048, 1508, 575, 2657, 382, 257, 1687, 11665, 439, 6565, 3009, 3179, 4445, 264, 7150, 295, 341, 1508, 51718], "temperature": 0.0, "avg_logprob": -0.2492814745221819, "compression_ratio": 1.643835616438356, "no_speech_prob": 0.001956845400854945}, {"id": 112, "seek": 52860, "start": 528.9200000000001, "end": 531.48, "text": " So, which is why again the the", "tokens": [50380, 407, 11, 597, 307, 983, 797, 264, 264, 50508], "temperature": 0.0, "avg_logprob": -0.27427841989617596, "compression_ratio": 1.59375, "no_speech_prob": 0.0032218745909631252}, {"id": 113, "seek": 52860, "start": 532.0400000000001, "end": 540.5600000000001, "text": " The advice by Joshua block is to please try and obey the general contract when overriding any of these methods that we inherit", "tokens": [50536, 440, 5192, 538, 24005, 3461, 307, 281, 1767, 853, 293, 19297, 264, 2674, 4364, 562, 670, 81, 2819, 604, 295, 613, 7150, 300, 321, 21389, 50962], "temperature": 0.0, "avg_logprob": -0.27427841989617596, "compression_ratio": 1.59375, "no_speech_prob": 0.0032218745909631252}, {"id": 114, "seek": 52860, "start": 541.9200000000001, "end": 548.9200000000001, "text": " And now pretending more to item 10, let's take a look at the equals method because that's what we're gonna really discuss in this item", "tokens": [51030, 400, 586, 22106, 544, 281, 3174, 1266, 11, 718, 311, 747, 257, 574, 412, 264, 6915, 3170, 570, 300, 311, 437, 321, 434, 799, 534, 2248, 294, 341, 3174, 51380], "temperature": 0.0, "avg_logprob": -0.27427841989617596, "compression_ratio": 1.59375, "no_speech_prob": 0.0032218745909631252}, {"id": 115, "seek": 52860, "start": 551.0, "end": 557.48, "text": " Again from the Oracle docs, I really like this definition actually it's it's a very straightforward one and kind of", "tokens": [51484, 3764, 490, 264, 25654, 45623, 11, 286, 534, 411, 341, 7123, 767, 309, 311, 309, 311, 257, 588, 15325, 472, 293, 733, 295, 51808], "temperature": 0.0, "avg_logprob": -0.27427841989617596, "compression_ratio": 1.59375, "no_speech_prob": 0.0032218745909631252}, {"id": 116, "seek": 55748, "start": 558.2, "end": 560.2, "text": " Puts it quite coherently", "tokens": [50400, 430, 3648, 309, 1596, 26528, 2276, 50500], "temperature": 0.0, "avg_logprob": -0.22162394430123122, "compression_ratio": 1.8247863247863247, "no_speech_prob": 0.0036495220847427845}, {"id": 117, "seek": 55748, "start": 561.16, "end": 567.72, "text": " The Oracle doc state where the equals method is that's how it's defined in the object class public Boolean equals", "tokens": [50548, 440, 25654, 3211, 1785, 689, 264, 6915, 3170, 307, 300, 311, 577, 309, 311, 7642, 294, 264, 2657, 1508, 1908, 23351, 28499, 6915, 50876], "temperature": 0.0, "avg_logprob": -0.22162394430123122, "compression_ratio": 1.8247863247863247, "no_speech_prob": 0.0036495220847427845}, {"id": 118, "seek": 55748, "start": 567.72, "end": 572.8000000000001, "text": " So it returns a Boolean and then you can pass an object into it as a parameter. It takes an object", "tokens": [50876, 407, 309, 11247, 257, 23351, 28499, 293, 550, 291, 393, 1320, 364, 2657, 666, 309, 382, 257, 13075, 13, 467, 2516, 364, 2657, 51130], "temperature": 0.0, "avg_logprob": -0.22162394430123122, "compression_ratio": 1.8247863247863247, "no_speech_prob": 0.0036495220847427845}, {"id": 119, "seek": 55748, "start": 574.0, "end": 577.9200000000001, "text": " The equals method implements. Sorry. I should say as a parameter. It takes", "tokens": [51190, 440, 6915, 3170, 704, 17988, 13, 4919, 13, 286, 820, 584, 382, 257, 13075, 13, 467, 2516, 51386], "temperature": 0.0, "avg_logprob": -0.22162394430123122, "compression_ratio": 1.8247863247863247, "no_speech_prob": 0.0036495220847427845}, {"id": 120, "seek": 55748, "start": 578.5600000000001, "end": 585.6800000000001, "text": " Something of type object. Okay back back to the definition the equals method implements an equivalence relation or", "tokens": [51418, 6595, 295, 2010, 2657, 13, 1033, 646, 646, 281, 264, 7123, 264, 6915, 3170, 704, 17988, 364, 9052, 655, 9721, 420, 51774], "temperature": 0.0, "avg_logprob": -0.22162394430123122, "compression_ratio": 1.8247863247863247, "no_speech_prob": 0.0036495220847427845}, {"id": 121, "seek": 58568, "start": 586.28, "end": 588.28, "text": " non-null object references", "tokens": [50394, 2107, 12, 77, 858, 2657, 15400, 50494], "temperature": 0.0, "avg_logprob": -0.22413713053653114, "compression_ratio": 2.075, "no_speech_prob": 0.003074282081797719}, {"id": 122, "seek": 58568, "start": 589.52, "end": 595.04, "text": " The equals method for class object implements the most discriminating possible equivalence", "tokens": [50556, 440, 6915, 3170, 337, 1508, 2657, 704, 17988, 264, 881, 20828, 990, 1944, 9052, 655, 50832], "temperature": 0.0, "avg_logprob": -0.22413713053653114, "compression_ratio": 2.075, "no_speech_prob": 0.003074282081797719}, {"id": 123, "seek": 58568, "start": 595.76, "end": 596.76, "text": " relating", "tokens": [50868, 23968, 50918], "temperature": 0.0, "avg_logprob": -0.22413713053653114, "compression_ratio": 2.075, "no_speech_prob": 0.003074282081797719}, {"id": 124, "seek": 58568, "start": 596.76, "end": 598.76, "text": " Sorry, I'll read that again", "tokens": [50918, 4919, 11, 286, 603, 1401, 300, 797, 51018], "temperature": 0.0, "avg_logprob": -0.22413713053653114, "compression_ratio": 2.075, "no_speech_prob": 0.003074282081797719}, {"id": 125, "seek": 58568, "start": 599.0799999999999, "end": 605.8, "text": " The equals method for class object implements the most discriminating possible equivalence relation on objects", "tokens": [51034, 440, 6915, 3170, 337, 1508, 2657, 704, 17988, 264, 881, 20828, 990, 1944, 9052, 655, 9721, 322, 6565, 51370], "temperature": 0.0, "avg_logprob": -0.22413713053653114, "compression_ratio": 2.075, "no_speech_prob": 0.003074282081797719}, {"id": 126, "seek": 58568, "start": 606.2399999999999, "end": 611.9599999999999, "text": " That is for any non-null references reference value values X and Y", "tokens": [51392, 663, 307, 337, 604, 2107, 12, 77, 858, 15400, 6408, 2158, 4190, 1783, 293, 398, 51678], "temperature": 0.0, "avg_logprob": -0.22413713053653114, "compression_ratio": 2.075, "no_speech_prob": 0.003074282081797719}, {"id": 127, "seek": 61196, "start": 612.32, "end": 621.5600000000001, "text": " This method returns true if and only if X and Y refer to the same object or in a bit more logic-based sense", "tokens": [50382, 639, 3170, 11247, 2074, 498, 293, 787, 498, 1783, 293, 398, 2864, 281, 264, 912, 2657, 420, 294, 257, 857, 544, 9952, 12, 6032, 2020, 50844], "temperature": 0.0, "avg_logprob": -0.264947813910407, "compression_ratio": 1.53125, "no_speech_prob": 0.012050285004079342}, {"id": 128, "seek": 61196, "start": 622.12, "end": 624.22, "text": " X double equals Y has a value true", "tokens": [50872, 1783, 3834, 6915, 398, 575, 257, 2158, 2074, 50977], "temperature": 0.0, "avg_logprob": -0.264947813910407, "compression_ratio": 1.53125, "no_speech_prob": 0.012050285004079342}, {"id": 129, "seek": 61196, "start": 626.52, "end": 632.96, "text": " So firstly it's important to understand this this double equals operator, I forget if there's a proper word for it, but", "tokens": [51092, 407, 27376, 309, 311, 1021, 281, 1223, 341, 341, 3834, 6915, 12973, 11, 286, 2870, 498, 456, 311, 257, 2296, 1349, 337, 309, 11, 457, 51414], "temperature": 0.0, "avg_logprob": -0.264947813910407, "compression_ratio": 1.53125, "no_speech_prob": 0.012050285004079342}, {"id": 130, "seek": 61196, "start": 633.88, "end": 636.64, "text": " We need to firstly explore what", "tokens": [51460, 492, 643, 281, 27376, 6839, 437, 51598], "temperature": 0.0, "avg_logprob": -0.264947813910407, "compression_ratio": 1.53125, "no_speech_prob": 0.012050285004079342}, {"id": 131, "seek": 63664, "start": 637.64, "end": 639.64, "text": " This idea of", "tokens": [50414, 639, 1558, 295, 50514], "temperature": 0.0, "avg_logprob": -0.2761358128915919, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.007458985783159733}, {"id": 132, "seek": 63664, "start": 639.88, "end": 642.38, "text": " equivalence relation means because that", "tokens": [50526, 9052, 655, 9721, 1355, 570, 300, 50651], "temperature": 0.0, "avg_logprob": -0.2761358128915919, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.007458985783159733}, {"id": 133, "seek": 63664, "start": 643.0, "end": 645.0, "text": " Pertains a lot to this item", "tokens": [50682, 430, 1408, 82, 257, 688, 281, 341, 3174, 50782], "temperature": 0.0, "avg_logprob": -0.2761358128915919, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.007458985783159733}, {"id": 134, "seek": 63664, "start": 645.76, "end": 647.76, "text": " But before we get to that, let's", "tokens": [50820, 583, 949, 321, 483, 281, 300, 11, 718, 311, 50920], "temperature": 0.0, "avg_logprob": -0.2761358128915919, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.007458985783159733}, {"id": 135, "seek": 63664, "start": 648.4, "end": 649.36, "text": " firstly", "tokens": [50952, 27376, 51000], "temperature": 0.0, "avg_logprob": -0.2761358128915919, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.007458985783159733}, {"id": 136, "seek": 63664, "start": 649.36, "end": 652.6, "text": " Try to understand what this double equals operator is", "tokens": [51000, 6526, 281, 1223, 437, 341, 3834, 6915, 12973, 307, 51162], "temperature": 0.0, "avg_logprob": -0.2761358128915919, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.007458985783159733}, {"id": 137, "seek": 63664, "start": 653.12, "end": 655.8, "text": " so I got this article from GeeksforGeek and", "tokens": [51188, 370, 286, 658, 341, 7222, 490, 2876, 24785, 2994, 22766, 916, 293, 51322], "temperature": 0.0, "avg_logprob": -0.2761358128915919, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.007458985783159733}, {"id": 138, "seek": 63664, "start": 656.24, "end": 660.12, "text": " Firstly, let me read out the definition and once we are done with the definition", "tokens": [51344, 20042, 11, 718, 385, 1401, 484, 264, 7123, 293, 1564, 321, 366, 1096, 365, 264, 7123, 51538], "temperature": 0.0, "avg_logprob": -0.2761358128915919, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.007458985783159733}, {"id": 139, "seek": 63664, "start": 660.4, "end": 664.88, "text": " Let's try to make a bit more sense as to what how that differs to the", "tokens": [51552, 961, 311, 853, 281, 652, 257, 857, 544, 2020, 382, 281, 437, 577, 300, 37761, 281, 264, 51776], "temperature": 0.0, "avg_logprob": -0.2761358128915919, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.007458985783159733}, {"id": 140, "seek": 66488, "start": 665.32, "end": 667.72, "text": " Equals method that's in the object class", "tokens": [50386, 15624, 1124, 3170, 300, 311, 294, 264, 2657, 1508, 50506], "temperature": 0.0, "avg_logprob": -0.25324215106110076, "compression_ratio": 1.6576086956521738, "no_speech_prob": 0.002359044970944524}, {"id": 141, "seek": 66488, "start": 669.64, "end": 672.4399999999999, "text": " So the definition goes in GeeksforGeek geeks", "tokens": [50602, 407, 264, 7123, 1709, 294, 2876, 24785, 2994, 22766, 916, 1519, 24785, 50742], "temperature": 0.0, "avg_logprob": -0.25324215106110076, "compression_ratio": 1.6576086956521738, "no_speech_prob": 0.002359044970944524}, {"id": 142, "seek": 66488, "start": 674.0, "end": 683.24, "text": " We can use the double equals operators for reference comparison address comparison and dot equals method for content comparison", "tokens": [50820, 492, 393, 764, 264, 3834, 6915, 19077, 337, 6408, 9660, 2985, 9660, 293, 5893, 6915, 3170, 337, 2701, 9660, 51282], "temperature": 0.0, "avg_logprob": -0.25324215106110076, "compression_ratio": 1.6576086956521738, "no_speech_prob": 0.002359044970944524}, {"id": 143, "seek": 66488, "start": 683.64, "end": 690.08, "text": " In simple words, the double equals checks if both objects point to the same memory location", "tokens": [51302, 682, 2199, 2283, 11, 264, 3834, 6915, 13834, 498, 1293, 6565, 935, 281, 264, 912, 4675, 4914, 51624], "temperature": 0.0, "avg_logprob": -0.25324215106110076, "compression_ratio": 1.6576086956521738, "no_speech_prob": 0.002359044970944524}, {"id": 144, "seek": 69008, "start": 690.48, "end": 695.9200000000001, "text": " Whereas the equals evaluates to the comparison of values in the objects", "tokens": [50384, 13813, 264, 6915, 6133, 1024, 281, 264, 9660, 295, 4190, 294, 264, 6565, 50656], "temperature": 0.0, "avg_logprob": -0.22006628486547578, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.002433997578918934}, {"id": 145, "seek": 69008, "start": 696.36, "end": 700.1600000000001, "text": " So it's a really simple concept. I mean, I could just show it right here", "tokens": [50678, 407, 309, 311, 257, 534, 2199, 3410, 13, 286, 914, 11, 286, 727, 445, 855, 309, 558, 510, 50868], "temperature": 0.0, "avg_logprob": -0.22006628486547578, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.002433997578918934}, {"id": 146, "seek": 69008, "start": 701.4000000000001, "end": 708.48, "text": " Actually instead of showing it on my notion page. Let me just open up this article and show it here. So this is quite straightforward", "tokens": [50930, 5135, 2602, 295, 4099, 309, 322, 452, 10710, 3028, 13, 961, 385, 445, 1269, 493, 341, 7222, 293, 855, 309, 510, 13, 407, 341, 307, 1596, 15325, 51284], "temperature": 0.0, "avg_logprob": -0.22006628486547578, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.002433997578918934}, {"id": 147, "seek": 69008, "start": 710.4000000000001, "end": 712.4000000000001, "text": " We have two variables", "tokens": [51380, 492, 362, 732, 9102, 51480], "temperature": 0.0, "avg_logprob": -0.22006628486547578, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.002433997578918934}, {"id": 148, "seek": 69008, "start": 712.4000000000001, "end": 717.5600000000001, "text": " S1 and S2 of type string and then S1 and S2", "tokens": [51480, 318, 16, 293, 318, 17, 295, 2010, 6798, 293, 550, 318, 16, 293, 318, 17, 51738], "temperature": 0.0, "avg_logprob": -0.22006628486547578, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.002433997578918934}, {"id": 149, "seek": 71756, "start": 718.56, "end": 720.56, "text": " Will will give", "tokens": [50414, 3099, 486, 976, 50514], "temperature": 0.0, "avg_logprob": -0.26783074723913314, "compression_ratio": 1.691588785046729, "no_speech_prob": 0.010012298822402954}, {"id": 150, "seek": 71756, "start": 721.4, "end": 727.64, "text": " What will pass through because this string value? Hello, it's memory address. It's the same", "tokens": [50556, 708, 486, 1320, 807, 570, 341, 6798, 2158, 30, 2425, 11, 309, 311, 4675, 2985, 13, 467, 311, 264, 912, 50868], "temperature": 0.0, "avg_logprob": -0.26783074723913314, "compression_ratio": 1.691588785046729, "no_speech_prob": 0.010012298822402954}, {"id": 151, "seek": 71756, "start": 728.4799999999999, "end": 730.9599999999999, "text": " It's it's it's immutable", "tokens": [50910, 467, 311, 309, 311, 309, 311, 3397, 32148, 51034], "temperature": 0.0, "avg_logprob": -0.26783074723913314, "compression_ratio": 1.691588785046729, "no_speech_prob": 0.010012298822402954}, {"id": 152, "seek": 71756, "start": 731.64, "end": 737.0, "text": " And it'll it'll be the memory with the same address. So this will really do a memory address comparison", "tokens": [51068, 400, 309, 603, 309, 603, 312, 264, 4675, 365, 264, 912, 2985, 13, 407, 341, 486, 534, 360, 257, 4675, 2985, 9660, 51336], "temperature": 0.0, "avg_logprob": -0.26783074723913314, "compression_ratio": 1.691588785046729, "no_speech_prob": 0.010012298822402954}, {"id": 153, "seek": 71756, "start": 737.5999999999999, "end": 745.28, "text": " But here with S1 and S3 because we had firstly this is an anti pattern one should never do this because it's a waste of memory", "tokens": [51366, 583, 510, 365, 318, 16, 293, 318, 18, 570, 321, 632, 27376, 341, 307, 364, 6061, 5102, 472, 820, 1128, 360, 341, 570, 309, 311, 257, 5964, 295, 4675, 51750], "temperature": 0.0, "avg_logprob": -0.26783074723913314, "compression_ratio": 1.691588785046729, "no_speech_prob": 0.010012298822402954}, {"id": 154, "seek": 74528, "start": 746.28, "end": 753.48, "text": " This new object of string we are creating called. Hello. This hello for the variable S3", "tokens": [50414, 639, 777, 2657, 295, 6798, 321, 366, 4084, 1219, 13, 2425, 13, 639, 7751, 337, 264, 7006, 318, 18, 50774], "temperature": 0.0, "avg_logprob": -0.33457818323252153, "compression_ratio": 1.7844827586206897, "no_speech_prob": 0.004006675910204649}, {"id": 155, "seek": 74528, "start": 753.8399999999999, "end": 757.04, "text": " That gets a separate memory address", "tokens": [50792, 663, 2170, 257, 4994, 4675, 2985, 50952], "temperature": 0.0, "avg_logprob": -0.33457818323252153, "compression_ratio": 1.7844827586206897, "no_speech_prob": 0.004006675910204649}, {"id": 156, "seek": 74528, "start": 757.4, "end": 760.92, "text": " So then I'm gonna be the same comparison despite the content being the same", "tokens": [50970, 407, 550, 286, 478, 799, 312, 264, 912, 9660, 7228, 264, 2701, 885, 264, 912, 51146], "temperature": 0.0, "avg_logprob": -0.33457818323252153, "compression_ratio": 1.7844827586206897, "no_speech_prob": 0.004006675910204649}, {"id": 157, "seek": 74528, "start": 761.12, "end": 764.56, "text": " It's gonna return false because the memory address is different", "tokens": [51156, 467, 311, 799, 2736, 7908, 570, 264, 4675, 2985, 307, 819, 51328], "temperature": 0.0, "avg_logprob": -0.33457818323252153, "compression_ratio": 1.7844827586206897, "no_speech_prob": 0.004006675910204649}, {"id": 158, "seek": 74528, "start": 764.88, "end": 768.64, "text": " But that's not the case with using the dot equals method. That's in", "tokens": [51344, 583, 300, 311, 406, 264, 1389, 365, 1228, 264, 5893, 6915, 3170, 13, 663, 311, 294, 51532], "temperature": 0.0, "avg_logprob": -0.33457818323252153, "compression_ratio": 1.7844827586206897, "no_speech_prob": 0.004006675910204649}, {"id": 159, "seek": 74528, "start": 769.0799999999999, "end": 772.48, "text": " Dot equals method. That sounds weird the equals method. That's in the object class", "tokens": [51554, 38753, 6915, 3170, 13, 663, 3263, 3657, 264, 6915, 3170, 13, 663, 311, 294, 264, 2657, 1508, 51724], "temperature": 0.0, "avg_logprob": -0.33457818323252153, "compression_ratio": 1.7844827586206897, "no_speech_prob": 0.004006675910204649}, {"id": 160, "seek": 77248, "start": 772.76, "end": 777.36, "text": " So string obviously is an object. It inherits this method from the from the object class and", "tokens": [50378, 407, 6798, 2745, 307, 364, 2657, 13, 467, 9484, 1208, 341, 3170, 490, 264, 490, 264, 2657, 1508, 293, 50608], "temperature": 0.0, "avg_logprob": -0.2205525171189081, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.0037649953737854958}, {"id": 161, "seek": 77248, "start": 778.2, "end": 783.58, "text": " Here in both these lines. It's a pure content comparison. So despite", "tokens": [50650, 1692, 294, 1293, 613, 3876, 13, 467, 311, 257, 6075, 2701, 9660, 13, 407, 7228, 50919], "temperature": 0.0, "avg_logprob": -0.2205525171189081, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.0037649953737854958}, {"id": 162, "seek": 77248, "start": 784.6, "end": 786.36, "text": " S3 and", "tokens": [50970, 318, 18, 293, 51058], "temperature": 0.0, "avg_logprob": -0.2205525171189081, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.0037649953737854958}, {"id": 163, "seek": 77248, "start": 786.36, "end": 791.44, "text": " Either S1 or S2 having a different memory location. The content is for the same", "tokens": [51058, 13746, 318, 16, 420, 318, 17, 1419, 257, 819, 4675, 4914, 13, 440, 2701, 307, 337, 264, 912, 51312], "temperature": 0.0, "avg_logprob": -0.2205525171189081, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.0037649953737854958}, {"id": 164, "seek": 77248, "start": 791.44, "end": 794.04, "text": " So that's the comparison that the equals method does so", "tokens": [51312, 407, 300, 311, 264, 9660, 300, 264, 6915, 3170, 775, 370, 51442], "temperature": 0.0, "avg_logprob": -0.2205525171189081, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.0037649953737854958}, {"id": 165, "seek": 77248, "start": 794.5600000000001, "end": 801.4, "text": " You gotta remember that that's a general contract that we need to respect and we need to follow when if we are to override", "tokens": [51468, 509, 3428, 1604, 300, 300, 311, 257, 2674, 4364, 300, 321, 643, 281, 3104, 293, 321, 643, 281, 1524, 562, 498, 321, 366, 281, 42321, 51810], "temperature": 0.0, "avg_logprob": -0.2205525171189081, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.0037649953737854958}, {"id": 166, "seek": 80140, "start": 801.4399999999999, "end": 807.6999999999999, "text": " This equals method that it's the content that we compare. So going back to the definition from the oracle docs this term here", "tokens": [50366, 639, 6915, 3170, 300, 309, 311, 264, 2701, 300, 321, 6794, 13, 407, 516, 646, 281, 264, 7123, 490, 264, 420, 7041, 45623, 341, 1433, 510, 50679], "temperature": 0.0, "avg_logprob": -0.21065433657899194, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.0023959034588187933}, {"id": 167, "seek": 80140, "start": 808.72, "end": 812.72, "text": " Equivalence relation. It's actually a mathematical logic concept", "tokens": [50730, 15624, 3576, 655, 9721, 13, 467, 311, 767, 257, 18894, 9952, 3410, 50930], "temperature": 0.0, "avg_logprob": -0.21065433657899194, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.0023959034588187933}, {"id": 168, "seek": 80140, "start": 813.16, "end": 820.64, "text": " So we I don't think we're gonna get get to that really firstly even I myself because I'm not a logician", "tokens": [50952, 407, 321, 286, 500, 380, 519, 321, 434, 799, 483, 483, 281, 300, 534, 27376, 754, 286, 2059, 570, 286, 478, 406, 257, 3565, 9027, 51326], "temperature": 0.0, "avg_logprob": -0.21065433657899194, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.0023959034588187933}, {"id": 169, "seek": 80140, "start": 820.64, "end": 822.64, "text": " I haven't got a good understanding of of", "tokens": [51326, 286, 2378, 380, 658, 257, 665, 3701, 295, 295, 51426], "temperature": 0.0, "avg_logprob": -0.21065433657899194, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.0023959034588187933}, {"id": 170, "seek": 80140, "start": 823.64, "end": 829.0799999999999, "text": " everything that entails or everything behind the theory behind equivalence relation, but", "tokens": [51476, 1203, 300, 50133, 420, 1203, 2261, 264, 5261, 2261, 9052, 655, 9721, 11, 457, 51748], "temperature": 0.0, "avg_logprob": -0.21065433657899194, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.0023959034588187933}, {"id": 171, "seek": 82908, "start": 830.0400000000001, "end": 831.64, "text": " Apropos Java", "tokens": [50412, 8723, 1513, 329, 10745, 50492], "temperature": 0.0, "avg_logprob": -0.2807220831149962, "compression_ratio": 1.645631067961165, "no_speech_prob": 0.002018648898229003}, {"id": 172, "seek": 82908, "start": 831.64, "end": 838.4000000000001, "text": " What equivalence relation really means is comparing the content of the of two objects", "tokens": [50492, 708, 9052, 655, 9721, 534, 1355, 307, 15763, 264, 2701, 295, 264, 295, 732, 6565, 50830], "temperature": 0.0, "avg_logprob": -0.2807220831149962, "compression_ratio": 1.645631067961165, "no_speech_prob": 0.002018648898229003}, {"id": 173, "seek": 82908, "start": 838.44, "end": 844.9200000000001, "text": " Which is what we did in this example here. We're comparing the content and not really the reference in in memory", "tokens": [50832, 3013, 307, 437, 321, 630, 294, 341, 1365, 510, 13, 492, 434, 15763, 264, 2701, 293, 406, 534, 264, 6408, 294, 294, 4675, 51156], "temperature": 0.0, "avg_logprob": -0.2807220831149962, "compression_ratio": 1.645631067961165, "no_speech_prob": 0.002018648898229003}, {"id": 174, "seek": 82908, "start": 845.4000000000001, "end": 852.72, "text": " And saying all that let's get to so I should have mentioned this earlier in part one in this video", "tokens": [51180, 400, 1566, 439, 300, 718, 311, 483, 281, 370, 286, 820, 362, 2835, 341, 3071, 294, 644, 472, 294, 341, 960, 51546], "temperature": 0.0, "avg_logprob": -0.2807220831149962, "compression_ratio": 1.645631067961165, "no_speech_prob": 0.002018648898229003}, {"id": 175, "seek": 82908, "start": 852.96, "end": 855.24, "text": " Which is part one of item 10", "tokens": [51558, 3013, 307, 644, 472, 295, 3174, 1266, 51672], "temperature": 0.0, "avg_logprob": -0.2807220831149962, "compression_ratio": 1.645631067961165, "no_speech_prob": 0.002018648898229003}, {"id": 176, "seek": 85524, "start": 856.04, "end": 862.64, "text": " We're really gonna focus on this when not to override the equals method and then in the next part", "tokens": [50404, 492, 434, 534, 799, 1879, 322, 341, 562, 406, 281, 42321, 264, 6915, 3170, 293, 550, 294, 264, 958, 644, 50734], "temperature": 0.0, "avg_logprob": -0.16577664770261205, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.004827975761145353}, {"id": 177, "seek": 85524, "start": 862.64, "end": 867.24, "text": " We'll get to the crux of the matter as to when exactly to override it and then", "tokens": [50734, 492, 603, 483, 281, 264, 5140, 87, 295, 264, 1871, 382, 281, 562, 2293, 281, 42321, 309, 293, 550, 50964], "temperature": 0.0, "avg_logprob": -0.16577664770261205, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.004827975761145353}, {"id": 178, "seek": 85524, "start": 867.92, "end": 872.8, "text": " how to to follow the general contract or obey the general contract so", "tokens": [50998, 577, 281, 281, 1524, 264, 2674, 4364, 420, 19297, 264, 2674, 4364, 370, 51242], "temperature": 0.0, "avg_logprob": -0.16577664770261205, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.004827975761145353}, {"id": 179, "seek": 85524, "start": 873.72, "end": 874.84, "text": " firstly", "tokens": [51288, 27376, 51344], "temperature": 0.0, "avg_logprob": -0.16577664770261205, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.004827975761145353}, {"id": 180, "seek": 85524, "start": 874.84, "end": 876.92, "text": " When not to override the equals method", "tokens": [51344, 1133, 406, 281, 42321, 264, 6915, 3170, 51448], "temperature": 0.0, "avg_logprob": -0.16577664770261205, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.004827975761145353}, {"id": 181, "seek": 85524, "start": 876.92, "end": 884.32, "text": " So if we do inherit this method from the superclass object, when is it okay to not override it despite most times?", "tokens": [51448, 407, 498, 321, 360, 21389, 341, 3170, 490, 264, 1687, 11665, 2657, 11, 562, 307, 309, 1392, 281, 406, 42321, 309, 7228, 881, 1413, 30, 51818], "temperature": 0.0, "avg_logprob": -0.16577664770261205, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.004827975761145353}, {"id": 182, "seek": 88432, "start": 884.32, "end": 886.32, "text": " We may have to override it", "tokens": [50364, 492, 815, 362, 281, 42321, 309, 50464], "temperature": 0.0, "avg_logprob": -0.19596317836216517, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.002510828897356987}, {"id": 183, "seek": 88432, "start": 886.6, "end": 889.5600000000001, "text": " In the item 10 Joshua blocks starts off like this", "tokens": [50478, 682, 264, 3174, 1266, 24005, 8474, 3719, 766, 411, 341, 50626], "temperature": 0.0, "avg_logprob": -0.19596317836216517, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.002510828897356987}, {"id": 184, "seek": 88432, "start": 891.0400000000001, "end": 896.08, "text": " The easiest way to avoid problems is not to override the equals method", "tokens": [50700, 440, 12889, 636, 281, 5042, 2740, 307, 406, 281, 42321, 264, 6915, 3170, 50952], "temperature": 0.0, "avg_logprob": -0.19596317836216517, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.002510828897356987}, {"id": 185, "seek": 88432, "start": 896.44, "end": 901.88, "text": " In which case each instance of the class is equal only to itself and then he states", "tokens": [50970, 682, 597, 1389, 1184, 5197, 295, 264, 1508, 307, 2681, 787, 281, 2564, 293, 550, 415, 4368, 51242], "temperature": 0.0, "avg_logprob": -0.19596317836216517, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.002510828897356987}, {"id": 186, "seek": 88432, "start": 902.0400000000001, "end": 907.1600000000001, "text": " This is the right thing to do if any of the following conditions apply and he's listed down a few of the conditions", "tokens": [51250, 639, 307, 264, 558, 551, 281, 360, 498, 604, 295, 264, 3480, 4487, 3079, 293, 415, 311, 10052, 760, 257, 1326, 295, 264, 4487, 51506], "temperature": 0.0, "avg_logprob": -0.19596317836216517, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.002510828897356987}, {"id": 187, "seek": 88432, "start": 907.1600000000001, "end": 911.6, "text": " So in this item will go through sorry in this part of this item", "tokens": [51506, 407, 294, 341, 3174, 486, 352, 807, 2597, 294, 341, 644, 295, 341, 3174, 51728], "temperature": 0.0, "avg_logprob": -0.19596317836216517, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.002510828897356987}, {"id": 188, "seek": 91160, "start": 911.84, "end": 916.12, "text": " Getting a bit confusing in this part will go through those reasons", "tokens": [50376, 13674, 257, 857, 13181, 294, 341, 644, 486, 352, 807, 729, 4112, 50590], "temperature": 0.0, "avg_logprob": -0.20833288905132247, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.003649259451776743}, {"id": 189, "seek": 91160, "start": 917.24, "end": 924.8000000000001, "text": " The first one is if an instance of the class is inherently unique now. What does that mean firstly? Let me read out the definition", "tokens": [50646, 440, 700, 472, 307, 498, 364, 5197, 295, 264, 1508, 307, 27993, 3845, 586, 13, 708, 775, 300, 914, 27376, 30, 961, 385, 1401, 484, 264, 7123, 51024], "temperature": 0.0, "avg_logprob": -0.20833288905132247, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.003649259451776743}, {"id": 190, "seek": 91160, "start": 926.16, "end": 928.16, "text": " He states", "tokens": [51092, 634, 4368, 51192], "temperature": 0.0, "avg_logprob": -0.20833288905132247, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.003649259451776743}, {"id": 191, "seek": 91160, "start": 928.36, "end": 932.8000000000001, "text": " Don't override the equals method if each instance of the class is inherently unique", "tokens": [51202, 1468, 380, 42321, 264, 6915, 3170, 498, 1184, 5197, 295, 264, 1508, 307, 27993, 3845, 51424], "temperature": 0.0, "avg_logprob": -0.20833288905132247, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.003649259451776743}, {"id": 192, "seek": 91160, "start": 933.16, "end": 939.88, "text": " This is true for classes such as thread that represent active entities rather than values", "tokens": [51442, 639, 307, 2074, 337, 5359, 1270, 382, 7207, 300, 2906, 4967, 16667, 2831, 813, 4190, 51778], "temperature": 0.0, "avg_logprob": -0.20833288905132247, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.003649259451776743}, {"id": 193, "seek": 93988, "start": 940.24, "end": 946.4, "text": " The equals implementation provided by object has exactly the right behavior for these classes", "tokens": [50382, 440, 6915, 11420, 5649, 538, 2657, 575, 2293, 264, 558, 5223, 337, 613, 5359, 50690], "temperature": 0.0, "avg_logprob": -0.24619714073512866, "compression_ratio": 1.6828193832599119, "no_speech_prob": 0.003649508347734809}, {"id": 194, "seek": 93988, "start": 947.08, "end": 949.76, "text": " So of course the question with asking is what is threat?", "tokens": [50724, 407, 295, 1164, 264, 1168, 365, 3365, 307, 437, 307, 4734, 30, 50858], "temperature": 0.0, "avg_logprob": -0.24619714073512866, "compression_ratio": 1.6828193832599119, "no_speech_prob": 0.003649508347734809}, {"id": 195, "seek": 93988, "start": 949.76, "end": 951.92, "text": " What is the threat class the threat class?", "tokens": [50858, 708, 307, 264, 4734, 1508, 264, 4734, 1508, 30, 50966], "temperature": 0.0, "avg_logprob": -0.24619714073512866, "compression_ratio": 1.6828193832599119, "no_speech_prob": 0.003649508347734809}, {"id": 196, "seek": 93988, "start": 951.92, "end": 954.42, "text": " You can go through the docs on Oracle", "tokens": [50966, 509, 393, 352, 807, 264, 45623, 322, 25654, 51091], "temperature": 0.0, "avg_logprob": -0.24619714073512866, "compression_ratio": 1.6828193832599119, "no_speech_prob": 0.003649508347734809}, {"id": 197, "seek": 93988, "start": 954.48, "end": 961.52, "text": " But it's it's used to spin up a new thread a new thread of work simply put according to the Oracle docs a thread is a", "tokens": [51094, 583, 309, 311, 309, 311, 1143, 281, 6060, 493, 257, 777, 7207, 257, 777, 7207, 295, 589, 2935, 829, 4650, 281, 264, 25654, 45623, 257, 7207, 307, 257, 51446], "temperature": 0.0, "avg_logprob": -0.24619714073512866, "compression_ratio": 1.6828193832599119, "no_speech_prob": 0.003649508347734809}, {"id": 198, "seek": 93988, "start": 961.52, "end": 963.52, "text": " Thread of execution in a program", "tokens": [51446, 334, 2538, 295, 15058, 294, 257, 1461, 51546], "temperature": 0.0, "avg_logprob": -0.24619714073512866, "compression_ratio": 1.6828193832599119, "no_speech_prob": 0.003649508347734809}, {"id": 199, "seek": 96352, "start": 963.52, "end": 969.76, "text": " The JVM allows an application to have multiple threads of execution running concurrently", "tokens": [50364, 440, 508, 53, 44, 4045, 364, 3861, 281, 362, 3866, 19314, 295, 15058, 2614, 37702, 356, 50676], "temperature": 0.0, "avg_logprob": -0.26049133749569164, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.007809528615325689}, {"id": 200, "seek": 96352, "start": 969.76, "end": 972.96, "text": " So obviously the threat class is used for a concurrency", "tokens": [50676, 407, 2745, 264, 4734, 1508, 307, 1143, 337, 257, 23702, 10457, 50836], "temperature": 0.0, "avg_logprob": -0.26049133749569164, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.007809528615325689}, {"id": 201, "seek": 96352, "start": 973.6, "end": 979.1999999999999, "text": " And much threading. So why would a instance of a thread be inherently unique?", "tokens": [50868, 400, 709, 7207, 278, 13, 407, 983, 576, 257, 5197, 295, 257, 7207, 312, 27993, 3845, 30, 51148], "temperature": 0.0, "avg_logprob": -0.26049133749569164, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.007809528615325689}, {"id": 202, "seek": 96352, "start": 979.1999999999999, "end": 982.84, "text": " it it seems rather obvious isn't it because", "tokens": [51148, 309, 309, 2544, 2831, 6322, 1943, 380, 309, 570, 51330], "temperature": 0.0, "avg_logprob": -0.26049133749569164, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.007809528615325689}, {"id": 203, "seek": 96352, "start": 983.4399999999999, "end": 989.68, "text": " Whenever a new thread is spun up, even if these two threads are spun up from the same state", "tokens": [51360, 14159, 257, 777, 7207, 307, 37038, 493, 11, 754, 498, 613, 732, 19314, 366, 37038, 493, 490, 264, 912, 1785, 51672], "temperature": 0.0, "avg_logprob": -0.26049133749569164, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.007809528615325689}, {"id": 204, "seek": 98968, "start": 990.3199999999999, "end": 998.3599999999999, "text": " We we were pretty sure that they're not gonna act the same way once they're spun up and they start executing in their computation", "tokens": [50396, 492, 321, 645, 1238, 988, 300, 436, 434, 406, 799, 605, 264, 912, 636, 1564, 436, 434, 37038, 493, 293, 436, 722, 32368, 294, 641, 24903, 50798], "temperature": 0.0, "avg_logprob": -0.270766405992105, "compression_ratio": 1.7365591397849462, "no_speech_prob": 0.003882545745000243}, {"id": 205, "seek": 98968, "start": 999.4, "end": 1004.76, "text": " They the the threads in that sense represent a dynamic computation a dynamic object where", "tokens": [50850, 814, 264, 264, 19314, 294, 300, 2020, 2906, 257, 8546, 24903, 257, 8546, 2657, 689, 51118], "temperature": 0.0, "avg_logprob": -0.270766405992105, "compression_ratio": 1.7365591397849462, "no_speech_prob": 0.003882545745000243}, {"id": 206, "seek": 98968, "start": 1005.56, "end": 1011.5999999999999, "text": " It it throughout its lifetime. It's gonna change. It's gonna it's not gonna be consistent and therefore", "tokens": [51158, 467, 309, 3710, 1080, 11364, 13, 467, 311, 799, 1319, 13, 467, 311, 799, 309, 311, 406, 799, 312, 8398, 293, 4412, 51460], "temperature": 0.0, "avg_logprob": -0.270766405992105, "compression_ratio": 1.7365591397849462, "no_speech_prob": 0.003882545745000243}, {"id": 207, "seek": 101160, "start": 1012.0, "end": 1016.88, "text": " Two threads that may again start on with the same state", "tokens": [50384, 4453, 19314, 300, 815, 797, 722, 322, 365, 264, 912, 1785, 50628], "temperature": 0.0, "avg_logprob": -0.2979433125463025, "compression_ratio": 1.8217391304347825, "no_speech_prob": 0.001622266718186438}, {"id": 208, "seek": 101160, "start": 1017.28, "end": 1023.08, "text": " Will still act completely differently because they're doing completely different work. Therefore, it makes no sense to", "tokens": [50648, 3099, 920, 605, 2584, 7614, 570, 436, 434, 884, 2584, 819, 589, 13, 7504, 11, 309, 1669, 572, 2020, 281, 50938], "temperature": 0.0, "avg_logprob": -0.2979433125463025, "compression_ratio": 1.8217391304347825, "no_speech_prob": 0.001622266718186438}, {"id": 209, "seek": 101160, "start": 1024.32, "end": 1026.32, "text": " To override the equals method", "tokens": [51000, 1407, 42321, 264, 6915, 3170, 51100], "temperature": 0.0, "avg_logprob": -0.2979433125463025, "compression_ratio": 1.8217391304347825, "no_speech_prob": 0.001622266718186438}, {"id": 210, "seek": 101160, "start": 1026.52, "end": 1034.08, "text": " That that only compares the content of of two objects for the threat class because we know that they're gonna be inherently unique", "tokens": [51110, 663, 300, 787, 38334, 264, 2701, 295, 295, 732, 6565, 337, 264, 4734, 1508, 570, 321, 458, 300, 436, 434, 799, 312, 27993, 3845, 51488], "temperature": 0.0, "avg_logprob": -0.2979433125463025, "compression_ratio": 1.8217391304347825, "no_speech_prob": 0.001622266718186438}, {"id": 211, "seek": 101160, "start": 1034.3600000000001, "end": 1039.28, "text": " Therefore if you do compare two threat objects, their content is gonna be different", "tokens": [51502, 7504, 498, 291, 360, 6794, 732, 4734, 6565, 11, 641, 2701, 307, 799, 312, 819, 51748], "temperature": 0.0, "avg_logprob": -0.2979433125463025, "compression_ratio": 1.8217391304347825, "no_speech_prob": 0.001622266718186438}, {"id": 212, "seek": 103928, "start": 1039.8799999999999, "end": 1044.32, "text": " Therefore, it's no use to override it and try and change it because", "tokens": [50394, 7504, 11, 309, 311, 572, 764, 281, 42321, 309, 293, 853, 293, 1319, 309, 570, 50616], "temperature": 0.0, "avg_logprob": -0.20816898345947266, "compression_ratio": 1.973568281938326, "no_speech_prob": 0.004828466102480888}, {"id": 213, "seek": 103928, "start": 1044.96, "end": 1050.44, "text": " What the object class has defined in the equals method that does the job", "tokens": [50648, 708, 264, 2657, 1508, 575, 7642, 294, 264, 6915, 3170, 300, 775, 264, 1691, 50922], "temperature": 0.0, "avg_logprob": -0.20816898345947266, "compression_ratio": 1.973568281938326, "no_speech_prob": 0.004828466102480888}, {"id": 214, "seek": 103928, "start": 1050.44, "end": 1054.56, "text": " And if we just suppose the threat class with something like the string class", "tokens": [50922, 400, 498, 321, 445, 7297, 264, 4734, 1508, 365, 746, 411, 264, 6798, 1508, 51128], "temperature": 0.0, "avg_logprob": -0.20816898345947266, "compression_ratio": 1.973568281938326, "no_speech_prob": 0.004828466102480888}, {"id": 215, "seek": 103928, "start": 1054.84, "end": 1060.6399999999999, "text": " Where we know the content of the string class is gonna be the same as in not the content of the string class", "tokens": [51142, 2305, 321, 458, 264, 2701, 295, 264, 6798, 1508, 307, 799, 312, 264, 912, 382, 294, 406, 264, 2701, 295, 264, 6798, 1508, 51432], "temperature": 0.0, "avg_logprob": -0.20816898345947266, "compression_ratio": 1.973568281938326, "no_speech_prob": 0.004828466102480888}, {"id": 216, "seek": 103928, "start": 1060.6399999999999, "end": 1066.48, "text": " But if you have two objects like this, we can make this object immutable because we know the content is gonna be the same", "tokens": [51432, 583, 498, 291, 362, 732, 6565, 411, 341, 11, 321, 393, 652, 341, 2657, 3397, 32148, 570, 321, 458, 264, 2701, 307, 799, 312, 264, 912, 51724], "temperature": 0.0, "avg_logprob": -0.20816898345947266, "compression_ratio": 1.973568281938326, "no_speech_prob": 0.004828466102480888}, {"id": 217, "seek": 106648, "start": 1066.48, "end": 1068.96, "text": " Therefore, it's no use doing something like this where we", "tokens": [50364, 7504, 11, 309, 311, 572, 764, 884, 746, 411, 341, 689, 321, 50488], "temperature": 0.0, "avg_logprob": -0.2643365414343148, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.00312280235812068}, {"id": 218, "seek": 106648, "start": 1069.84, "end": 1075.8, "text": " Recreate a new instance of that class and have a new object. That's again, as I said an anti-pattern", "tokens": [50532, 9647, 265, 473, 257, 777, 5197, 295, 300, 1508, 293, 362, 257, 777, 2657, 13, 663, 311, 797, 11, 382, 286, 848, 364, 6061, 12, 79, 1161, 77, 50830], "temperature": 0.0, "avg_logprob": -0.2643365414343148, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.00312280235812068}, {"id": 219, "seek": 106648, "start": 1076.04, "end": 1080.52, "text": " So this is a static object in that sense for for all intents and purposes", "tokens": [50842, 407, 341, 307, 257, 13437, 2657, 294, 300, 2020, 337, 337, 439, 560, 791, 293, 9932, 51066], "temperature": 0.0, "avg_logprob": -0.2643365414343148, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.00312280235812068}, {"id": 220, "seek": 106648, "start": 1081.0, "end": 1083.32, "text": " Whereas that that won't be the case for the threat class", "tokens": [51090, 13813, 300, 300, 1582, 380, 312, 264, 1389, 337, 264, 4734, 1508, 51206], "temperature": 0.0, "avg_logprob": -0.2643365414343148, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.00312280235812068}, {"id": 221, "seek": 106648, "start": 1084.08, "end": 1086.08, "text": " the next reason is", "tokens": [51244, 264, 958, 1778, 307, 51344], "temperature": 0.0, "avg_logprob": -0.2643365414343148, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.00312280235812068}, {"id": 222, "seek": 106648, "start": 1086.28, "end": 1089.4, "text": " to not override the equals method is if a", "tokens": [51354, 281, 406, 42321, 264, 6915, 3170, 307, 498, 257, 51510], "temperature": 0.0, "avg_logprob": -0.2643365414343148, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.00312280235812068}, {"id": 223, "seek": 106648, "start": 1090.44, "end": 1093.48, "text": " Logically quality tests in a class is not required", "tokens": [51562, 10824, 984, 3125, 6921, 294, 257, 1508, 307, 406, 4739, 51714], "temperature": 0.0, "avg_logprob": -0.2643365414343148, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.00312280235812068}, {"id": 224, "seek": 109348, "start": 1094.24, "end": 1096.1200000000001, "text": " So a warranted question is", "tokens": [50402, 407, 257, 16354, 292, 1168, 307, 50496], "temperature": 0.0, "avg_logprob": -0.23111015616111386, "compression_ratio": 1.8038461538461539, "no_speech_prob": 0.006690538488328457}, {"id": 225, "seek": 109348, "start": 1096.1200000000001, "end": 1099.32, "text": " What is a logically quality tests firstly?", "tokens": [50496, 708, 307, 257, 38887, 3125, 6921, 27376, 30, 50656], "temperature": 0.0, "avg_logprob": -0.23111015616111386, "compression_ratio": 1.8038461538461539, "no_speech_prob": 0.006690538488328457}, {"id": 226, "seek": 109348, "start": 1099.32, "end": 1104.96, "text": " Let's understand what logical equivalence is and this kind of what I meant by there's a bit of basic computer science that I find always", "tokens": [50656, 961, 311, 1223, 437, 14978, 9052, 655, 307, 293, 341, 733, 295, 437, 286, 4140, 538, 456, 311, 257, 857, 295, 3875, 3820, 3497, 300, 286, 915, 1009, 50938], "temperature": 0.0, "avg_logprob": -0.23111015616111386, "compression_ratio": 1.8038461538461539, "no_speech_prob": 0.006690538488328457}, {"id": 227, "seek": 109348, "start": 1104.96, "end": 1113.0, "text": " Interesting so Khan Academy defines logical equivalence as the idea that more than one expression can have the same meaning", "tokens": [50938, 14711, 370, 18136, 11735, 23122, 14978, 9052, 655, 382, 264, 1558, 300, 544, 813, 472, 6114, 393, 362, 264, 912, 3620, 51340], "temperature": 0.0, "avg_logprob": -0.23111015616111386, "compression_ratio": 1.8038461538461539, "no_speech_prob": 0.006690538488328457}, {"id": 228, "seek": 109348, "start": 1113.32, "end": 1118.72, "text": " But have a different form often a form that helps make the meaning more clear", "tokens": [51356, 583, 362, 257, 819, 1254, 2049, 257, 1254, 300, 3665, 652, 264, 3620, 544, 1850, 51626], "temperature": 0.0, "avg_logprob": -0.23111015616111386, "compression_ratio": 1.8038461538461539, "no_speech_prob": 0.006690538488328457}, {"id": 229, "seek": 109348, "start": 1119.08, "end": 1123.0, "text": " so the example on Khan Academy for logical equivalence is as", "tokens": [51644, 370, 264, 1365, 322, 18136, 11735, 337, 14978, 9052, 655, 307, 382, 51840], "temperature": 0.0, "avg_logprob": -0.23111015616111386, "compression_ratio": 1.8038461538461539, "no_speech_prob": 0.006690538488328457}, {"id": 230, "seek": 112348, "start": 1123.48, "end": 1128.52, "text": " If you take these three statements, you cannot go to the park if your sister is awake or", "tokens": [50364, 759, 291, 747, 613, 1045, 12363, 11, 291, 2644, 352, 281, 264, 3884, 498, 428, 4892, 307, 15994, 420, 50616], "temperature": 0.0, "avg_logprob": -0.21322829147865033, "compression_ratio": 2.113095238095238, "no_speech_prob": 0.004262743983417749}, {"id": 231, "seek": 112348, "start": 1129.6, "end": 1137.16, "text": " Your room is dirty. That's one statement. The other one is you can go to the park if your sister is not awake and", "tokens": [50670, 2260, 1808, 307, 9360, 13, 663, 311, 472, 5629, 13, 440, 661, 472, 307, 291, 393, 352, 281, 264, 3884, 498, 428, 4892, 307, 406, 15994, 293, 51048], "temperature": 0.0, "avg_logprob": -0.21322829147865033, "compression_ratio": 2.113095238095238, "no_speech_prob": 0.004262743983417749}, {"id": 232, "seek": 112348, "start": 1138.56, "end": 1141.8, "text": " Your room is not dirty or even simpler", "tokens": [51118, 2260, 1808, 307, 406, 9360, 420, 754, 18587, 51280], "temperature": 0.0, "avg_logprob": -0.21322829147865033, "compression_ratio": 2.113095238095238, "no_speech_prob": 0.004262743983417749}, {"id": 233, "seek": 112348, "start": 1142.28, "end": 1150.1200000000001, "text": " You can go to the park if your sister's asleep and your room is clean now these three statements despite having a", "tokens": [51304, 509, 393, 352, 281, 264, 3884, 498, 428, 4892, 311, 11039, 293, 428, 1808, 307, 2541, 586, 613, 1045, 12363, 7228, 1419, 257, 51696], "temperature": 0.0, "avg_logprob": -0.21322829147865033, "compression_ratio": 2.113095238095238, "no_speech_prob": 0.004262743983417749}, {"id": 234, "seek": 115012, "start": 1151.12, "end": 1154.6799999999998, "text": " Different structure or different let's say content", "tokens": [50414, 20825, 3877, 420, 819, 718, 311, 584, 2701, 50592], "temperature": 0.0, "avg_logprob": -0.23828644448138298, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.010318520478904247}, {"id": 235, "seek": 115012, "start": 1155.2399999999998, "end": 1161.1599999999999, "text": " They are still logically equal in terms of the meaning we derive from them. There is logical equivalence", "tokens": [50620, 814, 366, 920, 38887, 2681, 294, 2115, 295, 264, 3620, 321, 28446, 490, 552, 13, 821, 307, 14978, 9052, 655, 50916], "temperature": 0.0, "avg_logprob": -0.23828644448138298, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.010318520478904247}, {"id": 236, "seek": 115012, "start": 1163.1999999999998, "end": 1168.1999999999998, "text": " But but for Java of course, and I just wanted to read that up because I thought it was quite interesting", "tokens": [51018, 583, 457, 337, 10745, 295, 1164, 11, 293, 286, 445, 1415, 281, 1401, 300, 493, 570, 286, 1194, 309, 390, 1596, 1880, 51268], "temperature": 0.0, "avg_logprob": -0.23828644448138298, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.010318520478904247}, {"id": 237, "seek": 115012, "start": 1168.1999999999998, "end": 1169.8, "text": " Oh, by the way", "tokens": [51268, 876, 11, 538, 264, 636, 51348], "temperature": 0.0, "avg_logprob": -0.23828644448138298, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.010318520478904247}, {"id": 238, "seek": 115012, "start": 1169.8, "end": 1175.8, "text": " Before we get the Java idea in the context of Java. I mean, let's let's take a look at this is like a", "tokens": [51348, 4546, 321, 483, 264, 10745, 1558, 294, 264, 4319, 295, 10745, 13, 286, 914, 11, 718, 311, 718, 311, 747, 257, 574, 412, 341, 307, 411, 257, 51648], "temperature": 0.0, "avg_logprob": -0.23828644448138298, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.010318520478904247}, {"id": 239, "seek": 117580, "start": 1176.72, "end": 1184.1599999999999, "text": " Biconditional truth table. So another way of thinking in a bit more formal sense of logical equivalence is is if we take", "tokens": [50410, 363, 299, 684, 2628, 3494, 3199, 13, 407, 1071, 636, 295, 1953, 294, 257, 857, 544, 9860, 2020, 295, 14978, 9052, 655, 307, 307, 498, 321, 747, 50782], "temperature": 0.0, "avg_logprob": -0.2544591785532183, "compression_ratio": 1.8672566371681416, "no_speech_prob": 0.03408287465572357}, {"id": 240, "seek": 117580, "start": 1184.48, "end": 1189.12, "text": " logical equivalence if if both P and Q are true, then", "tokens": [50798, 14978, 9052, 655, 498, 498, 1293, 430, 293, 1249, 366, 2074, 11, 550, 51030], "temperature": 0.0, "avg_logprob": -0.2544591785532183, "compression_ratio": 1.8672566371681416, "no_speech_prob": 0.03408287465572357}, {"id": 241, "seek": 117580, "start": 1189.6, "end": 1194.76, "text": " The biconditional value is also true if either one of them is false. It's gonna be false", "tokens": [51054, 440, 34472, 684, 2628, 2158, 307, 611, 2074, 498, 2139, 472, 295, 552, 307, 7908, 13, 467, 311, 799, 312, 7908, 51312], "temperature": 0.0, "avg_logprob": -0.2544591785532183, "compression_ratio": 1.8672566371681416, "no_speech_prob": 0.03408287465572357}, {"id": 242, "seek": 117580, "start": 1195.1599999999999, "end": 1201.8, "text": " But also if all of both of them are false, they're still they still have this logical equivalence. Therefore, it's gonna be true", "tokens": [51332, 583, 611, 498, 439, 295, 1293, 295, 552, 366, 7908, 11, 436, 434, 920, 436, 920, 362, 341, 14978, 9052, 655, 13, 7504, 11, 309, 311, 799, 312, 2074, 51664], "temperature": 0.0, "avg_logprob": -0.2544591785532183, "compression_ratio": 1.8672566371681416, "no_speech_prob": 0.03408287465572357}, {"id": 243, "seek": 117580, "start": 1202.3999999999999, "end": 1204.3999999999999, "text": " so it's it's it's it's like a", "tokens": [51694, 370, 309, 311, 309, 311, 309, 311, 309, 311, 411, 257, 51794], "temperature": 0.0, "avg_logprob": -0.2544591785532183, "compression_ratio": 1.8672566371681416, "no_speech_prob": 0.03408287465572357}, {"id": 244, "seek": 120440, "start": 1205.1200000000001, "end": 1210.3600000000001, "text": " One one is one and then zero zero is still one if that makes sense", "tokens": [50400, 1485, 472, 307, 472, 293, 550, 4018, 4018, 307, 920, 472, 498, 300, 1669, 2020, 50662], "temperature": 0.0, "avg_logprob": -0.24714101035639924, "compression_ratio": 1.7290836653386454, "no_speech_prob": 0.00530044874176383}, {"id": 245, "seek": 120440, "start": 1211.0, "end": 1214.5600000000002, "text": " But you know in the context of Java, it's I just thought that was interesting", "tokens": [50694, 583, 291, 458, 294, 264, 4319, 295, 10745, 11, 309, 311, 286, 445, 1194, 300, 390, 1880, 50872], "temperature": 0.0, "avg_logprob": -0.24714101035639924, "compression_ratio": 1.7290836653386454, "no_speech_prob": 0.00530044874176383}, {"id": 246, "seek": 120440, "start": 1214.5600000000002, "end": 1219.3200000000002, "text": " And I wanted to go into that and the context of Java of course logical equality compares the content", "tokens": [50872, 400, 286, 1415, 281, 352, 666, 300, 293, 264, 4319, 295, 10745, 295, 1164, 14978, 14949, 38334, 264, 2701, 51110], "temperature": 0.0, "avg_logprob": -0.24714101035639924, "compression_ratio": 1.7290836653386454, "no_speech_prob": 0.00530044874176383}, {"id": 247, "seek": 120440, "start": 1219.8000000000002, "end": 1222.2800000000002, "text": " The the content of the object the data of the object", "tokens": [51134, 440, 264, 2701, 295, 264, 2657, 264, 1412, 295, 264, 2657, 51258], "temperature": 0.0, "avg_logprob": -0.24714101035639924, "compression_ratio": 1.7290836653386454, "no_speech_prob": 0.00530044874176383}, {"id": 248, "seek": 120440, "start": 1222.8400000000001, "end": 1226.44, "text": " Instead of the values of the memory reference as we discussed earlier", "tokens": [51286, 7156, 295, 264, 4190, 295, 264, 4675, 6408, 382, 321, 7152, 3071, 51466], "temperature": 0.0, "avg_logprob": -0.24714101035639924, "compression_ratio": 1.7290836653386454, "no_speech_prob": 0.00530044874176383}, {"id": 249, "seek": 120440, "start": 1226.8400000000001, "end": 1230.24, "text": " So let's take a look at a quick demo. Oh before I get to the demo", "tokens": [51486, 407, 718, 311, 747, 257, 574, 412, 257, 1702, 10723, 13, 876, 949, 286, 483, 281, 264, 10723, 51656], "temperature": 0.0, "avg_logprob": -0.24714101035639924, "compression_ratio": 1.7290836653386454, "no_speech_prob": 0.00530044874176383}, {"id": 250, "seek": 123024, "start": 1230.24, "end": 1234.28, "text": " Let me read out the definition by Joshua block on that point. So again, he says", "tokens": [50364, 961, 385, 1401, 484, 264, 7123, 538, 24005, 3461, 322, 300, 935, 13, 407, 797, 11, 415, 1619, 50566], "temperature": 0.0, "avg_logprob": -0.2909633059834325, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.0020501448307186365}, {"id": 251, "seek": 123024, "start": 1235.1200000000001, "end": 1236.52, "text": " there's no need to", "tokens": [50608, 456, 311, 572, 643, 281, 50678], "temperature": 0.0, "avg_logprob": -0.2909633059834325, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.0020501448307186365}, {"id": 252, "seek": 123024, "start": 1236.52, "end": 1242.72, "text": " override the equals method if they if there's no need for the class to provide a", "tokens": [50678, 42321, 264, 6915, 3170, 498, 436, 498, 456, 311, 572, 643, 337, 264, 1508, 281, 2893, 257, 50988], "temperature": 0.0, "avg_logprob": -0.2909633059834325, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.0020501448307186365}, {"id": 253, "seek": 123024, "start": 1243.16, "end": 1245.16, "text": " logical equality test", "tokens": [51010, 14978, 14949, 1500, 51110], "temperature": 0.0, "avg_logprob": -0.2909633059834325, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.0020501448307186365}, {"id": 254, "seek": 123024, "start": 1245.76, "end": 1247.24, "text": " For example", "tokens": [51140, 1171, 1365, 51214], "temperature": 0.0, "avg_logprob": -0.2909633059834325, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.0020501448307186365}, {"id": 255, "seek": 123024, "start": 1247.24, "end": 1249.76, "text": " The Java util reg X pattern class", "tokens": [51214, 440, 10745, 4976, 1121, 1783, 5102, 1508, 51340], "temperature": 0.0, "avg_logprob": -0.2909633059834325, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.0020501448307186365}, {"id": 256, "seek": 123024, "start": 1250.4, "end": 1257.48, "text": " Could have overwritten equals to check whether two pattern instances represent represented exactly the same regular expression", "tokens": [51372, 7497, 362, 670, 26859, 6915, 281, 1520, 1968, 732, 5102, 14519, 2906, 10379, 2293, 264, 912, 3890, 6114, 51726], "temperature": 0.0, "avg_logprob": -0.2909633059834325, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.0020501448307186365}, {"id": 257, "seek": 125748, "start": 1257.72, "end": 1260.1200000000001, "text": " But the designers didn't think", "tokens": [50376, 583, 264, 16196, 994, 380, 519, 50496], "temperature": 0.0, "avg_logprob": -0.22368165279956573, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.0024338392540812492}, {"id": 258, "seek": 125748, "start": 1260.76, "end": 1267.2, "text": " That clients would need or want this functionality. Correct. It's it this very much", "tokens": [50528, 663, 6982, 576, 643, 420, 528, 341, 14980, 13, 12753, 13, 467, 311, 309, 341, 588, 709, 50850], "temperature": 0.0, "avg_logprob": -0.22368165279956573, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.0024338392540812492}, {"id": 259, "seek": 125748, "start": 1267.2, "end": 1269.92, "text": " This is like the art of object-oriented design", "tokens": [50850, 639, 307, 411, 264, 1523, 295, 2657, 12, 27414, 1715, 50986], "temperature": 0.0, "avg_logprob": -0.22368165279956573, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.0024338392540812492}, {"id": 260, "seek": 125748, "start": 1270.68, "end": 1272.68, "text": " It's important to understand", "tokens": [51024, 467, 311, 1021, 281, 1223, 51124], "temperature": 0.0, "avg_logprob": -0.22368165279956573, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.0024338392540812492}, {"id": 261, "seek": 125748, "start": 1272.68, "end": 1280.72, "text": " What what the context of a API we write will be used and and these the designers of this API thought that it's it's not", "tokens": [51124, 708, 437, 264, 4319, 295, 257, 9362, 321, 2464, 486, 312, 1143, 293, 293, 613, 264, 16196, 295, 341, 9362, 1194, 300, 309, 311, 309, 311, 406, 51526], "temperature": 0.0, "avg_logprob": -0.22368165279956573, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.0024338392540812492}, {"id": 262, "seek": 125748, "start": 1280.72, "end": 1282.72, "text": " necessary to override the equals method because", "tokens": [51526, 4818, 281, 42321, 264, 6915, 3170, 570, 51626], "temperature": 0.0, "avg_logprob": -0.22368165279956573, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.0024338392540812492}, {"id": 263, "seek": 125748, "start": 1283.44, "end": 1285.44, "text": " We would never really use the", "tokens": [51662, 492, 576, 1128, 534, 764, 264, 51762], "temperature": 0.0, "avg_logprob": -0.22368165279956573, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.0024338392540812492}, {"id": 264, "seek": 128544, "start": 1286.3200000000002, "end": 1294.8400000000001, "text": " Equals method to compare to instances of pattern and let's take a look at an example. So a quick demo. I have here is", "tokens": [50408, 15624, 1124, 3170, 281, 6794, 281, 14519, 295, 5102, 293, 718, 311, 747, 257, 574, 412, 364, 1365, 13, 407, 257, 1702, 10723, 13, 286, 362, 510, 307, 50834], "temperature": 0.0, "avg_logprob": -0.25733124337545255, "compression_ratio": 1.5560975609756098, "no_speech_prob": 0.0015486073680222034}, {"id": 265, "seek": 128544, "start": 1296.2, "end": 1298.2, "text": " Let me open that up", "tokens": [50902, 961, 385, 1269, 300, 493, 51002], "temperature": 0.0, "avg_logprob": -0.25733124337545255, "compression_ratio": 1.5560975609756098, "no_speech_prob": 0.0015486073680222034}, {"id": 266, "seek": 128544, "start": 1299.0800000000002, "end": 1307.1200000000001, "text": " So I have this static Boolean method called run regular expression against string which takes a reg X and takes a", "tokens": [51046, 407, 286, 362, 341, 13437, 23351, 28499, 3170, 1219, 1190, 3890, 6114, 1970, 6798, 597, 2516, 257, 1121, 1783, 293, 2516, 257, 51448], "temperature": 0.0, "avg_logprob": -0.25733124337545255, "compression_ratio": 1.5560975609756098, "no_speech_prob": 0.0015486073680222034}, {"id": 267, "seek": 128544, "start": 1308.0800000000002, "end": 1310.0800000000002, "text": " text of type string and", "tokens": [51496, 2487, 295, 2010, 6798, 293, 51596], "temperature": 0.0, "avg_logprob": -0.25733124337545255, "compression_ratio": 1.5560975609756098, "no_speech_prob": 0.0015486073680222034}, {"id": 268, "seek": 128544, "start": 1310.2, "end": 1312.2, "text": " really what we're doing is we're creating a", "tokens": [51602, 534, 437, 321, 434, 884, 307, 321, 434, 4084, 257, 51702], "temperature": 0.0, "avg_logprob": -0.25733124337545255, "compression_ratio": 1.5560975609756098, "no_speech_prob": 0.0015486073680222034}, {"id": 269, "seek": 131220, "start": 1313.16, "end": 1316.4, "text": " Compile reg X of type pattern a pattern object and", "tokens": [50412, 6620, 794, 1121, 1783, 295, 2010, 5102, 257, 5102, 2657, 293, 50574], "temperature": 0.0, "avg_logprob": -0.2891060127006782, "compression_ratio": 1.8592233009708738, "no_speech_prob": 0.004330552648752928}, {"id": 270, "seek": 131220, "start": 1317.24, "end": 1325.2, "text": " Afterwards, we're using the matcher which interprets this pattern that that's so pattern dot compile returns a pattern a compile pattern and then matcher", "tokens": [50616, 41357, 11, 321, 434, 1228, 264, 2995, 260, 597, 17489, 1373, 341, 5102, 300, 300, 311, 370, 5102, 5893, 31413, 11247, 257, 5102, 257, 31413, 5102, 293, 550, 2995, 260, 51014], "temperature": 0.0, "avg_logprob": -0.2891060127006782, "compression_ratio": 1.8592233009708738, "no_speech_prob": 0.004330552648752928}, {"id": 271, "seek": 131220, "start": 1325.64, "end": 1330.24, "text": " Interprets what it returns to look for equivalence. So not for equivalent", "tokens": [51036, 5751, 3712, 1373, 437, 309, 11247, 281, 574, 337, 9052, 655, 13, 407, 406, 337, 10344, 51266], "temperature": 0.0, "avg_logprob": -0.2891060127006782, "compression_ratio": 1.8592233009708738, "no_speech_prob": 0.004330552648752928}, {"id": 272, "seek": 131220, "start": 1330.24, "end": 1336.44, "text": " Sorry to find that pattern in a given string or a given object of type string", "tokens": [51266, 4919, 281, 915, 300, 5102, 294, 257, 2212, 6798, 420, 257, 2212, 2657, 295, 2010, 6798, 51576], "temperature": 0.0, "avg_logprob": -0.2891060127006782, "compression_ratio": 1.8592233009708738, "no_speech_prob": 0.004330552648752928}, {"id": 273, "seek": 131220, "start": 1337.16, "end": 1339.16, "text": " So over here if I run this", "tokens": [51612, 407, 670, 510, 498, 286, 1190, 341, 51712], "temperature": 0.0, "avg_logprob": -0.2891060127006782, "compression_ratio": 1.8592233009708738, "no_speech_prob": 0.004330552648752928}, {"id": 274, "seek": 134220, "start": 1342.92, "end": 1346.16, "text": " You'll see it returns true false false", "tokens": [50400, 509, 603, 536, 309, 11247, 2074, 7908, 7908, 50562], "temperature": 0.0, "avg_logprob": -0.22878695469276578, "compression_ratio": 1.7404255319148936, "no_speech_prob": 0.0016227609012275934}, {"id": 275, "seek": 134220, "start": 1346.16, "end": 1351.44, "text": " So the reason for that is because obviously this reg X is a reg X for an email address", "tokens": [50562, 407, 264, 1778, 337, 300, 307, 570, 2745, 341, 1121, 1783, 307, 257, 1121, 1783, 337, 364, 3796, 2985, 50826], "temperature": 0.0, "avg_logprob": -0.22878695469276578, "compression_ratio": 1.7404255319148936, "no_speech_prob": 0.0016227609012275934}, {"id": 276, "seek": 134220, "start": 1351.44, "end": 1358.2, "text": " And the first one is an email address these two don't fulfill the requirements of this reg X pattern and", "tokens": [50826, 400, 264, 700, 472, 307, 364, 3796, 2985, 613, 732, 500, 380, 13875, 264, 7728, 295, 341, 1121, 1783, 5102, 293, 51164], "temperature": 0.0, "avg_logprob": -0.22878695469276578, "compression_ratio": 1.7404255319148936, "no_speech_prob": 0.0016227609012275934}, {"id": 277, "seek": 134220, "start": 1359.0, "end": 1360.68, "text": " Attending to our point", "tokens": [51204, 7298, 2029, 281, 527, 935, 51288], "temperature": 0.0, "avg_logprob": -0.22878695469276578, "compression_ratio": 1.7404255319148936, "no_speech_prob": 0.0016227609012275934}, {"id": 278, "seek": 134220, "start": 1360.68, "end": 1364.32, "text": " This the designers made it made a call that", "tokens": [51288, 639, 264, 16196, 1027, 309, 1027, 257, 818, 300, 51470], "temperature": 0.0, "avg_logprob": -0.22878695469276578, "compression_ratio": 1.7404255319148936, "no_speech_prob": 0.0016227609012275934}, {"id": 279, "seek": 134220, "start": 1364.88, "end": 1366.52, "text": " Uses of this API", "tokens": [51498, 4958, 279, 295, 341, 9362, 51580], "temperature": 0.0, "avg_logprob": -0.22878695469276578, "compression_ratio": 1.7404255319148936, "no_speech_prob": 0.0016227609012275934}, {"id": 280, "seek": 134220, "start": 1366.52, "end": 1371.8400000000001, "text": " Will never never want to compare instances of the pattern class. There's just no reason for it", "tokens": [51580, 3099, 1128, 1128, 528, 281, 6794, 14519, 295, 264, 5102, 1508, 13, 821, 311, 445, 572, 1778, 337, 309, 51846], "temperature": 0.0, "avg_logprob": -0.22878695469276578, "compression_ratio": 1.7404255319148936, "no_speech_prob": 0.0016227609012275934}, {"id": 281, "seek": 137184, "start": 1371.84, "end": 1376.6599999999999, "text": " Therefore we can leave the this as an order to put it in a bit more", "tokens": [50364, 7504, 321, 393, 1856, 264, 341, 382, 364, 1668, 281, 829, 309, 294, 257, 857, 544, 50605], "temperature": 0.0, "avg_logprob": -0.25092260042826336, "compression_ratio": 1.8034188034188035, "no_speech_prob": 0.003073485102504492}, {"id": 282, "seek": 137184, "start": 1377.4399999999998, "end": 1379.04, "text": " formal sense", "tokens": [50644, 9860, 2020, 50724], "temperature": 0.0, "avg_logprob": -0.25092260042826336, "compression_ratio": 1.8034188034188035, "no_speech_prob": 0.003073485102504492}, {"id": 283, "seek": 137184, "start": 1379.04, "end": 1382.8, "text": " The designers made it made a call that the users of this API", "tokens": [50724, 440, 16196, 1027, 309, 1027, 257, 818, 300, 264, 5022, 295, 341, 9362, 50912], "temperature": 0.0, "avg_logprob": -0.25092260042826336, "compression_ratio": 1.8034188034188035, "no_speech_prob": 0.003073485102504492}, {"id": 284, "seek": 137184, "start": 1383.52, "end": 1388.1599999999999, "text": " Will never require logical equality between instances of the pattern class", "tokens": [50948, 3099, 1128, 3651, 14978, 14949, 1296, 14519, 295, 264, 5102, 1508, 51180], "temperature": 0.0, "avg_logprob": -0.25092260042826336, "compression_ratio": 1.8034188034188035, "no_speech_prob": 0.003073485102504492}, {"id": 285, "seek": 137184, "start": 1389.76, "end": 1395.52, "text": " Therefore we can leave the equals method as it is they thought and at times like that", "tokens": [51260, 7504, 321, 393, 1856, 264, 6915, 3170, 382, 309, 307, 436, 1194, 293, 412, 1413, 411, 300, 51548], "temperature": 0.0, "avg_logprob": -0.25092260042826336, "compression_ratio": 1.8034188034188035, "no_speech_prob": 0.003073485102504492}, {"id": 286, "seek": 137184, "start": 1395.52, "end": 1401.6799999999998, "text": " there's no requirement to override the equals method and the other reason of course not override is if the class you're", "tokens": [51548, 456, 311, 572, 11695, 281, 42321, 264, 6915, 3170, 293, 264, 661, 1778, 295, 1164, 406, 42321, 307, 498, 264, 1508, 291, 434, 51856], "temperature": 0.0, "avg_logprob": -0.25092260042826336, "compression_ratio": 1.8034188034188035, "no_speech_prob": 0.003073485102504492}, {"id": 287, "seek": 140168, "start": 1401.68, "end": 1405.8400000000001, "text": " writing and designing already has a superclass and inherits", "tokens": [50364, 3579, 293, 14685, 1217, 575, 257, 1687, 11665, 293, 9484, 1208, 50572], "temperature": 0.0, "avg_logprob": -0.17116180419921875, "compression_ratio": 1.8363636363636364, "no_speech_prob": 0.008185766637325287}, {"id": 288, "seek": 140168, "start": 1407.4, "end": 1414.64, "text": " Methods from the superclass and if that superclass is already overridden the the equals method appropriately to the subclass", "tokens": [50650, 25285, 82, 490, 264, 1687, 11665, 293, 498, 300, 1687, 11665, 307, 1217, 670, 81, 6171, 264, 264, 6915, 3170, 23505, 281, 264, 1422, 11665, 51012], "temperature": 0.0, "avg_logprob": -0.17116180419921875, "compression_ratio": 1.8363636363636364, "no_speech_prob": 0.008185766637325287}, {"id": 289, "seek": 140168, "start": 1415.48, "end": 1421.0, "text": " Then this wouldn't be an issue. We wouldn't have to again override the overridden equals method", "tokens": [51054, 1396, 341, 2759, 380, 312, 364, 2734, 13, 492, 2759, 380, 362, 281, 797, 42321, 264, 670, 81, 6171, 6915, 3170, 51330], "temperature": 0.0, "avg_logprob": -0.17116180419921875, "compression_ratio": 1.8363636363636364, "no_speech_prob": 0.008185766637325287}, {"id": 290, "seek": 140168, "start": 1421.0, "end": 1427.24, "text": " That would be a bit absurd. In fact, we're not gonna get to this in this part, but in the next part", "tokens": [51330, 663, 576, 312, 257, 857, 19774, 13, 682, 1186, 11, 321, 434, 406, 799, 483, 281, 341, 294, 341, 644, 11, 457, 294, 264, 958, 644, 51642], "temperature": 0.0, "avg_logprob": -0.17116180419921875, "compression_ratio": 1.8363636363636364, "no_speech_prob": 0.008185766637325287}, {"id": 291, "seek": 140168, "start": 1427.24, "end": 1429.24, "text": " we're gonna discuss the", "tokens": [51642, 321, 434, 799, 2248, 264, 51742], "temperature": 0.0, "avg_logprob": -0.17116180419921875, "compression_ratio": 1.8363636363636364, "no_speech_prob": 0.008185766637325287}, {"id": 292, "seek": 142924, "start": 1429.6, "end": 1430.96, "text": " The", "tokens": [50382, 440, 50450], "temperature": 0.0, "avg_logprob": -0.2753449982287837, "compression_ratio": 1.716, "no_speech_prob": 0.002631001640111208}, {"id": 293, "seek": 142924, "start": 1430.96, "end": 1432.32, "text": " List code", "tokens": [50450, 17668, 3089, 50518], "temperature": 0.0, "avg_logprob": -0.2753449982287837, "compression_ratio": 1.716, "no_speech_prob": 0.002631001640111208}, {"id": 294, "seek": 142924, "start": 1432.32, "end": 1437.04, "text": " Substitution principle that is something we should follow when in class hierarchies and inheritance", "tokens": [50518, 42090, 6518, 8665, 300, 307, 746, 321, 820, 1524, 562, 294, 1508, 35250, 530, 293, 32122, 50754], "temperature": 0.0, "avg_logprob": -0.2753449982287837, "compression_ratio": 1.716, "no_speech_prob": 0.002631001640111208}, {"id": 295, "seek": 142924, "start": 1437.36, "end": 1439.84, "text": " Because of that principle and if we do follow that principle", "tokens": [50770, 1436, 295, 300, 8665, 293, 498, 321, 360, 1524, 300, 8665, 50894], "temperature": 0.0, "avg_logprob": -0.2753449982287837, "compression_ratio": 1.716, "no_speech_prob": 0.002631001640111208}, {"id": 296, "seek": 142924, "start": 1440.56, "end": 1445.76, "text": " theoretically, there shouldn't be a reason for or subclass to override a", "tokens": [50930, 29400, 11, 456, 4659, 380, 312, 257, 1778, 337, 420, 1422, 11665, 281, 42321, 257, 51190], "temperature": 0.0, "avg_logprob": -0.2753449982287837, "compression_ratio": 1.716, "no_speech_prob": 0.002631001640111208}, {"id": 297, "seek": 142924, "start": 1446.36, "end": 1452.38, "text": " Equals method of a superclass that's already overridden the equals method of the object class if that makes sense", "tokens": [51220, 15624, 1124, 3170, 295, 257, 1687, 11665, 300, 311, 1217, 670, 81, 6171, 264, 6915, 3170, 295, 264, 2657, 1508, 498, 300, 1669, 2020, 51521], "temperature": 0.0, "avg_logprob": -0.2753449982287837, "compression_ratio": 1.716, "no_speech_prob": 0.002631001640111208}, {"id": 298, "seek": 142924, "start": 1452.38, "end": 1456.86, "text": " So for instance before I get to the demo, let's take a look at this", "tokens": [51521, 407, 337, 5197, 949, 286, 483, 281, 264, 10723, 11, 718, 311, 747, 257, 574, 412, 341, 51745], "temperature": 0.0, "avg_logprob": -0.2753449982287837, "compression_ratio": 1.716, "no_speech_prob": 0.002631001640111208}, {"id": 299, "seek": 145686, "start": 1457.26, "end": 1465.34, "text": " This is the class diagram for and I I'm not sure what the accuracy of this is because the Java collections framework is huge", "tokens": [50384, 639, 307, 264, 1508, 10686, 337, 293, 286, 286, 478, 406, 988, 437, 264, 14170, 295, 341, 307, 570, 264, 10745, 16641, 8388, 307, 2603, 50788], "temperature": 0.0, "avg_logprob": -0.23001741625599026, "compression_ratio": 1.7125506072874495, "no_speech_prob": 0.013220973312854767}, {"id": 300, "seek": 145686, "start": 1465.34, "end": 1470.52, "text": " And it's growing huge sound like trumpet. It's huge and it's growing", "tokens": [50788, 400, 309, 311, 4194, 2603, 1626, 411, 35160, 13, 467, 311, 2603, 293, 309, 311, 4194, 51047], "temperature": 0.0, "avg_logprob": -0.23001741625599026, "compression_ratio": 1.7125506072874495, "no_speech_prob": 0.013220973312854767}, {"id": 301, "seek": 145686, "start": 1471.26, "end": 1474.4599999999998, "text": " quite a lot and and as you can see here", "tokens": [51084, 1596, 257, 688, 293, 293, 382, 291, 393, 536, 510, 51244], "temperature": 0.0, "avg_logprob": -0.23001741625599026, "compression_ratio": 1.7125506072874495, "no_speech_prob": 0.013220973312854767}, {"id": 302, "seek": 145686, "start": 1474.4599999999998, "end": 1481.06, "text": " There's a there are there are many that all the class hierarchies their implementations and extensions and inheritance taking place so", "tokens": [51244, 821, 311, 257, 456, 366, 456, 366, 867, 300, 439, 264, 1508, 35250, 530, 641, 4445, 763, 293, 25129, 293, 32122, 1940, 1081, 370, 51574], "temperature": 0.0, "avg_logprob": -0.23001741625599026, "compression_ratio": 1.7125506072874495, "no_speech_prob": 0.013220973312854767}, {"id": 303, "seek": 145686, "start": 1482.12, "end": 1485.5, "text": " the example that Joshua block has given in the item is", "tokens": [51627, 264, 1365, 300, 24005, 3461, 575, 2212, 294, 264, 3174, 307, 51796], "temperature": 0.0, "avg_logprob": -0.23001741625599026, "compression_ratio": 1.7125506072874495, "no_speech_prob": 0.013220973312854767}, {"id": 304, "seek": 148686, "start": 1487.1, "end": 1493.3, "text": " So don't override when a superclass has already overridden equals as I did say and the superclass", "tokens": [50376, 407, 500, 380, 42321, 562, 257, 1687, 11665, 575, 1217, 670, 81, 6171, 6915, 382, 286, 630, 584, 293, 264, 1687, 11665, 50686], "temperature": 0.0, "avg_logprob": -0.21895416834021128, "compression_ratio": 1.9145299145299146, "no_speech_prob": 0.003706933930516243}, {"id": 305, "seek": 148686, "start": 1493.78, "end": 1498.1799999999998, "text": " Behavior is appropriate for this class and if we do follow that principle theoretically", "tokens": [50710, 45807, 307, 6854, 337, 341, 1508, 293, 498, 321, 360, 1524, 300, 8665, 29400, 50930], "temperature": 0.0, "avg_logprob": -0.21895416834021128, "compression_ratio": 1.9145299145299146, "no_speech_prob": 0.003706933930516243}, {"id": 306, "seek": 148686, "start": 1498.1799999999998, "end": 1499.86, "text": " It should be the list curve", "tokens": [50930, 467, 820, 312, 264, 1329, 7605, 51014], "temperature": 0.0, "avg_logprob": -0.21895416834021128, "compression_ratio": 1.9145299145299146, "no_speech_prob": 0.003706933930516243}, {"id": 307, "seek": 148686, "start": 1499.86, "end": 1507.52, "text": " Substitution principle for example most set implementations inherit their equals implementation from abstract set", "tokens": [51014, 42090, 6518, 8665, 337, 1365, 881, 992, 4445, 763, 21389, 641, 6915, 11420, 490, 12649, 992, 51397], "temperature": 0.0, "avg_logprob": -0.21895416834021128, "compression_ratio": 1.9145299145299146, "no_speech_prob": 0.003706933930516243}, {"id": 308, "seek": 148686, "start": 1507.86, "end": 1515.1799999999998, "text": " list implementations from abstract lists and map implementations from abstract map, and that's why I wanted to have this", "tokens": [51414, 1329, 4445, 763, 490, 12649, 14511, 293, 4471, 4445, 763, 490, 12649, 4471, 11, 293, 300, 311, 983, 286, 1415, 281, 362, 341, 51780], "temperature": 0.0, "avg_logprob": -0.21895416834021128, "compression_ratio": 1.9145299145299146, "no_speech_prob": 0.003706933930516243}, {"id": 309, "seek": 151518, "start": 1516.0600000000002, "end": 1520.74, "text": " diagram here because so if we take a look at set you can see that the", "tokens": [50408, 10686, 510, 570, 370, 498, 321, 747, 257, 574, 412, 992, 291, 393, 536, 300, 264, 50642], "temperature": 0.0, "avg_logprob": -0.2934318022294478, "compression_ratio": 1.5506329113924051, "no_speech_prob": 0.009122423827648163}, {"id": 310, "seek": 151518, "start": 1521.42, "end": 1524.54, "text": " the set or the hash set in this case is", "tokens": [50676, 264, 992, 420, 264, 22019, 992, 294, 341, 1389, 307, 50832], "temperature": 0.0, "avg_logprob": -0.2934318022294478, "compression_ratio": 1.5506329113924051, "no_speech_prob": 0.009122423827648163}, {"id": 311, "seek": 151518, "start": 1525.94, "end": 1527.94, "text": " inheriting", "tokens": [50902, 9484, 1748, 51002], "temperature": 0.0, "avg_logprob": -0.2934318022294478, "compression_ratio": 1.5506329113924051, "no_speech_prob": 0.009122423827648163}, {"id": 312, "seek": 151518, "start": 1528.78, "end": 1535.94, "text": " Sorry the set interface is implemented by the abstract set as you can see here", "tokens": [51044, 4919, 264, 992, 9226, 307, 12270, 538, 264, 12649, 992, 382, 291, 393, 536, 510, 51402], "temperature": 0.0, "avg_logprob": -0.2934318022294478, "compression_ratio": 1.5506329113924051, "no_speech_prob": 0.009122423827648163}, {"id": 313, "seek": 151518, "start": 1537.0600000000002, "end": 1540.02, "text": " And so yeah, sorry. I gotta be confused there", "tokens": [51458, 400, 370, 1338, 11, 2597, 13, 286, 3428, 312, 9019, 456, 51606], "temperature": 0.0, "avg_logprob": -0.2934318022294478, "compression_ratio": 1.5506329113924051, "no_speech_prob": 0.009122423827648163}, {"id": 314, "seek": 154002, "start": 1540.02, "end": 1545.74, "text": " The set interface is implemented by the abstract set and I've caused in the concrete class", "tokens": [50364, 440, 992, 9226, 307, 12270, 538, 264, 12649, 992, 293, 286, 600, 7008, 294, 264, 9859, 1508, 50650], "temperature": 0.0, "avg_logprob": -0.2733233507941751, "compression_ratio": 2.0568181818181817, "no_speech_prob": 0.01405844371765852}, {"id": 315, "seek": 154002, "start": 1545.74, "end": 1548.46, "text": " Which is the hash set that is here", "tokens": [50650, 3013, 307, 264, 22019, 992, 300, 307, 510, 50786], "temperature": 0.0, "avg_logprob": -0.2733233507941751, "compression_ratio": 2.0568181818181817, "no_speech_prob": 0.01405844371765852}, {"id": 316, "seek": 154002, "start": 1549.18, "end": 1550.78, "text": " extends that", "tokens": [50822, 26448, 300, 50902], "temperature": 0.0, "avg_logprob": -0.2733233507941751, "compression_ratio": 2.0568181818181817, "no_speech_prob": 0.01405844371765852}, {"id": 317, "seek": 154002, "start": 1550.78, "end": 1553.26, "text": " abstract set but also implements the set interface", "tokens": [50902, 12649, 992, 457, 611, 704, 17988, 264, 992, 9226, 51026], "temperature": 0.0, "avg_logprob": -0.2733233507941751, "compression_ratio": 2.0568181818181817, "no_speech_prob": 0.01405844371765852}, {"id": 318, "seek": 154002, "start": 1554.46, "end": 1557.26, "text": " I'm not sure why that happens, but why would it?", "tokens": [51086, 286, 478, 406, 988, 983, 300, 2314, 11, 457, 983, 576, 309, 30, 51226], "temperature": 0.0, "avg_logprob": -0.2733233507941751, "compression_ratio": 2.0568181818181817, "no_speech_prob": 0.01405844371765852}, {"id": 319, "seek": 154002, "start": 1557.86, "end": 1565.3799999999999, "text": " extend the abstract set and again implement the set interface if the abstract set has already", "tokens": [51256, 10101, 264, 12649, 992, 293, 797, 4445, 264, 992, 9226, 498, 264, 12649, 992, 575, 1217, 51632], "temperature": 0.0, "avg_logprob": -0.2733233507941751, "compression_ratio": 2.0568181818181817, "no_speech_prob": 0.01405844371765852}, {"id": 320, "seek": 154002, "start": 1566.5, "end": 1568.5, "text": " implemented the set interface", "tokens": [51688, 12270, 264, 992, 9226, 51788], "temperature": 0.0, "avg_logprob": -0.2733233507941751, "compression_ratio": 2.0568181818181817, "no_speech_prob": 0.01405844371765852}, {"id": 321, "seek": 156850, "start": 1568.62, "end": 1576.94, "text": " I'm not sure but in any case. I'm not gonna get into the Java collections framework here, but the point being if the superclass is appropriately", "tokens": [50370, 286, 478, 406, 988, 457, 294, 604, 1389, 13, 286, 478, 406, 799, 483, 666, 264, 10745, 16641, 8388, 510, 11, 457, 264, 935, 885, 498, 264, 1687, 11665, 307, 23505, 50786], "temperature": 0.0, "avg_logprob": -0.27927753773141417, "compression_ratio": 1.5964125560538116, "no_speech_prob": 0.0017543979920446873}, {"id": 322, "seek": 156850, "start": 1578.42, "end": 1581.78, "text": " Done the overriding. There's no requirement for", "tokens": [50860, 18658, 264, 670, 81, 2819, 13, 821, 311, 572, 11695, 337, 51028], "temperature": 0.0, "avg_logprob": -0.27927753773141417, "compression_ratio": 1.5964125560538116, "no_speech_prob": 0.0017543979920446873}, {"id": 323, "seek": 156850, "start": 1582.46, "end": 1589.86, "text": " The subclass to do the overriding again. So in the example that I've used I've just created a few has sets hash sets", "tokens": [51062, 440, 1422, 11665, 281, 360, 264, 670, 81, 2819, 797, 13, 407, 294, 264, 1365, 300, 286, 600, 1143, 286, 600, 445, 2942, 257, 1326, 575, 6352, 22019, 6352, 51432], "temperature": 0.0, "avg_logprob": -0.27927753773141417, "compression_ratio": 1.5964125560538116, "no_speech_prob": 0.0017543979920446873}, {"id": 324, "seek": 156850, "start": 1590.74, "end": 1592.74, "text": " I'm just gonna write and show it to you", "tokens": [51476, 286, 478, 445, 799, 2464, 293, 855, 309, 281, 291, 51576], "temperature": 0.0, "avg_logprob": -0.27927753773141417, "compression_ratio": 1.5964125560538116, "no_speech_prob": 0.0017543979920446873}, {"id": 325, "seek": 156850, "start": 1593.26, "end": 1595.26, "text": " Whoops", "tokens": [51602, 45263, 51702], "temperature": 0.0, "avg_logprob": -0.27927753773141417, "compression_ratio": 1.5964125560538116, "no_speech_prob": 0.0017543979920446873}, {"id": 326, "seek": 159526, "start": 1596.26, "end": 1598.26, "text": " Now you can see here I'm comparing", "tokens": [50414, 823, 291, 393, 536, 510, 286, 478, 15763, 50514], "temperature": 0.0, "avg_logprob": -0.3018677348182315, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.0015245394315570593}, {"id": 327, "seek": 159526, "start": 1599.14, "end": 1602.3799999999999, "text": " the first hash set to the second one and the", "tokens": [50558, 264, 700, 22019, 992, 281, 264, 1150, 472, 293, 264, 50720], "temperature": 0.0, "avg_logprob": -0.3018677348182315, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.0015245394315570593}, {"id": 328, "seek": 159526, "start": 1602.82, "end": 1608.22, "text": " Again the first one of the third one the first two has set so hash hash set", "tokens": [50742, 3764, 264, 700, 472, 295, 264, 2636, 472, 264, 700, 732, 575, 992, 370, 22019, 22019, 992, 51012], "temperature": 0.0, "avg_logprob": -0.3018677348182315, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.0015245394315570593}, {"id": 329, "seek": 159526, "start": 1609.3, "end": 1611.3, "text": " Has set and has set two", "tokens": [51066, 8646, 992, 293, 575, 992, 732, 51166], "temperature": 0.0, "avg_logprob": -0.3018677348182315, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.0015245394315570593}, {"id": 330, "seek": 159526, "start": 1611.3, "end": 1615.14, "text": " They both have equivalence a in the sense of", "tokens": [51166, 814, 1293, 362, 9052, 655, 257, 294, 264, 2020, 295, 51358], "temperature": 0.0, "avg_logprob": -0.3018677348182315, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.0015245394315570593}, {"id": 331, "seek": 159526, "start": 1615.86, "end": 1620.06, "text": " Logical equivalence so the content of the objects are the same. They both have effective Java", "tokens": [51394, 10824, 804, 9052, 655, 370, 264, 2701, 295, 264, 6565, 366, 264, 912, 13, 814, 1293, 362, 4942, 10745, 51604], "temperature": 0.0, "avg_logprob": -0.3018677348182315, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.0015245394315570593}, {"id": 332, "seek": 162006, "start": 1620.3, "end": 1628.74, "text": " Where's the third one hash set three has effective type strip a typescript and we compare hash set three to hash set one", "tokens": [50376, 2305, 311, 264, 2636, 472, 22019, 992, 1045, 575, 4942, 2010, 12828, 257, 3467, 5944, 293, 321, 6794, 22019, 992, 1045, 281, 22019, 992, 472, 50798], "temperature": 0.0, "avg_logprob": -0.23640743302710263, "compression_ratio": 1.6990291262135921, "no_speech_prob": 0.015422029420733452}, {"id": 333, "seek": 162006, "start": 1628.86, "end": 1635.26, "text": " It's part. It's returning a false and that's what you expect. So that means a superclass which was the abstract", "tokens": [50804, 467, 311, 644, 13, 467, 311, 12678, 257, 7908, 293, 300, 311, 437, 291, 2066, 13, 407, 300, 1355, 257, 1687, 11665, 597, 390, 264, 12649, 51124], "temperature": 0.0, "avg_logprob": -0.23640743302710263, "compression_ratio": 1.6990291262135921, "no_speech_prob": 0.015422029420733452}, {"id": 334, "seek": 162006, "start": 1635.94, "end": 1644.3, "text": " Set class has done the overriding correctly and it's following the general contract of the object class equals method", "tokens": [51158, 8928, 1508, 575, 1096, 264, 670, 81, 2819, 8944, 293, 309, 311, 3480, 264, 2674, 4364, 295, 264, 2657, 1508, 6915, 3170, 51576], "temperature": 0.0, "avg_logprob": -0.23640743302710263, "compression_ratio": 1.6990291262135921, "no_speech_prob": 0.015422029420733452}, {"id": 335, "seek": 164430, "start": 1645.3, "end": 1648.78, "text": " Just on the Java collections framework as you saw even I was quite confused", "tokens": [50414, 1449, 322, 264, 10745, 16641, 8388, 382, 291, 1866, 754, 286, 390, 1596, 9019, 50588], "temperature": 0.0, "avg_logprob": -0.20647123958287614, "compression_ratio": 1.660633484162896, "no_speech_prob": 0.02757834829390049}, {"id": 336, "seek": 164430, "start": 1648.78, "end": 1656.62, "text": " I mean, I really don't know if anyone except probably the designers and you know the the pantheon of the Java legends", "tokens": [50588, 286, 914, 11, 286, 534, 500, 380, 458, 498, 2878, 3993, 1391, 264, 16196, 293, 291, 458, 264, 264, 2462, 3322, 266, 295, 264, 10745, 27695, 50980], "temperature": 0.0, "avg_logprob": -0.20647123958287614, "compression_ratio": 1.660633484162896, "no_speech_prob": 0.02757834829390049}, {"id": 337, "seek": 164430, "start": 1657.98, "end": 1663.7, "text": " Have a tarot understanding of the collections framework. It's it's quite quite large and extensive", "tokens": [51048, 3560, 257, 3112, 310, 3701, 295, 264, 16641, 8388, 13, 467, 311, 309, 311, 1596, 1596, 2416, 293, 13246, 51334], "temperature": 0.0, "avg_logprob": -0.20647123958287614, "compression_ratio": 1.660633484162896, "no_speech_prob": 0.02757834829390049}, {"id": 338, "seek": 164430, "start": 1664.46, "end": 1666.78, "text": " But if you do want to read about it", "tokens": [51372, 583, 498, 291, 360, 528, 281, 1401, 466, 309, 51488], "temperature": 0.0, "avg_logprob": -0.20647123958287614, "compression_ratio": 1.660633484162896, "no_speech_prob": 0.02757834829390049}, {"id": 339, "seek": 164430, "start": 1667.62, "end": 1670.3, "text": " This is in fact not even read about it", "tokens": [51530, 639, 307, 294, 1186, 406, 754, 1401, 466, 309, 51664], "temperature": 0.0, "avg_logprob": -0.20647123958287614, "compression_ratio": 1.660633484162896, "no_speech_prob": 0.02757834829390049}, {"id": 340, "seek": 167030, "start": 1670.3, "end": 1674.54, "text": " But it's just good to that bookmark this page and use use it as a reference or these days you could just ask", "tokens": [50364, 583, 309, 311, 445, 665, 281, 300, 1446, 5638, 341, 3028, 293, 764, 764, 309, 382, 257, 6408, 420, 613, 1708, 291, 727, 445, 1029, 50576], "temperature": 0.0, "avg_logprob": -0.39750905306834095, "compression_ratio": 1.671875, "no_speech_prob": 0.003944179508835077}, {"id": 341, "seek": 167030, "start": 1674.94, "end": 1675.94, "text": " Chagapiti", "tokens": [50596, 761, 559, 569, 8707, 50646], "temperature": 0.0, "avg_logprob": -0.39750905306834095, "compression_ratio": 1.671875, "no_speech_prob": 0.003944179508835077}, {"id": 342, "seek": 167030, "start": 1675.94, "end": 1677.94, "text": " That life is much easier", "tokens": [50646, 663, 993, 307, 709, 3571, 50746], "temperature": 0.0, "avg_logprob": -0.39750905306834095, "compression_ratio": 1.671875, "no_speech_prob": 0.003944179508835077}, {"id": 343, "seek": 167030, "start": 1678.26, "end": 1682.26, "text": " Okay, before I go for a tangent the the other reason", "tokens": [50762, 1033, 11, 949, 286, 352, 337, 257, 27747, 264, 264, 661, 1778, 50962], "temperature": 0.0, "avg_logprob": -0.39750905306834095, "compression_ratio": 1.671875, "no_speech_prob": 0.003944179508835077}, {"id": 344, "seek": 167030, "start": 1682.78, "end": 1685.62, "text": " to not override the equals method is", "tokens": [50988, 281, 406, 42321, 264, 6915, 3170, 307, 51130], "temperature": 0.0, "avg_logprob": -0.39750905306834095, "compression_ratio": 1.671875, "no_speech_prob": 0.003944179508835077}, {"id": 345, "seek": 167030, "start": 1686.5, "end": 1694.86, "text": " If you're certain that the equals method will never be invoked quite straightforward that again probably relates to the other point where", "tokens": [51174, 759, 291, 434, 1629, 300, 264, 6915, 3170, 486, 1128, 312, 1048, 9511, 1596, 15325, 300, 797, 1391, 16155, 281, 264, 661, 935, 689, 51592], "temperature": 0.0, "avg_logprob": -0.39750905306834095, "compression_ratio": 1.671875, "no_speech_prob": 0.003944179508835077}, {"id": 346, "seek": 167030, "start": 1695.3799999999999, "end": 1699.6599999999999, "text": " as a designer what has to make that call and and and see", "tokens": [51618, 382, 257, 11795, 437, 575, 281, 652, 300, 818, 293, 293, 293, 536, 51832], "temperature": 0.0, "avg_logprob": -0.39750905306834095, "compression_ratio": 1.671875, "no_speech_prob": 0.003944179508835077}, {"id": 347, "seek": 169966, "start": 1699.7, "end": 1703.94, "text": " If users of this API will ever really invoke the equals method", "tokens": [50366, 759, 5022, 295, 341, 9362, 486, 1562, 534, 41117, 264, 6915, 3170, 50578], "temperature": 0.0, "avg_logprob": -0.26183375190286073, "compression_ratio": 1.7429718875502007, "no_speech_prob": 0.015418799594044685}, {"id": 348, "seek": 169966, "start": 1704.14, "end": 1709.0600000000002, "text": " So Joshua block states that the class so even it will not be invoked if the class is", "tokens": [50588, 407, 24005, 3461, 4368, 300, 264, 1508, 370, 754, 309, 486, 406, 312, 1048, 9511, 498, 264, 1508, 307, 50834], "temperature": 0.0, "avg_logprob": -0.26183375190286073, "compression_ratio": 1.7429718875502007, "no_speech_prob": 0.015418799594044685}, {"id": 349, "seek": 169966, "start": 1709.74, "end": 1716.5800000000002, "text": " Private or packaged private and you are certain that it's equals method will never be invoked. That was a confusing way", "tokens": [50868, 30386, 420, 38162, 4551, 293, 291, 366, 1629, 300, 309, 311, 6915, 3170, 486, 1128, 312, 1048, 9511, 13, 663, 390, 257, 13181, 636, 51210], "temperature": 0.0, "avg_logprob": -0.26183375190286073, "compression_ratio": 1.7429718875502007, "no_speech_prob": 0.015418799594044685}, {"id": 350, "seek": 169966, "start": 1717.7, "end": 1721.98, "text": " For me to put it but you get the point and then he states if you extremely risk averse", "tokens": [51266, 1171, 385, 281, 829, 309, 457, 291, 483, 264, 935, 293, 550, 415, 4368, 498, 291, 4664, 3148, 257, 4308, 51480], "temperature": 0.0, "avg_logprob": -0.26183375190286073, "compression_ratio": 1.7429718875502007, "no_speech_prob": 0.015418799594044685}, {"id": 351, "seek": 169966, "start": 1722.22, "end": 1727.3400000000001, "text": " You can override the equals method to ensure that it isn't invoked accidentally", "tokens": [51492, 509, 393, 42321, 264, 6915, 3170, 281, 5586, 300, 309, 1943, 380, 1048, 9511, 15715, 51748], "temperature": 0.0, "avg_logprob": -0.26183375190286073, "compression_ratio": 1.7429718875502007, "no_speech_prob": 0.015418799594044685}, {"id": 352, "seek": 172734, "start": 1727.3799999999999, "end": 1729.3799999999999, "text": " And I think it's good to be", "tokens": [50366, 400, 286, 519, 309, 311, 665, 281, 312, 50466], "temperature": 0.0, "avg_logprob": -0.16112601641312385, "compression_ratio": 1.9545454545454546, "no_speech_prob": 0.004398881457746029}, {"id": 353, "seek": 172734, "start": 1729.9399999999998, "end": 1735.74, "text": " Risk averse in that sense and I shall show the demo as to why it's probably a good idea to override the equals method", "tokens": [50494, 45892, 257, 4308, 294, 300, 2020, 293, 286, 4393, 855, 264, 10723, 382, 281, 983, 309, 311, 1391, 257, 665, 1558, 281, 42321, 264, 6915, 3170, 50784], "temperature": 0.0, "avg_logprob": -0.16112601641312385, "compression_ratio": 1.9545454545454546, "no_speech_prob": 0.004398881457746029}, {"id": 354, "seek": 172734, "start": 1736.34, "end": 1743.1399999999999, "text": " Regardless of it being private regardless of the class being private or packaged private in this demo", "tokens": [50814, 25148, 295, 309, 885, 4551, 10060, 295, 264, 1508, 885, 4551, 420, 38162, 4551, 294, 341, 10723, 51154], "temperature": 0.0, "avg_logprob": -0.16112601641312385, "compression_ratio": 1.9545454545454546, "no_speech_prob": 0.004398881457746029}, {"id": 355, "seek": 172734, "start": 1743.5, "end": 1749.1399999999999, "text": " So we have this class called demo and then in that class we have a private in a class", "tokens": [51172, 407, 321, 362, 341, 1508, 1219, 10723, 293, 550, 294, 300, 1508, 321, 362, 257, 4551, 294, 257, 1508, 51454], "temperature": 0.0, "avg_logprob": -0.16112601641312385, "compression_ratio": 1.9545454545454546, "no_speech_prob": 0.004398881457746029}, {"id": 356, "seek": 172734, "start": 1749.4599999999998, "end": 1755.8999999999999, "text": " So a private in a class now this class would only be used by the demo class because it's private", "tokens": [51470, 407, 257, 4551, 294, 257, 1508, 586, 341, 1508, 576, 787, 312, 1143, 538, 264, 10723, 1508, 570, 309, 311, 4551, 51792], "temperature": 0.0, "avg_logprob": -0.16112601641312385, "compression_ratio": 1.9545454545454546, "no_speech_prob": 0.004398881457746029}, {"id": 357, "seek": 175590, "start": 1756.02, "end": 1761.6200000000001, "text": " No one outside can use it. It's well encapsulated and in the private in a class", "tokens": [50370, 883, 472, 2380, 393, 764, 309, 13, 467, 311, 731, 38745, 6987, 293, 294, 264, 4551, 294, 257, 1508, 50650], "temperature": 0.0, "avg_logprob": -0.18046587893837376, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.00831474270671606}, {"id": 358, "seek": 175590, "start": 1761.6200000000001, "end": 1763.6200000000001, "text": " We have overwritten the equals method", "tokens": [50650, 492, 362, 670, 26859, 264, 6915, 3170, 50750], "temperature": 0.0, "avg_logprob": -0.18046587893837376, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.00831474270671606}, {"id": 359, "seek": 175590, "start": 1764.0600000000002, "end": 1769.7800000000002, "text": " And I shall show this bit a bit later. This is how you be fully risk averse and prevent", "tokens": [50772, 400, 286, 4393, 855, 341, 857, 257, 857, 1780, 13, 639, 307, 577, 291, 312, 4498, 3148, 257, 4308, 293, 4871, 51058], "temperature": 0.0, "avg_logprob": -0.18046587893837376, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.00831474270671606}, {"id": 360, "seek": 175590, "start": 1770.42, "end": 1776.02, "text": " Any class from overriding the equals method or any use of this API", "tokens": [51090, 2639, 1508, 490, 670, 81, 2819, 264, 6915, 3170, 420, 604, 764, 295, 341, 9362, 51370], "temperature": 0.0, "avg_logprob": -0.18046587893837376, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.00831474270671606}, {"id": 361, "seek": 175590, "start": 1776.66, "end": 1782.0600000000002, "text": " So if you go to the this private in a class method, which I know can be a bit confusing", "tokens": [51402, 407, 498, 291, 352, 281, 264, 341, 4551, 294, 257, 1508, 3170, 11, 597, 286, 458, 393, 312, 257, 857, 13181, 51672], "temperature": 0.0, "avg_logprob": -0.18046587893837376, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.00831474270671606}, {"id": 362, "seek": 178206, "start": 1782.06, "end": 1786.46, "text": " I call it a private in a class method not because it's inside the private in a class", "tokens": [50364, 286, 818, 309, 257, 4551, 294, 257, 1508, 3170, 406, 570, 309, 311, 1854, 264, 4551, 294, 257, 1508, 50584], "temperature": 0.0, "avg_logprob": -0.21045760388644236, "compression_ratio": 1.8227848101265822, "no_speech_prob": 0.014278012327849865}, {"id": 363, "seek": 178206, "start": 1786.6599999999999, "end": 1793.5, "text": " But this method which is a public method can be used to access this private in a class via", "tokens": [50594, 583, 341, 3170, 597, 307, 257, 1908, 3170, 393, 312, 1143, 281, 2105, 341, 4551, 294, 257, 1508, 5766, 50936], "temperature": 0.0, "avg_logprob": -0.21045760388644236, "compression_ratio": 1.8227848101265822, "no_speech_prob": 0.014278012327849865}, {"id": 364, "seek": 178206, "start": 1793.94, "end": 1796.74, "text": " The outer demo class. So that's what we're doing here", "tokens": [50958, 440, 10847, 10723, 1508, 13, 407, 300, 311, 437, 321, 434, 884, 510, 51098], "temperature": 0.0, "avg_logprob": -0.21045760388644236, "compression_ratio": 1.8227848101265822, "no_speech_prob": 0.014278012327849865}, {"id": 365, "seek": 178206, "start": 1796.74, "end": 1800.82, "text": " We're creating a new object of the inner class and we're calling this function call", "tokens": [51098, 492, 434, 4084, 257, 777, 2657, 295, 264, 7284, 1508, 293, 321, 434, 5141, 341, 2445, 818, 51302], "temperature": 0.0, "avg_logprob": -0.21045760388644236, "compression_ratio": 1.8227848101265822, "no_speech_prob": 0.014278012327849865}, {"id": 366, "seek": 178206, "start": 1801.4199999999998, "end": 1806.58, "text": " Display and then we have perhaps a malicious actor who's trying to", "tokens": [51332, 32229, 293, 550, 321, 362, 4317, 257, 33496, 8747, 567, 311, 1382, 281, 51590], "temperature": 0.0, "avg_logprob": -0.21045760388644236, "compression_ratio": 1.8227848101265822, "no_speech_prob": 0.014278012327849865}, {"id": 367, "seek": 178206, "start": 1807.1, "end": 1810.58, "text": " Do the same thing access that it private in a class", "tokens": [51616, 1144, 264, 912, 551, 2105, 300, 309, 4551, 294, 257, 1508, 51790], "temperature": 0.0, "avg_logprob": -0.21045760388644236, "compression_ratio": 1.8227848101265822, "no_speech_prob": 0.014278012327849865}, {"id": 368, "seek": 181058, "start": 1811.58, "end": 1816.1799999999998, "text": " Via the outer demo class and try to invoke the equals method", "tokens": [50414, 49232, 264, 10847, 10723, 1508, 293, 853, 281, 41117, 264, 6915, 3170, 50644], "temperature": 0.0, "avg_logprob": -0.19741624715376874, "compression_ratio": 1.6912442396313363, "no_speech_prob": 0.007458976935595274}, {"id": 369, "seek": 181058, "start": 1816.4199999999998, "end": 1819.9399999999998, "text": " So if I do run this code, so here's a client that use that's using it", "tokens": [50656, 407, 498, 286, 360, 1190, 341, 3089, 11, 370, 510, 311, 257, 6423, 300, 764, 300, 311, 1228, 309, 50832], "temperature": 0.0, "avg_logprob": -0.19741624715376874, "compression_ratio": 1.6912442396313363, "no_speech_prob": 0.007458976935595274}, {"id": 370, "seek": 181058, "start": 1819.9399999999998, "end": 1825.6599999999999, "text": " We've created an object of type demo a new instance of demo class and if I run this", "tokens": [50832, 492, 600, 2942, 364, 2657, 295, 2010, 10723, 257, 777, 5197, 295, 10723, 1508, 293, 498, 286, 1190, 341, 51118], "temperature": 0.0, "avg_logprob": -0.19741624715376874, "compression_ratio": 1.6912442396313363, "no_speech_prob": 0.007458976935595274}, {"id": 371, "seek": 181058, "start": 1826.58, "end": 1833.1399999999999, "text": " You'll see as expected. It's it's running the private in a class method and it's first printing", "tokens": [51164, 509, 603, 536, 382, 5176, 13, 467, 311, 309, 311, 2614, 264, 4551, 294, 257, 1508, 3170, 293, 309, 311, 700, 14699, 51492], "temperature": 0.0, "avg_logprob": -0.19741624715376874, "compression_ratio": 1.6912442396313363, "no_speech_prob": 0.007458976935595274}, {"id": 372, "seek": 181058, "start": 1834.1399999999999, "end": 1837.26, "text": " this log here and then it's also printing the", "tokens": [51542, 341, 3565, 510, 293, 550, 309, 311, 611, 14699, 264, 51698], "temperature": 0.0, "avg_logprob": -0.19741624715376874, "compression_ratio": 1.6912442396313363, "no_speech_prob": 0.007458976935595274}, {"id": 373, "seek": 181058, "start": 1838.02, "end": 1840.02, "text": " log inside", "tokens": [51736, 3565, 1854, 51836], "temperature": 0.0, "avg_logprob": -0.19741624715376874, "compression_ratio": 1.6912442396313363, "no_speech_prob": 0.007458976935595274}, {"id": 374, "seek": 184002, "start": 1840.06, "end": 1846.82, "text": " The method display which is inside. Sorry of the method display which is inside the inner class the private in a class", "tokens": [50366, 440, 3170, 4674, 597, 307, 1854, 13, 4919, 295, 264, 3170, 4674, 597, 307, 1854, 264, 7284, 1508, 264, 4551, 294, 257, 1508, 50704], "temperature": 0.0, "avg_logprob": -0.2155127659022251, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0030269287526607513}, {"id": 375, "seek": 184002, "start": 1847.34, "end": 1851.84, "text": " That's fine. That's okay. We probably expect that. However, let's say", "tokens": [50730, 663, 311, 2489, 13, 663, 311, 1392, 13, 492, 1391, 2066, 300, 13, 2908, 11, 718, 311, 584, 50955], "temperature": 0.0, "avg_logprob": -0.2155127659022251, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0030269287526607513}, {"id": 376, "seek": 184002, "start": 1852.42, "end": 1854.42, "text": " This person wants to access", "tokens": [50984, 639, 954, 2738, 281, 2105, 51084], "temperature": 0.0, "avg_logprob": -0.2155127659022251, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0030269287526607513}, {"id": 377, "seek": 184002, "start": 1855.26, "end": 1857.26, "text": " What do I do there? I?", "tokens": [51126, 708, 360, 286, 360, 456, 30, 286, 30, 51226], "temperature": 0.0, "avg_logprob": -0.2155127659022251, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0030269287526607513}, {"id": 378, "seek": 184002, "start": 1857.3, "end": 1863.22, "text": " Collapsed my function. Okay, let's say this person wants to access the equals method", "tokens": [51228, 4586, 2382, 292, 452, 2445, 13, 1033, 11, 718, 311, 584, 341, 954, 2738, 281, 2105, 264, 6915, 3170, 51524], "temperature": 0.0, "avg_logprob": -0.2155127659022251, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0030269287526607513}, {"id": 379, "seek": 184002, "start": 1863.22, "end": 1866.94, "text": " That's in the private in a class and we don't want it to be", "tokens": [51524, 663, 311, 294, 264, 4551, 294, 257, 1508, 293, 321, 500, 380, 528, 309, 281, 312, 51710], "temperature": 0.0, "avg_logprob": -0.2155127659022251, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0030269287526607513}, {"id": 380, "seek": 184002, "start": 1867.7, "end": 1869.7, "text": " accessed by anyone", "tokens": [51748, 34211, 538, 2878, 51848], "temperature": 0.0, "avg_logprob": -0.2155127659022251, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0030269287526607513}, {"id": 381, "seek": 187002, "start": 1870.02, "end": 1874.94, "text": " In that case what we can do is we can throw a new assertion error saying keep away", "tokens": [50364, 682, 300, 1389, 437, 321, 393, 360, 307, 321, 393, 3507, 257, 777, 19810, 313, 6713, 1566, 1066, 1314, 50610], "temperature": 0.0, "avg_logprob": -0.25090971658396166, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.0013666828162968159}, {"id": 382, "seek": 187002, "start": 1875.74, "end": 1880.46, "text": " And therefore if a client now tries to access the equals method", "tokens": [50650, 400, 4412, 498, 257, 6423, 586, 9898, 281, 2105, 264, 6915, 3170, 50886], "temperature": 0.0, "avg_logprob": -0.25090971658396166, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.0013666828162968159}, {"id": 383, "seek": 187002, "start": 1880.98, "end": 1883.18, "text": " By the other class it'll throw an arrow", "tokens": [50912, 3146, 264, 661, 1508, 309, 603, 3507, 364, 11610, 51022], "temperature": 0.0, "avg_logprob": -0.25090971658396166, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.0013666828162968159}, {"id": 384, "seek": 187002, "start": 1885.66, "end": 1887.1, "text": " Just like that", "tokens": [51146, 1449, 411, 300, 51218], "temperature": 0.0, "avg_logprob": -0.25090971658396166, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.0013666828162968159}, {"id": 385, "seek": 187002, "start": 1887.1, "end": 1892.78, "text": " Throw an assertion error saying keep away and that's how you be extra punctilious and careful", "tokens": [51218, 22228, 364, 19810, 313, 6713, 1566, 1066, 1314, 293, 300, 311, 577, 291, 312, 2857, 27006, 388, 851, 293, 5026, 51502], "temperature": 0.0, "avg_logprob": -0.25090971658396166, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.0013666828162968159}, {"id": 386, "seek": 187002, "start": 1893.26, "end": 1895.9, "text": " And not allow anyone to use the equals method", "tokens": [51526, 400, 406, 2089, 2878, 281, 764, 264, 6915, 3170, 51658], "temperature": 0.0, "avg_logprob": -0.25090971658396166, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.0013666828162968159}, {"id": 387, "seek": 189590, "start": 1896.9, "end": 1902.7, "text": " Especially if that someone's expected by the designer that is that is the end of item", "tokens": [50414, 8545, 498, 300, 1580, 311, 5176, 538, 264, 11795, 300, 307, 300, 307, 264, 917, 295, 3174, 50704], "temperature": 0.0, "avg_logprob": -0.1998785373776458, "compression_ratio": 1.6380090497737556, "no_speech_prob": 0.008443964645266533}, {"id": 388, "seek": 189590, "start": 1903.38, "end": 1908.02, "text": " 10 part 1 I was gonna say at the end of item 10 most certainly not", "tokens": [50738, 1266, 644, 502, 286, 390, 799, 584, 412, 264, 917, 295, 3174, 1266, 881, 3297, 406, 50970], "temperature": 0.0, "avg_logprob": -0.1998785373776458, "compression_ratio": 1.6380090497737556, "no_speech_prob": 0.008443964645266533}, {"id": 389, "seek": 189590, "start": 1908.02, "end": 1916.02, "text": " We've still got heaps to cover in fact part 2 of this item is gonna be quite long because we need to go through all the reasons", "tokens": [50970, 492, 600, 920, 658, 415, 2382, 281, 2060, 294, 1186, 644, 568, 295, 341, 3174, 307, 799, 312, 1596, 938, 570, 321, 643, 281, 352, 807, 439, 264, 4112, 51370], "temperature": 0.0, "avg_logprob": -0.1998785373776458, "compression_ratio": 1.6380090497737556, "no_speech_prob": 0.008443964645266533}, {"id": 390, "seek": 189590, "start": 1918.18, "end": 1921.8600000000001, "text": " When it is appropriate to override the equals method and that's quite interesting", "tokens": [51478, 1133, 309, 307, 6854, 281, 42321, 264, 6915, 3170, 293, 300, 311, 1596, 1880, 51662], "temperature": 0.0, "avg_logprob": -0.1998785373776458, "compression_ratio": 1.6380090497737556, "no_speech_prob": 0.008443964645266533}, {"id": 391, "seek": 192186, "start": 1922.06, "end": 1927.4799999999998, "text": " So and then in part 3 we'll we'll finish it off with kind of summarizing on how", "tokens": [50374, 407, 293, 550, 294, 644, 805, 321, 603, 321, 603, 2413, 309, 766, 365, 733, 295, 14611, 3319, 322, 577, 50645], "temperature": 0.0, "avg_logprob": -0.18085154171647697, "compression_ratio": 1.6131386861313868, "no_speech_prob": 0.01384337991476059}, {"id": 392, "seek": 192186, "start": 1928.1399999999999, "end": 1933.6599999999999, "text": " To respect and obey the general contract went over an equals method and again", "tokens": [50678, 1407, 3104, 293, 19297, 264, 2674, 4364, 1437, 670, 364, 6915, 3170, 293, 797, 50954], "temperature": 0.0, "avg_logprob": -0.18085154171647697, "compression_ratio": 1.6131386861313868, "no_speech_prob": 0.01384337991476059}, {"id": 393, "seek": 192186, "start": 1933.6599999999999, "end": 1936.58, "text": " I know it's quite long, but there's a reason that I'm doing that as I said", "tokens": [50954, 286, 458, 309, 311, 1596, 938, 11, 457, 456, 311, 257, 1778, 300, 286, 478, 884, 300, 382, 286, 848, 51100], "temperature": 0.0, "avg_logprob": -0.18085154171647697, "compression_ratio": 1.6131386861313868, "no_speech_prob": 0.01384337991476059}, {"id": 394, "seek": 192186, "start": 1936.58, "end": 1939.1, "text": " I won't the intent of these items is", "tokens": [51100, 286, 1582, 380, 264, 8446, 295, 613, 4754, 307, 51226], "temperature": 0.0, "avg_logprob": -0.18085154171647697, "compression_ratio": 1.6131386861313868, "no_speech_prob": 0.01384337991476059}, {"id": 395, "seek": 192186, "start": 1939.6999999999998, "end": 1941.6999999999998, "text": " To go as deep as possible", "tokens": [51256, 1407, 352, 382, 2452, 382, 1944, 51356], "temperature": 0.0, "avg_logprob": -0.18085154171647697, "compression_ratio": 1.6131386861313868, "no_speech_prob": 0.01384337991476059}, {"id": 396, "seek": 192186, "start": 1941.9399999999998, "end": 1943.9399999999998, "text": " Within what what I can manage", "tokens": [51368, 15996, 437, 437, 286, 393, 3067, 51468], "temperature": 0.0, "avg_logprob": -0.18085154171647697, "compression_ratio": 1.6131386861313868, "no_speech_prob": 0.01384337991476059}, {"id": 397, "seek": 192186, "start": 1944.6599999999999, "end": 1950.3799999999999, "text": " And I hope you find value in it because what's the reason what's the use of just superficially reading these things?", "tokens": [51504, 400, 286, 1454, 291, 915, 2158, 294, 309, 570, 437, 311, 264, 1778, 437, 311, 264, 764, 295, 445, 23881, 2270, 3760, 613, 721, 30, 51790], "temperature": 0.0, "avg_logprob": -0.18085154171647697, "compression_ratio": 1.6131386861313868, "no_speech_prob": 0.01384337991476059}, {"id": 398, "seek": 195038, "start": 1950.38, "end": 1955.14, "text": " If we don't really grok the concepts saying all that thank you for watching", "tokens": [50364, 759, 321, 500, 380, 534, 4634, 74, 264, 10392, 1566, 439, 300, 1309, 291, 337, 1976, 50602], "temperature": 0.0, "avg_logprob": -0.1884835720062256, "compression_ratio": 1.3189655172413792, "no_speech_prob": 0.005380329210311174}, {"id": 399, "seek": 195038, "start": 1955.14, "end": 1959.0400000000002, "text": " I hope you found value in this video. I shall see you in the next one. Cheers", "tokens": [50602, 286, 1454, 291, 1352, 2158, 294, 341, 960, 13, 286, 4393, 536, 291, 294, 264, 958, 472, 13, 13006, 50797], "temperature": 0.0, "avg_logprob": -0.1884835720062256, "compression_ratio": 1.3189655172413792, "no_speech_prob": 0.005380329210311174}], "language": "en"}