1
00:00:00,000 --> 00:00:06,120
Hey everyone, welcome to yet another episode of my video series on Joshua Bloch's effective Java

2
00:00:06,640 --> 00:00:09,120
Where I'll take the items that he has

3
00:00:09,440 --> 00:00:13,980
Enumerated in this book and expand on them and try and make sense and understand

4
00:00:14,560 --> 00:00:17,900
What advice slash programming principles?

5
00:00:18,640 --> 00:00:25,340
He's noted down in this book and hopefully of course the reason for me to record this is as I'm trying to make sense of them

6
00:00:25,340 --> 00:00:29,580
And understand them you too will learn something and gain value from it

7
00:00:30,300 --> 00:00:35,400
Apropos Java and object-oriented programming in general of course as I usually do

8
00:00:35,400 --> 00:00:40,620
I need to go through the proviso if you already watched the previous items you could just skip this part and save your time

9
00:00:41,240 --> 00:00:43,760
But without further ado, I'll get started

10
00:00:44,360 --> 00:00:50,680
Firstly, this is not a tutorial. I'm definitely not a teacher and as I've said many times already

11
00:00:51,040 --> 00:00:54,800
The more I'm learning about Java and OOP programming

12
00:00:55,280 --> 00:00:59,760
The more the more I realize how much of an expert I'm not therefore

13
00:01:00,040 --> 00:01:04,020
Please don't think of this as a tutorial where what I say is

14
00:01:04,720 --> 00:01:08,560
Gospel truth so to speak. I'm pretty sure already. I'm still in item five

15
00:01:08,560 --> 00:01:11,660
I'm pretty sure I've already made a lot of mistakes. In fact

16
00:01:11,920 --> 00:01:17,840
one person commented out a few mistakes that I've made in I think the first item so I'm really grateful for that so I

17
00:01:18,440 --> 00:01:22,800
Do request if I do make any mistakes, please point them out

18
00:01:22,800 --> 00:01:28,560
Leave them down below in the comment section. I'll pin them if there's something if it's something significant

19
00:01:29,200 --> 00:01:31,200
Because then it's not not only just for me

20
00:01:31,200 --> 00:01:39,300
But also anyone else watching these videos can can learn from the mistakes that I made think of this as the blind leading the blind

21
00:01:40,360 --> 00:01:42,360
This is more of a

22
00:01:42,680 --> 00:01:47,360
Exploratory disquisition and I'm as blind as you are perhaps even more

23
00:01:47,960 --> 00:01:50,440
It's got nothing to do with the fact that I'm wearing glasses

24
00:01:51,040 --> 00:01:54,560
It's simply the fact that I'm still very much new to Java

25
00:01:55,640 --> 00:02:00,280
And an analogy that I've been using in the previous videos in this proviso section is

26
00:02:00,680 --> 00:02:05,200
It's a lot similar to what one would do in a university tutorial setting

27
00:02:05,880 --> 00:02:10,040
Where we've got we've got the teacher, of course, then we've got the bunch bunch of students

28
00:02:10,520 --> 00:02:15,640
Working together on a certain assignment or problem statement trying to figure it out and make sense of it

29
00:02:15,760 --> 00:02:18,320
So that's why I call it a collective

30
00:02:18,880 --> 00:02:23,480
Exploratory disquisition and he has the third point as I said, I will inevitably make mistakes

31
00:02:24,440 --> 00:02:29,200
There's no way that I can get all of this right because a lot of the concepts that he is a

32
00:02:30,080 --> 00:02:34,520
Highlighted in these books. I've never ever used them in my day-to-day job

33
00:02:34,520 --> 00:02:37,800
Let's say or my day-to-day programming. So it's all quite new to me

34
00:02:38,120 --> 00:02:42,880
Some of it at least therefore again, sorry to keep being on a dead horse here

35
00:02:42,880 --> 00:02:51,360
Please do point them out and given that this is a YouTube video series. Sorry, given that this is a coding video series

36
00:02:51,360 --> 00:02:56,640
And it's on programming. It just makes sense to have all the code that I use on get up

37
00:02:56,640 --> 00:02:59,100
So for each item, I'll break them down

38
00:02:59,100 --> 00:03:02,680
I'll break the get up repository into different items and you could find not only mine

39
00:03:02,680 --> 00:03:08,120
But even just your blocks personal repository to that is published, you know in his

40
00:03:08,680 --> 00:03:12,100
Get up account, which is all the code used in the book. In fact

41
00:03:13,320 --> 00:03:17,480
Alrighty, let's get started. So this is gonna be item number five

42
00:03:17,880 --> 00:03:22,960
This was a very very interesting item. I've got to be honest the more I've learned about the

43
00:03:23,600 --> 00:03:30,000
Dependency injection pattern the more I've begun to appreciate it and see the beauty in the inversion of control concepts

44
00:03:31,000 --> 00:03:33,720
I would say Gwen Reed Martin Fowler's blogs

45
00:03:33,720 --> 00:03:37,320
He's probably the person who introduced it to the broader programming community

46
00:03:37,440 --> 00:03:44,200
But Martin Fowler has some great blog posts on in version of control and of course with dependency injection

47
00:03:45,360 --> 00:03:51,800
Normally programmers at least I normally use it with the framework with with spring or caucus another framework that we use at work

48
00:03:52,440 --> 00:03:55,560
And yeah, I've really begun to appreciate that pattern

49
00:03:56,280 --> 00:03:58,280
and item five, of course states

50
00:03:59,000 --> 00:04:04,960
Prefer dependency injection to hardwiring resources now before we get to any of the code

51
00:04:05,120 --> 00:04:08,760
Let's try and get a few just definitions across now

52
00:04:08,760 --> 00:04:14,840
Some people might not appreciate this and some people might be a bit turned off by just reading of definitions, but personally I

53
00:04:15,680 --> 00:04:16,880
have

54
00:04:16,880 --> 00:04:22,120
Great admiration and I'd say even even respect for words. I love language

55
00:04:23,000 --> 00:04:28,120
Therefore I do try and rely on definitions quite a lot because I think it's a good way to get a high-level understanding

56
00:04:28,320 --> 00:04:32,680
Before getting deeply into the code and sort of practically understanding

57
00:04:32,680 --> 00:04:36,200
It's all it always I think it's always good to first get a theoretical understanding

58
00:04:36,600 --> 00:04:42,880
Despite what some people might say where you know, it's all about the code and the practical understanding in any case, sorry

59
00:04:42,880 --> 00:04:44,880
I'm way too equations

60
00:04:44,960 --> 00:04:49,760
So of course two key words is dependency injection

61
00:04:49,760 --> 00:04:53,760
Well, two key phrases would be dependency injection and hardwiring resources

62
00:04:53,760 --> 00:05:00,040
So firstly before we look at any code, let's try and understand what what hardwiring resources is

63
00:05:01,840 --> 00:05:05,320
I couldn't find a really good definition online

64
00:05:05,320 --> 00:05:08,120
I couldn't find one that was succinct and

65
00:05:08,760 --> 00:05:12,240
Conveyed and sort of encapsulated. That's not a programming pun

66
00:05:12,880 --> 00:05:19,800
Encapsulated all of what this term meant. So I ended up writing my own and here's what I wrote down

67
00:05:20,800 --> 00:05:24,720
Classes have dependencies, obviously. So if you have a class, let's say called

68
00:05:25,720 --> 00:05:28,760
Person or a better class a class called employee

69
00:05:29,040 --> 00:05:34,880
That class may have a dependency called class department because that employee might be a class of

70
00:05:35,400 --> 00:05:43,240
That employee might be a part of a department. So in that case the employee class is dependent on the department class

71
00:05:44,240 --> 00:05:50,880
Formally the client class dependent class depends on the service class for different utilities

72
00:05:50,880 --> 00:05:55,960
It doesn't have to always be utilities, but in this case it makes more sense to think of it as a utility class and

73
00:05:56,680 --> 00:06:00,240
Having dependencies can create tied coupling. That is true

74
00:06:00,600 --> 00:06:06,400
Which should be avoided in software engineering, of course fundamental principles in OOP programming

75
00:06:06,400 --> 00:06:10,840
It can create inflexible. Sorry, I shouldn't say OOP programming

76
00:06:10,840 --> 00:06:16,800
It's software engineering in general, which is why we have patterns such as the microservice architecture because we won't

77
00:06:17,280 --> 00:06:20,400
Services itself to be the couple not just at an OOP level

78
00:06:20,920 --> 00:06:22,200
Getting back to this

79
00:06:22,200 --> 00:06:30,960
It can create inflexible and untestable code if resources are hardwired by instantiating a service class and creating objects within a class

80
00:06:32,200 --> 00:06:35,920
Ergo, we should prefer dependency injection design pattern

81
00:06:36,440 --> 00:06:39,440
Correct. So this is the bit that we're gonna

82
00:06:40,280 --> 00:06:42,280
Elucidate and expand on the most

83
00:06:42,760 --> 00:06:47,920
the idea of why oh, sorry why it's not a good idea to

84
00:06:49,440 --> 00:06:53,080
instantiate and and hardware resources in a client class

85
00:06:53,760 --> 00:06:56,520
If it's depending on some other utility class

86
00:06:57,240 --> 00:07:02,120
so now let's take a look at what dependency injection is because that is the

87
00:07:02,520 --> 00:07:06,280
The solution that we're prescribed to this problem we faced with tied coupling

88
00:07:06,800 --> 00:07:12,800
So I found this I found two definitions one is on geeks for geeks by

89
00:07:13,520 --> 00:07:19,840
Gherpreet Sashdeiva. Here's his I'm assuming Gherpreet. Yeah, Gherpreet is probably a bloke's name. I'm assuming

90
00:07:21,200 --> 00:07:23,800
Not I'm not I'm assuming here's his

91
00:07:24,560 --> 00:07:25,880
Definition of what?

92
00:07:25,880 --> 00:07:33,240
Dependency dependency injection is just to make it easy. I'm gonna call it DI because sometimes dependency injection

93
00:07:33,240 --> 00:07:37,320
It's kind of like a tongue twister. So I'll just call it DI

94
00:07:38,480 --> 00:07:44,520
DI is a design pattern in which one object supplies the dependencies of another object, correct?

95
00:07:44,520 --> 00:07:49,000
It removes the tied coupling of dependencies. So the problem we had before with hardwiring

96
00:07:49,840 --> 00:07:53,800
From the programming code so that it is easy to manage and test the application

97
00:07:54,520 --> 00:08:00,640
DI is also classified as a form of the broader technique of inversion of control, which is something I touched on

98
00:08:00,640 --> 00:08:02,640
So the way I think of it is

99
00:08:03,520 --> 00:08:05,520
Inversion of control is a broader

100
00:08:05,920 --> 00:08:09,120
Principle more of a even like a paradigm in programming

101
00:08:09,120 --> 00:08:14,240
I wouldn't probably put it at that level, but it's somewhere between a pattern and a paradigm

102
00:08:14,240 --> 00:08:18,540
Let's think of it that way which again as I said Martin Fowler and I believe

103
00:08:19,140 --> 00:08:25,420
Uncle Bob, so I think those two people invented it or popularized it introduced and

104
00:08:26,300 --> 00:08:29,260
dependency injection or DI is more of a

105
00:08:29,740 --> 00:08:34,220
Implementation of what inversion of control is so inversion of control is more for a practice a

106
00:08:34,900 --> 00:08:41,460
Principle that one can follow whereas DI is that most solid implementation in the form of a engineering pattern

107
00:08:42,140 --> 00:08:46,500
The responsibility of providing dependencies is delegated to the external code, correct?

108
00:08:47,460 --> 00:08:52,040
The interjecting code constructs the services and invokes the client to inject them

109
00:08:52,380 --> 00:08:56,500
The client code clothe the client code need not worry about the

110
00:08:57,020 --> 00:09:00,820
Interjecting code and how to build the services or in some cases

111
00:09:01,500 --> 00:09:05,060
Even what actuals even what the actual service is being used?

112
00:09:06,420 --> 00:09:13,060
Let me read that sorry the client code need not worry about the interjecting interjecting code and how to build the services

113
00:09:13,060 --> 00:09:20,140
Oh, in some cases even what actual service is being used. Oh gotcha. So because it's a reference that we are passing

114
00:09:20,780 --> 00:09:24,500
Through a parameter in some kind of method in some cases

115
00:09:24,500 --> 00:09:29,260
We don't even have to worry about what the actual service that the client is using

116
00:09:30,300 --> 00:09:35,100
So of course reading this definition one thing that should remind you of is

117
00:09:36,180 --> 00:09:40,420
frameworks a very popular one or probably the most popular one is spring and

118
00:09:40,860 --> 00:09:45,660
You know the auto white annotation which helps us to inject dependencies into our

119
00:09:46,620 --> 00:09:48,420
components and

120
00:09:48,420 --> 00:09:54,100
That's essentially the framework taking care of that. So there is this bit here where it says

121
00:09:57,860 --> 00:09:59,860
That line right there

122
00:10:00,700 --> 00:10:05,260
The responsibility of providing dependencies is delegated to external code

123
00:10:05,260 --> 00:10:09,140
So this is really what inversion of control is we are inverting the control

124
00:10:09,140 --> 00:10:15,420
They're giving that control to an external party or an external framework in this case and that's what's going on here

125
00:10:16,300 --> 00:10:18,300
so the definition by

126
00:10:19,100 --> 00:10:21,220
Oracle docs and would be

127
00:10:21,820 --> 00:10:26,620
Di enables you to turn regular Java classes into managed objects

128
00:10:27,180 --> 00:10:35,340
Again in inversion of control this management is done by the framework and and to interject them into any into any other

129
00:10:35,660 --> 00:10:41,500
Managed object using Di your code can declare dependencies on any managed object

130
00:10:43,780 --> 00:10:49,460
So if you really think about it what DI allows is in many ways is to follow that

131
00:10:49,500 --> 00:10:51,780
good old OOP principle to prefer

132
00:10:52,340 --> 00:10:56,420
composition over inheritance because you will see in the example soon

133
00:10:57,660 --> 00:10:59,660
the dependent class is

134
00:11:00,060 --> 00:11:02,780
composed from the class that depends on and

135
00:11:03,460 --> 00:11:05,740
Di allows this composition to take place

136
00:11:05,820 --> 00:11:12,820
So I've made a mistake here. I should type effective Java example because these are the examples. We're gonna take a look at

137
00:11:13,940 --> 00:11:16,620
Alrighty firstly, let's take a look at how not to do this

138
00:11:17,020 --> 00:11:22,940
How it would be done if we didn't use the DI pattern by hard-wiring resources

139
00:11:23,620 --> 00:11:25,620
the first approach that

140
00:11:26,060 --> 00:11:28,340
Joshua block has given in the book is

141
00:11:30,180 --> 00:11:32,180
By using

142
00:11:32,300 --> 00:11:36,540
Static utility classes or by using static utility methods

143
00:11:36,540 --> 00:11:43,380
So firstly in the example, we're gonna use there's a class called spell checker which depends on a class called lexicon and

144
00:11:43,820 --> 00:11:49,180
That example is what we're gonna use across and eventually we're gonna use DI onto that just to show how it works

145
00:11:49,180 --> 00:11:54,460
And and why it's a better option. So it's quite straightforward despite not being the proper way to do this

146
00:11:54,460 --> 00:12:01,000
It's sort of an anti pattern. We're doing a clear hard-wiring here on line number nine. We're creating this immutable object

147
00:12:01,600 --> 00:12:07,560
The spell checker class is dependent on the lexicon class and we're storing it in a variable

148
00:12:08,200 --> 00:12:15,360
Coordictionary and that's what we're using throughout this class and we're creating this immutable object using private static final despite it being immutable

149
00:12:15,360 --> 00:12:22,400
It's still tightly coupled because it's hard-wired onto the class itself every time the spell checker class is instantiated

150
00:12:22,400 --> 00:12:28,320
Another example Joshua block highlights is using a singleton another way people do this. It's quite similar

151
00:12:29,000 --> 00:12:35,120
Nevertheless, we're still hard-wiring a resource. I realize I've made a mistake here. I should get rid of the static keyword

152
00:12:35,200 --> 00:12:38,600
That's where that instance of this class is given now

153
00:12:38,600 --> 00:12:45,200
Yes, there'll only be one object of the spell checker class, but the hard-wiring has still taken place, which is why he states

154
00:12:45,920 --> 00:12:53,160
neither of these approaches is satisfactory because they assume that there is only one dictionary worth using

155
00:12:53,360 --> 00:12:55,360
which is the one that be hard-wire

156
00:12:55,800 --> 00:12:57,840
here and

157
00:12:57,840 --> 00:13:05,960
Here in practice each language has its own dictionary and special dictionaries are used for special vocabularies

158
00:13:06,800 --> 00:13:11,520
Also, it may be desirable to use a special dictionary for testing. Correct

159
00:13:11,520 --> 00:13:16,520
I think I might get to the testing bit a bit later, but I found a really good article

160
00:13:17,120 --> 00:13:21,200
Or like a blog post by spring as to why the DI pattern

161
00:13:21,720 --> 00:13:25,160
Makes testing much more easier in any case getting back to this

162
00:13:26,040 --> 00:13:31,880
It is visual thinking to assume that a single dictionary will surface for all time. So this

163
00:13:32,400 --> 00:13:38,440
Tide coupling again that we touched on makes all these assumptions which in the real world probably

164
00:13:38,960 --> 00:13:47,080
Won't stand static utility classes and singletons are inappropriate for classes whose behavior is parameterized by an underlying resource

165
00:13:47,720 --> 00:13:49,720
classes like the spell checker

166
00:13:50,200 --> 00:13:56,040
What is required is the ability to support multiple instances of the class in our examples spell checker

167
00:13:56,360 --> 00:14:03,680
Each of which uses the resource desired by the client in our example the the dictionary. So that's the resource a

168
00:14:04,720 --> 00:14:10,360
Simple pattern that satisfies this requirement is to pass the resource into the construct in

169
00:14:10,520 --> 00:14:16,920
constructor when a new instance when creating a new instance and that is the solution that we shall

170
00:14:17,640 --> 00:14:19,640
You know do a deep dive into

171
00:14:20,440 --> 00:14:25,720
That's happening right here in line number 16 and this here is in fact dependency injection

172
00:14:25,960 --> 00:14:28,920
So we are passing that into the constructor of this class

173
00:14:31,120 --> 00:14:34,280
This is one form of dependency injection

174
00:14:34,680 --> 00:14:40,920
The dictionary is a dependency of the spell checker and is injected into the spell checker when it is created

175
00:14:40,920 --> 00:14:46,400
So every single time a client's gonna create an instance of the spell checker class the dependency is injected

176
00:14:46,400 --> 00:14:48,400
we expect the client in fact to

177
00:14:48,960 --> 00:14:52,160
Inject that dependency or pass it when using this class

178
00:14:52,720 --> 00:14:56,640
So before we look deeply into the spell checker example in effective Java

179
00:14:56,960 --> 00:15:01,760
Let's take a quick look at this example. I found line a courtesy of by all done

180
00:15:02,320 --> 00:15:06,960
I can never pronounce that name. I know every Java programmer uses this blog by all done

181
00:15:07,760 --> 00:15:10,880
For work, but I know that most of us can't pronounce it

182
00:15:11,280 --> 00:15:13,280
so this example here is

183
00:15:13,520 --> 00:15:16,160
How one would normally use di because a framework

184
00:15:16,640 --> 00:15:17,840
Is it for us?

185
00:15:17,840 --> 00:15:19,840
So this is an example from spring, of course

186
00:15:20,160 --> 00:15:25,600
And what we have here is we have a class called foo foo matter and you've annotated it

187
00:15:26,160 --> 00:15:28,960
with the component annotation and what this

188
00:15:29,920 --> 00:15:38,320
Tells the compiler or the framework is to put this into the dependency pool or the object graph. I believe and and then the it's in the

189
00:15:38,880 --> 00:15:45,520
Context of the application in the application container and all these dependencies will be created and they will exist

190
00:15:46,080 --> 00:15:52,160
Within a given scope, of course the scope can change. I believe there's the application context as the request context

191
00:15:52,400 --> 00:15:54,880
So depending on what the scope that we want

192
00:15:55,360 --> 00:15:58,960
We can define how this component can live and exist

193
00:15:59,440 --> 00:16:04,320
And then this foo service class is a dependent is dependent on foo foo matter

194
00:16:04,640 --> 00:16:08,240
And all we're doing here is we're injecting the dependency

195
00:16:08,560 --> 00:16:12,400
Using the auto watt annotation and this framework takes care of all of that

196
00:16:12,720 --> 00:16:16,000
So spring really injects foo formatter into the foo service class

197
00:16:16,400 --> 00:16:19,440
Now this is mostly how on our day-to-day view would use di

198
00:16:19,920 --> 00:16:25,040
But of course, we're not here to learn about spring. We'll he'll learn about the dependence injection pattern

199
00:16:25,840 --> 00:16:27,360
at least how it's

200
00:16:27,360 --> 00:16:29,120
defined in this item

201
00:16:29,120 --> 00:16:32,560
In comparison or in contrast to hardware and resources

202
00:16:33,280 --> 00:16:39,040
So here's the example we have. We have simply defined a private final variable of lexicon type collisionary

203
00:16:39,120 --> 00:16:43,840
There's no obviously instantiation taking place. So there's no object creation taking place

204
00:16:44,400 --> 00:16:46,400
Therefore, there's no hard wiring

205
00:16:47,120 --> 00:16:49,920
And then we have the constructor where we pass the dependency

206
00:16:50,000 --> 00:16:53,440
So we pass the reference the the dependent object of the reference

207
00:16:54,160 --> 00:16:59,200
as the client's creating an object from the spell checker class and then

208
00:16:59,840 --> 00:17:04,880
Within the constructor, we set that into the private final variable within the class

209
00:17:05,200 --> 00:17:08,640
So in that way, we expect the client to provide us with the implementation

210
00:17:08,720 --> 00:17:11,680
We don't do the implementation and over here just to be safe

211
00:17:12,160 --> 00:17:15,440
Just your block has used objects dot required on now

212
00:17:15,520 --> 00:17:19,920
So what that tells us is that we can't pass a null value into this if if we do pass

213
00:17:20,480 --> 00:17:25,520
Anything that's null it's going to throw another point of exception and that's a extract check that we

214
00:17:26,400 --> 00:17:32,160
Pass that we have in this constructor. So then when the client wants to use this spell checker class

215
00:17:32,240 --> 00:17:37,440
It'll look something like this. Let me quickly demonstrate that. So if I'm going to create an object of spell checker

216
00:17:37,520 --> 00:17:38,880
I don't know why

217
00:17:38,880 --> 00:17:40,880
IntelliJ keeps doing that. It's kind of annoying

218
00:17:41,920 --> 00:17:43,920
All I got to do is this

219
00:17:44,400 --> 00:17:46,400
new oops

220
00:17:50,480 --> 00:17:55,120
And then I and here I'm passing the implementation where I'm creating a new lexicon class

221
00:17:56,480 --> 00:18:00,880
So that's what we're passing here on into line number 16 in the constructor

222
00:18:01,840 --> 00:18:05,520
And that's it. It's as simple as that. That is what dependence injection is

223
00:18:06,080 --> 00:18:11,840
So we expect the client to do the implementation without doing any hard wiring and the great thing here is now

224
00:18:12,160 --> 00:18:17,280
This gives the client the flexibility to pass any type of lexicon. You know, it could be

225
00:18:18,080 --> 00:18:22,400
Dictionary two dictionary three doesn't really matter over here. I'm just creating it on the go

226
00:18:22,800 --> 00:18:24,800
But or on the fly. Sorry

227
00:18:25,120 --> 00:18:28,640
But it could be a different type. It could be a sub type of lexicon

228
00:18:28,640 --> 00:18:31,200
There are many things that we could pass into this constructor

229
00:18:31,760 --> 00:18:39,120
And that creates loosely coupled code. So we continue while our spell checker example had only a single resource to dictionary

230
00:18:39,680 --> 00:18:44,880
dependency injection works with an arbitrary number of resources and arbitrary dependency graphs

231
00:18:45,520 --> 00:18:50,320
It preserves immutability, which is because one one object exists in the dependency graph

232
00:18:50,720 --> 00:18:57,200
So multiple clients can share dependent objects exactly assuming the client's desire the same underlying resources

233
00:18:57,840 --> 00:19:03,120
Dependence injection is equally applicable to constructors static factories and builders

234
00:19:03,280 --> 00:19:06,080
Of course, because all those things are just methods which can pass

235
00:19:06,880 --> 00:19:09,440
Values into so just saw that idea of

236
00:19:10,240 --> 00:19:15,440
Or the what he mentions here that in this example, there's only a single resource being used

237
00:19:16,240 --> 00:19:18,800
For an example like this in in real life

238
00:19:18,800 --> 00:19:24,240
This is quite rare because one class or one object generally will be dependent on many other objects

239
00:19:24,640 --> 00:19:25,600
In a case like that

240
00:19:25,600 --> 00:19:32,320
It's much easier using a framework because then all you got to do is use auto wired or inject or or any other annotation

241
00:19:32,320 --> 00:19:34,320
depending on the framework and

242
00:19:34,320 --> 00:19:36,320
Let the framework take care of it by

243
00:19:36,480 --> 00:19:43,440
Inversion of control, let's say and then we give an example of how the di pattern has been used in the java utils library

244
00:19:44,400 --> 00:19:49,280
Uh, in fact in it's it's used the example. He's given it's for functional programming

245
00:19:50,000 --> 00:19:54,880
He says a useful variant of the pattern is to pass a resource factory to the constructor

246
00:19:55,680 --> 00:20:00,160
A factory is an object that can be called repeatedly to create instances of a type

247
00:20:00,240 --> 00:20:06,480
We shall see soon a good example of it such factories embody the factory method pattern before we continue

248
00:20:06,560 --> 00:20:12,960
Let's quickly get a quick definition of what the factory method pattern is probably one of the most popular patterns in oop

249
00:20:13,760 --> 00:20:15,760
It is design patterns in oop

250
00:20:15,760 --> 00:20:20,960
Factory method is a creational design pattern that provides an interface for creating objects in a super class

251
00:20:21,280 --> 00:20:26,960
But allows subclasses to all to the type of objects that will be created. This is from refactoring guru

252
00:20:27,200 --> 00:20:30,080
So i'm not going to go go deeply into what the factory method pattern is

253
00:20:30,080 --> 00:20:35,440
But essentially it's a pattern that's used when creating objects and it sort of makes sense to use di or a

254
00:20:35,680 --> 00:20:40,480
variant of di in the factory method pattern because what we're really doing here is creating objects

255
00:20:40,720 --> 00:20:45,200
So the example joshua bloke has used is the supply interface that was introduced in java 8

256
00:20:45,680 --> 00:20:50,480
To implement functional programming. It's a part of the java utils function package

257
00:20:51,280 --> 00:20:53,840
And what this really allows us to create objects

258
00:20:54,640 --> 00:20:58,240
In a functional way or in a functional programming paradigm

259
00:20:58,880 --> 00:21:03,920
What we what a client can do is pass in a factory, which is this supplier

260
00:21:05,680 --> 00:21:07,920
To create a subtype of the specified

261
00:21:08,640 --> 00:21:10,640
type via the generic because

262
00:21:10,960 --> 00:21:15,680
We if you go to the example in fact, should I okay? So a really good example

263
00:21:15,680 --> 00:21:17,360
I found is

264
00:21:17,360 --> 00:21:19,360
on in this article by

265
00:21:19,440 --> 00:21:21,440
Who's written this?

266
00:21:25,920 --> 00:21:30,640
Someone called the cell 23. Okay. I haven't got a proper name. It's just a pseudonym

267
00:21:31,280 --> 00:21:35,920
Anyway, this example here was is really good. It explains what the supply interface does

268
00:21:36,880 --> 00:21:38,400
so

269
00:21:38,400 --> 00:21:44,640
What it allows is it uses a wildcard. So it uses something called bounded wildcard type

270
00:21:44,880 --> 00:21:48,560
In fact, before I get to explaining it, I mean, let me quickly read this paragraph

271
00:21:49,360 --> 00:21:51,360
by joshua bloke himself. So

272
00:21:51,360 --> 00:21:53,360
methods that take a supplier

273
00:21:53,760 --> 00:21:55,760
So that would be this method here

274
00:21:56,080 --> 00:22:03,440
The the the create method. I'll read that again methods that take a supplier or an input should typically constrain the factory's type parameter

275
00:22:03,920 --> 00:22:09,600
Using a bounded wildcard type and that's what we're doing here the bounded wildcard type

276
00:22:10,080 --> 00:22:12,080
what this really means is this

277
00:22:12,320 --> 00:22:14,320
generic type we are passing into this

278
00:22:14,960 --> 00:22:15,920
method

279
00:22:15,920 --> 00:22:19,680
Into the supplier it should be a subtype of tile

280
00:22:20,240 --> 00:22:26,320
And that's why it's called so the the upper bound of that is tile and it's that's why it's called bounded wildcard type

281
00:22:26,400 --> 00:22:32,800
So generally the highest upper bound of something would be object because everything is a subtype of object in java

282
00:22:33,200 --> 00:22:34,400
but in this case

283
00:22:34,400 --> 00:22:39,520
And if any type that we pass here should should extend or be a subtype of tile

284
00:22:39,840 --> 00:22:43,680
So it's really constrained as joshua bloke has delineated on the book

285
00:22:44,320 --> 00:22:51,440
Using this bounded wildcard type to allow the client to pass in a factory that creates any subtype of a specified type

286
00:22:51,760 --> 00:22:58,400
Simply what the tile factory is is an object that can be called repeatedly to create instances of type tile

287
00:22:58,800 --> 00:23:04,560
And then another example, which I was showing here this block post by this random person on geeks for geeks

288
00:23:05,200 --> 00:23:09,200
Is much clearer than the one in fact joshua bloke has given in the book

289
00:23:09,840 --> 00:23:14,560
So at least to explain what the supplier interface does so over here

290
00:23:14,640 --> 00:23:17,920
We have a supplier and we're saying its type is double

291
00:23:18,480 --> 00:23:21,200
And we have this right random value variable that we're creating

292
00:23:21,840 --> 00:23:27,040
And then simply what this does is it it creates an object every every time it's called and then

293
00:23:27,920 --> 00:23:29,920
The only thing the supplier interface

294
00:23:30,240 --> 00:23:35,600
Contains is one method called get which allows us to get the object that we create using

295
00:23:36,400 --> 00:23:42,320
Yeah, of course using using the cat method. So yeah, the point that he's trying to make in the book is that this supplier interface

296
00:23:43,040 --> 00:23:46,240
Is a variant of the dependence injection

297
00:23:46,960 --> 00:23:51,040
pattern being used in fact in a factory method pattern

298
00:23:51,120 --> 00:23:59,440
And then he continues although dependence injection greatly improves flexibility and testability

299
00:23:59,600 --> 00:24:06,000
So that now I want to get to this article on spring. I would leave a link to this down below in the description

300
00:24:06,400 --> 00:24:09,360
It's a great article. I highly recommend you reading it. Um

301
00:24:10,560 --> 00:24:17,760
You will see the value of using di especially when it comes to testing now. I've personally had the experience of

302
00:24:18,640 --> 00:24:20,640
appreciating

303
00:24:21,280 --> 00:24:25,360
Di especially in the context of things like hyphenate using ORM tools

304
00:24:26,000 --> 00:24:29,440
That'll make testing much easier with j unit in java. So

305
00:24:30,320 --> 00:24:34,480
Therefore, I highly recommend you read this article. It's it's well worth it worth a read

306
00:24:37,920 --> 00:24:40,720
So I'll read that again because I keep interrupting myself

307
00:24:42,080 --> 00:24:46,000
Although dependence injection greatly improves flexibility and testability

308
00:24:46,400 --> 00:24:50,640
It can clutter up large projects which typically contains thousands of dependencies

309
00:24:51,120 --> 00:24:57,040
This clutter can be all but eliminated by using a dependency injection framework such as dagger

310
00:24:59,120 --> 00:25:04,240
Goose juice GUIC never heard of it and of course spring. So that's kind of what I mentioned before

311
00:25:04,640 --> 00:25:10,240
Over here. There's only one dependency, but generally in large projects. That's not the case. There are many dependencies

312
00:25:10,720 --> 00:25:12,880
In that case, it just makes sense to use a framework

313
00:25:14,320 --> 00:25:16,880
And then we finished off by just your blog saying

314
00:25:16,880 --> 00:25:24,640
In summary, do not use a singleton or static utility class to implement a class that depends on one or more

315
00:25:25,040 --> 00:25:27,040
underlying resources that would be hardwiring

316
00:25:27,840 --> 00:25:30,480
Whose behavior affects that of the class

317
00:25:31,200 --> 00:25:36,640
And do not have the class create these resources directly as we saw in the anti pattern examples

318
00:25:37,360 --> 00:25:39,360
instead pass the resources

319
00:25:40,160 --> 00:25:42,160
like that

320
00:25:43,120 --> 00:25:47,760
Or factories to create them into the constructor or static factory or builder

321
00:25:48,480 --> 00:25:53,680
This practice known as dependence injection will greatly enhance the flexibility

322
00:25:54,400 --> 00:25:59,120
Reusability and testability of the class. That's it. It's quite a simple item

323
00:25:59,440 --> 00:26:04,880
but it's it's ubiquitous this pattern is ubiquitous in Java programming and

324
00:26:05,600 --> 00:26:08,800
I think especially using it via framework

325
00:26:09,360 --> 00:26:12,960
As a client we would be clients in that case. We will start seeing its value

326
00:26:13,520 --> 00:26:18,560
Therefore, it's something that's worth diving deep into and trying to understand

327
00:26:19,760 --> 00:26:23,840
That's it. Thanks. That's watching. I hope you found value in the video and enjoyed that

328
00:26:24,480 --> 00:26:29,440
And really I do hope that I'm getting a bit better at making these videos because sometimes as you can clearly see

329
00:26:29,760 --> 00:26:31,600
I struggle one to

330
00:26:31,600 --> 00:26:36,480
Code live but also to to articulate some of these concepts in my own words

331
00:26:36,960 --> 00:26:41,680
But hey, it's a process. It's it's it's it's a journey that counts to use a terrible cliche

332
00:26:42,480 --> 00:26:44,480
Thanks for watching. Cheers

