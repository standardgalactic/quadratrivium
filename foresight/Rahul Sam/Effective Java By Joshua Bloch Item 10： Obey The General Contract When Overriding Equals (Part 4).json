{"text": " Hey everyone, welcome to part 4, the final part of item 10 in Joshua Block's Effective Java. Item 10, as if you've been folding along in the previous parts, is obey the general contract when overriding equals. And I'm very excited, and so is the dog barking outside when I decided to record a video. But I'm very excited because finally, man, this was a really long item. It's taken me a whole month to get across this item, also because I've been procrastinating. In any case, this is really good because all the stuff that we've learned in this item, what to do, what not to do, we're going to put it all together in this final item and create a high-quality equals method, or as Joshua Block would say, it's the recipe for a high-quality equals method. So without further ado, let's get started. There are a few points that he's laid down on what to do when it comes to designing equals methods. The first one is quite straightforward. It is to use the double equals operator to check if the argument is a reference to an object. So with the argument or whatever we are passing onto the equals method, if we use a double equals operator, we can confirm if it's a memory reference. So if you're passing the same object, let's say, then obviously it's going to return true. As you can see in this really quite straightforward example, we have two strings and keep in mind objects of string, of string class, are immutable. And in this case, the first if condition will return true because both this new string, I'm sorry, as I was staring into the code there, I realized I explained that wrongly. Firstly, the caveat is this is a anti-pattern. You should never declare strings like this because the new keyword creates a new object in memory. That's not required because as I said, string is immutable. So here, when we compare string one to string two using the equals operator, this will in fact say that they're not equal. So this will say they're not in the same memory location. But if you use the equals keyword, it's going to say they're in, sorry, it's going to say that they have the same content or that there's logical equality as we've discussed throughout this item. So but when it comes to designing our own equals method, the reason that we should first check using the equals operator, if it's referring to the same object is because if it is, we just save time, we save computation time instantly, we can return true or false. Not false, but we could certainly return true if it is equal to the, if the memory reference is equal using the double equals operator. And Joshua Block states, yeah, so if so returns true, this is just a performance optimization, but one that is worth doing if the comparison is potentially expensive. So if it's not equal, there may be a lot more other checks we need to do in order to have a good quality equals method, but if it's the same memory reference, just return true. I'm sorry. I know I kind of exhausted that point, but it's important to understand why we do that check initially. The second one is to check if the, if it's an instance of the correct type. And firstly, if it's not straight away return false, because if they're going to be two different types, then there's no logical equality to start with, which is why Joshua Block states in the second part of putting together this recipe, use the instance of operator to check if the argument has the correct type. So what does that mean? What that means is before I read out what he stated, in fact, maybe I should first read out. No, no, no, I'll show this example. And then before we get to the Java collections framework set example, I'll read out what he stated. So we've defined a type, we've defined my interface and we have a class that implements my interface. So now this class, my class is of type, my interface. And then in the equals method, the first thing we are checking is we're first checking, yeah, we're doing the reference equality, so the memory reference equality, which is what we discussed in the first part here, or the first section, let's say. And if it is straight away return true, no need to execute the rest of this code. But if it's not an instance of my interface. So whatever object we pass, let me just see if this is that's zoom in a little bit. There we go. Whatever object that we pass into the equals method, if it's not an instance of that broader class or of a type, sorry, of that broader class, then return false. So in that sense, we save time and only if it is, we get on with the rest of the equals method to check if there's logical equality. And that's why Joshua Block states typically the correct type is the class in which the method occurs. But if there's an interface like you've seen here, you can implement it. And that's why he says use an interface if the class implements an interface that refines the equals contract to permit comparisons across classes that implement the interface. So what we're checking here in this equals method is not if the object be pass is an instance of my class rather we're using the interface as a type, as you can see here. So in that way, this equals method theoretically can be used across other classes, or at least this part of the equals method can be used across other classes that implement the mind to face type. And as an example, he's used a the collections framework, the collections interface or the collection interface, such as set list map and map entry have this property. So we have this interface that extends the collection generic interface with this is a generic parameter or a generic type. And what that does is when we have my set, when we define a new set that implements this set interface that we've declared here, oops, I will declare here. In the equals method, as you saw from the previous example, it's the same thing that checking if it's an instance of that set interface type. And only if so, we get to the rest of the equals method, if not, we straight away return faults. And then the third section of this is, as you've seen in the myriad equals methods that we've used throughout this item is to cast the argument to the correct type. So just your block states cast argument to the correct type, because this cast was preceded by an interface of test, it is guaranteed to succeed. So we're passing in the equals method, when we do this check here, sorry, when we do the check here, this ensures that we can do this cast safely without something like a class cast exception error, because we are checking if it's of the same type, or at least if this object is of instance of string. And in this case, in fact, because it's not an instance of string, it will not do the casting, it'll move on to do something else. So if we pass some other object apart, other than let's say what we have here, or actually sorry, in this case, because we've declared this to be an object is this will go through I apologize, I realized that the type of object is still sorry, the type of OBJ is still off type object, which is an instance of string, which is a super type to the string class. So it'll do the casting here safely. That's what I was trying to say, that was a bad view of explaining it, but you get the point because we've done this test here, the casting should work fine. Okay, now we get to the fourth section, the final part of this recipe. And this really is most of what part four in this video series is about, because it's really the biggest part when it comes to designing a good high quality equals method. And that is that for each significant field in the class, check if that field of the argument matches the corresponding field of this object. Now before we get to the definitions defined by man, this dog really is annoying me. I apologize, I tried to reduce background noise when editing the video, but it is quite distracting. Anyway, getting back to this, getting back to this. So before I read the kind of formal definition in the book, let's quickly take a look at a demo that I put together. So what we have here, we have here a, I'm quite distracted today, I apologize, it's like a lot going on despite me living in a very quiet neighborhood. So what we have here is a class that I've called class person and it's got a private field string, a private field called string and of type int. So keep in mind that's a primitive type. Then we also have the equals method and then you'll first see, so in the equals method, as we discussed in the previous sections, we're doing first the memory reference check and then we're doing the instance of check that gets us across many things. It first tells us that here that these two are in fact two different objects. If it returns false and here it says, despite them being two different objects or having two different memory locations, they are of the same type. That's good. Now we get to the comparison and here really what this means is, as you can see, so after doing the casting, so the object that we get, we cast it to of type person, each significant field and that is, that really is something we need to think of in terms of logic, which is why initially in this item, we discussed concepts such as logical equality and equivalence relations because this call here, each significant field or each field that's significant is compared. That's a call that we as the designer of the equals method has to make. So obviously when we're comparing, let's say two people or two persons in this case, we've made the call that the name and the age are required for logical equality, which is why, if you look at line number 20, we're checking to see if both name and both age are equal and only if it's equal do we pass through and you probably can see here also, when it comes to age, I'm using a double equals operator, not the equals keyword because it's a primitive type. It's not an object. So accordingly, Joshua Block states, if the type in step two, which is the previous one we discussed, that is, yeah, the instance of check, if the type in step two is an interface, you must access the arguments fields via interface methods. If the type is a class, you may be able to access the fields directly depending on their accessibility. And then he says, for primitive fields, whose type is not float or double and we'll get into why that's the case, use the double equals operator for comparisons, which is what I've done here. As you can see, I already made that point. I apologize if I didn't too kind of over repeat points, but I think it's important, you know, repetition is the key to truly grogging concept. And we continue, for object reference fields, call the equals method recursively. For float fields, use the static float.compare method. And for double fields, use the double.compare method. So why is that? Why do we have to, why is there an exception for float or double fields in this case? The reason is because of auto boxing. However, before we get to that part, let's first look at a quick example of what all of this is. So here, we have a class called bank account, and we have three fields, three significant fields, keep in mind. We have the account number, which is a string. We have balance, which is of type double. And then we have a Boolean value called is active. So again, we're doing the checks here and equals method. We're doing the casting in line number 17, should I zoom in a bit, line number 17. And then when comparing the Boolean value because it's a primitive type, we're doing the equals operator. We're saying, if it's not equals, return false. And BA is, by the way, the other object that we've got here after the casting. And then in the account number, we're using the normal equals method that is in the object superclass. And that's fine. But here, as we've been advised by Joshua Block, we're using the double.compare static method instead of using the equals method, because, well, by the way, what this does is it returns a true or false. Sorry, I should put the proviso that it returns a true or false essentially or for all intents and purposes in our equals method, because it actually doesn't. It returns an int value if you look at the method, what it checks for if it's greater or less than. And accordingly, it'll return something. However, if it's not equal to zero, that means there's a difference. Therefore, it'll return false. But if it's as in the function of the return false, but if it's equal to zero, that means it's the same value or it's the same double value. Therefore, it'll just keep going and return true in the equals method. So what it looks for is a difference in the two parameters or the two values you pass to the double.compare function. But then to understand a bit more why it's better using this double.compare static method instead of using the double equals operator or the equals method, let's say, it's because of auto boxing, because if we do use the double equals operator for primitive fields that are float or double, an auto box will take place where the compiler will automatically convert these primitive types to the corresponding wrapper class types. And that is costly. That's very performance heavy or anti-performance to use a software engineering term. And that's why Joshua Block states, while you could compare float and double fields with the static methods float dot equals and double dot equals, this would entail auto boxing on every comparison, which would have poor performance. But auto boxing generally isn't a good idea, especially if you're using loops, keep away from auto boxing because it can be very performance heavy because also it just creates new objects every single time. So an example we have here is this int value of type, it's a primitive type. What auto boxing will do here is convert this int to the wrapper class integer and that's going to now be an object and any instance of that will create new objects in memory. And the compiler does that automatically for primitive and wrapper classes. So that's why it's better to use compare instead of using the equals method for float or double. And then kind of an ancillary point, a shunt's ancillary, it's still important. For array fields, apply these guidelines to each element. If every element in an array field is significant, use one of the array dot equals methods. And as we're deciding this method, one thing that could come into your mind is what if the object reference contains null, that is a very real possibility. So we want to avoid a null point of exception if that happens, if the object reference contains null and to avoid that, avoid the null point of exception, what we want to do for that is in fact, use the objects dot equals method where we compare two objects, which is in the Java util objects class. So if we take a look at another small demo, it's better looking at code than me trying to explain it. We have another class called person. And again, we have a name of type string, and then we have an age of the primitive type int. We have the constructor and then the equals method. So simply again, same thing, and we're doing the casting chain for the instance, the double equals operation, all of that. And then afterwards, in the comparison, we're comparing these significant fields. It could be possible that one of them could have a null, or in this case, what we pass this object, we pass onto the equals method. This object dot equals method will ensure that another point of exception is enthroned. And that's why when it comes to comparing the name, we are using objects dot equals. Did I say object dot equals? I meant to say objects dot equals. That's important. And the reason for that is instead of me explaining it, let me just use chatGPT to explain it better than I ever could. The object dot equals method is a utility method provided by the Java util objects class in Java. It can be used to compare the equality of two objects, taking into account that either or both objects can be null. And that's important. Like the null point exception isn't thrown. The method will return true if both objects are null, or if the objects are not null, and the equals method of the first object returns true when called with the second object as the argument. So the example for that is seen here. As you can see, we are passing a null value into person p4, and that returns false as expected because we're comparing p1 to p4. And in that comparison, it's clear that there is no logical equality here despite the age being the same. And there's also, more importantly, I guess, there's no null point exception being thrown. And then we get to this concept of canonicalization, which is the idea that in some classes a simple equality test won't do, especially as Joshua Bloch states for classes that are immutable. Meaning if an object of an immutable class can potentially change, for logical equality for or equals method to work properly, we still need to keep a canonical form of that field somewhere in our class, and we need to store it. So firstly, what is canonicalization? And a definition I found probably the best one I could find is really of Wikipedia. It's a computer science principle, and computer science, canonicalization, sometimes standardization or normalization, something you hear quite often when it comes to a databases, is a process for converting data that has more than one possible representation into a standard, normal or canonical form. You could probably see that itself hints to that idea that we want the data to exist in a consistent representation when doing the equality. And that's why we need to exist in a canonical form. This can be done to compare different representations by equivalence, like the equals method, to count the number of distinct data structures, to improve the efficiency of various algorithms by eliminating repeated calculations, or to make it possible to impose a meaningful sorting order. So clearly this CS principle of canonicalization has many uses. So we're going to look at a demo to exemplify this idea of canonicalization on a previous class that we designed, which was the case and sensitive string class. So if you recall, I think in part two, part two or three, when we were discussing symmetry, we created this class called the case and sensitive string class. And what we're doing here is really we're storing a canonical field. We're storing data in a canonical field, which is in this string, we have this private final field. So it's going to be immutable called canonical S, which is a canonical string. And then in the constructor, and we instantiate this class, as we normally set the value for S, we are also setting the value for canonical S, which converts it to a canonical form. And what does that method do? It simply converts everything to lower case. So in that case, if we go to the equals method, you could see that what we're using here is the canonical string to check for equivalence relation. We're not using the other value here, which is S, and that ensures that we have consistency across the equals method because we have this canonical field that we're using. And that's why we present the data in that way, despite we know that it can take many forms. So of course, apart from having a good quality equals method as soft engineers, what we always look for is a performance application. So we want that to be good efficiency in the equals method. And therefore, just a block towards the end of this section discusses a few things we can do to improve performance apropos of the equals method. Firstly, it's important to compare the fields that are more likely to differ or less expensive to compare, ideally both. By the way, before we get to the second point, we're going to go through all of this in a demo. So first, let's get the theory out of the way. So the second point is do not compare fields that are not a part of a objects logical state because we are looking for logical equality. That's important. And then need not compare the derived fields. So these are the three main points when it comes to improving performance on the equals method. Now, before we get to the demo, I just want to read the formal definition or the formal elicitation of Joshua Block. For best performance, you should first compare fields that are more likely to differ, less expensive to compare or ideally both. So that's point one. If only I can click, there we go. You must not compare fields that are not part of an objects logical state, such as lock fields that use to synchronize operations. You need not compare. So that's part three. You need not compare derived fields, which can be calculated from significant fields, but doing so may improve the performance of the equals method. If a derived field amounts to a summary description of the entire object, comparing this field will save you expense of comparing the actual data of if the comparison fails. So let's look at a demo. What if we have a polygon class? Now, this firstly, I want to say, I am not saying that this class of design is an accurate polygon class, especially when it comes to the calculation of the mathematics. I kind of did a bit of Googling, used a bit of charge APD and put this together, put this together, pardon me. So we have the polygon class. So sorry, the caveat there was the provider was don't take these calculations. Don't use them. They're probably wrong. I'm not sure. So do double check before using this class if you want to do the polygon class. So we have a polygon class. We have edges vertices as a polygon. This we have this all the fields here are primitive values. And then we have a double array called sides with array, array cached or cached. And then we have the constructor, of course, where we are setting all the values and even setting the value for a Boolean variable or Boolean field, which checks if the array value has been cached. And then in the calculations, the calculation itself, we're checking for we're checking for the area for a initially for a triangle and a rectangle. And again, as I said, the formula may be wrong. So I'm not sure if this formula is correct. And then also, if necessary, we could use it for other polygons, depending on on the number of sides, the formula will change. So but the point is the point pertaining to our item is when we're doing the equality, we aren't the only thing we really because because we're using a derived field here, which is the area field. The only thing we're looking for in the quality is the area value. We're checking if the if the area is the same between the object we pass. So the polygon object we pass, which, which for all intents and purposes will be a polygon object we pass. And we don't we know things such as the vertices, the edges, many things, even the obviously things like the area cache. And if we run this method, you'll see it works as expected because we are looking for logical equality. You can see here over here, firstly, comparing a triangle to a rectangle, it'll return false. That's correct. We're setting all the sides in the sides area. But when we compare a triangle to a triangle, so we have the click to triangles here, triangle and triangle to it'll return true. That is because the number of edges and vertices are the same. So are the sides. And that is because those values are what gives us the area. So it's a derived field. And in the quality all we require to create a high performance equals method is the derived field value. In this case, the area value. I hope that made sense. So just to repeat myself, to really get the take home point here, it is that we don't have to compare the derived fields. I may have misspoken and said we have to before, but we don't. The idea is the significant field in this class in a polygon class is area. And therefore we know if the area values are equaled for two objects, that the vertices and the sides and the edges and all the rest of it is going to be equal to, and in that way we make our equals method more performant. Because if two polygons have unequal areas, there's no reason to compare the edges and vertices. And that gets us to the final caveats, let's say. Okay, no, not yet, not yet. I spoke too soon. There's a bit more to say here. So Joshua Block, despite me using many other classes to exemplify this, Joshua Block has his own class called the phone number class that he's built, which I've used here too, which is really well built. It's a high quality equals method here. And he says, when you're finished writing your equals method, ask yourself three questions. Is it symmetric? Is it transitive? Is it consistent? If those three questions are fulfilled, that means, or if they're answered to be yes, that means it's a high quality equals method. And then he kind of puts this point, of course, your equals method must also satisfy the other two properties, reflexivity and nonality, which we discussed in the previous part, but these two usually take care of themselves. And then we have the phone number class that is designed here, where in the phone number class, we have the area code prefix and the line num. They're all private final short values. I realize he's used the non primitive type short here because it's a phone number that helps with saving memory. I've really not ever used a short method ever short type ever. I've always used just int, but now that's that's that's good. It shows that it's very punctilious when it comes to design and classes and writing code, he pays attention to the small things. So when it comes to the phone number class, yes, we have the constructor where we set all the values. We do a range check in this class. We make sure that it's within the range using this range check method. And afterwards we come to the crux of the matter, which is the equals method. So you can see here what he's done. He's firstly done the memory reference equality or check for memory reference and then check for the proper type, the type check and then the casting, which will be fine because we're doing the type check here. There won't be any class class exception areas. And then he's comparing all the significant fields. And for him, or I guess not for him, even for me, for anyone, this is a high quality equals method. And now we get to the final caveats when designing an equals method. So the first one is always override hash code when overriding equals. We're not going to get too much into that because the next item is in fact all on the hash code method. However, that's mostly to ensure that objects of the class work correctly in hash based collection. So objects can be put through a hash function and you want any of these classes or any of these, yes, classes that use hash, hash based collections to work properly. And that's why whenever the equals method is overrided, we need to ensure that the hash code method is also overrided and updated appropriately, depending on what we do with the equals method to make sure these collections and other data structures, in fact, work well with our objects. The next point is don't try to be too clever. Perhaps it's good advice for life itself. And Joshua Block states, don't try to be too clever. If you simply test fields for equality, it's not hard to adhere to the equals contract. If you are overly aggressive in searching for equivalence, it's easy to get into trouble. And the example he's given is when it comes to equivalence relation or the comparison, don't take aliases such as symbolic links into account. Or the example here is, is the file class has symbolic links and we shouldn't take that kind of alias into account when doing an equality check. And a few definitions to understand what the relationship between an alias and a symbolic link is. So firstly, as Biden has put it, a soft or symbolic link is a file pointer. So in the file class that behaves as a file that is linking to if the target file gets deleted, then the link is unusable. So it's mostly a pointer. And I think, in fact, charge dpd had a much better explanation than even well done and I really love well done's blog. In any case, what charge dpd states is an example of a symbolic link. Imagine you have a folder called original and you have a large number of files in it. Now, you want to create another copy of the folder, which is identical to the original folder, but in another location of your file system. Instead of copying the entire folder and its contents, you can create a symbolic link to the original folder and place it in the desired location. I can access the original files to the symbolic link, which acts as an alias. So it's that's that's the bit that alias bit or the symbolic link we create shouldn't be taken into consideration when designing the equals method. That's a field we should ignore. And then an example of an alias is, let's say you have an object A with some properties and methods and you create an object B that is identical to object A. Now you can access object A's properties and methods through object B, which acts as a as an alias for object A. So that kind of makes is what an alias is. And this is how you define symbolic links. So in the files method, we have file, stock, create symbolic link. We have the link we create and then we have the target. This link we create shouldn't be used when it comes to a equivalence relation in I equals method. That should be ignored and it's not a significant field. So the final caveat is, in fact, quite important. Now, the other two caveats are I don't think, at least, that one would be prone to making those mistakes. Whereas this most certainly I can see myself making this mistake. It is that you shouldn't substitute another type for object in the equals declaration. So as you saw in the equals method as defined in the object super class, it we all actually, this is a bad example. This is the way not to do it. But normally what you'd have here is the object we take in the parameter would be of type object. But let's say we define it to be some other type. This will create some problems because firstly, what this does is it will the compiler will not inherit the problem implementation of the equals method. And since the method is strongly typed. So now we've specifically defined what type we want. And it can't just be the superclass object. It'll take objects of a specific class, a specific type instead of object, which can give false positives, certainly. And one other point there is the problem with defining the equals method like this is the method does not override the object dot equals because we do inherit this from the superclass object. We do it like this instead of overriding. It will overload it because the method in the object dot equals class, the type is object. And now we've changed it where it's going to be overloaded and the equals method will still exist in our subclass. So it'll sort of be like this. It'll be it'll be this and then there'll be another method. With object, Java disallowed this because the signature of these two methods are different. They're both, they've both got the same name. However, they take in different types of parameters. So overloading takes place. And this is a problem again, cause it can mislead the client of our class. Now, in my opinion, it's always a good habit to use annotations in Java. I think that's a good idea. And this is a good example of why perhaps using an annotation is good. Not for the sake of the compiler, let's say, but more for the programmer, because what happens here is here, because we explicitly stating, we're going to override the equals method in the superclass. This won't compile. It'll give an error. It's still broken, of course, but at least it won't compile. So we'll, you know, pick our mistake and we'll recognize some things. We've done something wrong here by giving it type my class instead of object. And I think it's good because now we're saying instead of overloading, we want it to, we're explicitly stating we want it to override and the compiler is saying, nope, we can't do this, which is what you'll see here. So this is demo here. I have a parent class with a equals method. And if you look at the child class, this is dangerous because we're doing overloading here unknowingly. However, if we do put the override annotations in here, if we do put the override annotation, it'll throw an error, let's say, or the override can't take place, can't take place, which then we can fix by doing it the proper way, which is what I've defined here, where now we have a proper overriding takes place with the type of object. So we're taking all the objects in here. That's great. And then, of course, that's the end of the item, the end of the part, and the end of the item. Wow, that was a long, long item. It was probably 10, 15 pages. I feel really good for getting through that. And I learned so much, but, but, but at the end of the item, Josh Schumburg states, Hey, look, yes. Now you know how to design or you have the recipe for a high quality equals method. And yeah, it's fantastic. We learned a lot. We went through a lot of a bit of computer science, a bit of human logic. However, most of the time it's a good idea to use the IDE or to use something like the auto value framework, Google's open source auto value framework, when designing equals methods, because these frameworks were pretty much take care of all of these things we discussed in this item. Look at how long the item is. Everything from, from, from the properties and, and making the equals method more performant, all of that. Which is why Josh Schumburg states, an excellent alternative to writing and testing these methods manually is to use Google's open source auto value framework, which automatically generates these methods for you triggered by a single annotation on the class. And then he also says, having IDEs generate equals and hash code methods is generally preferable to implementing them manually because IDEs do not make careless mistakes. And of course humans do. That's the end of the item. And then he states, in summary, don't override the equals method unless you have to, in many cases, the implementation inherited from object does exactly what you want. If you do override equals, make sure to compare all of the classes, significant fields, and to compare them in a manner that preserves all five provisions of the equals contract. Fantastic. I'm so happy that I got through that, especially because I feel like I learned a lot when we were going through that item because it touched on so many different concepts, which was a really fun item to cover. And the next one is item 11, as I did state a bit before, always override hash code when you override equals. And I shall see you in the next one. Thanks for watching. Cheers.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.8, "text": " Hey everyone, welcome to part 4, the final part of item 10 in Joshua Block's Effective", "tokens": [50364, 1911, 1518, 11, 2928, 281, 644, 1017, 11, 264, 2572, 644, 295, 3174, 1266, 294, 24005, 17500, 311, 17764, 488, 50754], "temperature": 0.0, "avg_logprob": -0.21030120849609374, "compression_ratio": 1.5394190871369295, "no_speech_prob": 0.28276586532592773}, {"id": 1, "seek": 0, "start": 7.8, "end": 8.8, "text": " Java.", "tokens": [50754, 10745, 13, 50804], "temperature": 0.0, "avg_logprob": -0.21030120849609374, "compression_ratio": 1.5394190871369295, "no_speech_prob": 0.28276586532592773}, {"id": 2, "seek": 0, "start": 8.8, "end": 15.280000000000001, "text": " Item 10, as if you've been folding along in the previous parts, is obey the general contract", "tokens": [50804, 31066, 1266, 11, 382, 498, 291, 600, 668, 25335, 2051, 294, 264, 3894, 3166, 11, 307, 19297, 264, 2674, 4364, 51128], "temperature": 0.0, "avg_logprob": -0.21030120849609374, "compression_ratio": 1.5394190871369295, "no_speech_prob": 0.28276586532592773}, {"id": 3, "seek": 0, "start": 15.280000000000001, "end": 17.6, "text": " when overriding equals.", "tokens": [51128, 562, 670, 81, 2819, 6915, 13, 51244], "temperature": 0.0, "avg_logprob": -0.21030120849609374, "compression_ratio": 1.5394190871369295, "no_speech_prob": 0.28276586532592773}, {"id": 4, "seek": 0, "start": 17.6, "end": 23.080000000000002, "text": " And I'm very excited, and so is the dog barking outside when I decided to record a video.", "tokens": [51244, 400, 286, 478, 588, 2919, 11, 293, 370, 307, 264, 3000, 32995, 2380, 562, 286, 3047, 281, 2136, 257, 960, 13, 51518], "temperature": 0.0, "avg_logprob": -0.21030120849609374, "compression_ratio": 1.5394190871369295, "no_speech_prob": 0.28276586532592773}, {"id": 5, "seek": 0, "start": 23.080000000000002, "end": 26.84, "text": " But I'm very excited because finally, man, this was a really long item.", "tokens": [51518, 583, 286, 478, 588, 2919, 570, 2721, 11, 587, 11, 341, 390, 257, 534, 938, 3174, 13, 51706], "temperature": 0.0, "avg_logprob": -0.21030120849609374, "compression_ratio": 1.5394190871369295, "no_speech_prob": 0.28276586532592773}, {"id": 6, "seek": 2684, "start": 26.84, "end": 32.88, "text": " It's taken me a whole month to get across this item, also because I've been procrastinating.", "tokens": [50364, 467, 311, 2726, 385, 257, 1379, 1618, 281, 483, 2108, 341, 3174, 11, 611, 570, 286, 600, 668, 39306, 8205, 13, 50666], "temperature": 0.0, "avg_logprob": -0.1519455816231522, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.1539851278066635}, {"id": 7, "seek": 2684, "start": 32.88, "end": 38.88, "text": " In any case, this is really good because all the stuff that we've learned in this item,", "tokens": [50666, 682, 604, 1389, 11, 341, 307, 534, 665, 570, 439, 264, 1507, 300, 321, 600, 3264, 294, 341, 3174, 11, 50966], "temperature": 0.0, "avg_logprob": -0.1519455816231522, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.1539851278066635}, {"id": 8, "seek": 2684, "start": 38.88, "end": 44.28, "text": " what to do, what not to do, we're going to put it all together in this final item and", "tokens": [50966, 437, 281, 360, 11, 437, 406, 281, 360, 11, 321, 434, 516, 281, 829, 309, 439, 1214, 294, 341, 2572, 3174, 293, 51236], "temperature": 0.0, "avg_logprob": -0.1519455816231522, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.1539851278066635}, {"id": 9, "seek": 2684, "start": 44.28, "end": 51.04, "text": " create a high-quality equals method, or as Joshua Block would say, it's the recipe for", "tokens": [51236, 1884, 257, 1090, 12, 11286, 6915, 3170, 11, 420, 382, 24005, 17500, 576, 584, 11, 309, 311, 264, 6782, 337, 51574], "temperature": 0.0, "avg_logprob": -0.1519455816231522, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.1539851278066635}, {"id": 10, "seek": 2684, "start": 51.04, "end": 53.6, "text": " a high-quality equals method.", "tokens": [51574, 257, 1090, 12, 11286, 6915, 3170, 13, 51702], "temperature": 0.0, "avg_logprob": -0.1519455816231522, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.1539851278066635}, {"id": 11, "seek": 5360, "start": 53.6, "end": 56.760000000000005, "text": " So without further ado, let's get started.", "tokens": [50364, 407, 1553, 3052, 22450, 11, 718, 311, 483, 1409, 13, 50522], "temperature": 0.0, "avg_logprob": -0.14778473180368407, "compression_ratio": 1.75, "no_speech_prob": 0.024786338210105896}, {"id": 12, "seek": 5360, "start": 56.760000000000005, "end": 61.6, "text": " There are a few points that he's laid down on what to do when it comes to designing equals", "tokens": [50522, 821, 366, 257, 1326, 2793, 300, 415, 311, 9897, 760, 322, 437, 281, 360, 562, 309, 1487, 281, 14685, 6915, 50764], "temperature": 0.0, "avg_logprob": -0.14778473180368407, "compression_ratio": 1.75, "no_speech_prob": 0.024786338210105896}, {"id": 13, "seek": 5360, "start": 61.6, "end": 62.6, "text": " methods.", "tokens": [50764, 7150, 13, 50814], "temperature": 0.0, "avg_logprob": -0.14778473180368407, "compression_ratio": 1.75, "no_speech_prob": 0.024786338210105896}, {"id": 14, "seek": 5360, "start": 62.6, "end": 64.6, "text": " The first one is quite straightforward.", "tokens": [50814, 440, 700, 472, 307, 1596, 15325, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14778473180368407, "compression_ratio": 1.75, "no_speech_prob": 0.024786338210105896}, {"id": 15, "seek": 5360, "start": 64.6, "end": 71.44, "text": " It is to use the double equals operator to check if the argument is a reference to an", "tokens": [50914, 467, 307, 281, 764, 264, 3834, 6915, 12973, 281, 1520, 498, 264, 6770, 307, 257, 6408, 281, 364, 51256], "temperature": 0.0, "avg_logprob": -0.14778473180368407, "compression_ratio": 1.75, "no_speech_prob": 0.024786338210105896}, {"id": 16, "seek": 5360, "start": 71.44, "end": 72.44, "text": " object.", "tokens": [51256, 2657, 13, 51306], "temperature": 0.0, "avg_logprob": -0.14778473180368407, "compression_ratio": 1.75, "no_speech_prob": 0.024786338210105896}, {"id": 17, "seek": 5360, "start": 72.44, "end": 77.8, "text": " So with the argument or whatever we are passing onto the equals method, if we use a double", "tokens": [51306, 407, 365, 264, 6770, 420, 2035, 321, 366, 8437, 3911, 264, 6915, 3170, 11, 498, 321, 764, 257, 3834, 51574], "temperature": 0.0, "avg_logprob": -0.14778473180368407, "compression_ratio": 1.75, "no_speech_prob": 0.024786338210105896}, {"id": 18, "seek": 5360, "start": 77.8, "end": 83.2, "text": " equals operator, we can confirm if it's a memory reference.", "tokens": [51574, 6915, 12973, 11, 321, 393, 9064, 498, 309, 311, 257, 4675, 6408, 13, 51844], "temperature": 0.0, "avg_logprob": -0.14778473180368407, "compression_ratio": 1.75, "no_speech_prob": 0.024786338210105896}, {"id": 19, "seek": 8320, "start": 83.2, "end": 87.16, "text": " So if you're passing the same object, let's say, then obviously it's going to return true.", "tokens": [50364, 407, 498, 291, 434, 8437, 264, 912, 2657, 11, 718, 311, 584, 11, 550, 2745, 309, 311, 516, 281, 2736, 2074, 13, 50562], "temperature": 0.0, "avg_logprob": -0.15998385502741888, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.11119931191205978}, {"id": 20, "seek": 8320, "start": 87.16, "end": 93.76, "text": " As you can see in this really quite straightforward example, we have two strings and keep in mind", "tokens": [50562, 1018, 291, 393, 536, 294, 341, 534, 1596, 15325, 1365, 11, 321, 362, 732, 13985, 293, 1066, 294, 1575, 50892], "temperature": 0.0, "avg_logprob": -0.15998385502741888, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.11119931191205978}, {"id": 21, "seek": 8320, "start": 93.76, "end": 98.52000000000001, "text": " objects of string, of string class, are immutable.", "tokens": [50892, 6565, 295, 6798, 11, 295, 6798, 1508, 11, 366, 3397, 32148, 13, 51130], "temperature": 0.0, "avg_logprob": -0.15998385502741888, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.11119931191205978}, {"id": 22, "seek": 8320, "start": 98.52000000000001, "end": 107.80000000000001, "text": " And in this case, the first if condition will return true because both this new string,", "tokens": [51130, 400, 294, 341, 1389, 11, 264, 700, 498, 4188, 486, 2736, 2074, 570, 1293, 341, 777, 6798, 11, 51594], "temperature": 0.0, "avg_logprob": -0.15998385502741888, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.11119931191205978}, {"id": 23, "seek": 8320, "start": 107.80000000000001, "end": 113.0, "text": " I'm sorry, as I was staring into the code there, I realized I explained that wrongly.", "tokens": [51594, 286, 478, 2597, 11, 382, 286, 390, 18043, 666, 264, 3089, 456, 11, 286, 5334, 286, 8825, 300, 2085, 356, 13, 51854], "temperature": 0.0, "avg_logprob": -0.15998385502741888, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.11119931191205978}, {"id": 24, "seek": 11300, "start": 113.0, "end": 116.64, "text": " Firstly, the caveat is this is a anti-pattern.", "tokens": [50364, 20042, 11, 264, 43012, 307, 341, 307, 257, 6061, 12, 79, 1161, 77, 13, 50546], "temperature": 0.0, "avg_logprob": -0.15341556773466222, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.15803086757659912}, {"id": 25, "seek": 11300, "start": 116.64, "end": 121.44, "text": " You should never declare strings like this because the new keyword creates a new object", "tokens": [50546, 509, 820, 1128, 19710, 13985, 411, 341, 570, 264, 777, 20428, 7829, 257, 777, 2657, 50786], "temperature": 0.0, "avg_logprob": -0.15341556773466222, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.15803086757659912}, {"id": 26, "seek": 11300, "start": 121.44, "end": 122.64, "text": " in memory.", "tokens": [50786, 294, 4675, 13, 50846], "temperature": 0.0, "avg_logprob": -0.15341556773466222, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.15803086757659912}, {"id": 27, "seek": 11300, "start": 122.64, "end": 127.12, "text": " That's not required because as I said, string is immutable.", "tokens": [50846, 663, 311, 406, 4739, 570, 382, 286, 848, 11, 6798, 307, 3397, 32148, 13, 51070], "temperature": 0.0, "avg_logprob": -0.15341556773466222, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.15803086757659912}, {"id": 28, "seek": 11300, "start": 127.12, "end": 133.28, "text": " So here, when we compare string one to string two using the equals operator, this will in", "tokens": [51070, 407, 510, 11, 562, 321, 6794, 6798, 472, 281, 6798, 732, 1228, 264, 6915, 12973, 11, 341, 486, 294, 51378], "temperature": 0.0, "avg_logprob": -0.15341556773466222, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.15803086757659912}, {"id": 29, "seek": 11300, "start": 133.28, "end": 135.2, "text": " fact say that they're not equal.", "tokens": [51378, 1186, 584, 300, 436, 434, 406, 2681, 13, 51474], "temperature": 0.0, "avg_logprob": -0.15341556773466222, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.15803086757659912}, {"id": 30, "seek": 11300, "start": 135.2, "end": 138.48, "text": " So this will say they're not in the same memory location.", "tokens": [51474, 407, 341, 486, 584, 436, 434, 406, 294, 264, 912, 4675, 4914, 13, 51638], "temperature": 0.0, "avg_logprob": -0.15341556773466222, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.15803086757659912}, {"id": 31, "seek": 13848, "start": 138.48, "end": 143.16, "text": " But if you use the equals keyword, it's going to say they're in, sorry, it's going to say", "tokens": [50364, 583, 498, 291, 764, 264, 6915, 20428, 11, 309, 311, 516, 281, 584, 436, 434, 294, 11, 2597, 11, 309, 311, 516, 281, 584, 50598], "temperature": 0.0, "avg_logprob": -0.17341177087081106, "compression_ratio": 1.751908396946565, "no_speech_prob": 0.028001269325613976}, {"id": 32, "seek": 13848, "start": 143.16, "end": 148.39999999999998, "text": " that they have the same content or that there's logical equality as we've discussed throughout", "tokens": [50598, 300, 436, 362, 264, 912, 2701, 420, 300, 456, 311, 14978, 14949, 382, 321, 600, 7152, 3710, 50860], "temperature": 0.0, "avg_logprob": -0.17341177087081106, "compression_ratio": 1.751908396946565, "no_speech_prob": 0.028001269325613976}, {"id": 33, "seek": 13848, "start": 148.39999999999998, "end": 149.83999999999997, "text": " this item.", "tokens": [50860, 341, 3174, 13, 50932], "temperature": 0.0, "avg_logprob": -0.17341177087081106, "compression_ratio": 1.751908396946565, "no_speech_prob": 0.028001269325613976}, {"id": 34, "seek": 13848, "start": 149.83999999999997, "end": 155.92, "text": " So but when it comes to designing our own equals method, the reason that we should first check", "tokens": [50932, 407, 457, 562, 309, 1487, 281, 14685, 527, 1065, 6915, 3170, 11, 264, 1778, 300, 321, 820, 700, 1520, 51236], "temperature": 0.0, "avg_logprob": -0.17341177087081106, "compression_ratio": 1.751908396946565, "no_speech_prob": 0.028001269325613976}, {"id": 35, "seek": 13848, "start": 155.92, "end": 161.16, "text": " using the equals operator, if it's referring to the same object is because if it is, we", "tokens": [51236, 1228, 264, 6915, 12973, 11, 498, 309, 311, 13761, 281, 264, 912, 2657, 307, 570, 498, 309, 307, 11, 321, 51498], "temperature": 0.0, "avg_logprob": -0.17341177087081106, "compression_ratio": 1.751908396946565, "no_speech_prob": 0.028001269325613976}, {"id": 36, "seek": 13848, "start": 161.16, "end": 166.35999999999999, "text": " just save time, we save computation time instantly, we can return true or false.", "tokens": [51498, 445, 3155, 565, 11, 321, 3155, 24903, 565, 13518, 11, 321, 393, 2736, 2074, 420, 7908, 13, 51758], "temperature": 0.0, "avg_logprob": -0.17341177087081106, "compression_ratio": 1.751908396946565, "no_speech_prob": 0.028001269325613976}, {"id": 37, "seek": 16636, "start": 166.44000000000003, "end": 173.32000000000002, "text": " Not false, but we could certainly return true if it is equal to the, if the memory reference", "tokens": [50368, 1726, 7908, 11, 457, 321, 727, 3297, 2736, 2074, 498, 309, 307, 2681, 281, 264, 11, 498, 264, 4675, 6408, 50712], "temperature": 0.0, "avg_logprob": -0.16236642996470133, "compression_ratio": 1.5742971887550201, "no_speech_prob": 0.19920220971107483}, {"id": 38, "seek": 16636, "start": 173.32000000000002, "end": 176.32000000000002, "text": " is equal using the double equals operator.", "tokens": [50712, 307, 2681, 1228, 264, 3834, 6915, 12973, 13, 50862], "temperature": 0.0, "avg_logprob": -0.16236642996470133, "compression_ratio": 1.5742971887550201, "no_speech_prob": 0.19920220971107483}, {"id": 39, "seek": 16636, "start": 176.32000000000002, "end": 182.96, "text": " And Joshua Block states, yeah, so if so returns true, this is just a performance optimization,", "tokens": [50862, 400, 24005, 17500, 4368, 11, 1338, 11, 370, 498, 370, 11247, 2074, 11, 341, 307, 445, 257, 3389, 19618, 11, 51194], "temperature": 0.0, "avg_logprob": -0.16236642996470133, "compression_ratio": 1.5742971887550201, "no_speech_prob": 0.19920220971107483}, {"id": 40, "seek": 16636, "start": 182.96, "end": 187.16000000000003, "text": " but one that is worth doing if the comparison is potentially expensive.", "tokens": [51194, 457, 472, 300, 307, 3163, 884, 498, 264, 9660, 307, 7263, 5124, 13, 51404], "temperature": 0.0, "avg_logprob": -0.16236642996470133, "compression_ratio": 1.5742971887550201, "no_speech_prob": 0.19920220971107483}, {"id": 41, "seek": 16636, "start": 187.16000000000003, "end": 191.56, "text": " So if it's not equal, there may be a lot more other checks we need to do in order to have", "tokens": [51404, 407, 498, 309, 311, 406, 2681, 11, 456, 815, 312, 257, 688, 544, 661, 13834, 321, 643, 281, 360, 294, 1668, 281, 362, 51624], "temperature": 0.0, "avg_logprob": -0.16236642996470133, "compression_ratio": 1.5742971887550201, "no_speech_prob": 0.19920220971107483}, {"id": 42, "seek": 19156, "start": 191.56, "end": 196.52, "text": " a good quality equals method, but if it's the same memory reference, just return true.", "tokens": [50364, 257, 665, 3125, 6915, 3170, 11, 457, 498, 309, 311, 264, 912, 4675, 6408, 11, 445, 2736, 2074, 13, 50612], "temperature": 0.0, "avg_logprob": -0.12704010498829377, "compression_ratio": 1.6605166051660516, "no_speech_prob": 0.019120506942272186}, {"id": 43, "seek": 19156, "start": 196.52, "end": 197.52, "text": " I'm sorry.", "tokens": [50612, 286, 478, 2597, 13, 50662], "temperature": 0.0, "avg_logprob": -0.12704010498829377, "compression_ratio": 1.6605166051660516, "no_speech_prob": 0.019120506942272186}, {"id": 44, "seek": 19156, "start": 197.52, "end": 201.32, "text": " I know I kind of exhausted that point, but it's important to understand why we do that", "tokens": [50662, 286, 458, 286, 733, 295, 17992, 300, 935, 11, 457, 309, 311, 1021, 281, 1223, 983, 321, 360, 300, 50852], "temperature": 0.0, "avg_logprob": -0.12704010498829377, "compression_ratio": 1.6605166051660516, "no_speech_prob": 0.019120506942272186}, {"id": 45, "seek": 19156, "start": 201.32, "end": 203.16, "text": " check initially.", "tokens": [50852, 1520, 9105, 13, 50944], "temperature": 0.0, "avg_logprob": -0.12704010498829377, "compression_ratio": 1.6605166051660516, "no_speech_prob": 0.019120506942272186}, {"id": 46, "seek": 19156, "start": 203.16, "end": 208.28, "text": " The second one is to check if the, if it's an instance of the correct type.", "tokens": [50944, 440, 1150, 472, 307, 281, 1520, 498, 264, 11, 498, 309, 311, 364, 5197, 295, 264, 3006, 2010, 13, 51200], "temperature": 0.0, "avg_logprob": -0.12704010498829377, "compression_ratio": 1.6605166051660516, "no_speech_prob": 0.019120506942272186}, {"id": 47, "seek": 19156, "start": 208.28, "end": 212.36, "text": " And firstly, if it's not straight away return false, because if they're going to be two", "tokens": [51200, 400, 27376, 11, 498, 309, 311, 406, 2997, 1314, 2736, 7908, 11, 570, 498, 436, 434, 516, 281, 312, 732, 51404], "temperature": 0.0, "avg_logprob": -0.12704010498829377, "compression_ratio": 1.6605166051660516, "no_speech_prob": 0.019120506942272186}, {"id": 48, "seek": 19156, "start": 212.36, "end": 217.48000000000002, "text": " different types, then there's no logical equality to start with, which is why Joshua", "tokens": [51404, 819, 3467, 11, 550, 456, 311, 572, 14978, 14949, 281, 722, 365, 11, 597, 307, 983, 24005, 51660], "temperature": 0.0, "avg_logprob": -0.12704010498829377, "compression_ratio": 1.6605166051660516, "no_speech_prob": 0.019120506942272186}, {"id": 49, "seek": 21748, "start": 217.48, "end": 223.72, "text": " Block states in the second part of putting together this recipe, use the instance of", "tokens": [50364, 17500, 4368, 294, 264, 1150, 644, 295, 3372, 1214, 341, 6782, 11, 764, 264, 5197, 295, 50676], "temperature": 0.0, "avg_logprob": -0.14031566679477692, "compression_ratio": 1.736462093862816, "no_speech_prob": 0.0251755453646183}, {"id": 50, "seek": 21748, "start": 223.72, "end": 228.39999999999998, "text": " operator to check if the argument has the correct type.", "tokens": [50676, 12973, 281, 1520, 498, 264, 6770, 575, 264, 3006, 2010, 13, 50910], "temperature": 0.0, "avg_logprob": -0.14031566679477692, "compression_ratio": 1.736462093862816, "no_speech_prob": 0.0251755453646183}, {"id": 51, "seek": 21748, "start": 228.39999999999998, "end": 229.64, "text": " So what does that mean?", "tokens": [50910, 407, 437, 775, 300, 914, 30, 50972], "temperature": 0.0, "avg_logprob": -0.14031566679477692, "compression_ratio": 1.736462093862816, "no_speech_prob": 0.0251755453646183}, {"id": 52, "seek": 21748, "start": 229.64, "end": 233.95999999999998, "text": " What that means is before I read out what he stated, in fact, maybe I should first read", "tokens": [50972, 708, 300, 1355, 307, 949, 286, 1401, 484, 437, 415, 11323, 11, 294, 1186, 11, 1310, 286, 820, 700, 1401, 51188], "temperature": 0.0, "avg_logprob": -0.14031566679477692, "compression_ratio": 1.736462093862816, "no_speech_prob": 0.0251755453646183}, {"id": 53, "seek": 21748, "start": 233.95999999999998, "end": 234.95999999999998, "text": " out.", "tokens": [51188, 484, 13, 51238], "temperature": 0.0, "avg_logprob": -0.14031566679477692, "compression_ratio": 1.736462093862816, "no_speech_prob": 0.0251755453646183}, {"id": 54, "seek": 21748, "start": 234.95999999999998, "end": 236.88, "text": " No, no, no, I'll show this example.", "tokens": [51238, 883, 11, 572, 11, 572, 11, 286, 603, 855, 341, 1365, 13, 51334], "temperature": 0.0, "avg_logprob": -0.14031566679477692, "compression_ratio": 1.736462093862816, "no_speech_prob": 0.0251755453646183}, {"id": 55, "seek": 21748, "start": 236.88, "end": 241.16, "text": " And then before we get to the Java collections framework set example, I'll read out what", "tokens": [51334, 400, 550, 949, 321, 483, 281, 264, 10745, 16641, 8388, 992, 1365, 11, 286, 603, 1401, 484, 437, 51548], "temperature": 0.0, "avg_logprob": -0.14031566679477692, "compression_ratio": 1.736462093862816, "no_speech_prob": 0.0251755453646183}, {"id": 56, "seek": 21748, "start": 241.16, "end": 242.16, "text": " he stated.", "tokens": [51548, 415, 11323, 13, 51598], "temperature": 0.0, "avg_logprob": -0.14031566679477692, "compression_ratio": 1.736462093862816, "no_speech_prob": 0.0251755453646183}, {"id": 57, "seek": 21748, "start": 242.16, "end": 246.92, "text": " So we've defined a type, we've defined my interface and we have a class that implements", "tokens": [51598, 407, 321, 600, 7642, 257, 2010, 11, 321, 600, 7642, 452, 9226, 293, 321, 362, 257, 1508, 300, 704, 17988, 51836], "temperature": 0.0, "avg_logprob": -0.14031566679477692, "compression_ratio": 1.736462093862816, "no_speech_prob": 0.0251755453646183}, {"id": 58, "seek": 24692, "start": 246.92, "end": 247.92, "text": " my interface.", "tokens": [50364, 452, 9226, 13, 50414], "temperature": 0.0, "avg_logprob": -0.1857186504918286, "compression_ratio": 1.83402489626556, "no_speech_prob": 0.010326801799237728}, {"id": 59, "seek": 24692, "start": 247.92, "end": 253.16, "text": " So now this class, my class is of type, my interface.", "tokens": [50414, 407, 586, 341, 1508, 11, 452, 1508, 307, 295, 2010, 11, 452, 9226, 13, 50676], "temperature": 0.0, "avg_logprob": -0.1857186504918286, "compression_ratio": 1.83402489626556, "no_speech_prob": 0.010326801799237728}, {"id": 60, "seek": 24692, "start": 253.16, "end": 258.59999999999997, "text": " And then in the equals method, the first thing we are checking is we're first checking, yeah,", "tokens": [50676, 400, 550, 294, 264, 6915, 3170, 11, 264, 700, 551, 321, 366, 8568, 307, 321, 434, 700, 8568, 11, 1338, 11, 50948], "temperature": 0.0, "avg_logprob": -0.1857186504918286, "compression_ratio": 1.83402489626556, "no_speech_prob": 0.010326801799237728}, {"id": 61, "seek": 24692, "start": 258.59999999999997, "end": 262.47999999999996, "text": " we're doing the reference equality, so the memory reference equality, which is what we", "tokens": [50948, 321, 434, 884, 264, 6408, 14949, 11, 370, 264, 4675, 6408, 14949, 11, 597, 307, 437, 321, 51142], "temperature": 0.0, "avg_logprob": -0.1857186504918286, "compression_ratio": 1.83402489626556, "no_speech_prob": 0.010326801799237728}, {"id": 62, "seek": 24692, "start": 262.47999999999996, "end": 267.59999999999997, "text": " discussed in the first part here, or the first section, let's say.", "tokens": [51142, 7152, 294, 264, 700, 644, 510, 11, 420, 264, 700, 3541, 11, 718, 311, 584, 13, 51398], "temperature": 0.0, "avg_logprob": -0.1857186504918286, "compression_ratio": 1.83402489626556, "no_speech_prob": 0.010326801799237728}, {"id": 63, "seek": 24692, "start": 267.59999999999997, "end": 272.68, "text": " And if it is straight away return true, no need to execute the rest of this code.", "tokens": [51398, 400, 498, 309, 307, 2997, 1314, 2736, 2074, 11, 572, 643, 281, 14483, 264, 1472, 295, 341, 3089, 13, 51652], "temperature": 0.0, "avg_logprob": -0.1857186504918286, "compression_ratio": 1.83402489626556, "no_speech_prob": 0.010326801799237728}, {"id": 64, "seek": 24692, "start": 272.68, "end": 276.32, "text": " But if it's not an instance of my interface.", "tokens": [51652, 583, 498, 309, 311, 406, 364, 5197, 295, 452, 9226, 13, 51834], "temperature": 0.0, "avg_logprob": -0.1857186504918286, "compression_ratio": 1.83402489626556, "no_speech_prob": 0.010326801799237728}, {"id": 65, "seek": 27632, "start": 276.32, "end": 283.12, "text": " So whatever object we pass, let me just see if this is that's zoom in a little bit.", "tokens": [50364, 407, 2035, 2657, 321, 1320, 11, 718, 385, 445, 536, 498, 341, 307, 300, 311, 8863, 294, 257, 707, 857, 13, 50704], "temperature": 0.0, "avg_logprob": -0.18164017935779608, "compression_ratio": 1.7377777777777779, "no_speech_prob": 0.006487412843853235}, {"id": 66, "seek": 27632, "start": 283.12, "end": 284.68, "text": " There we go.", "tokens": [50704, 821, 321, 352, 13, 50782], "temperature": 0.0, "avg_logprob": -0.18164017935779608, "compression_ratio": 1.7377777777777779, "no_speech_prob": 0.006487412843853235}, {"id": 67, "seek": 27632, "start": 284.68, "end": 290.32, "text": " Whatever object that we pass into the equals method, if it's not an instance of that broader", "tokens": [50782, 8541, 2657, 300, 321, 1320, 666, 264, 6915, 3170, 11, 498, 309, 311, 406, 364, 5197, 295, 300, 13227, 51064], "temperature": 0.0, "avg_logprob": -0.18164017935779608, "compression_ratio": 1.7377777777777779, "no_speech_prob": 0.006487412843853235}, {"id": 68, "seek": 27632, "start": 290.32, "end": 296.64, "text": " class or of a type, sorry, of that broader class, then return false.", "tokens": [51064, 1508, 420, 295, 257, 2010, 11, 2597, 11, 295, 300, 13227, 1508, 11, 550, 2736, 7908, 13, 51380], "temperature": 0.0, "avg_logprob": -0.18164017935779608, "compression_ratio": 1.7377777777777779, "no_speech_prob": 0.006487412843853235}, {"id": 69, "seek": 27632, "start": 296.64, "end": 301.15999999999997, "text": " So in that sense, we save time and only if it is, we get on with the rest of the equals", "tokens": [51380, 407, 294, 300, 2020, 11, 321, 3155, 565, 293, 787, 498, 309, 307, 11, 321, 483, 322, 365, 264, 1472, 295, 264, 6915, 51606], "temperature": 0.0, "avg_logprob": -0.18164017935779608, "compression_ratio": 1.7377777777777779, "no_speech_prob": 0.006487412843853235}, {"id": 70, "seek": 27632, "start": 301.15999999999997, "end": 304.28, "text": " method to check if there's logical equality.", "tokens": [51606, 3170, 281, 1520, 498, 456, 311, 14978, 14949, 13, 51762], "temperature": 0.0, "avg_logprob": -0.18164017935779608, "compression_ratio": 1.7377777777777779, "no_speech_prob": 0.006487412843853235}, {"id": 71, "seek": 30428, "start": 304.28, "end": 308.79999999999995, "text": " And that's why Joshua Block states typically the correct type is the class in which the", "tokens": [50364, 400, 300, 311, 983, 24005, 17500, 4368, 5850, 264, 3006, 2010, 307, 264, 1508, 294, 597, 264, 50590], "temperature": 0.0, "avg_logprob": -0.13608826842962526, "compression_ratio": 1.8132780082987552, "no_speech_prob": 0.03731715679168701}, {"id": 72, "seek": 30428, "start": 308.79999999999995, "end": 310.79999999999995, "text": " method occurs.", "tokens": [50590, 3170, 11843, 13, 50690], "temperature": 0.0, "avg_logprob": -0.13608826842962526, "compression_ratio": 1.8132780082987552, "no_speech_prob": 0.03731715679168701}, {"id": 73, "seek": 30428, "start": 310.79999999999995, "end": 313.55999999999995, "text": " But if there's an interface like you've seen here, you can implement it.", "tokens": [50690, 583, 498, 456, 311, 364, 9226, 411, 291, 600, 1612, 510, 11, 291, 393, 4445, 309, 13, 50828], "temperature": 0.0, "avg_logprob": -0.13608826842962526, "compression_ratio": 1.8132780082987552, "no_speech_prob": 0.03731715679168701}, {"id": 74, "seek": 30428, "start": 313.55999999999995, "end": 318.47999999999996, "text": " And that's why he says use an interface if the class implements an interface that refines", "tokens": [50828, 400, 300, 311, 983, 415, 1619, 764, 364, 9226, 498, 264, 1508, 704, 17988, 364, 9226, 300, 1895, 1652, 51074], "temperature": 0.0, "avg_logprob": -0.13608826842962526, "compression_ratio": 1.8132780082987552, "no_speech_prob": 0.03731715679168701}, {"id": 75, "seek": 30428, "start": 318.47999999999996, "end": 324.84, "text": " the equals contract to permit comparisons across classes that implement the interface.", "tokens": [51074, 264, 6915, 4364, 281, 13423, 33157, 2108, 5359, 300, 4445, 264, 9226, 13, 51392], "temperature": 0.0, "avg_logprob": -0.13608826842962526, "compression_ratio": 1.8132780082987552, "no_speech_prob": 0.03731715679168701}, {"id": 76, "seek": 30428, "start": 324.84, "end": 331.2, "text": " So what we're checking here in this equals method is not if the object be pass is an", "tokens": [51392, 407, 437, 321, 434, 8568, 510, 294, 341, 6915, 3170, 307, 406, 498, 264, 2657, 312, 1320, 307, 364, 51710], "temperature": 0.0, "avg_logprob": -0.13608826842962526, "compression_ratio": 1.8132780082987552, "no_speech_prob": 0.03731715679168701}, {"id": 77, "seek": 33120, "start": 331.2, "end": 338.4, "text": " instance of my class rather we're using the interface as a type, as you can see here.", "tokens": [50364, 5197, 295, 452, 1508, 2831, 321, 434, 1228, 264, 9226, 382, 257, 2010, 11, 382, 291, 393, 536, 510, 13, 50724], "temperature": 0.0, "avg_logprob": -0.1715646700912647, "compression_ratio": 1.8106796116504855, "no_speech_prob": 0.035138797014951706}, {"id": 78, "seek": 33120, "start": 338.4, "end": 344.84, "text": " So in that way, this equals method theoretically can be used across other classes, or at least", "tokens": [50724, 407, 294, 300, 636, 11, 341, 6915, 3170, 29400, 393, 312, 1143, 2108, 661, 5359, 11, 420, 412, 1935, 51046], "temperature": 0.0, "avg_logprob": -0.1715646700912647, "compression_ratio": 1.8106796116504855, "no_speech_prob": 0.035138797014951706}, {"id": 79, "seek": 33120, "start": 344.84, "end": 350.15999999999997, "text": " this part of the equals method can be used across other classes that implement the mind", "tokens": [51046, 341, 644, 295, 264, 6915, 3170, 393, 312, 1143, 2108, 661, 5359, 300, 4445, 264, 1575, 51312], "temperature": 0.0, "avg_logprob": -0.1715646700912647, "compression_ratio": 1.8106796116504855, "no_speech_prob": 0.035138797014951706}, {"id": 80, "seek": 33120, "start": 350.15999999999997, "end": 351.56, "text": " to face type.", "tokens": [51312, 281, 1851, 2010, 13, 51382], "temperature": 0.0, "avg_logprob": -0.1715646700912647, "compression_ratio": 1.8106796116504855, "no_speech_prob": 0.035138797014951706}, {"id": 81, "seek": 33120, "start": 351.56, "end": 356.52, "text": " And as an example, he's used a the collections framework, the collections interface or the", "tokens": [51382, 400, 382, 364, 1365, 11, 415, 311, 1143, 257, 264, 16641, 8388, 11, 264, 16641, 9226, 420, 264, 51630], "temperature": 0.0, "avg_logprob": -0.1715646700912647, "compression_ratio": 1.8106796116504855, "no_speech_prob": 0.035138797014951706}, {"id": 82, "seek": 35652, "start": 356.84, "end": 363.52, "text": " collection interface, such as set list map and map entry have this property.", "tokens": [50380, 5765, 9226, 11, 1270, 382, 992, 1329, 4471, 293, 4471, 8729, 362, 341, 4707, 13, 50714], "temperature": 0.0, "avg_logprob": -0.25947983685661763, "compression_ratio": 1.8256410256410256, "no_speech_prob": 0.03788340464234352}, {"id": 83, "seek": 35652, "start": 363.52, "end": 369.44, "text": " So we have this interface that extends the collection generic interface with this is", "tokens": [50714, 407, 321, 362, 341, 9226, 300, 26448, 264, 5765, 19577, 9226, 365, 341, 307, 51010], "temperature": 0.0, "avg_logprob": -0.25947983685661763, "compression_ratio": 1.8256410256410256, "no_speech_prob": 0.03788340464234352}, {"id": 84, "seek": 35652, "start": 369.44, "end": 374.32, "text": " a generic parameter or a generic type.", "tokens": [51010, 257, 19577, 13075, 420, 257, 19577, 2010, 13, 51254], "temperature": 0.0, "avg_logprob": -0.25947983685661763, "compression_ratio": 1.8256410256410256, "no_speech_prob": 0.03788340464234352}, {"id": 85, "seek": 35652, "start": 374.32, "end": 379.88, "text": " And what that does is when we have my set, when we define a new set that implements this", "tokens": [51254, 400, 437, 300, 775, 307, 562, 321, 362, 452, 992, 11, 562, 321, 6964, 257, 777, 992, 300, 704, 17988, 341, 51532], "temperature": 0.0, "avg_logprob": -0.25947983685661763, "compression_ratio": 1.8256410256410256, "no_speech_prob": 0.03788340464234352}, {"id": 86, "seek": 35652, "start": 379.88, "end": 386.44, "text": " set interface that we've declared here, oops, I will declare here.", "tokens": [51532, 992, 9226, 300, 321, 600, 15489, 510, 11, 34166, 11, 286, 486, 19710, 510, 13, 51860], "temperature": 0.0, "avg_logprob": -0.25947983685661763, "compression_ratio": 1.8256410256410256, "no_speech_prob": 0.03788340464234352}, {"id": 87, "seek": 38644, "start": 386.44, "end": 390.88, "text": " In the equals method, as you saw from the previous example, it's the same thing that", "tokens": [50364, 682, 264, 6915, 3170, 11, 382, 291, 1866, 490, 264, 3894, 1365, 11, 309, 311, 264, 912, 551, 300, 50586], "temperature": 0.0, "avg_logprob": -0.17255201793852307, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.02032611146569252}, {"id": 88, "seek": 38644, "start": 390.88, "end": 395.92, "text": " checking if it's an instance of that set interface type.", "tokens": [50586, 8568, 498, 309, 311, 364, 5197, 295, 300, 992, 9226, 2010, 13, 50838], "temperature": 0.0, "avg_logprob": -0.17255201793852307, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.02032611146569252}, {"id": 89, "seek": 38644, "start": 395.92, "end": 400.52, "text": " And only if so, we get to the rest of the equals method, if not, we straight away return", "tokens": [50838, 400, 787, 498, 370, 11, 321, 483, 281, 264, 1472, 295, 264, 6915, 3170, 11, 498, 406, 11, 321, 2997, 1314, 2736, 51068], "temperature": 0.0, "avg_logprob": -0.17255201793852307, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.02032611146569252}, {"id": 90, "seek": 38644, "start": 400.52, "end": 401.52, "text": " faults.", "tokens": [51068, 36090, 13, 51118], "temperature": 0.0, "avg_logprob": -0.17255201793852307, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.02032611146569252}, {"id": 91, "seek": 38644, "start": 401.52, "end": 406.12, "text": " And then the third section of this is, as you've seen in the myriad equals methods that", "tokens": [51118, 400, 550, 264, 2636, 3541, 295, 341, 307, 11, 382, 291, 600, 1612, 294, 264, 452, 45192, 6915, 7150, 300, 51348], "temperature": 0.0, "avg_logprob": -0.17255201793852307, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.02032611146569252}, {"id": 92, "seek": 38644, "start": 406.12, "end": 412.56, "text": " we've used throughout this item is to cast the argument to the correct type.", "tokens": [51348, 321, 600, 1143, 3710, 341, 3174, 307, 281, 4193, 264, 6770, 281, 264, 3006, 2010, 13, 51670], "temperature": 0.0, "avg_logprob": -0.17255201793852307, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.02032611146569252}, {"id": 93, "seek": 41256, "start": 412.56, "end": 418.28000000000003, "text": " So just your block states cast argument to the correct type, because this cast was preceded", "tokens": [50364, 407, 445, 428, 3461, 4368, 4193, 6770, 281, 264, 3006, 2010, 11, 570, 341, 4193, 390, 16969, 292, 50650], "temperature": 0.0, "avg_logprob": -0.1969622630699008, "compression_ratio": 1.7394957983193278, "no_speech_prob": 0.012430296279489994}, {"id": 94, "seek": 41256, "start": 418.28000000000003, "end": 422.44, "text": " by an interface of test, it is guaranteed to succeed.", "tokens": [50650, 538, 364, 9226, 295, 1500, 11, 309, 307, 18031, 281, 7754, 13, 50858], "temperature": 0.0, "avg_logprob": -0.1969622630699008, "compression_ratio": 1.7394957983193278, "no_speech_prob": 0.012430296279489994}, {"id": 95, "seek": 41256, "start": 422.44, "end": 431.04, "text": " So we're passing in the equals method, when we do this check here, sorry, when we do the", "tokens": [50858, 407, 321, 434, 8437, 294, 264, 6915, 3170, 11, 562, 321, 360, 341, 1520, 510, 11, 2597, 11, 562, 321, 360, 264, 51288], "temperature": 0.0, "avg_logprob": -0.1969622630699008, "compression_ratio": 1.7394957983193278, "no_speech_prob": 0.012430296279489994}, {"id": 96, "seek": 41256, "start": 431.04, "end": 436.68, "text": " check here, this ensures that we can do this cast safely without something like a class", "tokens": [51288, 1520, 510, 11, 341, 28111, 300, 321, 393, 360, 341, 4193, 11750, 1553, 746, 411, 257, 1508, 51570], "temperature": 0.0, "avg_logprob": -0.1969622630699008, "compression_ratio": 1.7394957983193278, "no_speech_prob": 0.012430296279489994}, {"id": 97, "seek": 41256, "start": 436.68, "end": 441.88, "text": " cast exception error, because we are checking if it's of the same type, or at least if this", "tokens": [51570, 4193, 11183, 6713, 11, 570, 321, 366, 8568, 498, 309, 311, 295, 264, 912, 2010, 11, 420, 412, 1935, 498, 341, 51830], "temperature": 0.0, "avg_logprob": -0.1969622630699008, "compression_ratio": 1.7394957983193278, "no_speech_prob": 0.012430296279489994}, {"id": 98, "seek": 44188, "start": 441.88, "end": 445.4, "text": " object is of instance of string.", "tokens": [50364, 2657, 307, 295, 5197, 295, 6798, 13, 50540], "temperature": 0.0, "avg_logprob": -0.19853392980431997, "compression_ratio": 1.715, "no_speech_prob": 0.2657448649406433}, {"id": 99, "seek": 44188, "start": 445.4, "end": 451.15999999999997, "text": " And in this case, in fact, because it's not an instance of string, it will not do the", "tokens": [50540, 400, 294, 341, 1389, 11, 294, 1186, 11, 570, 309, 311, 406, 364, 5197, 295, 6798, 11, 309, 486, 406, 360, 264, 50828], "temperature": 0.0, "avg_logprob": -0.19853392980431997, "compression_ratio": 1.715, "no_speech_prob": 0.2657448649406433}, {"id": 100, "seek": 44188, "start": 451.15999999999997, "end": 454.2, "text": " casting, it'll move on to do something else.", "tokens": [50828, 17301, 11, 309, 603, 1286, 322, 281, 360, 746, 1646, 13, 50980], "temperature": 0.0, "avg_logprob": -0.19853392980431997, "compression_ratio": 1.715, "no_speech_prob": 0.2657448649406433}, {"id": 101, "seek": 44188, "start": 454.2, "end": 462.8, "text": " So if we pass some other object apart, other than let's say what we have here, or actually", "tokens": [50980, 407, 498, 321, 1320, 512, 661, 2657, 4936, 11, 661, 813, 718, 311, 584, 437, 321, 362, 510, 11, 420, 767, 51410], "temperature": 0.0, "avg_logprob": -0.19853392980431997, "compression_ratio": 1.715, "no_speech_prob": 0.2657448649406433}, {"id": 102, "seek": 44188, "start": 462.8, "end": 467.2, "text": " sorry, in this case, because we've declared this to be an object is this will go through", "tokens": [51410, 2597, 11, 294, 341, 1389, 11, 570, 321, 600, 15489, 341, 281, 312, 364, 2657, 307, 341, 486, 352, 807, 51630], "temperature": 0.0, "avg_logprob": -0.19853392980431997, "compression_ratio": 1.715, "no_speech_prob": 0.2657448649406433}, {"id": 103, "seek": 46720, "start": 467.2, "end": 474.12, "text": " I apologize, I realized that the type of object is still sorry, the type of OBJ is still off", "tokens": [50364, 286, 12328, 11, 286, 5334, 300, 264, 2010, 295, 2657, 307, 920, 2597, 11, 264, 2010, 295, 35538, 41, 307, 920, 766, 50710], "temperature": 0.0, "avg_logprob": -0.1644276809692383, "compression_ratio": 1.6519823788546255, "no_speech_prob": 0.09666241705417633}, {"id": 104, "seek": 46720, "start": 474.12, "end": 479.56, "text": " type object, which is an instance of string, which is a super type to the string class.", "tokens": [50710, 2010, 2657, 11, 597, 307, 364, 5197, 295, 6798, 11, 597, 307, 257, 1687, 2010, 281, 264, 6798, 1508, 13, 50982], "temperature": 0.0, "avg_logprob": -0.1644276809692383, "compression_ratio": 1.6519823788546255, "no_speech_prob": 0.09666241705417633}, {"id": 105, "seek": 46720, "start": 479.56, "end": 482.03999999999996, "text": " So it'll do the casting here safely.", "tokens": [50982, 407, 309, 603, 360, 264, 17301, 510, 11750, 13, 51106], "temperature": 0.0, "avg_logprob": -0.1644276809692383, "compression_ratio": 1.6519823788546255, "no_speech_prob": 0.09666241705417633}, {"id": 106, "seek": 46720, "start": 482.03999999999996, "end": 485.32, "text": " That's what I was trying to say, that was a bad view of explaining it, but you get the", "tokens": [51106, 663, 311, 437, 286, 390, 1382, 281, 584, 11, 300, 390, 257, 1578, 1910, 295, 13468, 309, 11, 457, 291, 483, 264, 51270], "temperature": 0.0, "avg_logprob": -0.1644276809692383, "compression_ratio": 1.6519823788546255, "no_speech_prob": 0.09666241705417633}, {"id": 107, "seek": 46720, "start": 485.32, "end": 491.12, "text": " point because we've done this test here, the casting should work fine.", "tokens": [51270, 935, 570, 321, 600, 1096, 341, 1500, 510, 11, 264, 17301, 820, 589, 2489, 13, 51560], "temperature": 0.0, "avg_logprob": -0.1644276809692383, "compression_ratio": 1.6519823788546255, "no_speech_prob": 0.09666241705417633}, {"id": 108, "seek": 49112, "start": 491.12, "end": 497.44, "text": " Okay, now we get to the fourth section, the final part of this recipe.", "tokens": [50364, 1033, 11, 586, 321, 483, 281, 264, 6409, 3541, 11, 264, 2572, 644, 295, 341, 6782, 13, 50680], "temperature": 0.0, "avg_logprob": -0.12754352276141828, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.037878647446632385}, {"id": 109, "seek": 49112, "start": 497.44, "end": 503.68, "text": " And this really is most of what part four in this video series is about, because it's", "tokens": [50680, 400, 341, 534, 307, 881, 295, 437, 644, 1451, 294, 341, 960, 2638, 307, 466, 11, 570, 309, 311, 50992], "temperature": 0.0, "avg_logprob": -0.12754352276141828, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.037878647446632385}, {"id": 110, "seek": 49112, "start": 503.68, "end": 509.8, "text": " really the biggest part when it comes to designing a good high quality equals method.", "tokens": [50992, 534, 264, 3880, 644, 562, 309, 1487, 281, 14685, 257, 665, 1090, 3125, 6915, 3170, 13, 51298], "temperature": 0.0, "avg_logprob": -0.12754352276141828, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.037878647446632385}, {"id": 111, "seek": 49112, "start": 509.8, "end": 515.92, "text": " And that is that for each significant field in the class, check if that field of the argument", "tokens": [51298, 400, 300, 307, 300, 337, 1184, 4776, 2519, 294, 264, 1508, 11, 1520, 498, 300, 2519, 295, 264, 6770, 51604], "temperature": 0.0, "avg_logprob": -0.12754352276141828, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.037878647446632385}, {"id": 112, "seek": 49112, "start": 515.92, "end": 519.32, "text": " matches the corresponding field of this object.", "tokens": [51604, 10676, 264, 11760, 2519, 295, 341, 2657, 13, 51774], "temperature": 0.0, "avg_logprob": -0.12754352276141828, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.037878647446632385}, {"id": 113, "seek": 51932, "start": 519.32, "end": 525.0400000000001, "text": " Now before we get to the definitions defined by man, this dog really is annoying me.", "tokens": [50364, 823, 949, 321, 483, 281, 264, 21988, 7642, 538, 587, 11, 341, 3000, 534, 307, 11304, 385, 13, 50650], "temperature": 0.0, "avg_logprob": -0.20165242205609332, "compression_ratio": 1.6238532110091743, "no_speech_prob": 0.01770751178264618}, {"id": 114, "seek": 51932, "start": 525.0400000000001, "end": 530.6, "text": " I apologize, I tried to reduce background noise when editing the video, but it is quite", "tokens": [50650, 286, 12328, 11, 286, 3031, 281, 5407, 3678, 5658, 562, 10000, 264, 960, 11, 457, 309, 307, 1596, 50928], "temperature": 0.0, "avg_logprob": -0.20165242205609332, "compression_ratio": 1.6238532110091743, "no_speech_prob": 0.01770751178264618}, {"id": 115, "seek": 51932, "start": 530.6, "end": 531.6, "text": " distracting.", "tokens": [50928, 36689, 13, 50978], "temperature": 0.0, "avg_logprob": -0.20165242205609332, "compression_ratio": 1.6238532110091743, "no_speech_prob": 0.01770751178264618}, {"id": 116, "seek": 51932, "start": 531.6, "end": 535.7600000000001, "text": " Anyway, getting back to this, getting back to this.", "tokens": [50978, 5684, 11, 1242, 646, 281, 341, 11, 1242, 646, 281, 341, 13, 51186], "temperature": 0.0, "avg_logprob": -0.20165242205609332, "compression_ratio": 1.6238532110091743, "no_speech_prob": 0.01770751178264618}, {"id": 117, "seek": 51932, "start": 535.7600000000001, "end": 542.8000000000001, "text": " So before I read the kind of formal definition in the book, let's quickly take a look at", "tokens": [51186, 407, 949, 286, 1401, 264, 733, 295, 9860, 7123, 294, 264, 1446, 11, 718, 311, 2661, 747, 257, 574, 412, 51538], "temperature": 0.0, "avg_logprob": -0.20165242205609332, "compression_ratio": 1.6238532110091743, "no_speech_prob": 0.01770751178264618}, {"id": 118, "seek": 51932, "start": 542.8000000000001, "end": 544.24, "text": " a demo that I put together.", "tokens": [51538, 257, 10723, 300, 286, 829, 1214, 13, 51610], "temperature": 0.0, "avg_logprob": -0.20165242205609332, "compression_ratio": 1.6238532110091743, "no_speech_prob": 0.01770751178264618}, {"id": 119, "seek": 54424, "start": 544.24, "end": 551.4, "text": " So what we have here, we have here a, I'm quite distracted today, I apologize, it's", "tokens": [50364, 407, 437, 321, 362, 510, 11, 321, 362, 510, 257, 11, 286, 478, 1596, 21658, 965, 11, 286, 12328, 11, 309, 311, 50722], "temperature": 0.0, "avg_logprob": -0.18093698103349287, "compression_ratio": 1.707070707070707, "no_speech_prob": 0.008846182376146317}, {"id": 120, "seek": 54424, "start": 551.4, "end": 556.92, "text": " like a lot going on despite me living in a very quiet neighborhood.", "tokens": [50722, 411, 257, 688, 516, 322, 7228, 385, 2647, 294, 257, 588, 5677, 7630, 13, 50998], "temperature": 0.0, "avg_logprob": -0.18093698103349287, "compression_ratio": 1.707070707070707, "no_speech_prob": 0.008846182376146317}, {"id": 121, "seek": 54424, "start": 556.92, "end": 564.12, "text": " So what we have here is a class that I've called class person and it's got a private", "tokens": [50998, 407, 437, 321, 362, 510, 307, 257, 1508, 300, 286, 600, 1219, 1508, 954, 293, 309, 311, 658, 257, 4551, 51358], "temperature": 0.0, "avg_logprob": -0.18093698103349287, "compression_ratio": 1.707070707070707, "no_speech_prob": 0.008846182376146317}, {"id": 122, "seek": 54424, "start": 564.12, "end": 570.36, "text": " field string, a private field called string and of type int.", "tokens": [51358, 2519, 6798, 11, 257, 4551, 2519, 1219, 6798, 293, 295, 2010, 560, 13, 51670], "temperature": 0.0, "avg_logprob": -0.18093698103349287, "compression_ratio": 1.707070707070707, "no_speech_prob": 0.008846182376146317}, {"id": 123, "seek": 54424, "start": 570.36, "end": 573.52, "text": " So keep in mind that's a primitive type.", "tokens": [51670, 407, 1066, 294, 1575, 300, 311, 257, 28540, 2010, 13, 51828], "temperature": 0.0, "avg_logprob": -0.18093698103349287, "compression_ratio": 1.707070707070707, "no_speech_prob": 0.008846182376146317}, {"id": 124, "seek": 57352, "start": 573.52, "end": 579.6, "text": " Then we also have the equals method and then you'll first see, so in the equals method,", "tokens": [50364, 1396, 321, 611, 362, 264, 6915, 3170, 293, 550, 291, 603, 700, 536, 11, 370, 294, 264, 6915, 3170, 11, 50668], "temperature": 0.0, "avg_logprob": -0.14648367694972717, "compression_ratio": 1.8209606986899562, "no_speech_prob": 0.016651133075356483}, {"id": 125, "seek": 57352, "start": 579.6, "end": 585.0799999999999, "text": " as we discussed in the previous sections, we're doing first the memory reference check", "tokens": [50668, 382, 321, 7152, 294, 264, 3894, 10863, 11, 321, 434, 884, 700, 264, 4675, 6408, 1520, 50942], "temperature": 0.0, "avg_logprob": -0.14648367694972717, "compression_ratio": 1.8209606986899562, "no_speech_prob": 0.016651133075356483}, {"id": 126, "seek": 57352, "start": 585.0799999999999, "end": 590.52, "text": " and then we're doing the instance of check that gets us across many things.", "tokens": [50942, 293, 550, 321, 434, 884, 264, 5197, 295, 1520, 300, 2170, 505, 2108, 867, 721, 13, 51214], "temperature": 0.0, "avg_logprob": -0.14648367694972717, "compression_ratio": 1.8209606986899562, "no_speech_prob": 0.016651133075356483}, {"id": 127, "seek": 57352, "start": 590.52, "end": 595.0799999999999, "text": " It first tells us that here that these two are in fact two different objects.", "tokens": [51214, 467, 700, 5112, 505, 300, 510, 300, 613, 732, 366, 294, 1186, 732, 819, 6565, 13, 51442], "temperature": 0.0, "avg_logprob": -0.14648367694972717, "compression_ratio": 1.8209606986899562, "no_speech_prob": 0.016651133075356483}, {"id": 128, "seek": 57352, "start": 595.0799999999999, "end": 601.72, "text": " If it returns false and here it says, despite them being two different objects or having", "tokens": [51442, 759, 309, 11247, 7908, 293, 510, 309, 1619, 11, 7228, 552, 885, 732, 819, 6565, 420, 1419, 51774], "temperature": 0.0, "avg_logprob": -0.14648367694972717, "compression_ratio": 1.8209606986899562, "no_speech_prob": 0.016651133075356483}, {"id": 129, "seek": 60172, "start": 601.72, "end": 604.64, "text": " two different memory locations, they are of the same type.", "tokens": [50364, 732, 819, 4675, 9253, 11, 436, 366, 295, 264, 912, 2010, 13, 50510], "temperature": 0.0, "avg_logprob": -0.14108718207123083, "compression_ratio": 1.693798449612403, "no_speech_prob": 0.18697184324264526}, {"id": 130, "seek": 60172, "start": 604.64, "end": 605.64, "text": " That's good.", "tokens": [50510, 663, 311, 665, 13, 50560], "temperature": 0.0, "avg_logprob": -0.14108718207123083, "compression_ratio": 1.693798449612403, "no_speech_prob": 0.18697184324264526}, {"id": 131, "seek": 60172, "start": 605.64, "end": 611.6800000000001, "text": " Now we get to the comparison and here really what this means is, as you can see, so after", "tokens": [50560, 823, 321, 483, 281, 264, 9660, 293, 510, 534, 437, 341, 1355, 307, 11, 382, 291, 393, 536, 11, 370, 934, 50862], "temperature": 0.0, "avg_logprob": -0.14108718207123083, "compression_ratio": 1.693798449612403, "no_speech_prob": 0.18697184324264526}, {"id": 132, "seek": 60172, "start": 611.6800000000001, "end": 618.0, "text": " doing the casting, so the object that we get, we cast it to of type person, each significant", "tokens": [50862, 884, 264, 17301, 11, 370, 264, 2657, 300, 321, 483, 11, 321, 4193, 309, 281, 295, 2010, 954, 11, 1184, 4776, 51178], "temperature": 0.0, "avg_logprob": -0.14108718207123083, "compression_ratio": 1.693798449612403, "no_speech_prob": 0.18697184324264526}, {"id": 133, "seek": 60172, "start": 618.0, "end": 623.5600000000001, "text": " field and that is, that really is something we need to think of in terms of logic, which", "tokens": [51178, 2519, 293, 300, 307, 11, 300, 534, 307, 746, 321, 643, 281, 519, 295, 294, 2115, 295, 9952, 11, 597, 51456], "temperature": 0.0, "avg_logprob": -0.14108718207123083, "compression_ratio": 1.693798449612403, "no_speech_prob": 0.18697184324264526}, {"id": 134, "seek": 60172, "start": 623.5600000000001, "end": 630.5600000000001, "text": " is why initially in this item, we discussed concepts such as logical equality and equivalence", "tokens": [51456, 307, 983, 9105, 294, 341, 3174, 11, 321, 7152, 10392, 1270, 382, 14978, 14949, 293, 9052, 655, 51806], "temperature": 0.0, "avg_logprob": -0.14108718207123083, "compression_ratio": 1.693798449612403, "no_speech_prob": 0.18697184324264526}, {"id": 135, "seek": 63056, "start": 630.56, "end": 636.8399999999999, "text": " relations because this call here, each significant field or each field that's significant is", "tokens": [50364, 2299, 570, 341, 818, 510, 11, 1184, 4776, 2519, 420, 1184, 2519, 300, 311, 4776, 307, 50678], "temperature": 0.0, "avg_logprob": -0.16458808416607737, "compression_ratio": 1.669811320754717, "no_speech_prob": 0.007343815639615059}, {"id": 136, "seek": 63056, "start": 636.8399999999999, "end": 638.0, "text": " compared.", "tokens": [50678, 5347, 13, 50736], "temperature": 0.0, "avg_logprob": -0.16458808416607737, "compression_ratio": 1.669811320754717, "no_speech_prob": 0.007343815639615059}, {"id": 137, "seek": 63056, "start": 638.0, "end": 642.1199999999999, "text": " That's a call that we as the designer of the equals method has to make.", "tokens": [50736, 663, 311, 257, 818, 300, 321, 382, 264, 11795, 295, 264, 6915, 3170, 575, 281, 652, 13, 50942], "temperature": 0.0, "avg_logprob": -0.16458808416607737, "compression_ratio": 1.669811320754717, "no_speech_prob": 0.007343815639615059}, {"id": 138, "seek": 63056, "start": 642.1199999999999, "end": 647.8399999999999, "text": " So obviously when we're comparing, let's say two people or two persons in this case, we've", "tokens": [50942, 407, 2745, 562, 321, 434, 15763, 11, 718, 311, 584, 732, 561, 420, 732, 14453, 294, 341, 1389, 11, 321, 600, 51228], "temperature": 0.0, "avg_logprob": -0.16458808416607737, "compression_ratio": 1.669811320754717, "no_speech_prob": 0.007343815639615059}, {"id": 139, "seek": 63056, "start": 647.8399999999999, "end": 653.3599999999999, "text": " made the call that the name and the age are required for logical equality, which is why,", "tokens": [51228, 1027, 264, 818, 300, 264, 1315, 293, 264, 3205, 366, 4739, 337, 14978, 14949, 11, 597, 307, 983, 11, 51504], "temperature": 0.0, "avg_logprob": -0.16458808416607737, "compression_ratio": 1.669811320754717, "no_speech_prob": 0.007343815639615059}, {"id": 140, "seek": 65336, "start": 653.36, "end": 660.6800000000001, "text": " if you look at line number 20, we're checking to see if both name and both age are equal", "tokens": [50364, 498, 291, 574, 412, 1622, 1230, 945, 11, 321, 434, 8568, 281, 536, 498, 1293, 1315, 293, 1293, 3205, 366, 2681, 50730], "temperature": 0.0, "avg_logprob": -0.14110234640177013, "compression_ratio": 1.5819672131147542, "no_speech_prob": 0.26561740040779114}, {"id": 141, "seek": 65336, "start": 660.6800000000001, "end": 666.4, "text": " and only if it's equal do we pass through and you probably can see here also, when it", "tokens": [50730, 293, 787, 498, 309, 311, 2681, 360, 321, 1320, 807, 293, 291, 1391, 393, 536, 510, 611, 11, 562, 309, 51016], "temperature": 0.0, "avg_logprob": -0.14110234640177013, "compression_ratio": 1.5819672131147542, "no_speech_prob": 0.26561740040779114}, {"id": 142, "seek": 65336, "start": 666.4, "end": 673.84, "text": " comes to age, I'm using a double equals operator, not the equals keyword because it's a primitive", "tokens": [51016, 1487, 281, 3205, 11, 286, 478, 1228, 257, 3834, 6915, 12973, 11, 406, 264, 6915, 20428, 570, 309, 311, 257, 28540, 51388], "temperature": 0.0, "avg_logprob": -0.14110234640177013, "compression_ratio": 1.5819672131147542, "no_speech_prob": 0.26561740040779114}, {"id": 143, "seek": 65336, "start": 673.84, "end": 674.84, "text": " type.", "tokens": [51388, 2010, 13, 51438], "temperature": 0.0, "avg_logprob": -0.14110234640177013, "compression_ratio": 1.5819672131147542, "no_speech_prob": 0.26561740040779114}, {"id": 144, "seek": 65336, "start": 674.84, "end": 675.84, "text": " It's not an object.", "tokens": [51438, 467, 311, 406, 364, 2657, 13, 51488], "temperature": 0.0, "avg_logprob": -0.14110234640177013, "compression_ratio": 1.5819672131147542, "no_speech_prob": 0.26561740040779114}, {"id": 145, "seek": 65336, "start": 675.84, "end": 680.12, "text": " So accordingly, Joshua Block states, if the type in step two, which is the previous one", "tokens": [51488, 407, 19717, 11, 24005, 17500, 4368, 11, 498, 264, 2010, 294, 1823, 732, 11, 597, 307, 264, 3894, 472, 51702], "temperature": 0.0, "avg_logprob": -0.14110234640177013, "compression_ratio": 1.5819672131147542, "no_speech_prob": 0.26561740040779114}, {"id": 146, "seek": 68012, "start": 680.12, "end": 691.5600000000001, "text": " we discussed, that is, yeah, the instance of check, if the type in step two is an interface,", "tokens": [50364, 321, 7152, 11, 300, 307, 11, 1338, 11, 264, 5197, 295, 1520, 11, 498, 264, 2010, 294, 1823, 732, 307, 364, 9226, 11, 50936], "temperature": 0.0, "avg_logprob": -0.15673860283785088, "compression_ratio": 1.6780487804878048, "no_speech_prob": 0.21186064183712006}, {"id": 147, "seek": 68012, "start": 691.5600000000001, "end": 695.52, "text": " you must access the arguments fields via interface methods.", "tokens": [50936, 291, 1633, 2105, 264, 12869, 7909, 5766, 9226, 7150, 13, 51134], "temperature": 0.0, "avg_logprob": -0.15673860283785088, "compression_ratio": 1.6780487804878048, "no_speech_prob": 0.21186064183712006}, {"id": 148, "seek": 68012, "start": 695.52, "end": 700.08, "text": " If the type is a class, you may be able to access the fields directly depending on their", "tokens": [51134, 759, 264, 2010, 307, 257, 1508, 11, 291, 815, 312, 1075, 281, 2105, 264, 7909, 3838, 5413, 322, 641, 51362], "temperature": 0.0, "avg_logprob": -0.15673860283785088, "compression_ratio": 1.6780487804878048, "no_speech_prob": 0.21186064183712006}, {"id": 149, "seek": 68012, "start": 700.08, "end": 701.84, "text": " accessibility.", "tokens": [51362, 15002, 13, 51450], "temperature": 0.0, "avg_logprob": -0.15673860283785088, "compression_ratio": 1.6780487804878048, "no_speech_prob": 0.21186064183712006}, {"id": 150, "seek": 68012, "start": 701.84, "end": 707.8, "text": " And then he says, for primitive fields, whose type is not float or double and we'll get", "tokens": [51450, 400, 550, 415, 1619, 11, 337, 28540, 7909, 11, 6104, 2010, 307, 406, 15706, 420, 3834, 293, 321, 603, 483, 51748], "temperature": 0.0, "avg_logprob": -0.15673860283785088, "compression_ratio": 1.6780487804878048, "no_speech_prob": 0.21186064183712006}, {"id": 151, "seek": 70780, "start": 707.8, "end": 714.64, "text": " into why that's the case, use the double equals operator for comparisons, which is what I've", "tokens": [50364, 666, 983, 300, 311, 264, 1389, 11, 764, 264, 3834, 6915, 12973, 337, 33157, 11, 597, 307, 437, 286, 600, 50706], "temperature": 0.0, "avg_logprob": -0.20413749072016502, "compression_ratio": 1.5458333333333334, "no_speech_prob": 0.20931535959243774}, {"id": 152, "seek": 70780, "start": 714.64, "end": 715.64, "text": " done here.", "tokens": [50706, 1096, 510, 13, 50756], "temperature": 0.0, "avg_logprob": -0.20413749072016502, "compression_ratio": 1.5458333333333334, "no_speech_prob": 0.20931535959243774}, {"id": 153, "seek": 70780, "start": 715.64, "end": 717.9599999999999, "text": " As you can see, I already made that point.", "tokens": [50756, 1018, 291, 393, 536, 11, 286, 1217, 1027, 300, 935, 13, 50872], "temperature": 0.0, "avg_logprob": -0.20413749072016502, "compression_ratio": 1.5458333333333334, "no_speech_prob": 0.20931535959243774}, {"id": 154, "seek": 70780, "start": 717.9599999999999, "end": 722.28, "text": " I apologize if I didn't too kind of over repeat points, but I think it's important, you know,", "tokens": [50872, 286, 12328, 498, 286, 994, 380, 886, 733, 295, 670, 7149, 2793, 11, 457, 286, 519, 309, 311, 1021, 11, 291, 458, 11, 51088], "temperature": 0.0, "avg_logprob": -0.20413749072016502, "compression_ratio": 1.5458333333333334, "no_speech_prob": 0.20931535959243774}, {"id": 155, "seek": 70780, "start": 722.28, "end": 728.4, "text": " repetition is the key to truly grogging concept.", "tokens": [51088, 30432, 307, 264, 2141, 281, 4908, 4634, 70, 3249, 3410, 13, 51394], "temperature": 0.0, "avg_logprob": -0.20413749072016502, "compression_ratio": 1.5458333333333334, "no_speech_prob": 0.20931535959243774}, {"id": 156, "seek": 70780, "start": 728.4, "end": 734.5999999999999, "text": " And we continue, for object reference fields, call the equals method recursively.", "tokens": [51394, 400, 321, 2354, 11, 337, 2657, 6408, 7909, 11, 818, 264, 6915, 3170, 20560, 3413, 13, 51704], "temperature": 0.0, "avg_logprob": -0.20413749072016502, "compression_ratio": 1.5458333333333334, "no_speech_prob": 0.20931535959243774}, {"id": 157, "seek": 73460, "start": 734.6, "end": 739.84, "text": " For float fields, use the static float.compare method.", "tokens": [50364, 1171, 15706, 7909, 11, 764, 264, 13437, 15706, 13, 21541, 543, 3170, 13, 50626], "temperature": 0.0, "avg_logprob": -0.17100259029504025, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.05499869957566261}, {"id": 158, "seek": 73460, "start": 739.84, "end": 743.44, "text": " And for double fields, use the double.compare method.", "tokens": [50626, 400, 337, 3834, 7909, 11, 764, 264, 3834, 13, 21541, 543, 3170, 13, 50806], "temperature": 0.0, "avg_logprob": -0.17100259029504025, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.05499869957566261}, {"id": 159, "seek": 73460, "start": 743.44, "end": 744.44, "text": " So why is that?", "tokens": [50806, 407, 983, 307, 300, 30, 50856], "temperature": 0.0, "avg_logprob": -0.17100259029504025, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.05499869957566261}, {"id": 160, "seek": 73460, "start": 744.44, "end": 750.4, "text": " Why do we have to, why is there an exception for float or double fields in this case?", "tokens": [50856, 1545, 360, 321, 362, 281, 11, 983, 307, 456, 364, 11183, 337, 15706, 420, 3834, 7909, 294, 341, 1389, 30, 51154], "temperature": 0.0, "avg_logprob": -0.17100259029504025, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.05499869957566261}, {"id": 161, "seek": 73460, "start": 750.4, "end": 752.2, "text": " The reason is because of auto boxing.", "tokens": [51154, 440, 1778, 307, 570, 295, 8399, 24424, 13, 51244], "temperature": 0.0, "avg_logprob": -0.17100259029504025, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.05499869957566261}, {"id": 162, "seek": 73460, "start": 752.2, "end": 757.08, "text": " However, before we get to that part, let's first look at a quick example of what all", "tokens": [51244, 2908, 11, 949, 321, 483, 281, 300, 644, 11, 718, 311, 700, 574, 412, 257, 1702, 1365, 295, 437, 439, 51488], "temperature": 0.0, "avg_logprob": -0.17100259029504025, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.05499869957566261}, {"id": 163, "seek": 73460, "start": 757.08, "end": 758.08, "text": " of this is.", "tokens": [51488, 295, 341, 307, 13, 51538], "temperature": 0.0, "avg_logprob": -0.17100259029504025, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.05499869957566261}, {"id": 164, "seek": 75808, "start": 758.08, "end": 764.1600000000001, "text": " So here, we have a class called bank account, and we have three fields, three significant", "tokens": [50364, 407, 510, 11, 321, 362, 257, 1508, 1219, 3765, 2696, 11, 293, 321, 362, 1045, 7909, 11, 1045, 4776, 50668], "temperature": 0.0, "avg_logprob": -0.20041900873184204, "compression_ratio": 1.8814229249011858, "no_speech_prob": 0.17997747659683228}, {"id": 165, "seek": 75808, "start": 764.1600000000001, "end": 765.5200000000001, "text": " fields, keep in mind.", "tokens": [50668, 7909, 11, 1066, 294, 1575, 13, 50736], "temperature": 0.0, "avg_logprob": -0.20041900873184204, "compression_ratio": 1.8814229249011858, "no_speech_prob": 0.17997747659683228}, {"id": 166, "seek": 75808, "start": 765.5200000000001, "end": 767.9200000000001, "text": " We have the account number, which is a string.", "tokens": [50736, 492, 362, 264, 2696, 1230, 11, 597, 307, 257, 6798, 13, 50856], "temperature": 0.0, "avg_logprob": -0.20041900873184204, "compression_ratio": 1.8814229249011858, "no_speech_prob": 0.17997747659683228}, {"id": 167, "seek": 75808, "start": 767.9200000000001, "end": 771.84, "text": " We have balance, which is of type double.", "tokens": [50856, 492, 362, 4772, 11, 597, 307, 295, 2010, 3834, 13, 51052], "temperature": 0.0, "avg_logprob": -0.20041900873184204, "compression_ratio": 1.8814229249011858, "no_speech_prob": 0.17997747659683228}, {"id": 168, "seek": 75808, "start": 771.84, "end": 774.12, "text": " And then we have a Boolean value called is active.", "tokens": [51052, 400, 550, 321, 362, 257, 23351, 28499, 2158, 1219, 307, 4967, 13, 51166], "temperature": 0.0, "avg_logprob": -0.20041900873184204, "compression_ratio": 1.8814229249011858, "no_speech_prob": 0.17997747659683228}, {"id": 169, "seek": 75808, "start": 774.12, "end": 776.5200000000001, "text": " So again, we're doing the checks here and equals method.", "tokens": [51166, 407, 797, 11, 321, 434, 884, 264, 13834, 510, 293, 6915, 3170, 13, 51286], "temperature": 0.0, "avg_logprob": -0.20041900873184204, "compression_ratio": 1.8814229249011858, "no_speech_prob": 0.17997747659683228}, {"id": 170, "seek": 75808, "start": 776.5200000000001, "end": 782.9200000000001, "text": " We're doing the casting in line number 17, should I zoom in a bit, line number 17.", "tokens": [51286, 492, 434, 884, 264, 17301, 294, 1622, 1230, 3282, 11, 820, 286, 8863, 294, 257, 857, 11, 1622, 1230, 3282, 13, 51606], "temperature": 0.0, "avg_logprob": -0.20041900873184204, "compression_ratio": 1.8814229249011858, "no_speech_prob": 0.17997747659683228}, {"id": 171, "seek": 75808, "start": 782.9200000000001, "end": 787.76, "text": " And then when comparing the Boolean value because it's a primitive type, we're doing", "tokens": [51606, 400, 550, 562, 15763, 264, 23351, 28499, 2158, 570, 309, 311, 257, 28540, 2010, 11, 321, 434, 884, 51848], "temperature": 0.0, "avg_logprob": -0.20041900873184204, "compression_ratio": 1.8814229249011858, "no_speech_prob": 0.17997747659683228}, {"id": 172, "seek": 78776, "start": 788.4399999999999, "end": 789.4399999999999, "text": " the equals operator.", "tokens": [50398, 264, 6915, 12973, 13, 50448], "temperature": 0.0, "avg_logprob": -0.21989253960033456, "compression_ratio": 1.6542056074766356, "no_speech_prob": 0.024351494386792183}, {"id": 173, "seek": 78776, "start": 789.4399999999999, "end": 792.56, "text": " We're saying, if it's not equals, return false.", "tokens": [50448, 492, 434, 1566, 11, 498, 309, 311, 406, 6915, 11, 2736, 7908, 13, 50604], "temperature": 0.0, "avg_logprob": -0.21989253960033456, "compression_ratio": 1.6542056074766356, "no_speech_prob": 0.024351494386792183}, {"id": 174, "seek": 78776, "start": 792.56, "end": 798.64, "text": " And BA is, by the way, the other object that we've got here after the casting.", "tokens": [50604, 400, 21050, 307, 11, 538, 264, 636, 11, 264, 661, 2657, 300, 321, 600, 658, 510, 934, 264, 17301, 13, 50908], "temperature": 0.0, "avg_logprob": -0.21989253960033456, "compression_ratio": 1.6542056074766356, "no_speech_prob": 0.024351494386792183}, {"id": 175, "seek": 78776, "start": 798.64, "end": 805.52, "text": " And then in the account number, we're using the normal equals method that is in the object", "tokens": [50908, 400, 550, 294, 264, 2696, 1230, 11, 321, 434, 1228, 264, 2710, 6915, 3170, 300, 307, 294, 264, 2657, 51252], "temperature": 0.0, "avg_logprob": -0.21989253960033456, "compression_ratio": 1.6542056074766356, "no_speech_prob": 0.024351494386792183}, {"id": 176, "seek": 78776, "start": 805.52, "end": 807.28, "text": " superclass.", "tokens": [51252, 1687, 11665, 13, 51340], "temperature": 0.0, "avg_logprob": -0.21989253960033456, "compression_ratio": 1.6542056074766356, "no_speech_prob": 0.024351494386792183}, {"id": 177, "seek": 78776, "start": 807.28, "end": 808.28, "text": " And that's fine.", "tokens": [51340, 400, 300, 311, 2489, 13, 51390], "temperature": 0.0, "avg_logprob": -0.21989253960033456, "compression_ratio": 1.6542056074766356, "no_speech_prob": 0.024351494386792183}, {"id": 178, "seek": 78776, "start": 808.28, "end": 814.12, "text": " But here, as we've been advised by Joshua Block, we're using the double.compare static", "tokens": [51390, 583, 510, 11, 382, 321, 600, 668, 26269, 538, 24005, 17500, 11, 321, 434, 1228, 264, 3834, 13, 21541, 543, 13437, 51682], "temperature": 0.0, "avg_logprob": -0.21989253960033456, "compression_ratio": 1.6542056074766356, "no_speech_prob": 0.024351494386792183}, {"id": 179, "seek": 81412, "start": 814.12, "end": 820.96, "text": " method instead of using the equals method, because, well, by the way, what this does", "tokens": [50364, 3170, 2602, 295, 1228, 264, 6915, 3170, 11, 570, 11, 731, 11, 538, 264, 636, 11, 437, 341, 775, 50706], "temperature": 0.0, "avg_logprob": -0.23861778329271788, "compression_ratio": 1.7811158798283262, "no_speech_prob": 0.026351895183324814}, {"id": 180, "seek": 81412, "start": 820.96, "end": 822.84, "text": " is it returns a true or false.", "tokens": [50706, 307, 309, 11247, 257, 2074, 420, 7908, 13, 50800], "temperature": 0.0, "avg_logprob": -0.23861778329271788, "compression_ratio": 1.7811158798283262, "no_speech_prob": 0.026351895183324814}, {"id": 181, "seek": 81412, "start": 822.84, "end": 830.32, "text": " Sorry, I should put the proviso that it returns a true or false essentially or for all intents", "tokens": [50800, 4919, 11, 286, 820, 829, 264, 1439, 19227, 300, 309, 11247, 257, 2074, 420, 7908, 4476, 420, 337, 439, 560, 791, 51174], "temperature": 0.0, "avg_logprob": -0.23861778329271788, "compression_ratio": 1.7811158798283262, "no_speech_prob": 0.026351895183324814}, {"id": 182, "seek": 81412, "start": 830.32, "end": 833.08, "text": " and purposes in our equals method, because it actually doesn't.", "tokens": [51174, 293, 9932, 294, 527, 6915, 3170, 11, 570, 309, 767, 1177, 380, 13, 51312], "temperature": 0.0, "avg_logprob": -0.23861778329271788, "compression_ratio": 1.7811158798283262, "no_speech_prob": 0.026351895183324814}, {"id": 183, "seek": 81412, "start": 833.08, "end": 837.88, "text": " It returns an int value if you look at the method, what it checks for if it's greater", "tokens": [51312, 467, 11247, 364, 560, 2158, 498, 291, 574, 412, 264, 3170, 11, 437, 309, 13834, 337, 498, 309, 311, 5044, 51552], "temperature": 0.0, "avg_logprob": -0.23861778329271788, "compression_ratio": 1.7811158798283262, "no_speech_prob": 0.026351895183324814}, {"id": 184, "seek": 81412, "start": 837.88, "end": 838.88, "text": " or less than.", "tokens": [51552, 420, 1570, 813, 13, 51602], "temperature": 0.0, "avg_logprob": -0.23861778329271788, "compression_ratio": 1.7811158798283262, "no_speech_prob": 0.026351895183324814}, {"id": 185, "seek": 81412, "start": 838.88, "end": 840.64, "text": " And accordingly, it'll return something.", "tokens": [51602, 400, 19717, 11, 309, 603, 2736, 746, 13, 51690], "temperature": 0.0, "avg_logprob": -0.23861778329271788, "compression_ratio": 1.7811158798283262, "no_speech_prob": 0.026351895183324814}, {"id": 186, "seek": 84064, "start": 840.64, "end": 845.84, "text": " However, if it's not equal to zero, that means there's a difference.", "tokens": [50364, 2908, 11, 498, 309, 311, 406, 2681, 281, 4018, 11, 300, 1355, 456, 311, 257, 2649, 13, 50624], "temperature": 0.0, "avg_logprob": -0.17602574927175146, "compression_ratio": 1.9589041095890412, "no_speech_prob": 0.05581042915582657}, {"id": 187, "seek": 84064, "start": 845.84, "end": 847.08, "text": " Therefore, it'll return false.", "tokens": [50624, 7504, 11, 309, 603, 2736, 7908, 13, 50686], "temperature": 0.0, "avg_logprob": -0.17602574927175146, "compression_ratio": 1.9589041095890412, "no_speech_prob": 0.05581042915582657}, {"id": 188, "seek": 84064, "start": 847.08, "end": 853.16, "text": " But if it's as in the function of the return false, but if it's equal to zero, that means", "tokens": [50686, 583, 498, 309, 311, 382, 294, 264, 2445, 295, 264, 2736, 7908, 11, 457, 498, 309, 311, 2681, 281, 4018, 11, 300, 1355, 50990], "temperature": 0.0, "avg_logprob": -0.17602574927175146, "compression_ratio": 1.9589041095890412, "no_speech_prob": 0.05581042915582657}, {"id": 189, "seek": 84064, "start": 853.16, "end": 857.76, "text": " it's the same value or it's the same double value.", "tokens": [50990, 309, 311, 264, 912, 2158, 420, 309, 311, 264, 912, 3834, 2158, 13, 51220], "temperature": 0.0, "avg_logprob": -0.17602574927175146, "compression_ratio": 1.9589041095890412, "no_speech_prob": 0.05581042915582657}, {"id": 190, "seek": 84064, "start": 857.76, "end": 861.56, "text": " Therefore, it'll just keep going and return true in the equals method.", "tokens": [51220, 7504, 11, 309, 603, 445, 1066, 516, 293, 2736, 2074, 294, 264, 6915, 3170, 13, 51410], "temperature": 0.0, "avg_logprob": -0.17602574927175146, "compression_ratio": 1.9589041095890412, "no_speech_prob": 0.05581042915582657}, {"id": 191, "seek": 84064, "start": 861.56, "end": 866.04, "text": " So what it looks for is a difference in the two parameters or the two values you pass", "tokens": [51410, 407, 437, 309, 1542, 337, 307, 257, 2649, 294, 264, 732, 9834, 420, 264, 732, 4190, 291, 1320, 51634], "temperature": 0.0, "avg_logprob": -0.17602574927175146, "compression_ratio": 1.9589041095890412, "no_speech_prob": 0.05581042915582657}, {"id": 192, "seek": 84064, "start": 866.04, "end": 868.56, "text": " to the double.compare function.", "tokens": [51634, 281, 264, 3834, 13, 21541, 543, 2445, 13, 51760], "temperature": 0.0, "avg_logprob": -0.17602574927175146, "compression_ratio": 1.9589041095890412, "no_speech_prob": 0.05581042915582657}, {"id": 193, "seek": 86856, "start": 868.56, "end": 873.88, "text": " But then to understand a bit more why it's better using this double.compare static method", "tokens": [50364, 583, 550, 281, 1223, 257, 857, 544, 983, 309, 311, 1101, 1228, 341, 3834, 13, 21541, 543, 13437, 3170, 50630], "temperature": 0.0, "avg_logprob": -0.13945016743224345, "compression_ratio": 1.7623762376237624, "no_speech_prob": 0.023679083213210106}, {"id": 194, "seek": 86856, "start": 873.88, "end": 879.28, "text": " instead of using the double equals operator or the equals method, let's say, it's because", "tokens": [50630, 2602, 295, 1228, 264, 3834, 6915, 12973, 420, 264, 6915, 3170, 11, 718, 311, 584, 11, 309, 311, 570, 50900], "temperature": 0.0, "avg_logprob": -0.13945016743224345, "compression_ratio": 1.7623762376237624, "no_speech_prob": 0.023679083213210106}, {"id": 195, "seek": 86856, "start": 879.28, "end": 886.64, "text": " of auto boxing, because if we do use the double equals operator for primitive fields that", "tokens": [50900, 295, 8399, 24424, 11, 570, 498, 321, 360, 764, 264, 3834, 6915, 12973, 337, 28540, 7909, 300, 51268], "temperature": 0.0, "avg_logprob": -0.13945016743224345, "compression_ratio": 1.7623762376237624, "no_speech_prob": 0.023679083213210106}, {"id": 196, "seek": 86856, "start": 886.64, "end": 891.28, "text": " are float or double, an auto box will take place where the compiler will automatically", "tokens": [51268, 366, 15706, 420, 3834, 11, 364, 8399, 2424, 486, 747, 1081, 689, 264, 31958, 486, 6772, 51500], "temperature": 0.0, "avg_logprob": -0.13945016743224345, "compression_ratio": 1.7623762376237624, "no_speech_prob": 0.023679083213210106}, {"id": 197, "seek": 89128, "start": 891.28, "end": 897.9599999999999, "text": " convert these primitive types to the corresponding wrapper class types.", "tokens": [50364, 7620, 613, 28540, 3467, 281, 264, 11760, 46906, 1508, 3467, 13, 50698], "temperature": 0.0, "avg_logprob": -0.16678137249416775, "compression_ratio": 1.6844262295081966, "no_speech_prob": 0.34487852454185486}, {"id": 198, "seek": 89128, "start": 897.9599999999999, "end": 898.9599999999999, "text": " And that is costly.", "tokens": [50698, 400, 300, 307, 28328, 13, 50748], "temperature": 0.0, "avg_logprob": -0.16678137249416775, "compression_ratio": 1.6844262295081966, "no_speech_prob": 0.34487852454185486}, {"id": 199, "seek": 89128, "start": 898.9599999999999, "end": 906.8399999999999, "text": " That's very performance heavy or anti-performance to use a software engineering term.", "tokens": [50748, 663, 311, 588, 3389, 4676, 420, 6061, 12, 50242, 281, 764, 257, 4722, 7043, 1433, 13, 51142], "temperature": 0.0, "avg_logprob": -0.16678137249416775, "compression_ratio": 1.6844262295081966, "no_speech_prob": 0.34487852454185486}, {"id": 200, "seek": 89128, "start": 906.8399999999999, "end": 911.16, "text": " And that's why Joshua Block states, while you could compare float and double fields", "tokens": [51142, 400, 300, 311, 983, 24005, 17500, 4368, 11, 1339, 291, 727, 6794, 15706, 293, 3834, 7909, 51358], "temperature": 0.0, "avg_logprob": -0.16678137249416775, "compression_ratio": 1.6844262295081966, "no_speech_prob": 0.34487852454185486}, {"id": 201, "seek": 89128, "start": 911.16, "end": 916.8, "text": " with the static methods float dot equals and double dot equals, this would entail auto", "tokens": [51358, 365, 264, 13437, 7150, 15706, 5893, 6915, 293, 3834, 5893, 6915, 11, 341, 576, 948, 864, 8399, 51640], "temperature": 0.0, "avg_logprob": -0.16678137249416775, "compression_ratio": 1.6844262295081966, "no_speech_prob": 0.34487852454185486}, {"id": 202, "seek": 89128, "start": 916.8, "end": 921.04, "text": " boxing on every comparison, which would have poor performance.", "tokens": [51640, 24424, 322, 633, 9660, 11, 597, 576, 362, 4716, 3389, 13, 51852], "temperature": 0.0, "avg_logprob": -0.16678137249416775, "compression_ratio": 1.6844262295081966, "no_speech_prob": 0.34487852454185486}, {"id": 203, "seek": 92104, "start": 921.04, "end": 925.36, "text": " But auto boxing generally isn't a good idea, especially if you're using loops, keep away", "tokens": [50364, 583, 8399, 24424, 5101, 1943, 380, 257, 665, 1558, 11, 2318, 498, 291, 434, 1228, 16121, 11, 1066, 1314, 50580], "temperature": 0.0, "avg_logprob": -0.14964958790982708, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.061857860535383224}, {"id": 204, "seek": 92104, "start": 925.36, "end": 932.52, "text": " from auto boxing because it can be very performance heavy because also it just creates new objects", "tokens": [50580, 490, 8399, 24424, 570, 309, 393, 312, 588, 3389, 4676, 570, 611, 309, 445, 7829, 777, 6565, 50938], "temperature": 0.0, "avg_logprob": -0.14964958790982708, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.061857860535383224}, {"id": 205, "seek": 92104, "start": 932.52, "end": 933.5999999999999, "text": " every single time.", "tokens": [50938, 633, 2167, 565, 13, 50992], "temperature": 0.0, "avg_logprob": -0.14964958790982708, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.061857860535383224}, {"id": 206, "seek": 92104, "start": 933.5999999999999, "end": 941.5999999999999, "text": " So an example we have here is this int value of type, it's a primitive type.", "tokens": [50992, 407, 364, 1365, 321, 362, 510, 307, 341, 560, 2158, 295, 2010, 11, 309, 311, 257, 28540, 2010, 13, 51392], "temperature": 0.0, "avg_logprob": -0.14964958790982708, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.061857860535383224}, {"id": 207, "seek": 92104, "start": 941.5999999999999, "end": 947.28, "text": " What auto boxing will do here is convert this int to the wrapper class integer and that's", "tokens": [51392, 708, 8399, 24424, 486, 360, 510, 307, 7620, 341, 560, 281, 264, 46906, 1508, 24922, 293, 300, 311, 51676], "temperature": 0.0, "avg_logprob": -0.14964958790982708, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.061857860535383224}, {"id": 208, "seek": 94728, "start": 947.28, "end": 953.52, "text": " going to now be an object and any instance of that will create new objects in memory.", "tokens": [50364, 516, 281, 586, 312, 364, 2657, 293, 604, 5197, 295, 300, 486, 1884, 777, 6565, 294, 4675, 13, 50676], "temperature": 0.0, "avg_logprob": -0.21981750566934802, "compression_ratio": 1.6032388663967612, "no_speech_prob": 0.03020317479968071}, {"id": 209, "seek": 94728, "start": 953.52, "end": 958.1999999999999, "text": " And the compiler does that automatically for primitive and wrapper classes.", "tokens": [50676, 400, 264, 31958, 775, 300, 6772, 337, 28540, 293, 46906, 5359, 13, 50910], "temperature": 0.0, "avg_logprob": -0.21981750566934802, "compression_ratio": 1.6032388663967612, "no_speech_prob": 0.03020317479968071}, {"id": 210, "seek": 94728, "start": 958.1999999999999, "end": 965.88, "text": " So that's why it's better to use compare instead of using the equals method for float or double.", "tokens": [50910, 407, 300, 311, 983, 309, 311, 1101, 281, 764, 6794, 2602, 295, 1228, 264, 6915, 3170, 337, 15706, 420, 3834, 13, 51294], "temperature": 0.0, "avg_logprob": -0.21981750566934802, "compression_ratio": 1.6032388663967612, "no_speech_prob": 0.03020317479968071}, {"id": 211, "seek": 94728, "start": 965.88, "end": 971.3199999999999, "text": " And then kind of an ancillary point, a shunt's ancillary, it's still important.", "tokens": [51294, 400, 550, 733, 295, 364, 364, 7383, 822, 935, 11, 257, 402, 2760, 311, 364, 7383, 822, 11, 309, 311, 920, 1021, 13, 51566], "temperature": 0.0, "avg_logprob": -0.21981750566934802, "compression_ratio": 1.6032388663967612, "no_speech_prob": 0.03020317479968071}, {"id": 212, "seek": 94728, "start": 971.3199999999999, "end": 974.8, "text": " For array fields, apply these guidelines to each element.", "tokens": [51566, 1171, 10225, 7909, 11, 3079, 613, 12470, 281, 1184, 4478, 13, 51740], "temperature": 0.0, "avg_logprob": -0.21981750566934802, "compression_ratio": 1.6032388663967612, "no_speech_prob": 0.03020317479968071}, {"id": 213, "seek": 97480, "start": 974.8, "end": 980.64, "text": " If every element in an array field is significant, use one of the array dot equals methods.", "tokens": [50364, 759, 633, 4478, 294, 364, 10225, 2519, 307, 4776, 11, 764, 472, 295, 264, 10225, 5893, 6915, 7150, 13, 50656], "temperature": 0.0, "avg_logprob": -0.16658891416063495, "compression_ratio": 1.8859649122807018, "no_speech_prob": 0.11591551452875137}, {"id": 214, "seek": 97480, "start": 980.64, "end": 985.04, "text": " And as we're deciding this method, one thing that could come into your mind is what if the", "tokens": [50656, 400, 382, 321, 434, 17990, 341, 3170, 11, 472, 551, 300, 727, 808, 666, 428, 1575, 307, 437, 498, 264, 50876], "temperature": 0.0, "avg_logprob": -0.16658891416063495, "compression_ratio": 1.8859649122807018, "no_speech_prob": 0.11591551452875137}, {"id": 215, "seek": 97480, "start": 985.04, "end": 989.24, "text": " object reference contains null, that is a very real possibility.", "tokens": [50876, 2657, 6408, 8306, 18184, 11, 300, 307, 257, 588, 957, 7959, 13, 51086], "temperature": 0.0, "avg_logprob": -0.16658891416063495, "compression_ratio": 1.8859649122807018, "no_speech_prob": 0.11591551452875137}, {"id": 216, "seek": 97480, "start": 989.24, "end": 994.12, "text": " So we want to avoid a null point of exception if that happens, if the object reference contains", "tokens": [51086, 407, 321, 528, 281, 5042, 257, 18184, 935, 295, 11183, 498, 300, 2314, 11, 498, 264, 2657, 6408, 8306, 51330], "temperature": 0.0, "avg_logprob": -0.16658891416063495, "compression_ratio": 1.8859649122807018, "no_speech_prob": 0.11591551452875137}, {"id": 217, "seek": 97480, "start": 994.12, "end": 999.5999999999999, "text": " null and to avoid that, avoid the null point of exception, what we want to do for that", "tokens": [51330, 18184, 293, 281, 5042, 300, 11, 5042, 264, 18184, 935, 295, 11183, 11, 437, 321, 528, 281, 360, 337, 300, 51604], "temperature": 0.0, "avg_logprob": -0.16658891416063495, "compression_ratio": 1.8859649122807018, "no_speech_prob": 0.11591551452875137}, {"id": 218, "seek": 99960, "start": 999.6, "end": 1004.9200000000001, "text": " is in fact, use the objects dot equals method where we compare two objects, which is in", "tokens": [50364, 307, 294, 1186, 11, 764, 264, 6565, 5893, 6915, 3170, 689, 321, 6794, 732, 6565, 11, 597, 307, 294, 50630], "temperature": 0.0, "avg_logprob": -0.16952764525894046, "compression_ratio": 1.7956204379562044, "no_speech_prob": 0.4801536500453949}, {"id": 219, "seek": 99960, "start": 1004.9200000000001, "end": 1007.2, "text": " the Java util objects class.", "tokens": [50630, 264, 10745, 4976, 6565, 1508, 13, 50744], "temperature": 0.0, "avg_logprob": -0.16952764525894046, "compression_ratio": 1.7956204379562044, "no_speech_prob": 0.4801536500453949}, {"id": 220, "seek": 99960, "start": 1007.2, "end": 1010.76, "text": " So if we take a look at another small demo, it's better looking at code than me trying", "tokens": [50744, 407, 498, 321, 747, 257, 574, 412, 1071, 1359, 10723, 11, 309, 311, 1101, 1237, 412, 3089, 813, 385, 1382, 50922], "temperature": 0.0, "avg_logprob": -0.16952764525894046, "compression_ratio": 1.7956204379562044, "no_speech_prob": 0.4801536500453949}, {"id": 221, "seek": 99960, "start": 1010.76, "end": 1011.76, "text": " to explain it.", "tokens": [50922, 281, 2903, 309, 13, 50972], "temperature": 0.0, "avg_logprob": -0.16952764525894046, "compression_ratio": 1.7956204379562044, "no_speech_prob": 0.4801536500453949}, {"id": 222, "seek": 99960, "start": 1011.76, "end": 1014.24, "text": " We have another class called person.", "tokens": [50972, 492, 362, 1071, 1508, 1219, 954, 13, 51096], "temperature": 0.0, "avg_logprob": -0.16952764525894046, "compression_ratio": 1.7956204379562044, "no_speech_prob": 0.4801536500453949}, {"id": 223, "seek": 99960, "start": 1014.24, "end": 1019.76, "text": " And again, we have a name of type string, and then we have an age of the primitive", "tokens": [51096, 400, 797, 11, 321, 362, 257, 1315, 295, 2010, 6798, 11, 293, 550, 321, 362, 364, 3205, 295, 264, 28540, 51372], "temperature": 0.0, "avg_logprob": -0.16952764525894046, "compression_ratio": 1.7956204379562044, "no_speech_prob": 0.4801536500453949}, {"id": 224, "seek": 99960, "start": 1019.76, "end": 1020.76, "text": " type int.", "tokens": [51372, 2010, 560, 13, 51422], "temperature": 0.0, "avg_logprob": -0.16952764525894046, "compression_ratio": 1.7956204379562044, "no_speech_prob": 0.4801536500453949}, {"id": 225, "seek": 99960, "start": 1020.76, "end": 1023.9200000000001, "text": " We have the constructor and then the equals method.", "tokens": [51422, 492, 362, 264, 47479, 293, 550, 264, 6915, 3170, 13, 51580], "temperature": 0.0, "avg_logprob": -0.16952764525894046, "compression_ratio": 1.7956204379562044, "no_speech_prob": 0.4801536500453949}, {"id": 226, "seek": 99960, "start": 1023.9200000000001, "end": 1029.44, "text": " So simply again, same thing, and we're doing the casting chain for the instance, the double", "tokens": [51580, 407, 2935, 797, 11, 912, 551, 11, 293, 321, 434, 884, 264, 17301, 5021, 337, 264, 5197, 11, 264, 3834, 51856], "temperature": 0.0, "avg_logprob": -0.16952764525894046, "compression_ratio": 1.7956204379562044, "no_speech_prob": 0.4801536500453949}, {"id": 227, "seek": 102944, "start": 1029.44, "end": 1031.72, "text": " equals operation, all of that.", "tokens": [50364, 6915, 6916, 11, 439, 295, 300, 13, 50478], "temperature": 0.0, "avg_logprob": -0.21399973897100652, "compression_ratio": 1.7669491525423728, "no_speech_prob": 0.03020622208714485}, {"id": 228, "seek": 102944, "start": 1031.72, "end": 1038.56, "text": " And then afterwards, in the comparison, we're comparing these significant fields.", "tokens": [50478, 400, 550, 10543, 11, 294, 264, 9660, 11, 321, 434, 15763, 613, 4776, 7909, 13, 50820], "temperature": 0.0, "avg_logprob": -0.21399973897100652, "compression_ratio": 1.7669491525423728, "no_speech_prob": 0.03020622208714485}, {"id": 229, "seek": 102944, "start": 1038.56, "end": 1043.3600000000001, "text": " It could be possible that one of them could have a null, or in this case, what we pass", "tokens": [50820, 467, 727, 312, 1944, 300, 472, 295, 552, 727, 362, 257, 18184, 11, 420, 294, 341, 1389, 11, 437, 321, 1320, 51060], "temperature": 0.0, "avg_logprob": -0.21399973897100652, "compression_ratio": 1.7669491525423728, "no_speech_prob": 0.03020622208714485}, {"id": 230, "seek": 102944, "start": 1043.3600000000001, "end": 1047.4, "text": " this object, we pass onto the equals method.", "tokens": [51060, 341, 2657, 11, 321, 1320, 3911, 264, 6915, 3170, 13, 51262], "temperature": 0.0, "avg_logprob": -0.21399973897100652, "compression_ratio": 1.7669491525423728, "no_speech_prob": 0.03020622208714485}, {"id": 231, "seek": 102944, "start": 1047.4, "end": 1052.92, "text": " This object dot equals method will ensure that another point of exception is enthroned.", "tokens": [51262, 639, 2657, 5893, 6915, 3170, 486, 5586, 300, 1071, 935, 295, 11183, 307, 948, 1703, 19009, 13, 51538], "temperature": 0.0, "avg_logprob": -0.21399973897100652, "compression_ratio": 1.7669491525423728, "no_speech_prob": 0.03020622208714485}, {"id": 232, "seek": 102944, "start": 1052.92, "end": 1056.96, "text": " And that's why when it comes to comparing the name, we are using objects dot equals.", "tokens": [51538, 400, 300, 311, 983, 562, 309, 1487, 281, 15763, 264, 1315, 11, 321, 366, 1228, 6565, 5893, 6915, 13, 51740], "temperature": 0.0, "avg_logprob": -0.21399973897100652, "compression_ratio": 1.7669491525423728, "no_speech_prob": 0.03020622208714485}, {"id": 233, "seek": 105696, "start": 1056.96, "end": 1058.68, "text": " Did I say object dot equals?", "tokens": [50364, 2589, 286, 584, 2657, 5893, 6915, 30, 50450], "temperature": 0.0, "avg_logprob": -0.18654760263733944, "compression_ratio": 1.7836734693877552, "no_speech_prob": 0.05662590265274048}, {"id": 234, "seek": 105696, "start": 1058.68, "end": 1060.68, "text": " I meant to say objects dot equals.", "tokens": [50450, 286, 4140, 281, 584, 6565, 5893, 6915, 13, 50550], "temperature": 0.0, "avg_logprob": -0.18654760263733944, "compression_ratio": 1.7836734693877552, "no_speech_prob": 0.05662590265274048}, {"id": 235, "seek": 105696, "start": 1060.68, "end": 1061.68, "text": " That's important.", "tokens": [50550, 663, 311, 1021, 13, 50600], "temperature": 0.0, "avg_logprob": -0.18654760263733944, "compression_ratio": 1.7836734693877552, "no_speech_prob": 0.05662590265274048}, {"id": 236, "seek": 105696, "start": 1061.68, "end": 1067.48, "text": " And the reason for that is instead of me explaining it, let me just use chatGPT to explain it", "tokens": [50600, 400, 264, 1778, 337, 300, 307, 2602, 295, 385, 13468, 309, 11, 718, 385, 445, 764, 5081, 38, 47, 51, 281, 2903, 309, 50890], "temperature": 0.0, "avg_logprob": -0.18654760263733944, "compression_ratio": 1.7836734693877552, "no_speech_prob": 0.05662590265274048}, {"id": 237, "seek": 105696, "start": 1067.48, "end": 1069.76, "text": " better than I ever could.", "tokens": [50890, 1101, 813, 286, 1562, 727, 13, 51004], "temperature": 0.0, "avg_logprob": -0.18654760263733944, "compression_ratio": 1.7836734693877552, "no_speech_prob": 0.05662590265274048}, {"id": 238, "seek": 105696, "start": 1069.76, "end": 1075.48, "text": " The object dot equals method is a utility method provided by the Java util objects class", "tokens": [51004, 440, 2657, 5893, 6915, 3170, 307, 257, 14877, 3170, 5649, 538, 264, 10745, 4976, 6565, 1508, 51290], "temperature": 0.0, "avg_logprob": -0.18654760263733944, "compression_ratio": 1.7836734693877552, "no_speech_prob": 0.05662590265274048}, {"id": 239, "seek": 105696, "start": 1075.48, "end": 1076.8, "text": " in Java.", "tokens": [51290, 294, 10745, 13, 51356], "temperature": 0.0, "avg_logprob": -0.18654760263733944, "compression_ratio": 1.7836734693877552, "no_speech_prob": 0.05662590265274048}, {"id": 240, "seek": 105696, "start": 1076.8, "end": 1082.04, "text": " It can be used to compare the equality of two objects, taking into account that either", "tokens": [51356, 467, 393, 312, 1143, 281, 6794, 264, 14949, 295, 732, 6565, 11, 1940, 666, 2696, 300, 2139, 51618], "temperature": 0.0, "avg_logprob": -0.18654760263733944, "compression_ratio": 1.7836734693877552, "no_speech_prob": 0.05662590265274048}, {"id": 241, "seek": 105696, "start": 1082.04, "end": 1084.48, "text": " or both objects can be null.", "tokens": [51618, 420, 1293, 6565, 393, 312, 18184, 13, 51740], "temperature": 0.0, "avg_logprob": -0.18654760263733944, "compression_ratio": 1.7836734693877552, "no_speech_prob": 0.05662590265274048}, {"id": 242, "seek": 105696, "start": 1084.48, "end": 1085.48, "text": " And that's important.", "tokens": [51740, 400, 300, 311, 1021, 13, 51790], "temperature": 0.0, "avg_logprob": -0.18654760263733944, "compression_ratio": 1.7836734693877552, "no_speech_prob": 0.05662590265274048}, {"id": 243, "seek": 108548, "start": 1085.48, "end": 1088.04, "text": " Like the null point exception isn't thrown.", "tokens": [50364, 1743, 264, 18184, 935, 11183, 1943, 380, 11732, 13, 50492], "temperature": 0.0, "avg_logprob": -0.19267187947812286, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.010486789979040623}, {"id": 244, "seek": 108548, "start": 1088.04, "end": 1093.68, "text": " The method will return true if both objects are null, or if the objects are not null,", "tokens": [50492, 440, 3170, 486, 2736, 2074, 498, 1293, 6565, 366, 18184, 11, 420, 498, 264, 6565, 366, 406, 18184, 11, 50774], "temperature": 0.0, "avg_logprob": -0.19267187947812286, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.010486789979040623}, {"id": 245, "seek": 108548, "start": 1093.68, "end": 1098.3600000000001, "text": " and the equals method of the first object returns true when called with the second object", "tokens": [50774, 293, 264, 6915, 3170, 295, 264, 700, 2657, 11247, 2074, 562, 1219, 365, 264, 1150, 2657, 51008], "temperature": 0.0, "avg_logprob": -0.19267187947812286, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.010486789979040623}, {"id": 246, "seek": 108548, "start": 1098.3600000000001, "end": 1099.3600000000001, "text": " as the argument.", "tokens": [51008, 382, 264, 6770, 13, 51058], "temperature": 0.0, "avg_logprob": -0.19267187947812286, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.010486789979040623}, {"id": 247, "seek": 108548, "start": 1099.3600000000001, "end": 1101.04, "text": " So the example for that is seen here.", "tokens": [51058, 407, 264, 1365, 337, 300, 307, 1612, 510, 13, 51142], "temperature": 0.0, "avg_logprob": -0.19267187947812286, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.010486789979040623}, {"id": 248, "seek": 108548, "start": 1101.04, "end": 1109.96, "text": " As you can see, we are passing a null value into person p4, and that returns false as", "tokens": [51142, 1018, 291, 393, 536, 11, 321, 366, 8437, 257, 18184, 2158, 666, 954, 280, 19, 11, 293, 300, 11247, 7908, 382, 51588], "temperature": 0.0, "avg_logprob": -0.19267187947812286, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.010486789979040623}, {"id": 249, "seek": 110996, "start": 1109.96, "end": 1114.16, "text": " expected because we're comparing p1 to p4.", "tokens": [50364, 5176, 570, 321, 434, 15763, 280, 16, 281, 280, 19, 13, 50574], "temperature": 0.0, "avg_logprob": -0.16044278477513513, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.49176913499832153}, {"id": 250, "seek": 110996, "start": 1114.16, "end": 1119.4, "text": " And in that comparison, it's clear that there is no logical equality here despite the age", "tokens": [50574, 400, 294, 300, 9660, 11, 309, 311, 1850, 300, 456, 307, 572, 14978, 14949, 510, 7228, 264, 3205, 50836], "temperature": 0.0, "avg_logprob": -0.16044278477513513, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.49176913499832153}, {"id": 251, "seek": 110996, "start": 1119.4, "end": 1121.52, "text": " being the same.", "tokens": [50836, 885, 264, 912, 13, 50942], "temperature": 0.0, "avg_logprob": -0.16044278477513513, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.49176913499832153}, {"id": 252, "seek": 110996, "start": 1121.52, "end": 1126.3600000000001, "text": " And there's also, more importantly, I guess, there's no null point exception being thrown.", "tokens": [50942, 400, 456, 311, 611, 11, 544, 8906, 11, 286, 2041, 11, 456, 311, 572, 18184, 935, 11183, 885, 11732, 13, 51184], "temperature": 0.0, "avg_logprob": -0.16044278477513513, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.49176913499832153}, {"id": 253, "seek": 110996, "start": 1126.3600000000001, "end": 1132.8400000000001, "text": " And then we get to this concept of canonicalization, which is the idea that in some classes a simple", "tokens": [51184, 400, 550, 321, 483, 281, 341, 3410, 295, 46491, 2144, 11, 597, 307, 264, 1558, 300, 294, 512, 5359, 257, 2199, 51508], "temperature": 0.0, "avg_logprob": -0.16044278477513513, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.49176913499832153}, {"id": 254, "seek": 113284, "start": 1132.84, "end": 1140.36, "text": " equality test won't do, especially as Joshua Bloch states for classes that are immutable.", "tokens": [50364, 14949, 1500, 1582, 380, 360, 11, 2318, 382, 24005, 9865, 339, 4368, 337, 5359, 300, 366, 3397, 32148, 13, 50740], "temperature": 0.0, "avg_logprob": -0.201932125999814, "compression_ratio": 1.6356877323420074, "no_speech_prob": 0.5307578444480896}, {"id": 255, "seek": 113284, "start": 1140.36, "end": 1146.04, "text": " Meaning if an object of an immutable class can potentially change, for logical equality", "tokens": [50740, 19948, 498, 364, 2657, 295, 364, 3397, 32148, 1508, 393, 7263, 1319, 11, 337, 14978, 14949, 51024], "temperature": 0.0, "avg_logprob": -0.201932125999814, "compression_ratio": 1.6356877323420074, "no_speech_prob": 0.5307578444480896}, {"id": 256, "seek": 113284, "start": 1146.04, "end": 1150.6799999999998, "text": " for or equals method to work properly, we still need to keep a canonical form of that", "tokens": [51024, 337, 420, 6915, 3170, 281, 589, 6108, 11, 321, 920, 643, 281, 1066, 257, 46491, 1254, 295, 300, 51256], "temperature": 0.0, "avg_logprob": -0.201932125999814, "compression_ratio": 1.6356877323420074, "no_speech_prob": 0.5307578444480896}, {"id": 257, "seek": 113284, "start": 1150.6799999999998, "end": 1154.6799999999998, "text": " field somewhere in our class, and we need to store it.", "tokens": [51256, 2519, 4079, 294, 527, 1508, 11, 293, 321, 643, 281, 3531, 309, 13, 51456], "temperature": 0.0, "avg_logprob": -0.201932125999814, "compression_ratio": 1.6356877323420074, "no_speech_prob": 0.5307578444480896}, {"id": 258, "seek": 113284, "start": 1154.6799999999998, "end": 1157.84, "text": " So firstly, what is canonicalization?", "tokens": [51456, 407, 27376, 11, 437, 307, 46491, 2144, 30, 51614], "temperature": 0.0, "avg_logprob": -0.201932125999814, "compression_ratio": 1.6356877323420074, "no_speech_prob": 0.5307578444480896}, {"id": 259, "seek": 113284, "start": 1157.84, "end": 1162.3999999999999, "text": " And a definition I found probably the best one I could find is really of Wikipedia.", "tokens": [51614, 400, 257, 7123, 286, 1352, 1391, 264, 1151, 472, 286, 727, 915, 307, 534, 295, 28999, 13, 51842], "temperature": 0.0, "avg_logprob": -0.201932125999814, "compression_ratio": 1.6356877323420074, "no_speech_prob": 0.5307578444480896}, {"id": 260, "seek": 116240, "start": 1162.44, "end": 1167.24, "text": " It's a computer science principle, and computer science, canonicalization, sometimes standardization", "tokens": [50366, 467, 311, 257, 3820, 3497, 8665, 11, 293, 3820, 3497, 11, 46491, 2144, 11, 2171, 3832, 2144, 50606], "temperature": 0.0, "avg_logprob": -0.19332644813939145, "compression_ratio": 1.8008130081300813, "no_speech_prob": 0.1275164932012558}, {"id": 261, "seek": 116240, "start": 1167.24, "end": 1174.44, "text": " or normalization, something you hear quite often when it comes to a databases, is a process", "tokens": [50606, 420, 2710, 2144, 11, 746, 291, 1568, 1596, 2049, 562, 309, 1487, 281, 257, 22380, 11, 307, 257, 1399, 50966], "temperature": 0.0, "avg_logprob": -0.19332644813939145, "compression_ratio": 1.8008130081300813, "no_speech_prob": 0.1275164932012558}, {"id": 262, "seek": 116240, "start": 1174.44, "end": 1180.16, "text": " for converting data that has more than one possible representation into a standard, normal", "tokens": [50966, 337, 29942, 1412, 300, 575, 544, 813, 472, 1944, 10290, 666, 257, 3832, 11, 2710, 51252], "temperature": 0.0, "avg_logprob": -0.19332644813939145, "compression_ratio": 1.8008130081300813, "no_speech_prob": 0.1275164932012558}, {"id": 263, "seek": 116240, "start": 1180.16, "end": 1181.64, "text": " or canonical form.", "tokens": [51252, 420, 46491, 1254, 13, 51326], "temperature": 0.0, "avg_logprob": -0.19332644813939145, "compression_ratio": 1.8008130081300813, "no_speech_prob": 0.1275164932012558}, {"id": 264, "seek": 116240, "start": 1181.64, "end": 1187.0800000000002, "text": " You could probably see that itself hints to that idea that we want the data to exist", "tokens": [51326, 509, 727, 1391, 536, 300, 2564, 27271, 281, 300, 1558, 300, 321, 528, 264, 1412, 281, 2514, 51598], "temperature": 0.0, "avg_logprob": -0.19332644813939145, "compression_ratio": 1.8008130081300813, "no_speech_prob": 0.1275164932012558}, {"id": 265, "seek": 116240, "start": 1187.0800000000002, "end": 1190.44, "text": " in a consistent representation when doing the equality.", "tokens": [51598, 294, 257, 8398, 10290, 562, 884, 264, 14949, 13, 51766], "temperature": 0.0, "avg_logprob": -0.19332644813939145, "compression_ratio": 1.8008130081300813, "no_speech_prob": 0.1275164932012558}, {"id": 266, "seek": 119044, "start": 1190.44, "end": 1193.64, "text": " And that's why we need to exist in a canonical form.", "tokens": [50364, 400, 300, 311, 983, 321, 643, 281, 2514, 294, 257, 46491, 1254, 13, 50524], "temperature": 0.0, "avg_logprob": -0.13586686166484704, "compression_ratio": 1.5797665369649805, "no_speech_prob": 0.0010004438227042556}, {"id": 267, "seek": 119044, "start": 1193.64, "end": 1198.76, "text": " This can be done to compare different representations by equivalence, like the equals method, to", "tokens": [50524, 639, 393, 312, 1096, 281, 6794, 819, 33358, 538, 9052, 655, 11, 411, 264, 6915, 3170, 11, 281, 50780], "temperature": 0.0, "avg_logprob": -0.13586686166484704, "compression_ratio": 1.5797665369649805, "no_speech_prob": 0.0010004438227042556}, {"id": 268, "seek": 119044, "start": 1198.76, "end": 1204.6000000000001, "text": " count the number of distinct data structures, to improve the efficiency of various algorithms", "tokens": [50780, 1207, 264, 1230, 295, 10644, 1412, 9227, 11, 281, 3470, 264, 10493, 295, 3683, 14642, 51072], "temperature": 0.0, "avg_logprob": -0.13586686166484704, "compression_ratio": 1.5797665369649805, "no_speech_prob": 0.0010004438227042556}, {"id": 269, "seek": 119044, "start": 1204.6000000000001, "end": 1210.56, "text": " by eliminating repeated calculations, or to make it possible to impose a meaningful sorting", "tokens": [51072, 538, 31203, 10477, 20448, 11, 420, 281, 652, 309, 1944, 281, 26952, 257, 10995, 32411, 51370], "temperature": 0.0, "avg_logprob": -0.13586686166484704, "compression_ratio": 1.5797665369649805, "no_speech_prob": 0.0010004438227042556}, {"id": 270, "seek": 119044, "start": 1210.56, "end": 1211.56, "text": " order.", "tokens": [51370, 1668, 13, 51420], "temperature": 0.0, "avg_logprob": -0.13586686166484704, "compression_ratio": 1.5797665369649805, "no_speech_prob": 0.0010004438227042556}, {"id": 271, "seek": 119044, "start": 1211.56, "end": 1217.64, "text": " So clearly this CS principle of canonicalization has many uses.", "tokens": [51420, 407, 4448, 341, 9460, 8665, 295, 46491, 2144, 575, 867, 4960, 13, 51724], "temperature": 0.0, "avg_logprob": -0.13586686166484704, "compression_ratio": 1.5797665369649805, "no_speech_prob": 0.0010004438227042556}, {"id": 272, "seek": 121764, "start": 1217.64, "end": 1224.1200000000001, "text": " So we're going to look at a demo to exemplify this idea of canonicalization on a previous", "tokens": [50364, 407, 321, 434, 516, 281, 574, 412, 257, 10723, 281, 24112, 2505, 341, 1558, 295, 46491, 2144, 322, 257, 3894, 50688], "temperature": 0.0, "avg_logprob": -0.13300412830553557, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.0026728848461061716}, {"id": 273, "seek": 121764, "start": 1224.1200000000001, "end": 1228.44, "text": " class that we designed, which was the case and sensitive string class.", "tokens": [50688, 1508, 300, 321, 4761, 11, 597, 390, 264, 1389, 293, 9477, 6798, 1508, 13, 50904], "temperature": 0.0, "avg_logprob": -0.13300412830553557, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.0026728848461061716}, {"id": 274, "seek": 121764, "start": 1228.44, "end": 1234.44, "text": " So if you recall, I think in part two, part two or three, when we were discussing symmetry,", "tokens": [50904, 407, 498, 291, 9901, 11, 286, 519, 294, 644, 732, 11, 644, 732, 420, 1045, 11, 562, 321, 645, 10850, 25440, 11, 51204], "temperature": 0.0, "avg_logprob": -0.13300412830553557, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.0026728848461061716}, {"id": 275, "seek": 121764, "start": 1234.44, "end": 1238.5600000000002, "text": " we created this class called the case and sensitive string class.", "tokens": [51204, 321, 2942, 341, 1508, 1219, 264, 1389, 293, 9477, 6798, 1508, 13, 51410], "temperature": 0.0, "avg_logprob": -0.13300412830553557, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.0026728848461061716}, {"id": 276, "seek": 121764, "start": 1238.5600000000002, "end": 1243.1200000000001, "text": " And what we're doing here is really we're storing a canonical field.", "tokens": [51410, 400, 437, 321, 434, 884, 510, 307, 534, 321, 434, 26085, 257, 46491, 2519, 13, 51638], "temperature": 0.0, "avg_logprob": -0.13300412830553557, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.0026728848461061716}, {"id": 277, "seek": 124312, "start": 1243.12, "end": 1248.52, "text": " We're storing data in a canonical field, which is in this string, we have this private", "tokens": [50364, 492, 434, 26085, 1412, 294, 257, 46491, 2519, 11, 597, 307, 294, 341, 6798, 11, 321, 362, 341, 4551, 50634], "temperature": 0.0, "avg_logprob": -0.13963304983602987, "compression_ratio": 1.8432203389830508, "no_speech_prob": 0.04335987567901611}, {"id": 278, "seek": 124312, "start": 1248.52, "end": 1249.52, "text": " final field.", "tokens": [50634, 2572, 2519, 13, 50684], "temperature": 0.0, "avg_logprob": -0.13963304983602987, "compression_ratio": 1.8432203389830508, "no_speech_prob": 0.04335987567901611}, {"id": 279, "seek": 124312, "start": 1249.52, "end": 1255.56, "text": " So it's going to be immutable called canonical S, which is a canonical string.", "tokens": [50684, 407, 309, 311, 516, 281, 312, 3397, 32148, 1219, 46491, 318, 11, 597, 307, 257, 46491, 6798, 13, 50986], "temperature": 0.0, "avg_logprob": -0.13963304983602987, "compression_ratio": 1.8432203389830508, "no_speech_prob": 0.04335987567901611}, {"id": 280, "seek": 124312, "start": 1255.56, "end": 1261.6399999999999, "text": " And then in the constructor, and we instantiate this class, as we normally set the value for", "tokens": [50986, 400, 550, 294, 264, 47479, 11, 293, 321, 9836, 13024, 341, 1508, 11, 382, 321, 5646, 992, 264, 2158, 337, 51290], "temperature": 0.0, "avg_logprob": -0.13963304983602987, "compression_ratio": 1.8432203389830508, "no_speech_prob": 0.04335987567901611}, {"id": 281, "seek": 124312, "start": 1261.6399999999999, "end": 1267.6399999999999, "text": " S, we are also setting the value for canonical S, which converts it to a canonical form.", "tokens": [51290, 318, 11, 321, 366, 611, 3287, 264, 2158, 337, 46491, 318, 11, 597, 38874, 309, 281, 257, 46491, 1254, 13, 51590], "temperature": 0.0, "avg_logprob": -0.13963304983602987, "compression_ratio": 1.8432203389830508, "no_speech_prob": 0.04335987567901611}, {"id": 282, "seek": 124312, "start": 1267.6399999999999, "end": 1269.4799999999998, "text": " And what does that method do?", "tokens": [51590, 400, 437, 775, 300, 3170, 360, 30, 51682], "temperature": 0.0, "avg_logprob": -0.13963304983602987, "compression_ratio": 1.8432203389830508, "no_speech_prob": 0.04335987567901611}, {"id": 283, "seek": 124312, "start": 1269.4799999999998, "end": 1271.9199999999998, "text": " It simply converts everything to lower case.", "tokens": [51682, 467, 2935, 38874, 1203, 281, 3126, 1389, 13, 51804], "temperature": 0.0, "avg_logprob": -0.13963304983602987, "compression_ratio": 1.8432203389830508, "no_speech_prob": 0.04335987567901611}, {"id": 284, "seek": 127192, "start": 1271.92, "end": 1282.4, "text": " So in that case, if we go to the equals method, you could see that what we're using here is", "tokens": [50364, 407, 294, 300, 1389, 11, 498, 321, 352, 281, 264, 6915, 3170, 11, 291, 727, 536, 300, 437, 321, 434, 1228, 510, 307, 50888], "temperature": 0.0, "avg_logprob": -0.14156114138089693, "compression_ratio": 1.696808510638298, "no_speech_prob": 0.004467786755412817}, {"id": 285, "seek": 127192, "start": 1282.4, "end": 1286.28, "text": " the canonical string to check for equivalence relation.", "tokens": [50888, 264, 46491, 6798, 281, 1520, 337, 9052, 655, 9721, 13, 51082], "temperature": 0.0, "avg_logprob": -0.14156114138089693, "compression_ratio": 1.696808510638298, "no_speech_prob": 0.004467786755412817}, {"id": 286, "seek": 127192, "start": 1286.28, "end": 1294.96, "text": " We're not using the other value here, which is S, and that ensures that we have consistency", "tokens": [51082, 492, 434, 406, 1228, 264, 661, 2158, 510, 11, 597, 307, 318, 11, 293, 300, 28111, 300, 321, 362, 14416, 51516], "temperature": 0.0, "avg_logprob": -0.14156114138089693, "compression_ratio": 1.696808510638298, "no_speech_prob": 0.004467786755412817}, {"id": 287, "seek": 127192, "start": 1294.96, "end": 1299.8000000000002, "text": " across the equals method because we have this canonical field that we're using.", "tokens": [51516, 2108, 264, 6915, 3170, 570, 321, 362, 341, 46491, 2519, 300, 321, 434, 1228, 13, 51758], "temperature": 0.0, "avg_logprob": -0.14156114138089693, "compression_ratio": 1.696808510638298, "no_speech_prob": 0.004467786755412817}, {"id": 288, "seek": 129980, "start": 1299.8, "end": 1305.68, "text": " And that's why we present the data in that way, despite we know that it can take many", "tokens": [50364, 400, 300, 311, 983, 321, 1974, 264, 1412, 294, 300, 636, 11, 7228, 321, 458, 300, 309, 393, 747, 867, 50658], "temperature": 0.0, "avg_logprob": -0.18066770059091072, "compression_ratio": 1.7211155378486056, "no_speech_prob": 0.09263388812541962}, {"id": 289, "seek": 129980, "start": 1305.68, "end": 1306.68, "text": " forms.", "tokens": [50658, 6422, 13, 50708], "temperature": 0.0, "avg_logprob": -0.18066770059091072, "compression_ratio": 1.7211155378486056, "no_speech_prob": 0.09263388812541962}, {"id": 290, "seek": 129980, "start": 1306.68, "end": 1312.2, "text": " So of course, apart from having a good quality equals method as soft engineers, what we always", "tokens": [50708, 407, 295, 1164, 11, 4936, 490, 1419, 257, 665, 3125, 6915, 3170, 382, 2787, 11955, 11, 437, 321, 1009, 50984], "temperature": 0.0, "avg_logprob": -0.18066770059091072, "compression_ratio": 1.7211155378486056, "no_speech_prob": 0.09263388812541962}, {"id": 291, "seek": 129980, "start": 1312.2, "end": 1314.44, "text": " look for is a performance application.", "tokens": [50984, 574, 337, 307, 257, 3389, 3861, 13, 51096], "temperature": 0.0, "avg_logprob": -0.18066770059091072, "compression_ratio": 1.7211155378486056, "no_speech_prob": 0.09263388812541962}, {"id": 292, "seek": 129980, "start": 1314.44, "end": 1319.08, "text": " So we want that to be good efficiency in the equals method.", "tokens": [51096, 407, 321, 528, 300, 281, 312, 665, 10493, 294, 264, 6915, 3170, 13, 51328], "temperature": 0.0, "avg_logprob": -0.18066770059091072, "compression_ratio": 1.7211155378486056, "no_speech_prob": 0.09263388812541962}, {"id": 293, "seek": 129980, "start": 1319.08, "end": 1322.6, "text": " And therefore, just a block towards the end of this section discusses a few things we", "tokens": [51328, 400, 4412, 11, 445, 257, 3461, 3030, 264, 917, 295, 341, 3541, 2248, 279, 257, 1326, 721, 321, 51504], "temperature": 0.0, "avg_logprob": -0.18066770059091072, "compression_ratio": 1.7211155378486056, "no_speech_prob": 0.09263388812541962}, {"id": 294, "seek": 129980, "start": 1322.6, "end": 1326.6, "text": " can do to improve performance apropos of the equals method.", "tokens": [51504, 393, 360, 281, 3470, 3389, 1882, 1513, 329, 295, 264, 6915, 3170, 13, 51704], "temperature": 0.0, "avg_logprob": -0.18066770059091072, "compression_ratio": 1.7211155378486056, "no_speech_prob": 0.09263388812541962}, {"id": 295, "seek": 132660, "start": 1326.6, "end": 1332.28, "text": " Firstly, it's important to compare the fields that are more likely to differ or less expensive", "tokens": [50364, 20042, 11, 309, 311, 1021, 281, 6794, 264, 7909, 300, 366, 544, 3700, 281, 743, 420, 1570, 5124, 50648], "temperature": 0.0, "avg_logprob": -0.13186600169197457, "compression_ratio": 1.7846153846153847, "no_speech_prob": 0.11748330295085907}, {"id": 296, "seek": 132660, "start": 1332.28, "end": 1334.0, "text": " to compare, ideally both.", "tokens": [50648, 281, 6794, 11, 22915, 1293, 13, 50734], "temperature": 0.0, "avg_logprob": -0.13186600169197457, "compression_ratio": 1.7846153846153847, "no_speech_prob": 0.11748330295085907}, {"id": 297, "seek": 132660, "start": 1334.0, "end": 1337.3999999999999, "text": " By the way, before we get to the second point, we're going to go through all of this in a", "tokens": [50734, 3146, 264, 636, 11, 949, 321, 483, 281, 264, 1150, 935, 11, 321, 434, 516, 281, 352, 807, 439, 295, 341, 294, 257, 50904], "temperature": 0.0, "avg_logprob": -0.13186600169197457, "compression_ratio": 1.7846153846153847, "no_speech_prob": 0.11748330295085907}, {"id": 298, "seek": 132660, "start": 1337.3999999999999, "end": 1338.3999999999999, "text": " demo.", "tokens": [50904, 10723, 13, 50954], "temperature": 0.0, "avg_logprob": -0.13186600169197457, "compression_ratio": 1.7846153846153847, "no_speech_prob": 0.11748330295085907}, {"id": 299, "seek": 132660, "start": 1338.3999999999999, "end": 1340.3999999999999, "text": " So first, let's get the theory out of the way.", "tokens": [50954, 407, 700, 11, 718, 311, 483, 264, 5261, 484, 295, 264, 636, 13, 51054], "temperature": 0.0, "avg_logprob": -0.13186600169197457, "compression_ratio": 1.7846153846153847, "no_speech_prob": 0.11748330295085907}, {"id": 300, "seek": 132660, "start": 1340.3999999999999, "end": 1346.1999999999998, "text": " So the second point is do not compare fields that are not a part of a objects logical state", "tokens": [51054, 407, 264, 1150, 935, 307, 360, 406, 6794, 7909, 300, 366, 406, 257, 644, 295, 257, 6565, 14978, 1785, 51344], "temperature": 0.0, "avg_logprob": -0.13186600169197457, "compression_ratio": 1.7846153846153847, "no_speech_prob": 0.11748330295085907}, {"id": 301, "seek": 132660, "start": 1346.1999999999998, "end": 1348.4399999999998, "text": " because we are looking for logical equality.", "tokens": [51344, 570, 321, 366, 1237, 337, 14978, 14949, 13, 51456], "temperature": 0.0, "avg_logprob": -0.13186600169197457, "compression_ratio": 1.7846153846153847, "no_speech_prob": 0.11748330295085907}, {"id": 302, "seek": 132660, "start": 1348.4399999999998, "end": 1349.52, "text": " That's important.", "tokens": [51456, 663, 311, 1021, 13, 51510], "temperature": 0.0, "avg_logprob": -0.13186600169197457, "compression_ratio": 1.7846153846153847, "no_speech_prob": 0.11748330295085907}, {"id": 303, "seek": 132660, "start": 1349.52, "end": 1352.6799999999998, "text": " And then need not compare the derived fields.", "tokens": [51510, 400, 550, 643, 406, 6794, 264, 18949, 7909, 13, 51668], "temperature": 0.0, "avg_logprob": -0.13186600169197457, "compression_ratio": 1.7846153846153847, "no_speech_prob": 0.11748330295085907}, {"id": 304, "seek": 135268, "start": 1352.68, "end": 1357.44, "text": " So these are the three main points when it comes to improving performance on the equals", "tokens": [50364, 407, 613, 366, 264, 1045, 2135, 2793, 562, 309, 1487, 281, 11470, 3389, 322, 264, 6915, 50602], "temperature": 0.0, "avg_logprob": -0.15067220906742285, "compression_ratio": 1.6807017543859648, "no_speech_prob": 0.011506730690598488}, {"id": 305, "seek": 135268, "start": 1357.44, "end": 1358.44, "text": " method.", "tokens": [50602, 3170, 13, 50652], "temperature": 0.0, "avg_logprob": -0.15067220906742285, "compression_ratio": 1.6807017543859648, "no_speech_prob": 0.011506730690598488}, {"id": 306, "seek": 135268, "start": 1358.44, "end": 1362.88, "text": " Now, before we get to the demo, I just want to read the formal definition or the formal", "tokens": [50652, 823, 11, 949, 321, 483, 281, 264, 10723, 11, 286, 445, 528, 281, 1401, 264, 9860, 7123, 420, 264, 9860, 50874], "temperature": 0.0, "avg_logprob": -0.15067220906742285, "compression_ratio": 1.6807017543859648, "no_speech_prob": 0.011506730690598488}, {"id": 307, "seek": 135268, "start": 1362.88, "end": 1364.8400000000001, "text": " elicitation of Joshua Block.", "tokens": [50874, 806, 299, 4614, 295, 24005, 17500, 13, 50972], "temperature": 0.0, "avg_logprob": -0.15067220906742285, "compression_ratio": 1.6807017543859648, "no_speech_prob": 0.011506730690598488}, {"id": 308, "seek": 135268, "start": 1364.8400000000001, "end": 1369.48, "text": " For best performance, you should first compare fields that are more likely to differ, less", "tokens": [50972, 1171, 1151, 3389, 11, 291, 820, 700, 6794, 7909, 300, 366, 544, 3700, 281, 743, 11, 1570, 51204], "temperature": 0.0, "avg_logprob": -0.15067220906742285, "compression_ratio": 1.6807017543859648, "no_speech_prob": 0.011506730690598488}, {"id": 309, "seek": 135268, "start": 1369.48, "end": 1371.76, "text": " expensive to compare or ideally both.", "tokens": [51204, 5124, 281, 6794, 420, 22915, 1293, 13, 51318], "temperature": 0.0, "avg_logprob": -0.15067220906742285, "compression_ratio": 1.6807017543859648, "no_speech_prob": 0.011506730690598488}, {"id": 310, "seek": 135268, "start": 1371.76, "end": 1373.96, "text": " So that's point one.", "tokens": [51318, 407, 300, 311, 935, 472, 13, 51428], "temperature": 0.0, "avg_logprob": -0.15067220906742285, "compression_ratio": 1.6807017543859648, "no_speech_prob": 0.011506730690598488}, {"id": 311, "seek": 135268, "start": 1373.96, "end": 1377.6000000000001, "text": " If only I can click, there we go.", "tokens": [51428, 759, 787, 286, 393, 2052, 11, 456, 321, 352, 13, 51610], "temperature": 0.0, "avg_logprob": -0.15067220906742285, "compression_ratio": 1.6807017543859648, "no_speech_prob": 0.011506730690598488}, {"id": 312, "seek": 135268, "start": 1377.6000000000001, "end": 1382.16, "text": " You must not compare fields that are not part of an objects logical state, such as", "tokens": [51610, 509, 1633, 406, 6794, 7909, 300, 366, 406, 644, 295, 364, 6565, 14978, 1785, 11, 1270, 382, 51838], "temperature": 0.0, "avg_logprob": -0.15067220906742285, "compression_ratio": 1.6807017543859648, "no_speech_prob": 0.011506730690598488}, {"id": 313, "seek": 138216, "start": 1382.24, "end": 1385.5600000000002, "text": " lock fields that use to synchronize operations.", "tokens": [50368, 4017, 7909, 300, 764, 281, 19331, 1125, 7705, 13, 50534], "temperature": 0.0, "avg_logprob": -0.14891487512833032, "compression_ratio": 1.642156862745098, "no_speech_prob": 0.001754240831360221}, {"id": 314, "seek": 138216, "start": 1385.5600000000002, "end": 1386.88, "text": " You need not compare.", "tokens": [50534, 509, 643, 406, 6794, 13, 50600], "temperature": 0.0, "avg_logprob": -0.14891487512833032, "compression_ratio": 1.642156862745098, "no_speech_prob": 0.001754240831360221}, {"id": 315, "seek": 138216, "start": 1386.88, "end": 1389.6000000000001, "text": " So that's part three.", "tokens": [50600, 407, 300, 311, 644, 1045, 13, 50736], "temperature": 0.0, "avg_logprob": -0.14891487512833032, "compression_ratio": 1.642156862745098, "no_speech_prob": 0.001754240831360221}, {"id": 316, "seek": 138216, "start": 1389.6000000000001, "end": 1394.3600000000001, "text": " You need not compare derived fields, which can be calculated from significant fields,", "tokens": [50736, 509, 643, 406, 6794, 18949, 7909, 11, 597, 393, 312, 15598, 490, 4776, 7909, 11, 50974], "temperature": 0.0, "avg_logprob": -0.14891487512833032, "compression_ratio": 1.642156862745098, "no_speech_prob": 0.001754240831360221}, {"id": 317, "seek": 138216, "start": 1394.3600000000001, "end": 1398.24, "text": " but doing so may improve the performance of the equals method.", "tokens": [50974, 457, 884, 370, 815, 3470, 264, 3389, 295, 264, 6915, 3170, 13, 51168], "temperature": 0.0, "avg_logprob": -0.14891487512833032, "compression_ratio": 1.642156862745098, "no_speech_prob": 0.001754240831360221}, {"id": 318, "seek": 138216, "start": 1398.24, "end": 1405.4, "text": " If a derived field amounts to a summary description of the entire object, comparing this field", "tokens": [51168, 759, 257, 18949, 2519, 11663, 281, 257, 12691, 3855, 295, 264, 2302, 2657, 11, 15763, 341, 2519, 51526], "temperature": 0.0, "avg_logprob": -0.14891487512833032, "compression_ratio": 1.642156862745098, "no_speech_prob": 0.001754240831360221}, {"id": 319, "seek": 140540, "start": 1405.4, "end": 1411.8400000000001, "text": " will save you expense of comparing the actual data of if the comparison fails.", "tokens": [50364, 486, 3155, 291, 18406, 295, 15763, 264, 3539, 1412, 295, 498, 264, 9660, 18199, 13, 50686], "temperature": 0.0, "avg_logprob": -0.25836007935660227, "compression_ratio": 1.668, "no_speech_prob": 0.32064253091812134}, {"id": 320, "seek": 140540, "start": 1412.16, "end": 1415.2800000000002, "text": " So let's look at a demo.", "tokens": [50702, 407, 718, 311, 574, 412, 257, 10723, 13, 50858], "temperature": 0.0, "avg_logprob": -0.25836007935660227, "compression_ratio": 1.668, "no_speech_prob": 0.32064253091812134}, {"id": 321, "seek": 140540, "start": 1415.2800000000002, "end": 1417.92, "text": " What if we have a polygon class?", "tokens": [50858, 708, 498, 321, 362, 257, 48242, 1508, 30, 50990], "temperature": 0.0, "avg_logprob": -0.25836007935660227, "compression_ratio": 1.668, "no_speech_prob": 0.32064253091812134}, {"id": 322, "seek": 140540, "start": 1417.96, "end": 1423.5600000000002, "text": " Now, this firstly, I want to say, I am not saying that this class of design is an accurate", "tokens": [50992, 823, 11, 341, 27376, 11, 286, 528, 281, 584, 11, 286, 669, 406, 1566, 300, 341, 1508, 295, 1715, 307, 364, 8559, 51272], "temperature": 0.0, "avg_logprob": -0.25836007935660227, "compression_ratio": 1.668, "no_speech_prob": 0.32064253091812134}, {"id": 323, "seek": 140540, "start": 1423.8000000000002, "end": 1427.8000000000002, "text": " polygon class, especially when it comes to the calculation of the mathematics.", "tokens": [51284, 48242, 1508, 11, 2318, 562, 309, 1487, 281, 264, 17108, 295, 264, 18666, 13, 51484], "temperature": 0.0, "avg_logprob": -0.25836007935660227, "compression_ratio": 1.668, "no_speech_prob": 0.32064253091812134}, {"id": 324, "seek": 140540, "start": 1428.16, "end": 1432.8400000000001, "text": " I kind of did a bit of Googling, used a bit of charge APD and put this together, put this", "tokens": [51502, 286, 733, 295, 630, 257, 857, 295, 45005, 1688, 11, 1143, 257, 857, 295, 4602, 5372, 35, 293, 829, 341, 1214, 11, 829, 341, 51736], "temperature": 0.0, "avg_logprob": -0.25836007935660227, "compression_ratio": 1.668, "no_speech_prob": 0.32064253091812134}, {"id": 325, "seek": 140540, "start": 1432.8400000000001, "end": 1434.1200000000001, "text": " together, pardon me.", "tokens": [51736, 1214, 11, 22440, 385, 13, 51800], "temperature": 0.0, "avg_logprob": -0.25836007935660227, "compression_ratio": 1.668, "no_speech_prob": 0.32064253091812134}, {"id": 326, "seek": 143412, "start": 1434.1599999999999, "end": 1436.52, "text": " So we have the polygon class.", "tokens": [50366, 407, 321, 362, 264, 48242, 1508, 13, 50484], "temperature": 0.0, "avg_logprob": -0.2288363213632621, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.0008425676496699452}, {"id": 327, "seek": 143412, "start": 1437.12, "end": 1443.4399999999998, "text": " So sorry, the caveat there was the provider was don't take these calculations.", "tokens": [50514, 407, 2597, 11, 264, 43012, 456, 390, 264, 12398, 390, 500, 380, 747, 613, 20448, 13, 50830], "temperature": 0.0, "avg_logprob": -0.2288363213632621, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.0008425676496699452}, {"id": 328, "seek": 143412, "start": 1443.4399999999998, "end": 1444.1599999999999, "text": " Don't use them.", "tokens": [50830, 1468, 380, 764, 552, 13, 50866], "temperature": 0.0, "avg_logprob": -0.2288363213632621, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.0008425676496699452}, {"id": 329, "seek": 143412, "start": 1444.1599999999999, "end": 1445.0, "text": " They're probably wrong.", "tokens": [50866, 814, 434, 1391, 2085, 13, 50908], "temperature": 0.0, "avg_logprob": -0.2288363213632621, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.0008425676496699452}, {"id": 330, "seek": 143412, "start": 1445.0, "end": 1445.84, "text": " I'm not sure.", "tokens": [50908, 286, 478, 406, 988, 13, 50950], "temperature": 0.0, "avg_logprob": -0.2288363213632621, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.0008425676496699452}, {"id": 331, "seek": 143412, "start": 1446.32, "end": 1451.56, "text": " So do double check before using this class if you want to do the polygon class.", "tokens": [50974, 407, 360, 3834, 1520, 949, 1228, 341, 1508, 498, 291, 528, 281, 360, 264, 48242, 1508, 13, 51236], "temperature": 0.0, "avg_logprob": -0.2288363213632621, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.0008425676496699452}, {"id": 332, "seek": 143412, "start": 1452.9199999999998, "end": 1454.12, "text": " So we have a polygon class.", "tokens": [51304, 407, 321, 362, 257, 48242, 1508, 13, 51364], "temperature": 0.0, "avg_logprob": -0.2288363213632621, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.0008425676496699452}, {"id": 333, "seek": 143412, "start": 1454.12, "end": 1456.3999999999999, "text": " We have edges vertices as a polygon.", "tokens": [51364, 492, 362, 8819, 32053, 382, 257, 48242, 13, 51478], "temperature": 0.0, "avg_logprob": -0.2288363213632621, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.0008425676496699452}, {"id": 334, "seek": 143412, "start": 1456.3999999999999, "end": 1459.9199999999998, "text": " This we have this all the fields here are primitive values.", "tokens": [51478, 639, 321, 362, 341, 439, 264, 7909, 510, 366, 28540, 4190, 13, 51654], "temperature": 0.0, "avg_logprob": -0.2288363213632621, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.0008425676496699452}, {"id": 335, "seek": 145992, "start": 1460.24, "end": 1464.92, "text": " And then we have a double array called sides with array, array cached or cached.", "tokens": [50380, 400, 550, 321, 362, 257, 3834, 10225, 1219, 4881, 365, 10225, 11, 10225, 269, 15095, 420, 269, 15095, 13, 50614], "temperature": 0.0, "avg_logprob": -0.19394975633763556, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.01565888151526451}, {"id": 336, "seek": 145992, "start": 1465.24, "end": 1468.3200000000002, "text": " And then we have the constructor, of course, where we are setting all the values and even", "tokens": [50630, 400, 550, 321, 362, 264, 47479, 11, 295, 1164, 11, 689, 321, 366, 3287, 439, 264, 4190, 293, 754, 50784], "temperature": 0.0, "avg_logprob": -0.19394975633763556, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.01565888151526451}, {"id": 337, "seek": 145992, "start": 1468.3200000000002, "end": 1473.96, "text": " setting the value for a Boolean variable or Boolean field, which checks if the array value", "tokens": [50784, 3287, 264, 2158, 337, 257, 23351, 28499, 7006, 420, 23351, 28499, 2519, 11, 597, 13834, 498, 264, 10225, 2158, 51066], "temperature": 0.0, "avg_logprob": -0.19394975633763556, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.01565888151526451}, {"id": 338, "seek": 145992, "start": 1473.96, "end": 1474.8400000000001, "text": " has been cached.", "tokens": [51066, 575, 668, 269, 15095, 13, 51110], "temperature": 0.0, "avg_logprob": -0.19394975633763556, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.01565888151526451}, {"id": 339, "seek": 145992, "start": 1475.52, "end": 1479.76, "text": " And then in the calculations, the calculation itself, we're checking for we're checking for", "tokens": [51144, 400, 550, 294, 264, 20448, 11, 264, 17108, 2564, 11, 321, 434, 8568, 337, 321, 434, 8568, 337, 51356], "temperature": 0.0, "avg_logprob": -0.19394975633763556, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.01565888151526451}, {"id": 340, "seek": 145992, "start": 1479.76, "end": 1483.1200000000001, "text": " the area for a initially for a triangle and a rectangle.", "tokens": [51356, 264, 1859, 337, 257, 9105, 337, 257, 13369, 293, 257, 21930, 13, 51524], "temperature": 0.0, "avg_logprob": -0.19394975633763556, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.01565888151526451}, {"id": 341, "seek": 145992, "start": 1483.1200000000001, "end": 1485.92, "text": " And again, as I said, the formula may be wrong.", "tokens": [51524, 400, 797, 11, 382, 286, 848, 11, 264, 8513, 815, 312, 2085, 13, 51664], "temperature": 0.0, "avg_logprob": -0.19394975633763556, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.01565888151526451}, {"id": 342, "seek": 145992, "start": 1485.92, "end": 1487.64, "text": " So I'm not sure if this formula is correct.", "tokens": [51664, 407, 286, 478, 406, 988, 498, 341, 8513, 307, 3006, 13, 51750], "temperature": 0.0, "avg_logprob": -0.19394975633763556, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.01565888151526451}, {"id": 343, "seek": 148764, "start": 1488.0400000000002, "end": 1494.1200000000001, "text": " And then also, if necessary, we could use it for other polygons, depending on on the", "tokens": [50384, 400, 550, 611, 11, 498, 4818, 11, 321, 727, 764, 309, 337, 661, 6754, 70, 892, 11, 5413, 322, 322, 264, 50688], "temperature": 0.0, "avg_logprob": -0.19423490412095012, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.001244721352122724}, {"id": 344, "seek": 148764, "start": 1494.1200000000001, "end": 1496.3200000000002, "text": " number of sides, the formula will change.", "tokens": [50688, 1230, 295, 4881, 11, 264, 8513, 486, 1319, 13, 50798], "temperature": 0.0, "avg_logprob": -0.19423490412095012, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.001244721352122724}, {"id": 345, "seek": 148764, "start": 1496.8400000000001, "end": 1503.1200000000001, "text": " So but the point is the point pertaining to our item is when we're doing the", "tokens": [50824, 407, 457, 264, 935, 307, 264, 935, 49582, 281, 527, 3174, 307, 562, 321, 434, 884, 264, 51138], "temperature": 0.0, "avg_logprob": -0.19423490412095012, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.001244721352122724}, {"id": 346, "seek": 148764, "start": 1503.1200000000001, "end": 1508.0, "text": " equality, we aren't the only thing we really because because we're using a derived field", "tokens": [51138, 14949, 11, 321, 3212, 380, 264, 787, 551, 321, 534, 570, 570, 321, 434, 1228, 257, 18949, 2519, 51382], "temperature": 0.0, "avg_logprob": -0.19423490412095012, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.001244721352122724}, {"id": 347, "seek": 148764, "start": 1508.0, "end": 1509.4, "text": " here, which is the area field.", "tokens": [51382, 510, 11, 597, 307, 264, 1859, 2519, 13, 51452], "temperature": 0.0, "avg_logprob": -0.19423490412095012, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.001244721352122724}, {"id": 348, "seek": 148764, "start": 1509.8000000000002, "end": 1513.3600000000001, "text": " The only thing we're looking for in the quality is the area value.", "tokens": [51472, 440, 787, 551, 321, 434, 1237, 337, 294, 264, 3125, 307, 264, 1859, 2158, 13, 51650], "temperature": 0.0, "avg_logprob": -0.19423490412095012, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.001244721352122724}, {"id": 349, "seek": 151336, "start": 1513.76, "end": 1517.8799999999999, "text": " We're checking if the if the area is the same between the object we pass.", "tokens": [50384, 492, 434, 8568, 498, 264, 498, 264, 1859, 307, 264, 912, 1296, 264, 2657, 321, 1320, 13, 50590], "temperature": 0.0, "avg_logprob": -0.20537630117164468, "compression_ratio": 1.738197424892704, "no_speech_prob": 0.02296558767557144}, {"id": 350, "seek": 151336, "start": 1517.8799999999999, "end": 1522.6799999999998, "text": " So the polygon object we pass, which, which for all intents and purposes will be a", "tokens": [50590, 407, 264, 48242, 2657, 321, 1320, 11, 597, 11, 597, 337, 439, 560, 791, 293, 9932, 486, 312, 257, 50830], "temperature": 0.0, "avg_logprob": -0.20537630117164468, "compression_ratio": 1.738197424892704, "no_speech_prob": 0.02296558767557144}, {"id": 351, "seek": 151336, "start": 1522.6799999999998, "end": 1524.1599999999999, "text": " polygon object we pass.", "tokens": [50830, 48242, 2657, 321, 1320, 13, 50904], "temperature": 0.0, "avg_logprob": -0.20537630117164468, "compression_ratio": 1.738197424892704, "no_speech_prob": 0.02296558767557144}, {"id": 352, "seek": 151336, "start": 1524.8799999999999, "end": 1530.9199999999998, "text": " And we don't we know things such as the vertices, the edges, many things, even the", "tokens": [50940, 400, 321, 500, 380, 321, 458, 721, 1270, 382, 264, 32053, 11, 264, 8819, 11, 867, 721, 11, 754, 264, 51242], "temperature": 0.0, "avg_logprob": -0.20537630117164468, "compression_ratio": 1.738197424892704, "no_speech_prob": 0.02296558767557144}, {"id": 353, "seek": 151336, "start": 1530.9599999999998, "end": 1532.6, "text": " obviously things like the area cache.", "tokens": [51244, 2745, 721, 411, 264, 1859, 19459, 13, 51326], "temperature": 0.0, "avg_logprob": -0.20537630117164468, "compression_ratio": 1.738197424892704, "no_speech_prob": 0.02296558767557144}, {"id": 354, "seek": 151336, "start": 1533.08, "end": 1537.9199999999998, "text": " And if we run this method, you'll see it works as expected because we are looking", "tokens": [51350, 400, 498, 321, 1190, 341, 3170, 11, 291, 603, 536, 309, 1985, 382, 5176, 570, 321, 366, 1237, 51592], "temperature": 0.0, "avg_logprob": -0.20537630117164468, "compression_ratio": 1.738197424892704, "no_speech_prob": 0.02296558767557144}, {"id": 355, "seek": 151336, "start": 1537.9199999999998, "end": 1539.0, "text": " for logical equality.", "tokens": [51592, 337, 14978, 14949, 13, 51646], "temperature": 0.0, "avg_logprob": -0.20537630117164468, "compression_ratio": 1.738197424892704, "no_speech_prob": 0.02296558767557144}, {"id": 356, "seek": 153900, "start": 1540.0, "end": 1545.52, "text": " You can see here over here, firstly, comparing a triangle to a rectangle, it'll", "tokens": [50414, 509, 393, 536, 510, 670, 510, 11, 27376, 11, 15763, 257, 13369, 281, 257, 21930, 11, 309, 603, 50690], "temperature": 0.0, "avg_logprob": -0.3625686977220618, "compression_ratio": 1.9022222222222223, "no_speech_prob": 0.0036491325590759516}, {"id": 357, "seek": 153900, "start": 1545.52, "end": 1546.4, "text": " return false.", "tokens": [50690, 2736, 7908, 13, 50734], "temperature": 0.0, "avg_logprob": -0.3625686977220618, "compression_ratio": 1.9022222222222223, "no_speech_prob": 0.0036491325590759516}, {"id": 358, "seek": 153900, "start": 1546.56, "end": 1547.32, "text": " That's correct.", "tokens": [50742, 663, 311, 3006, 13, 50780], "temperature": 0.0, "avg_logprob": -0.3625686977220618, "compression_ratio": 1.9022222222222223, "no_speech_prob": 0.0036491325590759516}, {"id": 359, "seek": 153900, "start": 1547.56, "end": 1549.6, "text": " We're setting all the sides in the sides area.", "tokens": [50792, 492, 434, 3287, 439, 264, 4881, 294, 264, 4881, 1859, 13, 50894], "temperature": 0.0, "avg_logprob": -0.3625686977220618, "compression_ratio": 1.9022222222222223, "no_speech_prob": 0.0036491325590759516}, {"id": 360, "seek": 153900, "start": 1550.4, "end": 1554.96, "text": " But when we compare a triangle to a triangle, so we have the click to", "tokens": [50934, 583, 562, 321, 6794, 257, 13369, 281, 257, 13369, 11, 370, 321, 362, 264, 2052, 281, 51162], "temperature": 0.0, "avg_logprob": -0.3625686977220618, "compression_ratio": 1.9022222222222223, "no_speech_prob": 0.0036491325590759516}, {"id": 361, "seek": 153900, "start": 1554.96, "end": 1559.04, "text": " triangles here, triangle and triangle to it'll return true.", "tokens": [51162, 29896, 510, 11, 13369, 293, 13369, 281, 309, 603, 2736, 2074, 13, 51366], "temperature": 0.0, "avg_logprob": -0.3625686977220618, "compression_ratio": 1.9022222222222223, "no_speech_prob": 0.0036491325590759516}, {"id": 362, "seek": 153900, "start": 1559.28, "end": 1563.28, "text": " That is because the number of edges and vertices are the same.", "tokens": [51378, 663, 307, 570, 264, 1230, 295, 8819, 293, 32053, 366, 264, 912, 13, 51578], "temperature": 0.0, "avg_logprob": -0.3625686977220618, "compression_ratio": 1.9022222222222223, "no_speech_prob": 0.0036491325590759516}, {"id": 363, "seek": 153900, "start": 1563.32, "end": 1564.44, "text": " So are the sides.", "tokens": [51580, 407, 366, 264, 4881, 13, 51636], "temperature": 0.0, "avg_logprob": -0.3625686977220618, "compression_ratio": 1.9022222222222223, "no_speech_prob": 0.0036491325590759516}, {"id": 364, "seek": 153900, "start": 1564.8, "end": 1567.84, "text": " And that is because those values are what gives us the area.", "tokens": [51654, 400, 300, 307, 570, 729, 4190, 366, 437, 2709, 505, 264, 1859, 13, 51806], "temperature": 0.0, "avg_logprob": -0.3625686977220618, "compression_ratio": 1.9022222222222223, "no_speech_prob": 0.0036491325590759516}, {"id": 365, "seek": 156784, "start": 1568.4399999999998, "end": 1570.12, "text": " So it's a derived field.", "tokens": [50394, 407, 309, 311, 257, 18949, 2519, 13, 50478], "temperature": 0.0, "avg_logprob": -0.18928422385114965, "compression_ratio": 1.7549407114624507, "no_speech_prob": 0.012237575836479664}, {"id": 366, "seek": 156784, "start": 1570.52, "end": 1575.48, "text": " And in the quality all we require to create a high performance equals method is", "tokens": [50498, 400, 294, 264, 3125, 439, 321, 3651, 281, 1884, 257, 1090, 3389, 6915, 3170, 307, 50746], "temperature": 0.0, "avg_logprob": -0.18928422385114965, "compression_ratio": 1.7549407114624507, "no_speech_prob": 0.012237575836479664}, {"id": 367, "seek": 156784, "start": 1575.48, "end": 1577.52, "text": " the derived field value.", "tokens": [50746, 264, 18949, 2519, 2158, 13, 50848], "temperature": 0.0, "avg_logprob": -0.18928422385114965, "compression_ratio": 1.7549407114624507, "no_speech_prob": 0.012237575836479664}, {"id": 368, "seek": 156784, "start": 1577.6, "end": 1579.12, "text": " In this case, the area value.", "tokens": [50852, 682, 341, 1389, 11, 264, 1859, 2158, 13, 50928], "temperature": 0.0, "avg_logprob": -0.18928422385114965, "compression_ratio": 1.7549407114624507, "no_speech_prob": 0.012237575836479664}, {"id": 369, "seek": 156784, "start": 1579.48, "end": 1580.6399999999999, "text": " I hope that made sense.", "tokens": [50946, 286, 1454, 300, 1027, 2020, 13, 51004], "temperature": 0.0, "avg_logprob": -0.18928422385114965, "compression_ratio": 1.7549407114624507, "no_speech_prob": 0.012237575836479664}, {"id": 370, "seek": 156784, "start": 1580.84, "end": 1585.6399999999999, "text": " So just to repeat myself, to really get the take home point here, it is that we", "tokens": [51014, 407, 445, 281, 7149, 2059, 11, 281, 534, 483, 264, 747, 1280, 935, 510, 11, 309, 307, 300, 321, 51254], "temperature": 0.0, "avg_logprob": -0.18928422385114965, "compression_ratio": 1.7549407114624507, "no_speech_prob": 0.012237575836479664}, {"id": 371, "seek": 156784, "start": 1585.6399999999999, "end": 1587.84, "text": " don't have to compare the derived fields.", "tokens": [51254, 500, 380, 362, 281, 6794, 264, 18949, 7909, 13, 51364], "temperature": 0.0, "avg_logprob": -0.18928422385114965, "compression_ratio": 1.7549407114624507, "no_speech_prob": 0.012237575836479664}, {"id": 372, "seek": 156784, "start": 1587.84, "end": 1591.32, "text": " I may have misspoken and said we have to before, but we don't.", "tokens": [51364, 286, 815, 362, 1713, 79, 8406, 293, 848, 321, 362, 281, 949, 11, 457, 321, 500, 380, 13, 51538], "temperature": 0.0, "avg_logprob": -0.18928422385114965, "compression_ratio": 1.7549407114624507, "no_speech_prob": 0.012237575836479664}, {"id": 373, "seek": 156784, "start": 1591.3999999999999, "end": 1596.12, "text": " The idea is the significant field in this class in a polygon class is area.", "tokens": [51542, 440, 1558, 307, 264, 4776, 2519, 294, 341, 1508, 294, 257, 48242, 1508, 307, 1859, 13, 51778], "temperature": 0.0, "avg_logprob": -0.18928422385114965, "compression_ratio": 1.7549407114624507, "no_speech_prob": 0.012237575836479664}, {"id": 374, "seek": 159612, "start": 1596.4799999999998, "end": 1601.6799999999998, "text": " And therefore we know if the area values are equaled for two objects, that the", "tokens": [50382, 400, 4412, 321, 458, 498, 264, 1859, 4190, 366, 2681, 292, 337, 732, 6565, 11, 300, 264, 50642], "temperature": 0.0, "avg_logprob": -0.16503504239595854, "compression_ratio": 1.7325581395348837, "no_speech_prob": 0.0018382624257355928}, {"id": 375, "seek": 159612, "start": 1601.6799999999998, "end": 1605.12, "text": " vertices and the sides and the edges and all the rest of it is going to be equal", "tokens": [50642, 32053, 293, 264, 4881, 293, 264, 8819, 293, 439, 264, 1472, 295, 309, 307, 516, 281, 312, 2681, 50814], "temperature": 0.0, "avg_logprob": -0.16503504239595854, "compression_ratio": 1.7325581395348837, "no_speech_prob": 0.0018382624257355928}, {"id": 376, "seek": 159612, "start": 1605.12, "end": 1608.2399999999998, "text": " to, and in that way we make our equals method more performant.", "tokens": [50814, 281, 11, 293, 294, 300, 636, 321, 652, 527, 6915, 3170, 544, 2042, 394, 13, 50970], "temperature": 0.0, "avg_logprob": -0.16503504239595854, "compression_ratio": 1.7325581395348837, "no_speech_prob": 0.0018382624257355928}, {"id": 377, "seek": 159612, "start": 1609.04, "end": 1614.1999999999998, "text": " Because if two polygons have unequal areas, there's no reason to compare the", "tokens": [51010, 1436, 498, 732, 6754, 70, 892, 362, 2251, 22345, 3179, 11, 456, 311, 572, 1778, 281, 6794, 264, 51268], "temperature": 0.0, "avg_logprob": -0.16503504239595854, "compression_ratio": 1.7325581395348837, "no_speech_prob": 0.0018382624257355928}, {"id": 378, "seek": 159612, "start": 1614.1999999999998, "end": 1615.7199999999998, "text": " edges and vertices.", "tokens": [51268, 8819, 293, 32053, 13, 51344], "temperature": 0.0, "avg_logprob": -0.16503504239595854, "compression_ratio": 1.7325581395348837, "no_speech_prob": 0.0018382624257355928}, {"id": 379, "seek": 159612, "start": 1616.6, "end": 1620.0, "text": " And that gets us to the final caveats, let's say.", "tokens": [51388, 400, 300, 2170, 505, 281, 264, 2572, 11730, 1720, 11, 718, 311, 584, 13, 51558], "temperature": 0.0, "avg_logprob": -0.16503504239595854, "compression_ratio": 1.7325581395348837, "no_speech_prob": 0.0018382624257355928}, {"id": 380, "seek": 159612, "start": 1620.9199999999998, "end": 1622.52, "text": " Okay, no, not yet, not yet.", "tokens": [51604, 1033, 11, 572, 11, 406, 1939, 11, 406, 1939, 13, 51684], "temperature": 0.0, "avg_logprob": -0.16503504239595854, "compression_ratio": 1.7325581395348837, "no_speech_prob": 0.0018382624257355928}, {"id": 381, "seek": 159612, "start": 1622.56, "end": 1623.52, "text": " I spoke too soon.", "tokens": [51686, 286, 7179, 886, 2321, 13, 51734], "temperature": 0.0, "avg_logprob": -0.16503504239595854, "compression_ratio": 1.7325581395348837, "no_speech_prob": 0.0018382624257355928}, {"id": 382, "seek": 159612, "start": 1624.6799999999998, "end": 1625.8, "text": " There's a bit more to say here.", "tokens": [51792, 821, 311, 257, 857, 544, 281, 584, 510, 13, 51848], "temperature": 0.0, "avg_logprob": -0.16503504239595854, "compression_ratio": 1.7325581395348837, "no_speech_prob": 0.0018382624257355928}, {"id": 383, "seek": 162580, "start": 1625.8, "end": 1631.9199999999998, "text": " So Joshua Block, despite me using many other classes to exemplify this, Joshua", "tokens": [50364, 407, 24005, 17500, 11, 7228, 385, 1228, 867, 661, 5359, 281, 24112, 2505, 341, 11, 24005, 50670], "temperature": 0.0, "avg_logprob": -0.16671487001272348, "compression_ratio": 1.651063829787234, "no_speech_prob": 0.0009398650727234781}, {"id": 384, "seek": 162580, "start": 1631.9199999999998, "end": 1636.32, "text": " Block has his own class called the phone number class that he's built, which I've", "tokens": [50670, 17500, 575, 702, 1065, 1508, 1219, 264, 2593, 1230, 1508, 300, 415, 311, 3094, 11, 597, 286, 600, 50890], "temperature": 0.0, "avg_logprob": -0.16671487001272348, "compression_ratio": 1.651063829787234, "no_speech_prob": 0.0009398650727234781}, {"id": 385, "seek": 162580, "start": 1636.32, "end": 1638.76, "text": " used here too, which is really well built.", "tokens": [50890, 1143, 510, 886, 11, 597, 307, 534, 731, 3094, 13, 51012], "temperature": 0.0, "avg_logprob": -0.16671487001272348, "compression_ratio": 1.651063829787234, "no_speech_prob": 0.0009398650727234781}, {"id": 386, "seek": 162580, "start": 1638.76, "end": 1640.6399999999999, "text": " It's a high quality equals method here.", "tokens": [51012, 467, 311, 257, 1090, 3125, 6915, 3170, 510, 13, 51106], "temperature": 0.0, "avg_logprob": -0.16671487001272348, "compression_ratio": 1.651063829787234, "no_speech_prob": 0.0009398650727234781}, {"id": 387, "seek": 162580, "start": 1641.12, "end": 1646.56, "text": " And he says, when you're finished writing your equals method, ask yourself three", "tokens": [51130, 400, 415, 1619, 11, 562, 291, 434, 4335, 3579, 428, 6915, 3170, 11, 1029, 1803, 1045, 51402], "temperature": 0.0, "avg_logprob": -0.16671487001272348, "compression_ratio": 1.651063829787234, "no_speech_prob": 0.0009398650727234781}, {"id": 388, "seek": 162580, "start": 1646.56, "end": 1647.32, "text": " questions.", "tokens": [51402, 1651, 13, 51440], "temperature": 0.0, "avg_logprob": -0.16671487001272348, "compression_ratio": 1.651063829787234, "no_speech_prob": 0.0009398650727234781}, {"id": 389, "seek": 162580, "start": 1647.72, "end": 1648.72, "text": " Is it symmetric?", "tokens": [51460, 1119, 309, 32330, 30, 51510], "temperature": 0.0, "avg_logprob": -0.16671487001272348, "compression_ratio": 1.651063829787234, "no_speech_prob": 0.0009398650727234781}, {"id": 390, "seek": 162580, "start": 1648.84, "end": 1649.8, "text": " Is it transitive?", "tokens": [51516, 1119, 309, 1145, 2187, 30, 51564], "temperature": 0.0, "avg_logprob": -0.16671487001272348, "compression_ratio": 1.651063829787234, "no_speech_prob": 0.0009398650727234781}, {"id": 391, "seek": 162580, "start": 1650.0, "end": 1650.96, "text": " Is it consistent?", "tokens": [51574, 1119, 309, 8398, 30, 51622], "temperature": 0.0, "avg_logprob": -0.16671487001272348, "compression_ratio": 1.651063829787234, "no_speech_prob": 0.0009398650727234781}, {"id": 392, "seek": 165096, "start": 1651.16, "end": 1657.4, "text": " If those three questions are fulfilled, that means, or if they're answered to be", "tokens": [50374, 759, 729, 1045, 1651, 366, 21380, 11, 300, 1355, 11, 420, 498, 436, 434, 10103, 281, 312, 50686], "temperature": 0.0, "avg_logprob": -0.12783946990966796, "compression_ratio": 1.6875, "no_speech_prob": 0.002889341674745083}, {"id": 393, "seek": 165096, "start": 1657.4, "end": 1660.28, "text": " yes, that means it's a high quality equals method.", "tokens": [50686, 2086, 11, 300, 1355, 309, 311, 257, 1090, 3125, 6915, 3170, 13, 50830], "temperature": 0.0, "avg_logprob": -0.12783946990966796, "compression_ratio": 1.6875, "no_speech_prob": 0.002889341674745083}, {"id": 394, "seek": 165096, "start": 1660.44, "end": 1664.6000000000001, "text": " And then he kind of puts this point, of course, your equals method must also", "tokens": [50838, 400, 550, 415, 733, 295, 8137, 341, 935, 11, 295, 1164, 11, 428, 6915, 3170, 1633, 611, 51046], "temperature": 0.0, "avg_logprob": -0.12783946990966796, "compression_ratio": 1.6875, "no_speech_prob": 0.002889341674745083}, {"id": 395, "seek": 165096, "start": 1664.6000000000001, "end": 1669.4, "text": " satisfy the other two properties, reflexivity and nonality, which we discussed", "tokens": [51046, 19319, 264, 661, 732, 7221, 11, 23802, 4253, 293, 2107, 1860, 11, 597, 321, 7152, 51286], "temperature": 0.0, "avg_logprob": -0.12783946990966796, "compression_ratio": 1.6875, "no_speech_prob": 0.002889341674745083}, {"id": 396, "seek": 165096, "start": 1669.4, "end": 1674.2, "text": " in the previous part, but these two usually take care of themselves.", "tokens": [51286, 294, 264, 3894, 644, 11, 457, 613, 732, 2673, 747, 1127, 295, 2969, 13, 51526], "temperature": 0.0, "avg_logprob": -0.12783946990966796, "compression_ratio": 1.6875, "no_speech_prob": 0.002889341674745083}, {"id": 397, "seek": 165096, "start": 1674.32, "end": 1677.52, "text": " And then we have the phone number class that is designed here, where in the", "tokens": [51532, 400, 550, 321, 362, 264, 2593, 1230, 1508, 300, 307, 4761, 510, 11, 689, 294, 264, 51692], "temperature": 0.0, "avg_logprob": -0.12783946990966796, "compression_ratio": 1.6875, "no_speech_prob": 0.002889341674745083}, {"id": 398, "seek": 167752, "start": 1677.52, "end": 1681.28, "text": " phone number class, we have the area code prefix and the line num.", "tokens": [50364, 2593, 1230, 1508, 11, 321, 362, 264, 1859, 3089, 46969, 293, 264, 1622, 1031, 13, 50552], "temperature": 0.0, "avg_logprob": -0.22733884291215375, "compression_ratio": 1.728395061728395, "no_speech_prob": 0.0023224325850605965}, {"id": 399, "seek": 167752, "start": 1681.92, "end": 1685.56, "text": " They're all private final short values.", "tokens": [50584, 814, 434, 439, 4551, 2572, 2099, 4190, 13, 50766], "temperature": 0.0, "avg_logprob": -0.22733884291215375, "compression_ratio": 1.728395061728395, "no_speech_prob": 0.0023224325850605965}, {"id": 400, "seek": 167752, "start": 1688.0, "end": 1692.84, "text": " I realize he's used the non primitive type short here because it's a phone", "tokens": [50888, 286, 4325, 415, 311, 1143, 264, 2107, 28540, 2010, 2099, 510, 570, 309, 311, 257, 2593, 51130], "temperature": 0.0, "avg_logprob": -0.22733884291215375, "compression_ratio": 1.728395061728395, "no_speech_prob": 0.0023224325850605965}, {"id": 401, "seek": 167752, "start": 1692.84, "end": 1695.4, "text": " number that helps with saving memory.", "tokens": [51130, 1230, 300, 3665, 365, 6816, 4675, 13, 51258], "temperature": 0.0, "avg_logprob": -0.22733884291215375, "compression_ratio": 1.728395061728395, "no_speech_prob": 0.0023224325850605965}, {"id": 402, "seek": 167752, "start": 1695.84, "end": 1700.16, "text": " I've really not ever used a short method ever short type ever.", "tokens": [51280, 286, 600, 534, 406, 1562, 1143, 257, 2099, 3170, 1562, 2099, 2010, 1562, 13, 51496], "temperature": 0.0, "avg_logprob": -0.22733884291215375, "compression_ratio": 1.728395061728395, "no_speech_prob": 0.0023224325850605965}, {"id": 403, "seek": 167752, "start": 1700.16, "end": 1702.8799999999999, "text": " I've always used just int, but now that's that's that's good.", "tokens": [51496, 286, 600, 1009, 1143, 445, 560, 11, 457, 586, 300, 311, 300, 311, 300, 311, 665, 13, 51632], "temperature": 0.0, "avg_logprob": -0.22733884291215375, "compression_ratio": 1.728395061728395, "no_speech_prob": 0.0023224325850605965}, {"id": 404, "seek": 167752, "start": 1702.96, "end": 1707.16, "text": " It shows that it's very punctilious when it comes to design and classes and", "tokens": [51636, 467, 3110, 300, 309, 311, 588, 27006, 388, 851, 562, 309, 1487, 281, 1715, 293, 5359, 293, 51846], "temperature": 0.0, "avg_logprob": -0.22733884291215375, "compression_ratio": 1.728395061728395, "no_speech_prob": 0.0023224325850605965}, {"id": 405, "seek": 170716, "start": 1707.16, "end": 1709.68, "text": " writing code, he pays attention to the small things.", "tokens": [50364, 3579, 3089, 11, 415, 10604, 3202, 281, 264, 1359, 721, 13, 50490], "temperature": 0.0, "avg_logprob": -0.1331916303716154, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.027145685628056526}, {"id": 406, "seek": 170716, "start": 1710.6000000000001, "end": 1714.76, "text": " So when it comes to the phone number class, yes, we have the constructor", "tokens": [50536, 407, 562, 309, 1487, 281, 264, 2593, 1230, 1508, 11, 2086, 11, 321, 362, 264, 47479, 50744], "temperature": 0.0, "avg_logprob": -0.1331916303716154, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.027145685628056526}, {"id": 407, "seek": 170716, "start": 1714.76, "end": 1716.0, "text": " where we set all the values.", "tokens": [50744, 689, 321, 992, 439, 264, 4190, 13, 50806], "temperature": 0.0, "avg_logprob": -0.1331916303716154, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.027145685628056526}, {"id": 408, "seek": 170716, "start": 1716.0, "end": 1718.0, "text": " We do a range check in this class.", "tokens": [50806, 492, 360, 257, 3613, 1520, 294, 341, 1508, 13, 50906], "temperature": 0.0, "avg_logprob": -0.1331916303716154, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.027145685628056526}, {"id": 409, "seek": 170716, "start": 1718.0, "end": 1722.92, "text": " We make sure that it's within the range using this range check method.", "tokens": [50906, 492, 652, 988, 300, 309, 311, 1951, 264, 3613, 1228, 341, 3613, 1520, 3170, 13, 51152], "temperature": 0.0, "avg_logprob": -0.1331916303716154, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.027145685628056526}, {"id": 410, "seek": 170716, "start": 1724.44, "end": 1728.4, "text": " And afterwards we come to the crux of the matter, which is the equals method.", "tokens": [51228, 400, 10543, 321, 808, 281, 264, 5140, 87, 295, 264, 1871, 11, 597, 307, 264, 6915, 3170, 13, 51426], "temperature": 0.0, "avg_logprob": -0.1331916303716154, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.027145685628056526}, {"id": 411, "seek": 170716, "start": 1728.8400000000001, "end": 1730.5600000000002, "text": " So you can see here what he's done.", "tokens": [51448, 407, 291, 393, 536, 510, 437, 415, 311, 1096, 13, 51534], "temperature": 0.0, "avg_logprob": -0.1331916303716154, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.027145685628056526}, {"id": 412, "seek": 170716, "start": 1730.5600000000002, "end": 1735.96, "text": " He's firstly done the memory reference equality or check for memory reference", "tokens": [51534, 634, 311, 27376, 1096, 264, 4675, 6408, 14949, 420, 1520, 337, 4675, 6408, 51804], "temperature": 0.0, "avg_logprob": -0.1331916303716154, "compression_ratio": 1.7451737451737452, "no_speech_prob": 0.027145685628056526}, {"id": 413, "seek": 173596, "start": 1735.96, "end": 1740.6000000000001, "text": " and then check for the proper type, the type check and then the casting,", "tokens": [50364, 293, 550, 1520, 337, 264, 2296, 2010, 11, 264, 2010, 1520, 293, 550, 264, 17301, 11, 50596], "temperature": 0.0, "avg_logprob": -0.16409589659492924, "compression_ratio": 1.7434782608695651, "no_speech_prob": 0.0004582785186357796}, {"id": 414, "seek": 173596, "start": 1741.28, "end": 1745.6000000000001, "text": " which will be fine because we're doing the type check here.", "tokens": [50630, 597, 486, 312, 2489, 570, 321, 434, 884, 264, 2010, 1520, 510, 13, 50846], "temperature": 0.0, "avg_logprob": -0.16409589659492924, "compression_ratio": 1.7434782608695651, "no_speech_prob": 0.0004582785186357796}, {"id": 415, "seek": 173596, "start": 1745.6000000000001, "end": 1748.16, "text": " There won't be any class class exception areas.", "tokens": [50846, 821, 1582, 380, 312, 604, 1508, 1508, 11183, 3179, 13, 50974], "temperature": 0.0, "avg_logprob": -0.16409589659492924, "compression_ratio": 1.7434782608695651, "no_speech_prob": 0.0004582785186357796}, {"id": 416, "seek": 173596, "start": 1748.52, "end": 1752.0, "text": " And then he's comparing all the significant fields.", "tokens": [50992, 400, 550, 415, 311, 15763, 439, 264, 4776, 7909, 13, 51166], "temperature": 0.0, "avg_logprob": -0.16409589659492924, "compression_ratio": 1.7434782608695651, "no_speech_prob": 0.0004582785186357796}, {"id": 417, "seek": 173596, "start": 1752.64, "end": 1757.88, "text": " And for him, or I guess not for him, even for me, for anyone,", "tokens": [51198, 400, 337, 796, 11, 420, 286, 2041, 406, 337, 796, 11, 754, 337, 385, 11, 337, 2878, 11, 51460], "temperature": 0.0, "avg_logprob": -0.16409589659492924, "compression_ratio": 1.7434782608695651, "no_speech_prob": 0.0004582785186357796}, {"id": 418, "seek": 173596, "start": 1758.92, "end": 1761.24, "text": " this is a high quality equals method.", "tokens": [51512, 341, 307, 257, 1090, 3125, 6915, 3170, 13, 51628], "temperature": 0.0, "avg_logprob": -0.16409589659492924, "compression_ratio": 1.7434782608695651, "no_speech_prob": 0.0004582785186357796}, {"id": 419, "seek": 173596, "start": 1761.68, "end": 1765.48, "text": " And now we get to the final caveats when designing an equals method.", "tokens": [51650, 400, 586, 321, 483, 281, 264, 2572, 11730, 1720, 562, 14685, 364, 6915, 3170, 13, 51840], "temperature": 0.0, "avg_logprob": -0.16409589659492924, "compression_ratio": 1.7434782608695651, "no_speech_prob": 0.0004582785186357796}, {"id": 420, "seek": 176548, "start": 1765.72, "end": 1771.04, "text": " So the first one is always override hash code when overriding equals.", "tokens": [50376, 407, 264, 700, 472, 307, 1009, 42321, 22019, 3089, 562, 670, 81, 2819, 6915, 13, 50642], "temperature": 0.0, "avg_logprob": -0.15619077353641905, "compression_ratio": 1.619718309859155, "no_speech_prob": 0.0023593101650476456}, {"id": 421, "seek": 176548, "start": 1772.1200000000001, "end": 1776.1200000000001, "text": " We're not going to get too much into that because the next item is in fact", "tokens": [50696, 492, 434, 406, 516, 281, 483, 886, 709, 666, 300, 570, 264, 958, 3174, 307, 294, 1186, 50896], "temperature": 0.0, "avg_logprob": -0.15619077353641905, "compression_ratio": 1.619718309859155, "no_speech_prob": 0.0023593101650476456}, {"id": 422, "seek": 176548, "start": 1776.1200000000001, "end": 1778.3600000000001, "text": " all on the hash code method.", "tokens": [50896, 439, 322, 264, 22019, 3089, 3170, 13, 51008], "temperature": 0.0, "avg_logprob": -0.15619077353641905, "compression_ratio": 1.619718309859155, "no_speech_prob": 0.0023593101650476456}, {"id": 423, "seek": 176548, "start": 1778.92, "end": 1784.4, "text": " However, that's mostly to ensure that objects of the class work correctly", "tokens": [51036, 2908, 11, 300, 311, 5240, 281, 5586, 300, 6565, 295, 264, 1508, 589, 8944, 51310], "temperature": 0.0, "avg_logprob": -0.15619077353641905, "compression_ratio": 1.619718309859155, "no_speech_prob": 0.0023593101650476456}, {"id": 424, "seek": 176548, "start": 1784.4, "end": 1786.6, "text": " in hash based collection.", "tokens": [51310, 294, 22019, 2361, 5765, 13, 51420], "temperature": 0.0, "avg_logprob": -0.15619077353641905, "compression_ratio": 1.619718309859155, "no_speech_prob": 0.0023593101650476456}, {"id": 425, "seek": 176548, "start": 1786.6, "end": 1791.92, "text": " So objects can be put through a hash function and you want any of these", "tokens": [51420, 407, 6565, 393, 312, 829, 807, 257, 22019, 2445, 293, 291, 528, 604, 295, 613, 51686], "temperature": 0.0, "avg_logprob": -0.15619077353641905, "compression_ratio": 1.619718309859155, "no_speech_prob": 0.0023593101650476456}, {"id": 426, "seek": 179192, "start": 1791.92, "end": 1795.5600000000002, "text": " classes or any of these, yes, classes that use hash,", "tokens": [50364, 5359, 420, 604, 295, 613, 11, 2086, 11, 5359, 300, 764, 22019, 11, 50546], "temperature": 0.0, "avg_logprob": -0.16329823065241542, "compression_ratio": 1.704, "no_speech_prob": 0.0032221535220742226}, {"id": 427, "seek": 179192, "start": 1795.88, "end": 1798.68, "text": " hash based collections to work properly.", "tokens": [50562, 22019, 2361, 16641, 281, 589, 6108, 13, 50702], "temperature": 0.0, "avg_logprob": -0.16329823065241542, "compression_ratio": 1.704, "no_speech_prob": 0.0032221535220742226}, {"id": 428, "seek": 179192, "start": 1799.92, "end": 1803.28, "text": " And that's why whenever the equals method is overrided,", "tokens": [50764, 400, 300, 311, 983, 5699, 264, 6915, 3170, 307, 670, 81, 2112, 11, 50932], "temperature": 0.0, "avg_logprob": -0.16329823065241542, "compression_ratio": 1.704, "no_speech_prob": 0.0032221535220742226}, {"id": 429, "seek": 179192, "start": 1803.52, "end": 1806.72, "text": " we need to ensure that the hash code method is also overrided", "tokens": [50944, 321, 643, 281, 5586, 300, 264, 22019, 3089, 3170, 307, 611, 670, 81, 2112, 51104], "temperature": 0.0, "avg_logprob": -0.16329823065241542, "compression_ratio": 1.704, "no_speech_prob": 0.0032221535220742226}, {"id": 430, "seek": 179192, "start": 1807.16, "end": 1811.8000000000002, "text": " and updated appropriately, depending on what we do with the equals method", "tokens": [51126, 293, 10588, 23505, 11, 5413, 322, 437, 321, 360, 365, 264, 6915, 3170, 51358], "temperature": 0.0, "avg_logprob": -0.16329823065241542, "compression_ratio": 1.704, "no_speech_prob": 0.0032221535220742226}, {"id": 431, "seek": 179192, "start": 1812.1200000000001, "end": 1815.2, "text": " to make sure these collections and other data structures, in fact,", "tokens": [51374, 281, 652, 988, 613, 16641, 293, 661, 1412, 9227, 11, 294, 1186, 11, 51528], "temperature": 0.0, "avg_logprob": -0.16329823065241542, "compression_ratio": 1.704, "no_speech_prob": 0.0032221535220742226}, {"id": 432, "seek": 179192, "start": 1815.3200000000002, "end": 1817.3200000000002, "text": " work well with our objects.", "tokens": [51534, 589, 731, 365, 527, 6565, 13, 51634], "temperature": 0.0, "avg_logprob": -0.16329823065241542, "compression_ratio": 1.704, "no_speech_prob": 0.0032221535220742226}, {"id": 433, "seek": 179192, "start": 1817.3200000000002, "end": 1820.04, "text": " The next point is don't try to be too clever.", "tokens": [51634, 440, 958, 935, 307, 500, 380, 853, 281, 312, 886, 13494, 13, 51770], "temperature": 0.0, "avg_logprob": -0.16329823065241542, "compression_ratio": 1.704, "no_speech_prob": 0.0032221535220742226}, {"id": 434, "seek": 182004, "start": 1820.28, "end": 1822.84, "text": " Perhaps it's good advice for life itself.", "tokens": [50376, 10517, 309, 311, 665, 5192, 337, 993, 2564, 13, 50504], "temperature": 0.0, "avg_logprob": -0.1875924884148364, "compression_ratio": 1.640316205533597, "no_speech_prob": 0.014954143203794956}, {"id": 435, "seek": 182004, "start": 1823.52, "end": 1826.1599999999999, "text": " And Joshua Block states, don't try to be too clever.", "tokens": [50538, 400, 24005, 17500, 4368, 11, 500, 380, 853, 281, 312, 886, 13494, 13, 50670], "temperature": 0.0, "avg_logprob": -0.1875924884148364, "compression_ratio": 1.640316205533597, "no_speech_prob": 0.014954143203794956}, {"id": 436, "seek": 182004, "start": 1826.1599999999999, "end": 1831.56, "text": " If you simply test fields for equality, it's not hard to adhere to the equals contract.", "tokens": [50670, 759, 291, 2935, 1500, 7909, 337, 14949, 11, 309, 311, 406, 1152, 281, 33584, 281, 264, 6915, 4364, 13, 50940], "temperature": 0.0, "avg_logprob": -0.1875924884148364, "compression_ratio": 1.640316205533597, "no_speech_prob": 0.014954143203794956}, {"id": 437, "seek": 182004, "start": 1832.04, "end": 1835.6, "text": " If you are overly aggressive in searching for equivalence,", "tokens": [50964, 759, 291, 366, 24324, 10762, 294, 10808, 337, 9052, 655, 11, 51142], "temperature": 0.0, "avg_logprob": -0.1875924884148364, "compression_ratio": 1.640316205533597, "no_speech_prob": 0.014954143203794956}, {"id": 438, "seek": 182004, "start": 1835.6399999999999, "end": 1837.56, "text": " it's easy to get into trouble.", "tokens": [51144, 309, 311, 1858, 281, 483, 666, 5253, 13, 51240], "temperature": 0.0, "avg_logprob": -0.1875924884148364, "compression_ratio": 1.640316205533597, "no_speech_prob": 0.014954143203794956}, {"id": 439, "seek": 182004, "start": 1837.56, "end": 1842.08, "text": " And the example he's given is when it comes to equivalence relation or the comparison,", "tokens": [51240, 400, 264, 1365, 415, 311, 2212, 307, 562, 309, 1487, 281, 9052, 655, 9721, 420, 264, 9660, 11, 51466], "temperature": 0.0, "avg_logprob": -0.1875924884148364, "compression_ratio": 1.640316205533597, "no_speech_prob": 0.014954143203794956}, {"id": 440, "seek": 182004, "start": 1842.68, "end": 1846.6399999999999, "text": " don't take aliases such as symbolic links into account.", "tokens": [51496, 500, 380, 747, 10198, 1957, 1270, 382, 25755, 6123, 666, 2696, 13, 51694], "temperature": 0.0, "avg_logprob": -0.1875924884148364, "compression_ratio": 1.640316205533597, "no_speech_prob": 0.014954143203794956}, {"id": 441, "seek": 184664, "start": 1846.64, "end": 1851.88, "text": " Or the example here is, is the file class has symbolic links", "tokens": [50364, 1610, 264, 1365, 510, 307, 11, 307, 264, 3991, 1508, 575, 25755, 6123, 50626], "temperature": 0.0, "avg_logprob": -0.16959603627522787, "compression_ratio": 1.7078189300411524, "no_speech_prob": 0.004681034944951534}, {"id": 442, "seek": 184664, "start": 1851.88, "end": 1857.4, "text": " and we shouldn't take that kind of alias into account when doing an equality check.", "tokens": [50626, 293, 321, 4659, 380, 747, 300, 733, 295, 419, 4609, 666, 2696, 562, 884, 364, 14949, 1520, 13, 50902], "temperature": 0.0, "avg_logprob": -0.16959603627522787, "compression_ratio": 1.7078189300411524, "no_speech_prob": 0.004681034944951534}, {"id": 443, "seek": 184664, "start": 1857.5600000000002, "end": 1861.88, "text": " And a few definitions to understand what the relationship between an alias and a symbolic link is.", "tokens": [50910, 400, 257, 1326, 21988, 281, 1223, 437, 264, 2480, 1296, 364, 419, 4609, 293, 257, 25755, 2113, 307, 13, 51126], "temperature": 0.0, "avg_logprob": -0.16959603627522787, "compression_ratio": 1.7078189300411524, "no_speech_prob": 0.004681034944951534}, {"id": 444, "seek": 184664, "start": 1861.88, "end": 1868.16, "text": " So firstly, as Biden has put it, a soft or symbolic link is a file pointer.", "tokens": [51126, 407, 27376, 11, 382, 9877, 575, 829, 309, 11, 257, 2787, 420, 25755, 2113, 307, 257, 3991, 23918, 13, 51440], "temperature": 0.0, "avg_logprob": -0.16959603627522787, "compression_ratio": 1.7078189300411524, "no_speech_prob": 0.004681034944951534}, {"id": 445, "seek": 184664, "start": 1868.16, "end": 1874.96, "text": " So in the file class that behaves as a file that is linking to if the target file gets deleted,", "tokens": [51440, 407, 294, 264, 3991, 1508, 300, 36896, 382, 257, 3991, 300, 307, 25775, 281, 498, 264, 3779, 3991, 2170, 22981, 11, 51780], "temperature": 0.0, "avg_logprob": -0.16959603627522787, "compression_ratio": 1.7078189300411524, "no_speech_prob": 0.004681034944951534}, {"id": 446, "seek": 187496, "start": 1875.3600000000001, "end": 1877.28, "text": " then the link is unusable.", "tokens": [50384, 550, 264, 2113, 307, 10054, 712, 13, 50480], "temperature": 0.0, "avg_logprob": -0.2207648468017578, "compression_ratio": 1.7169117647058822, "no_speech_prob": 0.004981229547411203}, {"id": 447, "seek": 187496, "start": 1877.96, "end": 1879.48, "text": " So it's mostly a pointer.", "tokens": [50514, 407, 309, 311, 5240, 257, 23918, 13, 50590], "temperature": 0.0, "avg_logprob": -0.2207648468017578, "compression_ratio": 1.7169117647058822, "no_speech_prob": 0.004981229547411203}, {"id": 448, "seek": 187496, "start": 1879.48, "end": 1884.8400000000001, "text": " And I think, in fact, charge dpd had a much better explanation than even", "tokens": [50590, 400, 286, 519, 11, 294, 1186, 11, 4602, 274, 79, 67, 632, 257, 709, 1101, 10835, 813, 754, 50858], "temperature": 0.0, "avg_logprob": -0.2207648468017578, "compression_ratio": 1.7169117647058822, "no_speech_prob": 0.004981229547411203}, {"id": 449, "seek": 187496, "start": 1884.8400000000001, "end": 1888.1200000000001, "text": " well done and I really love well done's blog.", "tokens": [50858, 731, 1096, 293, 286, 534, 959, 731, 1096, 311, 6968, 13, 51022], "temperature": 0.0, "avg_logprob": -0.2207648468017578, "compression_ratio": 1.7169117647058822, "no_speech_prob": 0.004981229547411203}, {"id": 450, "seek": 187496, "start": 1888.44, "end": 1892.88, "text": " In any case, what charge dpd states is an example of a symbolic link.", "tokens": [51038, 682, 604, 1389, 11, 437, 4602, 274, 79, 67, 4368, 307, 364, 1365, 295, 257, 25755, 2113, 13, 51260], "temperature": 0.0, "avg_logprob": -0.2207648468017578, "compression_ratio": 1.7169117647058822, "no_speech_prob": 0.004981229547411203}, {"id": 451, "seek": 187496, "start": 1892.88, "end": 1897.3600000000001, "text": " Imagine you have a folder called original and you have a large number of files in it.", "tokens": [51260, 11739, 291, 362, 257, 10820, 1219, 3380, 293, 291, 362, 257, 2416, 1230, 295, 7098, 294, 309, 13, 51484], "temperature": 0.0, "avg_logprob": -0.2207648468017578, "compression_ratio": 1.7169117647058822, "no_speech_prob": 0.004981229547411203}, {"id": 452, "seek": 187496, "start": 1898.04, "end": 1902.48, "text": " Now, you want to create another copy of the folder, which is identical to the original folder,", "tokens": [51518, 823, 11, 291, 528, 281, 1884, 1071, 5055, 295, 264, 10820, 11, 597, 307, 14800, 281, 264, 3380, 10820, 11, 51740], "temperature": 0.0, "avg_logprob": -0.2207648468017578, "compression_ratio": 1.7169117647058822, "no_speech_prob": 0.004981229547411203}, {"id": 453, "seek": 187496, "start": 1902.6000000000001, "end": 1904.6000000000001, "text": " but in another location of your file system.", "tokens": [51746, 457, 294, 1071, 4914, 295, 428, 3991, 1185, 13, 51846], "temperature": 0.0, "avg_logprob": -0.2207648468017578, "compression_ratio": 1.7169117647058822, "no_speech_prob": 0.004981229547411203}, {"id": 454, "seek": 190496, "start": 1905.2, "end": 1908.16, "text": " Instead of copying the entire folder and its contents,", "tokens": [50376, 7156, 295, 27976, 264, 2302, 10820, 293, 1080, 15768, 11, 50524], "temperature": 0.0, "avg_logprob": -0.17009738340216168, "compression_ratio": 1.8146718146718146, "no_speech_prob": 0.0013248492032289505}, {"id": 455, "seek": 190496, "start": 1908.16, "end": 1913.48, "text": " you can create a symbolic link to the original folder and place it in the desired location.", "tokens": [50524, 291, 393, 1884, 257, 25755, 2113, 281, 264, 3380, 10820, 293, 1081, 309, 294, 264, 14721, 4914, 13, 50790], "temperature": 0.0, "avg_logprob": -0.17009738340216168, "compression_ratio": 1.8146718146718146, "no_speech_prob": 0.0013248492032289505}, {"id": 456, "seek": 190496, "start": 1914.1200000000001, "end": 1918.96, "text": " I can access the original files to the symbolic link, which acts as an alias.", "tokens": [50822, 286, 393, 2105, 264, 3380, 7098, 281, 264, 25755, 2113, 11, 597, 10672, 382, 364, 419, 4609, 13, 51064], "temperature": 0.0, "avg_logprob": -0.17009738340216168, "compression_ratio": 1.8146718146718146, "no_speech_prob": 0.0013248492032289505}, {"id": 457, "seek": 190496, "start": 1918.96, "end": 1923.28, "text": " So it's that's that's the bit that alias bit or the symbolic link we create", "tokens": [51064, 407, 309, 311, 300, 311, 300, 311, 264, 857, 300, 419, 4609, 857, 420, 264, 25755, 2113, 321, 1884, 51280], "temperature": 0.0, "avg_logprob": -0.17009738340216168, "compression_ratio": 1.8146718146718146, "no_speech_prob": 0.0013248492032289505}, {"id": 458, "seek": 190496, "start": 1923.6000000000001, "end": 1927.52, "text": " shouldn't be taken into consideration when designing the equals method.", "tokens": [51296, 4659, 380, 312, 2726, 666, 12381, 562, 14685, 264, 6915, 3170, 13, 51492], "temperature": 0.0, "avg_logprob": -0.17009738340216168, "compression_ratio": 1.8146718146718146, "no_speech_prob": 0.0013248492032289505}, {"id": 459, "seek": 190496, "start": 1927.88, "end": 1929.88, "text": " That's a field we should ignore.", "tokens": [51510, 663, 311, 257, 2519, 321, 820, 11200, 13, 51610], "temperature": 0.0, "avg_logprob": -0.17009738340216168, "compression_ratio": 1.8146718146718146, "no_speech_prob": 0.0013248492032289505}, {"id": 460, "seek": 190496, "start": 1929.88, "end": 1932.48, "text": " And then an example of an alias is, let's say you have an object", "tokens": [51610, 400, 550, 364, 1365, 295, 364, 419, 4609, 307, 11, 718, 311, 584, 291, 362, 364, 2657, 51740], "temperature": 0.0, "avg_logprob": -0.17009738340216168, "compression_ratio": 1.8146718146718146, "no_speech_prob": 0.0013248492032289505}, {"id": 461, "seek": 193248, "start": 1932.48, "end": 1936.2, "text": " A with some properties and methods and you create an object B", "tokens": [50364, 316, 365, 512, 7221, 293, 7150, 293, 291, 1884, 364, 2657, 363, 50550], "temperature": 0.0, "avg_logprob": -0.20190123310239297, "compression_ratio": 1.876, "no_speech_prob": 0.021941255778074265}, {"id": 462, "seek": 193248, "start": 1936.6, "end": 1938.68, "text": " that is identical to object A.", "tokens": [50570, 300, 307, 14800, 281, 2657, 316, 13, 50674], "temperature": 0.0, "avg_logprob": -0.20190123310239297, "compression_ratio": 1.876, "no_speech_prob": 0.021941255778074265}, {"id": 463, "seek": 193248, "start": 1938.68, "end": 1942.4, "text": " Now you can access object A's properties and methods through object B,", "tokens": [50674, 823, 291, 393, 2105, 2657, 316, 311, 7221, 293, 7150, 807, 2657, 363, 11, 50860], "temperature": 0.0, "avg_logprob": -0.20190123310239297, "compression_ratio": 1.876, "no_speech_prob": 0.021941255778074265}, {"id": 464, "seek": 193248, "start": 1942.44, "end": 1945.28, "text": " which acts as a as an alias for object A.", "tokens": [50862, 597, 10672, 382, 257, 382, 364, 419, 4609, 337, 2657, 316, 13, 51004], "temperature": 0.0, "avg_logprob": -0.20190123310239297, "compression_ratio": 1.876, "no_speech_prob": 0.021941255778074265}, {"id": 465, "seek": 193248, "start": 1945.3600000000001, "end": 1947.16, "text": " So that kind of makes is what an alias is.", "tokens": [51008, 407, 300, 733, 295, 1669, 307, 437, 364, 419, 4609, 307, 13, 51098], "temperature": 0.0, "avg_logprob": -0.20190123310239297, "compression_ratio": 1.876, "no_speech_prob": 0.021941255778074265}, {"id": 466, "seek": 193248, "start": 1947.16, "end": 1948.88, "text": " And this is how you define symbolic links.", "tokens": [51098, 400, 341, 307, 577, 291, 6964, 25755, 6123, 13, 51184], "temperature": 0.0, "avg_logprob": -0.20190123310239297, "compression_ratio": 1.876, "no_speech_prob": 0.021941255778074265}, {"id": 467, "seek": 193248, "start": 1948.88, "end": 1952.84, "text": " So in the files method, we have file, stock, create symbolic link.", "tokens": [51184, 407, 294, 264, 7098, 3170, 11, 321, 362, 3991, 11, 4127, 11, 1884, 25755, 2113, 13, 51382], "temperature": 0.0, "avg_logprob": -0.20190123310239297, "compression_ratio": 1.876, "no_speech_prob": 0.021941255778074265}, {"id": 468, "seek": 193248, "start": 1952.96, "end": 1955.64, "text": " We have the link we create and then we have the target.", "tokens": [51388, 492, 362, 264, 2113, 321, 1884, 293, 550, 321, 362, 264, 3779, 13, 51522], "temperature": 0.0, "avg_logprob": -0.20190123310239297, "compression_ratio": 1.876, "no_speech_prob": 0.021941255778074265}, {"id": 469, "seek": 193248, "start": 1956.0, "end": 1959.76, "text": " This link we create shouldn't be used when it comes to", "tokens": [51540, 639, 2113, 321, 1884, 4659, 380, 312, 1143, 562, 309, 1487, 281, 51728], "temperature": 0.0, "avg_logprob": -0.20190123310239297, "compression_ratio": 1.876, "no_speech_prob": 0.021941255778074265}, {"id": 470, "seek": 195976, "start": 1960.64, "end": 1963.6, "text": " a equivalence relation in I equals method.", "tokens": [50408, 257, 9052, 655, 9721, 294, 286, 6915, 3170, 13, 50556], "temperature": 0.0, "avg_logprob": -0.1606030824805508, "compression_ratio": 1.711191335740072, "no_speech_prob": 0.014954240061342716}, {"id": 471, "seek": 195976, "start": 1963.6, "end": 1966.4, "text": " That should be ignored and it's not a significant field.", "tokens": [50556, 663, 820, 312, 19735, 293, 309, 311, 406, 257, 4776, 2519, 13, 50696], "temperature": 0.0, "avg_logprob": -0.1606030824805508, "compression_ratio": 1.711191335740072, "no_speech_prob": 0.014954240061342716}, {"id": 472, "seek": 195976, "start": 1966.6, "end": 1968.92, "text": " So the final caveat is, in fact, quite important.", "tokens": [50706, 407, 264, 2572, 43012, 307, 11, 294, 1186, 11, 1596, 1021, 13, 50822], "temperature": 0.0, "avg_logprob": -0.1606030824805508, "compression_ratio": 1.711191335740072, "no_speech_prob": 0.014954240061342716}, {"id": 473, "seek": 195976, "start": 1968.92, "end": 1971.8799999999999, "text": " Now, the other two caveats are I don't think, at least,", "tokens": [50822, 823, 11, 264, 661, 732, 11730, 1720, 366, 286, 500, 380, 519, 11, 412, 1935, 11, 50970], "temperature": 0.0, "avg_logprob": -0.1606030824805508, "compression_ratio": 1.711191335740072, "no_speech_prob": 0.014954240061342716}, {"id": 474, "seek": 195976, "start": 1971.8799999999999, "end": 1974.32, "text": " that one would be prone to making those mistakes.", "tokens": [50970, 300, 472, 576, 312, 25806, 281, 1455, 729, 8038, 13, 51092], "temperature": 0.0, "avg_logprob": -0.1606030824805508, "compression_ratio": 1.711191335740072, "no_speech_prob": 0.014954240061342716}, {"id": 475, "seek": 195976, "start": 1974.56, "end": 1978.48, "text": " Whereas this most certainly I can see myself making this mistake.", "tokens": [51104, 13813, 341, 881, 3297, 286, 393, 536, 2059, 1455, 341, 6146, 13, 51300], "temperature": 0.0, "avg_logprob": -0.1606030824805508, "compression_ratio": 1.711191335740072, "no_speech_prob": 0.014954240061342716}, {"id": 476, "seek": 195976, "start": 1978.72, "end": 1983.28, "text": " It is that you shouldn't substitute another type for object in the equals", "tokens": [51312, 467, 307, 300, 291, 4659, 380, 15802, 1071, 2010, 337, 2657, 294, 264, 6915, 51540], "temperature": 0.0, "avg_logprob": -0.1606030824805508, "compression_ratio": 1.711191335740072, "no_speech_prob": 0.014954240061342716}, {"id": 477, "seek": 195976, "start": 1983.28, "end": 1988.8799999999999, "text": " declaration. So as you saw in the equals method as defined in the object super", "tokens": [51540, 27606, 13, 407, 382, 291, 1866, 294, 264, 6915, 3170, 382, 7642, 294, 264, 2657, 1687, 51820], "temperature": 0.0, "avg_logprob": -0.1606030824805508, "compression_ratio": 1.711191335740072, "no_speech_prob": 0.014954240061342716}, {"id": 478, "seek": 198888, "start": 1988.88, "end": 1992.3200000000002, "text": " class, it we all actually, this is a bad example.", "tokens": [50364, 1508, 11, 309, 321, 439, 767, 11, 341, 307, 257, 1578, 1365, 13, 50536], "temperature": 0.0, "avg_logprob": -0.2235517414337998, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.007119684014469385}, {"id": 479, "seek": 198888, "start": 1992.3600000000001, "end": 1993.68, "text": " This is the way not to do it.", "tokens": [50538, 639, 307, 264, 636, 406, 281, 360, 309, 13, 50604], "temperature": 0.0, "avg_logprob": -0.2235517414337998, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.007119684014469385}, {"id": 480, "seek": 198888, "start": 1993.72, "end": 1997.0400000000002, "text": " But normally what you'd have here is the object we take in the", "tokens": [50606, 583, 5646, 437, 291, 1116, 362, 510, 307, 264, 2657, 321, 747, 294, 264, 50772], "temperature": 0.0, "avg_logprob": -0.2235517414337998, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.007119684014469385}, {"id": 481, "seek": 198888, "start": 1997.0400000000002, "end": 1998.8000000000002, "text": " parameter would be of type object.", "tokens": [50772, 13075, 576, 312, 295, 2010, 2657, 13, 50860], "temperature": 0.0, "avg_logprob": -0.2235517414337998, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.007119684014469385}, {"id": 482, "seek": 198888, "start": 1999.2, "end": 2001.68, "text": " But let's say we define it to be some other type.", "tokens": [50880, 583, 718, 311, 584, 321, 6964, 309, 281, 312, 512, 661, 2010, 13, 51004], "temperature": 0.0, "avg_logprob": -0.2235517414337998, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.007119684014469385}, {"id": 483, "seek": 198888, "start": 2002.24, "end": 2006.6000000000001, "text": " This will create some problems because firstly, what this does is", "tokens": [51032, 639, 486, 1884, 512, 2740, 570, 27376, 11, 437, 341, 775, 307, 51250], "temperature": 0.0, "avg_logprob": -0.2235517414337998, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.007119684014469385}, {"id": 484, "seek": 198888, "start": 2006.6000000000001, "end": 2010.44, "text": " it will the compiler will not inherit the problem implementation of the equals", "tokens": [51250, 309, 486, 264, 31958, 486, 406, 21389, 264, 1154, 11420, 295, 264, 6915, 51442], "temperature": 0.0, "avg_logprob": -0.2235517414337998, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.007119684014469385}, {"id": 485, "seek": 198888, "start": 2010.44, "end": 2014.3200000000002, "text": " method. And since the method is strongly typed.", "tokens": [51442, 3170, 13, 400, 1670, 264, 3170, 307, 10613, 33941, 13, 51636], "temperature": 0.0, "avg_logprob": -0.2235517414337998, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.007119684014469385}, {"id": 486, "seek": 201432, "start": 2014.32, "end": 2018.3999999999999, "text": " So now we've specifically defined what type we want.", "tokens": [50364, 407, 586, 321, 600, 4682, 7642, 437, 2010, 321, 528, 13, 50568], "temperature": 0.0, "avg_logprob": -0.18542184635084502, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.003027510829269886}, {"id": 487, "seek": 201432, "start": 2018.56, "end": 2020.76, "text": " And it can't just be the superclass object.", "tokens": [50576, 400, 309, 393, 380, 445, 312, 264, 1687, 11665, 2657, 13, 50686], "temperature": 0.0, "avg_logprob": -0.18542184635084502, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.003027510829269886}, {"id": 488, "seek": 201432, "start": 2021.3999999999999, "end": 2025.6799999999998, "text": " It'll take objects of a specific class, a specific type instead of object,", "tokens": [50718, 467, 603, 747, 6565, 295, 257, 2685, 1508, 11, 257, 2685, 2010, 2602, 295, 2657, 11, 50932], "temperature": 0.0, "avg_logprob": -0.18542184635084502, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.003027510829269886}, {"id": 489, "seek": 201432, "start": 2025.72, "end": 2028.56, "text": " which can give false positives, certainly.", "tokens": [50934, 597, 393, 976, 7908, 35127, 11, 3297, 13, 51076], "temperature": 0.0, "avg_logprob": -0.18542184635084502, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.003027510829269886}, {"id": 490, "seek": 201432, "start": 2028.84, "end": 2033.24, "text": " And one other point there is the problem with defining the equals method like", "tokens": [51090, 400, 472, 661, 935, 456, 307, 264, 1154, 365, 17827, 264, 6915, 3170, 411, 51310], "temperature": 0.0, "avg_logprob": -0.18542184635084502, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.003027510829269886}, {"id": 491, "seek": 201432, "start": 2033.24, "end": 2040.12, "text": " this is the method does not override the object dot equals because we do inherit", "tokens": [51310, 341, 307, 264, 3170, 775, 406, 42321, 264, 2657, 5893, 6915, 570, 321, 360, 21389, 51654], "temperature": 0.0, "avg_logprob": -0.18542184635084502, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.003027510829269886}, {"id": 492, "seek": 201432, "start": 2040.12, "end": 2041.84, "text": " this from the superclass object.", "tokens": [51654, 341, 490, 264, 1687, 11665, 2657, 13, 51740], "temperature": 0.0, "avg_logprob": -0.18542184635084502, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.003027510829269886}, {"id": 493, "seek": 204184, "start": 2041.84, "end": 2044.56, "text": " We do it like this instead of overriding.", "tokens": [50364, 492, 360, 309, 411, 341, 2602, 295, 670, 81, 2819, 13, 50500], "temperature": 0.0, "avg_logprob": -0.2040229638417562, "compression_ratio": 1.707070707070707, "no_speech_prob": 0.0009546864894218743}, {"id": 494, "seek": 204184, "start": 2045.72, "end": 2050.12, "text": " It will overload it because the method in the object dot equals class,", "tokens": [50558, 467, 486, 28777, 309, 570, 264, 3170, 294, 264, 2657, 5893, 6915, 1508, 11, 50778], "temperature": 0.0, "avg_logprob": -0.2040229638417562, "compression_ratio": 1.707070707070707, "no_speech_prob": 0.0009546864894218743}, {"id": 495, "seek": 204184, "start": 2050.4, "end": 2052.08, "text": " the type is object.", "tokens": [50792, 264, 2010, 307, 2657, 13, 50876], "temperature": 0.0, "avg_logprob": -0.2040229638417562, "compression_ratio": 1.707070707070707, "no_speech_prob": 0.0009546864894218743}, {"id": 496, "seek": 204184, "start": 2052.44, "end": 2056.0, "text": " And now we've changed it where it's going to be overloaded and the equals", "tokens": [50894, 400, 586, 321, 600, 3105, 309, 689, 309, 311, 516, 281, 312, 28777, 292, 293, 264, 6915, 51072], "temperature": 0.0, "avg_logprob": -0.2040229638417562, "compression_ratio": 1.707070707070707, "no_speech_prob": 0.0009546864894218743}, {"id": 497, "seek": 204184, "start": 2056.0, "end": 2059.64, "text": " method will still exist in our subclass.", "tokens": [51072, 3170, 486, 920, 2514, 294, 527, 1422, 11665, 13, 51254], "temperature": 0.0, "avg_logprob": -0.2040229638417562, "compression_ratio": 1.707070707070707, "no_speech_prob": 0.0009546864894218743}, {"id": 498, "seek": 204184, "start": 2060.0, "end": 2061.7599999999998, "text": " So it'll sort of be like this.", "tokens": [51272, 407, 309, 603, 1333, 295, 312, 411, 341, 13, 51360], "temperature": 0.0, "avg_logprob": -0.2040229638417562, "compression_ratio": 1.707070707070707, "no_speech_prob": 0.0009546864894218743}, {"id": 499, "seek": 204184, "start": 2061.7599999999998, "end": 2066.08, "text": " It'll be it'll be this and then there'll be another method.", "tokens": [51360, 467, 603, 312, 309, 603, 312, 341, 293, 550, 456, 603, 312, 1071, 3170, 13, 51576], "temperature": 0.0, "avg_logprob": -0.2040229638417562, "compression_ratio": 1.707070707070707, "no_speech_prob": 0.0009546864894218743}, {"id": 500, "seek": 206608, "start": 2066.96, "end": 2071.36, "text": " With object, Java disallowed this because the signature of these two methods", "tokens": [50408, 2022, 2657, 11, 10745, 717, 13253, 292, 341, 570, 264, 13397, 295, 613, 732, 7150, 50628], "temperature": 0.0, "avg_logprob": -0.3200735168457031, "compression_ratio": 1.6726618705035972, "no_speech_prob": 0.01770952343940735}, {"id": 501, "seek": 206608, "start": 2071.36, "end": 2073.88, "text": " are different. They're both, they've both got the same name.", "tokens": [50628, 366, 819, 13, 814, 434, 1293, 11, 436, 600, 1293, 658, 264, 912, 1315, 13, 50754], "temperature": 0.0, "avg_logprob": -0.3200735168457031, "compression_ratio": 1.6726618705035972, "no_speech_prob": 0.01770952343940735}, {"id": 502, "seek": 206608, "start": 2074.0, "end": 2077.2, "text": " However, they take in different types of parameters.", "tokens": [50760, 2908, 11, 436, 747, 294, 819, 3467, 295, 9834, 13, 50920], "temperature": 0.0, "avg_logprob": -0.3200735168457031, "compression_ratio": 1.6726618705035972, "no_speech_prob": 0.01770952343940735}, {"id": 503, "seek": 206608, "start": 2077.2, "end": 2078.84, "text": " So overloading takes place.", "tokens": [50920, 407, 28777, 278, 2516, 1081, 13, 51002], "temperature": 0.0, "avg_logprob": -0.3200735168457031, "compression_ratio": 1.6726618705035972, "no_speech_prob": 0.01770952343940735}, {"id": 504, "seek": 206608, "start": 2078.88, "end": 2083.08, "text": " And this is a problem again, cause it can mislead the client of our class.", "tokens": [51004, 400, 341, 307, 257, 1154, 797, 11, 3082, 309, 393, 3346, 306, 345, 264, 6423, 295, 527, 1508, 13, 51214], "temperature": 0.0, "avg_logprob": -0.3200735168457031, "compression_ratio": 1.6726618705035972, "no_speech_prob": 0.01770952343940735}, {"id": 505, "seek": 206608, "start": 2083.12, "end": 2087.64, "text": " Now, in my opinion, it's always a good habit to use annotations in Java.", "tokens": [51216, 823, 11, 294, 452, 4800, 11, 309, 311, 1009, 257, 665, 7164, 281, 764, 25339, 763, 294, 10745, 13, 51442], "temperature": 0.0, "avg_logprob": -0.3200735168457031, "compression_ratio": 1.6726618705035972, "no_speech_prob": 0.01770952343940735}, {"id": 506, "seek": 206608, "start": 2087.68, "end": 2088.88, "text": " I think that's a good idea.", "tokens": [51444, 286, 519, 300, 311, 257, 665, 1558, 13, 51504], "temperature": 0.0, "avg_logprob": -0.3200735168457031, "compression_ratio": 1.6726618705035972, "no_speech_prob": 0.01770952343940735}, {"id": 507, "seek": 206608, "start": 2089.3199999999997, "end": 2094.92, "text": " And this is a good example of why perhaps using an annotation is good.", "tokens": [51526, 400, 341, 307, 257, 665, 1365, 295, 983, 4317, 1228, 364, 48654, 307, 665, 13, 51806], "temperature": 0.0, "avg_logprob": -0.3200735168457031, "compression_ratio": 1.6726618705035972, "no_speech_prob": 0.01770952343940735}, {"id": 508, "seek": 209492, "start": 2094.92, "end": 2098.12, "text": " Not for the sake of the compiler, let's say, but more for the programmer,", "tokens": [50364, 1726, 337, 264, 9717, 295, 264, 31958, 11, 718, 311, 584, 11, 457, 544, 337, 264, 32116, 11, 50524], "temperature": 0.0, "avg_logprob": -0.32150312691680655, "compression_ratio": 1.6605166051660516, "no_speech_prob": 0.0075760092586278915}, {"id": 509, "seek": 209492, "start": 2098.12, "end": 2103.04, "text": " because what happens here is here, because we explicitly stating,", "tokens": [50524, 570, 437, 2314, 510, 307, 510, 11, 570, 321, 20803, 26688, 11, 50770], "temperature": 0.0, "avg_logprob": -0.32150312691680655, "compression_ratio": 1.6605166051660516, "no_speech_prob": 0.0075760092586278915}, {"id": 510, "seek": 209492, "start": 2103.7200000000003, "end": 2107.16, "text": " we're going to override the equals method in the superclass.", "tokens": [50804, 321, 434, 516, 281, 42321, 264, 6915, 3170, 294, 264, 1687, 11665, 13, 50976], "temperature": 0.0, "avg_logprob": -0.32150312691680655, "compression_ratio": 1.6605166051660516, "no_speech_prob": 0.0075760092586278915}, {"id": 511, "seek": 209492, "start": 2108.16, "end": 2109.32, "text": " This won't compile.", "tokens": [51026, 639, 1582, 380, 31413, 13, 51084], "temperature": 0.0, "avg_logprob": -0.32150312691680655, "compression_ratio": 1.6605166051660516, "no_speech_prob": 0.0075760092586278915}, {"id": 512, "seek": 209492, "start": 2109.36, "end": 2110.4, "text": " It'll give an error.", "tokens": [51086, 467, 603, 976, 364, 6713, 13, 51138], "temperature": 0.0, "avg_logprob": -0.32150312691680655, "compression_ratio": 1.6605166051660516, "no_speech_prob": 0.0075760092586278915}, {"id": 513, "seek": 209492, "start": 2111.16, "end": 2113.56, "text": " It's still broken, of course, but at least it won't compile.", "tokens": [51176, 467, 311, 920, 5463, 11, 295, 1164, 11, 457, 412, 1935, 309, 1582, 380, 31413, 13, 51296], "temperature": 0.0, "avg_logprob": -0.32150312691680655, "compression_ratio": 1.6605166051660516, "no_speech_prob": 0.0075760092586278915}, {"id": 514, "seek": 209492, "start": 2113.56, "end": 2116.88, "text": " So we'll, you know, pick our mistake and we'll recognize some things.", "tokens": [51296, 407, 321, 603, 11, 291, 458, 11, 1888, 527, 6146, 293, 321, 603, 5521, 512, 721, 13, 51462], "temperature": 0.0, "avg_logprob": -0.32150312691680655, "compression_ratio": 1.6605166051660516, "no_speech_prob": 0.0075760092586278915}, {"id": 515, "seek": 209492, "start": 2116.88, "end": 2120.88, "text": " We've done something wrong here by giving it type my class instead of object.", "tokens": [51462, 492, 600, 1096, 746, 2085, 510, 538, 2902, 309, 2010, 452, 1508, 2602, 295, 2657, 13, 51662], "temperature": 0.0, "avg_logprob": -0.32150312691680655, "compression_ratio": 1.6605166051660516, "no_speech_prob": 0.0075760092586278915}, {"id": 516, "seek": 212088, "start": 2121.7200000000003, "end": 2125.7200000000003, "text": " And I think it's good because now we're saying instead of overloading,", "tokens": [50406, 400, 286, 519, 309, 311, 665, 570, 586, 321, 434, 1566, 2602, 295, 28777, 278, 11, 50606], "temperature": 0.0, "avg_logprob": -0.37629762243052, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.010168452747166157}, {"id": 517, "seek": 212088, "start": 2125.76, "end": 2130.2400000000002, "text": " we want it to, we're explicitly stating we want it to override and the compiler", "tokens": [50608, 321, 528, 309, 281, 11, 321, 434, 20803, 26688, 321, 528, 309, 281, 42321, 293, 264, 31958, 50832], "temperature": 0.0, "avg_logprob": -0.37629762243052, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.010168452747166157}, {"id": 518, "seek": 212088, "start": 2130.2400000000002, "end": 2133.96, "text": " is saying, nope, we can't do this, which is what you'll see here.", "tokens": [50832, 307, 1566, 11, 23444, 11, 321, 393, 380, 360, 341, 11, 597, 307, 437, 291, 603, 536, 510, 13, 51018], "temperature": 0.0, "avg_logprob": -0.37629762243052, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.010168452747166157}, {"id": 519, "seek": 212088, "start": 2133.96, "end": 2134.8, "text": " So this is demo here.", "tokens": [51018, 407, 341, 307, 10723, 510, 13, 51060], "temperature": 0.0, "avg_logprob": -0.37629762243052, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.010168452747166157}, {"id": 520, "seek": 212088, "start": 2134.8, "end": 2137.92, "text": " I have a parent class with a equals method.", "tokens": [51060, 286, 362, 257, 2596, 1508, 365, 257, 6915, 3170, 13, 51216], "temperature": 0.0, "avg_logprob": -0.37629762243052, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.010168452747166157}, {"id": 521, "seek": 212088, "start": 2138.76, "end": 2143.32, "text": " And if you look at the child class, this is dangerous because we're doing", "tokens": [51258, 400, 498, 291, 574, 412, 264, 1440, 1508, 11, 341, 307, 5795, 570, 321, 434, 884, 51486], "temperature": 0.0, "avg_logprob": -0.37629762243052, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.010168452747166157}, {"id": 522, "seek": 212088, "start": 2143.32, "end": 2145.12, "text": " overloading here unknowingly.", "tokens": [51486, 28777, 278, 510, 517, 15869, 12163, 13, 51576], "temperature": 0.0, "avg_logprob": -0.37629762243052, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.010168452747166157}, {"id": 523, "seek": 212088, "start": 2145.36, "end": 2148.6400000000003, "text": " However, if we do put the override annotations in here,", "tokens": [51588, 2908, 11, 498, 321, 360, 829, 264, 42321, 25339, 763, 294, 510, 11, 51752], "temperature": 0.0, "avg_logprob": -0.37629762243052, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.010168452747166157}, {"id": 524, "seek": 214864, "start": 2148.64, "end": 2152.52, "text": " if we do put the override annotation, it'll throw an error, let's say,", "tokens": [50364, 498, 321, 360, 829, 264, 42321, 48654, 11, 309, 603, 3507, 364, 6713, 11, 718, 311, 584, 11, 50558], "temperature": 0.0, "avg_logprob": -0.19023824858185429, "compression_ratio": 1.8191881918819188, "no_speech_prob": 0.0016228845342993736}, {"id": 525, "seek": 214864, "start": 2152.52, "end": 2157.3199999999997, "text": " or the override can't take place, can't take place, which then we can fix by", "tokens": [50558, 420, 264, 42321, 393, 380, 747, 1081, 11, 393, 380, 747, 1081, 11, 597, 550, 321, 393, 3191, 538, 50798], "temperature": 0.0, "avg_logprob": -0.19023824858185429, "compression_ratio": 1.8191881918819188, "no_speech_prob": 0.0016228845342993736}, {"id": 526, "seek": 214864, "start": 2157.4, "end": 2161.08, "text": " doing it the proper way, which is what I've defined here, where now we have a", "tokens": [50802, 884, 309, 264, 2296, 636, 11, 597, 307, 437, 286, 600, 7642, 510, 11, 689, 586, 321, 362, 257, 50986], "temperature": 0.0, "avg_logprob": -0.19023824858185429, "compression_ratio": 1.8191881918819188, "no_speech_prob": 0.0016228845342993736}, {"id": 527, "seek": 214864, "start": 2161.08, "end": 2165.7999999999997, "text": " proper overriding takes place with the type of object.", "tokens": [50986, 2296, 670, 81, 2819, 2516, 1081, 365, 264, 2010, 295, 2657, 13, 51222], "temperature": 0.0, "avg_logprob": -0.19023824858185429, "compression_ratio": 1.8191881918819188, "no_speech_prob": 0.0016228845342993736}, {"id": 528, "seek": 214864, "start": 2165.7999999999997, "end": 2167.3199999999997, "text": " So we're taking all the objects in here.", "tokens": [51222, 407, 321, 434, 1940, 439, 264, 6565, 294, 510, 13, 51298], "temperature": 0.0, "avg_logprob": -0.19023824858185429, "compression_ratio": 1.8191881918819188, "no_speech_prob": 0.0016228845342993736}, {"id": 529, "seek": 214864, "start": 2168.6, "end": 2169.3599999999997, "text": " That's great.", "tokens": [51362, 663, 311, 869, 13, 51400], "temperature": 0.0, "avg_logprob": -0.19023824858185429, "compression_ratio": 1.8191881918819188, "no_speech_prob": 0.0016228845342993736}, {"id": 530, "seek": 214864, "start": 2169.8799999999997, "end": 2173.3199999999997, "text": " And then, of course, that's the end of the item, the end of the part,", "tokens": [51426, 400, 550, 11, 295, 1164, 11, 300, 311, 264, 917, 295, 264, 3174, 11, 264, 917, 295, 264, 644, 11, 51598], "temperature": 0.0, "avg_logprob": -0.19023824858185429, "compression_ratio": 1.8191881918819188, "no_speech_prob": 0.0016228845342993736}, {"id": 531, "seek": 214864, "start": 2173.3199999999997, "end": 2174.12, "text": " and the end of the item.", "tokens": [51598, 293, 264, 917, 295, 264, 3174, 13, 51638], "temperature": 0.0, "avg_logprob": -0.19023824858185429, "compression_ratio": 1.8191881918819188, "no_speech_prob": 0.0016228845342993736}, {"id": 532, "seek": 214864, "start": 2174.12, "end": 2176.24, "text": " Wow, that was a long, long item.", "tokens": [51638, 3153, 11, 300, 390, 257, 938, 11, 938, 3174, 13, 51744], "temperature": 0.0, "avg_logprob": -0.19023824858185429, "compression_ratio": 1.8191881918819188, "no_speech_prob": 0.0016228845342993736}, {"id": 533, "seek": 214864, "start": 2176.24, "end": 2178.08, "text": " It was probably 10, 15 pages.", "tokens": [51744, 467, 390, 1391, 1266, 11, 2119, 7183, 13, 51836], "temperature": 0.0, "avg_logprob": -0.19023824858185429, "compression_ratio": 1.8191881918819188, "no_speech_prob": 0.0016228845342993736}, {"id": 534, "seek": 217808, "start": 2178.08, "end": 2180.2, "text": " I feel really good for getting through that.", "tokens": [50364, 286, 841, 534, 665, 337, 1242, 807, 300, 13, 50470], "temperature": 0.0, "avg_logprob": -0.18415205819266184, "compression_ratio": 1.6370656370656371, "no_speech_prob": 0.005640706513077021}, {"id": 535, "seek": 217808, "start": 2180.2, "end": 2186.16, "text": " And I learned so much, but, but, but at the end of the item, Josh Schumburg", "tokens": [50470, 400, 286, 3264, 370, 709, 11, 457, 11, 457, 11, 457, 412, 264, 917, 295, 264, 3174, 11, 9785, 2065, 449, 8342, 50768], "temperature": 0.0, "avg_logprob": -0.18415205819266184, "compression_ratio": 1.6370656370656371, "no_speech_prob": 0.005640706513077021}, {"id": 536, "seek": 217808, "start": 2186.16, "end": 2188.7999999999997, "text": " states, Hey, look, yes.", "tokens": [50768, 4368, 11, 1911, 11, 574, 11, 2086, 13, 50900], "temperature": 0.0, "avg_logprob": -0.18415205819266184, "compression_ratio": 1.6370656370656371, "no_speech_prob": 0.005640706513077021}, {"id": 537, "seek": 217808, "start": 2188.7999999999997, "end": 2192.24, "text": " Now you know how to design or you have the recipe for a high quality equals", "tokens": [50900, 823, 291, 458, 577, 281, 1715, 420, 291, 362, 264, 6782, 337, 257, 1090, 3125, 6915, 51072], "temperature": 0.0, "avg_logprob": -0.18415205819266184, "compression_ratio": 1.6370656370656371, "no_speech_prob": 0.005640706513077021}, {"id": 538, "seek": 217808, "start": 2192.24, "end": 2192.7599999999998, "text": " method.", "tokens": [51072, 3170, 13, 51098], "temperature": 0.0, "avg_logprob": -0.18415205819266184, "compression_ratio": 1.6370656370656371, "no_speech_prob": 0.005640706513077021}, {"id": 539, "seek": 217808, "start": 2193.36, "end": 2194.3199999999997, "text": " And yeah, it's fantastic.", "tokens": [51128, 400, 1338, 11, 309, 311, 5456, 13, 51176], "temperature": 0.0, "avg_logprob": -0.18415205819266184, "compression_ratio": 1.6370656370656371, "no_speech_prob": 0.005640706513077021}, {"id": 540, "seek": 217808, "start": 2194.3199999999997, "end": 2195.0, "text": " We learned a lot.", "tokens": [51176, 492, 3264, 257, 688, 13, 51210], "temperature": 0.0, "avg_logprob": -0.18415205819266184, "compression_ratio": 1.6370656370656371, "no_speech_prob": 0.005640706513077021}, {"id": 541, "seek": 217808, "start": 2195.0, "end": 2198.08, "text": " We went through a lot of a bit of computer science, a bit of human logic.", "tokens": [51210, 492, 1437, 807, 257, 688, 295, 257, 857, 295, 3820, 3497, 11, 257, 857, 295, 1952, 9952, 13, 51364], "temperature": 0.0, "avg_logprob": -0.18415205819266184, "compression_ratio": 1.6370656370656371, "no_speech_prob": 0.005640706513077021}, {"id": 542, "seek": 217808, "start": 2198.96, "end": 2204.52, "text": " However, most of the time it's a good idea to use the IDE or to use something", "tokens": [51408, 2908, 11, 881, 295, 264, 565, 309, 311, 257, 665, 1558, 281, 764, 264, 40930, 420, 281, 764, 746, 51686], "temperature": 0.0, "avg_logprob": -0.18415205819266184, "compression_ratio": 1.6370656370656371, "no_speech_prob": 0.005640706513077021}, {"id": 543, "seek": 220452, "start": 2204.52, "end": 2208.84, "text": " like the auto value framework, Google's open source auto value framework, when", "tokens": [50364, 411, 264, 8399, 2158, 8388, 11, 3329, 311, 1269, 4009, 8399, 2158, 8388, 11, 562, 50580], "temperature": 0.0, "avg_logprob": -0.21779592514038085, "compression_ratio": 1.689516129032258, "no_speech_prob": 0.046708736568689346}, {"id": 544, "seek": 220452, "start": 2208.84, "end": 2213.8, "text": " designing equals methods, because these frameworks were pretty much take care of", "tokens": [50580, 14685, 6915, 7150, 11, 570, 613, 29834, 645, 1238, 709, 747, 1127, 295, 50828], "temperature": 0.0, "avg_logprob": -0.21779592514038085, "compression_ratio": 1.689516129032258, "no_speech_prob": 0.046708736568689346}, {"id": 545, "seek": 220452, "start": 2213.84, "end": 2216.72, "text": " all of these things we discussed in this item.", "tokens": [50830, 439, 295, 613, 721, 321, 7152, 294, 341, 3174, 13, 50974], "temperature": 0.0, "avg_logprob": -0.21779592514038085, "compression_ratio": 1.689516129032258, "no_speech_prob": 0.046708736568689346}, {"id": 546, "seek": 220452, "start": 2217.08, "end": 2218.52, "text": " Look at how long the item is.", "tokens": [50992, 2053, 412, 577, 938, 264, 3174, 307, 13, 51064], "temperature": 0.0, "avg_logprob": -0.21779592514038085, "compression_ratio": 1.689516129032258, "no_speech_prob": 0.046708736568689346}, {"id": 547, "seek": 220452, "start": 2219.08, "end": 2224.88, "text": " Everything from, from, from the properties and, and making the equals", "tokens": [51092, 5471, 490, 11, 490, 11, 490, 264, 7221, 293, 11, 293, 1455, 264, 6915, 51382], "temperature": 0.0, "avg_logprob": -0.21779592514038085, "compression_ratio": 1.689516129032258, "no_speech_prob": 0.046708736568689346}, {"id": 548, "seek": 220452, "start": 2224.88, "end": 2226.52, "text": " method more performant, all of that.", "tokens": [51382, 3170, 544, 2042, 394, 11, 439, 295, 300, 13, 51464], "temperature": 0.0, "avg_logprob": -0.21779592514038085, "compression_ratio": 1.689516129032258, "no_speech_prob": 0.046708736568689346}, {"id": 549, "seek": 220452, "start": 2227.28, "end": 2234.0, "text": " Which is why Josh Schumburg states, an excellent alternative to writing and", "tokens": [51502, 3013, 307, 983, 9785, 2065, 449, 8342, 4368, 11, 364, 7103, 8535, 281, 3579, 293, 51838], "temperature": 0.0, "avg_logprob": -0.21779592514038085, "compression_ratio": 1.689516129032258, "no_speech_prob": 0.046708736568689346}, {"id": 550, "seek": 223400, "start": 2234.0, "end": 2239.4, "text": " testing these methods manually is to use Google's open source auto value", "tokens": [50364, 4997, 613, 7150, 16945, 307, 281, 764, 3329, 311, 1269, 4009, 8399, 2158, 50634], "temperature": 0.0, "avg_logprob": -0.16260075820119757, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.0018968493677675724}, {"id": 551, "seek": 223400, "start": 2239.4, "end": 2244.28, "text": " framework, which automatically generates these methods for you triggered by a", "tokens": [50634, 8388, 11, 597, 6772, 23815, 613, 7150, 337, 291, 21710, 538, 257, 50878], "temperature": 0.0, "avg_logprob": -0.16260075820119757, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.0018968493677675724}, {"id": 552, "seek": 223400, "start": 2244.28, "end": 2246.36, "text": " single annotation on the class.", "tokens": [50878, 2167, 48654, 322, 264, 1508, 13, 50982], "temperature": 0.0, "avg_logprob": -0.16260075820119757, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.0018968493677675724}, {"id": 553, "seek": 223400, "start": 2246.96, "end": 2252.68, "text": " And then he also says, having IDEs generate equals and hash code methods", "tokens": [51012, 400, 550, 415, 611, 1619, 11, 1419, 7348, 20442, 8460, 6915, 293, 22019, 3089, 7150, 51298], "temperature": 0.0, "avg_logprob": -0.16260075820119757, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.0018968493677675724}, {"id": 554, "seek": 223400, "start": 2252.68, "end": 2257.24, "text": " is generally preferable to implementing them manually because IDEs do not", "tokens": [51298, 307, 5101, 4382, 712, 281, 18114, 552, 16945, 570, 7348, 20442, 360, 406, 51526], "temperature": 0.0, "avg_logprob": -0.16260075820119757, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.0018968493677675724}, {"id": 555, "seek": 223400, "start": 2257.24, "end": 2258.36, "text": " make careless mistakes.", "tokens": [51526, 652, 46187, 8038, 13, 51582], "temperature": 0.0, "avg_logprob": -0.16260075820119757, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.0018968493677675724}, {"id": 556, "seek": 223400, "start": 2258.36, "end": 2259.88, "text": " And of course humans do.", "tokens": [51582, 400, 295, 1164, 6255, 360, 13, 51658], "temperature": 0.0, "avg_logprob": -0.16260075820119757, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.0018968493677675724}, {"id": 557, "seek": 223400, "start": 2260.56, "end": 2261.68, "text": " That's the end of the item.", "tokens": [51692, 663, 311, 264, 917, 295, 264, 3174, 13, 51748], "temperature": 0.0, "avg_logprob": -0.16260075820119757, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.0018968493677675724}, {"id": 558, "seek": 226168, "start": 2261.8399999999997, "end": 2266.44, "text": " And then he states, in summary, don't override the equals method unless you", "tokens": [50372, 400, 550, 415, 4368, 11, 294, 12691, 11, 500, 380, 42321, 264, 6915, 3170, 5969, 291, 50602], "temperature": 0.0, "avg_logprob": -0.141522942302383, "compression_ratio": 1.6367041198501873, "no_speech_prob": 0.0020188691560178995}, {"id": 559, "seek": 226168, "start": 2266.44, "end": 2272.12, "text": " have to, in many cases, the implementation inherited from object does exactly", "tokens": [50602, 362, 281, 11, 294, 867, 3331, 11, 264, 11420, 27091, 490, 2657, 775, 2293, 50886], "temperature": 0.0, "avg_logprob": -0.141522942302383, "compression_ratio": 1.6367041198501873, "no_speech_prob": 0.0020188691560178995}, {"id": 560, "seek": 226168, "start": 2272.12, "end": 2272.7599999999998, "text": " what you want.", "tokens": [50886, 437, 291, 528, 13, 50918], "temperature": 0.0, "avg_logprob": -0.141522942302383, "compression_ratio": 1.6367041198501873, "no_speech_prob": 0.0020188691560178995}, {"id": 561, "seek": 226168, "start": 2273.0, "end": 2277.8799999999997, "text": " If you do override equals, make sure to compare all of the classes, significant", "tokens": [50930, 759, 291, 360, 42321, 6915, 11, 652, 988, 281, 6794, 439, 295, 264, 5359, 11, 4776, 51174], "temperature": 0.0, "avg_logprob": -0.141522942302383, "compression_ratio": 1.6367041198501873, "no_speech_prob": 0.0020188691560178995}, {"id": 562, "seek": 226168, "start": 2277.8799999999997, "end": 2283.3599999999997, "text": " fields, and to compare them in a manner that preserves all five provisions of", "tokens": [51174, 7909, 11, 293, 281, 6794, 552, 294, 257, 9060, 300, 1183, 9054, 439, 1732, 25034, 295, 51448], "temperature": 0.0, "avg_logprob": -0.141522942302383, "compression_ratio": 1.6367041198501873, "no_speech_prob": 0.0020188691560178995}, {"id": 563, "seek": 226168, "start": 2283.3599999999997, "end": 2284.48, "text": " the equals contract.", "tokens": [51448, 264, 6915, 4364, 13, 51504], "temperature": 0.0, "avg_logprob": -0.141522942302383, "compression_ratio": 1.6367041198501873, "no_speech_prob": 0.0020188691560178995}, {"id": 564, "seek": 226168, "start": 2285.3999999999996, "end": 2286.0, "text": " Fantastic.", "tokens": [51550, 21320, 13, 51580], "temperature": 0.0, "avg_logprob": -0.141522942302383, "compression_ratio": 1.6367041198501873, "no_speech_prob": 0.0020188691560178995}, {"id": 565, "seek": 226168, "start": 2286.2799999999997, "end": 2290.2799999999997, "text": " I'm so happy that I got through that, especially because I feel like I learned", "tokens": [51594, 286, 478, 370, 2055, 300, 286, 658, 807, 300, 11, 2318, 570, 286, 841, 411, 286, 3264, 51794], "temperature": 0.0, "avg_logprob": -0.141522942302383, "compression_ratio": 1.6367041198501873, "no_speech_prob": 0.0020188691560178995}, {"id": 566, "seek": 229028, "start": 2290.28, "end": 2294.1600000000003, "text": " a lot when we were going through that item because it touched on so many", "tokens": [50364, 257, 688, 562, 321, 645, 516, 807, 300, 3174, 570, 309, 9828, 322, 370, 867, 50558], "temperature": 0.0, "avg_logprob": -0.16299855565450277, "compression_ratio": 1.5148514851485149, "no_speech_prob": 0.00818578153848648}, {"id": 567, "seek": 229028, "start": 2294.1600000000003, "end": 2296.7200000000003, "text": " different concepts, which was a really fun item to cover.", "tokens": [50558, 819, 10392, 11, 597, 390, 257, 534, 1019, 3174, 281, 2060, 13, 50686], "temperature": 0.0, "avg_logprob": -0.16299855565450277, "compression_ratio": 1.5148514851485149, "no_speech_prob": 0.00818578153848648}, {"id": 568, "seek": 229028, "start": 2297.0400000000004, "end": 2301.44, "text": " And the next one is item 11, as I did state a bit before, always override", "tokens": [50702, 400, 264, 958, 472, 307, 3174, 2975, 11, 382, 286, 630, 1785, 257, 857, 949, 11, 1009, 42321, 50922], "temperature": 0.0, "avg_logprob": -0.16299855565450277, "compression_ratio": 1.5148514851485149, "no_speech_prob": 0.00818578153848648}, {"id": 569, "seek": 229028, "start": 2301.44, "end": 2304.84, "text": " hash code when you override equals.", "tokens": [50922, 22019, 3089, 562, 291, 42321, 6915, 13, 51092], "temperature": 0.0, "avg_logprob": -0.16299855565450277, "compression_ratio": 1.5148514851485149, "no_speech_prob": 0.00818578153848648}, {"id": 570, "seek": 229028, "start": 2305.28, "end": 2307.5600000000004, "text": " And I shall see you in the next one.", "tokens": [51114, 400, 286, 4393, 536, 291, 294, 264, 958, 472, 13, 51228], "temperature": 0.0, "avg_logprob": -0.16299855565450277, "compression_ratio": 1.5148514851485149, "no_speech_prob": 0.00818578153848648}, {"id": 571, "seek": 229028, "start": 2307.6800000000003, "end": 2308.32, "text": " Thanks for watching.", "tokens": [51234, 2561, 337, 1976, 13, 51266], "temperature": 0.0, "avg_logprob": -0.16299855565450277, "compression_ratio": 1.5148514851485149, "no_speech_prob": 0.00818578153848648}, {"id": 572, "seek": 229028, "start": 2308.52, "end": 2309.0, "text": " Cheers.", "tokens": [51276, 13006, 13, 51300], "temperature": 0.0, "avg_logprob": -0.16299855565450277, "compression_ratio": 1.5148514851485149, "no_speech_prob": 0.00818578153848648}], "language": "en"}