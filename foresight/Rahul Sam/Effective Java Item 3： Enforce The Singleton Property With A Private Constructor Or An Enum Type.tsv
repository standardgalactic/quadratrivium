start	end	text
0	6640	Hey everyone, welcome to yet another episode of my video series on effective Java by Joshua Block
7160	10880	It's sort of a textbook to code video series where I take
12080	17080	Topics and principles from this book and I'm hoping to do it with many other books and
17520	22960	Expand on these topics and try to understand them and try and see what value or what what we could derive from
23440	25280	What are in these books?
25280	30240	And today, of course, we are on item three, so I've already done this on two other items
31120	35080	And it seems to be going well. I certainly can improve on certain points
35080	39360	Maybe above all on brevity and try and convey the points succinctly
39880	42520	But saying that though, I want to start off with the proviso
42520	45880	So if you did watch the other two episodes, you could skip this bit
45880	50040	I'll leave a timestamp as to where exactly could skip to just to save your time
50480	55520	So for starters, this is not a tutorial. That's a very very important caveat
55520	59120	I'm not a teacher in no way am I a Java expert
59120	62720	In fact, the more I'm learning about Java the more I'm realizing of
63400	66040	More I'm realizing how much of an expert. I'm not
66960	72880	I'd like to think of it as the blind leading the blind in this case, so I'm really not leading
72880	78040	But let's say at least formally because this is a YouTube video kind of formally. I am
79040	81040	Leading the blind somewhere
81920	88440	But that also means that because I'm blind I can make mistakes and run into a wall or something
89120	91120	This is only a
91240	94920	Exploratory discusion. That's pretty much it try to make sense of things
95480	98040	The best I would say analogy
98600	104680	Day-to-day analogy I could use is what would happen in a university tutorial where we have a bunch of students
104680	107440	We have an assignment or a problem statement or some concept
107440	109520	You're trying to grok of course as a tutor
109520	116040	But in this case there really isn't a tutor but just a bunch of students getting together trying to make sense of some programming concept
116040	118320	And needless to state this is a programming video
118320	122720	So it makes sense to have all the code that I use on get out where you could go and play around too
122840	125440	So I shall leave a link down below in the description
125600	131760	Not only do my code but even to the code that Joshua Block has published himself on his personal repository
131760	135600	So with offer the do let's get started on item number three
135800	144120	Which states and foes the singleton property with a private constructor or an enum type and this is still of course a part of chapter 2
144120	146120	Which is regarding?
146400	151800	Creating and destroying objects. So singleton was one of the design patterns that was originally
151800	157600	I don't know if the word is originally, but let's say popularized by the gang of foe in their great software engineering book
158440	167560	Design patterns and a singleton is a design pattern that ensures that a class can only have one object or as Joshua Block states in the book a
168360	172000	Singleton is simply a class that is instantiated exactly once
173120	181240	Singletons typically represent either a stateless object such as a function or a system component that is intrinsically unique
181360	187040	So this creation on design pattern which I said again was proposed or popularized is a more
187520	194880	Accurate term by the angle for it's something one would hear about a lot if you're doing a if you're all be programmer, which is most of us
195680	200720	And it's it's got many advantages, which is probably why we've been told by
201440	204120	The great wise sagacious programming
204720	206720	Gurus to implement it
207000	211760	So I found a few advantages of it keep in mind though if you do follow this link
211800	215760	This is on refactoring guru. By the way, if you do want to understand
217000	220600	Different design patterns this website refactoring guru is fantastic
220720	227680	It'll visualize things and use analogies to the real world which personally for me. I always find that helps me
228400	235640	Comprehend things much better. So this design pattern the singleton pattern has they've expanded on that topic here
236480	243440	They've they've listed listed out not only advantages, but also some cons as you can see here some disadvantage is to
244000	248320	I'm not gonna touch on those because you know going deeply into the single singleton
249480	253520	Because going deeply into the singleton pattern is probably a bit out of scope for this video
253640	257680	But some of the advantages are you can be sure that a class has only a single instance
257800	263120	That really helps with maintaining a certain let's say state of an object more from a
263800	270800	Business perspective, let's say so we we instantiate a class and we give an object object a certain state and
271120	275280	then generally a client would expect this object to behave a certain way and
276600	283840	Forcing or implementing the singleton pattern ensures that this object doesn't behave in ways that a client won't expect
284360	289120	So it helps to sort of maintain the encapsulation of the class and
290120	297120	Yes, you gain a global access point to that instance because obviously only one object access to memory
297600	301880	Whoever that's going to use that object will still use that one single object
303360	308360	The singleton object is initialized only when it's request requested for the first time
308360	311040	So that's kind of like I guess the lacy loading pattern
311440	317160	That again is good because we don't want to create unnecessary objects. Generally, that's bad
317360	323200	That's a bad almost like an anti-pattern in OOP and on that note Joshua block continues
324040	328000	There are two way two common ways. Sorry to implement singletons
328160	331280	Both are based on keeping the constructor private and
332200	334200	exporting a public static member
335160	337280	To provide access to the sole instance
337280	344520	So the first approach is using a public static final field where the the member field that holds this instance is final
344760	347560	Let's explode that and try and make sense of it
347880	353680	What we have here is a class public class called Elvis. By the way, most of this code I've taken from
354200	357160	Joshua blocks the code is used in the book itself
357200	362240	I've just sort of refactored it to make it a bit more easier for us to understand for me to understand
362240	363480	I should speak
363480	369000	Individually because I don't want to pretend as if I'm speaking on behalf of other people here for me to understand
369640	371640	And as you can see here, yeah
371640	376720	The the instance is declared final. So that object becomes immutable
376720	382960	So the Elvis class really has only got a simple method called leave the building which states whoa, baby. I'm out of here
382960	389680	I guess I'm a bit bit too young or from a different generation to really get the Elvis Presley jokes
389680	392600	Which Joshua block has made in this book?
393360	395240	It's kind of a bit
395240	401520	You know before my time, let's say in any case the constructor of course is private because this gives
401640	405080	The class instance control as I've stated in the comment here
405080	411840	And then it's simple as this when we do get that instance access that instance and you can probably see here
411840	415760	We aren't creating any object using the new keyword or what not
415760	422200	We're simply accessing this static member which belongs to the class itself and then through the static member
422200	425080	Which gives us that object the instance we are
425760	428080	Accessing this method. So if I do run this
428520	434720	It'll just say whoa, baby. I'm out of here. Which is really what this object does. There we go right there
434720	441920	And on this bit of code Joshua block states the private constructor is called only once to initialize the public static field
442240	444720	Elvis instance. So that happens here
445880	447880	The the the class itself is
449040	454520	instantiating itself with this private constructor because obviously it has it it has access to this
454840	461680	Constructor within itself and that object is stored in the instance variables. So yeah, the private constructor is called only once
461680	464840	We initialize the public static field Elvis star instance. That's this
465600	470320	the lack of a public or protected constructor guarantees a
471120	476160	Monoelvistic universe. So the idea is as I did show here the client code
476760	480240	You can't instantiate this class. It's impossible because the constructor is private
481120	489520	Exactly one Elvis instance will exist once the Elvis class is initialized. No more. No less
490400	494720	Nothing that a client does can change this with one caveat
495240	499200	This is an interesting point and I shall comment on that in a bit a
500120	503000	Privilege client can invoke the private constructor
503440	508800	Reflectively with the aid of the accessible object dot set accessible method
508800	516400	If you need to defend against its attack modify the constructor to make it throw an exception if it's asked to create a second instance
516960	518960	so firstly, I would say
519720	526560	Before I say anything or comment on what Java reflection is watch this video by code with Joan
526560	528560	Obviously links down below in the description
529120	535520	You know, I've read blog posts what not on this idea of Java reflection, but so far
536040	541840	No one has explained it simply and plainly the way Joan does in his YouTube channel
542360	549080	Just in general code with Joan is a fantastic YouTube channel. I really appreciate his pedagogy and
549600	551600	kind of how what's what I'm looking for
552360	554360	how
554360	556480	Pedestrian and I mean that in the positive sense
557160	563160	He makes Java seem to people like me. Who's to try to you know, truly understand the language
564160	571400	So Java reflection, let me try and explain what it is as the name suggests. It's a way
572360	573960	for a
573960	575960	object or a class to
576920	581720	introspect or reflect on itself. So what it does is generally of course a
582440	584440	client can't go around tampering
585120	587080	private methods and setting
588640	591200	Setting setters or getters in a class
591960	597640	That's not allowed that that violates the OB principle of encapsulation. However
598640	603440	Java disallowed this concept called reflection which from what I've read it's mostly for
603800	609840	Frameworks so for mostly for Java framework builders that does allow a class like this
609840	615160	Which has a private constructor and which don't have any setters which don't have any getters to still
616000	620440	implement that from outside the class using Java reflection
620440	626360	In fact, let me quickly pull out a more of a formal definition of what Java reflection is because I think
626520	629960	It's important to know the concept at least so yes
629960	637560	As I said, this is a definition from Oracle docs like more not really the Oracle doc. Sorry. It's more of a technical article
638160	643000	Whoa written in 1998. That was a yeah after I was born
643880	646240	Reflection is a feature in the Java programming language
646240	651120	It allows an executing Java program to examine or
651520	655280	Interespect upon itself and manipulate internal properties of the program
656000	662120	For example, it's possible for a Java class to obtain the names of all its members and display them
662200	667960	That's an important point here that introspection can be done runtime. So when the program is being executed
668440	669880	but
669880	673240	Better if you just watch this video. It's 22 minutes. Well worth your time
673240	678360	So the second way Joshua block has delineated on creating or implementing singletons is
679000	680800	Using a static factory method
680800	685560	Now if you don't know what that is and don't know the benefits of using a static factory method
685560	688480	I would link you to the first video in the series
688520	697440	Which is item one that talks about the pros or the virtues of using the static factory method and item one states
697560	703840	Consider static factory methods instead of constructors, but for all intents and purposes within our topic
704000	710000	Really, it does the same thing. So if you take this example, which again is another class called Elvis Elvis
711040	713880	Why isn't it opening up? There we go. So yes, same concept
713880	715880	the the constructor is so private and
716000	720960	We only have one object being created here within the class and instead of the client
721160	725480	Directly accessing the member variable that member variable is private in this case
725480	729360	And we rather get it through the static factory method. Oh
730040	734280	This bit here the read resolve will get to that soon for now
734280	738120	Just ignore line number 15 and clearly as he states here
738120	744400	You can see in the code itself one advantage of the static factory approach is that it gives you the flexibility to change your mind
744400	748200	About whether the class is a singleton without changing its API
748440	752880	So what he means by that is if you look at the public field approach
753680	760760	Since we're directly accessing that singleton via the the public member variable
761600	765640	It doesn't really give us a flexibility if we do want to not have a singleton
765640	770120	Let's say if we don't want to fill a singleton single to impact and I should probably add this here
770120	772400	He also states in the previous paragraph
772400	778340	I should have read that before the main advantage of the public field approach is that the API makes it clear
778680	780680	That the class is singleton
781280	789080	The public static field is final so it'll always contain the same object reference, which what do you mean there is from a client perspective?
790040	793240	I've used an inline variable here by the way the the
794040	797520	It's it says here Elvis and we're getting that single instance
797720	799800	Now it's a similar thing we're doing here
799800	805440	The only difference with the static factor method is we're accessing it through this method get instance
805640	811400	Now because it's a method we can play around with it and do what we want so to speak
811400	815360	Which is why Joshua block states it gives you the flexibility to change your mind
816080	819760	About whether the class is a singleton without changing its API
819840	823640	We don't really change anything in this method. What matters is how we handle
823920	831200	This object or what we do inside it from a again from a class clients perspective an example Joshua block has used is something to do with multi-threading
831640	836920	In a multi-thread environment the factory method returns a sole instance
837000	843680	But it could be modified to return say a separate instance for each thread that invokes it that makes sense
843680	849280	We don't want there to be problems with multi-threading by having a single object that all the threads share
849280	851520	Let's that could probably corrupt the state of that object
851520	854640	I don't know just to you know thinking out loud here now
854640	858680	We sort of come to a bit of an ancillary point, but I think is nevertheless important a
859200	865760	Second advantage is that you can write a generic singleton factory if your application requires it
866440	873240	So what is a generic singleton factory? Let's try and make sense of it. Firstly as per usual
873760	875760	I will leave
875760	876680	two
876680	877600	two
877600	883080	Links to two different well one stucco flow answer and then a blog post
883800	888320	Regarding this concept of type erasure, which is what allows generic programming in Java
889200	890320	and
890320	895360	How it happens and why it's it's necessary for generic programming
895400	900720	But it's not really within the scope of what we're discussing here. It's still important to understand though
900720	905760	So what's a generic singleton factory first of all out? I should say we'll be covering this in
906680	910640	item 30 of this book so probably next year
911480	917080	Therefore we shall go into more detail in that video and item 30 simply states favorite generic method
917080	919080	But I propose to
919120	921360	Generic singleton factory in that item
921880	928160	Joshua block states because generics are implemented by ratio. So that's what I meant by this type erasure bit
928320	935480	Please go read up on that blog post article blog post article on that blog post as it'll really expand on the matter
936640	942520	Because generics implemented by ratio you can use a single object for all required type
943560	944600	parameterizations
944600	951440	But you need to write a static factory method to repeatedly dole out the object for each requested type parameterization
951440	955840	This is a very cool concept once you see in an action which I shall which I shall show
956120	960920	It's a bit of tongue twister which I shall show in a bit because it is it is pretty cool
960920	966560	How it all comes together so kind of definition that I came up with for what a generic singleton factory is
966560	968320	It allows to create multiple singletons
968320	970360	That is not a oxymoron
970360	976200	You will see you will see why that is in a bit that behave the same way. So it's kind of got like a same
977600	985400	Supertype which man is how it behaves using generics allows to use a single object for type parameterizations
985400	987400	I'm kind of repeating where Joshua block state
987520	994040	Stay stated and casting is not required that too you shall see so I've got the example here
994040	996040	This too I took from item 30
996640	1002640	But I just realized that before I do go through the example and explore the code. I didn't mention
1003640	1009080	those two the Stack Overflow answer and then this blog post, but I didn't really
1009840	1011720	even
1011720	1015840	expand on what what it is or what what they are
1016760	1021920	So I want to read out a bit of bit of like introduction in this article regarding
1022040	1029280	Type erasure because type erasure is what allows firstly the the the generic singleton pattern, but also using
1030120	1031640	generic programming
1031640	1033200	in Java
1033200	1034400	generally
1034400	1037360	Generic programming in Java generally gosh, that's funny
1038200	1042360	So what does this person say? By the way, this article was written by
1043000	1045920	Bishal Kumar Dube. So what is Bishal's state here?
1046000	1052400	Generics concept is introduced in Java language to provide
1052800	1059160	Tider type checks at compile time and to support generic programming as I said the way to implement generics
1059160	1061960	The Java compiler applies type erasure
1062520	1070240	To replace all type parameters in generic types with their bounds or object if the type parameters are unbounded
1070560	1077280	The produce bytecode we shall go into the bytecode bit to therefore contains only ordinary classes interfaces and methods
1078040	1083640	Insert type costs if necessary to preserve type safety. That is also something we shall explore
1084680	1086680	Generate bridge methods to preserve
1087680	1089480	Polymorphism in extended generic types
1089480	1096680	So you will see that the the third point here that polymorph polymorphism bit in this example that I'm gonna show soon
1096920	1099720	See the stochophilons are kind of explained it this way
1099880	1105720	So we have this class of course here, which is simply a list
1105960	1110840	Sorry, let's say class. I mean we have the list interface and the other list class
1111840	1115000	And it's the generic type where the type parameter
1115000	1117880	We are passing the string and then we're just adding it and we're getting it
1118120	1122120	But in the bytecode level it really compiles like this
1122280	1124920	It does do the casting for us now
1124920	1126920	This is not required for us to do because we're using
1127520	1129800	Generics and the type erasure allows this
1131120	1136680	Going to the example here is how the generic singleton pattern works this instance
1136800	1140360	We have a variable called identity function or identity fm
1140400	1143560	We have a variable irony function and keep in mind
1144160	1149720	Object in Java is a superclass for all other classes therefore any subtype of this
1150520	1152520	Type can be passed into this
1152600	1156040	So we have this private static final member variable called
1157240	1159160	Unary operator
1159160	1161800	And then we have a static factory method
1163320	1167320	What happens here is that method we can pass a
1168280	1171640	Type parameters similar to how you would pass a parameter to a method
1171640	1173640	But in this case it's a type
1173640	1177640	So then in the client side, you'll firstly see that I'm not using any costs here
1178360	1183320	And I have two lists up defined. Sorry two arrays not lists in this case
1183960	1187800	A string array right there. I should probably zoom in a bit more. I apologize
1190360	1193880	The the string array and then we have the numbers array
1194840	1197480	So into the same class I'm passing
1199000	1201320	I'm creating an instance of that class same string
1202040	1204520	And I'm getting that object same string same number
1205480	1207080	And I'm passing
1207080	1211960	In this case the type string and in this case the type number
1212840	1214840	Now here's where it gets interesting
1215080	1218920	Despite the different types. It's still using the same object
1218920	1224360	We're still as Joshua block states here doling out the same object into different types
1225080	1227880	So in this case we can type we can apply this
1228600	1229640	and then
1229640	1235400	Print out all the strings and in this case print out all the numbers, but when we run this code
1240840	1242840	You'll see here
1242920	1244920	Why can't I is okay forget about it
1245320	1250200	When we run this code, you'll see here the object is still the same object that it's using
1252120	1255240	For both these cases despite them having different types
1255560	1257960	So I'm printing out the object here same string same number
1258280	1262840	It's still this object the other any function object that is passing or this single instance
1263080	1263880	So it's beautiful
1263880	1267240	And that's what allows generic programming because these are of different types
1267400	1273080	Yet that object is being passed through these different types to be used and abused. Let's say
1274920	1278680	So that essentially is what generic singleton factory is it is a factory
1278840	1282520	We've got a factory here because it's producing or giving we're creating an object
1283160	1286040	Uh, but no cast is being used. I think that's the biggest advantage
1286280	1293320	I've seen from that pattern and afterwards joshua block states a final advantage of using a static factory
1294040	1296040	Is that a method reference
1296440	1298840	Can be used as a supplier for example?
1299480	1306840	Elvis get instance, which is the method reference is a supplier for uh is a supplier and Elvis is the type you pass into it
1306920	1310840	Which is the example I've used here. So let's try and understand. What does it mean?
1310920	1312920	What what what does he mean by?
1312920	1315640	method reference being being passed as a supplier
1317000	1319720	Firstly from the oracle docs, uh, it states
1320280	1323720	What's a supplier? I want to understand. It's a functional interface supplier
1324520	1328120	Sorry, the functional interface supplier contains one method
1328440	1333640	Which is get that takes no argument and returns an object. But but what's important to understand is
1335400	1337400	It it this get method
1337800	1340840	Represents a function which does not take any arguments
1341320	1346600	But produces a value of type t. So yes, the get method doesn't produce any arguments
1347240	1351720	But it has a type the type could be passed as a generic
1352440	1359000	By the way, that latter bit I read from this article again in geeks for geeks, uh, which I'll leave a link down below in the description
1359000	1363480	Which explains what a supplier interface is written by this person
1364440	1371560	Sell one two three. So this is a bit hard to get intuitively even though most of us in functional programming use
1372680	1376360	A method reference, but the method reference requires a supplier
1376840	1380520	This functional interface supplier interface does requires
1381080	1384120	Yeah, it requires a supplier and we need to pass it a type
1384680	1386680	In this case with the class Elvis
1387320	1390680	We could pass the type Elvis as the generic parameter
1391240	1394120	As as of it being of type Elvis
1395000	1396440	um
1396440	1398840	I don't know. I don't know how else to explain it really
1399560	1403960	It just it just seems like it's something that allows us to do functional programming
1404120	1408360	And which is why javas introduced that interface. Probably it was in javae. I think
1409160	1409640	um
1409640	1414680	And yes, the the static factor method allows us to do that essentially because of the get instance method
1415560	1417880	That we define right there in any case
1417960	1424520	I hope that explanation did do some justice to what a supplier interface is if not, please go read the oracle docs
1425240	1428520	Honestly, I don't really find it too interesting. So I didn't go too deeply into it
1429000	1431000	But it just seems like something javae introduced
1431800	1433800	To allow functional programming
1434440	1436840	But back to this this bit is on
1437960	1439960	Still providing the singleton guarantee
1440760	1442760	when serializing classes
1443720	1448840	To maintain to maintain the singleton guarantee declare all instance instance fields
1449480	1455000	Transient so what does transient mean? That means it won't be serialized and provide a read resolve method
1455080	1459160	This is the bit I said I'll get to a bit later that bit right there
1460040	1461480	this
1461480	1463480	ensures that there's
1463480	1467720	The singleton property or the singleton patterns followed during during serialization
1468280	1474280	However, it's not really worth going too deeply into it. Uh, but uh, sorry, you know what before I go
1474760	1478600	Going everywhere with this. I'll I'll finish the rest of that sentence or that paragraph
1479080	1483000	So I'll say to maintain a singleton instance to to maintain the singleton guarantee
1483400	1488520	Declare all instance fields transient and provide a read resolve method
1489880	1492840	Which he points to in item 89. I shall get to that too
1493720	1495720	otherwise each time
1495720	1500200	A serialized instance is deserialized a new instance will be created
1500760	1502040	leading
1502040	1505240	In the case of our example to spurious elvis sightings
1505800	1508040	So firstly that that idea of
1508760	1510280	Read resolve method
1510280	1517480	There's a whole chapter in the book on serialization serial serialization. Why do I find it hard to pronounce that word?
1517880	1519880	serialization
1519960	1524360	When item 89, which is why I said it's not worth spending too much time on this because
1525080	1529320	Joshua block in fact says don't use read resolve methods in item 89
1529400	1533080	He states for instance control. So that's what we're doing here. We're
1533720	1538680	Practicing instance control instance control prefer enum types to read resolve
1538760	1540680	So we're going to get to enum types next therefore
1540840	1546680	It's not really worth going too deeply into what this read resolve method does but just in general
1547640	1550520	Because it always returns this single instance we defined here
1551480	1558680	It enforces singleton once again, but this time especially during serialization serialization
1559800	1561800	Can't pronounce that word
1561800	1566360	And according to this definition by michael mayers. I've left a link to that
1567640	1571240	It's a it's a blog post in this in the description too
1572200	1575320	Read resolve is used to for replacing the object stream
1575640	1582200	Object object read from the stream. What can't I read today? The only use I've ever seen for this is enforcing singleton
1582760	1584760	Oh, sorry. This was from in fact
1585560	1588520	a stackable flow answer not a blog post but
1589480	1592440	Nevertheless, I shall leave a link to all of that down below in the description
1595160	1602600	When an object is read replace it with the singleton instance. So when this object is read, it's going to replace it with this instance
1603160	1610440	This ensures that nobody can create another instance by serializing and deserializing the singleton
1610840	1614760	However, it makes no sense to go too deeply into read resolve because
1615720	1617720	technically or theoretically
1617720	1619240	As per the
1619240	1622520	Sagacious advice of just your blog. We shouldn't even be using this method
1622520	1626040	We should be using the third method technique or the third way
1626600	1632680	To enforce singleton property, which is with a enum type not an enum type using a single enum
1632760	1637240	I don't know why I said enum type makes no sense. This is by far the simplest way. It's
1638200	1641480	I think two lines of code if I'm not mistaken. So let me open it up
1642280	1644520	It is in fact. Yes, really
1645160	1648840	I don't even know if you consider this is more like a member variable, but it's one line of code
1649640	1654040	This is the simplest way to enforce singleton. Look at that. Just two lines of code really
1654600	1657640	One two, I don't know. I don't want to start a debate here. What's wrong with me?
1658360	1660360	and really all we're doing is
1660600	1662600	story that instance and
1662840	1664840	It's a factor that it's enum
1664840	1668760	We get most of these things we were trying to explicitly declare in the source code
1669640	1671640	By by virtue of it being an enum
1672440	1675000	So, yeah, it provides serialization
1675960	1682120	Serialization for free and by default won't be able to instantiate multiple times because they're static
1682840	1684840	And final effectively
1684840	1689400	In java every enum is implicitly a subclass of the enum class
1690040	1694760	So it cannot be used if singleton needs to extend a superclass. Oh, yes, this is an important point
1695000	1697960	He gets to this in the in the in the end of the paragraph
1698120	1703320	I shall I shall the really the only disadvantage of using an enum to
1704040	1705560	I wouldn't even say
1705560	1710920	Disadvantage more of something something to be wary of when using an enum is this last bit
1711080	1715320	Which I shall touch on a bit in which I which I which I shall touch on in a bit
1716280	1719080	Ah, my constant struggle to talk
1720760	1727240	The best approach this approach may feel a bit unnatural. This is where Joshua block states. So, yeah, I mean, I don't know if
1729000	1735160	In my few years of programming, I haven't really used an enum for much other than as being a container for holding
1735960	1737160	constants
1737160	1739160	So it does feel a bit unnatural
1739560	1744520	But a single element enum type is often the best way to to implement a singleton
1745240	1747400	And then he states, this is the bit I stood out touch on
1748040	1753880	Note that you can't use this approach if your singleton must extend a superclass other than enum
1755080	1760280	Though you can declare an enum to implement interfaces, of course, because in java we can't extend
1761000	1763000	multiple classes because
1763400	1768200	By default any enum will is already extending the enum superclass
1768760	1771000	Let's say Elvis had to
1771720	1773720	extend a class called human
1774840	1778120	That wouldn't be allowed because if we use enum
1778760	1783960	However, you could probably get through that through interfaces. So not really a big deal
1784680	1787960	That was a much shorter video. It was a much shorter item two
1788520	1793880	And that's it. That's item number three that that's so essentially the idea is unless we have
1795000	1797400	to extend a superclass the singleton
1798120	1800120	Then just use enums to
1800440	1807240	end for a singleton property and we also did discuss initially some of the advantages of using a singleton
1808440	1811800	On that note, I shall thank you for letting me again
1813160	1815160	Go about these things like a drunken sailor
1815720	1820920	And get lost sometimes in my own musings. It is really interesting though. It is quite interesting how
1821640	1826600	As I said many times already how all these items are interrelated kind of like the bible
1827080	1831480	The next item item number four, which I'm hoping to cover soon, which again is a shorter item
1831640	1834200	It's it's probably the shortest item in this book is
1835000	1840360	Enforce non instantiability with a private constructor. We've sort of already done that
1841000	1843000	We've already sort of covered
1843080	1848440	de facto covered that item in this item because all the examples we used did have private constructors
1849000	1851000	But it's worth
1851160	1854040	Way when I say there's an example right this this one right here
1854440	1860200	But of course as Joshua bloke has identified it's worth going into detail as to why we need to enforce
1860600	1865400	Non instantiability saying that once again. Thanks for watching. I'll see you in the next one. Cheers
