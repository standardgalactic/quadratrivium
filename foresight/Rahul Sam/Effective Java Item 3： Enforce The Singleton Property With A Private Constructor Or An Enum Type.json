{"text": " Hey everyone, welcome to yet another episode of my video series on effective Java by Joshua Block It's sort of a textbook to code video series where I take Topics and principles from this book and I'm hoping to do it with many other books and Expand on these topics and try to understand them and try and see what value or what what we could derive from What are in these books? And today, of course, we are on item three, so I've already done this on two other items And it seems to be going well. I certainly can improve on certain points Maybe above all on brevity and try and convey the points succinctly But saying that though, I want to start off with the proviso So if you did watch the other two episodes, you could skip this bit I'll leave a timestamp as to where exactly could skip to just to save your time So for starters, this is not a tutorial. That's a very very important caveat I'm not a teacher in no way am I a Java expert In fact, the more I'm learning about Java the more I'm realizing of More I'm realizing how much of an expert. I'm not I'd like to think of it as the blind leading the blind in this case, so I'm really not leading But let's say at least formally because this is a YouTube video kind of formally. I am Leading the blind somewhere But that also means that because I'm blind I can make mistakes and run into a wall or something This is only a Exploratory discusion. That's pretty much it try to make sense of things The best I would say analogy Day-to-day analogy I could use is what would happen in a university tutorial where we have a bunch of students We have an assignment or a problem statement or some concept You're trying to grok of course as a tutor But in this case there really isn't a tutor but just a bunch of students getting together trying to make sense of some programming concept And needless to state this is a programming video So it makes sense to have all the code that I use on get out where you could go and play around too So I shall leave a link down below in the description Not only do my code but even to the code that Joshua Block has published himself on his personal repository So with offer the do let's get started on item number three Which states and foes the singleton property with a private constructor or an enum type and this is still of course a part of chapter 2 Which is regarding? Creating and destroying objects. So singleton was one of the design patterns that was originally I don't know if the word is originally, but let's say popularized by the gang of foe in their great software engineering book Design patterns and a singleton is a design pattern that ensures that a class can only have one object or as Joshua Block states in the book a Singleton is simply a class that is instantiated exactly once Singletons typically represent either a stateless object such as a function or a system component that is intrinsically unique So this creation on design pattern which I said again was proposed or popularized is a more Accurate term by the angle for it's something one would hear about a lot if you're doing a if you're all be programmer, which is most of us And it's it's got many advantages, which is probably why we've been told by The great wise sagacious programming Gurus to implement it So I found a few advantages of it keep in mind though if you do follow this link This is on refactoring guru. By the way, if you do want to understand Different design patterns this website refactoring guru is fantastic It'll visualize things and use analogies to the real world which personally for me. I always find that helps me Comprehend things much better. So this design pattern the singleton pattern has they've expanded on that topic here They've they've listed listed out not only advantages, but also some cons as you can see here some disadvantage is to I'm not gonna touch on those because you know going deeply into the single singleton Because going deeply into the singleton pattern is probably a bit out of scope for this video But some of the advantages are you can be sure that a class has only a single instance That really helps with maintaining a certain let's say state of an object more from a Business perspective, let's say so we we instantiate a class and we give an object object a certain state and then generally a client would expect this object to behave a certain way and Forcing or implementing the singleton pattern ensures that this object doesn't behave in ways that a client won't expect So it helps to sort of maintain the encapsulation of the class and Yes, you gain a global access point to that instance because obviously only one object access to memory Whoever that's going to use that object will still use that one single object The singleton object is initialized only when it's request requested for the first time So that's kind of like I guess the lacy loading pattern That again is good because we don't want to create unnecessary objects. Generally, that's bad That's a bad almost like an anti-pattern in OOP and on that note Joshua block continues There are two way two common ways. Sorry to implement singletons Both are based on keeping the constructor private and exporting a public static member To provide access to the sole instance So the first approach is using a public static final field where the the member field that holds this instance is final Let's explode that and try and make sense of it What we have here is a class public class called Elvis. By the way, most of this code I've taken from Joshua blocks the code is used in the book itself I've just sort of refactored it to make it a bit more easier for us to understand for me to understand I should speak Individually because I don't want to pretend as if I'm speaking on behalf of other people here for me to understand And as you can see here, yeah The the instance is declared final. So that object becomes immutable So the Elvis class really has only got a simple method called leave the building which states whoa, baby. I'm out of here I guess I'm a bit bit too young or from a different generation to really get the Elvis Presley jokes Which Joshua block has made in this book? It's kind of a bit You know before my time, let's say in any case the constructor of course is private because this gives The class instance control as I've stated in the comment here And then it's simple as this when we do get that instance access that instance and you can probably see here We aren't creating any object using the new keyword or what not We're simply accessing this static member which belongs to the class itself and then through the static member Which gives us that object the instance we are Accessing this method. So if I do run this It'll just say whoa, baby. I'm out of here. Which is really what this object does. There we go right there And on this bit of code Joshua block states the private constructor is called only once to initialize the public static field Elvis instance. So that happens here The the the class itself is instantiating itself with this private constructor because obviously it has it it has access to this Constructor within itself and that object is stored in the instance variables. So yeah, the private constructor is called only once We initialize the public static field Elvis star instance. That's this the lack of a public or protected constructor guarantees a Monoelvistic universe. So the idea is as I did show here the client code You can't instantiate this class. It's impossible because the constructor is private Exactly one Elvis instance will exist once the Elvis class is initialized. No more. No less Nothing that a client does can change this with one caveat This is an interesting point and I shall comment on that in a bit a Privilege client can invoke the private constructor Reflectively with the aid of the accessible object dot set accessible method If you need to defend against its attack modify the constructor to make it throw an exception if it's asked to create a second instance so firstly, I would say Before I say anything or comment on what Java reflection is watch this video by code with Joan Obviously links down below in the description You know, I've read blog posts what not on this idea of Java reflection, but so far No one has explained it simply and plainly the way Joan does in his YouTube channel Just in general code with Joan is a fantastic YouTube channel. I really appreciate his pedagogy and kind of how what's what I'm looking for how Pedestrian and I mean that in the positive sense He makes Java seem to people like me. Who's to try to you know, truly understand the language So Java reflection, let me try and explain what it is as the name suggests. It's a way for a object or a class to introspect or reflect on itself. So what it does is generally of course a client can't go around tampering private methods and setting Setting setters or getters in a class That's not allowed that that violates the OB principle of encapsulation. However Java disallowed this concept called reflection which from what I've read it's mostly for Frameworks so for mostly for Java framework builders that does allow a class like this Which has a private constructor and which don't have any setters which don't have any getters to still implement that from outside the class using Java reflection In fact, let me quickly pull out a more of a formal definition of what Java reflection is because I think It's important to know the concept at least so yes As I said, this is a definition from Oracle docs like more not really the Oracle doc. Sorry. It's more of a technical article Whoa written in 1998. That was a yeah after I was born Reflection is a feature in the Java programming language It allows an executing Java program to examine or Interespect upon itself and manipulate internal properties of the program For example, it's possible for a Java class to obtain the names of all its members and display them That's an important point here that introspection can be done runtime. So when the program is being executed but Better if you just watch this video. It's 22 minutes. Well worth your time So the second way Joshua block has delineated on creating or implementing singletons is Using a static factory method Now if you don't know what that is and don't know the benefits of using a static factory method I would link you to the first video in the series Which is item one that talks about the pros or the virtues of using the static factory method and item one states Consider static factory methods instead of constructors, but for all intents and purposes within our topic Really, it does the same thing. So if you take this example, which again is another class called Elvis Elvis Why isn't it opening up? There we go. So yes, same concept the the constructor is so private and We only have one object being created here within the class and instead of the client Directly accessing the member variable that member variable is private in this case And we rather get it through the static factory method. Oh This bit here the read resolve will get to that soon for now Just ignore line number 15 and clearly as he states here You can see in the code itself one advantage of the static factory approach is that it gives you the flexibility to change your mind About whether the class is a singleton without changing its API So what he means by that is if you look at the public field approach Since we're directly accessing that singleton via the the public member variable It doesn't really give us a flexibility if we do want to not have a singleton Let's say if we don't want to fill a singleton single to impact and I should probably add this here He also states in the previous paragraph I should have read that before the main advantage of the public field approach is that the API makes it clear That the class is singleton The public static field is final so it'll always contain the same object reference, which what do you mean there is from a client perspective? I've used an inline variable here by the way the the It's it says here Elvis and we're getting that single instance Now it's a similar thing we're doing here The only difference with the static factor method is we're accessing it through this method get instance Now because it's a method we can play around with it and do what we want so to speak Which is why Joshua block states it gives you the flexibility to change your mind About whether the class is a singleton without changing its API We don't really change anything in this method. What matters is how we handle This object or what we do inside it from a again from a class clients perspective an example Joshua block has used is something to do with multi-threading In a multi-thread environment the factory method returns a sole instance But it could be modified to return say a separate instance for each thread that invokes it that makes sense We don't want there to be problems with multi-threading by having a single object that all the threads share Let's that could probably corrupt the state of that object I don't know just to you know thinking out loud here now We sort of come to a bit of an ancillary point, but I think is nevertheless important a Second advantage is that you can write a generic singleton factory if your application requires it So what is a generic singleton factory? Let's try and make sense of it. Firstly as per usual I will leave two two Links to two different well one stucco flow answer and then a blog post Regarding this concept of type erasure, which is what allows generic programming in Java and How it happens and why it's it's necessary for generic programming But it's not really within the scope of what we're discussing here. It's still important to understand though So what's a generic singleton factory first of all out? I should say we'll be covering this in item 30 of this book so probably next year Therefore we shall go into more detail in that video and item 30 simply states favorite generic method But I propose to Generic singleton factory in that item Joshua block states because generics are implemented by ratio. So that's what I meant by this type erasure bit Please go read up on that blog post article blog post article on that blog post as it'll really expand on the matter Because generics implemented by ratio you can use a single object for all required type parameterizations But you need to write a static factory method to repeatedly dole out the object for each requested type parameterization This is a very cool concept once you see in an action which I shall which I shall show It's a bit of tongue twister which I shall show in a bit because it is it is pretty cool How it all comes together so kind of definition that I came up with for what a generic singleton factory is It allows to create multiple singletons That is not a oxymoron You will see you will see why that is in a bit that behave the same way. So it's kind of got like a same Supertype which man is how it behaves using generics allows to use a single object for type parameterizations I'm kind of repeating where Joshua block state Stay stated and casting is not required that too you shall see so I've got the example here This too I took from item 30 But I just realized that before I do go through the example and explore the code. I didn't mention those two the Stack Overflow answer and then this blog post, but I didn't really even expand on what what it is or what what they are So I want to read out a bit of bit of like introduction in this article regarding Type erasure because type erasure is what allows firstly the the the generic singleton pattern, but also using generic programming in Java generally Generic programming in Java generally gosh, that's funny So what does this person say? By the way, this article was written by Bishal Kumar Dube. So what is Bishal's state here? Generics concept is introduced in Java language to provide Tider type checks at compile time and to support generic programming as I said the way to implement generics The Java compiler applies type erasure To replace all type parameters in generic types with their bounds or object if the type parameters are unbounded The produce bytecode we shall go into the bytecode bit to therefore contains only ordinary classes interfaces and methods Insert type costs if necessary to preserve type safety. That is also something we shall explore Generate bridge methods to preserve Polymorphism in extended generic types So you will see that the the third point here that polymorph polymorphism bit in this example that I'm gonna show soon See the stochophilons are kind of explained it this way So we have this class of course here, which is simply a list Sorry, let's say class. I mean we have the list interface and the other list class And it's the generic type where the type parameter We are passing the string and then we're just adding it and we're getting it But in the bytecode level it really compiles like this It does do the casting for us now This is not required for us to do because we're using Generics and the type erasure allows this Going to the example here is how the generic singleton pattern works this instance We have a variable called identity function or identity fm We have a variable irony function and keep in mind Object in Java is a superclass for all other classes therefore any subtype of this Type can be passed into this So we have this private static final member variable called Unary operator And then we have a static factory method What happens here is that method we can pass a Type parameters similar to how you would pass a parameter to a method But in this case it's a type So then in the client side, you'll firstly see that I'm not using any costs here And I have two lists up defined. Sorry two arrays not lists in this case A string array right there. I should probably zoom in a bit more. I apologize The the string array and then we have the numbers array So into the same class I'm passing I'm creating an instance of that class same string And I'm getting that object same string same number And I'm passing In this case the type string and in this case the type number Now here's where it gets interesting Despite the different types. It's still using the same object We're still as Joshua block states here doling out the same object into different types So in this case we can type we can apply this and then Print out all the strings and in this case print out all the numbers, but when we run this code You'll see here Why can't I is okay forget about it When we run this code, you'll see here the object is still the same object that it's using For both these cases despite them having different types So I'm printing out the object here same string same number It's still this object the other any function object that is passing or this single instance So it's beautiful And that's what allows generic programming because these are of different types Yet that object is being passed through these different types to be used and abused. Let's say So that essentially is what generic singleton factory is it is a factory We've got a factory here because it's producing or giving we're creating an object Uh, but no cast is being used. I think that's the biggest advantage I've seen from that pattern and afterwards joshua block states a final advantage of using a static factory Is that a method reference Can be used as a supplier for example? Elvis get instance, which is the method reference is a supplier for uh is a supplier and Elvis is the type you pass into it Which is the example I've used here. So let's try and understand. What does it mean? What what what does he mean by? method reference being being passed as a supplier Firstly from the oracle docs, uh, it states What's a supplier? I want to understand. It's a functional interface supplier Sorry, the functional interface supplier contains one method Which is get that takes no argument and returns an object. But but what's important to understand is It it this get method Represents a function which does not take any arguments But produces a value of type t. So yes, the get method doesn't produce any arguments But it has a type the type could be passed as a generic By the way, that latter bit I read from this article again in geeks for geeks, uh, which I'll leave a link down below in the description Which explains what a supplier interface is written by this person Sell one two three. So this is a bit hard to get intuitively even though most of us in functional programming use A method reference, but the method reference requires a supplier This functional interface supplier interface does requires Yeah, it requires a supplier and we need to pass it a type In this case with the class Elvis We could pass the type Elvis as the generic parameter As as of it being of type Elvis um I don't know. I don't know how else to explain it really It just it just seems like it's something that allows us to do functional programming And which is why javas introduced that interface. Probably it was in javae. I think um And yes, the the static factor method allows us to do that essentially because of the get instance method That we define right there in any case I hope that explanation did do some justice to what a supplier interface is if not, please go read the oracle docs Honestly, I don't really find it too interesting. So I didn't go too deeply into it But it just seems like something javae introduced To allow functional programming But back to this this bit is on Still providing the singleton guarantee when serializing classes To maintain to maintain the singleton guarantee declare all instance instance fields Transient so what does transient mean? That means it won't be serialized and provide a read resolve method This is the bit I said I'll get to a bit later that bit right there this ensures that there's The singleton property or the singleton patterns followed during during serialization However, it's not really worth going too deeply into it. Uh, but uh, sorry, you know what before I go Going everywhere with this. I'll I'll finish the rest of that sentence or that paragraph So I'll say to maintain a singleton instance to to maintain the singleton guarantee Declare all instance fields transient and provide a read resolve method Which he points to in item 89. I shall get to that too otherwise each time A serialized instance is deserialized a new instance will be created leading In the case of our example to spurious elvis sightings So firstly that that idea of Read resolve method There's a whole chapter in the book on serialization serial serialization. Why do I find it hard to pronounce that word? serialization When item 89, which is why I said it's not worth spending too much time on this because Joshua block in fact says don't use read resolve methods in item 89 He states for instance control. So that's what we're doing here. We're Practicing instance control instance control prefer enum types to read resolve So we're going to get to enum types next therefore It's not really worth going too deeply into what this read resolve method does but just in general Because it always returns this single instance we defined here It enforces singleton once again, but this time especially during serialization serialization Can't pronounce that word And according to this definition by michael mayers. I've left a link to that It's a it's a blog post in this in the description too Read resolve is used to for replacing the object stream Object object read from the stream. What can't I read today? The only use I've ever seen for this is enforcing singleton Oh, sorry. This was from in fact a stackable flow answer not a blog post but Nevertheless, I shall leave a link to all of that down below in the description When an object is read replace it with the singleton instance. So when this object is read, it's going to replace it with this instance This ensures that nobody can create another instance by serializing and deserializing the singleton However, it makes no sense to go too deeply into read resolve because technically or theoretically As per the Sagacious advice of just your blog. We shouldn't even be using this method We should be using the third method technique or the third way To enforce singleton property, which is with a enum type not an enum type using a single enum I don't know why I said enum type makes no sense. This is by far the simplest way. It's I think two lines of code if I'm not mistaken. So let me open it up It is in fact. Yes, really I don't even know if you consider this is more like a member variable, but it's one line of code This is the simplest way to enforce singleton. Look at that. Just two lines of code really One two, I don't know. I don't want to start a debate here. What's wrong with me? and really all we're doing is story that instance and It's a factor that it's enum We get most of these things we were trying to explicitly declare in the source code By by virtue of it being an enum So, yeah, it provides serialization Serialization for free and by default won't be able to instantiate multiple times because they're static And final effectively In java every enum is implicitly a subclass of the enum class So it cannot be used if singleton needs to extend a superclass. Oh, yes, this is an important point He gets to this in the in the in the end of the paragraph I shall I shall the really the only disadvantage of using an enum to I wouldn't even say Disadvantage more of something something to be wary of when using an enum is this last bit Which I shall touch on a bit in which I which I which I shall touch on in a bit Ah, my constant struggle to talk The best approach this approach may feel a bit unnatural. This is where Joshua block states. So, yeah, I mean, I don't know if In my few years of programming, I haven't really used an enum for much other than as being a container for holding constants So it does feel a bit unnatural But a single element enum type is often the best way to to implement a singleton And then he states, this is the bit I stood out touch on Note that you can't use this approach if your singleton must extend a superclass other than enum Though you can declare an enum to implement interfaces, of course, because in java we can't extend multiple classes because By default any enum will is already extending the enum superclass Let's say Elvis had to extend a class called human That wouldn't be allowed because if we use enum However, you could probably get through that through interfaces. So not really a big deal That was a much shorter video. It was a much shorter item two And that's it. That's item number three that that's so essentially the idea is unless we have to extend a superclass the singleton Then just use enums to end for a singleton property and we also did discuss initially some of the advantages of using a singleton On that note, I shall thank you for letting me again Go about these things like a drunken sailor And get lost sometimes in my own musings. It is really interesting though. It is quite interesting how As I said many times already how all these items are interrelated kind of like the bible The next item item number four, which I'm hoping to cover soon, which again is a shorter item It's it's probably the shortest item in this book is Enforce non instantiability with a private constructor. We've sort of already done that We've already sort of covered de facto covered that item in this item because all the examples we used did have private constructors But it's worth Way when I say there's an example right this this one right here But of course as Joshua bloke has identified it's worth going into detail as to why we need to enforce Non instantiability saying that once again. Thanks for watching. I'll see you in the next one. Cheers", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.640000000000001, "text": " Hey everyone, welcome to yet another episode of my video series on effective Java by Joshua Block", "tokens": [50364, 1911, 1518, 11, 2928, 281, 1939, 1071, 3500, 295, 452, 960, 2638, 322, 4942, 10745, 538, 24005, 17500, 50696], "temperature": 0.0, "avg_logprob": -0.20855704506674966, "compression_ratio": 1.6293103448275863, "no_speech_prob": 0.14120088517665863}, {"id": 1, "seek": 0, "start": 7.16, "end": 10.88, "text": " It's sort of a textbook to code video series where I take", "tokens": [50722, 467, 311, 1333, 295, 257, 25591, 281, 3089, 960, 2638, 689, 286, 747, 50908], "temperature": 0.0, "avg_logprob": -0.20855704506674966, "compression_ratio": 1.6293103448275863, "no_speech_prob": 0.14120088517665863}, {"id": 2, "seek": 0, "start": 12.08, "end": 17.080000000000002, "text": " Topics and principles from this book and I'm hoping to do it with many other books and", "tokens": [50968, 8840, 1167, 293, 9156, 490, 341, 1446, 293, 286, 478, 7159, 281, 360, 309, 365, 867, 661, 3642, 293, 51218], "temperature": 0.0, "avg_logprob": -0.20855704506674966, "compression_ratio": 1.6293103448275863, "no_speech_prob": 0.14120088517665863}, {"id": 3, "seek": 0, "start": 17.52, "end": 22.96, "text": " Expand on these topics and try to understand them and try and see what value or what what we could derive from", "tokens": [51240, 21391, 474, 322, 613, 8378, 293, 853, 281, 1223, 552, 293, 853, 293, 536, 437, 2158, 420, 437, 437, 321, 727, 28446, 490, 51512], "temperature": 0.0, "avg_logprob": -0.20855704506674966, "compression_ratio": 1.6293103448275863, "no_speech_prob": 0.14120088517665863}, {"id": 4, "seek": 0, "start": 23.44, "end": 25.28, "text": " What are in these books?", "tokens": [51536, 708, 366, 294, 613, 3642, 30, 51628], "temperature": 0.0, "avg_logprob": -0.20855704506674966, "compression_ratio": 1.6293103448275863, "no_speech_prob": 0.14120088517665863}, {"id": 5, "seek": 2528, "start": 25.28, "end": 30.240000000000002, "text": " And today, of course, we are on item three, so I've already done this on two other items", "tokens": [50364, 400, 965, 11, 295, 1164, 11, 321, 366, 322, 3174, 1045, 11, 370, 286, 600, 1217, 1096, 341, 322, 732, 661, 4754, 50612], "temperature": 0.0, "avg_logprob": -0.21643118731743466, "compression_ratio": 1.6653992395437263, "no_speech_prob": 0.04882184416055679}, {"id": 6, "seek": 2528, "start": 31.12, "end": 35.08, "text": " And it seems to be going well. I certainly can improve on certain points", "tokens": [50656, 400, 309, 2544, 281, 312, 516, 731, 13, 286, 3297, 393, 3470, 322, 1629, 2793, 50854], "temperature": 0.0, "avg_logprob": -0.21643118731743466, "compression_ratio": 1.6653992395437263, "no_speech_prob": 0.04882184416055679}, {"id": 7, "seek": 2528, "start": 35.08, "end": 39.36, "text": " Maybe above all on brevity and try and convey the points succinctly", "tokens": [50854, 2704, 3673, 439, 322, 1403, 23110, 293, 853, 293, 16965, 264, 2793, 21578, 5460, 356, 51068], "temperature": 0.0, "avg_logprob": -0.21643118731743466, "compression_ratio": 1.6653992395437263, "no_speech_prob": 0.04882184416055679}, {"id": 8, "seek": 2528, "start": 39.88, "end": 42.52, "text": " But saying that though, I want to start off with the proviso", "tokens": [51094, 583, 1566, 300, 1673, 11, 286, 528, 281, 722, 766, 365, 264, 1439, 19227, 51226], "temperature": 0.0, "avg_logprob": -0.21643118731743466, "compression_ratio": 1.6653992395437263, "no_speech_prob": 0.04882184416055679}, {"id": 9, "seek": 2528, "start": 42.52, "end": 45.88, "text": " So if you did watch the other two episodes, you could skip this bit", "tokens": [51226, 407, 498, 291, 630, 1159, 264, 661, 732, 9313, 11, 291, 727, 10023, 341, 857, 51394], "temperature": 0.0, "avg_logprob": -0.21643118731743466, "compression_ratio": 1.6653992395437263, "no_speech_prob": 0.04882184416055679}, {"id": 10, "seek": 2528, "start": 45.88, "end": 50.040000000000006, "text": " I'll leave a timestamp as to where exactly could skip to just to save your time", "tokens": [51394, 286, 603, 1856, 257, 49108, 1215, 382, 281, 689, 2293, 727, 10023, 281, 445, 281, 3155, 428, 565, 51602], "temperature": 0.0, "avg_logprob": -0.21643118731743466, "compression_ratio": 1.6653992395437263, "no_speech_prob": 0.04882184416055679}, {"id": 11, "seek": 5004, "start": 50.48, "end": 55.519999999999996, "text": " So for starters, this is not a tutorial. That's a very very important caveat", "tokens": [50386, 407, 337, 35131, 11, 341, 307, 406, 257, 7073, 13, 663, 311, 257, 588, 588, 1021, 43012, 50638], "temperature": 0.0, "avg_logprob": -0.19556004068125848, "compression_ratio": 1.7625, "no_speech_prob": 0.09942378103733063}, {"id": 12, "seek": 5004, "start": 55.519999999999996, "end": 59.12, "text": " I'm not a teacher in no way am I a Java expert", "tokens": [50638, 286, 478, 406, 257, 5027, 294, 572, 636, 669, 286, 257, 10745, 5844, 50818], "temperature": 0.0, "avg_logprob": -0.19556004068125848, "compression_ratio": 1.7625, "no_speech_prob": 0.09942378103733063}, {"id": 13, "seek": 5004, "start": 59.12, "end": 62.72, "text": " In fact, the more I'm learning about Java the more I'm realizing of", "tokens": [50818, 682, 1186, 11, 264, 544, 286, 478, 2539, 466, 10745, 264, 544, 286, 478, 16734, 295, 50998], "temperature": 0.0, "avg_logprob": -0.19556004068125848, "compression_ratio": 1.7625, "no_speech_prob": 0.09942378103733063}, {"id": 14, "seek": 5004, "start": 63.4, "end": 66.03999999999999, "text": " More I'm realizing how much of an expert. I'm not", "tokens": [51032, 5048, 286, 478, 16734, 577, 709, 295, 364, 5844, 13, 286, 478, 406, 51164], "temperature": 0.0, "avg_logprob": -0.19556004068125848, "compression_ratio": 1.7625, "no_speech_prob": 0.09942378103733063}, {"id": 15, "seek": 5004, "start": 66.96000000000001, "end": 72.88, "text": " I'd like to think of it as the blind leading the blind in this case, so I'm really not leading", "tokens": [51210, 286, 1116, 411, 281, 519, 295, 309, 382, 264, 6865, 5775, 264, 6865, 294, 341, 1389, 11, 370, 286, 478, 534, 406, 5775, 51506], "temperature": 0.0, "avg_logprob": -0.19556004068125848, "compression_ratio": 1.7625, "no_speech_prob": 0.09942378103733063}, {"id": 16, "seek": 5004, "start": 72.88, "end": 78.03999999999999, "text": " But let's say at least formally because this is a YouTube video kind of formally. I am", "tokens": [51506, 583, 718, 311, 584, 412, 1935, 25983, 570, 341, 307, 257, 3088, 960, 733, 295, 25983, 13, 286, 669, 51764], "temperature": 0.0, "avg_logprob": -0.19556004068125848, "compression_ratio": 1.7625, "no_speech_prob": 0.09942378103733063}, {"id": 17, "seek": 7804, "start": 79.04, "end": 81.04, "text": " Leading the blind somewhere", "tokens": [50414, 1456, 8166, 264, 6865, 4079, 50514], "temperature": 0.0, "avg_logprob": -0.24578754718487078, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.01590159721672535}, {"id": 18, "seek": 7804, "start": 81.92, "end": 88.44000000000001, "text": " But that also means that because I'm blind I can make mistakes and run into a wall or something", "tokens": [50558, 583, 300, 611, 1355, 300, 570, 286, 478, 6865, 286, 393, 652, 8038, 293, 1190, 666, 257, 2929, 420, 746, 50884], "temperature": 0.0, "avg_logprob": -0.24578754718487078, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.01590159721672535}, {"id": 19, "seek": 7804, "start": 89.12, "end": 91.12, "text": " This is only a", "tokens": [50918, 639, 307, 787, 257, 51018], "temperature": 0.0, "avg_logprob": -0.24578754718487078, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.01590159721672535}, {"id": 20, "seek": 7804, "start": 91.24000000000001, "end": 94.92, "text": " Exploratory discusion. That's pretty much it try to make sense of things", "tokens": [51024, 12514, 284, 4745, 717, 1149, 313, 13, 663, 311, 1238, 709, 309, 853, 281, 652, 2020, 295, 721, 51208], "temperature": 0.0, "avg_logprob": -0.24578754718487078, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.01590159721672535}, {"id": 21, "seek": 7804, "start": 95.48, "end": 98.04, "text": " The best I would say analogy", "tokens": [51236, 440, 1151, 286, 576, 584, 21663, 51364], "temperature": 0.0, "avg_logprob": -0.24578754718487078, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.01590159721672535}, {"id": 22, "seek": 7804, "start": 98.60000000000001, "end": 104.68, "text": " Day-to-day analogy I could use is what would happen in a university tutorial where we have a bunch of students", "tokens": [51392, 5226, 12, 1353, 12, 810, 21663, 286, 727, 764, 307, 437, 576, 1051, 294, 257, 5454, 7073, 689, 321, 362, 257, 3840, 295, 1731, 51696], "temperature": 0.0, "avg_logprob": -0.24578754718487078, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.01590159721672535}, {"id": 23, "seek": 10468, "start": 104.68, "end": 107.44000000000001, "text": " We have an assignment or a problem statement or some concept", "tokens": [50364, 492, 362, 364, 15187, 420, 257, 1154, 5629, 420, 512, 3410, 50502], "temperature": 0.0, "avg_logprob": -0.19820216298103333, "compression_ratio": 1.7531645569620253, "no_speech_prob": 0.029750218614935875}, {"id": 24, "seek": 10468, "start": 107.44000000000001, "end": 109.52000000000001, "text": " You're trying to grok of course as a tutor", "tokens": [50502, 509, 434, 1382, 281, 4634, 74, 295, 1164, 382, 257, 35613, 50606], "temperature": 0.0, "avg_logprob": -0.19820216298103333, "compression_ratio": 1.7531645569620253, "no_speech_prob": 0.029750218614935875}, {"id": 25, "seek": 10468, "start": 109.52000000000001, "end": 116.04, "text": " But in this case there really isn't a tutor but just a bunch of students getting together trying to make sense of some programming concept", "tokens": [50606, 583, 294, 341, 1389, 456, 534, 1943, 380, 257, 35613, 457, 445, 257, 3840, 295, 1731, 1242, 1214, 1382, 281, 652, 2020, 295, 512, 9410, 3410, 50932], "temperature": 0.0, "avg_logprob": -0.19820216298103333, "compression_ratio": 1.7531645569620253, "no_speech_prob": 0.029750218614935875}, {"id": 26, "seek": 10468, "start": 116.04, "end": 118.32000000000001, "text": " And needless to state this is a programming video", "tokens": [50932, 400, 643, 1832, 281, 1785, 341, 307, 257, 9410, 960, 51046], "temperature": 0.0, "avg_logprob": -0.19820216298103333, "compression_ratio": 1.7531645569620253, "no_speech_prob": 0.029750218614935875}, {"id": 27, "seek": 10468, "start": 118.32000000000001, "end": 122.72, "text": " So it makes sense to have all the code that I use on get out where you could go and play around too", "tokens": [51046, 407, 309, 1669, 2020, 281, 362, 439, 264, 3089, 300, 286, 764, 322, 483, 484, 689, 291, 727, 352, 293, 862, 926, 886, 51266], "temperature": 0.0, "avg_logprob": -0.19820216298103333, "compression_ratio": 1.7531645569620253, "no_speech_prob": 0.029750218614935875}, {"id": 28, "seek": 10468, "start": 122.84, "end": 125.44000000000001, "text": " So I shall leave a link down below in the description", "tokens": [51272, 407, 286, 4393, 1856, 257, 2113, 760, 2507, 294, 264, 3855, 51402], "temperature": 0.0, "avg_logprob": -0.19820216298103333, "compression_ratio": 1.7531645569620253, "no_speech_prob": 0.029750218614935875}, {"id": 29, "seek": 10468, "start": 125.60000000000001, "end": 131.76000000000002, "text": " Not only do my code but even to the code that Joshua Block has published himself on his personal repository", "tokens": [51410, 1726, 787, 360, 452, 3089, 457, 754, 281, 264, 3089, 300, 24005, 17500, 575, 6572, 3647, 322, 702, 2973, 25841, 51718], "temperature": 0.0, "avg_logprob": -0.19820216298103333, "compression_ratio": 1.7531645569620253, "no_speech_prob": 0.029750218614935875}, {"id": 30, "seek": 13176, "start": 131.76, "end": 135.6, "text": " So with offer the do let's get started on item number three", "tokens": [50364, 407, 365, 2626, 264, 360, 718, 311, 483, 1409, 322, 3174, 1230, 1045, 50556], "temperature": 0.0, "avg_logprob": -0.20729911211624885, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.019716206938028336}, {"id": 31, "seek": 13176, "start": 135.79999999999998, "end": 144.12, "text": " Which states and foes the singleton property with a private constructor or an enum type and this is still of course a part of chapter 2", "tokens": [50566, 3013, 4368, 293, 726, 279, 264, 1522, 14806, 4707, 365, 257, 4551, 47479, 420, 364, 465, 449, 2010, 293, 341, 307, 920, 295, 1164, 257, 644, 295, 7187, 568, 50982], "temperature": 0.0, "avg_logprob": -0.20729911211624885, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.019716206938028336}, {"id": 32, "seek": 13176, "start": 144.12, "end": 146.12, "text": " Which is regarding?", "tokens": [50982, 3013, 307, 8595, 30, 51082], "temperature": 0.0, "avg_logprob": -0.20729911211624885, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.019716206938028336}, {"id": 33, "seek": 13176, "start": 146.39999999999998, "end": 151.79999999999998, "text": " Creating and destroying objects. So singleton was one of the design patterns that was originally", "tokens": [51096, 40002, 293, 19926, 6565, 13, 407, 1522, 14806, 390, 472, 295, 264, 1715, 8294, 300, 390, 7993, 51366], "temperature": 0.0, "avg_logprob": -0.20729911211624885, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.019716206938028336}, {"id": 34, "seek": 13176, "start": 151.79999999999998, "end": 157.6, "text": " I don't know if the word is originally, but let's say popularized by the gang of foe in their great software engineering book", "tokens": [51366, 286, 500, 380, 458, 498, 264, 1349, 307, 7993, 11, 457, 718, 311, 584, 3743, 1602, 538, 264, 10145, 295, 726, 68, 294, 641, 869, 4722, 7043, 1446, 51656], "temperature": 0.0, "avg_logprob": -0.20729911211624885, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.019716206938028336}, {"id": 35, "seek": 15760, "start": 158.44, "end": 167.56, "text": " Design patterns and a singleton is a design pattern that ensures that a class can only have one object or as Joshua Block states in the book a", "tokens": [50406, 12748, 8294, 293, 257, 1522, 14806, 307, 257, 1715, 5102, 300, 28111, 300, 257, 1508, 393, 787, 362, 472, 2657, 420, 382, 24005, 17500, 4368, 294, 264, 1446, 257, 50862], "temperature": 0.0, "avg_logprob": -0.20930986535059262, "compression_ratio": 1.6974358974358974, "no_speech_prob": 0.07694064825773239}, {"id": 36, "seek": 15760, "start": 168.35999999999999, "end": 172.0, "text": " Singleton is simply a class that is instantiated exactly once", "tokens": [50902, 7474, 14806, 307, 2935, 257, 1508, 300, 307, 9836, 72, 770, 2293, 1564, 51084], "temperature": 0.0, "avg_logprob": -0.20930986535059262, "compression_ratio": 1.6974358974358974, "no_speech_prob": 0.07694064825773239}, {"id": 37, "seek": 15760, "start": 173.12, "end": 181.24, "text": " Singletons typically represent either a stateless object such as a function or a system component that is intrinsically unique", "tokens": [51140, 7474, 2631, 892, 5850, 2906, 2139, 257, 2219, 4272, 2657, 1270, 382, 257, 2445, 420, 257, 1185, 6542, 300, 307, 28621, 984, 3845, 51546], "temperature": 0.0, "avg_logprob": -0.20930986535059262, "compression_ratio": 1.6974358974358974, "no_speech_prob": 0.07694064825773239}, {"id": 38, "seek": 18124, "start": 181.36, "end": 187.04000000000002, "text": " So this creation on design pattern which I said again was proposed or popularized is a more", "tokens": [50370, 407, 341, 8016, 322, 1715, 5102, 597, 286, 848, 797, 390, 10348, 420, 3743, 1602, 307, 257, 544, 50654], "temperature": 0.0, "avg_logprob": -0.2698987670566725, "compression_ratio": 1.5708154506437768, "no_speech_prob": 0.024792581796646118}, {"id": 39, "seek": 18124, "start": 187.52, "end": 194.88, "text": " Accurate term by the angle for it's something one would hear about a lot if you're doing a if you're all be programmer, which is most of us", "tokens": [50678, 5725, 33144, 1433, 538, 264, 5802, 337, 309, 311, 746, 472, 576, 1568, 466, 257, 688, 498, 291, 434, 884, 257, 498, 291, 434, 439, 312, 32116, 11, 597, 307, 881, 295, 505, 51046], "temperature": 0.0, "avg_logprob": -0.2698987670566725, "compression_ratio": 1.5708154506437768, "no_speech_prob": 0.024792581796646118}, {"id": 40, "seek": 18124, "start": 195.68, "end": 200.72, "text": " And it's it's got many advantages, which is probably why we've been told by", "tokens": [51086, 400, 309, 311, 309, 311, 658, 867, 14906, 11, 597, 307, 1391, 983, 321, 600, 668, 1907, 538, 51338], "temperature": 0.0, "avg_logprob": -0.2698987670566725, "compression_ratio": 1.5708154506437768, "no_speech_prob": 0.024792581796646118}, {"id": 41, "seek": 18124, "start": 201.44, "end": 204.12, "text": " The great wise sagacious programming", "tokens": [51374, 440, 869, 10829, 15274, 22641, 9410, 51508], "temperature": 0.0, "avg_logprob": -0.2698987670566725, "compression_ratio": 1.5708154506437768, "no_speech_prob": 0.024792581796646118}, {"id": 42, "seek": 18124, "start": 204.72, "end": 206.72, "text": " Gurus to implement it", "tokens": [51538, 33716, 301, 281, 4445, 309, 51638], "temperature": 0.0, "avg_logprob": -0.2698987670566725, "compression_ratio": 1.5708154506437768, "no_speech_prob": 0.024792581796646118}, {"id": 43, "seek": 20672, "start": 207.0, "end": 211.76, "text": " So I found a few advantages of it keep in mind though if you do follow this link", "tokens": [50378, 407, 286, 1352, 257, 1326, 14906, 295, 309, 1066, 294, 1575, 1673, 498, 291, 360, 1524, 341, 2113, 50616], "temperature": 0.0, "avg_logprob": -0.20854532150995164, "compression_ratio": 1.661710037174721, "no_speech_prob": 0.00453741941601038}, {"id": 44, "seek": 20672, "start": 211.8, "end": 215.76, "text": " This is on refactoring guru. By the way, if you do want to understand", "tokens": [50618, 639, 307, 322, 1895, 578, 3662, 29949, 13, 3146, 264, 636, 11, 498, 291, 360, 528, 281, 1223, 50816], "temperature": 0.0, "avg_logprob": -0.20854532150995164, "compression_ratio": 1.661710037174721, "no_speech_prob": 0.00453741941601038}, {"id": 45, "seek": 20672, "start": 217.0, "end": 220.6, "text": " Different design patterns this website refactoring guru is fantastic", "tokens": [50878, 20825, 1715, 8294, 341, 3144, 1895, 578, 3662, 29949, 307, 5456, 51058], "temperature": 0.0, "avg_logprob": -0.20854532150995164, "compression_ratio": 1.661710037174721, "no_speech_prob": 0.00453741941601038}, {"id": 46, "seek": 20672, "start": 220.72, "end": 227.68, "text": " It'll visualize things and use analogies to the real world which personally for me. I always find that helps me", "tokens": [51064, 467, 603, 23273, 721, 293, 764, 16660, 530, 281, 264, 957, 1002, 597, 5665, 337, 385, 13, 286, 1009, 915, 300, 3665, 385, 51412], "temperature": 0.0, "avg_logprob": -0.20854532150995164, "compression_ratio": 1.661710037174721, "no_speech_prob": 0.00453741941601038}, {"id": 47, "seek": 20672, "start": 228.4, "end": 235.64, "text": " Comprehend things much better. So this design pattern the singleton pattern has they've expanded on that topic here", "tokens": [51448, 2432, 40128, 521, 721, 709, 1101, 13, 407, 341, 1715, 5102, 264, 1522, 14806, 5102, 575, 436, 600, 14342, 322, 300, 4829, 510, 51810], "temperature": 0.0, "avg_logprob": -0.20854532150995164, "compression_ratio": 1.661710037174721, "no_speech_prob": 0.00453741941601038}, {"id": 48, "seek": 23564, "start": 236.48, "end": 243.44, "text": " They've they've listed listed out not only advantages, but also some cons as you can see here some disadvantage is to", "tokens": [50406, 814, 600, 436, 600, 10052, 10052, 484, 406, 787, 14906, 11, 457, 611, 512, 1014, 382, 291, 393, 536, 510, 512, 24292, 307, 281, 50754], "temperature": 0.0, "avg_logprob": -0.20563861559022148, "compression_ratio": 1.817829457364341, "no_speech_prob": 0.006387466099113226}, {"id": 49, "seek": 23564, "start": 244.0, "end": 248.32, "text": " I'm not gonna touch on those because you know going deeply into the single singleton", "tokens": [50782, 286, 478, 406, 799, 2557, 322, 729, 570, 291, 458, 516, 8760, 666, 264, 2167, 1522, 14806, 50998], "temperature": 0.0, "avg_logprob": -0.20563861559022148, "compression_ratio": 1.817829457364341, "no_speech_prob": 0.006387466099113226}, {"id": 50, "seek": 23564, "start": 249.48, "end": 253.51999999999998, "text": " Because going deeply into the singleton pattern is probably a bit out of scope for this video", "tokens": [51056, 1436, 516, 8760, 666, 264, 1522, 14806, 5102, 307, 1391, 257, 857, 484, 295, 11923, 337, 341, 960, 51258], "temperature": 0.0, "avg_logprob": -0.20563861559022148, "compression_ratio": 1.817829457364341, "no_speech_prob": 0.006387466099113226}, {"id": 51, "seek": 23564, "start": 253.64, "end": 257.68, "text": " But some of the advantages are you can be sure that a class has only a single instance", "tokens": [51264, 583, 512, 295, 264, 14906, 366, 291, 393, 312, 988, 300, 257, 1508, 575, 787, 257, 2167, 5197, 51466], "temperature": 0.0, "avg_logprob": -0.20563861559022148, "compression_ratio": 1.817829457364341, "no_speech_prob": 0.006387466099113226}, {"id": 52, "seek": 23564, "start": 257.8, "end": 263.12, "text": " That really helps with maintaining a certain let's say state of an object more from a", "tokens": [51472, 663, 534, 3665, 365, 14916, 257, 1629, 718, 311, 584, 1785, 295, 364, 2657, 544, 490, 257, 51738], "temperature": 0.0, "avg_logprob": -0.20563861559022148, "compression_ratio": 1.817829457364341, "no_speech_prob": 0.006387466099113226}, {"id": 53, "seek": 26312, "start": 263.8, "end": 270.8, "text": " Business perspective, let's say so we we instantiate a class and we give an object object a certain state and", "tokens": [50398, 10715, 4585, 11, 718, 311, 584, 370, 321, 321, 9836, 13024, 257, 1508, 293, 321, 976, 364, 2657, 2657, 257, 1629, 1785, 293, 50748], "temperature": 0.0, "avg_logprob": -0.21111971991402761, "compression_ratio": 1.7395348837209301, "no_speech_prob": 0.005381635390222073}, {"id": 54, "seek": 26312, "start": 271.12, "end": 275.28000000000003, "text": " then generally a client would expect this object to behave a certain way and", "tokens": [50764, 550, 5101, 257, 6423, 576, 2066, 341, 2657, 281, 15158, 257, 1629, 636, 293, 50972], "temperature": 0.0, "avg_logprob": -0.21111971991402761, "compression_ratio": 1.7395348837209301, "no_speech_prob": 0.005381635390222073}, {"id": 55, "seek": 26312, "start": 276.6, "end": 283.84000000000003, "text": " Forcing or implementing the singleton pattern ensures that this object doesn't behave in ways that a client won't expect", "tokens": [51038, 1171, 2175, 420, 18114, 264, 1522, 14806, 5102, 28111, 300, 341, 2657, 1177, 380, 15158, 294, 2098, 300, 257, 6423, 1582, 380, 2066, 51400], "temperature": 0.0, "avg_logprob": -0.21111971991402761, "compression_ratio": 1.7395348837209301, "no_speech_prob": 0.005381635390222073}, {"id": 56, "seek": 26312, "start": 284.36, "end": 289.12, "text": " So it helps to sort of maintain the encapsulation of the class and", "tokens": [51426, 407, 309, 3665, 281, 1333, 295, 6909, 264, 38745, 2776, 295, 264, 1508, 293, 51664], "temperature": 0.0, "avg_logprob": -0.21111971991402761, "compression_ratio": 1.7395348837209301, "no_speech_prob": 0.005381635390222073}, {"id": 57, "seek": 28912, "start": 290.12, "end": 297.12, "text": " Yes, you gain a global access point to that instance because obviously only one object access to memory", "tokens": [50414, 1079, 11, 291, 6052, 257, 4338, 2105, 935, 281, 300, 5197, 570, 2745, 787, 472, 2657, 2105, 281, 4675, 50764], "temperature": 0.0, "avg_logprob": -0.24220215646844162, "compression_ratio": 1.7242798353909465, "no_speech_prob": 0.0014324570074677467}, {"id": 58, "seek": 28912, "start": 297.6, "end": 301.88, "text": " Whoever that's going to use that object will still use that one single object", "tokens": [50788, 24743, 300, 311, 516, 281, 764, 300, 2657, 486, 920, 764, 300, 472, 2167, 2657, 51002], "temperature": 0.0, "avg_logprob": -0.24220215646844162, "compression_ratio": 1.7242798353909465, "no_speech_prob": 0.0014324570074677467}, {"id": 59, "seek": 28912, "start": 303.36, "end": 308.36, "text": " The singleton object is initialized only when it's request requested for the first time", "tokens": [51076, 440, 1522, 14806, 2657, 307, 5883, 1602, 787, 562, 309, 311, 5308, 16436, 337, 264, 700, 565, 51326], "temperature": 0.0, "avg_logprob": -0.24220215646844162, "compression_ratio": 1.7242798353909465, "no_speech_prob": 0.0014324570074677467}, {"id": 60, "seek": 28912, "start": 308.36, "end": 311.04, "text": " So that's kind of like I guess the lacy loading pattern", "tokens": [51326, 407, 300, 311, 733, 295, 411, 286, 2041, 264, 287, 2551, 15114, 5102, 51460], "temperature": 0.0, "avg_logprob": -0.24220215646844162, "compression_ratio": 1.7242798353909465, "no_speech_prob": 0.0014324570074677467}, {"id": 61, "seek": 28912, "start": 311.44, "end": 317.16, "text": " That again is good because we don't want to create unnecessary objects. Generally, that's bad", "tokens": [51480, 663, 797, 307, 665, 570, 321, 500, 380, 528, 281, 1884, 19350, 6565, 13, 21082, 11, 300, 311, 1578, 51766], "temperature": 0.0, "avg_logprob": -0.24220215646844162, "compression_ratio": 1.7242798353909465, "no_speech_prob": 0.0014324570074677467}, {"id": 62, "seek": 31716, "start": 317.36, "end": 323.20000000000005, "text": " That's a bad almost like an anti-pattern in OOP and on that note Joshua block continues", "tokens": [50374, 663, 311, 257, 1578, 1920, 411, 364, 6061, 12, 79, 1161, 77, 294, 422, 12059, 293, 322, 300, 3637, 24005, 3461, 6515, 50666], "temperature": 0.0, "avg_logprob": -0.23707008361816406, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.005301512777805328}, {"id": 63, "seek": 31716, "start": 324.04, "end": 328.0, "text": " There are two way two common ways. Sorry to implement singletons", "tokens": [50708, 821, 366, 732, 636, 732, 2689, 2098, 13, 4919, 281, 4445, 1522, 2631, 892, 50906], "temperature": 0.0, "avg_logprob": -0.23707008361816406, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.005301512777805328}, {"id": 64, "seek": 31716, "start": 328.16, "end": 331.28000000000003, "text": " Both are based on keeping the constructor private and", "tokens": [50914, 6767, 366, 2361, 322, 5145, 264, 47479, 4551, 293, 51070], "temperature": 0.0, "avg_logprob": -0.23707008361816406, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.005301512777805328}, {"id": 65, "seek": 31716, "start": 332.20000000000005, "end": 334.20000000000005, "text": " exporting a public static member", "tokens": [51116, 44686, 257, 1908, 13437, 4006, 51216], "temperature": 0.0, "avg_logprob": -0.23707008361816406, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.005301512777805328}, {"id": 66, "seek": 31716, "start": 335.16, "end": 337.28000000000003, "text": " To provide access to the sole instance", "tokens": [51264, 1407, 2893, 2105, 281, 264, 12321, 5197, 51370], "temperature": 0.0, "avg_logprob": -0.23707008361816406, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.005301512777805328}, {"id": 67, "seek": 31716, "start": 337.28000000000003, "end": 344.52000000000004, "text": " So the first approach is using a public static final field where the the member field that holds this instance is final", "tokens": [51370, 407, 264, 700, 3109, 307, 1228, 257, 1908, 13437, 2572, 2519, 689, 264, 264, 4006, 2519, 300, 9190, 341, 5197, 307, 2572, 51732], "temperature": 0.0, "avg_logprob": -0.23707008361816406, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.005301512777805328}, {"id": 68, "seek": 34452, "start": 344.76, "end": 347.56, "text": " Let's explode that and try and make sense of it", "tokens": [50376, 961, 311, 21411, 300, 293, 853, 293, 652, 2020, 295, 309, 50516], "temperature": 0.0, "avg_logprob": -0.189226481540144, "compression_ratio": 1.695970695970696, "no_speech_prob": 0.010816561989486217}, {"id": 69, "seek": 34452, "start": 347.88, "end": 353.68, "text": " What we have here is a class public class called Elvis. By the way, most of this code I've taken from", "tokens": [50532, 708, 321, 362, 510, 307, 257, 1508, 1908, 1508, 1219, 39944, 13, 3146, 264, 636, 11, 881, 295, 341, 3089, 286, 600, 2726, 490, 50822], "temperature": 0.0, "avg_logprob": -0.189226481540144, "compression_ratio": 1.695970695970696, "no_speech_prob": 0.010816561989486217}, {"id": 70, "seek": 34452, "start": 354.2, "end": 357.15999999999997, "text": " Joshua blocks the code is used in the book itself", "tokens": [50848, 24005, 8474, 264, 3089, 307, 1143, 294, 264, 1446, 2564, 50996], "temperature": 0.0, "avg_logprob": -0.189226481540144, "compression_ratio": 1.695970695970696, "no_speech_prob": 0.010816561989486217}, {"id": 71, "seek": 34452, "start": 357.2, "end": 362.24, "text": " I've just sort of refactored it to make it a bit more easier for us to understand for me to understand", "tokens": [50998, 286, 600, 445, 1333, 295, 1895, 578, 2769, 309, 281, 652, 309, 257, 857, 544, 3571, 337, 505, 281, 1223, 337, 385, 281, 1223, 51250], "temperature": 0.0, "avg_logprob": -0.189226481540144, "compression_ratio": 1.695970695970696, "no_speech_prob": 0.010816561989486217}, {"id": 72, "seek": 34452, "start": 362.24, "end": 363.47999999999996, "text": " I should speak", "tokens": [51250, 286, 820, 1710, 51312], "temperature": 0.0, "avg_logprob": -0.189226481540144, "compression_ratio": 1.695970695970696, "no_speech_prob": 0.010816561989486217}, {"id": 73, "seek": 34452, "start": 363.47999999999996, "end": 369.0, "text": " Individually because I don't want to pretend as if I'm speaking on behalf of other people here for me to understand", "tokens": [51312, 2333, 1843, 671, 570, 286, 500, 380, 528, 281, 11865, 382, 498, 286, 478, 4124, 322, 9490, 295, 661, 561, 510, 337, 385, 281, 1223, 51588], "temperature": 0.0, "avg_logprob": -0.189226481540144, "compression_ratio": 1.695970695970696, "no_speech_prob": 0.010816561989486217}, {"id": 74, "seek": 34452, "start": 369.64, "end": 371.64, "text": " And as you can see here, yeah", "tokens": [51620, 400, 382, 291, 393, 536, 510, 11, 1338, 51720], "temperature": 0.0, "avg_logprob": -0.189226481540144, "compression_ratio": 1.695970695970696, "no_speech_prob": 0.010816561989486217}, {"id": 75, "seek": 37164, "start": 371.64, "end": 376.71999999999997, "text": " The the instance is declared final. So that object becomes immutable", "tokens": [50364, 440, 264, 5197, 307, 15489, 2572, 13, 407, 300, 2657, 3643, 3397, 32148, 50618], "temperature": 0.0, "avg_logprob": -0.19309723593971945, "compression_ratio": 1.5582191780821917, "no_speech_prob": 0.010168744251132011}, {"id": 76, "seek": 37164, "start": 376.71999999999997, "end": 382.96, "text": " So the Elvis class really has only got a simple method called leave the building which states whoa, baby. I'm out of here", "tokens": [50618, 407, 264, 39944, 1508, 534, 575, 787, 658, 257, 2199, 3170, 1219, 1856, 264, 2390, 597, 4368, 13310, 11, 3186, 13, 286, 478, 484, 295, 510, 50930], "temperature": 0.0, "avg_logprob": -0.19309723593971945, "compression_ratio": 1.5582191780821917, "no_speech_prob": 0.010168744251132011}, {"id": 77, "seek": 37164, "start": 382.96, "end": 389.68, "text": " I guess I'm a bit bit too young or from a different generation to really get the Elvis Presley jokes", "tokens": [50930, 286, 2041, 286, 478, 257, 857, 857, 886, 2037, 420, 490, 257, 819, 5125, 281, 534, 483, 264, 39944, 2718, 3420, 14439, 51266], "temperature": 0.0, "avg_logprob": -0.19309723593971945, "compression_ratio": 1.5582191780821917, "no_speech_prob": 0.010168744251132011}, {"id": 78, "seek": 37164, "start": 389.68, "end": 392.59999999999997, "text": " Which Joshua block has made in this book?", "tokens": [51266, 3013, 24005, 3461, 575, 1027, 294, 341, 1446, 30, 51412], "temperature": 0.0, "avg_logprob": -0.19309723593971945, "compression_ratio": 1.5582191780821917, "no_speech_prob": 0.010168744251132011}, {"id": 79, "seek": 37164, "start": 393.36, "end": 395.24, "text": " It's kind of a bit", "tokens": [51450, 467, 311, 733, 295, 257, 857, 51544], "temperature": 0.0, "avg_logprob": -0.19309723593971945, "compression_ratio": 1.5582191780821917, "no_speech_prob": 0.010168744251132011}, {"id": 80, "seek": 37164, "start": 395.24, "end": 401.52, "text": " You know before my time, let's say in any case the constructor of course is private because this gives", "tokens": [51544, 509, 458, 949, 452, 565, 11, 718, 311, 584, 294, 604, 1389, 264, 47479, 295, 1164, 307, 4551, 570, 341, 2709, 51858], "temperature": 0.0, "avg_logprob": -0.19309723593971945, "compression_ratio": 1.5582191780821917, "no_speech_prob": 0.010168744251132011}, {"id": 81, "seek": 40164, "start": 401.64, "end": 405.08, "text": " The class instance control as I've stated in the comment here", "tokens": [50364, 440, 1508, 5197, 1969, 382, 286, 600, 11323, 294, 264, 2871, 510, 50536], "temperature": 0.0, "avg_logprob": -0.2048065948486328, "compression_ratio": 1.7975206611570247, "no_speech_prob": 0.010650565847754478}, {"id": 82, "seek": 40164, "start": 405.08, "end": 411.84, "text": " And then it's simple as this when we do get that instance access that instance and you can probably see here", "tokens": [50536, 400, 550, 309, 311, 2199, 382, 341, 562, 321, 360, 483, 300, 5197, 2105, 300, 5197, 293, 291, 393, 1391, 536, 510, 50874], "temperature": 0.0, "avg_logprob": -0.2048065948486328, "compression_ratio": 1.7975206611570247, "no_speech_prob": 0.010650565847754478}, {"id": 83, "seek": 40164, "start": 411.84, "end": 415.76, "text": " We aren't creating any object using the new keyword or what not", "tokens": [50874, 492, 3212, 380, 4084, 604, 2657, 1228, 264, 777, 20428, 420, 437, 406, 51070], "temperature": 0.0, "avg_logprob": -0.2048065948486328, "compression_ratio": 1.7975206611570247, "no_speech_prob": 0.010650565847754478}, {"id": 84, "seek": 40164, "start": 415.76, "end": 422.2, "text": " We're simply accessing this static member which belongs to the class itself and then through the static member", "tokens": [51070, 492, 434, 2935, 26440, 341, 13437, 4006, 597, 12953, 281, 264, 1508, 2564, 293, 550, 807, 264, 13437, 4006, 51392], "temperature": 0.0, "avg_logprob": -0.2048065948486328, "compression_ratio": 1.7975206611570247, "no_speech_prob": 0.010650565847754478}, {"id": 85, "seek": 40164, "start": 422.2, "end": 425.08, "text": " Which gives us that object the instance we are", "tokens": [51392, 3013, 2709, 505, 300, 2657, 264, 5197, 321, 366, 51536], "temperature": 0.0, "avg_logprob": -0.2048065948486328, "compression_ratio": 1.7975206611570247, "no_speech_prob": 0.010650565847754478}, {"id": 86, "seek": 40164, "start": 425.76, "end": 428.08, "text": " Accessing this method. So if I do run this", "tokens": [51570, 17166, 278, 341, 3170, 13, 407, 498, 286, 360, 1190, 341, 51686], "temperature": 0.0, "avg_logprob": -0.2048065948486328, "compression_ratio": 1.7975206611570247, "no_speech_prob": 0.010650565847754478}, {"id": 87, "seek": 42808, "start": 428.52, "end": 434.71999999999997, "text": " It'll just say whoa, baby. I'm out of here. Which is really what this object does. There we go right there", "tokens": [50386, 467, 603, 445, 584, 13310, 11, 3186, 13, 286, 478, 484, 295, 510, 13, 3013, 307, 534, 437, 341, 2657, 775, 13, 821, 321, 352, 558, 456, 50696], "temperature": 0.0, "avg_logprob": -0.23531097494145875, "compression_ratio": 1.6446280991735538, "no_speech_prob": 0.0050600082613527775}, {"id": 88, "seek": 42808, "start": 434.71999999999997, "end": 441.91999999999996, "text": " And on this bit of code Joshua block states the private constructor is called only once to initialize the public static field", "tokens": [50696, 400, 322, 341, 857, 295, 3089, 24005, 3461, 4368, 264, 4551, 47479, 307, 1219, 787, 1564, 281, 5883, 1125, 264, 1908, 13437, 2519, 51056], "temperature": 0.0, "avg_logprob": -0.23531097494145875, "compression_ratio": 1.6446280991735538, "no_speech_prob": 0.0050600082613527775}, {"id": 89, "seek": 42808, "start": 442.24, "end": 444.71999999999997, "text": " Elvis instance. So that happens here", "tokens": [51072, 39944, 5197, 13, 407, 300, 2314, 510, 51196], "temperature": 0.0, "avg_logprob": -0.23531097494145875, "compression_ratio": 1.6446280991735538, "no_speech_prob": 0.0050600082613527775}, {"id": 90, "seek": 42808, "start": 445.88, "end": 447.88, "text": " The the the class itself is", "tokens": [51254, 440, 264, 264, 1508, 2564, 307, 51354], "temperature": 0.0, "avg_logprob": -0.23531097494145875, "compression_ratio": 1.6446280991735538, "no_speech_prob": 0.0050600082613527775}, {"id": 91, "seek": 42808, "start": 449.03999999999996, "end": 454.52, "text": " instantiating itself with this private constructor because obviously it has it it has access to this", "tokens": [51412, 9836, 72, 990, 2564, 365, 341, 4551, 47479, 570, 2745, 309, 575, 309, 309, 575, 2105, 281, 341, 51686], "temperature": 0.0, "avg_logprob": -0.23531097494145875, "compression_ratio": 1.6446280991735538, "no_speech_prob": 0.0050600082613527775}, {"id": 92, "seek": 45452, "start": 454.84, "end": 461.68, "text": " Constructor within itself and that object is stored in the instance variables. So yeah, the private constructor is called only once", "tokens": [50380, 8574, 14535, 1951, 2564, 293, 300, 2657, 307, 12187, 294, 264, 5197, 9102, 13, 407, 1338, 11, 264, 4551, 47479, 307, 1219, 787, 1564, 50722], "temperature": 0.0, "avg_logprob": -0.239826122083162, "compression_ratio": 1.689516129032258, "no_speech_prob": 0.008576924912631512}, {"id": 93, "seek": 45452, "start": 461.68, "end": 464.84, "text": " We initialize the public static field Elvis star instance. That's this", "tokens": [50722, 492, 5883, 1125, 264, 1908, 13437, 2519, 39944, 3543, 5197, 13, 663, 311, 341, 50880], "temperature": 0.0, "avg_logprob": -0.239826122083162, "compression_ratio": 1.689516129032258, "no_speech_prob": 0.008576924912631512}, {"id": 94, "seek": 45452, "start": 465.59999999999997, "end": 470.32, "text": " the lack of a public or protected constructor guarantees a", "tokens": [50918, 264, 5011, 295, 257, 1908, 420, 10594, 47479, 32567, 257, 51154], "temperature": 0.0, "avg_logprob": -0.239826122083162, "compression_ratio": 1.689516129032258, "no_speech_prob": 0.008576924912631512}, {"id": 95, "seek": 45452, "start": 471.12, "end": 476.15999999999997, "text": " Monoelvistic universe. So the idea is as I did show here the client code", "tokens": [51194, 4713, 78, 338, 85, 3142, 6445, 13, 407, 264, 1558, 307, 382, 286, 630, 855, 510, 264, 6423, 3089, 51446], "temperature": 0.0, "avg_logprob": -0.239826122083162, "compression_ratio": 1.689516129032258, "no_speech_prob": 0.008576924912631512}, {"id": 96, "seek": 45452, "start": 476.76, "end": 480.24, "text": " You can't instantiate this class. It's impossible because the constructor is private", "tokens": [51476, 509, 393, 380, 9836, 13024, 341, 1508, 13, 467, 311, 6243, 570, 264, 47479, 307, 4551, 51650], "temperature": 0.0, "avg_logprob": -0.239826122083162, "compression_ratio": 1.689516129032258, "no_speech_prob": 0.008576924912631512}, {"id": 97, "seek": 48024, "start": 481.12, "end": 489.52, "text": " Exactly one Elvis instance will exist once the Elvis class is initialized. No more. No less", "tokens": [50408, 7587, 472, 39944, 5197, 486, 2514, 1564, 264, 39944, 1508, 307, 5883, 1602, 13, 883, 544, 13, 883, 1570, 50828], "temperature": 0.0, "avg_logprob": -0.27098166942596436, "compression_ratio": 1.6064814814814814, "no_speech_prob": 0.001366961281746626}, {"id": 98, "seek": 48024, "start": 490.40000000000003, "end": 494.72, "text": " Nothing that a client does can change this with one caveat", "tokens": [50872, 6693, 300, 257, 6423, 775, 393, 1319, 341, 365, 472, 43012, 51088], "temperature": 0.0, "avg_logprob": -0.27098166942596436, "compression_ratio": 1.6064814814814814, "no_speech_prob": 0.001366961281746626}, {"id": 99, "seek": 48024, "start": 495.24, "end": 499.2, "text": " This is an interesting point and I shall comment on that in a bit a", "tokens": [51114, 639, 307, 364, 1880, 935, 293, 286, 4393, 2871, 322, 300, 294, 257, 857, 257, 51312], "temperature": 0.0, "avg_logprob": -0.27098166942596436, "compression_ratio": 1.6064814814814814, "no_speech_prob": 0.001366961281746626}, {"id": 100, "seek": 48024, "start": 500.12, "end": 503.0, "text": " Privilege client can invoke the private constructor", "tokens": [51358, 39691, 794, 432, 6423, 393, 41117, 264, 4551, 47479, 51502], "temperature": 0.0, "avg_logprob": -0.27098166942596436, "compression_ratio": 1.6064814814814814, "no_speech_prob": 0.001366961281746626}, {"id": 101, "seek": 48024, "start": 503.44, "end": 508.8, "text": " Reflectively with the aid of the accessible object dot set accessible method", "tokens": [51524, 16957, 1809, 3413, 365, 264, 9418, 295, 264, 9515, 2657, 5893, 992, 9515, 3170, 51792], "temperature": 0.0, "avg_logprob": -0.27098166942596436, "compression_ratio": 1.6064814814814814, "no_speech_prob": 0.001366961281746626}, {"id": 102, "seek": 50880, "start": 508.8, "end": 516.4, "text": " If you need to defend against its attack modify the constructor to make it throw an exception if it's asked to create a second instance", "tokens": [50364, 759, 291, 643, 281, 8602, 1970, 1080, 2690, 16927, 264, 47479, 281, 652, 309, 3507, 364, 11183, 498, 309, 311, 2351, 281, 1884, 257, 1150, 5197, 50744], "temperature": 0.0, "avg_logprob": -0.21611001518335235, "compression_ratio": 1.5867768595041323, "no_speech_prob": 0.005219666752964258}, {"id": 103, "seek": 50880, "start": 516.96, "end": 518.96, "text": " so firstly, I would say", "tokens": [50772, 370, 27376, 11, 286, 576, 584, 50872], "temperature": 0.0, "avg_logprob": -0.21611001518335235, "compression_ratio": 1.5867768595041323, "no_speech_prob": 0.005219666752964258}, {"id": 104, "seek": 50880, "start": 519.72, "end": 526.5600000000001, "text": " Before I say anything or comment on what Java reflection is watch this video by code with Joan", "tokens": [50910, 4546, 286, 584, 1340, 420, 2871, 322, 437, 10745, 12914, 307, 1159, 341, 960, 538, 3089, 365, 25748, 51252], "temperature": 0.0, "avg_logprob": -0.21611001518335235, "compression_ratio": 1.5867768595041323, "no_speech_prob": 0.005219666752964258}, {"id": 105, "seek": 50880, "start": 526.5600000000001, "end": 528.5600000000001, "text": " Obviously links down below in the description", "tokens": [51252, 7580, 6123, 760, 2507, 294, 264, 3855, 51352], "temperature": 0.0, "avg_logprob": -0.21611001518335235, "compression_ratio": 1.5867768595041323, "no_speech_prob": 0.005219666752964258}, {"id": 106, "seek": 50880, "start": 529.12, "end": 535.52, "text": " You know, I've read blog posts what not on this idea of Java reflection, but so far", "tokens": [51380, 509, 458, 11, 286, 600, 1401, 6968, 12300, 437, 406, 322, 341, 1558, 295, 10745, 12914, 11, 457, 370, 1400, 51700], "temperature": 0.0, "avg_logprob": -0.21611001518335235, "compression_ratio": 1.5867768595041323, "no_speech_prob": 0.005219666752964258}, {"id": 107, "seek": 53552, "start": 536.04, "end": 541.84, "text": " No one has explained it simply and plainly the way Joan does in his YouTube channel", "tokens": [50390, 883, 472, 575, 8825, 309, 2935, 293, 11121, 356, 264, 636, 25748, 775, 294, 702, 3088, 2269, 50680], "temperature": 0.0, "avg_logprob": -0.2524150077332842, "compression_ratio": 1.5677966101694916, "no_speech_prob": 0.01770622842013836}, {"id": 108, "seek": 53552, "start": 542.36, "end": 549.0799999999999, "text": " Just in general code with Joan is a fantastic YouTube channel. I really appreciate his pedagogy and", "tokens": [50706, 1449, 294, 2674, 3089, 365, 25748, 307, 257, 5456, 3088, 2269, 13, 286, 534, 4449, 702, 5670, 559, 7794, 293, 51042], "temperature": 0.0, "avg_logprob": -0.2524150077332842, "compression_ratio": 1.5677966101694916, "no_speech_prob": 0.01770622842013836}, {"id": 109, "seek": 53552, "start": 549.6, "end": 551.6, "text": " kind of how what's what I'm looking for", "tokens": [51068, 733, 295, 577, 437, 311, 437, 286, 478, 1237, 337, 51168], "temperature": 0.0, "avg_logprob": -0.2524150077332842, "compression_ratio": 1.5677966101694916, "no_speech_prob": 0.01770622842013836}, {"id": 110, "seek": 53552, "start": 552.36, "end": 554.36, "text": " how", "tokens": [51206, 577, 51306], "temperature": 0.0, "avg_logprob": -0.2524150077332842, "compression_ratio": 1.5677966101694916, "no_speech_prob": 0.01770622842013836}, {"id": 111, "seek": 53552, "start": 554.36, "end": 556.48, "text": " Pedestrian and I mean that in the positive sense", "tokens": [51306, 16689, 377, 5501, 293, 286, 914, 300, 294, 264, 3353, 2020, 51412], "temperature": 0.0, "avg_logprob": -0.2524150077332842, "compression_ratio": 1.5677966101694916, "no_speech_prob": 0.01770622842013836}, {"id": 112, "seek": 53552, "start": 557.16, "end": 563.16, "text": " He makes Java seem to people like me. Who's to try to you know, truly understand the language", "tokens": [51446, 634, 1669, 10745, 1643, 281, 561, 411, 385, 13, 2102, 311, 281, 853, 281, 291, 458, 11, 4908, 1223, 264, 2856, 51746], "temperature": 0.0, "avg_logprob": -0.2524150077332842, "compression_ratio": 1.5677966101694916, "no_speech_prob": 0.01770622842013836}, {"id": 113, "seek": 56316, "start": 564.16, "end": 571.4, "text": " So Java reflection, let me try and explain what it is as the name suggests. It's a way", "tokens": [50414, 407, 10745, 12914, 11, 718, 385, 853, 293, 2903, 437, 309, 307, 382, 264, 1315, 13409, 13, 467, 311, 257, 636, 50776], "temperature": 0.0, "avg_logprob": -0.23744370937347412, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00564124621450901}, {"id": 114, "seek": 56316, "start": 572.36, "end": 573.9599999999999, "text": " for a", "tokens": [50824, 337, 257, 50904], "temperature": 0.0, "avg_logprob": -0.23744370937347412, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00564124621450901}, {"id": 115, "seek": 56316, "start": 573.9599999999999, "end": 575.9599999999999, "text": " object or a class to", "tokens": [50904, 2657, 420, 257, 1508, 281, 51004], "temperature": 0.0, "avg_logprob": -0.23744370937347412, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00564124621450901}, {"id": 116, "seek": 56316, "start": 576.92, "end": 581.7199999999999, "text": " introspect or reflect on itself. So what it does is generally of course a", "tokens": [51052, 560, 28713, 420, 5031, 322, 2564, 13, 407, 437, 309, 775, 307, 5101, 295, 1164, 257, 51292], "temperature": 0.0, "avg_logprob": -0.23744370937347412, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00564124621450901}, {"id": 117, "seek": 56316, "start": 582.4399999999999, "end": 584.4399999999999, "text": " client can't go around tampering", "tokens": [51328, 6423, 393, 380, 352, 926, 7677, 20055, 51428], "temperature": 0.0, "avg_logprob": -0.23744370937347412, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00564124621450901}, {"id": 118, "seek": 56316, "start": 585.12, "end": 587.0799999999999, "text": " private methods and setting", "tokens": [51462, 4551, 7150, 293, 3287, 51560], "temperature": 0.0, "avg_logprob": -0.23744370937347412, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00564124621450901}, {"id": 119, "seek": 56316, "start": 588.64, "end": 591.1999999999999, "text": " Setting setters or getters in a class", "tokens": [51638, 21063, 992, 1559, 420, 483, 1559, 294, 257, 1508, 51766], "temperature": 0.0, "avg_logprob": -0.23744370937347412, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00564124621450901}, {"id": 120, "seek": 59120, "start": 591.96, "end": 597.6400000000001, "text": " That's not allowed that that violates the OB principle of encapsulation. However", "tokens": [50402, 663, 311, 406, 4350, 300, 300, 3448, 1024, 264, 35538, 8665, 295, 38745, 2776, 13, 2908, 50686], "temperature": 0.0, "avg_logprob": -0.2346450641591062, "compression_ratio": 1.7458333333333333, "no_speech_prob": 0.0050597479566931725}, {"id": 121, "seek": 59120, "start": 598.6400000000001, "end": 603.44, "text": " Java disallowed this concept called reflection which from what I've read it's mostly for", "tokens": [50736, 10745, 717, 13253, 292, 341, 3410, 1219, 12914, 597, 490, 437, 286, 600, 1401, 309, 311, 5240, 337, 50976], "temperature": 0.0, "avg_logprob": -0.2346450641591062, "compression_ratio": 1.7458333333333333, "no_speech_prob": 0.0050597479566931725}, {"id": 122, "seek": 59120, "start": 603.8000000000001, "end": 609.84, "text": " Frameworks so for mostly for Java framework builders that does allow a class like this", "tokens": [50994, 31628, 18357, 370, 337, 5240, 337, 10745, 8388, 36281, 300, 775, 2089, 257, 1508, 411, 341, 51296], "temperature": 0.0, "avg_logprob": -0.2346450641591062, "compression_ratio": 1.7458333333333333, "no_speech_prob": 0.0050597479566931725}, {"id": 123, "seek": 59120, "start": 609.84, "end": 615.1600000000001, "text": " Which has a private constructor and which don't have any setters which don't have any getters to still", "tokens": [51296, 3013, 575, 257, 4551, 47479, 293, 597, 500, 380, 362, 604, 992, 1559, 597, 500, 380, 362, 604, 483, 1559, 281, 920, 51562], "temperature": 0.0, "avg_logprob": -0.2346450641591062, "compression_ratio": 1.7458333333333333, "no_speech_prob": 0.0050597479566931725}, {"id": 124, "seek": 59120, "start": 616.0, "end": 620.44, "text": " implement that from outside the class using Java reflection", "tokens": [51604, 4445, 300, 490, 2380, 264, 1508, 1228, 10745, 12914, 51826], "temperature": 0.0, "avg_logprob": -0.2346450641591062, "compression_ratio": 1.7458333333333333, "no_speech_prob": 0.0050597479566931725}, {"id": 125, "seek": 62044, "start": 620.44, "end": 626.36, "text": " In fact, let me quickly pull out a more of a formal definition of what Java reflection is because I think", "tokens": [50364, 682, 1186, 11, 718, 385, 2661, 2235, 484, 257, 544, 295, 257, 9860, 7123, 295, 437, 10745, 12914, 307, 570, 286, 519, 50660], "temperature": 0.0, "avg_logprob": -0.25389619668324787, "compression_ratio": 1.5697211155378485, "no_speech_prob": 0.001081577385775745}, {"id": 126, "seek": 62044, "start": 626.5200000000001, "end": 629.96, "text": " It's important to know the concept at least so yes", "tokens": [50668, 467, 311, 1021, 281, 458, 264, 3410, 412, 1935, 370, 2086, 50840], "temperature": 0.0, "avg_logprob": -0.25389619668324787, "compression_ratio": 1.5697211155378485, "no_speech_prob": 0.001081577385775745}, {"id": 127, "seek": 62044, "start": 629.96, "end": 637.5600000000001, "text": " As I said, this is a definition from Oracle docs like more not really the Oracle doc. Sorry. It's more of a technical article", "tokens": [50840, 1018, 286, 848, 11, 341, 307, 257, 7123, 490, 25654, 45623, 411, 544, 406, 534, 264, 25654, 3211, 13, 4919, 13, 467, 311, 544, 295, 257, 6191, 7222, 51220], "temperature": 0.0, "avg_logprob": -0.25389619668324787, "compression_ratio": 1.5697211155378485, "no_speech_prob": 0.001081577385775745}, {"id": 128, "seek": 62044, "start": 638.1600000000001, "end": 643.0, "text": " Whoa written in 1998. That was a yeah after I was born", "tokens": [51250, 7521, 3720, 294, 21404, 13, 663, 390, 257, 1338, 934, 286, 390, 4232, 51492], "temperature": 0.0, "avg_logprob": -0.25389619668324787, "compression_ratio": 1.5697211155378485, "no_speech_prob": 0.001081577385775745}, {"id": 129, "seek": 62044, "start": 643.8800000000001, "end": 646.24, "text": " Reflection is a feature in the Java programming language", "tokens": [51536, 16957, 5450, 307, 257, 4111, 294, 264, 10745, 9410, 2856, 51654], "temperature": 0.0, "avg_logprob": -0.25389619668324787, "compression_ratio": 1.5697211155378485, "no_speech_prob": 0.001081577385775745}, {"id": 130, "seek": 64624, "start": 646.24, "end": 651.12, "text": " It allows an executing Java program to examine or", "tokens": [50364, 467, 4045, 364, 32368, 10745, 1461, 281, 17496, 420, 50608], "temperature": 0.0, "avg_logprob": -0.21915364265441895, "compression_ratio": 1.5868725868725868, "no_speech_prob": 0.033582620322704315}, {"id": 131, "seek": 64624, "start": 651.52, "end": 655.28, "text": " Interespect upon itself and manipulate internal properties of the program", "tokens": [50628, 5751, 279, 1043, 3564, 2564, 293, 20459, 6920, 7221, 295, 264, 1461, 50816], "temperature": 0.0, "avg_logprob": -0.21915364265441895, "compression_ratio": 1.5868725868725868, "no_speech_prob": 0.033582620322704315}, {"id": 132, "seek": 64624, "start": 656.0, "end": 662.12, "text": " For example, it's possible for a Java class to obtain the names of all its members and display them", "tokens": [50852, 1171, 1365, 11, 309, 311, 1944, 337, 257, 10745, 1508, 281, 12701, 264, 5288, 295, 439, 1080, 2679, 293, 4674, 552, 51158], "temperature": 0.0, "avg_logprob": -0.21915364265441895, "compression_ratio": 1.5868725868725868, "no_speech_prob": 0.033582620322704315}, {"id": 133, "seek": 64624, "start": 662.2, "end": 667.96, "text": " That's an important point here that introspection can be done runtime. So when the program is being executed", "tokens": [51162, 663, 311, 364, 1021, 935, 510, 300, 560, 2635, 19997, 393, 312, 1096, 34474, 13, 407, 562, 264, 1461, 307, 885, 17577, 51450], "temperature": 0.0, "avg_logprob": -0.21915364265441895, "compression_ratio": 1.5868725868725868, "no_speech_prob": 0.033582620322704315}, {"id": 134, "seek": 64624, "start": 668.44, "end": 669.88, "text": " but", "tokens": [51474, 457, 51546], "temperature": 0.0, "avg_logprob": -0.21915364265441895, "compression_ratio": 1.5868725868725868, "no_speech_prob": 0.033582620322704315}, {"id": 135, "seek": 64624, "start": 669.88, "end": 673.24, "text": " Better if you just watch this video. It's 22 minutes. Well worth your time", "tokens": [51546, 15753, 498, 291, 445, 1159, 341, 960, 13, 467, 311, 5853, 2077, 13, 1042, 3163, 428, 565, 51714], "temperature": 0.0, "avg_logprob": -0.21915364265441895, "compression_ratio": 1.5868725868725868, "no_speech_prob": 0.033582620322704315}, {"id": 136, "seek": 67324, "start": 673.24, "end": 678.36, "text": " So the second way Joshua block has delineated on creating or implementing singletons is", "tokens": [50364, 407, 264, 1150, 636, 24005, 3461, 575, 1103, 533, 770, 322, 4084, 420, 18114, 1522, 2631, 892, 307, 50620], "temperature": 0.0, "avg_logprob": -0.2164905205201567, "compression_ratio": 1.8038277511961722, "no_speech_prob": 0.007231732830405235}, {"id": 137, "seek": 67324, "start": 679.0, "end": 680.8, "text": " Using a static factory method", "tokens": [50652, 11142, 257, 13437, 9265, 3170, 50742], "temperature": 0.0, "avg_logprob": -0.2164905205201567, "compression_ratio": 1.8038277511961722, "no_speech_prob": 0.007231732830405235}, {"id": 138, "seek": 67324, "start": 680.8, "end": 685.5600000000001, "text": " Now if you don't know what that is and don't know the benefits of using a static factory method", "tokens": [50742, 823, 498, 291, 500, 380, 458, 437, 300, 307, 293, 500, 380, 458, 264, 5311, 295, 1228, 257, 13437, 9265, 3170, 50980], "temperature": 0.0, "avg_logprob": -0.2164905205201567, "compression_ratio": 1.8038277511961722, "no_speech_prob": 0.007231732830405235}, {"id": 139, "seek": 67324, "start": 685.5600000000001, "end": 688.48, "text": " I would link you to the first video in the series", "tokens": [50980, 286, 576, 2113, 291, 281, 264, 700, 960, 294, 264, 2638, 51126], "temperature": 0.0, "avg_logprob": -0.2164905205201567, "compression_ratio": 1.8038277511961722, "no_speech_prob": 0.007231732830405235}, {"id": 140, "seek": 67324, "start": 688.52, "end": 697.44, "text": " Which is item one that talks about the pros or the virtues of using the static factory method and item one states", "tokens": [51128, 3013, 307, 3174, 472, 300, 6686, 466, 264, 6267, 420, 264, 41106, 295, 1228, 264, 13437, 9265, 3170, 293, 3174, 472, 4368, 51574], "temperature": 0.0, "avg_logprob": -0.2164905205201567, "compression_ratio": 1.8038277511961722, "no_speech_prob": 0.007231732830405235}, {"id": 141, "seek": 69744, "start": 697.5600000000001, "end": 703.84, "text": " Consider static factory methods instead of constructors, but for all intents and purposes within our topic", "tokens": [50370, 17416, 13437, 9265, 7150, 2602, 295, 7690, 830, 11, 457, 337, 439, 560, 791, 293, 9932, 1951, 527, 4829, 50684], "temperature": 0.0, "avg_logprob": -0.19236333654561175, "compression_ratio": 1.7153024911032029, "no_speech_prob": 0.032095879316329956}, {"id": 142, "seek": 69744, "start": 704.0, "end": 710.0, "text": " Really, it does the same thing. So if you take this example, which again is another class called Elvis Elvis", "tokens": [50692, 4083, 11, 309, 775, 264, 912, 551, 13, 407, 498, 291, 747, 341, 1365, 11, 597, 797, 307, 1071, 1508, 1219, 39944, 39944, 50992], "temperature": 0.0, "avg_logprob": -0.19236333654561175, "compression_ratio": 1.7153024911032029, "no_speech_prob": 0.032095879316329956}, {"id": 143, "seek": 69744, "start": 711.0400000000001, "end": 713.8800000000001, "text": " Why isn't it opening up? There we go. So yes, same concept", "tokens": [51044, 1545, 1943, 380, 309, 5193, 493, 30, 821, 321, 352, 13, 407, 2086, 11, 912, 3410, 51186], "temperature": 0.0, "avg_logprob": -0.19236333654561175, "compression_ratio": 1.7153024911032029, "no_speech_prob": 0.032095879316329956}, {"id": 144, "seek": 69744, "start": 713.8800000000001, "end": 715.8800000000001, "text": " the the constructor is so private and", "tokens": [51186, 264, 264, 47479, 307, 370, 4551, 293, 51286], "temperature": 0.0, "avg_logprob": -0.19236333654561175, "compression_ratio": 1.7153024911032029, "no_speech_prob": 0.032095879316329956}, {"id": 145, "seek": 69744, "start": 716.0, "end": 720.96, "text": " We only have one object being created here within the class and instead of the client", "tokens": [51292, 492, 787, 362, 472, 2657, 885, 2942, 510, 1951, 264, 1508, 293, 2602, 295, 264, 6423, 51540], "temperature": 0.0, "avg_logprob": -0.19236333654561175, "compression_ratio": 1.7153024911032029, "no_speech_prob": 0.032095879316329956}, {"id": 146, "seek": 69744, "start": 721.1600000000001, "end": 725.48, "text": " Directly accessing the member variable that member variable is private in this case", "tokens": [51550, 18308, 356, 26440, 264, 4006, 7006, 300, 4006, 7006, 307, 4551, 294, 341, 1389, 51766], "temperature": 0.0, "avg_logprob": -0.19236333654561175, "compression_ratio": 1.7153024911032029, "no_speech_prob": 0.032095879316329956}, {"id": 147, "seek": 72548, "start": 725.48, "end": 729.36, "text": " And we rather get it through the static factory method. Oh", "tokens": [50364, 400, 321, 2831, 483, 309, 807, 264, 13437, 9265, 3170, 13, 876, 50558], "temperature": 0.0, "avg_logprob": -0.18636336981081494, "compression_ratio": 1.6431226765799256, "no_speech_prob": 0.003706892253831029}, {"id": 148, "seek": 72548, "start": 730.04, "end": 734.28, "text": " This bit here the read resolve will get to that soon for now", "tokens": [50592, 639, 857, 510, 264, 1401, 14151, 486, 483, 281, 300, 2321, 337, 586, 50804], "temperature": 0.0, "avg_logprob": -0.18636336981081494, "compression_ratio": 1.6431226765799256, "no_speech_prob": 0.003706892253831029}, {"id": 149, "seek": 72548, "start": 734.28, "end": 738.12, "text": " Just ignore line number 15 and clearly as he states here", "tokens": [50804, 1449, 11200, 1622, 1230, 2119, 293, 4448, 382, 415, 4368, 510, 50996], "temperature": 0.0, "avg_logprob": -0.18636336981081494, "compression_ratio": 1.6431226765799256, "no_speech_prob": 0.003706892253831029}, {"id": 150, "seek": 72548, "start": 738.12, "end": 744.4, "text": " You can see in the code itself one advantage of the static factory approach is that it gives you the flexibility to change your mind", "tokens": [50996, 509, 393, 536, 294, 264, 3089, 2564, 472, 5002, 295, 264, 13437, 9265, 3109, 307, 300, 309, 2709, 291, 264, 12635, 281, 1319, 428, 1575, 51310], "temperature": 0.0, "avg_logprob": -0.18636336981081494, "compression_ratio": 1.6431226765799256, "no_speech_prob": 0.003706892253831029}, {"id": 151, "seek": 72548, "start": 744.4, "end": 748.2, "text": " About whether the class is a singleton without changing its API", "tokens": [51310, 7769, 1968, 264, 1508, 307, 257, 1522, 14806, 1553, 4473, 1080, 9362, 51500], "temperature": 0.0, "avg_logprob": -0.18636336981081494, "compression_ratio": 1.6431226765799256, "no_speech_prob": 0.003706892253831029}, {"id": 152, "seek": 72548, "start": 748.44, "end": 752.88, "text": " So what he means by that is if you look at the public field approach", "tokens": [51512, 407, 437, 415, 1355, 538, 300, 307, 498, 291, 574, 412, 264, 1908, 2519, 3109, 51734], "temperature": 0.0, "avg_logprob": -0.18636336981081494, "compression_ratio": 1.6431226765799256, "no_speech_prob": 0.003706892253831029}, {"id": 153, "seek": 75288, "start": 753.68, "end": 760.76, "text": " Since we're directly accessing that singleton via the the public member variable", "tokens": [50404, 4162, 321, 434, 3838, 26440, 300, 1522, 14806, 5766, 264, 264, 1908, 4006, 7006, 50758], "temperature": 0.0, "avg_logprob": -0.2246590401362447, "compression_ratio": 1.7341269841269842, "no_speech_prob": 0.0021156042348593473}, {"id": 154, "seek": 75288, "start": 761.6, "end": 765.64, "text": " It doesn't really give us a flexibility if we do want to not have a singleton", "tokens": [50800, 467, 1177, 380, 534, 976, 505, 257, 12635, 498, 321, 360, 528, 281, 406, 362, 257, 1522, 14806, 51002], "temperature": 0.0, "avg_logprob": -0.2246590401362447, "compression_ratio": 1.7341269841269842, "no_speech_prob": 0.0021156042348593473}, {"id": 155, "seek": 75288, "start": 765.64, "end": 770.12, "text": " Let's say if we don't want to fill a singleton single to impact and I should probably add this here", "tokens": [51002, 961, 311, 584, 498, 321, 500, 380, 528, 281, 2836, 257, 1522, 14806, 2167, 281, 2712, 293, 286, 820, 1391, 909, 341, 510, 51226], "temperature": 0.0, "avg_logprob": -0.2246590401362447, "compression_ratio": 1.7341269841269842, "no_speech_prob": 0.0021156042348593473}, {"id": 156, "seek": 75288, "start": 770.12, "end": 772.4, "text": " He also states in the previous paragraph", "tokens": [51226, 634, 611, 4368, 294, 264, 3894, 18865, 51340], "temperature": 0.0, "avg_logprob": -0.2246590401362447, "compression_ratio": 1.7341269841269842, "no_speech_prob": 0.0021156042348593473}, {"id": 157, "seek": 75288, "start": 772.4, "end": 778.34, "text": " I should have read that before the main advantage of the public field approach is that the API makes it clear", "tokens": [51340, 286, 820, 362, 1401, 300, 949, 264, 2135, 5002, 295, 264, 1908, 2519, 3109, 307, 300, 264, 9362, 1669, 309, 1850, 51637], "temperature": 0.0, "avg_logprob": -0.2246590401362447, "compression_ratio": 1.7341269841269842, "no_speech_prob": 0.0021156042348593473}, {"id": 158, "seek": 75288, "start": 778.68, "end": 780.68, "text": " That the class is singleton", "tokens": [51654, 663, 264, 1508, 307, 1522, 14806, 51754], "temperature": 0.0, "avg_logprob": -0.2246590401362447, "compression_ratio": 1.7341269841269842, "no_speech_prob": 0.0021156042348593473}, {"id": 159, "seek": 78068, "start": 781.28, "end": 789.0799999999999, "text": " The public static field is final so it'll always contain the same object reference, which what do you mean there is from a client perspective?", "tokens": [50394, 440, 1908, 13437, 2519, 307, 2572, 370, 309, 603, 1009, 5304, 264, 912, 2657, 6408, 11, 597, 437, 360, 291, 914, 456, 307, 490, 257, 6423, 4585, 30, 50784], "temperature": 0.0, "avg_logprob": -0.2706595278800802, "compression_ratio": 1.639676113360324, "no_speech_prob": 0.0012842601863667369}, {"id": 160, "seek": 78068, "start": 790.04, "end": 793.2399999999999, "text": " I've used an inline variable here by the way the the", "tokens": [50832, 286, 600, 1143, 364, 294, 1889, 7006, 510, 538, 264, 636, 264, 264, 50992], "temperature": 0.0, "avg_logprob": -0.2706595278800802, "compression_ratio": 1.639676113360324, "no_speech_prob": 0.0012842601863667369}, {"id": 161, "seek": 78068, "start": 794.04, "end": 797.52, "text": " It's it says here Elvis and we're getting that single instance", "tokens": [51032, 467, 311, 309, 1619, 510, 39944, 293, 321, 434, 1242, 300, 2167, 5197, 51206], "temperature": 0.0, "avg_logprob": -0.2706595278800802, "compression_ratio": 1.639676113360324, "no_speech_prob": 0.0012842601863667369}, {"id": 162, "seek": 78068, "start": 797.7199999999999, "end": 799.8, "text": " Now it's a similar thing we're doing here", "tokens": [51216, 823, 309, 311, 257, 2531, 551, 321, 434, 884, 510, 51320], "temperature": 0.0, "avg_logprob": -0.2706595278800802, "compression_ratio": 1.639676113360324, "no_speech_prob": 0.0012842601863667369}, {"id": 163, "seek": 78068, "start": 799.8, "end": 805.4399999999999, "text": " The only difference with the static factor method is we're accessing it through this method get instance", "tokens": [51320, 440, 787, 2649, 365, 264, 13437, 5952, 3170, 307, 321, 434, 26440, 309, 807, 341, 3170, 483, 5197, 51602], "temperature": 0.0, "avg_logprob": -0.2706595278800802, "compression_ratio": 1.639676113360324, "no_speech_prob": 0.0012842601863667369}, {"id": 164, "seek": 80544, "start": 805.6400000000001, "end": 811.4000000000001, "text": " Now because it's a method we can play around with it and do what we want so to speak", "tokens": [50374, 823, 570, 309, 311, 257, 3170, 321, 393, 862, 926, 365, 309, 293, 360, 437, 321, 528, 370, 281, 1710, 50662], "temperature": 0.0, "avg_logprob": -0.2452144982679835, "compression_ratio": 1.6360424028268552, "no_speech_prob": 0.008984863758087158}, {"id": 165, "seek": 80544, "start": 811.4000000000001, "end": 815.36, "text": " Which is why Joshua block states it gives you the flexibility to change your mind", "tokens": [50662, 3013, 307, 983, 24005, 3461, 4368, 309, 2709, 291, 264, 12635, 281, 1319, 428, 1575, 50860], "temperature": 0.0, "avg_logprob": -0.2452144982679835, "compression_ratio": 1.6360424028268552, "no_speech_prob": 0.008984863758087158}, {"id": 166, "seek": 80544, "start": 816.08, "end": 819.7600000000001, "text": " About whether the class is a singleton without changing its API", "tokens": [50896, 7769, 1968, 264, 1508, 307, 257, 1522, 14806, 1553, 4473, 1080, 9362, 51080], "temperature": 0.0, "avg_logprob": -0.2452144982679835, "compression_ratio": 1.6360424028268552, "no_speech_prob": 0.008984863758087158}, {"id": 167, "seek": 80544, "start": 819.84, "end": 823.6400000000001, "text": " We don't really change anything in this method. What matters is how we handle", "tokens": [51084, 492, 500, 380, 534, 1319, 1340, 294, 341, 3170, 13, 708, 7001, 307, 577, 321, 4813, 51274], "temperature": 0.0, "avg_logprob": -0.2452144982679835, "compression_ratio": 1.6360424028268552, "no_speech_prob": 0.008984863758087158}, {"id": 168, "seek": 80544, "start": 823.9200000000001, "end": 831.2, "text": " This object or what we do inside it from a again from a class clients perspective an example Joshua block has used is something to do with multi-threading", "tokens": [51288, 639, 2657, 420, 437, 321, 360, 1854, 309, 490, 257, 797, 490, 257, 1508, 6982, 4585, 364, 1365, 24005, 3461, 575, 1143, 307, 746, 281, 360, 365, 4825, 12, 392, 35908, 51652], "temperature": 0.0, "avg_logprob": -0.2452144982679835, "compression_ratio": 1.6360424028268552, "no_speech_prob": 0.008984863758087158}, {"id": 169, "seek": 83120, "start": 831.6400000000001, "end": 836.9200000000001, "text": " In a multi-thread environment the factory method returns a sole instance", "tokens": [50386, 682, 257, 4825, 12, 392, 2538, 2823, 264, 9265, 3170, 11247, 257, 12321, 5197, 50650], "temperature": 0.0, "avg_logprob": -0.18923638824723724, "compression_ratio": 1.74822695035461, "no_speech_prob": 0.020020591095089912}, {"id": 170, "seek": 83120, "start": 837.0, "end": 843.6800000000001, "text": " But it could be modified to return say a separate instance for each thread that invokes it that makes sense", "tokens": [50654, 583, 309, 727, 312, 15873, 281, 2736, 584, 257, 4994, 5197, 337, 1184, 7207, 300, 1048, 8606, 309, 300, 1669, 2020, 50988], "temperature": 0.0, "avg_logprob": -0.18923638824723724, "compression_ratio": 1.74822695035461, "no_speech_prob": 0.020020591095089912}, {"id": 171, "seek": 83120, "start": 843.6800000000001, "end": 849.2800000000001, "text": " We don't want there to be problems with multi-threading by having a single object that all the threads share", "tokens": [50988, 492, 500, 380, 528, 456, 281, 312, 2740, 365, 4825, 12, 392, 35908, 538, 1419, 257, 2167, 2657, 300, 439, 264, 19314, 2073, 51268], "temperature": 0.0, "avg_logprob": -0.18923638824723724, "compression_ratio": 1.74822695035461, "no_speech_prob": 0.020020591095089912}, {"id": 172, "seek": 83120, "start": 849.2800000000001, "end": 851.5200000000001, "text": " Let's that could probably corrupt the state of that object", "tokens": [51268, 961, 311, 300, 727, 1391, 17366, 264, 1785, 295, 300, 2657, 51380], "temperature": 0.0, "avg_logprob": -0.18923638824723724, "compression_ratio": 1.74822695035461, "no_speech_prob": 0.020020591095089912}, {"id": 173, "seek": 83120, "start": 851.5200000000001, "end": 854.6400000000001, "text": " I don't know just to you know thinking out loud here now", "tokens": [51380, 286, 500, 380, 458, 445, 281, 291, 458, 1953, 484, 6588, 510, 586, 51536], "temperature": 0.0, "avg_logprob": -0.18923638824723724, "compression_ratio": 1.74822695035461, "no_speech_prob": 0.020020591095089912}, {"id": 174, "seek": 83120, "start": 854.6400000000001, "end": 858.6800000000001, "text": " We sort of come to a bit of an ancillary point, but I think is nevertheless important a", "tokens": [51536, 492, 1333, 295, 808, 281, 257, 857, 295, 364, 364, 7383, 822, 935, 11, 457, 286, 519, 307, 26924, 1021, 257, 51738], "temperature": 0.0, "avg_logprob": -0.18923638824723724, "compression_ratio": 1.74822695035461, "no_speech_prob": 0.020020591095089912}, {"id": 175, "seek": 85868, "start": 859.1999999999999, "end": 865.76, "text": " Second advantage is that you can write a generic singleton factory if your application requires it", "tokens": [50390, 5736, 5002, 307, 300, 291, 393, 2464, 257, 19577, 1522, 14806, 9265, 498, 428, 3861, 7029, 309, 50718], "temperature": 0.0, "avg_logprob": -0.26397279592660755, "compression_ratio": 1.5872340425531914, "no_speech_prob": 0.0026727444492280483}, {"id": 176, "seek": 85868, "start": 866.4399999999999, "end": 873.2399999999999, "text": " So what is a generic singleton factory? Let's try and make sense of it. Firstly as per usual", "tokens": [50752, 407, 437, 307, 257, 19577, 1522, 14806, 9265, 30, 961, 311, 853, 293, 652, 2020, 295, 309, 13, 20042, 382, 680, 7713, 51092], "temperature": 0.0, "avg_logprob": -0.26397279592660755, "compression_ratio": 1.5872340425531914, "no_speech_prob": 0.0026727444492280483}, {"id": 177, "seek": 85868, "start": 873.76, "end": 875.76, "text": " I will leave", "tokens": [51118, 286, 486, 1856, 51218], "temperature": 0.0, "avg_logprob": -0.26397279592660755, "compression_ratio": 1.5872340425531914, "no_speech_prob": 0.0026727444492280483}, {"id": 178, "seek": 85868, "start": 875.76, "end": 876.68, "text": " two", "tokens": [51218, 732, 51264], "temperature": 0.0, "avg_logprob": -0.26397279592660755, "compression_ratio": 1.5872340425531914, "no_speech_prob": 0.0026727444492280483}, {"id": 179, "seek": 85868, "start": 876.68, "end": 877.5999999999999, "text": " two", "tokens": [51264, 732, 51310], "temperature": 0.0, "avg_logprob": -0.26397279592660755, "compression_ratio": 1.5872340425531914, "no_speech_prob": 0.0026727444492280483}, {"id": 180, "seek": 85868, "start": 877.5999999999999, "end": 883.0799999999999, "text": " Links to two different well one stucco flow answer and then a blog post", "tokens": [51310, 37156, 281, 732, 819, 731, 472, 342, 1311, 1291, 3095, 1867, 293, 550, 257, 6968, 2183, 51584], "temperature": 0.0, "avg_logprob": -0.26397279592660755, "compression_ratio": 1.5872340425531914, "no_speech_prob": 0.0026727444492280483}, {"id": 181, "seek": 85868, "start": 883.8, "end": 888.3199999999999, "text": " Regarding this concept of type erasure, which is what allows generic programming in Java", "tokens": [51620, 35523, 341, 3410, 295, 2010, 1189, 2508, 11, 597, 307, 437, 4045, 19577, 9410, 294, 10745, 51846], "temperature": 0.0, "avg_logprob": -0.26397279592660755, "compression_ratio": 1.5872340425531914, "no_speech_prob": 0.0026727444492280483}, {"id": 182, "seek": 88868, "start": 889.1999999999999, "end": 890.3199999999999, "text": " and", "tokens": [50390, 293, 50446], "temperature": 0.0, "avg_logprob": -0.21775948880898832, "compression_ratio": 1.6068702290076335, "no_speech_prob": 0.0024340925738215446}, {"id": 183, "seek": 88868, "start": 890.3199999999999, "end": 895.3599999999999, "text": " How it happens and why it's it's necessary for generic programming", "tokens": [50446, 1012, 309, 2314, 293, 983, 309, 311, 309, 311, 4818, 337, 19577, 9410, 50698], "temperature": 0.0, "avg_logprob": -0.21775948880898832, "compression_ratio": 1.6068702290076335, "no_speech_prob": 0.0024340925738215446}, {"id": 184, "seek": 88868, "start": 895.4, "end": 900.7199999999999, "text": " But it's not really within the scope of what we're discussing here. It's still important to understand though", "tokens": [50700, 583, 309, 311, 406, 534, 1951, 264, 11923, 295, 437, 321, 434, 10850, 510, 13, 467, 311, 920, 1021, 281, 1223, 1673, 50966], "temperature": 0.0, "avg_logprob": -0.21775948880898832, "compression_ratio": 1.6068702290076335, "no_speech_prob": 0.0024340925738215446}, {"id": 185, "seek": 88868, "start": 900.7199999999999, "end": 905.76, "text": " So what's a generic singleton factory first of all out? I should say we'll be covering this in", "tokens": [50966, 407, 437, 311, 257, 19577, 1522, 14806, 9265, 700, 295, 439, 484, 30, 286, 820, 584, 321, 603, 312, 10322, 341, 294, 51218], "temperature": 0.0, "avg_logprob": -0.21775948880898832, "compression_ratio": 1.6068702290076335, "no_speech_prob": 0.0024340925738215446}, {"id": 186, "seek": 88868, "start": 906.68, "end": 910.64, "text": " item 30 of this book so probably next year", "tokens": [51264, 3174, 2217, 295, 341, 1446, 370, 1391, 958, 1064, 51462], "temperature": 0.0, "avg_logprob": -0.21775948880898832, "compression_ratio": 1.6068702290076335, "no_speech_prob": 0.0024340925738215446}, {"id": 187, "seek": 88868, "start": 911.4799999999999, "end": 917.0799999999999, "text": " Therefore we shall go into more detail in that video and item 30 simply states favorite generic method", "tokens": [51504, 7504, 321, 4393, 352, 666, 544, 2607, 294, 300, 960, 293, 3174, 2217, 2935, 4368, 2954, 19577, 3170, 51784], "temperature": 0.0, "avg_logprob": -0.21775948880898832, "compression_ratio": 1.6068702290076335, "no_speech_prob": 0.0024340925738215446}, {"id": 188, "seek": 91708, "start": 917.08, "end": 919.08, "text": " But I propose to", "tokens": [50364, 583, 286, 17421, 281, 50464], "temperature": 0.0, "avg_logprob": -0.28496847047910584, "compression_ratio": 1.7762557077625571, "no_speech_prob": 0.000767267367336899}, {"id": 189, "seek": 91708, "start": 919.12, "end": 921.36, "text": " Generic singleton factory in that item", "tokens": [50466, 15409, 299, 1522, 14806, 9265, 294, 300, 3174, 50578], "temperature": 0.0, "avg_logprob": -0.28496847047910584, "compression_ratio": 1.7762557077625571, "no_speech_prob": 0.000767267367336899}, {"id": 190, "seek": 91708, "start": 921.88, "end": 928.1600000000001, "text": " Joshua block states because generics are implemented by ratio. So that's what I meant by this type erasure bit", "tokens": [50604, 24005, 3461, 4368, 570, 1337, 1167, 366, 12270, 538, 8509, 13, 407, 300, 311, 437, 286, 4140, 538, 341, 2010, 1189, 2508, 857, 50918], "temperature": 0.0, "avg_logprob": -0.28496847047910584, "compression_ratio": 1.7762557077625571, "no_speech_prob": 0.000767267367336899}, {"id": 191, "seek": 91708, "start": 928.32, "end": 935.48, "text": " Please go read up on that blog post article blog post article on that blog post as it'll really expand on the matter", "tokens": [50926, 2555, 352, 1401, 493, 322, 300, 6968, 2183, 7222, 6968, 2183, 7222, 322, 300, 6968, 2183, 382, 309, 603, 534, 5268, 322, 264, 1871, 51284], "temperature": 0.0, "avg_logprob": -0.28496847047910584, "compression_ratio": 1.7762557077625571, "no_speech_prob": 0.000767267367336899}, {"id": 192, "seek": 91708, "start": 936.64, "end": 942.5200000000001, "text": " Because generics implemented by ratio you can use a single object for all required type", "tokens": [51342, 1436, 1337, 1167, 12270, 538, 8509, 291, 393, 764, 257, 2167, 2657, 337, 439, 4739, 2010, 51636], "temperature": 0.0, "avg_logprob": -0.28496847047910584, "compression_ratio": 1.7762557077625571, "no_speech_prob": 0.000767267367336899}, {"id": 193, "seek": 91708, "start": 943.5600000000001, "end": 944.6, "text": " parameterizations", "tokens": [51688, 13075, 14455, 51740], "temperature": 0.0, "avg_logprob": -0.28496847047910584, "compression_ratio": 1.7762557077625571, "no_speech_prob": 0.000767267367336899}, {"id": 194, "seek": 94460, "start": 944.6, "end": 951.44, "text": " But you need to write a static factory method to repeatedly dole out the object for each requested type parameterization", "tokens": [50364, 583, 291, 643, 281, 2464, 257, 13437, 9265, 3170, 281, 18227, 360, 306, 484, 264, 2657, 337, 1184, 16436, 2010, 13075, 2144, 50706], "temperature": 0.0, "avg_logprob": -0.19871507727581522, "compression_ratio": 1.755639097744361, "no_speech_prob": 0.0018385041039437056}, {"id": 195, "seek": 94460, "start": 951.44, "end": 955.84, "text": " This is a very cool concept once you see in an action which I shall which I shall show", "tokens": [50706, 639, 307, 257, 588, 1627, 3410, 1564, 291, 536, 294, 364, 3069, 597, 286, 4393, 597, 286, 4393, 855, 50926], "temperature": 0.0, "avg_logprob": -0.19871507727581522, "compression_ratio": 1.755639097744361, "no_speech_prob": 0.0018385041039437056}, {"id": 196, "seek": 94460, "start": 956.12, "end": 960.9200000000001, "text": " It's a bit of tongue twister which I shall show in a bit because it is it is pretty cool", "tokens": [50940, 467, 311, 257, 857, 295, 10601, 683, 1964, 597, 286, 4393, 855, 294, 257, 857, 570, 309, 307, 309, 307, 1238, 1627, 51180], "temperature": 0.0, "avg_logprob": -0.19871507727581522, "compression_ratio": 1.755639097744361, "no_speech_prob": 0.0018385041039437056}, {"id": 197, "seek": 94460, "start": 960.9200000000001, "end": 966.5600000000001, "text": " How it all comes together so kind of definition that I came up with for what a generic singleton factory is", "tokens": [51180, 1012, 309, 439, 1487, 1214, 370, 733, 295, 7123, 300, 286, 1361, 493, 365, 337, 437, 257, 19577, 1522, 14806, 9265, 307, 51462], "temperature": 0.0, "avg_logprob": -0.19871507727581522, "compression_ratio": 1.755639097744361, "no_speech_prob": 0.0018385041039437056}, {"id": 198, "seek": 94460, "start": 966.5600000000001, "end": 968.32, "text": " It allows to create multiple singletons", "tokens": [51462, 467, 4045, 281, 1884, 3866, 1522, 2631, 892, 51550], "temperature": 0.0, "avg_logprob": -0.19871507727581522, "compression_ratio": 1.755639097744361, "no_speech_prob": 0.0018385041039437056}, {"id": 199, "seek": 94460, "start": 968.32, "end": 970.36, "text": " That is not a oxymoron", "tokens": [51550, 663, 307, 406, 257, 5976, 4199, 284, 266, 51652], "temperature": 0.0, "avg_logprob": -0.19871507727581522, "compression_ratio": 1.755639097744361, "no_speech_prob": 0.0018385041039437056}, {"id": 200, "seek": 97036, "start": 970.36, "end": 976.2, "text": " You will see you will see why that is in a bit that behave the same way. So it's kind of got like a same", "tokens": [50364, 509, 486, 536, 291, 486, 536, 983, 300, 307, 294, 257, 857, 300, 15158, 264, 912, 636, 13, 407, 309, 311, 733, 295, 658, 411, 257, 912, 50656], "temperature": 0.0, "avg_logprob": -0.24594025862844368, "compression_ratio": 1.6050420168067228, "no_speech_prob": 0.011685946956276894}, {"id": 201, "seek": 97036, "start": 977.6, "end": 985.4, "text": " Supertype which man is how it behaves using generics allows to use a single object for type parameterizations", "tokens": [50726, 4548, 20467, 597, 587, 307, 577, 309, 36896, 1228, 1337, 1167, 4045, 281, 764, 257, 2167, 2657, 337, 2010, 13075, 14455, 51116], "temperature": 0.0, "avg_logprob": -0.24594025862844368, "compression_ratio": 1.6050420168067228, "no_speech_prob": 0.011685946956276894}, {"id": 202, "seek": 97036, "start": 985.4, "end": 987.4, "text": " I'm kind of repeating where Joshua block state", "tokens": [51116, 286, 478, 733, 295, 18617, 689, 24005, 3461, 1785, 51216], "temperature": 0.0, "avg_logprob": -0.24594025862844368, "compression_ratio": 1.6050420168067228, "no_speech_prob": 0.011685946956276894}, {"id": 203, "seek": 97036, "start": 987.52, "end": 994.04, "text": " Stay stated and casting is not required that too you shall see so I've got the example here", "tokens": [51222, 8691, 11323, 293, 17301, 307, 406, 4739, 300, 886, 291, 4393, 536, 370, 286, 600, 658, 264, 1365, 510, 51548], "temperature": 0.0, "avg_logprob": -0.24594025862844368, "compression_ratio": 1.6050420168067228, "no_speech_prob": 0.011685946956276894}, {"id": 204, "seek": 97036, "start": 994.04, "end": 996.04, "text": " This too I took from item 30", "tokens": [51548, 639, 886, 286, 1890, 490, 3174, 2217, 51648], "temperature": 0.0, "avg_logprob": -0.24594025862844368, "compression_ratio": 1.6050420168067228, "no_speech_prob": 0.011685946956276894}, {"id": 205, "seek": 99604, "start": 996.64, "end": 1002.64, "text": " But I just realized that before I do go through the example and explore the code. I didn't mention", "tokens": [50394, 583, 286, 445, 5334, 300, 949, 286, 360, 352, 807, 264, 1365, 293, 6839, 264, 3089, 13, 286, 994, 380, 2152, 50694], "temperature": 0.0, "avg_logprob": -0.31959121227264403, "compression_ratio": 1.5544554455445545, "no_speech_prob": 0.010327158495783806}, {"id": 206, "seek": 99604, "start": 1003.64, "end": 1009.0799999999999, "text": " those two the Stack Overflow answer and then this blog post, but I didn't really", "tokens": [50744, 729, 732, 264, 37649, 4886, 10565, 1867, 293, 550, 341, 6968, 2183, 11, 457, 286, 994, 380, 534, 51016], "temperature": 0.0, "avg_logprob": -0.31959121227264403, "compression_ratio": 1.5544554455445545, "no_speech_prob": 0.010327158495783806}, {"id": 207, "seek": 99604, "start": 1009.8399999999999, "end": 1011.7199999999999, "text": " even", "tokens": [51054, 754, 51148], "temperature": 0.0, "avg_logprob": -0.31959121227264403, "compression_ratio": 1.5544554455445545, "no_speech_prob": 0.010327158495783806}, {"id": 208, "seek": 99604, "start": 1011.7199999999999, "end": 1015.8399999999999, "text": " expand on what what it is or what what they are", "tokens": [51148, 5268, 322, 437, 437, 309, 307, 420, 437, 437, 436, 366, 51354], "temperature": 0.0, "avg_logprob": -0.31959121227264403, "compression_ratio": 1.5544554455445545, "no_speech_prob": 0.010327158495783806}, {"id": 209, "seek": 99604, "start": 1016.76, "end": 1021.92, "text": " So I want to read out a bit of bit of like introduction in this article regarding", "tokens": [51400, 407, 286, 528, 281, 1401, 484, 257, 857, 295, 857, 295, 411, 9339, 294, 341, 7222, 8595, 51658], "temperature": 0.0, "avg_logprob": -0.31959121227264403, "compression_ratio": 1.5544554455445545, "no_speech_prob": 0.010327158495783806}, {"id": 210, "seek": 102192, "start": 1022.04, "end": 1029.28, "text": " Type erasure because type erasure is what allows firstly the the the generic singleton pattern, but also using", "tokens": [50370, 15576, 1189, 2508, 570, 2010, 1189, 2508, 307, 437, 4045, 27376, 264, 264, 264, 19577, 1522, 14806, 5102, 11, 457, 611, 1228, 50732], "temperature": 0.0, "avg_logprob": -0.37291822762324894, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.011331192217767239}, {"id": 211, "seek": 102192, "start": 1030.12, "end": 1031.6399999999999, "text": " generic programming", "tokens": [50774, 19577, 9410, 50850], "temperature": 0.0, "avg_logprob": -0.37291822762324894, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.011331192217767239}, {"id": 212, "seek": 102192, "start": 1031.6399999999999, "end": 1033.2, "text": " in Java", "tokens": [50850, 294, 10745, 50928], "temperature": 0.0, "avg_logprob": -0.37291822762324894, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.011331192217767239}, {"id": 213, "seek": 102192, "start": 1033.2, "end": 1034.3999999999999, "text": " generally", "tokens": [50928, 5101, 50988], "temperature": 0.0, "avg_logprob": -0.37291822762324894, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.011331192217767239}, {"id": 214, "seek": 102192, "start": 1034.3999999999999, "end": 1037.36, "text": " Generic programming in Java generally gosh, that's funny", "tokens": [50988, 15409, 299, 9410, 294, 10745, 5101, 6502, 11, 300, 311, 4074, 51136], "temperature": 0.0, "avg_logprob": -0.37291822762324894, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.011331192217767239}, {"id": 215, "seek": 102192, "start": 1038.2, "end": 1042.36, "text": " So what does this person say? By the way, this article was written by", "tokens": [51178, 407, 437, 775, 341, 954, 584, 30, 3146, 264, 636, 11, 341, 7222, 390, 3720, 538, 51386], "temperature": 0.0, "avg_logprob": -0.37291822762324894, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.011331192217767239}, {"id": 216, "seek": 102192, "start": 1043.0, "end": 1045.92, "text": " Bishal Kumar Dube. So what is Bishal's state here?", "tokens": [51418, 363, 742, 304, 46500, 413, 1977, 13, 407, 437, 307, 363, 742, 304, 311, 1785, 510, 30, 51564], "temperature": 0.0, "avg_logprob": -0.37291822762324894, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.011331192217767239}, {"id": 217, "seek": 104592, "start": 1046.0, "end": 1052.4, "text": " Generics concept is introduced in Java language to provide", "tokens": [50368, 15409, 1167, 3410, 307, 7268, 294, 10745, 2856, 281, 2893, 50688], "temperature": 0.0, "avg_logprob": -0.3077545166015625, "compression_ratio": 1.6443298969072164, "no_speech_prob": 0.00475458987057209}, {"id": 218, "seek": 104592, "start": 1052.8000000000002, "end": 1059.16, "text": " Tider type checks at compile time and to support generic programming as I said the way to implement generics", "tokens": [50708, 314, 1438, 2010, 13834, 412, 31413, 565, 293, 281, 1406, 19577, 9410, 382, 286, 848, 264, 636, 281, 4445, 1337, 1167, 51026], "temperature": 0.0, "avg_logprob": -0.3077545166015625, "compression_ratio": 1.6443298969072164, "no_speech_prob": 0.00475458987057209}, {"id": 219, "seek": 104592, "start": 1059.16, "end": 1061.96, "text": " The Java compiler applies type erasure", "tokens": [51026, 440, 10745, 31958, 13165, 2010, 1189, 2508, 51166], "temperature": 0.0, "avg_logprob": -0.3077545166015625, "compression_ratio": 1.6443298969072164, "no_speech_prob": 0.00475458987057209}, {"id": 220, "seek": 104592, "start": 1062.52, "end": 1070.24, "text": " To replace all type parameters in generic types with their bounds or object if the type parameters are unbounded", "tokens": [51194, 1407, 7406, 439, 2010, 9834, 294, 19577, 3467, 365, 641, 29905, 420, 2657, 498, 264, 2010, 9834, 366, 517, 18767, 292, 51580], "temperature": 0.0, "avg_logprob": -0.3077545166015625, "compression_ratio": 1.6443298969072164, "no_speech_prob": 0.00475458987057209}, {"id": 221, "seek": 107024, "start": 1070.56, "end": 1077.28, "text": " The produce bytecode we shall go into the bytecode bit to therefore contains only ordinary classes interfaces and methods", "tokens": [50380, 440, 5258, 40846, 22332, 321, 4393, 352, 666, 264, 40846, 22332, 857, 281, 4412, 8306, 787, 10547, 5359, 28416, 293, 7150, 50716], "temperature": 0.0, "avg_logprob": -0.25945563938306726, "compression_ratio": 1.726890756302521, "no_speech_prob": 0.01639939658343792}, {"id": 222, "seek": 107024, "start": 1078.04, "end": 1083.64, "text": " Insert type costs if necessary to preserve type safety. That is also something we shall explore", "tokens": [50754, 36487, 2010, 5497, 498, 4818, 281, 15665, 2010, 4514, 13, 663, 307, 611, 746, 321, 4393, 6839, 51034], "temperature": 0.0, "avg_logprob": -0.25945563938306726, "compression_ratio": 1.726890756302521, "no_speech_prob": 0.01639939658343792}, {"id": 223, "seek": 107024, "start": 1084.68, "end": 1086.68, "text": " Generate bridge methods to preserve", "tokens": [51086, 15409, 473, 7283, 7150, 281, 15665, 51186], "temperature": 0.0, "avg_logprob": -0.25945563938306726, "compression_ratio": 1.726890756302521, "no_speech_prob": 0.01639939658343792}, {"id": 224, "seek": 107024, "start": 1087.68, "end": 1089.48, "text": " Polymorphism in extended generic types", "tokens": [51236, 18553, 76, 18191, 1434, 294, 10913, 19577, 3467, 51326], "temperature": 0.0, "avg_logprob": -0.25945563938306726, "compression_ratio": 1.726890756302521, "no_speech_prob": 0.01639939658343792}, {"id": 225, "seek": 107024, "start": 1089.48, "end": 1096.68, "text": " So you will see that the the third point here that polymorph polymorphism bit in this example that I'm gonna show soon", "tokens": [51326, 407, 291, 486, 536, 300, 264, 264, 2636, 935, 510, 300, 6754, 76, 18191, 6754, 76, 18191, 1434, 857, 294, 341, 1365, 300, 286, 478, 799, 855, 2321, 51686], "temperature": 0.0, "avg_logprob": -0.25945563938306726, "compression_ratio": 1.726890756302521, "no_speech_prob": 0.01639939658343792}, {"id": 226, "seek": 109668, "start": 1096.92, "end": 1099.72, "text": " See the stochophilons are kind of explained it this way", "tokens": [50376, 3008, 264, 342, 8997, 5317, 388, 892, 366, 733, 295, 8825, 309, 341, 636, 50516], "temperature": 0.0, "avg_logprob": -0.3166859817504883, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.010012266226112843}, {"id": 227, "seek": 109668, "start": 1099.88, "end": 1105.72, "text": " So we have this class of course here, which is simply a list", "tokens": [50524, 407, 321, 362, 341, 1508, 295, 1164, 510, 11, 597, 307, 2935, 257, 1329, 50816], "temperature": 0.0, "avg_logprob": -0.3166859817504883, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.010012266226112843}, {"id": 228, "seek": 109668, "start": 1105.96, "end": 1110.8400000000001, "text": " Sorry, let's say class. I mean we have the list interface and the other list class", "tokens": [50828, 4919, 11, 718, 311, 584, 1508, 13, 286, 914, 321, 362, 264, 1329, 9226, 293, 264, 661, 1329, 1508, 51072], "temperature": 0.0, "avg_logprob": -0.3166859817504883, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.010012266226112843}, {"id": 229, "seek": 109668, "start": 1111.8400000000001, "end": 1115.0, "text": " And it's the generic type where the type parameter", "tokens": [51122, 400, 309, 311, 264, 19577, 2010, 689, 264, 2010, 13075, 51280], "temperature": 0.0, "avg_logprob": -0.3166859817504883, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.010012266226112843}, {"id": 230, "seek": 109668, "start": 1115.0, "end": 1117.88, "text": " We are passing the string and then we're just adding it and we're getting it", "tokens": [51280, 492, 366, 8437, 264, 6798, 293, 550, 321, 434, 445, 5127, 309, 293, 321, 434, 1242, 309, 51424], "temperature": 0.0, "avg_logprob": -0.3166859817504883, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.010012266226112843}, {"id": 231, "seek": 109668, "start": 1118.1200000000001, "end": 1122.1200000000001, "text": " But in the bytecode level it really compiles like this", "tokens": [51436, 583, 294, 264, 40846, 22332, 1496, 309, 534, 715, 4680, 411, 341, 51636], "temperature": 0.0, "avg_logprob": -0.3166859817504883, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.010012266226112843}, {"id": 232, "seek": 112212, "start": 1122.28, "end": 1124.9199999999998, "text": " It does do the casting for us now", "tokens": [50372, 467, 775, 360, 264, 17301, 337, 505, 586, 50504], "temperature": 0.0, "avg_logprob": -0.24508283576186823, "compression_ratio": 1.7016806722689075, "no_speech_prob": 0.005301324184983969}, {"id": 233, "seek": 112212, "start": 1124.9199999999998, "end": 1126.9199999999998, "text": " This is not required for us to do because we're using", "tokens": [50504, 639, 307, 406, 4739, 337, 505, 281, 360, 570, 321, 434, 1228, 50604], "temperature": 0.0, "avg_logprob": -0.24508283576186823, "compression_ratio": 1.7016806722689075, "no_speech_prob": 0.005301324184983969}, {"id": 234, "seek": 112212, "start": 1127.52, "end": 1129.8, "text": " Generics and the type erasure allows this", "tokens": [50634, 15409, 1167, 293, 264, 2010, 1189, 2508, 4045, 341, 50748], "temperature": 0.0, "avg_logprob": -0.24508283576186823, "compression_ratio": 1.7016806722689075, "no_speech_prob": 0.005301324184983969}, {"id": 235, "seek": 112212, "start": 1131.12, "end": 1136.6799999999998, "text": " Going to the example here is how the generic singleton pattern works this instance", "tokens": [50814, 10963, 281, 264, 1365, 510, 307, 577, 264, 19577, 1522, 14806, 5102, 1985, 341, 5197, 51092], "temperature": 0.0, "avg_logprob": -0.24508283576186823, "compression_ratio": 1.7016806722689075, "no_speech_prob": 0.005301324184983969}, {"id": 236, "seek": 112212, "start": 1136.8, "end": 1140.36, "text": " We have a variable called identity function or identity fm", "tokens": [51098, 492, 362, 257, 7006, 1219, 6575, 2445, 420, 6575, 283, 76, 51276], "temperature": 0.0, "avg_logprob": -0.24508283576186823, "compression_ratio": 1.7016806722689075, "no_speech_prob": 0.005301324184983969}, {"id": 237, "seek": 112212, "start": 1140.3999999999999, "end": 1143.56, "text": " We have a variable irony function and keep in mind", "tokens": [51278, 492, 362, 257, 7006, 35365, 2445, 293, 1066, 294, 1575, 51436], "temperature": 0.0, "avg_logprob": -0.24508283576186823, "compression_ratio": 1.7016806722689075, "no_speech_prob": 0.005301324184983969}, {"id": 238, "seek": 112212, "start": 1144.1599999999999, "end": 1149.7199999999998, "text": " Object in Java is a superclass for all other classes therefore any subtype of this", "tokens": [51466, 24753, 294, 10745, 307, 257, 1687, 11665, 337, 439, 661, 5359, 4412, 604, 1422, 20467, 295, 341, 51744], "temperature": 0.0, "avg_logprob": -0.24508283576186823, "compression_ratio": 1.7016806722689075, "no_speech_prob": 0.005301324184983969}, {"id": 239, "seek": 114972, "start": 1150.52, "end": 1152.52, "text": " Type can be passed into this", "tokens": [50404, 15576, 393, 312, 4678, 666, 341, 50504], "temperature": 0.0, "avg_logprob": -0.17004932604337994, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.006289237178862095}, {"id": 240, "seek": 114972, "start": 1152.6000000000001, "end": 1156.04, "text": " So we have this private static final member variable called", "tokens": [50508, 407, 321, 362, 341, 4551, 13437, 2572, 4006, 7006, 1219, 50680], "temperature": 0.0, "avg_logprob": -0.17004932604337994, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.006289237178862095}, {"id": 241, "seek": 114972, "start": 1157.24, "end": 1159.16, "text": " Unary operator", "tokens": [50740, 1156, 822, 12973, 50836], "temperature": 0.0, "avg_logprob": -0.17004932604337994, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.006289237178862095}, {"id": 242, "seek": 114972, "start": 1159.16, "end": 1161.8, "text": " And then we have a static factory method", "tokens": [50836, 400, 550, 321, 362, 257, 13437, 9265, 3170, 50968], "temperature": 0.0, "avg_logprob": -0.17004932604337994, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.006289237178862095}, {"id": 243, "seek": 114972, "start": 1163.32, "end": 1167.32, "text": " What happens here is that method we can pass a", "tokens": [51044, 708, 2314, 510, 307, 300, 3170, 321, 393, 1320, 257, 51244], "temperature": 0.0, "avg_logprob": -0.17004932604337994, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.006289237178862095}, {"id": 244, "seek": 114972, "start": 1168.28, "end": 1171.64, "text": " Type parameters similar to how you would pass a parameter to a method", "tokens": [51292, 15576, 9834, 2531, 281, 577, 291, 576, 1320, 257, 13075, 281, 257, 3170, 51460], "temperature": 0.0, "avg_logprob": -0.17004932604337994, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.006289237178862095}, {"id": 245, "seek": 114972, "start": 1171.64, "end": 1173.64, "text": " But in this case it's a type", "tokens": [51460, 583, 294, 341, 1389, 309, 311, 257, 2010, 51560], "temperature": 0.0, "avg_logprob": -0.17004932604337994, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.006289237178862095}, {"id": 246, "seek": 114972, "start": 1173.64, "end": 1177.64, "text": " So then in the client side, you'll firstly see that I'm not using any costs here", "tokens": [51560, 407, 550, 294, 264, 6423, 1252, 11, 291, 603, 27376, 536, 300, 286, 478, 406, 1228, 604, 5497, 510, 51760], "temperature": 0.0, "avg_logprob": -0.17004932604337994, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.006289237178862095}, {"id": 247, "seek": 117764, "start": 1178.3600000000001, "end": 1183.3200000000002, "text": " And I have two lists up defined. Sorry two arrays not lists in this case", "tokens": [50400, 400, 286, 362, 732, 14511, 493, 7642, 13, 4919, 732, 41011, 406, 14511, 294, 341, 1389, 50648], "temperature": 0.0, "avg_logprob": -0.1972740749980128, "compression_ratio": 1.728643216080402, "no_speech_prob": 0.011155829764902592}, {"id": 248, "seek": 117764, "start": 1183.96, "end": 1187.8000000000002, "text": " A string array right there. I should probably zoom in a bit more. I apologize", "tokens": [50680, 316, 6798, 10225, 558, 456, 13, 286, 820, 1391, 8863, 294, 257, 857, 544, 13, 286, 12328, 50872], "temperature": 0.0, "avg_logprob": -0.1972740749980128, "compression_ratio": 1.728643216080402, "no_speech_prob": 0.011155829764902592}, {"id": 249, "seek": 117764, "start": 1190.3600000000001, "end": 1193.88, "text": " The the string array and then we have the numbers array", "tokens": [51000, 440, 264, 6798, 10225, 293, 550, 321, 362, 264, 3547, 10225, 51176], "temperature": 0.0, "avg_logprob": -0.1972740749980128, "compression_ratio": 1.728643216080402, "no_speech_prob": 0.011155829764902592}, {"id": 250, "seek": 117764, "start": 1194.8400000000001, "end": 1197.48, "text": " So into the same class I'm passing", "tokens": [51224, 407, 666, 264, 912, 1508, 286, 478, 8437, 51356], "temperature": 0.0, "avg_logprob": -0.1972740749980128, "compression_ratio": 1.728643216080402, "no_speech_prob": 0.011155829764902592}, {"id": 251, "seek": 117764, "start": 1199.0, "end": 1201.3200000000002, "text": " I'm creating an instance of that class same string", "tokens": [51432, 286, 478, 4084, 364, 5197, 295, 300, 1508, 912, 6798, 51548], "temperature": 0.0, "avg_logprob": -0.1972740749980128, "compression_ratio": 1.728643216080402, "no_speech_prob": 0.011155829764902592}, {"id": 252, "seek": 117764, "start": 1202.0400000000002, "end": 1204.5200000000002, "text": " And I'm getting that object same string same number", "tokens": [51584, 400, 286, 478, 1242, 300, 2657, 912, 6798, 912, 1230, 51708], "temperature": 0.0, "avg_logprob": -0.1972740749980128, "compression_ratio": 1.728643216080402, "no_speech_prob": 0.011155829764902592}, {"id": 253, "seek": 120452, "start": 1205.48, "end": 1207.08, "text": " And I'm passing", "tokens": [50412, 400, 286, 478, 8437, 50492], "temperature": 0.0, "avg_logprob": -0.13049029140937618, "compression_ratio": 1.7527472527472527, "no_speech_prob": 0.006796903442591429}, {"id": 254, "seek": 120452, "start": 1207.08, "end": 1211.96, "text": " In this case the type string and in this case the type number", "tokens": [50492, 682, 341, 1389, 264, 2010, 6798, 293, 294, 341, 1389, 264, 2010, 1230, 50736], "temperature": 0.0, "avg_logprob": -0.13049029140937618, "compression_ratio": 1.7527472527472527, "no_speech_prob": 0.006796903442591429}, {"id": 255, "seek": 120452, "start": 1212.84, "end": 1214.84, "text": " Now here's where it gets interesting", "tokens": [50780, 823, 510, 311, 689, 309, 2170, 1880, 50880], "temperature": 0.0, "avg_logprob": -0.13049029140937618, "compression_ratio": 1.7527472527472527, "no_speech_prob": 0.006796903442591429}, {"id": 256, "seek": 120452, "start": 1215.08, "end": 1218.92, "text": " Despite the different types. It's still using the same object", "tokens": [50892, 11334, 264, 819, 3467, 13, 467, 311, 920, 1228, 264, 912, 2657, 51084], "temperature": 0.0, "avg_logprob": -0.13049029140937618, "compression_ratio": 1.7527472527472527, "no_speech_prob": 0.006796903442591429}, {"id": 257, "seek": 120452, "start": 1218.92, "end": 1224.36, "text": " We're still as Joshua block states here doling out the same object into different types", "tokens": [51084, 492, 434, 920, 382, 24005, 3461, 4368, 510, 360, 1688, 484, 264, 912, 2657, 666, 819, 3467, 51356], "temperature": 0.0, "avg_logprob": -0.13049029140937618, "compression_ratio": 1.7527472527472527, "no_speech_prob": 0.006796903442591429}, {"id": 258, "seek": 120452, "start": 1225.08, "end": 1227.8799999999999, "text": " So in this case we can type we can apply this", "tokens": [51392, 407, 294, 341, 1389, 321, 393, 2010, 321, 393, 3079, 341, 51532], "temperature": 0.0, "avg_logprob": -0.13049029140937618, "compression_ratio": 1.7527472527472527, "no_speech_prob": 0.006796903442591429}, {"id": 259, "seek": 120452, "start": 1228.6, "end": 1229.6399999999999, "text": " and then", "tokens": [51568, 293, 550, 51620], "temperature": 0.0, "avg_logprob": -0.13049029140937618, "compression_ratio": 1.7527472527472527, "no_speech_prob": 0.006796903442591429}, {"id": 260, "seek": 122964, "start": 1229.64, "end": 1235.4, "text": " Print out all the strings and in this case print out all the numbers, but when we run this code", "tokens": [50364, 34439, 484, 439, 264, 13985, 293, 294, 341, 1389, 4482, 484, 439, 264, 3547, 11, 457, 562, 321, 1190, 341, 3089, 50652], "temperature": 0.0, "avg_logprob": -0.1144287215338813, "compression_ratio": 1.7839195979899498, "no_speech_prob": 0.0034829131327569485}, {"id": 261, "seek": 122964, "start": 1240.8400000000001, "end": 1242.8400000000001, "text": " You'll see here", "tokens": [50924, 509, 603, 536, 510, 51024], "temperature": 0.0, "avg_logprob": -0.1144287215338813, "compression_ratio": 1.7839195979899498, "no_speech_prob": 0.0034829131327569485}, {"id": 262, "seek": 122964, "start": 1242.92, "end": 1244.92, "text": " Why can't I is okay forget about it", "tokens": [51028, 1545, 393, 380, 286, 307, 1392, 2870, 466, 309, 51128], "temperature": 0.0, "avg_logprob": -0.1144287215338813, "compression_ratio": 1.7839195979899498, "no_speech_prob": 0.0034829131327569485}, {"id": 263, "seek": 122964, "start": 1245.3200000000002, "end": 1250.2, "text": " When we run this code, you'll see here the object is still the same object that it's using", "tokens": [51148, 1133, 321, 1190, 341, 3089, 11, 291, 603, 536, 510, 264, 2657, 307, 920, 264, 912, 2657, 300, 309, 311, 1228, 51392], "temperature": 0.0, "avg_logprob": -0.1144287215338813, "compression_ratio": 1.7839195979899498, "no_speech_prob": 0.0034829131327569485}, {"id": 264, "seek": 122964, "start": 1252.1200000000001, "end": 1255.24, "text": " For both these cases despite them having different types", "tokens": [51488, 1171, 1293, 613, 3331, 7228, 552, 1419, 819, 3467, 51644], "temperature": 0.0, "avg_logprob": -0.1144287215338813, "compression_ratio": 1.7839195979899498, "no_speech_prob": 0.0034829131327569485}, {"id": 265, "seek": 122964, "start": 1255.5600000000002, "end": 1257.96, "text": " So I'm printing out the object here same string same number", "tokens": [51660, 407, 286, 478, 14699, 484, 264, 2657, 510, 912, 6798, 912, 1230, 51780], "temperature": 0.0, "avg_logprob": -0.1144287215338813, "compression_ratio": 1.7839195979899498, "no_speech_prob": 0.0034829131327569485}, {"id": 266, "seek": 125796, "start": 1258.28, "end": 1262.8400000000001, "text": " It's still this object the other any function object that is passing or this single instance", "tokens": [50380, 467, 311, 920, 341, 2657, 264, 661, 604, 2445, 2657, 300, 307, 8437, 420, 341, 2167, 5197, 50608], "temperature": 0.0, "avg_logprob": -0.1406648405667009, "compression_ratio": 1.8375451263537905, "no_speech_prob": 0.003884218167513609}, {"id": 267, "seek": 125796, "start": 1263.08, "end": 1263.88, "text": " So it's beautiful", "tokens": [50620, 407, 309, 311, 2238, 50660], "temperature": 0.0, "avg_logprob": -0.1406648405667009, "compression_ratio": 1.8375451263537905, "no_speech_prob": 0.003884218167513609}, {"id": 268, "seek": 125796, "start": 1263.88, "end": 1267.24, "text": " And that's what allows generic programming because these are of different types", "tokens": [50660, 400, 300, 311, 437, 4045, 19577, 9410, 570, 613, 366, 295, 819, 3467, 50828], "temperature": 0.0, "avg_logprob": -0.1406648405667009, "compression_ratio": 1.8375451263537905, "no_speech_prob": 0.003884218167513609}, {"id": 269, "seek": 125796, "start": 1267.4, "end": 1273.08, "text": " Yet that object is being passed through these different types to be used and abused. Let's say", "tokens": [50836, 10890, 300, 2657, 307, 885, 4678, 807, 613, 819, 3467, 281, 312, 1143, 293, 27075, 13, 961, 311, 584, 51120], "temperature": 0.0, "avg_logprob": -0.1406648405667009, "compression_ratio": 1.8375451263537905, "no_speech_prob": 0.003884218167513609}, {"id": 270, "seek": 125796, "start": 1274.92, "end": 1278.68, "text": " So that essentially is what generic singleton factory is it is a factory", "tokens": [51212, 407, 300, 4476, 307, 437, 19577, 1522, 14806, 9265, 307, 309, 307, 257, 9265, 51400], "temperature": 0.0, "avg_logprob": -0.1406648405667009, "compression_ratio": 1.8375451263537905, "no_speech_prob": 0.003884218167513609}, {"id": 271, "seek": 125796, "start": 1278.8400000000001, "end": 1282.52, "text": " We've got a factory here because it's producing or giving we're creating an object", "tokens": [51408, 492, 600, 658, 257, 9265, 510, 570, 309, 311, 10501, 420, 2902, 321, 434, 4084, 364, 2657, 51592], "temperature": 0.0, "avg_logprob": -0.1406648405667009, "compression_ratio": 1.8375451263537905, "no_speech_prob": 0.003884218167513609}, {"id": 272, "seek": 125796, "start": 1283.16, "end": 1286.04, "text": " Uh, but no cast is being used. I think that's the biggest advantage", "tokens": [51624, 4019, 11, 457, 572, 4193, 307, 885, 1143, 13, 286, 519, 300, 311, 264, 3880, 5002, 51768], "temperature": 0.0, "avg_logprob": -0.1406648405667009, "compression_ratio": 1.8375451263537905, "no_speech_prob": 0.003884218167513609}, {"id": 273, "seek": 128604, "start": 1286.28, "end": 1293.32, "text": " I've seen from that pattern and afterwards joshua block states a final advantage of using a static factory", "tokens": [50376, 286, 600, 1612, 490, 300, 5102, 293, 10543, 361, 3019, 4398, 3461, 4368, 257, 2572, 5002, 295, 1228, 257, 13437, 9265, 50728], "temperature": 0.0, "avg_logprob": -0.1744101870376452, "compression_ratio": 1.852, "no_speech_prob": 0.010985804721713066}, {"id": 274, "seek": 128604, "start": 1294.04, "end": 1296.04, "text": " Is that a method reference", "tokens": [50764, 1119, 300, 257, 3170, 6408, 50864], "temperature": 0.0, "avg_logprob": -0.1744101870376452, "compression_ratio": 1.852, "no_speech_prob": 0.010985804721713066}, {"id": 275, "seek": 128604, "start": 1296.44, "end": 1298.84, "text": " Can be used as a supplier for example?", "tokens": [50884, 1664, 312, 1143, 382, 257, 31909, 337, 1365, 30, 51004], "temperature": 0.0, "avg_logprob": -0.1744101870376452, "compression_ratio": 1.852, "no_speech_prob": 0.010985804721713066}, {"id": 276, "seek": 128604, "start": 1299.48, "end": 1306.84, "text": " Elvis get instance, which is the method reference is a supplier for uh is a supplier and Elvis is the type you pass into it", "tokens": [51036, 39944, 483, 5197, 11, 597, 307, 264, 3170, 6408, 307, 257, 31909, 337, 2232, 307, 257, 31909, 293, 39944, 307, 264, 2010, 291, 1320, 666, 309, 51404], "temperature": 0.0, "avg_logprob": -0.1744101870376452, "compression_ratio": 1.852, "no_speech_prob": 0.010985804721713066}, {"id": 277, "seek": 128604, "start": 1306.92, "end": 1310.84, "text": " Which is the example I've used here. So let's try and understand. What does it mean?", "tokens": [51408, 3013, 307, 264, 1365, 286, 600, 1143, 510, 13, 407, 718, 311, 853, 293, 1223, 13, 708, 775, 309, 914, 30, 51604], "temperature": 0.0, "avg_logprob": -0.1744101870376452, "compression_ratio": 1.852, "no_speech_prob": 0.010985804721713066}, {"id": 278, "seek": 128604, "start": 1310.92, "end": 1312.92, "text": " What what what does he mean by?", "tokens": [51608, 708, 437, 437, 775, 415, 914, 538, 30, 51708], "temperature": 0.0, "avg_logprob": -0.1744101870376452, "compression_ratio": 1.852, "no_speech_prob": 0.010985804721713066}, {"id": 279, "seek": 128604, "start": 1312.92, "end": 1315.6399999999999, "text": " method reference being being passed as a supplier", "tokens": [51708, 3170, 6408, 885, 885, 4678, 382, 257, 31909, 51844], "temperature": 0.0, "avg_logprob": -0.1744101870376452, "compression_ratio": 1.852, "no_speech_prob": 0.010985804721713066}, {"id": 280, "seek": 131604, "start": 1317.0, "end": 1319.72, "text": " Firstly from the oracle docs, uh, it states", "tokens": [50412, 20042, 490, 264, 420, 7041, 45623, 11, 2232, 11, 309, 4368, 50548], "temperature": 0.0, "avg_logprob": -0.15873814738074013, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0009398697875440121}, {"id": 281, "seek": 131604, "start": 1320.28, "end": 1323.72, "text": " What's a supplier? I want to understand. It's a functional interface supplier", "tokens": [50576, 708, 311, 257, 31909, 30, 286, 528, 281, 1223, 13, 467, 311, 257, 11745, 9226, 31909, 50748], "temperature": 0.0, "avg_logprob": -0.15873814738074013, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0009398697875440121}, {"id": 282, "seek": 131604, "start": 1324.52, "end": 1328.12, "text": " Sorry, the functional interface supplier contains one method", "tokens": [50788, 4919, 11, 264, 11745, 9226, 31909, 8306, 472, 3170, 50968], "temperature": 0.0, "avg_logprob": -0.15873814738074013, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0009398697875440121}, {"id": 283, "seek": 131604, "start": 1328.44, "end": 1333.6399999999999, "text": " Which is get that takes no argument and returns an object. But but what's important to understand is", "tokens": [50984, 3013, 307, 483, 300, 2516, 572, 6770, 293, 11247, 364, 2657, 13, 583, 457, 437, 311, 1021, 281, 1223, 307, 51244], "temperature": 0.0, "avg_logprob": -0.15873814738074013, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0009398697875440121}, {"id": 284, "seek": 131604, "start": 1335.3999999999999, "end": 1337.3999999999999, "text": " It it this get method", "tokens": [51332, 467, 309, 341, 483, 3170, 51432], "temperature": 0.0, "avg_logprob": -0.15873814738074013, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0009398697875440121}, {"id": 285, "seek": 131604, "start": 1337.8, "end": 1340.84, "text": " Represents a function which does not take any arguments", "tokens": [51452, 3696, 495, 791, 257, 2445, 597, 775, 406, 747, 604, 12869, 51604], "temperature": 0.0, "avg_logprob": -0.15873814738074013, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.0009398697875440121}, {"id": 286, "seek": 134084, "start": 1341.32, "end": 1346.6, "text": " But produces a value of type t. So yes, the get method doesn't produce any arguments", "tokens": [50388, 583, 14725, 257, 2158, 295, 2010, 256, 13, 407, 2086, 11, 264, 483, 3170, 1177, 380, 5258, 604, 12869, 50652], "temperature": 0.0, "avg_logprob": -0.1370752911235011, "compression_ratio": 1.528888888888889, "no_speech_prob": 0.011330990120768547}, {"id": 287, "seek": 134084, "start": 1347.24, "end": 1351.72, "text": " But it has a type the type could be passed as a generic", "tokens": [50684, 583, 309, 575, 257, 2010, 264, 2010, 727, 312, 4678, 382, 257, 19577, 50908], "temperature": 0.0, "avg_logprob": -0.1370752911235011, "compression_ratio": 1.528888888888889, "no_speech_prob": 0.011330990120768547}, {"id": 288, "seek": 134084, "start": 1352.4399999999998, "end": 1359.0, "text": " By the way, that latter bit I read from this article again in geeks for geeks, uh, which I'll leave a link down below in the description", "tokens": [50944, 3146, 264, 636, 11, 300, 18481, 857, 286, 1401, 490, 341, 7222, 797, 294, 1519, 24785, 337, 1519, 24785, 11, 2232, 11, 597, 286, 603, 1856, 257, 2113, 760, 2507, 294, 264, 3855, 51272], "temperature": 0.0, "avg_logprob": -0.1370752911235011, "compression_ratio": 1.528888888888889, "no_speech_prob": 0.011330990120768547}, {"id": 289, "seek": 134084, "start": 1359.0, "end": 1363.48, "text": " Which explains what a supplier interface is written by this person", "tokens": [51272, 3013, 13948, 437, 257, 31909, 9226, 307, 3720, 538, 341, 954, 51496], "temperature": 0.0, "avg_logprob": -0.1370752911235011, "compression_ratio": 1.528888888888889, "no_speech_prob": 0.011330990120768547}, {"id": 290, "seek": 136348, "start": 1364.44, "end": 1371.56, "text": " Sell one two three. So this is a bit hard to get intuitively even though most of us in functional programming use", "tokens": [50412, 44296, 472, 732, 1045, 13, 407, 341, 307, 257, 857, 1152, 281, 483, 46506, 754, 1673, 881, 295, 505, 294, 11745, 9410, 764, 50768], "temperature": 0.0, "avg_logprob": -0.1816469569538915, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.01717543601989746}, {"id": 291, "seek": 136348, "start": 1372.68, "end": 1376.3600000000001, "text": " A method reference, but the method reference requires a supplier", "tokens": [50824, 316, 3170, 6408, 11, 457, 264, 3170, 6408, 7029, 257, 31909, 51008], "temperature": 0.0, "avg_logprob": -0.1816469569538915, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.01717543601989746}, {"id": 292, "seek": 136348, "start": 1376.84, "end": 1380.52, "text": " This functional interface supplier interface does requires", "tokens": [51032, 639, 11745, 9226, 31909, 9226, 775, 7029, 51216], "temperature": 0.0, "avg_logprob": -0.1816469569538915, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.01717543601989746}, {"id": 293, "seek": 136348, "start": 1381.08, "end": 1384.1200000000001, "text": " Yeah, it requires a supplier and we need to pass it a type", "tokens": [51244, 865, 11, 309, 7029, 257, 31909, 293, 321, 643, 281, 1320, 309, 257, 2010, 51396], "temperature": 0.0, "avg_logprob": -0.1816469569538915, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.01717543601989746}, {"id": 294, "seek": 136348, "start": 1384.68, "end": 1386.68, "text": " In this case with the class Elvis", "tokens": [51424, 682, 341, 1389, 365, 264, 1508, 39944, 51524], "temperature": 0.0, "avg_logprob": -0.1816469569538915, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.01717543601989746}, {"id": 295, "seek": 136348, "start": 1387.32, "end": 1390.68, "text": " We could pass the type Elvis as the generic parameter", "tokens": [51556, 492, 727, 1320, 264, 2010, 39944, 382, 264, 19577, 13075, 51724], "temperature": 0.0, "avg_logprob": -0.1816469569538915, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.01717543601989746}, {"id": 296, "seek": 139068, "start": 1391.24, "end": 1394.1200000000001, "text": " As as of it being of type Elvis", "tokens": [50392, 1018, 382, 295, 309, 885, 295, 2010, 39944, 50536], "temperature": 0.0, "avg_logprob": -0.1455028569586923, "compression_ratio": 1.636, "no_speech_prob": 0.01941625028848648}, {"id": 297, "seek": 139068, "start": 1395.0, "end": 1396.44, "text": " um", "tokens": [50580, 1105, 50652], "temperature": 0.0, "avg_logprob": -0.1455028569586923, "compression_ratio": 1.636, "no_speech_prob": 0.01941625028848648}, {"id": 298, "seek": 139068, "start": 1396.44, "end": 1398.8400000000001, "text": " I don't know. I don't know how else to explain it really", "tokens": [50652, 286, 500, 380, 458, 13, 286, 500, 380, 458, 577, 1646, 281, 2903, 309, 534, 50772], "temperature": 0.0, "avg_logprob": -0.1455028569586923, "compression_ratio": 1.636, "no_speech_prob": 0.01941625028848648}, {"id": 299, "seek": 139068, "start": 1399.5600000000002, "end": 1403.96, "text": " It just it just seems like it's something that allows us to do functional programming", "tokens": [50808, 467, 445, 309, 445, 2544, 411, 309, 311, 746, 300, 4045, 505, 281, 360, 11745, 9410, 51028], "temperature": 0.0, "avg_logprob": -0.1455028569586923, "compression_ratio": 1.636, "no_speech_prob": 0.01941625028848648}, {"id": 300, "seek": 139068, "start": 1404.1200000000001, "end": 1408.3600000000001, "text": " And which is why javas introduced that interface. Probably it was in javae. I think", "tokens": [51036, 400, 597, 307, 983, 361, 37331, 7268, 300, 9226, 13, 9210, 309, 390, 294, 361, 4061, 68, 13, 286, 519, 51248], "temperature": 0.0, "avg_logprob": -0.1455028569586923, "compression_ratio": 1.636, "no_speech_prob": 0.01941625028848648}, {"id": 301, "seek": 139068, "start": 1409.16, "end": 1409.64, "text": " um", "tokens": [51288, 1105, 51312], "temperature": 0.0, "avg_logprob": -0.1455028569586923, "compression_ratio": 1.636, "no_speech_prob": 0.01941625028848648}, {"id": 302, "seek": 139068, "start": 1409.64, "end": 1414.68, "text": " And yes, the the static factor method allows us to do that essentially because of the get instance method", "tokens": [51312, 400, 2086, 11, 264, 264, 13437, 5952, 3170, 4045, 505, 281, 360, 300, 4476, 570, 295, 264, 483, 5197, 3170, 51564], "temperature": 0.0, "avg_logprob": -0.1455028569586923, "compression_ratio": 1.636, "no_speech_prob": 0.01941625028848648}, {"id": 303, "seek": 139068, "start": 1415.5600000000002, "end": 1417.88, "text": " That we define right there in any case", "tokens": [51608, 663, 321, 6964, 558, 456, 294, 604, 1389, 51724], "temperature": 0.0, "avg_logprob": -0.1455028569586923, "compression_ratio": 1.636, "no_speech_prob": 0.01941625028848648}, {"id": 304, "seek": 141788, "start": 1417.96, "end": 1424.5200000000002, "text": " I hope that explanation did do some justice to what a supplier interface is if not, please go read the oracle docs", "tokens": [50368, 286, 1454, 300, 10835, 630, 360, 512, 6118, 281, 437, 257, 31909, 9226, 307, 498, 406, 11, 1767, 352, 1401, 264, 420, 7041, 45623, 50696], "temperature": 0.0, "avg_logprob": -0.11437048082766325, "compression_ratio": 1.5708333333333333, "no_speech_prob": 0.004981714766472578}, {"id": 305, "seek": 141788, "start": 1425.24, "end": 1428.5200000000002, "text": " Honestly, I don't really find it too interesting. So I didn't go too deeply into it", "tokens": [50732, 12348, 11, 286, 500, 380, 534, 915, 309, 886, 1880, 13, 407, 286, 994, 380, 352, 886, 8760, 666, 309, 50896], "temperature": 0.0, "avg_logprob": -0.11437048082766325, "compression_ratio": 1.5708333333333333, "no_speech_prob": 0.004981714766472578}, {"id": 306, "seek": 141788, "start": 1429.0, "end": 1431.0, "text": " But it just seems like something javae introduced", "tokens": [50920, 583, 309, 445, 2544, 411, 746, 361, 4061, 68, 7268, 51020], "temperature": 0.0, "avg_logprob": -0.11437048082766325, "compression_ratio": 1.5708333333333333, "no_speech_prob": 0.004981714766472578}, {"id": 307, "seek": 141788, "start": 1431.8000000000002, "end": 1433.8000000000002, "text": " To allow functional programming", "tokens": [51060, 1407, 2089, 11745, 9410, 51160], "temperature": 0.0, "avg_logprob": -0.11437048082766325, "compression_ratio": 1.5708333333333333, "no_speech_prob": 0.004981714766472578}, {"id": 308, "seek": 141788, "start": 1434.44, "end": 1436.8400000000001, "text": " But back to this this bit is on", "tokens": [51192, 583, 646, 281, 341, 341, 857, 307, 322, 51312], "temperature": 0.0, "avg_logprob": -0.11437048082766325, "compression_ratio": 1.5708333333333333, "no_speech_prob": 0.004981714766472578}, {"id": 309, "seek": 141788, "start": 1437.96, "end": 1439.96, "text": " Still providing the singleton guarantee", "tokens": [51368, 8291, 6530, 264, 1522, 14806, 10815, 51468], "temperature": 0.0, "avg_logprob": -0.11437048082766325, "compression_ratio": 1.5708333333333333, "no_speech_prob": 0.004981714766472578}, {"id": 310, "seek": 141788, "start": 1440.7600000000002, "end": 1442.7600000000002, "text": " when serializing classes", "tokens": [51508, 562, 17436, 3319, 5359, 51608], "temperature": 0.0, "avg_logprob": -0.11437048082766325, "compression_ratio": 1.5708333333333333, "no_speech_prob": 0.004981714766472578}, {"id": 311, "seek": 144276, "start": 1443.72, "end": 1448.84, "text": " To maintain to maintain the singleton guarantee declare all instance instance fields", "tokens": [50412, 1407, 6909, 281, 6909, 264, 1522, 14806, 10815, 19710, 439, 5197, 5197, 7909, 50668], "temperature": 0.0, "avg_logprob": -0.26818672628963697, "compression_ratio": 1.7417840375586855, "no_speech_prob": 0.005383805837482214}, {"id": 312, "seek": 144276, "start": 1449.48, "end": 1455.0, "text": " Transient so what does transient mean? That means it won't be serialized and provide a read resolve method", "tokens": [50700, 6531, 1196, 370, 437, 775, 41998, 914, 30, 663, 1355, 309, 1582, 380, 312, 17436, 1602, 293, 2893, 257, 1401, 14151, 3170, 50976], "temperature": 0.0, "avg_logprob": -0.26818672628963697, "compression_ratio": 1.7417840375586855, "no_speech_prob": 0.005383805837482214}, {"id": 313, "seek": 144276, "start": 1455.08, "end": 1459.16, "text": " This is the bit I said I'll get to a bit later that bit right there", "tokens": [50980, 639, 307, 264, 857, 286, 848, 286, 603, 483, 281, 257, 857, 1780, 300, 857, 558, 456, 51184], "temperature": 0.0, "avg_logprob": -0.26818672628963697, "compression_ratio": 1.7417840375586855, "no_speech_prob": 0.005383805837482214}, {"id": 314, "seek": 144276, "start": 1460.04, "end": 1461.48, "text": " this", "tokens": [51228, 341, 51300], "temperature": 0.0, "avg_logprob": -0.26818672628963697, "compression_ratio": 1.7417840375586855, "no_speech_prob": 0.005383805837482214}, {"id": 315, "seek": 144276, "start": 1461.48, "end": 1463.48, "text": " ensures that there's", "tokens": [51300, 28111, 300, 456, 311, 51400], "temperature": 0.0, "avg_logprob": -0.26818672628963697, "compression_ratio": 1.7417840375586855, "no_speech_prob": 0.005383805837482214}, {"id": 316, "seek": 144276, "start": 1463.48, "end": 1467.72, "text": " The singleton property or the singleton patterns followed during during serialization", "tokens": [51400, 440, 1522, 14806, 4707, 420, 264, 1522, 14806, 8294, 6263, 1830, 1830, 17436, 2144, 51612], "temperature": 0.0, "avg_logprob": -0.26818672628963697, "compression_ratio": 1.7417840375586855, "no_speech_prob": 0.005383805837482214}, {"id": 317, "seek": 146772, "start": 1468.28, "end": 1474.28, "text": " However, it's not really worth going too deeply into it. Uh, but uh, sorry, you know what before I go", "tokens": [50392, 2908, 11, 309, 311, 406, 534, 3163, 516, 886, 8760, 666, 309, 13, 4019, 11, 457, 2232, 11, 2597, 11, 291, 458, 437, 949, 286, 352, 50692], "temperature": 0.0, "avg_logprob": -0.14626546587262834, "compression_ratio": 1.6192307692307693, "no_speech_prob": 0.01472700946033001}, {"id": 318, "seek": 146772, "start": 1474.76, "end": 1478.6000000000001, "text": " Going everywhere with this. I'll I'll finish the rest of that sentence or that paragraph", "tokens": [50716, 10963, 5315, 365, 341, 13, 286, 603, 286, 603, 2413, 264, 1472, 295, 300, 8174, 420, 300, 18865, 50908], "temperature": 0.0, "avg_logprob": -0.14626546587262834, "compression_ratio": 1.6192307692307693, "no_speech_prob": 0.01472700946033001}, {"id": 319, "seek": 146772, "start": 1479.08, "end": 1483.0, "text": " So I'll say to maintain a singleton instance to to maintain the singleton guarantee", "tokens": [50932, 407, 286, 603, 584, 281, 6909, 257, 1522, 14806, 5197, 281, 281, 6909, 264, 1522, 14806, 10815, 51128], "temperature": 0.0, "avg_logprob": -0.14626546587262834, "compression_ratio": 1.6192307692307693, "no_speech_prob": 0.01472700946033001}, {"id": 320, "seek": 146772, "start": 1483.4, "end": 1488.52, "text": " Declare all instance fields transient and provide a read resolve method", "tokens": [51148, 1346, 3474, 543, 439, 5197, 7909, 41998, 293, 2893, 257, 1401, 14151, 3170, 51404], "temperature": 0.0, "avg_logprob": -0.14626546587262834, "compression_ratio": 1.6192307692307693, "no_speech_prob": 0.01472700946033001}, {"id": 321, "seek": 146772, "start": 1489.88, "end": 1492.84, "text": " Which he points to in item 89. I shall get to that too", "tokens": [51472, 3013, 415, 2793, 281, 294, 3174, 31877, 13, 286, 4393, 483, 281, 300, 886, 51620], "temperature": 0.0, "avg_logprob": -0.14626546587262834, "compression_ratio": 1.6192307692307693, "no_speech_prob": 0.01472700946033001}, {"id": 322, "seek": 146772, "start": 1493.72, "end": 1495.72, "text": " otherwise each time", "tokens": [51664, 5911, 1184, 565, 51764], "temperature": 0.0, "avg_logprob": -0.14626546587262834, "compression_ratio": 1.6192307692307693, "no_speech_prob": 0.01472700946033001}, {"id": 323, "seek": 149572, "start": 1495.72, "end": 1500.2, "text": " A serialized instance is deserialized a new instance will be created", "tokens": [50364, 316, 17436, 1602, 5197, 307, 730, 260, 831, 1602, 257, 777, 5197, 486, 312, 2942, 50588], "temperature": 0.0, "avg_logprob": -0.17512803811293381, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.004904825706034899}, {"id": 324, "seek": 149572, "start": 1500.76, "end": 1502.04, "text": " leading", "tokens": [50616, 5775, 50680], "temperature": 0.0, "avg_logprob": -0.17512803811293381, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.004904825706034899}, {"id": 325, "seek": 149572, "start": 1502.04, "end": 1505.24, "text": " In the case of our example to spurious elvis sightings", "tokens": [50680, 682, 264, 1389, 295, 527, 1365, 281, 637, 24274, 806, 4938, 7860, 1109, 50840], "temperature": 0.0, "avg_logprob": -0.17512803811293381, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.004904825706034899}, {"id": 326, "seek": 149572, "start": 1505.8, "end": 1508.04, "text": " So firstly that that idea of", "tokens": [50868, 407, 27376, 300, 300, 1558, 295, 50980], "temperature": 0.0, "avg_logprob": -0.17512803811293381, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.004904825706034899}, {"id": 327, "seek": 149572, "start": 1508.76, "end": 1510.28, "text": " Read resolve method", "tokens": [51016, 17604, 14151, 3170, 51092], "temperature": 0.0, "avg_logprob": -0.17512803811293381, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.004904825706034899}, {"id": 328, "seek": 149572, "start": 1510.28, "end": 1517.48, "text": " There's a whole chapter in the book on serialization serial serialization. Why do I find it hard to pronounce that word?", "tokens": [51092, 821, 311, 257, 1379, 7187, 294, 264, 1446, 322, 17436, 2144, 17436, 17436, 2144, 13, 1545, 360, 286, 915, 309, 1152, 281, 19567, 300, 1349, 30, 51452], "temperature": 0.0, "avg_logprob": -0.17512803811293381, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.004904825706034899}, {"id": 329, "seek": 149572, "start": 1517.88, "end": 1519.88, "text": " serialization", "tokens": [51472, 17436, 2144, 51572], "temperature": 0.0, "avg_logprob": -0.17512803811293381, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.004904825706034899}, {"id": 330, "seek": 149572, "start": 1519.96, "end": 1524.3600000000001, "text": " When item 89, which is why I said it's not worth spending too much time on this because", "tokens": [51576, 1133, 3174, 31877, 11, 597, 307, 983, 286, 848, 309, 311, 406, 3163, 6434, 886, 709, 565, 322, 341, 570, 51796], "temperature": 0.0, "avg_logprob": -0.17512803811293381, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.004904825706034899}, {"id": 331, "seek": 152436, "start": 1525.08, "end": 1529.32, "text": " Joshua block in fact says don't use read resolve methods in item 89", "tokens": [50400, 24005, 3461, 294, 1186, 1619, 500, 380, 764, 1401, 14151, 7150, 294, 3174, 31877, 50612], "temperature": 0.0, "avg_logprob": -0.14401550485630227, "compression_ratio": 1.799163179916318, "no_speech_prob": 0.00669238343834877}, {"id": 332, "seek": 152436, "start": 1529.3999999999999, "end": 1533.08, "text": " He states for instance control. So that's what we're doing here. We're", "tokens": [50616, 634, 4368, 337, 5197, 1969, 13, 407, 300, 311, 437, 321, 434, 884, 510, 13, 492, 434, 50800], "temperature": 0.0, "avg_logprob": -0.14401550485630227, "compression_ratio": 1.799163179916318, "no_speech_prob": 0.00669238343834877}, {"id": 333, "seek": 152436, "start": 1533.7199999999998, "end": 1538.6799999999998, "text": " Practicing instance control instance control prefer enum types to read resolve", "tokens": [50832, 19170, 5776, 5197, 1969, 5197, 1969, 4382, 465, 449, 3467, 281, 1401, 14151, 51080], "temperature": 0.0, "avg_logprob": -0.14401550485630227, "compression_ratio": 1.799163179916318, "no_speech_prob": 0.00669238343834877}, {"id": 334, "seek": 152436, "start": 1538.76, "end": 1540.6799999999998, "text": " So we're going to get to enum types next therefore", "tokens": [51084, 407, 321, 434, 516, 281, 483, 281, 465, 449, 3467, 958, 4412, 51180], "temperature": 0.0, "avg_logprob": -0.14401550485630227, "compression_ratio": 1.799163179916318, "no_speech_prob": 0.00669238343834877}, {"id": 335, "seek": 152436, "start": 1540.84, "end": 1546.6799999999998, "text": " It's not really worth going too deeply into what this read resolve method does but just in general", "tokens": [51188, 467, 311, 406, 534, 3163, 516, 886, 8760, 666, 437, 341, 1401, 14151, 3170, 775, 457, 445, 294, 2674, 51480], "temperature": 0.0, "avg_logprob": -0.14401550485630227, "compression_ratio": 1.799163179916318, "no_speech_prob": 0.00669238343834877}, {"id": 336, "seek": 152436, "start": 1547.6399999999999, "end": 1550.52, "text": " Because it always returns this single instance we defined here", "tokens": [51528, 1436, 309, 1009, 11247, 341, 2167, 5197, 321, 7642, 510, 51672], "temperature": 0.0, "avg_logprob": -0.14401550485630227, "compression_ratio": 1.799163179916318, "no_speech_prob": 0.00669238343834877}, {"id": 337, "seek": 155052, "start": 1551.48, "end": 1558.68, "text": " It enforces singleton once again, but this time especially during serialization serialization", "tokens": [50412, 467, 25495, 887, 1522, 14806, 1564, 797, 11, 457, 341, 565, 2318, 1830, 17436, 2144, 17436, 2144, 50772], "temperature": 0.0, "avg_logprob": -0.21714669779727333, "compression_ratio": 1.566326530612245, "no_speech_prob": 0.007694158237427473}, {"id": 338, "seek": 155052, "start": 1559.8, "end": 1561.8, "text": " Can't pronounce that word", "tokens": [50828, 1664, 380, 19567, 300, 1349, 50928], "temperature": 0.0, "avg_logprob": -0.21714669779727333, "compression_ratio": 1.566326530612245, "no_speech_prob": 0.007694158237427473}, {"id": 339, "seek": 155052, "start": 1561.8, "end": 1566.36, "text": " And according to this definition by michael mayers. I've left a link to that", "tokens": [50928, 400, 4650, 281, 341, 7123, 538, 6031, 4300, 815, 433, 13, 286, 600, 1411, 257, 2113, 281, 300, 51156], "temperature": 0.0, "avg_logprob": -0.21714669779727333, "compression_ratio": 1.566326530612245, "no_speech_prob": 0.007694158237427473}, {"id": 340, "seek": 155052, "start": 1567.6399999999999, "end": 1571.24, "text": " It's a it's a blog post in this in the description too", "tokens": [51220, 467, 311, 257, 309, 311, 257, 6968, 2183, 294, 341, 294, 264, 3855, 886, 51400], "temperature": 0.0, "avg_logprob": -0.21714669779727333, "compression_ratio": 1.566326530612245, "no_speech_prob": 0.007694158237427473}, {"id": 341, "seek": 155052, "start": 1572.2, "end": 1575.32, "text": " Read resolve is used to for replacing the object stream", "tokens": [51448, 17604, 14151, 307, 1143, 281, 337, 19139, 264, 2657, 4309, 51604], "temperature": 0.0, "avg_logprob": -0.21714669779727333, "compression_ratio": 1.566326530612245, "no_speech_prob": 0.007694158237427473}, {"id": 342, "seek": 157532, "start": 1575.6399999999999, "end": 1582.2, "text": " Object object read from the stream. What can't I read today? The only use I've ever seen for this is enforcing singleton", "tokens": [50380, 24753, 2657, 1401, 490, 264, 4309, 13, 708, 393, 380, 286, 1401, 965, 30, 440, 787, 764, 286, 600, 1562, 1612, 337, 341, 307, 25495, 2175, 1522, 14806, 50708], "temperature": 0.0, "avg_logprob": -0.15796246895423302, "compression_ratio": 1.6454183266932272, "no_speech_prob": 0.02128535695374012}, {"id": 343, "seek": 157532, "start": 1582.76, "end": 1584.76, "text": " Oh, sorry. This was from in fact", "tokens": [50736, 876, 11, 2597, 13, 639, 390, 490, 294, 1186, 50836], "temperature": 0.0, "avg_logprob": -0.15796246895423302, "compression_ratio": 1.6454183266932272, "no_speech_prob": 0.02128535695374012}, {"id": 344, "seek": 157532, "start": 1585.56, "end": 1588.52, "text": " a stackable flow answer not a blog post but", "tokens": [50876, 257, 8630, 712, 3095, 1867, 406, 257, 6968, 2183, 457, 51024], "temperature": 0.0, "avg_logprob": -0.15796246895423302, "compression_ratio": 1.6454183266932272, "no_speech_prob": 0.02128535695374012}, {"id": 345, "seek": 157532, "start": 1589.48, "end": 1592.4399999999998, "text": " Nevertheless, I shall leave a link to all of that down below in the description", "tokens": [51072, 26554, 11, 286, 4393, 1856, 257, 2113, 281, 439, 295, 300, 760, 2507, 294, 264, 3855, 51220], "temperature": 0.0, "avg_logprob": -0.15796246895423302, "compression_ratio": 1.6454183266932272, "no_speech_prob": 0.02128535695374012}, {"id": 346, "seek": 157532, "start": 1595.1599999999999, "end": 1602.6, "text": " When an object is read replace it with the singleton instance. So when this object is read, it's going to replace it with this instance", "tokens": [51356, 1133, 364, 2657, 307, 1401, 7406, 309, 365, 264, 1522, 14806, 5197, 13, 407, 562, 341, 2657, 307, 1401, 11, 309, 311, 516, 281, 7406, 309, 365, 341, 5197, 51728], "temperature": 0.0, "avg_logprob": -0.15796246895423302, "compression_ratio": 1.6454183266932272, "no_speech_prob": 0.02128535695374012}, {"id": 347, "seek": 160260, "start": 1603.1599999999999, "end": 1610.4399999999998, "text": " This ensures that nobody can create another instance by serializing and deserializing the singleton", "tokens": [50392, 639, 28111, 300, 5079, 393, 1884, 1071, 5197, 538, 17436, 3319, 293, 730, 260, 831, 3319, 264, 1522, 14806, 50756], "temperature": 0.0, "avg_logprob": -0.23638294361255788, "compression_ratio": 1.6367924528301887, "no_speech_prob": 0.003324183402583003}, {"id": 348, "seek": 160260, "start": 1610.84, "end": 1614.76, "text": " However, it makes no sense to go too deeply into read resolve because", "tokens": [50776, 2908, 11, 309, 1669, 572, 2020, 281, 352, 886, 8760, 666, 1401, 14151, 570, 50972], "temperature": 0.0, "avg_logprob": -0.23638294361255788, "compression_ratio": 1.6367924528301887, "no_speech_prob": 0.003324183402583003}, {"id": 349, "seek": 160260, "start": 1615.7199999999998, "end": 1617.7199999999998, "text": " technically or theoretically", "tokens": [51020, 12120, 420, 29400, 51120], "temperature": 0.0, "avg_logprob": -0.23638294361255788, "compression_ratio": 1.6367924528301887, "no_speech_prob": 0.003324183402583003}, {"id": 350, "seek": 160260, "start": 1617.7199999999998, "end": 1619.24, "text": " As per the", "tokens": [51120, 1018, 680, 264, 51196], "temperature": 0.0, "avg_logprob": -0.23638294361255788, "compression_ratio": 1.6367924528301887, "no_speech_prob": 0.003324183402583003}, {"id": 351, "seek": 160260, "start": 1619.24, "end": 1622.52, "text": " Sagacious advice of just your blog. We shouldn't even be using this method", "tokens": [51196, 34551, 22641, 5192, 295, 445, 428, 6968, 13, 492, 4659, 380, 754, 312, 1228, 341, 3170, 51360], "temperature": 0.0, "avg_logprob": -0.23638294361255788, "compression_ratio": 1.6367924528301887, "no_speech_prob": 0.003324183402583003}, {"id": 352, "seek": 160260, "start": 1622.52, "end": 1626.04, "text": " We should be using the third method technique or the third way", "tokens": [51360, 492, 820, 312, 1228, 264, 2636, 3170, 6532, 420, 264, 2636, 636, 51536], "temperature": 0.0, "avg_logprob": -0.23638294361255788, "compression_ratio": 1.6367924528301887, "no_speech_prob": 0.003324183402583003}, {"id": 353, "seek": 162604, "start": 1626.6, "end": 1632.68, "text": " To enforce singleton property, which is with a enum type not an enum type using a single enum", "tokens": [50392, 1407, 24825, 1522, 14806, 4707, 11, 597, 307, 365, 257, 465, 449, 2010, 406, 364, 465, 449, 2010, 1228, 257, 2167, 465, 449, 50696], "temperature": 0.0, "avg_logprob": -0.11511257611788236, "compression_ratio": 1.7984496124031009, "no_speech_prob": 0.14218977093696594}, {"id": 354, "seek": 162604, "start": 1632.76, "end": 1637.24, "text": " I don't know why I said enum type makes no sense. This is by far the simplest way. It's", "tokens": [50700, 286, 500, 380, 458, 983, 286, 848, 465, 449, 2010, 1669, 572, 2020, 13, 639, 307, 538, 1400, 264, 22811, 636, 13, 467, 311, 50924], "temperature": 0.0, "avg_logprob": -0.11511257611788236, "compression_ratio": 1.7984496124031009, "no_speech_prob": 0.14218977093696594}, {"id": 355, "seek": 162604, "start": 1638.2, "end": 1641.48, "text": " I think two lines of code if I'm not mistaken. So let me open it up", "tokens": [50972, 286, 519, 732, 3876, 295, 3089, 498, 286, 478, 406, 21333, 13, 407, 718, 385, 1269, 309, 493, 51136], "temperature": 0.0, "avg_logprob": -0.11511257611788236, "compression_ratio": 1.7984496124031009, "no_speech_prob": 0.14218977093696594}, {"id": 356, "seek": 162604, "start": 1642.28, "end": 1644.52, "text": " It is in fact. Yes, really", "tokens": [51176, 467, 307, 294, 1186, 13, 1079, 11, 534, 51288], "temperature": 0.0, "avg_logprob": -0.11511257611788236, "compression_ratio": 1.7984496124031009, "no_speech_prob": 0.14218977093696594}, {"id": 357, "seek": 162604, "start": 1645.1599999999999, "end": 1648.84, "text": " I don't even know if you consider this is more like a member variable, but it's one line of code", "tokens": [51320, 286, 500, 380, 754, 458, 498, 291, 1949, 341, 307, 544, 411, 257, 4006, 7006, 11, 457, 309, 311, 472, 1622, 295, 3089, 51504], "temperature": 0.0, "avg_logprob": -0.11511257611788236, "compression_ratio": 1.7984496124031009, "no_speech_prob": 0.14218977093696594}, {"id": 358, "seek": 162604, "start": 1649.6399999999999, "end": 1654.04, "text": " This is the simplest way to enforce singleton. Look at that. Just two lines of code really", "tokens": [51544, 639, 307, 264, 22811, 636, 281, 24825, 1522, 14806, 13, 2053, 412, 300, 13, 1449, 732, 3876, 295, 3089, 534, 51764], "temperature": 0.0, "avg_logprob": -0.11511257611788236, "compression_ratio": 1.7984496124031009, "no_speech_prob": 0.14218977093696594}, {"id": 359, "seek": 165404, "start": 1654.6, "end": 1657.6399999999999, "text": " One two, I don't know. I don't want to start a debate here. What's wrong with me?", "tokens": [50392, 1485, 732, 11, 286, 500, 380, 458, 13, 286, 500, 380, 528, 281, 722, 257, 7958, 510, 13, 708, 311, 2085, 365, 385, 30, 50544], "temperature": 0.0, "avg_logprob": -0.1400867166190312, "compression_ratio": 1.6045627376425855, "no_speech_prob": 0.02228342369198799}, {"id": 360, "seek": 165404, "start": 1658.36, "end": 1660.36, "text": " and really all we're doing is", "tokens": [50580, 293, 534, 439, 321, 434, 884, 307, 50680], "temperature": 0.0, "avg_logprob": -0.1400867166190312, "compression_ratio": 1.6045627376425855, "no_speech_prob": 0.02228342369198799}, {"id": 361, "seek": 165404, "start": 1660.6, "end": 1662.6, "text": " story that instance and", "tokens": [50692, 1657, 300, 5197, 293, 50792], "temperature": 0.0, "avg_logprob": -0.1400867166190312, "compression_ratio": 1.6045627376425855, "no_speech_prob": 0.02228342369198799}, {"id": 362, "seek": 165404, "start": 1662.84, "end": 1664.84, "text": " It's a factor that it's enum", "tokens": [50804, 467, 311, 257, 5952, 300, 309, 311, 465, 449, 50904], "temperature": 0.0, "avg_logprob": -0.1400867166190312, "compression_ratio": 1.6045627376425855, "no_speech_prob": 0.02228342369198799}, {"id": 363, "seek": 165404, "start": 1664.84, "end": 1668.76, "text": " We get most of these things we were trying to explicitly declare in the source code", "tokens": [50904, 492, 483, 881, 295, 613, 721, 321, 645, 1382, 281, 20803, 19710, 294, 264, 4009, 3089, 51100], "temperature": 0.0, "avg_logprob": -0.1400867166190312, "compression_ratio": 1.6045627376425855, "no_speech_prob": 0.02228342369198799}, {"id": 364, "seek": 165404, "start": 1669.6399999999999, "end": 1671.6399999999999, "text": " By by virtue of it being an enum", "tokens": [51144, 3146, 538, 20816, 295, 309, 885, 364, 465, 449, 51244], "temperature": 0.0, "avg_logprob": -0.1400867166190312, "compression_ratio": 1.6045627376425855, "no_speech_prob": 0.02228342369198799}, {"id": 365, "seek": 165404, "start": 1672.44, "end": 1675.0, "text": " So, yeah, it provides serialization", "tokens": [51284, 407, 11, 1338, 11, 309, 6417, 17436, 2144, 51412], "temperature": 0.0, "avg_logprob": -0.1400867166190312, "compression_ratio": 1.6045627376425855, "no_speech_prob": 0.02228342369198799}, {"id": 366, "seek": 165404, "start": 1675.96, "end": 1682.12, "text": " Serialization for free and by default won't be able to instantiate multiple times because they're static", "tokens": [51460, 4210, 831, 2144, 337, 1737, 293, 538, 7576, 1582, 380, 312, 1075, 281, 9836, 13024, 3866, 1413, 570, 436, 434, 13437, 51768], "temperature": 0.0, "avg_logprob": -0.1400867166190312, "compression_ratio": 1.6045627376425855, "no_speech_prob": 0.02228342369198799}, {"id": 367, "seek": 168212, "start": 1682.84, "end": 1684.84, "text": " And final effectively", "tokens": [50400, 400, 2572, 8659, 50500], "temperature": 0.0, "avg_logprob": -0.13397338934112013, "compression_ratio": 1.7396694214876034, "no_speech_prob": 0.01717274636030197}, {"id": 368, "seek": 168212, "start": 1684.84, "end": 1689.3999999999999, "text": " In java every enum is implicitly a subclass of the enum class", "tokens": [50500, 682, 361, 4061, 633, 465, 449, 307, 26947, 356, 257, 1422, 11665, 295, 264, 465, 449, 1508, 50728], "temperature": 0.0, "avg_logprob": -0.13397338934112013, "compression_ratio": 1.7396694214876034, "no_speech_prob": 0.01717274636030197}, {"id": 369, "seek": 168212, "start": 1690.04, "end": 1694.76, "text": " So it cannot be used if singleton needs to extend a superclass. Oh, yes, this is an important point", "tokens": [50760, 407, 309, 2644, 312, 1143, 498, 1522, 14806, 2203, 281, 10101, 257, 1687, 11665, 13, 876, 11, 2086, 11, 341, 307, 364, 1021, 935, 50996], "temperature": 0.0, "avg_logprob": -0.13397338934112013, "compression_ratio": 1.7396694214876034, "no_speech_prob": 0.01717274636030197}, {"id": 370, "seek": 168212, "start": 1695.0, "end": 1697.9599999999998, "text": " He gets to this in the in the in the end of the paragraph", "tokens": [51008, 634, 2170, 281, 341, 294, 264, 294, 264, 294, 264, 917, 295, 264, 18865, 51156], "temperature": 0.0, "avg_logprob": -0.13397338934112013, "compression_ratio": 1.7396694214876034, "no_speech_prob": 0.01717274636030197}, {"id": 371, "seek": 168212, "start": 1698.12, "end": 1703.32, "text": " I shall I shall the really the only disadvantage of using an enum to", "tokens": [51164, 286, 4393, 286, 4393, 264, 534, 264, 787, 24292, 295, 1228, 364, 465, 449, 281, 51424], "temperature": 0.0, "avg_logprob": -0.13397338934112013, "compression_ratio": 1.7396694214876034, "no_speech_prob": 0.01717274636030197}, {"id": 372, "seek": 168212, "start": 1704.04, "end": 1705.56, "text": " I wouldn't even say", "tokens": [51460, 286, 2759, 380, 754, 584, 51536], "temperature": 0.0, "avg_logprob": -0.13397338934112013, "compression_ratio": 1.7396694214876034, "no_speech_prob": 0.01717274636030197}, {"id": 373, "seek": 168212, "start": 1705.56, "end": 1710.9199999999998, "text": " Disadvantage more of something something to be wary of when using an enum is this last bit", "tokens": [51536, 4208, 345, 23408, 544, 295, 746, 746, 281, 312, 46585, 295, 562, 1228, 364, 465, 449, 307, 341, 1036, 857, 51804], "temperature": 0.0, "avg_logprob": -0.13397338934112013, "compression_ratio": 1.7396694214876034, "no_speech_prob": 0.01717274636030197}, {"id": 374, "seek": 171092, "start": 1711.0800000000002, "end": 1715.3200000000002, "text": " Which I shall touch on a bit in which I which I which I shall touch on in a bit", "tokens": [50372, 3013, 286, 4393, 2557, 322, 257, 857, 294, 597, 286, 597, 286, 597, 286, 4393, 2557, 322, 294, 257, 857, 50584], "temperature": 0.0, "avg_logprob": -0.17691465524526742, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.0038834388833492994}, {"id": 375, "seek": 171092, "start": 1716.28, "end": 1719.0800000000002, "text": " Ah, my constant struggle to talk", "tokens": [50632, 2438, 11, 452, 5754, 7799, 281, 751, 50772], "temperature": 0.0, "avg_logprob": -0.17691465524526742, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.0038834388833492994}, {"id": 376, "seek": 171092, "start": 1720.76, "end": 1727.24, "text": " The best approach this approach may feel a bit unnatural. This is where Joshua block states. So, yeah, I mean, I don't know if", "tokens": [50856, 440, 1151, 3109, 341, 3109, 815, 841, 257, 857, 43470, 13, 639, 307, 689, 24005, 3461, 4368, 13, 407, 11, 1338, 11, 286, 914, 11, 286, 500, 380, 458, 498, 51180], "temperature": 0.0, "avg_logprob": -0.17691465524526742, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.0038834388833492994}, {"id": 377, "seek": 171092, "start": 1729.0, "end": 1735.16, "text": " In my few years of programming, I haven't really used an enum for much other than as being a container for holding", "tokens": [51268, 682, 452, 1326, 924, 295, 9410, 11, 286, 2378, 380, 534, 1143, 364, 465, 449, 337, 709, 661, 813, 382, 885, 257, 10129, 337, 5061, 51576], "temperature": 0.0, "avg_logprob": -0.17691465524526742, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.0038834388833492994}, {"id": 378, "seek": 171092, "start": 1735.96, "end": 1737.16, "text": " constants", "tokens": [51616, 35870, 51676], "temperature": 0.0, "avg_logprob": -0.17691465524526742, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.0038834388833492994}, {"id": 379, "seek": 171092, "start": 1737.16, "end": 1739.16, "text": " So it does feel a bit unnatural", "tokens": [51676, 407, 309, 775, 841, 257, 857, 43470, 51776], "temperature": 0.0, "avg_logprob": -0.17691465524526742, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.0038834388833492994}, {"id": 380, "seek": 173916, "start": 1739.5600000000002, "end": 1744.52, "text": " But a single element enum type is often the best way to to implement a singleton", "tokens": [50384, 583, 257, 2167, 4478, 465, 449, 2010, 307, 2049, 264, 1151, 636, 281, 281, 4445, 257, 1522, 14806, 50632], "temperature": 0.0, "avg_logprob": -0.1410672979534797, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.0009252786403521895}, {"id": 381, "seek": 173916, "start": 1745.24, "end": 1747.4, "text": " And then he states, this is the bit I stood out touch on", "tokens": [50668, 400, 550, 415, 4368, 11, 341, 307, 264, 857, 286, 9371, 484, 2557, 322, 50776], "temperature": 0.0, "avg_logprob": -0.1410672979534797, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.0009252786403521895}, {"id": 382, "seek": 173916, "start": 1748.0400000000002, "end": 1753.88, "text": " Note that you can't use this approach if your singleton must extend a superclass other than enum", "tokens": [50808, 11633, 300, 291, 393, 380, 764, 341, 3109, 498, 428, 1522, 14806, 1633, 10101, 257, 1687, 11665, 661, 813, 465, 449, 51100], "temperature": 0.0, "avg_logprob": -0.1410672979534797, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.0009252786403521895}, {"id": 383, "seek": 173916, "start": 1755.0800000000002, "end": 1760.28, "text": " Though you can declare an enum to implement interfaces, of course, because in java we can't extend", "tokens": [51160, 10404, 291, 393, 19710, 364, 465, 449, 281, 4445, 28416, 11, 295, 1164, 11, 570, 294, 361, 4061, 321, 393, 380, 10101, 51420], "temperature": 0.0, "avg_logprob": -0.1410672979534797, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.0009252786403521895}, {"id": 384, "seek": 173916, "start": 1761.0, "end": 1763.0, "text": " multiple classes because", "tokens": [51456, 3866, 5359, 570, 51556], "temperature": 0.0, "avg_logprob": -0.1410672979534797, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.0009252786403521895}, {"id": 385, "seek": 173916, "start": 1763.4, "end": 1768.2, "text": " By default any enum will is already extending the enum superclass", "tokens": [51576, 3146, 7576, 604, 465, 449, 486, 307, 1217, 24360, 264, 465, 449, 1687, 11665, 51816], "temperature": 0.0, "avg_logprob": -0.1410672979534797, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.0009252786403521895}, {"id": 386, "seek": 176820, "start": 1768.76, "end": 1771.0, "text": " Let's say Elvis had to", "tokens": [50392, 961, 311, 584, 39944, 632, 281, 50504], "temperature": 0.0, "avg_logprob": -0.14750255857195174, "compression_ratio": 1.6351931330472103, "no_speech_prob": 0.008710294030606747}, {"id": 387, "seek": 176820, "start": 1771.72, "end": 1773.72, "text": " extend a class called human", "tokens": [50540, 10101, 257, 1508, 1219, 1952, 50640], "temperature": 0.0, "avg_logprob": -0.14750255857195174, "compression_ratio": 1.6351931330472103, "no_speech_prob": 0.008710294030606747}, {"id": 388, "seek": 176820, "start": 1774.8400000000001, "end": 1778.1200000000001, "text": " That wouldn't be allowed because if we use enum", "tokens": [50696, 663, 2759, 380, 312, 4350, 570, 498, 321, 764, 465, 449, 50860], "temperature": 0.0, "avg_logprob": -0.14750255857195174, "compression_ratio": 1.6351931330472103, "no_speech_prob": 0.008710294030606747}, {"id": 389, "seek": 176820, "start": 1778.76, "end": 1783.96, "text": " However, you could probably get through that through interfaces. So not really a big deal", "tokens": [50892, 2908, 11, 291, 727, 1391, 483, 807, 300, 807, 28416, 13, 407, 406, 534, 257, 955, 2028, 51152], "temperature": 0.0, "avg_logprob": -0.14750255857195174, "compression_ratio": 1.6351931330472103, "no_speech_prob": 0.008710294030606747}, {"id": 390, "seek": 176820, "start": 1784.68, "end": 1787.96, "text": " That was a much shorter video. It was a much shorter item two", "tokens": [51188, 663, 390, 257, 709, 11639, 960, 13, 467, 390, 257, 709, 11639, 3174, 732, 51352], "temperature": 0.0, "avg_logprob": -0.14750255857195174, "compression_ratio": 1.6351931330472103, "no_speech_prob": 0.008710294030606747}, {"id": 391, "seek": 176820, "start": 1788.52, "end": 1793.88, "text": " And that's it. That's item number three that that's so essentially the idea is unless we have", "tokens": [51380, 400, 300, 311, 309, 13, 663, 311, 3174, 1230, 1045, 300, 300, 311, 370, 4476, 264, 1558, 307, 5969, 321, 362, 51648], "temperature": 0.0, "avg_logprob": -0.14750255857195174, "compression_ratio": 1.6351931330472103, "no_speech_prob": 0.008710294030606747}, {"id": 392, "seek": 176820, "start": 1795.0, "end": 1797.4, "text": " to extend a superclass the singleton", "tokens": [51704, 281, 10101, 257, 1687, 11665, 264, 1522, 14806, 51824], "temperature": 0.0, "avg_logprob": -0.14750255857195174, "compression_ratio": 1.6351931330472103, "no_speech_prob": 0.008710294030606747}, {"id": 393, "seek": 179740, "start": 1798.1200000000001, "end": 1800.1200000000001, "text": " Then just use enums to", "tokens": [50400, 1396, 445, 764, 465, 8099, 281, 50500], "temperature": 0.0, "avg_logprob": -0.12221131605260513, "compression_ratio": 1.6653386454183268, "no_speech_prob": 0.0016483182553201914}, {"id": 394, "seek": 179740, "start": 1800.44, "end": 1807.24, "text": " end for a singleton property and we also did discuss initially some of the advantages of using a singleton", "tokens": [50516, 917, 337, 257, 1522, 14806, 4707, 293, 321, 611, 630, 2248, 9105, 512, 295, 264, 14906, 295, 1228, 257, 1522, 14806, 50856], "temperature": 0.0, "avg_logprob": -0.12221131605260513, "compression_ratio": 1.6653386454183268, "no_speech_prob": 0.0016483182553201914}, {"id": 395, "seek": 179740, "start": 1808.44, "end": 1811.8000000000002, "text": " On that note, I shall thank you for letting me again", "tokens": [50916, 1282, 300, 3637, 11, 286, 4393, 1309, 291, 337, 8295, 385, 797, 51084], "temperature": 0.0, "avg_logprob": -0.12221131605260513, "compression_ratio": 1.6653386454183268, "no_speech_prob": 0.0016483182553201914}, {"id": 396, "seek": 179740, "start": 1813.16, "end": 1815.16, "text": " Go about these things like a drunken sailor", "tokens": [51152, 1037, 466, 613, 721, 411, 257, 1224, 39071, 15758, 284, 51252], "temperature": 0.0, "avg_logprob": -0.12221131605260513, "compression_ratio": 1.6653386454183268, "no_speech_prob": 0.0016483182553201914}, {"id": 397, "seek": 179740, "start": 1815.72, "end": 1820.92, "text": " And get lost sometimes in my own musings. It is really interesting though. It is quite interesting how", "tokens": [51280, 400, 483, 2731, 2171, 294, 452, 1065, 1038, 1109, 13, 467, 307, 534, 1880, 1673, 13, 467, 307, 1596, 1880, 577, 51540], "temperature": 0.0, "avg_logprob": -0.12221131605260513, "compression_ratio": 1.6653386454183268, "no_speech_prob": 0.0016483182553201914}, {"id": 398, "seek": 179740, "start": 1821.64, "end": 1826.6000000000001, "text": " As I said many times already how all these items are interrelated kind of like the bible", "tokens": [51576, 1018, 286, 848, 867, 1413, 1217, 577, 439, 613, 4754, 366, 728, 12004, 733, 295, 411, 264, 34956, 51824], "temperature": 0.0, "avg_logprob": -0.12221131605260513, "compression_ratio": 1.6653386454183268, "no_speech_prob": 0.0016483182553201914}, {"id": 399, "seek": 182660, "start": 1827.08, "end": 1831.48, "text": " The next item item number four, which I'm hoping to cover soon, which again is a shorter item", "tokens": [50388, 440, 958, 3174, 3174, 1230, 1451, 11, 597, 286, 478, 7159, 281, 2060, 2321, 11, 597, 797, 307, 257, 11639, 3174, 50608], "temperature": 0.0, "avg_logprob": -0.16547233500379196, "compression_ratio": 1.7053571428571428, "no_speech_prob": 0.005819355603307486}, {"id": 400, "seek": 182660, "start": 1831.6399999999999, "end": 1834.1999999999998, "text": " It's it's probably the shortest item in this book is", "tokens": [50616, 467, 311, 309, 311, 1391, 264, 31875, 3174, 294, 341, 1446, 307, 50744], "temperature": 0.0, "avg_logprob": -0.16547233500379196, "compression_ratio": 1.7053571428571428, "no_speech_prob": 0.005819355603307486}, {"id": 401, "seek": 182660, "start": 1835.0, "end": 1840.36, "text": " Enforce non instantiability with a private constructor. We've sort of already done that", "tokens": [50784, 2193, 5156, 2107, 9836, 72, 2310, 365, 257, 4551, 47479, 13, 492, 600, 1333, 295, 1217, 1096, 300, 51052], "temperature": 0.0, "avg_logprob": -0.16547233500379196, "compression_ratio": 1.7053571428571428, "no_speech_prob": 0.005819355603307486}, {"id": 402, "seek": 182660, "start": 1841.0, "end": 1843.0, "text": " We've already sort of covered", "tokens": [51084, 492, 600, 1217, 1333, 295, 5343, 51184], "temperature": 0.0, "avg_logprob": -0.16547233500379196, "compression_ratio": 1.7053571428571428, "no_speech_prob": 0.005819355603307486}, {"id": 403, "seek": 182660, "start": 1843.08, "end": 1848.4399999999998, "text": " de facto covered that item in this item because all the examples we used did have private constructors", "tokens": [51188, 368, 42225, 5343, 300, 3174, 294, 341, 3174, 570, 439, 264, 5110, 321, 1143, 630, 362, 4551, 7690, 830, 51456], "temperature": 0.0, "avg_logprob": -0.16547233500379196, "compression_ratio": 1.7053571428571428, "no_speech_prob": 0.005819355603307486}, {"id": 404, "seek": 182660, "start": 1849.0, "end": 1851.0, "text": " But it's worth", "tokens": [51484, 583, 309, 311, 3163, 51584], "temperature": 0.0, "avg_logprob": -0.16547233500379196, "compression_ratio": 1.7053571428571428, "no_speech_prob": 0.005819355603307486}, {"id": 405, "seek": 185100, "start": 1851.16, "end": 1854.04, "text": " Way when I say there's an example right this this one right here", "tokens": [50372, 9558, 562, 286, 584, 456, 311, 364, 1365, 558, 341, 341, 472, 558, 510, 50516], "temperature": 0.0, "avg_logprob": -0.21556097088438092, "compression_ratio": 1.4385026737967914, "no_speech_prob": 0.006795394234359264}, {"id": 406, "seek": 185100, "start": 1854.44, "end": 1860.2, "text": " But of course as Joshua bloke has identified it's worth going into detail as to why we need to enforce", "tokens": [50536, 583, 295, 1164, 382, 24005, 1749, 330, 575, 9234, 309, 311, 3163, 516, 666, 2607, 382, 281, 983, 321, 643, 281, 24825, 50824], "temperature": 0.0, "avg_logprob": -0.21556097088438092, "compression_ratio": 1.4385026737967914, "no_speech_prob": 0.006795394234359264}, {"id": 407, "seek": 185100, "start": 1860.6, "end": 1865.4, "text": " Non instantiability saying that once again. Thanks for watching. I'll see you in the next one. Cheers", "tokens": [50844, 8774, 9836, 72, 2310, 1566, 300, 1564, 797, 13, 2561, 337, 1976, 13, 286, 603, 536, 291, 294, 264, 958, 472, 13, 13006, 51084], "temperature": 0.0, "avg_logprob": -0.21556097088438092, "compression_ratio": 1.4385026737967914, "no_speech_prob": 0.006795394234359264}], "language": "en"}