WEBVTT

00:00.000 --> 00:07.440
Hey everyone, welcome to part two of item 13 in Joshua Block's effective Java, which states

00:07.440 --> 00:15.360
override clone judiciously. And if it's not obvious already, since item 13 is a pretty big item,

00:15.360 --> 00:20.720
I've broken it down into two parts. And if you've missed part one, I'll leave a link down

00:20.720 --> 00:25.440
below in the description for you to go check it out. Saying all that, let's get started

00:25.440 --> 00:32.880
without further ado. So as we continue on from part one, item 13, when it comes to cloning,

00:33.440 --> 00:39.520
we have to keep in mind that recursively calling the clone method may not be sufficient at all

00:39.520 --> 00:46.800
times. So in part one, we kind of covered how when the clone takes place between a class,

00:46.800 --> 00:54.640
when we create a new object or a clone of that class, we should recursively copy all the fields

00:54.640 --> 01:04.080
to properly clone the class when using a cloneable, although that might not always suffice. So

01:05.360 --> 01:13.920
firstly, let's take a look at a demo using a hash table, and indeed show a broken clone,

01:13.920 --> 01:18.960
which will give us a shared medieval state, especially a hash table is a good example,

01:18.960 --> 01:25.200
because at least a hash table we're going to use uses an array and an array that can happen

01:25.840 --> 01:31.760
quite often. So let's take a look at this class. Obviously, let me zoom in a bit.

01:34.080 --> 01:40.560
Hash table implements cloneable. This is a hash table we are designing. I'm not saying this is how

01:41.760 --> 01:46.640
a good hash table to start should look like. It's just a rough design we have just for

01:47.280 --> 01:52.080
the purpose of the demo. And this is where the carpet is. I wouldn't call it the carpet,

01:52.080 --> 01:58.960
but here's where the problem lies. It's this array, the buckets array that creates a shared

02:00.000 --> 02:04.160
a medieval state. So I'm going to skip over all the other implementations of a hash table,

02:04.160 --> 02:08.320
things like the constructor, or well, actually, I should probably mention this, there is a

02:08.320 --> 02:15.200
inner class called entry, the buckets array is of type entry, that's kind of important for the

02:15.200 --> 02:19.680
purpose of the hash table. But still, it's kind of out of scope to one for a demo here.

02:20.480 --> 02:24.560
But as I said, I'm going to skip over the puts, the gets, all of that, that's a part of the

02:24.560 --> 02:32.000
hash table mechanism. Although if you look at the clone method, now this is a broken clone method,

02:32.000 --> 02:36.880
because it results in a shared medieval state. And here's where the issue lies.

02:37.200 --> 02:45.200
When we do the clone, and we simply clone the buck across, so the buckets array,

02:45.200 --> 02:50.720
the elements in the buckets array are not copied, rather, they're shared between two

02:50.720 --> 02:57.840
hash table objects. And that can obviously create corrupt state, ergo, this clone method being

02:57.840 --> 03:05.200
broken. As Joshua Block states, though the clone has its own bucket array, this array references

03:05.200 --> 03:12.720
the same length lists as the original, which can easily cause non-deterministic behavior

03:13.360 --> 03:19.280
in both the clone and the original. Now this issue can be resolved using the concept of a

03:19.280 --> 03:25.840
deep copy, which we've covered in previous items, but essentially what a deep copy does is, well,

03:25.840 --> 03:32.480
as the name suggests, recursively goes through the array and copies each element into the new

03:32.480 --> 03:37.280
object. It does a deep copy. So I didn't mention before, when I was showing the broken clone method,

03:37.840 --> 03:44.560
that we have this inner class called entry. So in this inner class, we've defined a new method

03:44.560 --> 03:50.400
called a deep copy to do this deep copy, which, as I said, does the recursive copying. And then

03:50.400 --> 03:56.960
what can be done is, when the recursive copying is done using the deep copy method, the client,

03:57.440 --> 04:06.560
or other client, the outer class, can use this deep copy method in its clone method. So if you

04:06.560 --> 04:12.480
can see here, it does the cloning. And then in line number 90, it's doing a deep copy of the

04:12.480 --> 04:20.080
bucket's array. This ensures that all the elements are copied to ergo, not not just resulting in,

04:20.080 --> 04:25.360
I keep saying ergo, because I've been reading a lot of philosophy. Ergo is a Latin term, I should

04:25.360 --> 04:32.160
probably say, therefore, therefore not resulting in a non deterministic state or a shared mutable

04:32.160 --> 04:36.800
state. A deep copy will solve that problem. Although, although we've got a small issue here,

04:37.440 --> 04:44.400
you can probably see we're doing a recursive copy here. And I'm going to admit, I find it a bit

04:44.400 --> 04:52.240
hard to get this concept that Joshua Bloch has outlined in the book. But he states, when it comes

04:52.240 --> 04:59.920
to recursive copying, while this technique is cute and works fine, if the buckets aren't too long,

04:59.920 --> 05:06.560
so he's referring to the buckets array, it is not a good way to clone a linkless because it consumes

05:06.560 --> 05:13.520
one stack frame for each element in the list. If the list is long, this could easily cause

05:13.520 --> 05:20.000
a stack overflow error. So the problem is that it every time the deep copy takes place, it

05:20.720 --> 05:25.520
for per per element, it creates a new stack frame. And that can obviously not a memory

05:25.520 --> 05:31.760
leak, but it can cause a stack overflow error, because this happens runtime. Now, I found this

05:31.760 --> 05:36.800
good article on a digital ocean, which kind of explains the difference between the heap and the

05:36.800 --> 05:43.840
stack. We had a we had there's one item I forget which one way we covered quite deeply Java, Java,

05:44.560 --> 05:50.960
memory management, garage collection, allocation, all of that. But but I had to put this in

05:50.960 --> 05:55.600
charge of PD to get a bit more, let's say, elaborated definition. And here's what

05:56.480 --> 06:01.760
charge of PD states, pertaining to this point that Joshua Bloch makes to choose. Oh, I didn't

06:01.760 --> 06:08.320
mention that he says, because recursion can cause this stack overflow error, it's better choosing

06:08.320 --> 06:15.680
iteration over recursion. And here's why. And I'm quoting charge of PD verbatim here. Using

06:15.680 --> 06:21.200
iteration instead of recursion helps prevent a stack overflow error by avoiding excessive

06:21.200 --> 06:27.040
stack frame allocation. When a method is invoked recursively, each recursive call creates a new

06:27.040 --> 06:32.160
stack frame, as he stated, which consumes additional memory on a call on the call stack.

06:32.720 --> 06:37.520
If the recursion goes too deep, or if the data structure being processed is large,

06:37.520 --> 06:43.120
it can result in the stack running out of memory, causing a stack overflow error. So we need a

06:43.920 --> 06:50.560
mechanism or an algorithm that doesn't create a new stack frame every time an element is created

06:51.280 --> 06:57.520
in the data structure. And that's where iteration can be much more handy. So let's take a look at

06:57.520 --> 07:03.920
how the iteration method works. Let's comment out the deep copy. And take a look at the

07:04.800 --> 07:11.360
deep copy that uses iteration. So in iteration, because we're not calling the deep copy method

07:11.360 --> 07:18.960
within the function, it's not happening recursively, it doesn't require a new frame on the call stack

07:18.960 --> 07:26.720
every single time the loop runs. And therefore, for larger data structures or large array,

07:27.600 --> 07:34.560
using iteration probably is a bad idea. Overusing recursion, even though, obviously,

07:34.560 --> 07:40.320
as you can see here, the recursive method is much simpler. And it kind of makes a lot more

07:40.320 --> 07:45.280
sense compared to this where you got p.next and your parsing generics and whatnot can be a bit

07:45.280 --> 07:51.920
more complicated. So depending on the use case, you can use whatever method or we can implement

07:51.920 --> 07:58.880
the method however may you think it'll suffice or it'll be apt. Okay, saying all that, let's move

07:58.880 --> 08:05.920
to the wrong side. Saying all that, let's move to the next point, which is how in cloning, how we

08:05.920 --> 08:14.320
can utilize the super dot clone method in your class. So you can use the clone method in your

08:14.320 --> 08:22.000
superclass. Firstly, here's what Joshua book states, a final approach to cloning complex

08:22.000 --> 08:28.400
mutable objects is to clone this to call super dot clone, set all the fields in the resulting

08:28.400 --> 08:34.800
object to their initial state, and then call high level methods to regenerate the state of the

08:34.800 --> 08:39.360
original object. So at first glance, this looks quite straightforward, because all we're doing here

08:39.360 --> 08:45.680
is we're creating a new instance of hash table clone table object, and we're setting it to its

08:45.680 --> 08:52.000
as special book states initial state, and then simply invoking the clone method of the super

08:52.000 --> 09:00.480
class, which in this case would be the object class, and repopulating this new object with whatever

09:00.480 --> 09:08.000
the super dot clone method or superclass, superclasses clone method returns. But but here we have an

09:08.000 --> 09:16.240
issue. And the issue is that this type of cloning, because we're doing a deep copy, especially with

09:16.240 --> 09:24.960
the buckets array, it doesn't abide by the the clonable architecture contract, because we're

09:24.960 --> 09:31.600
implementing the clonable interface here, which is a contract that the class is supposed to follow.

09:32.480 --> 09:39.040
But by doing it this way, by doing the deep copy, it is taking place without a field by field copy

09:39.040 --> 09:44.720
of the object. And that is anatomical to the clonable architecture. I just realized as I was

09:44.720 --> 09:51.040
rereading this, sorry, I wrote this script for this a while back, that I made a mistake here.

09:51.040 --> 09:57.760
In fact, this is correct. The problem would have been if we did a shallow copy, similar to what I've

09:58.560 --> 10:07.280
coded here, without doing a deep copy, which which is a part of the field by field copy,

10:07.280 --> 10:12.480
that's a part of the architecture. I mean, this is correct, because even though we're invoking

10:12.480 --> 10:18.320
super dot clone, and copying the state into the new object, and then create creating the buckets

10:18.320 --> 10:24.880
array, we're still doing a field by field copy. So I should probably really rewrite this into

10:24.880 --> 10:32.080
saying deep copy taking place with a field by field copy of the object. Now this is correct,

10:32.080 --> 10:38.400
as it should be, because because a clone method should act very much like a constructor in a class.

10:38.400 --> 10:43.440
And that's the point Joshua Block makes the I'm so sorry for the misunderstanding that even I got

10:43.440 --> 10:49.040
confused, but I realized I was written that in the wrong way. And this is correct, we need a deep

10:49.040 --> 10:55.520
copy to take place in the clone method. And it can happen, even when invoking the super dot clone

10:55.520 --> 11:02.160
method just to clarify. It's a bad mistake. Okay, so here's what Joshua Block states,

11:02.160 --> 11:07.200
pertaining to the clone method and how it should behave. Like a constructor, a clone method must

11:07.200 --> 11:16.480
never invoke an overriding method on the clone under construction. If okay, so that is this can

11:16.480 --> 11:22.640
be a problem because of that. Because in the clone method, we are invoking another overriding

11:22.640 --> 11:27.200
method. Now this can be an issue. So the issue isn't with the deep copy, the issue really is

11:27.200 --> 11:36.960
with line number 65, just to clarify. If clone invokes a method that is overridden in a subclass,

11:36.960 --> 11:44.000
this method will execute before the subclass has had a chance to fix its state in the clone,

11:44.000 --> 11:49.440
quite possibly leading to corruption in the clone and the original. So what does that mean? If clone

11:49.440 --> 11:54.960
invokes a method that is overridden in a subclass, this method will execute before the subclass has

11:54.960 --> 12:00.800
had a chance to fix its state in the clone. An example of that could potentially be this. We

12:00.800 --> 12:08.240
have this put method, which is extended from hash table. But because it's public, it can be overridden.

12:08.240 --> 12:14.640
Now let's say in the subclass, an extended hash table, we define another clone method,

12:14.640 --> 12:21.360
which should be allowed to be overridden. But we've overridden the put method too. And what that

12:21.360 --> 12:28.160
will do is it'll increase the size by an additional one. For instance, let's say we're

12:28.960 --> 12:32.480
in the super dark put, we're doing the key and value. And then in the array,

12:33.040 --> 12:37.440
where we're changing it, I haven't implemented that bit, but let's say the put changes it where

12:38.240 --> 12:45.600
the array will also increase the size. This put will also increase the size by one. And then what

12:45.600 --> 12:51.840
will happen is in the clone method, it'll create an inconsistent state because this put, which

12:51.840 --> 12:58.000
should have been either private or final, has been invoked again in the subclass's clone method,

12:58.720 --> 13:04.240
which you will see here in line number 22. So roughly, this is what the block means. Obviously,

13:04.240 --> 13:09.680
I haven't implemented the whole code, but the idea being in the clone method, we shouldn't be

13:09.680 --> 13:18.800
invoking methods of the superclass that can create corrupt state or non-deterministic behavior between

13:18.800 --> 13:23.440
objects. Okay, now let's discuss the objects clone method. And sorry about the background noise,

13:23.440 --> 13:28.160
it just started raining. When it comes to the objects clone method, so when I mean object,

13:28.160 --> 13:34.640
I mean the superclass and Java of all other classes, the Java object class, Drusher book

13:34.640 --> 13:42.080
states this, objects clone method is declared to throw clone not support exception, but overriding

13:42.080 --> 13:49.280
methods need not public clone methods should admit the throws close as methods that don't throw

13:49.280 --> 13:57.840
check exceptions are easy to use. So here's how the objects clone method is defined, which throws a

13:57.840 --> 14:03.040
clone not support exception. And then if you have this class here, which overrides this code

14:03.040 --> 14:10.480
method from the object class, as for the contract of the colonial architecture, it's a contract that

14:11.200 --> 14:17.280
the JVM makes, or it's a contract with the JVM, that the clone will take place properly. Therefore,

14:17.280 --> 14:24.240
this bit isn't required. So we can get rid of it really. But it's not that simple. Drusher book states

14:24.240 --> 14:30.160
that there are two ways to do this when designing a class of inheritance. Firstly, on what you should

14:30.160 --> 14:36.720
not do. If you have a superclass that is designed for being inherited, this shouldn't happen. We

14:36.720 --> 14:42.160
shouldn't implement cloneable, because then it'll create corrupt state. As you can see, this resource

14:42.160 --> 14:49.520
area here would be shared between these two objects creating a medieval not available state, sorry,

14:50.160 --> 14:55.360
corrupt state. But given that though, we can still have a clone method in a class designed for

14:55.360 --> 15:00.800
inheritance without implementing cloneable. There are two choices that just show gives us the first

15:00.800 --> 15:05.920
one is implement a properly functioning clone method mimicking that in the object class. So not

15:05.920 --> 15:11.440
a clone method like this, this is wrong. We should mimic what's being done in the object class,

15:11.440 --> 15:16.080
despite not implementing the cloneable architecture, or prevent the subclasses from

15:16.080 --> 15:23.360
implementing a clone method completely by making the clone method protected final. And then that

15:23.360 --> 15:32.080
can't be any overriding taking place. Okay, a small caveat. The caveat is what to do when writing,

15:32.080 --> 15:40.000
not a caveat really, but more of an axillary point, what to do when writing a class for threat safety

15:40.000 --> 15:45.440
for an object to work with multiple threads. So firstly, the objects clone method is not

15:45.440 --> 15:50.000
synchronized. Therefore, it is not thread safe. So we have to keep that in mind when writing a

15:50.000 --> 15:56.320
class. And let's take a look at a demo as to how we can potentially write a thread safe class.

15:56.320 --> 16:01.120
And again, this code isn't complete, they can certainly improve it's simply a blueprint on

16:01.120 --> 16:08.720
writing a thread safe class. Really like, that was a mistake, like writing other threads,

16:08.720 --> 16:16.240
thread safe, thread safe classes, what we can do is define the fields as being synchronized. So

16:16.240 --> 16:21.440
now it's atomic. And then in that class, so have a class called safe kind of which implements cloneable,

16:22.000 --> 16:28.640
this class here is not thread safe. And we can make it thread safe by giving it the

16:28.640 --> 16:34.560
synchronized keyword, which will make this clone is synchronized. And in that in that way,

16:35.200 --> 16:40.640
two objects won't be able to invoke this method at the same time. Sorry, not two objects, two

16:40.640 --> 16:46.560
threads will not be able to invoke this method at the same time. So to recap, what we've discussed

16:46.560 --> 16:55.040
in both part one and part two of item 13, Joshua book states, to recap, as I said, all classes

16:55.040 --> 17:01.520
that implement cloneable should override clone with a public method whose return type is the

17:01.600 --> 17:09.120
class itself. This method should first call super dark clone, as we went through a bit before,

17:09.120 --> 17:16.240
then fix any fields that need fixing. Typically, this means copying any mutable objects that

17:16.240 --> 17:21.840
compromise internal deep structure of the object and replacing the clone's references

17:22.480 --> 17:27.600
to these objects with references to their copies. So that's kind of what we discussed before in

17:27.600 --> 17:33.440
using either recursion or iteration by doing a deep copy. And then just another point he makes,

17:33.440 --> 17:38.320
if the class contains only primitive fields or references to mutable objects,

17:39.440 --> 17:47.440
then it is likely the case that no fields need to be fixed. So then he asks, is all this complexity

17:47.440 --> 17:53.280
really necessary when designing a clone method, or when overriding the clone method of the object

17:53.280 --> 17:57.920
class? When he means all this complexity, we're talking about what we discussed in part one and

17:57.920 --> 18:05.920
now in part two. So a better approach is using a technique called a copy constructor or a copy

18:05.920 --> 18:11.120
factory method. But before we get to that, before we look at the demos, I'll read out what he said.

18:12.400 --> 18:19.200
In regards to the complexity, he said, really, it's not needed. If you extend a class that already

18:19.200 --> 18:23.600
implements cloneable, you have a little choice but to implement a well-behaved clone method.

18:23.600 --> 18:29.360
That's the advantage of using an interface like cloneable, which kind of forces us to

18:29.360 --> 18:36.560
abide by the contract. Otherwise, if we don't use cloneable, you're usually better off providing

18:36.560 --> 18:41.600
an alternative means of object copying. Here's where we get to what I said before. A better

18:41.600 --> 18:48.800
approach to object copying is to provide a copy constructor or copy factory. A copy constructor

18:48.880 --> 18:54.480
is simply a constructor that takes a single argument whose type is the class containing the

18:54.480 --> 18:59.120
constructor, for example. Now, this was really interesting. I don't think I've actually worked

18:59.120 --> 19:03.360
with a copy constructor before. So I found this part quite interesting, despite it coming towards the

19:03.360 --> 19:08.960
end of the item to kind of finalize and conclude on what he was trying to outline in this item.

19:09.920 --> 19:16.240
So firstly, again, this is what the implementation or the signature of a copy constructor would look

19:16.240 --> 19:22.960
like and then the copy factory. Similar kind of signature, but obviously the way it's implemented

19:22.960 --> 19:29.200
is different. So the right, in fact, many advantages to using a copy constructor over a clone method.

19:29.920 --> 19:37.120
Firstly, something that I think I touched on in part one, a clone method can be extra linguistic.

19:37.120 --> 19:43.600
And what I mean by that is that generally a good rule of thumb in Java or OOP programming is

19:44.480 --> 19:49.200
only a constructor should create a new method. Sorry, one of my sign. Only a constructor should

19:49.200 --> 19:53.760
create a new object. But obviously the clone method creates a new object, making it extra

19:53.760 --> 20:00.720
linguistic. And since it is doing it in a kind of a unforeseeable adherence to

20:01.840 --> 20:07.520
purely documented conventions, it's doing it in a way that's not conventional to how an object

20:07.520 --> 20:12.800
would be created. It can create issues. And the documentation isn't that good. At least that's

20:12.800 --> 20:18.160
where Joshua Block states. Now with the copy construct, the constructor, it is in fact creating

20:18.160 --> 20:23.200
a new object. You create a new object. So when the copy construct is being implemented, you

20:23.200 --> 20:30.160
probably see here, we pass a new object into the copy constructor, and it's that that that

20:30.160 --> 20:35.920
does the copying to the new object from the current object. So the construct or the constructor itself

20:35.920 --> 20:42.080
in this case, doesn't do any work of creating new objects and whatnot. All it's doing is

20:42.080 --> 20:46.320
taking in the past object and then doing the copy. And the other advantage of using a copy

20:46.320 --> 20:52.800
constructor would be that when it comes to final classes or immutable classes, if you have this

20:52.800 --> 20:57.280
immutable point class, so the first class I was showing you was point, but now we have another

20:57.280 --> 21:04.640
variant of it that is immutable. We've used the final keyword. When using the clone method,

21:04.640 --> 21:10.960
there can be issues when copying across final fields. Now this again wouldn't happen with the

21:10.960 --> 21:16.000
copy constructor because again, we're creating a new object outside the constructor and passing it

21:16.000 --> 21:21.840
into the method and then doing the copy. And another advantage is that a copy constructor

21:21.840 --> 21:28.640
doesn't require casting because what we're doing is, as I said a couple of times already,

21:29.600 --> 21:35.760
the new object we create is already of type whatever the class is, and that's what we pass

21:35.840 --> 21:40.320
into the copy constructor. So if you use a clone method, for instance, you need to

21:40.320 --> 21:45.200
do this kind of casting, which can be a bit of a pain. Oh, and as I said before, the copy

21:45.200 --> 21:49.840
constructor doesn't have the issue with throwing unnecessary checked exceptions and whatnot,

21:49.840 --> 21:56.640
which is again a part of the clone architecture. So this is an example. I was showing you the

21:57.280 --> 22:00.720
copy constructor and I'm going through this code quite, quite quickly today. I'm sorry about that.

22:00.720 --> 22:06.480
I'm in a bit of a hurry. But obviously, all of it will be available on GitHub. You could go take

22:06.480 --> 22:12.800
a look at it and go through it carefully. Here we have an example of how the copy factory would

22:12.800 --> 22:17.840
work. It's quite similar to, it's just a static factory method. So it's similar to the copy

22:17.840 --> 22:25.280
constructor. It still does the copying and returns a new point by doing the copy fields in the new

22:25.280 --> 22:31.280
object. Another advantage is that a copy constructor factory allows you to take in

22:31.920 --> 22:42.320
an argument as a type, as type argument, when implementing the method or when using the method

22:42.320 --> 22:46.560
as a client, you can pass in the type and that will return you an object of that type. So an

22:46.560 --> 22:51.200
example that just should look as highlighted is between hash and entry sets of assume you have

22:51.680 --> 22:58.560
hash set defined like this of type string and you have an hash set. And then if you want to, so

22:58.560 --> 23:05.040
hash, hash set S. And if you want to copy that across to, let's say a tree set, simply all we

23:05.040 --> 23:14.080
got to do is to go new instance of tree set and then pass in that object with the type tree set

23:14.080 --> 23:20.240
and let it do the conversion automatically. And this is allowed as to how the copy constructors

23:20.800 --> 23:28.000
implemented in hash set. So this won't be possible with the clone object. Oh, sorry,

23:28.000 --> 23:33.760
with the clone method. I'm gonna get a bit tired clearly. Alrighty, that's it. That was part two.

23:33.760 --> 23:41.520
I hope all of that makes sense. If I wasn't clear on certain parts, I apologize. I wrote the

23:41.520 --> 23:46.240
script a while back and I got really busy so I couldn't record the video. But all the codes

23:46.240 --> 23:53.040
available on GitHub and I've kind of commented what I've done so that it kind of makes sense,

23:53.040 --> 23:58.320
despite some of it not being complete code rather being blueprints. But to conclude, Joshua Block

23:58.320 --> 24:05.920
states, given all the problems associated with cloneable new interfaces should not extend it

24:05.920 --> 24:14.080
and new extendable classes should not implement it. While it's less harmful for final classes

24:14.080 --> 24:19.680
to implement cloneable, this should be viewed as a performance optimization reserved for the rare

24:19.680 --> 24:26.080
cases where it is justified. As a rule, copy functionality is best provided by constructors

24:26.080 --> 24:31.440
or factories, which we saw with the copy constructing the copy factory and all the advantages they have

24:31.440 --> 24:37.520
for us. A notable exception to this rule is areas which are best copied with the clone method.

24:37.520 --> 24:43.040
Alrighty, that was item 13 and I hope you found that useful and I'll see you in the next one,

24:43.040 --> 24:48.720
item 14, which is consider implementing comparable. Cheers.

