Hey everyone, welcome to yet another episode of my video series on effective Java by Joshua Block
It's sort of a textbook to code video series where I take
Topics and principles from this book and I'm hoping to do it with many other books and
Expand on these topics and try to understand them and try and see what value or what what we could derive from
What are in these books?
And today, of course, we are on item three, so I've already done this on two other items
And it seems to be going well. I certainly can improve on certain points
Maybe above all on brevity and try and convey the points succinctly
But saying that though, I want to start off with the proviso
So if you did watch the other two episodes, you could skip this bit
I'll leave a timestamp as to where exactly could skip to just to save your time
So for starters, this is not a tutorial. That's a very very important caveat
I'm not a teacher in no way am I a Java expert
In fact, the more I'm learning about Java the more I'm realizing of
More I'm realizing how much of an expert. I'm not
I'd like to think of it as the blind leading the blind in this case, so I'm really not leading
But let's say at least formally because this is a YouTube video kind of formally. I am
Leading the blind somewhere
But that also means that because I'm blind I can make mistakes and run into a wall or something
This is only a
Exploratory discusion. That's pretty much it try to make sense of things
The best I would say analogy
Day-to-day analogy I could use is what would happen in a university tutorial where we have a bunch of students
We have an assignment or a problem statement or some concept
You're trying to grok of course as a tutor
But in this case there really isn't a tutor but just a bunch of students getting together trying to make sense of some programming concept
And needless to state this is a programming video
So it makes sense to have all the code that I use on get out where you could go and play around too
So I shall leave a link down below in the description
Not only do my code but even to the code that Joshua Block has published himself on his personal repository
So with offer the do let's get started on item number three
Which states and foes the singleton property with a private constructor or an enum type and this is still of course a part of chapter 2
Which is regarding?
Creating and destroying objects. So singleton was one of the design patterns that was originally
I don't know if the word is originally, but let's say popularized by the gang of foe in their great software engineering book
Design patterns and a singleton is a design pattern that ensures that a class can only have one object or as Joshua Block states in the book a
Singleton is simply a class that is instantiated exactly once
Singletons typically represent either a stateless object such as a function or a system component that is intrinsically unique
So this creation on design pattern which I said again was proposed or popularized is a more
Accurate term by the angle for it's something one would hear about a lot if you're doing a if you're all be programmer, which is most of us
And it's it's got many advantages, which is probably why we've been told by
The great wise sagacious programming
Gurus to implement it
So I found a few advantages of it keep in mind though if you do follow this link
This is on refactoring guru. By the way, if you do want to understand
Different design patterns this website refactoring guru is fantastic
It'll visualize things and use analogies to the real world which personally for me. I always find that helps me
Comprehend things much better. So this design pattern the singleton pattern has they've expanded on that topic here
They've they've listed listed out not only advantages, but also some cons as you can see here some disadvantage is to
I'm not gonna touch on those because you know going deeply into the single singleton
Because going deeply into the singleton pattern is probably a bit out of scope for this video
But some of the advantages are you can be sure that a class has only a single instance
That really helps with maintaining a certain let's say state of an object more from a
Business perspective, let's say so we we instantiate a class and we give an object object a certain state and
then generally a client would expect this object to behave a certain way and
Forcing or implementing the singleton pattern ensures that this object doesn't behave in ways that a client won't expect
So it helps to sort of maintain the encapsulation of the class and
Yes, you gain a global access point to that instance because obviously only one object access to memory
Whoever that's going to use that object will still use that one single object
The singleton object is initialized only when it's request requested for the first time
So that's kind of like I guess the lacy loading pattern
That again is good because we don't want to create unnecessary objects. Generally, that's bad
That's a bad almost like an anti-pattern in OOP and on that note Joshua block continues
There are two way two common ways. Sorry to implement singletons
Both are based on keeping the constructor private and
exporting a public static member
To provide access to the sole instance
So the first approach is using a public static final field where the the member field that holds this instance is final
Let's explode that and try and make sense of it
What we have here is a class public class called Elvis. By the way, most of this code I've taken from
Joshua blocks the code is used in the book itself
I've just sort of refactored it to make it a bit more easier for us to understand for me to understand
I should speak
Individually because I don't want to pretend as if I'm speaking on behalf of other people here for me to understand
And as you can see here, yeah
The the instance is declared final. So that object becomes immutable
So the Elvis class really has only got a simple method called leave the building which states whoa, baby. I'm out of here
I guess I'm a bit bit too young or from a different generation to really get the Elvis Presley jokes
Which Joshua block has made in this book?
It's kind of a bit
You know before my time, let's say in any case the constructor of course is private because this gives
The class instance control as I've stated in the comment here
And then it's simple as this when we do get that instance access that instance and you can probably see here
We aren't creating any object using the new keyword or what not
We're simply accessing this static member which belongs to the class itself and then through the static member
Which gives us that object the instance we are
Accessing this method. So if I do run this
It'll just say whoa, baby. I'm out of here. Which is really what this object does. There we go right there
And on this bit of code Joshua block states the private constructor is called only once to initialize the public static field
Elvis instance. So that happens here
The the the class itself is
instantiating itself with this private constructor because obviously it has it it has access to this
Constructor within itself and that object is stored in the instance variables. So yeah, the private constructor is called only once
We initialize the public static field Elvis star instance. That's this
the lack of a public or protected constructor guarantees a
Monoelvistic universe. So the idea is as I did show here the client code
You can't instantiate this class. It's impossible because the constructor is private
Exactly one Elvis instance will exist once the Elvis class is initialized. No more. No less
Nothing that a client does can change this with one caveat
This is an interesting point and I shall comment on that in a bit a
Privilege client can invoke the private constructor
Reflectively with the aid of the accessible object dot set accessible method
If you need to defend against its attack modify the constructor to make it throw an exception if it's asked to create a second instance
so firstly, I would say
Before I say anything or comment on what Java reflection is watch this video by code with Joan
Obviously links down below in the description
You know, I've read blog posts what not on this idea of Java reflection, but so far
No one has explained it simply and plainly the way Joan does in his YouTube channel
Just in general code with Joan is a fantastic YouTube channel. I really appreciate his pedagogy and
kind of how what's what I'm looking for
how
Pedestrian and I mean that in the positive sense
He makes Java seem to people like me. Who's to try to you know, truly understand the language
So Java reflection, let me try and explain what it is as the name suggests. It's a way
for a
object or a class to
introspect or reflect on itself. So what it does is generally of course a
client can't go around tampering
private methods and setting
Setting setters or getters in a class
That's not allowed that that violates the OB principle of encapsulation. However
Java disallowed this concept called reflection which from what I've read it's mostly for
Frameworks so for mostly for Java framework builders that does allow a class like this
Which has a private constructor and which don't have any setters which don't have any getters to still
implement that from outside the class using Java reflection
In fact, let me quickly pull out a more of a formal definition of what Java reflection is because I think
It's important to know the concept at least so yes
As I said, this is a definition from Oracle docs like more not really the Oracle doc. Sorry. It's more of a technical article
Whoa written in 1998. That was a yeah after I was born
Reflection is a feature in the Java programming language
It allows an executing Java program to examine or
Interespect upon itself and manipulate internal properties of the program
For example, it's possible for a Java class to obtain the names of all its members and display them
That's an important point here that introspection can be done runtime. So when the program is being executed
but
Better if you just watch this video. It's 22 minutes. Well worth your time
So the second way Joshua block has delineated on creating or implementing singletons is
Using a static factory method
Now if you don't know what that is and don't know the benefits of using a static factory method
I would link you to the first video in the series
Which is item one that talks about the pros or the virtues of using the static factory method and item one states
Consider static factory methods instead of constructors, but for all intents and purposes within our topic
Really, it does the same thing. So if you take this example, which again is another class called Elvis Elvis
Why isn't it opening up? There we go. So yes, same concept
the the constructor is so private and
We only have one object being created here within the class and instead of the client
Directly accessing the member variable that member variable is private in this case
And we rather get it through the static factory method. Oh
This bit here the read resolve will get to that soon for now
Just ignore line number 15 and clearly as he states here
You can see in the code itself one advantage of the static factory approach is that it gives you the flexibility to change your mind
About whether the class is a singleton without changing its API
So what he means by that is if you look at the public field approach
Since we're directly accessing that singleton via the the public member variable
It doesn't really give us a flexibility if we do want to not have a singleton
Let's say if we don't want to fill a singleton single to impact and I should probably add this here
He also states in the previous paragraph
I should have read that before the main advantage of the public field approach is that the API makes it clear
That the class is singleton
The public static field is final so it'll always contain the same object reference, which what do you mean there is from a client perspective?
I've used an inline variable here by the way the the
It's it says here Elvis and we're getting that single instance
Now it's a similar thing we're doing here
The only difference with the static factor method is we're accessing it through this method get instance
Now because it's a method we can play around with it and do what we want so to speak
Which is why Joshua block states it gives you the flexibility to change your mind
About whether the class is a singleton without changing its API
We don't really change anything in this method. What matters is how we handle
This object or what we do inside it from a again from a class clients perspective an example Joshua block has used is something to do with multi-threading
In a multi-thread environment the factory method returns a sole instance
But it could be modified to return say a separate instance for each thread that invokes it that makes sense
We don't want there to be problems with multi-threading by having a single object that all the threads share
Let's that could probably corrupt the state of that object
I don't know just to you know thinking out loud here now
We sort of come to a bit of an ancillary point, but I think is nevertheless important a
Second advantage is that you can write a generic singleton factory if your application requires it
So what is a generic singleton factory? Let's try and make sense of it. Firstly as per usual
I will leave
two
two
Links to two different well one stucco flow answer and then a blog post
Regarding this concept of type erasure, which is what allows generic programming in Java
and
How it happens and why it's it's necessary for generic programming
But it's not really within the scope of what we're discussing here. It's still important to understand though
So what's a generic singleton factory first of all out? I should say we'll be covering this in
item 30 of this book so probably next year
Therefore we shall go into more detail in that video and item 30 simply states favorite generic method
But I propose to
Generic singleton factory in that item
Joshua block states because generics are implemented by ratio. So that's what I meant by this type erasure bit
Please go read up on that blog post article blog post article on that blog post as it'll really expand on the matter
Because generics implemented by ratio you can use a single object for all required type
parameterizations
But you need to write a static factory method to repeatedly dole out the object for each requested type parameterization
This is a very cool concept once you see in an action which I shall which I shall show
It's a bit of tongue twister which I shall show in a bit because it is it is pretty cool
How it all comes together so kind of definition that I came up with for what a generic singleton factory is
It allows to create multiple singletons
That is not a oxymoron
You will see you will see why that is in a bit that behave the same way. So it's kind of got like a same
Supertype which man is how it behaves using generics allows to use a single object for type parameterizations
I'm kind of repeating where Joshua block state
Stay stated and casting is not required that too you shall see so I've got the example here
This too I took from item 30
But I just realized that before I do go through the example and explore the code. I didn't mention
those two the Stack Overflow answer and then this blog post, but I didn't really
even
expand on what what it is or what what they are
So I want to read out a bit of bit of like introduction in this article regarding
Type erasure because type erasure is what allows firstly the the the generic singleton pattern, but also using
generic programming
in Java
generally
Generic programming in Java generally gosh, that's funny
So what does this person say? By the way, this article was written by
Bishal Kumar Dube. So what is Bishal's state here?
Generics concept is introduced in Java language to provide
Tider type checks at compile time and to support generic programming as I said the way to implement generics
The Java compiler applies type erasure
To replace all type parameters in generic types with their bounds or object if the type parameters are unbounded
The produce bytecode we shall go into the bytecode bit to therefore contains only ordinary classes interfaces and methods
Insert type costs if necessary to preserve type safety. That is also something we shall explore
Generate bridge methods to preserve
Polymorphism in extended generic types
So you will see that the the third point here that polymorph polymorphism bit in this example that I'm gonna show soon
See the stochophilons are kind of explained it this way
So we have this class of course here, which is simply a list
Sorry, let's say class. I mean we have the list interface and the other list class
And it's the generic type where the type parameter
We are passing the string and then we're just adding it and we're getting it
But in the bytecode level it really compiles like this
It does do the casting for us now
This is not required for us to do because we're using
Generics and the type erasure allows this
Going to the example here is how the generic singleton pattern works this instance
We have a variable called identity function or identity fm
We have a variable irony function and keep in mind
Object in Java is a superclass for all other classes therefore any subtype of this
Type can be passed into this
So we have this private static final member variable called
Unary operator
And then we have a static factory method
What happens here is that method we can pass a
Type parameters similar to how you would pass a parameter to a method
But in this case it's a type
So then in the client side, you'll firstly see that I'm not using any costs here
And I have two lists up defined. Sorry two arrays not lists in this case
A string array right there. I should probably zoom in a bit more. I apologize
The the string array and then we have the numbers array
So into the same class I'm passing
I'm creating an instance of that class same string
And I'm getting that object same string same number
And I'm passing
In this case the type string and in this case the type number
Now here's where it gets interesting
Despite the different types. It's still using the same object
We're still as Joshua block states here doling out the same object into different types
So in this case we can type we can apply this
and then
Print out all the strings and in this case print out all the numbers, but when we run this code
You'll see here
Why can't I is okay forget about it
When we run this code, you'll see here the object is still the same object that it's using
For both these cases despite them having different types
So I'm printing out the object here same string same number
It's still this object the other any function object that is passing or this single instance
So it's beautiful
And that's what allows generic programming because these are of different types
Yet that object is being passed through these different types to be used and abused. Let's say
So that essentially is what generic singleton factory is it is a factory
We've got a factory here because it's producing or giving we're creating an object
Uh, but no cast is being used. I think that's the biggest advantage
I've seen from that pattern and afterwards joshua block states a final advantage of using a static factory
Is that a method reference
Can be used as a supplier for example?
Elvis get instance, which is the method reference is a supplier for uh is a supplier and Elvis is the type you pass into it
Which is the example I've used here. So let's try and understand. What does it mean?
What what what does he mean by?
method reference being being passed as a supplier
Firstly from the oracle docs, uh, it states
What's a supplier? I want to understand. It's a functional interface supplier
Sorry, the functional interface supplier contains one method
Which is get that takes no argument and returns an object. But but what's important to understand is
It it this get method
Represents a function which does not take any arguments
But produces a value of type t. So yes, the get method doesn't produce any arguments
But it has a type the type could be passed as a generic
By the way, that latter bit I read from this article again in geeks for geeks, uh, which I'll leave a link down below in the description
Which explains what a supplier interface is written by this person
Sell one two three. So this is a bit hard to get intuitively even though most of us in functional programming use
A method reference, but the method reference requires a supplier
This functional interface supplier interface does requires
Yeah, it requires a supplier and we need to pass it a type
In this case with the class Elvis
We could pass the type Elvis as the generic parameter
As as of it being of type Elvis
um
I don't know. I don't know how else to explain it really
It just it just seems like it's something that allows us to do functional programming
And which is why javas introduced that interface. Probably it was in javae. I think
um
And yes, the the static factor method allows us to do that essentially because of the get instance method
That we define right there in any case
I hope that explanation did do some justice to what a supplier interface is if not, please go read the oracle docs
Honestly, I don't really find it too interesting. So I didn't go too deeply into it
But it just seems like something javae introduced
To allow functional programming
But back to this this bit is on
Still providing the singleton guarantee
when serializing classes
To maintain to maintain the singleton guarantee declare all instance instance fields
Transient so what does transient mean? That means it won't be serialized and provide a read resolve method
This is the bit I said I'll get to a bit later that bit right there
this
ensures that there's
The singleton property or the singleton patterns followed during during serialization
However, it's not really worth going too deeply into it. Uh, but uh, sorry, you know what before I go
Going everywhere with this. I'll I'll finish the rest of that sentence or that paragraph
So I'll say to maintain a singleton instance to to maintain the singleton guarantee
Declare all instance fields transient and provide a read resolve method
Which he points to in item 89. I shall get to that too
otherwise each time
A serialized instance is deserialized a new instance will be created
leading
In the case of our example to spurious elvis sightings
So firstly that that idea of
Read resolve method
There's a whole chapter in the book on serialization serial serialization. Why do I find it hard to pronounce that word?
serialization
When item 89, which is why I said it's not worth spending too much time on this because
Joshua block in fact says don't use read resolve methods in item 89
He states for instance control. So that's what we're doing here. We're
Practicing instance control instance control prefer enum types to read resolve
So we're going to get to enum types next therefore
It's not really worth going too deeply into what this read resolve method does but just in general
Because it always returns this single instance we defined here
It enforces singleton once again, but this time especially during serialization serialization
Can't pronounce that word
And according to this definition by michael mayers. I've left a link to that
It's a it's a blog post in this in the description too
Read resolve is used to for replacing the object stream
Object object read from the stream. What can't I read today? The only use I've ever seen for this is enforcing singleton
Oh, sorry. This was from in fact
a stackable flow answer not a blog post but
Nevertheless, I shall leave a link to all of that down below in the description
When an object is read replace it with the singleton instance. So when this object is read, it's going to replace it with this instance
This ensures that nobody can create another instance by serializing and deserializing the singleton
However, it makes no sense to go too deeply into read resolve because
technically or theoretically
As per the
Sagacious advice of just your blog. We shouldn't even be using this method
We should be using the third method technique or the third way
To enforce singleton property, which is with a enum type not an enum type using a single enum
I don't know why I said enum type makes no sense. This is by far the simplest way. It's
I think two lines of code if I'm not mistaken. So let me open it up
It is in fact. Yes, really
I don't even know if you consider this is more like a member variable, but it's one line of code
This is the simplest way to enforce singleton. Look at that. Just two lines of code really
One two, I don't know. I don't want to start a debate here. What's wrong with me?
and really all we're doing is
story that instance and
It's a factor that it's enum
We get most of these things we were trying to explicitly declare in the source code
By by virtue of it being an enum
So, yeah, it provides serialization
Serialization for free and by default won't be able to instantiate multiple times because they're static
And final effectively
In java every enum is implicitly a subclass of the enum class
So it cannot be used if singleton needs to extend a superclass. Oh, yes, this is an important point
He gets to this in the in the in the end of the paragraph
I shall I shall the really the only disadvantage of using an enum to
I wouldn't even say
Disadvantage more of something something to be wary of when using an enum is this last bit
Which I shall touch on a bit in which I which I which I shall touch on in a bit
Ah, my constant struggle to talk
The best approach this approach may feel a bit unnatural. This is where Joshua block states. So, yeah, I mean, I don't know if
In my few years of programming, I haven't really used an enum for much other than as being a container for holding
constants
So it does feel a bit unnatural
But a single element enum type is often the best way to to implement a singleton
And then he states, this is the bit I stood out touch on
Note that you can't use this approach if your singleton must extend a superclass other than enum
Though you can declare an enum to implement interfaces, of course, because in java we can't extend
multiple classes because
By default any enum will is already extending the enum superclass
Let's say Elvis had to
extend a class called human
That wouldn't be allowed because if we use enum
However, you could probably get through that through interfaces. So not really a big deal
That was a much shorter video. It was a much shorter item two
And that's it. That's item number three that that's so essentially the idea is unless we have
to extend a superclass the singleton
Then just use enums to
end for a singleton property and we also did discuss initially some of the advantages of using a singleton
On that note, I shall thank you for letting me again
Go about these things like a drunken sailor
And get lost sometimes in my own musings. It is really interesting though. It is quite interesting how
As I said many times already how all these items are interrelated kind of like the bible
The next item item number four, which I'm hoping to cover soon, which again is a shorter item
It's it's probably the shortest item in this book is
Enforce non instantiability with a private constructor. We've sort of already done that
We've already sort of covered
de facto covered that item in this item because all the examples we used did have private constructors
But it's worth
Way when I say there's an example right this this one right here
But of course as Joshua bloke has identified it's worth going into detail as to why we need to enforce
Non instantiability saying that once again. Thanks for watching. I'll see you in the next one. Cheers
