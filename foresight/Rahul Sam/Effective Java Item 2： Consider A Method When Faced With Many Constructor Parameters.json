{"text": " Hey everyone, welcome to this second episode of the video series that I've very Incipitally and uncreatively called textbook to code where I take software engineering and computer science principles from textbooks and Convert them to code and expound on them and try and make sense of them in as much detail as I can manage and the book I've picked for this well, I guess for the start of this series is Effective Java by Joshua Block certainly the best programming book I've read so far and the book's got I believe 90 yes 90 items and we're still on item two So I'm sure it's gonna take me a long time to get through the whole book But that's what's exciting about this because I I feel like One item leads to another item and that item leads to another item And that would point to some design pattern that would point to some concept in Java or you know computer science in general and I find that really interesting and Really, I hope a lot of a lot of programming books and especially well written the way this book is written By Joshua Block saying that though as per usual as I did do in the previous episode I want to make a few caveats or have a little bit of a proviso So if you did watch the previous episode you can skip this bit Because I'll pretty much be repeating the same thing for any new viewers Uh, the first point of course is this is not a tutorial. So unlike many Programming videos on youtube. I certainly don't want this to be a tutorial. I'm not a teacher definitely not an expert and I'm not trying to Tell you how something is done really what I'm doing is Collectively trying to make sense of certain concepts in this book And trying to understand them it really in many ways is a selfish pursuit in that sense Because I'm not trying to teach anyone. I'm just trying to make sense of it and you know along the way if you get value from it Fantastic, that's at least what I hope frankly. I like to think of it as blindly leading the blind Uh, but in this case really I'm not leading but I guess because you're watching this video in some sense I am but uh, I am as blind and ignorant as you are Uh, it's this is simply a Exploratory disposition. That's it. Uh, and I think what I want this to be is is similar to what We would do what I mean We if you've done a computer science or software engineering degree in a university tutorial where you get together There is a tutorial of course but generally what happens is you get together with your mates with your The other students and try to make sense of some assignment problem or some programming problem And I think there's great learning that happens in that kind of Collaborative collective thinking and needless to say but I have to say it because this is a proviso for all I will inevitably make mistakes. So please point them out. Leave them down in the comment section below Of course for my own learning, but especially because I don't want to mislead anyone And I think that's why in every single video, even though it's going to get a bit repetitive I am gonna have this bit where I do say, please don't think of this as a tutorial I don't think I'm in a place to teach anyone programming at the moment And on the note of programming, of course, this is a programming video So, uh, it only makes sense to have all the code that I use on get up Not only my code, but I'll also link All the code that Joshua block has Published on his personal get up repository For item two of effective java. So on that note without further ado, let's get started The second item states consider a builder method when faced with many constructor parameters Personally, I found it much easier to understand this item than the previous one. It made a lot more sense Probably because I have faced this problem Day to day working in my team Where there's mostly a utility class with a whole bunch of parameters for constructors And it can be a real pain to manage and even using it as a client can be It's quite chaotic at times and quite a mess So he states Static factories and constructors share a limitation They do not scale well to a large number of optional parameters So of course, I don't think I need to go into detail on what optional parameters mean The term itself is self-explanatory And over here though, this example kind of demonstrates that even though what we've done here is use the telescope constructor pattern, which Joshua block says is a bad idea that it probably shouldn't be used even though This is what traditionally programmers have used and in fact in the codebith that I'm working on right now in my current company I believe this is what we've done. Oh Well, I think we did this in a previous version, but we did change it up. So that's that's really good Um, and this is what this really does is as you can see here. I have two instances of the nutrition facts class, which is Uh, this class here. It's got a bunch of privately defined member variables and This is the bit that sort of implements the telescope constructor, but I'll get to that a bit later the idea being Both these instances Koch and Bundaberg They've got different number of parameters have been passed into it because of course some optional. In fact, I think most optional Uh, and depending on how you want to build it how you want to construct your object. You can define it So now let's go to the bit where dorsal box says Traditionally, as I did say before programmers have used a telescoping constructor pattern In which you provide a constructor with only the required parameters Another with a single optional parameter a third with two optional parameters And so on culminating in a constructor with all the optional parameters So these two objects Koch and Bundaberg which both are instances of the nutrition facts class The Koch object is pretty much using all the parameters It's using this constructor here. Oh, sorry this constructor here And then the Bundaberg object, which is just using only three optional parameters. We've said which uses this constructor here Regardless, you probably can see what I'm doing now. We've passed a lot of zeros. It's unnecessary and even on the client side Or on the client that's using this constructor has just passed zeros sometimes when for the value fat Uh, and you know, it's not that complicated if you look at the code base, you can see that it's firstly It's very verbose just just the constructors itself in the beginning of the class You got God knows how many I mean here. There are only six parameters, but imagine if it's a class with 20 30 member variables or whatever you want to you want to set when you know constructing that class Constructing that object, sorry And as Joshua Bock says in short the telescoping constructor pattern works Of course it does But it is hard to write client code when there are many parameters and harder still to read He also states and this is kind of funny. This is uh, I recently tweeted That I like to call myself a programmer, but IntelliJ writes most of my code for me So I don't really do anything anymore Than just using autofill and IntelliJ kind of taking care of everything else The id that the modern ids are so good that this problem doesn't really apply anymore I think because he says here if the client accidentally accidentally Reverses two such parameters the compiler won't complain, but the program will misbehave at runtime So what he means here is you probably can see, uh, let's take this second object Bundaberg Bundaburg object And what we need to pass as the first parameter is the serving size and then it'll get it'll get set properly in the class member And then there's servings and calories. So let's say You said the serving size is two and servings as 360 that is wrong, but the compiler won't complain The error will only come up at runtime. Maybe the q18 will pick it up or some unit test. Who knows? um, but Of course with i with IntelliJ or most modern ids that problem won't be an issue because when the client is using that constructor It does exactly say what you're supposed to pass. So it's pretty clear and explicit, but nevertheless That's one downside of it and we shouldn't always rely on ids um The negative of course is the problem is scaling and also just passing these useless zeros into constructors So and it's fair to say arguably, uh, the telescope constructor is an anti-pattern Where our class has multiple constructors with different signatures varying parameters in particular and I believe if you do just google the word Constructor pattern, there'll be a lot of blog posts regarding why it is an anti-pattern um Look at this just the the top searches are regarding alternatives to the telescope constructor pattern it being an anti-pattern whatnot um, and even this video here saying avoid telescope telescoping constructors with build a pattern Makes sense. Uh, probably a lot of these blog posts were inspired by Joshua Bloke himself That moves us to something probably a bit better than the telescope constructor pattern The java beans pattern in this pattern you call a Parameterless constructor to create the object and then call setter methods to set each required parameter And each optional parameter of interest. So let's see what that means But before we get to that, I just realized I should expound on these two points. It'll just make things a bit more easier. Um, now Java beans, what is java beans? We we hear this term everywhere if you're a java developer All that is is a standard It gives a class an empty constructor with getters and setters. Um, a public sorry a public argumentless argumentless constructor and it's also serializable Even though this is what a java beans is the java beans pattern still isn't the most apt pattern to use when faced with many constructors and as Joshua Bloke him I'm going to start calling him JB. It's just easier because Joshua Bloke is a mouthful So as JB himself states the java beans pattern has serious disadvantages So I did read out the definition of what this pattern is before This is really much easier to even understand conceptually than the telescoping constructor pattern Clearly what you're doing here. So we've got another class. We've got a class called nutrition facts JB Um, why do I call it JB? I don't know why it's oh, of course because it's uh java beans I I wanted to call it JB just to differentiate it. I guess and we've declared or we've defined the empty public constructor here And that allows us to create a coca-cola object of this from this class and simply using the setters I've set all the values. So whatever the members are serving size calories whatnot And yeah, it's as simple as that. That's what it does. However, as I said before, this is not a good pattern to use when one is given a class with a lot of constructor parameters Firstly, of course, you know practically speaking as you can say it's a bit verbose It's it's it's just to create this object You got to do all these things and use setters and set the values kind of annoying Uh, and the second one and this is an interesting one. I'm going to first read out the paragraph and explain what JB means by this The class does not have the option of enforcing consistency merely by checking the validity of the constructor parameters Attempting to use an object when it's in an inconsistent state may cause failures That are far removed from the code containing the bug and hence difficult to debug A related disadvantage is that java bean's pattern precludes the possibility of making a class immutable And requires added effort on the part of the programmer to ensure threat safety. What that really means is this it's and I'm again, I there are all these terms some of these terms are a big technical and But I'm quite sure, you know, I'm not a senior java and programmer who's been coding for years and years I've only really been coding for a couple two or three years But I've I've still seen things like this day to day at work so over here you Initially construct the coca-cola object with the empty construct empty constructor And then you say you set the value using a setup set serving whatever and then you say set servings whatever Set calories whatever and then let's say while This object is in the process of being constructed. It's it's it's in a certain state Someone decides to do some computation here using this object So decides to do some computation using This object coca-cola Now this can give us a lot of problems because the class doesn't mandate For the object to have a consistent state when it's being created because let's say When this computation takes place these two values set sodium and set carbohydrate are necessary And most of these errors will only be called runtime It cannot be called compile time clearly It cannot be called compile time because if I just go and let's say do something here system. I'm just gonna print this out I know it's really not a computation But it doesn't throw any errors here the id doesn't indicate that all this this this object is in an inconsistent state And this is a in my opinion when I did Understand what this is. I think it can be a serious disadvantage, especially in large enterprise level Systems, which is mostly what chava is used for, you know, in like distributed systems And he is just to reiterate the point jebi makes Attempting to use an object when it's in an inconsistent state. So Let's just assume for all intents and purposes At best level this critical object is in an inconsistent state. We don't want it to be in that state and be used by a client Make us failures that are far removed from the code containing the bug and hence difficult to debug I don't make sense because they're runtime errors and we all know that runtime errors are quite difficult to debug And in my notes, I've stated here with a bit more brevity compared to the long-winded way I explained it Splitting the construction to multiple parts may put the java being in an inconsistent state So clearly the construction is being split into multiple parts and there's a high possibility That it could be in such an inconsistent state Which is why JB proposes Using the builder pattern Now what is the builder pattern? So let's try to understand firstly. There's a quote that I've got here by But the great book uh from from the great book design patterns by the gang of four I haven't read that book yet. I I own a copy. I refer to it, but I'm I'm really hoping to do a similar video with that book too Probably I'll probably get I'll probably do this But first the head first design patterns And then I'll see if it's worth doing one of that book too. I'm just gonna do it. I'm just gonna do it Because I want to because I'm a I'm a fan. I'm a I'm a connoisseur of great programming books So here's what the gang of four states What the builder pattern does is separate the construction of a complex object From its representation so that the same construction process can create different representations Okay, what in the world does that mean? Let's take a look at another way the nutrition facts class Was constructed but in this case Using the builder pattern on the client side using the builder pattern on the nutrition effects class Constructing the objects using that pattern It's done beautifully. It helps us to circumvent some of the disadvantages that we discussed earlier with the previous patterns But saying that though Of course, it's a bit harder to understand as to how it works. The first thing to keep in mind is There's an inner public study class called builder So the separate builder class in the nutrition facts class and when we do construct this object There's no way of constructing it without using this builder class the the inner builder class Let's run go through this line by line. I think that's the best way to understand this when we do construct this object We don't directly use the nutrition facts class. We instead Make the desired object using this inner builder class and of course because it's static You could just access it as it belongs to the nutrition facts class itself You could access it directly. I mean so simply put the way the client Really constructs this object is using the builder object and the builder object has some setup methods How does that work? So let's take a look at this it's got nutrition facts our builder and of course There are some parameters that are mandatory you you need them to even construct this object and those the those two are In this the builder class is serving size and servings So that would be defined here When we do the constructor for the builder class Have these two values as being mandatory and afterwards, of course, it allows us to Simply set the other values as per our requirements as for the client's requirements So in the for coca-cola, we've set the calories the calories are right here And then we've set Oh, there's another thing I want to add here. Do we get to that a bit later? Oh, sorry, there's a bit here about invalid parameters. We shall get to that a bit later So we are adding the calories and the way we're adding the sodium carbohydrate, whatever And those stuff are being passed on to the private constructor construction Jesus the private constructor of the nutrition facts class And it's been accessed through this builder object Then afterwards when the the client is done using or the client is done constructing The coca-cola object you simply use the build method and build the object quite straightforward if you think about it and even Practically or conceptually this makes a lot of no sense. And yeah, I should mention this the client calls a Parameterless build method, which I did mention To generate the object which is typically immutable and now I want to get to that bit that I said I'll discuss a bit later Previously, it's this idea about having valid parameters Here's a good example of this in the builder class. So the only role for the builder class is to really build objects therefore in all these methods one could do checks for invalid parameters and throw Illegal argument exceptions if for instance when building this class. Sorry when building this object someone passes a Parameter of a or an argument which is of illegal typo If it's of illegal quality I'm just looking for the word here doesn't matter Sometimes sorry. It's been a long day my mind my mind my mind brains everywhere Here's here's an example of this So calories, of course anything can't really have negative calories. At least that's what we're told And I think that's true. So over here I've initially I've passed the calories to be 100 when constructing this object and I'm doing a check On the calories method, which is here in this method whether the value is Well, the value should be greater than zero for me to set it into the calories member variable If not, I'll throw a illegal argument exception. So if I go And do minus eight And then if I try to run it There we go at runtime, I'll say, you know, it's negative. You can't have negative calories. What are you crazy? What are you trying to sell one of those? Fit teas on instagram I'm just I'm trying to make a joke and be funny, but that was just a terrible joke pathetic uh, so Joshua block says To detect invalid parameters as soon as possible Check parameter validity in the builders constructor constructor and methods. So that's what I've done here pretty much Check invariance involving multiple parameters. So this is again, I'm checking this parameter here Do the checks on object fields after copying parameters from the builder if a check fails Throw an illegal argument exception Whose detail message indicates which parameter is invalid That's that's actually a good point because it even tells us specifically here where it's failing. So we know Debugging is much easier that that that's a best way of putting it because if you do recall with the previous two patents a big issue is Even if something fails on runtime the debugging can be a lot more harder and much more deeply in the code that is Not gonna make programming easy and of course if I didn't already state before the code is a lot more neater. It looks prettier You could use method chaining keeps the code concise and very importantly. We don't run into that problem of having objects uh in Inconsistent states like we would do with the java beans pattern Because that isn't allowed here because you need to chain all the methods when constructing the object And certainly method chaining is something we see a lot in different jdk libraries It's most probably because they've used the builder pattern Which is why for us using them. It's a lot more easier And then jb states the builder pattern is well suited to class hierarchies Use a parallel hierarchy of builders each nested in the corresponding class Abstract classes can have abstract builders Concrete classes can have concrete builders. This was a bit hard for me to get it I wouldn't say it was hard for me to get but there's one certain part which I'll get to a bit later involving generics Which I had to really struggle to get my head around it But once again, though it does once you once it does make sense once it once it clicks You can see the beauty of the builder pattern in it and that's the best part about it So let's try to understand what he means by the builder pattern is well suited to class hierarchies Firstly, I'll simply define or explain this class hierarchy. I've built here We have a simple abstract pizza class which I've defined here as you can see And then we have two subclasses that inherits this class. We have calzone Which extends which is a concrete class that extends the abstract pizza class And then we have we have sorry new york pizza, which is also another concrete class which extends the abstract pizza class and afterwards if you do go to the client you could see How it's been implemented and again, I know this is a very high level, but I'll go into the details soon Similar pattern if you do run it You'll see both these objects being have been created and I'm getting the superclass It's both got the same pizza superclass make sense similar pattern ending with the build method so firstly Let's take a look at the pizza class the pizza abstract class and see what's going on here In the similar way because we're using the builder pattern. We have another inner static builder class But you probably see it's a bit more different We need to allow something called a simulated self type now This was the bit that Took me a bit to grok and make sense of because it involves using generics and it's doing something called a simulated self type What what does that mean? Let me see if I could explain it. I would say I got it, but I think I'm I'm still struggling to articulate it clearly And and let me let me let me give a shot So I didn't get what a simulated self type was from effective java. I couldn't understand it and then I found this great blog post by This gentleman's name is nicolai palok Fantastic article. It was written in 2016 Pretty much goes into everything you need to know about The idea of java not having a a self method or it doesn't allow us Self and this those two keywords are a bit different. We will I'll I'll get you that too Um because java doesn't have that we sort of have to simulate it And that's what just your block is doing in this example But also what one would generally do uh to get a self type And it's important to understand. Oh if we didn't do the simulated self type We may have to use casting and that is not going to work because it's very important to understand that for the builder pattern to work with the Method chaining which I have where where's an example? Nope Always when you need an x. Oh, yeah. No, that's not the exact that's telescope construct Yeah, for this method chaining to happen the proper type or the proper subtype Have has to be passed. Uh, sorry has to be returned And in the hierarchical, this is a bad example. I should be using the hierarchical builders one Yes, over here in the class hierarchies the proper subtype has to be returned For this method chaining to work. So what a simulated self type does is these subclasses so In this instance, it's new york pizza and calzone They can get an instance of their own type instead of the parent and and again I know i'm sort of beating on a dead horse here But it's important to understand that for this method method chaining to work They have to get a instance Of their own type not the parent not the abstract class pizza New york pizza has to get a an instance of new york pizza or of of type of Subtype the new york pizza and before I do a deep dive in the code I want to read these excerpts from nickolai palogues a blog post the recent being again I think it's important to first conceptually understand What a simulated self type is what's the reason for it and its justifications. Let's say so Nikolai states a self type refers to the type on which a method is called more formally the receiver But java doesn't have this feature. So In here the self type would be Why can't I what do I keep losing that that that class or that bit of code? Bloody annoying Where is it? There we go, you son of a bitch Um, so here this in the method chaining On which method is called more formally called the receiver a self type so The receiver should get new york pizza type, but java unfortunately it doesn't have this particular feature of a self type If a soft type Is used in an inherited method It represents a different type in each class that declares or inherits that method Namely that specific class No matter whether it declared or inherited the method casually speaking it is the compile time equivalent of this dot get class or the type of this I think Well, I was gonna say I think that's quite straightforward, but it probably will be quite straightforward once we Look into the code base. Let's start off with the abstract class It kind of makes sense because the subclasses are going to inherit this. So we have this pizza constructor method here Oh, I want to state one thing. Um I will not go into detail on this bit But because we will be discussing it in a future video in item 50 to be Uh specific, but the idea is that over here in line number 33. We are making what one would call a defensive copy this is just to ensure that The encaps and encapsulation of this class is in broken that that fundamental OOP principle isn't infringed upon we Stick to our principles. So as OOP programmers So what this does is when the native class changes immutable objects feel A defensive copy should be made anytime it's passed into a constructor like this or out of the class When the object of this class will be created this topics member is what's going to change It's going to be mutable Because in the add toppings method it's it's being changed essentially And and that's why we create this defensive copy again, I'm not going to go into detail firstly because I think this is a bad example to understand it. It even took me a while. I had to go through some blog posts But also because we will be discussing that in the future and when we do get to item 50 Which probably is going to be next year. I shall leave a link to that video in the description too In any case, I don't want to go off on our tangent because I want to focus on the Simulated self type. So pizza dot builder Is a generic type that would be Here when we do construct the builder object Uh, it's a generic type with a recursive type parameter. That's a confusing bit because well, it's called a Recursive type parameter because as you can see pizza dot builder is extending the builder with its own generic type parameter And and I've even left a comment here saying that this the the generic type parameter here is necessary for the training to work And same comment I've left here. It allows to simulate the self type And just a box says this alone with the abstract self method that would be this And this will be overridden by the subclasses Because it's in fact, this is probably a bit more easy to understand because it's called self sort of makes sense This is what gives the subclass an instance of their own type instead of the parent instead of pizza. So Uh, new york pizza would get an instance of their own type instead of the pizza type However in combination with this bit here the recursive Uh, sorry the simulated Man the recursive self parameter. This is really annoying because it's it's it's really how to get your head around it and this abstract self method It allows us For method training to work and this is the key point without the need for casts You probably remember I showed an example before which was this. So let's assume this extends some Superclass called super person And here when this does return it It shouldn't it if you don't put the cast it will return Uh, a type of super person not person and which is why the cast is required here. However in our case When we're using the bill of pattern because of this abstract self method, we don't have to do that We don't have to use the casts and I shall show you now in a subclass. So let's use new york pizza where this happens firstly We we pass the proper subtype of this class to the generic parameter That's for sure And then we have this bit here where the overriding takes place Of the self method where it returns an instance of the subclass of new york pizza and not pizza And in that way as we do use the The method training and finally the build method returns the correct subclass It will not which it's clearly over here. It's saying return new new york pizza of this instance So this is what allows it all to beautifully come together when we do use it Over here with the method chain I don't know How well of a job I did at explaining that it is a difficult concept to grasp especially the the recursive type parameter I I still I'm struggling to understand that really from something honest, but um Maybe in the future videos I should consider Coming up with Married examples not just this particular example But trying to even create because this this this some of this code I got from joshu blocks get up repository Uh, well most of it in fact, so I should probably try and create some examples on my own Which it'll make it easy for me to Expand on in any case, um JB states this technique. It's sort of funny. Sometimes I refer to him as JB sometimes as joshu block What am I doing the perpetual contradictions? I'm just going to stick to joshu block. I changed my mind jb joshu block sounds better. It's it's it's got a beautiful name. What can I say? um This technique wherein a subclass method is declared to return a subtype of the return type declared in the superclass is known as covariant return typing It allows clients to use their builders without the need for casting covariant return typing To be honest, isn't that hard to understand? Um, and what we're really doing here is covariant covariant return typing by getting uh A subtype of the return type So if you go to simply if you go here, I have two classes. I have the class. I created two classes Oh, also, uh, thanks to this stack overflow user who helped me understand this The person's name is the person also gets into something called contra variants But we shall not get into that because it's not that apt to java. Uh, however, it's just an interesting engineering uh, opsof opsof programming concept to understand This user hard coded thanks to this user on stack overflow. I shall leave a Link to the answer down below in the comment section. Sorry in the description so Here's simply what covariant um What was it covariant return typing is We have a class called author, uh, and this author Has this method. So it's got a private member field called name and then of of type object And then you have another method called get author name Simple as that and then we have another subclass uh, distevsky my favorite author who extends the Superclass author, uh, and here we're setting Another private member variable with the name field order stavsky And here we are returning a subtype because string is a Subtype of object of the object class because think about it. This is this is covariance because While they just return a subclass of the return type, which is again object and string as I Describe before it still fulfills the contract of author dot get author name. This contract here Is Fulfilled This is what covariance is and the same concept of course applies in the hierarchical classes With the builder pattern because this returns a subtype of Sorry, new york pizza. Let's say that class returns a subtype It is a subtype of Uh pizza and it does fulfill that contract down the the method chaining If that makes sense and to conclude just your block states the minor advantage of builders over constructors is that Builders can have multiple Parameters because each parameter is specified in its own method make sense. Um, I think new york pizza Oh pizza test probably isn't the best example but a good example would be The nutrition facts class We can have as many constructors as we want because all these constructors get their own method and he continues alternatively Builders can aggregate the parameters passed into multiple calls to a method in a single field As demonstrated in the at toppings method earlier. So this at toppings method as you can see We're passing multiple parameters Into the at toppings method or more accurately making multiple calls and this Builder class is aggregating it continues a single builder can be used repeatedly to build multiple objects, of course. So Examples here pizza calzone Different objects being constructed in different ways using the same builder class The parameters of the builder can be tweaked between invocations of the build method to vary the objects that are created These parameters can be changed as we require depending on how we write The different methods in the builder class a builder can fill in some fields automatically upon object creation such as serial number That increases each time an object is created. This is a very astute point I think a good example of that would be similar to the idea of You know checking what the proper arguments past time doing type checks and different Validations on a method because these are methods a lot can be done within the builder class So if I try to go back to the previous example where I was checking for the proper argument The way we've done this check in calories. We could even have Something which automatically adds a certain value or Changes an object automatically depending on the way it's called And it could all be done simply because it's a method and of course like all great programming and engineering books ineffective java just show bloke does discuss the trade-offs. He explicitly states the Disadvantages of using the builder pattern for this instance And one of them is something I already discussed. It's certainly a bit hard to understand One has to get their head around it, especially with the simulated self typing and whatnot and understanding how the inner Class works within the bigger class And and that can be a bit more verbose and certainly a bit harder to grasp initially and then he also says that if you Start out with obsolete constructors and static factories and then you know move the code base to a builder pattern Which I think is what happens most of the time So this second point, you know, the first point is you know, it's a matter of practice the more you use it I believe the more one will become more Attuned to using the builder pattern but the second one is definitely a trade-off worth considering because Generally what would happen is we would not use a builder pattern in a large code base And then we would want to use it as the number of parameters increases And then making that shift can be quite hard So if it's a green field project and if you're starting from scratch always better to start with the builder pattern even if One has you know a small number of parameters for a certain class That's it. That is the second item of effective java by Joshua block Uh, I sincerely do hope that you got some kind of value out of this And I I really am trying to get better at making these videos and really expanding on these points It is a bit hard because firstly, I don't think Programming and Computational thinking naturally comes to me. I need to really struggle with the problem a lot for it to make sense And I think that's most people really so this isn't like false modesty or whatever. I think it's it's normal for most people Uh, and I did realize for instance the part where I was going through the simulated self type That was a bit harder to understand But on that note, I want to thank you for watching this video Our next item is going to be and I have already started writing the script for it and You know putting putting the code base together The item three is enforced a singleton property with a private constructor or an enum type This item is a bit easier to understand than the previous two. I can assure you that In any case, thank you for watching. Uh, I do appreciate it. Uh, I appreciate you allowing me to ramble and go on It's good. Cheers. See you in the next one", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 4.48, "text": " Hey everyone, welcome to this second episode of the video series that I've very", "tokens": [50364, 1911, 1518, 11, 2928, 281, 341, 1150, 3500, 295, 264, 960, 2638, 300, 286, 600, 588, 50588], "temperature": 0.0, "avg_logprob": -0.2656161125670088, "compression_ratio": 1.6932773109243697, "no_speech_prob": 0.10048661381006241}, {"id": 1, "seek": 0, "start": 5.04, "end": 13.96, "text": " Incipitally and uncreatively called textbook to code where I take software engineering and computer science principles from textbooks and", "tokens": [50616, 682, 11371, 270, 379, 293, 6219, 620, 3413, 1219, 25591, 281, 3089, 689, 286, 747, 4722, 7043, 293, 3820, 3497, 9156, 490, 33587, 293, 51062], "temperature": 0.0, "avg_logprob": -0.2656161125670088, "compression_ratio": 1.6932773109243697, "no_speech_prob": 0.10048661381006241}, {"id": 2, "seek": 0, "start": 14.8, "end": 21.68, "text": " Convert them to code and expound on them and try and make sense of them in as much detail as I can manage", "tokens": [51104, 2656, 3281, 552, 281, 3089, 293, 1278, 554, 322, 552, 293, 853, 293, 652, 2020, 295, 552, 294, 382, 709, 2607, 382, 286, 393, 3067, 51448], "temperature": 0.0, "avg_logprob": -0.2656161125670088, "compression_ratio": 1.6932773109243697, "no_speech_prob": 0.10048661381006241}, {"id": 3, "seek": 0, "start": 22.400000000000002, "end": 26.76, "text": " and the book I've picked for this well, I guess for the start of this series is", "tokens": [51484, 293, 264, 1446, 286, 600, 6183, 337, 341, 731, 11, 286, 2041, 337, 264, 722, 295, 341, 2638, 307, 51702], "temperature": 0.0, "avg_logprob": -0.2656161125670088, "compression_ratio": 1.6932773109243697, "no_speech_prob": 0.10048661381006241}, {"id": 4, "seek": 2676, "start": 27.48, "end": 34.92, "text": " Effective Java by Joshua Block certainly the best programming book I've read so far and the book's got I believe", "tokens": [50400, 17764, 488, 10745, 538, 24005, 17500, 3297, 264, 1151, 9410, 1446, 286, 600, 1401, 370, 1400, 293, 264, 1446, 311, 658, 286, 1697, 50772], "temperature": 0.0, "avg_logprob": -0.1839581365170686, "compression_ratio": 1.7683823529411764, "no_speech_prob": 0.014496204443275928}, {"id": 5, "seek": 2676, "start": 35.160000000000004, "end": 38.92, "text": " 90 yes 90 items and we're still on item two", "tokens": [50784, 4289, 2086, 4289, 4754, 293, 321, 434, 920, 322, 3174, 732, 50972], "temperature": 0.0, "avg_logprob": -0.1839581365170686, "compression_ratio": 1.7683823529411764, "no_speech_prob": 0.014496204443275928}, {"id": 6, "seek": 2676, "start": 39.480000000000004, "end": 42.52, "text": " So I'm sure it's gonna take me a long time to get through the whole book", "tokens": [51000, 407, 286, 478, 988, 309, 311, 799, 747, 385, 257, 938, 565, 281, 483, 807, 264, 1379, 1446, 51152], "temperature": 0.0, "avg_logprob": -0.1839581365170686, "compression_ratio": 1.7683823529411764, "no_speech_prob": 0.014496204443275928}, {"id": 7, "seek": 2676, "start": 42.6, "end": 45.400000000000006, "text": " But that's what's exciting about this because I I feel like", "tokens": [51156, 583, 300, 311, 437, 311, 4670, 466, 341, 570, 286, 286, 841, 411, 51296], "temperature": 0.0, "avg_logprob": -0.1839581365170686, "compression_ratio": 1.7683823529411764, "no_speech_prob": 0.014496204443275928}, {"id": 8, "seek": 2676, "start": 46.28, "end": 49.480000000000004, "text": " One item leads to another item and that item leads to another item", "tokens": [51340, 1485, 3174, 6689, 281, 1071, 3174, 293, 300, 3174, 6689, 281, 1071, 3174, 51500], "temperature": 0.0, "avg_logprob": -0.1839581365170686, "compression_ratio": 1.7683823529411764, "no_speech_prob": 0.014496204443275928}, {"id": 9, "seek": 2676, "start": 49.88, "end": 56.040000000000006, "text": " And that would point to some design pattern that would point to some concept in Java or you know computer science in general", "tokens": [51520, 400, 300, 576, 935, 281, 512, 1715, 5102, 300, 576, 935, 281, 512, 3410, 294, 10745, 420, 291, 458, 3820, 3497, 294, 2674, 51828], "temperature": 0.0, "avg_logprob": -0.1839581365170686, "compression_ratio": 1.7683823529411764, "no_speech_prob": 0.014496204443275928}, {"id": 10, "seek": 5604, "start": 56.6, "end": 58.6, "text": " and I find that really interesting and", "tokens": [50392, 293, 286, 915, 300, 534, 1880, 293, 50492], "temperature": 0.0, "avg_logprob": -0.1663803504063533, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.004903037566691637}, {"id": 11, "seek": 5604, "start": 59.24, "end": 64.84, "text": " Really, I hope a lot of a lot of programming books and especially well written the way this book is written", "tokens": [50524, 4083, 11, 286, 1454, 257, 688, 295, 257, 688, 295, 9410, 3642, 293, 2318, 731, 3720, 264, 636, 341, 1446, 307, 3720, 50804], "temperature": 0.0, "avg_logprob": -0.1663803504063533, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.004903037566691637}, {"id": 12, "seek": 5604, "start": 65.24, "end": 70.28, "text": " By Joshua Block saying that though as per usual as I did do in the previous episode", "tokens": [50824, 3146, 24005, 17500, 1566, 300, 1673, 382, 680, 7713, 382, 286, 630, 360, 294, 264, 3894, 3500, 51076], "temperature": 0.0, "avg_logprob": -0.1663803504063533, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.004903037566691637}, {"id": 13, "seek": 5604, "start": 70.92, "end": 73.8, "text": " I want to make a few caveats or have a little bit of a proviso", "tokens": [51108, 286, 528, 281, 652, 257, 1326, 11730, 1720, 420, 362, 257, 707, 857, 295, 257, 1439, 19227, 51252], "temperature": 0.0, "avg_logprob": -0.1663803504063533, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.004903037566691637}, {"id": 14, "seek": 5604, "start": 73.96000000000001, "end": 77.0, "text": " So if you did watch the previous episode you can skip this bit", "tokens": [51260, 407, 498, 291, 630, 1159, 264, 3894, 3500, 291, 393, 10023, 341, 857, 51412], "temperature": 0.0, "avg_logprob": -0.1663803504063533, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.004903037566691637}, {"id": 15, "seek": 5604, "start": 77.48, "end": 81.32, "text": " Because I'll pretty much be repeating the same thing for any new viewers", "tokens": [51436, 1436, 286, 603, 1238, 709, 312, 18617, 264, 912, 551, 337, 604, 777, 8499, 51628], "temperature": 0.0, "avg_logprob": -0.1663803504063533, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.004903037566691637}, {"id": 16, "seek": 8132, "start": 81.88, "end": 87.63999999999999, "text": " Uh, the first point of course is this is not a tutorial. So unlike many", "tokens": [50392, 4019, 11, 264, 700, 935, 295, 1164, 307, 341, 307, 406, 257, 7073, 13, 407, 8343, 867, 50680], "temperature": 0.0, "avg_logprob": -0.19216182314116378, "compression_ratio": 1.5700934579439252, "no_speech_prob": 0.042060963809490204}, {"id": 17, "seek": 8132, "start": 88.19999999999999, "end": 93.96, "text": " Programming videos on youtube. I certainly don't want this to be a tutorial. I'm not a teacher", "tokens": [50708, 8338, 2810, 2145, 322, 12487, 13, 286, 3297, 500, 380, 528, 341, 281, 312, 257, 7073, 13, 286, 478, 406, 257, 5027, 50996], "temperature": 0.0, "avg_logprob": -0.19216182314116378, "compression_ratio": 1.5700934579439252, "no_speech_prob": 0.042060963809490204}, {"id": 18, "seek": 8132, "start": 94.44, "end": 96.44, "text": " definitely not an expert", "tokens": [51020, 2138, 406, 364, 5844, 51120], "temperature": 0.0, "avg_logprob": -0.19216182314116378, "compression_ratio": 1.5700934579439252, "no_speech_prob": 0.042060963809490204}, {"id": 19, "seek": 8132, "start": 96.44, "end": 98.44, "text": " and I'm not trying to", "tokens": [51120, 293, 286, 478, 406, 1382, 281, 51220], "temperature": 0.0, "avg_logprob": -0.19216182314116378, "compression_ratio": 1.5700934579439252, "no_speech_prob": 0.042060963809490204}, {"id": 20, "seek": 8132, "start": 98.83999999999999, "end": 102.83999999999999, "text": " Tell you how something is done really what I'm doing is", "tokens": [51240, 5115, 291, 577, 746, 307, 1096, 534, 437, 286, 478, 884, 307, 51440], "temperature": 0.0, "avg_logprob": -0.19216182314116378, "compression_ratio": 1.5700934579439252, "no_speech_prob": 0.042060963809490204}, {"id": 21, "seek": 8132, "start": 103.72, "end": 107.96, "text": " Collectively trying to make sense of certain concepts in this book", "tokens": [51484, 31896, 3413, 1382, 281, 652, 2020, 295, 1629, 10392, 294, 341, 1446, 51696], "temperature": 0.0, "avg_logprob": -0.19216182314116378, "compression_ratio": 1.5700934579439252, "no_speech_prob": 0.042060963809490204}, {"id": 22, "seek": 10796, "start": 108.44, "end": 112.75999999999999, "text": " And trying to understand them it really in many ways is a selfish pursuit in that sense", "tokens": [50388, 400, 1382, 281, 1223, 552, 309, 534, 294, 867, 2098, 307, 257, 19074, 23365, 294, 300, 2020, 50604], "temperature": 0.0, "avg_logprob": -0.16505939677610235, "compression_ratio": 1.7735849056603774, "no_speech_prob": 0.041452955454587936}, {"id": 23, "seek": 10796, "start": 113.24, "end": 119.16, "text": " Because I'm not trying to teach anyone. I'm just trying to make sense of it and you know along the way if you get value from it", "tokens": [50628, 1436, 286, 478, 406, 1382, 281, 2924, 2878, 13, 286, 478, 445, 1382, 281, 652, 2020, 295, 309, 293, 291, 458, 2051, 264, 636, 498, 291, 483, 2158, 490, 309, 50924], "temperature": 0.0, "avg_logprob": -0.16505939677610235, "compression_ratio": 1.7735849056603774, "no_speech_prob": 0.041452955454587936}, {"id": 24, "seek": 10796, "start": 119.47999999999999, "end": 124.67999999999999, "text": " Fantastic, that's at least what I hope frankly. I like to think of it as blindly leading the blind", "tokens": [50940, 21320, 11, 300, 311, 412, 1935, 437, 286, 1454, 11939, 13, 286, 411, 281, 519, 295, 309, 382, 47744, 5775, 264, 6865, 51200], "temperature": 0.0, "avg_logprob": -0.16505939677610235, "compression_ratio": 1.7735849056603774, "no_speech_prob": 0.041452955454587936}, {"id": 25, "seek": 10796, "start": 125.32, "end": 130.28, "text": " Uh, but in this case really I'm not leading but I guess because you're watching this video in some sense", "tokens": [51232, 4019, 11, 457, 294, 341, 1389, 534, 286, 478, 406, 5775, 457, 286, 2041, 570, 291, 434, 1976, 341, 960, 294, 512, 2020, 51480], "temperature": 0.0, "avg_logprob": -0.16505939677610235, "compression_ratio": 1.7735849056603774, "no_speech_prob": 0.041452955454587936}, {"id": 26, "seek": 10796, "start": 130.35999999999999, "end": 134.2, "text": " I am but uh, I am as blind and ignorant as you are", "tokens": [51484, 286, 669, 457, 2232, 11, 286, 669, 382, 6865, 293, 29374, 382, 291, 366, 51676], "temperature": 0.0, "avg_logprob": -0.16505939677610235, "compression_ratio": 1.7735849056603774, "no_speech_prob": 0.041452955454587936}, {"id": 27, "seek": 13420, "start": 134.76, "end": 136.76, "text": " Uh, it's this is simply a", "tokens": [50392, 4019, 11, 309, 311, 341, 307, 2935, 257, 50492], "temperature": 0.0, "avg_logprob": -0.16229898279363458, "compression_ratio": 1.7074074074074075, "no_speech_prob": 0.013014208525419235}, {"id": 28, "seek": 13420, "start": 137.32, "end": 144.2, "text": " Exploratory disposition. That's it. Uh, and I think what I want this to be is is similar to what", "tokens": [50520, 12514, 284, 4745, 40293, 13, 663, 311, 309, 13, 4019, 11, 293, 286, 519, 437, 286, 528, 341, 281, 312, 307, 307, 2531, 281, 437, 50864], "temperature": 0.0, "avg_logprob": -0.16229898279363458, "compression_ratio": 1.7074074074074075, "no_speech_prob": 0.013014208525419235}, {"id": 29, "seek": 13420, "start": 144.83999999999997, "end": 146.04, "text": " We would do what I mean", "tokens": [50896, 492, 576, 360, 437, 286, 914, 50956], "temperature": 0.0, "avg_logprob": -0.16229898279363458, "compression_ratio": 1.7074074074074075, "no_speech_prob": 0.013014208525419235}, {"id": 30, "seek": 13420, "start": 146.04, "end": 152.83999999999997, "text": " We if you've done a computer science or software engineering degree in a university tutorial where you get together", "tokens": [50956, 492, 498, 291, 600, 1096, 257, 3820, 3497, 420, 4722, 7043, 4314, 294, 257, 5454, 7073, 689, 291, 483, 1214, 51296], "temperature": 0.0, "avg_logprob": -0.16229898279363458, "compression_ratio": 1.7074074074074075, "no_speech_prob": 0.013014208525419235}, {"id": 31, "seek": 13420, "start": 153.32, "end": 154.44, "text": " There is a tutorial of course", "tokens": [51320, 821, 307, 257, 7073, 295, 1164, 51376], "temperature": 0.0, "avg_logprob": -0.16229898279363458, "compression_ratio": 1.7074074074074075, "no_speech_prob": 0.013014208525419235}, {"id": 32, "seek": 13420, "start": 154.44, "end": 157.32, "text": " but generally what happens is you get together with your mates with your", "tokens": [51376, 457, 5101, 437, 2314, 307, 291, 483, 1214, 365, 428, 31488, 365, 428, 51520], "temperature": 0.0, "avg_logprob": -0.16229898279363458, "compression_ratio": 1.7074074074074075, "no_speech_prob": 0.013014208525419235}, {"id": 33, "seek": 13420, "start": 158.04, "end": 162.92, "text": " The other students and try to make sense of some assignment problem or some programming problem", "tokens": [51556, 440, 661, 1731, 293, 853, 281, 652, 2020, 295, 512, 15187, 1154, 420, 512, 9410, 1154, 51800], "temperature": 0.0, "avg_logprob": -0.16229898279363458, "compression_ratio": 1.7074074074074075, "no_speech_prob": 0.013014208525419235}, {"id": 34, "seek": 16292, "start": 163.72, "end": 166.83999999999997, "text": " And I think there's great learning that happens in that kind of", "tokens": [50404, 400, 286, 519, 456, 311, 869, 2539, 300, 2314, 294, 300, 733, 295, 50560], "temperature": 0.0, "avg_logprob": -0.14106620682610405, "compression_ratio": 1.6389891696750902, "no_speech_prob": 0.00955515168607235}, {"id": 35, "seek": 16292, "start": 167.48, "end": 173.39999999999998, "text": " Collaborative collective thinking and needless to say but I have to say it because this is a proviso for all", "tokens": [50592, 44483, 1166, 12590, 1953, 293, 643, 1832, 281, 584, 457, 286, 362, 281, 584, 309, 570, 341, 307, 257, 1439, 19227, 337, 439, 50888], "temperature": 0.0, "avg_logprob": -0.14106620682610405, "compression_ratio": 1.6389891696750902, "no_speech_prob": 0.00955515168607235}, {"id": 36, "seek": 16292, "start": 173.88, "end": 179.72, "text": " I will inevitably make mistakes. So please point them out. Leave them down in the comment section below", "tokens": [50912, 286, 486, 28171, 652, 8038, 13, 407, 1767, 935, 552, 484, 13, 9825, 552, 760, 294, 264, 2871, 3541, 2507, 51204], "temperature": 0.0, "avg_logprob": -0.14106620682610405, "compression_ratio": 1.6389891696750902, "no_speech_prob": 0.00955515168607235}, {"id": 37, "seek": 16292, "start": 180.35999999999999, "end": 184.6, "text": " Of course for my own learning, but especially because I don't want to mislead anyone", "tokens": [51236, 2720, 1164, 337, 452, 1065, 2539, 11, 457, 2318, 570, 286, 500, 380, 528, 281, 3346, 306, 345, 2878, 51448], "temperature": 0.0, "avg_logprob": -0.14106620682610405, "compression_ratio": 1.6389891696750902, "no_speech_prob": 0.00955515168607235}, {"id": 38, "seek": 16292, "start": 185.07999999999998, "end": 188.83999999999997, "text": " And I think that's why in every single video, even though it's going to get a bit repetitive", "tokens": [51472, 400, 286, 519, 300, 311, 983, 294, 633, 2167, 960, 11, 754, 1673, 309, 311, 516, 281, 483, 257, 857, 29404, 51660], "temperature": 0.0, "avg_logprob": -0.14106620682610405, "compression_ratio": 1.6389891696750902, "no_speech_prob": 0.00955515168607235}, {"id": 39, "seek": 18884, "start": 189.24, "end": 193.72, "text": " I am gonna have this bit where I do say, please don't think of this as a tutorial", "tokens": [50384, 286, 669, 799, 362, 341, 857, 689, 286, 360, 584, 11, 1767, 500, 380, 519, 295, 341, 382, 257, 7073, 50608], "temperature": 0.0, "avg_logprob": -0.14263008736275337, "compression_ratio": 1.7041666666666666, "no_speech_prob": 0.041422490030527115}, {"id": 40, "seek": 18884, "start": 194.04, "end": 197.16, "text": " I don't think I'm in a place to teach anyone programming at the moment", "tokens": [50624, 286, 500, 380, 519, 286, 478, 294, 257, 1081, 281, 2924, 2878, 9410, 412, 264, 1623, 50780], "temperature": 0.0, "avg_logprob": -0.14263008736275337, "compression_ratio": 1.7041666666666666, "no_speech_prob": 0.041422490030527115}, {"id": 41, "seek": 18884, "start": 198.04, "end": 201.96, "text": " And on the note of programming, of course, this is a programming video", "tokens": [50824, 400, 322, 264, 3637, 295, 9410, 11, 295, 1164, 11, 341, 307, 257, 9410, 960, 51020], "temperature": 0.0, "avg_logprob": -0.14263008736275337, "compression_ratio": 1.7041666666666666, "no_speech_prob": 0.041422490030527115}, {"id": 42, "seek": 18884, "start": 201.96, "end": 206.2, "text": " So, uh, it only makes sense to have all the code that I use on get up", "tokens": [51020, 407, 11, 2232, 11, 309, 787, 1669, 2020, 281, 362, 439, 264, 3089, 300, 286, 764, 322, 483, 493, 51232], "temperature": 0.0, "avg_logprob": -0.14263008736275337, "compression_ratio": 1.7041666666666666, "no_speech_prob": 0.041422490030527115}, {"id": 43, "seek": 18884, "start": 206.6, "end": 209.0, "text": " Not only my code, but I'll also link", "tokens": [51252, 1726, 787, 452, 3089, 11, 457, 286, 603, 611, 2113, 51372], "temperature": 0.0, "avg_logprob": -0.14263008736275337, "compression_ratio": 1.7041666666666666, "no_speech_prob": 0.041422490030527115}, {"id": 44, "seek": 18884, "start": 209.8, "end": 212.04, "text": " All the code that Joshua block has", "tokens": [51412, 1057, 264, 3089, 300, 24005, 3461, 575, 51524], "temperature": 0.0, "avg_logprob": -0.14263008736275337, "compression_ratio": 1.7041666666666666, "no_speech_prob": 0.041422490030527115}, {"id": 45, "seek": 18884, "start": 212.92000000000002, "end": 215.08, "text": " Published on his personal get up repository", "tokens": [51568, 21808, 4173, 322, 702, 2973, 483, 493, 25841, 51676], "temperature": 0.0, "avg_logprob": -0.14263008736275337, "compression_ratio": 1.7041666666666666, "no_speech_prob": 0.041422490030527115}, {"id": 46, "seek": 21508, "start": 215.56, "end": 221.48000000000002, "text": " For item two of effective java. So on that note without further ado, let's get started", "tokens": [50388, 1171, 3174, 732, 295, 4942, 361, 4061, 13, 407, 322, 300, 3637, 1553, 3052, 22450, 11, 718, 311, 483, 1409, 50684], "temperature": 0.0, "avg_logprob": -0.16600105239123833, "compression_ratio": 1.5341880341880343, "no_speech_prob": 0.027164630591869354}, {"id": 47, "seek": 21508, "start": 222.20000000000002, "end": 228.76000000000002, "text": " The second item states consider a builder method when faced with many constructor parameters", "tokens": [50720, 440, 1150, 3174, 4368, 1949, 257, 27377, 3170, 562, 11446, 365, 867, 47479, 9834, 51048], "temperature": 0.0, "avg_logprob": -0.16600105239123833, "compression_ratio": 1.5341880341880343, "no_speech_prob": 0.027164630591869354}, {"id": 48, "seek": 21508, "start": 229.16000000000003, "end": 234.60000000000002, "text": " Personally, I found it much easier to understand this item than the previous one. It made a lot more sense", "tokens": [51068, 21079, 11, 286, 1352, 309, 709, 3571, 281, 1223, 341, 3174, 813, 264, 3894, 472, 13, 467, 1027, 257, 688, 544, 2020, 51340], "temperature": 0.0, "avg_logprob": -0.16600105239123833, "compression_ratio": 1.5341880341880343, "no_speech_prob": 0.027164630591869354}, {"id": 49, "seek": 21508, "start": 235.16000000000003, "end": 237.96, "text": " Probably because I have faced this problem", "tokens": [51368, 9210, 570, 286, 362, 11446, 341, 1154, 51508], "temperature": 0.0, "avg_logprob": -0.16600105239123833, "compression_ratio": 1.5341880341880343, "no_speech_prob": 0.027164630591869354}, {"id": 50, "seek": 21508, "start": 238.52, "end": 240.52, "text": " Day to day working in my team", "tokens": [51536, 5226, 281, 786, 1364, 294, 452, 1469, 51636], "temperature": 0.0, "avg_logprob": -0.16600105239123833, "compression_ratio": 1.5341880341880343, "no_speech_prob": 0.027164630591869354}, {"id": 51, "seek": 24052, "start": 241.08, "end": 247.08, "text": " Where there's mostly a utility class with a whole bunch of parameters for constructors", "tokens": [50392, 2305, 456, 311, 5240, 257, 14877, 1508, 365, 257, 1379, 3840, 295, 9834, 337, 7690, 830, 50692], "temperature": 0.0, "avg_logprob": -0.09964188133797995, "compression_ratio": 1.6135265700483092, "no_speech_prob": 0.017171846702694893}, {"id": 52, "seek": 24052, "start": 247.8, "end": 252.44, "text": " And it can be a real pain to manage and even using it as a client can be", "tokens": [50728, 400, 309, 393, 312, 257, 957, 1822, 281, 3067, 293, 754, 1228, 309, 382, 257, 6423, 393, 312, 50960], "temperature": 0.0, "avg_logprob": -0.09964188133797995, "compression_ratio": 1.6135265700483092, "no_speech_prob": 0.017171846702694893}, {"id": 53, "seek": 24052, "start": 253.56, "end": 255.72, "text": " It's quite chaotic at times and quite a mess", "tokens": [51016, 467, 311, 1596, 27013, 412, 1413, 293, 1596, 257, 2082, 51124], "temperature": 0.0, "avg_logprob": -0.09964188133797995, "compression_ratio": 1.6135265700483092, "no_speech_prob": 0.017171846702694893}, {"id": 54, "seek": 24052, "start": 256.44, "end": 258.04, "text": " So he states", "tokens": [51160, 407, 415, 4368, 51240], "temperature": 0.0, "avg_logprob": -0.09964188133797995, "compression_ratio": 1.6135265700483092, "no_speech_prob": 0.017171846702694893}, {"id": 55, "seek": 24052, "start": 259.56, "end": 262.76, "text": " Static factories and constructors share a limitation", "tokens": [51316, 745, 2399, 24813, 293, 7690, 830, 2073, 257, 27432, 51476], "temperature": 0.0, "avg_logprob": -0.09964188133797995, "compression_ratio": 1.6135265700483092, "no_speech_prob": 0.017171846702694893}, {"id": 56, "seek": 24052, "start": 263.16, "end": 267.24, "text": " They do not scale well to a large number of optional parameters", "tokens": [51496, 814, 360, 406, 4373, 731, 281, 257, 2416, 1230, 295, 17312, 9834, 51700], "temperature": 0.0, "avg_logprob": -0.09964188133797995, "compression_ratio": 1.6135265700483092, "no_speech_prob": 0.017171846702694893}, {"id": 57, "seek": 26724, "start": 267.8, "end": 271.64, "text": " So of course, I don't think I need to go into detail on what optional parameters mean", "tokens": [50392, 407, 295, 1164, 11, 286, 500, 380, 519, 286, 643, 281, 352, 666, 2607, 322, 437, 17312, 9834, 914, 50584], "temperature": 0.0, "avg_logprob": -0.1588231000033292, "compression_ratio": 1.6411149825783973, "no_speech_prob": 0.015656793490052223}, {"id": 58, "seek": 26724, "start": 272.04, "end": 274.76, "text": " The term itself is self-explanatory", "tokens": [50604, 440, 1433, 2564, 307, 2698, 12, 3121, 16554, 4745, 50740], "temperature": 0.0, "avg_logprob": -0.1588231000033292, "compression_ratio": 1.6411149825783973, "no_speech_prob": 0.015656793490052223}, {"id": 59, "seek": 26724, "start": 275.40000000000003, "end": 280.84000000000003, "text": " And over here though, this example kind of demonstrates that even though what we've done here is use the", "tokens": [50772, 400, 670, 510, 1673, 11, 341, 1365, 733, 295, 31034, 300, 754, 1673, 437, 321, 600, 1096, 510, 307, 764, 264, 51044], "temperature": 0.0, "avg_logprob": -0.1588231000033292, "compression_ratio": 1.6411149825783973, "no_speech_prob": 0.015656793490052223}, {"id": 60, "seek": 26724, "start": 281.48, "end": 283.48, "text": " telescope constructor pattern, which", "tokens": [51076, 26114, 47479, 5102, 11, 597, 51176], "temperature": 0.0, "avg_logprob": -0.1588231000033292, "compression_ratio": 1.6411149825783973, "no_speech_prob": 0.015656793490052223}, {"id": 61, "seek": 26724, "start": 283.56, "end": 287.32, "text": " Joshua block says is a bad idea that it probably shouldn't be used even though", "tokens": [51180, 24005, 3461, 1619, 307, 257, 1578, 1558, 300, 309, 1391, 4659, 380, 312, 1143, 754, 1673, 51368], "temperature": 0.0, "avg_logprob": -0.1588231000033292, "compression_ratio": 1.6411149825783973, "no_speech_prob": 0.015656793490052223}, {"id": 62, "seek": 26724, "start": 288.12, "end": 294.68, "text": " This is what traditionally programmers have used and in fact in the codebith that I'm working on right now in my current company", "tokens": [51408, 639, 307, 437, 19067, 41504, 362, 1143, 293, 294, 1186, 294, 264, 3089, 65, 355, 300, 286, 478, 1364, 322, 558, 586, 294, 452, 2190, 2237, 51736], "temperature": 0.0, "avg_logprob": -0.1588231000033292, "compression_ratio": 1.6411149825783973, "no_speech_prob": 0.015656793490052223}, {"id": 63, "seek": 29468, "start": 295.0, "end": 297.0, "text": " I believe this is what we've done. Oh", "tokens": [50380, 286, 1697, 341, 307, 437, 321, 600, 1096, 13, 876, 50480], "temperature": 0.0, "avg_logprob": -0.10620303948720296, "compression_ratio": 1.673992673992674, "no_speech_prob": 0.01690329797565937}, {"id": 64, "seek": 29468, "start": 297.40000000000003, "end": 302.44, "text": " Well, I think we did this in a previous version, but we did change it up. So that's that's really good", "tokens": [50500, 1042, 11, 286, 519, 321, 630, 341, 294, 257, 3894, 3037, 11, 457, 321, 630, 1319, 309, 493, 13, 407, 300, 311, 300, 311, 534, 665, 50752], "temperature": 0.0, "avg_logprob": -0.10620303948720296, "compression_ratio": 1.673992673992674, "no_speech_prob": 0.01690329797565937}, {"id": 65, "seek": 29468, "start": 303.0, "end": 309.64, "text": " Um, and this is what this really does is as you can see here. I have two instances of the nutrition facts class, which is", "tokens": [50780, 3301, 11, 293, 341, 307, 437, 341, 534, 775, 307, 382, 291, 393, 536, 510, 13, 286, 362, 732, 14519, 295, 264, 14718, 9130, 1508, 11, 597, 307, 51112], "temperature": 0.0, "avg_logprob": -0.10620303948720296, "compression_ratio": 1.673992673992674, "no_speech_prob": 0.01690329797565937}, {"id": 66, "seek": 29468, "start": 310.52, "end": 313.72, "text": " Uh, this class here. It's got a bunch of privately defined", "tokens": [51156, 4019, 11, 341, 1508, 510, 13, 467, 311, 658, 257, 3840, 295, 31919, 7642, 51316], "temperature": 0.0, "avg_logprob": -0.10620303948720296, "compression_ratio": 1.673992673992674, "no_speech_prob": 0.01690329797565937}, {"id": 67, "seek": 29468, "start": 314.28000000000003, "end": 316.28000000000003, "text": " member variables and", "tokens": [51344, 4006, 9102, 293, 51444], "temperature": 0.0, "avg_logprob": -0.10620303948720296, "compression_ratio": 1.673992673992674, "no_speech_prob": 0.01690329797565937}, {"id": 68, "seek": 29468, "start": 316.76, "end": 322.92, "text": " This is the bit that sort of implements the telescope constructor, but I'll get to that a bit later the idea being", "tokens": [51468, 639, 307, 264, 857, 300, 1333, 295, 704, 17988, 264, 26114, 47479, 11, 457, 286, 603, 483, 281, 300, 257, 857, 1780, 264, 1558, 885, 51776], "temperature": 0.0, "avg_logprob": -0.10620303948720296, "compression_ratio": 1.673992673992674, "no_speech_prob": 0.01690329797565937}, {"id": 69, "seek": 32292, "start": 323.88, "end": 326.76, "text": " Both these instances Koch and Bundaberg", "tokens": [50412, 6767, 613, 14519, 40401, 293, 10203, 455, 17025, 50556], "temperature": 0.0, "avg_logprob": -0.2459315669779875, "compression_ratio": 1.5923076923076922, "no_speech_prob": 0.0018385358853265643}, {"id": 70, "seek": 32292, "start": 327.32, "end": 333.96000000000004, "text": " They've got different number of parameters have been passed into it because of course some optional. In fact, I think most optional", "tokens": [50584, 814, 600, 658, 819, 1230, 295, 9834, 362, 668, 4678, 666, 309, 570, 295, 1164, 512, 17312, 13, 682, 1186, 11, 286, 519, 881, 17312, 50916], "temperature": 0.0, "avg_logprob": -0.2459315669779875, "compression_ratio": 1.5923076923076922, "no_speech_prob": 0.0018385358853265643}, {"id": 71, "seek": 32292, "start": 334.44, "end": 339.96000000000004, "text": " Uh, and depending on how you want to build it how you want to construct your object. You can define it", "tokens": [50940, 4019, 11, 293, 5413, 322, 577, 291, 528, 281, 1322, 309, 577, 291, 528, 281, 7690, 428, 2657, 13, 509, 393, 6964, 309, 51216], "temperature": 0.0, "avg_logprob": -0.2459315669779875, "compression_ratio": 1.5923076923076922, "no_speech_prob": 0.0018385358853265643}, {"id": 72, "seek": 32292, "start": 340.52000000000004, "end": 344.04, "text": " So now let's go to the bit where dorsal box says", "tokens": [51244, 407, 586, 718, 311, 352, 281, 264, 857, 689, 274, 830, 304, 2424, 1619, 51420], "temperature": 0.0, "avg_logprob": -0.2459315669779875, "compression_ratio": 1.5923076923076922, "no_speech_prob": 0.0018385358853265643}, {"id": 73, "seek": 32292, "start": 345.0, "end": 349.64, "text": " Traditionally, as I did say before programmers have used a telescoping constructor pattern", "tokens": [51468, 22017, 15899, 11, 382, 286, 630, 584, 949, 41504, 362, 1143, 257, 37085, 278, 47479, 5102, 51700], "temperature": 0.0, "avg_logprob": -0.2459315669779875, "compression_ratio": 1.5923076923076922, "no_speech_prob": 0.0018385358853265643}, {"id": 74, "seek": 34964, "start": 350.28, "end": 354.44, "text": " In which you provide a constructor with only the required parameters", "tokens": [50396, 682, 597, 291, 2893, 257, 47479, 365, 787, 264, 4739, 9834, 50604], "temperature": 0.0, "avg_logprob": -0.19804474115371704, "compression_ratio": 1.8585858585858586, "no_speech_prob": 0.0018381408881396055}, {"id": 75, "seek": 34964, "start": 355.15999999999997, "end": 357.88, "text": " Another with a single optional parameter", "tokens": [50640, 3996, 365, 257, 2167, 17312, 13075, 50776], "temperature": 0.0, "avg_logprob": -0.19804474115371704, "compression_ratio": 1.8585858585858586, "no_speech_prob": 0.0018381408881396055}, {"id": 76, "seek": 34964, "start": 358.28, "end": 360.28, "text": " a third with two optional parameters", "tokens": [50796, 257, 2636, 365, 732, 17312, 9834, 50896], "temperature": 0.0, "avg_logprob": -0.19804474115371704, "compression_ratio": 1.8585858585858586, "no_speech_prob": 0.0018381408881396055}, {"id": 77, "seek": 34964, "start": 360.76, "end": 361.96, "text": " And so on", "tokens": [50920, 400, 370, 322, 50980], "temperature": 0.0, "avg_logprob": -0.19804474115371704, "compression_ratio": 1.8585858585858586, "no_speech_prob": 0.0018381408881396055}, {"id": 78, "seek": 34964, "start": 361.96, "end": 365.8, "text": " culminating in a constructor with all the optional parameters", "tokens": [50980, 28583, 990, 294, 257, 47479, 365, 439, 264, 17312, 9834, 51172], "temperature": 0.0, "avg_logprob": -0.19804474115371704, "compression_ratio": 1.8585858585858586, "no_speech_prob": 0.0018381408881396055}, {"id": 79, "seek": 34964, "start": 366.2, "end": 371.71999999999997, "text": " So these two objects Koch and Bundaberg which both are instances of the nutrition facts class", "tokens": [51192, 407, 613, 732, 6565, 40401, 293, 10203, 455, 17025, 597, 1293, 366, 14519, 295, 264, 14718, 9130, 1508, 51468], "temperature": 0.0, "avg_logprob": -0.19804474115371704, "compression_ratio": 1.8585858585858586, "no_speech_prob": 0.0018381408881396055}, {"id": 80, "seek": 34964, "start": 372.36, "end": 375.88, "text": " The Koch object is pretty much using all the parameters", "tokens": [51500, 440, 40401, 2657, 307, 1238, 709, 1228, 439, 264, 9834, 51676], "temperature": 0.0, "avg_logprob": -0.19804474115371704, "compression_ratio": 1.8585858585858586, "no_speech_prob": 0.0018381408881396055}, {"id": 81, "seek": 37588, "start": 376.68, "end": 379.96, "text": " It's using this constructor here. Oh, sorry this constructor here", "tokens": [50404, 467, 311, 1228, 341, 47479, 510, 13, 876, 11, 2597, 341, 47479, 510, 50568], "temperature": 0.0, "avg_logprob": -0.16607699102284956, "compression_ratio": 1.8068669527896997, "no_speech_prob": 0.014953063800930977}, {"id": 82, "seek": 37588, "start": 380.6, "end": 386.2, "text": " And then the Bundaberg object, which is just using only three optional parameters. We've said which uses", "tokens": [50600, 400, 550, 264, 10203, 455, 17025, 2657, 11, 597, 307, 445, 1228, 787, 1045, 17312, 9834, 13, 492, 600, 848, 597, 4960, 50880], "temperature": 0.0, "avg_logprob": -0.16607699102284956, "compression_ratio": 1.8068669527896997, "no_speech_prob": 0.014953063800930977}, {"id": 83, "seek": 37588, "start": 386.92, "end": 388.92, "text": " this constructor here", "tokens": [50916, 341, 47479, 510, 51016], "temperature": 0.0, "avg_logprob": -0.16607699102284956, "compression_ratio": 1.8068669527896997, "no_speech_prob": 0.014953063800930977}, {"id": 84, "seek": 37588, "start": 388.92, "end": 396.28, "text": " Regardless, you probably can see what I'm doing now. We've passed a lot of zeros. It's unnecessary and even on the client side", "tokens": [51016, 25148, 11, 291, 1391, 393, 536, 437, 286, 478, 884, 586, 13, 492, 600, 4678, 257, 688, 295, 35193, 13, 467, 311, 19350, 293, 754, 322, 264, 6423, 1252, 51384], "temperature": 0.0, "avg_logprob": -0.16607699102284956, "compression_ratio": 1.8068669527896997, "no_speech_prob": 0.014953063800930977}, {"id": 85, "seek": 37588, "start": 397.15999999999997, "end": 403.8, "text": " Or on the client that's using this constructor has just passed zeros sometimes when for the value fat", "tokens": [51428, 1610, 322, 264, 6423, 300, 311, 1228, 341, 47479, 575, 445, 4678, 35193, 2171, 562, 337, 264, 2158, 4046, 51760], "temperature": 0.0, "avg_logprob": -0.16607699102284956, "compression_ratio": 1.8068669527896997, "no_speech_prob": 0.014953063800930977}, {"id": 86, "seek": 40380, "start": 404.52000000000004, "end": 410.04, "text": " Uh, and you know, it's not that complicated if you look at the code base, you can see that it's firstly", "tokens": [50400, 4019, 11, 293, 291, 458, 11, 309, 311, 406, 300, 6179, 498, 291, 574, 412, 264, 3089, 3096, 11, 291, 393, 536, 300, 309, 311, 27376, 50676], "temperature": 0.0, "avg_logprob": -0.18811619838821553, "compression_ratio": 1.6812749003984064, "no_speech_prob": 0.004068599548190832}, {"id": 87, "seek": 40380, "start": 410.12, "end": 414.04, "text": " It's very verbose just just the constructors itself in the beginning of the class", "tokens": [50680, 467, 311, 588, 9595, 541, 445, 445, 264, 7690, 830, 2564, 294, 264, 2863, 295, 264, 1508, 50876], "temperature": 0.0, "avg_logprob": -0.18811619838821553, "compression_ratio": 1.6812749003984064, "no_speech_prob": 0.004068599548190832}, {"id": 88, "seek": 40380, "start": 414.68, "end": 421.0, "text": " You got God knows how many I mean here. There are only six parameters, but imagine if it's a class with 20 30", "tokens": [50908, 509, 658, 1265, 3255, 577, 867, 286, 914, 510, 13, 821, 366, 787, 2309, 9834, 11, 457, 3811, 498, 309, 311, 257, 1508, 365, 945, 2217, 51224], "temperature": 0.0, "avg_logprob": -0.18811619838821553, "compression_ratio": 1.6812749003984064, "no_speech_prob": 0.004068599548190832}, {"id": 89, "seek": 40380, "start": 421.64, "end": 424.2, "text": " member variables or whatever you want to you want to set", "tokens": [51256, 4006, 9102, 420, 2035, 291, 528, 281, 291, 528, 281, 992, 51384], "temperature": 0.0, "avg_logprob": -0.18811619838821553, "compression_ratio": 1.6812749003984064, "no_speech_prob": 0.004068599548190832}, {"id": 90, "seek": 40380, "start": 425.16, "end": 427.16, "text": " when you know constructing that class", "tokens": [51432, 562, 291, 458, 39969, 300, 1508, 51532], "temperature": 0.0, "avg_logprob": -0.18811619838821553, "compression_ratio": 1.6812749003984064, "no_speech_prob": 0.004068599548190832}, {"id": 91, "seek": 40380, "start": 428.04, "end": 430.04, "text": " Constructing that object, sorry", "tokens": [51576, 8574, 1757, 278, 300, 2657, 11, 2597, 51676], "temperature": 0.0, "avg_logprob": -0.18811619838821553, "compression_ratio": 1.6812749003984064, "no_speech_prob": 0.004068599548190832}, {"id": 92, "seek": 43004, "start": 430.44, "end": 435.40000000000003, "text": " And as Joshua Bock says in short the telescoping constructor pattern works", "tokens": [50384, 400, 382, 24005, 47672, 1619, 294, 2099, 264, 37085, 278, 47479, 5102, 1985, 50632], "temperature": 0.0, "avg_logprob": -0.14749641807711855, "compression_ratio": 1.528225806451613, "no_speech_prob": 0.0040693036280572414}, {"id": 93, "seek": 43004, "start": 435.64000000000004, "end": 436.84000000000003, "text": " Of course it does", "tokens": [50644, 2720, 1164, 309, 775, 50704], "temperature": 0.0, "avg_logprob": -0.14749641807711855, "compression_ratio": 1.528225806451613, "no_speech_prob": 0.0040693036280572414}, {"id": 94, "seek": 43004, "start": 436.84000000000003, "end": 440.52000000000004, "text": " But it is hard to write client code when there are many parameters and", "tokens": [50704, 583, 309, 307, 1152, 281, 2464, 6423, 3089, 562, 456, 366, 867, 9834, 293, 50888], "temperature": 0.0, "avg_logprob": -0.14749641807711855, "compression_ratio": 1.528225806451613, "no_speech_prob": 0.0040693036280572414}, {"id": 95, "seek": 43004, "start": 441.0, "end": 443.0, "text": " harder still to read", "tokens": [50912, 6081, 920, 281, 1401, 51012], "temperature": 0.0, "avg_logprob": -0.14749641807711855, "compression_ratio": 1.528225806451613, "no_speech_prob": 0.0040693036280572414}, {"id": 96, "seek": 43004, "start": 443.0, "end": 447.0, "text": " He also states and this is kind of funny. This is uh, I recently tweeted", "tokens": [51012, 634, 611, 4368, 293, 341, 307, 733, 295, 4074, 13, 639, 307, 2232, 11, 286, 3938, 25646, 51212], "temperature": 0.0, "avg_logprob": -0.14749641807711855, "compression_ratio": 1.528225806451613, "no_speech_prob": 0.0040693036280572414}, {"id": 97, "seek": 43004, "start": 447.8, "end": 451.24, "text": " That I like to call myself a programmer, but IntelliJ", "tokens": [51252, 663, 286, 411, 281, 818, 2059, 257, 32116, 11, 457, 18762, 72, 41, 51424], "temperature": 0.0, "avg_logprob": -0.14749641807711855, "compression_ratio": 1.528225806451613, "no_speech_prob": 0.0040693036280572414}, {"id": 98, "seek": 43004, "start": 452.12, "end": 454.20000000000005, "text": " writes most of my code for me", "tokens": [51468, 13657, 881, 295, 452, 3089, 337, 385, 51572], "temperature": 0.0, "avg_logprob": -0.14749641807711855, "compression_ratio": 1.528225806451613, "no_speech_prob": 0.0040693036280572414}, {"id": 99, "seek": 43004, "start": 454.52000000000004, "end": 456.52000000000004, "text": " So I don't really do anything anymore", "tokens": [51588, 407, 286, 500, 380, 534, 360, 1340, 3602, 51688], "temperature": 0.0, "avg_logprob": -0.14749641807711855, "compression_ratio": 1.528225806451613, "no_speech_prob": 0.0040693036280572414}, {"id": 100, "seek": 45652, "start": 456.91999999999996, "end": 460.68, "text": " Than just using autofill and IntelliJ kind of taking care of everything else", "tokens": [50384, 18289, 445, 1228, 1476, 2670, 373, 293, 18762, 72, 41, 733, 295, 1940, 1127, 295, 1203, 1646, 50572], "temperature": 0.0, "avg_logprob": -0.2558384824682165, "compression_ratio": 1.6566037735849057, "no_speech_prob": 0.008709038607776165}, {"id": 101, "seek": 45652, "start": 461.71999999999997, "end": 465.79999999999995, "text": " The id that the modern ids are so good that this problem doesn't really apply anymore", "tokens": [50624, 440, 4496, 300, 264, 4363, 220, 3742, 366, 370, 665, 300, 341, 1154, 1177, 380, 534, 3079, 3602, 50828], "temperature": 0.0, "avg_logprob": -0.2558384824682165, "compression_ratio": 1.6566037735849057, "no_speech_prob": 0.008709038607776165}, {"id": 102, "seek": 45652, "start": 465.88, "end": 470.44, "text": " I think because he says here if the client accidentally accidentally", "tokens": [50832, 286, 519, 570, 415, 1619, 510, 498, 264, 6423, 15715, 15715, 51060], "temperature": 0.0, "avg_logprob": -0.2558384824682165, "compression_ratio": 1.6566037735849057, "no_speech_prob": 0.008709038607776165}, {"id": 103, "seek": 45652, "start": 471.08, "end": 477.08, "text": " Reverses two such parameters the compiler won't complain, but the program will misbehave at runtime", "tokens": [51092, 1300, 840, 279, 732, 1270, 9834, 264, 31958, 1582, 380, 11024, 11, 457, 264, 1461, 486, 3346, 650, 24284, 412, 34474, 51392], "temperature": 0.0, "avg_logprob": -0.2558384824682165, "compression_ratio": 1.6566037735849057, "no_speech_prob": 0.008709038607776165}, {"id": 104, "seek": 45652, "start": 477.47999999999996, "end": 482.28, "text": " So what he means here is you probably can see, uh, let's take this second object", "tokens": [51412, 407, 437, 415, 1355, 510, 307, 291, 1391, 393, 536, 11, 2232, 11, 718, 311, 747, 341, 1150, 2657, 51652], "temperature": 0.0, "avg_logprob": -0.2558384824682165, "compression_ratio": 1.6566037735849057, "no_speech_prob": 0.008709038607776165}, {"id": 105, "seek": 45652, "start": 482.91999999999996, "end": 484.35999999999996, "text": " Bundaberg", "tokens": [51684, 10203, 455, 17025, 51756], "temperature": 0.0, "avg_logprob": -0.2558384824682165, "compression_ratio": 1.6566037735849057, "no_speech_prob": 0.008709038607776165}, {"id": 106, "seek": 45652, "start": 484.35999999999996, "end": 486.35999999999996, "text": " Bundaburg object", "tokens": [51756, 10203, 455, 5476, 2657, 51856], "temperature": 0.0, "avg_logprob": -0.2558384824682165, "compression_ratio": 1.6566037735849057, "no_speech_prob": 0.008709038607776165}, {"id": 107, "seek": 48652, "start": 487.24, "end": 493.08, "text": " And what we need to pass as the first parameter is the serving size and then it'll get it'll get set properly", "tokens": [50400, 400, 437, 321, 643, 281, 1320, 382, 264, 700, 13075, 307, 264, 8148, 2744, 293, 550, 309, 603, 483, 309, 603, 483, 992, 6108, 50692], "temperature": 0.0, "avg_logprob": -0.15899659985693815, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.001304358011111617}, {"id": 108, "seek": 48652, "start": 493.71999999999997, "end": 495.0, "text": " in the class", "tokens": [50724, 294, 264, 1508, 50788], "temperature": 0.0, "avg_logprob": -0.15899659985693815, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.001304358011111617}, {"id": 109, "seek": 48652, "start": 495.0, "end": 495.96, "text": " member", "tokens": [50788, 4006, 50836], "temperature": 0.0, "avg_logprob": -0.15899659985693815, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.001304358011111617}, {"id": 110, "seek": 48652, "start": 495.96, "end": 498.35999999999996, "text": " And then there's servings and calories. So let's say", "tokens": [50836, 400, 550, 456, 311, 8148, 82, 293, 14904, 13, 407, 718, 311, 584, 50956], "temperature": 0.0, "avg_logprob": -0.15899659985693815, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.001304358011111617}, {"id": 111, "seek": 48652, "start": 499.15999999999997, "end": 506.35999999999996, "text": " You said the serving size is two and servings as 360 that is wrong, but the compiler won't complain", "tokens": [50996, 509, 848, 264, 8148, 2744, 307, 732, 293, 8148, 82, 382, 13898, 300, 307, 2085, 11, 457, 264, 31958, 1582, 380, 11024, 51356], "temperature": 0.0, "avg_logprob": -0.15899659985693815, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.001304358011111617}, {"id": 112, "seek": 48652, "start": 507.08, "end": 512.4399999999999, "text": " The error will only come up at runtime. Maybe the q18 will pick it up or some unit test. Who knows?", "tokens": [51392, 440, 6713, 486, 787, 808, 493, 412, 34474, 13, 2704, 264, 9505, 6494, 486, 1888, 309, 493, 420, 512, 4985, 1500, 13, 2102, 3255, 30, 51660], "temperature": 0.0, "avg_logprob": -0.15899659985693815, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.001304358011111617}, {"id": 113, "seek": 48652, "start": 513.0799999999999, "end": 515.0799999999999, "text": " um, but", "tokens": [51692, 1105, 11, 457, 51792], "temperature": 0.0, "avg_logprob": -0.15899659985693815, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.001304358011111617}, {"id": 114, "seek": 51508, "start": 515.24, "end": 521.64, "text": " Of course with i with IntelliJ or most modern ids that problem won't be an issue because when the client is using that constructor", "tokens": [50372, 2720, 1164, 365, 741, 365, 18762, 72, 41, 420, 881, 4363, 220, 3742, 300, 1154, 1582, 380, 312, 364, 2734, 570, 562, 264, 6423, 307, 1228, 300, 47479, 50692], "temperature": 0.0, "avg_logprob": -0.16013230880101523, "compression_ratio": 1.6175298804780875, "no_speech_prob": 0.004006886854767799}, {"id": 115, "seek": 51508, "start": 521.8000000000001, "end": 527.08, "text": " It does exactly say what you're supposed to pass. So it's pretty clear and explicit, but nevertheless", "tokens": [50700, 467, 775, 2293, 584, 437, 291, 434, 3442, 281, 1320, 13, 407, 309, 311, 1238, 1850, 293, 13691, 11, 457, 26924, 50964], "temperature": 0.0, "avg_logprob": -0.16013230880101523, "compression_ratio": 1.6175298804780875, "no_speech_prob": 0.004006886854767799}, {"id": 116, "seek": 51508, "start": 528.0400000000001, "end": 532.12, "text": " That's one downside of it and we shouldn't always rely on ids", "tokens": [51012, 663, 311, 472, 25060, 295, 309, 293, 321, 4659, 380, 1009, 10687, 322, 220, 3742, 51216], "temperature": 0.0, "avg_logprob": -0.16013230880101523, "compression_ratio": 1.6175298804780875, "no_speech_prob": 0.004006886854767799}, {"id": 117, "seek": 51508, "start": 532.6800000000001, "end": 533.08, "text": " um", "tokens": [51244, 1105, 51264], "temperature": 0.0, "avg_logprob": -0.16013230880101523, "compression_ratio": 1.6175298804780875, "no_speech_prob": 0.004006886854767799}, {"id": 118, "seek": 51508, "start": 533.08, "end": 538.84, "text": " The negative of course is the problem is scaling and also just passing these useless zeros into constructors", "tokens": [51264, 440, 3671, 295, 1164, 307, 264, 1154, 307, 21589, 293, 611, 445, 8437, 613, 14115, 35193, 666, 7690, 830, 51552], "temperature": 0.0, "avg_logprob": -0.16013230880101523, "compression_ratio": 1.6175298804780875, "no_speech_prob": 0.004006886854767799}, {"id": 119, "seek": 53884, "start": 538.9200000000001, "end": 542.6800000000001, "text": " So and it's fair to say arguably, uh, the telescope constructor is an anti-pattern", "tokens": [50368, 407, 293, 309, 311, 3143, 281, 584, 26771, 11, 2232, 11, 264, 26114, 47479, 307, 364, 6061, 12, 79, 1161, 77, 50556], "temperature": 0.0, "avg_logprob": -0.1484495215459701, "compression_ratio": 1.8023715415019763, "no_speech_prob": 0.0053835972212255}, {"id": 120, "seek": 53884, "start": 543.0, "end": 546.2800000000001, "text": " Where our class has multiple constructors with different signatures", "tokens": [50572, 2305, 527, 1508, 575, 3866, 7690, 830, 365, 819, 32322, 50736], "temperature": 0.0, "avg_logprob": -0.1484495215459701, "compression_ratio": 1.8023715415019763, "no_speech_prob": 0.0053835972212255}, {"id": 121, "seek": 53884, "start": 546.9200000000001, "end": 548.9200000000001, "text": " varying parameters in particular and", "tokens": [50768, 22984, 9834, 294, 1729, 293, 50868], "temperature": 0.0, "avg_logprob": -0.1484495215459701, "compression_ratio": 1.8023715415019763, "no_speech_prob": 0.0053835972212255}, {"id": 122, "seek": 53884, "start": 549.32, "end": 551.32, "text": " I believe if you do just google the word", "tokens": [50888, 286, 1697, 498, 291, 360, 445, 20742, 264, 1349, 50988], "temperature": 0.0, "avg_logprob": -0.1484495215459701, "compression_ratio": 1.8023715415019763, "no_speech_prob": 0.0053835972212255}, {"id": 123, "seek": 53884, "start": 551.96, "end": 556.84, "text": " Constructor pattern, there'll be a lot of blog posts regarding why it is an anti-pattern", "tokens": [51020, 8574, 14535, 5102, 11, 456, 603, 312, 257, 688, 295, 6968, 12300, 8595, 983, 309, 307, 364, 6061, 12, 79, 1161, 77, 51264], "temperature": 0.0, "avg_logprob": -0.1484495215459701, "compression_ratio": 1.8023715415019763, "no_speech_prob": 0.0053835972212255}, {"id": 124, "seek": 53884, "start": 557.5600000000001, "end": 559.48, "text": " um", "tokens": [51300, 1105, 51396], "temperature": 0.0, "avg_logprob": -0.1484495215459701, "compression_ratio": 1.8023715415019763, "no_speech_prob": 0.0053835972212255}, {"id": 125, "seek": 53884, "start": 559.48, "end": 566.2, "text": " Look at this just the the top searches are regarding alternatives to the telescope constructor pattern it being an anti-pattern whatnot", "tokens": [51396, 2053, 412, 341, 445, 264, 264, 1192, 26701, 366, 8595, 20478, 281, 264, 26114, 47479, 5102, 309, 885, 364, 6061, 12, 79, 1161, 77, 25882, 51732], "temperature": 0.0, "avg_logprob": -0.1484495215459701, "compression_ratio": 1.8023715415019763, "no_speech_prob": 0.0053835972212255}, {"id": 126, "seek": 56620, "start": 566.84, "end": 572.84, "text": " um, and even this video here saying avoid telescope telescoping constructors with build a pattern", "tokens": [50396, 1105, 11, 293, 754, 341, 960, 510, 1566, 5042, 26114, 37085, 278, 7690, 830, 365, 1322, 257, 5102, 50696], "temperature": 0.0, "avg_logprob": -0.17079497889468545, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.005467857699841261}, {"id": 127, "seek": 56620, "start": 573.88, "end": 578.84, "text": " Makes sense. Uh, probably a lot of these blog posts were inspired by Joshua Bloke himself", "tokens": [50748, 25245, 2020, 13, 4019, 11, 1391, 257, 688, 295, 613, 6968, 12300, 645, 7547, 538, 24005, 9865, 330, 3647, 50996], "temperature": 0.0, "avg_logprob": -0.17079497889468545, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.005467857699841261}, {"id": 128, "seek": 56620, "start": 579.0, "end": 583.0, "text": " That moves us to something probably a bit better than the telescope constructor pattern", "tokens": [51004, 663, 6067, 505, 281, 746, 1391, 257, 857, 1101, 813, 264, 26114, 47479, 5102, 51204], "temperature": 0.0, "avg_logprob": -0.17079497889468545, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.005467857699841261}, {"id": 129, "seek": 56620, "start": 583.5600000000001, "end": 585.5600000000001, "text": " The java beans pattern in this pattern", "tokens": [51232, 440, 361, 4061, 12010, 5102, 294, 341, 5102, 51332], "temperature": 0.0, "avg_logprob": -0.17079497889468545, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.005467857699841261}, {"id": 130, "seek": 56620, "start": 585.88, "end": 586.9200000000001, "text": " you call a", "tokens": [51348, 291, 818, 257, 51400], "temperature": 0.0, "avg_logprob": -0.17079497889468545, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.005467857699841261}, {"id": 131, "seek": 56620, "start": 586.9200000000001, "end": 593.8000000000001, "text": " Parameterless constructor to create the object and then call setter methods to set each required parameter", "tokens": [51400, 34882, 2398, 1832, 47479, 281, 1884, 264, 2657, 293, 550, 818, 992, 391, 7150, 281, 992, 1184, 4739, 13075, 51744], "temperature": 0.0, "avg_logprob": -0.17079497889468545, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.005467857699841261}, {"id": 132, "seek": 59380, "start": 594.28, "end": 597.9599999999999, "text": " And each optional parameter of interest. So let's see what that means", "tokens": [50388, 400, 1184, 17312, 13075, 295, 1179, 13, 407, 718, 311, 536, 437, 300, 1355, 50572], "temperature": 0.0, "avg_logprob": -0.2102764095880289, "compression_ratio": 1.623134328358209, "no_speech_prob": 0.008186813443899155}, {"id": 133, "seek": 59380, "start": 598.3599999999999, "end": 604.4399999999999, "text": " But before we get to that, I just realized I should expound on these two points. It'll just make things a bit more easier. Um, now", "tokens": [50592, 583, 949, 321, 483, 281, 300, 11, 286, 445, 5334, 286, 820, 1278, 554, 322, 613, 732, 2793, 13, 467, 603, 445, 652, 721, 257, 857, 544, 3571, 13, 3301, 11, 586, 50896], "temperature": 0.0, "avg_logprob": -0.2102764095880289, "compression_ratio": 1.623134328358209, "no_speech_prob": 0.008186813443899155}, {"id": 134, "seek": 59380, "start": 605.16, "end": 608.76, "text": " Java beans, what is java beans? We we hear this term everywhere if you're a java developer", "tokens": [50932, 10745, 12010, 11, 437, 307, 361, 4061, 12010, 30, 492, 321, 1568, 341, 1433, 5315, 498, 291, 434, 257, 361, 4061, 10754, 51112], "temperature": 0.0, "avg_logprob": -0.2102764095880289, "compression_ratio": 1.623134328358209, "no_speech_prob": 0.008186813443899155}, {"id": 135, "seek": 59380, "start": 609.4, "end": 611.4, "text": " All that is is a standard", "tokens": [51144, 1057, 300, 307, 307, 257, 3832, 51244], "temperature": 0.0, "avg_logprob": -0.2102764095880289, "compression_ratio": 1.623134328358209, "no_speech_prob": 0.008186813443899155}, {"id": 136, "seek": 59380, "start": 611.56, "end": 617.9599999999999, "text": " It gives a class an empty constructor with getters and setters. Um, a public sorry a public", "tokens": [51252, 467, 2709, 257, 1508, 364, 6707, 47479, 365, 483, 1559, 293, 992, 1559, 13, 3301, 11, 257, 1908, 2597, 257, 1908, 51572], "temperature": 0.0, "avg_logprob": -0.2102764095880289, "compression_ratio": 1.623134328358209, "no_speech_prob": 0.008186813443899155}, {"id": 137, "seek": 59380, "start": 618.76, "end": 620.76, "text": " argumentless argumentless", "tokens": [51612, 6770, 1832, 6770, 1832, 51712], "temperature": 0.0, "avg_logprob": -0.2102764095880289, "compression_ratio": 1.623134328358209, "no_speech_prob": 0.008186813443899155}, {"id": 138, "seek": 62076, "start": 620.76, "end": 623.24, "text": " constructor and it's also serializable", "tokens": [50364, 47479, 293, 309, 311, 611, 17436, 22395, 50488], "temperature": 0.0, "avg_logprob": -0.12221097422170114, "compression_ratio": 1.6822429906542056, "no_speech_prob": 0.0034829892683774233}, {"id": 139, "seek": 62076, "start": 623.96, "end": 630.12, "text": " Even though this is what a java beans is the java beans pattern still isn't the most apt", "tokens": [50524, 2754, 1673, 341, 307, 437, 257, 361, 4061, 12010, 307, 264, 361, 4061, 12010, 5102, 920, 1943, 380, 264, 881, 29427, 50832], "temperature": 0.0, "avg_logprob": -0.12221097422170114, "compression_ratio": 1.6822429906542056, "no_speech_prob": 0.0034829892683774233}, {"id": 140, "seek": 62076, "start": 630.84, "end": 632.28, "text": " pattern to use", "tokens": [50868, 5102, 281, 764, 50940], "temperature": 0.0, "avg_logprob": -0.12221097422170114, "compression_ratio": 1.6822429906542056, "no_speech_prob": 0.0034829892683774233}, {"id": 141, "seek": 62076, "start": 632.28, "end": 635.88, "text": " when faced with many constructors and as Joshua Bloke him", "tokens": [50940, 562, 11446, 365, 867, 7690, 830, 293, 382, 24005, 9865, 330, 796, 51120], "temperature": 0.0, "avg_logprob": -0.12221097422170114, "compression_ratio": 1.6822429906542056, "no_speech_prob": 0.0034829892683774233}, {"id": 142, "seek": 62076, "start": 637.08, "end": 641.08, "text": " I'm going to start calling him JB. It's just easier because Joshua Bloke is a mouthful", "tokens": [51180, 286, 478, 516, 281, 722, 5141, 796, 43019, 13, 467, 311, 445, 3571, 570, 24005, 9865, 330, 307, 257, 4525, 906, 51380], "temperature": 0.0, "avg_logprob": -0.12221097422170114, "compression_ratio": 1.6822429906542056, "no_speech_prob": 0.0034829892683774233}, {"id": 143, "seek": 62076, "start": 641.16, "end": 647.48, "text": " So as JB himself states the java beans pattern has serious disadvantages", "tokens": [51384, 407, 382, 43019, 3647, 4368, 264, 361, 4061, 12010, 5102, 575, 3156, 37431, 51700], "temperature": 0.0, "avg_logprob": -0.12221097422170114, "compression_ratio": 1.6822429906542056, "no_speech_prob": 0.0034829892683774233}, {"id": 144, "seek": 64748, "start": 647.88, "end": 650.44, "text": " So I did read out the definition of what this pattern is before", "tokens": [50384, 407, 286, 630, 1401, 484, 264, 7123, 295, 437, 341, 5102, 307, 949, 50512], "temperature": 0.0, "avg_logprob": -0.12807261532750622, "compression_ratio": 1.6389891696750902, "no_speech_prob": 0.010168183594942093}, {"id": 145, "seek": 64748, "start": 650.84, "end": 655.88, "text": " This is really much easier to even understand conceptually than the telescoping constructor pattern", "tokens": [50532, 639, 307, 534, 709, 3571, 281, 754, 1223, 3410, 671, 813, 264, 37085, 278, 47479, 5102, 50784], "temperature": 0.0, "avg_logprob": -0.12807261532750622, "compression_ratio": 1.6389891696750902, "no_speech_prob": 0.010168183594942093}, {"id": 146, "seek": 64748, "start": 656.6800000000001, "end": 661.72, "text": " Clearly what you're doing here. So we've got another class. We've got a class called nutrition facts JB", "tokens": [50824, 24120, 437, 291, 434, 884, 510, 13, 407, 321, 600, 658, 1071, 1508, 13, 492, 600, 658, 257, 1508, 1219, 14718, 9130, 43019, 51076], "temperature": 0.0, "avg_logprob": -0.12807261532750622, "compression_ratio": 1.6389891696750902, "no_speech_prob": 0.010168183594942093}, {"id": 147, "seek": 64748, "start": 662.2, "end": 664.2, "text": " Um, why do I call it JB?", "tokens": [51100, 3301, 11, 983, 360, 286, 818, 309, 43019, 30, 51200], "temperature": 0.0, "avg_logprob": -0.12807261532750622, "compression_ratio": 1.6389891696750902, "no_speech_prob": 0.010168183594942093}, {"id": 148, "seek": 64748, "start": 665.64, "end": 669.08, "text": " I don't know why it's oh, of course because it's uh java beans", "tokens": [51272, 286, 500, 380, 458, 983, 309, 311, 1954, 11, 295, 1164, 570, 309, 311, 2232, 361, 4061, 12010, 51444], "temperature": 0.0, "avg_logprob": -0.12807261532750622, "compression_ratio": 1.6389891696750902, "no_speech_prob": 0.010168183594942093}, {"id": 149, "seek": 64748, "start": 669.4, "end": 676.6, "text": " I I wanted to call it JB just to differentiate it. I guess and we've declared or we've defined the", "tokens": [51460, 286, 286, 1415, 281, 818, 309, 43019, 445, 281, 23203, 309, 13, 286, 2041, 293, 321, 600, 15489, 420, 321, 600, 7642, 264, 51820], "temperature": 0.0, "avg_logprob": -0.12807261532750622, "compression_ratio": 1.6389891696750902, "no_speech_prob": 0.010168183594942093}, {"id": 150, "seek": 67660, "start": 676.76, "end": 678.76, "text": " empty public constructor here", "tokens": [50372, 6707, 1908, 47479, 510, 50472], "temperature": 0.0, "avg_logprob": -0.17574597368336686, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.008570831269025803}, {"id": 151, "seek": 67660, "start": 679.0, "end": 686.0400000000001, "text": " And that allows us to create a coca-cola object of this from this class and simply using the setters", "tokens": [50484, 400, 300, 4045, 505, 281, 1884, 257, 598, 496, 12, 66, 4711, 2657, 295, 341, 490, 341, 1508, 293, 2935, 1228, 264, 992, 1559, 50836], "temperature": 0.0, "avg_logprob": -0.17574597368336686, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.008570831269025803}, {"id": 152, "seek": 67660, "start": 686.9200000000001, "end": 691.0, "text": " I've set all the values. So whatever the members are serving size", "tokens": [50880, 286, 600, 992, 439, 264, 4190, 13, 407, 2035, 264, 2679, 366, 8148, 2744, 51084], "temperature": 0.0, "avg_logprob": -0.17574597368336686, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.008570831269025803}, {"id": 153, "seek": 67660, "start": 692.0400000000001, "end": 694.0400000000001, "text": " calories whatnot", "tokens": [51136, 14904, 25882, 51236], "temperature": 0.0, "avg_logprob": -0.17574597368336686, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.008570831269025803}, {"id": 154, "seek": 67660, "start": 694.36, "end": 701.0, "text": " And yeah, it's as simple as that. That's what it does. However, as I said before, this is not a good pattern to use", "tokens": [51252, 400, 1338, 11, 309, 311, 382, 2199, 382, 300, 13, 663, 311, 437, 309, 775, 13, 2908, 11, 382, 286, 848, 949, 11, 341, 307, 406, 257, 665, 5102, 281, 764, 51584], "temperature": 0.0, "avg_logprob": -0.17574597368336686, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.008570831269025803}, {"id": 155, "seek": 67660, "start": 701.4, "end": 703.96, "text": " when one is given a class with a lot of", "tokens": [51604, 562, 472, 307, 2212, 257, 1508, 365, 257, 688, 295, 51732], "temperature": 0.0, "avg_logprob": -0.17574597368336686, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.008570831269025803}, {"id": 156, "seek": 70396, "start": 704.9200000000001, "end": 706.9200000000001, "text": " constructor parameters", "tokens": [50412, 47479, 9834, 50512], "temperature": 0.0, "avg_logprob": -0.14726746820770534, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0036487821489572525}, {"id": 157, "seek": 70396, "start": 706.9200000000001, "end": 710.36, "text": " Firstly, of course, you know practically speaking as you can say it's a bit verbose", "tokens": [50512, 20042, 11, 295, 1164, 11, 291, 458, 15667, 4124, 382, 291, 393, 584, 309, 311, 257, 857, 9595, 541, 50684], "temperature": 0.0, "avg_logprob": -0.14726746820770534, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0036487821489572525}, {"id": 158, "seek": 70396, "start": 710.6, "end": 712.9200000000001, "text": " It's it's it's just to create this object", "tokens": [50696, 467, 311, 309, 311, 309, 311, 445, 281, 1884, 341, 2657, 50812], "temperature": 0.0, "avg_logprob": -0.14726746820770534, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0036487821489572525}, {"id": 159, "seek": 70396, "start": 712.9200000000001, "end": 716.76, "text": " You got to do all these things and use setters and set the values kind of annoying", "tokens": [50812, 509, 658, 281, 360, 439, 613, 721, 293, 764, 992, 1559, 293, 992, 264, 4190, 733, 295, 11304, 51004], "temperature": 0.0, "avg_logprob": -0.14726746820770534, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0036487821489572525}, {"id": 160, "seek": 70396, "start": 717.24, "end": 723.88, "text": " Uh, and the second one and this is an interesting one. I'm going to first read out the paragraph and explain what JB means by this", "tokens": [51028, 4019, 11, 293, 264, 1150, 472, 293, 341, 307, 364, 1880, 472, 13, 286, 478, 516, 281, 700, 1401, 484, 264, 18865, 293, 2903, 437, 43019, 1355, 538, 341, 51360], "temperature": 0.0, "avg_logprob": -0.14726746820770534, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0036487821489572525}, {"id": 161, "seek": 70396, "start": 725.72, "end": 733.0, "text": " The class does not have the option of enforcing consistency merely by checking the validity of the constructor parameters", "tokens": [51452, 440, 1508, 775, 406, 362, 264, 3614, 295, 25495, 2175, 14416, 17003, 538, 8568, 264, 40943, 295, 264, 47479, 9834, 51816], "temperature": 0.0, "avg_logprob": -0.14726746820770534, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0036487821489572525}, {"id": 162, "seek": 73300, "start": 733.64, "end": 737.96, "text": " Attempting to use an object when it's in an inconsistent state may cause failures", "tokens": [50396, 7298, 4543, 278, 281, 764, 364, 2657, 562, 309, 311, 294, 364, 36891, 1785, 815, 3082, 20774, 50612], "temperature": 0.0, "avg_logprob": -0.14600808029874748, "compression_ratio": 1.6456140350877193, "no_speech_prob": 0.004904573317617178}, {"id": 163, "seek": 73300, "start": 738.28, "end": 743.0, "text": " That are far removed from the code containing the bug and hence difficult to debug", "tokens": [50628, 663, 366, 1400, 7261, 490, 264, 3089, 19273, 264, 7426, 293, 16678, 2252, 281, 24083, 50864], "temperature": 0.0, "avg_logprob": -0.14600808029874748, "compression_ratio": 1.6456140350877193, "no_speech_prob": 0.004904573317617178}, {"id": 164, "seek": 73300, "start": 743.56, "end": 746.52, "text": " A related disadvantage is that java bean's pattern", "tokens": [50892, 316, 4077, 24292, 307, 300, 361, 4061, 16230, 311, 5102, 51040], "temperature": 0.0, "avg_logprob": -0.14600808029874748, "compression_ratio": 1.6456140350877193, "no_speech_prob": 0.004904573317617178}, {"id": 165, "seek": 73300, "start": 746.84, "end": 749.4, "text": " precludes the possibility of making a class immutable", "tokens": [51056, 4346, 1471, 279, 264, 7959, 295, 1455, 257, 1508, 3397, 32148, 51184], "temperature": 0.0, "avg_logprob": -0.14600808029874748, "compression_ratio": 1.6456140350877193, "no_speech_prob": 0.004904573317617178}, {"id": 166, "seek": 73300, "start": 749.8, "end": 755.72, "text": " And requires added effort on the part of the programmer to ensure threat safety. What that really means is this it's", "tokens": [51204, 400, 7029, 3869, 4630, 322, 264, 644, 295, 264, 32116, 281, 5586, 4734, 4514, 13, 708, 300, 534, 1355, 307, 341, 309, 311, 51500], "temperature": 0.0, "avg_logprob": -0.14600808029874748, "compression_ratio": 1.6456140350877193, "no_speech_prob": 0.004904573317617178}, {"id": 167, "seek": 73300, "start": 756.36, "end": 760.44, "text": " and I'm again, I there are all these terms some of these terms are a big technical", "tokens": [51532, 293, 286, 478, 797, 11, 286, 456, 366, 439, 613, 2115, 512, 295, 613, 2115, 366, 257, 955, 6191, 51736], "temperature": 0.0, "avg_logprob": -0.14600808029874748, "compression_ratio": 1.6456140350877193, "no_speech_prob": 0.004904573317617178}, {"id": 168, "seek": 76044, "start": 761.4000000000001, "end": 762.2, "text": " and", "tokens": [50412, 293, 50452], "temperature": 0.0, "avg_logprob": -0.16948960345724354, "compression_ratio": 1.8487394957983194, "no_speech_prob": 0.003428645199164748}, {"id": 169, "seek": 76044, "start": 762.2, "end": 768.44, "text": " But I'm quite sure, you know, I'm not a senior java and programmer who's been coding for years and years", "tokens": [50452, 583, 286, 478, 1596, 988, 11, 291, 458, 11, 286, 478, 406, 257, 7965, 361, 4061, 293, 32116, 567, 311, 668, 17720, 337, 924, 293, 924, 50764], "temperature": 0.0, "avg_logprob": -0.16948960345724354, "compression_ratio": 1.8487394957983194, "no_speech_prob": 0.003428645199164748}, {"id": 170, "seek": 76044, "start": 768.5200000000001, "end": 771.32, "text": " I've only really been coding for a couple two or three years", "tokens": [50768, 286, 600, 787, 534, 668, 17720, 337, 257, 1916, 732, 420, 1045, 924, 50908], "temperature": 0.0, "avg_logprob": -0.16948960345724354, "compression_ratio": 1.8487394957983194, "no_speech_prob": 0.003428645199164748}, {"id": 171, "seek": 76044, "start": 771.72, "end": 773.72, "text": " But I've I've still seen things like this", "tokens": [50928, 583, 286, 600, 286, 600, 920, 1612, 721, 411, 341, 51028], "temperature": 0.0, "avg_logprob": -0.16948960345724354, "compression_ratio": 1.8487394957983194, "no_speech_prob": 0.003428645199164748}, {"id": 172, "seek": 76044, "start": 774.5200000000001, "end": 776.2800000000001, "text": " day to day at work", "tokens": [51068, 786, 281, 786, 412, 589, 51156], "temperature": 0.0, "avg_logprob": -0.16948960345724354, "compression_ratio": 1.8487394957983194, "no_speech_prob": 0.003428645199164748}, {"id": 173, "seek": 76044, "start": 776.2800000000001, "end": 777.4000000000001, "text": " so", "tokens": [51156, 370, 51212], "temperature": 0.0, "avg_logprob": -0.16948960345724354, "compression_ratio": 1.8487394957983194, "no_speech_prob": 0.003428645199164748}, {"id": 174, "seek": 76044, "start": 777.4000000000001, "end": 778.9200000000001, "text": " over here you", "tokens": [51212, 670, 510, 291, 51288], "temperature": 0.0, "avg_logprob": -0.16948960345724354, "compression_ratio": 1.8487394957983194, "no_speech_prob": 0.003428645199164748}, {"id": 175, "seek": 76044, "start": 778.9200000000001, "end": 783.8000000000001, "text": " Initially construct the coca-cola object with the empty construct empty constructor", "tokens": [51288, 29446, 7690, 264, 598, 496, 12, 66, 4711, 2657, 365, 264, 6707, 7690, 6707, 47479, 51532], "temperature": 0.0, "avg_logprob": -0.16948960345724354, "compression_ratio": 1.8487394957983194, "no_speech_prob": 0.003428645199164748}, {"id": 176, "seek": 76044, "start": 784.36, "end": 790.2, "text": " And then you say you set the value using a setup set serving whatever and then you say set servings whatever", "tokens": [51560, 400, 550, 291, 584, 291, 992, 264, 2158, 1228, 257, 8657, 992, 8148, 2035, 293, 550, 291, 584, 992, 8148, 82, 2035, 51852], "temperature": 0.0, "avg_logprob": -0.16948960345724354, "compression_ratio": 1.8487394957983194, "no_speech_prob": 0.003428645199164748}, {"id": 177, "seek": 79044, "start": 790.44, "end": 793.72, "text": " Set calories whatever and then let's say while", "tokens": [50364, 8928, 14904, 2035, 293, 550, 718, 311, 584, 1339, 50528], "temperature": 0.0, "avg_logprob": -0.16203478824945144, "compression_ratio": 1.710382513661202, "no_speech_prob": 0.000803993025328964}, {"id": 178, "seek": 79044, "start": 794.36, "end": 799.72, "text": " This object is in the process of being constructed. It's it's it's in a certain state", "tokens": [50560, 639, 2657, 307, 294, 264, 1399, 295, 885, 17083, 13, 467, 311, 309, 311, 309, 311, 294, 257, 1629, 1785, 50828], "temperature": 0.0, "avg_logprob": -0.16203478824945144, "compression_ratio": 1.710382513661202, "no_speech_prob": 0.000803993025328964}, {"id": 179, "seek": 79044, "start": 800.7600000000001, "end": 804.6800000000001, "text": " Someone decides to do some computation here using this object", "tokens": [50880, 8734, 14898, 281, 360, 512, 24903, 510, 1228, 341, 2657, 51076], "temperature": 0.0, "avg_logprob": -0.16203478824945144, "compression_ratio": 1.710382513661202, "no_speech_prob": 0.000803993025328964}, {"id": 180, "seek": 79044, "start": 805.72, "end": 807.8800000000001, "text": " So decides to do some computation", "tokens": [51128, 407, 14898, 281, 360, 512, 24903, 51236], "temperature": 0.0, "avg_logprob": -0.16203478824945144, "compression_ratio": 1.710382513661202, "no_speech_prob": 0.000803993025328964}, {"id": 181, "seek": 79044, "start": 808.44, "end": 809.8000000000001, "text": " using", "tokens": [51264, 1228, 51332], "temperature": 0.0, "avg_logprob": -0.16203478824945144, "compression_ratio": 1.710382513661202, "no_speech_prob": 0.000803993025328964}, {"id": 182, "seek": 79044, "start": 809.8000000000001, "end": 811.8000000000001, "text": " This object coca-cola", "tokens": [51332, 639, 2657, 598, 496, 12, 66, 4711, 51432], "temperature": 0.0, "avg_logprob": -0.16203478824945144, "compression_ratio": 1.710382513661202, "no_speech_prob": 0.000803993025328964}, {"id": 183, "seek": 79044, "start": 812.12, "end": 814.9200000000001, "text": " Now this can give us a lot of problems because the class", "tokens": [51448, 823, 341, 393, 976, 505, 257, 688, 295, 2740, 570, 264, 1508, 51588], "temperature": 0.0, "avg_logprob": -0.16203478824945144, "compression_ratio": 1.710382513661202, "no_speech_prob": 0.000803993025328964}, {"id": 184, "seek": 81492, "start": 815.4799999999999, "end": 816.68, "text": " doesn't", "tokens": [50392, 1177, 380, 50452], "temperature": 0.0, "avg_logprob": -0.18000016257027598, "compression_ratio": 1.768627450980392, "no_speech_prob": 0.0034829892683774233}, {"id": 185, "seek": 81492, "start": 816.68, "end": 817.88, "text": " mandate", "tokens": [50452, 23885, 50512], "temperature": 0.0, "avg_logprob": -0.18000016257027598, "compression_ratio": 1.768627450980392, "no_speech_prob": 0.0034829892683774233}, {"id": 186, "seek": 81492, "start": 817.88, "end": 821.0, "text": " For the object to have a consistent state when it's being created", "tokens": [50512, 1171, 264, 2657, 281, 362, 257, 8398, 1785, 562, 309, 311, 885, 2942, 50668], "temperature": 0.0, "avg_logprob": -0.18000016257027598, "compression_ratio": 1.768627450980392, "no_speech_prob": 0.0034829892683774233}, {"id": 187, "seek": 81492, "start": 821.56, "end": 823.24, "text": " because let's say", "tokens": [50696, 570, 718, 311, 584, 50780], "temperature": 0.0, "avg_logprob": -0.18000016257027598, "compression_ratio": 1.768627450980392, "no_speech_prob": 0.0034829892683774233}, {"id": 188, "seek": 81492, "start": 823.24, "end": 829.4, "text": " When this computation takes place these two values set sodium and set carbohydrate are necessary", "tokens": [50780, 1133, 341, 24903, 2516, 1081, 613, 732, 4190, 992, 20265, 293, 992, 47048, 366, 4818, 51088], "temperature": 0.0, "avg_logprob": -0.18000016257027598, "compression_ratio": 1.768627450980392, "no_speech_prob": 0.0034829892683774233}, {"id": 189, "seek": 81492, "start": 830.76, "end": 833.56, "text": " And most of these errors will only be called runtime", "tokens": [51156, 400, 881, 295, 613, 13603, 486, 787, 312, 1219, 34474, 51296], "temperature": 0.0, "avg_logprob": -0.18000016257027598, "compression_ratio": 1.768627450980392, "no_speech_prob": 0.0034829892683774233}, {"id": 190, "seek": 81492, "start": 833.8, "end": 836.04, "text": " It cannot be called compile time clearly", "tokens": [51308, 467, 2644, 312, 1219, 31413, 565, 4448, 51420], "temperature": 0.0, "avg_logprob": -0.18000016257027598, "compression_ratio": 1.768627450980392, "no_speech_prob": 0.0034829892683774233}, {"id": 191, "seek": 81492, "start": 836.36, "end": 841.8, "text": " It cannot be called compile time because if I just go and let's say do something here system. I'm just gonna print this out", "tokens": [51436, 467, 2644, 312, 1219, 31413, 565, 570, 498, 286, 445, 352, 293, 718, 311, 584, 360, 746, 510, 1185, 13, 286, 478, 445, 799, 4482, 341, 484, 51708], "temperature": 0.0, "avg_logprob": -0.18000016257027598, "compression_ratio": 1.768627450980392, "no_speech_prob": 0.0034829892683774233}, {"id": 192, "seek": 81492, "start": 841.8, "end": 843.8, "text": " I know it's really not a computation", "tokens": [51708, 286, 458, 309, 311, 534, 406, 257, 24903, 51808], "temperature": 0.0, "avg_logprob": -0.18000016257027598, "compression_ratio": 1.768627450980392, "no_speech_prob": 0.0034829892683774233}, {"id": 193, "seek": 84380, "start": 844.28, "end": 850.1999999999999, "text": " But it doesn't throw any errors here the id doesn't indicate that all this this this object is in an inconsistent state", "tokens": [50388, 583, 309, 1177, 380, 3507, 604, 13603, 510, 264, 4496, 1177, 380, 13330, 300, 439, 341, 341, 341, 2657, 307, 294, 364, 36891, 1785, 50684], "temperature": 0.0, "avg_logprob": -0.2144042158548811, "compression_ratio": 1.7095588235294117, "no_speech_prob": 0.007458928506821394}, {"id": 194, "seek": 84380, "start": 850.92, "end": 854.04, "text": " And this is a in my opinion when I did", "tokens": [50720, 400, 341, 307, 257, 294, 452, 4800, 562, 286, 630, 50876], "temperature": 0.0, "avg_logprob": -0.2144042158548811, "compression_ratio": 1.7095588235294117, "no_speech_prob": 0.007458928506821394}, {"id": 195, "seek": 84380, "start": 854.5999999999999, "end": 861.4, "text": " Understand what this is. I think it can be a serious disadvantage, especially in large enterprise level", "tokens": [50904, 26093, 437, 341, 307, 13, 286, 519, 309, 393, 312, 257, 3156, 24292, 11, 2318, 294, 2416, 14132, 1496, 51244], "temperature": 0.0, "avg_logprob": -0.2144042158548811, "compression_ratio": 1.7095588235294117, "no_speech_prob": 0.007458928506821394}, {"id": 196, "seek": 84380, "start": 861.8, "end": 866.04, "text": " Systems, which is mostly what chava is used for, you know, in like distributed systems", "tokens": [51264, 27059, 11, 597, 307, 5240, 437, 417, 4061, 307, 1143, 337, 11, 291, 458, 11, 294, 411, 12631, 3652, 51476], "temperature": 0.0, "avg_logprob": -0.2144042158548811, "compression_ratio": 1.7095588235294117, "no_speech_prob": 0.007458928506821394}, {"id": 197, "seek": 84380, "start": 866.4399999999999, "end": 868.92, "text": " And he is just to reiterate the point jebi makes", "tokens": [51496, 400, 415, 307, 445, 281, 33528, 264, 935, 1506, 5614, 1669, 51620], "temperature": 0.0, "avg_logprob": -0.2144042158548811, "compression_ratio": 1.7095588235294117, "no_speech_prob": 0.007458928506821394}, {"id": 198, "seek": 84380, "start": 869.4799999999999, "end": 872.8399999999999, "text": " Attempting to use an object when it's in an inconsistent state. So", "tokens": [51648, 7298, 4543, 278, 281, 764, 364, 2657, 562, 309, 311, 294, 364, 36891, 1785, 13, 407, 51816], "temperature": 0.0, "avg_logprob": -0.2144042158548811, "compression_ratio": 1.7095588235294117, "no_speech_prob": 0.007458928506821394}, {"id": 199, "seek": 87284, "start": 873.64, "end": 876.52, "text": " Let's just assume for all intents and purposes", "tokens": [50404, 961, 311, 445, 6552, 337, 439, 560, 791, 293, 9932, 50548], "temperature": 0.0, "avg_logprob": -0.13527110417683919, "compression_ratio": 1.6929824561403508, "no_speech_prob": 7.601792458444834e-05}, {"id": 200, "seek": 87284, "start": 877.32, "end": 884.52, "text": " At best level this critical object is in an inconsistent state. We don't want it to be in that state and be used by a client", "tokens": [50588, 1711, 1151, 1496, 341, 4924, 2657, 307, 294, 364, 36891, 1785, 13, 492, 500, 380, 528, 309, 281, 312, 294, 300, 1785, 293, 312, 1143, 538, 257, 6423, 50948], "temperature": 0.0, "avg_logprob": -0.13527110417683919, "compression_ratio": 1.6929824561403508, "no_speech_prob": 7.601792458444834e-05}, {"id": 201, "seek": 87284, "start": 886.9200000000001, "end": 891.88, "text": " Make us failures that are far removed from the code containing the bug and hence difficult to debug", "tokens": [51068, 4387, 505, 20774, 300, 366, 1400, 7261, 490, 264, 3089, 19273, 264, 7426, 293, 16678, 2252, 281, 24083, 51316], "temperature": 0.0, "avg_logprob": -0.13527110417683919, "compression_ratio": 1.6929824561403508, "no_speech_prob": 7.601792458444834e-05}, {"id": 202, "seek": 87284, "start": 892.2, "end": 896.76, "text": " I don't make sense because they're runtime errors and we all know that runtime errors are quite difficult", "tokens": [51332, 286, 500, 380, 652, 2020, 570, 436, 434, 34474, 13603, 293, 321, 439, 458, 300, 34474, 13603, 366, 1596, 2252, 51560], "temperature": 0.0, "avg_logprob": -0.13527110417683919, "compression_ratio": 1.6929824561403508, "no_speech_prob": 7.601792458444834e-05}, {"id": 203, "seek": 87284, "start": 897.5600000000001, "end": 899.5600000000001, "text": " to debug", "tokens": [51600, 281, 24083, 51700], "temperature": 0.0, "avg_logprob": -0.13527110417683919, "compression_ratio": 1.6929824561403508, "no_speech_prob": 7.601792458444834e-05}, {"id": 204, "seek": 89956, "start": 900.52, "end": 905.4, "text": " And in my notes, I've stated here with a bit more brevity compared to the long-winded way I explained it", "tokens": [50412, 400, 294, 452, 5570, 11, 286, 600, 11323, 510, 365, 257, 857, 544, 1403, 23110, 5347, 281, 264, 938, 12, 12199, 292, 636, 286, 8825, 309, 50656], "temperature": 0.0, "avg_logprob": -0.17158932381487907, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.00048781020450405777}, {"id": 205, "seek": 89956, "start": 906.1199999999999, "end": 911.8, "text": " Splitting the construction to multiple parts may put the java being in an inconsistent state", "tokens": [50692, 19788, 2414, 264, 6435, 281, 3866, 3166, 815, 829, 264, 361, 4061, 885, 294, 364, 36891, 1785, 50976], "temperature": 0.0, "avg_logprob": -0.17158932381487907, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.00048781020450405777}, {"id": 206, "seek": 89956, "start": 911.9599999999999, "end": 916.76, "text": " So clearly the construction is being split into multiple parts and there's a high possibility", "tokens": [50984, 407, 4448, 264, 6435, 307, 885, 7472, 666, 3866, 3166, 293, 456, 311, 257, 1090, 7959, 51224], "temperature": 0.0, "avg_logprob": -0.17158932381487907, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.00048781020450405777}, {"id": 207, "seek": 89956, "start": 917.56, "end": 919.56, "text": " That it could be in such an inconsistent state", "tokens": [51264, 663, 309, 727, 312, 294, 1270, 364, 36891, 1785, 51364], "temperature": 0.0, "avg_logprob": -0.17158932381487907, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.00048781020450405777}, {"id": 208, "seek": 89956, "start": 921.0, "end": 922.8399999999999, "text": " Which is why", "tokens": [51436, 3013, 307, 983, 51528], "temperature": 0.0, "avg_logprob": -0.17158932381487907, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.00048781020450405777}, {"id": 209, "seek": 89956, "start": 922.8399999999999, "end": 924.4399999999999, "text": " JB proposes", "tokens": [51528, 43019, 2365, 4201, 51608], "temperature": 0.0, "avg_logprob": -0.17158932381487907, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.00048781020450405777}, {"id": 210, "seek": 89956, "start": 924.4399999999999, "end": 926.4399999999999, "text": " Using the builder pattern", "tokens": [51608, 11142, 264, 27377, 5102, 51708], "temperature": 0.0, "avg_logprob": -0.17158932381487907, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.00048781020450405777}, {"id": 211, "seek": 92644, "start": 926.44, "end": 931.4000000000001, "text": " Now what is the builder pattern? So let's try to understand firstly. There's a quote that I've got here by", "tokens": [50364, 823, 437, 307, 264, 27377, 5102, 30, 407, 718, 311, 853, 281, 1223, 27376, 13, 821, 311, 257, 6513, 300, 286, 600, 658, 510, 538, 50612], "temperature": 0.0, "avg_logprob": -0.12292859133552103, "compression_ratio": 1.8411552346570397, "no_speech_prob": 0.01384207233786583}, {"id": 212, "seek": 92644, "start": 932.0400000000001, "end": 935.72, "text": " But the great book uh from from the great book design patterns by the gang of four", "tokens": [50644, 583, 264, 869, 1446, 2232, 490, 490, 264, 869, 1446, 1715, 8294, 538, 264, 10145, 295, 1451, 50828], "temperature": 0.0, "avg_logprob": -0.12292859133552103, "compression_ratio": 1.8411552346570397, "no_speech_prob": 0.01384207233786583}, {"id": 213, "seek": 92644, "start": 936.0400000000001, "end": 943.08, "text": " I haven't read that book yet. I I own a copy. I refer to it, but I'm I'm really hoping to do a similar video with that book too", "tokens": [50844, 286, 2378, 380, 1401, 300, 1446, 1939, 13, 286, 286, 1065, 257, 5055, 13, 286, 2864, 281, 309, 11, 457, 286, 478, 286, 478, 534, 7159, 281, 360, 257, 2531, 960, 365, 300, 1446, 886, 51196], "temperature": 0.0, "avg_logprob": -0.12292859133552103, "compression_ratio": 1.8411552346570397, "no_speech_prob": 0.01384207233786583}, {"id": 214, "seek": 92644, "start": 944.2800000000001, "end": 946.6, "text": " Probably I'll probably get I'll probably do this", "tokens": [51256, 9210, 286, 603, 1391, 483, 286, 603, 1391, 360, 341, 51372], "temperature": 0.0, "avg_logprob": -0.12292859133552103, "compression_ratio": 1.8411552346570397, "no_speech_prob": 0.01384207233786583}, {"id": 215, "seek": 92644, "start": 946.84, "end": 949.32, "text": " But first the head first design patterns", "tokens": [51384, 583, 700, 264, 1378, 700, 1715, 8294, 51508], "temperature": 0.0, "avg_logprob": -0.12292859133552103, "compression_ratio": 1.8411552346570397, "no_speech_prob": 0.01384207233786583}, {"id": 216, "seek": 92644, "start": 949.96, "end": 955.24, "text": " And then I'll see if it's worth doing one of that book too. I'm just gonna do it. I'm just gonna do it", "tokens": [51540, 400, 550, 286, 603, 536, 498, 309, 311, 3163, 884, 472, 295, 300, 1446, 886, 13, 286, 478, 445, 799, 360, 309, 13, 286, 478, 445, 799, 360, 309, 51804], "temperature": 0.0, "avg_logprob": -0.12292859133552103, "compression_ratio": 1.8411552346570397, "no_speech_prob": 0.01384207233786583}, {"id": 217, "seek": 95644, "start": 956.44, "end": 962.36, "text": " Because I want to because I'm a I'm a fan. I'm a I'm a connoisseur of great programming books", "tokens": [50364, 1436, 286, 528, 281, 570, 286, 478, 257, 286, 478, 257, 3429, 13, 286, 478, 257, 286, 478, 257, 416, 1771, 7746, 374, 295, 869, 9410, 3642, 50660], "temperature": 0.0, "avg_logprob": -0.1516854166984558, "compression_ratio": 1.6900826446280992, "no_speech_prob": 0.0021483716554939747}, {"id": 218, "seek": 95644, "start": 963.8000000000001, "end": 965.8800000000001, "text": " So here's what the gang of four states", "tokens": [50732, 407, 510, 311, 437, 264, 10145, 295, 1451, 4368, 50836], "temperature": 0.0, "avg_logprob": -0.1516854166984558, "compression_ratio": 1.6900826446280992, "no_speech_prob": 0.0021483716554939747}, {"id": 219, "seek": 95644, "start": 966.6, "end": 970.9200000000001, "text": " What the builder pattern does is separate the construction of a complex object", "tokens": [50872, 708, 264, 27377, 5102, 775, 307, 4994, 264, 6435, 295, 257, 3997, 2657, 51088], "temperature": 0.0, "avg_logprob": -0.1516854166984558, "compression_ratio": 1.6900826446280992, "no_speech_prob": 0.0021483716554939747}, {"id": 220, "seek": 95644, "start": 971.6400000000001, "end": 977.96, "text": " From its representation so that the same construction process can create different representations", "tokens": [51124, 3358, 1080, 10290, 370, 300, 264, 912, 6435, 1399, 393, 1884, 819, 33358, 51440], "temperature": 0.0, "avg_logprob": -0.1516854166984558, "compression_ratio": 1.6900826446280992, "no_speech_prob": 0.0021483716554939747}, {"id": 221, "seek": 95644, "start": 978.44, "end": 984.44, "text": " Okay, what in the world does that mean? Let's take a look at another way the nutrition facts class", "tokens": [51464, 1033, 11, 437, 294, 264, 1002, 775, 300, 914, 30, 961, 311, 747, 257, 574, 412, 1071, 636, 264, 14718, 9130, 1508, 51764], "temperature": 0.0, "avg_logprob": -0.1516854166984558, "compression_ratio": 1.6900826446280992, "no_speech_prob": 0.0021483716554939747}, {"id": 222, "seek": 98444, "start": 985.1600000000001, "end": 987.1600000000001, "text": " Was constructed but in this case", "tokens": [50400, 3027, 17083, 457, 294, 341, 1389, 50500], "temperature": 0.0, "avg_logprob": -0.11692320307095845, "compression_ratio": 1.7357723577235773, "no_speech_prob": 0.0076941028237342834}, {"id": 223, "seek": 98444, "start": 987.72, "end": 992.7600000000001, "text": " Using the builder pattern on the client side using the builder pattern on the nutrition effects class", "tokens": [50528, 11142, 264, 27377, 5102, 322, 264, 6423, 1252, 1228, 264, 27377, 5102, 322, 264, 14718, 5065, 1508, 50780], "temperature": 0.0, "avg_logprob": -0.11692320307095845, "compression_ratio": 1.7357723577235773, "no_speech_prob": 0.0076941028237342834}, {"id": 224, "seek": 98444, "start": 993.1600000000001, "end": 995.32, "text": " Constructing the objects using that pattern", "tokens": [50800, 8574, 1757, 278, 264, 6565, 1228, 300, 5102, 50908], "temperature": 0.0, "avg_logprob": -0.11692320307095845, "compression_ratio": 1.7357723577235773, "no_speech_prob": 0.0076941028237342834}, {"id": 225, "seek": 98444, "start": 996.2800000000001, "end": 1003.08, "text": " It's done beautifully. It helps us to circumvent some of the disadvantages that we discussed earlier with the previous patterns", "tokens": [50956, 467, 311, 1096, 16525, 13, 467, 3665, 505, 281, 7125, 2475, 512, 295, 264, 37431, 300, 321, 7152, 3071, 365, 264, 3894, 8294, 51296], "temperature": 0.0, "avg_logprob": -0.11692320307095845, "compression_ratio": 1.7357723577235773, "no_speech_prob": 0.0076941028237342834}, {"id": 226, "seek": 98444, "start": 1003.8000000000001, "end": 1005.24, "text": " But saying that though", "tokens": [51332, 583, 1566, 300, 1673, 51404], "temperature": 0.0, "avg_logprob": -0.11692320307095845, "compression_ratio": 1.7357723577235773, "no_speech_prob": 0.0076941028237342834}, {"id": 227, "seek": 98444, "start": 1005.24, "end": 1010.6, "text": " Of course, it's a bit harder to understand as to how it works. The first thing to keep in mind is", "tokens": [51404, 2720, 1164, 11, 309, 311, 257, 857, 6081, 281, 1223, 382, 281, 577, 309, 1985, 13, 440, 700, 551, 281, 1066, 294, 1575, 307, 51672], "temperature": 0.0, "avg_logprob": -0.11692320307095845, "compression_ratio": 1.7357723577235773, "no_speech_prob": 0.0076941028237342834}, {"id": 228, "seek": 101060, "start": 1011.5600000000001, "end": 1014.36, "text": " There's an inner public study class called builder", "tokens": [50412, 821, 311, 364, 7284, 1908, 2979, 1508, 1219, 27377, 50552], "temperature": 0.0, "avg_logprob": -0.11363305327712848, "compression_ratio": 1.9490740740740742, "no_speech_prob": 0.0028007254004478455}, {"id": 229, "seek": 101060, "start": 1014.36, "end": 1019.48, "text": " So the separate builder class in the nutrition facts class and when we do construct this object", "tokens": [50552, 407, 264, 4994, 27377, 1508, 294, 264, 14718, 9130, 1508, 293, 562, 321, 360, 7690, 341, 2657, 50808], "temperature": 0.0, "avg_logprob": -0.11363305327712848, "compression_ratio": 1.9490740740740742, "no_speech_prob": 0.0028007254004478455}, {"id": 230, "seek": 101060, "start": 1019.48, "end": 1025.0, "text": " There's no way of constructing it without using this builder class the the inner builder class", "tokens": [50808, 821, 311, 572, 636, 295, 39969, 309, 1553, 1228, 341, 27377, 1508, 264, 264, 7284, 27377, 1508, 51084], "temperature": 0.0, "avg_logprob": -0.11363305327712848, "compression_ratio": 1.9490740740740742, "no_speech_prob": 0.0028007254004478455}, {"id": 231, "seek": 101060, "start": 1025.56, "end": 1031.0, "text": " Let's run go through this line by line. I think that's the best way to understand this when we do construct this object", "tokens": [51112, 961, 311, 1190, 352, 807, 341, 1622, 538, 1622, 13, 286, 519, 300, 311, 264, 1151, 636, 281, 1223, 341, 562, 321, 360, 7690, 341, 2657, 51384], "temperature": 0.0, "avg_logprob": -0.11363305327712848, "compression_ratio": 1.9490740740740742, "no_speech_prob": 0.0028007254004478455}, {"id": 232, "seek": 101060, "start": 1031.72, "end": 1036.68, "text": " We don't directly use the nutrition facts class. We instead", "tokens": [51420, 492, 500, 380, 3838, 764, 264, 14718, 9130, 1508, 13, 492, 2602, 51668], "temperature": 0.0, "avg_logprob": -0.11363305327712848, "compression_ratio": 1.9490740740740742, "no_speech_prob": 0.0028007254004478455}, {"id": 233, "seek": 103668, "start": 1037.64, "end": 1043.3200000000002, "text": " Make the desired object using this inner builder class and of course because it's static", "tokens": [50412, 4387, 264, 14721, 2657, 1228, 341, 7284, 27377, 1508, 293, 295, 1164, 570, 309, 311, 13437, 50696], "temperature": 0.0, "avg_logprob": -0.166890380203083, "compression_ratio": 1.7173913043478262, "no_speech_prob": 0.003074927954003215}, {"id": 234, "seek": 103668, "start": 1043.5600000000002, "end": 1047.88, "text": " You could just access it as it belongs to the nutrition facts class itself", "tokens": [50708, 509, 727, 445, 2105, 309, 382, 309, 12953, 281, 264, 14718, 9130, 1508, 2564, 50924], "temperature": 0.0, "avg_logprob": -0.166890380203083, "compression_ratio": 1.7173913043478262, "no_speech_prob": 0.003074927954003215}, {"id": 235, "seek": 103668, "start": 1048.68, "end": 1052.76, "text": " You could access it directly. I mean so simply put the way the client", "tokens": [50964, 509, 727, 2105, 309, 3838, 13, 286, 914, 370, 2935, 829, 264, 636, 264, 6423, 51168], "temperature": 0.0, "avg_logprob": -0.166890380203083, "compression_ratio": 1.7173913043478262, "no_speech_prob": 0.003074927954003215}, {"id": 236, "seek": 103668, "start": 1053.16, "end": 1058.92, "text": " Really constructs this object is using the builder object and the builder object has some setup methods", "tokens": [51188, 4083, 7690, 82, 341, 2657, 307, 1228, 264, 27377, 2657, 293, 264, 27377, 2657, 575, 512, 8657, 7150, 51476], "temperature": 0.0, "avg_logprob": -0.166890380203083, "compression_ratio": 1.7173913043478262, "no_speech_prob": 0.003074927954003215}, {"id": 237, "seek": 103668, "start": 1059.3200000000002, "end": 1061.3200000000002, "text": " How does that work? So let's take a look at this", "tokens": [51496, 1012, 775, 300, 589, 30, 407, 718, 311, 747, 257, 574, 412, 341, 51596], "temperature": 0.0, "avg_logprob": -0.166890380203083, "compression_ratio": 1.7173913043478262, "no_speech_prob": 0.003074927954003215}, {"id": 238, "seek": 103668, "start": 1062.3600000000001, "end": 1063.4, "text": " it's got", "tokens": [51648, 309, 311, 658, 51700], "temperature": 0.0, "avg_logprob": -0.166890380203083, "compression_ratio": 1.7173913043478262, "no_speech_prob": 0.003074927954003215}, {"id": 239, "seek": 106340, "start": 1063.48, "end": 1065.96, "text": " nutrition facts our builder and of course", "tokens": [50368, 14718, 9130, 527, 27377, 293, 295, 1164, 50492], "temperature": 0.0, "avg_logprob": -0.15016908423845157, "compression_ratio": 1.7511520737327189, "no_speech_prob": 0.001016083057038486}, {"id": 240, "seek": 106340, "start": 1066.44, "end": 1072.8400000000001, "text": " There are some parameters that are mandatory you you need them to even construct this object and those the those two are", "tokens": [50516, 821, 366, 512, 9834, 300, 366, 22173, 291, 291, 643, 552, 281, 754, 7690, 341, 2657, 293, 729, 264, 729, 732, 366, 50836], "temperature": 0.0, "avg_logprob": -0.15016908423845157, "compression_ratio": 1.7511520737327189, "no_speech_prob": 0.001016083057038486}, {"id": 241, "seek": 106340, "start": 1073.5600000000002, "end": 1077.16, "text": " In this the builder class is serving size and servings", "tokens": [50872, 682, 341, 264, 27377, 1508, 307, 8148, 2744, 293, 8148, 82, 51052], "temperature": 0.0, "avg_logprob": -0.15016908423845157, "compression_ratio": 1.7511520737327189, "no_speech_prob": 0.001016083057038486}, {"id": 242, "seek": 106340, "start": 1077.72, "end": 1079.72, "text": " So that would be defined here", "tokens": [51080, 407, 300, 576, 312, 7642, 510, 51180], "temperature": 0.0, "avg_logprob": -0.15016908423845157, "compression_ratio": 1.7511520737327189, "no_speech_prob": 0.001016083057038486}, {"id": 243, "seek": 106340, "start": 1080.44, "end": 1082.8400000000001, "text": " When we do the constructor for the builder class", "tokens": [51216, 1133, 321, 360, 264, 47479, 337, 264, 27377, 1508, 51336], "temperature": 0.0, "avg_logprob": -0.15016908423845157, "compression_ratio": 1.7511520737327189, "no_speech_prob": 0.001016083057038486}, {"id": 244, "seek": 106340, "start": 1083.3200000000002, "end": 1088.0400000000002, "text": " Have these two values as being mandatory and afterwards, of course, it allows us to", "tokens": [51360, 3560, 613, 732, 4190, 382, 885, 22173, 293, 10543, 11, 295, 1164, 11, 309, 4045, 505, 281, 51596], "temperature": 0.0, "avg_logprob": -0.15016908423845157, "compression_ratio": 1.7511520737327189, "no_speech_prob": 0.001016083057038486}, {"id": 245, "seek": 108804, "start": 1089.0, "end": 1093.8799999999999, "text": " Simply set the other values as per our requirements as for the client's requirements", "tokens": [50412, 19596, 992, 264, 661, 4190, 382, 680, 527, 7728, 382, 337, 264, 6423, 311, 7728, 50656], "temperature": 0.0, "avg_logprob": -0.10694695533590114, "compression_ratio": 1.751269035532995, "no_speech_prob": 0.0037067236844450235}, {"id": 246, "seek": 108804, "start": 1094.28, "end": 1098.44, "text": " So in the for coca-cola, we've set the calories the calories are right here", "tokens": [50676, 407, 294, 264, 337, 598, 496, 12, 66, 4711, 11, 321, 600, 992, 264, 14904, 264, 14904, 366, 558, 510, 50884], "temperature": 0.0, "avg_logprob": -0.10694695533590114, "compression_ratio": 1.751269035532995, "no_speech_prob": 0.0037067236844450235}, {"id": 247, "seek": 108804, "start": 1099.72, "end": 1101.72, "text": " And then we've set", "tokens": [50948, 400, 550, 321, 600, 992, 51048], "temperature": 0.0, "avg_logprob": -0.10694695533590114, "compression_ratio": 1.751269035532995, "no_speech_prob": 0.0037067236844450235}, {"id": 248, "seek": 108804, "start": 1103.1599999999999, "end": 1107.96, "text": " Oh, there's another thing I want to add here. Do we get to that a bit later?", "tokens": [51120, 876, 11, 456, 311, 1071, 551, 286, 528, 281, 909, 510, 13, 1144, 321, 483, 281, 300, 257, 857, 1780, 30, 51360], "temperature": 0.0, "avg_logprob": -0.10694695533590114, "compression_ratio": 1.751269035532995, "no_speech_prob": 0.0037067236844450235}, {"id": 249, "seek": 108804, "start": 1110.28, "end": 1114.6, "text": " Oh, sorry, there's a bit here about invalid parameters. We shall get to that a bit later", "tokens": [51476, 876, 11, 2597, 11, 456, 311, 257, 857, 510, 466, 34702, 9834, 13, 492, 4393, 483, 281, 300, 257, 857, 1780, 51692], "temperature": 0.0, "avg_logprob": -0.10694695533590114, "compression_ratio": 1.751269035532995, "no_speech_prob": 0.0037067236844450235}, {"id": 250, "seek": 111460, "start": 1115.08, "end": 1117.7199999999998, "text": " So we are adding the calories and the way we're adding the sodium", "tokens": [50388, 407, 321, 366, 5127, 264, 14904, 293, 264, 636, 321, 434, 5127, 264, 20265, 50520], "temperature": 0.0, "avg_logprob": -0.20285792099802116, "compression_ratio": 1.7860696517412935, "no_speech_prob": 0.003944305703043938}, {"id": 251, "seek": 111460, "start": 1118.28, "end": 1120.28, "text": " carbohydrate, whatever", "tokens": [50548, 47048, 11, 2035, 50648], "temperature": 0.0, "avg_logprob": -0.20285792099802116, "compression_ratio": 1.7860696517412935, "no_speech_prob": 0.003944305703043938}, {"id": 252, "seek": 111460, "start": 1120.6, "end": 1123.48, "text": " And those stuff are being passed on to the private", "tokens": [50664, 400, 729, 1507, 366, 885, 4678, 322, 281, 264, 4551, 50808], "temperature": 0.0, "avg_logprob": -0.20285792099802116, "compression_ratio": 1.7860696517412935, "no_speech_prob": 0.003944305703043938}, {"id": 253, "seek": 111460, "start": 1124.28, "end": 1129.1599999999999, "text": " constructor construction Jesus the private constructor of the nutrition facts class", "tokens": [50848, 47479, 6435, 2705, 264, 4551, 47479, 295, 264, 14718, 9130, 1508, 51092], "temperature": 0.0, "avg_logprob": -0.20285792099802116, "compression_ratio": 1.7860696517412935, "no_speech_prob": 0.003944305703043938}, {"id": 254, "seek": 111460, "start": 1129.9599999999998, "end": 1132.84, "text": " And it's been accessed through this builder object", "tokens": [51132, 400, 309, 311, 668, 34211, 807, 341, 27377, 2657, 51276], "temperature": 0.0, "avg_logprob": -0.20285792099802116, "compression_ratio": 1.7860696517412935, "no_speech_prob": 0.003944305703043938}, {"id": 255, "seek": 111460, "start": 1133.8799999999999, "end": 1140.28, "text": " Then afterwards when the the client is done using or the client is done constructing", "tokens": [51328, 1396, 10543, 562, 264, 264, 6423, 307, 1096, 1228, 420, 264, 6423, 307, 1096, 39969, 51648], "temperature": 0.0, "avg_logprob": -0.20285792099802116, "compression_ratio": 1.7860696517412935, "no_speech_prob": 0.003944305703043938}, {"id": 256, "seek": 114028, "start": 1140.68, "end": 1145.6399999999999, "text": " The coca-cola object you simply use the build method and build the object", "tokens": [50384, 440, 598, 496, 12, 66, 4711, 2657, 291, 2935, 764, 264, 1322, 3170, 293, 1322, 264, 2657, 50632], "temperature": 0.0, "avg_logprob": -0.18090352926168357, "compression_ratio": 1.7022058823529411, "no_speech_prob": 0.016150010749697685}, {"id": 257, "seek": 114028, "start": 1146.52, "end": 1148.84, "text": " quite straightforward if you think about it and even", "tokens": [50676, 1596, 15325, 498, 291, 519, 466, 309, 293, 754, 50792], "temperature": 0.0, "avg_logprob": -0.18090352926168357, "compression_ratio": 1.7022058823529411, "no_speech_prob": 0.016150010749697685}, {"id": 258, "seek": 114028, "start": 1149.96, "end": 1155.56, "text": " Practically or conceptually this makes a lot of no sense. And yeah, I should mention this the client calls a", "tokens": [50848, 19170, 984, 420, 3410, 671, 341, 1669, 257, 688, 295, 572, 2020, 13, 400, 1338, 11, 286, 820, 2152, 341, 264, 6423, 5498, 257, 51128], "temperature": 0.0, "avg_logprob": -0.18090352926168357, "compression_ratio": 1.7022058823529411, "no_speech_prob": 0.016150010749697685}, {"id": 259, "seek": 114028, "start": 1156.2, "end": 1158.2, "text": " Parameterless build method, which I did mention", "tokens": [51160, 34882, 2398, 1832, 1322, 3170, 11, 597, 286, 630, 2152, 51260], "temperature": 0.0, "avg_logprob": -0.18090352926168357, "compression_ratio": 1.7022058823529411, "no_speech_prob": 0.016150010749697685}, {"id": 260, "seek": 114028, "start": 1159.0, "end": 1164.2, "text": " To generate the object which is typically immutable and now I want to get to that bit that I said I'll discuss a bit later", "tokens": [51300, 1407, 8460, 264, 2657, 597, 307, 5850, 3397, 32148, 293, 586, 286, 528, 281, 483, 281, 300, 857, 300, 286, 848, 286, 603, 2248, 257, 857, 1780, 51560], "temperature": 0.0, "avg_logprob": -0.18090352926168357, "compression_ratio": 1.7022058823529411, "no_speech_prob": 0.016150010749697685}, {"id": 261, "seek": 114028, "start": 1164.92, "end": 1169.32, "text": " Previously, it's this idea about having valid parameters", "tokens": [51596, 33606, 11, 309, 311, 341, 1558, 466, 1419, 7363, 9834, 51816], "temperature": 0.0, "avg_logprob": -0.18090352926168357, "compression_ratio": 1.7022058823529411, "no_speech_prob": 0.016150010749697685}, {"id": 262, "seek": 116932, "start": 1169.6399999999999, "end": 1176.36, "text": " Here's a good example of this in the builder class. So the only role for the builder class is to really build objects", "tokens": [50380, 1692, 311, 257, 665, 1365, 295, 341, 294, 264, 27377, 1508, 13, 407, 264, 787, 3090, 337, 264, 27377, 1508, 307, 281, 534, 1322, 6565, 50716], "temperature": 0.0, "avg_logprob": -0.19974084127516972, "compression_ratio": 1.7523364485981308, "no_speech_prob": 0.0017536028753966093}, {"id": 263, "seek": 116932, "start": 1176.9199999999998, "end": 1179.48, "text": " therefore in all these methods one could do", "tokens": [50744, 4412, 294, 439, 613, 7150, 472, 727, 360, 50872], "temperature": 0.0, "avg_logprob": -0.19974084127516972, "compression_ratio": 1.7523364485981308, "no_speech_prob": 0.0017536028753966093}, {"id": 264, "seek": 116932, "start": 1180.4399999999998, "end": 1183.32, "text": " checks for invalid parameters and throw", "tokens": [50920, 13834, 337, 34702, 9834, 293, 3507, 51064], "temperature": 0.0, "avg_logprob": -0.19974084127516972, "compression_ratio": 1.7523364485981308, "no_speech_prob": 0.0017536028753966093}, {"id": 265, "seek": 116932, "start": 1184.12, "end": 1191.6399999999999, "text": " Illegal argument exceptions if for instance when building this class. Sorry when building this object someone passes a", "tokens": [51104, 10597, 38221, 6770, 22847, 498, 337, 5197, 562, 2390, 341, 1508, 13, 4919, 562, 2390, 341, 2657, 1580, 11335, 257, 51480], "temperature": 0.0, "avg_logprob": -0.19974084127516972, "compression_ratio": 1.7523364485981308, "no_speech_prob": 0.0017536028753966093}, {"id": 266, "seek": 116932, "start": 1192.9199999999998, "end": 1197.1599999999999, "text": " Parameter of a or an argument which is of illegal typo", "tokens": [51544, 34882, 2398, 295, 257, 420, 364, 6770, 597, 307, 295, 11905, 2125, 78, 51756], "temperature": 0.0, "avg_logprob": -0.19974084127516972, "compression_ratio": 1.7523364485981308, "no_speech_prob": 0.0017536028753966093}, {"id": 267, "seek": 119716, "start": 1197.96, "end": 1200.3600000000001, "text": " If it's of illegal quality", "tokens": [50404, 759, 309, 311, 295, 11905, 3125, 50524], "temperature": 0.0, "avg_logprob": -0.1953640859061425, "compression_ratio": 1.6349809885931559, "no_speech_prob": 0.004536991473287344}, {"id": 268, "seek": 119716, "start": 1201.4, "end": 1203.4, "text": " I'm just looking for the word here doesn't matter", "tokens": [50576, 286, 478, 445, 1237, 337, 264, 1349, 510, 1177, 380, 1871, 50676], "temperature": 0.0, "avg_logprob": -0.1953640859061425, "compression_ratio": 1.6349809885931559, "no_speech_prob": 0.004536991473287344}, {"id": 269, "seek": 119716, "start": 1203.96, "end": 1207.72, "text": " Sometimes sorry. It's been a long day my mind my mind my mind brains everywhere", "tokens": [50704, 4803, 2597, 13, 467, 311, 668, 257, 938, 786, 452, 1575, 452, 1575, 452, 1575, 15442, 5315, 50892], "temperature": 0.0, "avg_logprob": -0.1953640859061425, "compression_ratio": 1.6349809885931559, "no_speech_prob": 0.004536991473287344}, {"id": 270, "seek": 119716, "start": 1208.52, "end": 1210.3600000000001, "text": " Here's here's an example of this", "tokens": [50932, 1692, 311, 510, 311, 364, 1365, 295, 341, 51024], "temperature": 0.0, "avg_logprob": -0.1953640859061425, "compression_ratio": 1.6349809885931559, "no_speech_prob": 0.004536991473287344}, {"id": 271, "seek": 119716, "start": 1210.3600000000001, "end": 1216.92, "text": " So calories, of course anything can't really have negative calories. At least that's what we're told", "tokens": [51024, 407, 14904, 11, 295, 1164, 1340, 393, 380, 534, 362, 3671, 14904, 13, 1711, 1935, 300, 311, 437, 321, 434, 1907, 51352], "temperature": 0.0, "avg_logprob": -0.1953640859061425, "compression_ratio": 1.6349809885931559, "no_speech_prob": 0.004536991473287344}, {"id": 272, "seek": 119716, "start": 1217.5600000000002, "end": 1219.72, "text": " And I think that's true. So over here", "tokens": [51384, 400, 286, 519, 300, 311, 2074, 13, 407, 670, 510, 51492], "temperature": 0.0, "avg_logprob": -0.1953640859061425, "compression_ratio": 1.6349809885931559, "no_speech_prob": 0.004536991473287344}, {"id": 273, "seek": 119716, "start": 1219.8000000000002, "end": 1225.8000000000002, "text": " I've initially I've passed the calories to be 100 when constructing this object and I'm doing a check", "tokens": [51496, 286, 600, 9105, 286, 600, 4678, 264, 14904, 281, 312, 2319, 562, 39969, 341, 2657, 293, 286, 478, 884, 257, 1520, 51796], "temperature": 0.0, "avg_logprob": -0.1953640859061425, "compression_ratio": 1.6349809885931559, "no_speech_prob": 0.004536991473287344}, {"id": 274, "seek": 122716, "start": 1227.16, "end": 1231.0, "text": " On the calories method, which is here in this method", "tokens": [50364, 1282, 264, 14904, 3170, 11, 597, 307, 510, 294, 341, 3170, 50556], "temperature": 0.0, "avg_logprob": -0.1437396879320021, "compression_ratio": 1.5193370165745856, "no_speech_prob": 0.00031012677936814725}, {"id": 275, "seek": 122716, "start": 1231.88, "end": 1233.88, "text": " whether the value is", "tokens": [50600, 1968, 264, 2158, 307, 50700], "temperature": 0.0, "avg_logprob": -0.1437396879320021, "compression_ratio": 1.5193370165745856, "no_speech_prob": 0.00031012677936814725}, {"id": 276, "seek": 122716, "start": 1234.44, "end": 1238.92, "text": " Well, the value should be greater than zero for me to set it into the calories", "tokens": [50728, 1042, 11, 264, 2158, 820, 312, 5044, 813, 4018, 337, 385, 281, 992, 309, 666, 264, 14904, 50952], "temperature": 0.0, "avg_logprob": -0.1437396879320021, "compression_ratio": 1.5193370165745856, "no_speech_prob": 0.00031012677936814725}, {"id": 277, "seek": 122716, "start": 1240.1200000000001, "end": 1241.48, "text": " member variable", "tokens": [51012, 4006, 7006, 51080], "temperature": 0.0, "avg_logprob": -0.1437396879320021, "compression_ratio": 1.5193370165745856, "no_speech_prob": 0.00031012677936814725}, {"id": 278, "seek": 122716, "start": 1241.48, "end": 1247.0, "text": " If not, I'll throw a illegal argument exception. So if I go", "tokens": [51080, 759, 406, 11, 286, 603, 3507, 257, 11905, 6770, 11183, 13, 407, 498, 286, 352, 51356], "temperature": 0.0, "avg_logprob": -0.1437396879320021, "compression_ratio": 1.5193370165745856, "no_speech_prob": 0.00031012677936814725}, {"id": 279, "seek": 122716, "start": 1247.96, "end": 1249.96, "text": " And do minus eight", "tokens": [51404, 400, 360, 3175, 3180, 51504], "temperature": 0.0, "avg_logprob": -0.1437396879320021, "compression_ratio": 1.5193370165745856, "no_speech_prob": 0.00031012677936814725}, {"id": 280, "seek": 122716, "start": 1251.3200000000002, "end": 1253.3200000000002, "text": " And then if I try to run it", "tokens": [51572, 400, 550, 498, 286, 853, 281, 1190, 309, 51672], "temperature": 0.0, "avg_logprob": -0.1437396879320021, "compression_ratio": 1.5193370165745856, "no_speech_prob": 0.00031012677936814725}, {"id": 281, "seek": 125332, "start": 1254.12, "end": 1261.8799999999999, "text": " There we go at runtime, I'll say, you know, it's negative. You can't have negative calories. What are you crazy?", "tokens": [50404, 821, 321, 352, 412, 34474, 11, 286, 603, 584, 11, 291, 458, 11, 309, 311, 3671, 13, 509, 393, 380, 362, 3671, 14904, 13, 708, 366, 291, 3219, 30, 50792], "temperature": 0.0, "avg_logprob": -0.3260154724121094, "compression_ratio": 1.47979797979798, "no_speech_prob": 0.0009107266087085009}, {"id": 282, "seek": 125332, "start": 1262.2, "end": 1264.6, "text": " What are you trying to sell one of those?", "tokens": [50808, 708, 366, 291, 1382, 281, 3607, 472, 295, 729, 30, 50928], "temperature": 0.0, "avg_logprob": -0.3260154724121094, "compression_ratio": 1.47979797979798, "no_speech_prob": 0.0009107266087085009}, {"id": 283, "seek": 125332, "start": 1266.04, "end": 1268.04, "text": " Fit teas on instagram", "tokens": [51000, 29263, 11488, 322, 22102, 51100], "temperature": 0.0, "avg_logprob": -0.3260154724121094, "compression_ratio": 1.47979797979798, "no_speech_prob": 0.0009107266087085009}, {"id": 284, "seek": 125332, "start": 1269.48, "end": 1274.4399999999998, "text": " I'm just I'm trying to make a joke and be funny, but that was just a terrible joke", "tokens": [51172, 286, 478, 445, 286, 478, 1382, 281, 652, 257, 7647, 293, 312, 4074, 11, 457, 300, 390, 445, 257, 6237, 7647, 51420], "temperature": 0.0, "avg_logprob": -0.3260154724121094, "compression_ratio": 1.47979797979798, "no_speech_prob": 0.0009107266087085009}, {"id": 285, "seek": 125332, "start": 1275.0, "end": 1276.84, "text": " pathetic", "tokens": [51448, 35506, 51540], "temperature": 0.0, "avg_logprob": -0.3260154724121094, "compression_ratio": 1.47979797979798, "no_speech_prob": 0.0009107266087085009}, {"id": 286, "seek": 125332, "start": 1276.84, "end": 1278.84, "text": " uh, so Joshua block says", "tokens": [51540, 2232, 11, 370, 24005, 3461, 1619, 51640], "temperature": 0.0, "avg_logprob": -0.3260154724121094, "compression_ratio": 1.47979797979798, "no_speech_prob": 0.0009107266087085009}, {"id": 287, "seek": 127884, "start": 1279.6399999999999, "end": 1282.52, "text": " To detect invalid parameters as soon as possible", "tokens": [50404, 1407, 5531, 34702, 9834, 382, 2321, 382, 1944, 50548], "temperature": 0.0, "avg_logprob": -0.12495465278625488, "compression_ratio": 1.708695652173913, "no_speech_prob": 0.0017272784607484937}, {"id": 288, "seek": 127884, "start": 1283.0, "end": 1289.32, "text": " Check parameter validity in the builders constructor constructor and methods. So that's what I've done here pretty much", "tokens": [50572, 6881, 13075, 40943, 294, 264, 36281, 47479, 47479, 293, 7150, 13, 407, 300, 311, 437, 286, 600, 1096, 510, 1238, 709, 50888], "temperature": 0.0, "avg_logprob": -0.12495465278625488, "compression_ratio": 1.708695652173913, "no_speech_prob": 0.0017272784607484937}, {"id": 289, "seek": 127884, "start": 1290.12, "end": 1295.48, "text": " Check invariance involving multiple parameters. So this is again, I'm checking this parameter here", "tokens": [50928, 6881, 33270, 719, 17030, 3866, 9834, 13, 407, 341, 307, 797, 11, 286, 478, 8568, 341, 13075, 510, 51196], "temperature": 0.0, "avg_logprob": -0.12495465278625488, "compression_ratio": 1.708695652173913, "no_speech_prob": 0.0017272784607484937}, {"id": 290, "seek": 127884, "start": 1296.9199999999998, "end": 1301.56, "text": " Do the checks on object fields after copying parameters from the builder if a check fails", "tokens": [51268, 1144, 264, 13834, 322, 2657, 7909, 934, 27976, 9834, 490, 264, 27377, 498, 257, 1520, 18199, 51500], "temperature": 0.0, "avg_logprob": -0.12495465278625488, "compression_ratio": 1.708695652173913, "no_speech_prob": 0.0017272784607484937}, {"id": 291, "seek": 127884, "start": 1302.12, "end": 1304.12, "text": " Throw an illegal argument exception", "tokens": [51528, 22228, 364, 11905, 6770, 11183, 51628], "temperature": 0.0, "avg_logprob": -0.12495465278625488, "compression_ratio": 1.708695652173913, "no_speech_prob": 0.0017272784607484937}, {"id": 292, "seek": 130412, "start": 1304.4399999999998, "end": 1307.4799999999998, "text": " Whose detail message indicates which parameter is invalid", "tokens": [50380, 28463, 2607, 3636, 16203, 597, 13075, 307, 34702, 50532], "temperature": 0.0, "avg_logprob": -0.1607961654663086, "compression_ratio": 1.6693227091633467, "no_speech_prob": 0.016399245709180832}, {"id": 293, "seek": 130412, "start": 1307.8, "end": 1313.7199999999998, "text": " That's that's actually a good point because it even tells us specifically here where it's failing. So we know", "tokens": [50548, 663, 311, 300, 311, 767, 257, 665, 935, 570, 309, 754, 5112, 505, 4682, 510, 689, 309, 311, 18223, 13, 407, 321, 458, 50844], "temperature": 0.0, "avg_logprob": -0.1607961654663086, "compression_ratio": 1.6693227091633467, "no_speech_prob": 0.016399245709180832}, {"id": 294, "seek": 130412, "start": 1314.52, "end": 1320.28, "text": " Debugging is much easier that that that's a best way of putting it because if you do recall with the", "tokens": [50884, 27347, 697, 3249, 307, 709, 3571, 300, 300, 300, 311, 257, 1151, 636, 295, 3372, 309, 570, 498, 291, 360, 9901, 365, 264, 51172], "temperature": 0.0, "avg_logprob": -0.1607961654663086, "compression_ratio": 1.6693227091633467, "no_speech_prob": 0.016399245709180832}, {"id": 295, "seek": 130412, "start": 1321.32, "end": 1322.6, "text": " previous two", "tokens": [51224, 3894, 732, 51288], "temperature": 0.0, "avg_logprob": -0.1607961654663086, "compression_ratio": 1.6693227091633467, "no_speech_prob": 0.016399245709180832}, {"id": 296, "seek": 130412, "start": 1322.6, "end": 1324.6, "text": " patents a big issue is", "tokens": [51288, 38142, 257, 955, 2734, 307, 51388], "temperature": 0.0, "avg_logprob": -0.1607961654663086, "compression_ratio": 1.6693227091633467, "no_speech_prob": 0.016399245709180832}, {"id": 297, "seek": 130412, "start": 1324.84, "end": 1330.9199999999998, "text": " Even if something fails on runtime the debugging can be a lot more harder and much more deeply in the code that is", "tokens": [51400, 2754, 498, 746, 18199, 322, 34474, 264, 45592, 393, 312, 257, 688, 544, 6081, 293, 709, 544, 8760, 294, 264, 3089, 300, 307, 51704], "temperature": 0.0, "avg_logprob": -0.1607961654663086, "compression_ratio": 1.6693227091633467, "no_speech_prob": 0.016399245709180832}, {"id": 298, "seek": 133092, "start": 1331.72, "end": 1338.3600000000001, "text": " Not gonna make programming easy and of course if I didn't already state before the code is a lot more neater. It looks prettier", "tokens": [50404, 1726, 799, 652, 9410, 1858, 293, 295, 1164, 498, 286, 994, 380, 1217, 1785, 949, 264, 3089, 307, 257, 688, 544, 408, 771, 13, 467, 1542, 36825, 50736], "temperature": 0.0, "avg_logprob": -0.1741562872817836, "compression_ratio": 1.6346153846153846, "no_speech_prob": 0.006096591707319021}, {"id": 299, "seek": 133092, "start": 1339.16, "end": 1345.0800000000002, "text": " You could use method chaining keeps the code concise and very importantly. We don't run into that problem of having", "tokens": [50776, 509, 727, 764, 3170, 417, 3686, 5965, 264, 3089, 44882, 293, 588, 8906, 13, 492, 500, 380, 1190, 666, 300, 1154, 295, 1419, 51072], "temperature": 0.0, "avg_logprob": -0.1741562872817836, "compression_ratio": 1.6346153846153846, "no_speech_prob": 0.006096591707319021}, {"id": 300, "seek": 133092, "start": 1345.88, "end": 1347.88, "text": " objects uh in", "tokens": [51112, 6565, 2232, 294, 51212], "temperature": 0.0, "avg_logprob": -0.1741562872817836, "compression_ratio": 1.6346153846153846, "no_speech_prob": 0.006096591707319021}, {"id": 301, "seek": 133092, "start": 1348.52, "end": 1352.04, "text": " Inconsistent states like we would do with the java beans pattern", "tokens": [51244, 7779, 892, 25367, 4368, 411, 321, 576, 360, 365, 264, 361, 4061, 12010, 5102, 51420], "temperature": 0.0, "avg_logprob": -0.1741562872817836, "compression_ratio": 1.6346153846153846, "no_speech_prob": 0.006096591707319021}, {"id": 302, "seek": 133092, "start": 1352.44, "end": 1357.64, "text": " Because that isn't allowed here because you need to chain all the methods when constructing the object", "tokens": [51440, 1436, 300, 1943, 380, 4350, 510, 570, 291, 643, 281, 5021, 439, 264, 7150, 562, 39969, 264, 2657, 51700], "temperature": 0.0, "avg_logprob": -0.1741562872817836, "compression_ratio": 1.6346153846153846, "no_speech_prob": 0.006096591707319021}, {"id": 303, "seek": 135764, "start": 1357.72, "end": 1361.72, "text": " And certainly method chaining is something we see a lot in different jdk libraries", "tokens": [50368, 400, 3297, 3170, 417, 3686, 307, 746, 321, 536, 257, 688, 294, 819, 361, 67, 74, 15148, 50568], "temperature": 0.0, "avg_logprob": -0.11374140215349628, "compression_ratio": 1.7954545454545454, "no_speech_prob": 0.0015486092306673527}, {"id": 304, "seek": 135764, "start": 1362.2800000000002, "end": 1364.8400000000001, "text": " It's most probably because they've used the builder pattern", "tokens": [50596, 467, 311, 881, 1391, 570, 436, 600, 1143, 264, 27377, 5102, 50724], "temperature": 0.0, "avg_logprob": -0.11374140215349628, "compression_ratio": 1.7954545454545454, "no_speech_prob": 0.0015486092306673527}, {"id": 305, "seek": 135764, "start": 1365.4, "end": 1368.44, "text": " Which is why for us using them. It's a lot more easier", "tokens": [50752, 3013, 307, 983, 337, 505, 1228, 552, 13, 467, 311, 257, 688, 544, 3571, 50904], "temperature": 0.0, "avg_logprob": -0.11374140215349628, "compression_ratio": 1.7954545454545454, "no_speech_prob": 0.0015486092306673527}, {"id": 306, "seek": 135764, "start": 1368.8400000000001, "end": 1373.8000000000002, "text": " And then jb states the builder pattern is well suited to class hierarchies", "tokens": [50924, 400, 550, 361, 65, 4368, 264, 27377, 5102, 307, 731, 24736, 281, 1508, 35250, 530, 51172], "temperature": 0.0, "avg_logprob": -0.11374140215349628, "compression_ratio": 1.7954545454545454, "no_speech_prob": 0.0015486092306673527}, {"id": 307, "seek": 135764, "start": 1374.76, "end": 1379.3200000000002, "text": " Use a parallel hierarchy of builders each nested in the corresponding class", "tokens": [51220, 8278, 257, 8952, 22333, 295, 36281, 1184, 15646, 292, 294, 264, 11760, 1508, 51448], "temperature": 0.0, "avg_logprob": -0.11374140215349628, "compression_ratio": 1.7954545454545454, "no_speech_prob": 0.0015486092306673527}, {"id": 308, "seek": 135764, "start": 1379.8000000000002, "end": 1381.8000000000002, "text": " Abstract classes can have abstract builders", "tokens": [51472, 46853, 1897, 5359, 393, 362, 12649, 36281, 51572], "temperature": 0.0, "avg_logprob": -0.11374140215349628, "compression_ratio": 1.7954545454545454, "no_speech_prob": 0.0015486092306673527}, {"id": 309, "seek": 135764, "start": 1382.2800000000002, "end": 1386.68, "text": " Concrete classes can have concrete builders. This was a bit hard for me to get it", "tokens": [51596, 18200, 7600, 5359, 393, 362, 9859, 36281, 13, 639, 390, 257, 857, 1152, 337, 385, 281, 483, 309, 51816], "temperature": 0.0, "avg_logprob": -0.11374140215349628, "compression_ratio": 1.7954545454545454, "no_speech_prob": 0.0015486092306673527}, {"id": 310, "seek": 138668, "start": 1387.16, "end": 1391.16, "text": " I wouldn't say it was hard for me to get but there's one certain part which I'll get to a bit later", "tokens": [50388, 286, 2759, 380, 584, 309, 390, 1152, 337, 385, 281, 483, 457, 456, 311, 472, 1629, 644, 597, 286, 603, 483, 281, 257, 857, 1780, 50588], "temperature": 0.0, "avg_logprob": -0.11831764663968768, "compression_ratio": 1.725868725868726, "no_speech_prob": 0.004829199984669685}, {"id": 311, "seek": 138668, "start": 1391.5600000000002, "end": 1393.16, "text": " involving generics", "tokens": [50608, 17030, 1337, 1167, 50688], "temperature": 0.0, "avg_logprob": -0.11831764663968768, "compression_ratio": 1.725868725868726, "no_speech_prob": 0.004829199984669685}, {"id": 312, "seek": 138668, "start": 1393.16, "end": 1396.8400000000001, "text": " Which I had to really struggle to get my head around it", "tokens": [50688, 3013, 286, 632, 281, 534, 7799, 281, 483, 452, 1378, 926, 309, 50872], "temperature": 0.0, "avg_logprob": -0.11831764663968768, "compression_ratio": 1.725868725868726, "no_speech_prob": 0.004829199984669685}, {"id": 313, "seek": 138668, "start": 1397.5600000000002, "end": 1402.52, "text": " But once again, though it does once you once it does make sense once it once it clicks", "tokens": [50908, 583, 1564, 797, 11, 1673, 309, 775, 1564, 291, 1564, 309, 775, 652, 2020, 1564, 309, 1564, 309, 18521, 51156], "temperature": 0.0, "avg_logprob": -0.11831764663968768, "compression_ratio": 1.725868725868726, "no_speech_prob": 0.004829199984669685}, {"id": 314, "seek": 138668, "start": 1403.48, "end": 1406.92, "text": " You can see the beauty of the builder pattern in it and that's the best part about it", "tokens": [51204, 509, 393, 536, 264, 6643, 295, 264, 27377, 5102, 294, 309, 293, 300, 311, 264, 1151, 644, 466, 309, 51376], "temperature": 0.0, "avg_logprob": -0.11831764663968768, "compression_ratio": 1.725868725868726, "no_speech_prob": 0.004829199984669685}, {"id": 315, "seek": 138668, "start": 1407.0, "end": 1412.68, "text": " So let's try to understand what he means by the builder pattern is well suited to class hierarchies", "tokens": [51380, 407, 718, 311, 853, 281, 1223, 437, 415, 1355, 538, 264, 27377, 5102, 307, 731, 24736, 281, 1508, 35250, 530, 51664], "temperature": 0.0, "avg_logprob": -0.11831764663968768, "compression_ratio": 1.725868725868726, "no_speech_prob": 0.004829199984669685}, {"id": 316, "seek": 141268, "start": 1413.0, "end": 1417.5600000000002, "text": " Firstly, I'll simply define or explain this class hierarchy. I've built here", "tokens": [50380, 20042, 11, 286, 603, 2935, 6964, 420, 2903, 341, 1508, 22333, 13, 286, 600, 3094, 510, 50608], "temperature": 0.0, "avg_logprob": -0.13354674482767562, "compression_ratio": 2.0, "no_speech_prob": 0.021942922845482826}, {"id": 317, "seek": 141268, "start": 1418.04, "end": 1422.6000000000001, "text": " We have a simple abstract pizza class which I've defined here as you can see", "tokens": [50632, 492, 362, 257, 2199, 12649, 8298, 1508, 597, 286, 600, 7642, 510, 382, 291, 393, 536, 50860], "temperature": 0.0, "avg_logprob": -0.13354674482767562, "compression_ratio": 2.0, "no_speech_prob": 0.021942922845482826}, {"id": 318, "seek": 141268, "start": 1423.16, "end": 1427.3200000000002, "text": " And then we have two subclasses that inherits this class. We have calzone", "tokens": [50888, 400, 550, 321, 362, 732, 1422, 11665, 279, 300, 9484, 1208, 341, 1508, 13, 492, 362, 2104, 16896, 51096], "temperature": 0.0, "avg_logprob": -0.13354674482767562, "compression_ratio": 2.0, "no_speech_prob": 0.021942922845482826}, {"id": 319, "seek": 141268, "start": 1427.72, "end": 1431.48, "text": " Which extends which is a concrete class that extends the abstract pizza class", "tokens": [51116, 3013, 26448, 597, 307, 257, 9859, 1508, 300, 26448, 264, 12649, 8298, 1508, 51304], "temperature": 0.0, "avg_logprob": -0.13354674482767562, "compression_ratio": 2.0, "no_speech_prob": 0.021942922845482826}, {"id": 320, "seek": 141268, "start": 1431.96, "end": 1437.4, "text": " And then we have we have sorry new york pizza, which is also another concrete class which extends the", "tokens": [51328, 400, 550, 321, 362, 321, 362, 2597, 777, 288, 1284, 8298, 11, 597, 307, 611, 1071, 9859, 1508, 597, 26448, 264, 51600], "temperature": 0.0, "avg_logprob": -0.13354674482767562, "compression_ratio": 2.0, "no_speech_prob": 0.021942922845482826}, {"id": 321, "seek": 141268, "start": 1437.96, "end": 1441.72, "text": " abstract pizza class and afterwards if you do go to the client you could see", "tokens": [51628, 12649, 8298, 1508, 293, 10543, 498, 291, 360, 352, 281, 264, 6423, 291, 727, 536, 51816], "temperature": 0.0, "avg_logprob": -0.13354674482767562, "compression_ratio": 2.0, "no_speech_prob": 0.021942922845482826}, {"id": 322, "seek": 144172, "start": 1442.28, "end": 1446.6000000000001, "text": " How it's been implemented and again, I know this is a very high level, but I'll go into the details soon", "tokens": [50392, 1012, 309, 311, 668, 12270, 293, 797, 11, 286, 458, 341, 307, 257, 588, 1090, 1496, 11, 457, 286, 603, 352, 666, 264, 4365, 2321, 50608], "temperature": 0.0, "avg_logprob": -0.14762386766452235, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.007576075382530689}, {"id": 323, "seek": 144172, "start": 1448.2, "end": 1450.2, "text": " Similar pattern if you do run it", "tokens": [50688, 10905, 5102, 498, 291, 360, 1190, 309, 50788], "temperature": 0.0, "avg_logprob": -0.14762386766452235, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.007576075382530689}, {"id": 324, "seek": 144172, "start": 1450.2, "end": 1455.72, "text": " You'll see both these objects being have been created and I'm getting the superclass", "tokens": [50788, 509, 603, 536, 1293, 613, 6565, 885, 362, 668, 2942, 293, 286, 478, 1242, 264, 1687, 11665, 51064], "temperature": 0.0, "avg_logprob": -0.14762386766452235, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.007576075382530689}, {"id": 325, "seek": 144172, "start": 1455.8, "end": 1460.2, "text": " It's both got the same pizza superclass make sense similar pattern", "tokens": [51068, 467, 311, 1293, 658, 264, 912, 8298, 1687, 11665, 652, 2020, 2531, 5102, 51288], "temperature": 0.0, "avg_logprob": -0.14762386766452235, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.007576075382530689}, {"id": 326, "seek": 144172, "start": 1460.68, "end": 1463.16, "text": " ending with the build method so firstly", "tokens": [51312, 8121, 365, 264, 1322, 3170, 370, 27376, 51436], "temperature": 0.0, "avg_logprob": -0.14762386766452235, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.007576075382530689}, {"id": 327, "seek": 144172, "start": 1463.48, "end": 1468.84, "text": " Let's take a look at the pizza class the pizza abstract class and see what's going on here", "tokens": [51452, 961, 311, 747, 257, 574, 412, 264, 8298, 1508, 264, 8298, 12649, 1508, 293, 536, 437, 311, 516, 322, 510, 51720], "temperature": 0.0, "avg_logprob": -0.14762386766452235, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.007576075382530689}, {"id": 328, "seek": 146884, "start": 1469.48, "end": 1473.6399999999999, "text": " In the similar way because we're using the builder pattern. We have another inner", "tokens": [50396, 682, 264, 2531, 636, 570, 321, 434, 1228, 264, 27377, 5102, 13, 492, 362, 1071, 7284, 50604], "temperature": 0.0, "avg_logprob": -0.1722047979181463, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.003074829000979662}, {"id": 329, "seek": 146884, "start": 1474.4399999999998, "end": 1476.4399999999998, "text": " static builder class", "tokens": [50644, 13437, 27377, 1508, 50744], "temperature": 0.0, "avg_logprob": -0.1722047979181463, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.003074829000979662}, {"id": 330, "seek": 146884, "start": 1476.9199999999998, "end": 1479.8799999999999, "text": " But you probably see it's a bit more different", "tokens": [50768, 583, 291, 1391, 536, 309, 311, 257, 857, 544, 819, 50916], "temperature": 0.0, "avg_logprob": -0.1722047979181463, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.003074829000979662}, {"id": 331, "seek": 146884, "start": 1480.4399999999998, "end": 1485.24, "text": " We need to allow something called a simulated self type now", "tokens": [50944, 492, 643, 281, 2089, 746, 1219, 257, 41713, 2698, 2010, 586, 51184], "temperature": 0.0, "avg_logprob": -0.1722047979181463, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.003074829000979662}, {"id": 332, "seek": 146884, "start": 1485.32, "end": 1487.1599999999999, "text": " This was the bit that", "tokens": [51188, 639, 390, 264, 857, 300, 51280], "temperature": 0.0, "avg_logprob": -0.1722047979181463, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.003074829000979662}, {"id": 333, "seek": 146884, "start": 1487.1599999999999, "end": 1494.28, "text": " Took me a bit to grok and make sense of because it involves using generics and it's doing something called a", "tokens": [51280, 38288, 385, 257, 857, 281, 4634, 74, 293, 652, 2020, 295, 570, 309, 11626, 1228, 1337, 1167, 293, 309, 311, 884, 746, 1219, 257, 51636], "temperature": 0.0, "avg_logprob": -0.1722047979181463, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.003074829000979662}, {"id": 334, "seek": 146884, "start": 1495.0, "end": 1497.0, "text": " simulated self type", "tokens": [51672, 41713, 2698, 2010, 51772], "temperature": 0.0, "avg_logprob": -0.1722047979181463, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.003074829000979662}, {"id": 335, "seek": 149700, "start": 1497.48, "end": 1499.48, "text": " What what does that mean?", "tokens": [50388, 708, 437, 775, 300, 914, 30, 50488], "temperature": 0.0, "avg_logprob": -0.15355669777348357, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.003649334888905287}, {"id": 336, "seek": 149700, "start": 1499.48, "end": 1503.16, "text": " Let me see if I could explain it. I would say I got it, but", "tokens": [50488, 961, 385, 536, 498, 286, 727, 2903, 309, 13, 286, 576, 584, 286, 658, 309, 11, 457, 50672], "temperature": 0.0, "avg_logprob": -0.15355669777348357, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.003649334888905287}, {"id": 337, "seek": 149700, "start": 1504.04, "end": 1506.04, "text": " I think I'm I'm still struggling", "tokens": [50716, 286, 519, 286, 478, 286, 478, 920, 9314, 50816], "temperature": 0.0, "avg_logprob": -0.15355669777348357, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.003649334888905287}, {"id": 338, "seek": 149700, "start": 1506.2, "end": 1508.2, "text": " to articulate it clearly", "tokens": [50824, 281, 30305, 309, 4448, 50924], "temperature": 0.0, "avg_logprob": -0.15355669777348357, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.003649334888905287}, {"id": 339, "seek": 149700, "start": 1508.2, "end": 1510.6, "text": " And and let me let me let me give a shot", "tokens": [50924, 400, 293, 718, 385, 718, 385, 718, 385, 976, 257, 3347, 51044], "temperature": 0.0, "avg_logprob": -0.15355669777348357, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.003649334888905287}, {"id": 340, "seek": 149700, "start": 1511.32, "end": 1516.6, "text": " So I didn't get what a simulated self type was from effective java. I couldn't understand it", "tokens": [51080, 407, 286, 994, 380, 483, 437, 257, 41713, 2698, 2010, 390, 490, 4942, 361, 4061, 13, 286, 2809, 380, 1223, 309, 51344], "temperature": 0.0, "avg_logprob": -0.15355669777348357, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.003649334888905287}, {"id": 341, "seek": 149700, "start": 1517.08, "end": 1519.08, "text": " and then I found this great", "tokens": [51368, 293, 550, 286, 1352, 341, 869, 51468], "temperature": 0.0, "avg_logprob": -0.15355669777348357, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.003649334888905287}, {"id": 342, "seek": 149700, "start": 1519.32, "end": 1521.32, "text": " blog post by", "tokens": [51480, 6968, 2183, 538, 51580], "temperature": 0.0, "avg_logprob": -0.15355669777348357, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.003649334888905287}, {"id": 343, "seek": 149700, "start": 1521.8, "end": 1524.28, "text": " This gentleman's name is nicolai palok", "tokens": [51604, 639, 15761, 311, 1315, 307, 6201, 401, 1301, 3984, 453, 51728], "temperature": 0.0, "avg_logprob": -0.15355669777348357, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.003649334888905287}, {"id": 344, "seek": 152428, "start": 1525.0, "end": 1527.0, "text": " Fantastic article. It was written in 2016", "tokens": [50400, 21320, 7222, 13, 467, 390, 3720, 294, 6549, 50500], "temperature": 0.0, "avg_logprob": -0.13214449371610368, "compression_ratio": 1.5781818181818181, "no_speech_prob": 0.00475417310371995}, {"id": 345, "seek": 152428, "start": 1527.48, "end": 1529.48, "text": " Pretty much goes into everything you need to know about", "tokens": [50524, 10693, 709, 1709, 666, 1203, 291, 643, 281, 458, 466, 50624], "temperature": 0.0, "avg_logprob": -0.13214449371610368, "compression_ratio": 1.5781818181818181, "no_speech_prob": 0.00475417310371995}, {"id": 346, "seek": 152428, "start": 1529.8799999999999, "end": 1535.0, "text": " The idea of java not having a a self method or it doesn't allow us", "tokens": [50644, 440, 1558, 295, 361, 4061, 406, 1419, 257, 257, 2698, 3170, 420, 309, 1177, 380, 2089, 505, 50900], "temperature": 0.0, "avg_logprob": -0.13214449371610368, "compression_ratio": 1.5781818181818181, "no_speech_prob": 0.00475417310371995}, {"id": 347, "seek": 152428, "start": 1535.8, "end": 1539.6399999999999, "text": " Self and this those two keywords are a bit different. We will I'll I'll get you that too", "tokens": [50940, 16348, 293, 341, 729, 732, 21009, 366, 257, 857, 819, 13, 492, 486, 286, 603, 286, 603, 483, 291, 300, 886, 51132], "temperature": 0.0, "avg_logprob": -0.13214449371610368, "compression_ratio": 1.5781818181818181, "no_speech_prob": 0.00475417310371995}, {"id": 348, "seek": 152428, "start": 1540.2, "end": 1543.32, "text": " Um because java doesn't have that we sort of have to simulate it", "tokens": [51160, 3301, 570, 361, 4061, 1177, 380, 362, 300, 321, 1333, 295, 362, 281, 27817, 309, 51316], "temperature": 0.0, "avg_logprob": -0.13214449371610368, "compression_ratio": 1.5781818181818181, "no_speech_prob": 0.00475417310371995}, {"id": 349, "seek": 152428, "start": 1543.3999999999999, "end": 1546.12, "text": " And that's what just your block is doing in this example", "tokens": [51320, 400, 300, 311, 437, 445, 428, 3461, 307, 884, 294, 341, 1365, 51456], "temperature": 0.0, "avg_logprob": -0.13214449371610368, "compression_ratio": 1.5781818181818181, "no_speech_prob": 0.00475417310371995}, {"id": 350, "seek": 152428, "start": 1546.52, "end": 1549.6399999999999, "text": " But also what one would generally do uh to get a self type", "tokens": [51476, 583, 611, 437, 472, 576, 5101, 360, 2232, 281, 483, 257, 2698, 2010, 51632], "temperature": 0.0, "avg_logprob": -0.13214449371610368, "compression_ratio": 1.5781818181818181, "no_speech_prob": 0.00475417310371995}, {"id": 351, "seek": 154964, "start": 1549.88, "end": 1556.0400000000002, "text": " And it's important to understand. Oh if we didn't do the simulated self type", "tokens": [50376, 400, 309, 311, 1021, 281, 1223, 13, 876, 498, 321, 994, 380, 360, 264, 41713, 2698, 2010, 50684], "temperature": 0.0, "avg_logprob": -0.2572230690403988, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.008311215788125992}, {"id": 352, "seek": 154964, "start": 1556.2800000000002, "end": 1561.4, "text": " We may have to use casting and that is not going to work because it's very important to understand", "tokens": [50696, 492, 815, 362, 281, 764, 17301, 293, 300, 307, 406, 516, 281, 589, 570, 309, 311, 588, 1021, 281, 1223, 50952], "temperature": 0.0, "avg_logprob": -0.2572230690403988, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.008311215788125992}, {"id": 353, "seek": 154964, "start": 1561.88, "end": 1564.68, "text": " that for the builder pattern to work with the", "tokens": [50976, 300, 337, 264, 27377, 5102, 281, 589, 365, 264, 51116], "temperature": 0.0, "avg_logprob": -0.2572230690403988, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.008311215788125992}, {"id": 354, "seek": 154964, "start": 1565.8000000000002, "end": 1569.3200000000002, "text": " Method chaining which I have where where's an example?", "tokens": [51172, 25285, 417, 3686, 597, 286, 362, 689, 689, 311, 364, 1365, 30, 51348], "temperature": 0.0, "avg_logprob": -0.2572230690403988, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.008311215788125992}, {"id": 355, "seek": 154964, "start": 1571.96, "end": 1573.64, "text": " Nope", "tokens": [51480, 12172, 51564], "temperature": 0.0, "avg_logprob": -0.2572230690403988, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.008311215788125992}, {"id": 356, "seek": 154964, "start": 1573.64, "end": 1577.64, "text": " Always when you need an x. Oh, yeah. No, that's not the exact that's telescope construct", "tokens": [51564, 11270, 562, 291, 643, 364, 2031, 13, 876, 11, 1338, 13, 883, 11, 300, 311, 406, 264, 1900, 300, 311, 26114, 7690, 51764], "temperature": 0.0, "avg_logprob": -0.2572230690403988, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.008311215788125992}, {"id": 357, "seek": 157764, "start": 1577.64, "end": 1582.76, "text": " Yeah, for this method chaining to happen the proper type or the proper subtype", "tokens": [50364, 865, 11, 337, 341, 3170, 417, 3686, 281, 1051, 264, 2296, 2010, 420, 264, 2296, 1422, 20467, 50620], "temperature": 0.0, "avg_logprob": -0.13248783407859432, "compression_ratio": 1.8591549295774648, "no_speech_prob": 0.0013042936334386468}, {"id": 358, "seek": 157764, "start": 1583.3200000000002, "end": 1586.1200000000001, "text": " Have has to be passed. Uh, sorry has to be returned", "tokens": [50648, 3560, 575, 281, 312, 4678, 13, 4019, 11, 2597, 575, 281, 312, 8752, 50788], "temperature": 0.0, "avg_logprob": -0.13248783407859432, "compression_ratio": 1.8591549295774648, "no_speech_prob": 0.0013042936334386468}, {"id": 359, "seek": 157764, "start": 1587.0, "end": 1591.88, "text": " And in the hierarchical, this is a bad example. I should be using the hierarchical builders one", "tokens": [50832, 400, 294, 264, 35250, 804, 11, 341, 307, 257, 1578, 1365, 13, 286, 820, 312, 1228, 264, 35250, 804, 36281, 472, 51076], "temperature": 0.0, "avg_logprob": -0.13248783407859432, "compression_ratio": 1.8591549295774648, "no_speech_prob": 0.0013042936334386468}, {"id": 360, "seek": 157764, "start": 1592.2800000000002, "end": 1597.0800000000002, "text": " Yes, over here in the class hierarchies the proper subtype has to be returned", "tokens": [51096, 1079, 11, 670, 510, 294, 264, 1508, 35250, 530, 264, 2296, 1422, 20467, 575, 281, 312, 8752, 51336], "temperature": 0.0, "avg_logprob": -0.13248783407859432, "compression_ratio": 1.8591549295774648, "no_speech_prob": 0.0013042936334386468}, {"id": 361, "seek": 157764, "start": 1597.5600000000002, "end": 1602.0400000000002, "text": " For this method chaining to work. So what a simulated self type does", "tokens": [51360, 1171, 341, 3170, 417, 3686, 281, 589, 13, 407, 437, 257, 41713, 2698, 2010, 775, 51584], "temperature": 0.0, "avg_logprob": -0.13248783407859432, "compression_ratio": 1.8591549295774648, "no_speech_prob": 0.0013042936334386468}, {"id": 362, "seek": 157764, "start": 1602.8400000000001, "end": 1604.8400000000001, "text": " is these subclasses so", "tokens": [51624, 307, 613, 1422, 11665, 279, 370, 51724], "temperature": 0.0, "avg_logprob": -0.13248783407859432, "compression_ratio": 1.8591549295774648, "no_speech_prob": 0.0013042936334386468}, {"id": 363, "seek": 160484, "start": 1605.8, "end": 1608.76, "text": " In this instance, it's new york pizza and calzone", "tokens": [50412, 682, 341, 5197, 11, 309, 311, 777, 288, 1284, 8298, 293, 2104, 16896, 50560], "temperature": 0.0, "avg_logprob": -0.09270398183302446, "compression_ratio": 1.702970297029703, "no_speech_prob": 0.002630450064316392}, {"id": 364, "seek": 160484, "start": 1610.76, "end": 1615.3999999999999, "text": " They can get an instance of their own type instead of the parent and and again", "tokens": [50660, 814, 393, 483, 364, 5197, 295, 641, 1065, 2010, 2602, 295, 264, 2596, 293, 293, 797, 50892], "temperature": 0.0, "avg_logprob": -0.09270398183302446, "compression_ratio": 1.702970297029703, "no_speech_prob": 0.002630450064316392}, {"id": 365, "seek": 160484, "start": 1615.6399999999999, "end": 1618.12, "text": " I know i'm sort of beating on a dead horse here", "tokens": [50904, 286, 458, 741, 478, 1333, 295, 13497, 322, 257, 3116, 6832, 510, 51028], "temperature": 0.0, "avg_logprob": -0.09270398183302446, "compression_ratio": 1.702970297029703, "no_speech_prob": 0.002630450064316392}, {"id": 366, "seek": 160484, "start": 1618.12, "end": 1621.72, "text": " But it's important to understand that for this method method chaining to work", "tokens": [51028, 583, 309, 311, 1021, 281, 1223, 300, 337, 341, 3170, 3170, 417, 3686, 281, 589, 51208], "temperature": 0.0, "avg_logprob": -0.09270398183302446, "compression_ratio": 1.702970297029703, "no_speech_prob": 0.002630450064316392}, {"id": 367, "seek": 160484, "start": 1622.04, "end": 1624.04, "text": " They have to get a instance", "tokens": [51224, 814, 362, 281, 483, 257, 5197, 51324], "temperature": 0.0, "avg_logprob": -0.09270398183302446, "compression_ratio": 1.702970297029703, "no_speech_prob": 0.002630450064316392}, {"id": 368, "seek": 160484, "start": 1624.6, "end": 1628.28, "text": " Of their own type not the parent not the abstract class pizza", "tokens": [51352, 2720, 641, 1065, 2010, 406, 264, 2596, 406, 264, 12649, 1508, 8298, 51536], "temperature": 0.0, "avg_logprob": -0.09270398183302446, "compression_ratio": 1.702970297029703, "no_speech_prob": 0.002630450064316392}, {"id": 369, "seek": 162828, "start": 1628.76, "end": 1634.12, "text": " New york pizza has to get a an instance of new york pizza or of of type of", "tokens": [50388, 1873, 288, 1284, 8298, 575, 281, 483, 257, 364, 5197, 295, 777, 288, 1284, 8298, 420, 295, 295, 2010, 295, 50656], "temperature": 0.0, "avg_logprob": -0.22501881287829711, "compression_ratio": 1.632034632034632, "no_speech_prob": 0.02332226373255253}, {"id": 370, "seek": 162828, "start": 1634.76, "end": 1638.6, "text": " Subtype the new york pizza and before I do a deep dive in the code", "tokens": [50688, 8511, 20467, 264, 777, 288, 1284, 8298, 293, 949, 286, 360, 257, 2452, 9192, 294, 264, 3089, 50880], "temperature": 0.0, "avg_logprob": -0.22501881287829711, "compression_ratio": 1.632034632034632, "no_speech_prob": 0.02332226373255253}, {"id": 371, "seek": 162828, "start": 1638.84, "end": 1644.28, "text": " I want to read these excerpts from nickolai palogues a blog post the recent being again", "tokens": [50892, 286, 528, 281, 1401, 613, 42760, 39280, 490, 15416, 401, 1301, 3984, 664, 1247, 257, 6968, 2183, 264, 5162, 885, 797, 51164], "temperature": 0.0, "avg_logprob": -0.22501881287829711, "compression_ratio": 1.632034632034632, "no_speech_prob": 0.02332226373255253}, {"id": 372, "seek": 162828, "start": 1644.36, "end": 1647.0, "text": " I think it's important to first conceptually understand", "tokens": [51168, 286, 519, 309, 311, 1021, 281, 700, 3410, 671, 1223, 51300], "temperature": 0.0, "avg_logprob": -0.22501881287829711, "compression_ratio": 1.632034632034632, "no_speech_prob": 0.02332226373255253}, {"id": 373, "seek": 162828, "start": 1647.8, "end": 1653.96, "text": " What a simulated self type is what's the reason for it and its justifications. Let's say so", "tokens": [51340, 708, 257, 41713, 2698, 2010, 307, 437, 311, 264, 1778, 337, 309, 293, 1080, 445, 7833, 13, 961, 311, 584, 370, 51648], "temperature": 0.0, "avg_logprob": -0.22501881287829711, "compression_ratio": 1.632034632034632, "no_speech_prob": 0.02332226373255253}, {"id": 374, "seek": 165396, "start": 1654.68, "end": 1659.16, "text": " Nikolai states a self type refers to the type on which a method is called", "tokens": [50400, 13969, 401, 1301, 4368, 257, 2698, 2010, 14942, 281, 264, 2010, 322, 597, 257, 3170, 307, 1219, 50624], "temperature": 0.0, "avg_logprob": -0.15837331347995334, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.0005613223765976727}, {"id": 375, "seek": 165396, "start": 1659.72, "end": 1661.72, "text": " more formally the receiver", "tokens": [50652, 544, 25983, 264, 20086, 50752], "temperature": 0.0, "avg_logprob": -0.15837331347995334, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.0005613223765976727}, {"id": 376, "seek": 165396, "start": 1662.2, "end": 1664.3600000000001, "text": " But java doesn't have this feature. So", "tokens": [50776, 583, 361, 4061, 1177, 380, 362, 341, 4111, 13, 407, 50884], "temperature": 0.0, "avg_logprob": -0.15837331347995334, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.0005613223765976727}, {"id": 377, "seek": 165396, "start": 1665.24, "end": 1667.48, "text": " In here the self type would be", "tokens": [50928, 682, 510, 264, 2698, 2010, 576, 312, 51040], "temperature": 0.0, "avg_logprob": -0.15837331347995334, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.0005613223765976727}, {"id": 378, "seek": 165396, "start": 1669.56, "end": 1673.32, "text": " Why can't I what do I keep losing that that that class or that bit of code?", "tokens": [51144, 1545, 393, 380, 286, 437, 360, 286, 1066, 7027, 300, 300, 300, 1508, 420, 300, 857, 295, 3089, 30, 51332], "temperature": 0.0, "avg_logprob": -0.15837331347995334, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.0005613223765976727}, {"id": 379, "seek": 165396, "start": 1674.44, "end": 1676.44, "text": " Bloody annoying", "tokens": [51388, 46877, 11304, 51488], "temperature": 0.0, "avg_logprob": -0.15837331347995334, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.0005613223765976727}, {"id": 380, "seek": 165396, "start": 1676.8400000000001, "end": 1678.8400000000001, "text": " Where is it?", "tokens": [51508, 2305, 307, 309, 30, 51608], "temperature": 0.0, "avg_logprob": -0.15837331347995334, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.0005613223765976727}, {"id": 381, "seek": 165396, "start": 1679.56, "end": 1681.56, "text": " There we go, you son of a bitch", "tokens": [51644, 821, 321, 352, 11, 291, 1872, 295, 257, 11960, 51744], "temperature": 0.0, "avg_logprob": -0.15837331347995334, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.0005613223765976727}, {"id": 382, "seek": 168156, "start": 1681.72, "end": 1685.32, "text": " Um, so here this in the method chaining", "tokens": [50372, 3301, 11, 370, 510, 341, 294, 264, 3170, 417, 3686, 50552], "temperature": 0.0, "avg_logprob": -0.18851507627047026, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.0026725290808826685}, {"id": 383, "seek": 168156, "start": 1688.44, "end": 1691.0, "text": " On which method is called more formally called the receiver", "tokens": [50708, 1282, 597, 3170, 307, 1219, 544, 25983, 1219, 264, 20086, 50836], "temperature": 0.0, "avg_logprob": -0.18851507627047026, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.0026725290808826685}, {"id": 384, "seek": 168156, "start": 1692.28, "end": 1694.28, "text": " a self type so", "tokens": [50900, 257, 2698, 2010, 370, 51000], "temperature": 0.0, "avg_logprob": -0.18851507627047026, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.0026725290808826685}, {"id": 385, "seek": 168156, "start": 1694.52, "end": 1702.36, "text": " The receiver should get new york pizza type, but java unfortunately it doesn't have this particular feature of a self type", "tokens": [51012, 440, 20086, 820, 483, 777, 288, 1284, 8298, 2010, 11, 457, 361, 4061, 7015, 309, 1177, 380, 362, 341, 1729, 4111, 295, 257, 2698, 2010, 51404], "temperature": 0.0, "avg_logprob": -0.18851507627047026, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.0026725290808826685}, {"id": 386, "seek": 168156, "start": 1704.6799999999998, "end": 1706.6799999999998, "text": " If a soft type", "tokens": [51520, 759, 257, 2787, 2010, 51620], "temperature": 0.0, "avg_logprob": -0.18851507627047026, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.0026725290808826685}, {"id": 387, "seek": 170668, "start": 1707.0800000000002, "end": 1709.0800000000002, "text": " Is used in an inherited method", "tokens": [50384, 1119, 1143, 294, 364, 27091, 3170, 50484], "temperature": 0.0, "avg_logprob": -0.11017193332795173, "compression_ratio": 1.7903930131004366, "no_speech_prob": 0.016146264970302582}, {"id": 388, "seek": 170668, "start": 1709.4, "end": 1714.92, "text": " It represents a different type in each class that declares or inherits that method", "tokens": [50500, 467, 8855, 257, 819, 2010, 294, 1184, 1508, 300, 979, 19415, 420, 9484, 1208, 300, 3170, 50776], "temperature": 0.0, "avg_logprob": -0.11017193332795173, "compression_ratio": 1.7903930131004366, "no_speech_prob": 0.016146264970302582}, {"id": 389, "seek": 170668, "start": 1715.48, "end": 1717.48, "text": " Namely that specific class", "tokens": [50804, 10684, 736, 300, 2685, 1508, 50904], "temperature": 0.0, "avg_logprob": -0.11017193332795173, "compression_ratio": 1.7903930131004366, "no_speech_prob": 0.016146264970302582}, {"id": 390, "seek": 170668, "start": 1718.04, "end": 1721.0800000000002, "text": " No matter whether it declared or inherited the method", "tokens": [50932, 883, 1871, 1968, 309, 15489, 420, 27091, 264, 3170, 51084], "temperature": 0.0, "avg_logprob": -0.11017193332795173, "compression_ratio": 1.7903930131004366, "no_speech_prob": 0.016146264970302582}, {"id": 391, "seek": 170668, "start": 1721.8, "end": 1727.88, "text": " casually speaking it is the compile time equivalent of this dot get class or the type of this", "tokens": [51120, 34872, 4124, 309, 307, 264, 31413, 565, 10344, 295, 341, 5893, 483, 1508, 420, 264, 2010, 295, 341, 51424], "temperature": 0.0, "avg_logprob": -0.11017193332795173, "compression_ratio": 1.7903930131004366, "no_speech_prob": 0.016146264970302582}, {"id": 392, "seek": 170668, "start": 1729.64, "end": 1730.8400000000001, "text": " I think", "tokens": [51512, 286, 519, 51572], "temperature": 0.0, "avg_logprob": -0.11017193332795173, "compression_ratio": 1.7903930131004366, "no_speech_prob": 0.016146264970302582}, {"id": 393, "seek": 170668, "start": 1730.8400000000001, "end": 1736.2, "text": " Well, I was gonna say I think that's quite straightforward, but it probably will be quite straightforward once we", "tokens": [51572, 1042, 11, 286, 390, 799, 584, 286, 519, 300, 311, 1596, 15325, 11, 457, 309, 1391, 486, 312, 1596, 15325, 1564, 321, 51840], "temperature": 0.0, "avg_logprob": -0.11017193332795173, "compression_ratio": 1.7903930131004366, "no_speech_prob": 0.016146264970302582}, {"id": 394, "seek": 173668, "start": 1737.0, "end": 1740.2, "text": " Look into the code base. Let's start off with the abstract class", "tokens": [50380, 2053, 666, 264, 3089, 3096, 13, 961, 311, 722, 766, 365, 264, 12649, 1508, 50540], "temperature": 0.0, "avg_logprob": -0.1487248420715332, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.005384041462093592}, {"id": 395, "seek": 173668, "start": 1740.2, "end": 1745.72, "text": " It kind of makes sense because the subclasses are going to inherit this. So we have this pizza constructor method here", "tokens": [50540, 467, 733, 295, 1669, 2020, 570, 264, 1422, 11665, 279, 366, 516, 281, 21389, 341, 13, 407, 321, 362, 341, 8298, 47479, 3170, 510, 50816], "temperature": 0.0, "avg_logprob": -0.1487248420715332, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.005384041462093592}, {"id": 396, "seek": 173668, "start": 1745.72, "end": 1747.72, "text": " Oh, I want to state one thing. Um", "tokens": [50816, 876, 11, 286, 528, 281, 1785, 472, 551, 13, 3301, 50916], "temperature": 0.0, "avg_logprob": -0.1487248420715332, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.005384041462093592}, {"id": 397, "seek": 173668, "start": 1748.28, "end": 1750.6000000000001, "text": " I will not go into detail on this bit", "tokens": [50944, 286, 486, 406, 352, 666, 2607, 322, 341, 857, 51060], "temperature": 0.0, "avg_logprob": -0.1487248420715332, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.005384041462093592}, {"id": 398, "seek": 173668, "start": 1750.8400000000001, "end": 1755.48, "text": " But because we will be discussing it in a future video in item 50 to be", "tokens": [51072, 583, 570, 321, 486, 312, 10850, 309, 294, 257, 2027, 960, 294, 3174, 2625, 281, 312, 51304], "temperature": 0.0, "avg_logprob": -0.1487248420715332, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.005384041462093592}, {"id": 399, "seek": 173668, "start": 1756.04, "end": 1762.8400000000001, "text": " Uh specific, but the idea is that over here in line number 33. We are making what one would call a defensive copy", "tokens": [51332, 4019, 2685, 11, 457, 264, 1558, 307, 300, 670, 510, 294, 1622, 1230, 11816, 13, 492, 366, 1455, 437, 472, 576, 818, 257, 16468, 5055, 51672], "temperature": 0.0, "avg_logprob": -0.1487248420715332, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.005384041462093592}, {"id": 400, "seek": 173668, "start": 1763.48, "end": 1765.48, "text": " this is just to ensure that", "tokens": [51704, 341, 307, 445, 281, 5586, 300, 51804], "temperature": 0.0, "avg_logprob": -0.1487248420715332, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.005384041462093592}, {"id": 401, "seek": 176548, "start": 1765.64, "end": 1770.1200000000001, "text": " The encaps and encapsulation of this class is in broken that that fundamental", "tokens": [50372, 440, 38745, 293, 38745, 2776, 295, 341, 1508, 307, 294, 5463, 300, 300, 8088, 50596], "temperature": 0.0, "avg_logprob": -0.170710958615698, "compression_ratio": 1.691699604743083, "no_speech_prob": 0.0017539917025715113}, {"id": 402, "seek": 176548, "start": 1770.68, "end": 1774.1200000000001, "text": " OOP principle isn't infringed upon we", "tokens": [50624, 422, 12059, 8665, 1943, 380, 45205, 292, 3564, 321, 50796], "temperature": 0.0, "avg_logprob": -0.170710958615698, "compression_ratio": 1.691699604743083, "no_speech_prob": 0.0017539917025715113}, {"id": 403, "seek": 176548, "start": 1774.68, "end": 1777.24, "text": " Stick to our principles. So as OOP programmers", "tokens": [50824, 22744, 281, 527, 9156, 13, 407, 382, 422, 12059, 41504, 50952], "temperature": 0.0, "avg_logprob": -0.170710958615698, "compression_ratio": 1.691699604743083, "no_speech_prob": 0.0017539917025715113}, {"id": 404, "seek": 176548, "start": 1777.8, "end": 1782.2, "text": " So what this does is when the native class changes immutable objects feel", "tokens": [50980, 407, 437, 341, 775, 307, 562, 264, 8470, 1508, 2962, 3397, 32148, 6565, 841, 51200], "temperature": 0.0, "avg_logprob": -0.170710958615698, "compression_ratio": 1.691699604743083, "no_speech_prob": 0.0017539917025715113}, {"id": 405, "seek": 176548, "start": 1783.08, "end": 1788.68, "text": " A defensive copy should be made anytime it's passed into a constructor like this or out of the class", "tokens": [51244, 316, 16468, 5055, 820, 312, 1027, 13038, 309, 311, 4678, 666, 257, 47479, 411, 341, 420, 484, 295, 264, 1508, 51524], "temperature": 0.0, "avg_logprob": -0.170710958615698, "compression_ratio": 1.691699604743083, "no_speech_prob": 0.0017539917025715113}, {"id": 406, "seek": 176548, "start": 1789.24, "end": 1793.88, "text": " When the object of this class will be created this topics member is what's going to change", "tokens": [51552, 1133, 264, 2657, 295, 341, 1508, 486, 312, 2942, 341, 8378, 4006, 307, 437, 311, 516, 281, 1319, 51784], "temperature": 0.0, "avg_logprob": -0.170710958615698, "compression_ratio": 1.691699604743083, "no_speech_prob": 0.0017539917025715113}, {"id": 407, "seek": 179388, "start": 1794.0400000000002, "end": 1795.8000000000002, "text": " It's going to be mutable", "tokens": [50372, 467, 311, 516, 281, 312, 5839, 712, 50460], "temperature": 0.0, "avg_logprob": -0.12381965883316533, "compression_ratio": 1.6610738255033557, "no_speech_prob": 0.01427670568227768}, {"id": 408, "seek": 179388, "start": 1795.8000000000002, "end": 1799.96, "text": " Because in the add toppings method it's it's being changed essentially", "tokens": [50460, 1436, 294, 264, 909, 43052, 3170, 309, 311, 309, 311, 885, 3105, 4476, 50668], "temperature": 0.0, "avg_logprob": -0.12381965883316533, "compression_ratio": 1.6610738255033557, "no_speech_prob": 0.01427670568227768}, {"id": 409, "seek": 179388, "start": 1800.68, "end": 1803.0, "text": " And and that's why we create this defensive copy", "tokens": [50704, 400, 293, 300, 311, 983, 321, 1884, 341, 16468, 5055, 50820], "temperature": 0.0, "avg_logprob": -0.12381965883316533, "compression_ratio": 1.6610738255033557, "no_speech_prob": 0.01427670568227768}, {"id": 410, "seek": 179388, "start": 1803.5600000000002, "end": 1805.72, "text": " again, I'm not going to go into detail firstly because", "tokens": [50848, 797, 11, 286, 478, 406, 516, 281, 352, 666, 2607, 27376, 570, 50956], "temperature": 0.0, "avg_logprob": -0.12381965883316533, "compression_ratio": 1.6610738255033557, "no_speech_prob": 0.01427670568227768}, {"id": 411, "seek": 179388, "start": 1806.6000000000001, "end": 1811.64, "text": " I think this is a bad example to understand it. It even took me a while. I had to go through some blog posts", "tokens": [51000, 286, 519, 341, 307, 257, 1578, 1365, 281, 1223, 309, 13, 467, 754, 1890, 385, 257, 1339, 13, 286, 632, 281, 352, 807, 512, 6968, 12300, 51252], "temperature": 0.0, "avg_logprob": -0.12381965883316533, "compression_ratio": 1.6610738255033557, "no_speech_prob": 0.01427670568227768}, {"id": 412, "seek": 179388, "start": 1812.2, "end": 1817.5600000000002, "text": " But also because we will be discussing that in the future and when we do get to item 50", "tokens": [51280, 583, 611, 570, 321, 486, 312, 10850, 300, 294, 264, 2027, 293, 562, 321, 360, 483, 281, 3174, 2625, 51548], "temperature": 0.0, "avg_logprob": -0.12381965883316533, "compression_ratio": 1.6610738255033557, "no_speech_prob": 0.01427670568227768}, {"id": 413, "seek": 179388, "start": 1817.72, "end": 1822.44, "text": " Which probably is going to be next year. I shall leave a link to that video in the description too", "tokens": [51556, 3013, 1391, 307, 516, 281, 312, 958, 1064, 13, 286, 4393, 1856, 257, 2113, 281, 300, 960, 294, 264, 3855, 886, 51792], "temperature": 0.0, "avg_logprob": -0.12381965883316533, "compression_ratio": 1.6610738255033557, "no_speech_prob": 0.01427670568227768}, {"id": 414, "seek": 182244, "start": 1822.68, "end": 1825.8, "text": " In any case, I don't want to go off on our tangent because I want to focus on the", "tokens": [50376, 682, 604, 1389, 11, 286, 500, 380, 528, 281, 352, 766, 322, 527, 27747, 570, 286, 528, 281, 1879, 322, 264, 50532], "temperature": 0.0, "avg_logprob": -0.21658072070540668, "compression_ratio": 1.7991266375545851, "no_speech_prob": 0.008982413448393345}, {"id": 415, "seek": 182244, "start": 1826.52, "end": 1829.0, "text": " Simulated self type. So pizza dot builder", "tokens": [50568, 3998, 6987, 2698, 2010, 13, 407, 8298, 5893, 27377, 50692], "temperature": 0.0, "avg_logprob": -0.21658072070540668, "compression_ratio": 1.7991266375545851, "no_speech_prob": 0.008982413448393345}, {"id": 416, "seek": 182244, "start": 1829.88, "end": 1831.88, "text": " Is a generic type that would be", "tokens": [50736, 1119, 257, 19577, 2010, 300, 576, 312, 50836], "temperature": 0.0, "avg_logprob": -0.21658072070540668, "compression_ratio": 1.7991266375545851, "no_speech_prob": 0.008982413448393345}, {"id": 417, "seek": 182244, "start": 1832.92, "end": 1834.92, "text": " Here when we do", "tokens": [50888, 1692, 562, 321, 360, 50988], "temperature": 0.0, "avg_logprob": -0.21658072070540668, "compression_ratio": 1.7991266375545851, "no_speech_prob": 0.008982413448393345}, {"id": 418, "seek": 182244, "start": 1834.92, "end": 1837.16, "text": " construct the builder object", "tokens": [50988, 7690, 264, 27377, 2657, 51100], "temperature": 0.0, "avg_logprob": -0.21658072070540668, "compression_ratio": 1.7991266375545851, "no_speech_prob": 0.008982413448393345}, {"id": 419, "seek": 182244, "start": 1837.88, "end": 1844.44, "text": " Uh, it's a generic type with a recursive type parameter. That's a confusing bit because well, it's called a", "tokens": [51136, 4019, 11, 309, 311, 257, 19577, 2010, 365, 257, 20560, 488, 2010, 13075, 13, 663, 311, 257, 13181, 857, 570, 731, 11, 309, 311, 1219, 257, 51464], "temperature": 0.0, "avg_logprob": -0.21658072070540668, "compression_ratio": 1.7991266375545851, "no_speech_prob": 0.008982413448393345}, {"id": 420, "seek": 182244, "start": 1845.0, "end": 1851.3200000000002, "text": " Recursive type parameter because as you can see pizza dot builder is extending the builder with its own", "tokens": [51492, 9647, 2156, 488, 2010, 13075, 570, 382, 291, 393, 536, 8298, 5893, 27377, 307, 24360, 264, 27377, 365, 1080, 1065, 51808], "temperature": 0.0, "avg_logprob": -0.21658072070540668, "compression_ratio": 1.7991266375545851, "no_speech_prob": 0.008982413448393345}, {"id": 421, "seek": 185132, "start": 1851.72, "end": 1853.72, "text": " generic type parameter", "tokens": [50384, 19577, 2010, 13075, 50484], "temperature": 0.0, "avg_logprob": -0.23927940719429103, "compression_ratio": 1.73, "no_speech_prob": 0.004132946487516165}, {"id": 422, "seek": 185132, "start": 1854.6, "end": 1861.1599999999999, "text": " And and I've even left a comment here saying that this the the generic type parameter here is necessary for the training to work", "tokens": [50528, 400, 293, 286, 600, 754, 1411, 257, 2871, 510, 1566, 300, 341, 264, 264, 19577, 2010, 13075, 510, 307, 4818, 337, 264, 3097, 281, 589, 50856], "temperature": 0.0, "avg_logprob": -0.23927940719429103, "compression_ratio": 1.73, "no_speech_prob": 0.004132946487516165}, {"id": 423, "seek": 185132, "start": 1862.28, "end": 1865.32, "text": " And same comment I've left here. It allows to", "tokens": [50912, 400, 912, 2871, 286, 600, 1411, 510, 13, 467, 4045, 281, 51064], "temperature": 0.0, "avg_logprob": -0.23927940719429103, "compression_ratio": 1.73, "no_speech_prob": 0.004132946487516165}, {"id": 424, "seek": 185132, "start": 1865.8799999999999, "end": 1867.8799999999999, "text": " simulate the self type", "tokens": [51092, 27817, 264, 2698, 2010, 51192], "temperature": 0.0, "avg_logprob": -0.23927940719429103, "compression_ratio": 1.73, "no_speech_prob": 0.004132946487516165}, {"id": 425, "seek": 185132, "start": 1867.96, "end": 1869.72, "text": " And just a box says", "tokens": [51196, 400, 445, 257, 2424, 1619, 51284], "temperature": 0.0, "avg_logprob": -0.23927940719429103, "compression_ratio": 1.73, "no_speech_prob": 0.004132946487516165}, {"id": 426, "seek": 185132, "start": 1869.72, "end": 1873.72, "text": " this alone with the abstract self method that would be this", "tokens": [51284, 341, 3312, 365, 264, 12649, 2698, 3170, 300, 576, 312, 341, 51484], "temperature": 0.0, "avg_logprob": -0.23927940719429103, "compression_ratio": 1.73, "no_speech_prob": 0.004132946487516165}, {"id": 427, "seek": 185132, "start": 1874.52, "end": 1878.36, "text": " And this will be overridden by the subclasses", "tokens": [51524, 400, 341, 486, 312, 670, 81, 6171, 538, 264, 1422, 11665, 279, 51716], "temperature": 0.0, "avg_logprob": -0.23927940719429103, "compression_ratio": 1.73, "no_speech_prob": 0.004132946487516165}, {"id": 428, "seek": 187836, "start": 1878.9199999999998, "end": 1885.24, "text": " Because it's in fact, this is probably a bit more easy to understand because it's called self sort of makes sense", "tokens": [50392, 1436, 309, 311, 294, 1186, 11, 341, 307, 1391, 257, 857, 544, 1858, 281, 1223, 570, 309, 311, 1219, 2698, 1333, 295, 1669, 2020, 50708], "temperature": 0.0, "avg_logprob": -0.12534354714786305, "compression_ratio": 1.7684729064039408, "no_speech_prob": 0.0042638229206204414}, {"id": 429, "seek": 187836, "start": 1885.6399999999999, "end": 1891.9599999999998, "text": " This is what gives the subclass an instance of their own type instead of the parent instead of pizza. So", "tokens": [50728, 639, 307, 437, 2709, 264, 1422, 11665, 364, 5197, 295, 641, 1065, 2010, 2602, 295, 264, 2596, 2602, 295, 8298, 13, 407, 51044], "temperature": 0.0, "avg_logprob": -0.12534354714786305, "compression_ratio": 1.7684729064039408, "no_speech_prob": 0.0042638229206204414}, {"id": 430, "seek": 187836, "start": 1892.76, "end": 1898.4399999999998, "text": " Uh, new york pizza would get an instance of their own type instead of the pizza type", "tokens": [51084, 4019, 11, 777, 288, 1284, 8298, 576, 483, 364, 5197, 295, 641, 1065, 2010, 2602, 295, 264, 8298, 2010, 51368], "temperature": 0.0, "avg_logprob": -0.12534354714786305, "compression_ratio": 1.7684729064039408, "no_speech_prob": 0.0042638229206204414}, {"id": 431, "seek": 187836, "start": 1899.56, "end": 1903.7199999999998, "text": " However in combination with this bit here the recursive", "tokens": [51424, 2908, 294, 6562, 365, 341, 857, 510, 264, 20560, 488, 51632], "temperature": 0.0, "avg_logprob": -0.12534354714786305, "compression_ratio": 1.7684729064039408, "no_speech_prob": 0.0042638229206204414}, {"id": 432, "seek": 190372, "start": 1904.52, "end": 1906.52, "text": " Uh, sorry the simulated", "tokens": [50404, 4019, 11, 2597, 264, 41713, 50504], "temperature": 0.0, "avg_logprob": -0.1649115456475152, "compression_ratio": 1.5598290598290598, "no_speech_prob": 0.002757109934464097}, {"id": 433, "seek": 190372, "start": 1906.6000000000001, "end": 1911.88, "text": " Man the recursive self parameter. This is really annoying because it's it's it's really how to get your head around it", "tokens": [50508, 2458, 264, 20560, 488, 2698, 13075, 13, 639, 307, 534, 11304, 570, 309, 311, 309, 311, 309, 311, 534, 577, 281, 483, 428, 1378, 926, 309, 50772], "temperature": 0.0, "avg_logprob": -0.1649115456475152, "compression_ratio": 1.5598290598290598, "no_speech_prob": 0.002757109934464097}, {"id": 434, "seek": 190372, "start": 1913.08, "end": 1914.76, "text": " and this", "tokens": [50832, 293, 341, 50916], "temperature": 0.0, "avg_logprob": -0.1649115456475152, "compression_ratio": 1.5598290598290598, "no_speech_prob": 0.002757109934464097}, {"id": 435, "seek": 190372, "start": 1914.76, "end": 1916.76, "text": " abstract self method", "tokens": [50916, 12649, 2698, 3170, 51016], "temperature": 0.0, "avg_logprob": -0.1649115456475152, "compression_ratio": 1.5598290598290598, "no_speech_prob": 0.002757109934464097}, {"id": 436, "seek": 190372, "start": 1917.32, "end": 1918.92, "text": " It allows us", "tokens": [51044, 467, 4045, 505, 51124], "temperature": 0.0, "avg_logprob": -0.1649115456475152, "compression_ratio": 1.5598290598290598, "no_speech_prob": 0.002757109934464097}, {"id": 437, "seek": 190372, "start": 1918.92, "end": 1923.88, "text": " For method training to work and this is the key point without the need for casts", "tokens": [51124, 1171, 3170, 3097, 281, 589, 293, 341, 307, 264, 2141, 935, 1553, 264, 643, 337, 41921, 51372], "temperature": 0.0, "avg_logprob": -0.1649115456475152, "compression_ratio": 1.5598290598290598, "no_speech_prob": 0.002757109934464097}, {"id": 438, "seek": 190372, "start": 1924.2, "end": 1930.6000000000001, "text": " You probably remember I showed an example before which was this. So let's assume this extends some", "tokens": [51388, 509, 1391, 1604, 286, 4712, 364, 1365, 949, 597, 390, 341, 13, 407, 718, 311, 6552, 341, 26448, 512, 51708], "temperature": 0.0, "avg_logprob": -0.1649115456475152, "compression_ratio": 1.5598290598290598, "no_speech_prob": 0.002757109934464097}, {"id": 439, "seek": 193060, "start": 1931.48, "end": 1933.48, "text": " Superclass called super person", "tokens": [50408, 4548, 11665, 1219, 1687, 954, 50508], "temperature": 0.0, "avg_logprob": -0.14160828418042287, "compression_ratio": 1.5911330049261083, "no_speech_prob": 0.003171604825183749}, {"id": 440, "seek": 193060, "start": 1935.3999999999999, "end": 1937.9599999999998, "text": " And here when this does return it", "tokens": [50604, 400, 510, 562, 341, 775, 2736, 309, 50732], "temperature": 0.0, "avg_logprob": -0.14160828418042287, "compression_ratio": 1.5911330049261083, "no_speech_prob": 0.003171604825183749}, {"id": 441, "seek": 193060, "start": 1938.76, "end": 1942.6799999999998, "text": " It shouldn't it if you don't put the cast it will return", "tokens": [50772, 467, 4659, 380, 309, 498, 291, 500, 380, 829, 264, 4193, 309, 486, 2736, 50968], "temperature": 0.0, "avg_logprob": -0.14160828418042287, "compression_ratio": 1.5911330049261083, "no_speech_prob": 0.003171604825183749}, {"id": 442, "seek": 193060, "start": 1943.24, "end": 1950.04, "text": " Uh, a type of super person not person and which is why the cast is required here. However in our case", "tokens": [50996, 4019, 11, 257, 2010, 295, 1687, 954, 406, 954, 293, 597, 307, 983, 264, 4193, 307, 4739, 510, 13, 2908, 294, 527, 1389, 51336], "temperature": 0.0, "avg_logprob": -0.14160828418042287, "compression_ratio": 1.5911330049261083, "no_speech_prob": 0.003171604825183749}, {"id": 443, "seek": 193060, "start": 1951.0, "end": 1956.28, "text": " When we're using the bill of pattern because of this abstract self method, we don't have to do that", "tokens": [51384, 1133, 321, 434, 1228, 264, 2961, 295, 5102, 570, 295, 341, 12649, 2698, 3170, 11, 321, 500, 380, 362, 281, 360, 300, 51648], "temperature": 0.0, "avg_logprob": -0.14160828418042287, "compression_ratio": 1.5911330049261083, "no_speech_prob": 0.003171604825183749}, {"id": 444, "seek": 195628, "start": 1956.28, "end": 1964.28, "text": " We don't have to use the casts and I shall show you now in a subclass. So let's use new york pizza where this happens firstly", "tokens": [50364, 492, 500, 380, 362, 281, 764, 264, 41921, 293, 286, 4393, 855, 291, 586, 294, 257, 1422, 11665, 13, 407, 718, 311, 764, 777, 288, 1284, 8298, 689, 341, 2314, 27376, 50764], "temperature": 0.0, "avg_logprob": -0.09787621100743611, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.00364866154268384}, {"id": 445, "seek": 195628, "start": 1965.56, "end": 1969.32, "text": " We we pass the proper subtype of this class to the generic parameter", "tokens": [50828, 492, 321, 1320, 264, 2296, 1422, 20467, 295, 341, 1508, 281, 264, 19577, 13075, 51016], "temperature": 0.0, "avg_logprob": -0.09787621100743611, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.00364866154268384}, {"id": 446, "seek": 195628, "start": 1969.72, "end": 1971.16, "text": " That's for sure", "tokens": [51036, 663, 311, 337, 988, 51108], "temperature": 0.0, "avg_logprob": -0.09787621100743611, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.00364866154268384}, {"id": 447, "seek": 195628, "start": 1971.16, "end": 1974.92, "text": " And then we have this bit here where the overriding takes place", "tokens": [51108, 400, 550, 321, 362, 341, 857, 510, 689, 264, 670, 81, 2819, 2516, 1081, 51296], "temperature": 0.0, "avg_logprob": -0.09787621100743611, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.00364866154268384}, {"id": 448, "seek": 195628, "start": 1975.3999999999999, "end": 1981.8799999999999, "text": " Of the self method where it returns an instance of the subclass of new york pizza and not pizza", "tokens": [51320, 2720, 264, 2698, 3170, 689, 309, 11247, 364, 5197, 295, 264, 1422, 11665, 295, 777, 288, 1284, 8298, 293, 406, 8298, 51644], "temperature": 0.0, "avg_logprob": -0.09787621100743611, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.00364866154268384}, {"id": 449, "seek": 198188, "start": 1982.44, "end": 1984.44, "text": " And in that way as we do use the", "tokens": [50392, 400, 294, 300, 636, 382, 321, 360, 764, 264, 50492], "temperature": 0.0, "avg_logprob": -0.1337125755491711, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.004980577155947685}, {"id": 450, "seek": 198188, "start": 1985.16, "end": 1990.0400000000002, "text": " The method training and finally the build method returns the correct subclass", "tokens": [50528, 440, 3170, 3097, 293, 2721, 264, 1322, 3170, 11247, 264, 3006, 1422, 11665, 50772], "temperature": 0.0, "avg_logprob": -0.1337125755491711, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.004980577155947685}, {"id": 451, "seek": 198188, "start": 1990.68, "end": 1996.92, "text": " It will not which it's clearly over here. It's saying return new new york pizza of this instance", "tokens": [50804, 467, 486, 406, 597, 309, 311, 4448, 670, 510, 13, 467, 311, 1566, 2736, 777, 777, 288, 1284, 8298, 295, 341, 5197, 51116], "temperature": 0.0, "avg_logprob": -0.1337125755491711, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.004980577155947685}, {"id": 452, "seek": 198188, "start": 1997.5600000000002, "end": 2001.96, "text": " So this is what allows it all to beautifully come together when we do use it", "tokens": [51148, 407, 341, 307, 437, 4045, 309, 439, 281, 16525, 808, 1214, 562, 321, 360, 764, 309, 51368], "temperature": 0.0, "avg_logprob": -0.1337125755491711, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.004980577155947685}, {"id": 453, "seek": 198188, "start": 2003.8000000000002, "end": 2005.8000000000002, "text": " Over here with the method chain", "tokens": [51460, 4886, 510, 365, 264, 3170, 5021, 51560], "temperature": 0.0, "avg_logprob": -0.1337125755491711, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.004980577155947685}, {"id": 454, "seek": 198188, "start": 2007.4, "end": 2008.6000000000001, "text": " I don't know", "tokens": [51640, 286, 500, 380, 458, 51700], "temperature": 0.0, "avg_logprob": -0.1337125755491711, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.004980577155947685}, {"id": 455, "seek": 200860, "start": 2008.6, "end": 2013.8, "text": " How well of a job I did at explaining that it is a difficult concept to grasp especially the", "tokens": [50364, 1012, 731, 295, 257, 1691, 286, 630, 412, 13468, 300, 309, 307, 257, 2252, 3410, 281, 21743, 2318, 264, 50624], "temperature": 0.0, "avg_logprob": -0.1897432327270508, "compression_ratio": 1.6068702290076335, "no_speech_prob": 0.016146473586559296}, {"id": 456, "seek": 200860, "start": 2014.36, "end": 2016.36, "text": " the recursive type parameter I", "tokens": [50652, 264, 20560, 488, 2010, 13075, 286, 50752], "temperature": 0.0, "avg_logprob": -0.1897432327270508, "compression_ratio": 1.6068702290076335, "no_speech_prob": 0.016146473586559296}, {"id": 457, "seek": 200860, "start": 2016.4399999999998, "end": 2019.7199999999998, "text": " I still I'm struggling to understand that really from something honest, but", "tokens": [50756, 286, 920, 286, 478, 9314, 281, 1223, 300, 534, 490, 746, 3245, 11, 457, 50920], "temperature": 0.0, "avg_logprob": -0.1897432327270508, "compression_ratio": 1.6068702290076335, "no_speech_prob": 0.016146473586559296}, {"id": 458, "seek": 200860, "start": 2020.4399999999998, "end": 2021.7199999999998, "text": " um", "tokens": [50956, 1105, 51020], "temperature": 0.0, "avg_logprob": -0.1897432327270508, "compression_ratio": 1.6068702290076335, "no_speech_prob": 0.016146473586559296}, {"id": 459, "seek": 200860, "start": 2021.7199999999998, "end": 2024.36, "text": " Maybe in the future videos I should consider", "tokens": [51020, 2704, 294, 264, 2027, 2145, 286, 820, 1949, 51152], "temperature": 0.0, "avg_logprob": -0.1897432327270508, "compression_ratio": 1.6068702290076335, "no_speech_prob": 0.016146473586559296}, {"id": 460, "seek": 200860, "start": 2025.48, "end": 2026.76, "text": " Coming up with", "tokens": [51208, 12473, 493, 365, 51272], "temperature": 0.0, "avg_logprob": -0.1897432327270508, "compression_ratio": 1.6068702290076335, "no_speech_prob": 0.016146473586559296}, {"id": 461, "seek": 200860, "start": 2026.76, "end": 2029.24, "text": " Married examples not just this particular example", "tokens": [51272, 2039, 2428, 5110, 406, 445, 341, 1729, 1365, 51396], "temperature": 0.0, "avg_logprob": -0.1897432327270508, "compression_ratio": 1.6068702290076335, "no_speech_prob": 0.016146473586559296}, {"id": 462, "seek": 200860, "start": 2029.24, "end": 2033.8799999999999, "text": " But trying to even create because this this this some of this code I got from joshu blocks get up repository", "tokens": [51396, 583, 1382, 281, 754, 1884, 570, 341, 341, 341, 512, 295, 341, 3089, 286, 658, 490, 361, 3019, 84, 8474, 483, 493, 25841, 51628], "temperature": 0.0, "avg_logprob": -0.1897432327270508, "compression_ratio": 1.6068702290076335, "no_speech_prob": 0.016146473586559296}, {"id": 463, "seek": 203388, "start": 2034.44, "end": 2038.8400000000001, "text": " Uh, well most of it in fact, so I should probably try and create some examples on my own", "tokens": [50392, 4019, 11, 731, 881, 295, 309, 294, 1186, 11, 370, 286, 820, 1391, 853, 293, 1884, 512, 5110, 322, 452, 1065, 50612], "temperature": 0.0, "avg_logprob": -0.18773680925369263, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.04669886454939842}, {"id": 464, "seek": 203388, "start": 2039.3200000000002, "end": 2041.3200000000002, "text": " Which it'll make it easy for me to", "tokens": [50636, 3013, 309, 603, 652, 309, 1858, 337, 385, 281, 50736], "temperature": 0.0, "avg_logprob": -0.18773680925369263, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.04669886454939842}, {"id": 465, "seek": 203388, "start": 2042.1200000000001, "end": 2043.4, "text": " Expand on", "tokens": [50776, 21391, 474, 322, 50840], "temperature": 0.0, "avg_logprob": -0.18773680925369263, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.04669886454939842}, {"id": 466, "seek": 203388, "start": 2043.4, "end": 2045.24, "text": " in any case, um", "tokens": [50840, 294, 604, 1389, 11, 1105, 50932], "temperature": 0.0, "avg_logprob": -0.18773680925369263, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.04669886454939842}, {"id": 467, "seek": 203388, "start": 2045.24, "end": 2051.2400000000002, "text": " JB states this technique. It's sort of funny. Sometimes I refer to him as JB sometimes as joshu block", "tokens": [50932, 43019, 4368, 341, 6532, 13, 467, 311, 1333, 295, 4074, 13, 4803, 286, 2864, 281, 796, 382, 43019, 2171, 382, 361, 3019, 84, 3461, 51232], "temperature": 0.0, "avg_logprob": -0.18773680925369263, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.04669886454939842}, {"id": 468, "seek": 203388, "start": 2051.8, "end": 2057.48, "text": " What am I doing the perpetual contradictions? I'm just going to stick to joshu block. I changed my mind jb", "tokens": [51260, 708, 669, 286, 884, 264, 48216, 15858, 15607, 30, 286, 478, 445, 516, 281, 2897, 281, 361, 3019, 84, 3461, 13, 286, 3105, 452, 1575, 361, 65, 51544], "temperature": 0.0, "avg_logprob": -0.18773680925369263, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.04669886454939842}, {"id": 469, "seek": 203388, "start": 2058.44, "end": 2061.96, "text": " joshu block sounds better. It's it's it's got a beautiful name. What can I say?", "tokens": [51592, 361, 3019, 84, 3461, 3263, 1101, 13, 467, 311, 309, 311, 309, 311, 658, 257, 2238, 1315, 13, 708, 393, 286, 584, 30, 51768], "temperature": 0.0, "avg_logprob": -0.18773680925369263, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.04669886454939842}, {"id": 470, "seek": 206196, "start": 2062.44, "end": 2063.64, "text": " um", "tokens": [50388, 1105, 50448], "temperature": 0.0, "avg_logprob": -0.18836954588531166, "compression_ratio": 1.8066037735849056, "no_speech_prob": 0.001648092526011169}, {"id": 471, "seek": 206196, "start": 2063.64, "end": 2069.7200000000003, "text": " This technique wherein a subclass method is declared to return a subtype of the return type", "tokens": [50448, 639, 6532, 43531, 257, 1422, 11665, 3170, 307, 15489, 281, 2736, 257, 1422, 20467, 295, 264, 2736, 2010, 50752], "temperature": 0.0, "avg_logprob": -0.18836954588531166, "compression_ratio": 1.8066037735849056, "no_speech_prob": 0.001648092526011169}, {"id": 472, "seek": 206196, "start": 2070.04, "end": 2074.2, "text": " declared in the superclass is known as covariant return typing", "tokens": [50768, 15489, 294, 264, 1687, 11665, 307, 2570, 382, 49851, 394, 2736, 18444, 50976], "temperature": 0.0, "avg_logprob": -0.18836954588531166, "compression_ratio": 1.8066037735849056, "no_speech_prob": 0.001648092526011169}, {"id": 473, "seek": 206196, "start": 2074.68, "end": 2079.64, "text": " It allows clients to use their builders without the need for casting covariant return typing", "tokens": [51000, 467, 4045, 6982, 281, 764, 641, 36281, 1553, 264, 643, 337, 17301, 49851, 394, 2736, 18444, 51248], "temperature": 0.0, "avg_logprob": -0.18836954588531166, "compression_ratio": 1.8066037735849056, "no_speech_prob": 0.001648092526011169}, {"id": 474, "seek": 206196, "start": 2080.68, "end": 2082.68, "text": " To be honest, isn't that hard to understand?", "tokens": [51300, 1407, 312, 3245, 11, 1943, 380, 300, 1152, 281, 1223, 30, 51400], "temperature": 0.0, "avg_logprob": -0.18836954588531166, "compression_ratio": 1.8066037735849056, "no_speech_prob": 0.001648092526011169}, {"id": 475, "seek": 206196, "start": 2082.92, "end": 2087.8, "text": " Um, and what we're really doing here is covariant covariant return typing by getting", "tokens": [51412, 3301, 11, 293, 437, 321, 434, 534, 884, 510, 307, 49851, 394, 49851, 394, 2736, 18444, 538, 1242, 51656], "temperature": 0.0, "avg_logprob": -0.18836954588531166, "compression_ratio": 1.8066037735849056, "no_speech_prob": 0.001648092526011169}, {"id": 476, "seek": 206196, "start": 2088.92, "end": 2090.92, "text": " uh", "tokens": [51712, 2232, 51812], "temperature": 0.0, "avg_logprob": -0.18836954588531166, "compression_ratio": 1.8066037735849056, "no_speech_prob": 0.001648092526011169}, {"id": 477, "seek": 209092, "start": 2091.32, "end": 2093.16, "text": " A subtype of the return type", "tokens": [50384, 316, 1422, 20467, 295, 264, 2736, 2010, 50476], "temperature": 0.0, "avg_logprob": -0.19082217933857334, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0013247928582131863}, {"id": 478, "seek": 209092, "start": 2093.16, "end": 2099.4, "text": " So if you go to simply if you go here, I have two classes. I have the class. I created two classes", "tokens": [50476, 407, 498, 291, 352, 281, 2935, 498, 291, 352, 510, 11, 286, 362, 732, 5359, 13, 286, 362, 264, 1508, 13, 286, 2942, 732, 5359, 50788], "temperature": 0.0, "avg_logprob": -0.19082217933857334, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0013247928582131863}, {"id": 479, "seek": 209092, "start": 2099.64, "end": 2105.16, "text": " Oh, also, uh, thanks to this stack overflow user who helped me understand this", "tokens": [50800, 876, 11, 611, 11, 2232, 11, 3231, 281, 341, 8630, 37772, 4195, 567, 4254, 385, 1223, 341, 51076], "temperature": 0.0, "avg_logprob": -0.19082217933857334, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0013247928582131863}, {"id": 480, "seek": 209092, "start": 2105.64, "end": 2109.48, "text": " The person's name is the person also gets into something called contra variants", "tokens": [51100, 440, 954, 311, 1315, 307, 264, 954, 611, 2170, 666, 746, 1219, 10742, 21669, 51292], "temperature": 0.0, "avg_logprob": -0.19082217933857334, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0013247928582131863}, {"id": 481, "seek": 209092, "start": 2109.56, "end": 2115.96, "text": " But we shall not get into that because it's not that apt to java. Uh, however, it's just an interesting engineering", "tokens": [51296, 583, 321, 4393, 406, 483, 666, 300, 570, 309, 311, 406, 300, 29427, 281, 361, 4061, 13, 4019, 11, 4461, 11, 309, 311, 445, 364, 1880, 7043, 51616], "temperature": 0.0, "avg_logprob": -0.19082217933857334, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0013247928582131863}, {"id": 482, "seek": 209092, "start": 2116.92, "end": 2118.92, "text": " uh, opsof opsof programming", "tokens": [51664, 2232, 11, 999, 539, 69, 999, 539, 69, 9410, 51764], "temperature": 0.0, "avg_logprob": -0.19082217933857334, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0013247928582131863}, {"id": 483, "seek": 211892, "start": 2119.48, "end": 2120.84, "text": " concept to", "tokens": [50392, 3410, 281, 50460], "temperature": 0.0, "avg_logprob": -0.23405912944248744, "compression_ratio": 1.5279187817258884, "no_speech_prob": 0.00638432614505291}, {"id": 484, "seek": 211892, "start": 2120.84, "end": 2122.04, "text": " understand", "tokens": [50460, 1223, 50520], "temperature": 0.0, "avg_logprob": -0.23405912944248744, "compression_ratio": 1.5279187817258884, "no_speech_prob": 0.00638432614505291}, {"id": 485, "seek": 211892, "start": 2122.04, "end": 2126.28, "text": " This user hard coded thanks to this user on stack overflow. I shall leave a", "tokens": [50520, 639, 4195, 1152, 34874, 3231, 281, 341, 4195, 322, 8630, 37772, 13, 286, 4393, 1856, 257, 50732], "temperature": 0.0, "avg_logprob": -0.23405912944248744, "compression_ratio": 1.5279187817258884, "no_speech_prob": 0.00638432614505291}, {"id": 486, "seek": 211892, "start": 2127.16, "end": 2130.84, "text": " Link to the answer down below in the comment section. Sorry in the description", "tokens": [50776, 8466, 281, 264, 1867, 760, 2507, 294, 264, 2871, 3541, 13, 4919, 294, 264, 3855, 50960], "temperature": 0.0, "avg_logprob": -0.23405912944248744, "compression_ratio": 1.5279187817258884, "no_speech_prob": 0.00638432614505291}, {"id": 487, "seek": 211892, "start": 2132.44, "end": 2134.12, "text": " so", "tokens": [51040, 370, 51124], "temperature": 0.0, "avg_logprob": -0.23405912944248744, "compression_ratio": 1.5279187817258884, "no_speech_prob": 0.00638432614505291}, {"id": 488, "seek": 211892, "start": 2134.12, "end": 2136.12, "text": " Here's simply what covariant", "tokens": [51124, 1692, 311, 2935, 437, 49851, 394, 51224], "temperature": 0.0, "avg_logprob": -0.23405912944248744, "compression_ratio": 1.5279187817258884, "no_speech_prob": 0.00638432614505291}, {"id": 489, "seek": 211892, "start": 2137.4, "end": 2138.92, "text": " um", "tokens": [51288, 1105, 51364], "temperature": 0.0, "avg_logprob": -0.23405912944248744, "compression_ratio": 1.5279187817258884, "no_speech_prob": 0.00638432614505291}, {"id": 490, "seek": 211892, "start": 2138.92, "end": 2140.92, "text": " What was it covariant return", "tokens": [51364, 708, 390, 309, 49851, 394, 2736, 51464], "temperature": 0.0, "avg_logprob": -0.23405912944248744, "compression_ratio": 1.5279187817258884, "no_speech_prob": 0.00638432614505291}, {"id": 491, "seek": 211892, "start": 2141.0, "end": 2142.2000000000003, "text": " typing is", "tokens": [51468, 18444, 307, 51528], "temperature": 0.0, "avg_logprob": -0.23405912944248744, "compression_ratio": 1.5279187817258884, "no_speech_prob": 0.00638432614505291}, {"id": 492, "seek": 211892, "start": 2142.2000000000003, "end": 2144.76, "text": " We have a class called author, uh, and this author", "tokens": [51528, 492, 362, 257, 1508, 1219, 3793, 11, 2232, 11, 293, 341, 3793, 51656], "temperature": 0.0, "avg_logprob": -0.23405912944248744, "compression_ratio": 1.5279187817258884, "no_speech_prob": 0.00638432614505291}, {"id": 493, "seek": 214476, "start": 2145.48, "end": 2151.0800000000004, "text": " Has this method. So it's got a private member field called name and then of of type object", "tokens": [50400, 8646, 341, 3170, 13, 407, 309, 311, 658, 257, 4551, 4006, 2519, 1219, 1315, 293, 550, 295, 295, 2010, 2657, 50680], "temperature": 0.0, "avg_logprob": -0.2797932513924532, "compression_ratio": 1.6952380952380952, "no_speech_prob": 0.010977892205119133}, {"id": 494, "seek": 214476, "start": 2151.48, "end": 2153.7200000000003, "text": " And then you have another method called get author name", "tokens": [50700, 400, 550, 291, 362, 1071, 3170, 1219, 483, 3793, 1315, 50812], "temperature": 0.0, "avg_logprob": -0.2797932513924532, "compression_ratio": 1.6952380952380952, "no_speech_prob": 0.010977892205119133}, {"id": 495, "seek": 214476, "start": 2154.6800000000003, "end": 2161.4, "text": " Simple as that and then we have another subclass uh, distevsky my favorite author who extends the", "tokens": [50860, 21532, 382, 300, 293, 550, 321, 362, 1071, 1422, 11665, 2232, 11, 1483, 13379, 25810, 452, 2954, 3793, 567, 26448, 264, 51196], "temperature": 0.0, "avg_logprob": -0.2797932513924532, "compression_ratio": 1.6952380952380952, "no_speech_prob": 0.010977892205119133}, {"id": 496, "seek": 214476, "start": 2162.0400000000004, "end": 2164.92, "text": " Superclass author, uh, and here we're setting", "tokens": [51228, 4548, 11665, 3793, 11, 2232, 11, 293, 510, 321, 434, 3287, 51372], "temperature": 0.0, "avg_logprob": -0.2797932513924532, "compression_ratio": 1.6952380952380952, "no_speech_prob": 0.010977892205119133}, {"id": 497, "seek": 214476, "start": 2165.6400000000003, "end": 2169.8, "text": " Another private member variable with the name field order stavsky", "tokens": [51408, 3996, 4551, 4006, 7006, 365, 264, 1315, 2519, 1668, 342, 706, 25810, 51616], "temperature": 0.0, "avg_logprob": -0.2797932513924532, "compression_ratio": 1.6952380952380952, "no_speech_prob": 0.010977892205119133}, {"id": 498, "seek": 216980, "start": 2170.6800000000003, "end": 2174.28, "text": " And here we are returning a subtype", "tokens": [50408, 400, 510, 321, 366, 12678, 257, 1422, 20467, 50588], "temperature": 0.0, "avg_logprob": -0.17335761886045156, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.008982540108263493}, {"id": 499, "seek": 216980, "start": 2175.0800000000004, "end": 2177.0800000000004, "text": " because string is a", "tokens": [50628, 570, 6798, 307, 257, 50728], "temperature": 0.0, "avg_logprob": -0.17335761886045156, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.008982540108263493}, {"id": 500, "seek": 216980, "start": 2177.6400000000003, "end": 2182.92, "text": " Subtype of object of the object class because think about it. This is this is covariance because", "tokens": [50756, 8511, 20467, 295, 2657, 295, 264, 2657, 1508, 570, 519, 466, 309, 13, 639, 307, 341, 307, 49851, 719, 570, 51020], "temperature": 0.0, "avg_logprob": -0.17335761886045156, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.008982540108263493}, {"id": 501, "seek": 216980, "start": 2183.48, "end": 2188.52, "text": " While they just return a subclass of the return type, which is again object and string as I", "tokens": [51048, 3987, 436, 445, 2736, 257, 1422, 11665, 295, 264, 2736, 2010, 11, 597, 307, 797, 2657, 293, 6798, 382, 286, 51300], "temperature": 0.0, "avg_logprob": -0.17335761886045156, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.008982540108263493}, {"id": 502, "seek": 216980, "start": 2189.0, "end": 2195.32, "text": " Describe before it still fulfills the contract of author dot get author name. This contract here", "tokens": [51324, 3885, 8056, 949, 309, 920, 8081, 2565, 264, 4364, 295, 3793, 5893, 483, 3793, 1315, 13, 639, 4364, 510, 51640], "temperature": 0.0, "avg_logprob": -0.17335761886045156, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.008982540108263493}, {"id": 503, "seek": 219532, "start": 2196.04, "end": 2198.04, "text": " Is", "tokens": [50400, 1119, 50500], "temperature": 0.0, "avg_logprob": -0.19015053496963677, "compression_ratio": 1.5742574257425743, "no_speech_prob": 0.0022514238953590393}, {"id": 504, "seek": 219532, "start": 2199.0, "end": 2201.0, "text": " Fulfilled", "tokens": [50548, 479, 5757, 6261, 50648], "temperature": 0.0, "avg_logprob": -0.19015053496963677, "compression_ratio": 1.5742574257425743, "no_speech_prob": 0.0022514238953590393}, {"id": 505, "seek": 219532, "start": 2201.0, "end": 2204.6000000000004, "text": " This is what covariance is and the same concept of course applies", "tokens": [50648, 639, 307, 437, 49851, 719, 307, 293, 264, 912, 3410, 295, 1164, 13165, 50828], "temperature": 0.0, "avg_logprob": -0.19015053496963677, "compression_ratio": 1.5742574257425743, "no_speech_prob": 0.0022514238953590393}, {"id": 506, "seek": 219532, "start": 2205.32, "end": 2207.32, "text": " in the hierarchical classes", "tokens": [50864, 294, 264, 35250, 804, 5359, 50964], "temperature": 0.0, "avg_logprob": -0.19015053496963677, "compression_ratio": 1.5742574257425743, "no_speech_prob": 0.0022514238953590393}, {"id": 507, "seek": 219532, "start": 2207.88, "end": 2211.7200000000003, "text": " With the builder pattern because this returns a subtype of", "tokens": [50992, 2022, 264, 27377, 5102, 570, 341, 11247, 257, 1422, 20467, 295, 51184], "temperature": 0.0, "avg_logprob": -0.19015053496963677, "compression_ratio": 1.5742574257425743, "no_speech_prob": 0.0022514238953590393}, {"id": 508, "seek": 219532, "start": 2212.28, "end": 2215.32, "text": " Sorry, new york pizza. Let's say that class returns a subtype", "tokens": [51212, 4919, 11, 777, 288, 1284, 8298, 13, 961, 311, 584, 300, 1508, 11247, 257, 1422, 20467, 51364], "temperature": 0.0, "avg_logprob": -0.19015053496963677, "compression_ratio": 1.5742574257425743, "no_speech_prob": 0.0022514238953590393}, {"id": 509, "seek": 219532, "start": 2216.1200000000003, "end": 2218.1200000000003, "text": " It is a subtype of", "tokens": [51404, 467, 307, 257, 1422, 20467, 295, 51504], "temperature": 0.0, "avg_logprob": -0.19015053496963677, "compression_ratio": 1.5742574257425743, "no_speech_prob": 0.0022514238953590393}, {"id": 510, "seek": 219532, "start": 2218.1200000000003, "end": 2222.6000000000004, "text": " Uh pizza and it does fulfill that contract down the the method chaining", "tokens": [51504, 4019, 8298, 293, 309, 775, 13875, 300, 4364, 760, 264, 264, 3170, 417, 3686, 51728], "temperature": 0.0, "avg_logprob": -0.19015053496963677, "compression_ratio": 1.5742574257425743, "no_speech_prob": 0.0022514238953590393}, {"id": 511, "seek": 222260, "start": 2223.08, "end": 2225.7999999999997, "text": " If that makes sense and to conclude just your block states", "tokens": [50388, 759, 300, 1669, 2020, 293, 281, 16886, 445, 428, 3461, 4368, 50524], "temperature": 0.0, "avg_logprob": -0.18695192451936654, "compression_ratio": 1.5353982300884956, "no_speech_prob": 0.007574494928121567}, {"id": 512, "seek": 222260, "start": 2226.2799999999997, "end": 2229.4, "text": " the minor advantage of builders over constructors is that", "tokens": [50548, 264, 6696, 5002, 295, 36281, 670, 7690, 830, 307, 300, 50704], "temperature": 0.0, "avg_logprob": -0.18695192451936654, "compression_ratio": 1.5353982300884956, "no_speech_prob": 0.007574494928121567}, {"id": 513, "seek": 222260, "start": 2230.04, "end": 2232.04, "text": " Builders can have multiple", "tokens": [50736, 11875, 433, 393, 362, 3866, 50836], "temperature": 0.0, "avg_logprob": -0.18695192451936654, "compression_ratio": 1.5353982300884956, "no_speech_prob": 0.007574494928121567}, {"id": 514, "seek": 222260, "start": 2232.68, "end": 2239.3199999999997, "text": " Parameters because each parameter is specified in its own method make sense. Um, I think new york pizza", "tokens": [50868, 34882, 6202, 570, 1184, 13075, 307, 22206, 294, 1080, 1065, 3170, 652, 2020, 13, 3301, 11, 286, 519, 777, 288, 1284, 8298, 51200], "temperature": 0.0, "avg_logprob": -0.18695192451936654, "compression_ratio": 1.5353982300884956, "no_speech_prob": 0.007574494928121567}, {"id": 515, "seek": 222260, "start": 2239.96, "end": 2242.52, "text": " Oh pizza test probably isn't the best example", "tokens": [51232, 876, 8298, 1500, 1391, 1943, 380, 264, 1151, 1365, 51360], "temperature": 0.0, "avg_logprob": -0.18695192451936654, "compression_ratio": 1.5353982300884956, "no_speech_prob": 0.007574494928121567}, {"id": 516, "seek": 222260, "start": 2243.24, "end": 2245.24, "text": " but a good example would be", "tokens": [51396, 457, 257, 665, 1365, 576, 312, 51496], "temperature": 0.0, "avg_logprob": -0.18695192451936654, "compression_ratio": 1.5353982300884956, "no_speech_prob": 0.007574494928121567}, {"id": 517, "seek": 222260, "start": 2245.48, "end": 2247.48, "text": " The nutrition facts class", "tokens": [51508, 440, 14718, 9130, 1508, 51608], "temperature": 0.0, "avg_logprob": -0.18695192451936654, "compression_ratio": 1.5353982300884956, "no_speech_prob": 0.007574494928121567}, {"id": 518, "seek": 224748, "start": 2247.48, "end": 2254.92, "text": " We can have as many constructors as we want because all these constructors get their own method and he continues alternatively", "tokens": [50364, 492, 393, 362, 382, 867, 7690, 830, 382, 321, 528, 570, 439, 613, 7690, 830, 483, 641, 1065, 3170, 293, 415, 6515, 8535, 356, 50736], "temperature": 0.0, "avg_logprob": -0.13728126783049507, "compression_ratio": 1.8602620087336244, "no_speech_prob": 0.0012841270072385669}, {"id": 519, "seek": 224748, "start": 2255.56, "end": 2260.76, "text": " Builders can aggregate the parameters passed into multiple calls to a method in a single field", "tokens": [50768, 11875, 433, 393, 26118, 264, 9834, 4678, 666, 3866, 5498, 281, 257, 3170, 294, 257, 2167, 2519, 51028], "temperature": 0.0, "avg_logprob": -0.13728126783049507, "compression_ratio": 1.8602620087336244, "no_speech_prob": 0.0012841270072385669}, {"id": 520, "seek": 224748, "start": 2261.2400000000002, "end": 2266.44, "text": " As demonstrated in the at toppings method earlier. So this at toppings method as you can see", "tokens": [51052, 1018, 18772, 294, 264, 412, 43052, 3170, 3071, 13, 407, 341, 412, 43052, 3170, 382, 291, 393, 536, 51312], "temperature": 0.0, "avg_logprob": -0.13728126783049507, "compression_ratio": 1.8602620087336244, "no_speech_prob": 0.0012841270072385669}, {"id": 521, "seek": 224748, "start": 2266.76, "end": 2268.76, "text": " We're passing multiple parameters", "tokens": [51328, 492, 434, 8437, 3866, 9834, 51428], "temperature": 0.0, "avg_logprob": -0.13728126783049507, "compression_ratio": 1.8602620087336244, "no_speech_prob": 0.0012841270072385669}, {"id": 522, "seek": 224748, "start": 2269.0, "end": 2274.44, "text": " Into the at toppings method or more accurately making multiple calls and this", "tokens": [51440, 23373, 264, 412, 43052, 3170, 420, 544, 20095, 1455, 3866, 5498, 293, 341, 51712], "temperature": 0.0, "avg_logprob": -0.13728126783049507, "compression_ratio": 1.8602620087336244, "no_speech_prob": 0.0012841270072385669}, {"id": 523, "seek": 227444, "start": 2275.08, "end": 2282.12, "text": " Builder class is aggregating it continues a single builder can be used repeatedly to build multiple objects, of course. So", "tokens": [50396, 11875, 260, 1508, 307, 16743, 990, 309, 6515, 257, 2167, 27377, 393, 312, 1143, 18227, 281, 1322, 3866, 6565, 11, 295, 1164, 13, 407, 50748], "temperature": 0.0, "avg_logprob": -0.17539760914254696, "compression_ratio": 1.757201646090535, "no_speech_prob": 0.0013875167351216078}, {"id": 524, "seek": 227444, "start": 2283.4, "end": 2285.4, "text": " Examples here pizza calzone", "tokens": [50812, 48591, 510, 8298, 2104, 16896, 50912], "temperature": 0.0, "avg_logprob": -0.17539760914254696, "compression_ratio": 1.757201646090535, "no_speech_prob": 0.0013875167351216078}, {"id": 525, "seek": 227444, "start": 2286.12, "end": 2290.52, "text": " Different objects being constructed in different ways using the same builder class", "tokens": [50948, 20825, 6565, 885, 17083, 294, 819, 2098, 1228, 264, 912, 27377, 1508, 51168], "temperature": 0.0, "avg_logprob": -0.17539760914254696, "compression_ratio": 1.757201646090535, "no_speech_prob": 0.0013875167351216078}, {"id": 526, "seek": 227444, "start": 2291.32, "end": 2293.88, "text": " The parameters of the builder can be tweaked between", "tokens": [51208, 440, 9834, 295, 264, 27377, 393, 312, 6986, 7301, 1296, 51336], "temperature": 0.0, "avg_logprob": -0.17539760914254696, "compression_ratio": 1.757201646090535, "no_speech_prob": 0.0013875167351216078}, {"id": 527, "seek": 227444, "start": 2294.28, "end": 2297.64, "text": " invocations of the build method to vary the objects that are created", "tokens": [51356, 1048, 905, 763, 295, 264, 1322, 3170, 281, 10559, 264, 6565, 300, 366, 2942, 51524], "temperature": 0.0, "avg_logprob": -0.17539760914254696, "compression_ratio": 1.757201646090535, "no_speech_prob": 0.0013875167351216078}, {"id": 528, "seek": 227444, "start": 2297.96, "end": 2300.68, "text": " These parameters can be changed as we require", "tokens": [51540, 1981, 9834, 393, 312, 3105, 382, 321, 3651, 51676], "temperature": 0.0, "avg_logprob": -0.17539760914254696, "compression_ratio": 1.757201646090535, "no_speech_prob": 0.0013875167351216078}, {"id": 529, "seek": 227444, "start": 2301.2400000000002, "end": 2303.2400000000002, "text": " depending on how we write", "tokens": [51704, 5413, 322, 577, 321, 2464, 51804], "temperature": 0.0, "avg_logprob": -0.17539760914254696, "compression_ratio": 1.757201646090535, "no_speech_prob": 0.0013875167351216078}, {"id": 530, "seek": 230324, "start": 2304.2, "end": 2309.3999999999996, "text": " The different methods in the builder class a builder can fill in some fields automatically", "tokens": [50412, 440, 819, 7150, 294, 264, 27377, 1508, 257, 27377, 393, 2836, 294, 512, 7909, 6772, 50672], "temperature": 0.0, "avg_logprob": -0.16807208061218262, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.004537241067737341}, {"id": 531, "seek": 230324, "start": 2309.9599999999996, "end": 2311.9599999999996, "text": " upon object creation", "tokens": [50700, 3564, 2657, 8016, 50800], "temperature": 0.0, "avg_logprob": -0.16807208061218262, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.004537241067737341}, {"id": 532, "seek": 230324, "start": 2312.12, "end": 2313.8799999999997, "text": " such as serial number", "tokens": [50808, 1270, 382, 17436, 1230, 50896], "temperature": 0.0, "avg_logprob": -0.16807208061218262, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.004537241067737341}, {"id": 533, "seek": 230324, "start": 2313.8799999999997, "end": 2318.68, "text": " That increases each time an object is created. This is a very astute point", "tokens": [50896, 663, 8637, 1184, 565, 364, 2657, 307, 2942, 13, 639, 307, 257, 588, 5357, 1169, 935, 51136], "temperature": 0.0, "avg_logprob": -0.16807208061218262, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.004537241067737341}, {"id": 534, "seek": 230324, "start": 2319.16, "end": 2322.9199999999996, "text": " I think a good example of that would be similar to the idea of", "tokens": [51160, 286, 519, 257, 665, 1365, 295, 300, 576, 312, 2531, 281, 264, 1558, 295, 51348], "temperature": 0.0, "avg_logprob": -0.16807208061218262, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.004537241067737341}, {"id": 535, "seek": 230324, "start": 2323.64, "end": 2328.52, "text": " You know checking what the proper arguments past time doing type checks and different", "tokens": [51384, 509, 458, 8568, 437, 264, 2296, 12869, 1791, 565, 884, 2010, 13834, 293, 819, 51628], "temperature": 0.0, "avg_logprob": -0.16807208061218262, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.004537241067737341}, {"id": 536, "seek": 232852, "start": 2328.68, "end": 2333.96, "text": " Validations on a method because these are methods a lot can be done within the builder class", "tokens": [50372, 7188, 327, 763, 322, 257, 3170, 570, 613, 366, 7150, 257, 688, 393, 312, 1096, 1951, 264, 27377, 1508, 50636], "temperature": 0.0, "avg_logprob": -0.14490764085636582, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.0047544678673148155}, {"id": 537, "seek": 232852, "start": 2334.28, "end": 2340.04, "text": " So if I try to go back to the previous example where I was checking for the", "tokens": [50652, 407, 498, 286, 853, 281, 352, 646, 281, 264, 3894, 1365, 689, 286, 390, 8568, 337, 264, 50940], "temperature": 0.0, "avg_logprob": -0.14490764085636582, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.0047544678673148155}, {"id": 538, "seek": 232852, "start": 2340.68, "end": 2342.28, "text": " proper argument", "tokens": [50972, 2296, 6770, 51052], "temperature": 0.0, "avg_logprob": -0.14490764085636582, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.0047544678673148155}, {"id": 539, "seek": 232852, "start": 2342.28, "end": 2345.56, "text": " The way we've done this check in calories. We could even have", "tokens": [51052, 440, 636, 321, 600, 1096, 341, 1520, 294, 14904, 13, 492, 727, 754, 362, 51216], "temperature": 0.0, "avg_logprob": -0.14490764085636582, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.0047544678673148155}, {"id": 540, "seek": 232852, "start": 2346.2, "end": 2349.56, "text": " Something which automatically adds a certain value or", "tokens": [51248, 6595, 597, 6772, 10860, 257, 1629, 2158, 420, 51416], "temperature": 0.0, "avg_logprob": -0.14490764085636582, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.0047544678673148155}, {"id": 541, "seek": 232852, "start": 2350.52, "end": 2354.6, "text": " Changes an object automatically depending on the way it's called", "tokens": [51464, 761, 10350, 364, 2657, 6772, 5413, 322, 264, 636, 309, 311, 1219, 51668], "temperature": 0.0, "avg_logprob": -0.14490764085636582, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.0047544678673148155}, {"id": 542, "seek": 235460, "start": 2355.3199999999997, "end": 2360.7599999999998, "text": " And it could all be done simply because it's a method and of course like all great programming and engineering books", "tokens": [50400, 400, 309, 727, 439, 312, 1096, 2935, 570, 309, 311, 257, 3170, 293, 295, 1164, 411, 439, 869, 9410, 293, 7043, 3642, 50672], "temperature": 0.0, "avg_logprob": -0.19690186636788504, "compression_ratio": 1.627986348122867, "no_speech_prob": 0.006095210090279579}, {"id": 543, "seek": 235460, "start": 2361.3199999999997, "end": 2367.0, "text": " ineffective java just show bloke does discuss the trade-offs. He explicitly states the", "tokens": [50700, 48836, 361, 4061, 445, 855, 1749, 330, 775, 2248, 264, 4923, 12, 19231, 13, 634, 20803, 4368, 264, 50984], "temperature": 0.0, "avg_logprob": -0.19690186636788504, "compression_ratio": 1.627986348122867, "no_speech_prob": 0.006095210090279579}, {"id": 544, "seek": 235460, "start": 2367.7999999999997, "end": 2371.64, "text": " Disadvantages of using the builder pattern for this instance", "tokens": [51024, 4208, 345, 5219, 1660, 295, 1228, 264, 27377, 5102, 337, 341, 5197, 51216], "temperature": 0.0, "avg_logprob": -0.19690186636788504, "compression_ratio": 1.627986348122867, "no_speech_prob": 0.006095210090279579}, {"id": 545, "seek": 235460, "start": 2372.12, "end": 2376.12, "text": " And one of them is something I already discussed. It's certainly a bit hard to understand", "tokens": [51240, 400, 472, 295, 552, 307, 746, 286, 1217, 7152, 13, 467, 311, 3297, 257, 857, 1152, 281, 1223, 51440], "temperature": 0.0, "avg_logprob": -0.19690186636788504, "compression_ratio": 1.627986348122867, "no_speech_prob": 0.006095210090279579}, {"id": 546, "seek": 235460, "start": 2376.44, "end": 2381.24, "text": " One has to get their head around it, especially with the simulated self typing and whatnot", "tokens": [51456, 1485, 575, 281, 483, 641, 1378, 926, 309, 11, 2318, 365, 264, 41713, 2698, 18444, 293, 25882, 51696], "temperature": 0.0, "avg_logprob": -0.19690186636788504, "compression_ratio": 1.627986348122867, "no_speech_prob": 0.006095210090279579}, {"id": 547, "seek": 235460, "start": 2381.88, "end": 2383.88, "text": " and understanding how the inner", "tokens": [51728, 293, 3701, 577, 264, 7284, 51828], "temperature": 0.0, "avg_logprob": -0.19690186636788504, "compression_ratio": 1.627986348122867, "no_speech_prob": 0.006095210090279579}, {"id": 548, "seek": 238460, "start": 2384.7599999999998, "end": 2387.72, "text": " Class works within the bigger class", "tokens": [50372, 9471, 1985, 1951, 264, 3801, 1508, 50520], "temperature": 0.0, "avg_logprob": -0.16382547072422357, "compression_ratio": 1.585, "no_speech_prob": 0.0008968035690486431}, {"id": 549, "seek": 238460, "start": 2389.08, "end": 2391.96, "text": " And and that can be a bit more verbose and certainly", "tokens": [50588, 400, 293, 300, 393, 312, 257, 857, 544, 9595, 541, 293, 3297, 50732], "temperature": 0.0, "avg_logprob": -0.16382547072422357, "compression_ratio": 1.585, "no_speech_prob": 0.0008968035690486431}, {"id": 550, "seek": 238460, "start": 2392.7599999999998, "end": 2394.7599999999998, "text": " a bit harder to grasp", "tokens": [50772, 257, 857, 6081, 281, 21743, 50872], "temperature": 0.0, "avg_logprob": -0.16382547072422357, "compression_ratio": 1.585, "no_speech_prob": 0.0008968035690486431}, {"id": 551, "seek": 238460, "start": 2395.08, "end": 2396.44, "text": " initially", "tokens": [50888, 9105, 50956], "temperature": 0.0, "avg_logprob": -0.16382547072422357, "compression_ratio": 1.585, "no_speech_prob": 0.0008968035690486431}, {"id": 552, "seek": 238460, "start": 2396.44, "end": 2398.44, "text": " and then he also says that", "tokens": [50956, 293, 550, 415, 611, 1619, 300, 51056], "temperature": 0.0, "avg_logprob": -0.16382547072422357, "compression_ratio": 1.585, "no_speech_prob": 0.0008968035690486431}, {"id": 553, "seek": 238460, "start": 2398.92, "end": 2400.2, "text": " if you", "tokens": [51080, 498, 291, 51144], "temperature": 0.0, "avg_logprob": -0.16382547072422357, "compression_ratio": 1.585, "no_speech_prob": 0.0008968035690486431}, {"id": 554, "seek": 238460, "start": 2400.2, "end": 2406.52, "text": " Start out with obsolete constructors and static factories and then you know move the code base to a builder pattern", "tokens": [51144, 6481, 484, 365, 46333, 7690, 830, 293, 13437, 24813, 293, 550, 291, 458, 1286, 264, 3089, 3096, 281, 257, 27377, 5102, 51460], "temperature": 0.0, "avg_logprob": -0.16382547072422357, "compression_ratio": 1.585, "no_speech_prob": 0.0008968035690486431}, {"id": 555, "seek": 238460, "start": 2406.6, "end": 2408.6, "text": " Which I think is what happens most of the time", "tokens": [51464, 3013, 286, 519, 307, 437, 2314, 881, 295, 264, 565, 51564], "temperature": 0.0, "avg_logprob": -0.16382547072422357, "compression_ratio": 1.585, "no_speech_prob": 0.0008968035690486431}, {"id": 556, "seek": 240860, "start": 2408.68, "end": 2413.56, "text": " So this second point, you know, the first point is you know, it's a matter of practice the more you use it", "tokens": [50368, 407, 341, 1150, 935, 11, 291, 458, 11, 264, 700, 935, 307, 291, 458, 11, 309, 311, 257, 1871, 295, 3124, 264, 544, 291, 764, 309, 50612], "temperature": 0.0, "avg_logprob": -0.1340385821827671, "compression_ratio": 1.78515625, "no_speech_prob": 0.008059435524046421}, {"id": 557, "seek": 240860, "start": 2413.64, "end": 2415.64, "text": " I believe the more one will become", "tokens": [50616, 286, 1697, 264, 544, 472, 486, 1813, 50716], "temperature": 0.0, "avg_logprob": -0.1340385821827671, "compression_ratio": 1.78515625, "no_speech_prob": 0.008059435524046421}, {"id": 558, "seek": 240860, "start": 2416.2, "end": 2417.72, "text": " more", "tokens": [50744, 544, 50820], "temperature": 0.0, "avg_logprob": -0.1340385821827671, "compression_ratio": 1.78515625, "no_speech_prob": 0.008059435524046421}, {"id": 559, "seek": 240860, "start": 2417.72, "end": 2419.72, "text": " Attuned to using the builder pattern", "tokens": [50820, 7298, 43703, 281, 1228, 264, 27377, 5102, 50920], "temperature": 0.0, "avg_logprob": -0.1340385821827671, "compression_ratio": 1.78515625, "no_speech_prob": 0.008059435524046421}, {"id": 560, "seek": 240860, "start": 2420.36, "end": 2422.36, "text": " but the second one is", "tokens": [50952, 457, 264, 1150, 472, 307, 51052], "temperature": 0.0, "avg_logprob": -0.1340385821827671, "compression_ratio": 1.78515625, "no_speech_prob": 0.008059435524046421}, {"id": 561, "seek": 240860, "start": 2422.36, "end": 2425.16, "text": " definitely a trade-off worth considering because", "tokens": [51052, 2138, 257, 4923, 12, 4506, 3163, 8079, 570, 51192], "temperature": 0.0, "avg_logprob": -0.1340385821827671, "compression_ratio": 1.78515625, "no_speech_prob": 0.008059435524046421}, {"id": 562, "seek": 240860, "start": 2425.96, "end": 2429.7999999999997, "text": " Generally what would happen is we would not use a builder pattern in a large code base", "tokens": [51232, 21082, 437, 576, 1051, 307, 321, 576, 406, 764, 257, 27377, 5102, 294, 257, 2416, 3089, 3096, 51424], "temperature": 0.0, "avg_logprob": -0.1340385821827671, "compression_ratio": 1.78515625, "no_speech_prob": 0.008059435524046421}, {"id": 563, "seek": 240860, "start": 2429.88, "end": 2433.08, "text": " And then we would want to use it as the number of parameters increases", "tokens": [51428, 400, 550, 321, 576, 528, 281, 764, 309, 382, 264, 1230, 295, 9834, 8637, 51588], "temperature": 0.0, "avg_logprob": -0.1340385821827671, "compression_ratio": 1.78515625, "no_speech_prob": 0.008059435524046421}, {"id": 564, "seek": 240860, "start": 2434.04, "end": 2436.8399999999997, "text": " And then making that shift can be quite hard", "tokens": [51636, 400, 550, 1455, 300, 5513, 393, 312, 1596, 1152, 51776], "temperature": 0.0, "avg_logprob": -0.1340385821827671, "compression_ratio": 1.78515625, "no_speech_prob": 0.008059435524046421}, {"id": 565, "seek": 243684, "start": 2437.08, "end": 2443.4, "text": " So if it's a green field project and if you're starting from scratch always better to start with the builder pattern", "tokens": [50376, 407, 498, 309, 311, 257, 3092, 2519, 1716, 293, 498, 291, 434, 2891, 490, 8459, 1009, 1101, 281, 722, 365, 264, 27377, 5102, 50692], "temperature": 0.0, "avg_logprob": -0.1275108948494624, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.007813083939254284}, {"id": 566, "seek": 243684, "start": 2444.36, "end": 2445.56, "text": " even if", "tokens": [50740, 754, 498, 50800], "temperature": 0.0, "avg_logprob": -0.1275108948494624, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.007813083939254284}, {"id": 567, "seek": 243684, "start": 2445.56, "end": 2449.08, "text": " One has you know a small number of parameters for a certain class", "tokens": [50800, 1485, 575, 291, 458, 257, 1359, 1230, 295, 9834, 337, 257, 1629, 1508, 50976], "temperature": 0.0, "avg_logprob": -0.1275108948494624, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.007813083939254284}, {"id": 568, "seek": 243684, "start": 2450.04, "end": 2454.1200000000003, "text": " That's it. That is the second item of effective java by Joshua block", "tokens": [51024, 663, 311, 309, 13, 663, 307, 264, 1150, 3174, 295, 4942, 361, 4061, 538, 24005, 3461, 51228], "temperature": 0.0, "avg_logprob": -0.1275108948494624, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.007813083939254284}, {"id": 569, "seek": 243684, "start": 2454.76, "end": 2458.6000000000004, "text": " Uh, I sincerely do hope that you got some kind of value out of this", "tokens": [51260, 4019, 11, 286, 30694, 360, 1454, 300, 291, 658, 512, 733, 295, 2158, 484, 295, 341, 51452], "temperature": 0.0, "avg_logprob": -0.1275108948494624, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.007813083939254284}, {"id": 570, "seek": 243684, "start": 2458.76, "end": 2464.36, "text": " And I I really am trying to get better at making these videos and really expanding on these points", "tokens": [51460, 400, 286, 286, 534, 669, 1382, 281, 483, 1101, 412, 1455, 613, 2145, 293, 534, 14702, 322, 613, 2793, 51740], "temperature": 0.0, "avg_logprob": -0.1275108948494624, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.007813083939254284}, {"id": 571, "seek": 246436, "start": 2464.92, "end": 2468.2000000000003, "text": " It is a bit hard because firstly, I don't think", "tokens": [50392, 467, 307, 257, 857, 1152, 570, 27376, 11, 286, 500, 380, 519, 50556], "temperature": 0.0, "avg_logprob": -0.14468338333557698, "compression_ratio": 1.643939393939394, "no_speech_prob": 0.024793121963739395}, {"id": 572, "seek": 246436, "start": 2469.4, "end": 2470.92, "text": " Programming and", "tokens": [50616, 8338, 2810, 293, 50692], "temperature": 0.0, "avg_logprob": -0.14468338333557698, "compression_ratio": 1.643939393939394, "no_speech_prob": 0.024793121963739395}, {"id": 573, "seek": 246436, "start": 2470.92, "end": 2476.6800000000003, "text": " Computational thinking naturally comes to me. I need to really struggle with the problem a lot for it to make sense", "tokens": [50692, 37804, 1478, 1953, 8195, 1487, 281, 385, 13, 286, 643, 281, 534, 7799, 365, 264, 1154, 257, 688, 337, 309, 281, 652, 2020, 50980], "temperature": 0.0, "avg_logprob": -0.14468338333557698, "compression_ratio": 1.643939393939394, "no_speech_prob": 0.024793121963739395}, {"id": 574, "seek": 246436, "start": 2477.08, "end": 2482.6, "text": " And I think that's most people really so this isn't like false modesty or whatever. I think it's it's normal for most people", "tokens": [51000, 400, 286, 519, 300, 311, 881, 561, 534, 370, 341, 1943, 380, 411, 7908, 1072, 7819, 420, 2035, 13, 286, 519, 309, 311, 309, 311, 2710, 337, 881, 561, 51276], "temperature": 0.0, "avg_logprob": -0.14468338333557698, "compression_ratio": 1.643939393939394, "no_speech_prob": 0.024793121963739395}, {"id": 575, "seek": 246436, "start": 2483.1600000000003, "end": 2488.6800000000003, "text": " Uh, and I did realize for instance the part where I was going through the simulated self type", "tokens": [51304, 4019, 11, 293, 286, 630, 4325, 337, 5197, 264, 644, 689, 286, 390, 516, 807, 264, 41713, 2698, 2010, 51580], "temperature": 0.0, "avg_logprob": -0.14468338333557698, "compression_ratio": 1.643939393939394, "no_speech_prob": 0.024793121963739395}, {"id": 576, "seek": 246436, "start": 2489.2400000000002, "end": 2491.2400000000002, "text": " That was a bit harder to understand", "tokens": [51608, 663, 390, 257, 857, 6081, 281, 1223, 51708], "temperature": 0.0, "avg_logprob": -0.14468338333557698, "compression_ratio": 1.643939393939394, "no_speech_prob": 0.024793121963739395}, {"id": 577, "seek": 249124, "start": 2491.56, "end": 2495.56, "text": " But on that note, I want to thank you for watching this video", "tokens": [50380, 583, 322, 300, 3637, 11, 286, 528, 281, 1309, 291, 337, 1976, 341, 960, 50580], "temperature": 0.0, "avg_logprob": -0.15352539254837677, "compression_ratio": 1.7210144927536233, "no_speech_prob": 0.002889255527406931}, {"id": 578, "seek": 249124, "start": 2495.7999999999997, "end": 2498.4399999999996, "text": " Our next item is going to be and I have already started", "tokens": [50592, 2621, 958, 3174, 307, 516, 281, 312, 293, 286, 362, 1217, 1409, 50724], "temperature": 0.0, "avg_logprob": -0.15352539254837677, "compression_ratio": 1.7210144927536233, "no_speech_prob": 0.002889255527406931}, {"id": 579, "seek": 249124, "start": 2499.16, "end": 2501.08, "text": " writing the script for it and", "tokens": [50760, 3579, 264, 5755, 337, 309, 293, 50856], "temperature": 0.0, "avg_logprob": -0.15352539254837677, "compression_ratio": 1.7210144927536233, "no_speech_prob": 0.002889255527406931}, {"id": 580, "seek": 249124, "start": 2501.08, "end": 2501.9599999999996, "text": " You know", "tokens": [50856, 509, 458, 50900], "temperature": 0.0, "avg_logprob": -0.15352539254837677, "compression_ratio": 1.7210144927536233, "no_speech_prob": 0.002889255527406931}, {"id": 581, "seek": 249124, "start": 2501.9599999999996, "end": 2503.9599999999996, "text": " putting putting the code base together", "tokens": [50900, 3372, 3372, 264, 3089, 3096, 1214, 51000], "temperature": 0.0, "avg_logprob": -0.15352539254837677, "compression_ratio": 1.7210144927536233, "no_speech_prob": 0.002889255527406931}, {"id": 582, "seek": 249124, "start": 2504.3599999999997, "end": 2509.64, "text": " The item three is enforced a singleton property with a private constructor or an enum type", "tokens": [51020, 440, 3174, 1045, 307, 40953, 257, 1522, 14806, 4707, 365, 257, 4551, 47479, 420, 364, 465, 449, 2010, 51284], "temperature": 0.0, "avg_logprob": -0.15352539254837677, "compression_ratio": 1.7210144927536233, "no_speech_prob": 0.002889255527406931}, {"id": 583, "seek": 249124, "start": 2509.9599999999996, "end": 2514.4399999999996, "text": " This item is a bit easier to understand than the previous two. I can assure you that", "tokens": [51300, 639, 3174, 307, 257, 857, 3571, 281, 1223, 813, 264, 3894, 732, 13, 286, 393, 20968, 291, 300, 51524], "temperature": 0.0, "avg_logprob": -0.15352539254837677, "compression_ratio": 1.7210144927536233, "no_speech_prob": 0.002889255527406931}, {"id": 584, "seek": 249124, "start": 2515.3199999999997, "end": 2521.0, "text": " In any case, thank you for watching. Uh, I do appreciate it. Uh, I appreciate you allowing me to ramble", "tokens": [51568, 682, 604, 1389, 11, 1309, 291, 337, 1976, 13, 4019, 11, 286, 360, 4449, 309, 13, 4019, 11, 286, 4449, 291, 8293, 385, 281, 10211, 638, 51852], "temperature": 0.0, "avg_logprob": -0.15352539254837677, "compression_ratio": 1.7210144927536233, "no_speech_prob": 0.002889255527406931}, {"id": 585, "seek": 252124, "start": 2521.24, "end": 2522.7599999999998, "text": " and go on", "tokens": [50364, 293, 352, 322, 50440], "temperature": 0.0, "avg_logprob": -0.12058581113815307, "compression_ratio": 0.9122807017543859, "no_speech_prob": 0.0015171548584476113}, {"id": 586, "seek": 252124, "start": 2522.7599999999998, "end": 2524.7599999999998, "text": " It's good. Cheers. See you in the next one", "tokens": [50440, 467, 311, 665, 13, 13006, 13, 3008, 291, 294, 264, 958, 472, 50540], "temperature": 0.0, "avg_logprob": -0.12058581113815307, "compression_ratio": 0.9122807017543859, "no_speech_prob": 0.0015171548584476113}], "language": "en"}