{"text": " Hey everyone, welcome to yet another episode of my video series on, as I fixed this microphone, on Joshua Bloch's Effective Java. This is a video series where I expound on the concepts that he has delineated in this book. Without further ado, let's get started with the proviso. I'm trying to keep these things quick because I do repeat this in every single video just to, you know, for some intelligence, let's say. And the caveats are, this is not a tutorial. I am not a teacher, nor an expert. I certainly am not an expert in any of this. So while I do try my best to be as accurate as possible, obviously, I certainly will make mistakes. So please point them out. And if it's something significant, I'll even rectify the error in the comment section down below. I'd like to think of this as the blind, leading the blind. I am, as I always say, as blind, or perhaps even more blind than you are, you know, really quite new to the Java world, given that I've, even though I've been programming with Java for a couple of years, it's still a very mature language and a mature community and ecosystem. So consider this to be a exploratory disquisition. The analogy that I've been using the past couple of videos is that it's like a university tutorial, except I'm not a tutor. We're just students kind of working through a problem together. Of course, though, let's not pretend it's a one-way conversation because I'm doing all the talking. Regardless, I have been corrected in past videos, and I have added those in the comment section down below. Depending on how this goes, maybe I'll even create a, I don't know, a Discord chat or a Slack, not a Slack. That's a bit too much. I can just go and shout out whatever. Okay. Already, this is too long. The code for this, or this, given it's a programming series, of course, it's going to be on GitHub. For item 13.2, all the code is going to be on GitHub, even though for this item, it's going to be two videos because it's quite a big item, but the code in the repository will be just under one directory. Alrighty. Let's get started with item 13, which states override clone judiciously. And since we've been on chapter three, this item itself is a part of methods common to all objects. So for starters, the very first two sentences of the item states, the cloneable interface was intended as a mixing interface for classes to advertise that they permit cloning. Unfortunately, it fails to serve this purpose. Its primary flaw is that it lacks a clone method and objects clone method is protected. So when he means and objects clone method is protected, he's talking about the object superclass in Java. So firstly, in what I read, there were some keywords. So let's get some basic theory out of the way. What is the cloneable interface? According to Oracle docs, a class implements the cloneable interface to indicate to the object dot clone. So the clone method in the object superclass, as I said, method that it is legal for that method to make a field for field copy of instances of that class. And then Ganesh Chaudhary of GeeksforGeeks says, the Java line cloneable interface is a marker interface. What is a marker interface? It's really simply means it's an interface that's primarily to add metadata to a class. So as the name suggests, it marks the class, it indicates to the compiler and even the programmer that this class is of a certain sort, a certain type with this metadata. He continues, it was introduced in JDK 1.0, there's a method clone in the object class. Cloneable interface is implemented by a class to make object dot clone method valid, thereby making a field for field copy. Again, as the name suggests, what that simply means is when a cloning takes place, so we have class with an object, and there's object A that's cloned to, let's say object B, when the cloning happens, it's a field, all the fields in that class, string int, whatever, that'd be a field for field copy taking place when the cloning happens. That's why it's called a field for field copy, obviously. This interface allows the implementing class to have its objects to be cloned instead of using a new operator. So simply a cloneable interface indicates that a class in hand supports cloning. Now the other keyword in what I read before from the book was the word mixing. Mixing for me is quite interesting, in fact, because I kind of shifted from the Java world recently with my new job to the Ruby world, or the Ruby and the Rails world, and mixings are quite common, or the mix and pattern is quite common in the Ruby world. Even though I didn't even come across the word when I was programming in Java in my job, but in a very high level, according to Wikipedia, before we get to the mix and interface, let's talk about what mixings are. So Wikipedia says in object-oriented programming languages, a mixin is a class that contains methods for use by other classes without having to be the parent class of those other classes. Mixings are sometimes described as being included rather than inherited. So this is a concept of very common in Ruby. We have sort of like modules, and you could include modules in classes. So that allows whatever methods in that module to be included in another separate class, let's say. But in the context of Java, we don't really do this kind of including modules and whatnot. What they simply do is they allow composite interfaces. Mixings allow composite interfaces, allowing programmers to build modular and extensible software systems, which is why, here again, it said here, the clone interface was intended as a mix and interface for classes to advertise that they permit cloning. Okay, a bit of a demo to understand the concept of mixin. Now, given Java doesn't have a mechanism to explicitly understand what mixins are, like Ruby, as I said, we can't need to play around a little bit with multiple classes to get the idea of what a mixin is. So in this demo, what we have initially at first is a, initially at first, gosh, what we have here is an interface called mixin interface, where there are two methods defined. There's a do something and do something else, two void methods. And then we have a mixin class that implements this interface and then gives a solid implementation of these methods. So we have mixin class and then we have another mixin class. This is a bit confusing. I should have called it like class A and class B, but you get there are two classes that implements the mixin interface, and they have their own kinds of implementations for these methods. And then we have a composite class also that implements the mixin interface. But this class is what does the composition of the other two classes or what those two methods can do via the mixin interface. So what that means is this composite class sort of acts as a pseudo module in Ruby. I'm sorry to incorporate Ruby into this because if you're not familiar with Ruby, you have no idea what I'm talking about. But this class would be, yeah, it's what does the, it combines the functionality from the other two classes into this single class, because it provides different implementations of the do something and do something else methods in mixin. And then because it provides separate implementation of the two methods, it can delegate it to the corresponding methods of the mixin interface, which is what I said before. But see how this works. Let's just look at the demo and see how a client would use this composite class to allow this composition. So what this composite class allows us is to combine the functionality of two classes, but then also simultaneously the individual mixing classes can also be used independently as well. So we have a mixin one, mixin two, which is firstly of the both of mixin interface type, but one is the mixin class, the other one is another mixin class, and we have the composite classes composite one and composite two, although as you can see in the constructor, oh, sorry, I didn't mention that bit. So what allows that composition to take place is really the constructor where we have the private final instance of the mixin interface. And then what we pass into this can be either mixin class or another mixin class. So two different classes. And that's what we're doing in the composition. We're passing mixin one and then mixin two. And then in the composite, we can do something, do something else. And then depending on what we pass into the constructor, the corresponding method will be invoked on the corresponding class. So if I run this, you'll see it does firstly from mixin class, do something to something else, and then it'll run another mixin class, do something differently, do something else differently. That's the basic idea of what a mixin interface does. Probably a bad example, really, because clearly, it's not explicit in Java, but at a high level, again, it allows composite interfaces. And then of course, I mentioned the clone method, needless to say, that's probably one of the most important methods in this item. The clone method, of course, is a built-in method in Java that allows objects to create a copy of themselves. A few things to keep in mind, the clone method is protected, and this potentially becomes a problem in the future. The fact that none of them in the future will discuss, in the future of this item will discuss it. The idea that the clone method is protective can be a bit annoying, we'll discuss that later. But just to get a formal definition, which I really liked, Chagypti's definition. By the way, the reason that it becomes a problem, can become a potential problem is because only subclasses can use this method because it's protected. So again, a formal definition by Chagypti, which I thought was a good one, by default, the clone method performs a shallow copy of the object, which means that only the objects fields are copied, but any object references, any object references by those fields are not cloned. So for this line here, but any objects references by those fields, perhaps the quintessential example would be an array. An array would be a problem if a class has an array declared, because then a shallow copy wouldn't work as there'll be two objects pointing to the same memory instance of that array, and that can create corrupted states and cause a problem. Anyway, I'll continue and we'll get to that later too. If you want to perform a deep copy of the object where all the objects referenced by the fields are also cloned, you will need to override the clone method and implement your own cloning logic, which is why most times this, the latter bit where we do override it does take place because most classes will most most most classes, I can't talk because most times most use cases a shallow copy will not suffice when we're probably cloning some cloning an object. We need a deep copy. So to understand the problem, we need to look at it in a bipartite way in the sense that the first part is that the objects, which is the superclass, the objects clone method is protected, as I said it here. And the second problem is the cloneable interface is only a, what's what we use a marker interface as in it doesn't have any defined clone methods. So one solution keep in mind potential solution is that we could invoke reflection in Java. We could invoke the clone method with Java reflection. Now just your block would not suggest that given that Java reflection can be a bit tricky. It can leave a lot of objects in corrupt state and cause problems in application on runtime. So it's primarily used by framework builders. But simply we've discussed Java reflection in many items before, what it allows us to program is to dynamically inspect and manipulate objects, classes, interfaces at runtime. So using reflections as the name suggests, in runtime when objects are created and in memory, you could reflect within the objects or introspect and then manipulate it and play around with it. So a simple example or a simple demo, just to again reiterate and demonstrate what reflection does is this my class class, I got to get better naming classes, my class class. This class implements cloneable. We have a private infield called value, we have a setup, sorry, we have a constructor, let me have a setter, a getter and afterwards in the implementation or the client using it, firstly, this will not work. So if you look here, it's going to throw an error because the clone method is protected. So you can't just go my object.clone because in the superclass of my object, the clone method is protected. So that will not work. Therefore what we've got to do is resort to using reflection and obviously in reflections always use a try catch block because reflections have a high potential of throwing exceptions. And then if I run it, okay, that took a while for me to understand because I had to go through how the reflections work and trying to make sense of it once again because I wrote this quite a while back, which is probably another reason as to why unless you really need it using Java reflections is not a good idea because there's a lot of unexpected things that can happen, let's say. So firstly, I'm not going to override the clone method in my class. So we're going to try and use the clone method in the object class. Now what happens then is I'm going to leave that bit commented out but I'll comment it and comment out this bit here, which is trying to access the clone method of the superclass, which you can see here, I'm getting the clone method and I'm setting it as accessible. And then when I run this, it should technically or theoretically give an error because it can't access that because it's a protected method. So the only way really to do it is to override it in the subclass and then do it like this, which involves... Now here you don't have to use reflections even though I've just used it, but that involves accessing it via the subclass and then doing the cloning as such, which is going to happen here. Now of course here again, as I said, you don't need to really do reflections, but the point being, the overall point of all of this being, and I'm probably going to edit out a bit of the middle because I spent a long time going through this and then googling trying to figure out what I did wrong, is that because this pesky cloneable interface, this piece of shit is not providing us with an implementation for the clone method, that makes things unnecessarily complicated, which is why Joshua Block states, so what does a cloneable do, given that it contains no method, it determines the behavior of objects protected clone implementation. If a class implements cloneable, objects clone method returns a field by field copy of the object, otherwise it throws clone not supported exception as a low malware is making noise again. Now by the way, as we go on with this point, that latter bit, throwing the clone not supported exception that also becomes a pain point with this interface, we'll discuss it in this item. And he continues, though the specification doesn't say it, and this is an important point, in practice, a class implementing cloneable is expected to provide a properly functioning public clone method, in order to achieve this, this class and all of its superclasses must obey a complex, unenforceable, thinly documented protocol. The resulting mechanism is fragile, dangerous and extra linguistic, it creates objects without calling a constructor. That really is what a clone method does, if you think about it, for all intents and purposes. So this begs the question, how to implement a well behaved clone method? And before we get to the implementing strategy, a few caveats. Firstly, the cloneable interface is an atypical interface, as interfaces aren't supposed to modify the behavior of a superclass, but are blueprint for what a given class can do for its clients. So really, when you implement the cloneable method in a class, let's say class A, it's kind of an interface for the object class, for the superclass, which is atypical. And that again is a problem. And then also, I wouldn't say it's a problem, it's kind of an anti-pattern, it's something particularly shouldn't follow. But also the general contract for the objects clone method is weak. This is the general contract defined in the Oracle docs, and you can see what it does. I'm not going to go through it too facetiously, but essentially, the idea is the clone takes place and it creates in return a copy of the past object, past of that method with a new memory location. Now, it is vaguely similar to constructor chaining, a pattern, a design pattern, which allows to create less duplicated code. But more than me explaining it, let's take a look at what constructor chaining entails if I open up the class customer. It's quite a straightforward pattern. You probably have seen it in a lot of code in the Java world. We have a class customer that extends the superclass person. So all the customers are people, at least for now. And then in constructor chaining, we have the customer class being constructed, that the object being created. And we will see as some fields are just inherited directly from the superclass, things like first name, middle name, last name, age. And then only this field here, the loyalty card ID, is constructed in this constructor and that field value is set. So the way this reduces duplication of coders, let's say if we didn't have this kind of constructor chaining, this same bit of code here will have to be replicated in this constructor too. And that would be a waste of space. And so by invoking the super keyword and then passing it into the superclass constructor, this allows the supercoded code. However, the problem is this kind of pseudo constructor chaining isn't enforced in the clone method. So if you'd look at our person customer example, if you mess up the construction here in the constructor, the compiler will throw an error. But in this example, which I have, which is a class called food that implements cloneable, it's overriding the clone method. And then this class bar extends the food class. So that's a subclass of food. And it also is trying to override the clone method of food, of the superclass, but what happens there is in our track catch block when we run it, it's going to throw an error. The reason is because the superclass, which is food, is not, it doesn't call the super.clone, so the objects clone method, rather it's just creating a new instance of food and passing that. And that creates errors here because it's on a proper clone taking place. And because now this error is thrown in runtime. So if it was in foes, we would catch this error in compile time. And that's a problem. However, though, of course, final classes don't have to worry about this problem of it being not in foes because they will not implement cloneable as they won't be cloned. So to put it a bit more clearly, Joshua Block states, this mechanism is vaguely similar to constructor chaining, except that it isn't in foes. If a classes clone method returns an instance that is not obtained by calling superart clone, like the problem which we see here, where the superclass foo is not calling super.clone, but by calling a constructor, which the person is doing here, the compiler won't complain. But if a subclass of that class calls super.clone, the resulting object will have the wrong class preventing the subclass from clone. That's a complicated, weird way of putting it in the sentence. Those resulting objects will have the wrong class preventing the subclass from clone method from working properly. That's like a weird way that he's written the sentence. In any case, the learning strategy, the simplest thing at first to do is to call the super dot clone method because that will return an object which is a fully functional replica of the original. And if all fields of the class, so in the class you're designing, if all the fields contain primitive values or reference to an immutable object, no further processing is needed. As Joshua Block states, any field declared in your class will have values identical to those of the original. If every field contains a primitive value or a reference to an immutable object, the return object may be exactly what you need. So you don't need to play around with it in your clone method, in your overwritten clone method, in which case no further processing is necessary. And he also continues, but note that immutable classes should never provide a clone method because it would merely encourage wasteful copying. So an immutable class would be classes where the fields are all final and the class itself is declared with a final keyword. And a simple example of this idea is this phone number class where in the phone number class we have a clone method, it's simply invoking, not invoking invoking the super dot clone method which is the clone method of the object class and of course doing the casting so that what's returned by this method is something of type phone number. And the reason we can do this in a straightforward manner with the casting is because Java does support covariant return types as he states here, it is legal and desirable to do this because Java supports covariant return types. So what are covariant return types in Java? Firstly, let's understand the theory behind the concept of covariance. According to Baldung, covariance can be considered as a contract for how a subtype is accepted when only the super type is defined. And another definition is covariance means we can access specific elements defined by the super type. However, we aren't allowed to put elements into a covariant system since the compiler would fail to determine the actual type of the generic structure. I know that's a bit too formal and abstract but simply what it means is a subclass can override the methods of a superclass. So in our case a phone number, phone number can override the method of the object class which is the clone method and afterwards when it returns it can return something or an object not something, an object of type of the subclass. So it will not return. So the phone number clone method will not return an object of type object instead it will return an object of type phone number. Now if we didn't have the idea of covariance and if Java didn't have covariant return types this would be the implementation necessary. We'll have to do the casting as a client. So when the client uses the phone number class and uses the clone method that we initially defined we will have to do the casting as a client and because of covariance this is not required. Simply that will suffice and work fine. So to further understand covariance so let's look at this demo. We have a class vehicle which starts an engine and then we have a class car that extends vehicle. We also have a class motorcycle that extends vehicle and these two have their own implementations of the start engine method. Now if we run this code what you'll see is we're first starting the vehicles engine, the superclasses engine and then we're starting the cars engine and the motorcycles engine. So in starting this engine the objects return even though we're calling the same start method and the overriding is taking place in the subclasses. The return type is of type this which means it can return an object of type car or in this case an object of type motorcycle and over here no casting is necessary. For example over here if we do this, this would be redundant and the compiler would say what are you doing mate, it'll in fact throw an error, sorry I wouldn't throw an error, I'm just being silly, it would show that it's redundant, it's useless. So remove redundant cast because you don't need to do that casting. So the next point is the clone not support exception should have been an unchecked runtime exception. Now I think I did discuss this in the beginning of the video but here's the problem. So firstly let me read from the book. The code to support our clone is contained in a try catch block. This is because object declares its clone method to throw clone not support exception which is a checked exception. Because phone number implements cloneable we know the code to support our clone will succeed. The need for this boilerplate code indicates that clone not support exception should have been unchecked. So the problem is because we know across that implements a clone method it's going to implement the cloneable interface the checked exception won't be thrown which makes this code here the try catch block superfluous redundant code and it's unnecessary. Okay now what we're going to try and do is look at the stack class so a bit more high level view at how the clone method is implemented and the stack class is defined well it was initially defined in item 7 but we've repurposed it to fit to item 13 and this is really important because here's why really we need to consider this point as to how do we deal with object fields or class fields that refer to mutable objects because a simple clone implementation won't work for such cases such as why in our classes we need to override the clone implementation of object specially for fields that are mutable or fields that refer to mutable fields pardon me not mutable fields are mutable objects or data structures and in this case the again that perhaps a quintessential example would be an array for an array we need to recursively copy all the elements of the mutable field like an array to solve the problem of destroying or destroy invariants we don't have we don't want to have arrays in two different states where we have two objects so we have object A and an object B that was copied of object A both pointed to the same array that could create corrupt states and that's what we see in this stack class so this is fine this integer size is fine this is fine especially because it's final however the objects object array called elements this in our clone method we need to change it up a bit so as you can see here we are firstly doing the normal cloning in the super dot clone and then we're specifically cloning all the elements recursively in elements and then setting it to result so the new object dot elements and then returning that so what we do here is we in fact create two array instances so to reiterate that point I think it's important because he's in this part of this item this is the take home point is that when we do the cloning it can't just be a dumb clone of all the fields a field for field clone if there are let's say things like arrays which point to other immutable objects because what's going to happen then then is we're going to destroy the invariance of this clone method where both objects are going to point to the same array and that's going to corrupt that array where as clients use these objects it'll either throw not point exceptions or give nonsensical results and this situation as Joshua block I said earlier which I will read will not happen in a constructor clone method in many ways acts like a constructor because it's really constructing a new object now this thing we've defined here will not happen in a typical constructor because we aren't copying things across in a constructor which is why Joshua block states this situation by the way I shouldn't say this situation here because what we've done here is correct in fact let's say hypothetically we didn't do this now this would destroy the invariance of this clone method but here this is correct so this is not bad code anyways continue this situation could never occur as a result of calling the sole constructor in the stack class in effect the clone method functions as a constructor you must ensure that it does no harm to the original object and that it properly establishes invariance on the clone so yes if we didn't do this what will happen is we'll have object a and then object b cloned off object a and then if someone messes around with object b in the the elements array then object a will also be affected because they are both pointing to the same array and that's the problem we're trying to solve here really if if you get this point from this whole video elaborate video you get this part of what i'm trying to convey here and then to end this part of the item a few note of bennets the first one is you probably noticed we aren't doing any casting like this in this clone method it's not required because in fact this is the only time really uh it's ideal to simply for an array when i mean the only time it's ideal to use uh the clone method directly in the superclass object the Joshua block states calling clone on an array returns an array whose runtime and compile time types are identical to those of the array being cloned this is the preferred idiom to duplicate an array in fact in fact arrays are the sole compelling use of the clone facility and the other point is recursively calling the clone method will not work for final fields for example if let's say uh private final object element so if we go here and if we set this to be final you'll see an array is going to be thrown here because you can't override the values uh in a final field uh or overwrite all the values the memory instance in a final field and that's because uh as Chajipiti states in order to create a proper deep clone you must create a new instance of the mutable object and assign it to the field in the clone object however with a final field you can't reassign a new value after initialization which can lead to incorrect behavior or shared state between the original object and it's cloned and then to end this part of the video this is a fundamental problem like serialization uh in the cloneable architecture because the cloneable architecture is the is incompatible with normal the use of final fields referring to mutable objects except in cases where the mutable objects may be safely shared between an object and its clone in order to make a class cloneable it may be necessary to remove final mortifiers from some fields so that's a little caveat there okay that is part one uh just want to I guess kind of apologize if I didn't properly convey the this part here about the reflections because that was it did complicate me a little bit because at first the way I've written the code the demo it wasn't really accurate because the idea was to reflect on the object superclass not to reflect on the object at hand per se but I think it's still the important point there was it's not recommended to use reflections and try to use the object the superclass objects clone method best thing to do is to implement the cloneable interface and then just override it and define your own clone method all righty that's it for part one of item 13 override clone judiciously judiciously it's a hard word to pronounce um and I hope I was being judicious in expanding and explaining the concepts in this item but I shall continue on with the rest of this item in part two uh saying all that yeah thanks for watching and I hope you got some value from it I'll see you in the next one cheers", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.88, "text": " Hey everyone, welcome to yet another episode of my video series on, as I fixed this microphone,", "tokens": [50364, 1911, 1518, 11, 2928, 281, 1939, 1071, 3500, 295, 452, 960, 2638, 322, 11, 382, 286, 6806, 341, 10952, 11, 50708], "temperature": 0.0, "avg_logprob": -0.20405594078270164, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.14109236001968384}, {"id": 1, "seek": 0, "start": 6.88, "end": 10.4, "text": " on Joshua Bloch's Effective Java.", "tokens": [50708, 322, 24005, 9865, 339, 311, 17764, 488, 10745, 13, 50884], "temperature": 0.0, "avg_logprob": -0.20405594078270164, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.14109236001968384}, {"id": 2, "seek": 0, "start": 10.4, "end": 15.64, "text": " This is a video series where I expound on the concepts that he has delineated in this", "tokens": [50884, 639, 307, 257, 960, 2638, 689, 286, 1278, 554, 322, 264, 10392, 300, 415, 575, 1103, 533, 770, 294, 341, 51146], "temperature": 0.0, "avg_logprob": -0.20405594078270164, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.14109236001968384}, {"id": 3, "seek": 0, "start": 15.64, "end": 16.64, "text": " book.", "tokens": [51146, 1446, 13, 51196], "temperature": 0.0, "avg_logprob": -0.20405594078270164, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.14109236001968384}, {"id": 4, "seek": 0, "start": 16.64, "end": 19.2, "text": " Without further ado, let's get started with the proviso.", "tokens": [51196, 9129, 3052, 22450, 11, 718, 311, 483, 1409, 365, 264, 1439, 19227, 13, 51324], "temperature": 0.0, "avg_logprob": -0.20405594078270164, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.14109236001968384}, {"id": 5, "seek": 0, "start": 19.2, "end": 24.88, "text": " I'm trying to keep these things quick because I do repeat this in every single video just", "tokens": [51324, 286, 478, 1382, 281, 1066, 613, 721, 1702, 570, 286, 360, 7149, 341, 294, 633, 2167, 960, 445, 51608], "temperature": 0.0, "avg_logprob": -0.20405594078270164, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.14109236001968384}, {"id": 6, "seek": 0, "start": 24.88, "end": 28.16, "text": " to, you know, for some intelligence, let's say.", "tokens": [51608, 281, 11, 291, 458, 11, 337, 512, 7599, 11, 718, 311, 584, 13, 51772], "temperature": 0.0, "avg_logprob": -0.20405594078270164, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.14109236001968384}, {"id": 7, "seek": 2816, "start": 28.16, "end": 30.52, "text": " And the caveats are, this is not a tutorial.", "tokens": [50364, 400, 264, 11730, 1720, 366, 11, 341, 307, 406, 257, 7073, 13, 50482], "temperature": 0.0, "avg_logprob": -0.1479614779480502, "compression_ratio": 1.6477732793522266, "no_speech_prob": 0.09266171604394913}, {"id": 8, "seek": 2816, "start": 30.52, "end": 33.0, "text": " I am not a teacher, nor an expert.", "tokens": [50482, 286, 669, 406, 257, 5027, 11, 6051, 364, 5844, 13, 50606], "temperature": 0.0, "avg_logprob": -0.1479614779480502, "compression_ratio": 1.6477732793522266, "no_speech_prob": 0.09266171604394913}, {"id": 9, "seek": 2816, "start": 33.0, "end": 36.04, "text": " I certainly am not an expert in any of this.", "tokens": [50606, 286, 3297, 669, 406, 364, 5844, 294, 604, 295, 341, 13, 50758], "temperature": 0.0, "avg_logprob": -0.1479614779480502, "compression_ratio": 1.6477732793522266, "no_speech_prob": 0.09266171604394913}, {"id": 10, "seek": 2816, "start": 36.04, "end": 44.16, "text": " So while I do try my best to be as accurate as possible, obviously, I certainly will make", "tokens": [50758, 407, 1339, 286, 360, 853, 452, 1151, 281, 312, 382, 8559, 382, 1944, 11, 2745, 11, 286, 3297, 486, 652, 51164], "temperature": 0.0, "avg_logprob": -0.1479614779480502, "compression_ratio": 1.6477732793522266, "no_speech_prob": 0.09266171604394913}, {"id": 11, "seek": 2816, "start": 44.16, "end": 45.16, "text": " mistakes.", "tokens": [51164, 8038, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1479614779480502, "compression_ratio": 1.6477732793522266, "no_speech_prob": 0.09266171604394913}, {"id": 12, "seek": 2816, "start": 45.16, "end": 46.760000000000005, "text": " So please point them out.", "tokens": [51214, 407, 1767, 935, 552, 484, 13, 51294], "temperature": 0.0, "avg_logprob": -0.1479614779480502, "compression_ratio": 1.6477732793522266, "no_speech_prob": 0.09266171604394913}, {"id": 13, "seek": 2816, "start": 46.760000000000005, "end": 51.24, "text": " And if it's something significant, I'll even rectify the error in the comment section", "tokens": [51294, 400, 498, 309, 311, 746, 4776, 11, 286, 603, 754, 11048, 2505, 264, 6713, 294, 264, 2871, 3541, 51518], "temperature": 0.0, "avg_logprob": -0.1479614779480502, "compression_ratio": 1.6477732793522266, "no_speech_prob": 0.09266171604394913}, {"id": 14, "seek": 2816, "start": 51.24, "end": 52.24, "text": " down below.", "tokens": [51518, 760, 2507, 13, 51568], "temperature": 0.0, "avg_logprob": -0.1479614779480502, "compression_ratio": 1.6477732793522266, "no_speech_prob": 0.09266171604394913}, {"id": 15, "seek": 2816, "start": 52.24, "end": 55.8, "text": " I'd like to think of this as the blind, leading the blind.", "tokens": [51568, 286, 1116, 411, 281, 519, 295, 341, 382, 264, 6865, 11, 5775, 264, 6865, 13, 51746], "temperature": 0.0, "avg_logprob": -0.1479614779480502, "compression_ratio": 1.6477732793522266, "no_speech_prob": 0.09266171604394913}, {"id": 16, "seek": 5580, "start": 55.8, "end": 63.28, "text": " I am, as I always say, as blind, or perhaps even more blind than you are, you know, really", "tokens": [50364, 286, 669, 11, 382, 286, 1009, 584, 11, 382, 6865, 11, 420, 4317, 754, 544, 6865, 813, 291, 366, 11, 291, 458, 11, 534, 50738], "temperature": 0.0, "avg_logprob": -0.16164469496112002, "compression_ratio": 1.6442687747035574, "no_speech_prob": 0.014487329870462418}, {"id": 17, "seek": 5580, "start": 63.28, "end": 67.12, "text": " quite new to the Java world, given that I've, even though I've been programming with Java", "tokens": [50738, 1596, 777, 281, 264, 10745, 1002, 11, 2212, 300, 286, 600, 11, 754, 1673, 286, 600, 668, 9410, 365, 10745, 50930], "temperature": 0.0, "avg_logprob": -0.16164469496112002, "compression_ratio": 1.6442687747035574, "no_speech_prob": 0.014487329870462418}, {"id": 18, "seek": 5580, "start": 67.12, "end": 73.12, "text": " for a couple of years, it's still a very mature language and a mature community and ecosystem.", "tokens": [50930, 337, 257, 1916, 295, 924, 11, 309, 311, 920, 257, 588, 14442, 2856, 293, 257, 14442, 1768, 293, 11311, 13, 51230], "temperature": 0.0, "avg_logprob": -0.16164469496112002, "compression_ratio": 1.6442687747035574, "no_speech_prob": 0.014487329870462418}, {"id": 19, "seek": 5580, "start": 73.12, "end": 78.16, "text": " So consider this to be a exploratory disquisition.", "tokens": [51230, 407, 1949, 341, 281, 312, 257, 24765, 4745, 717, 15398, 849, 13, 51482], "temperature": 0.0, "avg_logprob": -0.16164469496112002, "compression_ratio": 1.6442687747035574, "no_speech_prob": 0.014487329870462418}, {"id": 20, "seek": 5580, "start": 78.16, "end": 83.0, "text": " The analogy that I've been using the past couple of videos is that it's like a university", "tokens": [51482, 440, 21663, 300, 286, 600, 668, 1228, 264, 1791, 1916, 295, 2145, 307, 300, 309, 311, 411, 257, 5454, 51724], "temperature": 0.0, "avg_logprob": -0.16164469496112002, "compression_ratio": 1.6442687747035574, "no_speech_prob": 0.014487329870462418}, {"id": 21, "seek": 8300, "start": 83.0, "end": 85.2, "text": " tutorial, except I'm not a tutor.", "tokens": [50364, 7073, 11, 3993, 286, 478, 406, 257, 35613, 13, 50474], "temperature": 0.0, "avg_logprob": -0.18264282040479707, "compression_ratio": 1.5627240143369177, "no_speech_prob": 0.09255407005548477}, {"id": 22, "seek": 8300, "start": 85.2, "end": 89.52, "text": " We're just students kind of working through a problem together.", "tokens": [50474, 492, 434, 445, 1731, 733, 295, 1364, 807, 257, 1154, 1214, 13, 50690], "temperature": 0.0, "avg_logprob": -0.18264282040479707, "compression_ratio": 1.5627240143369177, "no_speech_prob": 0.09255407005548477}, {"id": 23, "seek": 8300, "start": 89.52, "end": 94.16, "text": " Of course, though, let's not pretend it's a one-way conversation because I'm doing all", "tokens": [50690, 2720, 1164, 11, 1673, 11, 718, 311, 406, 11865, 309, 311, 257, 472, 12, 676, 3761, 570, 286, 478, 884, 439, 50922], "temperature": 0.0, "avg_logprob": -0.18264282040479707, "compression_ratio": 1.5627240143369177, "no_speech_prob": 0.09255407005548477}, {"id": 24, "seek": 8300, "start": 94.16, "end": 95.16, "text": " the talking.", "tokens": [50922, 264, 1417, 13, 50972], "temperature": 0.0, "avg_logprob": -0.18264282040479707, "compression_ratio": 1.5627240143369177, "no_speech_prob": 0.09255407005548477}, {"id": 25, "seek": 8300, "start": 95.16, "end": 102.0, "text": " Regardless, I have been corrected in past videos, and I have added those in the comment", "tokens": [50972, 25148, 11, 286, 362, 668, 31687, 294, 1791, 2145, 11, 293, 286, 362, 3869, 729, 294, 264, 2871, 51314], "temperature": 0.0, "avg_logprob": -0.18264282040479707, "compression_ratio": 1.5627240143369177, "no_speech_prob": 0.09255407005548477}, {"id": 26, "seek": 8300, "start": 102.0, "end": 103.4, "text": " section down below.", "tokens": [51314, 3541, 760, 2507, 13, 51384], "temperature": 0.0, "avg_logprob": -0.18264282040479707, "compression_ratio": 1.5627240143369177, "no_speech_prob": 0.09255407005548477}, {"id": 27, "seek": 8300, "start": 103.4, "end": 109.2, "text": " Depending on how this goes, maybe I'll even create a, I don't know, a Discord chat or a", "tokens": [51384, 22539, 322, 577, 341, 1709, 11, 1310, 286, 603, 754, 1884, 257, 11, 286, 500, 380, 458, 11, 257, 32623, 5081, 420, 257, 51674], "temperature": 0.0, "avg_logprob": -0.18264282040479707, "compression_ratio": 1.5627240143369177, "no_speech_prob": 0.09255407005548477}, {"id": 28, "seek": 8300, "start": 109.2, "end": 111.12, "text": " Slack, not a Slack.", "tokens": [51674, 37211, 11, 406, 257, 37211, 13, 51770], "temperature": 0.0, "avg_logprob": -0.18264282040479707, "compression_ratio": 1.5627240143369177, "no_speech_prob": 0.09255407005548477}, {"id": 29, "seek": 8300, "start": 111.12, "end": 112.12, "text": " That's a bit too much.", "tokens": [51770, 663, 311, 257, 857, 886, 709, 13, 51820], "temperature": 0.0, "avg_logprob": -0.18264282040479707, "compression_ratio": 1.5627240143369177, "no_speech_prob": 0.09255407005548477}, {"id": 30, "seek": 11212, "start": 112.24000000000001, "end": 114.24000000000001, "text": " I can just go and shout out whatever.", "tokens": [50370, 286, 393, 445, 352, 293, 8043, 484, 2035, 13, 50470], "temperature": 0.0, "avg_logprob": -0.27970872845566064, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.01405759435147047}, {"id": 31, "seek": 11212, "start": 114.24000000000001, "end": 115.24000000000001, "text": " Okay.", "tokens": [50470, 1033, 13, 50520], "temperature": 0.0, "avg_logprob": -0.27970872845566064, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.01405759435147047}, {"id": 32, "seek": 11212, "start": 115.24000000000001, "end": 117.24000000000001, "text": " Already, this is too long.", "tokens": [50520, 23741, 11, 341, 307, 886, 938, 13, 50620], "temperature": 0.0, "avg_logprob": -0.27970872845566064, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.01405759435147047}, {"id": 33, "seek": 11212, "start": 117.24000000000001, "end": 124.60000000000001, "text": " The code for this, or this, given it's a programming series, of course, it's going to be on GitHub.", "tokens": [50620, 440, 3089, 337, 341, 11, 420, 341, 11, 2212, 309, 311, 257, 9410, 2638, 11, 295, 1164, 11, 309, 311, 516, 281, 312, 322, 23331, 13, 50988], "temperature": 0.0, "avg_logprob": -0.27970872845566064, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.01405759435147047}, {"id": 34, "seek": 11212, "start": 124.60000000000001, "end": 128.64000000000001, "text": " For item 13.2, all the code is going to be on GitHub, even though for this item, it's", "tokens": [50988, 1171, 3174, 3705, 13, 17, 11, 439, 264, 3089, 307, 516, 281, 312, 322, 23331, 11, 754, 1673, 337, 341, 3174, 11, 309, 311, 51190], "temperature": 0.0, "avg_logprob": -0.27970872845566064, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.01405759435147047}, {"id": 35, "seek": 11212, "start": 128.64000000000001, "end": 133.36, "text": " going to be two videos because it's quite a big item, but the code in the repository", "tokens": [51190, 516, 281, 312, 732, 2145, 570, 309, 311, 1596, 257, 955, 3174, 11, 457, 264, 3089, 294, 264, 25841, 51426], "temperature": 0.0, "avg_logprob": -0.27970872845566064, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.01405759435147047}, {"id": 36, "seek": 11212, "start": 133.36, "end": 135.84, "text": " will be just under one directory.", "tokens": [51426, 486, 312, 445, 833, 472, 21120, 13, 51550], "temperature": 0.0, "avg_logprob": -0.27970872845566064, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.01405759435147047}, {"id": 37, "seek": 11212, "start": 135.84, "end": 136.84, "text": " Alrighty.", "tokens": [51550, 43301, 13, 51600], "temperature": 0.0, "avg_logprob": -0.27970872845566064, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.01405759435147047}, {"id": 38, "seek": 13684, "start": 136.84, "end": 144.6, "text": " Let's get started with item 13, which states override clone judiciously.", "tokens": [50364, 961, 311, 483, 1409, 365, 3174, 3705, 11, 597, 4368, 42321, 26506, 3747, 3784, 356, 13, 50752], "temperature": 0.0, "avg_logprob": -0.17018659909566244, "compression_ratio": 1.5605381165919283, "no_speech_prob": 0.009124432690441608}, {"id": 39, "seek": 13684, "start": 144.6, "end": 149.72, "text": " And since we've been on chapter three, this item itself is a part of methods common to", "tokens": [50752, 400, 1670, 321, 600, 668, 322, 7187, 1045, 11, 341, 3174, 2564, 307, 257, 644, 295, 7150, 2689, 281, 51008], "temperature": 0.0, "avg_logprob": -0.17018659909566244, "compression_ratio": 1.5605381165919283, "no_speech_prob": 0.009124432690441608}, {"id": 40, "seek": 13684, "start": 149.72, "end": 151.48000000000002, "text": " all objects.", "tokens": [51008, 439, 6565, 13, 51096], "temperature": 0.0, "avg_logprob": -0.17018659909566244, "compression_ratio": 1.5605381165919283, "no_speech_prob": 0.009124432690441608}, {"id": 41, "seek": 13684, "start": 151.48000000000002, "end": 159.6, "text": " So for starters, the very first two sentences of the item states, the cloneable interface", "tokens": [51096, 407, 337, 35131, 11, 264, 588, 700, 732, 16579, 295, 264, 3174, 4368, 11, 264, 26506, 712, 9226, 51502], "temperature": 0.0, "avg_logprob": -0.17018659909566244, "compression_ratio": 1.5605381165919283, "no_speech_prob": 0.009124432690441608}, {"id": 42, "seek": 13684, "start": 159.6, "end": 166.12, "text": " was intended as a mixing interface for classes to advertise that they permit cloning.", "tokens": [51502, 390, 10226, 382, 257, 11983, 9226, 337, 5359, 281, 35379, 300, 436, 13423, 596, 16638, 13, 51828], "temperature": 0.0, "avg_logprob": -0.17018659909566244, "compression_ratio": 1.5605381165919283, "no_speech_prob": 0.009124432690441608}, {"id": 43, "seek": 16612, "start": 166.12, "end": 169.24, "text": " Unfortunately, it fails to serve this purpose.", "tokens": [50364, 8590, 11, 309, 18199, 281, 4596, 341, 4334, 13, 50520], "temperature": 0.0, "avg_logprob": -0.1538499749225119, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.002251508180052042}, {"id": 44, "seek": 16612, "start": 169.24, "end": 175.96, "text": " Its primary flaw is that it lacks a clone method and objects clone method is protected.", "tokens": [50520, 6953, 6194, 13717, 307, 300, 309, 31132, 257, 26506, 3170, 293, 6565, 26506, 3170, 307, 10594, 13, 50856], "temperature": 0.0, "avg_logprob": -0.1538499749225119, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.002251508180052042}, {"id": 45, "seek": 16612, "start": 175.96, "end": 180.64000000000001, "text": " So when he means and objects clone method is protected, he's talking about the object", "tokens": [50856, 407, 562, 415, 1355, 293, 6565, 26506, 3170, 307, 10594, 11, 415, 311, 1417, 466, 264, 2657, 51090], "temperature": 0.0, "avg_logprob": -0.1538499749225119, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.002251508180052042}, {"id": 46, "seek": 16612, "start": 180.64000000000001, "end": 182.32, "text": " superclass in Java.", "tokens": [51090, 1687, 11665, 294, 10745, 13, 51174], "temperature": 0.0, "avg_logprob": -0.1538499749225119, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.002251508180052042}, {"id": 47, "seek": 16612, "start": 182.32, "end": 185.08, "text": " So firstly, in what I read, there were some keywords.", "tokens": [51174, 407, 27376, 11, 294, 437, 286, 1401, 11, 456, 645, 512, 21009, 13, 51312], "temperature": 0.0, "avg_logprob": -0.1538499749225119, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.002251508180052042}, {"id": 48, "seek": 16612, "start": 185.08, "end": 188.64000000000001, "text": " So let's get some basic theory out of the way.", "tokens": [51312, 407, 718, 311, 483, 512, 3875, 5261, 484, 295, 264, 636, 13, 51490], "temperature": 0.0, "avg_logprob": -0.1538499749225119, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.002251508180052042}, {"id": 49, "seek": 16612, "start": 188.64000000000001, "end": 189.96, "text": " What is the cloneable interface?", "tokens": [51490, 708, 307, 264, 26506, 712, 9226, 30, 51556], "temperature": 0.0, "avg_logprob": -0.1538499749225119, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.002251508180052042}, {"id": 50, "seek": 16612, "start": 189.96, "end": 195.64000000000001, "text": " According to Oracle docs, a class implements the cloneable interface to indicate to the", "tokens": [51556, 7328, 281, 25654, 45623, 11, 257, 1508, 704, 17988, 264, 26506, 712, 9226, 281, 13330, 281, 264, 51840], "temperature": 0.0, "avg_logprob": -0.1538499749225119, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.002251508180052042}, {"id": 51, "seek": 19564, "start": 195.64, "end": 196.92, "text": " object dot clone.", "tokens": [50364, 2657, 5893, 26506, 13, 50428], "temperature": 0.0, "avg_logprob": -0.1989812144526729, "compression_ratio": 1.7324561403508771, "no_speech_prob": 0.027161037549376488}, {"id": 52, "seek": 19564, "start": 196.92, "end": 202.64, "text": " So the clone method in the object superclass, as I said, method that it is legal for that", "tokens": [50428, 407, 264, 26506, 3170, 294, 264, 2657, 1687, 11665, 11, 382, 286, 848, 11, 3170, 300, 309, 307, 5089, 337, 300, 50714], "temperature": 0.0, "avg_logprob": -0.1989812144526729, "compression_ratio": 1.7324561403508771, "no_speech_prob": 0.027161037549376488}, {"id": 53, "seek": 19564, "start": 202.64, "end": 207.32, "text": " method to make a field for field copy of instances of that class.", "tokens": [50714, 3170, 281, 652, 257, 2519, 337, 2519, 5055, 295, 14519, 295, 300, 1508, 13, 50948], "temperature": 0.0, "avg_logprob": -0.1989812144526729, "compression_ratio": 1.7324561403508771, "no_speech_prob": 0.027161037549376488}, {"id": 54, "seek": 19564, "start": 207.32, "end": 212.39999999999998, "text": " And then Ganesh Chaudhary of GeeksforGeeks says, the Java line cloneable interface is", "tokens": [50948, 400, 550, 460, 12779, 71, 761, 3751, 71, 822, 295, 2876, 24785, 2994, 22766, 24785, 1619, 11, 264, 10745, 1622, 26506, 712, 9226, 307, 51202], "temperature": 0.0, "avg_logprob": -0.1989812144526729, "compression_ratio": 1.7324561403508771, "no_speech_prob": 0.027161037549376488}, {"id": 55, "seek": 19564, "start": 212.39999999999998, "end": 215.0, "text": " a marker interface.", "tokens": [51202, 257, 15247, 9226, 13, 51332], "temperature": 0.0, "avg_logprob": -0.1989812144526729, "compression_ratio": 1.7324561403508771, "no_speech_prob": 0.027161037549376488}, {"id": 56, "seek": 19564, "start": 215.0, "end": 216.2, "text": " What is a marker interface?", "tokens": [51332, 708, 307, 257, 15247, 9226, 30, 51392], "temperature": 0.0, "avg_logprob": -0.1989812144526729, "compression_ratio": 1.7324561403508771, "no_speech_prob": 0.027161037549376488}, {"id": 57, "seek": 19564, "start": 216.2, "end": 223.32, "text": " It's really simply means it's an interface that's primarily to add metadata to a class.", "tokens": [51392, 467, 311, 534, 2935, 1355, 309, 311, 364, 9226, 300, 311, 10029, 281, 909, 26603, 281, 257, 1508, 13, 51748], "temperature": 0.0, "avg_logprob": -0.1989812144526729, "compression_ratio": 1.7324561403508771, "no_speech_prob": 0.027161037549376488}, {"id": 58, "seek": 22332, "start": 223.32, "end": 229.23999999999998, "text": " So as the name suggests, it marks the class, it indicates to the compiler and even the", "tokens": [50364, 407, 382, 264, 1315, 13409, 11, 309, 10640, 264, 1508, 11, 309, 16203, 281, 264, 31958, 293, 754, 264, 50660], "temperature": 0.0, "avg_logprob": -0.17233095671001233, "compression_ratio": 1.646551724137931, "no_speech_prob": 0.0015729658771306276}, {"id": 59, "seek": 22332, "start": 229.23999999999998, "end": 235.32, "text": " programmer that this class is of a certain sort, a certain type with this metadata.", "tokens": [50660, 32116, 300, 341, 1508, 307, 295, 257, 1629, 1333, 11, 257, 1629, 2010, 365, 341, 26603, 13, 50964], "temperature": 0.0, "avg_logprob": -0.17233095671001233, "compression_ratio": 1.646551724137931, "no_speech_prob": 0.0015729658771306276}, {"id": 60, "seek": 22332, "start": 235.32, "end": 241.64, "text": " He continues, it was introduced in JDK 1.0, there's a method clone in the object class.", "tokens": [50964, 634, 6515, 11, 309, 390, 7268, 294, 37082, 42, 502, 13, 15, 11, 456, 311, 257, 3170, 26506, 294, 264, 2657, 1508, 13, 51280], "temperature": 0.0, "avg_logprob": -0.17233095671001233, "compression_ratio": 1.646551724137931, "no_speech_prob": 0.0015729658771306276}, {"id": 61, "seek": 22332, "start": 241.64, "end": 247.28, "text": " Cloneable interface is implemented by a class to make object dot clone method valid, thereby", "tokens": [51280, 45536, 712, 9226, 307, 12270, 538, 257, 1508, 281, 652, 2657, 5893, 26506, 3170, 7363, 11, 28281, 51562], "temperature": 0.0, "avg_logprob": -0.17233095671001233, "compression_ratio": 1.646551724137931, "no_speech_prob": 0.0015729658771306276}, {"id": 62, "seek": 22332, "start": 247.28, "end": 249.51999999999998, "text": " making a field for field copy.", "tokens": [51562, 1455, 257, 2519, 337, 2519, 5055, 13, 51674], "temperature": 0.0, "avg_logprob": -0.17233095671001233, "compression_ratio": 1.646551724137931, "no_speech_prob": 0.0015729658771306276}, {"id": 63, "seek": 24952, "start": 249.52, "end": 253.68, "text": " Again, as the name suggests, what that simply means is when a cloning takes place, so we", "tokens": [50364, 3764, 11, 382, 264, 1315, 13409, 11, 437, 300, 2935, 1355, 307, 562, 257, 596, 16638, 2516, 1081, 11, 370, 321, 50572], "temperature": 0.0, "avg_logprob": -0.18523738633340864, "compression_ratio": 1.9132075471698113, "no_speech_prob": 0.025556597858667374}, {"id": 64, "seek": 24952, "start": 253.68, "end": 260.76, "text": " have class with an object, and there's object A that's cloned to, let's say object B, when", "tokens": [50572, 362, 1508, 365, 364, 2657, 11, 293, 456, 311, 2657, 316, 300, 311, 596, 19009, 281, 11, 718, 311, 584, 2657, 363, 11, 562, 50926], "temperature": 0.0, "avg_logprob": -0.18523738633340864, "compression_ratio": 1.9132075471698113, "no_speech_prob": 0.025556597858667374}, {"id": 65, "seek": 24952, "start": 260.76, "end": 265.24, "text": " the cloning happens, it's a field, all the fields in that class, string int, whatever,", "tokens": [50926, 264, 596, 16638, 2314, 11, 309, 311, 257, 2519, 11, 439, 264, 7909, 294, 300, 1508, 11, 6798, 560, 11, 2035, 11, 51150], "temperature": 0.0, "avg_logprob": -0.18523738633340864, "compression_ratio": 1.9132075471698113, "no_speech_prob": 0.025556597858667374}, {"id": 66, "seek": 24952, "start": 265.24, "end": 269.16, "text": " that'd be a field for field copy taking place when the cloning happens.", "tokens": [51150, 300, 1116, 312, 257, 2519, 337, 2519, 5055, 1940, 1081, 562, 264, 596, 16638, 2314, 13, 51346], "temperature": 0.0, "avg_logprob": -0.18523738633340864, "compression_ratio": 1.9132075471698113, "no_speech_prob": 0.025556597858667374}, {"id": 67, "seek": 24952, "start": 269.16, "end": 272.08, "text": " That's why it's called a field for field copy, obviously.", "tokens": [51346, 663, 311, 983, 309, 311, 1219, 257, 2519, 337, 2519, 5055, 11, 2745, 13, 51492], "temperature": 0.0, "avg_logprob": -0.18523738633340864, "compression_ratio": 1.9132075471698113, "no_speech_prob": 0.025556597858667374}, {"id": 68, "seek": 24952, "start": 272.08, "end": 276.92, "text": " This interface allows the implementing class to have its objects to be cloned instead of", "tokens": [51492, 639, 9226, 4045, 264, 18114, 1508, 281, 362, 1080, 6565, 281, 312, 596, 19009, 2602, 295, 51734], "temperature": 0.0, "avg_logprob": -0.18523738633340864, "compression_ratio": 1.9132075471698113, "no_speech_prob": 0.025556597858667374}, {"id": 69, "seek": 24952, "start": 276.92, "end": 278.64, "text": " using a new operator.", "tokens": [51734, 1228, 257, 777, 12973, 13, 51820], "temperature": 0.0, "avg_logprob": -0.18523738633340864, "compression_ratio": 1.9132075471698113, "no_speech_prob": 0.025556597858667374}, {"id": 70, "seek": 27864, "start": 278.64, "end": 283.2, "text": " So simply a cloneable interface indicates that a class in hand supports cloning.", "tokens": [50364, 407, 2935, 257, 26506, 712, 9226, 16203, 300, 257, 1508, 294, 1011, 9346, 596, 16638, 13, 50592], "temperature": 0.0, "avg_logprob": -0.1964742975327575, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.00690336711704731}, {"id": 71, "seek": 27864, "start": 283.2, "end": 288.76, "text": " Now the other keyword in what I read before from the book was the word mixing.", "tokens": [50592, 823, 264, 661, 20428, 294, 437, 286, 1401, 949, 490, 264, 1446, 390, 264, 1349, 11983, 13, 50870], "temperature": 0.0, "avg_logprob": -0.1964742975327575, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.00690336711704731}, {"id": 72, "seek": 27864, "start": 288.76, "end": 293.03999999999996, "text": " Mixing for me is quite interesting, in fact, because I kind of shifted from the Java world", "tokens": [50870, 12769, 278, 337, 385, 307, 1596, 1880, 11, 294, 1186, 11, 570, 286, 733, 295, 18892, 490, 264, 10745, 1002, 51084], "temperature": 0.0, "avg_logprob": -0.1964742975327575, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.00690336711704731}, {"id": 73, "seek": 27864, "start": 293.03999999999996, "end": 299.76, "text": " recently with my new job to the Ruby world, or the Ruby and the Rails world, and mixings", "tokens": [51084, 3938, 365, 452, 777, 1691, 281, 264, 19907, 1002, 11, 420, 264, 19907, 293, 264, 48526, 1002, 11, 293, 2890, 1109, 51420], "temperature": 0.0, "avg_logprob": -0.1964742975327575, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.00690336711704731}, {"id": 74, "seek": 27864, "start": 299.76, "end": 304.28, "text": " are quite common, or the mix and pattern is quite common in the Ruby world.", "tokens": [51420, 366, 1596, 2689, 11, 420, 264, 2890, 293, 5102, 307, 1596, 2689, 294, 264, 19907, 1002, 13, 51646], "temperature": 0.0, "avg_logprob": -0.1964742975327575, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.00690336711704731}, {"id": 75, "seek": 30428, "start": 304.28, "end": 308.4, "text": " Even though I didn't even come across the word when I was programming in Java in my", "tokens": [50364, 2754, 1673, 286, 994, 380, 754, 808, 2108, 264, 1349, 562, 286, 390, 9410, 294, 10745, 294, 452, 50570], "temperature": 0.0, "avg_logprob": -0.22113101998555293, "compression_ratio": 1.636734693877551, "no_speech_prob": 0.1823015660047531}, {"id": 76, "seek": 30428, "start": 308.4, "end": 315.15999999999997, "text": " job, but in a very high level, according to Wikipedia, before we get to the mix and interface,", "tokens": [50570, 1691, 11, 457, 294, 257, 588, 1090, 1496, 11, 4650, 281, 28999, 11, 949, 321, 483, 281, 264, 2890, 293, 9226, 11, 50908], "temperature": 0.0, "avg_logprob": -0.22113101998555293, "compression_ratio": 1.636734693877551, "no_speech_prob": 0.1823015660047531}, {"id": 77, "seek": 30428, "start": 315.15999999999997, "end": 317.28, "text": " let's talk about what mixings are.", "tokens": [50908, 718, 311, 751, 466, 437, 2890, 1109, 366, 13, 51014], "temperature": 0.0, "avg_logprob": -0.22113101998555293, "compression_ratio": 1.636734693877551, "no_speech_prob": 0.1823015660047531}, {"id": 78, "seek": 30428, "start": 317.28, "end": 324.32, "text": " So Wikipedia says in object-oriented programming languages, a mixin is a class that contains", "tokens": [51014, 407, 28999, 1619, 294, 2657, 12, 27414, 9410, 8650, 11, 257, 2890, 259, 307, 257, 1508, 300, 8306, 51366], "temperature": 0.0, "avg_logprob": -0.22113101998555293, "compression_ratio": 1.636734693877551, "no_speech_prob": 0.1823015660047531}, {"id": 79, "seek": 30428, "start": 324.32, "end": 333.76, "text": " methods for use by other classes without having to be the parent class of those other classes.", "tokens": [51366, 7150, 337, 764, 538, 661, 5359, 1553, 1419, 281, 312, 264, 2596, 1508, 295, 729, 661, 5359, 13, 51838], "temperature": 0.0, "avg_logprob": -0.22113101998555293, "compression_ratio": 1.636734693877551, "no_speech_prob": 0.1823015660047531}, {"id": 80, "seek": 33376, "start": 334.64, "end": 341.03999999999996, "text": " Mixings are sometimes described as being included rather than inherited.", "tokens": [50408, 12769, 1109, 366, 2171, 7619, 382, 885, 5556, 2831, 813, 27091, 13, 50728], "temperature": 0.0, "avg_logprob": -0.1592430239138396, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.04957340285181999}, {"id": 81, "seek": 33376, "start": 341.03999999999996, "end": 343.56, "text": " So this is a concept of very common in Ruby.", "tokens": [50728, 407, 341, 307, 257, 3410, 295, 588, 2689, 294, 19907, 13, 50854], "temperature": 0.0, "avg_logprob": -0.1592430239138396, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.04957340285181999}, {"id": 82, "seek": 33376, "start": 343.56, "end": 347.48, "text": " We have sort of like modules, and you could include modules in classes.", "tokens": [50854, 492, 362, 1333, 295, 411, 16679, 11, 293, 291, 727, 4090, 16679, 294, 5359, 13, 51050], "temperature": 0.0, "avg_logprob": -0.1592430239138396, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.04957340285181999}, {"id": 83, "seek": 33376, "start": 347.48, "end": 354.24, "text": " So that allows whatever methods in that module to be included in another separate class,", "tokens": [51050, 407, 300, 4045, 2035, 7150, 294, 300, 10088, 281, 312, 5556, 294, 1071, 4994, 1508, 11, 51388], "temperature": 0.0, "avg_logprob": -0.1592430239138396, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.04957340285181999}, {"id": 84, "seek": 33376, "start": 354.24, "end": 355.24, "text": " let's say.", "tokens": [51388, 718, 311, 584, 13, 51438], "temperature": 0.0, "avg_logprob": -0.1592430239138396, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.04957340285181999}, {"id": 85, "seek": 33376, "start": 355.24, "end": 359.12, "text": " But in the context of Java, we don't really do this kind of including modules and whatnot.", "tokens": [51438, 583, 294, 264, 4319, 295, 10745, 11, 321, 500, 380, 534, 360, 341, 733, 295, 3009, 16679, 293, 25882, 13, 51632], "temperature": 0.0, "avg_logprob": -0.1592430239138396, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.04957340285181999}, {"id": 86, "seek": 35912, "start": 359.12, "end": 362.88, "text": " What they simply do is they allow composite interfaces.", "tokens": [50364, 708, 436, 2935, 360, 307, 436, 2089, 25557, 28416, 13, 50552], "temperature": 0.0, "avg_logprob": -0.18080251784551712, "compression_ratio": 1.7234848484848484, "no_speech_prob": 0.0023966263979673386}, {"id": 87, "seek": 35912, "start": 362.88, "end": 366.8, "text": " Mixings allow composite interfaces, allowing programmers to build modular and extensible", "tokens": [50552, 12769, 1109, 2089, 25557, 28416, 11, 8293, 41504, 281, 1322, 31111, 293, 1279, 30633, 50748], "temperature": 0.0, "avg_logprob": -0.18080251784551712, "compression_ratio": 1.7234848484848484, "no_speech_prob": 0.0023966263979673386}, {"id": 88, "seek": 35912, "start": 366.8, "end": 372.0, "text": " software systems, which is why, here again, it said here, the clone interface was intended", "tokens": [50748, 4722, 3652, 11, 597, 307, 983, 11, 510, 797, 11, 309, 848, 510, 11, 264, 26506, 9226, 390, 10226, 51008], "temperature": 0.0, "avg_logprob": -0.18080251784551712, "compression_ratio": 1.7234848484848484, "no_speech_prob": 0.0023966263979673386}, {"id": 89, "seek": 35912, "start": 372.0, "end": 376.52, "text": " as a mix and interface for classes to advertise that they permit cloning.", "tokens": [51008, 382, 257, 2890, 293, 9226, 337, 5359, 281, 35379, 300, 436, 13423, 596, 16638, 13, 51234], "temperature": 0.0, "avg_logprob": -0.18080251784551712, "compression_ratio": 1.7234848484848484, "no_speech_prob": 0.0023966263979673386}, {"id": 90, "seek": 35912, "start": 376.52, "end": 380.24, "text": " Okay, a bit of a demo to understand the concept of mixin.", "tokens": [51234, 1033, 11, 257, 857, 295, 257, 10723, 281, 1223, 264, 3410, 295, 2890, 259, 13, 51420], "temperature": 0.0, "avg_logprob": -0.18080251784551712, "compression_ratio": 1.7234848484848484, "no_speech_prob": 0.0023966263979673386}, {"id": 91, "seek": 35912, "start": 380.24, "end": 386.32, "text": " Now, given Java doesn't have a mechanism to explicitly understand what mixins are, like", "tokens": [51420, 823, 11, 2212, 10745, 1177, 380, 362, 257, 7513, 281, 20803, 1223, 437, 2890, 1292, 366, 11, 411, 51724], "temperature": 0.0, "avg_logprob": -0.18080251784551712, "compression_ratio": 1.7234848484848484, "no_speech_prob": 0.0023966263979673386}, {"id": 92, "seek": 38632, "start": 386.32, "end": 393.04, "text": " Ruby, as I said, we can't need to play around a little bit with multiple classes to get the", "tokens": [50364, 19907, 11, 382, 286, 848, 11, 321, 393, 380, 643, 281, 862, 926, 257, 707, 857, 365, 3866, 5359, 281, 483, 264, 50700], "temperature": 0.0, "avg_logprob": -0.17663419623123972, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.009267093613743782}, {"id": 93, "seek": 38632, "start": 393.04, "end": 395.4, "text": " idea of what a mixin is.", "tokens": [50700, 1558, 295, 437, 257, 2890, 259, 307, 13, 50818], "temperature": 0.0, "avg_logprob": -0.17663419623123972, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.009267093613743782}, {"id": 94, "seek": 38632, "start": 395.4, "end": 400.24, "text": " So in this demo, what we have initially at first is a, initially at first, gosh, what", "tokens": [50818, 407, 294, 341, 10723, 11, 437, 321, 362, 9105, 412, 700, 307, 257, 11, 9105, 412, 700, 11, 6502, 11, 437, 51060], "temperature": 0.0, "avg_logprob": -0.17663419623123972, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.009267093613743782}, {"id": 95, "seek": 38632, "start": 400.24, "end": 408.64, "text": " we have here is an interface called mixin interface, where there are two methods defined.", "tokens": [51060, 321, 362, 510, 307, 364, 9226, 1219, 2890, 259, 9226, 11, 689, 456, 366, 732, 7150, 7642, 13, 51480], "temperature": 0.0, "avg_logprob": -0.17663419623123972, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.009267093613743782}, {"id": 96, "seek": 38632, "start": 408.64, "end": 412.44, "text": " There's a do something and do something else, two void methods.", "tokens": [51480, 821, 311, 257, 360, 746, 293, 360, 746, 1646, 11, 732, 22009, 7150, 13, 51670], "temperature": 0.0, "avg_logprob": -0.17663419623123972, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.009267093613743782}, {"id": 97, "seek": 41244, "start": 412.44, "end": 418.84, "text": " And then we have a mixin class that implements this interface and then gives a solid implementation", "tokens": [50364, 400, 550, 321, 362, 257, 2890, 259, 1508, 300, 704, 17988, 341, 9226, 293, 550, 2709, 257, 5100, 11420, 50684], "temperature": 0.0, "avg_logprob": -0.18614452362060546, "compression_ratio": 1.9502487562189055, "no_speech_prob": 0.028862176463007927}, {"id": 98, "seek": 41244, "start": 418.84, "end": 420.68, "text": " of these methods.", "tokens": [50684, 295, 613, 7150, 13, 50776], "temperature": 0.0, "avg_logprob": -0.18614452362060546, "compression_ratio": 1.9502487562189055, "no_speech_prob": 0.028862176463007927}, {"id": 99, "seek": 41244, "start": 420.68, "end": 423.64, "text": " So we have mixin class and then we have another mixin class.", "tokens": [50776, 407, 321, 362, 2890, 259, 1508, 293, 550, 321, 362, 1071, 2890, 259, 1508, 13, 50924], "temperature": 0.0, "avg_logprob": -0.18614452362060546, "compression_ratio": 1.9502487562189055, "no_speech_prob": 0.028862176463007927}, {"id": 100, "seek": 41244, "start": 423.64, "end": 424.64, "text": " This is a bit confusing.", "tokens": [50924, 639, 307, 257, 857, 13181, 13, 50974], "temperature": 0.0, "avg_logprob": -0.18614452362060546, "compression_ratio": 1.9502487562189055, "no_speech_prob": 0.028862176463007927}, {"id": 101, "seek": 41244, "start": 424.64, "end": 427.64, "text": " I should have called it like class A and class B, but you get there are two classes that", "tokens": [50974, 286, 820, 362, 1219, 309, 411, 1508, 316, 293, 1508, 363, 11, 457, 291, 483, 456, 366, 732, 5359, 300, 51124], "temperature": 0.0, "avg_logprob": -0.18614452362060546, "compression_ratio": 1.9502487562189055, "no_speech_prob": 0.028862176463007927}, {"id": 102, "seek": 41244, "start": 427.64, "end": 433.68, "text": " implements the mixin interface, and they have their own kinds of implementations for these", "tokens": [51124, 704, 17988, 264, 2890, 259, 9226, 11, 293, 436, 362, 641, 1065, 3685, 295, 4445, 763, 337, 613, 51426], "temperature": 0.0, "avg_logprob": -0.18614452362060546, "compression_ratio": 1.9502487562189055, "no_speech_prob": 0.028862176463007927}, {"id": 103, "seek": 41244, "start": 433.68, "end": 435.68, "text": " methods.", "tokens": [51426, 7150, 13, 51526], "temperature": 0.0, "avg_logprob": -0.18614452362060546, "compression_ratio": 1.9502487562189055, "no_speech_prob": 0.028862176463007927}, {"id": 104, "seek": 43568, "start": 435.68, "end": 442.48, "text": " And then we have a composite class also that implements the mixin interface.", "tokens": [50364, 400, 550, 321, 362, 257, 25557, 1508, 611, 300, 704, 17988, 264, 2890, 259, 9226, 13, 50704], "temperature": 0.0, "avg_logprob": -0.14240719068168414, "compression_ratio": 1.7672413793103448, "no_speech_prob": 0.017976125702261925}, {"id": 105, "seek": 43568, "start": 442.48, "end": 448.2, "text": " But this class is what does the composition of the other two classes or what those two", "tokens": [50704, 583, 341, 1508, 307, 437, 775, 264, 12686, 295, 264, 661, 732, 5359, 420, 437, 729, 732, 50990], "temperature": 0.0, "avg_logprob": -0.14240719068168414, "compression_ratio": 1.7672413793103448, "no_speech_prob": 0.017976125702261925}, {"id": 106, "seek": 43568, "start": 448.2, "end": 452.16, "text": " methods can do via the mixin interface.", "tokens": [50990, 7150, 393, 360, 5766, 264, 2890, 259, 9226, 13, 51188], "temperature": 0.0, "avg_logprob": -0.14240719068168414, "compression_ratio": 1.7672413793103448, "no_speech_prob": 0.017976125702261925}, {"id": 107, "seek": 43568, "start": 452.16, "end": 459.8, "text": " So what that means is this composite class sort of acts as a pseudo module in Ruby.", "tokens": [51188, 407, 437, 300, 1355, 307, 341, 25557, 1508, 1333, 295, 10672, 382, 257, 35899, 10088, 294, 19907, 13, 51570], "temperature": 0.0, "avg_logprob": -0.14240719068168414, "compression_ratio": 1.7672413793103448, "no_speech_prob": 0.017976125702261925}, {"id": 108, "seek": 43568, "start": 459.8, "end": 463.48, "text": " I'm sorry to incorporate Ruby into this because if you're not familiar with Ruby, you have", "tokens": [51570, 286, 478, 2597, 281, 16091, 19907, 666, 341, 570, 498, 291, 434, 406, 4963, 365, 19907, 11, 291, 362, 51754], "temperature": 0.0, "avg_logprob": -0.14240719068168414, "compression_ratio": 1.7672413793103448, "no_speech_prob": 0.017976125702261925}, {"id": 109, "seek": 43568, "start": 463.48, "end": 464.84000000000003, "text": " no idea what I'm talking about.", "tokens": [51754, 572, 1558, 437, 286, 478, 1417, 466, 13, 51822], "temperature": 0.0, "avg_logprob": -0.14240719068168414, "compression_ratio": 1.7672413793103448, "no_speech_prob": 0.017976125702261925}, {"id": 110, "seek": 46484, "start": 464.84, "end": 472.88, "text": " But this class would be, yeah, it's what does the, it combines the functionality from the", "tokens": [50364, 583, 341, 1508, 576, 312, 11, 1338, 11, 309, 311, 437, 775, 264, 11, 309, 29520, 264, 14980, 490, 264, 50766], "temperature": 0.0, "avg_logprob": -0.1755974614942396, "compression_ratio": 1.7566137566137565, "no_speech_prob": 0.02330951765179634}, {"id": 111, "seek": 46484, "start": 472.88, "end": 479.08, "text": " other two classes into this single class, because it provides different implementations", "tokens": [50766, 661, 732, 5359, 666, 341, 2167, 1508, 11, 570, 309, 6417, 819, 4445, 763, 51076], "temperature": 0.0, "avg_logprob": -0.1755974614942396, "compression_ratio": 1.7566137566137565, "no_speech_prob": 0.02330951765179634}, {"id": 112, "seek": 46484, "start": 479.08, "end": 486.88, "text": " of the do something and do something else methods in mixin.", "tokens": [51076, 295, 264, 360, 746, 293, 360, 746, 1646, 7150, 294, 2890, 259, 13, 51466], "temperature": 0.0, "avg_logprob": -0.1755974614942396, "compression_ratio": 1.7566137566137565, "no_speech_prob": 0.02330951765179634}, {"id": 113, "seek": 46484, "start": 486.88, "end": 492.84, "text": " And then because it provides separate implementation of the two methods, it can delegate it to", "tokens": [51466, 400, 550, 570, 309, 6417, 4994, 11420, 295, 264, 732, 7150, 11, 309, 393, 40999, 309, 281, 51764], "temperature": 0.0, "avg_logprob": -0.1755974614942396, "compression_ratio": 1.7566137566137565, "no_speech_prob": 0.02330951765179634}, {"id": 114, "seek": 49284, "start": 492.84, "end": 497.84, "text": " the corresponding methods of the mixin interface, which is what I said before.", "tokens": [50364, 264, 11760, 7150, 295, 264, 2890, 259, 9226, 11, 597, 307, 437, 286, 848, 949, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1257271559342094, "compression_ratio": 1.7025862068965518, "no_speech_prob": 0.048842791467905045}, {"id": 115, "seek": 49284, "start": 497.84, "end": 498.84, "text": " But see how this works.", "tokens": [50614, 583, 536, 577, 341, 1985, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1257271559342094, "compression_ratio": 1.7025862068965518, "no_speech_prob": 0.048842791467905045}, {"id": 116, "seek": 49284, "start": 498.84, "end": 504.32, "text": " Let's just look at the demo and see how a client would use this composite class to allow", "tokens": [50664, 961, 311, 445, 574, 412, 264, 10723, 293, 536, 577, 257, 6423, 576, 764, 341, 25557, 1508, 281, 2089, 50938], "temperature": 0.0, "avg_logprob": -0.1257271559342094, "compression_ratio": 1.7025862068965518, "no_speech_prob": 0.048842791467905045}, {"id": 117, "seek": 49284, "start": 504.32, "end": 505.71999999999997, "text": " this composition.", "tokens": [50938, 341, 12686, 13, 51008], "temperature": 0.0, "avg_logprob": -0.1257271559342094, "compression_ratio": 1.7025862068965518, "no_speech_prob": 0.048842791467905045}, {"id": 118, "seek": 49284, "start": 505.71999999999997, "end": 512.4399999999999, "text": " So what this composite class allows us is to combine the functionality of two classes,", "tokens": [51008, 407, 437, 341, 25557, 1508, 4045, 505, 307, 281, 10432, 264, 14980, 295, 732, 5359, 11, 51344], "temperature": 0.0, "avg_logprob": -0.1257271559342094, "compression_ratio": 1.7025862068965518, "no_speech_prob": 0.048842791467905045}, {"id": 119, "seek": 49284, "start": 512.4399999999999, "end": 517.8399999999999, "text": " but then also simultaneously the individual mixing classes can also be used independently", "tokens": [51344, 457, 550, 611, 16561, 264, 2609, 11983, 5359, 393, 611, 312, 1143, 21761, 51614], "temperature": 0.0, "avg_logprob": -0.1257271559342094, "compression_ratio": 1.7025862068965518, "no_speech_prob": 0.048842791467905045}, {"id": 120, "seek": 49284, "start": 517.8399999999999, "end": 518.8399999999999, "text": " as well.", "tokens": [51614, 382, 731, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1257271559342094, "compression_ratio": 1.7025862068965518, "no_speech_prob": 0.048842791467905045}, {"id": 121, "seek": 51884, "start": 518.84, "end": 527.12, "text": " So we have a mixin one, mixin two, which is firstly of the both of mixin interface type,", "tokens": [50364, 407, 321, 362, 257, 2890, 259, 472, 11, 2890, 259, 732, 11, 597, 307, 27376, 295, 264, 1293, 295, 2890, 259, 9226, 2010, 11, 50778], "temperature": 0.0, "avg_logprob": -0.2275099801545096, "compression_ratio": 1.8714285714285714, "no_speech_prob": 0.007010795176029205}, {"id": 122, "seek": 51884, "start": 527.12, "end": 532.36, "text": " but one is the mixin class, the other one is another mixin class, and we have the composite", "tokens": [50778, 457, 472, 307, 264, 2890, 259, 1508, 11, 264, 661, 472, 307, 1071, 2890, 259, 1508, 11, 293, 321, 362, 264, 25557, 51040], "temperature": 0.0, "avg_logprob": -0.2275099801545096, "compression_ratio": 1.8714285714285714, "no_speech_prob": 0.007010795176029205}, {"id": 123, "seek": 51884, "start": 532.36, "end": 537.2800000000001, "text": " classes composite one and composite two, although as you can see in the constructor, oh, sorry,", "tokens": [51040, 5359, 25557, 472, 293, 25557, 732, 11, 4878, 382, 291, 393, 536, 294, 264, 47479, 11, 1954, 11, 2597, 11, 51286], "temperature": 0.0, "avg_logprob": -0.2275099801545096, "compression_ratio": 1.8714285714285714, "no_speech_prob": 0.007010795176029205}, {"id": 124, "seek": 51884, "start": 537.2800000000001, "end": 538.2800000000001, "text": " I didn't mention that bit.", "tokens": [51286, 286, 994, 380, 2152, 300, 857, 13, 51336], "temperature": 0.0, "avg_logprob": -0.2275099801545096, "compression_ratio": 1.8714285714285714, "no_speech_prob": 0.007010795176029205}, {"id": 125, "seek": 51884, "start": 538.2800000000001, "end": 545.32, "text": " So what allows that composition to take place is really the constructor where we have the", "tokens": [51336, 407, 437, 4045, 300, 12686, 281, 747, 1081, 307, 534, 264, 47479, 689, 321, 362, 264, 51688], "temperature": 0.0, "avg_logprob": -0.2275099801545096, "compression_ratio": 1.8714285714285714, "no_speech_prob": 0.007010795176029205}, {"id": 126, "seek": 54532, "start": 545.8000000000001, "end": 549.0, "text": " private final instance of the mixin interface.", "tokens": [50388, 4551, 2572, 5197, 295, 264, 2890, 259, 9226, 13, 50548], "temperature": 0.0, "avg_logprob": -0.17345374238257313, "compression_ratio": 1.941747572815534, "no_speech_prob": 0.006902879104018211}, {"id": 127, "seek": 54532, "start": 549.0, "end": 556.24, "text": " And then what we pass into this can be either mixin class or another mixin class.", "tokens": [50548, 400, 550, 437, 321, 1320, 666, 341, 393, 312, 2139, 2890, 259, 1508, 420, 1071, 2890, 259, 1508, 13, 50910], "temperature": 0.0, "avg_logprob": -0.17345374238257313, "compression_ratio": 1.941747572815534, "no_speech_prob": 0.006902879104018211}, {"id": 128, "seek": 54532, "start": 556.24, "end": 558.6400000000001, "text": " So two different classes.", "tokens": [50910, 407, 732, 819, 5359, 13, 51030], "temperature": 0.0, "avg_logprob": -0.17345374238257313, "compression_ratio": 1.941747572815534, "no_speech_prob": 0.006902879104018211}, {"id": 129, "seek": 54532, "start": 558.6400000000001, "end": 560.2, "text": " And that's what we're doing in the composition.", "tokens": [51030, 400, 300, 311, 437, 321, 434, 884, 294, 264, 12686, 13, 51108], "temperature": 0.0, "avg_logprob": -0.17345374238257313, "compression_ratio": 1.941747572815534, "no_speech_prob": 0.006902879104018211}, {"id": 130, "seek": 54532, "start": 560.2, "end": 565.1600000000001, "text": " We're passing mixin one and then mixin two.", "tokens": [51108, 492, 434, 8437, 2890, 259, 472, 293, 550, 2890, 259, 732, 13, 51356], "temperature": 0.0, "avg_logprob": -0.17345374238257313, "compression_ratio": 1.941747572815534, "no_speech_prob": 0.006902879104018211}, {"id": 131, "seek": 54532, "start": 565.1600000000001, "end": 568.32, "text": " And then in the composite, we can do something, do something else.", "tokens": [51356, 400, 550, 294, 264, 25557, 11, 321, 393, 360, 746, 11, 360, 746, 1646, 13, 51514], "temperature": 0.0, "avg_logprob": -0.17345374238257313, "compression_ratio": 1.941747572815534, "no_speech_prob": 0.006902879104018211}, {"id": 132, "seek": 54532, "start": 568.32, "end": 574.2800000000001, "text": " And then depending on what we pass into the constructor, the corresponding method will", "tokens": [51514, 400, 550, 5413, 322, 437, 321, 1320, 666, 264, 47479, 11, 264, 11760, 3170, 486, 51812], "temperature": 0.0, "avg_logprob": -0.17345374238257313, "compression_ratio": 1.941747572815534, "no_speech_prob": 0.006902879104018211}, {"id": 133, "seek": 57428, "start": 574.28, "end": 577.3199999999999, "text": " be invoked on the corresponding class.", "tokens": [50364, 312, 1048, 9511, 322, 264, 11760, 1508, 13, 50516], "temperature": 0.0, "avg_logprob": -0.17986097141188018, "compression_ratio": 1.7155963302752293, "no_speech_prob": 0.006691967602819204}, {"id": 134, "seek": 57428, "start": 577.3199999999999, "end": 583.4, "text": " So if I run this, you'll see it does firstly from mixin class, do something to something", "tokens": [50516, 407, 498, 286, 1190, 341, 11, 291, 603, 536, 309, 775, 27376, 490, 2890, 259, 1508, 11, 360, 746, 281, 746, 50820], "temperature": 0.0, "avg_logprob": -0.17986097141188018, "compression_ratio": 1.7155963302752293, "no_speech_prob": 0.006691967602819204}, {"id": 135, "seek": 57428, "start": 583.4, "end": 588.24, "text": " else, and then it'll run another mixin class, do something differently, do something else", "tokens": [50820, 1646, 11, 293, 550, 309, 603, 1190, 1071, 2890, 259, 1508, 11, 360, 746, 7614, 11, 360, 746, 1646, 51062], "temperature": 0.0, "avg_logprob": -0.17986097141188018, "compression_ratio": 1.7155963302752293, "no_speech_prob": 0.006691967602819204}, {"id": 136, "seek": 57428, "start": 588.24, "end": 589.24, "text": " differently.", "tokens": [51062, 7614, 13, 51112], "temperature": 0.0, "avg_logprob": -0.17986097141188018, "compression_ratio": 1.7155963302752293, "no_speech_prob": 0.006691967602819204}, {"id": 137, "seek": 57428, "start": 589.24, "end": 593.0799999999999, "text": " That's the basic idea of what a mixin interface does.", "tokens": [51112, 663, 311, 264, 3875, 1558, 295, 437, 257, 2890, 259, 9226, 775, 13, 51304], "temperature": 0.0, "avg_logprob": -0.17986097141188018, "compression_ratio": 1.7155963302752293, "no_speech_prob": 0.006691967602819204}, {"id": 138, "seek": 57428, "start": 593.0799999999999, "end": 601.28, "text": " Probably a bad example, really, because clearly, it's not explicit in Java, but at a high", "tokens": [51304, 9210, 257, 1578, 1365, 11, 534, 11, 570, 4448, 11, 309, 311, 406, 13691, 294, 10745, 11, 457, 412, 257, 1090, 51714], "temperature": 0.0, "avg_logprob": -0.17986097141188018, "compression_ratio": 1.7155963302752293, "no_speech_prob": 0.006691967602819204}, {"id": 139, "seek": 60128, "start": 601.28, "end": 604.6, "text": " level, again, it allows composite interfaces.", "tokens": [50364, 1496, 11, 797, 11, 309, 4045, 25557, 28416, 13, 50530], "temperature": 0.0, "avg_logprob": -0.21128554483061857, "compression_ratio": 1.728448275862069, "no_speech_prob": 0.0965065136551857}, {"id": 140, "seek": 60128, "start": 604.6, "end": 609.56, "text": " And then of course, I mentioned the clone method, needless to say, that's probably one", "tokens": [50530, 400, 550, 295, 1164, 11, 286, 2835, 264, 26506, 3170, 11, 643, 1832, 281, 584, 11, 300, 311, 1391, 472, 50778], "temperature": 0.0, "avg_logprob": -0.21128554483061857, "compression_ratio": 1.728448275862069, "no_speech_prob": 0.0965065136551857}, {"id": 141, "seek": 60128, "start": 609.56, "end": 612.4, "text": " of the most important methods in this item.", "tokens": [50778, 295, 264, 881, 1021, 7150, 294, 341, 3174, 13, 50920], "temperature": 0.0, "avg_logprob": -0.21128554483061857, "compression_ratio": 1.728448275862069, "no_speech_prob": 0.0965065136551857}, {"id": 142, "seek": 60128, "start": 612.4, "end": 617.28, "text": " The clone method, of course, is a built-in method in Java that allows objects to create", "tokens": [50920, 440, 26506, 3170, 11, 295, 1164, 11, 307, 257, 3094, 12, 259, 3170, 294, 10745, 300, 4045, 6565, 281, 1884, 51164], "temperature": 0.0, "avg_logprob": -0.21128554483061857, "compression_ratio": 1.728448275862069, "no_speech_prob": 0.0965065136551857}, {"id": 143, "seek": 60128, "start": 617.28, "end": 618.28, "text": " a copy of themselves.", "tokens": [51164, 257, 5055, 295, 2969, 13, 51214], "temperature": 0.0, "avg_logprob": -0.21128554483061857, "compression_ratio": 1.728448275862069, "no_speech_prob": 0.0965065136551857}, {"id": 144, "seek": 60128, "start": 618.28, "end": 624.8399999999999, "text": " A few things to keep in mind, the clone method is protected, and this potentially becomes", "tokens": [51214, 316, 1326, 721, 281, 1066, 294, 1575, 11, 264, 26506, 3170, 307, 10594, 11, 293, 341, 7263, 3643, 51542], "temperature": 0.0, "avg_logprob": -0.21128554483061857, "compression_ratio": 1.728448275862069, "no_speech_prob": 0.0965065136551857}, {"id": 145, "seek": 60128, "start": 624.8399999999999, "end": 626.64, "text": " a problem in the future.", "tokens": [51542, 257, 1154, 294, 264, 2027, 13, 51632], "temperature": 0.0, "avg_logprob": -0.21128554483061857, "compression_ratio": 1.728448275862069, "no_speech_prob": 0.0965065136551857}, {"id": 146, "seek": 62664, "start": 626.64, "end": 630.76, "text": " The fact that none of them in the future will discuss, in the future of this item will discuss", "tokens": [50364, 440, 1186, 300, 6022, 295, 552, 294, 264, 2027, 486, 2248, 11, 294, 264, 2027, 295, 341, 3174, 486, 2248, 50570], "temperature": 0.0, "avg_logprob": -0.2473809697606542, "compression_ratio": 1.7603305785123966, "no_speech_prob": 0.11577031016349792}, {"id": 147, "seek": 62664, "start": 630.76, "end": 631.76, "text": " it.", "tokens": [50570, 309, 13, 50620], "temperature": 0.0, "avg_logprob": -0.2473809697606542, "compression_ratio": 1.7603305785123966, "no_speech_prob": 0.11577031016349792}, {"id": 148, "seek": 62664, "start": 631.76, "end": 636.08, "text": " The idea that the clone method is protective can be a bit annoying, we'll discuss that", "tokens": [50620, 440, 1558, 300, 264, 26506, 3170, 307, 16314, 393, 312, 257, 857, 11304, 11, 321, 603, 2248, 300, 50836], "temperature": 0.0, "avg_logprob": -0.2473809697606542, "compression_ratio": 1.7603305785123966, "no_speech_prob": 0.11577031016349792}, {"id": 149, "seek": 62664, "start": 636.08, "end": 637.08, "text": " later.", "tokens": [50836, 1780, 13, 50886], "temperature": 0.0, "avg_logprob": -0.2473809697606542, "compression_ratio": 1.7603305785123966, "no_speech_prob": 0.11577031016349792}, {"id": 150, "seek": 62664, "start": 637.08, "end": 643.0, "text": " But just to get a formal definition, which I really liked, Chagypti's definition.", "tokens": [50886, 583, 445, 281, 483, 257, 9860, 7123, 11, 597, 286, 534, 4501, 11, 761, 559, 88, 662, 72, 311, 7123, 13, 51182], "temperature": 0.0, "avg_logprob": -0.2473809697606542, "compression_ratio": 1.7603305785123966, "no_speech_prob": 0.11577031016349792}, {"id": 151, "seek": 62664, "start": 643.0, "end": 649.24, "text": " By the way, the reason that it becomes a problem, can become a potential problem is because", "tokens": [51182, 3146, 264, 636, 11, 264, 1778, 300, 309, 3643, 257, 1154, 11, 393, 1813, 257, 3995, 1154, 307, 570, 51494], "temperature": 0.0, "avg_logprob": -0.2473809697606542, "compression_ratio": 1.7603305785123966, "no_speech_prob": 0.11577031016349792}, {"id": 152, "seek": 62664, "start": 649.24, "end": 653.64, "text": " only subclasses can use this method because it's protected.", "tokens": [51494, 787, 1422, 11665, 279, 393, 764, 341, 3170, 570, 309, 311, 10594, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2473809697606542, "compression_ratio": 1.7603305785123966, "no_speech_prob": 0.11577031016349792}, {"id": 153, "seek": 65364, "start": 653.64, "end": 658.96, "text": " So again, a formal definition by Chagypti, which I thought was a good one, by default,", "tokens": [50364, 407, 797, 11, 257, 9860, 7123, 538, 761, 559, 88, 662, 72, 11, 597, 286, 1194, 390, 257, 665, 472, 11, 538, 7576, 11, 50630], "temperature": 0.0, "avg_logprob": -0.15522671793843365, "compression_ratio": 1.8226600985221675, "no_speech_prob": 0.0066902413964271545}, {"id": 154, "seek": 65364, "start": 658.96, "end": 665.08, "text": " the clone method performs a shallow copy of the object, which means that only the objects", "tokens": [50630, 264, 26506, 3170, 26213, 257, 20488, 5055, 295, 264, 2657, 11, 597, 1355, 300, 787, 264, 6565, 50936], "temperature": 0.0, "avg_logprob": -0.15522671793843365, "compression_ratio": 1.8226600985221675, "no_speech_prob": 0.0066902413964271545}, {"id": 155, "seek": 65364, "start": 665.08, "end": 670.4, "text": " fields are copied, but any object references, any object references by those fields are", "tokens": [50936, 7909, 366, 25365, 11, 457, 604, 2657, 15400, 11, 604, 2657, 15400, 538, 729, 7909, 366, 51202], "temperature": 0.0, "avg_logprob": -0.15522671793843365, "compression_ratio": 1.8226600985221675, "no_speech_prob": 0.0066902413964271545}, {"id": 156, "seek": 65364, "start": 670.4, "end": 671.4, "text": " not cloned.", "tokens": [51202, 406, 596, 19009, 13, 51252], "temperature": 0.0, "avg_logprob": -0.15522671793843365, "compression_ratio": 1.8226600985221675, "no_speech_prob": 0.0066902413964271545}, {"id": 157, "seek": 65364, "start": 671.4, "end": 678.16, "text": " So for this line here, but any objects references by those fields, perhaps the quintessential", "tokens": [51252, 407, 337, 341, 1622, 510, 11, 457, 604, 6565, 15400, 538, 729, 7909, 11, 4317, 264, 40006, 48143, 51590], "temperature": 0.0, "avg_logprob": -0.15522671793843365, "compression_ratio": 1.8226600985221675, "no_speech_prob": 0.0066902413964271545}, {"id": 158, "seek": 67816, "start": 678.16, "end": 680.0799999999999, "text": " example would be an array.", "tokens": [50364, 1365, 576, 312, 364, 10225, 13, 50460], "temperature": 0.0, "avg_logprob": -0.15806766510009765, "compression_ratio": 1.7543103448275863, "no_speech_prob": 0.04143855720758438}, {"id": 159, "seek": 67816, "start": 680.0799999999999, "end": 685.9599999999999, "text": " An array would be a problem if a class has an array declared, because then a shallow", "tokens": [50460, 1107, 10225, 576, 312, 257, 1154, 498, 257, 1508, 575, 364, 10225, 15489, 11, 570, 550, 257, 20488, 50754], "temperature": 0.0, "avg_logprob": -0.15806766510009765, "compression_ratio": 1.7543103448275863, "no_speech_prob": 0.04143855720758438}, {"id": 160, "seek": 67816, "start": 685.9599999999999, "end": 691.0, "text": " copy wouldn't work as there'll be two objects pointing to the same memory instance of that", "tokens": [50754, 5055, 2759, 380, 589, 382, 456, 603, 312, 732, 6565, 12166, 281, 264, 912, 4675, 5197, 295, 300, 51006], "temperature": 0.0, "avg_logprob": -0.15806766510009765, "compression_ratio": 1.7543103448275863, "no_speech_prob": 0.04143855720758438}, {"id": 161, "seek": 67816, "start": 691.0, "end": 695.68, "text": " array, and that can create corrupted states and cause a problem.", "tokens": [51006, 10225, 11, 293, 300, 393, 1884, 39480, 4368, 293, 3082, 257, 1154, 13, 51240], "temperature": 0.0, "avg_logprob": -0.15806766510009765, "compression_ratio": 1.7543103448275863, "no_speech_prob": 0.04143855720758438}, {"id": 162, "seek": 67816, "start": 695.68, "end": 698.88, "text": " Anyway, I'll continue and we'll get to that later too.", "tokens": [51240, 5684, 11, 286, 603, 2354, 293, 321, 603, 483, 281, 300, 1780, 886, 13, 51400], "temperature": 0.0, "avg_logprob": -0.15806766510009765, "compression_ratio": 1.7543103448275863, "no_speech_prob": 0.04143855720758438}, {"id": 163, "seek": 67816, "start": 698.88, "end": 703.4399999999999, "text": " If you want to perform a deep copy of the object where all the objects referenced by", "tokens": [51400, 759, 291, 528, 281, 2042, 257, 2452, 5055, 295, 264, 2657, 689, 439, 264, 6565, 32734, 538, 51628], "temperature": 0.0, "avg_logprob": -0.15806766510009765, "compression_ratio": 1.7543103448275863, "no_speech_prob": 0.04143855720758438}, {"id": 164, "seek": 70344, "start": 703.44, "end": 707.8000000000001, "text": " the fields are also cloned, you will need to override the clone method and implement", "tokens": [50364, 264, 7909, 366, 611, 596, 19009, 11, 291, 486, 643, 281, 42321, 264, 26506, 3170, 293, 4445, 50582], "temperature": 0.0, "avg_logprob": -0.20397899126765703, "compression_ratio": 1.7324561403508771, "no_speech_prob": 0.21456658840179443}, {"id": 165, "seek": 70344, "start": 707.8000000000001, "end": 714.08, "text": " your own cloning logic, which is why most times this, the latter bit where we do override", "tokens": [50582, 428, 1065, 596, 16638, 9952, 11, 597, 307, 983, 881, 1413, 341, 11, 264, 18481, 857, 689, 321, 360, 42321, 50896], "temperature": 0.0, "avg_logprob": -0.20397899126765703, "compression_ratio": 1.7324561403508771, "no_speech_prob": 0.21456658840179443}, {"id": 166, "seek": 70344, "start": 714.08, "end": 723.12, "text": " it does take place because most classes will most most most classes, I can't talk because", "tokens": [50896, 309, 775, 747, 1081, 570, 881, 5359, 486, 881, 881, 881, 5359, 11, 286, 393, 380, 751, 570, 51348], "temperature": 0.0, "avg_logprob": -0.20397899126765703, "compression_ratio": 1.7324561403508771, "no_speech_prob": 0.21456658840179443}, {"id": 167, "seek": 70344, "start": 723.12, "end": 727.7600000000001, "text": " most times most use cases a shallow copy will not suffice when we're probably cloning some", "tokens": [51348, 881, 1413, 881, 764, 3331, 257, 20488, 5055, 486, 406, 3889, 573, 562, 321, 434, 1391, 596, 16638, 512, 51580], "temperature": 0.0, "avg_logprob": -0.20397899126765703, "compression_ratio": 1.7324561403508771, "no_speech_prob": 0.21456658840179443}, {"id": 168, "seek": 70344, "start": 727.7600000000001, "end": 728.7600000000001, "text": " cloning an object.", "tokens": [51580, 596, 16638, 364, 2657, 13, 51630], "temperature": 0.0, "avg_logprob": -0.20397899126765703, "compression_ratio": 1.7324561403508771, "no_speech_prob": 0.21456658840179443}, {"id": 169, "seek": 70344, "start": 728.7600000000001, "end": 730.32, "text": " We need a deep copy.", "tokens": [51630, 492, 643, 257, 2452, 5055, 13, 51708], "temperature": 0.0, "avg_logprob": -0.20397899126765703, "compression_ratio": 1.7324561403508771, "no_speech_prob": 0.21456658840179443}, {"id": 170, "seek": 73032, "start": 730.32, "end": 735.6800000000001, "text": " So to understand the problem, we need to look at it in a bipartite way in the sense that", "tokens": [50364, 407, 281, 1223, 264, 1154, 11, 321, 643, 281, 574, 412, 309, 294, 257, 28741, 642, 636, 294, 264, 2020, 300, 50632], "temperature": 0.0, "avg_logprob": -0.19574934503306513, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.009265839122235775}, {"id": 171, "seek": 73032, "start": 735.6800000000001, "end": 742.44, "text": " the first part is that the objects, which is the superclass, the objects clone method", "tokens": [50632, 264, 700, 644, 307, 300, 264, 6565, 11, 597, 307, 264, 1687, 11665, 11, 264, 6565, 26506, 3170, 50970], "temperature": 0.0, "avg_logprob": -0.19574934503306513, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.009265839122235775}, {"id": 172, "seek": 73032, "start": 742.44, "end": 745.5600000000001, "text": " is protected, as I said it here.", "tokens": [50970, 307, 10594, 11, 382, 286, 848, 309, 510, 13, 51126], "temperature": 0.0, "avg_logprob": -0.19574934503306513, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.009265839122235775}, {"id": 173, "seek": 73032, "start": 745.5600000000001, "end": 752.9200000000001, "text": " And the second problem is the cloneable interface is only a, what's what we use a marker interface", "tokens": [51126, 400, 264, 1150, 1154, 307, 264, 26506, 712, 9226, 307, 787, 257, 11, 437, 311, 437, 321, 764, 257, 15247, 9226, 51494], "temperature": 0.0, "avg_logprob": -0.19574934503306513, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.009265839122235775}, {"id": 174, "seek": 73032, "start": 752.9200000000001, "end": 756.24, "text": " as in it doesn't have any defined clone methods.", "tokens": [51494, 382, 294, 309, 1177, 380, 362, 604, 7642, 26506, 7150, 13, 51660], "temperature": 0.0, "avg_logprob": -0.19574934503306513, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.009265839122235775}, {"id": 175, "seek": 75624, "start": 756.24, "end": 762.6, "text": " So one solution keep in mind potential solution is that we could invoke reflection in Java.", "tokens": [50364, 407, 472, 3827, 1066, 294, 1575, 3995, 3827, 307, 300, 321, 727, 41117, 12914, 294, 10745, 13, 50682], "temperature": 0.0, "avg_logprob": -0.17231035885745533, "compression_ratio": 1.6417910447761195, "no_speech_prob": 0.01691201701760292}, {"id": 176, "seek": 75624, "start": 762.6, "end": 765.44, "text": " We could invoke the clone method with Java reflection.", "tokens": [50682, 492, 727, 41117, 264, 26506, 3170, 365, 10745, 12914, 13, 50824], "temperature": 0.0, "avg_logprob": -0.17231035885745533, "compression_ratio": 1.6417910447761195, "no_speech_prob": 0.01691201701760292}, {"id": 177, "seek": 75624, "start": 765.44, "end": 773.16, "text": " Now just your block would not suggest that given that Java reflection can be a bit tricky.", "tokens": [50824, 823, 445, 428, 3461, 576, 406, 3402, 300, 2212, 300, 10745, 12914, 393, 312, 257, 857, 12414, 13, 51210], "temperature": 0.0, "avg_logprob": -0.17231035885745533, "compression_ratio": 1.6417910447761195, "no_speech_prob": 0.01691201701760292}, {"id": 178, "seek": 75624, "start": 773.16, "end": 780.28, "text": " It can leave a lot of objects in corrupt state and cause problems in application on runtime.", "tokens": [51210, 467, 393, 1856, 257, 688, 295, 6565, 294, 17366, 1785, 293, 3082, 2740, 294, 3861, 322, 34474, 13, 51566], "temperature": 0.0, "avg_logprob": -0.17231035885745533, "compression_ratio": 1.6417910447761195, "no_speech_prob": 0.01691201701760292}, {"id": 179, "seek": 78028, "start": 780.28, "end": 784.1999999999999, "text": " So it's primarily used by framework builders.", "tokens": [50364, 407, 309, 311, 10029, 1143, 538, 8388, 36281, 13, 50560], "temperature": 0.0, "avg_logprob": -0.15810882526895273, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.10085004568099976}, {"id": 180, "seek": 78028, "start": 784.1999999999999, "end": 790.3199999999999, "text": " But simply we've discussed Java reflection in many items before, what it allows us to", "tokens": [50560, 583, 2935, 321, 600, 7152, 10745, 12914, 294, 867, 4754, 949, 11, 437, 309, 4045, 505, 281, 50866], "temperature": 0.0, "avg_logprob": -0.15810882526895273, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.10085004568099976}, {"id": 181, "seek": 78028, "start": 790.3199999999999, "end": 795.36, "text": " program is to dynamically inspect and manipulate objects, classes, interfaces at runtime.", "tokens": [50866, 1461, 307, 281, 43492, 15018, 293, 20459, 6565, 11, 5359, 11, 28416, 412, 34474, 13, 51118], "temperature": 0.0, "avg_logprob": -0.15810882526895273, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.10085004568099976}, {"id": 182, "seek": 78028, "start": 795.36, "end": 802.3199999999999, "text": " So using reflections as the name suggests, in runtime when objects are created and in", "tokens": [51118, 407, 1228, 30679, 382, 264, 1315, 13409, 11, 294, 34474, 562, 6565, 366, 2942, 293, 294, 51466], "temperature": 0.0, "avg_logprob": -0.15810882526895273, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.10085004568099976}, {"id": 183, "seek": 78028, "start": 802.3199999999999, "end": 807.28, "text": " memory, you could reflect within the objects or introspect and then manipulate it and play", "tokens": [51466, 4675, 11, 291, 727, 5031, 1951, 264, 6565, 420, 560, 28713, 293, 550, 20459, 309, 293, 862, 51714], "temperature": 0.0, "avg_logprob": -0.15810882526895273, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.10085004568099976}, {"id": 184, "seek": 78028, "start": 807.28, "end": 808.56, "text": " around with it.", "tokens": [51714, 926, 365, 309, 13, 51778], "temperature": 0.0, "avg_logprob": -0.15810882526895273, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.10085004568099976}, {"id": 185, "seek": 80856, "start": 808.56, "end": 817.0, "text": " So a simple example or a simple demo, just to again reiterate and demonstrate what reflection", "tokens": [50364, 407, 257, 2199, 1365, 420, 257, 2199, 10723, 11, 445, 281, 797, 33528, 293, 11698, 437, 12914, 50786], "temperature": 0.0, "avg_logprob": -0.2726508991138355, "compression_ratio": 1.6424581005586592, "no_speech_prob": 0.09532327950000763}, {"id": 186, "seek": 80856, "start": 817.0, "end": 826.5999999999999, "text": " does is this my class class, I got to get better naming classes, my class class.", "tokens": [50786, 775, 307, 341, 452, 1508, 1508, 11, 286, 658, 281, 483, 1101, 25290, 5359, 11, 452, 1508, 1508, 13, 51266], "temperature": 0.0, "avg_logprob": -0.2726508991138355, "compression_ratio": 1.6424581005586592, "no_speech_prob": 0.09532327950000763}, {"id": 187, "seek": 80856, "start": 826.5999999999999, "end": 829.0, "text": " This class implements cloneable.", "tokens": [51266, 639, 1508, 704, 17988, 26506, 712, 13, 51386], "temperature": 0.0, "avg_logprob": -0.2726508991138355, "compression_ratio": 1.6424581005586592, "no_speech_prob": 0.09532327950000763}, {"id": 188, "seek": 80856, "start": 829.0, "end": 834.3199999999999, "text": " We have a private infield called value, we have a setup, sorry, we have a constructor,", "tokens": [51386, 492, 362, 257, 4551, 1536, 1789, 1219, 2158, 11, 321, 362, 257, 8657, 11, 2597, 11, 321, 362, 257, 47479, 11, 51652], "temperature": 0.0, "avg_logprob": -0.2726508991138355, "compression_ratio": 1.6424581005586592, "no_speech_prob": 0.09532327950000763}, {"id": 189, "seek": 83432, "start": 834.6, "end": 839.36, "text": " let me have a setter, a getter and afterwards in the implementation or the client using", "tokens": [50378, 718, 385, 362, 257, 992, 391, 11, 257, 483, 391, 293, 10543, 294, 264, 11420, 420, 264, 6423, 1228, 50616], "temperature": 0.0, "avg_logprob": -0.20084028584616526, "compression_ratio": 1.8143459915611815, "no_speech_prob": 0.20933493971824646}, {"id": 190, "seek": 83432, "start": 839.36, "end": 842.2, "text": " it, firstly, this will not work.", "tokens": [50616, 309, 11, 27376, 11, 341, 486, 406, 589, 13, 50758], "temperature": 0.0, "avg_logprob": -0.20084028584616526, "compression_ratio": 1.8143459915611815, "no_speech_prob": 0.20933493971824646}, {"id": 191, "seek": 83432, "start": 842.2, "end": 848.48, "text": " So if you look here, it's going to throw an error because the clone method is protected.", "tokens": [50758, 407, 498, 291, 574, 510, 11, 309, 311, 516, 281, 3507, 364, 6713, 570, 264, 26506, 3170, 307, 10594, 13, 51072], "temperature": 0.0, "avg_logprob": -0.20084028584616526, "compression_ratio": 1.8143459915611815, "no_speech_prob": 0.20933493971824646}, {"id": 192, "seek": 83432, "start": 848.48, "end": 854.4000000000001, "text": " So you can't just go my object.clone because in the superclass of my object, the clone", "tokens": [51072, 407, 291, 393, 380, 445, 352, 452, 2657, 13, 3474, 546, 570, 294, 264, 1687, 11665, 295, 452, 2657, 11, 264, 26506, 51368], "temperature": 0.0, "avg_logprob": -0.20084028584616526, "compression_ratio": 1.8143459915611815, "no_speech_prob": 0.20933493971824646}, {"id": 193, "seek": 83432, "start": 854.4000000000001, "end": 855.4000000000001, "text": " method is protected.", "tokens": [51368, 3170, 307, 10594, 13, 51418], "temperature": 0.0, "avg_logprob": -0.20084028584616526, "compression_ratio": 1.8143459915611815, "no_speech_prob": 0.20933493971824646}, {"id": 194, "seek": 83432, "start": 855.4000000000001, "end": 857.32, "text": " So that will not work.", "tokens": [51418, 407, 300, 486, 406, 589, 13, 51514], "temperature": 0.0, "avg_logprob": -0.20084028584616526, "compression_ratio": 1.8143459915611815, "no_speech_prob": 0.20933493971824646}, {"id": 195, "seek": 83432, "start": 857.32, "end": 862.9200000000001, "text": " Therefore what we've got to do is resort to using reflection and obviously in reflections", "tokens": [51514, 7504, 437, 321, 600, 658, 281, 360, 307, 19606, 281, 1228, 12914, 293, 2745, 294, 30679, 51794], "temperature": 0.0, "avg_logprob": -0.20084028584616526, "compression_ratio": 1.8143459915611815, "no_speech_prob": 0.20933493971824646}, {"id": 196, "seek": 86292, "start": 862.92, "end": 870.0, "text": " always use a try catch block because reflections have a high potential of throwing exceptions.", "tokens": [50364, 1009, 764, 257, 853, 3745, 3461, 570, 30679, 362, 257, 1090, 3995, 295, 10238, 22847, 13, 50718], "temperature": 0.0, "avg_logprob": -0.15566664650326684, "compression_ratio": 1.6194690265486726, "no_speech_prob": 0.031130433082580566}, {"id": 197, "seek": 86292, "start": 870.0, "end": 880.88, "text": " And then if I run it, okay, that took a while for me to understand because I had to go through", "tokens": [50718, 400, 550, 498, 286, 1190, 309, 11, 1392, 11, 300, 1890, 257, 1339, 337, 385, 281, 1223, 570, 286, 632, 281, 352, 807, 51262], "temperature": 0.0, "avg_logprob": -0.15566664650326684, "compression_ratio": 1.6194690265486726, "no_speech_prob": 0.031130433082580566}, {"id": 198, "seek": 86292, "start": 880.88, "end": 885.52, "text": " how the reflections work and trying to make sense of it once again because I wrote this", "tokens": [51262, 577, 264, 30679, 589, 293, 1382, 281, 652, 2020, 295, 309, 1564, 797, 570, 286, 4114, 341, 51494], "temperature": 0.0, "avg_logprob": -0.15566664650326684, "compression_ratio": 1.6194690265486726, "no_speech_prob": 0.031130433082580566}, {"id": 199, "seek": 86292, "start": 885.52, "end": 892.1999999999999, "text": " quite a while back, which is probably another reason as to why unless you really need it", "tokens": [51494, 1596, 257, 1339, 646, 11, 597, 307, 1391, 1071, 1778, 382, 281, 983, 5969, 291, 534, 643, 309, 51828], "temperature": 0.0, "avg_logprob": -0.15566664650326684, "compression_ratio": 1.6194690265486726, "no_speech_prob": 0.031130433082580566}, {"id": 200, "seek": 89220, "start": 892.48, "end": 897.6800000000001, "text": " using Java reflections is not a good idea because there's a lot of unexpected things", "tokens": [50378, 1228, 10745, 30679, 307, 406, 257, 665, 1558, 570, 456, 311, 257, 688, 295, 13106, 721, 50638], "temperature": 0.0, "avg_logprob": -0.19332589774296202, "compression_ratio": 1.642156862745098, "no_speech_prob": 0.020954720675945282}, {"id": 201, "seek": 89220, "start": 897.6800000000001, "end": 900.36, "text": " that can happen, let's say.", "tokens": [50638, 300, 393, 1051, 11, 718, 311, 584, 13, 50772], "temperature": 0.0, "avg_logprob": -0.19332589774296202, "compression_ratio": 1.642156862745098, "no_speech_prob": 0.020954720675945282}, {"id": 202, "seek": 89220, "start": 900.36, "end": 906.72, "text": " So firstly, I'm not going to override the clone method in my class.", "tokens": [50772, 407, 27376, 11, 286, 478, 406, 516, 281, 42321, 264, 26506, 3170, 294, 452, 1508, 13, 51090], "temperature": 0.0, "avg_logprob": -0.19332589774296202, "compression_ratio": 1.642156862745098, "no_speech_prob": 0.020954720675945282}, {"id": 203, "seek": 89220, "start": 906.72, "end": 910.12, "text": " So we're going to try and use the clone method in the object class.", "tokens": [51090, 407, 321, 434, 516, 281, 853, 293, 764, 264, 26506, 3170, 294, 264, 2657, 1508, 13, 51260], "temperature": 0.0, "avg_logprob": -0.19332589774296202, "compression_ratio": 1.642156862745098, "no_speech_prob": 0.020954720675945282}, {"id": 204, "seek": 89220, "start": 910.12, "end": 917.6, "text": " Now what happens then is I'm going to leave that bit commented out but I'll comment it", "tokens": [51260, 823, 437, 2314, 550, 307, 286, 478, 516, 281, 1856, 300, 857, 26940, 484, 457, 286, 603, 2871, 309, 51634], "temperature": 0.0, "avg_logprob": -0.19332589774296202, "compression_ratio": 1.642156862745098, "no_speech_prob": 0.020954720675945282}, {"id": 205, "seek": 91760, "start": 917.6, "end": 924.9200000000001, "text": " and comment out this bit here, which is trying to access the clone method of the superclass,", "tokens": [50364, 293, 2871, 484, 341, 857, 510, 11, 597, 307, 1382, 281, 2105, 264, 26506, 3170, 295, 264, 1687, 11665, 11, 50730], "temperature": 0.0, "avg_logprob": -0.14996852630223984, "compression_ratio": 1.702127659574468, "no_speech_prob": 0.0035378362517803907}, {"id": 206, "seek": 91760, "start": 924.9200000000001, "end": 929.6800000000001, "text": " which you can see here, I'm getting the clone method and I'm setting it as accessible.", "tokens": [50730, 597, 291, 393, 536, 510, 11, 286, 478, 1242, 264, 26506, 3170, 293, 286, 478, 3287, 309, 382, 9515, 13, 50968], "temperature": 0.0, "avg_logprob": -0.14996852630223984, "compression_ratio": 1.702127659574468, "no_speech_prob": 0.0035378362517803907}, {"id": 207, "seek": 91760, "start": 929.6800000000001, "end": 936.36, "text": " And then when I run this, it should technically or theoretically give an error because it", "tokens": [50968, 400, 550, 562, 286, 1190, 341, 11, 309, 820, 12120, 420, 29400, 976, 364, 6713, 570, 309, 51302], "temperature": 0.0, "avg_logprob": -0.14996852630223984, "compression_ratio": 1.702127659574468, "no_speech_prob": 0.0035378362517803907}, {"id": 208, "seek": 91760, "start": 936.36, "end": 940.76, "text": " can't access that because it's a protected method.", "tokens": [51302, 393, 380, 2105, 300, 570, 309, 311, 257, 10594, 3170, 13, 51522], "temperature": 0.0, "avg_logprob": -0.14996852630223984, "compression_ratio": 1.702127659574468, "no_speech_prob": 0.0035378362517803907}, {"id": 209, "seek": 94076, "start": 940.76, "end": 948.24, "text": " So the only way really to do it is to override it in the subclass and then do it like this,", "tokens": [50364, 407, 264, 787, 636, 534, 281, 360, 309, 307, 281, 42321, 309, 294, 264, 1422, 11665, 293, 550, 360, 309, 411, 341, 11, 50738], "temperature": 0.0, "avg_logprob": -0.1548742890357971, "compression_ratio": 1.664804469273743, "no_speech_prob": 0.0018385740695521235}, {"id": 210, "seek": 94076, "start": 948.24, "end": 954.92, "text": " which involves...", "tokens": [50738, 597, 11626, 485, 51072], "temperature": 0.0, "avg_logprob": -0.1548742890357971, "compression_ratio": 1.664804469273743, "no_speech_prob": 0.0018385740695521235}, {"id": 211, "seek": 94076, "start": 954.92, "end": 960.28, "text": " Now here you don't have to use reflections even though I've just used it, but that involves", "tokens": [51072, 823, 510, 291, 500, 380, 362, 281, 764, 30679, 754, 1673, 286, 600, 445, 1143, 309, 11, 457, 300, 11626, 51340], "temperature": 0.0, "avg_logprob": -0.1548742890357971, "compression_ratio": 1.664804469273743, "no_speech_prob": 0.0018385740695521235}, {"id": 212, "seek": 94076, "start": 960.28, "end": 965.4399999999999, "text": " accessing it via the subclass and then doing the cloning as such, which is going to happen", "tokens": [51340, 26440, 309, 5766, 264, 1422, 11665, 293, 550, 884, 264, 596, 16638, 382, 1270, 11, 597, 307, 516, 281, 1051, 51598], "temperature": 0.0, "avg_logprob": -0.1548742890357971, "compression_ratio": 1.664804469273743, "no_speech_prob": 0.0018385740695521235}, {"id": 213, "seek": 94076, "start": 965.4399999999999, "end": 966.4399999999999, "text": " here.", "tokens": [51598, 510, 13, 51648], "temperature": 0.0, "avg_logprob": -0.1548742890357971, "compression_ratio": 1.664804469273743, "no_speech_prob": 0.0018385740695521235}, {"id": 214, "seek": 96644, "start": 966.44, "end": 972.7600000000001, "text": " Now of course here again, as I said, you don't need to really do reflections, but the point", "tokens": [50364, 823, 295, 1164, 510, 797, 11, 382, 286, 848, 11, 291, 500, 380, 643, 281, 534, 360, 30679, 11, 457, 264, 935, 50680], "temperature": 0.0, "avg_logprob": -0.17634302636851434, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.004754478577524424}, {"id": 215, "seek": 96644, "start": 972.7600000000001, "end": 977.5600000000001, "text": " being, the overall point of all of this being, and I'm probably going to edit out a bit of", "tokens": [50680, 885, 11, 264, 4787, 935, 295, 439, 295, 341, 885, 11, 293, 286, 478, 1391, 516, 281, 8129, 484, 257, 857, 295, 50920], "temperature": 0.0, "avg_logprob": -0.17634302636851434, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.004754478577524424}, {"id": 216, "seek": 96644, "start": 977.5600000000001, "end": 981.32, "text": " the middle because I spent a long time going through this and then googling trying to figure", "tokens": [50920, 264, 2808, 570, 286, 4418, 257, 938, 565, 516, 807, 341, 293, 550, 50061, 1688, 1382, 281, 2573, 51108], "temperature": 0.0, "avg_logprob": -0.17634302636851434, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.004754478577524424}, {"id": 217, "seek": 96644, "start": 981.32, "end": 990.1600000000001, "text": " out what I did wrong, is that because this pesky cloneable interface, this piece of shit", "tokens": [51108, 484, 437, 286, 630, 2085, 11, 307, 300, 570, 341, 9262, 4133, 26506, 712, 9226, 11, 341, 2522, 295, 4611, 51550], "temperature": 0.0, "avg_logprob": -0.17634302636851434, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.004754478577524424}, {"id": 218, "seek": 99016, "start": 990.16, "end": 996.88, "text": " is not providing us with an implementation for the clone method, that makes things unnecessarily", "tokens": [50364, 307, 406, 6530, 505, 365, 364, 11420, 337, 264, 26506, 3170, 11, 300, 1669, 721, 16799, 3289, 50700], "temperature": 0.0, "avg_logprob": -0.16751679182052612, "compression_ratio": 1.7149532710280373, "no_speech_prob": 0.7569715976715088}, {"id": 219, "seek": 99016, "start": 996.88, "end": 1002.16, "text": " complicated, which is why Joshua Block states, so what does a cloneable do, given that it", "tokens": [50700, 6179, 11, 597, 307, 983, 24005, 17500, 4368, 11, 370, 437, 775, 257, 26506, 712, 360, 11, 2212, 300, 309, 50964], "temperature": 0.0, "avg_logprob": -0.16751679182052612, "compression_ratio": 1.7149532710280373, "no_speech_prob": 0.7569715976715088}, {"id": 220, "seek": 99016, "start": 1002.16, "end": 1008.52, "text": " contains no method, it determines the behavior of objects protected clone implementation.", "tokens": [50964, 8306, 572, 3170, 11, 309, 24799, 264, 5223, 295, 6565, 10594, 26506, 11420, 13, 51282], "temperature": 0.0, "avg_logprob": -0.16751679182052612, "compression_ratio": 1.7149532710280373, "no_speech_prob": 0.7569715976715088}, {"id": 221, "seek": 99016, "start": 1008.52, "end": 1015.48, "text": " If a class implements cloneable, objects clone method returns a field by field copy of the", "tokens": [51282, 759, 257, 1508, 704, 17988, 26506, 712, 11, 6565, 26506, 3170, 11247, 257, 2519, 538, 2519, 5055, 295, 264, 51630], "temperature": 0.0, "avg_logprob": -0.16751679182052612, "compression_ratio": 1.7149532710280373, "no_speech_prob": 0.7569715976715088}, {"id": 222, "seek": 101548, "start": 1015.48, "end": 1022.8000000000001, "text": " object, otherwise it throws clone not supported exception as a low malware is making noise", "tokens": [50364, 2657, 11, 5911, 309, 19251, 26506, 406, 8104, 11183, 382, 257, 2295, 40747, 307, 1455, 5658, 50730], "temperature": 0.0, "avg_logprob": -0.1932310316297743, "compression_ratio": 1.7168949771689497, "no_speech_prob": 0.3880656361579895}, {"id": 223, "seek": 101548, "start": 1022.8000000000001, "end": 1023.8000000000001, "text": " again.", "tokens": [50730, 797, 13, 50780], "temperature": 0.0, "avg_logprob": -0.1932310316297743, "compression_ratio": 1.7168949771689497, "no_speech_prob": 0.3880656361579895}, {"id": 224, "seek": 101548, "start": 1023.8000000000001, "end": 1029.76, "text": " Now by the way, as we go on with this point, that latter bit, throwing the clone not supported", "tokens": [50780, 823, 538, 264, 636, 11, 382, 321, 352, 322, 365, 341, 935, 11, 300, 18481, 857, 11, 10238, 264, 26506, 406, 8104, 51078], "temperature": 0.0, "avg_logprob": -0.1932310316297743, "compression_ratio": 1.7168949771689497, "no_speech_prob": 0.3880656361579895}, {"id": 225, "seek": 101548, "start": 1029.76, "end": 1037.96, "text": " exception that also becomes a pain point with this interface, we'll discuss it in this item.", "tokens": [51078, 11183, 300, 611, 3643, 257, 1822, 935, 365, 341, 9226, 11, 321, 603, 2248, 309, 294, 341, 3174, 13, 51488], "temperature": 0.0, "avg_logprob": -0.1932310316297743, "compression_ratio": 1.7168949771689497, "no_speech_prob": 0.3880656361579895}, {"id": 226, "seek": 101548, "start": 1037.96, "end": 1043.76, "text": " And he continues, though the specification doesn't say it, and this is an important point,", "tokens": [51488, 400, 415, 6515, 11, 1673, 264, 31256, 1177, 380, 584, 309, 11, 293, 341, 307, 364, 1021, 935, 11, 51778], "temperature": 0.0, "avg_logprob": -0.1932310316297743, "compression_ratio": 1.7168949771689497, "no_speech_prob": 0.3880656361579895}, {"id": 227, "seek": 104376, "start": 1043.76, "end": 1051.2, "text": " in practice, a class implementing cloneable is expected to provide a properly functioning", "tokens": [50364, 294, 3124, 11, 257, 1508, 18114, 26506, 712, 307, 5176, 281, 2893, 257, 6108, 18483, 50736], "temperature": 0.0, "avg_logprob": -0.14547461679537002, "compression_ratio": 1.568075117370892, "no_speech_prob": 0.060935910791158676}, {"id": 228, "seek": 104376, "start": 1051.2, "end": 1056.6, "text": " public clone method, in order to achieve this, this class and all of its superclasses must", "tokens": [50736, 1908, 26506, 3170, 11, 294, 1668, 281, 4584, 341, 11, 341, 1508, 293, 439, 295, 1080, 1687, 11665, 279, 1633, 51006], "temperature": 0.0, "avg_logprob": -0.14547461679537002, "compression_ratio": 1.568075117370892, "no_speech_prob": 0.060935910791158676}, {"id": 229, "seek": 104376, "start": 1056.6, "end": 1063.6, "text": " obey a complex, unenforceable, thinly documented protocol.", "tokens": [51006, 19297, 257, 3997, 11, 517, 268, 5156, 712, 11, 47337, 23007, 10336, 13, 51356], "temperature": 0.0, "avg_logprob": -0.14547461679537002, "compression_ratio": 1.568075117370892, "no_speech_prob": 0.060935910791158676}, {"id": 230, "seek": 104376, "start": 1063.6, "end": 1070.08, "text": " The resulting mechanism is fragile, dangerous and extra linguistic, it creates objects without", "tokens": [51356, 440, 16505, 7513, 307, 23847, 11, 5795, 293, 2857, 43002, 11, 309, 7829, 6565, 1553, 51680], "temperature": 0.0, "avg_logprob": -0.14547461679537002, "compression_ratio": 1.568075117370892, "no_speech_prob": 0.060935910791158676}, {"id": 231, "seek": 107008, "start": 1070.08, "end": 1071.8799999999999, "text": " calling a constructor.", "tokens": [50364, 5141, 257, 47479, 13, 50454], "temperature": 0.0, "avg_logprob": -0.17172614241068343, "compression_ratio": 1.664179104477612, "no_speech_prob": 0.21193693578243256}, {"id": 232, "seek": 107008, "start": 1071.8799999999999, "end": 1078.84, "text": " That really is what a clone method does, if you think about it, for all intents and purposes.", "tokens": [50454, 663, 534, 307, 437, 257, 26506, 3170, 775, 11, 498, 291, 519, 466, 309, 11, 337, 439, 560, 791, 293, 9932, 13, 50802], "temperature": 0.0, "avg_logprob": -0.17172614241068343, "compression_ratio": 1.664179104477612, "no_speech_prob": 0.21193693578243256}, {"id": 233, "seek": 107008, "start": 1078.84, "end": 1082.4399999999998, "text": " So this begs the question, how to implement a well behaved clone method?", "tokens": [50802, 407, 341, 4612, 82, 264, 1168, 11, 577, 281, 4445, 257, 731, 48249, 26506, 3170, 30, 50982], "temperature": 0.0, "avg_logprob": -0.17172614241068343, "compression_ratio": 1.664179104477612, "no_speech_prob": 0.21193693578243256}, {"id": 234, "seek": 107008, "start": 1082.4399999999998, "end": 1086.76, "text": " And before we get to the implementing strategy, a few caveats.", "tokens": [50982, 400, 949, 321, 483, 281, 264, 18114, 5206, 11, 257, 1326, 11730, 1720, 13, 51198], "temperature": 0.0, "avg_logprob": -0.17172614241068343, "compression_ratio": 1.664179104477612, "no_speech_prob": 0.21193693578243256}, {"id": 235, "seek": 107008, "start": 1086.76, "end": 1092.56, "text": " Firstly, the cloneable interface is an atypical interface, as interfaces aren't supposed", "tokens": [51198, 20042, 11, 264, 26506, 712, 9226, 307, 364, 412, 88, 34061, 9226, 11, 382, 28416, 3212, 380, 3442, 51488], "temperature": 0.0, "avg_logprob": -0.17172614241068343, "compression_ratio": 1.664179104477612, "no_speech_prob": 0.21193693578243256}, {"id": 236, "seek": 107008, "start": 1092.56, "end": 1097.9199999999998, "text": " to modify the behavior of a superclass, but are blueprint for what a given class can do", "tokens": [51488, 281, 16927, 264, 5223, 295, 257, 1687, 11665, 11, 457, 366, 35868, 337, 437, 257, 2212, 1508, 393, 360, 51756], "temperature": 0.0, "avg_logprob": -0.17172614241068343, "compression_ratio": 1.664179104477612, "no_speech_prob": 0.21193693578243256}, {"id": 237, "seek": 107008, "start": 1097.9199999999998, "end": 1098.9199999999998, "text": " for its clients.", "tokens": [51756, 337, 1080, 6982, 13, 51806], "temperature": 0.0, "avg_logprob": -0.17172614241068343, "compression_ratio": 1.664179104477612, "no_speech_prob": 0.21193693578243256}, {"id": 238, "seek": 109892, "start": 1098.92, "end": 1105.24, "text": " So really, when you implement the cloneable method in a class, let's say class A, it's", "tokens": [50364, 407, 534, 11, 562, 291, 4445, 264, 26506, 712, 3170, 294, 257, 1508, 11, 718, 311, 584, 1508, 316, 11, 309, 311, 50680], "temperature": 0.0, "avg_logprob": -0.1866649345115379, "compression_ratio": 1.751131221719457, "no_speech_prob": 0.0014549113111570477}, {"id": 239, "seek": 109892, "start": 1105.24, "end": 1110.5600000000002, "text": " kind of an interface for the object class, for the superclass, which is atypical.", "tokens": [50680, 733, 295, 364, 9226, 337, 264, 2657, 1508, 11, 337, 264, 1687, 11665, 11, 597, 307, 412, 88, 34061, 13, 50946], "temperature": 0.0, "avg_logprob": -0.1866649345115379, "compression_ratio": 1.751131221719457, "no_speech_prob": 0.0014549113111570477}, {"id": 240, "seek": 109892, "start": 1110.5600000000002, "end": 1112.28, "text": " And that again is a problem.", "tokens": [50946, 400, 300, 797, 307, 257, 1154, 13, 51032], "temperature": 0.0, "avg_logprob": -0.1866649345115379, "compression_ratio": 1.751131221719457, "no_speech_prob": 0.0014549113111570477}, {"id": 241, "seek": 109892, "start": 1112.28, "end": 1118.48, "text": " And then also, I wouldn't say it's a problem, it's kind of an anti-pattern, it's something", "tokens": [51032, 400, 550, 611, 11, 286, 2759, 380, 584, 309, 311, 257, 1154, 11, 309, 311, 733, 295, 364, 6061, 12, 79, 1161, 77, 11, 309, 311, 746, 51342], "temperature": 0.0, "avg_logprob": -0.1866649345115379, "compression_ratio": 1.751131221719457, "no_speech_prob": 0.0014549113111570477}, {"id": 242, "seek": 109892, "start": 1118.48, "end": 1120.6000000000001, "text": " particularly shouldn't follow.", "tokens": [51342, 4098, 4659, 380, 1524, 13, 51448], "temperature": 0.0, "avg_logprob": -0.1866649345115379, "compression_ratio": 1.751131221719457, "no_speech_prob": 0.0014549113111570477}, {"id": 243, "seek": 109892, "start": 1120.6000000000001, "end": 1124.68, "text": " But also the general contract for the objects clone method is weak.", "tokens": [51448, 583, 611, 264, 2674, 4364, 337, 264, 6565, 26506, 3170, 307, 5336, 13, 51652], "temperature": 0.0, "avg_logprob": -0.1866649345115379, "compression_ratio": 1.751131221719457, "no_speech_prob": 0.0014549113111570477}, {"id": 244, "seek": 112468, "start": 1124.68, "end": 1130.04, "text": " This is the general contract defined in the Oracle docs, and you can see what it does.", "tokens": [50364, 639, 307, 264, 2674, 4364, 7642, 294, 264, 25654, 45623, 11, 293, 291, 393, 536, 437, 309, 775, 13, 50632], "temperature": 0.0, "avg_logprob": -0.2450679143269857, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.04671512171626091}, {"id": 245, "seek": 112468, "start": 1130.04, "end": 1135.5600000000002, "text": " I'm not going to go through it too facetiously, but essentially, the idea is the clone takes", "tokens": [50632, 286, 478, 406, 516, 281, 352, 807, 309, 886, 1915, 302, 8994, 11, 457, 4476, 11, 264, 1558, 307, 264, 26506, 2516, 50908], "temperature": 0.0, "avg_logprob": -0.2450679143269857, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.04671512171626091}, {"id": 246, "seek": 112468, "start": 1135.5600000000002, "end": 1144.4, "text": " place and it creates in return a copy of the past object, past of that method with a new", "tokens": [50908, 1081, 293, 309, 7829, 294, 2736, 257, 5055, 295, 264, 1791, 2657, 11, 1791, 295, 300, 3170, 365, 257, 777, 51350], "temperature": 0.0, "avg_logprob": -0.2450679143269857, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.04671512171626091}, {"id": 247, "seek": 112468, "start": 1144.4, "end": 1145.92, "text": " memory location.", "tokens": [51350, 4675, 4914, 13, 51426], "temperature": 0.0, "avg_logprob": -0.2450679143269857, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.04671512171626091}, {"id": 248, "seek": 112468, "start": 1145.92, "end": 1153.0, "text": " Now, it is vaguely similar to constructor chaining, a pattern, a design pattern, which", "tokens": [51426, 823, 11, 309, 307, 13501, 48863, 2531, 281, 47479, 417, 3686, 11, 257, 5102, 11, 257, 1715, 5102, 11, 597, 51780], "temperature": 0.0, "avg_logprob": -0.2450679143269857, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.04671512171626091}, {"id": 249, "seek": 115300, "start": 1153.0, "end": 1156.44, "text": " allows to create less duplicated code.", "tokens": [50364, 4045, 281, 1884, 1570, 1581, 564, 3587, 3089, 13, 50536], "temperature": 0.0, "avg_logprob": -0.14692666358554485, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.15390150249004364}, {"id": 250, "seek": 115300, "start": 1156.44, "end": 1161.08, "text": " But more than me explaining it, let's take a look at what constructor chaining entails", "tokens": [50536, 583, 544, 813, 385, 13468, 309, 11, 718, 311, 747, 257, 574, 412, 437, 47479, 417, 3686, 50133, 50768], "temperature": 0.0, "avg_logprob": -0.14692666358554485, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.15390150249004364}, {"id": 251, "seek": 115300, "start": 1161.08, "end": 1167.12, "text": " if I open up the class customer.", "tokens": [50768, 498, 286, 1269, 493, 264, 1508, 5474, 13, 51070], "temperature": 0.0, "avg_logprob": -0.14692666358554485, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.15390150249004364}, {"id": 252, "seek": 115300, "start": 1167.12, "end": 1168.32, "text": " It's quite a straightforward pattern.", "tokens": [51070, 467, 311, 1596, 257, 15325, 5102, 13, 51130], "temperature": 0.0, "avg_logprob": -0.14692666358554485, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.15390150249004364}, {"id": 253, "seek": 115300, "start": 1168.32, "end": 1171.44, "text": " You probably have seen it in a lot of code in the Java world.", "tokens": [51130, 509, 1391, 362, 1612, 309, 294, 257, 688, 295, 3089, 294, 264, 10745, 1002, 13, 51286], "temperature": 0.0, "avg_logprob": -0.14692666358554485, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.15390150249004364}, {"id": 254, "seek": 115300, "start": 1171.44, "end": 1176.08, "text": " We have a class customer that extends the superclass person.", "tokens": [51286, 492, 362, 257, 1508, 5474, 300, 26448, 264, 1687, 11665, 954, 13, 51518], "temperature": 0.0, "avg_logprob": -0.14692666358554485, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.15390150249004364}, {"id": 255, "seek": 115300, "start": 1176.08, "end": 1181.8, "text": " So all the customers are people, at least for now.", "tokens": [51518, 407, 439, 264, 4581, 366, 561, 11, 412, 1935, 337, 586, 13, 51804], "temperature": 0.0, "avg_logprob": -0.14692666358554485, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.15390150249004364}, {"id": 256, "seek": 118180, "start": 1181.8, "end": 1188.0, "text": " And then in constructor chaining, we have the customer class being constructed, that", "tokens": [50364, 400, 550, 294, 47479, 417, 3686, 11, 321, 362, 264, 5474, 1508, 885, 17083, 11, 300, 50674], "temperature": 0.0, "avg_logprob": -0.1853837099942294, "compression_ratio": 1.7177033492822966, "no_speech_prob": 0.01048362534493208}, {"id": 257, "seek": 118180, "start": 1188.0, "end": 1189.84, "text": " the object being created.", "tokens": [50674, 264, 2657, 885, 2942, 13, 50766], "temperature": 0.0, "avg_logprob": -0.1853837099942294, "compression_ratio": 1.7177033492822966, "no_speech_prob": 0.01048362534493208}, {"id": 258, "seek": 118180, "start": 1189.84, "end": 1195.8799999999999, "text": " And we will see as some fields are just inherited directly from the superclass, things like", "tokens": [50766, 400, 321, 486, 536, 382, 512, 7909, 366, 445, 27091, 3838, 490, 264, 1687, 11665, 11, 721, 411, 51068], "temperature": 0.0, "avg_logprob": -0.1853837099942294, "compression_ratio": 1.7177033492822966, "no_speech_prob": 0.01048362534493208}, {"id": 259, "seek": 118180, "start": 1195.8799999999999, "end": 1199.08, "text": " first name, middle name, last name, age.", "tokens": [51068, 700, 1315, 11, 2808, 1315, 11, 1036, 1315, 11, 3205, 13, 51228], "temperature": 0.0, "avg_logprob": -0.1853837099942294, "compression_ratio": 1.7177033492822966, "no_speech_prob": 0.01048362534493208}, {"id": 260, "seek": 118180, "start": 1199.08, "end": 1206.44, "text": " And then only this field here, the loyalty card ID, is constructed in this constructor", "tokens": [51228, 400, 550, 787, 341, 2519, 510, 11, 264, 22831, 2920, 7348, 11, 307, 17083, 294, 341, 47479, 51596], "temperature": 0.0, "avg_logprob": -0.1853837099942294, "compression_ratio": 1.7177033492822966, "no_speech_prob": 0.01048362534493208}, {"id": 261, "seek": 118180, "start": 1206.44, "end": 1209.04, "text": " and that field value is set.", "tokens": [51596, 293, 300, 2519, 2158, 307, 992, 13, 51726], "temperature": 0.0, "avg_logprob": -0.1853837099942294, "compression_ratio": 1.7177033492822966, "no_speech_prob": 0.01048362534493208}, {"id": 262, "seek": 120904, "start": 1209.04, "end": 1215.24, "text": " So the way this reduces duplication of coders, let's say if we didn't have this kind of constructor", "tokens": [50364, 407, 264, 636, 341, 18081, 17154, 399, 295, 17656, 433, 11, 718, 311, 584, 498, 321, 994, 380, 362, 341, 733, 295, 47479, 50674], "temperature": 0.0, "avg_logprob": -0.17721739968100747, "compression_ratio": 1.735, "no_speech_prob": 0.006796345580369234}, {"id": 263, "seek": 120904, "start": 1215.24, "end": 1221.68, "text": " chaining, this same bit of code here will have to be replicated in this constructor", "tokens": [50674, 417, 3686, 11, 341, 912, 857, 295, 3089, 510, 486, 362, 281, 312, 46365, 294, 341, 47479, 50996], "temperature": 0.0, "avg_logprob": -0.17721739968100747, "compression_ratio": 1.735, "no_speech_prob": 0.006796345580369234}, {"id": 264, "seek": 120904, "start": 1221.68, "end": 1223.1599999999999, "text": " too.", "tokens": [50996, 886, 13, 51070], "temperature": 0.0, "avg_logprob": -0.17721739968100747, "compression_ratio": 1.735, "no_speech_prob": 0.006796345580369234}, {"id": 265, "seek": 120904, "start": 1223.1599999999999, "end": 1226.48, "text": " And that would be a waste of space.", "tokens": [51070, 400, 300, 576, 312, 257, 5964, 295, 1901, 13, 51236], "temperature": 0.0, "avg_logprob": -0.17721739968100747, "compression_ratio": 1.735, "no_speech_prob": 0.006796345580369234}, {"id": 266, "seek": 120904, "start": 1226.48, "end": 1232.76, "text": " And so by invoking the super keyword and then passing it into the superclass constructor,", "tokens": [51236, 400, 370, 538, 1048, 5953, 264, 1687, 20428, 293, 550, 8437, 309, 666, 264, 1687, 11665, 47479, 11, 51550], "temperature": 0.0, "avg_logprob": -0.17721739968100747, "compression_ratio": 1.735, "no_speech_prob": 0.006796345580369234}, {"id": 267, "seek": 120904, "start": 1232.76, "end": 1234.3999999999999, "text": " this allows the supercoded code.", "tokens": [51550, 341, 4045, 264, 1687, 66, 12340, 3089, 13, 51632], "temperature": 0.0, "avg_logprob": -0.17721739968100747, "compression_ratio": 1.735, "no_speech_prob": 0.006796345580369234}, {"id": 268, "seek": 123440, "start": 1234.4, "end": 1239.72, "text": " However, the problem is this kind of pseudo constructor chaining isn't enforced in the", "tokens": [50364, 2908, 11, 264, 1154, 307, 341, 733, 295, 35899, 47479, 417, 3686, 1943, 380, 40953, 294, 264, 50630], "temperature": 0.0, "avg_logprob": -0.1569635577318145, "compression_ratio": 1.6225490196078431, "no_speech_prob": 0.0026725768111646175}, {"id": 269, "seek": 123440, "start": 1239.72, "end": 1240.72, "text": " clone method.", "tokens": [50630, 26506, 3170, 13, 50680], "temperature": 0.0, "avg_logprob": -0.1569635577318145, "compression_ratio": 1.6225490196078431, "no_speech_prob": 0.0026725768111646175}, {"id": 270, "seek": 123440, "start": 1240.72, "end": 1248.16, "text": " So if you'd look at our person customer example, if you mess up the construction here in the", "tokens": [50680, 407, 498, 291, 1116, 574, 412, 527, 954, 5474, 1365, 11, 498, 291, 2082, 493, 264, 6435, 510, 294, 264, 51052], "temperature": 0.0, "avg_logprob": -0.1569635577318145, "compression_ratio": 1.6225490196078431, "no_speech_prob": 0.0026725768111646175}, {"id": 271, "seek": 123440, "start": 1248.16, "end": 1252.0400000000002, "text": " constructor, the compiler will throw an error.", "tokens": [51052, 47479, 11, 264, 31958, 486, 3507, 364, 6713, 13, 51246], "temperature": 0.0, "avg_logprob": -0.1569635577318145, "compression_ratio": 1.6225490196078431, "no_speech_prob": 0.0026725768111646175}, {"id": 272, "seek": 123440, "start": 1252.0400000000002, "end": 1258.24, "text": " But in this example, which I have, which is a class called food that implements cloneable,", "tokens": [51246, 583, 294, 341, 1365, 11, 597, 286, 362, 11, 597, 307, 257, 1508, 1219, 1755, 300, 704, 17988, 26506, 712, 11, 51556], "temperature": 0.0, "avg_logprob": -0.1569635577318145, "compression_ratio": 1.6225490196078431, "no_speech_prob": 0.0026725768111646175}, {"id": 273, "seek": 125824, "start": 1258.24, "end": 1261.68, "text": " it's overriding the clone method.", "tokens": [50364, 309, 311, 670, 81, 2819, 264, 26506, 3170, 13, 50536], "temperature": 0.0, "avg_logprob": -0.17602500209101923, "compression_ratio": 1.6214689265536724, "no_speech_prob": 0.21728266775608063}, {"id": 274, "seek": 125824, "start": 1261.68, "end": 1265.56, "text": " And then this class bar extends the food class.", "tokens": [50536, 400, 550, 341, 1508, 2159, 26448, 264, 1755, 1508, 13, 50730], "temperature": 0.0, "avg_logprob": -0.17602500209101923, "compression_ratio": 1.6214689265536724, "no_speech_prob": 0.21728266775608063}, {"id": 275, "seek": 125824, "start": 1265.56, "end": 1268.64, "text": " So that's a subclass of food.", "tokens": [50730, 407, 300, 311, 257, 1422, 11665, 295, 1755, 13, 50884], "temperature": 0.0, "avg_logprob": -0.17602500209101923, "compression_ratio": 1.6214689265536724, "no_speech_prob": 0.21728266775608063}, {"id": 276, "seek": 125824, "start": 1268.64, "end": 1275.6, "text": " And it also is trying to override the clone method of food, of the superclass, but what", "tokens": [50884, 400, 309, 611, 307, 1382, 281, 42321, 264, 26506, 3170, 295, 1755, 11, 295, 264, 1687, 11665, 11, 457, 437, 51232], "temperature": 0.0, "avg_logprob": -0.17602500209101923, "compression_ratio": 1.6214689265536724, "no_speech_prob": 0.21728266775608063}, {"id": 277, "seek": 125824, "start": 1275.6, "end": 1280.64, "text": " happens there is in our track catch block when we run it, it's going to throw an error.", "tokens": [51232, 2314, 456, 307, 294, 527, 2837, 3745, 3461, 562, 321, 1190, 309, 11, 309, 311, 516, 281, 3507, 364, 6713, 13, 51484], "temperature": 0.0, "avg_logprob": -0.17602500209101923, "compression_ratio": 1.6214689265536724, "no_speech_prob": 0.21728266775608063}, {"id": 278, "seek": 128064, "start": 1280.64, "end": 1289.0400000000002, "text": " The reason is because the superclass, which is food, is not, it doesn't call the super.clone,", "tokens": [50364, 440, 1778, 307, 570, 264, 1687, 11665, 11, 597, 307, 1755, 11, 307, 406, 11, 309, 1177, 380, 818, 264, 1687, 13, 3474, 546, 11, 50784], "temperature": 0.0, "avg_logprob": -0.19000770848825438, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.12418904155492783}, {"id": 279, "seek": 128064, "start": 1289.0400000000002, "end": 1294.5600000000002, "text": " so the objects clone method, rather it's just creating a new instance of food and passing", "tokens": [50784, 370, 264, 6565, 26506, 3170, 11, 2831, 309, 311, 445, 4084, 257, 777, 5197, 295, 1755, 293, 8437, 51060], "temperature": 0.0, "avg_logprob": -0.19000770848825438, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.12418904155492783}, {"id": 280, "seek": 128064, "start": 1294.5600000000002, "end": 1295.5600000000002, "text": " that.", "tokens": [51060, 300, 13, 51110], "temperature": 0.0, "avg_logprob": -0.19000770848825438, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.12418904155492783}, {"id": 281, "seek": 128064, "start": 1295.5600000000002, "end": 1300.0, "text": " And that creates errors here because it's on a proper clone taking place.", "tokens": [51110, 400, 300, 7829, 13603, 510, 570, 309, 311, 322, 257, 2296, 26506, 1940, 1081, 13, 51332], "temperature": 0.0, "avg_logprob": -0.19000770848825438, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.12418904155492783}, {"id": 282, "seek": 128064, "start": 1300.0, "end": 1303.6000000000001, "text": " And because now this error is thrown in runtime.", "tokens": [51332, 400, 570, 586, 341, 6713, 307, 11732, 294, 34474, 13, 51512], "temperature": 0.0, "avg_logprob": -0.19000770848825438, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.12418904155492783}, {"id": 283, "seek": 128064, "start": 1303.6000000000001, "end": 1307.48, "text": " So if it was in foes, we would catch this error in compile time.", "tokens": [51512, 407, 498, 309, 390, 294, 726, 279, 11, 321, 576, 3745, 341, 6713, 294, 31413, 565, 13, 51706], "temperature": 0.0, "avg_logprob": -0.19000770848825438, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.12418904155492783}, {"id": 284, "seek": 128064, "start": 1307.48, "end": 1308.48, "text": " And that's a problem.", "tokens": [51706, 400, 300, 311, 257, 1154, 13, 51756], "temperature": 0.0, "avg_logprob": -0.19000770848825438, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.12418904155492783}, {"id": 285, "seek": 130848, "start": 1308.64, "end": 1312.4, "text": " However, though, of course, final classes don't have to worry about this problem of it being", "tokens": [50372, 2908, 11, 1673, 11, 295, 1164, 11, 2572, 5359, 500, 380, 362, 281, 3292, 466, 341, 1154, 295, 309, 885, 50560], "temperature": 0.0, "avg_logprob": -0.17253905651616117, "compression_ratio": 1.6062992125984252, "no_speech_prob": 0.00468046497553587}, {"id": 286, "seek": 130848, "start": 1312.4, "end": 1317.52, "text": " not in foes because they will not implement cloneable as they won't be cloned.", "tokens": [50560, 406, 294, 726, 279, 570, 436, 486, 406, 4445, 26506, 712, 382, 436, 1582, 380, 312, 596, 19009, 13, 50816], "temperature": 0.0, "avg_logprob": -0.17253905651616117, "compression_ratio": 1.6062992125984252, "no_speech_prob": 0.00468046497553587}, {"id": 287, "seek": 130848, "start": 1317.52, "end": 1322.44, "text": " So to put it a bit more clearly, Joshua Block states, this mechanism is vaguely similar", "tokens": [50816, 407, 281, 829, 309, 257, 857, 544, 4448, 11, 24005, 17500, 4368, 11, 341, 7513, 307, 13501, 48863, 2531, 51062], "temperature": 0.0, "avg_logprob": -0.17253905651616117, "compression_ratio": 1.6062992125984252, "no_speech_prob": 0.00468046497553587}, {"id": 288, "seek": 130848, "start": 1322.44, "end": 1326.08, "text": " to constructor chaining, except that it isn't in foes.", "tokens": [51062, 281, 47479, 417, 3686, 11, 3993, 300, 309, 1943, 380, 294, 726, 279, 13, 51244], "temperature": 0.0, "avg_logprob": -0.17253905651616117, "compression_ratio": 1.6062992125984252, "no_speech_prob": 0.00468046497553587}, {"id": 289, "seek": 130848, "start": 1326.08, "end": 1332.52, "text": " If a classes clone method returns an instance that is not obtained by calling superart clone,", "tokens": [51244, 759, 257, 5359, 26506, 3170, 11247, 364, 5197, 300, 307, 406, 14879, 538, 5141, 1687, 446, 26506, 11, 51566], "temperature": 0.0, "avg_logprob": -0.17253905651616117, "compression_ratio": 1.6062992125984252, "no_speech_prob": 0.00468046497553587}, {"id": 290, "seek": 133252, "start": 1332.52, "end": 1344.48, "text": " like the problem which we see here, where the superclass foo is not calling super.clone,", "tokens": [50364, 411, 264, 1154, 597, 321, 536, 510, 11, 689, 264, 1687, 11665, 726, 78, 307, 406, 5141, 1687, 13, 3474, 546, 11, 50962], "temperature": 0.0, "avg_logprob": -0.1738215836001114, "compression_ratio": 1.6390532544378698, "no_speech_prob": 0.2090461403131485}, {"id": 291, "seek": 133252, "start": 1344.48, "end": 1349.8799999999999, "text": " but by calling a constructor, which the person is doing here, the compiler won't complain.", "tokens": [50962, 457, 538, 5141, 257, 47479, 11, 597, 264, 954, 307, 884, 510, 11, 264, 31958, 1582, 380, 11024, 13, 51232], "temperature": 0.0, "avg_logprob": -0.1738215836001114, "compression_ratio": 1.6390532544378698, "no_speech_prob": 0.2090461403131485}, {"id": 292, "seek": 133252, "start": 1349.8799999999999, "end": 1355.2, "text": " But if a subclass of that class calls super.clone, the resulting object will have the wrong class", "tokens": [51232, 583, 498, 257, 1422, 11665, 295, 300, 1508, 5498, 1687, 13, 3474, 546, 11, 264, 16505, 2657, 486, 362, 264, 2085, 1508, 51498], "temperature": 0.0, "avg_logprob": -0.1738215836001114, "compression_ratio": 1.6390532544378698, "no_speech_prob": 0.2090461403131485}, {"id": 293, "seek": 135520, "start": 1355.2, "end": 1362.32, "text": " preventing the subclass from clone.", "tokens": [50364, 19965, 264, 1422, 11665, 490, 26506, 13, 50720], "temperature": 0.0, "avg_logprob": -0.30895038751455456, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.10814531147480011}, {"id": 294, "seek": 135520, "start": 1362.32, "end": 1365.4, "text": " That's a complicated, weird way of putting it in the sentence.", "tokens": [50720, 663, 311, 257, 6179, 11, 3657, 636, 295, 3372, 309, 294, 264, 8174, 13, 50874], "temperature": 0.0, "avg_logprob": -0.30895038751455456, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.10814531147480011}, {"id": 295, "seek": 135520, "start": 1365.4, "end": 1370.32, "text": " Those resulting objects will have the wrong class preventing the subclass from clone method", "tokens": [50874, 3950, 16505, 6565, 486, 362, 264, 2085, 1508, 19965, 264, 1422, 11665, 490, 26506, 3170, 51120], "temperature": 0.0, "avg_logprob": -0.30895038751455456, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.10814531147480011}, {"id": 296, "seek": 135520, "start": 1370.32, "end": 1371.8400000000001, "text": " from working properly.", "tokens": [51120, 490, 1364, 6108, 13, 51196], "temperature": 0.0, "avg_logprob": -0.30895038751455456, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.10814531147480011}, {"id": 297, "seek": 135520, "start": 1371.8400000000001, "end": 1375.32, "text": " That's like a weird way that he's written the sentence.", "tokens": [51196, 663, 311, 411, 257, 3657, 636, 300, 415, 311, 3720, 264, 8174, 13, 51370], "temperature": 0.0, "avg_logprob": -0.30895038751455456, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.10814531147480011}, {"id": 298, "seek": 135520, "start": 1375.32, "end": 1379.96, "text": " In any case, the learning strategy, the simplest thing at first to do is to call the super", "tokens": [51370, 682, 604, 1389, 11, 264, 2539, 5206, 11, 264, 22811, 551, 412, 700, 281, 360, 307, 281, 818, 264, 1687, 51602], "temperature": 0.0, "avg_logprob": -0.30895038751455456, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.10814531147480011}, {"id": 299, "seek": 135520, "start": 1379.96, "end": 1384.4, "text": " dot clone method because that will return an object which is a fully functional replica", "tokens": [51602, 5893, 26506, 3170, 570, 300, 486, 2736, 364, 2657, 597, 307, 257, 4498, 11745, 35456, 51824], "temperature": 0.0, "avg_logprob": -0.30895038751455456, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.10814531147480011}, {"id": 300, "seek": 138440, "start": 1384.4, "end": 1385.4, "text": " of the original.", "tokens": [50364, 295, 264, 3380, 13, 50414], "temperature": 0.0, "avg_logprob": -0.16773592508756197, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.20674243569374084}, {"id": 301, "seek": 138440, "start": 1385.4, "end": 1390.92, "text": " And if all fields of the class, so in the class you're designing, if all the fields contain", "tokens": [50414, 400, 498, 439, 7909, 295, 264, 1508, 11, 370, 294, 264, 1508, 291, 434, 14685, 11, 498, 439, 264, 7909, 5304, 50690], "temperature": 0.0, "avg_logprob": -0.16773592508756197, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.20674243569374084}, {"id": 302, "seek": 138440, "start": 1390.92, "end": 1396.8000000000002, "text": " primitive values or reference to an immutable object, no further processing is needed.", "tokens": [50690, 28540, 4190, 420, 6408, 281, 364, 3397, 32148, 2657, 11, 572, 3052, 9007, 307, 2978, 13, 50984], "temperature": 0.0, "avg_logprob": -0.16773592508756197, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.20674243569374084}, {"id": 303, "seek": 138440, "start": 1396.8000000000002, "end": 1402.16, "text": " As Joshua Block states, any field declared in your class will have values identical to", "tokens": [50984, 1018, 24005, 17500, 4368, 11, 604, 2519, 15489, 294, 428, 1508, 486, 362, 4190, 14800, 281, 51252], "temperature": 0.0, "avg_logprob": -0.16773592508756197, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.20674243569374084}, {"id": 304, "seek": 138440, "start": 1402.16, "end": 1403.72, "text": " those of the original.", "tokens": [51252, 729, 295, 264, 3380, 13, 51330], "temperature": 0.0, "avg_logprob": -0.16773592508756197, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.20674243569374084}, {"id": 305, "seek": 138440, "start": 1403.72, "end": 1408.5600000000002, "text": " If every field contains a primitive value or a reference to an immutable object, the", "tokens": [51330, 759, 633, 2519, 8306, 257, 28540, 2158, 420, 257, 6408, 281, 364, 3397, 32148, 2657, 11, 264, 51572], "temperature": 0.0, "avg_logprob": -0.16773592508756197, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.20674243569374084}, {"id": 306, "seek": 138440, "start": 1408.5600000000002, "end": 1411.2800000000002, "text": " return object may be exactly what you need.", "tokens": [51572, 2736, 2657, 815, 312, 2293, 437, 291, 643, 13, 51708], "temperature": 0.0, "avg_logprob": -0.16773592508756197, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.20674243569374084}, {"id": 307, "seek": 141128, "start": 1411.28, "end": 1415.96, "text": " So you don't need to play around with it in your clone method, in your overwritten clone", "tokens": [50364, 407, 291, 500, 380, 643, 281, 862, 926, 365, 309, 294, 428, 26506, 3170, 11, 294, 428, 670, 26859, 26506, 50598], "temperature": 0.0, "avg_logprob": -0.1504236304241678, "compression_ratio": 1.8284671532846715, "no_speech_prob": 0.16444364190101624}, {"id": 308, "seek": 141128, "start": 1415.96, "end": 1419.72, "text": " method, in which case no further processing is necessary.", "tokens": [50598, 3170, 11, 294, 597, 1389, 572, 3052, 9007, 307, 4818, 13, 50786], "temperature": 0.0, "avg_logprob": -0.1504236304241678, "compression_ratio": 1.8284671532846715, "no_speech_prob": 0.16444364190101624}, {"id": 309, "seek": 141128, "start": 1419.72, "end": 1425.6, "text": " And he also continues, but note that immutable classes should never provide a clone method", "tokens": [50786, 400, 415, 611, 6515, 11, 457, 3637, 300, 3397, 32148, 5359, 820, 1128, 2893, 257, 26506, 3170, 51080], "temperature": 0.0, "avg_logprob": -0.1504236304241678, "compression_ratio": 1.8284671532846715, "no_speech_prob": 0.16444364190101624}, {"id": 310, "seek": 141128, "start": 1425.6, "end": 1428.8799999999999, "text": " because it would merely encourage wasteful copying.", "tokens": [51080, 570, 309, 576, 17003, 5373, 5964, 906, 27976, 13, 51244], "temperature": 0.0, "avg_logprob": -0.1504236304241678, "compression_ratio": 1.8284671532846715, "no_speech_prob": 0.16444364190101624}, {"id": 311, "seek": 141128, "start": 1428.8799999999999, "end": 1432.8, "text": " So an immutable class would be classes where the fields are all final and the class itself", "tokens": [51244, 407, 364, 3397, 32148, 1508, 576, 312, 5359, 689, 264, 7909, 366, 439, 2572, 293, 264, 1508, 2564, 51440], "temperature": 0.0, "avg_logprob": -0.1504236304241678, "compression_ratio": 1.8284671532846715, "no_speech_prob": 0.16444364190101624}, {"id": 312, "seek": 141128, "start": 1432.8, "end": 1435.68, "text": " is declared with a final keyword.", "tokens": [51440, 307, 15489, 365, 257, 2572, 20428, 13, 51584], "temperature": 0.0, "avg_logprob": -0.1504236304241678, "compression_ratio": 1.8284671532846715, "no_speech_prob": 0.16444364190101624}, {"id": 313, "seek": 141128, "start": 1435.68, "end": 1440.84, "text": " And a simple example of this idea is this phone number class where in the phone number", "tokens": [51584, 400, 257, 2199, 1365, 295, 341, 1558, 307, 341, 2593, 1230, 1508, 689, 294, 264, 2593, 1230, 51842], "temperature": 0.0, "avg_logprob": -0.1504236304241678, "compression_ratio": 1.8284671532846715, "no_speech_prob": 0.16444364190101624}, {"id": 314, "seek": 144084, "start": 1440.84, "end": 1447.9599999999998, "text": " class we have a clone method, it's simply invoking, not invoking invoking the super", "tokens": [50364, 1508, 321, 362, 257, 26506, 3170, 11, 309, 311, 2935, 1048, 5953, 11, 406, 1048, 5953, 1048, 5953, 264, 1687, 50720], "temperature": 0.0, "avg_logprob": -0.17197072623979928, "compression_ratio": 1.7975206611570247, "no_speech_prob": 0.054181817919015884}, {"id": 315, "seek": 144084, "start": 1447.9599999999998, "end": 1452.12, "text": " dot clone method which is the clone method of the object class and of course doing the", "tokens": [50720, 5893, 26506, 3170, 597, 307, 264, 26506, 3170, 295, 264, 2657, 1508, 293, 295, 1164, 884, 264, 50928], "temperature": 0.0, "avg_logprob": -0.17197072623979928, "compression_ratio": 1.7975206611570247, "no_speech_prob": 0.054181817919015884}, {"id": 316, "seek": 144084, "start": 1452.12, "end": 1458.0, "text": " casting so that what's returned by this method is something of type phone number.", "tokens": [50928, 17301, 370, 300, 437, 311, 8752, 538, 341, 3170, 307, 746, 295, 2010, 2593, 1230, 13, 51222], "temperature": 0.0, "avg_logprob": -0.17197072623979928, "compression_ratio": 1.7975206611570247, "no_speech_prob": 0.054181817919015884}, {"id": 317, "seek": 144084, "start": 1458.0, "end": 1462.72, "text": " And the reason we can do this in a straightforward manner with the casting is because Java does", "tokens": [51222, 400, 264, 1778, 321, 393, 360, 341, 294, 257, 15325, 9060, 365, 264, 17301, 307, 570, 10745, 775, 51458], "temperature": 0.0, "avg_logprob": -0.17197072623979928, "compression_ratio": 1.7975206611570247, "no_speech_prob": 0.054181817919015884}, {"id": 318, "seek": 144084, "start": 1462.72, "end": 1470.12, "text": " support covariant return types as he states here, it is legal and desirable to do this", "tokens": [51458, 1406, 49851, 394, 2736, 3467, 382, 415, 4368, 510, 11, 309, 307, 5089, 293, 30533, 281, 360, 341, 51828], "temperature": 0.0, "avg_logprob": -0.17197072623979928, "compression_ratio": 1.7975206611570247, "no_speech_prob": 0.054181817919015884}, {"id": 319, "seek": 147012, "start": 1470.3999999999999, "end": 1473.8799999999999, "text": " because Java supports covariant return types.", "tokens": [50378, 570, 10745, 9346, 49851, 394, 2736, 3467, 13, 50552], "temperature": 0.0, "avg_logprob": -0.22045887600291858, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.08623258024454117}, {"id": 320, "seek": 147012, "start": 1473.8799999999999, "end": 1476.28, "text": " So what are covariant return types in Java?", "tokens": [50552, 407, 437, 366, 49851, 394, 2736, 3467, 294, 10745, 30, 50672], "temperature": 0.0, "avg_logprob": -0.22045887600291858, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.08623258024454117}, {"id": 321, "seek": 147012, "start": 1476.28, "end": 1481.2399999999998, "text": " Firstly, let's understand the theory behind the concept of covariance.", "tokens": [50672, 20042, 11, 718, 311, 1223, 264, 5261, 2261, 264, 3410, 295, 49851, 719, 13, 50920], "temperature": 0.0, "avg_logprob": -0.22045887600291858, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.08623258024454117}, {"id": 322, "seek": 147012, "start": 1481.2399999999998, "end": 1489.04, "text": " According to Baldung, covariance can be considered as a contract for how a subtype is accepted", "tokens": [50920, 7328, 281, 27306, 1063, 11, 49851, 719, 393, 312, 4888, 382, 257, 4364, 337, 577, 257, 1422, 20467, 307, 9035, 51310], "temperature": 0.0, "avg_logprob": -0.22045887600291858, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.08623258024454117}, {"id": 323, "seek": 147012, "start": 1489.04, "end": 1492.12, "text": " when only the super type is defined.", "tokens": [51310, 562, 787, 264, 1687, 2010, 307, 7642, 13, 51464], "temperature": 0.0, "avg_logprob": -0.22045887600291858, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.08623258024454117}, {"id": 324, "seek": 147012, "start": 1492.12, "end": 1498.08, "text": " And another definition is covariance means we can access specific elements defined by", "tokens": [51464, 400, 1071, 7123, 307, 49851, 719, 1355, 321, 393, 2105, 2685, 4959, 7642, 538, 51762], "temperature": 0.0, "avg_logprob": -0.22045887600291858, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.08623258024454117}, {"id": 325, "seek": 149808, "start": 1498.08, "end": 1499.08, "text": " the super type.", "tokens": [50364, 264, 1687, 2010, 13, 50414], "temperature": 0.0, "avg_logprob": -0.14529357637677873, "compression_ratio": 1.7555555555555555, "no_speech_prob": 0.019120346754789352}, {"id": 326, "seek": 149808, "start": 1499.08, "end": 1503.52, "text": " However, we aren't allowed to put elements into a covariant system since the compiler", "tokens": [50414, 2908, 11, 321, 3212, 380, 4350, 281, 829, 4959, 666, 257, 49851, 394, 1185, 1670, 264, 31958, 50636], "temperature": 0.0, "avg_logprob": -0.14529357637677873, "compression_ratio": 1.7555555555555555, "no_speech_prob": 0.019120346754789352}, {"id": 327, "seek": 149808, "start": 1503.52, "end": 1507.36, "text": " would fail to determine the actual type of the generic structure.", "tokens": [50636, 576, 3061, 281, 6997, 264, 3539, 2010, 295, 264, 19577, 3877, 13, 50828], "temperature": 0.0, "avg_logprob": -0.14529357637677873, "compression_ratio": 1.7555555555555555, "no_speech_prob": 0.019120346754789352}, {"id": 328, "seek": 149808, "start": 1507.36, "end": 1512.36, "text": " I know that's a bit too formal and abstract but simply what it means is a subclass can", "tokens": [50828, 286, 458, 300, 311, 257, 857, 886, 9860, 293, 12649, 457, 2935, 437, 309, 1355, 307, 257, 1422, 11665, 393, 51078], "temperature": 0.0, "avg_logprob": -0.14529357637677873, "compression_ratio": 1.7555555555555555, "no_speech_prob": 0.019120346754789352}, {"id": 329, "seek": 149808, "start": 1512.36, "end": 1514.32, "text": " override the methods of a superclass.", "tokens": [51078, 42321, 264, 7150, 295, 257, 1687, 11665, 13, 51176], "temperature": 0.0, "avg_logprob": -0.14529357637677873, "compression_ratio": 1.7555555555555555, "no_speech_prob": 0.019120346754789352}, {"id": 330, "seek": 149808, "start": 1514.32, "end": 1519.1999999999998, "text": " So in our case a phone number, phone number can override the method of the object class", "tokens": [51176, 407, 294, 527, 1389, 257, 2593, 1230, 11, 2593, 1230, 393, 42321, 264, 3170, 295, 264, 2657, 1508, 51420], "temperature": 0.0, "avg_logprob": -0.14529357637677873, "compression_ratio": 1.7555555555555555, "no_speech_prob": 0.019120346754789352}, {"id": 331, "seek": 149808, "start": 1519.1999999999998, "end": 1527.96, "text": " which is the clone method and afterwards when it returns it can return something or an object", "tokens": [51420, 597, 307, 264, 26506, 3170, 293, 10543, 562, 309, 11247, 309, 393, 2736, 746, 420, 364, 2657, 51858], "temperature": 0.0, "avg_logprob": -0.14529357637677873, "compression_ratio": 1.7555555555555555, "no_speech_prob": 0.019120346754789352}, {"id": 332, "seek": 152796, "start": 1527.96, "end": 1532.08, "text": " not something, an object of type of the subclass.", "tokens": [50364, 406, 746, 11, 364, 2657, 295, 2010, 295, 264, 1422, 11665, 13, 50570], "temperature": 0.0, "avg_logprob": -0.17679983255814533, "compression_ratio": 1.8762376237623761, "no_speech_prob": 0.001809923443943262}, {"id": 333, "seek": 152796, "start": 1532.08, "end": 1534.24, "text": " So it will not return.", "tokens": [50570, 407, 309, 486, 406, 2736, 13, 50678], "temperature": 0.0, "avg_logprob": -0.17679983255814533, "compression_ratio": 1.8762376237623761, "no_speech_prob": 0.001809923443943262}, {"id": 334, "seek": 152796, "start": 1534.24, "end": 1540.08, "text": " So the phone number clone method will not return an object of type object instead it", "tokens": [50678, 407, 264, 2593, 1230, 26506, 3170, 486, 406, 2736, 364, 2657, 295, 2010, 2657, 2602, 309, 50970], "temperature": 0.0, "avg_logprob": -0.17679983255814533, "compression_ratio": 1.8762376237623761, "no_speech_prob": 0.001809923443943262}, {"id": 335, "seek": 152796, "start": 1540.08, "end": 1542.52, "text": " will return an object of type phone number.", "tokens": [50970, 486, 2736, 364, 2657, 295, 2010, 2593, 1230, 13, 51092], "temperature": 0.0, "avg_logprob": -0.17679983255814533, "compression_ratio": 1.8762376237623761, "no_speech_prob": 0.001809923443943262}, {"id": 336, "seek": 152796, "start": 1542.52, "end": 1548.76, "text": " Now if we didn't have the idea of covariance and if Java didn't have covariant return types", "tokens": [51092, 823, 498, 321, 994, 380, 362, 264, 1558, 295, 49851, 719, 293, 498, 10745, 994, 380, 362, 49851, 394, 2736, 3467, 51404], "temperature": 0.0, "avg_logprob": -0.17679983255814533, "compression_ratio": 1.8762376237623761, "no_speech_prob": 0.001809923443943262}, {"id": 337, "seek": 152796, "start": 1548.76, "end": 1550.92, "text": " this would be the implementation necessary.", "tokens": [51404, 341, 576, 312, 264, 11420, 4818, 13, 51512], "temperature": 0.0, "avg_logprob": -0.17679983255814533, "compression_ratio": 1.8762376237623761, "no_speech_prob": 0.001809923443943262}, {"id": 338, "seek": 152796, "start": 1550.92, "end": 1552.92, "text": " We'll have to do the casting as a client.", "tokens": [51512, 492, 603, 362, 281, 360, 264, 17301, 382, 257, 6423, 13, 51612], "temperature": 0.0, "avg_logprob": -0.17679983255814533, "compression_ratio": 1.8762376237623761, "no_speech_prob": 0.001809923443943262}, {"id": 339, "seek": 155292, "start": 1552.92, "end": 1558.48, "text": " So when the client uses the phone number class and uses the clone method that we initially", "tokens": [50364, 407, 562, 264, 6423, 4960, 264, 2593, 1230, 1508, 293, 4960, 264, 26506, 3170, 300, 321, 9105, 50642], "temperature": 0.0, "avg_logprob": -0.1303006005041378, "compression_ratio": 1.722466960352423, "no_speech_prob": 0.03308092802762985}, {"id": 340, "seek": 155292, "start": 1558.48, "end": 1564.48, "text": " defined we will have to do the casting as a client and because of covariance this is", "tokens": [50642, 7642, 321, 486, 362, 281, 360, 264, 17301, 382, 257, 6423, 293, 570, 295, 49851, 719, 341, 307, 50942], "temperature": 0.0, "avg_logprob": -0.1303006005041378, "compression_ratio": 1.722466960352423, "no_speech_prob": 0.03308092802762985}, {"id": 341, "seek": 155292, "start": 1564.48, "end": 1566.04, "text": " not required.", "tokens": [50942, 406, 4739, 13, 51020], "temperature": 0.0, "avg_logprob": -0.1303006005041378, "compression_ratio": 1.722466960352423, "no_speech_prob": 0.03308092802762985}, {"id": 342, "seek": 155292, "start": 1566.04, "end": 1569.8000000000002, "text": " Simply that will suffice and work fine.", "tokens": [51020, 19596, 300, 486, 3889, 573, 293, 589, 2489, 13, 51208], "temperature": 0.0, "avg_logprob": -0.1303006005041378, "compression_ratio": 1.722466960352423, "no_speech_prob": 0.03308092802762985}, {"id": 343, "seek": 155292, "start": 1569.8000000000002, "end": 1573.0, "text": " So to further understand covariance so let's look at this demo.", "tokens": [51208, 407, 281, 3052, 1223, 49851, 719, 370, 718, 311, 574, 412, 341, 10723, 13, 51368], "temperature": 0.0, "avg_logprob": -0.1303006005041378, "compression_ratio": 1.722466960352423, "no_speech_prob": 0.03308092802762985}, {"id": 344, "seek": 155292, "start": 1573.0, "end": 1578.6000000000001, "text": " We have a class vehicle which starts an engine and then we have a class car that extends", "tokens": [51368, 492, 362, 257, 1508, 5864, 597, 3719, 364, 2848, 293, 550, 321, 362, 257, 1508, 1032, 300, 26448, 51648], "temperature": 0.0, "avg_logprob": -0.1303006005041378, "compression_ratio": 1.722466960352423, "no_speech_prob": 0.03308092802762985}, {"id": 345, "seek": 155292, "start": 1578.6000000000001, "end": 1579.6000000000001, "text": " vehicle.", "tokens": [51648, 5864, 13, 51698], "temperature": 0.0, "avg_logprob": -0.1303006005041378, "compression_ratio": 1.722466960352423, "no_speech_prob": 0.03308092802762985}, {"id": 346, "seek": 157960, "start": 1579.6, "end": 1585.52, "text": " We also have a class motorcycle that extends vehicle and these two have their own implementations", "tokens": [50364, 492, 611, 362, 257, 1508, 20554, 300, 26448, 5864, 293, 613, 732, 362, 641, 1065, 4445, 763, 50660], "temperature": 0.0, "avg_logprob": -0.14337497882628708, "compression_ratio": 1.8767772511848342, "no_speech_prob": 0.0015486922347918153}, {"id": 347, "seek": 157960, "start": 1585.52, "end": 1588.08, "text": " of the start engine method.", "tokens": [50660, 295, 264, 722, 2848, 3170, 13, 50788], "temperature": 0.0, "avg_logprob": -0.14337497882628708, "compression_ratio": 1.8767772511848342, "no_speech_prob": 0.0015486922347918153}, {"id": 348, "seek": 157960, "start": 1588.08, "end": 1593.04, "text": " Now if we run this code what you'll see is we're first starting the vehicles engine,", "tokens": [50788, 823, 498, 321, 1190, 341, 3089, 437, 291, 603, 536, 307, 321, 434, 700, 2891, 264, 8948, 2848, 11, 51036], "temperature": 0.0, "avg_logprob": -0.14337497882628708, "compression_ratio": 1.8767772511848342, "no_speech_prob": 0.0015486922347918153}, {"id": 349, "seek": 157960, "start": 1593.04, "end": 1597.52, "text": " the superclasses engine and then we're starting the cars engine and the motorcycles engine.", "tokens": [51036, 264, 1687, 11665, 279, 2848, 293, 550, 321, 434, 2891, 264, 5163, 2848, 293, 264, 46813, 2848, 13, 51260], "temperature": 0.0, "avg_logprob": -0.14337497882628708, "compression_ratio": 1.8767772511848342, "no_speech_prob": 0.0015486922347918153}, {"id": 350, "seek": 157960, "start": 1597.52, "end": 1604.7199999999998, "text": " So in starting this engine the objects return even though we're calling the same start method", "tokens": [51260, 407, 294, 2891, 341, 2848, 264, 6565, 2736, 754, 1673, 321, 434, 5141, 264, 912, 722, 3170, 51620], "temperature": 0.0, "avg_logprob": -0.14337497882628708, "compression_ratio": 1.8767772511848342, "no_speech_prob": 0.0015486922347918153}, {"id": 351, "seek": 160472, "start": 1604.72, "end": 1609.32, "text": " and the overriding is taking place in the subclasses.", "tokens": [50364, 293, 264, 670, 81, 2819, 307, 1940, 1081, 294, 264, 1422, 11665, 279, 13, 50594], "temperature": 0.0, "avg_logprob": -0.20292984709447745, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.4260532557964325}, {"id": 352, "seek": 160472, "start": 1609.32, "end": 1616.0, "text": " The return type is of type this which means it can return an object of type car or in", "tokens": [50594, 440, 2736, 2010, 307, 295, 2010, 341, 597, 1355, 309, 393, 2736, 364, 2657, 295, 2010, 1032, 420, 294, 50928], "temperature": 0.0, "avg_logprob": -0.20292984709447745, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.4260532557964325}, {"id": 353, "seek": 160472, "start": 1616.0, "end": 1622.3600000000001, "text": " this case an object of type motorcycle and over here no casting is necessary.", "tokens": [50928, 341, 1389, 364, 2657, 295, 2010, 20554, 293, 670, 510, 572, 17301, 307, 4818, 13, 51246], "temperature": 0.0, "avg_logprob": -0.20292984709447745, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.4260532557964325}, {"id": 354, "seek": 160472, "start": 1622.3600000000001, "end": 1627.84, "text": " For example over here if we do this, this would be redundant and the compiler would", "tokens": [51246, 1171, 1365, 670, 510, 498, 321, 360, 341, 11, 341, 576, 312, 40997, 293, 264, 31958, 576, 51520], "temperature": 0.0, "avg_logprob": -0.20292984709447745, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.4260532557964325}, {"id": 355, "seek": 160472, "start": 1627.84, "end": 1632.72, "text": " say what are you doing mate, it'll in fact throw an error, sorry I wouldn't throw an", "tokens": [51520, 584, 437, 366, 291, 884, 11709, 11, 309, 603, 294, 1186, 3507, 364, 6713, 11, 2597, 286, 2759, 380, 3507, 364, 51764], "temperature": 0.0, "avg_logprob": -0.20292984709447745, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.4260532557964325}, {"id": 356, "seek": 163272, "start": 1632.72, "end": 1638.28, "text": " error, I'm just being silly, it would show that it's redundant, it's useless.", "tokens": [50364, 6713, 11, 286, 478, 445, 885, 11774, 11, 309, 576, 855, 300, 309, 311, 40997, 11, 309, 311, 14115, 13, 50642], "temperature": 0.0, "avg_logprob": -0.1757481892903646, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.10371014475822449}, {"id": 357, "seek": 163272, "start": 1638.28, "end": 1640.88, "text": " So remove redundant cast because you don't need to do that casting.", "tokens": [50642, 407, 4159, 40997, 4193, 570, 291, 500, 380, 643, 281, 360, 300, 17301, 13, 50772], "temperature": 0.0, "avg_logprob": -0.1757481892903646, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.10371014475822449}, {"id": 358, "seek": 163272, "start": 1640.88, "end": 1645.44, "text": " So the next point is the clone not support exception should have been an unchecked runtime", "tokens": [50772, 407, 264, 958, 935, 307, 264, 26506, 406, 1406, 11183, 820, 362, 668, 364, 46672, 292, 34474, 51000], "temperature": 0.0, "avg_logprob": -0.1757481892903646, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.10371014475822449}, {"id": 359, "seek": 163272, "start": 1645.44, "end": 1646.44, "text": " exception.", "tokens": [51000, 11183, 13, 51050], "temperature": 0.0, "avg_logprob": -0.1757481892903646, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.10371014475822449}, {"id": 360, "seek": 163272, "start": 1646.44, "end": 1651.64, "text": " Now I think I did discuss this in the beginning of the video but here's the problem.", "tokens": [51050, 823, 286, 519, 286, 630, 2248, 341, 294, 264, 2863, 295, 264, 960, 457, 510, 311, 264, 1154, 13, 51310], "temperature": 0.0, "avg_logprob": -0.1757481892903646, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.10371014475822449}, {"id": 361, "seek": 163272, "start": 1651.64, "end": 1654.24, "text": " So firstly let me read from the book.", "tokens": [51310, 407, 27376, 718, 385, 1401, 490, 264, 1446, 13, 51440], "temperature": 0.0, "avg_logprob": -0.1757481892903646, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.10371014475822449}, {"id": 362, "seek": 163272, "start": 1654.24, "end": 1658.46, "text": " The code to support our clone is contained in a try catch block.", "tokens": [51440, 440, 3089, 281, 1406, 527, 26506, 307, 16212, 294, 257, 853, 3745, 3461, 13, 51651], "temperature": 0.0, "avg_logprob": -0.1757481892903646, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.10371014475822449}, {"id": 363, "seek": 165846, "start": 1658.46, "end": 1666.0, "text": " This is because object declares its clone method to throw clone not support exception", "tokens": [50364, 639, 307, 570, 2657, 979, 19415, 1080, 26506, 3170, 281, 3507, 26506, 406, 1406, 11183, 50741], "temperature": 0.0, "avg_logprob": -0.17060592610348937, "compression_ratio": 1.9027777777777777, "no_speech_prob": 0.0017545429291203618}, {"id": 364, "seek": 165846, "start": 1666.0, "end": 1669.1000000000001, "text": " which is a checked exception.", "tokens": [50741, 597, 307, 257, 10033, 11183, 13, 50896], "temperature": 0.0, "avg_logprob": -0.17060592610348937, "compression_ratio": 1.9027777777777777, "no_speech_prob": 0.0017545429291203618}, {"id": 365, "seek": 165846, "start": 1669.1000000000001, "end": 1673.06, "text": " Because phone number implements cloneable we know the code to support our clone will", "tokens": [50896, 1436, 2593, 1230, 704, 17988, 26506, 712, 321, 458, 264, 3089, 281, 1406, 527, 26506, 486, 51094], "temperature": 0.0, "avg_logprob": -0.17060592610348937, "compression_ratio": 1.9027777777777777, "no_speech_prob": 0.0017545429291203618}, {"id": 366, "seek": 165846, "start": 1673.06, "end": 1674.06, "text": " succeed.", "tokens": [51094, 7754, 13, 51144], "temperature": 0.0, "avg_logprob": -0.17060592610348937, "compression_ratio": 1.9027777777777777, "no_speech_prob": 0.0017545429291203618}, {"id": 367, "seek": 165846, "start": 1674.06, "end": 1679.26, "text": " The need for this boilerplate code indicates that clone not support exception should have", "tokens": [51144, 440, 643, 337, 341, 39228, 37008, 3089, 16203, 300, 26506, 406, 1406, 11183, 820, 362, 51404], "temperature": 0.0, "avg_logprob": -0.17060592610348937, "compression_ratio": 1.9027777777777777, "no_speech_prob": 0.0017545429291203618}, {"id": 368, "seek": 165846, "start": 1679.26, "end": 1681.78, "text": " been unchecked.", "tokens": [51404, 668, 46672, 292, 13, 51530], "temperature": 0.0, "avg_logprob": -0.17060592610348937, "compression_ratio": 1.9027777777777777, "no_speech_prob": 0.0017545429291203618}, {"id": 369, "seek": 165846, "start": 1681.78, "end": 1685.54, "text": " So the problem is because we know across that implements a clone method it's going to implement", "tokens": [51530, 407, 264, 1154, 307, 570, 321, 458, 2108, 300, 704, 17988, 257, 26506, 3170, 309, 311, 516, 281, 4445, 51718], "temperature": 0.0, "avg_logprob": -0.17060592610348937, "compression_ratio": 1.9027777777777777, "no_speech_prob": 0.0017545429291203618}, {"id": 370, "seek": 168554, "start": 1685.54, "end": 1691.06, "text": " the cloneable interface the checked exception won't be thrown which makes this code here", "tokens": [50364, 264, 26506, 712, 9226, 264, 10033, 11183, 1582, 380, 312, 11732, 597, 1669, 341, 3089, 510, 50640], "temperature": 0.0, "avg_logprob": -0.18878573815799454, "compression_ratio": 1.6603053435114503, "no_speech_prob": 0.08880004286766052}, {"id": 371, "seek": 168554, "start": 1691.06, "end": 1695.98, "text": " the try catch block superfluous redundant code and it's unnecessary.", "tokens": [50640, 264, 853, 3745, 3461, 1687, 49253, 563, 40997, 3089, 293, 309, 311, 19350, 13, 50886], "temperature": 0.0, "avg_logprob": -0.18878573815799454, "compression_ratio": 1.6603053435114503, "no_speech_prob": 0.08880004286766052}, {"id": 372, "seek": 168554, "start": 1695.98, "end": 1700.02, "text": " Okay now what we're going to try and do is look at the stack class so a bit more high", "tokens": [50886, 1033, 586, 437, 321, 434, 516, 281, 853, 293, 360, 307, 574, 412, 264, 8630, 1508, 370, 257, 857, 544, 1090, 51088], "temperature": 0.0, "avg_logprob": -0.18878573815799454, "compression_ratio": 1.6603053435114503, "no_speech_prob": 0.08880004286766052}, {"id": 373, "seek": 168554, "start": 1700.02, "end": 1705.1399999999999, "text": " level view at how the clone method is implemented and the stack class is defined well it was", "tokens": [51088, 1496, 1910, 412, 577, 264, 26506, 3170, 307, 12270, 293, 264, 8630, 1508, 307, 7642, 731, 309, 390, 51344], "temperature": 0.0, "avg_logprob": -0.18878573815799454, "compression_ratio": 1.6603053435114503, "no_speech_prob": 0.08880004286766052}, {"id": 374, "seek": 168554, "start": 1705.1399999999999, "end": 1712.18, "text": " initially defined in item 7 but we've repurposed it to fit to item 13 and this is really important", "tokens": [51344, 9105, 7642, 294, 3174, 1614, 457, 321, 600, 1085, 20130, 1744, 309, 281, 3318, 281, 3174, 3705, 293, 341, 307, 534, 1021, 51696], "temperature": 0.0, "avg_logprob": -0.18878573815799454, "compression_ratio": 1.6603053435114503, "no_speech_prob": 0.08880004286766052}, {"id": 375, "seek": 171218, "start": 1712.18, "end": 1717.5, "text": " because here's why really we need to consider this point as to how do we deal with object", "tokens": [50364, 570, 510, 311, 983, 534, 321, 643, 281, 1949, 341, 935, 382, 281, 577, 360, 321, 2028, 365, 2657, 50630], "temperature": 0.0, "avg_logprob": -0.17852825588650173, "compression_ratio": 1.9682539682539681, "no_speech_prob": 0.2656170129776001}, {"id": 376, "seek": 171218, "start": 1717.5, "end": 1722.98, "text": " fields or class fields that refer to mutable objects because a simple clone implementation", "tokens": [50630, 7909, 420, 1508, 7909, 300, 2864, 281, 5839, 712, 6565, 570, 257, 2199, 26506, 11420, 50904], "temperature": 0.0, "avg_logprob": -0.17852825588650173, "compression_ratio": 1.9682539682539681, "no_speech_prob": 0.2656170129776001}, {"id": 377, "seek": 171218, "start": 1722.98, "end": 1729.38, "text": " won't work for such cases such as why in our classes we need to override the clone implementation", "tokens": [50904, 1582, 380, 589, 337, 1270, 3331, 1270, 382, 983, 294, 527, 5359, 321, 643, 281, 42321, 264, 26506, 11420, 51224], "temperature": 0.0, "avg_logprob": -0.17852825588650173, "compression_ratio": 1.9682539682539681, "no_speech_prob": 0.2656170129776001}, {"id": 378, "seek": 171218, "start": 1729.38, "end": 1739.22, "text": " of object specially for fields that are mutable or fields that refer to mutable fields pardon", "tokens": [51224, 295, 2657, 22549, 337, 7909, 300, 366, 5839, 712, 420, 7909, 300, 2864, 281, 5839, 712, 7909, 22440, 51716], "temperature": 0.0, "avg_logprob": -0.17852825588650173, "compression_ratio": 1.9682539682539681, "no_speech_prob": 0.2656170129776001}, {"id": 379, "seek": 173922, "start": 1739.22, "end": 1745.58, "text": " me not mutable fields are mutable objects or data structures and in this case the again", "tokens": [50364, 385, 406, 5839, 712, 7909, 366, 5839, 712, 6565, 420, 1412, 9227, 293, 294, 341, 1389, 264, 797, 50682], "temperature": 0.0, "avg_logprob": -0.172564671589778, "compression_ratio": 1.8512396694214877, "no_speech_prob": 0.45615828037261963}, {"id": 380, "seek": 173922, "start": 1745.58, "end": 1751.5, "text": " that perhaps a quintessential example would be an array for an array we need to recursively", "tokens": [50682, 300, 4317, 257, 40006, 48143, 1365, 576, 312, 364, 10225, 337, 364, 10225, 321, 643, 281, 20560, 3413, 50978], "temperature": 0.0, "avg_logprob": -0.172564671589778, "compression_ratio": 1.8512396694214877, "no_speech_prob": 0.45615828037261963}, {"id": 381, "seek": 173922, "start": 1751.5, "end": 1756.8600000000001, "text": " copy all the elements of the mutable field like an array to solve the problem of destroying", "tokens": [50978, 5055, 439, 264, 4959, 295, 264, 5839, 712, 2519, 411, 364, 10225, 281, 5039, 264, 1154, 295, 19926, 51246], "temperature": 0.0, "avg_logprob": -0.172564671589778, "compression_ratio": 1.8512396694214877, "no_speech_prob": 0.45615828037261963}, {"id": 382, "seek": 173922, "start": 1756.8600000000001, "end": 1762.02, "text": " or destroy invariants we don't have we don't want to have arrays in two different states", "tokens": [51246, 420, 5293, 33270, 1719, 321, 500, 380, 362, 321, 500, 380, 528, 281, 362, 41011, 294, 732, 819, 4368, 51504], "temperature": 0.0, "avg_logprob": -0.172564671589778, "compression_ratio": 1.8512396694214877, "no_speech_prob": 0.45615828037261963}, {"id": 383, "seek": 173922, "start": 1762.02, "end": 1766.6200000000001, "text": " where we have two objects so we have object A and an object B that was copied of object", "tokens": [51504, 689, 321, 362, 732, 6565, 370, 321, 362, 2657, 316, 293, 364, 2657, 363, 300, 390, 25365, 295, 2657, 51734], "temperature": 0.0, "avg_logprob": -0.172564671589778, "compression_ratio": 1.8512396694214877, "no_speech_prob": 0.45615828037261963}, {"id": 384, "seek": 176662, "start": 1766.62, "end": 1772.4599999999998, "text": " A both pointed to the same array that could create corrupt states and that's what we see", "tokens": [50364, 316, 1293, 10932, 281, 264, 912, 10225, 300, 727, 1884, 17366, 4368, 293, 300, 311, 437, 321, 536, 50656], "temperature": 0.0, "avg_logprob": -0.12792761929063912, "compression_ratio": 1.722488038277512, "no_speech_prob": 0.1224469244480133}, {"id": 385, "seek": 176662, "start": 1772.4599999999998, "end": 1779.26, "text": " in this stack class so this is fine this integer size is fine this is fine especially because", "tokens": [50656, 294, 341, 8630, 1508, 370, 341, 307, 2489, 341, 24922, 2744, 307, 2489, 341, 307, 2489, 2318, 570, 50996], "temperature": 0.0, "avg_logprob": -0.12792761929063912, "compression_ratio": 1.722488038277512, "no_speech_prob": 0.1224469244480133}, {"id": 386, "seek": 176662, "start": 1779.26, "end": 1787.3, "text": " it's final however the objects object array called elements this in our clone method", "tokens": [50996, 309, 311, 2572, 4461, 264, 6565, 2657, 10225, 1219, 4959, 341, 294, 527, 26506, 3170, 51398], "temperature": 0.0, "avg_logprob": -0.12792761929063912, "compression_ratio": 1.722488038277512, "no_speech_prob": 0.1224469244480133}, {"id": 387, "seek": 176662, "start": 1787.3, "end": 1792.3799999999999, "text": " we need to change it up a bit so as you can see here we are firstly doing the normal cloning", "tokens": [51398, 321, 643, 281, 1319, 309, 493, 257, 857, 370, 382, 291, 393, 536, 510, 321, 366, 27376, 884, 264, 2710, 596, 16638, 51652], "temperature": 0.0, "avg_logprob": -0.12792761929063912, "compression_ratio": 1.722488038277512, "no_speech_prob": 0.1224469244480133}, {"id": 388, "seek": 179238, "start": 1792.46, "end": 1799.5800000000002, "text": " in the super dot clone and then we're specifically cloning all the elements recursively in elements", "tokens": [50368, 294, 264, 1687, 5893, 26506, 293, 550, 321, 434, 4682, 596, 16638, 439, 264, 4959, 20560, 3413, 294, 4959, 50724], "temperature": 0.0, "avg_logprob": -0.12467844407637041, "compression_ratio": 1.849056603773585, "no_speech_prob": 0.09530303627252579}, {"id": 389, "seek": 179238, "start": 1800.6200000000001, "end": 1806.14, "text": " and then setting it to result so the new object dot elements and then returning that so what we", "tokens": [50776, 293, 550, 3287, 309, 281, 1874, 370, 264, 777, 2657, 5893, 4959, 293, 550, 12678, 300, 370, 437, 321, 51052], "temperature": 0.0, "avg_logprob": -0.12467844407637041, "compression_ratio": 1.849056603773585, "no_speech_prob": 0.09530303627252579}, {"id": 390, "seek": 179238, "start": 1806.14, "end": 1812.46, "text": " do here is we in fact create two array instances so to reiterate that point I think it's important", "tokens": [51052, 360, 510, 307, 321, 294, 1186, 1884, 732, 10225, 14519, 370, 281, 33528, 300, 935, 286, 519, 309, 311, 1021, 51368], "temperature": 0.0, "avg_logprob": -0.12467844407637041, "compression_ratio": 1.849056603773585, "no_speech_prob": 0.09530303627252579}, {"id": 391, "seek": 179238, "start": 1812.46, "end": 1820.46, "text": " because he's in this part of this item this is the take home point is that when we do the cloning", "tokens": [51368, 570, 415, 311, 294, 341, 644, 295, 341, 3174, 341, 307, 264, 747, 1280, 935, 307, 300, 562, 321, 360, 264, 596, 16638, 51768], "temperature": 0.0, "avg_logprob": -0.12467844407637041, "compression_ratio": 1.849056603773585, "no_speech_prob": 0.09530303627252579}, {"id": 392, "seek": 182046, "start": 1820.46, "end": 1828.06, "text": " it can't just be a dumb clone of all the fields a field for field clone if there are let's say", "tokens": [50364, 309, 393, 380, 445, 312, 257, 10316, 26506, 295, 439, 264, 7909, 257, 2519, 337, 2519, 26506, 498, 456, 366, 718, 311, 584, 50744], "temperature": 0.0, "avg_logprob": -0.08952661391791947, "compression_ratio": 1.8849206349206349, "no_speech_prob": 0.0025505481753498316}, {"id": 393, "seek": 182046, "start": 1828.06, "end": 1833.18, "text": " things like arrays which point to other immutable objects because what's going to happen then then", "tokens": [50744, 721, 411, 41011, 597, 935, 281, 661, 3397, 32148, 6565, 570, 437, 311, 516, 281, 1051, 550, 550, 51000], "temperature": 0.0, "avg_logprob": -0.08952661391791947, "compression_ratio": 1.8849206349206349, "no_speech_prob": 0.0025505481753498316}, {"id": 394, "seek": 182046, "start": 1833.18, "end": 1837.5, "text": " is we're going to destroy the invariance of this clone method where both objects are going to point", "tokens": [51000, 307, 321, 434, 516, 281, 5293, 264, 33270, 719, 295, 341, 26506, 3170, 689, 1293, 6565, 366, 516, 281, 935, 51216], "temperature": 0.0, "avg_logprob": -0.08952661391791947, "compression_ratio": 1.8849206349206349, "no_speech_prob": 0.0025505481753498316}, {"id": 395, "seek": 182046, "start": 1837.5, "end": 1843.42, "text": " to the same array and that's going to corrupt that array where as clients use these objects it'll", "tokens": [51216, 281, 264, 912, 10225, 293, 300, 311, 516, 281, 17366, 300, 10225, 689, 382, 6982, 764, 613, 6565, 309, 603, 51512], "temperature": 0.0, "avg_logprob": -0.08952661391791947, "compression_ratio": 1.8849206349206349, "no_speech_prob": 0.0025505481753498316}, {"id": 396, "seek": 182046, "start": 1843.42, "end": 1849.1000000000001, "text": " either throw not point exceptions or give nonsensical results and this situation as", "tokens": [51512, 2139, 3507, 406, 935, 22847, 420, 976, 297, 892, 694, 804, 3542, 293, 341, 2590, 382, 51796], "temperature": 0.0, "avg_logprob": -0.08952661391791947, "compression_ratio": 1.8849206349206349, "no_speech_prob": 0.0025505481753498316}, {"id": 397, "seek": 184910, "start": 1849.1799999999998, "end": 1853.1, "text": " Joshua block I said earlier which I will read will not happen in a constructor clone method in", "tokens": [50368, 24005, 3461, 286, 848, 3071, 597, 286, 486, 1401, 486, 406, 1051, 294, 257, 47479, 26506, 3170, 294, 50564], "temperature": 0.0, "avg_logprob": -0.10608188922588642, "compression_ratio": 1.967479674796748, "no_speech_prob": 0.022968877106904984}, {"id": 398, "seek": 184910, "start": 1853.1, "end": 1857.74, "text": " many ways acts like a constructor because it's really constructing a new object now this thing", "tokens": [50564, 867, 2098, 10672, 411, 257, 47479, 570, 309, 311, 534, 39969, 257, 777, 2657, 586, 341, 551, 50796], "temperature": 0.0, "avg_logprob": -0.10608188922588642, "compression_ratio": 1.967479674796748, "no_speech_prob": 0.022968877106904984}, {"id": 399, "seek": 184910, "start": 1857.74, "end": 1862.78, "text": " we've defined here will not happen in a typical constructor because we aren't copying things across", "tokens": [50796, 321, 600, 7642, 510, 486, 406, 1051, 294, 257, 7476, 47479, 570, 321, 3212, 380, 27976, 721, 2108, 51048], "temperature": 0.0, "avg_logprob": -0.10608188922588642, "compression_ratio": 1.967479674796748, "no_speech_prob": 0.022968877106904984}, {"id": 400, "seek": 184910, "start": 1862.78, "end": 1868.62, "text": " in a constructor which is why Joshua block states this situation by the way I shouldn't say this", "tokens": [51048, 294, 257, 47479, 597, 307, 983, 24005, 3461, 4368, 341, 2590, 538, 264, 636, 286, 4659, 380, 584, 341, 51340], "temperature": 0.0, "avg_logprob": -0.10608188922588642, "compression_ratio": 1.967479674796748, "no_speech_prob": 0.022968877106904984}, {"id": 401, "seek": 184910, "start": 1868.62, "end": 1874.6999999999998, "text": " situation here because what we've done here is correct in fact let's say hypothetically we didn't", "tokens": [51340, 2590, 510, 570, 437, 321, 600, 1096, 510, 307, 3006, 294, 1186, 718, 311, 584, 24371, 22652, 321, 994, 380, 51644], "temperature": 0.0, "avg_logprob": -0.10608188922588642, "compression_ratio": 1.967479674796748, "no_speech_prob": 0.022968877106904984}, {"id": 402, "seek": 187470, "start": 1874.7, "end": 1879.5800000000002, "text": " do this now this would destroy the invariance of this clone method but here this is correct", "tokens": [50364, 360, 341, 586, 341, 576, 5293, 264, 33270, 719, 295, 341, 26506, 3170, 457, 510, 341, 307, 3006, 50608], "temperature": 0.0, "avg_logprob": -0.040559262764163134, "compression_ratio": 1.8293838862559242, "no_speech_prob": 0.028862513601779938}, {"id": 403, "seek": 187470, "start": 1881.02, "end": 1887.5, "text": " so this is not bad code anyways continue this situation could never occur as a result of calling", "tokens": [50680, 370, 341, 307, 406, 1578, 3089, 13448, 2354, 341, 2590, 727, 1128, 5160, 382, 257, 1874, 295, 5141, 51004], "temperature": 0.0, "avg_logprob": -0.040559262764163134, "compression_ratio": 1.8293838862559242, "no_speech_prob": 0.028862513601779938}, {"id": 404, "seek": 187470, "start": 1887.5, "end": 1894.06, "text": " the sole constructor in the stack class in effect the clone method functions as a constructor you", "tokens": [51004, 264, 12321, 47479, 294, 264, 8630, 1508, 294, 1802, 264, 26506, 3170, 6828, 382, 257, 47479, 291, 51332], "temperature": 0.0, "avg_logprob": -0.040559262764163134, "compression_ratio": 1.8293838862559242, "no_speech_prob": 0.028862513601779938}, {"id": 405, "seek": 187470, "start": 1894.06, "end": 1900.14, "text": " must ensure that it does no harm to the original object and that it properly establishes invariance", "tokens": [51332, 1633, 5586, 300, 309, 775, 572, 6491, 281, 264, 3380, 2657, 293, 300, 309, 6108, 8327, 279, 33270, 719, 51636], "temperature": 0.0, "avg_logprob": -0.040559262764163134, "compression_ratio": 1.8293838862559242, "no_speech_prob": 0.028862513601779938}, {"id": 406, "seek": 190014, "start": 1900.14, "end": 1907.42, "text": " on the clone so yes if we didn't do this what will happen is we'll have object a and then object b", "tokens": [50364, 322, 264, 26506, 370, 2086, 498, 321, 994, 380, 360, 341, 437, 486, 1051, 307, 321, 603, 362, 2657, 257, 293, 550, 2657, 272, 50728], "temperature": 0.0, "avg_logprob": -0.0791768668800272, "compression_ratio": 1.835680751173709, "no_speech_prob": 0.04023132473230362}, {"id": 407, "seek": 190014, "start": 1907.42, "end": 1913.5, "text": " cloned off object a and then if someone messes around with object b in the the elements array", "tokens": [50728, 596, 19009, 766, 2657, 257, 293, 550, 498, 1580, 2082, 279, 926, 365, 2657, 272, 294, 264, 264, 4959, 10225, 51032], "temperature": 0.0, "avg_logprob": -0.0791768668800272, "compression_ratio": 1.835680751173709, "no_speech_prob": 0.04023132473230362}, {"id": 408, "seek": 190014, "start": 1913.5, "end": 1918.94, "text": " then object a will also be affected because they are both pointing to the same array and that's", "tokens": [51032, 550, 2657, 257, 486, 611, 312, 8028, 570, 436, 366, 1293, 12166, 281, 264, 912, 10225, 293, 300, 311, 51304], "temperature": 0.0, "avg_logprob": -0.0791768668800272, "compression_ratio": 1.835680751173709, "no_speech_prob": 0.04023132473230362}, {"id": 409, "seek": 190014, "start": 1918.94, "end": 1925.3400000000001, "text": " the problem we're trying to solve here really if if you get this point from this whole video elaborate", "tokens": [51304, 264, 1154, 321, 434, 1382, 281, 5039, 510, 534, 498, 498, 291, 483, 341, 935, 490, 341, 1379, 960, 20945, 51624], "temperature": 0.0, "avg_logprob": -0.0791768668800272, "compression_ratio": 1.835680751173709, "no_speech_prob": 0.04023132473230362}, {"id": 410, "seek": 192534, "start": 1925.34, "end": 1931.1, "text": " video you get this part of what i'm trying to convey here and then to end this part of the item a", "tokens": [50364, 960, 291, 483, 341, 644, 295, 437, 741, 478, 1382, 281, 16965, 510, 293, 550, 281, 917, 341, 644, 295, 264, 3174, 257, 50652], "temperature": 0.0, "avg_logprob": -0.10574007034301758, "compression_ratio": 1.8653846153846154, "no_speech_prob": 0.05747859179973602}, {"id": 411, "seek": 192534, "start": 1931.1, "end": 1936.62, "text": " few note of bennets the first one is you probably noticed we aren't doing any casting like this", "tokens": [50652, 1326, 3637, 295, 272, 1857, 1385, 264, 700, 472, 307, 291, 1391, 5694, 321, 3212, 380, 884, 604, 17301, 411, 341, 50928], "temperature": 0.0, "avg_logprob": -0.10574007034301758, "compression_ratio": 1.8653846153846154, "no_speech_prob": 0.05747859179973602}, {"id": 412, "seek": 192534, "start": 1936.62, "end": 1942.9399999999998, "text": " in this clone method it's not required because in fact this is the only time really uh it's", "tokens": [50928, 294, 341, 26506, 3170, 309, 311, 406, 4739, 570, 294, 1186, 341, 307, 264, 787, 565, 534, 2232, 309, 311, 51244], "temperature": 0.0, "avg_logprob": -0.10574007034301758, "compression_ratio": 1.8653846153846154, "no_speech_prob": 0.05747859179973602}, {"id": 413, "seek": 192534, "start": 1942.9399999999998, "end": 1949.1799999999998, "text": " ideal to simply for an array when i mean the only time it's ideal to use uh the clone method directly", "tokens": [51244, 7157, 281, 2935, 337, 364, 10225, 562, 741, 914, 264, 787, 565, 309, 311, 7157, 281, 764, 2232, 264, 26506, 3170, 3838, 51556], "temperature": 0.0, "avg_logprob": -0.10574007034301758, "compression_ratio": 1.8653846153846154, "no_speech_prob": 0.05747859179973602}, {"id": 414, "seek": 192534, "start": 1949.1799999999998, "end": 1954.86, "text": " in the superclass object the Joshua block states calling clone on an array returns an array whose", "tokens": [51556, 294, 264, 1687, 11665, 2657, 264, 24005, 3461, 4368, 5141, 26506, 322, 364, 10225, 11247, 364, 10225, 6104, 51840], "temperature": 0.0, "avg_logprob": -0.10574007034301758, "compression_ratio": 1.8653846153846154, "no_speech_prob": 0.05747859179973602}, {"id": 415, "seek": 195486, "start": 1954.86, "end": 1962.2199999999998, "text": " runtime and compile time types are identical to those of the array being cloned this is the preferred", "tokens": [50364, 34474, 293, 31413, 565, 3467, 366, 14800, 281, 729, 295, 264, 10225, 885, 596, 19009, 341, 307, 264, 16494, 50732], "temperature": 0.0, "avg_logprob": -0.07343328793843587, "compression_ratio": 1.7927927927927927, "no_speech_prob": 0.0027572140097618103}, {"id": 416, "seek": 195486, "start": 1962.2199999999998, "end": 1968.62, "text": " idiom to duplicate an array in fact in fact arrays are the sole compelling use of the clone facility", "tokens": [50732, 18014, 298, 281, 23976, 364, 10225, 294, 1186, 294, 1186, 41011, 366, 264, 12321, 20050, 764, 295, 264, 26506, 8973, 51052], "temperature": 0.0, "avg_logprob": -0.07343328793843587, "compression_ratio": 1.7927927927927927, "no_speech_prob": 0.0027572140097618103}, {"id": 417, "seek": 195486, "start": 1968.62, "end": 1974.4599999999998, "text": " and the other point is recursively calling the clone method will not work for final fields for", "tokens": [51052, 293, 264, 661, 935, 307, 20560, 3413, 5141, 264, 26506, 3170, 486, 406, 589, 337, 2572, 7909, 337, 51344], "temperature": 0.0, "avg_logprob": -0.07343328793843587, "compression_ratio": 1.7927927927927927, "no_speech_prob": 0.0027572140097618103}, {"id": 418, "seek": 195486, "start": 1974.4599999999998, "end": 1982.6999999999998, "text": " example if let's say uh private final object element so if we go here and if we set this to be final", "tokens": [51344, 1365, 498, 718, 311, 584, 2232, 4551, 2572, 2657, 4478, 370, 498, 321, 352, 510, 293, 498, 321, 992, 341, 281, 312, 2572, 51756], "temperature": 0.0, "avg_logprob": -0.07343328793843587, "compression_ratio": 1.7927927927927927, "no_speech_prob": 0.0027572140097618103}, {"id": 419, "seek": 198270, "start": 1983.18, "end": 1988.38, "text": " you'll see an array is going to be thrown here because you can't override the values uh in a final", "tokens": [50388, 291, 603, 536, 364, 10225, 307, 516, 281, 312, 11732, 510, 570, 291, 393, 380, 42321, 264, 4190, 2232, 294, 257, 2572, 50648], "temperature": 0.0, "avg_logprob": -0.21443758728683635, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.0036491004284471273}, {"id": 420, "seek": 198270, "start": 1988.38, "end": 1995.42, "text": " field uh or overwrite all the values the memory instance in a final field and that's because", "tokens": [50648, 2519, 2232, 420, 670, 21561, 439, 264, 4190, 264, 4675, 5197, 294, 257, 2572, 2519, 293, 300, 311, 570, 51000], "temperature": 0.0, "avg_logprob": -0.21443758728683635, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.0036491004284471273}, {"id": 421, "seek": 198270, "start": 1995.42, "end": 2001.5800000000002, "text": " uh as Chajipiti states in order to create a proper deep clone you must create a new instance of the", "tokens": [51000, 2232, 382, 761, 1805, 647, 8707, 4368, 294, 1668, 281, 1884, 257, 2296, 2452, 26506, 291, 1633, 1884, 257, 777, 5197, 295, 264, 51308], "temperature": 0.0, "avg_logprob": -0.21443758728683635, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.0036491004284471273}, {"id": 422, "seek": 198270, "start": 2001.5800000000002, "end": 2007.02, "text": " mutable object and assign it to the field in the clone object however with a final field you", "tokens": [51308, 5839, 712, 2657, 293, 6269, 309, 281, 264, 2519, 294, 264, 26506, 2657, 4461, 365, 257, 2572, 2519, 291, 51580], "temperature": 0.0, "avg_logprob": -0.21443758728683635, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.0036491004284471273}, {"id": 423, "seek": 200702, "start": 2007.74, "end": 2013.42, "text": " can't reassign a new value after initialization which can lead to incorrect behavior or shared", "tokens": [50400, 393, 380, 19486, 788, 257, 777, 2158, 934, 5883, 2144, 597, 393, 1477, 281, 18424, 5223, 420, 5507, 50684], "temperature": 0.0, "avg_logprob": -0.08318940719755569, "compression_ratio": 1.83203125, "no_speech_prob": 0.021278567612171173}, {"id": 424, "seek": 200702, "start": 2013.42, "end": 2019.9, "text": " state between the original object and it's cloned and then to end this part of the video this is a", "tokens": [50684, 1785, 1296, 264, 3380, 2657, 293, 309, 311, 596, 19009, 293, 550, 281, 917, 341, 644, 295, 264, 960, 341, 307, 257, 51008], "temperature": 0.0, "avg_logprob": -0.08318940719755569, "compression_ratio": 1.83203125, "no_speech_prob": 0.021278567612171173}, {"id": 425, "seek": 200702, "start": 2019.9, "end": 2026.7, "text": " fundamental problem like serialization uh in the cloneable architecture because the cloneable", "tokens": [51008, 8088, 1154, 411, 17436, 2144, 2232, 294, 264, 26506, 712, 9482, 570, 264, 26506, 712, 51348], "temperature": 0.0, "avg_logprob": -0.08318940719755569, "compression_ratio": 1.83203125, "no_speech_prob": 0.021278567612171173}, {"id": 426, "seek": 200702, "start": 2026.7, "end": 2031.18, "text": " architecture is the is incompatible with normal the use of final fields referring to mutable", "tokens": [51348, 9482, 307, 264, 307, 40393, 267, 964, 365, 2710, 264, 764, 295, 2572, 7909, 13761, 281, 5839, 712, 51572], "temperature": 0.0, "avg_logprob": -0.08318940719755569, "compression_ratio": 1.83203125, "no_speech_prob": 0.021278567612171173}, {"id": 427, "seek": 200702, "start": 2031.18, "end": 2036.3799999999999, "text": " objects except in cases where the mutable objects may be safely shared between an object", "tokens": [51572, 6565, 3993, 294, 3331, 689, 264, 5839, 712, 6565, 815, 312, 11750, 5507, 1296, 364, 2657, 51832], "temperature": 0.0, "avg_logprob": -0.08318940719755569, "compression_ratio": 1.83203125, "no_speech_prob": 0.021278567612171173}, {"id": 428, "seek": 203638, "start": 2036.38, "end": 2042.5400000000002, "text": " and its clone in order to make a class cloneable it may be necessary to remove final mortifiers", "tokens": [50364, 293, 1080, 26506, 294, 1668, 281, 652, 257, 1508, 26506, 712, 309, 815, 312, 4818, 281, 4159, 2572, 6599, 23463, 50672], "temperature": 0.0, "avg_logprob": -0.07311138239773837, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.005219642538577318}, {"id": 429, "seek": 203638, "start": 2042.5400000000002, "end": 2047.98, "text": " from some fields so that's a little caveat there okay that is part one uh just want to", "tokens": [50672, 490, 512, 7909, 370, 300, 311, 257, 707, 43012, 456, 1392, 300, 307, 644, 472, 2232, 445, 528, 281, 50944], "temperature": 0.0, "avg_logprob": -0.07311138239773837, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.005219642538577318}, {"id": 430, "seek": 203638, "start": 2047.98, "end": 2055.1, "text": " I guess kind of apologize if I didn't properly convey the this part here about the reflections", "tokens": [50944, 286, 2041, 733, 295, 12328, 498, 286, 994, 380, 6108, 16965, 264, 341, 644, 510, 466, 264, 30679, 51300], "temperature": 0.0, "avg_logprob": -0.07311138239773837, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.005219642538577318}, {"id": 431, "seek": 203638, "start": 2055.1, "end": 2060.1400000000003, "text": " because that was it did complicate me a little bit because at first the way I've written the code", "tokens": [51300, 570, 300, 390, 309, 630, 1209, 8700, 385, 257, 707, 857, 570, 412, 700, 264, 636, 286, 600, 3720, 264, 3089, 51552], "temperature": 0.0, "avg_logprob": -0.07311138239773837, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.005219642538577318}, {"id": 432, "seek": 206014, "start": 2060.14, "end": 2066.7799999999997, "text": " the demo it wasn't really accurate because the idea was to reflect on the object superclass not to", "tokens": [50364, 264, 10723, 309, 2067, 380, 534, 8559, 570, 264, 1558, 390, 281, 5031, 322, 264, 2657, 1687, 11665, 406, 281, 50696], "temperature": 0.0, "avg_logprob": -0.08217219973719397, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.06006239354610443}, {"id": 433, "seek": 206014, "start": 2066.7799999999997, "end": 2075.18, "text": " reflect on the object at hand per se but I think it's still the important point there was it's not", "tokens": [50696, 5031, 322, 264, 2657, 412, 1011, 680, 369, 457, 286, 519, 309, 311, 920, 264, 1021, 935, 456, 390, 309, 311, 406, 51116], "temperature": 0.0, "avg_logprob": -0.08217219973719397, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.06006239354610443}, {"id": 434, "seek": 206014, "start": 2075.8199999999997, "end": 2081.2599999999998, "text": " recommended to use reflections and try to use the object the superclass objects clone method", "tokens": [51148, 9628, 281, 764, 30679, 293, 853, 281, 764, 264, 2657, 264, 1687, 11665, 6565, 26506, 3170, 51420], "temperature": 0.0, "avg_logprob": -0.08217219973719397, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.06006239354610443}, {"id": 435, "seek": 206014, "start": 2081.8199999999997, "end": 2086.22, "text": " best thing to do is to implement the cloneable interface and then just override it and define", "tokens": [51448, 1151, 551, 281, 360, 307, 281, 4445, 264, 26506, 712, 9226, 293, 550, 445, 42321, 309, 293, 6964, 51668], "temperature": 0.0, "avg_logprob": -0.08217219973719397, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.06006239354610443}, {"id": 436, "seek": 208622, "start": 2086.22, "end": 2093.3399999999997, "text": " your own clone method all righty that's it for part one of item 13 override clone judiciously", "tokens": [50364, 428, 1065, 26506, 3170, 439, 558, 88, 300, 311, 309, 337, 644, 472, 295, 3174, 3705, 42321, 26506, 3747, 3784, 356, 50720], "temperature": 0.0, "avg_logprob": -0.13488786419232687, "compression_ratio": 1.7105263157894737, "no_speech_prob": 0.026750624179840088}, {"id": 437, "seek": 208622, "start": 2093.3399999999997, "end": 2100.06, "text": " judiciously it's a hard word to pronounce um and I hope I was being judicious in expanding and", "tokens": [50720, 3747, 3784, 356, 309, 311, 257, 1152, 1349, 281, 19567, 1105, 293, 286, 1454, 286, 390, 885, 3747, 3784, 294, 14702, 293, 51056], "temperature": 0.0, "avg_logprob": -0.13488786419232687, "compression_ratio": 1.7105263157894737, "no_speech_prob": 0.026750624179840088}, {"id": 438, "seek": 208622, "start": 2100.06, "end": 2106.22, "text": " explaining the concepts in this item but I shall continue on with the rest of this item in part two", "tokens": [51056, 13468, 264, 10392, 294, 341, 3174, 457, 286, 4393, 2354, 322, 365, 264, 1472, 295, 341, 3174, 294, 644, 732, 51364], "temperature": 0.0, "avg_logprob": -0.13488786419232687, "compression_ratio": 1.7105263157894737, "no_speech_prob": 0.026750624179840088}, {"id": 439, "seek": 208622, "start": 2107.3399999999997, "end": 2111.58, "text": " uh saying all that yeah thanks for watching and I hope you got some value from it I'll see you in the", "tokens": [51420, 2232, 1566, 439, 300, 1338, 3231, 337, 1976, 293, 286, 1454, 291, 658, 512, 2158, 490, 309, 286, 603, 536, 291, 294, 264, 51632], "temperature": 0.0, "avg_logprob": -0.13488786419232687, "compression_ratio": 1.7105263157894737, "no_speech_prob": 0.026750624179840088}, {"id": 440, "seek": 211158, "start": 2111.58, "end": 2115.58, "text": " next one cheers", "tokens": [50364, 958, 472, 15301, 50564], "temperature": 0.0, "avg_logprob": -0.6657663186391195, "compression_ratio": 0.6521739130434783, "no_speech_prob": 0.03937717154622078}], "language": "en"}