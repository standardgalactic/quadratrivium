start	end	text
0	6000	Hey everyone, welcome to yet another episode of my video series on Joshua Bloch's effective Java
6560	12080	where I take all the items that he has enumerated in this book and expand on them and try and make
12080	19040	sense of them and hopefully as I make sense of it by sharing and making this video you do can
19040	24560	follow along and try and understand what he's written in this fantastic superlative book.
25200	31120	Today we're going to cover item four and of course like I've done in the previous items before
31120	38080	I get to the item, the crux of the video, I need to go through the proviso and set a few
38080	43440	caveats or read out a few caveats let's say not really reading out but just following along on
43440	48720	some some bullet points that I'll list it down here. However if you've been following along you
48720	55680	could just skip the introduction and move to the item itself but I need to every single video
55680	62880	because maybe new viewers make this proviso or record this bit just feel like I have a ethical
62880	69520	duty to do so. The first point is this is not a tutorial that is very very important I understand
69520	75120	YouTube is just it is oh it's programming heaven it's tutorial heaven I mean you could learn anything
75120	82560	virtually anything of YouTube and most programming based videos are sort of how-tos tutorials things
82560	88400	that we miss out on let's say by not paying attention in a uni lecture but this is not a
88400	93600	tutorial this is really really it's a selfish project in many ways I'm trying to make sense of
93600	99520	this book and I find that it's easier to expound on the matter and sort of think out loud and that
99520	104400	helps me understand and my hope is that it's a sort of a collective understanding and a collective
104480	111680	learning in no way am I a teacher absolutely not and I have said this in the previous items the more
111680	118320	I'm understanding Java and OOP programming in general I'm coming to the realization that I
118320	124640	am far from being an expert so take whatever I say with the grain of salt and don't treat this
124640	130160	video like a tutorial which means if I make mistakes please point them out in the comment section
130160	142000	down below I like to think of this as more of a blind leading the blind project or video series
143360	150240	where I'm blind too and it's a factor that I'm making the video I am sort of leading whoever
150240	156400	that's watching this but I am as equally blind as you are that's not a pun because I'm wearing glasses
156400	164240	it's just a metaphor think of it as a exploratory disquisition so the best analogy that I've been
164240	174400	using in the previous items is what one would see in a typical university tutorial setting where
174400	179520	we've got an assignment or some problem statement and all the students get together and try to solve
179520	187760	it collectively that's really what I'm trying to do here and that means as I did pointed out before
187760	194480	I will inevitably make mistakes and given that this is I forgot to zoom into the proviso apologies
194480	200640	I hope you can read that and given that this is a programming video all the code that I've used
200640	206480	some of it is repurposed code from Joshua Bloch's repository itself the stuff that he's published
206480	212000	that's in fact based on the book all of that code and the stuff that I've written on my own
212000	219840	available on github so link to that in the description below saying that let's get to item number four
219840	226960	which is also from chapter two we're still in chapter two creating and destroying objects
227920	235120	and item number four is enforce non-instantiability with a private constructor this is the shortest
235120	240960	item in the book and it's very easy to understand and it's just a page so this video shouldn't be
240960	248240	that uh complicating uh complicating it shouldn't be that complicated and it should probably be quite
248240	255200	cook cook quite quick if I can stick to brevity which is quite difficult for me because I tend to
255200	260880	be long-winded so the first two paragraphs really is sort of an introduction into utility classes
260880	268640	classes that we see in the java library uh sorry in the java utils library and a good one that we
268640	276160	all probably use is the collections utility class this right here which if you scroll through it
276160	283360	of course it's got a private constructor but also it's got static member variables and static methods
283360	287200	because really these are the stuff that we're going to use as clients in our code
287200	293680	uh just a an ancillary point before I read uh paragraph from just your block it's quite
293680	301200	important to understand this in fact using utility classes or putting all these utility methods in
301200	307920	one single huge class uh putting static methods in one single huge class isn't a good idea if you
307920	313120	do a bit of googling and do a bit of research into it just to block himself he says it's not always
313120	320640	good idea to use utility classes but also I came across this really good blog blog post um
321280	324880	why can't I talk today well I can't talk in each and every one of these videos there's
324880	330480	something wrong with me but I came across this really good blog post by um okay I'm gonna butcher
330480	337360	this his name is Wojtek Ruzika and I'll leave a link to that down below in the description
337360	345920	he did he did leave uh he wrote wrote the post a blog post in 2017 and it's well what to read
345920	352560	especially because he he kind of expounds and elucidates as to how using utility classes or
352560	358480	let's say misusing them or abusing them could be sort of an anti-pattern because it doesn't
358480	365920	necessarily sit or follow OOP principles in fact I've got a little excerpt from his blog he says here
367920	374480	avoid you avoid using avoid utility classes that's the name of the blog post and in many states
374480	382720	by the by the OOP principles an object should contain both data and a behavior performed
382720	389280	over that data utility classes are just behavior all the data are passed as inputs it is in no
389280	395360	way object oriented it is more of a procedural way of thinking so it's you know because you keep
395360	401440	that in mind when using utility classes but that's sort of an ancillary point and the book
401440	408480	Joshua Block states such utility classes were not designed to be instantiated an instance would be
408480	414400	nonsensical of course because all really for instance this this class in the collections class
414400	419840	all it really does is hold a whole bunch of static methods that will be used that that will be used
419840	427600	by a client where we'll just pass data onto the function in the absence of explicit constructors
427600	435120	however the compiler provides a public parameterless default constructor to use this to a user this
435120	443600	constructor is indistinguishable indistinguishable from any other it is not uncommon to see unintentionally
443680	451440	instantially unintentionally instantiable classes in published apis especially in public apis because
452080	456080	so again this is a good example because firstly Joshua Block himself has written this but it's
456080	461920	also just something that we're all familiar with this class here if he didn't explicitly state
461920	470080	or whoever that wrote this code either Joshua Block or Neil Gaffta if the writer of this code
470080	476960	didn't explicitly state that this that explicitly put this private constructor when the collections
476960	485360	class is used by a client the jbm or the compiler would think of it would think of this as being a
485360	489920	public constructor and would instantiate this class and create an object in the heap memory
489920	494400	and that's not something we want especially from a utility class and then he continues
494480	500000	attempting to enforce non-instantiability by making a class abstract does not work either
500720	507600	the class can be subclassed so a sub class when the class is subclass let's say there's
508160	514000	abstract class a and we don't explicitly state well we don't really need even need to put a
514000	518480	constructor in an abstract class but let's say we have abstract class a and then b extends that
518480	524320	class that a concrete class the moment that happens this is what happens the class can be subclass
524320	532880	and the sub and the subclass instantiated so b can still instantiate itself and it's a type of the
534160	539200	parent class a so instead of talking about it and trying to conceptualize it let me show a proper
539200	546720	example uh there's a utility class here for a moment i will get rid of this private constructor
546720	552000	so now if this now this class can be instantiated and despite it not having any explicit code
552800	559280	apropos a constructor the moment this class is instantiated it has a public constructor with
559280	565840	no args so then i have a child class here and this child class can extend the utility class
566560	571840	as a result result of that we have a problem because this class is not going to be instantiated
571840	576800	because of the because of the child class however if we go back to the utility the utility class
576800	584800	and if we add this private constructor explicitly if we go back to the child class it'll throw this
584800	590960	error the IDE will say there is no default constructor available in this class that's good
591600	596320	which is what we want well it's not really what we want because this is after all a utility class
596320	602240	and it it isn't created to be inherited and that's exactly what Joshua Block states
603920	608720	furthermore it's it misleads the user into thinking the class was designed for inheritance
609360	617360	we don't have to inherit just to prevent it from being um let's say uh instantiated playing all
617360	623120	these games making an abstract class none of that it's it's useless it also misleads the client
623120	628720	that's what he's trying to say here because this utility class wasn't created uh to be subclassed
628720	634640	so of course the best solution is to explicitly define a private construct as i have done here
634640	642880	and not notabene as we saw before this does prevent this utility class from being subclassed
642880	649040	because it throws error there and that's important to keep in mind but generally no one really inherits
649040	656880	utility classes because they just hold static methods uh he continues there is however a simple
656880	663680	idiom to ensure non-instantiability a default constructor is generated only if a class contains
663680	670880	no explicit constructors so a class can be made non-instantiable by including a private constructor
670880	675840	that's exactly what we've done here now indeed you may wonder why line number 11 why do we need
675840	680880	this through a new assertion error why not just leave it like that as a as a private constructor
680880	689040	this is simply due to sometimes programmers making mistakes where i'll just read it off the book
689040	696400	he explains it much clearer than i do the assertion error so that's right here isn't strictly required
696400	701840	that's correct we can just leave the constructor private and leave the body empty but it provides
701840	709200	insurance in case the constructor is accidentally invoked from within the class so an example for
709200	716480	that would be here uh this public static void main method uh i'm trying to instantiate this class
716480	724320	what you'll see now is if i run this it'll throw an error it will throw a throw new
724320	731600	assertion error right there so even from within the class we can't instantiate that class however
731600	738000	if we didn't have this assertion error throw new assertion error that that would be possible someone
738000	745840	could whoops someone could do it from within the class and unfortunately now this class it lost its
745840	752800	non-instantiability property and then he continues this idiom is mildly counting intuitive because
752800	759600	the constructor is provided expressly so that it cannot be invoked it is therefore wise to include
759680	765920	a comment as shown earlier so that's what he's done here like number nine oh this is something
765920	770720	we touched on before as a side effect the idiom also prevents the class from being subclassed i
770720	779200	did already demonstrate that uh with this this example here all constructors must evoke a super
779200	785040	class constructor explicitly or implicitly and a subclass would have no accessible super class
785120	792800	constructed and invoked so when this is subclass this child utility class invokes the constructor
792800	798080	of the superclass and with its private that wouldn't happen that's it it's simple as that
798080	805040	fuel answer code as i said the shortest item the next item item number four is a very very exciting
805040	812320	i'm really keen to dive deep into this is prefer dependence injection to hardwiring resources
812320	814320	recently i've been taking a
