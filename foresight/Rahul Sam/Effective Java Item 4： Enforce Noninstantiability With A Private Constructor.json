{"text": " Hey everyone, welcome to yet another episode of my video series on Joshua Bloch's effective Java where I take all the items that he has enumerated in this book and expand on them and try and make sense of them and hopefully as I make sense of it by sharing and making this video you do can follow along and try and understand what he's written in this fantastic superlative book. Today we're going to cover item four and of course like I've done in the previous items before I get to the item, the crux of the video, I need to go through the proviso and set a few caveats or read out a few caveats let's say not really reading out but just following along on some some bullet points that I'll list it down here. However if you've been following along you could just skip the introduction and move to the item itself but I need to every single video because maybe new viewers make this proviso or record this bit just feel like I have a ethical duty to do so. The first point is this is not a tutorial that is very very important I understand YouTube is just it is oh it's programming heaven it's tutorial heaven I mean you could learn anything virtually anything of YouTube and most programming based videos are sort of how-tos tutorials things that we miss out on let's say by not paying attention in a uni lecture but this is not a tutorial this is really really it's a selfish project in many ways I'm trying to make sense of this book and I find that it's easier to expound on the matter and sort of think out loud and that helps me understand and my hope is that it's a sort of a collective understanding and a collective learning in no way am I a teacher absolutely not and I have said this in the previous items the more I'm understanding Java and OOP programming in general I'm coming to the realization that I am far from being an expert so take whatever I say with the grain of salt and don't treat this video like a tutorial which means if I make mistakes please point them out in the comment section down below I like to think of this as more of a blind leading the blind project or video series where I'm blind too and it's a factor that I'm making the video I am sort of leading whoever that's watching this but I am as equally blind as you are that's not a pun because I'm wearing glasses it's just a metaphor think of it as a exploratory disquisition so the best analogy that I've been using in the previous items is what one would see in a typical university tutorial setting where we've got an assignment or some problem statement and all the students get together and try to solve it collectively that's really what I'm trying to do here and that means as I did pointed out before I will inevitably make mistakes and given that this is I forgot to zoom into the proviso apologies I hope you can read that and given that this is a programming video all the code that I've used some of it is repurposed code from Joshua Bloch's repository itself the stuff that he's published that's in fact based on the book all of that code and the stuff that I've written on my own available on github so link to that in the description below saying that let's get to item number four which is also from chapter two we're still in chapter two creating and destroying objects and item number four is enforce non-instantiability with a private constructor this is the shortest item in the book and it's very easy to understand and it's just a page so this video shouldn't be that uh complicating uh complicating it shouldn't be that complicated and it should probably be quite cook cook quite quick if I can stick to brevity which is quite difficult for me because I tend to be long-winded so the first two paragraphs really is sort of an introduction into utility classes classes that we see in the java library uh sorry in the java utils library and a good one that we all probably use is the collections utility class this right here which if you scroll through it of course it's got a private constructor but also it's got static member variables and static methods because really these are the stuff that we're going to use as clients in our code uh just a an ancillary point before I read uh paragraph from just your block it's quite important to understand this in fact using utility classes or putting all these utility methods in one single huge class uh putting static methods in one single huge class isn't a good idea if you do a bit of googling and do a bit of research into it just to block himself he says it's not always good idea to use utility classes but also I came across this really good blog blog post um why can't I talk today well I can't talk in each and every one of these videos there's something wrong with me but I came across this really good blog post by um okay I'm gonna butcher this his name is Wojtek Ruzika and I'll leave a link to that down below in the description he did he did leave uh he wrote wrote the post a blog post in 2017 and it's well what to read especially because he he kind of expounds and elucidates as to how using utility classes or let's say misusing them or abusing them could be sort of an anti-pattern because it doesn't necessarily sit or follow OOP principles in fact I've got a little excerpt from his blog he says here avoid you avoid using avoid utility classes that's the name of the blog post and in many states by the by the OOP principles an object should contain both data and a behavior performed over that data utility classes are just behavior all the data are passed as inputs it is in no way object oriented it is more of a procedural way of thinking so it's you know because you keep that in mind when using utility classes but that's sort of an ancillary point and the book Joshua Block states such utility classes were not designed to be instantiated an instance would be nonsensical of course because all really for instance this this class in the collections class all it really does is hold a whole bunch of static methods that will be used that that will be used by a client where we'll just pass data onto the function in the absence of explicit constructors however the compiler provides a public parameterless default constructor to use this to a user this constructor is indistinguishable indistinguishable from any other it is not uncommon to see unintentionally instantially unintentionally instantiable classes in published apis especially in public apis because so again this is a good example because firstly Joshua Block himself has written this but it's also just something that we're all familiar with this class here if he didn't explicitly state or whoever that wrote this code either Joshua Block or Neil Gaffta if the writer of this code didn't explicitly state that this that explicitly put this private constructor when the collections class is used by a client the jbm or the compiler would think of it would think of this as being a public constructor and would instantiate this class and create an object in the heap memory and that's not something we want especially from a utility class and then he continues attempting to enforce non-instantiability by making a class abstract does not work either the class can be subclassed so a sub class when the class is subclass let's say there's abstract class a and we don't explicitly state well we don't really need even need to put a constructor in an abstract class but let's say we have abstract class a and then b extends that class that a concrete class the moment that happens this is what happens the class can be subclass and the sub and the subclass instantiated so b can still instantiate itself and it's a type of the parent class a so instead of talking about it and trying to conceptualize it let me show a proper example uh there's a utility class here for a moment i will get rid of this private constructor so now if this now this class can be instantiated and despite it not having any explicit code apropos a constructor the moment this class is instantiated it has a public constructor with no args so then i have a child class here and this child class can extend the utility class as a result result of that we have a problem because this class is not going to be instantiated because of the because of the child class however if we go back to the utility the utility class and if we add this private constructor explicitly if we go back to the child class it'll throw this error the IDE will say there is no default constructor available in this class that's good which is what we want well it's not really what we want because this is after all a utility class and it it isn't created to be inherited and that's exactly what Joshua Block states furthermore it's it misleads the user into thinking the class was designed for inheritance we don't have to inherit just to prevent it from being um let's say uh instantiated playing all these games making an abstract class none of that it's it's useless it also misleads the client that's what he's trying to say here because this utility class wasn't created uh to be subclassed so of course the best solution is to explicitly define a private construct as i have done here and not notabene as we saw before this does prevent this utility class from being subclassed because it throws error there and that's important to keep in mind but generally no one really inherits utility classes because they just hold static methods uh he continues there is however a simple idiom to ensure non-instantiability a default constructor is generated only if a class contains no explicit constructors so a class can be made non-instantiable by including a private constructor that's exactly what we've done here now indeed you may wonder why line number 11 why do we need this through a new assertion error why not just leave it like that as a as a private constructor this is simply due to sometimes programmers making mistakes where i'll just read it off the book he explains it much clearer than i do the assertion error so that's right here isn't strictly required that's correct we can just leave the constructor private and leave the body empty but it provides insurance in case the constructor is accidentally invoked from within the class so an example for that would be here uh this public static void main method uh i'm trying to instantiate this class what you'll see now is if i run this it'll throw an error it will throw a throw new assertion error right there so even from within the class we can't instantiate that class however if we didn't have this assertion error throw new assertion error that that would be possible someone could whoops someone could do it from within the class and unfortunately now this class it lost its non-instantiability property and then he continues this idiom is mildly counting intuitive because the constructor is provided expressly so that it cannot be invoked it is therefore wise to include a comment as shown earlier so that's what he's done here like number nine oh this is something we touched on before as a side effect the idiom also prevents the class from being subclassed i did already demonstrate that uh with this this example here all constructors must evoke a super class constructor explicitly or implicitly and a subclass would have no accessible super class constructed and invoked so when this is subclass this child utility class invokes the constructor of the superclass and with its private that wouldn't happen that's it it's simple as that fuel answer code as i said the shortest item the next item item number four is a very very exciting i'm really keen to dive deep into this is prefer dependence injection to hardwiring resources recently i've been taking a", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.0, "text": " Hey everyone, welcome to yet another episode of my video series on Joshua Bloch's effective Java", "tokens": [50364, 1911, 1518, 11, 2928, 281, 1939, 1071, 3500, 295, 452, 960, 2638, 322, 24005, 9865, 339, 311, 4942, 10745, 50664], "temperature": 0.0, "avg_logprob": -0.13930873870849608, "compression_ratio": 1.676991150442478, "no_speech_prob": 0.07994373887777328}, {"id": 1, "seek": 0, "start": 6.5600000000000005, "end": 12.08, "text": " where I take all the items that he has enumerated in this book and expand on them and try and make", "tokens": [50692, 689, 286, 747, 439, 264, 4754, 300, 415, 575, 465, 15583, 770, 294, 341, 1446, 293, 5268, 322, 552, 293, 853, 293, 652, 50968], "temperature": 0.0, "avg_logprob": -0.13930873870849608, "compression_ratio": 1.676991150442478, "no_speech_prob": 0.07994373887777328}, {"id": 2, "seek": 0, "start": 12.08, "end": 19.04, "text": " sense of them and hopefully as I make sense of it by sharing and making this video you do can", "tokens": [50968, 2020, 295, 552, 293, 4696, 382, 286, 652, 2020, 295, 309, 538, 5414, 293, 1455, 341, 960, 291, 360, 393, 51316], "temperature": 0.0, "avg_logprob": -0.13930873870849608, "compression_ratio": 1.676991150442478, "no_speech_prob": 0.07994373887777328}, {"id": 3, "seek": 0, "start": 19.04, "end": 24.560000000000002, "text": " follow along and try and understand what he's written in this fantastic superlative book.", "tokens": [51316, 1524, 2051, 293, 853, 293, 1223, 437, 415, 311, 3720, 294, 341, 5456, 1687, 75, 1166, 1446, 13, 51592], "temperature": 0.0, "avg_logprob": -0.13930873870849608, "compression_ratio": 1.676991150442478, "no_speech_prob": 0.07994373887777328}, {"id": 4, "seek": 2456, "start": 25.2, "end": 31.119999999999997, "text": " Today we're going to cover item four and of course like I've done in the previous items before", "tokens": [50396, 2692, 321, 434, 516, 281, 2060, 3174, 1451, 293, 295, 1164, 411, 286, 600, 1096, 294, 264, 3894, 4754, 949, 50692], "temperature": 0.0, "avg_logprob": -0.15741548935572305, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.20149582624435425}, {"id": 5, "seek": 2456, "start": 31.119999999999997, "end": 38.08, "text": " I get to the item, the crux of the video, I need to go through the proviso and set a few", "tokens": [50692, 286, 483, 281, 264, 3174, 11, 264, 5140, 87, 295, 264, 960, 11, 286, 643, 281, 352, 807, 264, 1439, 19227, 293, 992, 257, 1326, 51040], "temperature": 0.0, "avg_logprob": -0.15741548935572305, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.20149582624435425}, {"id": 6, "seek": 2456, "start": 38.08, "end": 43.44, "text": " caveats or read out a few caveats let's say not really reading out but just following along on", "tokens": [51040, 11730, 1720, 420, 1401, 484, 257, 1326, 11730, 1720, 718, 311, 584, 406, 534, 3760, 484, 457, 445, 3480, 2051, 322, 51308], "temperature": 0.0, "avg_logprob": -0.15741548935572305, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.20149582624435425}, {"id": 7, "seek": 2456, "start": 43.44, "end": 48.72, "text": " some some bullet points that I'll list it down here. However if you've been following along you", "tokens": [51308, 512, 512, 11632, 2793, 300, 286, 603, 1329, 309, 760, 510, 13, 2908, 498, 291, 600, 668, 3480, 2051, 291, 51572], "temperature": 0.0, "avg_logprob": -0.15741548935572305, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.20149582624435425}, {"id": 8, "seek": 4872, "start": 48.72, "end": 55.68, "text": " could just skip the introduction and move to the item itself but I need to every single video", "tokens": [50364, 727, 445, 10023, 264, 9339, 293, 1286, 281, 264, 3174, 2564, 457, 286, 643, 281, 633, 2167, 960, 50712], "temperature": 0.0, "avg_logprob": -0.12247504971244118, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.07366747409105301}, {"id": 9, "seek": 4872, "start": 55.68, "end": 62.879999999999995, "text": " because maybe new viewers make this proviso or record this bit just feel like I have a ethical", "tokens": [50712, 570, 1310, 777, 8499, 652, 341, 1439, 19227, 420, 2136, 341, 857, 445, 841, 411, 286, 362, 257, 18890, 51072], "temperature": 0.0, "avg_logprob": -0.12247504971244118, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.07366747409105301}, {"id": 10, "seek": 4872, "start": 62.879999999999995, "end": 69.52, "text": " duty to do so. The first point is this is not a tutorial that is very very important I understand", "tokens": [51072, 9776, 281, 360, 370, 13, 440, 700, 935, 307, 341, 307, 406, 257, 7073, 300, 307, 588, 588, 1021, 286, 1223, 51404], "temperature": 0.0, "avg_logprob": -0.12247504971244118, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.07366747409105301}, {"id": 11, "seek": 4872, "start": 69.52, "end": 75.12, "text": " YouTube is just it is oh it's programming heaven it's tutorial heaven I mean you could learn anything", "tokens": [51404, 3088, 307, 445, 309, 307, 1954, 309, 311, 9410, 7162, 309, 311, 7073, 7162, 286, 914, 291, 727, 1466, 1340, 51684], "temperature": 0.0, "avg_logprob": -0.12247504971244118, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.07366747409105301}, {"id": 12, "seek": 7512, "start": 75.12, "end": 82.56, "text": " virtually anything of YouTube and most programming based videos are sort of how-tos tutorials things", "tokens": [50364, 14103, 1340, 295, 3088, 293, 881, 9410, 2361, 2145, 366, 1333, 295, 577, 12, 83, 329, 17616, 721, 50736], "temperature": 0.0, "avg_logprob": -0.07599581659367655, "compression_ratio": 1.8257575757575757, "no_speech_prob": 0.06651876121759415}, {"id": 13, "seek": 7512, "start": 82.56, "end": 88.4, "text": " that we miss out on let's say by not paying attention in a uni lecture but this is not a", "tokens": [50736, 300, 321, 1713, 484, 322, 718, 311, 584, 538, 406, 6229, 3202, 294, 257, 36435, 7991, 457, 341, 307, 406, 257, 51028], "temperature": 0.0, "avg_logprob": -0.07599581659367655, "compression_ratio": 1.8257575757575757, "no_speech_prob": 0.06651876121759415}, {"id": 14, "seek": 7512, "start": 88.4, "end": 93.60000000000001, "text": " tutorial this is really really it's a selfish project in many ways I'm trying to make sense of", "tokens": [51028, 7073, 341, 307, 534, 534, 309, 311, 257, 19074, 1716, 294, 867, 2098, 286, 478, 1382, 281, 652, 2020, 295, 51288], "temperature": 0.0, "avg_logprob": -0.07599581659367655, "compression_ratio": 1.8257575757575757, "no_speech_prob": 0.06651876121759415}, {"id": 15, "seek": 7512, "start": 93.60000000000001, "end": 99.52000000000001, "text": " this book and I find that it's easier to expound on the matter and sort of think out loud and that", "tokens": [51288, 341, 1446, 293, 286, 915, 300, 309, 311, 3571, 281, 1278, 554, 322, 264, 1871, 293, 1333, 295, 519, 484, 6588, 293, 300, 51584], "temperature": 0.0, "avg_logprob": -0.07599581659367655, "compression_ratio": 1.8257575757575757, "no_speech_prob": 0.06651876121759415}, {"id": 16, "seek": 7512, "start": 99.52000000000001, "end": 104.4, "text": " helps me understand and my hope is that it's a sort of a collective understanding and a collective", "tokens": [51584, 3665, 385, 1223, 293, 452, 1454, 307, 300, 309, 311, 257, 1333, 295, 257, 12590, 3701, 293, 257, 12590, 51828], "temperature": 0.0, "avg_logprob": -0.07599581659367655, "compression_ratio": 1.8257575757575757, "no_speech_prob": 0.06651876121759415}, {"id": 17, "seek": 10440, "start": 104.48, "end": 111.68, "text": " learning in no way am I a teacher absolutely not and I have said this in the previous items the more", "tokens": [50368, 2539, 294, 572, 636, 669, 286, 257, 5027, 3122, 406, 293, 286, 362, 848, 341, 294, 264, 3894, 4754, 264, 544, 50728], "temperature": 0.0, "avg_logprob": -0.07212529941038652, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.005728521384298801}, {"id": 18, "seek": 10440, "start": 111.68, "end": 118.32000000000001, "text": " I'm understanding Java and OOP programming in general I'm coming to the realization that I", "tokens": [50728, 286, 478, 3701, 10745, 293, 422, 12059, 9410, 294, 2674, 286, 478, 1348, 281, 264, 25138, 300, 286, 51060], "temperature": 0.0, "avg_logprob": -0.07212529941038652, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.005728521384298801}, {"id": 19, "seek": 10440, "start": 118.32000000000001, "end": 124.64000000000001, "text": " am far from being an expert so take whatever I say with the grain of salt and don't treat this", "tokens": [51060, 669, 1400, 490, 885, 364, 5844, 370, 747, 2035, 286, 584, 365, 264, 12837, 295, 5139, 293, 500, 380, 2387, 341, 51376], "temperature": 0.0, "avg_logprob": -0.07212529941038652, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.005728521384298801}, {"id": 20, "seek": 10440, "start": 124.64000000000001, "end": 130.16, "text": " video like a tutorial which means if I make mistakes please point them out in the comment section", "tokens": [51376, 960, 411, 257, 7073, 597, 1355, 498, 286, 652, 8038, 1767, 935, 552, 484, 294, 264, 2871, 3541, 51652], "temperature": 0.0, "avg_logprob": -0.07212529941038652, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.005728521384298801}, {"id": 21, "seek": 13016, "start": 130.16, "end": 142.0, "text": " down below I like to think of this as more of a blind leading the blind project or video series", "tokens": [50364, 760, 2507, 286, 411, 281, 519, 295, 341, 382, 544, 295, 257, 6865, 5775, 264, 6865, 1716, 420, 960, 2638, 50956], "temperature": 0.0, "avg_logprob": -0.09260552550015384, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.015178998932242393}, {"id": 22, "seek": 13016, "start": 143.35999999999999, "end": 150.24, "text": " where I'm blind too and it's a factor that I'm making the video I am sort of leading whoever", "tokens": [51024, 689, 286, 478, 6865, 886, 293, 309, 311, 257, 5952, 300, 286, 478, 1455, 264, 960, 286, 669, 1333, 295, 5775, 11387, 51368], "temperature": 0.0, "avg_logprob": -0.09260552550015384, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.015178998932242393}, {"id": 23, "seek": 13016, "start": 150.24, "end": 156.4, "text": " that's watching this but I am as equally blind as you are that's not a pun because I'm wearing glasses", "tokens": [51368, 300, 311, 1976, 341, 457, 286, 669, 382, 12309, 6865, 382, 291, 366, 300, 311, 406, 257, 4468, 570, 286, 478, 4769, 10812, 51676], "temperature": 0.0, "avg_logprob": -0.09260552550015384, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.015178998932242393}, {"id": 24, "seek": 15640, "start": 156.4, "end": 164.24, "text": " it's just a metaphor think of it as a exploratory disquisition so the best analogy that I've been", "tokens": [50364, 309, 311, 445, 257, 19157, 519, 295, 309, 382, 257, 24765, 4745, 717, 15398, 849, 370, 264, 1151, 21663, 300, 286, 600, 668, 50756], "temperature": 0.0, "avg_logprob": -0.09350139703323591, "compression_ratio": 1.5691489361702127, "no_speech_prob": 0.012421727180480957}, {"id": 25, "seek": 15640, "start": 164.24, "end": 174.4, "text": " using in the previous items is what one would see in a typical university tutorial setting where", "tokens": [50756, 1228, 294, 264, 3894, 4754, 307, 437, 472, 576, 536, 294, 257, 7476, 5454, 7073, 3287, 689, 51264], "temperature": 0.0, "avg_logprob": -0.09350139703323591, "compression_ratio": 1.5691489361702127, "no_speech_prob": 0.012421727180480957}, {"id": 26, "seek": 15640, "start": 174.4, "end": 179.52, "text": " we've got an assignment or some problem statement and all the students get together and try to solve", "tokens": [51264, 321, 600, 658, 364, 15187, 420, 512, 1154, 5629, 293, 439, 264, 1731, 483, 1214, 293, 853, 281, 5039, 51520], "temperature": 0.0, "avg_logprob": -0.09350139703323591, "compression_ratio": 1.5691489361702127, "no_speech_prob": 0.012421727180480957}, {"id": 27, "seek": 17952, "start": 179.52, "end": 187.76000000000002, "text": " it collectively that's really what I'm trying to do here and that means as I did pointed out before", "tokens": [50364, 309, 24341, 300, 311, 534, 437, 286, 478, 1382, 281, 360, 510, 293, 300, 1355, 382, 286, 630, 10932, 484, 949, 50776], "temperature": 0.0, "avg_logprob": -0.10942140869472337, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.18229615688323975}, {"id": 28, "seek": 17952, "start": 187.76000000000002, "end": 194.48000000000002, "text": " I will inevitably make mistakes and given that this is I forgot to zoom into the proviso apologies", "tokens": [50776, 286, 486, 28171, 652, 8038, 293, 2212, 300, 341, 307, 286, 5298, 281, 8863, 666, 264, 1439, 19227, 34929, 51112], "temperature": 0.0, "avg_logprob": -0.10942140869472337, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.18229615688323975}, {"id": 29, "seek": 17952, "start": 194.48000000000002, "end": 200.64000000000001, "text": " I hope you can read that and given that this is a programming video all the code that I've used", "tokens": [51112, 286, 1454, 291, 393, 1401, 300, 293, 2212, 300, 341, 307, 257, 9410, 960, 439, 264, 3089, 300, 286, 600, 1143, 51420], "temperature": 0.0, "avg_logprob": -0.10942140869472337, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.18229615688323975}, {"id": 30, "seek": 17952, "start": 200.64000000000001, "end": 206.48000000000002, "text": " some of it is repurposed code from Joshua Bloch's repository itself the stuff that he's published", "tokens": [51420, 512, 295, 309, 307, 1085, 20130, 1744, 3089, 490, 24005, 9865, 339, 311, 25841, 2564, 264, 1507, 300, 415, 311, 6572, 51712], "temperature": 0.0, "avg_logprob": -0.10942140869472337, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.18229615688323975}, {"id": 31, "seek": 20648, "start": 206.48, "end": 212.0, "text": " that's in fact based on the book all of that code and the stuff that I've written on my own", "tokens": [50364, 300, 311, 294, 1186, 2361, 322, 264, 1446, 439, 295, 300, 3089, 293, 264, 1507, 300, 286, 600, 3720, 322, 452, 1065, 50640], "temperature": 0.0, "avg_logprob": -0.08451019244247608, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.0203225277364254}, {"id": 32, "seek": 20648, "start": 212.0, "end": 219.83999999999997, "text": " available on github so link to that in the description below saying that let's get to item number four", "tokens": [50640, 2435, 322, 290, 355, 836, 370, 2113, 281, 300, 294, 264, 3855, 2507, 1566, 300, 718, 311, 483, 281, 3174, 1230, 1451, 51032], "temperature": 0.0, "avg_logprob": -0.08451019244247608, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.0203225277364254}, {"id": 33, "seek": 20648, "start": 219.83999999999997, "end": 226.95999999999998, "text": " which is also from chapter two we're still in chapter two creating and destroying objects", "tokens": [51032, 597, 307, 611, 490, 7187, 732, 321, 434, 920, 294, 7187, 732, 4084, 293, 19926, 6565, 51388], "temperature": 0.0, "avg_logprob": -0.08451019244247608, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.0203225277364254}, {"id": 34, "seek": 20648, "start": 227.92, "end": 235.12, "text": " and item number four is enforce non-instantiability with a private constructor this is the shortest", "tokens": [51436, 293, 3174, 1230, 1451, 307, 24825, 2107, 12, 48142, 72, 2310, 365, 257, 4551, 47479, 341, 307, 264, 31875, 51796], "temperature": 0.0, "avg_logprob": -0.08451019244247608, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.0203225277364254}, {"id": 35, "seek": 23512, "start": 235.12, "end": 240.96, "text": " item in the book and it's very easy to understand and it's just a page so this video shouldn't be", "tokens": [50364, 3174, 294, 264, 1446, 293, 309, 311, 588, 1858, 281, 1223, 293, 309, 311, 445, 257, 3028, 370, 341, 960, 4659, 380, 312, 50656], "temperature": 0.0, "avg_logprob": -0.10553840968919836, "compression_ratio": 1.747787610619469, "no_speech_prob": 0.013425352983176708}, {"id": 36, "seek": 23512, "start": 240.96, "end": 248.24, "text": " that uh complicating uh complicating it shouldn't be that complicated and it should probably be quite", "tokens": [50656, 300, 2232, 16060, 990, 2232, 16060, 990, 309, 4659, 380, 312, 300, 6179, 293, 309, 820, 1391, 312, 1596, 51020], "temperature": 0.0, "avg_logprob": -0.10553840968919836, "compression_ratio": 1.747787610619469, "no_speech_prob": 0.013425352983176708}, {"id": 37, "seek": 23512, "start": 248.24, "end": 255.20000000000002, "text": " cook cook quite quick if I can stick to brevity which is quite difficult for me because I tend to", "tokens": [51020, 2543, 2543, 1596, 1702, 498, 286, 393, 2897, 281, 1403, 23110, 597, 307, 1596, 2252, 337, 385, 570, 286, 3928, 281, 51368], "temperature": 0.0, "avg_logprob": -0.10553840968919836, "compression_ratio": 1.747787610619469, "no_speech_prob": 0.013425352983176708}, {"id": 38, "seek": 23512, "start": 255.20000000000002, "end": 260.88, "text": " be long-winded so the first two paragraphs really is sort of an introduction into utility classes", "tokens": [51368, 312, 938, 12, 12199, 292, 370, 264, 700, 732, 48910, 534, 307, 1333, 295, 364, 9339, 666, 14877, 5359, 51652], "temperature": 0.0, "avg_logprob": -0.10553840968919836, "compression_ratio": 1.747787610619469, "no_speech_prob": 0.013425352983176708}, {"id": 39, "seek": 26088, "start": 260.88, "end": 268.64, "text": " classes that we see in the java library uh sorry in the java utils library and a good one that we", "tokens": [50364, 5359, 300, 321, 536, 294, 264, 361, 4061, 6405, 2232, 2597, 294, 264, 361, 4061, 2839, 4174, 6405, 293, 257, 665, 472, 300, 321, 50752], "temperature": 0.0, "avg_logprob": -0.07839115734758048, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.009704746305942535}, {"id": 40, "seek": 26088, "start": 268.64, "end": 276.15999999999997, "text": " all probably use is the collections utility class this right here which if you scroll through it", "tokens": [50752, 439, 1391, 764, 307, 264, 16641, 14877, 1508, 341, 558, 510, 597, 498, 291, 11369, 807, 309, 51128], "temperature": 0.0, "avg_logprob": -0.07839115734758048, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.009704746305942535}, {"id": 41, "seek": 26088, "start": 276.15999999999997, "end": 283.36, "text": " of course it's got a private constructor but also it's got static member variables and static methods", "tokens": [51128, 295, 1164, 309, 311, 658, 257, 4551, 47479, 457, 611, 309, 311, 658, 13437, 4006, 9102, 293, 13437, 7150, 51488], "temperature": 0.0, "avg_logprob": -0.07839115734758048, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.009704746305942535}, {"id": 42, "seek": 26088, "start": 283.36, "end": 287.2, "text": " because really these are the stuff that we're going to use as clients in our code", "tokens": [51488, 570, 534, 613, 366, 264, 1507, 300, 321, 434, 516, 281, 764, 382, 6982, 294, 527, 3089, 51680], "temperature": 0.0, "avg_logprob": -0.07839115734758048, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.009704746305942535}, {"id": 43, "seek": 28720, "start": 287.2, "end": 293.68, "text": " uh just a an ancillary point before I read uh paragraph from just your block it's quite", "tokens": [50364, 2232, 445, 257, 364, 364, 7383, 822, 935, 949, 286, 1401, 2232, 18865, 490, 445, 428, 3461, 309, 311, 1596, 50688], "temperature": 0.0, "avg_logprob": -0.11290281083848741, "compression_ratio": 1.794392523364486, "no_speech_prob": 0.003944584168493748}, {"id": 44, "seek": 28720, "start": 293.68, "end": 301.2, "text": " important to understand this in fact using utility classes or putting all these utility methods in", "tokens": [50688, 1021, 281, 1223, 341, 294, 1186, 1228, 14877, 5359, 420, 3372, 439, 613, 14877, 7150, 294, 51064], "temperature": 0.0, "avg_logprob": -0.11290281083848741, "compression_ratio": 1.794392523364486, "no_speech_prob": 0.003944584168493748}, {"id": 45, "seek": 28720, "start": 301.2, "end": 307.91999999999996, "text": " one single huge class uh putting static methods in one single huge class isn't a good idea if you", "tokens": [51064, 472, 2167, 2603, 1508, 2232, 3372, 13437, 7150, 294, 472, 2167, 2603, 1508, 1943, 380, 257, 665, 1558, 498, 291, 51400], "temperature": 0.0, "avg_logprob": -0.11290281083848741, "compression_ratio": 1.794392523364486, "no_speech_prob": 0.003944584168493748}, {"id": 46, "seek": 28720, "start": 307.91999999999996, "end": 313.12, "text": " do a bit of googling and do a bit of research into it just to block himself he says it's not always", "tokens": [51400, 360, 257, 857, 295, 50061, 1688, 293, 360, 257, 857, 295, 2132, 666, 309, 445, 281, 3461, 3647, 415, 1619, 309, 311, 406, 1009, 51660], "temperature": 0.0, "avg_logprob": -0.11290281083848741, "compression_ratio": 1.794392523364486, "no_speech_prob": 0.003944584168493748}, {"id": 47, "seek": 31312, "start": 313.12, "end": 320.64, "text": " good idea to use utility classes but also I came across this really good blog blog post um", "tokens": [50364, 665, 1558, 281, 764, 14877, 5359, 457, 611, 286, 1361, 2108, 341, 534, 665, 6968, 6968, 2183, 1105, 50740], "temperature": 0.0, "avg_logprob": -0.11466044964997665, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.03460545837879181}, {"id": 48, "seek": 31312, "start": 321.28000000000003, "end": 324.88, "text": " why can't I talk today well I can't talk in each and every one of these videos there's", "tokens": [50772, 983, 393, 380, 286, 751, 965, 731, 286, 393, 380, 751, 294, 1184, 293, 633, 472, 295, 613, 2145, 456, 311, 50952], "temperature": 0.0, "avg_logprob": -0.11466044964997665, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.03460545837879181}, {"id": 49, "seek": 31312, "start": 324.88, "end": 330.48, "text": " something wrong with me but I came across this really good blog post by um okay I'm gonna butcher", "tokens": [50952, 746, 2085, 365, 385, 457, 286, 1361, 2108, 341, 534, 665, 6968, 2183, 538, 1105, 1392, 286, 478, 799, 41579, 51232], "temperature": 0.0, "avg_logprob": -0.11466044964997665, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.03460545837879181}, {"id": 50, "seek": 31312, "start": 330.48, "end": 337.36, "text": " this his name is Wojtek Ruzika and I'll leave a link to that down below in the description", "tokens": [51232, 341, 702, 1315, 307, 6622, 73, 47611, 497, 3334, 5439, 293, 286, 603, 1856, 257, 2113, 281, 300, 760, 2507, 294, 264, 3855, 51576], "temperature": 0.0, "avg_logprob": -0.11466044964997665, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.03460545837879181}, {"id": 51, "seek": 33736, "start": 337.36, "end": 345.92, "text": " he did he did leave uh he wrote wrote the post a blog post in 2017 and it's well what to read", "tokens": [50364, 415, 630, 415, 630, 1856, 2232, 415, 4114, 4114, 264, 2183, 257, 6968, 2183, 294, 6591, 293, 309, 311, 731, 437, 281, 1401, 50792], "temperature": 0.0, "avg_logprob": -0.10014959257476184, "compression_ratio": 1.5791666666666666, "no_speech_prob": 0.016652721911668777}, {"id": 52, "seek": 33736, "start": 345.92, "end": 352.56, "text": " especially because he he kind of expounds and elucidates as to how using utility classes or", "tokens": [50792, 2318, 570, 415, 415, 733, 295, 1278, 4432, 293, 806, 1311, 327, 1024, 382, 281, 577, 1228, 14877, 5359, 420, 51124], "temperature": 0.0, "avg_logprob": -0.10014959257476184, "compression_ratio": 1.5791666666666666, "no_speech_prob": 0.016652721911668777}, {"id": 53, "seek": 33736, "start": 352.56, "end": 358.48, "text": " let's say misusing them or abusing them could be sort of an anti-pattern because it doesn't", "tokens": [51124, 718, 311, 584, 3346, 7981, 552, 420, 410, 7981, 552, 727, 312, 1333, 295, 364, 6061, 12, 79, 1161, 77, 570, 309, 1177, 380, 51420], "temperature": 0.0, "avg_logprob": -0.10014959257476184, "compression_ratio": 1.5791666666666666, "no_speech_prob": 0.016652721911668777}, {"id": 54, "seek": 33736, "start": 358.48, "end": 365.92, "text": " necessarily sit or follow OOP principles in fact I've got a little excerpt from his blog he says here", "tokens": [51420, 4725, 1394, 420, 1524, 422, 12059, 9156, 294, 1186, 286, 600, 658, 257, 707, 42760, 662, 490, 702, 6968, 415, 1619, 510, 51792], "temperature": 0.0, "avg_logprob": -0.10014959257476184, "compression_ratio": 1.5791666666666666, "no_speech_prob": 0.016652721911668777}, {"id": 55, "seek": 36736, "start": 367.92, "end": 374.48, "text": " avoid you avoid using avoid utility classes that's the name of the blog post and in many states", "tokens": [50392, 5042, 291, 5042, 1228, 5042, 14877, 5359, 300, 311, 264, 1315, 295, 264, 6968, 2183, 293, 294, 867, 4368, 50720], "temperature": 0.0, "avg_logprob": -0.08463604870964499, "compression_ratio": 1.7488372093023257, "no_speech_prob": 0.013632602989673615}, {"id": 56, "seek": 36736, "start": 374.48, "end": 382.72, "text": " by the by the OOP principles an object should contain both data and a behavior performed", "tokens": [50720, 538, 264, 538, 264, 422, 12059, 9156, 364, 2657, 820, 5304, 1293, 1412, 293, 257, 5223, 10332, 51132], "temperature": 0.0, "avg_logprob": -0.08463604870964499, "compression_ratio": 1.7488372093023257, "no_speech_prob": 0.013632602989673615}, {"id": 57, "seek": 36736, "start": 382.72, "end": 389.28000000000003, "text": " over that data utility classes are just behavior all the data are passed as inputs it is in no", "tokens": [51132, 670, 300, 1412, 14877, 5359, 366, 445, 5223, 439, 264, 1412, 366, 4678, 382, 15743, 309, 307, 294, 572, 51460], "temperature": 0.0, "avg_logprob": -0.08463604870964499, "compression_ratio": 1.7488372093023257, "no_speech_prob": 0.013632602989673615}, {"id": 58, "seek": 36736, "start": 389.28000000000003, "end": 395.36, "text": " way object oriented it is more of a procedural way of thinking so it's you know because you keep", "tokens": [51460, 636, 2657, 21841, 309, 307, 544, 295, 257, 43951, 636, 295, 1953, 370, 309, 311, 291, 458, 570, 291, 1066, 51764], "temperature": 0.0, "avg_logprob": -0.08463604870964499, "compression_ratio": 1.7488372093023257, "no_speech_prob": 0.013632602989673615}, {"id": 59, "seek": 39536, "start": 395.36, "end": 401.44, "text": " that in mind when using utility classes but that's sort of an ancillary point and the book", "tokens": [50364, 300, 294, 1575, 562, 1228, 14877, 5359, 457, 300, 311, 1333, 295, 364, 364, 7383, 822, 935, 293, 264, 1446, 50668], "temperature": 0.0, "avg_logprob": -0.12395699818929036, "compression_ratio": 1.761467889908257, "no_speech_prob": 0.012619304470717907}, {"id": 60, "seek": 39536, "start": 401.44, "end": 408.48, "text": " Joshua Block states such utility classes were not designed to be instantiated an instance would be", "tokens": [50668, 24005, 17500, 4368, 1270, 14877, 5359, 645, 406, 4761, 281, 312, 9836, 72, 770, 364, 5197, 576, 312, 51020], "temperature": 0.0, "avg_logprob": -0.12395699818929036, "compression_ratio": 1.761467889908257, "no_speech_prob": 0.012619304470717907}, {"id": 61, "seek": 39536, "start": 408.48, "end": 414.40000000000003, "text": " nonsensical of course because all really for instance this this class in the collections class", "tokens": [51020, 297, 892, 694, 804, 295, 1164, 570, 439, 534, 337, 5197, 341, 341, 1508, 294, 264, 16641, 1508, 51316], "temperature": 0.0, "avg_logprob": -0.12395699818929036, "compression_ratio": 1.761467889908257, "no_speech_prob": 0.012619304470717907}, {"id": 62, "seek": 39536, "start": 414.40000000000003, "end": 419.84000000000003, "text": " all it really does is hold a whole bunch of static methods that will be used that that will be used", "tokens": [51316, 439, 309, 534, 775, 307, 1797, 257, 1379, 3840, 295, 13437, 7150, 300, 486, 312, 1143, 300, 300, 486, 312, 1143, 51588], "temperature": 0.0, "avg_logprob": -0.12395699818929036, "compression_ratio": 1.761467889908257, "no_speech_prob": 0.012619304470717907}, {"id": 63, "seek": 41984, "start": 419.84, "end": 427.59999999999997, "text": " by a client where we'll just pass data onto the function in the absence of explicit constructors", "tokens": [50364, 538, 257, 6423, 689, 321, 603, 445, 1320, 1412, 3911, 264, 2445, 294, 264, 17145, 295, 13691, 7690, 830, 50752], "temperature": 0.0, "avg_logprob": -0.08254540144507565, "compression_ratio": 1.6795580110497237, "no_speech_prob": 0.003323878161609173}, {"id": 64, "seek": 41984, "start": 427.59999999999997, "end": 435.12, "text": " however the compiler provides a public parameterless default constructor to use this to a user this", "tokens": [50752, 4461, 264, 31958, 6417, 257, 1908, 13075, 1832, 7576, 47479, 281, 764, 341, 281, 257, 4195, 341, 51128], "temperature": 0.0, "avg_logprob": -0.08254540144507565, "compression_ratio": 1.6795580110497237, "no_speech_prob": 0.003323878161609173}, {"id": 65, "seek": 41984, "start": 435.12, "end": 443.59999999999997, "text": " constructor is indistinguishable indistinguishable from any other it is not uncommon to see unintentionally", "tokens": [51128, 47479, 307, 1016, 468, 7050, 742, 712, 1016, 468, 7050, 742, 712, 490, 604, 661, 309, 307, 406, 29289, 281, 536, 45514, 379, 51552], "temperature": 0.0, "avg_logprob": -0.08254540144507565, "compression_ratio": 1.6795580110497237, "no_speech_prob": 0.003323878161609173}, {"id": 66, "seek": 44360, "start": 443.68, "end": 451.44, "text": " instantially unintentionally instantiable classes in published apis especially in public apis because", "tokens": [50368, 9836, 2270, 45514, 379, 9836, 9364, 5359, 294, 6572, 1882, 271, 2318, 294, 1908, 1882, 271, 570, 50756], "temperature": 0.0, "avg_logprob": -0.14041289363998966, "compression_ratio": 1.711111111111111, "no_speech_prob": 0.013632758520543575}, {"id": 67, "seek": 44360, "start": 452.08000000000004, "end": 456.08000000000004, "text": " so again this is a good example because firstly Joshua Block himself has written this but it's", "tokens": [50788, 370, 797, 341, 307, 257, 665, 1365, 570, 27376, 24005, 17500, 3647, 575, 3720, 341, 457, 309, 311, 50988], "temperature": 0.0, "avg_logprob": -0.14041289363998966, "compression_ratio": 1.711111111111111, "no_speech_prob": 0.013632758520543575}, {"id": 68, "seek": 44360, "start": 456.08000000000004, "end": 461.92, "text": " also just something that we're all familiar with this class here if he didn't explicitly state", "tokens": [50988, 611, 445, 746, 300, 321, 434, 439, 4963, 365, 341, 1508, 510, 498, 415, 994, 380, 20803, 1785, 51280], "temperature": 0.0, "avg_logprob": -0.14041289363998966, "compression_ratio": 1.711111111111111, "no_speech_prob": 0.013632758520543575}, {"id": 69, "seek": 44360, "start": 461.92, "end": 470.08000000000004, "text": " or whoever that wrote this code either Joshua Block or Neil Gaffta if the writer of this code", "tokens": [51280, 420, 11387, 300, 4114, 341, 3089, 2139, 24005, 17500, 420, 18615, 460, 2518, 1328, 498, 264, 9936, 295, 341, 3089, 51688], "temperature": 0.0, "avg_logprob": -0.14041289363998966, "compression_ratio": 1.711111111111111, "no_speech_prob": 0.013632758520543575}, {"id": 70, "seek": 47008, "start": 470.08, "end": 476.96, "text": " didn't explicitly state that this that explicitly put this private constructor when the collections", "tokens": [50364, 994, 380, 20803, 1785, 300, 341, 300, 20803, 829, 341, 4551, 47479, 562, 264, 16641, 50708], "temperature": 0.0, "avg_logprob": -0.07247175993742766, "compression_ratio": 1.8125, "no_speech_prob": 0.006487325765192509}, {"id": 71, "seek": 47008, "start": 476.96, "end": 485.36, "text": " class is used by a client the jbm or the compiler would think of it would think of this as being a", "tokens": [50708, 1508, 307, 1143, 538, 257, 6423, 264, 361, 65, 76, 420, 264, 31958, 576, 519, 295, 309, 576, 519, 295, 341, 382, 885, 257, 51128], "temperature": 0.0, "avg_logprob": -0.07247175993742766, "compression_ratio": 1.8125, "no_speech_prob": 0.006487325765192509}, {"id": 72, "seek": 47008, "start": 485.36, "end": 489.91999999999996, "text": " public constructor and would instantiate this class and create an object in the heap memory", "tokens": [51128, 1908, 47479, 293, 576, 9836, 13024, 341, 1508, 293, 1884, 364, 2657, 294, 264, 33591, 4675, 51356], "temperature": 0.0, "avg_logprob": -0.07247175993742766, "compression_ratio": 1.8125, "no_speech_prob": 0.006487325765192509}, {"id": 73, "seek": 47008, "start": 489.91999999999996, "end": 494.4, "text": " and that's not something we want especially from a utility class and then he continues", "tokens": [51356, 293, 300, 311, 406, 746, 321, 528, 2318, 490, 257, 14877, 1508, 293, 550, 415, 6515, 51580], "temperature": 0.0, "avg_logprob": -0.07247175993742766, "compression_ratio": 1.8125, "no_speech_prob": 0.006487325765192509}, {"id": 74, "seek": 49440, "start": 494.47999999999996, "end": 500.0, "text": " attempting to enforce non-instantiability by making a class abstract does not work either", "tokens": [50368, 22001, 281, 24825, 2107, 12, 48142, 72, 2310, 538, 1455, 257, 1508, 12649, 775, 406, 589, 2139, 50644], "temperature": 0.0, "avg_logprob": -0.11495143716985529, "compression_ratio": 1.8717948717948718, "no_speech_prob": 0.006096792407333851}, {"id": 75, "seek": 49440, "start": 500.71999999999997, "end": 507.59999999999997, "text": " the class can be subclassed so a sub class when the class is subclass let's say there's", "tokens": [50680, 264, 1508, 393, 312, 1422, 11665, 292, 370, 257, 1422, 1508, 562, 264, 1508, 307, 1422, 11665, 718, 311, 584, 456, 311, 51024], "temperature": 0.0, "avg_logprob": -0.11495143716985529, "compression_ratio": 1.8717948717948718, "no_speech_prob": 0.006096792407333851}, {"id": 76, "seek": 49440, "start": 508.15999999999997, "end": 514.0, "text": " abstract class a and we don't explicitly state well we don't really need even need to put a", "tokens": [51052, 12649, 1508, 257, 293, 321, 500, 380, 20803, 1785, 731, 321, 500, 380, 534, 643, 754, 643, 281, 829, 257, 51344], "temperature": 0.0, "avg_logprob": -0.11495143716985529, "compression_ratio": 1.8717948717948718, "no_speech_prob": 0.006096792407333851}, {"id": 77, "seek": 49440, "start": 514.0, "end": 518.48, "text": " constructor in an abstract class but let's say we have abstract class a and then b extends that", "tokens": [51344, 47479, 294, 364, 12649, 1508, 457, 718, 311, 584, 321, 362, 12649, 1508, 257, 293, 550, 272, 26448, 300, 51568], "temperature": 0.0, "avg_logprob": -0.11495143716985529, "compression_ratio": 1.8717948717948718, "no_speech_prob": 0.006096792407333851}, {"id": 78, "seek": 51848, "start": 518.48, "end": 524.32, "text": " class that a concrete class the moment that happens this is what happens the class can be subclass", "tokens": [50364, 1508, 300, 257, 9859, 1508, 264, 1623, 300, 2314, 341, 307, 437, 2314, 264, 1508, 393, 312, 1422, 11665, 50656], "temperature": 0.0, "avg_logprob": -0.10097749336906102, "compression_ratio": 1.8798076923076923, "no_speech_prob": 0.011868077330291271}, {"id": 79, "seek": 51848, "start": 524.32, "end": 532.88, "text": " and the sub and the subclass instantiated so b can still instantiate itself and it's a type of the", "tokens": [50656, 293, 264, 1422, 293, 264, 1422, 11665, 9836, 72, 770, 370, 272, 393, 920, 9836, 13024, 2564, 293, 309, 311, 257, 2010, 295, 264, 51084], "temperature": 0.0, "avg_logprob": -0.10097749336906102, "compression_ratio": 1.8798076923076923, "no_speech_prob": 0.011868077330291271}, {"id": 80, "seek": 51848, "start": 534.16, "end": 539.2, "text": " parent class a so instead of talking about it and trying to conceptualize it let me show a proper", "tokens": [51148, 2596, 1508, 257, 370, 2602, 295, 1417, 466, 309, 293, 1382, 281, 24106, 1125, 309, 718, 385, 855, 257, 2296, 51400], "temperature": 0.0, "avg_logprob": -0.10097749336906102, "compression_ratio": 1.8798076923076923, "no_speech_prob": 0.011868077330291271}, {"id": 81, "seek": 51848, "start": 539.2, "end": 546.72, "text": " example uh there's a utility class here for a moment i will get rid of this private constructor", "tokens": [51400, 1365, 2232, 456, 311, 257, 14877, 1508, 510, 337, 257, 1623, 741, 486, 483, 3973, 295, 341, 4551, 47479, 51776], "temperature": 0.0, "avg_logprob": -0.10097749336906102, "compression_ratio": 1.8798076923076923, "no_speech_prob": 0.011868077330291271}, {"id": 82, "seek": 54672, "start": 546.72, "end": 552.0, "text": " so now if this now this class can be instantiated and despite it not having any explicit code", "tokens": [50364, 370, 586, 498, 341, 586, 341, 1508, 393, 312, 9836, 72, 770, 293, 7228, 309, 406, 1419, 604, 13691, 3089, 50628], "temperature": 0.0, "avg_logprob": -0.08419315550062391, "compression_ratio": 1.9788359788359788, "no_speech_prob": 0.0009697180357761681}, {"id": 83, "seek": 54672, "start": 552.8000000000001, "end": 559.28, "text": " apropos a constructor the moment this class is instantiated it has a public constructor with", "tokens": [50668, 1882, 1513, 329, 257, 47479, 264, 1623, 341, 1508, 307, 9836, 72, 770, 309, 575, 257, 1908, 47479, 365, 50992], "temperature": 0.0, "avg_logprob": -0.08419315550062391, "compression_ratio": 1.9788359788359788, "no_speech_prob": 0.0009697180357761681}, {"id": 84, "seek": 54672, "start": 559.28, "end": 565.84, "text": " no args so then i have a child class here and this child class can extend the utility class", "tokens": [50992, 572, 3882, 82, 370, 550, 741, 362, 257, 1440, 1508, 510, 293, 341, 1440, 1508, 393, 10101, 264, 14877, 1508, 51320], "temperature": 0.0, "avg_logprob": -0.08419315550062391, "compression_ratio": 1.9788359788359788, "no_speech_prob": 0.0009697180357761681}, {"id": 85, "seek": 54672, "start": 566.5600000000001, "end": 571.84, "text": " as a result result of that we have a problem because this class is not going to be instantiated", "tokens": [51356, 382, 257, 1874, 1874, 295, 300, 321, 362, 257, 1154, 570, 341, 1508, 307, 406, 516, 281, 312, 9836, 72, 770, 51620], "temperature": 0.0, "avg_logprob": -0.08419315550062391, "compression_ratio": 1.9788359788359788, "no_speech_prob": 0.0009697180357761681}, {"id": 86, "seek": 57184, "start": 571.84, "end": 576.8000000000001, "text": " because of the because of the child class however if we go back to the utility the utility class", "tokens": [50364, 570, 295, 264, 570, 295, 264, 1440, 1508, 4461, 498, 321, 352, 646, 281, 264, 14877, 264, 14877, 1508, 50612], "temperature": 0.0, "avg_logprob": -0.0905850618735127, "compression_ratio": 1.925, "no_speech_prob": 0.016913311555981636}, {"id": 87, "seek": 57184, "start": 576.8000000000001, "end": 584.8000000000001, "text": " and if we add this private constructor explicitly if we go back to the child class it'll throw this", "tokens": [50612, 293, 498, 321, 909, 341, 4551, 47479, 20803, 498, 321, 352, 646, 281, 264, 1440, 1508, 309, 603, 3507, 341, 51012], "temperature": 0.0, "avg_logprob": -0.0905850618735127, "compression_ratio": 1.925, "no_speech_prob": 0.016913311555981636}, {"id": 88, "seek": 57184, "start": 584.8000000000001, "end": 590.96, "text": " error the IDE will say there is no default constructor available in this class that's good", "tokens": [51012, 6713, 264, 40930, 486, 584, 456, 307, 572, 7576, 47479, 2435, 294, 341, 1508, 300, 311, 665, 51320], "temperature": 0.0, "avg_logprob": -0.0905850618735127, "compression_ratio": 1.925, "no_speech_prob": 0.016913311555981636}, {"id": 89, "seek": 57184, "start": 591.6, "end": 596.32, "text": " which is what we want well it's not really what we want because this is after all a utility class", "tokens": [51352, 597, 307, 437, 321, 528, 731, 309, 311, 406, 534, 437, 321, 528, 570, 341, 307, 934, 439, 257, 14877, 1508, 51588], "temperature": 0.0, "avg_logprob": -0.0905850618735127, "compression_ratio": 1.925, "no_speech_prob": 0.016913311555981636}, {"id": 90, "seek": 59632, "start": 596.32, "end": 602.24, "text": " and it it isn't created to be inherited and that's exactly what Joshua Block states", "tokens": [50364, 293, 309, 309, 1943, 380, 2942, 281, 312, 27091, 293, 300, 311, 2293, 437, 24005, 17500, 4368, 50660], "temperature": 0.0, "avg_logprob": -0.10094352201981978, "compression_ratio": 1.6788990825688073, "no_speech_prob": 0.006691190879791975}, {"id": 91, "seek": 59632, "start": 603.9200000000001, "end": 608.72, "text": " furthermore it's it misleads the user into thinking the class was designed for inheritance", "tokens": [50744, 3052, 3138, 309, 311, 309, 3346, 306, 5834, 264, 4195, 666, 1953, 264, 1508, 390, 4761, 337, 32122, 50984], "temperature": 0.0, "avg_logprob": -0.10094352201981978, "compression_ratio": 1.6788990825688073, "no_speech_prob": 0.006691190879791975}, {"id": 92, "seek": 59632, "start": 609.36, "end": 617.36, "text": " we don't have to inherit just to prevent it from being um let's say uh instantiated playing all", "tokens": [51016, 321, 500, 380, 362, 281, 21389, 445, 281, 4871, 309, 490, 885, 1105, 718, 311, 584, 2232, 9836, 72, 770, 2433, 439, 51416], "temperature": 0.0, "avg_logprob": -0.10094352201981978, "compression_ratio": 1.6788990825688073, "no_speech_prob": 0.006691190879791975}, {"id": 93, "seek": 59632, "start": 617.36, "end": 623.12, "text": " these games making an abstract class none of that it's it's useless it also misleads the client", "tokens": [51416, 613, 2813, 1455, 364, 12649, 1508, 6022, 295, 300, 309, 311, 309, 311, 14115, 309, 611, 3346, 306, 5834, 264, 6423, 51704], "temperature": 0.0, "avg_logprob": -0.10094352201981978, "compression_ratio": 1.6788990825688073, "no_speech_prob": 0.006691190879791975}, {"id": 94, "seek": 62312, "start": 623.12, "end": 628.72, "text": " that's what he's trying to say here because this utility class wasn't created uh to be subclassed", "tokens": [50364, 300, 311, 437, 415, 311, 1382, 281, 584, 510, 570, 341, 14877, 1508, 2067, 380, 2942, 2232, 281, 312, 1422, 11665, 292, 50644], "temperature": 0.0, "avg_logprob": -0.10969951417711046, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.009410027414560318}, {"id": 95, "seek": 62312, "start": 628.72, "end": 634.64, "text": " so of course the best solution is to explicitly define a private construct as i have done here", "tokens": [50644, 370, 295, 1164, 264, 1151, 3827, 307, 281, 20803, 6964, 257, 4551, 7690, 382, 741, 362, 1096, 510, 50940], "temperature": 0.0, "avg_logprob": -0.10969951417711046, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.009410027414560318}, {"id": 96, "seek": 62312, "start": 634.64, "end": 642.88, "text": " and not notabene as we saw before this does prevent this utility class from being subclassed", "tokens": [50940, 293, 406, 406, 455, 1450, 382, 321, 1866, 949, 341, 775, 4871, 341, 14877, 1508, 490, 885, 1422, 11665, 292, 51352], "temperature": 0.0, "avg_logprob": -0.10969951417711046, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.009410027414560318}, {"id": 97, "seek": 62312, "start": 642.88, "end": 649.04, "text": " because it throws error there and that's important to keep in mind but generally no one really inherits", "tokens": [51352, 570, 309, 19251, 6713, 456, 293, 300, 311, 1021, 281, 1066, 294, 1575, 457, 5101, 572, 472, 534, 9484, 1208, 51660], "temperature": 0.0, "avg_logprob": -0.10969951417711046, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.009410027414560318}, {"id": 98, "seek": 64904, "start": 649.04, "end": 656.88, "text": " utility classes because they just hold static methods uh he continues there is however a simple", "tokens": [50364, 14877, 5359, 570, 436, 445, 1797, 13437, 7150, 2232, 415, 6515, 456, 307, 4461, 257, 2199, 50756], "temperature": 0.0, "avg_logprob": -0.05084995381972369, "compression_ratio": 1.7276785714285714, "no_speech_prob": 0.01744024083018303}, {"id": 99, "seek": 64904, "start": 656.88, "end": 663.68, "text": " idiom to ensure non-instantiability a default constructor is generated only if a class contains", "tokens": [50756, 18014, 298, 281, 5586, 2107, 12, 48142, 72, 2310, 257, 7576, 47479, 307, 10833, 787, 498, 257, 1508, 8306, 51096], "temperature": 0.0, "avg_logprob": -0.05084995381972369, "compression_ratio": 1.7276785714285714, "no_speech_prob": 0.01744024083018303}, {"id": 100, "seek": 64904, "start": 663.68, "end": 670.88, "text": " no explicit constructors so a class can be made non-instantiable by including a private constructor", "tokens": [51096, 572, 13691, 7690, 830, 370, 257, 1508, 393, 312, 1027, 2107, 12, 48142, 9364, 538, 3009, 257, 4551, 47479, 51456], "temperature": 0.0, "avg_logprob": -0.05084995381972369, "compression_ratio": 1.7276785714285714, "no_speech_prob": 0.01744024083018303}, {"id": 101, "seek": 64904, "start": 670.88, "end": 675.8399999999999, "text": " that's exactly what we've done here now indeed you may wonder why line number 11 why do we need", "tokens": [51456, 300, 311, 2293, 437, 321, 600, 1096, 510, 586, 6451, 291, 815, 2441, 983, 1622, 1230, 2975, 983, 360, 321, 643, 51704], "temperature": 0.0, "avg_logprob": -0.05084995381972369, "compression_ratio": 1.7276785714285714, "no_speech_prob": 0.01744024083018303}, {"id": 102, "seek": 67584, "start": 675.84, "end": 680.88, "text": " this through a new assertion error why not just leave it like that as a as a private constructor", "tokens": [50364, 341, 807, 257, 777, 19810, 313, 6713, 983, 406, 445, 1856, 309, 411, 300, 382, 257, 382, 257, 4551, 47479, 50616], "temperature": 0.0, "avg_logprob": -0.06679355687108533, "compression_ratio": 1.751111111111111, "no_speech_prob": 0.02842865139245987}, {"id": 103, "seek": 67584, "start": 680.88, "end": 689.0400000000001, "text": " this is simply due to sometimes programmers making mistakes where i'll just read it off the book", "tokens": [50616, 341, 307, 2935, 3462, 281, 2171, 41504, 1455, 8038, 689, 741, 603, 445, 1401, 309, 766, 264, 1446, 51024], "temperature": 0.0, "avg_logprob": -0.06679355687108533, "compression_ratio": 1.751111111111111, "no_speech_prob": 0.02842865139245987}, {"id": 104, "seek": 67584, "start": 689.0400000000001, "end": 696.4, "text": " he explains it much clearer than i do the assertion error so that's right here isn't strictly required", "tokens": [51024, 415, 13948, 309, 709, 26131, 813, 741, 360, 264, 19810, 313, 6713, 370, 300, 311, 558, 510, 1943, 380, 20792, 4739, 51392], "temperature": 0.0, "avg_logprob": -0.06679355687108533, "compression_ratio": 1.751111111111111, "no_speech_prob": 0.02842865139245987}, {"id": 105, "seek": 67584, "start": 696.4, "end": 701.84, "text": " that's correct we can just leave the constructor private and leave the body empty but it provides", "tokens": [51392, 300, 311, 3006, 321, 393, 445, 1856, 264, 47479, 4551, 293, 1856, 264, 1772, 6707, 457, 309, 6417, 51664], "temperature": 0.0, "avg_logprob": -0.06679355687108533, "compression_ratio": 1.751111111111111, "no_speech_prob": 0.02842865139245987}, {"id": 106, "seek": 70184, "start": 701.84, "end": 709.2, "text": " insurance in case the constructor is accidentally invoked from within the class so an example for", "tokens": [50364, 7214, 294, 1389, 264, 47479, 307, 15715, 1048, 9511, 490, 1951, 264, 1508, 370, 364, 1365, 337, 50732], "temperature": 0.0, "avg_logprob": -0.09129004094792509, "compression_ratio": 1.7867298578199051, "no_speech_prob": 0.0073449513874948025}, {"id": 107, "seek": 70184, "start": 709.2, "end": 716.48, "text": " that would be here uh this public static void main method uh i'm trying to instantiate this class", "tokens": [50732, 300, 576, 312, 510, 2232, 341, 1908, 13437, 22009, 2135, 3170, 2232, 741, 478, 1382, 281, 9836, 13024, 341, 1508, 51096], "temperature": 0.0, "avg_logprob": -0.09129004094792509, "compression_ratio": 1.7867298578199051, "no_speech_prob": 0.0073449513874948025}, {"id": 108, "seek": 70184, "start": 716.48, "end": 724.32, "text": " what you'll see now is if i run this it'll throw an error it will throw a throw new", "tokens": [51096, 437, 291, 603, 536, 586, 307, 498, 741, 1190, 341, 309, 603, 3507, 364, 6713, 309, 486, 3507, 257, 3507, 777, 51488], "temperature": 0.0, "avg_logprob": -0.09129004094792509, "compression_ratio": 1.7867298578199051, "no_speech_prob": 0.0073449513874948025}, {"id": 109, "seek": 70184, "start": 724.32, "end": 731.6, "text": " assertion error right there so even from within the class we can't instantiate that class however", "tokens": [51488, 19810, 313, 6713, 558, 456, 370, 754, 490, 1951, 264, 1508, 321, 393, 380, 9836, 13024, 300, 1508, 4461, 51852], "temperature": 0.0, "avg_logprob": -0.09129004094792509, "compression_ratio": 1.7867298578199051, "no_speech_prob": 0.0073449513874948025}, {"id": 110, "seek": 73160, "start": 731.6, "end": 738.0, "text": " if we didn't have this assertion error throw new assertion error that that would be possible someone", "tokens": [50364, 498, 321, 994, 380, 362, 341, 19810, 313, 6713, 3507, 777, 19810, 313, 6713, 300, 300, 576, 312, 1944, 1580, 50684], "temperature": 0.0, "avg_logprob": -0.09308456552439723, "compression_ratio": 1.7533039647577093, "no_speech_prob": 0.0012253941968083382}, {"id": 111, "seek": 73160, "start": 738.0, "end": 745.84, "text": " could whoops someone could do it from within the class and unfortunately now this class it lost its", "tokens": [50684, 727, 567, 3370, 1580, 727, 360, 309, 490, 1951, 264, 1508, 293, 7015, 586, 341, 1508, 309, 2731, 1080, 51076], "temperature": 0.0, "avg_logprob": -0.09308456552439723, "compression_ratio": 1.7533039647577093, "no_speech_prob": 0.0012253941968083382}, {"id": 112, "seek": 73160, "start": 745.84, "end": 752.8000000000001, "text": " non-instantiability property and then he continues this idiom is mildly counting intuitive because", "tokens": [51076, 2107, 12, 48142, 72, 2310, 4707, 293, 550, 415, 6515, 341, 18014, 298, 307, 15154, 356, 13251, 21769, 570, 51424], "temperature": 0.0, "avg_logprob": -0.09308456552439723, "compression_ratio": 1.7533039647577093, "no_speech_prob": 0.0012253941968083382}, {"id": 113, "seek": 73160, "start": 752.8000000000001, "end": 759.6, "text": " the constructor is provided expressly so that it cannot be invoked it is therefore wise to include", "tokens": [51424, 264, 47479, 307, 5649, 5109, 356, 370, 300, 309, 2644, 312, 1048, 9511, 309, 307, 4412, 10829, 281, 4090, 51764], "temperature": 0.0, "avg_logprob": -0.09308456552439723, "compression_ratio": 1.7533039647577093, "no_speech_prob": 0.0012253941968083382}, {"id": 114, "seek": 75960, "start": 759.6800000000001, "end": 765.9200000000001, "text": " a comment as shown earlier so that's what he's done here like number nine oh this is something", "tokens": [50368, 257, 2871, 382, 4898, 3071, 370, 300, 311, 437, 415, 311, 1096, 510, 411, 1230, 4949, 1954, 341, 307, 746, 50680], "temperature": 0.0, "avg_logprob": -0.07424640655517578, "compression_ratio": 1.731818181818182, "no_speech_prob": 0.009706051088869572}, {"id": 115, "seek": 75960, "start": 765.9200000000001, "end": 770.72, "text": " we touched on before as a side effect the idiom also prevents the class from being subclassed i", "tokens": [50680, 321, 9828, 322, 949, 382, 257, 1252, 1802, 264, 18014, 298, 611, 22367, 264, 1508, 490, 885, 1422, 11665, 292, 741, 50920], "temperature": 0.0, "avg_logprob": -0.07424640655517578, "compression_ratio": 1.731818181818182, "no_speech_prob": 0.009706051088869572}, {"id": 116, "seek": 75960, "start": 770.72, "end": 779.2, "text": " did already demonstrate that uh with this this example here all constructors must evoke a super", "tokens": [50920, 630, 1217, 11698, 300, 2232, 365, 341, 341, 1365, 510, 439, 7690, 830, 1633, 1073, 2949, 257, 1687, 51344], "temperature": 0.0, "avg_logprob": -0.07424640655517578, "compression_ratio": 1.731818181818182, "no_speech_prob": 0.009706051088869572}, {"id": 117, "seek": 75960, "start": 779.2, "end": 785.0400000000001, "text": " class constructor explicitly or implicitly and a subclass would have no accessible super class", "tokens": [51344, 1508, 47479, 20803, 420, 26947, 356, 293, 257, 1422, 11665, 576, 362, 572, 9515, 1687, 1508, 51636], "temperature": 0.0, "avg_logprob": -0.07424640655517578, "compression_ratio": 1.731818181818182, "no_speech_prob": 0.009706051088869572}, {"id": 118, "seek": 78504, "start": 785.12, "end": 792.8, "text": " constructed and invoked so when this is subclass this child utility class invokes the constructor", "tokens": [50368, 17083, 293, 1048, 9511, 370, 562, 341, 307, 1422, 11665, 341, 1440, 14877, 1508, 1048, 8606, 264, 47479, 50752], "temperature": 0.0, "avg_logprob": -0.11065133782320244, "compression_ratio": 1.7397260273972603, "no_speech_prob": 0.0017816449981182814}, {"id": 119, "seek": 78504, "start": 792.8, "end": 798.0799999999999, "text": " of the superclass and with its private that wouldn't happen that's it it's simple as that", "tokens": [50752, 295, 264, 1687, 11665, 293, 365, 1080, 4551, 300, 2759, 380, 1051, 300, 311, 309, 309, 311, 2199, 382, 300, 51016], "temperature": 0.0, "avg_logprob": -0.11065133782320244, "compression_ratio": 1.7397260273972603, "no_speech_prob": 0.0017816449981182814}, {"id": 120, "seek": 78504, "start": 798.0799999999999, "end": 805.04, "text": " fuel answer code as i said the shortest item the next item item number four is a very very exciting", "tokens": [51016, 6616, 1867, 3089, 382, 741, 848, 264, 31875, 3174, 264, 958, 3174, 3174, 1230, 1451, 307, 257, 588, 588, 4670, 51364], "temperature": 0.0, "avg_logprob": -0.11065133782320244, "compression_ratio": 1.7397260273972603, "no_speech_prob": 0.0017816449981182814}, {"id": 121, "seek": 78504, "start": 805.04, "end": 812.3199999999999, "text": " i'm really keen to dive deep into this is prefer dependence injection to hardwiring resources", "tokens": [51364, 741, 478, 534, 20297, 281, 9192, 2452, 666, 341, 307, 4382, 31704, 22873, 281, 1152, 86, 5057, 3593, 51728], "temperature": 0.0, "avg_logprob": -0.11065133782320244, "compression_ratio": 1.7397260273972603, "no_speech_prob": 0.0017816449981182814}, {"id": 122, "seek": 81232, "start": 812.32, "end": 814.32, "text": " recently i've been taking a", "tokens": [50392, 3938, 741, 600, 668, 1940, 257, 50464], "temperature": 0.0, "avg_logprob": -0.6867410871717665, "compression_ratio": 0.7714285714285715, "no_speech_prob": 0.061651088297367096}], "language": "en"}