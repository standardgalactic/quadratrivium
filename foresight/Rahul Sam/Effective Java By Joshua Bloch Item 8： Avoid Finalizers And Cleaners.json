{"text": " Hey everyone, welcome to yet another episode of my video series on Joshua Block's Effective Java, where I take the items that he has enumerated in this book and expound on them, trying to make sense of them. And hopefully, as I do that, you can gain some value from it too. You can hopefully learn something from it. That at least is one reason that I put out these videos out in the public. Without further ado, let me get started. This is certainly one of the longest items that I had to go through and probably going to be the longest video of this series as of yet. In fact, I was thinking if I should break this down into two videos because the video might be too long. In any case, let's get started with the proviso. I've been doing this proviso slash instruction in every single video. So if you have been following along, please do skip this bit to save your time. The first point in the proviso is of course, and it's a very important point, this is not a tutorial. I'm not a teacher, nor am I an expert. Therefore, don't think of what I say as gospel's truth. In fact, when I do make mistakes, I'll try and correct them down during the comment section. And as I've said in the second point, think of this as the blind, leading the blind. This is purely an exploratory disposition. I'm trying to figure something out publicly and in a very, let's say, what's what I'm looking for. I'd say thinking out loud, trying to make sense of these items, not just in the videos itself, but even preparing for them as I post questions on Stack Overflow, as I try to involve the community. I feel like hopefully, you know, I'm adding some value into the programming community, the Java community, by asking certain questions pertaining to this book, as I'm trying to learn, which is why I call it an exploratory disposition. It's a collective endeavor. And as I did touch on a bit before, I will inevitably make mistakes. So please point them out, not just for my sake, perhaps even more for the sake of the viewers, because I certainly don't want to mislead them by sharing any misinformation to use a politically overloaded term. And of course, as this is a programming video series, all the code is available on GitHub, not just mine, but even Joshua Bloch's public repository where he's published the code that he's used for this book. Saying all that, let us get started with item number eight, which, as I said, is a long one. There are a few concepts that I had to sort of think about and muse and reflect for a bit to get my head around. But it was a very interesting item as I found all the items in this book. And especially if you're a Java fan, like myself, for all, even though I don't program in Java in my day job anymore, Java is my first love venue. Never forget your first one, isn't it? I'm sorry, that was pathetic, but I can't help myself. Okay, item number eight, avoid finalizers and cleaners. And we're still in chapter two, creating and destroying objects. And again, as I said, all the code available on my GitHub repo, links down below in the description. And I've kind of added like this, another caveat here. This item does have a lot of theory. So before we get into the code, which of course I have right here, before we get into any of this code, I think it's important to get through some theory. Just in general, I prefer doing that to get a conceptual understanding. But specifically this item, I think has a lot more theory. So as I normally do, let's look at some keywords here. Avoid finalizers and cleaners. What the hell are finalizers and cleaners? Full disclosure, I've never used a finalizer nor a cleaner. A cleaner, yes, but I've never used a finalizer in my day job when I used to do a lot more hands-on Java programming. But here are a few definitions that I found on finalizers. In fact, they're from Baildang, my favorite Java learning blog slash website. And then of course, the Oracle docs. So finalizers, the, sorry, I had to think about that just for a bit. I didn't want to mindlessly read out the definition. Essentially, I mean, finalizers is simply a method we're talking about, which is in the object class, which the, in the class hierarchy in Java, the object class is right at the top. So everything is a subclass of object Java, FII. The finalize method for all intents and purposes is what we call the finalizer. Even though finalizers is more like a mechanism. And Baildang states finalizers get involved when JVM figures out that this particular instance should be garbage collected. So when the JVM understands that a certain object or an instance of a class is ready to be garbage collected, it can be involved, this finalized method. Such a finalizer may perform any operations, including bringing the object back to life. That bit, full disclosure, I don't understand. I didn't really go into detail as to what it means bringing the object back to life. Perhaps it's referring to the object later again in the code and then, you know, allocating memory to it. But even in the item, Joshua Block hasn't really got into what that means. This is just a definition from Baildang. The main purpose of a finalizer is, however, to release resources used by objects before they're removed from memory. A finalizer can work as a primary mechanism for cleanup operations or as a safety net when other methods fail. So at a very high level, just a good bit of start is to think of finalizers being related to memory management and garbage collection. It's not something particularly done by the JVM. Programmers could do it too, explicitly. But of course, a caveat is we should in fact avoid using finalizers and cleaners. That is the caveat here. So even though it's possible, doesn't mean we should do it. So again, to repeat the point, think of finalizers as something that relates to memory management and garbage collection and ensuring that any unreferenced objects are cleaned and that resources are freed up. And then another definition again from the Oracle docs this time is, as I said, finalize is part of the object class. If you go take a look at the docs, it'll even state, if only my internet loads, it'll even state the finalize method is there. As you can see there, it'll say they're called by the garbage collector on an object when garbage collection determines that there are no more references to the object. The general contract of finalize is that it is invoked if and when the Java virtual machine has determined that there's no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. So, okay, effectively this means when the object is not going to be used, we need to free up that resource and get that memory back to be used for something else. That's what finalize is. But, again, we shouldn't use them. That's the point Joshua Book is trying to make. Okay, so the first keyword finalize is we've got a very high level conceptual understanding of what it is. Let's take a look at what cleaners are, which is kind of like an evolution of finalizers and is perhaps a bit safer to use, even though that too should try and be avoided ideally. Once again from the, so cleaner is in fact, let me open it up. It's an interface. Sorry. Sorry, I meant to say cleaner is a subclass of object. I was thinking of auto-closable, which is an interface. We'll talk about that later on. And the definitions for the cleaner is, again, by the Oracle docs. Cleaner manages a set of object references and corresponding cleaning actions. Cleaning actions are registered to run after the cleaner is notified that the object has become phantom reachable. So what is phantom reachable? I did discuss this in the previous item, item number seven. I'm not going to go into too much detail, because you could just watch that video. But phantom reachable is when an object has no strong soft or weak references, but at least one phantom reference. So this kind of has to do with how the JVM algorithms, or how garbage collection algorithms, decide if a certain object has to be, or can be garbage collected. So basically, strong objects can never be garbage collected. And then it's sort of the, there's like a cascading effect, not a cascading effect, there's like a triaging process where it goes from strong, soft, weak, and then the lowest one is a phantom reference. Read this document by Bialdown, which goes into detail, of course, linked to this in the description too, for more context. I'm not going to go into detail because it's sort of out of scope for this item. And as I've said here, these delineate when objects can be garbage collected. That's what phantom references do. And with cleaners, cleaners are used when an object has become phantom reachable. That's how it relates. And then another definition from inside Java by Roger Riggs is, unlike a finalizer, a cleanup function holds the state needed for cleanup separately from the object because we want the object to be reclaimed as soon as it is unreachable. When it states, when it states reclaiming an object, what that really means is freeing up memory. So we can use it for something else. The cleanup function must be able to work independently from the object. It's correct. It should be able to run on a separate thread for instance. And that does happen. We shall see an example. If there are any references to the object from the cleanup function, it would still be reachable and could not be reclaimed. Any state needed for the cleanup must be encapsulated in the cleanup function. What does that mean? I believe what this means is, when the cleanup does take place, so a quick peek in the code, let's say the cleanup happens. Let's say this close method. This is a bit different. Ignore all this. But the state of an object should be local to the state of an object. When the cleanup is taking place. I believe that's what it means. It's encapsulated within this method. Ignore all this, but it's a really sub-art context, but we shall get this code a bit later. Okay, now we get to the items, what Joshua Block has stated in the item in the book. And the first thing is, the first thing we need to do is, we need to take a look at the state of an object. And the first thing is, he's kind of talking to C++ programmers. And a point he wants to make salient and very clear is that finalizers or cleaners are not the same as destructors in C++. Now, obviously, because C++, I'm not a C++ programmer in any way, I've probably written like 10 lines of C++ code in my life, probably a bit more than that. I did do a unit, a data structure and a patterns unit back in uni, which was a, which was in C++. And obviously, so because C++ doesn't have automatic memory management or garbage cleaning, we need to do it ourselves, the programmer. So I believe it's done through destructors. Take what I say with a great assault. Maybe they'd rather us do it. But one way it is done in C++, probably the most popular way is using destructors and Joshua Block and once we make it clear that cleaners and finalizers are not the same as destructors. And here's what he states. Finalizers are unpredictable, often dangerous and generally unnecessary. I shall also discuss that bit about them being unpredictable or non-deterministic as to why that's a huge risk when programming as we go into the item. And then he states, as of Java 9, this is an important point, finalizers have been deprecated, but they are still being used by the Java libraries. The Java 9 replacement for finalizers is cleaners. Cleaners are less dangerous than finalizers, but still unpredictable, slow and generally unnecessary. So this, which is why we should be avoiding avoiding old finalizers and cleaners. So despite having the caveat that finalizers and cleaners aren't the same as destructors, he states, or he continues, C++ destructors are also used to reclaim other non-memory resources. In Java, a try with resources or try finally block is used for this purpose. And then he continues, one shortcoming of finalizers and cleaners is that there's no guarantee they'll be executed promptly. Yes, before I read that, I need to go through the notes that I took down. So I had to go through the code base a bit and read up again, because I wrote this a while back and I've forgotten some bits as to how it's all going to come together. In fact, by my struggle to demo this, to demonstrate this problem, is in many ways the point Joshua Block is trying to make that it is non-deterministic. I can't exactly show the problem with finalizers because due to it's, it's not deterministic. And in programming, you'd expect code to be deterministic and causal. The big problem with using cleaners and finalizers is firstly that we aren't sure when the garbage collection will take place. We don't, we aren't sure when the, when GC will run and JVM can do it, which will be anytime it wants. Even though it is possible, as I will show in a bit, for us to explicitly run a GC or a garbage collection cycle, it is not, it's ill-advised. One shouldn't, one shouldn't do this. There are many other side effects that can affect the program. And it's possible that the finalizer thread, so the thread where the closing of the objects taking place can be of low priority that can lead to an out-of-memory error. Because some other threads would run, take up all the memory and when this thread runs, that can throw an out-of-memory error. Even, and then there's again another caveat that cleaners in fact do run in the background. And the garbage collection is controlled by the class itself. The class owns that garbage collection. However, there still is a problem of it not being, of it not running promptly. Sorry, I made a mistake there. The garbage collection doesn't have, sorry, the class doesn't have control of the garbage collection, but it has control of its own threads, which we shall see because we use a runnable interface. And nevertheless, it still does not guarantee the promptness. And due to the non-determinism in both cleaners and finalizers. Now I'll quickly show what the hell finalizer even is, because there isn't really a proper example given in the book. I found an example courtesy of Byle Dunn. But before I show the code base, let's go through some something a bit more, let's say, clear. And I try to be a bit more explicit as to what Joshua Block has written here, because I think I didn't do a good job at explaining that. Here's what he states. One shortcoming of finalizers and cleaners is that there is no guarantee they'll be executed promptly. It can take arbitrarily a little between the time that an object becomes unreachable and the time its finalizers or cleaners run. This means that you should never do anything time critical in a finalizer or cleaner. The promptness with which finalizes and cleaners executed is primarily a function of the garbage collection algorithm, which varies widely across implementations. So what does that mean? The thing is, even after the finalizer runs, a GC still has to run in the background, clear up resources, clear up memory. But before we get to the idea of the promptness, let's take a look at what the hell a finalizer even is. So I was going through this example, as I said, courtesy of Violet Dung, and let me try to open up that article if I could find it. This one right here. It was this article that he wrote, and he's just given a background as to what finalizers are. Even though in the article S it goes, it does say why you shouldn't use it. It talks about why we should take care of garbage collection, because JVM knows better, in fact. And I have this class called Finalizable, and I have an instance, a buffered read instance. And then the constructor, what I'm doing is reading a file, getting an input stream, and then saving a new buffered read instance in this private variable of declared, class variable of declared here. And it does specify from the specified class part, from some nature quotes. And here we have a method called ReadFirstLine, which reads from the first line. So if this works as expected, it should read without music, life would be a mistake by Mr. Nietzsche, and I very much agree. And then once we have this instance created, we need to clean it. We need to finalize it. And here's where, sorry, we need to close it, apologies. And here's where the problem occurs. Now, once we have this reader, the buffered instance reader, which we declared here, it's used, we do the reading, whatever, and then it's used, and then we're done with it. We need to use a finalized method, which, as you can see, is deprecated. The IntelliJ does specify that, that is deprecated. It needs to be closed, which implies that the method was called, and it has to clean up the resource. So in this finalize method, it'll close the resource. And now when I run the unit test, you will say it'll say closed buffered reader in the finalizer. If not, it'll just throw an error. If I go to the unit test that I wrote, and if I run this, you can see it's printing that line here. I could probably zoom into that a little bit. Closed buffer reader in the finalizer. Really, that's what a finalizer does, even though we shouldn't use it. And yeah, over here, you can go through the code later on. I'm just checking if it's printing the first line. That's not pertinent to the point I'm trying to make. And then this is important, though, because the GC is rather arbitrary. Well, it's not arbitrary, but we don't have really control of when garbage collection will take place. The JVM does that. We're using a system.gc, but it shouldn't be invoked this explicitly. This is not something we should do, again, due to its non-deterministic behavior. So you probably can see it's like a theme that's going to be in this whole item. The big problem with cleaners and finalizers is non-determinism, and it's the fact that it's tardy. It's tardiness that's not prompt, which is why Joshua Block states, as we continue, tardy finalization is not just a theoretical problem. Providing a finalizer for a class can arbitrarily delay reclamation of its instances. And that's a problem. The language specification makes no guarantees, sorry, I'll read that again. The language specification makes no guarantees as to which thread will execute finalizers as there is no portable way to prevent this sort of problem other than to refrain from using finalizers. And then, of course, as I stated, unlike finalizers, we still can use cleaners. Cleaners aren't deprecated yet. And they would give us control of the thread, of the class that's using it. But still, ultimately, the garbage collection, we still have no control. The JVM has control, which is probably why we should avoid using cleaners too. As he states here, as a consequence, you should never depend on a finalizer or cleaner to update persistence state. That's correct if it's like a database connection or something that requires persistence. For example, depending on a finalizer or cleaner to release a persistent lock on a shared resource such as a database is a good way to bring your entire distributed system to a grinding halt. Oh, that is something you certainly don't need. Programming is easy. It's really easy. It only gets complicated once it becomes distributed programming and when concurrency gets involved. And that's why I have a beautiful gift of my favorite actress, Margaret Robbie, probably the most beautiful woman in the world, after a certain other woman that I'm currently in love with. But we shall not talk about that. Don't be seduced. That's the point I'm trying to make. Do not be seduced by Margaret Robbie, nor be seduced by the methods system.gc or system.run finalization. So, which is why, just to go back to the unit as before, I said it here, one shouldn't do this. This is a bad move. This, try and prevent, try and, yeah, try and prevent using system.gc in your code, again, due to its non-determinism, because both of these, the garbage collection and what runs the finalization method makes no guarantee that they'll actually get executed. And in fact, these two methods run finalize their own exit, which are two other methods that can be, that pertains to finalizes have been deprecated because they aren't safe. Another red flag, especially if you're an API designer and aren't all programmers designing APIs these days, is that finalizes ignore uncaught exceptions and doesn't notify the client what the hell is going on if you do use a finalizer and there's a corrupt object. So, for instance, let's say we have an object in corrupt state due to the non-deterministic arbitrary behavior of a finalizer. Let's say we have an object that isn't fully cleaned up or an object that shouldn't be accessed by another thread. When the object crashes, this thread will not be terminated by a finalizer, whereas a JVM would certainly do that. It would make sure that if a thread crashes, if some competition goes wrong somewhere and some error is thrown, it's physically clear and explicit to a user of an API and it would be terminated and cleaned up. This is a problem because if you do use finalizer, it'll allow objects in a corrupt state to be accessed by a client of an API, which is why, again, he states, another problem with finalizes is that an uncaught exception thrown during finalization is ignored and finalization of that object terminates. Uncaught exceptions can leave other objects in a corrupt state, but when an object is left in a corrupt state and an exception is thrown, generally you'd see that exception in the stack trace. With finalizers, there wouldn't be that and, in fact, he says it won't even print a warning. But, however, with cleaners, it's on an issue because with cleaners, the library or a class for all intents and purposes using a cleaner has control of its thread, so the class itself can throw this exception. So it's a bit safer than using finalizers even though the item as a whole states avoid both. The other issue is performance penalty. Finalizers inhibit efficient garbage collection because we are trying to manoeuvre do the garbage collection instead of letting the JVM do it. And even though cleaners are still faster than finalizers, it's still slower than using the auto-closable interface, which we shall get to in the item, later on in the item. So the other problem is, of course, yes, performance penalty, and that's why Dr. Block states there's severe performance penalty for using finalizers and cleaners. It is about 50 times slower to create and destroy objects with finalizers. This is primarily because finalizers inhibit efficient garbage collection. And then we get to probably one of the biggest issues with using finalizers and cleaners, and it's that it does leave our program vulnerable to malicious code and security attacks. This point, despite being an important point, I found it a bit difficult to understand, especially because I couldn't get what he meant by having a malicious subclass. But this is what I meant, but I'm trying to collectively learn here. I did post a question on Stack Overflow, and I got some really good answers. And then finally, Holga, great blog. I'm assuming it's a blog. The person answered the question, and it was, I think it was somewhat clear. It did make sense. So all credit goes to Holga. I'll leave an answer to this question down below in the description, where he explains how finalizers, in fact, do create security problems. And before I read what Dr. Block has stated, let's go through some code and understand what this issue is, practically. So firstly, I've written this class called Finalizer Attack Example, and that also has an inner class. This inner class, in fact, is what is supposed to do the cleaning up. So it's got this check call method, which is kind of like a Boolean, which is just like a security check that verifies where that calls this, has permissions, let's say. That's a bad way of putting it. But just for all the intents and purposes think that all callers are invalid for our demo. And then we have this method, which does some critical action. That's it's really important. So I forgot to mention that since the inner class is static, that won't allow the JVM to garbage collect this resource. And then we have this malicious subclass that extends the resource class. So this is where the issue lies. This resource class, once it was used, should have died on the vine, as Dr. Block would state in this item. It should have got garbage collected, and no one should have access to it to that object. However, because we know that the finalized method can be accessed via the object superclass of resource class. And then the fact that the malicious subclass extends the resource class, all it's got to do is override the finalized method and invoke it. And the moment it's invoked, this object, which is probably a corrupt object now is resurrected. And that gives this malicious subclass access to this critical action method, which probably could do something like access the database or do something that could potentially calm your application and its uses. So which is why when I run this code, you'll see in the public static word main function. Initially, oh, I've added this thread here with the GC. This helps to kind of demonstrate the non-domestic behavior. I'll just show you that too. Initially, in the try statement, it creates a new object. And when it does, it'll say because it ran a couple of times, it would initially say I wouldn't get hands on a resource class. So okay, that's a bit confusing. I can see I shall first get rid of the sleeping of the thread and try running it again. When I don't make the thread sleep, it will throw a security exception. It'll catch that there's an issue here by the check holder and then throw the security exception. But the important point here is finalizes aren't deterministic. It's a problem. So if we do get the thread some few minutes, two seconds to sleep, then what you'll see when you run it is it's printing that look where it's saying, see, I got hands on this object, which is it's printing that from the finalize method, which was a subclass, well, not subclass, which was inherited from the resource class. And then because we got access to this object, you can probably see here you can probably see here what it's printing out is in fact this this object, but then also it has access to the critical action method, which ideally, which not ideally, but which actually the malicious subclass shouldn't have access to because once again, it should have died on the vine. I hope that makes sense. I think I got it. So I was trying to, when I asked a question on Stack Overflow, here's what I said. I'll read out this bit of the chapter, but then I said, in like a very systematic way, my understanding is that finalizes are not deterministic, a malicious subclass can run its finalize method on a particular constructed, corrupted superclass object, which is what we are doing right here by extending the resource class. Moving the corrupt objects reference to a static field doesn't let the GCM garbage collect, not GCM, JVM, I should fix that. So because it's static, it can't be garbage collected. The attacker can use this object that should have died on the vine and do as they will, pass the security flow. So this is the problem with the use of finalizes. I hope that makes sense. I'm asking that question more from myself if I really understood that, but I think I did, but I think I did. At least I'm going to tell myself how to feel better. Now that I've kind of demoed that, even though I admit that was a rather pathetic demo, let's try and get to what Joshua Block has stated here. Please forgive me. I'm trying my best to demo it here, but because he really hasn't given tangible implementations and examples, I'm trying my best to see if I could find code and write code and connect it to what he's trying to say here, given that I haven't really used finalizes before ever in my programming life. But anyway, let's see if what he's stating here makes a bit more sense. Finalizes have a serious security problem. They open your class up to finalize their attacks. The idea behind a finalize attack is simple. If an exception is thrown from a constructor, or it's serialization equivalence, so that would be the constructor, for instance, of let's say this class. The finalize of a malicious subclass can run on the partially constructed object that should have died on the vine. So that was this subclass that extended it. This finalizer can record a reference to the object in a static field, preventing it from being garbage collected. Just a point here. You probably noticed I didn't stole the reference to this resource class anywhere in any static field or didn't really hold the reference in the subclass. The reason for that was because Holger, the answer that I got, said something like this. He said your description is basically correct, but over complicating things. I'm not surprised there. I tend to do that quite a lot. There's no need to store something in a static variable as soon as the finalize method is invoked. The object is already just resurrected as invoking a method on an object implies invoking code with access to the object. That really did make a lot of sense to me because that's exactly what we're doing here in this override method, in the subclass. Storing the object reference in a variable is a way to expand the lifetime beyond the execution of the finalize method. But this is not necessary. But this is not a necessary thing for the attack. Also, instead of using a static variable, the attacker could also make the subclass and inner class and store the reference in the still reachable outer object. So the following program is already enough to demonstrate the issue. So that's the program that I showed to you before, which it's Holger's code. In fact, I just kind of repurposed it and made it a bit more presentable, which is why I haven't done what Joshua Blocker stated here. Once the malinformed object has been recorded, it is a simple matter to invoke arbitrary methods on this object that should have never been allowed to exist in the first place. So that is the arbitrary method, which was critical action that I did invoke. Throwing an exception from a constructor should be sufficient to prevent an object from coming into existence in the presence of finalizes. Unfortunately, it is not. And then he states, which is kind of what I was, I tried to demo here, to protect non-final classes from finalizer attacks, write a final finalize method that does nothing. That's exactly what we can do here. So what you'll see is we have the resource class. And then because the resource class itself obviously has the finalize method, if we create a final protected void finalize, you'll see that it'll throw an error. You can't subclass it because, sorry, you can't override it because this class that inherits that, that subclasses resource class, now can't override it. And that never really solved the problem here. That's one way of protecting ourselves against the finalize method. But the better way is to not use it in the first place. And that, of course, begs the question, given that Joshua Block and the broader Java community, the experts are so adamant as to why one shouldn't use finalizers or cleaners, what is the alternative? What should we use instead? And that's what Joshua Block states here, to use the autoclosable interface. Before I get to what I've written down and taken notes of and kind of try to demo what autoclosable is, let's first go through the definition because that'll set a foundation, let's say. So what should you do instead of writing a finalizer or cleaner for a class whose objects encapsulate resources that require termination, such as files or threads, just have your class implement autoclosable and require its clients to invoke the close method on each instance, when it is no longer needed, typically using try with resources to ensure termination, even in the face of exceptions. So the point on try with resources is in fact the next item. So I shall go into detail as to what try with resources do in the next video. So definition of autoclosable, which enforces encapsulation by Oracle docs is an object that may hold resources such as files or socket handles until it is closed. The close method of an autoclosable object is called automatically when exiting a try with resources block for which the object has been declared in the resource specification header. This construction ensures prompt release avoiding resource exhaustion, avoiding resource exhaustion, exceptions, and errors that may otherwise occur. So let's take a look at a demo. Let's see what at how autoclosable has to be used. Also, there's another caveat he's added here that it's important that when an object has been closed that we should keep track of how if the instance has been closed and we shouldn't rely on the client to do that. It was a bit hard to find a good demo of what this meant. So I did ask a question on Stack Overflow on that too. I asked how to keep track if an instance has been closed with Java autoclosable. I even got a negative download on that question because I realized it's actually quite simple as to how to do that. I just got a thought about it a bit more without being lazy. But nevertheless, I did find an answer and I did post it here. So firstly, the demo, the demo on autoclosable is this. Again, courtesy of Baldang. So we have a demo class which implements autoclosable. And then we have another buffered read instance like the previous one we were going through for the final finalizable class, a similar concept. In fact, the exact class that I've repurposed for this demo. And this here, this Boolean is in fact what does that bit I asked here. It's what keeps track if this instance of, in this case, the demo class has been closed. So when in the constructor, the same way we are accessing a file, reading off the file, creating a new, using a resource reader, and then we're reading the first line, similar thing doing, and we're checking if we can read the first line. And here there's something extra added. We're checking if this resource, so that is reader, has been closed. I think I made a mistake. I said that what this does in line number 13 was keep track of if demo class instance has been closed. That is wrong. I apologize. What this keeps track of is if the buffered reader instance has been closed. And that's what we're checking in the read first line method. And if it is closed, we can't access it. So it should throw a illegal state exception. And that's what we're doing here. And then we override the closed method, which is the method in the auto-closable interface. That method right there. And in the class itself, we do the closing. We close that resource. And then, of course, we set the flag to true because now it has been closed. And if not, it'll throw an IO exception, in this case, because it's a buffered reader. So if we go to the unit test, you could see if I'm going to run it, it did pass because all it's going to do is read the line. But of course, if we try to access the resource, read the instance, and it was closed, it would have thrown an error. The test did pass because it's just checking if the line, if this line is this. Oh, I should show the log here, in fact. It's printing this log here, closed buffered reader in the closed method and flag changed to true. So that is this right here. Where is it? I've got so many classes opened up. Oh, yeah. That's printing this bit here, closed buffered read instance, and it's printing the flag, which is true in this case. So that's really, it's quite straightforward, the auto-closable bit and even how it keeps track of how it closes it. I was over-complicating in my head and I was thinking there's some way to do it. In fact, it's tabooly. So despite being told not to use them, and we probably will never have to use them for normal average Java programmers like myself, what really are they useful for? What are they good for? Caviar there, of course, is that as of Java 18 finalizes are in fact deprecated and will be entirely removed in the future. So we'll never use finalizes, but let's say cleaners. What are they really useful for? Firstly, it's for them to act as a safety net. And let's try to understand what that means. One use of Java cleaners, I'm going to stop saying finalizes because it's deprecated, is that one use of that is to act as a safety net in case the owner of a resource neglects to close its, to call its closed method. Well, there's no guarantee that the cleaner or finalizer will run promptly or at all. It is better to free the resource later than never if the client fails to do so. If you're considering writing such a safety net finalizer, think long and hard about whether the protection is worth the cost. So the way I see it, it's just an extra check one adds when writing an API or a class just as a safety net. By overriding that finalize method, we could ensure that any of the resources that should have been closed, sorry, not ensure, we could hope that any of the resources that should have been closed or were closed because of the finalize method, even though it's not a domestic. So that's, it's a trade off one has to make and think about carefully. And then the second use is using it with native peers. What is native peer? As the simplest way to think about it is that native peers are objects that aren't owned by the JVM. They're sort of like a platform specific objects that the JVM runs on, the virtual machine runs on. It could be CEO C++ objects and the JVM can't garbage collect them. And that's why they're called native peers, even though they call peers because the objects still have dependencies on them. But the JVM has no control of these objects in memory. It's quite interesting. I really didn't know much about it. But of course, I found this pretty simple stucco flow answer, which can explain that it said that a native object is not programmed only in Java, but is a, but in a platform specific language, typically CEO assembler, even memory allocated by this code cannot be disposed by the garbage collection by GC. Therefore, you may need to clean it in a finalizer. The native peer is the native part of a Java object. So I'll leave an answer to this question in the description. And that's what I wrote out here by the user Andres on stucco overflow. Thanks for that. And Joshua Block states, a second legitimate use of cleaners concerns objects with native peers. A native peer is a native non Java object. That's an important point to which a normal object delegates via native methods. Because a native peer is not a normal object, the garbage collector doesn't know about it and can't reclaim it when the Java peer is reclaimed. A cleaner or finalizer may be an appropriate vehicle for this task, assuming the performance is acceptable and the native peer holds no critical resources. Saying that finally, we, we in fact get to some actual code in this item, because the other code I showed was code that I wrote and I kind of use from other people. And that is this room class, which demonstrates the concept of it being a safety net by implementing auto closeable. Yeah. So the class is called room. And I do appreciate that pun there because the room must be cleaned before being reclaimed. I like that. I appreciate that. And it implements, as I said, auto closeable. It's got a private static final cleaner, which cleans. And this in a class, which implements runnable is what holds the resources required by cleaner to clean the room. So this in a class is in fact what does the cleaning in a separate thread in the background of this broader class. So what you can see is we're simply registering the cleanable instance with with with the state, which is a variable we hold here in line number 34 and register it. We assign it. And after that, the number of junk piles should be set to zero. And the way that happens is the close method, which is what we override from the auto closeable interface that will invoke the run method, which is inclinable. So once we register it with the with the with the object itself and then the state. So this refers to the current object and then in the state of the room that we pass into the uh, we pass the we invoke the clean method of the of the cleanable instance. And the clean method, what that does is it triggers the run method that sets the number of junk piles to zero. So every time before it's reclaimed, it has to clean all the resources. Now I didn't I think I don't think I did a good job at explaining that. It's a bit difficult to explain because I I lack the verbal visual city and a deep understanding of how cleaner works. Therefore, probably what I'll do is I'll go through Joshua Bloch's description or sorry, his elucidation and then I shall refer to the code as I read them out and kind of learn it live, let's say, which is exactly what I'm doing in this video series. The the room class implements auto close book that I showed here. The fact that it's automatic cleaning safety net uses a cleaner is merely an implementation detail. Unlike finalizes cleaners do not pollute across this public API. That's correct, which is why it's a bit hard to see at first because I'm using it as a client. The static nested state class holds the resources that are required by the cleaner to clean the room. So that is the static nested state class. Also, to understand how nested classes work, just go and read these docs in Oracle. It's pretty simple. It's it's a it's an inner class. I'll leave a link to that in the description. It's got access to all the properties of the outer class in this case. And then and then he continues. And then he continues in this case, it is simply the number of junk piles field, which we need to clean up, which you shall see we're going to be doing this integer value, which represents the amount of mess in the room. Yep. State implements runnable. So you can see here it's going to implement runnable because we need to run this in the background. And its run method is called at most once. So this method, which we're overriding is called at most once and that is this one method is from runnable because we're running a new thread by the cleanable that we get when we register a state instance with our cleaner in the room's constructor. So that that bit here is done right here in the cleanable, which is what I said that we're doing the registering as we create this new state by passing the number of junk files, junk piles, sorry. And that's what we're passing onto this and doing the registering, which is what invokes that run method eventually. The call to the run method will be triggered by one of two things. Usually it is triggered by call to room's close method, calling cleanable's clean method. So that's the close method, which we have overridden here of the out-of-class room. If the client fails to call the close method by the time a room instance is eligible for garbage collection, the cleaner will hopefully call state's run method. So that's what he meant by a safety net because if the client doesn't call the close method and clean up that resource or clear up that resource, then we expect this run method to run, hopefully. It is critical that a state instance does not refer to the room instance. That's important and we shall see why. If it did, it would create a circularity that would prevent the room instance from becoming eligible for garbage collection and from being automatically cleaned. Yes, because for it to be eligible for garbage collection, we have to make sure that there aren't any references to that object in memory. Therefore, state must be a static nested class because non-static nested classes contain references to the end-closing instances, which is why exactly we've declared this static and I said to do some reading on nested classes as to how the difference between non-static and static in the Oracle docs. And then we shall take a look at how this class is used. So if we take a look at, let's say, teenage up, we're doing some garbage collection manually, explicitly, but we should not depend on this behavior. So if I go run this and run this, in fact, first let's take a look at adult, sorry, where we're using a tri-width resource. So the room's cleanest used only as a safety net. If clients surround all room incantations with tri-width resource blocks, automatic cleaning will never be required. So as you can see here, I'm not, or just your block in this case isn't doing any explicit garbage collection because we've used it with a tri-width resource block. And if I run this, you will see it says goodbye, but also says cleaning the room. So the object's created and it prints goodbye. But afterwards, this cleaning the room along comes from this run method here, which we've all written and written. And that also means that the number of chunk passes zero. So in fact, if you want to print out the number of chunk pass just to, just to make sure that we know what's going on and run that again, you will see it's going to print zero. Yeah, there we go. It printed zero. That's what we expected. But then if you go take a look at the teenager's room and if you run it, it will not run it unfortunately. Oh, it did, but it's kind of so I'm going to try it again. I'm going to keep trying it until it does not run it. Oh, actually, sorry. If I comment the garbage collection, because I had that uncommented, it should have been commented out. Now it shouldn't run it. You see that it just printed our piece out, but there was no cleaning done. And then when I do the garbage collection explicitly, now it's going to print cleaning room. And that's what we expect. And that was though, that cleaning room was imprinted from the previous line. Sorry, it was printed off the previous line, of course, because it ran the run method, but because we did do the garbage collection, that doesn't exist anymore. The memory was cleared. And that's virtually it. That's kind of the utilities of using auto-closable and how it's got to be used and why it's preferred over, let's say, using a final asset, for example. And then just to conclude that point and of that demo, Joshua Block states, you might expect it to print piece out, followed by cleaning room. But on my machine, it never prints cleaning room. It just exits, which is kind of, well, that was before we did do the explicit garbage collection. This is the unpredictability we spoke of earlier. The cleaner spec says, the behavior of a cleaner during system.exit is implementation specific. No guarantees are made relating to whether cleaning actions are invoked or not. While the spec does not say it, the same holds true for normal program exit. On my machine, which is what we did here, adding the line system.gc to teenagers main method is enough to make it print cleaning room prior to exiting. The reason we didn't see that log here in line number 30 is because the moment it cleaned the room and cleared out the resources, it exited and it doesn't really exist in memory anymore. So I repeat that point again, on my machine, adding the line system.gc to teenagers main method is enough to make it print cleaning room prior to exit. But there's no guarantee that you'll see the same behavior on your machine, which is exactly why Joshua Bock states here to test the behavior. But note that you must not depend on this behavior. Again, not to be on that horse, but the biggest problem is the non-determinism. And we don't want that in programming. We want things to be logical and deterministic as script programmers. And in summary, he states, don't use cleaners or in releases prior to Java 9 finalizes, except as a safety net or to terminate non-critical native resources. Even then, be aware the indeterminacy and performance consequences. That's it. That was item number eight, avoid finalizes and cleaners. I hope I did a good job at demoing certain parts of it. As you all know with these tutorials, the best way to understand it is to after watching them or while watching them goes through the code base, because that's the best way to grok these concepts. But nevertheless, I hope my efforts were worth it. I will try and keep enduring and getting through this whole book because I'm really enjoying it. I'm learning a lot, but also I want to kind of get into the habit of putting out these videos in a certain schedule, let's say, at least once every two weeks. But thanks a lot for watching. I hope you gained some value from it and learned something. I'll see you in the next item. Cheers.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.8, "text": " Hey everyone, welcome to yet another episode of my video series on Joshua Block's Effective Java,", "tokens": [50364, 1911, 1518, 11, 2928, 281, 1939, 1071, 3500, 295, 452, 960, 2638, 322, 24005, 17500, 311, 17764, 488, 10745, 11, 50704], "temperature": 0.0, "avg_logprob": -0.1485809097942124, "compression_ratio": 1.6284722222222223, "no_speech_prob": 0.09217651188373566}, {"id": 1, "seek": 0, "start": 6.8, "end": 12.16, "text": " where I take the items that he has enumerated in this book and expound on them, trying to make", "tokens": [50704, 689, 286, 747, 264, 4754, 300, 415, 575, 465, 15583, 770, 294, 341, 1446, 293, 1278, 554, 322, 552, 11, 1382, 281, 652, 50972], "temperature": 0.0, "avg_logprob": -0.1485809097942124, "compression_ratio": 1.6284722222222223, "no_speech_prob": 0.09217651188373566}, {"id": 2, "seek": 0, "start": 12.16, "end": 18.080000000000002, "text": " sense of them. And hopefully, as I do that, you can gain some value from it too. You can", "tokens": [50972, 2020, 295, 552, 13, 400, 4696, 11, 382, 286, 360, 300, 11, 291, 393, 6052, 512, 2158, 490, 309, 886, 13, 509, 393, 51268], "temperature": 0.0, "avg_logprob": -0.1485809097942124, "compression_ratio": 1.6284722222222223, "no_speech_prob": 0.09217651188373566}, {"id": 3, "seek": 0, "start": 18.080000000000002, "end": 23.28, "text": " hopefully learn something from it. That at least is one reason that I put out these videos", "tokens": [51268, 4696, 1466, 746, 490, 309, 13, 663, 412, 1935, 307, 472, 1778, 300, 286, 829, 484, 613, 2145, 51528], "temperature": 0.0, "avg_logprob": -0.1485809097942124, "compression_ratio": 1.6284722222222223, "no_speech_prob": 0.09217651188373566}, {"id": 4, "seek": 0, "start": 23.28, "end": 28.96, "text": " out in the public. Without further ado, let me get started. This is certainly one of the longest", "tokens": [51528, 484, 294, 264, 1908, 13, 9129, 3052, 22450, 11, 718, 385, 483, 1409, 13, 639, 307, 3297, 472, 295, 264, 15438, 51812], "temperature": 0.0, "avg_logprob": -0.1485809097942124, "compression_ratio": 1.6284722222222223, "no_speech_prob": 0.09217651188373566}, {"id": 5, "seek": 2896, "start": 28.96, "end": 34.4, "text": " items that I had to go through and probably going to be the longest video of this series as of yet.", "tokens": [50364, 4754, 300, 286, 632, 281, 352, 807, 293, 1391, 516, 281, 312, 264, 15438, 960, 295, 341, 2638, 382, 295, 1939, 13, 50636], "temperature": 0.0, "avg_logprob": -0.07723886316472833, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.03901546448469162}, {"id": 6, "seek": 2896, "start": 35.120000000000005, "end": 40.160000000000004, "text": " In fact, I was thinking if I should break this down into two videos because the video might be", "tokens": [50672, 682, 1186, 11, 286, 390, 1953, 498, 286, 820, 1821, 341, 760, 666, 732, 2145, 570, 264, 960, 1062, 312, 50924], "temperature": 0.0, "avg_logprob": -0.07723886316472833, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.03901546448469162}, {"id": 7, "seek": 2896, "start": 40.160000000000004, "end": 46.72, "text": " too long. In any case, let's get started with the proviso. I've been doing this proviso slash", "tokens": [50924, 886, 938, 13, 682, 604, 1389, 11, 718, 311, 483, 1409, 365, 264, 1439, 19227, 13, 286, 600, 668, 884, 341, 1439, 19227, 17330, 51252], "temperature": 0.0, "avg_logprob": -0.07723886316472833, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.03901546448469162}, {"id": 8, "seek": 2896, "start": 46.72, "end": 51.6, "text": " instruction in every single video. So if you have been following along, please do skip this bit to", "tokens": [51252, 10951, 294, 633, 2167, 960, 13, 407, 498, 291, 362, 668, 3480, 2051, 11, 1767, 360, 10023, 341, 857, 281, 51496], "temperature": 0.0, "avg_logprob": -0.07723886316472833, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.03901546448469162}, {"id": 9, "seek": 2896, "start": 51.6, "end": 56.72, "text": " save your time. The first point in the proviso is of course, and it's a very important point,", "tokens": [51496, 3155, 428, 565, 13, 440, 700, 935, 294, 264, 1439, 19227, 307, 295, 1164, 11, 293, 309, 311, 257, 588, 1021, 935, 11, 51752], "temperature": 0.0, "avg_logprob": -0.07723886316472833, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.03901546448469162}, {"id": 10, "seek": 5672, "start": 56.72, "end": 64.08, "text": " this is not a tutorial. I'm not a teacher, nor am I an expert. Therefore, don't think of what I say", "tokens": [50364, 341, 307, 406, 257, 7073, 13, 286, 478, 406, 257, 5027, 11, 6051, 669, 286, 364, 5844, 13, 7504, 11, 500, 380, 519, 295, 437, 286, 584, 50732], "temperature": 0.0, "avg_logprob": -0.12096555865540796, "compression_ratio": 1.5948275862068966, "no_speech_prob": 0.034579548984766006}, {"id": 11, "seek": 5672, "start": 64.08, "end": 68.72, "text": " as gospel's truth. In fact, when I do make mistakes, I'll try and correct them down", "tokens": [50732, 382, 14943, 311, 3494, 13, 682, 1186, 11, 562, 286, 360, 652, 8038, 11, 286, 603, 853, 293, 3006, 552, 760, 50964], "temperature": 0.0, "avg_logprob": -0.12096555865540796, "compression_ratio": 1.5948275862068966, "no_speech_prob": 0.034579548984766006}, {"id": 12, "seek": 5672, "start": 68.72, "end": 74.56, "text": " during the comment section. And as I've said in the second point, think of this as the blind,", "tokens": [50964, 1830, 264, 2871, 3541, 13, 400, 382, 286, 600, 848, 294, 264, 1150, 935, 11, 519, 295, 341, 382, 264, 6865, 11, 51256], "temperature": 0.0, "avg_logprob": -0.12096555865540796, "compression_ratio": 1.5948275862068966, "no_speech_prob": 0.034579548984766006}, {"id": 13, "seek": 5672, "start": 75.12, "end": 81.12, "text": " leading the blind. This is purely an exploratory disposition. I'm trying to figure something", "tokens": [51284, 5775, 264, 6865, 13, 639, 307, 17491, 364, 24765, 4745, 40293, 13, 286, 478, 1382, 281, 2573, 746, 51584], "temperature": 0.0, "avg_logprob": -0.12096555865540796, "compression_ratio": 1.5948275862068966, "no_speech_prob": 0.034579548984766006}, {"id": 14, "seek": 8112, "start": 81.12, "end": 90.16000000000001, "text": " out publicly and in a very, let's say, what's what I'm looking for. I'd say thinking out loud,", "tokens": [50364, 484, 14843, 293, 294, 257, 588, 11, 718, 311, 584, 11, 437, 311, 437, 286, 478, 1237, 337, 13, 286, 1116, 584, 1953, 484, 6588, 11, 50816], "temperature": 0.0, "avg_logprob": -0.10348227651495683, "compression_ratio": 1.592274678111588, "no_speech_prob": 0.009706014767289162}, {"id": 15, "seek": 8112, "start": 90.16000000000001, "end": 95.2, "text": " trying to make sense of these items, not just in the videos itself, but even preparing for them", "tokens": [50816, 1382, 281, 652, 2020, 295, 613, 4754, 11, 406, 445, 294, 264, 2145, 2564, 11, 457, 754, 10075, 337, 552, 51068], "temperature": 0.0, "avg_logprob": -0.10348227651495683, "compression_ratio": 1.592274678111588, "no_speech_prob": 0.009706014767289162}, {"id": 16, "seek": 8112, "start": 95.2, "end": 101.68, "text": " as I post questions on Stack Overflow, as I try to involve the community. I feel like hopefully,", "tokens": [51068, 382, 286, 2183, 1651, 322, 37649, 4886, 10565, 11, 382, 286, 853, 281, 9494, 264, 1768, 13, 286, 841, 411, 4696, 11, 51392], "temperature": 0.0, "avg_logprob": -0.10348227651495683, "compression_ratio": 1.592274678111588, "no_speech_prob": 0.009706014767289162}, {"id": 17, "seek": 8112, "start": 101.68, "end": 106.24000000000001, "text": " you know, I'm adding some value into the programming community, the Java community,", "tokens": [51392, 291, 458, 11, 286, 478, 5127, 512, 2158, 666, 264, 9410, 1768, 11, 264, 10745, 1768, 11, 51620], "temperature": 0.0, "avg_logprob": -0.10348227651495683, "compression_ratio": 1.592274678111588, "no_speech_prob": 0.009706014767289162}, {"id": 18, "seek": 10624, "start": 106.24, "end": 111.75999999999999, "text": " by asking certain questions pertaining to this book, as I'm trying to learn, which is why I call", "tokens": [50364, 538, 3365, 1629, 1651, 49582, 281, 341, 1446, 11, 382, 286, 478, 1382, 281, 1466, 11, 597, 307, 983, 286, 818, 50640], "temperature": 0.0, "avg_logprob": -0.08035024503866832, "compression_ratio": 1.5776892430278884, "no_speech_prob": 0.04600578173995018}, {"id": 19, "seek": 10624, "start": 111.75999999999999, "end": 117.83999999999999, "text": " it an exploratory disposition. It's a collective endeavor. And as I did touch on a bit before,", "tokens": [50640, 309, 364, 24765, 4745, 40293, 13, 467, 311, 257, 12590, 34975, 13, 400, 382, 286, 630, 2557, 322, 257, 857, 949, 11, 50944], "temperature": 0.0, "avg_logprob": -0.08035024503866832, "compression_ratio": 1.5776892430278884, "no_speech_prob": 0.04600578173995018}, {"id": 20, "seek": 10624, "start": 117.83999999999999, "end": 124.32, "text": " I will inevitably make mistakes. So please point them out, not just for my sake, perhaps even more", "tokens": [50944, 286, 486, 28171, 652, 8038, 13, 407, 1767, 935, 552, 484, 11, 406, 445, 337, 452, 9717, 11, 4317, 754, 544, 51268], "temperature": 0.0, "avg_logprob": -0.08035024503866832, "compression_ratio": 1.5776892430278884, "no_speech_prob": 0.04600578173995018}, {"id": 21, "seek": 10624, "start": 124.32, "end": 132.16, "text": " for the sake of the viewers, because I certainly don't want to mislead them by sharing any misinformation", "tokens": [51268, 337, 264, 9717, 295, 264, 8499, 11, 570, 286, 3297, 500, 380, 528, 281, 3346, 306, 345, 552, 538, 5414, 604, 34238, 51660], "temperature": 0.0, "avg_logprob": -0.08035024503866832, "compression_ratio": 1.5776892430278884, "no_speech_prob": 0.04600578173995018}, {"id": 22, "seek": 13216, "start": 132.16, "end": 138.07999999999998, "text": " to use a politically overloaded term. And of course, as this is a programming video series,", "tokens": [50364, 281, 764, 257, 21154, 28777, 292, 1433, 13, 400, 295, 1164, 11, 382, 341, 307, 257, 9410, 960, 2638, 11, 50660], "temperature": 0.0, "avg_logprob": -0.08953862337721992, "compression_ratio": 1.551440329218107, "no_speech_prob": 0.015899552032351494}, {"id": 23, "seek": 13216, "start": 138.07999999999998, "end": 144.72, "text": " all the code is available on GitHub, not just mine, but even Joshua Bloch's public repository", "tokens": [50660, 439, 264, 3089, 307, 2435, 322, 23331, 11, 406, 445, 3892, 11, 457, 754, 24005, 9865, 339, 311, 1908, 25841, 50992], "temperature": 0.0, "avg_logprob": -0.08953862337721992, "compression_ratio": 1.551440329218107, "no_speech_prob": 0.015899552032351494}, {"id": 24, "seek": 13216, "start": 144.72, "end": 150.88, "text": " where he's published the code that he's used for this book. Saying all that, let us get started", "tokens": [50992, 689, 415, 311, 6572, 264, 3089, 300, 415, 311, 1143, 337, 341, 1446, 13, 34087, 439, 300, 11, 718, 505, 483, 1409, 51300], "temperature": 0.0, "avg_logprob": -0.08953862337721992, "compression_ratio": 1.551440329218107, "no_speech_prob": 0.015899552032351494}, {"id": 25, "seek": 13216, "start": 150.88, "end": 156.64, "text": " with item number eight, which, as I said, is a long one. There are a few concepts that I had to", "tokens": [51300, 365, 3174, 1230, 3180, 11, 597, 11, 382, 286, 848, 11, 307, 257, 938, 472, 13, 821, 366, 257, 1326, 10392, 300, 286, 632, 281, 51588], "temperature": 0.0, "avg_logprob": -0.08953862337721992, "compression_ratio": 1.551440329218107, "no_speech_prob": 0.015899552032351494}, {"id": 26, "seek": 15664, "start": 157.44, "end": 164.55999999999997, "text": " sort of think about and muse and reflect for a bit to get my head around. But it was a very", "tokens": [50404, 1333, 295, 519, 466, 293, 39138, 293, 5031, 337, 257, 857, 281, 483, 452, 1378, 926, 13, 583, 309, 390, 257, 588, 50760], "temperature": 0.0, "avg_logprob": -0.12663000508358604, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.06458182632923126}, {"id": 27, "seek": 15664, "start": 164.55999999999997, "end": 169.51999999999998, "text": " interesting item as I found all the items in this book. And especially if you're a Java fan, like", "tokens": [50760, 1880, 3174, 382, 286, 1352, 439, 264, 4754, 294, 341, 1446, 13, 400, 2318, 498, 291, 434, 257, 10745, 3429, 11, 411, 51008], "temperature": 0.0, "avg_logprob": -0.12663000508358604, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.06458182632923126}, {"id": 28, "seek": 15664, "start": 169.51999999999998, "end": 177.27999999999997, "text": " myself, for all, even though I don't program in Java in my day job anymore, Java is my first love", "tokens": [51008, 2059, 11, 337, 439, 11, 754, 1673, 286, 500, 380, 1461, 294, 10745, 294, 452, 786, 1691, 3602, 11, 10745, 307, 452, 700, 959, 51396], "temperature": 0.0, "avg_logprob": -0.12663000508358604, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.06458182632923126}, {"id": 29, "seek": 17728, "start": 177.28, "end": 185.12, "text": " venue. Never forget your first one, isn't it? I'm sorry, that was pathetic, but I can't help myself.", "tokens": [50364, 21645, 13, 7344, 2870, 428, 700, 472, 11, 1943, 380, 309, 30, 286, 478, 2597, 11, 300, 390, 35506, 11, 457, 286, 393, 380, 854, 2059, 13, 50756], "temperature": 0.0, "avg_logprob": -0.17368871515447443, "compression_ratio": 1.4901185770750989, "no_speech_prob": 0.0912826657295227}, {"id": 30, "seek": 17728, "start": 185.12, "end": 191.36, "text": " Okay, item number eight, avoid finalizers and cleaners. And we're still in chapter two,", "tokens": [50756, 1033, 11, 3174, 1230, 3180, 11, 5042, 2572, 22525, 293, 2541, 433, 13, 400, 321, 434, 920, 294, 7187, 732, 11, 51068], "temperature": 0.0, "avg_logprob": -0.17368871515447443, "compression_ratio": 1.4901185770750989, "no_speech_prob": 0.0912826657295227}, {"id": 31, "seek": 17728, "start": 191.36, "end": 198.16, "text": " creating and destroying objects. And again, as I said, all the code available on my GitHub repo,", "tokens": [51068, 4084, 293, 19926, 6565, 13, 400, 797, 11, 382, 286, 848, 11, 439, 264, 3089, 2435, 322, 452, 23331, 49040, 11, 51408], "temperature": 0.0, "avg_logprob": -0.17368871515447443, "compression_ratio": 1.4901185770750989, "no_speech_prob": 0.0912826657295227}, {"id": 32, "seek": 17728, "start": 198.72, "end": 203.44, "text": " links down below in the description. And I've kind of added like this, another caveat here.", "tokens": [51436, 6123, 760, 2507, 294, 264, 3855, 13, 400, 286, 600, 733, 295, 3869, 411, 341, 11, 1071, 43012, 510, 13, 51672], "temperature": 0.0, "avg_logprob": -0.17368871515447443, "compression_ratio": 1.4901185770750989, "no_speech_prob": 0.0912826657295227}, {"id": 33, "seek": 20344, "start": 204.0, "end": 208.64, "text": " This item does have a lot of theory. So before we get into the code, which of course I have", "tokens": [50392, 639, 3174, 775, 362, 257, 688, 295, 5261, 13, 407, 949, 321, 483, 666, 264, 3089, 11, 597, 295, 1164, 286, 362, 50624], "temperature": 0.0, "avg_logprob": -0.08491129676500957, "compression_ratio": 1.6905829596412556, "no_speech_prob": 0.015421159565448761}, {"id": 34, "seek": 20344, "start": 209.35999999999999, "end": 214.72, "text": " right here, before we get into any of this code, I think it's important to get through some theory.", "tokens": [50660, 558, 510, 11, 949, 321, 483, 666, 604, 295, 341, 3089, 11, 286, 519, 309, 311, 1021, 281, 483, 807, 512, 5261, 13, 50928], "temperature": 0.0, "avg_logprob": -0.08491129676500957, "compression_ratio": 1.6905829596412556, "no_speech_prob": 0.015421159565448761}, {"id": 35, "seek": 20344, "start": 216.4, "end": 223.04, "text": " Just in general, I prefer doing that to get a conceptual understanding. But specifically this", "tokens": [51012, 1449, 294, 2674, 11, 286, 4382, 884, 300, 281, 483, 257, 24106, 3701, 13, 583, 4682, 341, 51344], "temperature": 0.0, "avg_logprob": -0.08491129676500957, "compression_ratio": 1.6905829596412556, "no_speech_prob": 0.015421159565448761}, {"id": 36, "seek": 20344, "start": 223.04, "end": 228.8, "text": " item, I think has a lot more theory. So as I normally do, let's look at some keywords here.", "tokens": [51344, 3174, 11, 286, 519, 575, 257, 688, 544, 5261, 13, 407, 382, 286, 5646, 360, 11, 718, 311, 574, 412, 512, 21009, 510, 13, 51632], "temperature": 0.0, "avg_logprob": -0.08491129676500957, "compression_ratio": 1.6905829596412556, "no_speech_prob": 0.015421159565448761}, {"id": 37, "seek": 22880, "start": 228.8, "end": 234.24, "text": " Avoid finalizers and cleaners. What the hell are finalizers and cleaners? Full disclosure,", "tokens": [50364, 41061, 2572, 22525, 293, 2541, 433, 13, 708, 264, 4921, 366, 2572, 22525, 293, 2541, 433, 30, 13841, 30392, 11, 50636], "temperature": 0.0, "avg_logprob": -0.15269091635039359, "compression_ratio": 1.7014218009478672, "no_speech_prob": 0.0233169998973608}, {"id": 38, "seek": 22880, "start": 234.24, "end": 240.0, "text": " I've never used a finalizer nor a cleaner. A cleaner, yes, but I've never used a finalizer", "tokens": [50636, 286, 600, 1128, 1143, 257, 2572, 6545, 6051, 257, 16532, 13, 316, 16532, 11, 2086, 11, 457, 286, 600, 1128, 1143, 257, 2572, 6545, 50924], "temperature": 0.0, "avg_logprob": -0.15269091635039359, "compression_ratio": 1.7014218009478672, "no_speech_prob": 0.0233169998973608}, {"id": 39, "seek": 22880, "start": 240.8, "end": 246.08, "text": " in my day job when I used to do a lot more hands-on Java programming. But here are a few", "tokens": [50964, 294, 452, 786, 1691, 562, 286, 1143, 281, 360, 257, 688, 544, 2377, 12, 266, 10745, 9410, 13, 583, 510, 366, 257, 1326, 51228], "temperature": 0.0, "avg_logprob": -0.15269091635039359, "compression_ratio": 1.7014218009478672, "no_speech_prob": 0.0233169998973608}, {"id": 40, "seek": 22880, "start": 246.08, "end": 253.36, "text": " definitions that I found on finalizers. In fact, they're from Baildang, my favorite Java", "tokens": [51228, 21988, 300, 286, 1352, 322, 2572, 22525, 13, 682, 1186, 11, 436, 434, 490, 363, 864, 67, 656, 11, 452, 2954, 10745, 51592], "temperature": 0.0, "avg_logprob": -0.15269091635039359, "compression_ratio": 1.7014218009478672, "no_speech_prob": 0.0233169998973608}, {"id": 41, "seek": 25336, "start": 254.24, "end": 261.92, "text": " learning blog slash website. And then of course, the Oracle docs. So finalizers, the,", "tokens": [50408, 2539, 6968, 17330, 3144, 13, 400, 550, 295, 1164, 11, 264, 25654, 45623, 13, 407, 2572, 22525, 11, 264, 11, 50792], "temperature": 0.0, "avg_logprob": -0.13047088895525252, "compression_ratio": 1.6077586206896552, "no_speech_prob": 0.007231298368424177}, {"id": 42, "seek": 25336, "start": 264.40000000000003, "end": 268.72, "text": " sorry, I had to think about that just for a bit. I didn't want to mindlessly read out the definition.", "tokens": [50916, 2597, 11, 286, 632, 281, 519, 466, 300, 445, 337, 257, 857, 13, 286, 994, 380, 528, 281, 1575, 12048, 1401, 484, 264, 7123, 13, 51132], "temperature": 0.0, "avg_logprob": -0.13047088895525252, "compression_ratio": 1.6077586206896552, "no_speech_prob": 0.007231298368424177}, {"id": 43, "seek": 25336, "start": 268.72, "end": 273.44, "text": " Essentially, I mean, finalizers is simply a method we're talking about, which is in the", "tokens": [51132, 23596, 11, 286, 914, 11, 2572, 22525, 307, 2935, 257, 3170, 321, 434, 1417, 466, 11, 597, 307, 294, 264, 51368], "temperature": 0.0, "avg_logprob": -0.13047088895525252, "compression_ratio": 1.6077586206896552, "no_speech_prob": 0.007231298368424177}, {"id": 44, "seek": 25336, "start": 273.44, "end": 279.36, "text": " object class, which the, in the class hierarchy in Java, the object class is right at the top. So", "tokens": [51368, 2657, 1508, 11, 597, 264, 11, 294, 264, 1508, 22333, 294, 10745, 11, 264, 2657, 1508, 307, 558, 412, 264, 1192, 13, 407, 51664], "temperature": 0.0, "avg_logprob": -0.13047088895525252, "compression_ratio": 1.6077586206896552, "no_speech_prob": 0.007231298368424177}, {"id": 45, "seek": 27936, "start": 279.36, "end": 288.24, "text": " everything is a subclass of object Java, FII. The finalize method for all intents and purposes", "tokens": [50364, 1203, 307, 257, 1422, 11665, 295, 2657, 10745, 11, 479, 9503, 13, 440, 2572, 1125, 3170, 337, 439, 560, 791, 293, 9932, 50808], "temperature": 0.0, "avg_logprob": -0.13097721256621897, "compression_ratio": 1.4607843137254901, "no_speech_prob": 0.001699797692708671}, {"id": 46, "seek": 27936, "start": 288.24, "end": 295.12, "text": " is what we call the finalizer. Even though finalizers is more like a mechanism. And Baildang states", "tokens": [50808, 307, 437, 321, 818, 264, 2572, 6545, 13, 2754, 1673, 2572, 22525, 307, 544, 411, 257, 7513, 13, 400, 363, 864, 67, 656, 4368, 51152], "temperature": 0.0, "avg_logprob": -0.13097721256621897, "compression_ratio": 1.4607843137254901, "no_speech_prob": 0.001699797692708671}, {"id": 47, "seek": 27936, "start": 295.12, "end": 302.88, "text": " finalizers get involved when JVM figures out that this particular instance should be garbage collected.", "tokens": [51152, 2572, 22525, 483, 3288, 562, 508, 53, 44, 9624, 484, 300, 341, 1729, 5197, 820, 312, 14150, 11087, 13, 51540], "temperature": 0.0, "avg_logprob": -0.13097721256621897, "compression_ratio": 1.4607843137254901, "no_speech_prob": 0.001699797692708671}, {"id": 48, "seek": 30288, "start": 303.12, "end": 311.28, "text": " So when the JVM understands that a certain object or an instance of a class is ready to be", "tokens": [50376, 407, 562, 264, 508, 53, 44, 15146, 300, 257, 1629, 2657, 420, 364, 5197, 295, 257, 1508, 307, 1919, 281, 312, 50784], "temperature": 0.0, "avg_logprob": -0.20824432373046875, "compression_ratio": 1.6504424778761062, "no_speech_prob": 0.00382377696223557}, {"id": 49, "seek": 30288, "start": 311.28, "end": 319.2, "text": " garbage collected, it can be involved, this finalized method. Such a finalizer may perform", "tokens": [50784, 14150, 11087, 11, 309, 393, 312, 3288, 11, 341, 2572, 1602, 3170, 13, 9653, 257, 2572, 6545, 815, 2042, 51180], "temperature": 0.0, "avg_logprob": -0.20824432373046875, "compression_ratio": 1.6504424778761062, "no_speech_prob": 0.00382377696223557}, {"id": 50, "seek": 30288, "start": 319.2, "end": 325.68, "text": " any operations, including bringing the object back to life. That bit, full disclosure, I don't", "tokens": [51180, 604, 7705, 11, 3009, 5062, 264, 2657, 646, 281, 993, 13, 663, 857, 11, 1577, 30392, 11, 286, 500, 380, 51504], "temperature": 0.0, "avg_logprob": -0.20824432373046875, "compression_ratio": 1.6504424778761062, "no_speech_prob": 0.00382377696223557}, {"id": 51, "seek": 30288, "start": 325.68, "end": 330.96, "text": " understand. I didn't really go into detail as to what it means bringing the object back to life.", "tokens": [51504, 1223, 13, 286, 994, 380, 534, 352, 666, 2607, 382, 281, 437, 309, 1355, 5062, 264, 2657, 646, 281, 993, 13, 51768], "temperature": 0.0, "avg_logprob": -0.20824432373046875, "compression_ratio": 1.6504424778761062, "no_speech_prob": 0.00382377696223557}, {"id": 52, "seek": 33096, "start": 331.91999999999996, "end": 336.56, "text": " Perhaps it's referring to the object later again in the code and then, you know,", "tokens": [50412, 10517, 309, 311, 13761, 281, 264, 2657, 1780, 797, 294, 264, 3089, 293, 550, 11, 291, 458, 11, 50644], "temperature": 0.0, "avg_logprob": -0.09391203234272619, "compression_ratio": 1.5208333333333333, "no_speech_prob": 0.00538365263491869}, {"id": 53, "seek": 33096, "start": 336.56, "end": 342.4, "text": " allocating memory to it. But even in the item, Joshua Block hasn't really got into what that", "tokens": [50644, 12660, 990, 4675, 281, 309, 13, 583, 754, 294, 264, 3174, 11, 24005, 17500, 6132, 380, 534, 658, 666, 437, 300, 50936], "temperature": 0.0, "avg_logprob": -0.09391203234272619, "compression_ratio": 1.5208333333333333, "no_speech_prob": 0.00538365263491869}, {"id": 54, "seek": 33096, "start": 342.4, "end": 348.71999999999997, "text": " means. This is just a definition from Baildang. The main purpose of a finalizer is, however,", "tokens": [50936, 1355, 13, 639, 307, 445, 257, 7123, 490, 363, 864, 67, 656, 13, 440, 2135, 4334, 295, 257, 2572, 6545, 307, 11, 4461, 11, 51252], "temperature": 0.0, "avg_logprob": -0.09391203234272619, "compression_ratio": 1.5208333333333333, "no_speech_prob": 0.00538365263491869}, {"id": 55, "seek": 33096, "start": 348.71999999999997, "end": 355.91999999999996, "text": " to release resources used by objects before they're removed from memory. A finalizer can work as a", "tokens": [51252, 281, 4374, 3593, 1143, 538, 6565, 949, 436, 434, 7261, 490, 4675, 13, 316, 2572, 6545, 393, 589, 382, 257, 51612], "temperature": 0.0, "avg_logprob": -0.09391203234272619, "compression_ratio": 1.5208333333333333, "no_speech_prob": 0.00538365263491869}, {"id": 56, "seek": 35592, "start": 355.92, "end": 361.6, "text": " primary mechanism for cleanup operations or as a safety net when other methods fail.", "tokens": [50364, 6194, 7513, 337, 40991, 7705, 420, 382, 257, 4514, 2533, 562, 661, 7150, 3061, 13, 50648], "temperature": 0.0, "avg_logprob": -0.1058028686878293, "compression_ratio": 1.4754098360655739, "no_speech_prob": 0.003272448433563113}, {"id": 57, "seek": 35592, "start": 361.6, "end": 369.28000000000003, "text": " So at a very high level, just a good bit of start is to think of finalizers being related to", "tokens": [50648, 407, 412, 257, 588, 1090, 1496, 11, 445, 257, 665, 857, 295, 722, 307, 281, 519, 295, 2572, 22525, 885, 4077, 281, 51032], "temperature": 0.0, "avg_logprob": -0.1058028686878293, "compression_ratio": 1.4754098360655739, "no_speech_prob": 0.003272448433563113}, {"id": 58, "seek": 35592, "start": 370.08000000000004, "end": 376.0, "text": " memory management and garbage collection. It's not something particularly done by the JVM.", "tokens": [51072, 4675, 4592, 293, 14150, 5765, 13, 467, 311, 406, 746, 4098, 1096, 538, 264, 508, 53, 44, 13, 51368], "temperature": 0.0, "avg_logprob": -0.1058028686878293, "compression_ratio": 1.4754098360655739, "no_speech_prob": 0.003272448433563113}, {"id": 59, "seek": 35592, "start": 376.0, "end": 382.8, "text": " Programmers could do it too, explicitly. But of course, a caveat is we should in fact avoid", "tokens": [51368, 8338, 18552, 727, 360, 309, 886, 11, 20803, 13, 583, 295, 1164, 11, 257, 43012, 307, 321, 820, 294, 1186, 5042, 51708], "temperature": 0.0, "avg_logprob": -0.1058028686878293, "compression_ratio": 1.4754098360655739, "no_speech_prob": 0.003272448433563113}, {"id": 60, "seek": 38280, "start": 382.8, "end": 387.92, "text": " using finalizers and cleaners. That is the caveat here. So even though it's possible,", "tokens": [50364, 1228, 2572, 22525, 293, 2541, 433, 13, 663, 307, 264, 43012, 510, 13, 407, 754, 1673, 309, 311, 1944, 11, 50620], "temperature": 0.0, "avg_logprob": -0.08817657402583531, "compression_ratio": 1.6311111111111112, "no_speech_prob": 0.0022167223505675793}, {"id": 61, "seek": 38280, "start": 387.92, "end": 395.36, "text": " doesn't mean we should do it. So again, to repeat the point, think of finalizers as something that", "tokens": [50620, 1177, 380, 914, 321, 820, 360, 309, 13, 407, 797, 11, 281, 7149, 264, 935, 11, 519, 295, 2572, 22525, 382, 746, 300, 50992], "temperature": 0.0, "avg_logprob": -0.08817657402583531, "compression_ratio": 1.6311111111111112, "no_speech_prob": 0.0022167223505675793}, {"id": 62, "seek": 38280, "start": 395.36, "end": 402.24, "text": " relates to memory management and garbage collection and ensuring that any unreferenced", "tokens": [50992, 16155, 281, 4675, 4592, 293, 14150, 5765, 293, 16882, 300, 604, 20584, 612, 14672, 51336], "temperature": 0.0, "avg_logprob": -0.08817657402583531, "compression_ratio": 1.6311111111111112, "no_speech_prob": 0.0022167223505675793}, {"id": 63, "seek": 38280, "start": 402.24, "end": 408.64, "text": " objects are cleaned and that resources are freed up. And then another definition again from the", "tokens": [51336, 6565, 366, 16146, 293, 300, 3593, 366, 21796, 493, 13, 400, 550, 1071, 7123, 797, 490, 264, 51656], "temperature": 0.0, "avg_logprob": -0.08817657402583531, "compression_ratio": 1.6311111111111112, "no_speech_prob": 0.0022167223505675793}, {"id": 64, "seek": 40864, "start": 408.64, "end": 414.88, "text": " Oracle docs this time is, as I said, finalize is part of the object class. If you go take a look", "tokens": [50364, 25654, 45623, 341, 565, 307, 11, 382, 286, 848, 11, 2572, 1125, 307, 644, 295, 264, 2657, 1508, 13, 759, 291, 352, 747, 257, 574, 50676], "temperature": 0.0, "avg_logprob": -0.10437963363972116, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.002548542572185397}, {"id": 65, "seek": 40864, "start": 414.88, "end": 422.0, "text": " at the docs, it'll even state, if only my internet loads, it'll even state the finalize method is", "tokens": [50676, 412, 264, 45623, 11, 309, 603, 754, 1785, 11, 498, 787, 452, 4705, 12668, 11, 309, 603, 754, 1785, 264, 2572, 1125, 3170, 307, 51032], "temperature": 0.0, "avg_logprob": -0.10437963363972116, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.002548542572185397}, {"id": 66, "seek": 40864, "start": 422.0, "end": 429.36, "text": " there. As you can see there, it'll say they're called by the garbage collector on an object", "tokens": [51032, 456, 13, 1018, 291, 393, 536, 456, 11, 309, 603, 584, 436, 434, 1219, 538, 264, 14150, 23960, 322, 364, 2657, 51400], "temperature": 0.0, "avg_logprob": -0.10437963363972116, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.002548542572185397}, {"id": 67, "seek": 40864, "start": 429.36, "end": 434.0, "text": " when garbage collection determines that there are no more references to the object.", "tokens": [51400, 562, 14150, 5765, 24799, 300, 456, 366, 572, 544, 15400, 281, 264, 2657, 13, 51632], "temperature": 0.0, "avg_logprob": -0.10437963363972116, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.002548542572185397}, {"id": 68, "seek": 43400, "start": 434.0, "end": 445.76, "text": " The general contract of finalize is that it is invoked if and when the Java virtual machine", "tokens": [50364, 440, 2674, 4364, 295, 2572, 1125, 307, 300, 309, 307, 1048, 9511, 498, 293, 562, 264, 10745, 6374, 3479, 50952], "temperature": 0.0, "avg_logprob": -0.11439191761301525, "compression_ratio": 1.532258064516129, "no_speech_prob": 0.004754043649882078}, {"id": 69, "seek": 43400, "start": 445.76, "end": 452.56, "text": " has determined that there's no longer any means by which this object can be accessed by any thread", "tokens": [50952, 575, 9540, 300, 456, 311, 572, 2854, 604, 1355, 538, 597, 341, 2657, 393, 312, 34211, 538, 604, 7207, 51292], "temperature": 0.0, "avg_logprob": -0.11439191761301525, "compression_ratio": 1.532258064516129, "no_speech_prob": 0.004754043649882078}, {"id": 70, "seek": 43400, "start": 452.56, "end": 458.64, "text": " that has not yet died, except as a result of an action taken by the finalization of some other", "tokens": [51292, 300, 575, 406, 1939, 4539, 11, 3993, 382, 257, 1874, 295, 364, 3069, 2726, 538, 264, 2572, 2144, 295, 512, 661, 51596], "temperature": 0.0, "avg_logprob": -0.11439191761301525, "compression_ratio": 1.532258064516129, "no_speech_prob": 0.004754043649882078}, {"id": 71, "seek": 45864, "start": 458.64, "end": 465.2, "text": " object or class which is ready to be finalized. So, okay, effectively this means when the object is", "tokens": [50364, 2657, 420, 1508, 597, 307, 1919, 281, 312, 2572, 1602, 13, 407, 11, 1392, 11, 8659, 341, 1355, 562, 264, 2657, 307, 50692], "temperature": 0.0, "avg_logprob": -0.14598915364482615, "compression_ratio": 1.610878661087866, "no_speech_prob": 0.006192088592797518}, {"id": 72, "seek": 45864, "start": 465.2, "end": 471.59999999999997, "text": " not going to be used, we need to free up that resource and get that memory back to be used", "tokens": [50692, 406, 516, 281, 312, 1143, 11, 321, 643, 281, 1737, 493, 300, 7684, 293, 483, 300, 4675, 646, 281, 312, 1143, 51012], "temperature": 0.0, "avg_logprob": -0.14598915364482615, "compression_ratio": 1.610878661087866, "no_speech_prob": 0.006192088592797518}, {"id": 73, "seek": 45864, "start": 471.59999999999997, "end": 479.28, "text": " for something else. That's what finalize is. But, again, we shouldn't use them. That's the point", "tokens": [51012, 337, 746, 1646, 13, 663, 311, 437, 2572, 1125, 307, 13, 583, 11, 797, 11, 321, 4659, 380, 764, 552, 13, 663, 311, 264, 935, 51396], "temperature": 0.0, "avg_logprob": -0.14598915364482615, "compression_ratio": 1.610878661087866, "no_speech_prob": 0.006192088592797518}, {"id": 74, "seek": 45864, "start": 479.28, "end": 484.64, "text": " Joshua Book is trying to make. Okay, so the first keyword finalize is we've got a very high level", "tokens": [51396, 24005, 9476, 307, 1382, 281, 652, 13, 1033, 11, 370, 264, 700, 20428, 2572, 1125, 307, 321, 600, 658, 257, 588, 1090, 1496, 51664], "temperature": 0.0, "avg_logprob": -0.14598915364482615, "compression_ratio": 1.610878661087866, "no_speech_prob": 0.006192088592797518}, {"id": 75, "seek": 48464, "start": 484.64, "end": 489.2, "text": " conceptual understanding of what it is. Let's take a look at what cleaners are, which is kind of like", "tokens": [50364, 24106, 3701, 295, 437, 309, 307, 13, 961, 311, 747, 257, 574, 412, 437, 2541, 433, 366, 11, 597, 307, 733, 295, 411, 50592], "temperature": 0.0, "avg_logprob": -0.1560498628860865, "compression_ratio": 1.5125628140703518, "no_speech_prob": 0.005137983709573746}, {"id": 76, "seek": 48464, "start": 489.2, "end": 498.4, "text": " an evolution of finalizers and is perhaps a bit safer to use, even though that too should try and", "tokens": [50592, 364, 9303, 295, 2572, 22525, 293, 307, 4317, 257, 857, 15856, 281, 764, 11, 754, 1673, 300, 886, 820, 853, 293, 51052], "temperature": 0.0, "avg_logprob": -0.1560498628860865, "compression_ratio": 1.5125628140703518, "no_speech_prob": 0.005137983709573746}, {"id": 77, "seek": 48464, "start": 498.4, "end": 509.12, "text": " be avoided ideally. Once again from the, so cleaner is in fact, let me open it up. It's an interface.", "tokens": [51052, 312, 24890, 22915, 13, 3443, 797, 490, 264, 11, 370, 16532, 307, 294, 1186, 11, 718, 385, 1269, 309, 493, 13, 467, 311, 364, 9226, 13, 51588], "temperature": 0.0, "avg_logprob": -0.1560498628860865, "compression_ratio": 1.5125628140703518, "no_speech_prob": 0.005137983709573746}, {"id": 78, "seek": 50912, "start": 509.52, "end": 521.12, "text": " Sorry. Sorry, I meant to say cleaner is a subclass of object. I was thinking of auto-closable,", "tokens": [50384, 4919, 13, 4919, 11, 286, 4140, 281, 584, 16532, 307, 257, 1422, 11665, 295, 2657, 13, 286, 390, 1953, 295, 8399, 12, 3474, 329, 712, 11, 50964], "temperature": 0.0, "avg_logprob": -0.19705364802112318, "compression_ratio": 1.4973821989528795, "no_speech_prob": 0.0014543997822329402}, {"id": 79, "seek": 50912, "start": 521.12, "end": 528.64, "text": " which is an interface. We'll talk about that later on. And the definitions for the cleaner is,", "tokens": [50964, 597, 307, 364, 9226, 13, 492, 603, 751, 466, 300, 1780, 322, 13, 400, 264, 21988, 337, 264, 16532, 307, 11, 51340], "temperature": 0.0, "avg_logprob": -0.19705364802112318, "compression_ratio": 1.4973821989528795, "no_speech_prob": 0.0014543997822329402}, {"id": 80, "seek": 50912, "start": 528.64, "end": 536.72, "text": " again, by the Oracle docs. Cleaner manages a set of object references and corresponding cleaning", "tokens": [51340, 797, 11, 538, 264, 25654, 45623, 13, 18463, 260, 22489, 257, 992, 295, 2657, 15400, 293, 11760, 8924, 51744], "temperature": 0.0, "avg_logprob": -0.19705364802112318, "compression_ratio": 1.4973821989528795, "no_speech_prob": 0.0014543997822329402}, {"id": 81, "seek": 53672, "start": 536.72, "end": 542.4, "text": " actions. Cleaning actions are registered to run after the cleaner is notified that the object has", "tokens": [50364, 5909, 13, 8834, 8415, 5909, 366, 13968, 281, 1190, 934, 264, 16532, 307, 18013, 300, 264, 2657, 575, 50648], "temperature": 0.0, "avg_logprob": -0.10826776315877726, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.008314833976328373}, {"id": 82, "seek": 53672, "start": 542.4, "end": 547.6800000000001, "text": " become phantom reachable. So what is phantom reachable? I did discuss this in the previous", "tokens": [50648, 1813, 903, 25796, 2524, 712, 13, 407, 437, 307, 903, 25796, 2524, 712, 30, 286, 630, 2248, 341, 294, 264, 3894, 50912], "temperature": 0.0, "avg_logprob": -0.10826776315877726, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.008314833976328373}, {"id": 83, "seek": 53672, "start": 549.0400000000001, "end": 554.1600000000001, "text": " item, item number seven. I'm not going to go into too much detail, because you could just", "tokens": [50980, 3174, 11, 3174, 1230, 3407, 13, 286, 478, 406, 516, 281, 352, 666, 886, 709, 2607, 11, 570, 291, 727, 445, 51236], "temperature": 0.0, "avg_logprob": -0.10826776315877726, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.008314833976328373}, {"id": 84, "seek": 53672, "start": 554.1600000000001, "end": 561.0400000000001, "text": " watch that video. But phantom reachable is when an object has no strong soft or weak references,", "tokens": [51236, 1159, 300, 960, 13, 583, 903, 25796, 2524, 712, 307, 562, 364, 2657, 575, 572, 2068, 2787, 420, 5336, 15400, 11, 51580], "temperature": 0.0, "avg_logprob": -0.10826776315877726, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.008314833976328373}, {"id": 85, "seek": 56104, "start": 561.5999999999999, "end": 569.5999999999999, "text": " but at least one phantom reference. So this kind of has to do with how the JVM algorithms,", "tokens": [50392, 457, 412, 1935, 472, 903, 25796, 6408, 13, 407, 341, 733, 295, 575, 281, 360, 365, 577, 264, 508, 53, 44, 14642, 11, 50792], "temperature": 0.0, "avg_logprob": -0.10696377705052956, "compression_ratio": 1.8173076923076923, "no_speech_prob": 0.0018964165356010199}, {"id": 86, "seek": 56104, "start": 569.5999999999999, "end": 576.24, "text": " or how garbage collection algorithms, decide if a certain object has to be, or can be garbage", "tokens": [50792, 420, 577, 14150, 5765, 14642, 11, 4536, 498, 257, 1629, 2657, 575, 281, 312, 11, 420, 393, 312, 14150, 51124], "temperature": 0.0, "avg_logprob": -0.10696377705052956, "compression_ratio": 1.8173076923076923, "no_speech_prob": 0.0018964165356010199}, {"id": 87, "seek": 56104, "start": 576.24, "end": 583.76, "text": " collected. So basically, strong objects can never be garbage collected. And then it's sort of the,", "tokens": [51124, 11087, 13, 407, 1936, 11, 2068, 6565, 393, 1128, 312, 14150, 11087, 13, 400, 550, 309, 311, 1333, 295, 264, 11, 51500], "temperature": 0.0, "avg_logprob": -0.10696377705052956, "compression_ratio": 1.8173076923076923, "no_speech_prob": 0.0018964165356010199}, {"id": 88, "seek": 56104, "start": 584.8, "end": 588.9599999999999, "text": " there's like a cascading effect, not a cascading effect, there's like a triaging process where", "tokens": [51552, 456, 311, 411, 257, 3058, 66, 8166, 1802, 11, 406, 257, 3058, 66, 8166, 1802, 11, 456, 311, 411, 257, 1376, 3568, 1399, 689, 51760], "temperature": 0.0, "avg_logprob": -0.10696377705052956, "compression_ratio": 1.8173076923076923, "no_speech_prob": 0.0018964165356010199}, {"id": 89, "seek": 58896, "start": 588.96, "end": 593.2800000000001, "text": " it goes from strong, soft, weak, and then the lowest one is a phantom reference.", "tokens": [50364, 309, 1709, 490, 2068, 11, 2787, 11, 5336, 11, 293, 550, 264, 12437, 472, 307, 257, 903, 25796, 6408, 13, 50580], "temperature": 0.0, "avg_logprob": -0.13027484538191456, "compression_ratio": 1.6917293233082706, "no_speech_prob": 0.0013457000022754073}, {"id": 90, "seek": 58896, "start": 594.0, "end": 600.88, "text": " Read this document by Bialdown, which goes into detail, of course, linked to this in the", "tokens": [50616, 17604, 341, 4166, 538, 363, 831, 5093, 11, 597, 1709, 666, 2607, 11, 295, 1164, 11, 9408, 281, 341, 294, 264, 50960], "temperature": 0.0, "avg_logprob": -0.13027484538191456, "compression_ratio": 1.6917293233082706, "no_speech_prob": 0.0013457000022754073}, {"id": 91, "seek": 58896, "start": 600.88, "end": 605.52, "text": " description too, for more context. I'm not going to go into detail because it's sort of out of", "tokens": [50960, 3855, 886, 11, 337, 544, 4319, 13, 286, 478, 406, 516, 281, 352, 666, 2607, 570, 309, 311, 1333, 295, 484, 295, 51192], "temperature": 0.0, "avg_logprob": -0.13027484538191456, "compression_ratio": 1.6917293233082706, "no_speech_prob": 0.0013457000022754073}, {"id": 92, "seek": 58896, "start": 605.52, "end": 610.72, "text": " scope for this item. And as I've said here, these delineate when objects can be garbage", "tokens": [51192, 11923, 337, 341, 3174, 13, 400, 382, 286, 600, 848, 510, 11, 613, 1103, 533, 473, 562, 6565, 393, 312, 14150, 51452], "temperature": 0.0, "avg_logprob": -0.13027484538191456, "compression_ratio": 1.6917293233082706, "no_speech_prob": 0.0013457000022754073}, {"id": 93, "seek": 58896, "start": 610.72, "end": 617.52, "text": " collected. That's what phantom references do. And with cleaners, cleaners are used when an object", "tokens": [51452, 11087, 13, 663, 311, 437, 903, 25796, 15400, 360, 13, 400, 365, 2541, 433, 11, 2541, 433, 366, 1143, 562, 364, 2657, 51792], "temperature": 0.0, "avg_logprob": -0.13027484538191456, "compression_ratio": 1.6917293233082706, "no_speech_prob": 0.0013457000022754073}, {"id": 94, "seek": 61752, "start": 617.6, "end": 623.6, "text": " has become phantom reachable. That's how it relates. And then another definition from", "tokens": [50368, 575, 1813, 903, 25796, 2524, 712, 13, 663, 311, 577, 309, 16155, 13, 400, 550, 1071, 7123, 490, 50668], "temperature": 0.0, "avg_logprob": -0.1083879792288448, "compression_ratio": 1.6327433628318584, "no_speech_prob": 0.0019565210677683353}, {"id": 95, "seek": 61752, "start": 623.6, "end": 632.3199999999999, "text": " inside Java by Roger Riggs is, unlike a finalizer, a cleanup function holds the state needed for", "tokens": [50668, 1854, 10745, 538, 17666, 497, 32555, 307, 11, 8343, 257, 2572, 6545, 11, 257, 40991, 2445, 9190, 264, 1785, 2978, 337, 51104], "temperature": 0.0, "avg_logprob": -0.1083879792288448, "compression_ratio": 1.6327433628318584, "no_speech_prob": 0.0019565210677683353}, {"id": 96, "seek": 61752, "start": 632.3199999999999, "end": 637.28, "text": " cleanup separately from the object because we want the object to be reclaimed as soon as it is", "tokens": [51104, 40991, 14759, 490, 264, 2657, 570, 321, 528, 264, 2657, 281, 312, 850, 22642, 382, 2321, 382, 309, 307, 51352], "temperature": 0.0, "avg_logprob": -0.1083879792288448, "compression_ratio": 1.6327433628318584, "no_speech_prob": 0.0019565210677683353}, {"id": 97, "seek": 61752, "start": 637.28, "end": 643.36, "text": " unreachable. When it states, when it states reclaiming an object, what that really means is", "tokens": [51352, 517, 16226, 712, 13, 1133, 309, 4368, 11, 562, 309, 4368, 40074, 278, 364, 2657, 11, 437, 300, 534, 1355, 307, 51656], "temperature": 0.0, "avg_logprob": -0.1083879792288448, "compression_ratio": 1.6327433628318584, "no_speech_prob": 0.0019565210677683353}, {"id": 98, "seek": 64336, "start": 643.44, "end": 649.76, "text": " freeing up memory. So we can use it for something else. The cleanup function must be able to work", "tokens": [50368, 1737, 278, 493, 4675, 13, 407, 321, 393, 764, 309, 337, 746, 1646, 13, 440, 40991, 2445, 1633, 312, 1075, 281, 589, 50684], "temperature": 0.0, "avg_logprob": -0.09540032457422327, "compression_ratio": 1.7834645669291338, "no_speech_prob": 0.01001123059540987}, {"id": 99, "seek": 64336, "start": 649.76, "end": 655.2, "text": " independently from the object. It's correct. It should be able to run on a separate thread for", "tokens": [50684, 21761, 490, 264, 2657, 13, 467, 311, 3006, 13, 467, 820, 312, 1075, 281, 1190, 322, 257, 4994, 7207, 337, 50956], "temperature": 0.0, "avg_logprob": -0.09540032457422327, "compression_ratio": 1.7834645669291338, "no_speech_prob": 0.01001123059540987}, {"id": 100, "seek": 64336, "start": 655.2, "end": 660.08, "text": " instance. And that does happen. We shall see an example. If there are any references to the object", "tokens": [50956, 5197, 13, 400, 300, 775, 1051, 13, 492, 4393, 536, 364, 1365, 13, 759, 456, 366, 604, 15400, 281, 264, 2657, 51200], "temperature": 0.0, "avg_logprob": -0.09540032457422327, "compression_ratio": 1.7834645669291338, "no_speech_prob": 0.01001123059540987}, {"id": 101, "seek": 64336, "start": 660.08, "end": 663.52, "text": " from the cleanup function, it would still be reachable and could not be reclaimed.", "tokens": [51200, 490, 264, 40991, 2445, 11, 309, 576, 920, 312, 2524, 712, 293, 727, 406, 312, 850, 22642, 13, 51372], "temperature": 0.0, "avg_logprob": -0.09540032457422327, "compression_ratio": 1.7834645669291338, "no_speech_prob": 0.01001123059540987}, {"id": 102, "seek": 64336, "start": 664.08, "end": 669.44, "text": " Any state needed for the cleanup must be encapsulated in the cleanup function.", "tokens": [51400, 2639, 1785, 2978, 337, 264, 40991, 1633, 312, 38745, 6987, 294, 264, 40991, 2445, 13, 51668], "temperature": 0.0, "avg_logprob": -0.09540032457422327, "compression_ratio": 1.7834645669291338, "no_speech_prob": 0.01001123059540987}, {"id": 103, "seek": 66944, "start": 669.9200000000001, "end": 677.6800000000001, "text": " What does that mean? I believe what this means is, when the cleanup does take place, so a quick", "tokens": [50388, 708, 775, 300, 914, 30, 286, 1697, 437, 341, 1355, 307, 11, 562, 264, 40991, 775, 747, 1081, 11, 370, 257, 1702, 50776], "temperature": 0.0, "avg_logprob": -0.35102934586374385, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0013667452149093151}, {"id": 104, "seek": 66944, "start": 677.6800000000001, "end": 686.8000000000001, "text": " peek in the code, let's say the cleanup happens. Let's say this close method. This is a bit different.", "tokens": [50776, 19604, 294, 264, 3089, 11, 718, 311, 584, 264, 40991, 2314, 13, 961, 311, 584, 341, 1998, 3170, 13, 639, 307, 257, 857, 819, 13, 51232], "temperature": 0.0, "avg_logprob": -0.35102934586374385, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0013667452149093151}, {"id": 105, "seek": 66944, "start": 686.8000000000001, "end": 693.0400000000001, "text": " Ignore all this. But the state of an object should be local to the state of an object.", "tokens": [51232, 24754, 418, 439, 341, 13, 583, 264, 1785, 295, 364, 2657, 820, 312, 2654, 281, 264, 1785, 295, 364, 2657, 13, 51544], "temperature": 0.0, "avg_logprob": -0.35102934586374385, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0013667452149093151}, {"id": 106, "seek": 69304, "start": 693.52, "end": 699.4399999999999, "text": " When the cleanup is taking place. I believe that's what it means. It's encapsulated within this", "tokens": [50388, 1133, 264, 40991, 307, 1940, 1081, 13, 286, 1697, 300, 311, 437, 309, 1355, 13, 467, 311, 38745, 6987, 1951, 341, 50684], "temperature": 0.0, "avg_logprob": -0.5273948384222583, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.009702155366539955}, {"id": 107, "seek": 69304, "start": 699.4399999999999, "end": 704.4, "text": " method. Ignore all this, but it's a really sub-art context, but we shall get this code a bit later.", "tokens": [50684, 3170, 13, 24754, 418, 439, 341, 11, 457, 309, 311, 257, 534, 1422, 12, 446, 4319, 11, 457, 321, 4393, 483, 341, 3089, 257, 857, 1780, 13, 50932], "temperature": 0.0, "avg_logprob": -0.5273948384222583, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.009702155366539955}, {"id": 108, "seek": 69304, "start": 706.64, "end": 714.16, "text": " Okay, now we get to the items, what Joshua Block has stated in the item in the book. And the first", "tokens": [51044, 1033, 11, 586, 321, 483, 281, 264, 4754, 11, 437, 24005, 17500, 575, 11323, 294, 264, 3174, 294, 264, 1446, 13, 400, 264, 700, 51420], "temperature": 0.0, "avg_logprob": -0.5273948384222583, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.009702155366539955}, {"id": 109, "seek": 69304, "start": 714.16, "end": 720.4, "text": " thing is, the first thing we need to do is, we need to take a look at the state of an object.", "tokens": [51420, 551, 307, 11, 264, 700, 551, 321, 643, 281, 360, 307, 11, 321, 643, 281, 747, 257, 574, 412, 264, 1785, 295, 364, 2657, 13, 51732], "temperature": 0.0, "avg_logprob": -0.5273948384222583, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.009702155366539955}, {"id": 110, "seek": 72040, "start": 720.72, "end": 725.4399999999999, "text": " And the first thing is, he's kind of talking to C++ programmers.", "tokens": [50380, 400, 264, 700, 551, 307, 11, 415, 311, 733, 295, 1417, 281, 383, 25472, 41504, 13, 50616], "temperature": 0.0, "avg_logprob": -0.16217142221878986, "compression_ratio": 1.5565610859728507, "no_speech_prob": 0.029277579858899117}, {"id": 111, "seek": 72040, "start": 727.36, "end": 736.16, "text": " And a point he wants to make salient and very clear is that finalizers or cleaners are not", "tokens": [50712, 400, 257, 935, 415, 2738, 281, 652, 1845, 1196, 293, 588, 1850, 307, 300, 2572, 22525, 420, 2541, 433, 366, 406, 51152], "temperature": 0.0, "avg_logprob": -0.16217142221878986, "compression_ratio": 1.5565610859728507, "no_speech_prob": 0.029277579858899117}, {"id": 112, "seek": 72040, "start": 736.16, "end": 744.16, "text": " the same as destructors in C++. Now, obviously, because C++, I'm not a C++ programmer in any way,", "tokens": [51152, 264, 912, 382, 2677, 1757, 830, 294, 383, 25472, 13, 823, 11, 2745, 11, 570, 383, 25472, 11, 286, 478, 406, 257, 383, 25472, 32116, 294, 604, 636, 11, 51552], "temperature": 0.0, "avg_logprob": -0.16217142221878986, "compression_ratio": 1.5565610859728507, "no_speech_prob": 0.029277579858899117}, {"id": 113, "seek": 72040, "start": 744.72, "end": 750.0799999999999, "text": " I've probably written like 10 lines of C++ code in my life, probably a bit more than that.", "tokens": [51580, 286, 600, 1391, 3720, 411, 1266, 3876, 295, 383, 25472, 3089, 294, 452, 993, 11, 1391, 257, 857, 544, 813, 300, 13, 51848], "temperature": 0.0, "avg_logprob": -0.16217142221878986, "compression_ratio": 1.5565610859728507, "no_speech_prob": 0.029277579858899117}, {"id": 114, "seek": 75008, "start": 750.08, "end": 756.32, "text": " I did do a unit, a data structure and a patterns unit back in uni, which was a, which was in C++.", "tokens": [50364, 286, 630, 360, 257, 4985, 11, 257, 1412, 3877, 293, 257, 8294, 4985, 646, 294, 36435, 11, 597, 390, 257, 11, 597, 390, 294, 383, 25472, 13, 50676], "temperature": 0.0, "avg_logprob": -0.17207730985155292, "compression_ratio": 1.5284552845528456, "no_speech_prob": 0.000511175487190485}, {"id": 115, "seek": 75008, "start": 757.0400000000001, "end": 763.84, "text": " And obviously, so because C++ doesn't have automatic memory management or garbage cleaning,", "tokens": [50712, 400, 2745, 11, 370, 570, 383, 25472, 1177, 380, 362, 12509, 4675, 4592, 420, 14150, 8924, 11, 51052], "temperature": 0.0, "avg_logprob": -0.17207730985155292, "compression_ratio": 1.5284552845528456, "no_speech_prob": 0.000511175487190485}, {"id": 116, "seek": 75008, "start": 763.84, "end": 771.36, "text": " we need to do it ourselves, the programmer. So I believe it's done through destructors.", "tokens": [51052, 321, 643, 281, 360, 309, 4175, 11, 264, 32116, 13, 407, 286, 1697, 309, 311, 1096, 807, 2677, 1757, 830, 13, 51428], "temperature": 0.0, "avg_logprob": -0.17207730985155292, "compression_ratio": 1.5284552845528456, "no_speech_prob": 0.000511175487190485}, {"id": 117, "seek": 75008, "start": 772.24, "end": 779.12, "text": " Take what I say with a great assault. Maybe they'd rather us do it. But one way it is done in C++,", "tokens": [51472, 3664, 437, 286, 584, 365, 257, 869, 12458, 13, 2704, 436, 1116, 2831, 505, 360, 309, 13, 583, 472, 636, 309, 307, 1096, 294, 383, 25472, 11, 51816], "temperature": 0.0, "avg_logprob": -0.17207730985155292, "compression_ratio": 1.5284552845528456, "no_speech_prob": 0.000511175487190485}, {"id": 118, "seek": 77912, "start": 779.12, "end": 785.76, "text": " probably the most popular way is using destructors and Joshua Block and once we make it clear", "tokens": [50364, 1391, 264, 881, 3743, 636, 307, 1228, 2677, 1757, 830, 293, 24005, 17500, 293, 1564, 321, 652, 309, 1850, 50696], "temperature": 0.0, "avg_logprob": -0.1297050251680262, "compression_ratio": 1.6334841628959276, "no_speech_prob": 0.002589080948382616}, {"id": 119, "seek": 77912, "start": 786.4, "end": 792.0, "text": " that cleaners and finalizers are not the same as destructors. And here's what he states.", "tokens": [50728, 300, 2541, 433, 293, 2572, 22525, 366, 406, 264, 912, 382, 2677, 1757, 830, 13, 400, 510, 311, 437, 415, 4368, 13, 51008], "temperature": 0.0, "avg_logprob": -0.1297050251680262, "compression_ratio": 1.6334841628959276, "no_speech_prob": 0.002589080948382616}, {"id": 120, "seek": 77912, "start": 794.32, "end": 800.64, "text": " Finalizers are unpredictable, often dangerous and generally unnecessary. I shall also discuss", "tokens": [51124, 13443, 22525, 366, 31160, 11, 2049, 5795, 293, 5101, 19350, 13, 286, 4393, 611, 2248, 51440], "temperature": 0.0, "avg_logprob": -0.1297050251680262, "compression_ratio": 1.6334841628959276, "no_speech_prob": 0.002589080948382616}, {"id": 121, "seek": 77912, "start": 800.64, "end": 806.4, "text": " that bit about them being unpredictable or non-deterministic as to why that's a huge", "tokens": [51440, 300, 857, 466, 552, 885, 31160, 420, 2107, 12, 49136, 259, 3142, 382, 281, 983, 300, 311, 257, 2603, 51728], "temperature": 0.0, "avg_logprob": -0.1297050251680262, "compression_ratio": 1.6334841628959276, "no_speech_prob": 0.002589080948382616}, {"id": 122, "seek": 80640, "start": 806.4, "end": 813.6, "text": " risk when programming as we go into the item. And then he states, as of Java 9,", "tokens": [50364, 3148, 562, 9410, 382, 321, 352, 666, 264, 3174, 13, 400, 550, 415, 4368, 11, 382, 295, 10745, 1722, 11, 50724], "temperature": 0.0, "avg_logprob": -0.13296325471666123, "compression_ratio": 1.5726495726495726, "no_speech_prob": 0.004068559501320124}, {"id": 123, "seek": 80640, "start": 813.6, "end": 819.1999999999999, "text": " this is an important point, finalizers have been deprecated, but they are still being used by the", "tokens": [50724, 341, 307, 364, 1021, 935, 11, 2572, 22525, 362, 668, 1367, 13867, 770, 11, 457, 436, 366, 920, 885, 1143, 538, 264, 51004], "temperature": 0.0, "avg_logprob": -0.13296325471666123, "compression_ratio": 1.5726495726495726, "no_speech_prob": 0.004068559501320124}, {"id": 124, "seek": 80640, "start": 819.1999999999999, "end": 826.8, "text": " Java libraries. The Java 9 replacement for finalizers is cleaners. Cleaners are less dangerous", "tokens": [51004, 10745, 15148, 13, 440, 10745, 1722, 14419, 337, 2572, 22525, 307, 2541, 433, 13, 18463, 433, 366, 1570, 5795, 51384], "temperature": 0.0, "avg_logprob": -0.13296325471666123, "compression_ratio": 1.5726495726495726, "no_speech_prob": 0.004068559501320124}, {"id": 125, "seek": 80640, "start": 826.8, "end": 833.04, "text": " than finalizers, but still unpredictable, slow and generally unnecessary. So this, which is why", "tokens": [51384, 813, 2572, 22525, 11, 457, 920, 31160, 11, 2964, 293, 5101, 19350, 13, 407, 341, 11, 597, 307, 983, 51696], "temperature": 0.0, "avg_logprob": -0.13296325471666123, "compression_ratio": 1.5726495726495726, "no_speech_prob": 0.004068559501320124}, {"id": 126, "seek": 83304, "start": 833.04, "end": 839.5999999999999, "text": " we should be avoiding avoiding old finalizers and cleaners. So despite having the caveat that", "tokens": [50364, 321, 820, 312, 20220, 20220, 1331, 2572, 22525, 293, 2541, 433, 13, 407, 7228, 1419, 264, 43012, 300, 50692], "temperature": 0.0, "avg_logprob": -0.11807953227650035, "compression_ratio": 1.696078431372549, "no_speech_prob": 0.010646887123584747}, {"id": 127, "seek": 83304, "start": 839.5999999999999, "end": 846.0799999999999, "text": " finalizers and cleaners aren't the same as destructors, he states, or he continues,", "tokens": [50692, 2572, 22525, 293, 2541, 433, 3212, 380, 264, 912, 382, 2677, 1757, 830, 11, 415, 4368, 11, 420, 415, 6515, 11, 51016], "temperature": 0.0, "avg_logprob": -0.11807953227650035, "compression_ratio": 1.696078431372549, "no_speech_prob": 0.010646887123584747}, {"id": 128, "seek": 83304, "start": 846.0799999999999, "end": 854.3199999999999, "text": " C++ destructors are also used to reclaim other non-memory resources. In Java,", "tokens": [51016, 383, 25472, 2677, 1757, 830, 366, 611, 1143, 281, 40074, 661, 2107, 12, 17886, 827, 3593, 13, 682, 10745, 11, 51428], "temperature": 0.0, "avg_logprob": -0.11807953227650035, "compression_ratio": 1.696078431372549, "no_speech_prob": 0.010646887123584747}, {"id": 129, "seek": 83304, "start": 854.3199999999999, "end": 860.7199999999999, "text": " a try with resources or try finally block is used for this purpose. And then he continues,", "tokens": [51428, 257, 853, 365, 3593, 420, 853, 2721, 3461, 307, 1143, 337, 341, 4334, 13, 400, 550, 415, 6515, 11, 51748], "temperature": 0.0, "avg_logprob": -0.11807953227650035, "compression_ratio": 1.696078431372549, "no_speech_prob": 0.010646887123584747}, {"id": 130, "seek": 86072, "start": 860.72, "end": 866.0, "text": " one shortcoming of finalizers and cleaners is that there's no guarantee they'll be executed", "tokens": [50364, 472, 2099, 6590, 295, 2572, 22525, 293, 2541, 433, 307, 300, 456, 311, 572, 10815, 436, 603, 312, 17577, 50628], "temperature": 0.0, "avg_logprob": -0.08774491537988713, "compression_ratio": 1.6704980842911878, "no_speech_prob": 0.005729520693421364}, {"id": 131, "seek": 86072, "start": 866.0, "end": 869.52, "text": " promptly. Yes, before I read that, I need to go through the notes that I took down.", "tokens": [50628, 48594, 13, 1079, 11, 949, 286, 1401, 300, 11, 286, 643, 281, 352, 807, 264, 5570, 300, 286, 1890, 760, 13, 50804], "temperature": 0.0, "avg_logprob": -0.08774491537988713, "compression_ratio": 1.6704980842911878, "no_speech_prob": 0.005729520693421364}, {"id": 132, "seek": 86072, "start": 871.6800000000001, "end": 875.6800000000001, "text": " So I had to go through the code base a bit and read up again, because I wrote this a while back", "tokens": [50912, 407, 286, 632, 281, 352, 807, 264, 3089, 3096, 257, 857, 293, 1401, 493, 797, 11, 570, 286, 4114, 341, 257, 1339, 646, 51112], "temperature": 0.0, "avg_logprob": -0.08774491537988713, "compression_ratio": 1.6704980842911878, "no_speech_prob": 0.005729520693421364}, {"id": 133, "seek": 86072, "start": 875.6800000000001, "end": 881.36, "text": " and I've forgotten some bits as to how it's all going to come together. In fact,", "tokens": [51112, 293, 286, 600, 11832, 512, 9239, 382, 281, 577, 309, 311, 439, 516, 281, 808, 1214, 13, 682, 1186, 11, 51396], "temperature": 0.0, "avg_logprob": -0.08774491537988713, "compression_ratio": 1.6704980842911878, "no_speech_prob": 0.005729520693421364}, {"id": 134, "seek": 86072, "start": 882.32, "end": 889.0400000000001, "text": " by my struggle to demo this, to demonstrate this problem, is in many ways the point", "tokens": [51444, 538, 452, 7799, 281, 10723, 341, 11, 281, 11698, 341, 1154, 11, 307, 294, 867, 2098, 264, 935, 51780], "temperature": 0.0, "avg_logprob": -0.08774491537988713, "compression_ratio": 1.6704980842911878, "no_speech_prob": 0.005729520693421364}, {"id": 135, "seek": 88904, "start": 889.04, "end": 893.68, "text": " Joshua Block is trying to make that it is non-deterministic. I can't exactly show the problem", "tokens": [50364, 24005, 17500, 307, 1382, 281, 652, 300, 309, 307, 2107, 12, 49136, 259, 3142, 13, 286, 393, 380, 2293, 855, 264, 1154, 50596], "temperature": 0.0, "avg_logprob": -0.16098212181253635, "compression_ratio": 1.6488888888888888, "no_speech_prob": 0.00599961681291461}, {"id": 136, "seek": 88904, "start": 893.68, "end": 899.04, "text": " with finalizers because due to it's, it's not deterministic. And in programming, you'd expect", "tokens": [50596, 365, 2572, 22525, 570, 3462, 281, 309, 311, 11, 309, 311, 406, 15957, 3142, 13, 400, 294, 9410, 11, 291, 1116, 2066, 50864], "temperature": 0.0, "avg_logprob": -0.16098212181253635, "compression_ratio": 1.6488888888888888, "no_speech_prob": 0.00599961681291461}, {"id": 137, "seek": 88904, "start": 899.04, "end": 906.3199999999999, "text": " code to be deterministic and causal. The big problem with using cleaners and finalizers is", "tokens": [50864, 3089, 281, 312, 15957, 3142, 293, 38755, 13, 440, 955, 1154, 365, 1228, 2541, 433, 293, 2572, 22525, 307, 51228], "temperature": 0.0, "avg_logprob": -0.16098212181253635, "compression_ratio": 1.6488888888888888, "no_speech_prob": 0.00599961681291461}, {"id": 138, "seek": 88904, "start": 906.3199999999999, "end": 912.64, "text": " firstly that we aren't sure when the garbage collection will take place. We don't, we aren't", "tokens": [51228, 27376, 300, 321, 3212, 380, 988, 562, 264, 14150, 5765, 486, 747, 1081, 13, 492, 500, 380, 11, 321, 3212, 380, 51544], "temperature": 0.0, "avg_logprob": -0.16098212181253635, "compression_ratio": 1.6488888888888888, "no_speech_prob": 0.00599961681291461}, {"id": 139, "seek": 91264, "start": 912.64, "end": 922.0, "text": " sure when the, when GC will run and JVM can do it, which will be anytime it wants. Even though", "tokens": [50364, 988, 562, 264, 11, 562, 29435, 486, 1190, 293, 508, 53, 44, 393, 360, 309, 11, 597, 486, 312, 13038, 309, 2738, 13, 2754, 1673, 50832], "temperature": 0.0, "avg_logprob": -0.1259373628868247, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.021942036226391792}, {"id": 140, "seek": 91264, "start": 922.0, "end": 928.4, "text": " it is possible, as I will show in a bit, for us to explicitly run a GC or a garbage collection", "tokens": [50832, 309, 307, 1944, 11, 382, 286, 486, 855, 294, 257, 857, 11, 337, 505, 281, 20803, 1190, 257, 29435, 420, 257, 14150, 5765, 51152], "temperature": 0.0, "avg_logprob": -0.1259373628868247, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.021942036226391792}, {"id": 141, "seek": 91264, "start": 928.4, "end": 933.52, "text": " cycle, it is not, it's ill-advised. One shouldn't, one shouldn't do this. There are many other side", "tokens": [51152, 6586, 11, 309, 307, 406, 11, 309, 311, 3171, 12, 345, 24420, 13, 1485, 4659, 380, 11, 472, 4659, 380, 360, 341, 13, 821, 366, 867, 661, 1252, 51408], "temperature": 0.0, "avg_logprob": -0.1259373628868247, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.021942036226391792}, {"id": 142, "seek": 91264, "start": 933.52, "end": 942.56, "text": " effects that can affect the program. And it's possible that the finalizer thread, so the thread", "tokens": [51408, 5065, 300, 393, 3345, 264, 1461, 13, 400, 309, 311, 1944, 300, 264, 2572, 6545, 7207, 11, 370, 264, 7207, 51860], "temperature": 0.0, "avg_logprob": -0.1259373628868247, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.021942036226391792}, {"id": 143, "seek": 94256, "start": 942.64, "end": 948.8, "text": " where the closing of the objects taking place can be of low priority that can lead to an", "tokens": [50368, 689, 264, 10377, 295, 264, 6565, 1940, 1081, 393, 312, 295, 2295, 9365, 300, 393, 1477, 281, 364, 50676], "temperature": 0.0, "avg_logprob": -0.11535738894813939, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.0023590587079524994}, {"id": 144, "seek": 94256, "start": 948.8, "end": 952.64, "text": " out-of-memory error. Because some other threads would run, take up all the memory and when this", "tokens": [50676, 484, 12, 2670, 12, 17886, 827, 6713, 13, 1436, 512, 661, 19314, 576, 1190, 11, 747, 493, 439, 264, 4675, 293, 562, 341, 50868], "temperature": 0.0, "avg_logprob": -0.11535738894813939, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.0023590587079524994}, {"id": 145, "seek": 94256, "start": 952.64, "end": 959.1199999999999, "text": " thread runs, that can throw an out-of-memory error. Even, and then there's again another caveat that", "tokens": [50868, 7207, 6676, 11, 300, 393, 3507, 364, 484, 12, 2670, 12, 17886, 827, 6713, 13, 2754, 11, 293, 550, 456, 311, 797, 1071, 43012, 300, 51192], "temperature": 0.0, "avg_logprob": -0.11535738894813939, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.0023590587079524994}, {"id": 146, "seek": 94256, "start": 959.1199999999999, "end": 966.64, "text": " cleaners in fact do run in the background. And the garbage collection is controlled by the class", "tokens": [51192, 2541, 433, 294, 1186, 360, 1190, 294, 264, 3678, 13, 400, 264, 14150, 5765, 307, 10164, 538, 264, 1508, 51568], "temperature": 0.0, "avg_logprob": -0.11535738894813939, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.0023590587079524994}, {"id": 147, "seek": 96664, "start": 966.64, "end": 972.72, "text": " itself. The class owns that garbage collection. However, there still is a problem of it not", "tokens": [50364, 2564, 13, 440, 1508, 19143, 300, 14150, 5765, 13, 2908, 11, 456, 920, 307, 257, 1154, 295, 309, 406, 50668], "temperature": 0.0, "avg_logprob": -0.0921393581058668, "compression_ratio": 1.7397260273972603, "no_speech_prob": 0.010323269292712212}, {"id": 148, "seek": 96664, "start": 972.72, "end": 978.64, "text": " being, of it not running promptly. Sorry, I made a mistake there. The garbage collection doesn't", "tokens": [50668, 885, 11, 295, 309, 406, 2614, 48594, 13, 4919, 11, 286, 1027, 257, 6146, 456, 13, 440, 14150, 5765, 1177, 380, 50964], "temperature": 0.0, "avg_logprob": -0.0921393581058668, "compression_ratio": 1.7397260273972603, "no_speech_prob": 0.010323269292712212}, {"id": 149, "seek": 96664, "start": 978.64, "end": 984.96, "text": " have, sorry, the class doesn't have control of the garbage collection, but it has control of its", "tokens": [50964, 362, 11, 2597, 11, 264, 1508, 1177, 380, 362, 1969, 295, 264, 14150, 5765, 11, 457, 309, 575, 1969, 295, 1080, 51280], "temperature": 0.0, "avg_logprob": -0.0921393581058668, "compression_ratio": 1.7397260273972603, "no_speech_prob": 0.010323269292712212}, {"id": 150, "seek": 96664, "start": 984.96, "end": 992.24, "text": " own threads, which we shall see because we use a runnable interface. And nevertheless, it still", "tokens": [51280, 1065, 19314, 11, 597, 321, 4393, 536, 570, 321, 764, 257, 1190, 77, 712, 9226, 13, 400, 26924, 11, 309, 920, 51644], "temperature": 0.0, "avg_logprob": -0.0921393581058668, "compression_ratio": 1.7397260273972603, "no_speech_prob": 0.010323269292712212}, {"id": 151, "seek": 99224, "start": 992.24, "end": 1001.84, "text": " does not guarantee the promptness. And due to the non-determinism in both cleaners and finalizers.", "tokens": [50364, 775, 406, 10815, 264, 12391, 1287, 13, 400, 3462, 281, 264, 2107, 12, 49136, 259, 1434, 294, 1293, 2541, 433, 293, 2572, 22525, 13, 50844], "temperature": 0.0, "avg_logprob": -0.19475554181383803, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.032567597925662994}, {"id": 152, "seek": 99224, "start": 1001.84, "end": 1008.88, "text": " Now I'll quickly show what the hell finalizer even is, because there isn't really a proper example", "tokens": [50844, 823, 286, 603, 2661, 855, 437, 264, 4921, 2572, 6545, 754, 307, 11, 570, 456, 1943, 380, 534, 257, 2296, 1365, 51196], "temperature": 0.0, "avg_logprob": -0.19475554181383803, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.032567597925662994}, {"id": 153, "seek": 99224, "start": 1008.88, "end": 1015.6, "text": " given in the book. I found an example courtesy of Byle Dunn. But before I show the code base,", "tokens": [51196, 2212, 294, 264, 1446, 13, 286, 1352, 364, 1365, 41704, 295, 3146, 306, 11959, 77, 13, 583, 949, 286, 855, 264, 3089, 3096, 11, 51532], "temperature": 0.0, "avg_logprob": -0.19475554181383803, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.032567597925662994}, {"id": 154, "seek": 101560, "start": 1016.16, "end": 1023.9200000000001, "text": " let's go through some something a bit more, let's say, clear. And I try to be a bit more", "tokens": [50392, 718, 311, 352, 807, 512, 746, 257, 857, 544, 11, 718, 311, 584, 11, 1850, 13, 400, 286, 853, 281, 312, 257, 857, 544, 50780], "temperature": 0.0, "avg_logprob": -0.11918665015179178, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.012051913887262344}, {"id": 155, "seek": 101560, "start": 1024.88, "end": 1029.6, "text": " explicit as to what Joshua Block has written here, because I think I didn't do a good job at", "tokens": [50828, 13691, 382, 281, 437, 24005, 17500, 575, 3720, 510, 11, 570, 286, 519, 286, 994, 380, 360, 257, 665, 1691, 412, 51064], "temperature": 0.0, "avg_logprob": -0.11918665015179178, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.012051913887262344}, {"id": 156, "seek": 101560, "start": 1029.6, "end": 1036.8, "text": " explaining that. Here's what he states. One shortcoming of finalizers and cleaners is that", "tokens": [51064, 13468, 300, 13, 1692, 311, 437, 415, 4368, 13, 1485, 2099, 6590, 295, 2572, 22525, 293, 2541, 433, 307, 300, 51424], "temperature": 0.0, "avg_logprob": -0.11918665015179178, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.012051913887262344}, {"id": 157, "seek": 101560, "start": 1036.8, "end": 1041.44, "text": " there is no guarantee they'll be executed promptly. It can take arbitrarily a little", "tokens": [51424, 456, 307, 572, 10815, 436, 603, 312, 17577, 48594, 13, 467, 393, 747, 19071, 3289, 257, 707, 51656], "temperature": 0.0, "avg_logprob": -0.11918665015179178, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.012051913887262344}, {"id": 158, "seek": 104144, "start": 1041.44, "end": 1047.1200000000001, "text": " between the time that an object becomes unreachable and the time its finalizers or cleaners run.", "tokens": [50364, 1296, 264, 565, 300, 364, 2657, 3643, 517, 16226, 712, 293, 264, 565, 1080, 2572, 22525, 420, 2541, 433, 1190, 13, 50648], "temperature": 0.0, "avg_logprob": -0.085446797311306, "compression_ratio": 1.6127167630057804, "no_speech_prob": 0.0019263055874034762}, {"id": 159, "seek": 104144, "start": 1048.64, "end": 1054.0800000000002, "text": " This means that you should never do anything time critical in a finalizer or cleaner.", "tokens": [50724, 639, 1355, 300, 291, 820, 1128, 360, 1340, 565, 4924, 294, 257, 2572, 6545, 420, 16532, 13, 50996], "temperature": 0.0, "avg_logprob": -0.085446797311306, "compression_ratio": 1.6127167630057804, "no_speech_prob": 0.0019263055874034762}, {"id": 160, "seek": 104144, "start": 1057.04, "end": 1063.6000000000001, "text": " The promptness with which finalizes and cleaners executed is primarily a function of the garbage", "tokens": [51144, 440, 12391, 1287, 365, 597, 2572, 5660, 293, 2541, 433, 17577, 307, 10029, 257, 2445, 295, 264, 14150, 51472], "temperature": 0.0, "avg_logprob": -0.085446797311306, "compression_ratio": 1.6127167630057804, "no_speech_prob": 0.0019263055874034762}, {"id": 161, "seek": 106360, "start": 1063.6, "end": 1067.9199999999998, "text": " collection algorithm, which varies widely across implementations.", "tokens": [50364, 5765, 9284, 11, 597, 21716, 13371, 2108, 4445, 763, 13, 50580], "temperature": 0.0, "avg_logprob": -0.07470050387912326, "compression_ratio": 1.5391304347826087, "no_speech_prob": 0.0015009744092822075}, {"id": 162, "seek": 106360, "start": 1071.6799999999998, "end": 1079.04, "text": " So what does that mean? The thing is, even after the finalizer runs, a GC still has to run in the", "tokens": [50768, 407, 437, 775, 300, 914, 30, 440, 551, 307, 11, 754, 934, 264, 2572, 6545, 6676, 11, 257, 29435, 920, 575, 281, 1190, 294, 264, 51136], "temperature": 0.0, "avg_logprob": -0.07470050387912326, "compression_ratio": 1.5391304347826087, "no_speech_prob": 0.0015009744092822075}, {"id": 163, "seek": 106360, "start": 1079.04, "end": 1085.28, "text": " background, clear up resources, clear up memory. But before we get to the idea of the promptness,", "tokens": [51136, 3678, 11, 1850, 493, 3593, 11, 1850, 493, 4675, 13, 583, 949, 321, 483, 281, 264, 1558, 295, 264, 12391, 1287, 11, 51448], "temperature": 0.0, "avg_logprob": -0.07470050387912326, "compression_ratio": 1.5391304347826087, "no_speech_prob": 0.0015009744092822075}, {"id": 164, "seek": 106360, "start": 1085.28, "end": 1090.6399999999999, "text": " let's take a look at what the hell a finalizer even is. So I was going through this example,", "tokens": [51448, 718, 311, 747, 257, 574, 412, 437, 264, 4921, 257, 2572, 6545, 754, 307, 13, 407, 286, 390, 516, 807, 341, 1365, 11, 51716], "temperature": 0.0, "avg_logprob": -0.07470050387912326, "compression_ratio": 1.5391304347826087, "no_speech_prob": 0.0015009744092822075}, {"id": 165, "seek": 109064, "start": 1091.3600000000001, "end": 1095.2800000000002, "text": " as I said, courtesy of Violet Dung, and let me try to open up that", "tokens": [50400, 382, 286, 848, 11, 41704, 295, 24383, 302, 413, 1063, 11, 293, 718, 385, 853, 281, 1269, 493, 300, 50596], "temperature": 0.0, "avg_logprob": -0.21118224648868336, "compression_ratio": 1.5125628140703518, "no_speech_prob": 0.003482293803244829}, {"id": 166, "seek": 109064, "start": 1097.5200000000002, "end": 1101.44, "text": " article if I could find it. This one right here.", "tokens": [50708, 7222, 498, 286, 727, 915, 309, 13, 639, 472, 558, 510, 13, 50904], "temperature": 0.0, "avg_logprob": -0.21118224648868336, "compression_ratio": 1.5125628140703518, "no_speech_prob": 0.003482293803244829}, {"id": 167, "seek": 109064, "start": 1103.68, "end": 1109.0400000000002, "text": " It was this article that he wrote, and he's just given a background as to what finalizers are.", "tokens": [51016, 467, 390, 341, 7222, 300, 415, 4114, 11, 293, 415, 311, 445, 2212, 257, 3678, 382, 281, 437, 2572, 22525, 366, 13, 51284], "temperature": 0.0, "avg_logprob": -0.21118224648868336, "compression_ratio": 1.5125628140703518, "no_speech_prob": 0.003482293803244829}, {"id": 168, "seek": 109064, "start": 1109.68, "end": 1115.1200000000001, "text": " Even though in the article S it goes, it does say why you shouldn't use it. It talks about", "tokens": [51316, 2754, 1673, 294, 264, 7222, 318, 309, 1709, 11, 309, 775, 584, 983, 291, 4659, 380, 764, 309, 13, 467, 6686, 466, 51588], "temperature": 0.0, "avg_logprob": -0.21118224648868336, "compression_ratio": 1.5125628140703518, "no_speech_prob": 0.003482293803244829}, {"id": 169, "seek": 111512, "start": 1116.08, "end": 1120.1599999999999, "text": " why we should take care of garbage collection, because JVM knows better, in fact.", "tokens": [50412, 983, 321, 820, 747, 1127, 295, 14150, 5765, 11, 570, 508, 53, 44, 3255, 1101, 11, 294, 1186, 13, 50616], "temperature": 0.0, "avg_logprob": -0.1908460008925286, "compression_ratio": 1.4833333333333334, "no_speech_prob": 0.0015728765865787864}, {"id": 170, "seek": 111512, "start": 1122.9599999999998, "end": 1128.7199999999998, "text": " And I have this class called Finalizable, and I have an instance, a buffered read instance.", "tokens": [50756, 400, 286, 362, 341, 1508, 1219, 13443, 22395, 11, 293, 286, 362, 364, 5197, 11, 257, 9204, 4073, 1401, 5197, 13, 51044], "temperature": 0.0, "avg_logprob": -0.1908460008925286, "compression_ratio": 1.4833333333333334, "no_speech_prob": 0.0015728765865787864}, {"id": 171, "seek": 111512, "start": 1130.1599999999999, "end": 1137.12, "text": " And then the constructor, what I'm doing is reading a file, getting an input stream, and then", "tokens": [51116, 400, 550, 264, 47479, 11, 437, 286, 478, 884, 307, 3760, 257, 3991, 11, 1242, 364, 4846, 4309, 11, 293, 550, 51464], "temperature": 0.0, "avg_logprob": -0.1908460008925286, "compression_ratio": 1.4833333333333334, "no_speech_prob": 0.0015728765865787864}, {"id": 172, "seek": 113712, "start": 1137.1999999999998, "end": 1143.76, "text": " saving a new buffered read instance in this private variable of declared,", "tokens": [50368, 6816, 257, 777, 9204, 4073, 1401, 5197, 294, 341, 4551, 7006, 295, 15489, 11, 50696], "temperature": 0.0, "avg_logprob": -0.262896728515625, "compression_ratio": 1.5575757575757576, "no_speech_prob": 0.001098398119211197}, {"id": 173, "seek": 113712, "start": 1144.8799999999999, "end": 1152.8, "text": " class variable of declared here. And it does specify from the specified class part,", "tokens": [50752, 1508, 7006, 295, 15489, 510, 13, 400, 309, 775, 16500, 490, 264, 22206, 1508, 644, 11, 51148], "temperature": 0.0, "avg_logprob": -0.262896728515625, "compression_ratio": 1.5575757575757576, "no_speech_prob": 0.001098398119211197}, {"id": 174, "seek": 113712, "start": 1153.4399999999998, "end": 1160.7199999999998, "text": " from some nature quotes. And here we have a method called ReadFirstLine, which reads from the first", "tokens": [51180, 490, 512, 3687, 19963, 13, 400, 510, 321, 362, 257, 3170, 1219, 17604, 27454, 43, 533, 11, 597, 15700, 490, 264, 700, 51544], "temperature": 0.0, "avg_logprob": -0.262896728515625, "compression_ratio": 1.5575757575757576, "no_speech_prob": 0.001098398119211197}, {"id": 175, "seek": 116072, "start": 1160.72, "end": 1169.28, "text": " line. So if this works as expected, it should read without music, life would be a mistake", "tokens": [50364, 1622, 13, 407, 498, 341, 1985, 382, 5176, 11, 309, 820, 1401, 1553, 1318, 11, 993, 576, 312, 257, 6146, 50792], "temperature": 0.0, "avg_logprob": -0.09731308619181316, "compression_ratio": 1.6891891891891893, "no_speech_prob": 0.010487128980457783}, {"id": 176, "seek": 116072, "start": 1169.28, "end": 1178.32, "text": " by Mr. Nietzsche, and I very much agree. And then once we have this instance created, we need to", "tokens": [50792, 538, 2221, 13, 36583, 89, 12287, 11, 293, 286, 588, 709, 3986, 13, 400, 550, 1564, 321, 362, 341, 5197, 2942, 11, 321, 643, 281, 51244], "temperature": 0.0, "avg_logprob": -0.09731308619181316, "compression_ratio": 1.6891891891891893, "no_speech_prob": 0.010487128980457783}, {"id": 177, "seek": 116072, "start": 1178.32, "end": 1184.4, "text": " clean it. We need to finalize it. And here's where, sorry, we need to close it, apologies.", "tokens": [51244, 2541, 309, 13, 492, 643, 281, 2572, 1125, 309, 13, 400, 510, 311, 689, 11, 2597, 11, 321, 643, 281, 1998, 309, 11, 34929, 13, 51548], "temperature": 0.0, "avg_logprob": -0.09731308619181316, "compression_ratio": 1.6891891891891893, "no_speech_prob": 0.010487128980457783}, {"id": 178, "seek": 116072, "start": 1184.4, "end": 1188.32, "text": " And here's where the problem occurs. Now, once we have this reader, the buffered instance reader,", "tokens": [51548, 400, 510, 311, 689, 264, 1154, 11843, 13, 823, 11, 1564, 321, 362, 341, 15149, 11, 264, 9204, 4073, 5197, 15149, 11, 51744], "temperature": 0.0, "avg_logprob": -0.09731308619181316, "compression_ratio": 1.6891891891891893, "no_speech_prob": 0.010487128980457783}, {"id": 179, "seek": 118832, "start": 1188.3999999999999, "end": 1192.72, "text": " which we declared here, it's used, we do the reading, whatever, and then it's used,", "tokens": [50368, 597, 321, 15489, 510, 11, 309, 311, 1143, 11, 321, 360, 264, 3760, 11, 2035, 11, 293, 550, 309, 311, 1143, 11, 50584], "temperature": 0.0, "avg_logprob": -0.11797543366750081, "compression_ratio": 1.6532663316582914, "no_speech_prob": 0.0028001684695482254}, {"id": 180, "seek": 118832, "start": 1192.72, "end": 1197.12, "text": " and then we're done with it. We need to use a finalized method, which, as you can see,", "tokens": [50584, 293, 550, 321, 434, 1096, 365, 309, 13, 492, 643, 281, 764, 257, 2572, 1602, 3170, 11, 597, 11, 382, 291, 393, 536, 11, 50804], "temperature": 0.0, "avg_logprob": -0.11797543366750081, "compression_ratio": 1.6532663316582914, "no_speech_prob": 0.0028001684695482254}, {"id": 181, "seek": 118832, "start": 1197.12, "end": 1201.12, "text": " is deprecated. The IntelliJ does specify that, that is deprecated.", "tokens": [50804, 307, 1367, 13867, 770, 13, 440, 18762, 72, 41, 775, 16500, 300, 11, 300, 307, 1367, 13867, 770, 13, 51004], "temperature": 0.0, "avg_logprob": -0.11797543366750081, "compression_ratio": 1.6532663316582914, "no_speech_prob": 0.0028001684695482254}, {"id": 182, "seek": 118832, "start": 1204.0, "end": 1210.96, "text": " It needs to be closed, which implies that the method was called, and it has to clean up the", "tokens": [51148, 467, 2203, 281, 312, 5395, 11, 597, 18779, 300, 264, 3170, 390, 1219, 11, 293, 309, 575, 281, 2541, 493, 264, 51496], "temperature": 0.0, "avg_logprob": -0.11797543366750081, "compression_ratio": 1.6532663316582914, "no_speech_prob": 0.0028001684695482254}, {"id": 183, "seek": 121096, "start": 1210.96, "end": 1220.4, "text": " resource. So in this finalize method, it'll close the resource. And now when I run the unit test,", "tokens": [50364, 7684, 13, 407, 294, 341, 2572, 1125, 3170, 11, 309, 603, 1998, 264, 7684, 13, 400, 586, 562, 286, 1190, 264, 4985, 1500, 11, 50836], "temperature": 0.0, "avg_logprob": -0.15872761782477884, "compression_ratio": 1.5562913907284768, "no_speech_prob": 0.006095604505389929}, {"id": 184, "seek": 121096, "start": 1220.4, "end": 1227.8400000000001, "text": " you will say it'll say closed buffered reader in the finalizer. If not, it'll just throw an error.", "tokens": [50836, 291, 486, 584, 309, 603, 584, 5395, 9204, 4073, 15149, 294, 264, 2572, 6545, 13, 759, 406, 11, 309, 603, 445, 3507, 364, 6713, 13, 51208], "temperature": 0.0, "avg_logprob": -0.15872761782477884, "compression_ratio": 1.5562913907284768, "no_speech_prob": 0.006095604505389929}, {"id": 185, "seek": 121096, "start": 1229.76, "end": 1231.44, "text": " If I go to the unit test that I wrote,", "tokens": [51304, 759, 286, 352, 281, 264, 4985, 1500, 300, 286, 4114, 11, 51388], "temperature": 0.0, "avg_logprob": -0.15872761782477884, "compression_ratio": 1.5562913907284768, "no_speech_prob": 0.006095604505389929}, {"id": 186, "seek": 123144, "start": 1231.52, "end": 1241.68, "text": " and if I run this, you can see it's printing that line here. I could probably zoom into that", "tokens": [50368, 293, 498, 286, 1190, 341, 11, 291, 393, 536, 309, 311, 14699, 300, 1622, 510, 13, 286, 727, 1391, 8863, 666, 300, 50876], "temperature": 0.0, "avg_logprob": -0.13707733154296875, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0013866815716028214}, {"id": 187, "seek": 123144, "start": 1241.68, "end": 1248.8, "text": " a little bit. Closed buffer reader in the finalizer. Really, that's what a finalizer does,", "tokens": [50876, 257, 707, 857, 13, 2033, 1744, 21762, 15149, 294, 264, 2572, 6545, 13, 4083, 11, 300, 311, 437, 257, 2572, 6545, 775, 11, 51232], "temperature": 0.0, "avg_logprob": -0.13707733154296875, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0013866815716028214}, {"id": 188, "seek": 123144, "start": 1248.8, "end": 1254.96, "text": " even though we shouldn't use it. And yeah, over here, you can go through the code later on.", "tokens": [51232, 754, 1673, 321, 4659, 380, 764, 309, 13, 400, 1338, 11, 670, 510, 11, 291, 393, 352, 807, 264, 3089, 1780, 322, 13, 51540], "temperature": 0.0, "avg_logprob": -0.13707733154296875, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0013866815716028214}, {"id": 189, "seek": 123144, "start": 1254.96, "end": 1259.76, "text": " I'm just checking if it's printing the first line. That's not pertinent to the point I'm trying to", "tokens": [51540, 286, 478, 445, 8568, 498, 309, 311, 14699, 264, 700, 1622, 13, 663, 311, 406, 13269, 11058, 281, 264, 935, 286, 478, 1382, 281, 51780], "temperature": 0.0, "avg_logprob": -0.13707733154296875, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0013866815716028214}, {"id": 190, "seek": 125976, "start": 1259.76, "end": 1266.64, "text": " make. And then this is important, though, because the GC is rather arbitrary. Well, it's not arbitrary,", "tokens": [50364, 652, 13, 400, 550, 341, 307, 1021, 11, 1673, 11, 570, 264, 29435, 307, 2831, 23211, 13, 1042, 11, 309, 311, 406, 23211, 11, 50708], "temperature": 0.0, "avg_logprob": -0.12536272601546528, "compression_ratio": 1.5444015444015444, "no_speech_prob": 0.005137851927429438}, {"id": 191, "seek": 125976, "start": 1266.64, "end": 1271.92, "text": " but we don't have really control of when garbage collection will take place. The JVM does that.", "tokens": [50708, 457, 321, 500, 380, 362, 534, 1969, 295, 562, 14150, 5765, 486, 747, 1081, 13, 440, 508, 53, 44, 775, 300, 13, 50972], "temperature": 0.0, "avg_logprob": -0.12536272601546528, "compression_ratio": 1.5444015444015444, "no_speech_prob": 0.005137851927429438}, {"id": 192, "seek": 125976, "start": 1272.64, "end": 1279.84, "text": " We're using a system.gc, but it shouldn't be invoked this explicitly. This is not something we should", "tokens": [51008, 492, 434, 1228, 257, 1185, 13, 70, 66, 11, 457, 309, 4659, 380, 312, 1048, 9511, 341, 20803, 13, 639, 307, 406, 746, 321, 820, 51368], "temperature": 0.0, "avg_logprob": -0.12536272601546528, "compression_ratio": 1.5444015444015444, "no_speech_prob": 0.005137851927429438}, {"id": 193, "seek": 125976, "start": 1279.84, "end": 1287.92, "text": " do, again, due to its non-deterministic behavior. So you probably can see it's like a theme that's", "tokens": [51368, 360, 11, 797, 11, 3462, 281, 1080, 2107, 12, 49136, 259, 3142, 5223, 13, 407, 291, 1391, 393, 536, 309, 311, 411, 257, 6314, 300, 311, 51772], "temperature": 0.0, "avg_logprob": -0.12536272601546528, "compression_ratio": 1.5444015444015444, "no_speech_prob": 0.005137851927429438}, {"id": 194, "seek": 128792, "start": 1287.92, "end": 1294.5600000000002, "text": " going to be in this whole item. The big problem with cleaners and finalizers is non-determinism,", "tokens": [50364, 516, 281, 312, 294, 341, 1379, 3174, 13, 440, 955, 1154, 365, 2541, 433, 293, 2572, 22525, 307, 2107, 12, 49136, 259, 1434, 11, 50696], "temperature": 0.0, "avg_logprob": -0.12876350402832032, "compression_ratio": 1.625, "no_speech_prob": 0.0020499536767601967}, {"id": 195, "seek": 128792, "start": 1295.3600000000001, "end": 1302.3200000000002, "text": " and it's the fact that it's tardy. It's tardiness that's not prompt, which is why Joshua Block states,", "tokens": [50736, 293, 309, 311, 264, 1186, 300, 309, 311, 21057, 88, 13, 467, 311, 21057, 1324, 300, 311, 406, 12391, 11, 597, 307, 983, 24005, 17500, 4368, 11, 51084], "temperature": 0.0, "avg_logprob": -0.12876350402832032, "compression_ratio": 1.625, "no_speech_prob": 0.0020499536767601967}, {"id": 196, "seek": 128792, "start": 1302.3200000000002, "end": 1310.0, "text": " as we continue, tardy finalization is not just a theoretical problem. Providing a finalizer", "tokens": [51084, 382, 321, 2354, 11, 21057, 88, 2572, 2144, 307, 406, 445, 257, 20864, 1154, 13, 15685, 2819, 257, 2572, 6545, 51468], "temperature": 0.0, "avg_logprob": -0.12876350402832032, "compression_ratio": 1.625, "no_speech_prob": 0.0020499536767601967}, {"id": 197, "seek": 128792, "start": 1310.0, "end": 1315.3600000000001, "text": " for a class can arbitrarily delay reclamation of its instances. And that's a problem.", "tokens": [51468, 337, 257, 1508, 393, 19071, 3289, 8577, 850, 43233, 295, 1080, 14519, 13, 400, 300, 311, 257, 1154, 13, 51736], "temperature": 0.0, "avg_logprob": -0.12876350402832032, "compression_ratio": 1.625, "no_speech_prob": 0.0020499536767601967}, {"id": 198, "seek": 131536, "start": 1316.32, "end": 1323.4399999999998, "text": " The language specification makes no guarantees, sorry, I'll read that again.", "tokens": [50412, 440, 2856, 31256, 1669, 572, 32567, 11, 2597, 11, 286, 603, 1401, 300, 797, 13, 50768], "temperature": 0.0, "avg_logprob": -0.1473205520446042, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.003944091033190489}, {"id": 199, "seek": 131536, "start": 1323.4399999999998, "end": 1329.84, "text": " The language specification makes no guarantees as to which thread will execute finalizers as there is", "tokens": [50768, 440, 2856, 31256, 1669, 572, 32567, 382, 281, 597, 7207, 486, 14483, 2572, 22525, 382, 456, 307, 51088], "temperature": 0.0, "avg_logprob": -0.1473205520446042, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.003944091033190489}, {"id": 200, "seek": 131536, "start": 1329.84, "end": 1336.6399999999999, "text": " no portable way to prevent this sort of problem other than to refrain from using finalizers.", "tokens": [51088, 572, 21800, 636, 281, 4871, 341, 1333, 295, 1154, 661, 813, 281, 46177, 490, 1228, 2572, 22525, 13, 51428], "temperature": 0.0, "avg_logprob": -0.1473205520446042, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.003944091033190489}, {"id": 201, "seek": 131536, "start": 1337.6, "end": 1343.12, "text": " And then, of course, as I stated, unlike finalizers, we still can use cleaners. Cleaners", "tokens": [51476, 400, 550, 11, 295, 1164, 11, 382, 286, 11323, 11, 8343, 2572, 22525, 11, 321, 920, 393, 764, 2541, 433, 13, 18463, 433, 51752], "temperature": 0.0, "avg_logprob": -0.1473205520446042, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.003944091033190489}, {"id": 202, "seek": 134312, "start": 1343.12, "end": 1350.32, "text": " aren't deprecated yet. And they would give us control of the thread, of the class that's using it.", "tokens": [50364, 3212, 380, 1367, 13867, 770, 1939, 13, 400, 436, 576, 976, 505, 1969, 295, 264, 7207, 11, 295, 264, 1508, 300, 311, 1228, 309, 13, 50724], "temperature": 0.0, "avg_logprob": -0.14222967010183432, "compression_ratio": 1.606694560669456, "no_speech_prob": 0.014058145694434643}, {"id": 203, "seek": 134312, "start": 1351.12, "end": 1356.7199999999998, "text": " But still, ultimately, the garbage collection, we still have no control. The JVM has control,", "tokens": [50764, 583, 920, 11, 6284, 11, 264, 14150, 5765, 11, 321, 920, 362, 572, 1969, 13, 440, 508, 53, 44, 575, 1969, 11, 51044], "temperature": 0.0, "avg_logprob": -0.14222967010183432, "compression_ratio": 1.606694560669456, "no_speech_prob": 0.014058145694434643}, {"id": 204, "seek": 134312, "start": 1356.7199999999998, "end": 1362.1599999999999, "text": " which is probably why we should avoid using cleaners too. As he states here, as a consequence,", "tokens": [51044, 597, 307, 1391, 983, 321, 820, 5042, 1228, 2541, 433, 886, 13, 1018, 415, 4368, 510, 11, 382, 257, 18326, 11, 51316], "temperature": 0.0, "avg_logprob": -0.14222967010183432, "compression_ratio": 1.606694560669456, "no_speech_prob": 0.014058145694434643}, {"id": 205, "seek": 134312, "start": 1362.1599999999999, "end": 1368.32, "text": " you should never depend on a finalizer or cleaner to update persistence state. That's correct if", "tokens": [51316, 291, 820, 1128, 5672, 322, 257, 2572, 6545, 420, 16532, 281, 5623, 37617, 1785, 13, 663, 311, 3006, 498, 51624], "temperature": 0.0, "avg_logprob": -0.14222967010183432, "compression_ratio": 1.606694560669456, "no_speech_prob": 0.014058145694434643}, {"id": 206, "seek": 136832, "start": 1368.32, "end": 1373.6799999999998, "text": " it's like a database connection or something that requires persistence. For example, depending on", "tokens": [50364, 309, 311, 411, 257, 8149, 4984, 420, 746, 300, 7029, 37617, 13, 1171, 1365, 11, 5413, 322, 50632], "temperature": 0.0, "avg_logprob": -0.09555666474090226, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.0024723177775740623}, {"id": 207, "seek": 136832, "start": 1373.6799999999998, "end": 1379.9199999999998, "text": " a finalizer or cleaner to release a persistent lock on a shared resource such as a database is a", "tokens": [50632, 257, 2572, 6545, 420, 16532, 281, 4374, 257, 24315, 4017, 322, 257, 5507, 7684, 1270, 382, 257, 8149, 307, 257, 50944], "temperature": 0.0, "avg_logprob": -0.09555666474090226, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.0024723177775740623}, {"id": 208, "seek": 136832, "start": 1379.9199999999998, "end": 1387.12, "text": " good way to bring your entire distributed system to a grinding halt. Oh, that is something you", "tokens": [50944, 665, 636, 281, 1565, 428, 2302, 12631, 1185, 281, 257, 25300, 12479, 13, 876, 11, 300, 307, 746, 291, 51304], "temperature": 0.0, "avg_logprob": -0.09555666474090226, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.0024723177775740623}, {"id": 209, "seek": 136832, "start": 1387.6799999999998, "end": 1395.12, "text": " certainly don't need. Programming is easy. It's really easy. It only gets complicated once it", "tokens": [51332, 3297, 500, 380, 643, 13, 8338, 2810, 307, 1858, 13, 467, 311, 534, 1858, 13, 467, 787, 2170, 6179, 1564, 309, 51704], "temperature": 0.0, "avg_logprob": -0.09555666474090226, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.0024723177775740623}, {"id": 210, "seek": 139512, "start": 1395.12, "end": 1403.9199999999998, "text": " becomes distributed programming and when concurrency gets involved. And that's why I have a beautiful", "tokens": [50364, 3643, 12631, 9410, 293, 562, 23702, 10457, 2170, 3288, 13, 400, 300, 311, 983, 286, 362, 257, 2238, 50804], "temperature": 0.0, "avg_logprob": -0.1039930011915124, "compression_ratio": 1.6092436974789917, "no_speech_prob": 0.009850949980318546}, {"id": 211, "seek": 139512, "start": 1403.9199999999998, "end": 1410.1599999999999, "text": " gift of my favorite actress, Margaret Robbie, probably the most beautiful woman in the world,", "tokens": [50804, 5306, 295, 452, 2954, 15410, 11, 24177, 45749, 11, 1391, 264, 881, 2238, 3059, 294, 264, 1002, 11, 51116], "temperature": 0.0, "avg_logprob": -0.1039930011915124, "compression_ratio": 1.6092436974789917, "no_speech_prob": 0.009850949980318546}, {"id": 212, "seek": 139512, "start": 1411.4399999999998, "end": 1416.56, "text": " after a certain other woman that I'm currently in love with. But we shall not talk about that.", "tokens": [51180, 934, 257, 1629, 661, 3059, 300, 286, 478, 4362, 294, 959, 365, 13, 583, 321, 4393, 406, 751, 466, 300, 13, 51436], "temperature": 0.0, "avg_logprob": -0.1039930011915124, "compression_ratio": 1.6092436974789917, "no_speech_prob": 0.009850949980318546}, {"id": 213, "seek": 139512, "start": 1418.6399999999999, "end": 1423.6, "text": " Don't be seduced. That's the point I'm trying to make. Do not be seduced by Margaret Robbie,", "tokens": [51540, 1468, 380, 312, 9643, 41209, 13, 663, 311, 264, 935, 286, 478, 1382, 281, 652, 13, 1144, 406, 312, 9643, 41209, 538, 24177, 45749, 11, 51788], "temperature": 0.0, "avg_logprob": -0.1039930011915124, "compression_ratio": 1.6092436974789917, "no_speech_prob": 0.009850949980318546}, {"id": 214, "seek": 142360, "start": 1423.6, "end": 1433.76, "text": " nor be seduced by the methods system.gc or system.run finalization. So, which is why,", "tokens": [50364, 6051, 312, 9643, 41209, 538, 264, 7150, 1185, 13, 70, 66, 420, 1185, 13, 12997, 2572, 2144, 13, 407, 11, 597, 307, 983, 11, 50872], "temperature": 0.0, "avg_logprob": -0.1542802773989164, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.014722044579684734}, {"id": 215, "seek": 142360, "start": 1433.76, "end": 1439.6799999999998, "text": " just to go back to the unit as before, I said it here, one shouldn't do this. This is a bad move.", "tokens": [50872, 445, 281, 352, 646, 281, 264, 4985, 382, 949, 11, 286, 848, 309, 510, 11, 472, 4659, 380, 360, 341, 13, 639, 307, 257, 1578, 1286, 13, 51168], "temperature": 0.0, "avg_logprob": -0.1542802773989164, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.014722044579684734}, {"id": 216, "seek": 142360, "start": 1439.6799999999998, "end": 1446.1599999999999, "text": " This, try and prevent, try and, yeah, try and prevent using system.gc in your code,", "tokens": [51168, 639, 11, 853, 293, 4871, 11, 853, 293, 11, 1338, 11, 853, 293, 4871, 1228, 1185, 13, 70, 66, 294, 428, 3089, 11, 51492], "temperature": 0.0, "avg_logprob": -0.1542802773989164, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.014722044579684734}, {"id": 217, "seek": 142360, "start": 1447.12, "end": 1451.6, "text": " again, due to its non-determinism, because both of these, the garbage collection and", "tokens": [51540, 797, 11, 3462, 281, 1080, 2107, 12, 49136, 259, 1434, 11, 570, 1293, 295, 613, 11, 264, 14150, 5765, 293, 51764], "temperature": 0.0, "avg_logprob": -0.1542802773989164, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.014722044579684734}, {"id": 218, "seek": 145160, "start": 1452.3999999999999, "end": 1457.28, "text": " what runs the finalization method makes no guarantee that they'll actually get executed.", "tokens": [50404, 437, 6676, 264, 2572, 2144, 3170, 1669, 572, 10815, 300, 436, 603, 767, 483, 17577, 13, 50648], "temperature": 0.0, "avg_logprob": -0.1474048102774271, "compression_ratio": 1.6273584905660377, "no_speech_prob": 0.005138174630701542}, {"id": 219, "seek": 145160, "start": 1459.04, "end": 1464.24, "text": " And in fact, these two methods run finalize their own exit, which are two other methods", "tokens": [50736, 400, 294, 1186, 11, 613, 732, 7150, 1190, 2572, 1125, 641, 1065, 11043, 11, 597, 366, 732, 661, 7150, 50996], "temperature": 0.0, "avg_logprob": -0.1474048102774271, "compression_ratio": 1.6273584905660377, "no_speech_prob": 0.005138174630701542}, {"id": 220, "seek": 145160, "start": 1464.24, "end": 1470.3999999999999, "text": " that can be, that pertains to finalizes have been deprecated because they aren't safe.", "tokens": [50996, 300, 393, 312, 11, 300, 13269, 2315, 281, 2572, 5660, 362, 668, 1367, 13867, 770, 570, 436, 3212, 380, 3273, 13, 51304], "temperature": 0.0, "avg_logprob": -0.1474048102774271, "compression_ratio": 1.6273584905660377, "no_speech_prob": 0.005138174630701542}, {"id": 221, "seek": 145160, "start": 1470.3999999999999, "end": 1474.8799999999999, "text": " Another red flag, especially if you're an API designer and aren't all programmers", "tokens": [51304, 3996, 2182, 7166, 11, 2318, 498, 291, 434, 364, 9362, 11795, 293, 3212, 380, 439, 41504, 51528], "temperature": 0.0, "avg_logprob": -0.1474048102774271, "compression_ratio": 1.6273584905660377, "no_speech_prob": 0.005138174630701542}, {"id": 222, "seek": 147488, "start": 1474.88, "end": 1482.8000000000002, "text": " designing APIs these days, is that finalizes ignore uncaught exceptions and doesn't notify the client", "tokens": [50364, 14685, 21445, 613, 1708, 11, 307, 300, 2572, 5660, 11200, 517, 496, 1599, 22847, 293, 1177, 380, 36560, 264, 6423, 50760], "temperature": 0.0, "avg_logprob": -0.12953293800354004, "compression_ratio": 1.7186147186147187, "no_speech_prob": 0.015900203958153725}, {"id": 223, "seek": 147488, "start": 1483.5200000000002, "end": 1489.68, "text": " what the hell is going on if you do use a finalizer and there's a corrupt object. So, for instance,", "tokens": [50796, 437, 264, 4921, 307, 516, 322, 498, 291, 360, 764, 257, 2572, 6545, 293, 456, 311, 257, 17366, 2657, 13, 407, 11, 337, 5197, 11, 51104], "temperature": 0.0, "avg_logprob": -0.12953293800354004, "compression_ratio": 1.7186147186147187, "no_speech_prob": 0.015900203958153725}, {"id": 224, "seek": 147488, "start": 1491.44, "end": 1497.0400000000002, "text": " let's say we have an object in corrupt state due to the non-deterministic arbitrary behavior of", "tokens": [51192, 718, 311, 584, 321, 362, 364, 2657, 294, 17366, 1785, 3462, 281, 264, 2107, 12, 49136, 259, 3142, 23211, 5223, 295, 51472], "temperature": 0.0, "avg_logprob": -0.12953293800354004, "compression_ratio": 1.7186147186147187, "no_speech_prob": 0.015900203958153725}, {"id": 225, "seek": 147488, "start": 1497.0400000000002, "end": 1502.0800000000002, "text": " a finalizer. Let's say we have an object that isn't fully cleaned up or an object that shouldn't be", "tokens": [51472, 257, 2572, 6545, 13, 961, 311, 584, 321, 362, 364, 2657, 300, 1943, 380, 4498, 16146, 493, 420, 364, 2657, 300, 4659, 380, 312, 51724], "temperature": 0.0, "avg_logprob": -0.12953293800354004, "compression_ratio": 1.7186147186147187, "no_speech_prob": 0.015900203958153725}, {"id": 226, "seek": 150208, "start": 1502.08, "end": 1511.84, "text": " accessed by another thread. When the object crashes, this thread will not be terminated by a finalizer,", "tokens": [50364, 34211, 538, 1071, 7207, 13, 1133, 264, 2657, 28642, 11, 341, 7207, 486, 406, 312, 1433, 5410, 538, 257, 2572, 6545, 11, 50852], "temperature": 0.0, "avg_logprob": -0.11859038296867819, "compression_ratio": 1.5621621621621622, "no_speech_prob": 0.0030743263196200132}, {"id": 227, "seek": 150208, "start": 1511.84, "end": 1518.08, "text": " whereas a JVM would certainly do that. It would make sure that if a thread crashes,", "tokens": [50852, 9735, 257, 508, 53, 44, 576, 3297, 360, 300, 13, 467, 576, 652, 988, 300, 498, 257, 7207, 28642, 11, 51164], "temperature": 0.0, "avg_logprob": -0.11859038296867819, "compression_ratio": 1.5621621621621622, "no_speech_prob": 0.0030743263196200132}, {"id": 228, "seek": 150208, "start": 1518.08, "end": 1523.28, "text": " if some competition goes wrong somewhere and some error is thrown, it's physically clear and explicit", "tokens": [51164, 498, 512, 6211, 1709, 2085, 4079, 293, 512, 6713, 307, 11732, 11, 309, 311, 9762, 1850, 293, 13691, 51424], "temperature": 0.0, "avg_logprob": -0.11859038296867819, "compression_ratio": 1.5621621621621622, "no_speech_prob": 0.0030743263196200132}, {"id": 229, "seek": 152328, "start": 1524.24, "end": 1529.28, "text": " to a user of an API and it would be terminated and cleaned up.", "tokens": [50412, 281, 257, 4195, 295, 364, 9362, 293, 309, 576, 312, 1433, 5410, 293, 16146, 493, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11957015991210937, "compression_ratio": 1.458100558659218, "no_speech_prob": 0.10222151130437851}, {"id": 230, "seek": 152328, "start": 1531.2, "end": 1541.36, "text": " This is a problem because if you do use finalizer, it'll allow objects in a corrupt state to be", "tokens": [50760, 639, 307, 257, 1154, 570, 498, 291, 360, 764, 2572, 6545, 11, 309, 603, 2089, 6565, 294, 257, 17366, 1785, 281, 312, 51268], "temperature": 0.0, "avg_logprob": -0.11957015991210937, "compression_ratio": 1.458100558659218, "no_speech_prob": 0.10222151130437851}, {"id": 231, "seek": 152328, "start": 1541.36, "end": 1549.28, "text": " accessed by a client of an API, which is why, again, he states, another problem with finalizes is that", "tokens": [51268, 34211, 538, 257, 6423, 295, 364, 9362, 11, 597, 307, 983, 11, 797, 11, 415, 4368, 11, 1071, 1154, 365, 2572, 5660, 307, 300, 51664], "temperature": 0.0, "avg_logprob": -0.11957015991210937, "compression_ratio": 1.458100558659218, "no_speech_prob": 0.10222151130437851}, {"id": 232, "seek": 154928, "start": 1549.28, "end": 1556.3999999999999, "text": " an uncaught exception thrown during finalization is ignored and finalization of that object terminates.", "tokens": [50364, 364, 517, 496, 1599, 11183, 11732, 1830, 2572, 2144, 307, 19735, 293, 2572, 2144, 295, 300, 2657, 10761, 1024, 13, 50720], "temperature": 0.0, "avg_logprob": -0.11527062329378995, "compression_ratio": 1.8008130081300813, "no_speech_prob": 0.01132948137819767}, {"id": 233, "seek": 154928, "start": 1558.0, "end": 1560.8, "text": " Uncaught exceptions can leave other objects in a corrupt state,", "tokens": [50800, 1156, 496, 1599, 22847, 393, 1856, 661, 6565, 294, 257, 17366, 1785, 11, 50940], "temperature": 0.0, "avg_logprob": -0.11527062329378995, "compression_ratio": 1.8008130081300813, "no_speech_prob": 0.01132948137819767}, {"id": 234, "seek": 154928, "start": 1561.68, "end": 1565.6, "text": " but when an object is left in a corrupt state and an exception is thrown,", "tokens": [50984, 457, 562, 364, 2657, 307, 1411, 294, 257, 17366, 1785, 293, 364, 11183, 307, 11732, 11, 51180], "temperature": 0.0, "avg_logprob": -0.11527062329378995, "compression_ratio": 1.8008130081300813, "no_speech_prob": 0.01132948137819767}, {"id": 235, "seek": 154928, "start": 1565.6, "end": 1570.16, "text": " generally you'd see that exception in the stack trace. With finalizers, there wouldn't be that and,", "tokens": [51180, 5101, 291, 1116, 536, 300, 11183, 294, 264, 8630, 13508, 13, 2022, 2572, 22525, 11, 456, 2759, 380, 312, 300, 293, 11, 51408], "temperature": 0.0, "avg_logprob": -0.11527062329378995, "compression_ratio": 1.8008130081300813, "no_speech_prob": 0.01132948137819767}, {"id": 236, "seek": 154928, "start": 1570.16, "end": 1577.84, "text": " in fact, he says it won't even print a warning. But, however, with cleaners, it's on an issue because", "tokens": [51408, 294, 1186, 11, 415, 1619, 309, 1582, 380, 754, 4482, 257, 9164, 13, 583, 11, 4461, 11, 365, 2541, 433, 11, 309, 311, 322, 364, 2734, 570, 51792], "temperature": 0.0, "avg_logprob": -0.11527062329378995, "compression_ratio": 1.8008130081300813, "no_speech_prob": 0.01132948137819767}, {"id": 237, "seek": 157784, "start": 1577.84, "end": 1584.8799999999999, "text": " with cleaners, the library or a class for all intents and purposes using a cleaner has control", "tokens": [50364, 365, 2541, 433, 11, 264, 6405, 420, 257, 1508, 337, 439, 560, 791, 293, 9932, 1228, 257, 16532, 575, 1969, 50716], "temperature": 0.0, "avg_logprob": -0.1478733303903163, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.007457877043634653}, {"id": 238, "seek": 157784, "start": 1584.8799999999999, "end": 1590.32, "text": " of its thread, so the class itself can throw this exception. So it's a bit safer than using finalizers", "tokens": [50716, 295, 1080, 7207, 11, 370, 264, 1508, 2564, 393, 3507, 341, 11183, 13, 407, 309, 311, 257, 857, 15856, 813, 1228, 2572, 22525, 50988], "temperature": 0.0, "avg_logprob": -0.1478733303903163, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.007457877043634653}, {"id": 239, "seek": 157784, "start": 1590.8799999999999, "end": 1597.9199999999998, "text": " even though the item as a whole states avoid both. The other issue is performance penalty.", "tokens": [51016, 754, 1673, 264, 3174, 382, 257, 1379, 4368, 5042, 1293, 13, 440, 661, 2734, 307, 3389, 16263, 13, 51368], "temperature": 0.0, "avg_logprob": -0.1478733303903163, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.007457877043634653}, {"id": 240, "seek": 157784, "start": 1597.9199999999998, "end": 1602.48, "text": " Finalizers inhibit efficient garbage collection because we are trying to manoeuvre do the", "tokens": [51368, 13443, 22525, 49858, 7148, 14150, 5765, 570, 321, 366, 1382, 281, 587, 7921, 34171, 360, 264, 51596], "temperature": 0.0, "avg_logprob": -0.1478733303903163, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.007457877043634653}, {"id": 241, "seek": 160248, "start": 1602.48, "end": 1608.0, "text": " garbage collection instead of letting the JVM do it. And even though cleaners are still faster", "tokens": [50364, 14150, 5765, 2602, 295, 8295, 264, 508, 53, 44, 360, 309, 13, 400, 754, 1673, 2541, 433, 366, 920, 4663, 50640], "temperature": 0.0, "avg_logprob": -0.11151877020159338, "compression_ratio": 1.6892857142857143, "no_speech_prob": 0.03674457594752312}, {"id": 242, "seek": 160248, "start": 1608.0, "end": 1613.52, "text": " than finalizers, it's still slower than using the auto-closable interface, which we shall get to", "tokens": [50640, 813, 2572, 22525, 11, 309, 311, 920, 14009, 813, 1228, 264, 8399, 12, 3474, 329, 712, 9226, 11, 597, 321, 4393, 483, 281, 50916], "temperature": 0.0, "avg_logprob": -0.11151877020159338, "compression_ratio": 1.6892857142857143, "no_speech_prob": 0.03674457594752312}, {"id": 243, "seek": 160248, "start": 1614.4, "end": 1620.08, "text": " in the item, later on in the item. So the other problem is, of course, yes, performance penalty,", "tokens": [50960, 294, 264, 3174, 11, 1780, 322, 294, 264, 3174, 13, 407, 264, 661, 1154, 307, 11, 295, 1164, 11, 2086, 11, 3389, 16263, 11, 51244], "temperature": 0.0, "avg_logprob": -0.11151877020159338, "compression_ratio": 1.6892857142857143, "no_speech_prob": 0.03674457594752312}, {"id": 244, "seek": 160248, "start": 1620.08, "end": 1624.96, "text": " and that's why Dr. Block states there's severe performance penalty for using finalizers and", "tokens": [51244, 293, 300, 311, 983, 2491, 13, 17500, 4368, 456, 311, 8922, 3389, 16263, 337, 1228, 2572, 22525, 293, 51488], "temperature": 0.0, "avg_logprob": -0.11151877020159338, "compression_ratio": 1.6892857142857143, "no_speech_prob": 0.03674457594752312}, {"id": 245, "seek": 160248, "start": 1624.96, "end": 1631.92, "text": " cleaners. It is about 50 times slower to create and destroy objects with finalizers. This is", "tokens": [51488, 2541, 433, 13, 467, 307, 466, 2625, 1413, 14009, 281, 1884, 293, 5293, 6565, 365, 2572, 22525, 13, 639, 307, 51836], "temperature": 0.0, "avg_logprob": -0.11151877020159338, "compression_ratio": 1.6892857142857143, "no_speech_prob": 0.03674457594752312}, {"id": 246, "seek": 163192, "start": 1631.92, "end": 1639.44, "text": " primarily because finalizers inhibit efficient garbage collection. And then we get to probably", "tokens": [50364, 10029, 570, 2572, 22525, 49858, 7148, 14150, 5765, 13, 400, 550, 321, 483, 281, 1391, 50740], "temperature": 0.0, "avg_logprob": -0.07792166965763743, "compression_ratio": 1.602510460251046, "no_speech_prob": 0.004069287329912186}, {"id": 247, "seek": 163192, "start": 1639.44, "end": 1645.76, "text": " one of the biggest issues with using finalizers and cleaners, and it's that it does leave our", "tokens": [50740, 472, 295, 264, 3880, 2663, 365, 1228, 2572, 22525, 293, 2541, 433, 11, 293, 309, 311, 300, 309, 775, 1856, 527, 51056], "temperature": 0.0, "avg_logprob": -0.07792166965763743, "compression_ratio": 1.602510460251046, "no_speech_prob": 0.004069287329912186}, {"id": 248, "seek": 163192, "start": 1645.76, "end": 1652.4, "text": " program vulnerable to malicious code and security attacks. This point, despite being an important", "tokens": [51056, 1461, 10955, 281, 33496, 3089, 293, 3825, 8122, 13, 639, 935, 11, 7228, 885, 364, 1021, 51388], "temperature": 0.0, "avg_logprob": -0.07792166965763743, "compression_ratio": 1.602510460251046, "no_speech_prob": 0.004069287329912186}, {"id": 249, "seek": 163192, "start": 1652.4, "end": 1660.0, "text": " point, I found it a bit difficult to understand, especially because I couldn't get what he meant", "tokens": [51388, 935, 11, 286, 1352, 309, 257, 857, 2252, 281, 1223, 11, 2318, 570, 286, 2809, 380, 483, 437, 415, 4140, 51768], "temperature": 0.0, "avg_logprob": -0.07792166965763743, "compression_ratio": 1.602510460251046, "no_speech_prob": 0.004069287329912186}, {"id": 250, "seek": 166000, "start": 1660.0, "end": 1667.44, "text": " by having a malicious subclass. But this is what I meant, but I'm trying to collectively learn here.", "tokens": [50364, 538, 1419, 257, 33496, 1422, 11665, 13, 583, 341, 307, 437, 286, 4140, 11, 457, 286, 478, 1382, 281, 24341, 1466, 510, 13, 50736], "temperature": 0.0, "avg_logprob": -0.12202601249401386, "compression_ratio": 1.5691056910569106, "no_speech_prob": 0.029301395639777184}, {"id": 251, "seek": 166000, "start": 1667.44, "end": 1673.92, "text": " I did post a question on Stack Overflow, and I got some really good answers. And then finally,", "tokens": [50736, 286, 630, 2183, 257, 1168, 322, 37649, 4886, 10565, 11, 293, 286, 658, 512, 534, 665, 6338, 13, 400, 550, 2721, 11, 51060], "temperature": 0.0, "avg_logprob": -0.12202601249401386, "compression_ratio": 1.5691056910569106, "no_speech_prob": 0.029301395639777184}, {"id": 252, "seek": 166000, "start": 1674.48, "end": 1682.0, "text": " Holga, great blog. I'm assuming it's a blog. The person answered the question, and it was,", "tokens": [51088, 11086, 3680, 11, 869, 6968, 13, 286, 478, 11926, 309, 311, 257, 6968, 13, 440, 954, 10103, 264, 1168, 11, 293, 309, 390, 11, 51464], "temperature": 0.0, "avg_logprob": -0.12202601249401386, "compression_ratio": 1.5691056910569106, "no_speech_prob": 0.029301395639777184}, {"id": 253, "seek": 166000, "start": 1682.8, "end": 1689.04, "text": " I think it was somewhat clear. It did make sense. So all credit goes to Holga. I'll leave an answer", "tokens": [51504, 286, 519, 309, 390, 8344, 1850, 13, 467, 630, 652, 2020, 13, 407, 439, 5397, 1709, 281, 11086, 3680, 13, 286, 603, 1856, 364, 1867, 51816], "temperature": 0.0, "avg_logprob": -0.12202601249401386, "compression_ratio": 1.5691056910569106, "no_speech_prob": 0.029301395639777184}, {"id": 254, "seek": 168904, "start": 1689.12, "end": 1695.68, "text": " to this question down below in the description, where he explains how finalizers, in fact,", "tokens": [50368, 281, 341, 1168, 760, 2507, 294, 264, 3855, 11, 689, 415, 13948, 577, 2572, 22525, 11, 294, 1186, 11, 50696], "temperature": 0.0, "avg_logprob": -0.15213377210828993, "compression_ratio": 1.5439330543933054, "no_speech_prob": 0.015900878235697746}, {"id": 255, "seek": 168904, "start": 1695.68, "end": 1701.2, "text": " do create security problems. And before I read what Dr. Block has stated, let's go through", "tokens": [50696, 360, 1884, 3825, 2740, 13, 400, 949, 286, 1401, 437, 2491, 13, 17500, 575, 11323, 11, 718, 311, 352, 807, 50972], "temperature": 0.0, "avg_logprob": -0.15213377210828993, "compression_ratio": 1.5439330543933054, "no_speech_prob": 0.015900878235697746}, {"id": 256, "seek": 168904, "start": 1702.08, "end": 1711.36, "text": " some code and understand what this issue is, practically. So firstly, I've written this", "tokens": [51016, 512, 3089, 293, 1223, 437, 341, 2734, 307, 11, 15667, 13, 407, 27376, 11, 286, 600, 3720, 341, 51480], "temperature": 0.0, "avg_logprob": -0.15213377210828993, "compression_ratio": 1.5439330543933054, "no_speech_prob": 0.015900878235697746}, {"id": 257, "seek": 168904, "start": 1711.36, "end": 1717.84, "text": " class called Finalizer Attack Example, and that also has an inner class. This inner class, in fact,", "tokens": [51480, 1508, 1219, 13443, 6545, 22477, 24755, 781, 11, 293, 300, 611, 575, 364, 7284, 1508, 13, 639, 7284, 1508, 11, 294, 1186, 11, 51804], "temperature": 0.0, "avg_logprob": -0.15213377210828993, "compression_ratio": 1.5439330543933054, "no_speech_prob": 0.015900878235697746}, {"id": 258, "seek": 171784, "start": 1717.84, "end": 1723.1999999999998, "text": " is what is supposed to do the cleaning up. So it's got this check call method, which is kind of", "tokens": [50364, 307, 437, 307, 3442, 281, 360, 264, 8924, 493, 13, 407, 309, 311, 658, 341, 1520, 818, 3170, 11, 597, 307, 733, 295, 50632], "temperature": 0.0, "avg_logprob": -0.13380320210102176, "compression_ratio": 1.7318840579710144, "no_speech_prob": 0.0048278807662427425}, {"id": 259, "seek": 171784, "start": 1723.1999999999998, "end": 1728.1599999999999, "text": " like a Boolean, which is just like a security check that verifies where that calls this,", "tokens": [50632, 411, 257, 23351, 28499, 11, 597, 307, 445, 411, 257, 3825, 1520, 300, 1306, 11221, 689, 300, 5498, 341, 11, 50880], "temperature": 0.0, "avg_logprob": -0.13380320210102176, "compression_ratio": 1.7318840579710144, "no_speech_prob": 0.0048278807662427425}, {"id": 260, "seek": 171784, "start": 1728.1599999999999, "end": 1734.8799999999999, "text": " has permissions, let's say. That's a bad way of putting it. But just for all the intents and purposes", "tokens": [50880, 575, 32723, 11, 718, 311, 584, 13, 663, 311, 257, 1578, 636, 295, 3372, 309, 13, 583, 445, 337, 439, 264, 560, 791, 293, 9932, 51216], "temperature": 0.0, "avg_logprob": -0.13380320210102176, "compression_ratio": 1.7318840579710144, "no_speech_prob": 0.0048278807662427425}, {"id": 261, "seek": 171784, "start": 1734.8799999999999, "end": 1739.76, "text": " think that all callers are invalid for our demo. And then we have this method, which does some", "tokens": [51216, 519, 300, 439, 818, 433, 366, 34702, 337, 527, 10723, 13, 400, 550, 321, 362, 341, 3170, 11, 597, 775, 512, 51460], "temperature": 0.0, "avg_logprob": -0.13380320210102176, "compression_ratio": 1.7318840579710144, "no_speech_prob": 0.0048278807662427425}, {"id": 262, "seek": 171784, "start": 1739.76, "end": 1744.24, "text": " critical action. That's it's really important. So I forgot to mention that since the inner class", "tokens": [51460, 4924, 3069, 13, 663, 311, 309, 311, 534, 1021, 13, 407, 286, 5298, 281, 2152, 300, 1670, 264, 7284, 1508, 51684], "temperature": 0.0, "avg_logprob": -0.13380320210102176, "compression_ratio": 1.7318840579710144, "no_speech_prob": 0.0048278807662427425}, {"id": 263, "seek": 174424, "start": 1744.24, "end": 1749.36, "text": " is static, that won't allow the JVM to garbage collect this resource. And then we have this", "tokens": [50364, 307, 13437, 11, 300, 1582, 380, 2089, 264, 508, 53, 44, 281, 14150, 2500, 341, 7684, 13, 400, 550, 321, 362, 341, 50620], "temperature": 0.0, "avg_logprob": -0.0846144696499439, "compression_ratio": 1.7235023041474655, "no_speech_prob": 0.008314653299748898}, {"id": 264, "seek": 174424, "start": 1749.36, "end": 1756.88, "text": " malicious subclass that extends the resource class. So this is where the issue lies. This resource", "tokens": [50620, 33496, 1422, 11665, 300, 26448, 264, 7684, 1508, 13, 407, 341, 307, 689, 264, 2734, 9134, 13, 639, 7684, 50996], "temperature": 0.0, "avg_logprob": -0.0846144696499439, "compression_ratio": 1.7235023041474655, "no_speech_prob": 0.008314653299748898}, {"id": 265, "seek": 174424, "start": 1756.88, "end": 1765.28, "text": " class, once it was used, should have died on the vine, as Dr. Block would state in this item.", "tokens": [50996, 1508, 11, 1564, 309, 390, 1143, 11, 820, 362, 4539, 322, 264, 12755, 11, 382, 2491, 13, 17500, 576, 1785, 294, 341, 3174, 13, 51416], "temperature": 0.0, "avg_logprob": -0.0846144696499439, "compression_ratio": 1.7235023041474655, "no_speech_prob": 0.008314653299748898}, {"id": 266, "seek": 174424, "start": 1765.28, "end": 1769.76, "text": " It should have got garbage collected, and no one should have access to it to that object.", "tokens": [51416, 467, 820, 362, 658, 14150, 11087, 11, 293, 572, 472, 820, 362, 2105, 281, 309, 281, 300, 2657, 13, 51640], "temperature": 0.0, "avg_logprob": -0.0846144696499439, "compression_ratio": 1.7235023041474655, "no_speech_prob": 0.008314653299748898}, {"id": 267, "seek": 176976, "start": 1769.84, "end": 1775.12, "text": " However, because we know that the finalized method can be accessed via the object superclass of resource", "tokens": [50368, 2908, 11, 570, 321, 458, 300, 264, 2572, 1602, 3170, 393, 312, 34211, 5766, 264, 2657, 1687, 11665, 295, 7684, 50632], "temperature": 0.0, "avg_logprob": -0.1608774796971735, "compression_ratio": 1.8995983935742973, "no_speech_prob": 0.0009252887684851885}, {"id": 268, "seek": 176976, "start": 1775.12, "end": 1780.8, "text": " class. And then the fact that the malicious subclass extends the resource class, all it's", "tokens": [50632, 1508, 13, 400, 550, 264, 1186, 300, 264, 33496, 1422, 11665, 26448, 264, 7684, 1508, 11, 439, 309, 311, 50916], "temperature": 0.0, "avg_logprob": -0.1608774796971735, "compression_ratio": 1.8995983935742973, "no_speech_prob": 0.0009252887684851885}, {"id": 269, "seek": 176976, "start": 1780.8, "end": 1785.12, "text": " got to do is override the finalized method and invoke it. And the moment it's invoked,", "tokens": [50916, 658, 281, 360, 307, 42321, 264, 2572, 1602, 3170, 293, 41117, 309, 13, 400, 264, 1623, 309, 311, 1048, 9511, 11, 51132], "temperature": 0.0, "avg_logprob": -0.1608774796971735, "compression_ratio": 1.8995983935742973, "no_speech_prob": 0.0009252887684851885}, {"id": 270, "seek": 176976, "start": 1785.12, "end": 1791.2, "text": " this object, which is probably a corrupt object now is resurrected. And that gives this malicious", "tokens": [51132, 341, 2657, 11, 597, 307, 1391, 257, 17366, 2657, 586, 307, 48825, 13, 400, 300, 2709, 341, 33496, 51436], "temperature": 0.0, "avg_logprob": -0.1608774796971735, "compression_ratio": 1.8995983935742973, "no_speech_prob": 0.0009252887684851885}, {"id": 271, "seek": 176976, "start": 1791.2, "end": 1798.4, "text": " subclass access to this critical action method, which probably could do something like access", "tokens": [51436, 1422, 11665, 2105, 281, 341, 4924, 3069, 3170, 11, 597, 1391, 727, 360, 746, 411, 2105, 51796], "temperature": 0.0, "avg_logprob": -0.1608774796971735, "compression_ratio": 1.8995983935742973, "no_speech_prob": 0.0009252887684851885}, {"id": 272, "seek": 179840, "start": 1799.3600000000001, "end": 1804.4, "text": " the database or do something that could potentially calm your application and its uses.", "tokens": [50412, 264, 8149, 420, 360, 746, 300, 727, 7263, 7151, 428, 3861, 293, 1080, 4960, 13, 50664], "temperature": 0.0, "avg_logprob": -0.19510407881303268, "compression_ratio": 1.5411255411255411, "no_speech_prob": 0.00482815969735384}, {"id": 273, "seek": 179840, "start": 1805.0400000000002, "end": 1810.0800000000002, "text": " So which is why when I run this code, you'll see in the public static word main function.", "tokens": [50696, 407, 597, 307, 983, 562, 286, 1190, 341, 3089, 11, 291, 603, 536, 294, 264, 1908, 13437, 1349, 2135, 2445, 13, 50948], "temperature": 0.0, "avg_logprob": -0.19510407881303268, "compression_ratio": 1.5411255411255411, "no_speech_prob": 0.00482815969735384}, {"id": 274, "seek": 179840, "start": 1812.0800000000002, "end": 1817.52, "text": " Initially, oh, I've added this thread here with the GC. This helps to kind of demonstrate the", "tokens": [51048, 29446, 11, 1954, 11, 286, 600, 3869, 341, 7207, 510, 365, 264, 29435, 13, 639, 3665, 281, 733, 295, 11698, 264, 51320], "temperature": 0.0, "avg_logprob": -0.19510407881303268, "compression_ratio": 1.5411255411255411, "no_speech_prob": 0.00482815969735384}, {"id": 275, "seek": 179840, "start": 1818.0800000000002, "end": 1823.92, "text": " non-domestic behavior. I'll just show you that too. Initially, in the try statement,", "tokens": [51348, 2107, 12, 4121, 8326, 5223, 13, 286, 603, 445, 855, 291, 300, 886, 13, 29446, 11, 294, 264, 853, 5629, 11, 51640], "temperature": 0.0, "avg_logprob": -0.19510407881303268, "compression_ratio": 1.5411255411255411, "no_speech_prob": 0.00482815969735384}, {"id": 276, "seek": 182392, "start": 1824.0, "end": 1831.2, "text": " it creates a new object. And when it does, it'll say because it ran a couple of times,", "tokens": [50368, 309, 7829, 257, 777, 2657, 13, 400, 562, 309, 775, 11, 309, 603, 584, 570, 309, 5872, 257, 1916, 295, 1413, 11, 50728], "temperature": 0.0, "avg_logprob": -0.1261886240361811, "compression_ratio": 1.5636363636363637, "no_speech_prob": 0.0011877843644469976}, {"id": 277, "seek": 182392, "start": 1831.2, "end": 1835.76, "text": " it would initially say I wouldn't get hands on a resource class. So okay, that's a bit confusing.", "tokens": [50728, 309, 576, 9105, 584, 286, 2759, 380, 483, 2377, 322, 257, 7684, 1508, 13, 407, 1392, 11, 300, 311, 257, 857, 13181, 13, 50956], "temperature": 0.0, "avg_logprob": -0.1261886240361811, "compression_ratio": 1.5636363636363637, "no_speech_prob": 0.0011877843644469976}, {"id": 278, "seek": 182392, "start": 1835.76, "end": 1841.2, "text": " I can see I shall first get rid of the sleeping of the thread and try running it again.", "tokens": [50956, 286, 393, 536, 286, 4393, 700, 483, 3973, 295, 264, 8296, 295, 264, 7207, 293, 853, 2614, 309, 797, 13, 51228], "temperature": 0.0, "avg_logprob": -0.1261886240361811, "compression_ratio": 1.5636363636363637, "no_speech_prob": 0.0011877843644469976}, {"id": 279, "seek": 182392, "start": 1845.04, "end": 1851.1200000000001, "text": " When I don't make the thread sleep, it will throw a security exception.", "tokens": [51420, 1133, 286, 500, 380, 652, 264, 7207, 2817, 11, 309, 486, 3507, 257, 3825, 11183, 13, 51724], "temperature": 0.0, "avg_logprob": -0.1261886240361811, "compression_ratio": 1.5636363636363637, "no_speech_prob": 0.0011877843644469976}, {"id": 280, "seek": 185112, "start": 1852.08, "end": 1859.84, "text": " It'll catch that there's an issue here by the check holder and then throw the security exception.", "tokens": [50412, 467, 603, 3745, 300, 456, 311, 364, 2734, 510, 538, 264, 1520, 20349, 293, 550, 3507, 264, 3825, 11183, 13, 50800], "temperature": 0.0, "avg_logprob": -0.1678159236907959, "compression_ratio": 1.4947368421052631, "no_speech_prob": 0.0015241269720718265}, {"id": 281, "seek": 185112, "start": 1859.84, "end": 1866.7199999999998, "text": " But the important point here is finalizes aren't deterministic. It's a problem. So if we do get", "tokens": [50800, 583, 264, 1021, 935, 510, 307, 2572, 5660, 3212, 380, 15957, 3142, 13, 467, 311, 257, 1154, 13, 407, 498, 321, 360, 483, 51144], "temperature": 0.0, "avg_logprob": -0.1678159236907959, "compression_ratio": 1.4947368421052631, "no_speech_prob": 0.0015241269720718265}, {"id": 282, "seek": 185112, "start": 1866.7199999999998, "end": 1872.4799999999998, "text": " the thread some few minutes, two seconds to sleep, then what you'll see when you run it is", "tokens": [51144, 264, 7207, 512, 1326, 2077, 11, 732, 3949, 281, 2817, 11, 550, 437, 291, 603, 536, 562, 291, 1190, 309, 307, 51432], "temperature": 0.0, "avg_logprob": -0.1678159236907959, "compression_ratio": 1.4947368421052631, "no_speech_prob": 0.0015241269720718265}, {"id": 283, "seek": 187248, "start": 1873.04, "end": 1880.96, "text": " it's printing that look where it's saying, see, I got hands on this object, which is it's printing", "tokens": [50392, 309, 311, 14699, 300, 574, 689, 309, 311, 1566, 11, 536, 11, 286, 658, 2377, 322, 341, 2657, 11, 597, 307, 309, 311, 14699, 50788], "temperature": 0.0, "avg_logprob": -0.20373216835228172, "compression_ratio": 1.670520231213873, "no_speech_prob": 0.0032718933653086424}, {"id": 284, "seek": 187248, "start": 1880.96, "end": 1888.56, "text": " that from the finalize method, which was a subclass, well, not subclass, which was inherited", "tokens": [50788, 300, 490, 264, 2572, 1125, 3170, 11, 597, 390, 257, 1422, 11665, 11, 731, 11, 406, 1422, 11665, 11, 597, 390, 27091, 51168], "temperature": 0.0, "avg_logprob": -0.20373216835228172, "compression_ratio": 1.670520231213873, "no_speech_prob": 0.0032718933653086424}, {"id": 285, "seek": 187248, "start": 1888.56, "end": 1895.44, "text": " from the resource class. And then because we got access to this object, you can probably see here", "tokens": [51168, 490, 264, 7684, 1508, 13, 400, 550, 570, 321, 658, 2105, 281, 341, 2657, 11, 291, 393, 1391, 536, 510, 51512], "temperature": 0.0, "avg_logprob": -0.20373216835228172, "compression_ratio": 1.670520231213873, "no_speech_prob": 0.0032718933653086424}, {"id": 286, "seek": 189544, "start": 1895.92, "end": 1902.24, "text": " you can probably see here what it's printing out is in fact this this object, but then also", "tokens": [50388, 291, 393, 1391, 536, 510, 437, 309, 311, 14699, 484, 307, 294, 1186, 341, 341, 2657, 11, 457, 550, 611, 50704], "temperature": 0.0, "avg_logprob": -0.1673716325026292, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.0032728512305766344}, {"id": 287, "seek": 189544, "start": 1902.24, "end": 1909.1200000000001, "text": " it has access to the critical action method, which ideally, which not ideally, but which", "tokens": [50704, 309, 575, 2105, 281, 264, 4924, 3069, 3170, 11, 597, 22915, 11, 597, 406, 22915, 11, 457, 597, 51048], "temperature": 0.0, "avg_logprob": -0.1673716325026292, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.0032728512305766344}, {"id": 288, "seek": 189544, "start": 1909.1200000000001, "end": 1917.76, "text": " actually the malicious subclass shouldn't have access to because once again, it should have died on", "tokens": [51048, 767, 264, 33496, 1422, 11665, 4659, 380, 362, 2105, 281, 570, 1564, 797, 11, 309, 820, 362, 4539, 322, 51480], "temperature": 0.0, "avg_logprob": -0.1673716325026292, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.0032728512305766344}, {"id": 289, "seek": 191776, "start": 1917.76, "end": 1925.6, "text": " the vine. I hope that makes sense. I think I got it. So I was trying to, when I asked a question", "tokens": [50364, 264, 12755, 13, 286, 1454, 300, 1669, 2020, 13, 286, 519, 286, 658, 309, 13, 407, 286, 390, 1382, 281, 11, 562, 286, 2351, 257, 1168, 50756], "temperature": 0.0, "avg_logprob": -0.14680843353271483, "compression_ratio": 1.504201680672269, "no_speech_prob": 0.0320904441177845}, {"id": 290, "seek": 191776, "start": 1925.6, "end": 1931.28, "text": " on Stack Overflow, here's what I said. I'll read out this bit of the chapter, but then I said,", "tokens": [50756, 322, 37649, 4886, 10565, 11, 510, 311, 437, 286, 848, 13, 286, 603, 1401, 484, 341, 857, 295, 264, 7187, 11, 457, 550, 286, 848, 11, 51040], "temperature": 0.0, "avg_logprob": -0.14680843353271483, "compression_ratio": 1.504201680672269, "no_speech_prob": 0.0320904441177845}, {"id": 291, "seek": 191776, "start": 1932.16, "end": 1940.24, "text": " in like a very systematic way, my understanding is that finalizes are not deterministic,", "tokens": [51084, 294, 411, 257, 588, 27249, 636, 11, 452, 3701, 307, 300, 2572, 5660, 366, 406, 15957, 3142, 11, 51488], "temperature": 0.0, "avg_logprob": -0.14680843353271483, "compression_ratio": 1.504201680672269, "no_speech_prob": 0.0320904441177845}, {"id": 292, "seek": 191776, "start": 1940.24, "end": 1945.12, "text": " a malicious subclass can run its finalize method on a particular constructed,", "tokens": [51488, 257, 33496, 1422, 11665, 393, 1190, 1080, 2572, 1125, 3170, 322, 257, 1729, 17083, 11, 51732], "temperature": 0.0, "avg_logprob": -0.14680843353271483, "compression_ratio": 1.504201680672269, "no_speech_prob": 0.0320904441177845}, {"id": 293, "seek": 194512, "start": 1945.12, "end": 1951.76, "text": " corrupted superclass object, which is what we are doing right here by extending the resource", "tokens": [50364, 39480, 1687, 11665, 2657, 11, 597, 307, 437, 321, 366, 884, 558, 510, 538, 24360, 264, 7684, 50696], "temperature": 0.0, "avg_logprob": -0.12150809039240298, "compression_ratio": 1.6096491228070176, "no_speech_prob": 0.0010483769001439214}, {"id": 294, "seek": 194512, "start": 1951.76, "end": 1960.56, "text": " class. Moving the corrupt objects reference to a static field doesn't let the GCM garbage collect,", "tokens": [50696, 1508, 13, 14242, 264, 17366, 6565, 6408, 281, 257, 13437, 2519, 1177, 380, 718, 264, 29435, 44, 14150, 2500, 11, 51136], "temperature": 0.0, "avg_logprob": -0.12150809039240298, "compression_ratio": 1.6096491228070176, "no_speech_prob": 0.0010483769001439214}, {"id": 295, "seek": 194512, "start": 1960.56, "end": 1967.36, "text": " not GCM, JVM, I should fix that. So because it's static, it can't be garbage collected.", "tokens": [51136, 406, 29435, 44, 11, 508, 53, 44, 11, 286, 820, 3191, 300, 13, 407, 570, 309, 311, 13437, 11, 309, 393, 380, 312, 14150, 11087, 13, 51476], "temperature": 0.0, "avg_logprob": -0.12150809039240298, "compression_ratio": 1.6096491228070176, "no_speech_prob": 0.0010483769001439214}, {"id": 296, "seek": 194512, "start": 1967.9199999999998, "end": 1973.9199999999998, "text": " The attacker can use this object that should have died on the vine and do as they will,", "tokens": [51504, 440, 35871, 393, 764, 341, 2657, 300, 820, 362, 4539, 322, 264, 12755, 293, 360, 382, 436, 486, 11, 51804], "temperature": 0.0, "avg_logprob": -0.12150809039240298, "compression_ratio": 1.6096491228070176, "no_speech_prob": 0.0010483769001439214}, {"id": 297, "seek": 197392, "start": 1973.92, "end": 1979.68, "text": " pass the security flow. So this is the problem with the use of finalizes. I hope that makes sense.", "tokens": [50364, 1320, 264, 3825, 3095, 13, 407, 341, 307, 264, 1154, 365, 264, 764, 295, 2572, 5660, 13, 286, 1454, 300, 1669, 2020, 13, 50652], "temperature": 0.0, "avg_logprob": -0.14206885266047653, "compression_ratio": 1.6009174311926606, "no_speech_prob": 0.0008424057741649449}, {"id": 298, "seek": 197392, "start": 1980.64, "end": 1985.28, "text": " I'm asking that question more from myself if I really understood that,", "tokens": [50700, 286, 478, 3365, 300, 1168, 544, 490, 2059, 498, 286, 534, 7320, 300, 11, 50932], "temperature": 0.0, "avg_logprob": -0.14206885266047653, "compression_ratio": 1.6009174311926606, "no_speech_prob": 0.0008424057741649449}, {"id": 299, "seek": 197392, "start": 1987.1200000000001, "end": 1991.28, "text": " but I think I did, but I think I did. At least I'm going to tell myself how to feel better.", "tokens": [51024, 457, 286, 519, 286, 630, 11, 457, 286, 519, 286, 630, 13, 1711, 1935, 286, 478, 516, 281, 980, 2059, 577, 281, 841, 1101, 13, 51232], "temperature": 0.0, "avg_logprob": -0.14206885266047653, "compression_ratio": 1.6009174311926606, "no_speech_prob": 0.0008424057741649449}, {"id": 300, "seek": 197392, "start": 1993.44, "end": 1999.28, "text": " Now that I've kind of demoed that, even though I admit that was a rather pathetic demo,", "tokens": [51340, 823, 300, 286, 600, 733, 295, 10723, 292, 300, 11, 754, 1673, 286, 9796, 300, 390, 257, 2831, 35506, 10723, 11, 51632], "temperature": 0.0, "avg_logprob": -0.14206885266047653, "compression_ratio": 1.6009174311926606, "no_speech_prob": 0.0008424057741649449}, {"id": 301, "seek": 199928, "start": 2000.08, "end": 2004.8799999999999, "text": " let's try and get to what Joshua Block has stated here. Please forgive me. I'm trying my best to", "tokens": [50404, 718, 311, 853, 293, 483, 281, 437, 24005, 17500, 575, 11323, 510, 13, 2555, 10718, 385, 13, 286, 478, 1382, 452, 1151, 281, 50644], "temperature": 0.0, "avg_logprob": -0.10167171680821782, "compression_ratio": 1.73828125, "no_speech_prob": 0.009123868308961391}, {"id": 302, "seek": 199928, "start": 2004.8799999999999, "end": 2010.24, "text": " demo it here, but because he really hasn't given tangible implementations and examples,", "tokens": [50644, 10723, 309, 510, 11, 457, 570, 415, 534, 6132, 380, 2212, 27094, 4445, 763, 293, 5110, 11, 50912], "temperature": 0.0, "avg_logprob": -0.10167171680821782, "compression_ratio": 1.73828125, "no_speech_prob": 0.009123868308961391}, {"id": 303, "seek": 199928, "start": 2010.24, "end": 2014.8, "text": " I'm trying my best to see if I could find code and write code and connect it to what he's trying to", "tokens": [50912, 286, 478, 1382, 452, 1151, 281, 536, 498, 286, 727, 915, 3089, 293, 2464, 3089, 293, 1745, 309, 281, 437, 415, 311, 1382, 281, 51140], "temperature": 0.0, "avg_logprob": -0.10167171680821782, "compression_ratio": 1.73828125, "no_speech_prob": 0.009123868308961391}, {"id": 304, "seek": 199928, "start": 2014.8, "end": 2020.56, "text": " say here, given that I haven't really used finalizes before ever in my programming life.", "tokens": [51140, 584, 510, 11, 2212, 300, 286, 2378, 380, 534, 1143, 2572, 5660, 949, 1562, 294, 452, 9410, 993, 13, 51428], "temperature": 0.0, "avg_logprob": -0.10167171680821782, "compression_ratio": 1.73828125, "no_speech_prob": 0.009123868308961391}, {"id": 305, "seek": 199928, "start": 2021.76, "end": 2025.68, "text": " But anyway, let's see if what he's stating here makes a bit more sense.", "tokens": [51488, 583, 4033, 11, 718, 311, 536, 498, 437, 415, 311, 26688, 510, 1669, 257, 857, 544, 2020, 13, 51684], "temperature": 0.0, "avg_logprob": -0.10167171680821782, "compression_ratio": 1.73828125, "no_speech_prob": 0.009123868308961391}, {"id": 306, "seek": 202568, "start": 2026.5600000000002, "end": 2034.64, "text": " Finalizes have a serious security problem. They open your class up to finalize their attacks.", "tokens": [50408, 13443, 5660, 362, 257, 3156, 3825, 1154, 13, 814, 1269, 428, 1508, 493, 281, 2572, 1125, 641, 8122, 13, 50812], "temperature": 0.0, "avg_logprob": -0.1930470259293266, "compression_ratio": 1.548913043478261, "no_speech_prob": 0.00243359268642962}, {"id": 307, "seek": 202568, "start": 2035.2, "end": 2041.76, "text": " The idea behind a finalize attack is simple. If an exception is thrown from a constructor,", "tokens": [50840, 440, 1558, 2261, 257, 2572, 1125, 2690, 307, 2199, 13, 759, 364, 11183, 307, 11732, 490, 257, 47479, 11, 51168], "temperature": 0.0, "avg_logprob": -0.1930470259293266, "compression_ratio": 1.548913043478261, "no_speech_prob": 0.00243359268642962}, {"id": 308, "seek": 202568, "start": 2041.76, "end": 2049.44, "text": " or it's serialization equivalence, so that would be the constructor, for instance, of let's say this", "tokens": [51168, 420, 309, 311, 17436, 2144, 9052, 655, 11, 370, 300, 576, 312, 264, 47479, 11, 337, 5197, 11, 295, 718, 311, 584, 341, 51552], "temperature": 0.0, "avg_logprob": -0.1930470259293266, "compression_ratio": 1.548913043478261, "no_speech_prob": 0.00243359268642962}, {"id": 309, "seek": 204944, "start": 2049.44, "end": 2056.96, "text": " class. The finalize of a malicious subclass can run on the partially constructed object that", "tokens": [50364, 1508, 13, 440, 2572, 1125, 295, 257, 33496, 1422, 11665, 393, 1190, 322, 264, 18886, 17083, 2657, 300, 50740], "temperature": 0.0, "avg_logprob": -0.10334478280483148, "compression_ratio": 1.5566037735849056, "no_speech_prob": 0.0022514781448990107}, {"id": 310, "seek": 204944, "start": 2056.96, "end": 2065.36, "text": " should have died on the vine. So that was this subclass that extended it. This finalizer can", "tokens": [50740, 820, 362, 4539, 322, 264, 12755, 13, 407, 300, 390, 341, 1422, 11665, 300, 10913, 309, 13, 639, 2572, 6545, 393, 51160], "temperature": 0.0, "avg_logprob": -0.10334478280483148, "compression_ratio": 1.5566037735849056, "no_speech_prob": 0.0022514781448990107}, {"id": 311, "seek": 204944, "start": 2065.36, "end": 2071.28, "text": " record a reference to the object in a static field, preventing it from being garbage collected.", "tokens": [51160, 2136, 257, 6408, 281, 264, 2657, 294, 257, 13437, 2519, 11, 19965, 309, 490, 885, 14150, 11087, 13, 51456], "temperature": 0.0, "avg_logprob": -0.10334478280483148, "compression_ratio": 1.5566037735849056, "no_speech_prob": 0.0022514781448990107}, {"id": 312, "seek": 204944, "start": 2071.28, "end": 2073.52, "text": " Just a point here. You probably noticed I didn't", "tokens": [51456, 1449, 257, 935, 510, 13, 509, 1391, 5694, 286, 994, 380, 51568], "temperature": 0.0, "avg_logprob": -0.10334478280483148, "compression_ratio": 1.5566037735849056, "no_speech_prob": 0.0022514781448990107}, {"id": 313, "seek": 207352, "start": 2074.32, "end": 2080.8, "text": " stole the reference to this resource class anywhere in any static field or didn't really hold the", "tokens": [50404, 16326, 264, 6408, 281, 341, 7684, 1508, 4992, 294, 604, 13437, 2519, 420, 994, 380, 534, 1797, 264, 50728], "temperature": 0.0, "avg_logprob": -0.12553631942884058, "compression_ratio": 1.6982456140350877, "no_speech_prob": 0.014276606030762196}, {"id": 314, "seek": 207352, "start": 2080.8, "end": 2086.96, "text": " reference in the subclass. The reason for that was because Holger, the answer that I got, said", "tokens": [50728, 6408, 294, 264, 1422, 11665, 13, 440, 1778, 337, 300, 390, 570, 11086, 1321, 11, 264, 1867, 300, 286, 658, 11, 848, 51036], "temperature": 0.0, "avg_logprob": -0.12553631942884058, "compression_ratio": 1.6982456140350877, "no_speech_prob": 0.014276606030762196}, {"id": 315, "seek": 207352, "start": 2086.96, "end": 2091.6, "text": " something like this. He said your description is basically correct, but over complicating things.", "tokens": [51036, 746, 411, 341, 13, 634, 848, 428, 3855, 307, 1936, 3006, 11, 457, 670, 16060, 990, 721, 13, 51268], "temperature": 0.0, "avg_logprob": -0.12553631942884058, "compression_ratio": 1.6982456140350877, "no_speech_prob": 0.014276606030762196}, {"id": 316, "seek": 207352, "start": 2092.48, "end": 2097.36, "text": " I'm not surprised there. I tend to do that quite a lot. There's no need to store something in a", "tokens": [51312, 286, 478, 406, 6100, 456, 13, 286, 3928, 281, 360, 300, 1596, 257, 688, 13, 821, 311, 572, 643, 281, 3531, 746, 294, 257, 51556], "temperature": 0.0, "avg_logprob": -0.12553631942884058, "compression_ratio": 1.6982456140350877, "no_speech_prob": 0.014276606030762196}, {"id": 317, "seek": 207352, "start": 2097.36, "end": 2102.56, "text": " static variable as soon as the finalize method is invoked. The object is already just resurrected", "tokens": [51556, 13437, 7006, 382, 2321, 382, 264, 2572, 1125, 3170, 307, 1048, 9511, 13, 440, 2657, 307, 1217, 445, 48825, 51816], "temperature": 0.0, "avg_logprob": -0.12553631942884058, "compression_ratio": 1.6982456140350877, "no_speech_prob": 0.014276606030762196}, {"id": 318, "seek": 210256, "start": 2102.56, "end": 2107.7599999999998, "text": " as invoking a method on an object implies invoking code with access to the object. That really did", "tokens": [50364, 382, 1048, 5953, 257, 3170, 322, 364, 2657, 18779, 1048, 5953, 3089, 365, 2105, 281, 264, 2657, 13, 663, 534, 630, 50624], "temperature": 0.0, "avg_logprob": -0.07327869719108648, "compression_ratio": 1.762081784386617, "no_speech_prob": 0.0009398193215020001}, {"id": 319, "seek": 210256, "start": 2107.7599999999998, "end": 2111.84, "text": " make a lot of sense to me because that's exactly what we're doing here in this override method,", "tokens": [50624, 652, 257, 688, 295, 2020, 281, 385, 570, 300, 311, 2293, 437, 321, 434, 884, 510, 294, 341, 42321, 3170, 11, 50828], "temperature": 0.0, "avg_logprob": -0.07327869719108648, "compression_ratio": 1.762081784386617, "no_speech_prob": 0.0009398193215020001}, {"id": 320, "seek": 210256, "start": 2111.84, "end": 2119.04, "text": " in the subclass. Storing the object reference in a variable is a way to expand the lifetime", "tokens": [50828, 294, 264, 1422, 11665, 13, 745, 3662, 264, 2657, 6408, 294, 257, 7006, 307, 257, 636, 281, 5268, 264, 11364, 51188], "temperature": 0.0, "avg_logprob": -0.07327869719108648, "compression_ratio": 1.762081784386617, "no_speech_prob": 0.0009398193215020001}, {"id": 321, "seek": 210256, "start": 2119.04, "end": 2124.32, "text": " beyond the execution of the finalize method. But this is not necessary. But this is not a", "tokens": [51188, 4399, 264, 15058, 295, 264, 2572, 1125, 3170, 13, 583, 341, 307, 406, 4818, 13, 583, 341, 307, 406, 257, 51452], "temperature": 0.0, "avg_logprob": -0.07327869719108648, "compression_ratio": 1.762081784386617, "no_speech_prob": 0.0009398193215020001}, {"id": 322, "seek": 210256, "start": 2124.32, "end": 2129.68, "text": " necessary thing for the attack. Also, instead of using a static variable, the attacker could also", "tokens": [51452, 4818, 551, 337, 264, 2690, 13, 2743, 11, 2602, 295, 1228, 257, 13437, 7006, 11, 264, 35871, 727, 611, 51720], "temperature": 0.0, "avg_logprob": -0.07327869719108648, "compression_ratio": 1.762081784386617, "no_speech_prob": 0.0009398193215020001}, {"id": 323, "seek": 212968, "start": 2129.68, "end": 2135.44, "text": " make the subclass and inner class and store the reference in the still reachable outer object.", "tokens": [50364, 652, 264, 1422, 11665, 293, 7284, 1508, 293, 3531, 264, 6408, 294, 264, 920, 2524, 712, 10847, 2657, 13, 50652], "temperature": 0.0, "avg_logprob": -0.09434025040988264, "compression_ratio": 1.6275862068965516, "no_speech_prob": 0.0023591858334839344}, {"id": 324, "seek": 212968, "start": 2135.44, "end": 2139.04, "text": " So the following program is already enough to demonstrate the issue. So that's the program", "tokens": [50652, 407, 264, 3480, 1461, 307, 1217, 1547, 281, 11698, 264, 2734, 13, 407, 300, 311, 264, 1461, 50832], "temperature": 0.0, "avg_logprob": -0.09434025040988264, "compression_ratio": 1.6275862068965516, "no_speech_prob": 0.0023591858334839344}, {"id": 325, "seek": 212968, "start": 2139.04, "end": 2144.08, "text": " that I showed to you before, which it's Holger's code. In fact, I just kind of repurposed it and", "tokens": [50832, 300, 286, 4712, 281, 291, 949, 11, 597, 309, 311, 11086, 1321, 311, 3089, 13, 682, 1186, 11, 286, 445, 733, 295, 1085, 20130, 1744, 309, 293, 51084], "temperature": 0.0, "avg_logprob": -0.09434025040988264, "compression_ratio": 1.6275862068965516, "no_speech_prob": 0.0023591858334839344}, {"id": 326, "seek": 212968, "start": 2144.08, "end": 2149.04, "text": " made it a bit more presentable, which is why I haven't done what Joshua Blocker stated here.", "tokens": [51084, 1027, 309, 257, 857, 544, 1974, 712, 11, 597, 307, 983, 286, 2378, 380, 1096, 437, 24005, 17500, 260, 11323, 510, 13, 51332], "temperature": 0.0, "avg_logprob": -0.09434025040988264, "compression_ratio": 1.6275862068965516, "no_speech_prob": 0.0023591858334839344}, {"id": 327, "seek": 212968, "start": 2153.2, "end": 2158.48, "text": " Once the malinformed object has been recorded, it is a simple matter to invoke arbitrary methods", "tokens": [51540, 3443, 264, 2806, 259, 22892, 2657, 575, 668, 8287, 11, 309, 307, 257, 2199, 1871, 281, 41117, 23211, 7150, 51804], "temperature": 0.0, "avg_logprob": -0.09434025040988264, "compression_ratio": 1.6275862068965516, "no_speech_prob": 0.0023591858334839344}, {"id": 328, "seek": 215848, "start": 2158.48, "end": 2164.16, "text": " on this object that should have never been allowed to exist in the first place. So that is the", "tokens": [50364, 322, 341, 2657, 300, 820, 362, 1128, 668, 4350, 281, 2514, 294, 264, 700, 1081, 13, 407, 300, 307, 264, 50648], "temperature": 0.0, "avg_logprob": -0.08760338707974083, "compression_ratio": 1.580188679245283, "no_speech_prob": 0.001284105470404029}, {"id": 329, "seek": 215848, "start": 2164.16, "end": 2168.2400000000002, "text": " arbitrary method, which was critical action that I did invoke.", "tokens": [50648, 23211, 3170, 11, 597, 390, 4924, 3069, 300, 286, 630, 41117, 13, 50852], "temperature": 0.0, "avg_logprob": -0.08760338707974083, "compression_ratio": 1.580188679245283, "no_speech_prob": 0.001284105470404029}, {"id": 330, "seek": 215848, "start": 2170.8, "end": 2175.52, "text": " Throwing an exception from a constructor should be sufficient to prevent an object", "tokens": [50980, 22228, 278, 364, 11183, 490, 257, 47479, 820, 312, 11563, 281, 4871, 364, 2657, 51216], "temperature": 0.0, "avg_logprob": -0.08760338707974083, "compression_ratio": 1.580188679245283, "no_speech_prob": 0.001284105470404029}, {"id": 331, "seek": 215848, "start": 2175.52, "end": 2181.92, "text": " from coming into existence in the presence of finalizes. Unfortunately, it is not. And then he", "tokens": [51216, 490, 1348, 666, 9123, 294, 264, 6814, 295, 2572, 5660, 13, 8590, 11, 309, 307, 406, 13, 400, 550, 415, 51536], "temperature": 0.0, "avg_logprob": -0.08760338707974083, "compression_ratio": 1.580188679245283, "no_speech_prob": 0.001284105470404029}, {"id": 332, "seek": 218192, "start": 2181.92, "end": 2188.64, "text": " states, which is kind of what I was, I tried to demo here, to protect non-final classes from", "tokens": [50364, 4368, 11, 597, 307, 733, 295, 437, 286, 390, 11, 286, 3031, 281, 10723, 510, 11, 281, 2371, 2107, 12, 69, 2071, 5359, 490, 50700], "temperature": 0.0, "avg_logprob": -0.12280912497608933, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.006190068554133177}, {"id": 333, "seek": 218192, "start": 2188.64, "end": 2194.96, "text": " finalizer attacks, write a final finalize method that does nothing. That's exactly what we can do", "tokens": [50700, 2572, 6545, 8122, 11, 2464, 257, 2572, 2572, 1125, 3170, 300, 775, 1825, 13, 663, 311, 2293, 437, 321, 393, 360, 51016], "temperature": 0.0, "avg_logprob": -0.12280912497608933, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.006190068554133177}, {"id": 334, "seek": 218192, "start": 2194.96, "end": 2200.8, "text": " here. So what you'll see is we have the resource class. And then because the resource class itself", "tokens": [51016, 510, 13, 407, 437, 291, 603, 536, 307, 321, 362, 264, 7684, 1508, 13, 400, 550, 570, 264, 7684, 1508, 2564, 51308], "temperature": 0.0, "avg_logprob": -0.12280912497608933, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.006190068554133177}, {"id": 335, "seek": 218192, "start": 2200.8, "end": 2207.28, "text": " obviously has the finalize method, if we create a final protected void finalize, you'll see that", "tokens": [51308, 2745, 575, 264, 2572, 1125, 3170, 11, 498, 321, 1884, 257, 2572, 10594, 22009, 2572, 1125, 11, 291, 603, 536, 300, 51632], "temperature": 0.0, "avg_logprob": -0.12280912497608933, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.006190068554133177}, {"id": 336, "seek": 220728, "start": 2207.36, "end": 2213.1200000000003, "text": " it'll throw an error. You can't subclass it because, sorry, you can't override it because", "tokens": [50368, 309, 603, 3507, 364, 6713, 13, 509, 393, 380, 1422, 11665, 309, 570, 11, 2597, 11, 291, 393, 380, 42321, 309, 570, 50656], "temperature": 0.0, "avg_logprob": -0.15289753825724625, "compression_ratio": 1.73992673992674, "no_speech_prob": 0.007456031162291765}, {"id": 337, "seek": 220728, "start": 2214.0800000000004, "end": 2220.7200000000003, "text": " this class that inherits that, that subclasses resource class, now can't override it. And that", "tokens": [50704, 341, 1508, 300, 9484, 1208, 300, 11, 300, 1422, 11665, 279, 7684, 1508, 11, 586, 393, 380, 42321, 309, 13, 400, 300, 51036], "temperature": 0.0, "avg_logprob": -0.15289753825724625, "compression_ratio": 1.73992673992674, "no_speech_prob": 0.007456031162291765}, {"id": 338, "seek": 220728, "start": 2220.7200000000003, "end": 2224.7200000000003, "text": " never really solved the problem here. That's one way of protecting ourselves against the finalize", "tokens": [51036, 1128, 534, 13041, 264, 1154, 510, 13, 663, 311, 472, 636, 295, 12316, 4175, 1970, 264, 2572, 1125, 51236], "temperature": 0.0, "avg_logprob": -0.15289753825724625, "compression_ratio": 1.73992673992674, "no_speech_prob": 0.007456031162291765}, {"id": 339, "seek": 220728, "start": 2224.7200000000003, "end": 2228.96, "text": " method. But the better way is to not use it in the first place. And that, of course, begs the", "tokens": [51236, 3170, 13, 583, 264, 1101, 636, 307, 281, 406, 764, 309, 294, 264, 700, 1081, 13, 400, 300, 11, 295, 1164, 11, 4612, 82, 264, 51448], "temperature": 0.0, "avg_logprob": -0.15289753825724625, "compression_ratio": 1.73992673992674, "no_speech_prob": 0.007456031162291765}, {"id": 340, "seek": 220728, "start": 2228.96, "end": 2235.52, "text": " question, given that Joshua Block and the broader Java community, the experts are so adamant as to", "tokens": [51448, 1168, 11, 2212, 300, 24005, 17500, 293, 264, 13227, 10745, 1768, 11, 264, 8572, 366, 370, 16368, 394, 382, 281, 51776], "temperature": 0.0, "avg_logprob": -0.15289753825724625, "compression_ratio": 1.73992673992674, "no_speech_prob": 0.007456031162291765}, {"id": 341, "seek": 223552, "start": 2235.52, "end": 2241.28, "text": " why one shouldn't use finalizers or cleaners, what is the alternative? What should we use instead?", "tokens": [50364, 983, 472, 4659, 380, 764, 2572, 22525, 420, 2541, 433, 11, 437, 307, 264, 8535, 30, 708, 820, 321, 764, 2602, 30, 50652], "temperature": 0.0, "avg_logprob": -0.1229653669440228, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.004197125323116779}, {"id": 342, "seek": 223552, "start": 2242.08, "end": 2248.8, "text": " And that's what Joshua Block states here, to use the autoclosable interface. Before I get to", "tokens": [50692, 400, 300, 311, 437, 24005, 17500, 4368, 510, 11, 281, 764, 264, 45833, 9389, 712, 9226, 13, 4546, 286, 483, 281, 51028], "temperature": 0.0, "avg_logprob": -0.1229653669440228, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.004197125323116779}, {"id": 343, "seek": 223552, "start": 2248.8, "end": 2254.08, "text": " what I've written down and taken notes of and kind of try to demo what autoclosable is, let's", "tokens": [51028, 437, 286, 600, 3720, 760, 293, 2726, 5570, 295, 293, 733, 295, 853, 281, 10723, 437, 45833, 9389, 712, 307, 11, 718, 311, 51292], "temperature": 0.0, "avg_logprob": -0.1229653669440228, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.004197125323116779}, {"id": 344, "seek": 223552, "start": 2254.08, "end": 2259.28, "text": " first go through the definition because that'll set a foundation, let's say.", "tokens": [51292, 700, 352, 807, 264, 7123, 570, 300, 603, 992, 257, 7030, 11, 718, 311, 584, 13, 51552], "temperature": 0.0, "avg_logprob": -0.1229653669440228, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.004197125323116779}, {"id": 345, "seek": 225928, "start": 2259.44, "end": 2267.44, "text": " So what should you do instead of writing a finalizer or cleaner for a class whose objects", "tokens": [50372, 407, 437, 820, 291, 360, 2602, 295, 3579, 257, 2572, 6545, 420, 16532, 337, 257, 1508, 6104, 6565, 50772], "temperature": 0.0, "avg_logprob": -0.12044628858566284, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.002472271677106619}, {"id": 346, "seek": 225928, "start": 2267.44, "end": 2274.1600000000003, "text": " encapsulate resources that require termination, such as files or threads, just have your class", "tokens": [50772, 38745, 5256, 3593, 300, 3651, 1433, 2486, 11, 1270, 382, 7098, 420, 19314, 11, 445, 362, 428, 1508, 51108], "temperature": 0.0, "avg_logprob": -0.12044628858566284, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.002472271677106619}, {"id": 347, "seek": 225928, "start": 2274.1600000000003, "end": 2279.6800000000003, "text": " implement autoclosable and require its clients to invoke the close method on each instance,", "tokens": [51108, 4445, 45833, 9389, 712, 293, 3651, 1080, 6982, 281, 41117, 264, 1998, 3170, 322, 1184, 5197, 11, 51384], "temperature": 0.0, "avg_logprob": -0.12044628858566284, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.002472271677106619}, {"id": 348, "seek": 225928, "start": 2280.32, "end": 2286.1600000000003, "text": " when it is no longer needed, typically using try with resources to ensure termination,", "tokens": [51416, 562, 309, 307, 572, 2854, 2978, 11, 5850, 1228, 853, 365, 3593, 281, 5586, 1433, 2486, 11, 51708], "temperature": 0.0, "avg_logprob": -0.12044628858566284, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.002472271677106619}, {"id": 349, "seek": 228616, "start": 2286.16, "end": 2292.72, "text": " even in the face of exceptions. So the point on try with resources is in fact the next item.", "tokens": [50364, 754, 294, 264, 1851, 295, 22847, 13, 407, 264, 935, 322, 853, 365, 3593, 307, 294, 1186, 264, 958, 3174, 13, 50692], "temperature": 0.0, "avg_logprob": -0.09924868415383732, "compression_ratio": 1.6714285714285715, "no_speech_prob": 0.0037650056183338165}, {"id": 350, "seek": 228616, "start": 2292.72, "end": 2297.8399999999997, "text": " So I shall go into detail as to what try with resources do in the next video.", "tokens": [50692, 407, 286, 4393, 352, 666, 2607, 382, 281, 437, 853, 365, 3593, 360, 294, 264, 958, 960, 13, 50948], "temperature": 0.0, "avg_logprob": -0.09924868415383732, "compression_ratio": 1.6714285714285715, "no_speech_prob": 0.0037650056183338165}, {"id": 351, "seek": 228616, "start": 2297.8399999999997, "end": 2304.56, "text": " So definition of autoclosable, which enforces encapsulation by Oracle docs is an object that", "tokens": [50948, 407, 7123, 295, 45833, 9389, 712, 11, 597, 25495, 887, 38745, 2776, 538, 25654, 45623, 307, 364, 2657, 300, 51284], "temperature": 0.0, "avg_logprob": -0.09924868415383732, "compression_ratio": 1.6714285714285715, "no_speech_prob": 0.0037650056183338165}, {"id": 352, "seek": 228616, "start": 2304.56, "end": 2310.56, "text": " may hold resources such as files or socket handles until it is closed. The close method", "tokens": [51284, 815, 1797, 3593, 1270, 382, 7098, 420, 19741, 18722, 1826, 309, 307, 5395, 13, 440, 1998, 3170, 51584], "temperature": 0.0, "avg_logprob": -0.09924868415383732, "compression_ratio": 1.6714285714285715, "no_speech_prob": 0.0037650056183338165}, {"id": 353, "seek": 231056, "start": 2310.56, "end": 2317.2, "text": " of an autoclosable object is called automatically when exiting a try with resources block for", "tokens": [50364, 295, 364, 45833, 9389, 712, 2657, 307, 1219, 6772, 562, 48868, 257, 853, 365, 3593, 3461, 337, 50696], "temperature": 0.0, "avg_logprob": -0.09288255588428394, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.003375548869371414}, {"id": 354, "seek": 231056, "start": 2317.2, "end": 2325.36, "text": " which the object has been declared in the resource specification header. This construction ensures", "tokens": [50696, 597, 264, 2657, 575, 668, 15489, 294, 264, 7684, 31256, 23117, 13, 639, 6435, 28111, 51104], "temperature": 0.0, "avg_logprob": -0.09288255588428394, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.003375548869371414}, {"id": 355, "seek": 231056, "start": 2325.36, "end": 2332.56, "text": " prompt release avoiding resource exhaustion, avoiding resource exhaustion, exceptions,", "tokens": [51104, 12391, 4374, 20220, 7684, 47408, 11, 20220, 7684, 47408, 11, 22847, 11, 51464], "temperature": 0.0, "avg_logprob": -0.09288255588428394, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.003375548869371414}, {"id": 356, "seek": 231056, "start": 2332.56, "end": 2336.72, "text": " and errors that may otherwise occur. So let's take a look at a demo. Let's see", "tokens": [51464, 293, 13603, 300, 815, 5911, 5160, 13, 407, 718, 311, 747, 257, 574, 412, 257, 10723, 13, 961, 311, 536, 51672], "temperature": 0.0, "avg_logprob": -0.09288255588428394, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.003375548869371414}, {"id": 357, "seek": 233672, "start": 2337.68, "end": 2344.16, "text": " what at how autoclosable has to be used. Also, there's another caveat he's added here that it's", "tokens": [50412, 437, 412, 577, 45833, 9389, 712, 575, 281, 312, 1143, 13, 2743, 11, 456, 311, 1071, 43012, 415, 311, 3869, 510, 300, 309, 311, 50736], "temperature": 0.0, "avg_logprob": -0.10560997009277344, "compression_ratio": 1.6536796536796536, "no_speech_prob": 0.08873304724693298}, {"id": 358, "seek": 233672, "start": 2344.16, "end": 2352.3999999999996, "text": " important that when an object has been closed that we should keep track of how if the instance has", "tokens": [50736, 1021, 300, 562, 364, 2657, 575, 668, 5395, 300, 321, 820, 1066, 2837, 295, 577, 498, 264, 5197, 575, 51148], "temperature": 0.0, "avg_logprob": -0.10560997009277344, "compression_ratio": 1.6536796536796536, "no_speech_prob": 0.08873304724693298}, {"id": 359, "seek": 233672, "start": 2352.3999999999996, "end": 2357.7599999999998, "text": " been closed and we shouldn't rely on the client to do that. It was a bit hard to find a good", "tokens": [51148, 668, 5395, 293, 321, 4659, 380, 10687, 322, 264, 6423, 281, 360, 300, 13, 467, 390, 257, 857, 1152, 281, 915, 257, 665, 51416], "temperature": 0.0, "avg_logprob": -0.10560997009277344, "compression_ratio": 1.6536796536796536, "no_speech_prob": 0.08873304724693298}, {"id": 360, "seek": 233672, "start": 2359.12, "end": 2364.48, "text": " demo of what this meant. So I did ask a question on Stack Overflow on that too. I asked how to", "tokens": [51484, 10723, 295, 437, 341, 4140, 13, 407, 286, 630, 1029, 257, 1168, 322, 37649, 4886, 10565, 322, 300, 886, 13, 286, 2351, 577, 281, 51752], "temperature": 0.0, "avg_logprob": -0.10560997009277344, "compression_ratio": 1.6536796536796536, "no_speech_prob": 0.08873304724693298}, {"id": 361, "seek": 236448, "start": 2364.48, "end": 2370.72, "text": " keep track if an instance has been closed with Java autoclosable. I even got a negative", "tokens": [50364, 1066, 2837, 498, 364, 5197, 575, 668, 5395, 365, 10745, 45833, 9389, 712, 13, 286, 754, 658, 257, 3671, 50676], "temperature": 0.0, "avg_logprob": -0.13225571314493814, "compression_ratio": 1.5637860082304527, "no_speech_prob": 0.010978737846016884}, {"id": 362, "seek": 236448, "start": 2371.36, "end": 2376.48, "text": " download on that question because I realized it's actually quite simple as to how to do that.", "tokens": [50708, 5484, 322, 300, 1168, 570, 286, 5334, 309, 311, 767, 1596, 2199, 382, 281, 577, 281, 360, 300, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13225571314493814, "compression_ratio": 1.5637860082304527, "no_speech_prob": 0.010978737846016884}, {"id": 363, "seek": 236448, "start": 2376.48, "end": 2383.28, "text": " I just got a thought about it a bit more without being lazy. But nevertheless, I did find an answer", "tokens": [50964, 286, 445, 658, 257, 1194, 466, 309, 257, 857, 544, 1553, 885, 14847, 13, 583, 26924, 11, 286, 630, 915, 364, 1867, 51304], "temperature": 0.0, "avg_logprob": -0.13225571314493814, "compression_ratio": 1.5637860082304527, "no_speech_prob": 0.010978737846016884}, {"id": 364, "seek": 236448, "start": 2383.28, "end": 2390.8, "text": " and I did post it here. So firstly, the demo, the demo on autoclosable is this. Again, courtesy of", "tokens": [51304, 293, 286, 630, 2183, 309, 510, 13, 407, 27376, 11, 264, 10723, 11, 264, 10723, 322, 45833, 9389, 712, 307, 341, 13, 3764, 11, 41704, 295, 51680], "temperature": 0.0, "avg_logprob": -0.13225571314493814, "compression_ratio": 1.5637860082304527, "no_speech_prob": 0.010978737846016884}, {"id": 365, "seek": 239080, "start": 2390.8, "end": 2396.8, "text": " Baldang. So we have a demo class which implements autoclosable. And then we have another buffered", "tokens": [50364, 27306, 656, 13, 407, 321, 362, 257, 10723, 1508, 597, 704, 17988, 45833, 9389, 712, 13, 400, 550, 321, 362, 1071, 9204, 4073, 50664], "temperature": 0.0, "avg_logprob": -0.17048360946330618, "compression_ratio": 1.6079295154185023, "no_speech_prob": 0.012617825530469418}, {"id": 366, "seek": 239080, "start": 2396.8, "end": 2402.48, "text": " read instance like the previous one we were going through for the final finalizable class,", "tokens": [50664, 1401, 5197, 411, 264, 3894, 472, 321, 645, 516, 807, 337, 264, 2572, 2572, 22395, 1508, 11, 50948], "temperature": 0.0, "avg_logprob": -0.17048360946330618, "compression_ratio": 1.6079295154185023, "no_speech_prob": 0.012617825530469418}, {"id": 367, "seek": 239080, "start": 2402.48, "end": 2407.6800000000003, "text": " a similar concept. In fact, the exact class that I've repurposed for this demo.", "tokens": [50948, 257, 2531, 3410, 13, 682, 1186, 11, 264, 1900, 1508, 300, 286, 600, 1085, 20130, 1744, 337, 341, 10723, 13, 51208], "temperature": 0.0, "avg_logprob": -0.17048360946330618, "compression_ratio": 1.6079295154185023, "no_speech_prob": 0.012617825530469418}, {"id": 368, "seek": 239080, "start": 2409.2000000000003, "end": 2416.5600000000004, "text": " And this here, this Boolean is in fact what does that bit I asked here. It's what keeps track if", "tokens": [51284, 400, 341, 510, 11, 341, 23351, 28499, 307, 294, 1186, 437, 775, 300, 857, 286, 2351, 510, 13, 467, 311, 437, 5965, 2837, 498, 51652], "temperature": 0.0, "avg_logprob": -0.17048360946330618, "compression_ratio": 1.6079295154185023, "no_speech_prob": 0.012617825530469418}, {"id": 369, "seek": 241656, "start": 2416.56, "end": 2424.32, "text": " this instance of, in this case, the demo class has been closed. So when in the constructor,", "tokens": [50364, 341, 5197, 295, 11, 294, 341, 1389, 11, 264, 10723, 1508, 575, 668, 5395, 13, 407, 562, 294, 264, 47479, 11, 50752], "temperature": 0.0, "avg_logprob": -0.17363117165761452, "compression_ratio": 1.653179190751445, "no_speech_prob": 0.0028442805632948875}, {"id": 370, "seek": 241656, "start": 2424.88, "end": 2430.7999999999997, "text": " the same way we are accessing a file, reading off the file, creating a new, using a resource reader,", "tokens": [50780, 264, 912, 636, 321, 366, 26440, 257, 3991, 11, 3760, 766, 264, 3991, 11, 4084, 257, 777, 11, 1228, 257, 7684, 15149, 11, 51076], "temperature": 0.0, "avg_logprob": -0.17363117165761452, "compression_ratio": 1.653179190751445, "no_speech_prob": 0.0028442805632948875}, {"id": 371, "seek": 241656, "start": 2432.56, "end": 2438.88, "text": " and then we're reading the first line, similar thing doing, and we're checking if we can read", "tokens": [51164, 293, 550, 321, 434, 3760, 264, 700, 1622, 11, 2531, 551, 884, 11, 293, 321, 434, 8568, 498, 321, 393, 1401, 51480], "temperature": 0.0, "avg_logprob": -0.17363117165761452, "compression_ratio": 1.653179190751445, "no_speech_prob": 0.0028442805632948875}, {"id": 372, "seek": 243888, "start": 2438.96, "end": 2446.2400000000002, "text": " the first line. And here there's something extra added. We're checking if this resource,", "tokens": [50368, 264, 700, 1622, 13, 400, 510, 456, 311, 746, 2857, 3869, 13, 492, 434, 8568, 498, 341, 7684, 11, 50732], "temperature": 0.0, "avg_logprob": -0.10106635093688965, "compression_ratio": 1.7511520737327189, "no_speech_prob": 0.025174114853143692}, {"id": 373, "seek": 243888, "start": 2446.2400000000002, "end": 2453.2000000000003, "text": " so that is reader, has been closed. I think I made a mistake. I said that what this does in line number", "tokens": [50732, 370, 300, 307, 15149, 11, 575, 668, 5395, 13, 286, 519, 286, 1027, 257, 6146, 13, 286, 848, 300, 437, 341, 775, 294, 1622, 1230, 51080], "temperature": 0.0, "avg_logprob": -0.10106635093688965, "compression_ratio": 1.7511520737327189, "no_speech_prob": 0.025174114853143692}, {"id": 374, "seek": 243888, "start": 2453.2000000000003, "end": 2459.2000000000003, "text": " 13 was keep track of if demo class instance has been closed. That is wrong. I apologize.", "tokens": [51080, 3705, 390, 1066, 2837, 295, 498, 10723, 1508, 5197, 575, 668, 5395, 13, 663, 307, 2085, 13, 286, 12328, 13, 51380], "temperature": 0.0, "avg_logprob": -0.10106635093688965, "compression_ratio": 1.7511520737327189, "no_speech_prob": 0.025174114853143692}, {"id": 375, "seek": 243888, "start": 2459.2000000000003, "end": 2465.44, "text": " What this keeps track of is if the buffered reader instance has been closed. And that's what we're", "tokens": [51380, 708, 341, 5965, 2837, 295, 307, 498, 264, 9204, 4073, 15149, 5197, 575, 668, 5395, 13, 400, 300, 311, 437, 321, 434, 51692], "temperature": 0.0, "avg_logprob": -0.10106635093688965, "compression_ratio": 1.7511520737327189, "no_speech_prob": 0.025174114853143692}, {"id": 376, "seek": 246544, "start": 2465.44, "end": 2472.0, "text": " checking in the read first line method. And if it is closed, we can't access it. So it should", "tokens": [50364, 8568, 294, 264, 1401, 700, 1622, 3170, 13, 400, 498, 309, 307, 5395, 11, 321, 393, 380, 2105, 309, 13, 407, 309, 820, 50692], "temperature": 0.0, "avg_logprob": -0.11560904502868652, "compression_ratio": 1.7363636363636363, "no_speech_prob": 0.0033237955067306757}, {"id": 377, "seek": 246544, "start": 2472.0, "end": 2478.7200000000003, "text": " throw a illegal state exception. And that's what we're doing here. And then we override the closed", "tokens": [50692, 3507, 257, 11905, 1785, 11183, 13, 400, 300, 311, 437, 321, 434, 884, 510, 13, 400, 550, 321, 42321, 264, 5395, 51028], "temperature": 0.0, "avg_logprob": -0.11560904502868652, "compression_ratio": 1.7363636363636363, "no_speech_prob": 0.0033237955067306757}, {"id": 378, "seek": 246544, "start": 2478.7200000000003, "end": 2489.44, "text": " method, which is the method in the auto-closable interface. That method right there. And in the", "tokens": [51028, 3170, 11, 597, 307, 264, 3170, 294, 264, 8399, 12, 3474, 329, 712, 9226, 13, 663, 3170, 558, 456, 13, 400, 294, 264, 51564], "temperature": 0.0, "avg_logprob": -0.11560904502868652, "compression_ratio": 1.7363636363636363, "no_speech_prob": 0.0033237955067306757}, {"id": 379, "seek": 246544, "start": 2489.44, "end": 2494.56, "text": " class itself, we do the closing. We close that resource. And then, of course, we set the flag", "tokens": [51564, 1508, 2564, 11, 321, 360, 264, 10377, 13, 492, 1998, 300, 7684, 13, 400, 550, 11, 295, 1164, 11, 321, 992, 264, 7166, 51820], "temperature": 0.0, "avg_logprob": -0.11560904502868652, "compression_ratio": 1.7363636363636363, "no_speech_prob": 0.0033237955067306757}, {"id": 380, "seek": 249456, "start": 2494.56, "end": 2500.88, "text": " to true because now it has been closed. And if not, it'll throw an IO exception, in this case,", "tokens": [50364, 281, 2074, 570, 586, 309, 575, 668, 5395, 13, 400, 498, 406, 11, 309, 603, 3507, 364, 39839, 11183, 11, 294, 341, 1389, 11, 50680], "temperature": 0.0, "avg_logprob": -0.11589408201329848, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.004133524838835001}, {"id": 381, "seek": 249456, "start": 2500.88, "end": 2507.52, "text": " because it's a buffered reader. So if we go to the unit test, you could see if I'm going to run it,", "tokens": [50680, 570, 309, 311, 257, 9204, 4073, 15149, 13, 407, 498, 321, 352, 281, 264, 4985, 1500, 11, 291, 727, 536, 498, 286, 478, 516, 281, 1190, 309, 11, 51012], "temperature": 0.0, "avg_logprob": -0.11589408201329848, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.004133524838835001}, {"id": 382, "seek": 249456, "start": 2511.12, "end": 2518.64, "text": " it did pass because all it's going to do is read the line. But of course, if we try to access the", "tokens": [51192, 309, 630, 1320, 570, 439, 309, 311, 516, 281, 360, 307, 1401, 264, 1622, 13, 583, 295, 1164, 11, 498, 321, 853, 281, 2105, 264, 51568], "temperature": 0.0, "avg_logprob": -0.11589408201329848, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.004133524838835001}, {"id": 383, "seek": 251864, "start": 2519.2, "end": 2524.7999999999997, "text": " resource, read the instance, and it was closed, it would have thrown an error. The test did pass", "tokens": [50392, 7684, 11, 1401, 264, 5197, 11, 293, 309, 390, 5395, 11, 309, 576, 362, 11732, 364, 6713, 13, 440, 1500, 630, 1320, 50672], "temperature": 0.0, "avg_logprob": -0.18225130281950297, "compression_ratio": 1.6043956043956045, "no_speech_prob": 0.0037651527673006058}, {"id": 384, "seek": 251864, "start": 2524.7999999999997, "end": 2534.24, "text": " because it's just checking if the line, if this line is this. Oh, I should show the log here, in", "tokens": [50672, 570, 309, 311, 445, 8568, 498, 264, 1622, 11, 498, 341, 1622, 307, 341, 13, 876, 11, 286, 820, 855, 264, 3565, 510, 11, 294, 51144], "temperature": 0.0, "avg_logprob": -0.18225130281950297, "compression_ratio": 1.6043956043956045, "no_speech_prob": 0.0037651527673006058}, {"id": 385, "seek": 251864, "start": 2534.24, "end": 2542.4, "text": " fact. It's printing this log here, closed buffered reader in the closed method and flag changed to", "tokens": [51144, 1186, 13, 467, 311, 14699, 341, 3565, 510, 11, 5395, 9204, 4073, 15149, 294, 264, 5395, 3170, 293, 7166, 3105, 281, 51552], "temperature": 0.0, "avg_logprob": -0.18225130281950297, "compression_ratio": 1.6043956043956045, "no_speech_prob": 0.0037651527673006058}, {"id": 386, "seek": 254240, "start": 2542.48, "end": 2550.7200000000003, "text": " true. So that is this right here. Where is it? I've got so many classes opened up. Oh, yeah.", "tokens": [50368, 2074, 13, 407, 300, 307, 341, 558, 510, 13, 2305, 307, 309, 30, 286, 600, 658, 370, 867, 5359, 5625, 493, 13, 876, 11, 1338, 13, 50780], "temperature": 0.0, "avg_logprob": -0.135012430303237, "compression_ratio": 1.685512367491166, "no_speech_prob": 0.0074595180340111256}, {"id": 387, "seek": 254240, "start": 2550.7200000000003, "end": 2555.92, "text": " That's printing this bit here, closed buffered read instance, and it's printing the flag, which is", "tokens": [50780, 663, 311, 14699, 341, 857, 510, 11, 5395, 9204, 4073, 1401, 5197, 11, 293, 309, 311, 14699, 264, 7166, 11, 597, 307, 51040], "temperature": 0.0, "avg_logprob": -0.135012430303237, "compression_ratio": 1.685512367491166, "no_speech_prob": 0.0074595180340111256}, {"id": 388, "seek": 254240, "start": 2555.92, "end": 2561.04, "text": " true in this case. So that's really, it's quite straightforward, the auto-closable bit and even", "tokens": [51040, 2074, 294, 341, 1389, 13, 407, 300, 311, 534, 11, 309, 311, 1596, 15325, 11, 264, 8399, 12, 3474, 329, 712, 857, 293, 754, 51296], "temperature": 0.0, "avg_logprob": -0.135012430303237, "compression_ratio": 1.685512367491166, "no_speech_prob": 0.0074595180340111256}, {"id": 389, "seek": 254240, "start": 2561.04, "end": 2565.92, "text": " how it keeps track of how it closes it. I was over-complicating in my head and I was thinking", "tokens": [51296, 577, 309, 5965, 2837, 295, 577, 309, 24157, 309, 13, 286, 390, 670, 12, 1112, 4770, 990, 294, 452, 1378, 293, 286, 390, 1953, 51540], "temperature": 0.0, "avg_logprob": -0.135012430303237, "compression_ratio": 1.685512367491166, "no_speech_prob": 0.0074595180340111256}, {"id": 390, "seek": 254240, "start": 2565.92, "end": 2571.76, "text": " there's some way to do it. In fact, it's tabooly. So despite being told not to use them, and we", "tokens": [51540, 456, 311, 512, 636, 281, 360, 309, 13, 682, 1186, 11, 309, 311, 4421, 1986, 356, 13, 407, 7228, 885, 1907, 406, 281, 764, 552, 11, 293, 321, 51832], "temperature": 0.0, "avg_logprob": -0.135012430303237, "compression_ratio": 1.685512367491166, "no_speech_prob": 0.0074595180340111256}, {"id": 391, "seek": 257176, "start": 2571.84, "end": 2577.28, "text": " probably will never have to use them for normal average Java programmers like myself,", "tokens": [50368, 1391, 486, 1128, 362, 281, 764, 552, 337, 2710, 4274, 10745, 41504, 411, 2059, 11, 50640], "temperature": 0.0, "avg_logprob": -0.12164456082373551, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0021483751479536295}, {"id": 392, "seek": 257176, "start": 2578.1600000000003, "end": 2583.6800000000003, "text": " what really are they useful for? What are they good for? Caviar there, of course, is that as of", "tokens": [50684, 437, 534, 366, 436, 4420, 337, 30, 708, 366, 436, 665, 337, 30, 28066, 9448, 456, 11, 295, 1164, 11, 307, 300, 382, 295, 50960], "temperature": 0.0, "avg_logprob": -0.12164456082373551, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0021483751479536295}, {"id": 393, "seek": 257176, "start": 2583.6800000000003, "end": 2589.28, "text": " Java 18 finalizes are in fact deprecated and will be entirely removed in the future. So we'll never", "tokens": [50960, 10745, 2443, 2572, 5660, 366, 294, 1186, 1367, 13867, 770, 293, 486, 312, 7696, 7261, 294, 264, 2027, 13, 407, 321, 603, 1128, 51240], "temperature": 0.0, "avg_logprob": -0.12164456082373551, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0021483751479536295}, {"id": 394, "seek": 257176, "start": 2589.28, "end": 2595.28, "text": " use finalizes, but let's say cleaners. What are they really useful for? Firstly, it's for them to", "tokens": [51240, 764, 2572, 5660, 11, 457, 718, 311, 584, 2541, 433, 13, 708, 366, 436, 534, 4420, 337, 30, 20042, 11, 309, 311, 337, 552, 281, 51540], "temperature": 0.0, "avg_logprob": -0.12164456082373551, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0021483751479536295}, {"id": 395, "seek": 259528, "start": 2595.28, "end": 2603.76, "text": " act as a safety net. And let's try to understand what that means. One use of Java cleaners,", "tokens": [50364, 605, 382, 257, 4514, 2533, 13, 400, 718, 311, 853, 281, 1223, 437, 300, 1355, 13, 1485, 764, 295, 10745, 2541, 433, 11, 50788], "temperature": 0.0, "avg_logprob": -0.0984596579965919, "compression_ratio": 1.6849315068493151, "no_speech_prob": 0.007574796676635742}, {"id": 396, "seek": 259528, "start": 2603.76, "end": 2607.92, "text": " I'm going to stop saying finalizes because it's deprecated, is that one use of that is", "tokens": [50788, 286, 478, 516, 281, 1590, 1566, 2572, 5660, 570, 309, 311, 1367, 13867, 770, 11, 307, 300, 472, 764, 295, 300, 307, 50996], "temperature": 0.0, "avg_logprob": -0.0984596579965919, "compression_ratio": 1.6849315068493151, "no_speech_prob": 0.007574796676635742}, {"id": 397, "seek": 259528, "start": 2608.88, "end": 2615.0400000000004, "text": " to act as a safety net in case the owner of a resource neglects to close its, to call its", "tokens": [51044, 281, 605, 382, 257, 4514, 2533, 294, 1389, 264, 7289, 295, 257, 7684, 17745, 82, 281, 1998, 1080, 11, 281, 818, 1080, 51352], "temperature": 0.0, "avg_logprob": -0.0984596579965919, "compression_ratio": 1.6849315068493151, "no_speech_prob": 0.007574796676635742}, {"id": 398, "seek": 259528, "start": 2615.0400000000004, "end": 2620.8, "text": " closed method. Well, there's no guarantee that the cleaner or finalizer will run promptly or at all.", "tokens": [51352, 5395, 3170, 13, 1042, 11, 456, 311, 572, 10815, 300, 264, 16532, 420, 2572, 6545, 486, 1190, 48594, 420, 412, 439, 13, 51640], "temperature": 0.0, "avg_logprob": -0.0984596579965919, "compression_ratio": 1.6849315068493151, "no_speech_prob": 0.007574796676635742}, {"id": 399, "seek": 262080, "start": 2621.36, "end": 2626.6400000000003, "text": " It is better to free the resource later than never if the client fails to do so. If you're", "tokens": [50392, 467, 307, 1101, 281, 1737, 264, 7684, 1780, 813, 1128, 498, 264, 6423, 18199, 281, 360, 370, 13, 759, 291, 434, 50656], "temperature": 0.0, "avg_logprob": -0.0903495021702088, "compression_ratio": 1.6092436974789917, "no_speech_prob": 0.009853752329945564}, {"id": 400, "seek": 262080, "start": 2626.6400000000003, "end": 2632.32, "text": " considering writing such a safety net finalizer, think long and hard about whether the protection", "tokens": [50656, 8079, 3579, 1270, 257, 4514, 2533, 2572, 6545, 11, 519, 938, 293, 1152, 466, 1968, 264, 6334, 50940], "temperature": 0.0, "avg_logprob": -0.0903495021702088, "compression_ratio": 1.6092436974789917, "no_speech_prob": 0.009853752329945564}, {"id": 401, "seek": 262080, "start": 2632.32, "end": 2639.52, "text": " is worth the cost. So the way I see it, it's just an extra check one adds when writing an API or a", "tokens": [50940, 307, 3163, 264, 2063, 13, 407, 264, 636, 286, 536, 309, 11, 309, 311, 445, 364, 2857, 1520, 472, 10860, 562, 3579, 364, 9362, 420, 257, 51300], "temperature": 0.0, "avg_logprob": -0.0903495021702088, "compression_ratio": 1.6092436974789917, "no_speech_prob": 0.009853752329945564}, {"id": 402, "seek": 262080, "start": 2639.52, "end": 2646.4, "text": " class just as a safety net. By overriding that finalize method, we could ensure that any of the", "tokens": [51300, 1508, 445, 382, 257, 4514, 2533, 13, 3146, 670, 81, 2819, 300, 2572, 1125, 3170, 11, 321, 727, 5586, 300, 604, 295, 264, 51644], "temperature": 0.0, "avg_logprob": -0.0903495021702088, "compression_ratio": 1.6092436974789917, "no_speech_prob": 0.009853752329945564}, {"id": 403, "seek": 264640, "start": 2646.4, "end": 2652.96, "text": " resources that should have been closed, sorry, not ensure, we could hope that any of the resources", "tokens": [50364, 3593, 300, 820, 362, 668, 5395, 11, 2597, 11, 406, 5586, 11, 321, 727, 1454, 300, 604, 295, 264, 3593, 50692], "temperature": 0.0, "avg_logprob": -0.1675053509798917, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.0056397574953734875}, {"id": 404, "seek": 264640, "start": 2652.96, "end": 2658.1600000000003, "text": " that should have been closed or were closed because of the finalize method, even though", "tokens": [50692, 300, 820, 362, 668, 5395, 420, 645, 5395, 570, 295, 264, 2572, 1125, 3170, 11, 754, 1673, 50952], "temperature": 0.0, "avg_logprob": -0.1675053509798917, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.0056397574953734875}, {"id": 405, "seek": 264640, "start": 2658.1600000000003, "end": 2662.8, "text": " it's not a domestic. So that's, it's a trade off one has to make and think about carefully.", "tokens": [50952, 309, 311, 406, 257, 10939, 13, 407, 300, 311, 11, 309, 311, 257, 4923, 766, 472, 575, 281, 652, 293, 519, 466, 7500, 13, 51184], "temperature": 0.0, "avg_logprob": -0.1675053509798917, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.0056397574953734875}, {"id": 406, "seek": 264640, "start": 2663.44, "end": 2670.32, "text": " And then the second use is using it with native peers. What is native peer?", "tokens": [51216, 400, 550, 264, 1150, 764, 307, 1228, 309, 365, 8470, 16739, 13, 708, 307, 8470, 15108, 30, 51560], "temperature": 0.0, "avg_logprob": -0.1675053509798917, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.0056397574953734875}, {"id": 407, "seek": 267032, "start": 2671.28, "end": 2676.1600000000003, "text": " As the simplest way to think about it is that native peers are objects that aren't owned by the", "tokens": [50412, 1018, 264, 22811, 636, 281, 519, 466, 309, 307, 300, 8470, 16739, 366, 6565, 300, 3212, 380, 11684, 538, 264, 50656], "temperature": 0.0, "avg_logprob": -0.1263250075664717, "compression_ratio": 1.6609442060085837, "no_speech_prob": 0.015169288963079453}, {"id": 408, "seek": 267032, "start": 2676.1600000000003, "end": 2684.0, "text": " JVM. They're sort of like a platform specific objects that the JVM runs on, the virtual machine", "tokens": [50656, 508, 53, 44, 13, 814, 434, 1333, 295, 411, 257, 3663, 2685, 6565, 300, 264, 508, 53, 44, 6676, 322, 11, 264, 6374, 3479, 51048], "temperature": 0.0, "avg_logprob": -0.1263250075664717, "compression_ratio": 1.6609442060085837, "no_speech_prob": 0.015169288963079453}, {"id": 409, "seek": 267032, "start": 2684.0, "end": 2690.0800000000004, "text": " runs on. It could be CEO C++ objects and the JVM can't garbage collect them. And that's why they're", "tokens": [51048, 6676, 322, 13, 467, 727, 312, 9282, 383, 25472, 6565, 293, 264, 508, 53, 44, 393, 380, 14150, 2500, 552, 13, 400, 300, 311, 983, 436, 434, 51352], "temperature": 0.0, "avg_logprob": -0.1263250075664717, "compression_ratio": 1.6609442060085837, "no_speech_prob": 0.015169288963079453}, {"id": 410, "seek": 267032, "start": 2690.0800000000004, "end": 2694.88, "text": " called native peers, even though they call peers because the objects still have dependencies on", "tokens": [51352, 1219, 8470, 16739, 11, 754, 1673, 436, 818, 16739, 570, 264, 6565, 920, 362, 36606, 322, 51592], "temperature": 0.0, "avg_logprob": -0.1263250075664717, "compression_ratio": 1.6609442060085837, "no_speech_prob": 0.015169288963079453}, {"id": 411, "seek": 269488, "start": 2694.88, "end": 2701.12, "text": " them. But the JVM has no control of these objects in memory. It's quite interesting. I really didn't", "tokens": [50364, 552, 13, 583, 264, 508, 53, 44, 575, 572, 1969, 295, 613, 6565, 294, 4675, 13, 467, 311, 1596, 1880, 13, 286, 534, 994, 380, 50676], "temperature": 0.0, "avg_logprob": -0.1564105224609375, "compression_ratio": 1.55859375, "no_speech_prob": 0.013423236086964607}, {"id": 412, "seek": 269488, "start": 2701.12, "end": 2707.12, "text": " know much about it. But of course, I found this pretty simple stucco flow answer, which can explain", "tokens": [50676, 458, 709, 466, 309, 13, 583, 295, 1164, 11, 286, 1352, 341, 1238, 2199, 342, 1311, 1291, 3095, 1867, 11, 597, 393, 2903, 50976], "temperature": 0.0, "avg_logprob": -0.1564105224609375, "compression_ratio": 1.55859375, "no_speech_prob": 0.013423236086964607}, {"id": 413, "seek": 269488, "start": 2707.12, "end": 2713.6800000000003, "text": " that it said that a native object is not programmed only in Java, but is a, but in a platform specific", "tokens": [50976, 300, 309, 848, 300, 257, 8470, 2657, 307, 406, 31092, 787, 294, 10745, 11, 457, 307, 257, 11, 457, 294, 257, 3663, 2685, 51304], "temperature": 0.0, "avg_logprob": -0.1564105224609375, "compression_ratio": 1.55859375, "no_speech_prob": 0.013423236086964607}, {"id": 414, "seek": 269488, "start": 2713.6800000000003, "end": 2720.2400000000002, "text": " language, typically CEO assembler, even memory allocated by this code cannot be disposed by the", "tokens": [51304, 2856, 11, 5850, 9282, 8438, 1918, 11, 754, 4675, 29772, 538, 341, 3089, 2644, 312, 4920, 1744, 538, 264, 51632], "temperature": 0.0, "avg_logprob": -0.1564105224609375, "compression_ratio": 1.55859375, "no_speech_prob": 0.013423236086964607}, {"id": 415, "seek": 272024, "start": 2720.3199999999997, "end": 2727.04, "text": " garbage collection by GC. Therefore, you may need to clean it in a finalizer. The native peer is", "tokens": [50368, 14150, 5765, 538, 29435, 13, 7504, 11, 291, 815, 643, 281, 2541, 309, 294, 257, 2572, 6545, 13, 440, 8470, 15108, 307, 50704], "temperature": 0.0, "avg_logprob": -0.17174657531406567, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0019561313092708588}, {"id": 416, "seek": 272024, "start": 2727.04, "end": 2731.6, "text": " the native part of a Java object. So I'll leave an answer to this question in the description.", "tokens": [50704, 264, 8470, 644, 295, 257, 10745, 2657, 13, 407, 286, 603, 1856, 364, 1867, 281, 341, 1168, 294, 264, 3855, 13, 50932], "temperature": 0.0, "avg_logprob": -0.17174657531406567, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0019561313092708588}, {"id": 417, "seek": 272024, "start": 2733.2, "end": 2738.72, "text": " And that's what I wrote out here by the user Andres on stucco overflow. Thanks for that.", "tokens": [51012, 400, 300, 311, 437, 286, 4114, 484, 510, 538, 264, 4195, 400, 495, 322, 342, 1311, 1291, 37772, 13, 2561, 337, 300, 13, 51288], "temperature": 0.0, "avg_logprob": -0.17174657531406567, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0019561313092708588}, {"id": 418, "seek": 272024, "start": 2741.04, "end": 2747.7599999999998, "text": " And Joshua Block states, a second legitimate use of cleaners concerns objects with native", "tokens": [51404, 400, 24005, 17500, 4368, 11, 257, 1150, 17956, 764, 295, 2541, 433, 7389, 6565, 365, 8470, 51740], "temperature": 0.0, "avg_logprob": -0.17174657531406567, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0019561313092708588}, {"id": 419, "seek": 274776, "start": 2747.76, "end": 2754.4, "text": " peers. A native peer is a native non Java object. That's an important point to which a normal object", "tokens": [50364, 16739, 13, 316, 8470, 15108, 307, 257, 8470, 2107, 10745, 2657, 13, 663, 311, 364, 1021, 935, 281, 597, 257, 2710, 2657, 50696], "temperature": 0.0, "avg_logprob": -0.11020452835980583, "compression_ratio": 1.6531531531531531, "no_speech_prob": 0.0035360867623239756}, {"id": 420, "seek": 274776, "start": 2754.4, "end": 2761.6800000000003, "text": " delegates via native methods. Because a native peer is not a normal object, the garbage collector", "tokens": [50696, 45756, 5766, 8470, 7150, 13, 1436, 257, 8470, 15108, 307, 406, 257, 2710, 2657, 11, 264, 14150, 23960, 51060], "temperature": 0.0, "avg_logprob": -0.11020452835980583, "compression_ratio": 1.6531531531531531, "no_speech_prob": 0.0035360867623239756}, {"id": 421, "seek": 274776, "start": 2761.6800000000003, "end": 2766.2400000000002, "text": " doesn't know about it and can't reclaim it when the Java peer is reclaimed.", "tokens": [51060, 1177, 380, 458, 466, 309, 293, 393, 380, 40074, 309, 562, 264, 10745, 15108, 307, 850, 22642, 13, 51288], "temperature": 0.0, "avg_logprob": -0.11020452835980583, "compression_ratio": 1.6531531531531531, "no_speech_prob": 0.0035360867623239756}, {"id": 422, "seek": 274776, "start": 2768.1600000000003, "end": 2773.76, "text": " A cleaner or finalizer may be an appropriate vehicle for this task, assuming the performance", "tokens": [51384, 316, 16532, 420, 2572, 6545, 815, 312, 364, 6854, 5864, 337, 341, 5633, 11, 11926, 264, 3389, 51664], "temperature": 0.0, "avg_logprob": -0.11020452835980583, "compression_ratio": 1.6531531531531531, "no_speech_prob": 0.0035360867623239756}, {"id": 423, "seek": 277376, "start": 2773.76, "end": 2778.4, "text": " is acceptable and the native peer holds no critical resources.", "tokens": [50364, 307, 15513, 293, 264, 8470, 15108, 9190, 572, 4924, 3593, 13, 50596], "temperature": 0.0, "avg_logprob": -0.15092960993448892, "compression_ratio": 1.583710407239819, "no_speech_prob": 0.0013246990274637938}, {"id": 424, "seek": 277376, "start": 2780.5600000000004, "end": 2786.5600000000004, "text": " Saying that finally, we, we in fact get to some actual code in this item, because the other code", "tokens": [50704, 34087, 300, 2721, 11, 321, 11, 321, 294, 1186, 483, 281, 512, 3539, 3089, 294, 341, 3174, 11, 570, 264, 661, 3089, 51004], "temperature": 0.0, "avg_logprob": -0.15092960993448892, "compression_ratio": 1.583710407239819, "no_speech_prob": 0.0013246990274637938}, {"id": 425, "seek": 277376, "start": 2786.5600000000004, "end": 2794.32, "text": " I showed was code that I wrote and I kind of use from other people. And that is this room class,", "tokens": [51004, 286, 4712, 390, 3089, 300, 286, 4114, 293, 286, 733, 295, 764, 490, 661, 561, 13, 400, 300, 307, 341, 1808, 1508, 11, 51392], "temperature": 0.0, "avg_logprob": -0.15092960993448892, "compression_ratio": 1.583710407239819, "no_speech_prob": 0.0013246990274637938}, {"id": 426, "seek": 277376, "start": 2794.32, "end": 2800.96, "text": " which demonstrates the concept of it being a safety net by implementing auto closeable. Yeah.", "tokens": [51392, 597, 31034, 264, 3410, 295, 309, 885, 257, 4514, 2533, 538, 18114, 8399, 1998, 712, 13, 865, 13, 51724], "temperature": 0.0, "avg_logprob": -0.15092960993448892, "compression_ratio": 1.583710407239819, "no_speech_prob": 0.0013246990274637938}, {"id": 427, "seek": 280096, "start": 2801.12, "end": 2808.2400000000002, "text": " So the class is called room. And I do appreciate that pun there because the room must be cleaned", "tokens": [50372, 407, 264, 1508, 307, 1219, 1808, 13, 400, 286, 360, 4449, 300, 4468, 456, 570, 264, 1808, 1633, 312, 16146, 50728], "temperature": 0.0, "avg_logprob": -0.21417564815945095, "compression_ratio": 1.5747126436781609, "no_speech_prob": 0.0025907843373715878}, {"id": 428, "seek": 280096, "start": 2808.2400000000002, "end": 2814.48, "text": " before being reclaimed. I like that. I appreciate that. And it implements, as I said, auto closeable.", "tokens": [50728, 949, 885, 850, 22642, 13, 286, 411, 300, 13, 286, 4449, 300, 13, 400, 309, 704, 17988, 11, 382, 286, 848, 11, 8399, 1998, 712, 13, 51040], "temperature": 0.0, "avg_logprob": -0.21417564815945095, "compression_ratio": 1.5747126436781609, "no_speech_prob": 0.0025907843373715878}, {"id": 429, "seek": 280096, "start": 2815.12, "end": 2822.56, "text": " It's got a private static final cleaner, which cleans. And this in a class,", "tokens": [51072, 467, 311, 658, 257, 4551, 13437, 2572, 16532, 11, 597, 16912, 13, 400, 341, 294, 257, 1508, 11, 51444], "temperature": 0.0, "avg_logprob": -0.21417564815945095, "compression_ratio": 1.5747126436781609, "no_speech_prob": 0.0025907843373715878}, {"id": 430, "seek": 282256, "start": 2823.44, "end": 2832.7999999999997, "text": " which implements runnable is what holds the resources required by cleaner to clean the room.", "tokens": [50408, 597, 704, 17988, 1190, 77, 712, 307, 437, 9190, 264, 3593, 4739, 538, 16532, 281, 2541, 264, 1808, 13, 50876], "temperature": 0.0, "avg_logprob": -0.14375366797814002, "compression_ratio": 1.6449704142011834, "no_speech_prob": 0.008845342323184013}, {"id": 431, "seek": 282256, "start": 2834.0, "end": 2839.68, "text": " So this in a class is in fact what does the cleaning in a separate thread in the background", "tokens": [50936, 407, 341, 294, 257, 1508, 307, 294, 1186, 437, 775, 264, 8924, 294, 257, 4994, 7207, 294, 264, 3678, 51220], "temperature": 0.0, "avg_logprob": -0.14375366797814002, "compression_ratio": 1.6449704142011834, "no_speech_prob": 0.008845342323184013}, {"id": 432, "seek": 282256, "start": 2839.68, "end": 2846.48, "text": " of this broader class. So what you can see is we're simply registering the cleanable instance", "tokens": [51220, 295, 341, 13227, 1508, 13, 407, 437, 291, 393, 536, 307, 321, 434, 2935, 47329, 264, 2541, 712, 5197, 51560], "temperature": 0.0, "avg_logprob": -0.14375366797814002, "compression_ratio": 1.6449704142011834, "no_speech_prob": 0.008845342323184013}, {"id": 433, "seek": 284648, "start": 2847.44, "end": 2853.68, "text": " with with with the state, which is a variable we hold here in line number 34 and register it.", "tokens": [50412, 365, 365, 365, 264, 1785, 11, 597, 307, 257, 7006, 321, 1797, 510, 294, 1622, 1230, 12790, 293, 7280, 309, 13, 50724], "temperature": 0.0, "avg_logprob": -0.1424935261408488, "compression_ratio": 1.755656108597285, "no_speech_prob": 0.040219906717538834}, {"id": 434, "seek": 284648, "start": 2853.68, "end": 2860.08, "text": " We assign it. And after that, the number of junk piles should be set to zero. And the way that happens", "tokens": [50724, 492, 6269, 309, 13, 400, 934, 300, 11, 264, 1230, 295, 19109, 34861, 820, 312, 992, 281, 4018, 13, 400, 264, 636, 300, 2314, 51044], "temperature": 0.0, "avg_logprob": -0.1424935261408488, "compression_ratio": 1.755656108597285, "no_speech_prob": 0.040219906717538834}, {"id": 435, "seek": 284648, "start": 2860.08, "end": 2869.68, "text": " is the close method, which is what we override from the auto closeable interface that will invoke", "tokens": [51044, 307, 264, 1998, 3170, 11, 597, 307, 437, 321, 42321, 490, 264, 8399, 1998, 712, 9226, 300, 486, 41117, 51524], "temperature": 0.0, "avg_logprob": -0.1424935261408488, "compression_ratio": 1.755656108597285, "no_speech_prob": 0.040219906717538834}, {"id": 436, "seek": 284648, "start": 2870.48, "end": 2875.76, "text": " the run method, which is inclinable. So once we register it with the with the with the object", "tokens": [51564, 264, 1190, 3170, 11, 597, 307, 834, 5045, 712, 13, 407, 1564, 321, 7280, 309, 365, 264, 365, 264, 365, 264, 2657, 51828], "temperature": 0.0, "avg_logprob": -0.1424935261408488, "compression_ratio": 1.755656108597285, "no_speech_prob": 0.040219906717538834}, {"id": 437, "seek": 287576, "start": 2875.76, "end": 2881.36, "text": " itself and then the state. So this refers to the current object and then in the state of the room", "tokens": [50364, 2564, 293, 550, 264, 1785, 13, 407, 341, 14942, 281, 264, 2190, 2657, 293, 550, 294, 264, 1785, 295, 264, 1808, 50644], "temperature": 0.0, "avg_logprob": -0.1560253699620565, "compression_ratio": 1.7981220657276995, "no_speech_prob": 0.00805849488824606}, {"id": 438, "seek": 287576, "start": 2882.48, "end": 2891.92, "text": " that we pass into the uh, we pass the we invoke the clean method of the of the cleanable instance.", "tokens": [50700, 300, 321, 1320, 666, 264, 2232, 11, 321, 1320, 264, 321, 41117, 264, 2541, 3170, 295, 264, 295, 264, 2541, 712, 5197, 13, 51172], "temperature": 0.0, "avg_logprob": -0.1560253699620565, "compression_ratio": 1.7981220657276995, "no_speech_prob": 0.00805849488824606}, {"id": 439, "seek": 287576, "start": 2892.5600000000004, "end": 2898.0, "text": " And the clean method, what that does is it triggers the run method that sets the number", "tokens": [51204, 400, 264, 2541, 3170, 11, 437, 300, 775, 307, 309, 22827, 264, 1190, 3170, 300, 6352, 264, 1230, 51476], "temperature": 0.0, "avg_logprob": -0.1560253699620565, "compression_ratio": 1.7981220657276995, "no_speech_prob": 0.00805849488824606}, {"id": 440, "seek": 287576, "start": 2898.0, "end": 2903.92, "text": " of junk piles to zero. So every time before it's reclaimed, it has to clean all the resources. Now", "tokens": [51476, 295, 19109, 34861, 281, 4018, 13, 407, 633, 565, 949, 309, 311, 850, 22642, 11, 309, 575, 281, 2541, 439, 264, 3593, 13, 823, 51772], "temperature": 0.0, "avg_logprob": -0.1560253699620565, "compression_ratio": 1.7981220657276995, "no_speech_prob": 0.00805849488824606}, {"id": 441, "seek": 290392, "start": 2903.92, "end": 2908.8, "text": " I didn't I think I don't think I did a good job at explaining that. It's a bit difficult to explain", "tokens": [50364, 286, 994, 380, 286, 519, 286, 500, 380, 519, 286, 630, 257, 665, 1691, 412, 13468, 300, 13, 467, 311, 257, 857, 2252, 281, 2903, 50608], "temperature": 0.0, "avg_logprob": -0.14489764034157931, "compression_ratio": 1.5443548387096775, "no_speech_prob": 0.0019872337579727173}, {"id": 442, "seek": 290392, "start": 2908.8, "end": 2917.12, "text": " because I I lack the verbal visual city and a deep understanding of how cleaner works. Therefore,", "tokens": [50608, 570, 286, 286, 5011, 264, 24781, 5056, 2307, 293, 257, 2452, 3701, 295, 577, 16532, 1985, 13, 7504, 11, 51024], "temperature": 0.0, "avg_logprob": -0.14489764034157931, "compression_ratio": 1.5443548387096775, "no_speech_prob": 0.0019872337579727173}, {"id": 443, "seek": 290392, "start": 2917.12, "end": 2923.12, "text": " probably what I'll do is I'll go through Joshua Bloch's description or sorry, his elucidation", "tokens": [51024, 1391, 437, 286, 603, 360, 307, 286, 603, 352, 807, 24005, 9865, 339, 311, 3855, 420, 2597, 11, 702, 806, 1311, 327, 399, 51324], "temperature": 0.0, "avg_logprob": -0.14489764034157931, "compression_ratio": 1.5443548387096775, "no_speech_prob": 0.0019872337579727173}, {"id": 444, "seek": 290392, "start": 2923.12, "end": 2929.52, "text": " and then I shall refer to the code as I read them out and kind of learn it live, let's say,", "tokens": [51324, 293, 550, 286, 4393, 2864, 281, 264, 3089, 382, 286, 1401, 552, 484, 293, 733, 295, 1466, 309, 1621, 11, 718, 311, 584, 11, 51644], "temperature": 0.0, "avg_logprob": -0.14489764034157931, "compression_ratio": 1.5443548387096775, "no_speech_prob": 0.0019872337579727173}, {"id": 445, "seek": 292952, "start": 2929.52, "end": 2935.68, "text": " which is exactly what I'm doing in this video series. The the room class implements auto close", "tokens": [50364, 597, 307, 2293, 437, 286, 478, 884, 294, 341, 960, 2638, 13, 440, 264, 1808, 1508, 704, 17988, 8399, 1998, 50672], "temperature": 0.0, "avg_logprob": -0.15046645748999812, "compression_ratio": 1.6059322033898304, "no_speech_prob": 0.0031723519787192345}, {"id": 446, "seek": 292952, "start": 2935.68, "end": 2944.64, "text": " book that I showed here. The fact that it's automatic cleaning safety net uses a cleaner is", "tokens": [50672, 1446, 300, 286, 4712, 510, 13, 440, 1186, 300, 309, 311, 12509, 8924, 4514, 2533, 4960, 257, 16532, 307, 51120], "temperature": 0.0, "avg_logprob": -0.15046645748999812, "compression_ratio": 1.6059322033898304, "no_speech_prob": 0.0031723519787192345}, {"id": 447, "seek": 292952, "start": 2944.64, "end": 2951.6, "text": " merely an implementation detail. Unlike finalizes cleaners do not pollute across this public API.", "tokens": [51120, 17003, 364, 11420, 2607, 13, 17657, 2572, 5660, 2541, 433, 360, 406, 6418, 1169, 2108, 341, 1908, 9362, 13, 51468], "temperature": 0.0, "avg_logprob": -0.15046645748999812, "compression_ratio": 1.6059322033898304, "no_speech_prob": 0.0031723519787192345}, {"id": 448, "seek": 292952, "start": 2951.6, "end": 2957.28, "text": " That's correct, which is why it's a bit hard to see at first because I'm using it as a client.", "tokens": [51468, 663, 311, 3006, 11, 597, 307, 983, 309, 311, 257, 857, 1152, 281, 536, 412, 700, 570, 286, 478, 1228, 309, 382, 257, 6423, 13, 51752], "temperature": 0.0, "avg_logprob": -0.15046645748999812, "compression_ratio": 1.6059322033898304, "no_speech_prob": 0.0031723519787192345}, {"id": 449, "seek": 295728, "start": 2957.84, "end": 2964.2400000000002, "text": " The static nested state class holds the resources that are required by the cleaner to clean the room.", "tokens": [50392, 440, 13437, 15646, 292, 1785, 1508, 9190, 264, 3593, 300, 366, 4739, 538, 264, 16532, 281, 2541, 264, 1808, 13, 50712], "temperature": 0.0, "avg_logprob": -0.2016885209791731, "compression_ratio": 1.7723214285714286, "no_speech_prob": 0.0006770320469513535}, {"id": 450, "seek": 295728, "start": 2964.2400000000002, "end": 2970.5600000000004, "text": " So that is the static nested state class. Also, to understand how nested classes work, just go and", "tokens": [50712, 407, 300, 307, 264, 13437, 15646, 292, 1785, 1508, 13, 2743, 11, 281, 1223, 577, 15646, 292, 5359, 589, 11, 445, 352, 293, 51028], "temperature": 0.0, "avg_logprob": -0.2016885209791731, "compression_ratio": 1.7723214285714286, "no_speech_prob": 0.0006770320469513535}, {"id": 451, "seek": 295728, "start": 2970.5600000000004, "end": 2977.6000000000004, "text": " read these docs in Oracle. It's pretty simple. It's it's a it's an inner class. I'll leave a link to", "tokens": [51028, 1401, 613, 45623, 294, 25654, 13, 467, 311, 1238, 2199, 13, 467, 311, 309, 311, 257, 309, 311, 364, 7284, 1508, 13, 286, 603, 1856, 257, 2113, 281, 51380], "temperature": 0.0, "avg_logprob": -0.2016885209791731, "compression_ratio": 1.7723214285714286, "no_speech_prob": 0.0006770320469513535}, {"id": 452, "seek": 295728, "start": 2977.6000000000004, "end": 2984.0, "text": " that in the description. It's got access to all the properties of the outer class in this case.", "tokens": [51380, 300, 294, 264, 3855, 13, 467, 311, 658, 2105, 281, 439, 264, 7221, 295, 264, 10847, 1508, 294, 341, 1389, 13, 51700], "temperature": 0.0, "avg_logprob": -0.2016885209791731, "compression_ratio": 1.7723214285714286, "no_speech_prob": 0.0006770320469513535}, {"id": 453, "seek": 298728, "start": 2987.6000000000004, "end": 2996.6400000000003, "text": " And then and then he continues. And then he continues in this case, it is simply the number of junk", "tokens": [50380, 400, 550, 293, 550, 415, 6515, 13, 400, 550, 415, 6515, 294, 341, 1389, 11, 309, 307, 2935, 264, 1230, 295, 19109, 50832], "temperature": 0.0, "avg_logprob": -0.16838247469156095, "compression_ratio": 1.7918552036199096, "no_speech_prob": 0.0017273302655667067}, {"id": 454, "seek": 298728, "start": 2996.6400000000003, "end": 3001.6800000000003, "text": " piles field, which we need to clean up, which you shall see we're going to be doing this integer value,", "tokens": [50832, 34861, 2519, 11, 597, 321, 643, 281, 2541, 493, 11, 597, 291, 4393, 536, 321, 434, 516, 281, 312, 884, 341, 24922, 2158, 11, 51084], "temperature": 0.0, "avg_logprob": -0.16838247469156095, "compression_ratio": 1.7918552036199096, "no_speech_prob": 0.0017273302655667067}, {"id": 455, "seek": 298728, "start": 3004.0800000000004, "end": 3010.48, "text": " which represents the amount of mess in the room. Yep. State implements runnable. So you can see", "tokens": [51204, 597, 8855, 264, 2372, 295, 2082, 294, 264, 1808, 13, 7010, 13, 4533, 704, 17988, 1190, 77, 712, 13, 407, 291, 393, 536, 51524], "temperature": 0.0, "avg_logprob": -0.16838247469156095, "compression_ratio": 1.7918552036199096, "no_speech_prob": 0.0017273302655667067}, {"id": 456, "seek": 298728, "start": 3010.48, "end": 3015.84, "text": " here it's going to implement runnable because we need to run this in the background. And its run", "tokens": [51524, 510, 309, 311, 516, 281, 4445, 1190, 77, 712, 570, 321, 643, 281, 1190, 341, 294, 264, 3678, 13, 400, 1080, 1190, 51792], "temperature": 0.0, "avg_logprob": -0.16838247469156095, "compression_ratio": 1.7918552036199096, "no_speech_prob": 0.0017273302655667067}, {"id": 457, "seek": 301584, "start": 3015.84, "end": 3022.96, "text": " method is called at most once. So this method, which we're overriding is called at most once and", "tokens": [50364, 3170, 307, 1219, 412, 881, 1564, 13, 407, 341, 3170, 11, 597, 321, 434, 670, 81, 2819, 307, 1219, 412, 881, 1564, 293, 50720], "temperature": 0.0, "avg_logprob": -0.09754494539241201, "compression_ratio": 1.849056603773585, "no_speech_prob": 0.0008829538710415363}, {"id": 458, "seek": 301584, "start": 3022.96, "end": 3032.32, "text": " that is this one method is from runnable because we're running a new thread by the cleanable that", "tokens": [50720, 300, 307, 341, 472, 3170, 307, 490, 1190, 77, 712, 570, 321, 434, 2614, 257, 777, 7207, 538, 264, 2541, 712, 300, 51188], "temperature": 0.0, "avg_logprob": -0.09754494539241201, "compression_ratio": 1.849056603773585, "no_speech_prob": 0.0008829538710415363}, {"id": 459, "seek": 301584, "start": 3032.32, "end": 3038.32, "text": " we get when we register a state instance with our cleaner in the room's constructor. So that that bit", "tokens": [51188, 321, 483, 562, 321, 7280, 257, 1785, 5197, 365, 527, 16532, 294, 264, 1808, 311, 47479, 13, 407, 300, 300, 857, 51488], "temperature": 0.0, "avg_logprob": -0.09754494539241201, "compression_ratio": 1.849056603773585, "no_speech_prob": 0.0008829538710415363}, {"id": 460, "seek": 301584, "start": 3038.32, "end": 3043.92, "text": " here is done right here in the cleanable, which is what I said that we're doing the registering", "tokens": [51488, 510, 307, 1096, 558, 510, 294, 264, 2541, 712, 11, 597, 307, 437, 286, 848, 300, 321, 434, 884, 264, 47329, 51768], "temperature": 0.0, "avg_logprob": -0.09754494539241201, "compression_ratio": 1.849056603773585, "no_speech_prob": 0.0008829538710415363}, {"id": 461, "seek": 304392, "start": 3043.92, "end": 3052.16, "text": " as we create this new state by passing the number of junk files, junk piles, sorry. And that's what", "tokens": [50364, 382, 321, 1884, 341, 777, 1785, 538, 8437, 264, 1230, 295, 19109, 7098, 11, 19109, 34861, 11, 2597, 13, 400, 300, 311, 437, 50776], "temperature": 0.0, "avg_logprob": -0.15818927657436316, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.001324885175563395}, {"id": 462, "seek": 304392, "start": 3052.16, "end": 3057.36, "text": " we're passing onto this and doing the registering, which is what invokes that run method eventually.", "tokens": [50776, 321, 434, 8437, 3911, 341, 293, 884, 264, 47329, 11, 597, 307, 437, 1048, 8606, 300, 1190, 3170, 4728, 13, 51036], "temperature": 0.0, "avg_logprob": -0.15818927657436316, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.001324885175563395}, {"id": 463, "seek": 304392, "start": 3060.16, "end": 3066.88, "text": " The call to the run method will be triggered by one of two things. Usually it is triggered by", "tokens": [51176, 440, 818, 281, 264, 1190, 3170, 486, 312, 21710, 538, 472, 295, 732, 721, 13, 11419, 309, 307, 21710, 538, 51512], "temperature": 0.0, "avg_logprob": -0.15818927657436316, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.001324885175563395}, {"id": 464, "seek": 306688, "start": 3066.96, "end": 3073.44, "text": " call to room's close method, calling cleanable's clean method. So that's the close method,", "tokens": [50368, 818, 281, 1808, 311, 1998, 3170, 11, 5141, 2541, 712, 311, 2541, 3170, 13, 407, 300, 311, 264, 1998, 3170, 11, 50692], "temperature": 0.0, "avg_logprob": -0.12000962521167512, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.039040930569171906}, {"id": 465, "seek": 306688, "start": 3073.44, "end": 3079.36, "text": " which we have overridden here of the out-of-class room. If the client fails to call the close", "tokens": [50692, 597, 321, 362, 670, 81, 6171, 510, 295, 264, 484, 12, 2670, 12, 11665, 1808, 13, 759, 264, 6423, 18199, 281, 818, 264, 1998, 50988], "temperature": 0.0, "avg_logprob": -0.12000962521167512, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.039040930569171906}, {"id": 466, "seek": 306688, "start": 3079.36, "end": 3085.28, "text": " method by the time a room instance is eligible for garbage collection, the cleaner will hopefully", "tokens": [50988, 3170, 538, 264, 565, 257, 1808, 5197, 307, 14728, 337, 14150, 5765, 11, 264, 16532, 486, 4696, 51284], "temperature": 0.0, "avg_logprob": -0.12000962521167512, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.039040930569171906}, {"id": 467, "seek": 306688, "start": 3085.28, "end": 3092.1600000000003, "text": " call state's run method. So that's what he meant by a safety net because if the client doesn't", "tokens": [51284, 818, 1785, 311, 1190, 3170, 13, 407, 300, 311, 437, 415, 4140, 538, 257, 4514, 2533, 570, 498, 264, 6423, 1177, 380, 51628], "temperature": 0.0, "avg_logprob": -0.12000962521167512, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.039040930569171906}, {"id": 468, "seek": 309216, "start": 3092.8799999999997, "end": 3096.8799999999997, "text": " call the close method and clean up that resource or clear up that resource,", "tokens": [50400, 818, 264, 1998, 3170, 293, 2541, 493, 300, 7684, 420, 1850, 493, 300, 7684, 11, 50600], "temperature": 0.0, "avg_logprob": -0.08088604263637376, "compression_ratio": 1.7456896551724137, "no_speech_prob": 0.0025506850797683}, {"id": 469, "seek": 309216, "start": 3098.72, "end": 3101.8399999999997, "text": " then we expect this run method to run, hopefully.", "tokens": [50692, 550, 321, 2066, 341, 1190, 3170, 281, 1190, 11, 4696, 13, 50848], "temperature": 0.0, "avg_logprob": -0.08088604263637376, "compression_ratio": 1.7456896551724137, "no_speech_prob": 0.0025506850797683}, {"id": 470, "seek": 309216, "start": 3104.0, "end": 3109.04, "text": " It is critical that a state instance does not refer to the room instance. That's important and we", "tokens": [50956, 467, 307, 4924, 300, 257, 1785, 5197, 775, 406, 2864, 281, 264, 1808, 5197, 13, 663, 311, 1021, 293, 321, 51208], "temperature": 0.0, "avg_logprob": -0.08088604263637376, "compression_ratio": 1.7456896551724137, "no_speech_prob": 0.0025506850797683}, {"id": 471, "seek": 309216, "start": 3109.04, "end": 3113.68, "text": " shall see why. If it did, it would create a circularity that would prevent the room instance", "tokens": [51208, 4393, 536, 983, 13, 759, 309, 630, 11, 309, 576, 1884, 257, 16476, 507, 300, 576, 4871, 264, 1808, 5197, 51440], "temperature": 0.0, "avg_logprob": -0.08088604263637376, "compression_ratio": 1.7456896551724137, "no_speech_prob": 0.0025506850797683}, {"id": 472, "seek": 309216, "start": 3113.68, "end": 3118.72, "text": " from becoming eligible for garbage collection and from being automatically cleaned. Yes,", "tokens": [51440, 490, 5617, 14728, 337, 14150, 5765, 293, 490, 885, 6772, 16146, 13, 1079, 11, 51692], "temperature": 0.0, "avg_logprob": -0.08088604263637376, "compression_ratio": 1.7456896551724137, "no_speech_prob": 0.0025506850797683}, {"id": 473, "seek": 311872, "start": 3118.72, "end": 3122.48, "text": " because for it to be eligible for garbage collection, we have to make sure that there", "tokens": [50364, 570, 337, 309, 281, 312, 14728, 337, 14150, 5765, 11, 321, 362, 281, 652, 988, 300, 456, 50552], "temperature": 0.0, "avg_logprob": -0.08463203205781825, "compression_ratio": 1.786008230452675, "no_speech_prob": 0.001956652384251356}, {"id": 474, "seek": 311872, "start": 3122.48, "end": 3128.48, "text": " aren't any references to that object in memory. Therefore, state must be a static nested class", "tokens": [50552, 3212, 380, 604, 15400, 281, 300, 2657, 294, 4675, 13, 7504, 11, 1785, 1633, 312, 257, 13437, 15646, 292, 1508, 50852], "temperature": 0.0, "avg_logprob": -0.08463203205781825, "compression_ratio": 1.786008230452675, "no_speech_prob": 0.001956652384251356}, {"id": 475, "seek": 311872, "start": 3128.48, "end": 3133.52, "text": " because non-static nested classes contain references to the end-closing instances,", "tokens": [50852, 570, 2107, 12, 34632, 15646, 292, 5359, 5304, 15400, 281, 264, 917, 12, 3474, 6110, 14519, 11, 51104], "temperature": 0.0, "avg_logprob": -0.08463203205781825, "compression_ratio": 1.786008230452675, "no_speech_prob": 0.001956652384251356}, {"id": 476, "seek": 311872, "start": 3133.52, "end": 3139.52, "text": " which is why exactly we've declared this static and I said to do some reading on nested classes", "tokens": [51104, 597, 307, 983, 2293, 321, 600, 15489, 341, 13437, 293, 286, 848, 281, 360, 512, 3760, 322, 15646, 292, 5359, 51404], "temperature": 0.0, "avg_logprob": -0.08463203205781825, "compression_ratio": 1.786008230452675, "no_speech_prob": 0.001956652384251356}, {"id": 477, "seek": 311872, "start": 3139.52, "end": 3143.52, "text": " as to how the difference between non-static and static in the Oracle docs.", "tokens": [51404, 382, 281, 577, 264, 2649, 1296, 2107, 12, 34632, 293, 13437, 294, 264, 25654, 45623, 13, 51604], "temperature": 0.0, "avg_logprob": -0.08463203205781825, "compression_ratio": 1.786008230452675, "no_speech_prob": 0.001956652384251356}, {"id": 478, "seek": 314352, "start": 3144.24, "end": 3152.72, "text": " And then we shall take a look at how this class is used. So if we take a look at, let's say,", "tokens": [50400, 400, 550, 321, 4393, 747, 257, 574, 412, 577, 341, 1508, 307, 1143, 13, 407, 498, 321, 747, 257, 574, 412, 11, 718, 311, 584, 11, 50824], "temperature": 0.0, "avg_logprob": -0.18387454595321265, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.006287778727710247}, {"id": 479, "seek": 314352, "start": 3152.72, "end": 3160.0, "text": " teenage up, we're doing some garbage collection manually, explicitly, but we should not depend", "tokens": [50824, 26866, 493, 11, 321, 434, 884, 512, 14150, 5765, 16945, 11, 20803, 11, 457, 321, 820, 406, 5672, 51188], "temperature": 0.0, "avg_logprob": -0.18387454595321265, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.006287778727710247}, {"id": 480, "seek": 314352, "start": 3160.0, "end": 3167.52, "text": " on this behavior. So if I go run this and run this, in fact, first let's take a look at adult,", "tokens": [51188, 322, 341, 5223, 13, 407, 498, 286, 352, 1190, 341, 293, 1190, 341, 11, 294, 1186, 11, 700, 718, 311, 747, 257, 574, 412, 5075, 11, 51564], "temperature": 0.0, "avg_logprob": -0.18387454595321265, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.006287778727710247}, {"id": 481, "seek": 316752, "start": 3167.52, "end": 3173.36, "text": " sorry, where we're using a tri-width resource. So the room's cleanest used only as a safety net.", "tokens": [50364, 2597, 11, 689, 321, 434, 1228, 257, 1376, 12, 21271, 7684, 13, 407, 264, 1808, 311, 2541, 377, 1143, 787, 382, 257, 4514, 2533, 13, 50656], "temperature": 0.0, "avg_logprob": -0.16082767773700016, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.005468144081532955}, {"id": 482, "seek": 316752, "start": 3173.36, "end": 3180.4, "text": " If clients surround all room incantations with tri-width resource blocks, automatic", "tokens": [50656, 759, 6982, 6262, 439, 1808, 834, 394, 763, 365, 1376, 12, 21271, 7684, 8474, 11, 12509, 51008], "temperature": 0.0, "avg_logprob": -0.16082767773700016, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.005468144081532955}, {"id": 483, "seek": 316752, "start": 3180.4, "end": 3186.16, "text": " cleaning will never be required. So as you can see here, I'm not, or just your block in this", "tokens": [51008, 8924, 486, 1128, 312, 4739, 13, 407, 382, 291, 393, 536, 510, 11, 286, 478, 406, 11, 420, 445, 428, 3461, 294, 341, 51296], "temperature": 0.0, "avg_logprob": -0.16082767773700016, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.005468144081532955}, {"id": 484, "seek": 316752, "start": 3186.16, "end": 3192.08, "text": " case isn't doing any explicit garbage collection because we've used it with a tri-width resource", "tokens": [51296, 1389, 1943, 380, 884, 604, 13691, 14150, 5765, 570, 321, 600, 1143, 309, 365, 257, 1376, 12, 21271, 7684, 51592], "temperature": 0.0, "avg_logprob": -0.16082767773700016, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.005468144081532955}, {"id": 485, "seek": 319208, "start": 3192.08, "end": 3198.88, "text": " block. And if I run this, you will see it says goodbye, but also says cleaning the room. So the", "tokens": [50364, 3461, 13, 400, 498, 286, 1190, 341, 11, 291, 486, 536, 309, 1619, 12084, 11, 457, 611, 1619, 8924, 264, 1808, 13, 407, 264, 50704], "temperature": 0.0, "avg_logprob": -0.15028886293110094, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.020961105823516846}, {"id": 486, "seek": 319208, "start": 3198.88, "end": 3205.52, "text": " object's created and it prints goodbye. But afterwards, this cleaning the room along comes from", "tokens": [50704, 2657, 311, 2942, 293, 309, 22305, 12084, 13, 583, 10543, 11, 341, 8924, 264, 1808, 2051, 1487, 490, 51036], "temperature": 0.0, "avg_logprob": -0.15028886293110094, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.020961105823516846}, {"id": 487, "seek": 319208, "start": 3210.16, "end": 3215.44, "text": " this run method here, which we've all written and written. And that also means that the number", "tokens": [51268, 341, 1190, 3170, 510, 11, 597, 321, 600, 439, 3720, 293, 3720, 13, 400, 300, 611, 1355, 300, 264, 1230, 51532], "temperature": 0.0, "avg_logprob": -0.15028886293110094, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.020961105823516846}, {"id": 488, "seek": 319208, "start": 3215.44, "end": 3220.56, "text": " of chunk passes zero. So in fact, if you want to print out the number of chunk pass just to,", "tokens": [51532, 295, 16635, 11335, 4018, 13, 407, 294, 1186, 11, 498, 291, 528, 281, 4482, 484, 264, 1230, 295, 16635, 1320, 445, 281, 11, 51788], "temperature": 0.0, "avg_logprob": -0.15028886293110094, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.020961105823516846}, {"id": 489, "seek": 322056, "start": 3220.56, "end": 3222.7999999999997, "text": " just to make sure that we know what's going on", "tokens": [50364, 445, 281, 652, 988, 300, 321, 458, 437, 311, 516, 322, 50476], "temperature": 0.0, "avg_logprob": -0.14450884949077258, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.00045115305692888796}, {"id": 490, "seek": 322056, "start": 3228.88, "end": 3232.4, "text": " and run that again, you will see it's going to print zero.", "tokens": [50780, 293, 1190, 300, 797, 11, 291, 486, 536, 309, 311, 516, 281, 4482, 4018, 13, 50956], "temperature": 0.0, "avg_logprob": -0.14450884949077258, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.00045115305692888796}, {"id": 491, "seek": 322056, "start": 3236.7999999999997, "end": 3243.2, "text": " Yeah, there we go. It printed zero. That's what we expected. But then if you go take a look at the", "tokens": [51176, 865, 11, 456, 321, 352, 13, 467, 13567, 4018, 13, 663, 311, 437, 321, 5176, 13, 583, 550, 498, 291, 352, 747, 257, 574, 412, 264, 51496], "temperature": 0.0, "avg_logprob": -0.14450884949077258, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.00045115305692888796}, {"id": 492, "seek": 322056, "start": 3243.2, "end": 3248.7999999999997, "text": " teenager's room and if you run it, it will not run it unfortunately. Oh, it did, but it's kind of", "tokens": [51496, 21440, 311, 1808, 293, 498, 291, 1190, 309, 11, 309, 486, 406, 1190, 309, 7015, 13, 876, 11, 309, 630, 11, 457, 309, 311, 733, 295, 51776], "temperature": 0.0, "avg_logprob": -0.14450884949077258, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.00045115305692888796}, {"id": 493, "seek": 324880, "start": 3249.1200000000003, "end": 3254.5600000000004, "text": " so I'm going to try it again. I'm going to keep trying it until it does not run it. Oh, actually,", "tokens": [50380, 370, 286, 478, 516, 281, 853, 309, 797, 13, 286, 478, 516, 281, 1066, 1382, 309, 1826, 309, 775, 406, 1190, 309, 13, 876, 11, 767, 11, 50652], "temperature": 0.0, "avg_logprob": -0.11401829352745643, "compression_ratio": 1.8442622950819672, "no_speech_prob": 0.007232054136693478}, {"id": 494, "seek": 324880, "start": 3254.5600000000004, "end": 3259.92, "text": " sorry. If I comment the garbage collection, because I had that uncommented, it should have", "tokens": [50652, 2597, 13, 759, 286, 2871, 264, 14150, 5765, 11, 570, 286, 632, 300, 8585, 14684, 11, 309, 820, 362, 50920], "temperature": 0.0, "avg_logprob": -0.11401829352745643, "compression_ratio": 1.8442622950819672, "no_speech_prob": 0.007232054136693478}, {"id": 495, "seek": 324880, "start": 3259.92, "end": 3265.76, "text": " been commented out. Now it shouldn't run it. You see that it just printed our piece out,", "tokens": [50920, 668, 26940, 484, 13, 823, 309, 4659, 380, 1190, 309, 13, 509, 536, 300, 309, 445, 13567, 527, 2522, 484, 11, 51212], "temperature": 0.0, "avg_logprob": -0.11401829352745643, "compression_ratio": 1.8442622950819672, "no_speech_prob": 0.007232054136693478}, {"id": 496, "seek": 324880, "start": 3265.76, "end": 3270.96, "text": " but there was no cleaning done. And then when I do the garbage collection explicitly,", "tokens": [51212, 457, 456, 390, 572, 8924, 1096, 13, 400, 550, 562, 286, 360, 264, 14150, 5765, 20803, 11, 51472], "temperature": 0.0, "avg_logprob": -0.11401829352745643, "compression_ratio": 1.8442622950819672, "no_speech_prob": 0.007232054136693478}, {"id": 497, "seek": 324880, "start": 3271.76, "end": 3277.52, "text": " now it's going to print cleaning room. And that's what we expect. And that was though,", "tokens": [51512, 586, 309, 311, 516, 281, 4482, 8924, 1808, 13, 400, 300, 311, 437, 321, 2066, 13, 400, 300, 390, 1673, 11, 51800], "temperature": 0.0, "avg_logprob": -0.11401829352745643, "compression_ratio": 1.8442622950819672, "no_speech_prob": 0.007232054136693478}, {"id": 498, "seek": 327752, "start": 3277.52, "end": 3280.56, "text": " that cleaning room was imprinted from the previous line.", "tokens": [50364, 300, 8924, 1808, 390, 44615, 292, 490, 264, 3894, 1622, 13, 50516], "temperature": 0.0, "avg_logprob": -0.1510882264091855, "compression_ratio": 1.6067961165048543, "no_speech_prob": 0.0009398356196470559}, {"id": 499, "seek": 327752, "start": 3283.92, "end": 3288.4, "text": " Sorry, it was printed off the previous line, of course, because it ran the run method, but", "tokens": [50684, 4919, 11, 309, 390, 13567, 766, 264, 3894, 1622, 11, 295, 1164, 11, 570, 309, 5872, 264, 1190, 3170, 11, 457, 50908], "temperature": 0.0, "avg_logprob": -0.1510882264091855, "compression_ratio": 1.6067961165048543, "no_speech_prob": 0.0009398356196470559}, {"id": 500, "seek": 327752, "start": 3289.68, "end": 3294.08, "text": " because we did do the garbage collection, that doesn't exist anymore. The memory was cleared.", "tokens": [50972, 570, 321, 630, 360, 264, 14150, 5765, 11, 300, 1177, 380, 2514, 3602, 13, 440, 4675, 390, 19725, 13, 51192], "temperature": 0.0, "avg_logprob": -0.1510882264091855, "compression_ratio": 1.6067961165048543, "no_speech_prob": 0.0009398356196470559}, {"id": 501, "seek": 327752, "start": 3296.0, "end": 3303.84, "text": " And that's virtually it. That's kind of the utilities of using auto-closable and how it's", "tokens": [51288, 400, 300, 311, 14103, 309, 13, 663, 311, 733, 295, 264, 30482, 295, 1228, 8399, 12, 3474, 329, 712, 293, 577, 309, 311, 51680], "temperature": 0.0, "avg_logprob": -0.1510882264091855, "compression_ratio": 1.6067961165048543, "no_speech_prob": 0.0009398356196470559}, {"id": 502, "seek": 330384, "start": 3303.84, "end": 3308.32, "text": " got to be used and why it's preferred over, let's say, using a final asset, for example. And then", "tokens": [50364, 658, 281, 312, 1143, 293, 983, 309, 311, 16494, 670, 11, 718, 311, 584, 11, 1228, 257, 2572, 11999, 11, 337, 1365, 13, 400, 550, 50588], "temperature": 0.0, "avg_logprob": -0.1592704157034556, "compression_ratio": 1.5924369747899159, "no_speech_prob": 0.004681406542658806}, {"id": 503, "seek": 330384, "start": 3309.76, "end": 3316.4, "text": " just to conclude that point and of that demo, Joshua Block states, you might expect it to print", "tokens": [50660, 445, 281, 16886, 300, 935, 293, 295, 300, 10723, 11, 24005, 17500, 4368, 11, 291, 1062, 2066, 309, 281, 4482, 50992], "temperature": 0.0, "avg_logprob": -0.1592704157034556, "compression_ratio": 1.5924369747899159, "no_speech_prob": 0.004681406542658806}, {"id": 504, "seek": 330384, "start": 3316.4, "end": 3323.76, "text": " piece out, followed by cleaning room. But on my machine, it never prints cleaning room. It just", "tokens": [50992, 2522, 484, 11, 6263, 538, 8924, 1808, 13, 583, 322, 452, 3479, 11, 309, 1128, 22305, 8924, 1808, 13, 467, 445, 51360], "temperature": 0.0, "avg_logprob": -0.1592704157034556, "compression_ratio": 1.5924369747899159, "no_speech_prob": 0.004681406542658806}, {"id": 505, "seek": 330384, "start": 3323.76, "end": 3330.48, "text": " exits, which is kind of, well, that was before we did do the explicit garbage collection.", "tokens": [51360, 44183, 11, 597, 307, 733, 295, 11, 731, 11, 300, 390, 949, 321, 630, 360, 264, 13691, 14150, 5765, 13, 51696], "temperature": 0.0, "avg_logprob": -0.1592704157034556, "compression_ratio": 1.5924369747899159, "no_speech_prob": 0.004681406542658806}, {"id": 506, "seek": 333048, "start": 3331.12, "end": 3337.36, "text": " This is the unpredictability we spoke of earlier. The cleaner spec says, the behavior of a cleaner", "tokens": [50396, 639, 307, 264, 28341, 2310, 321, 7179, 295, 3071, 13, 440, 16532, 1608, 1619, 11, 264, 5223, 295, 257, 16532, 50708], "temperature": 0.0, "avg_logprob": -0.1656511713949482, "compression_ratio": 1.6017316017316017, "no_speech_prob": 0.002590383403003216}, {"id": 507, "seek": 333048, "start": 3337.36, "end": 3343.52, "text": " during system.exit is implementation specific. No guarantees are made relating to whether", "tokens": [50708, 1830, 1185, 13, 3121, 270, 307, 11420, 2685, 13, 883, 32567, 366, 1027, 23968, 281, 1968, 51016], "temperature": 0.0, "avg_logprob": -0.1656511713949482, "compression_ratio": 1.6017316017316017, "no_speech_prob": 0.002590383403003216}, {"id": 508, "seek": 333048, "start": 3343.52, "end": 3349.2, "text": " cleaning actions are invoked or not. While the spec does not say it, the same holds true", "tokens": [51016, 8924, 5909, 366, 1048, 9511, 420, 406, 13, 3987, 264, 1608, 775, 406, 584, 309, 11, 264, 912, 9190, 2074, 51300], "temperature": 0.0, "avg_logprob": -0.1656511713949482, "compression_ratio": 1.6017316017316017, "no_speech_prob": 0.002590383403003216}, {"id": 509, "seek": 333048, "start": 3349.2, "end": 3358.08, "text": " for normal program exit. On my machine, which is what we did here, adding the line system.gc", "tokens": [51300, 337, 2710, 1461, 11043, 13, 1282, 452, 3479, 11, 597, 307, 437, 321, 630, 510, 11, 5127, 264, 1622, 1185, 13, 70, 66, 51744], "temperature": 0.0, "avg_logprob": -0.1656511713949482, "compression_ratio": 1.6017316017316017, "no_speech_prob": 0.002590383403003216}, {"id": 510, "seek": 335808, "start": 3358.56, "end": 3365.2, "text": " to teenagers main method is enough to make it print cleaning room prior to exiting. The reason we", "tokens": [50388, 281, 23618, 2135, 3170, 307, 1547, 281, 652, 309, 4482, 8924, 1808, 4059, 281, 48868, 13, 440, 1778, 321, 50720], "temperature": 0.0, "avg_logprob": -0.12006527312258457, "compression_ratio": 1.7782805429864252, "no_speech_prob": 0.0023226612247526646}, {"id": 511, "seek": 335808, "start": 3365.2, "end": 3371.84, "text": " didn't see that log here in line number 30 is because the moment it cleaned the room and cleared", "tokens": [50720, 994, 380, 536, 300, 3565, 510, 294, 1622, 1230, 2217, 307, 570, 264, 1623, 309, 16146, 264, 1808, 293, 19725, 51052], "temperature": 0.0, "avg_logprob": -0.12006527312258457, "compression_ratio": 1.7782805429864252, "no_speech_prob": 0.0023226612247526646}, {"id": 512, "seek": 335808, "start": 3371.84, "end": 3377.2, "text": " out the resources, it exited and it doesn't really exist in memory anymore. So I repeat that point", "tokens": [51052, 484, 264, 3593, 11, 309, 454, 1226, 293, 309, 1177, 380, 534, 2514, 294, 4675, 3602, 13, 407, 286, 7149, 300, 935, 51320], "temperature": 0.0, "avg_logprob": -0.12006527312258457, "compression_ratio": 1.7782805429864252, "no_speech_prob": 0.0023226612247526646}, {"id": 513, "seek": 335808, "start": 3377.2, "end": 3383.84, "text": " again, on my machine, adding the line system.gc to teenagers main method is enough to make it print", "tokens": [51320, 797, 11, 322, 452, 3479, 11, 5127, 264, 1622, 1185, 13, 70, 66, 281, 23618, 2135, 3170, 307, 1547, 281, 652, 309, 4482, 51652], "temperature": 0.0, "avg_logprob": -0.12006527312258457, "compression_ratio": 1.7782805429864252, "no_speech_prob": 0.0023226612247526646}, {"id": 514, "seek": 338384, "start": 3383.84, "end": 3388.32, "text": " cleaning room prior to exit. But there's no guarantee that you'll see the same behavior on", "tokens": [50364, 8924, 1808, 4059, 281, 11043, 13, 583, 456, 311, 572, 10815, 300, 291, 603, 536, 264, 912, 5223, 322, 50588], "temperature": 0.0, "avg_logprob": -0.1394697004748929, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.004398753400892019}, {"id": 515, "seek": 338384, "start": 3388.32, "end": 3394.4, "text": " your machine, which is exactly why Joshua Bock states here to test the behavior. But note that", "tokens": [50588, 428, 3479, 11, 597, 307, 2293, 983, 24005, 47672, 4368, 510, 281, 1500, 264, 5223, 13, 583, 3637, 300, 50892], "temperature": 0.0, "avg_logprob": -0.1394697004748929, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.004398753400892019}, {"id": 516, "seek": 338384, "start": 3394.4, "end": 3402.56, "text": " you must not depend on this behavior. Again, not to be on that horse, but the biggest problem is", "tokens": [50892, 291, 1633, 406, 5672, 322, 341, 5223, 13, 3764, 11, 406, 281, 312, 322, 300, 6832, 11, 457, 264, 3880, 1154, 307, 51300], "temperature": 0.0, "avg_logprob": -0.1394697004748929, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.004398753400892019}, {"id": 517, "seek": 338384, "start": 3402.56, "end": 3407.6000000000004, "text": " the non-determinism. And we don't want that in programming. We want things to be logical and", "tokens": [51300, 264, 2107, 12, 49136, 259, 1434, 13, 400, 321, 500, 380, 528, 300, 294, 9410, 13, 492, 528, 721, 281, 312, 14978, 293, 51552], "temperature": 0.0, "avg_logprob": -0.1394697004748929, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.004398753400892019}, {"id": 518, "seek": 340760, "start": 3407.6, "end": 3414.64, "text": " deterministic as script programmers. And in summary, he states, don't use cleaners or in", "tokens": [50364, 15957, 3142, 382, 5755, 41504, 13, 400, 294, 12691, 11, 415, 4368, 11, 500, 380, 764, 2541, 433, 420, 294, 50716], "temperature": 0.0, "avg_logprob": -0.1084267164531507, "compression_ratio": 1.5508474576271187, "no_speech_prob": 0.008574213832616806}, {"id": 519, "seek": 340760, "start": 3414.64, "end": 3422.48, "text": " releases prior to Java 9 finalizes, except as a safety net or to terminate non-critical native", "tokens": [50716, 16952, 4059, 281, 10745, 1722, 2572, 5660, 11, 3993, 382, 257, 4514, 2533, 420, 281, 10761, 473, 2107, 12, 32255, 804, 8470, 51108], "temperature": 0.0, "avg_logprob": -0.1084267164531507, "compression_ratio": 1.5508474576271187, "no_speech_prob": 0.008574213832616806}, {"id": 520, "seek": 340760, "start": 3422.48, "end": 3429.92, "text": " resources. Even then, be aware the indeterminacy and performance consequences. That's it. That", "tokens": [51108, 3593, 13, 2754, 550, 11, 312, 3650, 264, 1016, 35344, 259, 2551, 293, 3389, 10098, 13, 663, 311, 309, 13, 663, 51480], "temperature": 0.0, "avg_logprob": -0.1084267164531507, "compression_ratio": 1.5508474576271187, "no_speech_prob": 0.008574213832616806}, {"id": 521, "seek": 340760, "start": 3429.92, "end": 3437.2, "text": " was item number eight, avoid finalizes and cleaners. I hope I did a good job at demoing", "tokens": [51480, 390, 3174, 1230, 3180, 11, 5042, 2572, 5660, 293, 2541, 433, 13, 286, 1454, 286, 630, 257, 665, 1691, 412, 10723, 278, 51844], "temperature": 0.0, "avg_logprob": -0.1084267164531507, "compression_ratio": 1.5508474576271187, "no_speech_prob": 0.008574213832616806}, {"id": 522, "seek": 343720, "start": 3437.2, "end": 3442.64, "text": " certain parts of it. As you all know with these tutorials, the best way to understand it is to", "tokens": [50364, 1629, 3166, 295, 309, 13, 1018, 291, 439, 458, 365, 613, 17616, 11, 264, 1151, 636, 281, 1223, 309, 307, 281, 50636], "temperature": 0.0, "avg_logprob": -0.11889725146086319, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0768713429570198}, {"id": 523, "seek": 343720, "start": 3443.6, "end": 3448.8799999999997, "text": " after watching them or while watching them goes through the code base, because that's the best", "tokens": [50684, 934, 1976, 552, 420, 1339, 1976, 552, 1709, 807, 264, 3089, 3096, 11, 570, 300, 311, 264, 1151, 50948], "temperature": 0.0, "avg_logprob": -0.11889725146086319, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0768713429570198}, {"id": 524, "seek": 343720, "start": 3448.8799999999997, "end": 3455.9199999999996, "text": " way to grok these concepts. But nevertheless, I hope my efforts were worth it. I will try and", "tokens": [50948, 636, 281, 4634, 74, 613, 10392, 13, 583, 26924, 11, 286, 1454, 452, 6484, 645, 3163, 309, 13, 286, 486, 853, 293, 51300], "temperature": 0.0, "avg_logprob": -0.11889725146086319, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0768713429570198}, {"id": 525, "seek": 343720, "start": 3455.9199999999996, "end": 3461.04, "text": " keep enduring and getting through this whole book because I'm really enjoying it. I'm learning a lot,", "tokens": [51300, 1066, 36562, 293, 1242, 807, 341, 1379, 1446, 570, 286, 478, 534, 9929, 309, 13, 286, 478, 2539, 257, 688, 11, 51556], "temperature": 0.0, "avg_logprob": -0.11889725146086319, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0768713429570198}, {"id": 526, "seek": 346104, "start": 3461.04, "end": 3465.7599999999998, "text": " but also I want to kind of get into the habit of putting out these videos", "tokens": [50364, 457, 611, 286, 528, 281, 733, 295, 483, 666, 264, 7164, 295, 3372, 484, 613, 2145, 50600], "temperature": 0.0, "avg_logprob": -0.17512561905551965, "compression_ratio": 1.4806629834254144, "no_speech_prob": 0.01999225653707981}, {"id": 527, "seek": 346104, "start": 3467.04, "end": 3470.72, "text": " in a certain schedule, let's say, at least once every two weeks.", "tokens": [50664, 294, 257, 1629, 7567, 11, 718, 311, 584, 11, 412, 1935, 1564, 633, 732, 3259, 13, 50848], "temperature": 0.0, "avg_logprob": -0.17512561905551965, "compression_ratio": 1.4806629834254144, "no_speech_prob": 0.01999225653707981}, {"id": 528, "seek": 346104, "start": 3472.08, "end": 3476.08, "text": " But thanks a lot for watching. I hope you gained some value from it and learned something.", "tokens": [50916, 583, 3231, 257, 688, 337, 1976, 13, 286, 1454, 291, 12634, 512, 2158, 490, 309, 293, 3264, 746, 13, 51116], "temperature": 0.0, "avg_logprob": -0.17512561905551965, "compression_ratio": 1.4806629834254144, "no_speech_prob": 0.01999225653707981}, {"id": 529, "seek": 346104, "start": 3476.08, "end": 3478.88, "text": " I'll see you in the next item. Cheers.", "tokens": [51116, 286, 603, 536, 291, 294, 264, 958, 3174, 13, 13006, 13, 51256], "temperature": 0.0, "avg_logprob": -0.17512561905551965, "compression_ratio": 1.4806629834254144, "no_speech_prob": 0.01999225653707981}], "language": "en"}