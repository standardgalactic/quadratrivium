start	end	text
0	6880	Hey everyone, welcome to yet another episode of my video series on, as I fixed this microphone,
6880	10400	on Joshua Bloch's Effective Java.
10400	15640	This is a video series where I expound on the concepts that he has delineated in this
15640	16640	book.
16640	19200	Without further ado, let's get started with the proviso.
19200	24880	I'm trying to keep these things quick because I do repeat this in every single video just
24880	28160	to, you know, for some intelligence, let's say.
28160	30520	And the caveats are, this is not a tutorial.
30520	33000	I am not a teacher, nor an expert.
33000	36040	I certainly am not an expert in any of this.
36040	44160	So while I do try my best to be as accurate as possible, obviously, I certainly will make
44160	45160	mistakes.
45160	46760	So please point them out.
46760	51240	And if it's something significant, I'll even rectify the error in the comment section
51240	52240	down below.
52240	55800	I'd like to think of this as the blind, leading the blind.
55800	63280	I am, as I always say, as blind, or perhaps even more blind than you are, you know, really
63280	67120	quite new to the Java world, given that I've, even though I've been programming with Java
67120	73120	for a couple of years, it's still a very mature language and a mature community and ecosystem.
73120	78160	So consider this to be a exploratory disquisition.
78160	83000	The analogy that I've been using the past couple of videos is that it's like a university
83000	85200	tutorial, except I'm not a tutor.
85200	89520	We're just students kind of working through a problem together.
89520	94160	Of course, though, let's not pretend it's a one-way conversation because I'm doing all
94160	95160	the talking.
95160	102000	Regardless, I have been corrected in past videos, and I have added those in the comment
102000	103400	section down below.
103400	109200	Depending on how this goes, maybe I'll even create a, I don't know, a Discord chat or a
109200	111120	Slack, not a Slack.
111120	112120	That's a bit too much.
112240	114240	I can just go and shout out whatever.
114240	115240	Okay.
115240	117240	Already, this is too long.
117240	124600	The code for this, or this, given it's a programming series, of course, it's going to be on GitHub.
124600	128640	For item 13.2, all the code is going to be on GitHub, even though for this item, it's
128640	133360	going to be two videos because it's quite a big item, but the code in the repository
133360	135840	will be just under one directory.
135840	136840	Alrighty.
136840	144600	Let's get started with item 13, which states override clone judiciously.
144600	149720	And since we've been on chapter three, this item itself is a part of methods common to
149720	151480	all objects.
151480	159600	So for starters, the very first two sentences of the item states, the cloneable interface
159600	166120	was intended as a mixing interface for classes to advertise that they permit cloning.
166120	169240	Unfortunately, it fails to serve this purpose.
169240	175960	Its primary flaw is that it lacks a clone method and objects clone method is protected.
175960	180640	So when he means and objects clone method is protected, he's talking about the object
180640	182320	superclass in Java.
182320	185080	So firstly, in what I read, there were some keywords.
185080	188640	So let's get some basic theory out of the way.
188640	189960	What is the cloneable interface?
189960	195640	According to Oracle docs, a class implements the cloneable interface to indicate to the
195640	196920	object dot clone.
196920	202640	So the clone method in the object superclass, as I said, method that it is legal for that
202640	207320	method to make a field for field copy of instances of that class.
207320	212400	And then Ganesh Chaudhary of GeeksforGeeks says, the Java line cloneable interface is
212400	215000	a marker interface.
215000	216200	What is a marker interface?
216200	223320	It's really simply means it's an interface that's primarily to add metadata to a class.
223320	229240	So as the name suggests, it marks the class, it indicates to the compiler and even the
229240	235320	programmer that this class is of a certain sort, a certain type with this metadata.
235320	241640	He continues, it was introduced in JDK 1.0, there's a method clone in the object class.
241640	247280	Cloneable interface is implemented by a class to make object dot clone method valid, thereby
247280	249520	making a field for field copy.
249520	253680	Again, as the name suggests, what that simply means is when a cloning takes place, so we
253680	260760	have class with an object, and there's object A that's cloned to, let's say object B, when
260760	265240	the cloning happens, it's a field, all the fields in that class, string int, whatever,
265240	269160	that'd be a field for field copy taking place when the cloning happens.
269160	272080	That's why it's called a field for field copy, obviously.
272080	276920	This interface allows the implementing class to have its objects to be cloned instead of
276920	278640	using a new operator.
278640	283200	So simply a cloneable interface indicates that a class in hand supports cloning.
283200	288760	Now the other keyword in what I read before from the book was the word mixing.
288760	293040	Mixing for me is quite interesting, in fact, because I kind of shifted from the Java world
293040	299760	recently with my new job to the Ruby world, or the Ruby and the Rails world, and mixings
299760	304280	are quite common, or the mix and pattern is quite common in the Ruby world.
304280	308400	Even though I didn't even come across the word when I was programming in Java in my
308400	315160	job, but in a very high level, according to Wikipedia, before we get to the mix and interface,
315160	317280	let's talk about what mixings are.
317280	324320	So Wikipedia says in object-oriented programming languages, a mixin is a class that contains
324320	333760	methods for use by other classes without having to be the parent class of those other classes.
334640	341040	Mixings are sometimes described as being included rather than inherited.
341040	343560	So this is a concept of very common in Ruby.
343560	347480	We have sort of like modules, and you could include modules in classes.
347480	354240	So that allows whatever methods in that module to be included in another separate class,
354240	355240	let's say.
355240	359120	But in the context of Java, we don't really do this kind of including modules and whatnot.
359120	362880	What they simply do is they allow composite interfaces.
362880	366800	Mixings allow composite interfaces, allowing programmers to build modular and extensible
366800	372000	software systems, which is why, here again, it said here, the clone interface was intended
372000	376520	as a mix and interface for classes to advertise that they permit cloning.
376520	380240	Okay, a bit of a demo to understand the concept of mixin.
380240	386320	Now, given Java doesn't have a mechanism to explicitly understand what mixins are, like
386320	393040	Ruby, as I said, we can't need to play around a little bit with multiple classes to get the
393040	395400	idea of what a mixin is.
395400	400240	So in this demo, what we have initially at first is a, initially at first, gosh, what
400240	408640	we have here is an interface called mixin interface, where there are two methods defined.
408640	412440	There's a do something and do something else, two void methods.
412440	418840	And then we have a mixin class that implements this interface and then gives a solid implementation
418840	420680	of these methods.
420680	423640	So we have mixin class and then we have another mixin class.
423640	424640	This is a bit confusing.
424640	427640	I should have called it like class A and class B, but you get there are two classes that
427640	433680	implements the mixin interface, and they have their own kinds of implementations for these
433680	435680	methods.
435680	442480	And then we have a composite class also that implements the mixin interface.
442480	448200	But this class is what does the composition of the other two classes or what those two
448200	452160	methods can do via the mixin interface.
452160	459800	So what that means is this composite class sort of acts as a pseudo module in Ruby.
459800	463480	I'm sorry to incorporate Ruby into this because if you're not familiar with Ruby, you have
463480	464840	no idea what I'm talking about.
464840	472880	But this class would be, yeah, it's what does the, it combines the functionality from the
472880	479080	other two classes into this single class, because it provides different implementations
479080	486880	of the do something and do something else methods in mixin.
486880	492840	And then because it provides separate implementation of the two methods, it can delegate it to
492840	497840	the corresponding methods of the mixin interface, which is what I said before.
497840	498840	But see how this works.
498840	504320	Let's just look at the demo and see how a client would use this composite class to allow
504320	505720	this composition.
505720	512440	So what this composite class allows us is to combine the functionality of two classes,
512440	517840	but then also simultaneously the individual mixing classes can also be used independently
517840	518840	as well.
518840	527120	So we have a mixin one, mixin two, which is firstly of the both of mixin interface type,
527120	532360	but one is the mixin class, the other one is another mixin class, and we have the composite
532360	537280	classes composite one and composite two, although as you can see in the constructor, oh, sorry,
537280	538280	I didn't mention that bit.
538280	545320	So what allows that composition to take place is really the constructor where we have the
545800	549000	private final instance of the mixin interface.
549000	556240	And then what we pass into this can be either mixin class or another mixin class.
556240	558640	So two different classes.
558640	560200	And that's what we're doing in the composition.
560200	565160	We're passing mixin one and then mixin two.
565160	568320	And then in the composite, we can do something, do something else.
568320	574280	And then depending on what we pass into the constructor, the corresponding method will
574280	577320	be invoked on the corresponding class.
577320	583400	So if I run this, you'll see it does firstly from mixin class, do something to something
583400	588240	else, and then it'll run another mixin class, do something differently, do something else
588240	589240	differently.
589240	593080	That's the basic idea of what a mixin interface does.
593080	601280	Probably a bad example, really, because clearly, it's not explicit in Java, but at a high
601280	604600	level, again, it allows composite interfaces.
604600	609560	And then of course, I mentioned the clone method, needless to say, that's probably one
609560	612400	of the most important methods in this item.
612400	617280	The clone method, of course, is a built-in method in Java that allows objects to create
617280	618280	a copy of themselves.
618280	624840	A few things to keep in mind, the clone method is protected, and this potentially becomes
624840	626640	a problem in the future.
626640	630760	The fact that none of them in the future will discuss, in the future of this item will discuss
630760	631760	it.
631760	636080	The idea that the clone method is protective can be a bit annoying, we'll discuss that
636080	637080	later.
637080	643000	But just to get a formal definition, which I really liked, Chagypti's definition.
643000	649240	By the way, the reason that it becomes a problem, can become a potential problem is because
649240	653640	only subclasses can use this method because it's protected.
653640	658960	So again, a formal definition by Chagypti, which I thought was a good one, by default,
658960	665080	the clone method performs a shallow copy of the object, which means that only the objects
665080	670400	fields are copied, but any object references, any object references by those fields are
670400	671400	not cloned.
671400	678160	So for this line here, but any objects references by those fields, perhaps the quintessential
678160	680080	example would be an array.
680080	685960	An array would be a problem if a class has an array declared, because then a shallow
685960	691000	copy wouldn't work as there'll be two objects pointing to the same memory instance of that
691000	695680	array, and that can create corrupted states and cause a problem.
695680	698880	Anyway, I'll continue and we'll get to that later too.
698880	703440	If you want to perform a deep copy of the object where all the objects referenced by
703440	707800	the fields are also cloned, you will need to override the clone method and implement
707800	714080	your own cloning logic, which is why most times this, the latter bit where we do override
714080	723120	it does take place because most classes will most most most classes, I can't talk because
723120	727760	most times most use cases a shallow copy will not suffice when we're probably cloning some
727760	728760	cloning an object.
728760	730320	We need a deep copy.
730320	735680	So to understand the problem, we need to look at it in a bipartite way in the sense that
735680	742440	the first part is that the objects, which is the superclass, the objects clone method
742440	745560	is protected, as I said it here.
745560	752920	And the second problem is the cloneable interface is only a, what's what we use a marker interface
752920	756240	as in it doesn't have any defined clone methods.
756240	762600	So one solution keep in mind potential solution is that we could invoke reflection in Java.
762600	765440	We could invoke the clone method with Java reflection.
765440	773160	Now just your block would not suggest that given that Java reflection can be a bit tricky.
773160	780280	It can leave a lot of objects in corrupt state and cause problems in application on runtime.
780280	784200	So it's primarily used by framework builders.
784200	790320	But simply we've discussed Java reflection in many items before, what it allows us to
790320	795360	program is to dynamically inspect and manipulate objects, classes, interfaces at runtime.
795360	802320	So using reflections as the name suggests, in runtime when objects are created and in
802320	807280	memory, you could reflect within the objects or introspect and then manipulate it and play
807280	808560	around with it.
808560	817000	So a simple example or a simple demo, just to again reiterate and demonstrate what reflection
817000	826600	does is this my class class, I got to get better naming classes, my class class.
826600	829000	This class implements cloneable.
829000	834320	We have a private infield called value, we have a setup, sorry, we have a constructor,
834600	839360	let me have a setter, a getter and afterwards in the implementation or the client using
839360	842200	it, firstly, this will not work.
842200	848480	So if you look here, it's going to throw an error because the clone method is protected.
848480	854400	So you can't just go my object.clone because in the superclass of my object, the clone
854400	855400	method is protected.
855400	857320	So that will not work.
857320	862920	Therefore what we've got to do is resort to using reflection and obviously in reflections
862920	870000	always use a try catch block because reflections have a high potential of throwing exceptions.
870000	880880	And then if I run it, okay, that took a while for me to understand because I had to go through
880880	885520	how the reflections work and trying to make sense of it once again because I wrote this
885520	892200	quite a while back, which is probably another reason as to why unless you really need it
892480	897680	using Java reflections is not a good idea because there's a lot of unexpected things
897680	900360	that can happen, let's say.
900360	906720	So firstly, I'm not going to override the clone method in my class.
906720	910120	So we're going to try and use the clone method in the object class.
910120	917600	Now what happens then is I'm going to leave that bit commented out but I'll comment it
917600	924920	and comment out this bit here, which is trying to access the clone method of the superclass,
924920	929680	which you can see here, I'm getting the clone method and I'm setting it as accessible.
929680	936360	And then when I run this, it should technically or theoretically give an error because it
936360	940760	can't access that because it's a protected method.
940760	948240	So the only way really to do it is to override it in the subclass and then do it like this,
948240	954920	which involves...
954920	960280	Now here you don't have to use reflections even though I've just used it, but that involves
960280	965440	accessing it via the subclass and then doing the cloning as such, which is going to happen
965440	966440	here.
966440	972760	Now of course here again, as I said, you don't need to really do reflections, but the point
972760	977560	being, the overall point of all of this being, and I'm probably going to edit out a bit of
977560	981320	the middle because I spent a long time going through this and then googling trying to figure
981320	990160	out what I did wrong, is that because this pesky cloneable interface, this piece of shit
990160	996880	is not providing us with an implementation for the clone method, that makes things unnecessarily
996880	1002160	complicated, which is why Joshua Block states, so what does a cloneable do, given that it
1002160	1008520	contains no method, it determines the behavior of objects protected clone implementation.
1008520	1015480	If a class implements cloneable, objects clone method returns a field by field copy of the
1015480	1022800	object, otherwise it throws clone not supported exception as a low malware is making noise
1022800	1023800	again.
1023800	1029760	Now by the way, as we go on with this point, that latter bit, throwing the clone not supported
1029760	1037960	exception that also becomes a pain point with this interface, we'll discuss it in this item.
1037960	1043760	And he continues, though the specification doesn't say it, and this is an important point,
1043760	1051200	in practice, a class implementing cloneable is expected to provide a properly functioning
1051200	1056600	public clone method, in order to achieve this, this class and all of its superclasses must
1056600	1063600	obey a complex, unenforceable, thinly documented protocol.
1063600	1070080	The resulting mechanism is fragile, dangerous and extra linguistic, it creates objects without
1070080	1071880	calling a constructor.
1071880	1078840	That really is what a clone method does, if you think about it, for all intents and purposes.
1078840	1082440	So this begs the question, how to implement a well behaved clone method?
1082440	1086760	And before we get to the implementing strategy, a few caveats.
1086760	1092560	Firstly, the cloneable interface is an atypical interface, as interfaces aren't supposed
1092560	1097920	to modify the behavior of a superclass, but are blueprint for what a given class can do
1097920	1098920	for its clients.
1098920	1105240	So really, when you implement the cloneable method in a class, let's say class A, it's
1105240	1110560	kind of an interface for the object class, for the superclass, which is atypical.
1110560	1112280	And that again is a problem.
1112280	1118480	And then also, I wouldn't say it's a problem, it's kind of an anti-pattern, it's something
1118480	1120600	particularly shouldn't follow.
1120600	1124680	But also the general contract for the objects clone method is weak.
1124680	1130040	This is the general contract defined in the Oracle docs, and you can see what it does.
1130040	1135560	I'm not going to go through it too facetiously, but essentially, the idea is the clone takes
1135560	1144400	place and it creates in return a copy of the past object, past of that method with a new
1144400	1145920	memory location.
1145920	1153000	Now, it is vaguely similar to constructor chaining, a pattern, a design pattern, which
1153000	1156440	allows to create less duplicated code.
1156440	1161080	But more than me explaining it, let's take a look at what constructor chaining entails
1161080	1167120	if I open up the class customer.
1167120	1168320	It's quite a straightforward pattern.
1168320	1171440	You probably have seen it in a lot of code in the Java world.
1171440	1176080	We have a class customer that extends the superclass person.
1176080	1181800	So all the customers are people, at least for now.
1181800	1188000	And then in constructor chaining, we have the customer class being constructed, that
1188000	1189840	the object being created.
1189840	1195880	And we will see as some fields are just inherited directly from the superclass, things like
1195880	1199080	first name, middle name, last name, age.
1199080	1206440	And then only this field here, the loyalty card ID, is constructed in this constructor
1206440	1209040	and that field value is set.
1209040	1215240	So the way this reduces duplication of coders, let's say if we didn't have this kind of constructor
1215240	1221680	chaining, this same bit of code here will have to be replicated in this constructor
1221680	1223160	too.
1223160	1226480	And that would be a waste of space.
1226480	1232760	And so by invoking the super keyword and then passing it into the superclass constructor,
1232760	1234400	this allows the supercoded code.
1234400	1239720	However, the problem is this kind of pseudo constructor chaining isn't enforced in the
1239720	1240720	clone method.
1240720	1248160	So if you'd look at our person customer example, if you mess up the construction here in the
1248160	1252040	constructor, the compiler will throw an error.
1252040	1258240	But in this example, which I have, which is a class called food that implements cloneable,
1258240	1261680	it's overriding the clone method.
1261680	1265560	And then this class bar extends the food class.
1265560	1268640	So that's a subclass of food.
1268640	1275600	And it also is trying to override the clone method of food, of the superclass, but what
1275600	1280640	happens there is in our track catch block when we run it, it's going to throw an error.
1280640	1289040	The reason is because the superclass, which is food, is not, it doesn't call the super.clone,
1289040	1294560	so the objects clone method, rather it's just creating a new instance of food and passing
1294560	1295560	that.
1295560	1300000	And that creates errors here because it's on a proper clone taking place.
1300000	1303600	And because now this error is thrown in runtime.
1303600	1307480	So if it was in foes, we would catch this error in compile time.
1307480	1308480	And that's a problem.
1308640	1312400	However, though, of course, final classes don't have to worry about this problem of it being
1312400	1317520	not in foes because they will not implement cloneable as they won't be cloned.
1317520	1322440	So to put it a bit more clearly, Joshua Block states, this mechanism is vaguely similar
1322440	1326080	to constructor chaining, except that it isn't in foes.
1326080	1332520	If a classes clone method returns an instance that is not obtained by calling superart clone,
1332520	1344480	like the problem which we see here, where the superclass foo is not calling super.clone,
1344480	1349880	but by calling a constructor, which the person is doing here, the compiler won't complain.
1349880	1355200	But if a subclass of that class calls super.clone, the resulting object will have the wrong class
1355200	1362320	preventing the subclass from clone.
1362320	1365400	That's a complicated, weird way of putting it in the sentence.
1365400	1370320	Those resulting objects will have the wrong class preventing the subclass from clone method
1370320	1371840	from working properly.
1371840	1375320	That's like a weird way that he's written the sentence.
1375320	1379960	In any case, the learning strategy, the simplest thing at first to do is to call the super
1379960	1384400	dot clone method because that will return an object which is a fully functional replica
1384400	1385400	of the original.
1385400	1390920	And if all fields of the class, so in the class you're designing, if all the fields contain
1390920	1396800	primitive values or reference to an immutable object, no further processing is needed.
1396800	1402160	As Joshua Block states, any field declared in your class will have values identical to
1402160	1403720	those of the original.
1403720	1408560	If every field contains a primitive value or a reference to an immutable object, the
1408560	1411280	return object may be exactly what you need.
1411280	1415960	So you don't need to play around with it in your clone method, in your overwritten clone
1415960	1419720	method, in which case no further processing is necessary.
1419720	1425600	And he also continues, but note that immutable classes should never provide a clone method
1425600	1428880	because it would merely encourage wasteful copying.
1428880	1432800	So an immutable class would be classes where the fields are all final and the class itself
1432800	1435680	is declared with a final keyword.
1435680	1440840	And a simple example of this idea is this phone number class where in the phone number
1440840	1447960	class we have a clone method, it's simply invoking, not invoking invoking the super
1447960	1452120	dot clone method which is the clone method of the object class and of course doing the
1452120	1458000	casting so that what's returned by this method is something of type phone number.
1458000	1462720	And the reason we can do this in a straightforward manner with the casting is because Java does
1462720	1470120	support covariant return types as he states here, it is legal and desirable to do this
1470400	1473880	because Java supports covariant return types.
1473880	1476280	So what are covariant return types in Java?
1476280	1481240	Firstly, let's understand the theory behind the concept of covariance.
1481240	1489040	According to Baldung, covariance can be considered as a contract for how a subtype is accepted
1489040	1492120	when only the super type is defined.
1492120	1498080	And another definition is covariance means we can access specific elements defined by
1498080	1499080	the super type.
1499080	1503520	However, we aren't allowed to put elements into a covariant system since the compiler
1503520	1507360	would fail to determine the actual type of the generic structure.
1507360	1512360	I know that's a bit too formal and abstract but simply what it means is a subclass can
1512360	1514320	override the methods of a superclass.
1514320	1519200	So in our case a phone number, phone number can override the method of the object class
1519200	1527960	which is the clone method and afterwards when it returns it can return something or an object
1527960	1532080	not something, an object of type of the subclass.
1532080	1534240	So it will not return.
1534240	1540080	So the phone number clone method will not return an object of type object instead it
1540080	1542520	will return an object of type phone number.
1542520	1548760	Now if we didn't have the idea of covariance and if Java didn't have covariant return types
1548760	1550920	this would be the implementation necessary.
1550920	1552920	We'll have to do the casting as a client.
1552920	1558480	So when the client uses the phone number class and uses the clone method that we initially
1558480	1564480	defined we will have to do the casting as a client and because of covariance this is
1564480	1566040	not required.
1566040	1569800	Simply that will suffice and work fine.
1569800	1573000	So to further understand covariance so let's look at this demo.
1573000	1578600	We have a class vehicle which starts an engine and then we have a class car that extends
1578600	1579600	vehicle.
1579600	1585520	We also have a class motorcycle that extends vehicle and these two have their own implementations
1585520	1588080	of the start engine method.
1588080	1593040	Now if we run this code what you'll see is we're first starting the vehicles engine,
1593040	1597520	the superclasses engine and then we're starting the cars engine and the motorcycles engine.
1597520	1604720	So in starting this engine the objects return even though we're calling the same start method
1604720	1609320	and the overriding is taking place in the subclasses.
1609320	1616000	The return type is of type this which means it can return an object of type car or in
1616000	1622360	this case an object of type motorcycle and over here no casting is necessary.
1622360	1627840	For example over here if we do this, this would be redundant and the compiler would
1627840	1632720	say what are you doing mate, it'll in fact throw an error, sorry I wouldn't throw an
1632720	1638280	error, I'm just being silly, it would show that it's redundant, it's useless.
1638280	1640880	So remove redundant cast because you don't need to do that casting.
1640880	1645440	So the next point is the clone not support exception should have been an unchecked runtime
1645440	1646440	exception.
1646440	1651640	Now I think I did discuss this in the beginning of the video but here's the problem.
1651640	1654240	So firstly let me read from the book.
1654240	1658460	The code to support our clone is contained in a try catch block.
1658460	1666000	This is because object declares its clone method to throw clone not support exception
1666000	1669100	which is a checked exception.
1669100	1673060	Because phone number implements cloneable we know the code to support our clone will
1673060	1674060	succeed.
1674060	1679260	The need for this boilerplate code indicates that clone not support exception should have
1679260	1681780	been unchecked.
1681780	1685540	So the problem is because we know across that implements a clone method it's going to implement
1685540	1691060	the cloneable interface the checked exception won't be thrown which makes this code here
1691060	1695980	the try catch block superfluous redundant code and it's unnecessary.
1695980	1700020	Okay now what we're going to try and do is look at the stack class so a bit more high
1700020	1705140	level view at how the clone method is implemented and the stack class is defined well it was
1705140	1712180	initially defined in item 7 but we've repurposed it to fit to item 13 and this is really important
1712180	1717500	because here's why really we need to consider this point as to how do we deal with object
1717500	1722980	fields or class fields that refer to mutable objects because a simple clone implementation
1722980	1729380	won't work for such cases such as why in our classes we need to override the clone implementation
1729380	1739220	of object specially for fields that are mutable or fields that refer to mutable fields pardon
1739220	1745580	me not mutable fields are mutable objects or data structures and in this case the again
1745580	1751500	that perhaps a quintessential example would be an array for an array we need to recursively
1751500	1756860	copy all the elements of the mutable field like an array to solve the problem of destroying
1756860	1762020	or destroy invariants we don't have we don't want to have arrays in two different states
1762020	1766620	where we have two objects so we have object A and an object B that was copied of object
1766620	1772460	A both pointed to the same array that could create corrupt states and that's what we see
1772460	1779260	in this stack class so this is fine this integer size is fine this is fine especially because
1779260	1787300	it's final however the objects object array called elements this in our clone method
1787300	1792380	we need to change it up a bit so as you can see here we are firstly doing the normal cloning
1792460	1799580	in the super dot clone and then we're specifically cloning all the elements recursively in elements
1800620	1806140	and then setting it to result so the new object dot elements and then returning that so what we
1806140	1812460	do here is we in fact create two array instances so to reiterate that point I think it's important
1812460	1820460	because he's in this part of this item this is the take home point is that when we do the cloning
1820460	1828060	it can't just be a dumb clone of all the fields a field for field clone if there are let's say
1828060	1833180	things like arrays which point to other immutable objects because what's going to happen then then
1833180	1837500	is we're going to destroy the invariance of this clone method where both objects are going to point
1837500	1843420	to the same array and that's going to corrupt that array where as clients use these objects it'll
1843420	1849100	either throw not point exceptions or give nonsensical results and this situation as
1849180	1853100	Joshua block I said earlier which I will read will not happen in a constructor clone method in
1853100	1857740	many ways acts like a constructor because it's really constructing a new object now this thing
1857740	1862780	we've defined here will not happen in a typical constructor because we aren't copying things across
1862780	1868620	in a constructor which is why Joshua block states this situation by the way I shouldn't say this
1868620	1874700	situation here because what we've done here is correct in fact let's say hypothetically we didn't
1874700	1879580	do this now this would destroy the invariance of this clone method but here this is correct
1881020	1887500	so this is not bad code anyways continue this situation could never occur as a result of calling
1887500	1894060	the sole constructor in the stack class in effect the clone method functions as a constructor you
1894060	1900140	must ensure that it does no harm to the original object and that it properly establishes invariance
1900140	1907420	on the clone so yes if we didn't do this what will happen is we'll have object a and then object b
1907420	1913500	cloned off object a and then if someone messes around with object b in the the elements array
1913500	1918940	then object a will also be affected because they are both pointing to the same array and that's
1918940	1925340	the problem we're trying to solve here really if if you get this point from this whole video elaborate
1925340	1931100	video you get this part of what i'm trying to convey here and then to end this part of the item a
1931100	1936620	few note of bennets the first one is you probably noticed we aren't doing any casting like this
1936620	1942940	in this clone method it's not required because in fact this is the only time really uh it's
1942940	1949180	ideal to simply for an array when i mean the only time it's ideal to use uh the clone method directly
1949180	1954860	in the superclass object the Joshua block states calling clone on an array returns an array whose
1954860	1962220	runtime and compile time types are identical to those of the array being cloned this is the preferred
1962220	1968620	idiom to duplicate an array in fact in fact arrays are the sole compelling use of the clone facility
1968620	1974460	and the other point is recursively calling the clone method will not work for final fields for
1974460	1982700	example if let's say uh private final object element so if we go here and if we set this to be final
1983180	1988380	you'll see an array is going to be thrown here because you can't override the values uh in a final
1988380	1995420	field uh or overwrite all the values the memory instance in a final field and that's because
1995420	2001580	uh as Chajipiti states in order to create a proper deep clone you must create a new instance of the
2001580	2007020	mutable object and assign it to the field in the clone object however with a final field you
2007740	2013420	can't reassign a new value after initialization which can lead to incorrect behavior or shared
2013420	2019900	state between the original object and it's cloned and then to end this part of the video this is a
2019900	2026700	fundamental problem like serialization uh in the cloneable architecture because the cloneable
2026700	2031180	architecture is the is incompatible with normal the use of final fields referring to mutable
2031180	2036380	objects except in cases where the mutable objects may be safely shared between an object
2036380	2042540	and its clone in order to make a class cloneable it may be necessary to remove final mortifiers
2042540	2047980	from some fields so that's a little caveat there okay that is part one uh just want to
2047980	2055100	I guess kind of apologize if I didn't properly convey the this part here about the reflections
2055100	2060140	because that was it did complicate me a little bit because at first the way I've written the code
2060140	2066780	the demo it wasn't really accurate because the idea was to reflect on the object superclass not to
2066780	2075180	reflect on the object at hand per se but I think it's still the important point there was it's not
2075820	2081260	recommended to use reflections and try to use the object the superclass objects clone method
2081820	2086220	best thing to do is to implement the cloneable interface and then just override it and define
2086220	2093340	your own clone method all righty that's it for part one of item 13 override clone judiciously
2093340	2100060	judiciously it's a hard word to pronounce um and I hope I was being judicious in expanding and
2100060	2106220	explaining the concepts in this item but I shall continue on with the rest of this item in part two
2107340	2111580	uh saying all that yeah thanks for watching and I hope you got some value from it I'll see you in the
2111580	2115580	next one cheers
