start	end	text
0	6320	Hey everyone, welcome to yet another episode of my video series on just your blocks, Effective Java,
6320	12640	now like every other content creator, YouTuber, whatever you may call it, we are no fans of
13360	19920	lawnmowers, leaf blowers, any of that. And unfortunately, despite living in a very quiet
19920	26160	neighborhood, there's someone moving alone. So I apologize if the background noise is gonna
26160	30000	ruin the quality of this video, but in the editing process, I'll try to, you know,
30560	36800	filter it out and kind of make it a bit more listenable. In any case, getting to this, today
36800	42240	we're going to cover a pretty simple item to be honest, it's item 12, which is always override
42240	48160	to string. So if you have been following along in item 11, we did always override hash code when
48160	53360	you override equals. And essentially, I've been going through all the items in just your blocks
53360	60160	book. But as per usual, before we get to the item itself, I want to get through the proviso.
60720	67040	So without further ado, let's get started. This is not a tutorial. I am not a teacher or an expert.
67040	73360	So whatever I say in this video, please do your own research, ask ChargeGPD for God's sake,
74160	77280	because ChargeGPD is probably going to give a better explanation than I do.
78240	80960	I feel like a lot of these tutorials are eventually going to be
81600	87520	redundant or obsolete. Really, the AI does a much better job in explaining these concepts than
87520	94320	myself at least can ever do. Nonetheless, I'm really doing these videos more for myself than
94320	99440	the general public rather selfishly, because in some sense, explaining things, it loves one to
100080	105040	learn things much better, and it kind of settles more in your mind. Sorry, I'm talking too much.
105040	109600	So yeah, as I said, this is not a tutorial. I'm not a teacher nor an expert. Please do your own
109680	114720	research. I've always used analogy. This is similar to the blind, leading the blind.
116240	121520	I'm as equally or perhaps even more blind as you are when it comes to the concepts of
122560	127760	concepts highlighted in this book, but also computer science in general. This is a
128640	133040	exploratory disposition. That's simply what it is. I'm exploring something and while I'm exploring
133120	140480	these concepts, I think a lot essentially. I will inevitably make mistakes, so please do be kind
140480	145840	enough to point them out more for the sake of the other viewers than myself, but for myself too,
145840	154320	because I don't want to spread any false information. And all the code, given that this is a programming
154320	160000	tutorial series, not a tutorial, I just said it's not a tutorial, given that this is a programming
160000	165760	video series, all the code will be available on GitHub. Okay, enough of that. Let's get started. So
166960	174960	as I said, item number 12 is always overrided to string. It's not an overtly complicated item.
174960	183040	The concepts are quite straightforward. Nonetheless, it's important to grok what Joshua Block has
183040	188480	delineated in this item to write better code essentially, because the two string method is
188480	195360	obviously common to the object class and every class that you'll write will have a
195360	199440	two string method by default. So to get the basics out of the way, what the
199440	205840	two string method does is that it simply gives a string representation of your object, whatever
205840	211360	it may be. And which is why it is the object superclass, which is the superclass of every other
211360	216000	class in Java has the two string method. And if you look at the two string method, what you'll see
216000	222720	is that it gives a returns the class name, followed by the unsigned hexadecimal representation
222720	229440	of the hash code. So this is what the two string method by default does. But unfortunately,
230480	236800	for most use cases, or essentially all use cases, this doesn't suffice. The reason being,
237360	243600	the general contracts on reading out the book, the general contract for two string says that the
243600	251040	return string should be a concise, but informative representation that is easy for a person to read.
251040	257760	Now, what this returns, so essentially, I'll show an example soon, but the important thing,
257760	262080	this could be concise, but the important thing is that it should be easy to read and it should
262080	265920	be something meaningful. So if we take a look at this phone number class, which is what Joshua Block
265920	272320	has given in his demo, by default, if we don't override the two string method, and here in line
272320	277360	number 59, if I've created an object of phone number, an object called Jenny and given it the
277360	286240	area code, the prefix and the line number. And if I print this object, you'll see what you get is
287040	292800	the name of the class with its package location and then an unsigned, the hexadecimal pretty much.
292800	300720	This for a user for a human being is not meaningful enough, especially given that this class is supposed
300720	306080	to represent a phone number in a given format. So what we can do is we can override the two string
306080	311360	method. And if we do override it, you'll see here, we're setting it to a particular format,
312160	317520	using the significant fields of this class, which are these three fields.
319440	323840	And then once after overriding it, oops, that's the wrong one, after overriding it,
323840	329280	if we rerun this code, you'll see what's returned now is something a bit more meaningful.
329280	334640	That's in fact an actual phone number with the given values. So that's why it's advised
334640	340160	always to override the two string method because majority of classes, we need to represent them
340160	345920	in a meaningful way. So Joshua Bock states, the two string contract goes on to say,
346640	352080	it is recommended that all subclasses override this method. Good advice indeed. Now, of course,
352080	356240	if you're a programmer and not particularly attuned to using breakpoints and whatnot,
356240	361680	even though recently, I didn't personally do this for a long time, but recently,
361680	367760	one of the senior engineers in my company, he's really taught me the art and style of using
367760	375600	breakpoints and code and how you can debug on runtime. But when I was a noob, a pleb,
376720	383840	I used to just pretty much log everything and then debug while logging. That's probably not
383840	388480	the best way to debug code. But I do know, I think a lot of programmers, especially
389440	396320	plebs, I'm using that term rather physically, but even forgive me for being sadonic. But the point
396320	400800	being, if you're an inexperienced or even if you're an experienced programmer, it doesn't really
400800	407120	matter. If you do log your code, log objects, log different properties and put a lot of logs in
407120	413520	your code for debugging, you need what you log to give you meaningful information. And that's
413520	419600	really important. So the problem though is it could be a component with reference to a given
419600	425120	object may include that includes a string representation in a load error message, which would
425120	429040	ease, which would be easy to debug with the meaningful to string. So what I've written here
429040	434640	is essentially, it could probably be a class that refers to the object of your class. And if the
434640	440400	two string method is meaningless, then the client of that component is going to be disserviced,
440400	445120	especially when it comes to debugging. So a good example here would be if you take a look at this
445120	450160	simple class that I created called my component, which as you can see is referring to the phone
450160	456000	number class, when the my component class is constructed in the constructor, it's
456000	461920	instantiating a new phone number object. Let me actually do like that. So it's better. And then
461920	467040	if I run this, and I'm intentionally throwing an exception here, so let's say that was some kind
467120	473920	of error. And in the error log, once the exception is caught, it's logging a meaningful
474640	479840	string representation of the my component dot phone number object. Now, of course, if
479840	486320	once again, if he didn't override the two string method, and if he had it by default as the hexadecimal,
486320	492640	which it is, it would in this case make debugging a lot harder because now you're not really sure
492640	496800	what this class, I mean, you kind of do know what the class does, but it's better to always have a
496800	503280	string representation, which is why just your block states providing a good two string implementation
503280	509680	makes your class much more pleasant to use and makes systems using the class easy to debug.
510400	517280	The two string method is automatically invoked when an object is passed to print ln, print f,
517280	524560	the string concatenation operator or assert or is printed by a debugger. Even if you never call
524560	531040	two string on an object, others may. So what he means by the others may is of course, in this
531040	536640	case, the my component class use the two string method. So it's good to be charitable and think
536640	542160	about others in that sense. And he continues, programmers will still generate diagnostic
542160	547280	messages in this fashion, whether or not you override two string, but the messages won't be
548240	552960	useful unless you do. Yes, it's kind of the same thing he's repeated there.
553600	558720	Also, another sort of answer to the point, I guess, is that he said collections, in fact,
558720	563280	make good use of the two string method. So if you look at this demo, once again, I have a
563280	568320	hash map. I mean, once again, I mean, once again, I have a hash map that uses the phone number class.
568320	576400	So the key is of type string, and the value is of type phone number. And we're adding this key
576400	582480	called Jack, my favorite philosopher, and a new object of phone number. So if I do print this,
583920	587840	what you'll see is, in this case, this is a mistake, actually. So it says here,
587840	592560	Jack has printed the object, and this is kind of meaningless. But if we do
594400	600560	override this two string method, and reprint that, and then print the elements in that collection,
602240	606080	in this case, you can see, there's only one element, but it says Jack, and you get Jack's
606080	610960	phone number. This is not his phone number. But if it is, I would have called him and immediately
610960	615680	asked him for an interview to no doubt on philosophy, but this is not his phone number,
615680	622000	unfortunately. Okay, let's keep going. So he states here, or he continues,
622000	627280	when practical, the two string method should return all of the interesting information
627280	632000	contained in the object, as shown in the phone number example. Then on this next point,
632000	638000	where we discuss objects not conductive to string representation, he states, it is impractical if
638000	642640	the object is large. So these are objects that is a bit harder to represent as a string.
643280	649920	Why is this giving a typo to a? There we go. Sorry, he continues, it is impractical if the
649920	655920	object is large, or if it contains state that is not conductive to string representation.
655920	661840	And then it continues before we get to the demo. Under these circumstances, so if this is if the
661840	666560	object is not conductive to a string representation, under these circumstances,
666560	674240	two string should return a summary of the class. Ideally, the string should be self-explanatory.
674240	682160	So let's take a look at this demo. Over here, we have a class called phone directory. This class is,
682160	686160	if you look at the two string method of this class, which I'll show in a moment,
686800	692720	it is a summary of this class. So what do I mean by that? This class has two fields,
692800	699520	two private fields. It's got a string name and a list of phone entry type called phone entries.
700080	706400	And in the constructor, it'll set the values for these two fields. And if you look at phone entry,
706400	712800	that's a class of its own, in fact, which is a in a class called phone entry. So that simply
712800	717360	takes a full name and the phone number. That class really doesn't do that much. And then in the
718160	723440	phone directory class, we have a list of phone entry, as I already said. And if you look at the
723440	728640	two string method, what this two string method does is it returns the phone directory with the
728640	736560	name. That's the name of the whoever the person is. And then all it does is it returns phone entries
736560	743120	dot size. So it doesn't really return every single element in the phone and entry list.
743120	747760	Now, if you look at how a client might use the phone directory class,
749840	755120	we have three objects here, we have phone entry one, two and three, then we also have a phone
755120	761360	entry list. So into the phone entry list, we've added, by the way, phone entry, one, two and three,
761360	765200	these, these three objects of the type phone entry and then the last test, of course, of type
765200	771440	phone entry two, and then sorry, and into the list, we add these phone entries. And afterwards,
771440	777200	into the directory, which is of type phone directory, obviously, we add a name in this case,
777200	783040	that existentialists, and we add their names, character guide, need to start into the phone
783040	788320	entry list, because sorry, the phone entry list where we added these objects to added into this,
788320	794400	not added, but this phone directory classes instantiated with that list. Gosh, I'm butchering
794400	799040	this simple thing. I'm sorry, it's been a long couple of days, my brain has gone a bit mush.
799600	805600	So if you do run this, what you'll see is, yes, it's printing phone entry as it should,
807120	811200	with the, with the full name and the phone number. But if you look at the phone directory class,
812800	816560	what it's really doing is it's saying existentialists and saying, okay, this,
816560	821920	there are three existentialists in this phone directory. And that's kind of the point here. So
823440	828560	it's not always necessary to represent every single thing in a class, especially if there are lists
828560	833600	involved and other components involved in the class. What's important is, as Joshua Block states,
833600	840160	the string should be self-explanatory. This here, this two string method that that we've
840160	845040	overridden in the phone directory class, this is still something meaningful and comparison to,
845040	850560	let's say, a hexadecimal for a client of the phone directory class. So it's still of value. Again,
850560	854560	the key term here is meaningful. The reason it's important for it to be meaningful is, again,
854640	858880	if it comes to debugging here, if there's an associate failure or there's a test failure,
858880	867280	it'll say expected this, but was this now for a user or a programmer, this looks the same. So
867920	873520	he or she doesn't know where the hell the error is, is probably because in the string representation
873520	878400	of this class, some significant field, something that would give meaning to this object has been
878400	883760	missed out. Therefore, the user is kind of blindsided and have to figure it out on their own.
883760	888960	So it's probably always good to overcommunicate and overrepresent what an object is in a string.
888960	893120	So of course, something you may have noticed in the phone number class is when we were
893120	898640	representing the phone number, you could see here, we did give it a certain format.
898640	904720	We did represent it in a certain format. And that begs the question, how do we specify the format
904720	910320	of the return value in documentation or put it in Joshua Block's words, one important decision
910320	915520	you'll have to make when implementing a two string method is whether to specify the format
915520	920160	of the return value in the documentation. So according to him, it's important to document
920160	925360	the format for value classes such as phone number or matrix. Now what are value classes? So before
925360	930880	we get to the demo, but a period of the way. So according to one definition I found by UC Berkeley,
931520	935920	at a fundamental level, so I'm defining value classes here, at a fundamental level,
935920	944640	value classes define objects which once created, never change their value. A variable of a value
944640	951280	type may only be changed by reassigning to that variable. When we wish to only modify some portion
951280	957600	of value class, one attribute, let's say, we're compelled to reassign the whole object. So something
957600	962960	rather static, and I mean that conceptually not in the Java sense like that, probably it's okay to
962960	967760	document that because it's not going to change. It's going to be in variable. And also another
967760	974400	definition, I would say a clear one in fact by chat GPT with a value class, this helps create a
974400	979600	standardized human readable representation of the object that can be used for input output and
979600	984080	persistent human readable data objects. So if you look at this new variant of the phone number
984080	989600	class, it is for all intents and purposes immutable. The reason is the class is final or the fields
989600	996080	are final. Therefore, it is going to be static. It'll not change. It is not mutable. And if you
996080	1001920	look at the two string method, in this case, in the documentation, we have specified what the format
1001920	1006720	of the string representation would be. And it's will even given an example. And then if we go look
1006720	1012560	at a client that will use the phone number class and run this code. By the way, you can see here
1012560	1018080	an object of phone numbers created, the two string method, what it returns the representation,
1018800	1024000	it maps, or it corresponds to what's being specified in the documentation on the two string
1024000	1033120	method itself. So for a class like this, which is a value class, it's okay to document the format
1033120	1039120	as Joshua Block states. So just to keep reading what is stated here to put it a bit more formally,
1039120	1044960	the advantage of specifying the format is that it serves as a standard ambiguous human readable
1044960	1052080	representation of the object. This representation can be used for input and output, and in persistent
1052080	1058080	human readable data objects, such as CSV files. If you specify the format, it's usually a good
1058080	1065040	idea to provide a matching static factory or constructor. So programmers can easily translate
1065040	1070320	back and forth between the object and its string representation. So I forgot to show that part.
1070880	1075920	That's a two string method here where in this case, sorry, not the two string one that I kind
1075920	1080560	of got confused there, the form string method where it's doing the opposite, it's instead of
1081280	1086400	converting the object to a string, it's taking a string and converting that to an object. So you
1086400	1093280	could give, for example, this phone number class a string of proper with the proper format, and
1093280	1097920	then that'll convert it to a phone number object. Now we can take a look at how that works. So if
1097920	1104160	you look at this bit of code here where the client's using the from string method, this phone
1104160	1111600	number string, which is printed here in line number 82, which you'll see is this, is passed to the
1111600	1117280	from string method that takes a string, and then that converts that or passes it to a type of phone
1117280	1123520	number. Now, what's interesting here is if you do pass in something of a wrong format, like just
1123520	1130640	some mess like that, this is going to throw an error. There you go. It'll throw an invalid format,
1131520	1137120	invalid phone number error, or an illegal argument exception. That's good because we won't, if you
1137120	1141840	want to convert this string to a phone number object, we want it to be of a certain type,
1141840	1148160	of a certain format, and that's what this from string method does. So the two string and the
1148160	1154320	from string kind of interpolates, not interpolate, sorry, interoperates. I was thinking of interpolates.
1155120	1159520	In any case, it seems self-evident that the disadvantage of specifying the format is that
1159520	1164320	it makes the code static. Again, conceptually speaking, because now when you have a format,
1164320	1169440	you can't make the from string method or the two string method that dynamic once you document it,
1169440	1175600	and you say that this is how this object has to be represented, but that's a tradeoff a programmer
1175600	1181680	has to make. As Joshua Block states, programmers will write code to pass the representation,
1181680	1188080	to generate it, and to embed it into persistent data. If you change the representation in a future
1188080	1195040	release, you break their code and data, and they will yell. By choosing not to specify a format,
1195040	1200960	you preserve the flexibility to add information or improve the format in a subsequent release.
1200960	1205440	Yell is a funny word, and in fact, a lot of programmers tend to do that. But one way to
1205440	1212400	hopefully not make programmers yell as much is whether or not you decide to specify the format,
1212400	1217600	you should clearly document your intention. So it's always important to overcommunicate
1217600	1221280	why you're doing what you're doing in your two string method, which you'll see again in
1221280	1226880	the example Joshua Block has provided. He's clearly documented what this two string method does and
1226960	1232400	why he's doing so. I propose the format. Of course, another important point to make this
1232400	1238800	code reusable is provide programmatic access to the information contained in the value returned
1238800	1246960	by two string. So what does that mean? It simply means having really good getters in your class
1246960	1252160	so that the programmer won't have to pass through the string or the pass through the string return
1252160	1259200	from the two string method to use those values as clients. Having such code where you don't provide
1259200	1262960	good programmatic access to all the information or the fields in your class
1263680	1267680	will create error prone code. If you've been coding for a while, you'd know that
1267680	1274240	something that's absolutely painful is passing strings and trying to derive certain values from
1274240	1278880	a string, especially given that it's highly dynamic and the code could change in the future
1278880	1285520	or the format could change too. Therefore, using code or writing code that passes strings
1286160	1291680	can create, as I said, highly volatile error prone code. So the simple way to solve that,
1291680	1297280	of course, is as Joshua Block states provide programmatic access, all these values can be
1297280	1303040	returned or are returned in the two string method. However, for the individual values, it's important
1303040	1309120	to have getters. And if you look over here, the client can then easily just use get error code,
1309120	1315440	get prefix, get line number, instead of passing through this string here returned by the two
1315440	1320400	string method. And in fact, Joshua Block has put it the best way possible. By failing to provide
1320400	1327040	accesses, you turn the string format into a de facto API, even if you specified that it's
1327040	1332320	subject to change. Because if the programmer has no way of getting these values with a getter,
1332320	1338080	then he or she will have to resort to using the two string method, despite it being subject to
1338080	1342880	change. Also, when writing two string methods, there are of course, like old programming,
1342880	1348640	and perhaps old life, certain exceptions, there's no requirement to write or override the two string
1348640	1354640	method of the object class in Java for static utility classes, because you simply wouldn't
1354640	1359440	be using the two string method because you don't create objects with a static class for enum types,
1359440	1364720	because Java's one is perfect enough, it represents all the values in an enum,
1365520	1371440	perfectly as to how it's implemented in Java. But however, you should still write them for
1371440	1376080	abstract classes, because simply put concrete classes are going to use abstract classes,
1376080	1380640	and they may use the two string method in the abstract class. So if you look at this abstract
1380640	1385840	class called shape, I have overwritten the two string method. And then we have some other
1385840	1392320	concrete classes called class, a square, that are over that are extending the abstract class.
1392320	1399840	And then if you run it, whoops, you'll see that it's using the two string method inherited from
1399840	1407440	the parent abstract class. And then it's printing out the area for the circle and square. So this
1407440	1411760	is the reason that it's important still to write two string methods for abstract classes.
1412720	1418320	As he said here, you should, however, write two string method in any abstract class,
1418320	1426000	whose subclasses share a common string representation. For example, the two string methods on most
1426000	1430960	collection implementations are inherited from the abstract collections class. That's correct.
1430960	1434800	And then of course, like the previous methods, he does state that it's probably a good idea
1434800	1439520	than writing this two string method on your own to use some kind of library of framework that's
1439520	1444720	already available in the open source community. So for example, he says here, Google's open source
1444720	1451680	auto value facility is cast in item 10 will generate a two string method for you as will most
1451680	1458480	IDEs. These methods are great for telling you the contents of each field, but aren't specialized
1458480	1465040	to the meaning of the class. Interestingly, when I read that, I realized, oh, actually,
1465040	1470720	maybe now you could just copy a code and put it in ChudgeGPT and it'll obviously create a
1470720	1474880	meaningful two string method. It can do things that are way more advanced than that, something as
1474880	1480240	simple as this. It'll easily do. So yeah, you essentially don't have to ever really have a lot
1480240	1485200	of, oh, spend a lot of time and mental energy writing two string methods anymore. You could
1485200	1490640	just use the tools available out there. Anyway, to finish it off, Joshua Block states, to recap,
1491360	1496320	overwrite objects to string implementation in every instantiable class you write,
1496880	1503600	unless a superclass has already done so. It makes classes much more pleasant to use and aids in
1503600	1511040	debugging. The two string method should return a concise, useful description of the object
1511040	1516240	in an aesthetically pleasing format. That's it. Quite a simple straightforward item.
1516240	1521760	Nonetheless, I wanted to go through it because it does help in writing good Java and well,
1521760	1526000	obviously go into code. Thank you for watching. I hope you got some value from that video.
1526000	1528320	I'll see you in the next one. Cheers.
