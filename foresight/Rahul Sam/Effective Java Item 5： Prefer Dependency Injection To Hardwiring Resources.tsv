start	end	text
0	6120	Hey everyone, welcome to yet another episode of my video series on Joshua Bloch's effective Java
6640	9120	Where I'll take the items that he has
9440	13980	Enumerated in this book and expand on them and try and make sense and understand
14560	17900	What advice slash programming principles?
18640	25340	He's noted down in this book and hopefully of course the reason for me to record this is as I'm trying to make sense of them
25340	29580	And understand them you too will learn something and gain value from it
30300	35400	Apropos Java and object-oriented programming in general of course as I usually do
35400	40620	I need to go through the proviso if you already watched the previous items you could just skip this part and save your time
41240	43760	But without further ado, I'll get started
44360	50680	Firstly, this is not a tutorial. I'm definitely not a teacher and as I've said many times already
51040	54800	The more I'm learning about Java and OOP programming
55280	59760	The more the more I realize how much of an expert I'm not therefore
60040	64020	Please don't think of this as a tutorial where what I say is
64720	68560	Gospel truth so to speak. I'm pretty sure already. I'm still in item five
68560	71660	I'm pretty sure I've already made a lot of mistakes. In fact
71920	77840	one person commented out a few mistakes that I've made in I think the first item so I'm really grateful for that so I
78440	82800	Do request if I do make any mistakes, please point them out
82800	88560	Leave them down below in the comment section. I'll pin them if there's something if it's something significant
89200	91200	Because then it's not not only just for me
91200	99300	But also anyone else watching these videos can can learn from the mistakes that I made think of this as the blind leading the blind
100360	102360	This is more of a
102680	107360	Exploratory disquisition and I'm as blind as you are perhaps even more
107960	110440	It's got nothing to do with the fact that I'm wearing glasses
111040	114560	It's simply the fact that I'm still very much new to Java
115640	120280	And an analogy that I've been using in the previous videos in this proviso section is
120680	125200	It's a lot similar to what one would do in a university tutorial setting
125880	130040	Where we've got we've got the teacher, of course, then we've got the bunch bunch of students
130520	135640	Working together on a certain assignment or problem statement trying to figure it out and make sense of it
135760	138320	So that's why I call it a collective
138880	143480	Exploratory disquisition and he has the third point as I said, I will inevitably make mistakes
144440	149200	There's no way that I can get all of this right because a lot of the concepts that he is a
150080	154520	Highlighted in these books. I've never ever used them in my day-to-day job
154520	157800	Let's say or my day-to-day programming. So it's all quite new to me
158120	162880	Some of it at least therefore again, sorry to keep being on a dead horse here
162880	171360	Please do point them out and given that this is a YouTube video series. Sorry, given that this is a coding video series
171360	176640	And it's on programming. It just makes sense to have all the code that I use on get up
176640	179100	So for each item, I'll break them down
179100	182680	I'll break the get up repository into different items and you could find not only mine
182680	188120	But even just your blocks personal repository to that is published, you know in his
188680	192100	Get up account, which is all the code used in the book. In fact
193320	197480	Alrighty, let's get started. So this is gonna be item number five
197880	202960	This was a very very interesting item. I've got to be honest the more I've learned about the
203600	210000	Dependency injection pattern the more I've begun to appreciate it and see the beauty in the inversion of control concepts
211000	213720	I would say Gwen Reed Martin Fowler's blogs
213720	217320	He's probably the person who introduced it to the broader programming community
217440	224200	But Martin Fowler has some great blog posts on in version of control and of course with dependency injection
225360	231800	Normally programmers at least I normally use it with the framework with with spring or caucus another framework that we use at work
232440	235560	And yeah, I've really begun to appreciate that pattern
236280	238280	and item five, of course states
239000	244960	Prefer dependency injection to hardwiring resources now before we get to any of the code
245120	248760	Let's try and get a few just definitions across now
248760	254840	Some people might not appreciate this and some people might be a bit turned off by just reading of definitions, but personally I
255680	256880	have
256880	262120	Great admiration and I'd say even even respect for words. I love language
263000	268120	Therefore I do try and rely on definitions quite a lot because I think it's a good way to get a high-level understanding
268320	272680	Before getting deeply into the code and sort of practically understanding
272680	276200	It's all it always I think it's always good to first get a theoretical understanding
276600	282880	Despite what some people might say where you know, it's all about the code and the practical understanding in any case, sorry
282880	284880	I'm way too equations
284960	289760	So of course two key words is dependency injection
289760	293760	Well, two key phrases would be dependency injection and hardwiring resources
293760	300040	So firstly before we look at any code, let's try and understand what what hardwiring resources is
301840	305320	I couldn't find a really good definition online
305320	308120	I couldn't find one that was succinct and
308760	312240	Conveyed and sort of encapsulated. That's not a programming pun
312880	319800	Encapsulated all of what this term meant. So I ended up writing my own and here's what I wrote down
320800	324720	Classes have dependencies, obviously. So if you have a class, let's say called
325720	328760	Person or a better class a class called employee
329040	334880	That class may have a dependency called class department because that employee might be a class of
335400	343240	That employee might be a part of a department. So in that case the employee class is dependent on the department class
344240	350880	Formally the client class dependent class depends on the service class for different utilities
350880	355960	It doesn't have to always be utilities, but in this case it makes more sense to think of it as a utility class and
356680	360240	Having dependencies can create tied coupling. That is true
360600	366400	Which should be avoided in software engineering, of course fundamental principles in OOP programming
366400	370840	It can create inflexible. Sorry, I shouldn't say OOP programming
370840	376800	It's software engineering in general, which is why we have patterns such as the microservice architecture because we won't
377280	380400	Services itself to be the couple not just at an OOP level
380920	382200	Getting back to this
382200	390960	It can create inflexible and untestable code if resources are hardwired by instantiating a service class and creating objects within a class
392200	395920	Ergo, we should prefer dependency injection design pattern
396440	399440	Correct. So this is the bit that we're gonna
400280	402280	Elucidate and expand on the most
402760	407920	the idea of why oh, sorry why it's not a good idea to
409440	413080	instantiate and and hardware resources in a client class
413760	416520	If it's depending on some other utility class
417240	422120	so now let's take a look at what dependency injection is because that is the
422520	426280	The solution that we're prescribed to this problem we faced with tied coupling
426800	432800	So I found this I found two definitions one is on geeks for geeks by
433520	439840	Gherpreet Sashdeiva. Here's his I'm assuming Gherpreet. Yeah, Gherpreet is probably a bloke's name. I'm assuming
441200	443800	Not I'm not I'm assuming here's his
444560	445880	Definition of what?
445880	453240	Dependency dependency injection is just to make it easy. I'm gonna call it DI because sometimes dependency injection
453240	457320	It's kind of like a tongue twister. So I'll just call it DI
458480	464520	DI is a design pattern in which one object supplies the dependencies of another object, correct?
464520	469000	It removes the tied coupling of dependencies. So the problem we had before with hardwiring
469840	473800	From the programming code so that it is easy to manage and test the application
474520	480640	DI is also classified as a form of the broader technique of inversion of control, which is something I touched on
480640	482640	So the way I think of it is
483520	485520	Inversion of control is a broader
485920	489120	Principle more of a even like a paradigm in programming
489120	494240	I wouldn't probably put it at that level, but it's somewhere between a pattern and a paradigm
494240	498540	Let's think of it that way which again as I said Martin Fowler and I believe
499140	505420	Uncle Bob, so I think those two people invented it or popularized it introduced and
506300	509260	dependency injection or DI is more of a
509740	514220	Implementation of what inversion of control is so inversion of control is more for a practice a
514900	521460	Principle that one can follow whereas DI is that most solid implementation in the form of a engineering pattern
522140	526500	The responsibility of providing dependencies is delegated to the external code, correct?
527460	532040	The interjecting code constructs the services and invokes the client to inject them
532380	536500	The client code clothe the client code need not worry about the
537020	540820	Interjecting code and how to build the services or in some cases
541500	545060	Even what actuals even what the actual service is being used?
546420	553060	Let me read that sorry the client code need not worry about the interjecting interjecting code and how to build the services
553060	560140	Oh, in some cases even what actual service is being used. Oh gotcha. So because it's a reference that we are passing
560780	564500	Through a parameter in some kind of method in some cases
564500	569260	We don't even have to worry about what the actual service that the client is using
570300	575100	So of course reading this definition one thing that should remind you of is
576180	580420	frameworks a very popular one or probably the most popular one is spring and
580860	585660	You know the auto white annotation which helps us to inject dependencies into our
586620	588420	components and
588420	594100	That's essentially the framework taking care of that. So there is this bit here where it says
597860	599860	That line right there
600700	605260	The responsibility of providing dependencies is delegated to external code
605260	609140	So this is really what inversion of control is we are inverting the control
609140	615420	They're giving that control to an external party or an external framework in this case and that's what's going on here
616300	618300	so the definition by
619100	621220	Oracle docs and would be
621820	626620	Di enables you to turn regular Java classes into managed objects
627180	635340	Again in inversion of control this management is done by the framework and and to interject them into any into any other
635660	641500	Managed object using Di your code can declare dependencies on any managed object
643780	649460	So if you really think about it what DI allows is in many ways is to follow that
649500	651780	good old OOP principle to prefer
652340	656420	composition over inheritance because you will see in the example soon
657660	659660	the dependent class is
660060	662780	composed from the class that depends on and
663460	665740	Di allows this composition to take place
665820	672820	So I've made a mistake here. I should type effective Java example because these are the examples. We're gonna take a look at
673940	676620	Alrighty firstly, let's take a look at how not to do this
677020	682940	How it would be done if we didn't use the DI pattern by hard-wiring resources
683620	685620	the first approach that
686060	688340	Joshua block has given in the book is
690180	692180	By using
692300	696540	Static utility classes or by using static utility methods
696540	703380	So firstly in the example, we're gonna use there's a class called spell checker which depends on a class called lexicon and
703820	709180	That example is what we're gonna use across and eventually we're gonna use DI onto that just to show how it works
709180	714460	And and why it's a better option. So it's quite straightforward despite not being the proper way to do this
714460	721000	It's sort of an anti pattern. We're doing a clear hard-wiring here on line number nine. We're creating this immutable object
721600	727560	The spell checker class is dependent on the lexicon class and we're storing it in a variable
728200	735360	Coordictionary and that's what we're using throughout this class and we're creating this immutable object using private static final despite it being immutable
735360	742400	It's still tightly coupled because it's hard-wired onto the class itself every time the spell checker class is instantiated
742400	748320	Another example Joshua block highlights is using a singleton another way people do this. It's quite similar
749000	755120	Nevertheless, we're still hard-wiring a resource. I realize I've made a mistake here. I should get rid of the static keyword
755200	758600	That's where that instance of this class is given now
758600	765200	Yes, there'll only be one object of the spell checker class, but the hard-wiring has still taken place, which is why he states
765920	773160	neither of these approaches is satisfactory because they assume that there is only one dictionary worth using
773360	775360	which is the one that be hard-wire
775800	777840	here and
777840	785960	Here in practice each language has its own dictionary and special dictionaries are used for special vocabularies
786800	791520	Also, it may be desirable to use a special dictionary for testing. Correct
791520	796520	I think I might get to the testing bit a bit later, but I found a really good article
797120	801200	Or like a blog post by spring as to why the DI pattern
801720	805160	Makes testing much more easier in any case getting back to this
806040	811880	It is visual thinking to assume that a single dictionary will surface for all time. So this
812400	818440	Tide coupling again that we touched on makes all these assumptions which in the real world probably
818960	827080	Won't stand static utility classes and singletons are inappropriate for classes whose behavior is parameterized by an underlying resource
827720	829720	classes like the spell checker
830200	836040	What is required is the ability to support multiple instances of the class in our examples spell checker
836360	843680	Each of which uses the resource desired by the client in our example the the dictionary. So that's the resource a
844720	850360	Simple pattern that satisfies this requirement is to pass the resource into the construct in
850520	856920	constructor when a new instance when creating a new instance and that is the solution that we shall
857640	859640	You know do a deep dive into
860440	865720	That's happening right here in line number 16 and this here is in fact dependency injection
865960	868920	So we are passing that into the constructor of this class
871120	874280	This is one form of dependency injection
874680	880920	The dictionary is a dependency of the spell checker and is injected into the spell checker when it is created
880920	886400	So every single time a client's gonna create an instance of the spell checker class the dependency is injected
886400	888400	we expect the client in fact to
888960	892160	Inject that dependency or pass it when using this class
892720	896640	So before we look deeply into the spell checker example in effective Java
896960	901760	Let's take a quick look at this example. I found line a courtesy of by all done
902320	906960	I can never pronounce that name. I know every Java programmer uses this blog by all done
907760	910880	For work, but I know that most of us can't pronounce it
911280	913280	so this example here is
913520	916160	How one would normally use di because a framework
916640	917840	Is it for us?
917840	919840	So this is an example from spring, of course
920160	925600	And what we have here is we have a class called foo foo matter and you've annotated it
926160	928960	with the component annotation and what this
929920	938320	Tells the compiler or the framework is to put this into the dependency pool or the object graph. I believe and and then the it's in the
938880	945520	Context of the application in the application container and all these dependencies will be created and they will exist
946080	952160	Within a given scope, of course the scope can change. I believe there's the application context as the request context
952400	954880	So depending on what the scope that we want
955360	958960	We can define how this component can live and exist
959440	964320	And then this foo service class is a dependent is dependent on foo foo matter
964640	968240	And all we're doing here is we're injecting the dependency
968560	972400	Using the auto watt annotation and this framework takes care of all of that
972720	976000	So spring really injects foo formatter into the foo service class
976400	979440	Now this is mostly how on our day-to-day view would use di
979920	985040	But of course, we're not here to learn about spring. We'll he'll learn about the dependence injection pattern
985840	987360	at least how it's
987360	989120	defined in this item
989120	992560	In comparison or in contrast to hardware and resources
993280	999040	So here's the example we have. We have simply defined a private final variable of lexicon type collisionary
999120	1003840	There's no obviously instantiation taking place. So there's no object creation taking place
1004400	1006400	Therefore, there's no hard wiring
1007120	1009920	And then we have the constructor where we pass the dependency
1010000	1013440	So we pass the reference the the dependent object of the reference
1014160	1019200	as the client's creating an object from the spell checker class and then
1019840	1024880	Within the constructor, we set that into the private final variable within the class
1025200	1028640	So in that way, we expect the client to provide us with the implementation
1028720	1031680	We don't do the implementation and over here just to be safe
1032160	1035440	Just your block has used objects dot required on now
1035520	1039920	So what that tells us is that we can't pass a null value into this if if we do pass
1040480	1045520	Anything that's null it's going to throw another point of exception and that's a extract check that we
1046400	1052160	Pass that we have in this constructor. So then when the client wants to use this spell checker class
1052240	1057440	It'll look something like this. Let me quickly demonstrate that. So if I'm going to create an object of spell checker
1057520	1058880	I don't know why
1058880	1060880	IntelliJ keeps doing that. It's kind of annoying
1061920	1063920	All I got to do is this
1064400	1066400	new oops
1070480	1075120	And then I and here I'm passing the implementation where I'm creating a new lexicon class
1076480	1080880	So that's what we're passing here on into line number 16 in the constructor
1081840	1085520	And that's it. It's as simple as that. That is what dependence injection is
1086080	1091840	So we expect the client to do the implementation without doing any hard wiring and the great thing here is now
1092160	1097280	This gives the client the flexibility to pass any type of lexicon. You know, it could be
1098080	1102400	Dictionary two dictionary three doesn't really matter over here. I'm just creating it on the go
1102800	1104800	But or on the fly. Sorry
1105120	1108640	But it could be a different type. It could be a sub type of lexicon
1108640	1111200	There are many things that we could pass into this constructor
1111760	1119120	And that creates loosely coupled code. So we continue while our spell checker example had only a single resource to dictionary
1119680	1124880	dependency injection works with an arbitrary number of resources and arbitrary dependency graphs
1125520	1130320	It preserves immutability, which is because one one object exists in the dependency graph
1130720	1137200	So multiple clients can share dependent objects exactly assuming the client's desire the same underlying resources
1137840	1143120	Dependence injection is equally applicable to constructors static factories and builders
1143280	1146080	Of course, because all those things are just methods which can pass
1146880	1149440	Values into so just saw that idea of
1150240	1155440	Or the what he mentions here that in this example, there's only a single resource being used
1156240	1158800	For an example like this in in real life
1158800	1164240	This is quite rare because one class or one object generally will be dependent on many other objects
1164640	1165600	In a case like that
1165600	1172320	It's much easier using a framework because then all you got to do is use auto wired or inject or or any other annotation
1172320	1174320	depending on the framework and
1174320	1176320	Let the framework take care of it by
1176480	1183440	Inversion of control, let's say and then we give an example of how the di pattern has been used in the java utils library
1184400	1189280	Uh, in fact in it's it's used the example. He's given it's for functional programming
1190000	1194880	He says a useful variant of the pattern is to pass a resource factory to the constructor
1195680	1200160	A factory is an object that can be called repeatedly to create instances of a type
1200240	1206480	We shall see soon a good example of it such factories embody the factory method pattern before we continue
1206560	1212960	Let's quickly get a quick definition of what the factory method pattern is probably one of the most popular patterns in oop
1213760	1215760	It is design patterns in oop
1215760	1220960	Factory method is a creational design pattern that provides an interface for creating objects in a super class
1221280	1226960	But allows subclasses to all to the type of objects that will be created. This is from refactoring guru
1227200	1230080	So i'm not going to go go deeply into what the factory method pattern is
1230080	1235440	But essentially it's a pattern that's used when creating objects and it sort of makes sense to use di or a
1235680	1240480	variant of di in the factory method pattern because what we're really doing here is creating objects
1240720	1245200	So the example joshua bloke has used is the supply interface that was introduced in java 8
1245680	1250480	To implement functional programming. It's a part of the java utils function package
1251280	1253840	And what this really allows us to create objects
1254640	1258240	In a functional way or in a functional programming paradigm
1258880	1263920	What we what a client can do is pass in a factory, which is this supplier
1265680	1267920	To create a subtype of the specified
1268640	1270640	type via the generic because
1270960	1275680	We if you go to the example in fact, should I okay? So a really good example
1275680	1277360	I found is
1277360	1279360	on in this article by
1279440	1281440	Who's written this?
1285920	1290640	Someone called the cell 23. Okay. I haven't got a proper name. It's just a pseudonym
1291280	1295920	Anyway, this example here was is really good. It explains what the supply interface does
1296880	1298400	so
1298400	1304640	What it allows is it uses a wildcard. So it uses something called bounded wildcard type
1304880	1308560	In fact, before I get to explaining it, I mean, let me quickly read this paragraph
1309360	1311360	by joshua bloke himself. So
1311360	1313360	methods that take a supplier
1313760	1315760	So that would be this method here
1316080	1323440	The the the create method. I'll read that again methods that take a supplier or an input should typically constrain the factory's type parameter
1323920	1329600	Using a bounded wildcard type and that's what we're doing here the bounded wildcard type
1330080	1332080	what this really means is this
1332320	1334320	generic type we are passing into this
1334960	1335920	method
1335920	1339680	Into the supplier it should be a subtype of tile
1340240	1346320	And that's why it's called so the the upper bound of that is tile and it's that's why it's called bounded wildcard type
1346400	1352800	So generally the highest upper bound of something would be object because everything is a subtype of object in java
1353200	1354400	but in this case
1354400	1359520	And if any type that we pass here should should extend or be a subtype of tile
1359840	1363680	So it's really constrained as joshua bloke has delineated on the book
1364320	1371440	Using this bounded wildcard type to allow the client to pass in a factory that creates any subtype of a specified type
1371760	1378400	Simply what the tile factory is is an object that can be called repeatedly to create instances of type tile
1378800	1384560	And then another example, which I was showing here this block post by this random person on geeks for geeks
1385200	1389200	Is much clearer than the one in fact joshua bloke has given in the book
1389840	1394560	So at least to explain what the supplier interface does so over here
1394640	1397920	We have a supplier and we're saying its type is double
1398480	1401200	And we have this right random value variable that we're creating
1401840	1407040	And then simply what this does is it it creates an object every every time it's called and then
1407920	1409920	The only thing the supplier interface
1410240	1415600	Contains is one method called get which allows us to get the object that we create using
1416400	1422320	Yeah, of course using using the cat method. So yeah, the point that he's trying to make in the book is that this supplier interface
1423040	1426240	Is a variant of the dependence injection
1426960	1431040	pattern being used in fact in a factory method pattern
1431120	1439440	And then he continues although dependence injection greatly improves flexibility and testability
1439600	1446000	So that now I want to get to this article on spring. I would leave a link to this down below in the description
1446400	1449360	It's a great article. I highly recommend you reading it. Um
1450560	1457760	You will see the value of using di especially when it comes to testing now. I've personally had the experience of
1458640	1460640	appreciating
1461280	1465360	Di especially in the context of things like hyphenate using ORM tools
1466000	1469440	That'll make testing much easier with j unit in java. So
1470320	1474480	Therefore, I highly recommend you read this article. It's it's well worth it worth a read
1477920	1480720	So I'll read that again because I keep interrupting myself
1482080	1486000	Although dependence injection greatly improves flexibility and testability
1486400	1490640	It can clutter up large projects which typically contains thousands of dependencies
1491120	1497040	This clutter can be all but eliminated by using a dependency injection framework such as dagger
1499120	1504240	Goose juice GUIC never heard of it and of course spring. So that's kind of what I mentioned before
1504640	1510240	Over here. There's only one dependency, but generally in large projects. That's not the case. There are many dependencies
1510720	1512880	In that case, it just makes sense to use a framework
1514320	1516880	And then we finished off by just your blog saying
1516880	1524640	In summary, do not use a singleton or static utility class to implement a class that depends on one or more
1525040	1527040	underlying resources that would be hardwiring
1527840	1530480	Whose behavior affects that of the class
1531200	1536640	And do not have the class create these resources directly as we saw in the anti pattern examples
1537360	1539360	instead pass the resources
1540160	1542160	like that
1543120	1547760	Or factories to create them into the constructor or static factory or builder
1548480	1553680	This practice known as dependence injection will greatly enhance the flexibility
1554400	1559120	Reusability and testability of the class. That's it. It's quite a simple item
1559440	1564880	but it's it's ubiquitous this pattern is ubiquitous in Java programming and
1565600	1568800	I think especially using it via framework
1569360	1572960	As a client we would be clients in that case. We will start seeing its value
1573520	1578560	Therefore, it's something that's worth diving deep into and trying to understand
1579760	1583840	That's it. Thanks. That's watching. I hope you found value in the video and enjoyed that
1584480	1589440	And really I do hope that I'm getting a bit better at making these videos because sometimes as you can clearly see
1589760	1591600	I struggle one to
1591600	1596480	Code live but also to to articulate some of these concepts in my own words
1596960	1601680	But hey, it's a process. It's it's it's it's a journey that counts to use a terrible cliche
1602480	1604480	Thanks for watching. Cheers
