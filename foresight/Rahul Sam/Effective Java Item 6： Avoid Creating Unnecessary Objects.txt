Hey everyone, welcome to yet another episode of my video series on Joshua Block's effective Java
where I cover and
Expound on the items that he has emulated in this book and of course
what I've been trying to do in the previous videos or episodes is to
Flesh out and try and make sense of what he's talking about in the different items in this book and
Hopefully as I try to make sense of them the purpose of me
Sharing this publicly and uploading these videos is that you too can gain some value from it. That's one
I would say that's a primary purpose
But the other is of course that there's that sublime effect where by me trying to teach someone a
concept that I really
Fundamentally don't still properly grok or understand
Paradoxically, I understand it better. So yep, it's it is sublime indeed and it works well
Say all that without further ado, let's get started. So as per usual
I'm gonna repeat the introduction that I've sort of
Repeated in all the other episodes. I just feel like I need to do that kind of due diligence as a sort of ethical duty
Let's say
So if you do want to skip it, of course, please go ahead because I'm just repeating the same old points
I don't want to waste your time
This is not a tutorial. That is the first caveat in this proviso. This is not a tutorial
I am not a teacher and I certainly am non-expert
in fact a point that I've been repeating ad nauseam is that the more I've
Understood Java and the concepts
He's outlining this book Java and OP in general
I'm realizing how much of an expert I'm not so that's really interesting and very humbling indeed
And I don't mean that in a false modest sense. I mean, that's sincerely
An analogy or yeah, probably an algae
I'd like to use to explain what I'm trying to do here is the blind living the blind. I am as naive or perhaps even more
blind and
ignorant and naive and oblivious all of those
things
As as much as you are and yeah, even probably even more. So this is not my tutorial
I'm not trying to teach you anything
So whatever I say, please do take it with a grain of salt. This is a
Exploratory
Disquisition another analogy. I've been using as what one would see in a
University tutorial where we've got a tutor
bunch of students trying to make sense of and understand a
problem statement or some some programming principle, which is why unequivocally I will
Inevitably make mistakes. So please point them out not just for my sake
But even for anyone that's watching these videos if I do make a very fundamental
Crucial mistake
I'll try my best to be rectified by leaving a comment myself
But if you do pick it up, I shall pin those comments just so that I don't mislead anyone
With any
Fake news to use a politically
Overloaded term and of course as this is a programming video series all the code that I've been using for this effective Java series
It's available on my GitHub. I've got a separate repository for each item and
As I go through these all the code will be published here
Anyway, now that we got the proviso out of the way, let's get started with item number six
where Joshua block states
Avoid creating
unnecessary objects and this is quite an interesting one because
I certainly am guilty of doing this of making these mistakes
So it's it's valuable and worth our time. I think that's
Java or generally OOP programmers to
Understand why, you know, just sort of creating objects at a hawk without putting any thought into it
There's a bad idea and perhaps even an anti-pattern
Of course, this we are still in chapter 2 in creating and destroying objects
So before we get to any of the content in the book, I kind of want to get some fundamentals real
OOP basics out of the way
Look, if you don't know what objects are this
Video series really probably is a bit above your level. I'd say go and watch some basic
OOP fundamental videos on YouTube just watch like a basic tutorial, but
The definition we all hear of an object is that it is an instance of a class and the class is what acts as a blueprint
as to how it defines
How an object behaves when it is instantiated
but something a bit more formal is the definition by the oracle docs and
He goes like this
Software objects are conceptually similar to real-world objects. That is true something. I truly
Admire and appreciate about object oriented programming. I think it's brilliant that they've created that connection
In fact, sorry to go off on a tangent here
if you do start
Following some of the design patents a bit more seriously so for instance the 23 patents
popularized by the Gang of Four you'd see a lot of those patents to
Have many deep connections to engineering patents in the world
That's let's say not the conventional. Sorry the the the the conventional world which doesn't invoke which doesn't
Attain to software engineering, but sort of the let's say civil engineering or some other kinds of engineering
Anyway, sorry. Sorry. I'm going off on a tangent back to the definition
Software objects are conceptually similar to real-world objects. They too consist of state and related behavior and
Objects totes so it's state in fields
Which are variables in some languages and exposes its behavior through methods of course and we shall see a few examples of that in this item
Which are called functions in some languages
methods operate on an object's internal state and serves as the primary mechanism
for object-to-object communication
Hiding internal state and requiring all interaction to be performed through an object's methods is known as data
Encapsulation a fundamental principle of OOP or object going to programming
So once again, if you don't know what encapsulation is what inheritance is those really fundamental ideas in OOP
I think this video is a bit above your level
Yeah, so that's probably should be caveat for this item in particular
Okay, so now let's try to understand from a JVM and memory management perspective
Well more from a JVM perspective. We're not gonna go too deeply into memory management
how these objects exist at least
Apropos the Java virtual machine now again, you would know what the JVMS JVM is what allows to execute Java code on
Any any machine, which is what makes Java
Quite popular because it can work on any operating system for instance
so
We have the call stack of course. Here's where we make calls or we give instructions
To call different objects and whatnot our different methods. Sorry
And the JVM primarily divides the memory into two two spaces or two domains now, of course
Oops, I had the microphone now, of course
It's okay. So firstly, it's the stack memory and the heap space now, of course these two high-level
Demarcations also further divided into let's say sub-domains so the heap space for instance would have the dynamic meta space
Which holds static content and we'll get to that too
So the stack memory is used for static memory allocation, that's correct
What static memory allocation sort of means for all intents and purposes is that an object created?
Statically, let's say once it's in memory. It will remain in that state
Throughout the application lifecycle, whereas dynamic objects change state
They can change and they don't live in the stack memory
so
Also the the stack memory
Again pretending to the JVM and Java holds primitive values
So values like int or char
These types live in the static memory
and of course as I said before it
Well, I don't think I did say that before anyway
There are references to dynamic objects that live in the heap space now look all these definitions are fine
For starters, but the best way to make sense of it is of course to an example
So if we take person here this in the person method
this
Int value that you're passing that would live because it's a primitive type and it's a primitive
Variable that would live in the stack memory
Also, I apologize if I did say static memory before I should have said stack memory
And then string which is a class and it's you know a class you can create an instance of that class
What would live in the stack memory in that case wouldn't be the object itself
but rather a memory address or a reference to the actual object which lives in the heap space in the string pool in this instance
So and that's dynamic its state can change unlike some of the
static types
so
Yeah, as I've written down here. There's a few notes. I took just to make sure that I stay on track. It's
It's used for dynamic memory allocation of Java objects and GRE classes at one time
So that means when applications running its state can change
Also new objects which sometimes seem to be short-lived live live in the heap space. I shouldn't just say it outright
Tends to be short-lived. There are
some long-lived objects and here's where you know
The different algorithms in garbage collection so that that's garbage collection is essentially essentially
Memory management here. Here's where different algorithms play a role and allocate objects into you know, like for example the permanent space
I think it used to be called like the nursery different parts of the
The heap space. I'm not gonna go into that. This is this this video is gonna be way too long if you're getting to memory management and Java
but the point is
these objects are dynamic and
They the references for them are stored again in stack memory
And
On that note, of course now that we understood sort of how objects exist at a very very high level
Pertaining against Java and JVM
Let's get to the item and the item essentially is telling us how to reuse objects and why in fact it's better
To reuse objects than creating new ones and how doing so will make the code
Cleaner more stylish more professional if you could use that term and even as we shall see with some examples
Make the code run faster and that definitely is a benefit
So the book starts off with a rather ridiculous example as what not to do
So as Joshua Block has pointed out he has left the comments in an extreme example of what not to do
I've never seen this done by any programmer to be honest, but
This certainly isn't something one has to do where when we already have this string. We create another instance by using a new keyword
This is sort of how most of us do it
So the proper way
The improved version he calls it, but let's just say it's a proper way and
Here's what Joshua Block states
The statement creates a new string instance each time it is executed and none of those objects object creations is necessary because
So bikini can live here and
Then it could just point to that all the all the references one one object can exist in the
Heapspace, but if you have this new keyword every single time it's invoked a new object is created and that is a completely inefficient
and
ridiculous waste of space and time
The argument to sorry I'll show it scroll down the argument to the string constructor bikini is itself a string instance that is correct
Functionally identical to all of the objects created by the constructor if this usage occurs in a loop or in a frequent frequently invoked
method
Millions of string instances can be created needlessly
So here's an example of what he definitely shouldn't do and just like the Bible
We're gonna go from the Old Testament where what the goat says what he shouldn't do and in our case the Java code
Joshua Block tells us don't don't do this. That shall not do this to the New Testament what you should do and what you should consider
on when when writing code as to how
These techniques can allow us to reuse objects
It's interesting how I just converted this into a theology session
So the first way one could easily reuse objects is something we already covered in
In at item one is in fact using static factory methods
I should say as Joshua Block stays here. In fact, I'll just read it out
You can often avoid creating unnecessary objects by using static factory methods in
preference to constructors when immutable classes that provide both
So the example here would be the Boolean class where value of is a static method and that is indeed preferred over
using
The constructor and I think since Java 9. Yes, it does say here
This has been deprecated. We can't even use this constructor because it's been made private. So
The the static factory method doesn't require a creation of objects every time it's invoked
Because static members are common to all instance instances of a class and again the way I think about it
Oh, I guess this is exactly the way one should think about it is it belongs to the class
Therefore, all the instances of that class will will share this
Static member
So that member itself can be shared up amongst all objects whenever that class is instantiated and
As I did mention a bit before
Static variables live in something called the dynamic meta space within heap memory and also an ancillary point
He also adds in addition to reusing immutable objects
You can also reuse immutable objects if you know they won't be modified. So
For reusing objects, they don't have to all be declared
final and
Static and make for them to be mutable rather even if we know a certain object is
Mutable, but still it won't change. We could reuse that using static factory methods
So there could be some operations where it's much more computationally expensive to keep
Invoking a certain function and here's the example Joshua block has used
So before I do get to the example, probably I'll just go through his justification
He says some object creations are much more expensive than others. That's right
If you're going to need such an expensive object repeatedly
It may be advisable to cache it for reuse
Unfortunately, it's not always obvious when you're creating such an object. That is true
However, here we have a solid example where this could be computationally expensive and that is
using regular expressions
So this is a very very simple class
Well, what it does. Well, the class has these static methods
we have well
Practically it should only have one method called is numeral, but just for
Demonstrative purposes we have is numeral slow and
It's numeral fast and we shall see why we have those two methods in a bit
So firstly the slow method what it does. Okay, so let me let me take a step back
What this method does is it returns a true or false and
And what that true or false tells us is if a string we pass on to this
fulfills a certain regular expression
And what that regular expression is looking for really is if the string we pass on to is a Roman Roman numeral
and
Here here though, this is the slow way what happens here is every single time we invoke this method and we pass the string
The the the string class invokes the matches
Method which uses a finite state machine
Which we shall we shall get into what that is a finite state machine to do the matching
And and that is computationally expensive. So every single time a pattern instance has to be created here
A pattern instance really that won't change but for we know that why would we not reuse it
But every single time the method is invoked
We're creating this finite state machine instance and then after it's done
It has to be garbage collected and the JVM has to take care of it. So that is computationally expensive. So this is a slow way
But what he does propose instead is to cash it. So we have the regular expression instance
We call that
Roman here and we use this compile method in the pattern class and we explicitly compile it into an immutable pattern instance
Which we still here and we call it Roman as I said and then we just reuse that in the esnemeral fast method
Simple as that and to put it most succinctly
He states while string dot matches is the easiest way to check if a string matches a regular expression
Which is what we've sort of done here
It's not suitable for repeated use in performance critical situations
He continues creating a pattern instance is expensive
Because it requires
Compiling the regular expression as I said into a finite state machine
So let's get a quick understanding of what a finite state machine encompasses because it pertains to the topic
This is definition. I found from brilliant org by
Kale more and Deshan Gupta is a
system where particular inputs cause particular changes in state can be
represented using a finite state machine or using finite state machines and
This is a really good example. I found it was a 10 minute video by Valhalla data systems and the book here
He not only explains quite simply with brevity what a finite state machine is
But also afterwards shows a solid implementation in Java code
So I'll leave a link to that video down in the description. It's well worth a watch
But this is one snapshot of the video
And here's what happens. So when we pass a string, which is really a an array of characters in Java
It'll take each character and start going through the FSM
I'm just gonna call it FSM because it's finite state machine is a mouthful
So it's gonna start off with with state zero and if it's an at sign it'll go to one
Oh, by the way, this
pattern it's looking for is simply for an at sign or a hashtag. So this has nothing to do with
the reg X given here because this is for
Checking if it's a Roman numeral, but this is a different example. Just so you don't get confused
So all it's looking for is if the string contains an at sign or a hashtag
So it starts as I said with state zero if it contains an at sign goes to state one
If it's a number between or an integer to use proper terminology between zero and nine
It'll go to state two if it's a hashtag. It'll go to state three
And it sort of loops it will remain in that state because so if it's an at sign it'll go back to state one
so
For all the intents and purposes
This state represents at signs this state represents the hashtags and this represents integers
That's really what a FSM is but for our problem
We don't want this computation happening every single time this method is involved
Which is why we create one instance and we store that object with its state in a constant
This is our constant I declared in Java
So let's look at the time differences. Now firstly, I'll invoke the slow method if I run this program
You'll see that's how long it takes. Let me zoom in a bit there. So this is
Millions seconds, isn't it? This is it's always in nanoseconds
Man, I'm not even sure. I think this is a nanoseconds. I
Looked it up, but in fact both my
Options were wrong. It's actually microseconds. There you go. That's my ignorance. So it takes around 115 microseconds
For this function to run and now if we do change it to fast
Now keep in mind what the fastest what this method does is that it doesn't invoke the matches method in
Well, sorry, it doesn't work the matches method
But it isn't compile a new pattern every single time because we just use the cached Roman
Instance here. So if we run that it'll be much faster
There you go
half the time
60 milliseconds 12 milliseconds for the next computation and
Joshua block states in his machine. It was for a eight character input string. It was six six point five times faster
Which is why he says the improved version is of is numeral provides significant performance gains if invoked frequently
Then it continues and that's a really good point. He sort of touched on this in
the in item number one where you could in fact give
Static methods or even static values a name. It's more clearer
It's more. It's it's quite clear that this pattern is a Roman pattern Roman numeral pattern
So not only is the performance improved but arguably so is clarity the clarity because we know what the pattern we're using here
Making a static final field for the otherwise invisible pattern instance
A love allows us to give it a name. It's more explicit and clear
Which is far more readable than the regular expression itself
and then he makes a bit of an ancillary point just to clarify about lazy loading because now as I said when we
Do it this way when we declare it in a private static final field and cash that object
This belongs to this class. So it can be reused all the
Objects of this class all the instances of this class will reuse this but what if we never use this object?
It's just gonna be created
For no reason at all and it's gonna exist in the heap space. Sorry. Yeah in the dynamic meta space in the heap and
Here, you know, he says, oh, look, we could probably lazy load. However, perhaps it's not required
We don't have to over complicate things for
Optimization as don't canoe and I think it was apocryphally attributed to him
premature optimization is the root of all evil and
He continues not only is the performance improved. Oh, sorry. I already read that part
If the class containing the improved version of the is numeral method is initialized, but the method is never invoked
So what if this is numeral fast method is never used and this just exists there?
The field Roman will be initialized needlessly
It would be possible to eliminate the initial initialization
By lazily initializing the field the first time the is numeral method is invoked
But this is not recommended as it's often the case with lazy initial initialization
What can I read the word those two words together lazy initialization? It would
Complicate the implementation with no measurable performance improvement. So it's not required. It's fine
To create an object even though it may potentially not be used
especially with how fast
Jvms of these the JVM and processes out these days
And with that we move to a bit of an interesting problem here
What about less obvious situations for object reusability? I'd say this one seemed quite straightforward
Well, I don't know if it was at least for me
But when I saw the code trust your block has written it came together. I was like, oh that makes complete sense
but I
from being honest, I probably would have done it this way and made the mistake of invoking this pattern instance every single time so
It's probably not so obvious for inexperienced programmers like myself, but nevertheless
Keeping aside aside the self-flagellation
What about when it's less obvious? So he says when an object is immutable like the Roman object here
It is obvious that it can be reused safely
But there are other situations where it is far less obvious even kind of intuitive
Now the example that Joshua block is used for that is adapters
adapters simply are an object
which backs other objects by allowing two incompatible objects to
communicate together
it's used a lot in the adapter pattern and even though
Joshua block doesn't talk about the adapter pattern here
It's I think it's worth going through a few definitions definitions as to what the adapter pattern does
But of course, I'll leave
Some good articles down there in the description. There's a good one by Vile Dung
Where he goes through a few examples as to how the adapter pattern is used and how adapters these objects are used
So the first definition is by refactoring guru
Adapter is a structural design pattern which allows incompatible objects to collaborate
The adapter acts as a wrapper between two objects
It catches calls for one object and transforms them to format an interface recognizable
Recognizable by the second object on the adapter pattern. I would recommend
If you want to get a good understanding of the adapter pattern
This book
Headfirst design patterns goes quite deeply into the adapter pattern with some really good examples
So I'll leave a link to this book down below in the description too
And I'm hoping to cover some parts of this book at least after I'm done with this
It's probably gonna be next year
So the next definition that I found for the adapter pattern is an adapter pattern acts as a connector between two
Incompatible interfaces that otherwise cannot be connected directly could be due to type mismatch whatnot an adapter wraps an existing class with a new interface
So that it becomes compatible with the clients interface
The main motive behind using this pattern is to convert an existing interface
Into another interface that the client expects
It's usually implemented once the application is assigned so one example as to how an adapter is used and
Even though I read some definitions of the adapter pattern. I wouldn't say that the adapter pattern has been used here
Exactly or precisely, but it's worth looking to how the adapter pattern is used and that is in the map interface
so we so of course the map interface
contains a method called a
key key set and
Our hash map, which is a concrete class will implement it which you see here
now what I
Did do so as a client what I would do is I would create a hash map
I would add key value pairs and what the key set does is it returns a bunch of objects all the keys
Which are functionally identical so we can cache that value the key set value
We get can be cached and that's exactly what we see here in the implementation of key set
so this method which is what returns the key set first checks if
the key set is present if this key set value is now which
Wasn't going there. Oh, that's interesting. I
Was clicking the the wrong
Variable look sorry, it's been a long day if this key set variable which is in the abstract map if this isn't available
So if isn't cached then a new instance will be sent if not
There's a requirement that same instance same object can be reused
So here's what where we see that an object is being reused a good
implementation in the JDK
So again to print more formally as to how this example makes sense
Theoretically although the return set instance is typically mutable. So that's the set that's returned here
All of the return objects are functionally identical
When one of the return objects changes so do all the others
Because they're all backed by the same map instance
While it is largely harmless to create multiple instances of the key set view object
It is unnecessary and has no benefits. So the similar point is
Biggest what this method returns is a set view. So of type set of the key set
While this key set the the values in the key set can change
It's
Functionally still the same so the adapter the the outer layer which it returns is still the same and that's a set
So that's why it could be cached another example of
Reusing objects where it's less obvious is of course auto boxing now
What that does is of course it allows programmers to mix primitive and non primitive type
So primitive would be int a non primitive type or a a box type would be
Integer while yes auto boxing does give the object more flexibility and give it more functionality
It's not always a good idea to auto box because what auto box does is create
A new object every time it's involved
So the example we've used or the example that joshua block has given is
In this sum class where in fact, I changed it to the proper way
So this is the bad bit to do it where we have used an auto box type long
And in fact the idea look at that it's even warning us to not to use this but rather to use a primitive type
Now with this if we do run this loop where it's running
2 to the power 31 times
An unnecessary number of objects of long instances are created in this loop. So if we do run it
It takes so long
Look at how long it takes it takes almost 3000 milliseconds and it keeps going
I'll just zoom into that
But simply by just not using an auto box type and rather using a primitive type
We save a lot of time because there's no object creation involved here
If you run it again
It's much slower
That's the advantage of using primitive types over auto box types and
Again, one has to be careful and the good thing is the the way you saw intelligent is beautiful
You got to love it the ide will normally warn you but you know in good programming etiquette
One should be aware of that and that's why he states the lesson is clear prefer primitives
So this here is the proper way to do it using a primitive type
To box primitives and that is a wrong way using a box primitive which the ide warns us against
Oops, uh, come on said
And watch out for unintentional auto boxing and then finally towards the end of the item
He does give some caveats and something I always appreciate about this book every single item has pros and cons
Uh, it it's a well written book because it looks into both sides of the equation. Let's say
And discusses the trade-offs
So the the first caveat is that it's not the case that object creation should be
Avoided at all costs, especially with how fast the processors are and how optimized the jvms
It's not that we should try our best to
Not create objects again do the whole premature optimization thing
That's why he states this item should not be misconstrued
To imply that object creation is expensive and should be avoided on the contrary the creation and reclamation of small objects
Whose constructors do little explicit work is cheap, especially on modern jvm implementations
Creating additional objects to enhance the clarity
Simplicity or power of a program is generally a good thing
And then we go to a classic example the classic example of an object
That does justify an object pool is a database connection, which is why
conversely
Maintaining object pool in this case would be a better idea unless the object is significantly heavy weight a like a database connection
So it depends on what the object we create is as to whether
It makes sense to optimize it and to reuse it or just simply create an object if it's lightweight for instance
The cost of establishing the connection is sufficiently high
That it makes sense to reuse these objects
This is something we see a lot with frameworks for instance a spring with the dependency injection
Something like a database connection could be injected
Into different components in the object pool or the object graph in this case
Generally speaking, however
Maintaining your own object pools clutters your code
increases memory footprint and harms performance. So what he means by
Maintaining your own object pools really is what we saw here
in the
numeral roman numeral example
This is kind of like what an object pool is we we define all these objects in our class and let's say we have 20 of these
That can cloud your code and make things a bit complicated and
Make the code unreadable or more difficult to read
So since
Modern jvm implementations have highly optimized garbage collectors that easily outperform such object pools on lightweight objects
It's not necessarily the case that one should always
avoid object creation and then we get to an interesting
sort of
Conclusive point in this item and that's the concept idea of defensive copying
What defensive copying
The simplest way to think of defensive defensive copying is that it's used to maintain
Immutability of an object and before we take a look at the example which I have here for defensive copying. It's when you get it
It's a rather simple concept, but it's used a lot across frameworks. For instance, um, sorry defensive copying. I'm not sure I confused
Reflections with defensive copying
But regardless it's a known concept in java programming
So what defensive copying is is
Where to maintain immutability
Instead of passing back a reference to the object at hand a reference to a new object is passed with the same values
Making it a copy for all intense for all intents and purposes. What that means is
Uh, you know what without me trying to theorize more. Let's look at the example here
So we have a class called full calendar here, which
Despite ostensibly looking immutable is in fact mutable
And this example is courtesy of courtesy of abc study guide. The link to this blog post article is down below in the description
So as a client when we use full calendar, what we're doing is we are passing this original date
Uh object of date type into the constructor and the constructor assigns that to this private final
Uh date object, which we think is immutable
But what happens is because we are passing this when the class is instantiated. So in line number 30
If for instance, let's say this original date value changes
The value of standard date also changes because they are both pointing to the same location in memory
Therefore, even though we've declared this as private final
And we think it's immutable. It's in fact not and here's where we can easily create a defensive copy
So the right way to do this would be in fact
When the class is invoked uh, or when when the class is instantiated and the construct is invoked
We create a new date object. We we get we get the value of it
So we create a copy of that with the the the date we pass here
And then using that value we create in fact a new object and then pass said that in standard date
That defensive copy ensures immutability of this class and the same thing when we are returning it when you're returning it
We want to return a new instance
and not
The uh, the one that was here because that too could change
And that's why we are we are passing. Um, we're not passing in this case. We're using the new keyword and creating a new
Uh date instance. So yeah, that's sort of my still I'd say high level superficial understanding of defensive copying
But whenever I do think of it, I always connect it to maintaining
uh immutability
But of course, I'll leave the code this code and also the the article that I got this code from
In the description so that you could look a bit more deeply
And to conclude here's what Joshua Bloch says about defensive copying
The counterpoint to this item is item 50, which is on defensive copying. So this item is is about avoid
Creating unnecessary object and here you would think we're creating an unnecessary object where every single time a new object is created
So that's why he says it's a counterpoint
The person item says don't create a new object when you should reuse an existing one
While item 50 says don't reuse an existing object when you should create a new one
like
In the example of defensive copying note that the penalty for reusing an object when defensive copying is called for is far greater
Than the penalty for needlessly creating a duplicate object
Failing to make defensive copies where required can lead to insidious bugs and security holds creating objects
unnecessarily
Merely affects style and performance and of course we need to always at least in my opinion prioritize
security over efficiency and performance, which is why
It's a good sort of way to end this item with the caveat that
This certainly doesn't mean that we should avoid creating objects at all costs
There are costs a cost could be security and that could be detrimental
And that's it. That is item number six on
The avoiding of creating unnecessary objects. I hope you found that insightful
Please do tell me how I can improve
In the way I communicate and articulate these concepts
But also as to how I demo and show the code
I would like to maybe even a bit more be a bit more slow and leave more comments
But perhaps the best thing to do is
Go on to take a look at the code yourself. This video. Think of it as only a prelude
I think that thanks a lot for watching. I really appreciate it. I'll receive the few comments here and there
On on these videos and it means a lot to me. It means a lot to me
And it's always nice to see that there are people actual human beings watching these videos and it's just not me
Rambling like a raconteur
Okay, enough rambling on the on in okay enough rambling on rambling ridiculous
Thanks for watching. Cheers. See you in the next one
